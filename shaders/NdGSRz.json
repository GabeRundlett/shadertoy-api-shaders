{
    "Shader": {
        "info": {
            "date": "1634221246",
            "description": "Following, 3b1b's excellent youtube video on Newton's fractal, I just HAD to code it!",
            "flags": 0,
            "hasliked": 0,
            "id": "NdGSRz",
            "likes": 3,
            "name": "Newton's fractal with roots",
            "published": 3,
            "tags": [
                "newton",
                "polynomial",
                "3blue1brown",
                "3b1b",
                "threeblueoneblrown"
            ],
            "usePreview": 0,
            "username": "ninofiliu",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "struct Closest {\n    int i;\n    float d;\n};\n\nvec2 mul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }\nvec2 inv(vec2 a) { return vec2(a.x, -a.y) / (a.x*a.x + a.y*a.y); }\n\nconst int deg = 10;\nvec2 roots[deg];\n\nvec2 f(vec2 a) {\n    vec2 ret = vec2(1.0, 0.0);\n    for (int i = 0; i < deg; i++) {\n        ret = mul(ret, a-roots[i]);\n    }\n    return ret;\n}\n\nvec2 fp(vec2 a) {\n    vec2 sum = vec2(0.0, 0.0);\n    for (int i = 0; i < deg; i++) {\n        sum += inv(a-roots[i]);\n    }\n    return inv(sum);\n}\n\nClosest getClosest(vec2 u) {\n    Closest closest = Closest(0, distance(u, roots[0]));\n    for (int i = 1; i < deg; i++) {\n        float d = distance(u, roots[i]);\n        if (d < closest.d) {\n            closest.i = i;\n            closest.d = d;\n        }\n    }\n    return closest;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 a = 2.5 * (fragCoord - iResolution.xy / 2.0) / min(iResolution.x, iResolution.y);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    for (int i = 0; i < deg; i++) {\n        float rot = 0.1 * iTime * (float(i)+1.0);\n        roots[i] = vec2(cos(rot), sin(rot));\n    }\n    \n    vec2 u = a;\n    Closest c;\n    for (int i = 0; i < 100; i++) {\n        u -= fp(u);\n        c = getClosest(u);\n        if (c.d < 0.1) { break; }\n    }\n    \n    fragColor.rgb = vec3(float(c.i) / float(deg));\n    \n    for (int i = 0; i < deg; i++) {\n        if (distance(roots[i], a) < 0.05) {\n            fragColor.r = 1.0;\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}