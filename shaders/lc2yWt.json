{
    "Shader": {
        "info": {
            "date": "1723186923",
            "description": "A constant width solid of (fairly) minimal volume.\n\n@mla version of @kmcrane original using a smoother SDF for the shape (qdist and map2/3 on lines 27 onwards).\n\nPress 'x' to see original shape. Mouse rotates.\n\nSee original shader for references etc.",
            "flags": 16,
            "hasliked": 0,
            "id": "lc2yWt",
            "likes": 3,
            "name": "Constant Width Solid SDF",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefields",
                "primitives"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "// @mla version of @kmcrane original using a smoother SDF\n// for the shape (qdist and map2/3 on lines 29 onwards).\n// Original licence:\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Constant Width Solid SDF, mla, 2024\n\n// Derived from code by @iq and @kmcrane\n// Paper describing shape: https://arxiv.org/pdf/2405.18501\n// See fork origin for other details\n//\n// x: show kmcrane original\n// c: show colors for octants\n\n#define AA 1\n\nvec2 map1( in vec3 pos ); // kmcrane original\nvec2 map2( in vec3 pos ); // mla optimized\nvec2 map3( in vec3 pos ); // mla version\n\nvec2 map(vec3 p) {\n  p.xy = rotate(p.xy,0.5*iTime);\n  if (key(CHAR_X)) return map1(p);\n  return map2(p);\n}\n\n// The SDF we want is maxdist(p,S)-2 where maxdist(p,S) is the maximum\n// distance from p to points in set S. Here S is the union of two copies\n// of the part of unit sphere in the positive quadrant.\n// See paper https://arxiv.org/pdf/2405.18501 for details.\n\n// For reference, a really short SDF for the shape.\nfloat sdf(vec3 p) {\n  bvec3 signs = greaterThanEqual(p,vec3(0));\n  const float K = sqrt(2.0);\n  float X = all(signs) ? K-2.0 : K;\n  p /= X;\n  float d = length(p+normalize(min(p,0.0)));\n  return abs(X)*d-2.0;\n}\n\nvec2 map2(vec3 p) {\n  // Streamlined version of map3\n  float scale = 0.5;\n  p /= scale;\n  float color = 3.0;\n  if (key(CHAR_C)) color += dot(vec3(greaterThanEqual(p,vec3(0))),vec3(1));\n  return vec2(scale*sdf(p),color);\n}\n\nfloat qdist(vec3 p) {\n  // Find maximum distance from p to the intersection of the unit\n  // sphere with the positive octant.\n  int n = int(p.x >= 0.0) + int(p.y >= 0.0) + int(p.z >= 0.0);\n  float d2;\n  if (n == 0) {\n    // All negative, furthest is opposite point in octant\n    d2 = norm2(p+normalize(p));\n  } else if (n == 1) {\n    // One positive, furthest point is on edge\n    vec3 q = min(p,0.0); // Project to axis plane\n    d2 = norm2(p+normalize(q));\n  } else {\n    // n == 2 || n == 3\n    // Otherwise, furthest point is one of the corners\n    vec2 t = vec2(1,0);\n    d2 = max(norm2(p-t.xyy),max(norm2(p-t.yxy), norm2(p-t.yyx)));\n  }\n  return sqrt(d2);\n}\n\nvec2 map3(vec3 p) {\n  float scale = 0.5;\n  p /= scale;\n  float color = 4.0;\n  if (key(CHAR_C)) color += float(p.x > 0.0)+float(p.y > 0.0) + float(p.z > 0.0);\n  float X = sqrt(2.0), Y = X-2.0;\n  // Find maximum distance to two sphere octants with radii X and Y\n  float d1 = abs(X*qdist(p/X));\n  float d2 = abs(Y*qdist(p/Y));\n  float d = max(d1,d2)-2.0;\n  return vec2(d*scale,color);\n}\n\nvec2 map1( in vec3 pos )\n{\nfloat radius = 1.;\nfloat M = 0.;\nM = max(M, norm2(pos - vec3(-0.292893,0.,0.)));\nM = max(M, norm2(pos - vec3(-0.287205,-0.0574411,0.)));\nM = max(M, norm2(pos - vec3(-0.287205,0.,-0.0574411)));\nM = max(M, norm2(pos - vec3(-0.281837,-0.0563673,-0.0563673)));\nM = max(M, norm2(pos - vec3(-0.271945,-0.108778,0.)));\nM = max(M, norm2(pos - vec3(-0.271945,0.,-0.108778)));\nM = max(M, norm2(pos - vec3(-0.267374,-0.106949,-0.0534748)));\nM = max(M, norm2(pos - vec3(-0.267374,-0.0534748,-0.106949)));\nM = max(M, norm2(pos - vec3(-0.254931,-0.101973,-0.101973)));\nM = max(M, norm2(pos - vec3(-0.251154,-0.150692,0.)));\nM = max(M, norm2(pos - vec3(-0.251154,0.,-0.150692)));\nM = max(M, norm2(pos - vec3(-0.24754,-0.148524,-0.049508)));\nM = max(M, norm2(pos - vec3(-0.24754,-0.049508,-0.148524)));\nM = max(M, norm2(pos - vec3(-0.237568,-0.142541,-0.0950268)));\nM = max(M, norm2(pos - vec3(-0.237568,-0.0950268,-0.142541)));\nM = max(M, norm2(pos - vec3(-0.228711,-0.182969,0.)));\nM = max(M, norm2(pos - vec3(-0.228711,0.,-0.182969)));\nM = max(M, norm2(pos - vec3(-0.225972,-0.180778,-0.0451944)));\nM = max(M, norm2(pos - vec3(-0.225972,-0.0451944,-0.180778)));\nM = max(M, norm2(pos - vec3(-0.223329,-0.133998,-0.133998)));\nM = max(M, norm2(pos - vec3(-0.21831,-0.174648,-0.0873238)));\nM = max(M, norm2(pos - vec3(-0.21831,-0.0873238,-0.174648)));\nM = max(M, norm2(pos - vec3(-0.207107,-0.207107,0.)));\nM = max(M, norm2(pos - vec3(-0.207107,0.,-0.207107)));\nM = max(M, norm2(pos - vec3(-0.207107,-0.165686,-0.124264)));\nM = max(M, norm2(pos - vec3(-0.207107,-0.124264,-0.165686)));\nM = max(M, norm2(pos - vec3(-0.205066,-0.205066,-0.0410133)));\nM = max(M, norm2(pos - vec3(-0.205066,-0.0410133,-0.205066)));\nM = max(M, norm2(pos - vec3(-0.199289,-0.199289,-0.0797155)));\nM = max(M, norm2(pos - vec3(-0.199289,-0.0797155,-0.199289)));\nM = max(M, norm2(pos - vec3(-0.193973,-0.155179,-0.155179)));\nM = max(M, norm2(pos - vec3(-0.190657,-0.190657,-0.114394)));\nM = max(M, norm2(pos - vec3(-0.190657,-0.114394,-0.190657)));\nM = max(M, norm2(pos - vec3(-0.182969,-0.228711,0.)));\nM = max(M, norm2(pos - vec3(-0.182969,0.,-0.228711)));\nM = max(M, norm2(pos - vec3(-0.180778,-0.225972,-0.0451944)));\nM = max(M, norm2(pos - vec3(-0.180778,-0.0451944,-0.225972)));\nM = max(M, norm2(pos - vec3(-0.180263,-0.180263,-0.144211)));\nM = max(M, norm2(pos - vec3(-0.180263,-0.144211,-0.180263)));\nM = max(M, norm2(pos - vec3(-0.174648,-0.21831,-0.0873238)));\nM = max(M, norm2(pos - vec3(-0.174648,-0.0873238,-0.21831)));\nM = max(M, norm2(pos - vec3(-0.169102,-0.169102,-0.169102)));\nM = max(M, norm2(pos - vec3(-0.165686,-0.207107,-0.124264)));\nM = max(M, norm2(pos - vec3(-0.165686,-0.124264,-0.207107)));\nM = max(M, norm2(pos - vec3(-0.155179,-0.193973,-0.155179)));\nM = max(M, norm2(pos - vec3(-0.155179,-0.155179,-0.193973)));\nM = max(M, norm2(pos - vec3(-0.150692,-0.251154,0.)));\nM = max(M, norm2(pos - vec3(-0.150692,0.,-0.251154)));\nM = max(M, norm2(pos - vec3(-0.148524,-0.24754,-0.049508)));\nM = max(M, norm2(pos - vec3(-0.148524,-0.049508,-0.24754)));\nM = max(M, norm2(pos - vec3(-0.144211,-0.180263,-0.180263)));\nM = max(M, norm2(pos - vec3(-0.142541,-0.237568,-0.0950268)));\nM = max(M, norm2(pos - vec3(-0.142541,-0.0950268,-0.237568)));\nM = max(M, norm2(pos - vec3(-0.133998,-0.223329,-0.133998)));\nM = max(M, norm2(pos - vec3(-0.133998,-0.133998,-0.223329)));\nM = max(M, norm2(pos - vec3(-0.124264,-0.207107,-0.165686)));\nM = max(M, norm2(pos - vec3(-0.124264,-0.165686,-0.207107)));\nM = max(M, norm2(pos - vec3(-0.114394,-0.190657,-0.190657)));\nM = max(M, norm2(pos - vec3(-0.108778,-0.271945,0.)));\nM = max(M, norm2(pos - vec3(-0.108778,0.,-0.271945)));\nM = max(M, norm2(pos - vec3(-0.106949,-0.267374,-0.0534748)));\nM = max(M, norm2(pos - vec3(-0.106949,-0.0534748,-0.267374)));\nM = max(M, norm2(pos - vec3(-0.101973,-0.254931,-0.101973)));\nM = max(M, norm2(pos - vec3(-0.101973,-0.101973,-0.254931)));\nM = max(M, norm2(pos - vec3(-0.0950268,-0.237568,-0.142541)));\nM = max(M, norm2(pos - vec3(-0.0950268,-0.142541,-0.237568)));\nM = max(M, norm2(pos - vec3(-0.0873238,-0.21831,-0.174648)));\nM = max(M, norm2(pos - vec3(-0.0873238,-0.174648,-0.21831)));\nM = max(M, norm2(pos - vec3(-0.0797155,-0.199289,-0.199289)));\nM = max(M, norm2(pos - vec3(-0.0574411,-0.287205,0.)));\nM = max(M, norm2(pos - vec3(-0.0574411,0.,-0.287205)));\nM = max(M, norm2(pos - vec3(-0.0563674,-0.0563674,-0.281837)));\nM = max(M, norm2(pos - vec3(-0.0563673,-0.281837,-0.0563673)));\nM = max(M, norm2(pos - vec3(-0.0534748,-0.267374,-0.106949)));\nM = max(M, norm2(pos - vec3(-0.0534748,-0.106949,-0.267374)));\nM = max(M, norm2(pos - vec3(-0.049508,-0.24754,-0.148524)));\nM = max(M, norm2(pos - vec3(-0.049508,-0.148524,-0.24754)));\nM = max(M, norm2(pos - vec3(-0.0451944,-0.225972,-0.180778)));\nM = max(M, norm2(pos - vec3(-0.0451944,-0.180778,-0.225972)));\nM = max(M, norm2(pos - vec3(-0.0410133,-0.205066,-0.205066)));\nM = max(M, norm2(pos - vec3(0.,-0.292893,0.)));\nM = max(M, norm2(pos - vec3(0.,-0.287205,-0.0574411)));\nM = max(M, norm2(pos - vec3(0.,-0.271945,-0.108778)));\nM = max(M, norm2(pos - vec3(0.,-0.251154,-0.150692)));\nM = max(M, norm2(pos - vec3(0.,-0.228711,-0.182969)));\nM = max(M, norm2(pos - vec3(0.,-0.207107,-0.207107)));\nM = max(M, norm2(pos - vec3(0.,-0.182969,-0.228711)));\nM = max(M, norm2(pos - vec3(0.,-0.150692,-0.251154)));\nM = max(M, norm2(pos - vec3(0.,-0.108778,-0.271945)));\nM = max(M, norm2(pos - vec3(0.,-0.0574411,-0.287205)));\nM = max(M, norm2(pos - vec3(0.,0.,-0.292893)));\nM = max(M, norm2(pos - vec3(0.,0.,0.707107)));\nM = max(M, norm2(pos - vec3(0.,0.138675,0.693375)));\nM = max(M, norm2(pos - vec3(0.,0.262613,0.656532)));\nM = max(M, norm2(pos - vec3(0.,0.363804,0.606339)));\nM = max(M, norm2(pos - vec3(0.,0.441727,0.552157)));\nM = max(M, norm2(pos - vec3(0.,0.5,0.5)));\nM = max(M, norm2(pos - vec3(0.,0.552157,0.441727)));\nM = max(M, norm2(pos - vec3(0.,0.606339,0.363804)));\nM = max(M, norm2(pos - vec3(0.,0.656532,0.262613)));\nM = max(M, norm2(pos - vec3(0.,0.693375,0.138675)));\nM = max(M, norm2(pos - vec3(0.,0.707107,0.)));\nM = max(M, norm2(pos - vec3(0.0990148,0.495074,0.495074)));\nM = max(M, norm2(pos - vec3(0.109109,0.436436,0.545544)));\nM = max(M, norm2(pos - vec3(0.109109,0.545544,0.436436)));\nM = max(M, norm2(pos - vec3(0.119523,0.358568,0.597614)));\nM = max(M, norm2(pos - vec3(0.119523,0.597614,0.358568)));\nM = max(M, norm2(pos - vec3(0.1291,0.258199,0.645497)));\nM = max(M, norm2(pos - vec3(0.1291,0.645497,0.258199)));\nM = max(M, norm2(pos - vec3(0.136083,0.680414,0.136083)));\nM = max(M, norm2(pos - vec3(0.136083,0.136083,0.680414)));\nM = max(M, norm2(pos - vec3(0.138675,0.,0.693375)));\nM = max(M, norm2(pos - vec3(0.138675,0.693375,0.)));\nM = max(M, norm2(pos - vec3(0.19245,0.481125,0.481125)));\nM = max(M, norm2(pos - vec3(0.210818,0.421637,0.527047)));\nM = max(M, norm2(pos - vec3(0.210818,0.527047,0.421637)));\nM = max(M, norm2(pos - vec3(0.229415,0.344123,0.57354)));\nM = max(M, norm2(pos - vec3(0.229415,0.57354,0.344123)));\nM = max(M, norm2(pos - vec3(0.246183,0.246183,0.615457)));\nM = max(M, norm2(pos - vec3(0.246183,0.615457,0.246183)));\nM = max(M, norm2(pos - vec3(0.258199,0.1291,0.645497)));\nM = max(M, norm2(pos - vec3(0.258199,0.645497,0.1291)));\nM = max(M, norm2(pos - vec3(0.262613,0.,0.656532)));\nM = max(M, norm2(pos - vec3(0.262613,0.656532,0.)));\nM = max(M, norm2(pos - vec3(0.276172,0.460287,0.460287)));\nM = max(M, norm2(pos - vec3(0.3,0.400001,0.5)));\nM = max(M, norm2(pos - vec3(0.3,0.5,0.400001)));\nM = max(M, norm2(pos - vec3(0.323499,0.323499,0.539163)));\nM = max(M, norm2(pos - vec3(0.323499,0.539163,0.323499)));\nM = max(M, norm2(pos - vec3(0.344123,0.229415,0.57354)));\nM = max(M, norm2(pos - vec3(0.344123,0.57354,0.229415)));\nM = max(M, norm2(pos - vec3(0.348155,0.435194,0.435194)));\nM = max(M, norm2(pos - vec3(0.358568,0.119523,0.597614)));\nM = max(M, norm2(pos - vec3(0.358568,0.597614,0.119523)));\nM = max(M, norm2(pos - vec3(0.363804,0.,0.606339)));\nM = max(M, norm2(pos - vec3(0.363804,0.606339,0.)));\nM = max(M, norm2(pos - vec3(0.374634,0.374634,0.468293)));\nM = max(M, norm2(pos - vec3(0.374634,0.468293,0.374634)));\nM = max(M, norm2(pos - vec3(0.400001,0.3,0.5)));\nM = max(M, norm2(pos - vec3(0.400001,0.5,0.3)));\nM = max(M, norm2(pos - vec3(0.408248,0.408248,0.408248)));\nM = max(M, norm2(pos - vec3(0.421637,0.210818,0.527047)));\nM = max(M, norm2(pos - vec3(0.421637,0.527047,0.210818)));\nM = max(M, norm2(pos - vec3(0.435194,0.348155,0.435194)));\nM = max(M, norm2(pos - vec3(0.435194,0.435194,0.348155)));\nM = max(M, norm2(pos - vec3(0.436436,0.109109,0.545544)));\nM = max(M, norm2(pos - vec3(0.436436,0.545544,0.109109)));\nM = max(M, norm2(pos - vec3(0.441727,0.,0.552157)));\nM = max(M, norm2(pos - vec3(0.441727,0.552157,0.)));\nM = max(M, norm2(pos - vec3(0.460287,0.276172,0.460287)));\nM = max(M, norm2(pos - vec3(0.460287,0.460287,0.276172)));\nM = max(M, norm2(pos - vec3(0.468293,0.374634,0.374634)));\nM = max(M, norm2(pos - vec3(0.481125,0.19245,0.481125)));\nM = max(M, norm2(pos - vec3(0.481125,0.481125,0.19245)));\nM = max(M, norm2(pos - vec3(0.495074,0.0990148,0.495074)));\nM = max(M, norm2(pos - vec3(0.495074,0.495074,0.0990148)));\nM = max(M, norm2(pos - vec3(0.5,0.3,0.400001)));\nM = max(M, norm2(pos - vec3(0.5,0.400001,0.3)));\nM = max(M, norm2(pos - vec3(0.5,0.,0.5)));\nM = max(M, norm2(pos - vec3(0.5,0.5,0.)));\nM = max(M, norm2(pos - vec3(0.527047,0.210818,0.421637)));\nM = max(M, norm2(pos - vec3(0.527047,0.421637,0.210818)));\nM = max(M, norm2(pos - vec3(0.539163,0.323499,0.323499)));\nM = max(M, norm2(pos - vec3(0.545544,0.109109,0.436436)));\nM = max(M, norm2(pos - vec3(0.545544,0.436436,0.109109)));\nM = max(M, norm2(pos - vec3(0.552157,0.,0.441727)));\nM = max(M, norm2(pos - vec3(0.552157,0.441727,0.)));\nM = max(M, norm2(pos - vec3(0.57354,0.229415,0.344123)));\nM = max(M, norm2(pos - vec3(0.57354,0.344123,0.229415)));\nM = max(M, norm2(pos - vec3(0.597614,0.119523,0.358568)));\nM = max(M, norm2(pos - vec3(0.597614,0.358568,0.119523)));\nM = max(M, norm2(pos - vec3(0.606339,0.,0.363804)));\nM = max(M, norm2(pos - vec3(0.606339,0.363804,0.)));\nM = max(M, norm2(pos - vec3(0.615457,0.246183,0.246183)));\nM = max(M, norm2(pos - vec3(0.645497,0.1291,0.258199)));\nM = max(M, norm2(pos - vec3(0.645497,0.258199,0.1291)));\nM = max(M, norm2(pos - vec3(0.656532,0.,0.262613)));\nM = max(M, norm2(pos - vec3(0.656532,0.262613,0.)));\nM = max(M, norm2(pos - vec3(0.680414,0.136083,0.136083)));\nM = max(M, norm2(pos - vec3(0.693375,0.,0.138675)));\nM = max(M, norm2(pos - vec3(0.693375,0.138675,0.)));\nM = max(M, norm2(pos - vec3(0.707107,0.,0.)));\nM = sqrt(M) - radius;\nreturn vec2(M,3.0);\n\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nvec2 raycast( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    // raytrace floor plane\n    float tp1 = (-1.0-ro.y)/rd.y;\n    if( tp1>0.0 )\n    {\n        tmax = min( tmax, tp1 );\n        res = vec2( tp1, 1.0 );\n    }\n    //else return res;\n    \n    // raymarch primitives   \n    vec2 tb = iBox( ro-vec3(0), rd, vec3(1) );\n    if( tb.x<tb.y && tb.y>0.0 && tb.x<tmax)\n    {\n        //return vec2(tb.x,2.0);\n        tmin = max(tb.x,tmin);\n        tmax = min(tb.y,tmax);\n\n        float t = tmin;\n        for( int i=0; i<70 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                break;\n            }\n            t += h.x;\n        }\n    }\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (0.8-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<24; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s );\n        t += clamp( h, 0.01, 0.2 );\n        if( res<0.004 || t>tmax ) break;\n    }\n    res = clamp( res, 0.0, 1.0 );\n    return res*res*(3.0-2.0*res);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).x;\n      //if( n.x+n.y+n.z>100.0 ) break;\n    }\n    return normalize(n);\n#endif    \n}\n\n// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p, in vec2 dpdx, in vec2 dpdy )\n{\n    // filter kernel\n    vec2 w = abs(dpdx)+abs(dpdy) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy )\n{ \n    // background\n    vec3 col = vec3(0.7, 0.7, 0.9) - max(rd.y,0.0)*0.3;\n    \n    // raycast scene\n    vec2 res = raycast(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = (m<1.5) ? vec3(0.0,1.0,0.0) : calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        col = 0.2 + 0.2*sin( m*2.0 + vec3(0.0,1.0,2.0) );\n        float ks = 1.0;\n        \n        if( m<1.5 )\n        {\n            // project pixel footprint into the plane\n            vec3 dpdx = ro.y*(rd/rd.y-rdx/rdx.y);\n            vec3 dpdy = ro.y*(rd/rd.y-rdy/rdy.y);\n\n            float f = checkersGradBox( 3.0*pos.xz, 3.0*dpdx.xz, 3.0*dpdy.xz );\n            col = 0.15 + f*vec3(0.05);\n            ks = 0.4;\n        }\n\n        // lighting\n        float occ = calcAO( pos, nor );\n        \n\t\tvec3 lin = vec3(0.0);\n\n        // sun\n        {\n            vec3  lig = normalize( vec3(-0.0, 0.4, -0.0) );\n            vec3  hal = normalize( lig-rd );\n            float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n          //if( dif>0.0001 )\n        \t      dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n\t\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0);\n                  spe *= dif;\n                  spe *= 0.04+0.96*pow(clamp(1.0-dot(hal,lig),0.0,1.0),5.0);\n                //spe *= 0.04+0.96*pow(clamp(1.0-sqrt(0.5*(1.0-dot(rd,lig))),0.0,1.0),5.0);\n            lin += col*2.20*dif*vec3(1.30,1.00,0.70);\n            lin +=     5.00*spe*vec3(1.30,1.00,0.70)*ks;\n        }\n        // sky\n        {\n            float dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n                  dif *= occ;\n            float spe = smoothstep( -0.2, 0.2, ref.y );\n                  spe *= dif;\n                  spe *= 0.04+0.96*pow(clamp(1.0+dot(nor,rd),0.0,1.0), 5.0 );\n          //if( spe>0.001 )\n                  spe *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n            lin += col*0.60*dif*vec3(0.40,0.60,1.15);\n            lin +=     2.00*spe*vec3(0.40,0.60,1.30)*ks;\n        }\n        // back\n        {\n        \tfloat dif = clamp( dot( nor, normalize(vec3(0.5,0.0,0.6))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n                  dif *= occ;\n        \tlin += col*0.55*dif*vec3(0.25,0.25,0.25);\n        }\n        // sss\n        {\n            float dif = pow(clamp(1.0+dot(nor,rd),0.0,1.0),2.0);\n                  dif *= occ;\n        \tlin += col*0.25*dif*vec3(1.00,1.00,1.00);\n        }\n        \n\t\tcol = lin;\n\n        col = mix( col, vec3(0.7,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 32.0 + iTime*1.5;\n\n    // camera\t\n    vec3 ta = vec3( 0., 0., 0. );\n    vec3 ro = ta + vec3( 2.0*cos(0.1*time + 7.0*mo.x), 1.2, 2.0*sin(0.1*time + 7.0*mo.x) );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n#endif\n\n        // focal length\n        const float fl = 2.5;\n        \n        // ray direction\n        vec3 rd = ca * normalize( vec3(p,fl) );\n\n         // ray differentials\n        vec2 px = (2.0*(fragCoord+vec2(1.0,0.0))-iResolution.xy)/iResolution.y;\n        vec2 py = (2.0*(fragCoord+vec2(0.0,1.0))-iResolution.xy)/iResolution.y;\n        vec3 rdx = ca * normalize( vec3(px,fl) );\n        vec3 rdy = ca * normalize( vec3(py,fl) );\n        \n        // render\t\n        vec3 col = render( ro, rd, rdx, rdy );\n\n        // gain\n        // col = col*3.0/(2.5+col);\n        \n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n    \n    fragColor = vec4( tot, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\nconst int CHAR_X = 88;\nconst int CHAR_R = 82;\nconst int CHAR_C = 67; // Color shape by octant type\n\nfloat norm2( in vec3 x )\n{\n   return dot(x,x);\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}