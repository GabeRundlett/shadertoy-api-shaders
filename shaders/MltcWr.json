{
    "Shader": {
        "info": {
            "date": "1532305925",
            "description": "Based on Conway's game of life using a framebuffer to maintain state.\n\nClick and drag to kill some cells and watch it heal and react an equilibrium.",
            "flags": 32,
            "hasliked": 0,
            "id": "MltcWr",
            "likes": 7,
            "name": "Buffer Life",
            "published": 3,
            "tags": [
                "buffer",
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "liamegan",
            "viewed": 431
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 _sample = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, _sample);\n    fragColor = vec4(vec3(fragColor.y), (1.-fragColor.y)*.2);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define PI 3.141592653589793\n#define TAU 6.283185307179586\n\nconst float contrast = 6.;\n\n#define pow2(x) (x * x)\n\nconst int samples = 8;\nconst float sigma = float(samples) * 0.25;\n\nfloat gaussian(vec2 i) {\n    return 1.0 / (2.0 * PI * pow2(sigma)) * exp(-((pow2(i.x) + pow2(i.y)) / (2.0 * pow2(sigma))));\n}\n\nvec3 hash33(vec3 p){ \n\n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n); \n}\n\nvec3 blur(sampler2D sp, vec2 uv, vec2 scale) {\n    vec3 col = vec3(0.0);\n    float accum = 0.0;\n    float weight;\n    vec2 offset;\n\n    for (int x = -samples / 2; x < samples / 2; ++x) {\n        for (int y = -samples / 2; y < samples / 2; ++y) {\n            offset = vec2(x, y);\n            weight = gaussian(offset);\n            col += texture(sp, uv + scale * offset).rgb * weight;\n            accum += weight;\n        }\n    }\n\n    return col / accum;\n}\n\nvec2 hash2(vec2 p)\n{\n  vec2 o = texture( iChannel1, (p+0.5)/256.0, -100.0 ).xy;\n  return o;\n}\nfloat rand(vec2 n) { \n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = vec2(fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n  vec2 _sample = fragCoord.xy / iResolution.xy;\n  \n  vec2 texStep = 1. / iResolution.xy;\n  \n  vec2 mouse = iMouse.xy - fragCoord.xy;\n    \n  vec4 fragcolour;\n  float size = 1.;\n  \n  float shade = smoothstep(80.1255, .001, length(mouse));\n  \n  fragcolour = vec4(blur(iChannel0, _sample, 1. / iResolution.xy * .8), 1.);\n\n\n  if(iFrame < 2) {\n    float _rand = rand(uv*256.);\n    fragColor = vec4(1.) * clamp(floor(_rand * _rand * _rand * contrast), 0., 1.);\n  } else {\n    float neighbours = 0.;\n    for(float i = -2.; i < 3.; i+=1.) {\n      for(float j = -2.; j < 3.; j+=1.) {\n        if(i != 0. || j != 0.) {\n          float alive = texture(iChannel0, _sample + (texStep * vec2(i, j))).x;\n          if(alive > .5) {\n            neighbours += 1. * (2. / max(abs(i), abs(j)));\n          }\n        }\n      }\n    }\n    float lifestatus = floor(fragcolour.x+.5);\n    fragColor = vec4(lifestatus);\n    if(lifestatus == 1.) {\n      if(neighbours < 3. || neighbours > 7.) {\n        fragColor = vec4(0.);\n      } \n    } else {\n      if(neighbours == 4.) {\n        fragColor = vec4(1.);\n      }\n    }\n      \n    if(iMouse.z > 0.) {\n      fragColor -= shade;\n    }\n      \n    if(iFrame > 2) {\n      fragColor.y = fragcolour.y * .87 + fragColor.x; // this introduces a motion fade\n      if(fragColor.y < .15) {\n        fragColor.y  *= .95;\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}