{
    "Shader": {
        "info": {
            "date": "1647088086",
            "description": "CC0: Saturday morning tinkering\n Tinkering a bit on shader morning with something that looks like a bit like \n a truchet pattern but isn't\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7sSBDV",
            "likes": 14,
            "name": "Saturday morning tinkering",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "// CC0: Saturday morning tinkering\n// Tinkering a bit on shader morning with something that looks like a bit like \n// a truchet pattern but isn't\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\nconst int no_buckets = 3;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(in vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat circle(vec2 p) {\n  return abs(length(p) - 0.5);\n}\n\nfloat segmentx(vec2 p) {\n  float d0 = abs(p.y);\n  float d1 = length(p);\n  return p.x > 0.0 ? d1 : d0;\n}\n\nint bucket(vec2 n) {\n  const float bs = float(no_buckets);\n  float h = hash(n);\n  return int(floor(h*bs));\n}\n\nstruct selector {\n  bool sc;\n  bool s1;\n  bool s2;\n  bool s4;\n  bool s8;\n  bool c3;\n  bool c6;\n  bool c9;\n  bool c12;\n};\n\nconst selector selectors[16] = selector[](\n    selector(true , false, false, false, false, false, false, false, false)  // 0\n  , selector(true , true , false, false, false, false, false, false, false)  // 1\n  , selector(true , false, true , false, false, false, false, false, false)  // 2\n  , selector(false, false, false, false, false, true , false, false, false)  // 3\n  , selector(true , false, false, true , false, false, false, false, false)  // 4\n  , selector(false, true , false, true , false, false, false, false, false)  // 5\n  , selector(false, false, false, false, false, false, true , false, false)  // 6\n  , selector(true , true , true , true , false, false, false, false, false)  // 7\n  , selector(true , false, false, false, true , false, false, false, false)  // 8\n  , selector(false, false, false, false, false, false, false, true , false)  // 9 \n  , selector(false, false, true , false, true , false, false, false, false)  // 10\n  , selector(true , true , true , false, true , false, false, false, false)  // 11\n  , selector(false, false, false, false, false, false, false, false, true )  // 12\n  , selector(true , true , false, true , true , false, false, false, false)  // 13\n  , selector(true , false, true , true , true , false, false, false, false)  // 14\n  , selector(true , true , true , true , true , false, false, false, false)  // 15\n  );\n\nfloat df(vec2 p, out float h, out int b) {\n  vec2 pp = p;\n  vec2 pn = floor(pp+0.5);\n  pp = fract(pp+0.5)-0.5;\n  h = hash(pn);\n\n  float d = 1E6;\n  float dc = length(pp)-0.1;\n  float ds1 = segmentx(-pp); \n  float ds2 = segmentx(-pp.yx); \n  float ds4 = segmentx(pp); \n  float ds8 = segmentx(pp.yx);\n  float dc3 = circle(pp-vec2( 0.5,  0.5));\n  float dc6 = circle(pp-vec2(-0.5,  0.5));\n  float dc9 = circle(pp-vec2( 0.5, -0.5));\n  float dc12= circle(pp-vec2(-0.5, -0.5));\n  \n  b  = bucket(pn);\n  int b0 = bucket(pn-vec2(-1.0,  0.0));\n  int b1 = bucket(pn-vec2( 0.0, -1.0));\n  int b2 = bucket(pn-vec2( 1.0,  0.0));\n  int b3 = bucket(pn-vec2( 0.0,  1.0));\n  \n  bool s0 = b0 == b;\n  bool s1 = b1 == b;\n  bool s2 = b2 == b;\n  bool s3 = b3 == b;\n\n  int sb = 0;\n  sb += s0 ? 1 : 0;\n  sb += s1 ? 2 : 0;\n  sb += s2 ? 4 : 0;\n  sb += s3 ? 8 : 0;\n  \n  selector sel = selectors[sb];\n  if (sel.s1)   d = min(d, ds1); \n  if (sel.s2)   d = min(d, ds2); \n  if (sel.s4)   d = min(d, ds4); \n  if (sel.s8)   d = min(d, ds8); \n  if (sel.c3)   d = min(d, dc3); \n  if (sel.c6)   d = min(d, dc6); \n  if (sel.c9)   d = min(d, dc9); \n  if (sel.c12)  d = min(d, dc12); \n\n  if (sel.sc)  d =min(d, dc);\n\n  float w = 0.075;  \n  d = d - w;\n  for (int ii = 0; ii < b; ++ii) {\n    d = abs(d) - w*0.5;\n    w *= 0.5;\n  }\n\n  return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  float h;\n  int   b;\n  float z = mix(0.5, 0.05, smoothstep(-0.5, 0.5, -cos(0.5*TIME)));\n  vec2  dp = p;\n  const float off = 10.0; \n  dp /= z;\n  dp += off*vec2(cos(2.0*TIME/off*(vec2(1.0, sqrt(0.5)))));\n  float d = df(dp, h, b);\n  d *= z;\n  \n  float bh = float(b)/float(no_buckets);\n  vec3 bcol = hsv2rgb(vec3(bh, 0.75, 0.5));\n  vec3 col  = hsv2rgb(vec3(bh, 0.75, 0.125));\n  col = mix(col, bcol, smoothstep(aa, -aa, d));\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}