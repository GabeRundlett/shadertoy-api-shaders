{
    "Shader": {
        "info": {
            "date": "1705752733",
            "description": "Messing around with feedback and noise.",
            "flags": 32,
            "hasliked": 0,
            "id": "NtX3zn",
            "likes": 32,
            "name": "Smokey Ring",
            "published": 3,
            "tags": [
                "fluid",
                "smoke",
                "diffusion",
                "feedback",
                "reaction"
            ],
            "usePreview": 0,
            "username": "Jaromir",
            "viewed": 398
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 c = texture(iChannel0,uv);\n    c.rgb = pow(c.rgb,vec3(1.77));\n\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define C_TWOPI 6.28318530718\n\nconst float stepSize = 45.;\nconst float iterations = 8.;\nconst float rotation = -1.;\nconst float gravity = -0.009;\nconst float speed = 0.25;\nconst float fallOff = 0.0075;\n\nfloat hash21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise21(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = hash21(i);\n    float b = hash21(i + vec2(1.0, 0.0));\n    float c = hash21(i + vec2(0.0, 1.0));\n    float d = hash21(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nmat2 rot(float a){ \n  float cosA=cos(a);\n  float sinA=sin(a);\n  return mat2( cosA, sinA, \n    -sinA, cosA );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 sUv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n\n    vec4 tIn = texture(iChannel0,uv) ;\n    float mag = dot(tIn.rgb,tIn.rgb);\n\n    vec2 st = (stepSize + 1./mag)/iResolution.xy;\n\n    vec3 c = vec3(0.);\n\n    float totalDiff = 0.;\n    vec2  totalDir = vec2(0.);\n\n    float d = noise21(sUv*1. + vec2(0.,-iTime*0.223));\n\n    float lapp = 0.;\n\n    for(float i = 0.; i < iterations; i++){\n      float del = i/(iterations-1.);\n    \n      float a = C_TWOPI * (d + del);\n      vec2 dir = st*vec2(cos(a), sin(a));\n\n      vec3 getValues = texture(iChannel0,uv+dir).rgb ;\n\n      vec3 diff = tIn.rgb - getValues;\n      float diffEnergy = dot(diff,diff);\n      totalDiff += diffEnergy;\n\n      float energy = dot(getValues,getValues);\n\n      totalDir+=dir*energy;\n\n      totalDir*=rot(mix(sin(rotation/energy * del * C_TWOPI),-d,totalDiff) * diffEnergy);\n\n      lapp+=energy;\n    }      \n\n    totalDir = totalDir/lapp;\n    totalDir += vec2(0.,gravity);\n    totalDir *= speed*d;\n\n    c = texture(iChannel0, uv + totalDir).rgb - tIn.rgb*fallOff;\n    \n    vec2 pos = vec2(sin(iTime*0.5),cos(iTime*0.5)) * 0.25;\n\n    vec3 rCol = mix(vec3(1.,1.,1.),vec3(1.,0.,-1.),abs(sin(iTime)));\n\n    \n    if(iMouse.z > 0.){        \n      pos = -(iMouse.xy*2.-iResolution.xy)/iResolution.y;\n      c += smoothstep(0.1,0.,length(sUv + pos)) * abs(rCol);    \n\n    }\n    \n    float star = 0.00075/length(sUv);\n    star = clamp(star,0.,1.) * 1.;\n\n    float sphere = length(sUv+pos);\n    sphere = smoothstep(1.,0.,sphere);\n\n    float light = 0.01/distance(normalize(sUv),sUv * 1.25);\n    light = max(clamp(light,0.,1.) - sphere* 3.,0.);\n\n    c += light*0.05 * mix(rCol,vec3(1.,0.5,1.),0.5) + star*0.025 * vec3(0.2,1.,0.9);\n    \n    \n    fragColor = vec4(clamp(c,0.,1.),1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//simple blur\n\nconst int sampleCount = 8;\nconst float radius = 1.;\n\nvec2 kernel[sampleCount];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    vec4 tIn = vec4(0.);\n\n    kernel[0] =\tvec2(0., 0.);\n    kernel[1] =\tvec2(0.53333336, 0.);\n    kernel[2] =\tvec2(0.3325279, 0.4169768);\n    kernel[3] =\tvec2(-0.11867785, 0.5199616);\n    kernel[4] =\tvec2(-0.48051673, 0.2314047);\n    kernel[5] =\tvec2(-0.48051673, -0.23140468);\n    kernel[6] =\tvec2(-0.11867763, -0.51996166);\n    kernel[7] =\tvec2(0.33252785, -0.4169769);\n\n    \n    for (int k = 0; k < sampleCount; k++) {\n      vec2 o = kernel[k] * radius;\n      tIn+= texture(iChannel0, (uv + o/iResolution.xy));\n\t}\n    \n    tIn *= 1.0 / float(sampleCount);\n\n    \n    fragColor =tIn;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}