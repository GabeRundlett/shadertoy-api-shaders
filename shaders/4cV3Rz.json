{
    "Shader": {
        "info": {
            "date": "1712331213",
            "description": "3D",
            "flags": 0,
            "hasliked": 0,
            "id": "4cV3Rz",
            "likes": 2,
            "name": "Conflagration",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "MerryGusmas",
            "viewed": 79
        },
        "renderpass": [
            {
                "code": "const float viewDistanceMultiplier = 100.0;\nfloat movementSpeedModifier = .3;\n\nfloat objectSizeMultiplier = .5;\n\n//Higher Values increase vertical gap.\nfloat closenessMultiplierY = 4.;\n\n//Higher Values increase side gaps.\nfloat closenessMultiplierX = 3.;\nfloat closenessMultiplierZ = 4.;\n\n//Background colour/pattern variables.\nfloat glowModifier = 12.;\nfloat fractionMultiplier = .1;\nfloat highlightModifier = .5;\n\n\nmat3 rotationMatrix(vec3 axis, float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    float t = 1.0-c;\n    return mat3(\n        t*axis.x*axis.x+c,          t*axis.x*axis.y+axis.z*s,   t*axis.x*axis.z-axis.y*s,\n        t*axis.x*axis.y-axis.z*s,   t*axis.y*axis.y+c,          t*axis.y*axis.z+axis.x*s,\n        t*axis.x*axis.z+axis.y*s,   t*axis.y*axis.z-axis.x*s,   t*axis.z*axis.z+c\n    );\n}\n\nvec3 opTx(vec3 p, mat3 t)\n{\n\n    return transpose(t) * p;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nvec3 opRepetition(vec3 p, vec3 s) {\n    vec3 q = p - s*round(p/s);\n    return q;\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nconst float PI = 3.14159265359;\n\nfloat map(vec3 pos)\n{\n    vec3 repetition = opRepetition(vec3(pos.x - 1., pos.y - (iTime * movementSpeedModifier), pos.z + 0.9), vec3(closenessMultiplierX, closenessMultiplierY, closenessMultiplierZ));\n    vec3 twist = opTwist(repetition);\n    \n    float freq = PI / 2.;\n    vec3 rotation = opTx(twist, rotationMatrix(vec3(0.0,0.,-1.0), -freq * iTime));\n    return sdOctahedron(rotation, objectSizeMultiplier);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0, -1.0) * 0.5773;\n    const float eps = 0.0005;\n    \n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps )\n    );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera matrix\n    vec3 ww = vec3(.5, .0, .5);\n    vec3 uu = normalize(cross(ww, vec3(0.0,1.,0.0)));\n    vec3 vv = cross(uu, ww);\n    \n    // render\n    vec3 tot = vec3(0.0);\n\n#if AA>1\n    for( float m = 0.; m < float(AA); m++ )\n    for( float n = 0.; n < float(AA); n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(m, n) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o ))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\n#endif\n\t    // Ray\n        vec3 rd = normalize( (p.x) * uu + p.y * vv + 1.5 * ww );\n        \n        // Calculate if pixel is within shape (raymarch), store info in 't'.\n        const float tmax = viewDistanceMultiplier;\n        float t = 0.0;\n        for( int i = 0; i < 256; i++ )\n        {\n            vec3 pos = t * rd;\n            float h = map(pos);\n            \n            if( h < 0.0001 || t > tmax ) {\n                break;\n            }\n            \n            t += h;\n        }\n        \n        // shading/lighting goes here\n        vec3 colour = vec3(0.0);\n        vec3 pos = t * rd;\n        if( t < tmax )\n        {\n            //Coordinate is within a shape.\n            vec3 pos = t * rd;\n            vec2 uv = pos.xz;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp(dot(nor, vec3(0.57703)), 0.0, 1.0);\n            float amb = 0.5 + 0.5 * dot(nor, vec3(0.0, 1.0, 0.0));\n            float d = amb * dif;\n            d = abs(d);\n            d = sin(d);\n            d = cos((d + rd.x) * 1. + (iTime * 1.)) / 1.;\n            vec3 tempColour = palette(1., vec3(0.5,0.2,0.1),vec3(.1,0.,0.),vec3(0.,0.,0.),vec3(1.,.0,0.0));\n            colour += tempColour * d;\n            \n            \n            uv = (rd.xz * fractionMultiplier) - 0.5;\n            float f = sin(rd.y * uv.y);\n\n            f = abs(f);\n\n            vec3 individualColour = palette( 1.0, vec3(0.5,0.2,1.0),vec3(1.0,0.1,0.5),vec3(1.0,0.1,0.5),vec3(0.1,1.0,0.1));\n            colour += individualColour * f;\n\n            \n                \n        } else {\n            //Outside of shapes.\n            vec2 uv = pos.xz;\n            vec2 uvOrigin = uv;\n\n            uv = fract(uv * fractionMultiplier) - 0.5;\n            float d = length((cos(uv)));\n\n            vec3 tempColour = palette( 1.0, vec3(0.5,0.2,0.1),vec3(.1,0.,0.),vec3(0.,0.,0.),vec3(1.,.0,0.0));\n\n            d = cos(d);\n            d = abs(d + (uvOrigin.x));\n            d = sin(d*0.01 + ((iTime + 7.55) * 1.)) / .5;\n\n            d = pow(glowModifier / d, highlightModifier);\n\n\n            colour += tempColour * d;\n            \n        }\n        tot += colour;                   \n#if AA>1 \n    }\n    tot /= float(AA * AA);\n#endif\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}