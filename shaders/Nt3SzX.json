{
    "Shader": {
        "info": {
            "date": "1640069842",
            "description": "Implementing the matrix exponential in GLSL.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt3SzX",
            "likes": 17,
            "name": "Coupled Springs & exp(matrix)",
            "published": 3,
            "tags": [
                "physics",
                "springs",
                "coupled"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "// General coupled springs system implemented in python:\n// https://replit.com/@hathnoname/General-Coupled-Springs-System\n\n// See http://eprints.ma.man.ac.uk/634/1/high05e.pdf\n// Once again, I got bitten by GLSL's backwards matrix multiplication\nmat4 expm(in mat4 A) {\n    vec4 norm = abs(A[0]) + abs(A[1]) + abs(A[2]) + abs(A[3]);\n    float L1 = max(norm.x, max(norm.y, max(norm.z, norm.w)));\n    float squarings = ceil(log2(max(1.0, L1 / 3.92572478313866)));\n    A /= exp2(squarings);\n\n    mat4 A2 = A * A;\n    mat4 A4 = A2 * A2;\n    mat4 A6 = A4 * A2;\n    mat4 U = (A6 + 1512.0 * A4 + 277200.0 * A2 + 8648640.0 * mat4(1.0)) * A;\n    mat4 V = 56.0 * A6 + 25200.0 * A4 + 1995840.0 * A2 + 17297280.0 * mat4(1.0);\n\n    mat4 P =  U + V;\n    mat4 Q = -U + V;\n    mat4 R = P * inverse(Q);\n\n    for (float i=0.0; i < squarings; i++) R *= R;\n \n    return R;\n}\n\nvec4 state(in float t, in vec4 x0) {\n    mat4 A = mat4(\n                    0.0,      1.0,             0.0,      0.0,\n        -(k1 + k2) / m1, -u1 / m1,         k2 / m1,      0.0,\n                    0.0,      0.0,             0.0,      1.0,\n                k2 / m2,      0.0, -(k2 + k3) / m2, -u2 / m2\n    );\n\n    vec4 B = vec4(\n        0.0, (k1 * (f1 + l1) - k2 * l2) / m1,\n        0.0, (k2 * l2 + k3 * (f2 - l3)) / m2\n    );\n\n    //vec4 C = B * inverse(A);\n    float det = A[1][2] * A[3][0] - A[1][0] * A[3][2];\n    vec4 C = vec4((A[1][2] * B[3] - A[3][2] * B[1]) / det, 0.0,\n                  (A[3][0] * B[1] - A[1][0] * B[3]) / det, 0.0);\n\n    return (x0 + C) * expm(A * t) - C;\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 12.0;\n    vec3 color = 1.0 - texture(iChannel1, fragCoord / iResolution.xy).rgb;\n    float unit = 24.0 / iResolution.y;\n\n    // Calculate the current state of the system\n    vec4 sys = state(3.0 * iTime, vec4(-2.0, 0.0, 4.0, 0.0));\n\n    // Draw fixtures\n    drawSDF(sdDisk(uv, vec2(f1, 0.0), 0.25), vec3(0.0));\n    drawSDF(sdDisk(uv, vec2(f2, 0.0), 0.25), vec3(0.0));\n\n    // Draw the springs\n    float m1Left = sys.x - r1, m1Right = sys.x + r1;\n    float m2Left = sys.z - r2, m2Right = sys.z + r2;\n\n    if (min(f1, m1Left) < uv.x && uv.x < max(f1, m1Left)) {\n        drawSDF(udTriangleWave(uv - vec2(f1, 0.0), 8.0 / (m1Left - f1), 1.5), vec3(0.0));\n    }\n\n    if (min(m1Right, m2Left) < uv.x && uv.x < max(m1Right, m2Left)) {\n        drawSDF(udTriangleWave(uv - vec2(m1Right, 0.0), 8.0 / (m2Left - m1Right), 1.5), vec3(0.0));\n    }\n\n    if (min(m2Right, f2) < uv.x && uv.x < max(m2Right, f2)) {\n        drawSDF(udTriangleWave(uv - vec2(m2Right, 0.0), 8.0 / (f2 - m2Right), 1.5), vec3(0.0));\n    }\n\n    // Draw the masses\n    drawSDF(sdBox(uv - vec2(sys.x, 0.0), vec2(r1)), vec3(1.0, 0.0, 0.0));\n    drawSDF(sdBox(uv - vec2(sys.z, 0.0), vec2(r2)), vec3(0.0, 0.0, 1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fixtures\n#define f1 -7.5\n#define f2 7.5\n\n// Masses\n#define m1 1.0\n#define m2 3.0\n\n// Size\n#define r1 sqrt(m1)\n#define r2 sqrt(m2)\n\n// Friction\n#define u1 0.1\n#define u2 0.1\n\n// Spring lengths\n#define l1 5.0\n#define l2 5.0\n#define l3 5.0\n\n// Spring constants\n#define k1 1.0\n#define k2 3.0\n#define k3 1.0\n\n// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\n// https://www.shadertoy.com/view/tlcBW2\nfloat udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / abs(freq), qw = 0.25 * pw;\n    p.x = abs(mod(p.x * sign(freq) + qw, pw) - 0.5 * pw) - qw;\n\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    sc /= l;\n\n    p *= mat2(sc, -sc.y, sc.x);\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}