{
    "Shader": {
        "info": {
            "date": "1639454576",
            "description": "another fractal\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NtcSRf",
            "likes": 39,
            "name": "another fractal",
            "published": 3,
            "tags": [
                "anotherfractal"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 676
        },
        "renderpass": [
            {
                "code": "///------------image\n//por jorge2017a2-\n//another fractal\n//--13-dic-2021\n#define MAX_STEPS 160\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define REFLECT 2\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n#define MENGER_ITERATIONS\t2\n\nvec4 mapFractal(in vec3 p)\n{\t\n    p.xz = mod(p.xz + 4.0, 2.0) -1.0;\n    //p.y = mod(p.y + 1.0, 2.0) - 1.0;\n\t\n    float d = sdBox(p,vec3(1.0));\n    vec4 res = vec4(d, 1.0, 0.01, 0.0);\n    float s = 2.5;\n\n    for(int i = 0; i < MENGER_ITERATIONS; ++i)\n    {\n        vec3 a = mod(p * s, 2.0) - 1.0;\n        s *= 11.0;\n        vec3 r = abs(1.0 - 5.0 * abs(a));\n        float da = max(r.x, r.y);\n        float db = max(r.y, r.z);\n        float dc = max(r.z, r.x);\n        float c = (min(da, min(db, dc)) - 0.85) / s;\n\n        if(c > d)\n        {  d = c; res = vec4(d, min(res.y, 0.2 * da * db * dc), 0.0, 1.0); }\n    }\n    return res;\n}\n\nvec3 GetDist(vec3 p  ) \n{\tvec3 res= vec3(9999.0, -1.0,-1.0);  vec3 pp=p;\n\tfloat planeDist1 = p.y+5.0;  //piso inf\n      float t=-iTime*0.5;\n    vec4 v4=mapFractal(p-vec3(0.55,1.3,0.0+t));\n    res =opU3(res, vec3(v4.x,1.0,-1.0)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 nor = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    nor= normalize(nor);\n    return nor;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   float t = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    \n    #define DISTANCE_BIAS 0.75\n    float minDist = 9999.0; \n    \n    for(int i=0; i <= PMaxSteps; i++) \n    {  \tp = ro + rd*t;\n        dS = GetDist(p);\n        if ( abs(dS.x)<MIN_DIST  || i == PMaxSteps)\n        {mObj.hitbln = true; minDist = abs(t); break;}\n        \n        if(t>MAX_DIST)\n            {mObj.hitbln = false;    minDist = t;    break; } \n        \n        t += dS.x;\n        marchCount++;\n    }\n        \n    mObj.dist = minDist;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    mObj.phit=p;\n    return t;\n}\n\n\n\nfloat GetShadow(vec3 p, vec3 plig)\n{   vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l , MAX_STEPS/2);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\nfloat FakeSoftShadow(float result, vec3 LightPos,vec3 point,vec3 normal)\n{\n    vec3 shadowOffset = normal * 0.2 ;\n    int epoch = 5;\n    \n    float delta = result/float(epoch);\n    float lightOffset = 0.2;\n    \n    for(int i = 0; i<epoch; i++)\n    {\n        vec3 tmp = LightPos +vec3(0,0,i)*lightOffset;\n        float dis=RayMarch(point + shadowOffset,normalize(tmp-point), int( MAX_DIST));\n        if (dis< length(tmp-point))\n        { result -= delta; }\n    }\n    return result;\n}\n\nfloat specularBRDF(float roughness, vec3 n, vec3 v, vec3 l)\n{\n    vec3 h = normalize(v + l);\n    float NoV = abs(dot(n, v)) + .1;\n    float NoL = clamp(dot(n, l), 0., 1.);\n    float NoH = clamp(dot(n, h), 0., 1.);\n    float D = (2. + 1. / roughness) * pow(max(1. - NoH * NoH, .0078125), 1. / roughness * .5) / (2. * PI);\n    return D / (4. * (NoL + NoV - NoL * NoV));\n}\n\n//----------------------------------------------------\n//https://www.shadertoy.com/view/ft3SRr\nvec3 Shading(vec3 LightPos, vec3 pos, vec3 ro,vec3 baseCol)\n{\n    //ro=eye\n    vec3 L = normalize(LightPos - pos);\n    vec3 V = normalize(ro - pos);\n    vec3 N = GetNormal(pos);\n    vec3 H = normalize(L+V);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float Ambient = 0.1;\n       \n    float result = max(dot(L,N),0.0)*0.5 + pow(max(dot(H,N),0.0),20.)*0.9;\n    result = FakeSoftShadow(result, LightPos,pos,N);\n    \n    float roughness=4.25;\n    vec3 specol=specularBRDF(roughness, N, V, L)*baseCol;\n    \n    Material mate;\n    mate.baseCol = vec3(.38, .02, .02);\n    mate.specularCol = vec3(0.56 ,.64, .64);          \n    return ((result+Ambient)*baseCol+specol*mate.specularCol)/2.0;\n}\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{  float intensity=1.0;\n     vec3 result;\n    vec3 sha= Shading(plight_pos,p,ro,colobj);\n    result =  sha;\n    return result;\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{  \tvec3 colobj; \n\n    if( mObj.hitbln==false) return  render_sky_color(rd);\n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }    \n    return colobj;\n}\n\n/*\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n   TObj Obj;\n   mObj.rd=rd;\n   mObj.ro=ro;\n   vec3 p;\n\n   float d=RayMarch(ro,rd, MAX_STEPS);\n    Obj=mObj;\n    if(mObj.hitbln) \n    {   p = (ro + rd * d );  \n        vec3 nor=mObj.normal;\n        vec3 colobj;\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1)*light_color1;\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2)*light_color2;\n        \n        col= result;\n        //col *= 1.0 - pow(d*d /(MAX_DIST*1.5) , 4.5);  \n    }\n    else if(d>MAX_DIST)\n    col= render_sky_color(rd);\n    \n   return col;\n}\n*/\n\n\nvec3 Render(vec3 ro, vec3 rd)\n{   vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n \n    float d=RayMarch(ro,rd, MAX_STEPS);\n    Obj=mObj;\n\n    vec3 sky = render_sky_color(rd);\n    col = sky;\n\n    if(mObj.hitbln) \n    {   vec3 p = (ro + rd * d );  \n        vec3 nor=mObj.normal;\n        vec3 colobj;\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1)*light_color1;\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2)*light_color2;\n\n        col= result;\n        //col *= 1.0 - pow(d*d /(MAX_DIST*1.5) , 4.5);  \n    }\n\n    col = mix(col, sky, smoothstep(0., .08, min(d, MAX_DIST)/MAX_DIST));\n\n    return col;\n}\n\n\nvec3 linear2srgb(vec3 c) {\n    return mix(\n        12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055,\n        step(vec3(0.0031308), c));\n}\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{    return vec3(1.0) - exp(-hdrColor * exposure);  }\n\n// Tone mapping\n// See: http://filmicgames.com/archives/75\nvec3 Uncharted2ToneMapping(vec3 color)\n{\n    float gamma = 2.2;\n\tfloat A = 0.15;\n\tfloat B = 0.50;\n\tfloat C = 0.10;\n\tfloat D = 0.20;\n\tfloat E = 0.02;\n\tfloat F = 0.30;\n\tfloat W = 11.2;\n\tfloat exposure = 0.012;\n\tcolor *= exposure;\n\tcolor = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;\n\tfloat white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;\n\tcolor /= white;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \t\n    light_pos1= vec3(5.0, 10.0, -10.0 );    light_color1=vec3(1.0);\n \tlight_pos2= vec3( -10.0, 30.0, -10.0 ); light_color2 = vec3(1.0); \n \n   \n   vec3 ro=vec3(0.5,2.0,-20.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n    \n    vec3 col= Render( ro,  rd);\n    \n    //col = linear2srgb(col);\n    col+=Uncharted2ToneMapping(col);\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//--------------common\nstruct Material\n{\n    vec3 baseCol;\n    vec3 specularCol;\n    float roughness;\n};\n\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 phit; //22-mar-2021\n    vec3 rf;\n    float marchCount;\n    bool blnShadow;\n    bool hitbln;\n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    //if (i>-1 ) \n\t//\treturn Arrcolores[i];\n    \n    if (i==0 )  return vec3(0.0);\n    if (i==1 )  return vec3(1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}