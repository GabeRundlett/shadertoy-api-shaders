{
    "Shader": {
        "info": {
            "date": "1629278914",
            "description": "How to map UV coordinates onto a torus conformally. See code for controls.",
            "flags": 48,
            "hasliked": 0,
            "id": "tdGfzz",
            "likes": 26,
            "name": "Conformal Torus Texture Map",
            "published": 3,
            "tags": [
                "torus",
                "uv",
                "conformal"
            ],
            "usePreview": 1,
            "username": "mla",
            "viewed": 981
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Conformal Torus UV Mapping\n//\n// The normal method of mapping UV coordinates onto a torus produces a\n// distorted pattern, elongating or compressing the pattern depending\n// on the location on the torus.\n//\n// This can be avoided by doing the UV mapping in 4-dimensional space,\n// then using stereographic projection to map conformally into 3-space.\n//\n// Apply a rotation in 4-space before projection transforms the torus\n// into a cyclide ('r' key). The UV mapping is still conformal though.\n//\n// <mouse>: change view\n// <up/down>: zoom in/out\n// <pageup>/<pagedown>: change torus proportions\n// <left/right>: change angle of pattern\n// 'r': R4 rotation\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec2 TRATIO = vec2(3,3); // R4 torus proportions\n\n// Inverse stereographic projection of p,\n// p4 lies onto the unit 3-sphere centered at 0.\n// k is scale factor\nvec4 inverseStereographic(vec3 p, out float k) {\n  // Invert in sphere radiusÂ² = 2, centre (0,0,0,-1)\n  k = 2.0/(1.0+dot(p,p));\n  return vec4(k*p,k-1.0);\n}\n\nvec4 inverseStereographic(vec3 p) {\n  float k;\n  return inverseStereographic(p,k);\n}\n\n// Hypersphere is p.p = 1\n// Torus is (p.xy).(p.xy) = R^2 = 1-(p.zw).(p.zw) \nfloat fTorus(vec4 p4, float R) {\n  // Torus distance\n  // Distance from surface x^2 + y^2 = R^2\n  return abs(R-length(p4.xy));\n}\n\nvec4 quat = vec4(0,0,0,1);\n\nvec4 map4(vec3 p, out float k) {\n  vec4 p4 = inverseStereographic(p,k);\n  // Do a one sided quaternion rotation, otherwise known\n  // as a Clifford Translation, which seems appropriate.\n  if (key(CHAR_R)) p4 = qmul(p4,quat);\n  return p4;\n}\n\nvec4 map4(vec3 p) {\n  float k;\n  return map4(p,k);\n}\n\nfloat map(vec3 p) {\n  float k;\n  vec4 p4 = map4(p,k);\n  float R = sqrt(TRATIO.x*TRATIO.x/dot(TRATIO,TRATIO));\n  float d = fTorus(p4,R);\n  return d/k;\n}\n\nvec3 calcNormal(vec3 p) {\n  vec3 eps = vec3(1e-4,0,0);\n  vec3 n = vec3(map(p + eps.xyy) - map(p - eps.xyy),\n                map(p + eps.yxy) - map(p - eps.yxy),\n                map(p + eps.yyx) - map(p - eps.yyx));\n  return normalize(n);\n}\n\nconst float ITER = 100.0;\nconst float MAX_DIST = 20.0;\n\nvec3 transform(vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    //float phi = 0.1*iTime; //(2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  p.yz = rotate(p.yz,-0.8);\n  return p;\n}\n\nvec3 getcolor(vec2 uv) {\n  //if (uv.x < 0.0 || uv.x > 1.0) return vec3(0);\n  //if (uv.y < 0.0 || uv.y > 1.0) return vec3(0);\n  float A = 3.0, B = 0.0;\n  if (false && iMouse.x > 0.0) {\n    A = floor(10.0*iMouse.x/iResolution.x);\n    B = floor(10.0*iMouse.y/iResolution.y);\n  }\n  B += float(keycount(KEY_LEFT)-keycount(KEY_RIGHT));\n  float theta = atan(B,A);\n\n  float k = sqrt(A*A+B*B);\n  uv *= k;\n  uv = rotate(uv,-theta);\n  if (key(CHAR_X)) uv.x += iTime;\n  if (!key(CHAR_Y)) uv.y += iTime;\n  vec2 index = floor(uv);\n  uv -= floor(uv);\n\n  vec2 X = vec2(B,A);\n  vec2 Y = vec2(A,-B);\n\n  //assert(idiv(idot(index,X),idot(X,X)) == 0);\n  //assert(idiv(idot(index,Y),idot(Y,Y)) == 0);\n  index -= X*idiv(dot(index,X),dot(X,X));\n  index -= Y*idiv(dot(index,Y),dot(Y,Y));\n  \n  uint h = ihash(uint(int(index.x)) ^ ihash(int(index.y)));// ^ ihash(uint(iTime));\n  vec3 color = hsv2rgb(0.6*float(h)/pow(2.0,32.0),1.0,0.5);\n  vec3 tcolor = texture(iChannel0,uv).xyz;\n  color *= dot(tcolor,vec3(1));\n\n  uv = min(uv,1.0-uv);\n  color = mix(vec3(0),color,smoothstep(0.01,0.02,uv.x));\n  color = mix(vec3(0),color,smoothstep(0.01,0.02,uv.y));\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec3 light = normalize(vec3(1,.5,0));\n  \n  float focalLength = 2.5;\n  vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n  //uv = rotate(uv,0.1*iTime);\n  //assert(uv.y > 0.0 && uv.x > 0.0);\n  vec3 p = vec3(2.0*uv, focalLength);\n  p = transform(p);\n\n  vec3 rayDirection = normalize(p);\n\n  float camera = 4.0;\n  camera *= 0.1*float(10+keycount(KEY_DOWN)-keycount(KEY_UP));\n  TRATIO.y += float(keycount(KEY_PAGE_UP)-keycount(KEY_PAGE_DOWN));\n  vec3 rayOrigin = vec3(0,0,-camera);\n  rayOrigin = transform(rayOrigin);\n  rayOrigin = rayOrigin;\n\n  light = transform(light);\n  \n  vec3 rayPosition = rayOrigin;\n  float rayLength = 0.0;\n\n  int aindex = 0;//keycount(KEY_PAGE_UP)-keycount(KEY_PAGE_DOWN);\n\n  vec3 axes[] = vec3[] (vec3(1,0,0), vec3(0,1,0), vec3(0,0,1), vec3(1,1,0),\n                        vec3(1,0,1), vec3(0,1,1), vec3(1,1,1));\n  aindex %= axes.length();\n  if (aindex < 0) aindex += axes.length();\n  vec3 axis = key(CHAR_R) ? vec3(1,0,0) : vec3(0,0,-1); //normalize(axes[aindex]);\n  quat = normalize(vec4(-sin(0.5*iTime)*axis,cos(0.5*iTime)));\n\n  vec3 color = vec3(0,0,0.1);\n  if (true) {\n    // Draw background\n    vec2 uv1 = 1.1*uv;\n    color = getcolor(uv1);\n    uv1 = fract(uv1);\n    uv1 = min(uv1,1.0-uv1);\n    color = mix(vec3(1),color,0.5+0.5*smoothstep(0.0,0.01,min(uv1.x,uv1.y)));\n  }\n  for (float i = 0.; i < ITER; i++) {\n    float distance = map(rayPosition);\n    if (distance/rayLength < .001) break;\n    if (rayLength > MAX_DIST) break;\n    //if (distance > 1.0) distance *= 0.5; else distance *= 0.8;\n    distance /= (1.0+0.5*distance);\n    rayLength += distance;\n    rayPosition = rayOrigin + rayDirection * rayLength;\n  }\n  if (rayLength <= MAX_DIST) {\n    vec3 normal = calcNormal(rayPosition);\n    {\n      vec4 p4 = map4(rayPosition);\n      vec2 uv = (vec2(atan(p4.x,p4.y), atan(p4.z,p4.w)))/(2.0*PI);\n      uv *= TRATIO; // Adjust for torus proportions\n      uv = fract(uv);\n      color = getcolor(uv);\n    }\n    color *= dot(light, normal) * .4 + .6;\n    float fog = pow(smoothstep(0.0, MAX_DIST, rayLength), 1.0);\n    color = mix(color, vec3(0), fog);\n    color *= mix(1., .025, fog);\n  }\n  color = pow(color, vec3(1. / 2.2)); // Gamma\n  if (alert) color.x = 1.0;\n  fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Common\n////////////////////////////////////////////////////////////////////////////////\n\n//#define DEBUG\n\nbool alert = false;\n\nvoid assert(bool t) {\n  if (!t) alert = true;\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nuint ihash(int x) {\n  return ihash(uint(x));\n}\n\nbool eq(float x, float y) {\n  return abs(x-y) < 1e-4;\n}\n\n#define PI 3.14159265359\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_C = 67;\nconst int CHAR_G = 71;\nconst int CHAR_R = 82;\nconst int CHAR_T = 84;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\n// This is a counterclockwise rotation with the usual axis directions\nvec2 rotate(vec2 p, float t) {\n    //return mat2(cos(t),sin(t),-sin(t),cos(t))*p;\n  return p * cos(t) + vec2(-p.y, p.x) * sin(t);\n}\n\nvec4 qmul(vec4 p, vec4 q) {\n  return vec4(cross(p.xyz,q.xyz)+p.w*q.xyz+q.w*p.xyz,\n              p.w*q.w-dot(p.xyz,q.xyz));\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\nfloat idiv(float a, float b) {\n  // Float division producing an integer and with\n  // correct rounding for integral parameters.\n  float d = floor(a/b);\n  if (a-d*b < 0.0) d--;\n  if (a-d*b >= b)  d++;\n  return d;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  } else if (i == 1) {\n    if (j == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (j == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}