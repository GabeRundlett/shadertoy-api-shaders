{
    "Shader": {
        "info": {
            "date": "1603285503",
            "description": "Four fancy blend effects for pictures. My first contribution to Shadertoy.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVcRV",
            "likes": 2,
            "name": "Fancy blend effects",
            "published": 3,
            "tags": [
                "2d",
                "blend",
                "presentation"
            ],
            "usePreview": 0,
            "username": "msteen",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "// \n// Fancy blend effects for pictures\n// \n// written 2020 by Martin Steen\n//\n\nvec2 uv;\nvec4 textureColor0;\nvec4 textureColor1;\nfloat phase;\nfloat aspectRatio;\n\n//---------------------------------------------------------------------------\n//\n// interpolateColor\n//\n//---------------------------------------------------------------------------\n\nvec4 interpolateColor(float phaseLim, float w, float a)\n{\n    vec4 textureColor;\n    float phaseLim1 = phaseLim - w;\n    float phaseLim2 = phaseLim + w;\n\n    if (a < phaseLim1)\n    {\n        textureColor = textureColor0;\n    }\n    else\n    if (a > phaseLim2)\n    {\n        textureColor = textureColor1;\n    }\n    else\n    {\n        float p = (a - phaseLim1) / (phaseLim2 - phaseLim1);\n        textureColor = mix(textureColor0, textureColor1, p);\n    }\n    return textureColor;\n}\n\n//---------------------------------------------------------------------------\n//\n// blend_Circle\n//\n//---------------------------------------------------------------------------\n\nvec4 blend_Circle()\n{\n    vec2 texVec;\n    texVec.x = (uv.x - 0.5) * 2.0;\n    texVec.y = (uv.y - 0.5 / aspectRatio) * 2.0;\n\n    float phaseLim = phase * 1.5;\n    float texVecLength = length(texVec);\n\n    return interpolateColor(phaseLim, 0.02, texVecLength);\n}\n\n//---------------------------------------------------------------------------\n//\n// blend_Halftone\n//\n//---------------------------------------------------------------------------\n\nvec4 blend_Halftone()\n{\n    const int xsegs = 24;\n    const int ysegs = 24;\n\n    float phaseLim  = phase * 1.5 / float(xsegs);\n    const float w = 0.05 / float(xsegs);\n\n    float seg_w = 1.0 / float(xsegs);\n    float seg_h = 1.0 / float(ysegs);\n\n    int segnumx = int(uv.x * float(xsegs));\n    int segnumy = int(uv.y * float(ysegs));\n\n    vec2 center;\n    center.x = float(segnumx) * seg_w + seg_w * 0.5;\n    center.y = float(segnumy) * seg_h + seg_h * 0.5;\n\n    float dist_to_center = length(uv - center);\n\n    return interpolateColor(phaseLim, w, dist_to_center);\n}\n\n//---------------------------------------------------------------------------\n//\n// blend_Halftone2\n//\n//---------------------------------------------------------------------------\n\nvec4 blend_Halftone2(float lim1, float lim2)\n{\n    const int segs = 32;\n\n    float phase = 1.0 - (uv.x - lim1) / (lim2 - lim1);\n    float seg_w = 1.0 / float(segs);\n\n    int segnumx = int(uv.x * float(segs));\n    int segnumy = int(uv.y * float(segs));\n\n    vec2 center;\n    center.x = float(segnumx) * seg_w + seg_w * 0.5;\n    center.y = float(segnumy) * seg_w + seg_w * 0.5;\n\n    float dist_to_center = length(uv - center) / seg_w;\n\n    return interpolateColor(phase, 0.05, dist_to_center);\n}\n\n//---------------------------------------------------------------------------\n//\n// blend_Shift\n//\n//---------------------------------------------------------------------------\n\nvec4 blend_Shift()\n{\n    float phaseLim = phase * 1.1;\n    return interpolateColor(phaseLim, 0.02, uv.x);\n}\n\n//---------------------------------------------------------------------------\n//\n// blend_ShiftFancy\n//\n//---------------------------------------------------------------------------\n\nvec4 blend_ShiftFancy()\n{\n    vec4 textureColor;\n    float w = 0.2;\n    float phaseLim = (phase - 0.2) * 1.4;\n    float phaseLim1 = phaseLim - w;\n    float phaseLim2 = phaseLim + w;\n\n    if (uv.x < phaseLim1)\n    {\n        textureColor = textureColor0;\n    }\n    else\n    if (uv.x > phaseLim2)\n    {\n        textureColor = textureColor1;\n    }\n    else\n    {\n        textureColor = blend_Halftone2(phaseLim1, phaseLim2);\n    }\n    return textureColor;\n}\n\n//---------------------------------------------------------------------------\n//\n// mainImage\n//\n//---------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    uv = fragCoord / iResolution.x;\n    aspectRatio = iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    int myFrame = iFrame % 300;\n    int effect = (iFrame / 300) % 4;\n    phase = float(myFrame) / 200.0;    \n        \n    \n    if (effect == 0)\n    {   \n        textureColor1 = texture(iChannel3, uv);\n        textureColor0 = texture(iChannel0, uv);\n        \n        fragColor = blend_Shift();\n    }\n    else\n    if (effect == 1)\n    {   \n        textureColor1 = texture(iChannel0, uv);        \n        textureColor0 = texture(iChannel1, uv);\n        \n        fragColor = blend_Circle();\n    }\n    else\n    if (effect == 2)\n    {\n        textureColor1 = texture(iChannel1, uv);\n        textureColor0 = texture(iChannel2, uv);\n        \n        fragColor = blend_Halftone();\n    }\n    else\n    if (effect == 3)\n    {\n        textureColor1 = texture(iChannel2, uv);\n        textureColor0 = texture(iChannel3, uv);        \n        fragColor = blend_ShiftFancy();\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}