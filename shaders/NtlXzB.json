{
    "Shader": {
        "info": {
            "date": "1626090641",
            "description": "Syncing a parameter to musically animate a fractal. White dot is the Julia coordinate. Soundcloud wont load..",
            "flags": 32,
            "hasliked": 0,
            "id": "NtlXzB",
            "likes": 1,
            "name": "Almost tempo-synced",
            "published": 3,
            "tags": [
                "fractal",
                "julia"
            ],
            "usePreview": 0,
            "username": "Shellderr",
            "viewed": 157
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define res iResolution\n#define dst(v,a) (a/dot(uv-v,uv-v))\n#define tri(t) abs(fract(t)-.5)*2.\n\nfloat hash(vec2 v){\n    return fract(sin(dot(v, vec2(53.7781, 31.0314)))*77412.41);\n}\n\nfloat hash1(float f){\n    return fract(sin(f*55.35)*77412.41);\n}\n\nvoid mainImage(out vec4 fcolor, in vec2 fcoord){\n\n    vec2 uv = (2.*fcoord-res.xy)/res.y;\n    \n    float time = iTime*1.9029;\n    \n    vec2 v = vec2(hash1(floor(time)), hash1(floor(1.+time)))-.5;\n//    vec3 c = dst(v,.001)*vec3(.2, .5, 1.);\n    \n    vec2 v2 = vec2(hash1(3.3+floor(time)), hash1(3.3+floor(1.+time)))-.5;\n//    vec3 c2 = dst(v2,.001)*vec3(.8, .2, 1.);\n    \n    vec2 v3 = mix(v, v2, clamp(fract(time)*8.,0., 1.));\n    v3 += vec2(-.5,.2);\n   // vec3 c3 = dst(v3,.001)*vec3(.0, .9, 1.);\n\n   fcolor = vec4(v3, 0., 0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define res iResolution\n#define thresh 20.\n#define stop 200\n\nvec3 rgb(float a){\n    a *=10.;\n    return(cos(4.+a+vec3(0.,2.,4.)*.7)*.5+.5);\n}\n\nvec2 cmul(vec2 a, vec2 b){\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2){\n    float a = (v1.x*v2.x+v1.y*v2.y)/(v2.x*v2.x+v2.y*v2.y);\n    float b = (v1.y*v2.x-v1.x*v2.y)/(v2.x*v2.x+v2.y*v2.y);\n    return vec2(a,b);\n}\n\nvec2 cexp(vec2 z){\n    return exp(z.x)*vec2(cos(z.y),sin(z.y));\n}\n\nvec2 clog(vec2 z){\n    return vec2(log(length(z)),atan(z.y,z.x));\n}\n\nvec2 cpow(vec2 z, float c){\n    return cexp(c*clog(z));\n}\n\n\nvec2 clerp(vec2 a, vec2 b, float m){\n    m = clamp(m,0.,1.);\n    return cmul(vec2(1.-m),a)+cmul(vec2(m),b);\n}\n\n\nvec2 rot(vec2 v, float t){\n    float a = (1.*atan(v.x,v.y))+t;\n    return vec2(cos(a),sin(a))*length(v);\n}\n\n//https://www.shadertoy.com/view/XdcXzn\nmat4 brightnessMatrix( float brightness )\n{\n    return mat4( 1, 0, 0, 0,\n                 0, 1, 0, 0,\n                 0, 0, 1, 0,\n                 brightness, brightness, brightness, 1 );\n}\nmat4 contrastMatrix( float contrast )\n{\n\tfloat t = ( 1.0 - contrast ) / 2.0;\n    \n    return mat4( contrast, 0, 0, 0,\n                 0, contrast, 0., 0,\n                 0.4, 0., contrast, 0.,\n                 0, 0, 0, 0 );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.*fragCoord.xy-res.xy)/res.y;\n    vec2 z = .8*uv;\n    // z = rot(z,time);\n    //vec2 zz = vec2(0);\n    z = clerp(.3*clog(vec2(2)+z), (cdiv(vec2(.5),z)), .1);\n    // z = cexp(cmul(z,vec2(.4)));\n    z=rot(z,iTime*.3);\n    vec2 mouse = .5*iMouse.xy/res.xy;\n    vec2 c = mouse.xy==vec2(0)? vec2(-.77,-.22)/*vec2(cos(iTime*.4)-.3,-.66)*/: (2.*mouse.xy-1.);\n    vec2 coord =  texture(iChannel1, fragCoord.xy/iResolution.xy).xy;\n\n    int i = 0;\n    for(i; i < stop; i++){\n        z = cmul(z,z)+coord;\n        if(length(z) > thresh)\n            break;\n    }\n    vec3 col = rgb(log(.9+float(i)/380.)*2.);\n    vec3 fb = texture(iChannel0, fragCoord.xy/iResolution.xy*.995).xyz;\n//    fragColor = vec4(col-fb*.2, 1.0 );\n    // vec3 oc =  ((.7+.3*col)/(col-fb));\n     vec3 oc =  iFrame > 4 ? 1./fb-(col/fb) : col;;\n //    vec3 oc =  fb-(col/fb);\n //    vec3 oc =  1./fb*(col/fb);\n \n    fragColor = vec4(col*(.4+.7*oc), 1.0 );\n   // fragColor.xyz = mix(fragColor.xyz,pow(fragColor.xyz,vec3(1.3)),.7);\n    fragColor.xyz += (.001/dot(uv-coord,uv-coord))*vec3(.3,.6,.9)*clamp(sin(iTime*.5)*.77,0.,1.);\n    fragColor.xyzw *= contrastMatrix(.7);\n\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}