{
    "Shader": {
        "info": {
            "date": "1496784535",
            "description": "Soundshader music.",
            "flags": 8,
            "hasliked": 0,
            "id": "ldlfRS",
            "likes": 17,
            "name": "Shift (sound)",
            "published": 3,
            "tags": [
                "sound",
                "music"
            ],
            "usePreview": 0,
            "username": "srtuss",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "// srtuss, 2017\n\n#define pi 3.1415926535897932384626433832795\n\nfloat hex(vec2 uv)\n{\n    float v;\n\n    uv.x = abs(mod(uv.x, sqrt(3.)) - sqrt(3.) * .5) - sqrt(3.) * .5;\n    \n    vec3 q = vec3(uv.y, dot(uv, vec2(sqrt(3.) * .5, -.5)), dot(uv, vec2(sqrt(3.) * -.5, -.5)));\n    \n    //q += id.z * vec3(.5, .5, -1.);\n    vec3 p = q + floor(q.x + .5) * vec3(-1., .5, .5);\n    \n    v = max(max(abs(p.x), abs(p.y)), (p.z));\n    \n    p = q + vec3(.5, .5, -1.) + floor(q.x + 1.) * vec3(-1., .5, .5);\n    v = min(v, max(max(abs(p.x), (p.y)), abs(p.z)));\n    \n    return v - .4;\n}\n\nfloat scene(vec3 p)\n{\n    vec2 pol = vec2(atan(p.x, p.z) * 6. / pi, length(p.xz));\n    float v = hex(vec2(pol.x, p.y));\n    v = max(v, abs(pol.y - 2.) - .05);\n    return v;\n}\n\nvec3 normal(vec3 p)\n{\n    float c = scene(p);\n    vec2 h = vec2(0.001, 0.0);\n    return normalize(vec3(scene(p + h.xyy), scene(p + h.yxy), scene(p + h.yyx)));\n}\n\nvec2 rotate(vec2 p, float a)\n{\n    float co = cos(a), si = sin(a);\n    return p * mat2(co, si, -si, co);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0., 0., -1.5);\n    vec3 rd = normalize(vec3(uv, 4.));\n    \n    float pn = iTime * .4;\n    rd.xz = rotate(rd.xz, pn);\n    ro.xz = rotate(ro.xz, pn);\n    \n    float tt = sin(iTime * .2);\n    rd.xy = rotate(rd.xy, tt);\n    ro.xy = rotate(ro.xy, tt);\n    \n    ro.y += iTime * 2.;\n    \n    vec3 col = vec3(0.);\n    \n    float d = 0.;\n    for(int i = 0; i < 60; ++i)\n    {\n        d += scene(ro + rd * d);\n    }\n    \n    col = normal(ro + rd * d) * .3 + .7;\n    col *= exp(d * -.05);\n    \n    col = pow(col, vec3(1. / 2.2));\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// srtuss, 2017\n\nfloat hash(float x)\n{\n    return fract(sin(x * 133.31254) * 873412.23423);\n}\n\nfloat noise(float x)\n{\n    float fl = floor(x);\n    return mix(hash(fl), hash(fl + 1.), smoothstep(0., 1., fract(x)));\n}\n\nfloat spec(float x)\n{\n    return noise(x);\n}\n\nfloat osc(float t, float f)\n{\n    float v = 0.;\n    float amp = 0.;\n    for(int i = 0; i < 256; ++i)\n    {\n        float h = float(i + 1);\n        float k = spec(t * 3. + h * (.5 + sin(t) * .48));\n        k = pow(k, 3.);\n        v += sin(t * h * f * 6.) * (cos(t * h * 4.) * .5 + 1.) * (cos(t * h * 7.) * .5 + 1.) * k / h;\n        amp += k / h;\n    }\n    return v / amp;\n}\n\n#define pi 3.1415926535897932384626433832795\n\nfloat leadvoice(float time, float f)\n{\n    float x = fract(time * f * 6. / pi);\n    float s = 0.002;\n    float pw = .5 + sin(time * 2.) * .4;\n    return smoothstep(pw - s, pw, x) * smoothstep(1., 1. - s, x) - .5;\n}\n\nfloat dorian(float x)\n{\n    float o = floor(x / 12.);\n    x -= o * 12.;\n    return o * 12. + step(2., x) * 2. +\n        step(3., x) * 1. +\n        step(5., x) * 2. +\n        step(7., x) * 2. +\n        step(9., x) * 2. +\n        step(10., x) * 1.;\n}\n\nfloat lydian(float x)\n{\n    float o = floor(x / 12.);\n    x -= o * 12.;\n    return o * 12. + step(2., x) * 2. +\n        step(4., x) * 2. +\n        step(6., x) * 2. +\n        step(7., x) * 1. +\n        step(9., x) * 2. +\n        step(11., x) * 2.;\n}\n\nfloat bsf(float time)\n{\n    float tb = time * 10.;\n    tb = mod(tb, 128.);\n    \n    return exp2((step(64., tb) * 3. + step(32. + 64., tb) * 2.) / 12.);\n}\n\nvec2 snd(float time)\n{\n    float f = 70. * exp2(mod(floor(time * 5.), 2.)) * bsf(time);\n    vec2 v = vec2(osc(time, f), osc(time + .01, f * 1.001)) * 0.6;\n    \n    \n    float tb = time * 10.;\n    tb = mod(tb, 4.);\n    tb = mod(tb, 3.25);\n    tb = mod(tb, 1.);\n    v *= smoothstep(0., .01, tb) * smoothstep(.61, .6, tb) * .7 + .3;\n    \n    \n    \n    float arp_wi = floor(hash(floor(time * 10. / 2.)) * 10.) + 1.;\n    \n    v += leadvoice(time, 140. * 4. * exp2((dorian(sin(floor(time * 10.) * 3.) * arp_wi)) / 12.)) * .4 * exp(fract(tb * 1.) * -2.);\n    //v += sin(time * 6. * 140. * 16. * exp2((dorian(sin(floor(time * 10.) * 3.) * arp_wi)) / 12.)) * .2;\n    \n    \n    return v;\n}\n\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 v = snd(time);\n    v += snd(time - .5).yx * vec2(.5, .3);\n    v += snd(time - 1.) * vec2(.2, .25);\n    \n    v += sin(time * 70. * 6.) * sin(time * 10.) * .05;\n    \n    v += sin(100. * sqrt(mod(time * 10. - 1., 4.))) * .5;\n    v += sin(100. * sqrt(mod(time * 10. - 3., 4.))) * .1;\n    \n    \n    v += hash(time) * exp(mod(time * 10. - 3., 4.) * -2.) * .5;\n    v += hash(time) * exp(mod(time * 10. - 3., 1.) * -8.) * .6 * (.3 + .7 * hash(floor(mod(time * 10., 8.))));\n    \n    //v = vec2(0.);\n    float tb = mod(time * 10. - 3., 4.);\n    v += leadvoice(time, 35. * bsf(time)) * .7 * smoothstep(0., .1, tb) * smoothstep(2.1, 1., tb);\n    \n    \n    \n    return v * .75;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}