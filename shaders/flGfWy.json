{
    "Shader": {
        "info": {
            "date": "1665129429",
            "description": "inspiration:   [url] https://twitter.com/CmonMattTHINK/status/1577340119870316544  [/url]\nuncomment line #19 to get the original shape or #20 for its animated version\n\nAnimated variant of [url]https://shadertoy.com/view/7tGfzd[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "flGfWy",
            "likes": 15,
            "name": "drunk Sierpinski triangle animat",
            "published": 3,
            "tags": [
                "sierpinski",
                "short",
                "reproduction",
                "sierpinsky"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/7tGfzd\n\n#define H(p)        fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define H2(p)       fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define cross(a,b) ( (a).x*(b).y - (a).y*(b).x ) \n  #define R(a)      mat2(cos(a+vec4(0,11,33,0)))       // rotation\n\nfloat line(vec2 p, vec2 a,vec2 b) {                    // --- distance to line\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);    // proj coord on line\n    return length(p - b * h);                          // dist to segment\n}\n#define L(A,B) line(U,A.xy,B.xy)\n\n              // midpoint   jittering\n#define mid(A,B)  (A+B)/2. + vec4( J(A.zw,B.zw), 0,0 )\n//#define k iMouse.y/R.y\n  #define k .2\n//#define J(A,B)  k* ( H((A+B)/2.) -.5 ) *(B-A)                // repro the original\n//#define J(A,B)  k* ( H((A+B)/2.) -.5 ) *(B-A) *sin(iTime)*2. //     animated\n//#define J(A,B)  k* ( H((A+B)/2.) -.5 ) *length(A-B)          // cheap diagonal jittering\n//#define J(A,B)  k* ( H2((A+B)/2.) -.5) *length(A-B)          // full 2D jittering\n  #define J(A,B)  k* ( H2((A+B)/2.) -.5)*R(iTime) *length(A-B) //     animated\n\nvoid mainImage(out vec4 O, vec2 u) {\n     vec2  R = iResolution.xy,\n           U = ( u - .5*R ) /R.y + vec2(.5,.4);  \n     // .xy = jittered version, .zw = non-jiterred, used for coherent seeding\n     vec4  A = vec4(0), B = vec4(1,0,1,0), C = vec4(.5,.87,.5,.87), D,E,F;\n\n     for (int i=0; i < int(log2(R.y))-2; i++ ) {       // --- fractal loop\n         D = mid(A,B), E = mid(A,C), F = mid(B,C);\n         float a = cross(U-F.xy,A-F), b = cross(U-E.xy,B-E), c = cross(U-D.xy,C-D);\n           a > 0. && b < 0. ? A = E, B = F             // fractal recursion: 3 branches\n         : c > 0.           ? A = D, C = F\n         :                  ( B = D, C = E );\n    }  \n    O = vec4( sqrt( smoothstep(1./R.y,0., min(min( L(A,B), L(A,C) ), L(B,C) ) ) )); // draw triangle\n} ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}