{
    "Shader": {
        "info": {
            "date": "1715134782",
            "description": "13",
            "flags": 0,
            "hasliked": 0,
            "id": "lcVSD1",
            "likes": 2,
            "name": "ShaderToy_13_illusion",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "tbx",
            "viewed": 77
        },
        "renderpass": [
            {
                "code": "float sphere(vec2 coord, vec2 pos, float radius)\n{\n    float result = distance(coord, pos);\n    result = smoothstep(radius * 0.95, radius, result);\n    return 1.0 - result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 aspCoord = uv * 2.0 - 1.0;\n    \n    aspCoord.x *= iResolution.x / iResolution.y;\n    \n    float sphere_radius = 0.5;\n    vec3 sphere_Col = vec3(0.4, 0.6, 1.0);\n    \n    float sphere1 = sphere(aspCoord, vec2(-0.8, 0.0), 0.6);\n    float sphere2 = sphere(aspCoord, vec2(0.8, 0.0), 0.6);\n    \n    vec3 col = vec3(0.0);\n    \n    col += sphere1 * sphere_Col;\n    col += sphere2 * sphere_Col;\n    \n    float side = step(0.0, aspCoord.x);\n    \n    vec3 bgColor_left = vec3(0.85, 0.5, 0.3);\n    vec3 bgColor_right = vec3(0.5, 0.85, 0.3);\n    \n    float side_left = side;\n    float side_right = 1.0 - side;\n    \n    col += (side_left - sphere2) * bgColor_right;\n    col += (side_right - sphere1) * bgColor_left;\n    \n    vec2 scaleCoord = fract(aspCoord * 10.0);\n    scaleCoord = scaleCoord * 2.0 - 1.0;\n    \n    float minSpere = length(scaleCoord);\n    minSpere = smoothstep(0.6, 0.7, minSpere);\n    minSpere = 1.0 - minSpere;\n    \n    float factor_left = side_right * minSpere;\n    float factor_right = side_left * minSpere;\n    \n    float animate = step(0.0, sin(iTime));\n    factor_left *= animate;\n    factor_right *= animate;\n    \n    col = mix(col, factor_left * bgColor_right, factor_left);\n    col = mix(col, factor_right * bgColor_left, factor_right);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}