{
    "Shader": {
        "info": {
            "date": "1637594966",
            "description": "it's perlin noise, you dolt!",
            "flags": 0,
            "hasliked": 0,
            "id": "7lyGW1",
            "likes": 1,
            "name": "eindacor_perlin",
            "published": 3,
            "tags": [
                "perlin"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "#define GRID_DIMENSION .1f\n#define AA .02f\n#define CYAN vec3(0., 1., 1.)\n#define MAGENTA vec3(1., 0., 1.)\n#define YELLOW vec3(1., 1., 0.)\n#define RED vec3(1., 0., 0.)\n#define GREEN vec3(0., 1., 0.)\n#define BLUE vec3(0., 0., 1.)\n#define ORANGE vec3(1., .75, .25)\n#define PINK vec3(1., .25, .75)\n#define WHITE vec3(1.)\n#define BLACK vec3(0.)\n#define PI 3.1415926\n#define DEBUG false\n\n\n// from https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 getRandomVector(float seed) {\n    if (seed < .25) {\n        return vec2(1., 1.);\n    } else if (seed < .5) {\n        return vec2(-1., 1.);\n    } else if (seed < .75) {\n        return vec2(1., -1.);\n    } else {\n        return vec2(-1., -1.);\n    }\n}\n\nfloat getNonPeriodic(float seed) {\n    return (sin(2. * seed) + sin(PI * seed)+ 2.) / 4.;\n}\n\nvec3 getRandomColor(float seed) {\n    seed = clamp(seed, 0., 1.);\n    float colorCount = 6.;\n    float colorIncrement = 1.f / colorCount;\n    float seedFloor = floor(seed / colorIncrement) * colorIncrement;\n    float lerpVal = smoothstep(seedFloor, seedFloor + colorIncrement, seed);\n\n    if (seed <= colorIncrement * 1.) {\n        return mix(RED, YELLOW, lerpVal);\n    } else if (seed <= colorIncrement * 2.) {\n        return mix(YELLOW, GREEN, lerpVal);\n    } else if (seed <= colorIncrement * 3.) {\n        return mix(GREEN, CYAN, lerpVal);\n    } else if (seed <= colorIncrement * 4.) {\n        return mix(CYAN, BLUE, lerpVal);\n    } else if (seed <= colorIncrement * 5.) {\n        return mix(BLUE, MAGENTA, lerpVal);\n    } else {\n        return mix(MAGENTA, vec3(1.), lerpVal);\n    }\n}\n\nvec3 getColor(float seed) {\n    seed = clamp(seed, 0., 1.);\n    float colorIncrement =.25;\n    float seedFloor = floor(seed / colorIncrement) * colorIncrement;\n    float lerpVal = smoothstep(seedFloor, seedFloor + colorIncrement, seed);\n\n    if (seed <= .25) {\n        return mix(PINK * .5, ORANGE, lerpVal);\n    } else if (seed <= .5) {\n        return mix(ORANGE, PINK * .8, lerpVal);\n    } else if (seed <= .75) {\n        return mix(PINK * .8, MAGENTA, lerpVal);\n    } else {\n        return mix(MAGENTA, WHITE, lerpVal);\n    } \n}\n\nvec3 getMixedColor(vec3 color0, vec3 color1, vec3 color2, vec3 color3, float seed) {\n    seed = clamp(seed, 0., 1.);\n    float colorIncrement = .2;\n    float seedFloor = floor(seed / colorIncrement) * colorIncrement;\n    float lerpVal = smoothstep(seedFloor, seedFloor + colorIncrement, seed);\n\n    if (seed <= .2) {\n        return color0;\n    } else if (seed <= .4) {\n        return mix(color0, color1, lerpVal);\n    } else if (seed <= .6) {\n        return mix(color1, color2, lerpVal);\n    } else if (seed <= .8) {\n        return mix(color2, color3, lerpVal);\n    } else {\n        return color3;\n    }\n}\n\nfloat biLerp(float f0, float f1, float f2, float f3, float lerpX, float lerpY) {\n    float upper = mix(f1, f2, lerpX);\n    float lower = mix(f0, f3, lerpX);\n    \n    return mix(lower, upper, lerpY);\n}\n\nfloat getPerlinValue(vec2 uv, float gridDimension) {\n    float xCoord = floor(uv.x / gridDimension) * gridDimension;\n    float yCoord = floor(uv.y / gridDimension) * gridDimension;\n    \n    float xIndex = floor(uv.x / gridDimension);\n    float yIndex = floor(uv.y / gridDimension);\n    \n    float p0Hash = hash(vec2(xIndex, yIndex));\n    float p1Hash = hash(vec2(xIndex, yIndex + 1.));\n    float p2Hash = hash(vec2(xIndex + 1., yIndex + 1.));\n    float p3Hash = hash(vec2(xIndex + 1., yIndex));\n    \n    vec2 p0 = vec2(xCoord, yCoord);\n    vec2 p1 = vec2(xCoord, yCoord + gridDimension);\n    vec2 p2 = vec2(xCoord + gridDimension, yCoord + gridDimension);\n    vec2 p3 = vec2(xCoord + gridDimension, yCoord);\n    \n    float dot0 = dot((uv - p0) / gridDimension, getRandomVector(p0Hash));\n    float dot1 = dot((uv - p1) / gridDimension, getRandomVector(p1Hash));\n    float dot2 = dot((uv - p2) / gridDimension, getRandomVector(p2Hash));\n    float dot3 = dot((uv - p3) / gridDimension, getRandomVector(p3Hash));\n    \n    float xInterp = smoothstep(p0.x, p2.x, uv.x);\n    float yInterp = smoothstep(p0.y, p2.y, uv.y);\n    \n    float val = biLerp(dot0, dot1, dot2, dot3, xInterp, yInterp);\n    \n    // normalizes the perlin value, but inhibits additive perlin functionality upstream\n    //val = (val + 1.) / 2.;\n    \n    if (DEBUG) {\n        float distp0 = distance(p0, uv);\n        \n        float debugDotRadius = .005;\n        float debugAA = debugDotRadius * .5;\n        \n        val += smoothstep(debugDotRadius + debugAA, debugDotRadius - debugAA, distance(p0, uv));\n        val += smoothstep(debugDotRadius + debugAA, debugDotRadius - debugAA, distance(p1, uv));\n        val += smoothstep(debugDotRadius + debugAA, debugDotRadius - debugAA, distance(p2, uv));\n        val += smoothstep(debugDotRadius + debugAA, debugDotRadius - debugAA, distance(p3, uv));\n    }\n    \n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    float timeScale = .2f;\n    \n    uv.x += iTime * timeScale;\n    \n    uv.y += getNonPeriodic(uv.x) * .8;\n    \n    float gridDimension = .1f;\n    \n    float perlinValue = getPerlinValue(uv, gridDimension);\n    \n    perlinValue += getPerlinValue(uv + vec2(sin(iTime * .1f)), gridDimension * 10.f);\n    perlinValue += getPerlinValue(uv + vec2(sin(iTime * .1f)), gridDimension * .8f);\n    perlinValue += getPerlinValue(uv + vec2(cos(iTime * .3f)), gridDimension * 2.f);\n    perlinValue += getPerlinValue(uv + vec2(cos(iTime * .2)), gridDimension * .33f);\n    perlinValue += getPerlinValue(uv - vec2(iTime * .02f, -iTime * .02f), gridDimension * .5f);\n    \n    float clampedPerlin = clamp(perlinValue, 0., 1.);\n    \n    fragColor = vec4(getColor(clampedPerlin) * mix(PINK, WHITE, .5), 1.0);\n    fragColor = vec4(getMixedColor(GREEN * .8, BLUE, CYAN, WHITE, clampedPerlin) * mix(YELLOW, WHITE, .5), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}