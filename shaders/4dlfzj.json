{
    "Shader": {
        "info": {
            "date": "1497016446",
            "description": "sound pillars",
            "flags": 96,
            "hasliked": 0,
            "id": "4dlfzj",
            "likes": 6,
            "name": "sound pillars",
            "published": 3,
            "tags": [
                "sound",
                "visualizer",
                "pillars",
                "soundcloud"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 760
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman 2017\n\n//Image - rendering\n\n\n\nfloat hash(vec2 p) {\n    return fract(dot(p+vec2(.36834,.723), normalize(fract(p.yx*73.91374)+1e-4))*7.38734);\n}\n\n\n#define CACHE_RESOLUTION 8\n#define CACHE_SIZE (CACHE_RESOLUTION*CACHE_RESOLUTION)\nfloat cache[CACHE_SIZE];\n\n\nfloat pillars(vec3 p) {\n    p = abs(p);\n    \n    vec2 cp = floor(mod(p.xz/vec2(4.0,2.0), vec2(CACHE_RESOLUTION)));\n    return min(.5,max(-(p.y-cache[int(cp.x)+int(cp.y*float(CACHE_RESOLUTION))]),\n               length(mod(p.xz,vec2(4.0,2.0))-vec2(2.0,1.0))-0.5));\n}\nvec3 pillarsNormal(vec3 p) {\n     const vec2 NE = vec2(1e-3, 0.);\n     return normalize(pillars(p)-vec3(pillars(p-NE.xyy), \n                          pillars(p-NE.yxy), \n                          pillars(p-NE.yyx)));\n}\n\n\nvec4 scene(vec4 p) {\n    //pillars\n    p = abs(p);\n    vec2 cp = floor(mod(p.xz/vec2(4.0,2.0), vec2(CACHE_RESOLUTION)));\n    float snd = cache[int(cp.x)+int(cp.y*float(CACHE_RESOLUTION))];\n    vec4 s = vec4((sin(p.yzx*vec3(.4,.45,.53))*0.5+0.5)*snd*snd,//color\n                  clamp(max(-(p.y-snd), length(mod(p.xz,vec2(4.0,2.0))-vec2(2.0,1.0))-0.5), 0., 1e7));//distance\n    \n    return s;\n}\n\n\nvec3 reflection(vec3 pos, vec3 dir, float blur) {\n    vec4 rp = vec4(pos,1.),\n         rd = vec4(dir,blur);\n    float istep = .1+hash(dir.xy*512.+dir.zz*2048.)*.1;\n    \n    vec4 c = vec4(0.);\n    float d = .1;\n    for (int i = 1; i < 16; i++) {\n        if (c.w >= 1.) break;\n        \n        vec4 s = scene(rp+rd*d);\n        s.w = max(s.w, blur);\n        c += vec4(s.xyz,1.)*max(0., 1.-s.w/(d*blur)) / max(1., d*blur);\n        d += mix(s.w, float(i)*istep, min(1.,blur));\n    }\n\t\n    \n    return mix(vec3(0.),c.xyz/c.w,min(c.w,1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //cache spectrogram\n    for (int i = 0; i < CACHE_SIZE; i++) {\n        cache[i] = pow(texture(iChannel0, vec2(mod(float(i),float(CACHE_RESOLUTION)), floor(float(i)/float(CACHE_RESOLUTION))*.2)/float(CACHE_RESOLUTION)).x, 3.)*4.;\n    }\n\n    //ray-march screen rays\n    float epsilon = 2e-2+hash(fragCoord)*2e-2;//dither epsilon\n    vec3 rp = vec3(mod(iTime,256.),sin(iTime*.084),-.4),\n        rd = vec3(normalize(vec3((fragCoord*2.-iResolution.xy)/iResolution.x,.5)));\n    \n    float s = 0.;\n    for (int i = 0; i < 64; i++) {        \n        float dst = pillars(rp+rd*s);\n        if (dst < epsilon) break;\n        s += dst;\n    }\n    \n    //shade\n    vec3 hp = rp+rd*s,\n        ref = reflect(rd, pillarsNormal(hp));\n    \n    fragColor.xyz = (scene(vec4(hp,0.)).xyz+\n                     reflection(hp,ref,.3)*(1.-max(0.,dot(-rd,ref))))\n                     /(s*s*.1+1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Ethan Alexander Shulman 2017\n\n//Buf A - spectogram with blur\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y < 1.) fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n    else fragColor = texture(iChannel0, (fragCoord-vec2(0.5,1.))/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 10062,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/cryptex/the-fall-nest-hq-premiere"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}