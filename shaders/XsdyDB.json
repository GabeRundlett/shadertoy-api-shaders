{
    "Shader": {
        "info": {
            "date": "1520982699",
            "description": "The Stellations of the Icosahedron.\n\n0-9, 'a','b':display the various cells\n'x': chirality of cell f1\n's' slices at one of the planes.\nMouse, up & down arrow: change view.\n\n[url]https://en.wikipedia.org/wiki/The_Fifty-Nine_Icosahedra[/url]",
            "flags": 48,
            "hasliked": 0,
            "id": "XsdyDB",
            "likes": 11,
            "name": "Stellations of the Icosahedron",
            "published": 3,
            "tags": [
                "icosahedron",
                "stellation"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 622
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Created 2018 by Matthew Arcus\n//\n// Stellations of the Icosahedron.\n//\n// https://en.wikipedia.org/wiki/The_Fifty-Nine_Icosahedra\n//\n// Display selections of Du Val cells that make up the various\n// stellations.\n\n// Controls:\n//\n// Mouse & Up and Down arrow change view\n// 0-9, 'a','b':display the various cell types\n// 'x': chirality of cell f1\n// 's': slices at one of the planes.\n// 'c': show indication of selected cell type\n// \n// Cell types are: A,B,C,D,e1,e2,f1,f2,g1,g2,H,I\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI\t= 3.14159265359;\nconst float TWOPI = 2.0 * PI;\n\nconst vec3 Face0Color = vec3(0.8,0,0);\nconst vec3 Face1Color = vec3(0.8,0.7,0);\nconst vec3 Face2Color = vec3(0.1,0,0.6);\nconst vec3 SnubColor = vec3(0,0.5,0.0);\nconst vec3 DualColor0 = vec3(0.7,0.7,0.1);\nconst vec3 DualColor1 = vec3(0.1,0.1,0.1);\n\nbool slice = false;\n\nstruct Plane {\n  int c;   // Color class - these are all the same symmetric plane\n  vec3 n;  // Normal\n};\n\nPlane planes[10];\n\n// Set up the planes. plane 0 is \"reference\" plane, planes 1-9 intersect with\n// reference sector of plane 0. Plane 9 only occurs in \"infinite\" stellations\nvoid initplanes() {\n  planes[0] = Plane(0,vec3(0.3568, 0, 0.9342));\n  planes[1] = Plane(4,vec3(-0.3568, 0, 0.9342));\n  planes[2] = Plane(1,vec3(0.5774, 0.5774, 0.5774));\n  planes[3] = Plane(2,vec3(-0.5774, 0.5774, 0.5774));  //0\n  planes[4] = Plane(3,vec3(0, 0.9342, 0.3568));        //1\n  planes[5] = Plane(2,vec3(0.5774, -0.5774, 0.5774));  //2\n  planes[6] = Plane(3,vec3(-0.5774, -0.5774, 0.5774)); //3\n  planes[7] = Plane(4,vec3(0.9342, 0.3568, 0));\n  planes[8] = Plane(1,vec3(0, -0.9342, 0.3568));\n  planes[9] = Plane(3,vec3(0.9342, -0.3568, 0));\n}\n\nvec3 getplane(int j) {\n#if 1\n  return planes[j].n;\n#else\n  for (int i = 0; i < 12; i++) {\n    if (i == j) return planes[i].n;\n  }\n  return vec3(0);\n#endif\n}\n\nint imod(int n, int m) {\n#if 1\n  return n%m;\n#else\n  return n-n/m*m;\n#endif\n}\n\nvec3 R; // R is the 3rd mirror plane\n\nvoid init() {\n  const int M = 3, N = 5;\n  float B = cos(PI/float(M));\n  float A = cos(PI/float(N));\n  float C = sqrt(1.0 - A*A - B*B);\n  R = vec3(-A,-B,C); // 3rd folding plane. The two others are xz and yz planes\n}\n\nbool keypress(int code) {\n#if !defined LOCAL\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n#else\n  return false;\n#endif\n}\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_M = 77;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_X = 88;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nvec3 refla(vec3 p) { return vec3(-p.x,p.y,p.z); }\nvec3 reflb(vec3 p) { return vec3(p.x,-p.y,p.z); }\nvec3 reflc(vec3 p) { return p - 2.0*dot(p,R)*R; } //fold about R plane\n\n// Return the parity of the number of mirror flips\nint fold(inout vec3 pos) {\n  int flips = 0;\n  for (int i = 0; i < 5; i++) {\n    flips += int(pos.x < 0.0); // I hope this is branchless\n    pos.x = abs(pos.x);\n    flips += int(pos.y < 0.0);\n    pos.y = abs(pos.y);\n    float k = dot(pos,R);\n    flips += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*R; //fold about R plane\n  }\n  return imod(flips,2);\n}\n\n// We have separate functions for each shell.\n// And a separate overload that sets the color\nvoid A(vec3 p, inout float d) {\n  d = min(d,dot(p,planes[0].n) - 1.0);\n}\n\nvoid A(vec3 p, inout float d, inout vec3 color) {\n  float d0 = dot(p,planes[0].n) - 1.0;\n  if (d0 >= d) return;\n  d = d0;\n  color = vec3(1);\n}\n\nvoid B(vec3 p, inout float d) {\n  d = min(d,dot(p,planes[1].n) - 1.0);\n}\n\nvoid B(vec3 p, inout float d, inout vec3 color) {\n  float d0 = dot(p,planes[1].n) - 1.0;\n  if (d0 >= d) return;\n  d = d0;\n  color = vec3(0,1,0);\n}\n\nvoid C(vec3 p, inout float d) {\n  d = min(d,dot(p,planes[2].n) - 1.0);\n}\n\nvoid C(vec3 p, inout float d, inout vec3 color) {\n  float d0 = dot(p,planes[2].n) - 1.0;\n  if (d0 >= d) return;\n  d = d0;\n  color = vec3(0,0,1);\n}\n\nbool DEFG(vec3 pos, ivec4 a, inout float d) {\n  float d0 = -1.0;\n  d0 = max(d0,float(a[0])*(dot(pos,getplane(3)) - 1.0));\n  d0 = max(d0,float(a[1])*(dot(pos,getplane(4)) - 1.0));\n  d0 = max(d0,float(a[2])*(dot(pos,getplane(5)) - 1.0));\n  d0 = max(d0,float(a[3])*(dot(pos,getplane(6)) - 1.0));\n  if (d <= d0) return false;\n  d = d0;\n  return true;\n}\n\nbool DEFG(vec3 pos, ivec4 a, inout float d, inout vec3 color) {\n  float k, d0 = -1.0;\n  vec3 color0;\n  int type = 0;\n  if (a[0] != 0) {\n    float k = float(a[0])*(dot(pos,getplane(3)) - 1.0);\n    if (k > d0) {\n      d0 = k;\n      type = a[0];\n    }\n  }\n  if (a[1] != 0) {\n    float k = float(a[1])*(dot(pos,getplane(4)) - 1.0);\n    if (k > d0) {\n      d0 = k;\n      type = a[1];\n    }\n  }\n  if (a[2] != 0) {\n    float k = float(a[2])*(dot(pos,getplane(5)) - 1.0);\n    if (k > d0) {\n      d0 = k;\n      type = a[2];\n    }\n  }\n  if (a[3] != 0) {\n    float k = float(a[3])*(dot(pos,getplane(6)) - 1.0);\n    if (k > d0) {\n      d0 = k;\n      type = a[3];\n    }\n  }\n  if (d0 < d) {\n    d = d0;\n    if (type == -1) {\n      color = vec3(1,1,0);\n    } else if (type == 1) {\n      color = vec3(1,0,0);\n    } else {\n      color = vec3(1,0,1);\n    }\n  }\n  return true;\n}\n\nvoid D(vec3 p, inout float d) { DEFG(p,ivec4(1,0,1,0),d); }\nvoid D(vec3 p, inout float d, inout vec3 color) { DEFG(p,ivec4(1,0,1,0),d,color); }\nvoid e1(vec3 p, inout float d) { DEFG(p,ivec4(1,0,-1,0),d); }\nvoid e1(vec3 p, inout float d, inout vec3 color) { DEFG(p,ivec4(1,0,-1,0),d,color); }\nvoid e2(vec3 p, inout float d) { DEFG(p,ivec4(-1,1,1,0),d); }\nvoid e2(vec3 p, inout float d, inout vec3 color) { DEFG(p,ivec4(-1,1,1,0),d,color); }\nbool f1(vec3 p, inout float d) { return DEFG(p,ivec4(-1,1,-1,1),d); } // Achiral form\nbool f1(vec3 p, inout float d, inout vec3 color) { return DEFG(p,ivec4(-1,1,-1,1),d,color); } // Achiral form\n\nvoid f1(vec3 p, int parity, inout float d) {\n  if (parity == 0) {\n    f1(p,d);\n  } else {\n    f1(refla(p),d);\n    f1(reflb(p),d);\n    f1(reflc(p),d);\n  }\n}\nvoid f1(vec3 p, int parity, inout float d, inout vec3 color) {\n  if (parity == 0) {\n    f1(p,d,color);\n    //color = vec3(1,0,0);\n  } else {\n    // Don't usually end up here.\n    if (f1(refla(p),d)) color = vec3(1,0,0);\n    if (f1(reflb(p),d)) color = vec3(1,0,0);\n    if (f1(reflc(p),d)) color = vec3(1,0,0);\n  }\n}\nvoid f2(vec3 p, inout float d) { DEFG(p,ivec4(0,-1,1,0),d); }\nvoid f2(vec3 p, inout float d, inout vec3 color) { DEFG(p,ivec4(0,-1,1,0),d,color); }\nvoid g1(vec3 p, inout float d) { DEFG(p,ivec4(0,1,0,-1),d); }\nvoid g1(vec3 p, inout float d, inout vec3 color) { DEFG(p,ivec4(0,1,0,-1),d,color); }\nvoid g2(vec3 p, inout float d) { DEFG(p,ivec4(0,-1,-1,1),d); }\nvoid g2(vec3 p, inout float d, inout vec3 color) { DEFG(p,ivec4(0,-1,-1,1),d,color); }\nvoid H(vec3 p, inout float d) {\n  float d0 = max(dot(p,getplane(7)) - 1.0,\n                 dot(p,getplane(8)) - 1.0);\n  d = min(d,d0);\n}\nvoid H(vec3 p, inout float d, inout vec3 color) {\n  float d0 = max(dot(p,getplane(7)) - 1.0,\n                 dot(p,getplane(8)) - 1.0);\n  if (d0 < d) {\n    d = d0;\n    color = 0.3*vec3(1,0.5,1);\n  }\n}\n// One of the \"lost stellations\"\nvoid I(vec3 p, inout float d) {\n  float d0 = max(dot(p,getplane(8)) - 1.0,\n                 -dot(p,getplane(9)) - 1.0);\n  d = min(d,d0);\n}\n\nvoid I(vec3 p, inout float d, inout vec3 color) {\n  float d0 = max(dot(p,getplane(8)) - 1.0,\n                 -dot(p,getplane(9)) - 1.0);\n  if (d0 < d) {\n    d = d0;\n    color = 0.3*vec3(0.5,1,1);\n  }\n}\n\n// Possible cells are A,B,C,D,e1,e2,f1,f2,g1,g2,H,I plus parity for f1\nbool control[12];\nbool achiral = false;\n\nfloat Polyhedron(vec3 p) {\n  int parity = fold(p);\n  float d = 1e8;\n  if (control[0]) A(p,d);\n  if (control[1]) B(p,d);\n  if (control[2]) C(p,d);\n  if (control[3]) D(p,d);\n  if (control[4]) e1(p,d);\n  if (control[5]) e2(p,d);\n  if (control[6]) f1(p,achiral?0:parity,d);\n  if (control[7]) f2(p,d);\n  if (control[8]) g1(p,d);\n  if (control[9]) g2(p,d);\n  if (control[10]) H(p,d);\n  if (control[11]) I(p,d);\n  return d;\n}\n\nvec3 getColor(vec3 p){\n  int parity = fold(p);\n  vec3 color = vec3(0);\n  float d = 1e8;\n  if (control[0]) A(p,d,color);\n  if (control[1]) B(p,d,color);\n  if (control[2]) C(p,d,color);\n  if (control[3]) D(p,d,color);\n  if (control[4]) e1(p,d,color);\n  if (control[5]) e2(p,d,color);\n  if (control[6]) f1(p,achiral?0:parity,d,color);\n  if (control[7]) f2(p,d,color);\n  if (control[8]) g1(p,d,color);\n  if (control[9]) g2(p,d,color);\n  if (control[10]) H(p,d,color);\n  if (control[11]) I(p,d,color);\n  return color;\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat map(vec3 p) {\n  float d = Polyhedron(p);\n  if (slice) d = max(d,dot(p,planes[0].n)-1.01);\n  return d;\n}\n\nvec3 calcNormal(vec3 p) {\n  const vec2 e = vec2(0.001, 0.0);\n  return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                        map(p + e.yxy) - map(p - e.yxy),\n                        map(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  const float maxd = 30.0;\n  const float precis = 0.0001;\n  float h = precis * 2.0;\n  float t = 0.0;\n  float res = -1.0;\n  for(int i = 0; i < 64; i++) {\n      if (h < precis || t > maxd) break;\n      h = map(ro + rd * t);\n      t += h;\n    }\n  if (t < maxd) res = t;\n  return res;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = -(2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = -(2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  p.yz = rotate(p.yz,iTime * 0.125);\n  p.zx = rotate(p.zx,iTime * 0.2);\n  return p;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  achiral = keypress(CHAR_X);\n  control[0] = keypress(CHAR_0);\n  control[1] = keypress(CHAR_0+1);\n  control[2] = keypress(CHAR_0+2);\n  control[3] = keypress(CHAR_0+3);\n  control[4] = keypress(CHAR_0+4);\n  control[5] = keypress(CHAR_0+5);\n  control[6] = !keypress(CHAR_0+6);\n  control[7] = !keypress(CHAR_0+7);\n  control[8] = !keypress(CHAR_0+8);\n  control[9] = keypress(CHAR_0+9);\n  control[10] = keypress(CHAR_A);\n  control[11] = keypress(CHAR_B);\n  slice = keypress(CHAR_S);\n  bool showcontrols = keypress(CHAR_C);\n  initplanes();\n  vec2 p = fragCoord.xy / iResolution.xy;\n  p.y = 1.0-p.y;\n  // Now both coords are in (0,1)\n  p = 2.0*p-1.0;\n  p *= iResolution.xy/iResolution.y;\n  p *= 3.0;\n  vec3 col = vec3(0.3 + p.y * 0.1);\n  vec3 ro = vec3(0.0, 0.0, 7.5);\n  vec3 rd = normalize(vec3(p, -6.0));\n  vec3 li = normalize(vec3(0.5, 0.8, 3.0));\n  ro = transform(ro);\n  rd = transform(rd);\n  li = transform(li);\n  init();\n  ro *= 0.1*float(10+keycount(KEY_DOWN)-keycount(KEY_UP));\n  float t = march(ro,rd);\n  if (t > 0.001) {\n    vec3 p = ro + t * rd;\n    vec3 n = calcNormal(p);\n    float diffuse = clamp(dot(n, li), 0.0, 1.0);\n    col = 0.8*getColor(p) * diffuse;\n    col = pow(col, vec3(0.4545));\n  }\n  if (showcontrols) {\n    int N = 14;\n    vec2 xy = float(N)*fragCoord.xy/iResolution.y;\n    xy.y -= 0.5;\n    float gridy = round(xy.y);\n    if (distance(xy, vec2(0.5,gridy)) < 0.3) {\n      int i = N-1-int(gridy);\n      if (i < 12 && control[i] ||\n          i == 13 && achiral) {\n        col = 0.8*vec3(1,1,0);\n      } else if (i != 12) {\n        col = 0.8*vec3(1);\n      }\n    }\n  }\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}