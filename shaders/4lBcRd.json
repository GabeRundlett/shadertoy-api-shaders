{
    "Shader": {
        "info": {
            "date": "1509690193",
            "description": "The infinite peers through the seams as the universe unravels.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lBcRd",
            "likes": 8,
            "name": "Unbounded Synchronicity",
            "published": 3,
            "tags": [
                "raytracing",
                "colorful",
                "periodic"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 729
        },
        "renderpass": [
            {
                "code": "#define fdist 0.5\n#define iters 90\n#define tol 0.003\n//#define maxdist 80.\n#define eps 0.01\n#define tmin 0.1\n#define bevel 0.1\n#define innerradius 0.5\n#define sphereradius 0.45\n#define sidelength 0.55\nfloat gridlength;\n#define speed 0.5\n\n#define PI 3.1415926\n\nfloat box(vec3 ro, vec3 rd) {\n    ro = mod(ro, gridlength) - gridlength/2.;\n    vec3 t = -ro/rd + abs(gridlength/rd/2.);\n    return min(t.x, min(t.y, t.z));\n}\n\nvoid rotX(inout vec3 ro, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    ro.yz = mat2(c, -s, s, c) * ro.yz;\n}\nvoid rotY(inout vec3 ro, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    ro.zx = mat2(c, -s, s, c) * ro.zx;\n}\nvoid rotZ(inout vec3 ro, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    ro.xy = mat2(c, -s, s, c) * ro.xy;\n}\n\nvec2 map(vec3 ro) {\n    vec3 roo = ro/gridlength;\n    ivec3 b = ivec3(floor(roo.x), floor(roo.y), floor(roo.z));\n    vec3 sgn = vec3(2*(abs(b) % 2)-1);\n    vec3 offset = (cos(min(mod(speed*iTime + vec3(2., 3., 4.) * PI, 3.*PI),PI))+1.) * sgn.zxy;\n    vec3 displacement = offset * gridlength/2.;\n    vec3 rotation = offset * PI/4.;\n    roo = ro;\n    ro = mod(roo + displacement, gridlength) - gridlength/2.;\n    rotX(ro, rotation.z);\n    rotY(ro, rotation.x);\n    rotZ(ro, rotation.y);\n    //beveled cube\n    vec3 rad = clamp(ro, -sidelength, sidelength);\n    float d = length(ro-rad) - bevel;\n    \n    d = max(d, -length(ro.xy)+innerradius);\n    d = max(d, -length(ro.yz)+innerradius);\n    d = max(d, -length(ro.zx)+innerradius);\n    \n    ro = mod(roo+displacement.zxy+displacement.xyz, gridlength) - gridlength/2.;\n    float d2 = length(ro) - sphereradius;\n    if (d2 < d) {\n        return vec2(d2, 2.0);\n    } else {\n        return vec2(d, 1.0);\n    }\n}\n\nvec2 map(vec3 ro, vec3 rd) {\n    float t = box(ro, rd);\n    vec2 m = map(ro);\n    if (m.x < t) {\n        return m;\n    }\n    return vec2(t + tol, 0.0);\n}\n\nvec3 raytrace(vec3 ro, vec3 rd) {\n    float t = 0.;\n    vec2 m = map(ro, rd);\n    int i;\n    for (i=0; i<iters; i++) {\n        t += m.x;\n        m = map(ro + rd * t, rd);\n        if (abs(m.x) < tol) {\n            return vec3(t, float(i)/float(iters), m.y);\n        } //else if (m.x > maxdist) break;\n    }\n    return vec3(t, float(i)/float(iters), 0.0);\n}\n\nvec4 getnormal(vec3 ro) {\n    vec2 d = vec2(eps, 0.0);\n    float x1 = map(ro+d.xyy).x;\n    float x2 = map(ro-d.xyy).x;\n    float y1 = map(ro+d.yxy).x;\n    float y2 = map(ro-d.yxy).x;\n    float z1 = map(ro+d.yyx).x;\n    float z2 = map(ro-d.yyx).x;\n    return vec4(normalize(vec3(\n        x1-x2,\n        y1-y2,\n        z1-z2)),\n        x1+x2+y1+y2+z1+z2-6.*map(ro).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    gridlength = 2.1 + 2.5*(-cos(iTime/25.)+1.);\n    //vec3 ro = vec3(4.*cos(iTime), (iMouse.y-iResolution.y/2.)/10., 4.*sin(iTime));\n    vec3 ro = vec3(gridlength/2., gridlength/2., 0.);\n    vec3 w = vec3(-1., 0., 0.);\n    vec3 u = normalize(cross(w, vec3(0., 1.0, 0.)));\n    vec3 v = cross(u, w);\n    vec3 rd = normalize(w*fdist+(fragCoord.x/iResolution.x-0.5)*u+(fragCoord.y-iResolution.y/2.0)/iResolution.x*v);\n    vec3 d = raytrace(ro, rd);\n    vec4 n = getnormal(ro + rd*d.x);\n\tvec3 col = clamp(500.*n.w, 0., 0.25) + d.y*(n.xyz+1.0)/2.0;\n    if (d.z > 1.5) {\n        vec3 refl = reflect(rd, n.xyz);\n        d = raytrace(ro + rd*d.x + refl*tmin, refl);\n        vec4 n2 = getnormal(ro + rd*d.x);\n        col = mix(col, d.y*(n2.xyz+1.0)/2.0, pow(1.-max(0., dot(n.xyz, -rd)), 1.4));\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}