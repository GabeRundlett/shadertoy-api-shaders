{
    "Shader": {
        "info": {
            "date": "1633061112",
            "description": "Pull with the mouse.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dtXDn",
            "likes": 16,
            "name": "Spring on Sliding Cart",
            "published": 3,
            "tags": [
                "2d",
                "physics",
                "block",
                "spring",
                "sliding"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\n// https://www.shadertoy.com/view/tlcBW2\nfloat udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Path of mass on spring\n    color = 1.0 - max(1.0 - color, texture(iChannel1, fragCoord / iResolution.xy).rgb);\n\n    // Track\n    drawSDF(abs(uv.y), vec3(0.0));\n\n    // Cart\n    float cartPos = texelFetch(iChannel0, ivec2(0, 0), 0).x;\n    drawSDF(sdBox(uv - vec2(cartPos, 0.0), cartSize), vec3(1.0, 0.0, 0.0));\n\n    // Spring\n    vec2 oscAnchor = vec2(cartPos, 0.0) + oscOffset;\n    vec2 oscPos = texelFetch(iChannel0, ivec2(1, 0), 0).xy - oscAnchor;\n\n    uv -= oscAnchor;\n    float oscLength = length(oscPos);\n    vec2 dir = oscPos / oscLength;\n    uv *= mat2(dir.x, dir.y, -dir.y, dir.x);\n\n    if (uv.x > 0.0 && uv.x < oscLength) drawSDF(udTriangleWave(uv, 12.0 / oscLength, 0.7), vec3(0.0));\n    drawSDF(sdDisk(uv, vec2(oscLength, 0.0), 2.0 * oscMass), vec3(0.0, 0.0, 1.0));\n\n    // Vignette\n    color *= 1.0 - 2.0 * pow(length(fragCoord / iResolution.xy - 0.5), 4.0);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFrame == 0) {\n        if (iFragCoord == ivec2(0, 0)) fragColor = vec4(0.0, 0.1, 0.0, 0.0);\n        if (iFragCoord == ivec2(1, 0)) fragColor = vec4(-3.0, 6.0, 0.01, -0.05);\n    }\n\n    if (iFrame > 0) {\n        vec2 cart = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n        float cartPos = cart.x, cartVel = cart.y;\n\n        vec4 osc = texelFetch(iChannel0, ivec2(1, 0), 0);\n        vec2 oscPos = osc.xy, oscVel = osc.zw;\n\n        // Cart\n        if (iFragCoord == ivec2(0, 0)) {\n            oscPos -= vec2(cartPos, 0.0) + oscOffset;\n            float oscLength = length(oscPos);\n            float force = oscPos.x / oscLength;\n            float extension = oscRestLength - oscLength;\n            force *= -oscSpringiness * extension;\n\n            cartVel += force / cartMass * dt;\n            cartVel *= trackFriction;\n            cartPos += cartVel * dt;\n\n            fragColor = vec4(cartPos, cartVel, 0.0, 0.0);\n        }\n\n        // Spring\n        if (iFragCoord == ivec2(1, 0)) {\n            vec2 oscAnchor = vec2(cartPos, 0.0) + oscOffset;\n            oscPos -= oscAnchor;\n\n            float oscLength = length(oscPos);\n            vec2 force = -oscPos / oscLength;\n            float extension = oscRestLength - oscLength;\n            force *= -oscSpringiness * extension;\n\n            force.y -= oscMass * gravity;\n\n            if (iMouse.z > 0.0) {\n                vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 8.0 - oscAnchor;\n                force += (mouse - oscPos) * 0.5;\n            }\n\n            oscVel += force / oscMass * dt;\n            oscVel *= oscDamping;\n            oscPos += oscVel * dt;\n\n            oscPos += oscAnchor;\n            fragColor = vec4(oscPos, oscVel);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define gravity 1.0\n\n#define trackFriction 0.999\n\n#define cartMass 1.0\n#define cartSize vec2(1.5, 0.75)\n\n#define oscMass 0.2\n#define oscRestLength 4.0\n#define oscSpringiness 0.5//0.25\n#define oscDamping 0.94\n#define oscOffset vec2(0.0, 0.4)\n\n#define dt 0.1",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    vec4 oscState = texelFetch(iChannel0, ivec2(1, 0), 0);\n    fragColor.rgb = max(fragColor.rgb, smoothstep(16.0 / iResolution.y, 0.0, sdLine(uv, oscState.xy - oscState.zw * dt, oscState.xy)));\n    fragColor.rgb *= 0.99;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}