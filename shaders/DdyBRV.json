{
    "Shader": {
        "info": {
            "date": "1698374897",
            "description": "I know it would be more efficient to have each pixel just test what sine curve it's closest to, but then the regions where they all overlap wouldn't look the same.",
            "flags": 0,
            "hasliked": 0,
            "id": "DdyBRV",
            "likes": 9,
            "name": "Nestled Sine Onions",
            "published": 3,
            "tags": [
                "2d",
                "sine",
                "rainbow",
                "onion"
            ],
            "usePreview": 0,
            "username": "isaacchurchill",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n\nvec3 palette(float x)\n{\n    return 0.5 + 0.5 * cos(x + vec3(0,2,4));\n}\n\nvec3 graph(vec2 p)\n{\n    float t = iTime * 0.1;\n    vec3 col = vec3(0.0);\n    for (float y = -2.0; y <= 1.0; y += 0.05) {\n        float i = y + fract(t);\n        float dist = abs(p.y - i - cos(p.x * PI) * sin(i * PI) / PI);\n        float intensity = exp(dist * -50.0);\n        float highlight = exp(dist * -200.0);\n        col += palette(y * PI * 2.0 + t) * intensity + highlight;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n    vec3 col = graph(p);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}