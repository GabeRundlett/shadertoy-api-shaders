{
    "Shader": {
        "info": {
            "date": "1540122301",
            "description": "its about time to optimize my seq4() sequencing functtion",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldBzB",
            "likes": 5,
            "name": "seq4() & trippleVenn syllogism",
            "published": 3,
            "tags": [
                "sequence",
                "boolean",
                "audiovisual",
                "syllogism",
                "starguitar",
                "proposition",
                "venndiagram",
                "cesare",
                "barbara",
                "clearment"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 752
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 o, in vec2 u\n ){o=imageEntry(iTime,u,iResolution.xy,iMouseZwFix(iMouse,true));}\n \n//all done in the common tab\n \n//A ven-diagram of 3 circles visualizes a syllogism\n//https://en.wikipedia.org/wiki/Syllogism\n//barbera/cesare syllogisms are interesting in terms of their boolean unions. \n//https://en.wikipedia.org/wiki/Syllogism#Table_of_all_syllogisms\n//all others are either rotations of these 2, or they have ambiguity (red)\n//those may become relevant with quantum computing.\n\n//todo, proper euclidean distance instead of a rather bad upper bond distance \n//(it is way too spiky)",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//A ven-diagram of 3 circles visualizes a syllogism\n//https://en.wikipedia.org/wiki/Syllogism\n//barbera/cesare syllogisms are interesting in terms of their boolean unions. \n//https://en.wikipedia.org/wiki/Syllogism#Table_of_all_syllogisms\n//all others are either rotations of these 2, or they have ambiguity (red)\n//those may become relevant with quantum computing.\n\n\n// https://en.wikipedia.org/wiki/Syllogism#Table_of_all_syllogisms\nfloat sylltype=0.0;\n//0.0 = barbara\n//1.0 = cesarae,celarent,camestes,calemes\n\n//todo, proper euclidean distance instead of a rather bad upper bond distance \n//(it is way too spiky)\n\nvec4 iMouseZwFix(vec4 m,bool NewCoke\n ){if(m.z>0.){ //while mouse down\n    if(m.w>0.)return m;//mouse was clicked in THIS     iFrame \n    else m.w=-m.w      //mosue was clicked in previous iFrame\n    //remember, MouseDrag advances the iFrame Count, even while paused !!\n ;}else{if(!NewCoke||m.w>0.)return m.xyxy; //OPTIONAL onMouseUp (fold or whatever)\n    m.zw=-m.zw;}\n  return m;}\n\n//damnit, i wanted to make seq(4) and get sidetracked into sylogisms\n\n//self: https://www.shadertoy.com/view/4ldBzB\n\n#define vec1 float\n#define pi acos(-1.)\n#define tau pi*2.\n//float tau=6.2831853071795864769252867665590057683943387987502116419;//trig definition can be better for smarter compilers.\n#define eul 2.7182818284590452353602874713526624977572470936999595749\n//eul=exp(1.)???\n//\"goldenRatio\"=phi+1=Phi :where: 1/phi=phi-1&&1/Phi=Phi-1\n//https://en.wikipedia.org/wiki/Golden_ratio\n#define phi (sqrt(5.)*.5-.5)\n//goldenRatio is great fun with fract(),good for hashes.\n#define Phi (sqrt(5.)*.5+.5)\n#define sat(x)clamp(x,0.,1.)\n#define dd(a)dot(a,a)\n#define u5(a)((a)*.5+.5)\n#define u2(a)((a)*2.-1.)\n//#define ss(a,u)smoothstep(a,-a,u)//bad namespace for this,more trouble than its worth\nvec1 suv(vec4 a){return dot(vec4(1),a);}vec1 suv(vec3 a){return dot(vec3(1),a);}vec1 suv(vec2 a){return a.x+a.y;}//sum of vector\n#define minx(a,b)mix(b,a,step(a.x,b.x))\n#define manx(a,b)mix(a,-b,step(a.x,-b.x))\n#define maxx(a,b)-minx(-a,-b)\n\nvec1 ss(vec1 a,vec2 b){return smoothstep(b.x,b.y,a);}\nvec2 ss(vec2 a,vec2 b){return smoothstep(b.x,b.y,a);}\nvec3 ss(vec3 a,vec2 b){return smoothstep(b.x,b.y,a);}\nvec4 ss(vec4 a,vec2 b){return smoothstep(b.x,b.y,a);}\n\n//2d zoom\n#define ViewZoom 13.\n//divide by/aa for hairline drawing and sharp smoothstep()\n#define aa(r) (min(r.x,r.y)/ViewZoom)\n#define fra(u)(u-.5*r.xy)*ViewZoom/r.y//usually first function of mainImage(),not typecast.\n\n\nvec1 mi(vec1 a,vec1 b){return min(a,b);}\nvec2 mi(vec2 a,vec2 b){return min(a,b);}\nvec3 mi(vec3 a,vec3 b){return min(a,b);}\nvec4 mi(vec4 a,vec4 b){return min(a,b);}\nvec1 mi(vec1 a,vec1 b,vec1 c){return mi(mi(a,b),c);}\nvec2 mi(vec2 a,vec2 b,vec2 c){return mi(mi(a,b),c);}\nvec3 mi(vec3 a,vec3 b,vec3 c){return mi(mi(a,b),c);}\nvec4 mi(vec4 a,vec4 b,vec4 c){return mi(mi(a,b),c);}\nvec1 mi(vec2 a){return mi(a.x,a.y);}\nvec1 mi(vec3 a){return mi(mi(a.xy),a.z);}\nvec1 mi(vec4 a){return mi(mi(a.xy),mi(a.zw));}\n\nvec1 ma(vec1 a,vec1 b){return max(a,b);}\nvec2 ma(vec2 a,vec2 b){return max(a,b);}\nvec3 ma(vec3 a,vec3 b){return max(a,b);}\nvec4 ma(vec4 a,vec4 b){return max(a,b);}\nvec1 ma(vec1 a,vec1 b,vec1 c){return ma(ma(a,b),c);}\nvec2 ma(vec2 a,vec2 b,vec2 c){return ma(ma(a,b),c);}\nvec3 ma(vec3 a,vec3 b,vec3 c){return ma(ma(a,b),c);}\nvec4 ma(vec4 a,vec4 b,vec4 c){return ma(ma(a,b),c);}\nvec1 ma(vec1 a){return a;}\nvec1 ma(vec2 a){return ma(a.x,a.y);}\nvec1 ma(vec3 a){return ma(ma(a.xy),a.z);}\nvec1 ma(vec4 a){return ma(ma(a.xy),ma(a.zw));}\nfloat barbara(vec3 a){return mi(ma(a.y,-a.z),ma(a.x,-a.y),ma(a.x,-a.z));}\nfloat cesare(vec3 a){return mi(ma(-a.y,a.x),ma(a.z,a.x),ma(a.z,a.y));}\n\n/*\nvec1 xo(vec2 a){return ma(-ma(a),mi(a));}\n//xo(vec3) can be a nice \"wall\" with no area that has thichness of 0\nvec1 xo(vec3 a){return ma(-ma(a),mi(a));}\nvec1 xo(vec1 a,vec1 b){return xo(vec2(a,b));}\nvec1 xo(vec1 a,vec1 b,vec1 c){return xo(vec3(a,b,c));}\n//star() is not mi(a) and not ma(a), but the \"thing between that\"\n//, the inside 4 areas of 4 overlapping circles!\nvec1 star(vec3 a){return mi(ma(a.xy),ma(a.xz),ma(a.zy));}\n    */\n\n\nvec1 ad(vec1 a){return a;}\nvec1 ad(vec2 a){return a.x+a.y;}\nvec1 ad(vec3 a){return a.x+a.y+a.z;}\nvec1 ad(vec4 a){return a.x+a.y+a.z+a.w;}\n//[le] is any label of a \"distance field\" to a point with as many domains as [u]\n//#define seq4(u,s,le) mi(vec4(le(u-vec2(0,s.x)),le(u-vec2(1,s.y)),le(u-vec2(2,s.z)),le(u-vec2(3,s.w))))\n#define seq4(u,s,le)mi(vec4(le(u-vec2(0,s.x)),le(u-vec2(1,s.y)),le(u-vec2(2,s.z)),le(u-vec2(3,s.w))))\n//#define seq4(u,s,le) sqrt(mi(vec4(dd(u-vec2(0,s.x)),dd(u-vec2(1,s.y)),dd(u-vec2(2,s.z)),dd(u-vec2(3,s.w)))))\n\n\n//https://en.wikipedia.org/wiki/Chebyshev_distance\n#define maab(a)ma(abs(a))\n//https://en.wikipedia.org/wiki/Taxicab_geometry\n#define adab(a)ad(abs(a))\nfloat le(vec2 a){return length(a);}\n\n\n\n//tripple min() max() are actually a bit trickier\n//bcause ma(vec3) has some gradient-cancellations\nvec4 demoSyllogism(vec2 u,float t\n){vec4 d=vec4(0)\n ;d=sqrt(vec4(dd(u+4.),dd(u+2.),dd(u+vec2(2,4)),1))-2.\n //d.xyz is distance to 3 overlapping circles (tripple-boolean-diagram)\n //it segments 8 areas (which can be used for an octave, like viiheat did)  \n ;float m=ma(d)                                   //1center  //is trivial\n ;vec4 a=vec4(0)                     \n ;  a.x=ma(mi(d.xy),mi(d.yz),mi(d.xz)) //4star\n ;//a.x=mi(ma(d.xy),ma(d.xz),ma(d.zy)) //4star (identity)\n ;  a.y=-mi(m,-a.x)                    //3star minus center\"trippleVenXorInside\"\n ;//a.y=xo(ma(d.xy),ma(d.yz),ma(d.xz)) //3star (identity)\n ;\n ;//blue tinted syllogism:\n ;if (sylltype==0.0) a.z=barbara(d.xyz) //4barbara (eg: all greeks are men are mortal)\n ;else               a.z=cesare (d.xyz) //4cesare\n ;  a.w=mi(mi(d.xy),mi(d.xz))           //7center\n ;vec4 b=vec4(0)\n ;  b.x=ma(a.w,-a.y) //3wall\n ;  b.y=ma(a.w,-a.z) //4wall\n ;  b.z=cesare(d.xyz)//4Cesare/clearment (eg: all snakes are reptules do not have fur)\n ;  b.w=ma(a.w,-a.x) //6wall\n ;vec3 c=u5(vec3(cos(t),sin(t*1.62),cos(t*.61)))\n ;d.w= //mix(mix(a.x,a.y,c.x),mix(a.z,a.w,c.y),c.z)\n     //mix(a.y,a.z,c.x)//\n      mix(a.z,b.z,0.)  //interpolate between barbara & clearment \n    // b.z    \n ;d.w-=.05//evade issues of points where a wall has a [thickness of 0]\n ;return d//-cos(t)\n  ;}\n\nvec4 imageEntry(vec1 t,vec2 u,vec2 r,vec4 m\n){float u5cot=u5(cos(t))\n ;m.xy=fra(m.xy)\n ;m.zw=fra(m.zw)\n ,u=fra(u)\n ;vec4 c=vec4(1)\n ;c.x=length(u-m.xy)\n ;vec4 s=vec4(vec4(0,3,1,2.+m.y))\n ;c.x=seq4((u   ),s,adab)      //taxicap   diagonal box    distance\n ;c.y=seq4((u-.5),s,maab)      //Chebyshev ________ box    distance\n ;c.z=sqrt(seq4((u-1.),s,dd)); //euclid    ________ sphere distance\n ;//c.z=seq4((u-1.),s,le);     //euclid    ________ sphere distance\n ;c.xyz=c.xyz-u5cot-.5+.3\n ;c.z+=.3//smaller circles\n ;vec4 d=demoSyllogism(u,t)\n ;c.xyz=min(c.xyz,d.xyz)\n\n ;if (sylltype==0.0) c.w=barbara(c.xyz)-.05 //green tinted syllogism\n ;else               c.w=cesare (c.xyz)-.05 //green tinted syllogism\n ;c.xyz=abs(c.xyz)\n //;c.w=fract(c.w)\n\n ;c.xyz=ss(c.xyz,vec2(1.,-1.)*2./aa(r))\n ;c.w=mix(ss(c.w,vec2(1.,-1.)*2./aa(r)),fract(c.w*4.),.5)\n ;d=mix(ss(d,vec2(1.,-1.)*2./aa(r)),fract(d*4.),.5)\n ;c.xyz+=c.yzx//rgb to cym\n ;c.y+=c.w*.25\n ;c.z+=d.w\n ;c.w=1.\n ;return c\n ;}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}