{
    "Shader": {
        "info": {
            "date": "1598113886",
            "description": "ðŸ˜… A very simple implementation of clouds without volumetrics or raymarching or any of that because this is meant to be used for a Minecraft Bedrock Shader. Noise based on https://www.shadertoy.com/view/tlB3zK.",
            "flags": 0,
            "hasliked": 0,
            "id": "wllBWs",
            "likes": 2,
            "name": "My First Clouds",
            "published": 3,
            "tags": [
                "simple",
                "clouds",
                "fbm",
                "sky",
                "worley"
            ],
            "usePreview": 0,
            "username": "MilkyDeveloper",
            "viewed": 963
        },
        "renderpass": [
            {
                "code": "// MIT License :D\n\n\n//noise function from iq: https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p ) \n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nconst mat2 m2 = mat2(1.6,  1.2, -1.2,  1.6);\n\nfloat fbm4(vec2 p) {\n    float amp = 0.5;\n    float h = 0.0;\n    for (int i = 0; i < 4; i++) {\n        float n = noise(p);\n        h += amp * n;\n        amp *= 0.5;\n        p = m2 * p ;\n    }\n    \n\treturn  0.5 + 0.5*h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 sky = vec3(135./255., 206./255., 235./255.); // Just googled this lmao\n    vec3 col = vec3(0.0);\n\n    // layer1\n    vec3 cloudCol = vec3(1.);\n    uv += 10.0;\n    \n    float speed      = 1.0;\n    float brightness = 0.75;\n    float cover      = 0.3;\n    \n    float zoom = 1.25; // Multiplier of UV, a higher number is for \"zooming out\"\n    \n\tfloat n1 = fbm4(uv*zoom+(iTime*(speed/30.))); // +iTime is for moving left, -iTime is for moving right\n    col = mix( sky, cloudCol, smoothstep(cover, brightness, n1));\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}