{
    "Shader": {
        "info": {
            "date": "1713260034",
            "description": "12",
            "flags": 0,
            "hasliked": 0,
            "id": "McKGWy",
            "likes": 1,
            "name": "ShaderToy_12_Text",
            "published": 3,
            "tags": [
                "text"
            ],
            "usePreview": 0,
            "username": "tbx",
            "viewed": 122
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\n#define COUNT 20.0\n\nfloat drawCoord(vec2 uv)\n{\n   float x = distance(vec2(uv.x, 0.0), vec2(0.0, 0.0));\n   float y = distance(vec2(0.0, uv.y), vec2(0.0, 0.0));\n   \n   return 1e-3 / x + 1e-3 / y;\n}\n\nfloat net(vec2 coord)\n{\n    float xline = cos(coord.x * PI * COUNT);\n    xline = step(1.0 - 1e-1, xline);\n    \n    float yline = cos(coord.y * PI * COUNT);\n    yline = step(1.0 - 1e-1, yline);\n    \n    return max(xline, yline);\n}\n\n// coord:[-1.1]\n// c:[0, 15]\nfloat drawChar(vec2 coord, vec2 c, vec2 offset, float scale)\n{\n    vec2 uv = coord;\n    \n    vec2 start_pos = vec2(char_size * (16.0 / scale));\n    \n    uv = uv - start_pos * (1.0 + offset * char_dis);\n    \n    uv = uv * scale;\n    \n    uv = uv * 0.5 + 0.5;\n    \n    uv = clamp(uv, vec2(0.0), vec2(1.0));\n    \n    uv *= char_size;\n    uv += (c * char_size);\n    \n    float char_sdf = 1.0 - texture(iChannel0, uv).w;\n    \n    float char = smoothstep(char_smooth, char_smooth * 1.1, char_sdf);\n    \n    char += smoothstep(char_smooth * 0.9, char_smooth * 0.99, char_sdf) * 0.5;\n    \n    return char;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float asp = iResolution.x / iResolution.y;\n    \n    vec2 coord = uv * 2.0 - 1.0;\n    \n    vec2 aspCoord = vec2(coord.x * asp, coord.y);\n    \n    vec3 col = vec3(0.0);\n    \n    col += net(aspCoord) * 0.125;\n    \n    col += drawCoord(aspCoord);\n    \n    float scale = 8.0;\n    \n    vec3 char_col = vec3(sin(iTime) * 2.0 + 1.0, uv.y, 0.25);\n    \n    col += drawChar(aspCoord, c_a, vec2(0.0), scale) * char_col;\n    col += drawChar(aspCoord, c_b, vec2(1.0, 0.0), scale) * char_col;\n    col += drawChar(aspCoord, c_c, vec2(2.0, 0.0), scale) * char_col;\n    col += drawChar(aspCoord, c_d, vec2(3.0, 0.0), scale) * char_col;\n    \n    col += drawChar(aspCoord, c_e, vec2(0.0, -1.0), scale) * char_col;\n    col += drawChar(aspCoord, c_f, vec2(1.0, -1.0), scale) * char_col;\n    \n    col += drawChar(aspCoord, c_o, vec2(-8.0, 2.0), scale) * char_col;\n    col += drawChar(aspCoord, c_p, vec2(-8.0, 1.0), scale) * char_col;\n    col += drawChar(aspCoord, c_q, vec2(-8.0, 0.0), scale) * char_col;\n    col += drawChar(aspCoord, c_r, vec2(-8.0, -1.0), scale) * char_col;\n    col += drawChar(aspCoord, c_s, vec2(-8.0, -2.0), scale) * char_col;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 16x16 chars\n#define char_size 1.0/16.0\n// distance between chars\n#define char_dis vec2(1.5, 2.0)\n// smooth\n#define char_smooth 0.47\n// coord in texture\n#define c_a vec2(1.0, 9.0)\n#define c_b vec2(2.0, 9.0)\n#define c_c vec2(3.0, 9.0)\n#define c_d vec2(4.0, 9.0)\n#define c_e vec2(5.0, 9.0)\n#define c_f vec2(6.0, 9.0)\n#define c_g vec2(7.0, 9.0)\n#define c_h vec2(8.0, 9.0)\n#define c_i vec2(9.0, 9.0)\n#define c_j vec2(10.0, 9.0)\n#define c_k vec2(11.0, 9.0)\n#define c_l vec2(12.0, 9.0)\n#define c_m vec2(13.0, 9.0)\n#define c_n vec2(14.0, 9.0)\n#define c_o vec2(15.0, 9.0)\n#define c_p vec2(0.0, 10.0)\n#define c_q vec2(1.0, 10.0)\n#define c_r vec2(2.0, 10.0)\n#define c_s vec2(3.0, 10.0)\n#define c_t vec2(4.0, 10.0)\n#define c_u vec2(5.0, 10.0)\n#define c_v vec2(6.0, 10.0)\n#define c_w vec2(7.0, 10.0)\n#define c_x vec2(8.0, 10.0)\n#define c_y vec2(9.0, 10.0)\n#define c_z vec2(10.0, 10.0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}