{
    "Shader": {
        "info": {
            "date": "1550585404",
            "description": "Hypnotic grid with animated overlapping pulsating Xor Circles.\n\nCode inspired by https://www.youtube.com/watch?v=cQXAbndD5CQ with many thanks for the high competence.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdlSzn",
            "likes": 14,
            "name": "Hypnotic Carpet",
            "published": 3,
            "tags": [
                "circle",
                "animation",
                "xor",
                "rotation",
                "operlap"
            ],
            "usePreview": 0,
            "username": "arthurstammet",
            "viewed": 841
        },
        "renderpass": [
            {
                "code": "// Grid with animated overlapping pulsating Xor Circles \n// my step by step tutorial\n\nfloat Xor(float a, float b) {\n    return a*(1.-b) + b*(1.-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; // set center to the middle of the screen\n    vec3 col = vec3(0.,0.,0.); // black screen\t\n\n    float ta = iTime*.2; // change animation speed : animation amplitude\n    float tr = iTime*.01; // change animation speed : carpet rotation\n    float tn = iTime*.009; // change animation speed : number of cells\n    float td = iTime*.003; // change animation speed : diameter of the circles\n    float th3 = iTime*.1; // change animation speed : amplitude of the 3rd harmonic\n    float th4 = iTime*.11; // change animation speed : amplitude of the 4th harmonic\n    float std = sin(td);\n    float tVarD = std+(3.*std*(.333*th3))+(4.*std*(.25*th4)); // build a complex wave\n\n    float amp1 = 0.1; // 0 <> 1.5 for circles\n    float amp2 = 0.7; // 0 <> 1.5 for circles (0.5 <> 1.5 for Xor effects)\n    \n\t// rotate a matrix\n    float a = tr;\n    float s = sin(a);\n    float c = cos(a);\n    uv *= mat2(c, -s, s, c);\n    uv *= 10. + sin(tn);\n\n    vec2 gv = fract(uv)-.5; // set center of a single box\n    vec2 id = floor(uv)+.5; // give each single box an id\n\n    float m = 0.;\n\n    // using the 8 cells surrounding main cell for drawing the circles\n    for(float y=-1.; y<=1.; y++) {\n        for(float x=-1.; x<=1.; x++) {\n\t        vec2 offs = vec2(x, y);\n\t        float d = length(gv-offs);\n            float dist = length(id+offs)*(.25+(tVarD*.2)); // make the diameters pulsate\n\t        float r = mix(amp1, amp2, sin(dist-ta)*.5+.5); // set min and max = animation amplitude\n\n            m = Xor(m, smoothstep(r, r-15./iResolution.y, d));\n        }\n    }\n\n    col += m;\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}