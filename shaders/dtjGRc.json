{
    "Shader": {
        "info": {
            "date": "1673657002",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "dtjGRc",
            "likes": 11,
            "name": "Fractal mosaic 37",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,.5)\n        //-vec2(1.,.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.x += iTime/t1/12.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 9; k++){\n        vec2 uv1 = uv;\n        uv = (uv+t2)/scale;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n        t2 =\n            triangle_wave(uv+.5)\n            //triangle_wave(uv+.5)*sign(.5-uv.x)\n        ;\n        uv = fract(t2+triangle_wave(uv.yx)+.5);\n        col.x =\n            max(max((t2.y+t2.x*sign(uv.x)),abs(uv.y+uv.x))/6.,col.x)\n        ;\n        col =\n            max(abs(col-1.+col.x),col/3.);\n            //max((col-1.+col.x/1.5),(1.-col-col.yzx));\n        //if(uv.y < .5) uv.y += .5;\n        //if(uv.x < .5) uv.x += .5;\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remixed from https://www.shadertoy.com/view/cdXXRB\n\n#define sqmod(x,y) floor(mod(floor(x)/4.,y*y)/y)\n//#define sqmod(x,y) max(floor(mod(floor(x),y*y)/y),mod(floor(x)*floor(x),y))\n//#define sqmod(x,y) max(mod(floor((x)/2.),y),mod(floor((x)*2.),y/2.))\n\n\nvec2 mainSound(int samp, float time){\n float tempo = 1.;\n time /= tempo;\n //time *= (1.+sqmod(time*2.,2.));\n //time /= (1.+sqmod(time*2.,2.));\n \n //time += floor(time*8.+floor(time/8.))/8.;\n\n \n float s1 =\n      4.;\n  \n  float\n  m4 =\n      1.-sqmod(time,2.)\n  ,\n  t=\n      time/(1.+m4)\n  ;\n  //t += floor(t*8.)*8.;\n  float m3 =\n      sqmod(floor(t*s1*2.)+t*(.5-m4)*2.,s1);\n\n  t *=\n      s1*s1\n  ;\n  float m2 =\n      1. + sqmod(t/s1,s1)\n  ;\n  \n  float a = 128.*sqrt((1.-sqrt(max(fract(t/s1/s1),fract(t/s1)))))*.2/(1.+m4),\n\n  nb = time*tempo*pow(2.,(m3+m2)/5.+6.5)*4./(1.+mod(floor(t),s1))/2.;\n\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      //vec2(fract(time*nb*.998*(1.+m4)),fract(time*nb*(1.+m3)))*a\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}