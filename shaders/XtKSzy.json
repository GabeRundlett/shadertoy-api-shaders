{
    "Shader": {
        "info": {
            "date": "1485175847",
            "description": "One possible way to make a textured grass quad.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtKSzy",
            "likes": 4,
            "name": "Quad plane grass",
            "published": 3,
            "tags": [
                "fake",
                "grass",
                "quad"
            ],
            "usePreview": 0,
            "username": "mlkn",
            "viewed": 901
        },
        "renderpass": [
            {
                "code": "/*  \n\tBatch quads and add some vertex displacement based on uv.y and quad normal.\n\tGrass texture should have alpha=0 border on all sides except for bottom.\n\tAlso result is better with set background color on texture with alpha=0.\n\n\tFor usage with texture atlas:\n\t\tvTexOffset = vec2(floor(texNum / atlasSize), floor(mod(texNum, atlasSize)) ) / atlasSize;\n\t\tvUv = uv / atlasSize + vTexOffset;\n\t\t------------\n\t\tvec2 cUv = (vUv - vTexOffset) * atlasSize; // [0, 1]\n\t\tfloat transformedX = clamp(vSway + cUv.x, 0., 1.) / atlasSize + vTexOffset.x;\n*/\n\nconst float swayAmplitude = 0.22;\nconst float swayFrequency = 1.;\n\nvec4 drawGrassQuad(vec2 uv) {\n\t// swayUnsync and sway could be computed in vertex shader.\n    float swayUnsync = 0.;\n    float sway = uv.y * uv.y * sin(swayFrequency * iTime + swayUnsync) * swayAmplitude;\n        \n    float transformedX = clamp(uv.x + sway, 0., 1.); // clamp is for using with texture atlas\n\n    vec4 col = texture(iChannel0, vec2(transformedX, uv.y));\n\n    if (col.a < 0.1) discard; // could be attenuated with vViewPosition.z \n \t\n    return vec4(col.rgb, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x = uv.x * ratio - (ratio - 1.) / 2.;\n\n    vec4 color = vec4(.1);\n    \n    if (abs(uv.x - 0.5) < 0.5) color = drawGrassQuad(uv);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}