{
    "Shader": {
        "info": {
            "date": "1689446478",
            "description": "Documenting polar repetition/arrays for SDFs (bound, not exact). Adapted from iq's \"Spherical Gears\" video. I tried to comment pretty heavily (this is mainly to help myself remember)",
            "flags": 0,
            "hasliked": 0,
            "id": "DsSfzh",
            "likes": 6,
            "name": "Polar SDF Repetition (Bound)",
            "published": 3,
            "tags": [
                "sdf",
                "repetition",
                "array",
                "polar"
            ],
            "usePreview": 0,
            "username": "tristanantonsen",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653592\n\nfloat Circle(vec2 p, vec2 c, float r) {\n    return length(p-c) - r;\n}\n\nvec2 polarArray(vec2 p, float n, vec2 c, float a ) {\n    // p: the point to transform\n    // c: the center of the array\n    // a: the offset angle\n    \n    p = mat2(cos(a), -sin(a), sin(a), cos(a)) * p; //rotate in XY plane\n    \n    // Array parameters\n    float theta = 2. * PI / n;                    \n    float segment = round(atan(p.y,p.x) / theta); \n    float alpha = segment * theta;                \n    \n    vec2 q = p;\n    \n    q.xy = mat2(cos(alpha), -sin(alpha), sin(alpha), cos(alpha)) * q.xy; //rotate in XY plane\n    \n    return q;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution .xy)/iResolution.y;\n    \n        \n    // Colors\n    vec3 col1 = vec3(244, 162, 97) / 255.; // yellow\n    vec3 col2 = vec3(231, 111, 81) / 255.; // orange\n    vec3 col3 = vec3(38, 70, 83) / 255.;   // blue\n    vec3 col4 = vec3(233, 196, 106) / 255.;   // green\n    \n    \n    vec2 p = uv; // the \"local\" coordinate point\n    \n    // Rotating the whole array\n    float a = 0.1*iTime;\n    p = mat2(cos(a), -sin(a), sin(a), cos(a)) * p; //rotate in XY plane\n    \n    \n    // Array parameters\n    float N = round(12. + 6.*sin(2.*iTime));      // Number of instances\n    float theta = 2. * PI / N;                    // angle between instances\n    float segment = round(atan(p.y,p.x) / theta); // the instance/segment number\n    float alpha = segment * theta;                // rotation angle\n    \n    \n    // Rotating each point back to position 0\n    vec2 q = p;\n    \n    // ==================================================\n    // 2D Rotation of point (x,y) by angle a in XY plane:\n    // | cos(a) -sin(a) || x |\n    // | sin(a)  cos(a) || y |\n    // ==================================================\n    \n    q.xy = mat2(cos(alpha), -sin(alpha), sin(alpha), cos(alpha)) * q.xy; //rotate in XY plane\n    \n    // Radius of polar array\n    float r = 0.35 + 0.1*sin(iTime);\n    \n    // distance/map function. This is the circle that will be arrayed\n    float d = Circle(q, vec2(r,0.), 0.05);\n\n    // Visualization\n    vec3 col = col1;\n    float c = abs(Circle(p, vec2(0.), r)) * mod(segment,2.); // segment colors\n    col = mix(col2, col, smoothstep(0.,1.,250.*c));          // array path\n    \n    // Axes\n    col = mix(vec3(1.), col, smoothstep(0.,1.,500.*abs(uv.x)));\n    col = mix(vec3(1.), col, smoothstep(0.,1.,500.*abs(uv.y)));\n    \n    // Array instances\n    col = mix(col3,col, smoothstep(0.,1.,200.*d));\n\n    \n    // Higlighting the starting instance\n    float f = Circle(p, vec2(r,0.), 0.05);\n    \n    col = mix(vec3(1.),col, smoothstep(0.,1.,400.*abs(f)));\n    \n       \n    // Version that packs it into a function\n    vec2 q2 = polarArray(uv, 8., vec2(0.), 0.);\n    float d2 = Circle(q2, vec2(0.15,0.), 0.025);\n    \n    col = mix(col4,col, smoothstep(0.,1.,200.*d2));\n    \n    fragColor = vec4(col,1.0);\n    \n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}