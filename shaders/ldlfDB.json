{
    "Shader": {
        "info": {
            "date": "1497993081",
            "description": "my backup clone of \nhttps://www.shadertoy.com/view/ldsczH\nwith minor changes to form.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldlfDB",
            "likes": 3,
            "name": "Quadratic Equations b",
            "published": 3,
            "tags": [
                "gradient",
                "checkerboard",
                "solver",
                "quadratic"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "/*\nfloat smootherstep(float edge0, float edge1, float x){\n x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);\n  return x*x*x*(x*(x*6.0 - 15.0) + 10.0);}\n*/\n\n// shoutouts to the amazing tool at\n//   http://dev.thi.ng/gradients/\n// for generating these color palettes\nvec3 color(float t){\n vec3 a=vec3(.660,.560,.680);\n vec3 b=vec3(.718,.438,.720);\n vec3 c=vec3(.520,.800,.520);\n vec3 d=vec3(.430,.397,.083);\n return clamp(a+b*cos(2.*3.14159*(c*t-d)),0.,1.);}\n#define hfrac vec2 h){h=fract(h)\nfloat checkerBool (hfrac;return float(h.x>.5==h.y>.5);}\n\nfloat absCircular(float t){return fract(abs(floor(t+.5)-t));}\nfloat sumv(vec2 a){return a.x+a.y;}\n#define fw(n) texture(iChannel0, vec2(n,0)).x\nfloat func(vec2 u){\n vec2 a=2.*vec2(fw(.05),fw(.25))-1.;    \n vec2 d=2.*vec2(fw(.35),fw(.45))-1.;\n vec2 b=2.*vec2(fw(.15),fw(.55))-1.;\n float r=sumv(a*u*u)+sumv(d*u)+b.x*u.x*u.y+b.y;//return r;\n float g=length(2.*vec2(a*u)+b.x*u.yx+d);//length of scaled gradient\n return 2.*r/g;//approximated distance to graph (bad near local extrema)\n}\n\nvec2 frame(vec2 p){\n return 2.5*(2.*p/iResolution.y-vec2(iResolution.x/iResolution.y,1.));}\nvoid mainImage( out vec4 fragColor, in vec2 U){\n vec2 p=frame(U);\n vec3 r=vec3(0);\n r=color(checkerBool(p)*.1+.4);//checkerboard \n r=mix(color(.1),r,smoothstep(.0,.03,absCircular(p.x)));\n r=mix(color(.1),r,smoothstep(.0,.03,absCircular(p.y)));//minor axis\n r=mix(color(.0),r,pow(smoothstep(.0,.05,abs(p.x)),1.));\n r=mix(color(.0),r,pow(smoothstep(.0,.05,abs(p.y)),1.));// main axes\n float smo=15./iResolution.y; \n r=mix(color(1.),r,.5+pow(smoothstep(smo,-smo,func(p)),1.));    \n    // draw the sidebar\n    bool isInSidebar = U.x < iResolution.y/3.0;\n    float sidebarWidth = iResolution.y / 3.0;\n    r = mix(color(0.5), r, isInSidebar ? 0.2 : 1.0);\n    if (abs(U.x - sidebarWidth) < 2.0)\n        r = color(0.7);\n    if (isInSidebar && abs(U.y - sidebarWidth) < 2.0)\n        r = color(0.7);\n    if (isInSidebar && abs(U.y - 2.0 * sidebarWidth) < 2.0)\n        r = color(0.7);\n    float a=fw(.05),b=fw(.15),c=fw(.25),d=fw(.35),e=fw(.45),f=fw(.55);\n    if (isInSidebar && U.y < sidebarWidth && abs(sidebarWidth * a - U.x) < 1.0)\n        r=color(.8);\n    if (isInSidebar && abs(sidebarWidth * b - U.y) < 1.0)\n        r=color(.8);\n    if (isInSidebar && sidebarWidth < U.y && U.y < 2.0 * sidebarWidth && abs(sidebarWidth * c - U.x) < 1.0)\n        r=color(.8);\n    if (isInSidebar && abs(sidebarWidth * d - U.y + sidebarWidth) < 1.0)\n        r=color(.8);\n    if (isInSidebar && 2.0*sidebarWidth < U.y && abs(sidebarWidth * e - U.x) < 1.0)\n        r=color(.8);\n    if (isInSidebar && abs(sidebarWidth * f - U.y + 2.0 * sidebarWidth) < 1.0)\n        r=color(.8);\n //Buffer A debug\n //vec2 uv = fragCoord.xy / iResolution.xy;\n //final = texture(iChannel0, uv).xyz;\n fragColor=vec4(r,1);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 screenToWorld(vec2 coord)\n{\n    return 2.5 * (2.0 * coord / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 curState = texture(iChannel0, uv);\n    float boxWidth = iResolution.y / 3.0;\n    \n    float square = -1.0;\n    if (iMouse.x < boxWidth)\n    {\n        if (iMouse.y < boxWidth)\n            square = 0.0;\n        else if (iMouse.y < 2.0 * boxWidth)\n            square = 1.0;\n        else\n            square = 2.0;\n    }\n    \n    float x, y;\n    x = iMouse.x / boxWidth;\n    y = (iMouse.y - square * boxWidth) / boxWidth;\n    \n    fragColor = vec4(0,0,0,-1);\n    if (square == 0.0)\n    {\n        if (0.0 <= uv.x && uv.x < 0.1)\n            fragColor = vec4(x,0,0,1);\n        if (0.1 <= uv.x && uv.x < 0.2)\n            fragColor = vec4(y,0,0,1);\n    }\n    else if (square == 1.0)\n    {\n        if (0.2 <= uv.x && uv.x < 0.3)\n            fragColor = vec4(x,0,0,1);\n        if (0.3 <= uv.x && uv.x < 0.4)\n            fragColor = vec4(y,0,0,1);\n    }\n    else if (square == 2.0)\n    {\n        if (0.4 <= uv.x && uv.x < 0.5)\n            fragColor = vec4(x,0,0,1);\n        if (0.5 <= uv.x && uv.x < 0.6)\n            fragColor = vec4(y,0,0,1);\n    }\n    \n    if (square == -1.0)\n    {\n        float a = texture(iChannel0, vec2(0.05,0)).x;\n        float b = texture(iChannel0, vec2(0.15,0)).x;\n        float c = texture(iChannel0, vec2(0.25,0)).x;\n        float d = texture(iChannel0, vec2(0.35,0)).x;\n        float e = texture(iChannel0, vec2(0.45,0)).x;\n        float f = texture(iChannel0, vec2(0.55,0)).x;\n        if (a == b && b == c && c == d && d == e && e == f && f == 0.0)\n        {\n            if (mod(uv.x/0.1,1.0) < 1.0)\n            \tfragColor = vec4(0.25,0,0,1);\n            else\n                fragColor = vec4(0.75,0,0,1);\n        }\n    }\n    \n    if (fragColor.w < 0.0)\n    \tfragColor = curState;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}