{
    "Shader": {
        "info": {
            "date": "1693066952",
            "description": "This is a comparison as well as a simple, commented demo on how to preserve contrast when interpolating colors.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtXfD7",
            "likes": 5,
            "name": "Histogram Preserving Blend",
            "published": 3,
            "tags": [
                "test",
                "mix",
                "contrast",
                "lerp",
                "blend",
                "interpolation",
                "variance",
                "comparison"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "/*\nThis is a simple demo and guide designed to help you understand contrast-preserving \ninterpolation techniques.\n\nThe interpolation between two colors leads to a reduction in contrast, which can \nbecome quite noticeable. To mitigate the diminished contrast, we compare two \nmethods I found on Shadertoy.\n\nThe shader illustrates these two methods standalone functions, with comments and \nreformatting for improved readability. The columns, from top to bottom, showcase:\n1. The alpha parameter utilizing the Viridis Colormap\n2. A toggle between two textures at an alpha value of 0.5\n3. Standard interpolation between the two textures\n4. Histogram-Preserving Blending (by Fabrice Neyret, https://www.shadertoy.com/view/4dcSDr)\n5. Contrast-Aware Blending (by huwb, https://www.shadertoy.com/view/MtcGWs)\n6. Height blend based on lightness\n\nThe Histogram-Preserving Blending is basically the standart everywhere, but it\nproduces sometimes worse results for example when blending grayscale noise. \nI think my ligthness blend is superiour and it doesn't even requiere an additional\ntexture sample and works great in all cases I tried yet.\n*/\n\n// select the texture using an index. Acts like a crude texture array\nvec4 textureArray(int index, vec2 uv) {\n    vec4 color;\n    if (index == 0) {\n        color = texture(iChannel0, uv);\n    } else if (index == 1) {\n        color = texture(iChannel1, uv);\n    } else if (index == 2) {\n        color = texture(iChannel2, uv);\n    } else {\n        color = texture(iChannel3, uv);\n    }\n    return color;\n}\n\n// select the texture using an index. Acts like a crude texture array with mip level\nvec4 textureArray(int index, vec2 uv, float mip) {\n    vec4 color;    \n    if (index == 0) {\n        color = texture(iChannel0, uv, mip);\n    } else if (index == 1) {\n        color = texture(iChannel1, uv, mip);\n    } else if (index == 2) {\n        color = texture(iChannel2, uv, mip);\n    } else {\n        color = texture(iChannel3, uv, mip);\n    }\n    return color;\n}\n\n// hard Edge from switching directly between on or the other\nvec4 twoTextureSwitch(vec4 A, vec4 B, float alpha) {\n    // switch between uvs at halfway point of alpha\n    return (alpha < 0.5) ? A : B;;\n}\n\n// vanilla interpolation of two textures\nvec4 twoTextureLerp(vec4 A, vec4 B, float alpha) {\n     \n     // Interpolation between the textures\n     return mix(A, B, alpha);\n}\n\n// NB: trick published in https://hal.inria.fr/inria-00536064v2\n// deeper conservation: see histogram-preserving here: https://hal.inria.fr/hal-01824773\n// modified version of FabriceNeyret2 https://www.shadertoy.com/view/4dcSDr \nvec4 conrastCorrectBlend(vec4 A, vec4 B, float alpha, int texIndex, vec2 uvA) {\n    \n    // Interpolation between the textures\n    vec4 col = mix(A, B, alpha);\n    \n    // redudant for true alpha with sum 1\n    //float alphaSum = 1.; // alpha + (1.-alpha);\n    \n    // square alphas and add them up\n    // or do this instead dot(vec2(alpha, (1.-alpha), vec2(alpha, (1.-alpha))\n    float squaredAlphaSum = alpha * alpha + (1.-alpha) * (1.-alpha);\n    \n    // sampling mips lowest level to get the mean, could be a constant if known\n    vec4 mean = textureArray(texIndex, uvA, 1000.);\n    \n    // variance restoration with normalization\n    //return mean + (col - alphaSum * mean) / sqrt(squaredAlphaSum); // alphaSum == 1\n    return mean + (col - mean) / sqrt(squaredAlphaSum);\n}\n\n// from huwb https://www.shadertoy.com/view/MtcGWs\nvec4 contrastBlend(vec4 A, vec4 B, float alpha ) {\n     \n    // brightness\n    float Ab = A.x * B.y * A.z;\n    float Bb = B.x * B.y * B.z;\n    \n    // work out blend param based on relative brightness, smoothstep\n    // to increase contrast.\n    float contrastAlpha = smoothstep(0.,1.,2.*Ab/(Ab+Bb));\n    \n    // push our alpha towards the contrastAlpha, but still follow alpha to 0 and 1.\n    \n    // goes to 0 when alpha is near 0 or 1\n    float proximityTo01 = min(alpha,1.-alpha);\n        \n    // powering it up seems to give better results\n    proximityTo01 = pow( proximityTo01, 0.25);\n    \n    // mix between alpha and contrast-aware alpha\n    alpha = mix( alpha, contrastAlpha, proximityTo01);\n    \n    //return vec4(viridis(alpha), 0.);\n    \n    // Interpolation\n    return mix( A, B, alpha );\n}\n\n// Offset weight with height bias by contrast\n// See https://www.desmos.com/calculator/gxhnhzu1cs\nfloat straightHeightWeight (float weight, vec2 heights, float contrast) {\n\n    // apply contrast with offset\n    float heightWeight = weight + contrast * (weight * heights.y - (1.-weight) * heights.x);\n\n    // Ensure the final weight value is clamped to the range [0, 1]\n    return clamp(heightWeight, 0.0, 1.0);\n}\n\n// Applies height interpolation based on the luminosity\nvec4 straightHeightWeight(vec4 A, vec4 B, float alpha) {\n    \n    // Find the brightness of either sample\n    float lightnessA = RGBtoHSV(A.xyz).z;\n    float lightnessB = RGBtoHSV(B.xyz).z;\n    vec2 heights = vec2(lightnessA, lightnessB);   \n    //vec2 heights = vec2(length(A.xyz), length(B.xyz)); // faster and looks just as good\n    \n    // offset the weight with the brightness values\n    alpha = straightHeightWeight(alpha, heights, 1.);\n    \n    // Interpolate the two colors using offset alpha by height blend\n    return mix(A, B, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // square UVs\n    float scale = 9.;\n    vec2 uvA = fragCoord/iResolution.y * scale;\n    \n    // rotate UVs to have two sets of UVs\n    vec2 direction = normalize(vec2(1., -1.));\n    vec2 uvB = mat2x2(direction.y, direction.x, -direction.x, direction.y)*uvA; \n\n    // normalized UV, Alpha.y for spliting up and Alpha.x the interpolation\n    vec2 Alpha = fragCoord / iResolution.xy;\n    \n    // add some animation\n    float aniPeriod = 5.; // in seconds for a full cycle\n    float aniValue = pow(abs(fract(iTime/aniPeriod+.5)-.5)*2.,2.);\n    \n    // slightly increase contrast of alpha.x\n    float Contrast = mix(1., 8., aniValue);\n    Alpha.x = straightContrast(Alpha.x, 1.5); // so small region stays a or b\n    Alpha.x = smoothContrast(Alpha.x, Contrast);  // increases contrast of alpha\n    Alpha.x = clamp(Alpha.x, 0.0, 1.0); // prevents float errors\n    \n    // setup breakup of screen\n    float ComparisonCount = 6.; // how many sections we have\n    float zeroSectionSize = 0.5; // alpha display smaller\n    Alpha.y = 1.-Alpha.y; // invert coordinates\n    float zeroOffset = (zeroSectionSize-1.)/(ComparisonCount-1.);\n    Alpha.y = ((Alpha.y - zeroOffset)/(1.-zeroOffset));\n    float y = floor(Alpha.y*ComparisonCount);\n        \n    // switch textures around to see method on different textures\n    float switchPerid = aniPeriod * 4.0; // in seconds for a full cycle\n    int texIndex = int(4.0 * fract(iTime / switchPerid)); //0-4 values\n    \n    // sample a texture array for the demo, but can be replaced default texture\n    vec4 sampleA = textureArray(texIndex, uvA);\n    vec4 sampleB = textureArray(texIndex, uvB);\n    \n    // add the comparison methods\n    if (y == 0.) {\n        // show the alpha value, with pretty colormap\n        fragColor.xyz = viridis(Alpha.x);\n    } else if (y == 1.) {\n        // hard switch between two texture\n        fragColor = twoTextureSwitch(sampleA, sampleB, Alpha.x);\n    } else if (y == 2.) {\n        // default 2 texture lookup lerp\n        fragColor = twoTextureLerp(sampleA, sampleB, Alpha.x);\n    } else if (y == 3.) {\n        // default 2 texture lookup lerp\n        fragColor = conrastCorrectBlend(sampleA, sampleB, Alpha.x, texIndex, uvA);\n    } else if (y == 4.) {\n        // default 2 texture lookup lerp\n        fragColor = contrastBlend(sampleA, sampleB, Alpha.x);\n    } else if (y == 5.) {\n        // default 2 texture lookup lerp\n        fragColor = straightHeightWeight(sampleA, sampleB, Alpha.x);\n    }\n    \n    // black bars\n    float BorderThickness = 0.04;\n    float ZigzagPattern = abs(fract(Alpha.y*(ComparisonCount))-0.5);\n    fragColor *= vec4(step(ZigzagPattern, 0.5-BorderThickness*0.5)); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//_____________________GENERIC FUNCTIONS______________________________\n\n// Increases the steepness of Alpha while forcing 0-1 range and 1 sum\n// See desmos graph example (https://www.desmos.com/calculator/dpxa6mytnv)\nfloat smoothContrast(float alpha, float contrast) {\n    // increase steepness using power\n    float powAlpha = pow(alpha, contrast);\n    float powInfAlpha = pow(1.-alpha, contrast);\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha + powInfAlpha);\n}\n\nfloat straightContrast(float alpha, float contrast) {\n    return clamp(contrast * (alpha - 0.5) + 0.5, 0., 1.);\n}\n\n// makes viridis colormap with polynimal 6\nvec3 viridis(float t) {\n    const vec3 c0 = vec3(0.274344,0.004462,0.331359);\n    const vec3 c1 = vec3(0.108915,1.397291,1.388110);\n    const vec3 c2 = vec3(-0.319631,0.243490,0.156419);\n    const vec3 c3 = vec3(-4.629188,-5.882803,-19.646115);\n    const vec3 c4 = vec3(6.181719,14.388598,57.442181);\n    const vec3 c5 = vec3(4.876952,-13.955112,-66.125783);\n    const vec3 c6 = vec3(-5.513165,4.709245,26.582180);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// Converts an RGB color to an HSV color\nvec3 RGBtoHSV(vec3 rgbColor) {\n    // Constants for the conversion process\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    \n    // Determine the minimum and maximum values between the colors\n    vec4 p = mix(vec4(rgbColor.bg, K.wz), vec4(rgbColor.gb, K.xy), step(rgbColor.b, rgbColor.g));\n    vec4 q = mix(vec4(p.xyw, rgbColor.r), vec4(rgbColor.r, p.yzx), step(p.x, rgbColor.r));\n    float d = q.x - min(q.w, q.y);\n    \n    // Small constant to avoid division by zero\n    float e = 1.0e-10;\n    \n    // Calculate the HSV values\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}