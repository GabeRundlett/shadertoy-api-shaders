{
    "Shader": {
        "info": {
            "date": "1546783006",
            "description": "Shader showdown practice session 002: Making a shader in 25 minutes from memory.\nPracticing live on TWITCH every tuesdays around 20:00 UK time.\nhttps://www.twitch.tv/evvvvil_\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdlGRB",
            "likes": 9,
            "name": "[TWITCH] FOV snap bang tunnel",
            "published": 3,
            "tags": [
                "time",
                "demoscene",
                "shader",
                "limit",
                "live",
                "battle",
                "shadershowdown",
                "coding",
                "twitch",
                "showdown"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////\n// WHAT THE FUCK IS THE SHADER SHOWDOWN?\n\n// The \"Shader Showdown\" is a demoscene live-coding shader battle competition.\n// 2 coder battle for 25 minutes making a shader from memory on stage. \n// The audience votes for the winner by making noise or by voting on their phone.\n// Winner goes through to the next round until the final where champion is crowned.\n// Live coding shader software used is BONZOMATIC made by Gargaj from Conspiracy:\n// https://github.com/Gargaj/Bonzomatic\n\n// Every tuesdays around 20:00 UK time I practise live on TWITCH.\n// This is the result of session 002.\n\n// COME SEE LIVE CODING EVERY TUESDAYS HERE: https://www.twitch.tv/evvvvil_\n\n// evvvvil / DESiRE demogroup\n\n//WANNA STOP THE FUCKING MADNESS AND LOOK AT THE GEOMETRY BETTER??? COMMENT THIS LINE BROSKI:\n#define MADNESS\n\nvec2 sc,e=vec2(.00035,-.00035);float t,tt,goFuckinMad=0.0;vec3 np;\n\n//Cheap box function bullshit, distilling some of IQ's brain so I can play god\nfloat mx(vec3 p){return max(max(p.x,p.y),p.z);}\nfloat bo(vec3 p,vec3 r){return mx(abs(p)-r);}\n\n//Fucking bits function which make the the fucking bit/piece\nvec2 fb( vec3 p )\n{\n  vec2 h,t=vec2(bo(p,vec3(1)),521);\n  h=vec2(bo(p,vec3(.5,.5,2.5)),3);\n  for(int i=0;i<4;i++){\n    h.x=min(h.x,bo(p-vec3(-.75*float(i)*0.5+0.5,0,0),vec3(.1,3.5-float(i)*0.5,.1)));\n  }\n  t.x=max(t.x,-bo(p,vec3(.7,.7,2.5)));\n  t.x=min(t.x,bo(abs(p)-vec3(.85,.85,0),vec3(0.1,0.1,2.5)));\n  //This mixes h(blue shape) and t(grey shape). Get your fucking chunks in order broh, dont be a fucking mango\n  t=(t.x<h.x)?t:h;\n  return t;\n}\n\n//Simple 2d rotate function, nothing to see here, move along, find the shiny piece of candy\nmat2 r2(float r) {return mat2(cos(r),sin(r),-sin(r),cos(r));}\n\n//Map function / scene / Where the geometry is made. This fucker is centre stage broski\nvec2 mp( vec3 p )\n{\n  vec2 t;\n  p.xy*=r2((tt+sin(tt))*goFuckinMad);\n  p.z=mod(p.z+tt*10.,50.)-25.;\n  //np=new position. We double modulo the shit, abs-symetry-clone the fucker and bend it while we at it\n  np=p; np.z=mod(np.z,25.)-12.5;\n  for(int i=0;i<4;i++){\n    np=abs(np)-vec3(4.4-cos(tt*0.1)*sin(tt)*1.5,0.9+sin(tt)*1.2,2);\n    np.xy*=r2(.785*float(i)*(-2.8+sin(p.z*0.2+tt)*0.2));\n  }\n  t=fb(np); return t;\n}\n\n//Main raymarching loop with material ID flex\nvec2 tr( vec3 ro, vec3 rd )\n{\n  vec2 h,t=vec2(.1);\n  for(int i=0;i<128;i++){\n    h=mp(ro+rd*t.x);\n    if(h.x<.0001||t.x>60.) break;\n    t.x+=h.x;\n    //This extra line passes the material id\n    t.y=h.y;\n  }\n  if(t.x>60.) t.x=0.;\n  return t;\n}\n\n//Sky function stroking my god complex and drawing the fucking sky \nvec3 sky(vec3 rd){ return vec3(0.9,.8,.6)-clamp(rd.y,0.,.3);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  #ifdef MADNESS\n    goFuckinMad=1.0;\n  #endif\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5; uv /= vec2(iResolution.y / iResolution.x, 1);//Boilerplate code building uvs by default in BONZOMATIC\n  //Modulo time because I am god and I fucking decide how long this world lives (not really just stops it all getting fucking noisy)  \n  tt=mod(iTime,100.);\n\n  //Camera simple bullshit thing ro=ray origin, rd=ray direction, co=color, fo=fog colour, ld=light direction\n  vec3 ro=vec3(0),rd=normalize(vec3(uv,0.5+(sin(tt)*1.5)*goFuckinMad));      \n      \n  vec3 co,fo,ld=normalize(vec3(.3,.5,-.5));\n  //Setting up default background colour and fog colour\n  co=fo=sky(rd);\n  //Grabbing the fucking scene by shooting fuckin' rays, because I am god and I'm the kind of god that shoots fucking rays from his eyes\n  sc=tr(ro,rd);\n  //Stick scene geometry result in this shorter one char variable. Fast and fucking bulbous, get me?\n  t=sc.x;  \n  if(t>0.){\n    //We hit some geometry so let's get the current position (po) and build some normals (no). Get building broh, grab a fucking shovel\n    vec3 po=ro+rd*t,no=normalize(e.xyy*mp(po+e.xyy).x+e.yxy*mp(po+e.yxy).x+e.yyx*mp(po+e.yyx).x+e.xxx*mp(po+e.xxx).x),\n    \n    //LIGHTING MICRO ENGINE BROSKI \n        \n    //Default albedo is grey because your life is fucking dull (al=albedo)\n    al=vec3(.5);\n    //Yo different material id? No way broski, change the fucking colours then broh! (al=albedo)\n    if(sc.y<50.) al=vec3(.05,.15,.35);\n    //dif = diffuse because I dont have time to cook torrance\n    float dif=max(0.,dot(no,ld)),\n    //ao = ambient occlusion, aor = ambient occlusion range\n    aor=t/50.,ao=exp2(-2.*pow(max(0.,1.-mp(po+no*aor).x/aor),2.)),\n    //spo=specular power, yeah it's dumb as it's 1, but if I had had time to type in noise function this would be a gloss map. Get over it broski\n    spo=1.,\n    //Fresnel blends the geometry in the background with some sort of gradient edge detection colouring mother fucker\n    fresnel=pow(1.+dot(no,rd),4.);\n    //Fake sub surface fucking scattering, sort of reverse ambient occlusion trick from tekf, big up tekf! https://www.shadertoy.com/view/lslXRj\n    vec3 sss=vec3(.5)*smoothstep(0.,1.,mp(po+ld*0.4).x/0.4),\n    //spec=specular again if had had time to type noise function this would be better\n    spec=vec3(5)*pow(max(0.,dot(no,normalize(ld-rd))),spo)*spo/32.;\n    //Ultimate final lighting result\n    co=mix(spec+al*(0.8*ao+0.2)*(dif+sss),sky(rd),fresnel);\n    //Add some fucking fog to blend it even more. Don't get even broh, get soft\n    co=mix(co,fo,1.-exp(-.00001*t*t*t));\n  }\n  //Add some sort of tone mapping for cheap byte sized fuckers (not really god in the end then, hey? just some cheap byte sized fucker)\n  fragColor = vec4(pow(co,vec3(0.45)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}