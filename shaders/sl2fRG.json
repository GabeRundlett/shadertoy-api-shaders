{
    "Shader": {
        "info": {
            "date": "1658034659",
            "description": "various voronoi noise uses. see common for standard functions",
            "flags": 0,
            "hasliked": 0,
            "id": "sl2fRG",
            "likes": 4,
            "name": "fun with voronoi",
            "published": 3,
            "tags": [
                "voronoi",
                "noise"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "float voronoi2dtaxi(vec2 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            n = min(n,taxiDist(floor(uv) + vec2(x,y) + hash22(floor(uv) + vec2(x,y)),uv));\n        }\n    }\n    return n;\n}\n\nfloat voronoi3dedgestaxi(vec3 uv){\n    float d1 = 999.0;\n    float d2 = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                float d = taxiDist(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv);\n                if (d < d1) {\n                    d2 = d1;\n                    d1 = d;\n                } else if (d < d2){\n                    d2 = d;\n                }\n            }\n        }\n    }\n    return abs(d1-d2);\n}\n\nfloat voronoi3dstar(vec3 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                n = min(n,starDist(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv));\n            }\n        }\n    }\n    return n;\n}\n\nfloat voronoi3dpow(vec3 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                n = min(n,powDist(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv,10.0));\n            }\n        }\n    }\n    return n;\n}\n\nfloat voronoi3dpowsmooth(vec3 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                n = smin(n,powDist(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv,3.0),6.0);\n            }\n        }\n    }\n    return n;\n}\n\nfloat voronoi3dsmooth(vec3 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                n = smin(n,distance(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv),2.0);\n            }\n        }\n    }\n    return n;\n}\n\nfloat voronoi3dpowedges(vec3 uv){\n    float d1 = 999.0;\n    float d2 = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                float d = powDist(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv,3.0);\n                if (d < d1) {\n                    d2 = d1;\n                    d1 = d;\n                } else if (d < d2){\n                    d2 = d;\n                }\n            }\n        }\n    }\n    return abs(d1-d2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y*3.0;\n    float uvx = fragCoord.x/iResolution.x*5.0;\n    vec3 uv3 = vec3(uv.x,iTime/2.0,uv.y);\n    vec4 uv4 = vec4(uv3,abs(iMouse.y)/iResolution.y);\n    vec3 col = vec3(0)\n;    \n    if (uv.y < 1.0){\n        if (uvx < 1.0){\n            float n = voronoi3dedges(uv3*2.0+voronoi3d(uv3*2.0));\n            col = mix(vec3(1,0.5,0.2),vec3(0.5,0.1,0),pow(1.0-n,2.0));\n        } else if (uvx < 2.0){\n            float n = voronoi3dstar(uv3*2.0);\n            col = mix(vec3(0,0,0),vec3(1,0.7,1),max((1.0-n)-0.99,0.0)*100.0);\n        } else if (uvx < 3.0){\n            float n = voronoi3dpow(uv3*6.0);\n            col = mix(vec3(0,0,0),vec3(0.2,1,0.2),n*10.0);\n        } else if (uvx < 4.0){\n            vec3 pos = vec3(uv.x*2.0,iTime*0.5,uv.y*2.0);\n            float n = voronoi3dedgestaxi(pos);\n            float n2 = voronoi3dedgestaxi(pos + 1.0);\n            float n3 = voronoi3dedgestaxi(pos + 2.0);\n            col = mix(vec3(0.3,1,0.3),vec3(0.3,0.3,0.3),smoothstep(0.0,0.1,n));\n            col = mix(vec3(1,0.3,0.3),col,smoothstep(0.0,0.1,n2));\n            col = mix(vec3(0.3,0.3,1),col,smoothstep(0.0,0.1,n3));\n        } else if (uvx < 5.0){\n            float n = voronoi3dsmooth(uv3*2.0);\n            col = mix(vec3(0,0,0),vec3(1,0.2,0.2),n*10.0);\n        }\n    } else if (uv.y < 2.0){\n        if (uvx < 1.0){\n            float n = voronoi3dedges(uv3*3.0);\n            col = mix(vec3(0.6,0.3,0.2),vec3(0.6,1,0.6),n*10.0);\n        } else if (uvx < 2.0){\n            float n = voronoi2dedges(uv*10.0);\n            col = mix(vec3(1),vec3(0),n*5.0);\n        } else if (uvx < 3.0){\n            float n = voronoi2d(uv*distance(vec2(uvx,uv.y),vec2(2.5,1.5))*2.0);\n            col = mix(vec3(0.99,0.99,1),vec3(0.4,0.1,0),n);\n        } else if (uvx < 4.0){\n            float n = voronoi3dedges(uv3*6.0);\n            col = mix(vec3(0.3,0.2,0.3),vec3(1,1,0.8),smoothstep(0.8,0.85,n+ (sin(uv.y*20.0)/2.0+1.0)));\n        } else if (uvx < 5.0){\n            float n = voronoi3dedges(vec3(uv.x*20.0,iTime,uv.y*20.0));\n            col = mix(vec3(0.2,0.3,0.3),vec3(1,1,0.8),n);\n        }\n    } else {\n        if (uvx < 1.0){\n            float n = voronoi3d(uv3*2.0);\n            col = mix(vec3(1),vec3(0.2,0.5,0.3),1.0-n);\n        } else if (uvx < 2.0){\n            float n = voronoi2dtaxi(uv*4.0);\n            col = mix(vec3(0.8,0,0.9),vec3(0.3,0,0.6),n);\n        } else if (uvx < 3.0){\n            float n = voronoi3dpowedges(vec3(uv3.x*3.0,uv3.y*0.5,uv3.z*3.0));\n            float n2 = voronoi2d(uv*6.0);\n            col = mix(vec3(0,0.6,0.8),vec3(1,1,0.9),1.0-smoothstep(n2*0.1,n2*0.1+0.04,n));\n        } else if (uvx < 4.0){\n            float n = voronoi3dpowsmooth(uv3*4.0);\n            col = mix(vec3(0.1,0.05,0.0),vec3(1),n*5.0-0.8);\n        } else if (uvx < 5.0){\n            float n = voronoi3d(vec3(cos(uv.y*10.0+iTime),iTime,sin(uv.x*10.0+iTime)));\n            col = mix(vec3(0,0,0.5),vec3(1,1,0.5),n);\n        }\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//various alternate distance functions\n//replace distance in your vorronoi function to use them\n//https://en.wikipedia.org/wiki/Taxicab_geometry\nfloat taxiDist(float a, float b){\n    return abs(a-b);\n}\n\nfloat taxiDist(vec2 a, vec2 b){\n    return abs(a.x-b.x) + abs(a.y-b.y);\n}\n\nfloat taxiDist(vec3 a, vec3 b){\n    return abs(a.x-b.x) + abs(a.y-b.y) + abs(a.z-b.z);\n}\n\nfloat taxiDist(vec4 a, vec4 b){\n    return abs(a.x-b.x) + abs(a.y-b.y) + abs(a.z-b.z) + abs(a.w-b.w);\n}\n\nfloat powDist(float a, float b, float p){\n    float d = abs(a-b);\n    return pow(d,p);\n}\n\nfloat powDist(vec2 a, vec2 b, float p){\n    vec2 d = abs(a-b);\n    return pow(d.x,p) + pow(d.y,p);\n}\n\nfloat powDist(vec3 a, vec3 b, float p){\n    vec3 d = abs(a-b);\n    return pow(d.x,p) + pow(d.y,p) + pow(d.z,p);\n}\n\nfloat powDist(vec4 a, vec4 b, float p){\n    vec4 d = abs(a-b);\n    return pow(d.x,p) + pow(d.y,p) + pow(d.z,p) + pow(d.w,p);\n}\n\nfloat starDist(vec3 a, vec3 b){\n    vec3 d = abs(a-b);\n    return d.x*d.y + d.y*d.z + d.x*d.z;\n}\n\n//https://iquilezles.org/articles/smin/\n// power smooth min (k=8)\n// replace min with smin to smooth your vorroni noise\nfloat smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\n//random functions from //https://www.shadertoy.com/view/4djSRW\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n\n//various vorronoi noises\nfloat voronoi1d(float uv){\n    //find closest distance of all cells in a radius of 3\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        n = min(n,distance(floor(uv) + float(x) + hash11(floor(uv) + float(x)),uv));\n    }\n    return n;\n}\n\nfloat voronoi2d(vec2 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            n = min(n,distance(floor(uv) + vec2(x,y) + hash22(floor(uv) + vec2(x,y)),uv));\n        }\n    }\n    return n;\n}\n\nfloat voronoi3d(vec3 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                n = min(n,distance(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv));\n            }\n        }\n    }\n    return n;\n}\n\nfloat voronoi4d(vec4 uv){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                for (int w = -1; w < 2; w++){\n                    n = min(n,distance(floor(uv) + vec4(x,y,z,w) + hash44(floor(uv) + vec4(x,y,z,w)),uv));\n                }\n            }\n        }\n    }\n    return n;\n}\n\n\n//edge distances for vorroni\nfloat voronoi1dedges(float uv){\n    //find closest & second closest distance\n    float d1 = 999.0;\n    float d2 = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            float d = distance(floor(uv) + float(x) + hash11(floor(uv) + float(x)),uv);\n            if (d < d1) {\n                d2 = d1;\n                d1 = d;\n            } else if (d < d2){\n                d2 = d;\n            }\n        }\n    }\n    //get difference\n    return abs(d1-d2);\n}\n\nfloat voronoi2dedges(vec2 uv){\n    float d1 = 999.0;\n    float d2 = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            float d = distance(floor(uv) + vec2(x,y) + hash22(floor(uv) + vec2(x,y)),uv);\n            if (d < d1) {\n                d2 = d1;\n                d1 = d;\n            } else if (d < d2){\n                d2 = d;\n            }\n        }\n    }\n    return abs(d1-d2);\n}\n\nfloat voronoi3dedges(vec3 uv){\n    float d1 = 999.0;\n    float d2 = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                float d = distance(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv);\n                if (d < d1) {\n                    d2 = d1;\n                    d1 = d;\n                } else if (d < d2){\n                    d2 = d;\n                }\n            }\n        }\n    }\n    return abs(d1-d2);\n}\n\nfloat voronoi4dedges(vec4 uv){\n    float d1 = 999.0;\n    float d2 = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                for (int w = -1; z < 2; z++){\n                    float d = distance(floor(uv) + vec4(x,y,z,w) + hash44(floor(uv) + vec4(x,y,z,w)),uv);\n                    if (d < d1) {\n                        d2 = d1;\n                        d1 = d;\n                    } else if (d < d2){\n                        d2 = d;\n                    }\n                }\n            }\n        }\n    }\n    return abs(d1-d2);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}