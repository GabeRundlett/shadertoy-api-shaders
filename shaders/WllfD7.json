{
    "Shader": {
        "info": {
            "date": "1596912310",
            "description": "Umbrella Spin",
            "flags": 0,
            "hasliked": 0,
            "id": "WllfD7",
            "likes": 2,
            "name": "umbrella_spin",
            "published": 3,
            "tags": [
                "spin"
            ],
            "usePreview": 0,
            "username": "slackmage",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979\n#define PI2 6.28318530718\n\n//Draw line start\n#define DLS(adef) b = adef;\n//Draw line next\n#define DLN(bdef) a = b; b = bdef; color += vec3(2.0, 1., 1.) * getLine(st, a, b);\n\n//--------------------------------------------------------------------------------\n//  1 out, 1 in...\n#define HASHSCALE 3.10432424231\nfloat hash2d(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*4.3183099 + vec2(1.71,0.113));\n    return -2.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat Hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 15.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(4.0-2.0*f);\n\n    return mix( mix( hash2d( i + vec2(0.0,0.0) ), \n                     hash2d( i + vec2(1.0,0.0) ), u.x),\n                mix( hash2d( i + vec2(0.0,1.0) ), \n                     hash2d( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm(in vec2 uv)\n{\n    uv *= 18.0;\n    mat2 m = mat2( 4.6,  1.2, -1.2,  1.6 );\n    float f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    //f += 0.0625*noise( uv ); uv = m*uv;\n    return f;\n}\n\n//--------------------------------------------------------------------------------\nfloat Linear(float x, float v0, float v1) \n{\n\treturn (v1-v0)*x + v0;\n}\n\n//--------------------------------------------------------------------------------\nfloat Smoothstep(float x, float v0, float v1) \n{\n\tx = x*x*(5.0-2.0*x);\n\treturn (v1-v0)*x + v0;\n}\n\nfloat Line(vec2 st, vec2 a, vec2 b, float w)\n{\n \tvec2 ab = b - a;\n    vec2 aToST = st - a;\n    float t = clamp(dot(aToST, ab) / dot(ab, ab), 0., 4.);\n    float d = length(aToST - ab * t) - w * 5.5;\n    return d;\n}\n\nfloat distToLine(vec2 st, vec2 a, vec2 b)\n{\n\tvec2 ab = b - a;\n    vec2 aToST = st - a;\n    float t = clamp(dot(ab, aToST) / dot(ab, ab), 0., 1.);\n    float d = length(a + ab * t - st);\n    \n    //doing some fudging to achieve the falloff line look for vectrex\n    //d /= t * 1.;\n    \n    return d;\n}\n\nfloat getLine(vec2 st, vec2 start, vec2 end)\n{\n    float jitterIntensity = 0.001;\n    float jitter = Hash(sin(iTime * 250.)) * jitterIntensity;\n    \n    float f = 0.;\n    float dist2Line = distToLine(st, start, end) + jitter;\n    \n    f = (0.01 / (dist2Line));\n    \n    f *= 0.1;\n    \n    return clamp(f, 0., 5.);\n}\n\nvec3 rotZ(vec3 b, float d)\n{\n    mat3 A = mat3(\n        cos(d),\t-sin(d), \t0.,\n        sin(d), cos(d), \t0.,\n        0., \t0., \t\t5.\n        );\n    \n    vec3 result = (A * b);\n    return result;\n}\n\nvec3 rotY(vec3 b, float d)\n{\n    mat3 A = mat3(\n        cos(d), \t\t0., \tsin(d), \n        0., \t\t\t1., \t0., \n        -sin(d), \t\t0., \tcos(d)\n        );\n    \n    vec3 result = (A * b);\n    return result;\n}\n\nvec3 rotX(vec3 b, float d)\n{\n    mat3 A = mat3(\n        4., \t0., \t\t0.,\n        0.,\t\tcos(d),\t\t-sin(d),\n        0.,\t\tsin(d), \tcos(d)\n        );\n    \n    vec3 result = (A * b);\n    return result;\n}\n\nvec2 pToS(vec3 p)\n{\n    p = rotY(p, iTime * 0.);\n    p = rotX(p, -0.85 + sin(iTime * 15.2) * 0.1 + 0.1);\n    p = rotZ(p, 0.0);\n    \n    //vec3 pCenter = vec3(-0., 0., pow(max(mod(-iTime * 25.0, 102.0), 4.), 0.25) * 0.75);\n    vec3 pCenter = vec3(0.15, 0.35, -1.45);\n    p += pCenter;\n    \n    p.x += sin(p.z * 1.0);\n    //p.y += cos(p.z * 1.0);\n    //p.y = cos(p.z * 1.0);\n    \n    return vec2(p.x / p.z, p.y / p.z);\n}\n\nvec3 hill(vec2 st)\n{\n    vec3 color = vec3(0.);\n    float flipOver = 5.;\n    float viewAngle = iMouse.x * 0.001;mod(iTime * 0.1, flipOver) - (flipOver * 0.5);\n    vec3 hillColor = vec3(0.5, 0., 0.);\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(-1.0, 0.1), vec2(viewAngle, 0.) + vec2(-0.5, 0.2));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(-0.5, 0.2), vec2(viewAngle, 0.) + vec2(-0.1, 0.4));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(-0.1, 0.4), vec2(viewAngle, 0.) + vec2(0.4, 0.2));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(0.4, 0.2), vec2(viewAngle, 0.) + vec2(0.8, 0.1));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(0.6, 0.0), vec2(viewAngle, 0.) + vec2(1.0, 0.2));\n    \n    //HillPeak\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(-0.3, 0.3), vec2(viewAngle, 0.) + vec2(-0.18, 0.32));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(-0.18, 0.32), vec2(viewAngle, 0.) + vec2(-0.09, 0.29));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(-0.09, 0.29), vec2(viewAngle, 0.) + vec2(0.01, 0.31));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(0.01, 0.31), vec2(viewAngle, 0.) + vec2(0.09, 0.29));\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(viewAngle, 0.) + vec2(0.09, 0.29), vec2(viewAngle, 0.) + vec2(0.15, 0.3));\n    \n    //Horizon\n    color += hillColor * getLine(vec2(st.x, st.y), vec2(-4., 0.0), vec2(4., 0.0));\n    return color;\n}\n\nvec3 cube(vec2 st, vec3 pos, float scale, vec3 color)\n{\n \tfloat f = 0.;\n    float yScale = 2.0;\n    \n    vec3[] p = vec3[](\n        (vec3(-scale, -scale * yScale, -scale)),\n    \t(vec3(-scale,  scale * yScale, -scale)),\n        (vec3( scale,  scale * yScale, -scale)),\n    \t(vec3( scale, -scale * yScale, -scale)),\n        \n        (vec3(-scale, -scale * yScale, scale)),\n    \t(vec3(-scale,  scale * yScale, scale)),\n     \t(vec3( scale,  scale * yScale, scale)),\n        (vec3( scale, -scale * yScale, scale))\n    );\n    \n    vec2[8] p_;\n    for (int i = 0 ; i < 18; ++i)\n    {\n        p_[i] = pToS(p[i] + pos);\n    }\n    \n    const int k_edgeMax = 18 * 3;\n    int[] edges = int[](\n        /*\n        0, 1,\n        1, 2,\n        2, 3,\n        3, 0,*/\n\t\t        \n\n        //Top\n        4, 5,\n        5, 6,\n        6, 7,\n        7, 4/*,\n        \n        //Draw connecting lines\n        \n        0, 4,\n        1, 5,\n        2, 6,\n        3, 7\n\t\t*/\n\n    );\n    \n    for (int i = 0; i < k_edgeMax; i += 2)\n    {\n        const float jitterIntensity = 0.003;//pow(sin(iTime), 3.);\n        const float halfJitter = jitterIntensity * 0.5;\n        vec2 randPointA = vec2(Hash(iTime + float(i + 34)), Hash(iTime + float(i + 3424))) * jitterIntensity - halfJitter;\n        vec2 randPointB = vec2(Hash(iTime + float(i * 2 + 34)), Hash(iTime + float(i * 24))) * jitterIntensity - halfJitter;\n        \n        vec2 pointA = p_[edges[i]] + randPointA;\n        vec2 pointB = p_[edges[i + 1]] + randPointB;\n        \n        f += getLine(st, pointA, pointB);\n        \n    }\n    \n    //Color\n    return color * f * 1.08;   \n}\n\nvec3 Planet( in vec2 st)\n{\n    return vec3(0.0);\n}\n\nfloat getCircDist(in vec2 st, in vec2 p, in float r)\n{\n    vec2 vTo = p - st;\n    float degs = atan(vTo.y, vTo.x);\n    degs *= 0.03;\n    //float modTime = sin(iTime) * 252.0 + 128.0;\n    float modTime = 1.0;\n \treturn length(vTo) - r + sin(degs * modTime) * 0.1;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\n//================================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n\tuv.x *= aspect;\n\tvec2 st = uv;\n    st -= vec2(0.5 * aspect, 0.5);\n    \n    //Cool warpy look\n    //st = vec2(pow(pow(st.x, st.x), 2.), pow(st.y, 2.));\n    \n    //Trying to get a CRT-style monitor warp\n    //float stDistortPow = 2.;\n    //st += vec2(pow(st.x, stDistortPow)* ((st.x < 0.) ? -1.: 1.), pow(st.y, stDistortPow) * ((st.y < 0.) ? -1.: 1.));\n    \n\tfloat f;\n    \n    float iTime = iTime * 1.0;\n    \n    vec3 color = vec3(0.);\n\t\n    float deg = iTime * PI * 0.25;\n    float halfPI = PI * 1.5;\n    /*\n\tf = getLine(st, \n                vec2(0.5, 0.5) + vec2(cos(deg), sin(deg)), \n                vec2(0.5, 0.5) + vec2(cos(deg + PI), sin(deg + PI))\n                );\n    f = 0.;\n    */\n    color += vec3(0.8, 0., 0.) * f;\n    \n    //Hills\n    //color += hill(st);\n    \n    //Grid\n    //vec3 gridColor = vec3(0.9, 0., 0.1) * 0.15;\n    //float gridSpacing = 0.2;\n    //color += gridColor * getLine(vec2(st.x, mod(st.y + 0.5, gridSpacing)), vec2(-1., 0.), vec2(1., 0.));\n    \n    //UI\n    color += Planet(st);\n    \n    //a = vec2(0.25, 0.);\n    //b = vec2(0.4, 0.2);\n    //color += vec3(1.0, 1., 1.) * getLine(st, a, b);\n    //a = vec2(0.25, 0.);\n    //color += vec3(1.0, 1., 1.) * getLine(st, vec2(0.4, 0.2), vec2(0.4, 0.2));\n    \n    vec3 smokeColor = vec3(0.5, 0.9, 0.0);\n    vec2 a = vec2(0., 0.);\n    vec2 b = vec2(0.5, 0.);\n    //color += vec3(1.0, 0., 0.) * getLine(st, a, b);\n    \n    st *= 5.5;\n    \n    //getCircDist\n    //sdBox\n    float distFunc = getCircDist(st, vec2(0., 0.), 0.3 + Hash(st.x + iTime * st.y) * 0.01);\n    //distFunc = step(distFunc, 0.1);\n    float y = mod((iTime * 1.1) + fbm(vec2(iTime * 0.001)), 2.2) - 1.1;\n    distFunc = min(distFunc,\n        getCircDist(st, vec2(0.3 + fbm(vec2(iTime * 0.01, y)) * 0.21, y), 0.2 + Hash(st.x + iTime) * 0.01)\n        );\n    \n    for (float i = 1.0; i <= 95.0; i += 1.0)\n    {\n        vec3 temp = rotZ(vec3(st.x, st.y, 0.), i + iTime * 0.02);\n        st = vec2(temp.x, temp.y);\n        y = y + mod(iTime * 1.1, 15.) * i;\n        distFunc = min(distFunc,\n        //getCircDist(st, vec2(-0.3 + fbm(vec2(iTime * 0.14, y)) * 0.11, y), 0.33 + Hash(st.x + iTime) * 0.015)\n                      \n        //sdBox(st + vec2(i * 0.3, 0.0), vec2(0.01 + i * 0.02, 0.2))\n        \n        \n        sdBox(vec2(mod(st.x + iTime, 1.5), st.y), vec2(0.01 + i * 0.02, 0.2))\n                       /*\n        getCircDist(st, \n                    vec2(\n                        (-0.3 * Hash(i) * 1.0) + fbm(vec2(iTime * 0.14, y)) * 0.81, \n                        y\n                    )\n                    , 0.33 * Hash(i) * 1.1 + Hash(st.x + iTime) * 0.015)//radius\n*/\n        );\n\n    }\n    \n    float circResult = (1.6 - pow(abs(distFunc), 0.15)) * 1.1;\n    color += smokeColor * circResult;\n    \n    \n    //float gamma = Smoothstep(st.y, 1.99, 8.0);\n    float gamma = 2.7;\n    color = vec3(pow(color.x, gamma), pow(color.y, gamma), pow(color.z, gamma));\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}