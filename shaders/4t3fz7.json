{
    "Shader": {
        "info": {
            "date": "1538968917",
            "description": "failed fork of https://www.shadertoy.com/view/XtSczV\nmain issue is that the distance field for rounding corners is inside out.\nso this is just not my use-case goal, but its negation.\n\nits also a bad aperture for its rotation centers.",
            "flags": 0,
            "hasliked": 0,
            "id": "4t3fz7",
            "likes": 5,
            "name": "sawblade pinwheel aperture",
            "published": 3,
            "tags": [
                "overlap",
                "aperture",
                "pinwheel",
                "sawblade",
                "halfspacetapping",
                "halfwidth"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 657
        },
        "renderpass": [
            {
                "code": "//sawblade polar modulo pinwheel\n\n//self    https://www.shadertoy.com/view/4t3fz7\n//parent: https://www.shadertoy.com/view/XtSczV\n//pmod rotational symmetrty\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Rotational symmetry with regular mod() domain repetition. Since the repeated objects extend \n// past half the repeating space, one extra neighbor need to be checked for distance too. This\n// can be done cheaply without extra trigonometry (line 46).\n//    \n// Idea from aiekick's https://www.shadertoy.com/view/XtBcRV but with fixed discontinuities at\n// minimal cost, and euclidean distance\n\n\n//surely could use a non 90deg wedge, like the one of https://www.shadertoy.com/view/MsyfWt\n//ony any of my \"railway\" shader wedges.\n\nconst int n = 17;\nconst float an = 6.2831/float(n);\nconst mat2 inc = mat2( cos(an),sin(an),-sin(an),cos(an)); // can replace by constants\n//const mat2 inc = mat2(1.0,1.0,-1.0,1.0)/1.41421; // same as above for n=8\n\n//#define SIMULATE_BUG\n#define BOX_SIZE 0.52\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = (fragCoord*2.-iResolution.xy)/iResolution.y*3.;\n\n    float fa = (atan(q.y,q.x)+an*0.5)/an;\n    float ia = floor( fa );\n    \n    float sym = an*ia;\n    vec2 r = mat2(cos(sym),-sin(sym),\n                  sin(sym), cos(sym))*q;\n        \n    #ifndef SIMULATE_BUG\n    if( fract(fa)>0.5 ) r = r*inc; // rotate one backwards\n    #endif\n\n    float d = 4.0 + length(q);\n    #ifndef SIMULATE_BUG\n    for( int i=0; i<2; i++ )\n    #endif\n    {\n                                            // int id = (int(ia)-i) % n; or float id = mod(ia-float(i),float(n));\n        float rot = .5;//iMouse.x/iResolution.x;                  // + 2.0*float(id); // try this for different angles\n        \n        // translate and rotate each box\n        vec2 p = mat2( cos(rot),sin(rot),\n                      -sin(rot),cos(rot))*(r - vec2(2.0,0.0));\n\n        // box distance\n        p = p - BOX_SIZE;\n        //p = abs(p) - BOX_SIZE;                   // + 0.4*sin(3.0*float(id)); // try this for different size\n        d = min( d, min(max(p.x,p.y),0.0) + length(max(p,0.0)) );\n        \n        // next angle\n        r = inc*r;\n\t}\n    ;float e=1.75-length(q)-3.*iMouse.x/iResolution.x\n    ;d=max(d,e)\n    ;d-=.05\n    ;\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n\tfragColor = vec4( col, 1.0 );;\n}\n\n\n\n/*\n[halfspace tapping] link collection (v4) (may only be correlated, not even using the method, but SHOULD use the method)\n//\nsawblade serrated disk inversion  \nhttps://www.shadertoy.com/view/4t3fz7\nparent of the above is below\nhttps://www.shadertoy.com/view/XtSczV\n//\nwhich contains links to\ni tried to make this a sawblade\n, and noticed that i would need an insideout rounded box gradient for this: \nhttps://www.shadertoy.com/view/4t3fz7 \n//\nwe need a label for this [overlapping tile/slice] [typesetting] [CircleOfConfusion] \nstuff first time i see it in polar coordinates: \nprevious instances where linear or square lattice (and often only partially overlappin CoC's) \nhttps://www.shadertoy.com/view/4tjcWR\nhttps://www.shadertoy.com/view/MlscWn \n//\nI suggest [halfspace tapping]\n, where CoC implies bokeh, this generalizes it to \"overlapping of dark areas with lit areas\" \nthat may even not overlap completely (or at not overlap at all) :\ntoon clouds (very similar to / MlscWn ):\nhttps://www.shadertoy.com/view/4t23RR\nhttps://www.shadertoy.com/view/MltyR7 \nhttps://www.shadertoy.com/view/ltVcWt\nconcept of a non-monoispaced tree structure (branching a dualGlpyhString into 2 non monospaced sub-glyphs, branchless tree element)\nhttps://www.shadertoy.com/view/ltVcWt\n//\nolder and simpler [halfspace] shaders, closer to \nhttps://www.shadertoy.com/view/Md2cWK\nmodulo-gears:\nhttps://www.shadertoy.com/view/Msl3Rn\npavement:\nhttps://www.shadertoy.com/view/XsKXz3\npolar grid motion does 3-tap, and wopuld be great for half-space overlap:\nhttps://www.shadertoy.com/view/XtcfRH\nvery old:\nhttps://www.shadertoy.com/view/lss3Df\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}