{
    "Shader": {
        "info": {
            "date": "1722083060",
            "description": "CC0: Infinite boxy spiral\nFinally I used golden ratio in code after learning about 30 years ago\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Mcjczw",
            "likes": 24,
            "name": "Infinite boxy spiral",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "// CC0: Infinite boxy spiral\n// Finally I used golden ratio in code after learning about 30 years ago\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float\n  pi = acos(-1.)\n, tau= pi*2.\n, phi= (1.+sqrt(5.))*0.5\n;\n\nfloat circle(vec2 p, float r) {\n  return length(p)-r;\n}\n\nfloat superCircle8(vec2 p, float r) {\n  p *= p;\n  p *= p;\n  return pow(dot(p,p), 1./8.)-r;\n}\n\nvec3 palette(float a) {\n  return 0.5*(1.+sin(vec3(0.,1.,2.)+a));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = vec3(0.0);\n\n  float d = 1E3;\n\n  float anim = TIME*0.5;\n  float ft = fract(anim);\n  float nt = floor(anim);\n  const float stp = 0.0125;\n  float bsz = stp;\n  vec2 off = vec2(phi+1., phi-1.)*stp;\n  float iz = exp2(log2(phi)*ft);\n  vec2 ip = p;\n  ip /= iz; \n  ip *= ROT(-nt*tau/4.);\n  // Offset derived by trial and error\n  ip -= -vec2(0.45,1.35)*stp;\n  float hit = 0.;\n  float dhit = 1E3;\n  float dc = 0.;\n  const float nhit = 13.;\n  for (float i = 0.; i < nhit; ++i) {\n    float id = superCircle8(ip, bsz-2E-3/iz);\n    float ic = circle(ip,bsz);\n    ip -= off;\n    bsz *= phi;\n    off = phi*vec2(-off.y,off.x);\n    if (id < dhit) {\n      dhit = id;\n      hit = i;\n      dc = ic;\n    }\n    id *= iz;\n    d = min(d, id);\n  }\n  float fade = 1.;\n  if (hit == 0.) {\n    fade = ft;\n  }\n  hit -= nt;\n  float aa = sqrt(2.)/RESOLUTION.y;\n  vec3 bcol = fade*(palette(hit*0.5)-0.3*dc*iz);\n  col = mix(col, bcol, smoothstep(aa, -aa, d));\n  /*\n  vec2 ap = abs(p);\n  float ad = min(ap.x, ap.y)-3E-3;\n  col = mix(col, vec3(1.), smoothstep(aa, -aa, ad));\n  */\n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}