{
    "Shader": {
        "info": {
            "date": "1523626331",
            "description": "Applying some mild adaptions to Tomkh's random triangulation algorithm to create a haphazard triangular mesh with some inscribed packed circles.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdycDV",
            "likes": 59,
            "name": "Triangle Mesh With Incircles",
            "published": 3,
            "tags": [
                "triangle",
                "circle",
                "packing",
                "delaunay",
                "incircle"
            ],
            "usePreview": 0,
            "username": "Shane",
            "viewed": 2110
        },
        "renderpass": [
            {
                "code": "/*\n\n\tTriangle Mesh With Incircles\n\t----------------------------\n\n\tApplying some mild adaptions to Tomkh's random triangulation algorithm to create a \n\thaphazard triangular mesh with some inscribed packed circles.\n\n\tI'd made a few half-hearted attempts to put together a geometric Delaunay triangulation in\n\tshader form, but for some reason the lack of random pixel access was throwing me off. Anyway, \n\tI made a side comment regarding my desire to see one on Shadertoy, and Tomkh posted a really\n\tcool looking and clever example almost immediately afterward, which pleased me no end. :)\n\tIf you haven't seen it, I've provided a link below.\n\n\tThis shader is just a variation of the original. I wrote it from scratch, but based it on \n\tthe logic from Tomkh's example. I expanded the 2x2 grid count to 3x3, in order to enable \n\tthe grid vertices to move further away from their original positions. In addition, I've \n\ttaken a polygon hit approach. Basically, I've iterated through all possible contributing \n\tquadrilaterals within the pixel area, determined the specific triangle, then effectively \n\tbroken from the loop and returned its three vertices and unique identifier.\n\n\tThe beauty of having access to the triangle vertices and ID in screen space is that you can\n\trender anything you want using normal vector rendering techniques. It's also pretty easy\n\tto render inscribed circles, circumscribed circles, etc. With more work, and provided you\n\thave a Delaunay triangulation, Voronoi edge lists are possible, and you can do some really\n\tcool things with those.\n\n\tNote that I haven't called this a Delaunay triangulation. Tohkh's example puts a restriction\n\ton the grid vertex movement, whereas I've allowed them to move more, which might break the \n\talgorithm -- I have a feeling that additional neighboring checks might be necessary, but I \n    can't be sure. That's a question for someone else to answer, but either way, I'm going to \n\tattempt to construct a dual Voronoi edge-list version next, so I'll find out soon enough... \n\tunless Tomkh wants to do that too. :D\n\n\tFor anyone interested, I've provided a bunch of \"define\" directives below. For instance,\n\tthere are defines that'll exclude the background mesh and incircles for anyone who wants\n\tto study the mesh without the visual clutter. There's also a few different palette choices.\n\n\n\n\tBased on:\n\n\t// I'd been wanting to see a geometric Delaunay triangulation example on Shadertoy for ages,\n\t// so Tomkh (Tomasz Dobrowolski) was kind enough to whip one up in virtually no time. In\n\t// addition to helping me out, I really like the way this is presented.\n\tRandom Delaunay Triangulation - Tomkh\n\thttps://www.shadertoy.com/view/4sKyRD\n\n\tAnother example:\n    \n\t// Really nice screensaver-like example. To my knowledge, Mattz was the first to put up a \n\t// quasi-randomized 2D triangle mesh. However, his particular example uses the same diagonal\n\t// orientation on each quadrilateral.\n\tice and fire - mattz\n\thttps://www.shadertoy.com/view/MdfBzl\n\n\n*/\n\n// Color palette. The default red and gold trim (0), a four-colored pastel palette (1), greyscale with\n// color (2), or just greyscale (3).\n#define PALETTE 0 \n//#define GREY_LINES\n\n// Fixed unanimated triangles, if you don't like the triangle popping effect. :)\n//#define FIXED\n\n// Include the background mesh, or not. Excluding it gives a cleaner, but less interesting, look. \n#define BG_MESH\n\n// Inscribed circle inclusion. Excluding will make the example less exciting, but easier to inspect \n// the mesh constuction.\n#define INCIRCLES\n\n// A visual aid to show the physical square grid.\n//#define SHOW_GRID_CELLS\n\n\n// 2x2 matrix rotation. Note the absence of \"cos.\" It's there, but in disguise, and comes courtesy\n// of Fabrice Neyret's \"ouside the box\" thinking. :)\nmat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) + a);\treturn mat2(v, -v.y, v.x); }\n\n\n// Greyscale.\nvec3 grey(vec3 col){ return vec3(1)*dot(col, vec3(.299, .587, .114)); }\n\n\n// vec2 to vec2 hash.\nvec2 hash22(vec2 p) { \n\n    // Faster, but doesn't disperse things quite as nicely. However, when framerate\n    // is an issue, and it often is, this is a good one to use. Basically, it's a tweaked \n    // amalgamation I put together, based on a couple of other random algorithms I've \n    // seen around... so use it with caution, because I make a tonne of mistakes. :)\n    float n = sin(dot(p, vec2(113, 1)));\n    #ifdef FIXED\n    return (fract(vec2(262144, 32768)*n) - .5)*2.*.35;//*.8 + .2; \n    #else\n    // Animated.\n    p = fract(vec2(262144, 32768)*n); \n    // Note the \".35,\" insted of \".5\" that you'd expect to see. .\n    return sin( p*6.2831853 + iTime/2.)*.35;\n    #endif\n}\n\n\n// vec2 to vec2 hash.\nfloat hash21(vec2 p) { \n\n    // Faster, but doesn't disperse things quite as nicely. However, when framerate\n    // is an issue, and it often is, this is a good one to use. Basically, it's a tweaked \n    // amalgamation I put together, based on a couple of other random algorithms I've \n    // seen around... so use it with caution, because I make a tonne of mistakes. :)\n    return fract(sin(dot(p, vec2(113, 1)))*43758.5453);\n} \n\n// Triangle's incenter: The center of the inscribed circle, which in essence is the largest\n// circle that you can fit into a triangle.\nvec2 inCent(vec2 p0, vec2 p1, vec2 p2){\n    \n    // Side lengths.\n    float bc = length(p1 - p2), ac = length(p0 - p2), ab = length(p0 - p1);\n    return (bc*p0 + ac*p1 + ab*p2)/(bc + ac + ab);    \n}\n\n// The radius of the triangle's incircle: I'm keeping this separate to the function\n// above, but you could amalgamate the two. \nfloat inCentRad(vec2 p0, vec2 p1, vec2 p2){\n\n    // Side lengths.\n    float bc = length(p1 - p2), ac = length(p2 - p0),  ab = length(p0 - p1);\n        \n    // Area.\n    float p = (bc + ac + ab)/2.;\n    float area = sqrt(p*(p - bc)*(p - ac)*(p - ab));\n    \n    return area/p;\n}\n\n\n\n// Signed distance to the segment joining \"a\" and \"b.\" We need this one to determine\n// which side of the line a point is on.\n//\n// From Tomkh's original example. I trimmed it a bit, but for all I know, I might have\n// made is slower. :)\nfloat sDistLine(vec2 a, vec2 b) {\n       \n    b -= a; return dot(a, vec2(-b.y, b.x)/length(b)); //return dot(a, normalize(vec2(-b.y, b.x)));\n}\n\n// Unsigned distance to the segment joining \"a\" and \"b.\"\nfloat distLine(vec2 a, vec2 b){\n    \n\tvec2 pa = a;\n\tvec2 ba = a - b;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\t//return smoothstep(-thickness*.5, thickness, length(pa - ba * h));\n    return length(a - ba*h);\n}\n\n// From the the following example:\n// Random Delaunay Triangulation - Tomkh\n// https://www.shadertoy.com/view/4sKyRD\n//\n// Use \"parabolic lifting\" method to calculate if two triangles are about to flip.\n// This is actually more reliable than circumscribed circle method.\n// The technique is based on duality between Delaunay Triangulation\n// and Convex Hull, where DT is just a boundary of convex hull\n// of projected seeds onto paraboloid.\n// We project (h1 h2 h3) triangle onto paraboloid\n// and return the distance of the origin\n// to a plane crossing projected triangle.\nfloat flipDistance(vec2 h1, vec2 h2, vec2 h3)\n{\n   // Projects triangle on paraboloid.\n   vec3 g1 = vec3(h1, dot(h1, h1));\n   vec3 g2 = vec3(h2, dot(h2, h2));\n   vec3 g3 = vec3(h3, dot(h3, h3));\n   // Return signed distance of (g1, g2, g3) plane to the origin.\n   //#if FLIP_ANIMATION\n    // return dot(g1, normalize(cross(g3-g1, g2-g1)));\n   //#else\n     // If we don't do animation, we are only interested in a sign,\n     // so normalization is unnecessary.\n   \t return dot(g1, cross(g3-g1, g2-g1));\n   //#endif\n}\n\n/*\n// IQ's triangle hit routine.\nbool insideTri(vec2 p, vec2 a, vec2 b, vec2 c){\n    \n \t// Compute vectors        \n    vec2 v0 = c - a;\n    vec2 v1 = b - a;\n    vec2 v2 = p - a;\n\n    // Compute dot products\n    float dot00 = dot(v0, v0);\n    float dot01 = dot(v0, v1);\n    float dot02 = dot(v0, v2);\n    float dot11 = dot(v1, v1);\n    float dot12 = dot(v1, v2);\n\n    // Compute barycentric coordinates\n    float invDenom = 1./(dot00*dot11 - dot01*dot01);\n    float u = (dot11*dot02 - dot01*dot12)*invDenom;\n    float v = (dot00*dot12 - dot01*dot02)*invDenom;\n\n    // Check if point is in triangle\n    return (u>0. && v>0. && (u + v)<1.)? true : false;  \n    \n}\n*/\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n// IQ's point in a quadrilateral routine -- IQ's original is more sophisticated, but\n// I only needed to return a hit, so I hacked at it a bit. There are probably faster \n// routines, especially since the UV coordinates aren't required. However, I might use them\n// later, so I'll leave it as is for now. By the way, if someone has a fast \"point inside a\n// quad\" algorithm, I'd like to hear about it.\n//\n// Given a point p and a quad defined by four points {a,b,c,d}, return the bilinear\n// coordinates of p in the quad. Returns (-1,-1) if the point is outside of the quad.\nbool insideQuad(in vec2 a, in vec2 b, in vec2 c, in vec2 d){\n\n    vec2 res = vec2(-1.0);\n\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = -a;\n        \n    float k2 = cross2d( g, f );\n    float k1 = cross2d( e, f ) + cross2d( h, g );\n    float k0 = cross2d( h, e );\n\n    // otherwise, it's a quadratic\n    float w = k1*k1 - 4.0*k0*k2;\n    if( w<0.0 ) return false; //vec2(-1.0);\n    w = sqrt( w );\n\n\n    float ik2 = 0.5/k2;\n    float v = (-k1 - w)*ik2; if( v<0.0 || v>1.0 ) v = (-k1 + w)*ik2;\n    float u = (h.x - f.x*v)/(e.x + g.x*v);\n    if( u<0.0 || u>1.0 || v<0.0 || v>1.0 ) return false;//vec2(-1.0);\n    //res = vec2( u, v );\n    \n    return true;\n}\n\n\n\n// The triangle object.\nstruct triObj{\n    \n    vec2 p0, p1, p2; // The triangle vertices.\n    \n    // Unique ID and one of four triangle cell IDs, which depend on the quadrilateral arrangement.\n    vec2 id, cID; \n    \n};\n    \n\n// The triangle mesh routine: Iterate through the cell and it's 8 neighbors until we hit a quadrilateral, \n// then determine which triangle information to return.\n//\n// I wrote this from scratch, but basically adapted the logic from Tomkh's Delaunay triangle mesh example.\n// It was surprisingly easy to write, but if it were not for his example, I wouldn't have known where to begin. :)\ntriObj triangulate(in vec2 p){\n    \n    // I'm declaring the vertices outside the loop, because it looks neater, but I hear it's faster to declare them\n    // as locally as possible.\n    vec2 o, o1, o2, o3;\n\t\n    // Cell identifier and fractional position.\n    vec2 g = floor(p); p -= g + .5;\n    \n    triObj tri; // The triangle object.\n    tri.p0 = tri.p1 = tri.p2 = vec2(0); // Not really necessary, but just in case I've overlooked something.\n    tri.id = vec2(-1); // Not necessary, since we're guaranteed a hit, but it's a raytracing habit.\n    tri.cID = vec2(-1); // Not necessary, since we're guaranteed a hit, but it's a raytracing habit.\n    \n    // Precalculating the hash values so as not to recalculate too many in the main loop. Basically, I'm setting \n    // up an extra loop, an array, plus indexing, etc, in order to cut down from a possible 36 hash calculations \n    // to 16. Not to mention, making thing less readable... Therefore, it might be a case of diminishing returns. \n    // I'd like to hear what the experts have to say about this, because I'm on the fence as to whether I should\n    // be complicating things and wasting resources with this step. :)\n    //\n    vec2 aO[16];\n    for(int j=0; j<=3; j++){\n\t\tfor(int i=0; i<=3; i++){\n            \n            aO[j*4 + i] = vec2(i - 1, j - 1) + hash22(g + vec2(i - 1, j - 1)) - p;            \n        }\n    }\n    \n    \n    // Iterate through the cell and its 8 neighbors until we hit a quadrilateral, then determine which\n    // triangle to return. I've allowed the grid vertices to randomly move further away from their original\n    // positions, which requires 9 cell checks, instead of just 4. If you restricted random vertex movement\n    // to a factor of \".25\" (See the \"hash22\" function), only 4 checks would be necessary.\n    //\n    // By the way, once a triangle has been found, we break from the loop to avoid further redundant \n    // calculations. This means fewer than 9 checks are performed on average -- A rough guess would be an\n    // average of 5 checks per pass which I'd expect most GPUs can handle in their sleep.\n    //\n\tfor(int j=0; j<=2; j++){\n\t\tfor(int i=0; i<=2; i++){\n            \n \t\t\t// The four quadrilateral vertices for this particular cell. Clockwise arrangement.\n            // o -- o1\n            // |    |\n            // o3-- o2\n\t\t\t//o = vec2(i - 1, j) + hash22(g + vec2(i - 1, j)) - p; // Origin -- Top left.\n            //o1 = vec2(i, j) + hash22(g + vec2(i, j)) - p; // Top right.\n            //o2 = vec2(i, j - 1) + hash22(g + vec2(i, j - 1)) - p; // Bottom right.\n            //o3 = vec2(i - 1, j - 1) + hash22(g + vec2(i - 1, j - 1)) - p; // Bottom left.\n            o = aO[(j+1)*4 + i]; // Origin -- Top left.\n            o1 = aO[(j+1)*4 + i + 1]; // Top right.\n            o2 = aO[j*4 + i + 1]; // Bottom right.\n            o3 = aO[j*4 + i]; // Bottom left.\n\n            \n    \n            // If the point resides in this particular cell's quad, determine which triangle it resides in.\n            if(insideQuad(o, o1, o2, o3)){\n                \n                // Applying the Delaunay rule to the quad: Basically, split the quad along an arbitrary diagonal to form\n                // a triangle. Circumscribe a circle around them, then determine whether the excluded fourth point lies \n                // within the circle. If it does, then flip the diagonal. There's a bit of math and theory behind it, but \n                // thankfully, Tomkh took care of that bit. :)\n                //\n                // By the way, there's no rule that says you need to do it this way -- You could restric the vertice\n                // movement more, then simply flip the diagonal on a random basis. However, the following tends to look \n                // better. Plus, if you wish to put together a Delaunay triangulation for various reasons -- like \n                // constructing the dual Voronoi representation -- this step is necessary.\n                float f = flipDistance(o - o2, o1 - o2, o3 - o2)<0.? 1. : -1.;\n                //\n                // Random. Only works with more restricted vertice movement, and not as nice.\n                //float f = hash21(g + vec2(i , j))>.5? 1. : -1.; \n\n                \n                if(f>0.){ // Diagonal runs from the top right vertex to the bottom left vertex.\n                    \n                     // Determining which side of the diagonal quadrilateral line the point is on. In other words,\n                     // determine which of the two triangles that make up the quad the point is in.\n                     if(sDistLine(o1, o3)>=0.){\n                        o2 = o1; o1 = o; o = o3; // o3, o, o1 triangle.\n                        tri.cID = vec2(0);\n                    }\n                    else {\n                        o = o1; o1 = o2; o2 = o3; // o1, o2, o3 triangle.\n                        tri.cID = vec2(1);\n                    }\n                    \n                }\n                else { // Diagonal runs from the top left vertex to the bottom right vertex.\n                   \n                    // If we have the flipped diagonal arrangement, determine which triangle the point is in.\n                    if(sDistLine(o, o2)>=0.){\n                        o1 = o3; o3 = o; o = o2; o2 = o3; // o2, o3, o triangle.\n                        tri.cID = vec2(2);\n                    }\n                    else {\n                        tri.cID = vec2(3); // o, o1, o2 triangle.\n                    }                  \n                }\n\n                \n                tri.p0 = o; tri.p1 = o1; tri.p2 = o2;\n                tri.id = tri.cID + g + vec2(i - 1, j - 1);\n                \n                // Once we've effectively hit a triangle, break to save further calculations.\n                break;\n                \n            }\n            \n                       \n\t\t}\n\t}\n    \n    // Return the triangle object -- Vertices, IDs, etc.\n    return tri;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Screen coordinates. Note that I've put restrictions on the resolution. I coded this for\n    // the 800 by 450 canvas, so the image looks a little bloated in fullscreen. Therefore, I've\n    // attempted to counter that by restricting is to 800 pixels... It kind of works. :)\n\tvec2 uv = (fragCoord.xy - iResolution.xy*.5)/clamp(iResolution.y, 350., 800.);\n    \n    \n    #ifdef FIXED\n    // Basic diagonal scrolling.\n    vec2 p = uv*5. - vec2(2, 1)*iTime/8.;\n    #else \n    // Moving everything down slightly to give the mild impression that the structure is\n    // slowly sliding down a wall... or something. I make this up as I go along. :)\n    vec2 p = uv*5. - vec2(0, -1)*iTime/8.;\n    #endif\n    \n    \n\n    // Perform the triangulation: This function returns the triangle object struct, which consists of the\n    // three triangle vertices, the unique cell ID, and another triangle ID for coloring.\n    triObj tri = triangulate(p);\n    \n    // Use the three triangle vertices to calculate the inner circle center.\n    vec3 inC;\n    inC.xy = inCent(tri.p0, tri.p1, tri.p2); // Inner circle center.\n    inC.z = inCentRad(tri.p0, tri.p1, tri.p2); // Maximum radius to the three sides.\n    \n    // Using the three vertices to calculate the triangle distance value -- which can be used for shading\n    // triangle edge outlines, etc.\n    float d0, d1, d2;\n    d0 = distLine(tri.p0, tri.p1);\n    d1 = distLine(tri.p1, tri.p2);\n    d2 = distLine(tri.p2, tri.p0);\n    float triDist = min(min(d0, d1), d2);\n    \n    \n \n    // Cell color, based on the four triangle arrangements: Top-left, top-right, bottom-left and bottom-right.\n    vec3 cellCol;\n    \n    if(tri.cID.x == 3.) cellCol = vec3(1, 1.3, .6); // Green.\n    else if(tri.cID.x == 2.) cellCol = vec3(1.4, 1, .6); // Orangey brown.\n    else if(tri.cID.x == 1.) cellCol = vec3(.6, 1, 1.4); // Blue.\n    else cellCol = vec3(1.4, .7, .8); // Pinkish red.\n    \n    //if(hash21(tri.id)>.4) cellCol = grey(cellCol);\n    \n    #if PALETTE==0\n    // The less complicated default palette. For amateurs like myself, fewer colors are easier to work with. :)\n    if(tri.cID.x != 3.) cellCol = grey(cellCol); // Greyscale.\n    else cellCol = vec3(1.3, .2, .1); // Redish. //vec3(1.2, .1, .15); //vec3(.8, .28, .05)\n    #elif PALETTE==2\n    if(tri.cID.x == 1. || tri.cID.x == 3.) cellCol = grey(cellCol);\n    #elif PALETTE==3\n    cellCol = grey(cellCol);\n    #endif\n    \n    // The triangle cell background.\n    // Mixing in a bit of the edge color with the cell color to give the impression that some mild lighting \n    // is occurring.\n    vec3 bg = mix(cellCol, vec3(1, .9, .7), .25);\n    // Mutliplying by a factor of the triangular distance for a bit of shading.\n    bg *= (triDist*.7 + .3)*1.55;\n    \n    // Start the layering process by initating to the triangle cell background.\n    vec3 col = bg;\n    \n        \n    // Cell background lines.\n    //col *= clamp(sin((rot2((id).x)*p).x*6.283*20.)*1.5 + 1.35, 0., 1.)*.5 + .5;\n    //col *= clamp(sin((line)*6.283*16.)*1.5 + 1.35, 0., 1.)*.5 + .5;\n    float hatch = clamp(sin((p.y - p.x)*6.283*14.)*1.5 + 1.35, 0., 1.);\n    //float hRnd = hash21(floor(p/5.*240.) + .73);\n    //if(hRnd>.8) hatch = hRnd; // Slight, randomization of the diagonal lines.  \n    col *= hatch*.5 + .5; // Combining the background with the lines.\n\n\n    #ifdef BG_MESH\n    // Finer background layer mesh.\n    // Cover some of the triangle cells with a smaller triangulated mesh. Because of the layering order,\n    // it gives the impression that the mesh is behind the top layer, which in turn gives the image\n    // some faux depth. Comment this block out for a cleaner, but less interesting, look.\n\tif(tri.cID.x != 3. && hash21(tri.id)>.5){ // if(hash21(id).x>.5), etc.    \n         \n        const float scF = 2.5; // Second mesh scaling factor.\n        triObj tri2 = triangulate(p*scF);\n\n        float point2 = min(min(length(tri2.p0/2.5), length(tri2.p1/2.5)), length(tri2.p2/2.5)) - .04;\n        vec3 inC2;\n        inC2.xy = inCent(tri2.p0, tri2.p1, tri2.p2);\n\n        d0 = (distLine(tri2.p0, tri2.p1));\n        d1 = (distLine(tri2.p1, tri2.p2));\n        d2 = (distLine(tri2.p2, tri2.p0));\n        float triDist2 = min(min(d0, d1), d2)/scF - .015;\n\n        // Triangle borders.\n        col = mix(col, vec3(0), (1. - smoothstep(0., .1, triDist2))*.5);\n        col = mix(col, vec3(0), 1. - smoothstep(0., .015, triDist2 - .02));\n        vec3 lCol2 = vec3(1, .85, .4)*.8;\n        #ifdef GREY_LINES\n        lCol2 = grey(lCol2);\n        #endif\n        col = mix(col, lCol2, 1. - smoothstep(0., .015, triDist2));\n\n\t\t// Vertices.\n        col = mix(col, vec3(0), 1. - smoothstep(0., .01, point2 - .02));        \n        col = mix(col, vec3(1, .9, .7), 1. - smoothstep(0., .01, point2));\n\t}\n    #endif\n    \n\n    #ifdef INCIRCLES\n    // Inner circles.\n    //if(hash21(tri.id)>.35){ // Leave some cells empty.\n    vec2 a = inC.xy;\n    // Polar lines around the circle edges.\n    float dir = (tri.cID.x==0. || tri.cID.x==2.)? -1. : 1.;\n    float ang = mod(atan(a.y, a.x) + dir*iTime/2., 3.14159*2.);\n    float hLines = clamp(sin(ang*(floor((inC.z - .055)*69.) + 3.))*1.5 + 1.35, 0., 1.)*.7 + .3;\n    // Innercircle.\n    float inPoint = length(inC.xy) - inC.z + .055;\n    col = mix(col, vec3(0), (1. - smoothstep(0., .1, inPoint - .0))*.5);\n    col = mix(col, vec3(0), 1. - smoothstep(0., .01, inPoint - .02));\n    vec3 iC = cellCol*max(1. - length(inC.xy)/inC.z*.7, 0.);\n    //iC *= clamp(cos(length(inC.xy)*6.283*16.)*1. + .85, 0., 1.)*.15 + .85; // Subtle concentric pattern.\n\tcol = mix(col, mix(vec3(1, .9, .7), iC, .4)*hLines, 1. - smoothstep(0., .01, inPoint));\n    col = mix(col, vec3(0), (1. - smoothstep(0., .01, inPoint - .02 + .08))*.9);\n    col = mix(col, iC, 1. - smoothstep(0., .01, inPoint + .08));\n    // Innercircle points.\n    inPoint = length(inC.xy) - .025;\n    col = mix(col, vec3(0), 1. - smoothstep(0., .01, inPoint - .02));\n\tcol = mix(col, mix(vec3(1, .9, .7), cellCol, .25), 1. - smoothstep(0., .01, inPoint));\n\t//} \n    #endif\n    \n    \n   \n    \n    // Triangle borders.\n    vec3 lCol = vec3(1, .8, .3);//*min(.8 + triDist*16., 1.); // Line color.\n    #ifdef GREY_LINES \n    lCol = grey(lCol);\n    #endif\n    triDist -= .0175;\n    col = mix(col, vec3(0), (1. - smoothstep(0., .1, triDist))*.5);\n    col = mix(col, vec3(0), 1. - smoothstep(0., .015, triDist - .02));\n    col = mix(col, lCol, 1. - smoothstep(0., .015, triDist));//vec3(1, .8, .25)\n\n    //col = mix(col, (vec3(0)), (1. - smoothstep(0., .01, triDist + .02))*.35);\n\n    \n    \n    // Triangle vertices.\n    float verts = min(min(length(tri.p0), length(tri.p1)), length(tri.p2)) - .06;\n    col = mix(col, vec3(0), (1. - smoothstep(0., .1, verts))*.35);\n    col = mix(col, vec3(0), 1. - smoothstep(0., .01, verts - .02));\n\tcol = mix(col, vec3(1, .9, .7), 1. - smoothstep(0., .01, verts));\n    verts += .05;\n    col = mix(col, vec3(0), 1. - smoothstep(0., .01, verts - .02));\n\tcol = mix(col, vec3(1, .9, .7), 1. - smoothstep(0., .01, verts)); \n\n \n    #ifdef SHOW_GRID_CELLS\n    // Cell borders: If you take a look at the triangles overlapping any individual square cell, \n    // you'll see that several partial triangles contribute, and the vertices that make up each \n    // triangle span the 8 surrounding cells. This is the reason why you have to test for\n    // contributing triangle intersections from all 9 cells.\n    vec2 q = abs(fract(p) - .5);\n    float bord = max(q.x, q.y) - .5;\n    bord = max(bord, -(bord + .01));\n    \n    col = mix(col, vec3(0), (1. - smoothstep(0., .1, bord))*.35);\n    col = mix(col, vec3(0), (1. - smoothstep(0., .01, bord - .02)));\n    col = mix(col, vec3(1), (1. - smoothstep(0., .01, bord))*.75);\n    #endif\n       \n    \n    // Vignette.\n    uv = fragCoord/iResolution.xy;\n    col = mix(col, vec3(0), (1. - pow(16.*uv.x*uv.y*(1.-uv.x)*(1.-uv.y), 0.125*.5)));\n\n    \n    // Rough gamma correction.\n\tfragColor = vec4(sqrt(max(col, 0.)), 1);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}