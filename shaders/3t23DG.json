{
    "Shader": {
        "info": {
            "date": "1561044550",
            "description": "Simple test with 2d circles and shadows\n\nYou can place the light with the mouse if you uncomment line 1\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3t23DG",
            "likes": 9,
            "name": "2D sdf test - 19/06/2019",
            "published": 3,
            "tags": [
                "2d",
                "sdf"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 790
        },
        "renderpass": [
            {
                "code": "//#define MOUSE_CONTROLLED\n//#define DEBUG_LIGHT\n\nstruct line\n{\n    vec2 start;\n    vec2 end;\n};\n    \nvec2 getDirection(line l)\n{\n\treturn normalize(l.end - l.start);\n}\n\nvec2 getPoint(line l, float dist)\n{\n\treturn l.start + getDirection(l) * dist;\n}\n\nfloat sdfCircle(vec2 p, vec2 o, float r)\n{\n\treturn distance(o, p) - r;\n}\n\n//from iq : https://iquilezles.org/articles/distfunctions\nfloat opSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat getSdf(vec2 p)\n{\n\n\tfloat radius = .02;\n    float s = opSmoothUnion(sdfCircle(p,vec2(.0,.0), radius), sdfCircle(p, vec2(.2,.2), .05), abs(sin(iTime))*.4 );\n    s = opSmoothUnion(s, sdfCircle(p, vec2(.1, -.1), .1), abs(sin(iTime))*.3 );\n    return s;\n}\n\nvec3 Image(vec2 uv)\n{\n    float s = getSdf(uv);\n    vec3 col;\n    if(s <= .0)\n        col = vec3(.0,.0,.0);\n    else\n    {\n    \tcol = vec3(1.0,1.0, 1.0);\n        \n        #ifdef MOUSE_CONTROLLED\n        vec2 mouse = iMouse.xy / iResolution.xy - vec2(.5);\n    \tmouse.x *= iResolution.x/iResolution.y;\n        #else\n        vec2 mouse = vec2(sin(iTime), cos(iTime))*.5;\n        #endif\n        float dist = distance(uv, mouse);\n        \n        col /= 1. + sqrt(dist);\n        \n        line l = line(uv, mouse);\n        \n        float pd = .0;\n        while(pd < dist)\n        {\n            float d = getSdf(getPoint(l, pd));\n            if(d < .0001)\n            {\n            \tcol *= .05;\n                break;\n            }\n        \tpd += d;\n            \n        }\n        #ifdef DEBUG_LIGHT\n    \tif(distance(mouse, uv) <= .01) col = vec3(1.0,.0,.0);\n    \t#endif\n    }\n    return col;\n}\n\nMAIN_FUNCTION(Image)",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int aa = 2;\n\n#define MAIN_FUNCTION(function) \\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\\\n{\\\n    vec3 total = vec3(.0);\\\n    /*MSAA*/\\\n    for(int i = 0; i <aa;i++)\\\n    for(int j = 0; j <aa;j++)\\\n    {\\\n    \t/*offset the uv for MSAA*/\\\n    \tvec2 uv = (fragCoord+vec2(float(i),float(j))/float(aa)-.5)/iResolution.xy - vec2(.5);\\\n    \tuv.x *= iResolution.x/iResolution.y;\\\n    \t\\\n        total+= function(uv);\\\n    }\\\n    total /= float(aa*aa);\\\n    \\\n    /*Output to screen*/\\\n    fragColor = vec4(pow(total,vec3(1./2.2)),1.0);\\\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}