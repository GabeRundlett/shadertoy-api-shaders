{
    "Shader": {
        "info": {
            "date": "1613760330",
            "description": "A fractal tree.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGfzR",
            "likes": 6,
            "name": "Fractal Tree 01",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "tree"
            ],
            "usePreview": 0,
            "username": "moranzcw",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "// Fractal Tree 01 - by moranzcw - 2021\n// Email: moranzcw@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.14159265359\n#define MaxDepth 8\n#define MaxStackSize MaxDepth+1\n#define Attenuation 0.8\n\nfloat rand(float seed)\n{ \n    return fract(sin(seed*(91.3458)) * 47453.5453);\n}\n\nstruct Branch\n{\n    vec2 origin;\n    vec2 direction;\n    float len;\n    int depth;\n    float id;\n};\n\nBranch stack[MaxStackSize];\nint top = 0;\nfloat id = 0.0;\n\nbool push(Branch branch)\n{\n    if(top < MaxStackSize)\n    {\n        stack[top] = branch;\n        top += 1;\n        return true;\n    }\n    return false;\n}\n\nbool pop(out Branch branch)\n{\n    if(top > 0)\n    {\n        top -= 1;\n        branch = stack[top];\n        return true;\n    }\n    return false;\n}\n\nvec3 line(vec2 coord, vec2 p1, vec2 p2, float width, vec3 color)\n{\n    vec2 v1 = coord - p1;\n    vec2 v2 = p2 - p1;\n    float j1 = dot(v1, v2);\n    \n    vec2 v3 = coord - p2;\n    vec2 v4 = p1 - p2;\n    float j2 = dot(v3, v4);\n    \n    float len;\n    if( j1 > 0.0 && j2 > 0.0)\n    {\n        vec2 nv2 = normalize(v2);\n        len = length(v1 - dot(v1, nv2) * nv2);\n    }\n    else\n    {\n        len = min(length(v1),length(v3));\n    }\n    return color * step(len, width);\n}\n\nvec2 rotate(vec2 v, float theta)\n{\n    vec2 v1;\n    v1.x = v.x * cos(theta) - v.y * sin(theta);\n    v1.y = v.y * cos(theta) + v.x * sin(theta);\n    return v1;\n}\n\nvec3 tree(vec2 coord, Branch branch)\n{\n    push(branch);\n    Branch cur;\n    vec3 color;\n    while(true)\n    {\n        if(pop(cur))\n        {\n            vec2 p = cur.origin + cur.direction * cur.len;\n            vec3 shade = vec3(dot(cur.direction, vec2(0.7071,0.7071)) / 8.0 + 0.25);\n            shade = line(coord, cur.origin, p, 0.005*pow(0.91, float(cur.depth)), shade);\n            color = step(0.001,shade) * shade + (1.0 - step(0.001,shade)) * color;\n            \n            if(cur.depth < MaxDepth)\n            {\n                vec2 dir1 = rotate(cur.direction, PI/10.0 + 0.2*rand(cur.id*0.15) + 0.08*sin(iTime+cur.id));\n                vec2 dir2 = rotate(cur.direction, -PI/10.0 - 0.16*rand(cur.id*0.35) + 0.08*sin(iTime-cur.id));\n                bool flag;\n                flag = push(Branch(p, dir1, cur.len * (Attenuation - 0.05*rand(cur.id*0.36)), cur.depth+1,id++));\n                flag = flag && push(Branch(p, dir2, cur.len * (Attenuation- 0.05*rand(cur.id*0.69)), cur.depth+1, id++));\n                if(!flag)\n                    break;\n            }\n            else\n            {\n                float ir = dot(cur.direction, vec2(0.7071,0.7071)) / 4.0 + 0.5;\n                float t = 0.4 + (sin(5.0*iTime + cur.id)+1.0) * 0.3;\n                color += smoothstep(0.03, 0.01, length(coord-p)) * vec3(0.6,0.4,0.4) * ir * t;\n            }\n        }\n        else\n            break;\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 coord = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 color = vec3(0.43,0.4,0.4);\n    Branch branch = Branch(vec2(0.0,-0.7), vec2(0.0, 1.0), 0.35, 0, id++);\n    color += tree(coord, branch);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}