{
    "Shader": {
        "info": {
            "date": "1682904797",
            "description": "PROMPT: Create code written in GLSL (OpenGL Shading Language) for ShaderToy.com, the code must creates an animated blue sphere bouncing in a red background. \n\nRESULT: It animates the sphere using a sine wave function to create a bouncing effect. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt3Gzs",
            "likes": 1,
            "name": "GPT-3 animated blue sphere ",
            "published": 3,
            "tags": [
                "sphere",
                "animated",
                "blue",
                "gpt3"
            ],
            "usePreview": 0,
            "username": "mbaernestocr",
            "viewed": 121
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord.xy / iResolution.xy) - 0.5; // center the coordinate system\n    p.x *= iResolution.x / iResolution.y; // correct the aspect ratio\n    \n    // background color\n    vec4 bgColor = vec4(1.0, 0.0, 0.0, 1.0); // red\n    \n    // sphere properties\n    vec3 spherePos = vec3(0.0, 0.0, 0.0); // sphere center position\n    float sphereRadius = 0.3;\n    vec3 sphereColor = vec3(0.0, 0.0, 1.0); // blue\n    \n    // sphere animation\n    float speed = 0.5;\n    float time = iTime * speed;\n    float bounce = abs(sin(time)); // bouncing effect\n    vec3 sphereOffset = vec3(0.0, bounce * 0.5, 0.0);\n    spherePos += sphereOffset;\n    \n    // calculate distance between pixel and sphere center\n    float dist = length(p - spherePos.xy);\n    \n    // check if pixel is inside the sphere\n    if (dist < sphereRadius) {\n        // calculate color based on distance from sphere center\n        vec3 color = mix(sphereColor, vec3(1.0), smoothstep(0.0, sphereRadius, dist));\n        fragColor = vec4(color, 1.0);\n    } else {\n        fragColor = bgColor;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}