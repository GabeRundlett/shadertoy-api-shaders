{
    "Shader": {
        "info": {
            "date": "1649939733",
            "description": "Fugu in fishbowl in non-Faberge egg - mousing advised",
            "flags": 0,
            "hasliked": 0,
            "id": "NtjcRV",
            "likes": 18,
            "name": "Fugu Egg",
            "published": 3,
            "tags": [
                "refraction",
                "water",
                "fish"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "// \"Fugu Egg\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Fugu in fishbowl in non-Faberge egg - mousing advised\n\n// Optics includes reflection, refraction, total internal reflection, Fresnel reflection\n\n/*\n  No. 7 in \"Egg\" series; others are listed in \"Nautilus Egg\" (7dj3Wz).\n*/\n\n#define AA  0  // (= 0/1) optional antialiasing\n\n#if 1\n#define VAR_ZERO min (iFrame, 0) \n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nvec4 SphFib (vec3 v, float n);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nfloat Fbm2 (vec2 p);\n\nvec3 qHit, ltDir, sphPos, fishPos, pFish, vuPos, eyeOff, hingSz;\nvec2 opCs;\nfloat dstFar, tCur, opPhs, shellRad, sphRad, sphHt, shHalf, fishSz, fishAng, rotDir,\n   bodyEx, spkEx, mthShp;\nint idObj;\nbool isSh;\nconst int idShell = 1, idHing = 2, idArm = 3, idSup = 4, idFlr = 5,\n   idBody = 11, idFinV = 12, idFinL = 13, idTail = 14, idMouth = 15, idEye = 16;\nconst float pi = 3.1415927, phi = 1.618034;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ShRad (vec3 p)\n{\n  return shellRad + 0.02 * (1. - p.y / length (p)) * cos (64. * atan (p.x, p.z));\n}\n\nfloat ExtObjDf (vec3 p)\n{  // (from \"Nautilus Egg\")\n  vec3 q;\n  float dMin, d, ds, r, y;\n  dMin = dstFar;\n  q = p;\n  q.y -= -0.1;\n  d = PrCylDf (q.xzy, 40., 0.1);\n  DMINQ (idFlr);\n  q = p;\n  q.y -= shellRad;\n  q.z -= - (shellRad - 0.1) - 2. * hingSz.z;\n  d = PrCapsDf (q.yzx, hingSz.y + 0.02, hingSz.x);\n  DMINQ (idHing);\n  q.yz = Rot2Cs (q.yz, opCs);\n  shHalf = sign (q.y);\n  q.y = abs (q.y);\n  q.yz = Rot2Cs (q.yz, opCs);\n  q.z -= (shellRad - 0.1) + 2. * hingSz.z;\n  r = ShRad (q);\n  ds = length (q) - r;\n  d = 0.9 * SmoothMax (abs (ds) - 0.05, -0.01 - q.y, 0.01);\n  DMINQ (idShell);\n  q.z -= - (shellRad - 0.1) - hingSz.z;\n  d = max (PrRoundBoxDf (q, vec3 (hingSz.xy, hingSz.z + 0.01) - 0.02, 0.02),\n     max (- ds, 0.05 - q.y));\n  DMINQ (idArm);\n  q = p;\n  q.y -= 0.5 * sphHt;\n  d = PrCylDf (q.xzy, 0.03, 0.5 * sphHt);\n  DMINQ (idSup);\n  return dMin;\n}\n\nfloat ExtObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ExtObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ExtObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ExtObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec2 SpkShp ()\n{\n  vec4 f4;\n  vec3 uf;\n  float s;\n  f4 = SphFib (normalize (pFish + vec3 (0., 0., 0.1)), 2048.);\n  uf = f4.yzw;\n  s = smoothstep (0.95, 0.99, dot (uf, normalize (vec3 (0., 0.24, 1.))));\n  if (s == 0.) s = smoothstep (0.92, 0.99, dot (uf, normalize (vec3 (0., 0.35, -1.))));\n  if (s == 0.) s = smoothstep (0.9, 0.94, dot (uf, normalize ((eyeOff - vec3 (0., 0., -0.03)) *\n     vec3 (sign (uf.x), 1., 1.))));\n  if (s == 0.) s = smoothstep (0.97, 0.99, dot (uf, normalize (vec3 (sign (uf.x), 0., 0.25))));\n  if (s == 0.) s = smoothstep (0.97, 0.99, dot (uf, normalize (vec3 (0., sign (uf.y), -0.1))));\n  return vec2 (1. - s, f4.x);\n}\n\nfloat FishBodyDf ()\n{\n  vec3 p, q;\n  vec2 spk;\n  float spkLen, db, dt;\n  spk = SpkShp ();\n  spkLen = spk.x * (1. - smoothstep (0.001, 0.02, spk.y)) * (0.001 + 0.04 * spkEx);\n  p = pFish;\n  p.y -= -0.03 * bodyEx;\n  p.x *= 1. + 1.5 * (p.y + 0.2) * (p.y + 0.2);\n  p.xy *= 1. + 0.5 * smoothstep (0., 0.5, - p.z);\n  q = (p - vec3 (0., 0.2 + 0.025 * bodyEx, 0.5 * (p.y - 0.2) - 0.14)) * vec3 (1.4, 1.7, 0.6);\n  dt = PrSphDf (q, 0.4 - 0.2 * smoothstep (0., 1.5, 1.3 - p.z) + spkLen);\n  q = p * vec3 (1.2, 1.2, 1. + 0.5 * smoothstep (0., 0.5, - p.y - p.z));\n  db = PrSphDf (q, 0.37 + smoothstep (0., 1.7, - p.z) + 0.03 * bodyEx + spkLen);\n  q = pFish;\n  q.yz -= vec2 (0.1, 0.1);\n  q.xy *= vec2 (0.5, 1.) + vec2 (0.1, -0.4) * mthShp;\n  return SmoothMin (max (db, - PrCylDf (q, 0.02, 0.3)), dt, 0.05);\n}\n\nfloat FishMthDf ()\n{\n  vec3 p;\n  p = pFish;\n  p.yz -= vec2 (0.1, 0.34 + 0.02 * bodyEx - 2. * p.x * p.x);\n  p.xy *= vec2 (0.5 + 0.1 * mthShp, 1. - 0.5 * mthShp);\n  return PrCylAnDf (p, 0.015, 0.0015, 0.03);\n}\n\nfloat FishTailDf ()\n{\n  vec3 p;\n  float d, r, a;\n  p = pFish;\n  p.yz -= vec2 (0.11, -0.45);\n  p.xz = Rot2D (p.xz, 0.5 * cos (2. * tCur - 3. * p.y + 5. * p.z));\n  a = 0.003 * sin (32. * atan (p.y, p.z));\n  r = length (p.yz);\n  d = min (0.01 - 0.008 * smoothstep (0.15, 0.25, r) - abs (p.x -\n     a * smoothstep (0.04, 0.08, r)), 0.35 - 0.05 * p.y - 0.01 * cos (a * 1024.) - r);\n  d = - SmoothMin (abs (p.y) + 0.3 * p.z, SmoothMin (-0.3 * abs (p.y) - p.z, d, 0.02), 0.02);\n  return d;\n}\n\nfloat FishFinLDf ()\n{\n  vec3 p;\n  float d, r, a, t, w;\n  p = pFish;\n  t = 5. * tCur + 0.2 * sign (p.x);\n  p.x = abs (p.x) - 0.26 - 0.02 * bodyEx;\n  p.xz = Rot2D (p.xz, 0.4 * pi);\n  w = 0.15 * (1. - 0.15 * bodyEx) * (1. + 5. * length (p));\n  p.yz = Rot2D (p.yz, 0.2 + 0.5 * w * cos (t + 2. * atan (p.x, - p.y)) - 0.5 * pi);\n  p.xz = Rot2D (p.xz, 1.2 + 0.75 * bodyEx + w * sin (t - w) - 0.5 * pi);\n  a = atan (p.x, - p.y);\n  r = length (p.xy);\n  d = min (0.01 - 0.008 * smoothstep (0.2, 0.3, r) -\n     abs (p.z + 0.002 * sin (32. * a) * smoothstep (0.05, 0.08, r)),\n     0.4 - 0.15 * smoothstep (1., 3., abs (a)) - 0.01 * cos (32. * a) - r);\n  d = - SmoothMin (-0.2 * p.x + p.y, SmoothMin (p.x - 0.7 * p.y, d, 0.02), 0.02);\n  return d;\n}\n\nfloat FishFinVDf ()\n{\n  vec3 p;\n  float d, r, a, y;\n  p = pFish;\n  p.y = abs (p.y + 0.035 * bodyEx) - 0.035 * bodyEx - 0.26 - 0.02 * sign (p.y);\n  p.z -= -0.1;\n  y = smoothstep (0., 0.2, p.y);\n  p.z *= 1. - 0.3 * y * y;\n  a = - cos (4. * tCur + 5. * (- p.y + p.z)) * (0.1 - 0.3 * p.z);\n  p.xz = Rot2D (p.xz, a);\n  p.xy = Rot2D (p.xy, a);\n  a = 0.0025 * sin (32. * atan (p.y, p.z));\n  r = length (p.yz);\n  d = min (0.01 - 0.009 * smoothstep (0.1, 0.2, r) -\n     abs (p.x + a * smoothstep (0.04, 0.1, r)), 0.22 - 0.015 * cos (512. * a) - r);\n  d = - SmoothMin (p.y + 0.4 * p.z, SmoothMin (-0.4 * p.y - p.z, d, 0.02), 0.02);\n  return d;\n}\n\nfloat FishDf (vec3 p, float dMin)\n{  // (from \"Fibonacci's Fugu\" and \"Fugu Watching\")\n  float d, a, c;\n  p.xz *= rotDir;\n  c = cos (2. * tCur);\n  a = -0.5 * smoothstep (-0.2, 1.1, - p.z) * c;\n  p.xz = Rot2D (p.xz, 0.1 * c + a);\n  p.xy = Rot2D (p.xy, 0.5 * a);\n  pFish = p;\n  d = 0.3 * FishBodyDf ();\n  if (d < dMin) idObj = idBody;\n  dMin = min (dMin, d);\n  d = FishMthDf ();\n  if (abs (d) < dMin) idObj = idMouth;\n  dMin = SmoothMin (dMin, d, 0.01);\n  d = 0.6 * FishTailDf ();\n  if (d < dMin) idObj = idTail;\n  dMin = SmoothMin (dMin, d, 0.01);\n  d = 0.6 * FishFinLDf ();\n  if (d < dMin) idObj = idFinL;\n  dMin = SmoothMin (dMin, d, 0.01);\n  d = 0.7 * FishFinVDf ();\n  if (d < dMin) idObj = idFinV;\n  dMin = SmoothMin (dMin, d, 0.01);\n  p.x = abs (p.x);\n  d = PrSphDf (p - eyeOff, 0.13);\n  if (d < dMin) idObj = idEye;\n  dMin = SmoothMin (dMin, d, 0.02);\n  return dMin;\n}\n\nfloat IntObjDf (vec3 p)\n{\n  float dMin, d;\n  p -= fishPos;\n  p.xz = Rot2D (p.xz, - fishAng);\n  dMin = dstFar / fishSz;\n  p /= fishSz;\n  if (! isSh) d = PrSphDf (p, 0.8);\n  dMin = (isSh || d < 0.1) ? FishDf (p, dMin) : d;\n  return fishSz * dMin;\n}\n\nfloat IntObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = IntObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 IntObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = IntObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 IntObjCol (vec3 p)\n{\n  vec4 col4;\n  vec3 ve;\n  vec2 spk;\n  float s;\n  col4 = mix (vec4 (0.9, 0.6, 0.8, 0.2), vec4 (0.9, 0.5, 0.5, 0.2), spkEx);\n  if (idObj == idBody) {\n    col4.rgb *= 1. - 0.5 * smoothstep (-0.2, 0.1, pFish.y);\n    spk = SpkShp ();\n    col4.rgb = mix (col4.rgb, vec3 (0.9, 0.7, 0.7), 0.5 * smoothstep (0., 0.01, spk.x) *\n       SmoothBump (0.25, 0.75, 0.1, mod (128. * atan (0.7 * pFish.x, pFish.y - 0.1) / pi, 1.)));\n    col4 = mix (col4, vec4 (0.9, 0.9, 0.95, 0.5), 0.5 * step (0.02, spk.x) * step (spk.y, 0.02));\n  } else if (idObj == idMouth) {\n    col4.rgb = mix (col4.rgb, vec3 (0.9, 0.7, 0.7), 0.5);\n  } else if (idObj == idFinV || idObj == idFinL) {\n    col4.rgb = mix (col4.rgb, vec3 (1.), 0.3 * smoothstep (0.4, 0.5, length (pFish)));\n  } else if (idObj == idTail) {\n    col4.rgb = mix (col4.rgb, vec3 (1.), 0.3 * smoothstep (0.6, 0.7, length (pFish)));\n  } else if (idObj == idEye) {\n    if (abs (pFish.y - eyeOff.y - 0.04) < 0.001 + 0.1 * SmoothBump (0.13, 0.87, 0.07,\n       mod (0.5 * tCur, 1.))) {\n      ve = eyeOff * vec3 (sign (pFish.x), 1., 1.) * fishSz;\n      ve.xz = Rot2D (ve.xz, fishAng) * rotDir;\n      ve += fishPos;\n      ve = RotToDir (normalize (vuPos - ve), vec3 (sign (pFish.x), 0., 0.), p - ve);\n      s = 0.8 * length (ve.yz) / fishSz;\n      col4 = (s > 0.05 + 0.03 * SmoothBump (0.25, 0.75, 0.25, mod (8. *\n         atan (ve.y, ve.z) / pi, 1.))) ? vec4 (1., 1., 1., 0.3) * (0.5 +\n         0.5 * smoothstep (0.07, 0.1, s)) : vec4 (0., 0.5, 0., -1.);\n    } else idObj = idBody;\n  }\n  return col4;\n}\n\nvec4 ExtObjCol ()\n{\n  vec4 col4;\n  float r, rr, s, y;\n  if (idObj == idShell) {\n    r = ShRad (qHit);\n    rr = length (qHit);\n    s = 0.;\n    if (rr > r) {\n      s = smoothstep (0.7, 0.8, cos (32. * asin (qHit.y / rr) + 8. * atan (qHit.z, qHit.x) *\n         shHalf));\n    } else if (qHit.y > 0.01) {\n      y = 1. - qHit.y / rr;\n      s = smoothstep (0.05, 0.1, y) * smoothstep (-0.2, 0.2, (r - shellRad) / (0.02 * y));\n    }\n    col4 = mix (vec4 (0.2, 0.3, 1., 0.2), vec4 (0.8, 0.8, 1., 0.1), s);\n  } else if (idObj == idHing) {\n    col4 = vec4 (0.1, 0.1, 0.5, 0.2) * (1. - 0.4 * SmoothBump (-0.04, 0.04, 0.02,\n       mod (4. * qHit.x / hingSz.x + 0.5, 1.) - 0.5));\n  } else if (idObj == idArm) {\n    col4 = vec4 (0.1, 0.1, 0.5, 0.2);\n  } else if (idObj == idSup) {\n    col4 = vec4 (0.5, 0.5, 0.5, 0.1);\n  } else if (idObj == idFlr) {\n    col4 = vec4 (0.5, 0.3, 0.1, 0.1) * (0.8 + 0.2 * Fbm2 (vec2 (0.5, 4.) * qHit.xz)) *\n       (1. - 0.5 * smoothstep (0., 15., length (qHit.xz) - 25.));\n  }\n  return col4;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p, qHitT;\n  float sh, d, h;\n  int idObjT;\n  isSh = true;\n  sh = 1.;\n  idObjT = idObj;\n  qHitT = qHit;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    h = min (ExtObjDf (p), IntObjDf (p));\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  idObj = idObjT;\n  qHit = qHitT;\n  isSh = false;\n  return 0.5 + 0.5 * sh;\n}\n\nfloat InSphHit (vec3 ro, vec3 rd, float rad)\n{\n  float b, d;\n  b = dot (rd, ro);\n  d = b * b + rad * rad - dot (ro, ro);\n  return (d > 0.) ? - b - sqrt (d) : dstFar;\n}\n\nfloat OutSphHit (vec3 ro, vec3 rd, float rad)\n{\n  float b, d;\n  b = dot (rd, ro);\n  d = b * b + rad * rad - dot (ro, ro);\n  return (d > 0.) ? - b + sqrt (d) : dstFar;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  vec3 col; \n  vec2 w;\n  col = 0.5 * mix (vec3 (0.5, 0.5, 0.), vec3 (1., 0.9, 0.8) * (0.4 + 0.2 * rd.y), \n     Minv2 (smoothstep (0.05, 0.1, abs (sin (64. * atan (rd.zy,\n     vec2 (rd.x, length (rd.xz))))))));\n  if (rd.y > 0.) {\n    w = Rot2D (rd.xz / rd.y, 0.25 * pi);\n    col = mix (col, vec3 (0.9, 0.9, 1.), step (Maxv2 (abs (w)), 0.75) * smoothstep (0., 0.02,\n       0.45 - Maxv2 (abs (fract (6. * w + 0.5) - 0.5))));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, colR, row, rdt, rdo, vn, vnIn, vnOut, vnw;\n  float dstObj, dstSphIn, dstSphOut, dstObjInt, dstObjExt, watHt, dstWat, eta, s, sh, nDotL;\n  bool inWat, inWatAny, hitSph, needRefl, inShell;\n  hingSz = vec3 (1., 0.2, 0.4);\n  sphPos = vec3 (0., sphHt + sphRad, 0.);\n  eta = 1.3;\n  watHt = sphPos.y + 0.25 * sphRad;\n  bodyEx = SmoothBump (0.25, 0.75, 0.15, mod (0.4 * tCur, 1.));\n  spkEx = SmoothBump (0.65, 0.85, 0.05, mod (0.2 * tCur, 1.));\n  mthShp = sin (6. * tCur);\n  eyeOff = vec3 (0.13);\n  fishSz = 2.;\n  rotDir = 1.;\n  fishAng = 2. * pi * rotDir * fract (0.1 * tCur);\n  fishPos.xz = sphPos.xz + Rot2D (vec2 (sphRad - 1.7, 0.), fishAng);\n  fishPos.y = watHt - 0.7 - 0.3 * cos (1. * tCur);\n  if (rd.y == 0.) rd.y = 0.001;\n  isSh = false;\n  rdo = rd;\n  inWatAny = false;\n  dstObjExt = ExtObjRay (ro, rd);\n  dstObj = dstFar;\n  dstObjInt = dstFar;\n  dstSphIn = InSphHit (ro - sphPos, rd, sphRad);\n  hitSph = (dstSphIn < min (dstObjExt, dstFar));\n  if (hitSph) {\n    ro += dstSphIn * rd;\n    vnIn = (ro - sphPos) / sphRad;\n    inWat = false;\n    needRefl = false;\n    if (ro.y < watHt) {\n      inWat = true;\n      inWatAny = true;\n      rd = refract (rd, vnIn, 1. / eta);\n    }\n    dstObjInt = IntObjRay (ro, rd);\n    dstSphOut = OutSphHit (ro - sphPos, rd, sphRad);\n    dstWat = - (ro.y - watHt) / rd.y;\n    if (dstWat > 0. && dstWat < min (dstObjInt, dstSphOut)) {\n      ro += dstWat * rd;\n      s = 0.001 * sin (2. * pi * (2. * length (ro.xz) - tCur));\n      vnw.y = 1. - abs (s);\n      vnw.xz = - sign (s) * sqrt (1. - vnw.y * vnw.y) * normalize (ro.xz);\n      if (inWat) {\n        rdt = refract (rd, - vnw, eta);\n        inWat = (length (rdt) == 0.);\n        rd = (inWat) ? reflect (rd, - vnw) : rdt;\n      } else {\n        row = ro;\n        needRefl = true;\n        rd = refract (rd, vnw, 1. / eta);\n        inWat = true;\n        inWatAny = true;\n      }\n      dstObjInt = IntObjRay (ro, rd);\n      dstSphOut = OutSphHit (ro - sphPos, rd, sphRad);\n    }\n    if (dstSphOut < dstObjInt) {\n      ro += dstSphOut * rd;\n      if (inWat) {\n        vnOut = - (ro - sphPos) / sphRad;\n        rdt = refract (rd, vnOut, eta);\n        rd = (length (rdt) > 0.) ? rdt : reflect (rd, vnOut);\n      }\n    }\n    dstObjExt = ExtObjRay (ro, rd);\n  }\n  dstObj = min (dstObjInt, dstObjExt);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    if (dstObjInt < dstObjExt) {\n      vn = IntObjNf (ro);\n      col4 = IntObjCol (ro);\n    } else {\n      vn = ExtObjNf (ro);\n      col4 = ExtObjCol ();\n    }\n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, ltDir), 0.);\n      if (dstObjExt < dstObjInt) nDotL *= nDotL;\n      sh = ObjSShadow (ro + 0.01 * ltDir, ltDir);\n      if (dstObjExt < dstObjInt && idObj == idFlr && InSphHit (qHit - sphPos, ltDir, 1.05 * sphRad) <\n         dstFar) sh = min (sh, 0.9);\n      col = col4.rgb * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) +\n         0.8 * sh * nDotL) +\n         col4.a * step (0.95, sh) * pow (max (dot (reflect (ltDir, vn), rdo), 0.), 32.);\n      inShell = (length (qHit) < ShRad (qHit));\n      if (dstObjInt < dstObjExt || dstObjExt < dstObjInt && idObj == idShell && inShell)\n         col *= 0.1 + 0.9 * smoothstep (0.05, 0.3, opPhs);\n      if (dstObjExt < dstObjInt && idObj == idShell && ! inShell)\n         col += 0.1 * BgCol (reflect (rdo, vn));\n    } else {\n      col = col4.rgb * (0.5 + 0.5 * max (- dot (vn, rdo), 0.));\n    }\n  } else {\n    col = BgCol (rd);\n  }\n  if (inWatAny) col *= vec3 (0.9, 1., 0.9);\n  if (needRefl) {\n    ro = row;\n    rd = reflect (rdo, vnw);\n    dstObj = ExtObjRay (ro, rd);\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      vn = ExtObjNf (ro);\n      col4 = ExtObjCol ();\n      colR = col4.rgb * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * nDotL) +\n         col4.a * step (0.95, sh) * pow (max (dot (reflect (ltDir, vn), rd), 0.), 32.);\n    } else {\n      colR = BgCol (rd);\n    }\n    col = mix (col, colR, 0.03 + 0.97 * pow (1. - abs (dot (rdo, vnw)), 5.));\n  }\n  if (hitSph) {\n    colR = BgCol (reflect (rdo, vnIn));\n    col = mix (col, 1.5 * colR, 0.03 + 0.97 * pow (1. - abs (dot (rdo, vnIn)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  opPhs = SmoothBump (0.25, 0.85, 0.15, mod (0.07 * tCur, 1.));\n  opCs = sin (0.4 * pi * opPhs + vec2 (0.5 * pi, 0.));\n  shellRad = 4.;\n  sphRad = 3.7;\n  sphHt = 0.8 * opPhs * shellRad;\n  az = pi;\n  el = -0.12 * pi;\n  zmFac = 4.8;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n    zmFac += 2. * abs (az - pi);\n  } else {\n    az += 0.4 * pi * (2. * SmoothBump (0.25, 0.75, 0.24, fract (0.01 * tCur)) - 1.); \n  }\n  el = clamp (el, -0.4 * pi, 0.02 * pi);\n  az = clamp (az, 0.2 * pi, 1.8 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 1.5 * shellRad, -35.);\n  ro.y = max (ro.y, 0.1);\n  vuPos = ro;\n  ltDir = vuMat * normalize (vec3 (-1., 1., -1.));\n  dstFar = 100.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nvec4 SphFib (vec3 v, float n)\n{   // (Keinert et al's inverse spherical Fibonacci mapping)\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vec4 (sqrt (ddMin), vfMin);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}