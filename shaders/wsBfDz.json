{
    "Shader": {
        "info": {
            "date": "1589829952",
            "description": "Music visualization fork of https://www.shadertoy.com/view/wdSfzm (Simulating the Sunrise/Sunset) by myself\nWhich is a fork of https://www.shadertoy.com/view/tdBfRw (Simulating the Colors of the Sky) by jamelouis",
            "flags": 64,
            "hasliked": 0,
            "id": "wsBfDz",
            "likes": 6,
            "name": "Solar Grains - Suns Set to Music",
            "published": 3,
            "tags": [
                "sunset",
                "sun",
                "colors",
                "sky",
                "fork",
                "sunrise",
                "sunrise",
                "granular",
                "simulating"
            ],
            "usePreview": 0,
            "username": "Yambam",
            "viewed": 638
        },
        "renderpass": [
            {
                "code": "const float INFINITY = 3.402823466e+38;\n//const float INFINITY = 1.0 / 0.0;\nconst float M_PI = 3.1415926;\nconst float DURATION = 2.;\n\nconst float earthRadius = 6360e3;\nconst float atmosphereRadius = 6420e3;\nconst float Hr = 7994.;\nconst float Hm = 1200.;\nconst vec3 betaR = vec3(3.8e-6, 13.5e-6,33.1e-6);\nconst vec3 betaM = vec3(21e-6);\n// from 'the graphics codex'\n// Ray-Sphere Intersection\nbool raySphereIntersect(vec3 P, vec3 w, vec3 C, float r, out float t0, out float t1) { \n    vec3 v = P - C;\n    \n    float b = 2.0 * dot(w, v);\n    float c = dot(v,v) - r * r;\n    \n    float d = b * b - 4.0 * c;\n    \n    if(d<0.0) return false;\n    \n    float s = sqrt(d);\n    t0 = (-b-s) * 0.5;\n    t1 = (-b+s) * 0.5;\n    \n    return true;\n}\n\nvec3 computeIncidentLight(vec3 o, vec3 d, float tmin, float tmax, vec3 sunDirection)\n{\n    float t0, t1;\n    if(!raySphereIntersect(o, d, vec3(0.0), atmosphereRadius, t0, t1) || t1 < 0.) return vec3(0.0);\n    if(t0>tmin && t0>0.) tmin = t0;\n    if(t1<tmax) tmax = t1;\n    uint numSamples = 3u;\n    uint numSamplesLight = 3u;\n    float segmentLength = (tmax-tmin)/float(numSamples);\n    float tCurrent = tmin;\n    vec3 sumR = vec3(0.0);\n    vec3 sumM = vec3(0.0);\n    float opticalDepthR = 0.0;\n    float opticalDepthM = 0.0;\n    float mu = dot(d, sunDirection);\n    float phaseR = 3. / (16. * M_PI) * ( 1. + mu * mu);\n    float g = 0.76;\n    float phaseM = 3. / (8. * M_PI) * ((1.-g*g)*(1. + mu*mu)) / ((2. + g*g) * pow(1. + g*g - 2. * g * mu, 1.5));\n    vec3 betaRt = betaR*(1.-(iMouse.y/iResolution.y) + vec3(0.,2.,3.)*(iMouse.x/iResolution.x-.2));\n    vec3 betaMt = betaM*(1. + 16.*0.); //iMouse.y/iResolution.y);\n    \n    for(uint i = 0u; i < numSamples; ++i) {\n        vec3 samplePosition = o + (tCurrent + segmentLength * 0.5) * d;\n        float height = length(samplePosition) - earthRadius;\n        float hr = exp(-height/ Hr) * segmentLength;\n        float hm = exp(-height/Hm) * segmentLength;\n        opticalDepthR += hr;\n        opticalDepthM += hm;\n        float t0Light;\n        float t1Light;\n        raySphereIntersect(samplePosition, sunDirection, vec3(0.0), atmosphereRadius, t0Light, t1Light);\n        float segmentLengthLight = t1Light / float(numSamplesLight);\n        float opticalDepthLightR = 0.;\n        float opticalDepthLightM = 0.;\n        float tCurrentLight = 0.;\n        uint j;\n        for(j=0u;j<numSamplesLight;++j){\n            vec3 samplePositionLight = samplePosition + (tCurrentLight + segmentLengthLight * 0.5) * sunDirection;\n            float heightLight = length(samplePositionLight) - earthRadius;\n            if(heightLight < 0.0) break;\n            opticalDepthLightR += exp(-heightLight / Hr) * segmentLengthLight;\n            opticalDepthLightM += exp(-heightLight / Hm) * segmentLengthLight;\n            tCurrentLight += segmentLengthLight;\n        }\n        if(j==numSamplesLight) {\n            vec3 tau = vec3(betaRt * (opticalDepthR + opticalDepthLightR) + betaMt * 1.1 * (opticalDepthM + opticalDepthLightM));\n            vec3 attenuation = exp(-tau);\n            sumR += attenuation * hr;\n            sumM += attenuation * hm;\n        }\t\n        tCurrent += segmentLength;\n    }\n    \n    return vec3(sumR * betaRt * phaseR + sumM * betaMt * phaseM) * 20.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x_spectro_free = (fragCoord.x/iResolution.x*20.);\n    /*float x_spectro = .2+.6*x_spectro_free/16.;\n    float fft  = (texture( iChannel0, vec2(x_spectro,0.0) - .2 ).x)*.5-.3;*/\n    \n    float x_spectro_floor = floor(x_spectro_free);\n    float x_spectro_ceil = ceil(x_spectro_free);\n    vec2 x_spectro = .2+.6*vec2(x_spectro_floor,x_spectro_ceil)/20.;\n    float fft  = mix(\n        (texture( iChannel0, vec2(x_spectro.x,0.0) - .2 ).x)\n        ,\n        (texture( iChannel0, vec2(x_spectro.y,0.0) - .2 ).x)\n        ,\n        min((x_spectro_free-x_spectro_floor)*3.,1.) // /(x_spectro_ceil-x_spectro_floor)\n    );\n    //fft = .4-.8*iMouse.x/iResolution.x;\n    //fft = 0.;\n    \n    float daylightCycleSpeed = 1./60.; //0.; //\n    \n    float angle = M_PI * (.0 + 2.*M_PI*(-.0185+.02*sin(2.*M_PI*(iTime*daylightCycleSpeed-.775))+pow(.2835-.1*fft, 2.))); //fract((float(iFrame)/DURATION+40.)/180.)*2.-1.);\n    vec3  sunDirection = vec3(sin(angle), cos(angle), 0.0);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy  * 2.0 - 1.0;\n    bool reflection;\n    if (uv.y<0.) {\n        uv.y = -uv.y;\n        reflection = true;\n    } else {\n        uv.y = .65*uv.y;\n        reflection = false;\n    }\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float scale = .3;\n    float y_scale = 1.;\n    \n    float x = 0.+.5/y_scale*uv.x + .15*iTime + .7*sin(.2*iTime);//float(iFrame)/60.;\n    \n    float y = -.5 * (1. - (.0115*2.4*(-.25 //+ 4.*iMouse.y/iResolution.y\n  + pow(4.+\n        1.000*sin(x*M_PI*1.)\n      + 1.000*sin(x*M_PI*3.)\n      + 0.512*sin(x*M_PI*5.)\n      + 0.512*sin(x*M_PI*7.)\n      + 0.640*sin(x*M_PI*9.)\n      + 0.640*sin(x*M_PI*11.)\n        ,\n        .35\n    )) + .5/y_scale*mod(uv.y, y_scale)));\n    \n    /*y = -.4885 - .0115*2.4*(-1.5 //+ 4.*iMouse.y/iResolution.y\n  + pow(4.+\n        1.000*sin(x*M_PI*1.)\n      + 1.000*sin(x*M_PI*3.)\n      + 0.512*sin(x*M_PI*5.)\n      + 0.512*sin(x*M_PI*7.)\n      + 0.640*sin(x*M_PI*9.)\n      + 0.640*sin(x*M_PI*11.)\n        ,\n        .5\n    )) + .5/y_scale*mod(uv.y, y_scale);*/\n    \n    if (y < -.47) {\n    \ty = mix(y, -.5, min((-.47 - y)/.03*3., 1.));\n    }\n    \n    float z2 = x*x + y*y;\n    \n    vec3 col = vec3(0.0);\n    //if(z2 <= 1.){\n        float phi = x*M_PI*scale;\n        float theta;\n        if (fract(x)*scale > .5) { //<-- Makes the sun rise and set on the same position\n        //if (fract((float(iFrame)/DURATION+40.)/180.) < .5) {\n            theta = y*M_PI*scale-1.125;\n        } else {\n            theta = -(y*M_PI*scale-1.125);\n        }\n        vec3 dir = vec3(sin(theta)*cos(phi), cos(theta), sin(theta)*sin(phi));\n        col = computeIncidentLight(vec3(0.0, earthRadius + 1., 0.0), dir, 0., INFINITY, sunDirection);\n    //}\n    \n\n    // Output to screen\n    //fft  = texture( iChannel0, vec2(x_spectro,0.0) ).x*9.+0.2;\n    //col = pow(col, vec3(1./.6/2.6));\n    col = pow(col, vec3(1./.6/y_scale/(1.5/y_scale+.85/y_scale*(reflection?1.:0.))));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22949,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/wojtek-szczepanik/the-day-after"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}