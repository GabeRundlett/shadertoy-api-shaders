{
    "Shader": {
        "info": {
            "date": "1477579455",
            "description": "RAYMARCHING RAYCASTING RAYTRACING WATEVER IM GRADE 4 & 9 YRS OLD K????!!!!!\nOkay so this shader is a DULPLICEX which can be a remix. This is still in progress. Plz always do positive.\n-Imsure1200q",
            "flags": 64,
            "hasliked": 0,
            "id": "XtcSzn",
            "likes": 2,
            "name": "Dulplicex - 210's limit",
            "published": 3,
            "tags": [
                "ray"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 765
        },
        "renderpass": [
            {
                "code": "#define pix gl_FragCoord.xy / iResolution.xy\n//Dulplicex - 210's limit -- Copyright October 30, 2016.\n//Dulplicex - 210 ni limit -- Karapatang-ari sa Oktubre 30, 2016.\n//Dulplicex/マルチプレックス  -  210の制限 - 著作権2016年10月30日\n//Dulplicex/復用  -  210's limit  - 版權所有2016年10月30日。\n//límite de 210 - - Dulplicex/Multicine Derechos de Autor 30 de de octubre de 2016.\n//                                                     FFFFF   U   U   L      L      Y   Y\n//                                                     F       U   U   L      L      Y   Y\n//IMPORTANT: VOXELSIZE: DO NOT EDIT OR THE SHADER WILL FFFFF   U   U   L      L       YYY  crash!\n//                                                     F       U   U   L      L        Y\n//                                                     F        UUUU   LLLLL  LLLLL    Y\nfloat size = 4.;\nfloat VoxelSize            = 0.5;  \nconst vec4 CLOUD_COLOR     = vec4(0.5, 0.3, 0.1, 1.0);\nconst vec4 CC              = CLOUD_COLOR + 0.3;\nconst float KEY_SPACE = 36.5/256.0;\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\nfloat Hash(vec2 p)\n{\n    float h = dot(p, vec2(17.1, 311.7));\n    return 1.0 - 2.0 * fract(sin(h) * 4358.5453);\n}\n\nfloat Noise(vec2 p, float x)\n{\n    vec2 i = sin(floor(p))*x;\n    i += floor(p)*(1.0-x);\n    vec2 f = fract(p);\n    vec2 u = (f * f * (3.0 - 2.0 * f));\n    \n    return mix(mix(Hash(i + vec2(0.0, 0.0)),\n                   Hash(i + vec2(1.0, 0.0)), u.x),\n               mix(Hash(i + vec2(0.0, 1.0)),\n                   Hash(i + vec2(1.0, 1.0)), u.x), u.y);\n \n}\n\nvec2 VecNoise(vec2 point)\n{\n    vec2 res;\n    res.x = Noise(point,0.0);\n    res.y = Noise(point + vec2(iTime),0.0);\n    return res;\n}\n\n\nfloat DistortionNoise(vec2 point, float distortion)\n{\n    vec2 offset = point + vec2(0.5);\n    offset = VecNoise(point);\n    offset *= distortion;\n    point += offset;\n    return Noise(point,0.0);\n}\n\n\nfloat FbmNoise(vec2 p)\n{\n  const float octaves = 8.0;\n  const float lacunarity = 2.0;\n  const float H = 0.5;\n\n  float value = 0.0, k = 0.0;\n  for (float i = 0.0; i < octaves; ++ i) {\n    value += Noise(p,0.0) * pow(lacunarity, -H * i);\n    p *= lacunarity;\n    ++k;\n  }\n\n  float remainder = fract(octaves);\n  if (remainder >= 0.0) {\n    value -= remainder * Noise(p,0.0) - pow(lacunarity, -H * k);\n  }\n  return value;\n}\n\nfloat DistFbmNoise(vec2 p)\n{\n  const float octaves = 8.0;\n  const float lacunarity = 2.0;\n  const float H = 0.5;\n\n  float value = 0.0, k = 0.0;\n  for (float i = 0.0; i < octaves; ++ i) {\n    value += DistortionNoise(p, 1.0) * pow(lacunarity, -H * i);\n    p *= lacunarity;\n    ++k;\n  }\n\n  float remainder = fract(octaves);\n  if (remainder != 0.0) {\n    value += remainder * Noise(p,0.0) * pow(lacunarity, -H * k);\n  }\n  return value;\n}\n\nvec3 Sky( in vec2 fragCoord, vec4 SKY_COLOR )\n{\n\tvec2 uv = vec2(0.1);\n    //uv *= sqrt(uv);\n    //uv = vec2(length(uv));\n        const float threshold = 0.351;\n        float value = DistFbmNoise(2.0 * uv);\n        vec4 ct = mix(SKY_COLOR - 0.1, \n                      CLOUD_COLOR,\n                      smoothstep(threshold, 1.3, value));\n        return ct.xyz;\n}\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0))-r;\n}\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nmat3 rotate3d(float a)\n{\n    return mat3(cos(a),-sin(a),sin(a),\n                cos(a),cos(a),-sin(a),\n                sin(a),cos(a),cos(a));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\nfloat blend (float a, float b, float k) {\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b,a,h) - k*h*(1.0-h);\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\nfloat maxComp(vec2 a)\n{\n    return max(a.x,a.y);\n}\nfloat maxComp(vec3 a)\n{\n    return max(max(a.x,a.y),a.z);\n}\nfloat maxComp(vec4 a)\n{\n    return max(max(a.x,a.y),max(a.z, a.w));\n}\nvec3 getNoiseP(vec3 p, float zoom)\n{\n    float z = FbmNoise(p.xy/zoom);\n    float x = FbmNoise(p.zy/zoom);\n    float y = Noise(p.xz/zoom,4.23);\n    float f = length(z);\n    float s = length(x);\n    float l = length(y);\n    vec3 new = vec3(f, s, l);\n    vec3 squared = sqrt(abs(1.0/exp(-0.002*new)));\n    vec3 other = new*log(squared)+sqrt(abs(squared));\n    return (maxComp(other)+maxComp(squared))*new;\n    \n}\nvec3 repToMt(vec3 p, float x)//Get Each Corner To The Height Of The Edge Of X\n{\n    vec3 y = vec3(p.x, p.y-x, p.z);\n    return y;\n}\nvec2 map( vec3 pos)\n{\n    float roundness = .15;\n  \tfloat rot = 1.;\n\tfloat k = .05;\n    float size = .5;\n    \n    float scale = 1. / ( 3. - clamp( pos.y, 1., 7. ) );\n    scale = 1.;\n    \n    vec2 x;\n    float iGlobalTim = iTime;\n    vec3 p = vec3(pos.x, pos.y, pos.z);\n    float d1;\n    //Putting An Object:\n    p = vec3(pos.x, pos.y-VoxelSize+(clamp(iGlobalTim, 15.96, 19.71)-15.96), pos.z);\n    p.xz*=rotate2d(clamp(iGlobalTim*7., 30.*7., 31.*7.)-30.*7.);\n    d1 = sdBox(opRep(p,vec3(clamp(iGlobalTim,0.0,10.0))-\n                     vec3((clamp(iGlobalTim,20.0,25.0)-20.0))+\n                     vec3(clamp(iGlobalTim,44.0, 64.0)-44.0)), vec3(VoxelSize));\n    x = vec2(d1, 2.0);\n    p = vec3(pos.x, pos.y-VoxelSize+(clamp(iGlobalTim, 15.96, 19.71)-15.96), pos.z);\n    p.xz*=rotate2d(clamp(iGlobalTim*7., 31.*7., 32.*7.)-31.*7.);\n    d1 = sdBox(opRep(p,vec3(clamp(iGlobalTim,1.0,10.0)-1.0)-\n                     vec3((clamp(iGlobalTim,21.0,26.0)-21.0))+\n                     vec3(clamp(iGlobalTim,44.0, 64.0)-44.0)), vec3(VoxelSize));\n    x = opU(vec2(d1, 2.0), x);\n    p = vec3(pos.x, pos.y-VoxelSize+(clamp(iGlobalTim, 15.96, 19.71)-15.96), pos.z);\n    p.xz*=rotate2d(clamp(iGlobalTim*7., 32.*7., 33.*7.)-32.*7.);\n    d1 = sdBox(opRep(p,vec3(clamp(iGlobalTim,2.0,10.0)-2.0)-\n                     vec3((clamp(iGlobalTim,22.0,27.0)-22.0))+\n                    vec3(clamp(iGlobalTim,44.0, 64.0)-44.0)), vec3(VoxelSize));\n    x = opU(vec2(d1, 2.0), x);\n    \n    p = vec3(pos.x, pos.y-(clamp(iGlobalTim,22.0,27.0)-22.0)\n             +(clamp(iGlobalTim,35.,43.0)-35.0)\n             +(clamp(iGlobalTim,45.0,65.0)-45.0), pos.z);\n    d1 = sdSphere(opRep(p, vec3((\n        clamp(iGlobalTim,10., 14.5)-10.)+\n        (clamp(iGlobalTim,45.0, 65.0)-45.)\n                               )),0.5);\n    x = opU(vec2(d1, 0.6), x);\n    \n    p = vec3(pos.x, pos.y+\n             (clamp(iTime, 52.0, 60.0)-52.0)-\n             (clamp(iTime, 34., 42.)-34.),\n             pos.z);\n    d1 = sdSphere(opRep(p, vec3(\n        (clamp(iTime, 9.0, 14.0)-9.0)\n        )//E\n        )\n                        , 0.5);\n    x = opU(vec2(d1, 1.0), x);\n    \n    if(iGlobalTim > 57.5)\n    {\n        float m = iTime-57.5;\n        p = vec3(pos.x, pos.y, pos.z);\n        d1 = sdBox(p, atan(vec3(m*4.)));\n        x = opU(vec2(d1, 1.0), x);\n    }\n    \n    float fx = 1.;\n    if(iTime > 210.*fx)\n    {\n        x -= x*((clamp(iTime, 210., 220.)-210.)/10.);\n    }\n    return x;\n    \n}\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 30.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m==0.6 )\n        {\n            \n            float f = FbmNoise(pos.xz+pos.y*2.);\n            if(f > 0.888) col = vec3(0.9, 0.5, 0.0);\n            else if(f < 0.002) col = vec3(0.4, 0.7, 1.0);\n            else col = vec3(0.0);\n            ;\n            \n        }\n        else if(m==1.0)\n        {\n            float f = FbmNoise(pos.xy+pos.zy+pos.xz);\n            col = 0.1*f*vec3(1.)-(1.-vec3(0.4, 0.7, 1.0));\n        }\n        else if(m==2.0)\n        {\n            float f = FbmNoise(pos.xy+pos.zy+pos.xz);\n            col = 0.4+0.1*f*vec3(1.)-(1.-vec3(0.9, 0.5, 0.01));\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(cos(iTime), cos(iTime/2.), sin(iTime)) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.9, 0.9, 0.7), 1.0-exp(\n            -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( 5.*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y,5.*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( 0., 1.5, 0. );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, sin(iTime/2.));\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 5174,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://www.soundcloud.com/nocopyrightsounds/disfigure-blank"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}