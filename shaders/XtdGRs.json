{
    "Shader": {
        "info": {
            "date": "1470930231",
            "description": "rotating neon cube animation\npattern changes every time\n\ninspired by : http://i-saint.hatenablog.com/entry/2015/03/18/194818 (only floor pattern, method is irrelevant)",
            "flags": 32,
            "hasliked": 0,
            "id": "XtdGRs",
            "likes": 57,
            "name": "NeonCube",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "phi16",
            "viewed": 5223
        },
        "renderpass": [
            {
                "code": "struct C{\n    float d;\n    int t;\n};\n    \nfloat rand2(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(vec3 v){\n    return rand2(vec2(v.x+v.z,v.y+v.z));\n}\n\nint wait(float t){\n    float period = 4.*3.141592/1.5;\n    t = mod(t,period);\n    if(t < period/2.){\n        if(t < period/8.)return 0;\n        if(t < period/4.)return 1;\n        return int((t/period-1./4.)*40.)+2;\n    }else{\n        t-=period/2.;\n        if(t < period/8.)return 10;\n        if(t < period/4.)return 9;\n        return 8-int((t/period-1./4.)*40.);\n    }\n    return 0;\n}\n\nfloat scal(float t){\n    float period = 4.*3.141592/1.5;\n    t = mod(t,period);\n    float base = -1000.0;\n    if(t < period/2.){\n        if(t < period/8.)base=-1000.0;\n        else if(t < period/4.)base=period/8.;\n        else if(t<period*(1./4.+9./40.)){\n            int x = int((t/period-1./4.)*40.);\n        \tbase = period*(1./4.+float(x)/40.);\n        }\n    }else{\n        t -= period/2.;\n        if(t < period/8.)base=-1000.0;\n        else if(t < period/4.)base=period/8.;\n        else if(t<period*(1./4.+9./40.)){\n            int x = int((t/period-1./4.)*40.);\n        \tbase = period*(1./4.+float(x)/40.);\n        }\n    }\n    return exp(-(t-base)*10.);\n}\n\nvec3 transform(vec3 p){\n    float t = iTime+sin(iTime*1.5);\n    p -= vec3(4,0,0);\n    p *= mat3(cos(t),0,sin(t),0,1,0,-sin(t),0,cos(t));\n    t *= 1.2;\n    t += sin(iTime*0.5);\n    p *= mat3(cos(t),sin(t),0,-sin(t),cos(t),0,0,0,1);\n    return p;\n}\n\nfloat pattern(vec3 p){\n    p = transform(p);\n    float s = (0.7+scal(iTime)*0.08) / 0.7;\n    p /= s;\n    p /= 1.3;\n    p += 0.5;\n    float d = 0.;\n    float t = iTime;\n    vec3 e = vec3(float(int(t/(4.*3.141592/1.5))));\n    for(int i=0;i<10;i++){\n        if(wait(t) <= i)break;\n        float w = pow(2.,float(i));\n        float f;\n\n        f = rand(vec3(0,0,float(i))+e);\n        if(p.x < f)e.x+=w;\n        else e.x-=w;\n        if(pow(max(0.,1.-abs(p.x-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n\n        f = rand(vec3(1,0,float(i))+e);\n        if(p.y < f)e.y+=w;\n        else e.y-=w;\n        if(pow(max(0.,1.-abs(p.y-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n\n        f = rand(vec3(2,0,float(i))+e);\n        if(p.z < f)e.z+=w;\n        else e.z-=w;\n        if(pow(max(0.,1.-abs(p.z-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n    }\n    return d<1.?0.:1.;\n}\n\nC dist(vec3 p){\n    vec3 d = abs(transform(p)) - vec3(0.7+scal(iTime)*0.08);\n    float u = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n    return C(u-0.01,0);\n}\n\nC dist2(vec3 p){\n    if(pattern(p) > 0.5){\n        return C(1.,1);\n    }else{\n\t    return C(0.,0);\n    }\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0.001,0);\n    return normalize(vec3(\n        dist(p+e.xyy).d - dist(p-e.xyy).d,\n        dist(p+e.yxy).d - dist(p-e.yxy).d,\n        dist(p+e.yyx).d - dist(p-e.yyx).d));\n}\n\nvec3 ground(vec3 v){\n    return vec3(pow(dot(v,vec3(1,0,0)),4.)/8.);\n}\n\nvec3 object(vec3 p,vec3 v,vec3 n){\n    float fac = 0.0;\n    fac += pow(dot(reflect(v,n),vec3(-0.9,-0.5,-0.9)),1.)/8.;\n    fac += pow(dot(reflect(v,n),vec3(-0.5,0.9,0.2)),1.)/4.;\n    return vec3(fac);\n}\n\nvec3 neon(vec3 p,vec3 v,vec3 n){\n    if(n.x > -0.2)return ground(v);\n\telse return vec3(0,0.5-0.5*n.x,1);\n}\n\nvec3 color(vec3 p, vec3 v){\n    float d = 0.001;\n    int maxIter = 100;\n    C c=C(0.,-1);\n    for(int i=0;i<100;i++){\n        C ci=dist(p+d*v);\n        float rd = ci.d;\n        if(abs(rd) < 0.001){\n            maxIter=i;\n            c=ci;\n            break;\n        }\n        d += rd;\n    }\n    if(c.t==-1)return ground(v);\n    c=C(0.,-1);\n    for(int i=0;i<100;i++){\n        C ci=dist2(p+d*v);\n        float rd = ci.d;\n        if(abs(rd) < 0.001){\n            maxIter=i;\n            c=ci;\n            break;\n        }\n        d += 0.0004;\n    }\n    if(c.t==-1)c.t=1;\n    vec3 pos = p+d*v;\n    vec3 n = normal(pos);\n    if(c.t==0)return object(pos,v,n);\n    else return neon(pos,v,n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 R = iResolution.xy, \n\tuv = (2.*fragCoord.xy - R)/R.y;\n    vec3 p=vec3(0,0,0);\n    vec3 v=vec3(1,uv.y,uv.x);\n    v.yz/=3.;\n    v=normalize(v);\n\tfragColor = vec4(color(p,v),1.0);\n    vec3 flColor = texture(iChannel0,fragCoord.xy/R).xyz;\n  \tfragColor.xyz += flColor*0.2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct C{\n    float d;\n    int t;\n};\n    \nfloat rand2(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(vec3 v){\n    return rand2(vec2(v.x+v.z,v.y+v.z));\n}\n\nint wait(float t){\n    float period = 4.*3.141592/1.5;\n    t = mod(t,period);\n    if(t < period/2.){\n        if(t < period/8.)return 0;\n        if(t < period/4.)return 1;\n        return int((t/period-1./4.)*40.)+2;\n    }else{\n        t-=period/2.;\n        if(t < period/8.)return 10;\n        if(t < period/4.)return 9;\n        return 8-int((t/period-1./4.)*40.);\n    }\n    return 0;\n}\n\nfloat scal(float t){\n    float period = 4.*3.141592/1.5;\n    t = mod(t,period);\n    float base = -1000.0;\n    if(t < period/2.){\n        if(t < period/8.)base=-1000.0;\n        else if(t < period/4.)base=period/8.;\n        else if(t<period*(1./4.+9./40.)){\n            int x = int((t/period-1./4.)*40.);\n        \tbase = period*(1./4.+float(x)/40.);\n        }\n    }else{\n        t -= period/2.;\n        if(t < period/8.)base=-1000.0;\n        else if(t < period/4.)base=period/8.;\n        else if(t<period*(1./4.+9./40.)){\n            int x = int((t/period-1./4.)*40.);\n        \tbase = period*(1./4.+float(x)/40.);\n        }\n    }\n    return exp(-(t-base)*10.);\n}\n\nvec3 transform(vec3 p){\n    float t = iTime+sin(iTime*1.5);\n    p -= vec3(4,0,0);\n    p *= mat3(cos(t),0,sin(t),0,1,0,-sin(t),0,cos(t));\n    t *= 1.2;\n    t += sin(iTime*0.5);\n    p *= mat3(cos(t),sin(t),0,-sin(t),cos(t),0,0,0,1);\n    return p;\n}\n\nfloat pattern(vec3 p){\n    p = transform(p);\n    float s = (0.7+scal(iTime)*0.08) / 0.7;\n    p /= s;\n    p /= 1.3;\n    p += 0.5;\n    float d = 0.;\n    float t = iTime;\n    vec3 e = vec3(float(int(t/(4.*3.141592/1.5))));\n    for(int i=0;i<10;i++){\n        if(wait(t) <= i)break;\n        float w = pow(2.,float(i));\n        float f;\n\n        f = rand(vec3(0,0,float(i))+e);\n        if(p.x < f)e.x+=w;\n        else e.x-=w;\n        if(pow(max(0.,1.-abs(p.x-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n\n        f = rand(vec3(1,0,float(i))+e);\n        if(p.y < f)e.y+=w;\n        else e.y-=w;\n        if(pow(max(0.,1.-abs(p.y-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n\n        f = rand(vec3(2,0,float(i))+e);\n        if(p.z < f)e.z+=w;\n        else e.z-=w;\n        if(pow(max(0.,1.-abs(p.z-f)),90.)*1.5 > 0.5+float(i)/20.)d = 1.;\n    }\n    return d<1.?0.:1.;\n}\n\nC dist(vec3 p){\n    vec3 d = abs(transform(p)) - vec3(0.7+scal(iTime)*0.08);\n    float u = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n    return C(u-0.01,0);\n}\n\nC dist2(vec3 p){\n    if(pattern(p) > 0.5){\n        return C(1.,1);\n    }else{\n\t    return C(0.,0);\n    }\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0.001,0);\n    return normalize(vec3(\n        dist(p+e.xyy).d - dist(p-e.xyy).d,\n        dist(p+e.yxy).d - dist(p-e.yxy).d,\n        dist(p+e.yyx).d - dist(p-e.yyx).d));\n}\n\nvec3 ground(vec3 v){\n    return vec3(pow(dot(v,vec3(1,0,0)),4.)/8.);\n}\n\nvec3 object(vec3 p,vec3 v,vec3 n){\n    float fac = 0.0;\n    fac += pow(dot(reflect(v,n),vec3(-0.9,-0.5,-0.9)),1.)/8.;\n    fac += pow(dot(reflect(v,n),vec3(-0.5,0.9,0.2)),1.)/4.;\n    return vec3(fac);\n}\n\nvec3 neon(vec3 p,vec3 v,vec3 n){\n    if(n.x > -0.2)return ground(v);\n\telse return vec3(0,0.5-0.5*n.x,1);\n}\n\nvec3 color(vec3 p, vec3 v){\n    float d = 0.001;\n    int maxIter = 100;\n    C c=C(0.,-1);\n    for(int i=0;i<100;i++){\n        C ci=dist(p+d*v);\n        float rd = ci.d;\n        if(abs(rd) < 0.001){\n            maxIter=i;\n            c=ci;\n            break;\n        }\n        d += rd;\n    }\n    if(c.t==-1)return ground(v);\n    c=C(0.,-1);\n    for(int i=0;i<100;i++){\n        C ci=dist2(p+d*v);\n        float rd = ci.d;\n        if(abs(rd) < 0.001){\n            maxIter=i;\n            c=ci;\n            break;\n        }\n        d += 0.000001;\n    }\n    if(c.t==-1)c.t=1;\n    vec3 pos = p+d*v;\n    vec3 n = normal(pos);\n    if(c.t==0)return object(pos,v,n);\n    else return neon(pos,v,n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 R = iResolution.xy, \n\tuv = (2.*fragCoord.xy - R)/R.y;\n    vec3 p=vec3(0,0,0);\n    vec3 v=vec3(1,uv.y,uv.x);\n    v.yz/=3.;\n    v=normalize(v);\n\tfragColor = vec4(color(p,v),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}