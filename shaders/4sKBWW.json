{
    "Shader": {
        "info": {
            "date": "1528950817",
            "description": "classic demo effect (WIP)",
            "flags": 0,
            "hasliked": 0,
            "id": "4sKBWW",
            "likes": 3,
            "name": "Amiga-style dots",
            "published": 3,
            "tags": [
                "oldskool"
            ],
            "usePreview": 0,
            "username": "sigvec",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926536\n#define NUM_DOTS_IN_RING 64\n#define MAGIC_CONST ((2.0*PI)/float(NUM_DOTS_IN_RING))\n#define DOT_SIZE 0.1\n#define NUM_RINGS 64\n#define RING_SCALE 0.05\n#define EPSILON 0.00001\n#define BASE_SIZE 0.001\n#define SPEED 8.0\n\nfloat circ( vec2 uv, vec2 cPos, float cSize )\n{\n    return 1.0-smoothstep(0.0, cSize, length(uv-cPos))/cSize;\n}\n\nfloat ring( vec2 uv, vec2 rPos, float rSize )\n{\n    //center ourselves about the ring\n    vec2 myPos = uv - rPos;\n    \n    //some polar fun\n    float angle = atan(myPos.y, myPos.x);\n    \n    float c = MAGIC_CONST;\n    float nearestAngle = c*round(angle/c);\n    //return vec3(nearestAngle/(2.0*PI));\n    vec2 nearestDotPos;\n    nearestDotPos.x = cos(nearestAngle)*rSize;\n    nearestDotPos.y = sin(nearestAngle)*rSize;\n\n    float dotSize = DOT_SIZE;\n    return circ(myPos, nearestDotPos, dotSize);\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float col;\n    \n    for(int i = NUM_RINGS+1; i > 0; i--) {\n        float fi = float(i);\n        float scaledTime = SPEED*iTime;\n        float scale = mod(scaledTime, 1.0);\n        float size = (fi+scale)*RING_SCALE+BASE_SIZE;\n        float ringNum = scale+fi;\n        float move = (iTime+ringNum/16.0);\n        col = ring(uv, vec2(cos(move*0.7)*1.5, sin(cos(move)*2.5)*0.5), size);\n        //float col = ring(uv, vec2(0.0), size);\n        if(col > EPSILON) {\n            float colRange = mod((scaledTime-fi), 8.0);\n            col /= 1.0+float(colRange < 4.0);\n            break;\n        }\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(vec3(col), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}