{
    "Shader": {
        "info": {
            "date": "1523279548",
            "description": "I made this for the wild compo revision 2018. You can drag the light around with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdKyDy",
            "likes": 4,
            "name": "Surprise!",
            "published": 3,
            "tags": [
                "raymarching",
                "space",
                "stars",
                "kindersurprise",
                "easteregg"
            ],
            "usePreview": 0,
            "username": "neurom",
            "viewed": 607
        },
        "renderpass": [
            {
                "code": "#define time iTime\n\n#define PI acos(-1.0)\n#define TAU (2.*PI)\n\nvec3 v01 = vec3(0.0, 1.0, 0.1);\n\n// Taken from the book of shaders\nfloat random (vec2 st) {\n    return fract(sin(dot(st,vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nfloat random (float st) { return random(vec2(st)); }\n\nfloat frandom (vec2 st) {\n\tvec2 t = fract(st);\n\tvec2 a = floor(st);\n\tvec2 b =  ceil(st);\n\treturn mix(\n\t\tmix(random(vec2(a.x, a.y)), random(vec2(b.x, a.y)), t.x),\n\t\tmix(random(vec2(a.x, b.y)), random(vec2(b.x, b.y)), t.x),\n\t\tt.y); \n}\n\nfloat sat(float n) { return clamp(n, 0.0, 1.0); }\nvec3 sat(vec3 n) { return clamp(n, v01.xxx, v01.yyy); }\n\nvec2 rotate(inout vec2 p, float a) {\n\tp = p*cos(a) - vec2(p.y, -p.x)*sin(a);\n\treturn p;\n}\n\n\nvec4 egg = vec4(0, 0., 30., 8.);\n\nfloat sphere(vec3 point, vec3 p, float r) {\n\treturn distance(point, p) - r;\n}\n\nfloat vmax(vec3 v) { return max(max(v.x, v.y), v.z); }\nfloat box(vec3 point, vec3 p, vec3 r) {\n\treturn vmax(abs(point - p) - r);\n}\t\n\nfloat rod(vec2 point, vec2 c, float r) {\n\treturn distance(point, c) - r;\n}\n\n\nint mi = 0;\nfloat map(vec3 point) {\n\tvec3 op = point.xyz;\n\tpoint.y += 4.;\n\n\tvec3 p1 = point.xyz;\n\n\tif (p1.y > egg.y) {\n\t\tp1.y /=2.;\n\t}\n\n\tfloat result = sphere(p1, egg.xyz, egg.w);\n\n\tvec3 p2 = point.xyz;\n\tp2 -= egg.xyz;\n\trotate(p2.xz, time/2.);\n\trotate(p2.xy, -TAU/10.);\n\tp2 += egg.xyz;\n\n\n\n\tfloat d = -box(p2, egg.xyz + v01.yxx*10.15*(1.5 + 0.5*sin(time*1.)), vec3(8., 30, 10.));\n\t// d = max(d, -sphere(p1, egg.xyz, egg.w*0.93));\n\t\n\td = max(d, -sphere(p1, egg.xyz, egg.w*0.93));\n    if (d > result) { result = d; mi = 1; }\n\t\n\n\n\tp1 = op.xyz;\n\t\n\tp1.y = p1.y*p1.y/12.;\n\n\td = sphere(p1, egg.xyz, egg.w*.7);\n\td = min(d, max(box(p1, egg.xyz, vec3(10., .25, 10.)), rod(p1.xz, egg.xz, egg.w*.715)));\n\n    if (d < result) { result = d; mi = 2; }\n\n\treturn result;\n}\n\n\nvec3 hsv2rgb(float h, float s, float v) {\n\tvec3 p = sat(abs(fract(vec3(3.0, 2.0, 1.0)/3.0 + h)*6.0 - 3.0) - 1.0);\n\treturn v*mix(p, vec3(1.0), s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.x;\n\n\tvec3 camP = vec3(0), rayD = normalize(vec3(uv, 1.));\n\n\tfloat marched = 0.01, d, far = distance(egg.xyz, camP) + egg.w*2.;\n\tvec3 p;\n\n\tfor (int i = 0; i < 300; ++i) {\n\t\tp = camP + rayD*marched;\n\t\td = map(p);\n\t\tmarched += d;\n\n\t\tif (abs(d) < 0.001 || d > far) break;\n\t}\n\n\n\n\n\tfloat starT = random(uv)*time*2.;\n\tfloat value = 4.*mix(\n\t\tpow(random(uv + floor(starT)), 120.),\n\t\tpow(random(uv +  ceil(starT)), 120.),\n\t\tfract(starT));\n\n\tvalue *= (pow(frandom((uv * 7. + time/8.)) + 0.2, 4.));\n\tvec3 c = hsv2rgb(0.7133, 0.9, value);\n\n\n\tif (marched < far) {\n        vec3 normal = normalize(vec3(\n\t\t\tmap(p + v01.zxx),\n            map(p + v01.xzx),\n            map(p + v01.xxz)\n        ));\n        \n        vec2 m = (2.*iMouse.xy - iResolution.xy) / iResolution.x;\n\n        vec3 lightDir = normalize(vec3(2.*m, -1.));\n\n\n\t\tif (mi == 0) {\n\t\t\tc = vec3(1.0);\n\t\t\tif (p.y + sin(p.x*2. + time*10.) < -3.) {\n\t\t\t\tc.gb *= 0.;\n\t\t\t}\n\n\t\t\tvec3 egg2p = p - egg.xyz;\n\t\t\tfloat u = atan(egg2p.z, egg2p.x) + time/1.5;\n\t\t\tnormal = normalize(normal + 2.*normalize(egg2p)*frandom(vec2(u*79. + p.y*20., random(floor(u*10. + p.y*2.))*4. + u*5. + p.y*2.)));\n            \n\t\t\tc += pow(dot(rayD, reflect(lightDir, normal)) + 0.1, 13.)*.05;\n            \n\t\t\tc *= sat(dot(normal, lightDir));\n            \n\t\t} else if (mi == 1) {\n\t\t\tc = vec3(.3, .2, 0.13);\n\t\t\tc *= dot(normal, lightDir);\n\t\t\t\n\t\t} else if (mi == 2) {\n\t\t\tc = vec3(1., .8, 0.3);\n\t\t\tc += pow(dot(rayD, reflect(lightDir, normal)), 50.)*1.;\n\t\t\tc *= dot(normal, lightDir);\n\t\t\t\n\t\t} else {\n\t\t\tc += 0.5; // This is just so I can see which material indexes I missed\n\t\t}\n\n\t}\n\n\tfragColor = vec4(c, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}