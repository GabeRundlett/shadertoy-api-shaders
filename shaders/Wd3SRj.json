{
    "Shader": {
        "info": {
            "date": "1572304646",
            "description": "Based on iq julia",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3SRj",
            "likes": 11,
            "name": "Shadertober 27 Coat",
            "published": 3,
            "tags": [
                "raymarching",
                "julia",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 27 Coat\n// Poulet vert 29/10/2019\n// thanks so much to iq for julia function (and others)\n\n#define VOLUME 0.001\n#define PI 3.14159\n\n// iq\nvec3 opRep(vec3 p, vec3 c)\n{\n     return mod(p+0.5*c,c)-0.5*c;\n}\n\n// iq\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n// iq\nvec4 qsqr( in vec4 a ) // square a quaterion\n{\n    return vec4( a.x*a.x - a.y*a.y - a.z*a.z - a.w*a.w,\n                 2.0*a.x*a.y,\n                 2.0*a.x*a.z,\n                 2.0*a.x*a.w );\n}\n\n// iq\nvec4 qmul( in vec4 a, in vec4 b)\n{\n    return vec4(\n        a.x * b.x - a.y * b.y - a.z * b.z - a.w * b.w,\n        a.y * b.x + a.x * b.y + a.z * b.w - a.w * b.z, \n        a.z * b.x + a.x * b.z + a.w * b.y - a.y * b.w,\n        a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y );\n\n}\n\n// iq\nvec4 qconj( in vec4 a )\n{\n    return vec4( a.x, -a.yzw );\n}\n\n// iq Julia src : https://www.shadertoy.com/view/MsfGRr\nconst int numIterations = 11;\nfloat julia(vec3 p, vec4 c)\n{\n    vec4 z = vec4(p,0.0);\n    \n    float md2 = 1.0;\n    float mz2 = dot(z,z);\n\n    float n = 1.0;\n    for( int i=0; i<numIterations; i++ )\n    {\n        md2 *= mz2;\n        z = qsqr(z) + c;  \n        mz2 = dot(z,z);\n        if(mz2>4.0) break;\n        n += 1.0;\n    }\n    \n    return 0.1*sqrt(mz2/md2)*exp2(-n)*log(mz2);\n}\n\n\n// Scene setup\nvec2 map(vec3 p)\n{\n    // anim\n    float time = iTime*.15;\n    vec4 c =  vec4(-.5-sin(iTime)*.1,0.2,0.,0.); //http://paulbourke.net/fractals/quatjulia/\n    \n    p = opRep(p, vec3(2.0, 0.0, 0.0));\n    p.y += sin(p.x*5.+iTime)*.3;\n    \n    \n    float j1 = julia(p, c);\n    \n    vec2 scene = vec2(j1, 0.0);\n    \n    return scene; \n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<128 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(float(i)/128., ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    \n    \n    // map stuffs\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t.x);\n    \n    vec3 col = vec3(0.0);\n    vec3 polyCol = palette(t.x+fract(iTime*.5), vec3(.5), vec3(1.0), vec3(1.0), vec3(0.67, 0.33, 0.0));\n    \n    if(t.x == -1.0)\n    {\n        col = vec3(length(uv)*.1);\n    }\n    else\n    {    \n        col = polyCol;\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    float time = iTime * .5;\n    \n    \n    vec3 cp = vec3(2.0-iTime, 2.0, 2.0);\n    vec3 ct = vec3(0.0-iTime, 0.0, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 col = Render(cp, vd, uv);\n    \n    col *= clamp(1.0-length(uv)+.5, 0.0, 1.0);\n    \n    col = sqrt(clamp(col, 0.0, 1.0));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}