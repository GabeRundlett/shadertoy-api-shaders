{
    "Shader": {
        "info": {
            "date": "1569800367",
            "description": "A cool font made using only signed distance functions (SDFs). Uses only sphere, capsule, torus, half-torus and quarter-torus SDFs. The font was mainly inspired by the one on this page:\n\nhttps://mzucker.github.io/2016/08/03/miniray.html",
            "flags": 0,
            "hasliked": 0,
            "id": "tdy3zW",
            "likes": 8,
            "name": "CobaltXII",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "raymarch",
                "flame",
                "fire",
                "gradient",
                "font",
                "lava"
            ],
            "usePreview": 0,
            "username": "CobaltXII",
            "viewed": 866
        },
        "renderpass": [
            {
                "code": "/*\n\n// If you want to easily generate SDFs for any text (a-z, A-Z, 0-9 and spaces only), use this Javascript code.\n\nvar widths = {\n\t\"a\": 4, \"b\": 4, \"c\": 4, \"d\": 4,\n\t\"e\": 4, \"f\": 4, \"g\": 4, \"h\": 4,\n\t\"i\": 0, \"j\": 4, \"k\": 4, \"l\": 0,\n\t\"m\": 8, \"n\": 4, \"o\": 4, \"p\": 4,\n\t\"q\": 4, \"r\": 4, \"s\": 4, \"t\": 4,\n\t\"u\": 4, \"v\": 4, \"w\": 8, \"x\": 4,\n\t\"y\": 4, \"z\": 4, \"A\": 4, \"B\": 4,\n\t\"C\": 4, \"D\": 4, \"E\": 4, \"F\": 4,\n\t\"G\": 4, \"H\": 4, \"I\": 4, \"J\": 4,\n\t\"K\": 4, \"L\": 4, \"M\": 8, \"N\": 4,\n\t\"O\": 4, \"P\": 4, \"Q\": 4, \"R\": 4,\n\t\"S\": 4, \"T\": 4, \"U\": 4, \"V\": 4,\n\t\"W\": 8, \"X\": 4, \"Y\": 4, \"Z\": 4,\n\t\"0\": 4, \"1\": 4, \"2\": 4, \"3\": 4,\n\t\"4\": 4, \"5\": 4, \"6\": 4, \"7\": 4,\n\t\"8\": 4, \"9\": 4\n};\n\nfunction measureText(text) {\n\tvar length = 0;\n\tfor (var i = 0; i < text.length; i++) {\n\t\tif (text[i] == \" \") {\n\t\t\tlength += 3;\n\t\t} else {\n\t\t\tif (text[i] in widths) {\n\t\t\t\tlength += widths[text[i]];\n\t\t\t\tif (i != text.length - 1) {\n\t\t\t\t\tlength += 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Bad character '\" + text[i] + \"' at index \" + i + \" in string \\\"\" + text + \"\\\"\");\n\t\t\t}\n\t\t}\n\t}\n\treturn length;\n}\n\nfunction generateSDF(text) {\n\tvar length = measureText(text);\n\tvar lines = [];\n\tlines.push(\"// SDF of the scene.\");\n\tlines.push(\"float z_offset = float(\" + (length / 2) + \");\");\n\tlines.push(\"float sdf(in vec3 pos) {\");\n\tlines.push(\"\tfloat t = 1000.0;\");\n\tlines.push(\"\tvec3 offset = vec3(\" + (-length / 2) + \", 4, \" + Math.ceil(-length * 0.65) + \");\");\n\tvar x = 0;\n\tfor (var i = 0; i < text.length; i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tx += 3;\n\t\t} else {\n\t\t\tif (text[i] in widths) {\n\t\t\t\tlines.push(\"\tt = min(t, sdf_\" + text[i] + \"(pos, vec3(\" + x + \", 0, 0) + offset));\");\n\t\t\t\tx += widths[text[i]];\n\t\t\t\tif (i != text.length - 1) {\n\t\t\t\t\tx += 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Bad character '\" + text[i] + \"' at index \" + i + \" in string \\\"\" + text + \"\\\"\");\n\t\t\t}\n\t\t}\n\t}\n\tlines.push(\"\treturn t;\");\n\tlines.push(\"}\");\n\treturn lines.join('\\n');\n}\n\n*/\n\n#define THICKNESS 0.5\n\n// **************************************************************** //\n// **************************************************************** //\n// **** PRIMITIVES                                             **** //\n// **************************************************************** //\n// **************************************************************** //\n\n// Constant torus definition.\nconst vec2 torus = vec2(2.0, THICKNESS);\n\n// SDF of a torus.\nfloat sdf_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return length(q) - torus.y;\n}\n\n// SDF of the top half of a torus.\nfloat sdf_half0_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, -pos.y);\n}\n\n// SDF of the bottom half of a torus.\nfloat sdf_half1_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, pos.y);\n}\n\n// SDF of the left half of a torus.\nfloat sdf_half2_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, pos.x);\n}\n\n// SDF of the right half of a torus.\nfloat sdf_half3_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, -pos.x);\n}\n\n// SDF of the top-left quarter of a torus.\nfloat sdf_quarter0_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, max(-pos.y, pos.x));\n}\n\n// SDF of the top-right quarter of a torus.\nfloat sdf_quarter1_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, max(-pos.y, -pos.x));\n}\n\n// SDF of the bottom-left quarter of a torus.\nfloat sdf_quarter2_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, max(pos.y, pos.x));\n}\n\n// SDF of the bottom-right quarter of a torus.\nfloat sdf_quarter3_torus(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    vec2 q = vec2(length(pos.xy) - torus.x, pos.z);\n    return max(length(q) - torus.y, max(pos.y, -pos.x));\n}\n\n// SDF of a capsule.\nfloat sdf_capsule(in vec3 pos, in vec3 a, in vec3 b) {\n    vec3 pa = pos - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba , ba), 0.0, 1.0);\n    return length(pa - ba * h) - THICKNESS;\n}\n\n// SDF of a sphere.\nfloat sdf_sphere(in vec3 pos, in vec3 offset) {\n    return length(pos - offset) - THICKNESS;\n}\n\n// **************************************************************** //\n// **************************************************************** //\n// **** LOWERCASE                                              **** //\n// **************************************************************** //\n// **************************************************************** //\n\n// SDF for the letter A.\nfloat sdf_a(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter B.\nfloat sdf_b(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4, 0), vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the letter C.\nfloat sdf_c(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -4, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the letter D.\nfloat sdf_d(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter E.\nfloat sdf_e(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4.5, 0), vec3(4, -4.5, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4.5, 0), vec3(4, -4, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the letter F.\nfloat sdf_f(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(2, -2, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_quarter0_torus(pos, vec3(4, -2, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4.5, 0), vec3(4, -4.5, 0)));\n    return t;\n}\n\n// SDF for the letter G.\nfloat sdf_g(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_quarter3_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter H.\nfloat sdf_h(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter I.\nfloat sdf_i(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -0.5, 0)));\n    return t;\n}\n\n// SDF for the letter J.\nfloat sdf_j(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -0.5, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -6, 0)));\n    return t;\n}\n\n// SDF for the letter K.\nfloat sdf_k(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -6, 0), vec3(4, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -6, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter L.\nfloat sdf_l(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    return t;\n}\n\n// SDF for the letter M.\nfloat sdf_m(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half0_torus(pos, vec3(6, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(8, -4, 0), vec3(8, -8, 0)));\n    \n    return t;\n}\n\n// SDF for the letter N.\nfloat sdf_n(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter O.\nfloat sdf_o(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4, 0), vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the letter P.\nfloat sdf_p(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(0, -8, 0)));\n    return t;\n}\n\n// SDF for the letter Q.\nfloat sdf_q(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter R.\nfloat sdf_r(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -4, 0)));\n    return t;\n}\n\n// SDF for the letter S.\nfloat sdf_s(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -4, 0)));\n    return t;\n}\n\n// SDF for the letter T.\nfloat sdf_t(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(2, 0, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(4, -2, 0)));\n    return t;\n}\n\n// SDF for the letter U.\nfloat sdf_u(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    return t;\n}\n\n// SDF for the letter V.\nfloat sdf_v(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter W.\nfloat sdf_w(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(6, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(8, -2, 0), vec3(6, -8, 0)));\n    return t;\n}\n\n// SDF for the letter X.\nfloat sdf_x(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(0, -8, 0)));\n    return t;\n}\n\n// SDF for the letter Y.\nfloat sdf_y(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half1_torus(pos, vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -4, 0)));\n    t = min(t, sdf_quarter3_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter Z.\nfloat sdf_z(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(4, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(0, -8, 0)));\n    return t;\n}\n\n// **************************************************************** //\n// **************************************************************** //\n// **** UPPERCASE                                              **** //\n// **************************************************************** //\n// **************************************************************** //\n\n// SDF for the letter A.\nfloat sdf_A(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(4, -4, 0)));\n    return t;\n}\n\n// SDF for the letter B.\nfloat sdf_B(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(2, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_half3_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half3_torus(pos, vec3(2, -6, 0)));\n    return t;\n}\n\n// SDF for the letter C.\nfloat sdf_C(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -2, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the letter D.\nfloat sdf_D(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_quarter1_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_quarter3_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(2, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter E.\nfloat sdf_E(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_quarter0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_quarter2_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(4, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, 0, 0), vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, -8, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter F.\nfloat sdf_F(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_quarter0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(4, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, 0, 0), vec3(4, 0, 0)));\n    return t;\n}\n\n// SDF for the letter G.\nfloat sdf_G(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -4, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, -4, 0), vec3(4, -4, 0)));\n    return t;\n}\n\n// SDF for the letter H.\nfloat sdf_H(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(4, -4, 0)));\n    return t;\n}\n\n// SDF for the letter I.\nfloat sdf_I(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, 0, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter J.\nfloat sdf_J(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -6, 0)));\n    return t;\n}\n\n// SDF for the letter K.\nfloat sdf_K(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(2, -4, 0)));\n    t = min(t, sdf_quarter1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_quarter3_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -6, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter L.\nfloat sdf_L(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_quarter2_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, -8, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter M.\nfloat sdf_M(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half0_torus(pos, vec3(6, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(8, -2, 0), vec3(8, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -8, 0)));\n    return t;\n}\n\n// SDF for the letter N.\nfloat sdf_N(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter O.\nfloat sdf_O(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the letter P.\nfloat sdf_P(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(2, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(2, -4, 0)));\n    t = min(t, sdf_half3_torus(pos, vec3(2, -2, 0)));\n    return t;\n}\n\n// SDF for the letter Q.\nfloat sdf_Q(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, -6, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter R.\nfloat sdf_R(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(2, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(2, -4, 0)));\n    t = min(t, sdf_half3_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_quarter1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -6, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// SDF for the letter S.\nfloat sdf_S(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_quarter2_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_quarter1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -2, 0)));\n    return t;\n}\n\n// SDF for the letter T.\nfloat sdf_T(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, 0, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter U.\nfloat sdf_U(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the letter V.\nfloat sdf_V(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter W.\nfloat sdf_W(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(6, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(8, 0, 0), vec3(8, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -6, 0)));\n    return t;\n}\n\n// SDF for the letter X.\nfloat sdf_X(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(0, -8, 0)));\n    return t;\n}\n\n// SDF for the letter Y.\nfloat sdf_Y(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, -4, 0), vec3(2, -8, 0)));\n    return t;\n}\n\n// SDF for the letter Z.\nfloat sdf_Z(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(0, -8, 0)));\n    return t;\n}\n\n// **************************************************************** //\n// **************************************************************** //\n// **** NUMBERS                                                **** //\n// **************************************************************** //\n// **************************************************************** //\n\n// SDF for the number 0.\nfloat sdf_0(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -2, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -6, 0)));\n    return t;\n}\n\n// SDF for the number 1.\nfloat sdf_1(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, 0, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_quarter0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -2, 0)));\n    return t;\n}\n\n// SDF for the number 2.\nfloat sdf_2(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(4, -2, 0)));\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_sphere(pos, vec3(0, -2, 0)));\n    return t;\n}\n\n// SDF for the number 3.\nfloat sdf_3(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(2, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_half3_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half3_torus(pos, vec3(2, -6, 0)));\n    return t;\n}\n\n// SDF for the number 4.\nfloat sdf_4(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(4, 0, 0), vec3(4, -8, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -2, 0)));\n    t = min(t, sdf_capsule(pos, vec3(2, -4, 0), vec3(4, -4, 0)));\n    t = min(t, sdf_quarter2_torus(pos, vec3(2, -2, 0)));\n    return t;\n}\n\n// SDF for the number 5.\nfloat sdf_5(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(0, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -4, 0), vec3(2, -4, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(2, -8, 0)));\n    t = min(t, sdf_half3_torus(pos, vec3(2, -6, 0)));\n    return t;\n}\n\n// SDF for the number 6.\nfloat sdf_6(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_half0_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_half1_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_half0_torus(pos, vec3(2, -6, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, -2, 0), vec3(0, -6, 0)));\n    t = min(t, sdf_sphere(pos, vec3(4, -2, 0)));\n    return t;\n}\n\n// SDF for the number 7.\nfloat sdf_7(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_capsule(pos, vec3(0, -8, 0), vec3(4, 0, 0)));\n    t = min(t, sdf_capsule(pos, vec3(0, 0, 0), vec3(4, 0, 0)));\n    return t;\n}\n\n// SDF for the number 8.\nfloat sdf_8(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_torus(pos, vec3(2, -2, 0)));\n    t = min(t, sdf_torus(pos, vec3(2, -6, 0)));\n    return t;\n}\n\n// SDF for the number 9.\nfloat sdf_9(in vec3 pos, in vec3 offset) {\n    pos -= offset;\n    float t = 1000.0;\n    t = min(t, sdf_torus(pos, vec3(2, -2, 0)));\n\tt = min(t, sdf_capsule(pos, vec3(4, -2, 0), vec3(4, -8, 0)));\n    return t;\n}\n\n// **************************************************************** //\n// **************************************************************** //\n// **** SCENE                                                  **** //\n// **************************************************************** //\n// **************************************************************** //\n\n// SDF of the scene.\nfloat z_offset = float(24);\nfloat sdf(in vec3 pos) {\n\tfloat t = 1000.0;\n\tvec3 offset = vec3(-24, 4, 0);\n\tt = min(t, sdf_C(pos, vec3(0, 0, 0) + offset));\n\tt = min(t, sdf_o(pos, vec3(6, 0, 0) + offset));\n\tt = min(t, sdf_b(pos, vec3(12, 0, 0) + offset));\n\tt = min(t, sdf_a(pos, vec3(18, 0, 0) + offset));\n\tt = min(t, sdf_l(pos, vec3(24, 0, 0) + offset));\n\tt = min(t, sdf_t(pos, vec3(26, 0, 0) + offset));\n\tt = min(t, sdf_X(pos, vec3(32, 0, 0) + offset));\n\tt = min(t, sdf_I(pos, vec3(38, 0, 0) + offset));\n\tt = min(t, sdf_I(pos, vec3(44, 0, 0) + offset));\n\treturn t;\n}\n\n// Calculate the surface normal of the scene at a certain point.\n// https://iquilezles.org/articles/normalsSDF\nvec3 calc_normal(in vec3 pos) {\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0, -1.0) * 0.5773;\n    return normalize(e.xyy * sdf(pos + e.xyy * ep) + \n                     e.yyx * sdf(pos + e.yyx * ep) + \n                     e.yxy * sdf(pos + e.yxy * ep) + \n                     e.xxx * sdf(pos + e.xxx * ep));\n}\n\n// Calculate soft shadows.\n// https://iquilezles.org/articles/rmshadows\nfloat calc_soft_shadows(in vec3 ro, in vec3 rd, in float tmin, in float tmax, const float k) {\n    float res = 1.0;\n    float t = tmin;\n    for (int i = 0; i < 50; i++) {\n        float h = sdf(ro + rd * t);\n        res = min(res, k * h / t);\n        t += clamp(h, 0.02, 0.20);\n        if (res < 0.005 || t > tmax) {\n            break;\n        }\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\n// Gradient noise function.\n// https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash(in vec3 p) {\n\tp = vec3(dot(p, vec3(127.1, 311.7, 074.7)),\n\t\t\t dot(p, vec3(269.5, 183.3, 246.1)),\n\t\t\t dot(p, vec3(113.5, 271.9, 124.6)));\n\n\treturn -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\n// Gradient noise function.\n// https://www.shadertoy.com/view/Xsl3Dl\nfloat noise(in vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n\t\n\tvec3 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(mix(dot(hash(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0)), \n                       dot(hash(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0)), u.x),\n                   mix(dot(hash(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0)), \n                       dot(hash(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0)), u.x), u.y),\n               mix(mix(dot(hash(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0)), \n                       dot(hash(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0)), u.x),\n                   mix(dot(hash(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0)), \n                       dot(hash(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z);\n}\n\n// Rotation matrices.\nmat3 x_rotate(float a) {\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(a), -sin(a),\n                0.0, sin(a), cos(a));\n}\nmat3 y_rotate(float a) {\n    return mat3(cos(a), 0.0, sin(a),\n                0.0, 1.0, 0.0,\n                -sin(a), 0.0, cos(0.0));\n}\nmat3 z_rotate(float a) {\n    return mat3(cos(a), -sin(a), 0.0,\n                sin(a), cos(a), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n// Anti-aliasing level.\n#define AA 1\n\n// Main shader.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color0 = vec3(0.0, 0.0, 1.0);\n    vec3 color1 = vec3(1.0, 0.0, 0.0);\n    \n    vec3 lig = normalize(vec3(0.0, 4.0, 1.0));\n    \n    vec3 tot = vec3(0.0);\n    \n    // Do multiple samples for anti-aliasing.\n    for (int m = 0; m < AA; m++)\n    for (int n = 0; n < AA; n++) {\n        // Offset pixel coordinate.\n        vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n        vec2 p = (fragCoord / iResolution.xy * 2.0 - 1.0);\n        p.x *= iResolution.x / iResolution.y;\n \n        // Calculate ray parameters.\n        vec3 ro = vec3(p * z_offset * 0.75, 0.0);\n        vec3 rd = vec3(0.0, 0.0, -1.0);\n\n       \t// Maximum ray distance.\n        const float tmax = 10000.0;\n        \n        // Cast ray.\n        float t = 0.0;\n        for (int i = 0; i < 64; i++) {\n            vec3 p = ro + t * rd;\n            float h = sdf(p);\n            if (abs(h) < 0.001) {\n                break;\n            }\n            t += h;\n        }\n\n        // Calculate lighting if the ray hit something.\n        vec3 col = vec3(0.0);\n        if (t < tmax)\n        {\n            vec3 pos = ro + t * rd;\n            vec3 nor = calc_normal(pos); \n            float dif = clamp(dot(nor, lig), 0.0, 1.0);\n            pos.y -= iTime;\n            pos.z += iTime;\n            float n = 1.0000 * noise(pos * 1.0) +\n                      0.5000 * noise(pos * 2.0) +\n                      0.2500 * noise(pos * 4.0) +\n                      0.1250 * noise(pos * 8.0) +\n                      0.0650 * noise(pos * 16.0);\n            n /= 0.5;\n            col = clamp(mix(color0, color1, fragCoord.x / iResolution.x) + vec3(n), vec3(0.0), vec3(1.0)) + dif;\n        } else {\n            vec3 pos = ro / z_offset;\n            pos.z += iTime / 10.0;\n            float n = 1.0000 * noise(pos * 1.0) +\n                      0.5000 * noise(pos * 2.0) +\n                      0.2500 * noise(pos * 4.0) +\n                      0.1250 * noise(pos * 8.0) +\n                      0.0650 * noise(pos * 16.0);\n            col = vec3(pow((n + 1.0) / 2.0, 8.0));\n        }\n        \n        tot += sqrt(col);\n    }\n    \n    tot /= float(AA * AA);\n    \n    const float temp = -20.0 / 255.0;\n    tot.x += temp;\n    tot.z -= temp;\n    fragColor = vec4(tot, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}