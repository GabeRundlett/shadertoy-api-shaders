{
    "Shader": {
        "info": {
            "date": "1600972763",
            "description": " abs(ddx(x)) + abs(ddy(x)).",
            "flags": 0,
            "hasliked": 0,
            "id": "3stcDN",
            "likes": 2,
            "name": "Morphing sphere- Fwidth Edges",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "hazenn",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 1000\n#define MAX_DIST 1000.\n#define SURF_DIST .01\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\nfloat smin( float a, float b)\n{\n\n    return smin(a,b,25.);\n}\n\nstruct RM{\n    float d;\n    int steps;\n};\n\nconst float Dstrt = 3.;\nconst vec3 sc = vec3(0,1,0);\n\n\n\n\n\n\nfloat GetDist(in vec3 p){\n    float d = MAX_DIST;\n    \n    d = min(\n        d,\n        sdSphere( p - sc, 0.5 )\n    );\n\td = d - 0.3*length(smooth_fract(p + iTime, 0.5));\n    float d1 = d;\n    float d2 = sdBox(p-sc,vec3(1.,1.,1.));\n    float t = abs(cos(0.2*iTime));\n    return t*d1 + (1.-t)*d2; //simple lerp between distance fields. \n}\n\n\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(0.1,0);\n    vec3 n = d - vec3(\n    \tGetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    return normalize(n);\n    \n}\n\nRM RayMarch(vec3 ro, vec3 rd){\n    float d0 = 0.;\n    int steps = 0;\n    for(int i=0;i<MAX_STEPS;i++){\n        steps = i;\n        vec3 p = ro + rd*d0;\n        float dS = GetDist(p);\n        d0 += dS;\n        if (d0>MAX_DIST || dS < SURF_DIST) break;\n    }\n\n    return RM(d0,steps);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.yy;\n   \t\n    //rotate around 010\n    float an = 0.5*iTime;\n\tvec3 ro = vec3( 2.5*cos(an), 5.0, 2.5*sin(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( uv.x*uu + uv.y*vv + 1.5*ww );\n    // Raymarch\n    RM rm = RayMarch(ro,rd);\n    float d = rm.d;\n    \n    \n    \n    \n    vec3 col = vec3(0);\n\t\n    col += 0.05*d;\n    //normals\n    col += 0.4 + 0.4*GetNormal(ro+rd*d);\n    // Fake AO\n    col -= 0.05*float(rm.steps);\n    // Fwidth edges\n    col.gbr += 10.*fwidth(rm.d);\n    // Background color\n    if (d > MAX_DIST) col = vec3(0.1,0.1,0.1);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat4 rot(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 linear_transform(vec3 p, mat4 m) {\n    return (m*vec4(p,0)).xyz;\n}\nvec3 affine_transform(vec3 p, mat4 m) {\n    return (m*vec4(p,1)).xyz;\n}\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nvec3 smooth_fract( vec3 p, float k) {\n    vec3 x = fract(p);\n    vec3 t = step(vec3(k,k,k),x);\n    return t * x + (1.-t) * k * smoothstep(1.,0.7,x);\n    \n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}