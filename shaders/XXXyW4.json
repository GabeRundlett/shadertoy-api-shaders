{
    "Shader": {
        "info": {
            "date": "1726148057",
            "description": "After multiple attempts, and asking the community for help, @Peace 's suggestion worked! And now I have a working perlin noise generator.\nThank you!\nI am keeping this public for completeness sake, and to help anyone who may encounter a similar problem.",
            "flags": 0,
            "hasliked": 0,
            "id": "XXXyW4",
            "likes": 0,
            "name": "SOLVED: perlin noise",
            "published": 3,
            "tags": [
                "perlinnoise",
                "help",
                "solved"
            ],
            "usePreview": 0,
            "username": "bananabajanana",
            "viewed": 61
        },
        "renderpass": [
            {
                "code": "#define SCALE 2.\n\n// PROBLEMATIC FUNCTION\n// this way of generating a random value, wasn't uniform\n// and only resulted in positive values, which is what\n// caused the problem.\n//\n// to see the original state of the program, before\n// the solution, comment the lines with \"sol\" and\n// uncomment the lines with \"og\"\nfloat Hash11_PROB(float t) {\n    return fract(sin(t*328.3 + 123.2) * 340.3);\n}\nvec2 Hash2Angle_PROB(vec2 t) {  // sol\n//vec2 Hash2Angle(vec2 t)         // og\n    return normalize(vec2(Hash11_PROB(t.x), Hash11_PROB(t.y)));\n}\n\n// @Peace 's SOLUTION\n// this is an alternative hash function which\n// solves the previous problem\nfloat Hash12(vec2 p) {\n    vec3 p3 = fract(p.xyx * 176.7931);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 Hash2Angle(vec2 t) {         // sol\n//vec2 Hash2Angle_SOLVED(vec2 t)    // og\n    float h = Hash12(t) * 6.2831;\n    return vec2(cos(h), sin(h));\n}\n\nfloat lerp(float t, float x, float y) {\n    return x + t*(y-x);\n}\n\nvec2 fade(vec2 pos) {\n    return ((6.*pos -15.)*pos + 10.)*pos*pos*pos;\n}\n\nfloat perlinNoise(vec2 pos) {\n    float res = 0.;\n\n    vec2 p = pos*SCALE;\n    vec2 cell = floor(p);\n    \n    // offset vectors from corners\n    vec2 bl = p - cell; //bottom left\n    vec2 br = vec2(bl.x - 1., bl.y); // bottom right\n    vec2 ul = vec2(bl.x, bl.y - 1.); // upper left\n    vec2 ur = vec2(bl.x - 1., bl.y - 1.); // upper right\n    \n    // random constant vectors based on the cell corners\n    vec2 vbl = Hash2Angle(cell);\n    vec2 vbr = Hash2Angle(cell + vec2(1., 0.));\n    vec2 vul = Hash2Angle(cell + vec2(0., 1.));\n    vec2 vur = Hash2Angle(cell + vec2(1., 1.));\n    \n    // dot products\n    float dotbl = dot(bl, vbl);\n    float dotbr = dot(br, vbr);\n    float dotul = dot(ul, vul);\n    float dotur = dot(ur, vur);\n    \n    vec2 fadedcoord = fade(bl);\n    \n    return mix(mix(dotbl, dotul, fadedcoord.y), \n               mix(dotbr, dotur, fadedcoord.y),\n               fadedcoord.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    col = vec3(perlinNoise(uv + vec2(iTime, 0.))*.5 + .5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}