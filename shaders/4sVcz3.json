{
    "Shader": {
        "info": {
            "date": "1522788177",
            "description": "Change music in Buffer B - iChannel1\nLeft slider: sensitivity\nRight slider: flux velocity\nFor fast computer: increase spdRange in Buf D",
            "flags": 32,
            "hasliked": 0,
            "id": "4sVcz3",
            "likes": 20,
            "name": "Phot'on stage",
            "published": 3,
            "tags": [
                "ray",
                "grid",
                "flux"
            ],
            "usePreview": 0,
            "username": "ocb",
            "viewed": 1460
        },
        "renderpass": [
            {
                "code": "// Author: ocb\n// Title: Phot'on stage\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U/R;\n    vec3 col =  T1(uv).rgb + T2(uv).rgb;\t// drawing lights and rays\n    vec2 h = T0(vec2(0.)).xy;\t// retrieving sensitivity and speed\n\n    float size = smoothstep(-.15,-.12,-abs(uv.y-.75));\t// drawing sliders\n    float blu = (smoothstep(-.003,0.,-abs(uv.x-.05))\n                +smoothstep(-.003,0.,-abs(uv.x-.08))\n                )*size;\n    \n    col = mix(col,vec3(0.,0.,1.), blu);\n    \n    // drawing slider's level\n    col += vec3(.2,.2,.5)\n           *(.01/length(uv-vec2(.05,h.x))+.01/length(uv-vec2(.08,h.y)));\n    \n    O = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define T0(x) texture(iChannel0,x)\n#define T1(x) texture(iChannel1,x)\n#define T2(x) texture(iChannel2,x)\n#define T3(x) texture(iChannel3,x)\n\nvec2 light(in float t) {return vec2(sin(t*.1)+1.5,cos(t*.07)+1.5);}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Mouse contr√¥le for sensitivity (h.x) and speed (h.y)\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 init = vec2(.75,.75);\n    \n    vec2 uv = U/R;\n    vec2 m = iMouse.xy/R;\n    float start = step(1.,float(iFrame));\n\n    vec2 h = start*(T0(uv).rg-init)+init;\n    \n    float size = step(abs(m.y-.75),.15);\n    h.x += (m.y-h.x)*step(abs(m.x-.05), .01 )*size;\n\th.y += (m.y-h.y)*step(abs(m.x-.08), .01 )*size;\n    \n    O = vec4(h,0.,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// create the lights grid depending on sensitivity\n\nvec2 grid(in vec2 uv, in float x){ uv *= x; return uv - .5*sin(uv);}\nvec2 edge(in vec2 x){ return abs(fract(x)-.5);}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tvec2 uv = U / R;\n    \n    float svty = 2.*T2(vec2(0.)).x-1.; // sensitivity from buff A\n    \n    // get music signal on 2 freq. (15 and 400)\n    float amp = texelFetch(iChannel1,ivec2(15,0),0).x +texelFetch(iChannel1,ivec2(400,0),0).x;\n\n    float t=iTime*.01;\n    \n    // create grid (3 grids intersecting)\n    vec2 a = grid(uv,10.), b = grid(uv,25.), c = grid(uv,50.);\n    // move grid\n    vec2 p = floor(a)/10.+t, q = floor(b)/25.+.7*t, s = floor(c)/50.+1.3*t;\n    \n    // find grid edge to decrease lights on border\n    vec2 bp = ( edge(a) + edge(b) + edge(c) )/1.5;\n    bp*=bp*bp;\n    \n    vec4 tex = .8*T0(p)+.6*T0(q)+.4*T0(s); \n    tex -= .2*(bp.x+bp.y);  // decreasing light\n    tex *= 2.*smoothstep(1.6-svty*amp,1.8,tex.r)*tex;\n\n\tO = tex;\n} \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// create light rays\nfloat H2 (in vec2 st) { \t\t\t\t\t\t\n    return fract(sin(dot(st,vec2(12.9898,8.233))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tvec2 uv = U/R;\n\tvec3 col = vec3(0.);\n    vec2 light = light(iTime);\n    vec2  d = (.3*light-uv)/32.;\n    float w = .05;\n    vec2  s = uv+d;\n    for( int i=0; i<32; i++ )\n    {\n        col += w*T0(s).rgb;\n        w *= .7;\n        s += d;\n    }\n    \n\tO = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Propagate lights ray\n\n// Increase speed range to slow down more the flux\n// for fast computer.\n#define SpdRange 40.\n\n// Hash function is used for dithering\n// to avoid banding\nfloat H2 (in vec2 st) { \t\t\t\t\t\t\n    return fract(sin(dot(st,vec2(12.9898,8.233))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tvec2 uv = U/R;\n\tvec3  col = T0(uv).rgb;\n    vec2 light = light(iTime);\n    float spd = (.95-T2(vec2(0.)).y)*SpdRange;\n    vec2  d = (.3*light-uv)/spd;\n    float w = .98;\n    vec2  s = uv+d*H2(uv*iTime);\n    \n    col += w*T1(s).rgb;\n    \n\tO = vec4( col, 1.0 );\n} \n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}