{
    "Shader": {
        "info": {
            "date": "1727106315",
            "description": "originals  https://www.shadertoy.com/view/MdXSzS and gaz fractals",
            "flags": 0,
            "hasliked": 0,
            "id": "l3jyRw",
            "likes": 7,
            "name": "cosmic tunnel 2",
            "published": 3,
            "tags": [
                "tunnel",
                "star",
                "cosmos"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\nvec2 f(vec2 x, vec2 c) {\n    return mat2(x,-x.y,x.x)*x + c;\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 pcg3d(vec3 p){\n    uvec3 q = floatBitsToUint(p)*1234567890u+123456789u;\n    q.x +=q.y*q.z; q.y +=q.x*q.z; q.z+=q.x*q.y;\n    q^=q>>16u;\n    q.x +=q.y*q.z; q.y +=q.x*q.z; q.z+=q.x*q.y;\n    return vec3(q)/float(-1U);\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n   \n   \n     vec2 uv = C/iResolution.xy-0.5;\n   \nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n\nfloat v1, v2, v3;\nv1 = v2 = v3 = 0.0;\n\nfloat s = 0.0;\nfor (int i = 0; i < 90; i++)\n{\nvec3 p = s * vec3(uv, 0.0);\np.xy *= ma;\np += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\nfor (int i = 0; i < 8; i++) p = abs(p) / dot(p,p) - 0.659;\nv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\nv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\nv3 += length(p.xy*10.) * .0003;\ns  += .035;\n}\n\nfloat len = length(uv);\nv1 *= smoothstep(.7, .0, len);\nv2 *= smoothstep(.5, .0, len);\nv3 *= smoothstep(.9, .0, len);\n\nvec3 col2 = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n(v1 + v3) * .3,\nv2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n    vec4 col = vec4(1.0);\n    float time = iTime;\n   \n    int u_maxIterations = 75;\n   \n    float r = 0.7885*(sin((time/3.) - 1.57)*0.2+0.85);\nvec2 c = vec2(r*cos((time/3.)), r*sin((time/3.)));\n    c*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n   \n    vec2 z = vec2(0.);\n    z.x = 3.0 * (uv.x - 0.5);\n    z.y = 2.0 * (uv.y - 0.5);\n    bool escaped = false;\n    int iterations;\n    for (int i = 0; i < 10000; i++) {\n        if (i > u_maxIterations) break;\n        iterations = i;\n        z = f(z, c);\n        if (dot(z,z) > 4.0) {\n            escaped = true;\n            break;\n        }\n    }\n\n    vec3 iterationCol = vec3(palette(float(iterations)/ float(u_maxIterations),\n                                     vec3(0.5),\n                                     vec3(0.5),\n                                     vec3(1.0, 1.0, 0.0),\n                                     vec3(0.3 + 0.3 * sin(time),\n                                          0.2 + 0.2 * sin(1. + time),\n                                          1.2  + 1.2 * sin(1.5 + time))));\n\nvec3 coreCol = vec3(0.);\n\n    vec3 p,r2=iResolution,\n    d=normalize(vec3((C-.5*r2.xy)/r2.y,1));  \n    for(float i=0.,g=0.,e,s;\n        ++i<99.;\n        O.xyz+=5e-5*abs(cos(vec3(3,2,1)+log(s*9.)))*2./dot(p,p)/e\n    )\n    {\n        p=g*d;\n          float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n    p.xy*=ma;\n          vec3 rnd = pcg3d(vec3(i));\n   \n   \n       \n      p.z+=(iTime);\n      p+=rnd*0.2;\n        p=R(p,normalize(vec3(1,2,3)),.0);  \n        s=2.5;\n        p=abs(mod(p-1.,2.)-1.)-1.;\n        for(int j=0;j++<10;)\n       \n            p=1.-abs(p-1.),\n            s*=e=-1.8/dot(p,p),\n            p=p*e-.7;\n            g+=e=abs(p.z)/s+.001;          \n     }\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n   O*= vec4(happy_star(uv, anim) * vec3(0.35,0.3,0.55)*2.+col2, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}