{
    "Shader": {
        "info": {
            "date": "1706023877",
            "description": "Logo for company snaptrude",
            "flags": 0,
            "hasliked": 0,
            "id": "MfSSzh",
            "likes": 0,
            "name": "Snaptrude Screensaver",
            "published": 3,
            "tags": [
                "logo"
            ],
            "usePreview": 0,
            "username": "FireBlaze236",
            "viewed": 37
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat sdCircle(in vec2 uv, float r) {\n\n    return length(uv) - r;\n}\n\nvec2 shearY(in vec2 v, float amt) {\n    mat2 sx= mat2(1.0 ,0.0, amt, 1.0);\n    return v * sx;\n}\n\nvec2 rot2d(in vec2 v, float angle) {\n    float cs = cos(angle * PI / 180.0);\n    float sn = sin(angle * PI / 180.0);\n    \n    return v * mat2(cs, -sn, sn, cs);\n}\n\n\nfloat sdLogo(vec2 uv) {\n    float ox = 0.08 + (0.01 * sin(1.43 * iTime));\n    float oy = 0.18 + (0.01 * cos(1.5 * iTime));;\n    \n    float logox = 0.13;\n    float logoy = 0.15;\n    float innerCornerRound = 0.13;\n    float outerCornerRound = -0.01;\n    \n    vec2 uv_top = uv - vec2(-ox, oy);\n    uv_top = shearY(uv_top, -0.33);\n    \n    vec2 uv_bot = uv - vec2(ox, -oy);\n    uv_bot = rot2d(uv_bot, 180.0);\n    uv_bot = shearY(uv_bot, -0.33);\n\n    \n    \n    float dtop = sdRoundedBox(uv_top, vec2(logox, logoy), vec4(-0.1, -0.1, outerCornerRound, -0.1));\n    float dtop_cut = sdRoundedBox(uv_top-vec2(0.18, -0.18), vec2(0.31, 0.31), vec4(-0.1, -0.1, innerCornerRound, -0.1));\n    \n\n    float dbot = sdRoundedBox(uv_bot, vec2(logox, logoy), vec4(-0.1, -0.1, -0.01, -0.1));\n    float dbot_cut = sdRoundedBox(uv_bot-vec2(0.18, -0.18), vec2(0.31, 0.31), vec4(-0.1, -0.1, innerCornerRound, -0.1));\n\n\n    float ddtop = max(dtop, -dtop_cut);\n    float ddbot = max(dbot, -dbot_cut);\n    \n    return min(ddtop,ddbot);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspect = iResolution.x / iResolution.y;\n    uv *= 2.0;\n    uv -= 1.0;\n    uv.y /= aspect;\n\n    float logo = sdLogo(uv);\n    vec3 col = vec3(0.0);\n    float lc = smoothstep(0.11, 0.1 , logo);\n    \n    float t = iTime * 0.5;\n   \n    vec3 lcol = mix(vec3(lc) * 0.05, vec3(lc), cos(t) + 1.0);\n    \n\n    col = vec3(lcol);\n    // SDF VISUALIZE\n    /*\n    col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.01,0.02,abs(d)) );*/\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}