{
    "Shader": {
        "info": {
            "date": "1566874108",
            "description": "Trying to make my 2d creature generator 3d ( https://www.shadertoy.com/view/tlBSzd ) \nbut my video card is not allowing me to continue :p so here it is in an unfinished state :p",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSSDG",
            "likes": 4,
            "name": "Procedural Creatures 3d",
            "published": 3,
            "tags": [
                "procedural",
                "sdf",
                "creature"
            ],
            "usePreview": 0,
            "username": "thiagoborn",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "// TODO\n// fresnel\n// clouds\n// occlusion\n// reflections \n\nstruct hit {\n    float d;\n    int m;\n};\nfloat sdSphere(vec3 pos,float radius){\n    return length(pos)-radius;\n}\nfloat terrain(vec2 pos){\n   return sin(pos.x*1.4)*0.1+sin(pos.x*0.93)*.3 +\n    sin(pos.y*2.3)*0.1+sin(pos.y*1.45)*0.2;\n}\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n  return mix(a, b, h) - k*h*(1.0-h);\n}\nfloat smoothMerge(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0-h);\n}\n\nfloat rand(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat srand(float n) {\n    return rand(n)*2.-1.;\n}\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nmat4 translate(float x, float y, float z){\n    return mat4(\n        vec4(1.0, 0.0, 0.0, 0.0),\n        vec4(0.0, 1.0, 0.0, 0.0),\n        vec4(0.0, 0.0, 1.0, 0.0),\n        vec4(x,   y,   z,   1.0)\n    );\n}\n\nmat4 RotateX(float phi){\n    return mat4(\n        vec4(1.,0.,0.,0),\n        vec4(0.,cos(phi),-sin(phi),0.),\n        vec4(0.,sin(phi),cos(phi),0.),\n        vec4(0.,0.,0.,1.));\n}\n\nmat4 RotateY(float theta){\n    return mat4(\n        vec4(cos(theta),0.,-sin(theta),0),\n        vec4(0.,1.,0.,0.),\n        vec4(sin(theta),0.,cos(theta),0.),\n        vec4(0.,0.,0.,1.));\n}\n\nmat4 RotateZ(float psi){\n    return mat4(\n        vec4(cos(psi),-sin(psi),0.,0),\n        vec4(sin(psi),cos(psi),0.,0.),\n        vec4(0.,0.,1.,0.),\n        vec4(0.,0.,0.,1.));\n}\n\nhit map(vec3 pos){\n    hit h;\n    h.m = 1;\n    \n    float d = 10000000.;\n    float i = float(int(iTime/10.)+124);\n    i = rand(i);\n   \n\n    for(int b=0;b<3;b++){\n         mat4 m = mat4(\n        vec4(1.,0.,0.,0.),\n        vec4(0.,1.,0.,0.),\n        vec4(0.,0.,1.,0.),\n        vec4(0.,0.,0.,1.)\n    );\n        //m = translate(.0,-1.,.0)*m;\n\t    for(int x=0;x<15;x++){\n            vec3 rot = vec3(\n             srand(i++)*3.1415,\n             srand(i++)*3.1415,\n             srand(i++)*3.1415);\n            float s = (.5+.5*rand(i++))*.14;\n           \n            /*\n            a += smoothstep(-.4,.4,sin(iTime*1.5))* srand(i++)*.2;\n            a += sin(iTime*3.0)* srand(i++)*.05;\n            a += sin(iTime*1.0)* srand(i++)*.04;\n            a += smoothstep(.5,1.,sin(iTime*6.))* srand(i++)*.01;\n            */\n            m = RotateY(rot.y)*m;\n            m = RotateZ(rot.z)*m;\n            m = RotateX(rot.x)*m;\n            m = translate(.0,-s,.0)*m;\n            //m = m*RotateX(1.5);\n\t\t\t\n            float bs = 0.04+rand(i++)*0.02;\n            float ls = 0.02+rand(i++)*0.03;\n            float ma = rand(i++);\n            \n             for(int k=0;k<2;k++){\n                 vec3 pp = k==0?pos:pos*vec3(-1.,1.,1.);\n                vec4 p2 = m*vec4(pp,1.);\n                 \n                //vec4 p2 = vec4(pos,1.);\n                d = smoothMerge(d,sdCappedCylinder(p2.xyz,ls,s),.08);\n               // d = min(d,sdCappedCylinder(p2.xyz,ls,s));\n                  mat4 m2 = translate(.0,-s,.0)*m;\n                 p2 = m2*vec4(pp,1.);\n                d = smoothMerge(d,sdSphere(p2.xyz,bs),.08);\n             }\n             m = translate(.0,-s,.0)*m;\n            \n        }\n    }\n    h.d=d;\n    \n     float f = pos.y+0.0;\n    if(f<h.d){\n       // h.d=f;\n//        h.m=2;\n    }\n    return h;\n}\n    \nhit castRay(vec3 ro ,vec3 rd ){\n   \tint s = 0;\n    float d = 0.0;\n    while(s < 30 && d < 10.0){\n        vec3 p = ro + rd * d;\n        hit h = map(p);\n        float od = abs(h.d);\n        if(od<0.004){\n            h.d = d;\n          \treturn h;\n        }\n        d+=od;\n        s++;\n    }\n    hit h;\n    h.d = d;\n    return h;\n}\nvec3 pixel(vec2 uv){\n    float an = iTime*.5 + .3 + iMouse.x/iResolution.x*3.1415*2.;\n    vec3 ro = vec3(2.*sin(an),0.4,2.*cos(an));\n    //vec3 ta = vec3(iTime,.0,.0);   \n    //vec3 ro = vec3(0.,0.,2.);\n    vec3 ta = vec3(0.,.0,.0);   \n    \n    vec3 fo = normalize(ta-ro);\n    vec3 ri = normalize(cross(fo,vec3(0.0,1.0,0.0)));\n    vec3 up = normalize(cross(ri,fo));\n    \n    vec3 rd = normalize(uv.x*ri + uv.y*up + 1.5*fo);\n    vec3 alb = vec3(.0);\n    hit h = castRay(ro,rd);\n    if(h.m==0) return vec3(0.);\n    return vec3(1./h.d); // dist\n   \n}\n\n\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    //if(iMouse.z<=.0)return;\n    \n    float pix = 1./iResolution.y;\n    vec2 uv = ((i)*2.0-iResolution.xy)/iResolution.y;\n\n    vec2 e = vec2(pix/2.+pix*.2,0.);\n    \n    vec3 c = pixel(uv+e.xy);   \n   // c+=pixel(uv-e.xy);\n   // c+=pixel(uv-e.yx);\n   // c+=pixel(uv-e.yx);\n    //c/=4.0;\n\to = vec4(c,1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}