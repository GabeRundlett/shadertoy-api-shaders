{
    "Shader": {
        "info": {
            "date": "1714785162",
            "description": "This is a demonstration of a sine, square, saw, and triangle wave.",
            "flags": 8,
            "hasliked": 0,
            "id": "XcySR1",
            "likes": 1,
            "name": "Sound: Oscillator Types",
            "published": 3,
            "tags": [
                "sound",
                "wave",
                "triangle",
                "square",
                "saw"
            ],
            "usePreview": 0,
            "username": "taylormatson",
            "viewed": 127
        },
        "renderpass": [
            {
                "code": "// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926535\n#define TAU 6.2831853071\n\n// Check the common tab to see the functions for saw and square waves\n\nvec2 mainSound( int samp, float time )\n{\n    \n    // Unused variables for future use\n    \n    float Fs = iSampleRate; // short hand for sample rate\n    \n    float Ts = 1./iSampleRate; // time elapsed per sample\n    \n    // Variables\n    \n    float freq = 100.; // frequency of the wave\n    \n    vec2 stereo_amp = vec2(.1); // amplitude control\n    \n    float duty = 50.; // [ 0 - 100 ] - The duty cycle of a square wave\n    \n    float width = .5; // The duty cycle of the sawtooth, .5 being a triangle wave\n    \n    float phi = 0.; // phase offset\n    \n    // Equation of wave\n    \n    float linearFunction = TAU*freq*time+phi;\n    \n    // LFO - fun to modulate the width of the saw or duty of the square\n    \n    // float lfo_freq = .5; // [0 - 50]\n    \n    // float LFO = square(TAU*lfo_freq*time+phi, 50.);\n    \n    // duty = duty*((LFO+1.)/2.);\n    \n    // Wave Types\n    \n    vec2 sineWave = vec2(sin(linearFunction)); // stereo sine wave\n    \n    vec2 squareWave = vec2(square(linearFunction, duty)); // stereo square wave\n    \n    vec2 simpleSaw = vec2(saw1(linearFunction)); // stereo simple saw wave\n    \n    vec2 sawWave = vec2(saw2(linearFunction, width)); // stereo advanced saw wave\n    \n    vec2 triangleWave = vec2(saw2(linearFunction, .5)); // stereo triangle wave\n    \n    // Pick your wave + combine the signals or don't\n    vec2 stereo_out = sawWave*stereo_amp;\n    \n    return stereo_out;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define PI 3.1415926535\n#define TAU 6.2831853071\n\nfloat square(float f, float duty) { // Function to generate a square wave\n\n    // Compute values of f normalized to (0, 2 * PI) based on frequency\n    float tmp = mod(f, TAU);\n\n    // Compute normalized frequency for breaking up the interval (0, 2 * PI)\n    float w0 = TAU * duty / 100.0;\n\n    // Assign 1 values to normalized t between (0, w0), 0 elsewhere\n    bool nodd = (tmp < w0);\n\n    // The actual square wave computation\n    float signal = 2.0 * float(nodd) - 1.0;\n\n    return signal;\n}\n\nfloat saw1(float f) { // no width control but sounds good\n    return (2.*atan(tan(f)/2.));\n}\n\nfloat saw2(float t, float width) { // sounds good from width .03 to .97\n    float rt = mod(t, 2.0 * 3.14159265) / (2.0 * 3.14159265);\n    float y = 0.0;\n    float c1 = (width > 0.0 && width < 1.0) ? 2.0 / width : 2.0;\n    float c2 = (width > 0.0 && width < 1.0) ? 2.0 / (1.0 - width) : 2.0;\n\n    if (rt != 0.0) {\n        if ((rt > 0.0 && rt > width) || (rt < 0.0 && rt < width - 1.0)) {\n            y = (-float(t < 0.0) - rt + 1.0 - 0.5 * (1.0 - width)) * c2;\n        } else {\n            y = (float(t < 0.0) + rt - 0.5 * width) * c1;\n        }\n    } else {\n        y = (width > 0.0) ? (rt - 0.5 * width) * c1 : 1.0;\n    }\n\n    return y;\n}\n\nfloat saw3(float t, float width) { // lots of pops and clicks\n    float twoPi = 2.0 * 3.14159265;\n    float rt = mod(t, twoPi) * (1.0 / twoPi);\n    float y = 0.0;\n\n    float c1, c2;\n    if (width > 0.0 && width < 1.0) {\n        c1 = 2.0 / width;\n        c2 = 2.0 / (1.0 - width);\n    } else {\n        c1 = 2.0;\n        c2 = 2.0;\n    }\n\n    if (rt > 0.0) {\n        if (rt > width) {\n            y = (-float(t < 0.0) - rt + 1.0 - 0.5 * (1.0 - width)) * c2;\n        } else {\n            y = (float(t < 0.0) + rt - 0.5 * width) * c1;\n        }\n    } else if (rt < 0.0) {\n        if (rt < width - 1.0) {\n            y = (float(t < 0.0) + rt - 0.5 * width) * c1;\n        } else {\n            y = (-float(t < 0.0) - rt + 1.0 - 0.5 * (1.0 - width)) * c2;\n        }\n    } else if (width > 0.0) {\n        y = (rt - 0.5 * width) * c1;\n    } else {\n        y = 1.0;\n    }\n\n    return y;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}