{
    "Shader": {
        "info": {
            "date": "1566250376",
            "description": "lLIGHTS LIGHTS LIGHTS \n\nsorry for messy code\n\nINPut : WASD - movement, E & Q - up and down, mouse - look around",
            "flags": 48,
            "hasliked": 0,
            "id": "ttSXDD",
            "likes": 0,
            "name": "multiple lights test",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "lighting",
                "light"
            ],
            "usePreview": 0,
            "username": "dagbrynildsentholander",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159265359;\n\nstruct light\n{\n    vec3 lightCol;\n    vec3 lightPos;\n};\n\nlight[3] lights = light[3](\n\tlight(vec3(.9, .6, .1)*2., vec3(15., 15., -10.)),\n    light(vec3(.6, .6, 1)*1.5, vec3(-10., 5., -2.)),\n    light(vec3(.5, .8, .5)*1.5, vec3(+10., 8., 10.))\n);\n\nvoid Rx(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(1, 0, 0),\n            \t\tvec3(0, cos(theta), -sin(theta)),\n            \t\tvec3(0, sin(theta), cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Ry(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), 0, sin(theta)),\n            \t\tvec3(0, 1, 0),\n            \t\tvec3(-sin(theta), 0, cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Rz(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), -sin(theta), 0),\n            \t\tvec3(sin(theta), cos(theta), 0),\n            \t\tvec3(0, 0, 1)\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nfloat ground(vec3 p, vec4 n)\n{\n    return dot(p,n.xyz) + normalize(n).w;\n}\n\nfloat sphere( vec3 p, vec3 center, float r )\n{\n  return length(p-center)-r;\n}\n\nfloat box( vec3 p, vec3 center, vec3 size )\n{\n  vec3 d = abs(p-center) - size;\n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat scene(vec3 p)\n{\n    return min(min(min(sphere(p, vec3(0, 0, 0), 1.), sphere(p, vec3(2, 0, 0), 1.)), box(p, vec3(-2, 0, 0), vec3(1, 1, 1))), ground(p, vec4(0., 1., 0., 1.1)));\n}\n\nvec3 normal(vec3 p)\n{\n    float e = 0.0001;\n    vec3 normal = vec3(0);\n    normal.x = scene(p+vec3(e, 0, 0)) - scene(p-vec3(e, 0, 0));\n    normal.y = scene(p+vec3(0, e, 0)) - scene(p-vec3(0, e, 0));\n    normal.z = scene(p+vec3(0, 0, e)) - scene(p-vec3(0, 0, e));\n    return -normalize(normal);\n}\n\nfloat shadowr( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = scene(ro + rd*t);\n        if( h<0.005 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvec2 ray(vec3 ro, vec3 rd, float mint, float maxt) \n{\n    int i = 0;\n    for(float t=mint; t<maxt;)\n    {\n        float distToScene = scene(ro+rd*t);\n        if(distToScene<0.005)\n            return vec2(t, i);\n        t += distToScene;\n        i++;\n    }\n    return vec2(0, 0);\n}\n\nvec3 lighting(vec3 p, vec3 rd, vec3 n)\n{\n    vec3 result = vec3(0);\n    vec3 ambLight = vec3(0.);\n    float specularStrength = 1.;\n    for(int i = 0; i < lights.length(); i++)\n    {    \n        light l = lights[i];\n        l.lightPos = vec3(sin(iTime+float(i)*500.)*(5.+float(i)*2.), sin(iTime)+5., cos(iTime+float(i)*250.)*8.);\n    \tvec3 lightDir = normalize(p-l.lightPos);\n\n    \t// specular\n    \tvec3 viewDir = rd;\n\t\tvec3 reflectDir = reflect(-lightDir, n);\n    \tfloat spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.);\n\t\tvec3 specular = specularStrength * spec * l.lightCol;  \n    \t// diffuse\n    \tfloat diff = max(dot(n, normalize(lightDir)), 0.0);\n    \tvec3 diffuse = diff*l.lightCol;\n    \t// shadow\n    \tfloat shadow = shadowr(p-n*.04, -lightDir, 0., 50., 16.);\n        result += (ambLight+diffuse*shadow)+specular*shadow;\n        result/=float(lights.length());\n    }\n    return result;\n}\n\nvec3 drawSky(vec3 ro, vec3 rd)\n{\n    return vec3(.4-(rd.y), .3-(rd.y), .4-(rd.y));\n}\n\nvec3 drawLightHalo(vec3 ro, vec3 rd)\n{\n    vec3 result = vec3(0);\n    for(int i = 0; i < lights.length(); i++)\n    {    \n        light l = lights[i];\n        l.lightPos = vec3(sin(iTime+float(i)*500.)*(5.+float(i)*2.), sin(iTime)+5., cos(iTime+float(i)*250.)*8.);\n        vec3 lightDir = normalize(ro-l.lightPos);\n        result += l.lightCol*pow(max(dot(rd, -normalize(lightDir)),0.), 128.);\n    }\n    return result;\n}\n\nvec3 doFog(vec3 rgb, vec3 ro, vec3 rd, float dist)\n{\n    return mix(rgb, drawSky(ro, rd)+drawLightHalo(ro, rd), dist/100.);//+drawLightHalo(ro, rd);\n}\n\nvec3 finalColor(vec3 ro, vec3 rd, vec2 rayResult, vec3 n)\n{\n    vec3 col = lighting(ro+rd*rayResult.x, rd, n);\n    return doFog(col, ro, rd, rayResult.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord -  iResolution.xy*.5)/iResolution.y;\n\n    // Camera setup\n    vec3 camRight = vec3(1, 0, 0);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camForward = vec3(0, 0, 1);\n    \n    // Camera rotation\n    vec3 camRot = texture( iChannel0, iResolution.xy).xyz;\n    Rx(camRight, camUp, camForward, camRot.x);\n    Ry(camRight, camUp, camForward, camRot.y);\n    Rz(camRight, camUp, camForward, camRot.z);\n    \n    // Camera movement\n    vec3 ro=texture( iChannel0, vec2(0)).xyz+vec3(0, 1., -5);\n    \n    // Ray\n    vec3 rd = normalize(camForward+(camRight*1.5*uv.x)+(camUp*1.5*uv.y));\n    vec2 rayResult = ray(ro, rd, .1, 100.);\n    vec3 p = ro+rayResult.x*rd;\n    vec3 n = normal(p);\n\n    // reflection\n    vec3 reflRd = reflect(rd, n);\n    vec2 reflectionResult = ray(p, reflRd, .1, 100.);\n    vec3 reflp = p+reflectionResult.x*reflRd; \n    vec3 reflection = finalColor(p, reflRd, reflectionResult, normal(reflp));\n\t\n    // Output to screen\n    if(rayResult==vec2(0))\n        fragColor = vec4(doFog(vec3(0), ro, rd, 100.), 1.);\n    else\n    {\n    \tvec3 col = mix(finalColor(ro, rd, rayResult, n), reflection, 1.-(dot(rd, n)+1.)/2.);\n    \t//fragColor = vec4(col,1.0);\n    \tfragColor = vec4(doFog(col, ro, rd, rayResult.x),1.0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat pi = 3.14159265359;\nvec2 lastNormMouse = vec2(0);\n//Key input taken from \"WASD movement\" by TekF (https://www.shadertoy.com/view/ldyGzW) \nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn textureLod( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\n\n\nvoid Rx(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(1, 0, 0),\n            \t\tvec3(0, cos(theta), -sin(theta)),\n            \t\tvec3(0, sin(theta), cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Ry(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), 0, sin(theta)),\n            \t\tvec3(0, 1, 0),\n            \t\tvec3(-sin(theta), 0, cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Rz(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), -sin(theta), 0),\n            \t\tvec3(sin(theta), cos(theta), 0),\n            \t\tvec3(0, 0, 1)\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    // Normalized mouse coordinates (from 0 to 1)\n    vec2 normMouse = vec2(iMouse.xy/iResolution.xy-.5);\n    \n    // Camera setup\n    vec3 camRight = vec3(1, 0, 0);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camForward = vec3(0, 0, 1);\n    \n    // Camera rotation\n    //vec3 camRot = vec3(-normMouse.y*360., normMouse.x*360.+180., 0)/180.*pi;\n    vec3 camRot = texture(iChannel0, iResolution.xy).xyz;\n    if(iMouse.z>0.)\n    \tcamRot += vec3(-normMouse.y*iTimeDelta*180., normMouse.x*iTimeDelta*180., 0)/180.*pi;\n    Rx(camRight, camUp, camForward, camRot.x);\n    Ry(camRight, camUp, camForward, camRot.y);\n    Rz(camRight, camUp, camForward, camRot.z);\n    \n    // Camera movement\n    vec3 ro=texture( iChannel0, vec2(0.0)).xyz;\n    ro+=(ReadKey(Key_W)-ReadKey(Key_S))*camForward*iTimeDelta*3.;\n    ro+=(ReadKey(Key_D)-ReadKey(Key_A))*camRight*iTimeDelta*2.;\n    ro+=(ReadKey(Key_E)-ReadKey(Key_Q))*camUp*iTimeDelta*2.;\n    \n    if(uv.x<=.5)\n    {\n    \tfragColor = vec4(ro.xyz, 1.0);  \n    }\n    else\n    {\n    \tfragColor = vec4(camRot.xyz, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}