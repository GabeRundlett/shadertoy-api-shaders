{
    "Shader": {
        "info": {
            "date": "1719447729",
            "description": "Testing a better way of shading the scene. Change the #if 0 to #if 1 on line 64 to change from true reflections to skybox reflections",
            "flags": 0,
            "hasliked": 0,
            "id": "XX3XWS",
            "likes": 3,
            "name": "Raymarching realistic lighting",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "fractal",
                "test",
                "lighting",
                "fractals",
                "reflections",
                "good",
                "mengersponge",
                "betterlighting"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n\n#define MIN_DIST 0.001\n#define MAX_BOUNCES 50\n#define SC 1.0\n\n#define MAX_ITERATIONS 1000\n\n#define SUN_DIR normalize(vec3(3.,5.,2.))\n#define SHADOW_DARKNESS 0.8\n\n#define SAMPLES 1\n\nmarchObj scene(vec3 ro) {\n    marchObj scene;\n    \n    vec3 ro2 = ro-vec3(-2.,0.,0.);\n    float scale = mengerSponge(ro2, 3);\n\n    marchObj fractal;\n    fractal.dist = sdfBox(ro2, vec3(1.5), 0.6)/scale;\n    fractal.col = vec3(0.859,0.761,0.824);\n    fractal.metallic = 1.;\n    fractal.smoothness = .8;\n    \n    marchObj sphere;\n    sphere.dist = sdfSphere(ro-vec3(2.,0.,0.), 1.);\n    sphere.col = vec3(1.,0.,.4);\n    sphere.metallic = 0.;\n    sphere.smoothness = .9;\n    \n    marchObj plane;\n    plane.dist = ro.y+2.;\n    plane.col = vec3(0.471,0.639,0.769);\n    plane.metallic = 1.;\n    plane.smoothness = .9;\n    \n    scene = objmin(sphere,fractal, 0.);\n    scene = objmin(scene, plane, 0.);\n    \n    return scene;\n}\nvec3 sdfNormal(vec3 ro) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*scene(ro + k.xyy*h).dist + \n                      k.yyx*scene(ro + k.yyx*h).dist + \n                      k.yxy*scene(ro + k.yxy*h).dist + \n                      k.xxx*scene(ro + k.xxx*h).dist );\n}\nfloat calcAO(vec3 ro, vec3 n)\n{\n    float ao = 0.0;\n    float sca = 15.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = SC*(0.01 + 0.01*float(i*i));\n        float dd = scene(ro + hr*n).dist;\n        ao += (hr-dd)*sca/SC;\n        sca *= 0.85;\n    }\n    return 1.0 - clamp( ao*0.3, 0.0, 1.0 );\n}\nfloat softshadow(vec3 ro, vec3 rd, float tmax, float k) {\n    float res = 1.; // final result\n    for (float t=0.; t<tmax;) {\n        vec3 p = ro + rd*t;\n        \n        float h = scene(p).dist;\n        if (h<MIN_DIST) return 0.;\n        \n        res = min(res, k*h/t); // get the closest penumbra\n        t += h;\n    }\n    return res*res*(3.-2.*res); // S curve\n}\nfloat softglow(vec3 ro, vec3 rd, float tmin, float tmax, float k, float shrink) {\n    float res = 1.; // final result\n    for (float t=tmin; t<tmax;) {\n        vec3 p = ro + rd*t;\n        \n        float h = scene(p).dist+shrink;\n        if (h<MIN_DIST) return 0.;\n        \n        res = min(res, h);\n        \n        t += h;\n    }\n    return pow(res,1./k);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    int bounce = 0;\n    \n    vec3 specular = vec3(1.);\n    \n    vec4 lightData = vec4(0.,0.,1.,1.); //fresnelled, notfresnelled, reflected, diffused\n    float smoothness = 1.0;\n    \n    vec3 col = vec3(0.);\n    \n    for (int i=0; i<MAX_ITERATIONS; i++) {\n        marchObj marchDat = scene(ro);\n        \n        if (length(ro) >= 1000. || bounce >= MAX_BOUNCES || i >= MAX_ITERATIONS-1) {\n            vec3 diffuse = texture(iChannel0,rd).rgb;\n            \n            specular *= diffuse;\n            \n            col += diffuse*lightData.x + specular*lightData.z;\n            break;\n        }\n        if (marchDat.dist <= MIN_DIST) {\n            vec3 normal = sdfNormal(ro);\n            vec3 diffuse = marchDat.col;\n            \n            float shadow = softshadow(ro+normal*MIN_DIST*5., SUN_DIR, 100., 16.);\n            float light = max(dot(normal, SUN_DIR)*shadow,1.-SHADOW_DARKNESS);\n            \n            vec3 r = reflect(rd, normal);\n            r = randomDiffusedNormal(ro+iTime, normal, r, marchDat.smoothness);\n            \n            float fresnel = max(pow(1.-dot(normal,r),5.),.0);\n            \n            float ambientOcclusion = calcAO(ro, normal);\n            #if 0\n            vec3 specular = texture(iChannel0,r).rgb;\n            \n            col = mix(diffuse*light + specular*fresnel*marchDat.smoothness, diffuse*specular, marchDat.metallic);\n            col *= ambientOcclusion;\n            \n            break;\n            #else\n            if ((length(specular)>.1) && (marchDat.metallic > 0. || marchDat.smoothness > 0.)) {\n                if (bounce == 0) lightData.x = 1.;\n                marchDat.metallic = max(marchDat.metallic, .0001);\n                marchDat.smoothness = max(marchDat.smoothness, .0001);\n                \n                float fn = marchDat.smoothness*(1.-marchDat.metallic)*lightData.x*fresnel; //fn = marchDat.smoothness*(1.-marchDat.metallic)*fresnelled*fresnel\n                lightData.y = lightData.x - fn; //notfresnelled = fresnelled - fn\n                lightData.x = fn; //fresnelled = fn\n\n                float sp = mix(fresnel,marchDat.metallic,marchDat.metallic)*lightData.z; //sp = marchDat.metallic*reflected*.8\n                lightData.w = lightData.z - sp; //diffused = reflected - sp;\n                lightData.z = sp; //reflected = sp\n                \n                smoothness *= marchDat.smoothness;\n                \n                diffuse = mix(diffuse*light, diffuse, marchDat.metallic);\n                specular *= diffuse*ambientOcclusion;\n                \n                col += specular*lightData.w; //col += specular*diffused\n                \n                if (bounce < MAX_BOUNCES) {\n                    rd = r;\n                    ro += normal*MIN_DIST*5.;\n\n                    bounce++;\n                }\n            } else {\n                specular *= diffuse*light*ambientOcclusion;\n                col += specular*lightData.z;\n                break;\n            }\n            #endif\n        }\n        \n        ro += rd*marchDat.dist;\n    }\n    \n    return col;\n}\nvec3 getrd(inout vec3 ro, vec2 m, vec2 uv) {\n#if 1\n    ro = rot3D(ro,-m.y*4.,-m.x*4.);\n    vec3 rd = getRayDir(ro,vec3(0),uv,45.);\n#else\n    vec3 rd = getRayDir(vec3(0.,0.,1.),vec3(0),uv,45.);\n    rd = rot3D(rd,-m.y*4.,-m.x*4.);\n#endif\n    return rd;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec2 m = (iMouse.xy-iResolution.xy/2.)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    vec3 camPos = vec3(0,0,6);\n    \n    for (int i = 0; i < SAMPLES; i++) {\n        vec2 randomOffset = hash21(float(i)*195.392582);\n        vec2 uv2 = uv + randomOffset/iResolution.y;\n        \n        vec3 ro = camPos;\n        vec3 rd = getrd(ro, m, uv2);\n\n        col += render(ro, rd);\n    }\n    \n    col /= float(SAMPLES);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 getRayDir(vec3 ro, vec3 wo, vec2 uv, float FOV) {\n    float t = tan(FOV*3.14159/180.);\n    vec3 f = normalize(wo-ro),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        rd = f+r*uv.x*t+u*uv.y*t;\n    return normalize(rd);\n}\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(\n        c,-s,\n        s,c\n    );\n}\nvec3 rot3D(vec3 p, float pitch, float yaw) {\n    p.zy *= rot2D(pitch);\n    p.xz *= rot2D(yaw);\n    return p;\n}\nvec3 rotateAround(vec3 u, vec3 rd, float theta) {\n    float ct = cos(theta);\n    float st = sin(theta);\n    \n    mat3 R = mat3(\n        vec3(ct+u.x*u.x*(1.0-ct), u.x*u.y*(1.0-ct)-u.z*st, u.x*u.z*(1.0-ct)+u.y*st),\n        vec3(u.y*u.x*(1.0-ct)+u.z*st, ct+u.y*u.y*(1.0-ct), u.y*u.z*(1.0-ct)-u.x*st),\n        vec3(u.z*u.x*(1.0-ct)-u.y*st, u.z*u.y*(1.0-ct)+u.x*st, ct+u.z*u.z*(1.0-ct))\n    );\n    \n    return rd * R;\n}\nvoid fold(vec3 o, vec3 n, inout vec3 ro) {\n    n = normalize(n);\n    ro -= 2.*max(dot(ro-o,n),0.)*n;\n}\nvec3 triplanar(sampler2D tex, vec3 ro) {\n    vec3 n = normalize(ro);\n    vec3 colYZ = texture(tex, vec2(ro.y, ro.z)).rgb;\n    vec3 colXZ = texture(tex, vec2(ro.x, ro.z)).rgb;\n    vec3 colXY = texture(tex, vec2(ro.x, ro.y)).rgb;\n    \n    return colYZ*n.x + colXZ*n.y + colXY*n.z;\n}\n\n//HASHES\nconst uint k = 1103515245U;\nconst vec3 MOD3 = vec3(.1031,.11369,.13787);\nvec3 hash33( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nuvec2 murmurHash21(uint src) {\n    const uint M = 0x5bd1e995u;\n    uvec2 h = uvec2(1190494759u, 2147483647u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nvec2 hash21(float src) {\n    uvec2 h = murmurHash21(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nvec3 randomDiffusedNormal(vec3 ro, vec3 n, vec3 r, float smoothness) {\n    uvec3 uro = uvec3(abs(ro)*17493.116734);\n    vec3 randomDir = normalize(hash33(uro)*2.-1.);\n    if (dot(n, randomDir) < 0.) randomDir = -randomDir;\n    \n    float dist = hash31(ro*195.2581443);\n    vec3 randomR = normalize(mix(r, randomDir, (1.-smoothness)*pow(dist,smoothness)));\n    \n    return randomR;\n}\n\n//SDF tools\nstruct marchObj {\n    float dist;\n    vec3 col;\n    \n    float metallic;\n    float smoothness;\n};\nstruct marchHit {\n    vec3 hitPoint;\n    marchObj mobj;\n};\nvec2 smin( float a, float b, float k )\n{\n    float h = 1.0 - min( abs(a-b)/(4.0*k), 1.0 );\n    float w = h*h;\n    float m = w*0.5;\n    float s = w*k;\n    return (a<b) ? vec2(a-s,m) : vec2(b-s,1.0-m);\n}\n\n//March Object tools\nmarchObj objmin(marchObj A, marchObj B, float k) {\n    vec2 dat = smin(A.dist, B.dist, k);\n    marchObj C;\n    \n    C.dist = dat.x;\n    C.col = mix(A.col, B.col, dat.y);\n    C.metallic = mix(A.metallic, B.metallic, dat.y);\n    C.smoothness = mix(A.smoothness, B.smoothness, dat.y);\n    \n    return C;\n}\n\n//SDF's\nfloat sdfSphere(vec3 ro, float r) {\n    return length(ro)-r;\n}\nfloat sdfBox( vec3 ro, vec3 b, float r )\n{\n    vec3 q = abs(ro) - b + r;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n//Fractal SDF's\nfloat mengerSponge(inout vec3 ro, int iterations) {\n    float scale = 1.;\n    \n    for (int i = 0; i < iterations; i++) {\n        ro = abs(ro);\n        \n        fold(vec3(1.), vec3(-1.,1.,0.), ro);\n        fold(vec3(1.), vec3(0.,1.,-1.), ro);\n        fold(vec3(0.5), vec3(0.,-1.,0.), ro);\n        \n        ro -= 1.;\n        ro *= 3.;\n        scale *= 3.;\n    }\n    \n    return scale;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}