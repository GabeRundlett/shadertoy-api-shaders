{
    "Shader": {
        "info": {
            "date": "1629454000",
            "description": "Design drawings for \"Steam Engine No.3\" (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "sdt3R7",
            "likes": 32,
            "name": "Engine Sketches",
            "published": 3,
            "tags": [
                "projection",
                "drawing",
                "machine"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "// \"Engine Sketches\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Noisefv2 (vec2 p);\n\nvec3 qHit, pgSize, ltDir, ltDirS;\nvec2 aCs[3], crCs[3], crMid[3];\nfloat tCur, dstFar, dMiss, crRad, crLen, aRot, szFac, aPen;\nint idObj;\nbool isSh;\nconst int idWhl = 1, idSpk = 2, idCrnk = 3, idAx = 4, idPis = 5, idCrod = 6, idCyl = 7,\n   idCylEnt = 8, idValv = 9, idPipes = 10, idSup = 11, idBase = 12, idPen = 13, idFrm = 14;\nconst float pi = 3.1415927;\n\n#if 1\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat CrnkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, dz;\n  for (int k = 0; k < 3; k ++) {\n    dz = float (1 - k) * 4.;\n    q = p;\n    q.xy = Rot2Cs (q.xy, aCs[k]);\n    q.z -= dz;\n    d = min (PrRoundBoxDf (vec3 (q.x + 0.5 * crRad, q.y, abs (q.z) - 0.5),\n       vec3 (0.5 * crRad, 0.2, 0.1), 0.02), PrRoundCylDf (vec3 (abs (q.x + 0.5 * crRad) -\n       0.5 * crRad, q.y, abs (q.z) - 0.5), 0.6, 0.02, 0.1));\n    DMIN (idCrnk);\n    d = PrRoundCylDf (vec3 (q.x + crRad, q.yz), 0.3, 0.02, 0.65);\n    DMIN (idAx);\n    q = p;\n    q.z -= dz;\n    q.xy = Rot2Cs (q.xy + crMid[k], crCs[k]);\n    d = min (PrCylDf (vec3 (abs (q.y) - 0.12, q.zx), 0.15, crLen - 0.5),\n       PrCylDf (vec3 (abs (q.x) - crLen, q.yz), 0.6, 0.15));\n    DMIN (idCrod);\n    q = p;\n    q.xz -= vec2 (- (4.5 + crMid[k].x + crLen * crCs[k].x), dz);\n    d = PrCylDf (q.yzx, 0.25, 3.7);\n    DMIN (idPis);\n    d = PrCylDf ((q - vec3 (0.7, 1.7, 0.)).yzx, 0.07, 3.);\n    DMIN (idPis);\n    q.x -= 4.5;\n    d = PrRoundCylDf (q, 0.3, 0.02, 0.5);\n    DMIN (idAx);\n    d = min (min (PrCylDf ((q - vec3 (-0.8, 0., 0.)).yzx, 0.6, 0.13),\n       PrCylDf ((q - vec3 (-0.8, 0.8, 0.)).xzy, 0.08, 0.95)),\n       PrRoundCylDf (vec3 (q.xy, abs (q.z) - 0.35), 0.7, 0.02, 0.1));\n    DMIN (idCrnk);\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dz;\n  dMin = dstFar / szFac;\n  p /= szFac;\n  p.x -= 12.;\n  q = p;\n  if (! isSh) d = PrCapsDf (q.yzx, 10., 7.);\n  if (isSh || d < 0.2) {\n    p.x -= 8.;\n    q = p;\n    d = max (PrCylDf (q, 0.3, 8.2), min (0.35 - abs (mod (q.z + 2., 4.) - 2.), 6. - abs (q.z)));\n    DMIN (idAx);\n    q.xy = Rot2Cs (q.xy, aCs[0]);\n    q.z = abs (q.z) - 7.3;\n    d = min (SmoothMax (abs (length (q.xy) - 4.) - 0.2, abs (q.z) - 0.8, 0.04),\n       PrRoundCylDf (q, 0.6, 0.02, 0.8));\n    DMINQ (idWhl);\n    q.xy = Rot2D (q.xy, 2. * pi * (floor (6. * atan (q.y, - q.x) / (2. * pi) + 0.5)) / 6.);\n    d = PrRoundBoxDf (vec3 (q.x + 2.2, q.y, abs (q.z) - 0.5), vec3 (1.7, 0.15, 0.25), 0.04);\n    DMIN (idSpk);\n    dMin = CrnkDf (p, dMin);\n    q = p ;\n    q.z = mod (q.z + 2., 4.);\n    q.xz -= vec2 (-16.9, 2.);\n    d = max (PrCylDf ((q + vec3 (-3.5, 0., 0.)).yzx, 0.7, 0.2), abs (p.z) - 6.);\n    DMINQ (idCylEnt);\n    d = max (PrRoundCylDf (q.yzx, 1.5, 0.02, 3.5), abs (p.z) - 6.);\n    DMINQ (idCyl);\n    q = p;\n    q.z = mod (q.z + 2., 4.);\n    q -= vec3 (-16.9, 1.7, 2.);\n    d = max (PrRoundCylDf (q.yzx, 0.5, 0.02, 2.5), abs (p.z) - 6.);\n    DMINQ (idValv);\n    q = p;\n    q.x = abs (q.x + 16.9);\n    q.xy -= vec2 (1.5, 2.7);\n    d = min (min (max (PrCylDf ((vec3 (q.x, q.y, mod (q.z + 2., 4.) - 2.)).xzy, 0.35, 0.75),\n       abs (p.z) - 6.), PrCylDf (vec3 (q.x, q.y - 0.75, q.z), 0.35, 4.)),\n       PrSphDf (vec3 (q.x, q.y - 0.75, abs (q.z) - 4.), 0.35));\n    q = p;\n    q.xy -= vec2 (-16.9, 1.);\n    d = min (d, min (PrCylDf ((q + vec3 (-1.5, 0., 2.)).xzy, 0.35, 2.5),\n       PrCylDf ((q + vec3 (1.5, 0., -2.)).xzy, 0.35, 2.5)));\n    DMINQ (idPipes);\n    q = p;\n    q.z = abs (abs (q.z) - 4.) - 1.7;\n    d = min (PrRoundBoxDf (q + vec3 (0., 1.6, 0.), vec3 (0.48, 1.5, 0.2), 0.02),\n       PrRoundCylDf (q, 0.5, 0.02, 0.25));\n    DMINQ (idSup);\n    q = p;\n    q.yz -= vec2 (1.8, -2.3);\n    if (! isSh) d = PrSphDf (q, 1.);\n    if (isSh || d < 0.1) {\n      d = PrCylDf ((q + vec3 (0., 0.6, 0.)).xzy, 0.12, 0.8);\n      q.xz = Rot2D (q.xz, 4. * aRot);\n      q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 4.);\n      q.xy = Rot2D (q.xy, -0.25 * pi);\n      d = min (d, PrCylDf ((q + vec3 (0.4, -0.1, 0.)).yzx, 0.05, 0.4));\n      DMIN (idAx);\n      d = PrSphDf (q + vec3 (0.7, -0.1, 0.), 0.15);\n      DMIN (idPis);\n    } else dMin = min (dMin, d);\n    q = p;\n    q.xy -= vec2 (-8., -4.);\n    d = min (PrRoundBoxDf (q, vec3 (13., 1., 6.), 0.04),\n       PrRoundBoxDf (vec3 (abs (q.x + 9.) - 2., q.y - 1.5, q.z), vec3 (1., 1.4, 5.), 0.04));\n    DMINQ (idBase);\n    dMin *= szFac;\n    dMiss = min (dMiss, dMin);\n  } else dMin = min (dMin, d) * szFac;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 ObjNfL (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  float s;\n  e = vec2 (0.005, -0.005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  s = dot (v, vec4 (1.));\n  return vec4 (normalize (2. * v.yzw - s), (s - 2. * v.x - 4. * ObjDf (p)) / (e.x * e.x));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ExObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  q -= vec3 (2.5, -2.2, -6.8);\n  q.xz = Rot2D (q.xz, 0.2 * pi);\n  q.yz = Rot2D (vec2 (q.y, q.z + 4.5), 0.035 * pi + aPen) - vec2 (0., 4.5);\n  d = PrRoundCylDf (q, 0.33, 0.02, 5.);\n  d = max (d, - dot (vec2 (q.z, dot (q.xy, cos (2. * pi * floor (16. * (atan (q.y, - q.x) / (2. * pi) +\n     0.5) + 0.5) / 16. + vec2 (0., 0.5 * pi)))), sin (-0.4 * pi + vec2 (0.5 * pi, 0.))) - 1.6);\n  DMINQ (idPen);\n  q = p;\n  q.yz -= vec2 (-2.6, -4.);\n  d = max (PrRoundBoxDf (q, vec3 (pgSize + vec3 (1., 0.1, 1.)), 0.03), - PrBox2Df (q.xz, pgSize.xz));\n  DMINQ (idFrm);\n  return dMin;\n}\n\nfloat ExObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    d = ExObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ExObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ExObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ExObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ExObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShGrid (vec2 p, vec2 g, int stag)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (stag > 0 && 2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.xy, 1. - 0.1 * sq.x * sq.y).xzy;\n}\n\nvec2 ExBlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, fcBlk;\n  vec2 qBlk;\n  float dn, df, bSize;\n  bSize = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    fcBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, fcBlk), dot (u.yzx, fcBlk)) / bSize;\n  } else qBlk = vec2 (0.);\n  return qBlk;\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp, fcBlk;\n  vec2 qBlk;\n  float dMin, dn, df;\n  dMin = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    fcBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return vec4 (dMin, fcBlk);\n}\n\nvec4 ObjCol (inout vec3 vn)\n{\n  vec4 col4;\n  vec3 rg;\n  float a, s;\n  bool fxz;\n  if (idObj == idBase) {\n    col4 = vec4 (0.7, 0.8, 0.4, 0.1);\n    if (abs (vn.y) < 0.01) {\n      rg = qHit;\n      rg.y += 0.5;\n      fxz = (abs (vn.x) > 0.99);\n      rg = ShGrid ((fxz ? rg.zy : rg.xy), vec2 (1., 2.), 1);\n      col4 *= rg.y;\n      rg.xz *= sign (fxz ? vn.x : vn.z);\n      if (fxz) {\n        if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n        else vn.xz = Rot2D (vn.xz, rg.x);\n      } else {\n        if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n        else vn.zx = Rot2D (vn.zx, rg.x);\n      }\n    } else {\n      rg = ShGrid (qHit.xz, vec2 (1.), 0);\n      col4 *= rg.y;\n      if (vn.y > 0.99) {\n        if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n        else vn.yx = Rot2D (vn.yx, rg.x);\n      }\n    }\n  } else if (idObj == idCyl) {\n    col4 = vec4 (0.8, 0.5, 0.2, 0.2);\n    a = atan (qHit.z, - qHit.y) / (2. * pi);\n    if (abs (vn.x) > 0.99) {\n      col4.rgb *= (1. - 0.5 * SmoothBump (0.2, 0.4, 0.01, mod (16. * a + 0.5, 1.)) *\n         SmoothBump (0.05, 0.13, 0.01, 1. - length (qHit.yz) / 1.5));\n    } else {\n      col4.rgb *= (1. - 0.5 * SmoothBump (0.03, 0.06, 0.01, 1. - abs (qHit.x) / 3.5));\n      a = mod (32. * a, 1.);\n      if (abs (qHit.x) < 3.3) vn.yz = Rot2D (vn.yz, 0.4 * SmoothBump (0.25, 0.75, 0.2, a) *\n         sign (a - 0.5));\n    }\n  } else if (idObj == idWhl) {\n    col4 = vec4 (0.8, 0.8, 0.85, 0.1);\n    if (abs (vn.z) < 0.01) {\n      s = length (qHit.xy);\n      qHit.xy = vec2 (8. * atan (qHit.x, - qHit.y) / pi, qHit.z);\n      if (s > 4.1) {\n        s = mod (4. * qHit.z, 1.);\n        vn.z = -0.2 * SmoothBump (0.25, 0.75, 0.15, s) * sign (s - 0.5) * sign (qHit.z);\n        vn = normalize (vn);\n      }\n    }\n  } else if (idObj == idSpk) {\n    col4 = 1.1 * vec4 (0.8, 0.8, 0.85, 0.1);\n  } else if (idObj == idCrnk) {\n    col4 = vec4 (0.7, 0.7, 0.8, 0.2);\n  } else if (idObj == idAx) {\n    col4 = vec4 (0.8, 0.6, 0.2, 0.3);\n  } else if (idObj == idPis) {\n    col4 = vec4 (0.7, 0.7, 0.4, 0.3);\n  } else if (idObj == idCrod) {\n    col4 = vec4 (0.7, 0.75, 0.7, 0.3);\n  } else if (idObj == idCylEnt) {\n    col4 = vec4 (0.85, 0.5, 0.3, 0.2) * (0.5 + 0.5 * step (0.33, length (qHit.yz)));\n  } else if (idObj == idValv) {\n    col4 = vec4 (0.8, 0.5, 0.2, 0.2) * mix (1., 0.5 + 0.5 * step (0.13, length (qHit.yz)),\n       step (0., vn.x));\n  } else if (idObj == idPipes) {\n    col4 = vec4 (0.8, 0.5, 0.2, 0.2);\n  } else if (idObj == idSup) {\n    col4 = vec4 (0.8, 0.9, 0.3, 0.05);\n  }\n  return col4;\n}\n\nvoid SetConf ()\n{\n  aRot = -0.4 * 2. * pi * tCur;\n  aCs[0] = vec2 (cos (aRot), sin (aRot));\n  aCs[1] = vec2 (cos (aRot + pi * 2./3.), sin (aRot + pi * 2./3.));\n  aCs[2] = vec2 (cos (aRot + pi * 4./3.), sin (aRot + pi * 4./3.));\n  crRad = 2.;\n  crLen = 5.;\n  for (int k = 0; k < 3; k ++) {\n    crMid[k].y = -0.5 * crRad * aCs[k].y;\n    crCs[k] = vec2 (cos (asin (crMid[k].y / crLen)), crMid[k].y / crLen);\n    crMid[k].x = crLen * crCs[k].x + crRad * aCs[k].x;\n  }\n  aPen = 0.015 * pi * max (sin (pi * tCur), 0.);\n}\n\nvec3 SkShowScene (vec3 ro, vec3 rd, vec2 uv)\n{\n  vec4 col4, vn4;\n  vec3 col, vn;\n  float dstObj;\n  dMiss = dstFar;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn4 = ObjNfL (ro);\n    vn = vn4.xyz;\n    col4 = ObjCol (vn);\n    col = vec3 (1., 0.98, 0.96) * pow (Maxv3 (col4.rgb), 0.7);\n    col *= (1. - 0.5 * smoothstep (0.5, 1., abs (vn4.w) / 64.)) *\n       (0.9 + 0.2 * Noisefv2 (Rot2D (uv, 0.2 * pi) * vec2 (16., 256.))) *\n       (0.5 + 0.5 * max (dot (vn, ltDirS), 0.));\n    dMiss = dstFar;\n  } else {\n    col = vec3 (1.);\n  }\n  col = mix (col, vec3 (0.3), exp (- 64. * dMiss));\n  return clamp (col, 0., 1.);\n}\n\nvec3 SkMain (vec2 fCoord, float vp)\n{\n  mat3 vuMat;\n  vec3 ro, rd, col;\n  vec2 uv;\n  float el, az, szFacT;\n  szFacT = szFac;\n  uv = fCoord / vec2 (5., 5.5);\n  if (vp == 0.) {\n    szFac = 0.38;\n    uv -= vec2 (-0.9, -1.1);\n    el = -0.3 * pi;\n    az = 0.1 * pi;\n  } else if (vp == 1.) {\n    szFac = 0.32;\n    uv -= vec2 (-0.4, -0.7);\n    el = -0.13 * pi;\n    az = -0.4 * pi;\n  } else if (vp == 2.) {\n    szFac = 0.4;\n    uv -= vec2 (0.3, -1.4);\n    el = -0.25 * pi;\n    az = 0.7 * pi;\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., -5., -20.);\n  rd = vuMat * normalize (vec3 (uv, 4.2));\n  ltDirS = vuMat * normalize (vec3 (0.7, 1., -0.7));\n  col = SkShowScene (ro, rd, uv);\n  szFac = szFacT;\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, db4;\n  vec3 col, vn, qHitEx;\n  vec2 qBlk, q, sq;\n  float dstObj, dstExObj, sh, r;\n  int idObjEx;\n  bool isBg;\n  SetConf ();\n  szFac = 0.5;\n  pgSize = vec3 (15., 0.1, 10.);\n  isBg = false;\n  isSh = false;\n  dstExObj = ExObjRay (ro, rd);\n  idObjEx = idObj;\n  qHitEx = qHit;\n  dstObj = ObjRay (ro, rd);\n  db4 = BlkHit (ro - vec3 (0., -2.6, -4.), rd, pgSize);\n  if (min (dstObj, dstExObj) < min (db4.x, dstFar)) {\n    if (dstObj < dstExObj) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      qBlk = mod (2. * ExBlkHit (ro, reflect (rd, vn)), 1.);\n      col4 = ObjCol (vn);\n    } else {\n      ro += dstExObj * rd;\n      vn = ExObjNf (ro);\n      if (idObjEx == idPen) {\n        r = length (qHit.xy);\n        col4 = mix (vec4 (0.9, 0.7, 0.1, 0.), vec4 (1., 0.9, 0.1, 0.01), step (0.34, r));\n        col4 = mix (vec4 (0.3, 0.3, 0.3, 0.), col4, step (0.18, r));\n        col4 = mix (vec4 (0.8, 0.4, 0.1, 0.2), col4, step (qHitEx.z, 4.5));\n      } else if (idObjEx == idFrm) {\n        col4 = vec4 (0.4, 0.5, 0.6, 0.) * (0.9 + 0.1 * Noisefv2 (32. * qHit.xz));\n      }\n    }\n  } else if (db4.x < dstFar) {\n    ro += db4.x * rd;\n    vn = db4.yzw;\n    q = ro.xz - vec2 (0., -4.);\n    if (vn.y > 0.5 && PrBox2Df (q, pgSize.xz - 0.96) < 0.) {\n      sq = sign (q);\n      col = (sq.x < 0. || sq.y < 0.) ? SkMain (q - 0.5 * sq * pgSize.xz,\n         sq.y + 1. + 0.5 * (sq.x + 1.)) : vec3 (1.);\n      if (Minv3 (col) > 0.95) {\n        q = smoothstep (0.02, 0.05, abs (mod (q + 0.5, 1.) - 0.5));\n        col = mix (vec3 (0.6, 0.8, 0.9), vec3 (1.), min (q.x, q.y));\n      }\n    } else {\n      col = vec3 (1.) * (0.8 + 0.2 * step (0.5, vn.y));\n      sh = 1.;\n    }\n  } else {\n    isBg = true;\n  }\n  if (! isBg) {\n    isSh = true;\n    sh = min (ObjSShadow (ro + 0.01 * vn, ltDir), ExObjSShadow (ro + 0.01 * vn, ltDir));\n    if (min (dstObj, dstExObj) < min (db4.x, dstFar)) {\n      col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n      col += col4.a * vec3 (0.5) * (0.5 + 0.5 * SmoothBump (0.25, 0.75, 0.05, qBlk.x) *\n         SmoothBump (0.25, 0.75, 0.05, qBlk.y));\n    } else {\n      col *= 0.3 + 0.7 * sh * max (dot (vn, ltDir), 0.);\n    }\n  } else {\n    qBlk = mod (8. * ExBlkHit (ro, rd), 1.);\n    col = vec3 (0.4, 0.5, 0.4) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.)) +\n       vec3 (0.2) * (0.9 + 0.1 * SmoothBump (0.25, 0.75, 0.1, qBlk.x) *\n       SmoothBump (0.25, 0.75, 0.1, qBlk.y));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.28 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.8 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.5 * pi, -0.1 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., -4.8, -40.);\n  rd = vuMat * normalize (vec3 (uv, 4.));\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (0.7, 1., -0.7));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}