{
    "Shader": {
        "info": {
            "date": "1651475321",
            "description": "An experiment as a supplement to my math homework, added better lighting to one of my old shaders as well as integral fog based on the equation d=e^-h where d is the density. More info: https://www.desmos.com/calculator/4s65etlteh",
            "flags": 0,
            "hasliked": 0,
            "id": "slffDS",
            "likes": 10,
            "name": "Intergral fog",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "El_Sargo",
            "viewed": 524
        },
        "renderpass": [
            {
                "code": "//Heavy performance impact \n#define AA 1\n#define raymarchSteps 30\n#define rotationSpeed 7.\n#define ZERO min(iFrame, 0)\n#define post\n#define vignet\n\nconst float pi = 3.14159265359;\nmat2 rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,-s,s,c);\n}\n// Base primitive\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec4 map(vec3 p) {\n    mat2 rotx = rot(sin (2. * iTime*0.1)*pi + sin(pi * iTime*0.1)*pi);\n    mat2 rotz = rot(cos(iTime/4.)*pi);\n    mat2 roty = rot(sin(iTime/4.+12313.123)*pi);\n    int maxI = 8;\n    float scale = 1.;\n    const float factor = 2.;\n    const float baseSize = .7;\n    float d = 10e10;\n    for (int i=ZERO;i<maxI;i++){ \n        p = abs(p)-.4*factor;\n        p *= factor;\n        scale /= factor;\n        p.yz *= rotx;\n        p.xy *= rotz;\n        p.xz *= roty;\n\n    }\n            d = min(d,\n             sdBox(p-vec3(0,.44*factor,0), (vec3(baseSize)))*scale-(0.4*scale)\n             );\n    return vec4(d,p);\n}\n\nfloat intersection(vec3 ro, vec3 rd){\n    float T = 0.;\n    for(int i=0;i < raymarchSteps;i++){\n        float dist = map(ro+rd*T).x;\n        \n        T +=dist;\n        if(dist <0.0026*T || dist > 4.)\n            break;\n    }\n    return T;\n}\n\n//iq ---\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k , float d){\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t).x;\n        if( h<0.0005*d )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\nvec3 calcNormal( in vec3 p, float t ){\n    float h = 0.002*t;\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*h).x;\n    }\n    return normalize(n);\n}\nfloat calcAO(vec3 pos, vec3 nor){\n\tfloat occ = 0.0;\n    float sca = .4;\n    for( int i=ZERO; i<5; i++ )\n    {\n            float h = 0.01 + 0.25*float(i)/4.0;\n        float d = map( pos+h*nor).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n// ---\nvec4 render(vec3 ro, vec3 rd){\n    //world info\n    float dist = clamp(0.,10.,intersection(ro,rd));\n    vec3 pos = dist*rd+ro;\n    vec4 d_t = map(pos);\n    vec3 trp = d_t.yzw;\n   float dis = d_t.x;\n   float trd = distance(pos, trp);\n    //Shading\n     vec3 sun = normalize(vec3(1., 1., 1.1));\n    float sha = softshadow(pos, sun, 0.01, 5., 4., dist);\n     vec3 nor = calcNormal(pos,dist);\n    float occ = calcAO(pos, nor);\n    float lig = (dot(sun,nor)*0.5+0.5);\n\n    //Colors\n    vec3 col = vec3(0);\n    vec3 bcl = 0.8*vec3(log(trd),0.5,cos(trd))*vec3(1,2,2);\n    vec3 scl = vec3(0.933,0.918,0.827);\n    vec3 amb = vec3(0.949,0.702,1.000);\n    vec3 ref = reflect(rd,nor);\n    \n    vec3 hvc = normalize(sun - rd);\n    //Intergral fog\n    float fogAmount;\n    {\n        float a = rd.y*0.0125;\n        float h = ro.y-2.5;\n        float fogDist = length(rd.xy)*dist;\n        fogAmount = (exp(fogDist*a*1.1)-1.)*exp(-fogDist*a-h)/a;\n    }\n    //Sun fog\n    float sunFog;\n    {\n        float a = sun.y*0.0125;\n        float h = pos.y-2.5;\n        float fogDist = length(sun.xy)*1000.;\n        sunFog = (exp(fogDist*a)-1.)*exp(-fogDist*a-h)/a;\n    }\n    float sunOcc = exp(-sunFog*0.0003);\n    \n    if (dis < 0.1) {\n        col += 4.*lig*sha*bcl*scl*sunOcc;\n        col += .2*amb*occ*bcl*(abs(dot(nor,sun))*.5+.5)*sunOcc;\n        col += .2*occ*(dot(ref, rd)+1.);\n        col += amb*pow(dot(nor,hvc)*.5+.5, 5.)*sha;\n        col += occ*2.*vec3(0.757,0.486,0.024)*bcl*scl*(.75+0.25*dot(nor,-sun))/smoothstep(-2.0,2.,length(pos.xz))*sunOcc;\n    } else {\n        fogAmount = 1.;\n    }\n    \n    col = mix(col,amb,clamp(fogAmount , 0., 1.));\n        \n        \n    col += vec3(0.878,0.412,0.102)*smoothstep(-.2,.5,dot(rd,sun));\n    return vec4(col, 1);\n}\n\n\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec3   ro = vec3(0, 0, -5.5);\n    mat2 yrot = rot(iTime*0.2);\n    mat2 xrot = rot(.9);\n           ro.yz *= xrot;\n           ro.xz *= yrot;\n\n    vec4 tot = vec4(0);\n    \n    //Super sampling\n    for(int m=0;m<AA;m++){\n    for(int n=0;n<AA;n++){\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 u = ((fragCoord+o) / iResolution.xy - 0.5) / vec2(iResolution.y / iResolution.x, 1);\n        vec3 rd = normalize(vec3(u, 1));\n        rd.yz *= xrot;\n        rd.xz *= yrot;\n        tot += render(ro, rd) / float(AA*AA);\n    }}\n\n    \n    #ifdef vignet\n    vec2 uv = fragCoord/iResolution.xy-0.5;\n    tot *= smoothstep(1.34, 0., length(uv));\n    tot = smoothstep(.0,1.6,tot);\n    tot = pow(tot, vec4(1.,1.4,1.1,1.));\n    #endif\n    \n    // Output to screen\n    #ifdef post\n    fragColor = vec4(aces_tonemap(pow(tot.xyz\n    ,vec3(1.15)\n    )),1.);\n    #else\n    fragColor = tot;\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}