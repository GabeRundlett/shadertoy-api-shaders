{
    "Shader": {
        "info": {
            "date": "1619136312",
            "description": "\n you can change the song by switching the one in iChannel0,\nand can also mess around with the var's, in the beggining of main image. \n",
            "flags": 4,
            "hasliked": 0,
            "id": "ssXSRl",
            "likes": 6,
            "name": "Visualiser(sound!)",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "sound",
                "mandelbrot",
                "reactive",
                "music",
                "kaleidoscope",
                "visualiser",
                "snowflake",
                "set",
                "koch"
            ],
            "usePreview": 0,
            "username": "Pelegefen",
            "viewed": 539
        },
        "renderpass": [
            {
                "code": "// ----------------CAUTION!!!--- FLASHING BRIGHT LIGHTS!!!-------------------------\n\n\n\n// Credits - fractal zoom with smooth iter count adapted from - iq (Inigo quilez) - https://iquilezles.org/articles/msetsmooth\n// Koch Snowflake symmetry from tutorial by Martijn Steinrucken aka The Art of Code/BigWings - 2020 - https://www.youtube.com/watch?v=il_Qg9AqQkE&ab_channel=TheArtofCode\n//music - Varien & Razihel - Toothless Hawkins (And His Robot Jazz Band)\n\n\n\n//Some notes - color is determined by date and not time - hour of day dependent.\n//Move the mouse on the Y axis to change the symmetry.\n\n//----------------------------------------------------------------------------------\n\n//uncomment to sample audio input from MIC instead of SoundCloud.\n//#define MIC_INPUT\n\n//comment to make it less trippy and noisy.\n#define EXTRA_DMT\n\n\n#define PI 3.14159265359\n\n\n\n#define date iDate\n#define time iTime\n#define resolution iResolution\n\nfloat freqs[4];\n\n\nvec2 swirl(vec2 p, float i){\n\n    float an = atan(p.y, p.x);\n\t/*an = mod(an, PI);*/\n\tfloat dy = 1.0/(distance(p, vec2(0., 0.)))*((sin(time/2.)+1.02)*3.) + 2.*an;\n\n    \n    return vec2(cos(freqs[0]*10.0+dy)*i)+0.5;\n}\n\n\nvec2 rot(vec2 p,float a){\n    \n    float c = cos(a);\n    float s = sin(a);\n    \n    mat2 m = mat2(c,-s,s,c);\n    \n    p*=m;\n    return p  ;\n}\n\nfloat localTime(){\n\nfloat d = (date.w + date.x+date.y + date.z)/4.;\nreturn d ;\n\n}\n\nvec3 randomCol(float sc){\n\n float d = localTime();\n\tfloat r = sin(sc * 1. * d)*.5+.5;\n\tfloat g = sin(sc * 2. * d)*.5+.5;\n\tfloat b = sin(sc * 4. * d)*.5+.5;\n\n\tvec3 col = vec3(r,g,b);\n\tcol = clamp(col,0.,1.);\n\n\treturn col;\n\t}\n\n\n//--------------------------------------------------mandelbrot generator-----------https://iquilezles.org/articles/msetsmooth\n\n\tfloat mandelbrot(vec2 c )\n{\n    #if 1\n    {\n        float c2 = dot(c, c);\n        // skip computation inside M1 - https://iquilezles.org/articles/mset1bulb\n        if( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) return 0.0;\n        // skip computation inside M2 - https://iquilezles.org/articles/mset2bulb\n        if( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) return 0.0;\n    }\n    #endif\n\n\n    const float B = 128.0;\n    float l = 0.0;\n    vec2 z  = vec2(0.0);\n    for( int i=0; i<256; i++ )\n    {\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        if( dot(z,z)>(B*B) ) break;\n        l += 1.0;\n    }\n\n    if( l>255.0 ) return 0.0;\n\n\n    // equivalent optimized smooth interation count\n    float sl = l - log2(log2(dot(z,z))) + 4.0;\n\n\n\n     return sl;\n }\n\n\nvec3 mandelbrotImg(vec2 p)\n{\n\n    //uncomment to see unmaped set\n\t//p = (-resolution.xy + 2.0*gl_FragCoord.xy)/resolution.y;\n    float mtime =  time;\n    mtime -= freqs[3];\n    float zoo = 0.62 + 0.38*cos(.1*mtime);\n   float coa = cos( 0.015*(1.0-zoo)*mtime );\n   float sia = sin( 0.015*(1.0-zoo)*mtime );\n   zoo = pow( zoo,6.0);\n   vec2 xy = vec2( p.x*coa-p.y*sia, p.x*sia+p.y*coa);\n   vec2 c = vec2(-.745,.186) + xy*zoo;\n\n        float l = mandelbrot(c);\n        \n        \n\tvec3 col1 = 0.5 + 0.5*cos( 3.0 + l*.15 + randomCol(.1));\n    #ifdef EXTRA_DMT\n    vec3 col2 = 0.5 + 0.5*cos( 3.0 + l*.15 / randomCol(.1));\n    #else\n    vec3 col2 = 0.5 + 0.5*cos( 3.0 + l*.15 * randomCol(.1));\n    #endif\n    vec3 col = mix(col1,col2,(freqs[0])*.5+.5);\n\n\n\n\nreturn col;\n}\n\n//-----------------functions-----------\n\nfloat remap(float a1, float a2 ,float b1, float b2, float t)\n{\n\treturn b1+(t-a1)*(b2-b1)/(a2-a1);\n}\n\n\nvec2 remap(float a1, float a2 ,float b1, float b2, vec2 t)\n{\n\treturn b1+(t-a1)*(b2-b1)/(a2-a1);\n}\n\n\nvec4 remap(float a1, float a2 ,float b1, float b2, vec4 t)\n{\n\treturn b1+(t-a1)*(b2-b1)/(a2-a1);\n}\n\n\n\n\n\nvec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n//--------get soundtrack frequencies----\n\n\n    #ifdef MIC_INPUT\n\tfreqs[0] = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;\n    #else \n    freqs[0] = texture( iChannel0, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel0, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n    #endif\n    float avgFreq = (freqs[0] +freqs[1] +freqs[2] +freqs[3])/4.;\n\n//--------image part---------\n    vec2 uv = (fragCoord.xy-.5*resolution.xy)/resolution.y;\n\tvec2 mouse = 1. - iMouse.xy/resolution.xy; // 0 1\n\tvec2 ouv = uv;\n    //uv.y -= .05;\n    uv = rot(uv,(sin(iTime*.1) /clamp( freqs[0],.3,1.)*.1  ) * PI  ) ;  \n\tuv *= 4.0 - (avgFreq * 1.5  );\n\n    uv.x = abs(uv.x);\n    \n    vec3 col = vec3(0);\n    float d;\n          uv = mix( uv +   swirl(uv  , 1. - freqs[0]), uv, freqs[0]);\n\n    float angle = 0.;\n    vec2 n = N((5./6.)*3.1415);\n\n    uv.y += tan((5./6.)*3.1415)*.5;\n   \td = dot(uv-vec2(.5, 0), n);\n    uv -= max(0.,d)*n*2.;\n    \n    float scale = 1. + freqs[3];\n    \n    n = N( freqs[0]*(2./3.)*3.1415);\n    uv.x += .5;\n   \n    for(int i=0; i<7; i++) {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        d = dot(uv, n);\n        uv -= min(0.,d)*n*2.;\n       \n    }\n\n    d = length(uv/ clamp(freqs[2],0.1,.2 )- vec2(clamp(uv.x,-1., 1.), 0));\n    col += smoothstep(10./resolution.y, .0, d/scale);\n    uv /= scale;\t// normalization\n\n   \n\tvec3 manCol = mandelbrotImg(uv);\n\t col += manCol;\n\n\n \t\t// vignette effect\n\t  col *= 1.0 - 0.5*length(uv *0.5) / freqs[1];\n\n\t \n    fragColor = vec4( col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 21,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}