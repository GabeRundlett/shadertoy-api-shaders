{
    "Shader": {
        "info": {
            "date": "1609797598",
            "description": "Using the Metropolis-Hastings algorithm to render a buddhabrot. May be biased. ",
            "flags": 32,
            "hasliked": 0,
            "id": "WtccDB",
            "likes": 19,
            "name": "Metrobrot",
            "published": 3,
            "tags": [
                "buddhabrot",
                "metropolis"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1109
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 c, in vec2 p )\n{\n    vec2 uv = p/iResolution.xy;\n    \n    //reflected point. cheat to make convergence 2x faster\n    vec2 pr = vec2(p.x, iResolution.y - 0.5 - p.y);\n    vec4 data0 = texelFetch(iChannel0, ivec2(p), 0);\n    vec4 data1 = texelFetch(iChannel0, ivec2(pr), 0);\n    \n    vec4 color = mix(decode(data0.zw),decode(data1.zw),0.5);\n    c.xyz = ((1. - iMouse.x/iResolution.x)*pow(color.xyz/(4.5e3*point_size*float(iFrame)*point_size),vec3(1.)));\n    c.w = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//standard constants\n#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n\nconst int max_iterations = 256;\nconst vec4 color_threshholds = vec4(255,130,80,255);\nconst float scale = 2.1;\nconst vec2 center = vec2(-0.5, 0.0);\n//make smaller for full screen\nconst float point_size = 0.001;\nconst float local_mut_rad = 0.01;\nconst float global_mut_rad = 0.5;\nconst float global_mut_prob = 0.15;\nconst int spp = 12;\n\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n}\n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n}\n\nfloat rand()\n{\n    pcg4d(s0); return float(s0.x)/float(0xffffffffu);\n}\n\nvec2 rand2()\n{\n    pcg4d(s0); return vec2(s0.xy)/float(0xffffffffu);\n}\n\nvec3 rand3()\n{\n    pcg4d(s0); return vec3(s0.xyz)/float(0xffffffffu);\n}\n\nvec4 rand4()\n{\n    pcg4d(s0); return vec4(s0)/float(0xffffffffu);\n}\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) *  vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\nuvec2 unpack_uint2x(uint x)\n{\n    return uvec2(x%0x00010000u,x/0x00010000u);\n}\n\nuint pack_uint2x(uvec2 x)\n{\n    return x.x + x.y*0x00010000u;\n}\n\nvec4 decode(vec2 data)\n{\n    \n    return vec4(unpack_uint2x(floatBitsToUint(data.x)),\n                unpack_uint2x(floatBitsToUint(data.y)))/100.;\n}\n\nvec2 encode(vec4 data)\n{\n    uvec4 d = uvec4(data*100.0);\n    return vec2(uintBitsToFloat(pack_uint2x(d.xy)),\n                uintBitsToFloat(pack_uint2x(d.zw)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//mutate and accumulate\n\n//complex multiplication\nvec2 cmul(vec2 x, vec2 y)\n{\n    return vec2(x.x*y.x - x.y*y.y, x.x*y.y + x.y*y.x);\n}\n\nvec4 orbit_mandelbrot(vec2 p, vec2 c)\n{\n    vec2 z = vec2(0.); \n    float orbit = 0.;\n    int i = 0;\n    for(;i<max_iterations; i++)\n    {\n        z = cmul(z,z) + c;\n        vec2 m2 = (z - vec2(p.x, -p.y))/point_size; //reflect to make it 2x faster\n        vec2 m1 = (z-p)/point_size;\n        orbit += 1. - (1.0 - 1.0/(1.0 + dot(m1,m1)))*(1.0 - 1.0/(1.0 + dot(m1,m1))); //render the point\n        if(length(z) > 3.0) break; //outside\n    }\n    float x = float(i);\n    return smoothstep(x, x+1.0, color_threshholds)*orbit/(1.+dot(p - center, p-center));\n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    rng_initialize(p, iFrame);\n\n    //position on the complex plane\n    vec2 z = scale*(p - iResolution.xy*0.5)/iResolution.yy + center;\n\n    vec4 prev = texelFetch(iChannel0, pixel, 0);\n    vec2 z0 = prev.xy;\n    float prev_orbit = orbit_mandelbrot(z, z0).w;\n    vec4 accum = decode(prev.zw);\n  \n    if(iFrame < 1) \n    {\n        prev_orbit = 0.0;\n        z0 = z + 2.0*rand2() - 1.0;\n        accum = vec4(0.000,0.000,0.000,0.000);\n    }\n  \n    for(int i = 0; i < spp; i++)\n    {\n        //mutate position\n        vec2 z1 = nrand2((prev_orbit == 0.0 || rand() < global_mut_prob )?global_mut_rad:local_mut_rad, z0);\n        \n        vec4 orbit = orbit_mandelbrot(z, z1);\n        \n        if(orbit.w == 0.0) continue;\n        \n        //metropolis acceptance probability\n        float acceptance_p = min(1.0, orbit.w/(prev_orbit+1e-7));\n        //randomly accept\n        if(rand() < acceptance_p)\n        {\n            z0 = z1;\n            prev_orbit = orbit.w; \n        }\n        \n        accum.xyz += 0.1*orbit.xyz;\n        accum.w += 0.01;\n    }\n    vec2 data = encode(accum);\n    c = vec4(z0,data);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}