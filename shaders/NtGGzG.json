{
    "Shader": {
        "info": {
            "date": "1637846317",
            "description": "perspective variant of [url]https://shadertoy.com/view/NtGGWm [/url]\nmultilayer +cylindrical + 2D variant of lambmeow's [url]https://www.shadertoy.com/view/7lVGWW[/url]\n\nclick for slight fog.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtGGzG",
            "likes": 17,
            "name": "The Cell Void 5 (fake 3D)",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "sdf",
                "cellular",
                "short",
                "void"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "// perspective variant of https://shadertoy.com/view/NtGGWm\n// multilayer variant of https://shadertoy.com/view/NlG3Dw\n// cylindrical variant of https://shadertoy.com/view/flyGDw\n// 2D variant of lambmeow's https://www.shadertoy.com/view/7lVGWW\n\n#define H(v)      fract(1e4*sin((v)*mat2(R,R-71.)))\n#define S(v)      smoothstep(30./R.y,0.,v)\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, P,D,_P, C,\n          U = 10.* ( u+u - R ) / R.y, U0=U;\n    float m = 9.,d, t = iTime, k=8., z=8., r = .4, n=1., _n;\n    O-=O; \n    for( z=32.; z >= 4.; z/=2. ) {                              // several layers\n//  for( n = 2.; n >= 1.; n-=.5 ) {                             // several layers\n        U = U0;\n        U = k*vec2( .995*atan(U.y,U.x), z/length(U) );          // go to cylinder space\n        U.y += n*t;                                             // animation\n        m = 9.;\n        for ( int k=0; k < 9; k++ )                             // jittered point grid distribution\n            D = vec2(k%3,k/3), P = floor(U)+D - H(mod(floor(U)+D,25.)+n/13.),  // NB: cyclical hash\n            d = length(P-U), \n            d < m ? _P=P, _n = n, m = d : m;\n\n        P = _P;\n\n        U = U0;\n        P = k*z/(P.y-_n*t) * cos( P.x/.995/k + vec2(0,-1.57) ); // back to screen space\n        m = length(P-U);\n\n        r = .4*length(U)/10.;                                   // draw disk\n        C = vec2( S(m-r) );                                           // mask\n        C.x = clamp( C.x - .9*S( length(P-U+ U*r/50. ) -r ), 0.,1.); // color = disc - dark disc\n        O =  ( iMouse.z <= 0. ? C.xxxy \n                              : C.xxxy*exp(-vec4(0,1,1,1)/10.*log2(z/4.)) ) // if click, fog\n            + (1.-C.y)*O;                                       // blend\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}