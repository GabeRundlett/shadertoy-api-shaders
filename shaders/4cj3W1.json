{
    "Shader": {
        "info": {
            "date": "1704175317",
            "description": "一个简单的示例，按y轴分城若干行，根据鼠标坐在位置，将所在行区域进行一定的扭曲操作",
            "flags": 0,
            "hasliked": 0,
            "id": "4cj3W1",
            "likes": 0,
            "name": "行扭曲",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 1,
            "username": "dragonfly",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "const float stepLength = 40.0;\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    // fragColor = texture(iChannel0, uv);\n\n\n    float y = fragCoord.y;\n    float id = floor(y / stepLength);\n\n\n    vec2 p = fragCoord.xy;\n    float cc = sdCircle(p - iMouse.xy, 2.0);\n\n\n    float id2 = id + 1.0;\n    float mousey = iMouse.y;\n\n    float u = fragCoord.x / iResolution.x;\n    float v = 0.0;\n    vec4 addCol = vec4(0, 0, 0, 0);\n    // 鼠标两条线之间的区域判定\n    if (mousey > id * stepLength && mousey < (id + 1.0) * stepLength) {\n\n        if (y <= mousey) {\n            float d1 = y - id * stepLength;\n            float dd1 = mousey - id * stepLength;\n\n            float rate = d1 / dd1;\n\n            v = (id * stepLength + rate * 0.5 * stepLength) / iResolution.y;\n            \n        } else {\n            float d2 = (id + 1.0) * stepLength - y;\n\n            float dd2 =(id + 1.0) * stepLength - mousey;\n\n            float rate = d2 / dd2;\n            v = (id * stepLength + stepLength - rate * 0.5 * stepLength) / iResolution.y;\n        }\n\n        // 鼠标两条线之间的区域加一点红色显示\n        addCol = vec4(1, 0, 0, 1);\n    } else {\n        v = fragCoord.y / iResolution.y;\n    }\n\n\n    vec4 col = texture(iChannel0, vec2(u, v));\n    fragColor = col;\n    fragColor += addCol;\n    fragColor += smoothstep(0.0, 1.0, -cc);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}