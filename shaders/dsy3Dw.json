{
    "Shader": {
        "info": {
            "date": "1678626547",
            "description": "CC0: The iris \nInspired by twitter again, this time by this tweet: \nhttps://twitter.com/junkiyoshi/status/1634510032955150341?s=20\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dsy3Dw",
            "likes": 24,
            "name": "The iris ",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "// CC0: The iris \n//  Inspired by twitter again, this time by this tweet: \n//  https://twitter.com/junkiyoshi/status/1634510032955150341?s=20\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\nconst float Repetitions = 16.0;\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: shadertoy somewhere, don't remember where\nfloat dfcos(float x) {\n  return sqrt(x*x+1.0)*0.8-1.8;\n}\n\n// License: Unknown, author: Unknown, found: shadertoy somewhere, don't remember where\nfloat dfcos(vec2 p, float freq) {\n  float x = p.x;\n  float y = p.y;\n  x *= freq;\n    \n  float x1 = abs(mod(x+PI,TAU)-PI);\n  float x2 = abs(mod(x   ,TAU)-PI);\n    \n  float a = 0.18*freq;\n    \n  x1 /= max( y*a+1.0-a,1.0);\n  x2 /= max(-y*a+1.0-a,1.0);\n  return (mix(-dfcos(x2)-1.0,dfcos(x1)+1.0,clamp(y*0.5+0.5,0.0,1.0)))/max(freq*0.8,1.0)+max(abs(y)-1.0,0.0)*sign(y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: M책rten R책nge, found: https://github.com/mrange/glsl-snippets\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\n// License: CC0, author: M책rten R책nge, found: https://github.com/mrange/glsl-snippets\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\nfloat modPolar(inout vec2 p, vec2 pp, float add) {\n  const float angle = TAU/Repetitions;\n  pp.y += add;\n  // So very hackish, I am not proud\n  if (pp.y > PI) {\n    pp.y = -2.0*PI+pp.y;\n  }\n  float a = pp.y + angle/2.0;\n  float r = pp.x;\n  float c = floor(a/angle);\n  a = mod(a,angle) - (angle/2.0);\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (Repetitions/2.0)) c = abs(c);\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  const float lw = 0.01;\n  const float begin = 0.0;\n  const float end   = 9.0;\n  const float reps  = end-begin;\n\n  p = p.yx;\n  float aa = 4.0/RESOLUTION.y;\n  vec2 ppp = toPolar(p);\n  \n  vec3 col = vec3(0.25, 0.5, 1.0)*0.1;\n  float d6 = 1E3;\n  float lp = length(p);\n  float llp = dot(p, p);\n  for (float i = begin; i < end; ++i) { \n    vec2 mp = p;\n    float mn = modPolar(mp, ppp, i*(TAU/(Repetitions*reps)));\n    float h0 = hash(3667.0*mn+123.0*i+123.4);\n    float h1 = fract(3677.0*h0);\n    float h2 = fract(8677.0*h0);\n    vec2 mp3 = mp;\n    mp3.x *= 0.9+0.2*llp;\n    mp3.x += -0.04*TIME*mix(1.0, 4.0, h0);\n    float zz = 0.015*mix(3.0, 1.0, h2*h2);\n    mp3 /= zz;\n    float gd = (abs(dfcos(mp3, 1.0))-mix(0.2, 0.0, lp));\n    d6 = min(d6, abs(mp3.y)*zz);\n    vec3 gcol = (1.0+cos(vec3(0.0, 1.0, 2.0)+mix(0.25, 1.0, h1)*(TIME+23.0)))*0.05;\n    col += gcol/max(gd, mix(25E-3, 2E-2, lp));\n  }\n\n  float d0 = lp - 1.0;\n  float d1 = lp - 0.25;\n  float d2 = abs(d0 + lw)-lw;\n  float d3 = abs(d1 + lw)-lw;\n  float d4 = min(d2, d3);\n  float d5 = max(d0+lw, -(d1+lw));\n  d6 = max(d6, -(d0+lw));\n  d6 -= 0.0033;\n\n  col -= vec3(0.0, 1.0, 2.0).zyx*0.33*llp;\n  col = mix(col, 0.075*vec3(0.25, 0.125, 1.0), smoothstep(0.0, -aa, -d5));\n  col = mix(col, (1.0+cos(vec3(0.0, 1.0, 2.0)+2.0*length(p)+abs(ppp.y)-0.5*TIME)), smoothstep(0.0, -aa, d6));\n  col = aces_approx(col);\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, d4));\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = sRGB(col);\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}