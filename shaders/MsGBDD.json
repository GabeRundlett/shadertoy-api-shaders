{
    "Shader": {
        "info": {
            "date": "1529135582",
            "description": "Behold, the best shape.\n\nMouse controls 2 of the 6 rotation parameters. See the code to change the other 4 parameters and see the orthoplex or tesseract.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsGBDD",
            "likes": 13,
            "name": "Orthographic 4D Polytopes",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "4d",
                "polytope"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 789
        },
        "renderpass": [
            {
                "code": "/*\nIf you have a cube, and you make a square pyramid from each face to the center,\nthen turn each pyramid inside out, you get a rhombic dodecahedron. This is a very nice\nshape; its kind of like a combination of a cube and octahedron, except it isn't\nplatonic. If you perform this construction in 4D, however, you do get a platonic solid:\nthe 24-cell! It is also called the octaplex because of its octahedral faces.\nIt's a surprisingly easy exercise to show that this is indeed a platonic solid.\nThe fact that it has octahedral faces makes it easy to see that its Schlafi symbol is\n{3,4,3}, meaning it is also self-dual! And it tiles 4D space for the same reason the\nrhombic dodecahedron tiles 3D space! Thus, it is objectively the best shape.\nIn addition, it shares vertices with a standard tesseract and orthoplex (4D octahedron),\nwhich makes it easy to render all three with the same code.\n*/\n\n#define AA 1\n\nconst bool octaplex = true; //24-cell\nconst bool tesseract = false; //8-cell\nconst bool orthoplex = false; //16-cell\n\n#define speed1 0.1\n#define speed2 0.2\n#define speed3 0.3\n#define speed4 0.4\n\n//cube verts\n#define h1 vec2(0.5, -0.5)\n\n#define v1 h1.xxxx\n#define v2 h1.yxxx\n#define v3 h1.xyxx\n#define v4 h1.xxyx\n#define v5 h1.xxxy\n#define v6 h1.yyxx\n#define v7 h1.xyyx\n#define v8 h1.xxyy\n#define v9 h1.yxxy\n#define v10 h1.xyxy\n#define v11 h1.yxyx\n#define v12 h1.yyyx\n#define v13 h1.yyxy\n#define v14 h1.yxyy\n#define v15 h1.xyyy\n#define v16 h1.yyyy\n\n//pyramid verts\n#define h2 vec3(1, -1, 0)\n\n#define v17 h2.xzzz\n#define v18 h2.yzzz\n#define v19 h2.zxzz\n#define v20 h2.zyzz\n#define v21 h2.zzxz\n#define v22 h2.zzyz\n#define v23 h2.zzzx\n#define v24 h2.zzzy\n\nmat4 rot(float wx, float wy, float wz, float xy, float xz, float yz){\n    mat4 result = mat4(cos(wx), 0, 0, -sin(wx),\n                       0, 1, 0, 0,\n                       0, 0, 1, 0,\n                       sin(wx), 0, 0, cos(wx)\n                       );\n    result *= mat4(1, 0, 0, 0,\n                   0, cos(wy), 0, -sin(wy),\n                   0, 0, 1, 0,\n                   0, sin(wy), 0, cos(wy)\n                   );\n    result *= mat4(1, 0, 0, 0,\n                   0, 1, 0, 0,\n                   0, 0, cos(wz), -sin(wz),\n                   0, 0, sin(wz), cos(wz)\n                   );\n    result *= mat4(cos(xy), -sin(xy), 0, 0,\n                   sin(xy), cos(xy), 0, 0,\n                   0, 0, 1, 0,\n                   0, 0, 0, 1\n                   );\n    result *= mat4(cos(xz), 0, -sin(xz), 0,\n                   0, 1, 0, 0,\n                   sin(xz), 0, cos(xz), 0,\n                   0, 0, 0, 1\n                   );\n    result *= mat4(1, 0, 0, 0,\n                   0, cos(yz), -sin(yz), 0,\n                   0, sin(yz), cos(yz), 0,\n                   0, 0, 0, 1\n                   );\n    return result;\n}\n\nvec3 drawSegment(vec2 p, vec4 vertex1, vec4 vertex2){\n    float d = distance(vertex1.xy, vertex2.xy);\n    float d1 = distance(p, vertex1.xy);\n    float d2 = distance(p, vertex2.xy);\n    \n    if(abs(d - d1 - d2) < 0.0001)\n        return mix(0.5 + vertex1.xyz*inversesqrt(2.0 - 2.0*vertex1.w), 0.5 + vertex2.xyz*inversesqrt(2.0 - 2.0*vertex2.w), d1/d);\n    else return vec3(0);\n}\n\nvec3 render(vec2 fragCoord){\n    vec3 color = vec3(0);\n    \n    vec2 xy = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 m = 2.0*(2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    \n    mat4 rotation =\n        rot(m.x, m.y, speed1*iTime, speed2*iTime, speed3*iTime, speed4*iTime);\n    \n    vec4 c1 = rotation*v1;\n    vec4 c2 = rotation*v2;\n    vec4 c3 = rotation*v3;\n    vec4 c4 = rotation*v4;\n    vec4 c5 = rotation*v5;\n    vec4 c6 = rotation*v6;\n    vec4 c7 = rotation*v7;\n    vec4 c8 = rotation*v8;\n    vec4 c9 = rotation*v9;\n    vec4 c10 = rotation*v10;\n    vec4 c11 = rotation*v11;\n    vec4 c12 = rotation*v12;\n    vec4 c13 = rotation*v13;\n    vec4 c14 = rotation*v14;\n    vec4 c15 = rotation*v15;\n    vec4 c16 = rotation*v16;\n    \n    vec4 p1 = rotation*v17;\n    vec4 p2 = rotation*v18;\n    vec4 p3 = rotation*v19;\n    vec4 p4 = rotation*v20;\n    vec4 p5 = rotation*v21;\n    vec4 p6 = rotation*v22;\n    vec4 p7 = rotation*v23;\n    vec4 p8 = rotation*v24;\n    \n    if(tesseract || octaplex){\n        color += drawSegment(xy, c1, c2);\n        color += drawSegment(xy, c1, c3);\n        color += drawSegment(xy, c1, c4);\n        color += drawSegment(xy, c1, c5);\n    \n        color += drawSegment(xy, c2, c6);\n        color += drawSegment(xy, c2, c9);\n        color += drawSegment(xy, c2, c11);\n        \n        color += drawSegment(xy, c3, c6);\n        color += drawSegment(xy, c3, c7);\n        color += drawSegment(xy, c3, c10);\n        \n        color += drawSegment(xy, c4, c7);\n        color += drawSegment(xy, c4, c8);\n        color += drawSegment(xy, c4, c11);\n\n        color += drawSegment(xy, c5, c8);\n        color += drawSegment(xy, c5, c9);\n        color += drawSegment(xy, c5, c10);\n    \n        color += drawSegment(xy, c6, c12);\n        color += drawSegment(xy, c6, c13);\n    \n        color += drawSegment(xy, c7, c12);\n        color += drawSegment(xy, c7, c15);\n    \n        color += drawSegment(xy, c8, c14);\n        color += drawSegment(xy, c8, c15);\n    \n        color += drawSegment(xy, c9, c13);\n        color += drawSegment(xy, c9, c14);\n    \n        color += drawSegment(xy, c10, c13);\n        color += drawSegment(xy, c10, c15);\n    \n        color += drawSegment(xy, c11, c12);\n        color += drawSegment(xy, c11, c14);\n    \n        color += drawSegment(xy, c16, c12);\n        color += drawSegment(xy, c16, c13);\n        color += drawSegment(xy, c16, c14);\n        color += drawSegment(xy, c16, c15);\n    }\n\n    if(octaplex){\n        color += drawSegment(xy, p1, c1);\n        color += drawSegment(xy, p1, c3);\n        color += drawSegment(xy, p1, c4);\n        color += drawSegment(xy, p1, c5);\n        color += drawSegment(xy, p1, c7);\n        color += drawSegment(xy, p1, c8);\n        color += drawSegment(xy, p1, c10);\n        color += drawSegment(xy, p1, c15);\n    \n        color += drawSegment(xy, p2, c2);\n        color += drawSegment(xy, p2, c6);\n        color += drawSegment(xy, p2, c9);\n        color += drawSegment(xy, p2, c11);\n        color += drawSegment(xy, p2, c12);\n        color += drawSegment(xy, p2, c13);\n        color += drawSegment(xy, p2, c14);\n        color += drawSegment(xy, p2, c16);\n    \n        color += drawSegment(xy, p3, c1);\n        color += drawSegment(xy, p3, c2);\n        color += drawSegment(xy, p3, c4);\n        color += drawSegment(xy, p3, c5);\n        color += drawSegment(xy, p3, c8);\n        color += drawSegment(xy, p3, c9);\n        color += drawSegment(xy, p3, c11);\n        color += drawSegment(xy, p3, c14);\n    \n        color += drawSegment(xy, p4, c3);\n        color += drawSegment(xy, p4, c6);\n        color += drawSegment(xy, p4, c7);\n        color += drawSegment(xy, p4, c10);\n        color += drawSegment(xy, p4, c12);\n        color += drawSegment(xy, p4, c13);\n        color += drawSegment(xy, p4, c15);\n        color += drawSegment(xy, p4, c16);\n    \n        color += drawSegment(xy, p5, c1);\n        color += drawSegment(xy, p5, c2);\n        color += drawSegment(xy, p5, c3);\n        color += drawSegment(xy, p5, c5);\n        color += drawSegment(xy, p5, c6);\n        color += drawSegment(xy, p5, c9);\n        color += drawSegment(xy, p5, c10);\n        color += drawSegment(xy, p5, c13);\n    \n        color += drawSegment(xy, p6, c4);\n        color += drawSegment(xy, p6, c7);\n        color += drawSegment(xy, p6, c8);\n        color += drawSegment(xy, p6, c11);\n        color += drawSegment(xy, p6, c12);\n        color += drawSegment(xy, p6, c14);\n        color += drawSegment(xy, p6, c15);\n        color += drawSegment(xy, p6, c16);\n    \n        color += drawSegment(xy, p7, c1);\n        color += drawSegment(xy, p7, c2);\n        color += drawSegment(xy, p7, c3);\n        color += drawSegment(xy, p7, c4);\n        color += drawSegment(xy, p7, c6);\n        color += drawSegment(xy, p7, c7);\n        color += drawSegment(xy, p7, c11);\n        color += drawSegment(xy, p7, c12);\n    \n        color += drawSegment(xy, p8, c5);\n        color += drawSegment(xy, p8, c8);\n        color += drawSegment(xy, p8, c9);\n        color += drawSegment(xy, p8, c10);\n        color += drawSegment(xy, p8, c13);\n        color += drawSegment(xy, p8, c14);\n        color += drawSegment(xy, p8, c15);\n        color += drawSegment(xy, p8, c16);\n    }\n\n    else if(orthoplex){\n        color += drawSegment(xy, p1, p3);\n        color += drawSegment(xy, p1, p4);\n        color += drawSegment(xy, p1, p5);\n        color += drawSegment(xy, p1, p6);\n        color += drawSegment(xy, p1, p7);\n        color += drawSegment(xy, p1, p8);\n        \n        color += drawSegment(xy, p2, p3);\n        color += drawSegment(xy, p2, p4);\n        color += drawSegment(xy, p2, p5);\n        color += drawSegment(xy, p2, p6);\n        color += drawSegment(xy, p2, p7);\n        color += drawSegment(xy, p2, p8);\n        \n        color += drawSegment(xy, p3, p5);\n        color += drawSegment(xy, p3, p6);\n        color += drawSegment(xy, p3, p7);\n        color += drawSegment(xy, p3, p8);\n        \n        color += drawSegment(xy, p4, p5);\n        color += drawSegment(xy, p4, p6);\n        color += drawSegment(xy, p4, p7);\n        color += drawSegment(xy, p4, p8);\n        \n        color += drawSegment(xy, p5, p7);\n        color += drawSegment(xy, p5, p8);\n        \n        color += drawSegment(xy, p6, p7);\n        color += drawSegment(xy, p6, p8);\n    }\n    \n    return color;\n}\n    \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = vec4(vec3(0), 1);\n    \n    for(int i = 0; i < AA; i++){\n        for(int j = 0; j < AA; j++){\n            fragColor.rgb += render(fragCoord + vec2(i, j));\n        }\n    }\n    fragColor /= float(AA*AA);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}