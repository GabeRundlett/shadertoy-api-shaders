{
    "Shader": {
        "info": {
            "date": "1723736019",
            "description": "inspiration https://zalo.github.io/blog/constraints/",
            "flags": 32,
            "hasliked": 0,
            "id": "XcfBD4",
            "likes": 4,
            "name": "push points",
            "published": 3,
            "tags": [
                "pointsbuffer"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 106
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 f_n_o_rnd_hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_res = iResolution.xy;\n    float n_scl_min = min(o_res.x, o_res.y);\n    vec2 o_trn = (fragCoord.xy-o_res*.5)/n_scl_min;\n    vec2 o_trn_mou = (iMouse.xy-o_res*.5)/n_scl_min;\n    vec2 o_trn1 = fragCoord/iResolution.xy;\n    float naa = 1./n_scl_min;\n    \n    float n_its = 100.;\n    if(iFrame == 0){\n        fragColor = vec4(\n            f_n_o_rnd_hash22(fragCoord.xy),\n            f_n_o_rnd_hash22(fragCoord.yx)\n        )-.5;\n        //fragColor = vec4(0.);\n        return;\n    }\n    float nr1 = (0.5/n_its*10.);\n    float nr2 = 0.1;\n\n    \n    if(fragCoord.y < 1.){\n        vec4 o2 = texture(iChannel0, o_trn1);\n        float nr3 = nr1*(o2.z+.5)+nr2;\n        vec2 ob = o2.xy-o_trn_mou;\n        vec4 o3 = o2;\n        float nl = length(ob);\n        float nd = nl-nr3;\n        if(nl < (nr3)){\n            o3.xy = o_trn_mou.xy + nr3*normalize(ob);\n        }\n        fragColor = o3;\n        return;\n    }\n\n    float n2t = length(o_trn-o_trn_mou);\n    float n2 = smoothstep(nr2, nr2+naa*2., n2t);\n    float n22 = smoothstep(naa*2., 0., abs(n2t-nr2)); \n    float n_min = 1.;\n    float n_min2 = 1.;\n    float n_it_nor_one = 1./n_its;\n    float nw = 0.;\n    for(float n_it_nor = 0.; n_it_nor < 1.; n_it_nor+=n_it_nor_one){\n        vec4 o2 = texelFetch(\n            iChannel0,\n            ivec2(int(n_it_nor*iResolution.x), 0),\n        0);\n\n        vec2 o = o_trn.xy - (o2.xy);\n        float n = length(o);\n        float nrt = nr1*(o2.z+.5);\n        float n2 = smoothstep(0., naa*5., abs(n-nrt)); \n        n = smoothstep(nrt, nrt+naa*2., n);\n        n_min = min(n_min, n);\n        n_min2 = min(n_min2, n2);\n        nw += clamp(1.-n2, 0., 1.);\n        nw *= clamp(n_min, 0., 1.);\n    }\n\n\n    fragColor = vec4(\n        n_min\n        * n2*.2\n        +n22\n        +nw\n    );\n    \n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}