{
    "Shader": {
        "info": {
            "date": "1460491434",
            "description": "Wait a few seconds for it to get started. 3D raymarched reaction-diffusion, using a propagating L1 distance field. Mouse controls the camera, spacebar resets.",
            "flags": 48,
            "hasliked": 0,
            "id": "MscXzS",
            "likes": 26,
            "name": "Lung Morphogenesis Glass",
            "published": 3,
            "tags": [
                "volumetric",
                "diffusion",
                "reaction",
                "lung",
                "morphogenesis"
            ],
            "usePreview": 0,
            "username": "cornusammonis",
            "viewed": 1956
        },
        "renderpass": [
            {
                "code": "/*\n\t\n\tLung Morphogenesis Glass \n\n\tThis is a reaction-diffusion model of lung morphogenesis, raymarched using a propagating\n    L1 distance field, and rendered with a glass shader. \n\n    For more information on the lung morphogenesis model see this paper:\n\n\thttp://journals.plos.org/plosone/article?id=10.1371/journal.pone.0102718\n\n\tBuffer A contains the 3D reaction-diffusion system, and Buffer B contains the gradients\n    of the reaction-diffusion system (used to improve the stability). \n\tBuffer C contains a propagating distance field derived from a 3D level set (3D contours) \n\ton the voxel data in Buffer A. \n\n\tPacking and volume sampling is based on Paniq's Light Propagation Volume shadertoy here:\n\n\thttps://www.shadertoy.com/view/XdtSRn\n    \n\n*/\n\n#define AA_SAMPLES 1\n#define SCALE 0.18\n\n#define PI 3.14159265359\n\nconst vec3 size = vec3(48.0);\n\nfloat packfragcoord2 (vec2 p, vec2 s) {\n    return floor(p.y) * s.x + p.x;\n}\nvec2 unpackfragcoord2 (float p, vec2 s) {\n    float x = mod(p, s.x);\n    float y = (p - x) / s.x + 0.5;\n    return vec2(x,y);\n}\nfloat packfragcoord3 (vec3 p, vec3 s) {\n    return floor(p.z) * s.x * s.y + floor(p.y) * s.x + p.x;\n}\nvec3 unpackfragcoord3 (float p, vec3 s) {\n    float x = mod(p, s.x);\n    float y = mod((p - x) / s.x, s.y);\n    float z = (p - x - floor(y) * s.x) / (s.x * s.y);\n    return vec3(x,y+0.5,z+0.5);\n}\n\nvec4 fetch(vec3 p) {\n    p = clamp(p, vec3(0.5), size - 0.5);\n    float posidx = packfragcoord3(p, size);\n    vec2 uv = unpackfragcoord2(posidx, iChannelResolution[0].xy) / iChannelResolution[0].xy;\n    return textureLod(iChannel0, uv, 0.0);    \n}\n\n// branchless range check\nfloat inrange(float x, float min, float max) {\n    return abs(0.5 * (sign(max - x)  + sign(x - min)));   \n}\n\nfloat inrange(vec3 x, vec3 min, vec3 max) {\n    return inrange(x.x, min.x, max.x) * inrange(x.y, min.y, max.y) * inrange(x.z, min.z, max.z);  \n}\n\n// bounding box\nbool box(vec3 ro, vec3 rd, vec3 lb, vec3 rt, out float t) {\n    vec3 inv = 1.0 / rd;\n    \n    vec3 t0 = (lb - ro) * inv;\n    vec3 t1 = (rt - ro) * inv;\n    \n    vec3 max0 = max(t0, t1);\n    vec3 min0 = min(t0, t1);\n    \n    float tmax = min(min(max0.x, max0.y), max0.z);\n    float tmin = max(max(min0.x, min0.y), min0.z);\n\n    t = tmin;\n\n    return (tmax < 0.0 || tmin > tmax) ? false : true;\n}\n\nvec2 sample_trilin(vec3 p) {\n    p = p * size;\n    const vec3 off = vec3(0.5);\n    float inr = inrange(p, off, size - off);\n    vec3 pc = clamp(p, off, size - off);\n\n    vec2 e = vec2(0.0,1.0);\n    vec4 p000 = fetch(pc + e.xxx);\n    vec4 p001 = fetch(pc + e.xxy);\n    vec4 p010 = fetch(pc + e.xyx);\n    vec4 p011 = fetch(pc + e.xyy);\n    vec4 p100 = fetch(pc + e.yxx);\n    vec4 p101 = fetch(pc + e.yxy);\n    vec4 p110 = fetch(pc + e.yyx);\n    vec4 p111 = fetch(pc + e.yyy);\n\n    vec3 w = fract(pc);\n\n    vec3 q = 1.0 - w;\n\n    vec2 h = vec2(q.x,w.x);\n    vec4 k = vec4(h*q.y, h*w.y);\n    vec4 s = k * q.z;\n    vec4 t = k * w.z;\n        \n    vec4 tril = \n          p000*s.x + p100*s.y + p010*s.z + p110*s.w\n        + p001*t.x + p101*t.y + p011*t.z + p111*t.w;\n    \n    return vec2(tril.x, inr);\n\n}\n\nvec3 rayToTexture( vec3 p ) {\n    return (p*SCALE + vec3(0.5,0.5,0.5));\n}\n\nvec2 doModel( vec3 p ) {\n    p = rayToTexture(p);\n    return sample_trilin(p);  \n}\n\nbool doBox( vec3 ro, vec3 rd, out float t ) {\n    ro = rayToTexture(ro);\n    vec3 b = vec3(0.0);\n    bool res = box(ro, rd, b, 1.0 - b, t);\n    t = (1.0/SCALE) * t;\n    return res;\n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;           // max trace distance\n\tconst float precis = 1.0;          // precision of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float wentInside = 0.0;\n    for( int i=0; i<200; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) {\n            wentInside = 1.0;\n            break;\n        }\n        float d = doModel(ro+rd*t).x;\n        float inside = doModel(ro+rd*t).y;\n        if (inside < 0.5) {\n        \tt += 0.01;    \n        } else {\n            t += 0.01 * d;\n            h = d;\n        }\n    }\n\n    if( t<maxd ) return vec2(t, wentInside);\n    return vec2(res, 0.0);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\t// precision of the normal computation\n    const float eps = 0.01;           \n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n// filmic gamma function by Paniq\nvec3 ff_filmic_gamma3(vec3 linear) {\n    vec3 x = max(vec3(0.0), linear-0.004);\n    return (x*(x*6.2+0.5))/(x*(x*6.2+1.7)+0.06);\n}\n\nvec3 texCube(vec3 rd) {\n \treturn pow(texture(iChannel1, rd * vec3(1.0, -1.0, 1.0)).xyz, vec3(2.0));   \n}\n\n// Fresnel factor from TambakoJaguar's Diamond Test shader here: https://www.shadertoy.com/view/XdtGDj\n// see also: https://en.wikipedia.org/wiki/Schlick's_approximation\nfloat fresnel(vec3 ray, vec3 norm, float n2)\n{\n   float n1 = 1.0;\n   float angle = clamp(acos(-dot(ray, norm)), -3.14/2.15, 3.14/2.15);\n   float r0 = pow((n1-n2)/(n1+n2), 2.);\n   float r = r0 + (1. - r0)*pow(1. - cos(angle), 5.);\n   return clamp(0., 1.0, r);\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec4 m ) {\n    if (max(m.z, m.w) <= 0.0) {\n    \tfloat an = 1.5 + sin(time * 0.1) * 4.0;\n\t\tcamPos = vec3(6.5*sin(an), 0.0 ,6.5*cos(an));\n    \tcamTar = vec3(0.0,0.0,0.0);        \n    } else {\n    \tfloat an = 10.0 * m.x - 5.0;\n\t\tcamPos = vec3(6.5*sin(an),10.0 * m.y - 5.0,6.5*cos(an));\n    \tcamTar = vec3(0.0,0.0,0.0);\n    }\n}\n\nvec3 doBackground( void ) {\n    return vec3( 0.0, 0.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec4 m = vec4(iMouse.xy/iResolution.xy, iMouse.zw);\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n    \n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n    // delta for antialiasing\n    float dh = (0.666 / iResolution.y);\n\n\tvec3 colmin, colmax, colavg, colavg2, col = vec3(0.0);\n    \n    vec3 cols[AA_SAMPLES];\n    \n    const float rads = 6.283185 / float(AA_SAMPLES);\n    \n    for (int i = 0; i < AA_SAMPLES; i++) {\n        \n        // create view ray\n        vec2 dxy = dh * vec2(cos(float(i) * rads), sin(float(i) * rads));\n        vec3 rd = normalize( camMat * vec3(p.xy + dxy,2.0)); // 2.0 is the lens length\n\t\tvec3 tc = texCube(rd);\n        \n        float t;\n        if (doBox(ro, rd, t)) {\n        \tro = ro + t * rd;\n            \n            // raymarch\n        \tvec2 res = calcIntersection( ro, rd );\n            if (res.y == 0.0) {\n            \tt = -1.0;    \n            } else {\n            \tt = res.x;    \n            }\n        } else {\n        \tt = -1.0;    \n        }\n        \n\n        if( t>-0.5 )\n        {\n            // geometry\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            \n            // vec3 tc = doLighting( pos, nor, rd, t, mal );\n            vec3 refl = texCube(reflect(rd, nor));\n            vec3 refr = texCube(refract(rd, nor, 0.7));\n            float f = fresnel( rd, nor, 1.2 );\n            float atten = sqrt(abs(dot(rd, nor)));\n            \n            tc = mix(atten * refr, refl, f);\n        }\n        \n        if (i == 0) {\n            colmin = tc;   \n            colmax = tc; \n        }\n\n        colmin = min(colmin, tc);\n        colmax = max(colmax, tc);\n        colavg += tc;\n        cols[i] = tc;\n    }\n    \n    colavg /= float(AA_SAMPLES);\n    \n    /* \n\t\tOutlier rejection, cleans up some artifacts when AA is used.\n        This process could be iterated an arbitrary number of times\n\t\tto get convergence, but doing it twice seems to be sufficient.\n    */ \n    float sum = 0.0;\n    for (int i = 0; i < AA_SAMPLES; i++) {\n    \tvec3 x = cols[i];\n        float w = exp(-length(x - colavg) / 0.2);\n        colavg2 += w * x;\n        sum += w;\n    }\n    \n    colavg2 /= sum;\n    \n    float sum2 = 0.0;\n    for (int i = 0; i < AA_SAMPLES; i++) {\n    \tvec3 x = cols[i];\n        float w = exp(-length(x - colavg2) / 0.2);\n        col += w * x;\n        sum2 += w;\n    }\n    \n    col /= sum2;\n\n\tcol = ff_filmic_gamma3(col);\n\t   \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Except for the timestep, these constants should be the same in Buffer A and Buffer B\n\nconst vec3 size = vec3(48.0);\n\nconst float timestep = 0.3;\nconst float scale = 4.0;\nconst float Eps = 1.2;\nconst float rH = 0.00003;\nconst float rA = 0.03;\nconst float D = 0.004;\nconst float C = 0.002;\nconst float M = 0.16;\nconst float N = 0.04;\nconst float Cz = 0.02;\nconst float G = 0.02;\nconst float E = 0.1;\nconst float F = 10.0;\nconst float D_a = 0.02;\nconst float D_h = 0.26;\nconst float D_s = 0.06;\nconst float tc = 0.1;\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\n// boundary condition for the RD system, semi-arbitrary\nconst vec4 boundary = vec4(0.0, 0.007, 1.0, 0.0);\n\nfloat packfragcoord2 (vec2 p, vec2 s) {\n    return floor(p.y) * s.x + p.x;\n}\n\nvec2 unpackfragcoord2 (float p, vec2 s) {\n    float x = mod(p, s.x);\n    float y = (p - x) / s.x + 0.5;\n    return vec2(x,y);\n}\n\nfloat packfragcoord3 (vec3 p, vec3 s) {\n    return floor(p.z) * s.x * s.y + floor(p.y) * s.x + p.x;\n}\n\nvec3 unpackfragcoord3 (float p, vec3 s) {\n    float x = mod(p, s.x);\n    float y = mod((p - x) / s.x, s.y);\n    float z = (p - x - floor(y) * s.x) / (s.x * s.y);\n    return vec3(x,y+0.5,z+0.5);\n}\n\nvec4 fetchA(vec3 p) {\n    if ((min(p.x,min(p.y,p.z)) < 0.5) || (max(p.x,max(p.y,p.z)) > (size.x - 0.5))) {\n        return boundary;\n    }\n    float posidx = packfragcoord3(p, size);\n    vec2 uv = unpackfragcoord2(posidx, iChannelResolution[0].xy) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 fetchB(vec3 p) {\n    if ((min(p.x,min(p.y,p.z)) < 0.5) || (max(p.x,max(p.y,p.z)) > (size.x - 0.5))) {\n        // boundary condition for the deltas\n        return vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    float posidx = packfragcoord3(p, size);\n    vec2 uv = unpackfragcoord2(posidx, iChannelResolution[0].xy) / iChannelResolution[0].xy;\n    return texture(iChannel1, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float posidx = packfragcoord2(fragCoord.xy, iResolution.xy);\n    vec3 pos = unpackfragcoord3(posidx, size);\n    vec3 e = vec3(-1.0,0.0,1.0);\n    vec4 x = fetchA(pos);\n    \n    vec4 d_x = fetchB(pos);\n\n    // 27-point laplacian\n    vec4 wv = vec4(-88.0/26.0, 6.0/26.0, 3.0/26.0, 2.0/26.0);\n    vec4 lapl = vec4(0.0);\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            for (int k = -1; k <= 1; k++) {\n                vec3 p = vec3(float(i), float(j), float(k));\n                float w = wv[i*i + j*j + k*k];\n                lapl += w * fetchA(pos + p);\n            }\n        }\n    }\n    \n    float a = x.x;\n    float b = x.y;\n    float c = x.z;\n    float d = x.w;\n    \n    if(iFrame<10 || reset()) {\n        float sphere = exp(-pow(distance(pos, size/2.0), 2.0)*2.0);        \n        fragColor = vec4(boundary + vec4(vec3(0.0), sphere));\n    } else {\n\n        float d_a = C*a*a*c/b - M*a + scale*D_a*lapl.x + rA*d;\n        float d_b = C*a*a*c - N*b + scale*D_h*lapl.y + rH*d;\n        float d_c = Cz - G*c - Eps*d*c + scale*D_s*lapl.z;\n        float d_d = D*a - E*d + d*d / (1.0 + F*d*d);\n\n        a += timestep * (tc * d_x.x + (1.0 - tc) * d_a);\n        b += timestep * (tc * d_x.y + (1.0 - tc) * d_b);\n        c += timestep * (tc * d_x.z + (1.0 - tc) * d_c);\n        d += timestep * (tc * d_x.w + (1.0 - tc) * d_d);\n\n        fragColor = vec4(a, b, c, d);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Except for the timestep, these constants should be the same in Buffer A and Buffer B\n\nconst vec3 size = vec3(48.0);\n\n//const float timestep = 0.3;\nconst float scale = 4.0;\nconst float Eps = 1.2;\nconst float rH = 0.00003;\nconst float rA = 0.03;\nconst float D = 0.004;\nconst float C = 0.002;\nconst float M = 0.16;\nconst float N = 0.04;\nconst float Cz = 0.02;\nconst float G = 0.02;\nconst float E = 0.1;\nconst float F = 10.0;\nconst float D_a = 0.02;\nconst float D_h = 0.26;\nconst float D_s = 0.06;\nconst float tc = 0.1;\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\n// boundary condition for the RD system, semi-arbitrary\nconst vec4 boundary = vec4(0.0, 0.007, 1.0, 0.0);\n\nfloat packfragcoord2 (vec2 p, vec2 s) {\n    return floor(p.y) * s.x + p.x;\n}\n\nvec2 unpackfragcoord2 (float p, vec2 s) {\n    float x = mod(p, s.x);\n    float y = (p - x) / s.x + 0.5;\n    return vec2(x,y);\n}\n\nfloat packfragcoord3 (vec3 p, vec3 s) {\n    return floor(p.z) * s.x * s.y + floor(p.y) * s.x + p.x;\n}\n\nvec3 unpackfragcoord3 (float p, vec3 s) {\n    float x = mod(p, s.x);\n    float y = mod((p - x) / s.x, s.y);\n    float z = (p - x - floor(y) * s.x) / (s.x * s.y);\n    return vec3(x,y+0.5,z+0.5);\n}\n\nvec4 fetchA(vec3 p) {\n    if ((min(p.x,min(p.y,p.z)) < 0.5) || (max(p.x,max(p.y,p.z)) > (size.x - 0.5))) {\n        return boundary;\n    }\n    float posidx = packfragcoord3(p, size);\n    vec2 uv = unpackfragcoord2(posidx, iChannelResolution[0].xy) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 fetchB(vec3 p) {\n    if ((min(p.x,min(p.y,p.z)) < 0.5) || (max(p.x,max(p.y,p.z)) > (size.x - 0.5))) {\n        // boundary condition for the deltas\n        return vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    float posidx = packfragcoord3(p, size);\n    vec2 uv = unpackfragcoord2(posidx, iChannelResolution[0].xy) / iChannelResolution[0].xy;\n    return texture(iChannel1, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float posidx = packfragcoord2(fragCoord.xy, iResolution.xy);\n    vec3 pos = unpackfragcoord3(posidx, size);\n    vec3 e = vec3(-1.0,0.0,1.0);\n    vec4 x = fetchA(pos);\n    \n    vec4 d_x = fetchB(pos);\n    \n    // 27-point laplacian\n    vec4 wv = vec4(-88.0/26.0, 6.0/26.0, 3.0/26.0, 2.0/26.0);\n    vec4 lapl = vec4(0.0);\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            for (int k = -1; k <= 1; k++) {\n                vec3 p = vec3(float(i), float(j), float(k));\n                float w = wv[i*i + j*j + k*k];\n                lapl += w * fetchA(pos + p);\n            }\n        }\n    }\n    \n    float a = x.x;\n    float b = x.y;\n    float c = x.z;\n    float d = x.w;\n    \n    if(iFrame<10 || reset()) {\n        float sphere = exp(-pow(distance(pos, size/2.0), 2.0)*2.0);\n        fragColor = vec4(boundary + vec4(vec3(0.0), sphere));\n    } else {\n    \n        float d_a = C*a*a*c/b - M*a + scale*D_a*lapl.x + rA*d;\n        float d_b = C*a*a*c - N*b + scale*D_h*lapl.y + rH*d;\n        float d_c = Cz - G*c - Eps*d*c + scale*D_s*lapl.z;\n        float d_d = D*a - E*d + d*d / (1.0 + F*d*d);\n\n        a = tc * d_x.x + (1.0 - tc) * d_a;\n        b = tc * d_x.y + (1.0 - tc) * d_b;\n        c = tc * d_x.z + (1.0 - tc) * d_c;\n        d = tc * d_x.w + (1.0 - tc) * d_d;\n\n        fragColor = vec4(a, b, c, d);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265359\n\nconst vec3 size = vec3(48.0);\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nfloat packfragcoord2 (vec2 p, vec2 s) {\n    return floor(p.y) * s.x + p.x;\n}\nvec2 unpackfragcoord2 (float p, vec2 s) {\n    float x = mod(p, s.x);\n    float y = (p - x) / s.x + 0.5;\n    return vec2(x,y);\n}\nfloat packfragcoord3 (vec3 p, vec3 s) {\n    return floor(p.z) * s.x * s.y + floor(p.y) * s.x + p.x;\n}\nvec3 unpackfragcoord3 (float p, vec3 s) {\n    float x = mod(p, s.x);\n    float y = mod((p - x) / s.x, s.y);\n    float z = (p - x - floor(y) * s.x) / (s.x * s.y);\n    return vec3(x,y+0.5,z+0.5);\n}\n\nvec4 fetch_rd(vec3 p) {\n    p = clamp(p, vec3(0.5), size - 0.5);\n    float posidx = packfragcoord3(p, size);\n    vec2 uv = unpackfragcoord2(posidx, iChannelResolution[0].xy) / iChannelResolution[0].xy;\n    return textureLod(iChannel0, uv, 0.0);\n}\n\nvec4 fetch_df(vec3 p) {\n    p = clamp(p, vec3(0.5), size - 0.5);\n    float posidx = packfragcoord3(p, size);\n    vec2 uv = unpackfragcoord2(posidx, iChannelResolution[0].xy) / iChannelResolution[0].xy;\n    return textureLod(iChannel1, uv, 0.0);    \n}\n\nfloat inrange(float x, float min, float max) {\n    return abs(0.5 * (sign(max - x) + sign(x - min)));   \n}\n\nvec4 max6(vec4 n[6]) {\n    vec4 m0 = max(n[0], n[1]);\n    vec4 m1 = max(n[2], n[3]); \n    vec4 m2 = max(n[4], n[5]);\n    return max(m0, max(m1, m2));\n}\n\nvec4 min6(vec4 n[6]) {\n    vec4 m0 = min(n[0], n[1]);\n    vec4 m1 = min(n[2], n[3]); \n    vec4 m2 = min(n[4], n[5]);\n    return min(m0, min(m1, m2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 n[6];\n    vec4 d[6];\n    \n    float posidx = packfragcoord2(fragCoord.xy, iResolution.xy);\n    vec3 pos = unpackfragcoord3(posidx, size);\n    vec3 e = vec3(-1.0,0.0,1.0);\n    vec4 x = fetch_rd(pos);\n    n[0] = fetch_rd(pos + e.xyy);\n    n[1] = fetch_rd(pos + e.zyy);\n    n[2] = fetch_rd(pos + e.yxy);\n    n[3] = fetch_rd(pos + e.yzy);\n    n[4] = fetch_rd(pos + e.yyx);\n    n[5] = fetch_rd(pos + e.yyz);\n    \n    d[0] = fetch_df(pos + e.xyy);\n    d[1] = fetch_df(pos + e.zyy);\n    d[2] = fetch_df(pos + e.yxy);\n    d[3] = fetch_df(pos + e.yzy);\n    d[4] = fetch_df(pos + e.yyx);\n    d[5] = fetch_df(pos + e.yyz);\n    \n    vec4 rd_max = max6(n);\n    vec4 rd_min = min6(n);\n    \n    vec4 df_min = min6(d);\n    \n\t// contour level for the distance field\n    float contour = 0.03;\n    \n    // check if the contour line lies between this voxel and its neighbors\n    float r0 = inrange(contour, x.x, rd_min.x); \n    float r1 = inrange(contour, x.x, rd_max.x);\n    \n    float r = sign(r0 + r1);\n    \n    float xminmin = min(x.x, rd_min.x);\n    float xminmax = max(x.x, rd_min.x);\n    float xmaxmin = min(x.x, rd_max.x);\n    float xmaxmax = max(x.x, rd_max.x);\n    \n    float d0 = xminmax - xminmin;\n    float d1 = xmaxmax - xmaxmin;\n    \n    float c0 = (d0 == 0.0 ? 0.0 : r0 * abs(contour - x.x) / d0);\n    float c1 = (d1 == 0.0 ? 0.0 : r1 * abs(contour - x.x) / d1);\n    float c2 = (d0 == 0.0 || d1 == 0.0) ? 0.0 : r0 * r1 * max(c0, c1);\n    \n    // anti-alias the distance field by computing distance from the center point to the contour\n    float dist = \n    \tc0 + c1 - c2;\n    \n    float distance = r * dist + (1.0 - r) * (df_min.x + 1.0);\n    if(iFrame<10 || reset()) {\n        fragColor = vec4(10.0);\n    } else {\n    \tfragColor = vec4(distance);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}