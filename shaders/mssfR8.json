{
    "Shader": {
        "info": {
            "date": "1688468553",
            "description": "All year long I'm going to just focus on truchet tiles and the likes! \n\nMouse click to see grid",
            "flags": 0,
            "hasliked": 0,
            "id": "mssfR8",
            "likes": 17,
            "name": "Year of Truchets #046",
            "published": 3,
            "tags": [
                "2d",
                "mod",
                "truchet",
                "pattern",
                "tile"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #046\n    07/04/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n*/\n\n#define R iResolution\n#define T iTime\n#define M iMouse\n\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\n#define MIN_DIST    1e-4\n#define MAX_DIST    50.\n\nfloat hash21(vec2 p){ return fract(sin(dot(p,vec2(26.34,45.32)))*4324.23); }\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat scale = 8.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-R.xy)/max(R.x,R.y);\n    vec3 C = vec3(.005);\n    vec2 vv = uv;\n    \n    //split screen\n\n    if(vv.x>-.3) {\n        uv = uv-vec2(.3535,0);\n        uv.x -= .25;\n        uv /= uv.x*uv.x + uv.y*uv.y;\n        uv.x += 2.;\n\n        uv *= rot(-T*.11);\n        uv = vec2(log(length(uv)), atan(uv.y, uv.x))*.6365;//.3175\n    }else{\n        uv = uv+vec2(.635,0);\n        uv *= rot(-T*.11);\n        uv = vec2(log(length(uv)), atan(uv.y, uv.x))*.6365;//.3175\n    }\n\n    uv.x -= T*.15;\n    \n    float px = fwidth(uv.x)*PI2;\n    \n    vec2 id=floor(uv*scale);\n    float ck=mod(id.x+id.y,2.)*2.-1.;\n    //using mod on the id's to skip sections\n    //or replace with horz/vert lines to increase\n    //the visual space. Click mouse to see grid.\n    \n    //mod vars to mix things up\n    float m = floor(mod(T*.085+id.y,5.)+1.);//1.75;//\n    float n = floor(mod(T*.1+id.x,6.)+1.);//2.15;//\n    //mod for long slices\n    vec2 cd=vec2(mod(id.x,n),mod(id.y,m))*2.-1.;\n\n    uv=fract(uv*scale)-.5;\n    \n    float hs = hash21(id);\n    if(hs>.5) uv.x=-uv.x;\n    \n    float rd = fract(hs*37.39);\n    \n    vec2 p = length(uv-.5) < length(uv+.5) ? uv-.5 : uv+.5;\n    \n    float d = length(p)-.5;\n    float l = abs(max(abs(uv.x),abs(uv.y))-.5)-.01;\n    \n    if(rd>.85) d = min(length(uv.x),length(uv.y));\n    //skip section logic\n    if(cd.x>.5 ) d = length(uv.y);\n    if(cd.y>.5 ) d = length(uv.x);\n    if(cd.y>.5 && cd.x>.5) d = 1.;\n    \n    C = mix(C,vec3(0,.9,.1),smoothstep(px,-px,abs(d)-.15));\n    C = mix(C,vec3(.4,0,.9),smoothstep(px,-px,abs(abs(d)-.35)-.1));\n    \n    if(M.z>0.) C = mix(C,vec3(.1),smoothstep(px,-px,l));\n    if(vv.x<-.3&&vv.x>-.305) C = vec3(0,.9,.1);\n    \n    // Gamma & Output\n    C = pow(C,vec3(.4545));\n    fragColor = vec4(C,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}