{
    "Shader": {
        "info": {
            "date": "1676876661",
            "description": "A zellij tile pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "dd3GRn",
            "likes": 12,
            "name": "Zellij pattern (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "zellige"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //fract(a)*fract(fract(a)*fract(a))\n        //abs(fract(a*2.+.5)/2.+fract(a+.5)/2.)\n\n        //max(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n        //fract(a+fract(a*2.+.5)/2.)\n        //fract(a-fract(a*4.)/2.)\n        //min(abs(fract(a)-.5),abs(fract(a*2.)-.5))\n        //fract(a-.5+mod(floor(a.x*2.),2.)/2.)\n        //abs(fract(a)-fract(-a/2.)/2.)\n        //abs(fract(a)-abs(.5-fract(a)))\n    ;\n}\n\nvec2 triangle_wave1(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //-vec2(1.,0.5)\n        //vec2(1.-sign(a.x)/2.,0.5+sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //sqrt(abs(f1((a1)*(a2.x+a2.y))-.5))\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    return\n        triangle_wave1(a)\n        //(triangle_wave1(a.yx)+triangle_wave1(a))/2.\n        //triangle_wave1(a-triangle_wave1(a+.5)/1.5)\n        //triangle_wave1(a+.5*floor(a.x))\n    ;\n}\n\nfloat binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n\n#define triwave(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave((.5 - length( min(p=fract(p*sign(triwave1(c*c.y))), 1.-p.yx) )));\n}\n\nvec3 fractal(vec2 uv,vec2 t2){\n    vec3 col = vec3(0.);\n    bool b = uv.y>uv.x;\n    for(int k = 0; k < 6; k++){\n        \n        //WOW!\n        //uv = (uv*1.5)-.5;\n        \n        \n        //uv.x += t1_(uv,floor(uv))*3.;\n        //uv.y += .25*sign(uv.x-uv.y);\n\n        \n        //if((k) % 3 == 0) uv *= 1.5;\n        //if(uv.x<uv.y && k%5 == 0) {uv = -uv;}\n    \n        //uv.x += float(int(uv.x*2.)<<2)/8.;\n        //k += int(uv.y>uv.x);\n\n        //if(uv.y>0.) uv.x += .5;\n        //else uv.y += .5;\n        //if((k) % 3 == 0 && abs(t2.x)<abs(t2.y)) uv *= 1.5;\n        \n        //uv += binary_digit(k+1,2)/2.;\n        \n        //if(uv.y>uv.x)\n        uv =\n            abs(.5+uv+t2)/1.5\n            //-sign(uv/1.5-t2)-abs(.5+uv/1.5+t2)\n            //abs(max(uv.yx,t2)+t2)\n            //abs(.5+abs(uv)/1.5-t2)\n            //abs(.5+uv+max(t2,uv/1.5))/1.5\n            //abs(.5+max(uv/1.5,t2)+t2)\n            //abs(.5+uv+max(1.-t2/2.,1.-uv/4.))/1.5\n            //abs(.5+uv+t2/1.5)\n            //abs(.5+uv/1.5+t2)\n            //abs(.5*sign(uv.y-uv.x)+uv+t2)/1.5\n            //max(abs(.5+uv+t2),abs(-.5+uv+t2))/1.5\n            //(uv+t2)/1.5\n            //abs(.5+uv*mod(floor(-uv.x*4.),2.)+t2)/1.5\n        ;\n        \n        //uv.x -= .5;\n        //uv += sign(uv-uv.yx)/2.+.5;\n        //if(t2.y<t2.x)\n        b =\n            uv.y>uv.x\n            //uv.y>uv.x+float(t2.y<t2.x)\n            //uv.y>uv.x || b\n        ;\n        if(\n            b\n            //uv.y<uv.x && t2.x > t2.y\n            //uv.y>uv.x || t2.x < t2.y\n        ) uv = uv.yx;\n        //else k += 1;\n\n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv-.5*sign(uv.x-.5)-sign(t2.x-.5))\n            //-triangle_wave(uv-.5)*sign(.5-uv.x)\n        ;\n        //if(t2.y>t2.x) t2 = t2.yx;\n        uv =\n            t2-triangle_wave(uv.yx)\n            //t2+triangle_wave(uv.yx-floor(.5+t2.y+t2.x))\n        ;\n        \n        //uv += (uv-ceil(uv));\n        //if(t2.y<uv.x)\n        \n        //if(t2.y>t2.x) t2 -= .5;\n        if(\n            true\n            //uv.y<-.5 || uv.x<-.5\n            //uv.y<-.5 && uv.x<-.5\n            //uv.x<-.5\n            //uv.x<-.5\n        )\n        {t2 =\n            t2.yx\n            //t2.yx*(1.+mod(floor(uv.y),2.)/2.)\n        ;\n        uv=uv.yx;}\n        vec2 uv1 =\n            //triangle_wave(uv)-triangle_wave(uv.yx-.5)\n            uv\n        ;\n        \n        //if(b||uv.y<uv.x)\n        col =\n            vec3(col.zx,max(abs(uv.x-uv.y)*sign(t2.x-t2.y),0.))\n            //vec3(col.zx,max(uv.y-uv.x,col.y))\n        ;\n        //if(uv.x < -.5) uv.x += .5;\n        //if(uv.y < -.5) uv.y += .5;\n        //if(uv.x<uv.y) uv.y -= .5;\n        //uv.y += float(uv.x<uv.y);\n        }\n        return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0.0);\n    float t1 = 1.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1/2.0;\n    //if(iMouse.z>.5)\n    //uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    vec3 col = fractal(uv,t2);\n    for(int i = 0; i < 1; i++){\n        col = abs(fractal(uv,t2));\n        //uv *= 2.;\n    }\n    \n    \n\n        \n\n        //if(uv.x<uv.y && k%2 == 0) {uv = -uv;break;}\n\n        //if(uv.x>uv.y) col=col.yzx;\n        //uv /= 1.+mod(uv.y,2.);\n        //if(uv.x>t2.x-.25) uv.x /= 1.5;\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod2(float a, float b){\n    return\n        //b*max(mod(floor(a),b),mod(floor(a*2.),b))\n        b*mod(floor(a),b)\n    ;\n}\n\nfloat m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a, float b){\n    return\n        mod(a,b)\n        //mod(a/4.-mod(a/2.,b),b)\n        //mod(a+floor(a/4.),b)\n    ;\n}\n\nfloat fmod1(float a, float b){\n    //a += m1(a,3.,7.);\n    //a += mod(-a/2.,2.);\n    //a -= floor(a/8.)/8.;\n    /*\n    for(int i = 0; i < 1+int(mod(a/8.,8.)); i++){\n        a /= (1. + floor(mod(a*2.,2.)));\n    }\n    */\n    \n    //a += floor(a*pow(2.,b)/128.);\n    a /= (1. + floor(mod1(a*8.,2.)))/4.;\n    //a += fmod2(a,7.);\n    //a += pow(2.,mod(floor(a),8.));\n\n    //a /= 2.;\n    /*\n    for(float i = 1.; i < mod(floor(a),8.); i++){\n        a += mod(floor(a/2.),b)*i;\n        a *= 1.+mod(floor(a)*2.,2.);\n        i /= 1.+mod(floor(a)*2.,2.);\n    }\n    */\n    /*\n    for(float a2 = 16.; a2 < 128.; a2 *= 2.){\n        a += mod(floor(a/a2),2.);\n    }\n    */\n    //a += mod(b/2.,2.);\n    return\n        mod(floor(a),b)\n        //floor(mod(floor(floor(a)/2.)+floor(floor(a)/2.)*2.,b))\n        //mod(floor(a)*5.,b+mod(floor(a)*3.,b))\n        //mod(floor(a/pow(2.,mod(floor(a/b),3.))),b)\n        //floor(mod(mod(floor(a),(b*8./3.)),b))\n        //mod(floor(a),b+mod(floor(a*2.),b))\n        //mod(mod(13.+floor(a*b/8.),19.+floor(a*b)),b)\n        //mod(mod(floor(a/2.+4.),floor(a/8.+4.)),b)\n        //floor(mod(a/2.,b)-mod(-a/2.,b/2.))\n        //mod(floor(a+mod(a/8.*b,8.)),b)\n        //max(mod(floor(a/b),b),mod(floor(a),b*2.))\n        //mod(floor(a+mod(floor(a/8.*b),b)),b)\n        //max(mod(floor(a*8./b),b),mod(floor(a/b),b))\n        //mod(floor(a*b/8.),(b/2.))*mod(floor(a/b)*floor(a*b/8.),b/2.)\n        //mod(mod(floor(a),b)*mod(floor(a/b),b),b)\n        //floor(mod(floor(a*2.),8.-b)/b/8.)\n\n        //mod(floor(a+pow(2.,b*mod(floor(a*2.),2.))),b)\n        //mod(floor(a/pow(2.,mod(floor(a*2.),3.)-1.)),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //fmod1(a+fmod1(a/2.,b),b)\n    ;\n}\n\nfloat fract1(float a){\n    return\n        fract(a)\n        //fract(a)*fract(fract(a)*fract(a))\n        //fract(a)*fract(a)\n        //fract(4.*a/(1.+fmod(a*4.,2.)))\n        //fract(a+fract(a*2.)/2.)\n    ;\n}\n\nvec2 song(float t,float scale){\n  float tempo = 1.;\n  t /= tempo;\n  float s1 =\n      8.\n      //pow(2.,2.+fmod(t/8./2.,3.))\n  ;\n  float p1 = 1. + floor(mod((1.+t/4.)/2.,2.));\n  t *= p1/2.;\n  //t /= pow(2.,fmod(t/2.,2.));\n  //t += pow(2.,mod(floor(t*2.),2.));\n  //t += pow(2.,mod(floor(t*4.),2.));\n  //t += pow(2.,mod(floor(t*8.),2.));\n  //t += floor(t*pow(2.,fmod(t/4.,4.)))/pow(2.,fmod(t/4.,4.));\n  \n  float a=\n      //64.*pow((1.-(fract(t*p1))),2.)\n      4.*pow(2.,fract1(-t*p1))\n      //2.*pow(log(fract(t*p1)/4.),2.)\n      //pow(2.,log(fract(-t*p1)/2.))*64.\n  ,\n  nb =\n      t*tempo*pow(2.,(2.+fmod(t,s1)+1. + fmod(floor(t/s1),2.))/5.+scale)/p1\n      //t*pow(2.,1.-log(fract(t)))\n      //.5*t*tempo*pow(2.,(2.+fmod(t/s1,s1/2.)+fmod(t,s1)+2.)/5.+8.)/p1\n  ;\n  return\n      vec2(a,nb)\n  ;\n}\n\nvec2 mainSound1(int samp, float t,float scale){\n  vec2 s =\n      //max(song(t),song(t/4.))\n      song(t,scale)\n      //min(song(t/2.)*2.,song(t))\n   ;\n  \n  float a=\n      s.x\n  ,\n  nb =\n      s.y;\n  return\n      //(abs(.5-abs(vec2(fract1(nb/2.),fract1(nb)))))*a\n      \n      log(abs(a/8.-abs(.5-vec2(fract1(nb*.998),fract1(nb)))*a))\n      \n      //abs(vec2(sin(nb*.998*4.),sin(nb*2.)))*a*16.\n  ;\n}\n\nvec2 mainSound(int a,float b){\n    return mainSound1(a,b,7.);\n    //return (mainSound1(a,b,7.5)+mainSound1(a,b*2.,6.5));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}