{
    "Shader": {
        "info": {
            "date": "1596045771",
            "description": "Combination of the dithering methods used in Obra Dinn. (left to right: bayer, blue noise, custom dithering)\n\nThanks to cornasummonis for the custom dithering code (link: https://www.shadertoy.com/view/4sySzw)",
            "flags": 32,
            "hasliked": 0,
            "id": "ttXBR8",
            "likes": 8,
            "name": "Obra Dinn Dithering Test",
            "published": 3,
            "tags": [
                "dithering",
                "obradinn"
            ],
            "usePreview": 1,
            "username": "CelestialAmber",
            "viewed": 806
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 texColor = texture(iChannel3, uv);\n    float gray = dot(texColor.rgb, vec3(0.2126,0.7152,0.0722));\t\n    vec3 col = vec3(gray);\n    \n    //Bayer Matrix dithering\n    float dither = texture(iChannel0, fragCoord/8.).r;\n    //Blue Noise dithering\n    if(uv.x > 0.33) dither = texture(iChannel1, fragCoord/1024.).r;\n        \n    col = floor(col + dither);\n    \n    if(uv.x > 0.66) col = vec3(texture(iChannel2, uv).b);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define B 232.0\n\nvec2 uv = vec2(0);\nvec2 texel = vec2(0);\n\nfloat err(int i, int j) {\n    vec4 temp = texture(iChannel1, uv + vec2(float(i)*texel.x, float(j)*texel.y));\n    return temp.y*(1.0-temp.z) - temp.y*temp.z;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float kernel[25];         \n\n    kernel[0] = 1.0/B;    \n    kernel[1] = 4.0/B;     \n    kernel[2] = 7.0/B;    \n    kernel[3] = 4.0/B;     \n    kernel[4] = 1.0/B; \n    kernel[5] = 4.0/B;  \n    kernel[6] = 16.0/B;  \n    kernel[7] = 26.0/B; \n    kernel[8] = 16.0/B;  \n    kernel[9] = 4.0/B; \n    kernel[10] = 7.0/B;  \n    kernel[11] = 26.0/B;  \n    kernel[12] = 0.0/B;  \n    kernel[13] = 26.0/B;  \n    kernel[14] = 7.0/B; \n    kernel[15] = 4.0/B;  \n    kernel[16] = 16.0/B;  \n    kernel[17] = 26.0/B; \n    kernel[18] = 16.0/B;  \n    kernel[19] = 4.0/B; \n    kernel[20] = 1.0/B;  \n    kernel[21] = 4.0/B;   \n    kernel[22] = 7.0/B;  \n    kernel[23] = 4.0/B;   \n    kernel[24] = 1.0/B;\n\n    uv = fragCoord.xy / iResolution.xy;\n    texel = 1.0 / iResolution.xy;\n    vec4 cr = texture(iChannel0, uv); \n    vec4 rc = texture(iChannel1, uv);\n    float gray = dot(cr.rgb, vec3(0.2126,0.7152,0.0722));\n    vec4 cur = vec4(gray, rc.yz, 0.0);\n    float sum = cur.x + kernel[ 0]*err(-2,-2) + kernel[ 1]*err(-1,-2) + kernel[ 2]*err( 0,-2) + kernel[ 3]*err( 1,-2) + kernel[ 4]*err( 2,-2) + \n        kernel[ 5]*err(-2,-1) + kernel[ 6]*err(-1,-1) + kernel[ 7]*err( 0,-1) + kernel[ 8]*err( 1,-1) + kernel[ 9]*err( 2,-1) + \n        kernel[10]*err(-2, 0) + kernel[11]*err(-1, 0) + kernel[12]*err( 0, 0) + kernel[13]*err( 1, 0) + kernel[14]*err( 2, 0) + \n        kernel[15]*err(-2, 1) + kernel[16]*err(-1, 1) + kernel[17]*err( 0, 1) + kernel[18]*err( 1, 1) + kernel[19]*err( 2, 1) + \n        kernel[20]*err(-2, 2) + kernel[21]*err(-1, 2) + kernel[22]*err( 0, 2) + kernel[23]*err( 1, 2) + kernel[24]*err( 2, 2); \n    vec4 new = ((sum > 0.5))?vec4(cur.x,1.0-sum,1.0,1.0):vec4(cur.x,sum-0.0,0.0,1.0);\n    int fx = int(mod(fragCoord.x, 3.0));\n    int fy = int(mod(fragCoord.y, 3.0));\n\n    int px = int(mod(float(iFrame), 3.0));\n    int py = int(mod(float(iFrame) / 3.0, 3.0));\n    fragColor = ((fx == px)&&(fy == py))?new:cur; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}