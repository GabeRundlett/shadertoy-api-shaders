{
    "Shader": {
        "info": {
            "date": "1547018308",
            "description": "Composing simple spinning animations",
            "flags": 0,
            "hasliked": 0,
            "id": "tdX3Rf",
            "likes": 1,
            "name": "Spin! Spin! Spin!",
            "published": 3,
            "tags": [
                "animation",
                "spin"
            ],
            "usePreview": 0,
            "username": "mv",
            "viewed": 492
        },
        "renderpass": [
            {
                "code": "// See: \n// - https://www.desmos.com/calculator/tfq2y68pkw // split curves, repeating\n// - https://www.desmos.com/calculator/oxwfgjf1q6 // monotonically increasing version\n\nvec2 rotate2D(vec2 uv, float angle) {\n \treturn vec2(\n        cos(angle)*uv.x - sin(angle)*uv.y, \n        sin(angle)*uv.x + cos(angle)*uv.y\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // split into 3x2 panels\n    vec2 res = iResolution.xy/vec2(3.0, 2.0);\n    vec2 coord = mod(fragCoord, res);\n    uvec2 idx = uvec2(fragCoord)/uvec2(res);\n    \n    // \n    vec2 uv = (2.0*coord - res)/res.y;\n    \n    // extract an antialiased circle\n    float d = length(uv) - 0.8;\n    float s = smoothstep(-1.5/res.y, +1.5/res.y, d);\n\t\n    // 1 second cycle between actions\n    float freq = 1.0; \n    \n    // generates a sawtooth function that repeats every 1/freq seconds\n    float angle = fract(freq*iTime);\n    \n    // manipulate the sawtooth differently based on panel\n    // use min(angle, 1.0) to truncate, and smoothstep(0.0, 1.0, angle) to ease the transition\n    // see: this: https://www.desmos.com/calculator/tfq2y68pkw\n    \n    if (idx == uvec2(0, 0)) {      // spin for 1/3 of the interval, wait for 2/3 of the interval\n    \tangle = min(3.0*angle, 1.0);\n    } \n    else if (idx == uvec2(1, 0)) { // spin for 1/2 of the interval, wait for 1/2 of the interval\n        angle = min(2.0*angle, 1.0);\n    } \n    else if (idx == uvec2(2, 0)) { // spin for 2/3 of the interval, wait for 1/3 of the interval\n        angle = min(1.5*angle, 1.0);\n    } \n    else if (idx == uvec2(0, 1)) { // keep spinning linearly\n    \n    } \n    else if (idx == uvec2(1, 1)) { // spin in a smoothstep fashion for the full interval\n        angle = smoothstep(0.0, 1.0, angle);\n    } \n    else if (idx == uvec2(2, 1)) { // continuously spin in a smoothstep fashion in the first half of the interval, then pause the remaining half\n        angle = min(2.0*angle, 1.0);\n        angle = smoothstep(0.0, 1.0, angle);\n    }\n    \n    // make it monotonically increasing\n    // after this point they look like this: https://www.desmos.com/calculator/oxwfgjf1q6\n    angle += floor(freq*iTime);\n    \n    // make it do a half-turn per cycle instead of full turn\n    angle /= 2.0;\n    \n    // sample\n    vec4 c = texture(iChannel0, rotate2D(uv, 2.0*3.1416*angle));\n    fragColor = vec4(1.0)*s + c*(1.0 - s);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}