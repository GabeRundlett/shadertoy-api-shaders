{
    "Shader": {
        "info": {
            "date": "1575653269",
            "description": "Look of phasor noise / normalized Gabor noise along a Moebius spiral.\nUsing convolution with hash grid instead of sparse convolution with random splats.\nTune freq #F and filter radius #W\nMouse.y tunes freq",
            "flags": 0,
            "hasliked": 0,
            "id": "wtt3RH",
            "likes": 29,
            "name": "Moebius Spiral Gabor field",
            "published": 3,
            "tags": [
                "spiral",
                "mobius",
                "field",
                "complex",
                "screenspace",
                "fingerprint",
                "gabornoise",
                "phasornoise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 986
        },
        "renderpass": [
            {
                "code": "// ( Fork of https://shadertoy.com/view/wtt3z8 )\n// Reusing bits of  https://shadertoy.com/view/wtcGRH\n// see also:  flow variant https://www.shadertoy.com/view/3tKGWR\n//  distance field variant https://www.shadertoy.com/view/WtK3DR\n\nfloat F = 1.2;                     // frequency\n#define W 12.                      // filtering neighborhood\n#define N int(W*2.+0.)             // sampling = NxN   ( N=2W+1 but smaller may work )\n#define t -5.*iTime\n#define PI 3.14159\n\n// --- complex operators from https://www.shadertoy.com/view/llySRh\n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )  // by deMoivre formula\n#define cinv(Z)   ( vec2( (Z).x, -(Z).y ) / dot(Z,Z) ) \n#define cdiv(A,B)   cmul( A, cinv(B) )\n#define CS(a)       vec2( cos(a+t), sin(a+t) )\n#define hash(p)   fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\nvec2 MobiusSpiral(vec2 p)          // total direct transform\n{ //return p;                      // ( for reverse, see https://shadertoy.com/view/llsfRj )\n \tvec2 z1 = p - vec2(-.875, -.525), \n         z2 = p - vec2( .375, -.125);\n\tp = .5 + mat2(z1, z1.y,-z1.x) * z2 / dot(z2, z2);//  Mobius(q, Z1, Z2)\n \tfloat a = atan(p.y, p.x)/(2.*PI), d = length(p);\n\treturn mat2(5.,1, PI*.2,-.5) * vec2(a, log(d));  // spiralZoom\n}\n\nvec2 Gabor(vec2 U, vec2 V) {      // \"Gabor\" noise. V : local float field\n    vec2 P, v, s = vec2(0);\n    float T=0., K;    \n    for( int k = 0; k < N*N; k++) {                  // Gabor noise: convolve with noise with K*oscill\n        P = vec2( k%N, k/N ) -  W;                   // sample neighborhood ( W = float(N-1)/2. )\n        v = CS( 2.*PI* hash( U+P ));                 // random complex signal\n        v = cmul( v, CS(-F*dot(P,V)));               // mul by oscillator in main direction\n        K = .5+.5*cos(PI*min(1.,length(P)/W));       // smoothing kernel\n        s += v * K;\n        T += K;\n    }\n    return s / T; \n}\n\nvoid mainImage(out vec4 O, vec2 u) // --- Draw Moebius Spiral field\n{   \n\tvec2  R = iResolution.xy, M = iMouse.xy;\n    if (length(M)>10.) F = .2+M.y/R.y*1.8;           // frequency\n    \n    vec2 U0 = u -.5*R, \n          V = MobiusSpiral(U0/R.y),\n#define f(v) fract(v+.5)-.5                          // suppress the wrapping glitch\n    A = normalize( f( vec2( dFdx(V.y),dFdy(V.y) )) );// main direction\n // O = vec4( .5 + .5*sin(10.*F*V.y) ); return;      // continuous field ( F = int*pi to avoid artifact )\n    \n    vec2 s = Gabor(U0,A); \n    float T = \n           // 4.*length(s);                         // show contrast oscillations\n              .5+.5*normalize(s).x;                 // phasor profile\n // T = pow( T, 1./2.2);                            // to sRGB\n    O = vec4(T);\n}\n\n\n\n/* before simplification: \n    U0 = ( u -.5*R ) / R.y\n    ...\n    P = vec2( k%N, k/N ) / (float(N-1)/2.) - 1.; // sample neighborhood\n    U = U0 + W*P/R.y;\n    v = CS( 2.*PI* hash( floor( R.y*U ) ));      // random complex signal\n    v = cmul( v, CS(-F*W*dot(P,A)));             // mul by oscillator in main direction\n    K = .5+.5*cos(PI*min(1.,length(P)));         // smoothing kernel\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}