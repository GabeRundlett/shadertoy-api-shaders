{
    "Shader": {
        "info": {
            "date": "1706202454",
            "description": "Plasma like shader, researching for Demoscene effects.",
            "flags": 0,
            "hasliked": 0,
            "id": "McSSWz",
            "likes": 0,
            "name": "Newschool Forked Plasma 4",
            "published": 3,
            "tags": [
                "oldschool",
                "plasma",
                "demoscene"
            ],
            "usePreview": 0,
            "username": "ford442",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "// Fork of \"Plasma OldSchool Shader\" by rge15. https://shadertoy.com/view/NlGBzw\n// 2024-01-25 15:47:21\n\n#define PI 3.1415926535897932384626433832795028841971693993\n#define PI2 PI/2.020202\nfloat a,b,flt;\nfloat Time;\nfloat mTime;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    Time=iTime*0.022717172;\n    mTime=iTime/0.0012717172;\n    vec2 center = iResolution.xy / 2.0202;\n    int is13 = int(iTime) % 13 == 0 ? 1 : 0;\n    int is6 = int(iTime) % 7 == 0 ? 1 : 0;\n    int isEvenInt05 = int(iTime/1.75) % 2 == 0 ? 1 : 0;\n    int isEvenInt = int(iTime/13.0) % 2 == 0 ? 1 : 0;\n    int isEvenInt3 = int(iTime/3.0) % 2 == 0 ? 1 : 0;\n    float gg=float(is13+is6+isEvenInt05+isEvenInt+isEvenInt3)*1.333333;\n    vec2 uv = (1.17220122*gg)*(fragCoord-iResolution.xy)/iResolution.xy;\n    //  uv -= center;\n    float angle = radians(12.4242 * iTime); // Adjust rotation speed as needed\n    mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    uv = rotationMatrix * uv;\n    //  uv += center;\n    float yy=uv.y*Time;\n    float xx=uv.x/Time;\n    float lenght = uv.x*xx+yy*uv.y;\n    float final;\n    if(isEvenInt3==1){\n        final = sin(uv.x * (141.55555-(131.01313*float(isEvenInt3))) + (1.0-fract(Time )));\n        final += sin(uv.y * (3.55555*(uv.y/uv.x)) + mix(1.0-fract(Time),0.515,0.5) );\n    }else{\n        final = sin(uv.x * ((21.55555+(1.0*(floor(fract(Time)*10.0)/2.0)))*(1.0-fract(Time))) + Time );\n        final += sin(uv.y * ((53.55555*(uv.y*uv.x*0.751515))-(43.0*float(isEvenInt3)*(floor(1.0-fract(Time)*10.0)/2.0))) + mix(1.0-fract(Time/4.2),0.5,0.5) );\n    }\n    float cx =( uv.x * sin(Time/mix(Time,0.9777,0.055555555)))*8.0;\n    float cy =( uv.y * mix(1.0-fract(Time),0.51515,0.5) * cos(Time/3.))*8.0;\n    final += sin(sqrt(50.*(cx*cx+cy*cy)+Time));\n    final += sin(sqrt(lenght)-Time);\n    float grad = final * PI;\n    float sinF = sin(grad);\n    float cosF = cos(grad);\n    final += cx*cx+cy*cy;\n    vec3 cll=vec3(0.541-(fract(cosF)),cos(cy)/(1.0-fract(Time)),0.780-(1.0-fract(Time )));\n    vec3 cll2=vec3(0.000,0.922-grad,0.906-(fract(sinF)));\n    vec3 cll3=vec3(cross(cll,cll2));\n    float zValue = cll3.r;\n    vec3 col = vec3(sinF,cosF,0.);\n    vec3 mxx = vec3((mix(0.99999-fract(mTime/13.030303),0.010101,0.2525)),mix(cosF,0.77,0.5),fract(Time/PI2));\n    flt=fract(1.0-fract(Time)*gg)/.66;\n    vec3 col2 = vec3(mix(col,mxx,0.333));\n    if(isEvenInt05==1){\n        a=col.r;\n        b=col.b;\n        col.b=a;\n        col.r=b;\n         col.g=col.g+=flt/111.666;\n    }else{\n       //  col.g=col.g-=flt/111.6;\n        a=col2.r;\n        b=col2.b;\n        col2.r=b;\n        col2.b=a;\n    }\n    vec3 col3 = mix(vec3(greaterThan(col2,cll2)),col2,(1.0-fract(Time)));\n    vec3 col4 = vec3(mix(col3,vec3(greaterThan(col2,cll3)),0.5*(1.0-fract(Time))));\n    vec3 mxx2= vec3(dot(col3,col4));\n    if(is6==0){\n        vec3 col3 = mix(vec3(lessThan(col3,cll3)),col2,(1.0-fract(Time)));\n        uv = (1.4220122*gg)*(fragCoord-iResolution.xy)/iResolution.xy;\n\n       mxx2=cross(mxx,mxx2);\n       col2=mix(mxx,vec3(1.0,col3.g,1.0),0.476725);\n    }\n    if(is13==1){\n        uv = (6.4220122*gg)*(fragCoord-iResolution.xy)/iResolution.xy;\n\n      col2=mix(col2,col3,0.75476725);\n    }\n    vec3 col5 = vec3(mix(vec3(lessThan(col2,cll3)),col3,1.0-mxx2.g));\n    vec3 col6;\n    col6.r=1.0-fract(Time);\n    if(isEvenInt==1){col6+=col4;\n        col3.b+=(col6.r+.140);\n        col6=cross(col5,vec3(0.42));\n    }else{\n        col5.b-=smoothstep(col.b,col4.b,1.0-fract(Time));\n       col6=cross(col6,vec3(0.72));\n    }\n    vec3 modulatedColor = col6;\n    modulatedColor.b += ((zValue * 0.2020202)-(mxx2.b * 0.20))/2.0;\n    modulatedColor.r -= ((zValue * 0.1010101)+(mxx2.r * 0.20))/2.0;\n    col6=modulatedColor;\n    col6+=vec3(0.08121);\n    col6=mix(col6,vec3(0.990,0.9890,0.980),0.123377);\n    fragColor = vec4(col6,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}