{
    "Shader": {
        "info": {
            "date": "1723782080",
            "description": "Just a small shader to try to get back into shader programming. It does what it says on the tin, dancing circles with cool interference patterns.",
            "flags": 0,
            "hasliked": 0,
            "id": "4clBDH",
            "likes": 1,
            "name": "Colorful Dancing Circles",
            "published": 3,
            "tags": [
                "circles"
            ],
            "usePreview": 0,
            "username": "triggthediscovery",
            "viewed": 75
        },
        "renderpass": [
            {
                "code": "struct Circle {\n    vec2 cen;\n    float dist;\n    float offset;\n    float speed;\n    float begin;\n    float end;\n};\n\nCircle circles[10];\n\nbool cicle_check(vec2 uv, int num) {\n    Circle cir = circles[num];\n\n    vec2 cen = cir.cen;\n    \n    cen.x += sin((iTime+cir.offset)*cir.speed)*cir.dist; \n    cen.y +=-cos((iTime+cir.offset)*cir.speed)*cir.dist; \n    \n    float dist = distance(uv, cen);\n    \n    return dist >= cir.begin && dist <= cir.end;\n}\n\nCircle make_circle(vec2 center, float dist, float offset, float speed, float begin, float end) {\n    Circle ret_cir;\n    \n    ret_cir.cen = center;\n    ret_cir.dist = dist;\n    ret_cir.offset = offset;\n    ret_cir.speed = speed;\n    ret_cir.begin = begin;\n    ret_cir.end = end;\n    \n    return ret_cir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    circles[0] = make_circle(vec2(0.0, 0.0), 0.2, 0.0, 1.5, 0.2, 0.25);\n    circles[1] = make_circle(vec2(0.2, 0.0),0.15, 0.0, 3.0, 0.1, 0.12);\n    circles[2] = make_circle(vec2(0.0, 0.0), 0.3, 1.6, 1.5, 0.0, 0.3);\n    circles[3] = make_circle(vec2(-0.4,0.0), 0.3, 1.6, 2.4, 0.35, 0.45);\n    circles[4] = make_circle(vec2(0.0, 0.2), 0.5, 6.0, 0.5, 0.0, 0.7);\n    circles[5] = make_circle(vec2(0.0, 0.0), 0.6, 0.0, 0.5, 0.0, 0.7);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= vec2(0.5,0.5);\n    uv.x *= 1.777;\n    \n    vec2 cen = vec2(0,0);\n    \n    float dist = distance(uv, cen);\n    \n    float colnum=0.0;\n    \n    for (int i=0; i<6; i++) {\n        if (cicle_check(uv, i)) {\n            colnum++;\n        } \n    }\n    \n    // This will cycle the intersections between red, green and blue.\n    vec3 col = vec3(0,0,1);\n    \n    if (mod(colnum, 3.0) == 1.0) {\n        col = vec3(1,0,0);\n    } else if (mod(colnum, 3.0) == 2.0) {\n        col = vec3(0,1,0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}