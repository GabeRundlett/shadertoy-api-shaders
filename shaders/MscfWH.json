{
    "Shader": {
        "info": {
            "date": "1524884558",
            "description": "doesnt multiplex into 2 rules depending on center cell value. in this way it is a much simpler cellular automaton than GOL. Having only 9 Possible Rules, and not 17; ",
            "flags": 32,
            "hasliked": 0,
            "id": "MscfWH",
            "likes": 1,
            "name": "𝔗𝔥𝔢 𝔊𝔞𝔪𝔢 𝔬𝔣 𝔚𝔦𝔣𝔢",
            "published": 3,
            "tags": [
                "07001020595956125017"
            ],
            "usePreview": 0,
            "username": "timeiskey",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define HOOD_WIDTH 1\n#define HOOD_HEIGHT 1\n\n#define R0N 0.0\n#define R1N 0.0\n#define R2N 0.0\n#define R3N 1.0\n#define R4N 1.0\n#define R5N 0.0\n#define R6N 0.0\n#define R7N 0.0\n#define R8N 0.0\n\n#define DENSITY 0.5\nfloat rand(vec2 co){\n  \treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * length(iDate));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cellWidth = 1.0/iResolution.xy;\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    //\ttotal your neighbors\n    float hoodTotal = 0.0;\n    for( int yi = -HOOD_HEIGHT; yi <= HOOD_HEIGHT; yi++ )\n    {\n    \tfor( int xi = -HOOD_WIDTH; xi <= HOOD_WIDTH; xi++ )\n        {\n\t\t\tvec2 xy = vec2(xi,yi) * cellWidth + uv;\n            xy = vec2(mod(xy.x, 1.0), mod(xy.y, 1.0) );\n            hoodTotal += texture(iChannel0, xy).r;\n        }\n    }\n    \n    //\tdont count yourself\n    hoodTotal -= texture(iChannel0, uv).r;\n    \n    //\tsample the rule\n    float c = 0.0;\n    if( hoodTotal == 0.0 )\n    {\n        c = R0N;\n    }\n    else if( hoodTotal == 1.0 )\n    {\n        c = R1N;\n    }\n    else if( hoodTotal == 2.0 )\n    {\n        c = R2N;\n    }\n    else if( hoodTotal == 3.0 )\n    {\n        c = R3N;\n    }\n    else if( hoodTotal == 4.0 )\n    {\n        c = R4N;\n    }\n    else if( hoodTotal == 5.0 )\n    {\n        c = R5N;\n    }\n    else if( hoodTotal == 6.0 )\n    {\n        c = R6N;\n    }\n    else if( hoodTotal == 7.0 )\n    {\n        c = R7N;\n    }\n    else if( hoodTotal == 8.0 )\n    {\n        c = R8N;\n    }\n    \n    fragColor = vec4(vec3(c),1.0);\n    if (iMouse.z >=0.0)\n    {\n        float mc = step( distance(uv,(iMouse.xy/iResolution.xy)), 0.01 ) ;\n        //fragColor = vec4(step(rand(uv),DENSITY));\n    \tfragColor = vec4(vec3(mc),1.0) * vec4(step(rand(uv),DENSITY));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}