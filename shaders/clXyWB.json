{
    "Shader": {
        "info": {
            "date": "1691122947",
            "description": "run-length encoding is magic",
            "flags": 40,
            "hasliked": 0,
            "id": "clXyWB",
            "likes": 16,
            "name": "you like kissing boys don't you?",
            "published": 3,
            "tags": [
                "music",
                "synth",
                "tracker",
                "meme",
                "rle",
                "boykisser"
            ],
            "usePreview": 0,
            "username": "dankcatlord",
            "viewed": 599
        },
        "renderpass": [
            {
                "code": "// Everything that isn't credited to someone else is licensed under the GPLv3\n// (https://www.gnu.org/licenses/gpl-3.0.html)\n\nvec2 imgUV(vec2 uv) { return fract(uv) * vec2(320.0, 240.0) / iResolution.xy; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.x;\n\n    float aspect = iResolution.y / iResolution.x;\n\n    uv.x += (abs(mod(iTime * 0.5, 4.0) - 2.0) - 1.0) * 0.5625;\n    uv.y += (abs(mod(iTime / aspect, 4.0) - 2.0) - 1.0) * (aspect - 0.3333333);\n\n    vec3 dir = normalize(vec3(uv, 1.0));\n    vec3 norm = vec3(sin(iTime * TAU * 0.25), 0.0, cos(iTime * TAU * 0.25));\n\n    uv.x /= norm.z;\n    uv /= uv.x * norm.x + 2.0;\n    uv *= 6.0;\n    \n    uv.x *= 0.75;\n    \n    vec3 col;\n    if (uv.x < -1.0 || uv.x > 1.0 || uv.y < -1.0 || uv.y > 1.0) col = vec3(0.0);\n    else {\n        col = texture(iChannel0, imgUV(uv * 0.5 + 0.5)).rgb * sqrt(abs(dot(dir, norm)));\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Everything that isn't credited to someone else is licensed under the GPLv3\n// (https://www.gnu.org/licenses/gpl-3.0.html)\n\n////////////////////////////////////////\n// Silly cat - mauzymice\n// https://www.furaffinity.net/view/47768433/\n\nuint image[] = uint[](\n\n\t2139062143u, 2139062143u, 2139062143u,  931102591u,  427960706u,  965410946u, 1887580804u,\n\t 428026242u,  898498689u, 1837446020u,  428026242u,  881078421u,  713191044u,  109385859u,\n\t 914631819u,  713256323u,  209787012u,  931408266u,  730033794u,  276895620u,  948184712u,\n\t 763522690u,  327227012u,  964960904u,  780299906u,  344069763u,  981672072u,  797077122u,\n\t 377623939u,  998448520u,  797141892u,  427955332u,  998448262u,  813919108u,  461509508u,\n\t1015224710u,  847408004u,  495063684u, 1015224453u,  864185220u,  495129219u, 1032000902u,\n\t 881027971u,  528683395u, 1032000645u,  881027971u,  528683396u, 1065554565u,  914516866u,\n\t 562237827u, 1065554308u,  931294082u,  578949252u, 1082330757u,  931294082u,  579014533u,\n\t1082330501u,  948136578u,  595791748u, 1099107205u,  981691010u,  629280643u, 1099106693u,\n\t 998402690u,  646057604u, 1115883397u, 1015179906u,  646122884u, 1115883141u, 1032022402u,\n\t 662965635u, 1132659844u, 1048799618u,  662965635u, 1132659333u, 1065511298u,  679677316u,\n\t1149370757u, 1082288514u,  696388741u, 1149370756u, 1099065730u,  713231237u, 1149370499u,\n\t1115842946u,  696519556u, 1770144903u,  159597698u, 1149707657u, 1149397378u,  646645635u,\n\t1770144902u,   42157442u, 1149511823u, 1166174594u,  713228686u, 1770144900u,   76236418u,\n\t1149381762u, 1199729026u, 2181070726u, 2235990633u, 1770127999u, 2139309698u, 2187952644u,\n\t  92243012u, 1115842946u, 2181463941u, 2269151849u, 1770129023u, 2139504514u, 2187952648u,\n\t 176129597u, 1015179650u, 2181857157u, 2302444137u, 2188087052u, 2805695081u, 2187952747u,\n\t2188092988u, 2420408937u, 2187952761u, 1770147711u, 2186248066u, 1333756521u, 2139253122u,\n\t2187952974u, 1770212991u, 2186182530u, 1316979306u, 2139253378u, 2188018254u, 1786924671u,\n\t2186182530u, 1316979306u, 2139253378u, 2188018254u, 1786924671u, 2186116995u, 1300202346u,\n\t2139253634u, 2188083789u, 1803766911u, 2202828674u, 1283424875u, 2139253890u, 2188149324u,\n\t1820543871u, 2202763138u, 1233093484u, 2139319683u, 2188280649u, 1870809471u, 2202566530u,\n\t1216316015u, 2139254659u, 2205188680u, 1887651455u, 2202435459u, 1182761585u, 2139320962u,\n\t2199755785u,   58688370u, 1937972387u,  481196162u, 1954772098u,   92540053u, 1954749315u,\n\t 782181763u,  629280405u,  360871299u,  244657074u, 1988240515u,  733091202u,  579014293u,\n\t 344159876u,  714541457u,  545460117u,  478377605u,  714542979u,  545459862u,  461600900u,\n\t 697765763u,  511905687u,  444824195u,  697766019u,  495128471u,  428047236u,  697766019u,\n\t 444797079u,  411270277u,  697831555u,  428019863u,  394493573u,  697831555u,  394400151u,\n\t 394493830u,  697831810u,  377622935u, 2197979013u, 2551284246u, 2198968105u,   58689043u,\n\t 293803395u,  295119256u, 2139427459u, 2199159558u, 2536085521u, 2199093778u,  327419775u,\n\t 697832066u,  327291543u,  293896076u,  697832067u,  310579863u, 1988625034u,  310579587u,\n\t 311896472u,    8850563u, 1988821637u,  327290501u,  328673688u,   92932994u,  243627661u,\n\t 697832322u,  193074071u, 1602359434u,  243536261u,  697832322u,  193074071u, 1602426754u,\n\t 327295369u,  328673688u, 1602430594u,  377553041u,  697832322u,  629281687u,    9527683u,\n\t 327355019u,  328673688u, 1652827266u,    9110146u,  327355018u,  345385368u, 1669538946u,\n\t   8522627u,  344066442u,  345385368u, 1686315906u,  159585923u,  714544258u,  562173078u,\n\t 360932741u,  360843651u,  345385622u, 1720000642u,  360850307u,  362032022u, 1753489538u,\n\t 360850051u,  362032022u, 1786978178u,  360850051u,  362032277u, 1803820674u,  360849795u,\n\t 361966997u, 1820597634u,  360849540u,  378678677u, 1854151810u,  377626500u,  412037011u,\n\t1887705986u,  360914564u,  395194515u, 1921260163u,  377691524u,  411906449u, 1954814339u,\n\t 394403204u,  428553103u, 1988368770u,  411179909u,  411196300u,  444954756u, 1535842435u,\n\t2055477122u,  428022404u, 2105833097u,  444799364u, 1502220678u,  394690180u, 1485648003u,\n\t2248179588u, 2368766487u,   58688344u, 1468877190u, 2231795587u,  448925823u, 2215083907u,\n\t 130289279u, 2139230146u, 3322643209u, 3288712570u,  109019665u, 2059995523u,  298124485u,\n\t2214887299u, 3346582024u, 2215822595u,  142803839u,  163709382u,   46688962u, 2139297220u,\n\t3288891907u, 3305554436u, 3254830441u, 2199372801u,  142738047u,   79824323u,   46361031u,\n\t 415433154u, 2197847940u, 3271934472u, 3261777922u, 2216347395u, 3272704895u, 3346319104u,\n\t2206106395u, 3329674001u, 2206040861u, 2186660113u, 2216674335u, 3339879291u, 3256910678u,\n\t2205909793u, 2203632914u, 2205778758u, 2252260116u, 2202501906u, 2371191673u, 2219345163u,\n\t2455077750u, 2236188165u, 2236908405u, 2219546114u, 2185658997u, 2399765769u, 2188673871u,\n\t2231796806u, 2203158798u, 2252768115u, 2188150784u, 2370274163u, 2188608110u, 2188347978u,\n\t2219606643u, 2188543600u,  411181951u, 2139255433u, 2417067041u, 2182513266u,  260376191u,\n\t 210007949u, 2248376203u, 2675611650u, 2432992895u, 2090926463u, 2140079494u, 2315554822u,\n\t 964658808u, 2139648647u, 2339210813u, 1753759871u, 2319744906u, 1233095264u, 2139773069u,\n\t2370866513u, 1234130559u, 2388426634u, 1602192968u, 2139244687u, 2139066211u, 2382397999u,\n\t2183954303u, 2139067655u, 2466808606u, 1551860286u, 1049561988u, 2203877251u, 1568637786u,\n\t2139380355u, 2237236315u, 1501846399u, 2203877252u, 1551860571u, 2139314819u, 2203747420u,\n\t1501846655u, 2220654468u, 1568637785u, 2139314564u, 2203551069u, 1468358271u, 2254339971u,\n\t1618969429u, 2139313286u, 2203289184u, 1417962111u, 2204270467u, 1618969428u, 2139248260u,\n\t2203485535u, 1468358015u, 2220654467u, 1535083098u, 2139315076u, 2203878489u, 1585666431u,\n\t2203549571u, 1451197279u, 2139316356u, 2220983380u, 1669550975u, 2203221891u, 1384088165u,\n\t2139317635u, 2282062417u, 1350533975u, 2139314322u, 2203619919u,   59461503u, 2139249026u,\n\t2203681630u, 1501781375u, 2203877251u, 1551860315u, 2139249539u, 2187101019u, 1552112511u,\n\t2186968963u, 1518306141u, 2139250306u, 2187232089u, 1585666431u, 2203615106u, 1467974495u,\n\t2139316099u, 2187428439u, 1635997311u, 2203484034u, 1451197025u, 2139251330u, 2187493974u,\n\t1652708991u, 2203418498u, 1417642850u, 2139316867u, 2187625044u, 1686262911u, 2203287426u,\n\t1384088420u, 2139317379u, 2204468050u, 1703104895u, 2139062147u, 2139062143u, 2139062143u,\n\t4280319871u\n);\n////////////////////////////////////////\n\nint getCol(uint idx) {\n    uint a = 0u;\n    int ret;\n    for (int i = 0; i < image.length(); i++) {\n        uint b = image[i];\n        for (int j = 0; j < 4; j++) {\n            uint c = b & 255u;\n            if ((b & 128u) == 128u) {\n                if ((b & 192u) == 192u) {\n                    if (b == 255u) return -1;\n                    else ret = 2;\n                } else ret = 1;\n                a += b & 63u;\n            } else {\n                ret = 0;\n                a += b & 127u;\n            }\n            a += 1u;\n            if (idx < a) return ret;\n            b >>= 8;\n        }\n    }\n    return -1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 initCol = texture(iChannel0, fragCoord / iResolution.xy);\n    if (iFrame == 0 || initCol == vec4(0.0)) {\n        vec3 col;\n        switch (getCol((239u - uint(fragCoord.y) % 240u) * 320u + (uint(fragCoord.x) % 320u))) {\n            case 0: col = vec3(1.0); break;\n            case 1: col = vec3(20.0 / 255.0); break;\n            case 2: col = vec3(1.0, vec2(23.0 / 255.0)); break;\n            case -1: col = vec3(1.0,0.0,1.0);\n        }\n        fragColor = vec4(col,1.0);\n    } else {\n        fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Everything that isn't credited to someone else is licensed under the GPLv3\n// (https://www.gnu.org/licenses/gpl-3.0.html)\n\n////////////////////////////////////////\n// eek! - surasshu\n// https://modarchive.org/index.php?request=view_by_moduleid&query=186901\n\nuint pattern1_1[16] = uint[](\n\n        /* 03020100 */\n/* 00 */ 0x54545352u,\n/* 04 */ 0x0000005Bu,\n/* 08 */ 0x0000005Eu,\n/* 0C */ 0x00000060u,\n/* 10 */ 0x005A005Bu,\n/* 14 */ 0x59595959u,\n/* 18 */ 0x00000000u,\n/* 1C */ 0x00565454u,\n/* 20 */ 0x58585858u,\n/* 24 */ 0x00000059u,\n/* 28 */ 0x5B5B5B5Bu,\n/* 2C */ 0x0000005Eu,\n/* 30 */ 0x58585858u,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x00000000u,\n/* 3C */ 0x00000000u\n);\n\nuint pattern1_2[16] = uint[](\n/* 00 */ 0x58585655u,\n/* 04 */ 0x0000005Bu,\n/* 08 */ 0x0000005Du,\n/* 0C */ 0x0000005Bu,\n/* 10 */ 0x005D0061u,\n/* 14 */ 0x5B5B5B5Bu,\n/* 18 */ 0x00000000u,\n/* 1C */ 0x005A5B5Bu,\n/* 20 */ 0x59595959u,\n/* 24 */ 0x00000054u,\n/* 28 */ 0x56565656u,\n/* 2C */ 0x00000054u,\n/* 30 */ 0x53535353u,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x00000000u,\n/* 3C */ 0x00000000u\n);\n\nuint pattern1_3[16] = uint[](\n/* 00 */ 0x5151504Fu,\n/* 04 */ 0x0000005Du,\n/* 08 */ 0x00000060u,\n/* 0C */ 0x00000062u,\n/* 10 */ 0x005C005Du,\n/* 14 */ 0x5B5B5B5Bu,\n/* 18 */ 0x00000000u,\n/* 1C */ 0x005B5959u,\n/* 20 */ 0x5C5C5C5Bu,\n/* 24 */ 0x00000059u,\n/* 28 */ 0x5050504Fu,\n/* 2C */ 0x0000004Du,\n/* 30 */ 0x48484848u,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x00000000u,\n/* 3C */ 0x00000000u\n);\n\nuint pattern2_0[16] = uint[](\n/* 00 */ 0x48484848u,\n/* 04 */ 0x00000000u,\n/* 08 */ 0x00004343u,\n/* 0C */ 0x00430000u,\n/* 10 */ 0x48484848u,\n/* 14 */ 0x00000000u,\n/* 18 */ 0x00004343u,\n/* 1C */ 0x00430000u,\n/* 20 */ 0x48484848u,\n/* 24 */ 0x00000000u,\n/* 28 */ 0x00004343u,\n/* 2C */ 0x00430000u,\n/* 30 */ 0x3C3C3C3Cu,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x00000000u,\n/* 3C */ 0x00000000u\n);\n\nuint pattern2_1[16] = uint[](\n/* 00 */ 0x48484848u,\n/* 04 */ 0x00000000u,\n/* 08 */ 0x00004343u,\n/* 0C */ 0x00430000u,\n/* 10 */ 0x48484848u,\n/* 14 */ 0x00000000u,\n/* 18 */ 0x00004343u,\n/* 1C */ 0x00430000u,\n/* 20 */ 0x48484848u,\n/* 24 */ 0x00000000u,\n/* 28 */ 0x00004343u,\n/* 2C */ 0x00430000u,\n/* 30 */ 0x48484848u,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x47474747u,\n/* 3C */ 0x00000000u\n);\n\nuint pattern2_2[16] = uint[](\n/* 00 */ 0x45454545u,\n/* 04 */ 0x00000000u,\n/* 08 */ 0x00004040u,\n/* 0C */ 0x00400000u,\n/* 10 */ 0x45454545u,\n/* 14 */ 0x00000000u,\n/* 18 */ 0x00004040u,\n/* 1C */ 0x00400000u,\n/* 20 */ 0x4A4A4A4Au,\n/* 24 */ 0x00000000u,\n/* 28 */ 0x00004545u,\n/* 2C */ 0x00450000u,\n/* 30 */ 0x43434343u,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x42424242u,\n/* 3C */ 0x00000000u\n);\n\nuint pattern2_3[16] = uint[](\n/* 00 */ 0x41414141u,\n/* 04 */ 0x00000000u,\n/* 08 */ 0x00003C3Cu,\n/* 0C */ 0x003C0000u,\n/* 10 */ 0x41414141u,\n/* 14 */ 0x00000000u,\n/* 18 */ 0x00003C3Cu,\n/* 1C */ 0x003C0000u,\n/* 20 */ 0x44444444u,\n/* 24 */ 0x00000000u,\n/* 28 */ 0x00003F3Fu,\n/* 2C */ 0x003F0000u,\n/* 30 */ 0x3C3C3C3Cu,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x00000000u,\n/* 3C */ 0x00000000u\n);\n\nuint pattern3_1[16] = uint[](\n        /* 03020100 */\n/* 00 */ 0x45484541u,\n/* 04 */ 0x4D484D48u,\n/* 08 */ 0x54515951u,\n/* 0C */ 0x5D595451u,\n/* 10 */ 0x484B4844u,\n/* 14 */ 0x504B504Bu,\n/* 18 */ 0x57545054u,\n/* 1C */ 0x605C5754u,\n/* 20 */ 0x4A4D4A45u,\n/* 24 */ 0x514D514Du,\n/* 28 */ 0x59565156u,\n/* 2C */ 0x625D5956u,\n/* 30 */ 0x4A4F4A47u,\n/* 34 */ 0x534F534Fu,\n/* 38 */ 0x5B565356u,\n/* 3C */ 0x625F5B56u\n);\n\nuint pattern4_1[16] = uint[](\n        /* 03020100 */\n/* 00 */ 0x64646464u,\n/* 04 */ 0x64646464u,\n/* 08 */ 0x63636060u,\n/* 0C */ 0x67676464u,\n/* 10 */ 0x6A6A6A69u,\n/* 14 */ 0x6A696C6Cu,\n/* 18 */ 0x6C6C6A6Au,\n/* 1C */ 0x65656667u,\n/* 20 */ 0x60606364u,\n/* 24 */ 0x5B5B5E5Eu,\n/* 28 */ 0x57575959u,\n/* 2C */ 0x60605454u,\n/* 30 */ 0x60606060u,\n/* 34 */ 0x60606460u,\n/* 38 */ 0x5A5B5E5Eu,\n/* 3C */ 0x58585959u\n);\n\nuint pattern4_2[16] = uint[](\n        /* 03020100 */\n/* 00 */ 0x58585655u,\n/* 04 */ 0x5D5D5B5Bu,\n/* 08 */ 0x62626160u,\n/* 0C */ 0x67676464u,\n/* 10 */ 0x69696969u,\n/* 14 */ 0x6D6D6E6Eu,\n/* 18 */ 0x67676969u,\n/* 1C */ 0x62626464u,\n/* 20 */ 0x65656564u,\n/* 24 */ 0x69696767u,\n/* 28 */ 0x6E6E6C6Cu,\n/* 2C */ 0x67676C6Cu,\n/* 30 */ 0x69696969u,\n/* 34 */ 0x69696B69u,\n/* 38 */ 0x65656767u,\n/* 3C */ 0x60606464u\n);\n\nuint pattern4_3[16] = uint[](\n/* 00 */ 0x65656465u,\n/* 04 */ 0x65656767u,\n/* 08 */ 0x63636464u,\n/* 0C */ 0x61616262u,\n/* 10 */ 0x6C696060u,\n/* 14 */ 0x70706E6Eu,\n/* 18 */ 0x6C6C6E6Eu,\n/* 1C */ 0x67676969u,\n/* 20 */ 0x65656465u,\n/* 24 */ 0x62626464u,\n/* 28 */ 0x69696060u,\n/* 2C */ 0x62626767u,\n/* 30 */ 0x60606060u,\n/* 34 */ 0x00000000u,\n/* 38 */ 0x00000000u,\n/* 3C */ 0x00000000u\n);\n////////////////////////////////////////\n\nuint getNote(int pos, uint pattern[16]) { return ((pattern[(pos >> 2) & 15] >> ((pos & 3) << 3)) & 255u); }\n\nfloat triangle(int note, int samp) {\n    int intSampleRate = int(iSampleRate);\n    float freq = pow(2.0, float(int(note) - 69) / 12.0) * 440.0;\n    float a = (iSampleRate / freq) * 256.0;\n    return float(abs((samp * 256) % int(a) - int(a) / 2) * 2) / a - 0.5;\n}\n\nfloat sawtooth(int note, int samp) {\n    int intSampleRate = int(iSampleRate);\n    float freq = pow(2.0, float(int(note) - 69) / 12.0) * 440.0;\n    float a = (iSampleRate / freq) * 256.0;\n    return float((samp * 256) % int(a)) / a - 0.5;\n}\n\nfloat synth(int pos, int samp) {\n    float ret = 0.0;\n    uint note1 = 0u, note2 = 0u;\n    \n    pos %= 704;\n\n    if (pos < 64) {\n            note2 = getNote(pos, pattern2_0);\n    } else if (pos < 448) {\n        if (pos % 192 < 0x40) {\n            note1 = getNote(pos, pattern1_3);\n            note2 = getNote(pos, pattern2_3);\n        } else if (pos % 192 < 0x80) {\n            note1 = getNote(pos, pattern1_1);\n            note2 = getNote(pos, pattern2_1);\n        } else if (pos % 192 < 0xC0) {\n            note1 = getNote(pos, pattern1_2);\n            note2 = getNote(pos, pattern2_2);\n        }\n    } else if (pos < 512) {\n        note1 = getNote(pos, pattern3_1);\n        if ((pos & 63) < 16) {\n            ret += triangle(65 - 24, samp) * .6666667;\n            ret += triangle(69 - 24, samp) * .6666667;\n            ret += triangle(72 - 24, samp) * .6666667;\n        } else if ((pos & 63) < 32) {\n            ret += triangle(68 - 24, samp) * .6666667;\n            ret += triangle(72 - 24, samp) * .6666667;\n            ret += triangle(75 - 24, samp) * .6666667;\n        } else if ((pos & 63) < 48) {\n            ret += triangle(71 - 24, samp) * .6666667;\n            ret += triangle(74 - 24, samp) * .6666667;\n            ret += triangle(77 - 24, samp) * .6666667;\n        } else if ((pos & 63) < 52) {\n            ret += triangle(67 - 24, samp) * .6666667;\n            ret += triangle(77 - 24, samp) * .6666667;\n            ret += triangle(79 - 24, samp) * .6666667;\n        } \n    } else {\n        if (pos < 576) {\n            note1 = getNote(pos, pattern4_1);\n            note2 = getNote(pos, pattern2_1);\n        } else if (pos < 640) {\n            note1 = getNote(pos, pattern4_2);\n            note2 = getNote(pos, pattern2_2);\n        } else {\n            note1 = getNote(pos, pattern4_3);\n            note2 = getNote(pos, pattern2_3);\n        }\n    }\n    \n    if (note1 != 0u) if (pos < 256)\n        ret += triangle(int(note1) - 12, samp);\n    else ret += sawtooth(int(note1) - 24, samp) * 0.25;\n    if (note2 != 0u) ret += triangle(int(note2) - 24, samp);\n    \n    return ret;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float tempo = iSampleRate / 14.6666667;\n    int intSampleRate = int(iSampleRate) * 10;\n    int pos = samp / int(tempo);\n    float a = float(samp % int(tempo)) / (tempo);\n    \n    float prev = synth(pos - 1, samp) * max(1.0 - a * 64.0, 0.0);\n    float cur = synth(pos, samp) * min(a * 64.0, 1.0);\n    \n    return vec2( prev + cur );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// Everything that isn't credited to someone else is licensed under the GPLv3\n// (https://www.gnu.org/licenses/gpl-3.0.html)\n\nprecision highp int;\nprecision highp float;\n\n#define TAU 6.2831853",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}