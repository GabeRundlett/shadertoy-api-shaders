{
    "Shader": {
        "info": {
            "date": "1570734977",
            "description": "simple clouds",
            "flags": 0,
            "hasliked": 0,
            "id": "3syGRt",
            "likes": 2,
            "name": "volumetric clouds",
            "published": 3,
            "tags": [
                "clouds"
            ],
            "usePreview": 0,
            "username": "dagbrynildsentholander",
            "viewed": 723
        },
        "renderpass": [
            {
                "code": "vec3 sunDir = vec3(0);\nvec3 sunCol = vec3(1, .9, .8);\nvec3 ambCol = vec3(.25, .2, .3);\n\nvec2 dstBetwnPlns(vec3 ro, vec3 rd)\n{\n    float planeAheight = 5.;\n    float planeBheight = 15.;\n    float ro_A = planeAheight-ro.y;//-planeAheight;\n    float ro_B = planeBheight-ro.y;//-planeBheight;\n    \n    float dstToBox = max(ro_A/normalize(rd).y, 0.);\n    float dstInsideBox = max(ro_B/normalize(rd).y - dstToBox, 0.);\n    \n    return vec2(dstToBox, dstInsideBox);\n}\n\nfloat densitySample(vec3 p)\n{\n    float result = 0.;\n    result += texture(iChannel1, p/256.+iTime*3./1000.).x/2.;\n    result += texture(iChannel1, p/64.+iTime*5./1000.).x/4.;\n    result += texture(iChannel1, p/32.+iTime*11./1000.).x/16.;\n    result += texture(iChannel1, p/8.+iTime*23./1000.).x/32.;\n    result = clamp(result*2., 0., 1.);\n    return pow(result, 16.);\n}\n\nfloat shadowMarch(vec3 ro, vec3 rd, float steps)\n{\n    float totalDensity = 0.;\n    float t = 0.;\n    vec2 boxCheckInfo = dstBetwnPlns(ro, rd);\n    while(t < boxCheckInfo.y)\n    {\n        totalDensity += densitySample(ro+rd*t)/steps;\n        if(totalDensity > 1.)\n            break;\n        t+=boxCheckInfo.y/steps;\n    }\n    return totalDensity;\n}\n\nvec2 march(vec3 ro, vec3 rd, float stepsize, float limit)\n{\n    float totalDensity = 0.;\n    float sunBlockage = 0.;\n    float steps = limit/stepsize;\n    float t = 0.;\n    while(t < limit)\n    {\n        totalDensity += densitySample(ro+rd*t)/steps;\n        sunBlockage += shadowMarch(ro+rd*t, normalize(sunDir), 4.)/steps;\n        if(totalDensity > 1.)\n            break;\n        t+=stepsize;\n    }\n    return vec2(totalDensity, sunBlockage);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    sunDir = vec3(cos(iTime/10.), sin(iTime/10.)+1., 0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy)*2.-1.;\n\t\n    float cameraRotationY = iMouse.x/100.;\n    vec3 camForward = vec3(cos(cameraRotationY), 0.5, sin(cameraRotationY));\n    vec3 rd = normalize(camForward + vec3(0, 1, 0) * uv.y + cross(camForward, vec3(0, 1, 0)) * uv.x);\n    vec3 ro = vec3(0);\n    vec2 boxCheckInfo = dstBetwnPlns(ro, rd);\n    float steps = 32.;\n    vec3 skyColor = mix(mix(vec3(.4, .4, .7), vec3(.1, .1, .15), rd.y), vec3(.35, .3, .2), clamp(1.-rd.y*40., 0., 1.));\n    skyColor += max(dot(rd, normalize(sunDir))/2., 0.)*sunCol/4.;\n    skyColor += clamp(pow(clamp(dot(rd, normalize(sunDir)), 0., 1.), 32.), 0., 1.)*sunCol;\n\n    vec2 rayInfo = march(ro+rd*boxCheckInfo.x, rd, boxCheckInfo.y/steps, boxCheckInfo.y);\n    float cloudDensity = rayInfo.x*1.5;\n    float sunBlockage = rayInfo.y;\n    // Time varying pixel color\n    vec3 cloudColor = mix(sunCol, ambCol, sunBlockage);\n \n    // Output to screen\n    fragColor = vec4(mix(skyColor, cloudColor, cloudDensity),1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}