{
    "Shader": {
        "info": {
            "date": "1654462906",
            "description": "Plop",
            "flags": 96,
            "hasliked": 0,
            "id": "sdcGRX",
            "likes": 49,
            "name": "Psychedelic tube",
            "published": 3,
            "tags": [
                "tunnel",
                "trance",
                "psytrance",
                "goa"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 1486
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sat(a) clamp(a, 0., 1.)\n#define FFT(a) texture(iChannel1, vec2(a, 0.)).x\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 _max(vec2 a, vec2 b)\n{\n    if (a.x > b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec3 op = p;\n    vec2 acc = vec2(1000.,-1.);\n    \n    float an = atan(p.y, p.x);\n    p.xy -= vec2(sin(p.z+iTime), cos(p.z*.5+iTime))*.5;\n    p.y += sin(p.z*2.+iTime)*.1;\n    float rad = FFT(abs(p.z*.001))*.25;\n    vec2 tube = vec2(-(length(p.xy)-2.-rad+sin(p.z*.25)), 0.);\n    acc = _min(acc, tube);\n    \n    //acc = _min(acc, _max(tube, vec2((sin(an*1.+op.z*3.)-.8), 1.)));\n    \n    return acc;\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n       // if (res.y == 1.)\n            accCol += vec3(1., .5, sin(p.z)*.5+.5)*pow(1.-sat(res.x/.7), 30.)*.3;\n        p += rd*res.x*.7;\n    }\n    return vec3(-1.);\n}\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(1.);\n    float t= iTime*2.;\n    vec3 ro = vec3(sin(iTime)*.15,cos(iTime*.5)*.12,-12.+t);\n    vec3 ta = vec3(0.,0.,0.+t);\n    vec3 rd = normalize(ta-ro);\n    rd.xz *= r2d(sin(iTime*.5)*.15);\n    rd.yz *= r2d(sin(iTime+.5)*.15);\n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 256);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        vec3 lpos = vec3(0.);\n        vec3 ldir = p-lpos;\n        col = sat(dot(normalize(ldir), n))*vec3(1.);\n        col += accCol;\n        col = pow(col, vec3(3.));\n        float an = atan(p.y, p.x);\n        vec2 rep = vec2(.9, .5);\n        vec2 luv = vec2(an, p.z+iTime);\n        vec2 id = floor((luv+.5*rep)/rep);\n        luv.x += sin(id.y*.5)*iTime*2.;\n        luv = mod(luv+.5*rep, rep)-.5*rep;\n        float shape = _sqr(luv, vec2(5.4*pow(FFT(abs(id.y*.01)),5.), .05));\n        vec3 rgb = mix(col, vec3(1.), 1.-sat(shape*50.));\n        rgb += pow(FFT(.0),2.)*2.*vec3(1., .5, sin(p.z*10.)*.5+.5)*(1.-sat(shape*1.))*(1.-sat(length(uv*1.)));\n        col = mix(col, rgb, sin(iTime*5.+p.z*.5)*.5+.5);\n        col += 0.2*texture(iChannel0, vec2(atan(p.y, p.x)*2., length(p.xy*.1)-.25*iTime)*.1).xyz;\n        col = mix(col, col.zyx, sin(iTime*1.+p.z*.1)*.5+.5);\n        //col = mix(col, col*texture(iChannel0, vec2(atan(p.y, p.x)*2., length(p.xy*.1)-iTime)*.25).xxx, 1.-sat(length(uv*2.)));\n\n    }\n\n    return col;\n}\n\nvec2 messupUV(vec2 uv)\n{\n       vec2 ouv = uv;\n    uv += vec2(.1, 0.);\n    uv.x = abs(uv.x);\n    uv *= r2d(iTime*.25);\n    //uv += vec2(.3, 0.);\n    uv.y = abs(uv.y);\n    uv *= r2d(-iTime*.5);\n     uv *= r2d(.2*iTime+uv.x);\n    uv *= sin(iTime*.15);\n   \n    vec2 uv3 = uv*15.*uv.yx*r2d(length(uv));\n    return mix(mix(ouv, uv, sin(iTime*.2)), uv3, sin(iTime*.1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = fragCoord.xy/iResolution.xy;\n\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    //uv = messupUV(uv);\n    vec3 col = rdr(uv);\n    col *= 1.+pow(FFT(.1), 1.)*2.;\n    col = mix(col, texture(iChannel2, ouv).xyz, .5+pow(FFT(.2), 2.)*.5);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 30625,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/nostalgia-of-psytrance/astral-projection-another-world?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}