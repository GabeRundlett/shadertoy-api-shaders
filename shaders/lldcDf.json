{
    "Shader": {
        "info": {
            "date": "1535186629",
            "description": "global illumination based on sdf -- following https://github.com/miloyip/light2d",
            "flags": 0,
            "hasliked": 0,
            "id": "lldcDf",
            "likes": 72,
            "name": "lightsdf",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "xiaosong0911",
            "viewed": 3470
        },
        "renderpass": [
            {
                "code": "float sphereSDF(vec2 p, float size) {\n\treturn length(p) - size;\n}\n\nfloat boxSDF(vec2 p, vec2 size) {\n\tvec2 r = abs(p) - size;\n    return min(max(r.x, r.y),0.) + length(max(r,vec2(0,0)));\n}\n\nvoid AddObj(inout float dist, inout vec3 color, float d, vec3 c) {\n    if (dist > d) {\n        dist = d;\n        color = c;\n    }\n}\n\nvoid scene(in vec2 pos, out vec3 color, out float dist) {\n    dist = 1e9; color = vec3(0,0,0);\n    AddObj(dist, color, boxSDF(pos - vec2(-3,1), vec2(1,1)), vec3(.6,.8,1.));\n    AddObj(dist, color, sphereSDF(pos - vec2(3,1), 1.), vec3(1,.9,.8));\n    AddObj(dist, color, sphereSDF(pos - vec2(.3*sin(iTime),-2), 0.5), vec3(0,.1,0));\n    AddObj(dist, color, boxSDF(pos - vec2(0,1), vec2(1.5,0.1)), vec3(.3,.1,.1));\n    if (iMouse.z > 0.0) {\n        vec2 mouse_pos = (iMouse.xy - iResolution.xy / 2.f) / iResolution.y * 10.f;\n        AddObj(dist, color, sphereSDF(pos - mouse_pos, 0.3), vec3(0.0,0.0,0.2));\n    }\n}\n\nvoid trace(vec2 p, vec2 dir, out vec3 c) {\n    for (;;) {\n        float d;\n        scene(p, c, d);\n        if (d < 1e-2) return;\n        if (d > 1e1) break;\n        p += dir * d;\n    }\n    c = vec3(0,0,0);\n}\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n#define SAMPLES 128\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-(iResolution.xy/2.f))/iResolution.y*10.f;\n    vec3 col = vec3(0,0,0);\n    for (int i = 0; i < SAMPLES; i++) {\n        float t = (float(i) + random(uv+float(i)+iTime)) / float(SAMPLES) * 2. * 3.1415;\n        vec3 c;\n        trace(uv, vec2(cos(t), sin(t)), c);\n        col += c;\n    }\n    col /= float(SAMPLES);\n    // Output to screen\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}