{
    "Shader": {
        "info": {
            "date": "1657651298",
            "description": "By piping the frame to itself, I add all the pixels at a distance r and subtract and the pixels at a distance 2*r, thereby maximizing black and white shapes of width r\n\n\"brush\" can be controlled with the mouse",
            "flags": 32,
            "hasliked": 0,
            "id": "ssGfR1",
            "likes": 9,
            "name": "Frequency oscillations",
            "published": 3,
            "tags": [
                "abstract",
                "frequency",
                "backbuffer"
            ],
            "usePreview": 0,
            "username": "ninofiliu",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 color, in vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color = texture(iChannel0, uv);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float twoRadiuses(vec2 uv, float r) {\n  const int n = 20;\n  const float turn = 6.283185307179586;\n\n  // samples n points on two circles around uv\n  float ret = 0.;\n  for (int i = 0; i < n; i++) {\n    float a = float(i) / float(n) * turn;\n    // first circle (radius 1*r)\n    ret += texture(iChannel0, uv + 1. * r * vec2(cos(a), sin(a))).r;\n    // second circle (radius 2*r)\n    ret -= texture(iChannel0, uv + 2. * r * vec2(cos(a), sin(a))).r;\n  }\n  ret /= float(n) * .3;\n\n  return ret;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n  vec2 uv = coord / iResolution.xy;\n\n  // initializes the color to the color of the corresponding pixel in the last frame\n  color = texture(iChannel0, uv);\n  \n  // the radius r oscillates over time between 0 and 0.1\n  float r = .05 * (0.5 + 0.5 * cos(0.5 * iTime));\n  color += twoRadiuses(uv, r);\n  color = clamp(color, 0., 1.);\n\n  // if clicked on the shader,\n  // then the brush is at the position of the mouse\n  // else the brush position oscillates depending on some easy to get functions\n  vec2 brush = iMouse.z > 0.\n                   ? (iMouse.xy / iResolution.xy)\n                   : (0.5 + 0.3 * vec2(cos(2. * iTime), sin(3.1 * iTime)));\n                   \n  // the brush consists in a white blurry disk\n  color.rgb += clamp(4. - 70. * distance(uv, brush), 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}