{
    "Shader": {
        "info": {
            "date": "1591839231",
            "description": "Nothing but 800 sine waves superimposed!",
            "flags": 40,
            "hasliked": 0,
            "id": "WtsyWr",
            "likes": 3,
            "name": "Sine melody",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "interference",
                "sines",
                "sampleprecise"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "                                                                                                                                                                                                                                                                /*\n\n    Main source is in the Common tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n\n\n\n/* \n\nExpression Plotter\n\nUsage: PLOT_CONTINUOUS( fragColor, uv, window, domain,\n                        linecolor, side, blend, linewidth, expression );\n\n  fragColor - output (linear RGB)\n  uv - coordinate system for window\n  window - mat2, first col: window corner, second col: window size\n  domain - mat2, first col: min x,y, second col: max x,y\n  linecolor - RGB\n  side - 0 = line, 1 = below, -1 = above (see demo)\n  blend - 0=paint, 1=light-trace, 2=ink (see demo)\n  linewidth - measured in units of uv.x; only for side=0\n  expression - uses x as the independent variable\n\nThis file may be used and copied under the terms of the ISC License;\nsee end of file.  As an exception, the full permission notice may be\nomitted where this file is copied within Shadertoy and the full URL,\n\"https://www.shadertoy.com/view/3t3XWf\", is displayed within the source.\n\n*/\n\n\n\n// https://www.shadertoy.com/view/3t3XWf by ttg\nvoid PLOT_CONTINUOUS_CHECK_ARGS(inout vec3 fcolor, vec2 fcoord, mat2 window,\n  mat2 domain, vec3 color, int side, int blend, float linewidth) {}\n#define PLOT_CONTINUOUS(_fcolor, _Afcoord, _Awindow, \\\n  _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth, _function) \\\n  { \\\n    PLOT_CONTINUOUS_CHECK_ARGS(_fcolor, _Afcoord, _Awindow, \\\n      _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth); \\\n    vec2 _fcoord = (_Afcoord); \\\n    mat2 _window = (_Awindow); \\\n    mat2 _domain = (_Adomain); \\\n    vec3 _color = (_Acolor); \\\n    int _side = (_Aside); \\\n    int _blend = (_Ablend); \\\n    float _alinewidth = (_Alinewidth); \\\n    vec2 _rcoord = _fcoord-_window[0]; \\\n    vec2 _res = _window[1]/(_domain[1]-_domain[0])/ \\\n        vec2(dFdx(_fcoord.x),dFdy(_fcoord.y)); \\\n    float _linerpa = min(10.,(_alinewidth*_res.x)*.5); \\\n    float _linerp = max(.5,_linerpa); \\\n    if (all(bvec4(greaterThan(_rcoord,vec2(0)), \\\n                  lessThan(_rcoord,_window[1])))) { \\\n      float _pixmixsum = 0.; \\\n      int _passes = 0; \\\n      if (_side==0) _passes = min(10,int(floor(_linerp))); \\\n      vec2 _x = _rcoord/_window[1]*(_domain[1]-_domain[0])+_domain[0]; \\\n      float _ylast; \\\n      for (int _i = -_passes-1; _i <= _passes; _i++) { \\\n        float offset = float(_i) ; \\\n        vec2 _x = _x + vec2(1,0)*offset/_res; \\\n        float _dx = .5/_res.x; \\\n        float _y1, _y2, _ddx; \\\n        float x = _x.x+_dx; _y1 = (_function); \\\n        _y2 = _ylast; _ylast = _y1; \\\n        if (_i==-_passes-1) continue; \\\n        _ddx = ((_y1-_y2)/(_dx*2.))*_res.y/_res.x; \\\n        float _y = (_y1+_y2)/2.; \\\n        float hdiff = (_y-_x.y) *_res.y; \\\n        if (_side==0) hdiff = \\\n          .7*(abs(hdiff)+.5-_linerp*sqrt(1.-pow(offset/_linerp,2.))); \\\n        float pixmix = hdiff/sqrt(1.+_ddx*_ddx); \\\n        if (_side!=0) pixmix = pixmix*sign(float(_side))+0.5; \\\n        if (_side==0) pixmix = 1.-pixmix; \\\n        pixmix = clamp(pixmix,0.,1.); \\\n        if (_blend==1 && _side==0) pixmix /= sqrt(1.+_ddx*_ddx); \\\n        if (_passes!=0 && abs(_i)==_passes) pixmix *= fract(_linerp); \\\n        if (_side==0) pixmix *= \\\n          1./(1.+max(0.,_linerp-2.)/pow(1.+_ddx*_ddx,2.0)); \\\n        _pixmixsum += pixmix; \\\n      } \\\n      if (_blend!=1) _pixmixsum = clamp(_pixmixsum,0.,1.); \\\n      if (_side==0 && _linerpa<.5) _pixmixsum*=max(0.,_linerpa*2.); \\\n      if (_blend==0) _fcolor = mix( _fcolor, _color, _pixmixsum ); \\\n      if (_blend==1) _fcolor = _fcolor + _color*_pixmixsum; \\\n      if (_blend==2) _fcolor = _fcolor * mix( vec3(1.), _color, _pixmixsum ); \\\n      _fcolor = max(vec3(0.), _fcolor); \\\n    } \\\n  }\n\n/*\nCopyright 2020 Theron Tarigo\n\nPermission to use, copy, modify, and/or distribute this software for any \npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.);\n    PLOT_CONTINUOUS(col, uv, mat2(0,0,1,1), mat2(0.,-1.,1.,1.), vec3(1.), 0, 1, .002, texture(iChannel0, vec2(x,0.)).x );\n    PLOT_CONTINUOUS(col, uv, mat2(0,0,1,1), mat2(0.,-1.,1.,1.), .04*vec3(.1,1.,.1), 0, 1, .02, texture(iChannel0, vec2(x,0.)).x );\n    col += .003*vec3(.1,1.,.1);\n\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(1./2.2)),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3[] partials = vec3[](\nvec3(-2, 122.897222,-0.000),vec3( 2, 122.902778,-0.000),vec3(-2, 123.097222, 0.000),vec3( 2, 123.102778, 0.000),vec3(-2, 140.897222, 0.000),vec3( 2, 140.902778, 0.000),vec3(-2, 141.097222, 0.000),vec3( 2, 141.102778, 0.000),\nvec3(-2, 124.897222,-0.000),vec3( 2, 124.902778,-0.000),vec3(-2, 125.097222, 0.000),vec3( 2, 125.102778, 0.000),vec3(-2, 138.897222, 0.000),vec3( 2, 138.902778, 0.000),vec3(-2, 139.097222, 0.000),vec3( 2, 139.102778, 0.000),\nvec3(-2, 126.897222,-0.000),vec3( 2, 126.902778,-0.000),vec3(-2, 127.097222, 0.000),vec3( 2, 127.102778, 0.000),vec3(-2, 136.897222, 0.000),vec3( 2, 136.902778, 0.000),vec3(-2, 137.097222, 0.000),vec3( 2, 137.102778, 0.000),\nvec3(-2, 128.897222,-0.000),vec3( 2, 128.902778,-0.000),vec3(-2, 129.097222, 0.000),vec3( 2, 129.102778, 0.000),vec3(-2, 134.897222, 0.000),vec3( 2, 134.902778, 0.000),vec3(-2, 135.097222, 0.000),vec3( 2, 135.102778, 0.000),\nvec3(-2, 130.897222,-0.000),vec3( 2, 130.902778,-0.000),vec3(-2, 131.097222, 0.000),vec3( 2, 131.102778, 0.000),vec3(-2, 132.897222, 0.000),vec3( 2, 132.902778, 0.000),vec3(-2, 133.097222, 0.000),vec3( 2, 133.102778, 0.000),\nvec3(-2, 166.897222,-0.250),vec3( 2, 166.902778,-0.250),vec3(-2, 167.097222, 0.250),vec3( 2, 167.102778, 0.250),vec3(-2, 184.897222,-0.250),vec3( 2, 184.902778,-0.250),vec3(-2, 185.097222, 0.250),vec3( 2, 185.102778, 0.250),\nvec3(-2, 168.897222,-0.250),vec3( 2, 168.902778,-0.250),vec3(-2, 169.097222, 0.250),vec3( 2, 169.102778, 0.250),vec3(-2, 182.897222,-0.250),vec3( 2, 182.902778,-0.250),vec3(-2, 183.097222, 0.250),vec3( 2, 183.102778, 0.250),\nvec3(-2, 170.897222,-0.250),vec3( 2, 170.902778,-0.250),vec3(-2, 171.097222, 0.250),vec3( 2, 171.102778, 0.250),vec3(-2, 180.897222,-0.250),vec3( 2, 180.902778,-0.250),vec3(-2, 181.097222, 0.250),vec3( 2, 181.102778, 0.250),\nvec3(-2, 172.897222,-0.250),vec3( 2, 172.902778,-0.250),vec3(-2, 173.097222, 0.250),vec3( 2, 173.102778, 0.250),vec3(-2, 178.897222,-0.250),vec3( 2, 178.902778,-0.250),vec3(-2, 179.097222, 0.250),vec3( 2, 179.102778, 0.250),\nvec3(-2, 174.897222,-0.250),vec3( 2, 174.902778,-0.250),vec3(-2, 175.097222, 0.250),vec3( 2, 175.102778, 0.250),vec3(-2, 176.897222,-0.250),vec3( 2, 176.902778,-0.250),vec3(-2, 177.097222, 0.250),vec3( 2, 177.102778, 0.250),\nvec3(-1, 193.397222,-3.375),vec3( 1, 193.402778,-3.375),vec3(-1, 193.597222,-3.375),vec3( 1, 193.602778,-3.375),vec3(-1, 202.397222, 3.375),vec3( 1, 202.402778, 3.375),vec3(-1, 202.597222, 3.375),vec3( 1, 202.602778, 3.375),\nvec3(-1, 194.397222,-2.625),vec3( 1, 194.402778,-2.625),vec3(-1, 194.597222,-2.625),vec3( 1, 194.602778,-2.625),vec3(-1, 201.397222, 2.625),vec3( 1, 201.402778, 2.625),vec3(-1, 201.597222, 2.625),vec3( 1, 201.602778, 2.625),\nvec3(-1, 195.397222,-1.875),vec3( 1, 195.402778,-1.875),vec3(-1, 195.597222,-1.875),vec3( 1, 195.602778,-1.875),vec3(-1, 200.397222, 1.875),vec3( 1, 200.402778, 1.875),vec3(-1, 200.597222, 1.875),vec3( 1, 200.602778, 1.875),\nvec3(-1, 196.397222,-1.125),vec3( 1, 196.402778,-1.125),vec3(-1, 196.597222,-1.125),vec3( 1, 196.602778,-1.125),vec3(-1, 199.397222, 1.125),vec3( 1, 199.402778, 1.125),vec3(-1, 199.597222, 1.125),vec3( 1, 199.602778, 1.125),\nvec3(-1, 197.397222,-0.375),vec3( 1, 197.402778,-0.375),vec3(-1, 197.597222,-0.375),vec3( 1, 197.602778,-0.375),vec3(-1, 198.397222, 0.375),vec3( 1, 198.402778, 0.375),vec3(-1, 198.597222, 0.375),vec3( 1, 198.602778, 0.375),\nvec3(-1, 259.397222,-0.000),vec3( 1, 259.402778,-0.000),vec3(-1, 259.597222, 0.000),vec3( 1, 259.602778, 0.000),vec3(-1, 268.397222, 0.000),vec3( 1, 268.402778, 0.000),vec3(-1, 268.597222, 0.000),vec3( 1, 268.602778, 0.000),\nvec3(-1, 259.397222,-3.625),vec3( 1, 259.402778,-3.625),vec3(-1, 259.597222,-3.125),vec3( 1, 259.602778,-3.125),vec3(-1, 268.397222, 3.125),vec3( 1, 268.402778, 3.125),vec3(-1, 268.597222, 3.625),vec3( 1, 268.602778, 3.625),\nvec3(-1, 260.397222,-0.000),vec3( 1, 260.402778,-0.000),vec3(-1, 260.597222, 0.000),vec3( 1, 260.602778, 0.000),vec3(-1, 267.397222, 0.000),vec3( 1, 267.402778, 0.000),vec3(-1, 267.597222, 0.000),vec3( 1, 267.602778, 0.000),\nvec3(-1, 260.397222,-2.875),vec3( 1, 260.402778,-2.875),vec3(-1, 260.597222,-2.375),vec3( 1, 260.602778,-2.375),vec3(-1, 267.397222, 2.375),vec3( 1, 267.402778, 2.375),vec3(-1, 267.597222, 2.875),vec3( 1, 267.602778, 2.875),\nvec3(-1, 261.397222,-0.000),vec3( 1, 261.402778,-0.000),vec3(-1, 261.597222, 0.000),vec3( 1, 261.602778, 0.000),vec3(-1, 266.397222, 0.000),vec3( 1, 266.402778, 0.000),vec3(-1, 266.597222, 0.000),vec3( 1, 266.602778, 0.000),\nvec3(-1, 261.397222,-2.125),vec3( 1, 261.402778,-2.125),vec3(-1, 261.597222,-1.625),vec3( 1, 261.602778,-1.625),vec3(-1, 266.397222, 1.625),vec3( 1, 266.402778, 1.625),vec3(-1, 266.597222, 2.125),vec3( 1, 266.602778, 2.125),\nvec3(-1, 262.397222,-0.000),vec3( 1, 262.402778,-0.000),vec3(-1, 262.597222, 0.000),vec3( 1, 262.602778, 0.000),vec3(-1, 265.397222, 0.000),vec3( 1, 265.402778, 0.000),vec3(-1, 265.597222, 0.000),vec3( 1, 265.602778, 0.000),\nvec3(-1, 262.397222,-1.375),vec3( 1, 262.402778,-1.375),vec3(-1, 262.597222,-0.875),vec3( 1, 262.602778,-0.875),vec3(-1, 265.397222, 0.875),vec3( 1, 265.402778, 0.875),vec3(-1, 265.597222, 1.375),vec3( 1, 265.602778, 1.375),\nvec3(-1, 263.397222,-0.000),vec3( 1, 263.402778,-0.000),vec3(-1, 263.597222, 0.000),vec3( 1, 263.602778, 0.000),vec3(-1, 264.397222, 0.000),vec3( 1, 264.402778, 0.000),vec3(-1, 264.597222, 0.000),vec3( 1, 264.602778, 0.000),\nvec3(-1, 263.397222,-0.625),vec3( 1, 263.402778,-0.625),vec3(-1, 263.597222,-0.125),vec3( 1, 263.602778,-0.125),vec3(-1, 264.397222, 0.125),vec3( 1, 264.402778, 0.125),vec3(-1, 264.597222, 0.625),vec3( 1, 264.602778, 0.625),\nvec3(-1, 347.397222,-0.250),vec3( 1, 347.402778,-0.250),vec3(-1, 347.597222, 0.250),vec3( 1, 347.602778, 0.250),vec3(-1, 356.397222,-0.250),vec3( 1, 356.402778,-0.250),vec3(-1, 356.597222, 0.250),vec3( 1, 356.602778, 0.250),\nvec3(-1, 348.397222,-0.250),vec3( 1, 348.402778,-0.250),vec3(-1, 348.597222, 0.250),vec3( 1, 348.602778, 0.250),vec3(-1, 355.397222,-0.250),vec3( 1, 355.402778,-0.250),vec3(-1, 355.597222, 0.250),vec3( 1, 355.602778, 0.250),\nvec3(-1, 349.397222,-0.250),vec3( 1, 349.402778,-0.250),vec3(-1, 349.597222, 0.250),vec3( 1, 349.602778, 0.250),vec3(-1, 354.397222,-0.250),vec3( 1, 354.402778,-0.250),vec3(-1, 354.597222, 0.250),vec3( 1, 354.602778, 0.250),\nvec3(-1, 350.397222,-0.250),vec3( 1, 350.402778,-0.250),vec3(-1, 350.597222, 0.250),vec3( 1, 350.602778, 0.250),vec3(-1, 353.397222,-0.250),vec3( 1, 353.402778,-0.250),vec3(-1, 353.597222, 0.250),vec3( 1, 353.602778, 0.250),\nvec3(-1, 351.397222,-0.250),vec3( 1, 351.402778,-0.250),vec3(-1, 351.597222, 0.250),vec3( 1, 351.602778, 0.250),vec3(-1, 352.397222,-0.250),vec3( 1, 352.402778,-0.250),vec3(-1, 352.597222, 0.250),vec3( 1, 352.602778, 0.250),\nvec3(-1, 391.397222,-2.250),vec3( 1, 391.402778,-2.250),vec3(-1, 391.597222,-2.250),vec3( 1, 391.602778,-2.250),vec3(-1, 400.397222, 2.250),vec3( 1, 400.402778, 2.250),vec3(-1, 400.597222, 2.250),vec3( 1, 400.602778, 2.250),\nvec3(-1, 392.397222,-1.750),vec3( 1, 392.402778,-1.750),vec3(-1, 392.597222,-1.750),vec3( 1, 392.602778,-1.750),vec3(-1, 399.397222, 1.750),vec3( 1, 399.402778, 1.750),vec3(-1, 399.597222, 1.750),vec3( 1, 399.602778, 1.750),\nvec3(-1, 393.397222,-1.250),vec3( 1, 393.402778,-1.250),vec3(-1, 393.597222,-1.250),vec3( 1, 393.602778,-1.250),vec3(-1, 398.397222, 1.250),vec3( 1, 398.402778, 1.250),vec3(-1, 398.597222, 1.250),vec3( 1, 398.602778, 1.250),\nvec3(-1, 394.397222,-0.750),vec3( 1, 394.402778,-0.750),vec3(-1, 394.597222,-0.750),vec3( 1, 394.602778,-0.750),vec3(-1, 397.397222, 0.750),vec3( 1, 397.402778, 0.750),vec3(-1, 397.597222, 0.750),vec3( 1, 397.602778, 0.750),\nvec3(-1, 395.397222,-0.250),vec3( 1, 395.402778,-0.250),vec3(-1, 395.597222,-0.250),vec3( 1, 395.602778,-0.250),vec3(-1, 396.397222, 0.250),vec3( 1, 396.402778, 0.250),vec3(-1, 396.597222, 0.250),vec3( 1, 396.602778, 0.250),\nvec3(-1, 435.397222,-1.375),vec3( 1, 435.402778,-1.375),vec3(-1, 435.597222,-0.875),vec3( 1, 435.602778,-0.875),vec3(-1, 444.397222, 0.875),vec3( 1, 444.402778, 0.875),vec3(-1, 444.597222, 1.375),vec3( 1, 444.602778, 1.375),\nvec3(-1, 436.397222,-1.125),vec3( 1, 436.402778,-1.125),vec3(-1, 436.597222,-0.625),vec3( 1, 436.602778,-0.625),vec3(-1, 443.397222, 0.625),vec3( 1, 443.402778, 0.625),vec3(-1, 443.597222, 1.125),vec3( 1, 443.602778, 1.125),\nvec3(-1, 437.397222,-0.875),vec3( 1, 437.402778,-0.875),vec3(-1, 437.597222,-0.375),vec3( 1, 437.602778,-0.375),vec3(-1, 442.397222, 0.375),vec3( 1, 442.402778, 0.375),vec3(-1, 442.597222, 0.875),vec3( 1, 442.602778, 0.875),\nvec3(-1, 438.397222,-0.625),vec3( 1, 438.402778,-0.625),vec3(-1, 438.597222,-0.125),vec3( 1, 438.602778,-0.125),vec3(-1, 441.397222, 0.125),vec3( 1, 441.402778, 0.125),vec3(-1, 441.597222, 0.625),vec3( 1, 441.602778, 0.625),\nvec3(-1, 439.397222,-0.375),vec3( 1, 439.402778,-0.375),vec3(-1, 439.597222, 0.125),vec3( 1, 439.602778, 0.125),vec3(-1, 440.397222,-0.125),vec3( 1, 440.402778,-0.125),vec3(-1, 440.597222, 0.375),vec3( 1, 440.602778, 0.375),\nvec3(-2, 518.897222,-0.000),vec3( 2, 518.902778,-0.000),vec3(-2, 519.097222, 0.000),vec3( 2, 519.102778, 0.000),vec3(-2, 536.897222, 0.000),vec3( 2, 536.902778, 0.000),vec3(-2, 537.097222, 0.000),vec3( 2, 537.102778, 0.000),\nvec3(-2, 520.897222,-0.000),vec3( 2, 520.902778,-0.000),vec3(-2, 521.097222, 0.000),vec3( 2, 521.102778, 0.000),vec3(-2, 534.897222, 0.000),vec3( 2, 534.902778, 0.000),vec3(-2, 535.097222, 0.000),vec3( 2, 535.102778, 0.000),\nvec3(-2, 522.897222,-0.000),vec3( 2, 522.902778,-0.000),vec3(-2, 523.097222, 0.000),vec3( 2, 523.102778, 0.000),vec3(-2, 532.897222, 0.000),vec3( 2, 532.902778, 0.000),vec3(-2, 533.097222, 0.000),vec3( 2, 533.102778, 0.000),\nvec3(-1, 523.397222,-1.125),vec3( 1, 523.402778,-1.125),vec3(-1, 523.597222,-1.125),vec3( 1, 523.602778,-1.125),vec3(-1, 532.397222, 1.125),vec3( 1, 532.402778, 1.125),vec3(-1, 532.597222, 1.125),vec3( 1, 532.602778, 1.125),\nvec3(-1, 523.397222,-2.500),vec3( 1, 523.402778,-2.500),vec3(-1, 523.597222,-2.000),vec3( 1, 523.602778,-2.000),vec3(-1, 532.397222, 2.000),vec3( 1, 532.402778, 2.000),vec3(-1, 532.597222, 2.500),vec3( 1, 532.602778, 2.500),\nvec3(-1, 524.397222,-0.875),vec3( 1, 524.402778,-0.875),vec3(-1, 524.597222,-0.875),vec3( 1, 524.602778,-0.875),vec3(-1, 531.397222, 0.875),vec3( 1, 531.402778, 0.875),vec3(-1, 531.597222, 0.875),vec3( 1, 531.602778, 0.875),\nvec3(-1, 524.397222,-2.000),vec3( 1, 524.402778,-2.000),vec3(-1, 524.597222,-1.500),vec3( 1, 524.602778,-1.500),vec3(-1, 531.397222, 1.500),vec3( 1, 531.402778, 1.500),vec3(-1, 531.597222, 2.000),vec3( 1, 531.602778, 2.000),\nvec3(-2, 524.897222,-0.000),vec3( 2, 524.902778,-0.000),vec3(-2, 525.097222, 0.000),vec3( 2, 525.102778, 0.000),vec3(-2, 530.897222, 0.000),vec3( 2, 530.902778, 0.000),vec3(-2, 531.097222, 0.000),vec3( 2, 531.102778, 0.000),\nvec3(-1, 525.397222,-0.625),vec3( 1, 525.402778,-0.625),vec3(-1, 525.597222,-0.625),vec3( 1, 525.602778,-0.625),vec3(-1, 530.397222, 0.625),vec3( 1, 530.402778, 0.625),vec3(-1, 530.597222, 0.625),vec3( 1, 530.602778, 0.625),\nvec3(-1, 525.397222,-1.500),vec3( 1, 525.402778,-1.500),vec3(-1, 525.597222,-1.000),vec3( 1, 525.602778,-1.000),vec3(-1, 530.397222, 1.000),vec3( 1, 530.402778, 1.000),vec3(-1, 530.597222, 1.500),vec3( 1, 530.602778, 1.500),\nvec3(-1, 526.397222,-0.375),vec3( 1, 526.402778,-0.375),vec3(-1, 526.597222,-0.375),vec3( 1, 526.602778,-0.375),vec3(-1, 529.397222, 0.375),vec3( 1, 529.402778, 0.375),vec3(-1, 529.597222, 0.375),vec3( 1, 529.602778, 0.375),\nvec3(-1, 526.397222,-1.000),vec3( 1, 526.402778,-1.000),vec3(-1, 526.597222,-0.500),vec3( 1, 526.602778,-0.500),vec3(-1, 529.397222, 0.500),vec3( 1, 529.402778, 0.500),vec3(-1, 529.597222, 1.000),vec3( 1, 529.602778, 1.000),\nvec3(-2, 526.897222,-0.000),vec3( 2, 526.902778,-0.000),vec3(-2, 527.097222, 0.000),vec3( 2, 527.102778, 0.000),vec3(-2, 528.897222, 0.000),vec3( 2, 528.902778, 0.000),vec3(-2, 529.097222, 0.000),vec3( 2, 529.102778, 0.000),\nvec3(-1, 527.397222,-0.125),vec3( 1, 527.402778,-0.125),vec3(-1, 527.597222,-0.125),vec3( 1, 527.602778,-0.125),vec3(-1, 528.397222, 0.125),vec3( 1, 528.402778, 0.125),vec3(-1, 528.597222, 0.125),vec3( 1, 528.602778, 0.125),\nvec3(-1, 527.397222,-0.500),vec3( 1, 527.402778,-0.500),vec3(-1, 527.597222, 0.000),vec3( 1, 527.602778, 0.000),vec3(-1, 528.397222, 0.000),vec3( 1, 528.402778, 0.000),vec3(-1, 528.597222, 0.500),vec3( 1, 528.602778, 0.500),\nvec3(-2, 694.897222,-0.250),vec3( 2, 694.902778,-0.250),vec3(-2, 695.097222, 0.250),vec3( 2, 695.102778, 0.250),vec3(-2, 712.897222,-0.250),vec3( 2, 712.902778,-0.250),vec3(-2, 713.097222, 0.250),vec3( 2, 713.102778, 0.250),\nvec3(-2, 696.897222,-0.250),vec3( 2, 696.902778,-0.250),vec3(-2, 697.097222, 0.250),vec3( 2, 697.102778, 0.250),vec3(-2, 710.897222,-0.250),vec3( 2, 710.902778,-0.250),vec3(-2, 711.097222, 0.250),vec3( 2, 711.102778, 0.250),\nvec3(-2, 698.897222,-0.250),vec3( 2, 698.902778,-0.250),vec3(-2, 699.097222, 0.250),vec3( 2, 699.102778, 0.250),vec3(-2, 708.897222,-0.250),vec3( 2, 708.902778,-0.250),vec3(-2, 709.097222, 0.250),vec3( 2, 709.102778, 0.250),\nvec3(-2, 700.897222,-0.250),vec3( 2, 700.902778,-0.250),vec3(-2, 701.097222, 0.250),vec3( 2, 701.102778, 0.250),vec3(-2, 706.897222,-0.250),vec3( 2, 706.902778,-0.250),vec3(-2, 707.097222, 0.250),vec3( 2, 707.102778, 0.250),\nvec3(-2, 702.897222,-0.250),vec3( 2, 702.902778,-0.250),vec3(-2, 703.097222, 0.250),vec3( 2, 703.102778, 0.250),vec3(-2, 704.897222,-0.250),vec3( 2, 704.902778,-0.250),vec3(-2, 705.097222, 0.250),vec3( 2, 705.102778, 0.250),\nvec3(-1, 787.397222,-3.375),vec3( 1, 787.402778,-3.375),vec3(-1, 787.597222,-3.375),vec3( 1, 787.602778,-3.375),vec3(-1, 796.397222, 3.375),vec3( 1, 796.402778, 3.375),vec3(-1, 796.597222, 3.375),vec3( 1, 796.602778, 3.375),\nvec3(-1, 788.397222,-2.625),vec3( 1, 788.402778,-2.625),vec3(-1, 788.597222,-2.625),vec3( 1, 788.602778,-2.625),vec3(-1, 795.397222, 2.625),vec3( 1, 795.402778, 2.625),vec3(-1, 795.597222, 2.625),vec3( 1, 795.602778, 2.625),\nvec3(-1, 789.397222,-1.875),vec3( 1, 789.402778,-1.875),vec3(-1, 789.597222,-1.875),vec3( 1, 789.602778,-1.875),vec3(-1, 794.397222, 1.875),vec3( 1, 794.402778, 1.875),vec3(-1, 794.597222, 1.875),vec3( 1, 794.602778, 1.875),\nvec3(-1, 790.397222,-1.125),vec3( 1, 790.402778,-1.125),vec3(-1, 790.597222,-1.125),vec3( 1, 790.602778,-1.125),vec3(-1, 793.397222, 1.125),vec3( 1, 793.402778, 1.125),vec3(-1, 793.597222, 1.125),vec3( 1, 793.602778, 1.125),\nvec3(-1, 791.397222,-0.375),vec3( 1, 791.402778,-0.375),vec3(-1, 791.597222,-0.375),vec3( 1, 791.602778,-0.375),vec3(-1, 792.397222, 0.375),vec3( 1, 792.402778, 0.375),vec3(-1, 792.597222, 0.375),vec3( 1, 792.602778, 0.375),\nvec3(-1,1051.397222,-0.000),vec3( 1,1051.402778,-0.000),vec3(-1,1051.597222, 0.000),vec3( 1,1051.602778, 0.000),vec3(-1,1060.397222, 0.000),vec3( 1,1060.402778, 0.000),vec3(-1,1060.597222, 0.000),vec3( 1,1060.602778, 0.000),\nvec3(-1,1051.397222,-3.625),vec3( 1,1051.402778,-3.625),vec3(-1,1051.597222,-3.125),vec3( 1,1051.602778,-3.125),vec3(-1,1060.397222, 3.125),vec3( 1,1060.402778, 3.125),vec3(-1,1060.597222, 3.625),vec3( 1,1060.602778, 3.625),\nvec3(-1,1052.397222,-0.000),vec3( 1,1052.402778,-0.000),vec3(-1,1052.597222, 0.000),vec3( 1,1052.602778, 0.000),vec3(-1,1059.397222, 0.000),vec3( 1,1059.402778, 0.000),vec3(-1,1059.597222, 0.000),vec3( 1,1059.602778, 0.000),\nvec3(-1,1052.397222,-2.875),vec3( 1,1052.402778,-2.875),vec3(-1,1052.597222,-2.375),vec3( 1,1052.602778,-2.375),vec3(-1,1059.397222, 2.375),vec3( 1,1059.402778, 2.375),vec3(-1,1059.597222, 2.875),vec3( 1,1059.602778, 2.875),\nvec3(-1,1053.397222,-0.000),vec3( 1,1053.402778,-0.000),vec3(-1,1053.597222, 0.000),vec3( 1,1053.602778, 0.000),vec3(-1,1058.397222, 0.000),vec3( 1,1058.402778, 0.000),vec3(-1,1058.597222, 0.000),vec3( 1,1058.602778, 0.000),\nvec3(-1,1053.397222,-2.125),vec3( 1,1053.402778,-2.125),vec3(-1,1053.597222,-1.625),vec3( 1,1053.602778,-1.625),vec3(-1,1058.397222, 1.625),vec3( 1,1058.402778, 1.625),vec3(-1,1058.597222, 2.125),vec3( 1,1058.602778, 2.125),\nvec3(-1,1054.397222,-0.000),vec3( 1,1054.402778,-0.000),vec3(-1,1054.597222, 0.000),vec3( 1,1054.602778, 0.000),vec3(-1,1057.397222, 0.000),vec3( 1,1057.402778, 0.000),vec3(-1,1057.597222, 0.000),vec3( 1,1057.602778, 0.000),\nvec3(-1,1054.397222,-1.375),vec3( 1,1054.402778,-1.375),vec3(-1,1054.597222,-0.875),vec3( 1,1054.602778,-0.875),vec3(-1,1057.397222, 0.875),vec3( 1,1057.402778, 0.875),vec3(-1,1057.597222, 1.375),vec3( 1,1057.602778, 1.375),\nvec3(-1,1055.397222,-0.000),vec3( 1,1055.402778,-0.000),vec3(-1,1055.597222, 0.000),vec3( 1,1055.602778, 0.000),vec3(-1,1056.397222, 0.000),vec3( 1,1056.402778, 0.000),vec3(-1,1056.597222, 0.000),vec3( 1,1056.602778, 0.000),\nvec3(-1,1055.397222,-0.625),vec3( 1,1055.402778,-0.625),vec3(-1,1055.597222,-0.125),vec3( 1,1055.602778,-0.125),vec3(-1,1056.397222, 0.125),vec3( 1,1056.402778, 0.125),vec3(-1,1056.597222, 0.625),vec3( 1,1056.602778, 0.625),\nvec3(-1,1403.397222,-0.250),vec3( 1,1403.402778,-0.250),vec3(-1,1403.597222, 0.250),vec3( 1,1403.602778, 0.250),vec3(-1,1412.397222,-0.250),vec3( 1,1412.402778,-0.250),vec3(-1,1412.597222, 0.250),vec3( 1,1412.602778, 0.250),\nvec3(-1,1404.397222,-0.250),vec3( 1,1404.402778,-0.250),vec3(-1,1404.597222, 0.250),vec3( 1,1404.602778, 0.250),vec3(-1,1411.397222,-0.250),vec3( 1,1411.402778,-0.250),vec3(-1,1411.597222, 0.250),vec3( 1,1411.602778, 0.250),\nvec3(-1,1405.397222,-0.250),vec3( 1,1405.402778,-0.250),vec3(-1,1405.597222, 0.250),vec3( 1,1405.602778, 0.250),vec3(-1,1410.397222,-0.250),vec3( 1,1410.402778,-0.250),vec3(-1,1410.597222, 0.250),vec3( 1,1410.602778, 0.250),\nvec3(-1,1406.397222,-0.250),vec3( 1,1406.402778,-0.250),vec3(-1,1406.597222, 0.250),vec3( 1,1406.602778, 0.250),vec3(-1,1409.397222,-0.250),vec3( 1,1409.402778,-0.250),vec3(-1,1409.597222, 0.250),vec3( 1,1409.602778, 0.250),\nvec3(-1,1407.397222,-0.250),vec3( 1,1407.402778,-0.250),vec3(-1,1407.597222, 0.250),vec3( 1,1407.602778, 0.250),vec3(-1,1408.397222,-0.250),vec3( 1,1408.402778,-0.250),vec3(-1,1408.597222, 0.250),vec3( 1,1408.602778, 0.250),\nvec3(-1,1579.397222,-2.250),vec3( 1,1579.402778,-2.250),vec3(-1,1579.597222,-2.250),vec3( 1,1579.602778,-2.250),vec3(-1,1588.397222, 2.250),vec3( 1,1588.402778, 2.250),vec3(-1,1588.597222, 2.250),vec3( 1,1588.602778, 2.250),\nvec3(-1,1580.397222,-1.750),vec3( 1,1580.402778,-1.750),vec3(-1,1580.597222,-1.750),vec3( 1,1580.602778,-1.750),vec3(-1,1587.397222, 1.750),vec3( 1,1587.402778, 1.750),vec3(-1,1587.597222, 1.750),vec3( 1,1587.602778, 1.750),\nvec3(-1,1581.397222,-1.250),vec3( 1,1581.402778,-1.250),vec3(-1,1581.597222,-1.250),vec3( 1,1581.602778,-1.250),vec3(-1,1586.397222, 1.250),vec3( 1,1586.402778, 1.250),vec3(-1,1586.597222, 1.250),vec3( 1,1586.602778, 1.250),\nvec3(-1,1582.397222,-0.750),vec3( 1,1582.402778,-0.750),vec3(-1,1582.597222,-0.750),vec3( 1,1582.602778,-0.750),vec3(-1,1585.397222, 0.750),vec3( 1,1585.402778, 0.750),vec3(-1,1585.597222, 0.750),vec3( 1,1585.602778, 0.750),\nvec3(-1,1583.397222,-0.250),vec3( 1,1583.402778,-0.250),vec3(-1,1583.597222,-0.250),vec3( 1,1583.602778,-0.250),vec3(-1,1584.397222, 0.250),vec3( 1,1584.402778, 0.250),vec3(-1,1584.597222, 0.250),vec3( 1,1584.602778, 0.250),\nvec3(-1,1755.397222,-1.375),vec3( 1,1755.402778,-1.375),vec3(-1,1755.597222,-0.875),vec3( 1,1755.602778,-0.875),vec3(-1,1764.397222, 0.875),vec3( 1,1764.402778, 0.875),vec3(-1,1764.597222, 1.375),vec3( 1,1764.602778, 1.375),\nvec3(-1,1756.397222,-1.125),vec3( 1,1756.402778,-1.125),vec3(-1,1756.597222,-0.625),vec3( 1,1756.602778,-0.625),vec3(-1,1763.397222, 0.625),vec3( 1,1763.402778, 0.625),vec3(-1,1763.597222, 1.125),vec3( 1,1763.602778, 1.125),\nvec3(-1,1757.397222,-0.875),vec3( 1,1757.402778,-0.875),vec3(-1,1757.597222,-0.375),vec3( 1,1757.602778,-0.375),vec3(-1,1762.397222, 0.375),vec3( 1,1762.402778, 0.375),vec3(-1,1762.597222, 0.875),vec3( 1,1762.602778, 0.875),\nvec3(-1,1758.397222,-0.625),vec3( 1,1758.402778,-0.625),vec3(-1,1758.597222,-0.125),vec3( 1,1758.602778,-0.125),vec3(-1,1761.397222, 0.125),vec3( 1,1761.402778, 0.125),vec3(-1,1761.597222, 0.625),vec3( 1,1761.602778, 0.625),\nvec3(-1,1759.397222,-0.375),vec3( 1,1759.402778,-0.375),vec3(-1,1759.597222, 0.125),vec3( 1,1759.602778, 0.125),vec3(-1,1760.397222,-0.125),vec3( 1,1760.402778,-0.125),vec3(-1,1760.597222, 0.375),vec3( 1,1760.602778, 0.375),\nvec3(-1,2107.397222,-1.125),vec3( 1,2107.402778,-1.125),vec3(-1,2107.597222,-1.125),vec3( 1,2107.602778,-1.125),vec3(-1,2116.397222, 1.125),vec3( 1,2116.402778, 1.125),vec3(-1,2116.597222, 1.125),vec3( 1,2116.602778, 1.125),\nvec3(-1,2107.397222,-2.500),vec3( 1,2107.402778,-2.500),vec3(-1,2107.597222,-2.000),vec3( 1,2107.602778,-2.000),vec3(-1,2116.397222, 2.000),vec3( 1,2116.402778, 2.000),vec3(-1,2116.597222, 2.500),vec3( 1,2116.602778, 2.500),\nvec3(-1,2108.397222,-0.875),vec3( 1,2108.402778,-0.875),vec3(-1,2108.597222,-0.875),vec3( 1,2108.602778,-0.875),vec3(-1,2115.397222, 0.875),vec3( 1,2115.402778, 0.875),vec3(-1,2115.597222, 0.875),vec3( 1,2115.602778, 0.875),\nvec3(-1,2108.397222,-2.000),vec3( 1,2108.402778,-2.000),vec3(-1,2108.597222,-1.500),vec3( 1,2108.602778,-1.500),vec3(-1,2115.397222, 1.500),vec3( 1,2115.402778, 1.500),vec3(-1,2115.597222, 2.000),vec3( 1,2115.602778, 2.000),\nvec3(-1,2109.397222,-0.625),vec3( 1,2109.402778,-0.625),vec3(-1,2109.597222,-0.625),vec3( 1,2109.602778,-0.625),vec3(-1,2114.397222, 0.625),vec3( 1,2114.402778, 0.625),vec3(-1,2114.597222, 0.625),vec3( 1,2114.602778, 0.625),\nvec3(-1,2109.397222,-1.500),vec3( 1,2109.402778,-1.500),vec3(-1,2109.597222,-1.000),vec3( 1,2109.602778,-1.000),vec3(-1,2114.397222, 1.000),vec3( 1,2114.402778, 1.000),vec3(-1,2114.597222, 1.500),vec3( 1,2114.602778, 1.500),\nvec3(-1,2110.397222,-0.375),vec3( 1,2110.402778,-0.375),vec3(-1,2110.597222,-0.375),vec3( 1,2110.602778,-0.375),vec3(-1,2113.397222, 0.375),vec3( 1,2113.402778, 0.375),vec3(-1,2113.597222, 0.375),vec3( 1,2113.602778, 0.375),\nvec3(-1,2110.397222,-1.000),vec3( 1,2110.402778,-1.000),vec3(-1,2110.597222,-0.500),vec3( 1,2110.602778,-0.500),vec3(-1,2113.397222, 0.500),vec3( 1,2113.402778, 0.500),vec3(-1,2113.597222, 1.000),vec3( 1,2113.602778, 1.000),\nvec3(-1,2111.397222,-0.125),vec3( 1,2111.402778,-0.125),vec3(-1,2111.597222,-0.125),vec3( 1,2111.602778,-0.125),vec3(-1,2112.397222, 0.125),vec3( 1,2112.402778, 0.125),vec3(-1,2112.597222, 0.125),vec3( 1,2112.602778, 0.125),\nvec3(-1,2111.397222,-0.500),vec3( 1,2111.402778,-0.500),vec3(-1,2111.597222, 0.000),vec3( 1,2111.602778, 0.000),vec3(-1,2112.397222, 0.000),vec3( 1,2112.402778, 0.000),vec3(-1,2112.597222, 0.500),vec3( 1,2112.602778, 0.500));\n\nfloat intfract(int s, float p);\nconst float pi = 3.1415927;\n\nvec2 mainSound( int s) {\n  float v = 0.;\n    \n  for (int i=0; i<partials.length(); i++) {\n    vec3 p = partials[i];\n    v += p.x/320.*cos(2.*pi*(intfract(s, iSampleRate/p.y) - p.z));\n  }\n\n  return vec2(v);\n}\n\nfloat intfract(int s, float p) {\n  // Implements fract(s/n)\n  // Explanation and copyright: shadertoy.com/view/4ltfRN\n  // Given sample number and period, calculate phase with high accuracy.\n  // Uses integer overflow for modulo.\n  int sp = int(p), a = s%sp, b = (s/sp);\n  const float MAXF = float(uint(-1))+1.;\n  return fract(  (float(a)/p) + float((uint(b)*uint(MAXF*float(sp)/p)))/MAXF );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvec2 mainSound( in int s, float time_DO_NOT_USE)\n{\n    return mainSound(s);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "void mainImage( out vec4 v, in vec2 fc )\n{\n    if (int(fc.y)!=0) discard;\n    float x = fc.x/iResolution.x-.5;\n    v.x = mainSound( int((.02*x+round(iTime*264.)/264.)*iSampleRate)).x;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}