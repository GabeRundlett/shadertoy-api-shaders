{
    "Shader": {
        "info": {
            "date": "1722499727",
            "description": "Infinite floor grid pattern with ray tracing\n\n- left click + drag: move camera left and right\n- w 'or' up arrow key: move camera closer to sphere\n- s 'or' down arrow key: move camera away from sphere",
            "flags": 48,
            "hasliked": 0,
            "id": "4f2cDR",
            "likes": 0,
            "name": "Infinite floor grid",
            "published": 3,
            "tags": [
                "raytracing",
                "checker",
                "floorgrid"
            ],
            "usePreview": 0,
            "username": "anujv",
            "viewed": 72
        },
        "renderpass": [
            {
                "code": "\nbool intersect_sphere(in Ray r, inout float t_min, out vec3 pos) {\n    vec3 oc = r.o + vec3(0.0f, -3.0f, 0.0f);\n    float b = dot(oc, r.d);\n    float c = dot(oc, oc) - 9.0f;\n    float t = b * b - c;\n    if (t > 0.0f)\n        t = -b - sqrt(t);\n\n    if (t > 0.0f)\n        pos = r.o + r.d * t;\n    if (t < t_min && t > 0.0f) {\n        t_min = t;\n        return true;\n    }\n\n    return false;\n}\n\nbool intersect_plane(in Ray r, inout float t_min, out vec3 pos) {\n    float t = -r.o.y / r.d.y;\n    if (t > 0.0f)\n        pos = r.o + r.d * t;\n    if (t < t_min && t > 0.0f) {\n        t_min = t;\n        return true;\n    }\n    return false;\n}\n\nbool intersect_grid(in Ray r, inout float t_min) {\n    float t = -r.o.y / r.d.y;\n    vec3  p = r.o + r.d * t;\n    if (\n        t < t_min && t > 0.0f &&\n        !any(lessThan(p.xz, vec2(-GRID_SIZE * 0.5f))) &&\n        !any(greaterThan(p.xz, vec2(GRID_SIZE * 0.5f)))\n    ) {\n        t_min = t;\n        return true;\n    }\n    return false;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec4 camera_pos = texelFetch(iChannel0, ivec2(CAMERA_POS_IDX), 0);\n    vec4 camera_cent = texelFetch(iChannel0, ivec2(CAMERA_CENT_IDX), 0);\n\n    Camera cam = create_camera(camera_pos.xyz, camera_cent.xyz);\n\n    vec4 color  = vec4(0.0f);\n    for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n        vec2 coord = frag_coord + vec2(0.5f / float(AA)) + vec2(float(i) / float(AA), float(j) / float(AA));\n        Ray r = generate_camera_ray(cam, coord, iResolution.xy);\n\n        vec3  pos;\n        float t = 1e10;\n        vec4  col = vec4(0.0f);\n        \n        if (intersect_grid(r, t)) {\n            col = vec4(1.0f, 0.0f, 1.0f, 1.0f);\n        } else if (intersect_plane(r, t, pos)) {\n            ivec2 quad = ivec2(floor(pos.xz / CHECKER_PATTERN_SIZE));\n            float temp = float(abs(quad.x + quad.y) % 2);\n            col = vec4(temp, temp, temp, 1.0f);\n        }\n\n        if (intersect_sphere(r, t, pos)) {\n            col = vec4(normalize(pos), 1.0f);\n        }\n        \n        color += col;\n    }\n    }\n    \n    frag_color = vec4(color.xyz / color.w, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define CAMERA_POS_IDX  0, 0\n#define CAMERA_CENT_IDX 1, 0\n#define MOUSE_STATE_IDX 2, 0\n\n#define MOUSE_SENSITIVITY 10.0f\n#define MOVE_SENSITIVITY  200.0f\n#define SPIN_SPEED        0.5f\n\n// samples per pixel\n#define AA 4\n\n// size of the purple plane\n#define GRID_SIZE 80.0f\n\n// size of each checker square\n#define CHECKER_PATTERN_SIZE 10.0f\n\n#define M_PI 3.14159265f\n#define FOV  50.0f\n\nconst float FOV_RAD = FOV * (M_PI / 180.0f);\n\nstruct Camera {\n    vec3 pos;\n    vec3 cent;\n    \n    // internal\n    vec3 dir;\n    vec3 right;\n    vec3 up;\n};\n\nstruct Ray {\n    vec3 o;\n    vec3 d;\n};\n\nCamera create_camera(in vec3 pos, in vec3 cent) {\n    Camera cam;\n    cam.pos = pos;\n    cam.cent = cent;\n    \n    cam.dir = normalize(cent - pos);\n    cam.right = cross(cam.dir, vec3(0.0f, 1.0f, 0.0f));\n    cam.up = cross(cam.right, cam.dir);\n    return cam;\n}\n\nRay generate_camera_ray(in Camera cam, in vec2 frag_pos, in vec2 resolution) {\n    vec2 ss = 2.0f * (frag_pos / resolution) - 1.0f;\n    ss.x *= resolution.x / resolution.y;\n    ss *= tan(FOV_RAD * 0.5f);\n    vec3 target = cam.pos + cam.dir + cam.right * ss.x + cam.up * ss.y;\n    \n    Ray r;\n    r.o = cam.pos;\n    r.d = normalize(target - cam.pos);\n    return r;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_W     = 87;\nconst int KEY_S     = 83;\n\nbool is_key_down(int key_code) {\n    return texelFetch(iChannel1, ivec2(key_code, 0), 0).r > 0.0f;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    ivec2 idx = ivec2(frag_coord);\n\n    if (idx == ivec2(MOUSE_STATE_IDX)) {\n        frag_color = iMouse;\n        return;\n    }\n            \n    if (iFrame == 0) {\n        if (idx == ivec2(CAMERA_POS_IDX))\n            frag_color = vec4(-100.0f, 70.0f, 0.0f, 0.0f);\n        if (idx == ivec2(CAMERA_CENT_IDX))\n            frag_color = vec4(0.0f);\n        return;\n    }\n    \n    if (idx == ivec2(CAMERA_POS_IDX)) {\n        vec4 mouse_state = texelFetch(iChannel0, ivec2(MOUSE_STATE_IDX), 0);\n\n        vec4 pos = texelFetch(iChannel0, ivec2(CAMERA_POS_IDX), 0);\n        vec4 cent = texelFetch(iChannel0, ivec2(CAMERA_CENT_IDX), 0);\n        vec3 dir = normalize(cent.xyz - pos.xyz);\n        \n        // up\n        if (is_key_down(KEY_UP) || is_key_down(KEY_W)) {\n            pos += vec4(dir * MOVE_SENSITIVITY * iTimeDelta, 0.0f);\n        }\n        \n        // down\n        if (is_key_down(KEY_DOWN) || is_key_down(KEY_S)) {\n            pos -= vec4(dir * MOVE_SENSITIVITY * iTimeDelta, 0.0f);\n        }\n\n        vec2 offset;\n        if (iMouse.z <= 0.0f || mouse_state.z <= 0.0f) {\n            offset = vec2(SPIN_SPEED) * iTimeDelta;\n        } else {\n            offset = ((iMouse.xy - mouse_state.xy) / iResolution.xy) * MOUSE_SENSITIVITY;\n        }\n\n        float dist   = length(cent - pos);\n        vec3  d      = vec3(dir.x * cos(offset.x) - dir.z * sin(offset.x),\n                            dir.y,\n                            dir.x * sin(offset.x) + dir.z * cos(offset.x));\n\n        frag_color  = vec4(cent.xyz + d * -dist, 0.0f);\n        return;\n    }\n\n    frag_color = texelFetch(iChannel0, idx, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}