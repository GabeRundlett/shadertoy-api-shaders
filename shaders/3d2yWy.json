{
    "Shader": {
        "info": {
            "date": "1587271841",
            "description": "live coded with some friends in about an hour over discord live c:",
            "flags": 0,
            "hasliked": 0,
            "id": "3d2yWy",
            "likes": 10,
            "name": "Live Code With Friends: Rings",
            "published": 3,
            "tags": [
                "rings",
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat hash(float a, float b) {\n  return fract(sin(dot(vec2(a,b), vec2(12.9898, 78.233))) * 43758.5453)*2.-1.;\n}\n\nfloat id;\nfloat scene(vec3 p) {\n  float xscale = 1.;\n  id = floor(p.x*xscale);\n  p.x = (fract(p.x*xscale)-0.5)/xscale;\n  \n  float m1 = hash(id, 69.);\n  float m2 = hash(id, 38.);\n  float m3 = hash(id, 41.);\n  float myTime = iTime + m3*10.;\n  p.yz += vec2(m1,m2)*0.2 * sin(myTime*2.);\n  \n  return 0.8*(length(vec2(length(p.yz)-0.5, p.x))-0.1);\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.001);\n  return normalize(scene(p) - vec3(scene(k[0]), scene(k[1]), scene(k[2])));\n}\n\nvec3 srgb(float a, float b, float c) {\n  return pow(vec3(a,b,c), vec3(2.));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax,p)*ax, p, cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n  \n  float n1 = hash(hash(uv.x, uv.y), iTime * 11.);\n  float n2 = hash(hash(uv.x, uv.y), iTime * 23.);\n  uv += vec2(n1,n2)*0.002;\n\n  vec3 cam = normalize(vec3(1, uv));\n  float rot = iTime;\n  float shift = iTime;\n  float outside = smoothstep(0.0,0.5, asin(sin(iTime*acos(-1.)/4.)));\n  float look = mix(0.05, 0.4, outside);\n  vec3 init = vec3(shift,0,0) + vec3(0, sin(rot), cos(rot))*mix(0.15, 1., outside);\n  cam = erot(cam, vec3(0,1,0), cos(rot)*look);\n  cam = erot(cam, vec3(0,0,1), -sin(rot)*look);\n  vec3 p = init;\n  bool hit = false;\n  float mini = 100000.;\n  int i;\n  for (i = 0 ; i < 100 && !hit; i++) {\n    float dist = scene(p);\n    mini = min(dist, mini);\n    hit = dist*dist < 1e-6;\n    p+=dist*cam;\n  }\n  float glow = pow(exp(-mini*20.), 2.);\n  float idloc = id;\n  float fog = (float(i)/100.);\n  vec3 n = norm(p);\n  vec3 r = reflect(cam, n);\n  float diff = length(sin(n*2.)*0.5+0.5)/sqrt(3.);\n  float spec = length(sin(r*2.)*0.5+0.5)/sqrt(3.);\n  vec3 col = mix(srgb(0.4,0.1,0.2), srgb(0.9,0.7,0.4), spec);\n  col = abs(erot(col, normalize(vec3(1,7,1)), idloc)) + pow(spec, 15.)*2.;\n  vec3 bg = mix(srgb(0.5, 0.2, 0.3), srgb(0.2, 0.1, 0.3), sqrt(length(uv))) + glow*0.2;\n  fragColor.xyz = hit ? mix(col, bg, fog) : bg;\n  fragColor.xyz = sqrt(fragColor.xyz) + hash(hash(uv.x, uv.y), iTime)*0.04;\n  \n  fragColor.xyz = smoothstep(vec3(-0.1), vec3(1.1), fragColor.xyz);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}