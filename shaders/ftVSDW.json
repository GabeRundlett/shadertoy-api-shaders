{
    "Shader": {
        "info": {
            "date": "1640707508",
            "description": "threshold filter for video with some fast blur in prior to filter artefacts - If you have any performance improvements - let me know :)",
            "flags": 0,
            "hasliked": 0,
            "id": "ftVSDW",
            "likes": 6,
            "name": "SMOOTH_THRESHOLD_VIDEO",
            "published": 3,
            "tags": [
                "video",
                "blur",
                "threshold"
            ],
            "usePreview": 0,
            "username": "SimonOakey",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": " \n\nvec3 fastBLUR(vec3 _col, vec2 _uv, float smoothy){\n\n    // forked from https://www.shadertoy.com/view/Xltfzj   :)\n    \n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 7.0 ; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 4.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 17.0*smoothy + 1.; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = _uv/iResolution.xy;\n    // Pixel colour\n    vec3 Color = _col;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += texture( iChannel0, _uv+vec2(cos(d),sin(d))*Radius*i).rgb;\t\t\n        }\n    }\n    \n    // Output to screen\n    Color /= Quality * Directions - 8.0;\n    return Color;\n\n\n\n}\n\n\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*16.0   +vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0,1.,1.), rgb, c.y);\n}\n\n\n\nfloat returnThresholdedShadeFromColor(vec3 _col, float _amount){\n\n\n    float _shade = (_col.x+_col.y + _col.z) * .333333;\n    \n    _shade *=  _amount;\n    \n    _shade = round(_shade);\n\n    _shade /=  _amount;\n\n    return _shade;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n   \n   // get relative mouse coordinates\n   float rmy = iMouse.y/iResolution.y;\n   float rmx = iMouse.x/iResolution.x;\n    \n    \n    // redudndant - only for demo purpose\n     if(iMouse.x ==0.){ rmx = .5 ;}\n     if(iMouse.y ==0.){ rmy = .5 ;}\n     \n   \n   // get image from video\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture( iChannel0, uv ).rgb;\n   \n   \n   // do some fast blur to reduce artefacts\n    col = fastBLUR(col,uv,rmx);\n   \n   //grayscale channel threshold\n    float _shade =  returnThresholdedShadeFromColor(col,6.*rmy+1.);\n     \n    col = vec3( _shade,_shade,_shade);\n\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}