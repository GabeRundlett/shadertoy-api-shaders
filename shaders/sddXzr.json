{
    "Shader": {
        "info": {
            "date": "1632532541",
            "description": "Never thought I would be able to, but now I'm learning about differential equations! Drag with the mouse to set the initial conditions (starting point).",
            "flags": 0,
            "hasliked": 0,
            "id": "sddXzr",
            "likes": 10,
            "name": "Differential Eq with Slope Field",
            "published": 3,
            "tags": [
                "math",
                "graph",
                "differential",
                "slopefield",
                "differentialequation",
                "diffeq"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "// Learning from https://tutorial.math.lamar.edu/Classes/DE/IntroFirstOrder.aspx\n// Really great website for learning mathematics!\n//\n// A few examples I've solved:\n// https://www.desmos.com/calculator/jlvblaiscz\n// https://www.desmos.com/calculator/pjiqmyoxdu\n// https://www.desmos.com/calculator/zxnoa3soqo\n// https://www.desmos.com/calculator/qd3ewftatc\n\nfloat slopeField(in vec2 p) {\n    float co = cos(p.x), si = sin(p.x);\n    return 2.0 * co * co * si - (1.0 + si * p.y) / co; // dy/dx\n}\n\nvec2 solveIVP(in float x, in vec2 init) {\n    float coInit = cos(init.x), siInit = sin(init.x);\n    float C = coInit * coInit + (siInit + init.y) / coInit; // undefined when init.x is an odd multiple of pi/2\n    float co = cos(x), si = sin(x);\n    return vec2((C - co * co) * co - si, (3.0 * co * co - C) * si - co); // y, dy/dx\n}\n\n// SDFs\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdIsosceles(in vec2 p, in vec2 q) {\n    p.x = abs(p.x);\n\tvec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0.0, 1.0);\n    vec2 b = p - q * vec2(clamp(p.x / q.x, 0.0, 1.0), 1.0);\n    float k = sign(q.y);\n    float d = min(dot(a, a), dot(b, b));\n    float s = max(k * (p.x * q.y - p.y * q.x), k * (p.y - q.y));\n\treturn sqrt(d) * sign(s);\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 8.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(2.0 * cos(iTime), sin(0.5 * iTime)) * 2.0;\n\n    // Square grid tiling\n    vec2 cellId = floor(uv * 3.0) / 3.0 + 0.5 / 3.0;\n    vec2 cellUv = uv - cellId;\n\n    // Slope field cell\n    float slope = slopeField(cellId);\n    float lineY = cellUv.x * slope;\n    drawSDF(abs(cellUv.y - lineY) / sqrt(1.0 + slope * slope), vec3(0.0));\n\n    // Draw particular solution (exact)\n    vec2 y = solveIVP(uv.x, mouse);\n    drawSDF(abs(uv.y - y.x) / sqrt(1.0 + y.y * y.y) - 0.02, vec3(1.0, 0.0, 0.0));\n\n    // Plot the starting point\n    drawSDF(sdDisc(uv, mouse, 0.15), vec3(0.5, 0.0, 1.0));\n\n    // Plot particle path through the slope field\n    for (float x=mouse.x; x < 8.0; x += 1.0) {\n        vec2 y = solveIVP(x, mouse);\n        vec2 arrowUv = uv - vec2(x, y.x);\n        vec2 dir = normalize(vec2(1.0, y.y));\n        arrowUv *= mat2(-dir.y, dir.x, -dir);\n        drawSDF(sdIsosceles(arrowUv, vec2(0.15, 0.4)), vec3(0.0, 0.0, 0.5));\n    }\n\n    // Vignette\n    color *= 1.0 - 2.0 * pow(length(fragCoord / iResolution.xy - 0.5), 4.0);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}