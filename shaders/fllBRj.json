{
    "Shader": {
        "info": {
            "date": "1651132583",
            "description": "mouse controls camera\ninspiration: https://twitter.com/social_brains/status/1518786027288104960",
            "flags": 64,
            "hasliked": 0,
            "id": "fllBRj",
            "likes": 15,
            "name": "change blindness: look for it:-)",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "#define rot(a)        mat2(cos(a+vec4(0,11,33,0)))            // rotation 2D\n#define r(a)          cos(a+vec2(0,11))                       // unit vector in dir a\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., a, A, d,i, PI2 = 6.28,\n         da = PI2/7., T = mod(iTime,PI2+da), B = T-PI2;       // animation cycle : danse & shift\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -3.5*R.y) - R),             // ray direction\n          p = 7./R, q,                                        // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(0);      // mouse control of camera\n     \n    for (O=vec4(1); O.x > 0. && t > .01; O-=.01) {\n        q = p,\n        q.yz *= rot(.5-6.*M.y),                               // camera rotations\n        q.xz *= rot(2.-6.*M.x);\n        for (a = 0.; a < 7.; a++ )                            // --- draw 7 spheres\n            A = da*a - da*smoothstep(0.,da,B),                // direction of each sphere\n            d = length( q - vec3( 1.5*r( A )                  // spread & shift\n                                 - .2*r( A + PI2*sin(B<0.?T:0.)) ,0).xzy  // danse\n                      ) - .3,\n            d < t ? t=d, i=a : t;                             // keep closest sphere\n        p += .2*t*D;                                          // step forward = dist to closest obj          \n   }                                                          // --- color scheme\n   O *=  O * ( 1. + cos( da*(i - T/(PI2+da) )  + vec4(0,23,21,0)  ) ) / .8; // hue(i+slow shift)\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28853,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/nathanevans-music/wellerman-sea-shanty"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}