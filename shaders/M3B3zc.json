{
    "Shader": {
        "info": {
            "date": "1708676556",
            "description": "floorz",
            "flags": 0,
            "hasliked": 0,
            "id": "M3B3zc",
            "likes": 0,
            "name": "floorz",
            "published": 3,
            "tags": [],
            "usePreview": 0,
            "username": "moka",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "uniform vec3 camPos; // カメラの位置\nuniform vec3 camDir; // 視線の方向\n\n// 床との距離関数\nfloat map(vec3 p) {\n    return p.y; // y = 0の平面との距離\n}\n\n// レイマーチング関数\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float depth = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * depth;\n        float d = map(p);\n        if (d < 0.001) {\n            return depth; // 表面に到達\n        }\n        depth += d;\n        if (depth >= 100.0) break; // 距離が遠すぎる場合は中断\n    }\n    return depth;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // 正規化デバイス座標（NDC）へ変換\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // カメラ設定\n    vec3 ro = vec3(0.0, 1.0, 3.0); // カメラの位置\n    vec3 rd = normalize(vec3(uv, -1.0)); // カメラからのレイの方向\n\n    // 床との交差点を計算\n    float t = -ro.y / rd.y;\n    vec3 p = ro + t * rd;\n\n    // 床の描画\n    if(t > 0.0) {\n        // 床の色を計算（シンプルなチェック模様）\n        float checks = mod(floor(p.x) + floor(p.z), 2.0);\n        vec3 col = mix(vec3(0.8), vec3(0.4), checks);\n        fragColor = vec4(col, 1.0);\n    } else {\n        // 背景色\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}