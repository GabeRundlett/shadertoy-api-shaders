{
    "Shader": {
        "info": {
            "date": "1691163342",
            "description": "...saw some nice blue-noise halftone examples recently (from FabriceNeyret2 and Xor).\nand wanted to share my own experiments using bitorder-inversion for generating some blue-ish noise (3rd column)\nleft to right: originial, whitenoise, mynoise, bluenoise\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mllcDB",
            "likes": 18,
            "name": "blueish bitorder inversion noise",
            "published": 3,
            "tags": [
                "bluenoise"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2023\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// bitorder inversion blue-noise\n//\n// some noise experiments i did some while ago with bitorder-inversion to retrieve some blue-ish noise\n//\n// comparing 3 noises\n// left to right: (none), whitenoise, bitinvnoise, bluenoise\n//\n\n\nfloat flockaroo_bitinv_noise(ivec2 v) { v&=255; for(int b=15;b>0;b-=2,v>>=1) v|=(v&1)<<b; return float((v.x*15+v.y*73)%255)/254.; }\n//                                                                                                           ^also 7 or 1 works nicely instead of 15 here\n//maybe there's even some better prime-factors to be found than 73 and 15 - well 15 isnt prime anway ;-)\n\n\n\n//-----------------------------------------------------------------------------------------\n// simplification of https://www.shadertoy.com/view/MdcXDs\n\nfloat truchetRand(vec3 r) { return fract(sin(dot(r.xy,vec2(1.38984*sin(r.z),1.13233*cos(r.z))))*653758.5453); }\n\nfloat truchetArc(vec3 pos, float radius) { pos=fract(pos); float r=length(pos.xy); return length(vec2(r-0.5,pos.z-0.5))-radius; }\n\nfloat truchetCell(vec3 pos, float r)\n{\n    return min(min(\n        truchetArc(pos.xyz               ,r),\n        truchetArc(pos.zxy*vec3( 1,-1, 1),r)),\n        truchetArc(pos.yzx*vec3(-1,-1, 1),r));\n}\n\nfloat truchetDist(vec3 pos, float r)\n{\n    vec3 cellpos=fract(pos);\n    vec3 gridpos=floor(pos);\n    float rnd=truchetRand(gridpos);\n    vec3 fact=floor(mod(rnd*vec3(2.0,4.0,8.0),vec3(2.0)))*2.0-vec3(1.0);\n    return truchetCell(cellpos*fact,r);\n}\n\nfloat dist(vec3 pos)\n{\n    vec3 pos0=pos;\n    float sc=2.;\n    for(int i=0;i<10;i++) {\n        vec3 dir=normalize(texelFetch(iChannel0,ivec2(i,0),0).xyz-.5);\n        pos+=sin(dot(dir,pos0)/sc)*dir.zxy*vec3(1,-1,1)*sc*.15;\n        sc*=.9;\n    }\n    return truchetDist(pos*0.006,0.13+0.05*cos(0.02*(pos.x+pos.y+pos.z)))/0.006;\n}\n\nvec3 getGrad(vec3 pos, float delta)\n{\n    vec3 eps=vec3(delta,0,0);\n    float d=dist(pos);\n    return vec3(dist(pos+eps.xyy)-d, dist(pos+eps.yxy)-d, dist(pos+eps.yyx)-d)/delta;\n}\n\n\nvec4 march(vec3 pos0, vec3 dir, float maxDist)\n{\n    vec3 colbg = vec3(.9,1,1.1);\n\n    vec3 p = pos0;\n\n    float eps=0.0001;\n    for( int i=0 ; i<200 ; i++ )\n    {\n        float d=dist(p);\n        p+=dir*d*.5;\n        if(d<eps) break;\n        if(d>maxDist) break;\n    }\n\n    vec3 n=normalize(getGrad(p,0.01));\n\n    float ao = 1.0;\n    for(float sc=15.;sc>.01;sc*=.6) ao*=clamp(.7+.25*dist(p+n*sc)/sc,0.,1.);\n\n    vec4 col;\n    col.xyz=vec3(ao)*(n*.05+.95)*vec3(1.1,1,.9)*vec3(1,.9,.7);\n\n    float fog = 1.0-exp(-length(p-pos0)/maxDist);\n    col.xyz = mix(col.xyz,colbg,fog);\n\n    return col*col;\n}\n\n//-----------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float PixScale=1.+float(int(iTime)%3);\n    fragCoord=(floor(fragCoord/PixScale)+.5)*PixScale;\n    vec2 myRes=iResolution.xy;\n    vec3 pos=vec3(iTime*50.,0,0);\n    vec2 scoord=(fragCoord.xy-myRes*.5)/myRes.x;\n    float phi = iTime*.333;\n    float th = iTime*.23423;\n    vec3 dir0 = vec3(sin(phi)*cos(th),cos(phi)*cos(th),sin(th));\n    vec3 left = normalize(vec3(dir0.yx*vec2(-1,1),0));\n    vec3 up=cross(left,dir0);\n    vec3 dir=normalize(dir0+left*scoord.x*2.+up*scoord.y*2.);\n    fragColor = march(pos,dir,1000.0);\n    \n    vec2 Res=iResolution.xy/PixScale;\n    \n    fragCoord/=PixScale;\n    // halftoning\n    #if 1\n    float lnum=3.;\n    float r=flockaroo_bitinv_noise(ivec2(fragCoord));\n    if (fragCoord.y<Res.y*.3) { fragColor=vec4(dot(fragColor.xyz,vec3(.333))); lnum=1.; }\n    if (fragCoord.x>Res.x*.75) r=textureLod(iChannel1,fragCoord/1024.,0.).x;\n    if (fragCoord.x<Res.x*.5) r=textureLod(iChannel0,fragCoord/256.,0.).x;\n    if (fragCoord.x>Res.x*.25) fragColor =floor(fragColor*lnum+r)/(lnum); else r=.5;\n    if (fragCoord.y<.1*Res.y) { fragColor=vec4(r); }\n    if (int(fragCoord.x)==int(Res.x*.25)) fragColor =vec4(.6,0,0,1);\n    if (int(fragCoord.x)==int(Res.x*.5)) fragColor =vec4(.6,0,0,1);\n    if (int(fragCoord.x)==int(Res.x*.75)) fragColor =vec4(.6,0,0,1);\n    #endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}