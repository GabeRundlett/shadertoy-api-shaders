{
    "Shader": {
        "info": {
            "date": "1706537078",
            "description": "Explicit expression for Bayer matrices, as well as inverse operation (value -> coordinates).\nAlternative to e.g. [url]https://www.shadertoy.com/view/XtV3RG[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "lfSSRK",
            "likes": 4,
            "name": "Bayer matrices bits",
            "published": 3,
            "tags": [
                "dither",
                "bayer"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Explicit expression for Bayer matrices, as well as inverse\n// operation (value -> coordinates), using bit arithmetic.\n// Alternative to e.g. https://www.shadertoy.com/view/XtV3RG.\n// Works up to (2^16)x(2^16) matrix.\n// The expression is nice for clarity, but no claims are\n// made about it being faster than other solutions.\n// The matrices are the same as https://en.wikipedia.org/wiki/Ordered_dithering.\n// NOTE: in matrix notation (used by Wikipedia article) M(i, j) is\n// i-th row, j-th column, so x=j, y=i.\n\n// Based on https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/\nuint interleave0(uint x)\n{\n    x&=0x0000FFFFu;\n    x=(x^(x<<8))&0x00FF00FFu;\n    x=(x^(x<<4))&0x0F0F0F0Fu;\n    x=(x^(x<<2))&0x33333333u;\n    x=(x^(x<<1))&0x55555555u;\n    return x;\n}\n\nuint interleave(uint x,uint y) {return interleave0(x)^(interleave0(y)<<1);}\n\n// Based on https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/\nuint deinterleave0(uint x)\n{\n    x&=0x55555555u;\n    x=(x^(x>>1))&0x33333333u;\n    x=(x^(x>>2))&0x0F0F0F0Fu;\n    x=(x^(x>>4))&0x00FF00FFu;\n    x=(x^(x>>8))&0x0000FFFFu;\n    return x;\n}\n\nuvec2 deinterleave(uint v) {return uvec2(deinterleave0(v),deinterleave0(v>>1));}\n\n// Based on https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\nuint bitreverse(uint x)\n{\n    x=((x>> 1)&0x55555555u)^((x&0x55555555u)<< 1);\n    x=((x>> 2)&0x33333333u)^((x&0x33333333u)<< 2);\n    x=((x>> 4)&0x0F0F0F0Fu)^((x&0x0F0F0F0Fu)<< 4);\n    x=((x>> 8)&0x00FF00FFu)^((x&0x00FF00FFu)<< 8);\n    x=( x>>16             )^( x             <<16);\n    return x;\n}\n\n// Get value of (2^n)x(2^n) Bayer matrix\n// at position xy.\nuint bayer(uvec2 xy,uint n)\n{\n    return bitreverse(interleave(xy.x^xy.y,xy.y))>>(32u-2u*n);\n}\n\n// Get coordinates in (2^n)x(2^n) Bayer matrix\n// corresponding to value v.\nuvec2 debayer(uint v,uint n)\n{\n    uvec2 ret=deinterleave(bitreverse(v<<(32u-2u*n)));\n    return uvec2(ret.x^ret.y,ret.y);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    uint n=4u;\n    uvec2 xy=uvec2(floor(fragCoord/16.0));\n    vec3 col=vec3(float(bayer(xy,n))/float(1u<<(2u*n)));\n    uvec2 zw=debayer(bayer(xy,n),n);\n    if(zw!=xy) col=vec3(0.25,0.5,0.25);\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}