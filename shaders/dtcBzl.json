{
    "Shader": {
        "info": {
            "date": "1701464701",
            "description": "Glowing 2D orb centered in square shape with lighting and coloring reactive to music.\n\n - use with music in iChannel0 -",
            "flags": 64,
            "hasliked": 0,
            "id": "dtcBzl",
            "likes": 3,
            "name": "Black Ball",
            "published": 3,
            "tags": [
                "2d",
                "music"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "// Black Ball v0.5.231203 by QuantumSuper\n// glowing 2d orb centered in square shape with lighting and coloring reactive to music\n// \n// - use with music in iChannel0 -\n\n#define PI 3.14159265359 \n#define aTime 150./60.*iTime\nvec4 fft, ffts; //compressed frequency amplitudes\n\n\nvoid compressFft(){ //v1.2, compress sound in iChannel0 to simplified amplitude estimations by frequency-range\n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=0;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 0-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(3,8,8,5); ffts /= vec4(2,3,3,23); //normalize\n\t\n\t//for (int n=0;n++<4;) fft[n] *= 1. + .3*pow(fft[n],5.); fft = clamp(fft,.0,1.); //limiter? workaround attempt for VirtualDJ\n}\n\nmat2 rotM(float r){float c = cos(r), s = sin(r); return mat2(c,s,-s,c);} //2D rotation matrix\n\nvec3 tmUnreal( vec3 c){return c / (c + .155) * 1.019;} //tone map, source: https://www.shadertoy.com/view/llXyWr\n\nfloat aaStep( float fun){return smoothstep( fwidth(fun), .0, fun);} //simple antialiasing\n\nfloat glow( float sd, float amp){return clamp( amp / max( amp, sd), .0 ,1.);} //simple glow\n\nfloat sdBox( vec2 p, vec2 b){ //source: https://iquilezles.org/articles/distfunctions2d/\n    vec2 d = abs(p) - b;\n    return length(max(d,.0)) + min(max(d.x,d.y),.0);\n}\n\nvec3 getCol(float id){ //fork of v0.8, color definitions, for pairs, with color shift\n    vec3 setCol = vec3(0);\n    id = fract(id/8.)*8.;// mod(id,8.);\n         if (id< 1.) setCol = vec3( 23,123,250); //cneon blue\n    else if (id< 2.) setCol = vec3( 30, 29,215); //vw2 blue\n    else if (id< 3.) setCol = vec3(244,  0,204); //vw2 pink\n    else if (id< 4.) setCol = vec3(131, 58,187); //nordic violet\n    else if (id< 5.) setCol = vec3(  0,250,253); //vw2 light blue\n    else if (id< 6.) setCol = vec3( 66,120, 91); //matrix green 2\n    else if (id< 7.) setCol = vec3(252,157,  0); //miami orange\n    else if (id< 8.) setCol = vec3(231, 15, 20); //arena red\n    setCol *= abs(cos(.06*aTime + PI/vec3(.5,2.,4.) + ffts.xyz)); //color shift\n    return setCol/256.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio \n    compressFft(); //initializes fft, ffts\n    vec2 uv0=uv;\n    \n    \n    // Design\n    float size = 1./exp(cos(aTime/8.)*2.+3.);\n    uv *= mix( 1., .5 + 1.*texelFetch( iChannel0, ivec2(mod(dot(floor((uv)/size),vec2(1,1./size)),512.),0), 0).x, fft.w*fft.w*fft.w); //pixel shift\n    \n    float mySd = sdBox( uv*rotM( PI/4.), vec2(.66*(.97+.03*fft.z))); //square definition\n    vec3 col = vec3(glow( mySd, .01) - aaStep( mySd)) * (1.3-fft.y) \n        * texelFetch( iChannel0, ivec2((floor(abs(uv.y)*22.)+floor(abs(uv.x)*22.)/22.)/22.*512.,0), 0).x * 2. ; //square visualization bw\n    \n    if (fft.x<.94) uv = uv0; //conditional pixel shift\n    mySd = length(uv)-.3*(.4+.6*fft.x*fft.x*fft.x); //circle definition\n    col += (glow( mySd, .01) - aaStep( mySd)) * (.2+.8*fft.x); //circle visualization bw\n    \n    float colId = floor(aTime/32.)*2.; //color identifier\n    float amp = (aaStep( mySd)*.93 + .07); //colorization intensities \n    col += clamp( uv.y+(fft.y*fft.y-.5)*.2, .0, 1.) * getCol(colId+0.) * amp * ffts.w; //top light color\n    col += clamp( sign(fract(aTime/64.-.25)-.5)*uv.x + sin(aTime/64.*PI*2.)*.6 + .3, .0, 1.) * getCol(colId+1.) * amp * fft.w; //\"rotating\" moonrise light color\n    \n    mySd = abs(mySd+.001) - (1.-uv.y*uv.y*111.)*.001; //edge ring definition\n    col += col * glow( mySd, .01)  * 9.; //edge ring visualization\n    \n    if (fft.x>.97) //max bass\n        col += col * fract(float(iFrame)*.5)*9.; //strobo\n    \n    \n    // Finalization\n\tcol -= length(uv) * .01; //vignette\n    col = tmUnreal( col); //tone map incl. gamma\n    \n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35422,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/nakt_records/nakt-061-obstn"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}