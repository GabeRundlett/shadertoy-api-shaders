{
    "Shader": {
        "info": {
            "date": "1409967699",
            "description": "Pretty random",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXSD8",
            "likes": 41,
            "name": "Dancing Particles",
            "published": 3,
            "tags": [
                "metaballs",
                "motionblur",
                "particles"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 2653
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2014\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define EPS .001\n\n#define TM iTime * 1.75\n#define FT 2.5 * EPS * hash(TM)\n#define SM 45\n#define CI vec3(1) \n#define CO vec3(r, 0, 0)\n\nfloat hash(in float n) { return fract(sin(n)*43758.5453123); }\n\nfloat hash(vec2 p)\n{\n    return fract(sin(dot(p,vec2(127.1,311.7))) * 43758.5453123);\n}\n\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p), f = fract(p); \n\tf *= f*f*(3.-2.*f);\n    return mix(mix(hash(i + vec2(0.,0.)), \n                   hash(i + vec2(1.,0.)), f.x),\n               mix(hash(i + vec2(0.,1.)), \n                   hash(i + vec2(1.,1.)), f.x), f.y);\n}\n\nfloat fbm(in vec2 p)\n{\n\treturn\t.5000 * noise(p)\n\t\t   +.2500 * noise(p * 2.)\n\t\t   +.1250 * noise(p * 4.)\n\t\t   +.0625 * noise(p * 8.);\n}\n\nfloat metaball(vec2 p, float r)\n{\n\treturn vec2(noise(vec2(FT,1)/r)).x / dot(p, p);\n}\n\nvec3 blob(vec2 p, float t)\n{\n\tfloat t0 = sin(t * 1.9) * .46;\n\tfloat t1 = sin(t * 2.4) * .39;\n\tfloat t2 = cos(t * 1.4) * .57;\n\n\tfloat r = metaball(p - vec2(t1 * .9, t2 * .3), noise(vec2(TM) *.1))\n\t\t\t+ metaball(p + vec2(t2 * .5, t0 * .4), noise(vec2(TM) *.2))\n\t\t\t+ metaball(p - vec2(t0 * .3, t1 * .5), noise(vec2(TM) *.4));\n\t\n\tr = max(r, .2);\n\t\n\tr *= FT;\n\n\treturn (r > .5)\n\t\t? (vec3(step(.1, r*r*r)) * CI)\n\t\t: (r < 1000.9 ? CO : CI);\n}\n\nvec3 texsample(vec2 uv, in vec2 fragCoord)\n{\n\tif (abs(EPS + uv.y) >= .4 ) { \n\t\treturn vec3(0);\n\t}\n\t\t\n\tvec3  c = vec3(0);\n\t\n\tfor (int i = 0; i < SM; ++i) {\n\t\tfloat dt = TM - 4. * fbm(vec2(uv * 10.)) / float(i);\n\t\tc += blob(uv - noise(vec2(uv) * 0.1), dt) / float(SM);\n\t}\n\t\n\tvec3 fx = vec3(smoothstep(0., 3.5, iTime) * c) + vec3(.01);\n\n\tfloat noise = hash((hash(uv.x) + uv.y) * iTime) * .055;\n\tfloat fade  = smoothstep(EPS, 2.5, iTime);\n\t\n\treturn fade * (noise + fx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy * 2. - 1.)\n\t\t\t* vec2(iResolution.x / iResolution.y, 1);\n\tfragColor = vec4(texsample(uv, fragCoord), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}