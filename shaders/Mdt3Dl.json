{
    "Shader": {
        "info": {
            "date": "1452832570",
            "description": "Buddhabrot fractal. Takes a while to generate (about 15 mins before it starts looking like the buddhabrot on my machine). Adjust Buf D's scaling parameters as the image generates.",
            "flags": 32,
            "hasliked": 0,
            "id": "Mdt3Dl",
            "likes": 3,
            "name": "Buddha-brot",
            "published": 3,
            "tags": [
                "fractal",
                "buddhabrot"
            ],
            "usePreview": 0,
            "username": "sixstring982",
            "viewed": 1441
        },
        "renderpass": [
            {
                "code": "/**\n *  Buddha-brot\n *  sixstring982 2016\n *\n *  The Buddhabrot fractal, discovered by Melinda Green in the\n *  1990s. This uses three Multipass buffers, one for each color\n *  channel. Each has an iterations parameter at the top; playing\n *  with these will change the generated image.\n *\n *  The buddhabrot takes a long time to generate, and isn't easy\n *  to parallelize in the manner that Shadertoy likes to parallelize\n *  things. Therefore, it takes a long time to generate the final\n *  image (about 15 mins on my machine).\n *\n *  Normally, the image brightness can be automatically adjusted\n *  by finding the brightest pixel and normalizing the rest to it,\n *  but this isn't easy to do with Shadertoy at the moment. Instead,\n *  the two parameters at the top of Buf D can help adjust the image\n *  brightness. Buf D also applies anti-aliasing, which can be\n *  adjusted as well.\n */\n\n// This can be tweaked once enough of the image has been\n// generated\n#define LOG_SCALE 100.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n\tfragColor = texture(iChannel3, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// Red buffer\n#define ITERS 256\n\n#define COUNT_INCR 0.0001\n\n#define STOT 0.70710678118\n#define STOT1P 1.70710678118\n#define PIXEL_SCALE 1.5\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\n/**\n *  The has function needs to be really good, because the more\n *  pixels we hit, the fuller the image. I'm no good at coming\n *  up with these, so I took this one from:\n *\n *  https://www.shadertoy.com/view/4djSRW\n */\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * MOD3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nfloat orbitTrace(in vec2 c, in vec2 uv, in float pixelSize) {\n    float incr = 1.0;\n    float count = 0.0;\n    vec2 z = c;\n    float x;\n    \n    for (int i = 0; i < ITERS; i++) {\n        if (z.x * z.x + z.y * z.y > 4.0) {\n            return count;\n        }\n        x = z.x * z.x - z.y * z.y;\n        z.y = 2.0 * z.x * z.y + c.y;\n        z.x = x + c.x;\n        \n        if (length(z - uv) < pixelSize ||\n            length(z - vec2(uv.x, -uv.y)) < pixelSize) {\n            count += incr;\n            incr *= 0.9; // Naturally decrease the intensity of \"hot\" areas\n        }\n    }\n    return 0.0;\n}\n\nbool isInCardioid(vec2 c) {\n    float p = sqrt(pow(c.x - (1.0 / 4.0), 2.0) + c.y * c.y);\n    return c.x < p - 2.0 * p * p + (1.0 / 4.0);\n}\n\nbool isInPeriod2Bulb(vec2 c) {\n    return pow(c.x + 1.0, 2.0) + c.y * c.y < (1.0 / 16.0);\n}\n\nbool isGoodPoint(vec2 c) {\n    return !isInCardioid(c) && !(isInPeriod2Bulb(c));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord / iResolution.xy);\n    vec2 uv = st;\n    uv.x = uv.x * 3.0 - 2.0;\n    uv.y = uv.y * 2.0 - 1.0;\n    \n    float pixelSize = max(1.0 / iResolution.x, 1.0 / iResolution.y);\n    \n    vec2 c = hash21(iTime);\n    c = vec2(c.x * 3.0 - 2.0, c.y * 2.0 - 1.0);\n    \n    float ct = 0.0;\n    if (isGoodPoint(c)) {\n        ct = orbitTrace(c, uv, pixelSize * PIXEL_SCALE);\n    }\n    fragColor = texture(iChannel0, st);\n    fragColor.x += ct * COUNT_INCR;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Green buffer\n#define ITERS 1024\n\n#define COUNT_INCR 0.0001\n\n#define STOT 0.70710678118\n#define STOT1P 1.70710678118\n#define PIXEL_SCALE 1.5\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\n/**\n *  The has function needs to be really good, because the more\n *  pixels we hit, the fuller the image. I'm no good at coming\n *  up with these, so I took this one from:\n *\n *  https://www.shadertoy.com/view/4djSRW\n */\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * MOD3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nfloat orbitTrace(in vec2 c, in vec2 uv, in float pixelSize) {\n    float incr = 1.0;\n    float count = 0.0;\n    vec2 z = c;\n    float x;\n    \n    for (int i = 0; i < ITERS; i++) {\n        if (z.x * z.x + z.y * z.y > 4.0) {\n            return count;\n        }\n        x = z.x * z.x - z.y * z.y;\n        z.y = 2.0 * z.x * z.y + c.y;\n        z.x = x + c.x;\n        \n        if (length(z - uv) < pixelSize ||\n            length(z - vec2(uv.x, -uv.y)) < pixelSize) {\n            count += incr;\n            incr *= 0.9; // Naturally decrease the intensity of \"hot\" areas\n        }\n    }\n    return 0.0;\n}\n\nbool isInCardioid(vec2 c) {\n    float p = sqrt(pow(c.x - (1.0 / 4.0), 2.0) + c.y * c.y);\n    return c.x < p - 2.0 * p * p + (1.0 / 4.0);\n}\n\nbool isInPeriod2Bulb(vec2 c) {\n    return pow(c.x + 1.0, 2.0) + c.y * c.y < (1.0 / 16.0);\n}\n\nbool isGoodPoint(vec2 c) {\n    return !isInCardioid(c) && !(isInPeriod2Bulb(c));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord / iResolution.xy);\n    vec2 uv = st;\n    uv.x = uv.x * 3.0 - 2.0;\n    uv.y = uv.y * 2.0 - 1.0;\n    \n    float pixelSize = max(1.0 / iResolution.x, 1.0 / iResolution.y);\n    \n    vec2 c = hash21(iTime);\n    c = vec2(c.x * 3.0 - 2.0, c.y * 2.0 - 1.0);\n    \n    float ct = 0.0;\n    if (isGoodPoint(c)) {\n        ct = orbitTrace(c, uv, pixelSize * PIXEL_SCALE);\n    }\n    fragColor = texture(iChannel0, st);\n    fragColor.x += ct * COUNT_INCR;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Blue buffer\n#define ITERS 4096\n\n#define COUNT_INCR 0.0001\n\n#define STOT 0.70710678118\n#define STOT1P 1.70710678118\n#define PIXEL_SCALE 1.5\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\n/**\n *  The has function needs to be really good, because the more\n *  pixels we hit, the fuller the image. I'm no good at coming\n *  up with these, so I took this one from:\n *\n *  https://www.shadertoy.com/view/4djSRW\n */\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * MOD3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nfloat orbitTrace(in vec2 c, in vec2 uv, in float pixelSize) {\n    float incr = 1.0;\n    float count = 0.0;\n    vec2 z = c;\n    float x;\n    \n    for (int i = 0; i < ITERS; i++) {\n        if (z.x * z.x + z.y * z.y > 4.0) {\n            return count;\n        }\n        x = z.x * z.x - z.y * z.y;\n        z.y = 2.0 * z.x * z.y + c.y;\n        z.x = x + c.x;\n        \n        if (length(z - uv) < pixelSize ||\n            length(z - vec2(uv.x, -uv.y)) < pixelSize) {\n            count += incr;\n            incr *= 0.9; // Naturally decrease the intensity of \"hot\" areas\n        }\n    }\n    return 0.0;\n}\n\nbool isInCardioid(vec2 c) {\n    float p = sqrt(pow(c.x - (1.0 / 4.0), 2.0) + c.y * c.y);\n    return c.x < p - 2.0 * p * p + (1.0 / 4.0);\n}\n\nbool isInPeriod2Bulb(vec2 c) {\n    return pow(c.x + 1.0, 2.0) + c.y * c.y < (1.0 / 16.0);\n}\n\nbool isGoodPoint(vec2 c) {\n    return !isInCardioid(c) && !(isInPeriod2Bulb(c));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord / iResolution.xy);\n    vec2 uv = st;\n    uv.x = uv.x * 3.0 - 2.0;\n    uv.y = uv.y * 2.0 - 1.0;\n    \n    float pixelSize = max(1.0 / iResolution.x, 1.0 / iResolution.y);\n    \n    vec2 c = hash21(iTime);\n    c = vec2(c.x * 3.0 - 2.0, c.y * 2.0 - 1.0);\n    \n    float ct = 0.0;\n    if (isGoodPoint(c)) {\n        ct = orbitTrace(c, uv, pixelSize * PIXEL_SCALE);\n    }\n    fragColor = texture(iChannel0, st);\n    fragColor.x += ct * COUNT_INCR;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Antialiasing Buffer\n\n// This can be tweaked once enough of the image has been\n// generated\n#define LOG_SCALE 500.0\n#define POST_LOG_SCALE 8.0\n\n\n#define STOT 0.70710678118\n#define ONE_FIFTH (1.0 / 5.0)\n#define ONE_HALF (1.0 / 2.0)\n#define ONE_EIGHTH (1.0 / 8.0)\n\n#define ANTI_ALIAS\n\nvec3 buddhaSample(in vec2 uv) {\n    return vec3(texture(iChannel0, uv).r,\n                texture(iChannel1, uv).r,\n                texture(iChannel2, uv).r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 dv = vec2(vec2(1.0) / iResolution.xy) * STOT;\n    vec3 val;\n    \n    #ifndef ANTI_ALIAS\n    val = buddhaSample(uv);\n    #else\n    vec3 color = vec3(0.0);\n    \n    color += ONE_HALF * buddhaSample(uv);\n    color += ONE_EIGHTH * buddhaSample(vec2(uv.x + dv.x, uv.y));\n    color += ONE_EIGHTH * buddhaSample(vec2(uv.x - dv.x, uv.y));\n    color += ONE_EIGHTH * buddhaSample(vec2(uv.x, uv.y + dv.y));\n    color += ONE_EIGHTH * buddhaSample(vec2(uv.x, uv.y - dv.y));\n    \n    val = color;\n    #endif\n    \n    val = POST_LOG_SCALE * log(1.0 + val * LOG_SCALE);\n\tfragColor = vec4(val, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}