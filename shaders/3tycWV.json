{
    "Shader": {
        "info": {
            "date": "1611749413",
            "description": "polino",
            "flags": 0,
            "hasliked": 0,
            "id": "3tycWV",
            "likes": 22,
            "name": "Day 407",
            "published": 3,
            "tags": [
                "lines",
                "geometric",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 405\" by jeyko. https://shadertoy.com/view/ttVcRt\n// 2021-01-27 11:17:18\n\n\nconst float slices = 350.;\n\nconst float aaSteps = 1.; // not really steps, it's the exponentially ^3 area growing area around the fragCoord \n\nconst float disp = .7;\n\nconst float width = 0.0004;\n\n// asin(sin) is a triangle wave\n#define sin(x) asin(sin(x))\n\nfloat fun(float p, float py){\n    \n    //float f = sin(p + iTime + cos(py*0.05 + sin(p))*0.7)*sin(py*0.1 + iTime*0.2);\n    py *= 170.;\n    \n    py += iTime*2.;\n    float f = abs(sin(p*9. + sin(py*0.2 )*1.));\n    \n    f = pow(max(f,0.001),0.15);\n    \n    //f += (sin(py*0.1 + iTime + sin(p*6. + iTime)))*0.1;\n    f += (sin(py*0.1 + iTime + sin(p*8. + iTime*.1 + sin(py*2.)*0.1)))*0.1;\n    \n    \n    \n    //f = cos(p*0.4- iTime + py)*cos(p*0.4*sin(p) + iTime)*(sin(py + iTime));\n    //f = sin(p*0.5 + sin(py))*(cos(py*0.1 + iTime));\n    /*\n    f *= mix(\n        smoothstep(0.,1.,abs(p + sin(py)*0.1)),\n        smoothstep(0.,1.,abs(p + sin(py*0.3 + iTime)*0.1)),\n        0.5 + sin(iTime*0.4 )*0.5\n        );\n    */\n    return f*disp;\n}\n\n\n\nconst float eps = 0.0004; // eps for derivative of graphing function\n\nfloat graph(float y, float fn0, float fn1, float pixelSize){\n  return smoothstep(pixelSize ,0., \n                    abs(fn0-y)/length(vec2((fn1-fn0)/eps,1.))- width);\n}\nfloat graphNoAbs(float y, float fn0, float fn1, float pixelSize){\n  return smoothstep(pixelSize,0., \n                    -(fn0-y)/length(vec2((fn1-fn0)/eps,1.)) - width);\n}\n\n\nvec3 get(in vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    \n    float pixelSize = dFdx(uv.x);\n    \n    for(float i = 0.; i < slices; i++ ){\n        vec2 p = uv + vec2(0.,i/slices*2. - 0.6);\n        \n        //float funIdx = p.x*4. + sin(p.y*i/slices*2. + iTime)*1.5*sin(p.x - iTime);\n        float funIdx = p.x;\n        float funIdxY = i/slices;\n        \n        col -= graphNoAbs( p.y, fun(funIdx,funIdxY), fun(funIdx+eps,funIdxY), pixelSize);\n        col = max(col,0.);\n        col = mix(col, vec3(1), graph( p.y, fun(funIdx,funIdxY), fun(funIdx+eps,funIdxY ), pixelSize ));\n        \n    }\n    \n    \n    col = 1. - col;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    \n    for(float i =0.; i < aaSteps*aaSteps + min(float(iFrame),0.)   ; i++){\n    \tcol += get(fragCoord + vec2(mod(i,aaSteps),floor(i/aaSteps))/aaSteps);\n    }\n    col /= aaSteps*aaSteps;\n    \n    \n    col = max(col, 0.);\n\t//col = pow(col, vec3(0.4545));\n    \n    \n    col = pow(col,vec3(0.4545));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}