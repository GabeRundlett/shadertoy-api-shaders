{
    "Shader": {
        "info": {
            "date": "1582818333",
            "description": "you can also use this as example of many other quantum phenomenon, for example tunneling\n\nmouse = move potential\nupper right corner = static potential\nspace = reset\n\nlook at my first comment (speed script)\n\n",
            "flags": 48,
            "hasliked": 0,
            "id": "tlGXWW",
            "likes": 4,
            "name": "Quantum Confined Particle",
            "published": 3,
            "tags": [
                "wave",
                "physics",
                "quantum",
                "particle",
                "atom",
                "potential",
                "differential",
                "schrodinger",
                "confinement",
                "coldatom",
                "tunneling"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "/*\nACCELERATE THE SHADER:\n(function(){if(Effect.prototype.Paint.toString().length>1000){_Paint=Effect.prototype.Paint;} Effect.prototype.Paint = function(...args){for(var i=0; i<50;i++){_Paint.apply(this,args);}}})()\n*/\n\nconst float gamma=1.8;\nconst float inv_gamma=1./gamma;\n\nfloat intensity(float x){return pow(x,gamma);}\nvec3 intensity(vec3 x){return pow(x,vec3(gamma));}\nfloat color(float x){return pow(x,inv_gamma);}\nvec3 color(vec3 x){return pow(x,vec3(inv_gamma));}\n\nvoid mainImage(out vec4 Q,in vec2 U){\n    vec2 uv=(U*2.-R.xy)/R.y;\n    vec4 v=tf(ivec2(U.x,0));\n    float energy=texelFetch(iChannel1,ivec2(0),0).r;\n    \n    float line0=v.x-uv.y;\n    line0/=fwidth(line0);\n    \n    float line1=v.w+v.z-uv.y;\n    line1/=fwidth(line1);\n    \n    float line2=v.y-uv.y;\n    line2/=fwidth(line2);\n    \n    float line3=v.z-uv.y;\n    line3/=fwidth(line3);\n    \n    vec3 light=vec3(0);\n    light.r+=intensity(smoothstep(1.,0.,abs(line0)))*0.4;\n    light.rg+=intensity(smoothstep(1.,0.,abs(line1)));\n    light.b+=intensity(smoothstep(1.,0.,abs(line2)))*0.5;\n    light.g+=intensity(smoothstep(1.,0.,abs(line3)));\n    \n    vec3 col=color(light);\n    \n    Q=vec4(col,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 Q,in vec2 U){\n    if(int(U.y)==0){\n        ivec2 id=ivec2(U.x,0);\n        \n        //WAVE STUFF\n        vec3 point_value=tf(id).xyz;\n        vec3 local_media=\n            tf(id+ivec2( 1,0)).xyz+\n            tf(id+ivec2(-1,0)).xyz;\n        local_media*=.5;\n        \n        \n        vec3 grad=local_media-point_value;\n        \n        Q.xy=point_value.xy;\n        \n        //SCHRODINGER WAVE\n       \tQ.z=-Q.x;\n        Q.x+=Q.y+grad.x-Q.x*point_value.z*FORCE_MULTIPLYER/R.y;\n        Q.y=Q.z;\n        \n        //Q.xy=grad.x*vec2(1,0)+Q.xy*mat2(1,1,-1,0);\n        \n\n        //INITIALIZATION\n        float x=(U.x*2.-R.x)/R.y;\n        if(iFrame==0||key(kSpace))Q.xy=init(x,U.x);\n        \n        Q.z=0.;\n        //MOUSE\n        vec2 m=(M.xy*2.-R.xy)/R.y;\n        if(M.z>0.){\n            float k=x-m.x;\n            Q.z=m.y*exp(-k*k*30.);\n        }\n        if(all(equal(M.xyz,vec3(0)))||dot2(M.xy-R.xy)<400.){\n            #ifdef MOVE\n            x-=cos(float(iFrame)/60./40.*2.)*0.5-0.5;\n            #endif\n            Q.z=-.5*exp(-x*x*30.);\n        }\n        if(id.x==0||id.x==int(R.x)-1)Q.x=0.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution\n#define M iMouse\n#define tf(id) texelFetch(iChannel0,id,0)\n\nfloat SMOOTHNESS=0.9;\nfloat FORCE_MULTIPLYER=45.;\n\nfloat dot2(vec2 x){return dot(x,x);}\nconst float pi=atan(1.)*4.;\n\n\n#define key(id) texelFetch(iChannel2,ivec2(id,0),0).x>0.\nint kSpace=32;\n\n//#define MOVE\n\nvec2 init(float x, float X){\n    //x+=1.;\n    vec2 W=vec2(0);\n\t//W.x=cos(50.*x)*exp(-100.*x*x)*0.2;\n    //W.y=sin(50.*x)*exp(-100.*x*x)*0.2;\n    \n \t//W.x=cos(X*pi/2.)*exp(-100.*x*x)*0.2;\n    //W.y=sin(X*pi/2.)*exp(-100.*x*x)*0.2;\n    \n   \t//W.x=sin(X*pi/2.)*exp(-190.*x*x)*0.6;\n   \t//W.y=0.;\n    \n    W.x=exp(-190.*x*x)*0.3;\n    W.y=0.;\n    \n    //W.x=-0.5;\n    //W.y=0.5;\n    \n    return W;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 Q, in vec2 U){\n    if(int(U.y)==0){\n        ivec2 id=ivec2(U.x,0);\n        vec3 v=texelFetch(iChannel0,id,0).xyz;\n        \n        Q.xyz=v;\n        Q.w=mix(\n            length(v.xy),\n            texelFetch(iChannel1,id,0).w,\n            SMOOTHNESS\n        );\n    \tif(iFrame==0||key(kSpace)){\n            float x=(U.x*2.-R.x)/R.y;\n        \tQ.xy=init(x,U.x);\n            Q.w=length(Q.xy);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}