{
    "Shader": {
        "info": {
            "date": "1522400054",
            "description": "High voltage...",
            "flags": 0,
            "hasliked": 0,
            "id": "MdyyzG",
            "likes": 13,
            "name": "Tesla's Laboratory",
            "published": 3,
            "tags": [
                "plasma",
                "lightning",
                "electricity",
                "discharge"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 5107
        },
        "renderpass": [
            {
                "code": "// \"Tesla's Laboratory\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm2p (vec2 p);\n\nvec4 pth[4];\nvec3 qHit, qnBlk[2], bSize;\nfloat tCur, dstFar, illum, illumMin;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  p.y -= 4.6;\n  if (illum > 0.) {\n    for (int k = 0; k < 4; k ++) {\n      q = p;\n      q.xz = Rot2D (q.xz, (0.5 + float (k)) * 0.5 * pi);\n      q.y -= 0.2 * Fbm1 (5. * tCur);\n      q.z += 4.5;\n      q.yz = Rot2D (q.yz, 0.1 * pi);\n      d = PrCylDf (q, 0.85, 4.);\n      if (d < dMin) {\n        q.xy -= SmoothBump (-3.5, 3.9, 0.5, q.z) * (2. *\n           vec2 (Fbm2p (vec2 (0.4 * q.z, 0.) + pth[k].xy),\n           Fbm2p (vec2 (0.3 * q.z, 0.) + pth[k].zw)) - 1.);\n        d = PrCylDf (q, 0.015, 4.);\n        DMINQ (1);\n      }\n    }\n  }\n  dMin *= 0.5;\n  q = p;\n  q.y -= 1.4;\n  d = PrSphDf (q, 0.8);\n  DMINQ (2);\n  q.y -= -3.;\n  d = PrCylDf (q.xzy, 0.3 + 0.05 * abs (sin (4. * pi * q.y)), 3.);\n  DMINQ (3);\n  q.y -= -2.95;\n  d = PrCylDf (q.xzy, 1., 0.05);\n  DMINQ (4);\n  q = p;\n  q.xz = abs (q.xz) - 5.9;\n  q.y -= -1.2;\n  d = PrSphDf (q, 0.3);\n  DMINQ (2);\n  q.y -= -1.7;\n  d = PrCylDf (q.xzy, 0.15 + 0.02 * abs (sin (4. * pi * q.y)), 1.7);\n  DMINQ (3);\n  q.y -= -1.67;\n  d = PrCylDf (q.xzy, 0.5, 0.03);\n  DMINQ (4);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec2 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk[0] = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    qnBlk[1] = - sign (rd) * step (tp, tp.zxy) * step (tp, tp.yzx);\n  }\n  return vec2 (dMin, df);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, roo, ltPos, ltDir, sCol;\n  vec2 dBlock, s;\n  float dstObj, f, spec, atten;\n  for (int k = 0; k < 4; k ++) {\n    f = 0.1 * float (k);\n    pth[k] = vec4 (4. + f + (1.5 + f) * tCur + (0.8 - f) * sin ((0.1 + 0.1 * f) * tCur),\n       sin ((0.11 + 0.1 * f) * tCur) + (0.3 + 0.2 * f) * sin ((0.17 + 0.5 * f) * tCur),\n       5. + 2. * f + (1.3 - f) * tCur + (0.5 + 0.3 * f) * sin ((0.15 - 0.2 * f) * tCur),\n       sin ((0.12 - 0.1 * f) * tCur) + (0.4 - 0.2 * f) * sin ((0.12 + 0.2 * f) * tCur));\n  }\n  illum = illumMin + (1. - illumMin) * smoothstep (0.3, 0.9, Fbm1 (4. * tCur));\n  ltPos.y = 5.5;\n  roo = ro;\n  dBlock = BlkHit (ro - vec3 (0., bSize.y, 0.), rd, bSize);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dBlock.y) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col = vec3 (0.9, 0.9, 0.6) * clamp (2. * (0.1 + 0.9 * illum) *\n         (1. - 0.3 * Fbm1 (5. * qHit.z)) - 0.2, 0., 1.);\n      col *= 0.2 + 1.2 * max (0.3 - dot (rd, vn), 0.);\n    } else {\n      if (idObj == 2) {\n        col = vec3 (0.5, 0.3, 0.1);\n      } else if (idObj == 3) {\n        col = vec3 (0.6, 0.7, 0.8) * (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.05, mod (4. * qHit.y, 1.)));\n        spec = 0.1;\n      } else if (idObj == 4) {\n        col = vec3 (0.2, 0.5, 0.1) * (1. - 0.2 * Fbm2 (8. * ro.xz));\n        spec = 0.05;\n      }\n      sCol = vec3 (0.);\n      for (float k = 0.; k < 4.; k ++) {\n        ltPos.xz = Rot2D (vec2 (3., 0.), 0.5 * pi * (k + 0.5));\n        ltDir = ltPos - ro;\n        atten = 1.2 * step (0.02, -dot (rd, vn)) / (1. + 0.003 * pow (length (ltDir), 2.));\n        ltDir = normalize (ltDir);\n        sCol += atten * col * (0.5 + 0.5 * max (dot (vn, ltDir), 0.));\n        if (idObj != 2) sCol += atten * spec * illum * pow (max (dot (reflect (ltDir, vn), rd), 0.), 32.);\n        else sCol += atten * 0.5 * illum * pow (max (dot (vn, ltDir), 0.), 32.);\n      }\n      col = 0.25 * sCol * (0.1 + 0.9 * illum);\n      if (illum < 0.1 && idObj == 2) col += vec3 (0., 0., 0.2) * (0.5 + 0.5 * Fbm1 (64. * tCur)) *\n         (1. - smoothstep (0.05, 0.1, illum));\n    }\n  } else {\n    vn = qnBlk[1];\n    ro += rd * dBlock.y;\n    if (abs (vn.y) > 0.1) {\n      if (vn.y > 0.) {\n        s = abs (mod (2. * ro.xz + 0.5, 1.) - 0.5);\n        col =  mix (vec3 (0.3, 0.4, 0.3), vec3 (0.8, 0., 0.),\n           SmoothBump (0.1, 0.2, 0.05, length (ro.xz) - 2.) +\n           SmoothBump (0.1, 0.2, 0.05, length (abs (ro.xz) - 5.9) - 1.)) *\n           (1. - 0.3 * smoothstep (0.4, 0.45, max (s.x, s.y))) * (1. - 0.2 * Fbm2 (4. * ro.xz));\n      } else col = vec3 (0.3, 0.3, 0.1);\n    } else {\n      s = (abs (vn.x) > 0.1) ? ro.zy : ro.xy;\n      col = vec3 (0.4, 0.4, 0.3) * (1. - 0.2 * Fbm2 (s));\n      s = abs (mod (vec2 (0.5, 0.25) * s, 1.) - 0.5);\n      col *= 1. - 0.3 * smoothstep (0.46, 0.48, max (s.x, s.y));\n    }\n    sCol = vec3 (0.);\n    for (float k = 0.; k < 4.; k ++) {\n      ltPos.xz = Rot2D (vec2 (3., 0.), 0.5 * pi * (k + 0.5));\n      ltDir = ltPos - ro;\n      atten = 1.2 / (1. + 0.003 * pow (length (ltDir), 2.));\n      ltDir = normalize (ltDir);\n      sCol += atten * (col * (0.1 + 0.9 * max (dot (vn, ltDir), 0.)));\n    }\n    col = 0.25 * sCol * (0.1 + 0.9 * illum);\n    if (illum < 0.1) col += vec3 (0.1, 0.1, 0.4) * (0.5 + 0.5 * Fbm1 (64. * tCur)) *\n       (1. - smoothstep (0.00005, 0.001, 1. - max (dot (normalize (vec3 (0., 6., 0.) - roo), rd), 0.))) *\n       (1. - smoothstep (0.05, 0.1, illum));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  illumMin = 0.;\n  if (canvas.x < 255.) illumMin = 0.4;\n  bSize = vec3 (20., 10., 20.);\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.3 * pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 1., -30.);\n  ro.y = clamp (ro.y, 0.3, 2. * bSize.y - 0.3);\n  rd = vuMat * normalize (vec3 (uv, 4.2));\n  dstFar = 70.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2p (vec2 p)\n{\n  float f, a, s;\n  f = 0.;\n  s = 0.;\n  a = 1.;\n  for (int j = 0; j < 4; j ++) {\n    f += a * Noisefv2 (p);\n    s += a;\n    a *= 1./2.5;\n    p *= 2.5;\n  }\n  return f / s;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}