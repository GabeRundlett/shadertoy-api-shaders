{
    "Shader": {
        "info": {
            "date": "1571874713",
            "description": "Anaglyph Structure. Framed for https://fanzine.cookie.paris/",
            "flags": 0,
            "hasliked": 0,
            "id": "3dfXzS",
            "likes": 7,
            "name": "Anaglyph Structure",
            "published": 3,
            "tags": [
                "anaglyph",
                "cookiezine",
                "cookieparty"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 624
        },
        "renderpass": [
            {
                "code": "// Anaglyph Structure\n// Framed for https://fanzine.cookie.paris/\n// Licensed under hippie love conspiracy\n// Leon Denise (ponk) 2019.10.24\n// Using code from Inigo Quilez\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat random (in vec2 st) { return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123); }\n\nvec3 look (vec3 eye, vec3 target, vec2 anchor) {\n    vec3 forward = normalize(target-eye);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward * .5 + right * anchor.x + up * anchor.y);\n}\n\n\nfloat map (vec3 pos) {\n    float scene = 10.0;\n    float r = 1.0;\n    const float count = 7.0;\n    for (float index = count; index > 0.0; --index)\n    {\n        pos.xz = abs(pos.xz)-1.5*r;\n        pos.xz *= rot(0.4/r + iTime * 0.1);\n        pos.yz *= rot(1.5/r + iTime * 0.05);\n        pos.yx *= rot(.2/r + iTime * 0.05);\n        scene = min(scene, length(pos.xy)-0.001);\n        scene = min(scene, length(pos)-0.3*r);\n        r /= 1.8;\n    }\n    return scene;\n}\n\nvec4 raymarch (vec3 eye, vec3 ray) {\n    float dither = random(ray.xy+fract(iTime));\n    vec4 result = vec4(eye, 0);\n    float total = 0.0;\n    float maxt = 20.0;\n    const float count = 30.;\n    for (float index = count; index > 0.0; --index) {\n        result.xyz = eye + ray * total;\n        float dist = map(result.xyz);\n        if (dist < 0.001 + total * .002 || total > maxt) {\n            result.w = index / count;\n            break;\n        }\n        dist *= 0.9 + 0.1 * dither;\n        total += dist;\n    }\n    result.w *= step(total, maxt);\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n    vec3 eye = vec3(1.,0.5,-4.);\n    vec3 at = vec3(0);\n    vec3 ray = look(eye, at, uv);\n    vec3 eyeoffset = 0.02*normalize(cross(normalize(at-eye), vec3(0,1,0)));\n\n    vec4 resultLeft = raymarch(eye-eyeoffset, ray);\n    vec4 resultRight = raymarch(eye+eyeoffset, ray);\n    fragColor = vec4(resultLeft.w,vec2(resultRight.w),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}