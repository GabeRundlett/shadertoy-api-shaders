{
    "Shader": {
        "info": {
            "date": "1443629487",
            "description": "Learning how to use sobel filter for edge detection.\nHave made no extensions at all, so it is very sensitive to noise.",
            "flags": 2,
            "hasliked": 0,
            "id": "MlBSWW",
            "likes": 28,
            "name": "Simple Sobel filter - webcamera",
            "published": 3,
            "tags": [
                "edgedetection",
                "sobelfilter"
            ],
            "usePreview": 1,
            "username": "mlavik1",
            "viewed": 6883
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col;\n    \n    /*** Sobel kernels ***/\n    // Note: GLSL's mat3 is COLUMN-major ->  mat3[col][row]\n    mat3 sobelX = mat3(-1.0, -2.0, -1.0,\n                       0.0,  0.0, 0.0,\n                       1.0,  2.0,  1.0);\n    mat3 sobelY = mat3(-1.0,  0.0,  1.0,\n                       -2.0,  0.0, 2.0,\n                       -1.0,  0.0,  1.0);  \n    \n    float sumX = 0.0;\t// x-axis change\n    float sumY = 0.0;\t// y-axis change\n    \n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            // texture coordinates should be between 0.0 and 1.0\n            float x = (fragCoord.x + float(i))/iResolution.x;\t\n    \t\tfloat y =  (fragCoord.y + float(j))/iResolution.y;\n            \n            // Convolve kernels with image\n            sumX += length(texture( iChannel0, vec2(x, y) ).xyz) * float(sobelX[1+i][1+j]);\n            sumY += length(texture( iChannel0, vec2(x, y) ).xyz) * float(sobelY[1+i][1+j]);\n        }\n    }\n    \n    float g = abs(sumX) + abs(sumY);\n    //g = sqrt((sumX*sumX) + (sumY*sumY));\n    \n    if(g > 1.0)\n        col = vec3(1.0,1.0,1.0);\n    else\n        col = col * 0.0;\n    \n\tfragColor.xyz = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}