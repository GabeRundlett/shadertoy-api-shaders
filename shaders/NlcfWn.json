{
    "Shader": {
        "info": {
            "date": "1662875380",
            "description": "a pathtracing demo,with light bouncing 20 times\npress space to repaint",
            "flags": 48,
            "hasliked": 0,
            "id": "NlcfWn",
            "likes": 3,
            "name": "DayC's Pathtracing",
            "published": 3,
            "tags": [
                "cornellbox",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "DayC",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color=texture(iChannel0,uv).rgb;\n    color=ACESFilm(color);\n    color=LinearToSRGB(color);\n    fragColor=vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float EPI=0.005;\nconst int BOUNCE_CNT=20;\nconst float rayPosNormalNudge = 0.01f;\n\nvec3 camera_pos=vec3(278,273,-800);\nvec3 camera_dir=vec3(0,0,1);\nvec3 camera_up=vec3(0,1,0);\nfloat near=0.035;\nvec2 size=vec2(0.044,0.025);\n\nfloat skyBox_intensity=1.0f;\nfloat light_intensity=15.0f;\n\n//材质\nPBRMaterial white_material=PBRMaterial(\n    vec3(1,1,1),\n    vec3(0,0,0),\n    vec3(1,1,1),\n    0.0f,\n    1.0f,\n    1.0f,\n    vec3(0,0,0),\n    0.0f,\n    1.0f);\n\nPBRMaterial green_material=PBRMaterial(\n    vec3(0,1,0),\n    vec3(0,0,0),\n    vec3(0,1,0),\n    0.0f,\n    0.5f,\n    1.0f,\n    vec3(0,0,0),\n    0.0f,\n    1.0f);\n\nPBRMaterial red_material=PBRMaterial(\n    vec3(1,0,0),\n    vec3(0,0,0),\n    vec3(1,0,0),\n    0.0f,\n    0.5f,\n    1.0f,\n    vec3(0,0,0),\n    0.0f,\n    1.0f);\n\nPBRMaterial agate_material=PBRMaterial(\n    vec3(1,1,1),\n    vec3(0,0,0),\n    vec3(0.0f,0.0f,0),\n    0.1f,\n    0.2f,\n    2.0f,\n    vec3(0,0.0f,0),\n    0.8f,\n    0.1f);\n\nPBRMaterial light_material=PBRMaterial(\n    vec3(0,0,0),\n    vec3(1,1,1)*15.0f,\n    vec3(1,1,1),\n    0.0f,\n    0.0f,\n    1.0f,\n    vec3(0,0,0),\n    0.0f,\n    1.0f);\n\nPBRMaterial mirror_material=PBRMaterial(\n    vec3(1,1,1),\n    vec3(0,0,0),\n    vec3(1,1,1),\n    0.4f,\n    0.1f,\n    1.0f,\n    vec3(0,0,0),\n    0.0f,\n    1.0f);\n\nPBRMaterial sphere_material=PBRMaterial(\n    vec3(0.8,0.2,1),\n    vec3(0,0,0),\n    vec3(0.8,0.4,0.1),\n    0.9f,\n    0.8f,\n    1.0f,\n    vec3(0,0,0),\n    0.0f,\n    1.0f);\n\n\nvoid Scene(vec3 eyePos,vec3 dir,inout HitInfo hitInfo)\n{\n    float dist=LIGHT_MAX_DIST,dist_temp;\n\n    vec3 normal,normal_temp;\n    bool fromInside,fromInside_temp;\n    PBRMaterial material;\n\n    //地板\n    dist_temp=Quad(eyePos,dir,vec3(552.8,0,0), vec3(0,0,0), vec3(0,0,559.2), vec3(549.6,0,559.2),normal_temp);\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=mirror_material;\n        fromInside=false;\n    }\n    //后墙\n    dist_temp=Quad(eyePos,dir,vec3(549.6,0.0,559.2), vec3(0.0,0.0,559.2), vec3(0.0,548.8,559.2), vec3(556.0,548.8,559.2),normal_temp);\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=white_material;\n        fromInside=false;\n    }   \n    //天花板\n    dist_temp=Quad(eyePos,dir,vec3(556.0,548.8,0.0), vec3(556.0,548.9,559.2), vec3(0.0,548.9,559.2), vec3(0.0,548.9,0.0),normal_temp);\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=white_material;\n        fromInside=false;\n    }\n    //左墙\n    dist_temp=Quad(eyePos,dir,vec3(552.8,0.0,0.0), vec3(549.6,0.0,559.2), vec3(556.0,548.8,559.2), vec3(556.0,548.8,0.0),normal_temp);\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=red_material;\n        fromInside=false;\n    }\n\n    //右墙\n    dist_temp=Quad(eyePos,dir,vec3(0.0,0.0,559.2), vec3(0.0,0.0,0.0), vec3(0.0,548.8,0.0), vec3(0.0,548.8,559.2),normal_temp);\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=green_material;\n        fromInside=false;\n    }\n\n    //小盒子\n    mat4 smallbox_transform=translate(vec3(185,82.5,169))*rotate(vec3(0,1,0),-0.29);\n    vec4 smallbox_point=inverse(smallbox_transform)*vec4(eyePos,1);\n    vec4 smallbox_dir=inverse(smallbox_transform)*vec4(dir,0);\n    dist_temp=Box(smallbox_point.xyz,smallbox_dir.xyz,vec3(0,0,0),vec3(165,165,165),normal_temp,fromInside_temp);\n    normal_temp=(smallbox_transform*vec4(normal_temp,0)).xyz;\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=white_material;\n        fromInside=fromInside_temp;\n    }\n\n    //大盒子\n    mat4 tallbox_transform=translate(vec3(368,165,351))*rotate(vec3(0,1,0),-1.27);\n    vec4 tallbox_point=inverse(tallbox_transform)*vec4(eyePos,1);\n    vec4 tallbox_dir=inverse(tallbox_transform)*vec4(dir,0);\n    dist_temp=Box(tallbox_point.xyz,tallbox_dir.xyz,vec3(0,0,0),vec3(165,330,165),normal_temp,fromInside_temp);\n    normal_temp=(tallbox_transform*vec4(normal_temp,0)).xyz;\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=white_material;\n        fromInside=fromInside_temp;\n    }\n\n    //反射球\n    mat4 sphere_transform=translate(vec3(480,250,300));\n    vec4 sphere_point=inverse(sphere_transform)*vec4(eyePos,1);\n    vec4 sphere_dir=inverse(sphere_transform)*vec4(dir,0);\n    dist_temp=Sphere(sphere_point.xyz,sphere_dir.xyz,50.0f,normal_temp,fromInside_temp);\n    normal_temp=(sphere_transform*vec4(normal_temp,0)).xyz;\n    if(dist_temp<dist)\n    {\n        dist=dist_temp;\n        normal=normal_temp;\n        material=sphere_material;\n        fromInside=fromInside_temp;\n    }\n\n    if(dist<hitInfo.dist)\n    {\n        hitInfo.dist=dist;\n        hitInfo.material=material;\n        hitInfo.hitPoint=eyePos+dir*hitInfo.dist;\n        hitInfo.normal=normal;\n        hitInfo.inside=fromInside;\n    }\n}\n\nvoid Light(vec3 eyePos,vec3 dir,inout HitInfo hitInfo)\n{\n    float dist=LIGHT_MAX_DIST;\n\n    vec3 normal;\n\n    //地板\n    dist=min(dist,Quad(eyePos,dir,vec3(343.0,548.8,227.0), vec3(343.0,548.8,332.0),vec3(213.0,548.8,332.0),vec3(213.0,548.8,227.0),normal));\n\n    if(dist<hitInfo.dist)\n    {\n        hitInfo.dist=dist;\n        hitInfo.material=light_material;\n        hitInfo.hitPoint=eyePos+dir*hitInfo.dist;\n        hitInfo.normal=normal;\n        hitInfo.inside=false;\n    }\n}\n\n//透视摄像机射线\nvec3 CameraRay_Perspective(vec3 eyePos,vec3 upVec,vec3 front,float near,vec2 size,vec2 uv)\n{\n    upVec=normalize(upVec);\n    front=normalize(front);\n    vec3 right=cross(front,upVec);\n    vec3 hitPoint=vec3(size*uv,0);\n    hitPoint=hitPoint.x*right+hitPoint.y*upVec+eyePos+front*near;\n    return normalize(hitPoint-eyePos);\n}\n\nbool LightCollision(vec3 eyePos,vec3 rayDir,out HitInfo hitInfo)\n{\n    hitInfo=HitInfo(false,vec3(0,0,0),LIGHT_MAX_DIST,white_material,vec3(0,0,0));\n\n    Scene(eyePos,rayDir,hitInfo);\n    Light(eyePos,rayDir,hitInfo);\n    if(hitInfo.dist!=LIGHT_MAX_DIST)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n} \n\nuint random_seed;\n\nvec4 PathTracing(vec3 rayPoint,vec3 rayDir)\n{\n    //着色结果\n    vec3 result=vec3(0,0,0);\n    //强度\n    vec3 intensity=vec3(1,1,1);\n\n    vec3 pos_now=rayPoint;\n    vec3 dir_now=rayDir;\n\n    for(int i=0;i<BOUNCE_CNT;i++)\n    {\n        HitInfo hitInfo;\n        if(!LightCollision(pos_now,dir_now,hitInfo))\n        {\n            result+=SRGBToLinear(texture(iChannel1,dir_now).rgb)*intensity;\n            break;\n        }\n\n        //光线吸收\n        /*if(hitInfo.inside)\n        {\n            intensity*=exp(-hitInfo.material.refractionColor*hitInfo.dist);\n        }*/\n\n        //specular-roughness\n        float specularChance=hitInfo.material.specularChance;\n        float refractionChance=hitInfo.material.refractionChance;\n        \n        //根据Fresnel项调整反射率\n        if (specularChance > 0.0f)\n        {\n            specularChance = FresnelReflectAmount(\n                hitInfo.inside?hitInfo.material.IOR:1.0f,\n                !hitInfo.inside?hitInfo.material.IOR:1.0f,\n                dir_now, hitInfo.normal, hitInfo.material.specularChance, 1.0f);\n\n            float ratio=(1.0f-specularChance)/(1.0f-hitInfo.material.specularChance);\n            refractionChance*=ratio;\n        }\n\n        //根据概率决定此光线的路径\n        float rayProbability;\n        float doSpecular=0.0f;\n        float doRefraction=0.0f;\n        float rnd=RandomFloat01(random_seed);\n        if(rnd<specularChance&&specularChance>0.0f)\n        {\n            doSpecular=1.0f;\n            rayProbability=specularChance;\n        }\n        else if(rnd<specularChance+refractionChance&&refractionChance>0.0f)\n        {\n            doRefraction=1.0f;\n            rayProbability=refractionChance;\n        }\n        else\n        {\n            rayProbability=1.0f-specularChance-refractionChance;\n        }\n\n        rayProbability=max(rayProbability,0.001f);\n\n        //计算光线位置并进行偏移\n        if(doRefraction>0.0f)\n        {\n            pos_now=pos_now+dir_now*hitInfo.dist-hitInfo.normal*rayPosNormalNudge;\n        }\n        else\n        {\n            pos_now=pos_now+dir_now*hitInfo.dist+hitInfo.normal*rayPosNormalNudge;\n        }\n\n        vec3 diffuseDir=normalize(hitInfo.normal+RandomUnitVector(random_seed));\n\n        vec3 specularDir=reflect(dir_now,hitInfo.normal);\n        specularDir=normalize(mix(specularDir,diffuseDir,hitInfo.material.specularRoughness*hitInfo.material.specularRoughness));\n\n        vec3 refractionDir = refract(dir_now,hitInfo.inside? -hitInfo.normal:hitInfo.normal, hitInfo.inside ? hitInfo.material.IOR : 1.0f / hitInfo.material.IOR);\n        refractionDir = normalize(mix(refractionDir, normalize(-hitInfo.normal + RandomUnitVector(random_seed)), hitInfo.material.refractionRoughness*hitInfo.material.refractionRoughness));\n\n        dir_now = mix(diffuseDir, specularDir, doSpecular);\n        dir_now = mix(dir_now, refractionDir, doRefraction);\n\n        //计算自发光\n        result+=hitInfo.material.emissive*intensity;\n\n        //计算漫反射\n        if (doRefraction == 0.0f)\n            intensity *= mix(hitInfo.material.albedo, hitInfo.material.specularColor, doSpecular);\n\n        intensity/=rayProbability;\n\n        //Russian-Roulette\n        float p=max(intensity.r,max(intensity.g,intensity.b));\n        if(RandomFloat01(random_seed)>sqrt(p))\n        {\n            break;\n        }\n        intensity*=(1.0/p);\n    }\n\n    return vec4(result,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    random_seed=uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    /*vec2 uv=fragCoord/iResolution.xy;\n    uv-=0.5;\n    vec4 color;\n    vec3 ray=CameraRay_Perspective(camera_pos,camera_up,camera_dir,near,size,uv);\n    color=PathTracing(camera_pos,ray);*/\n\n    //super-sample\n    vec4 color=vec4(0,0,0,0);\n    vec2[4] delta;\n    delta[0]=vec2(-0.5,0.5);\n    delta[1]=vec2(0.5,0.5);\n    delta[2]=vec2(-0.5,-0.5);\n    delta[3]=vec2(0.5,-0.5);\n    for(int i=0;i<4;i++)\n    {\n        vec2 uv=(fragCoord+delta[i])/iResolution.xy;\n        uv-=0.5;\n        vec3 ray=CameraRay_Perspective(camera_pos,camera_up,camera_dir,near,size,uv);\n        color+=(1.0f/4.0f)*PathTracing(camera_pos,ray);\n    }\n    vec2 uv=fragCoord/iResolution.xy;\n    uv-=0.5f;\n    color.a=1.0f;\n    \n    //vec4 lastFrameColor=texture(iChannel0,uv+0.5);\n    //fragColor=mix(lastFrameColor,color,1.0f/float(iFrame+1));\n\n    bool spacePressed = (texture(iChannel2, vec2(32.5/256.0,0.25)).x > 0.1);\n \n    vec4 lastFrameColor = texture(iChannel0, uv+0.5);\n    float blend = (lastFrameColor.a == 0.0f || spacePressed) ? 1.0f : 1.0f / (1.0f + (1.0f / lastFrameColor.a));\n    vec3 rgb = mix(lastFrameColor.rgb, color.rgb, blend);\n     \n    // show the result\n    fragColor = vec4(rgb, blend);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "struct  LambertMaterial\n{\n    //漫反射系数\n    vec3 diffuse;\n    //高光系数\n    vec3 specular;\n    //环境光系数\n    vec3 ambient;\n};\n\nstruct LambertLight\n{\n    //位置\n    vec3 pos;\n    //颜色\n    vec3 color;\n    //强度\n    float intensity;\n};\n\nstruct PBRMaterial\n{\n    //漫反射颜色\n    vec3 albedo;\n    //发光颜色\n    vec3 emissive;\n    //反射颜色\n    vec3 specularColor;\n    //反射概率\n    float specularChance;\n    //粗糙度\n    float specularRoughness;\n    //折射率\n    float IOR;\n    //折射\n    vec3 refractionColor;\n    //折射概率\n    float refractionChance;\n    //折射粗糙度\n    float refractionRoughness;\n};\n\nstruct HitInfo\n{\n    //判断是否为正面\n    bool inside;\n    //法线方向\n    vec3 normal;\n    //距离\n    float dist;\n    //材质\n    PBRMaterial material;\n    //击中的点\n    vec3 hitPoint;\n};\n\nconst float PI=3.1415926526;\n\nmat4 translate(vec3 delta)\n{\n\treturn mat4(\n\t\tvec4(1,0,0,0),\n\t\tvec4(0,1,0,0),\n\t\tvec4(0,0,1,0),\n\t\tvec4(delta.x,delta.y,delta.z,1));\n}\n\nmat4 scale(vec3 delta)\n{\n\treturn mat4(\n\t\tvec4(delta.x,0,0,0),\n\t\tvec4(0,delta.y,0,0),\n\t\tvec4(0,0,delta.z,0),\n\t\tvec4(0,0,0,1));\n}\n\nmat4 rotate(vec3 axis,float theta_rad)\n{\n\taxis=normalize(axis);\n\tfloat cos_theta=cos(theta_rad);\n\tfloat sin_theta=sin(theta_rad);\n\treturn mat4(\n\t\tvec4(axis.x*axis.x*(1.0-cos_theta)+cos_theta       , axis.y*axis.x*(1.0-cos_theta)+axis.z*sin_theta, axis.z*axis.x*(1.0-cos_theta)-axis.y*sin_theta , 0.0),\n\t\tvec4(axis.x*axis.y*(1.0-cos_theta)-axis.z*sin_theta, axis.y*axis.y*(1.0-cos_theta)+cos_theta       , axis.z*axis.y*(1.0-cos_theta)+axis.x*sin_theta, 0.0),\n\t\tvec4(axis.x*axis.z*(1.0-cos_theta)+axis.y*sin_theta, axis.y*axis.z*(1.0-cos_theta)-axis.x*sin_theta, axis.z*axis.z*(1.0-cos_theta)+cos_theta       , 0.0),\n\t\tvec4(0.0                                           , 0.0                                           , 0.0                                           , 1.0));\n}\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n \nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n \nvec3 RandomUnitVector(inout uint state)\n{\n    float z = RandomFloat01(state) * 2.0f - 1.0f;\n    float a = RandomFloat01(state) * 2.0f*PI;\n    float r = sqrt(1.0f - z * z);\n    float x = r * cos(a);\n    float y = r * sin(a);\n    return vec3(x, y, z);\n}\n\nvec3 LessThan(vec3 f, float value)\n{\n    return vec3(\n        (f.x < value) ? 1.0f : 0.0f,\n        (f.y < value) ? 1.0f : 0.0f,\n        (f.z < value) ? 1.0f : 0.0f);\n}\n \nvec3 LinearToSRGB(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n     \n    return mix(\n        pow(rgb, vec3(1.0f / 2.4f)) * 1.055f - 0.055f,\n        rgb * 12.92f,\n        LessThan(rgb, 0.0031308f)\n    );\n}\n \nvec3 SRGBToLinear(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n     \n    return mix(\n        pow(((rgb + 0.055f) / 1.055f), vec3(2.4f)),\n        rgb / 12.92f,\n        LessThan(rgb, 0.04045f)\n    );\n}\n\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);\n}\n\n//点到直线的距离,方向向量必须为单位向量\nfloat DistPoint2Line(vec3 point,vec3 rayPos,vec3 dir)\n{\n    return length(cross(point-rayPos,dir));\n}\n\n//菲涅尔项计算\nfloat FresnelReflectAmount(float n1, float n2, vec3 normal, vec3 incident, float f0, float f90)\n{\n    // Schlick aproximation\n    float r0 = (n1-n2) / (n1+n2);\n    r0 *= r0;\n    float cosX = -dot(normal, incident);\n    if (n1 > n2)\n    {\n        float n = n1/n2;\n        float sinT2 = n*n*(1.0-cosX*cosX);\n        // Total internal reflection\n        if (sinT2 > 1.0)\n            return f90;\n        cosX = sqrt(1.0-sinT2);\n    }\n    float x = 1.0-cosX;\n    float ret = r0+(1.0-r0)*x*x*x*x*x;\n    // adjust reflect multiplier for object reflectivity\n    return mix(f0, f90, ret);\n}\n\n\nconst float LIGHT_MAX_DIST=10000.0f;\n\n//求光线与球的交点\nfloat Sphere(vec3 rayPos,vec3 rayDir,float radius,out vec3 normal,out bool fromInside)\n{\n\tfloat dist_point2line=DistPoint2Line(vec3(0,0,0),rayPos,rayDir);\n\tfloat dist_points=length(rayPos);\n\t\n\tbool ray_facesphere=dot(rayDir,-rayPos)>0.0;\n\tbool line_close=dist_point2line<radius;\n\tbool point_close=dist_points<radius;\n\n\tif(!point_close&&((!line_close&&ray_facesphere)||!ray_facesphere))\n\t{\n\t\tfromInside=false;\n\t\treturn LIGHT_MAX_DIST;\n\t}\n\telse\n\t{\n\t\tfloat A=1.0f;\n\t\tfloat B=2.0f*dot(rayDir,rayPos);\n\t\tfloat len_O=length(rayPos);\n\t\tfloat C=(len_O+radius)*(len_O-radius);\n\n\t\tfloat sqrt_delta=sqrt(B*B-4.0*A*C);\n\t\tfloat t1=(-B+sqrt_delta)/(2.0f*A);\n\t\tfloat t2=(-B-sqrt_delta)/(2.0f*A);\n\n\t\tfloat res=LIGHT_MAX_DIST;\n\n\t\tif(t1>.0)\n\t\t{\n\t\t\tres=min(res,t1);\n\t\t}\n\t\tif(t2>.0)\n\t\t{\n\t\t\tres=min(res,t2);\n\t\t}\n\n\t\tfromInside=point_close;\n\t\tnormal=normalize(rayPos+rayDir*res);\n\t\treturn res;\n\t}\n}\n\n//求光线与三角形的交点(Moller-Trumbore算法)\nfloat Triangle(vec3 rayPos,vec3 rayDir,vec3 a,vec3 b,vec3 c,out vec3 normal)\n{\n\tvec3 E1=b-a;\n\tvec3 E2=c-a;\n\tvec3 S=rayPos-a;\n\tvec3 S1=cross(rayDir,E2);\n\tvec3 S2=cross(S,E1);\n\n\tfloat S1E1=dot(S1,E1);\n\tfloat b1_S1E1=dot(S1,S);\n\tfloat b2_S1E1=dot(S2,rayDir);\n\tif(b1_S1E1>.0&&b2_S1E1>.0&&S1E1-b1_S1E1-b2_S1E1>.0)\n\t{\n\t\tnormal=normalize(cross(E1,E2));\n\t\treturn dot(S2,E2)/S1E1;\n\t}\n\telse\n\t{\n\t\treturn LIGHT_MAX_DIST;\n\t}\n}\n\nfloat Quad(vec3 rayPos,vec3 rayDir,vec3 a,vec3 b,vec3 c,vec3 d,out vec3 normal)\n{\n\tfloat res=LIGHT_MAX_DIST;\n\tvec3 normal1,normal2;\n\tfloat res1=Triangle(rayPos,rayDir,a,b,d,normal1);\n\tfloat res2=Triangle(rayPos,rayDir,d,b,c,normal2);\n\tif(res1<res2)\n\t{\n\t\tnormal=normal1;\n\t}\n\telse\n\t{\n\t\tnormal=normal2;\n\t}\n\treturn min(res,min(res1,res2));\n}\n\nfloat Box(vec3 rayPos,vec3 rayDir,vec3 center,vec3 size,out vec3 normal,out bool fromInside)\n{\n\tfloat res=LIGHT_MAX_DIST;\n\n\tsize-=(size/2.0f);\n\tvec3 p1=center+size;\n\tvec3 p2=center+vec3(-size.x,size.y,size.z);\n\tvec3 p3=center+vec3(-size.x,-size.y,size.z);\n\tvec3 p4=center+vec3(size.x,-size.y,size.z);\n\tvec3 p5=center+vec3(size.x,size.y,-size.z);\n\tvec3 p6=center+vec3(-size.x,size.y,-size.z);\n\tvec3 p7=center+vec3(-size.x,-size.y,-size.z);\n\tvec3 p8=center+vec3(size.x,-size.y,-size.z);\n\n\tvec3 n1,n2,n3,n4,n5,n6;\n\tfloat r1=Quad(rayPos,rayDir,p1,p2,p3,p4,n1);\n\tif(r1<res)\n\t{\n\t\tres=r1;\n\t\tnormal=n1;\n\t}\n\tfloat r2=Quad(rayPos,rayDir,p1,p5,p6,p2,n2);\n\tif(r2<res)\n\t{\n\t\tres=r2;\n\t\tnormal=n2;\n\t}\n\tfloat r3=Quad(rayPos,rayDir,p4,p8,p7,p3,n3);\n\tif(r3<res)\n\t{\n\t\tres=r3;\n\t\tnormal=n3;\n\t}\n\tfloat r4=Quad(rayPos,rayDir,p1,p4,p8,p5,n4);\n\tif(r4<res)\n\t{\n\t\tres=r4;\n\t\tnormal=n4;\n\t}\n\tfloat r5=Quad(rayPos,rayDir,p3,p2,p6,p7,n5);\n\tif(r5<res)\n\t{\n\t\tres=r5;\n\t\tnormal=n5;\n\t}\n    \n\tfloat r6=Quad(rayPos,rayDir,p5,p8,p7,p6,n6);\n\tif(r6<res)\n\t{\n\t\tres=r6;\n\t\tnormal=n6;\n\t}\n\n\tvec3 relativePos=rayPos-center;\n\tfromInside=abs(relativePos.x)<size.x&&abs(relativePos.y)<size.y&&abs(relativePos.z)<size.z;\n\treturn res;\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}