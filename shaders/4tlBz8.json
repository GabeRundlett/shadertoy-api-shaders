{
    "Shader": {
        "info": {
            "date": "1511729388",
            "description": "Unpacking tiny clouds to better understand it, and to get rid of the texture read\ntiny clouds: https://www.shadertoy.com/view/lsBfDz\n\nA blog post explaining \"tiny clouds\" is here:\nhttps://blog.demofox.org/2017/11/26/dissecting-tiny-clouds/",
            "flags": 0,
            "hasliked": 0,
            "id": "4tlBz8",
            "likes": 52,
            "name": "Tiny Clouds: Unpacked & No Tex",
            "published": 3,
            "tags": [
                "clouds"
            ],
            "usePreview": 1,
            "username": "demofox",
            "viewed": 3303
        },
        "renderpass": [
            {
                "code": "#define NUM_STEPS 200\n#define NUM_NOISE_OCTAVES 4\n\n#define HEIGHT_OFFSET 1.25\n\n#define USE_TEXTURE false\n#define WHITE_NOISE_GRID_SIZE 256.0\n\n// from \"Hash without Sine\" https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 443.8975\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// NOTE: the bilinear interpolation is important! without it, the clouds look blocky.\n// You can see this by returning noise00 or by having the texture use the \"nearest\" filter\nfloat BilinearInterpolateWhiteNoise (vec2 uv)\n{\n    uv = fract(uv);\n    \n    vec2 uvPixels = uv * WHITE_NOISE_GRID_SIZE;\n    \n    vec2 uvFrac = uvPixels - floor(uvPixels);\n    \n    vec2 uvDiscreteFloor = floor(uvPixels) / WHITE_NOISE_GRID_SIZE;\n    vec2 uvDiscreteCeil = ceil(uvPixels) / WHITE_NOISE_GRID_SIZE;\n    \n    float noise00 = hash12(vec2(uvDiscreteFloor.x, uvDiscreteFloor.y));\n    float noise01 = hash12(vec2(uvDiscreteFloor.x, uvDiscreteCeil.y ));\n    float noise10 = hash12(vec2(uvDiscreteCeil.x , uvDiscreteFloor.y));\n    float noise11 = hash12(vec2(uvDiscreteCeil.x , uvDiscreteCeil.y ));\n    \n    float noise0_ = mix(noise00, noise01, uvFrac.y);\n    float noise1_ = mix(noise10, noise11, uvFrac.y);\n    \n    float noise = mix(noise0_, noise1_, uvFrac.x);\n\n    return noise;\n}\n\nfloat RandomNumber (in vec3 position)\n{\n    // NOTE: the ceil here is important interestingly. it makes the clouds look round and puffy instead of whispy in a glitchy way\n    vec2 uv = (position.yz+ceil(position.x))/float(NUM_STEPS);\n    \n    if (USE_TEXTURE)\n    \treturn texture(iChannel0, uv).y;\n    else\n        return BilinearInterpolateWhiteNoise(uv);\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord)\n{\n    // x,y,z is the direction the ray for this pixel travels in.\n    // x is into the screen\n    // y is the screen's x axis. the left side is -0.8 and the right side value depends on the aspect ratio seems to be be roughly +0.8 for me.\n    // z is the screen's y axis (also the up axis). it ranges from -0.8 at the bottom of the screen to 0.2 at the top of the screen\n    // NOTE: in tiny clouds, this is a vec4 where the y field is unused. I've made it a vec3 and removed the y field.\n    vec3 direction = vec3(0.8, fragCoord/iResolution.y-0.8);\n\n    // this is a sky blue color\n    // NOTE: tiny clouds gets the 0.8 from direction.x\n    vec3 skyColor = vec3(0.6, 0.7, 0.8);\n    \n    // initialize the pixel color to a gradient of sky blue (at top) to white (at bottom)\n    vec3 pixelColor = skyColor - direction.z;\n    \n    // Tiny clouds adds a per pixel value to rayStep that is in [-1,1].\n    // I think that gives it some higher frequency noise to make the clouds look a little more detailed.  \n    // NOTE: this ray marches back to front so that alpha blending math is easier\n    for (int rayStep = 0; rayStep < NUM_STEPS; ++rayStep)\n    {\n        // NOTE: tiny clouds has position as a vec4 but never uses the y component. I removed it here.\n        // position.z is up\n        vec3 position = 0.05 * float(NUM_STEPS - rayStep) * direction;\n        \n        // move the camera on the x and z axis over time\n        position.xy+=iTime;\n        \n        // tiny clouds initializes this to 2.0, but whenever using it divides it by 4. So, just dividing 2 by 4 here.\n        float noiseScale=0.5;\n        \n        // Note: position.z is the height. adding this moves the camera up. tiny clouds uses 1.0\n        float signedCloudDistance = position.z + HEIGHT_OFFSET;\n        \n        // Note: each sampling doubles the position but halves the value read there. it's multiple octaves of noise i think?        \n        for (int octaveIndex = 0; octaveIndex < NUM_NOISE_OCTAVES; ++octaveIndex)\n        {\n            position *= 2.0;\n            noiseScale *= 2.0;\n            signedCloudDistance -= RandomNumber(position) / noiseScale;\n        }\n        \n        // Note: signed cloud distance is also cloud density if negative.\n        // the below is equivelant to a lerp between the current pixel color and the color that the cloud is at that location.\n        // the lerp amount is controlled by the density time 0.4.\n        // The color is reversed so it \"looks like\" the sky color.\n        // Lerping is equivelant to standard alpha blending, so we are just doing alpha compositing.\n        if (signedCloudDistance < 0.0)\n            pixelColor = pixelColor + (pixelColor - 1.0 - signedCloudDistance * skyColor.zyx)*signedCloudDistance*0.4;\n\t}\n    \n    fragColor.rgb = pixelColor;\n    fragColor.a = 1.0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}