{
    "Shader": {
        "info": {
            "date": "1667427835",
            "description": "lissajous curves",
            "flags": 32,
            "hasliked": 0,
            "id": "mdjGzm",
            "likes": 5,
            "name": "lissajous curves series",
            "published": 3,
            "tags": [
                "trace"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool f_b_inside_square(\n    float n_x_translation_normalized, \n    float n_y_translation_normalized, \n    float n_x_scale_normalized, \n    float n_y_scale_normalized, \n    vec2 a_n_pixel_coords_normalized\n){\n\n    \n    if(\n        a_n_pixel_coords_normalized.x < n_x_translation_normalized + n_x_scale_normalized \n        &&\n        a_n_pixel_coords_normalized.x > n_x_translation_normalized \n        &&\n        a_n_pixel_coords_normalized.y < n_y_translation_normalized + n_y_scale_normalized \n        &&\n        a_n_pixel_coords_normalized.y > n_y_translation_normalized \n    ){\n        return true;\n    }\n    return false;\n    \n}\nbool f_b_inside_circle(\n    float n_x_translation_normalized, \n    float n_y_translation_normalized, \n    float n_x_scale_normalized, \n    float n_y_scale_normalized, \n    vec2 a_n_pixel_coords_normalized\n){\n\n    vec2 a_n_center = vec2(\n        n_x_translation_normalized - (n_x_scale_normalized/2.0),\n        n_y_translation_normalized - (n_y_scale_normalized/2.0)\n    );\n    float n_radius = (n_x_scale_normalized + n_y_scale_normalized) /2.0;\n    //float n_radius = n_x_scale_normalized;    \n    return \n        pow(a_n_pixel_coords_normalized.x - a_n_center.x,2.0) \n        +\n        pow(a_n_pixel_coords_normalized.y - a_n_center.y,2.0)\n        <\n        pow(n_radius,2.0);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 a_n_pixel_coords_normalized = fragCoord.xy / iResolution.xy; \n    vec2 a_n_mouse_coords_normalized = iMouse.xy / iResolution.xy; \n    //Normalized pixel coordinates (from 0 to 1)\n    float n_max_freq_y = 10.0;\n   float n_max_freq_x = 10.0;\n   float n_amp = 1.0/n_max_freq_x/2.0;//(iResolution.x);\n   float n = 0.0;\n\n   float n_freq_x = float(int(n_max_freq_x * a_n_mouse_coords_normalized.x));\n   float n_freq_y = float(int(n_max_freq_y * a_n_mouse_coords_normalized.y));\n\n    \n    float n_x_scale_normalized = 0.005; \n    float n_y_scale_normalized = 0.005;\n\n\n\n    vec2 a_n_pixel_coord_normalized = fragCoord.xy / iResolution.xy; \n    \n    for(float n_x = 0.0; n_x < n_max_freq_x; n_x+=1.0){\n        for(float n_y = 0.0; n_y < n_max_freq_y; n_y+=1.0){\n\n            vec2 a_n_sincos_trans = vec2(\n                sin(iTime*n_x+n_x*a_n_mouse_coords_normalized.x)*n_amp,\n                cos(iTime*n_y+n_y*a_n_mouse_coords_normalized.y)*n_amp\n            );\n    \n            vec2 a_n_current = vec2(\n                (1.0/n_max_freq_x) * n_x,\n                (1.0/n_max_freq_y) * n_y\n            );\n            vec2 a_n_res = a_n_current.xy + a_n_sincos_trans.xy;\n             bool b_inside_square = f_b_inside_circle(\n                a_n_res.x,\n                a_n_res.y,\n                n_x_scale_normalized,\n                n_y_scale_normalized,\n                a_n_pixel_coords_normalized\n             );\n             if(b_inside_square){\n                 n = 1.0;\n             }  \n        }\n    }\n    vec4 a_n_color_old = texture(iChannel0, a_n_pixel_coord_normalized);\n    n = n+(a_n_color_old.r-0.01);\n    n = clamp(n, 0.0, 1.0);\n    fragColor = vec4(\n        n,\n        n,\n        n,\n        n\n    );\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}