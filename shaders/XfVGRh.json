{
    "Shader": {
        "info": {
            "date": "1712672630",
            "description": "From Monday Night Bytes shader jam",
            "flags": 0,
            "hasliked": 0,
            "id": "XfVGRh",
            "likes": 18,
            "name": "Speed freak",
            "published": 3,
            "tags": [
                "raytracing",
                "motionblur",
                "quadtree"
            ],
            "usePreview": 0,
            "username": "Alie",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "const float maxScale = 512.;\nconst int steps = 4;\nconst float samples = 32.;\n#define r2d(p,a) p=cos(a)*p+sin(a)*vec2(-p.y,p.x);\n\nvec3 hash(vec3 p){\n\tp=fract(p*vec3(443.897,441.423,437.195));\n\tp+=dot(p,p.yxz+19.19);\n\treturn fract((p.xxy+p.yxx)*p.zyx);\n}\n\nfloat pDist(vec3 p, vec3 d, vec4 plane) {\n    return dot(plane.xyz * plane.w - p, plane.xyz) / dot(d, plane.xyz);\n}\n\n\t/// Sphere intersection\nvec4 intersectSphere(vec3 p, vec3 d, vec4 sphere){\n\tp -= sphere.xyz;\n\tfloat t = dot(d, p) * 2.,\n\ta = dot(p, p) - sphere.w * sphere.w;\n\ta = t * t - 4. * a;\n\tif (a < 0.) return vec4(1000);\n\ta = (-sqrt(a) - t)  / 2.;\n    return vec4((d * a + p) / sphere.w, a);\n}\n\n\t/// Cube intersection\nvec4 intersectCube(vec3 rp, vec3 rd, vec3 ba, vec3 bb){\n\tvec3 a = (ba-rp) / rd, // near\n\tb = (bb-rp) / rd, // far\n\tf = max(a, b); // furthest\n\tfloat x = min(f.x, min(f.y, f.z)); // nearest in front\n    \n\treturn vec4(\n        normalize(\n            step(0.001,abs(a - x)) - step(0.001,abs(b - x))\n        ) * sign(x),\n        x);\n}\n\nvec3 sCol(vec3 d) {\n    return vec3(d.y * .5 + .5) * vec3(.7, .7, 1.) \n     + pow(max(0., dot(d, normalize(vec3(1,0,-1)))), 20.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    for (int j=0;j<int(samples);j++) {\n        vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.xx;\n        vec3 k = hash(vec3(uv+float(j), fract(iTime)));\n        float t = iTime + k.z * (1./60.) * 3.;\n        if (iMouse.z > 0.) t = 0.;\n        r2d(uv, -.25 + sin(t / 5.) / 4.);\n        //t=iTime;\n        \n        uv = uv*1.5 + (k.xy - .5) * 16. / iResolution.x;\n        vec3 p = vec3(sin(t / 3.) * 10000., cos(t/3.) * 10000., sin(t / 2.) * 250. - 300.),      \n        d = normalize(vec3(uv, 1));\n        \n        r2d(d.yz, cos(t / 2.) / 4. - 1.);\n        r2d(d.xy, -t / 3. - 1.4 + sin(t / 5.) / 2.);\n\n        float dist = pDist(p, d, vec4(0,0,-1,0));\n        if (dist < 0.) {\n            col += sCol(d);\n            continue;\n            \n        } else {\n\n            p += d * dist;\n\n            float scale = maxScale;\n\n            for (int i=0; i<steps; i++) {\n                scale /= 2.;\n                k = hash(vec3(floor(p.xy / scale), .1));\n                if (fract(k.x) > .75) {\n                    break;\n                }\n            }\n            //col += k; continue;\n            \n            vec3 pos = p / float(scale);\n            \n            vec3 iCol = vec3(1), aCol = k * k * .5 + .5, bCol;\n            //k = hash(k);\n            bCol = (1. - k) * .5 + .5;\n            if (k.y>.7) aCol *= 2.;\n                \n            for(int b=0;  b<3; b++) {\n                vec4 sphere = vec4(\n                    floor(pos.x) + k.y, \n                    floor(pos.y) + k.z, \n                    k.x, k.x) * float(scale);\n                vec4 sDist = intersectSphere(p, d, sphere);\n\n                vec3 ba = vec3(floor(pos.xy),0.) * float(scale), bb = vec3(ceil(pos.xy),1) * float(scale);\n                vec4 bDist = intersectCube(p, d, ba, bb);\n\n                bDist = sDist.w < bDist.w ? sDist : bDist;\n    \n                iCol *= bDist.w==sDist.w ? aCol : bCol;\n                if (bDist.w < 0.) continue;\n                p += d * bDist.w;\n                p += bDist.xyz * 0.001;\n                d = reflect(d, bDist.xyz);\n            }\n            iCol *= sCol(d);\n            col += iCol;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col / samples, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}