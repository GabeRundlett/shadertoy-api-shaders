{
    "Shader": {
        "info": {
            "date": "1696107647",
            "description": "Background reacts on the song.",
            "flags": 0,
            "hasliked": 0,
            "id": "msKyDR",
            "likes": 1,
            "name": "FP 2023",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "fractals",
                "smoke",
                "wind"
            ],
            "usePreview": 0,
            "username": "uctumi",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "/*\n * Copyright 2014 Roman Bobniev (FatumR)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#define OCTAVES  8.0\n\n#define LIVE_SMOKE 1\n\nfloat rand(vec2 co){\n   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand2(vec2 co){\n   return fract(cos(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// Rough Value noise implementation\nfloat valueNoiseSimple(vec2 vl) {\n   float minStep = 1.0 ;\n\n   vec2 grid = floor(vl);\n   vec2 gridPnt1 = grid;\n   vec2 gridPnt2 = vec2(grid.x, grid.y + minStep);\n   vec2 gridPnt3 = vec2(grid.x + minStep, grid.y);\n   vec2 gridPnt4 = vec2(gridPnt3.x, gridPnt2.y);\n\n    float s = rand2(grid);\n    float t = rand2(gridPnt3);\n    float u = rand2(gridPnt2);\n    float v = rand2(gridPnt4);\n    \n    float x1 = smoothstep(0., 1., fract(vl.x));\n    float interpX1 = mix(s, t, x1);\n    float interpX2 = mix(u, v, x1);\n    \n    float y = smoothstep(0., 1., fract(vl.y));\n    float interpY = mix(interpX1, interpX2, y);\n    \n    return interpY;\n}\n\nfloat getLowFreqs()\n{\n    const int NUM_FREQS = 32;\n    /* Close to the spectrum of the voice frequencies for this song. */\n    const float lowStart = 0.65;\n    const float lowEnd = 0.75;\n    float result = 0.0;\n    \n    for (int i = 0; i < NUM_FREQS; i++)\n    {\n        result += texture(iChannel0,\n                            vec2(lowStart + (lowEnd - lowStart)*float(i)/float(NUM_FREQS - 1),\n                                 0.25)).x;\n    }\n\n    return smoothstep(0.0, 1.0, (result / float(NUM_FREQS)) * 2.);\n}\n\nfloat fractalNoise(vec2 vl) {\n    float persistance = 2.0;\n    float amplitude = 0.5;\n    float rez = 0.0;\n    vec2 p = vl;\n    \n    for (float i = 0.0; i < OCTAVES; i++) {\n        rez += amplitude * valueNoiseSimple(p);\n        amplitude /= persistance;\n        p *= persistance;\n    }\n    return rez;\n}\n\nfloat complexFBM(vec2 p) {\n    float sound = getLowFreqs();\n    float slow = iTime / 2.5;\n    float fast = iTime / .5;\n    vec2 offset1 = vec2(slow  , 0.); // Main front\n    vec2 offset2 = vec2(sin(fast )* 0.1, 0.); // sub fronts\n\n    return \n#if LIVE_SMOKE\n        (1. + sound) * \n#endif\n        fractalNoise( p + offset1 + fractalNoise(\n            \tp + fractalNoise(\n                \tp + 2. * fractalNoise(p - offset2)\n            \t)\n        \t)\n        );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n   \n    vec3 blueColor = vec3(0.07,0.2,.5);\n    vec3 orangeColor2 = vec3(0, 0, 0);\n    \n    vec3 rez = mix(orangeColor2, blueColor, complexFBM(uv));\n    \n    fragColor = vec4(rez, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}