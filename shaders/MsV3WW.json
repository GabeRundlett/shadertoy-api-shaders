{
    "Shader": {
        "info": {
            "date": "1454580467",
            "description": "Tracking camera switches between normal and 360 panorama modes",
            "flags": 0,
            "hasliked": 0,
            "id": "MsV3WW",
            "likes": 17,
            "name": "Panorama with Boats",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "water",
                "panorama"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 1363
        },
        "renderpass": [
            {
                "code": "// \"Panorama with Boats\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 i, f;\n  i = floor (p);  f = fract (p);  f = f * f * (3. - 2. * f);\n  t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 i, f;\n  float q;\n  i = floor (p);  f = fract (p);  f = f * f * (3. - 2. * f);\n  q = dot (i, cHashA3);\n  t1 = Hashv4f (q);  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 i, f, t1, t2;\n  i = floor (p);  f = fract (p);  f = f * f * (3. - 2. * f);\n  t1 = Hashv4f (dot (i.xy, cHashA3.xy));  t2 = Hashv4f (dot (i.zw, cHashA3.xy));\n  return vec2 (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n               mix (mix (t2.x, t2.y, f.z), mix (t2.z, t2.w, f.z), f.w));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g, e;\n  float s;\n  e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nint idObj, idObjGrp;\nmat3 bMat, boatMat[2];\nvec3 bPos, boatPos[2], qHit, sunDir, waterDisp, cloudDisp;\nfloat tCur, bAng, boatAng[2], dstFar;\n\nvec3 SkyBg (vec3 rd)\n{\n  return vec3 (0.15, 0.2, 0.65) + vec3 (0.2) * pow (1. - max (rd.y, 0.), 5.);\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  float cloudFac, skyHt, w, f, s;\n  skyHt = 200.;\n  if (rd.y > 0.) {\n    ro.x += cloudDisp.x;\n    p = 0.01 * (rd.xz * (skyHt - ro.y) / rd.y + ro.xz);\n    w = 0.65;\n    f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.3;\n    }\n    cloudFac = clamp (5. * (f - 0.3) * rd.y - 0.1, 0., 1.);\n  } else cloudFac = 0.;\n  s = max (dot (rd, sunDir), 0.);\n  col = SkyBg (rd) + (0.35 * pow (s, 6.) + 0.65 * min (pow (s, 256.), 0.3));\n  return mix (col, vec3 (0.85), cloudFac);\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (1.3 * sin (0.2 * t) + 1.7 * sin (0.09 * t) +\n     3.5 * sin (0.022 * t), 0., t);\n}\n\nfloat GrndHt (vec2 p)\n{\n  vec3 q;\n  float h, g;\n  h = 7. * Fbm2 (0.08 * p);\n  q = TrackPath (p.y);\n  return min (h, mix (q.y - 2., h, smoothstep (1.5, 4.5, sqrt (abs (p.x - q.x)))));\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float ht = GrndHt (p.xz);\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy), e.x,\n     ht - GrndHt (p.xz + e.yx)));\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.1, 0.4 * h) + 0.005 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 8; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nfloat WaveHt (vec2 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, t4o, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.3;  wAmp = 0.2;  pRough = 6.;\n  t4o.xz = tCur * vec2 (1., -1.);\n  q2 = p + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 4; j ++) {\n    t4 = (t4o.xxzz + vec4 (q2, q2)) * wFreq;\n    t2 = Noisev2v4 (t4);\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + sqrt (1. - ta4 * ta4));\n    v2 = pow (1. - pow (clamp (v4.xz * v4.yw, 0., 1.), vec2 (0.65)), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.2;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return 0.4 * ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 70; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.4, 1.2 * h) + 0.01 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  float h;\n  e = vec2 (max (0.1, 1e-4 * d * d), 0.);\n  h = WaveHt (p.xz);\n  return normalize (vec3 (h - WaveHt (p.xz + e.xy), e.x, h - WaveHt (p.xz + e.yx)));\n}\n\nfloat BoatDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.y -= 0.7;\n  q = p;\n  d = max (max (PrRCylDf (q, 1.2, 2., 3.5),\n     - max (PrRCylDf (q - vec3 (0., 0.1, 0.), 1.15, 2., 3.5),\n     max (q.y - 0.1, - q.y - 0.1))), max (q.y - 0., - q.y - 0.2));\n  q.y -= -0.2;\n  d = max (SmoothMin (d, max (PrRCylDf (q, 1., 2., 3.3), q.y), 0.1), q.z - 2.);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 1;  qHit = q; }\n  q = p;\n  q.yz -= vec2 (-0.5, -0.2);\n  d = max (PrRCylDf (q, 1., 1.1, 2.3), max (0.4 - q.y, q.z - 1.2));\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 2;  qHit = q; }\n  q = p;\n  q.yz -= vec2 (1.3, -0.6);\n  d = PrCylDf (q.xzy, 0.04, 0.8);\n  q.y -= 0.2;\n  d = min (d, PrCylDf (q.yzx, 0.02, 0.2));\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 3; }\n  q.y -= 0.6;\n  d = PrCylDf (q.xzy, 0.15, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 4; }\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.3, -0.9, 2.);\n  d = PrRoundBoxDf (q, vec3 (0.02, 0.2, 0.1), 0.03);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 5; }\n  q.y -= -0.4;\n  d = PrCylAnDf (q, 0.1, 0.02, 0.2);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 6; }\n  q = p;\n  q.yz -= vec2 (-1., 2.);\n  d = PrCylDf (q, 0.1, 0.2);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 6; }\n  q = p;\n  q.yz -= vec2 (0.3, 1.9);\n  d = PrCylDf (q.xzy, 0.015, 0.5);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 7; }\n  q.yz -= vec2 (0.38, 0.15);\n  d = PrBoxDf (q, vec3 (0.01, 0.1, 0.15));\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 8; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dLim;\n  const float szFac = 4.;\n  dLim = 0.5;\n  dMin = dstFar;\n  dMin *= szFac;\n  q = p - boatPos[0];\n  idObjGrp = 1 * 256;\n  d = PrCylDf (q.xzy, 2., 2.);\n  dMin = (d < dLim) ? BoatDf (szFac * boatMat[0] * q, dMin) : min (dMin, d);\n  q = p - boatPos[1];\n  idObjGrp = 2 * 256;\n  d = PrCylDf (q.xzy, 2., 2.);\n  dMin = (d < dLim) ? BoatDf (szFac * boatMat[1] * q, dMin) : min (dMin, d);\n  return dMin / szFac;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 25; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 20. * h / d));\n    d += min (0.03, 3. * h);\n    if (h < 0.001) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 BoatCol (vec3 n)\n{\n  vec3 col, nn;\n  float spec;\n  int ig, id;\n  ig = idObj / 256;\n  id = idObj - 256 * ig;\n  if (ig == 1) nn = boatMat[0] * n;\n  else nn = boatMat[1] * n;\n  spec = 0.3;\n  if (id == 1) {\n    if (qHit.y < 0.1 && nn.y > 0.99) {\n      col = vec3 (0.8, 0.5, 0.3) *\n         (1. - 0.4 * SmoothBump (0.42, 0.58, 0.05, mod (7. * qHit.x, 1.)));\n      spec = 0.1;\n    } else if (qHit.x * nn.x > 0. && nn.y < 0. && qHit.z < 1.99 &&\n       abs (qHit.y - 0.1) < 0.095) col = (ig == 1) ? vec3 (0.3, 0.9, 0.3) :\n       vec3 (0.9, 0.3, 0.3);\n    else col = (qHit.y > -0.3) ? vec3 (1., 1., 0.2) : vec3 (0.7, 0.7, 0.8);\n  } else if (id == 2) {\n    if (abs (abs (qHit.x) - 0.24) < 0.22 && abs (qHit.y - 0.7) < 0.15 ||\n       abs (abs (qHit.z + 0.2) - 0.5) < 0.4 && abs (qHit.y - 0.7) < 0.15) {\n       col = vec3 (0., 0., 0.1);\n       spec = 1.;\n     } else col = vec3 (1.);\n  } else if (id == 3) col = vec3 (1., 1., 1.);\n  else if (id == 4) col = vec3 (1., 1., 0.4);\n  else if (id == 5) col = vec3 (0.4, 1., 0.4);\n  else if (id == 6) col = vec3 (1., 0.2, 0.);\n  else if (id == 7) col = vec3 (1., 1., 1.);\n  else if (id == 8) col = (ig == 1) ? vec3 (1., 0.4, 0.4) : vec3 (0.4, 1., 0.4);\n  return vec4 (col, spec);\n}\n\nfloat WaveAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 1; j <= 4; j ++) {\n    d = 0.1 * float (j);\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return clamp (1. - 0.1 * ao, 0., 1.);\n}\n\nfloat WakeFac (vec3 row)\n{\n  vec2 tw, tw1;\n  float wkFac, ba;\n  tw = row.xz - (boatPos[0].xz - Rot2D (vec2 (0., 1.5), boatAng[0]));\n  tw1 = row.xz - (boatPos[1].xz - Rot2D (vec2 (0., 1.5), boatAng[1]));\n  if (length (tw1) < length (tw)) {\n    tw = tw1;\n    ba = boatAng[1];\n  } else ba = boatAng[0];\n  tw *= 1.8;\n  tw = Rot2D (tw, - ba);\n  wkFac = 0.;\n  if (length (tw * vec2 (1., 0.5)) < 1.) wkFac =\n     clamp (1. - 1.5 * abs (tw.x), 0., 1.) * clamp (1. + 0.5 * tw.y, 0., 1.);\n  return wkFac;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, watCol, vn, vnw, row, rdw;\n  float dstObj, dstGrnd, dstWat, wkFac, sh;\n  int idObjT;\n  bool waterRefl;\n  dstWat = WaveRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  dstGrnd = GrndRay (ro, rd);\n  if (dstGrnd < dstObj) {\n    dstObj = dstGrnd;\n    idObj = 1;\n  }\n  waterRefl = (dstWat < min (dstFar, dstObj));\n  if (waterRefl) {\n    ro += rd * dstWat;\n    row = ro;\n    rdw = rd;\n    wkFac = WakeFac (row);\n    vnw = WaveNf (ro, dstWat);\n    if (wkFac > 0.) vnw = VaryNf (10. * row, vnw, 5. * wkFac);\n    rd = reflect (rd, vnw);\n    ro += 0.1 * rd;\n    idObj = -1;\n    dstObj = ObjRay (ro, rd);\n    dstGrnd = GrndRay (ro, rd);\n    if (dstGrnd < dstObj) {\n      dstObj = dstGrnd;\n      idObj = 1;\n    }\n  }\n  if (dstObj < dstWat) {\n    ro += dstObj * rd;\n    if (idObj == 1) {\n      vn = VaryNf (5. * ro, GrndNf (ro, dstObj), 1.);\n      objCol = vec4 (mix (vec3 (0.07, 0.25, 0.02), vec3 (0., 0.3, 0.),\n         clamp (0.8 * Noisefv2 (ro.xz) - 0.1, 0., 1.)), 0.1);\n      sh = 1.;\n    } else {\n      idObjT = idObj;\n      vn = ObjNf (ro);\n      idObj = idObjT;\n      objCol = BoatCol (vn);\n      sh = ObjSShadow (ro, sunDir);\n    }\n    col = objCol.rgb * (0.3 + 0.7 * sh * max (dot (vn, sunDir), 0.)) +\n       objCol.a * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n    col = mix (col, SkyCol (ro, rd), clamp (10. * dstObj / dstFar - 9., 0., 1.));\n  } else col = SkyCol (ro, rd);\n  if (waterRefl) {\n    watCol = (vec3 (0.15, 0.3, 0.3) * (0.5 + 0.5 * (max (vnw.y, 0.) +\n       0.1 * pow (max (0., dot (sunDir, reflect (rdw, vnw))), 64.)))) *\n       WaveAO (row, vec3 (0., 1., 0.));\n    col = mix (watCol, col, 0.8 * pow (1. - abs (dot (rdw, vnw)), 4.));\n    col = mix (col, vec3 (0.9),\n       pow (clamp (WaveHt (row.xz) + 0.4 * Fbm3 (7. * row), 0., 1.), 8.));\n    if (wkFac > 0.) col = mix (col, vec3 (0.9),\n       wkFac * clamp (0.1 + 0.5 * Fbm3 (23. * row), 0., 1.));\n    col = mix (col, SkyCol (row, rdw), clamp (10. * dstWat / dstFar - 9., 0., 1.));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid BoatPM (float t, float ds)\n{\n  vec2 bDir;\n  float h[5], c, s, bAz;\n  bPos = TrackPath (t);\n  vec3 bp = TrackPath (t + 0.1) - bPos;\n  bAz = atan (bp.z, - bp.x);\n  bPos.x += ds;\n  bDir = vec2 (0., 1.);\n  bDir = Rot2D (bDir, bAz);\n  h[0] = WaveHt (bPos.xz);\n  h[1] = WaveHt (bPos.xz + 0.5 * bDir);\n  h[2] = WaveHt (bPos.xz - 0.5 * bDir);\n  bDir = Rot2D (bDir, -0.5 * pi);\n  h[3] = WaveHt (bPos.xz + 0.5 * bDir);\n  h[4] = WaveHt (bPos.xz - 0.5 * bDir);\n  bPos.y = 0.05 + 1.1 * (2. * h[0] + h[1] + h[2] + h[3] + h[4]) / 6.;\n  bMat[2] = normalize (vec3 (0.5, h[2] - h[1], 0.));\n  bMat[0] = normalize (vec3 (0., 0.3 + h[3] - h[4], 2.));\n  bMat[1] = cross (bMat[0], bMat[2]);\n  c = cos (bAz);\n  s = sin (bAz);\n  bMat *= mat3 (c, 0., s, 0., 1., 0., - s, 0., c);\n  bAng = 0.5 * pi - bAz;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd, u, col;\n  vec2 canvas, uv, uvs;\n  float vuPeriod, vel, f, zmFac, sPano;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  vuPeriod = 100.;\n  sPano = SmoothBump (0.25, 0.75, 0.02, mod (tCur / vuPeriod, 1.));\n  if (abs (uvs.y) < 0.85 - 0.25 * sPano) {\n    dstFar = 300.;\n    sunDir = normalize (vec3 (cos (0.03 * tCur), 1., sin (0.03 * tCur)));\n    waterDisp = 0.1 * tCur * vec3 (-1., 0., 1.);\n    cloudDisp = 0.5 * tCur * vec3 (1., 0., 0.);\n    vel = 2.;\n    BoatPM (vel * tCur + 5., 0.2);\n    boatPos[0] = bPos;  boatMat[0] = bMat;  boatAng[0] = bAng;\n    BoatPM (vel * tCur - 5., -0.2);\n    boatPos[1] = bPos;  boatMat[1] = bMat;  boatAng[1] = bAng;\n    f = 2. * SmoothBump (0.25, 0.75, 0.2, mod (2. * tCur / vuPeriod, 1.)) - 1.;\n    ro = TrackPath (vel * tCur - 12. * f);\n    f = abs (f);\n    ro.y = 0.5 + WaveHt (ro.xz) + 3. * (1. - f * f);\n    ro.x += 1.3 * (1. - f);\n    zmFac = 4.5 - 2. * (1. - f * f);\n    f = smoothstep (0.1, 0.3, 1. - f);\n    vd = normalize (0.5 * ((1. + f) * boatPos[0] + (1. - f) * boatPos[1]) - ro);\n    u = - vd.y * vd;\n    f = 1. / sqrt (1. - vd.y * vd.y);\n    vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n    rd = vuMat * normalize (mix (vec3 (uv, zmFac), \n       vec3 (sin (0.56 * pi * uv.x) , uv.y, cos (0.56 * pi * uv.x)), sPano));\n    col = ShowScene (ro, rd);\n  } else col = vec3 (0.);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}