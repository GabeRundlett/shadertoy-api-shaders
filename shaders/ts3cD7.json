{
    "Shader": {
        "info": {
            "date": "1601032224",
            "description": " Modeling a simple but complex chemical process - see the source;   based on \"Gray-Scott Explorer v3\", updated with 3D surface visualization (try full-screen).\n",
            "flags": 32,
            "hasliked": 0,
            "id": "ts3cD7",
            "likes": 14,
            "name": "Gray-Scott Explorer v4",
            "published": 3,
            "tags": [
                "diffusion",
                "pattern",
                "reaction",
                "morphogenesis"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "// \"Gray-Scott Explorer v4\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  The autocatalytic Gray-Scott system involves two chemical reactions\n  U + 2V -> 3V and V -> P.\n  In terms of partial differential equations, where U = U(x,y,t), etc,\n  with diffusion added (fixed diffusion constants D_u and D_v that\n  differ significantly), these correspond to\n    dU/dt = D_u del^2 U - U V^2 + f (1 - U)\n    dV/dt = D_v del^2 V + U V^2 - (f + k) V\n  where f is the feed rate (coupled to reservoirs with U = 1 and V = 0) and\n  k is the rate constant for V -> P.\n\n  The equations are numerically integrated using the Euler method (on a regular \n  CPU use the stable ADI method that allows a 10x larger time step). The initial \n  state is either random or a small cluster with a little randomness added to break \n  symmetry; each run is different; boundaries are periodic.\n\n  The left and right sliders set the k and f parameters; the values are\n  shown x100. The left button cycles through several interesting parameter\n  presets; there are many other combinations worth examining. The right button\n  chooses the type of initial state. Some patterns are slow to evolve; patience.\n\n  The surface height represents the concentration of one of the chemical species.\n  Surface rendering based on \"Scrolling Terrain\".\n  \n  Online resources include:\n   http://blog.hvidtfeldts.net/index.php/2012/08/reaction-diffusion-systems/\n   http://mrob.com/pub/comp/xmorphia/pearson-classes.html\n*/\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nvec4 Loadv4 (vec2 vId);\n\nvec3 ltDir, hbSize, rdSign;\nfloat dstFar, gSize;\nint idObj;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat SurfDst (vec3 p)\n{\n  vec2 gv, sv;\n  float h;\n  gv = (p.xz + 0.5) * (gSize - 1.);\n  sv = floor (gv);\n  h = 0.;\n  if (min (sv.x, sv.y) >= 0. && max (sv.x, sv.y) < gSize - 1.) {\n    gv -= sv;\n    h = mix (mix (Loadv4 (sv).y, Loadv4 (sv + vec2 (0., 1.)).y, gv.y),\n       mix (Loadv4 (sv + vec2 (1., 0.)).y, Loadv4 (sv + vec2 (1.)).y, gv.y), gv.x);\n    h = clamp (h, 0., 1.);\n  }\n  return p.y - 0.07 * h;\n}\n\nfloat SurfRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  s = PrBoxDf (ro, vec3 (0.5, 0.1, 0.5));\n  sLo = 0.;\n  for (int j = VAR_ZERO; j < 240; j ++) {\n    p = ro + s * rd;\n    h = SurfDst (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.001, 0.4 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (SurfDst (p) > 0.) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  p.xz = abs (p.xz);\n  return (max (abs (p.x), abs (p.z)) < 0.5 * (1. - 1. / (gSize - 1.))) ? dHit : dstFar;\n}\n\nvec3 SurfNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = SurfDst (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BBoxDf (vec3 p)\n{\n  float w;\n  w = 0.5 * (1. - 1. / (gSize - 1.));\n  p.y -= hbSize.y;\n  return max (PrBoxDf (p, vec3 (w, hbSize.y, w)), - PrBox2Df (p.xz, vec2 (w - 0.01)));\n}\n\nfloat BBoxRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = BBoxDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 BBoxNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = BBoxDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 sLen, rsLen;\n  vec3 eWid;\n  float dMin, d;\n  dMin = dstFar;\n  sLen = vec4 (hbSize + 0.005, 0.);\n  rsLen = vec4 (sLen.xyz * rdSign, 0.);\n  eWid = vec3 (0.0015);\n  p.y -= hbSize.y;\n  d = Minv3 (vec3 (PrBoxDf (p - rsLen.xww, eWid + sLen.wyz),\n     PrBoxDf (p - rsLen.wyw, eWid + sLen.xwz), PrBoxDf (p - rsLen.wwz, eWid + sLen.xyw)));\n  DMIN (1);\n  p = abs (p);\n  d = Minv3 (vec3 (PrBoxDf (p - sLen.wyz, eWid + sLen.xww),\n     PrBoxDf (p - sLen.xwz, eWid + sLen.wyw), PrBoxDf (p - sLen.xyw, eWid + sLen.wwz)));\n  DMIN (2);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, vn;\n  float dMin, dn, df;\n  dMin = dstFar;\n  ro.y -= hbSize.y;\n  v = ro / rd;\n  tp = (hbSize + 0.005) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return vec4 (dMin, vn);\n}\n\nfloat BlkHitSil (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  ro.y -= hbSize.y;\n  v = ro / rd;\n  tp = (hbSize + 0.01) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 db4;\n  vec3 col, vn, roo;\n  float dstSurf, dstBBox, dstFrm, nDotL;\n  col = vec3 (0.1, 0.1, 0.3);\n  hbSize = vec3 (0.5, 0.03, 0.5);\n  if (BlkHitSil (ro, rd) < dstFar) {\n    dstBBox = BBoxRay (ro, rd);\n    if (dstBBox < dstFar && SurfDst (ro + dstBBox * rd) > 0.) dstBBox = dstFar;\n    dstSurf = SurfRay (ro, rd);\n    rdSign = sign (rd);\n    dstFrm = ObjRay (ro, rd);\n    roo = ro;\n    if (min (dstSurf, min (dstFrm, dstBBox)) < dstFar) {\n      if (dstSurf < min (dstFrm, dstBBox)) {\n        ro += dstSurf * rd;\n        col = mix (vec3 (0., 0.6, 0.), vec3 (1., 0.7, 0.), smoothstep (0.002, 0.003, ro.y)); \n        vn = SurfNf (ro);\n      } else if (dstBBox < dstFrm) {\n        ro += dstBBox * rd;\n        col = vec3 (0.6, 0.8, 0.4);\n        vn = BBoxNf (ro);\n      } else {\n        ro += dstFrm * rd;\n        col = (idObj == 1) ? vec3 (0.4, 0.4, 0.3) : vec3 (0.6, 0.6, 0.4);\n        vn = ObjNf (ro);\n      }\n      nDotL = max (dot (vn, ltDir), 0.);\n      if (dstSurf < min (dstFrm, dstBBox) && ro.y > 0.002) nDotL *= nDotL;\n      col = col * (0.2 + 0.2 * max (- dot (vn, ltDir), 0.) + 0.8 * nDotL) +\n         0.2 * pow (max (0., dot (ltDir, rd)), 32.);\n    }\n    db4 = BlkHit (roo, rd);\n    if (db4.x < dstFar) {\n      vn = db4.yzw;\n      col = mix (col, vec3 (0.7, 0.7, 0.75) * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n         0.1 * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.),\n         pow (1. - abs (dot (rd, vn)), 5.));\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec2 slVal)\n{\n  vec4 wgBx[4];\n  vec3 c1, c2;\n  vec2 ut, ust;\n  float vW[2], asp, t;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.40 * asp, 0., 0.012 * asp, 0.25);\n  wgBx[1] = vec4 (0.46 * asp, 0., 0.012 * asp, 0.25);\n  wgBx[2] = vec4 (0.40 * asp, -0.4, 0.013 * asp, 0.);\n  wgBx[3] = vec4 (0.46 * asp, -0.4, 0.013 * asp, 0.);\n  vW[0] = slVal.x;\n  vW[1] = slVal.y;\n  c1 = vec3 (0.7, 0.1, 0.1);\n  c2 = vec3 (1., 0.7, 0.5);\n  for (int k = 0; k < 2; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = c2;\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.05) *\n         canvas.y < 5.) ? c2 : vec3 (0.3);\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 2.);\n    if (abs (max (ut.x, ut.y) - 0.015) < 0.006) col = c1;\n    col = mix (col, c1, ShowInt (0.5 * uv - wgBx[k].xy - wgBx[k].zw * vec2 (1., -1.) -\n       vec2 (0.0045, -0.06), 0.028 * vec2 (asp, 1.), 2., clamp (floor (1000. * vW[k] * 0.1 +\n       1e-4), 1., 99.)));\n  }\n  for (int k = 2; k < 4; k ++) {\n    t = length (0.5 * uv - wgBx[k].xy);\n    if (t < wgBx[k].z) col = (t < 0.7 * wgBx[k].z) ? c1 : c2;\n  }\n  return col;\n}\n\n#define AA  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float az, el, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  gSize = Loadv4 (vec2 (0., 0.)).w;\n  dstFar = 6.;\n  stDat = Loadv4 (vec2 (6., 0.));\n  az = stDat.w;\n  el = clamp (stDat.z - 0.3 * pi, -0.45 * pi, -0.05 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -3.);\n  ltDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 5.5));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col = ShowWg (uv, canvas, col, Loadv4 (vec2 (3., 0.)).zw);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    if (val < 0.5) sgn = 1.;\n    nDig = (val > 0.) ? floor (max (log (val + 0.01) / log (10.), 0.)) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Gray-Scott Explorer v4\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashfv2 (vec2 p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT, bgnClust;\nconst float pi = 3.14159;\n\nvec2 Step (vec2 sv)\n{\n  vec4 dv;\n  vec2 c, del2c;\n  c = Loadv4 (sv).xy;\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (vec2 (dv.x, sv.y)).xy + Loadv4 (vec2 (dv.y, sv.y)).xy +\n     Loadv4 (vec2 (sv.x, dv.z)).xy + Loadv4 (vec2 (sv.x, dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (vec2 sv)\n{\n  vec2 c;\n  float s, iSize;\n  if (bgnClust == 0.) {\n    s = step (0.1, Hashfv2 (mod (16. * floor (sv / 16.) + itRand + 10.1, 2. * pi)));\n    c = vec2 (s, 1. - s);\n  } else {\n    iSize = (gSize > 128.) ? 10. : 5.;\n    if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashfv2 (mod (17. * sv + itRand + 10.1, 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n    } else c = vec2 (1., 0.);\n  }\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  const int nPre = 7;\n  vec4 wgBx[4], stDat, mPtr, mPtrP;\n  vec2 presetKF[nPre], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, az, el, vW, nStep, idPre;\n  int wgSel, wgReg, kSel;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y >= 1024.) ? 1024. : ((canvas.y >= 512.) ? 512. : ((canvas.y >= 256.) ? 256. : 128.));\n  if (max (fragCoord.x, fragCoord.y) >= gSize) discard;\n  iFrag = floor (fragCoord);\n  doInit = (iFrame <= 5);\n  doPre = false;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (doInit) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    bgnClust = 0.;\n    doPre = true;\n    nStep = 0.;\n    wgSel = -1;\n    az = 0.001;\n    el = 0.;\n  } else {\n    stDat = Loadv4 (vec2 (0., 0.));\n    nStep = stDat.z;\n    stDat = Loadv4 (vec2 (1., 0.));\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (vec2 (2., 0.));\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (vec2 (3., 0.));\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (vec2 (4., 0.));\n    idPre = stDat.z;\n    bgnClust = stDat.w;\n    stDat = Loadv4 (vec2 (5., 0.));\n    wgSel = int (stDat.z);\n    stDat = Loadv4 (vec2 (6., 0.));\n    el = stDat.z;\n    az = stDat.w;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.40 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.46 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.40 * asp, -0.4, 0.013 * asp, 0.);\n    wgBx[3] = vec4 (0.46 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    for (int k = 2; k < 4; k ++) {\n      if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) < wgBx[k].z) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n    az = 0.001;\n    el = 0.;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {   \n      az = 2. * pi * mPtr.x;\n      el = pi * mPtr.y;\n    }\n  } else {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    } else if (wgSel == 3 && mPtrP.z <= 0.) {\n      bgnClust = 1. - bgnClust;\n    }\n    doInit = true;\n  }\n  if (gSize == 128. && nStep >= 2000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (! doInit && gSize != Loadv4 (vec2 (0., 0.)).w) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    c = Init (iFrag);\n  } else {\n    ++ nStep;\n    c = Step (iFrag);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if (iFrag.y == 0.) {\n    if      (iFrag.x == 0.) stDat.zw = vec2 (nStep, gSize);\n    else if (iFrag.x == 1.) stDat.zw = mPtr.xy;\n    else if (iFrag.x == 2.) stDat.zw = vec2 (mPtr.z, itRand);\n    else if (iFrag.x == 3.) stDat.zw = slVal;\n    else if (iFrag.x == 4.) stDat.zw = vec2 (idPre, bgnClust);\n    else if (iFrag.x == 5.) stDat.zw = vec2 (float (wgSel), 0.);\n    else if (iFrag.x == 6.) stDat.zw = vec2 (el, az);\n  }\n  Savev4 (iFrag, stDat, fragColor, fragCoord);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Gray-Scott Explorer v4\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashfv2 (vec2 p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT, bgnClust;\nconst float pi = 3.14159;\n\nvec2 Step (vec2 sv)\n{\n  vec4 dv;\n  vec2 c, del2c;\n  c = Loadv4 (sv).xy;\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (vec2 (dv.x, sv.y)).xy + Loadv4 (vec2 (dv.y, sv.y)).xy +\n     Loadv4 (vec2 (sv.x, dv.z)).xy + Loadv4 (vec2 (sv.x, dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (vec2 sv)\n{\n  vec2 c;\n  float s, iSize;\n  if (bgnClust == 0.) {\n    s = step (0.1, Hashfv2 (mod (16. * floor (sv / 16.) + itRand + 10.1, 2. * pi)));\n    c = vec2 (s, 1. - s);\n  } else {\n    iSize = (gSize > 128.) ? 10. : 5.;\n    if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashfv2 (mod (17. * sv + itRand + 10.1, 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n    } else c = vec2 (1., 0.);\n  }\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  const int nPre = 7;\n  vec4 wgBx[4], stDat, mPtr, mPtrP;\n  vec2 presetKF[nPre], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, az, el, vW, nStep, idPre;\n  int wgSel, wgReg, kSel;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y >= 1024.) ? 1024. : ((canvas.y >= 512.) ? 512. : ((canvas.y >= 256.) ? 256. : 128.));\n  if (max (fragCoord.x, fragCoord.y) >= gSize) discard;\n  iFrag = floor (fragCoord);\n  doInit = (iFrame <= 5);\n  doPre = false;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (doInit) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    bgnClust = 0.;\n    doPre = true;\n    nStep = 0.;\n    wgSel = -1;\n    az = 0.001;\n    el = 0.;\n  } else {\n    stDat = Loadv4 (vec2 (0., 0.));\n    nStep = stDat.z;\n    stDat = Loadv4 (vec2 (1., 0.));\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (vec2 (2., 0.));\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (vec2 (3., 0.));\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (vec2 (4., 0.));\n    idPre = stDat.z;\n    bgnClust = stDat.w;\n    stDat = Loadv4 (vec2 (5., 0.));\n    wgSel = int (stDat.z);\n    stDat = Loadv4 (vec2 (6., 0.));\n    el = stDat.z;\n    az = stDat.w;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.40 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.46 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.40 * asp, -0.4, 0.013 * asp, 0.);\n    wgBx[3] = vec4 (0.46 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    for (int k = 2; k < 4; k ++) {\n      if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) < wgBx[k].z) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n    az = 0.001;\n    el = 0.;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {   \n      az = 2. * pi * mPtr.x;\n      el = pi * mPtr.y;\n    }\n  } else {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    } else if (wgSel == 3 && mPtrP.z <= 0.) {\n      bgnClust = 1. - bgnClust;\n    }\n    doInit = true;\n  }\n  if (gSize == 128. && nStep >= 2000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (! doInit && gSize != Loadv4 (vec2 (0., 0.)).w) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    c = Init (iFrag);\n  } else {\n    ++ nStep;\n    c = Step (iFrag);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if (iFrag.y == 0.) {\n    if      (iFrag.x == 0.) stDat.zw = vec2 (nStep, gSize);\n    else if (iFrag.x == 1.) stDat.zw = mPtr.xy;\n    else if (iFrag.x == 2.) stDat.zw = vec2 (mPtr.z, itRand);\n    else if (iFrag.x == 3.) stDat.zw = slVal;\n    else if (iFrag.x == 4.) stDat.zw = vec2 (idPre, bgnClust);\n    else if (iFrag.x == 5.) stDat.zw = vec2 (float (wgSel), 0.);\n    else if (iFrag.x == 6.) stDat.zw = vec2 (el, az);\n  }\n  Savev4 (iFrag, stDat, fragColor, fragCoord);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Gray-Scott Explorer v4\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashfv2 (vec2 p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT, bgnClust;\nconst float pi = 3.14159;\n\nvec2 Step (vec2 sv)\n{\n  vec4 dv;\n  vec2 c, del2c;\n  c = Loadv4 (sv).xy;\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (vec2 (dv.x, sv.y)).xy + Loadv4 (vec2 (dv.y, sv.y)).xy +\n     Loadv4 (vec2 (sv.x, dv.z)).xy + Loadv4 (vec2 (sv.x, dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (vec2 sv)\n{\n  vec2 c;\n  float s, iSize;\n  if (bgnClust == 0.) {\n    s = step (0.1, Hashfv2 (mod (16. * floor (sv / 16.) + itRand + 10.1, 2. * pi)));\n    c = vec2 (s, 1. - s);\n  } else {\n    iSize = (gSize > 128.) ? 10. : 5.;\n    if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashfv2 (mod (17. * sv + itRand + 10.1, 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n    } else c = vec2 (1., 0.);\n  }\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  const int nPre = 7;\n  vec4 wgBx[4], stDat, mPtr, mPtrP;\n  vec2 presetKF[nPre], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, az, el, vW, nStep, idPre;\n  int wgSel, wgReg, kSel;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y >= 1024.) ? 1024. : ((canvas.y >= 512.) ? 512. : ((canvas.y >= 256.) ? 256. : 128.));\n  if (max (fragCoord.x, fragCoord.y) >= gSize) discard;\n  iFrag = floor (fragCoord);\n  doInit = (iFrame <= 5);\n  doPre = false;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (doInit) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    bgnClust = 0.;\n    doPre = true;\n    nStep = 0.;\n    wgSel = -1;\n    az = 0.001;\n    el = 0.;\n  } else {\n    stDat = Loadv4 (vec2 (0., 0.));\n    nStep = stDat.z;\n    stDat = Loadv4 (vec2 (1., 0.));\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (vec2 (2., 0.));\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (vec2 (3., 0.));\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (vec2 (4., 0.));\n    idPre = stDat.z;\n    bgnClust = stDat.w;\n    stDat = Loadv4 (vec2 (5., 0.));\n    wgSel = int (stDat.z);\n    stDat = Loadv4 (vec2 (6., 0.));\n    el = stDat.z;\n    az = stDat.w;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.40 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.46 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.40 * asp, -0.4, 0.013 * asp, 0.);\n    wgBx[3] = vec4 (0.46 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    for (int k = 2; k < 4; k ++) {\n      if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) < wgBx[k].z) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n    az = 0.001;\n    el = 0.;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {   \n      az = 2. * pi * mPtr.x;\n      el = pi * mPtr.y;\n    }\n  } else {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    } else if (wgSel == 3 && mPtrP.z <= 0.) {\n      bgnClust = 1. - bgnClust;\n    }\n    doInit = true;\n  }\n  if (gSize == 128. && nStep >= 2000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (! doInit && gSize != Loadv4 (vec2 (0., 0.)).w) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    c = Init (iFrag);\n  } else {\n    ++ nStep;\n    c = Step (iFrag);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if (iFrag.y == 0.) {\n    if      (iFrag.x == 0.) stDat.zw = vec2 (nStep, gSize);\n    else if (iFrag.x == 1.) stDat.zw = mPtr.xy;\n    else if (iFrag.x == 2.) stDat.zw = vec2 (mPtr.z, itRand);\n    else if (iFrag.x == 3.) stDat.zw = slVal;\n    else if (iFrag.x == 4.) stDat.zw = vec2 (idPre, bgnClust);\n    else if (iFrag.x == 5.) stDat.zw = vec2 (float (wgSel), 0.);\n    else if (iFrag.x == 6.) stDat.zw = vec2 (el, az);\n  }\n  Savev4 (iFrag, stDat, fragColor, fragCoord);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Gray-Scott Explorer v4\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashfv2 (vec2 p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT, bgnClust;\nconst float pi = 3.14159;\n\nvec2 Step (vec2 sv)\n{\n  vec4 dv;\n  vec2 c, del2c;\n  c = Loadv4 (sv).xy;\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (vec2 (dv.x, sv.y)).xy + Loadv4 (vec2 (dv.y, sv.y)).xy +\n     Loadv4 (vec2 (sv.x, dv.z)).xy + Loadv4 (vec2 (sv.x, dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (vec2 sv)\n{\n  vec2 c;\n  float s, iSize;\n  if (bgnClust == 0.) {\n    s = step (0.1, Hashfv2 (mod (16. * floor (sv / 16.) + itRand + 10.1, 2. * pi)));\n    c = vec2 (s, 1. - s);\n  } else {\n    iSize = (gSize > 128.) ? 10. : 5.;\n    if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashfv2 (mod (17. * sv + itRand + 10.1, 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n    } else c = vec2 (1., 0.);\n  }\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  const int nPre = 7;\n  vec4 wgBx[4], stDat, mPtr, mPtrP;\n  vec2 presetKF[nPre], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, az, el, vW, nStep, idPre;\n  int wgSel, wgReg, kSel;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y >= 1024.) ? 1024. : ((canvas.y >= 512.) ? 512. : ((canvas.y >= 256.) ? 256. : 128.));\n  if (max (fragCoord.x, fragCoord.y) >= gSize) discard;\n  iFrag = floor (fragCoord);\n  doInit = (iFrame <= 5);\n  doPre = false;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (doInit) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    bgnClust = 0.;\n    doPre = true;\n    nStep = 0.;\n    wgSel = -1;\n    az = 0.001;\n    el = 0.;\n  } else {\n    stDat = Loadv4 (vec2 (0., 0.));\n    nStep = stDat.z;\n    stDat = Loadv4 (vec2 (1., 0.));\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (vec2 (2., 0.));\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (vec2 (3., 0.));\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (vec2 (4., 0.));\n    idPre = stDat.z;\n    bgnClust = stDat.w;\n    stDat = Loadv4 (vec2 (5., 0.));\n    wgSel = int (stDat.z);\n    stDat = Loadv4 (vec2 (6., 0.));\n    el = stDat.z;\n    az = stDat.w;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.40 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.46 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.40 * asp, -0.4, 0.013 * asp, 0.);\n    wgBx[3] = vec4 (0.46 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    for (int k = 2; k < 4; k ++) {\n      if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) < wgBx[k].z) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n    az = 0.001;\n    el = 0.;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {   \n      az = 2. * pi * mPtr.x;\n      el = pi * mPtr.y;\n    }\n  } else {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    } else if (wgSel == 3 && mPtrP.z <= 0.) {\n      bgnClust = 1. - bgnClust;\n    }\n    doInit = true;\n  }\n  if (gSize == 128. && nStep >= 2000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (! doInit && gSize != Loadv4 (vec2 (0., 0.)).w) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    c = Init (iFrag);\n  } else {\n    ++ nStep;\n    c = Step (iFrag);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if (iFrag.y == 0.) {\n    if      (iFrag.x == 0.) stDat.zw = vec2 (nStep, gSize);\n    else if (iFrag.x == 1.) stDat.zw = mPtr.xy;\n    else if (iFrag.x == 2.) stDat.zw = vec2 (mPtr.z, itRand);\n    else if (iFrag.x == 3.) stDat.zw = slVal;\n    else if (iFrag.x == 4.) stDat.zw = vec2 (idPre, bgnClust);\n    else if (iFrag.x == 5.) stDat.zw = vec2 (float (wgSel), 0.);\n    else if (iFrag.x == 6.) stDat.zw = vec2 (el, az);\n  }\n  Savev4 (iFrag, stDat, fragColor, fragCoord);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}