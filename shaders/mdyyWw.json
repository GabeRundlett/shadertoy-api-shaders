{
    "Shader": {
        "info": {
            "date": "1696183510",
            "description": "playing with chatgpt",
            "flags": 0,
            "hasliked": 0,
            "id": "mdyyWw",
            "likes": 0,
            "name": "bubble-test",
            "published": 3,
            "tags": [
                "bubble"
            ],
            "usePreview": 0,
            "username": "WIzODE",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "vec4 iridescent(in vec3 normal, in vec2 uv, in float alpha) {\n    // Convert to polar coordinates\n    float r = length(uv);\n    float theta = atan(uv.y * iTime, uv.x * iTime);\n\n    float factor = 20.0;\n\n    // Apply a twist\n    theta += factor / 4.0 * normal.x * r;\n\n    // Convert back to Cartesian coordinates\n    vec2 twistedUV = r * vec2(cos(theta), sin(theta));\n\n    \n    // Swirly pattern based on twisted UV\n    vec3 swirl = vec3(\n        sin(factor * twistedUV.x + 3.0 * sin(1.23 * iTime) ),\n        sin(factor * twistedUV.y + 3.0 * sin(1.59 * iTime)),\n        sin(factor * twistedUV.x + factor * twistedUV.y + 3.0 * sin(1.17 * iTime))\n    );\n\n    // Base iridescent color\n    float thickness = 500.0 + 100.0 * sin(iTime);\n    float R = abs(thickness - 400.0) / 400.0;\n    float G = abs(thickness - 500.0) / 500.0;\n    float B = abs(thickness - 600.0) / 600.0;\n    vec3 baseColor = vec3(R, G, B);\n\n    // Blend swirly pattern with base color\n    vec3 color = mix(baseColor, swirl, 0.8);\n\n    return vec4(color, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Camera parameters\n    vec3 camPos = vec3(0.0, 0.0, 5.0);\n    vec3 camTarget = vec3(0.0, 0.0, 0.0);\n    vec3 camDir = normalize(camTarget - camPos);\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    vec3 camRight = cross(camDir, camUp);\n\n    // Construct a ray from the camera through the pixel\n    vec3 rayDir = normalize(camDir + uv.x * camRight + uv.y * camUp);\n\n    // Bubble parameters\n    vec3 bubbleCenter = vec3(sin(1.7 * iTime), sin(1.13 * iTime), sin(1.11 * iTime));\n    float radius = 0.55;\n\n    // Calculate the ray-sphere intersection\n    vec3 oc = camPos - bubbleCenter;\n    float a = dot(rayDir, rayDir);\n    float b = 2.0 * dot(oc, rayDir);\n    float c = dot(oc, oc) - (radius * radius);\n    float discriminant = b*b - 4.0*a*c;\n\n    vec4 bgColor = texture(iChannel0, uv);\n\n    if (discriminant > 0.0) {\n        // If the ray intersects the sphere, calculate the distance along the ray to the intersection\n        float t1 = (-b - sqrt(discriminant)) / (2.0 * a);\n        float t2 = (-b + sqrt(discriminant)) / (2.0 * a);\n        float t = min(t1, t2);\n\n        // Calculate the intersection point\n        vec3 intersection = camPos + t * rayDir;\n\n        // Compute the normal at the intersection\n        vec3 normal = normalize(intersection - bubbleCenter);\n\n        // Compute the distance from the camera to the intersection\n        float dist = length(intersection - camPos);\n\n        // Use the distance and normal to compute the iridescent color\n        fragColor = mix(iridescent(normal, uv, 0.2),bgColor,0.8);\n    } else {\n        fragColor = bgColor;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}