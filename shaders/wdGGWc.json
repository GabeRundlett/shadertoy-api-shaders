{
    "Shader": {
        "info": {
            "date": "1571075917",
            "description": "I wanted to try functions Leon use sometime to create theses rotating shapes. Love u <3",
            "flags": 0,
            "hasliked": 0,
            "id": "wdGGWc",
            "likes": 5,
            "name": "Shadertober 14 Overgrown",
            "published": 3,
            "tags": [
                "raymarching",
                "repeat",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 444
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 14 Overgrown\n// Poulet vert 14-10-2019\n// Thanks to iq, Leon\n\n#define VOLUME 0.001\n#define PI 3.14159\n#define MAXSTEP 64\n#define sdist(p,r) (length(p)-r)\n#define TAU (2.*PI)\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat uSDF(float s1, float s2) { return min(s1, s2);}\n\nfloat sSDF( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat sdBox( vec3 p, float s )\n{\n  vec3 q = abs(p) - vec3(s);\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 opRep(vec3 p, vec3 c)\n{\n     return mod(p+0.5*c,c)-0.5*c;\n}\n\nfloat opU(float d1, float d2)\n{\n    return min(d1, d2);\n}\n\nvec2 opU2( vec2 d1, vec2 d2 )\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\n// leon ftw\nfloat amod (vec2 p, float count) {\n    float an = TAU/count;\n    float a = atan(p.y,p.x)+an/2.;\n    float c = floor(a/an);\n    a = mod(abs(a),an)-an/2.;\n    p = vec2(cos(a),sin(a))*length(p);\n    return c;\n}\n\nfloat polarModulo (vec3 p) {\n    amod(p.xz, 5.);\n    p.x -= 1.;\n    return sdist(p, .5);\n}\n\nfloat tubeTwist (vec3 p, float s, float o) {\n    p.xz *= rot(p.y*2.0-iTime-o);\n    amod(p.xz, 8.);\n    p.x -= .5;\n    return sdist(p.xz, s);\n}\n\n// Scene setup\n\nvec2 map(vec3 pos)\n{\n\n    vec2 t = vec2(pos.y, 0.0);\n    \n    float anim = (.25 + abs(sin(iTime))*.25) * (1.0-pos.y*.2);\n    \n    vec3 sp = pos + vec3(0.0, 0.0, iTime*5.0);\n    sp = opRep(sp, vec3(4.0, 0.0, 4.0));\n    float grow = tubeTwist(sp, anim, 0.0);\n    grow = opU(grow, tubeTwist(sp, anim, 3.0));\n    \n    vec2 g = vec2(grow, 1.0);\n    \n    vec3 shp = pos + vec3(-2.0, -1.0, -4.0+sin(iTime)*2.0);\n    shp.xy *= rot(iTime);\n    float sh = sdSphere(shp, .5);\n    float ch = sdBox(shp, .25);\n    \n    vec2 s = vec2(mix(sh, ch, (1.0+sin(iTime*5.0))*.5), 2.0);\n    \n    t = opU2(t, g);\n    t = opU2(t, s);\n    \n    return t;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<64 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(float(i)/64., ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t.x);\n    \n    vec3 col = vec3(0.0);\n    \n    if(t.x == -1.0)\n    {\n        \n        col = vec3(.0); \n        \n    }\n    else\n    {\n        float depth = 1.0 - t.x;\n        \n        if(t.y == 0.0)\n        {\n            col = vec3(depth*.25);\n        }\n        else if(t.y == 1.0)\n        {\n            col = vec3(0.0, 1.0, 1.0) * depth*.5;\n        }\n        else if(t.y == 2.0)\n        {\n            col = vec3(1.0, 0.0, 0.0) + depth * .8;\n        }\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(sin(iTime), -1.0, cos(iTime)), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 1.0 * forward);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float forwardTime = 0.0;// iTime*5.0;\n    float offsetTime = 2.0+sin(iTime);\n    float up = 1.0+sin(iTime*.3)*.9;\n    \n    vec3 cp = vec3(offsetTime, up, forwardTime-1.0);\n    vec3 ct = vec3(offsetTime, up, forwardTime);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = Render(cp, vd, screenUV);\n    \n    // compo\n    col.g -= screenUV.y * .2;\n    col.r += (1.0-length(uv)*2.0)-.5;\n    \n    \n    col += random(uv)*.1* length(uv) * 2.0;\n    \n    col = clamp(col, 0.0, 1.0);\n    col *= 1.0-length(uv)*.75;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}