{
    "Shader": {
        "info": {
            "date": "1695138580",
            "description": "First submission",
            "flags": 0,
            "hasliked": 0,
            "id": "csdyW7",
            "likes": 22,
            "name": "Funky Tris",
            "published": 3,
            "tags": [
                "triangle",
                "glow",
                "loop"
            ],
            "usePreview": 0,
            "username": "Lewie4",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "#define count 24.\n\nvec2 Rot(vec2 uv, float amount)\n{\n    float rot = iTime * amount;\n    return vec2(uv.y*sin(rot)+uv.x*cos(rot), uv.y*cos(rot)-uv.x*sin(rot));\n}\n\n\nfloat TriSDF(vec2 uv, float r)\n{\n    const float k = sqrt(3.);\n    uv.x = abs(uv.x) - r;\n    uv.y = uv.y + r/k;\n    if(uv.x+k*uv.y>0.) uv=vec2(uv.x-k*uv.y,-k*uv.x-uv.y)/2.;\n    uv.x -= clamp(uv.x,-2.*r, 0.);\n    return -length(uv)*sign(uv.y);\n}\n\nvoid mainImage(out vec4 O, in vec2 u)\n{\n    u = (u+u-iResolution.xy)/iResolution.y;\n    O -= O;\n    \n    for(float i = 0.; i < count; i++)\n    {\n        vec2 ruv = Rot(u,i*0.2);\n        float scale = 3.5*fract(iTime/3.5 + i*1./count);//0.5;\n        float tri = abs(TriSDF(ruv, 3.5*fract((i*1./count)+iTime*.2)));\n        tri = smoothstep(0.01,0.,tri)+smoothstep(0.2,0.,tri)*.15;\n        vec3 col = vec3(cos(i+iTime+vec3(0.,1.,2.))+1.2);\n        O += vec4(tri * col, 0.);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}