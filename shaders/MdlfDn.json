{
    "Shader": {
        "info": {
            "date": "1495806776",
            "description": "Simple Sobel Edge",
            "flags": 2,
            "hasliked": 0,
            "id": "MdlfDn",
            "likes": 9,
            "name": "All Directions Sobel Edge",
            "published": 3,
            "tags": [
                "sobel",
                "kernel"
            ],
            "usePreview": 0,
            "username": "nguyenhuy3588",
            "viewed": 953
        },
        "renderpass": [
            {
                "code": "/*\nTai sao lam hieu ung\nQuy trinh\nMinh hoa hinh anh dau vao va ket qua\nDi qua tung buoc quy trinh:\n\ttrinh bay thuat toan\n\ttrinh bay ket qua tuong ung\nTong ket\n*/\n// #define NORTH_EAST\n// #define EAST\n#define SOUTH_EAST\n// #define SOUTH\n// #define SOUTH_WEST\n// #define WEST\n// #define NORTH_WEST\n// #define NORTH\n\nfloat[] kHorDown = float[9](-1.0, -2.0, -1.0,\n                        0.0, 0.0, 0.0,\n                        1.0, 2.0, 1.0);\n\nfloat[] kHorUp = float[9](1.0, 2.0, 1.0,\n                        0.0, 0.0, 0.0,\n                        -1.0, -2.0, -1.0);\n\nfloat[] kVerLeft = float[9](1.0, 0.0, -1.0,\n                        2.0, 0.0, -2.0,\n                        1.0, 0.0, -1.0);\n\nfloat[] kVerRight = float[9](-1.0, 0.0, 1.0,\n                        -2.0, 0.0, 2.0,\n                        -1.0, 0.0, 1.0);\n\nfloat threshold = 0.05;\n\n\nfloat getGrayScale(vec3 color){\n\treturn color.r * 0.2 + color.g * 0.75 + color.b * 0.05;\n}\n\nfloat kernelProcess(float kernel[9], vec2 uv){\n\tvec3 result = vec3(0.0);\n    for(int i = 0; i < 3; i++){\n        for(int j = 0; j < 3; j++){\n        \tvec2 realUv = (uv + vec2(i - 1, j - 1)) / iResolution.xy;\n           \tresult += texture(iChannel0, realUv).rgb * kernel[i * 3 + j];\n        }\n    }\n    return getGrayScale(result);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    \n    float kernel[9] = kHorUp;\n\tfloat horEdge, verEdge;\n    \n    #if defined(NORTH_EAST)\n    \thorEdge = kernelProcess(kHorUp, uv);\n    \tverEdge = kernelProcess(kVerRight, uv);\n    #elif defined(EAST)\n    \thorEdge = 0.0;\n    \tverEdge = kernelProcess(kVerRight, uv);\n\t#elif defined(SOUTH_EAST)\n    \thorEdge = kernelProcess(kHorDown, uv);\n    \tverEdge = kernelProcess(kVerRight, uv);\n\t#elif defined(SOUTH)\n    \thorEdge = kernelProcess(kHorDown, uv);\n    \tverEdge = 0.0;\n\t#elif defined(SOUTH_WEST)\n    \thorEdge = kernelProcess(kHorDown, uv);\n    \tverEdge = kernelProcess(kVerLeft, uv);\n\t#elif defined(WEST)\n    \thorEdge = 0.0;\n    \tverEdge = kernelProcess(kVerLeft, uv);\n\t#elif defined(NORTH_WEST)\n    \thorEdge = kernelProcess(kHorUp, uv);\n    \tverEdge = kernelProcess(kVerLeft, uv);\n\t#else\n    \thorEdge = kernelProcess(kHorUp, uv);\n    \tverEdge = 0.0;\n    #endif\n    \n    float ave = length(vec2(horEdge, verEdge));\n    \n    if(ave > threshold){\n        fragColor = vec4(vec3(ave), 1.0);\n    }\n    else{\n        fragColor = vec4(vec3(0.0), 1.0);\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}