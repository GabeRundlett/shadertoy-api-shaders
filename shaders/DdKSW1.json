{
    "Shader": {
        "info": {
            "date": "1681396835",
            "description": "water",
            "flags": 32,
            "hasliked": 0,
            "id": "DdKSW1",
            "likes": 5,
            "name": "new_droply",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 0,
            "username": "darkwolf007",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "vec4 getv(vec2 p) {\n\treturn texelFetch(iChannel0, ivec2(p), 0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy ;\n    \n    \n  \tvec4 a = texture(iChannel0, uv);\n    vec3 dp = vec3(0.9, 0.9, 0)/iResolution.xyx;\n    vec4 b = texture(iChannel0, uv+dp.xz);\n    vec4 c = texture(iChannel0, uv+dp.zy);\n    float dx = a.x-b.x;\n    float dy = a.x-c.x;\n    vec3 normal = normalize(vec3(vec2(dx, dy), 1.0));\n    vec3 iray = normalize(vec3(fragCoord.xy-0.5*iResolution.xy, 1.2*iResolution.y));\n    vec3 d1 = refract(iray, normal, 1.3);\n   \n                      \n    vec4 im = texture(iChannel1, d1);\n    vec3 it = im.xyz;\n    float l = length(it);\n    it *= 1.5;\n    im.xyz = it;\n    \n\n   \tvec4 v = getv(fragCoord * 1.);\n    vec4 color = vec4(0.);\n    if (v.x < 0.01) {\n    \tcolor = mix(vec4(0., 0., 0., 1.), vec4(1., 0., 0., 1.), smoothstep(0.0, 0.03, v.x));\n    } else if (v.x < 0.1) {\n    \tcolor = mix(vec4(1., 0., 0., 1.), vec4(0., 1., 0., 1.), smoothstep(0.01, 0.1, v.x));\n    } else {\n        color = mix(vec4(0., 1., 0., 1.), vec4(0., 0., 1., 1.), smoothstep(0.1, 1.0, v.x));\n    }\n    \n    \n    fragColor = im;// +color;\n    //fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float BIG_DROP_RATE = 0.01;\nconst float BIG_DROP_SIZE = 10.;\nconst float BIG_DROP_DEPTH = 0.2;\n\nconst float SMALL_DROP_RATE = 0.001;\nconst float SMALL_DROP_SIZE = 0.00003;\n\nconst int R = 4; // watter attraction radius\n\n\n//------------------------------\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n#define hv(p) hash12((p * .152 + iTime * 1500. + 50.0))\n//----------------------------\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//BUFFER B - calculate amount of water moving between neighbour cells\n\nvec4 getv(vec2 p) {\n\treturn texelFetch(iChannel0, ivec2(p), 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame  == 0) {\n    \tfragColor = vec4(0.);\n    } else {\n        vec2 p = fragCoord;\n        float vp = getv(p).x;\n        vec4 dv = vec4(\n            getv(p + vec2(-1., 0.)).x,\n            getv(p + vec2(0., -1.)).x,\n            getv(p + vec2(1., 0.)).x,\n            getv(p + vec2(0., 1.)).x\n        );\n\n        \n        // atract to water in close area\n        vec2 fd = vec2(0.);\n        float size = vp;\n        for (int dy=-R; dy<=R; dy++){\n            for (int dx=-R; dx<=R; dx++) {\n                if (dx == 0 && dy == 0 || (dx * dx + dy * dy > R * R)) {\n                    continue;\n                }\n\n                float a = getv(p+vec2(dx, dy)).x;\n                size += a;\n                vec2 dir = vec2(dx, dy);\n                vec2 ndir = normalize(dir);\n                vec2 c= pow(a, 0.4)*0.25 * ndir / pow(length(dir),0.9);\n                if (a > 0.06) {\n                    c *= 2. + a*1.;\n                }\n                fd += c;\n            }\n        }\n        // add gravity with tweaks to make smaller droplets stick\n        vec2 down = vec2(0, -1.0)*2.0*vp;\n        if (vp > 0.06) {\n            down *= 1.+1.*pow(vp, 1.)+0.01*size;\n        } else {\n            down *= 0.01;\n        }\n        fd += down;\n\n        vec4 dif = max(vec4(vp)-dv, 0.); // spread to neighbours that have less water\n        if (p.x <= 1.) {\n            dv.x = 0.;\n        }\n        if (p.y <= 1.) {\n           dv.y = 0.;\n        }\n        dif *= 0.16;\n        if (vp < 0.01) {\n             dif *= 0.5;\n        }\n\n        vec4 fa = vec4(abs(min(fd.xy, 0.)), max(fd.xy, 0.)); //add force from attraction and gravity\n        dif += fa * 0.007;\n        dif *= 0.5;\n\n        // try to avoid going in to negative values or exceeding maximum\n        float sm = dot(dif, vec4(1.));\n        float red = sm == 0. ? 1.0 : min(vp, sm)/sm;\n        dif *= red;\n        dif = min(dif, vec4(1.)-dv);\n        fragColor = dif;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// buffer D - store and update amount of water in each cell\n\nvec4 getv(vec2 p) {\n\treturn texelFetch(iChannel0, ivec2(p), 0);\n}\n\nvec4 getm(vec2 p) {\n\treturn texelFetch(iChannel1, ivec2(p), 0);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) {\n    \tfragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    } else {\n        vec2 p = fragCoord;\n    \tvec4 v = getv(p);\n        if (length(p - iMouse.xy) < 12. && iMouse.z > 0.) {\n        \tv.x += 0.5;\n        }\n        \n        float sh = hv(p);\n        v.x += SMALL_DROP_SIZE * step(SMALL_DROP_RATE, sh) * sh;  // add little bit of water everywhere all the time\n        \n        if (hv(vec2(1, 0)) < fract(iTime) * BIG_DROP_RATE) { // once in a while add big drop somewhere in the picture\n        \tvec2 dp = vec2(hv(vec2(iTime, 0)), hv(vec2(0, 1)));\n\t\t\tdp *= iResolution.xy;\n            float size = hv(vec2(2, 0));\n\t\t\tif (distance(dp, p) < BIG_DROP_SIZE * mix(0.5, 1., size)) {\n                v.x += BIG_DROP_DEPTH;\n\t\t\t}\n        }\n        \n        vec4 moveOut = getm(p);\n        vec4 moveIn = vec4(\n        \tgetm(p + vec2(-1., 0.)).z,\n            getm(p + vec2(0., -1.)).w,\n            getm(p + vec2(1., 0.)).x,\n            getm(p + vec2(0., 1.)).y   \n        );\n        \n        v.x += 1.0*dot(vec4(1.), moveIn-moveOut);\n        \n        v = clamp(v, 0.0, 1.0);\n        if (p.y <= 1. || p.x < 1. || p.x > iResolution.x - 2. || p.y > iResolution.y - 2.) {\n            v.x = 0.;\n        }\n        fragColor = v;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}