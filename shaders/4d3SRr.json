{
    "Shader": {
        "info": {
            "date": "1457271679",
            "description": "Hey this is my first shader here and one of my first shaders ever.\n\nI've tried to implement a height to normalmap function and I've created some kind waterlike distortion effect. \nYou can uncomment the debug define to see the computed normalmap.",
            "flags": 0,
            "hasliked": 0,
            "id": "4d3SRr",
            "likes": 40,
            "name": "Simple distortion shader",
            "published": 3,
            "tags": [
                "water",
                "normal",
                "disortion",
                "heigh"
            ],
            "usePreview": 0,
            "username": "NoxWings",
            "viewed": 3858
        },
        "renderpass": [
            {
                "code": "//#define DEBUG\n\n#define time \t\t\t\t0.06 * iTime\n#define normalStrength\t\t5.0\n#define normalChannel\t\tiChannel1\n#define normalSampling\t\tiChannelResolution[1]\n#define backgroundChannel\tiChannel0\n#define distortionStrength\t.12\n#define waterTint\t\t\tvec4(.8, .8, 1., 1.)\n\n\nvec4 heightToNormal(sampler2D height, vec3 samplingResolution, vec2 uv, float normalMultiplier) {\n\n    vec2 s = 1.0/samplingResolution.xy;\n    \n    float p = texture(height, uv).x;\n    float h1 = texture(height, uv + s * vec2(1,0)).x;\n    float v1 = texture(height, uv + s * vec2(0,1)).x;\n       \n   \tvec2 xy = (p - vec2(h1, v1)) * normalMultiplier;\n   \n    return vec4(xy + .5, 1., 1.);\n}\nvec4 normalMap(vec2 uv) { return heightToNormal(normalChannel, normalSampling, uv, normalStrength); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 normal = normalMap(uv + time);\n    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);\n    vec4 background = texture(backgroundChannel, uv + time/6. + displacement.xy);\n    \n    #ifdef DEBUG \n    \tfragColor = normal;\n    #else\n    \tfragColor = background * waterTint;\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}