{
    "Shader": {
        "info": {
            "date": "1490320392",
            "description": "GLSL port of \"Bitshift Variations in C Minor\" by Robert Miles\n\nOriginal:\nhttps://soundcloud.com/robertskmiles/bitshift-variations-in-c-minor",
            "flags": 8,
            "hasliked": 0,
            "id": "4dlyWl",
            "likes": 23,
            "name": "Bitshift Variations in C Port",
            "published": 3,
            "tags": [
                "sound",
                "chiptune",
                "bitshift"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 1231
        },
        "renderpass": [
            {
                "code": "/*\nBitshift Variations in C Minor\nPublished in 2013 by Robert Miles at soundcloud.com/robertskmiles\nRewritten to GLSL by ttg in 2017.\n*/\n\n// \"BY}6YB6%\", \"Qj}6jQ6%\"\nconst int seq1[] = int[](66,89,125,54,89,66,54,37);\nconst int seq2[] = int[](81,106,125,54,106,81,54,37);\n\nint g(int i,int x,int t,int o){\n    return((3&x&(i*(((3&i>>16)!=0?seq1[t%8]:seq2[t%8])+51)>>o))<<4);\n}\n                     \nint s(int i){\n\tint n, s;\n    return(\n        g(i,1,n=i>>14,12) +\n        g(i,s=i>>17,n^i>>13,10) +\n        g(i,s/3,n+((i>>11)%3),10) +\n        g(i,s/5,8+n-((i>>10)%3),9)\n\t);\n}\n\n\n\n/* //////////////////////////\nSimple audio resampling\nCopyright 2017 Theron Tarigo\n*/\n\nvec2 mainSound(float time )\n{\n    // Simple resampling algorithm\n    int samprate = 8000;\n    int i = int(fract(time)*float(samprate))+int(floor(time))*samprate;\n    float rem = fract(fract(time)*float(samprate));\n    uint s1 = uint(s(i))%256u;\n    uint s2 = uint(s(i+1))%256u;\n    float f1 = float(s1)/255.;\n    float f2 = float(s2)/255.;\n    float f = f1*(0.5+0.5*cos(3.141592653589793*rem)) +\n              f2*(0.5-0.5*cos(3.141592653589793*rem)) ;\n    return vec2( f );\n}\n\n/*\nShadertoy Oscilloscope\nCopyright 2017 Theron Tarigo\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int i = int(iTime*8000.);\n    uint s1 = uint(s(i+int(fragCoord.y)*int(iResolution.x)+int(fragCoord.x)))%256u;\n    fragColor.rgb = vec3(float(s1)/255.);\n    \n    vec2 uv = 2.*fragCoord/iResolution.xy-1.;\n    // crude oscilloscope triggering\n    float off = iTime;\n    float tgdt = 1./4000.;\n    bool low = false;\n    for (int c=0; c<40; c++) {\n        if (!low!=(float(s(int(8000.*off))%256)>0.01)) {\n            if (low) break;\n            low = true;\n        }\n        off+=tgdt;\n    }\n    float v = mainSound(uv.x/100.+off).x;\n    fragColor.g += max(1.-80.*abs(uv.y-v), 0.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nBitshift Variations in C Minor\nCopyright 2013 Robert Miles <soundcloud.com/robertskmiles>\n*/\n\n// \"BY}6YB6%\", \"Qj}6jQ6%\"\nconst int seq1[] = int[](66,89,125,54,89,66,54,37);\nconst int seq2[] = int[](81,106,125,54,106,81,54,37);\n\nint g(int i,int x,int t,int o){\n    return((3&x&(i*(((3&i>>16)!=0?seq1[t%8]:seq2[t%8])+51)>>o))<<4);\n}\n                     \nint s(int i){\n\tint n, s;\n    return(\n        g(i,1,n=i>>14,12) +\n        g(i,s=i>>17,n^i>>13,10) +\n        g(i,s/3,n+((i>>11)%3),10) +\n        g(i,s/5,8+n-((i>>10)%3),9)\n\t);\n}\n\n\n\n/* //////////////////////////\nSimple audio resampling\nCopyright 2017 Theron Tarigo\n*/\n\nvec2 mainSound( in int samp, float time )\n{\n    // Simple resampling algorithm\n    int samprate = 8000;\n    int i = int(fract(time)*float(samprate))+int(floor(time))*samprate;\n    float rem = fract(fract(time)*float(samprate));\n    uint s1 = uint(s(i))%256u;\n    uint s2 = uint(s(i+1))%256u;\n    float f1 = float(s1)/255.;\n    float f2 = float(s2)/255.;\n    float f = f1*(0.5+0.5*cos(3.141592653589793*rem)) +\n              f2*(0.5-0.5*cos(3.141592653589793*rem)) ;\n    return vec2( f );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}