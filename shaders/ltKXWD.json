{
    "Shader": {
        "info": {
            "date": "1484478225",
            "description": "applying https://www.shadertoy.com/view/XtG3WK\ntrack Van Damme (flesh parts), deform and glow it.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltKXWD",
            "likes": 4,
            "name": "tracking van damme - 2",
            "published": 3,
            "tags": [
                "tracking",
                "quadratic",
                "fitting",
                "moments",
                "covariant"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 871
        },
        "renderpass": [
            {
                "code": "// just an application of https://www.shadertoy.com/view/XtG3WK\n\n// --- tracking a grouped object using the moments in the image\n\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2  R = iResolution.xy,\n          T = texture(iChannel0,.5/R).zw*1024., // source stored resolution\n          H = R/T,\n          V = texture(iChannel1, 1.5/R).zw,    // average, M2_xy\n          M = texture(iChannel1, .5/R).zx/V.x, // barycenter of shape\n         M2 = texture(iChannel1, .5/R).wy/V.x,\n          S = sqrt(M2-M*M);                      // std-dev of shape\n\n    float r = V.y/V.x, z=1.;                     // M2_xy\n    if (r==r)                                    // do nothing if undefined moments\n    {\n\t  M2 = M2 - M*M; r = r - M.x*M.y;              // centered moments\n    //mat2 cov = mat2(M2.x, r, r, M2.y);           // covariant matrix\n      mat2 icov = mat2(M2.y, -r, -r, M2.x) / (M2.x*M2.y-r*r);  // inverse covariant matrix\n    \n      U /= T*min(H.x,H.y);                         // cf https://www.shadertoy.com/view/XlG3DW\n      U -= M/T;                                    // centered coordinates\n      z = dot(U, icov*U*T*T);                      // isodistance to center\n      z = .5+.5*smoothstep(0.,5.,z);               // zoom: x2 inside to x1 outside\n      U = z*U + M/T;\n    }\n    O = texture(iChannel0,U*T/R);              // fetch\n    O /= z;                                      // glow\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- source video\n\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    // store 1-1 pixels if enough room, or resample the video if small display\n    vec2 R = min( vec2(640,360), iResolution.xy ); //iChannelResolution[0].xy; \n    O = texture(iChannel0,U/R);\n    \n    if (U==vec2(.5)) O.zw = R/1024.;               // stores resolution in O(.5)\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- compute the moments of the character in the video (1er part)\n\n\n#define I(U) max(0., texture(iChannel0,U).r - texture(iChannel0,U).g )\n//#define I(U) texture(iChannel0,U).r / ( texture(iChannel0,U).g + 1e-3)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{   \n    vec2 R = iResolution.xy,\n      // T = vec2(640,360); //iChannelResolution[0].xy;  \n         T = texture(iChannel0,.5/iResolution.xy).zw*1024.; // source stored resolution\n    O -= O;\n\n    float x = U.x, y = U.y;\n\n    if (y==.5 && x <= T.x) // O(x,.5) =  partial (vertical) M1 and M2 moments for y\n        for (float y=.5; y<=360.; y++) {\n            O.xy += vec2(y,y*y)*I(vec2(x,y)/R);\n            if (y>T.y) break;\n        }\n\n\n    if (x==.5 && y <= T.y) // O (.5,y) = partial (horizontal) M1 and M2 moments for x\n        for (float x=.5; x<=640.; x++) {\n            O.zw += vec2(x,x*x)*I(vec2(x,y)/R);\n            if (x>T.x) break;\n        }\n\n\n    if (x==1.5 && y>1. && y <= T.y+1.) // O(1.5,y+1) = partial (horizontal) sum of values\n        for (float x=.5; x<=640.; x++) {\n            O.z += I(vec2(x,y-1.)/R);\n            if (x>T.x) break;\n        }\n\n            \n\tO /= T.yyxx;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- compute the moments of the character in the video (2nd part)\n\n#define I(U) texture(iChannel0, U)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{   \n    vec2 R = iResolution.xy,\n      // T = vec2(640,360); // iChannelResolution[0].xy;\n         T =  texture(iChannel1,.5/R).zw*1024.; // source stored resolution\n    float x = U.x, y = U.y;\n    O -= O;\n    \n    if (U==vec2(.5)) \n    {\n        for (float x=.5; x<=640.; x++) {   // M1 and M2 moments for y\n            O.xy += I(vec2(x,y)/R).xy;\n            if (x>T.x) break;\n        }\n        \n \n        for (float y=.5; y<=360.; y++) {    // M1 and M2 moments for x\n            O.zw += I(vec2(x,y)/R).zw;\n            if (y>T.y) break;\n        }\n\n        O /= T.xxyy;\n    }\n    \n    if (U==vec2(1.5)) \n    {\n        for (float y=.5; y<=360.; y++) {  \n            O.z +=   I(vec2(x,y+1.)/R).z;  // sum of values\n            O.w += y*I(vec2(x-1.,y)/R).z;  // M2_xy\n            if (y>T.y) break;\n        }\n\n        O /= T.xxyy;\n    } \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}