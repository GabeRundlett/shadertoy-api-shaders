{
    "Shader": {
        "info": {
            "date": "1537970057",
            "description": "Buffer A creates the points the render.\nImage uses smin to blend everything together.\n-> It's fully differentiable",
            "flags": 32,
            "hasliked": 0,
            "id": "4ldyWr",
            "likes": 9,
            "name": "Branchless Pointcloud Renderer",
            "published": 3,
            "tags": [
                "branchless"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 1195
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 ro = vec3(.0*cos(iTime), 1., -1.5);\n    vec3 rd = normalize(vec3(uv*2., 1.));\n\n    //rd = vec3(0,0,1);\n    //ro.xy += uv*2.;\n    \n    vec4 accum = vec4(vec3(0,0,.5), 1) * 5e-6; // multiplier is fog distance\n    for (int x=0 ; x<40 ; x++)\n    for (int y=0 ; y<10 ; y++)\n    {\n        // xyz: position, w: radius\n        vec4 point = texelFetch(iChannel0, ivec2(x, y), 0).xzyw;\n        \n        // xyz: color, w: sharpness\n        vec4 color = texelFetch(iChannel0, ivec2(x, 10+y), 0);\n        \n        point.xyz -= ro;\n        float d = length(point.xyz);\n        float a = dot(point.xyz, rd); // distance to disc plane\n        float r = length(rd*a - point.xyz) / point.w; // distance to disc center\n        float alpha = 1. / (1. + pow(r, 50. * (color.w+0.0000000001)));\n        //float alpha = 1. / (1. + pow(r, 50. * (color.w))); // WTF ?!? why is it black\n        float w = exp(-point.z * 5.) * alpha;\n        w /= point.z; // compensate higher density of points when further away\n        accum += vec4(color.xyz, 1) * w;\n        //accum = mix(accum, color, alpha*color.w);\n    }\n    \n   \tfragColor = accum/accum.w;\n    \n    if (less(fragCoord, vec2(100, 100))) // raw point view\n    \tfragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void world( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (less(fragCoord, vec2(10., 20.))) // grass\n    {\n        if (fragCoord.y >= 10.)\n        {\n            fragColor = vec4(.5,.9,.2,1.);\n            return;\n        }\n        vec2 uv = (fragCoord - vec2(0., 0.)) /vec2(10., 10.);\n        fragColor = vec4(uv*2.-1., 0., .11);\n        return;\n    }\n\n    if (less(fragCoord, vec2(20., 20.))) // trunk\n    {\n        if (fragCoord.y >= 10.)\n        {\n            fragColor = vec4(.4,.1,.0,1.);\n            return;\n        }\n        vec2 uv = (fragCoord - vec2(10., 0.)) / vec2(10., 10.);\n        float a = PI * 2. * uv.x;\n        float r = 0.1;\n        fragColor = vec4(cos(a)*r, sin(a)*r, uv.y, .15);\n        return;\n    }\n\n    if (less(fragCoord, vec2(30., 20.))) // treetop\n    {\n        if (fragCoord.y >= 10.)\n        {\n            fragColor = vec4(.2,.5,.1,1.);\n            return;\n        }\n        vec2 uv = (fragCoord - vec2(20., 0.)) / vec2(10., 10.);\n        float a = PI * 2. * uv.x;\n        float b = PI * (uv.y - .5);\n        uv = vec2(cos(a), sin(a))*.3;\n        fragColor = vec4(uv*cos(b)+.0, sin(b)*.5+.9, .2);\n        return;\n    }\n    \n    const vec3 hpos = vec3(.9, -.5, 0);\n    const float hrad = .5;\n    const float hlen = .7;\n    if (less(fragCoord, vec2(34., 20.))) // pillars\n    {\n        vec2 uv = (fragCoord - vec2(30., 0.)) / vec2(1., 10.);\n        if (fragCoord.y >= 10.)\n        {\n            fragColor = mix(vec4(1), vec4(1,0,0,1), sin(uv.y*12.)*.5+.5);\n            return;\n        }\n        fragColor = vec4(\n            hpos + vec3(0, uv.x*hrad-.5, uv.y * hlen),\n            .1\n        );\n        return;\n    }\n    \n    if (less(fragCoord, vec2(37., 20.))) // hoops\n    {\n        vec2 uv = (fragCoord - vec2(34., 0.)) / vec2(1., 10. / PI);\n        if (fragCoord.y >= 10.)\n        {\n            fragColor = mix(vec4(1), vec4(1,0,0,1), sin(uv.y*12.)*.5+.5);\n            return;\n        }\n        fragColor = vec4(\n            hpos + vec3(0, (uv.x + cos(uv.y)*.5 - .5)*hrad, hlen + sin(uv.y)*hrad),\n            .1\n        );\n        return;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    world(fragColor, fragCoord);\n    \n    if (fragCoord.y < 10.)\n    {\n        float a = iTime*.2;\n        float c = cos(a), s = sin(a);\n        mat2 R = mat2(c, s, -s, c);\n        fragColor.xy *= R;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.141592653589793\nbool less(vec2 a, vec2 b)\n{\n    return a.x<b.x && a.y<b.y;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}