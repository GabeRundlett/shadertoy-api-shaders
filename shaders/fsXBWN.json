{
    "Shader": {
        "info": {
            "date": "1666633837",
            "description": "Somewhere at the bottom of the ocean.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsXBWN",
            "likes": 4,
            "name": "Aquatic Theme",
            "published": 3,
            "tags": [
                "2d",
                "animation",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "lz",
            "viewed": 569
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define PI2 6.28318530718\n\n#define A_START 4\n#define A_N 11\n#define N_ANG 6.\n\n#define ANIM_T(_t, _e, _p) (smoothstep(_p - _e, _p, _t) - smoothstep(_p, _p + _e, _t))\n#define PULSE_T(_t, _e, _pa, _pb) (smoothstep(_pa - _e, _pa, _t) - smoothstep(_pb, _pb + _e, _t))\n\nconst float dists[10] = float[10](0.5, 0.65, 0.16, 1.0, -1.2, 0.4, 2.1, 0.3, -2.3, 0.9);\nconst vec3 cols[7] = vec3[7](vec3(0., 0.3, 0.7), vec3(0.0, 0.3, 0.96), vec3(0.5, .4, 0.2), vec3(0.4, 0.3, 0.04), vec3(0.2, .05, 0.), vec3(0.9, 0.6, 0.1), vec3(0.5, 0.21, 0.4));\nconst vec3 plasma[11] = vec3[11](vec3(0.050383,0.029803,0.527975),vec3(0.254627,0.013882,0.615419),vec3(0.417642,0.000564,0.65839),vec3(0.562738,0.051545,0.641509),vec3(0.69284,0.165141,0.564522),vec3(0.798216,0.280197,0.469538),vec3(0.881443,0.392529,0.383229),vec3(0.949217,0.517763,0.295662),vec3(0.98826,0.652325,0.211364),vec3(0.988648,0.809579,0.145357),vec3(0.940015,0.975158,0.131326));\nconst vec3 Blues[11] = vec3[11](vec3(0.9686274509803922,0.984313725490196,1.0),vec3(0.8901960784313725,0.9341176470588235,0.9749019607843137),vec3(0.8141176470588235,0.883921568627451,0.9498039215686275),vec3(0.7137254901960783,0.8321568627450979,0.9152941176470588),vec3(0.5796078431372549,0.7701960784313725,0.8737254901960784),vec3(0.4196078431372549,0.6823529411764706,0.8392156862745098),vec3(0.29098039215686267,0.5945098039215685,0.7890196078431372),vec3(0.18117647058823522,0.4949019607843136,0.7364705882352941),vec3(0.09019607843137256,0.39294117647058824,0.6705882352941177),vec3(0.03137254901960784,0.2917647058823529,0.5733333333333334),vec3(0.03137254901960784,0.18823529411764706,0.4196078431372549));\nconst vec3 bckColor = vec3(0.067, 0.67, 0.89);\n\nfloat hash2(in vec2 st) {\nreturn fract(sin(dot(st.xy,\nvec2(12.9898,78.233)))\n* 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\nvec2 i = floor(st);\nvec2 f = fract(st);\n\n// Four corners in 2D of a tile\nfloat a = hash2(i);\nfloat b = hash2(i + vec2(1.0, 0.0));\nfloat c = hash2(i + vec2(0.0, 1.0));\nfloat d = hash2(i + vec2(1.0, 1.0));\n\n// Smooth Interpolation\n\n// Cubic Hermine Curve. Same as SmoothStep()\nvec2 u = f*f*(3.0-2.0*f);\n// u = smoothstep(0.,1.,f);\n\n// Mix 4 coorners porcentages\nreturn mix(a, b, u.x) +\n(c - a)* u.y * (1.0 - u.x) +\n(d - b) * u.x * u.y;\n}\n\n\nfloat flower(in vec2 _uv, in float _N, in float _phase, in float _size)\n{\n    vec2 center = _size*vec2(cos(-PI/_N), sin(-PI/_N));\n    float alpha = _phase + atan(_uv.x, _uv.y);\n    float r = length(_uv);\n    vec2 nuv = normalize(_uv);\n    alpha = mix(alpha, -PI-(PI-alpha), step(0., alpha));\n    alpha = -mod(abs(alpha), PI2/_N);\n    vec2 op = r*vec2(cos(alpha), sin(alpha));\n    return length(op - center);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) --> scaled\n    vec2 uv = 2.*(2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec2 grid = uv;\n    grid = uv;\n    vec3 col;\n    float svis = 0.;\n    for (float it = 0.; it < 5.; it+=1.)\n    {\n        float tfact = 0.2 * it;\n        float time = iTime - tfact;\n        // Time varying pixel color\n        vec3 tcol;\n        \n        // animation timers\n        float t5 = mod(time, 5.);\n        float t17 = mod(time, 17.);\n        float t25 = mod(time, 25.);\n        float t47 = mod(time, 47.);\n        \n        const float ampl = 1./float(A_N);\n        float dr = ampl * PULSE_T(t25, 2., 4., 21.) + ampl * PULSE_T(t17, .5, 7., 13.);\n        float clScheme = PULSE_T(t47, 0.75, 27., 43.);\n\n        for (int ii = A_START; ii <= A_START + A_N; ii++)\n        {\n          float ivis = noise(vec2(0.25 * time, float(ii)));\n          svis += ivis;\n          int i0 = ii - A_START;\n          float r = mix(1.75 - dr * float(i0), 0.25 + dr * float(i0), PULSE_T(t17, 1., 4.5, 11.5));\n          float f = flower(grid, float(ii), mod((0.2*cos(time * 0.1) + 0.1 * noise(vec2(float(ii), time))),PI2), r);\n          f = pow(f, (0.5 + r*0.1)/float(A_N) + 0.75/float(A_N)*ANIM_T(t5, 1., 2.5));\n          \n          int ci = (i0) % 11;\n          tcol += smoothstep(0., 0.25, ivis) * mix(plasma[ci], Blues[ci], clScheme) * vec3(1. - f);\n        }\n        \n        col += tcol * pow(0.5, it);\n    }\n    \n    // add background\n    col = clamp(col, vec3(0.), vec3(1.));\n    float rGrid = length(grid*0.15);\n    vec3 background = mix(bckColor * 0.1, bckColor * 0.8, 1. - exp(-rGrid));\n    \n    col = mix(background, col, 1. - rGrid);\n    \n    //col = 1.6 * pow(col, vec3(1.6));\n\n    fragColor = vec4(col,length(col)*0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}