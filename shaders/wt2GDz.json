{
    "Shader": {
        "info": {
            "date": "1559230508",
            "description": "A simple synthesizer playing a loop",
            "flags": 8,
            "hasliked": 0,
            "id": "wt2GDz",
            "likes": 9,
            "name": "Synthwave sounds",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "skythedragon",
            "viewed": 819
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float square(float t, float f) {\n   \tif (fract(t*f) > 0.5) return 1.0;\n    else return -1.0;\n}\n\nfloat sinwave(float t, float f) {\n\treturn sin(6.2831*f*t);\n}\n\nfloat saw(float t, float f) {\n\treturn fract(t*f);\n}\n\nfloat fractsaw(float t, float b, int o) {\n\tfloat s = 0.0;\n    for (int i, j = 0; i < o; i++, j *= 2) {\n    \ts += saw(t, b*float(j))/float(o);\n    }\n    return s;\n}\n\nfloat saw_med(float t) {\n    float y = fract(t/16.0)*16.0;\n    if (y < 4.0) return 110.0;\n    if (y < 8.0) return 88.0;\n    if (y < 12.0) return 99.0;\n    if (y < 16.0) return 110.0;\n    return 0.0;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    //return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n    return vec2((saw(time, saw_med(time))+saw(time, saw_med(time)*0.5))*0.125*fract(-time*4.0)+sinwave(time, saw_med(time)*1.0)*0.125);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}