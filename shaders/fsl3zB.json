{
    "Shader": {
        "info": {
            "date": "1616169612",
            "description": "Made for the willstall challenge - 1 shader a week keeps the depression meek\n\nMany thanks to cornusammonis for suggesting great improvements such as removing needless aspect ratio correction of pixelSize and clamping between -1 and 1",
            "flags": 32,
            "hasliked": 0,
            "id": "fsl3zB",
            "likes": 6,
            "name": "Convolution Kernel Feedback Fun",
            "published": 3,
            "tags": [
                "blob",
                "challenge",
                "kernel",
                "willstall"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 469
        },
        "renderpass": [
            {
                "code": "//play around with the variables in the Common tab!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz + min(iTime, 1.0);\n    \n    if(usingPalette)\n        col = pal( rgbToLuminance(col).r, palette);\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///////////////////////////////////////////////////////////////////////////////////////\n//Config\nconst bool fullColor = true; //true: RGB color, false: black and white\nconst float percentagePerTick = .15; //applyKernel takes beforeKernel + percentagePerTick * afterKernel\n\nconst bool usingPalette = true; //true: luminance gets converted to palette\n#define palette \\\n    vec3(0.5,0.5,0.5),\\\n    vec3(0.5,0.5,0.5),\\\n    vec3(1.0,1.0,1.0),\\\n    vec3(0.0,0.10,0.20) \n\n#define bufferAKernel sharpenKernel\n#define bufferBKernel gaussianKernel\n\n///////////////////////////////////////////////////////////////////////////////////////\n\nconst float noopKernel[9] = float[9](.0,.0,.0,.0,1.,.0,.0,.0,.0);\nconst float sharpenKernel[9] = float[9](1.,1.,1.,1.,-8.,1.,1.,1.,1.);\nconst float blurKernel[9] = float[9](1./9., 1./9., 1./9., 1./9.,  1./9.,  1./9.,  1./9.,  1./9.,  1./9.);\nconst float laplacianKernel[9] = float[9](.0, -1., .0, -1., 4., -1., .0, -1., .0);\nconst float gaussianKernel[9] = float[9](1./16., 1./8., 1./16., 1./8., 1./4., 1./8., 1./16., 1./8., 1./16.);\nconst float highPassKernel[9] = float[9](-1./9.,-1./9.,-1./9.,-1./9.,8./9.,-1./9.,-1./9.,-1./9.,-1./9.);\n\nvec3 applyKernel(vec2 uv, vec2 resolution, sampler2D image, float kernel[9])\n{\n    vec2 pixelSize = 1./resolution.xy;\n    \t\n    vec3 beforeKernel = texture(image, uv).xyz;\n    vec3 afterKernel = vec3(.0);\n    for(int i = 0; i < 3; i++)\n    for(int j = 0; j < 3; j++)\n    {\n        vec2 sampleUV = uv + vec2(float(i-1), float(j-1)) * pixelSize;\n        afterKernel += texture(image, sampleUV).xyz * kernel[j*3+i];\n    }\n    \n    return clamp(beforeKernel + percentagePerTick *afterKernel,-1., 1.);\n}\n\nvec3 rgbToLuminance(vec3 col)\n{\n    return vec3(0.2126*col.r + 0.7152*col.g + 0.0722*col.b);\n}\n\n//from iq: https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n#define kernelMain(kernel) \\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \\\n{\\\n    vec2 uv = fragCoord/iResolution.xy;\\\n    if(iTime > .5)\\\n    {\\\n        fragColor = vec4(applyKernel(uv, iResolution.xy, iChannel0, kernel), 1.0);\\\n    } else \\\n    {\\\n        vec4 col = texture(iChannel1, uv); \\\n        fragColor = fullColor ? col-.5 : vec4(rgbToLuminance(col.xyz)-.5, 1.0);\\\n    }\\\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nkernelMain(bufferAKernel)",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nkernelMain(bufferBKernel)",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}