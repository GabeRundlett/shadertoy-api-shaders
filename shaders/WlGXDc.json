{
    "Shader": {
        "info": {
            "date": "1583695418",
            "description": " Planned to be laser cut.",
            "flags": 32,
            "hasliked": 0,
            "id": "WlGXDc",
            "likes": 11,
            "name": "Day 80",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 452
        },
        "renderpass": [
            {
                "code": "\n// Planned to be laser cut.\n// It's an XOR pattern with some slight modification in Buffer A\n\n\n#define R iResolution.xy\n#define T(e) texture(iChannel0, (e)/R).x\n\n\nfloat xor(float x, float y) {return float(int(x) ^ int(y));}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 uv = (U/iResolution.xy);\n    \n    float st = 1.;\n    \n    vec3 col = vec3(0);\n\n    float t = T(U);\n    /*\n    float n = T(U + vec2(0.,st));\n    float w = T(U + vec2(0.,-st));\n    float e = T(U + vec2(st,0.));\n    float s = T(U + vec2(-st,0.));\n    \n    float ne = T(U + vec2(st,st));\n    float ns = T(U + vec2(-st,st));\n    float sw = T(U + vec2(st,-st));\n    float se = T(U + vec2(-st,-st));\n    */\n    \n    //float cumm = t + n + w + e + s + ne + ns + sw + se;\n    \n    float att = pow(smoothstep(0.,1., abs(t*9.)/6.), 20.);\n    //float att = pow(smoothstep(0.,1., abs(cumm)/6.), 20.);\n    \n    \n    \n    col += 1. - att;\n    \n    //col += t;\n    \n    C = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float xor(float x, float y) {return float(int(x) ^ int(y));}\n\n#define R iResolution.xy\n#define T(e) texture(iChannel0, (e)/R).x\n\nfloat get(vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5*iResolution.xy);\n    \n    float col = 0.;\n\n    uv *= 6. + 10.*iMouse.x/iResolution.x;\n    \n    vec2 iuv = vec2(uv);\n    \n    iuv = abs(iuv);\n    \n    \n    float rep = 30.;\n    iuv = floor(iuv/rep)*rep;\n    \n    #define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n    \n    \n    float r = xor(iuv.x, iuv.y);\n    \n    \n    float cumm = 0.;\n    \n    r = xor(iuv.x, iuv.y);\n    \n    \n    r = floor(r*0.006);\n    for(int i = 0; i < 3; i++){\n        if(floor(mod(r, 5.)) < 3.){\n        \tcumm += r + r;\n        }\n        \n    }\n    \n    \n    float fr = float(r);\n    \n    \n    col += clamp(cumm, 0., 1.);\n    \n    col -= step(1.-cumm*0.01,0.)*1.;\n    \n    col = clamp(col, 0.,1.);\n    if (col == 0.) \n        col -= col + 1.;\n    return col;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    \n\tvec3 col = vec3(0);\n    float st = 0.5;    \n    \n    // antialiasing\n    \n    float t = get(U);\n    float n = get(U + vec2(0.,st));\n    float w = get(U + vec2(0.,-st));\n    float e = get(U + vec2(st,0.));\n    float s = get(U + vec2(-st,0.));\n    \n    float ne = get(U + vec2(st,st));\n    float ns = get(U + vec2(-st,st));\n    float sw = get(U + vec2(st,-st));\n    float se = get(U + vec2(-st,-st));\n    \n    \n    float cumm = t + n + w + e + s + ne + ns + sw + se;\n    \n    col += cumm/9.;\n    \n    C = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}