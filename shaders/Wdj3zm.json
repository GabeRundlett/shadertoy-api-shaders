{
    "Shader": {
        "info": {
            "date": "1548471138",
            "description": "Based on this video: https://youtu.be/makaJpLvbow",
            "flags": 32,
            "hasliked": 0,
            "id": "Wdj3zm",
            "likes": 25,
            "name": "Primordial Particle System",
            "published": 3,
            "tags": [
                "automata",
                "life",
                "cell",
                "particle"
            ],
            "usePreview": 1,
            "username": "Flyguy",
            "viewed": 1186
        },
        "renderpass": [
            {
                "code": "vec4 grad(float x)\n{\n    return (16.0 < x && x <= 35.0) ? vec4(0.0,0.5,1.0,0) :\n                        (x > 35.0) ? vec4(1.0,1.0,0.0,0) :\n                        (x > 15.0) ? vec4(1.0,0.0,1.0,0) :\n          (13.0 <= x && x <= 15.0) ? vec4(0.5,0.2,0.0,0) :\n                                     vec4(0.0,1.0,0.0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dist = 1e6;\n    float total = 0.0;\n    \n    for(int i = 0;i < CELL_CNT;i++)\n    {\n        vec4 cell = GetCell(iChannel0, i);\n    \tvec2 offs = fragCoord - cell.xy*iResolution.y;\n        float dsqr = dot(offs,offs);\n        \n        if(dsqr < dist)\n        {\n            dist = dsqr;\n            total = cell.w;\n        }\n    }\n    \n    fragColor = grad(total) * smoothstep(2.0,1.5,sqrt(dist));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Math Constants\nconst float pi = atan(1.0)*4.0;\n\nconst float tau = atan(1.0)*8.0;\n\n//System Parameters\nconst int CELL_CNT = 1024;\n\nconst float spinBias = radians(180.0),\n    \t\tspinMult = radians(17.0),\n    \t\tvelocity = 0.0084,\n    \t\tradius = 0.063;\n\nconst float initSpread = 1.0;\n\n//Helper functions\nvec4 GetCell(sampler2D buf, int id)\n{\n    ivec2 res = textureSize(buf,0);\n\tivec2 uv = ivec2(\n        id % res.x,\n        id / res.x\n    );\n    \n    return texelFetch(buf, uv, 0);\n}\n\nvec2 cossin(float x)\n{\n\treturn vec2(cos(x),sin(x));   \n}\n\nvec2 perpendicular(vec2 v)\n{\n    return vec2(-v.y,v.x);\n}\n\nfloat lengthSqr(vec2 v)\n{\n\treturn dot(v,v);   \n}\n\nvec2 repeat2D(vec2 v, vec2 size)\n{\n\treturn mod(v + size/2.0, size) - size/2.0;   \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\tint curId = int(fragCoord.x) + int(fragCoord.y) * int(iResolution.x);\n    vec4 curCell = GetCell(iChannel0, curId);\n    \n    vec2 res = iResolution.xy/iResolution.y;\n    vec2 cellDir = cossin(curCell.z);\n     \n    float totalRight = 0.0;\n    float totalLeft = 0.0;\n    \n    if(curId < CELL_CNT)\n    {\n        for(int i = 0;i < CELL_CNT;i++)\n        {\n            if(i != curId)\n            {\n                //Direction from current cell to cell 'i'.\n                vec2 dir = curCell.xy - GetCell(iChannel0, i).xy;\n                \n                //Wrap distance at edges\n                dir = repeat2D(dir, res);\n                \n                //-1 = Cell on left side, +1 = Cell on right side\n\t\t\t\tfloat side = sign(dot(cellDir, perpendicular(dir)));\n                \n                //Count cells in radius on left/right sides \n                if(lengthSqr(dir) < (radius*radius)) \n                {\n                    if(side > 0.0)\n                    {\n                    \ttotalRight++;   \n                    }\n                    else\n                    {\n                        totalLeft++;\n                    }\t   \n                }\n            }\n        }\n        \n        //Total cells inside the radius of the current cell\n        float totalCells = totalRight + totalLeft;\n\t\t\n        //Update cell angle & position\n        curCell.z += spinBias + spinMult*totalCells*sign(totalRight - totalLeft);\n        curCell.xy += cossin(curCell.z) * velocity;\n        \n        //Save totalCells for shading\n        curCell.w = totalCells;\n        \n        //Wrap position, keep angle (z) between -pi & pi\n        curCell.xy = mod(curCell.xy, res);\n        curCell.z = mod(curCell.z + pi, tau) - pi;\n\n        //Initial state\n        if(iFrame < 10)\n        {\n            vec4 rnd = GetCell(iChannel1,curId);\n            curCell.xy = (initSpread * (rnd.xy-0.5)+0.5) * res;\n            curCell.z = rnd.w * tau;\n        }\n    }\n    \n    fragColor = curCell;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}