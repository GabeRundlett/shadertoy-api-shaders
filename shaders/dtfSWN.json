{
    "Shader": {
        "info": {
            "date": "1674756545",
            "description": "Use with music to see in full color.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtfSWN",
            "likes": 10,
            "name": "Your Social Enigma",
            "published": 3,
            "tags": [
                "music",
                "audioreactive"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "// Your Social Enigma 0.73.230126\n// by QuantumSuper\n// Use with music to see in full color.\n\n#define PI 3.14159265359 \n\nfloat animTime;\nvec4 fft;\n\nfloat sinRad2(float a, float r2){ //angle, radius squared\n    return r2*(1.+.25*fft.x*sin(8.*a+animTime));\n}\n\nfloat sinRing(float d2, float a, float r2, float w){ //distance squared, angle, radius squared, width factor\n    float r2Min = sinRad2(a,r2);\n    float r2Max = sinRad2(a,r2*w);\n    if ((d2>=r2Min-.001)&&(d2<=r2Max+.001)) return 1.;\n    return .001/abs(d2-r2Min)+0.001/abs(d2-r2Max);\n}\n\nfloat sinRing2(float d2, float a, float r2, float w){ //distance squared, angle, radius squared, width factor\n    return sinRing(d2,a,r2,w)+sinRing(d2,a+PI/8.,r2,w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Initializations\n    vec3 col = vec3(0);\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y);\n    animTime = 2.133333*iTime;\n    float a = atan(uv.x/uv.y); //polar angle (limited)\n    float d2 = uv.x*uv.x+uv.y*uv.y; //polar distance squared\n    float p,s,amp,pc;\n    fft.xyzw = vec4(0); //sound\n    \n    // Sound (see shadertoy.com/view/Xds3Rr, assume? sound texture with 48Khz/4 in 512 texels)\n    for (int n=0;n<12;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass\n    for (int n=12;n<48;n++) fft.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech\n    for (int n=48;n<192;n++) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence\n    for (int n=192;n<512;n++) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance\n    fft /= vec4(12,36,144,320); //normalize\n   \n    // Geometry\n    for (float n=0.;n<8.;n++){\n        p = .01*animTime+n*PI/4.; //phase\n        s = smoothstep(-.3,0.,-cos(p));\n        pc = a+p+animTime; //phase color\n        amp = (.9-.8*s)*sinRing2(d2,(-1.+2.*mod(n,2.))*a,.9*(1.+.999*sin(p)),1.+.5*s); //rings\n        col += amp*(.1+.9*fft.zyw)*vec3(sin(pc),sin(pc+PI/3.),sin(pc+2.*PI/3.)); //colors\n    }\n    \n    // Finalizations\n    col *= col; // negative correction & harder falloff\n    col += vec3(.001/abs(d2-.0015)*(.1+.9*fft.x)); //center eye\n\tcol = pow(col, vec3(.4545)); //gamma correction\n    fragColor = vec4(col,1.0); //output\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}