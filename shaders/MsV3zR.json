{
    "Shader": {
        "info": {
            "date": "1453117820",
            "description": "cascading operations on image, e.g., for normalization of the video values.\nNB: draft. I should align pixels to video size.",
            "flags": 34,
            "hasliked": 0,
            "id": "MsV3zR",
            "likes": 4,
            "name": "pyramid op",
            "published": 3,
            "tags": [
                "filter",
                "pyramid",
                "cascade"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1161
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O,  vec2 U )\n{\n    vec4 sol = texture(iChannel0, vec2(1));                 // ultimate cascaded value\n    \n\tO = texture(iChannel0, U /= iResolution.xy);\n\n    // --- your normalization operation here\n    if (U.y>U.x)  O /= sol;     // using max\n // if (U.y>U.x)  O *= .5/sol;  // using mean\n\n    \n    \n    if (max(U.x,1.-U.y)<.1) O = texture(iChannel0, vec2(1));// display measured value\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// --- your pyramidal operation here \nvec4 op (vec4 t00, vec4 t10, vec4 t01, vec4 t11) {\n // return (t00+t10+t01+t11) / 4.;           // average\n    return max(max(t00,t10),max(t01,t11));   // max\n // return min(min(t00,t10),min(t01,t11));   // min\n}\n\n#define T1(d) texture(iChannel1, U   +d/R)                    // source image\n//#define T0(d) texture(iChannel0, U-V +d/R)\n#define T0(d) texture(iChannel0, U/(2.-V)-V +d/R*sign(1.-U))  // prev cascade level\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy, I=vec2(1,0), V;\n    U *= 2./R;\n    V = step(2.,exp2(U));\n    O = V.x+V.y > 0.\n        ? op( T0(I.yy),T0(I),T0(I.yx),T0(I.xx) )   // texture(iChannel0, U-1.);       \n        : op( T1(I.yy),T1(I),T1(I.yx),T1(I.xx) ) ; // texture(iChannel1, U   ) \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}