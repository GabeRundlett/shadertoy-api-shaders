{
    "Shader": {
        "info": {
            "date": "1673571394",
            "description": "Trippy thing Antialiased",
            "flags": 0,
            "hasliked": 0,
            "id": "dt2GRV",
            "likes": 6,
            "name": "Sponge Cells Antialiased",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "fx",
                "lsd"
            ],
            "usePreview": 0,
            "username": "ersh",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "#define GAMMA   1.6\n#define gamma(X)  pow(X, GAMMA)\n#define degamma(X)  pow(X, 1./GAMMA)\n\n// https://www.shadertoy.com/view/clB3zc\n#define sfractN(x,w)   min( fract(x)/(1.-(w)), fract(-x)/(w) )\n#define smodN(x,n,w)  (sfractN((x)/(n),w)*(n))\n#define sfloorN(x,w)   max( floor(x), x - sfractN(x,w) )\n\nfloat nonzero(float x, float minval) {\n  return x >= 0. ? x+exp(-x)*minval : x-exp(x)*minval;\n}\n\nfloat nonzero(float x) {\n  return nonzero(x, 1.);\n}\n\nfloat powX(float x, float f) {\n  return x > 0. ? pow(x, f) : x < 0. ? -pow(-x, f) : 0.;\n}\n\nmat2 rotate2d(float a) {\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat calc(in vec2 fragCoord, float size, float angle, float kx, float ky, vec2 offset) {\n  vec2 stretch = fragCoord - iResolution.xy * 1.5 / 2.0 * sin(iTime/vec2(11.,19.));\n  //float r = distance(vec2(0), fragCoord.xy) / iResolution.x * 4.;\n  //float rr = 1.+sin(r*6.*(sin(iTime*0.04)/3.))/6.*powX(sin(iTime/3.),14.)*0.5;\n  vec2 p = fragCoord.xy * rotate2d(angle + kx*stretch.x - ky*stretch.y);// * rr;\n  vec2 pmod = smodN(p + offset, size * 2.0, 1./size);\n  return max(pmod.x, pmod.y)/size/2.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float size = iResolution.x / (25.0 + powX(sin(iTime/5.5),9.)*10.);\n  float angle = iTime / 10.0;\n  float kx = sin(iTime/1.)/nonzero(iResolution.x*1.3*(1.-powX(sin(iTime/15.),5.)), 0.01);\n  float ky = powX(sin(iTime/1.4),3.)/nonzero(iResolution.x*1.3*(1.-powX(sin(iTime/22.),7.)), 0.01);\n  vec2 offset = iResolution.xy * cos(iTime/27.) * vec2(cos(iTime/15.), -sin(iTime/11.));\n  vec2 offsetC = iResolution.xy * sin(iTime/37.) * vec2(sin(iTime/31.), cos(iTime/25.)) / 5.;\n  fragCoord = fragCoord.xy - iResolution.xy / 2.0 + offsetC;\n  float k = calc(fragCoord, size, angle, kx, ky, offset);\n  //fragColor = vec4(vec3(gamma(k)), 1.0);\n  //fragColor = vec4(vec3(degamma(k)), 1.0);\n  fragColor = vec4(vec3(k), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}