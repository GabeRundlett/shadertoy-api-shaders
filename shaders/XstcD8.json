{
    "Shader": {
        "info": {
            "date": "1518696748",
            "description": "soundz",
            "flags": 40,
            "hasliked": 0,
            "id": "XstcD8",
            "likes": 13,
            "name": "Music: Eerie Fonk",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1038
        },
        "renderpass": [
            {
                "code": "float mono(vec2 p) {\n    return (p.x + p.y)*0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, p);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// audio code is in Common shader",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// written in Scopes and compiled to GLSL\n//original code:\n/*\n\nusing import ..liminal.glm\n\nlet SAMPLESIZE = 44100\nlet pi2 = (pi * 2.0)\n\nfn hz (c)\n    \"f32 <- f32\"\n    13.75 * (2.0 ** ((c + 3.0) / 12.0))\n\nfn fmod (x y)\n    x - (trunc (x / y)) * y\n\nfn seq (t s)\n    \"f32 f32 <- f32 f32\n     returns note index, fract\"\n    vec2\n        trunc (t / s)\n        fmod t s\n\nfn index (x a rest...)\n    if (va-empty? rest...) a\n    else\n        ? (x < 1.0) a\n            index (x - 1.0) rest...\n\n# OPL oscillators\n\n# wave 0: regular sine\nfn sine (x)\n    \"f32 <- (f32)\"\n    sin (pi2 * x)\n\n# wave 1: half sine + pause\nfn sine-2p (x)\n    \"f32 <- (f32)\"\n    max (sine x) 0.0\n\n# wave 2: half sine, double frequency\nfn sine-22 (x)\n    \"f32 <- (f32)\"\n    abs (sine x)\n\n# wave 3: quarter sine + pause, double frequency\nfn sine-4p2 (x)\n    \"f32 <- (f32)\"\n    ? ((fmod (x * 2.0) 1.0) < 0.5)\n        abs (sine x)\n        0.0\n\n# wave 4: sine + pause, double frequency\nfn sine-p2 (x)\n    \"f32 <- (f32)\"\n    ? ((fmod x 1.0) < 0.5)\n        sine (x * 2.0)\n        0.0\n\n# wave 5: half sine + pause, double frequency\nfn sine-2p2 (x)\n    \"f32 <- (f32)\"\n    ? ((fmod x 1.0) < 0.5)\n        abs (sine (x * 2.0))\n        0.0\n\n# wave 6: square wave\nfn square (x)\n    \"f32 <- (f32)\"\n    ? ((fmod x 1.0) < 0.5) 1.0 -1.0\n\n# wave 7: saw wave\nfn saw (x)\n    \"f32 <- (f32)\"\n    1.0 - 2.0 * (fmod x 1.0)\n\nlet HASHSCALE3 =\n    vec3 443.897 441.423 437.195\n\nfn noise (t)\n    let p3 = (fmod (vec3 (t * HASHSCALE3)) 1.0)\n    let p3 =\n        + p3\n            p3.z * (p3.y + 19.19)\n            p3.x * (p3.z + 19.19)\n            p3.y * (p3.x + 19.19)\n    (fmod ((p3.x + p3.y) * p3.z) 1.0) * 2.0 - 1.0\n\nlet C C+ D D+ E F F+ G G+ A A+ =\n    \\ 60.0 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0\n\nfn stereo (x)\n    vec2 x\n\nfn volume (a x)\n    x * (2.0 ** a)\n\nfn octave (a x)\n    x + (12.0 * a)\n\nfn mix (...)\n    + 0.0 ...\n\nfn bpm (b)\n    \"compute the length of a beat at given rate\"\n    60.0 / b\n\nfn limit (x n)\n    \"a simple amplitude limiter\n    n is the value of the first derivative at x=0\n    \"\n    let n =\n        if (none? n) 1.0\n        else n\n    x / ((abs x) + n)\n\nfn tap-delay (t taps delay decay f)\n    let loop (i s) = taps 0.0\n    if (i > 0)\n        let i = (i - 1)\n        loop i\n            + (s * (2.0 ** decay))\n                f (t * (1.0 + (f32 i) * 0.01) - (f32 i) * delay)\n    else\n        return s\n\n# v = vec4(attack,decay,hold,release), s = sustain amplitude\nfn adsr (t v s)\n    \"f32 <- (f32 vec4 f32)\"\n    let s =\n        if (none? s) 1.0\n        else s\n    let v =\n        vec4\n            max 2.2e-05 v.x\n            max 2.2e-05 v.y\n            v.z\n            max 2.2e-05 v.w\n    # attack term\n    let ta = (t / v.x)\n    # decay / sustain amplitude term\n    let td = (max s (1.0 - ((t - v.x) * (1.0 - s) / v.y)))\n    # length / release term\n    let tr =\n        1.0 - ((max 0.0 (t - (+ v.x v.y v.z))) / v.w)\n    max 0.0 (min ta (tr * td))\n\nfn line2 (t)\n    \"f32 <- (f32)\"\n    let a = (seq t 2.0)\n    let ax ay = a.x a.y\n    let ax = (fmod ax 4.0)\n    let q =\n        octave 1\n            index ax 0.0 1.0 2.0 3.0\n    let w = (seq t (/ 4.0))\n    let wx wy = w.x w.y\n    let n = (30.0 + q + 12.0 * (fmod (trunc (wx * 0.5)) 2.0))\n    let vib_f = (0.14 * (hz (0.5 * (sine (6.1 * t)))))\n    let vibthz = (vib_f + t * (hz n))\n    let amp = (adsr wy (vec4 0.0 0.0 0.0 0.1) 1.0)\n    amp * (sine-2p (vibthz + (amp * (sine-22 vibthz))))\n\nfn bassline (t)\n    \"f32 <- (f32)\"\n    let a = (seq t 2.0)\n    let ax ay = a.x a.y\n    let ax = (fmod ax 4.0)\n    let q =\n        octave -1\n            index ax 0.0 -6.0 -1.0 -4.0\n    let w = (seq t (/ 8.0))\n    let wx wy = w.x w.y\n    let n = (30.0 + q + 12.0 * (fmod (trunc (wx * 0.5)) 2.0))\n    let vib_f = (0.07 * (hz (0.5 * (sine (6.1 * t)))))\n    let amp = (adsr wy (vec4 0.001 0.0 0.0 0.15) 1.0)\n    let vibthz = (vib_f + (t * (hz n)))\n    amp * (sine-2p (vibthz + (sine-4p2 vibthz)))\n\nfn hhat (t)\n    let w = (seq (t - 0.25) (/ 2.0))\n    let wx wy = w.x w.y\n    let amp = (adsr wy (vec4 0.001 0.0 0.0 0.3) 1.0)\n    let w2 = (seq (t - 0.25) (/ 8.0))\n    let wx2 wy2 = w2.x w2.y\n    let amp2 = (adsr wy2 (vec4 0.001 0.0 0.0 0.15) 1.0)\n    amp2 * amp * (noise t)\n\nfn snare (t)\n    let w = (seq (t - 0.5) (/ 1.0))\n    let wx wy = w.x w.y\n    let amp = (adsr wy (vec4 0.001 0.0 0.0 0.15) 1.0)\n    # quantize time to reduce frequency\n    let ph =\n        wy - (fmod wy (1.0 / 8192.0))\n    amp * (noise ph)\n\nfn kick (t)\n    let q =\n        seq t\n            bpm 120.0\n    let idx vt = q.x q.y\n    let note =\n        index (fmod idx 4.0) C C+ C C+\n    let pitch =\n        + 1.0\n            adsr vt (vec4 0.001 0.0 0.0 0.1)\n    let amp =\n        adsr vt (vec4 0.001 0.0 0.0 0.5)\n    * amp\n        sine\n            * vt\n                hz\n                    *\n                        octave -3 note\n                        pitch\n\nfn music (t)\n    let t =\n        + t\n            (sine t) * 0.003\n    stereo\n        volume -2.0\n            mix\n                kick t\n                volume -1.0\n                    hhat t\n                volume -1.0\n                    snare t\n                bassline t\n                tap-delay t\n                    taps = 8\n                    delay = (/ 8.0)\n                    decay = -1.0\n                    fn (t)\n                        line2 t\n\n*/\n\nfloat _32(float _31)\n{\n    return _31 - (trunc(_31 / 0.5) * 0.5);\n}\n\nvec2 _42(float _40, float _41)\n{\n    vec2 _48 = vec2(0.0);\n    _48.x = _40;\n    vec2 _50 = _48;\n    _50.y = _41;\n    return _50;\n}\n\nvec2 _26(float _25)\n{\n    return _42(trunc(_25 / 0.5), _32(_25));\n}\n\nfloat _56(float _55)\n{\n    return _55 - (trunc(_55 / 4.0) * 4.0);\n}\n\nfloat _77(float _76)\n{\n    return (_76 < 1.0) ? 60.0 : 61.0;\n}\n\nfloat _72(float _71)\n{\n    return (_71 < 1.0) ? 61.0 : _77(_71 - 1.0);\n}\n\nfloat _65(float _64)\n{\n    return (_64 < 1.0) ? 60.0 : _72(_64 - 1.0);\n}\n\nfloat _100(float _99)\n{\n    return (1.0 >= _99) ? 1.0 : _99;\n}\n\nfloat _108(float _107)\n{\n    return (0.0 >= _107) ? 0.0 : _107;\n}\n\nfloat _120(float _118, float _119)\n{\n    return (_118 <= _119) ? _118 : _119;\n}\n\nfloat _90(float _89)\n{\n    return _108(_120(_89 / 0.001000000047497451305389404296875, (1.0 - (_108(_89 - 0.00102200009860098361968994140625) / 0.100000001490116119384765625)) * _100(1.0 - (((_89 - 0.001000000047497451305389404296875) * 0.0) / 2.2000000171829015016555786132812e-05))));\n}\n\nfloat _129(float _128)\n{\n    return _108(_120(_128 / 0.001000000047497451305389404296875, (1.0 - (_108(_128 - 0.00102200009860098361968994140625) / 0.5)) * _100(1.0 - (((_128 - 0.001000000047497451305389404296875) * 0.0) / 2.2000000171829015016555786132812e-05))));\n}\n\nfloat _149(float _148)\n{\n    return 13.75 * pow(2.0, (_148 + 3.0) / 12.0);\n}\n\nfloat _23(float _22)\n{\n    vec2 _52 = _26(_22);\n    float _54 = _52.y;\n    return _129(_54) * sin(6.283185482025146484375 * (_54 * _149((_65(_56(_52.x)) + (-36.0)) * (1.0 + _90(_54)))));\n}\n\nfloat _174(float _173)\n{\n    return _108(_120(_173 / 0.001000000047497451305389404296875, (1.0 - (_108(_173 - 0.00102200009860098361968994140625) / 0.300000011920928955078125)) * _100(1.0 - (((_173 - 0.001000000047497451305389404296875) * 0.0) / 2.2000000171829015016555786132812e-05))));\n}\n\nfloat _199(float _198)\n{\n    return _198 - (trunc(_198 / 0.125) * 0.125);\n}\n\nvec2 _193(float _192)\n{\n    return _42(trunc(_192 / 0.125), _199(_192));\n}\n\nfloat _211(float _210)\n{\n    return _108(_120(_210 / 0.001000000047497451305389404296875, (1.0 - (_108(_210 - 0.00102200009860098361968994140625) / 0.1500000059604644775390625)) * _100(1.0 - (((_210 - 0.001000000047497451305389404296875) * 0.0) / 2.2000000171829015016555786132812e-05))));\n}\n\nvec3 _235(float _234)\n{\n    vec3 _238 = vec3(0.0);\n    _238.x = _234;\n    vec3 _239 = _238;\n    _239.y = _234;\n    vec3 _241 = _239;\n    _241.z = _234;\n    return _241;\n}\n\nvec3 _250(vec3 _249)\n{\n    vec3 _255 = vec3(0.0);\n    _255.x = _249.x;\n    vec3 _256 = _255;\n    _256.y = _249.y;\n    vec3 _257 = _256;\n    _257.z = _249.z;\n    return _257;\n}\n\nvec3 _260(vec3 _259)\n{\n    return _259 - (trunc(_259 / vec3(1.0)) * vec3(1.0));\n}\n\nvec3 _286(vec3 _282, float _283, float _284, float _285)\n{\n    return ((_282 + _235(_283)) + _235(_284)) + _235(_285);\n}\n\nfloat _301(float _300)\n{\n    return _300 - (trunc(_300 / 1.0) * 1.0);\n}\n\nfloat _230(float _229)\n{\n    vec3 _267 = _260(_250(_235(_229) * vec3(443.897003173828125, 441.423004150390625, 437.19500732421875)));\n    vec3 _294 = _286(_267, _267.z * (_267.y + 19.1900005340576171875), _267.x * (_267.z + 19.1900005340576171875), _267.y * (_267.x + 19.1900005340576171875));\n    return (_301((_294.x + _294.y) * _294.z) * 2.0) - 1.0;\n}\n\nfloat _166(float _165)\n{\n    return (_211(_193(_165 - 0.25).y) * _174(_26(_165 - 0.25).y)) * _230(_165);\n}\n\nvec2 _319(float _318)\n{\n    return _42(trunc(_318 / 1.0), _301(_318));\n}\n\nfloat _330(float _329)\n{\n    return _329 - (trunc(_329 / 0.0001220703125) * 0.0001220703125);\n}\n\nfloat _315(float _314)\n{\n    vec2 _325 = _319(_314 - 0.5);\n    float _327 = _325.y;\n    return _211(_327) * _230(_327 - _330(_327));\n}\n\nfloat _352(float _351)\n{\n    return _351 - (trunc(_351 / 2.0) * 2.0);\n}\n\nvec2 _347(float _346)\n{\n    return _42(trunc(_346 / 2.0), _352(_346));\n}\n\nfloat _375(float _374)\n{\n    return (_374 < 1.0) ? (-1.0) : (-4.0);\n}\n\nfloat _370(float _369)\n{\n    return (_369 < 1.0) ? (-6.0) : _375(_369 - 1.0);\n}\n\nfloat _365(float _364)\n{\n    return (_364 < 1.0) ? 0.0 : _370(_364 - 1.0);\n}\n\nfloat _413(float _412)\n{\n    return (_301(_412 * 2.0) < 0.5) ? abs(sin(6.283185482025146484375 * _412)) : 0.0;\n}\n\nfloat _430(float _429)\n{\n    return (_429 >= 0.0) ? _429 : 0.0;\n}\n\nfloat _425(float _424)\n{\n    return _430(sin(6.283185482025146484375 * _424));\n}\n\nfloat _344(float _343)\n{\n    vec2 _390 = _193(_343);\n    float _411 = (0.070000000298023223876953125 * _149(0.5 * sin(6.283185482025146484375 * (6.099999904632568359375 * _343)))) + (_343 * _149((30.0 + (_365(_56(_347(_343).x)) + (-12.0))) + (12.0 * _352(trunc(_390.x * 0.5)))));\n    return _211(_390.y) * _425(_411 + _413(_411));\n}\n\nfloat _463(float _462)\n{\n    return (_462 < 1.0) ? 2.0 : 3.0;\n}\n\nfloat _458(float _457)\n{\n    return (_457 < 1.0) ? 1.0 : _463(_457 - 1.0);\n}\n\nfloat _453(float _452)\n{\n    return (_452 < 1.0) ? 0.0 : _458(_452 - 1.0);\n}\n\nfloat _480(float _479)\n{\n    return _479 - (trunc(_479 / 0.25) * 0.25);\n}\n\nvec2 _475(float _474)\n{\n    return _42(trunc(_474 / 0.25), _480(_474));\n}\n\nfloat _508(float _507)\n{\n    return _108(_120(_507 / 2.2000000171829015016555786132812e-05, (1.0 - (_108(_507 - 4.4000000343658030033111572265625e-05) / 0.100000001490116119384765625)) * _100(1.0 - (((_507 - 2.2000000171829015016555786132812e-05) * 0.0) / 2.2000000171829015016555786132812e-05))));\n}\n\nfloat _526(float _525)\n{\n    return abs(sin(6.283185482025146484375 * _525));\n}\n\nfloat _446(float _445)\n{\n    vec2 _488 = _475(_445);\n    float _506 = (0.14000000059604644775390625 * _149(0.5 * sin(6.283185482025146484375 * (6.099999904632568359375 * _445)))) + (_445 * _149((30.0 + (_453(_56(_347(_445).x)) + 12.0)) + (12.0 * _352(trunc(_488.x * 0.5)))));\n    float _524 = _508(_488.y);\n    return _524 * _425(_506 + (_524 * _526(_506)));\n}\n\nfloat _439(float _438)\n{\n    return ((((((((((((((0.0 + _446((_438 * 1.07000005245208740234375) - 0.875)) * 0.5) + _446((_438 * 1.059999942779541015625) - 0.75)) * 0.5) + _446((_438 * 1.0499999523162841796875) - 0.625)) * 0.5) + _446((_438 * 1.03999996185302734375) - 0.5)) * 0.5) + _446((_438 * 1.0299999713897705078125) - 0.375)) * 0.5) + _446((_438 * 1.019999980926513671875) - 0.25)) * 0.5) + _446((_438 * 1.0099999904632568359375) - 0.125)) * 0.5) + _446((_438 * 1.0) - 0.0);\n}\n\nfloat _589(float _584, float _585, float _586, float _587, float _588)\n{\n    return ((((0.0 + _584) + _585) + _586) + _587) + _588;\n}\n\nvec2 _599(float _598)\n{\n    vec2 _601 = vec2(0.0);\n    _601.x = _598;\n    vec2 _602 = _601;\n    _602.y = _598;\n    return _602;\n}\n\nvec2 _12(float _11)\n{\n    float _20 = _11 + (sin(6.283185482025146484375 * _11) * 0.0030000000260770320892333984375);\n    return _599(_589(_23(_20), _166(_20) * 0.5, _315(_20) * 0.5, _344(_20), _439(_20)) * 0.25);\n}\n\nvec2 mainSound( in int samp,float t)\n{\n    // uncomment to hear song in reverse\n    //t = 32.0 - mod(t, 32.0);\n    return _12(t);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float mono(vec2 p) {\n    return (p.x + p.y)*0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord / iResolution.xy;\n    float f = 20.0 * pow(2.0, p.x * 9.0);\n    vec2 k = vec2(0.0);\n    if (p.y < 0.2) {\n        const int N = 512;\n        for (int i = 0; i < N; ++i) {\n            float t = iTime + (0.5/60.0) * ((float(i) / float(N))*2.0 - 1.0);\n            float ph = 2.0 * 3.141592653589793 * t * f;\n            k += vec2(sin(ph),cos(ph)) * mono(mainSound( in int samp,t));        \n        }\n    }\n    float amp = max(0.0, log(length(k)) + 2.0);\n    float d = p.y;\n    \n    float a = clamp((amp/32.0 - d)*0.5*iResolution.y,0.0,1.0);\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(amp*1.1+vec3(0.0,2.0,4.0));\n    \n    vec3 last_color = max(vec3(0.0),\n\t\ttexture(iChannel0, p*vec2(1.0,1.007) - vec2(0.0, 3.0/iResolution.y)).rgb - 1.0/iResolution.y);\n    fragColor = vec4(last_color*(1.0 - a) + a*col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}