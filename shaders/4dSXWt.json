{
    "Shader": {
        "info": {
            "date": "1416915303",
            "description": "Bifurcation diagram for the [url=http://en.wikipedia.org/wiki/Logistic_map]Logistic Map[/url]. I played a lot with this as a kid in the 90s. Converges in h=[1..3]. Period 2 is in h=[3..1+sqrt(6)]. More: [url]https://www.shadertoy.com/view/XdSXWt[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4dSXWt",
            "likes": 46,
            "name": "Logistic Map - Real Bifurcation",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mandelbrot",
                "attractor",
                "chaos",
                "logistic",
                "bifurcation",
                "feigenbaum"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 7792
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Bifurcation diagram for the Logistic Map, the classic\n// example for the Chaos Theory. See also this other shader:\n// https://www.shadertoy.com/view/XdSXWt\n\n\n// Period 1 (fixed points): f(x)=0 and |f'(x)|<1\n// ----------------------------------------------\n// f(x)  = rx(1-x)\n// f(x)' = r(1-2x)\n//\n// f(x)=x --> x=0 and x=1-1/r\n//\n// x=0,     |f(0)'|     = r        < 1 --> 0 < r < 1 --> blue curve\n// x=1-1/r, |f(1-1/r)'| = r|2/r-1| < 1 --> 1 < r < 3 --> green curve\n\n\n// Period 2: f(f(x))=x and |f(f(x))'|<1\n// ----------------------------------------------\n// f(f(x))  = r²x(1-x)(1-rx(1-x))\n// f(f(x))' = r²(1-2x)[1+2rx(x-1)]\n//                                                  _______\n// f(f(x))=x --> (f(f(x))-x)/(f(x)-x)=0 --> x=[r+1±√r²-2r-3]/2r\n//                                      _\n// |f(f(x))'|<1  ... --> --> 3 < r < 1+√6=3.4495 --> red curve\n\n\n// Period 3: f(f(f(x)))=x and |f(f(f(x)))'|<1\n// ----------------------------------------------\n// f(f(f(x)))  = r³x(...\n// f(f(f(x)))' = ...\n// \n// f(f(f(x)))=x --> (f(f(f(x)))-x)/(f(x)-x)=0 --> \n\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat r = 4.0*fragCoord.x/iResolution.x;\n    float y = 1.0*fragCoord.y/iResolution.y;\n\n\t//-----------------------------------------------\n    // Plot the attractor    \n\t//-----------------------------------------------\n    float x = 0.5;\n    float f = 0.0;\n\n    // get rid of the transient state\n    // for( int i=0; i<128; i++ ) x = r*x*(1.0-x);\n    // start plotting\n    for( int i=0; i<512; i++ )\n    {\n        x = r*x*(1.0-x);\n        f += 0.1*exp(-200000.0*(y-x)*(y-x));\n    }\n    \n    vec3 col = vec3(max(1.0-f,0.0));\n\n\t//-----------------------------------------------\n    // Draw analytic fixed points and branches\n    //-----------------------------------------------\n\n    float al = smoothstep(-0.1,0.1,cos(iTime*3.141593));\n    \n    //\n    // period 1: x=0 in r=[0..1]\n\tvec3 branch0 = vec3( 0.0, \n                         1.0,\n                         0.0 );\n    //\n    // period 2: x=1-1/r in r=[1..3]\n\tvec3 branch1 = vec3( 1.0, \n                         3.0, \n                         1.0-1.0/r );\n    //                   _______                 _\n    // period 2: x=[r+1±√r²-2r-3]/2r in r=[3..1+√6]\n\tvec4 branch2 = vec4( 3.0,\n                         1.0+sqrt(6.0),\n                         (r+1.0-sqrt(r*r-2.0*r-3.0))/(2.0*r), \n                         (r+1.0+sqrt(r*r-2.0*r-3.0))/(2.0*r) );\n\n    col = mix( col, vec3(0,0,0), al*(1.0-smoothstep(0.0,0.01,abs(r-branch0.x))));\n    col = mix( col, vec3(0,0,0), al*(1.0-smoothstep(0.0,0.01,abs(r-branch1.x))));\n    col = mix( col, vec3(0,0,0), al*(1.0-smoothstep(0.0,0.01,abs(r-branch2.x))));\n    col = mix( col, vec3(0,0,0), al*(1.0-smoothstep(0.0,0.01,abs(r-branch2.y))));\n\n    col = mix( col, vec3(0,0,1), al*(1.0-smoothstep(0.0,0.02,abs(y-branch0.z)))*step(branch0.x,r)*step(r,branch0.y));\n    col = mix( col, vec3(0,1,0), al*(1.0-smoothstep(0.0,0.02,abs(y-branch1.z)))*step(branch1.x,r)*step(r,branch1.y));\n    col = mix( col, vec3(1,0,0), al*(1.0-smoothstep(0.0,0.02,abs(y-branch2.z)))*step(branch2.x,r)*step(r,branch2.y));\n    col = mix( col, vec3(1,0,0), al*(1.0-smoothstep(0.0,0.02,abs(y-branch2.w)))*step(branch2.x,r)*step(r,branch2.y));\n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}