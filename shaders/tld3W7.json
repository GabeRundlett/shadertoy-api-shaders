{
    "Shader": {
        "info": {
            "date": "1576672749",
            "description": "this tiling is obtain by subtitution. the white triangle are subtitute by two withe and one blue, and the blue triangle are subtitute by tree white.\nthere is a few variable in common to play around with the speed and zoom of animation",
            "flags": 0,
            "hasliked": 0,
            "id": "tld3W7",
            "likes": 9,
            "name": "aperiodic tiling",
            "published": 3,
            "tags": [
                "tiling"
            ],
            "usePreview": 0,
            "username": "elgecko",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "const float t = tan(radians(30.));\n\nbool triangle( inout vec2 uv )\n{\n    uv -= vec2(.5,.4/iResolution.x*iResolution.y);\n    uv *= 1./.8;\n    uv += vec2(.5,0.);\n    if (uv.y<0.) return false;\n    if (uv.y-t*uv.x>0.) return false;\n    if (uv.x+uv.y/t-1.>0.) return false;\n    return true;\n}\n\nvoid rot( inout vec2 uv, in float a)\n{\n    float s = sin(radians(a));\n    float c = cos(radians(a));\n    mat2 r = mat2(c,s,-s,c);\n    uv = r*uv;\n}\n\nvec4 shad(in vec2 uv)\n{\n    if(uv.x>1.) return vec4(0.,0.,0.25,0.);\n    if(uv.x<0.) return vec4(0.,0.,0.5,0.);\n    if(uv.y>1.) return vec4(0.,0.,0.75,0.);\n    if(uv.y<0.) return vec4(0.,0.,1.,0.);\n    int x = int(uv.x*10.);\n    int y = int(uv.y*10.);\n    vec4 ret = vec4(0.,0.,0.,0.);\n    if(x%2==1) ret.x=1.;\n    if(y%2==1) ret.y=1.;\n    return ret;\n}\n\nbool cut1( inout vec2 uv)\n{\n    if((uv.y/6.-t*uv.x/2.+t/6.<0.)&&(uv.y/6.-t*(1.-uv.x)/2.+t/6.<0.))\n    {\n        uv -= vec2(1./3.,0.);\n        uv*=3.;\n        return true;\n    }\n    uv.x=.5-abs(uv.x-.5);\n    uv.y=-uv.y;\n    rot(uv,30.);\n    uv=uv*2.*cos(radians(30.));\n    return false;\n}\n\nbool cut2( inout vec2 uv)\n{\n    //return true; //uncomment this to get a koch fractal\n    if(uv.y-t*uv.x>0.||uv.y+t*uv.x-t>0.)\n    {\n        uv.x=.5-abs(uv.x-.5);\n        uv.y=-uv.y;\n        rot(uv,60.);\n    }\n    return false;\n}\n\nvec4 color( in vec2 uv, in bool type)\n{\n    float d = edge;\n    if(type)\n    {\n        if(uv.y<d||uv.y-tan(radians(60.))*uv.x>-d||uv.y+tan(radians(60.))*uv.x-tan(radians(60.))>-d) return vec4(0.,0.,0.,1.);\n        return vec4(0.,0.,1.,1.);\n    }\n    else\n    {\n        if(uv.y<d||uv.y-t*uv.x>-d||uv.y+t*uv.x-t>-d) return vec4(0.,0.,0.,1.);\n        return vec4(1.,1.,1.,1.);\n    }\n}\n\nvec4 calc(const in vec2 fragCoord )\n{\n    vec4 fragColor;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    vec2 c = center;\n    c.y = c.y/iResolution.x*iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    float x = 1.-uv.x;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    if(iTime>delay*slow) uv=(uv-c)/pow(sqrt(3.)-zoom,iTime/slow-delay)+c;\n    if(triangle(uv))\n    {\n        bool state = false;\n        float rec = iTime+x*slow;\n        while(rec>slow)\n        {\n            rec -= slow;\n            if(state) state = cut2(uv);\n            else state = cut1(uv);\n        }\n        fragColor = color(uv, state);\n    }\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,0.);\n    vec2 uv = fragCoord;\n    fragColor += calc(uv)/5.;\n    fragColor += calc(uv+vec2(+0.5,+0.5))/10.;\n    fragColor += calc(uv+vec2(+0.0,+0.5))/10.;\n    fragColor += calc(uv+vec2(-0.5,+0.5))/10.;\n    fragColor += calc(uv+vec2(-0.5,+0.0))/10.;\n    fragColor += calc(uv+vec2(-0.5,-0.5))/10.;\n    fragColor += calc(uv+vec2(+0.0,-0.5))/10.;\n    fragColor += calc(uv+vec2(+0.5,-0.5))/10.;\n    fragColor += calc(uv+vec2(+0.5,+0.0))/10.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float slow = 3.; //slowness of the animation. recommended 1 to 5\nfloat edge = 0.01; //thickness of the edge. recommended 0 or 0.01\nvec2 center = vec2(.4,.6); //center of the zoom. the corner are at (0.1,0.4) (0.9,0.4) and (0.5,0.81056) 0.81056 is only valid with default resolution \nfloat zoom = 0.3; //speed of the zoom. 0 make it zoom at the same speed the triangle becomme smaller. sqrt(3.)-1. disable the zoom. \nfloat delay = 0.; //delay before the zoom start; 5 to 8 is good with a zoom of O. you can take a bigger value if your screen hase a good resolution.\n\n//you can uncomment a line in cut2 to get the koch curve\n\n/* good pair of zoom/delay\nzoom\tdelay\n0.5\t\t-21\n0.4\t\t-12\n0.3\t\t0\n0.2\t\t3\n0.1\t\t6\n0\t\t5 to 8\n-0.1\t2\n-0.2\t5\n-0.3\t7\n-0.4\t8\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}