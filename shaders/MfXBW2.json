{
    "Shader": {
        "info": {
            "date": "1724363623",
            "description": "Crippling Depression text ",
            "flags": 0,
            "hasliked": 0,
            "id": "MfXBW2",
            "likes": 6,
            "name": "Crippling Depression",
            "published": 3,
            "tags": [
                "shadergen"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 93
        },
        "renderpass": [
            {
                "code": "precision highp float;\n#define CHAR_SIZE vec2(6, 7)\n#define CHAR_SPACING vec2(6, 9)\n#define DOWN_SCALE 2.0\n\n\nvec2 start_pos = vec2(0);\nvec2 print_pos = vec2(0);\nvec2 print_pos_pre_move = vec2(0);\nvec3 text_color = vec3(1);\n\n#define HEX(i) text_color = mod(vec3(i / 65536, i / 256, i), vec3(256.0)) / 255.0;\n#define RGB(r, g, b) text_color = vec3(r, g, b);\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n#define BEGIN_TEXT(x, y) print_pos = floor(vec2(x, y)); start_pos = floor(vec2(x, y));\n\n#define _ col += char(vec2(0.0, 0.0), uv);\n#define _c col += char(vec2(228.0, 657564.0), uv) * text_color;\n#define _r col += char(vec2(354.0, 590904.0), uv) * text_color;\n#define _i col += char(vec2(262209.0, 33292.0), uv) * text_color;\n#define _p col += char(vec2(484.0, 667424.0), uv) * text_color;\n#define _l col += char(vec2(266305.0, 33292.0), uv) * text_color;\n#define _n col += char(vec2(452.0, 1198372.0), uv) * text_color;\n#define _g col += char(vec2(244.0, 665474.0), uv) * text_color;\n#define _d col += char(vec2(66804.0, 665758.0), uv) * text_color;\n#define _e col += char(vec2(228.0, 772124.0), uv) * text_color;\n#define _s col += char(vec2(228.0, 114844.0), uv) * text_color;\n#define _o col += char(vec2(228.0, 665756.0), uv) * text_color;\n#define _s col += char(vec2(228.0, 114844.0), uv) * text_color;\n\nfloat extract_bit(float n, float b) {\n    b = clamp(b, -1.0, 22.0);\n    return floor(mod(floor(n / pow(2.0, floor(b))), 2.0));   \n}\n\nfloat sprite(vec2 spr, vec2 size, vec2 uv) {\n    uv = floor(uv);\n    float bit = (size.x - uv.x - 1.0) + uv.y * size.x;  \n    bool bounds = all(greaterThanEqual(uv, vec2(0))) && all(lessThan(uv, size)); \n    return bounds ? extract_bit(spr.x, bit - 21.0) + extract_bit(spr.y, bit) : 0.0;\n}\n\nvec3 char(vec2 ch, vec2 uv) {\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    print_pos.y += sin(4. * print_pos.x - iTime * 10.);\n    return vec3(px);\n}\n\nvec3 Text(vec2 uv) {\n    vec2 res = iResolution.xy / DOWN_SCALE;\n    vec3 col = vec3(0.0);\n    vec2 center_pos = vec2(res.x / 2.0 - STRWIDTH(20.0) / 2.0, res.y / 2.0 - STRHEIGHT(1.0) / 2.0);\n    \t\n    BEGIN_TEXT(center_pos.x, center_pos.y)\n    HEX(0xFF00DD) _c _r _i _p _p _l _i _n _g _ _d _e _p _r _e _s _s _i _o _n;\n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / DOWN_SCALE;\n    vec2 duv = floor(fragCoord.xy / DOWN_SCALE);\n    \n    vec3 pixel = Text(duv);\n    vec3 col = pixel * 0.9 + 0.1;\n    col *= (1.0 - distance(mod(uv, vec2(1.0)), vec2(0.65))) * 1.2;\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}