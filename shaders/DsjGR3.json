{
    "Shader": {
        "info": {
            "date": "1668210642",
            "description": "Maybe WIP - rly unorganized unoptimized code so probably don't look.  Has artifacts on some computers (can't find its cause)",
            "flags": 0,
            "hasliked": 0,
            "id": "DsjGR3",
            "likes": 2,
            "name": "Raymarched Shifting Hallway",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Aurcereal",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "\n\n\nvec4 image(vec2 fragCoord)\n{\n    //set time\n    time = iTime;\n    //bendTheta = sin(time) * (PI/12.0) * .5;\n    \n    //do bending\n    float z = time*24.0; //12.0\n    vec3 pnt = vec3(sampleBendCurve(z), z); ////0.0 oc\n    z -= 23.0;\n    //time -= 2.0;\n    vec3 dir = normalize(vec3(sampleBendCurve(z+NORMALEPS), z+NORMALEPS) - vec3(sampleBendCurve(z), z));\n    //time += 2.0;\n    \n    //get camera ray and sample\n    Camera cam = createCamera(pnt, dir, vec3(0.0, 1.0, 0.0));\n    \n    vec2 cRaySS = (fragCoord/iResolution.xy)*2.0-1.0;\n    vec3 cRayWS = CS2WS(SS2CS(cRaySS, cam), cam);\n    \n    int steps;\n    float dist = trace(cam.position, cRayWS, steps);\n    \n    vec3 col = vec3(0.0);\n    if(dist < MAXDIST + time*4.0*1.0)\n    {\n        vec3 norm = getNormal(cam.position + cRayWS * dist);\n        col = norm * 0.5 + 0.5;\n    }\n    else\n    {\n        float angFrac = acos(cRayWS.y)/PI;\n        col = angFrac * vec3(0.3, 0.1, 0.8);\n    }\n    \n    // Output\n    return vec4(col, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec4 col = vec4(0.0);\n    \n    int iterSize = 1; //!! THE SAMPLE RATE PER PIXEL IS THIS NUMBER SQUARED - SO YOU CAN INCREMENT IT FOR ANTI-ALIASING !!\n    float iIter = 1.0 / float(iterSize);\n    for(int x=0; x<iterSize; x++)\n    {\n        for(int y=0; y<iterSize; y++)\n        {\n            col += image(fragCoord + vec2(float(x) * iIter, float(y) * iIter));\n        }\n    }\n\n    fragColor = col * iIter * iIter;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///CONSTANTS\n#define MAXSTEPS 100\n#define MAXDIST 50.0\n#define SDEPS 0.01\n#define NORMALEPS 0.05 //.05\n#define D2R 0.0174533\n#define R2D 57.296\n#define PI 3.14159265\n#define IPI .318309886\n\n///CAMERA STUFF START\nstruct Camera\n{\n    vec3 position;\n    \n    vec3 right;\n    vec3 up;\n    vec3 forward;\n    \n    float fovX;\n    float fovY;\n    \n};\n\nCamera createCamera(vec3 pos, vec3 forward, vec3 up)\n{\n    return Camera(pos, cross(up, forward), up, forward, 90.0*D2R, 60.0*D2R);\n}\nCamera createForwardCamera(vec3 pos, float theta)\n{\n    return Camera(pos, vec3(cos(theta),0.0,sin(theta)), vec3(0.0,1.0,0.0), vec3(cos(theta+PI*0.5),0.0,sin(theta+PI*0.5)), 90.0*D2R, 60.0*D2R);\n}\n\nvec3 SS2CS(vec2 raySS, float fovX, float fovY)\n{\n    float z = 1.0;\n    return normalize(vec3(z*tan(fovX/2.0)*raySS.x, z*tan(fovY/2.0)*raySS.y, z));\n}\nvec3 SS2CS(vec2 raySS, Camera cam) {return SS2CS(raySS, cam.fovX, cam.fovY);}\n\nvec3 CS2WS(vec3 rayCS, vec3 right, vec3 forward, vec3 up)\n{\n    return vec3(dot(rayCS, right), dot(rayCS, up), dot(rayCS, forward));\n}\nvec3 CS2WS(vec3 rayCS, Camera cam) { return CS2WS(rayCS, cam.right, cam.forward, cam.up); }\n\n///SDF functions\nfloat sdSphere(vec3 p, vec4 sphere)\n{\n    return MAXDIST;\n    return length(p - sphere.xyz) - sphere.w;\n}\nfloat sampleFunc(float x)\n{\n    x = sqrt(PI*0.5*200.0 + pow(mod(x, sqrt(26.0*PI*200.0)),2.0));\n    return sin(x*x*0.005);\n}\n\n//Hallway Stuff\nfloat time;\nfloat bendTheta;\n\nvec2 sampleBendCurve(float z)\n{\n    z *= 0.1;\n\n    float y = 1.*15.*(sin(z*PI*.5/15.)*0.5+0.5)*sin(time+z*0.2)*1.5+cos(z)*2.0*(sin(0.8*time)*0.5+0.5)*2.0+3.0;          \n    float x = sin(z)*(sin(0.8*time)*0.5+0.5)*2.0+3.0;\n    \n    return .7*vec2(x, y);\n}\n\nfloat sdHallway(vec3 p, vec2 dimensions, vec3 right, float time)\n{\n    //p.z += time*24.0;\n    \n    vec3 origin = vec3(sampleBendCurve(p.z), p.z);\n    vec3 forward = normalize(vec3(sampleBendCurve(p.z+NORMALEPS), p.z+NORMALEPS) - origin);\n    \n    float len = p.z;//*.5;//p.z*(.7-abs(sin(time))*.4); //use arc length later\n    //float scaleFrom = p.z - 10.0;//p.z - mod(p.z, 100.0);\n    //len = (p.z - scaleFrom) * (.7-(sin(time*0.4))*.4) + scaleFrom;\n\n    vec3 up = cross(right, forward);\n    right = cross(forward, up);\n\n    p = p - origin;\n    p = vec3(dot(p, right), dot(p, up), dot(p, forward));\n    \n    dimensions += sampleFunc(len); //mod(len, 100.0) for some reason looks cool and not broken?\n    \n    return min(min(dimensions.x - p.x, dimensions.x + p.x), min(dimensions.y - p.y, dimensions.y + p.y));\n} \nfloat sdHallwayWorst(vec3 p, vec2 dimensions, vec3 right, float time)\n{\n \n    //used to just return here\n    float dist1 = sdHallway(p, dimensions, right, time);\n    \n    //worst case dist\n\n    float distReg = min(min(dimensions.x - p.x, dimensions.x + p.x), min(dimensions.y - p.y, dimensions.y + p.y));\n    dimensions += min(distReg, 1.0);\n    \n    float y = 0.0;\n    float xEps = mix(.2, 4., clamp((time - 0.0)/(40.0 - 0.0), 0.0, 1.0));//3.;\n    float distWorst = sqrt(xEps*xEps);\n    \n    return min(distWorst, dist1);\n} \n\nvec3 twistScene(vec3 p)\n{\n    //p.z += time*24.0;\n    \n    //rotation amount\n    float len = p.z; //use arc length later\n    float twistTheta = (len+time*4.0) * 0.05;\n    \n    //origin and rot axis\n    //vec3 origin = vec3(0.0);\n    //vec3 forward = vec3(0.0, 0.0, 1.0);\n    vec3 origin = vec3(sampleBendCurve(p.z), p.z);\n    vec3 forward = normalize(vec3(sampleBendCurve(p.z+NORMALEPS), p.z+NORMALEPS) - origin);\n    \n    //get axis' (don't matter as long as perp)\n    vec3 arb1 = vec3(0.0, 1.0, 0.0); //arbitrary vec -> right and up\n    vec3 arb2 = vec3(1.0, 0.0, 0.0);\n    \n    vec3 right = normalize(2.0 * normalize(cross(arb1, forward)) + 1.0 * normalize(cross(arb2, forward)));\n    vec3 up = cross(forward, right);\n\n    //convert to axis space\n    p = vec3(dot(p - origin, right), dot(p - origin, up), dot(p - origin, forward));\n    \n    //rotate about z in axis space\n    p = p.x * vec3(cos(twistTheta), sin(twistTheta), 0.0) + p.y * vec3(cos(twistTheta+PI*.5), sin(twistTheta+PI*.5), 0.0) + p.z * vec3(0.0, 0.0, 1.0);\n    \n    //convert back to world space\n    p = p.x * right + p.y * up + p.z * forward + origin;\n    \n    //p.z -= time*24.0;\n    \n    return p;\n}\n\n\n///RAYMARCHING and SDF sampling\n\n\nfloat sampleSDF(vec3 p)\n{\n    p = twistScene(p);\n    return sdHallway(p, vec2(5.0, 8.0), vec3(1.0, 0.0, 0.0), time);\n}\nfloat sampleSDFWorst(vec3 p)\n{\n    p = twistScene(p);\n    return sdHallwayWorst(p, vec2(5.0, 8.0), vec3(1.0, 0.0, 0.0), time);\n}\n\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(NORMALEPS*(1.0+4.0*smoothstep(80.0, 450.0, time)), 0.0);\n    \n    //this creates some other artifacts so if your computer doesn't have the ridging artifacts, turn this to 0\n    float scaleBandaid = 0.0;\n    vec3 scale = vec3(1.0) + scaleBandaid*normalize(vec3(sampleBendCurve(p.z+NORMALEPS), p.z+NORMALEPS) - vec3(sampleBendCurve(p.z), p.z));\n\n    return normalize(vec3(\n    (sampleSDF(p + e.xyy*scale.x) - sampleSDF(p - e.xyy*scale.x))/scale.x,\n    (sampleSDF(p + e.yxy*scale.y) - sampleSDF(p - e.yxy*scale.y))/scale.y,\n    (sampleSDF(p + e.yyx*scale.z) - sampleSDF(p - e.yyx*scale.z))/scale.z\n    ));\n}\n\nfloat trace(vec3 ro, vec3 rd, out int steps) //all WS and rd is normalized\n{\n    float dist = 0.0;\n    float sd;\n    \n    float startSign = sign(sampleSDF(ro));\n    \n    for(int i=0; i<MAXSTEPS; i++)\n    {\n        steps++;\n        sd = sampleSDF(ro + rd*dist);\n        dist += sd;\n        \n        if(abs(sd) <= SDEPS || dist >= MAXDIST + time*4.0*1.0 ) { return dist; }\n    }\n    \n    return dist;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}