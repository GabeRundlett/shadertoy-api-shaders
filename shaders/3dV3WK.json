{
    "Shader": {
        "info": {
            "date": "1698621422",
            "description": "stepped clouds.  or something.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dV3WK",
            "likes": 10,
            "name": "dalp Flat Clouds",
            "published": 3,
            "tags": [
                "clouds"
            ],
            "usePreview": 0,
            "username": "dalp",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "#define S(a,b,t) smoothstep(a,b,t)\nconst float LEVELS = 12.;\n\nfloat N21 (vec2 p) {\n    return fract(sin(p.x*122.+p.y*52453.)*244156.); // returns a single randomish number based on a coord input\n}\n\nvec2 N22(vec2 p) {\n    vec3 a = fract(p.xyx*vec3(123.34, 234.34, 345.65));\n\ta += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat SmoothNoise(vec2 uv) {\n \tvec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    lv = lv*lv*(3.-2.*lv);\n    \n    float bl = N21(id);\n    float br = N21(id+vec2(1,0));\n    float b = mix(bl, br, lv.x);\n    float tl = N21(id+vec2(0,1));\n    float tr = N21(id+vec2(1,1));\n    float t = mix(tl, tr, lv.x);\n    \n    return mix(b,t,lv.y);\n}\n\nfloat SmoothNoise2(vec2 uv,float d) {\n    float c;\n    float uvscale = 4.;\n    float detail = 1.;\n    for (float i=1.;i<=d;i++) {\n    \tc += SmoothNoise(uv*uvscale)*detail;\n        detail *= 0.5;\n        uvscale *= 2.;\n    }\n    return c/1.3;;\n}\n\nfloat GetClouds(vec2 uv, float t, float d) {\n    float speed = sin(t)*.5+.5;\n    // put a thing in here so that whenever the mix is fully one way or another, the 'hidden' one changes\n    float pitime = floor((t - (3.141*.5)) / 6.282);\n    float pitime2 = floor((t - (3.141*1.5)) / 6.282);\n    vec2 offs = vec2(-2.,-2.);\n    vec2 target1 = uv+(offs*pitime);\n    vec2 target2 = uv+vec2(11.,22.)+(offs*pitime2);\n    \n    // pull two noise maps\n    float c1 = SmoothNoise2(target1, d);\n    float c2 = SmoothNoise2(target2, d);\n    float c = mix(c1,c2,speed);                 \n\t\n    c = floor(c*LEVELS)/LEVELS;\n    \n    return c;\n}\n\n// a lot of help here from https://www.shadertoy.com/view/XdyXz3\n// mostly for a better version of the stepping/depth mechanic, and the bevelling trick\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime*1.+m.x+(m.y*4.);\n    vec2 offset = vec2(sin(t)*0.006,cos(t)*0.006);\n    vec3 col = vec3(0.);\n    \n    uv += iTime*0.02;  // slow diagonal move\n\tfloat detail = 5.; // 1-6 working range\n\n    // Spin that shit ( a little bit )\n    float si = sin(t*.02);\n    float co = cos(t*.02);\n    mat2 rot = mat2(co,-si,si,co);\n    uv *= rot;\n    \n    //if (mod(iTime,3.)<.5) detail -= 2.;\n    \n    float c = GetClouds(uv,t,detail);\n    float edge = GetClouds(uv+offset,t,detail);\n    \n    //calc HSV color (taken from https://www.shadertoy.com/view/XdyXz3)\n    float h = c*.9 - .2; //rainbow hue\n    float s = 0.5;\n    float v = 0.9 - ( c*(detail*.13) ); //deeper is darker\n    \n    v -= c-edge;\n    \n    col = hsv2rgb(vec3(h,s,v));\n \n    fragColor = vec4(col,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}