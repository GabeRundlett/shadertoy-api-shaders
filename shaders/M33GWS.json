{
    "Shader": {
        "info": {
            "date": "1716928485",
            "description": "3d fractal with trapping music",
            "flags": 8,
            "hasliked": 0,
            "id": "M33GWS",
            "likes": 9,
            "name": "Logisogin 16 (music)",
            "published": 3,
            "tags": [
                "procedural",
                "fractal",
                "sound",
                "music",
                "logisogin"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "vec3 transform(in vec3 p, in int itr) {\n    float t = p.x*0.1+0.5;\n    p.x = fract(p.x);\n    mat2 mat = mat2(cos(t), -sin(t), sin(t), cos(t));\n    for (int i = 0; i < itr; i++) {\n        p.xy *= mat;\n        p.yz *= mat;\n        p.xz *= mat;\n        p = abs(p)-0.5;\n        p *= 2.0;\n    }\n    return p;\n}\n\nfloat sdf(in vec3 p) {\n    vec3 pp = p;\n    p = transform(p, 10);\n    return max((length(p))*pow(2., -float(10.)), -(length(pp.yz)-0.05))*0.5;\n}\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n//iq's noise\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\nvec3 hsv( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nfloat fbm(in vec3 p) {\n    float sum = 0.0;\n    float l = 1.0;\n    for (int i = 0; i < 10; i++) {\n        sum += noise(p)*l;\n        p *= 2.0;\n        l *= 0.5;\n    }\n    return sum*0.5;\n}\nfloat hash11(float p)\n{\n\tvec3 p3 = fract(p * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract(fract(fract(p3.x)*100.*p3.y)*1000.*p3.z+dot(fract(p3), fract(p3.xzy)));//fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    if (iTime > 16.0) return exp(-(iTime-16.))*vec3(hsv(vec3(fbm(vec3(rd.yz*2.0, iTime*0.1))*(iTime-16.)*10., 1.0, 1.0)));\n\n    float d = 0.0;\n    for (int i = 0; i < 50; i++) {\n        float k = sdf(ro+rd*d);\n        d += k;\n        if (d > 1.) return vec3(0);\n        if (k < d*0.003) break;\n    }\n    vec3 p = ro+rd*d;\n    \n    return exp(-d*10.)*vec3(hsv(vec3(transform(p, 5).x*0.5+iTime, 1.0, 1.0)));//vec3(0.5+0.5*sin(noise(p)*iTime*10.+transform(p, 6)*2.+pow(sin(iTime)*0.5+0.5, 50.)*100.));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);\n    uv = mix(uv, floor(uv*100.)*0.01, fract(iTime*5.0));\n    vec3 ro = vec3(iTime*0.2, sin(iTime)*0.03, cos(iTime)*0.01);\n    vec3 rd = normalize(vec3(1, uv));\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy+vec2(hash11(uv.x*100.), hash11(uv.y*100.))*5.0-2.5), 0);\n    fragColor = vec4(getColor(ro, rd), 1);\n    fragColor = sin(0.5/fragColor+iTime);\n    //fragColor = sin(fragColor*10.+iTime*length(uv)*.0)*0.5+0.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash(float p)\n{\n\tvec3 p3 = fract(p * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract(fract(fract(p3.x)*100.*p3.y)*1000.*p3.z+dot(fract(p3), fract(p3.xzy)));//fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nfloat noise(float p) {\n    float f = fract(p);\n    f = f*f*(3.-2.*f);\n    return mix(hash(floor(p)*0.001), hash(0.001*floor(p+1.)), f);\n}\n\nvec2 h(in float time) {\n    float t = time*iSampleRate;\n    float k = mod(floor(time*0.5), 3.0);\n    float fa = t*0.01*floor(1.0+log2(fract(time-1.0)*(64.0+64.*mod(floor(time*(k+1.0)+0.125*k), 2.0))+1.0));\n    float z = (1./(noise(t)+0.5)*0.4)*exp(-fract(time)*20.)+abs(fract(t*0.002)-0.5)*2.0-0.5+noise(t*(0.02+0.01*mod(floor(time*8.0), 3.0)))*exp(-fract(time))+noise(t*(0.03+0.01*mod(floor(time*4.0), 3.0)))*exp(-fract(time));\n    return vec2(z);//vec2(mix(z, p, mix(0.25, 0.6, sin(time*0.5)*0.5+0.5))+p1*0.25);\n\n}\nfloat[6] k = float[6](261.63, 277.18, 261.63, 329.63, 523.25, 1046.50);\nfloat[11] m = float[11](261.63, 329.63, 392.00, 261.63, 329.63, 392.00, 261.63, 329.63, 392.00, 293.66, 293.66);\nfloat line(float time) {\n    float fr = k[int(floor(time*10.))%6];\n    float main = (asin(sin(time*fr*6.282))*fract(time*fr));\n    fr = m[int(floor(time*10.))%6];\n    main = exp(-fract(time*5.))*mix(main, sin(6.282*time*fr+main*2.0), sin(time)*0.5+0.5);\n    float ff = floor(time*5.0)+floor(time*2.5);\n    bool a = mod(time, 1.0) > 0.5;\n    float freq = time*(400.+mod(ff, 3.0)*(a?100.:50.));\n    float k = mix(fract(time*5.), 1.0, sin(time)*0.5+0.5);\n    main = asin(sin(main*0.5+freq*6.282+fract(freq*0.25)*k));\n    return clamp(main, -1.0, 1.0);\n}\nvec2 mainSound( int samp, float time )\n{\n    if (time > 16.) {\n        float t = time-16.;\n        return vec2((0.75+0.25*cos(t*100.0))*noise(log(t)*1000.)*exp(-t));\n    }\n    float m = float[3](2.5, 2., 10.0)[int(floor(time*0.5))%3];\n    return vec2(h(time*m))*0.5+0.5*vec2(mix(line(time), line(time*2.0), noise(time*0.5)));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}