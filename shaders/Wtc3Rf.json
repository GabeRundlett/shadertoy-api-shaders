{
    "Shader": {
        "info": {
            "date": "1577010456",
            "description": "After the apocalypse, next stage ... (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtc3Rf",
            "likes": 14,
            "name": "Planet Reboot 2",
            "published": 3,
            "tags": [
                "water",
                "life",
                "tube",
                "symmetry",
                "kinematics",
                "flexible"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 461
        },
        "renderpass": [
            {
                "code": "// \"Planet Reboot 2\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HsvToRgb (vec3 c);\nmat3 StdVuMat (float el, float az);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir;\nvec2 gId, slcLim;\nfloat dstFar, tCur, tLoc, rBase, rTube, sLoopV[2], rLoop, nArm, armUp, armId,\n   hgSize, bbHt, bbRad, bRot, szFac, hVal;\nint idObj;\nconst int idArm = 1, idArmE = 2, idCylL = 3, idCylU = 4, idBub = 5;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvoid SetObjConf ()\n{\n  float tCyc;\n  hVal = Hashfv2 (37. * gId + 11.11);\n  tCyc = 6. + 4. * hVal;\n  bRot = 2. * pi * hVal;\n  tLoc = tCur + tCyc * hVal;\n  nArm = 5. + floor (4. * hVal);\n  szFac = (6. + 4. * hVal) / 10.;\n  armUp = floor (mod (tLoc / tCyc, nArm));\n  sLoopV[0] = 0.35 + 20. * pow (1. - SmoothBump (0.25, 0.75, 0.22, mod (tLoc / tCyc, 1.)), 8.);\n  sLoopV[1] = 0.35 + 20.;\n  slcLim = - sin (pi / nArm + vec2 (0.5 * pi, 0.));\n  bbHt = 1. + mod (3. * tCur + 0.5 * hVal * dstFar, 0.5 * dstFar);\n  bbRad = 0.03 * (1. + hVal);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 arcLim;\n  float dMin, d, db, s, r, aLoop, dLoop;\n  dMin = dstFar;\n  if (hVal > 0.03) {\n    dMin /= szFac;\n    p.xz -= HexToPix (gId * hgSize);\n    p /= szFac;\n    p.y -= rTube + 0.15;\n    p.xz = Rot2D (p.xz, bRot);\n    q = p;\n    q.xz = Rot2D (q.xz, (2. * pi / nArm) * armUp);\n    db = dot (vec2 (abs (q.z), - q.x), slcLim);\n    dLoop = rLoop * sLoopV[0];\n    aLoop = 0.25 * pi / sLoopV[0];\n    arcLim = sin (0.25 * pi / sLoopV[0] + vec2 (0., 0.5 * pi));\n    q = p;\n    q.xz = Rot2D (q.xz, (2. * pi / nArm) * armUp);\n    q.xy = Rot2D (vec2 (rBase - q.x, q.y - dLoop), aLoop - 0.5 * pi);\n    s = mod ((32. / aLoop) * atan (q.y, - q.x) / pi + 0.5 - 2. * tLoc, 1.);\n    r = length (vec2 (length (q.xy) - dLoop, q.z)) - rTube;\n    d = max (r - 0.03 * SmoothBump (0.25, 0.75, 0.15, s), - r - 0.15);\n    d = max (d, dot (vec2 (q.x, abs (q.y)), arcLim));\n    if (d < dMin) armId = armUp;\n    DMIN (idArm);\n    q.xy = Rot2D (q.xy, aLoop) - vec2 (- dLoop, 0.27);\n    d = max (PrRoundCylDf (q.xzy, rTube + 0.03, 0.1, 0.3), rTube - 0.15 - length (q.xz));\n    if (d < dMin) armId = armUp;\n    DMIN (idArmE);\n    dLoop = rLoop * sLoopV[1];\n    aLoop = 0.25 * pi / sLoopV[1];\n    arcLim = sin (0.25 * pi / sLoopV[1] + vec2 (0., 0.5 * pi));\n    q = p;\n    if (mod (nArm, 2.) != 0.) q.xz = Rot2D (q.xz, pi / nArm);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (nArm * atan (q.z, - q.x) / (2. * pi) + 0.5) / nArm));\n    q.xy = Rot2D (vec2 (rBase + q.x, q.y - dLoop), aLoop - 0.5 * pi);\n    s = mod ((32. / aLoop) * atan (q.y, - q.x) / pi + 0.5 + 0.5 * tLoc, 1.);\n    r = length (vec2 (length (q.xy) - dLoop, q.z)) - rTube;\n    d = max (r - 0.03 * SmoothBump (0.25, 0.75, 0.15, s), - r - 0.15);\n    d = max (max (d, dot (vec2 (q.x, abs (q.y)), arcLim)), db);\n    if (d < dMin) armId = -1.;\n    DMIN (idArm);\n    q.xy = Rot2D (q.xy, aLoop) - vec2 (- dLoop, 0.27);\n    d = max (max (PrRoundCylDf (q.xzy, rTube + 0.03, 0.1, 0.3),\n       rTube - 0.15 - length (q.xz)), db);\n    if (d < dMin) armId = -1.;\n    DMIN (idArmE);\n    q = p;\n    d = PrRoundCylDf (q.xzy, rBase + 0.05, 0.15, rTube + 0.1);\n    DMIN (idCylL);\n    q = p;\n    q.y -= 3. * rTube;\n    d = SmoothMin (d, PrRoundCylDf (q.xzy, (0.7 - 0.2 * (q.y / (3. * rTube))) * rBase,\n       0.1, 3. * rTube), 0.1);\n    DMIN (idCylU);\n    q = p;\n    q.y -= bbHt;\n    d = PrSphDf (q, bbRad);\n    DMIN (idBub);\n    dMin *= 0.8 * szFac;\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetObjConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.03;\n  gIdP = vec2 (-99.);\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetObjConf ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nfloat RippleHt (vec2 p)\n{\n  vec2 q;\n  float s1, s2;\n  q = Rot2D (p, -0.02 * pi);\n  s1 = abs (sin (4. * pi * abs (q.x + 1.5 * Fbm2 (0.5 * q))));\n  s1 = (1. - s1) * (s1 + sqrt (1. - s1 * s1));\n  q = Rot2D (p, 0.01 * pi);\n  s2 = abs (sin (3.1 * pi * abs (q.x + 1.9 * Fbm2 (0.3 * q))));\n  s2 = (1. - s2) * (s2 + sqrt (1. - s2 * s2));\n  return mix (s1, s2, 0.1 + 0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * p)));\n}\n\nvec4 RippleNorm (vec2 p, vec3 vn, float f)\n{\n  vec2 e = vec2 (0.002, 0.);\n  float h;\n  h = RippleHt (p);\n  vn.xy = Rot2D (vn.xy, f * (RippleHt (p + e) - h));\n  vn.zy = Rot2D (vn.zy, f * (RippleHt (p + e.yx) - h));\n  return vec4 (vn, h);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = 2. * tCur;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return mix (vec3 (0.1, 0.7, 0.6), vec3 (0.3, 0.5, 1.), 0.5 + 0.5 * rd.y) *\n     (0.24 + 0.44 * (rd.y + 1.) * (rd.y + 1.)) * (1. + 0.1 * gd);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, vn4;\n  vec3 p, col, c, bgCol, vn;\n  float dstObj, s, sh;\n  bool isBg, isLit;\n  rTube = 0.3;\n  rBase = 1.8;\n  rLoop = 5.;\n  dstObj = ObjRay (ro, rd);\n  isBg = false;\n  isLit = false;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    p = ro;\n    gId = PixToHex (p.xz / hgSize);\n    SetObjConf ();\n    p.xz -= HexToPix (gId * hgSize);\n    c = HsvToRgb (vec3 (mod (37.3 * hVal, 1.), 0.2, 1.));\n    if (idObj == idArm) {\n      col4 = vec4 (0.9, 0.9, 1., 0.);\n    } else if (idObj == idArmE) {\n      if (armId == armUp) col4 = vec4 (0.7 + 0.3 * sin (5. * tLoc), 0., 0., -1.);\n      else col4 = vec4 (c, 0.);\n    } else if (idObj == idCylL) {\n      col4 = vec4 (0.8 * c, 0.);\n    } else if (idObj == idCylU) {\n      col4 = vec4 (c, 0.);\n      s = length (p.xz) - rTube - 0.2;\n      if (s < 0.) {\n        if (s < -0.1) col4 = vec4 (vec3 (0.6 + 0.4 * sin (5. * tLoc), 0., 0.), -1.);\n        else col4.rgb *= 0.7;\n      }\n    } else if (idObj == idBub) {\n      col4 = vec4 (mix (vec3 (1.2), BgCol (reflect (rd, vn)), 0.5), -1.);\n    }\n    if (col4.a >= 0.) isLit = true;\n  } else if (rd.y < 0. && (- ro.y / rd.y) < dstFar) {\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    col4 = mix (vec4 (0.3, 0.4, 0.3, 0.), vec4 (0.2, 0.3, 0.3, 0.),\n       0.3 + 0.4 * smoothstep (0.4, 0.6, Fbm2 (4. * ro.xz))) * (1. +\n       0.2 * smoothstep (0.3, 0.7, Fbm2 (0.5 * ro.xz)));\n    vn4 = RippleNorm (0.1 * ro.xz, vec3 (0., 1., 0.), 6.);\n    vn = VaryNf (2. * ro, vn4.xyz, 4. - 3.5 * smoothstep (0.2, 0.5, dstObj / dstFar));\n    col4 *= 0.9 + 0.1 * smoothstep (0.1, 0.3, vn4.w);\n    isLit = true;\n  } else isBg = true;\n  bgCol = BgCol (rd);\n  if (isBg) {\n    col = bgCol;\n  } else {\n    if (isLit) {\n      sh = min (ObjSShadow (ro, ltDir), 1. - 0.2 * smoothstep (0.4, 0.6,\n         Fbm2 (0.1 * ro.xz + 0.2 * tCur)));\n      col = col4.rgb * (0.3 * bgCol + 0.7 * sh * max (dot (vn, ltDir), 0.));\n    } else {\n      col = col4.rgb * (0.3 + 0.7 * max (- dot (vn, rd), 0.));\n    }\n    col = mix (col, bgCol, smoothstep (0.3, 1., dstObj / dstFar));\n  }\n  col = pow (clamp (col, 0., 1.), vec3 (1.1, 1.1, 0.9));\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  hgSize = 12.;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.3 * pi * mPtr.y;\n  } else {\n    az += 0.4 * pi * (2. * mod (floor (0.015 * tCur), 2.) - 1.) *\n       SmoothBump (0.3, 0.7, 0.15, mod (0.015 * tCur, 1.));\n    el -= 0.05 * pi * sin (0.017 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (0., 20., 5. + 1.5 * tCur);\n  zmFac = 3.;\n  dstFar = 150.;\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}