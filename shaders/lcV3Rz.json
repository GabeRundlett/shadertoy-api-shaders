{
    "Shader": {
        "info": {
            "date": "1712345100",
            "description": "alternative version of my shader from Revision24 showdown final",
            "flags": 0,
            "hasliked": 0,
            "id": "lcV3Rz",
            "likes": 75,
            "name": "Devil Glass",
            "published": 3,
            "tags": [
                "shadershowdown"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1541
        },
        "renderpass": [
            {
                "code": "\n// alternative version of my shader from Revision24 showdown final\n// original version:\n// https://livecode.demozoo.org/event/2024_03_29_shader_showdown_revision_2024.html\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat gyroid (vec3 p) { return dot(cos(p),sin(p.yzx)); }\nfloat fbm(vec3 p)\n{\n  float result = 0.;\n  float a = .5;\n  for (float i = 0.; i < 3.; ++i)\n  {\n    p += result;\n    p.z += iTime*.2;\n    result += abs(gyroid(p/a)*a);\n    a /= 2.;\n  }\n  return result;\n}\n\nfloat map(vec3 p)\n{\n  float dist = 100.;\n  \n  p.xz *= rot(iTime * .2);\n  p.xy *= rot(iTime * .1);\n  vec3 q = p;\n  \n  p = abs(p)-1.3;\n  dist = max(p.x, max(p.y, p.z));\n  dist -= fbm(q)*.2;\n  dist = abs(dist)-.03;\n  \n  return dist * .5;\n}\n\nvec3 getResult(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 color = vec3(smoothstep(1., -1., length(uv)));\n    \n    vec3 pos = vec3(0,0,7);\n    vec3 ray = normalize(vec3(uv, -1.5));\n    float total = 0.;\n    float shade = 0.;\n    for (float i = 100.; i > 0.; --i)\n    {\n        float dist = map(pos);\n        if (dist < .001)\n        {\n            shade += 0.1;\n            dist = 0.002;\n        }\n        if (total > 10.) return color;\n        total += dist;\n        pos += ray * dist;\n    }\n\n    if (total < 10.)\n    {\n        color = 0.5 + 0.5 * cos(vec3(1,2,3)*5.5+shade);\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(getResult(fragCoord),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}