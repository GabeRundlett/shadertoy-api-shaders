{
    "Shader": {
        "info": {
            "date": "1612992693",
            "description": "Torus Knots practice ",
            "flags": 0,
            "hasliked": 0,
            "id": "tltBzS",
            "likes": 3,
            "name": "infinity knots",
            "published": 3,
            "tags": [
                "3d",
                "shape",
                "primitive"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "//tutorial https://youtu.be/2dzJZx0yngg\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n\nmat2 Rot(float a){\n    float s=sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,233.53));\n    p+=dot(p,p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap)/dot(ab,ab);\n    t = clamp(t,0.,1.);//never fall outside of A and B\n    vec3 c= a+t*ab;\n    float d = length(p-c)-r;\n    return d;\n    \n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap)/dot(ab,ab);\n    t = clamp(t,0.,1.);//never fall outside of A and B\n    \n    vec3 c= a+t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x,y),0.));\n    float i = min(max(x,y),0.);//performance penalty \n    \n    //make it smoother \n    return e+i;\n    \n}\n\nfloat sdTorus(vec3 p, vec2 r){\n    //r.x would be r1, r.y would be r2\n    float x = length(p.xz)-r.x;\n    vec2 cp = vec2(x,p.y);\n    float a = atan(p.x,p.z);\n    cp*=Rot(a*3.+iTime);    \n    cp.y=abs(cp.y)-mix(0.2,.5,abs(sin(iTime)));//-mix(0.2,.5,abs(sin(iTime)))\n    float d = length(cp)-r.y;\n    \n    return d*0.5;\n}\n\nfloat dBox(vec3 p, vec3 s){\n    return length(max(abs(p)-s,0.));\n}\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0,3.,6.,1);\n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n   \n    //bounce from left to right \n    //float xDis = mix(-1.5,1.5,sin(iTime));\n    float td = sdTorus(p-vec3(1.),vec2(2.,.25));//vec3(3.,2.,8)\n\n  /***  \n    float cd = sdCapsule(p, vec3(0,1,6), vec3(1,2,6),.2);\n    float cd1 = sdCapsule(p, vec3(0,2,6), vec3(1,2,6),.5);\n    float cd2 = sdCapsule(p, vec3(0,3,6), vec3(1,2,6),.2);\n    float cd3 = sdCapsule(p, vec3(1,2,6), vec3(1.5,2,6),.2);\n    float bd = dBox(p-vec3(0.,2.,8),vec3(.8));\n    float cyld = sdCylinder(p, vec3(0,.3,3), vec3(3,1,5),.2);\n  ***/\n    \n    float d = min(td,planeDist);\n    \n    return d; \n    \n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for (int i =0; i<MAX_STEPS; i++){\n        vec3 p = ro+dO*rd;\n        float dS = GetDist(p);\n        dO +=dS;\n        if (dS<SURF_DIST|| dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n   vec2 e = vec2(.01,0.);\n   float d = GetDist(p);\n   vec3 n = d-vec3(\n           GetDist(p-e.xyy),\n           GetDist(p-e.yxy),\n           GetDist(p-e.yyx));\n   return normalize(n);\n}\n\nfloat GetLight (vec3 p){\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz+=vec2(sin(iTime),cos(iTime))*2.;\n    \n    vec3 l = normalize (lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n   \n    if (d<length(lightPos-p)) dif*=.1;\n     \n    return dif;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n//getting the background using ray direction\nvec3 Bg(vec3 rd){\n    float k = rd.y*.5+.5;\n    vec3 col = mix(vec3(.2,abs(sin(iTime))*.2,.1),vec3(.2,.5,abs(sin(iTime))),k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(1,4,-4);\n    ro.yz*=Rot(-m.y*3.14+1.);\n    ro.xz*= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv,ro,vec3(0),1.);\n\n    col+=Bg(rd);\n    float d = RayMarch(ro,rd);\n    \n    if(d<MAX_DIST){\n    vec3 p = ro+rd*d;\n    vec3 n = GetNormal(p);\n    vec3 r = reflect(rd,n);\n    \n    \n    float spec = pow(max(0.,r.y),5.*mix(0.5,.8,cos(sin(iTime))));\n    \n    //float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    //get diffused light     \n    float dif = GetLight(p);\n    col=mix(Bg(r*abs(tan(iTime))),vec3(dif),.2)+spec;\n    //col=vec3(spec);\n  }\n\n    col=pow(col,vec3(.4545));//gamma creation\n   \n\n    fragColor = vec4(col,1.);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}