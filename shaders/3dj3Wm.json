{
    "Shader": {
        "info": {
            "date": "1549041533",
            "description": "precision is always finite with float operations, but it depends on the value.\nFrom bottom to top: sqrt, sqrt(1-xÂ²), atan, log, sin. Vertical #range: 1E-6\n( NB: error is computing by applying the inverse function so it shows the cumulated error of both ).",
            "flags": 0,
            "hasliked": 0,
            "id": "3dj3Wm",
            "likes": 7,
            "name": "precision of operators",
            "published": 3,
            "tags": [
                "glsl",
                "ieeefloats"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 545
        },
        "renderpass": [
            {
                "code": "#define range 1e-6  // error majorant ( i.e. display range )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, U = u/R;\n    float x = 2.*U.x, y = U.y*5., i=floor(y), v,e; \n    \n    if (i==0.) v = sqrt(x),      e = (v*v-x) / range;\n    if (i==1.) v = sqrt(1.-x*x), e = ( sqrt(1.-v*v) - x ) / range;\n    if (i==2.) v = atan(x),      e = ( tan(v)  - x ) / range;\n    if (i==3.) v = log(x),       e = ( exp(v)  - x ) / range;\n    if (i==4.) v = sin(x),       e = ( asin(v) - x ) / range;\n    \n    O = vec4( abs(fract(y) - .5 - e) < 2./R.y );\n    O += .3*vec4( fract(y) < .5 + e ); \n    O.x += float(isnan(e));\n    \n    if ( int(u.y)%int(iResolution.y/5.) == 0 ) O = vec4(1,0,0,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}