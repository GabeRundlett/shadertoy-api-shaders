{
    "Shader": {
        "info": {
            "date": "1489294609",
            "description": " A basic chip-8 emulator/interpreter. The rom can be changed in Buf A. Change ROM_NAME, recompile & reset.\nChange VIEW_MODE to DEBUG to see the ram & register info. ",
            "flags": 48,
            "hasliked": 0,
            "id": "4ld3DM",
            "likes": 46,
            "name": "Chip-8 Emulator",
            "published": 3,
            "tags": [
                "cpu",
                "interpreter",
                "emulator",
                "chip8"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 4137
        },
        "renderpass": [
            {
                "code": "/*\nGLSL Chip-8 Emulator/Interpreter\n\nFeatures not yet supported:\n- Sprite collision flag (V[0xF] = 1 if 2 white pixels overlap)\n- Keypad input (Hex keypad 0-9, A-F)\n- Sound (no buffer inputs for sound shaders)\n\nInstruction set reference:\nhttp://devernay.free.fr/hacks/chip8/C8TECH10.HTM\n*/\n\n#define CONTROL_BASE ivec2(0,0)\n#define REGISTER_BASE ivec2(1,0)\n#define STACK_BASE ivec2(5,0)\n#define GFX_BASE vec2(64,0)\n#define GFX_SIZE vec2(64,32)\n#define MEM_BASE vec2(0,1)\n#define MEM_WIDTH 64\n\n#define TEXT_SCALE vec2(0.03,0.04)\n\n#define BUFFER 0\n#define DEBUG 1\n#define FULLSCREEN 2\n\n#define VIEW_MODE FULLSCREEN\n\nvec2 HexChar(float d)\n{\n    d = mod(floor(d), 16.0);\n    \n    if(d < 10.0)\n    {\n        return vec2(d, 12.0);\n    }\n    else\n    {\n        return vec2(d - 9.0, 11.0);\n    }\n}\n\nfloat Print8(vec2 p, float v, vec2 uv)\n{\n    vec2 t = floor(uv / TEXT_SCALE);\n    t -= p;\n    uv = mod(uv, TEXT_SCALE) / TEXT_SCALE;\n    if(t.y == 0.0 && t.x >= 0.0 && t.x < 2.0)\n    {\n        float d = mod(floor(v / pow(16.0, 1.0 - t.x)), 16.0);\n        \n        return texture(iChannel1, ((uv + HexChar(d))/16.0), -10.0).r;\n    }\n    return 0.0;\n}\n\nfloat Print16(vec2 p, float v, vec2 uv)\n{\n    vec2 t = floor(uv / TEXT_SCALE);\n    t -= p;\n    uv = mod(uv, TEXT_SCALE) / TEXT_SCALE;\n    if(t.y == 0.0 && t.x >= 0.0 && t.x < 4.0)\n    {\n        float d = mod(floor(v / pow(16.0, 3.0 - t.x)), 16.0);\n        \n        return texture(iChannel1, ((uv + HexChar(d))/16.0), -10.0).r;\n    }\n    return 0.0;\n}\n\nvec4 subTex(sampler2D tex, vec2 o, vec2 s, vec2 p, vec2 res)\n{\n    vec2 scale = s / res;\n    vec2 orig = o / res;\n    \n    return texture(tex, orig + p * scale);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    #if(VIEW_MODE == BUFFER)\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord),0);\n    #endif\n    \n    #if(VIEW_MODE == DEBUG)\n    vec2 b = floor(uv * 2.0);\n    vec2 buv = fract(uv * 2.0);\n\n    //Display\n    if(b == vec2(1,1))\n    {\n        fragColor = subTex(iChannel0, GFX_BASE, GFX_SIZE, buv, res);\n    }\n\n    //RAM\n    if(b == vec2(1,0))\n    {\n        fragColor = subTex(iChannel0, MEM_BASE, vec2(MEM_WIDTH), buv, res) / 255.0;\n    }\n\n    //Registers V[0-F], Stack, Control registers (PC, I, SP, T)\n    if(b.x < 1.0)\n    {\n        float c = 0.0;\n\n        for(int i = 0;i < 4;i++)\n        {\n            //Registers (left)\n            vec4 reg = texelFetch(iChannel0, REGISTER_BASE + ivec2(i,0), 0);\n            c += Print8(vec2(0, i*4 + 0), reg[0], uv);\n            c += Print8(vec2(0, i*4 + 1), reg[1], uv);\n            c += Print8(vec2(0, i*4 + 2), reg[2], uv);\n            c += Print8(vec2(0, i*4 + 3), reg[3], uv);\n\n            //Stack (center)\n            vec4 stk = texelFetch(iChannel0, STACK_BASE + ivec2(i,0), 0);\n            c += Print16(vec2(3, i*4 + 0), stk[0], uv);\n            c += Print16(vec2(3, i*4 + 1), stk[1], uv);\n            c += Print16(vec2(3, i*4 + 2), stk[2], uv);\n            c += Print16(vec2(3, i*4 + 3), stk[3], uv);\n        }\n\n        //Control registers (right)\n        vec4 ctl = texelFetch(iChannel0, CONTROL_BASE, 0);\n        c += Print16(vec2(8, 0), ctl[0], uv); //PC\n        c += Print16(vec2(8, 1), ctl[2], uv); //I\n        c += Print8(vec2(8, 2), ctl[1], uv); //SP\n        c += Print8(vec2(8, 3), ctl[3], uv);  //T\n\n        fragColor = vec4(c);\n    }\n    #endif\n    \n    #if(VIEW_MODE == FULLSCREEN)\n    fragColor = subTex(iChannel0, GFX_BASE, GFX_SIZE, uv, res);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nRom Storage\n\nThe arrays are raw hex dumps of the roms grouped into 32-bit ints.\n\nThe 4 bytes in each 32-bit int are in big-endian order.\nex:\n0x00E06A00,0x69006B0A,0x6000A2CA,...\n  ^^^^                      ^^^^\n  first instuction          last instruction\n\nRoms are loaded into ram at address 0x200 (512) leaving 3584 bytes for the program/data.\n\nInstruction set reference:\nhttp://devernay.free.fr/hacks/chip8/C8TECH10.HTM\n\nFIX - 2017/05/07:\nDefining the rom arrays in global scope caused massive slowdowns despite not being used after frame 0.\nMoving them into the mainImage function after the frame check fixed this.\n*/\n\n#define SHADERTOY 0\n#define MAZE 1\n#define IBM 2\n#define ZERO 3\n#define SIERPINSKI 4\n\n#define ROM_NAME SHADERTOY\n\n#define PROG_START 0x200\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame != 0){ texelFetch(iChannel0, ivec2(fragCoord), 0); return; }\n    \n    //---Roms---\n    //Shadertoy Sine Scroller - Flyguy\n    #if(ROM_NAME == SHADERTOY)\n    const int[] rom = int[](\n        0x00E06A00,0x69006B0A,0x6000A2CA,0xD903601D,0xA2C9D903,0x79083940,0x12086900,0x60007AFF,\n        0x6C0F8AC2,0xA2CDFA1E,0xF8656C05,0x7BFE89B0,0xA29CD905,0x7905FC1E,0xD9157905,0xFC1ED925,\n        0x7905FC1E,0xD9357905,0xFC1ED945,0x7905FC1E,0xD9557905,0xFC1ED965,0x7905FC1E,0xD9757905,\n        0xFC1ED985,0xA29C89B0,0xD9057905,0xFC1ED915,0x7905FC1E,0xD9257905,0xFC1ED935,0x7905FC1E,\n        0xD9457905,0xFC1ED955,0x7905FC1E,0xD9657905,0xFC1ED975,0x7905FC1E,0xD985121E,0x70806010,\n        0xE09090F0,0x90906090,0xF09090E0,0x909090E0,0xF080E080,0xF0E090E0,0xA0907020,0x20202060,\n        0x90909060,0x90907010,0xE0FFAA55,0xFF0D1013,0x15161513,0x100D0A07,0x05040507,0x0A0D1013,\n        0x15161513,0x100D0A07,0x05040507,0x0A000000\n    );\n    #endif\n\n    //Maze - David Winter\n    #if(ROM_NAME == MAZE)\n    const int[] rom = int[](\n        0xA21EC201, 0x3201A21A, 0xD0147004, 0x30401200, 0x60007104, 0x31201200, 0x12188040, 0x20102040, \n        0x80100000\n    );\n    #endif\n\n    //IBM Logo - (Unknown)\n    #if(ROM_NAME == IBM)\n    const int[] rom = int[](\n        0x00E0A22A,0x600C6108,0xD01F7009,0xA239D01F,0xA2487008,0xD01F7004,0xA257D01F,0x7008A266,\n        0xD01F7008,0xA275D01F,0x1228FF00,0xFF003C00,0x3C003C00,0x3C00FF00,0xFFFF00FF,0x0038003F,\n        0x003F0038,0x00FF00FF,0x8000E000,0xE0008000,0x8000E000,0xE00080F8,0x00FC003E,0x003F003B,\n        0x003900F8,0x00F80300,0x07000F00,0xBF00FB00,0xF300E300,0x43E000E0,0x00800080,0x00800080,\n        0x00E000E0\n    );\n    #endif\n\n    //Zero Demo - zeroZshadow\n    #if(ROM_NAME == ZERO)\n    const int[] rom = int[](\n        0x600A6505, 0x660A670F, 0x68146101, 0x62016301, 0x6401600A, 0xA278D056, 0x700AA27E, 0xD066700A, \n        0xA284D076, 0x700AA28A, 0xD0866A03, 0xFA15600A, 0xA278D056, 0x451461FF, 0x45016101, 0x8514D056, \n        0x700AA27E, 0xD0664614, 0x62FF4601, 0x62018624, 0xD066700A, 0xA284D076, 0x471463FF, 0x47016301, \n        0x8734D076, 0x700AA28A, 0xD0864814, 0x64FF4801, 0x64018844, 0xD086122A, 0xFF030C30, 0xC0FFFFC0, \n        0xC0FCC0FF, 0xF0CCCCF0, 0xCCC33CC3, 0xC3C3C33C\n    );\n    #endif\n\n    //Sierpinski Triangle Demo - Sergey Naydenov\n    #if(ROM_NAME == SIERPINSKI)\n    const int[] rom = int[](\n        0x12054338, 0x50600085, 0x00600181, 0x50A3E6F1, 0x1EF05560, 0x1F8A0060, 0x008B00A3, 0xC2F065A3, \n        0xC2DAB160, 0x01A3C3F0, 0x55601FA4, 0x06F05560, 0x01A3C4F0, 0x55A3C3F0, 0x65850060, 0x01810080, \n        0x508014A4, 0x07F055A3, 0xC4F06585, 0x00600181, 0x00805080, 0x15A3C5F0, 0x55A3C4F0, 0x658500A3, \n        0xC5F065A3, 0xE6F01EF0, 0x658600A3, 0xC4F06587, 0x00600181, 0x00807080, 0x14A3E6F0, 0x1EF06581, \n        0x00806080, 0x138150A3, 0xC6F11EF0, 0x55A3C5F0, 0x658500A3, 0xC5F065A3, 0xC6F01EF0, 0x658150A3, \n        0xE6F11EF0, 0x55A3C4F0, 0x65A3C6F0, 0x1EF06585, 0x00600181, 0x5050106F, 0x013F0012, 0xF9A3C4F0, \n        0x65850060, 0x1F810080, 0x5080148A, 0x00A3C3F0, 0x658B00A3, 0xC2F065A3, 0xC2DAB160, 0x1F8500A3, \n        0xC4F06581, 0x00805080, 0x158A00A3, 0xC3F0658B, 0x00A3C2F0, 0x65A3C2DA, 0xB1A3C4F0, 0x658500A4, \n        0x07F06581, 0x00805082, 0x10810581, 0x2090106F, 0x003F0113, 0x21A3C4F0, 0x657001A3, 0xC4F05512, \n        0x47A3C3F0, 0x658500A4, 0x06F06581, 0x00805082, 0x10810581, 0x2090106F, 0x003F0113, 0x49A3C3F0, \n        0x657001A3, 0xC3F05512, 0x2F134981, 0x00A40862, 0x018E25FE, 0x1EF06500, 0xEE620163, 0x00830481, \n        0x25310013, 0x5D803000, 0xEEA408FE, 0x1EF65566, 0x00820082, 0x153F0113, 0x95830083, 0x06841065, \n        0x01823082, 0x453F0113, 0x8F840E85, 0x0E138180, 0x45865413, 0x71F56580, 0x6000EE82, 0x0080153F, \n        0x00139B80, 0x2000EEA3, 0xBFF033F2, 0x65F029D3, 0x457306F1, 0x29D34573, 0x06F229D3, 0x4500EE28, \n        0x63298000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, \n        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, \n        0x00000000, 0x00000000, 0x00000000\n    );\n    #endif\n\n    //Built in hexadecimal font (0-9, A-F)\n    const int[] font = int[](\n        0xF0909090, 0xF0206020, 0x2070F010, 0xF080F0F0, 0x10F010F0,\n        0x9090F010, 0x10F080F0, 0x10F0F080, 0xF090F0F0, 0x10204040,\n        0xF090F090, 0xF0F090F0, 0x10F0F090, 0xF09090E0, 0x90E090E0,\n        0xF0808080, 0xF0E09090, 0x90E0F080, 0xF080F0F0, 0x80F08080 \n    );\n    \n    //Rom loading & unpacking\n    int addr = int(fragCoord.x) + int(fragCoord.y) * int(iResolution.x);\n\n    if(addr < font.length())\n    {\n        fragColor = vec4((ivec4(font[addr]) >> ivec4(24,16,8,0)) & 0xFF);\n    }\n    else\n    {\n        addr -= PROG_START/4;\n        if(addr >= 0 && addr < rom.length())\n        {\n            fragColor = vec4((ivec4(rom[addr]) >> ivec4(24,16,8,0)) & 0xFF);\n        }\n        else\n        {\n            fragColor = vec4(0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nGLSL Chip-8 Emulator/Interpreter\n\nFeatures not yet supported:\n- Sprite collision flag (V[0xF] = 1 if 2 white pixels overlap)\n- Keypad input (Hex keypad 0-9, A-F)\n- Sound (no buffer inputs for sound shaders)\n\nInstruction set reference:\nhttp://devernay.free.fr/hacks/chip8/C8TECH10.HTM\n*/\n\n//Offsets\n#define CONTROL_BASE ivec2(0,0)\n#define REGISTER_BASE ivec2(1,0)\n#define STACK_BASE ivec2(5,0)\n#define RND_BASE ivec2(9,0)\n#define MEM_BASE ivec2(0,1)\n#define GFX_BASE ivec2(64,0)\n\n//Parameters\n#define MEM_WIDTH 64 \t\t\t\t\t//Width of memory area in the buffer.\n#define GFX_SIZE ivec2(64,32) \t\t\t//Size of the emulated display\n#define RND_SEED 0x93B35B \t\t\t\t//Random seed\n#define ADDR_BITS 12 \t\t\t\t\t//Number of address bits\n#define ADDR_MAX ((1 << ADDR_BITS) - 1) //Max memory address\n#define PROG_START 0x200 \t\t\t\t//Program start (roms are loaded from here up)\n#define CLOCK 24\t\t\t\t\t\t//Instructions per frame (approx memory writes will reduce this)\n\n//General Utils\n#define inRange(x,o,s) ((x) >= (o) && (x) < (o)+(s))\n#define inRect(p,o,s) (all(greaterThanEqual(p, o)) && all(lessThan(p, (o) + (s))))\n#define bit(n,b) (((n) >> (b)) & 1)\n\n//Globals\nivec2 uv;\nvec4 frag;\n\n//CPU State\nint PC; //Program Counter\nint SP; //Stack pointer\nint I; //Index Register\nint T; //60hz Timer\n\nint RND = 0;\n\nbool memWrite = false;\n\nint V[16]; //General purpose registers V0 - VE, VF = flag\nint S[16]; //Call Stack\n\n\nstruct Opcode\n{\n    int op;\n    int nnn;\n    int n;\n    int x;\n    int y;\n    int kk;\n};\n\n//Read emulator state from the backbuffer\nvoid ReadState()\n{   \n    ivec4 ctrl = ivec4(texelFetch(iChannel0, CONTROL_BASE, 0));\n    \n    PC = ctrl[0] & ADDR_MAX;\n    SP = ctrl[1] & 0xFF;\n    I = ctrl[2] & ADDR_MAX;\n    T = ctrl[3] & 0xFF;\n    \n    for(int i = 0;i < 4;i++)\n    {\n        ivec4 regs = ivec4(texelFetch(iChannel0, REGISTER_BASE + ivec2(i, 0), 0));\n        V[i*4 + 0] = regs[0];\n        V[i*4 + 1] = regs[1];\n        V[i*4 + 2] = regs[2];\n        V[i*4 + 3] = regs[3];\n        \n        ivec4 stck = ivec4(texelFetch(iChannel0, STACK_BASE + ivec2(i, 0), 0));\n        S[i*4 + 0] = stck[0];\n        S[i*4 + 1] = stck[1];\n        S[i*4 + 2] = stck[2];\n        S[i*4 + 3] = stck[3];\n    }\n    \n    RND = int(texelFetch(iChannel0, RND_BASE, 0).x);\n}\n\n//Write emulator state to the backbuffer\nvoid WriteState()\n{\n    if(uv == CONTROL_BASE)\n    {\n        frag = vec4(PC, SP, I, T);\n    }\n    \n    if(uv.y == REGISTER_BASE.y && inRange(uv.x, REGISTER_BASE.x, 4))\n    {\n        int i = (uv.x - REGISTER_BASE.x) * 4;\n        frag = vec4(V[i + 0], V[i + 1], V[i + 2], V[i + 3]);\n    }\n    \n    if(uv.y == STACK_BASE.y && inRange(uv.x, STACK_BASE.x, 4))\n    {\n        int i = (uv.x - STACK_BASE.x) * 4;\n        frag = vec4(S[i + 0], S[i + 1], S[i + 2], S[i + 3]);\n    }\n    \n    if(uv == RND_BASE)\n    {\n        frag = vec4(RND,0,0,0);\n    }\n}\n\n//Extract the parameters from an opcode\nOpcode DecodeInstruction(int opcode)\n{\n    Opcode inst;\n    inst.op =  (opcode & 0xF000) >> 12;\n    inst.nnn = (opcode & 0x0FFF);\n    inst.n =   (opcode & 0x000F);\n    inst.x =   (opcode & 0x0F00) >> 8;\n    inst.y =   (opcode & 0x00F0) >> 4;\n    inst.kk =  (opcode & 0x00FF);\n    \n    return inst;\n}\n\n//Read a byte from memory.\nint ReadMem(int addr)\n{\n    addr &= ADDR_MAX;\n    \n    ivec2 pos = MEM_BASE + ivec2(addr % MEM_WIDTH, addr / MEM_WIDTH);\n    \n    return int(texelFetch(iChannel0, pos, 0).x) & 0xFF;\n}\n\n//Write a byte to memory.\nvoid WriteMem(int addr, int data)\n{\n    addr &= ADDR_MAX;\n    data &= 0xFF;\n    \n    ivec2 pos = MEM_BASE + ivec2(addr % MEM_WIDTH, addr / MEM_WIDTH);\n    if(uv == pos)\n    {\n        frag = vec4(data,0,0,0);\n    }\n    \n    memWrite = true;\n}\n\n\n//Random number generator (LFSR)\nint NextRandom()\n{\n    for(int i = 0;i < 8;i++)\n    {\n        int fb = bit(RND, 23) ^ bit(RND, 17) ^ bit(RND, 8) ^ bit(RND, 4);\n        RND = (RND << 1) | fb;\n        RND &= 0xFFFFFF;\n    }\n    \n    return RND;\n}\n\n//Arithmetic/Logic Instructions \nvoid ALU(int op, inout int a, inout int b, inout int flag)\n{\n    switch(op)\n    {\n    \tcase 0x0: //Vx = Vy\n        \ta = b;\n        break;\n        \n        case 0x1: //Vx OR Vy\n        \ta |= b;\n        break; \n        \n        case 0x2: //Vx AND Vy\n        \ta &= b;\n        break; \n        \n        case 0x3: //Vx XOR Vy\n        \ta ^= b;\n        break; \n        \n        case 0x4: //Vx + Vy, Vf = carry\n        \ta += b;\n        \tflag = int(a > 255);\n        \ta &= 0xFF;\n        break; \n        \n        case 0x5: //Vx - Vy, Vf = NOT borrow\n        \tflag = int(a > b);\n        \ta -= b;\n        \ta &= 0xFF;\n        break; \n        \n        case 0x6: //Vx >> 1, Vf = LSB\n        \t//flag = a & 1;\n        \ta >>= 1;\n        \tflag = a & 1;\n        break; \n        \n        case 0x7: //Vy - Vx, Vf = NOT borrow\n        \tflag = int(b > a);\n        \ta = b - a;\n        \ta &= 0xFF;\n        break; \n        \n        case 0xE: //Vx << 1, Vf = MSB\n        \t//flag = int((a & 0x80) != 0);\n        \ta <<= 1;\n        \ta &= 0xFF;\n        \tflag = int((a & 0x80) != 0);\n        break;\n    }\n}\n\nvoid Execute(Opcode inst)\n{\n    if(inst.op == 0x0) //Misc\n    {\n        if(inst.kk == 0xE0) //Clear screen\n        {\n        \tif(inRect(uv, GFX_BASE, GFX_SIZE))\n        \t{\n                frag = vec4(0);\n            }\n        }\n        \n        if(inst.kk == 0xEE) //RET (Return from subroutine)\n        {\n            SP = (SP + 1) & 0xF;\n            PC = S[SP];\n        }\n    }\n    \n    else if(inst.op == 0x1) //JP nnn (Jump to address)\n    {\n        PC = inst.nnn;\n        PC -= 2;\n    }\n    \n    else if(inst.op == 0x2) //CALL nnn (Call subroutine at address)\n    {\n        S[SP] = PC;\n        SP = (SP - 1) & 0xF;\n        PC = inst.nnn;\n        PC -= 2;\n    }\n    \n    else if(inst.op == 0x3) //SE Vx, kk (Skip next if V[x] == kk)\n    {\n        if(V[inst.x] == inst.kk)\n        {\n            PC += 2;\n        }\n    }\n    \n    else if(inst.op == 0x4) //SNE Vx, kk (Skip next if V[x] != kk)\n    {\n        if(V[inst.x] != inst.kk)\n        {\n            PC += 2;\n        }\n    }\n    \n    else if(inst.op == 0x5) //SE Vx, Vy (Skip next if V[x] == V[y])\n    {\n        if(V[inst.x] == V[inst.y])\n        {\n            PC += 2;\n        }\n    }\n    \n    else if(inst.op == 0x6) //LD Vx, kk (V[x] = kk)\n    {\n        V[inst.x] = inst.kk;\n    }\n    \n    else if(inst.op == 0x7) //ADD Vx, kk (V[x] += kk)\n    {\n        V[inst.x] += inst.kk;\n        V[inst.x] &= 0xFF;\n    }\n    \n    else if(inst.op == 0x8) //ALU Ops\n    {\n        ALU(inst.n, V[inst.x], V[inst.y], V[0xF]);\n    }\n    \n    else if(inst.op == 0x9) //SNE Vx, Vy (Skip next if V[x] != V[y])\n    {\n        if(V[inst.x] != V[inst.y])\n        {\n            PC += 2;\n        }\n    }\n    \n    else if(inst.op == 0xA) //LD I, nnn (I = nnn)\n    {\n        I = inst.nnn;\n    }\n    \n    else if(inst.op == 0xB) //JP nnn + V0 (Indirect jump to nnn + V[0])\n    {\n        PC = inst.nnn + V[0];\n        PC -= 2;\n    }\n    \n    else if(inst.op == 0xC) //RND Vx, kk (V[x] = Random & kk)\n    {\n        V[inst.x] = NextRandom() & inst.kk;\n    }\n    \n    else if(inst.op == 0xD) //DRW Vx,Vy,n (Draw n-row tall sprite at V[x], V[y], Sprite data at I)\n    {\n        ivec2 Sxy = ivec2(V[inst.x], V[inst.y]);\n        int Sh = inst.n;\n        \n        if(inRect(uv, GFX_BASE, GFX_SIZE))\n        {\n            ivec2 guv = uv - GFX_BASE;\n            guv.y = (GFX_SIZE.y-1) - guv.y;\n            ivec2 Suv = ivec2(mod(vec2(guv - Sxy),vec2(GFX_SIZE)));\n            \n            if(inRect(Suv, ivec2(0), ivec2(8, Sh)))\n            {\n                \n                int sprData = ReadMem(I + Suv.y);\n                int sprPixel = (sprData >> (7 - Suv.x)) & 1;\n            \tfrag = vec4(vec3(int(frag) ^ sprPixel),0);   \n                //frag.x = float(Suv.y)/32.0;\n            }\n        }\n    } \n    \n    else if(inst.op == 0xE) //Keypad Input\n    {\n        switch(inst.kk)\n        {\n            case 0x9E: //SKP (Skip if key V[x] is pressed)\n            break;\n            \n            case 0xA1: //SNP (Skip if key V[x] is not pressed)\n            \tPC += 2;\n            break;\n        }\n    }\n    \n    else if(inst.op == 0xF) //IO\n    {\n        switch(inst.kk)\n        {\n            case 0x07: //Vx = Timer\n            \tV[inst.x] = T;\n            break;\n            \n            case 0x15: //Timer = Vx\n            \tT = V[inst.x];\n            break;\n            \n            case 0x1E: //I = I + Vx\n            \tI += V[inst.x];\n            \tI &= ADDR_MAX;\n            break;\n            \n            case 0x29: //I = font digit address for Vx\n            \tI = V[inst.x] * 5;\n            break;\n            \n            case 0x33: //I+0,I+1,I+2 = BCD of Vx\n            \tWriteMem(I + 0, V[inst.x] / 100);\n            \tWriteMem(I + 1, (V[inst.x] / 10) % 10);\n            \tWriteMem(I + 2, V[inst.x] % 10);\n            break;\n            \n            case 0x55: //Mem[I + 0-x] = V[0-x]\n            \tfor(int j = 0;j <= inst.x;j++)\n                {\n                    WriteMem(I + j, V[j]);\n                }\n            break;\n            \n            case 0x65: //V[0-x] = Mem[I + 0-x]\n            \tfor(int j = 0;j <= inst.x;j++)\n                {\n                    V[j] = ReadMem(I + j);\n                }\n            break;\n        }\n    }\n    \n}\n\n//Initialize the registers & memory.\nvoid Reset()\n{\n    PC = PROG_START;\n    SP = 0xF;\n    I = 0;\n    T = 0;\n    RND = (int(iDate.w) ^ RND_SEED) & 0xFFFFFF;\n    \n    for(int i = 0x0;i <= 0xF;i++)\n    {\n        V[i] = 0;\n        S[i] = 0;\n    }\n\n    WriteState();\n\n    if(inRect(uv, MEM_BASE, MEM_WIDTH))\n    {\n        ivec2 muv = uv - MEM_BASE;\n        int addr = muv.x + muv.y * MEM_WIDTH;\n\n        if(addr <= ADDR_MAX)\n        {\n            int paddr = addr;\n            int width = int(iResolution.x);\n            ivec4 d32 = ivec4(texelFetch(iChannel1, ivec2((paddr/4) % width, (paddr/4) / width), 0));\n            int d8 = d32[paddr % 4];\n            frag = vec4(d8,0,0,0);\n        }\n    } \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = ivec2(fragCoord);\n    frag = texelFetch(iChannel0, uv, 0);\n    \n    if(inRect(uv, CONTROL_BASE, MEM_BASE + MEM_WIDTH) || inRect(uv, GFX_BASE, GFX_SIZE)) \n    {\n        ReadState();\n\n        for(int i = 0;i < CLOCK;i++)\n        {\n            int opcode = ReadMem(PC) << 8 | ReadMem(PC + 1);\n\n            Opcode inst = DecodeInstruction(opcode);\n\n            Execute(inst);\n\n            PC += 2;\n\n            if(memWrite)\n            {\n                break;   \n            }\n        }\n\n        //Decrement delay timer & clamp at 0.\n        T -= int(ceil(60.0 * iTimeDelta));\n        T = (T < 0) ? 0 : T;\n\n        WriteState();\n\t\t\n        if(iFrame == 0)\n        {\n\t\t\tReset();\n        }\n    }\n\n    fragColor = frag;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}