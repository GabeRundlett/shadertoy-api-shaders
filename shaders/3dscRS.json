{
    "Shader": {
        "info": {
            "date": "1585056933",
            "description": "starfield",
            "flags": 0,
            "hasliked": 0,
            "id": "3dscRS",
            "likes": 5,
            "name": "Starfield165",
            "published": 3,
            "tags": [
                "starfield"
            ],
            "usePreview": 0,
            "username": "brechrt",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "uint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { \n    return hash( v.x ^ hash(v.y)); \n}\n\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\nfloat random( vec2  v ) { \n    return floatConstruct(hash(floatBitsToUint(v)));\n}\nmat2 rot(float a){\n\tfloat s = sin(a);\n    float c = cos(a);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat star(vec2 uv, float flar){\n\tfloat d = length(uv);\n    float m = .05/d;\n    m *= m;\n    \n    float ray = max(0., 1.-abs(uv.x*uv.y*5000.));\n    m += ray*flar;\n    \n    uv *= rot(atan(1.));\n    ray = max(0., 1.-abs(uv.x*uv.y*5000.));\n    m += ray*flar;\n    \n    m *= smoothstep(1., .2, d);\n\n    return m;\n}\nvec3 starLayer(vec2 uv){\n\tvec2 gv = fract(uv);\n    vec2 id = floor(uv);\n    vec3 col = vec3(0);\n    \n    for(float x = -1.; x <= 1.; x++){\n        for(float y = -1.; y <= 1.; y++){\n            vec2 off = vec2(x, y);\n\t    \tvec2 roff = vec2(random(id+off), random(id+off+vec2(243.23, 882.23)));\n            float size = fract(random(id+off)*68321.7829);\n    \t\tfloat star = star(gv-off-roff, smoothstep(.7, 1., size)*.5);\n            \n            vec3 color = sin(vec3(.2, .3, .8)*fract(size*3219.329)*214767.)*.5+.5;\n            color *= vec3(1., .5, 1.+size);\n            col += star*size*size*color;\n    \t\t\n        }\n    }\n    \n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n   \tfloat t = iTime*.1;\n    vec3 col = vec3(0);\n    float maxLayer = 7.;\n    \n    uv *= rot(t);\n    for(float i = 0.; i < 1.; i += 1./maxLayer){\n        float depth = fract(i+t);\n        \n        float scale= mix(10., 5., depth);\n        float fade = depth*smoothstep(1., .8, depth);\n    \tcol += starLayer(uv*scale+i*274.23)*fade;\t\n    }\n    \n   \n    \n    \n    \n    //if(gv.x > .98 || gv.y > .98) col = vec3(1., 0., 0.);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}