{
    "Shader": {
        "info": {
            "date": "1535586528",
            "description": "I came across this effect when messing around with metaballs. Had to share it :)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ltVyzw",
            "likes": 9,
            "name": "Metaballs rainbow",
            "published": 3,
            "tags": [
                "metaballs",
                "colors",
                "color",
                "metaball",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "Citiral",
            "viewed": 782
        },
        "renderpass": [
            {
                "code": "// Came across this when messing around with metaballs. Had to share it :)\n\nconst int BALLS = 25;\n\n// noise and rand functions stolen from stack overflow :)\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nvec2 hash(vec2 co) {\n    float m = dot(co, vec2(12.9898, 78.233));\n    return fract(vec2(sin(m),cos(m))* 43758.5453) * 2. - 1.;\n}\n\nfloat fade(float t) { return t * t * t * (t * (t * 6. - 15.) + 10.); }\n\nvec2 ssmooth(vec2 x) { return vec2(fade(x.x), fade(x.y)); }\n\nfloat perlinNoise(vec2 uv) {\n    vec2 PT  = floor(uv);\n    vec2 pt  = fract(uv);\n    vec2 mmpt= ssmooth(pt);\n\n    vec4 grads = vec4(\n        dot(hash(PT + vec2(.0, 1.)), pt-vec2(.0, 1.)),   dot(hash(PT + vec2(1., 1.)), pt-vec2(1., 1.)),\n        dot(hash(PT + vec2(.0, .0)), pt-vec2(.0, .0)),   dot(hash(PT + vec2(1., .0)), pt-vec2(1., 0.))\n    );\n\n    return 5.*mix (mix (grads.z, grads.w, mmpt.x), mix (grads.x, grads.y, mmpt.x), mmpt.y);\n}\n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 position = fragCoord/iResolution.xy;\n\tposition.x *= iResolution.x / iResolution.y;\n\n    \n    vec3 dist = vec3(0.0);\n\tfor (int i = 0 ; i < BALLS ; i++) {\n\t\tvec2 bpos = vec2(perlinNoise(vec2(float(i*3218) + cos(iTime*0.1), iTime*0.1)), perlinNoise(vec2(float(i*1357) + sin(iTime*0.1), -iTime*0.1))) / 5.0;\n\t\tbpos += vec2(0.5 * iResolution.x/iResolution.y,0.5);\n\t\tdist += hsv2rgb(vec3(1.0 / (pow(position.x - bpos.x, 2.0) + pow(position.y - bpos.y, 2.0)), 1.0, 1.0));\n\t}\n\t\n\tfragColor = vec4(dist/18., 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}