{
    "Shader": {
        "info": {
            "date": "1696361698",
            "description": "Post processing used in 'mrange & virgill - Delusions of mediocrity (Windows 4k intro)'",
            "flags": 96,
            "hasliked": 0,
            "id": "csGyzc",
            "likes": 22,
            "name": "Pretty ok post processing?",
            "published": 3,
            "tags": [
                "postproc"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 567
        },
        "renderpass": [
            {
                "code": "// CC0: Pretty ok post processing?\n// Virgill and I released 'mrange & virgill - Delusions of mediocrity (Windows 4k intro)' at Deadline 2023\n// https://www.youtube.com/watch?v=TgWmJAZIsXo\n\n// The work is a combination of Vertex and Fragment shader but AFAIK shadertoy has no vertex shading support\n// But I thought I share the post processing shader we used in the hope it helps someone.\n\n// Music by Virgill.\n\n// Shader being post processed by kishimisu: https://www.shadertoy.com/view/mtyGWy\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n\n  vec3 col = texture(iChannel0, q).xyz;\n  fragColor = vec4(sqrt(col), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0: Pretty ok post processing?\n// Virgill and I released 'mrange & virgill - Delusions of mediocrity (Windows 4k intro)' at Deadline 2023\n// https://www.youtube.com/watch?v=TgWmJAZIsXo\n\n// The work is a combination of Vertex and Fragment shader but AFAIK shadertoy has no vertex shading support\n// But I thought I share the post processing shader we used in the hope it helps someone.\n\n// Music by Virgill.\n\n// Shader being post processed by kishimisu: https://www.shadertoy.com/view/mtyGWy\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n  return (1.0+cos(vec3(0.0, 1.0, 2.0)+TAU*t))*0.5;\n}\n\nvec3 effect(vec2 uv) {\n    float ltime = TIME*0.5;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + ltime*.4);\n\n        d = sin(d*8. + ltime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / max(d, 0.0005), 1.2);\n\n        finalColor += col * d;\n    }\n        \n    return finalColor;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  // Bunch of random tweaks to kishimisu's shader.\n  float ptime = TIME;\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  float ntime = floor(ptime/12.0);\n  float h0 = hash(ntime+1234.5);\n  float h1 = fract(h0*3677.0);\n  float h2 = fract(h0*8677.0);\n\n  p *= mix(1.0, 0.5, h0*h0);\n  float a = 0.5*h2*(h1-0.5)*ptime;\n  p *= ROT(0.25*(h0-0.5)*ptime);\n  p -= vec2(h0, h1)-0.5;\n  if (h2 <  0.5) {\n    p =abs(p);\n  }\n  p *= ROT(a+sqrt(0.5)*sin(a)+h0*TAU);\n  vec3 col = effect(p);\n\n  col = 0.8*smoothstep(vec3(0.0), vec3(1.25, 1.5, 1.0), col);\n//  col = clamp(col, 0.0, 1.0);\n  col *= col;\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34842,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/delusions-of-mediocrity?si=b9dbd9fbdd99466aa5e619732633d4df&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: Pretty ok post processing?\n// Virgill and I released 'mrange & virgill - Delusions of mediocrity (Windows 4k intro)' at Deadline 2023\n// https://www.youtube.com/watch?v=TgWmJAZIsXo\n\n// The work is a combination of Vertex and Fragment shader but AFAIK shadertoy has no vertex shading support\n// But I thought I share the post processing shader we used in the hope it helps someone.\n\n// Music by Virgill.\n\n// Shader being post processed by kishimisu: https://www.shadertoy.com/view/mtyGWy\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define PREV_PASS   iChannel0\n#define PREV_FRAME  iChannel1\n\n\nconst vec3\n  L = vec3(.2, 1., .114)\n, U = vec3(0.,1.,2.)\n;\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  // Used to map color valus in [0, Inf[ range to [0,1] range\n  v = max(v, 0.);\n  v *= .6;\n  const float a = 2.51 , b = .03 , c = 2.43 , d = .59 , e = .14;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n\n  float ptime = TIME;\n  float ntime = floor(ptime/12.0);\n  vec2 AA = 8.0/RESOLUTION.xy;\n  vec2 pp  = -1.+2.*q;\n  vec3 col = vec3(0.);\n  float ft0 = mod(ptime, 12.)-6.;\n  float ft = 6.-abs(ft0);\n  float pfade = smoothstep(6./8., 0., ft+.25*((pp.y*pp.x)+.5*pp.y)); \n\n  vec2 p = pp;\n  p.x *= AA.y/AA.x;\n\n  float eff = -1.0;\n  if (ntime == 3.0) {\n    eff = 0.0;\n  } else if (ntime == 5.0 || ntime == 7.0) {\n    eff = 0.5;\n  }\n\n  float pmul = 1.;\n  if (eff >= 0.) {\n    vec2 nnn  = vec2(sqrt(.5));\n    vec2 nn   = nnn.yx;\n    nn.y *= -1.0;\n    float off = ptime*.4 +dot(nn, p) + eff*sin(dot(nnn, p)+ptime);\n    pmul = smoothstep(0., 1., fract(off));\n    q += nn*.125*(1.-pmul);\n  }\n\n  vec3 pcol = pmul*texture(PREV_PASS,q).xyz;\n\n  pcol = mix(pcol + pfade*(2.+.25*U.yxz), pcol*(1.-pfade), .5+.5*sign(ft0)) ;\n\n  // \"CRT\" like line effect\n  // Not attempting to be accurate in anyway\n  pcol *= .75+.25*sin(TAU*(pp.y+U/3.)/AA.y);\n  pcol *= smoothstep(48., 42., abs(ptime-48.)+4.*length(p));\n\n  const int c = 4;\n\n  pp *= .975;\n  \n  vec2 pq = .5+.5*pp;\n\n  vec2 start = pq-float(c)*AA;\n  vec3 bcol = vec3(0); \n  for (int y = -c; y <= c; ++y) {\n    vec2 pp = start;\n    for (int x = -c; x <= c; ++x) {\n      vec3 fcol = texture(PREV_FRAME, pp).xyz;\n      bcol += fcol;\n      pp.x += AA.x;\n    }\n\n    start.y += AA.y;\n  }\n  \n  bcol /= float((2*c+1)*(2*c+1));\n  \n  col = pcol;\n  float l = dot(bcol, L);\n  col = aces_approx(col);\n  col += bcol*mix(vec3(.7, .5, .9), vec3(.6, .3, .4), l*l);\n  fragColor = vec4(col, 1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}