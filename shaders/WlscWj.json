{
    "Shader": {
        "info": {
            "date": "1593109049",
            "description": "A very basic star shape, for educational purposes (with step by step explanations on how things are done).",
            "flags": 0,
            "hasliked": 0,
            "id": "WlscWj",
            "likes": 3,
            "name": "Star demo",
            "published": 3,
            "tags": [
                "star"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "#define PI\t\t\t3.14159265358979\n#define STEPS\t\t5.0\n#define RADIUS\t\t0.8\n#define SLOPE\t\t2.5\n#define THICKNESS\t0.08\n#define AA\t\t\t0.01\n#define REPEAT\t\t2.0\n\nmat2 rotate (in float angle)\n{\n\tfloat c = cos (angle);\n\tfloat s = sin (angle);\n\treturn mat2 (c, s, -s, c);\n}\n\nfloat starDist (in vec2 p)\n{\n\t// Divide the plan in STEPS sectors\n\tconst float arc = 2.0 * PI / STEPS;\n\tp *= rotate (arc * floor (atan (p.y, p.x) / arc + 0.5));\n\n\t// Compute the signed distance to the triangle edge (there is one triangle per sector)\n\treturn (p.x + abs (p.y) * SLOPE - RADIUS) / sqrt (1.0 + SLOPE * SLOPE);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\t// Normalization of the fragment coordinates\n\tfragCoord = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n\t// Define the strip pattern\n\tfloat strip = smoothstep (0.3 - AA * 10.0, 0.3 + AA * 10.0, cos (fragCoord.y * 40.0 + sin (fragCoord.x * 20.0) + iTime * 10.0));\n\n\t// Translation of the plan\n\tvec2 p = fragCoord + vec2 (0.5 * cos (iTime * 0.7), 0.2 * sin (iTime * 1.4));\n\n\t// Rotation of the plan\n\tp *= rotate (iTime);\n\n\t// Zoom of the plan\n\tfloat zoom = 1.0 + 0.5 * cos (iTime * 1.8);\n\tp /= zoom;\n\n\t// Consider the plan is a grid of squares\n\tp = p / REPEAT + 0.5;\n\tvec2 id = floor (p);\n\tp = REPEAT * (fract (p) - 0.5);\n\n\t// Rotation of the square's contents (the angle depends on the position of the square in the grid)\n\tp *= rotate (iTime * (id.x * 2.0 + id.y * 3.0));\n\n\t// Compute the signed distance to the star shape within each square\n\tfloat star = starDist (p);\n\n\t// For the fun, add little stars in the big stars, using the same approach as above\n\tp /= 0.1;\n\tp = REPEAT * (fract (p / REPEAT + 0.5) - 0.5);\n\tstar = max (star, -abs (starDist (p)));\n\n\t// What about adding other stars in the background? (Again, using the same approach as above but starting with \"fragCoord\") \n\tp = fragCoord * rotate (-iTime * 0.6) / 0.3;\n\tp = REPEAT * (fract (p / REPEAT + 0.5) - 0.5);\n\tstar = min (star, max (-star,  starDist (p)));\n\n\t// Display the stars and strips\n\tconst float halfThickness = THICKNESS * 0.5;\n\tfloat halfThicknessAA = halfThickness + AA / zoom;\n\tfloat redGradient =  0.7 + 0.3 * cos (PI * fragCoord.x * iResolution.y / iResolution.x);\n\tfragColor = vec4 (\n\t\tsmoothstep (-halfThicknessAA, -halfThickness, star) * redGradient,\n\t\tsmoothstep (halfThicknessAA, halfThickness, abs (star)),\n\t\tsmoothstep (-halfThickness, -halfThicknessAA, star) * strip,\n\t\t1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}