{
    "Shader": {
        "info": {
            "date": "1671339873",
            "description": "Intersection of a ray and a wedge.",
            "flags": 0,
            "hasliked": 0,
            "id": "mllGzH",
            "likes": 32,
            "name": "Wedge - intersection",
            "published": 3,
            "tags": [
                "3d",
                "raycasting",
                "intersection",
                "wedge"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1233
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Intersection of a ray and a wedge.\n//\n// List of ray-surface intersectors at https://www.shadertoy.com/playlist/l3dXRf\n// and https://iquilezles.org/articles/intersectors\n\n\n// takes:\n//  ro,rd = ray origin and direction\n//  s     = wedge length, height and width\n// returns:\n//  .x    = distance to intersection\n//  .yzw  = normal at intersection point\nvec4 iWedge( in vec3 ro, in vec3 rd, in vec3 s )\n{\n    // intersect box\n    vec3  m  = 1.0/rd;\n    vec3  z  = vec3(rd.x>=0.0?1.0:-1.0, rd.y>=0.0?1.0:-1.0, rd.z>=0.0?1.0:-1.0);\n    vec3  k  = s*z;\n    vec3  t1 = (-ro - k)*m;\n    vec3  t2 = (-ro + k)*m;\n    float tn = max(max(t1.x, t1.y), t1.z);\n    float tf = min(min(t2.x, t2.y), t2.z);\n    if( tn>tf ) return vec4(-1.0);\n\n    // boolean with plane\n    float k1 = s.y*ro.x - s.x*ro.y;\n    float k2 = s.x*rd.y - s.y*rd.x;\n    float tp = k1/k2;\n\n    // enable this ONLY if the ray origin can be inside the wedge\n    /*\n    if( tn<0.0 )\n    {\n        if( tp>0.0 && tp<tf ) return vec4(tp,normalize(vec3(-s.y,s.x,0.0))); // plane\n        if( k1<0.0 )          return vec4(tf,step(t2,vec3(tf))*z); // box\n        return vec4(-1.0);\n    }\n    */\n\n    if( k1>tn*k2 )       return vec4(tn,-step(tn,t1)*z); // box\n    if( tp>tn && tp<tf ) return vec4(tp,normalize(vec3(-s.y,s.x,0.0))); // plane\n    return vec4(-1.0);\n}\n\nvec3 pattern( in vec2 uv )\n{\n    return vec3(0.6 + 0.4*smoothstep(-0.01,0.01,cos(uv.x*0.5)*cos(uv.y*0.5)))\n           *smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n}\n\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.2*iTime;\n\tvec3 ro = vec3( 1.0*sin(an), 0.4*sin(1.6*an), 1.0*cos(an) );\n    vec3 ta = vec3( 0.0, 0.01, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    // wedge\n    const vec3 siz = vec3(0.5,0.2,0.4);\n\n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // ray direction\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // background\n\t    vec3 col = vec3(0.08+0.02*rd.y)*(1.0-0.3*length(p));\n\n        // wedge\n        vec4 tnor = iWedge( ro, rd, siz );\n        if( tnor.x>0.0 )\n        {\n            float t = tnor.x;\n            vec3  pos = ro + t*rd;\n            vec3  nor = tnor.yzw;\n\n            // texture\n            vec3 mor = abs(nor);\n            vec2 uv = (mor.x>mor.y && mor.x>mor.z) ? pos.yz : \n                      (mor.y>mor.z)                ? pos.zx : \n                                                     pos.xy;\n            col = pattern( 47.0*uv );\n\n            // lighting\n            vec3  lig = normalize(vec3(0.7,0.6,0.3));\n            vec3  hal = normalize(-rd+lig);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float amb = clamp( 0.6 + 0.4*nor.y, 0.0, 1.0 );\n            col *= vec3(0.2,0.3,0.4)*amb + vec3(1.0,0.9,0.7)*dif;\n            col += 0.4*pow(clamp(dot(hal,nor),0.0,1.0),12.0)*dif;\n        }\n\n        // gamma\n        col = sqrt( col );\n\t\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,17,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}