{
    "Shader": {
        "info": {
            "date": "1649077452",
            "description": "Stylized sobel edge detection, still a work in progress",
            "flags": 32,
            "hasliked": 0,
            "id": "7tfcRj",
            "likes": 10,
            "name": "Dream like Stylized Sobel Edge",
            "published": 3,
            "tags": [
                "sobel",
                "edge",
                "dream",
                "styalized"
            ],
            "usePreview": 0,
            "username": "NakedBowman",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "float greyScale(vec3 color){\n    return (color.r + color.g + color.b) / 3.0;\n\n\n}\nvec3 post(vec3 color){\n    return floor(color*15.+0.5)/15.;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float[9] Xsobel_kernel =\n    float[](-1.0, 0.0, 1.0,\n            -2.0, 0.0, 2.0,\n            -1.0, 0.0, 1.0);\n            \n    float[9] Ysobel_kernel =\n    float[](-1.0, -2.0, -1.0,\n            0.0, 0.0, 0.0,\n            1.0, 2.0, 1.0);\n            \n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 og = texture(iChannel2, uv).rgb;\n    og = pow(og,vec3(1./2.2));\n    og = post(og);\n    vec3 pat = mix(vec3(0.4,0.2,0.4), vec3(0.5,0.7,0.8), uv.x+uv.y);\n    og = mix(pat, og, greyScale(og)*2.2);\n    \n    float threshold = .14;\n    float Xedge = 0.;\n    float Yedge = 0.;\n    float kernelPointer = 0.;\n    for(float x = 0.0; x < 3.0; x++){\n        for(float y = 0.0; y < 3.0; y++){\n            float result = greyScale(texture(iChannel0, uv+vec2(x-1.,y-1.)/iResolution.xy).rgb);\n            Xedge += result * Xsobel_kernel[int(kernelPointer)];\n            kernelPointer++;\n        }\n    }\n    kernelPointer = 0.;\n    for(float x = 0.0; x < 3.0; x++){\n        for(float y = 0.0; y < 3.0; y++){\n            float result = greyScale(texture(iChannel0, uv+vec2(x-1.,y-1.)/iResolution.xy).rgb);\n            Yedge += result  * Ysobel_kernel[int(kernelPointer)];\n            kernelPointer++;\n        }\n    }\n   \n   //remapping values\n  //Xedge += 0.5;\n  //Yedge += 0.5;\n   float finalG = sqrt(Xedge*Xedge + Yedge*Yedge);\n   if(finalG < threshold){\n       finalG = 0.; \n   }\n    \n  \n\n   float edgeOrientation = atan(Yedge/Xedge);\n   float g = edgeOrientation;\n   vec3 col = vec3(finalG);\n    \n    fragColor = vec4(og-col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float kernelSize = 6.;\n    vec3 col = vec3(0.);\n    for(float i = 0.; i < kernelSize; i++){\n        float pointer = i - floor(kernelSize * 0.5);\n        col += texture(iChannel0, uv + vec2(i,0.0)/iResolution.xy ).rgb;\n    }\n    col/= kernelSize;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float kernelSize = 6.;\n    vec3 col = vec3(0.);\n    for(float i = 0.; i < kernelSize; i++){\n        float pointer = i - floor(kernelSize * 0.5);\n        col += texture(iChannel0, uv + vec2(0.0,i)/iResolution.xy ).rgb;\n    }\n    col/= kernelSize;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float kernelSize = 20.;\n    vec3 col = vec3(0.);\n    for(float i = 0.; i < kernelSize; i++){\n        float pointer = i - floor(kernelSize * 0.5);\n        col += textureLod(iChannel0, uv + vec2(i,0.0)/iResolution.xy,3. ).rgb;\n    }\n    col/= kernelSize;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float kernelSize = 20.;\n    vec3 col = vec3(0.);\n    for(float i = 0.; i < kernelSize; i++){\n        float pointer = i - floor(kernelSize * 0.5);\n        col += textureLod(iChannel0, uv + vec2(0.0,i)/iResolution.xy, 3. ).rgb;\n    }\n    col/= kernelSize;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}