{
    "Shader": {
        "info": {
            "date": "1578601879",
            "description": "Experimenting with color and 3d simplex noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lG3Wz",
            "likes": 8,
            "name": "Simplex noise color trip",
            "published": 3,
            "tags": [
                "simplexnoise"
            ],
            "usePreview": 0,
            "username": "Bleuje",
            "viewed": 591
        },
        "renderpass": [
            {
                "code": "//by @etiennejcb\n//3d simplex noise from https://www.shadertoy.com/view/XsX3zB\n\nconst float PI = 3.1415926535897932384626433832795;\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n\nfloat transformValue(float v){\n    v = 0.5 + 0.5*v;\n    v = pow(v+0.35,7.0);\n    return v;\n}\n\n//from bookofshaders\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy/iResolution.x;\n\tfloat offset = 0.9*simplex3d(vec3(9.*p+vec2(0.,-0.3*iTime),0.2*iTime))*clamp((2.0-5.*length(p-vec2(0.5,0.25))),0.,2.) + 10.*length(p-vec2(0.5,0.25));\n    //float offset2 = simplex3d(vec3(123)+vec3(10.*p+vec2(-1.*iTime,0),0.5*iTime));\n    \n    float change = 9.0;\n    \n    float scl = 5.;\n    \n    float value = simplex3d(vec3(change*(iTime-offset),scl*p.x,scl*p.y));\n\tfloat value2 = simplex3d(vec3(1.1*change*(iTime-offset),123.+scl*p.x,scl*p.y));\n    float value3 = simplex3d(vec3(1.5*change*(iTime-offset),1234.+scl*p.x,scl*p.y));\n    //float value4 = simplex3d(vec3(1.5*change*(iTime-offset),3234.+scl*p.x,scl*p.y));\n    \n\tvalue = transformValue(value);\n    value2 = transformValue(value2);\n    value3 = transformValue(value3);\n\t\n    vec3 color0 = vec3(value+value2,value2+0.*value3,value3+value);\n    \n    vec3 rgb = clamp(color0,0.,1.);\n    \n    vec3 hsb = rgb2hsb(rgb);\n    \n    hsb.x += 0.3*sin(13.*length(p-vec2(0.5,0.25))-1.*iTime)+0.15*iTime;\n    \n    hsb.x = mix(hsb.x,0.5,0.7);\n    \n    hsb.y += 0.2*sin(14.*length(p-vec2(0.5,0.25))-1.1*iTime+0.5)-0.4;\n                \n    rgb = hsb2rgb(hsb);\n    \n\tfragColor = vec4(rgb,1.0);\n\treturn;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}