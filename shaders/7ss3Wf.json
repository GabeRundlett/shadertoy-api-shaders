{
    "Shader": {
        "info": {
            "date": "1616767168",
            "description": "hand like camera",
            "flags": 2,
            "hasliked": 0,
            "id": "7ss3Wf",
            "likes": 0,
            "name": "Hand like camera moving,zoom in ",
            "published": 3,
            "tags": [
                "zoom",
                "webcam",
                "hand"
            ],
            "usePreview": 0,
            "username": "krotos139",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "// The MIT License\n\n// The noise function from this article: https://iquilezles.org/articles/voronoise\n\nvec3 hash3(vec2 p)  // replace this by something better\n{\n    float x  = fract( p.x*0.3183099+.1 );\n\tx *= fract(x*17.0);\n    float y  = fract( p.y*0.9843579+.1 );\n\ty *= fract(y*11.0);\n    float z  = fract( p.x*0.4837598+.1 + p.y*0.5790343+.1 );\n\tz *= fract(z*7.0);\n    return vec3( x, y, z );\n}\n\nfloat noise( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    float k = 1.0 + 63.0*pow(1.0-v,4.0);\n    float va = 0.0;\n    float wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec3  o = hash3( p + g )*vec3(u,u,1.0);\n        vec2  r = g - f + o.xy;\n        float d = dot(r,r);\n        float w = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n        va += w*o.z;\n        wt += w;\n    }\n\n    return va/wt;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float t = iTime*3.0;\n    float zoom = 1.0+3.0*noise(vec2(t*0.1), 0.3, 1.0)+0.4*noise(vec2(t*0.4), 0.3, 1.0);\n    vec2 shift =  2.0f*vec2(noise(vec2(t*0.1,-t*0.2), 0.3, 1.0), noise(vec2(-t*0.1,t*0.2), 0.3, 1.0)) - vec2(0.5);\n    shift.y *= 0.5;\n    shift = shift*(zoom-1.0);\n    float scale = 1.0/zoom;\n    \n    vec4 c = texture(iChannel0, shift+(.5 + -.5 * scale +  uv * scale), 1.0);\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}