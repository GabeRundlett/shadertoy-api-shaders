{
    "Shader": {
        "info": {
            "date": "1590103791",
            "description": "A little experiment with some non euclidean portal stuff. Inspired by this awesome video: https://www.youtube.com/watch?v=0pmSPlYHxoY&t=85s\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ws2fDW",
            "likes": 27,
            "name": "Space Warping Portals",
            "published": 3,
            "tags": [
                "3d",
                "mouse",
                "portal",
                "noneuclidean"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 803
        },
        "renderpass": [
            {
                "code": "// Made by Plento\n// An experiment with messing with space in a portal like fashion\nvec2 R;\n\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define FAR 64.\n#define FAR2 12.\n\nmat2 rot(float a){return mat2(cos(a), -sin(a), sin(a), cos(a));}\n\nfloat box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat hall(vec3 rp){\n    float d  = 999.;\n    rp.x = -abs(rp.x);\n    d = min(d, box(rp-vec3(-2., 0.0, 11.0), vec3(0.1, 2., 5.0)));\n    d = min(d, box(rp-vec3(0.0, 2.1, 11.0), vec3(2.1, 0.1, 5.0)));\n    return d;\n}\n\nvec3 b = vec3(8., 0., 0.);\n\n// distance field for hall and floor\nfloat map(vec3 rp){\n    float d = 999.;\n    \n    vec3 p = rp;\n    p = mod(p, b)-b*0.5;\n    \n    d = min(d, 2. + rp.y);\n    d = min(d, hall(p));\n    \n    return d;\n}\n// distance field for just portals\nfloat mapPortal(vec3 rp){\n    vec3 p = rp-vec3(0., 0., 6.);\n    p = mod(p, b)-b*0.5;\n    return box(p, vec3(1.9, 2., .001));\n}\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\n// march scene for color\nfloat march(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0.;  \n    \n    for(int i = 0; i < 99; i++){\n    \td = map(ro + rd*t); \t   \n        if(abs(d) < .0025 || t > FAR) break;\n        t += d * .95;\n    }\n    \n    return t;\n}\n\n// march scene for just portals with reduced step count\nfloat tracePortal(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0.;  \n    \n    for(int i = 0; i < 28; i++){\n    \td = mapPortal(ro + rd*t); \t   \n        \n        if(abs(d) < .0025) break;\n        if(t > FAR2){t = FAR2; break;}\n        \n        t += d * .75;\n    }\n    return t;\n}\n\nvec3 color(vec3 p, vec3 rd, vec3 n, vec2 u, float t){\n    vec3 lp = p+vec3(4., 16.0, -2.0);\n    vec3 ld = normalize(lp-p);\n   \tvec3 ref = reflect( rd, n );\n    \n    float lgd = length(lp - p);\n    float faloff = 1.-exp(-(4. / lgd));\n    \n    float dom = smoothstep(-0.1, 0.1, ref.y);\n    float dif = max(dot(n, ld), .025);\n    \n    vec3 col = vec3(0);    \n    vec3 lig = vec3(0);\n    \n    if(p.y <= -1.85){\n        vec2 id = floor(p.xz*1.);\n        float chk = mod(id.x+id.y, 2.);\n        col = mix(vec3(.6), vec3(0.), chk); \n    }\n    else{col = vec3(1., 1., 1.);}\n    \n    lig += .4*dom*vec3(0.2,0.1,1.0)*dom;\n    lig += 2.6*dif*vec3(1., 1., 1.) * faloff;\n    col *= lig;\n   \n    vec3 sky = mix(vec3(0.2, 0.48, 0.88), vec3(0.8, 0.48, 0.88), abs(rd.y*7.8));\n    col = mix(sky, col, exp(-t*t*t*0.00003));\n    \n\treturn col;   \n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    vec3 rd = normalize(vec3(uv, 0.9));\n    vec3 ro = vec3(iTime*2., 0., 0.);\n    \n    if(iMouse.z > 0.){\n     \tro.x += m.x*42.;\n        ro.y += m.y*8.;\n    }\n    \n    vec3 p = vec3(0);\n    float t = 0.;\n    \n    vec3 col = vec3(0);\n    vec3 n = vec3(0);\n    \n    float tp = tracePortal(rd, ro);\n    \n    if(tp < FAR2){ // hit portal, do wacky stuff with ray\n    \tp = ro+rd*tp; \t   \n        \n        float id = floor(p.x/b.x);\n        float seq = floor(mod(id, 6.));\n        \n        if(seq==0.) rd.z *= 5.0;\n        else if(seq==1.) rd.z*=.1;   \n        else if(seq==2.) rd.xz*=rot(.6);     \n        else if(seq==3.) rd.xz*=rot(-.5);   \n        else if(seq==4.) rd.yz*=rot(.4);     \n        else if(seq==5.) rd.yz*=rot(-.23);     \n         \n        t = march(rd, p);\n        p += rd*t;\n        \n        n = normal(p);\n    \tcol = color(p, rd, n, u, t);\n    }\n    else{ // trace scene like normal\n        t = march(rd, ro);\n        p = ro+rd*t; \t \n        n = normal(p);\n    \tcol = color(p, rd, n, u, t);  \n    }\n    \n    col*=smoothstep(0.5, 0.0, abs(uv.y));\n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n    \n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}