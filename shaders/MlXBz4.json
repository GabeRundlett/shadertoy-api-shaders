{
    "Shader": {
        "info": {
            "date": "1511741764",
            "description": "game of tic tac toe",
            "flags": 0,
            "hasliked": 0,
            "id": "MlXBz4",
            "likes": 0,
            "name": "PS18 Tic Tac Toe",
            "published": 3,
            "tags": [
                "graprog"
            ],
            "usePreview": 0,
            "username": "L1tang",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "vec3 circle(float radius, vec2 pos, float edge, vec2 uv, vec3 color)\n{   \n    vec2 shapePos = pos;\n    \n    float dist = distance(shapePos, uv);\n    \n    /*eclipse replace if the second value is a constant it will fill the circle and the background\n\tsmoothstep(dist, aConstant, radius);*/\n    \n    float value = smoothstep(dist, dist + edge, radius);\n    \n    vec3 finalColor = vec3(value);\n    finalColor = mix(finalColor, color, value);\n    \n    \n    return finalColor;\n}\n\nvec3 box(vec2 uv, vec2 pos, vec2 dimension, vec3 fill, \n         vec3 bColor, vec2 bThicc, bool bSmooth, bool borderOnly)\n{\n    if (borderOnly == true)\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, vec3(0.), box);\n        return finalBox;\n    }\n    \n    else\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, fill, box);\n        return finalBox;\n    }\n}\n\n\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nvec3 anX(vec2 uv, vec2 pos, float ratio)\n{\n    uv -= pos;\n    uv *=  rotate2d(7.);\n    uv += pos;\n    vec3 box1 = box(uv, vec2(.47*ratio, .1), vec2(.1, .8), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.04,.04), false, false);\n    vec3 box2 = box(uv, vec2(.25*ratio, .45), vec2(.84, .1), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.04,.04), false, false);\n    \n    vec3 final = mix(vec3(0,0,0), vec3(1,0,.5), box1);\n     final = mix(final, vec3(1,0,.5), box2);\n    return final;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    //scale the space\n    uv *= 3.;\n    \n    // get the index of the file from 0-2\n    vec2 tileIdx = floor(uv);\n    // offset the 2nd row based on time\n    //float offsetY = step(1., mod(uv.x, 2.));\n    float offsetY = step(mod(uv.x, 2.), 1.);\n    //float offsetY2 = step(1., mod(uv.x, 2.));\n    float offsetOpp = 1.-offsetY;\n    float offsetX = step(1., mod(uv.y, 2.));\n    \n    //Warp the space\n    uv = fract(uv);\n    \n    uv.x *= ratio;\n    vec2 newV = uv;\n    \n    vec2 pos = vec2(.5*ratio, .5);\n    newV -= pos;\n    //newV *=  rotate2d(iTime);\n    newV += pos;\n    \n    vec3 oblong = vec3(0,0,0);\n    vec3 oblong2 = vec3(0,0,0);\n    vec3 rect = vec3(0,0,0);\n    vec3 border = vec3(0,0,0);\n    vec3 theCross = vec3(0,0,0);\n    \n    if(offsetOpp == 1.)\n    {\n        oblong = circle(.4, pos, 0.01, uv, vec3(1,1,1));\n        oblong2 = circle(.37, pos, 0.01, uv, vec3(1,1,1));\n        rect = box(newV, vec2(.47*ratio, 0), vec2(.1, 1), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.04,.04), false, false);\n        \n    }\n    if(offsetOpp == 1. && offsetX == 1.)\n    {\n        border = box(uv, vec2(0, -.2), vec2(1.75, 1.2), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.03,.034), false, true);\n    }\n    if(tileIdx == vec2(1,2))\n    {\n        border = box(uv, vec2(0, -.2), vec2(1.75, 3), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.03,.034), false, true);\n    }\n    if(tileIdx == vec2(1,0))\n    {\n        \n        border = box(uv, vec2(0, -2), vec2(1.75, 3), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.03,.034), false, true);\n    }\n    if(tileIdx == vec2(0,0) || tileIdx == vec2(2,2))\n    {\n        oblong = circle(.4, pos, 0.01, uv, vec3(1,1,1));\n        oblong2 = circle(.37, pos, 0.01, uv, vec3(1,1,1));\n        border = box(uv, vec2(-1, -.5), vec2(3.75, 1.5), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.03,.034), false, true);\n    }\n    if(tileIdx == vec2(0,1))\n    {\n        border = box(uv, vec2(-1, -.5), vec2(3.75, 1.5), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.03,.034), false, true);\n        \n    }\n    if(tileIdx == vec2(2,1))\n    {\n        border = box(uv, vec2(-.1, 0), vec2(3, 1), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.03,.034), false, true);\n    }\n    if(tileIdx == vec2(2,2))\n    {\n        oblong = circle(.4, pos, 0.01, uv, vec3(1,1,1));\n        oblong2 = circle(.37, pos, 0.01, uv, vec3(1,1,1));\n        border = box(uv, vec2(-.1, -.10), vec2(3, 2), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.03,.034), false, true);\n    }\n     if(tileIdx == vec2(2,1) || tileIdx == vec2(2,0) || \n        \ttileIdx == vec2(0,1)|| tileIdx == vec2(0,2))\n    {\n        theCross = anX(uv,vec2(.9, .45), ratio);\n    }\n    \n    vec3 final = mix(vec3(0,0,0), vec3(1,0,.5), oblong);\n    final = mix(final, vec3(0,0,0), oblong2); \n    final = mix(final, vec3(1,1,1), rect); \n    final = mix(final, vec3(1,1,1), border);\n    final = mix(final, vec3(1,1,1), theCross);\n\tfragColor = vec4(final,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}