{
    "Shader": {
        "info": {
            "date": "1675543923",
            "description": "left                                      right\ncircle (euclidean)                square (manhattan/cityblock/taxicab, whatoever)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "clXSDl",
            "likes": 6,
            "name": "minimal distances (voronoi)",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\nfloat f_n_rnd(vec2 o)\n{\n\treturn fract(sin(dot(o.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec3 f_o_rgb_from_hsl( in vec3 c )\n{\n    vec3 rgb = clamp(\n        abs(\n            mod(\n                c.x*6.0\n                 +vec3(0.0,4.0,2.0)\n                , 6.0\n               )\n             -3.0\n           )\n         -1.0,\n        0.0,\n        1.0\n    );\n\n    return \n        c.z \n         + c.y \n         * (rgb-0.5)\n         *(1.0-abs(2.0*c.z-1.0));\n}\n\nfloat f_n_dist_euclidean(vec2 o_p1, vec2 o_p2){\n    vec2 o_delta = o_p1-o_p2;\n    \n    return sqrt(\n        pow(o_delta.x,2.)\n        + pow(o_delta.y,2.)\n    );\n}\nfloat f_n_dist_manhatten(vec2 o_p1, vec2 o_p2){\n    return abs(o_p1.x-o_p2.x) + abs(o_p1.y-o_p2.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_fc_nor = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n    vec2 o_mc_nor = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n\n    vec2 o_fc_nor_nooff = fragCoord.xy/iResolution.xy;\n    vec2 o_mc_offset_iresratio = (iMouse.xy-iResolution.xy*.5)/iResolution.xy;\n    if(float(iMouse.z>0.)!= 1.){\n        o_mc_offset_iresratio = vec2(\n            sin(iTime)*0.2,\n            cos(iTime)*0.2\n        );\n    }\n    \n    vec2 o_mc_nor_nooff = iMouse.xy/iResolution.xy;\n    float n_resratio_xtoy = iResolution.x / iResolution.y;\n    float n_its = 333.;\n    float n_deuc_min = 1.;\n    float n_dman_min = 1.;\n    float n_iteuc_min_nor = 0.;\n    float n_itman_min_nor = 0.;\n    for(float n_it = 0.; n_it< n_its; n_it+=1.){\n        float n_it_nor = n_it/n_its;\n        float n_rnd = f_n_rnd(vec2(n_it, 1.-n_it));\n        float n_rnd2 = f_n_rnd(vec2(n_rnd, 1.-n_rnd));\n        vec2 o_p_nor = (vec2(n_rnd, n_rnd2)-.5)*vec2(n_resratio_xtoy, 1.);\n        float n_deuc = f_n_dist_euclidean(o_p_nor,o_fc_nor);\n        if(n_deuc < n_deuc_min){\n            n_deuc_min = n_deuc;\n            n_iteuc_min_nor = n_it/n_its;\n        }\n        float n_dman = f_n_dist_manhatten(o_p_nor,o_fc_nor);\n        if(n_dman < n_dman_min){\n            n_dman_min = n_dman;\n            n_itman_min_nor = n_it/n_its;\n        }\n    }\n    \n    float n_bx = float(o_fc_nor.x > o_mc_nor.x);\n    float n_by = float(o_fc_nor.y > o_mc_nor.y);\n    \n    float n_d = n_bx*n_iteuc_min_nor + (1.-n_bx)*n_itman_min_nor;\n    float n_dmin = n_bx*n_deuc_min + (1.-n_bx)*n_dman_min;\n    \n    vec3 o_colman = f_o_rgb_from_hsl(vec3(n_itman_min_nor, 1., 0.5));\n\n    vec3 o_coleuc = f_o_rgb_from_hsl(vec3(n_iteuc_min_nor, 1., 0.5));\n    vec3 o_col = n_bx*o_coleuc+(1.-n_bx)*o_colman;\n\n\n    \n    o_col = n_by*o_col + (1.-n_by)*vec3(n_d);\n    \n    //o_col += vec3(o_collncntr,1.);\n    \n    vec3[] a_o_col = vec3[] (\n        \n        vec3(sqrt(n_deuc_min)),\n        vec3(sqrt(n_dman_min)),\n        \n        vec3(n_iteuc_min_nor),\n        vec3(n_itman_min_nor),\n        \n        f_o_rgb_from_hsl(vec3(n_iteuc_min_nor, 1., 0.5)),\n        f_o_rgb_from_hsl(vec3(n_itman_min_nor, 1., 0.5))\n        \n    );\n    vec2 o_scl = vec2(2.,3.);\n    float n_len_a_o_col = float(a_o_col.length());\n    vec2 o_trn = \n        (\n         (o_fc_nor_nooff-o_mc_offset_iresratio) / (1./o_scl)\n    );\n    vec2 o_trn_flr = floor(o_trn);\n\n    float n_thick = 0.01;\n    float n_aa = 1./iResolution.x;\n    \n    float n_d_line_x = smoothstep(\n        n_thick+n_aa, \n        n_thick, \n        fract(o_trn.x)\n    );\n    float n_d_line_y = smoothstep(\n        (n_thick+n_aa)*n_resratio_xtoy, \n        (n_thick)*n_resratio_xtoy, \n        fract(o_trn.y)\n    );\n    float n_d_line = \n        n_d_line_x+\n        n_d_line_y;\n        \n    float n_idx = o_trn_flr.x+o_scl.x*o_trn_flr.y;\n    \n    vec3 o_color = a_o_col[int(n_idx)];\n    o_color += vec3(n_d_line);\n    vec2 o_dlt = o_fc_nor_nooff-o_mc_offset_iresratio;\n    float b_inside = \n        float(\n            o_dlt.x > 0. && o_dlt.x < 1.\n            &&\n            o_dlt.y > 0. && o_dlt.y < 1.\n            );\n    fragColor = vec4(o_color*b_inside, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}