{
    "Shader": {
        "info": {
            "date": "1603795210",
            "description": "I hard coded only 2 bounces so it isn't perfect, but sure looks good to me.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3sVcWK",
            "likes": 10,
            "name": "Glassy Glassy",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "light",
                "glass",
                "fresnel"
            ],
            "usePreview": 0,
            "username": "NLIBS",
            "viewed": 659
        },
        "renderpass": [
            {
                "code": "#define N_AIR 1.0\n#define N_GLASS 1.51\n#define exposure 1.\n#define DISPLAY_GAMMA 2.2\n#define irr N_AIR/N_GLASS\n\nconst vec3 GLASS_COL = vec3(.0196,.0314,.4);\nconst vec3 GLASS_REF = pow(GLASS_COL,vec3(0.6));\n\nfloat trace(vec3 rd, vec3 ro) {\n    float r = 1.;\n\tfloat c = dot(ro, ro) - r*r;\n\tfloat b = dot(rd, ro);\n\tfloat d = b*b - c;\n\tfloat t = -b - sqrt(abs(d));\n    float t2 = -b + sqrt(abs(d));\n    t = (t<=0.) ? t2 : t;\n\treturn mix(0.0, t, step(0.,min(t,d)));\n}\n\nfloat fresnel(vec3 rd, vec3 n,float n1, float n2){\n    float I = acos(abs(dot(rd, n))-0.0001);\n    float cosI = cos(I);\n    float cosR = n1/n2 * sin(I);\n    if(cosR > 1.0) return 1.0; // total internal reflection\n    cosR = sqrt(1.0 - cosR * cosR);\n    float Rs = (n1*cosI - n2 * cosR)/(n1*cosI + n2 * cosR);\n    float Rp = (n1*cosR - n2 * cosI)/(n1*cosR + n2 * cosI);\n    return mix(Rs*Rs, Rp*Rp, 0.5);\n}\n\nvec3 _sample(vec3 rd) {\n\tvec3 col = texture(iChannel0,rd).rgb;\n    col = pow(col*1.6,vec3(DISPLAY_GAMMA+2.));\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 O, in vec2 U ) {\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.*U-R)/R.x;\n    float a = (iMouse.z>0.) ? iMouse.x/R.x*3.14 : iTime;    \n    vec3 viewPos = vec3(0,0,-1.8);\n    \n    mat2 mat = mat2(cos(a),-sin(a),sin(a),cos(a));\n    vec3 ro = viewPos;\n    ro.xz = mat * ro.xz;\n    \n    vec3 rd = normalize(vec3(uv,.8));\n    rd.xz = mat * rd.xz;\n    \n    float t = trace(rd,ro);\n    \n    vec3 col;\n    \n    if (t>0.) {\n        //Hit pos and normal\n        vec3 p = ro + rd*t;\n        vec3 n = normalize(p);\n\n        //Bounce 1\n        float fresnel_1 = fresnel(rd,n,N_AIR,N_GLASS);\n        vec3 reflect_rd = reflect(rd,n);\n        vec3 refract_rd = refract(rd,n,irr); \n        p = p+rd*0.001;\n        t = trace(refract_rd,p);\n\n        //Refract hit pos and normal\n        vec3 p2 = p + refract_rd*t;\n        vec3 n2 = -normalize(p2);\n\n        //Bounce 2\n        float fresnel_2 = fresnel(refract_rd,n,N_GLASS,N_AIR);\n        vec3 reflect_2_rd = reflect(refract_rd,n2);\n        vec3 refract_2_rd = refract(refract_rd,n2,1./irr);\n\n        //Colours calc\n        vec3 reflect_col = _sample(reflect_rd) * GLASS_REF;\n        vec3 reflect_2_col = _sample(reflect_2_rd);\n        vec3 refract_2_col = _sample(refract_2_rd);\n\n        //Fresnel\n        col = mix(refract_2_col,reflect_2_col,fresnel_2);\n\n        //Fresnel and Attenuation\n        col *= pow(GLASS_COL,vec3(t));\n        col = mix(col,reflect_col,fresnel_1);\n    } else {\n        //Background\n        col = _sample(rd);\n    }\n    \n    \n    //Tone mapping\n    col = vec3(1.0) - exp(-col * exposure);\n    //Gamma correction\n\tcol = pow(col, vec3(1./DISPLAY_GAMMA));\n    \n    \n    O = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}