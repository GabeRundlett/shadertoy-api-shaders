{
    "Shader": {
        "info": {
            "date": "1562533636",
            "description": "Single shot",
            "flags": 0,
            "hasliked": 0,
            "id": "WlXSWn",
            "likes": 7,
            "name": "Scatterform1B - Unfold ",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "distancefield"
            ],
            "usePreview": 0,
            "username": "audiopixel",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "// Created by Hepp Maccoy 2019, hepp@audiopixel.com\n// Built with Haxademic+Scatterform, github.com/cacheflowe/haxademic\n// Distance functions by Inigo Quilez, iquilezles.org\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PI = 3.14159265358979323846;\nfloat d1;\nfloat t1;\n\nfloat soc(vec3 p) {\n    vec3 n = normalize(sign(p+1e6));\n    return min(min(dot(p.xy, n.xy), dot(p.yz, n.yz)), dot(p.xz, n.xz));\n}\n\nfloat sinc(float x, float k) {\n    float a = PI * (float(k)*x-1.0);\n    return sin(a)/a;\n}\n\nmat2 r2d(float a) {\n    float sa=sin(a);\n    float ca=cos(a);\n    return mat2(ca,sa,-sa,ca);\n}\n\nvec2 mo(inout vec2 p, vec2 d) {\n    vec2 q = p;\n    q.x = abs(q.x) - d.x;\n    q.y = abs(q.y) - d.y;\n    if (q.y > q.x) q = q.yx;\n    return q;\n}\n\nvec2 amod(vec2 p, float m) {\n    float a=mod(atan(p.x,p.y), m)-m*.5;\n    return vec2(cos(a), sin(a))*length(p);\n}\n\nfloat map(vec3 p) {\n    float d = 1.0;\n    float a = abs(p.y);\n    p.yz *= r2d(sign(a) * 1.2);\n    p.xz *= r2d(sign(a) * 0.0);\n    p.xz = mo(p.xz, vec2((-d1 * 35.8) - 1., (d1 * 65.8) - 1.));\n    p.zx = mo(p.xz, vec2((d1 * 2.) - 4., 0.0282));\n    p.xz = amod(p.xz, (PI * 1.0) / 2.0);\n    p.xz = max(abs(p.xz) - 2.2569, -1.29);\n    p.x = mod(p.x, 0.3198 + (d1 * .21))-(0.3198 + (d1 * .21) *.5);\n    p.y = mod(p.y + -sin(t1 * .023) * 1.2, 6.752) - 5.;\n    d = min(d, soc(max(abs(p) - 0.172, 0.0096)));\n    return (length(p * 0.0) - 0.0) * 1.0 - (d * -1.0);\n}\n\nvec3 calcNormal(in vec3 p, in int type, in float m1, in float m2, in float m3) {\n    vec2 e = vec2(m2, m3) * m1;\n    return normalize( e.xyy * map(p + e.xyy) + e.yyx * map(p + e.yyx) + e.yxy * map(p + e.yxy) + e.xxx * map(p + e.xxx) );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    t1 = iTime;\n    //t1 = (sin((iTime + 174.) * .1) * 15.) + 21.;\n    d1 = sin(t1 * .013);\n    vec2 st = (fragCoord.xy / iResolution.xy) * 2.05 - 1.;\n    st.x *= iResolution.x / iResolution.y;\n    vec3 ro = vec3(st, 3.7287);\n    vec3 rd = normalize(vec3(st + vec2(0.), -0.8572));\n    vec3 mp;\n    mp = ro;\n    float md;\n    for(int i=0; i<45; i++) {\n        md = map(mp);\n        mp += (rd * .6 + (-d1 * .1)) * md;\n    }\n    float b = length(ro - mp);\n    float dA = 0.4799 - (b * 0.02) * 0.5232;\n    float dB = 0.479 - (b * 0.03) * 0.523;\n    dA = sinc(dA, 1.0);\n    dB = sinc(dB, 1.0);\n    vec3 p = ro + rd * (mp);\n    vec3 lt = vec3(0.0, 0.0, 0.0);\n    vec3 l;\n    vec3 nm = calcNormal(p, 0, 4.5201, 1.0, -1.0);\n    if (md < 0.015) {\n        float dif = clamp(dot(nm, normalize(lt - p)), 0., 1.);\n        dif *= 5.0 / dot(lt - p, lt - p);\n        l = vec3(pow(dif, 0.1854));\n    }\n    vec3 lt2 = vec3(0.0, 0.0, 13.0);\n    vec3 nm2 = calcNormal(p, 0, 2.8964, -1.0, -1.339);\n    float dif2 = clamp(dot(nm2, normalize(lt2 - p)), 0., 1.);\n    dif2 *= 4.0 / dot(lt2 - p, lt2 - p);\n    vec3 lb = vec3(pow(dif2, 0.4545));\n    float src1 = 1. * 0.0;\n    float src2 = nm.x;\n    float src3 = l.x;\n    float src4 = lb.x * 0.4;\n    vec3 c;\n    c = mix(vec3(0.0), vec3(0.6117647,0.019607844,0.8627451), src1) + mix(vec3(0.0), vec3(1.0,0.0,0.0), src2);\n    c = c + mix(vec3(0.0), vec3(0.31764707,0.5568628,1.0), src3);\n    c = c + mix(vec3(0.0), vec3(0.05490196,0.0,1.0), src4);\n    fragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}