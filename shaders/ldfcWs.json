{
    "Shader": {
        "info": {
            "date": "1490303100",
            "description": "#2 - Astroid",
            "flags": 0,
            "hasliked": 0,
            "id": "ldfcWs",
            "likes": 4,
            "name": "[ Famous curves ] - #2",
            "published": 3,
            "tags": [
                "2d",
                "curve",
                "parametric",
                "astroid"
            ],
            "usePreview": 0,
            "username": "Yrai",
            "viewed": 577
        },
        "renderpass": [
            {
                "code": "\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n/*\n   Astroid facts:\n  ----------------\n\t- (a) Also called the tetracuspid because it has four cusps.\n\t- (b) Curve can be formed by rolling a circle of radius a/4 on the inside of a circle of radius a.\n\t- (c) The curve can also be formed as the envelop produced when a line segment is moved with\n\t\t  each end on one of a pair of perpendicular axes (glissette)\n*/\n\n#define res_            iResolution\n#define time_           iTime\n#define trace_len_      48\n#define eps_            0.1\n\nvec2  domain(vec2 uv, float s);\nvec2  parametric(float t);\nfloat trace(vec2 p, float t);\n\nvoid mainImage(out vec4 o, vec2 f) {\n\tvec2 p = domain(f, 8.);\n    \n    // t -> [0., 5.]\n    float t = abs(sin(time_)*5.);\n    \n    // Astroid traces\n    float dtrace = smoothstep(0.008, 0.001, trace(p, t));\n    float dtrace_s0 = smoothstep(0.16 + sin(time_)*.1, 0.001, trace(p, t));\n    \n    // Axis\n    float ax = min(\n        smoothstep(0., 0.02, abs(p.x)),\n        smoothstep(0., 0.02, abs(p.y))\n    );\n    // Origin\n    float org = smoothstep(0.09, 0., length(p)-.01);\n    \n    // Palette \n    vec3 gray   = vec3(.2);\n    vec3 white  = vec3(5.);\n    \n    // Shading\n    vec3 c  = vec3(0.);\n    c = mix(c, gray, 1.-ax);\n    c = mix(c, white, org);\n    \n    c = mix(c, white, dtrace);\n    c = mix(c, vec3(0.5, 1., 1.1) + vec3(abs(sin(time_)), abs(sin(time_)), 0.), dtrace_s0);\n    c.b += dtrace_s0;\n    \n    o = vec4(sqrt(c), 1.);\n}\n\nvec2 parametric(float t) {\n\tfloat a = 4.;\n    return vec2(a*cos(t)*cos(t)*cos(t), a*sin(t)*sin(t)*sin(t));\n}\n\nfloat trace(vec2 p, float t) {\n    float d = 1e10;\n    float e = 0.;\n    for(int i = 0; i < trace_len_; i++) {\n    \td  = min(d, distance(p, parametric(t-e)));\n        e += eps_; \n    }\n    return d;\n}\n\nvec2 domain(vec2 uv, float s) {\n    return (2. * uv.xy - res_.xy) / res_.y * s;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}