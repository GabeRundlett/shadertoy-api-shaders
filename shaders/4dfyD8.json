{
    "Shader": {
        "info": {
            "date": "1487843685",
            "description": "go fullscreen (try also SIZE = 1024). or set 256.\nMouse.y : amount of grey transition\nF: toggle filter.\nSPACE toggles Fourier look.  \nBuf A, #defines:     RAND: chose procedural vs texture noise  TYPE: perlin type",
            "flags": 48,
            "hasliked": 0,
            "id": "4dfyD8",
            "likes": 1,
            "name": "infinite zoom analysis: Fourier",
            "published": 3,
            "tags": [
                "noise",
                "fft",
                "perlin",
                "fourier",
                "perception",
                "short",
                "dft",
                "dft",
                "artefact"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1163
        },
        "renderpass": [
            {
                "code": "// BufA: infinite zoom on Perlin: https://www.shadertoy.com/view/4tG3Wy\n// bufB: Fourier workflow: https://www.shadertoy.com/view/4s3GDs#\n\n\n#define SIZE 512. //Size must be changed in each tab.\n\n//Display modes\n#define MAGNITUDE 0.\n#define PHASE 1.\n#define COMPONENT 2.\n\nfloat DISPLAY_MODE = MAGNITUDE;\n\n//Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nvec4 rainbow(float x)  { return .5 + .5 * cos(6.2832*(x - vec4(0,1,2,0)/3.)); }\nvec4 rainbow(vec2 C)   { return rainbow(atan(C.y,C.x)/3.1416 + .5); }\n\nvec4 paintDFT(vec2 F) {\n  if (DISPLAY_MODE == MAGNITUDE)\n     #if MAG_SCALE == LOG\n        return vec4( log(length(F)) / log(SIZE*SIZE) );\n     #elif MAG_SCALE == LINEAR\n        return vec4( length(F) / SIZE );\n     #endif\n\n    else if ( DISPLAY_MODE == PHASE )     return rainbow(F);        \n    else /* if ( DISPLAY_MODE == COMPONENT ) */ return vec4(.5 + .5*F/SIZE, 0,0);        \n}\n\nfloat message(vec2 p) {  // the alert function to add to your shader\n    int x = int(p.x+1.)-1, y=int(p.y)-10,  i;\n    if (x<1||x>32||y<0||y>2) return -1.; \n    i = ( y==2? i=  757737252: y==1? i= 1869043565: y==0? 623593060: 0 )/ int(exp2(float(32-x)));\n \treturn i==2*(i/2) ? 1. : 0.;\n}\n\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    O*=0.;\n    vec2 R = iResolution.xy;\n    if (iResolution.y<200.) // alert for the icon\n    //    {   float c=message(uv/8.); if(c>=0.){ O=vec4(c,0,0,0);return; } }\n    O.r = texture(iChannel2, uv/R).r; if (O.r>0.) return;\n\n    vec2 pixel = ( uv - R/2.) / SIZE  + vec2(2,1)/2.,\n         tile  = floor(pixel),\n         stile = floor(mod(2.*pixel,2.));\n         uv = fract(pixel) * SIZE / R ;\n    \n    DISPLAY_MODE = floor(texture(iChannel2, .5/R).w); // persistant key flag.\n    if (tile.y==-1. && abs(tile.x-.5)<1.) {   // buttons displaying current flags value\n        for (float i=0.; i<3.; i++) \n            O += smoothstep(.005,.0,abs(length(uv*R/SIZE-vec2(.2+i/7.,.97))-.025));\n        float v = DISPLAY_MODE;\n        O.b += smoothstep(.03,.02,length(uv*R/SIZE-vec2(.2+v/7.,.97)));\n    }\n    \n    if(tile == vec2(0,0))  //Input + DFT (Left)\n        O += length(texture(iChannel0, uv).rgb);\n\n    if(tile == vec2(1,0)) { // Output +DFT (Right)\n#define T(i,j) texture(iChannel1, (SIZE+vec2(i,j))/R).xy\n        vec2 v = (  T(-1,-1)+T(0,-1)+T(1,-1)\n                  + T(-1, 0)+T(0, 0)+T(1, 0)\n                  + T(-1, 1)+T(0, 1)+T(1, 1) ) / 9.; // normalize with DC\n             v =  texture(iChannel3,vec2(0)).xy;     // normalize with E(img) or E(spectrum)\n             O += paintDFT(texture(iChannel1, uv).xy  / v );\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// creation of the input\n\n#define SIZE 512. // Size must be changed in each tab.\n\n#define TYPE  2   // sculpt your noise. 0: brute fbm. 1: cloud 2: fire\n#define RAND  1   // choose your noise ! 1: procedural 0: texture\n#define L  20.    // number of bands\n\n#define R(a) mat2(C=cos(a),S=sin(a),-S,C)\nfloat C,S,v, T;\n#define PHI 6.28318530718\n\nbool keyToggle(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.75)).x > 0.); }\n\n#if RAND==1 \n// Procedural noise adapted from IQ https://www.shadertoy.com/view/XslGRr\nfloat noise( vec2 x )\n{\n    x *= iResolution.y;\n    vec2 p = floor(x),f = fract(x);\n\n    f = f*f*(3.-2.*f);                       // to make derivative continuous at borders\n\n#define hash(p)  fract(sin(1e3*dot(p,vec2(1,57)))*43758.5453)        // rand\n    \n    return mix(mix( hash(p+vec2(0,0)), hash(p+vec2(1,0)),f.x),       // bilinear interp\n               mix( hash(p+vec2(0,1)), hash(p+vec2(1,1)),f.x),f.y);\n}\n\n#else\n// texture-based noise adapted from https://www.shadertoy.com/view/ltjXWW\n#define noise( U ) texture(iChannel0, U).r\n\n#endif\n\nfloat N(vec2 u) {          // sculpt your noise here\n    float n = noise(u);\n#if TYPE==0\n    return n*1.3;\n#elif TYPE==1\n    return  abs( 2.* n -1. )*1.3;\n#elif TYPE==2\n    return  1. - abs( 2.* n -1. );\n#endif\n}\n\nfloat P(vec2 u) { // infinite perlin noise with constant image-space spectrum (like Shepard scale)\n\tmat2 M = R(1.7);           // rotation to scramble grid alignement through scales\n    float v = 0., t = 0., S_=exp2(L/2.);\n\tfor (float i=0.; i<L; i++)      // visit bands\n\t{   float k = i-T,              // band frequency - shifting with time\n\t\t      a = 1.-cos(PHI*k/L),  // spectrum amplitude profile (the Shepard trick)\n\t\t      s = exp2(mod(k,L));   // wrapping of Dirac comb + 2^f fractal scaling\n\t\tv += a/s* N( M*u*s/S_ );    // band contribution ~ 1/2^f.noise(2^f)\n\t\tt += a/s;  M *= M;          // contribution to weight\n\t}\n    return v/t;\n}\n\nfloat F(float x) {                 // filter (to avoid discontinuity at borders)\n    if (keyToggle(64+6)) return 1.;\n                    // cf https://en.wikipedia.org/wiki/Window_function\n    float m = .45; x = abs(x) < m ? 1. : x = .5+.5*(.5-abs(x))/(.5-m);  // filter only in a margin\n    x = (x+.5)*PHI;\n    return (1.-cos(x))/2.;                                                      // Hann\n // return .35875 - .48829*cos(x) + .14128*cos(2.*x) - .01168*cos(3.*x);        // BH\n // return (1. - 1.93*cos(x) + 1.29*cos(2.*x) - .388*cos(3.*x) + .028*cos(4.*x)) /4.636; // flat top\n}\n\nvoid mainImage( out vec4 O, vec2 U ) {\n\tvec2  R = iResolution.xy; \n       // U = (U-.5*R)/R.y;\n          U = (U-.5*SIZE)/R.y;\n    T = 1.5*iTime;\n    float s = SIZE/R.y,\n        e = .5*iMouse.y/R.y;\n  //float e = U.x < 0. ? 0. : .03;\n    float t = smoothstep(.7-e,.7+e, P(U) ),\n          f = F(U.x/s) * F(U.y/s);\n // O = vec4( f );            // show filter\n    O = vec4( .5+(t-.5)*f );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fourier transform of the input\n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE 512. //Size must be changed in each tab.\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n// #define ang(a)  vec2(cos(a), sin(a))\n// vec2 cmul (vec2 a,float t) { vec2 b=ang(t); return mat2(b,-b.y,b.x)*a; } \n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O*=0.; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = texture(iChannel0, vec2(n+.5, uv.y) / iResolution.xy).xy,\n             yn = texture(iChannel1, vec2(uv.x, n+.5) / iResolution.xy).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE/2.) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SIZE 512. //Size must be changed in each tab.\n\nbool keyPress(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.); }\n\n// --- access to the image of ascii code c\nint CAPS=0;\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel3, U/16. + fract( floor(vec2(64+c, 15.999-float(4+CAPS+(c)/16))) / 16.))\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n#define small CAPS=2\n#define caps  CAPS=0\nfloat message(vec2 U) { // --- to alter in the icon with the alter message\n    initMsg;\n    C(19);small;C(5);C(5);caps;C(-32);small;C(6);C(21);C(12);C(12);C(19);C(3);C(18);C(5);C(5);C(14); // message \"Click to see\"\n    endMsg;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    if (SIZE>R.y) { float c= message((U/R.y-vec2(.1,.85))*6.); if(c>=0.){O=vec4(c);return;}}\n    if ( U==vec2(.5)) {\n        O.w = texture(iChannel1,U/R).w;\n        if ( keyPress(32) ) O.w = mod(O.w+.1, 3.) ; // persistant key flag\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SIZE 512. //Size must be changed in each tab.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O*=0.;\n    \n    if (U.x==.5)\n        for (float n=0.; n<SIZE; n++) {\n            O.zw += texture(iChannel0, vec2(n+.5,U.y)/R).xy;\n            O.xy += texture(iChannel1, vec2(U.x,n+.5)/R).zw;\n        }\n    \n    O /= SIZE;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}