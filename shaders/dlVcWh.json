{
    "Shader": {
        "info": {
            "date": "1700627274",
            "description": "Practicing functions and discovering \"ways to do stuff\".\n\nThe challenging part here was discover how to find the origin of all squares based on the sineHalf function.",
            "flags": 0,
            "hasliked": 0,
            "id": "dlVcWh",
            "likes": 2,
            "name": "013 - Box spill at the sea",
            "published": 3,
            "tags": [
                "sea",
                "square"
            ],
            "usePreview": 0,
            "username": "PiGIon",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "#define rgb(r, g, b) vec3(r/255., g/255., b/255.)\n#define rgba(r, g, b, a) vec4(r/255., g/255., b/255., a)\n\n// y = sin(x)\n// 0 = sin(x) - y\nfloat sineHalf(vec2 uv, float freq, vec2 offset) {\n    return smoothstep(0., 0.05, sin(uv.x*freq - offset.x) - 10.*uv.y + offset.y);\n}\n\nvec3 black;\nvec3 white = vec3(1., 1., 1.);\nvec3 sky = rgb(113., 188., 225.);\n\nfloat square(vec2 uv, vec2 origin, float size, float ang) {\n    vec2 o = (uv - origin) * rot2D(ang);\n    float antiAlias = 1.5/iResolution.y;\n    \n    vec2 range = vec2(size + antiAlias, size - antiAlias);\n    \n    return smoothstep(range.x, range.y, abs(o.x)) * smoothstep(range.x, range.y, abs(o.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec3 p = uvec3(fragCoord, iFrame);\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float ratio = iResolution.x / iResolution.y;\n    float t = iTime * 1.23;\n    float aa = 1.5/iResolution.y;\n    vec4 O = fragColor;\n    // debug\n    //t = (iMouse.x/iResolution.x) * 10.;\n    \n    vec3 col = sky;\n    vec2 off = vec2(t*1.333, -2. - cycle(0.2, t)*-1.);\n    float sine = sineHalf(uv, 1., off);\n    O = vec4(sky, 1.);\n    \n    \n    // this creates an arrow shape, interesting\n    //float s = square(uv, vec2(0., abs(sin(uv.x))), .2, 0.);\n\n    // 0 = sin(uv.x*freq - offset.x) - 10.*uv.y + offset.y\n    // 10.*uv.y = sin(uv.x*freq - offset.x) + offset.y\n    // uv.y = (sin(uv.x*freq - offset.x) + offset.y)/10.\n    for (float i = -ratio; i <= ratio; i += ratio*0.1) {\n        float of = i+0.2*cycle(0.01, t);\n        float s = square(uv, vec2(of, (sin(of - off.x) + off.y)/10.), .02, 0.);\n        O = mix(O, rgba(128., 81., 0., 1.), s);\n\n        s = square(uv, vec2(i+0.01, (sin(i+0.01 - off.x) + off.y)/10.), .03, 0.);\n        O = mix(O, rgba(196., 119., 2., 1.), s);\n    }\n    \n\n    O = mix(O, rgba(45., 148., 185., 1.), sine);\n\n    // Output to screen\n    \n    fragColor = O;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Util functions created while I study\n// ~ PiGIon\n\n#define PI 3.14159265\n\n// matrix functions\nmat2 rot2D(float ang);\n\n// time cycling functions\nfloat cycle(float perSecond);\nfloat rangeCycle(float size, float perSec);\n\n// shape functions\nfloat circle(vec2 uv, vec2 origin, float size);\nfloat square(vec2 uv, vec2 origin, float size, float ang);\n\n// https://www.wolframalpha.com/input?i=f%28x%29%3D0.5%2B%28cos%28%28%28x%2B0.5%2F1%29*20*1%29%2F%28PI%29%29%2F2.%29\nfloat cycle(float perSecond, float t) {\n    float d = fract(t * perSecond);\n    return 2. * ( d>.5 ? 1.-d : d );\n}\n\n// returns -size to size cycle\nfloat rangeCycle(float size, float perSec, float t) {\n    return mod(t*perSec - size, size) - .5*size;\n}\n\n// matrix rot2D based on pi\nmat2 rot2D(float ang) {\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}