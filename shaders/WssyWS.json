{
    "Shader": {
        "info": {
            "date": "1585485966",
            "description": "Another Apollonian sphere - now with transparency and duals, as well as a nice glowing colour scheme.",
            "flags": 48,
            "hasliked": 0,
            "id": "WssyWS",
            "likes": 13,
            "name": "Apollonian Sphere II",
            "published": 3,
            "tags": [
                "sphere",
                "apollonian"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 563
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Project an Apollonian gasket onto a sphere.\n//\n// Now with transparent sphere and glowing Apollonian.\n//\n// Since (reverse) stereographic projection preserves circles (it's an inversion)\n// we can use it to project a planar Apollonian gasket onto a sphere.\n//\n// The gasket is generated from an n-sided prism and the resulting pattern is\n// based on the dual double ended n-sided pyramid (or vice-versa if dual mode\n// is selected).\n//\n// <mouse>: apply a Mobius transform to the sphere\n// <up>/<down>: move in and out\n// <left>/<right>: change number of circles\n// b: show background\n// c: color cycle\n// r: autorotation\n// s: show sphere\n// t: transparency\n// i: invert with mouse or rotate\n// x: special case for tetrahedron (dual mode only)\n// d: show dual polyhedron\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float AA = 2.0;\nconst int maxiterations = 50;\n\nint NCIRCLES = 4;      // 3 or more\nbool dobackground = false;\nbool docolorcycle = false;\nbool domonochrome = false;\nbool dorotate = true;\nbool dosphere = true;\nbool dotransparent = true;\nbool dodual = true;\nbool dotetrahedron = false;\n\nconst float PI = 3.14159265;\n\nvoid assert(bool b);\nvec3 hsv2rgb(vec3 c);\nvec3 transform(in vec3 p);\n\n// If z is inside the circle, invert to the outside.\n// s is 1 or -1, and sets sense of \"inside\"\nbool checkinverse(inout vec2 z, vec3 circle, float s, inout float mindist2) {\n  vec2 c = circle.xy;  // Centre of circle\n  float r2 = circle.z; // Radius squared\n  vec2 p = z-c;\n  float p2 = dot(p,p);\n  float d2 = s*p2 - s*r2;\n  if (d2 > 0.0) {\n    d2 /= r2;\n    if (s < 0.0) d2 = 1.0/d2;\n    mindist2 = min(d2/r2,mindist2);\n    return false;\n  }\n  z = p*r2/p2 + c;\n  return true;\n}\n\nbool checkinverse(inout vec2 z, vec3 circle, float s) {\n  float mindist = 1e8;\n  return checkinverse(z,circle,s,mindist);\n}\n\n// A ring of circles, centred on the unit circle, with\n// incircle and outcircle. No outcircle for tetrahedron.\nbool checkcircles0(inout vec2 z, inout float mindist2) {\n  float theta = PI/float(NCIRCLES);\n  float r = 1.0/cos(theta);\n  float s = tan(theta);\n  vec3 c1 = vec3(0,0,pow(r-s,2.0));\n  vec3 c2 = vec3(0,0,pow(r+s,2.0));\n  if (checkinverse(z,c1,1.0,mindist2)) return true;\n  if (!dotetrahedron && checkinverse(z,c2,-1.0,mindist2)) return true;\n  for (int i = 0; i < NCIRCLES; i++) {\n    float t = 2.0*float(i)*theta-0.5*PI;\n    vec3 c = vec3(r*cos(t), r*sin(t), s*s);\n    if (checkinverse(z,c,1.0,mindist2)) return true;\n  }\n  return false;\n}\n\n// Two rings of circles, touching along the unit circle.\nbool checkcircles1(inout vec2 z, inout float mindist2) {\n  float theta = PI/float(NCIRCLES);\n  float K = sin(theta);\n  float r = K/(1.0+K);\n  float s = K/(1.0-K);\n  for (int i = 0; i < NCIRCLES; i++) {\n    float t = 2.0*float(i)*theta;\n    vec2 c = vec2(cos(t),sin(t));\n    vec3 c0 = vec3((1.0-r)*c,r*r);\n    if (checkinverse(z,c0,1.0,mindist2)) return true;\n    vec3 c1 = vec3((1.0+s)*c, s*s);\n    if (checkinverse(z,c1,1.0,mindist2)) return true;\n  }\n  return false;\n}\n\nbool checkcircles(inout vec2 z, inout float mindist2) {\n  if (dodual) return checkcircles0(z,mindist2);\n  else return checkcircles1(z,mindist2);\n}\n\n// r*(1+sqrt(2)) = 1 => r = 1/(1+sqrt(2))\nvec4 gasket(vec2 z){\n  // 3 circles can either be a tetrahedron, with some\n  // special casing, or a triangular prism (with dual\n  // a double triangular pyramid).\n  if (dotetrahedron) z /= 2.0; // Scale for tetrahedron.\n  for (int n = 0; n < maxiterations; n++){\n    float mindist2 = 1e8;\n    if (!checkcircles(z,mindist2)) return vec4(z,n,mindist2);\n  }\n  return vec4(z,maxiterations,0.0);\n}\n\nfloat framethreshold = 0.0;\nvec3 gasketcolor(vec2 z) {\n  vec4 data = gasket(z);\n  if (framethreshold > 0.0 && data.z < framethreshold) return vec3(0);\n  float t = docolorcycle ? 0.05*iTime : 0.0;\n  float h = data.z/float(maxiterations);\n  float v = max(2.0,data.z)/(0.3*float(maxiterations));\n  vec3 col = hsv2rgb(vec3(t+h,1,smoothstep(0.0,1.0,v)));\n  //float d = 1.0/(sqrt(data.w)+1.0);\n  //float d = sqrt(data.w);\n  //col *= smoothstep(0.0,0.1,d);\n  return col;\n}\n\n// R3 inversion in sphere, centre q, square radius r2.\nvec3 invert(vec3 p, vec3 q, float r2) {\n  p -= q;\n  p *= r2/dot(p,p);\n  p += q;\n  return p;\n}\n\nvec3 stereographic0(vec3 p) {\n  return invert(p,vec3(0,0,-1),2.0);\n}\n\n// Invert in sphere radius sqrt(2), centre (0,0,-1)\n// is stereographic projection from the unit sphere\n// to z=0 (and its inverse).\nvec2 stereographic(vec3 p) {\n#if 0\n  float k = 1.0/(1.0-p.z);\n  vec2 z = k*p.xy;\n  //assert(distance(istereographic(z),p) < 1e-4);\n  return z;\n#else\n  return stereographic0(p).xy;\n#endif\n}\n\nvec3 istereographic(vec2 z) {\n#if 0\n  float k = 2.0/(dot(z,z)+1.0);\n  vec3 p = vec3(k*z,1.0-k);\n  //assert(distance(stereographic(p),z) < 1e-4);\n  return p;\n#else\n  return stereographic0(vec3(z,0));\n#endif\n}\n\nbool doinversion = true;\nvec3 getspherecolor(vec3 p) {\n  p = transform(p); // autorotation\n  // Apply inversion to sphere.\n  if (true) {\n    vec3 q = vec3(0);\n    if (doinversion && iMouse.x > 0.0) {\n      vec3 m = vec3((2.0*iMouse.xy-iResolution.xy)/iResolution.y,0);\n      q = vec3(m.xyz);\n    }\n    // Any point is the centre of a sphere orthogonal to the\n    // unit sphere, inverting in which leaves the unit sphere\n    // invariant. Any point inverts to another point on the\n    // line to the sphere centre, so just find other\n    // intersection of ray p to r with unit sphere.\n    // |p + kr|^2 = 1 where r = q-p\n    // (p.p + 2kp.r + k^2(r.r)) = 1\n    // 2p.r + k(r.r) = 0 since p.p = 1 & dividing by k\n    vec3 r = q-p;\n    float k = -2.0*dot(p,r)/dot(r,r);\n    p += k*r;\n  }\n  // And stereographic projection from (0,0,1) to plane z = 0\n  return gasketcolor(stereographic(p));\n}\n\nstruct Ray {\n  vec3 q;               // origin\n  vec3 d;               // direction\n};\n\nstruct Hit {\n  float t;      // solution to p=q+t*d\n  vec3 n;       // normal\n};\n\nstruct Sphere {\n  vec3 p;       // centre\n  float r;      // radius\n};\n\nbool intersectSphere(Sphere s, Ray ray, out Hit hit[2]) {\n  vec3 p = s.p;\n  float r = s.r;\n  float c = length(p);\n  vec3 q = ray.q, d = ray.d;\n  // Formula for x^2 + 2Bx + C = 0\n  // |q + t*d - p|^2 = r^2\n  float B = dot(q-p,d);\n  float C = dot(q,q)-2.0*dot(q,p)+(c+r)*(c-r);\n  float D = B*B - C;\n  if (D < 0.0) return false;\n  D = sqrt(D);\n  float t0,t1;\n  if (B >= 0.0) {\n    t0 = -B-D; t1 = C/t0;\n  } else {\n    t1 = -B+D; t0 = C/t1;\n  }\n  hit[0] = Hit(t0,(q+t0*d-p)/r);\n  hit[1] = Hit(t1,(q+t1*d-p)/r);\n  return true;\n}\n\nbool intersectScene(Ray r, out Hit hit[2]) {\n  Sphere s = Sphere(vec3(0),1.0);\n  if (intersectSphere(s,r,hit)) {\n    return true;\n  }\n  return false;\n}\n\nvec3 light;\n\nvec3 solve(Ray r,vec2 uv) {\n  Hit hit[2];\n  vec3 c = vec3(0);\n  if (!dosphere || !intersectScene(r,hit)) {\n    if (dobackground) {\n      vec3 p = istereographic(uv);\n      c = getspherecolor(p);\n      c *= dosphere ? 0.2 : 0.8;\n    }\n  } else {\n    for (int ix = 0; ix < 2; ix++) {\n      int i = dotransparent ? 1-ix : ix;\n        if (hit[i].t < 0.0) continue;\n      vec3 n = hit[i].n;\n      if (dot(r.d,n) > 0.0) n *= -1.0; // ???\n      vec3 basecolor = getspherecolor(hit[i].n);\n      if (basecolor == vec3(0)) continue;\n      vec3 color = vec3(0);\n      float ambient = 0.5;\n      float diffuse = 0.8;\n      color += basecolor*ambient;\n      color += basecolor*diffuse*max(0.0,dot(light,n));\n      float specular = pow(max(0.0,dot(reflect(light,n),r.d)),5.0);\n      vec3 speccolor = basecolor; //vec3(1);\n      color += 1.0*specular*speccolor;\n      if (!dotransparent) return color;\n      c = mix(c,color,0.7);\n    }\n  }\n  return c;\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_I = 73;\nconst int CHAR_M = 77;\nconst int CHAR_O = 79;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_V = 86;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90;\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nbool key(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(in vec3 p) {\n  if (!doinversion && iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.1);\n  }\n  return p;\n}\n\nbool check = false;\nvoid assert(bool b) { if (!b) check = true; }\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  dodual = key(CHAR_D);\n  dobackground = key(CHAR_B);\n  docolorcycle = !key(CHAR_C);\n  dorotate = !key(CHAR_R);\n  dosphere = !key(CHAR_S);\n  dotransparent = !key(CHAR_T);\n  doinversion = key(CHAR_I);\n  NCIRCLES = max(3,4+keycount(KEY_RIGHT)-keycount(KEY_LEFT));\n  dotetrahedron = key(CHAR_X) && dodual && NCIRCLES == 3;\n  //framethreshold = float(max(0,keycount(KEY_PAGE_UP)-keycount(KEY_PAGE_DOWN)));\n\n  light = vec3(0.5,1.0,1.0);\n  light = normalize(light);\n\n  vec3 p = vec3(0,0,6);\n  p.z *= exp(-0.1*float(keycount(KEY_UP)-keycount(KEY_DOWN)));\n  vec3 col = vec3(0);\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 uv = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec3 r = vec3(uv,-6);\n      r = normalize(r);\n      col += solve(Ray(p,r),uv);\n    }\n  }\n  fragColor = vec4(pow(col/(AA*AA),vec3(0.4545)),1);\n  if (check) fragColor = vec4(1,0,0,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}