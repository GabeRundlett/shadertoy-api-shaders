{
    "Shader": {
        "info": {
            "date": "1385625563",
            "description": "rendering of a nebula.\nSPACE: toggle volume cut.\nB: toggle blue center \nO:  toggle shadowing",
            "flags": 0,
            "hasliked": 0,
            "id": "4dBGDR",
            "likes": 33,
            "name": "nebula2",
            "published": 3,
            "tags": [
                "volumelighting"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 2771
        },
        "renderpass": [
            {
                "code": "// --- adapted from 3D noise of inigo quilez \n// https://www.shadertoy.com/view/XslGRr\n\n//#define FULL_PROCEDURAL\n#ifdef FULL_PROCEDURAL\n\n// hash based 3d value noise\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n#else\n\n// LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n#endif\n\n#define mynoise(q) (1.-abs(2.*noise(q)-1.))\n\nfloat fbm( in vec3 q )\n{\n\tfloat f;\n    f  = 0.5000*mynoise( q ); q = q*2.02;\n    f += 0.2500*mynoise( q ); q = q*2.03;\n    f += 0.1250*mynoise( q ); q = q*2.01;\n    f += 0.0625*mynoise( q );\n\treturn f;\n}\n\nbool key_toggle(float ascii) { \n\treturn (texture(iChannel1,vec2((ascii+.5)/256.,0.75)).x > 0.); \n}\n\n// shape\nvec4 map( in vec3 p )\n{\n\t\n\tfloat l = length(p);\n\t\n\t// profile: \n\t//    dens max on sphere shell l = 1\n\t//    density slope stiffer inside (shockwave)\n\tfloat d = 1. - l;\n    if (d>0.) d = -3.*d;\n\t// d = -sqrt(-d);\n\t\n\t// add noise to profile.\n\t// noise = supercondensed \"fire\" fbm \n\tfloat n = pow(fbm(p),4.);\n\td += 2.5 * n;\n\n\t// volume cut, for debug\n\tif (key_toggle(32.))  if (p.x>0.) d = 0.;\n\t\n\tvec4 res;\n\tres.w = clamp(d, 0., 1. ); // density\n\t// color: orange on the shell then darkening red\n\tres.xyz = vec3(1./pow(l*1.,1.),.6/pow(l,3.),0.); \n\t// transparent blue inside\n\tif (!key_toggle(66.)) \n\t\tif ((l<1.) && (res.w==0.)) res += vec4(0.,0.,1.,.1);\n\t\n\treturn clamp(res, 0.0, 1.0 );;\n}\n\n\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n\tvec4 sum = vec4(0, 0, 0, 0);\n\n\tfloat t = 0.0;\n\tfor(int i=0; i<64; i++)\n\t{\n\t\tif( sum.a > 0.99 ) continue;\n\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos ); // .w = density\n\t\t\n\tif (key_toggle(79.))  // Ombrage\n\t{\n\t\tvec3 sundir = -normalize(pos); // vec3(-1.0,0.0,0.0);\n#define EPS .3\t\n\t\tfloat dif = (col.w - map(pos+EPS*sundir).w)/EPS; // grad(dens).L\n\n\t\tcol.xyz *= .5+.5*clamp(.5*dif, 0.,1.);\n\t}\n\t\t\n\t\tcol.a *= 0.35;\n\t\tcol.rgb *= col.a;\n\n\t\tsum = sum + col*(1.0 - sum.a);\t\n\t\tt += max(0.1,0.025*t);\n\t}\n\n\tsum.xyz /= (0.001+sum.w);\n\n\treturn clamp( sum, 0.0, 1.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = 2.*(fragCoord.xy / iResolution.y -vec2(.8,.7));\n    vec2 mo = -1.0 + 2.0*iMouse.xy / iResolution.xy;\n    \n    // camera\n    vec3 ro = 4.0*normalize(vec3(cos(2.75-3.0*mo.x), 0.7+(mo.y+1.0), sin(2.75-3.0*mo.x)));\n\tvec3 ta = vec3(0.0, 1.0, 0.0);\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\t\n    vec4 col = raymarch( ro, rd );\n\n\tvec4 sky;\n\t//sky = vec4(1.,1.,1.,1.); \n\tsky = vec4(.1,.0,.0,1.);\n    fragColor = mix(sky,col,col.w);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}