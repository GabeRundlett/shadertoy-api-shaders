{
    "Shader": {
        "info": {
            "date": "1692479506",
            "description": "A simple doodle rendering a Voronoi diagram",
            "flags": 0,
            "hasliked": 0,
            "id": "ctXfzn",
            "likes": 10,
            "name": "Voronoi doodle",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "lisyarus",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "vec2 randomInCell(ivec2 cell)\n{\n    // All random constants are produced by randomly pressing 4 keys on the numpad\n\n    vec2 result = vec2(\n        fract(sin(1275.0 * float(cell.x) + 7564.0 * float(cell.y))),\n        fract(sin(2134.0 * float(cell.y) + 8974.0 * float(cell.x)))\n    );\n    \n    // Wiggle the resulting point with time, but make sure it doesn't escape the cell\n    result.x += sin(3548.0 * float(cell.x) + 4789.0 * float(cell.y) + iTime) * min(result.x, 1.0 - result.x) * 0.8;\n    result.y += sin(3875.0 * float(cell.x) + 4554.0 * float(cell.y) + iTime) * min(result.y, 1.0 - result.y) * 0.8;\n    \n    return result;\n}\n\nvec3 cellColor(ivec2 cell)\n{\n    return vec3(\n        fract(sin(127.0 * float(cell.x) + 756.0 * float(cell.y))),\n        fract(sin(213.0 * float(cell.x) + 897.0 * float(cell.y))),\n        fract(sin(345.0 * float(cell.x) + 456.0 * float(cell.y)))\n    );\n}\n\nvec3 voronoiColor(vec2 fragCoord)\n{\n    const float cellSize = 128.0;\n    ivec2 cellId = ivec2(fragCoord / cellSize);\n    vec2 cellStart = vec2(cellId) * cellSize;\n    \n    float closest = 1e8;\n    float secondClosest = 1e8;\n    \n    vec3 color = vec3(0.0);\n    \n    for (int x = -1; x <= 1; ++x)\n    {\n        for (int y = -1; y <= 1; ++y)\n        {\n            vec2 cellPoint = cellStart + cellSize * randomInCell(cellId + ivec2(x, y)) + vec2(ivec2(x, y)) * cellSize;\n            float dist = distance(cellPoint, fragCoord);\n            if (dist < closest)\n            {\n                secondClosest = closest;\n                closest = dist;\n                color = cellColor(cellId + ivec2(x, y));\n            }\n            else if (dist < secondClosest)\n            {\n                secondClosest = dist;\n            }\n        }\n    }\n    \n    vec3 centerColor;\n    float oops = dot(color, vec3(1.0));\n    \n    if (oops < 1.0)\n        centerColor = vec3(0.1, 0.2, 0.3);\n    else if (oops < 2.0)\n        centerColor = vec3(0.2, 0.1, 0.2);\n    else\n        centerColor = vec3(0.1, 0.1, 0.2);\n    \n    //color = mix(vec3(0.1, 0.1, 0.2), vec3(1.0, 0.8, 0.5), 0.02 * closest);\n    color = mix(centerColor, vec3(1.0, 0.8, 0.5), pow(closest/100.0, 2.0));\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = vec3(0.0);\n    float weights = 0.0;\n    \n    //float p = 1.0 + 2.0 * smoothstep(100.0, 110.0, distance(iMouse.xy, fragCoord));\n    float p = 1.5;\n    \n    for (int o = 0; o < 2; ++o)\n    {\n        float s = pow(2.0, float(o));\n        float w = pow(2.0, - p * float(o));\n        color += voronoiColor(fragCoord * s) * w;\n        weights += w;\n    }\n\n    fragColor = vec4(color / weights, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}