{
    "Shader": {
        "info": {
            "date": "1682233466",
            "description": "highlight points while mouse is moving",
            "flags": 0,
            "hasliked": 0,
            "id": "DttGWn",
            "likes": 2,
            "name": "highlight points",
            "published": 3,
            "tags": [
                "mouse",
                "circle",
                "points",
                "highlight"
            ],
            "usePreview": 0,
            "username": "liuming",
            "viewed": 114
        },
        "renderpass": [
            {
                "code": "// draw circle matrix\n\nconst float num = 30.0;\nconst vec4 circleColor = vec4(0.5, 0.4, 0.8, 1.0);\nconst vec4 hlColor = vec4(1.0, 0.2, 0.2, 1.0);\nconst vec4 scanColor = vec4(1.0, 0.6, 0.7, 1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;  // transform to center & scale aspect\n    vec2 mouse = (iMouse.xy - .5 * iResolution.xy) / iResolution.y;\n\n    // grid pos\n    vec2 pos = floor(uv * num);\n\n    // circle\n    vec2 center = (pos + 0.5) / num;\n    float r = 1.0 / num / 2.0 / 2.0; \n    r *= mix(.9, 1.2, sin(iTime));\n\n    // AA\n    float d = r - length(uv - center);\n    float anti = fwidth(d);\n    float alpha = smoothstep(-anti, anti, d);\n    fragColor = circleColor * alpha;\n    \n    // scan wave\n    float r_scan[] = float[](.1,.3,.5,.7,.9);\n    float d_scanAll = -1.0;\n    float gap = .1;\n    for(int i = 0;i<r_scan.length();i++){\n        float d_scanOuter = (r_scan[i] + gap - length(uv));\n        d_scanOuter += fract(iTime) * gap * 2.0; // cycle\n        float d_scan = min(d,min(d_scanOuter,-d_scanOuter + gap));\n        d_scanAll = max(d_scanAll,d_scan);\n    }\n    if(d_scanAll >= .0){\n        fragColor = scanColor * alpha;\n    }\n    \n    // mouse highlight\n    float hl_r = 0.2;\n    float d_mouse = hl_r - length(uv - mouse);\n    float dis_hl = min(d,d_mouse);\n    if(dis_hl >= .0){\n        fragColor = hlColor * alpha;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}