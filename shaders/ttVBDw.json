{
    "Shader": {
        "info": {
            "date": "1614505148",
            "description": "License CC0: Sunday Fractals 2\nInspired by: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nSABS from ollj",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVBDw",
            "likes": 9,
            "name": "Sunday fractals 2",
            "published": 3,
            "tags": [
                "2d",
                "fractals"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 422
        },
        "renderpass": [
            {
                "code": "// License CC0: Sunday Fractals 2\n// Inspired by: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\n// SABS from ollj\n\n#define RESOLUTION      iResolution\n#define TIME            iTime\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define L2(x)           dot(x,x)\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\nfloat hash(float co) {\n  co += 1234.;\n  return fract(sin(dot(co, 12.9898)) * 13758.5453);\n}\n\nfloat maxComp(vec3 c) {\n  return max(c.x, max(c.y, c.z));\n}\n\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) {\n  return pmax(a, -a, k);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nfloat fractal(vec2 p, vec2 c, vec2 ot) {\n  vec2 u = p;\n  float lx = 1E6;\n  float ly = 1E6;\n  float lp = 1E6;\n  const int maxi = 9;\n  float s = 1.0;\n\n  for (int i = 0; i < maxi; ++i) {\n    float m = dot(u, u);\n    u = SABS(u, 0.075)/m + c;\n    s *= m;\n    float dx = abs(u.x - ot.x);\n    float dy = abs(u.y - ot.y);\n    float dp = abs(1.65-length(u));\n    if(m > 0.033) {\n      lx = min(lx, dx);\n      ly = min(ly, dy);\n    }\n    lp = min(lp, dp);\n  }\n  \n  float l = lp;\n  l = pmin(l, lx, 0.05);\n  l = pmin(l, ly, 0.05);\n  l -= 0.025;\n  return l*s;\n}\n\nfloat df(vec2 p, vec2 c, float hh) {\n  p *= ROT(TIME*TAU/120.0);\n  float rep = 2.0*round(mix(3.0, 12.0, hh));\n  float sm = 0.025*10.0/rep;\n  smoothKaleidoscope(p, sm, rep);\n  p *= ROT(hh*TAU+0.05);\n  vec2 u = p;\n  vec2 ot = mix(1.5, -1.5, hh)*vec2(cos(TAU*hh*sqrt(0.5)), sin(TAU*hh));\n  return fractal(p, c, ot);\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/vec3(2.2));\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvec3 color(vec2 p, vec2 c, float hh, float aa) {\n  float d = df(p, c, hh);\n  vec3 col = vec3(0.0);\n  float l2 = tanh_approx(L2(p));\n  vec3 hsv = vec3(0.0+hh+l2*0.5, mix(0.5, 0.75, l2), 1.0);\n  vec3 glowCol = hsv2rgb(hsv)*2.0;\n//  vec3 glowCol = vec3(0.5, 0.5, 1.0)*mix(2.0, 2.0, l2);\n  glowCol = d < 0.0 ? glowCol : glowCol.zxy;\n  col += glowCol*exp(-mix(300.0, 900.0, l2)*max(abs(d), 0.0));\n  col += glowCol*abs(tanh_approx(d));\n//  col = mix(col, vec3(1.0), smoothstep(-aa, aa, -d));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  const float period = 10.0;\n  float nperiod = floor(TIME/period);\n  float tperiod = mod(TIME, period);\n  float hh = hash(nperiod);\n  vec2  c = vec2(-1.30,  -1.30)+0.2*vec2(sin(0.05*TIME+TAU*hh*vec2(1.0, sqrt(0.5)*0.5)));\n  \n  vec2 o1 = vec2(1.0/8.0, 3.0/8.0)*aa;\n  vec2 o2 = vec2(-3.0/8.0, 1.0/8.0)*aa;\n  \n  vec3 col = color(p+o1, c, hh, aa);\n  float mc = maxComp(clamp(col, 0.0, 1.0));\n  float dmc = length(vec2(dFdx(mc), dFdy(mc)))/(mc+0.075);\n  if (dmc > 0.5) {\n    col += color(p-o1, c, hh, aa);\n    col += color(p+o2, c, hh, aa);\n    col += color(p-o2, c, hh, aa);\n    col *= 0.25;\n//    col += vec3(1.0, 0.0, 0.0);\n  }\n  col = clamp(col, 0.0, 1.0);\n  col *= smoothstep(0.0, 0.5, tperiod);\n  col *= 1.0-smoothstep(period-0.5, period, tperiod);\n  col = postProcess(col, q);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}