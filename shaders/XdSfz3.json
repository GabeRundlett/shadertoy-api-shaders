{
    "Shader": {
        "info": {
            "date": "1501346413",
            "description": "WIP thing for a Ludum Dare entry",
            "flags": 0,
            "hasliked": 0,
            "id": "XdSfz3",
            "likes": 25,
            "name": "polygonal creature",
            "published": 3,
            "tags": [
                "polygon",
                "vaporwave"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 1505
        },
        "renderpass": [
            {
                "code": "// -- utility stuff\n\n#define PI 3.14159\n#define TWO_PI 6.28319\n\n#define SIDES 3\n\n// stripes without fmod discontinuity\nfloat smoothStripe(float v, float stripeWidth, float smoothingWidth, float offset) {\n    return smoothstep(-smoothingWidth,smoothingWidth,abs(1. - 2. * fract(v / stripeWidth)) - 0.5 + offset);\n}\n\n// rotate p by a\nvec2 r(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\n\n// inscribed polygon\nfloat polygonDistance(vec2 p, float r, int sides) {\n    float apothem = r * cos(PI / float(sides));\n    float a = atan(p.x, p.y);\n    float b = TWO_PI / float(sides);\n    return cos(floor(0.5 + a / b) * b - a) * length(p) - apothem;\n}\n\n// repeats the area in positive Y around the number of sectors\nvec2 opRepeatRadial(vec2 p, int sectorCount) {\n    float fSectors = float(sectorCount);\n    float segmentAngle = (floor((atan(p.x, p.y) / TWO_PI - 0.5) * fSectors) + 0.5) * TWO_PI / fSectors;\n    return -r(p, segmentAngle);\n}\n\n\n// -- main\n\nfloat layerValue(vec2 uv, float time) {\n    float sw = 0.1; // smoothing width multiplier\n    float mainDistance = polygonDistance(uv, 0.5, SIDES);\n    float mainStripes = smoothStripe(mainDistance + time * 0.08, 0.1, sw * 3., 0.);\n    float baseCrop = smoothstep(0., -sw * 0.2, mainDistance);\n    float v = baseCrop * max(mainStripes, smoothstep(-sw, 0., mainDistance + 0.05) /* border */);\n    \n    vec2 subspace = opRepeatRadial(vec2(uv.x, -uv.y), SIDES);\n    float v2 = smoothstep(sw * 0.1, 0., polygonDistance(subspace - vec2(0., 0.2 + sin(time) * 0.3), 0.2, SIDES));\n    v *= v2;\n    v = mix(baseCrop * smoothStripe(mainDistance - time * 0.16, 0.2, sw, -0.3), v, v2);\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2. * (fragCoord.xy / iResolution.xy - vec2(0.5));\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec3 c1, c2, c3;\n    \n\t// mostly green/blue, some purple\n    c1 = vec3(0.05, 0.94, 0.58);\n    c2 = vec3(0.03, 0.47, 0.93);\n    c3 = vec3(0.4, 0.15, 0.95);\n\n    // mostly pink, slightly purple\n/*\n\tc1 = vec3(0.94, 0.05, 0.65);\n    c2 = vec3(0.85, 0.15, 0.35);\n    c3 = vec3(0.4, 0.15, 0.95);\n*/\n\n    // mostly blue, some cyan (thought I was gonna say purple, didnâ€™t you?)\n/*\n    c1 = vec3(0.2, 0.05, 0.95);\n    c2 = vec3(0.4, 0.05, 0.9);\n    c3 = vec3(0.25, 0.6, 0.93);\n*/\n    /*\n    c1 = vec3(0.05, 0.4, 0.95);\n    c2 = vec3(0.3, 0.8, 0.6);\n    c3 = vec3(0.05, 0.1, 0.9);\n  */\n    // mostly orange \n    /*\n    c1 = vec3(0.95, 0.6, 0.05);\n    c2 = vec3(0.93, 0.4, 0.03);\n    c3 = vec3(0.8, 0.2, 0.05);\n    */\n    \n    // mostly purple, some blue\n    /*\n    c1 = vec3(0.6, 0.05, 0.93);\n    c2 = vec3(0.4, 0.03, 0.95);\n    c3 = vec3(0.1, 0.4, 0.9);\n*/\n    \n    vec3 v1 = layerValue(uv, iTime) * c1;\n    vec3 v2 = layerValue(uv, iTime * -0.9 + 0.8) * c2;\n    vec3 v3 = layerValue(uv, iTime * 1.1 + 0.3) * c3;\n    \n    vec3 color = v1 + v2 + v3;\n    color *= 1.5;\n    \n\tfragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}