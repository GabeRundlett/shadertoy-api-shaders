{
    "Shader": {
        "info": {
            "date": "1525878073",
            "description": "rigid scales under non-rigid displacement let appearing deep color at stretched places while crushed places only show surface color.\n\nloop-less algorithm ( the 0..3 doesn't count ;-) )",
            "flags": 0,
            "hasliked": 0,
            "id": "XdcBRj",
            "likes": 16,
            "name": "scales effect",
            "published": 3,
            "tags": [
                "2d",
                "pattern",
                "perception",
                "loopless"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1243
        },
        "renderpass": [
            {
                "code": "// scale size   + wave characteristics\n//float r = .65, Ax = .15, Lx = 1., Ay = 1., Ly = .5, Lt = 1.;\n//float r = .9,  Ax = .15, Lx = 1., Ay = 0., Ly = .5, Lt = 1.;\n  float r = .9,  Ax = .15, Lx = 1., Ay = 2., Ly = .5, Lt = 4.;\n\nvec2 disp(vec2 U) {\n    U.x += Ax*sin(Lx*U.x +Lt*iTime +Ay*sin(Ly*U.y));\n    return U;\n}\nvec2 invdisp(vec2 V) {\n    float x = V.x;\n    for (int i=0; i<3; i++)              // converges ultra-fast for small Ax\n        x = V.x - Ax*sin(Lx*x+ Lt*iTime +Ay*sin(Ly*V.y));\n    return vec2(x,V.y);\n}\n      \nvoid mainImage( out vec4 O, vec2 U ) {\n    float p = 10./iResolution.y;         // scales = relative size\n  //float p = 1./30.;                    // scales = absolute size\n    U *= p;\n    O -= O;\n    \n    for (int k=0; k<4; k++) {                                  // 4 covering scales\n        vec2  D = ( vec2(k%2,k/2)+.75*vec2(0,k%2 )) * .5,\n              V = disp(U),\n             U0 = invdisp( floor(V-D)+D+.5 ),                  // cell center \n           // F = fract(V)*2.-1.;                              // distorted scales\n              F = 2.*(U-U0);                                   // rigid scales\n        //O += cos(6.28*vec4(10,5,1,0)*length(F)); return;     // debug\n        float m = smoothstep(0.,-3.*p,length(F)-r),            // scale mask\n              z = m*(.5+.5*(F.x+F.y)/1.4/r);                   // scale z\n        if (z>O.a) O = vec4(  mix(vec3(.3,0,0),vec3(1),clamp(-1.5+3.*z,0.,1.)) // color gradient\n                            * smoothstep(0.,-3.*p,length(F)-(r-.1)), // dark border\n                              z);\n    }   \n    O = sqrt(O);                                               // gamma correction\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}