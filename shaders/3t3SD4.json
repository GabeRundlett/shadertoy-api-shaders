{
    "Shader": {
        "info": {
            "date": "1580908511",
            "description": "What I am doing is trying to apply object-oriented culture to GLSL.",
            "flags": 0,
            "hasliked": 0,
            "id": "3t3SD4",
            "likes": 3,
            "name": "OOP + GLSL = LOVE",
            "published": 3,
            "tags": [
                "experiment",
                "glsl",
                "oop"
            ],
            "usePreview": 0,
            "username": "dmitrykolesnikovich",
            "viewed": 888
        },
        "renderpass": [
            {
                "code": "//\n// Below is attempt to apply object-oriented culture to GLSL.\n//\n// Any shader I can think of consists of canvas and objects\n// \n// canvas\n//   normalization\n//   init\n//   append objects with `+=`\n// \n// object\n//   coordinates\n//   geometry\n// \t graphics\n//\t coloring\n//   invoke standard constructor\n// \n\n/*standard*/\n\n#define constructor(geometry, graphics, coloring) geometry ? graphics * coloring : vec3(0.)\n\n/*support*/\n\n#define normalizeCoordinates(p) (p.xy / iResolution.xx * 4. - .1) * 3.\n#define RED vec3(1, 0, 0)\n#define GREEN vec3(0, 1, 0)\n#define BLUE vec3(0, 0, 1)\nvec2 rotate(vec2 v, float a) { a = a / 180. * 3.14; float s = sin(a); float c = cos(a); mat2 m = mat2(c, -s, s, c); return m * v; }\nfloat parity(vec2 id) { return mod(id.x + id.y, 2.); }\n\n/*object*/\n\nvec3 Object(vec2 p, vec2 m, vec3 coloring)\n{\n    vec2 center = p - m; // coordinates\n \tbool geometry = center.x * center.x + center.y * center.y < 1.; // geometry\n    float graphics = parity(rotate(p, -45.)); // graphics\n    coloring.b *= sin(p.x * 2.); // coloring\n    return constructor(geometry, graphics, coloring); // invoke standard constructor\n}\n\n\n/*canvas*/\n\nvoid mainImage(out vec4 canvas, in vec2 pixel)\n{\n    // normalization\n    vec2 p = normalizeCoordinates(pixel);\n    vec2 m = normalizeCoordinates(iMouse);\n    \n    // init\n    canvas = vec4(0);\n    \n    // append objects with `+=`\n    canvas += vec4(Object(p, m, RED), 1);\n    canvas += vec4(Object(p, m + vec2(.95, 1.7), GREEN), 1);\n    canvas += vec4(Object(p, m + vec2(2, 0), BLUE), 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}