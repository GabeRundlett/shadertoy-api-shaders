{
    "Shader": {
        "info": {
            "date": "1678133549",
            "description": "CC0: Ghost train\nApplying the \"light model\" I used for the necropolis shader\nto the \"amazing surface\" borrowed from https://www.shadertoy.com/view/XsBXWt\nturned out good enough to share.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "msKGzR",
            "likes": 42,
            "name": "Ghost train",
            "published": 3,
            "tags": [
                "trains"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 671
        },
        "renderpass": [
            {
                "code": "// CC0: Ghost train\n//  Applying the \"light model\" I used for the necropolis shader\n//  to the \"amazing surface\" borrowed from https://www.shadertoy.com/view/XsBXWt\n//  turned out good enough to share.\n\n\n#define TIME                iTime\n#define RESOLUTION          iResolution\n\n#define PI                  3.141592654\n#define TAU                 (2.0*PI)\n#define TOLERANCE           0.0001\n#define MAX_RAY_LENGTH      12.0\n#define MAX_RAY_MARCHES     60\n#define MAX_SHADOW_MARCHES  24\n#define NORM_OFF            0.001\n#define ROT(a)              mat2(cos(a), sin(a), -sin(a), cos(a))\n#define REPS                4\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff= 0.35;\nconst vec3 ecol = HSV2RGB(vec3(hoff+0.65, 0.9, 0.025));\nconst vec3 bcol = HSV2RGB(vec3(hoff+0.45, 0.85, 0.051));\nconst vec3 dcol = HSV2RGB(vec3(hoff+0.58, 0.666, 0.666));\nconst vec3 scol = HSV2RGB(vec3(hoff+0.58, 0.5  , 2.0));\nconst vec3 gcol = HSV2RGB(vec3(hoff+0.35, 0.36 , 5.0));\nconst vec3 skyCol = (0.125*gcol+dcol)*0.5; \nconst vec2 csize  = vec2(4.5);\n\nconst vec3 lightDir = normalize(vec3(-1, 1.0, 0.25));\n\nfloat g_near = 0.0;\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat capsule(vec3 p, vec2 t) {\n  float h = t.x;\n  float r = t.y;\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat torus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// \"Amazing Surface\" fractal\n//  \"borrowed\" from https://www.shadertoy.com/view/XsBXWt\nvec4 formula(vec4 p) {\n  p.xz = abs(p.xz+1.)-abs(p.xz-1.)-p.xz;\n  p.y-=.25;\n  const mat2 r = ROT(radians(35.)); \n  p.xy*=r;\n  p=p*2./clamp(dot(p.xyz,p.xyz),.2,1.-0.125);\n  return p;\n}\n\nfloat surface(vec3 pos) {\n  pos.z = abs(pos.z);\n  pos.z = pos.z-1.0;\n  mod1(pos.x, 6.0);\n  pos.xz = pos.zx;\n  \n  float hid=0.;\n  vec3 tpos=pos;\n  vec4 p=vec4(tpos,1.);\n\n  for (int i=0; i<REPS; i++) {\n    p=formula(p);\n  }\n\n  float fr=(length(max(vec2(0.),p.yz-1.5))-1.)/p.w;\n\n  float ro=max(abs(pos.x+1.)-.3,pos.y-.35);\n  ro=max(ro,-max(abs(pos.x+1.)-.1,pos.y-.5));\n  pos.z=abs(.25-mod(pos.z,.5));\n  ro=max(ro,-max(abs(pos.z)-.2,pos.y-.3));\n  ro=max(ro,-max(abs(pos.z)-.01,-pos.y+.32));\n\n  float d=min(fr,ro);\n\n  return d;\n}\n\nfloat train(vec3 p) {\n  const float rw = 0.25;\n  const float mw = 60.0;\n \n  vec3 p3 = p;\n  p3.z = abs(p3.z);\n  p3.z -= 0.3;\n  p3.y -= 0.5;\n  float d3 = length(p3.zy)-0.05; \n \n  p.x -= TIME*8.0;\n  float nx = mod1(p.x, mw);\n  p.x += 0.75*mw*(hash(nx)-0.5);\n  vec3 p4 = p;\n  p4.x -= 2.4;\n  p4.y -= 0.9;\n  float d4 = length(p4.zy)-0.2;\n  float d5 = length(p4-vec3(-0.6,0.0,0.0))-0.1;\n  float d2 = max(p.x-(1.0), -p.x+rw);\n  p = p.zxy;\n  p.z -= 0.7;\n  vec3 p0 = p;\n  vec3 p1 = p;\n  mod1(p1.y, rw);\n  float d1 = torus(p1, 0.5*vec2(1.0, 0.025));\n  float d0 = capsule(p0, vec2(1.5, 0.5));\n  d1 = max(d1, d2);\n  float d = d0;\n  d = pmax(d, -(d1-0.05), 0.05);\n  d = max(d, -d3);\n  d = min(d, d1);\n  d = pmax(d, -d4, 0.05);\n  d = min(d, d5);\n  g_near = min(g_near, min(d1, d5));\n  return d;\n}\n\nfloat df(vec3 p) {\n  float d0 = surface(p);\n  float d1 = train(p);\n  float d = d0;\n  d = min(d, d1);\n  return d;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float initt, out int iter) {\n  float t = initt;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  iter = i;\n  return t;\n}\n\nfloat softShadow(vec3 ps, vec3 ld, float mint, float k) {\n  float res = 1.0;\n  float t = mint*2.0;\n  for (int i=0; i<MAX_SHADOW_MARCHES; ++i) {\n    vec3 p = ps + ld*t;\n    float d = df(p);\n    res = min(res, k*d/t);\n    if (res < TOLERANCE) break;\n    \n    t += max(d, mint);\n  }\n  return clamp(res, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  int iter;\n  float initt = -(ro.y-1.5)/rd.y;\n  initt = max(initt, 0.0);\n  float bott  = -(ro.y-0.5)/rd.y;\n  bott = max(bott, 0.0);\n  g_near = 1E4;\n  float t = rayMarch(ro, rd, initt, iter);\n  float near = g_near;\n  vec3 col = skyCol;\n  vec3 bp = ro+rd*bott;\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  vec3 r = reflect(rd, n);\n  float sd = softShadow(p, lightDir, 0.025, 4.0);\n  float dif = max(dot(lightDir, n), 0.0);\n  dif *= dif;\n  dif *= dif;\n  float spe = pow(max(dot(lightDir, r), 0.0), 10.0);\n  float ii = float(iter)/float(MAX_RAY_MARCHES);\n  if (t < MAX_RAY_LENGTH) {\n    col = dcol;\n    col += gcol*tanh_approx(1.0*ii*ii);\n    col *= mix(0.05, 1.0, dif*sd);\n    col += spe*sd*scol;\n  }\n \n  float gd = abs(abs(bp.z) - .3);\n  gd -= mix(0.0025, 0.01, 0.5+0.5*(sin(13.0*bp.x+2.0*TIME)*sin(6.0*bp.x+3.0*TIME)));\n\n  float ef = 1.0/(max(near*near, 0.00025*bott+0.000125));\n  ef *= mix(0.25, 1.0, smoothstep(0.125, 0.33, ii));\n  col += ecol*ef;  \n  col += bcol/max(gd+.5*max(bott-t, 0.001), 0.0002*bott*bott);\n\n  float c = tanh_approx(p.y*p.y*5.0);\n  col = mix(skyCol, col, exp(-mix(0.25, 0.125, c)*max(t-initt, 0.)-0.25*max(t-5.0, 0.)));\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  vec3 ro = vec3(3.0, 2., 0.0);\n  ro.x -= 0.3*TIME;\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n  const vec3 ww = normalize(vec3(-3.0, -2.5, 0.0));\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  float ll = length(pp);\n  vec3 col = render(ro, rd);\n  col -= 0.1*vec3(0.0, 1.0, 2.0).zyx*(ll+0.3);\n  col *= smoothstep(1.5, 1.0-0.5, ll);\n  col = aces_approx(col); \n  col = sRGB(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p,pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}