{
    "Shader": {
        "info": {
            "date": "1649893771",
            "description": "Crystal Computer III AA version - Thank you @tdhooper for help on eeking out perf and adding AA/Blur. ",
            "flags": 0,
            "hasliked": 0,
            "id": "stSczy",
            "likes": 5,
            "name": "Crystal Computer III AA version",
            "published": 3,
            "tags": [
                "raymarching",
                "retro",
                "refraction",
                "glass",
                "computer",
                "design",
                "drive",
                "tape"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    4/13/22 @byt3_m3chanic \n    Crystal Computers III\n\n    Thank you @tdhooper - AA/Motion Blur goodness from @iq \n    Re-visit of my last shader with some AA options. I also tried\n    to eek out some performance and precal some vars and vecs\n    \n    (previous version https://www.shadertoy.com/view/Ns3XR4)\n\n    IF SLOW COMMENT OUT #define AA BELOW\n*/\n\n#define R iResolution\n#define M iMouse\n#define T time\n\n#define PI2 6.28318530718\n#define PI  3.14159265359\n\nfloat time;\n\nmat2 rot (float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21( vec2 p ) {return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);}\nfloat lsp(float begin, float end, float t) {return clamp((t-begin)/(end-begin),0.,1.);}\nfloat eoc(float t) {return (t=t-1.)*t*t+1.;}\n\n// http://mercury.sexy/hg_sdf/\n    const float angle = 2.*PI/3.;\nfloat modPolar(inout vec2 p) {\n    float a = atan(p.y, p.x) + angle/2.;\n    float c = floor(a/angle);\n    a = mod(a,angle) - angle/2.;\n    p = vec2(cos(a), sin(a))*length(p);\n    return (abs(c) >= (3./2.)) ? abs(c) : c;\n} \n\n// The Folds\nvoid tet(inout vec4 p) {\n\tp = abs(p);\n\tif (p.x < p.y) p.xy = p.yx; p.x = -p.x;\n\tif (p.x > p.y) p.xy = p.yx; p.x = -p.x;\n\tif (p.x < p.z) p.xz = p.zx; p.x = -p.x;\n\tif (p.x > p.z) p.xz = p.zx; p.x = -p.x;\n}\n\n//@iq thanks for the sdf's!\nfloat cap( vec3 p, float h, float r ) {\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\nfloat sdbox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\nfloat sdbox( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.)) + min(max(d.x,d.y),0.);\n}\n\nfloat sdframe( vec3 p, vec3 b, float e ) {\n  p = abs(p)-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.))+min(max(p.x,max(q.y,q.z)),0.),\n      length(max(vec3(q.x,p.y,q.z),0.))+min(max(q.x,max(p.y,q.z)),0.)),\n      length(max(vec3(q.x,q.y,p.z),0.))+min(max(q.x,max(q.y,p.z)),0.));\n}\n\n//globals\nmat2 tprot,rx,ry,mmt1,mmt2,mmt3;\nfloat tmod,ga1,ga2,ga3,ga4,tt;\nfloat ttx,tta;\n\nvec2 map(vec3 p) {\n    vec2 res =vec2(1e5,0.);\n\n    p.xz*=ry;\n    vec4 P = vec4(p.xyz,1.);\n    tet(P);\n\n    vec3 q = P.xyz; \n    q-=vec3(.5,1.5,.5);\n    \n    q.yz*=mmt1;\n    q.x=abs(q.x)-ttx;\n    q.zx*=mmt2;\n    q.z=abs(q.z)-tta;\n    q.yx*=mmt3;\n\n    float mainbox = sdbox(q-vec3(0,1.1,0),vec3(1.5,3,.75));\n    float cutbox =  sdbox(q-vec3(.45,1.25,.775),vec3(.85,2.5,1.1));\n    mainbox = max(mainbox, -cutbox);\n\n    float frame2 = sdframe(q-vec3(0,1.1,0),vec3(1.6,3.1,.82),.075)-.0125;\n    if(frame2<res.x) res = vec2(frame2,4.);\n    float frame = sdbox(q-vec3(-.3,1.3,.7),vec3(.445,1.35,.05));\n    float tapeB = cap(vec3(q.y,q.z,abs(q.x))-vec3(2.8,.55,.65),.225,.1);\n    tapeB = min(  cap(vec3(q.y,q.z,abs(q.x))-vec3(1.95,.5,.65),.100,.1),tapeB);\n\n    vec3 tq1 = q.yzx-vec3(2.9,.25,.55);\n    tq1.x=abs(abs(tq1.x+1.65)-1.2)-.6;\n    frame = min(cap(tq1+vec3(0,.35,0),.25,.5),frame);\n    vec3 pq1 = tq1;\n    pq1.xz *= tprot;\n\n    modPolar(pq1.xz);\n    float tcbx = sdbox(pq1-vec3(.4,0,0),vec3(.09,.09,.075));\n    \n    float tape1 = cap(tq1,.575,.05);\n    tape1=max(tape1,-tcbx);\n    if(tape1<res.x) res = vec2(tape1,3.);\n\n    vec3 bq = q-vec3(-.9,3,.65);\n    bq.y=abs(abs(abs(bq.y)-.4)-.2)-.1;\n    bq.x=abs(bq.x)-.2;\n    float btn1 = sdbox(bq,vec3(.15,.05,.25))-.0125;\n    btn1 = min(sdbox(q-vec3(-.5,1.25,.85),vec3(.45,.3,.06))-.0125,btn1);\n    if(btn1<res.x) res = vec2(btn1,2.);\n    \n    mainbox = min(mainbox, frame);\n    if(mainbox<res.x) res = vec2(mainbox,1.);\n\n    res.x/=P.w;\n    return res;\n}\n\nvec3 normal(vec3 p, float t, float mindist) {\n    t*=mindist;\n    float d = map(p).x;\n    vec2 e = vec2(t,0);\n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x\n    );\n    return normalize(n);\n}\n\nvec3 render(vec3 p, vec3 rd, vec3 ro, float d, float m, inout vec3 n) \n{\n    \n    n = normal(p,d,1.);\n    vec3 lpos =  vec3(5.,10,8.);\n    vec3 l = normalize(lpos);\n    float diff = clamp(dot(n,l),0.,1.);\n\n    vec3 h = vec3(.3);\n    \n    if(m==1.) {\n        vec3 h2 =mix(vec3(.05),vec3(.4),clamp((p.y+1.)*.25,0.,1.));\n        h=mix(h2,vec3(.1),clamp((p.z+4.)*.1,0.,1.));\n    }\n\n    if(m==2.) {\n        vec3 h2=mix(vec3(.596,.110,.690),vec3(.961,.000,.094),clamp((p.x+2.)*.07,0.,1.));\n        h=mix(vec3(.600,0.525,0.039),h2,clamp((p.z+2.)*.07,0.,1.));\n    }\n    if(m==3.) {\n        vec3 h2 =mix(vec3(.000,.639,.514),vec3(.698,.608,.165),clamp((p.x+4.)*.1,0.,1.));\n        h=mix(h2,vec3(.871,.169,.847),clamp((p.y+3.)*.1,0.,1.));\n    }\n    if(m==4.) {\n        vec3 h2 =mix(vec3(.5),vec3(.1),clamp((p.y+1.)*.25,0.,1.));\n        h=mix(h2,vec3(.01),clamp((p.z+4.)*.1,0.,1.));\n    }\n    return diff*h;\n}\n\n// AA Setting\n#define AA 2\n\nvec3 renderFull( vec2 uv )\n{\n\n    float alpha = 1.;\n    vec3 C = vec3(.00);\n    \n    // precal\n    float time = T;\n    tprot=rot(T*2.);\n    tmod = mod(time,24.);\n    float t1 = lsp(1.,5.,tmod);\n    float t2 = lsp(8.,10.,tmod);\n    float t3 = lsp(4.,7.,tmod);\n    float t4 = lsp(14.,22.,tmod);\n    float t6 = lsp(8.,10.,tmod);\n    float t7 = lsp(3.,12.,tmod);\n\n    ga1 = eoc(t1-t2);ga1 = ga1*ga1*ga1;\n    ga2 = eoc(t3-t4);ga2 = ga2*ga2*ga2;  \n    ga3 = eoc(t3-t6);ga3 = ga3*ga3*ga3;  \n    ga4 = eoc(t7-t4);ga4 = ga4*ga4*ga4;\n\n    tt = time*.137;\n    mmt1=rot(ga1*PI-tt);\n    mmt2=rot((ga1+ga2)*PI);\n    mmt3=rot(ga3*PI+tt);\n\n    ttx=(2.5+(2.5*ga3)+ga4);\n    tta=(1.25+(2.*ga1));\n\n    //perspective camera \n    vec3 ro = vec3(0,0,25);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    rx =rot(.78);\n    ry =rot(T*.12);\n    ro.yz *= rx; \n    rd.yz *= rx; \n\n    vec3  p = ro + rd;\n    float atten = 1.;\n    float k = 1.;\n    float d = 0.;\n    float iv = 1.;\n    int bounce = 0;\n\n    #ifdef AA\n        int steps = 75;\n        int thresh = 3;\n    #else\n        int steps = 185;\n        int thresh = 5;\n    #endif\n\n    for(int i=0;i<steps;i++)\n    {\n        vec2 ray = map(p);\n        vec3 n=vec3(0);\n        float m = ray.y;\n\n        d = i<32 ? ray.x*.4 : ray.x;\n        p += rd * d *k;\n\n        if (d*d < 1e-8) {\n\n            C+=render(p,rd,ro,d,ray.y,n)*atten;\n\n            alpha *= d;\n            atten *= .58;\n            p += rd*.025;\n\n            k = sign(map(p).x);\n\n            if(m== 3.) {\n                rd=reflect(-rd,n);\n            } else {\n                vec3 rf=refract(rd,n,iv > 0. ? .85 : .1);\n                iv *= -1.;\n                if(length(rf) == 0.) rf = reflect(rd,n);\n                rd=rf;\n            }\n            p+=-n*.1;\n            bounce += 1;\n        } \n\n        if (bounce > thresh) { break; }\n\n        if(distance(p,rd)>125.) { break; }\n    }\n\n    // draw art\n    float px = 1./R.x;\n    float d1 = length(uv)-.4;\n    d1=abs(abs(abs(d1)-.05)-.025)-.01;\n    d1=smoothstep(px,-px,d1);\n    C = mix(C,C+hash21(uv)*.1,min(d1,alpha));\n    \n    return vec3(C);\n}\n\nfloat vmul(vec2 v) {\n    return v.x * v.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) { \n\n    vec3 col = vec3(.00); \n    // to make thigns fun faster and being\n    // clipping the center\n    vec2 dv = (2.*fragCoord.xy-R.xy)/max(R.x,R.y);\n    if(dv.x<.65&&dv.x>-.65)\n    {\n\n    float mTime = iTime;\n    \n    //mTime = .38;\n    time = mTime;    \n    \n    vec2 o = vec2(0);\n\n    // AA and motion blur from iq https://www.shadertoy.com/view/3lsSzf\n    // set AA above renderFull\n    #ifdef AA\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n    \t// pixel coordinates\n    \to = vec2(float(m),float(n)) / float(AA) - 0.5;\n    \t// time coordinate (motion blurred, shutter=0.5)\n    \tfloat d = 0.5*vmul(sin(mod(fragCoord.xy * vec2(147,131), vec2(PI * 2.))));\n    \ttime = mTime - 0.1*(1.0/24.0)*(float(m*AA+n)+d)/float(AA*AA-1);\n    #endif\n\t\t\n        //time = mod(time, 1.);\n    \tvec2 p = (-iResolution.xy + 2. * (fragCoord + o)) / iResolution.x;\n    \tcol += renderFull(p);\n        \n    #ifdef AA\n    }\n    col /= float(AA*AA);\n    #endif\n    }\n\n    float px = 1./R.x;\n    \n    float d1 = sdbox(dv+vec2(-.95,.515),vec2(.015))-.005;\n    d1=smoothstep(px,-px,d1);\n    col=mix(col,vec3(.000,.639,.514),d1);\n    \n    d1 = sdbox(dv+vec2(-.90,.515),vec2(.015))-.005;\n    d1=smoothstep(px,-px,d1);\n    col=mix(col,vec3(.698,.608,.165),d1);\n    \n    d1 = sdbox(dv+vec2(-.85,.515),vec2(.015))-.005;\n    d1=smoothstep(px,-px,d1);\n    col=mix(col,vec3(.871,.169,.847),d1);\n    \n    d1 = sdbox(dv-vec2(-.95,.515),vec2(.015))-.005;\n    d1 = min(sdbox(dv-vec2(-.90,.515),vec2(.015))-.005,d1);\n    d1 = min(sdbox(dv-vec2(-.85,.515),vec2(.015))-.005,d1);\n    \n    d1 = abs(d1)-.002;\n    d1=smoothstep(px,-px,d1);\n    col=mix(col,vec3(.12),d1);\n    \n    if(col.r<.01&&col.g<.01&&col.b<.01) col = hash21(dv)>.5 ? col+.0065 : col;    \n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4(col, 0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}