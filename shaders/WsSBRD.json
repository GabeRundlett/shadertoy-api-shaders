{
    "Shader": {
        "info": {
            "date": "1589566731",
            "description": "playing with domain repetition where some domains are empty",
            "flags": 0,
            "hasliked": 0,
            "id": "WsSBRD",
            "likes": 15,
            "name": "Bubble Machine",
            "published": 3,
            "tags": [
                "bep"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 549
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//return the SDF for a sphere, or the SDF for an empty region surrounded by spheres\nfloat gated_sphere(vec3 p, float scale, bool gate) {\n    if (!gate) {\n        p = abs(p);\n        if(p.x < p.y) p.xy = p.yx;\n        if(p.y < p.z) p.yz = p.zy;\n        if(p.x < p.y) p.xy = p.yx;\n        p.x -= scale;\n    }\n    return length(p);\n}\n\n#define FK(k) floatBitsToInt(k)^floatBitsToInt(cos(k))\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\nfloat component(vec3 p) {\n    float scale = 3.;\n    vec3 id = floor(p/scale);\n    p = (fract(p/scale)-0.5)*scale;\n    //make 99.5% of domains be empty\n    bool gate = hash(hash(id.x, id.y), id.z)*.5+.5 > 0.995;\n    return gated_sphere(p, scale, gate)-1.;\n}\n\nfloat scene(vec3 p) {\n    float dist = component(p);\n    float distortion = sin(p.x*5.+iTime)*.01 + sin(p.y*6.+iTime*2.)*.01 + sin(p.z*4.+iTime*3.)*.01;\n    p.z-=iTime*2.;\n    dist = min(dist, component(p+10.));\n    return dist + distortion;\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.01);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(ax,p)*ax, p, cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\nfloat skybox(vec3 p) {\n    return texture(iChannel0, p.xzy).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n\tvec3 cam = normalize(vec3(1,uv));\n    vec3 init = vec3(-5,0,0) + cam;\n\n    float yrot = -sin(iTime/8.);\n    float zrot = cos(iTime/8.);\n    if (iMouse.z > 0.) {\n        yrot = clamp(-4.*mouse.y, -3.14/2., 3.14/2.);\n        zrot =  4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n\t\n    init.z -= iTime;\n    vec3 p = init;\n    int hits = 0;\n    vec3 points[10];\n    for (int i = 0; i < 200; i++) {\n        float dist = scene(p);\n        p+=cam*dist;\n        if (dist*dist < 1e-6) {\n            if (hits >= 10) break;\n            points[hits] = p;\n            hits += 1;\n            p += cam*2.5;\n        }\n        if (distance(p,init) > 100.) break;\n    }\n    vec3 col = vec3(0.);\n    float atten = 1.;\n    for (int i = 0; i < hits; i++) {\n        p = points[i];\n    \tvec3 n = norm(p);\n    \tvec3 r = reflect(cam, n);\n    \tfloat fres = 1.-abs(dot(cam,n))*.98;\n        float dist = distance(p,init);\n        float fog = smoothstep(100.,80.,dist);\n        //fake iridescence\n    \tvec3 col_front = vec3(sin(p*7.+iTime)*0.3+0.7)*pow(skybox(r),3.);\n    \tvec3 col_back = vec3(sin(p*5.+iTime)*0.3+0.7)*pow(skybox(reflect(n,r)),3.);\n        col += (col_front + col_back)*atten*smoothstep(0.05,0.05+dist*0.02,abs(dot(cam,n)))*fog;\n        atten*=mix(1., .9, fog);\n    }\n    fragColor.xyz = sqrt(col*.25) + skybox(cam)*atten;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}