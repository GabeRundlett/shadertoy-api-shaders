{
    "Shader": {
        "info": {
            "date": "1435059114",
            "description": "Fake volumetric clouds by parallaxing fbm layers and some uv offset magic. Fake reflections as well. Mouse Y axis controls thickness and X axis cloud amount.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlsXzN",
            "likes": 26,
            "name": "FakeVolumetricClouds",
            "published": 3,
            "tags": [
                "clouds",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "kuvkar",
            "viewed": 2477
        },
        "renderpass": [
            {
                "code": "/*\nCopyright (c) 2015 Kari Kuvaja\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// maybe something between 0.5 and 3.0\nconst float CLOUD_HEIGHT = 2.0;\n\n// scale of clouds\nconst float UV_FREQ = 0.005;\n\n// cloudiness, bigger number = less clouds\nconst float CLOUD_FILTER = 0.4;\n\n// parallax layers\nconst int PARALLAX_LAYERS = 8;\n\nfloat flter(float f, float a)\n{\n   f = clamp(f - a, 0.0, 1.0);\n   f /= (1.0 - a);    \n   return f;\n}\n\nfloat fbm(vec2 uv)\n{\n    float f = (texture(iChannel0, uv * 2.0).r - 0.5) * 0.2;\n    f += (texture(iChannel0, uv * 4.0).r - 0.5) * 0.125;\n    f += (texture(iChannel0, uv * 8.0).r - 0.5) * 0.125 * 0.5;\n    f += (texture(iChannel0, uv * 16.0).r - 0.5) * 0.125 * 0.25;\n    f += (texture(iChannel0, uv * 32.0).r - 0.5) * 0.125 * 0.24;\n    f += (texture(iChannel0, uv * 64.0).r - 0.5) * 0.125 * 0.22;\n    f += (texture(iChannel0, uv * 128.0).r - 0.5) * 0.125 * 0.12;\n    f += (texture(iChannel0, uv * 256.0).r - 0.5) * 0.125 * 0.1;\n    f += 0.5;\n    return clamp(f, 0.0, 1.0);\n}\n\n\n\nvec2 getuv(in vec2 uv, float l)\n{\n    vec3 rd = normalize(vec3(uv, 0.4));\n    vec2 _uv = vec2(rd.x / abs(rd.y) * l, rd.z / abs(rd.y) * l);\n    return _uv;\n}\n\n// cloud rendering\nvoid clouds (vec2 uv, inout vec4 col, float t, float freq)\n{\n    vec2 _uv = getuv(uv, 1.0);\n    _uv.y += t;\n    float l = 1.0;\n    \n    vec2 mouse = (iMouse.xy - iResolution.xy * 0.5) / iResolution.xy;\n    \n    for (int i = 0; i < PARALLAX_LAYERS; ++i)\n    {\n        // 3 parallax layers of clouds\n        float h = fbm(_uv * freq) * 0.5;\n        h += fbm(vec2(-t * 0.001, t * 0.0015) + _uv * freq * 1.1) * 0.35;\n        h += fbm(vec2(t * 0.001, -t * 0.0025) + _uv * freq * 1.2) * 0.15;\n        \n        float f = flter(h, CLOUD_FILTER + mouse.x * 0.1);\n        f -= (l - 1.0) * CLOUD_HEIGHT; // height\n        \n        f = clamp(f, 0.0, 1.0);\n        \n        col += f * vec4(0.9, 0.9, 1.0, 1.0) * (1.0 - col.a);\n        \n        \n        l *= 1.09 - h * (0.18 * (1.0 + (mouse.y + 0.5) * 0.2) ); // parallax control, offset uv by fbm density\n       \n        _uv = getuv(uv, l);\n    \t_uv.y += t;\n    }\n}\n\n// fbm for reflections\nfloat wfbm(vec2 uv)\n{\n    float f = (texture(iChannel1, uv * 1.0).r - 0.5) * 0.5;\n    f += (texture(iChannel1, uv * 2.0).r - 0.5) * 0.5 * 0.5;\n    f += (texture(iChannel1, uv * 4.0).r - 0.5) * 0.25 * 0.5;\n    f += (texture(iChannel1, uv * 8.0).r - 0.5) * 0.25 * 0.5 * 0.5;\n    f += (texture(iChannel1, uv * 16.0).r - 0.5) * 0.25 * 0.5 * 0.5 * 0.5;\n    return f + 0.5;\n    \n}\n\nvec3 grad(vec2 uv)\n{\n\tvec2 off = vec2(0.15, 0.0);\n    vec3 g = vec3(wfbm(uv + off.xy) - wfbm(uv - off.xy),\n                  off.x,\n\t\t\t\t  wfbm(uv + off.yx) - wfbm(uv - off.yx));\n    \n    return normalize(g);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n    \n    vec4 dark = vec4(0.1, 0.2, 0.3, 0.0) * 1.5;\n    vec4 light = vec4(0.3, 0.4, .55, 0.0) * 1.5;\n    vec4 bg = mix(light, dark, abs(uv.y) * 6.5);\n    vec4 col = vec4(0);\n    \n    vec2 _uv = uv;\n    _uv.y -= iTime * 0.01;\n    _uv.x *= 0.1;\n    vec2 guv = vec2(0.0);\n    \n    if (uv.y < 0.0)\n    {\n\t    vec3 g = grad(_uv * 5.0);\n\t    guv = vec2(g.x / g.y, g.z / g.y);\n    }\n    \n    clouds(uv + guv * 0.015 * mix(-0.0, 1.0, clamp(abs(uv.y) * 5.0 - 0.04, 0.0, 1.0)  ), col, iTime * 0.4, UV_FREQ);\n   \n    fragColor = mix(bg, col, col.a);\n\n    // some graphical candy, sun halos etc.\n    if(uv.y < 0.0)\n    {\n        _uv = uv;\n    \tfragColor = mix(dark, fragColor, (1.0 - smoothstep(-0.05, -0., uv.y) * 0.75));\n        \n        _uv.x *= 0.1;\n        fragColor = mix(fragColor, vec4(1.0), 1.0 - smoothstep(0.0, 0.025, length(_uv)));\n\n        _uv.y *= 0.05;\n        _uv.x *= 0.35;\n        fragColor = mix(fragColor, vec4(1.0), 1.0 - smoothstep(0.0, 0.005, length(_uv)));\n        \n    }else\n    {\n\t    vec4 wcolor = light * 1.3;\n    \tfragColor = mix(wcolor, fragColor, (smoothstep(0., .1, uv.y)));        \n\t\tvec2 _uv = uv;\t\n        _uv.x *= 0.1;\n        fragColor = mix(fragColor, vec4(1.0), 1.0 - smoothstep(0.0, 0.1, length(_uv)));\n    }\n    \n    uv.x *= 0.015;\n    fragColor = mix(fragColor, vec4(1.0), 1.0 - smoothstep(0., 0.01, length(uv)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0 - smoothstep(0., 0.005, length(uv)));\n    \n    // contrast\n    float contr = 0.6;\n    fragColor = mix(vec4(0.0), vec4(1.0), fragColor * contr + (1.0 - contr) * fragColor * fragColor * (3.0 - 2.0 * fragColor));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}