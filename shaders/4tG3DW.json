{
    "Shader": {
        "info": {
            "date": "1474715419",
            "description": "I saw some visualizations at a party last week that I wanted to see move to a beat. It takes ~15 seconds to really get going ;)\n\nmusic by [url=https://soundcloud.com/kub_beat/kub_beat-cigar-rhapsody-the-doors-rots-rethink]k√ºb_beat[/url]",
            "flags": 96,
            "hasliked": 0,
            "id": "4tG3DW",
            "likes": 42,
            "name": "Saint George Ripples",
            "published": 3,
            "tags": [
                "waves",
                "visualization",
                "ripple"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 1822
        },
        "renderpass": [
            {
                "code": "#define STRIPES 9.\n#define OFFSET .25\n#define RATIO .1\n#define CHANNEL_LOWS vec3(.5, .3, .2)\n#define CHANNEL_HIGHS vec3(.9, .6, .6)\n\nfloat hash(vec2 uv) {\n    float f = fract(cos(sin(dot(uv, vec2(.009123898, .00231233))) * 48.512353) * 11111.5452313);\n    return f;\n}\n\nfloat noise(vec2 uv) {\n    vec2 fuv = floor(uv);\n    vec4 cell = vec4(\n        hash(fuv + vec2(0, 0)),\n        hash(fuv + vec2(0, 1)),\n        hash(fuv + vec2(1, 0)),\n        hash(fuv + vec2(1, 1))\n    );\n    vec2 axis = mix(cell.xz, cell.yw, fract(uv.y));\n    return mix(axis.x, axis.y, fract(uv.x));\n}\n\nfloat fbm(vec2 uv) {\n    float f = 0.;\n    float r = 1.;\n    for (int i = 0; i < 8; ++i) {\n        f += noise((uv += vec2(2. - iTime, 2.)) * r) / (r *= 2.);\n    }\n    return f / (1. - 1. / r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // uv divided to stripes\n    vec2 stripedUv = vec2(uv.x, (floor(uv.y * STRIPES) + .5) / STRIPES);\n    // scaled uv for noise sample\n    vec2 noiseUv = stripedUv * 50. + iTime * 3.;\n    \n    // get fft ripple values\n\tvec3 value = texture(iChannel0, stripedUv).rgb;\n    // smoothstep them between limits\n    value = smoothstep(CHANNEL_LOWS, CHANNEL_HIGHS, value);\n    \n    // calculate the wave: fbm mixed with raw sound wave\n    // weighted with ripple value\n    // offset vertically by constant\n    vec3 wave = \n        (\n            mix(\n                smoothstep(0., 1., fbm(noiseUv)),\n                texture(iChannel0, vec2(uv.x, .75)).a,\n                RATIO)\n         \t- OFFSET\n        ) * value + OFFSET;\n    \n    // calculate line width: 2 screen pixels + slope of the wave for smoothness\n    vec3 width = STRIPES * 2. / iResolution.y + abs(dFdx(wave));\n    \n    // draw the smooth line\n    fragColor.rgb = smoothstep(width, vec3(0), abs(fract(uv.y * STRIPES) - wave));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FREQ_R .05\n#define FREQ_G .45\n#define FREQ_B .75\n\n#define RADIUS .05\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n\tuv.x *= iResolution.x / iResolution.y;\n    \n    float l = length(uv);\n    \n    // get fft values at the preset spots\n\tvec4 _sample = vec4(\n        texture(iChannel1, vec2(FREQ_R, .25)).x,\n        texture(iChannel1, vec2(FREQ_G, .25)).x,\n        texture(iChannel1, vec2(FREQ_B, .25)).x,\n        0);\n    \n    if (l < RADIUS) {\n\t    // if in the center push out current fft values\n        fragColor = _sample;\n    } else if (l < 2. * RADIUS) {\n        // if next to the center interpolate between the old and the current values\n    \tvec4 old = texture(iChannel0, vec2(.5, .5));\n    \tfragColor = mix(_sample, old, l / RADIUS - 1.);\n    } else {\n        // otherwise copy the values from the next circle\n        uv -= uv / l * RADIUS;\n        uv.x /= iResolution.x / iResolution.y;\n        uv = (uv + 1.) / 2.;\n        fragColor = texture(iChannel0, uv);\n    }\n    \n    // push sound data to alpha channel as is\n    fragColor.a = texture(iChannel1, fragCoord.xy / iResolution.xy).x;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 4824,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/kub_beat/kub_beat-cigar-rhapsody-the-doors-rots-rethink"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}