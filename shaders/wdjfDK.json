{
    "Shader": {
        "info": {
            "date": "1590914707",
            "description": "Inspired by [url]https://www.shadertoy.com/view/4t3BW4[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wdjfDK",
            "likes": 25,
            "name": "multi-scale truchet scaled",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "phi16",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co, float i){\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453 + 0.2 + sqrt(2.) * (i + floor(iTime/2.)));\n}\n\nfloat pattern(vec2 uv, vec2 seed, float seedi) {\n    float v = rand(seed, seedi);\n    if(v < 0.5) uv.xy = vec2(1.-uv.y,uv.x);\n    if(distance(v,0.5) > 0.4) {\n        return min(\n            distance(distance(uv,vec2(0)),0.5)-1./6.,\n            distance(distance(uv,vec2(1)),0.5)-1./6.\n        );\n    } else if(distance(v,0.5) > 0.1) {\n        return min(\n            distance(uv.y,0.5)-1./6.,\n            max(\n                distance(uv.x,0.5)-1./6.,\n                - (distance(uv.y,0.5)-1./4.)\n            )\n        );\n    } else {\n        uv.y = abs(uv.y-0.5);\n        return min(\n            abs(uv.y)-1./6.,\n            distance(uv,vec2(0.5,0.5))-1./6.\n        );\n    }\n}\n\nint hierarchy(vec2 uv) {\n    float u = 1.0;\n    for(int i=0;i<5;i++) {\n        vec2 iuv = floor(uv*u)/u;\n        float s = 1./u;\n        if((distance(iuv.y,0.) > s || rand(iuv*u, float(i)) < 0.5) && iuv.y > s/4.) return i;\n        u *= 2.;\n    }\n    return 5;\n}\n\nint chierarchy(vec2 uv) {\n    float s = 1./64.;\n    int h = 0;\n    h = max(h, hierarchy(uv + vec2(-s,-s)));\n    h = max(h, hierarchy(uv + vec2(+s,-s)));\n    h = max(h, hierarchy(uv + vec2(-s,+s)));\n    h = max(h, hierarchy(uv + vec2(+s,+s)));\n\treturn h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ut = fract(iTime/2.);\n    float it = floor(iTime/2.);\n    \n    vec2 uv = fragCoord / iResolution.y;\n    vec2 scr = uv;\n    uv.y += 0.075;\n    uv.x -= iResolution.x / iResolution.y / 2.;\n    uv *= 1.8 * pow(2.,-ut);\n    \n    float d = 0.;\n    vec2 luv = fract(uv);\n    int h = hierarchy(uv);\n    float flip = cos(float(h)*3.1415926535);\n    float s = pow(2.,float(h));\n    luv = fract(uv*s);\n    vec2 seed = floor(uv*s);\n   \td = pattern(luv, seed, float(h)) / s * flip;\n    s = 1.0;\n    for(int i=0;i<6;i++) {\n        vec2 corner = floor(uv*s+.5)/s;\n        int ch = chierarchy(corner);\n        if(h <= i && i < ch) {\n            float u = distance(uv, corner)-1./6./s;\n            if(i%2 == 0) d = min(d, u);\n            else d = max(d, -u);\n        }\n        s *= 2.;\n    }\n    d *= mod(it+0.5,2.) < 1.0 ? 1.0 : -1.0;\n    d /= pow(2.,-ut) / pow(2.,-scr.y);\n    \n    vec3 dr = mix(vec3(0.,2.,1.), vec3(1.,0.5,0.), exp(-scr.y)) * exp(min(0.,d)*200.);\n    vec3 br = mix(vec3(0.2,0.8,0.), vec3(0.8,0.6,0.2), exp(-scr.y));\n    vec3 col = mix(dr,br,smoothstep(-1.,1.,d*iResolution.y*2.));\n    fragColor = vec4(clamp(col,vec3(0.),vec3(1.)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}