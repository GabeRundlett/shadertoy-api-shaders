{
    "Shader": {
        "info": {
            "date": "1669589192",
            "description": "SDF Game Starter Kit\n\nWORK IN PROGRESS\n\n+ Character Object\n+ World Object\n   - Water\n+ Materials\n   - Fresnel\n   - Reflective\n+ Camera Orbit",
            "flags": 0,
            "hasliked": 0,
            "id": "7djyDc",
            "likes": 6,
            "name": "Game Environment - Starter Kit",
            "published": 3,
            "tags": [
                "noise",
                "reflection",
                "terrain",
                "raymarch",
                "shadow",
                "water",
                "camera",
                "fresnel",
                "boilerplate",
                "gamedev",
                "gamedesign"
            ],
            "usePreview": 0,
            "username": "Dirk",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "\n    \n    vec2 world( vec3 p, float t ){\n        float mate = 1.0;\n        vec3 wp = p;\n        float v = getNoise(p,vec2(0.0),2.0,t);\n        v = mix( v , getNoise(p,vec2(0.0,0.0),5.0,t), 0.0 );\n        float w = wp.y - ( -0.5 ) - v*3.5 + texture(iChannel1,p.xz).r*0.02;\n        float b = p.y  - ( 0.5 -0.05*getNoise(p,vec2(0.9,0.0),20.0,t) );\n        if(b<w) mate = 3.0;\n        w = min(b,w);\n        return vec2(w,mate);\n    }\n    vec2 map( in vec3 pos ){\n        vec2 c = char(pos,iTime);\n        vec2 w = world(pos,iTime);\n        if( c.x < w.x ){\n             return c;\n        }else{\n            return w;\n        }\n\n    }\n    vec3 calcNormal( in vec3 pos ){\n        vec2 e = vec2(0.0001,0.0);\n        return normalize(vec3(map(pos+e.xyy).x-map(pos-e.xyy).x,\n                              map(pos+e.yxy).x-map(pos-e.yxy).x,\n                              map(pos+e.yyx).x-map(pos-e.yyx).x));\n\n    }\n    vec3 castRay( in vec3 ro, vec3 rd ){\n        float m = -1.0;\n        float t=0.01;\n        float a=0.0;\n        for( int i=0; i<100; i++ ){\n            vec3 pos = ro + t*rd;\n            vec2 h = map(pos);\n            m = h.y;\n            if(abs(h.x)<0.001)break;\n            t += h.x; \n            a++;\n            if( t>40.0 ) break;\n        }\n        if(t>40.0) m=-1.0;\n        return vec3( t,m,a );\n    }\n    void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;   \n        vec2 an = vec2(10.0*iMouse.x/iResolution.x, iMouse.y/iResolution.y) + 2.0;\n        vec3 ro = vec3(5.0*sin(an.x),5.0*sin(an.y), 5.0*cos(an.x));\n        vec3 ta = vec3(0.0,1.0,0.0);\n        vec3 ww = normalize( ta- ro );\n        vec3 uu = normalize( cross(ww,vec3(0,1,0)));\n        vec3 vv = normalize( cross(uu,ww) );\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n        vec3 col = vec3(0.4,0.75,1.0)-0.7*rd.y;\n        col = mix( col, vec3(0.01,0.8,1.0), exp(-10.0*rd.y) );\n        vec3 tm = castRay(ro,rd);\n        if( tm.y>0.0 ){\n            vec3 pos = ro + tm.x*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 r = reflect(rd, nor);\n            vec3 ref = texture( iChannel2, r ).rgb;\n            float exponent = 1.0;\n            float fresnel = pow(clamp(1. - dot(nor, -rd), 0., 1.), exponent);\n            vec3 rimColor = vec3(0.05, 1.5*(pos.y/5.), 0.05);\n            vec3 fres = vec3(0.0);\n            vec3 mate = vec3(0.18);\n            if( tm.y<1.5 ){\n                fres = fresnel * rimColor * 1.75;\n                float n1 = getNoise(pos*0.01,vec2(0.0),2.0,iTime);\n                vec3 yell = vec3(0.1*abs(p.y),0.1*abs(p.y),0.0);\n                mate = mix(vec3(0.0,n1,0.0), vec3(1.0,0.4,0.0)*(pos.y+0.2)*0.2, 0.8);\n            }else if( tm.y<2.5 ){\n                fres = fresnel * rimColor * 1.75;\n                mate = vec3(0.2,0.3,0.2);\n            }else if( tm.y<3.5 ){\n                fres = fresnel * rimColor * 1.75;\n                float n1 = getNoise(pos,vec2(0.0),2.0,iTime);\n                float n2 = getNoise(pos*.5,vec2(0.0),2.0,iTime)*0.5-0.15;\n                pos.y += 0.1*iTime;\n                float n3 = getNoise(pos*10.0,vec2(0.0),2.0,iTime)*0.5-0.15;\n                ref = texture( iChannel2, r ).rgb+abs(n2);\n                mate = mix( ref*vec3(0.2,0.2,0.05),vec3(n2,n1,0.5*(n1+n2)+n3*0.2),0.8);\n            }\n            vec3  sun_dir = normalize( vec3(0.8,0.4,0.2) );\t\t\t\t\t\t\t//Sun Direction\n            float sun_dif = clamp( dot(nor,sun_dir),0.0,1.0);\t\t\t\t\t\t//Sun Difuse\n            float sun_sha = step(castRay( pos+nor*0.001,sun_dir ).y,0.0);\t\t\t//Sun Shadow\n            float sky_dif = clamp( dot(0.5+0.5*nor,vec3(0.0,1.0,0.0)),0.0,1.0);\t    //Sky Difuse\n            float bou_dif = clamp( dot(0.5+0.5*nor,vec3(0.0,-1.0,0.0)),0.0,1.0);\t//Bounce Difuse\n            col =  mate*vec3(3.0,2.0,2.5)*sun_dif*sun_sha+fres;\n            col += mate*vec3(0.5,0.5,3.4)*sky_dif;\n            col += mate*vec3(1.0,2.0,0.9)*bou_dif;\n            col += vec3(0.01,0.8,1.0)*pow(tm.x*0.01,1.5);\n            col *= 0.8;\n        }\n        col = pow( col, vec3(0.4545) );\n        fragColor = vec4(col,1.0);\n    }\n    \n    \n    \n    \n    \n    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "    \n    \n    vec3 WORLD_POS = vec3( 0.0 );\n    vec2 grad( ivec2 z )  {\n        int n = z.x+z.y*11111;\n            n = (n<<13)^n;\n            n = (n*(n*n*15731+789221)+1376312589)>>16;\n    #if 0\n        return vec2(cos(float(n)),sin(float(n)));\n    #else\n        n &= 7;\n        vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n        return ( n>=6 )?vec2(0.0,gr.x):(n>=4)?vec2(gr.x,0.0):gr;\n    #endif                              \n    }\n    float noise( in vec2 p ){\n        ivec2 i = ivec2(floor( p ));\n        vec2  f = fract( p );\n        vec2  u = f*f*(3.0-2.0*f);\n        return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                         dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                    mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                         dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n    }\n    float getNoise( in vec3 pos, vec2 speed, float size, float t ){\n        vec2 uv = pos.xz*0.2;\n        float f = 0.0;\n        uv *= size;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n        f += 0.5000*noise( uv + t*speed ); uv = m*uv;\n        return 0.3 + 0.7*f;\n    }\n    float ball( vec3 p, float r ){ return length(p) - r;}\n    vec2  char( vec3 pos, float fra ){\n        float b = ball(pos+vec3(0.0,-1.0,0.),0.25);\n        return vec2( b , 2.0 );\n    }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}