{
    "Shader": {
        "info": {
            "date": "1667612163",
            "description": "if you don't stop and look around once in a while, you could miss it.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdBGDD",
            "likes": 2,
            "name": "life moves pretty fast.",
            "published": 3,
            "tags": [
                "raymarch",
                "metaballs",
                "bleh",
                "smoothunion"
            ],
            "usePreview": 0,
            "username": "numbers__",
            "viewed": 172
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURFACE_DIST 0.01\n#define BLEND_UNITS 1.6667\n\n//smooth union function (thank you, inigo!)\nfloat opSmoothUnion (float d1, float d2, float k ) {\n    float h = clamp(0.5 + 0.5*(d2-d1)/k, 0., 1.);\n    return mix( d2, d1, h ) - k*h*(1.-h);\n}\n\n//sdfs\nfloat GetDist(vec3 p) {\n    vec4 s1 = vec4(0, 1, 5, 1);\n    vec4 s2 = vec4(.25 * tan(iTime), 2, 5, 1);\n    vec4 s3 = vec4(0, 2, cos(iTime) + 5., 1);\n    \n    float sphereDist1 = length(p-s1.xyz)-s1.w;\n    float sphereDist2 = length(p-s2.xyz)-s2.w;\n    float sphereDist3 = length(p-s3.xyz)-s3.w;\n    float sphereDist = opSmoothUnion(\n        sphereDist1, sphereDist2, BLEND_UNITS\n    );\n    sphereDist = opSmoothUnion(\n        sphereDist, sphereDist3, BLEND_UNITS\n    );\n    \n    float planeDist = opSmoothUnion(sphereDist, p.y, BLEND_UNITS);\n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\n//raymarcher\nfloat RayMarch (vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for (int i=0; i<MAX_STEPS; ++i) {\n        vec3 p = ro + dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dS<SURFACE_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\n//normals\nvec3 Normalfy (vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    //calculates normals by swizzling\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    return normalize(n);\n}\n\n//phong\nfloat Phongify(vec3 p) {\n    vec3 lightPos = vec3(3, 5, -1);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = Normalfy(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURFACE_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // zero uvs are in the middle\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(.25 * tan(iTime), 1.2, -2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    vec3 bl = vec3(sin(iTime) * 255., cos(iTime) * 255., 0);\n    \n    float dif = Phongify(p);\n    col = vec3(dif);\n    col = mix(col, bl.yzx, 0.001);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}