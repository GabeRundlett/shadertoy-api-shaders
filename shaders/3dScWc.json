{
    "Shader": {
        "info": {
            "date": "1587401701",
            "description": "Colliding rings (restarts automatically or by clicking upper-right)",
            "flags": 32,
            "hasliked": 0,
            "id": "3dScWc",
            "likes": 20,
            "name": "Bouncing Rings 2",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "physics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "// \"Bouncing Rings 2\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define SHOW_SPH 0  // show spheres that comprise the rings\n\nmat3 QtToRMat (vec4 q);\nmat3 StdVuMat (float el, float az);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Fbm2 (vec2 p);\nvec4 Loadv4 (int idVar);\n\nvec3 qHit, qnHit, ltDir;\nfloat dstFar, cylRad, cylWid;\nconst int nObj = 32;\nconst int nSphObj = 20;\nconst float pi = 3.14159;\n\n#if ! SHOW_SPH\n\nvec4 CylAnHit (vec3 ro, vec3 rd, float r, float h)\n{\n  vec3 s, vn;\n  float d, a, b, w, ww, ri, g;\n  d = dstFar;\n  ri = r - 2. * h;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  ww = b * b - a * dot (ro.xy, ro.xy);\n  w = ww + a * r * r;\n  vn = vec3 (0.);\n  if (w > 0.) {\n    if (a > 0.) {\n      d = (- b - sqrt (w)) / a;\n      s = ro + d * rd;\n      if (abs (s.z) < h) vn.xy = s.xy;\n    } else s = vec3 (0., 0., h);\n    if (d < 0. || abs (s.z) > h) {\n      d = - (sign (rd.z) * ro.z + h) / abs (rd.z);\n      g = length (ro.xy + d * rd.xy);\n      if (d < 0. || g > r) d = dstFar;\n      else if (g < ri) {\n        w = ww + a * ri * ri;\n        if (w > 0.) {\n          d = (- b + sqrt (w)) / a;\n          s = ro + d * rd;\n          if (abs (s.z) < h) vn.xy = - s.xy;\n          else d = dstFar;\n        }\n      } else vn.z = - sign (rd.z);\n    }\n  }\n  return vec4 (d, vn);\n}\n\nfloat ObjHit (vec3 ro, vec3 rd)\n{\n  mat3 mRot;\n  vec4 cdn4;\n  vec3 rm, rom, rdm;\n  float dMin;\n  dMin = dstFar;\n  for (int n = 0; n < nObj; n ++) {\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    rom = (ro - rm) * mRot;\n    rdm = rd * mRot;\n    cdn4 = CylAnHit (rom, rdm, cylRad, cylWid);\n    if (cdn4.x < dMin) {\n      dMin = cdn4.x;\n      qHit = rom + dMin * rdm;\n      qnHit = mRot * cdn4.yzw;\n    }\n  }\n  qnHit = normalize (qnHit);\n  return dMin;\n}\n\nfloat ObjHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 mRot;\n  vec4 cdn4;\n  vec3 rm, rom, rdm;\n  float dMin;\n  dMin = dstFar;\n  for (int n = 0; n < nObj; n ++) {\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    rom = (ro - rm) * mRot;\n    rdm = rd * mRot;\n    cdn4 = CylAnHit (rom, rdm, cylRad, cylWid);\n    if (cdn4.x < dMin) dMin = cdn4.x;\n  }\n  return smoothstep (0.5 * rng, rng, dMin);\n}\n\n#else\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float a;\n  a = (2. * pi / float (nSphObj)) * s;\n  r = vec3 ((cylRad - 0.5) * cos (a), (cylRad - 0.5) * sin (a), 0.);\n  return r;\n}\n\nfloat ObjHit (vec3 ro, vec3 rd)\n{\n  mat3 mRot;\n  vec3 rm, v, vn;\n  float dMin, b, d, w, sz;\n  dMin = dstFar;\n  sz = 0.5;\n  for (int n = 0; n < nObj; n ++) {\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    for (int j = 0; j < nSphObj; j ++) {\n      v = ro - (rm + mRot * RSph (float (j)));\n      b = dot (rd, v);\n      w = b * b + sz * sz - dot (v, v);\n      if (w >= 0.) {\n        d = - b - sqrt (w);\n        if (d > 0. && d < dMin) {\n          dMin = d;\n          vn = v + d * rd;\n        }\n      }\n    }\n  }\n  qnHit = vn / sz;\n  return dMin;\n}\n\nfloat ObjHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 mRot;\n  vec3 rm, v;\n  float dMin, b, d, w, sz;\n  dMin = dstFar;\n  sz = 0.5;\n  for (int n = 0; n < nObj; n ++) {\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    for (int j = 0; j < nSphObj; j ++) {\n      v = ro - (rm + mRot * RSph (float (j)));\n      b = dot (rd, v);\n      w = b * b + sz * sz - dot (v, v);\n      if (w >= 0.) {\n        d = - b - sqrt (w);\n        if (d > 0. && d < dMin) dMin = d;\n      }\n    }\n  }\n  return smoothstep (0.5 * rng, rng, dMin);\n}\n\n#endif\n\nvec3 BgCol (vec3 ro, vec3 rd, float sh)\n{\n  vec3 col, c1, c2, ca;\n  float dst;\n  c1 = vec3 (0.7, 0.3, 0.1);\n  c2 = vec3 (0.4, 0.2, 0.1);\n  ca = mix (c1, c2, 0.5);\n  if (rd.y < 0.) {\n    dst = -ro.y / rd.y;\n    ro += dst * rd;\n    col = mix (c1, c2, Fbm2 (ro.xz * vec2 (1., 0.15))) *\n       (0.5 + 0.5 * smoothstep (0.05, 0.1, mod (ro.x, 4.)));\n    col = mix (col, ca, smoothstep (0.7, 1., dst / (4. * dstFar)));\n    col *= 0.2 + 0.8 * sh * max (ltDir.y, 0.);\n  } else col = mix (ca, vec3 (1.), 0.3);\n  return col;\n}\n\nvec3 ObjCol (vec3 rd, vec3 vn, float sh)\n{\n  vec4 col4;\n  vec3 col;\n  float r;\n  col4 = vec4 (0.2, 0.4, 0.6, 0.3);\n#if ! SHOW_SPH\n  r = length (qHit.xy);\n  if (abs (r - cylRad + cylWid) < 0.8 * cylWid || abs (qHit.z) < 0.8 * cylWid) {\n    col4.rgb *= 1. - 0.5 * SmoothBump (0.4, 0.6, 0.1, mod (((r > 0.51) ? 16. : 4.) *\n       atan (qHit.y, qHit.x) / pi, 1.));\n  } else col4.rgb *= 1.2;\n#endif\n  col = col4.rgb * (0.2 +  0.1 * max (dot (normalize (- ltDir.xz), vn.xz), 0.) +\n     0.8 * sh * pow (max (dot (vn, ltDir), 0.), 1.5)) +\n     col4.a * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, colR;\n  vec2 p;\n  float dstFlr, dstObj, sh;\n  bool isBg;\n  cylRad = Loadv4 (4 * nObj).z;\n  cylWid = 0.45;\n  dstFlr = (rd.y < 0.) ? - (ro.y - 0.5) / rd.y : dstFar;\n  dstObj = ObjHit (ro, rd);\n  isBg = false;\n  if (min (dstObj, dstFlr) < dstFar) {\n    if (dstFlr < dstObj) {\n      ro += dstFlr * rd;\n      vn = vec3 (0., 1., 0.);\n      isBg = true;\n    } else {\n      ro += dstObj * rd;\n      vn = qnHit;\n    }\n  } else isBg = true;\n  if (! isBg || rd.y < 0.) {\n    sh = ObjHitSh (ro + 0.01 * ltDir, ltDir, 20.);\n    sh = 0.4 + 0.6 * sh;\n  } else sh = 1.;\n  if (! isBg) col = ObjCol (rd, vn, sh);\n  else col = BgCol (ro, rd, sh);\n  if (isBg && rd.y < 0.) {\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    dstObj = ObjHit (ro, rd);\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      vn = qnHit;\n      colR = ObjCol (rd, vn, 1.);\n    } else colR = vec3 (0.4, 0.4, 0.4);\n    col = mix (col, colR, 0.3);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  float az, el, asp, zmFac, tCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  mPtr = Loadv4 (4 * nObj + 1);\n  dstFar = 200.;\n  az = 0.2 * pi * sin (0.02 * pi * tCur);\n  el = -0.15 * pi;\n  if (mPtr.z > 0. && (mPtr.x < 0.5 - 0.05 / asp || mPtr.y < 0.5 - 0.05)) {\n    el += 2. * mPtr.y;\n    az += pi * mPtr.x;\n  }\n  el = clamp (el, -0.45 * pi, -0.1 * pi);\n  zmFac = 3.5;\n  vuMat = StdVuMat (el, az);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 0., -80.);\n  ltDir = normalize (vec3 (1., 1.5, -1.));\n  col = ShowScene (ro, rd);\n  if (mPtr.z > 0. && min (uv.x - asp, uv.y - 1.) > -0.1)\n     col = mix (col, vec3 (1., 1., 0.), 0.3);\n  fragColor = vec4 (col, 1.);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Bouncing Rings 2\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 DirToRMatT (vec3 vd, vec3 vu);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nfloat cylRad, nRun;\nconst int nObj = 32;\nconst int nSphObj = 20;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float a;\n  a = (2. * pi / float (nSphObj)) * s;\n  r = vec3 ((cylRad - 0.5) * cos (a), (cylRad - 0.5) * sin (a), 0.);\n  return r;\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 1., fricT = 2., fricS = 10.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, rMom;\n  float farSep, rSep, grav, dt;\n  grav = 10.;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = 2. * (cylRad + 1.);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nObj; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      wmN = Loadv4 (4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSphObj; j1 ++) {\n        rts = mRot * RSph (float (j1));\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSphObj; j2 ++) {\n          rtsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  rMom = vec3 (0.);\n  for (int j = 0; j < nSphObj; j ++) {\n    rts = RSph (float (j));\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n    rts = mRot * rts;\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 u;\n  float b;\n  b = 2. * Hashff (33.3 * float (mId) + nRun + 17.11) - 1.;\n  rm = vec3 (32. * sin (2. * pi * (float (mId) / float (nObj)) + vec2 (0.5 * pi, 0.)), 6.).xzy;\n  u = normalize (vec3 (rm.z, - rm.x, 0.)).xzy;\n  u.xz = Rot2D (u.xz, 0.1 * pi * b);\n  qm = RMatToQt (DirToRMatT (u, vec3 (0., 1., 0.)));\n  vm = vec3 (- 0.3 * (1. + 0.2 * b) * rm.xz, 1.5 * (1. + b)).xzy;\n  wm = -5. * u * b;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas;\n  float tCur, asp, mxStep, nStep;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nObj + 2) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mId = (pxId < 4 * nObj) ? mId = pxId / 4 : -1;\n  doInit = false;\n  mxStep = 1800.;\n  if (iFrame <= 5) {\n    doInit = true;\n    cylRad = 3.;\n    nRun = 0.;\n  } else {\n    stDat = Loadv4 (4 * nObj);\n    nStep = stDat.x;\n    cylRad = stDat.z;\n    nRun = stDat.w;\n    ++ nStep;\n    if (nStep > mxStep || nStep > 100. && mPtr.z > 0. && mPtr.x > 0.5 - 0.05 / asp &&\n       mPtr.y > 0.5 - 0.05) doInit = true;\n  }\n  if (doInit) {\n    ++ nRun;\n    nStep = 0.;\n  }\n  if (mId >= 0) {\n    if (doInit || nStep < 10.) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n    kp = 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 4 * nObj;\n    if (pxId == kp) stDat = vec4 (nStep, mxStep, cylRad, nRun);\n    else if (pxId == kp + 1) stDat = vec4 (mPtr.xyz, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nmat3 DirToRMatT (vec3 vd, vec3 vu)\n{\n  vec3 vc;\n  vc = normalize (cross (vu, vd)); // assumes cross != 0\n  return mat3 (vc, cross (vd, vc), vd);\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Bouncing Rings 2\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 DirToRMatT (vec3 vd, vec3 vu);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nfloat cylRad, nRun;\nconst int nObj = 32;\nconst int nSphObj = 20;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float a;\n  a = (2. * pi / float (nSphObj)) * s;\n  r = vec3 ((cylRad - 0.5) * cos (a), (cylRad - 0.5) * sin (a), 0.);\n  return r;\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 1., fricT = 2., fricS = 10.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, rMom;\n  float farSep, rSep, grav, dt;\n  grav = 10.;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = 2. * (cylRad + 1.);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nObj; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      wmN = Loadv4 (4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSphObj; j1 ++) {\n        rts = mRot * RSph (float (j1));\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSphObj; j2 ++) {\n          rtsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  rMom = vec3 (0.);\n  for (int j = 0; j < nSphObj; j ++) {\n    rts = RSph (float (j));\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n    rts = mRot * rts;\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 u;\n  float b;\n  b = 2. * Hashff (33.3 * float (mId) + nRun + 17.11) - 1.;\n  rm = vec3 (32. * sin (2. * pi * (float (mId) / float (nObj)) + vec2 (0.5 * pi, 0.)), 6.).xzy;\n  u = normalize (vec3 (rm.z, - rm.x, 0.)).xzy;\n  u.xz = Rot2D (u.xz, 0.1 * pi * b);\n  qm = RMatToQt (DirToRMatT (u, vec3 (0., 1., 0.)));\n  vm = vec3 (- 0.3 * (1. + 0.2 * b) * rm.xz, 1.5 * (1. + b)).xzy;\n  wm = -5. * u * b;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas;\n  float tCur, asp, mxStep, nStep;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nObj + 2) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mId = (pxId < 4 * nObj) ? mId = pxId / 4 : -1;\n  doInit = false;\n  mxStep = 1800.;\n  if (iFrame <= 5) {\n    doInit = true;\n    cylRad = 3.;\n    nRun = 0.;\n  } else {\n    stDat = Loadv4 (4 * nObj);\n    nStep = stDat.x;\n    cylRad = stDat.z;\n    nRun = stDat.w;\n    ++ nStep;\n    if (nStep > mxStep || nStep > 100. && mPtr.z > 0. && mPtr.x > 0.5 - 0.05 / asp &&\n       mPtr.y > 0.5 - 0.05) doInit = true;\n  }\n  if (doInit) {\n    ++ nRun;\n    nStep = 0.;\n  }\n  if (mId >= 0) {\n    if (doInit || nStep < 10.) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n    kp = 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 4 * nObj;\n    if (pxId == kp) stDat = vec4 (nStep, mxStep, cylRad, nRun);\n    else if (pxId == kp + 1) stDat = vec4 (mPtr.xyz, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nmat3 DirToRMatT (vec3 vd, vec3 vu)\n{\n  vec3 vc;\n  vc = normalize (cross (vu, vd)); // assumes cross != 0\n  return mat3 (vc, cross (vd, vc), vd);\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}