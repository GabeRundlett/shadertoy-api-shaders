{
    "Shader": {
        "info": {
            "date": "1610157977",
            "description": "quick lil thing as I put off HW.",
            "flags": 0,
            "hasliked": 0,
            "id": "wttcRN",
            "likes": 12,
            "name": "Hall of Decent",
            "published": 3,
            "tags": [
                "3d",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "// Cole Peterson\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\nfloat hash11(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat opsub( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat rBox( vec3 p, vec3 b, float r ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nvec3 ref(vec3 rp, vec3 q){\n    return -vec3(abs(rp.x), abs(rp.y), abs(rp.z)) + q*step(vec3(0), q);\n}\n\n\n\nfloat map(vec3 rp){\n    float d = 999.;\n    \n    float tm = (iTime-3.)*2.;\n    \n    rp.z += tm-3.;\n    \n    vec3 p = rp;\n    vec3 b = vec3(4.0, 4., 9.0);\n   \n    p = mod(rp, b)-b*.5;\n    p = -abs(p);\n    \n    \n    float sp = 0.8;\n    \n    float t2 = tm*.1;\n    \n    for(float i = 0.; i < 4.; i++){\n        p.yz *= rot(i*0.01);\n        p.xy *= rot(i*0.4 + rp.z*.07);\n        p.xz *= rot(i*7.);\n        \n        float h = 1.3*max(hash11(i*232.4+34.3)*2.2, 1.7);\n        d = min(rBox(ref(p, vec3(0.3, 0.9, 0.9)), vec3(h, .2, .2), .08), d);\n    }\n    \n    d = opsub(length(rp.xy)-1.9 + cos(rp.z)*.4, d);\n    \n    return d;\n}\n\n\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nvec2 march(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0., c=0., md = 999., acc = 0.0;   \n    float g = 0.;\n    \n    for(int i = 0; i < 64; i++){\n    \n    \td = map(ro + rd*t);\n        \n        if(abs(d) < .0015 || t > 50.) break;\n        \n        t += d * .75;\n        c++;\n    }\n    \n    return vec2(t, c);\n}\n\n\nvec3 color(vec3 p, vec3 rd, vec3 n, float t, float ns){\n    vec3 lp = vec3(-4., -3.0, 0.);\n    \n    vec3 ld = normalize(lp-p);\n   \t\n    float ldist = length(lp - p);\n    float fal = 20. / (ldist*ldist);\n    \n    float spec = pow(max(dot(normalize(reflect(ld, n)), rd), 0.), 18.);\n    float dif = max(dot(n, ld), .01);\n    \n    vec3 col = .75+.75*cos(abs(n) + iTime + 2.*t*vec3(.2, .6, .6));\n    col *= dif * fal;\n    col *= max(abs(cos(abs(n.x*6.))), .7);\n    col += vec3(0.6, 0.8, 0.99) * spec * 0.8;\n    \n    float ao = ss(40., 10., ns);\n    col *= ao;\n    \n    col = mix(vec3(.0), col, exp(-t*t*t*0.0001));\n    \n\treturn col;   \n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    uv = abs(uv);\n    \n    vec3 rd = normalize(vec3(uv, 1.0 - dot(uv, uv) * -.5));\n    vec3 ro = vec3(0., 0.0, 0.);\n    rd.xy*=rot(-iTime*.2);\n    vec2 t = march(rd, ro);\n    \n    vec3 n = normal(ro + rd*t.x);\n    vec3 col = color(ro + rd*t.x, rd, n, t.x, t.y);\n    \n    \n    col = 1.-exp(-col);\n    col *= ss(0.99, 0.45, abs(uv.x));\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n    \n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}