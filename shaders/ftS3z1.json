{
    "Shader": {
        "info": {
            "date": "1623309496",
            "description": "potatete",
            "flags": 0,
            "hasliked": 0,
            "id": "ftS3z1",
            "likes": 18,
            "name": "Day 538",
            "published": 3,
            "tags": [
                "glass",
                "transparent",
                "design",
                "mograph",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 420
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pi acos(-1.)\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\nfloat env = 0.;\n\n\nfloat map(vec3 p){\n    p.xz *= rot(env + iTime);\n    p.yz *= rot(sin(iTime));\n    \n    //d = min(length(p.xy),length(p.zx));\n    //d = min(d,length(p.zy)) - 0.1;\n    \n    float e = env;\n    float db = sdBox(p,vec3(0.5) - sin(e)*0.1) - 0.07; \n    //p = pmod(p,0.4);\n    \n    float d = length(p) - 0.4 + sin(iTime)*0. + sin(e)*0.1;\n    //d = max(db,-d);\n    d = opSmoothSubtraction( d, db, 0.4 );\n    //d = abs(d) - 0.001;\n    return d;\n}\n\n\nvec3 getNormal(vec3 p){\n    vec2 t = vec2(0.004,0.);\n    return normalize( \n        map(p) - vec3(\n            map(p - t.xyy),\n            map(p - t.yxy),\n            map(p - t.yyx)\n        )\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 uvn = fragCoord/iResolution.xy;\n    vec3 col = vec3(0);\n    \n    env = iTime + sin(iTime);\n    \n    \n    vec3 ro = vec3(0,0,-2);\n    vec3 p = ro;\n    vec3 rd = normalize(vec3(uv,1));\n    float side = 1.;\n    \n    \n    \n    float chrab = 0.;\n    float refrd = 0.;\n    for(int i = 0; i < 450; i++){\n        float d = map(p)*side;\n        //float pl = plaIntersect( ro, rd, vec4(0,0,-2,1.) );\n        float db = -p.z + 0.8 + sin(env*pi/4. + 0.5*pi)*0.4;\n        vec3 n = getNormal(p)*side;\n        \n        float accrf = 0.;\n        float accbeer = 0.;\n            \n        if(side < 1.)\n            accbeer += d;\n            \n        if(d < 0.0001){\n            rd = refract(rd,n,0.94);\n            ro = p;\n            d += 0.01;\n            side *= -1.;\n            \n            //chrab += dot(rd,reflect(rd,n));\n            chrab += sin(dot(rd,reflect(rd,n))*10.);\n            float rf = pow(max(dot(n,normalize(rd-normalize(vec3(1)))),0.), 2. )*4.;\n            rf = pow(1.-max(dot(-rd,n),0.),5.);\n            accrf += rf;\n            col = mix(col,vec3(0.9,0.4,0.9)*1., rf);\n        } else if (db < 0.001){\n            //vec2 pp = (ro + rd*pl).xy;\n            //pp.x /= iResolution.x/iResolution.y;\n            \n            float chrabSteps = 14.;\n            vec3 acc = vec3(0);\n            for(float i = 0.; i < chrabSteps; i++){\n                for(int c = 0; c < 3; c++){\n                    vec2 pp = p.xy;\n                    vec2 oop = pp;\n                    pp.x += env + iTime*0.1;\n                    pp.x += vec3(-0.001,0.,0.002)[c]*chrab*16.*(0. - i/chrabSteps*1.);\n                    vec2 opp = pp;\n                    pp = pmod(pp,0.125);\n                    float d = length(pp) - 0.004;\n                    \n                    float md = 0.5;\n                    float db = abs(opp.y + abs(mod(opp.x*0.5,md) - 0.5*md)) - 1.;\n                    float cc = mix(1.,vec3(0.)[c],smoothstep(0.007,0.,d));\n                    \n                    {\n                        for(float arrow = 0.; arrow < 20.; arrow++){\n                            float sz = 1. + sin(arrow)*0.4;\n                            vec2 p = oop + vec2(mod((env + iTime*0.4)*(1. + sin(arrow*15.6)*0.6)*0.1,1.)*8. - 4.,sin(arrow*20.)*1.5);\n                            p *= sz;\n                            \n                            float md = 0.1;\n                            p.x -= abs(p.y);\n                            vec2 q = p;\n                            q.x = pmod(p.x,md);\n                            \n                            \n                            float d = length(q.x) - md*0.3;\n                            d = max(d,abs(p.y) - 0.04);\n                            \n                            d = max(d,abs(p.x) - md*floor(4. + sin(arrow*10.)));\n                            \n                            d /= sz;\n                            cc = mix(cc,0.,smoothstep(0.007,0.,d));\n                        }\n                    }\n                    \n                    //cc = mix(cc,vec3(1)[c],smoothstep(0.007,0.,db));\n                    //cc = mix(cc,vec3(0.1,1.,0.5)[c],smoothstep(0.007,0.,abs(db) - 0.02));\n                    \n                    \n                    acc[c] += cc ;\n\n                }\n                \n            }\n            col = mix(col,acc/chrabSteps,1.-col);\n            //col = mix(col,col*0.,accbeer*1.1);\n            \n            \n            //col = texture(iChannel0,pp).xyz;\n\n            break;\n        }\n\n        d = min(d,db);\n        \n        p += rd*d;\n    }\n    \n    {\n        vec2 p = uv;\n        p.xy *= rot(0.5*pi);\n        \n        if (p.y < 0.){\n            p.y = -p.y;\n        }\n        p.y -= 0.75;\n        p.y -= 0.12;\n        \n        float d = 10e5;\n        #define xor(a,b) min(max(a,-(b) + 0.04),max(b,-(a)))\n        for(float i = 0.; i < 12.; i++){\n            vec2 q = p;\n            float e = iTime*0.1 + env*0.1 + float(uv.x < 0.);\n            \n            if(mod(i,3.) < 1.){\n                q.x = -q.x;\n                e += 1.2;\n            }\n            q.x += sin(i + e);\n            q.y += fract(clamp(q.x*6.,0.,0.99))*0.15;\n            float ld = sdBox(q,vec2(0.5,0.014));\n            \n            d = xor(d,ld);\n            \n        }\n        \n        //d = abs(d);\n        \n        \n        p = uv;\n        p.y = abs(p.y) - 0.2;\n        float douter = p.y - 0.22;\n        douter = - douter;\n        float md = 0.04;\n        float id = floor(p.x/md);\n        p.x = pmod(p.x,md);\n        \n        \n        p.x += sin(id/md + (env + iTime*0.2)*2.)*md/1.;\n        \n        p.y -= 0.31;\n        //douter = max(douter,-sdBox(p,vec2(0.006,0.04)));\n        \n        col = mix(col,1.-col*vec3(0.5,0.1,0.2),smoothstep(0.001,0.,douter));\n        //col = mix(col,vec3(0.,0.7 ,0.6),smoothstep(0.004,0.,d));\n        \n    }\n    \n    //col = texture(iChannel0,uvn).xyz;\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pmod(p,a) mod(p,a) - 0.5*a \n\n#define iTime (iTime + 6.)\n// plane degined by p (p.xyz must be normalized)\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}