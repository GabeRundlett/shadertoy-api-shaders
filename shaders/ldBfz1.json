{
    "Shader": {
        "info": {
            "date": "1499426686",
            "description": "Based on \"Stone Spiral\" with a more tasty color scheme; automatically restarts and  each run is different (more details in the original).\n",
            "flags": 32,
            "hasliked": 0,
            "id": "ldBfz1",
            "likes": 6,
            "name": "Chocolate Dominoes",
            "published": 3,
            "tags": [
                "voronoi",
                "texture",
                "raytrace",
                "dynamics",
                "physics",
                "rigidbody"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 810
        },
        "renderpass": [
            {
                "code": "// \"Chocolate Dominoes\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nmat3 QtToRMat (vec4 q);\nfloat SmoothMin (float a, float b, float r);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 bSize, fcBlk, sunDir;\nvec2 gVec[7], hVec[7];\nvec2 qBlk;\nfloat tCur, dstFar;\nint idBlk;\nconst int nBlock = 80;\nconst float pi = 3.14159;\n\n#define SQRT3 1.73205\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = max (max (tm.x, tm.y), tm.z);\n    df = min (min (tp.x, tp.y), tp.z);\n    if (df > 0. && dn < min (df, dMin)) {\n      dMin = dn;\n      fcBlk = - sign (rdm) * step (tm.zxy, tm) * step (tm.yzx, tm);\n      idBlk = n;\n      u = (v + dn) * rdm;\n    }\n  }\n  if (dMin < dstFar) qBlk = vec2 (dot (u.zxy, fcBlk), dot (u.yzx, fcBlk));\n  return dMin;\n}\n\nfloat BlkHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp;\n  float dMin, dn, df;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = max (max (tm.x, tm.y), tm.z);\n    df = min (min (tp.x, tp.y), tp.z);\n    if (df > 0. && dn < min (df, dMin)) dMin = dn;\n  }\n  return smoothstep (0., rng, dMin);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd, float sh)\n{\n  vec4 vc;\n  vec3 vn, col;\n  float s;\n  if (rd.y < 0.) {\n    ro -= (ro.y / rd.y) * rd;\n    vc = HexVor (0.5 * ro.zx);\n    s = step (0.06 + 0.03 * vc.w, vc.x);\n    col = mix (vec3 (0.8), HsvToRgb (vec3 (37. * vc.w, 0.7, 1.)) *\n       (1. + 0.1 * step (0.5, Fbm2 (5. * ro.xz))), s);\n    vn = VaryNf (5. * ro, vec3 (0., 1., 0.), 2. - 1.8 * s);\n    col *= (0.5 + 0.5 * sh) * (0.1 + 0.9 * max (dot (vn, sunDir), 0.)) *\n       (1. - 0.003 * length (ro.xz));\n  } else col = vec3 (0., 0., 0.3);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 q, vn, col, blkSph, blkGap;\n  float dstFlr, dstBlk, gCol, spec, sh, t;\n  bool useBg;\n  blkSph = vec3 (5., 3., 2.);\n  blkGap = vec3 (1., 0.8, 0.4);\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  HexVorInit ();\n  dstFlr = (rd.y < 0.) ? - (ro.y - 0.5) / rd.y : dstFar;\n  dstBlk = BlkHit (ro, rd);\n  useBg = false;\n  if (min (dstBlk, dstFlr) < dstFar) {\n    if (dstFlr < dstBlk) {\n      ro += rd * dstFlr;\n      vn = vec3 (0., 1., 0.);\n      useBg = true;\n    } else {\n      ro += rd * dstBlk;\n      vn = fcBlk;\n      q = vec3 (qBlk.yx, 0.);\n      q = (abs (fcBlk.y) == 1.) ? q.yzx : ((abs (fcBlk.x) == 1.) ? q.zyx : q);\n      if (abs (fcBlk.x) == 1.) t = abs (length (qBlk) - 0.45);\n      else t = abs (length (max (abs (qBlk) - 0.45 * ((abs (fcBlk.x) == 1.) ?\n         bSize.zy : ((abs (fcBlk.y) == 1.) ? bSize.xz : bSize.yx)), 0.)) - 0.2);\n      gCol = (t < 0.07) ? 1. - 0.5 * smoothstep (0.04, 0.07, t) : 0.;\n      if (gCol > 0.) {\n        col = vec3 (1., 1., 0.1) * gCol;\n        vn = VaryNf (50. * q, vn, 0.2);\n        spec = 10.;\n      } else {\n        col = vec3 (0.5, 0.3, 0.15) * (1. - 0.3 * Fbm2 (20. * qBlk));\n        vn = VaryNf (20. * q, vn, 2.);\n        spec = 0.3;\n      }\n      vn = QtToRMat (Loadv4 (4 + 4 * idBlk + 2)) * vn;\n    }\n  } else useBg = true;\n  sh = (! useBg || rd.y < 0.) ? BlkHitSh (ro + 0.01 * sunDir, sunDir, 15.) : 1.;\n  if (! useBg) col = col * (0.1 + 0.9 * sh * max (dot (vn, sunDir), 0.) +\n     0.1 * max (dot (vn, vec3 (- sunDir.x, 0., - sunDir.z)), 0.)) +\n     spec * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  else col = BgCol (ro, rd, sh);\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ori, ca, sa;\n  float nStep, mxStep, az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  nStep = Loadv4 (0).x;\n  mxStep = Loadv4 (0).y;\n  dstFar = 100.;\n  az = -0.021 * tCur;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    el = clamp (el + 3. * mPtr.y, -0.45 * pi, -0.15 * pi);\n    az += 1.5 * pi * mPtr.x;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  ro = vec3 (0., -2., -60.);\n  ro = vuMat * ro;\n  sunDir = normalize (vec3 (sin (0.01 * tCur), 0.6, - cos (0.01 * tCur)));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Chocolate Dominoes\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 blkSph, blkGap;\nfloat todCur, nStep;\nconst int nBlock = 80;\nconst int nSiteBk = 30;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph.x),\n      mod (sIdf, blkSph.x * blkSph.y) / blkSph.x,\n      sIdf / (blkSph.x * blkSph.y))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 10., fricT = 1., fricS = 5.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp;\n  float farSep, rSep, grav, dt;\n  grav = 20.;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  if (nStep < 50.) return;\n  mRot = QtToRMat (qm);\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSiteBk; j1 ++) {\n        rts = mRot * RSite (j1);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSiteBk; j2 ++) {\n          rtsN = mRotN * RSite (j2);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  for (int j = 0; j < nSiteBk; j ++) {\n    rts = mRot * RSite (j);\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\n\nvoid Init (int mId, float rDir, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float r, a, da, outRad, rs, as;\n  outRad = 25.;\n  rs = outRad;\n  as = 0.;\n  a = 0.;\n  for (int n = 0; n < nBlock; n ++) {\n    r = outRad - rDir * a;\n    da = rDir * 0.045 * pi * outRad / r;\n    if (n == mId) {\n      rs = r;\n      as = a;\n    }\n    a += da;\n  }\n  rm = vec3 (rs * cos (as), 3., rs * sin (as));\n  qm = EulToQt (vec3 (0.5 * pi, - as, 0.));\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  if (mId == 0) {\n    vm.x = rDir * 0.5 * (1. - 2. * Hashff (1.1 * todCur));\n    vm.z = rDir * (3. + 0.1 * Hashff (todCur));\n    wm.x = rDir * 2.;\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float tCur, mxStep, rDir;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  tCur = iTime;\n  todCur = iDate.w;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  mxStep = 5000.;\n  blkSph = vec3 (5., 3., 2.);\n  blkGap = vec3 (1., 0.8, 0.4);\n  if (iFrame <= 5) {\n    doInit = true;\n    rDir = 1.;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    rDir = stDat.z;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm);\n  }\n  if (nStep > mxStep) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    rDir *= -1.;\n    if (mId >= 0) Init (mId, rDir, rm, vm, qm, wm);\n  }\n  if (pxId >= 4) {\n    kp = 4 * mId + 4;\n    if      (pxId == kp + 0) p = vec4 (rm, 0.);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else if (pxId == 0) stDat = vec4 (nStep, mxStep, rDir, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Chocolate Dominoes\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 blkSph, blkGap;\nfloat todCur, nStep;\nconst int nBlock = 80;\nconst int nSiteBk = 30;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph.x),\n      mod (sIdf, blkSph.x * blkSph.y) / blkSph.x,\n      sIdf / (blkSph.x * blkSph.y))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 10., fricT = 1., fricS = 5.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp;\n  float farSep, rSep, grav, dt;\n  grav = 20.;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  if (nStep < 50.) return;\n  mRot = QtToRMat (qm);\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSiteBk; j1 ++) {\n        rts = mRot * RSite (j1);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSiteBk; j2 ++) {\n          rtsN = mRotN * RSite (j2);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  for (int j = 0; j < nSiteBk; j ++) {\n    rts = mRot * RSite (j);\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\n\nvoid Init (int mId, float rDir, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float r, a, da, outRad, rs, as;\n  outRad = 25.;\n  rs = outRad;\n  as = 0.;\n  a = 0.;\n  for (int n = 0; n < nBlock; n ++) {\n    r = outRad - rDir * a;\n    da = rDir * 0.045 * pi * outRad / r;\n    if (n == mId) {\n      rs = r;\n      as = a;\n    }\n    a += da;\n  }\n  rm = vec3 (rs * cos (as), 3., rs * sin (as));\n  qm = EulToQt (vec3 (0.5 * pi, - as, 0.));\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  if (mId == 0) {\n    vm.x = rDir * 0.5 * (1. - 2. * Hashff (1.1 * todCur));\n    vm.z = rDir * (3. + 0.1 * Hashff (todCur));\n    wm.x = rDir * 2.;\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float tCur, mxStep, rDir;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  tCur = iTime;\n  todCur = iDate.w;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  mxStep = 5000.;\n  blkSph = vec3 (5., 3., 2.);\n  blkGap = vec3 (1., 0.8, 0.4);\n  if (iFrame <= 5) {\n    doInit = true;\n    rDir = 1.;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    rDir = stDat.z;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm);\n  }\n  if (nStep > mxStep) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    rDir *= -1.;\n    if (mId >= 0) Init (mId, rDir, rm, vm, qm, wm);\n  }\n  if (pxId >= 4) {\n    kp = 4 * mId + 4;\n    if      (pxId == kp + 0) p = vec4 (rm, 0.);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else if (pxId == 0) stDat = vec4 (nStep, mxStep, rDir, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Chocolate Dominoes\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 blkSph, blkGap;\nfloat todCur, nStep;\nconst int nBlock = 80;\nconst int nSiteBk = 30;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph.x),\n      mod (sIdf, blkSph.x * blkSph.y) / blkSph.x,\n      sIdf / (blkSph.x * blkSph.y))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 10., fricT = 1., fricS = 5.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp;\n  float farSep, rSep, grav, dt;\n  grav = 20.;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  if (nStep < 50.) return;\n  mRot = QtToRMat (qm);\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSiteBk; j1 ++) {\n        rts = mRot * RSite (j1);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSiteBk; j2 ++) {\n          rtsN = mRotN * RSite (j2);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  for (int j = 0; j < nSiteBk; j ++) {\n    rts = mRot * RSite (j);\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\n\nvoid Init (int mId, float rDir, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float r, a, da, outRad, rs, as;\n  outRad = 25.;\n  rs = outRad;\n  as = 0.;\n  a = 0.;\n  for (int n = 0; n < nBlock; n ++) {\n    r = outRad - rDir * a;\n    da = rDir * 0.045 * pi * outRad / r;\n    if (n == mId) {\n      rs = r;\n      as = a;\n    }\n    a += da;\n  }\n  rm = vec3 (rs * cos (as), 3., rs * sin (as));\n  qm = EulToQt (vec3 (0.5 * pi, - as, 0.));\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  if (mId == 0) {\n    vm.x = rDir * 0.5 * (1. - 2. * Hashff (1.1 * todCur));\n    vm.z = rDir * (3. + 0.1 * Hashff (todCur));\n    wm.x = rDir * 2.;\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float tCur, mxStep, rDir;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  tCur = iTime;\n  todCur = iDate.w;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  mxStep = 5000.;\n  blkSph = vec3 (5., 3., 2.);\n  blkGap = vec3 (1., 0.8, 0.4);\n  if (iFrame <= 5) {\n    doInit = true;\n    rDir = 1.;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    rDir = stDat.z;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm);\n  }\n  if (nStep > mxStep) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    rDir *= -1.;\n    if (mId >= 0) Init (mId, rDir, rm, vm, qm, wm);\n  }\n  if (pxId >= 4) {\n    kp = 4 * mId + 4;\n    if      (pxId == kp + 0) p = vec4 (rm, 0.);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else if (pxId == 0) stDat = vec4 (nStep, mxStep, rDir, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}