{
    "Shader": {
        "info": {
            "date": "1581516841",
            "description": "experimenting a bit with video feedback\nadvection -> sharpening -> color rotation -> noise -> normalization -> centered scaling and rotation",
            "flags": 32,
            "hasliked": 0,
            "id": "wlcXRl",
            "likes": 25,
            "name": "turbulent landscape",
            "published": 3,
            "tags": [
                "2d",
                "feedback",
                "infinite",
                "multipass",
                "buffers"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 684
        },
        "renderpass": [
            {
                "code": "//parameters in the common tab\nvoid mainImage(out vec4 col, in vec2 pos) {\n    //col.xy = fetch(ivec2(pos)).xy * .5 + .5;\n    col.xyz = vec3(fetch(ivec2(pos)).xy, 1) * colormat;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 col, in vec2 pos) {\n    ivec2 ipos = ivec2(pos);\n    //advection\n    vec2 dir = fetch(ipos).xy;\n    dir = tex(dir*advection + pos).xy;\n    \n    //sharpening\n    dir -= ( fetch(ipos+ivec2(1,0)).xy\n           + fetch(ipos+ivec2(0,1)).xy\n           + fetch(ipos-ivec2(1,0)).xy\n           + fetch(ipos-ivec2(0,1)).xy) * sharpening;\n    \n    //rotation\n    dir *= rotmat(dirrot);\n    \n    //noise\n    dir += (texelFetch(iChannel3, (ivec2(pos)+iFrame*ivec2(158,83)) & 255, 0).xy * 2. - 1.) * noise;\n    \n    col.xy = dot(dir,dir) < .00001 ? vec2(1,0) : normalize(dir);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//supported interpolation methods: linear, cubic, lanczos3\n#define interpolation_cubic\n\n//parameters\n//replace .02 with .06 for linear interpolation\n#define sharpening .02\n#define advection 2.\n#define dirrot .1\n#define zoom .98\n#define screenrot .03\n#define noise .01\n\n//color transform\n#define colormat mat3(.5,0,.5, -.25,sqrt(3.)/4.,.5, -.25,-sqrt(3.)/4.,.5)\n//#define colormat mat3(.5,0,.5, 0,.5,.5, 0,0,0)\n\n#define res iResolution.xy\n#define tau 6.283185\n#define htau (tau*.5)\n#define fetch(p) texelFetch(iChannel0, p, 0)\n\n#ifdef interpolation_linear\n#define tex(p) texture(iChannel0, (p) / res)\n#endif\n#ifdef interpolation_cubic\n#define tex(p) cubic_tex(iChannel0, p)\n#endif\n#ifdef interpolation_lanczos3\n#define tex(p) lanczos3_tex(iChannel0, p)\n#endif\n\nvec4 cubic_tex(sampler2D ch, vec2 p) {\n    ivec2 ires = textureSize(ch, 0);\n    p -= .5;\n    \n    ivec2 ip = ivec2(floor(p));\n    vec2 fp = fract(p);\n    \n    vec2 w0 = -fp*(1.-fp)*(1.-fp)*.5;\n    vec2 w1 = fp*fp*(1.5*fp-2.5)+1.;\n    vec2 w2 = (.5+2.*fp-1.5*fp*fp)*fp;\n    vec2 w3 = -.5*(1.-fp)*fp*fp;\n    \n    #define tmpfetch(p) texelFetch(ch, (((p)%ires)+ires)%ires, 0)\n    vec4 p00 = tmpfetch(ip+ivec2(0,0)-1);\n    vec4 p10 = tmpfetch(ip+ivec2(1,0)-1);\n    vec4 p20 = tmpfetch(ip+ivec2(2,0)-1);\n    vec4 p30 = tmpfetch(ip+ivec2(3,0)-1);\n    vec4 p01 = tmpfetch(ip+ivec2(0,1)-1);\n    vec4 p11 = tmpfetch(ip+ivec2(1,1)-1);\n    vec4 p21 = tmpfetch(ip+ivec2(2,1)-1);\n    vec4 p31 = tmpfetch(ip+ivec2(3,1)-1);\n    vec4 p02 = tmpfetch(ip+ivec2(0,2)-1);\n    vec4 p12 = tmpfetch(ip+ivec2(1,2)-1);\n    vec4 p22 = tmpfetch(ip+ivec2(2,2)-1);\n    vec4 p32 = tmpfetch(ip+ivec2(3,2)-1);\n    vec4 p03 = tmpfetch(ip+ivec2(0,3)-1);\n    vec4 p13 = tmpfetch(ip+ivec2(1,3)-1);\n    vec4 p23 = tmpfetch(ip+ivec2(2,3)-1);\n    vec4 p33 = tmpfetch(ip+ivec2(3,3)-1);\n    #undef tmpfetch\n    \n    return p00*w0.x*w0.y + p10*w1.x*w0.y + p20*w2.x*w0.y + p30*w3.x*w0.y\n         + p01*w0.x*w1.y + p11*w1.x*w1.y + p21*w2.x*w1.y + p31*w3.x*w1.y\n         + p02*w0.x*w2.y + p12*w1.x*w2.y + p22*w2.x*w2.y + p32*w3.x*w2.y\n         + p03*w0.x*w3.y + p13*w1.x*w3.y + p23*w2.x*w3.y + p33*w3.x*w3.y;\n    \n    /*\n    cleaner but slower version of the code above:\n\n    vec4 wx = vec4(w0.x,w1.x,w2.x,w3.x);\n    vec4 wy = vec4(w0.y,w1.y,w2.y,w3.y);\n    vec4 sum = vec4(0);\n    for(int y = 0; y < 4; y++)\n    for(int x = 0; x < 4; x++) {\n        sum += tmpfetch(ip+ivec2(x,y)-1) * wx[x] * wy[y];\n    }\n    */\n}\n\n//#define sinc(x) mix(sin((x)*tau) / ((x)*tau), vec2(1.), lessThan(abs(x),vec2(.01)))\nvec4 lanczos3_tex(sampler2D ch, vec2 p) {\n    ivec2 ires = textureSize(ch, 0);\n    p -= .5;\n    \n    ivec2 ip = ivec2(floor(p));\n    vec2 fp = fract(p);\n    \n    vec2 w[6];\n    \n    for(int i = 0; i < 6; i++) {\n        vec2 x = vec2(i) - 2. - fp;\n        vec2 tmp = 3. * sin(x*htau) * sin(x*htau/3.) / (htau*htau*x*x);\n        w[i] = mix(tmp, vec2(1.), lessThan(abs(x), vec2(.1)));\n        \n    }\n    \n    #define tmpfetch(p) texelFetch(ch, (((p)%ires)+ires)%ires, 0)\n    vec4 sum = vec4(0);\n    for(int y = 0; y < 6; y++)\n    for(int x = 0; x < 6; x++) {\n        sum += tmpfetch(ip+ivec2(x,y)-2) * w[x].x * w[y].y;\n    }\n    #undef tmpfetch\n    return sum;\n}\n\nmat2 rotmat(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,-s,s,c);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 col, in vec2 pos) {\n    //centered scaling and rotation\n    col.xy = normalize(tex(((pos-res*.5) * zoom * rotmat(screenrot))+res*.5).xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}