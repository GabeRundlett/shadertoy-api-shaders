{
    "Shader": {
        "info": {
            "date": "1597796200",
            "description": "LoicVDB made the tile system and also fixed it to allow the image to add samples rather than the raw tiles, it fits in Buffer A!",
            "flags": 32,
            "hasliked": 0,
            "id": "ttsfDj",
            "likes": 11,
            "name": "Yeetedly Slow Multipass Nebula",
            "published": 3,
            "tags": [
                "raymarch",
                "dither",
                "volumetric",
                "volumetric",
                "raymarcher",
                "nebula",
                "slow",
                "multipass",
                "nonrealtime"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 586
        },
        "renderpass": [
            {
                "code": "// ^^^ Switch Between Buffer A and B ^^^\n// Buffer A is Rendering and Settings\n// Buffer B is for Exporting a 32-Bit Float OpenEXR using the Button on the Bottom of the Editor\n\n// Zi7ar21's In Progress Nebula Ray Marcher --- August 6th, 2020\n// I Deem You Allowed to Use My Code even Commercially and Even Modify it as Long as:\n// You keep this disclaimer.\n// You do not modify the terms\n\n// You do not have to keep my credits, however I urge you to leave them here in the source.\n\n// If this Code is Being Reused Entirely,\n// Then the Original and Possibly Updated Version Can be Found Here:\n// https://www.shadertoy.com/view/ttfBDN\n// Fork of \"My Nebula\" by Zi7ar21. https://shadertoy.com/view/ttfBDN\n// 2020-08-18 22:34:07\n\n// Learn the Basics of Raymarching Like I Did Here:\n// https://youtu.be/PGtv-dBi2wE\n\n// LoicVDB's Improvements\n// Fork of \"cscsdc\" by loicvdb. https://shadertoy.com/view/wlSfRt --- 2020-09-08 19:37:55\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ^^^ Switch Between Buffer A and B ^^^\n// This is for Rendering and Settings\n\n// ##### COMMON VALUES #####\n\n// Change these Parameters to Your Liking!\n// Maximum Number of Marches,\n// You want it to limit the raymarcher before the max distance parameter or it will look bad.\n#define MAX_MARCHES 64\n\n// Redundant for this idk if the max marches are large and you see ugly stuff then increase this\n#define MAX_DISTANCE 6.5\n\n// fBm Number of Octaves (Detail)\n#define NUM_OCTAVES 8\n\n// Size of Steps, smaller means more sampling over depth but also means more computation.\n// Increase max marches if the scene goes invisible.\n#define STEP_SIZE 0.1\n\n// If you march less rays, the nebula will appear darker. Bump this up to make it brighter again.\n#define DENSITY 0.1\n\n// Tiles, more means easier on the Hardware\n#define TILES 5\n// So kindly made by LoicVDB uwu\n\n// Amount of distortion to apply\n#define DISTORT_AMOUNT 2.5\n\n// Offset the 4D Noise, Basically a different Nebula\n#define W_OFFSET 0.5\n\n// Difference in offset between color channels\n#define W_DIFFERENCE 0.01\n\n// Oof ugly mess below watch out lol\n\n// ##### NOISE #####\n\n// Simplex 4D Noise\n// by Ian McEwan, Ashima Arts\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec4 grad4(float j, vec4 ip){\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n  return p;\n}\nfloat snoise(vec4 v){\n  const vec2  C = vec2( 0.138196601125010504,\n                        0.309016994374947451);\n  vec4 i  = floor(v + dot(v, C.yyyy) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n  i = mod(i, 289.0); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n}\n\n// 2D Noise for Dithering\nfloat hash13(vec3 p3){\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// fBm Noise\nfloat fbm(vec4 x){\n    float v = 0.0;\n    float a = 0.5;\n    for (int i = 0; i < NUM_OCTAVES; ++i){\n        v += a * snoise(x);\n        x = x * 2.0;\n        a *= 0.5;\n    }\n    return v;\n}\n\n// 4D Nebula Function\nfloat distort(vec3 raypos, float variance){\n    float distort = 0.0;\n    distort = distort+(DISTORT_AMOUNT*fbm(vec4(raypos, variance)));\n    return distort;\n}\n\nfloat nebulanoise(vec3 raypos, float variance, float base){\n    float density = clamp((fbm(vec4((raypos)+distort(raypos, variance), base))-0.25)*8192.0, 0.0, 1.0)/(pow(distance(vec3(0.0), raypos),4.0)*2.0);\n    return density;\n}\n\n// ##### RAYMARCHING #####\n\n// Compute/March the Ray\nvec3 raymarch(vec3 camerapos, vec3 raydir, vec2 coord){\n    float distorigin=0.0;\n    float densityaddr=0.0;\n    float densityaddg=0.0;\n    float densityaddb=0.0;\n    vec3 density=vec3(0.0);\n    vec3 raypos = camerapos;\n    vec3 raydirmod = (raydir*(hash13(vec3(coord, iFrame))+1.0))*STEP_SIZE;\n    for(int i=0; i<MAX_MARCHES; i++) {\n        raypos = raypos + raydirmod;\n        densityaddr = nebulanoise(raypos/4.0,  W_OFFSET-W_DIFFERENCE, W_OFFSET)*DENSITY;\n        densityaddg = nebulanoise(raypos/4.0,  W_OFFSET, W_OFFSET)*DENSITY*0.5;\n        densityaddb = nebulanoise(raypos/4.0,  W_OFFSET+W_DIFFERENCE, W_OFFSET)*DENSITY*0.25;\n        density = vec3(density.r+densityaddr, density.g+densityaddg, density.b+densityaddb);\n        distorigin = raypos.z-camerapos.z;\n        if(distorigin>MAX_DISTANCE) break;\n    }\n    return density;\n}\n\n// ##### RENDERING #####\n\n// Render the Image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // LoicVDB: I store the number of samples in the alpha channel\n    // LoicVDB: take the previous color and sample count (black and 0 if on first frame)\n    vec4 oldFragColor = vec4(0.);\n    if(iFrame != 0) oldFragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    // LoicVDB:I put it in the fragColor var because I want to keep it even if it's not in a tile\n    fragColor = oldFragColor;\n    \n    // LoicVDB's Hyper Epic Tiles Function\n    int index = int(fragCoord.x/iResolution.x*float(TILES))\n              + int(fragCoord.y/iResolution.y*float(TILES))*TILES;\n    if(iFrame-(TILES*TILES*(iFrame/(TILES*TILES))) != index) return;\n    \n    // Camera Orientation\n    vec3 xdir = vec3(1.0,0.0,0.0);\n    vec3 ydir = vec3(0.0,1.0,0.0);\n    vec3 zdir = vec3(0.0,0.0,1.0);\n    float FOV = 1.0;\n    vec3 camerapos = vec3(0.0, 0.0, -8.0);\n\n    // Undistorted Normalized Pixel Coordinates (From 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.x;\n    vec2 uvd = fragCoord/iResolution.xy;\n    vec3 raydir = normalize(FOV*(uv.x*xdir + uv.y*ydir) + zdir);\n    vec3 raymarched = raymarch(camerapos, raydir, vec2(fragCoord));\n\n    // LoicVDB: add the color and increase the sample count\n    fragColor += vec4(raymarched, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ^^^ Switch Between Buffer A and B ^^^\n// This is for Exporting a 32-Bit Float OpenEXR using the Button on the Bottom of the Editor\n\nvec3 acesFilm(const vec3 x){\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // LoicVDB: take the color from the A buffer\n    vec4 texel = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // LoicVDB: divide it by the sample count (the alpha channel)\n    vec3 color = (texel.a == 0. ? vec3(0.) : texel.rgb / texel.a);\n    \n    // Output to screen\n    fragColor = vec4(acesFilm(color), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}