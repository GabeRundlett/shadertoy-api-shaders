{
    "Shader": {
        "info": {
            "date": "1640577320",
            "description": "Bouncing baubles.",
            "flags": 32,
            "hasliked": 0,
            "id": "stySWz",
            "likes": 19,
            "name": "Bouncing Baubles",
            "published": 3,
            "tags": [
                "2d",
                "christmas",
                "particles",
                "baubles"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "// Transformations\nmat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, -si, si, co);\n}\n\n// http://marcodiiga.github.io/radial-lens-undistortion-filtering\nvec2 barrelDistort(in vec2 p, in vec2 alpha) {\n    return p / (1.0 - alpha * dot(p, p));\n}\n\n// SDFs\nfloat sdCircle(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdStar5(in vec2 p, in float r, in float rf) {\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x, k1.y);\n    p.x = abs(p.x);\n    p -= 2.0 * max(dot(k1, p), 0.0) * k1;\n    p -= 2.0 * max(dot(k2, p), 0.0) * k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf * vec2(-k1.y, k1.x) - vec2(0.0, 1.0);\n    float h = clamp(dot(p, ba) / dot(ba, ba), 0.0, r);\n    return length(p - ba * h) * sign(p.y * ba.x - p.x * ba.y);\n}\n\n// Bauble design\nvoid drawBauble(inout vec3 pixel, in vec2 uv, in float unit, in float id, in vec2 pos, in float radius) {\n    float aa = unit / radius;\n    uv = (uv - pos) / radius;\n\n    vec3 color = Hash13(id + 18.0);\n    color /= max(color.r, max(color.g, color.b));\n    float radGrad = pow(abs(1.0 - length(uv)), 0.5);\n    float bauble = sdCircle(uv, 1.0);\n    pixel = mix(pixel, color * radGrad, smoothstep(aa, 0.0, bauble));\n\n    uv = barrelDistort(uv, vec2(0.4));\n    uv *= Rotate2D(Hash11(id + 1.0) * 6.28);\n    uv = mod(uv + 0.25, 0.5) - 0.25;\n\n    float selection = id / float(BAUBLES);\n    float pattern = selection < 0.5 ? sdCircle(uv, 0.1) : sdStar5(uv, 0.15, 0.5);\n\n    pattern = max(pattern, bauble);\n    pixel = mix(pixel, vec3(1.0, 1.0, 0.0) * sqrt(radGrad), smoothstep(aa, 0.0, pattern));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    fragColor = vec4(0.75);\n\n    // Draw particles\n    for (int id=0; id < BAUBLES; id++) {\n        Bauble b = loadBauble(id);\n        drawBauble(fragColor.rgb, uv, unit, float(id), b.pos, b.radius);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Settings\n#define BAUBLES 8\n#define EPSILON 0.001\n#define dt 1.0\n\n// Utilities\nstruct Bauble {\n    int id;\n    vec2 pos;\n    vec2 vel;\n    float mass;\n    float radius;\n};\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nvec2 Hash12(in float x) {\n\tvec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec3 Hash13(in float p) {\n    vec3 p3 = fract(p * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xxy + p3.yzz) * p3.zyx); \n}\n\n// Initialize\nvec4 initBauble(in ivec2 addr) {\n    if (addr.x < BAUBLES) {\n        float x = float(addr.x) + iDate.w;\n        if (addr.y == 0) return vec4(Hash12(x + 274.937) - 0.5, 0.0, 0.0);\n        if (addr.y == 1) return vec4((Hash12(x + 385.583) - 0.5) * 0.01, 0.0, 0.0);\n        if (addr.y == 2) return vec4(mix(0.1, 0.25, Hash11(x + 858.938)), 0.0, 0.0, 0.0);\n        if (addr.y == 3) return vec4(mix(0.1, 0.2, Hash11(x + 374.497)), 0.0, 0.0, 0.0);\n        return vec4(0.0);\n    }\n\n    return vec4(0.0);\n}\n\n// Load/store\n#define loadBauble(bId)                                \\\n    Bauble(bId,                                        \\\n           texelFetch(iChannel0, ivec2(bId, 0), 0).xy, \\\n           texelFetch(iChannel0, ivec2(bId, 1), 0).xy, \\\n           texelFetch(iChannel0, ivec2(bId, 2), 0).x,  \\\n           texelFetch(iChannel0, ivec2(bId, 3), 0).x)  \\\n\nvec4 storeBauble(in Bauble b, in ivec2 addr) {\n    if (addr.y == 0) return vec4(b.pos, 0.0, 0.0);\n    if (addr.y == 1) return vec4(b.vel, 0.0, 0.0);\n    if (addr.y == 2) return vec4(b.mass, 0.0, 0.0, 0.0);\n    if (addr.y == 3) return vec4(b.radius, 0.0, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Force particles to stay within boundaries\nvec2 constrain(in vec2 pos, in vec2 constraints, in float radius) {\n    constraints -= radius - EPSILON;\n    return clamp(pos, -constraints, constraints);\n}\n\nBauble updateBauble(in Bauble b, in vec2 constraints) {\n    // Boundary collisions\n    if (abs(b.pos.x) > constraints.x - b.radius) b.vel.x = -b.vel.x;\n    if (abs(b.pos.y) > constraints.y - b.radius) b.vel.y = -b.vel.y;\n\n    // Particle-particle collisions\n    for (int id=0; id < BAUBLES; id++) {\n        if (id != b.id) {\n            Bauble b2 = loadBauble(id);\n            vec2 dir = b.pos - b2.pos;\n            float dist = length(dir);\n            float rsum = b.radius + b2.radius;\n            if (dist < rsum) {\n                vec2 n = dir / dist;\n                b.pos -= n * (dist - rsum);\n                vec2 perp = vec2(-n.y, n.x);\n                b.vel = dot(b2.vel, n) * n + dot(b.vel, perp) * perp;\n                // How to account for different masses?\n            }\n        }\n    }\n\n    // Move\n    b.pos = constrain(b.pos + b.vel * dt, constraints, b.radius);\n\n    return b;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 constraints = vec2(iResolution.x / iResolution.y * 0.5, 0.5);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFrame == 0) fragColor = initBauble(iFragCoord);\n    if (iFrame > 0) {\n        if (iFragCoord.x < BAUBLES && iFragCoord.y < 4) {\n            Bauble b = loadBauble(iFragCoord.x);\n            b = updateBauble(b, constraints);\n            fragColor = storeBauble(b, iFragCoord);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}