{
    "Shader": {
        "info": {
            "date": "1621393844",
            "description": "Distance to a polyspline constructed of many quadratic bezier curves.",
            "flags": 0,
            "hasliked": 0,
            "id": "7lf3Rn",
            "likes": 20,
            "name": "Distance to Polyspline",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "bezier",
                "spline",
                "distance"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// Number of vertices in the polyspline\n#define N 10\n\n// Helper functions\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat sdPolyspline(in vec2 p, in vec2[N] cp) {\n    // Complete the first segment of the polyspline\n    vec2 v1 = cp[0], v2 = vec2(0.0), v3 = 0.5 * (cp[1] + v1);\n    vec2 pa = p - v1, ba = v3 - v1;\n    float d = dot2(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n\n    // Combine distances to quadratic beziers spanning each corner (vertex)\n    for (int n=1; n < N - 1; n++) {\n        v1 = 0.5 * (cp[n - 1] + cp[n]), v2 = cp[n], v3 = 0.5 * (cp[n] + cp[n + 1]);\n\n        vec2 c1 = p - v1;\n        vec2 c2 = 2.0 * v2 - v3 - v1;\n        vec2 c3 = v1 - v2;\n\n        // Solve a cubic to minimize the distance for the parameter\n        float t3 = dot(c2, c2);\n        float t2 = dot(c3, c2) * 3.0 / t3;\n        float t1 = (dot(c1, c2) + 2.0 * dot(c3, c3)) / t3;\n        float t0 = dot(c1, c3) / t3;\n\n        float t22 = t2 * t2;\n        vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n        float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n        float p2 = abs(pq.x);\n        float r1 = 1.5 / pq.x * pq.y;\n\n        if (qq * 0.25 + ppp / 27.0 > 0.0) {\n            float r2 = r1 * sqrt(3.0 / p2), root;\n            if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n            else root = sinh(asinh(r2) / 3.0);\n            root = clamp(-2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0, 0.0, 1.0);\n            d = min(d, dot2(p - mix(mix(v1, v2, root), mix(v2, v3, root), root)));\n        }\n\n        else {\n            float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0;\n            vec2 roots = clamp(2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0, 0.0, 1.0);\n            d = min(d, dot2(p - mix(mix(v1, v2, roots.x), mix(v2, v3, roots.x), roots.x)));\n            d = min(d, dot2(p - mix(mix(v1, v2, roots.y), mix(v2, v3, roots.y), roots.y)));\n        }\n    }\n\n    // Complete the last segment of the polyspline\n    v1 = cp[N - 1], v2 = vec2(0.0), v3 = 0.5 * (cp[N - 2] + v1);\n    pa = p - v1, ba = v3 - v1;\n    d = min(d, dot2(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)));\n\n    return sqrt(d);\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec2 Hash22(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    float time = iTime * 2.0;\n\n    // Generate control points\n    vec2[N] controlPoints;\n    for (int id=0; id < N; id++) {\n        controlPoints[id] = mix(Hash22(vec2(id, floor(iTime))), Hash22(vec2(id, ceil(iTime))), smoothstep(0.0, 1.0, fract(iTime))) * 3.0 - 1.5;\n    }\n\n    float d = sdPolyspline(uv, controlPoints) * 0.5;\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\n    // Draw lines and control points\n    for (int n=0; n < N - 1; n++) {\n        vec2 pa = uv - controlPoints[n], ba = controlPoints[n + 1] - controlPoints[n];\n        color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - 0.001));\n        color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - controlPoints[n]) - 0.03));\n    }\n\n    // Draw last control point\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - controlPoints[N - 1]) - 0.03));\n\n    // Draw the polyspline\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, d));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}