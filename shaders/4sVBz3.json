{
    "Shader": {
        "info": {
            "date": "1529826030",
            "description": "in a fragment shader, regular patterns can generally be done loopless: each pixel determine on which feature it lays (or not).\n(Note that if patterns can superimpose, then one has not only to consider the central feature but also its direct neighborhs) .",
            "flags": 0,
            "hasliked": 0,
            "id": "4sVBz3",
            "likes": 7,
            "name": "loopless dots along ellipse",
            "published": 3,
            "tags": [
                "tuto",
                "loopless"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 646
        },
        "renderpass": [
            {
                "code": "// elliptic variant of https://shadertoy.com/view/XsVBz3\n\n#define S(v,r)  smoothstep ( 3./R.y, 0., length(v)-r ) // antialiased draw\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v) + vec4(0,23,21,0) ) ) // from https://www.shadertoy.com/view/ll2cDc\n\n#define rot(a)  mat2( cos(a), -sin(a), sin(a), cos(a) )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U = ( U+U - R ) / R.y;                           // normalized coordinates\n    \n    float r = .5,                                    // circle radius\n          n = 1.+30.*(.5+.5*sin(iTime)),             // number of dots\n          h = exp2(cos(iTime*1.7));                  // vertical circle stretch\n    U.y *= h;                                        // -> ellipse\n    \n    float l = length(U),                             // polar coordinates\n          a = atan(U.y,U.x),\n    \n     u = r * ( fract( a*n/6.283 ) - .5 ) / (n/6.283),// local coordinates in\n     v = l - r,                                      // cells along the circle\n     i = floor( a*n/6.283 );                         // dot number\n    \n    vec2 V = vec2(u,v) * rot(-a);                    // unstretch local coords\n    V.x /= h;\n    \n    O = S( V, .03 ) * hue(i/n);                      // draw blobs\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}