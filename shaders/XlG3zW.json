{
    "Shader": {
        "info": {
            "date": "1473377421",
            "description": "Strandbeest for marius. I wanted to make this shader when I first saw a strandbeest but couldn't figure out the legs. Thanks Marius. Original version ...\n[url]https://www.shadertoy.com/view/ltG3z1[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XlG3zW",
            "likes": 39,
            "name": "beestie",
            "published": 3,
            "tags": [
                "strandbeest"
            ],
            "usePreview": 1,
            "username": "eiffie",
            "viewed": 4553
        },
        "renderpass": [
            {
                "code": "//Beestie by eiffie based on marius's strandbeest leg https://www.shadertoy.com/view/ltG3z1\n//which is based on...\n// Visualizing Theo Jansen's Strandbeest basic leg linkage\n// http://www.strandbeest.com/\n//\n// See http://www.strandbeest.com/beests_leg.php for names & values.\n\nconst float SCALE = 100.0;\n\nconst float a = 38.0 / SCALE;\nconst float b = 41.5 / SCALE;\nconst float c = 39.3 / SCALE;\nconst float d = 40.1 / SCALE;\nconst float e = 55.8 / SCALE;\nconst float f = 39.4 / SCALE;\nconst float g = 36.7 / SCALE;\nconst float h = 65.7 / SCALE;\nconst float i = 49.0 / SCALE;\nconst float j = 50.0 / SCALE;\nconst float k = 61.9 / SCALE;\nconst float l = 7.8  / SCALE;\nconst float m = 15.0 / SCALE;\n\n// distance from point p to line segment ab\nvec2 seg(vec2 a, vec2 b, vec2 p){\n  vec2 pa=p-a,ba=b-a;\n  float t=dot(pa,ba)/dot(ba,ba);\n  float d=length(pa-ba*clamp(t,0.0,1.0));\n  return vec2(d,max(d,0.5-abs(t-0.5)));\n}\n// intersect point between two 2d circles (x,y,r)\nvec2 intersect(vec3 c0, vec3 c1) {\n    vec2 dxy = vec2(c1.xy - c0.xy);\n    float d = length(dxy);\n    float a = (c0.z*c0.z - c1.z*c1.z + d*d)/(2.*d);\n    vec2 p2 = c0.xy + (a / d)*dxy;\n    float h = sqrt(c0.z*c0.z - a*a);\n    vec2 rxy = vec2(-dxy.y, dxy.x) * (h/d);\n    return p2 + rxy;\n}\n#define time iTime*2.0\nfloat iZ;\nvec3 mcol=vec3(0.0);\nfloat DE(vec3 p0){//drawing multiple legs by marching one\n  float sx=1.0,dB=max(abs(p0.x)-2.0,abs(p0.z)-3.75);\n  p0.y+=sin(p0.z*0.4+2.4*sin(p0.x*0.3+time*0.1))*0.25;\n  if(p0.x<0.0){sx=-1.0;p0.z-=0.5;}\n  float t=(time*2.0+(sin(time*0.1)+2.0)*floor(p0.z)+1.57*sx)*sx;\n  float x=sx*p0.x-0.2;\n  //leg from marius\n  vec2 crank = vec2(0, 0);          // crank axle\n  vec2 axle = crank - vec2(a, -l);  // main axle\n  vec2 pedal = crank + vec2(m*cos(t), -m*sin(t));\n  vec2 uv=vec2(-x,-p0.y);\n  // draw \"frame\"\n  vec2 ds = seg(vec2(0, l), axle, uv);\n  ds = min(ds, seg(vec2(0, l), crank, uv));\n  ds = min(ds, seg(pedal, crank, uv));\n  // compute linkage points\n  vec2 P1 = intersect(vec3(pedal, j), vec3(axle, b));  // bej\n  vec2 P2 = intersect(vec3(axle, c), vec3(pedal, k));  // cgik\n  vec2 P3 = intersect(vec3(P1, e), vec3(axle, d));  // edf\n  vec2 P4 = intersect(vec3(P3, f), vec3(P2, g)); // fgh\n  vec2 P5 = intersect(vec3(P4, h), vec3(P2, i));  // hi\n  ds = min(ds, seg(P1, axle, uv));\n  ds = min(ds, seg(P3, axle, uv));\n  ds = min(ds, seg(P1, P3, uv));\n  ds = min(ds, seg(P2, P4, uv));\n  ds = min(ds, seg(P2, P5, uv));\n  ds = min(ds, seg(P4, P5, uv));\n  ds = min(ds, seg(pedal, P1, uv));\n  ds = min(ds, seg(pedal, P2, uv));\n  ds = min(ds, seg(P2, axle, uv));\n  ds = min(ds, seg(P3, P4, uv));\n  //end leg\n  float z=abs(fract(p0.z)-0.5)-0.2;\n  float d2=max(ds.y,z);\n  float d3=min(length(uv),length(uv-axle));\n  float d=sqrt(ds.x*ds.x+z*z);\n  d=min(min(min(d,min(d2,d3))-0.01,(1.2-fract(p0.z))*iZ),abs(p0.x)+0.2);\n  d=max(d,abs(p0.z)-3.75);\n  d2=0.95+p0.y;\n  if(d<d2)mcol=vec3(0.7,0.4,0.2);\n  else mcol=vec3(0.9,0.7,0.4)*(0.5+0.5*fract(sin(dot(p0.xz,vec2(13.13,117.667)))*43.1234));\n  return min(d,d2);\n}\nvec3 sky(vec3 rd, vec3 L){//modified bananaft's & public_int_i's code\n  float d=0.4*dot(rd,L)+0.6;\n  rd=abs(rd);\n  float y=max(0.,L.y),sun=max(1.-(1.+10.*y+rd.y)*length(rd-L),0.)\n    +.3*pow(1.-rd.y,12.)*(1.6-y);\n  return d*mix(vec3(0.3984,0.5117,0.7305),vec3(0.7031,0.4687,0.1055),sun)\n    *((.5+pow(y,.4))*(1.5-abs(L.y))+pow(sun,5.2)*y*(5.+15.0*y));\n}\nfloat rnd;\nvoid randomize(in vec2 p){rnd=fract(time+sin(dot(p,vec2(13.3145,117.7391)))*42317.7654321);}\nfloat ShadAO(in vec3 ro, in vec3 rd){\n float t=0.01*rnd,s=1.0,d,mn=0.01;\n for(int i=0;i<12;i++){\n  d=max(DE(ro+rd*t)*1.5,mn);\n  s=min(s,d/t+t*0.5);\n  t+=d;\n }\n return s;\n}\nvec3 scene(vec3 ro, vec3 rd){\n  iZ=1.0/rd.z;\n  vec3 L=normalize(vec3(0.4,0.7,0.5));\n  vec3 bcol=sky(rd,L);\n  vec4 col=vec4(0.0);//color accumulator\n  float t=DE(ro)*rnd,d,od=1.0,px=1.0/iResolution.x;\n  for(int i=0;i<99;i++){\n    d=DE(ro+rd*t);\n    if(d<px*t){\n      float dif=clamp(1.0-d/od,0.0,1.0);\n      float alpha=(1.0-col.w)*clamp(1.0-d/(px*t),0.0,1.0);\n      if(mcol.g>0.5)dif=0.1+dif*0.5;\n      col+=vec4(clamp(mcol*dif,0.0,1.0),1.0)*alpha;\n      if(col.w>0.99)break;\n    }\n    t+=d;od=d;\n    if(t>30.0)break;\n  }\n  ro+=rd*t;\n  if(t<30.0){\n    col.rgb*=(0.5+0.5*ShadAO(ro,L));\n    if(ro.y<0.0)col.w=1.0;\n  }\n  col.rgb+=bcol*(1.0-clamp(col.w,0.0,1.0));\n  return col.rgb;\n}\n\nmat3 lookat(vec3 fw){\n fw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n   randomize(fragCoord);\n   float tim=iTime*0.3;\n   vec2 uv=(fragCoord-0.5*iResolution.xy)/iResolution.x;\n   vec3 ro=vec3(sin(tim)+3.5,sin(tim*0.4)*0.75+0.25,-5.0+cos(tim*1.3)*2.0)*(sin(tim*0.2)*0.5+1.0);\n   vec3 rd=lookat(vec3(0.0,-0.5,0.0)-ro)*normalize(vec3(uv,1.0));\n   fragColor=vec4(scene(ro,rd)*2.0,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}