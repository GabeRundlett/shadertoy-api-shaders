{
    "Shader": {
        "info": {
            "date": "1710505147",
            "description": "Trying to understand how to use sound and sync it with animation",
            "flags": 0,
            "hasliked": 0,
            "id": "XXjSWR",
            "likes": 3,
            "name": "Sound Machine",
            "published": 3,
            "tags": [
                "2d",
                "sound"
            ],
            "usePreview": 0,
            "username": "Friend",
            "viewed": 129
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n#define d(f,s) (2. * f.xy - R.xy) / R.y * s\n\nvec2 ssnd(vec2 ndc) {\n    int tx = int(ndc.x*512.0);                               // the sound texture is 512x2\n    float fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x;  // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;  // second row is the sound wave, one texel is one mono sample\n    return vec2(fft, wave);\n}\n\nvec3 gfb(vec2 ndc) {\n    float bass   = 0.0;\n    float mid    = 0.0;\n    float treble = 0.0;\n    \n    // Loop over a set range of indices for each band to average their magnitudes\n    int spb = 10; \n    for (int i = 0; i < spb; i++) {\n        bass += texelFetch(iChannel0, ivec2(i, 0), 0).x;          // Bass band (low frequencies)\n        mid += texelFetch(iChannel0, ivec2(170 + i, 0), 0).x;     // Mid band (middle frequencies)\n        treble += texelFetch(iChannel0, ivec2(340 + i, 0), 0).x;  // Treble band (high frequencies)\n    }\n    \n    // Average the magnitudes for each band\n    bass /= float(spb);\n    mid /= float(spb);\n    treble /= float(spb);\n    \n    return vec3(bass, mid, treble);\n}\n\nvec3 pal(float a) {\n    a = clamp(a, 0.0, 1.0);\n\n    vec3 lc = vec3(0.0, 0.0, 1.0);   // Blue\n    vec3 mc1 = vec3(0.0, 1.0, 1.0);  // Cyan\n    vec3 mc2 = vec3(1.0, 1.0, 0.0);  // Yellow\n    vec3 hc = vec3(1.0, 0.0, 0.0);   // Red\n\n    vec3 color;\n    if (a < 0.33) {\n        color = mix(lc, mc1, a / 0.33);              // Mix between low and first mid color for the bottom third\n    } else if (a < 0.66) {\n        color = mix(mc1, mc2, (a - 0.33) / 0.33);    // Mix between first and second mid colors for the middle third\n    } else {\n        color = mix(mc2, hc, (a - 0.66) / 0.34);     // Mix between second mid color and high color for the top third\n    }\n\n    return color;\n}\n\n\nvoid mainImage(out vec4 c, in vec2 uv) {\n    vec2 p = d(uv, 1.5);\n\tvec2 ndc = uv.xy / R.xy;\n    vec2 snd = ssnd(ndc);\n    vec3 bands = gfb(ndc);\n\n    float dbass = length(p - vec2(-1.5, 1.1))-.2;\n    dbass -= 0.2*bands.x;\n    dbass = smoothstep(0.01, 0.001, dbass);\n    \n    float dmid = length(p - vec2(0., 1.1))-.2;\n    dmid -= 0.2*bands.y;\n    dmid = smoothstep(0.01, 0.001, dmid);\n    \n    float dtreble = length(p - vec2(1.5, 1.1))-.2;\n    dtreble -= 0.2*bands.z;\n    dtreble = smoothstep(0.01, 0.001, dtreble);\n        \n    p.y += .5;\n    float dwave = abs(p.y);\n    dwave = 1.-smoothstep(0.0, .02, abs(snd.y-p.y));\n  \n    p.y += 1.;\n    float dfft = abs(p.y);\n    dfft = 1.-smoothstep(0.0, .02, -(snd.x-p.y));\n\n    vec3 clfft    = pal(snd.x);\n    vec3 clbass   = pal(bands.x);\n    vec3 clmid    = pal(bands.y);\n    vec3 cltreble = pal(bands.z);\n    vec3 clwave   = pal(snd.y);\n    \n    vec3 col = vec3(0.);\n    col += dbass * clbass;\n    col += dmid * clmid;\n    col += dtreble * cltreble;\n    col += dwave * clwave;\n    col += dfft * clfft; \n    c = vec4(col, 1.0);\n}\n      ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}