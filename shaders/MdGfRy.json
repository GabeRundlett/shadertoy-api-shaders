{
    "Shader": {
        "info": {
            "date": "1529284061",
            "description": "Drawing the Masayoshi field IFS, but now each vertex is a particle part of a force directed graph that aligns itself to the curve.\nSee https://www.reddit.com/r/math/comments/5fgb27/4_parameters_interesting_patterns/\nUse mouse for parameters and to grab",
            "flags": 48,
            "hasliked": 0,
            "id": "MdGfRy",
            "likes": 17,
            "name": "Masayoshi fields",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "lines",
                "stochastic",
                "routing"
            ],
            "usePreview": 0,
            "username": "rory618",
            "viewed": 877
        },
        "renderpass": [
            {
                "code": "// Fork of \"De Rham Curves 5\" by rory618. https://shadertoy.com/view/XsyfzG\n// 2018-06-17 23:55:45\n\n// Fork of \"De Rham Curves 4\" by rory618. https://shadertoy.com/view/4sVBRw\n// 2018-06-17 07:02:29\n\n// Fork of \"Stochastic Routing\" by rory618. https://shadertoy.com/view/Xd3BW8\n// 2018-06-04 01:06:52\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    \n    vec4 cSlider = processSliders(i,iChannel0,R);\n\tvec2 uv = i/R.xy;\n    o = texture(iChannel1,uv);\n    \n    o.xyz = mix(o.xyz,cSlider.rgb,cSlider.a);\n    o = max(o, texelFetch(iChannel0, ivec2(i),0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n#define F iFrame\n#define T iTime\n#define iter 11\n#define scale 1.\n#define shift vec2(0)\n\n#define d0 mat3(1,0,0,0,Da,Dd,0,Db,De)\n#define d1 mat3(1,0,0,Da,1.-Da,Dl,Db,-Db,Dn)\n\n#define F1(z) (mat2(a,-a.y,a.x)*(z) + mat2(B,-B.y,B.x)*(z*vec2(1,-1))     )\n#define F2(z) (mat2(y,-y.y,y.x)*(z-vec2(1,0)) + mat2(d,-d.y,d.x)*(z*vec2(1,-1)-vec2(1,0))+vec2(1,0)     )\nvec2 a, B, d, y;\n\n\n\nvec2 Masayoshi(float t,int F){\n    int f = int(fract(t) * float(2<<iter)  );// + F;\n    vec2 z = vec2(f&1,0);\n    f /= 2;\n    for(int i = 0; i < iter; i++){\n        \n        z=(1==(f&1)?F1(z):F2(z));\n    \tf /= 2;\n        \n    }\n    \n    return z;\n}\n\n\nvec4 processSliders(in vec2 fragCoord, sampler2D tex, vec3 R)\n{\n    vec4 sliderVal = texture(tex,vec2(0,0));\n\ta.x  = sliderVal[0]*2.0-1.0;\n\tB.x  = sliderVal[1]*2.0-1.0;\n\ty.x  = sliderVal[2]*2.0-1.0;\n\td.x  = sliderVal[3]*2.0-1.0;\n    sliderVal = texture(tex,vec2(2,2)/R.xy);\n\ta.y  = sliderVal[0]*2.0-1.0;\n\tB.y  = sliderVal[1]*2.0-1.0;\n\ty.y  = sliderVal[2]*2.0-1.0;\n\td.y  = sliderVal[3]*2.0-1.0;\n    \n    if(length(fragCoord.xy-vec2(0,0))>1.)\n    {\n    \treturn texture(tex,fragCoord.xy/R.xy);\n    }\n    return vec4(0);\n}\n\nfloat particles = 1e3;\n\nfloat lineDist(vec2 z, vec2 a, vec2 b){\n    \n    z -= a; b -= a;                        // go to A referential\n    float q = dot(z, b) / dot(b, b) ;      // projection of P on line AB: normalized ordinate\n    b *= clamp(q, 0., 1.);                 // point on segment AB closest to P \n\n    \n    return length( z - b);\n}\n\nstruct line {\n    vec2 A;\n    vec2 B;\n    float w;\n    vec3 color;\n}; \n\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//Convert uniform random to normal\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(r.x));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\nline getLine(float id, vec3 R, float T, sampler2D tex){\n    vec2 ar = R.y/R.xy;\n    //vec4 r1 = hash44(vec4(0,0,0,mod(id,50.)));\n    //vec4 r2 = hash44(vec4(0,0,0,id+floor(1.+r1.x*10.)));\n    return line(vec2(.25/ar.x,.5)+.3*ar*texture(tex,(.5+vec2(mod(id,200.),floor(id/200.)))/R.xy).xy,\n                +vec2(.25/ar.x,.5)+.3*ar*texture(tex,(.5+vec2(mod(1.+id,200.),floor((1.+id)/200.)))/R.xy).xy\n                ,1.4,vec3(.75+.25*cos(4.+vec3(4,5,6)*id/float(2<<iter))));\n   // return line(.5+(randn(r1.zw)*R.y/4.)/R.xy, .5+(randn(r2.zw)*R.y/4.)/R.xy, 1., vec3(1));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\nThe idea behind stochastic routing is to route information to all relevant \ndestinations by passing everything through a series of layers, taking a stochastic\npath, such that the information gets closer and closer to the destination over \neach layer. For graphics, the destination is one of the pixels rendered in image,\nand the information is the parameters of an obect to be drawn. In this example, a \npoint is stored as a vec2 and rendered as a gaussian.\n\nEach layer of computation, stored in channels x,y,z,w of this buffer, randomly\nsamples 10 points stored in the previous layer. Only the one closest to the fragCoord\nis saved, this satisfies that information gets closer to the destination over \neach layer. This is why normal distributions with shrinking sigma over the layers \nis used.\n\nAn id tag is passed through the channel output, which enables using one buffer to\nget a lot of passes in by pipelining through xyzw. Even more than 4 passes would be \npossible by using only 16 bits or so to store the tag to get twice the passes.\n\nNear the latter layers, the id tags become closer in fragCoord space to the pixels \nthat the associeted particles will be affected, so the final rendering pass only needs\nto scan a few nearby locations in order to find every relevant particle.\n\n\n*/\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    processSliders(i,iChannel0,R);\n    o = vec4(-1);\n    \n    \n    //Set the current best distance to infinity ish\n    float d=1e9;\n    for(int j = 0; j < 8; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        float id = floor(r.x * float(2<<iter))+.5;\n        line l = getLine(id,R,T,iChannel2);\n        float dp = lineDist(i,R.xy*l.A,R.xy*l.B)-l.w;\n        //vec2 t = getParticle(id,R);//Uniformly sample one of the particles\n\n        //float dp = length(i-t*R.xy);\n        //compute the length to see if it is closer than the current champion\n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.x = id;//Output the nearest points ID\n        }\n    }\n    //Repeat for each getParticle->x->y->z->w\n    d=1e9;\n    for(int j = 0; j < 8; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        //Sample using a shrinking normal distribution\n        float id = texture(iChannel1,(i+randn(r.zw)*27.)/R.xy).x;\n        line l = getLine(id,R,T,iChannel2);\n        float dp = lineDist(i,R.xy*l.A,R.xy*l.B)-l.w;\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.y = id;\n        }\n    }\n    \n    d=1e9;\n    for(int j = 0; j < 8; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        float id = texture(iChannel1,(i+randn(r.zw)*9.)/R.xy).y;\n        line l = getLine(id,R,T,iChannel2);\n        float dp = lineDist(i,R.xy*l.A,R.xy*l.B)-l.w;\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.z = id;\n        }\n    }\n    d=1e9;\n    \n    for(int j = 0; j < 8; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        float id = texture(iChannel1,(i+randn(r.zw)*3.)/R.xy).z;\n        line l = getLine(id,R,T,iChannel2);\n        float dp = lineDist(i,R.xy*l.A,R.xy*l.B)-l.w;\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.w = id;\n        }\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Buffer A : slider management (this is not required)\n\n#define saturate(x) clamp(x,0.0,1.0)\nvec4 sliderValX = vec4(0.75,0.5,.75,0.5); //Default slider values [0-1]\nvec4 sliderValY = vec4(0.25,0.5,.25,0.5); //Default slider values [0-1]\n\nvoid SLIDER_setValue(float idx, vec2 val)\n{\n    if(idx<0.) {return;}\n    else if(idx<0.25){ sliderValX[0] = saturate(val.x); sliderValY[0] = saturate(val.y);}\n    else if(idx<0.50){ sliderValX[1] = saturate(val.x); sliderValY[1] = saturate(val.y);}\n    else if(idx<0.75){ sliderValX[2] = saturate(val.x); sliderValY[2] = saturate(val.y);}\n    else if(idx<1.00){ sliderValX[3] = saturate(val.x); sliderValY[3] = saturate(val.y);}\n}\n\nvec2 SLIDER_getValue(float idx)\n{\n    if     (idx<0.25) return vec2(sliderValX[0],sliderValY[0]);\n    else if(idx<0.50) return vec2(sliderValX[1],sliderValY[1]);\n    else if(idx<0.75) return vec2(sliderValX[2],sliderValY[2]);\n    else if(idx<1.00) return vec2(sliderValX[3],sliderValY[3]);\n\telse return vec2(0.);\n}\n\nvoid SLIDER_init(vec2 mousePos, vec2 cMin, vec2 cMax )\n{\n    vec4 cPingPongY = texture(iChannel0,vec2(0));\n    vec4 cPingPongX = texture(iChannel0,vec2(2)/iResolution.xy);\n    if(length(cPingPongX)>0.001)\n        sliderValX = cPingPongX;\n    if(length(cPingPongY)>0.001)\n        sliderValY = cPingPongY;\n        \n    float width = cMax.x-cMin.x;\n    float height = cMax.y-cMin.y;\n    if(mousePos.x>cMin.x && mousePos.x<cMax.x &&\n       mousePos.y>cMin.y && mousePos.y<cMax.y )\n    {\n        vec2 t = (mousePos.xy-cMin.xy)/vec2(width/4.,height);\n        t.x=fract(t.x);\n        t = clamp(t/0.75-0.125,0.,1.); //25% top/bottom margins\n\t\tSLIDER_setValue((mousePos.x-cMin.x)/width, t);\n    }\n}\n\n//Returns the distance from point \"p\" to a given line segment defined by 2 points [a,b]\nfloat UTIL_distanceToLineSeg(vec2 p, vec2 a, vec2 b)\n{\n    //       p\n    //      /\n    //     /\n    //    a--e-------b\n    vec2 ap = p-a;\n    vec2 ab = b-a;\n    //Scalar projection of ap in the ab direction = dot(ap,ab)/|ab| : Amount of ap aligned towards ab\n    //Divided by |ab| again, it becomes normalized along ab length : dot(ap,ab)/(|ab||ab|) = dot(ap,ab)/dot(ab,ab)\n    //The clamp provides the line seg limits. e is therefore the \"capped orthogogal projection\", and length(p-e) is dist.\n    vec2 e = a+clamp(dot(ap,ab)/dot(ab,ab),0.0,1.0)*ab;\n    return length(p-e);\n}\n\n//uv = slider pixel in local space [0-1], t = slider value [0-1], ar = aspect ratio (w/h)\nvec4 SLIDER_drawSingle(vec2 uv, vec2 t, vec2 ar, bool bHighlighted)\n{\n    const vec3  ITEM_COLOR = vec3(1);\n    const vec3  HIGHLIGHT_COLOR = vec3(0.2,0.7,0.8);\n    const float RAD = 0.05;  //Cursor radius, in local space\n    const float LW  = 0.030; //Line width\n    float aa  = 14./iResolution.x; //antialiasing width (smooth transition)\n    vec3 selectionColor = bHighlighted?HIGHLIGHT_COLOR:ITEM_COLOR;\n    vec3 cheapGloss   = 0.8*selectionColor+0.2*smoothstep(-aa,aa,uv.y-t.y-0.01+0.01*sin((uv.x-t.x)*12.));\n    vec2 bottomCenter = vec2(0.5,0.0);\n\tvec2 topCenter    = vec2(0.5,1.0);\n    vec2 cursorPos    = vec2(0.0+t.x,t.y);\n    float distBar = UTIL_distanceToLineSeg(uv*ar, bottomCenter*ar, topCenter*ar);\n    distBar = min(distBar,UTIL_distanceToLineSeg(uv.yx*ar, bottomCenter*ar, topCenter*ar));\n    float distCur = length((uv-cursorPos)*ar)-RAD;\n    float alphaBar = 1.0-smoothstep(2.0*LW-aa,2.0*LW+aa, distBar);\n    float alphaCur = 1.0-smoothstep(2.0*LW-aa,2.0*LW+aa, distCur);\n    vec4  colorBar = vec4(mix(   vec3(1),vec3(0),smoothstep(LW-aa,LW+aa, distBar)),alphaBar);\n    vec4  colorCur = vec4(mix(cheapGloss,vec3(0),smoothstep(LW-aa,LW+aa, distCur)),alphaCur);\n    return mix(colorBar,colorCur,colorCur.a);\n}\n\n#define withinUnitRect(a) (a.x>=0. && a.x<=1. && a.y>=0. && a.y<=1.0)\nvec4 SLIDER_drawAll(vec2 uv, vec2 cMin, vec2 cMax, vec2 muv)\n{\n    float width = (cMax.x-cMin.x)/4.;\n    float height = cMax.y-cMin.y;\n    vec2 ar = vec2(1.0,1.0);\n    uv  = (uv -cMin)/vec2(width,height); //pixel Normalization\n    muv = (muv-cMin)/vec2(width,height); //mouse Normalization\n    if( withinUnitRect((uv*vec2(.25,1.))) )\n    {\n        vec2 t = SLIDER_getValue(uv.x/4.);\n\t\tbool bHighlight = withinUnitRect((muv*vec2(.25,1.))) && abs(floor(uv.x)-floor(muv.x))<0.01;\n\t\tuv.x = fract(uv.x); //repeat 4x\n\t\tuv = uv/0.75-0.125; //25% margins\n        return SLIDER_drawSingle(uv,t,ar,bHighlight);\n    }\n    return vec4(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cMinSliders = vec2(0.6,0.80);\n    vec2 cMaxSliders = vec2(1.0,1.00);\n    vec2 uvSliders = fragCoord.xy / iResolution.xy;\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    SLIDER_init(mousePos, cMinSliders, cMaxSliders);\n    vec4 cSlider = SLIDER_drawAll(uvSliders,cMinSliders, cMaxSliders, mousePos);\n\tfragColor = cSlider;\n    if(length(fragCoord.xy-vec2(0,0))<1.) \n        fragColor = sliderValY;\n    if(length(fragCoord.xy-vec2(2,2))<1.) \n        fragColor = sliderValX;\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fork of \"Stochastic Routing\" by rory618. https://shadertoy.com/view/Xd3BW8\n// 2018-06-04 01:06:52\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    \n    vec4 cSlider = processSliders(i,iChannel0,R);\n\tvec2 uv = i/R.xy;\n    o = vec4(0);\n    \n    for(int j = 0; j < iter; j++){//Rendering pass is just the last layer pass\n        \n        vec4 r = hash44(vec4(F,i,j));\n        r.zw = randn(r.zw);\n        float id = texture(iChannel1,(i+r.zw)/R.xy).w;\n\n\n            \n        if(id >= 0.){\n        \tline l = getLine(id,R,T,iChannel3);\n        \tfloat d = lineDist(i,R.xy*l.A,R.xy*l.B);\n            o = max(o,vec4(l.color,1)*clamp(l.w-d,0.,1.));\n        }\n        \n    }\n    o = mix(o,max(o,texture(iChannel2,uv)),.6);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 o, in vec2 i )\n{\n\tvec2 uv = i/R.xy;\n    processSliders(i,iChannel1,R);\n    float id = floor(i.x)+floor(i.y)*200.;\n    if(F<3){\n        o = vec4(Masayoshi(id/float(2<<iter),F),0.0,0.0);\n    } else {\n        \n    \to = texture(iChannel0,uv);\n        \n        \n        vec2 X = Masayoshi(id/float(2<<iter),F);\n        vec2 av = vec2(0);\n        for(float j = 0.; j < float(iter); j++){\n            vec2 A = Masayoshi((mod(id-pow(2.,j),float(2<<iter)))/float(2<<iter),F);\n            vec2 B = Masayoshi((mod(id+pow(2.,j),float(2<<iter)))/float(2<<iter),F);\n            float l1 = length(X-A);\n            float l2 = length(X-B);\n            vec4 L1 = (texture(iChannel0,(.5+vec2(mod(mod(id-pow(2.,j),float(2<<iter)),200.),floor((mod(id-pow(2.,j),float(2<<iter)))/200.)))/R.xy));\n            vec4 L2 = (texture(iChannel0,(.5+vec2(mod(mod(id+pow(2.,j),float(2<<iter)),200.),floor((mod(id+pow(2.,j),float(2<<iter)))/200.)))/R.xy));\n            o.zw -=((o.xy-L1.xy) * (length(o.xy-L1.xy)-l1) +\n            \t\t(o.xy-L2.xy) * (length(o.xy-L2.xy)-l2))/15.;\n            av += L1.zw+L2.zw;\n        }\n        /*vec2 A = .25+.5*DeRham((id-1.)/float(2<<iter));\n        vec2 B = .25+.5*DeRham((id+1.)/float(2<<iter));\n        vec2 C = .25+.5*DeRham((id-2.)/float(2<<iter));\n        vec2 D = .25+.5*DeRham((id+2.)/float(2<<iter));\n        float l1 = length(X-A);\n        float l2 = length(X-B);\n        float l3 = length(X-C);\n        float l4 = length(X-D);\n        vec4 L1 = (texture(iChannel0,(.5+vec2(mod(id-1.,R.x),floor((id-1.)/R.x)))/R.xy));\n        vec4 L2 = (texture(iChannel0,(.5+vec2(mod(id+1.,R.x),floor((id+1.)/R.x)))/R.xy));\n        vec4 L3 = (texture(iChannel0,(.5+vec2(mod(id-2.,R.x),floor((id-2.)/R.x)))/R.xy));\n        vec4 L4 = (texture(iChannel0,(.5+vec2(mod(id+2.,R.x),floor((id+2.)/R.x)))/R.xy));\n        o.zw -=((o.xy-L1.xy) * (length(o.xy-L1.xy)-l1) +\n            \t(o.xy-L2.xy) * (length(o.xy-L2.xy)-l2) +\n            \t(o.xy-L3.xy) * (length(o.xy-L3.xy)-l3) +\n            \t(o.xy-L4.xy) * (length(o.xy-L4.xy)-l4))/10.;\n        */\n        o.xy+=o.zw/2.;\n        o.zw*=.9;\n        //o.zw =o.zw*.95+.05*av/20.;\n        if(iMouse.z>0. && iMouse.y/R.y<.8){\n            vec2 ar = R.y/R.xy;\n            vec2 r = iMouse.xy-(vec2(.25/ar.x,.5)+.3*ar*o.xy)*R.xy;\n            float l = length(r);\n            o.zw += r * (.1/(10.+l));\n        }\n        /*if(length(o.xy)>2.){\n            o.zw=vec2(0);\n            o.xy=vec2(.5);\n        }*/\n    \t//o = texture(iChannel0,uv)*.5+o*.5;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}