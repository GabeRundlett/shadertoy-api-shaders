{
    "Shader": {
        "info": {
            "date": "1612491911",
            "description": "Doing some tests to understand how it works... links for more info below:\nhttps://medium.com/@OpenSeason/1946-germany-has-been-defeated-and-its-military-technology-put-under-the-microscope-the-west-e60b82926b40\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tt3BWn",
            "likes": 1,
            "name": "Missile Reticle Test!",
            "published": 3,
            "tags": [
                "rocket",
                "reticle",
                "gun",
                "missile",
                "segments",
                "war",
                "guidance"
            ],
            "usePreview": 0,
            "username": "Dutracgi",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "//Thanks to https://www.shadertoy.com/view/4tl3Dj for the stripes/sections!\n\nfloat circle(vec2 uv, vec2 off, float r){\n    float cir = pow(uv.x-off.x,2.) + pow(uv.y-off.y,2.);\n    return step(cir,pow(r,2.));\n}\nfloat counter =0.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(0.5,0.5);\n    //Aspect ratio correction\n    uv.x *= iResolution.x/iResolution.y;\n      \n    //Calculate the angle from the center + offset\n    uv+=vec2(0.3,0.);\n    vec2 uvo = uv + 0.1*vec2(cos(0.5*iTime),sin(0.5*iTime));\n    float angle = atan(uvo.y,uvo.x)+(2.*iTime);\n    \n    //8 strips representing the offset reticle.\n    vec3 intensity = vec3(step(0.01,sin(angle*8.0)) * circle(uvo,vec2(0),0.5));\n    \n    //Target position -> fixed\n    vec2 uvx = vec2(0.0);\n    \n    //Draw target\n    float cx = circle(uv,uvx,0.05);\n    intensity+= vec3(cx,-cx,-cx);\n    \n    //How to send the target intersection to my scope shader -> target over black strip = hit ?\n    \n    //if(hit) square wave = 1.0 else square wave = 0.0\n    \n    //https://www.shadertoy.com/view/wldfWr <- This one\n    \n    \n    //Set the final color\n    fragColor = vec4(intensity, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}