{
    "Shader": {
        "info": {
            "date": "1474534609",
            "description": "variation of experiments with circles.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlK3D1",
            "likes": 1,
            "name": "Sono's Circles 2",
            "published": 3,
            "tags": [
                "circles"
            ],
            "usePreview": 0,
            "username": "sonofbryce",
            "viewed": 507
        },
        "renderpass": [
            {
                "code": "#define CIRCLE_COUNT 16\t\t\t// number of circles drawn\n\nvec2 r;\n\nfloat drawCircle(vec2 center, float radius)\n{\n    return 1.0 - smoothstep(0.0, radius, length(r - center));\n}\n\nvoid disk(vec2 r, vec2 center, float radius, vec3 color, inout vec3 pixel) {\n\tif( length(r-center) < radius) {\n\t\tpixel = color;\n\t}\n}\n\n// from GLSL tut https://www.shadertoy.com/view/Md23DV\nvec3 drawRing(float circleRadius, float gap, float speed, float radius, vec3 cColor)\n{\n    vec3 color = vec3(0,0,0);\n    for (int i=0; i < CIRCLE_COUNT; i++ )\n    {\n        float j = float(i);\n\n        vec2 center = vec2( sin( (j * gap) + (iTime * speed)) * radius,\n                           cos( (j * gap) + (iTime * speed) ) * radius);\n        //color += vec3(drawCircle(center, circleRadius));\n        \n        //vec2 _cRadius = vec2(circleRadius);\n        \n        disk(r, center, circleRadius, cColor, color );\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    r =  2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 color = vec3(0,0.2,0.2);\n    float alpha = 1.0;\n    \n    float speed = 1.0 + sin(iTime * 0.001) * 2.0;\n    float radius = 0.1 + ( (1.0 + sin(iTime * speed)) * 0.1);\n    float gap = 6.28 / float(CIRCLE_COUNT);\n    \n    float circleRadius = 0.01 + ( (1.0 + sin(iTime * speed)) * 0.1);\n    float circleRadius1 = 0.01 + ( (1.1 + sin(iTime * speed)) * 0.08);\n    float circleRadius2 = 0.01 + ( (1.0 + sin(iTime * speed)) * 0.1);\n    float circleRadius3 = 0.01 + ( (1.0 + sin(iTime * speed)) * 0.1);\n    \n    float ringRadius1 = 0.1 + ( (1.0 + sin(iTime * speed)) * 0.1);\n    float ringRadius2 = 0.0 + ( (1.0 + sin(iTime * speed)) * 0.5);\n    float ringRadius3 = 0.1 + ( (1.0 + sin(iTime * speed)) * 0.3);\n    \n    \n    vec3 cColor1 = vec3(1.0, 0.0, 0.0);\n    vec3 cColor2 = vec3(0.0, 1.0, 1.0);\n    vec3 cColor3 = vec3(1.0, 0.0, 1.0);\n    \n    float colorShift1 = 0.5 + (1.0+sin(iTime*speed)) * 0.5;\n    float colorShift2 = 0.5 - (1.0+sin(iTime*speed)) * 0.5;\n    \n    cColor1.g = colorShift1 * 0.4;\n    cColor2.g = colorShift1;\n    cColor3.b = colorShift1;\n    \n    \n    \n    //color += drawRing(circleRadius, gap, speed, radius);\n    //color += drawRing(circleRadius, gap, speed, radius + 0.5);\n    \n    disk(r, vec2(0,0), 0.08 +circleRadius * 0.5, vec3(1.0, colorShift1, colorShift2), color );\n    \n    color += drawRing(circleRadius3, gap, speed * 0.5, ringRadius3 * 1.2, -cColor2 * 0.05);\n   \tcolor += drawRing(0.25 + circleRadius3 * 1.5, gap, -speed * 0.5, 1.0 + (ringRadius2 * 0.3), -cColor2 * 0.02);\n    \n    color += drawRing(circleRadius1, gap, speed, ringRadius1, cColor1);\n    color += drawRing(circleRadius2, gap, -speed, ringRadius2 + 0.1, cColor2);\n    color += drawRing(circleRadius3, gap, speed, ringRadius3 + 0.5, cColor3);\n    \n    \n    \n    fragColor = vec4(color, alpha);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}