{
    "Shader": {
        "info": {
            "date": "1583784036",
            "description": "Using the multi XOR sort to sort particles on a z-order curve. WIP",
            "flags": 32,
            "hasliked": 0,
            "id": "wtVXDc",
            "likes": 5,
            "name": "Some weird particle stuff",
            "published": 3,
            "tags": [
                "xor",
                "sort",
                "sorting",
                "parallel"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "// Fork of \"Bitonic sorting network\" by michael0884. https://shadertoy.com/view/ttVXDV\n// 2020-03-08 15:43:17\n\n//get particle id from id array\nvec2 getID(float id, float LI)\n{\n    id = clamp(id, 0., N*N-1.);\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x+LI*N,y)).xy;\n}\n\n\n//random binary array id search\nvec2 search(int zid, float LI)\n{\n    float L = 0., R = N*N-1.;\n    vec4 p;\n    float i = 0.;\n    while(L!=R && i < log2(N))\n    {\n        i++;\n    \tfloat lid = floor((L+R)/2.);\n        float zid0 = getID(lid, LI).y; \n        float k = 0.5;\n        if(float(zid) < zid0)\n        {\n            R = (1.-k)*lid+R*k;\n        }\n        else\n        {\n            L = (1.-k)*lid+L*k;\n        }\n    }\n    return vec2(L,R);\n}\n\nfloat gauss(float x, float r)\n{\n    x/=r;\n    return exp(-x*x);\n}\n\n#define R 8.\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    vec2 pn = floor(1.*p);\n    p = floor(vec2(1.,1.)*p);\n    if(pn.x < LN*N && pn.y < N)\n    {\n    \tvec2 a = texel(ch1, pn).xy;\n        fragColor.xyz = jet_range(a.y, 0., 3e9);\n    }\n    else\n    {\n        int zid = xy2z(p);\n        //render points using last LN particle sorts\n        for(float li = 0.; li < LN; li++)\n        {\n            vec2 lid = search(zid, li);\n            fragColor.xyz = vec3(0);\n            for(float i = lid.x;i <= lid.y; i++)\n            {\n                vec4 a0 = getParticle(getID(i, li).x);\n                fragColor.xyz += vec3(gauss(length(p - a0.xy), 2.));\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//particle buffer\n\n#define D 6.\n\n//get particle id from id array\nvec2 getID(float id, float LI)\n{\n    id = clamp(id, 0., N*N-1.);\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x+LI*N,y)).xy;\n}\n\n\n//random binary array id search\nvec2 search(int zid, float LI)\n{\n    float L = 0., R = N*N-1.;\n    vec4 p;\n    float i = 0.;\n    while(L!=R && i < log2(N))\n    {\n        i++;\n    \tfloat lid = floor((L+R)/2.);\n        float zid0 = getID(lid, LI).y; \n        float k = 0.5;\n        if(float(zid) < zid0)\n        {\n            R = (1.-k)*lid+R*k;\n        }\n        else\n        {\n            L = (1.-k)*lid+L*k;\n        }\n    }\n    return vec2(L,R);\n}\n\nvec2 nz(vec2 a)\n{\n    return (a.x == 0. && a.y == 0.)?vec2(0.):normalize(a);\n}\n\nvec2 cF(vec2 p)\n{\n    vec4 a = getParticle(p, vec2(0));\n    vec2 F = vec2(0.);\n   \n    int zid = xy2z(a.xy);\n    vec2 lid = search(zid, 0.);\n\n    for(float i = lid.x;i <= lid.y; i++)\n    {\n        vec4 a0 = getParticle(getID(i, 0.).x);\n        float d = distance(a0.xy, a.xy);\n        F += nz(a0.xy - a.xy)*abs(d - D)*exp(-0.08*d);\n    }\n    return F;\n    \n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    if(pos.x < N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch0, pos);\n        \n        vec2 F = -0.1*cF(pos);\n        if(iMouse.z > 0.) \n        {\n            float d = distance(iMouse.xy, U.xy);\n            F -= 5.*normalize(iMouse.xy - U.xy)/(sqrt(d)+2.);\n        }\n        \n        U.zw += dt*F;\n        U.zw *= 0.9;\n        U.xy += U.zw*dt;\n        \n \n        //this pixel value\n        if(iFrame<1)\n        {\n            \n            U.xy = D*pos;\n\t\t\tU.zw = hash22(3.14159*pos) - 0.5;\n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//definitions\n#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n//N^2 is the point number\n#define N 65.\n#define dt 0.4\n\n//save N last iterations\n#define LN 1.\n\n//hash functions\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p) - 0.5;\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)/(b-a),0.,1.) - 1.);\n}\n\n\nuniform sampler2D fake;\n\nvec4 getParticle(float id)\n{\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(fake, vec2(x,y));\n}\n   \nvec4 getParticle(vec2 id, vec2 did)\n{\t\n    vec2 nid = id+did;\n    if(max(nid.x, nid.y) < N && min(nid.x, nid.y) >=0.) \n    {\n    \treturn texel(fake, nid);\n    }\n    else\n    {\n        return texel(fake, id);\n    }\n  \n}\n//from https://www.shadertoy.com/view/3tj3Rc\n\nint MASKS[] = int[] (0x55555555, 0x33333333, 0x0F0F0F0F, 0x00FF00FF, 0x0000FFFF);\n\n//2d z-curve index\nint xy2z(vec2 U) {       // --- grid location to curve index\n    ivec2 I = ivec2(U*100.);\n    int n=8;\n    for (int i=3; i>=0; i--)\n        I =  (I | (I << n)) & MASKS[i],\n        n /= 2;\n    return I.x | (I.y << 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//sorting network\n\n//get particle id from id array\nfloat getID(float id)\n{\n    id = clamp(id, 0., N*N-1.);\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x,y)).x;\n}\n\nvec2 sort(float id, float pid)\n{\n    \n    float p0_id = getID(id);\n    float p1_id = getID(pid);\n\n    vec4 val0 = getParticle(p0_id);\n    vec4 val1 = getParticle(p1_id);\n    \n    //z-curve indecies\n    int zcurve0 = xy2z(val0.xy);\n    int zcurve1 = xy2z(val1.xy);\n\n    vec2 cmin = (zcurve0<zcurve1) ? vec2(p0_id, zcurve0): vec2(p1_id, zcurve1);\n    vec2 cmax = (zcurve0<zcurve1) ? vec2(p1_id, zcurve1): vec2(p0_id, zcurve0);\n\t\n    return (zcurve0==zcurve1)?vec2(p0_id, zcurve0):((pid > id) ? cmin : cmax); //swap sorted\n}\n\n//flip n bits\nfloat XORN(float x, float n)\n{\n    int X = int(x);\n    int pow2m1 = (1<<int(n+1.)) - 1;\n    return float(X^(pow2m1));\n}\n\nint imod(int x, int y)\n{\n    return x - y * int(floor(float(x)/float(y)));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{  \n    if(pos.x < N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch1, pos);\n        \n        float id = pos.x + pos.y*N;  \n        \n        int maxorder = int(ceil(log2(N*N)));\n\n        int frame = iFrame;\n        float order = float(imod(frame, maxorder));\n        float oe = float(imod(frame, 2));\n\n        //pair id\n        float pid = XORN(id+oe, order)-oe; \n\n        if(pid < N*N) //if inside the array\n        {\n            U.xy = sort(id, pid); //swap sorted\n        }\n\t\t\n        if(iFrame < 1)\n        {\n            U.x = id;\n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//sorting network\n\n//get particle id from id array\nfloat getID(float id)\n{\n    id = clamp(id, 0., N*N-1.);\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x,y)).x;\n}\n\nvec2 sort(float id, float pid)\n{\n    \n    float p0_id = getID(id);\n    float p1_id = getID(pid);\n\n    vec4 val0 = getParticle(p0_id);\n    vec4 val1 = getParticle(p1_id);\n    \n    //z-curve indecies\n    int zcurve0 = xy2z(val0.xy);\n    int zcurve1 = xy2z(val1.xy);\n\n    vec2 cmin = (zcurve0<zcurve1) ? vec2(p0_id, zcurve0): vec2(p1_id, zcurve1);\n    vec2 cmax = (zcurve0<zcurve1) ? vec2(p1_id, zcurve1): vec2(p0_id, zcurve0);\n\t\n    return (zcurve0==zcurve1)?vec2(p0_id, zcurve0):((pid > id) ? cmin : cmax); //swap sorted\n}\n\n//flip n bits\nfloat XORN(float x, float n)\n{\n    int X = int(x);\n    int pow2m1 = (1<<int(n+1.)) - 1;\n    return float(X^(pow2m1));\n}\n\nint imod(int x, int y)\n{\n    return x - y * int(floor(float(x)/float(y)));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{  \n    if(pos.x < N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch1, pos);\n        \n        float id = pos.x + pos.y*N;  \n        \n        int maxorder = int(ceil(log2(N*N)));\n\n        int frame = -2*iFrame;\n        float order = float(imod(frame, maxorder));\n        float oe = float(imod(frame, 2));\n\n        //pair id\n        float pid = XORN(id+oe, order)-oe;\n\n        if(pid < N*N) //if inside the array\n        {\n            U.xy = sort(id, pid); //swap sorted\n        }\n\t\t\n        if(iFrame < 1)\n        {\n            U.x = id;\n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//sorting network\n\n//get particle id from id array\nfloat getID(float id)\n{\n    id = clamp(id, 0., N*N-1.);\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x,y)).x;\n}\n\nvec2 sort(float id, float pid)\n{\n    \n    float p0_id = getID(id);\n    float p1_id = getID(pid);\n\n    vec4 val0 = getParticle(p0_id);\n    vec4 val1 = getParticle(p1_id);\n    \n    //z-curve indecies\n    int zcurve0 = xy2z(val0.xy);\n    int zcurve1 = xy2z(val1.xy);\n\n    vec2 cmin = (zcurve0<zcurve1) ? vec2(p0_id, zcurve0): vec2(p1_id, zcurve1);\n    vec2 cmax = (zcurve0<zcurve1) ? vec2(p1_id, zcurve1): vec2(p0_id, zcurve0);\n\t\n    return (zcurve0==zcurve1)?vec2(p0_id, zcurve0):((pid > id) ? cmin : cmax); //swap sorted\n}\n\n//flip n bits\nfloat XORN(float x, float n)\n{\n    int X = int(x);\n    int pow2m1 = (1<<int(n+1.)) - 1;\n    return float(X^(pow2m1));\n}\n\nint imod(int x, int y)\n{\n    return x - y * int(floor(float(x)/float(y)));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{  \n    if(pos.x < LN*N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch2, pos);\n        if(pos.x < N)\n        {\n            float id = pos.x + pos.y*N;  \n\n            int maxorder = int(ceil(log2(N*N)));\n\n            int frame = -2*iFrame-1;\n            float order = float(imod(frame, maxorder));\n            float oe = float(imod(frame, 2));\n\n            //pair id\n            float pid = XORN(id+oe, order)-oe;\n\n            if(pid < N*N) //if inside the array\n            {\n                U.xy = sort(id, pid); //swap sorted\n            }\n\n            if(iFrame < 1)\n            {\n                U.x = id;\n            }\n        }\n        else\n        {\n            if(imod(iFrame, 2) == 0)\n            {\n            \tfloat LI = pos.x/N;\n            \tU = texel(ch2, pos - vec2(N,0.)); //store last in next\n            }\n        }\n       \n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}