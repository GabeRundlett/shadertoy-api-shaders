{
    "Shader": {
        "info": {
            "date": "1656246336",
            "description": "Fragment shaders can't keep a running tally unfortunately! :(",
            "flags": 32,
            "hasliked": 0,
            "id": "fsdBzM",
            "likes": 0,
            "name": "Bad stackblur on the GPU",
            "published": 3,
            "tags": [
                "blur",
                "stackblur"
            ],
            "usePreview": 0,
            "username": "LoganDark",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    uvec2 start = uvec2(iResolution.xy * vec2(1.0/8.0));\n    uvec2 end = uvec2(iResolution.xy * vec2(7.0/8.0));\n    uvec2 ufragCoord = uvec2(fragCoord);\n    vec2 frac = mod(fragCoord, vec2(1));\n\n    if (all(greaterThanEqual(ufragCoord, start)) && all(lessThan(ufragCoord, end))) {\n        uvec2 radius = RADIUS;\n        uvec2 leading = min(radius, ufragCoord - start);\n        uvec2 trailing = min(radius, end - ufragCoord);\n\n        vec4 sumy = vec4(0);\n        uint dnomy = 0u;\n\n        for (uint y = 0u; y < leading.y + 1u + trailing.y; y++) {\n            uint contribution = radius.y + 1u - udiff(y, leading.y);\n            sumy += texture(iChannel0, (vec2(ufragCoord - uvec2(0, leading.y) + uvec2(0, y)) + frac) / iResolution.xy) * vec4(contribution);\n            dnomy += contribution;\n        }\n        \n        fragColor = linearToSrgb(sumy / vec4(dnomy));\n        //fragColor = linearToSrgb(vec4(vec2(leading + trailing) / 16.0 - 1.0, 0, 1));\n    } else {\n        fragColor = texture(iChannel0, (vec2(ufragCoord) + frac) / iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    uvec2 start = uvec2(iResolution.xy * vec2(1.0/8.0));\n    uvec2 end = uvec2(iResolution.xy * vec2(7.0/8.0));\n    uvec2 ufragCoord = uvec2(fragCoord);\n    vec2 frac = mod(fragCoord, vec2(1));\n\n    if (all(greaterThanEqual(ufragCoord, start)) && all(lessThan(ufragCoord, end))) {\n        uvec2 radius = RADIUS;\n        uvec2 leading = min(radius, ufragCoord - start);\n        uvec2 trailing = min(radius, end - ufragCoord);\n\n        vec4 sumx = vec4(0);\n        uint dnomx = 0u;\n\n        for (uint x = 0u; x < leading.x + 1u + trailing.x; x++) {\n            uint contribution = radius.x + 1u - udiff(x, leading.x);\n            sumx += srgbToLinear(texture(iChannel0, (vec2(ufragCoord - uvec2(leading.x, 0) + uvec2(x, 0)) + frac) / iResolution.xy)) * vec4(contribution);\n            dnomx += contribution;\n        }\n        \n        fragColor = sumx / vec4(dnomx);\n        //fragColor = linearToSrgb(vec4(vec2(leading + trailing) / 16.0 - 1.0, 0, 1));\n    } else {\n        fragColor = texture(iChannel0, (vec2(ufragCoord) + frac) / iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define RADIUS uvec2(64u)\n\nvec4 srgbToLinear(vec4 col) {\n    vec3 linear = col.rgb / 12.9232102;\n    vec3 exp = pow((col.rgb + 0.055) / 1.055, vec3(2.4));\n    return vec4(mix(linear, exp, greaterThan(col.xyz, vec3(0.0392857))), col.a);\n}\n\nvec4 linearToSrgb(vec4 col) {\n    vec3 linear = col.rgb * 12.9232102;\n    vec3 exp = pow(col.rgb, vec3(1.0 / 2.4)) * 1.055 - 0.055;\n    return vec4(mix(linear, exp, greaterThan(col.xyz, vec3(0.003039933))), col.a);\n}\n\nuint udiff(uint a, uint b) {\n    return a > b ? a - b : b - a;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}