{
    "Shader": {
        "info": {
            "date": "1576169127",
            "description": "Simple hair example.\nNo AA, No shadings, just bands with noise.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tdGW8",
            "likes": 3,
            "name": "[I3D'20] Hair dryer",
            "published": 3,
            "tags": [
                "i3d20"
            ],
            "usePreview": 0,
            "username": "I3D20_23",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 base = texture(iChannel0,uv); \n    fragColor = vec4(base.rgb,1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////\n// fields for figures //\n////////////////////////\n\n\nvec2 uv(vec2 p) \n{\n    //return p;\n\n    vec2 f = vec2(p) + 17.0*vec2(snoise(p.xy*vec2(0.015, -0.01) + 0.2*iTime), 0.0);\n    return f.xy;\n}\n\nvec2 d(vec2 p) \n{   \n    //return vec2(log_step); // uncomment to reveal distortion    \n\n    float delta = 1.0;\n    vec2  dudx  = ( uv(p - vec2(delta,0.0)) - uv(p + vec2(delta,0.0)) ) * 0.5 / delta;\n    vec2  dudy  = ( uv(p - vec2(0.0,delta)) - uv(p + vec2(0.0,delta)) ) * 0.5 / delta;\n    float du    = log_step / (0.000001 + length(vec2(dudx.x,dudy.x)));\n    float dv    = log_step / (0.000001 + length(vec2(dudx.y,dudy.y)));\n    du = max(log_step,du);\n    dv = max(log_step,dv);\n    return vec2(du,dv) * 1.;\n}\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\n//////////////////////////\n// forward declarations //\n//////////////////////////\n\nfloat spacing(float d);\nint getLocalID(float u, float d, out float ctr);\nuvec4 getGlobalID(int localID, float d);\nfloat getLocalIDCenter(uint id, float d);\n\nfloat quantize(float d);\nfloat up(float d);\nfloat down(float d);\nfloat interpolate(float d);\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\nfloat quantize(float d) {\n    return pow(log_step,floor(log(d)/log(log_step)));\n}\n\nint d2level(float d) {\n    return int(floor(log(d)/log(log_step)));\n}\n\nfloat level2d(int level) {\n    return pow(log_step,round(float(level)));\n}\n\nfloat interpolate(float d) {\n    int   level   = d2level(d);\n    float df      = level2d(level);\n    float dc      = level2d(level-1);    \n    float linear  = (d - df) / (df - dc) / log_step;\n    return smoothstep(0.0,1.0,linear);\n}\n\nfloat spacing(float d) {\n    return 1.0/d;   \n}\n\nfloat shift(float d) {\n    return d ;\n}\n\nfloat id2Lborder(int id, float d) {\n    return (float(id) +       (shift(d) / spacing(d)) ) * spacing(d);\n}\n\nfloat id2center(int id, float d) {\n    return (float(id) + 0.5 + (shift(d) / spacing(d)) ) * spacing(d);\n}\n\nint u2id(float u, float d) {\n    return int(floor( u / spacing(d) - (shift(d) / spacing(d)) ));\n}\n\nint u2closestLBorderId(float u, float d) {\n    int lid = u2id(u, d);\n    if (u < id2center(lid, d)) {\n        return lid;\n    } else {\n        return lid+1;\n    }\n}\n\nfloat u2closestBorder (float u, float d) {\n    return id2Lborder(u2closestLBorderId(u,d), d);\n}\n\n/**********************************************/\n\nvoid interpolatedBorders(int lid,float d,out float left,out float right)\n{\n    // fine and coarse densities\n    int   level = d2level(d);\n    float df    = level2d(level  );\n    float dc    = level2d(level-1);\n    // get the borders of the fine band\n    float lf_brdr = id2Lborder(lid, df);\n    float rf_brdr = id2Lborder(lid+1, df);\n    // get the closest coarser band borders\n    float lc_brdr = u2closestBorder(lf_brdr, dc);\n    float rc_brdr = u2closestBorder(rf_brdr, dc);\n    // interpolate between fine and coarse borders\n    float a     = interpolate(d);\n    left  = lf_brdr * a + lc_brdr * (1.0 - a);\n    right = rf_brdr * a + rc_brdr * (1.0 - a);\n}\n\n/**********************************************/\n\nint getLocalID(float u, float d) {\n    // fine and coarse densities\n    int   level = d2level(d);\n    float df    = level2d(level  );\n    float dc    = level2d(level-1);\n    // enclosing band id\n    int   lid     = u2id(u, df); \n    // get the interpolated borders\n    float left,right;\n    interpolatedBorders(lid,d,left,right);\n    // adjust enclosing band after interpolation\n    if      (u < left ) { \n        lid--;\n    } else if (u > right) {\n        lid++;\n    } \n    return lid;\n}\n\n/**********************************************/\n\nuvec4 setId(uvec4 id,uint bit) // 128 bits IDs\n{\n    if (bit > 127u) return id;\n    if (bit < 64u) {\n        if (bit < 32u) { // 0 - 31 (w) LSBs\n            return uvec4(id.x,id.y,id.z,id.w | (1u << bit));\n        } else {         // 32 - 63 (x)\n            return uvec4(id.x,id.y,id.z | (1u << (bit-32u)),id.w);            \n        }\n    } else {\n        if (bit < 96u) { // 64 - 95 (x)\n            return uvec4(id.x,id.y | (1u << (bit-64u)),id.z,id.w);            \n        } else {         // 96 - 127 (x) MSBs\n            return uvec4(id.x | (1u << (bit-96u)),id.y,id.z,id.w);            \n        }\n    }\n}\n\n/**********************************************/\n\nuvec4 getGlobalID(int lid, float d) {\n    uvec4 gid = uvec4(0u);\n    int start_level = d2level(d);\n    for (int level = start_level; level > 0; level--) {\n        float df      = level2d(level);\n        float dc      = level2d(level-1);\n        float lf_brdr = id2Lborder(lid  , df);\n        float rf_brdr = id2Lborder(lid+1, df);\n        // get the closest borders on the coarse bands\n        int lid_brdr = u2closestLBorderId(lf_brdr, dc);\n        int rid_brdr = u2closestLBorderId(rf_brdr, dc);\n        if (lid_brdr == rid_brdr) {\n            // this band is closing between parents, tag in ID (lower 96 bits)\n            gid = setId(gid,uint(96 - level));\n            lid  = u2id(lf_brdr, dc);\n            if (level == start_level) {\n                // the start band is appearing\n                //gid.x = uint(lid_brdr);\n                //return uvec4(0);\n            }\n        } else {\n            // move up to parent\n            lid  = lid_brdr;\n\n        }      \n    }\n    // parent ids go into the most significant 32 bits\n    gid.x = uint(lid);\n    return gid;\n}\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\n\nvec4 draw(vec2 p) {\n\n    vec2 u   = uv(p);\n    vec2 d   = d(p);\n    int lidA = getLocalID(u.x, d.x);\n    int lidB = getLocalID(u.y, d.y);\n\n    uvec4 gidA = getGlobalID(lidA, d.x);\n    uvec4 gidB = getGlobalID(lidB, d.y);\n\n    float lA,rA;\n    interpolatedBorders(lidA,d.x,lA,rA);\n    float distCtrA = abs(u.x - (lA+rA)*0.5);\n\n    vec4 hairColor = vec4(0.78,0.62,0.45,gidA.x) * vec4(vec3(0.8+0.3*snoise(15.0*vec2(distCtrA,float(gidA)))),1.0);\n\n    hairColor -= vec4(float(gidA.y >> 27) * 0.005)  - vec4(fract(float(gidA.x) * 3.14) * 0.04);\n    hairColor.w = float(gidA);\n\n    float dist = (1.0*u.y + u.x*0.05 - 10.0 + 15.0*snoise(10.0*vec2(distCtrA ,float(gidA)))) / 10.0;\n\n    dist = clamp(dist, 0.0, 1.0);\n    \n    if (gidA.x < 25u || gidA.x > 55u) {\n       return vec4(1.0); \n    }\n    \n    return dist * hairColor + (1.0-dist) * vec4(1.0);\n}\n\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 p = 40.0 * fragCoord / iResolution.y ;\n    fragColor = draw( p );\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Must stay between 1.3 and 2.0\nconst float log_step = 1.41;\n\n\n\n\n// Noise from https://www.shadertoy.com/view/4sdGD8\nlowp vec3 permute(in lowp vec3 x) { return mod( x*x*34.+x, 289.); }\nlowp float snoise(in lowp vec2 v) {\n    lowp vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n        x0 = (i.x+i.y)*.211324865405187 + v - i;\n    lowp float s = step(x0.x,x0.y);\n    lowp vec2 j = vec2(1.0-s,s),\n        x1 = x0 - j + .211324865405187, \n        x3 = x0 - .577350269189626; \n    i = mod(i,289.);\n    lowp vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n        m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n        x = fract(p * .024390243902439) * 2. - 1.,\n        h = abs(x) - .5,\n        a0 = x - floor(x + .5);\n    return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}