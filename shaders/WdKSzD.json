{
    "Shader": {
        "info": {
            "date": "1573545460",
            "description": "A simple page flip using a rolling cylinder. Not optimized.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdKSzD",
            "likes": 23,
            "name": "Flip Page",
            "published": 3,
            "tags": [
                "flip",
                "page"
            ],
            "usePreview": 0,
            "username": "hypnothalamus",
            "viewed": 2333
        },
        "renderpass": [
            {
                "code": "/* \n\t\"Flip Page\" by Lucian Stanculescu - 2019\n\tFree to use, credit if you want/can.\n\n\tA simple page flip - the page wraps around a rolling cylinder\n \n\tIMPROVEMENTS\n\t- normals and lighting\n\t- compute time when page exits completely\n\t- use a cone instead of the cylinder with changing radius/height/orientation\n*/ \n\n#define r 0.3\n#define rep 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float R = r * iResolution.x; // radius of rolling cylinder\n    \n    float v = 1.5 * iResolution.x / rep;\n    \n    float time = fract(iTime / rep);\n    \n    vec2 s = fragCoord; // pixel coordinates\n    \n    vec2 u = normalize(vec2(5.0, 1.0)); // direction of movement\n    \n    vec2 o = vec2(time *rep* v, 0.0); // origin of cylinder\n    \n    float d = dot(s - o, u); // distance to generator of cylinder\n    \n    vec2 h = s - u * d; // projection on generator\n    \n    bool onCylinder = abs(d) < R;\n    \n    float angle = onCylinder ? asin(d / R) : 0.0;\n    \n    bool neg = d < 0.0;\n    \n    float a0 = 3.141592653 + angle;\n    \n    float a = onCylinder ? (neg ? -angle : (3.141592653 + angle)) : 0.0; // angle\n    \n    float l = R * a; // length of arc\n    \n    vec2 p = h - u * l; // unwrapped point from cylinder to plane\n    \n    bool outside = any(lessThan(p, vec2(0.0))) || any(greaterThan(p, iResolution.xy));\n    \n    bool previous = (!onCylinder ||outside) && neg;\n    \n    bool page = !onCylinder || outside;\n    \n    vec4 color;\n    if (page) \n        color = texture(iChannel0, fragCoord / iResolution.xy);\n    else\n        color = texture(iChannel0, p / iResolution.xy);\n    color *= (previous ? mix(0.1, 1.0, time): 1.0);\n \n    l = R * a0; // length of arc\n    \n    p = h - u * l; // unwrapped point from cylinder to plane\n    \n    outside = any(lessThan(p, vec2(0.0))) || any(greaterThan(p, iResolution.xy));\n    \n    color = outside || !onCylinder ? color : texture(iChannel0, p / iResolution.xy);\n    \n    // Output to screen\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}