{
    "Shader": {
        "info": {
            "date": "1570995660",
            "description": "Showcases artifacts for vertex colors on triangles versus linear interpolation on quad.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsVGDV",
            "likes": 3,
            "name": "Barycentric vs. Quad",
            "published": 3,
            "tags": [
                "barycentric",
                "interpolation"
            ],
            "usePreview": 0,
            "username": "hanfling",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 Colors[4];\n    \n    Colors[0] = vec4(1.0,0.0,0.0,1.0);\n    Colors[1] = vec4(0.0,1.0,0.0,1.0);\n    Colors[2] = vec4(0.0,0.0,1.0,1.0);\n    Colors[3] = vec4(1.0,0.5,0.0,1.0);\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 UV = fragCoord/iResolution.xy;\n    UV.t = 1.0-UV.t;\n    \n    vec4 LinearResult = mix(mix(Colors[0],Colors[1],UV.s),mix(Colors[2],Colors[3],UV.s),UV.t);\n    vec4 BarycentricResult;\n    \n    if ( (1.0-UV.s)>UV.t )\n    {\n        float Areas[3];\n        Areas[0] = 0.5*length(cross(vec3(1.0,0.0,0.0),vec3(UV,0.0)));\n        Areas[1] = 0.5*length(cross(vec3(0.0,1.0,0.0),vec3(UV,0.0)));\n        Areas[2] = 0.5-Areas[0]-Areas[1];\n\n        float Weights[3];       \n        Weights[0] = Areas[0]/0.5;\n        Weights[1] = Areas[1]/0.5;\n        Weights[2] = Areas[2]/0.5;\n\n    \tBarycentricResult = Weights[0]*Colors[2]+Weights[1]*Colors[1]+Weights[2]*Colors[0];\n    }\n    else\n    {\n        float Areas[3];\n        Areas[0] = 0.5*length(cross(vec3(1.0,0.0,0.0),vec3(vec2(1.0)-UV,0.0)));\n        Areas[1] = 0.5*length(cross(vec3(0.0,1.0,0.0),vec3(vec2(1.0)-UV,0.0)));\n        Areas[2] = 0.5-Areas[0]-Areas[1];\n\n        float Weights[3];       \n        Weights[0] = Areas[0]/0.5;\n        Weights[1] = Areas[1]/0.5;\n        Weights[2] = Areas[2]/0.5;\n\n    \tBarycentricResult = Weights[0]*Colors[1]+Weights[1]*Colors[2]+Weights[2]*Colors[3];\n    }\n\n    fragColor = mix(LinearResult,BarycentricResult,pow(0.5+0.5*cos(2.0*iTime),4.0));\n    //fragColor = BarycentricResult;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}