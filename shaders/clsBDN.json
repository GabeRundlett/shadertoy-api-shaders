{
    "Shader": {
        "info": {
            "date": "1693030432",
            "description": "* Gradient Noise\n* Fade-in \n",
            "flags": 32,
            "hasliked": 0,
            "id": "clsBDN",
            "likes": 8,
            "name": "Perly Dance",
            "published": 3,
            "tags": [
                "gradientnoise"
            ],
            "usePreview": 0,
            "username": "timestamp",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "//\n// Perly Dance\n//\n// (c) timestamp @ shadertoy.com\n//\n// POI\n//  * Gradient noise\n//  * Fade-in\n//\nvoid mainImage(out vec4 C, vec2 I) {\n    C = texelFetch(iChannel0, ivec2(I), 0);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n// Perly Dance\n//\n// (c) timestamp @ shadertoy.com\n//\n// POI\n//  * Gradient noise\n//  * Fade-in\n//\n\n#define Eps .00001\n#define NEps (2. * Eps)\n#define Pi 3.14159265\n\nfloat sqr(float x) { return x * x; }\nvec2 rot(vec2 p, float a) { return vec2(p.x * cos(a) - p.y * sin(a), p.y * cos(a) + p.x * sin(a)); }\nint idot(ivec3 a, ivec3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }\nivec3 bv(int i) { return ivec3(i & 1, (i >> 1) & 1, (i >> 2) & 1); }\n\nvec3 rn(ivec3 v) {\n    const ivec3 p0 = ivec3(3532822529u, 3839940361u, 2165740037u);\n    const ivec3 p1 = ivec3(3847243819u, 2322422897u, 2464623787u);\n    const vec2  c1 = vec2(Pi, Pi * .5) / 2147483648.;\n    v = v ^ 102;\n    vec2 w = vec2(ivec2(idot(v, p0), idot(v, p1))) * c1;\n    w.y *= w.y;\n    return vec3(cos(w.x) * cos(w.y), sin(w.x) * cos(w.y), sin(w.y));\n}\n\nvec3[8] rr;\nivec3 _iv = ivec3(2147483647);\n\nfloat per(vec3 v) {\n    float[8] g;\n    ivec3 iv = ivec3(floor(v));\n    vec3 fv = fract(v);\n    if (iv != _iv) {\n        _iv = iv;\n        for (int i = 0; i < 8; i++) rr[i] = rn(iv + bv(i));\n    }\n    fv *= fv * fv * ((fv * 6. - 15.) * fv + 10.);\n    for (int i = 0; i < 8; i++) g[i] = dot(fv - vec3(bv(i)), rr[i]);\n    return mix(mix(mix(g[0], g[1], fv.x), mix(g[2], g[3], fv.x), fv.y),\n        mix(mix(g[4], g[5], fv.x), mix(g[6], g[7], fv.x), fv.y), fv.z);\n}\n\nfloat f;\nfloat H;\nfloat cut = 1.;\nfloat F = .6;\n\nvec2 map(vec3 p) {\n    float sd0 = (per(p) + H + p.z * .02) * F;\n    float sd = max(abs(sd0) - .005, p.z - cut);\n    vec2 q = abs(fract(p.xz * 8.) / 8. - 1. / 16.);\n    float a = (iTime == 0. ? 1. : clamp(iTime * .33 - 4., 0., 1.));\n    float sd2 = length(q) - (f * .01 + .01) * a;\n    return vec2(max(sd, -sd2), sd0);\n}\n\nvec3 mapN(vec3 p) {\n    const vec2 e = vec2(1, -1) / sqrt(3.) * NEps;\n    vec4 s = vec4(map(p + e.xyy).x, map(p + e.yyx).x, map(p + e.yxy).x, map(p + e.xxx).x);\n    return normalize((s.xzy + s.www) - (s.yxx + s.zyz));\n}\n\nvoid mainImage(out vec4 C, vec2 I) {\n    float f = max(texelFetch(iChannel0, ivec2(0, 0), 0).x * .97,\n                  texelFetch(iChannel1, ivec2(260, 0), 0).x);\n    if (I == vec2(.5)) { C = vec4(f); return; }\n    f = clamp(f * 4. - .8, 0., 1.);\n    H = .25 + (f - .5) * .04 * sqrt(500. / iResolution.y);\n    if (iTime > 0.) {\n        H *= min(1., iTime / 20.);\n        F *= min(1., iTime / 10.);\n    }\n\n    vec3 ro = vec3(-2.4, -5, cut + 1. + cos(iTime * .2));\n    ro.xy = rot(ro.xy, iTime * .1);\n    vec2 sc = (I + I - iResolution.xy) / iResolution.y;\n    vec3 rd = -normalize(ro);\n    vec3 right = normalize(cross(rd, vec3(0, 0, 1)));\n    vec3 up = cross(right, rd);\n    rd = normalize(rd * 6. + right * sc.x + up * sc.y);\n\n    vec2 sd;\n    vec3 p;\n    float i, t = max(0., (cut - ro.z) / rd.z);\n    for (; i < 250. && (sd = map(p = ro + t * rd)).x >= Eps; i++, t += sd.x);\n    vec3 n = mapN(p);\n\n    vec3 dif = vec3(1);\n    if (sd.y < 0.) dif = vec3(0.541, 0.000, 0.188);\n    if (fract(p.z * 4.) < clamp((iTime-7.) * .25 * .07, 0., .07)) dif = vec3(0.251, 0.016, 0.443);\n    if (p.z >= cut - Eps) dif =  vec3(0.251, 0.016, 0.443); //  vec3(0.784, 0.149, 0.910);\n    if (iTime > 0. && p.z < 2. - iTime * .3) dif = vec3(0.251, 0.016, 0.443);\n    vec3 farC = f > .95 ? vec3(1., 0., 0.149) : vec3(0);\n    dif = mix(dif, farC, min(1., sqr(t / 20.)));\n\n    vec3 ld = normalize(vec3(-ro.y, ro.x, 7));\n    float lum = sqr(cos(n.z) * .4 + 1.2);\n    lum *= max(.1, dot(ld, n));    \n    C.xyz = pow(lum * dif, vec3(1. / 2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}