{
    "Shader": {
        "info": {
            "date": "1545050834",
            "description": "Original \"Hello World!\" ShaderToy Fragment Shader with lots and lots and lots and lots of comments and explanations.",
            "flags": 0,
            "hasliked": 0,
            "id": "wss3zH",
            "likes": 9,
            "name": "n00bz with b00bz",
            "published": 3,
            "tags": [
                "gradient",
                "gradation",
                "timebased"
            ],
            "usePreview": 0,
            "username": "_kitzume_",
            "viewed": 899
        },
        "renderpass": [
            {
                "code": "// FRAGMENT SHADER for ShaderToy\n\n///////////////////////////////////////////////\n//                                          //\n//         Code edited by ⫶⫷∶⊤⫓∪∩℮.       //\n//      Comments composed by ⫶⫷∶⊤⫓∪∩℮.     //\n//                                           //\n//////////////////////////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n /* fragCoord (or gl_fragCoord) is a special read-only input variable \n\twith global scope (available to both the CPU and the GPU). fragCoord\n\tcan only be referenced from within a fragment shader.\n */\n\n /* pixelCoord normalizes the x,y values of fragCoord to be between 0 and 1.\n\n\tThe x coordinate represents the horizontal value.\n\tWhen x = 0, the pixel is on the leftmost side of the screen.\n\tWhen x = 1, the pixel is on the rightmost side of the screen.\n\t\n\tThe y coordinate represents the vertical value.\n\tWhen y = 0, the pixel is at the bottom of the screen.\n\tWhen y = 1, the pixel is at the top of the screen.\n */\n    vec2 pixelCoord = fragCoord.xy/iResolution.xy; \n\n    \n /* color represents the mixed RGB color, which is later passed to fragColor\n\tcolor.r = red\n\tcolor.g = green\n\tcolor.b = blue\n */       \n\n    vec3 color;\n    \n    vec3 cyan = vec3(0.0, 2.0, 4.0);        \n\n\tfloat R = pixelCoord.x;\n    float G = pixelCoord.y;\n    float B = pixelCoord.x;\n\n // color = cyan ;\n // color = vec3(R,G,B) ;\n // color = vec3(iTime) ;\n\n // color = cos(cyan) ;\n // color = cos(vec3(R,G,B)) ;\n // color = cos(vec3(iTime)) ;\n\n // color = (iTime + vec3(R,G,B) + cyan) ;    \n // color = cos(iTime + vec3(R,G,B) + cyan) ;\n // color = 0.5 * cos(iTime + vec3(R,G,B) + cyan) ;\n    \n /* cosine returns a value from -1 to 1 */\n    \n\tcolor = 0.5 + 0.5 * cos(iTime + vec3(R,G,B) + cyan) ;\n    \n // color = 0.5 + 0.5*cos(iTime+pixelCoord.xyx+vec3(0,2,4)); \n\n // Output to screen\n\n    fragColor = vec4 (color,1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}