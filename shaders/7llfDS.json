{
    "Shader": {
        "info": {
            "date": "1651423885",
            "description": "30 Second timelapse:\nhttps://youtube.com/shorts/XJlf49QrPNc",
            "flags": 0,
            "hasliked": 0,
            "id": "7llfDS",
            "likes": 4,
            "name": "30 Minutes 4/4",
            "published": 3,
            "tags": [
                "3d",
                "normal"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "#define time iTime*0.1\n#define pi 3.14159265\n#define deg pi/180.\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    return max(abs(p.z)-s.z,max(abs(p.x)-s.x,abs(p.y)-s.y));\n}\n\nvec4 map(vec3 p) {\n    vec3 o = p;\n    p.y += 1.;\n    p.yz *= r2d(-0.5);\n    p.z -= 2.2;\n    p.xz *= r2d(time);\n    float d = p.y+1.;\n    float s = 3.;\n    float sd = 0.255;\n    //d = 100.;\n    p.y += s*1.2;\n    for (int i=0;i<20;i++) {\n        p.xz *= r2d(time*0.1+float(i)*0.01);\n        d = min(d,sdBox(p,vec3(s)));\n        s *= 0.73;\n        p.y -= s*0.5;\n    }\n    //d = min(d,sdBox(p,vec3(s)));\n    return vec4(p,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<33;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w;\n        dO += dS;\n        ii += 0.01;\n        if (dS < 0.001 || dO > 100.) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec3 calcNorm(vec3 p) {\n    vec2 h = vec2(0.001,0.);\n    return normalize(vec3( map(p-h.xyy).w-map(p+h.xyy).w,\n                           map(p-h.yxy).w-map(p+h.yxy).w,\n                           map(p-h.yyx).w-map(p+h.yyx).w ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd);\n    vec3 p = ro+rd*d.x;\n    vec3 n = calcNorm(p);\n    col += d.xxx/10.;\n    col -= n/10.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}