{
    "Shader": {
        "info": {
            "date": "1486990966",
            "description": "Whorl",
            "flags": 0,
            "hasliked": 0,
            "id": "lsXcRH",
            "likes": 9,
            "name": "Whorl",
            "published": 3,
            "tags": [
                "whorl"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 646
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nfloat camd,time;\n\t\nmat3 RotX(float a){a = radians(a); return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 RotY(float a){a = radians(a); return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 RotZ(float a){a = radians(a); return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n    \n/* original\nfloat fullAtan(vec2 p)\n{\n\tfloat a = 0.;\n\tif (p.x >= 0.) a = atan(p.x, p.y);\n    if (p.x < 0.) a = 3.14159 - atan(p.x, -p.y);\n    return a;\n}*/\n\n/* thanks to 4onen */\nfloat fullAtan(vec2 p)\n{\n    return step(0.0,-p.x)*3.1415926535 + sign(p.x) * atan(p.x, sign(p.x) * p.y);\n}\n\nfloat shape(vec2 p)\n{\n\treturn length(p); // cylindric revolute\n    //return max(abs(p.x), abs(p.y)); // quad revolute\n    //return max(abs(p.x)+p.y,-p.y); // trianular revolute\n}\n\nvec2 Whorl(vec3 p)\n{\n\tfloat a = fullAtan(p.xz)*16.; // axis y\n    \n    vec2 q = vec2(shape(p.xz),p.y) + vec2(-2., -0.25); // torus base space formula\n    \n    q *= mat2(cos(a),-sin(a),sin(a),cos(a)); // rot near axis y\n    \n\tfloat interior = length(q-vec2(mix(0.32,1.,sin(time * .5)*.5 + .5), 0)) - .72;\n\tvec2 res = vec2(interior, 1.);\n\t\n\tfloat exterior = length(q) -.38;\n\tif (res.x < exterior)\n\t\tres = vec2(exterior, 2.);\n\t\n    return res;\n}\n\nvec2 df(vec3 p)\n{\n    float plane = p.y + 8.;\n\tvec2 res = vec2(plane, 0.);\n\tp *= RotX(time * 75.) * RotY(time * 50.) * RotZ(time * 25.);\n\tvec2 obj = Whorl(p);\n\tif (obj.x < res.x)\n\t\tres = obj;\n\treturn res;\n}\n\n//FROM IQ Shader https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<100; i++ )\n    {\n\t\tfloat h = df( ro + rd*t ).x;\n        res = min( res, 8.*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    df(pos+eps.xyy).x - df(pos-eps.xyy).x,\n\t    df(pos+eps.yxy).x - df(pos-eps.yxy).x,\n\t    df(pos+eps.yyx).x - df(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 shade(vec3 ro, vec3 rd, float d, vec3 lp, vec3 lc, float li)\n{\n\tvec3 p = ro + rd * d;\n\tvec3 ld = normalize(lp-p);\n\tvec3 n = nor(p, 0.01);\n\tvec3 refl = reflect(rd,n);\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 );\n\tfloat sha = softshadow( p, ld, 0.5, 50. );\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. );\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\n\treturn ((diff * sha + fre + spe) * lc * li + spe) * sha;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord.xy;\n    vec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si)/si.y;\n\n    time = iTime;\n    camd = 3.;\n    if (iMouse.z > 0.)\n\t{\n\t\tcamd = 20. * iMouse.y / si.y; // distance to origin axis\n    }\n\t\n\tvec3 ro = vec3(cos(4.4), sin(2.2), sin(4.4)) * camd;\n  \tvec3 rov = normalize(vec3(0)-ro);\n    vec3 u = normalize(cross(vec3(0,1,0),rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float s = 1.;float d = 0.;\n    for(int i=0;i<100;i++)\n    {      \n        if (0.<log(d/s/1e5)) break;\n        s = df(ro+rd*d).x;\n        d += s * 0.5;\n    }\n   \n\tvec3 lp0 = ro;\n\t\n\tvec3 lc = vec3(0);\n\tfloat mat = df(ro+rd*d).y;\n\tif (mat < 2.5) lc = vec3(0.5,0.2,0.8);\n\tif (mat < 1.5) lc = vec3(0.2,0.5,0.8);\n\tif (mat < 0.5) lc = vec3(0.8,0.5,0.2);\n\n\tfragColor.rgb = shade(ro, rd, d, lp0, lc, 2.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}