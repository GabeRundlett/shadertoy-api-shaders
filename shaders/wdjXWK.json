{
    "Shader": {
        "info": {
            "date": "1555106495",
            "description": "Taking julia sets / cantor dust and transforming the heck out of them",
            "flags": 96,
            "hasliked": 0,
            "id": "wdjXWK",
            "likes": 6,
            "name": "Cantor Dust Dancing",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "demo",
                "set",
                "dust",
                "cantor"
            ],
            "usePreview": 0,
            "username": "Quontyn",
            "viewed": 705
        },
        "renderpass": [
            {
                "code": "// Some functions for complex arithmetic\nstruct Complex\n{\n\tfloat r;\n    float i;\n};\n\nComplex Add(Complex c1, Complex c2)\n{\n    return Complex(c1.r + c2.r, c1.i + c2.i);\n}\n\nComplex Mult(Complex c1, Complex c2)\n{\n    float r = c1.r * c2.r - c1.i * c2.i;\n    float i = c1.r * c2.i + c1.i * c2.r;\n    return Complex(r, i);\n}\n\nComplex Conjugate(Complex c)\n{\n    return Complex(c.r, -c.i);\n}\n\nfloat Magnitude(Complex p)\n{\n\treturn sqrt(p.r*p.r + p.i*p.i);\n}\n\n// Our polynomial function we are using for the fractal\n// It's the standard z^2 + c, but playing around with higher\n// powers can be fun as well\nComplex f(Complex p, Complex c)\n{\n\treturn Add(Mult(p, p), c);\n}\n\nvec4 Render(vec2 uv, float a, float b, int iterations, float off)\n{\n    // Use the image coordinate as our starting point\n\tComplex p = Complex(uv.x, uv.y);\n    \n    // Constant complex value for our mapping\n    // Change it over time so the fractal goes in between a filled julia\n    // set and cantor dust\n    Complex c = Complex(sin((iTime-off)*0.8) * 0.5, cos(iTime-off) * 0.5);\n    \n    // Distance for our orbital traps are based on audio\n    // Ie, all done in Buffer A\n    float dist = texture(iChannel0, vec2(0.,0.)).x * 5.0;\n    \n    // Apply our mapping and see if this point's orbit escapes\n    float total = 0.0f;\n    for (int i = 0; i < iterations; i++)\n    {\n        total += 5.0 * (a + float(i)*a*b) / float(iterations * iterations);\n        \n        // Loop exit check\n        float d = Magnitude(p);\n    \tif (d > dist)\n            break;\n        \n        // Mess with the constant every iteration.\n        // Scale it based on some spikey sine wave so it gives off\n        // that look like its moving to the beat.\n        p = Conjugate(p);\n        c = Add(c, Mult(f(p, c), Complex(pow(abs(sin((iTime-off)*0.8)), 75.0), pow(abs(sin(iTime-off)), 50.0))));\n        p = f(p, c);\n    }\n    \n    return vec4(total);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Convert coord to a complex coordinate\n    vec2 uv = (fragCoord - (iResolution.xy/2.0))/iResolution.x;\n    uv *= 4.0;\n    \n    // Rotate the entire scene\n    float a = iTime * 0.1;\n    mat2 r = mat2(cos(a), -sin(a), sin(a), cos(a));\n    uv = r * uv;\n    \n    // Render front layer\n    vec4 col = vec4(0.0);\n    col = Render(uv, 1.0, 1.0, 35, 0.0) * 9.0;\n    col = min(col.x, 10.0)/2.0 * vec4(abs(uv.x * 0.25), 0.3, 0.6, 1.0);\n    \n    // Do it again!\n    uv *= 0.5;\n    uv = r * uv;\n    vec4 col2 = Render(uv, 0.2, 100.0, 10, 0.4) * 0.25;\n    col2 = min(col2.x, 3.75)/9.0 * vec4(0.6, 0.3, uv.x, 1.0);\n    \n    // Some background color\n    vec4 col3 = 0.1 * vec4(0.6, Magnitude(Complex(uv.x, uv.y)) * 0.2, 0.6, 1.0);\n    \n    fragColor = col3 + col2 + col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Keep these values anywhere between 0-512\nconst int AUDIO_SAMPLE_START = 0;\nconst int AUDIO_SAMPLE_STOP = 125;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Sample audio buffer only once\n    if (fragCoord == vec2(0.5, 0.5))\n    {\n    \t// Save amplitude into this buffer\n        float total = 0.0;\n        for (int i = AUDIO_SAMPLE_START; i < AUDIO_SAMPLE_STOP; i++)\n        {\n            total += texelFetch(iChannel0, ivec2(i, 0), 0).x; \n        }\n        \n        // Average sample amplitude\n        fragColor = vec4(total / float(AUDIO_SAMPLE_STOP - AUDIO_SAMPLE_START));\n    }\n    else\n    {\n    \tfragColor = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 18329,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/daveedwardsofficial/future-generations-landscape-dave-edwards-remix"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}