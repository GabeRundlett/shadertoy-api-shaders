{
    "Shader": {
        "info": {
            "date": "1716008171",
            "description": "A raymarched sphere..?\n\nbuilt using Inigo Quilez's 3d sphere sdf.",
            "flags": 0,
            "hasliked": 0,
            "id": "4fcXW7",
            "likes": 2,
            "name": "NotSoGreeeen - Raymarched Sphere",
            "published": 3,
            "tags": [
                "balloon"
            ],
            "usePreview": 0,
            "username": "NotSoGreeeen",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "float sdSphere(vec3 p, float r)\n{\n  return length(p) - r;\n}\n\nfloat map( in vec3 pos )\n{\n    float ra = 0.4;\n\n\n    return sdSphere(pos, ra);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates.\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // rainbow color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    // black background\n    vec3 color = vec3(0.);\n    \n    \n    // camera movement\t\n\tfloat an = 1.5 * (iTime / 10.);\n\tvec3 ro = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );\n    // camera matrix\n    vec3 ww = normalize( -ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n\n    // create view ray\n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.5*ww );\n\n    // raymarch\n    const float tmax = 2.0;\n    float t = 0.0;\n    for(int i = 0; i < 256; i++)\n    {\n        vec3 pos = ro + t*rd;\n        float h = map(pos);\n        if(h < 0.0001 || t > tmax) break;\n        t += h;\n    }\n        \n    \n    // shading/lighting\t\n    if(t < tmax)\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n        float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n        color = col*amb + col*dif;\n    }\n\n    tot = color;\n    \n    tot = round(tot * 4.) / 4.;\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}