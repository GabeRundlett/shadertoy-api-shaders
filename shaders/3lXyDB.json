{
    "Shader": {
        "info": {
            "date": "1592892950",
            "description": "inspired by https://www.techspot.com/news/85622-nobody-sure-what-makes-atari-2600-game-entombed.html",
            "flags": 32,
            "hasliked": 0,
            "id": "3lXyDB",
            "likes": 3,
            "name": "cellular automata maze maker",
            "published": 3,
            "tags": [
                "feedback",
                "cellular",
                "maze"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rrr;\n\n    // Output to screen\n    fragColor = vec4(1.0 - col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float cellsize = 8.0;\n\n#define USE_RULE_110_INSTEAD_OF_30 1\n\nvec2 to_uv(in vec2 coord) {\n    return coord / iResolution.xy;\n}\n\nfloat val_at(vec2 coord, vec2 cells) {\n    vec2 uv = to_uv(coord + cellsize * cells);\n    return step(0.5, texture(iChannel0, uv).r);\n}\n\nfloat rule_30_val_at(vec2 coord, vec2 cells) {\n    vec2 uv = to_uv(coord + cellsize * cells);\n    return step(0.5, texture(iChannel0, uv).b);\n}\n\n\nfloat next_rule_30_val(in float a, in float b, in float c) {\n\t// active for 100, 011, 010, or 001\n    if (a > 0.5) {\n        if (b < 0.5 && c < 0.5) {\n            return 1.0;\n        }\n        return 0.0;\n    }\n    if (b > 0.5) {\n        return 1.0;\n    }\n    if (c > 0.5) {\n        return 1.0;\n    }\n    return 0.0;\n}\n\nfloat next_rule_110_val(in float a, in float b, in float c) {\n\t// active for all except 111, 100, 000\n    if (b < 0.5 && c < 0.5) {\n        return 0.0;\n    }\n    if (a > 0.5 && b > 0.5 && c > 0.5) {\n        return 0.0;\n    }\n    return 1.0;\n}\n\n//  d   e\n//  b   c\n//  a   *\nfloat next_val(in float a, in float b, in float c, in float d, in float e, in float local_rand) {\n    if (b < 0.5 && c < 0.5 && d < 0.5 && e < 0.5) {\n        return local_rand;\n    }\n    \n    if (b > 0.5 && c > 0.5 && d > 0.5 && e > 0.5) {\n        return (1.0 - a);\n    }\n    \n    if (a > 0.5 && b > 0.5 && c > 0.5 && (e > 0.5 || d > 0.5)) {\n        return 0.0;\n    }\n    \n    if (a > 0.5 && b > 0.5 && d > 0.5) {\n        return local_rand;\n    }\n    \n    if (c > 0.5 && (b > 0.5 || e > 0.5)) {\n        return 1.0;\n    }\n    \n    return local_rand;\n}\n    \n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 cell_pos = fragCoord - mod(fragCoord, vec2(cellsize)) + 0.5 * cellsize;\n\n    \n    \n    \n    if (iResolution.y - cell_pos.y <= 1.5 * cellsize) {\n        if (abs(iMouse.x - cell_pos.x) < 5.0 * cellsize) {\n\t        fragColor = vec4(1.0);\n        } else {\n            fragColor = vec4(vec2(0.0), step(cellsize, mod(2.1*cellsize + cell_pos.x, 7.0 * cellsize)), 1.0);\n        }\n        return;\n    }\n\n    if (iResolution.x - fragCoord.x <= cellsize || fragCoord.x <= 2.0 * cellsize) {\n        \n        fragColor = vec4(0.0, 0.0, step(3.0 * cellsize, mod(cell_pos.y, 5.0 * cellsize)), 1.0);\n        return;\n    }\n    \n    vec3 rule_30_vals = vec3(rule_30_val_at(cell_pos, vec2(-1.0,1.0)),\n                             rule_30_val_at(cell_pos, vec2(0.0, 1.0)),\n                             rule_30_val_at(cell_pos, vec2(1.0, 1.0)));\n\n#if USE_RULE_110_INSTEAD_OF_30 \n    float local_rand = next_rule_110_val(rule_30_vals.x, rule_30_vals.y, rule_30_vals.z);\n#else\n    float local_rand = next_rule_30_val(rule_30_vals.x, rule_30_vals.y, rule_30_vals.z);\n#endif\n    float a = val_at(cell_pos, vec2(1.0, 0.0));\n    float c = val_at(cell_pos, vec2(0.0, 1.0));\n    float b = val_at(cell_pos, vec2(1.0));\n    float e = val_at(cell_pos, vec2(0.0, 2.0));\n    float d = val_at(cell_pos, vec2(1.0, 2.0));\n    \n    // local_rand = 1.0 - a;\n    \n    float next_cell = next_val(a,b,c,d,e, local_rand);\n    fragColor = vec4(vec3(next_cell, 0.0, local_rand),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}