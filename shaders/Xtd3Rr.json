{
    "Shader": {
        "info": {
            "date": "1467688600",
            "description": "......:!**\\(^-^)/**!:......",
            "flags": 64,
            "hasliked": 0,
            "id": "Xtd3Rr",
            "likes": 4,
            "name": "Supershape Wave Circus ðŸ”Š",
            "published": 3,
            "tags": [
                "2d",
                "waves",
                "music",
                "superformula",
                "circus",
                "supershape"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 507
        },
        "renderpass": [
            {
                "code": "// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define SAMPLE_POINT_LOW vec2 (0.09, 0.1)\n#define SAMPLE_POINT_MID vec2 (0.3, 0.1)\n#define SAMPLE_POINT_HIGH vec2 (0.9, 0.3)\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\nfloat getBass () {   \n    return sampleMusic (iChannel0, SAMPLE_POINT_LOW); \n}\n\nfloat getMids() {\n    return sampleMusic (iChannel0, SAMPLE_POINT_MID); \n}\n\nfloat getTreble () {\n    return sampleMusic (iChannel0, SAMPLE_POINT_HIGH); \n}\n\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    float radius = iResolution.y / 9.;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 center = iResolution.xy / 2.;\n    vec2 d = fragCoord - center;\n    vec2 up = vec2 (0., 1.);\n    \n    float treble = getTreble();\n    float mids = getMids();\n    float bass = getBass();\n    \n    float t = iTime * 0.6 + 100.;\n    float tTrack = Gold*ptan(iChannelTime[0]+random(uv)) + 23.;// + 1000.;\n    float angle = angleBetween (up, d);\n     vec4 music = vec4(\n        2. * (treble) + 3.,\n        4. * (treble+mids)/2. + 7.,\n        1.3 * (treble) + 0.3,\n        1.0\n    );\n    vec4 nmusic = normalize(music);\n    \n    vec2 symmetry = vec2(2.3*mids + .7);\n    vec4 shape = createShape (tTrack, treble, bass, music);\n    float r = superformula (angle, shape, symmetry) * radius;\n    \n    float crazyPattern = tan (angle * tTrack + tTrack) + music.x;\n    \n    int mode = int(mod(t, 4.));\n    switch (mode) {\n        case(0):\n            fragColor = vec4(0.3, 0.1, 0.2*psin(tTrack)+0.7, 1.) * normalize(vec4 (crazyPattern));\n            break;\n        case(1):\n            fragColor = cos (length (music)) * crazyPattern * vec4 (InvGold);\n            break;\n        case(2):\n            fragColor = OneMinusInvGoldSquared * vec4(crazyPattern) + (1. - OneMinusInvGoldSquared) * vec4 (0.1);\n            break;\n        case(3):\n            fragColor = (1. - crazyNoise (music, vec2(crazyPattern), t)) * crazyPattern;\n            break;\n    }    \n    \n    if (length (d) < r) {\n        float dr = (r - length (d)) / length (d);\n        \n        vec4 c = normalize (shape);\n        //c.r = mix (1. - c.r, c.r, dr);\n        c.g = mix (0., 1. - c.g, dr);\n        c.b = 1. - c.b * dr;\n        //c.a = mix (0.6, 1., dr);\n        \n        fragColor = mix(c, fragColor, 1.-dr);\n    }   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 25258,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/blurryroots/sleeping-eight"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 355.0/113.0;\nconst float PI_HALF = .5 * PI;\nconst float TWO_PI = 2. * PI;\nconst float Gold = (1.0+sqrt(5.0)) / 2.0;\nconst float InvGold = 1. / Gold;\nconst float OneMinusInvGold = 1.0 - InvGold;\nconst float OneMinusInvGoldSquared = OneMinusInvGold * OneMinusInvGold;\n\nfloat psin(float x) {\n    return .5 * sin(x - PI_HALF) + .5;\n}\nvec3 psin(vec3 x) {\n    return vec3(psin(x.r), psin(x.g), psin(x.b));\n}\n\nfloat pcos(float x) {\n    return .5 * sin(x) + .5;\n}\nvec3 pcos(vec3 x) {\n    return vec3(pcos(x.r), pcos(x.g), pcos(x.b));\n}\n\nfloat ptan(float x) {\n    return .1 * tan(x - PI_HALF) + .5;\n}\nvec3 ptan(vec3 x) {\n    return vec3(ptan(x.r), ptan(x.g), ptan(x.b));\n}\n\nfloat random (vec2 co) {\n   return fract (sin (dot (co.xy, vec2 (12.9898,78.233))) * 43758.5453);\n}\n\nfloat sampleMusic(sampler2D channel, vec2 p) {\n    return normalize (texture (channel, p)).x; \n}\n\nfloat superformula (float angle, vec4 shape, vec2 symmetry) {    \n    float m = shape.x;\n    float n1 = shape.y;\n    float n2 = shape.z;\n    float n3 = shape.w;\n    float a = symmetry.x;\n    float b = symmetry.y;\n\n    float rpart = (m * angle) / 4.;\n    float apart = abs (cos (rpart) / a);\n    float bpart = abs (sin (rpart) / b);\n\n    float r = pow (\n        pow (apart, n2) + pow (bpart, n3),\n        -1. / n1\n    );\n    \n    return r;\n}\n\nfloat angleBetween (vec2 a, vec2 b) {\n    float cosTheta = dot (a, b) / (length (a) * length (b));    \n    return acos (cosTheta);\n}\n\nvec4 crazyNoise (vec4 music, vec2 fragCoord, float t) {    \n    vec4 noise = vec4 (\n        abs (tan (random (fragCoord + music.xy) + music.z)) + 0.1 * sin (t),\n        abs (sin (random (fragCoord + music.yx) + music.z)) + 0.1 * sin (t),\n        abs (tan (random (fragCoord + music.yx) + music.z)) + 0.1 * sin (t),\n        1.\n    );\n    \n    return noise;\n}\n\nvec4 createShape (float t, float treble, float bass, vec4 music) {    \n    float m = 1. + (mix (3., 0., bass) + mix (1., 0., music.z + treble));\n    float n1 = 1. + (mix (1., 0., bass) + mix (5., 0., music.z + treble));\n    float n2 = 1. + (mix (2., 0., bass) + mix (5., 0., music.z + treble));\n    float n3 = 1. + (mix (4., 0., bass) + mix (1., 0., music.z + treble));\n    \n    return vec4 (m, n1, n2, n3);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}