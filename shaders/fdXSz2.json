{
    "Shader": {
        "info": {
            "date": "1618844104",
            "description": "SPACE to toggle turbulence vs bozo noise.\nUsing controled-by-video lines width  drawing + flownoise\nflownoise variant of [url]https://shadertoy.com/view/NdXXRj[/url] ",
            "flags": 16,
            "hasliked": 0,
            "id": "fdXSz2",
            "likes": 10,
            "name": "flownoise-isolined Britney",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "perlin"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "// video-controled line width variant of https://shadertoy.com/view/NdXXRj\n// interpolated variant of https://shadertoy.com/view/sdsXzB\n\n#define keyToggle(a) ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n#define hash(p )     ( 2.* fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) - 1. ) \\\n                    *  mat2(cos(iTime+vec4(0,11,33,0)))\n  #define draw(v,d,w)  clamp(1. - abs( fract(v-.5) - .5 ) / (d)/(w), 0.,1.)             // method 1: loose \n//#define draw(v,d,w)  clamp(1. - ( abs( fract(v-.5) - .5 ) -.1*(w-1.) ) / (d), 0.,1.)  // method 2: strict\n#define hue(v)       ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n#define Mix(c0,c1,v)     mix(c0,c1,v)\n//#define Mix(c0,c1,v)   vec4(c0,c1,0,0) // debug \n\n//#define func( P )  ( mod(iTime,4.) > 2. ? perlin( .5*(P) ) : noise( P ) )\n  #define func( P )  ( keyToggle(32) ? noise( P ) : perlin( .5*(P) ) )\n#define grad(x,y)      dot( hash( i+vec2(x,y) ), f-vec2(x,y) )\n\nfloat noise( vec2 p )\n{\n    vec2 i = floor(p), f = fract(p), // u = f*f*(3.-2.*f);              // = smoothstep\n                                        u = f*f*f*( 10. +f*(6.*f-15.)); // better with derivatives\n    return mix( mix( grad(0,0), grad(1,0), u.x),\n                mix( grad(0,1), grad(1,1), u.x), u.y);\n}\n\nfloat perlin( vec2 U ) { // inspired from https://www.shadertoy.com/view/XdXGW8\n    float v = 0., s = .5;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    for( int i=0; i<3; i++, s/=2., U*=m )\n        v  += s * noise( U ); \n    return v;\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, eps = vec2(1e-3,0),\n         U = u / R.y,\n         P = 4.*u/360. - vec2(0.,.5*iTime);\t\n    O-=O;\n\tfloat l, dl, f = func(P), df, v,a;\n#if 0\n    l = exp2(floor(log2(2.*fwidth(P.x)/fwidth(f))));               // subvid amount (relative)\n    dl =     fract(log2(2.*fwidth(P.x)/fwidth(f)));      \n#else\n    l = exp2(floor(log2(.5/22./fwidth(f))));                       // subvid amount (absolute)\n    dl =     fract(log2(.5/22./fwidth(f)));\n#endif\n\n // f *= U.x;                                                      // draw isolines \n    df = fwidth(f);\n // df = length( vec2( ( func(P + eps.xy), func(P + eps.yx) ) -f ) / eps.x )*fwidth(P.x);\n    vec4 T = texture(iChannel0, u/R );\n    l *= 8.;\n# if 1\n    v = 4.*T.x;\n    O += Mix( draw(    f*l,    l*df , max(v,1.) ),\n              draw( 2.*f*l, 2.*l*df , max(v,1.) ),\n              dl ) * min(v,1.);\n    \n // O *= T/T.x;                                                    // color variant\n // O = mix( O, T, smoothstep(.2,.3,length(T-vec4(.14,.5,.1,1)) ));// isolines behind Britney\n // O = mix( O, T, smoothstep(.2,.4,T.x) );                        // frightening version :-p      \n\n# else                                                             // color on different layers\n#   define Draw(c,ofs)                                    \\\n      v = 3.*T.c;                                         \\\n      O.c = mix( draw(    f*l-ofs,    l*df, max(v,1.) ),  \\\n                 draw( 2.*f*l-ofs, 2.*l*df, max(v,1.) ),  \\\n                 dl ) * min(v,1.)\n    float ofs = .33;   // 0. : too subtle to see.\n    Draw(r, 0.);\n    Draw(g, ofs);\n    Draw(b, -ofs);\n# endif\n    \n    O = sqrt(O);                                                  // to sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}