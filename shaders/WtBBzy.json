{
    "Shader": {
        "info": {
            "date": "1599175057",
            "description": "020 Raving cubes",
            "flags": 64,
            "hasliked": 0,
            "id": "WtBBzy",
            "likes": 6,
            "name": "020 Raving cubes",
            "published": 3,
            "tags": [
                "raymarching",
                "sound"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "#define textureCube texture\n\n#define MAX_STEPS 100\n#define MAX_DIST 200.\n#define EPSILON 0.00001\n#define PI 3.14159265\n#define IVORY 1.\n#define BLUE 2.\n#define BLACK 3.\n#define RED 4.\n#define LIGHT 5.\n\n#define PHI (sqrt(5.)*0.5 + 0.5)\n#define iTime (iTime / 1.1)\n\n#define N 6\n\nfloat rnd (float x) {return fract(10000. * sin(10000. * x));}\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 boxTexture(vec3 p, float id) {\n    if (p.x + -p.z < 0.) {\n        p.xz = p.zx;\n        id += 1.;//1000. * rnd(id);\n    }\n    id = floor(id);\n    id = mod(id, 52.);\n    float col = mod(id, 10.);\n    float row = id - col;\n    p.x -= col * 2.;\n    p.y -= row * 2.;\n    p.xy -= 1.;\n    p.xy *= .05;\n    return vec3(1);//texture(iChannel0, p.xy).rgb;\n}\n\n\n\n\n\n// // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n// vec2 getDist(vec3 p) {\n//     // p.x += 0.04 * floor(p.y);\n//     p.y = fract(p.y);\n//     p.xz *= Rot(PI /4.);\n//     // p *= 8.;\n//     p.z = fract(p.z);\n//     p.z -= 0.5;\n//     p.xz *= Rot(PI /4.);\n//     float box1 = sdBox(p, vec3(0.353553));\n//     float obj = min(box1, box1);\n//     return vec2(obj * .6, RED);\n// }\n// // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nvec2 getDist(vec3 p) {\n\n    //p /= texture(iChannel0, vec2(smoothstep(0., 20., pow(length(p), .5)), 0.25)).x;\n    //p /= texture(iChannel0, vec2(smoothstep(0., 50., length(p)), 0.25)).x;\n    //p /= texture(iChannel0, vec2(1. / (length(p) / 10. + 1.), 0.25)).x;\n    p.xz *= Rot(2. * texture(iChannel0, vec2(smoothstep(0., 10., length(p)), 0.25)).x);\n\n    p.xz *= Rot(PI /4.);\n    vec3 step = vec3(1, 1.23, 1);\n    // p.x -= 1.8 * floor(p.y / step.y);\n    // p.x -= floor(p.y * iTime / 10.);\n    p.y -= 1.;\n    p.xy *= Rot(- PI / 4.);\n    p.y = mod(p.y, step.y);\n    p.y -= step.y / 2.;\n    // p.xz *= Rot(PI /4.);\n    p.xy *= Rot(PI / 2. - asin(sqrt(3.) / 3.));\n    p.z = fract(p.z);\n    p.z -= 0.5;\n    p.xz *= Rot(PI /4.);\n    float box1 = sdBox(p, vec3(0.353553));\n    float obj = min(box1, box1);\n    return vec2(obj * 0.4, RED);\n}\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\n\n\n\n\n\n\n\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    float info = 0.;\n    //float glow = 0.;\n    float step = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d);\n        step ++;\n        // volumeLight += .01;\n        d += abs(distToClosest.x);\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec3(d, info, step);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p).x - vec3(getDist(p - e.xyy).x,\n                               getDist(p - e.yxy).x,\n                               getDist(p - e.yyx).x);\n\treturn normalize(n);\n}\n\nvec3 getRayDirection (vec3 ro, vec2 uv, vec3 lookAt) {\n    vec3 rd;\n    rd = normalize(vec3(uv - vec2(0, 0.), 1.));\n    vec3 lookTo = lookAt - ro;\n    float horizAngle = acos(dot(lookTo.xz, rd.xz) / length(lookTo.xz) * length(rd.xz));\n    rd.xz *= Rot(horizAngle);\n    return rd;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // // isometry\n    // vec3 ro = vec3(uv.x, 10, uv.y) * 10.;\n    // // ro += vec3(10, 2, -2);\n    // // vec2 angle = 2. * 3.14159265 * iMouse.xy / iResolution.xy;\n    // vec3 lookat = vec3(0, -1, 0);\n    // ro.xz *= Rot(PI / 4.);\n    // ro.yz *= Rot(iTime);\n    // // ro.xz *= Rot(angle.x);\n    // vec3 rd = normalize(lookat);\n\n    // perspective\n    vec3 ro = vec3(0.00001, 5, 0.000001);\n    vec2 angle = 2. * 3.14159265 * iMouse.xy / iResolution.xy;\n    ro.yz *= Rot(-PI / 4.);\n    //ro.xz *= Rot(- PI / 2.);\n    vec3 lookat = vec3(0, 0, 0);\n    vec3 rd = getRayDir(uv, ro, lookat, 1.);\n\n    vec3 rm = rayMarch(ro, rd);\n    float d = rm[0];\n    float info = rm[1];\n    float steps = rm[2];\n\n    vec3 color;\n    color = vec3(1);\n    vec3 light = vec3(100, 100, 100);\n    // light.xz *= Rot(angle.x);\n    // light.yz *= Rot(angle.y);\n    //light.xz *= Rot(iTime);\n    vec3 p = ro + rd * d;\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        //n.zy *= Rot(iTime);\n    \t// color = vec3( n * 0.5 + 0.5 );\n\n        //color *= info;\n        // vec3 tex = boxmap(u_tex_bg, ro + rd * d, n, 32.0 ).xyz;//\n        // self shadeing\n        // drop shadows\n        // trying to raymarch to the light for MAX_DIST\n        // and if we hit something, it's shadow\n        vec3 dirToLight = normalize(light - p);\n        vec3 rayMarchLight = rayMarch(p + dirToLight * .06, dirToLight);\n        float distToObstable = rayMarchLight.x;\n        float distToLight = length(light - p);\n        // if (distToObstable < distToLight) {\n        //     color *=  0.;\n        // }\n\n        // smooth shadows\n        // float shadow = smoothstep(0.0, .15, rayMarchLight.z / PI);\n        // color += .1 + .9 * shadow;\n\n        // tex *= color_bw;\n        // color = tex;\n        // color += 0.6 + vec3( color_bw );\n        // coloring \n        if (d < MAX_DIST) {\n           if (info == RED) {\n                // color = boxTexture(p, iTime) + .1;\n                color *= dot(dirToLight, n) * .5 + .5;\n                //color = n * 0.5 + 0.5;\n                // color *= smoothstep(210., 200., d);\n            }\n        }\n    }\n\n    fragColor = vec4(color, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23842,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ilyabirman/studio-mix-synthopia"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}