{
    "Shader": {
        "info": {
            "date": "1579461402",
            "description": "hex kifs-ing",
            "flags": 32,
            "hasliked": 0,
            "id": "tly3R3",
            "likes": 14,
            "name": "Day 31 - Plojunb haspl",
            "published": 3,
            "tags": [
                "hex",
                "mdtmjvm"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 644
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5)*1.2,2.7)*0.7;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.4)*9.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.91;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    \n    fragColor = radial*1.; \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.9);\n    //fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*1.7));\n    fragColor *= 1. - dot(uvn,uvn)*1.8;\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define dmin(a, b) a.x < b.x  ? a : b\n#define dmax(a, b) a.x > b.x  ? a : b\n#define pi acos(-1.)\n#define iTime (iTime + pi*2.)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n#define mx (20.*iMouse.x/iResolution.y)\n\n\n\n// Hex code from BigWings! He has a tutorial on them.\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    return c;\n}\n\nvec4 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r*.5;\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    float x = atan(gv.x, gv.y);\n    float y = .5-HexDist(gv);\n    vec2 id = uv-gv;\n    return vec4(x, y, id.x,id.y);\n}\n\n\n#define pmod(p, x) mod(p, x) - x*0.5\n#define modDist 3.\n\nfloat id;\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e9);\n\n    id = floor(p.z/modDist);\n    \n    vec3 z = p;\n    /*\n    for (float i = 0.; i < 4.; i++){\n    \tp = abs(p);\n        \n        p.xy *= rot(0.9  + i*0.6 );\n        p.zy *= rot(0.04);\n        p.xz *= rot(0.04+ exp(-length(z.xy)*1.)*0.001);\n    \tp.y -= 0.9;\n        p.x += 0.9;\n        p.xy *= 1. - atan(p.x,p.y)*0.2;\n        //p.z -= 0.1;\n    }*/\n    p.xy *= rot(id*1.2 - iTime*0.5);\n\n    p.z = pmod(p.z, modDist);\n    for (float i = 0.; i < 9.; i++){\n    \tp = abs(p);\n        \n        //p.xy *= rot(0.9  + i*1.5 + id*0. );\n        p.xy *= rot(0.9  + i*1.8 + id*0. );\n        //p.y += 2.4 ;\n        p.zy *= rot(0.025 + sin(id)*0.03);\n        p.xz *= rot(0.02 + exp(-length(z.xy)*1.)*0.57 + sin(id*0.6)*0.01);\n        //p.x -= 0.02;\n    \t//p.y -= 0.9;\n        //p.x += 0.9;\n        //p.xy *= 1. - atan(p.x,p.y)*0.7;\n        //p.z -= 0.1;\n    }\n    \n\tvec4 hc = HexCoords(p.xy);\n    \n    \n    \n    d = dmin(d, vec2((hc.y - 0.12), 0.));\n    d.x = max(d.x, (abs(p.z) - 0.1));\n    \n    \n    d = dmin(d, vec2(\n        max((hc.y - 0.19), (abs(p.z) - 0.06))\n        , 1.));\n    \n    \n    \n    //d.x = max(d.x, );\n    \n    \n    \n    \n    \n    d.x *= 0.8;\n    return d;\n}\n#define fov 2.\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross(dir, right));\n\treturn normalize(dir + right*uv.x*fov + up*uv.y*fov);\n}\n\nvec3 glow = vec3(0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0,0,-2. + (iTime + mx)*5.);\n    vec3 lookAt = ro + vec3(0,0,1);\n    \n    lookAt.x += sin(iTime)*(0.25 + sin(iTime*0.5)*0.25)*0.3;\n    lookAt.y += cos(iTime)*(0.25 + sin(iTime*0.5)*0.25)*0.3;\n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    //rd.xy *= 1. - dot(uv,uv)*0.3;\n    rd.xy *= 1. - dot(uv,uv)*0.2;\n    rd = normalize(rd);\n    float t= 0.; vec3 p = ro;\n    #define iters 260.\n    for (float i = 0.; i < iters; i++){\n    \tvec2 d = map(p);\n        #define tau (2.*pi)\n        #define pal(a,b,g,c,d) ((a) + (b)*cos(tau*((g)*(c) + (d))))\n        float glowSc = exp(-d.x*20.);\n        vec3 glowCol = vec3(0);\n        if (d.y == 0.){\n            //glowCol = vec3(0.1,0.9,0.9);\n            glowCol = vec3(0.4);\n        } else {\n            //glowCol = vec3(0.7,0,1.7);\n            //glowCol = pal(0.9,0.9,0.5 + id*0.1,vec3(0.6,0.4,0.9), id*0.06 + length(uv.xy)*0.9 - length(p.xy)*0.04);\n            glowCol = pal(0.9,0.9,0.8,vec3(0.1,0.4,0.9), id*0.05 + length(uv.xy)*0.1 - length(p.xy)*0.1)*0.5;\n        \n        }\n        glow += glowSc * glowCol;\n        if (d.x < 0.001){\n            \n            break;\n        }\n        \n        if (t > 100.){\n        \tbreak;\n        }\n    \t\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n\tcol += glow*0.04;\n    //col *= 2.;\n    \n    \n    //col = smoothstep(0.,1., col);\n    //col = pow(col, vec3(0.45));\n\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}