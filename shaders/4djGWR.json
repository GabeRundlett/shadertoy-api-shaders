{
    "Shader": {
        "info": {
            "date": "1386313470",
            "description": "Another regular voxel renderer. When a voxel is hit, a distance field is raymarched inside the cell in order to shape it in any arbitrary shape. Looks cool with a video rather than a static texture ^_^",
            "flags": 1,
            "hasliked": 0,
            "id": "4djGWR",
            "likes": 192,
            "name": "Rounded Voxels",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefield",
                "voxel"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 38047
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// 1, 2, 3 or 1\n#define QUALITY 1\n#define VR\n\n#if QUALITY==1\n #define VIS_SAMPLES 4\n #define LIG_SAMPLES 10\n #define DETAIL_INTER 2\n#endif\n#if QUALITY==2\n #define VIS_SAMPLES 5\n #define LIG_SAMPLES 12\n #define DETAIL_INTER 2\n#endif\n#if QUALITY==3\n #define VIS_SAMPLES 8\n #define LIG_SAMPLES 12\n #define DETAIL_INTER 2\n#endif\n#if QUALITY==4\n #define VIS_SAMPLES 10\n #define LIG_SAMPLES 80\n #define DETAIL_INTER 2\n#endif\n\n\nfloat hash1( vec2  n ) { return fract(sin(dot(n,vec2(1.0,113.0)))*43758.5453123); }\nfloat hash1( vec3  n ) { return fract(sin(dot(n,vec3(1.0,113.0,257.0)))*43758.5453123); }\nvec2  hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }\nvec2  hash2( vec2  n ) { return fract(sin(n)*vec2(3758.5453123)); }\n\nfloat length2( in vec2 v ) { return dot(v,v); }\n\nvec3 path( float t )\n{\n    t *= 2.0;\n    vec2 p  = 100.0*sin( 0.010*t*vec2(1.0,1.2) + vec2(1.5,2.0) );\n\t     p +=  40.0*sin( 0.017*t*vec2(1.3,1.1) + vec2(3.0,0.0) );\t\n\treturn vec3( p.x, 0.0, p.y );\n}\n\n// voxel map\nfloat map( vec3 c ) \n{\n\tvec3 p = c + 0.5;\n\t\n\tfloat h = textureLod( iChannel0, fract(p.xz/iChannelResolution[0].xy), 0.0 ).x;\n    \n    float dm = 1e10;\n    for( int i=0; i<25; i++ )\n    {\n        vec2 pa = path( 60.0*float(i)/25.0 ).xz;\n        dm = min( dm, length2(pa-p.xz) );\n    }\n    \n    float isc = step( sqrt(dm), 5.0 );\n    \n    h = -10.0 + 16.0*h - 6.0*isc;//*(0.2 + h*2.0);\n    \n    h += 10.0*smoothstep( 0.9,0.91,textureLod( iChannel2, 0.25*fract(p.xz/iChannelResolution[2].xy), 0.0 ).x)*(1.0-isc);\n    \n\treturn h - p.y;\n}\n\n// distance field for each voxel\nfloat map2( in vec3 p, in float id )\n{\n    float w = 0.05 + 0.35*id;\n    return length(max(abs(p)-0.5+w,0.0))-w+0.001;\n}\n\nvec3 calcNormal( in vec3 pos, in float id )\n{\n    vec3 eps = vec3(0.01,0.0,0.0);\n\n\treturn normalize( vec3(\n           map2(pos+eps.xyy,id) - map2(pos-eps.xyy,id),\n           map2(pos+eps.yxy,id) - map2(pos-eps.yxy,id),\n           map2(pos+eps.yyx,id) - map2(pos-eps.yyx,id) ) );\n}\n\nfloat castRay( in vec3 ro, in vec3 rd, out vec3 oVos, out vec3 oDir )\n{\n\tvec3 pos = floor(ro);\n\tvec3 ri = 1.0/rd;\n\tvec3 rs = sign(rd);\n\tvec3 ris = ri*rs;\n\tvec3 dis = (pos-ro + 0.5 + rs*0.5) * ri;\n\tfloat t = -1.0;\n\t\n\tvec3 mm = vec3(0.0);\n\tfor( int i=0; i<256; i++ ) \n\t{\n\t\tif( map(pos)>0.0 ) \n\t\t{ \n            // intersect cube exactly\t\t\t\n\t\t\tvec3 pr = pos+0.5-ro;\n\t\t\tvec3 mini = (pr-0.5*rs)*ri;\n\t        float s = max( mini.x, max( mini.y, mini.z ) );\n\n            // raymarch internal shape\t\t\t\n\t\t\tfloat id = hash1( pos );\n\t\t\tfloat h = 0.0;\n\t\t\th = map2( -pr+rd*s, id ); s += max(0.0,h);\n\t\t\th = map2( -pr+rd*s, id ); s += max(0.0,h);\n\t\t\th = map2( -pr+rd*s, id ); s += max(0.0,h);\n\t\t\th = map2( -pr+rd*s, id ); s += max(0.0,h);\n\t\t\th = map2( -pr+rd*s, id ); s += max(0.0,h);\n\t\t\th = map2( -pr+rd*s, id ); s += max(0.0,h);\n\t\t\tif( h<0.025 )\n\t\t\t{\n\t\t\t\tt = s;\n\t\t\t\tbreak; \n\t\t\t}\n\t\t}\n\t\tvec3 mi = step( dis.xyz, dis.yzx ); \n\t\tmm = mi*(1.0-mi.zxy);\n\t\tdis += mm * ris;\n        pos += mm * rs;\n        \n        if( pos.y>21.0 ) break;\n\t}\n\n\toDir = mm;\n\toVos = pos;\n\n\treturn t;\n}\n\nfloat castShadowRay( in vec3 ro, in vec3 rd, out vec3 oVos )\n{\n\tvec3 pos = floor(ro);\n\tvec3 ri = 1.0/rd;\n\tvec3 rs = sign(rd);\n\tvec3 dis = (pos-ro + 0.5 + rs*0.5) * ri;\n\tvec3 ris = ri*rs;\n\t\n\tfloat res = 1.0;\n\n    // detailed raymarching\n    \n    for( int i=0; i<DETAIL_INTER; i++ ) \n\t{\n\t\tif( map(pos)>0.0 && i>0 )\n\t\t{\n            float id = hash1( pos );\n            vec3 mini = (pos-ro + 0.5 - 0.5*vec3(rs))*ri;\n            float t = max ( mini.x, max ( mini.y, mini.z ) );\n            float h = 0.0;\n            vec3 ce = pos + 0.5;\n            h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n            h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n            h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n            h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n            h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n            h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n            if( h<0.001 )\n            {\n                return 0.0;\n                res=0.0; \n                break; \n\t\t\t}\n\t\t}\n\t\tvec3 mi = step( dis.xyz, dis.yzx ); \n\t\tvec3 mm = mi*(1.0-mi.zxy);\n\t\tdis += mm * ris;\n        pos += mm * rs;\n\t}\n\t\n    // coarse raymarching\n\n\tfor( int i=0; i<(16-DETAIL_INTER); i++ ) \n\t{\n\t\tif( map(pos)>0.0 && i>0 )\n\t\t{\n            res=0.0; \n            break; \n\t\t}\n\t\tvec3 mi = step( dis.xyz, dis.yzx ); \n\t\tvec3 mm = mi*(1.0-mi.zxy);\n\t\tdis += mm * ris;\n        pos += mm * rs;\n\t}\n\t\n\toVos = pos;\n\t\n\treturn res;\n}\n\nvec3 getVoxelColor( in vec3 pos )\n{\n\tfloat id = hash1( pos.xz + 53.123  );\n\t\n\tfloat f = smoothstep( 0.8, 0.801, id );\n\tf *= smoothstep( 0.6, 0.8, sin(60.0*id + pos.y*0.3 + 2.0*iTime) );\n    \n\tvec3 col = 0.55 + 0.45*sin( 16.0*id + 0.0 + vec3(0.0,0.6,1.5) );\n\tcol = 0.9*normalize(col);\t\n\treturn f*col;\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in float ra )\n{\n    vec3 col = vec3(0.0);\n\n    // raymarch\t\n    vec3 vos, dir;\n    float t = castRay( ro, rd, vos, dir );\n    if( t>0.0 )\n    {\n        vec3 pos = ro + rd*t;\n        float id = hash1( vos );\n        vec3 nor = calcNormal( fract(pos)-0.5, id );\n\n        vec3 uvw = pos - vos;\n\n        // lighting\n        vec3 lin = vec3(0.0);\n        vec3 occ = vec3(0.0);\n        vec3 spp = vec3(0.0);\n        #if 1\n        vec3  ru  = normalize( cross( nor, vec3(0.0,1.0,1.0) ) );\n        vec3  rv  = normalize( cross( ru, nor ) );\n        for( int j=0; j<LIG_SAMPLES; j++ )\n        {\n            //vec2  aa = hash2( rr.x + float(j)*203.1 );\n            vec2  aa = hash2( ra + float(j)*vec2(201.19,13.75) );\n            float ra = sqrt(aa.y);\n            float rx = ra*cos(6.2831*aa.x); \n            float ry = ra*sin(6.2831*aa.x);\n            float rz = sqrt( 1.0-aa.y );\n            vec3  rr = rx*ru + ry*rv + rz*nor;\n\n            vec3 rpo = vec3( 0.0 );\n            float sha = castShadowRay( pos, rr, rpo );\n\n            vec3 irr = (1.0-sha) * getVoxelColor( rpo );\n            lin += irr;\n            spp += irr * pow( clamp( dot(reflect(rd,nor),rr), 0.0, 1.0 ), 12.0 );\n            occ += sha;\n        }\n        float is = 1.0/float(LIG_SAMPLES);\n        lin *= is;\n        occ *= is;\n        spp *= is;\n        #else\t\t\n        lin = vec3(0.0);\n        occ = vec3(1.0) * (0.6 + 0.4*nor.y);\n        spp = vec3(0.0);\n        #endif\t\t\n\n        // material\t\t\t\n        vec3 mate = getVoxelColor( vos );\n        vec3 tex = (0.5+0.5*texture( iChannel0, fract(vos.xz/iChannelResolution[0].xy), -100.0 ).xyz);\n        float spe = pow( clamp( -dot(nor,rd), 0.0, 1.0 ), 28.0 );\n        \n        //\n        tex *=  0.15 + 0.85*id;\n        tex = mix( tex, vec3(0.0,0.1,0.3)*0.1, step(0.8,id) );\n        \n        vec3 tt = texcube( iChannel0, 0.5*pos + id*111.143, nor ).xyz;\n        tex *= 0.4 + 1.2*tt;\n\n        // final color\t\t\t\n        col = vec3(0.0);\n        col += 1.800*mate;\n        col += 4.000*lin*(mate+tex);\n        col += 0.040*occ*(mate+tex) * 6.0*(0.5+0.5*nor.y) * 0.75;\n        col += 70.000*spe*(mate+tex)*lin*occ * 0.6;\n        col += spp * 9.0 * (0.2+1.6*tt.x) * occ;\n        col *= 1.8;\n\n        // fog\t\t\t\n        float ff = 1.0 - smoothstep( 160.0, 256.0, t*1.73 );\n        ff *= exp( -0.01*t );\n\n        col = mix( col, vec3(0.0), 1.0-ff );\n    }\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, in float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // inputs\t\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    if( iMouse.w<=0.00001 ) mo=vec2(0.0);\n\t\n\t// montecarlo\t\n\tvec3 tot = vec3(0.0);\n#if VIS_SAMPLES<2\n\tint a = 0;\n\t{\n\t\tvec4 rr = texture( iChannel1, (iTime*60.0*vec2(7.0,13.0)+fragCoord)/iChannelResolution[1].xy  ).xzyw;\n        vec2 p = -1.0 + 2.0*(fragCoord.xy) / iResolution.xy;\n#else\n\tfor( int a=0; a<VIS_SAMPLES; a++ )\n\t{\n\t\tvec4 rr = texture( iChannel1, (iTime*60.0*vec2(7.0,13.0)+fragCoord+103.3137*float(a))/iChannelResolution[1].xy  ).xzyw;\n        vec2 p = -1.0 + 2.0*(fragCoord.xy+rr.xz) / iResolution.xy;\n#endif\t\n\n        p.x *= iResolution.x/ iResolution.y;\n\n        float time = iTime + 1.0*(0.5/24.0)*rr.y + 50.0*mo.x;\n\n\t\t// camera\n        vec3 ro = path( time );\n        vec3 ta = path( time+2.0 );\n        #ifndef VR\n        ta.y -= 0.5;\n        float cr = 0.2*cos(0.09*time);\n        #else\n        float cr = 0.0;\n        #endif\n\t\n        float r2 = p.x*p.x*0.32 + p.y*p.y;\n        p *= (7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n\n        // build ray\n        mat3 cam = setCamera( ro, ta, cr );\n        vec3 rd = cam * normalize( vec3(p,-3.0) );\n\n        // dof\n        #if VIS_SAMPLES>2\n        vec3 fp = ro + rd * 8.0;\n        //ro += (uu*(-1.0+2.0*rr.x) + vv*(-1.0+2.0*rr.w))*0.02;\n        //rd = normalize( fp - ro );\n        #endif\n\t\t\n\t\tvec3 col = render( ro, rd, rr.y );\n\n        tot += col;\n\t}\n\ttot /= float(VIS_SAMPLES);\n\t\t\n\t// gamma\t\n\ttot = pow( clamp( tot, 0.0, 1.0 ), vec3(0.45) );\n\n\t// vignetting\t\n\ttot *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n\tfragColor = vec4( tot, 1.0 );\n}\n    \n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n\tfloat ra = texture( iChannel1, (/*vec2(iRands.xy)*/ + iTime*60.0*vec2(7.0,13.0)+fragCoord)/iChannelResolution[1].xy  ).x;\n    \n    float time = iTime;\n\n    // camera\n    vec3 ro = path( time );\n    vec3 ta = path( time+2.0 );\n\n    // build ray\n \tmat3 cam = setCamera( ro, ta, 0.0 );\n   \n    ro = ro + cam*fragRayOri;\n    vec3 rd = cam*fragRayDir;\n\n    \n    vec3 col = render( ro, rd, ra );\n\t\t\n\t// gamma\t\n\tcol = pow( clamp( col, 0.0, 1.0 ), vec3(0.45) );\n\n    fragColor = vec4( col, 1.0 );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}