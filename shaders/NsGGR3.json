{
    "Shader": {
        "info": {
            "date": "1643111116",
            "description": "Summer 2021",
            "flags": 0,
            "hasliked": 0,
            "id": "NsGGR3",
            "likes": 5,
            "name": "Summer2021",
            "published": 3,
            "tags": [
                "rays"
            ],
            "usePreview": 0,
            "username": "deni_de",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// ПАРАМЕТРЫ\n    vec3 sky = vec3(0.1,0.7,1.0);                     // ЦВЕТ НЕБА\n    vec3 horizont = vec3(1.0,1.0,1.0);                // ЦВЕТ ГОРИЗОНТА\n    vec3 sun = vec3(1.0,1.0,0.7);                     // ЦВЕТ СОЛНЦА\n    vec3 beach = vec3(1.0,0.9,0.6);                   // ЦВЕТ ПЛЯЖА\n    vec3 water = vec3(0.01,0.5,0.9);                  // ЦВЕТ ВОДЫ\n    \n// ПРОЦЕССИНГ \n    vec2 uv = fragCoord/iResolution.xy;               // ПИКСЕЛИ ПО КООРДИНАТАМ\n//------------------------------------------------------------------------------------------------------------\n    vec2 pos = uv - vec2(0.5,0.8);                    // КООРДИНАТЫ ДЛЯ СОЛНЦА\n//------------------------------------------------------------------------------------------------------------\n    float flip_t = abs(sin(iTime))+ 0.7;              // СИНУС ВРЕМЯ, ОГРАНИЧЕНЫЙ ПОЛОЖИТЕЛЬНОЙ АБСОЛЮТНОСТЬЮ ДЛЯ АНИМАЦИИ\n//------------------------------------------------------------------------------------------------------------\n    vec2 specUV = uv;                                                      // КООРДИНАТЫ ДЛЯ ОТРАЖЕНИЯ СОЛНЦА\n    specUV.y *= 2.21;\n    float specMask = smoothstep(0.2,0.41,length(specUV - vec2(0.5,0.67))); // МАСКА ОТРАЖЕНИЯ СОЛНЦА\n//------------------------------------------------------------------------------------------------------------\n    float d = length(pos) * 1.5;                                           // СФЕРА ДЛЯ СОЛНЦА\n//------------------------------------------------------------------------------------------------------------\n    float e = 0.1  + .05 * cos(atan(pos.x,pos.y) * 21.0);                  // ИСКАЖЕНИЕ ГРАНИ СОЛНЦЕНОГО ДИСКА \n//------------------------------------------------------------------------------------------------------------\n    float sunMask = smoothstep(e,e + 5.1 * (flip_t * 0.05),d);             // МАСКА СОЛНЦА                                           \n//------------------------------------------------------------------------------------------------------------\n    float sinPosY = pos.y + sin(pos.x * 50.0 + iTime) * 0.01  * texture(iChannel0,uv + iTime * 0.01).r;    // ИСКАЖЕНИЯ Y ДЛЯ МАСКИ ПЕНЫ\n    float waterfoam = 1.0 - smoothstep(0.001,0.03 + (0.001 * flip_t),abs(sinPosY +0.77 - (0.1 * flip_t))); // МАСКА ПЕНЫ\n    waterfoam *= texture(iChannel1,uv * 2.0 ).r * texture(iChannel2,uv * 2.0).r * 5.5;                     // ПЕНА * ШУМ\n//------------------------------------------------------------------------------------------------------------\n    float waterMask = smoothstep(0.05,0.06,abs(pos.y + 0.44));                    // МАСКА ВОДЫ(МОРЯ)\n    waterMask *= smoothstep(0.1,0.11,abs(pos.y + 0.55) * flip_t);                 // АНИМАЦИЯ МАСКИ ВОДЫ\n//------------------------------------------------------------------------------------------------------------\n    float beachMask = abs(smoothstep(0.1,0.11,-pos.y - 0.4));                     // МАСКА ПЛЯЖА\n//------------------------------------------------------------------------------------------------------------\n    vec2 uv_water = uv;                                     // РАЗВЕРТКА ДЛЯ ВОДЫ\n    uv_water.x *= 0.001 * flip_t;                           // РАСТЯГИВАЕМ Х И АНИМИРУЕМ \n//------------------------------------------------------------------------------------------------------------\n    // ОБЪЕДЕНЯЕМ ИСКАЖЕНИЯ ГОРИЗОНТА С ЦВЕТОМ МОРЯ\n    float m = texture(iChannel0, uv_water * 5.0 + iTime * 0.05).r \n    * texture(iChannel0, uv - uv_water * 5.0 - iTime * 0.001).r;\n    \n    water = mix(pow(water,vec3(0.3)),horizont,m);\n//------------------------------------------------------------------------------------------------------------\n    // ДОБАВЛЯЕМ К ПЛЯЖУ ТЕКСТУРУ ШУМА ДЛЯ ИМИТАЦИИ ПЕСЧАНОЙ ФРАКЦИИ\n    beach = mix(beach,beach - 0.2, texture(iChannel1, vec2(uv.x * 0.03,uv.y * 1.4)).r) - (-0.7 + texture(iChannel1,uv * 5.0).r) * 0.5;\n//------------------------------------------------------------------------------------------------------------\n    // СОЗДАЁМ ОТРАЖЕНИЕ СОЛНЦА\n    float a = water.r * ((1.0 -  specMask)) * (1.0 - waterMask); \n//------------------------------------------------------------------------------------------------------------\n\n// АППЛИКАЦИЯ\n    vec3 col = vec3(0.0);                                                  // ПОЛЕ ДЛЯ ЗАПИСИ РЕЗУЛЬТАТА\n    \n    sky = mix(horizont,sky,uv.y -0.1);                                     // ДОБВЛЯЕМ ГОРИЗОНТ К НЕБУ\n    sky = mix(sun,sky,sunMask);                                            // ДОБАВЛЯЕМ СОЛНЦЕ К НЕБУ\n    col = sky;                                                             // ЗАПИСЫВАЕМ НЕБО В РЕЗУЛЬТАТ\n    col = mix(col,beach, beachMask);                                       // ДОБАВЛЯЕМ ПЛЯЖ В РЕЗУЛЬТАТ\n    col = mix(water,col, waterMask);                                       // ДОБАВЛЯЕМ МОРЕ В РЕЗУЛЬТАТ\n    col = mix(col,sun,a);                                                  // ДОБАВЛЯЕМ ОТРАЖЕНИЕ\n    col = mix(col,horizont, waterfoam);                                    // ДОБАВЛЯЕМ ПЕНУ\n    \n// ВЫВОД\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}