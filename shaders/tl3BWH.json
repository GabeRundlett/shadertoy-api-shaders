{
    "Shader": {
        "info": {
            "date": "1612622445",
            "description": "Use raymarching to build a simple scene by playing with the light and texture. ",
            "flags": 0,
            "hasliked": 0,
            "id": "tl3BWH",
            "likes": 2,
            "name": "floating",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "music",
                "texture",
                "light",
                "sphere",
                "circle",
                "camera",
                "normal",
                "plane",
                "diffuse",
                "shape",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "//tutorial https://www.youtube.com/watch?v=PGtv-dBi2wE\n\n// ray marching/sphere tracing is more more complicated objects\n// ray tracing is for simple objects \n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0,1.5,6.-sin(iTime),1);\n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    float d = min(sphereDist,planeDist);\n    return d; \n    \n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for (int i =0; i<MAX_STEPS; i++){\n    vec3 p = ro+dO*rd;\n    float dS = GetDist(p);\n    dO +=dS;\n    if (dS<SURF_DIST|| dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n   vec2 e = vec2(.01,0.);\n   float d = GetDist(p);\n   vec3 n = d-vec3(\n           GetDist(p-e.xyy),\n           GetDist(p-e.yxy),\n           GetDist(p-e.yyx));\n   return normalize(n);\n}\n\nfloat GetLight (vec3 p){\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz+=vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l = normalize (lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n,l),0.,1.);\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    if (d<length(lightPos-p)) dif*=.1;\n     \n\n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0.,1.,0.);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.));\n    \n    float d= RayMarch(ro,rd);\n\n    vec3 p = ro+rd*d;\n    \n    //get diffused light     \n    float dif = GetLight(p);\n    float colDif = 0.5*abs(sin(iTime));\n    col=vec3(colDif,dif,clamp(dif*dif,0.,0.5));\n    vec3 t= texture(iChannel0, uv*3.*abs(sin(iTime*0.05))).rgb;    \n    col-=GetNormal(p)*t;\n\n    fragColor = vec4(col,1.);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}