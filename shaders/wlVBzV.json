{
    "Shader": {
        "info": {
            "date": "1614719007",
            "description": "Inexact parabolic deform operator (works well in some cases, not so well in others but is much better than bending with non-uniform rotation).",
            "flags": 0,
            "hasliked": 0,
            "id": "wlVBzV",
            "likes": 3,
            "name": "Parabolic Deform",
            "published": 3,
            "tags": [
                "deform",
                "curve",
                "parabola"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "#define PHI 2.09439510239 // (2 / 3)pi\n#define dot2(v) dot(v, v)\n\n// This seems way too complicated :(\nvec2 parabolicDeform(in vec2 p2, in float h) {\n    // Coefficients (b is always zero which simplifies things a bit)\n    float a = 4.0 * h * h;\n    float c = 2.0 - 4.0 * h * p2.y;\n    float d = -2.0 * p2.x;\n\n    float p = c / a, p3 = p * p * p;\n    float q = d / a, q2 = q * q;\n\n    float discr = -4.0 * a * c * c * c - 27.0 * a * a * d * d, minCplx = 1.0;\n\n    float d0 = -3.0 * a * c;\n    float d1 = 27.0 * a * a * d;\n    float qn = d1 * d1 - 4.0 * d0 * d0 * d0, j = sqrt(abs(qn));\n    a *= 3.0;\n\n    vec2 C = qn < 0.0 ? vec2(d1, j) : vec2(d1 + j, 0.0);\n    if (abs(C.x) < 1e-3 && abs(C.y) < 1e-3) C = qn < 0.0 ? vec2(d1, -j) : vec2(d1 - j, 0.0); // Switch sign if C=0\n    C = sin(atan(C.y, C.x) / 3.0 + vec2(1.57079632679, 0.0)) * pow(0.25 * dot(C, C), 1.0 / 6.0);\n\n    vec4 roots = vec4(0.0, 0.0, 0.0, discr < 0.0 ? 1 : 3);\n    vec2 e = vec2(1.0, 0.0);\n    for (int k=0; k < (discr < 0.0 ? 2 : 3); k++) {\n        vec2 m = e * mat2(C.x, -C.y, C.yx); // Complex multiplication\n        e *= mat2(-0.5, -0.86602540378, 0.86602540378, -0.5); // Raise cube root of unity to next power\n        vec2 root = (vec2(-d0, d0) * m / dot(m, m) - m) / a;\n        if (discr < 0.0 ? (abs(root.y) < minCplx) : true) roots[discr < 0.0 ? 0 : k] = root.x, minCplx = abs(root.y);\n    }\n\n    // Find closest point on the parabola from the roots\n    vec2 closest = vec2(roots[0], h * roots[0] * roots[0]);\n    float sqDist = dot2(p2 - closest);\n    if (roots[3] > 1.0) {\n        vec2 closest2 = vec2(roots[1], h * roots[1] * roots[1]);\n        float sqDist2 = dot2(p2 - closest2);\n        if (sqDist2 < sqDist) {\n            closest = closest2;\n            sqDist = sqDist2;\n        }\n\n        closest2 = vec2(roots[2], h * roots[2] * roots[2]);\n        sqDist2 = dot2(p2 - closest2);\n        if (sqDist2 < sqDist) {\n            closest = closest2;\n            sqDist = sqDist2;\n        }\n    }\n\n    // Integral of sqrt(1 + 4h^2x^2) gives the arclength (distance along the parabola)\n    float baz = abs(h), qux = 2.0 * baz * abs(closest.x);\n    float arclen = (asinh(qux) + qux * sqrt(4.0 * h * h * closest.x * closest.x + 1.0)) / baz * 0.25;\n    return vec2(arclen * sign(p2.x), sqrt(sqDist) * sign(p2.y - h * p2.x * p2.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n\n    float h = iMouse.z > 0.0 ? mouse.y * 32.0 : sin(iTime) * 32.0;\n    vec2 p = parabolicDeform(uv, h);\n    float d = length(vec2(max(0.0, abs(p.x) - 0.25), p.y)) - 0.05;\n\n    /* Maybe not so exact :(\n    p.x += 0.5 * sin(iTime);\n    p.y += 0.125 + 0.125 * cos(iTime);\n    vec2 q = abs(p) - vec2(0.25, 0.05);\n    float d = length(max(q, 0.0)) + min(0.0, max(q.x, q.y));\n    */\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}