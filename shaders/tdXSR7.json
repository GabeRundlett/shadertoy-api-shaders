{
    "Shader": {
        "info": {
            "date": "1579945913",
            "description": "Based on my friends concept art for a game.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdXSR7",
            "likes": 2,
            "name": "Multipleye",
            "published": 3,
            "tags": [
                "eye"
            ],
            "usePreview": 0,
            "username": "polymonster",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159265358979323846264;\n\nvec3 _00 = vec3(252.0, 64.0, 136.0) / 255.0;\nvec3 _01 = vec3(255.0, 237.0, 12.0) / 255.0;\nvec3 _02 = vec3(151.0, 25.0, 121.0) / 255.0;\nvec3 _03 = vec3(80.0, 246.0, 219.0) / 255.0;\nvec3 _10 = vec3(78.0, 249.0, 177.0) / 255.0;\nvec3 _11 = vec3(80.0, 121.0, 250.0) / 255.0;\nvec3 _12 = vec3(180.0, 69.0, 250.0) / 255.0;\nvec3 _13 = vec3(244.0, 66.0, 100.0) / 255.0;\n\n// from gold noise\nfloat PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   \nfloat PI  = 3.14159265358979323846264 * 00000.1; // PI\nfloat SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two\n\nfloat rand(vec2 coordinate, float seed)\n{\n    return fract(tan(distance(coordinate*(seed+PHI), vec2(PHI, PI)))*SQ2);\n}\n\nfloat test(float i, float j)\n{\n    if(i == j)\n        return 1.0;\n    \n    return 0.0;\n}\n\nvec3 rand_col(vec2 index)\n{   \n    vec3 rc = vec3(0.0);\n    \n    rc += _00 * test(index.y, 0.0) * test(index.x, 0.0);\n    rc += _01 * test(index.y, 0.0) * test(index.x, 1.0);\n    rc += _02 * test(index.y, 0.0) * test(index.x, 2.0);\n    rc += _03 * test(index.y, 0.0) * test(index.x, 3.0);\n    rc += _10 * test(index.y, 1.0) * test(index.x, 0.0);\n    rc += _11 * test(index.y, 1.0) * test(index.x, 1.0);\n    rc += _12 * test(index.y, 1.0) * test(index.x, 2.0);\n    rc += _13 * test(index.y, 1.0) * test(index.x, 3.0);\n    rc += _00 * test(index.y, 2.0) * test(index.x, 0.0);\n    rc += _01 * test(index.y, 2.0) * test(index.x, 1.0);\n    rc += _02 * test(index.y, 2.0) * test(index.x, 2.0);\n    rc += _03 * test(index.y, 2.0) * test(index.x, 3.0);\n    rc += _10 * test(index.y, 3.0) * test(index.x, 0.0);\n    rc += _11 * test(index.y, 3.0) * test(index.x, 1.0);\n    rc += _12 * test(index.y, 3.0) * test(index.x, 2.0);\n    rc += _13 * test(index.y, 3.0) * test(index.x, 3.0);\n    \n    return rc;\n}\n\nvec4 eye(vec2 coord)\n{\n    // useful vars\n    vec2 ii = floor(mod(coord, 4.0));\n    vec2 uv = mod(coord, 1.0);\n    vec2 aspect = iResolution.xy / iResolution.yy;\n    \n    vec2 ndc = uv * 2.0 - 1.0;\n    vec2 ppc = ndc * aspect;\n    vec2 ppn = normalize(ppc);\n    \n    vec2 index = (ii);\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    // eye\n    vec2 ebc = ndc;\n    ebc.y = pow(abs(ebc.y), 1.0/1.5);\n    float r = step(length(ebc), 0.7);\n    vec3 eyelid = vec3(r, r, r);\n    \n    // eye ball\n    float cd = 0.0;\n    \n    float t = iTime * 0.00001;\n    float pt = t - 0.001;\n    float nt = t + 0.001;\n    \n    float prx = floor(rand(index, pt) * 4.0);\n    float pry = floor(rand(index, pt) * 4.0);\n    \n    float rx = floor(rand(index, t) * 4.0);\n    float ry = floor(rand(index, t) * 4.0);\n    \n    if(length(index - vec2(rx, ry)) < 0.2 )\n        cd = 1.0;\n    \n    float open = 1.0/2.2;\n    float closed = 1.0/20.0;\n    float closedness = mix(open, closed, cd);\n    ebc.y = pow(abs(ebc.y), closedness);\n    r = step(length(ebc), 0.7);\n    vec3 eyeball = vec3(r, r, r);\n    \n    // pupil\n    r = step(length(ppc), 0.2);\n    vec3 pupil = vec3(r, r, r);\n    vec3 pupil_col = vec3(length(ppc));\n    \n    // iris\n    r = step(length(ppc), 0.4);\n    vec3 iris = vec3(r, r, r);\n    \n    r = length(ppc);\n    float at = atan(ppn.x, ppn.y) + sin(iTime);\n    float mat = mod(at, pi / 10.0);\n                    \n    //vec3 iris_col = mix(vec3(0.2, 0.5, 0.9), vec3(0.2, 0.9, 0.9), mat);\n    \n    vec3 iris_col = rand_col(index.yx);\n            \n    col = (eyeball * vec3(1.0, 1.0, 1.0)) * (1.0 - iris);\n   \tcol += iris_col * iris * eyeball * (1.0 - pupil);\n    col += pupil_col* pupil * eyeball;\n    col += rand_col(index) * (1.0 - eyeball) * eyelid;\n    \n    return vec4(col, eyelid);\n}\n\nvec3 bg_func(vec2 uv)\n{\n    float x = uv.x + iTime;\n    float y = uv.y;\n    float yv = uv.y * 2.0 - 1.0;\n    float m = 0.0;\n    \n    if(yv < 0.0)\n    \tm = step(mod(x + y, 0.4), 0.2);\n    else\n    \tm = 1.0 - step(mod(x - y, 0.4), 0.2);\n        \n    vec3 bg3 = mix(_02, _03, sin(iTime*10.0));\n    vec3 bg4 = mix(_12, _13, cos(iTime*10.0));\n    \n    vec3 bg2 = mix(mix(_00, _01, sin(iTime * 5.0) * 0.5 + 0.5), bg3, sin(iTime * 5.0));\n    vec3 bg1 = mix(mix(_10, _11, cos(iTime * 5.0) * 0.5 + 0.5), bg4, sin(iTime * 5.0));\n   \n    vec3 bg = mix(bg1, bg2, m);\n    \n    return bg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 _uv = fragCoord/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texel = 1.0 / iResolution.xy;\n    vec2 aspect = iResolution.xy / iResolution.yy;\n    \n    uv.x += sin(iTime * 10.0 + uv.y * 10.0) * 0.01;\n    \n    // eyes   \n    vec2 num = vec2(1.0, 1.0) + vec2(floor(mod(iTime / 4.0, 8.0)));\n    vec4 eyes = eye(uv * num + vec2(iTime, 0.0));\n    \n    // bg\n\tvec3 bg = bg_func(uv);\n\n    // led / pixels\n    float led_size = 0.00005;\n    float edge = 0.04;\n    vec2 led_size2 = vec2(led_size, led_size) / aspect;\n    vec2 mm = mod(_uv * aspect, led_size);\n    vec2 mv = smoothstep(0.0, led_size, mm);\n    vec2 led = step(mv, vec2(edge) * aspect);\n    float third = 1.2/3.0;\n    float led_r = step(mv.x, third);\n    float led_g = step(mv.x, third * 2.0) * (1.0 - led_r);\n    float led_b = step(mv.x, third * 3.0) * (1.0 - led_r) * (1.0 - led_g);\n    vec3 led_rgb = vec3(led_r, led_g, led_b) * clamp(1.0 - (led.x + led.y), 0.0, 1.0);\n        \n   \tbg *= led_rgb;\n        \n    vec3 col = bg * (1.0 - eyes.a);\n    col += eyes.a * eyes.rgb;\n    \n    //col = bg;\n    \n    // output\n    fragColor = vec4(col.rgb, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}