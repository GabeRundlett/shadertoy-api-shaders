{
    "Shader": {
        "info": {
            "date": "1692393149",
            "description": "Use mouse to look (left click drag). Use keys to move (up,down,left,right or WASD). How big is the world? I have not set any limits, the world is as big as floating point precision will let you move. It is very large.",
            "flags": 48,
            "hasliked": 0,
            "id": "dtSyDc",
            "likes": 17,
            "name": "Open World. Mouse look keys move",
            "published": 3,
            "tags": [
                "terrain",
                "raymarch",
                "keyboard",
                "explore",
                "openworld"
            ],
            "usePreview": 0,
            "username": "Blindman67",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "\n\n\nfloat glare;\nvec3 CalcNorm(vec3 pos, float dist, uint stopAt) {\n    vec2 e = vec2(0.001 * dist, 0);\n    return normalize(vec3(\n        TerrainSDF((pos.xz - e.xy) * MAP_SCALE, stopAt) - TerrainSDF((pos.xz + e.xy) * MAP_SCALE, stopAt), \n        2.0 * e.x, \n        TerrainSDF((pos.xz - e.yx) * MAP_SCALE, stopAt) - TerrainSDF((pos.xz + e.yx) * MAP_SCALE, stopAt)\n    ));\n}\nNorms CalcNorms(vec3 pos, float dist) {\n    vec2 e = vec2(0.001 * dist * MAP_SCALE , 0);\n    vec2 p = pos.xz * MAP_SCALE;\n    vec3 A = TerrainSDF(p - e.xy);\n    vec3 B = TerrainSDF(p + e.xy);\n    vec3 C = TerrainSDF(p - e.yx);\n    vec3 D = TerrainSDF(p + e.yx);\n    float e2 = 0.002 * dist;\n    return Norms(\n        normalize(vec3(A.x - B.x, e2, C.x - D.x)),\n        normalize(vec3(A.y - B.y, e2, C.y - D.y)),\n        normalize(vec3(A.z - B.z, e2, C.z - D.z))\n    );\n}\nvoid SunGlow(in vec3 rDir, in vec3 sDir, inout vec3 atmosphere) {\n    float sdot = UClamp(dot(rDir, sDir)) * glare;\n    atmosphere += COl_SunA.rgb * pow(sdot, COl_SunA.a);\n    atmosphere += COl_SunB.rgb * pow(sdot, COl_SunB.a);\n    atmosphere += COl_SunC.rgb * pow(sdot, COl_SunC.a);\n    atmosphere += COl_SunD.rgb * pow(sdot, COl_SunD.a);\n}\nfloat RayMarch(Ray ray, float dist) {\n    vec3 p = ray.origin + dist * ray.dir;\n    for(uint i = 0u; i < MAX_ITER && dist < MAX_DIST; i++) {\n        float h = p.y - TerrainSDF(p.xz * MAP_SCALE, 8u);\n        if (abs(h) < EPSILON * dist) { return dist; }\n        h *= 0.6;\n        p += h * ray.dir;\n        dist += h;\n    }\n    return dist;\n}\n\n\nvec3 DrawPixel(Ray ray) {\n    float dist = RayMarch(ray, MIN_DIST);    \n    vec3 col = vec3(0);\n    vec3 atmosphere = vec3(0.3, 0.5, 0.85) - ray.dir.y * ray.dir.y * 0.5;\n    atmosphere = mix(atmosphere, 0.85 * vec3(0.7, 0.75, 0.85), pow(1.0 - max(ray.dir.y, 0.0), 4.0));\n    SunGlow(ray.dir, sun.dir, atmosphere);\n\n    if (dist <= MAX_DIST) {\n        vec3 p = ray.origin + dist * ray.dir;\n        Norms norms = CalcNorms(p, dist);\n        vec3 up = vec3(0,1,0);\n        float dotH = dot(norms.nH, up);\n        float dotL = dot(norms.nL, up);\n        \n        float altitude = p.y + dotH * 40.0;\n        float snow = altitude > 95.0 ? dotH : 0.0;\n        float snowCover = UClamp((150.0 - p.y) / 150.0) + 0.3;\n        float green = altitude < 90.0 ? dotH : 0.0;\n        float greenCover = UClamp(p.y / 150.0) + 0.5;\n        \n        vec3 rockC = mix(COl_A, COl_B, smoothstep(0.8, 0.802, dotH));\n        float mixSnow = step(UClamp(snowCover), snow);\n        if (mixSnow > 0.5) {\n            twist = twist1;\n            norms.nL = CalcNorm(p, dist, 4u);\n            twist = twist2;\n        }\n        float mixGrass = step(UClamp(greenCover), green);\n        rockC = mix(rockC, COl_C, mixSnow);\n        rockC = mix(rockC, mix(COl_D, COl_D1, norms.nH.z * norms.nH.y), mixGrass);\n        \n        vec3 n = mix(norms.nH, norms.nL, max(mixSnow, mixGrass * 0.5));\n        float difuse = UClamp(dot(sun.dir, n)) + 0.3;        \n        float sh = RayShadow(p + n * 0.5, sun.dir);        \n        float ambient = UClamp(n.y * 0.5 + 0.5);\n        float back = UClamp(dot(vec3(-sun.dir.x, -sun.dir.y * 4.0, -sun.dir.z), n)) ;\n        vec3 lin = vec3(0.4, 0.6, 1.0) * ambient * 6.0;\n        lin += vec3(6.0, 4.0, 3.0) * difuse * difuse * difuse * 2.0 * sh; \n        lin += vec3(4.4, 7.15, 10.6) * pow(back, 5.0);\n\n        col = mix(atmosphere, rockC * lin , exp(-pow(0.002 * dist, 1.5)));\n    } else {\n        col = atmosphere;\n    }\n    return col;\n}\n\nvec3 GetPixel(in vec2 fragCoord) {\n    twist = twist2;\n    float time = Time(iFrame, ORBIT_SPEED);\n    vec3 invRes = InvRes(iResolution);\n    vec4 posGlare = GetState(STATE_CH, STATE_CAM_HEIGHT);\n    glare = posGlare.w;\n    Ray ray = Ray(posGlare.xyz, vec3(0));\n    vec2 yawPitch = GetState(STATE_CH, STATE_CAM_DIR).xy;        \n    vec2 px = 1.0 / iResolution.xy;   \n    vec2 uv = FixUV(fragCoord, iResolution) * invRes.y;\n    mat3 vmat = lookMouse(2.0 * yawPitch);\n\n    #ifndef ANTI_ALIAS\n        ray.dir = normalize(vmat * vec3(uv, 2.0));\n        return  DrawPixel(ray);   \n    #else\n        vec3 col = vec3(0);\n        vec2 subPx = vec2(0);  \n        for (subPx.y = 0.0; subPx.y < 1.0; subPx.y += AA_STEP) {\n            for (subPx.x = 0.0; subPx.x < 1.0; subPx.x += AA_STEP) {\n                ray.dir = normalize(vmat * vec3(uv + px * subPx, 2.0));\n                vec3 c = DrawPixel(ray);   \n                col += c * c;\n            }\n        }\n        return pow(col * AA_SAMPLES, vec3(0.5));\n    #endif\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(1.0 - exp(-GetPixel(fragCoord) * 2.0), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define ANTI_ALIAS 3.0\n#define MIN_DIST 0.01\n#define MAX_DIST 1000.0\n#define MAX_SHADOW_DIST 100.0\n#define SHADOW_SCALE 0.01\n#define WORLD_VERT_SIZE 127.0  /* This value is at its max. Larger values will create artifacts. vert for vertical */\n#define WORLD_VERT_POW 1.5 \n#define FOG_SCALE 100.0\n#define FAR vec4(1e5)\n#define EPSILON 0.0001\n#define MAX_ITER 128u\n#define MAX_SHADOW_ITER 64u\n#define MAP_SCALE 0.0025\n#define ORBIT_RADIUS 4012.0\n#define ORBIT_SPEED 0.00055\n#define CAMERA_OFFSET 10.0\n\n\n#define STATE_DATA_STRIDE 32 /* Must be less than resolution */\n#define STATE_CH iChannel0\n#define STATE_MAX_IDX 3      /* To help reduce GPU load */\n\n\n#define KEYS iChannel1\n#define KEY_UP 38\n#define KEY_DOWN 40\n#define KEY_LEFT 37\n#define KEY_RIGHT 39\n#define KEY_A 65 \n#define KEY_B 66 \n#define KEY_C 67 \n#define KEY_D 68 \n#define KEY_E 69\n#define KEY_F 70 \n#define KEY_G 71 \n#define KEY_H 72 \n#define KEY_I 73 \n#define KEY_J 74\n#define KEY_K 75 \n#define KEY_L 76 \n#define KEY_M 77 \n#define KEY_N 78 \n#define KEY_O 79\n#define KEY_P 80 \n#define KEY_Q 81 \n#define KEY_R 82 \n#define KEY_S 83 \n#define KEY_T 84\n#define KEY_U 85 \n#define KEY_V 86 \n#define KEY_W 87 \n#define KEY_X 88 \n#define KEY_Y 89\n#define KEY_Z 90\n#define KEY_0 48 \n#define KEY_1 49 \n#define KEY_2 50 \n#define KEY_3 51 \n#define KEY_4 52\n#define KEY_5 53 \n#define KEY_6 54 \n#define KEY_7 55 \n#define KEY_8 56 \n#define KEY_9 57\n\nconst float PI = 3.14159;\nconst float TAU = PI * 2.0;\n#ifdef ANTI_ALIAS\n    const float AA_STEP = 1.0 / ANTI_ALIAS;\n    const float AA_SAMPLES = 1.0 / (ANTI_ALIAS * ANTI_ALIAS);\n#endif\nconst float inv_60 = 1.0 / 60.0;\n\n\n\n\nstruct Ray{ vec3 origin; vec3 dir; };\n\nvec4 GetState(in sampler2D sampler, in int idx) {    \n    return texelFetch(sampler, ivec2(idx % STATE_DATA_STRIDE, idx / STATE_DATA_STRIDE), 0);    \n}\nint GetStateIdx(vec2 coord) {\n    int x = int(coord.x);\n    return x < STATE_DATA_STRIDE ? x + int(coord.y) * STATE_DATA_STRIDE : STATE_MAX_IDX;\n}\n\nbool Key(in sampler2D sampler, int charIdx) {\n  return texelFetch(sampler, ivec2(charIdx, 0), 0).x > 0.0;\n}\nbool Key(in sampler2D sampler, int char1Idx, int char2Idx) {\n  if (texelFetch(sampler, ivec2(char1Idx, 0), 0).x > 0.0) { return true; }\n  return texelFetch(sampler, ivec2(char2Idx, 0), 0).x > 0.0;\n}\n\n\nfloat UClamp(in float v) { return clamp(v, 0.0, 1.0); } /* U for unit */\nfloat Hash(vec2 pos) {\n    pos = fract(pos * 13.654678) * 65.247743;\n    float f = fract((pos.x + pos.y) * pos.x * pos.y);\n    return f * f;\n}\nvec3 Noise2D(vec2 pos) {  /* returns vec3 where 2D noise is return.xy  */\n    vec2 fPos = floor(pos);\n    float a = Hash(fPos);\n    float b = Hash(fPos + vec2(1, 0));\n    float c = Hash(fPos + vec2(0, 1));\n    float d = Hash(fPos + vec2(1, 1));\n    vec2 f = fract(pos);\n    vec2 u = f * f * (3.0 - 2.0 * f), u1 = 1.0 - u;\n    float ca = c - a;\n    float ba = b - a;\n    return vec3(\n        6.0 * u * u1 * (vec2(ba, ca) + u.yx * (a - b - c + d)),\n        a + ba * u.x * u1.y + ca * u1.x * u.y + (d - a) * u.x * u.y        \n    );\n}\n\n\nvec3 InvRes(in vec3 res) { return 1.0 / res; }\nvec2 FixUV(in vec2 uv, in vec3 res) { return (2.0 * uv - res.xy); }\nfloat Time(in int f) { return float(f) * inv_60; }\nfloat Time(in int f, in float scale) { return float(f) * inv_60 * scale; }\nmat3 camMatrix(in float yaw, in float pitch) {\n    vec3 forward = normalize(vec3(sin(yaw), sin(pitch), cos(yaw)) * cos(pitch));\n    vec3 right = normalize(cross(vec3(0, 1, 0), forward));   \n    return mat3(right, cross(forward, right), forward);\n}\nmat3 lookMouse(in vec2 unitMouse) {\n    return camMatrix((unitMouse.x * 1.2 - 0.1) * PI, (unitMouse.y * 0.5 + 0.5) * PI);\n}\n\n\n\n\n#define STATE_CAM_POS 0\n#define STATE_CAM_DIR 1\n#define STATE_CAM_HEIGHT 2\n\n\nconst vec3  COl_A = vec3(0.03, 0.032, 0.034) * 1.5;   // Rock steep\nconst vec3  COl_B = vec3(0.054, 0.053, 0.05);   // Rock\nconst vec3  COl_C = vec3(0.257, 0.257, 0.25);   // Snow\nconst vec3  COl_D = vec3(0.044, 0.052, 0.04);   // Grass\nconst vec3  COl_D1 = vec3(0.052, 0.055, 0.045);  // Grass 2\n\n/* Alpha used as power */\nconst vec4  COl_SunA = vec4(1.0, 0.7, 0.0, 5.0);\nconst vec4  COl_SunB = vec4(1.5, 1.2, 0.6, 64.0);\nconst vec4  COl_SunC = vec4(2.0, 2.0, 1.1, 512.0);\nconst vec4  COl_SunD = vec4(1.0, 0.7, 0.3, 8.0);\n\nRay sun = Ray(vec3(0), normalize(vec3(0.8, 0.1, -0.2)));\nstruct Norms {\n    vec3 nL;\n    vec3 n;\n    vec3 nH;\n};\nmat2 twist;\nconst mat2 twist1 = mat2(sin(0.5), -cos(0.5) * 1.8, cos(0.5) * 1.7, sin(0.5));\nconst mat2 twist2 = mat2(0.6, -0.8, 0.8, 0.632);\nfloat TerrainSDF(vec2 coord, uint stopAt) {\n    vec2 p = coord;\n    vec3 n; \n    float a = 0.0, b = 1.0;\n    vec2 d = vec2(0);\n    uint i = 0u;\n    while (i < stopAt) {\n        n = Noise2D(p);\n        d += n.xy;\n        a += b * n.z / (1.0 + dot(d, d));\n        p = twist * p * 2.0;\n        b *= 0.5;\n        i++;\n    }\n    return WORLD_VERT_SIZE * pow(a, WORLD_VERT_POW);\n}\nvec3 TerrainSDF(vec2 coord) {\n    vec2 p = coord;\n    float a = 0.0, b = 1.0;\n    vec2 d = vec2(0);\n    uint i = 0u;\n    vec3 n, res;\n    while (i < 3u) {\n        n = Noise2D(p);\n        d += n.xy;\n        a += b * n.z / (1.0 + dot(d, d));\n        p = twist * p * 2.0;\n        b *= 0.5;\n        i++;\n    }\n    res.x = WORLD_VERT_SIZE * pow(a, WORLD_VERT_POW);\n    while (i < 8u) {\n        n = Noise2D(p);\n        d += n.xy;\n        a += b * n.z / (1.0 + dot(d, d));\n        p = twist * p * 2.0;\n        b *= 0.5;\n        i++;\n    }\n    res.y = WORLD_VERT_SIZE * pow(a, WORLD_VERT_POW);\n    while (i < 16u) {\n        n = Noise2D(p);\n        d += n.xy;\n        a += b * n.z / (1.0 + dot(d, d));\n        p = twist * p * 2.0;\n        b *= 0.5;\n        i++;\n    }\n    res.z = WORLD_VERT_SIZE * pow(a, WORLD_VERT_POW);\n    return res;\n}\n\nfloat RayShadow(vec3 origin, vec3 dir) {\n    float dist = MIN_DIST;\n    vec3 p = origin + MIN_DIST * dir;\n    for(uint i = 0u; i < MAX_SHADOW_ITER && dist < MAX_SHADOW_DIST; i++) {\n        float h = p.y - TerrainSDF(p.xz * MAP_SCALE, 10u);\n        if (abs(h) < EPSILON * dist) { break; }\n        p += h * dir;\n        dist += h;\n    }\n    return dist < MAX_SHADOW_DIST && dist > EPSILON ? UClamp(pow(dist * 0.2 * SHADOW_SCALE, 0.2)) : 1.0; \n}\nfloat InShadow(vec3 origin, vec3 dir) {\n    float dist = MIN_DIST;\n    vec3 p = origin + MIN_DIST * dir;\n    for(uint i = 0u; i < MAX_ITER && dist < MAX_DIST; i++) {\n        float h = p.y - TerrainSDF(p.xz * MAP_SCALE, 3u);\n        if (abs(h) < EPSILON * dist) { break; }\n        p += h * dir;\n        dist += h;\n    }\n    return dist < MAX_DIST ? 0.0 : 1.0; \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define MAX_SPEED 0.5\n#define SPEED_ACCEL 0.1\nint stateIdx = -1;\nvec4 stateData[STATE_MAX_IDX];\nvec4 LoadState(int idx) {    \n    return stateData[idx] = texelFetch(STATE_CH, ivec2(idx % STATE_DATA_STRIDE, idx / STATE_DATA_STRIDE), 0);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    stateIdx = GetStateIdx(fragCoord);\n    if (stateIdx < STATE_MAX_IDX) {\n        vec4 pos = LoadState(STATE_CAM_POS);\n\n        vec4 yPS = LoadState(STATE_CAM_DIR);\n        vec4 camPos = LoadState(STATE_CAM_HEIGHT);\n        if (pos.a <= EPSILON) {\n            pos = vec4(10,1,1,1);\n            yPS = vec4( 0.5, 0.5, 0, 0);\n        } else {\n            vec2 m = (iMouse.x < 1.0 && iMouse.y < 1.0) ? iResolution.xy * 0.5 : iMouse.xy;\n            yPS.xy += ((m / iResolution.xy) - yPS.xy) * 0.1;\n        }\n        mat3 vmat = lookMouse(2.0 * yPS.xy);\n        float speed = 0.0f;\n        float slide = 0.0f;\n        float speedBoost = 1.0f;\n        if (Key(KEYS, KEY_Q)) { speedBoost = 15.0f; }\n        if (Key(KEYS, KEY_UP, KEY_W)) { speed = MAX_SPEED * speedBoost; }\n        else if (Key(KEYS, KEY_DOWN, KEY_S)) { speed = -MAX_SPEED * speedBoost; }\n        \n        if (Key(KEYS, KEY_RIGHT, KEY_D)) { slide = MAX_SPEED; }\n        else if (Key(KEYS, KEY_LEFT, KEY_A)) { slide = -MAX_SPEED; }\n\n        yPS.z += (speed - yPS.z) * SPEED_ACCEL;\n        yPS.w += (slide - yPS.w) * SPEED_ACCEL;\n        pos.xyz += vmat[2] * yPS.z;\n        pos.xyz += vmat[0] * yPS.w;\n        stateData[STATE_CAM_DIR] = yPS;        \n        stateData[STATE_CAM_POS] = pos;\n        \n        twist = twist2;\n        camPos.xyz = vec3(pos.x, TerrainSDF(pos.xz * MAP_SCALE, 8u) + CAMERA_OFFSET, pos.z);\n        \n        float glare = pow(UClamp(dot(vmat[2], sun.dir)), 2.0) * InShadow(camPos.xyz, sun.dir); \n        camPos.w += (glare - camPos.w) * 0.05;\n        stateData[STATE_CAM_HEIGHT] = camPos;\n        fragColor = stateData[stateIdx];\n    } else {\n        discard;\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}