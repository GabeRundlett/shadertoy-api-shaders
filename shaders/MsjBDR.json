{
    "Shader": {
        "info": {
            "date": "1500135748",
            "description": "A transparent organic field partitioned horizontally into 2D isosurface slices.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsjBDR",
            "likes": 72,
            "name": "[SH17A] Transparent Isoslices",
            "published": 3,
            "tags": [
                "transparency",
                "code",
                "small",
                "tweet"
            ],
            "usePreview": 0,
            "username": "Shane",
            "viewed": 2325
        },
        "renderpass": [
            {
                "code": "/*\n\n    Transparent Isoslices\n\t---------------------\n\n\tQuasi diffuse-lit transparent isosurface slices. I had to get a little inventive -\n\tboth with the character shuffling and the methodology - to make this work.\n\n\tI don't know if anyone's noticed this, but 280 characters is not a lot to work \n\twith. :) I mean, you could order a beer in under two tweets, but you couldn't chat \n\tup the bar maid... OK, some people on Shadertoy probably could. :D\n\n*/\n\n// Cheap organic distance field - partitioned into horizontal slices.\n//\nfloat m(vec3 p)\n{ \n    // Moving the scene itself forward - as opposed to the camera - to save on some lighting\n    // calculations later on. IQ does it in one of his small examples. \"iTime\" - IQ's suggestion.\n    // I didn't know that was an option... I need to read more. :)\n    p.z += iTime; \n    \n    \n    // Chopping the field into horizontal strips. It's quite a brutal approach, and it only works\n    // because of the volumetric-like traversal. By the way, if you comment the line out, the \n    // isolines disappear, along with 22 characters, but it wasn't the look I was after.\n    p.y = ceil(p.y*12.)/12.;\n    // Based on Public_int_i's suggestion. Saves a bunch of characters. If it matches the above\n    // speedwise, I'll be using it.\n    //p.y -= mod(p.y, .08); \n   \n    // Very cheap organic distortion. This line can be amalgamated below... I was a little suspicious\n    // about compilation order, but Greg Rostami is OK with it, so I am too. :)\n\t//p = cos(p*.6 + sin(p.zxy*1.8));\n\n    // Return the absolute field value to ensure that the ray doesn't backtrack.\n    return abs(dot(p = cos(p*.6 + sin(p.zxy*1.8)), p) - 1.1);\n}\n\nvoid mainImage( out vec4 c, vec2 u){\n\n    // The loosely centered and normalized unit direction ray, and the origin - initialized\n    // to zero. Characters can be saved by dropping \"d\" directly into the loop, but this way\n    // feels cleaner to me.\n    vec3 d = vec3(u/iResolution.y - .6, 1), o = d - d;\n    \n    // Initializing \"c\" to zero... in a less than satisfactory way.\n    c -= c;\n    \n\t// Loop variables. Declaring the loop iteration variable, \"i,\" outside of the loop in a \n    // shader environment makes me a little nervous, but things seem to be compiling.\n    float j, i = 0.;\n    \n    // In order to save characters, it's customary to dispense with the early break.\n    // Of course, that means we're effectively calling the function for the entire loop\n    // count. Therefore, I figured I may as well try to take advantage of that... in as\n    // few characters as possible. :)\n\n    // Compiler's nightmare loop. :)\n    //\n    // Sketchy way to write a 100-count loop. Thanks to Aeikick for reminding me of that.\n    // It's tempting to stick the first line after the second semicolon, but I think it'll be\n    // skipped on the first iteration.\n    //for(int i=99; i-->0;)\n    // Slower \"float\" based loop, but uses fewer charaters. \"i\" is declared with \"j\"... It was \n    // BigWings's suggestion to  Nesvi7, so if it doesn't work, blame him. D\n    //for(; i++<1e2;) \n    while (i++<1e2) // Cleaner Web 2.0 suggestion, but Abje.\n        \n        // The distance function. Normally, the \"/3.\" wouldn't be there, but things have \n        // been shuffled around to save a few characters. By the way, the return distance, \"m(o),\"\n        // is absolute to ensure that the ray continues travelling forward.    \n        j = m(o)/3.,\n        \n        // If the distance to the surface comes within a certain threshold, add some lighting\n        // based on said distance. The \"m(o + const)\" is an old trick. It's kind of a meld between \n        // directional derivative lighting and occlusion... Something like that anyway. \"j\" is\n        // represetative of the current ray-to-surface distance. \"o.z\" is a rough approximation\n        // of the total distance, and is used for attenuation. Using \"o.z\" has the added benefit of\n        // giving the lighting a slight parallax feel.\n        //\n        // On a side note, using an \"if\" statement cuts down on characters, but I wanted this to\n        // be branchless to save a few cycles.\n        //\n        // IQ's suggestion: Faster, and saves some characters. I'd originally used a step function,\n        // which is apparently slower than the following. I read somewhere that the ternary \n        // operator isn't guaranteed not to branch on nontrivial calculations, but chances are\n        // minimal, or something to that effect. I've also read that it never branches with certain\n        // shader languages? ... I'll leave the debate to the experts. :)\n        // Fabrice suggested a couple of obvious changes to cut it down some more.\n        c -= j<.01 ? (j - .01)*m(o + .1)/(.02 + o.z/2e2) : 0.,\n        \n        // Advance the ray in such a way that it encourages it to pass closely to the surface, but\n        // continue on its way.\n        o += max(.01, j)*d;\n                           \n\n    // Cheap color... I'd need to cut this down further to fit it in, but I prefer the black and \n    // white look anyway.\n    // c.xyz += d/o.z;\n    ////c.zyx += .1 + d*.2; //Etc.\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}