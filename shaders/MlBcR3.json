{
    "Shader": {
        "info": {
            "date": "1509471012",
            "description": "Allows viewing a texture and it's log-polar representation.\nClick into the upper-left box to change center.\nComment out LOG_POLAR to get the polar representation.\nComment out ANIM_MASTER to disable animations.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlBcR3",
            "likes": 14,
            "name": "(Log)-Polar Texture Viewer",
            "published": 3,
            "tags": [
                "visualization",
                "polar",
                "window",
                "logpolar"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 823
        },
        "renderpass": [
            {
                "code": "//#define OFFCENTER // uncomment: fixed frame, comment: transform frame\n#define LOG_POLAR\n#define LOG_BIAS 2.0\n#define RING_FREQ 1.0\n#define ANIM_MASTER 1.0\n\n#define PI radians(180.0)\n\n#define ANIM_TURN (anim_on && (mod(iTime, 24.0) < 16.0))\n#define ANIM_SCALE (anim_on && (mod(iTime + 8.0, 24.0) < 16.0))\n#ifndef ANIM_MASTER\n\t#define ANIM_MASTER 0.0\n#endif\n#define ANIM_AMPLITUDE (ANIM_MASTER * (0.5 - 0.5 * cos(iTime*PI/4.0)))\n#define TURN_FREQ (1.0*PI)\n#define SCALE_FREQ (1.0*PI)\n\nbool log_dot = false;\nbool anim_on = false;\nvec2 win_mouse;\nvec2 win_size;\nfloat win_scale = 1.0;\n\nvec4 red = vec4(1.0,0.0,0.0,1.0);\nvec4 black = vec4(0.0,0.0,0.0,1.0);\n\nvoid texture_uv( inout vec4 fragColor, in vec2 uv)\n{\n    fragColor = texture(iChannel0, uv);\n}\n\nvoid set_hue( inout vec4 fragColor, in vec2 uv)\n{\n    float hue = atan(uv.y, uv.x);\n    \n    fragColor = vec4(\n        0.5 + 0.5 * vec3(cos(hue - radians(0.0)), cos(hue - radians(120.0)), cos(hue - radians(240.0))),\n        1.0\n   \t);\n}\n\nfloat smoothstep1(float a, float b, float x)\n{\n    return smoothstep(a, b, abs(x) / fwidth(x) / 1.);\n    return smoothstep(a, b, abs(x));\n}\n\nvoid dot_uv( inout vec4 fragColor, in vec2 uv, in float frq)\n{\n    frq *= PI;\n    float dist = length(uv);\n    \n    vec4 col;\n    set_hue(col, uv);\n    \n    float f = sin(log(dist) * frq);\n    if (log_dot)\n    \tf = smoothstep1(0.0, 1.0, f / frq * win_size.y * 0.5);\n   \telse\n    \tf = smoothstep1(0.0, 1.0, f * dist / frq * win_scale);\n    \n    fragColor = mix(col, fragColor, f);\n}\n\nvoid combined_uv( inout vec4 fragColor, in vec2 uv)\n{\n    if (ANIM_TURN)\n    {\n        uv -= win_mouse;\n        float angle = sin(iTime * TURN_FREQ) * ANIM_AMPLITUDE;\n        vec2 v1 = vec2(cos(angle), sin(angle));\n        vec2 v2 = vec2(-v1.y, v1.x);\n        uv = v1 * uv.x + v2 * uv.y;\n        uv += win_mouse;\n    }\n    \n    if (ANIM_SCALE)\n    {\n        uv -= win_mouse;\n        float scale = exp(cos(iTime * SCALE_FREQ) * ANIM_AMPLITUDE);\n        uv *= scale;\n        win_scale = 1.0/scale;\n        uv += win_mouse;\n    }\n    \n    texture_uv(fragColor, uv);\n    dot_uv(fragColor, (uv - win_mouse) * win_size, RING_FREQ);\n}\n\nvec2 log_polar( in vec2 pd )\n{\n    return vec2(cos(pd.x), sin(pd.x)) * exp(pd.y);\n}\n\nvec2 polar( in vec2 pd )\n{\n    return vec2(cos(pd.x), sin(pd.x)) * pd.y;\n}\n\nvec3 window( inout vec4 fragColor, in vec2 uv, in vec2 pos, in vec2 size, in bool enabled)\n{\n    vec3 mouse = vec3((iMouse.xy - pos) / size, 0.0);\n\n    uv -= pos;\n    uv /= size;\n    \n    if (iMouse.xy == vec2(0.0, 0.0))\n        mouse.xy = vec2(0.5, 0.5);\n    \n    win_size = size;\n    if (enabled)\n\t    win_mouse = mouse.xy;\n    \n    if (floor(uv) == vec2(0))\n    {\n        mouse.z = 1.0;\n        combined_uv(fragColor, uv);\n        \n        vec2 grid = abs(uv - floor(uv + 0.5)) * size;\n        if (min(grid.x, grid.y) < 1.0)\n            fragColor = mix(black, red, enabled ? 1.0 : 0.5);\n        \n    }\n    \n    return mouse;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 size = max(min(vec2(150.0), vec2(iResolution.xx / 4.0)), vec2(iResolution.yy / 3.0));\n    vec3 mouse = window(fragColor, fragCoord,\n    \tvec2(10, iResolution.y - size.y - 10.0),\n        size,\n        true\n    );\n    \n    anim_on = true;\n    if (mouse.z == 0.0)\n    {\n        vec2 uv = fragCoord;\n        uv.x -= iResolution.x / 2.0;\n        \n        vec2 img = uv;\n        img /= iResolution.xy / 2.0;\n        img.x *= PI;\n        img.y *= 1.0;\n \n        #ifdef LOG_POLAR\n        \tlog_dot = true;\n        \timg = log_polar(img * vec2(1.0, 2.0) - vec2(0.0, LOG_BIAS));\n        #else\n        \timg = polar(img);\n        #endif\n        \n        #ifdef OFFCENTER\n            img = 0.5 + img;\n        #else\n            img = win_mouse + img;\n        #endif\n        \n        combined_uv(fragColor, img);\n    }\n    \n    win_scale = 1.0;\n    log_dot = false;\n    window(fragColor, fragCoord,\n    \tvec2(iResolution.x - size.x - 10.0, iResolution.y - size.y - 10.0),\n        size,\n        false\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}