{
    "Shader": {
        "info": {
            "date": "1492624167",
            "description": "Procedural laser show of three elementary colors combined in interesting ways. Use mouse controls to lock and override the pattern. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MdjyzG",
            "likes": 26,
            "name": "Laser Showtime",
            "published": 3,
            "tags": [
                "2d",
                "reflection",
                "line",
                "ao",
                "laser"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 1611
        },
        "renderpass": [
            {
                "code": "#line 2\n//////////////////////////////////////////////\n//\n// Laser show by Timo Kinnunen 2017\n//\n// Use mouse to override the default cycling\n// pattern.\n//\n// Based on line AO by snake5 \n// @ https://www.shadertoy.com/view/XsjyRy\n//\n// Licensed under default Shadertoy license.\n//\n//////////////////////////////////////////////\n\nconst float bidpScale = -0.25; //0.25;\nconst float bidpAdd = 0.75;\nconst float falloffDist = 100.0;\nconst float falloffCurve = 0.2; //0.4;\n\nfloat lineAOv2(vec2 pos, vec2 line0, vec2 line1) {\n\tvec2 dir = normalize(line1- line0);\n\tvec2 rt = vec2(-dir.y,dir.x);\n\tfloat tp0 = dot(rt,line0);\n\tfloat tpx = dot(rt,pos);\n\tfloat bidp = dot(normalize(line0- pos),normalize(line1- pos))* bidpScale+ bidpAdd;\n\tfloat distf = clamp(abs(tp0- tpx)/ falloffDist,0.0,1.0);\n\treturn 1.0- (1.0- bidp)* (1.0- pow(distf,falloffCurve));\n}\nfloat lineAOx2(vec2 pos, vec2 line0, vec2 line1, vec2 line2) {\n\treturn lineAOv2(pos,line0,line1)* lineAOv2(pos,line1,line2);\n}\nfloat vee(vec2 pos, vec2 line0, vec2 line1) {\n\treturn lineAOx2(pos,line0,line1,vec2(line1.x* 2.- line0.x,line0.y));\n}\nvec3 vee3(vec2 uv, vec3 x1, vec3 y1, vec3 x2, vec3 y2) {\n\treturn vec3(\n        vee(uv,vec2(x1.r,y1.r),vec2(x2.r,y2.r)),\n        vee(uv,vec2(x1.g,y1.g),vec2(x2.g,y2.g)),\n        vee(uv,vec2(x1.b,y1.b),vec2(x2.b,y2.b)));\n}\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n\tconst float duration1 = 15.;\n\tconst float duration2 = 30.* duration1;\n\tfloat beg = (iMouse.y> 15.)? (iMouse.y- 15.)/ (iResolution.y- 15.): abs(2.* fract(iTime/ duration1)- 1.);\n\tfloat end = (iMouse.x> 15.)? (iMouse.x- 15.)/ (iResolution.x- 15.): abs(2.* fract(iTime/ duration2)- 1.);\n\tbeg = floor(60.* beg- 30.);\n\tend = beg+ ceil(30.* end);\n\n\tvec2 uv = fragCoord.xy/ iResolution.xy* vec2(1920,1200);\n\tconst float midpoint = 300.0;\n\tfloat fade = smoothstep(midpoint- 2.,midpoint+ 2.,uv.y);\n\tuv.y = abs(uv.y- midpoint)+ midpoint;\n\n\tvec3 s = vec3(0.9);\n\tfor(float k = 0.; k< 30.; k++) {\n\t\tfloat i = beg+ k;\n\t\tif(i>= end) break;\n\t\ti = mod(i+ 15.,30.0)- 15.;\n\t\tvec3 ys = sin(iTime* .5+ vec3(0,.125,.25));\n\t\tvec3 y1 = midpoint+ (25.+ 25.* ys* 6.)* i;\n\t\tvec3 y2 = midpoint+ (20.+ 20.* ys* 5.)* i;\n\t\tvec3 x1 = vec3(100,850,1600)+ 10.* i;\n\t\tvec3 x2 = vec3(200,955,1710);\n\t\ts *= vee3(uv,x1,y1,x2,y2);\n\t}\n\tfloat r = s.r,g = s.g,b = s.b;\n\n\tvec3 color = vec3(g+ b- g* b,r+ b- r* b,r+ g- r* g)- r* g* b;\n\tcolor = pow(color,vec3(5.- 2.* fade));\n\tcolor *= 1.0+ 0.5* fade;\n\tfragColor = vec4(color,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}