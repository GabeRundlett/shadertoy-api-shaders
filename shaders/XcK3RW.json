{
    "Shader": {
        "info": {
            "date": "1712484145",
            "description": "Perlin turbulence combines abs(base_noise).   here, used to perturbates distance to disc, as for hypertextures.\nabs() gives a floffy look, \n1.-abs() gives a peaky look.\nplay with the multiplier !",
            "flags": 0,
            "hasliked": 0,
            "id": "XcK3RW",
            "likes": 34,
            "name": "peaky/floffy Perlin hypertexture",
            "published": 3,
            "tags": [
                "perlinnoise",
                "hypertexture",
                "short",
                "gradientnoise",
                "isovalue"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// from https://www.shadertoy.com/view/4cVGRW\n\n#define R       iResolution\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                      // rotation \n\n// Perlin noise adapted from https://shadertoy.com/view/wtf3R2\n#define P       ( v = smoothstep(0.,1.,fract(V)), 2.*abs(mix( Pz(0), Pz(1), v.z)) )\n#define Pz(z)     mix( Py(0,z), Py(1,z), v.y)\n#define Py(y,z)   mix( Px(0,y,z), Px(1,y,z), v.x)\n#define Px(x,y,z) dot( H( C = floor(V) + vec3(x,y,z) ), V-C )\n#define H(p)    ( 2.* fract(sin( (p) * mat3(R,73.-R,R.zxy))*3758.54) -1.)\n\nfloat map(vec3 V)\n{\n    float l =  length(V) -.6 ;             // disc\n    vec3 C, v; V.y += .2*iTime;\n    float i,s=1., p;\n    for ( ; i++ < 4. ; V *= 2., s *= 2. )  // Perline turbulence\n        p += P/s;\n    p /= 2.; p -= .274;                    // mean: .274 std: .217\n // p *= 1. + (iMouse.x/R.x -.5)*3.;       // mouse gain ( â†’ comment 34 mouse cam )\n    if ( fract(iTime/5.) < .5 )\n        l +=  1.5* p ;                     // make peaky\n    else\n         l -=  1.* p ;                     // make floffy\n    return l;\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.;\n    vec3  D = normalize(vec3(U+U, -12.*R.y) - R),          // ray direction\n          p = vec3(0,0,15), q, r,                          // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5 :           // comment for no mouse cam\n                 vec3( .15,.07,0) * cos(.3*iTime + vec3(0,11,0)); \n          \n    for (O=vec4(1); O.x > 0. && t > .01 && p.z>-5.; O-=.01)// march scene\n        q = p,\n        q.yz *= rot(-6.*M.y),                              // rotations\n        q.xz *= rot(-6.*M.x-1.57),\n     // t = 9.,\n        t = min(t, map(q)),                                // full 3D shape, \n        p += .5*t*D;                                       // step forward = dist to obj          \n\n   O *= O * 1.1;                                           // color scheme\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}