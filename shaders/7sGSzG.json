{
    "Shader": {
        "info": {
            "date": "1640598552",
            "description": "Inspired by an electric gems video cover",
            "flags": 0,
            "hasliked": 0,
            "id": "7sGSzG",
            "likes": 17,
            "name": "Exocube",
            "published": 3,
            "tags": [
                "retro",
                "cube",
                "hexagone"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 464
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    vec3 l2 = abs(l)-th;\n    \n    float x = max(l2.y, l2.z);\n    float y = max(l2.x, l2.z);\n    float z = max(l2.x, l2.y);\n    float cucube = max(min(min(x, y), z), cube);\n    return cucube;\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    acc = _min(acc, vec2(-(abs(p.y)-1.), 0.));\n    p.xy *= r2d(iTime*.76);\n    p.xz *= r2d(iTime*.5);\n    acc = _min(acc, vec2(_cucube(p, vec3(.5), vec3(.02)), 1.));\n    return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+r*uv.x+u*uv.y);\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p,ro), res.y);\n        p+= rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nvec3 palette(float f)\n{\n    vec3 cols[6];\n    cols[0] = vec3(1.000,0.871,0.522);\n    cols[1] = vec3(1.000,0.608,0.059);\n    cols[2] = vec3(1.000,0.302,0.000);\n    cols[3] = vec3(0.565,0.180,0.325);\n    cols[4] = vec3(0.196,0.145,0.208);\n    cols[5] = vec3(0.122,0.106,0.102);\n    float coef = f*5.;\n    int idx = int(coef);\n    return mix(cols[idx], cols[min(idx+1,5)], fract(coef));\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    float dist = 10.;\n    float t = iTime*.25;\n    vec3 ro = vec3(sin(t)*dist,-0.5,cos(t)*dist);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = normalize(cross(dFdx(p), dFdy(p)));\n        col = n*.5+.5;\n        if (res.z == 0.)\n        {\n\n        vec2 uvp = p.xz;\n        vec2 rep = vec2(1.,1.7);\n        vec2 idx = floor(((uvp+rep*.5)/rep));\n        uvp = mod(uvp+rep*.5,rep)-rep*.5;\n        float an = atan(uvp.y,uvp.x);\n        float astp = PI*2./6.;\n        float sector = mod(an+astp*.5,astp)-astp*.5;\n        //uvp -= vec2(0.,0.5);\n        uvp = vec2(sin(sector), cos(sector))*length(uvp);\n        uvp -= vec2(0.,.5);\n        col = mix(col, col*.5, 1.-sat((uvp.y)*400.));\n        \n        vec2 uvp2 = p.xz+rep*.5;\n        vec2 idx2 = floor(((uvp2+rep*.5)/rep));\n        uvp2 = mod(uvp2+rep*.5,rep)-rep*.5;\n        float an2 = atan(uvp2.y,uvp2.x);\n        float sector2 = mod(an2+astp*.5,astp)-astp*.5;\n        //uvp -= vec2(0.,0.5);\n        uvp2 = vec2(sin(sector2), cos(sector2))*length(uvp2);\n        uvp2 -= vec2(0.,.5);\n        col = mix(col, col*.5, 1.-sat((uvp2.y)*400.));\n        col = palette(sin(sign(uv.y)*idx.x+iTime)*.5+.5);\n        idx *= r2d(iTime*.15*sign(p.y));\n        idx2*= r2d(-iTime*.25*sign(p.y));\n        float shape = _sqr(idx,vec2(.5));\n        float shape2 = _sqr(idx2-vec2(.5),vec2(.5));\n        col = vec3(0.);\n        col = mix(col, palette(sat(shape*.12)), 1.-sat((uvp.y)*400.));\n        col = mix(col, palette(sat(shape2*.12)), 1.-sat((uvp2.y)*400.));\n          }\n                else\n                {\n                    col = vec3(1.);\n                }\n    }\n    else\n        col = mix(vec3(0.1), vec3(0.875,0.490,0.949), 1.-sat(abs(rd.y)*15.))*.125;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    uv *= r2d(PI*.125*sin(iTime*.25));\n    vec3 col = rdr(uv);\n    \n    vec2 off = (vec2(1., -1.)/(iResolution.x*2.));\n    if (true) // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}