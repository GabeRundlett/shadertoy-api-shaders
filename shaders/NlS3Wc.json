{
    "Shader": {
        "info": {
            "date": "1624810415",
            "description": "logo of prague hackerspace brmlab",
            "flags": 0,
            "hasliked": 0,
            "id": "NlS3Wc",
            "likes": 1,
            "name": "Brmlab logo",
            "published": 3,
            "tags": [
                "logo"
            ],
            "usePreview": 0,
            "username": "lanikjo",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "//\n// GLSL Brmlab logo\n// Copyright (c) 2021 Jovan Lanik\n//\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfloat doCircle(vec2 uv, float x, float y, float size) {\n    return floor(length(uv+vec2(x, y)) - size + 0.988);\n}\n\nfloat doRing(vec2 uv, float x, float y, float size, float thicc) {\n    float ring = length(uv+vec2(x, y)) - size;\n    ring = abs(ring) * thicc;\n    ring = floor(ring);\n    return ring;\n}\n\nfloat doBrm(vec2 uv, float x, float y, float size) {\n    float ringSize = 0.425;\n    float detailThicc = 80.0;\n\n    uv += vec2(x, y);\n    uv *= size;\n    \n    float ring = doRing(uv, 0.0, 0.0, ringSize, 40.0);\n    \n    float small = doRing(uv, 0.0, 0.0, ringSize - 0.1, detailThicc);\n    \n    small = max(small, 1.0 - doCircle(uv, 0.0, -0.33, 0.07));\n    small = min(small, doRing(uv, 0.0, -0.33, 0.07, detailThicc));\n    \n    small = max(small, 1.0 - doCircle(uv, 0.25, 0.21, 0.07));\n    small = min(small, doRing(uv, 0.25, 0.21, 0.07, detailThicc));\n    \n    small = max(small, 1.0 - doCircle(uv, -0.25, 0.21, 0.07));\n    small = min(small, doRing(uv, -0.25, 0.21, 0.07, detailThicc));\n    \n    small = max(small, doCircle(uv, 0.0, 0.0, ringSize - 0.1));\n    \n    vec2 boxV = uv * 1.0;\n    boxV = abs(boxV) * 1.0;\n    boxV -= 0.04;\n    boxV.x -= 0.04;\n    boxV = abs(boxV) * 80.0;\n    boxV = floor(boxV);\n    boxV.x = max(boxV.x, floor(abs(uv.y)*19.0));\n    boxV.y = max(boxV.y, floor(abs(uv.x)*12.0));\n    float box = min(boxV.x, boxV.y);\n \n    float put = min(ring, small);\n    put = min(put, box);\n    put = min(put, doRing(uv, 0.0, -0.16, 0.035, detailThicc));\n    put = min(put, doRing(uv, 0.15, -0.16, 0.035, detailThicc));\n    put = min(put, doRing(uv, -0.15, -0.16, 0.035, detailThicc));\n    \n    put = min(put, doRing(uv, 0.20, 0.05, 0.035, detailThicc));\n    put = min(put, doRing(uv, -0.20, 0.05, 0.035, detailThicc));\n    \n    put = min(put, doRing(uv, 0.08, 0.20, 0.035, detailThicc));\n    put = min(put, doRing(uv, -0.08, 0.20, 0.035, detailThicc));\n    \n    return put;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float var = (sin(iTime*20.0)+1.0)*0.01 + 1.0;\n    \n    float put = doBrm(uv, 0.0, 0.0, var);\n    \n    put = 1.0 - put;\n    fragColor = vec4(put, put, put, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}