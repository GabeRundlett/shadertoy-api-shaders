{
    "Shader": {
        "info": {
            "date": "1701501424",
            "description": "livecoded in ~45 min",
            "flags": 32,
            "hasliked": 0,
            "id": "mtdfzl",
            "likes": 12,
            "name": "Inercia 2023 jam",
            "published": 3,
            "tags": [
                "livecoding",
                "inercia"
            ],
            "usePreview": 0,
            "username": "kostik1337",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BPM 130.\n#define INF (1e10)\n#define time iTime\n#define beat (time*BPM/60.)\n#define PI 3.1415926536\n#define rep(p,s) (mod(p,s)-s/2.)\n#define rep2(p,s) (abs(rep(p,2.*s))-s/2.)\n\nfloat hash(float t) {return fract(sin(t)*35628.54654);}\nfloat hash(vec2 t) {return hash(dot(t, vec2(12.6456, 32.63456345)));}\nfloat hash(vec3 t) {return hash(dot(t, vec3(12.6456, 32.63456345, 48.546984)));}\n\nvec3 back(vec2 uv){return texture(iChannel0, uv).rgb;}\nfloat ffts(float t) {return 0.;}\n\nvec3 ct(vec3 p) {\n  if(p.x<p.y) p.xy = p.yx;\n  if(p.y<p.z) p.yz = p.zy;\n  if(p.x<p.y) p.xy = p.yx;\n  return p;\n}\n\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  float m=max(p.x, max(p.y,p.z));\n  return m>0.? length(p): m;\n}\n\nmat2 mr(float t) {float c=cos(t),s=sin(t); return mat2(c,s,-s,c);}\n\nfloat beatstep(float t, float a) {return floor(t) + smoothstep(0., a, fract(t));}\n\nvec2 polar(vec2 p, float n) {\n  p = vec2(length(p), atan(p.y, p.x));\n  p.y = rep(p.y, PI/n);\n  return p.x * vec2(cos(p.y), sin(p.y));\n}\n\n#define quant(t,s) (floor(t/s)*s)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    vec3 c = vec3(0.);\n    vec3 O=vec3(0.,0.,-1.);\n    vec3 D = vec3(uv, 1.);\n    D.z *= 1.-.8*length(D.xy);\n    D=normalize(D);\n    float I=64.;\n    for(float i=0.; i<I; ++i) {\n        float d = mix(0.1, 5., i/I + hash(uv+time+i));\n        d /= D.z;\n        vec3 op = O+D*d;\n\n        {\n          vec3 p=op;\n          p.z += time;\n          vec3 pos=floor(p-.5);\n          p = rep(p, 1.);\n          p.xz *= mr(beat+hash(pos*1.17));\n          p = ct(abs(p));\n          float m = box(p, vec3(.1, vec2(.01)));\n          float amp = 1.+exp(-fract(beat+quant(hash(pos), .8)));\n          c += amp * .003 / abs(m) * exp(-d*.5);\n        }\n\n        {\n          vec3 p=op;\n          p.z += time;\n          float pz = floor(p.z);\n          p.xy *= mr(p.z + PI/4.*beatstep(beat/4. + quant(hash(pz*1.886), .5) + hash(uv+i+time)*.2, .1));\n          p.z = rep(p.z, 1.);\n          vec3 s=vec3(.2, .2, .02);\n          p = mix(p, ct(abs(p))-.2, .5+.5*cos(PI*beatstep(beat/8., .3)));\n          float m = box(p, s);\n          m = max(m, -box(p, vec3(s.xy-.02, INF)));\n          float amp = 1.+exp(-fract(beat+quant(hash(pz), .8)));\n          c += amp * .008 / abs(m) * exp(-d*.5);\n        }\n\n        {\n          vec3 p=op;\n          p.z += time;\n          float phaseoff = 0.;\n          phaseoff = hash(uv+i+.17*time) * (.5+.5*sin(beat/4.));\n          p.xy *= mr(beatstep(p.z*.2 + phaseoff, .8));\n          p.xy = polar(p.xy, 5.);\n          p.x -= 1.5;\n          float m = length(p.xy)-.05;\n          c += .005 / abs(m) * exp(-d*.5);\n        }\n    }\n    uv = gl_FragCoord.xy / iResolution.xy;\n    vec2 e=vec2(.002, .0);\n    e *= 1.+3.*exp(-3.*fract(beat));\n    vec3 prev = vec3(\n        back(uv-e).r,\n        back(uv).g,\n        back(uv-e).b\n    );\n    prev = min(prev, vec3(2.));\n    c = mix(c, prev.xyz, .7);\n\n    fragColor = vec4(c, 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}