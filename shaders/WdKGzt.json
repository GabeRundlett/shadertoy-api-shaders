{
    "Shader": {
        "info": {
            "date": "1570754958",
            "description": "This shader ray marches a height map. You can be adapt it to any height map if you know an upper bound on the slope of the secant lines. Using this information, a signed distance estimate can be generated. Smaller upper bounds make it faster.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdKGzt",
            "likes": 13,
            "name": "Raymarching a height map",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "heightmap"
            ],
            "usePreview": 0,
            "username": "TheKing",
            "viewed": 2696
        },
        "renderpass": [
            {
                "code": "const float angle = 1.;\nconst mat2 m1 = mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n\nvec3 transform(vec3 p) {\n    mat2 m2 = mat2(cos(iTime),-sin(iTime),sin(iTime),cos(iTime));\n    p.yz *= m1;\n    p.xy *= m2;\n    return p;\n}\n\nconst float slopeUB= 2.;\nconst float g = sin(atan(1.,slopeUB));\n\nfloat sde(vec3 p) {\n    float h = (sin(p.x) + sin(p.y));\n    return (p.z-h)*g;\n    \n}\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n    vec3 p = ro + rd*0.001;\n    while(true) {\n        float d = sde(p);\n        if (d < 0.0001) {break;}\n        p += rd*d;\n        if (length(p-ro) > 200.) {break;}\n    }\n    return p;\n}\n\nconst vec2 helper = vec2(1e-5,0);\n\nfloat light(vec3 l, vec3 p) {\n    float d = sde(p);\n    vec3 norm = normalize(vec3(\n        sde(p + helper.xyy) - d,\n        sde(p + helper.yxy) - d,\n        sde(p + helper.yyx) - d\n        ));\n    vec3 ld = normalize(l-p);\n    float s = max(0.,dot(ld, norm));\n    if (s > 0.) {\n        if (length(rayMarch(p,ld)-p) < length(l-p)) {\n            return 0.;\n        }\n    }\n    return s;\n}\n\nconst vec3 l = vec3(0,10,5);\nconst vec3 ro = vec3(0,0,15);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 c = vec3(15.*uv,3);\n    vec3 ro_ = ro;\n    c = transform(c);\n    ro_ = transform(ro_);\n    \n    vec3 p = rayMarch(ro_, normalize(c - ro_));\n\n    vec3 col = vec3(light(l, p));\n    \n    float d = length(p-ro_);\n    col -= vec3(smoothstep(0.,200.,d));\n    col = min(vec3(1),col);\n    \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}