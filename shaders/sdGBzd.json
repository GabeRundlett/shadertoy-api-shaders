{
    "Shader": {
        "info": {
            "date": "1658687551",
            "description": "The makers of Nubis (real time cloud rendering) used a quarter res buffer to update 1/16th of the pixels each frame. The previous frame is reprojected so there is always something on the screen. Which pixels are updated depends upon their screen coords.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdGBzd",
            "likes": 5,
            "name": "[DRG] Sequential Screen Update",
            "published": 3,
            "tags": [
                "pixel",
                "optimisation"
            ],
            "usePreview": 0,
            "username": "Draugurinn",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "// There is no reprojection here. This shader simply showcases\n// how to selectively render to pixels within each block.\n\n// Controls the frequency at which we cycle through the matrix\nconst int PIXEL_SWITCH_DELAY = 32;\n\n// 4x4 Bayer Matrix\n\n// The matrix specifies the order to use to select pixels within the 4x4 block\n\n// | 11 |  7 | 10 |  6 |\n// |----|----|----|----|\n// |  3 | 15 |  2 | 14 |\n// |----|----|----|----|\n// |  9 |  5 | 12 |  8 |\n// |----|----|----|----|\n// |  1 | 13 |  4 | 16 |\n\nconst ivec2[] pixel = ivec2[]\n(\n    ivec2( 0, 0),\n    ivec2( 2, 2),\n    ivec2( 0, 2),\n    ivec2( 2, 0),\n    ivec2( 1, 1),\n    ivec2( 3, 3),\n    ivec2( 1, 3),\n    ivec2( 3, 1),\n    ivec2( 0, 1),\n    ivec2( 2, 3),\n    ivec2( 0, 3),\n    ivec2( 2, 1),\n    ivec2( 1, 0),\n    ivec2( 3, 2),\n    ivec2( 1, 2),\n    ivec2( 3, 0)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalised pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Time varying pixel colour\n    vec4 col = 0.5 + 0.5 * cos(iTime + uv.xyxy + vec4(0,2,4,0));\n    \n    int idx = (iFrame / PIXEL_SWITCH_DELAY) % 16;\n    \n    if (ivec2(fragCoord) % 4 == pixel[idx])\n    {\n        fragColor = col;\n        return;\n    }\n\n    // Output to screen\n    fragColor = vec4(0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}