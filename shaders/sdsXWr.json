{
    "Shader": {
        "info": {
            "date": "1618512451",
            "description": "Lets make a Newtons Cradle",
            "flags": 8,
            "hasliked": 0,
            "id": "sdsXWr",
            "likes": 44,
            "name": "Newton's Cradle Tutorial",
            "published": 3,
            "tags": [
                "newtonscradle",
                "artofcode"
            ],
            "usePreview": 1,
            "username": "BigWIngs",
            "viewed": 1945
        },
        "renderpass": [
            {
                "code": "// \"Newton's Cradle Tutorial\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n// Patreon: https://www.patreon.com/TheArtOfCode\n//\n// This is the end-result of a tutorial I have on YouTube.\n// If you want to follow along you can start here:\n// https://youtu.be/nd7Auhb9YN8\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 6.\n#define SURF_DIST .001\n\n#if HW_PERFORMANCE!=0\n#define USE_AA\n#endif\n\n#define S smoothstep\n#define T iTime\n\nconst int MAT_BASE=1;\nconst int MAT_BARS=2;\nconst int MAT_BALL=3;\nconst int MAT_LINE=4;\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(vec2 p, vec2 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, p.y), 0.);\n}\n\nfloat sdLineSeg(vec3 p, vec3 a, vec3 b) {\n    vec3 ap=p-a, ab=b-a;\n    float t = clamp(dot(ap, ab)/dot(ab, ab), 0., 1.);\n    vec3 c = a + ab*t;\n    return length(p-c);\n}\n\nvec2 sdBall(vec3 p, float a) {\n    \n    p.y-=1.01;\n    p.xy *= Rot(a);\n    p.y+=1.01;\n    \n    float ball = length(p)-.15;\n    float ring = length(vec2(length(p.xy-vec2(0, .15))-.03, p.z))-.01;\n    ball = min(ball, ring);\n    \n    p.z = abs(p.z);\n    float line = sdLineSeg(p, vec3(0,.15,0), vec3(0, 1.01, .4))-.005;\n    \n    float d = min(ball, line);\n    \n    return vec2(d, d==ball ? MAT_BALL : MAT_LINE);\n}\n\nvec2 Min(vec2 a, vec2 b) {\n    return a.x<b.x ? a : b;\n}\n\nvec2 GetDist(vec3 p) {\n    float base = sdBox(p, vec3(1,.1,.5))-.1;\n    float bar = length( vec2(sdBox(p.xy, vec2(.8,1.4))-.15, abs(p.z)-.4) )-.04;\n    \n    base += sin(p.x*10.)*.001;\n    \n    float \n        a = sin(iTime*3.),\n        a0 = a*.03,\n        a1 = min(0., a),\n        a5 = max(0., a);\n    \n    vec2 \n        b1 = sdBall(p-vec3(.6,.5,0), a0+a1),\n        b2 = sdBall(p-vec3(.3,.5,0), a0+(a+a1)*.05),\n        b3 = sdBall(p-vec3(0,.5,0), a0+a*.05),\n        b4 = sdBall(p-vec3(-.3,.5,0), a0+(a+a5)*.05),\n        b5 = sdBall(p-vec3(-.6,.5,0), a0+a5);\n    \n    vec2 balls = Min(b1, Min(b2, Min(b3, Min(b4, b5))));\n    \n    float d = min(base, bar);\n    d = min(d, balls.x);\n    \n    d = max(d, -p.y); // cut off the bottom\n    \n    int mat = 0;\n    \n    if(d==base)\n        mat = MAT_BASE;\n    else if(d==bar)\n        mat = MAT_BARS;\n    else if(d==balls.x)\n        mat = int(balls.y);\n        \n    return vec2(d, mat);\n}\n\n\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    vec2 dSMat = vec2(0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        dSMat = GetDist(p);\n        dO += dSMat.x;\n        if(dO>MAX_DIST || abs(dSMat.x)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, dSMat.y);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec4 Render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last) {\n    vec3 col = texture(iChannel0, rd).rgb;\n    vec2 dMat = RayMarch(ro, rd);\n    \n    ref *= 0.;\n    \n    float alpha = 0.;\n    if(dMat.x<MAX_DIST) {\n        vec3 p = ro + rd * dMat.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 refTex = texture(iChannel0, r).rgb;\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(0);\n        \n        int mat = int(dMat.y);\n        \n        float fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 5.);\n        fresnel = mix(.01, .7, fresnel);\n        if(mat==MAT_BASE) {\n            col += dif*.05;\n            ref = vec3(1)*fresnel;\n        } else if(mat==MAT_BARS) {\n            ref = vec3(.8);\n        } else if(mat==MAT_BALL) {\n            ref = vec3(.8, .6, .3);\n            if(last) col += refTex*ref;\n        } else if(mat==MAT_LINE)\n            col += dif*.1;\n            \n        ro = p + n*SURF_DIST*3.;\n        rd = r;\n        alpha = 1.;\n    }\n    return vec4(col, alpha);\n}\n\nvec3 RenderAll(vec2 pixCoord) {\n    vec2 uv = (pixCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.75,0), 2.);\n    vec3 col = vec3(0);\n    vec3 ref, fil=vec3(1);\n   \n    float numBounces = 3.;\n    for(float i=0.; i<numBounces; i++) {\n        vec4 pass = Render(ro, rd, ref, i==numBounces-1.);\n        col += pass.rgb*fil;\n        \n        fil*=ref;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    \n    vec3 col = RenderAll(fragCoord);\n    #ifdef USE_AA\n    col +=\n        RenderAll(fragCoord+vec2(.5,.0))+\n        RenderAll(fragCoord+vec2(.0,.5))+\n        RenderAll(fragCoord+vec2(.5,.5));\n    col /= 4.;    \n    #endif\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( int samp, float T )\n{\n    float \n        f = 3./3.1415,\n        t = fract(T*f),\n        m = smoothstep(.01, 0., t),\n        w = cos(t*1e5);\n    return vec2( w*m );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}