{
    "Shader": {
        "info": {
            "date": "1655706675",
            "description": "Trying to compute the curvature along an isovalue.\ninspiration: https://computergraphics.stackexchange.com/questions/5892/how-to-calculate-curvature-of-isoline-of-image\n\nwhat is this glitch at extrema ?",
            "flags": 0,
            "hasliked": 0,
            "id": "fsycDc",
            "likes": 13,
            "name": "curvature of an isovalue 2",
            "published": 3,
            "tags": [
                "2d",
                "curve",
                "curvature",
                "short",
                "isovalue"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "// alternative from https://shadertoy.com/view/fsKcDV\n// inspired by https://computergraphics.stackexchange.com/questions/5892/how-to-calculate-curvature-of-isoline-of-image\n// To answer Andrei Zelenco on the Fbk group: https://www.facebook.com/groups/shadertoy/posts/1111326822781676/\n\n#define R iResolution.xy\n//#define normalize(v) ( length(v) > 1e-5 ? normalize(v) : vec2(0) )\n\nfloat T( vec2 U ) { // === signed function to plot.\n // float v = texelFetch( iChannel0, ivec2(U), 0 ).r;\n // float v = texture( iChannel0, U/R+.01*iTime).r;                 // texture\n // float v = length( 2.*U - R ) / R.y;                             // circle\n    U = 3.*( U+U - R ) / R.y; float v = length(sin(U)+cos(U+U-iTime))/3.; // complex math shape\n    return ( v-.4 ) / fwidth(v);\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 D = vec2(2,0);\n   \n    O-=O;\n    float v = T(u);\n    vec2 G = normalize(vec2(- dFdy(v), dFdx(v)));           // isovalue tangent direction\n    float l = T(u-G), r = T(u+G);                           // check neighbors in tangent direction\n // O = vec4( 1.-abs(v));   return;         // isovalues test\n // O = vec4(.5+.5*cos(v)); return;         // isovalues test\n    \n  //l = ( v - (l+r)/2. ) * R.y/4.; // * R.y*R.y/36.;\n    l = (l+r)/2. - v; l = 2.*l / (1.-l*l) *R.y/10. ;\n    \n    O = vec4( l * vec2(1,-1), .3, 1 )                      // draw curvature R/G = sign\n        * clamp(2.-abs(v),0.,1.);                          // draw contour\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}