{
    "Shader": {
        "info": {
            "date": "1671144421",
            "description": "manual",
            "flags": 0,
            "hasliked": 0,
            "id": "DlX3zn",
            "likes": 12,
            "name": "outlook ship shader",
            "published": 3,
            "tags": [
                "manual"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "\n    \nfloat dot2(in vec2 v ) { return dot(v,v); }\nfloat f_sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n\n\tp.x = abs(p.x);\n    vec2 ca = vec2(max(0.0,p.x-((p.y<0.0)?r1:r2)), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    \n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\nfloat f_n_dist_squircle(vec2 o, float n_exp){\n    float n = pow(\n        (\n          pow(abs(o.x), n_exp) +\n          pow(abs(o.y), n_exp)\n        ),\n        abs(1./n_exp)\n    );\n    return n; \n}\nvec2 f_o_rotd(vec2 o, float n_ang){\n    return vec2(\n        cos(n_ang)*o.x - sin(n_ang)*o.y, \n        sin(n_ang)*o.x + cos(n_ang)*o.y\n    );\n}\nfloat f_n_rand(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat f_sdUnevenCapsule( in vec2 p, in vec2 pa, in vec2 pb, in float ra, in float rb )\n{\n    p  -= pa;\n    pb -= pa;\n    float h = dot(pb,pb);\n    vec2  q = vec2( dot(p,vec2(pb.y,-pb.x)), dot(p,pb) )/h;\n    \n    //-----------\n    \n    q.x = abs(q.x);\n    \n    float b = ra-rb;\n    vec2  c = vec2(sqrt(h-b*b),b);\n    float k = c.x*q.y - c.y*q.x;\n    float m = dot(c,q);\n    float n = dot(q,q);\n    \n         if( k < 0.0 ) return sqrt(h*(n            )) - ra;\n    else if( k > c.x ) return sqrt(h*(n+1.0-2.0*q.y)) - rb;\n                       return m                       - ra;\n}\n\nfloat f_n_dist_cloud(\n    vec2 o, \n    float n_seed\n){\n\n    float n_its = 10.;\n    float n_dist = 0.;\n    float n_d_min = 1.;\n    float n_len_sum = 0.;\n    o*= 3.;\n    float n_x_min = -1.;\n    float n_x_max = 1.;\n    float n_x_rang = n_x_max - n_x_min;\n    float n_rad = f_n_rand(1.*0.2+n_seed)*0.2+0.2;\n    float n_grad = 0.01;\n    float n_d_mul = 1.;\n    //level 1\n    n_its = 8.;\n    for(float n_it = 0.; n_it<n_its; n_it+=1.){\n        float n_rand_x = (f_n_rand(n_it+n_seed)-0.5)*n_x_rang;\n        float n_rand_y = ((f_n_rand(n_it*1.32+n_seed))*0.2)+.2;\n        float n_len = length(vec2(n_rand_x, n_rand_y)-o);\n        float n_rad = f_n_rand(n_it*0.2+n_seed)*0.2+0.3;\n        float n_grad = 0.01;\n        \n        n_len = smoothstep(n_rad+n_grad, n_rad, n_len);\n        n_len_sum+=n_len*(f_n_rand(n_it*23.23+n_seed))*0.22;\n        n_d_min = min(n_d_min, n_len);\n    }\n    n_its = 10.;\n    //level 2\n    for(float n_it = 0.; n_it<n_its; n_it+=1.){\n        float n_rand_x = (f_n_rand(n_it+n_seed*2.)-0.5)*n_x_rang*0.8;\n        float n_rand_y = ((f_n_rand(n_it*1.32+n_seed*2.))*0.2)+.4;\n        float n_len = length(vec2(n_rand_x, n_rand_y)-o);\n        float n_rad = f_n_rand(n_it*0.2+n_seed)*0.2+0.2;\n        float n_grad = 0.01;\n        n_len = smoothstep(n_rad+n_grad, n_rad, n_len);\n        n_len_sum+=n_len*(f_n_rand(n_it*23.23+n_seed))*0.22;\n        n_d_mul*=n_len*22.;\n        n_d_min = min(n_d_min, n_len);\n    }\n    //level 3\n    n_its = 15.;\n    for(float n_it = 0.; n_it<n_its; n_it+=1.){\n        float n_rand_x = (f_n_rand(n_it+n_seed*4.)-0.5)*n_x_rang*0.5;\n        float n_rand_y = ((f_n_rand(n_it*1.32+n_seed*2.))*0.2)+.8;\n        float n_len = length(vec2(n_rand_x, n_rand_y)-o);\n        float n_rad = f_n_rand(n_it*0.2+n_seed)*0.1+0.1;\n        float n_grad = 0.01;\n        n_len = smoothstep(n_rad+n_grad, n_rad, n_len);\n        n_len_sum+=n_len*(f_n_rand(n_it*23.23+n_seed))*0.22;\n        n_d_mul*=n_len*22.;\n        n_d_min = min(n_d_min, n_len);\n    }\n    \n    float n_sc = 0.2;\n    //float n_caps = f_sdUnevenCapsule(o, vec2(n_x_min,0.0), vec2(n_x_max,0.0), n_sc, n_sc);\n    //float n_caps_smstp = smoothstep(0.11, 0.1, n_caps);\n    float n_white = step(0.01,n_len_sum);\n    return n_white;\n}\nvec3 f_o_col_cloud(vec2 o, float n_seed){\n    float n = f_n_dist_cloud(o, n_seed);\n    return vec3(\n        .5 * n, \n        .5 * n, \n        1. * n\n    );\n}\nvec3 f_o_col_whale(vec2 o){\n    o.x +=0.3;\n    vec2 o_orig = o;\n    float n = 1.;\n    float nl = 1.;\n    float nf = 2.;\n    float nb = 0.1;\n    float n1 = 0.01+nb;\n    float n2 = 0.02+nb;\n    vec2 o_rtd = vec2(o);\n    vec3 o_col = vec3(0.);\n    float n_ang = 0.;\n    \n\n    o = f_o_rotd(o, 0.2);\n    o.x /=nf;\n    n = f_n_dist_squircle(o, 5.);\n    n = smoothstep(n2, n1, n);\n    o.x *=nf;\n    o_col += vec3(n);\n\n\n    nl = n;\n    o = f_o_rotd(o_orig, -0.1);\n    o.x /=nf;\n    o.y *=2.8;\n    o.x +=-0.005;\n    o.x *=0.89;\n    o.y +=nb*3.8;\n    \n    n = f_n_dist_squircle(o, 5.);\n    n = smoothstep(n2, n1, n);\n    n = nl * n + n;\n    o.y /=nf;\n    o_col += vec3(n);\n    o = o_orig;\n    o +=vec2(-0.3,-0.3);\n    n = length(o);\n    n = smoothstep(n2*4., n1*4., n);\n    //o_col += vec3(n*0.5);\n    \n    nl = n;\n    o = o_orig;\n    o +=vec2(-0.2,-.95);\n    n = length(o);\n    n = smoothstep(n1*8.+0.001, n1*8., n);\n    n = nl-n;\n    \n    o_col += vec3(n);\n    //o_col *= 100.;\n    o = o_orig;\n    o +=vec2(-0.76,-.3);\n    n = length(o);\n    n = smoothstep(n1*2.+0.001, n1*2., n);\n    //o_col += vec3(n);\n    \n    nl = n;\n    o = o_orig;\n    o +=vec2(-0.9,-.7);\n    n = length(o);\n    n = smoothstep(n1*4.+0.001, n1*4., n);\n    n = nl-n;\n    o_col += vec3(n);\n    \n    \n    o_col *= 1.;\n    \n    o_col = clamp(vec3(0.9), vec3(1.), o_col);\n    \n    vec3 o_cwhale = vec3(0.288,0.363,0.414);\n    \n    o_col =  vec3(o_col*o_cwhale);\n    \n    \n    nl = n;\n    o = o_orig;\n    o +=vec2(-0.2, 0.05);\n    n = length(o);\n    n = smoothstep(n2*0.3, n1*0.3, n);\n    o_col += vec3(n);\n    \n    nl = n;\n    o = o_orig;\n    o +=vec2(-0.2+(sin(iTime)*0.5)*0.025, (cos(iTime)*0.5+0.5)*0.025+0.0375);\n    n = length(o);\n    n = smoothstep(n2*0.2, n1*0.2, n);\n    o_col -= vec3(n);\n\n    return o_col; \n}\n\nvec3 f_o_col_ship(\n    vec2 o\n){\n    vec3 o_col = vec3(0.);\n    vec3 o_cbrown = vec3(0.486,0.251,0.18);\n    vec3 o_cwhite = vec3(0.9, 0.85, 0.95);\n    float n ;\n    o.y-=0.25;\n    \n    o.y+=0.25;\n    \n    o.y+=0.25;\n    \n    n = f_sdTrapezoid(o, 0.25, 0.5, 0.2);\n        n = smoothstep(0.002, 0.001, n);\n    o_col += n * o_cbrown;\n    \n    o.y-=0.455;\n    n = f_sdTrapezoid(o, 0.02, 0.01, 0.25);\n    n = smoothstep(0.002, 0.001, n);\n    o_col += n * o_cbrown;\n    \n    \n    n = f_sdTrapezoid(o, 0.4, 0.23, 0.21);\n    n = smoothstep(0.002, 0.001, n);\n    o_col += vec3(n*0.8);\n    \n\n    return o_col;\n}\nvec3 f_o_cl_sun(\n    vec2 o\n){\n    float n = length(o);\n    n = smoothstep(0.2, 0.1,n);\n    vec3 o_csun = vec3(0.933,0.824,0.255);\n    \n    return vec3(o_csun * n); \n}\n\nfloat f_n_dist_wave(vec2 o, float n_its){\n\n    \n    vec2 o_trpino_scaled = (o*n_its);\n    vec2 o_trpino_scaled_fract = vec2(fract(o_trpino_scaled.x), o_trpino_scaled.y);\n    vec2 o_it = floor(o_trpino_scaled);\n    \n    float n_dist = length(o_trpino_scaled_fract-0.5);\n\n    return n_dist;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_ang = 0.;\n    vec2 o_res_nor = vec2(1.) / iResolution.xy;\n    float o_rnx = o_res_nor.x;\n\n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trpino_nooffset = (fragCoord.xy )/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono_nooffset = (iMouse.xy )/ iResolution.y;\n    vec3 o_col = vec3(0.);\n    float n_smth = 10.*o_rnx;\n    float n_h = 0.11;\n    float n_dist_stripe = abs(o_trpino.y);\n    n_dist_stripe = smoothstep(n_h+n_smth, n_h, n_dist_stripe);\n    o_col += vec3(n_dist_stripe*1.);\n    //fragColor = vec4(o_col,1.0);\n    //return;\n    float n_trnsy = -0.03;\n    float n_its = 10.;\n    n_smth = 100.*o_rnx;\n    float n_d = f_n_dist_wave(o_trpino+vec2(-iTime*0.1,0.+n_trnsy), 10.);\n    float n_dist = smoothstep(1.-n_smth, 1., n_d);\n    \n    float n_d2 = f_n_dist_wave(o_trpino+vec2(-iTime*0.12, 0.05+n_trnsy), 8.);\n    float n_dist2 = smoothstep( 1.-n_smth,1., n_d2);\n    \n    \n    vec3 o_col_blue = vec3(0.443,0.651,0.678);\n    vec3 o_col_blue_light = vec3(0.714,0.839,0.843);\n    \n    o_col *= mix(\n        vec3(n_dist2)*o_col_blue_light,\n        vec3(n_dist)*o_col_blue, \n        0.5\n    );\n    \n    //o_col += vec3(n_dist_stripe*.2);\n    \n    float n_b = float(smoothstep(1.-n_smth,  1., n_d2));\n    o_col += vec3(n_b < 1. && n_b > 0.);\n    \n    n_b = float(smoothstep(1.-n_smth,  1., n_d));\n    o_col += vec3(n_b < 1. && n_b > 0.);\n\n    o_col*=vec3(n_dist_stripe);\n    \n    vec2 o_ship = (o_trpino+vec2(0.4, sin(iTime*2.)*0.01-0.02))*10.;\n    n_ang = sin(iTime*2.)*0.1;\n    o_ship = f_o_rotd(o_ship, n_ang);\n    o_col += f_o_col_ship(o_ship);\n    \n    vec2 o_whale = o_trpino;\n    o_whale *= 5.;\n    o_whale += vec2(-sin(iTime*0.2)*1.2, (sin(iTime)*0.5+0.5)*0.2);\n    n_ang = sin(iTime*2.)*0.1;\n    o_whale = f_o_rotd(o_whale, n_ang);\n    o_col += f_o_col_whale(o_whale);\n    \n    \n    vec2 o_sun = o_trpino;\n    o_sun *= 3.;\n    o_sun += vec2(-2., -0.5);\n    n_ang = sin(iTime*2.)*0.1;\n    o_sun = f_o_rotd(o_sun, n_ang);\n    o_col += f_o_cl_sun(o_sun);\n    \n        \n    vec2 o_cloud1 = o_trpino;\n    float n_xt = iTime*0.05;\n    o_cloud1 *= 4.;\n    o_cloud1 += vec2((fract(n_xt)-0.5)*8., -0.1);\n    n_ang = sin(iTime*2.)*0.1;\n    o_cloud1 = f_o_rotd(o_cloud1, 0.);\n    o_col += f_o_col_cloud(o_cloud1, floor(n_xt));\n    \n    \n    fragColor = vec4(o_col, 1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}