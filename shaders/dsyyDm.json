{
    "Shader": {
        "info": {
            "date": "1696196198",
            "description": "An auto-VJ with a 2D network of pseudo-random lanes with light-sparks wandering along them. Reactive to sound.\n\n - Use with music in iChannel0 -",
            "flags": 64,
            "hasliked": 0,
            "id": "dsyyDm",
            "likes": 6,
            "name": "Fork: Sound Lanes",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "lanes"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "// Fork: Sound Lanes 0.4.231001 by QuantumSuper\n// Forked from Light Lanes 0.51.230927 by QuantumSuper \n// auto-vj with 2d pseudo-random lanes with light-\"sparks\" wandering along them reactive to sound\n// note: The scale of ftt.x seems sensitive for this one (scale down in compressFft() if too agitated).\n// \n// - use with music in iChannel0 -\n\n#define aTime 150./60.*iTime\n#define PI 3.14159265359\nvec4 fft, ffts; //compressed frequency amplitudes\n\n\nvoid compressFft(){ //v1.2, compress sound in iChannel0 to simplified amplitude estimations by frequency-range\n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=0;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 0-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(3,8,8,5); ffts /= vec4(2,3,3,23); //normalize\n\t\n\t//for (int n=0;n++<4;) fft[n] *= 1. + .3*pow(fft[n],5.); fft = clamp(fft,.0,1.); //limiter? workaround attempt for VirtualDJ\n}\n\nfloat aaStep( float fun){return smoothstep( min(fwidth(fun),.001), .0, fun);} //simple antialiasing\n\nmat2 rotM(float r){float c = cos(r), s = sin(r); return mat2(c,s,-s,c);} //2D rotation matrix\n\nfloat hash21(vec2 p){ //pseudorandom generator, see The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\n\nfloat sdEquilateralTriangle(vec2 p){ //source: https://iquilezles.org/articles/distfunctions2d/\n    const float k = sqrt(3.);\n    p.x = abs(p.x) - 1.;\n    p.y = p.y + 1./k;\n    if (p.x+k*p.y > 0.) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.;\n    p.x -= clamp( p.x, -2., 0.);\n    return -length(p)*sign(p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio\n    float amp = 0.;\n\tfloat delY = .1;\n\tfloat r, ox, fun;\n    compressFft(); //initializes fft, ffts\n\n    \n    // Lane generation\n\tfor (float m=-1.;m<=1.;m+=.05){\n        ox = m;\n        fun = uv.x-ox;\n        for (float n=0.;n<2./delY;n++){ //uv.y -1..1\n            r = floor(hash21(vec2(n+ceil(aTime/16.),ox+max(.98*step(fft.x,.96),fract(aTime/16.))))*3.-1.); //r {-1,0,1}\n            fun += (r*(uv.y-(delY*n-1.))+ox+m) * step(delY*n-1.,uv.y+.001) * step(uv.y+.001,delY*(n+1.)-1.); //+.001 to avoid weird? singularities for negative uv.y\n            ox = r*(delY*(n+1.)-1.) - (r*(delY*n-1.)-ox-m) - m; //? isnt that supposed to be: ox += r*delY ?\n        } \n\t\tamp += (.8+.5*ffts[int(m*m*3.)]) * ( //brightness on voice\n            aaStep(abs(fun)-.009*iResolution.y/iResolution.x) //lane\n            * (.1+.9*aaStep(abs(fragCoord.y/iResolution.y-fract(aTime/8.+m*(.6+.4*ffts.w)))-.005*(1.+17.*step(.95,fft.x))*iResolution.y/iResolution.x)) //step \"spark\"\n            + 1e-3 / length(vec2(fun, fragCoord.y/iResolution.y-fract(aTime/8.+m*(.6+.4*ffts.w))))); //glow \"spark\"\n\t} \n\n\n    // Color design\n    vec3 col = vec3(clamp(amp,.0,1.)); \n    col += col * max(.0,1.-5.*fragCoord.y/iResolution.y*(1.-fft.x*fft.x*fft.x)) //bass level dependend brightness, y-axis\n        + smoothstep(.0,1.,.2-amp) * fft.w; //lighten darker background\n    col *= abs( cos( .06*aTime + PI/vec3(.5,2.,4.) + ffts.xyz)); //color shift \n    col *= mix( .2+.8*(1.-length(uv)), 1., fft.z); //vignette\n\n    \n    // Center symbol\n    uv *= .8+.5*(1.-fft.x*fft.x); \n    fun = mix(\n        abs(length(uv)-.23)-.07, //circle\n        (sin(aTime/4.+fft.y-.5)<.0)? //switch when unused\n            abs(dot(abs(uv*rotM(PI/4.)),vec2(1))-.25)-.1 : //square\n            abs(sdEquilateralTriangle(uv*4.))-.27, //triangle\n        clamp( sin(aTime/2.+fft.y-.5), .0, 1.));\n        \n    col = vec3(ffts.x<=ffts.y,ffts.y<=ffts.z,ffts.z<=ffts.x) * fft.z * .08 //overall tint \n        + abs(1.-col) * aaStep(fun) * fft.y * .13 //symbol\n        + col * (1.-step(length(col),.9)*aaStep(fun)) * .8; //background\n      \n    fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34835,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mischluft/mischluft-just-rave"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}