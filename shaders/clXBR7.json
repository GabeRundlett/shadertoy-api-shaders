{
    "Shader": {
        "info": {
            "date": "1692723884",
            "description": "applying fast white noise  https://shadertoy.com/view/DtfBRM  ( ie. using true points rather than thresholfing with a noise mask ).\nMouse.x controls the density.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "clXBR7",
            "likes": 13,
            "name": "dithering with points (not mask)",
            "published": 3,
            "tags": [
                "noise",
                "poisson",
                "blue"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "// applying fast white noise  https://shadertoy.com/view/DtfBRM\n// some limitations: - I don't manage cells border ( should visit neighbors )\n//                   - no seed coherence when the density varies in time\n\nvec3 uhash3( uvec3 x ) {         // iq version https://shadertoy.com/view/XlXcW4\n    const uint k = 1103515245U;  // GLIB C version\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;    \n    return vec3(x)/float(0xffffffffU);\n}\n#define iH3(f)  uhash3( floatBitsToUint(f) ) // FabriceN version https://www.shadertoy.com/view/NtjyWw\n#define iH32(f) iH3(f).xy\n\n\nvoid mainImage( out vec4 O, vec2 u ) // ----------------------------------------------------------------------\n{\n    float d = 9., r,t, n;                                   // n x n cells\n    vec2  R = iResolution.xy;\n    r = R.x/R.y;                                            // aspect ratio\n    t =   iMouse.z > 0. ? exp2(iMouse.x/R.x) - 1.           // target point density\n                        : .5+.5*sin(iTime);                 // mouse vs demo mode.\n                     // : float(iFrame);\n    O = texture(iChannel0,u/R);        \n    t *= ( exp2(length(O.rgb))-1.) * 16.*16.*100. * R.x/800.;\n    \n    n = max(1., floor(sqrt(t/5.)) );                        // 5 = target point per cell. Choose n accordingly.\n    t = round(t/(n*n))*n*n;                                 // if we want same number of points everywhere.\n    \n    vec2  U = n * u / R.y, D,\n          I = floor(U),                                     // cell id\n          F = U-I;                                          // coords in cells   \n   \n    O *= 0.;                                    \n    for (float i=0.; i < t/(n*n); i++ )                     // ---  white noise in n x n cells\n        D = F - iH32(vec3(I,i-t)),                          // distance vector to point\n        d = min(d, dot(D,D) );                              // keep smallest d²\n     // O += smoothstep(1.5*n/R.y, 0., length(D) );         // draw point\n\n    O += smoothstep(1.5*n/R.y, 0., sqrt(d) );               // draw closest point\n    \n  \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}