{
    "Shader": {
        "info": {
            "date": "1670352260",
            "description": "A raymarcher. Drag your mouse to look around. W/S to move the camera forward and backward. M to switch modes. R to reset your camera position and modes. CEL shaded. Advanced skybox.     #--Expect this to be broken many times.--#",
            "flags": 48,
            "hasliked": 0,
            "id": "ddjSzW",
            "likes": 9,
            "name": "Cel raymarcher",
            "published": 3,
            "tags": [
                "raymarching",
                "clouds",
                "cel"
            ],
            "usePreview": 0,
            "username": "raymarchingenthusiast",
            "viewed": 396
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 250\n#define MAX_DIST 500.\n#define SURF_DIST .01\n#define OFFSET SURF_DIST*1.05\n#define LIGHT Light(.1,vec3(-50.*sin(iTime/3.),60.+50.*cos(iTime/9.),-50.*cos(iTime/3.)),vec3(1.,.9,.7),5.)\n#define OW .15\n\n//////\nvec3 skybox(in vec3 rd, vec3 cam) {\n    //vec3 skybox = texture(iChannel1,rd).xxx;\n    vec3 skybox = vec3(.5,.8,.95);  //blue sky\n    float sun = pow(dot(normalize(LIGHT.pos),rd)*.5+.5,100.)*2.;\n    vec2 cloudMove = iTime/25.*vec2(.1,.3);\n    vec3 cloud = texture(iChannel1,vec3(rd.xz/(rd.y*.5)-cloudMove+cam.xz/25.,iTime/160.)).xxx;\n    cloud += texture(iChannel1,vec3(rd.xz/(rd.y*1.5)-cloudMove+cam.xz/75.,iTime/160.)).xxx*3.;\n    cloud += texture(iChannel1,vec3(rd.xz/(rd.y*4.5)-cloudMove+cam.xz/225.,iTime/160.)).xxx*9.;\n    cloud += texture(iChannel1,vec3(rd.xz/(rd.y*13.5)-cloudMove+cam.xz/675.,iTime/160.)).xxx*27.;\n    cloud /= 40.;\n    //cloud = vec3(0.);  //remove clouds if not commented out\n    cloud = 3.*pow(cloud,vec3(3.));\n    if(rd.y>.03) {skybox = mix(skybox,vec3(1.,.8,.4),clamp(sun,0.,1.));skybox = mix(skybox,vec3(1.),cloud);}\n    else {\n    }\n    return skybox;\n}\n//maxabs3(rd)==rd.y&&\n//rd.y*\n//if(rd.y>0.) \nfloat toon(float d,float a) {\n    float dif = mix(a,.95,round(sat(d)));\n    return dif;\n}\n\n/////SDFs\n\nfloat sdSphere(vec3 p, vec4 sphere) {\n    return length(p-sphere.xyz)-sphere.w;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = sat(dot(pa,ba)/dot(ba,ba));\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdBox(vec3 p, vec3 a, vec4 b) {\n    vec3 q = abs(p-a)-b.xyz;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.)-b.w;\n}\n\n\n/////World\nfloat map(in vec3 p, bool il){\n    float d0 = sdSphere(p,vec4(-2.,4.,0.,1.));\n    float d1 = sdBox(p,vec3(0.),vec4(9.8,1.3,9.8,.2));\n    float d = min(d0,d1);\n    return d;\n}\n\nvec3 getNormal(vec3 p) {\n    float d0 = map(p,true);\n    vec2 e = vec2(.01,0.);\n    vec3 n = d0-vec3(\n    map(p-e.xyy,true),\n    map(p-e.yxy,true),\n    map(p-e.yyx,true));\n    \n    return normalize(n);\n}\n\nvec3 trimap(vec3 p, sampler2D s, float k, float rk) {\n    vec3 n = pow(getNormal(p),vec3(k));\n    vec3 tx = texture(s, p.yz/rk).xyz;\n    vec3 ty = texture(s, p.xz/rk).xyz;\n    vec3 tz = texture(s, p.xy/rk).xyz;\n    return (tx*n.x + ty*n.y+tz*n.z)/(n.x+n.y+n.z);\n}\n\n\nvoid map(in vec3 p, out Mat mat) {\n    float d0 = sdSphere(p,vec4(-2.,4.,0.,1.));\n    float d1 = sdBox(p,v(0.),vec4(4.8,1.3,4.8,.2));\n    float d = min(d0,d1);\n                                                  //Materials\n    if(d==d0) mat = Mat(0,v(1.)*.2,.6,.2,20.);\n    if(d==d1) mat  = Mat(0,vec3(.4,.8,1.)*.2,.6,.08,40.);\n    \n}\n\n\nfloat raymarch(in vec3 rd, in vec3 ro, out bool hit,out bool outline) {  \n    float h = 0.;  \n    hit = false;\n    outline = false;\n    float oldD = MAX_DIST;\n    float oldH = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*h;\n        float d = map(p,true);\n        \n        if (d < SURF_DIST) {\n            hit = true;\n            break;\n        }\n        if(oldD <= OW && d >= OW && d > oldD) {outline=true;}\n        if (h > MAX_DIST) break;\n        oldD = d;\n        oldH = h;\n        h += d;\n    }\n    \n    return h;\n}\n\nfloat shadow(vec3 p, vec3 rd, float len) {\n    float ss = 1.;\n    float h = 0.;\n    for(int t = 0; t < MAX_STEPS && h < len; t++) {\n       vec3 cp = p+rd*h;\n       float d = map(cp,false);\n       if(d < SURF_DIST) return 0.;\n       h += d;\n    }\n    return 1.;\n}\n\nfloat diffuse(vec3 p,vec3 lp0) {\n    vec3 n = getNormal(p);\n    vec3 l = normalize(lp0);\n    \n    float ss = shadow(p+n*OFFSET,l,length(lp0));\n    float dif = dot(l,n);\n    return max(dif,0.)*ss;\n}\n\nfloat specular(vec3 n,vec3 ev, vec3 lv, float a) {\n    //vec3 n = getNormal(p);\n    vec3 h = normalize(lv + ev);\n    float spec = pow(sat(dot(n,h)),a);\n    return spec;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 rd = crd(fragCoord,iResolution,iMouse,false);\n    vec3 ro = texture(iChannel0,fragCoord).xyz;\n    if(bool(texture(iChannel0,fragCoord).w)) ro = -25.*crd(vec2(iResolution.xy/2.),iResolution,iMouse,false);\n    ro.y += 3.;\n    //vec3 rdOrig = rd;\n    \n    vec3 col = v(0.);\n\n    bool hit = false;\n    bool outline;\n    float d = raymarch(rd,ro,hit,outline);\n    vec3 p = ro+rd*d;\n    Mat mat;\n    map(p,mat);\n    float brightness;\n    \n    if (hit == true) {\n    switch (mat.lt) {\n    case 0: \n        vec3 n = getNormal(p);\n        float dif = diffuse(p,LIGHT.pos-p);\n        float spec = specular(n,-rd,normalize(LIGHT.pos-p),mat.sa);\n        \n        float diffusePower = toon(dif*.5+.5,LIGHT.ai)*mat.di*LIGHT.str;\n        vec3 diffuseLight = diffusePower*mat.col*LIGHT.col;\n        \n        float specPower = toon(spec,.0)*mat.si*LIGHT.str;\n        vec3 specLight = specPower*(dif*.5+.5)*LIGHT.col;\n        \n        float fresnelPower = (1.-dot(n,rd))*.05;\n        vec3 baseLight = v(sat(fresnelPower));\n        \n        col += diffuseLight + specLight + baseLight;\n        brightness += clamp(fresnelPower,0.,.1)+specPower*(dif*.5+.5)+diffusePower;\n        break;\n    }\n    } else {\n        vec3 sky = skybox(rd,ro);\n        col = sky;\n        brightness = 1.;\n    }\n    if(outline) col = v(0.);\n    \n    //col = rd;\n    fragColor = vec4(pow(sat(col),v(1./2.2)),brightness);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n#define FOV 90.\n#define sat(d) clamp(d,0.,1.)\n\nstruct Light {\n    float ai;\n    vec3 pos;\n    vec3 col;\n    float str;\n};\n\nstruct Mat {\n    int lt;\n    vec3 col;\n    float di;\n    float si;\n    float sa;\n};\n\nvec2 rot(vec2 p,float a) {\n    return vec2(p.x*cos(a)+p.y*sin(a),p.x*sin(a)-p.y*cos(a));\n}\n\nvec3 crd(vec2 fragCoord, vec3 iResolution, vec4 iMouse, bool sideways) {\n    vec2 mouse = PI*((vec2(iMouse.x*3.,iMouse.y*1.1)/iResolution.xy)-.5);\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    if(iMouse.xy == vec2(0.)) mouse.xy = vec2(PI/2.,0.);\n    \n    vec3 rd = normalize(vec3(uv.xy,1./tan(FOV*PI/360.)));\n    \n    vec2 rotAmt = vec2(sideways?-1.5*PI-mouse.x:PI-mouse.x,mouse.y-PI);\n    rd = vec3(rd.x,rot(rd.yz,rotAmt.y));\n    rd.y = -rd.y;\n    vec2 rotRd = rot(rd.zx,rotAmt.x);\n    rd = vec3(-rotRd.y,rd.y,rotRd.x);\n    return rd;\n}\n\nfloat maxabs3(vec3 p) {\n    float o = abs(p.x)>abs(p.y) ? p.x : p.y;\n    return abs(o)>abs(p.z) ? o : p.z;\n}\n\nvec3 v(float f) {return vec3(f);}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 l = texture(iChannel0,fragCoord);\n    vec3 j = l.xyz;\n    float m = l.w;\n    bvec3 reset = bvec3(texelFetch(iChannel1,ivec2(82,0),0).x > 0.,iFrame < 5,texelFetch(iChannel1,ivec2(77,1),0).x > 0.);\n    vec2 k = vec2(texelFetch(iChannel1,ivec2(87,0),0).x > 0.) - float(texelFetch(iChannel1,ivec2(83,0),0).x > 0.);\n    k.y = float(texelFetch(iChannel1,ivec2(68,0),0).x > 0.) - float(texelFetch(iChannel1,ivec2(65,0),0).x > 0.);\n    if(reset.z) m = 1.-m;\n    \n    vec3 d = crd(vec2(iResolution.xy/2.),iResolution,iMouse,false);\n    vec3 a = crd(vec2(iResolution.xy/2.),iResolution,iMouse,true);\n    \n    j += .8*60.*k.x*iTimeDelta*d;\n    j += .8*60.*k.y*iTimeDelta*a;\n    if(reset.x || reset.y || reset.z) j = vec3(0.,4.,-25.);\n    if(reset.x || reset.y) m = 1.;\n    l = vec4(j,m);\n    fragColor = vec4(l);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}