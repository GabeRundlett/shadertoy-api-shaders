{
    "Shader": {
        "info": {
            "date": "1508919858",
            "description": "MIPmap (and wrap) are now available on buffers and videos !\nMeaning we can count, integrate, average, isolate frequency bands for free ! \n\nHere, count pixels with R, G or B over threshold in the spot area (mouse control)",
            "flags": 32,
            "hasliked": 0,
            "id": "Ml2cDm",
            "likes": 8,
            "name": "free pixels count",
            "published": 3,
            "tags": [
                "video",
                "filter",
                "image",
                "processing",
                "integration",
                "signal",
                "whitebalance",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1110
        },
        "renderpass": [
            {
                "code": "// === text and numbers display from https://www.shadertoy.com/view/llySRh ================\n\n// --- access to the image of ascii code c\nfloat char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return 0.; // (0,0,0,1e5);\n    //if (p.x<.25|| p.x>.75 || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5); // strange bug\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) ).x;\n  //float l = log2(length(fwidth(p/16.*iResolution.xy)));\n  //return textureLod( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), l);\n                   // manual MIPmap to avoid border artifact. Should be textureLod, but don't available everywhere\n}\n\n// --- display int4\nfloat pInt(vec2 p, float n) {\n    float v = 0.; // vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// --- display float4.4\nfloat pFloat(vec2 p, float n) {\n    float v = pInt(p,floor(n)); p.x -= 2.;\n        v += char(p, 46);      p.x -= .5;\n        v += pInt(p,fract(n)*1e4);\n    return v;\n}\n\n// --- chars\nint CAPS=0;\n#define low  CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.5;\n#define C(c) spc O+= char(U,64+CAPS+c);\n\n\n// === video pixels counter =============================================\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy, V;\n    U /= R;\n    O = texture(iChannel0, U); O += .3*O.a;\n    \n    vec4 T =  texture(iChannel0, U,100.);  T /= T.a; // the whole counter is there !\n    \n    V=U*R/R.y; V = V*.5+vec2(0,.5);\n    U = ( V - vec2(.0,.9) ) * 16.;  \n    U.x+=.5; caps C(16) low C(9)C(24)C(5)C(12) spc C(3)C(15)C(21)C(14)C(20) caps C(-6) // \"Pixel count:\"\n    \n    U = ( V - vec2(.0,.83) ) * 16.;  \n    O+= pInt(U,T.r*100.);   U.x-=1.5; C(37-64) spc C(18)\n    \n    U = ( V - vec2(.0,.76) ) * 16.;  \n    O+= pInt(U,T.g*100.);   U.x-=1.5; C(37-64) spc C(7)\n    \n    U = ( V - vec2(.0,.69) ) * 16.;  \n    O+= pInt(U,T.b*100.);   U.x-=1.5; C(37-64) spc C(2)\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O = texture(iChannel0, U/R);\n    O = step( .4 , O);\n  //O = step(. 5+.2*cos(iTime*4.) , O);\n    \n    vec2 M = iMouse.xy; \n    if (length(M)<10.) M = R/2.+R/3.*vec2(cos(iTime),sin(iTime));\n    O *= step(length(M-U),R.y/5.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}