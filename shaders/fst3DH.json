{
    "Shader": {
        "info": {
            "date": "1629729246",
            "description": "Supplementary Shader for a Tsoding Session: https://www.youtube.com/watch?v=cU5WcrU_YI4",
            "flags": 0,
            "hasliked": 0,
            "id": "fst3DH",
            "likes": 4,
            "name": "Straight Lines",
            "published": 3,
            "tags": [
                "education",
                "geometry",
                "tsoding"
            ],
            "usePreview": 0,
            "username": "rexim",
            "viewed": 2147
        },
        "renderpass": [
            {
                "code": "#define MARKER_RADIUS 12.5\n#define THICCNESS 10.0\n\nfloat sin01(float x)\n{\n    return (sin(x) + 1.0) / 2.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0.0);\n\n    vec2 p1 = vec2(200.0, 200.0);\n    vec2 p2 = iMouse.xy;\n\n    if (length(fragCoord.xy - p1) < MARKER_RADIUS) {\n        fragColor += vec4(1.0, 0.0, 0.0, 1.0);\n    }\n\n    if (length(fragCoord.xy - p2) < MARKER_RADIUS) {\n        fragColor += vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    \n    vec2 p3 = fragCoord.xy;\n    vec2 p12 = p2 - p1;\n    vec2 p13 = p3 - p1;\n\n    float d = dot(p12, p13) / length(p12); // = length(p13) * cos(angle)\n    vec2 p4 = p1 + normalize(p12) * d;\n    if (length(p4 - p3) < THICCNESS/* * sin01(iTime * 4.0 + length(p4 - p1)* 0.02)*/\n          && length(p4 - p1) <= length(p12)\n          && length(p4 - p2) <= length(p12)) {\n        fragColor += vec4(0.0, 1.0, 0.0, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}