{
    "Shader": {
        "info": {
            "date": "1630889701",
            "description": "Neater arclength calculation than [url=https://www.shadertoy.com/view/NdfSDl]https://www.shadertoy.com/view/NdfSDl[/url] plus a solver for the inverse to allow getting positions at specific distances on the curve.",
            "flags": 32,
            "hasliked": 0,
            "id": "fddGDs",
            "likes": 12,
            "name": "Evenly Spaced Points on QBezier",
            "published": 3,
            "tags": [
                "points",
                "quadraticbezier",
                "evenspacing"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "// Desmos graph: https://www.desmos.com/calculator/ley84rd52d\n\n// Comment this out and you will understand why this is useful :D\n#define REPARAMETRIZE\n\n// Computes the length between a starting (t1) and ending (t2) position on the curve\nfloat bezierArclength(in float t1, in float t2, in vec2 a, in vec2 b, in vec2 c) {\n    vec2 abc = a - 2.0 * b + c;\n    vec2 ba = b - a;\n\n    float u = dot(abc, abc);\n    float v = dot(abc, ba);\n    float w = dot(ba, ba);\n\n    float dis = u * w - v * v; // -discriminant\n    vec2 t = (u * vec2(t1, t2) + v) / sqrt(dis);\n    vec2 y = asinh(t) + t * sqrt(t * t + 1.0);\n    return (y.y - y.x) * dis / pow(u, 1.5);\n}\n\n// Newton-Raphson solver for inverse arclength\n// Allows position things at precise distances along the curve\n// I attempted to optimize it but I might have missed something\n// I also might try approximating it differently, this is pretty expensive\nfloat bezierInvArclength(in float d, in vec2 a, in vec2 b, in vec2 c) {\n    // Precomputation\n    vec2 abc = a - 2.0 * b + c;\n    vec2 ba = b - a;\n\n    float u = dot(abc, abc);\n    float v = dot(abc, ba);\n    float w = dot(ba, ba);\n\n    float dis = u * w - v * v;\n    float sdis = sqrt(dis);\n    float disu = dis / u;\n    float k = dis / pow(u, 1.5);\n\n    // Subtract constant of integration\n    float y = v / sdis;\n    d += (asinh(y) + y * sqrt(y * y + 1.0)) * k;\n\n    // Five iterations of Newton-Rapshon, might not need that many\n    float t = ((sqrt(disu + u * abs(d)) - sqrt(disu)) * sign(d) - v) / u; // Initial approximation\n    for (int n=0; n < 5; n++) {\n        float y = (u * t + v) / sdis;\n        float arclen = (asinh(y) + y * sqrt(y * y + 1.0)) * k; // Arclength\n        float arcint = 2.0 * sqrt((u * t + 2.0 * v) * t + w); // Arclength integrand\n        t -= (arclen - d) / arcint;\n    }\n\n    return t;\n}\n\n// ---------- Helper functions ----------\nvec3 hue2rgb(in float hue) {\n    return abs(2.0 * smoothstep(0.0, 1.0, fract(vec3(hue, hue - 1.0 / 3.0, hue + 1.0 / 3.0))) - 1.0);\n    //return clamp(abs(6.0 * fract(vec3(hue, hue - 1.0 / 3.0, hue - 2.0 / 3.0)) - 3.0) - 1.0, 0.0, 1.0);\n    //return smoothstep(0.0, 1.0, clamp(abs(6.0 * fract(vec3(hue, hue - 1.0 / 3.0, hue - 2.0 / 3.0)) - 3.0) - 1.0, 0.0, 1.0));\n}\n\n// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 p, in vec2 pos, in vec2 size, in int char) {\n    p = (p - pos) / size + 0.5;\n    if (all(lessThan(abs(p - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel1, p / 16.0 + fract(vec2(char, 15 - char / 16) / 16.0), dFdx(p / 16.0), dFdy(p / 16.0)).r;\n        color = mix(color, charColor, val);\n    }\n}\n\n// ---------- SDFs ----------\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdStar5(in vec2 p, in float r, in float rf) {\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x, k1.y);\n    p.x = abs(p.x);\n    p -= 2.0 * max(dot(k1, p), 0.0) * k1;\n    p -= 2.0 * max(dot(k2, p), 0.0) * k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf * vec2(-k1.y, k1.x) - vec2(0.0, 1.0);\n    float h = clamp(dot(p, ba) / dot(ba, ba), 0.0, r);\n    return length(p - ba * h) * sign(p.y * ba.x - p.x * ba.y);\n}\n\n// Returns vec2(shortest distance to the curve, parameter of the nearest position on the curve)\nfloat dot2(in vec2 v) { return dot(v, v); }\nvec2 sdBezier(in vec2 p, in vec2 v1, in vec2 v2, in vec2 v3) {\n    vec2 c1 = p - v1;\n    vec2 c2 = 2.0 * v2 - v3 - v1;\n    vec2 c3 = v1 - v2;\n\n    float t3 = dot(c2, c2);\n    float t2 = dot(c3, c2) * 3.0 / t3;\n    float t1 = (dot(c1, c2) + 2.0 * dot(c3, c3)) / t3;\n    float t0 = dot(c1, c3) / t3;\n\n    float t22 = t2 * t2;\n    vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n    float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n    float p2 = abs(pq.x);\n    float r1 = 1.5 / pq.x * pq.y;\n\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float r2 = r1 * sqrt(3.0 / p2), root;\n        if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n        else root = sinh(asinh(r2) / 3.0);\n        root = clamp(-2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0, 0.0, 1.0);\n        return vec2(length(p - mix(mix(v1, v2, root), mix(v2, v3, root), root)), root);\n    }\n\n    else {\n        float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0;\n        vec2 roots = clamp(2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0, 0.0, 1.0);\n        float d1 = dot2(p - mix(mix(v1, v2, roots.x), mix(v2, v3, roots.x), roots.x));\n        float d2 = dot2(p - mix(mix(v1, v2, roots.y), mix(v2, v3, roots.y), roots.y));\n        return d1 < d2 ? vec2(sqrt(d1), roots.x) : vec2(sqrt(d2), roots.y);\n    }\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 2.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 2.0;\n    float unit = 4.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 a = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 b = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n    vec2 c = texelFetch(iChannel0, ivec2(2, 0), 0).xy;\n\n    // Draw the hull\n    drawSDF(sdLine(uv, a, b), vec3(1.0, 0.0, 0.0));\n    drawSDF(sdLine(uv, b, c), vec3(1.0, 0.0, 0.0));\n\n    // Draw the bezier curve\n    vec2 bezClosest = sdBezier(uv, a, b, c);\n    float bezLength = bezierArclength(0.0, 1.0, a, b, c);\n    #ifdef REPARAMETRIZE\n    bezClosest.y = bezierArclength(0.0, bezClosest.y, a, b, c) / bezLength;\n    #endif\n    drawSDF(bezClosest.x - 0.05, hue2rgb(bezClosest.y));\n\n    // Draw the control points\n    drawSDF(length(uv - a) - 0.02, vec3(1.0, 0.0, 0.0));\n    drawSDF(length(uv - b) - 0.02, vec3(1.0, 0.0, 0.0));\n    drawSDF(length(uv - c) - 0.02, vec3(1.0, 0.0, 0.0));\n\n    // Plot rotating stars at regular intervals\n    float co = cos(iTime), si = sin(iTime);\n    mat2 rot = mat2(co, si, -si, co);\n\n    float du = 1.0 / 5.0;\n    #ifdef REPARAMETRIZE\n    du *= bezLength;\n    #endif\n\n    for (float u=0.0; u < 6.0; u++) {\n        float t = u * du;\n        #ifdef REPARAMETRIZE\n        t = bezierInvArclength(t, a, b, c);\n        #endif\n        vec2 pos = mix(mix(a, b, t), mix(b, c, t), t);\n\n        mat2 starRot = rot;\n        if (int(u) % 2 == 0) starRot = transpose(starRot); // Alternate rotation direction\n\n        drawSDF(sdStar5((uv - pos) * starRot, 0.05, 0.5), vec3(0.25, 0.0, 0.5));\n    }\n\n    // Display coordinates of A on the left\n    drawChar(color, vec3(0.0, 0.0, 1.0), uv, vec2(-1.1, -0.58), vec2(0.15), 65);\n    color = digitIn(color, vec3(1.0), uv * 0.8 + vec2(1.2, 0.6), 100.0, a.x);\n    color = digitIn(color, vec3(1.0), uv * 0.8 + vec2(1.2, 0.75), 100.0, a.y);\n\n    // Display coordinates of B in the middle\n    drawChar(color, vec3(0.0, 0.0, 1.0), uv, vec2(0.0, -0.58), vec2(0.15), 66);\n    color = digitIn(color, vec3(1.0), uv * 0.8 + vec2(0.3, 0.6), 100.0, b.x);\n    color = digitIn(color, vec3(1.0), uv * 0.8 + vec2(0.3, 0.75), 100.0, b.y);\n\n    // Display coordinates of C on the right\n    drawChar(color, vec3(0.0, 0.0, 1.0), uv, vec2(1.1, -0.58), vec2(0.15), 67);\n    color = digitIn(color, vec3(1.0), uv * 0.8 + vec2(-0.6, 0.6), 100.0, c.x);\n    color = digitIn(color, vec3(1.0), uv * 0.8 + vec2(-0.6, 0.75), 100.0, c.y);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Handy debugging font by @valalalalala (with my nitpicky formatting :D)\n// Thanks!\n\n        /////////////////////////////////////////////////////////////////\n       //                                                            ////\n      //  \"little debugging font\"                                   // //\n     //                                                            //  //\n    //  This utility uses a small bitmapped font (3x5) to render  //   //\n   //  floats, primarily intended for debugging. The code can    //    //\n  //  be copy/pasta'd into the Common tab as needed.            //     //\n //                                                            //     //\n////////////////////////////////////////////////////////////////     //\n//                                                            //    //\n// Creative Commons Attribution-NonCommercial-ShareAlike      //   //                                       //  //\n// 3.0 Unported License                                       //  //\n//                                                            // //\n// by Val \"valalalalala\" GvM 💃 2021                          ////\n//                                                            ///\n////////////////////////////////////////////////////////////////\n\nconst int CHARACTERS[14] = int[14](31599, 9362, 31183, 31207, 23524, 29671, 29679, 30994, 31727, 31719, 1488, 448, 2, 3640);\n\nfloat digitIsOn(in int digit, in vec2 id) {   \n    if (id.x < 0.0 || id.y < 0.0 || id.x > 2.0 || id.y > 4.0 ) return 0.0;\n    return floor(mod(float(CHARACTERS[int(digit)]) / pow(2.0, id.x + id.y * 3.0), 2.0));\n}\n\nfloat digitSign(in float v, in vec2 id) {\n    return digitIsOn(10 - int((sign(v) - 1.0) * 0.5), id);\n}\n\nint digitCount(in float v) {\n    return int(floor(log(max(v, 1.0) ) / log(10.0)));\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v, in int decimalPlaces) {\n    vec2 id = floor(uv * scale);\n\n    if (0.0 < digitSign(v, id)) return 1.0;\n    v = abs(v);\n\n    int digits = digitCount(v);\n    float power = pow(10.0, float(digits));\n    \n    float offset = floor(0.1 * scale);\n    id.x -= offset;\n\n    float n;\n    for (int i = 0; i < 33; i++, id.x -= offset, v -= power * n, power /= 10.0) {\n        n = floor(v / power);\n        if (0.0 < digitIsOn(int(n), id)) return 1.0;   \n        if (i == digits) {\n            id.x -= offset;\n            if (0.0 < digitIsOn(int(12), id)) return 1.0;\n        }\n\n        if (i >= digits + decimalPlaces) return 0.0;\n    }\n\n    return 0.0;\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v) {\n    return digitFirst(uv, scale, v, 3);\n}\n\nvec3 digitIn(in vec3 color, in vec3 toMix, in vec2 uv, in float scale, in float v) {\n    float f = digitFirst(uv, scale, v);\n    return mix(color, toMix, f);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// UI handling\n// https://www.shadertoy.com/view/fsGGRR (thanks @dysangel!)\n#define SELECTION_RADIUS 0.1\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 otherFragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame == 0) {\n        if (iFragCoord == ivec2(0, 0)) fragColor.xy = vec2(-0.5, 0.25);\n        if (iFragCoord == ivec2(1, 0)) fragColor.xy = vec2(0.6, 0.5);\n        if (iFragCoord == ivec2(2, 0)) fragColor.xy = vec2(0.5, -0.3);\n    }\n\n    if (iFrame > 0) {\n        if (iFragCoord.x < 3 && iFragCoord.y == 0) {\n            vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 2.0;\n            fragColor = texelFetch(iChannel0, iFragCoord, 0);\n            \n            if (iMouse.w > 0.0) {\n                fragColor.z = 0.0;\n            }\n\n            if (fragColor.z > 0.0 || length(mouse - fragColor.xy) < SELECTION_RADIUS * (fragColor.z + 1.0)) {\n                bool tooClose = false;\n\n                for (int i = 0; i < 3; i++) {\n                    otherFragColor = texelFetch(iChannel0, ivec2(i, 0), 0);\n                    if ((iFragCoord != ivec2(i,0)) && length(mouse - otherFragColor.xy) < SELECTION_RADIUS) {\n                        tooClose = true;\n                        fragColor.z = 0.;\n                    }\n                }\n\n                if (!tooClose) {\n                    fragColor.xy = mouse;\n                    fragColor.z = 1.0;\n                }\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}