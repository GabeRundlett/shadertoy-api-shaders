{
    "Shader": {
        "info": {
            "date": "1693108622",
            "description": "Try dragging with your mouse\n\nInspired by the After Effects plugin of the same name https://www.plugineverything.com/repeater",
            "flags": 0,
            "hasliked": 0,
            "id": "DlsfRS",
            "likes": 12,
            "name": "Repeater",
            "published": 3,
            "tags": [
                "interactive",
                "texture",
                "repetition",
                "tiling",
                "tile",
                "overlap",
                "repeat"
            ],
            "usePreview": 0,
            "username": "fad",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "// Try dragging with your mouse\n// \n// Inspired by the After Effects plugin of the same name\n// https://www.plugineverything.com/repeater\n//\n// Change texSize and tex(uv, instance) for different textures\n\n#define texSize (vec2(40.0, 32.0) * 5.0)\n\nvec4 tex(vec2 uv, vec2 instance) {\n    // Instance is an integer ID used for per-instance randomness\n    // random number for this instance\n    vec4 r = texelFetch(\n        iChannel1,\n        ivec2(mod(instance, vec2(textureSize(iChannel1, 0)))),\n        0\n    );\n\n    // Randomly mirror the texture\n    if (r.x < 0.2) {\n        uv.x = 1.0 - uv.x;\n        r.x = r.x / 0.2;\n    } else {\n        r.x = (r.x - 0.2) / 0.8;\n    }\n\n    if (r.x < 0.2) {\n        uv.y = 1.0 - uv.y;\n        r.x = r.x / 0.2;\n    } else {\n        r.x = (r.x - 0.2) / 0.8;\n    }\n\n    // Animate Nyan Cat\n    float frame = mod(floor(iTime * 8.0 + r.x * 10.0), 6.0);\n    ivec2 p = ivec2((uv.x + frame) * 40.0, uv.y * 32.0);\n    \n    // Tint Nyan Cat\n    vec4 tint = vec4(normalize(r.yzw) * 0.7 + 0.6, r.a * 0.5 + 0.5);\n    \n    return texelFetch(iChannel0, p, 0) * tint;\n}\n\nvec4 blendOver(vec4 front, vec4 back) {\n    float a = front.a + back.a * (1.0 - front.a);\n    return a > 0.0\n        ? vec4((front.rgb * front.a + back.rgb * back.a * (1.0 - front.a)) / a , a)\n        : vec4(0.0);\n}\n\nmat3 translate(vec2 p) {\n    mat3 m = mat3(1.0);\n    m[2].xy = p;\n    return m;\n}\n\nmat3 scale(float s) {\n    mat3 m = mat3(1.0);\n    m[0].x = s;\n    m[1].y = s;\n    return m;\n}\n\nmat3 rotate(float theta) {\n    mat3 m = mat3(1.0);\n    m[0].xy = vec2(cos(theta), sin(theta));\n    m[1].xy = vec2(-sin(theta), cos(theta));\n    return m;\n}\n\nconst float MAX_FLOAT = uintBitsToFloat(0x7f7fffffu);\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    fragColor = mix(\n        vec4(0.6, 0.7, 0.9, 1.0),\n        vec4(0.9, 1.0, 1.0, 1.0),\n        (fragCoord.x + fragCoord.y) / (iResolution.x + iResolution.y)\n    );\n    \n    // Matrix to transform instance IDs to positions\n    // If the determinant is close to zero then it will lag because a\n    // lot of instances will overlap\n    mat3 m = mat3(1.0);\n    m[0].xy = vec2(mix(100.0, 200.0, sin(iTime) * 0.5 + 0.5), 50.0);\n    m[1].xy = vec2(30.0, mix(100.0, 150.0, cos(iTime) * 0.5 + 0.5));\n    m[2].xy = iResolution.xy * 0.5 + vec2(cos(iTime), sin(iTime)) * 100.0;\n    \n    if (iMouse.z > 0.0) {\n        vec2 p = abs(iMouse.zw);\n        vec2 q = iMouse.xy;\n        m = translate(p)\n          * scale(length(vec3(p - q, 40.0)))\n          * rotate(p == q ? 0.0 : atan(q.y - p.y, q.x - p.x));\n    }\n    \n    mat3 im = inverse(m);\n    vec4 s = vec4(texSize, -texSize) / 2.0;\n    vec2 p1 = (im * vec3(fragCoord + s.xy, 1.0)).xy;\n    vec2 p2 = (im * vec3(fragCoord + s.zy, 1.0)).xy;\n    vec2 p3 = (im * vec3(fragCoord + s.zw, 1.0)).xy;\n    vec2 p4 = (im * vec3(fragCoord + s.xw, 1.0)).xy;\n    float yMin = ceil(min(min(min(p1, p2), p3), p4)).y;\n    float yMax = floor(max(max(max(p1, p2), p3), p4)).y;\n    \n    for (float y = yMin; y <= yMax; ++y) {\n        float xMin = MAX_FLOAT;\n        float xMax = -MAX_FLOAT;\n        \n        #define intersect(p1, p2)                                               \\\n            if (p1.y != p2.y && min(p1.y, p2.y) <= y && y <= max(p1.y, p2.y)) { \\\n                float x = mix(p1, p2, (y - p1.y) / (p2.y - p1.y)).x;            \\\n                xMin = min(xMin, x); xMax = max(xMax, x);                       \\\n            }\n        \n        intersect(p1, p2);\n        intersect(p2, p3);\n        intersect(p3, p4);\n        intersect(p4, p1);\n        xMin = ceil(xMin);\n        xMax = floor(xMax);\n        \n        for (float x = xMin; x <= xMax; ++x) {\n            vec2 instance = vec2(x, y);\n            vec2 p = (m * vec3(instance, 1.0)).xy;\n            vec2 uv = (fragCoord - (p - s.xy)) / texSize;\n            fragColor = blendOver(tex(uv, instance), fragColor);\n        }\n    }\n   \n    fragColor.rgb *= fragColor.a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}