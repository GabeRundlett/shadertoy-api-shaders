{
    "Shader": {
        "info": {
            "date": "1720511469",
            "description": "A simple example/template to make games from.",
            "flags": 32,
            "hasliked": 0,
            "id": "X3KXWV",
            "likes": 4,
            "name": "Shader Game Example/Template",
            "published": 3,
            "tags": [
                "example",
                "game",
                "interactive",
                "tutorial",
                "template",
                "buffers",
                "gametutorial"
            ],
            "usePreview": 0,
            "username": "Falafel",
            "viewed": 111
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Retrieve variables and colorize each pixel here in Image.\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    \n    vec2 ballpos = texture(iChannel0, _a).xy;\n    \n    fragColor = vec4(sin(iTime), sin(1. - iTime), cos(2. * iTime), 1.) / 3.;\n    \n    // Draw the trail\n    fragColor += texture(iChannel1, uv);\n    \n    // Draw the ball\n    fragColor += vec4(0.01 * (1. / distance(ballpos, uv)));\n    // Output to screen\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    fragColor = vec4(0.);\n    \n    // Buffers are passes in the shader - for every buffer an 'image' is created. The difference to the main Image\n    // shader is that the pixels of the buffers are saved memory. They can be used as persistant memory.\n    // They are initialized with all pixels vec4(0.);\n    \n    // The 'Pixels' in this buffer are all variables. They are saved by \"fragColor = ...\"\n    // To run parallel code on a specific pixel\n    // if (tolerance(uv, _a) {...}  // _a is an adress, _b is another one\n    // or run on all pixels if only one main program is used\n    \n    // Retrieve variables by using 'vec4 a = texture(iChannel0, _a);' This is for buffer A. Use 'iChannel1' for buffer B.\n    \n    // FPS depends on the slowest pixel. Letting one calculate or all is just as efficient.\n    // use the different pixels to parallelize code.\n    \n    // In this first pass (Buffer A) run the main program/s. In buffer B access the variables for additional logic.\n    \n    // Complex CPU-heavy programs must be solved using heavy caching and divide-and-conquer.\n    \n    \n    // ball speed\n    vec4 ball;\n    ball.zw = texture(iChannel0, _a).zw + vec2(0., -0.0006); // xy = pos, zw = speed\n    // ball position\n    ball.xy = texture(iChannel0, _a).xy + ball.zw;\n    \n    // throw and hold the ball\n    if (iMouse.z > 0.) {\n        ball.xy = iMouse.xy / iResolution.x;\n        ball.zw = iMouse.xy / iResolution.x - (texture(iChannel0, vec2(.0)).xy);\n    }\n    // saved in every pixel, so any vec2([-1., 1.]).\n    fragColor = ball;\n    \n    // Walls\n    if (fragColor.y < 0.0) {\n        fragColor.ywz = vec3(.0001, -fragColor.w * .8, fragColor.z * .8);\n    }\n    else if (fragColor.x > 1.) {\n        fragColor.xz = vec2(.9999, -fragColor.z * .8);\n    }\n    else if (fragColor.x < 0.0) {\n        fragColor.xz = vec2(.0001, -fragColor.z * .8);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ADRESSES\n#define _a vec2(.0)\n#define _b vec3(.01)\n\n\n// GLOBAL FUNCTIONS\n\n// tolerance function - otherwise buffer variables don't work\nbool tolerance(vec2 actualv, vec2 targetv)\n{\n    vec2 tolerancev = vec2(.005);\n    if (actualv.x - actualv.x < tolerancev.x && actualv.x - targetv.x > -tolerancev.x){\n        if (actualv.y - targetv.y < tolerancev.y && actualv.y - targetv.y > -tolerancev.y){\n            return true;\n        }\n    }\n    return false;\n}\n\n\n// GLOBAL OBJECTS\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    // Get variables that depend on the main program having run here\n    \n    // This buffer is used so that two memory writes are possible in one frame,\n    // basically you can calculate something in Buffer A, and retrieve and change it or any other\n    // variable here.\n    \n    // In this case I use it as an 'overlay' layer instead of variable layer - both are possible, if you need both\n    // use Buffer C.\n    \n    vec2 ballpos = texture(iChannel0, _a).xy;\n    \n    fragColor = texture(iChannel1, uv);\n    // Saves the ball position into each pixel it's been.\n    fragColor += vec4(max(0.000015 * (1. / pow((distance(ballpos, uv) + .15), 5.)) - .1, 0.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}