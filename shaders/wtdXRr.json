{
    "Shader": {
        "info": {
            "date": "1580338497",
            "description": "code is messy",
            "flags": 0,
            "hasliked": 0,
            "id": "wtdXRr",
            "likes": 9,
            "name": "Day 41",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 408
        },
        "renderpass": [
            {
                "code": "#define pmod(p,x) mod(p,x) - 0.5*x\n#define dmin(a,b) a.x < b.x ? a : b\n\n#define mx (iTime*0.4 + 20.*iMouse.x/iResolution.y)\n#define my (1.*iMouse.y/iResolution.y)\n\n#define dmin(a,b) a.x < b.x ? a : b\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n// check these out for more beastly stuff\n// https://www.shadertoy.com/view/3dXSDH \n// https://www.shadertoy.com/view/XsKGRW\n\n\nvec3 glow = vec3(0);\n// Noise (from iq)\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n    \n#if 1\n\tvec2 uv = (p.xy+vec2(37.0,239.0)*p.z) + f.xy;\n    vec2 rg = textureLod(iChannel2,(uv+0.5)/256.0,0.0).yx;\n#else\n    ivec3 q = ivec3(p);\n\tivec2 uv = q.xy + ivec2(37,239)*q.z;\n\n\tvec2 rg = mix(mix(texelFetch(iChannel2,(uv           )&255,0),\n\t\t\t\t      texelFetch(iChannel2,(uv+ivec2(1,0))&255,0),f.x),\n\t\t\t\t  mix(texelFetch(iChannel2,(uv+ivec2(0,1))&255,0),\n\t\t\t\t      texelFetch(iChannel2,(uv+ivec2(1,1))&255,0),f.x),f.y).yx;\n#endif    \n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nfloat noiseB (vec3 p) {\n\tvec3 f = fract (p);\n\tp = floor (p);\n\tf = f * f * (3.0 - 2.0 * f);\n\tf.xy += p.xy + p.z * vec2 (37.0, 17.0);\n\tf.xy = texture (iChannel2, (f.xy + 0.5) / 256.0, -256.0).yx;\n\treturn mix (f.x, f.y, f.z);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n   \n    n = max((abs(n) - .2)*7., .001);\n    n /= (n.x + n.y + n.z );  \n    \n\tp = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    \n    return p*p;\n}\n\nvec3 guide (vec3 p){\n\treturn vec3(\n    \tsin(p.z*0.5) + sin(p.z*0.3) + cos(p.z*0.3),\n    \tcos(p.z*0.8) + sin(p.z*1.3)*0.5,\n        0.\n    )*1.2;\n}\n#define W 1.\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e4);\n    /*\n    for (int i = 0; i < 3; i++){\n    \tp = abs(p);\n        p.y -= 0.25;\n        p.xy *= rot(0.125*3.14);\n    }*/\n    p.xy -= 4.;\n    vec2 id = floor(p.xy/8.);\n    \n    p.xy = pmod(p.xy, 8.);\n    //p.xy *= 1. - pow(fract(sin(iTime + id.x + p.z)), 1.)*0.1;\n    p.xy += normalize(p.xy)*0.1*(sin(iTime + id.x + p.z));\n    p += guide(p + id.x)*0.4;\n    vec3 t = tex3D(iChannel0,p*0.1, normalize(vec3(p.x,p.y, 0.)));\n    vec3 tB = tex3D(iChannel0,p*0.2+ 1., normalize(vec3(p.x,p.y, 0.)));\n    //t.x = 1. - t.x; \n    //t.x *= 0.4;\n    //t.x = pow(smoothstep(0.,1.5,t.x*3.), 1.)*0.4;\n    \n    t.x *= 0.6;\n    float dPlant = length(p.xy) - W - t.x - tB.x*0.4;\n    \n    \n    //dPlant = max(dPlant, sin(p.z)*0.4 + 0.2);\n    \n    p.z = pmod(p.z, 4.);\n    for (float i = 0.; i < 3.; i++){\n        vec3 q = p;\n        q.z += 4.*i/3.;\n        pmod(q.z, 4.);\n        q.xy *= rot(0.7 + i);\n        q.y -= W;\n        dPlant = opSmoothUnion( dPlant, sdTorus( q, vec2(0.25,0.12) ), 0.2 );\n        //q.z -= exp(-clamp(length(q.xy)*20.,0., 20.)*1.) ;\n        q.z -= clamp(pow(length(q.xy)*0.8,3.),0., 1.) ;\n        d = dmin(d, vec2( (sdRoundCone( q, 0.2, 0.007, 1. )- tB.x*0.15)*0.6, 1.) );\n    }\n    d= dmin(d, vec2(dPlant*0.6, 2.));\n\n    d.x *= 0.5;\n    return d;\n}\n\n\n\nvec2 march(vec3 ro, vec3 rd,inout vec3 p ,inout float t, inout bool hit){\n\t\n\thit = false;\n    t = 0.;\n    vec2 d;\n    p = ro + rd*1.;\n    for(int i = 0; i < 150; i++){\n    \td = map(p);\n        glow += exp(-d.x*5.);\n        if(d.x < 0.001){\n        \thit = true;\n        \tbreak;\n        }\n        if(t > 30.){\n        \tbreak;\n        }\n        t += d.x;\n    \tp = ro + rd*t;\n    }\n\treturn d;\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.001, 0.);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross( dir, right));\n\treturn normalize(dir + right*uv.x + up*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    //ro.z += mx;\n    ro.z += mx;\n    //ro.y += 2.2;\n    //ro.xy -= normalize(guide(ro ).xy)*4.;\n    ro.xy += vec2(\n    \tcos(sin(mx*0.5)*1.14 + 0.3),\n    \tsin(sin(mx*0.5)*1.14 + 0.3)\n    )*4.;\n    vec3 lookAt = vec3(0,0,ro.z + 4. + sin(iTime*0.4)*0.2);\n    lookAt -= guide(lookAt)*1.;\n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    float t = 0.;\n    bool hit = false;\n    vec3 p =ro + rd*t;\n    vec3 lightCol = vec3(1.,0.6,0.3)*1.32;\n\n     \n    vec2 d = march(ro, rd, p, t, hit);\n    \n    if(hit){\n        vec3 n = getNormal(p);\n        vec3 l = normalize(vec3(1));\n        vec3 h = normalize(l - rd);\n        \n        float diff = max(dot(n, l),0.);\n        float spec = pow(max(dot(n, h),0.), 60.);\n        float fres = pow(1. - max(dot(n,-rd),0.), 5.);\n        \n        if (d.y == 1.){\n        \t//col += diff;\n        \tcol += mix(vec3(diff),fres*lightCol + spec*lightCol, 0.2);\n        \t//col += 2.4;\n        }\n        if (d.y == 2.){    \n            vec3 tex = tex3D(iChannel1,p*0.8, n);\n\t\t\ttex = pow(tex, vec3(0.4 ,0.8,0.5));\n        \tcol += mix(diff*tex, 1.* vec3(spec)*lightCol, 0.7)*2.;\n        }\n        col += 0.08*lightCol;\n        \n        //col += max(dot(n, normalize(vec3(1,-2,-1))),0.)* lightCol*0.09;\n        ///col += 1.;\n        //col += 0.02;\n        \n    } else {\n    \n    }\n    #define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\n    \n    col = max(col, 0.);\n    //col += lightCol*(glow*0.04)*0.7;\n    \n    if (t > 20.){\n    \tp = normalize(ro + rd)*20.;\n    }\n                //col -= vec3(1.,1.9,1.5)*lightCol*(1. -glow*0.05)*0.1;\n\n    float n = noise(p*0.9);\n    vec3 c = col;\n    col.r = c.b;\n    col.b = c.r;\n\n    //col = mix(col,vec3(0.6+ length(p) *0.09,0.24+ n * 0.02,0.08 )*4. , smoothstep(0.,1., clamp(t*0.03 - 0.2, 0., 1.) - n*0.0));\n    col = mix(col,vec3(0.2 - length(p) *0.0002,0.24+ n * 0.02,0.38 )*4. , smoothstep(0.,1., clamp(t*0.03 - 0.2, 0., 1.) - n*0.0));\n    //col = mix(col,pal(0.5, 0.5, vec3(2.5,0.3,0.6), 0.5 , 9. + p.z*0.2 ) , smoothstep(0., 1.,t*0.1));\n    col.b *= 1.2;\n            //col -= vec3(1.,1.9,3.9)*lightCol*(1. -glow*0.05)*0.1;\n    col -= vec3(1.,1.9,3.9)*lightCol*(1. -glow*0.05)*0.03;\n    \n\n    col *= 1. - pow(length(uv)*0.8,1.1)*1.2;\n    col = smoothstep(0.,0.9,col);\n    col *= 1.1;\n    col = pow(col, vec3(0.4545));\n    col.r *= 1.5;\n    col.g *= 1.3;\n    col.b *= 0.9 ;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}