{
    "Shader": {
        "info": {
            "date": "1652169389",
            "description": "A simple spline test",
            "flags": 0,
            "hasliked": 0,
            "id": "7ljBD1",
            "likes": 3,
            "name": "Spline testbed",
            "published": 3,
            "tags": [
                "catmullrom"
            ],
            "usePreview": 0,
            "username": "Suslik",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "vec2 Interp(vec2 p0, vec2 p1, float ratio)\n{\n    return mix(p0, p1, ratio);\n}\n\nvec2 lerp(vec2 p0, vec2 p1, float t0, float t1, float param)\n{\n  float inv_range = 1.0f / (t1 - t0);\n  return p0 * (t1 - param) * inv_range + p1 * (param - t0) * inv_range;\n}\n\n//https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\nvec2 CatmullRom(vec2 p0, vec2 p1, vec2 p2, vec2 p3, vec4 t, float param)\n{\n  vec2 a0 = lerp(p0, p1, t[0], t[1], param);\n  vec2 a1 = lerp(p1, p2, t[1], t[2], param);\n  vec2 a2 = lerp(p2, p3, t[2], t[3], param);\n  \n  vec2 b0 = lerp(a0, a1, t[0], t[2], param);\n  vec2 b1 = lerp(a1, a2, t[1], t[3], param);\n  \n  return lerp(b0, b1, t[1], t[2], param);\n}\n\n//http://www.jcgt.org/published/0009/03/02/paper.pdf\nuvec3 hash33UintPcg(uvec3 v)\n{\n\tv = v * 1664525u + 1013904223u;\n\tv.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;\n\t//v += v.yzx * v.zxy; //swizzled notation is not exactly the same because components depend on each other, but works too\n\n\tv ^= v >> 16u;\n\tv.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;\n\t//v += v.yzx * v.zxy;\n\treturn v;\n}\n\n//this jitters on my machine for some reason\nvec3 hash33( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\nvec3 hash33Stable(vec3 val)\n{\n\tuvec3 seed_uvec3 = floatBitsToUint(val);\n\tuvec3 hash_uvec3 = hash33UintPcg(seed_uvec3);\n\treturn vec3(hash_uvec3) * (1.0f / float(~0u));\n}\n\nfloat GetSplineParamDelta(vec2 p0, vec2 p1, float alpha)\n{\n    return pow(length(p0 - p1), alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel_pos = fragCoord.xy;\n    \n    vec3 col = vec3(0.0f);\n    vec2 p[4];\n    p[0] = vec2(100.0f, 100.0f);\n    p[1] = vec2(500.0f, 100.0f);\n    p[2] = vec2(550.0f, 200.0f);\n    p[3] = vec2(150.0f, 300.0f);\n    vec2 size = iResolution.xy;\n    \n    float alpha = float(iMouse.x) / float(iResolution.x);//sin(iTime) * 0.5f + 0.5f;\n    \n    vec4 t;\n    t[0] = 0.0f;\n    for(int i = 1; i < 4; i++)\n    {\n        t[i] = t[i - 1] + GetSplineParamDelta(p[i - 1], p[i], alpha);\n    }\n    \n    if(length(pixel_pos - p[1]) < 20.0f)\n      col += vec3(0.5f, 0.0f, 0.0f);\n    for(int i = 0; i < 10; i++)\n    {\n        for(float ratio = 0.0f; ratio < 1.0f; ratio += 0.01f)\n        {\n            vec2 p = CatmullRom(p[0], p[1], p[2], p[3], vec4(t[0], t[1], t[2], t[3]), mix(t[1], t[2], ratio));\n\n            if(length(pixel_pos - p) < 10.0f)\n                col += vec3(0.1f, 0.1f, 0.1f);\n        }\n        if(length(pixel_pos - p[2]) < 20.0f)\n            col += vec3(0.5f, 0.0f, 0.0f);\n\n        p[0] = p[1];\n        p[1] = p[2];\n        p[2] = p[3];\n        t[0] = t[1];\n        t[1] = t[2];\n        t[2] = t[3];\n        p[3] = hash33Stable(vec3(i, 0.0f, 0.0f)).xy * size;\n        t[3] = t[2] + GetSplineParamDelta(p[2], p[3], alpha);\n    }\n        \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1.0f / 2.2f)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}