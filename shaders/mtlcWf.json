{
    "Shader": {
        "info": {
            "date": "1691282820",
            "description": "Very simple implementation of how I think that valve is doing the CS2 smoke cutouts. Just changes the perceived depth through the smoke based on the cubemap where a ray intersects the sphere in both directions.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtlcWf",
            "likes": 3,
            "name": "Simple smoke cutout",
            "published": 3,
            "tags": [
                "volumetric",
                "smoke"
            ],
            "usePreview": 0,
            "username": "Oman395",
            "viewed": 275
        },
        "renderpass": [
            {
                "code": "const vec3 CAM = vec3(0,0,-3);\nconst float PI = 3.14159265;\nconst float FOCUS = 3.0;\nconst vec2 EPSILON = vec2(0.000001, 0);\nconst vec4 SMOKE_COL = vec4(0.3);\nconst float MAX_DIST = 0.7;\n\nvec3 rotate(vec3 vec, vec2 angles) {\n    angles = angles.yx;\n    vec = vec3(\n        vec.x,\n        vec.y * cos(angles.x) - vec.z * sin(angles.x),\n        vec.y * sin(angles.x) + vec.z * cos(angles.x)\n    );\n    vec = vec3(\n        vec.x * cos(angles.y) + vec.z * sin(angles.y),\n        vec.y,\n        -vec.x * sin(angles.y) + vec.z * cos(angles.y)\n    );\n    return vec;\n}\n\nvec3 camPos(float iTimse, vec2 iMouse) {\n    return rotate(CAM, iMouse * vec2(PI, -PI));\n}\n\nvec2 camDir(float iTime, vec2 iMouse) {\n    return iMouse * vec2(PI, -PI);\n}\n\n// https://gist.github.com/wwwtyro/beecc31d65d1004f5a9d\nvec2 raySphere(vec3 r0, vec3 rd, vec3 s0, float sr) {\n    float a = dot(rd, rd);\n    vec3 s0_r0 = r0 - s0;\n    float b = 2.0 * dot(rd, s0_r0);\n    float c = dot(s0_r0, s0_r0) - (sr * sr);\n\tfloat disc = b * b - 4.0 * a* c;\n    if (disc < 0.0) {\n        return vec2(-1.0, -1.0);\n    }else{\n\t\treturn vec2(-b - sqrt(disc), -b + sqrt(disc)) / (2.0 * a);\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvN = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uvN.x *= iResolution.x / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = (mouse - 0.5) * 2.0;\n    mouse.x *= iResolution.x / iResolution.y;\n    vec3 pos = camPos(iTime, mouse);\n    vec2 dir = camDir(iTime, mouse);\n    vec3 rayDir = normalize(vec3(uvN, FOCUS));\n    rayDir = rotate(rayDir, dir);\n    vec2 sphereData = raySphere(pos, rayDir, vec3(0), 0.5);\n    float mult = 1.0;\n    if(sphereData.x > 0.0) {\n        vec3 dirToCenterI = normalize(\n            pos + rayDir * sphereData.x - vec3(0)\n        );\n        vec3 dirToCenterO = normalize(\n            pos + rayDir * sphereData.y - vec3(0)\n        );\n        float depthThrough = sphereData.y - sphereData.x; // Original depth through smoke\n        vec4 depthAdjIn = texture(iChannel0, dirToCenterI); // Smoke cutout sample where the ray enters the smoke\n        vec4 depthAdjOut = texture(iChannel0, dirToCenterO); // Smoke cutout sample where the ray exits the smoke\n        depthThrough -= pow(0.5 * length(\n                depthAdjIn * // We multiply the adjustments to make sure that if only one of them is clear, we have very little influence\n                depthAdjOut // I have no idea why, but we need to keep these as vec4s, and take the length of their products, rather than just taking the product of their lengths\n            ), 4.0); // We raise this to 4 because it helps make a sharper curve between cutout and not cut out\n        depthThrough = max(depthThrough, 0.0); // Doesn't make sense to have negative depth values\n        mult = 1.0 - abs(depthThrough); // The smoke should be less opaque when the distance travelled through it is less\n        mult /= MAX_DIST; // Scale this so that we can have only the edges be opaque\n        mult = clamp(mult, 0.0, 1.0); // Doesn't make sense to have negative or >1 opacity values\n        mult = pow(mult, 3.0); // Make the smoke mostly opaque, with a fade-off towards the edge\n    }\n    vec4 col = texture(iChannel2, rayDir);\n    fragColor = col * mult + SMOKE_COL * (1.0 - mult);\n    return;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}