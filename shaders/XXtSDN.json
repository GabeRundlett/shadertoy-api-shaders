{
    "Shader": {
        "info": {
            "date": "1724315180",
            "description": "source https://www.shadertoy.com/view/4cXBWB https://www.shadertoy.com/view/XlfGRj",
            "flags": 1,
            "hasliked": 0,
            "id": "XXtSDN",
            "likes": 12,
            "name": "warp gate",
            "published": 3,
            "tags": [
                "warp",
                "stars"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nfloat sdStar(in vec2 p, in float r, in float n, in float w)\n{\n    // these 5 lines can be precomputed for a given shape\n    //float m = n*(1.0-w) + w*2.0;\n    float m = n + w*(2.0-n);\n    \n    float an = 3.1415927/n;\n    float en = 3.1415927/m;\n    vec2  racs = r*vec2(cos(an),sin(an));\n    vec2   ecs =   vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= racs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, racs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02) );// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nconst float a=1.0;\nconst float b=.1759;\nconst float PI=3.14159265359;\n#define THICKNESS .11\n#define ARMS 4.\n#define GRID 96.\n#define COLORS 2.\n#define STARS 2.\n#define SPEED 1.\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat spiralSDF(vec2 p,vec2 c, float phase){\n    p = p - c;\n    float t=atan(p.y, p.x) + phase;\n    float r=length(p.xy);\n    float n=(log(r/a)/b-t)/(2.*PI);\n\n    // Cap the spiral\n    float upper_r=a*exp(b*(t+2.*PI*ceil(n)));\n    float lower_r=a*exp(b*(t+2.*PI*floor(n)));\n    return min(abs(upper_r-r),abs(r-lower_r));\n}\n#define SPEED2 0.2\n#define CENTER vec2(0.0,0.0);\n#define MAX_RADIUS 1.\n#define DISTORTION_RADIUS 1.7\n#define INTRO_END 0.07\n#define OUTRO_START 0.5\n#define EASE 1.5\n#define CHROMATIC_ABERRATION 0\n#define CHROMATIC_ABERRATION_DIFF 0.02\n\nvec2 normalize_coord(vec2 pos) { return (pos/iResolution.xy*2.-1.)*vec2(iResolution.x/iResolution.y,1.)*.5+.5; }\n\nvec2 get_offset(float t, vec2 pos, vec2 uv) {\n    //float r = MAX_RADIUS*t-DISTORTION_RADIUS;\n    float r = MAX_RADIUS * t;\n    float d = length(pos-uv)-r; // d is the magnitude of distortion\n    vec2 dir = normalize(pos-uv);\n    float distortion_mask = 1.-smoothstep(0., DISTORTION_RADIUS, abs(d));\n    float smooth_intro_mask = smoothstep(0., INTRO_END, t);\n    float smooth_outro_mask = 1.-smoothstep(OUTRO_START, 1., t);\n    return dir*d*distortion_mask*smooth_intro_mask*smooth_outro_mask;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-0.5;\n \n    float phase = 2.*3.14159/ARMS;\n    for(float i = 0.;i<ARMS;i++){\nfloat d2= 01.-spiralSDF(uv,vec2(0.),.3*SPEED*iTime*i);\nuv*=d2;\n\n}\n\n\tuv.y*=iResolution.y/iResolution.x;\n    \n    \n     vec2 pos = CENTER;\n   \n    float t3 = pow(fract(iTime*SPEED2), 1./EASE); // t is the progress through the animation\n\n\n    vec2 offset = get_offset(t3, pos, uv);\n    vec3 col3 = texture(iChannel0, uv+offset).rgb;\n\n\tvec3 dir=vec3(uv*zoom,iTime*0.001);\n\tfloat time=iTime*speed+.25;\nvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n dir.x+=cos(iTime*0.1);\n  dir.y+=sin(iTime*0.1);\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    // Normalized pixel coordinates (from 0 to 1)\n    ;\n    float t = iTime/3.0;\n     \n\n    float sn = 5.0;\n    float sw = fract(t);\n    float d = sdStar( p,0.7, sn, sw );\n\n    // Time varying pixel color\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n\n    \n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    \n\tfragColor = vec4(col,1.0);\n\n\tvec3 from=vec3(1.,.5,0.5);\n\t\n\tdir.xy+= get_offset(t3+CHROMATIC_ABERRATION_DIFF, pos, uv);\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.55,0.5,0.55)*0.5, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}