{
    "Shader": {
        "info": {
            "date": "1715111248",
            "description": "a random thing I've been wanting to try for months but never got around to",
            "flags": 32,
            "hasliked": 0,
            "id": "XfVXWh",
            "likes": 7,
            "name": "sdf transition",
            "published": 3,
            "tags": [
                "experiment",
                "thingy"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n    vec2 r = iResolution.xy;    \n    O = texture(iChannel0, U/r);\n    \n    \n    O = vec4(\n        sqrt(O.x),\n        O.x,\n        O.x*O.x,\n        1.\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define preset 0\n// options: 0-3\n\n\n\nconst float pi = 3.1415926;\nfloat starDF(in vec2 p, in float r, in int n, in float m) // m=[2,n] \n{\n    // these 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n} // function by Inigo Quilez\n\nfloat boxDF( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n} // function by Inigo Quilez\n\nfloat dot2(vec2 a){ return dot(a, a); }\nfloat coolSDF( in vec2 p )\n{\n    float six = (p.y<0.0) ? -p.x : p.x;\n    p.x = abs(p.x);\n    p.y = abs(p.y) - 0.2;\n    float rex = p.x - min(round(p.x/0.4),0.4);\n    float aby = abs(p.y-0.2)-0.6;\n    \n    float d = dot2(vec2(six,-p.y)-clamp(0.5*(six-p.y),0.0,0.2));\n    d = min(d,dot2(vec2(p.x,-aby)-clamp(0.5*(p.x-aby),0.0,0.4)));\n    d = min(d,dot2(vec2(rex,p.y  -clamp(p.y          ,0.0,0.4))));\n    \n    float s = 2.0*p.x + aby + abs(aby+0.4) - 0.4;\n    return sqrt(d) * sign(s);\n}\n\n\n\n\n\n\nfloat df(vec2 p, float f){\n    #if preset==0\n    return mix(\n        coolSDF(p), \n        starDF(p, 1., 9, 2. + f), \n    f);\n    #endif\n    #if preset==1\n    return mix(\n        coolSDF(p), \n        length(p)-1., \n    f);\n    #endif\n    #if preset==2\n    return mix(\n        boxDF(p, vec2(1)),\n        length(p)-1.,\n    f);\n    #endif\n    #if preset==3\n    return mix(\n        boxDF(p, vec2(1)),\n        starDF(p, 1., 9, 2. + f),\n    f);\n    #endif\n    \n}\n\n\n\n\n\n\n\nmat2 rot(float t){\n    return mat2(cos(t), sin(t), -sin(t), cos(t));\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n    \n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    vec2 muv = (2.*iMouse.xy-r)/r.y;\n    \n    if (iFrame%600 < 20){\n        O = vec4(0);\n        return;\n    }\n    \n    O = texture(iChannel0, uv);\n    \n    float f = mod((float(iFrame)+U.x-U.y)*0.21527 , 1.);\n    vec2 p = (cuv - vec2(f-.5, 0)*r.x/r.y)*r.x/r.y;\n    \n    float x = df(p* rot(-f*pi), f);\n    \n    O.x = mix(O.x, (1.-smoothstep(0., 50./(r.y*r.y), x*x)) * 4e1 * (-p.x*.5 + .5), exp(-mod(iTime, 10.)-2.));\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}