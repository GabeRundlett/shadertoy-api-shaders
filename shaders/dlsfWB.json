{
    "Shader": {
        "info": {
            "date": "1693423366",
            "description": "mouse controls camera. \n\nok ok, it's maybe not now you make a polyedral torus :-p\n( at least #19:  r - 4.*z.x seems wrong )\nâ†’ better solution by spalmer here: http://shadertoy.com/view/ctffWl  ",
            "flags": 0,
            "hasliked": 0,
            "id": "dlsfWB",
            "likes": 21,
            "name": "polyhedral torus",
            "published": 3,
            "tags": [
                "short",
                "golf"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "// better solution by spalmer here: http://shadertoy.com/view/ctffWl\n\n\n#define rot(a)    mat2(cos(a+vec4(0,11,33,0)))                // rotation\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,r,a;\n    vec3  R = iResolution, z,\n          D = normalize( vec3(U+U, -2.*R.y) - R ),            // ray direction\n          p = vec3(0,0,12), q,P,                              // marching point along ray \n          C = iMouse.z > 0. ? 8.*iMouse.xyz/R -4.             // camera control\n                          : 3.* cos(.3*iTime + vec3(0,11,0)); // demo mode\n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.005 )           // march scene\n        q = p, \n        q.yz *= rot(-C.y),                                    // rotations\n        q.xz *= rot(-C.x),\n        r = length(q.yz), a = atan(q.x,r-4.),                                                       \n        P = vec3( atan(q.z,q.y) , a , 0 ) /.628,              // surface parameterization \n        z = sin(fract(P)*.628-.314),                          // polygonalize \n        z = sqrt(1.+z*z),\n        t = length(vec2( q.x, r - 4.*z.x )) - z.y,            // polygonal torus surface     \n        p += .2*t*D;                                          // step forward = dist to obj  \n \n    O *= O*O*O*2.;                                            // color scheme\n // P = floor(P), O *= .6 + .6 * cos( P.x+11.7*P.y  + vec4(0,23,21,0) ); // coloring quads\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}