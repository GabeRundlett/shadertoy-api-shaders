{
    "Shader": {
        "info": {
            "date": "1555007179",
            "description": "reference: http://advances.realtimerendering.com/other/2016/naughty_dog/NaughtyDog_TechArt_Final.pdf",
            "flags": 0,
            "hasliked": 0,
            "id": "tsjXDV",
            "likes": 43,
            "name": "Wet Concrete",
            "published": 3,
            "tags": [
                "3d",
                "voronoi",
                "wet"
            ],
            "usePreview": 1,
            "username": "kaneta",
            "viewed": 2041
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926\n\n// Voronoi - distances by iq\n// https://www.shadertoy.com/view/ldl3W8\nvec2 hash2( vec2 p )\n{\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\n// Vorocracks marble by FabriceNeyret2\n// https://www.shadertoy.com/view/Xs3fR4\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define hash21(p) fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123)\nfloat noise2(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n\n    float v= mix( mix(hash21(i+vec2(0,0)),hash21(i+vec2(1,0)),f.x),\n                  mix(hash21(i+vec2(0,1)),hash21(i+vec2(1,1)),f.x), f.y);\n\treturn 2.*v-1.;\n}\n\n\n#define noise22(p) vec2(noise2(p),noise2(p+17.7))\nvec2 fbm22(vec2 p) {\n    vec2 v = vec2(0);\n    float a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 6; i++, p*=2.,a/=2.) \n        p *= R,\n        v += a * noise22(p);\n\n    return v;\n}\nfloat fbm2(vec2 p) {\n    float v = 0.,  a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 9; i++, p*=2.,a/=2.) \n        p *= R,\n        v += a * noise2(p);\n\n    return v;\n}\n\nfloat luminance(vec3 col)\n{\n    return dot(vec3(0.298912, 0.586611, 0.114478), col);\n}\n\nvec3 contrast(vec3 col, float scale)\n{\n    return (col - 0.5) * scale + 0.5;\n}\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat remap(float val, float inMin, float inMax, float outMin, float outMax)\n{\n    return clamp(outMin + (val - inMin) * (outMax - outMin) / (inMax - inMin), outMin, outMax);\n}\n\n\nfloat roadTex( vec2 p )\n{\n    p *= 0.1;\n    float n = noise2(p*1000.0);\n    float f = remap(fbm2(p * 12.0), -0.2, 0.4, 0.0, 1.0);\n\n    float d = 999999.9;\n    \n    float height = 1.0;\n    float alpha = 2.0;\n    \n    for(float i=0.; i<5. ; i++) {\n        vec3 c = voronoi( 8.0*p + fbm22(p*8.0) );\n        height -= smoothstep(0.05, 0.0, c.x) * alpha * remap(fbm2(p * 12.0), 0.0, 0.4, 0.0, 1.0);\n        alpha *= 0.55;\n        d = min(d, c.x);\n        p *= 1.5 * rot(.37);\n    }\n    \n    vec3 col = vec3(height + n*0.1 - f);\n    \n    col = contrast(col, 0.05);\n\treturn col.x;\n}\n\n// iq's sky https://www.shadertoy.com/view/MdX3Rr\nvec3 sunDir = normalize(vec3(.3, .25, .5));\nvec3 skyColor(vec3 rd)\n{\n    float sundot = clamp(dot(rd,sunDir),0.0,1.0);\n    // sky\t\t\n    //vec3 col = vec3(0.2,0.5,0.85)*1.1 - rd.y*rd.y*0.5;\n    vec3 col = mix(vec3(0.2,0.5,0.85)*1.1, vec3(0.0,0.15,0.7), rd.y);\n    col = mix( col, 0.85*vec3(0.8,0.8,0.7), pow( 1.0-max(rd.y,0.0), 4.0 ) );\n    // sun\n    col += 0.3*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n    col += 0.5*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n    col += 6.0*vec3(1.0,0.8,0.6)*pow( sundot,1024.0 );\n    // horizon\n    //col = mix( col, 0.68*vec3(0.4,0.65,1.0), pow( 1.0-max(rd.y,0.0), 16.0 ) );\n    return col * 10.0;\n}\n\nfloat trace( vec3 p, vec3 ray )\n{\n    float dist = 99999.9;\n    float t = -p.y / ray.y;\n    if ( t > 0.0 )\n    {\n        dist = t;\n    }\n \n    return dist;\n}\n\nmat3 camera(vec3 ro, vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta - ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 reinhard(vec3 col, float exposure, float white) {\n    col *= exposure;\n    white *= exposure;\n    float lum = luminance(col);\n    return (col * (lum / (white * white) + 1.0) / (lum + 1.0));\n}\n\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n}\n\nvec3 normal( in vec3 pos )\n{\n    vec3 e = vec3(0.001,0.0,0.0);\n\treturn normalize( vec3(roadTex(pos.xz-e.xy) - roadTex(pos.xz+e.xy),\n                           20.0*e.x,\n                           roadTex(pos.xz-e.yx) - roadTex(pos.xz+e.yx) ) );\n}\n\nfloat ndfGGX(float NdotH, float roughness)\n{\n\tfloat alpha   = roughness * roughness;\n\tfloat alphaSq = alpha * alpha;\n\n\tfloat denom = (NdotH * NdotH) * (alphaSq - 1.0) + 1.0;\n\treturn alphaSq / (M_PI * denom * denom);\n}\n\nfloat gaSchlickG1(float theta, float k)\n{\n\treturn theta / (theta * (1.0 - k) + k);\n}\n\nfloat gaSchlickGGX(float NdotL, float NdotV, float roughness)\n{\n\tfloat r = roughness + 1.0;\n\tfloat k = (r * r) / 8.0;\n\treturn gaSchlickG1(NdotL, k) * gaSchlickG1(NdotV, k);\n}\n\nvec3 fresnelSchlick_roughness(vec3 F0, float cosTheta, float roughness) {\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\nvec3 PBR(vec3 pos, vec3 albedo, float metalness, float roughness, vec3 N, vec3 V, vec3 L, vec3 Lradiance)\n{\n\tvec3 H = normalize(L + V);\n\tfloat NdotV = max(0.0, dot(N, V));\n\tfloat NdotL = max(0.0, dot(N, L));\n\tfloat NdotH = max(0.0, dot(N, H));\n\t\t\n\tvec3 F0 = mix(vec3(0.04), albedo, metalness);\n\n\tvec3 F  = fresnelSchlick_roughness(F0, max(0.0, dot(H, L)), roughness);\n\tfloat D = ndfGGX(NdotH, roughness);\n\tfloat G = gaSchlickGGX(NdotL, NdotV, roughness);\n\n\tvec3 kd = mix(vec3(1.0) - F, vec3(0.0), metalness);\n    \n    //NdotL *= shadow;\n\tvec3 diffuseBRDF = kd * albedo / M_PI;\n\tvec3 specularBRDF = (F * D * G) / max(0.0001, 4.0 * NdotL * NdotV);\n\n\treturn (diffuseBRDF + specularBRDF) * Lradiance * NdotL;\n}\n\nvec3 EnvBRDFApprox( vec3 SpecularColor, float Roughness, float NoV )\n{\n\tconst vec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );\n\tvec4 r = Roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn SpecularColor * AB.x + AB.y;\n}\n\nvec3 calcAmbient(vec3 pos, vec3 albedo, float metalness, float roughness, vec3 N, vec3 V)\n{\n\tvec3 F0 = mix(vec3(0.04), albedo, metalness);\n\t//vec3 F  = fresnelSchlick(F0, max(0.0, dot(N, V)));\n    vec3 F  = fresnelSchlick_roughness(F0, max(0.0, dot(N, V)), roughness);\n    vec3 kd = mix(vec3(1.0) - F, vec3(0.0), metalness);\n\n    vec3 ambientColor = mix(vec3(0.2,0.5,0.85)*0.8, vec3(0.1,0.25,0.8) * 0.5, 0.5+0.5*N.y);\n    \n    vec3 diffuseAmbient = kd * albedo * ambientColor * min(1.0, 0.75+0.5*N.y) * 3.0;\n    vec3 R = reflect(-V, N);\n    \n    vec3 col = mix(skyColor(R) * pow( 1.0-max(-R.y,0.0), 4.0 ), mix(vec3(0.2,0.5,0.85)*0.8, vec3(0.1,0.25,0.8) * 0.5, 0.5+0.5*R.y)*3.0 * (0.5+0.5*R.y), pow(roughness, 0.5));\n\n    vec3 ref = EnvBRDFApprox(F0, roughness, max(dot(N, V), 0.0));\n    //vec3 specularAmbient = col * F;\n    vec3 specularAmbient = col * ref;\n\n    return vec3(diffuseAmbient + specularAmbient);\n}\n\n// http://advances.realtimerendering.com/other/2016/naughty_dog/NaughtyDog_TechArt_Final.pdf\nvoid wet(inout vec3 albedo, inout float roughness, inout vec3 norm, float w)\n{\n    albedo = mix(albedo, albedo * albedo, remap(w, 0.0, 0.35, 0.0, 1.0) * roughness);\n    roughness = mix(roughness, 0.05, remap(w, 0.25, 0.5, 0.0, 1.0));\n    norm = mix(norm, vec3(0.0, 1.0, 0.0), vec3(remap(w, 0.45, 0.95, 0.0, 1.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float mousex = 10.0*iMouse.x/iResolution.x + 0.75;\n    float mousey = remap(iMouse.y/iResolution.y, 0.0, 1.0, 1.5, 10.0);\n    vec3 ro = vec3(-5.0 * cos(mousex), mousey, -5.0 * sin(mousex) + iTime);\n    vec3 ta = vec3(0.0, 0.0, iTime);\n    mat3 c = camera(ro, ta, 0.0);\n    vec3 ray = c * normalize(vec3(p, 3.5));\n    float depth = trace(ro, ray);\n    \n    vec3 pos = ro + ray * depth;\n\n    float sundot = clamp(dot(ray,sunDir),0.0,1.0);\n    float height = roadTex(pos.xz);\n    vec3 albedo = vec3(pow(height, 2.2));\n    vec3 n = normal(pos);\n    float roughness = 1.0 - albedo.x;\n    \n    float tt = remap(sin(iTime * 0.5) * 0.5 + 0.5, 0.0, 1.0, 0.33, 0.5);\n    wet(albedo, roughness, n, smoothstep(tt + 0.03, tt, height));\n    \n    vec3 col = PBR(pos, albedo, 0.0, roughness, n, -ray, sunDir, vec3(50.0));\n    col += calcAmbient(pos, albedo, 0.0, roughness, n, -ray);\n    \n    //col = col * saturate(dot(n, sunDir));\n    \n    col += 1.5*vec3(1.0,0.7,0.3)*pow( sundot, 4.0 );\n    //col = reinhard(col, 0.15, 50.0);\n    col = acesFilm(col* 0.08);\n    col = pow(col, vec3(1.0/2.2));\n\tfragColor = vec4(col,1.0);\n    //fragColor = vec4(vec3(roadTex(p * 5.0)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}