{
    "Shader": {
        "info": {
            "date": "1696396187",
            "description": "very simple blending of two sdfs while coloring each",
            "flags": 0,
            "hasliked": 0,
            "id": "DsVyz3",
            "likes": 1,
            "name": "Simple 2D SDF smooth blending",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "TryAngle",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "float circleSDF(vec2 p, vec2 center, float radius) {\n    return length(p - center) - radius;\n}\n\nfloat boxSDF(vec2 p, vec2 center, vec2 size) {\n    vec2 d = abs(p - center) - size;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\n\nfloat smax(float a, float b, float k) {\n    return log(exp(k*a) + exp(k*b)) / k;\n}\n\nfloat smin(float a, float b, float k) {\n    return -smax(-a, -b, k);\n}\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Calculate distances\n    float d1 = circleSDF(fragCoord, iMouse.xy, 20.0);\n    //if (d1 < 0.0) { fragColor = vec4(0.0, 1.0, 1.0, 1.0); }\n    float d2 = boxSDF(fragCoord, vec2(300, 300), vec2(200, 100));\n    //if (d2 < 0.0) { fragColor = vec4(1.0, 1.0, 0.0, 1.0); }\n    \n    // Compute smooth union\n    float smoothDist = smin(d1, d2, 0.1);\n    \n    // Define colors for each primitive and background\n    vec3 color1 = vec3(1.0, 0.0, 0.0); // Red for circle\n    vec3 color2 = vec3(0.0, 1.0, 0.0); // Green for box\n    vec3 bgColor = vec3(0.0); // Black for background\n    vec3 outlineColor = vec3(1.0, 1.0, 1.0); // White for outline\n\n\n    // Compute weights for color interpolation\n    float weight1 = 1.0 / (1.0 + exp(10.0 * d1)); // Adjust the multiplier as needed\n    float weight2 = 1.0 / (1.0 + exp(10.0 * d2)); // Adjust the multiplier as needed\n\n    // Normalize weights\n    float totalWeight = weight1 + weight2;\n    weight1 /= totalWeight;\n    weight2 /= totalWeight;\n\n    // antialiasing color mix\n    vec3 finalColor = mix( \n        weight1 * color1 + weight2 * color2,\n        bgColor,\n        smoothstep( -1.,1.,smoothDist/fwidth(smoothDist))\n    );\n    \n    // outline + antialiasing \n    float outlineWidth = 2.; \n    finalColor = mix(\n        outlineColor,\n        finalColor,\n        smoothstep( -1.,1.,( abs(smoothDist) - outlineWidth )/fwidth(smoothDist))\n    );\n\n\n\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}