{
    "Shader": {
        "info": {
            "date": "1573335983",
            "description": "a thing i made while eating beans at 5 a- these jokes are getting boring, arent they?",
            "flags": 0,
            "hasliked": 0,
            "id": "WsySR1",
            "likes": 10,
            "name": "light at the end of the tunnel",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "noise",
                "tunnel"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "//do you like shitty code?\n//if not, then you probably dont want to read this then\n\nmat3 lookat(vec3 fwd) {\n    //vec3 fwd = normalize(obj - cam);\n    vec3 up = vec3(0., 1., 0.) - fwd * fwd.y;\n    vec3 rt = cross(fwd, up);\n    return transpose(mat3(rt, up, fwd));\n}\n\nvec2 path(float t) {\n    return sin(t * vec2(1., .83)) * .5 + sin(t * vec2(.3, .21)) * 1.;\n}\n\nvec2 path_dt(float t) {\n    return cos(t * vec2(1., .83)) * vec2(1., .83) * .5 + cos(t * vec2(.3, .21)) * vec2(.3, .21) * 1.;\n}\n\n//copied from https://iquilezles.org/articles/gradientnoise\n//i sli- i mean heavily modified the code to be more performant\n//so that my toaster potato from the year 1683 can run it at 60 fps\nfloat noise(vec3 x) {\n    // grid\n    ivec3 p = ivec3(floor(x));\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    \n    // gradients & projections\n    float acc = 0.;\n    vec3 ga = texelFetch(iChannel1, p+ivec3(0,0,0) & 31, 0).xyz * 2. - 1.;\n    float va = dot( ga, w-vec3(0.0,0.0,0.0) );\n    vec3 gb = texelFetch(iChannel1, p+ivec3(1,0,0) & 31, 0).xyz * 2. - 1.;\n    float vb = dot( gb, w-vec3(1.0,0.0,0.0) );\n    vec3 gc = texelFetch(iChannel1, p+ivec3(0,1,0) & 31, 0).xyz * 2. - 1.;\n    float vc = dot( gc, w-vec3(0.0,1.0,0.0) );\n    vec3 gd = texelFetch(iChannel1, p+ivec3(1,1,0) & 31, 0).xyz * 2. - 1.;\n    float vd = dot( gd, w-vec3(1.0,1.0,0.0) );\n    vec3 ge = texelFetch(iChannel1, p+ivec3(0,0,1) & 31, 0).xyz * 2. - 1.;\n    float ve = dot( ge, w-vec3(0.0,0.0,1.0) );\n    vec3 gf = texelFetch(iChannel1, p+ivec3(1,0,1) & 31, 0).xyz * 2. - 1.;\n    float vf = dot( gf, w-vec3(1.0,0.0,1.0) );\n    vec3 gg = texelFetch(iChannel1, p+ivec3(0,1,1) & 31, 0).xyz * 2. - 1.;\n    float vg = dot( gg, w-vec3(0.0,1.0,1.0) );\n    vec3 gh = texelFetch(iChannel1, p+ivec3(1,1,1) & 31, 0).xyz * 2. - 1.;\n    float vh = dot( gh, w-vec3(1.0,1.0,1.0) );\n\t\n    // interpolation\n    return va + \n           u.x*(vb-va) + \n           u.y*(vc-va) + \n           u.z*(ve-va) + \n           u.x*u.y*(va-vb-vc+vd) + \n           u.y*u.z*(va-vc-ve+vg) + \n           u.z*u.x*(va-vb-ve+vf) + \n           u.x*u.y*u.z*(-va+vb+vc-vd+ve-vf-vg+vh);\n}\n\nfloat sdf(vec3 p) {\n    return .7 - length(p.xy - path(p.z)) + noise(p * 1.5) * .6 + noise(p * 5.) * .15;\n}\n\n//yet another piece of code copied from iq? amazing\n//https://iquilezles.org/articles/normalsSDF\nvec3 sdf_normal(vec3 p) {\n    const float h = 0.0001;\n    #define ZERO (min(iFrame,0))\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*sdf(p+e*h);\n    }\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pos = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\n    mat3 view_mat = lookat(normalize(vec3(path_dt(iTime + .5), 1.)));\n\n    vec3 ro = vec3(path(iTime), iTime);\n    vec3 rd = normalize(vec3(pos, 1.)) * view_mat;\n    \n    float totdist = 0.;\n    for(int i = 0; i < 64; i++) {\n        float currdist = sdf(ro + rd * totdist);\n        totdist += currdist * .6;\n        if(abs(currdist) < .001) break;\n        if(totdist > 7.) break;\n    }\n    \n    vec3 hitpos = ro + rd * totdist;\n    vec3 normal = sdf_normal(hitpos);\n    //triplanar texturing code sort of copied from https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html\n    vec3 weights = max((abs(normal) - .2) * .7, 0.);\n    weights /= dot(vec3(1.), weights);\n    fragColor = ( texture(iChannel0, hitpos.yz * .3) * weights.x\n                + texture(iChannel0, hitpos.xz * .3) * weights.y\n                + texture(iChannel0, hitpos.xy * .3) * weights.z) / totdist * (1.-dot(normal, rd)) / 2.;\n    fragColor *= .5;\n    fragColor += max(hitpos.z - ro.z - 3., 0.) * .2;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}