{
    "Shader": {
        "info": {
            "date": "1726221182",
            "description": "Neural network noise estimation shader for perlin noise to draw an iris.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3XcWM",
            "likes": 2,
            "name": "Assignment shader NN + Graphics",
            "published": 3,
            "tags": [
                "noise",
                "iris",
                "neuralnetwork"
            ],
            "usePreview": 0,
            "username": "Augment",
            "viewed": 81
        },
        "renderpass": [
            {
                "code": "const float w1[] = float[](0.12747517,-1.4492788,-1.571776,0.47071224,-0.4313699,1.4601214,-1.8076001,-0.27137446,1.3735086,-0.33625326,0.84425724,-2.2481058,-0.09576915,-0.46387452,0.6227102,2.111203,-0.7653647,0.007468053,-0.059216026,2.0227616,1.3419704,-0.3735907,-0.8848344,1.1420373,-0.9970717,-2.350934,-1.3578355,-0.14776295,-0.9618591,-0.30670255,-1.0491548,2.4471576);\nconst float b1[] = float[](-0.9706696,-1.297013,1.0144919,1.8744526,-0.053386156,0.6831713,-0.6276181,-0.62003857,-0.98427635,0.39154664,-0.60723746,-0.58756226,-0.7860442,-0.72655046,0.044802316,0.5263973);\nconst float w2[] = float[](0.24671707,-1.0039077,-0.007563019,-0.061959486,-0.2234703,-0.20041868,-0.017069072,0.48657322,-0.50156564,-0.44888055,0.14426602,0.16206451,0.751821,-0.6894128,-0.29218858,0.06084501,0.18545581,0.24188146,0.01761313,0.7891993,-0.2941712,-0.16270766,-0.013245188,0.8388681,-0.13804147,0.034394417,-0.41021958,-0.1240717,-0.079002485,0.3597232,0.89424276,-0.055227164,-0.08279252,-0.1543811,-0.40572038,-0.4605175,-0.35264125,0.36074048,0.5711394,-0.8263461,0.19337283,-0.469245,0.4545375,-0.035191823,0.9076361,-0.15076557,0.51949,0.054762907,1.0243534,-0.20424893,-0.57904416,0.09855959,-0.18099739,-0.3889549,0.20915326,0.35576382,-0.17227621,-0.30429414,-0.3671834,0.0421817,-0.3071044,0.1664226,0.06770124,-0.89509326,-0.0882551,-0.17251413,-0.25123537,-0.32224622,0.43527323,-0.13450171,0.23817311,-0.074371755,-0.017947758,-0.05790339,0.28111395,-0.13004573,0.5894431,0.09694507,0.05153208,-0.45751587,-0.23415244,0.15905978,0.2596141,0.18359151,-0.3625642,-0.20485361,-0.022403209,0.236918,-0.041860815,-0.31352824,-0.12484196,-0.048763204,-0.11973478,0.10005116,-0.11232315,0.080330305,-0.1095342,-0.43496242,0.27773976,0.2510924,0.1050334,0.5406047,-0.07584443,0.21022084,-0.4514119,0.19859667,-0.13239111,-0.5632815,-0.9108358,-0.7207881,-0.055258863,0.07424146,0.5684228,-0.059642136,-0.10316375,-0.9375747,0.050362594,0.028751371,0.3208534,0.3208914,-0.34943995,-0.46803936,0.44981495,0.3244732,0.35548514,0.020370333,-0.3239913,-1.1386844,-0.09365983,0.24272232,-0.268751,-0.062369585,-0.040767934,0.023471205,-0.13111106,0.22065635,0.26121125,-0.29495224,-0.16481747,0.20949806,-0.27714524,0.2633091,-0.2498199,-0.13599488,-0.39892748,-0.042297646,0.4510489,0.104888655,-0.066587456,0.13511533,-0.0071694916,0.15292221,0.26545897,0.6767068,0.071233466,0.11404458,-0.16598861,-0.09005669,0.04844182,0.4362735,-0.18139274,-0.01329377,-0.10499617,-0.09109759,0.07339443,0.490957,0.19822009,-0.27186635,0.03867763,-0.056011975,0.15344097,-0.23673849,-0.23455536,0.0525627,-0.2553304,0.34405854,0.7454859,0.5083052,-0.488651,0.2590855,-0.36011276,0.015328102,0.49309862,-0.89001286,0.21371444,-0.9567009,-0.1403604,-0.20542735,1.0847023,0.007006879,-0.51151276,0.25085956,0.21581416,0.3616028,-0.16165225,0.16332097,-0.6521691,-0.44775036,0.157238,0.005217843,0.6156963,-0.22059572,-0.06025621,0.37446988,0.05280689,0.26004234,0.2159563,0.06474169,0.069882594,-0.1492887,-0.119868614,-0.01875855,0.21269622,0.0851187,-0.07849401,0.748253,-0.39913073,0.0073594046,0.28619155,-0.005021892,-0.4693762,0.03280466,-0.13877186,-0.03469701,-0.15088688,0.58778507,0.2744589,-1.6387612,0.5109544,-0.9318128,-0.15711409,1.3147049,0.6098365,0.48375168,0.43984902,0.81008977,0.16451384,0.25877342,-0.77716583,-0.0073601417,0.049344234,-0.24359314,0.24753943,0.33294114,0.50569975,0.7785471,-0.02616968,-0.70737714,0.21093822,0.11993022,0.29433742,-0.54691786,0.29647285,-0.25446764,-0.20192042,-0.008889542);\nconst float b2[] = float[](0.2077792,0.018558864,-0.23881403,-0.11491893,-0.3377246,0.19774397,-0.036659922,0.013487151,0.12652043,0.014126873,0.07976178,-0.07852453,-0.30470982,0.14702569,-0.08355587,-0.020687833);\nconst float w3[] = float[](0.2439648,-0.35538027,-0.40135592,-0.06450459,-0.4311919,0.20807199,0.085344754,0.3150481,0.3961802,-0.13298576,0.23197427,0.24084857,0.2986564,-0.33052957,-0.032233674,-0.1546163,0.19204105,0.13720025,0.02162837,0.021013781,-0.27995354,-0.044295877,0.020862248,0.21439612,0.08484779,0.12431251,0.21775575,0.23740163,0.44389987,-0.14720178,0.15844783,-0.19430251,0.36753744,-0.29437757,-0.4818791,-0.00069244,-0.029045409,0.40589738,0.42007217,0.14205043,0.2605343,0.122390404,-0.052070808,0.56964827,0.041997794,-0.19251986,-0.055729102,0.11424088,-0.6866359,-0.5286408,-0.084384024,0.24483441,-0.3583317,0.08817946,0.0807179,0.0038208838,0.16371801,0.32225,0.26514995,-0.039219934,0.75862926,-0.2752469,-1.2396576,-0.5874085,-0.7664037,-0.017284337,0.038447537,0.16762319,-0.07773626,-0.31778133,-0.37013593,0.21502046,0.16470438,-0.043109454,-0.09084405,-0.3608887,0.1169265,0.24888918,-0.12422336,-0.25206482,-0.26593652,0.0905968,0.15636271,0.07604236,0.13720514,0.005925419,-0.100150175,0.11422432,-0.123978496,0.22275639,0.14468051,-0.16192071,-0.26129153,0.20228247,-0.10179153,0.15563126,-0.29623112,0.44618285,0.37780333,-0.29559267,0.21681468,0.0788619,-0.095839016,-0.36079428,-0.31527454,0.049528245,0.033448067,-0.03481068,-0.029162144,0.32181767,-0.8719509,0.26810935,0.49820808,-0.43808413,-0.5637535,-0.07041767,-0.41742364,0.06293865,0.20163421,0.1449107,-0.12836717,-0.13274436,0.104674704,0.45213172,0.50749904,-0.027485829,-0.94312775,0.5213958,0.90821576,-0.2350162,-0.6791388,0.7513382,-0.3602746,0.5999396,0.23572989,0.6408304,0.63041306,-0.5302484,-0.16556975,0.36233246,0.7851352,-0.20022544,0.26434606,-0.47546932,0.41361448,0.089060746,-0.025605826,0.10558896,-0.22124572,0.3693443,0.008021303,0.27409634,0.28235713,0.20041002,0.08525984,0.08685869,0.38464433,-0.13118102,-0.101590306,0.06777086,0.46768826,-0.24175243,-0.028166931,-0.0262103,-0.35103068,0.35297295,0.25651312,0.21811965,0.117127575,0.07509064,-0.18296222,0.16362113,0.15926786,-0.074500576,0.013774886,-0.24977428,-0.14893469,0.15549612,0.2438301,0.07695875,0.35140768,0.055174783,-0.060314197,0.017713314,-0.18783897,0.15882598,-0.19412328,-0.13009258,-0.1642022,0.20685494,-0.15908733,0.113023736,-0.35693628,0.19645417,0.2019698,-0.043289054,0.47181544,-0.33116218,-0.2625578,0.0028074181,-0.20606664,0.36785662,-0.05721064,0.14829855,-0.35795662,0.086025186,0.09448972,0.30843437,0.41437045,-0.29147908,-0.03621816,-0.10346645,-0.38627028,0.0843076,0.05668948,-0.04275989,0.2822749,-0.027437659,-0.24684887,-0.03880864,0.04503164,0.007582778,-0.184439,-0.29898047,0.09002656,-0.21125728,0.0178652,0.12294032,-0.2530992,0.083257526,0.023440447,-0.1406417,0.3780965,-0.27336025,0.1856496,0.18010794,0.44743133,-0.2232995,0.06991886,-0.19381349,0.31145474,-0.4037729,-0.300162,-0.15152395,-0.44016078,0.085311055,0.24632792,-0.02573209,0.020085568,-0.17247996,0.1625709,0.3252887,0.18459728,-0.41626814,-0.054880045,-0.16500552);\nconst float b3[] = float[](-0.09461923,-0.07828981,0.06277077,-0.18405047,0.08781905,0.22793771,0.038028114,-0.16392146,0.07695356,-0.25541264,0.06887035,-0.1946763,-0.015402022,-0.12802847,0.1926151,-0.16815613);\nconst float w4[] = float[](0.6458174,0.2156124,0.3810932,0.49208006,-0.4027208,-0.19247417,-0.5221325,1.0195749,0.9267423,0.24055946,0.36286736,-0.18904883,-0.5190046,0.5106783,0.33563873,0.6127198);\nconst float b4[] = float[](-0.035319827);\n\nfloat neural_network_noise(vec2 uv) {\n    \n    float h1[16];\n    for (int i = 0; i < 16; i++) {\n        h1[i] = b1[i];\n        for (int j = 0; j < 2; j++) {\n            h1[i] += w1[i * 2 + j] * uv[j];\n        }\n        h1[i] = tanh(h1[i]);\n        //h1[i] = max(h1[i],0.0);\n    }\n    \n    float h2[16];\n    for (int i = 0; i < 16; i++) {\n        h2[i] = b2[i];\n        for (int j = 0; j < 16; j++) {\n            h2[i] += w2[i * 16 + j] * h1[j];\n        }\n        h2[i] = tanh(h2[i]);\n        //h2[i] = max(h2[i],0.0);\n    }\n    \n    float h3[16];\n    for (int i = 0; i < 16; i++) {\n        h3[i] = b3[i];\n        for (int j = 0; j < 16; j++) {\n            h3[i] += w3[i * 16 + j] * h2[j];\n        }\n        h3[i] = tanh(h3[i]);\n        //h3[i] = max(h3[i],0.0);\n    }\n    \n    float outp = b4[0];\n    for (int i = 0; i < 16; i++) {\n        outp += w4[i] * h3[i];\n    }\n    \n    return outp;\n}\n\nfloat neural_network_noise(vec2 uv, float time) {\n    uv += vec2(sin(time * 0.1), cos(time * 0.1));\n    return neural_network_noise(uv);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = -1.0 + 2.0*uv;\n    p.x *= iResolution.x/iResolution.y;\n    \n    float r = sqrt(dot(p,p));\n    float a = atan(p.y,p.x);\n    \n    float ss = 0.5 + 0.5*sin(iTime);\n    float anim = 1.0 + 0.2*ss;\n    \n    vec3 col = vec3(1.0);\n    \n    if (r < 0.8) {\n        //Add noise for background color blend (blue original and green noise)\n        float f = neural_network_noise(p);\n        col = vec3(0.0,0.3,0.4);\n        col = mix(col, vec3(0.2,0.9,0.4), f);\n        \n        //Add yellow center\n        f = 1.0 - smoothstep(0.2,0.5,r);\n        col = mix(col, vec3(0.7,0.6,0.2),f);\n        \n        //Animations\n        a += anim*neural_network_noise(0.2*p);\n   \n        //This line currently cases the discontinuties\n        f = smoothstep(0.1,1.0, neural_network_noise(vec2(4.0*r,0.12*a), iTime));\n        col = mix(col, vec3(1.0),f);\n        \n        f = smoothstep(0.0,0.8, neural_network_noise(vec2(6.0*r), iTime));\n        col *= 1.0 - 0.4*f;\n        \n        //Black inside edge\n        f = smoothstep(0.6,0.8,r);\n        col *= 1.0 - 0.5*f;\n        \n        //Center of eye\n        f = smoothstep(0.2,0.25,r);\n        col *= f;\n        \n        //Specular lens\n        f = 1.0 - smoothstep(0.0, 0.6, length(p -vec2(0.25,0.25)));\n        col += vec3(1.0,0.9,0.8)*f*0.9;\n        \n        //Specular edge\n        f = smoothstep(0.7,0.85,r);\n        col = mix(col, vec3(1.0), f);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}