{
    "Shader": {
        "info": {
            "date": "1514988443",
            "description": "Thanks to iq for the tip to use floatBitsToUint and uintBitsToFloat to store arbitrary binary data in texels. I'm now able to store 128 bits per texel in back buffers. UPDATE: others can't, see comments\n\nOriginal image copyright HAL Laboratory / Nintendo.",
            "flags": 32,
            "hasliked": 0,
            "id": "4lBfRm",
            "likes": 14,
            "name": "128 bits per texel storage",
            "published": 3,
            "tags": [
                "compression",
                "image",
                "encoding"
            ],
            "usePreview": 0,
            "username": "mattz",
            "viewed": 1590
        },
        "renderpass": [
            {
                "code": "int tile_fetch(int tile_idx, ivec2 tc) {\n    \n    ivec2 fc = ivec2(tile_idx & 0xf, tile_idx >> 4);\n    \n    int idx = tc.x + tc.y*8; \n        \n    vec4 v = texelFetch(iChannel0, fc, 0);\n\n\tfloat s = v[idx >> 4];\n    idx &= 0xf;\n    \n    uint x = floatBitsToUint(s);\n    uint b = (x >> (idx<<1)) & 0x3u;\n    \n    return int(b);\n       \n}\n\nint index_fetch(int tile_idx) {\n    \n    int texel_idx = tile_idx >> 4;\n    int idx = tile_idx & 0xf; \n    \n    ivec2 texel_pos = ivec2(texel_idx & 0xf, texel_idx >> 4);\n    \n    vec4 v = texelFetch(iChannel1, texel_pos, 0);\n    \n    float s = v[idx >> 2]; \n    idx &= 0x3; \n    \n    uint x = floatBitsToUint(s);\n    uint b = (x >> (idx<<3)) & 0xffu;\n    \n    return int(b);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord.y *= -1.0;\n    \n\tfloat zoom = max(floor(iResolution.y / 144.), 1.);\n    fragCoord /= zoom;\n    \n    ivec2 fc = ivec2(floor(fragCoord));\n    fc += ivec2(80, 72);\n    \n    ivec2 tc = fc & ivec2(7, 7);\n    fc = fc >> ivec2(3, 3); \n    \n    int brt;\n    \n    if (fc.x < 0 || fc.y < 0 || fc.x >= 20 || fc.y >= 18) {\n        \n        brt = 1;\n        \n    } else {\n        \n        int flat_idx = fc.x + fc.y * 20;\n        int tile_idx = index_fetch(flat_idx);\n        brt = tile_fetch(tile_idx, tc);\n        \n    }\n\n    ivec3 c = (brt == 0 ? ivec3(15,56,15) :\n               brt == 1 ? ivec3(48,98,48) : \n               brt == 2 ? ivec3(139,172,16) :\n               ivec3(165, 198,15));\n    \n    fragColor = vec4(vec3(c)/255., 1); \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const ivec2 dims = ivec2(16, 7);\nconst uvec2 magic = uvec2(0x7fc00000u, 0xff800000u);\nint cur, idx;\nvec4 data;\n\nvoid store(in uvec4 v) {\n    if (cur++ == idx) {\n         data = uintBitsToFloat(v);\n    }    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    ivec2 fc = ivec2(fragCoord);\n\n    vec4 rescheck = texelFetch(iChannel0, dims, 0);\n    uvec4 res = uvec4(floatBitsToUint(iResolution.xy), magic);\n        \n    if (floatBitsToUint(rescheck) == res) {\n        fragColor = texelFetch(iChannel0, fc, 0);\n        return;\n    }\n\n    if (fc == dims) {\n        fragColor = uintBitsToFloat(res);\n        return;\n    } else if (any(greaterThanEqual(fc, dims))) { \n        return; \n    }\n    \n    idx = fc.x + (fc.y << 4);\n    cur = 0;\n    data = vec4(0);\n\n    store(uvec4(0xffffffffu, 0xffffffffu, 0xffffffffu, 0xffffffffu));\n    store(uvec4(0xffffffffu, 0x5bffffffu, 0xea7fa5ffu, 0xff9ffe9fu));\n    store(uvec4(0xffffffffu, 0xe555ffffu, 0xabff5aaau, 0xffffbfffu));\n    store(uvec4(0xffffffffu, 0xffffffffu, 0xfffdffffu, 0xfff6fff6u));\n    store(uvec4(0x56ffffffu, 0xff9fa96fu, 0x96ffe96fu, 0xbfff6fffu));\n    store(uvec4(0xfff9fff6u, 0xfffffffeu, 0xffffffffu, 0xfff5fffeu));\n    store(uvec4(0x5bffbfffu, 0xbfffbfffu, 0xbfffffffu, 0xafffbfffu));\n    store(uvec4(0xfff9fffdu, 0xfff6fff5u, 0xfff6fff6u, 0xfff9fff6u));\n    store(uvec4(0x97ff6fffu, 0xfa7fa9ffu, 0xfe9ffe6fu, 0xff9fff9fu));\n    store(uvec4(0xfffafff5u, 0xffffffffu, 0xffffffffu, 0xffffffffu));\n    store(uvec4(0xd6aff95fu, 0x6fff6affu, 0xbfffbfffu, 0xbfffbfffu));\n    store(uvec4(0xffffffffu, 0xfffeffffu, 0xfffdfffdu, 0xfffdfffdu));\n    store(uvec4(0xaa6ffe9fu, 0x56ffa5bfu, 0xffff6fffu, 0xffffffffu));\n    store(uvec4(0xffaaffefu, 0xeaa5feaau, 0xa96faa55u, 0x5bff55bfu));\n    store(uvec4(0xffffffffu, 0xabffbfffu, 0x5aaaaaaau, 0xe5555555u));\n    store(uvec4(0x6aaaabfbu, 0xd56656aau, 0xfff9fe55u, 0xfffffffeu));\n    store(uvec4(0xfffdfffdu, 0xffffffffu, 0xffffffffu, 0xffffffffu));\n    store(uvec4(0xefbfaaffu, 0xffefffefu, 0xafdfbfefu, 0x55bf6a6fu));\n    store(uvec4(0xfbefaaaau, 0xffffffffu, 0xeafefbffu, 0x5555a6aau));\n    store(uvec4(0xfffeffffu, 0xfffbfffbu, 0xfff6fffbu, 0xfffefff9u));\n    store(uvec4(0xffffffffu, 0x83ff3fffu, 0xaa3fa8ffu, 596617279u));\n    store(uvec4(0xffffffffu, 0xf0aaff00u, 44747434u, 0xfe2fb8a0u));\n    store(uvec4(0x56ffffffu, 0xff9fa96fu, 0x96ffe96fu, 0xbffc6ffcu));\n    store(uvec4(0xef8f238fu, 0x8a3faa8fu, 0xa0ffaa3fu, 0x3fff03ffu));\n    store(uvec4(0xfcafff2fu, 0xccaaf0aau, 44708522u, 0x3e2ebc00u));\n    store(uvec4(0xfff3fff2u, 0xfff2fff3u, 0xfffcfffcu, 0xfffffffcu));\n    store(uvec4(0xffffc0c0u, 0xe555ffffu, 0xabff5aaau, 0xffffbfffu));\n    store(uvec4(0xe6ff6fffu, 0xbf7ffdbfu, 0x9bdf5fafu, 0xe6dfe7dfu));\n    store(uvec4(0x9bfff955u, 0xfe557fffu, 0xe7fff5aau, 0xdfffdbffu));\n    store(uvec4(0xffffffffu, 0xfffdfffeu, 0xfff6fffau, 0xfff6fff6u));\n    store(uvec4(0xafaffeffu, 0xdaea6b6bu, 0xe69ad99au, 0xa699b666u));\n    store(uvec4(0xbffffffeu, 0xdaffebffu, 0xa9b6a6bbu, 0xbe6955a9u));\n    store(uvec4(0xfffffffeu, 0xffffffffu, 0xfff6fffbu, 0xfff9fff9u));\n    store(uvec4(0xffffffffu, 0xabffbfffu, 0xf2aa0aaau, 0xfc55fc55u));\n    store(uvec4(0x6aaaabfbu, 797065258u, 0x3ff3fff8u, 0xfffffffbu));\n    store(uvec4(0xfffdfffdu, 0xfffcffffu, 0xffcffff2u, 0xff3cffccu));\n    store(uvec4(0xffffffffu, 0xffffffffu, 0xffffffffu, 0xf0fff0ffu));\n    store(uvec4(0xe6dfe6dfu, 0xe6dfe6dfu, 0xe6dfe6dfu, 0xe6dfe6dfu));\n    store(uvec4(0xdfffdfffu, 0xdfffdfffu, 0xdfffdfffu, 0xdfffdfffu));\n    store(uvec4(0xfff6fff6u, 0xfff6fff6u, 0xfff6fff6u, 0xfff6fff6u));\n    store(uvec4(0x55550000u, 0xffffaaaau, 0xeeeeffffu, 0xaaaaaaaau));\n    store(uvec4(0x55150070u, 0xfa4faa4au, 0xee4efb8fu, 0xaa4aaa4au));\n    store(uvec4(0x55550000u, 0xafffaaaau, 0xeeeeefffu, 0xaaaaaaaau));\n    store(uvec4(0xbff4fffdu, 0xdaf1ebf1u, 0xa9b1a6b2u, 0xbe6155a1u));\n    store(uvec4(0xfcfffcffu, 0xe3fff8ffu, 0xfcfffcffu, 0xfcfffcffu));\n    store(uvec4(0xffffffffu, 0xffff2fffu, 0xffffffffu, 0xffffffffu));\n    store(uvec4(0xff2fff3fu, 0xfff0ffcbu, 0xfff3fff3u, 0xfff3fff3u));\n    store(uvec4(0xffffffffu, 0x3fffffffu, 0x8fff8fffu, 0x8fff8fffu));\n    store(uvec4(0xaa0f00dfu, 715172515u, 0xca2aca8au, 0xcaaacaaau));\n    store(uvec4(0xdfc2dffcu, 0xdcffdf00u, 0xdccfdccfu, 0xd3ffd3cfu));\n    store(uvec4(0x9bf6f956u, 0xfe567ff6u, 0xe7f6f5a6u, 0xdff6dbf6u));\n    store(uvec4(0xeaaaaeaau, 0xaaaeaaeau, 0xbaaaabaau, 0xaaabaabau));\n    store(uvec4(0xea4aae4au, 0xaa4eaa4au, 0xba4aaa4au, 0xaa4baa4au));\n    store(uvec4(0xaaaaaeaau, 0xaaaeaaeau, 0xbaaaabaau, 0xaaabaabau));\n    store(uvec4(0x6f61a5d1u, 0xa5515bd1u, 0x6691a691u, 0xaaa169a1u));\n    store(uvec4(0x5b996555u, 0xbbf57e69u, 0x7e96dbe5u, 0xaaaa556au));\n    store(uvec4(0xbffafffeu, 0xdaf9ebfau, 0xa9b9a6b9u, 0xbe6a55aau));\n    store(uvec4(0xf3aff8ffu, 0x8aeae36bu, 0x869a099au, 0xa6993666u));\n    store(uvec4(0xffffffffu, 0xffffffffu, 196600u, 0x80002aaau));\n    store(uvec4(0xaf83fef3u, 0xda2f6b2cu, 0xe690d90bu, 0xa699b666u));\n    store(uvec4(0xbffffffeu, 0xdaffebffu, 0xa9b6a6bbu, 0xbc2955a9u));\n    store(uvec4(0x3fff3fffu, 0x3fff3fffu, 0xcfffcfffu, 0x3fffcfffu));\n    store(uvec4(715180714u, 0xaaa0aaaau, 0xaa3faa8bu, 0xe6d0000fu));\n    store(uvec4(0xd2ffd3ffu, 0xdc2adc00u, 0xd3f2d3cau, 0xdf03dcfcu));\n    store(uvec4(0xdff6dff6u, 0xdff6dff6u, 0xdff6dff6u, 0xdff6dff6u));\n    store(uvec4(0xbfffffffu, 0xdaffebffu, 0xa9bfa6bfu, 0xbe6f55afu));\n    store(uvec4(0x555a000au, 0xfffeaaaau, 0xeeeafffau, 0xaaabaaaau));\n    store(uvec4(0x57d4000du, 0xfff1abe1u, 0xeee1fff2u, 0xaaa1aaa1u));\n    store(uvec4(0x55550000u, 0xffffaaaau, 0xeeeeffffu, 0xaaa0aaaau));\n    store(uvec4(0x6aaaaeaau, 0xb6aedaeau, 0xadaaadaau, 0x6b6bab6au));\n    store(uvec4(0xeaa5aea5u, 0xa9a9aae5u, 0x59d9a969u, 0x69ad65b5u));\n    store(uvec4(0xeaaaaeaau, 0xaaaeaaeau, 0xbaa9abaau, 0xaaabaabau));\n    store(uvec4(0xeaa1aea1u, 0xaaa1aae1u, 0xbaa1aba1u, 0xaaa1aab1u));\n    store(uvec4(0xeaafaea0u, 0xaaaeaaefu, 0xbaaaabaau, 0xaaabaabau));\n    store(uvec4(0x6aaaaeaau, 0xb6aedaeau, 0xada9adaau, 0x6b6bab6au));\n    store(uvec4(0xea4aae4au, 0xaa4eaa4au, 0xba49aa4au, 0xaa4baa4au));\n    store(uvec4(0xbe6a55aau, 0xffdeff9au, 0xff99ffdau, 0x55abbe6au));\n    store(uvec4(0x5a6969aau, 0x6697a696u, 0x9a6665a7u, 0x6fead559u));\n    store(uvec4(0x6aa6aea9u, 0xb6aedaedu, 0xadabadafu, 0x6b66ab66u));\n    store(uvec4(0x6aa4aeadu, 0xb6a1dae1u, 0xada1ada2u, 0x6b61ab61u));\n    store(uvec4(0xbe6655a9u, 0xffdeff9du, 0xff9bffdfu, 0x55a6be66u));\n    store(uvec4(0xea46ae49u, 0xaa4eaa4du, 0xba4baa4fu, 0xaa46aa46u));\n    store(uvec4(0xbe6a55aau, 0xffdeff9au, 0xff9affdau, 0x55abbe6au));\n    store(uvec4(0xb5565ad9u, 0xb69eb69du, 0xadabadafu, 0xab66ab66u));\n    store(uvec4(0xfaf9bf56u, 0x7ff6dff9u, 0xbe767fd6u, 0xa96d556du));\n    store(uvec4(0xbe6955a9u, 0xffd6ff96u, 0xff95ffd6u, 0x55a9be69u));\n    store(uvec4(0xbe6155a1u, 0xffd1ff91u, 0xff91ffd1u, 0x55a1be61u));\n    store(uvec4(0xb5595ad9u, 0xb696b696u, 0xada5ada6u, 0xab69ab69u));\n    store(uvec4(0xff03ffffu, 0xcfc33cf0u, 0xcc3ccf0fu, 0xffff3f03u));\n    store(uvec4(0xffffffffu, 0xff30ffcu, 0xff3ffffu, 0xffff0ffcu));\n    store(uvec4(0xf0ffffffu, 0xf0fff03fu, 0xf0fff0ffu, 0xc03ff0ffu));\n    store(uvec4(0xc00fffffu, 0xfff0fc3u, 0xfc3fc0ffu, 261903u));\n    store(uvec4(0xc00fffffu, 0xfc30fc3u, 0xfc30fc3u, 0xc00f0fc3u));\n    store(uvec4(0xf0f0ffffu, 0xff003c30u, 0xfc30ff00u, 0xffff30f0u));\n    store(uvec4(0xffffffffu, 0xcf3cf030u, 0xf33cf03cu, 0xffffcf30u));\n    store(uvec4(0xffffffffu, 859583424u, 0xcf3ccfc0u, 0xffffcfc0u));\n    store(uvec4(0xf003ffffu, 0xcabccabcu, 0xcaa8caa8u, 0xfffff003u));\n    store(uvec4(0xcff3f00fu, 0x3ccc3ffcu, 0xcffc3cccu, 9202u));\n    store(uvec4(0xcff3ffffu, 0xfc3ff3cfu, 0xf3cffc3fu, 0xffffcff3u));\n    store(uvec4(0xc0ffffffu, 0xc30fc03fu, 246723u, 0xc3ffc3ffu));\n\n    fragColor = data;\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const ivec2 dims = ivec2(16, 2);\nconst uvec2 magic = uvec2(0x7fc00000u, 0xff800000u);\nint cur, idx;\nvec4 data;\n\nvoid store(in uvec4 v) {\n    if (cur++ == idx) {\n         data = uintBitsToFloat(v);\n    }    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    ivec2 fc = ivec2(fragCoord);\n\n    vec4 rescheck = texelFetch(iChannel0, dims, 0);\n    uvec4 res = uvec4(floatBitsToUint(iResolution.xy), magic);\n        \n    if (floatBitsToUint(rescheck) == res) {\n        fragColor = texelFetch(iChannel0, fc, 0);\n        return;\n    }\n\n    if (fc == dims) {\n        fragColor = uintBitsToFloat(res);\n        return;\n    } else if (any(greaterThanEqual(fc, dims))) { \n        return; \n    }\n    \n    idx = fc.x + (fc.y << 4);\n    cur = 0;\n    data = vec4(0);\n\n    store(uvec4(16777216u, 770u, 328704u, 460288u));\n    store(uvec4(50462976u, 0x9080000u, 723456u, 0xd0c0000u));\n    store(uvec4(1052430u, 0xa000908u, 328704u, 460288u));\n    store(uvec4(319951104u, 370480128u, 0x6000005u, 0xd0c0000u));\n    store(uvec4(1052430u, 0, 421009152u, 0xf0e0d0cu));\n    store(uvec4(50462976u, 319951104u, 0, 52035840u));\n    store(uvec4(0, 0xa000908u, 11u, 0));\n    store(uvec4(0xa000908u, 11u, 0x6000005u, 16777223u));\n    store(uvec4(67109634u, 0x6000005u, 7u, 0xf0e0d0cu));\n    store(uvec4(0x9080010u, 723456u, 0xf0e0d0cu, 16u));\n    store(uvec4(0, 328704u, 460288u, 452984832u));\n    store(uvec4(67116316u, 522067742u, 0xd0c201eu, 2302497u));\n    store(uvec4(620766208u, 10022u, 673720616u, 538848042u));\n    store(uvec4(3026220u, 808386560u, 1913393u, 858993715u));\n    store(uvec4(943142453u, 0x3c3b3a39u, 0x3e3d201eu, 0x4127403fu));\n    store(uvec4(858993715u, 673727027u, 0x432a2828u, 673727528u));\n    store(uvec4(673720360u, 858993715u, 0x47464533u, 0x48353333u));\n    store(uvec4(0x45334933u, 0x4a464a46u, 0x45334b46u, 0x4e4d4c46u));\n    store(uvec4(0x42334746u, 0x4c464f2au, 0x504d504du, 0x5233514du));\n    store(uvec4(0x5554534du, 0x47464e4du, 0x534d5635u, 0x57545754u));\n    store(uvec4(0x58000000u, 89u, 0x5c5c5b5au, 0));\n    store(uvec4(0, 0x5e5d0000u, 0x6060005fu, 0x60606060u));\n    store(uvec4(0x62610000u, 25436u, 0, 0));\n\n    fragColor = data;\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}