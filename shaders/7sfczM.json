{
    "Shader": {
        "info": {
            "date": "1641856230",
            "description": "<3",
            "flags": 32,
            "hasliked": 0,
            "id": "7sfczM",
            "likes": 42,
            "name": "Goodnight Moon",
            "published": 3,
            "tags": [
                "painting"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 672
        },
        "renderpass": [
            {
                "code": "Main\n    Q = B(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nMain \n    if (iFrame>1) discard;\n    U = 2.*(U-.5*R)/R.y;\n    { // sunset\n        Q = .5+.4*sin(4.4-.8*U.y+vec4(1,2,3,4));\n    }\n    Q += .2*fbm(2.*U).x;\n    { // Moon\n        vec2 r = U-vec2(-.8,.5);\n        float l = length(r);\n        float L = .15;\n        vec3 n = fbm(8.*U);\n        Q += vec4(.2+n.x)*exp(-200.*max(l-L,0.));\n    }\n    { // stars\n        for (float i = 10.; i >= 1.; i--)\n        for (int k = 0; k < 9; k++)\n        {\n            vec2 V = 10.*U*i;\n            vec2 u = round(V)+vec2(k%3,k/3)-1.;\n            \n                vec3 h = hash(u+1e3*i)*2.-1.;\n                vec3 n = fbm(V+u)*2.-1.;\n                vec2 r = u-V+.5*h.xy;\n                r.y *= 1.5;\n                float l = length(r);\n                float s = .1;\n                float z = 10.*sqrt(s*s-l*l);\n                vec2 dz = -40.*r*inversesqrt(s*s-l*l);\n                Q += exp(-1e2*l);\n            \n        }\n        \n    }\n    {// Evergreen Tress\n        for (float i = 0.; i < 4.; i++)\n        for (float k = -2.; k <= 2.; k++)\n        {\n            {\n                    vec2 V = 3.*U+hash(vec2(k,i)).xy*2.-1.;\n                    float x = round(V.x);\n                    V.x = V.x-x;\n                    V.y += abs(V.x);\n                    V.x += .4*(V.x)*(noise(40.*V.yy).x*2.-1.);\n                    vec3 n = noise(140.*V+x)+noise(10.*V+x)*2.-1.;\n                    vec3 h = hash(vec2(x));\n                    V.y += .2*h.z+.1*n.z;\n                    V += .1*h.xy;\n                    V += .1*((n.xy*2.-1.));\n                    V.x *= .8+.5*V.y;\n                    V.y *= .3;\n                    Q -= .1*exp(-10.*abs(2.*length(V)-.5));\n                    if (2.*length(V)<.5)\n                        Q = vec4(.8,.6,.3,1)*\n                        (.5+.5*sin(4.-.5*h.x+.9*n.z+vec4(1,2,3,4)));\n\n                    }\n             }\n    }\n    Q *= 1.-.7*fbm(3.*U).x;\n    { // Pebbles\n        U += .5;\n        for (float i = 10.; i >= 1.; i--)\n        for (int k = 0; k < 9; k++)\n        {\n            vec2 V = 5.*U*i;\n            vec2 u = round(V)+vec2(k%3,k/3)-1.;\n            if (u.y+3.<6.*fbm(.2*u.xx/i).x*i) {\n                vec3 h = hash(u+1e3*i)*2.-1.;\n                vec3 n = fbm(V+u)*2.-1.;\n                vec2 r = u-V+.5*h.xy+n.xy*.6;\n                float l = length(r);\n                float s = .3;\n                float z = 10.*sqrt(s*s-l*l);\n                vec2 dz = -40.*r*inversesqrt(s*s-l*l);\n                Q -= 2.*exp(-20.*abs(l-s));\n                if (l < s) Q = .8*(.5-.2*r.x-r.y)*\n                    (.5+.5*sin(-.5*hash(U*100.).x+1.+1.5*h.x+n.y+vec4(1,2,3,4)));\n            }\n        }\n        U += .3;\n        Q *= 1.-fbm(10.*U).x*Q;\n        for (float i = 10.; i >= 1.; i--)\n        for (int k = 0; k < 9; k++)\n        {\n            vec2 V = 1.*U*i;\n            vec2 u = round(V)+vec2(k%3,k/3)-1.;\n            if (u.y+1.<3.*fbm(.1*u.xx/i).x*i) {\n                vec3 h = hash(u+1e3*i)*2.-1.;\n                vec3 n = fbm(V+u)*2.-1.;\n                vec2 r = u-V+.5*h.xy+n.xy*vec2(1,1.);\n                r.y *= 1.5;\n                float l = length(r);\n                float s = .4;\n                float z = 10.*sqrt(s*s-l*l);\n                vec2 dz = -40.*r*inversesqrt(s*s-l*l);\n                Q -= .5*exp(-20.*abs(l-s));\n                if (l < s) Q = (.5+.5*sin(hash(U*100.).x+h.x+vec4(1,2,3,4)))*(.3-.2*r.x-r.y);\n            }\n        }\n    }\n    Q += .1*fbm(60.*U).x*Q;\n\n    Q = clamp(Q,0.,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 R; float T; int I;\n#define ei(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define Main void mainImage(out vec4 Q, in vec2 U) { Q = vec4(0); R = iResolution.xy; T = iTime; I = iFrame;\n#define A(U) texture(iChannel0,(U)/R)\n#define B(U) texture(iChannel1,(U)/R)\n\nvec3 hash (vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\nvec3 noise(vec2 p)\n{\n    vec4 w = vec4(\n        floor(p),\n        ceil (p)  );\n    vec3 \n        _00 = hash(w.xy),\n        _01 = hash(w.xw),\n        _10 = hash(w.zy),\n        _11 = hash(w.zw),\n    _0 = mix(_00,_01,fract(p.y)),\n    _1 = mix(_10,_11,fract(p.y));\n    return mix(_0,_1,fract(p.x));\n}\nvec3 fbm (vec2 p)\n{\n    vec3 w = vec3(0);\n    float N = 5.;\n    for (float i = 1.; i < N; i++)\n    {\n        p *= 1.7*ei(.5);\n        w += noise(p)/N/i;\n    }\n    return w;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main \n    Q = B(U);\n    vec4 dQ = vec4(0);\n    for (float x = -1.; x <= 1.; x++)\n    for (float y = -1.; y <= 2.; y++)\n    {\n        vec2 V = U+vec2(x,y);\n        vec4 b = B(V);\n        float p = .1*length(b-Q)+10.*abs(fbm(.05*V).x-fbm(.05*U).x);\n        dQ += (b-Q)*exp(-2e3*p*p);\n    }\n    Q += .1*dQ;\n    if (I<2) Q = A(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}