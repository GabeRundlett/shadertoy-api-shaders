{
    "Shader": {
        "info": {
            "date": "1683994269",
            "description": "A very cool project\nVery Gorgeous",
            "flags": 0,
            "hasliked": 0,
            "id": "mty3WD",
            "likes": 0,
            "name": "Raymarched golden temple - fancy",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "ativata",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n#define sSAUCE -3.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat sdSphere(vec3 p, vec4 s) {\n\treturn length(p-s.xyz)-s.w;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat GetDist(vec3 p) {\n    \n    float d2 = sdBox(p,vec3(.55,2,.098));\n    float d8 = sdRoundBox(p-vec3(0,2.8,0), vec3(.1,.5,.1),0.1);\n    float d14 = sdBox(p-vec3(0,2.2,0), vec3(1,.2,.2));\n    \n    float d10 = sdSphere(p-vec3(0,-0.6,0), vec4(0,0,0,1.67));\n    \n    float d11 = sdSphere(p-vec3(-1.5,-1.,0), vec4(0,0,0,1));\n    float d16 = sdSphere(p-vec3(1.5,-1.,0), vec4(0,0,0,1));\n    \n    float d18 = sdSphere(p-vec3(-.5,-1.2,-1.3), vec4(0,0,0,.8));\n    float d19 = sdSphere(p-vec3(1.5,-1.,1), vec4(0,0,0,1));\n    \n    float d12 = sdSphere(p-vec3(-1,-0.7,1), vec4(0,0,0,1.4));\n    float d17 = sdSphere(p-vec3(1,-0.7,-1), vec4(0,0,0,1.4));\n    \n    float d15 = unionSDF(unionSDF(d10,unionSDF(unionSDF(d11,unionSDF(d18,d19)),unionSDF(d11,d17))),unionSDF(d12,d16));\n    \n    float d6 = unionSDF(d15,unionSDF(d2,unionSDF(d8,d14)));\n    float d7 = sdBoxFrame(p,vec3(4.3,2.3,4.3),.2);\n    float d13 = unionSDF(unionSDF(unionSDF(\n    sdRoundBox(p -vec3(0,-2.1,0),vec3(4.4,.21,4.4),0.1)\n    ,sdRoundBox(p -vec3(0,-2.6,0),vec3(4.5,.21,4.5),0.1))\n    ,sdRoundBox(p -vec3(0,-3.1,0),vec3(4.6,.21,4.6),0.1))\n    ,sdRoundBox(p -vec3(0,-3.6,0),vec3(4.7,.21,4.7),0.1));\n    \n    \n    float torus1 = sdTorus(p-vec3(0,4,0),vec2(3.3,.2));\n    float torus2 = sdTorus(p-vec3(0,5,0),vec2(3,.2));\n    float torus3 = sdTorus(p-vec3(0,6,0),vec2(2.6,.2));\n    float torus4 = sdTorus(p-vec3(0,7,0),vec2(2,.2));\n    \n    \n    return unionSDF(unionSDF(unionSDF(d6, d7),d13),unionSDF(unionSDF(torus1,torus4),unionSDF(torus2,torus3)));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i+=7) {\n        //maybe this helps cuz I heard that GPUs are shit at branching\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        \n        p = ro + rd*dO;\n        dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        \n        p = ro + rd*dO;\n        dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        \n        p = ro + rd*dO;\n        dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        \n                p = ro + rd*dO;\n        dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        \n        p = ro + rd*dO;\n        dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        \n        p = ro + rd*dO;\n        dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.0001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nfloat luminance(vec3 v)\n{\n    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));\n}\n\nvec3 change_luminance(vec3 c_in, float l_out)\n{\n    float l_in = luminance(c_in);\n    return c_in * (l_out / l_in);\n}\n\nvec3 reinhard_extended(vec3 v, float max_white_l)\n{\n    float l_old = luminance(v);\n    float numerator = l_old * (1.0f + (l_old / (max_white_l * max_white_l)));\n    float l_new = numerator / (1.0f + l_old);\n    return change_luminance(v, l_new);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 10, -10);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,1.,0), 1.);\n    vec3 col = texture(iChannel0,rd).rgb*vec3(1.,.8,.7);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float dif = dot(n, vec3(1.5,1.7,.3)) + 1.5;\n        col = vec3(dif) * texture(iChannel0,r).rgb*vec3(1.40,.7,0.06);\n    }\n    \n    col = pow(reinhard_extended(col,.81), vec3(.7));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}