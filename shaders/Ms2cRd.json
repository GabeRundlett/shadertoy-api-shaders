{
    "Shader": {
        "info": {
            "date": "1493543137",
            "description": "A colorful visual effect I made while playing around with sine waves. I've extracted many of the parameters of the waves into their own variables so anyone can mess with them easily. You can make some pretty crazy effects with those parameters.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms2cRd",
            "likes": 7,
            "name": "70s Flashback",
            "published": 3,
            "tags": [
                "waves",
                "retro",
                "psychedelic",
                "animation",
                "sine",
                "trippy",
                "layers"
            ],
            "usePreview": 0,
            "username": "fermion",
            "viewed": 844
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//coordinate system\n    vec2 pixel = fragCoord.xy / iResolution.y;\n    \n    //wave parameters\n    vec2 dotFrequency = vec2(6, 4) * PI;\n    \n    vec2 offsetAmplitude = vec2(1.5 + 0.5 * sin(iTime * 0.075 + PI/2.0), 0.5 * sin(iTime * 0.075));\n    vec2 offsetFrequency= vec2(4.0, 7.0) * PI;\n    vec2 offsetVelocity= vec2(0.75, 0.15 + 0.15 * sin(iTime * 0.05));\n    \n    //offset equation\n    vec2 offset= offsetAmplitude * sin( offsetFrequency * pixel + (offsetVelocity * iTime));\n    \n    \n    //y-component of visual\n    float value= sin( pixel.y * dotFrequency.y + offset.x) / 2.0;\n    \n    //x-component of visual\n    value+= sin( pixel.x * dotFrequency.x + offset.y) / 2.0;\n    \n    //boundary parameters\n    float epsilon= 0.03;\n    float thresholdVelocity = 0.5;\n    float threshold= 1.0 * sin(thresholdVelocity * iTime + pixel.x);\n    \n    // color parameters\n    vec3 color;\n    float colorVelocity =  0.02 + 0.02 * sin(iTime * 0.1);\n    \n    if (value > threshold + epsilon) {\n        //boundary color\n        color= vec3( 0.75 , 0.5 + sin(iTime * colorVelocity) / 2.0, 0.0);\n    }\n    else if (value < threshold - epsilon) {\n        //under threshold color\n        color= vec3(0.0, 1.0 , 0.25 + sin(iTime * colorVelocity) / 2.0);\n    }\n    else {\n        //over threshold color\n        color= vec3(0.25 + sin(iTime * colorVelocity * 0.5) / -2.0, 0.0 , 0.75);\n    }\n    \n\tfragColor = vec4( color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}