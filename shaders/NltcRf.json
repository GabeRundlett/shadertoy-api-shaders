{
    "Shader": {
        "info": {
            "date": "1660245401",
            "description": "Just something soothing.\nThe mehs are because I made this in my own live coding utility and then copy pasted. Just a quick and dirty fix.",
            "flags": 0,
            "hasliked": 0,
            "id": "NltcRf",
            "likes": 7,
            "name": "Night valley",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "night",
                "mountains",
                "valley"
            ],
            "usePreview": 0,
            "username": "pohy",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(float x) {\n    return fract(sin(x) * 43758.5453123); \n}\nfloat noise(float p){\n\tfloat fl = floor(p);\n    float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat posSin(float x) {\n    return sin(x) * -1.0 + 1.0;\n}\n\nfloat sdfCircle(vec2 uv, float radius, float softness) {\n    float circleDistance = length(uv);\n    return smoothstep(radius + softness, radius - softness, circleDistance);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    // Seems that my live coding tool has the y coordinate inerted :)\n    uv.y *= -1.0;\n    float time = iTime;\n    // time = 0;\n    \n    // Sky gradient\n    vec3 skyColor = vec3(0.2, 0.2, 0.4);\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    col = mix(col, skyColor, exp(0.8 + uv.y * 2.5));\n\n    // Stars\n    float steps = 200.0;\n    // For loop is not the best [performant] solution :/\n    for (float i = 0.0; i < steps; i++) {\n        float iNormalized = i / steps;\n        vec2 offset = vec2(-0.5 + noise(i) * 2.0 - sin(time * 0.001), 0.1 + noise(uv.x + i) * 0.5);\n        float circle = sdfCircle(uv.xy + offset, 0.0008, 0.0003);\n        // float circle = sdfCircle(uv.xy + offset, 0.05, 0.001);\n        float intensity = noise(i + uv.y) * 0.8 * (posSin(time * 0.5 + i));\n        circle *= intensity;\n        col = mix(col, vec3(1), circle);\n    }\n\n    // Mountain pass masks\n    float firstPass = step(noise(uv.x * 60.0 + time) * 0.02, uv.y + 0.26);\n    float secondPass = step(noise((uv.x + 0.0) * 45.0 + time) * 0.08, uv.y + 0.27);\n    float thirdPass = step(noise((uv.x + 0.2) * 20.0 + time) * 0.15, uv.y + 0.28);\n    float fourthPass = step(noise((uv.x + 2.0) * 10.0 + time) * 0.22, uv.y + 0.29);\n\n    float tintFactor = 0.12;\n    vec3 tint = mix(skyColor * tintFactor, vec3(0), uv.y + 0.5);\n    tint = mix(vec3(0), skyColor, uv.y * 0.2 + tintFactor);\n    //tint *= posSin(time * 0.1) * 0.5;\n    //tint *= 0.0;\n    col = mix(col, vec3(0.12) + tint, firstPass);\n    col = mix(col, vec3(0.08) + tint, secondPass);\n    col = mix(col, vec3(0.04) + tint, thirdPass);\n    col = mix(col, vec3(0.0) + tint, fourthPass);\n\n    // Debugging\n    // float pass = step(uv.y - 0.1, noise(uv.x * -2 - 10) * -0.2 + noise(uv.x * 10 + time) * 0.2);\n    // col = vec3(pass);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}