{
    "Shader": {
        "info": {
            "date": "1586722044",
            "description": "Use leapmotion on shadertoy through a chrome extension !\nFor the moment it's stable enough to load it as a developer so go check the github page ;).\nhttps://github.com/seb776/ShadertoyLeapmotion\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wsSyWW",
            "likes": 3,
            "name": "Leapmotion on shadertoy",
            "published": 3,
            "tags": [
                "shadertoy",
                "leapmotion"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// The extension code can be found here along with a minituto https://github.com/seb776/ShadertoyLeapmotion\n// Chrome extension https://chrome.google.com/webstore/detail/gadhelfebmbbjkjmnkgpajjaachobjbf/\n// Video demo https://www.youtube.com/watch?v=9G-Jb9_HNrU\n\n// ##### Start of code copied from the chrome extension (button \"Copy GLSL code to clipboard\")\nuniform vec3 LeftHand[28]; uniform vec3 RightHand[28];uniform float LeftConfidence;uniform float RightConfidence;uniform float LeftAvailable; uniform float RightAvailable;\nconst int ELBOW = 0, WRIST = 1, PALM = 2;\nconst int FINGER_THUMB = 3, FINGER_INDEX = 8, FINGER_MIDDLE = 13, FINGER_RING = 18, FINGER_PINKY = 23;\nconst int CARP_POS = 0, MCP_POS = 1, PIP_POS = 2, DIP_POS = 3, TIP_POS = 4;\n// ##### End of code copied from the chrome extension\n\n// ----- LeftHand[N] or RightHand[N]\n// you can use LeftHand[N] or RightHand[N] where N can be ELBOW,WRIST,PALM or\n// FINGER_XXX + YYY_POS to retrieve joints positions.\n// eg :\n// LeftHand[FINGER_MIDDLE + TIP_POS]\n// RightHand[ELBOW]\n//\n// ----- LeftAvailable or RightAvailable\n// 0.0 if not currently tracking 1.0 if it is.\n//\n// ----- LeftConfidence or RightConfidence\n// The confidence parameter (from 0.0 to 1.0) given by the leapmotion SDK.\n// It tells the confidence of the current tracking.\n\n// ##### Any code under this is not specific to the extension\n\n// Function to translate coordinates to our current coordinates\nvec3 coordMix(vec3 p) \n{\n    return p.xzy;\n}\n\n// RAYMARCHING FUNCTIONS\nfloat _add(float a, float b)\n{\n    return min(a, b);\n}\nfloat sph(vec3 p)\n{\n    return length(p)-.1;\n}\n\nvec3 lookat(vec2 uv, vec3 dir)\n{\n  float fov = 1.;\n  uv *= fov;\n  dir = normalize(dir);\n  vec3 right = normalize(cross(dir, vec3(0.,1.,0.)));\n  vec3 up = normalize(cross(dir, right));\n\n  return dir + uv.x * right + uv.y*up;\n}\n\n\n// Raymarching SDF composition\nfloat map(vec3 p)\n{\n    vec3 off = vec3(0.,-2.,0.);\n\tfloat szf = -0.02;\n    vec3 sz = vec3(1.,1.,1.)*szf;\n    float acc = 10.0;\n    if (LeftAvailable > .5)\n    \tacc = min(acc, sph(off+szf*coordMix(LeftHand[0])+p));\n    if (RightAvailable > .5)\n    \tacc = min(acc, sph(off+szf*coordMix(RightHand[0])+p));\n    for (int i = 1; i < 27; ++i)\n    {\n        if (LeftAvailable > .5)\n        \tacc = min(acc, sph(off+szf*coordMix(LeftHand[i])+p));\n        if (RightAvailable > .5)\n        \tacc = min(acc, sph(off+szf*coordMix(RightHand[i])+p));\n    }\n   return acc;\n}\n\nvec3 normal(vec3 p, float d)\n{\n  float xPos = map(p+EPS.xyy);\n  float yPos = map(p+EPS.yxy);\n  float zPos = map(p+EPS.yyx);\n  return (vec3(xPos, yPos,zPos)-d)/EPS.x;\n  return vec3(map(p+EPS.xyy)-map(p-EPS.xyy),\n    map(p+EPS.yxy)-map(p-EPS.yxy),\n    map(p+EPS.yyx)-map(p-EPS.yyx));\n}\n\nvec4 rdr3D(vec2 uv)\n{\n  vec3 orig = vec3(0.,0.,-10.);\n  vec3 lookatpos = vec3(0.);\n  vec3 dir = normalize(lookat(uv, lookatpos-orig));\n  vec3 p = orig + dir;\n\n  for (int i = 0; i <64;++i)\n  {\n    float d = map(p);\n\n    if (d < 0.01)\n    {\n      vec3 norm = normal(p,d);\n      return vec4(norm*.5+.5,1.);\n      vec3 lPos = 3.*vec3(sin(iTime),cos(iTime),0.);\n       return vec4(dot(norm,normalize(lPos-p))*vec3(1.),1.);\n    }\n    p+= dir*d;\n  }\n  return vec4(0.);\n}\n\nvec3 rdrScn(vec2 uv)\n{\n  vec3 land;\n  vec3 light = vec3(100.,200.,197.)/255.;\n  land = mix(vec3(.1,.1,.2),light,sat(1.-length(uv)));\n  vec4 col = rdr3D(uv);\n  land = mix(land, col.xyz, col.w);\n  return land;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n    \n  uv -= vec2(.5)*iResolution.xy/iResolution.xx;\n  uv*= 1.2;\n    \n  vec3 col = rdrScn(uv);\n\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 EPS = vec3(0.01,0.,0.);\n\n\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}