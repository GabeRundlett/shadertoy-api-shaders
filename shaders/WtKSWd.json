{
    "Shader": {
        "info": {
            "date": "1583877197",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "WtKSWd",
            "likes": 13,
            "name": "Day 82",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 473
        },
        "renderpass": [
            {
                "code": "// some XOR extrusion of a plane with balkhan glow\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 30.;\n    float scale = 0.00 + pow(dot(uvn,uvn),1.)*0.5;\n    float chromAb = dot(uvn,uvn)*9.;\n    vec2 offs = vec2(0) + texture(iChannel1, uv + iTime*4.).xz*0.;\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.98;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.x += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.y += texture(iChannel0, target).y;\n    \tradial.z += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    \n    \n    \n    radial /= steps;\n    \n    float ss = smoothstep(0.,1.,dot(uvn,uvn)*3.);\n    \n    fragColor = texture(iChannel0, uv)*1.*(1. - ss) + radial*1.*ss; \n    \n    //fragColor *= 1.;\n    //fragColor = pow(fragColor, vec4(0.45));\n\t\n    float duvuv = dot(uvn,uvn);\n    \n    //fragColor = pow(fragColor, vec4(0.49 - clamp(duvuv*0.4, 0., 0.50)));\n    \n    fragColor = smoothstep(0.,1.,fragColor);\n    fragColor = pow(fragColor, vec4(0.5,0.65,0.52,1.));\n    \n    fragColor *= 1. - duvuv*1.;\n    \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 1.);\n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    //fragColor *= 1. - dot(uvn,uvn)*2.;\n    \n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nfloat xor(float x, float y) {return float(int(x) | int(y));}\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define R iResolution.xy\n#define T(e) texture(iChannel0, (e)/R).x\n#define pmod(p,x) mod(p,x) - 0.5*x\n#define H (0.1 + sin(iTime*0.2)*0.02)\n\nfloat tot;\nfloat get(vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5*iResolution.xy);\n    /*\n    for(int i = 0; i < 5 ; i++){\n    \tuv *= rot(0.6);\n        uv = abs(uv);\n    }*/\n    float col = 0.;\n\n    uv *= 19. ;\n    \n\n    uv = pmod(uv, 10000./2.);\n    vec2 iuv = vec2(uv);\n    \n    iuv = abs(iuv);\n    \n    \n    float rep = 50.;\n    iuv = floor(iuv/rep)*rep;\n    \n    \n    \n    float r = xor(iuv.x, iuv.y);\n    \n    \n    float cumm = 0.;\n    \n    r = xor(iuv.x, iuv.y);\n    \n    \n    r = floor(r*0.097 + abs(sin(iTime*2.))*0.5);\n    for(int i = 0; i < 8; i++){\n        if(floor(mod(r, 10.)) < 2.){\n        \t//cumm += r * r*4.4 + r + r;\n            cumm += r;\n            \n            //cumm += r*1.;\n        } else {\n        \t//break;\n        }\n        cumm = fract(cumm)*100.;\n        r += 1.1;\n        //r += 1.2;\n        \n    }\n    \n    \n    float fr = float(r);\n    \n    \n    col += clamp(cumm, 0., 1.);\n    \n    //l -= step(1.-cumm*0.00000001,0.)*1.;\n    //col -= 0.3;\n    \n    col = clamp(col, 0.,1.);\n    if (col == 0.) \n        col -= col + 1.;\n    return col;\n}\n\n\nvec3 getPatt(vec2 U )\n{\n    \n\tvec3 col = vec3(0);\n    float st = 0.2 + sin(iTime)*0.1;    \n    \n    // antialiasing\n    \n    float t = get(U);\n    float n = get(U + vec2(0.,st));\n    float w = get(U + vec2(0.,-st));\n    float e = get(U + vec2(st,0.));\n    float s = get(U + vec2(-st,0.));\n    \n    float ne = get(U + vec2(st,st));\n    float ns = get(U + vec2(-st,st));\n    float sw = get(U + vec2(st,-st));\n    float se = get(U + vec2(-st,-st));\n    \n    \n    float cumm = t + n + w + e + s + ne + ns + sw + se;\n    \n    \n    col += cumm/9.;\n    //col += (ne + sw + sw + se)/4.;\n    \n    \n    float att = pow(smoothstep(0.,1., abs(col.x)/1.), 2.);\n\n    col -= col;\n\t\n    col += 1. - att; \n    //col += fract(U.xyy)*0.6;\n    //col += 1. - t;\n    \n    return col;\n}\n\n\n\n\n#define dmin(a,b) a.x < b.x ? a : b\n\nvec3 glow = vec3(0);\n\nfloat patt;\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\n    //p.y += sin(p.xz*20.).x*0.0 + sin(p.xz*20.).y*0.02;\n    p.xy *= rot(p.z*0.);\n    \n    d = dmin(d,vec2(p.y + H, 0.));\n    d = dmin(d,vec2(-p.y + H, 0.));\n    \n    \n    patt = getPatt(1.*p.xz*400.).x*1.;\n    \n    patt = 1. - patt;\n    \n    d.x -= patt*0.0014;\n    \n    //glow += exp(-d.x*100.);\n    //glow += exp(-max(patt, 0.)*20.);\n    //glow += max(0.8/(0.8 + patt*patt*10.), 0.)*vec3(0.2,0.9,1.)*2.;\n    //glow -= max(0.6/(0.9 + patt*patt*100.), 0.)*vec3(0.2,0.,1.)*2.;\n    glow += max(0.4/(0.7 + patt*patt*10.), 0.)*vec3(0.2,0.9,0.5)*2.;\n    //d.x -= ;\n    \n    return d;\n}\n\nfloat n;\nvec2 march (vec3 ro, vec3 rd, inout vec3 p , inout float t, inout bool hit){\n\thit = false; p = ro; t = 0.;\n    \n    float dith = mix(0.63, 1., n);\n    vec2 d;\n    for(int i = 0; i < 220 ; i++){\n    \td = map(p);\n        d.x *= 0.3*dith;\n        if (d.x < 0.0004){\n        \thit = true;\n            break;\n        }\n        tot = t += d.x;\n        p = ro + rd*t;\n    }\n\treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\tfloat duv = dot(uv,uv);\n    uv *= 1. + duv*1.4;\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    ro.z += iTime*0.2;\n    vec3 rd = normalize(vec3(uv, 1));\n    \n    rd.yz *= rot(0.2);\n    \n    rd.xy *= rot(0.4 + iTime*0.15);\n    n = texture(iChannel0, 10.*uv*256. + iTime*2.4).x;\n    //ro -= 0.2*rd*n;\n    float dith = mix(0.4,1., n);\n    vec3 p; float t; bool hit;\n    vec2 d = march(ro, rd, p, t, hit);\n    \n    if (hit ){\n    \t//col += 0.6;\t\n    \tcol += (1. - patt)*vec3(0.7,0.9,0.6)*1.;\n    }\n    col += glow*0.02;\n    col = max(col, 0.);\n    float ss = pow(smoothstep(0.,1.,t*0.5), 0.8);\n    \n    col.r *= 1. + ss*1.4;\n    col.gb *= 1. - duv;\n    \n    //col = mix(col, vec3(0.1, 0.8,1.)*0.7,ss);\n    //col = mix(col, vec3(0.6, 0.95,0.556)*0.1,pow(smoothstep(0.,1.,t*0.2), 0.8));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}