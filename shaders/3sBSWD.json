{
    "Shader": {
        "info": {
            "date": "1553728476",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/402155037[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "3sBSWD",
            "likes": 11,
            "name": "[twitch] Rainbow Field",
            "published": 3,
            "tags": [
                "sdf",
                "raymarcher",
                "rainbow",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 677
        },
        "renderpass": [
            {
                "code": "/*\nThis shader was created live on stream!\nYou can watch the VOD here: https://www.twitch.tv/videos/402155037\n\nI use the Bonzomatic tool by Gargaj/Conspiracy:\nhttps://github.com/Gargaj/Bonzomatic\n\nWednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\nCome and watch a show!\n\n~yx\n*/\n\nfloat tick(float t)\n{\n\tfloat a=floor(t);\n\tt=fract(t);\n\tt=smoothstep(0.,1.,t);\n\tt=smoothstep(0.,1.,t);\n\tt=smoothstep(0.,1.,t);\n\tt=smoothstep(0.,1.,t);\n\tt=smoothstep(0.,1.,t);\n\treturn a+t;\n}\n\nvec2 rotate(vec2 a, float b)\n{\n\tfloat c=cos(b);\n\tfloat s=sin(b);\n\treturn vec2(\n\t\ta.x*c-a.y*s,\n\t\ta.x*s+a.y*c\n\t);\n}\n\nfloat sdBall(vec3 p, float b)\n{\n\treturn length(p)-b;\n}\n\nfloat shape(vec3 p)\n{\t\n\tfloat planet = abs(length(p)-2.5)-.5;\n\tplanet = max(planet, 2.7-length(p-vec3(0,1,-2)));\n\t\n\treturn planet;\n}\n\nfloat ripple(vec3 p)\n{\n\tfloat d = length(p)-1.5;\n\t\n\tfloat r = sin(p.y*.5+iTime*.5+sin(p.x*4.)*.1+sin(p.z*4.)*.1)*.2+.15;\n\tp.xz = rotate(p.xz, sin(iTime*.5));\n\tp.zy = rotate(p.zy, cos(iTime));\n\tp.xz = rotate(p.xz, p.y*sin(iTime)*.5);\n\td = max(d, sdBall(mod(p,.6)-.3,r*2.));\n\t\n\treturn d;\n}\n\nfloat mat=0.;\n\nfloat scene(vec3 p)\n{\n\tp.x += tick(iTime*.2)*8.;\n\t\n\tvec2 cellsize = vec2(8,16);\n\t\n\tvec2 cell = floor(p.xz/cellsize+.5);\n\n\tp.xz = mod(p.xz+cellsize*.5,cellsize)-cellsize*.5;\n\t\n\tfloat d = shape(p);\n\tfloat e = floor(d/.25);\n\td = max(d, abs(mod(d,.25)-.125)-.02);\n\td = max(d, abs(mod(p.y+tick(iTime*.5+cell.x*.5+cell.y*.25)*2.+.5,1.)-.5)-.25);\n\t\n\tfloat center = ripple(p);\n\t\n\tfloat best=min(d,center);\n\t\n\tif(d==best)\n\t\tmat=1.;\n\telse\n\t\tmat=.25;\n\t\n\treturn best;\n}\n\nvec3 rainbow(float a)\n{\n\treturn sin(a+vec3(0,2,4))*.5+.5;\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n\tvec3 accum=vec3(1);\n\tvec3 emit=vec3(0);\n\tfloat totaldist=0.;\n\tvec3 fogsky = rainbow(dir.y+iTime);\n\tfor(int bounce=0;bounce<3;++bounce){\n\t\tfloat t = 0.;\n\t\tfloat k = 0.;\n\t\tfor(int i=0;i<150;++i){\n\t\t\tk=scene(cam+dir*t)*.7;\n\t\t\tt+=k;\n\t\t\tif(abs(k)<.001)\n\t\t\t\tbreak;\n\t\t}\n\t\ttotaldist+=t;\n\t\t\n\t\tvec3 sky = rainbow(dir.y+iTime);\n\t\tfloat fogstrength = clamp(1.-pow(.95,totaldist-25.),0.,1.);\n\t\tif (abs(k)>=.001) {\n\t\t\treturn mix(accum*sky+emit,fogsky,fogstrength);\n\t\t}\n\t\tvec3 h=cam+dir*t;\n\t\tvec2 o = vec2(.001,0);\n\t\tvec3 n=normalize(vec3(\n\t\t\tscene(h+o.xyy)-scene(h-o.xyy),\n\t\t\tscene(h+o.yxy)-scene(h-o.yxy),\n\t\t\tscene(h+o.yyx)-scene(h-o.yyx)\n\t\t));\n\t\t\n\t\tvec3 color = accum*(n.y*.5+.5)*rainbow(h.y*mat+iTime*4.);\n\t\treturn mix(color,fogsky,fogstrength);\n\t}\n\treturn fogsky*accum;\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n\tvec3 cam = vec3(0,0,-20);\n\tvec3 dir = normalize(vec3(uv,2));\n\t\n\tcam.yz = rotate(cam.yz, .25);\n\tdir.yz = rotate(dir.yz, .25);\n\t\n\tcam.xz = rotate(cam.xz, .2);\n\tdir.xz = rotate(dir.xz, .2);\n\t\n\tout_color.rgb = trace(cam,dir);\n\tout_color.rgb = pow(out_color.rgb, vec3(.45));\n\tout_color.rgb += dot(uv,uv)*.3;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}