{
    "Shader": {
        "info": {
            "date": "1566487651",
            "description": "Light dispersion by a prism.\nHave a seat, plenty of coffee and prepare for waiting very long time... convergence is slow even on powerful hardware ;-)",
            "flags": 32,
            "hasliked": 0,
            "id": "wt2SRy",
            "likes": 24,
            "name": "Light dispersion",
            "published": 3,
            "tags": [
                "raytracing",
                "raytracer",
                "prism",
                "pathtracer",
                "dispersion",
                "spectral"
            ],
            "usePreview": 0,
            "username": "stack_overflow",
            "viewed": 1377
        },
        "renderpass": [
            {
                "code": "// Light dispersion\n// ================\n// v1.01 (08-23-2019)\n//   Changing the position of the prism and hack for avoiding the indetermination\n//   when the ray hits the bottom of the prism over the ground\n//\n// For deeper explanations, refer to https://www.shadertoy.com/view/WtlSWM, \n// more or less the same idea ;-)\n//\n// Shows the dispersion by a prism made of Dense flint glass SF10.\n// You can tweak the index of refraction and the light dispersion in cauchy_ior\n// function from Common tab (from line 144).\n// \n// You can also change the orientation of the prism by changing the PRISM_ROT define\n// in Common tab.\n\n\nfloat to_sRGB(in float c) {\n    if (abs(c) < 0.0031308) {\n        return c*12.92;\n    } else {\n     \treturn 1.055*pow(c, 1.0/2.4) - 0.055;        \n    }    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Output to screen  \n    vec4 col_xyz = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    col_xyz /= col_xyz.w;\n    \n    mat3 xyz_to_rgb = mat3(\n        vec3( 3.2406, -0.9689,  0.0557),\n        vec3(-1.5372,  1.8758, -0.2040),\n        vec3(-0.4986,  0.0415,  1.0570));\n    \n    vec3 col_rgb = xyz_to_rgb*vec3(col_xyz);\n    \n    // Exposure\n    col_rgb = col_rgb*exp2(-0.3);\n    \n    // tonemapping to sRGB\n    fragColor = vec4(\n        to_sRGB(col_rgb.r), \n        to_sRGB(col_rgb.g),\n        to_sRGB(col_rgb.b), \n        1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T_MIN 0.01\n#define T_MAX 10000.0\n#define ENV_IOR 1.0\n//#define SCHLICK\n#define PRISM_ROT 3.14/12.0\n\n#define MAT_MIRROR     0\n#define MAT_GLASS      1\n#define MAT_DIFFUSE_W  2\n#define MAT_EMISSIVE   3\n#define MAT_EMISSIVE_P 4\n#define MAT_ABSORBER   5\n\n#define SHAPE_TRIANGLE 0\n#define SHAPE_SPHERE   1\n\n#define WL_START   380.\n#define WL_SAMPLES 340\n\nconst float d65[WL_SAMPLES] = float[](49.9755, 50.44276000000001, 50.910019999999996, 51.37728, 51.844539999999995, 52.3118, 52.77908, 53.246359999999996, 53.71364, 54.18092, 54.6482, 57.45886, 60.26952, 63.08018, 65.89084, 68.7015, 71.51218, 74.32285999999999, 77.13354, 79.94422, 82.7549, 83.62800000000001, 84.50110000000001, 85.3742, 86.2473, 87.1204, 87.99352, 88.86664, 89.73976, 90.61287999999999, 91.486, 91.68058, 91.87516000000001, 92.06974, 92.26432, 92.4589, 92.65348, 92.84806, 93.04264, 93.23722, 93.4318, 92.75684000000001, 92.08188, 91.40692, 90.73196, 90.057, 89.38206000000001, 88.70712, 88.03218000000001, 87.35723999999999, 86.6823, 88.50056, 90.31882, 92.13708, 93.95534, 95.7736, 97.59188, 99.41015999999999, 101.22844, 103.04672, 104.865, 106.0792, 107.2934, 108.5076, 109.72180000000002, 110.936, 112.15040000000002, 113.3648, 114.5792, 115.7936, 117.008, 117.08840000000001, 117.16879999999999, 117.2492, 117.3296, 117.41, 117.4904, 117.57079999999999, 117.65119999999999, 117.7316, 117.812, 117.5168, 117.2216, 116.9264, 116.6312, 116.336, 116.04100000000001, 115.746, 115.45100000000001, 115.156, 114.861, 114.9672, 115.0734, 115.1796, 115.28580000000001, 115.392, 115.49820000000001, 115.6044, 115.7106, 115.8168, 115.923, 115.21180000000001, 114.50059999999999, 113.7894, 113.07820000000001, 112.367, 111.65580000000001, 110.94460000000001, 110.23340000000002, 109.52220000000001, 108.811, 108.86520000000002, 108.91940000000001, 108.9736, 109.0278, 109.082, 109.13640000000001, 109.1908, 109.2452, 109.2996, 109.354, 109.1988, 109.0436, 108.8884, 108.73320000000001, 108.578, 108.42280000000001, 108.2676, 108.11240000000001, 107.9572, 107.802, 107.50080000000001, 107.1996, 106.89840000000001, 106.59720000000002, 106.296, 105.99480000000001, 105.6936, 105.39240000000001, 105.0912, 104.79, 105.0798, 105.3696, 105.6594, 105.9492, 106.239, 106.52900000000001, 106.819, 107.10900000000001, 107.399, 107.689, 107.3606, 107.0322, 106.7038, 106.3754, 106.047, 105.71860000000001, 105.3902, 105.0618, 104.73339999999999, 104.405, 104.369, 104.333, 104.297, 104.261, 104.225, 104.1892, 104.1534, 104.1176, 104.08180000000002, 104.046, 103.64140000000002, 103.2368, 102.8322, 102.42760000000001, 102.023, 101.61840000000001, 101.21379999999999, 100.8092, 100.40459999999999, 100.0, 99.63342, 99.26684, 98.90026, 98.53368, 98.1671, 97.80052, 97.43394, 97.06736, 96.70078000000001, 96.3342, 96.27958000000001, 96.22496, 96.17034, 96.11572000000001, 96.0611, 96.00648000000001, 95.95185999999998, 95.89724000000001, 95.84261999999998, 95.788, 95.07776, 94.36752, 93.65728, 92.94703999999999, 92.2368, 91.52656, 90.81632, 90.10607999999999, 89.39583999999999, 88.6856, 88.81766, 88.94971999999999, 89.08178000000001, 89.21383999999999, 89.3459, 89.47796, 89.61002, 89.74208, 89.87414000000001, 90.0062, 89.96548000000001, 89.92475999999999, 89.88404, 89.84331999999999, 89.8026, 89.7619, 89.72120000000001, 89.6805, 89.63980000000001, 89.5991, 89.40906000000001, 89.21902, 89.02897999999999, 88.83894000000001, 88.6489, 88.45886000000002, 88.26882, 88.07878, 87.88874, 87.6987, 87.25768000000001, 86.81666, 86.37564, 85.93462, 85.4936, 85.0526, 84.61160000000001, 84.17060000000001, 83.7296, 83.2886, 83.32966, 83.37072, 83.41178, 83.45284, 83.4939, 83.53496, 83.57602, 83.61708, 83.65814, 83.6992, 83.33196000000001, 82.96472, 82.59747999999999, 82.23024000000001, 81.863, 81.49576, 81.12852, 80.76128, 80.39403999999999, 80.0268, 80.04558, 80.06436, 80.08314, 80.10191999999999, 80.1207, 80.13947999999999, 80.15826000000001, 80.17704, 80.19582, 80.2146, 80.42092000000001, 80.62724, 80.83356, 81.03988, 81.2462, 81.45252, 81.65884, 81.86516, 82.07148000000001, 82.2778, 81.87844000000001, 81.47908, 81.07972000000001, 80.68036, 80.281, 79.88164, 79.48228, 79.08292, 78.68356, 78.2842, 77.42790000000001, 76.5716, 75.7153, 74.85900000000001, 74.0027, 73.14642, 72.29014000000001, 71.43386000000001, 70.57758, 69.7213, 69.91008, 70.09886, 70.28764, 70.47642, 70.6652, 70.85398, 71.04276, 71.23154, 71.42032, 71.6091, 71.88308, 72.15706, 72.43104, 72.70502, 72.979, 73.253, 73.527, 73.801, 74.075, 74.349, 73.0745, 71.80000000000001, 70.5255, 69.251, 67.9765, 66.70200000000001, 65.4275, 64.15299999999999, 62.8785);\n\n// CIE 1931 2 degrees\n// const vec3 xyz_bar[WL_SAMPLES] = vec3[](vec3(0.001368,3.9e-05,0.006450001), vec3(0.0015416000000000002,4.4e-05,0.007269998800000001), vec3(0.0017152,4.9e-05,0.0080899966), vec3(0.0018888000000000002,5.4e-05,0.008909994400000001), vec3(0.0020624,5.9e-05,0.0097299922), vec3(0.002236,6.4e-05,0.01054999), vec3(0.0026374000000000002,7.52e-05,0.012449994), vec3(0.0030388000000000004,8.64e-05,0.014349998000000001), vec3(0.0034402,9.76e-05,0.016250002), vec3(0.0038416000000000006,0.0001088,0.018150006), vec3(0.004243,0.00012,0.02005001), vec3(0.004924400000000001,0.0001394,0.023282008), vec3(0.0056058,0.0001588,0.026514006), vec3(0.0062872,0.0001782,0.029746004), vec3(0.0069686,0.00019759999999999998,0.032978002), vec3(0.00765,0.000217,0.03621), vec3(0.008982,0.00025279999999999996,0.042538002000000005), vec3(0.010314,0.00028859999999999997,0.048866004000000005), vec3(0.011646,0.00032439999999999997,0.055194006000000004), vec3(0.012978,0.0003602,0.061522008), vec3(0.01431,0.000396,0.06785001), vec3(0.016086,0.0004448,0.07632000800000001), vec3(0.017862,0.0004936000000000001,0.084790006), vec3(0.019638,0.0005424,0.09326000400000001), vec3(0.021414,0.0005912000000000001,0.10173000200000001), vec3(0.02319,0.00064,0.1102), vec3(0.027254,0.0007540000000000001,0.12964000000000003), vec3(0.031318,0.0008680000000000001,0.14908), vec3(0.035382,0.000982,0.16852), vec3(0.039445999999999995,0.001096,0.18796000000000002), vec3(0.04351,0.00121,0.2074), vec3(0.050334000000000004,0.001404,0.24018), vec3(0.057158,0.001598,0.27296), vec3(0.063982,0.001792,0.30574), vec3(0.07080600000000001,0.001986,0.33852000000000004), vec3(0.07763,0.00218,0.3713), vec3(0.08898,0.0025440000000000003,0.42616), vec3(0.10033,0.002908,0.48102), vec3(0.11168,0.0032719999999999997,0.53588), vec3(0.12303,0.003636,0.5907399999999999), vec3(0.13438,0.004,0.6456), vec3(0.150458,0.00466,0.72429002), vec3(0.166536,0.00532,0.80298004), vec3(0.18261399999999997,0.00598,0.88167006), vec3(0.19869199999999998,0.00664,0.9603600800000001), vec3(0.21477,0.0073,1.0390501), vec3(0.228596,0.00816,1.1083600800000002), vec3(0.24242199999999997,0.00902,1.17767006), vec3(0.256248,0.00988,1.24698004), vec3(0.270074,0.01074,1.3162900199999998), vec3(0.2839,0.0116,1.3856), vec3(0.29281999999999997,0.012648,1.433072), vec3(0.30174,0.013696,1.480544), vec3(0.31066,0.014744,1.528016), vec3(0.31958000000000003,0.015792,1.575488), vec3(0.3285,0.01684,1.62296), vec3(0.33245600000000003,0.018072,1.64778), vec3(0.336412,0.019304,1.6726), vec3(0.340368,0.020536,1.69742), vec3(0.34432399999999996,0.021768,1.7222400000000002), vec3(0.34828,0.023,1.74706), vec3(0.348236,0.02436,1.7541680000000002), vec3(0.34819199999999995,0.02572,1.761276), vec3(0.348148,0.02708,1.768384), vec3(0.34810399999999997,0.02844,1.7754919999999998), vec3(0.34806,0.0298,1.7826), vec3(0.345688,0.03144,1.780502), vec3(0.343316,0.03308,1.7784039999999999), vec3(0.34094399999999997,0.03472,1.776306), vec3(0.338572,0.036359999999999996,1.774208), vec3(0.3362,0.038,1.77211), vec3(0.33270000000000005,0.04,1.766508), vec3(0.3292,0.041999999999999996,1.760906), vec3(0.3257,0.044,1.755304), vec3(0.3222,0.046,1.749702), vec3(0.3187,0.048,1.7441), vec3(0.31312,0.0504,1.72912), vec3(0.30754,0.0528,1.71414), vec3(0.30196,0.0552,1.69916), vec3(0.29638,0.0576,1.68418), vec3(0.2908,0.06,1.6692), vec3(0.28286,0.06278,1.64098), vec3(0.27492,0.06556,1.61276), vec3(0.26698,0.06834,1.58454), vec3(0.25904,0.07111999999999999,1.55632), vec3(0.2511,0.0739,1.5281), vec3(0.239952,0.077316,1.480008), vec3(0.228804,0.080732,1.431916), vec3(0.21765600000000002,0.084148,1.383824), vec3(0.206508,0.087564,1.335732), vec3(0.19536,0.09098,1.28764), vec3(0.184708,0.095304,1.238492), vec3(0.174056,0.09962800000000001,1.189344), vec3(0.163404,0.10395199999999999,1.140196), vec3(0.152752,0.10827600000000001,1.091048), vec3(0.1421,0.1126,1.0419), vec3(0.132808,0.11788400000000002,0.99611002), vec3(0.12351600000000001,0.123168,0.95032004), vec3(0.11422399999999999,0.128452,0.90453006), vec3(0.104932,0.133736,0.85874008), vec3(0.09564,0.13902,0.8129501), vec3(0.08810200200000001,0.145076,0.77360008), vec3(0.080564004,0.151132,0.73425006), vec3(0.073026006,0.157188,0.69490004), vec3(0.065488008,0.163244,0.65555002), vec3(0.05795001,0.1693,0.6162), vec3(0.052762008000000006,0.177044,0.585996), vec3(0.047574006,0.184788,0.5557920000000001), vec3(0.042386004000000005,0.192532,0.5255879999999999), vec3(0.037198001999999994,0.200276,0.495384), vec3(0.03201,0.20802,0.46518), vec3(0.028547999999999997,0.218136,0.44280400000000003), vec3(0.025085999999999997,0.228252,0.42042799999999997), vec3(0.021623999999999997,0.238368,0.398052), vec3(0.018161999999999998,0.248484,0.375676), vec3(0.0147,0.2586,0.3533), vec3(0.01274,0.27148,0.33704), vec3(0.01078,0.28436,0.32078), vec3(0.00882,0.29724,0.30452), vec3(0.006859999999999999,0.31012,0.28826), vec3(0.0049,0.323,0.272), vec3(0.004399999999999999,0.33986000000000005,0.26006), vec3(0.0039,0.35672000000000004,0.24812), vec3(0.0034,0.37358,0.23618), vec3(0.0029,0.39044,0.22424), vec3(0.0024,0.4073,0.2123), vec3(0.0037799999999999995,0.42644000000000004,0.20148), vec3(0.00516,0.44558,0.19066), vec3(0.006539999999999999,0.46472,0.17984), vec3(0.00792,0.48386,0.16902), vec3(0.0093,0.503,0.1582), vec3(0.013260000000000001,0.5240400000000001,0.1489), vec3(0.01722,0.54508,0.1396), vec3(0.02118,0.56612,0.1303), vec3(0.025140000000000003,0.58716,0.121), vec3(0.0291,0.6082,0.1117), vec3(0.03593400000000001,0.62856,0.105009998), vec3(0.042768,0.6489199999999999,0.09831999599999999), vec3(0.04960200000000001,0.66928,0.09162999399999999), vec3(0.05643600000000001,0.6896399999999999,0.084939992), vec3(0.06327,0.71,0.07824999), vec3(0.07253600000000002,0.72664,0.07404999400000001), vec3(0.08180200000000001,0.7432799999999999,0.069849998), vec3(0.09106800000000001,0.7599199999999999,0.065650002), vec3(0.100334,0.7765599999999999,0.061450006), vec3(0.1096,0.7932,0.05725001), vec3(0.12078000000000001,0.80696,0.054232008000000005), vec3(0.13196000000000002,0.82072,0.05121400599999999), vec3(0.14314,0.83448,0.048196004), vec3(0.15432,0.84824,0.045178001999999995), vec3(0.1655,0.862,0.04216), vec3(0.17754998000000002,0.87257002,0.039696), vec3(0.18959996,0.88314004,0.037232), vec3(0.20164994,0.89371006,0.034768), vec3(0.21369992000000002,0.90428008,0.032304), vec3(0.2257499,0.9148501,0.02984), vec3(0.23867992000000002,0.92268008,0.027932000000000002), vec3(0.25160994,0.93051006,0.026024), vec3(0.26453996,0.9383400399999999,0.024116), vec3(0.27746998,0.94617002,0.022208), vec3(0.2904,0.954,0.0203), vec3(0.30426,0.95926,0.01892), vec3(0.31811999999999996,0.9645199999999999,0.01754), vec3(0.33198,0.9697799999999999,0.01616), vec3(0.34584,0.97504,0.014779999999999998), vec3(0.3597,0.9803,0.0134), vec3(0.37444998,0.98323002,0.012469999800000001), vec3(0.38919996,0.9861600399999999,0.0115399996), vec3(0.40394994,0.98909006,0.0106099994), vec3(0.41869992,0.9920200799999999,0.009679999199999999), vec3(0.4334499,0.9949501,0.008749999), vec3(0.44916994,0.9959600799999999,0.008149999), vec3(0.46488998,0.99697006,0.007549999), vec3(0.48061001999999997,0.99798004,0.006949999), vec3(0.49633005999999996,0.9989900199999999,0.006349999), vec3(0.5120501,1.0,0.005749999), vec3(0.52854008,0.9990000000000001,0.005379999200000001), vec3(0.54503006,0.998,0.0050099994), vec3(0.56152004,0.997,0.0046399996), vec3(0.57801002,0.996,0.0042699998), vec3(0.5945,0.995,0.0039), vec3(0.61128,0.99172,0.0036699998), vec3(0.6280600000000001,0.98844,0.0034399995999999993), vec3(0.6448400000000001,0.98516,0.0032099994), vec3(0.66162,0.98188,0.0029799991999999997), vec3(0.6784,0.9786,0.002749999), vec3(0.69514,0.97328,0.0026199991999999997), vec3(0.7118800000000001,0.96796,0.0024899994), vec3(0.72862,0.9626399999999999,0.0023599996), vec3(0.74536,0.95732,0.0022299998), vec3(0.7621,0.952,0.0021), vec3(0.77818,0.9446800000000001,0.00204), vec3(0.79426,0.93736,0.00198), vec3(0.81034,0.93004,0.00192), vec3(0.82642,0.92272,0.0018599999999999999), vec3(0.8425,0.9154,0.0018), vec3(0.85726,0.9063200000000001,0.0017700002000000002), vec3(0.87202,0.89724,0.0017400004), vec3(0.8867799999999999,0.8881600000000001,0.0017100006), vec3(0.90154,0.8790800000000001,0.0016800008), vec3(0.9163,0.87,0.001650001), vec3(0.92876,0.8592600000000001,0.0016000008000000001), vec3(0.94122,0.84852,0.0015500006), vec3(0.9536800000000001,0.83778,0.0015000004), vec3(0.96614,0.82704,0.0014500002), vec3(0.9786,0.8163,0.0014), vec3(0.98814,0.80444,0.00134), vec3(0.99768,0.7925800000000001,0.0012799999999999999), vec3(1.00722,0.7807200000000001,0.0012200000000000002), vec3(1.0167599999999999,0.76886,0.00116), vec3(1.0263,0.757,0.0011), vec3(1.03238,0.74458,0.0010800000000000002), vec3(1.03846,0.7321599999999999,0.00106), vec3(1.04454,0.71974,0.0010400000000000001), vec3(1.0506199999999999,0.70732,0.00102), vec3(1.0567,0.6949,0.001), vec3(1.0578,0.68212,0.00096), vec3(1.0589,0.66934,0.00092), vec3(1.06,0.65656,0.00088), vec3(1.0611,0.64378,0.00084), vec3(1.0622,0.631,0.0008), vec3(1.05888,0.61816,0.00076), vec3(1.05556,0.60532,0.0007199999999999999), vec3(1.05224,0.59248,0.00068), vec3(1.04892,0.5796399999999999,0.0006399999999999999), vec3(1.0456,0.5668,0.0006), vec3(1.0370000000000001,0.55404,0.000548), vec3(1.0284,0.54128,0.000496), vec3(1.0198,0.52852,0.00044399999999999995), vec3(1.0112,0.51576,0.000392), vec3(1.0026,0.503,0.00034), vec3(0.98976,0.49064,0.0003200000000000001), vec3(0.97692,0.47828000000000004,0.00030000000000000003), vec3(0.96408,0.46592,0.00028000000000000003), vec3(0.95124,0.45355999999999996,0.00026), vec3(0.9384,0.4412,0.00024), vec3(0.92160998,0.42916,0.00023), vec3(0.90481996,0.41711999999999994,0.00022), vec3(0.88802994,0.40508,0.00021), vec3(0.87123992,0.39304,0.00019999999999999998), vec3(0.8544499,0.381,0.00019), vec3(0.83383992,0.369,0.000172), vec3(0.81322994,0.357,0.000154), vec3(0.7926199599999999,0.345,0.000136), vec3(0.77200998,0.333,0.000118), vec3(0.7514,0.321,0.0001), vec3(0.7296,0.3098,8.9999998e-05), vec3(0.7078,0.2986,7.999999600000001e-05), vec3(0.6859999999999999,0.2874,6.9999994e-05), vec3(0.6642,0.2762,5.9999992e-05), vec3(0.6424,0.265,4.999999e-05), vec3(0.6223000000000001,0.2554,4.5999992e-05), vec3(0.6022,0.24580000000000002,4.1999994e-05), vec3(0.5821000000000001,0.2362,3.7999996000000005e-05), vec3(0.562,0.2266,3.3999998e-05), vec3(0.5419,0.217,3e-05), vec3(0.5231000000000001,0.2086,2.8000000000000003e-05), vec3(0.5043000000000001,0.2002,2.6000000000000002e-05), vec3(0.48550000000000004,0.1918,2.4e-05), vec3(0.4667,0.18339999999999998,2.2e-05), vec3(0.4479,0.175,2e-05), vec3(0.43048000000000003,0.16763999999999998,1.8000000000000004e-05), vec3(0.41306,0.16027999999999998,1.6000000000000003e-05), vec3(0.39564,0.15292,1.4000000000000001e-05), vec3(0.37822,0.14555999999999997,1.2e-05), vec3(0.3608,0.1382,1e-05), vec3(0.34534,0.13196,8.000000000000001e-06), vec3(0.32988,0.12572,6e-06), vec3(0.31442,0.11947999999999999,4.000000000000001e-06), vec3(0.29896,0.11324000000000001,2e-06), vec3(0.2835,0.107,0.0), vec3(0.27054,0.10192000000000001,0.0), vec3(0.25758,0.09684,0.0), vec3(0.24462,0.09176000000000001,0.0), vec3(0.23165999999999998,0.08668000000000001,0.0), vec3(0.2187,0.0816,0.0), vec3(0.20794,0.07748000000000001,0.0), vec3(0.19718000000000002,0.07336000000000001,0.0), vec3(0.18641999999999997,0.06924,0.0), vec3(0.17566,0.06512,0.0), vec3(0.1649,0.061,0.0), vec3(0.15616000000000002,0.057716,0.0), vec3(0.14742,0.054432,0.0), vec3(0.13868,0.051148,0.0), vec3(0.12994,0.047864,0.0), vec3(0.1212,0.04458,0.0), vec3(0.11444000000000001,0.042064000000000004,0.0), vec3(0.10768,0.039548,0.0), vec3(0.10092000000000001,0.037031999999999995,0.0), vec3(0.09416000000000001,0.034516,0.0), vec3(0.0874,0.032,0.0), vec3(0.08264000000000002,0.030240000000000003,0.0), vec3(0.07788,0.02848,0.0), vec3(0.07312,0.02672,0.0), vec3(0.06836,0.02496,0.0), vec3(0.0636,0.0232,0.0), vec3(0.06023400000000001,0.02196,0.0), vec3(0.056868,0.02072,0.0), vec3(0.05350200000000001,0.01948,0.0), vec3(0.050136,0.01824,0.0), vec3(0.04677,0.017,0.0), vec3(0.043996,0.015984,0.0), vec3(0.041222,0.014968000000000002,0.0), vec3(0.038447999999999996,0.013951999999999999,0.0), vec3(0.035674,0.012936,0.0), vec3(0.0329,0.01192,0.0), vec3(0.03086,0.011178,0.0), vec3(0.02882,0.010436,0.0), vec3(0.026779999999999998,0.009694000000000001,0.0), vec3(0.02474,0.008952,0.0), vec3(0.0227,0.00821,0.0), vec3(0.021328000000000003,0.007712600000000001,0.0), vec3(0.019956,0.0072152,0.0), vec3(0.018584000000000003,0.0067178,0.0), vec3(0.017211999999999998,0.006220399999999999,0.0), vec3(0.01584,0.005723,0.0), vec3(0.014943832,0.0053988,0.0), vec3(0.014047664000000001,0.0050746,0.0), vec3(0.013151496,0.0047504,0.0), vec3(0.012255328,0.0044262,0.0), vec3(0.01135916,0.004102,0.0), vec3(0.0107095112,0.0038674,0.0), vec3(0.0100598624,0.0036328,0.0), vec3(0.0094102136,0.0033982,0.0), vec3(0.008760564799999999,0.0031636,0.0), vec3(0.008110916,0.002929,0.0), vec3(0.007646802,0.0027614000000000002,0.0), vec3(0.007182688,0.0025938000000000003,0.0), vec3(0.006718574,0.0024262,0.0), vec3(0.00625446,0.0022586,0.0), vec3(0.005790346,0.002091,0.0), vec3(0.005453568200000001,0.0019696,0.0), vec3(0.0051167904,0.0018482000000000001,0.0), vec3(0.0047800126,0.0017268000000000001,0.0), vec3(0.0044432348,0.0016054,0.0), vec3(0.004106457,0.001484,0.0), vec3(0.0038650310000000005,0.0013966000000000002,0.0), vec3(0.0036236050000000002,0.0013092,0.0), vec3(0.003382179,0.0012218,0.0), vec3(0.003140753,0.0011343999999999998,0.0));\n// Judd & Vos 2 degrees\n// vec3 xyz_bar[WL_SAMPLES] = vec3[](vec3(0.0026899,0.0002,0.01226), vec3(0.0032140199999999997,0.000239112,0.014652400000000001), vec3(0.00373814,0.000278224,0.0170448), vec3(0.00426226,0.000317336,0.0194372), vec3(0.00478638,0.000356448,0.0218296), vec3(0.0053105,0.00039556,0.024222), vec3(0.0064046,0.000476448,0.029227600000000003), vec3(0.0074987000000000005,0.0005573360000000001,0.034233200000000005), vec3(0.008592800000000001,0.000638224,0.039238800000000004), vec3(0.0096869,0.000719112,0.0442444), vec3(0.010781,0.0008,0.04925), vec3(0.012783200000000002,0.00094914,0.05842700000000001), vec3(0.0147854,0.00109828,0.067604), vec3(0.0167876,0.00124742,0.07678099999999999), vec3(0.018789800000000002,0.00139656,0.085958), vec3(0.020792,0.0015457,0.095135), vec3(0.024229800000000003,0.00179656,0.11092600000000001), vec3(0.0276676,0.00204742,0.126717), vec3(0.0311054,0.0022982799999999998,0.142508), vec3(0.0345432,0.00254914,0.158299), vec3(0.037981,0.0028,0.17409), vec3(0.043016200000000004,0.0031712400000000005,0.197298), vec3(0.0480514,0.0035424799999999998,0.22050599999999998), vec3(0.053086600000000005,0.00391372,0.243714), vec3(0.0581218,0.00428496,0.266922), vec3(0.063157,0.0046562,0.29013), vec3(0.0705138,0.005204960000000001,0.32421), vec3(0.07787060000000001,0.00575372,0.35829), vec3(0.08522740000000001,0.006302480000000001,0.39237), vec3(0.0925842,0.006851240000000001,0.42645), vec3(0.099941,0.0074,0.46053), vec3(0.1116008,0.0082758,0.514756), vec3(0.1232606,0.0091516,0.568982), vec3(0.1349204,0.0100274,0.623208), vec3(0.1465802,0.0109032,0.677434), vec3(0.15824,0.011779,0.73166), vec3(0.172488,0.0129232,0.798488), vec3(0.18673599999999999,0.0140674,0.865316), vec3(0.200984,0.0152116,0.9321440000000001), vec3(0.21523199999999998,0.0163558,0.998972), vec3(0.22948,0.0175,1.0658), vec3(0.2398,0.018535600000000003,1.11556), vec3(0.25012,0.0195712,1.16532), vec3(0.26044,0.0206068,1.21508), vec3(0.27076,0.0216424,1.26484), vec3(0.28108,0.022678,1.3146), vec3(0.28705400000000003,0.0236024,1.34512), vec3(0.293028,0.0245268,1.3756400000000002), vec3(0.299002,0.0254512,1.4061599999999999), vec3(0.304976,0.0263756,1.43668), vec3(0.31095,0.0273,1.4672), vec3(0.314904,0.0283568,1.4896800000000001), vec3(0.318858,0.029413599999999998,1.51216), vec3(0.322812,0.0304704,1.53464), vec3(0.326766,0.0315272,1.5571199999999998), vec3(0.33072,0.032584,1.5796), vec3(0.33124800000000004,0.0336472,1.587), vec3(0.33177599999999996,0.0347104,1.5944), vec3(0.33230400000000004,0.0357736,1.6018), vec3(0.33283199999999996,0.0368368,1.6092000000000002), vec3(0.33336,0.0379,1.6166), vec3(0.330032,0.038798200000000005,1.6069200000000001), vec3(0.326704,0.0396964,1.59724), vec3(0.323376,0.0405946,1.58756), vec3(0.320048,0.041492799999999996,1.57788), vec3(0.31672,0.042391,1.5682), vec3(0.31113999999999997,0.0432728,1.5489000000000002), vec3(0.30556000000000005,0.0441546,1.5295999999999998), vec3(0.29998,0.045036400000000004,1.5103), vec3(0.2944,0.0459182,1.4909999999999999), vec3(0.28882,0.0468,1.4717), vec3(0.282994,0.0478644,1.4521600000000001), vec3(0.27716799999999997,0.0489288,1.43262), vec3(0.27134199999999997,0.0499932,1.41308), vec3(0.265516,0.0510576,1.3935400000000002), vec3(0.25969,0.052122,1.374), vec3(0.254304,0.0536976,1.3575400000000002), vec3(0.24891799999999997,0.0552732,1.34108), vec3(0.243532,0.0568488,1.3246200000000001), vec3(0.238146,0.0584244,1.30816), vec3(0.23276,0.06,1.2917), vec3(0.22820600000000002,0.0625884,1.28048), vec3(0.22365200000000002,0.06517680000000001,1.26926), vec3(0.21909800000000001,0.0677652,1.25804), vec3(0.214544,0.0703536,1.24682), vec3(0.20999,0.072942,1.2356), vec3(0.20294400000000004,0.07654960000000001,1.21124), vec3(0.19589800000000002,0.08015720000000001,1.18688), vec3(0.18885200000000002,0.0837648,1.1625199999999998), vec3(0.18180600000000002,0.0873724,1.1381599999999998), vec3(0.17476,0.09098,1.1138), vec3(0.16638200000000003,0.095352,1.07948), vec3(0.15800399999999998,0.09972400000000001,1.0451599999999999), vec3(0.14962599999999998,0.104096,1.01084), vec3(0.14124799999999998,0.10846800000000001,0.97652), vec3(0.13287,0.11284,0.9422), vec3(0.1246848,0.11807600000000001,0.9049520000000001), vec3(0.11649959999999998,0.123312,0.867704), vec3(0.1083144,0.128548,0.8304560000000001), vec3(0.10012919999999999,0.13378400000000001,0.7932079999999999), vec3(0.091944,0.13902,0.75596), vec3(0.0849522,0.14519,0.722048), vec3(0.0779604,0.15136,0.688136), vec3(0.07096859999999999,0.15753,0.6542239999999999), vec3(0.0639768,0.16369999999999998,0.620312), vec3(0.056985,0.16987,0.5864), vec3(0.05193420000000001,0.1775,0.558458), vec3(0.0468834,0.18513000000000002,0.530516), vec3(0.0418326,0.19276,0.502574), vec3(0.0367818,0.20039,0.474632), vec3(0.031731,0.20802,0.44669), vec3(0.028307400000000003,0.218032,0.425584), vec3(0.024883799999999998,0.228044,0.404478), vec3(0.0214602,0.238056,0.38337200000000005), vec3(0.0180366,0.24806799999999998,0.362266), vec3(0.014613,0.25808,0.34116), vec3(0.01266022,0.27106399999999997,0.32580200000000004), vec3(0.010707439999999999,0.28404799999999997,0.31044400000000005), vec3(0.008754660000000001,0.29703199999999996,0.29508599999999996), vec3(0.00680188,0.310016,0.279728), vec3(0.0048491,0.323,0.26437), vec3(0.0043435800000000005,0.33948,0.252684), vec3(0.00383806,0.35596,0.240998), vec3(0.00333254,0.37244,0.22931200000000002), vec3(0.00282702,0.38892,0.217626), vec3(0.0023215,0.4054,0.20594), vec3(0.0037151800000000002,0.42492,0.195642), vec3(0.005108860000000001,0.44444,0.185344), vec3(0.00650254,0.46396000000000004,0.175046), vec3(0.00789622,0.48348,0.164748), vec3(0.0092899,0.503,0.15445), vec3(0.01328752,0.524022,0.145396), vec3(0.01728514,0.5450440000000001,0.13634200000000002), vec3(0.021282759999999998,0.5660660000000001,0.127288), vec3(0.025280379999999998,0.587088,0.118234), vec3(0.029278,0.60811,0.10918), vec3(0.0361806,0.628488,0.102661), vec3(0.0430832,0.6488659999999999,0.096142), vec3(0.0499858,0.669244,0.08962300000000001), vec3(0.0568884,0.689622,0.083104), vec3(0.063791,0.71,0.076585), vec3(0.0731948,0.72702,0.0725134), vec3(0.0825986,0.74404,0.0684418), vec3(0.09200240000000001,0.76106,0.0643702), vec3(0.1014062,0.7780800000000001,0.0602986), vec3(0.11081,0.7951,0.056227), vec3(0.122032,0.8084800000000001,0.053254800000000005), vec3(0.133254,0.82186,0.0502826), vec3(0.144476,0.83524,0.0473104), vec3(0.155698,0.8486199999999999,0.044338199999999994), vec3(0.16692,0.862,0.041366), vec3(0.179072,0.87261,0.038963399999999995), vec3(0.191224,0.88322,0.036560800000000004), vec3(0.203376,0.89383,0.0341582), vec3(0.215528,0.90444,0.031755599999999995), vec3(0.22768,0.91505,0.029353), vec3(0.240682,0.92284,0.027490800000000003), vec3(0.253684,0.9306300000000001,0.0256286), vec3(0.266686,0.9384199999999999,0.0237664), vec3(0.279688,0.94621,0.0219042), vec3(0.29269,0.954,0.020042), vec3(0.30660200000000004,0.9592080000000001,0.018696), vec3(0.32051399999999997,0.9644159999999999,0.01735), vec3(0.334426,0.969624,0.016004), vec3(0.348338,0.974832,0.014658000000000001), vec3(0.36225,0.98004,0.013312), vec3(0.37707,0.9830220000000001,0.01240606), vec3(0.39189000000000007,0.986004,0.011500119999999999), vec3(0.40671,0.988986,0.01059418), vec3(0.42153000000000007,0.991968,0.009688239999999999), vec3(0.43635,0.99495,0.0087823), vec3(0.45210600000000006,0.99598,0.008197300000000001), vec3(0.467862,0.99701,0.0076123), vec3(0.483618,0.9980399999999999,0.0070273), vec3(0.499374,0.9990699999999999,0.0064423), vec3(0.51513,1.0001,0.0058573), vec3(0.5316000000000001,0.99908,0.0054957), vec3(0.54807,0.99806,0.0051341), vec3(0.56454,0.9970399999999999,0.0047725), vec3(0.58101,0.99602,0.0044109), vec3(0.59748,0.995,0.0040493), vec3(0.614226,0.99175,0.0038237799999999997), vec3(0.630972,0.9884999999999999,0.00359826), vec3(0.647718,0.98525,0.00337274), vec3(0.6644639999999999,0.982,0.00314722), vec3(0.68121,0.97875,0.0029217), vec3(0.697818,0.9734,0.00279278), vec3(0.714426,0.96805,0.00266386), vec3(0.731034,0.9626999999999999,0.00253494), vec3(0.747642,0.95735,0.00240602), vec3(0.76425,0.952,0.0022771), vec3(0.7801880000000001,0.9447160000000001,0.0022158), vec3(0.796126,0.9374319999999999,0.0021544999999999997), vec3(0.8120640000000001,0.930148,0.0020932), vec3(0.828002,0.9228639999999999,0.0020318999999999997), vec3(0.84394,0.91558,0.0019706), vec3(0.8584220000000001,0.906464,0.0019378), vec3(0.8729040000000001,0.897348,0.001905), vec3(0.887386,0.888232,0.0018721999999999999), vec3(0.901868,0.879116,0.0018394000000000001), vec3(0.91635,0.87,0.0018066), vec3(0.928486,0.8592460000000001,0.00175426), vec3(0.9406220000000001,0.848492,0.00170192), vec3(0.952758,0.8377380000000001,0.00164958), vec3(0.9648939999999999,0.8269839999999999,0.0015972400000000002), vec3(0.97703,0.81623,0.0015449), vec3(0.986224,0.804384,0.0014828800000000002), vec3(0.9954179999999999,0.792538,0.00142086), vec3(1.0046119999999998,0.7806919999999999,0.00135884), vec3(1.013806,0.768846,0.00129682), vec3(1.023,0.757,0.0012348), vec3(1.02866,0.7445660000000001,0.00121138), vec3(1.03432,0.732132,0.00118796), vec3(1.03998,0.719698,0.00116454), vec3(1.04564,0.707264,0.0011411199999999998), vec3(1.0513,0.69483,0.0011177), vec3(1.05204,0.682064,0.001075288), vec3(1.0527799999999998,0.669298,0.0010328759999999998), vec3(1.0535199999999998,0.656532,0.000990464), vec3(1.05426,0.643766,0.000948052), vec3(1.055,0.631,0.00090564), vec3(1.05124,0.6181080000000001,0.0008634460000000001), vec3(1.04748,0.605216,0.000821252), vec3(1.04372,0.5923240000000001,0.000779058), vec3(1.03996,0.5794320000000001,0.000736864), vec3(1.0362,0.56654,0.00069467), vec3(1.027438,0.5538320000000001,0.000641506), vec3(1.018676,0.541124,0.0005883419999999999), vec3(1.009914,0.528416,0.000535178), vec3(1.001152,0.515708,0.00048201399999999996), vec3(0.99239,0.503,0.00042885), vec3(0.9796340000000001,0.49074400000000007,0.000406714), vec3(0.9668780000000001,0.478488,0.000384578), vec3(0.9541220000000001,0.466232,0.000362442), vec3(0.941366,0.453976,0.000340306), vec3(0.92861,0.44172,0.00031817), vec3(0.9115800000000001,0.429576,0.000305732), vec3(0.8945500000000001,0.417432,0.000293294), vec3(0.8775200000000001,0.405288,0.000280856), vec3(0.86049,0.393144,0.000268418), vec3(0.84346,0.381,0.00025598), vec3(0.8227340000000001,0.368904,0.000236142), vec3(0.802008,0.356808,0.000216304), vec3(0.781282,0.344712,0.000196466), vec3(0.760556,0.332616,0.000176628), vec3(0.73983,0.32052,0.00015679), vec3(0.718442,0.309416,0.00014497080000000002), vec3(0.697054,0.298312,0.00013315160000000001), vec3(0.675666,0.287208,0.0001213324), vec3(0.6542779999999999,0.276104,0.00010951320000000001), vec3(0.63289,0.265,9.7694e-05), vec3(0.613014,0.255404,9.194400000000001e-05), vec3(0.5931379999999999,0.245808,8.6194e-05), vec3(0.5732619999999999,0.236212,8.0444e-05), vec3(0.553386,0.22661599999999998,7.469399999999999e-05), vec3(0.53351,0.21702,6.8944e-05), vec3(0.5149320000000001,0.208616,6.53882e-05), vec3(0.496354,0.200212,6.18324e-05), vec3(0.47777600000000003,0.19180799999999998,5.82766e-05), vec3(0.459198,0.18340399999999998,5.4720800000000006e-05), vec3(0.44062,0.175,5.1165e-05), vec3(0.42340200000000006,0.167624,4.8135200000000006e-05), vec3(0.406184,0.160248,4.51054e-05), vec3(0.38896600000000003,0.15287199999999998,4.207560000000001e-05), vec3(0.371748,0.145496,3.9045800000000005e-05), vec3(0.35453,0.13812,3.6016e-05), vec3(0.33934800000000004,0.131896,3.36604e-05), vec3(0.32416599999999995,0.125672,3.13048e-05), vec3(0.30898400000000004,0.119448,2.89492e-05), vec3(0.29380199999999995,0.113224,2.6593600000000002e-05), vec3(0.27862,0.107,2.4238e-05), vec3(0.265866,0.1019304,2.2773400000000005e-05), vec3(0.253112,0.0968608,2.13088e-05), vec3(0.240358,0.0917912,1.9844200000000002e-05), vec3(0.22760400000000003,0.08672160000000001,1.83796e-05), vec3(0.21485,0.081652,1.6915e-05), vec3(0.20420200000000005,0.07752160000000001,1.5913200000000002e-05), vec3(0.193554,0.0733912,1.49114e-05), vec3(0.182906,0.06926080000000001,1.39096e-05), vec3(0.17225800000000002,0.0651304,1.29078e-05), vec3(0.16161,0.061,1.1906e-05), vec3(0.152928,0.057665400000000006,1.115458e-05), vec3(0.14424599999999999,0.0543308,1.040316e-05), vec3(0.13556400000000002,0.0509962,9.65174e-06), vec3(0.126882,0.0476616,8.900319999999998e-06), vec3(0.1182,0.044327,8.1489e-06), vec3(0.11171060000000001,0.041861600000000006,7.639239999999999e-06), vec3(0.10522119999999999,0.0393962,7.129579999999999e-06), vec3(0.09873180000000001,0.0369308,6.6199200000000005e-06), vec3(0.09224239999999999,0.0344654,6.1102599999999995e-06), vec3(0.085753,0.032,5.6006e-06), vec3(0.08121779999999999,0.0302908,5.27136e-06), vec3(0.07668259999999999,0.0285816,4.94212e-06), vec3(0.0721474,0.026872399999999998,4.61288e-06), vec3(0.06761219999999998,0.0251632,4.28364e-06), vec3(0.063077,0.023454,3.9544e-06), vec3(0.0596284,0.0221632,3.7217600000000003e-06), vec3(0.0561798,0.0208724,3.48912e-06), vec3(0.05273119999999999,0.0195816,3.25648e-06), vec3(0.049282599999999996,0.0182908,3.02384e-06), vec3(0.045834,0.017,2.7912e-06), vec3(0.04307860000000001,0.0159744,2.61648e-06), vec3(0.040323200000000003,0.014948800000000002,2.44176e-06), vec3(0.0375678,0.0139232,2.26704e-06), vec3(0.0348124,0.012897600000000002,2.09232e-06), vec3(0.032057,0.011872,1.9176e-06), vec3(0.030083000000000006,0.011139600000000003,1.7967800000000002e-06), vec3(0.028109000000000002,0.0104072,1.6759599999999999e-06), vec3(0.026135,0.0096748,1.55514e-06), vec3(0.024161000000000002,0.0089424,1.4343199999999999e-06), vec3(0.022187,0.00821,1.3135e-06), vec3(0.020872,0.007722460000000001,1.233838e-06), vec3(0.019556999999999998,0.007234920000000001,1.154176e-06), vec3(0.018242,0.006747380000000001,1.074514e-06), vec3(0.016926999999999998,0.006259840000000001,9.94852e-07), vec3(0.015612,0.0057723,9.1519e-07), vec3(0.0147092,0.0054382400000000004,8.61686e-07), vec3(0.0138064,0.00510418,8.081819999999999e-07), vec3(0.012903600000000001,0.00477012,7.54678e-07), vec3(0.012000799999999999,0.0044360599999999995,7.01174e-07), vec3(0.011098,0.004102,6.4767e-07), vec3(0.01046306,0.00386742,6.1084e-07), vec3(0.00982812,0.00363284,5.7401e-07), vec3(0.009193179999999999,0.00339826,5.3718e-07), vec3(0.008558239999999998,0.00316368,5.0035e-07), vec3(0.0079233,0.0029291,4.6352e-07), vec3(0.00746926,0.00276148,4.3742400000000007e-07), vec3(0.00701522,0.00259386,4.11328e-07), vec3(0.00656118,0.00242624,3.85232e-07), vec3(0.0061071400000000005,0.0022586200000000002,3.59136e-07), vec3(0.0056531,0.002091,3.3304e-07), vec3(0.005323260000000001,0.00196924,3.14078e-07), vec3(0.00499342,0.00184748,2.95116e-07), vec3(0.0046635800000000005,0.00172572,2.76154e-07), vec3(0.00433374,0.00160396,2.57192e-07), vec3(0.0040039,0.0014822,2.3823e-07), vec3(0.0037681800000000003,0.00139516,2.24636e-07), vec3(0.0035324600000000003,0.0013081199999999999,2.1104200000000002e-07), vec3(0.0032967400000000003,0.00122108,1.97448e-07), vec3(0.0030610200000000002,0.0011340399999999998,1.83854e-07));\n// CIE 1964 10 degrees\n//vec3 xyz_bar[WL_SAMPLES] = vec3[](vec3(0.000159952,1.7364e-05,0.000704776), vec3(0.00021508,2.3327e-05,0.00094823), vec3(0.00028749,3.115e-05,0.0012682), vec3(0.00038199,4.135e-05,0.0016861), vec3(0.00050455,5.456e-05,0.0022285), vec3(0.00066244,7.156e-05,0.0029278), vec3(0.0008645,9.33e-05,0.0038237), vec3(0.0011215,0.00012087,0.0049642), vec3(0.00144616,0.00015564,0.0064067), vec3(0.00185359,0.0001992,0.0082193), vec3(0.0023616,0.0002534,0.0104822), vec3(0.0029906,0.0003202,0.013289), vec3(0.0037645,0.0004024,0.016747), vec3(0.0047102,0.0005023,0.02098), vec3(0.0058581,0.0006232,0.026127), vec3(0.0072423,0.0007685,0.032344), vec3(0.0088996,0.0009417,0.039802), vec3(0.0108709,0.0011478,0.048691), vec3(0.0131989,0.0013903,0.05921), vec3(0.0159292,0.001674,0.071576), vec3(0.0191097,0.0020044,0.0860109), vec3(0.022788,0.002386,0.10274), vec3(0.027011,0.002822,0.122), vec3(0.031829,0.003319,0.14402), vec3(0.037278,0.00388,0.16899), vec3(0.0434,0.004509,0.19712), vec3(0.050223,0.005209,0.22857), vec3(0.057764,0.005985,0.26347), vec3(0.066038,0.006833,0.3019), vec3(0.075033,0.007757,0.34387), vec3(0.084736,0.008756,0.389366), vec3(0.095041,0.009816,0.43797), vec3(0.105836,0.010918,0.48922), vec3(0.117066,0.012058,0.5429), vec3(0.128682,0.013237,0.59881), vec3(0.140638,0.014456,0.65676), vec3(0.152893,0.015717,0.71658), vec3(0.165416,0.017025,0.77812), vec3(0.178191,0.018399,0.84131), vec3(0.191214,0.019848,0.90611), vec3(0.204492,0.021391,0.972542), vec3(0.21765,0.022992,1.0389), vec3(0.230267,0.024598,1.1031), vec3(0.242311,0.026213,1.1651), vec3(0.253793,0.027841,1.2249), vec3(0.264737,0.029497,1.2825), vec3(0.275195,0.031195,1.3382), vec3(0.285301,0.032927,1.3926), vec3(0.295143,0.034738,1.4461), vec3(0.304869,0.036654,1.4994), vec3(0.314679,0.038676,1.55348), vec3(0.324355,0.040792,1.6072), vec3(0.33357,0.042946,1.6589), vec3(0.342243,0.045114,1.7082), vec3(0.350312,0.047333,1.7548), vec3(0.357719,0.049602,1.7985), vec3(0.364482,0.051934,1.8392), vec3(0.370493,0.054337,1.8766), vec3(0.375727,0.056822,1.9105), vec3(0.380158,0.059399,1.9408), vec3(0.383734,0.062077,1.96728), vec3(0.386327,0.064737,1.9891), vec3(0.387858,0.067285,2.0057), vec3(0.388396,0.069764,2.0174), vec3(0.387978,0.072218,2.0244), vec3(0.386726,0.074704,2.0273), vec3(0.384696,0.077272,2.0264), vec3(0.382006,0.079979,2.0223), vec3(0.378709,0.082874,2.0153), vec3(0.374915,0.086,2.006), vec3(0.370702,0.089456,1.9948), vec3(0.366089,0.092947,1.9814), vec3(0.361045,0.096275,1.9653), vec3(0.355518,0.099535,1.9464), vec3(0.349486,0.102829,1.9248), vec3(0.342957,0.106256,1.9007), vec3(0.335893,0.109901,1.8741), vec3(0.328284,0.113835,1.8451), vec3(0.32015,0.118167,1.8139), vec3(0.311475,0.122932,1.7806), vec3(0.302273,0.128201,1.74537), vec3(0.292858,0.133457,1.7091), vec3(0.283502,0.138323,1.6723), vec3(0.274044,0.143042,1.6347), vec3(0.264263,0.147787,1.5956), vec3(0.254085,0.152761,1.5549), vec3(0.243392,0.158102,1.5122), vec3(0.232187,0.163941,1.4673), vec3(0.220488,0.170362,1.4199), vec3(0.208198,0.177425,1.37), vec3(0.195618,0.18519,1.31756), vec3(0.183034,0.193025,1.2624), vec3(0.170222,0.200313,1.205), vec3(0.157348,0.207156,1.1466), vec3(0.14465,0.213644,1.088), vec3(0.132349,0.21994,1.0302), vec3(0.120584,0.22617,0.97383), vec3(0.109456,0.232467,0.91943), vec3(0.099042,0.239025,0.86746), vec3(0.089388,0.245997,0.81828), vec3(0.080507,0.253589,0.772125), vec3(0.072034,0.261876,0.72829), vec3(0.06371,0.270643,0.68604), vec3(0.055694,0.279645,0.64553), vec3(0.048117,0.288694,0.60685), vec3(0.041072,0.297665,0.57006), vec3(0.034642,0.306469,0.53522), vec3(0.028896,0.315035,0.50234), vec3(0.023876,0.323335,0.4714), vec3(0.019628,0.331366,0.44239), vec3(0.016172,0.339133,0.415254), vec3(0.0133,0.34786,0.390024), vec3(0.010759,0.358326,0.366399), vec3(0.008542,0.370001,0.344015), vec3(0.006661,0.382464,0.322689), vec3(0.005132,0.395379,0.302356), vec3(0.003982,0.408482,0.283036), vec3(0.003239,0.421588,0.264816), vec3(0.002934,0.434619,0.247848), vec3(0.003114,0.447601,0.232318), vec3(0.003816,0.460777,0.218502), vec3(0.005095,0.47434,0.205851), vec3(0.006936,0.4882,0.193596), vec3(0.009299,0.50234,0.181736), vec3(0.012147,0.51674,0.170281), vec3(0.015444,0.53136,0.159249), vec3(0.019156,0.54619,0.148673), vec3(0.02325,0.56118,0.138609), vec3(0.02769,0.57629,0.129096), vec3(0.032444,0.5915,0.120215), vec3(0.037465,0.606741,0.112044), vec3(0.042956,0.62215,0.10471), vec3(0.049114,0.63783,0.098196), vec3(0.05592,0.65371,0.092361), vec3(0.063349,0.66968,0.087088), vec3(0.071358,0.68566,0.082248), vec3(0.079901,0.70155,0.077744), vec3(0.088909,0.71723,0.073456), vec3(0.098293,0.73257,0.069268), vec3(0.107949,0.74746,0.06506), vec3(0.117749,0.761757,0.060709), vec3(0.127839,0.77534,0.056457), vec3(0.13845,0.78822,0.052609), vec3(0.149516,0.80046,0.049122), vec3(0.161041,0.81214,0.045954), vec3(0.172953,0.82333,0.04305), vec3(0.185209,0.83412,0.040368), vec3(0.197755,0.8446,0.037839), vec3(0.210538,0.85487,0.035384), vec3(0.22346,0.86504,0.032949), vec3(0.236491,0.875211,0.030451), vec3(0.249633,0.88537,0.028029), vec3(0.262972,0.89537,0.025862), vec3(0.276515,0.90515,0.02392), vec3(0.290269,0.91465,0.022174), vec3(0.304213,0.92381,0.020584), vec3(0.318361,0.93255,0.019127), vec3(0.332705,0.94081,0.01774), vec3(0.347232,0.94852,0.016403), vec3(0.361926,0.9556,0.015064), vec3(0.376772,0.961988,0.013676), vec3(0.391683,0.96754,0.012308), vec3(0.406594,0.97223,0.011056), vec3(0.421539,0.97617,0.009915), vec3(0.436517,0.97946,0.008872), vec3(0.451584,0.9822,0.007918), vec3(0.466782,0.98452,0.00703), vec3(0.482147,0.98652,0.006223), vec3(0.497738,0.98832,0.005453), vec3(0.513606,0.99002,0.004714), vec3(0.529826,0.991761,0.003988), vec3(0.54644,0.99353,0.003289), vec3(0.563426,0.99523,0.002646), vec3(0.580726,0.99677,0.002063), vec3(0.59829,0.99809,0.001533), vec3(0.616053,0.99911,0.001091), vec3(0.633948,0.99977,0.000711), vec3(0.651901,1.0,0.000407), vec3(0.669824,0.99971,0.000184), vec3(0.687632,0.99885,4.7e-05), vec3(0.705224,0.99734,0.0), vec3(0.722773,0.99526,0.0), vec3(0.740483,0.99274,0.0), vec3(0.758273,0.98975,0.0), vec3(0.776083,0.9863,0.0), vec3(0.793832,0.98238,0.0), vec3(0.811436,0.97798,0.0), vec3(0.828822,0.97311,0.0), vec3(0.845879,0.96774,0.0), vec3(0.862525,0.96189,0.0), vec3(0.878655,0.955552,0.0), vec3(0.894208,0.948601,0.0), vec3(0.909206,0.940981,0.0), vec3(0.923672,0.932798,0.0), vec3(0.937638,0.924158,0.0), vec3(0.951162,0.915175,0.0), vec3(0.964283,0.905954,0.0), vec3(0.977068,0.896608,0.0), vec3(0.98959,0.887249,0.0), vec3(1.00191,0.877986,0.0), vec3(1.01416,0.868934,0.0), vec3(1.0265,0.860164,0.0), vec3(1.0388,0.851519,0.0), vec3(1.051,0.842963,0.0), vec3(1.0629,0.834393,0.0), vec3(1.0743,0.825623,0.0), vec3(1.0852,0.816764,0.0), vec3(1.0952,0.807544,0.0), vec3(1.1042,0.797947,0.0), vec3(1.112,0.787893,0.0), vec3(1.11852,0.777405,0.0), vec3(1.1238,0.76649,0.0), vec3(1.128,0.755309,0.0), vec3(1.1311,0.743845,0.0), vec3(1.1332,0.73219,0.0), vec3(1.1343,0.720353,0.0), vec3(1.1343,0.708281,0.0), vec3(1.1333,0.696055,0.0), vec3(1.1312,0.683621,0.0), vec3(1.1281,0.671048,0.0), vec3(1.12399,0.658341,0.0), vec3(1.1189,0.645545,0.0), vec3(1.1129,0.632718,0.0), vec3(1.1059,0.619815,0.0), vec3(1.098,0.606887,0.0), vec3(1.0891,0.593878,0.0), vec3(1.0792,0.580781,0.0), vec3(1.0684,0.567653,0.0), vec3(1.0567,0.55449,0.0), vec3(1.044,0.541228,0.0), vec3(1.03048,0.527963,0.0), vec3(1.016,0.514634,0.0), vec3(1.0008,0.501363,0.0), vec3(0.98479,0.488124,0.0), vec3(0.96808,0.474935,0.0), vec3(0.95074,0.461834,0.0), vec3(0.9328,0.448823,0.0), vec3(0.91434,0.435917,0.0), vec3(0.89539,0.423153,0.0), vec3(0.87603,0.410526,0.0), vec3(0.856297,0.398057,0.0), vec3(0.83635,0.385835,0.0), vec3(0.81629,0.373951,0.0), vec3(0.79605,0.362311,0.0), vec3(0.77561,0.350863,0.0), vec3(0.75493,0.339554,0.0), vec3(0.73399,0.328309,0.0), vec3(0.71278,0.317118,0.0), vec3(0.69129,0.305936,0.0), vec3(0.66952,0.294737,0.0), vec3(0.647467,0.283493,0.0), vec3(0.62511,0.272222,0.0), vec3(0.60252,0.26099,0.0), vec3(0.57989,0.249877,0.0), vec3(0.55737,0.238946,0.0), vec3(0.53511,0.228254,0.0), vec3(0.51324,0.217853,0.0), vec3(0.49186,0.20778,0.0), vec3(0.47108,0.198072,0.0), vec3(0.45096,0.188748,0.0), vec3(0.431567,0.179828,0.0), vec3(0.41287,0.171285,0.0), vec3(0.39475,0.163059,0.0), vec3(0.37721,0.155151,0.0), vec3(0.36019,0.147535,0.0), vec3(0.34369,0.140211,0.0), vec3(0.32769,0.13317,0.0), vec3(0.31217,0.1264,0.0), vec3(0.29711,0.119892,0.0), vec3(0.2825,0.11364,0.0), vec3(0.268329,0.107633,0.0), vec3(0.25459,0.10187,0.0), vec3(0.2413,0.096347,0.0), vec3(0.22848,0.091063,0.0), vec3(0.21614,0.08601,0.0), vec3(0.2043,0.081187,0.0), vec3(0.19295,0.076583,0.0), vec3(0.18211,0.072198,0.0), vec3(0.17177,0.068024,0.0), vec3(0.16192,0.064052,0.0), vec3(0.152568,0.060281,0.0), vec3(0.14367,0.056697,0.0), vec3(0.1352,0.053292,0.0), vec3(0.12713,0.050059,0.0), vec3(0.11948,0.046998,0.0), vec3(0.11221,0.044096,0.0), vec3(0.10531,0.041345,0.0), vec3(0.098786,0.0387507,0.0), vec3(0.09261,0.0362978,0.0), vec3(0.086773,0.0339832,0.0), vec3(0.0812606,0.0318004,0.0), vec3(0.076048,0.0297395,0.0), vec3(0.071114,0.0277918,0.0), vec3(0.066454,0.0259551,0.0), vec3(0.062062,0.0242263,0.0), vec3(0.05793,0.0226017,0.0), vec3(0.05405,0.0210779,0.0), vec3(0.050412,0.0196505,0.0), vec3(0.047006,0.0183153,0.0), vec3(0.043823,0.0170686,0.0), vec3(0.0408508,0.0159051,0.0), vec3(0.038072,0.0148183,0.0), vec3(0.035468,0.0138008,0.0), vec3(0.033031,0.0128495,0.0), vec3(0.030753,0.0119607,0.0), vec3(0.028623,0.0111303,0.0), vec3(0.026635,0.0103555,0.0), vec3(0.024781,0.0096332,0.0), vec3(0.023052,0.0089599,0.0), vec3(0.021441,0.0083324,0.0), vec3(0.0199413,0.0077488,0.0), vec3(0.018544,0.0072046,0.0), vec3(0.017241,0.0066975,0.0), vec3(0.016027,0.0062251,0.0), vec3(0.014896,0.005785,0.0), vec3(0.013842,0.0053751,0.0), vec3(0.012862,0.0049941,0.0), vec3(0.011949,0.0046392,0.0), vec3(0.0111,0.0043093,0.0), vec3(0.010311,0.0040028,0.0), vec3(0.00957688,0.00371774,0.0), vec3(0.008894,0.00345262,0.0), vec3(0.0082581,0.00320583,0.0), vec3(0.0076664,0.00297623,0.0), vec3(0.0071163,0.00276281,0.0), vec3(0.0066052,0.00256456,0.0), vec3(0.0061306,0.00238048,0.0), vec3(0.0056903,0.00220971,0.0), vec3(0.0052819,0.00205132,0.0), vec3(0.0049033,0.00190449,0.0), vec3(0.00455263,0.00176847,0.0), vec3(0.0042275,0.00164236,0.0), vec3(0.0039258,0.00152535,0.0), vec3(0.0036457,0.00141672,0.0), vec3(0.0033859,0.00131595,0.0), vec3(0.0031447,0.00122239,0.0), vec3(0.0029208,0.00113555,0.0), vec3(0.002713,0.00105494,0.0), vec3(0.0025202,0.00098014,0.0), vec3(0.0023411,0.00091066,0.0));\n// CIE 2006 2 degrees\nconst vec3 xyz_bar[WL_SAMPLES] = vec3[](vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.003769647,0.0004146161,0.0184726), vec3(0.004532416,0.0005028333,0.02221101), vec3(0.005446553,0.0006084991,0.02669819), vec3(0.006538868,0.0007344436,0.03206937), vec3(0.007839699,0.0008837389,0.03847832), vec3(0.009382967,0.001059646,0.04609784), vec3(0.01120608,0.001265532,0.05511953), vec3(0.01334965,0.001504753,0.06575257), vec3(0.0158569,0.001780493,0.07822113), vec3(0.01877286,0.002095572,0.09276013), vec3(0.02214302,0.002452194,0.109609), vec3(0.02601285,0.002852216,0.1290077), vec3(0.03043036,0.003299115,0.1512047), vec3(0.03544325,0.003797466,0.1764441), vec3(0.0410964,0.004352768,0.2049517), vec3(0.04742986,0.004971717,0.2369246), vec3(0.05447394,0.005661014,0.2725123), vec3(0.06223612,0.006421615,0.311782), vec3(0.07070048,0.007250312,0.3547064), vec3(0.07982513,0.008140173,0.4011473), vec3(0.08953803,0.00907986,0.4508369), vec3(0.09974848,0.01005608,0.5034164), vec3(0.1104019,0.01106456,0.5586361), vec3(0.1214566,0.01210522,0.6162734), vec3(0.1328741,0.01318014,0.6760982), vec3(0.1446214,0.01429377,0.7378822), vec3(0.1566468,0.01545004,0.8013019), vec3(0.1687901,0.01664093,0.8655573), vec3(0.1808328,0.01785302,0.9295791), vec3(0.1925216,0.01907018,0.9921293), vec3(0.2035729,0.02027369,1.051821), vec3(0.2137531,0.02144805,1.107509), vec3(0.2231348,0.02260041,1.159527), vec3(0.2319245,0.02374789,1.208869), vec3(0.2403892,0.02491247,1.256834), vec3(0.2488523,0.02612106,1.305008), vec3(0.2575896,0.02739923,1.354758), vec3(0.2664991,0.02874993,1.405594), vec3(0.2753532,0.03016909,1.456414), vec3(0.2838921,0.03165145,1.50596), vec3(0.2918246,0.03319038,1.552826), vec3(0.29892,0.03477912,1.595902), vec3(0.3052993,0.03641495,1.635768), vec3(0.3112031,0.03809569,1.673573), vec3(0.3169047,0.03981843,1.710604), vec3(0.3227087,0.0415794,1.74828), vec3(0.3288194,0.04337098,1.787504), vec3(0.3349242,0.0451718,1.826609), vec3(0.3405452,0.0469542,1.863108), vec3(0.3451688,0.04868718,1.894332), vec3(0.3482554,0.05033657,1.917479), vec3(0.3494153,0.05187611,1.930529), vec3(0.3489075,0.05332218,1.934819), vec3(0.3471746,0.05470603,1.93265), vec3(0.3446705,0.05606335,1.926395), vec3(0.3418483,0.05743393,1.918437), vec3(0.339024,0.05885107,1.91043), vec3(0.3359926,0.06030809,1.901224), vec3(0.3324276,0.06178644,1.889), vec3(0.3280157,0.0632657,1.871996), vec3(0.3224637,0.06472352,1.848545), vec3(0.3156225,0.06614749,1.817792), vec3(0.3078201,0.06757256,1.781627), vec3(0.2994771,0.06904928,1.742514), vec3(0.2909776,0.0706328,1.702749), vec3(0.2826646,0.07238339,1.664439), vec3(0.2747962,0.0743596,1.629207), vec3(0.2674312,0.07659383,1.59736), vec3(0.2605847,0.07911436,1.568896), vec3(0.2542749,0.08195345,1.543823), vec3(0.2485254,0.08514816,1.522157), vec3(0.2433039,0.08872657,1.503611), vec3(0.2383414,0.09266008,1.486673), vec3(0.2333253,0.09689723,1.469595), vec3(0.2279619,0.1013746,1.450709), vec3(0.2219781,0.1060145,1.42844), vec3(0.2151735,0.1107377,1.401587), vec3(0.2075619,0.1155111,1.370094), vec3(0.1992183,0.1203122,1.33422), vec3(0.190229,0.1251161,1.294275), vec3(0.1806905,0.1298957,1.25061), vec3(0.1707154,0.1346299,1.203696), vec3(0.1604471,0.1393309,1.154316), vec3(0.1500244,0.1440235,1.103284), vec3(0.1395705,0.1487372,1.051347), vec3(0.129192,0.1535066,0.9991789), vec3(0.1189859,0.1583644,0.9473958), vec3(0.1090615,0.1633199,0.8966222), vec3(0.09951424,0.1683761,0.8473981), vec3(0.0904185,0.1735365,0.8001576), vec3(0.08182895,0.1788048,0.7552379), vec3(0.07376817,0.1841819,0.7127879), vec3(0.06619477,0.1896559,0.6725198), vec3(0.0590638,0.1952101,0.6340976), vec3(0.05234242,0.2008259,0.5972433), vec3(0.04600865,0.2064828,0.5617313), vec3(0.04006154,0.2121826,0.5274921), vec3(0.03454373,0.2180279,0.4948809), vec3(0.02949091,0.2241586,0.4642586), vec3(0.0249214,0.2307302,0.4358841), vec3(0.02083981,0.237916,0.4099313), vec3(0.01723591,0.2458706,0.3864261), vec3(0.01407924,0.2546023,0.3650566), vec3(0.01134516,0.264076,0.3454812), vec3(0.009019658,0.274249,0.3274095), vec3(0.007097731,0.285068,0.3105939), vec3(0.005571145,0.2964837,0.2948102), vec3(0.004394566,0.308501,0.2798194), vec3(0.003516303,0.3211393,0.26541), vec3(0.002887638,0.3344175,0.2514084), vec3(0.002461588,0.3483536,0.2376753), vec3(0.002206348,0.3629601,0.2241211), vec3(0.002149559,0.3782275,0.2107484), vec3(0.002337091,0.3941359,0.1975839), vec3(0.002818931,0.4106582,0.1846574), vec3(0.003649178,0.4277595,0.1720018), vec3(0.004891359,0.4453993,0.1596918), vec3(0.006629364,0.4635396,0.1479415), vec3(0.008942902,0.4821376,0.1369428), vec3(0.01190224,0.501143,0.1268279), vec3(0.01556989,0.5204972,0.1176796), vec3(0.01997668,0.5401387,0.109497), vec3(0.02504698,0.5600208,0.1020943), vec3(0.0306753,0.5800972,0.09527993), vec3(0.03674999,0.6003172,0.08890075), vec3(0.04315171,0.6206256,0.08283548), vec3(0.04978584,0.6409398,0.07700982), vec3(0.05668554,0.6610772,0.07144001), vec3(0.06391651,0.6808134,0.06615436), vec3(0.07154352,0.6999044,0.06117199), vec3(0.07962917,0.718089,0.05650407), vec3(0.08821473,0.7351593,0.05215121), vec3(0.09726978,0.7511821,0.04809566), vec3(0.1067504,0.7663143,0.0443172), vec3(0.1166192,0.7807352,0.04079734), vec3(0.1268468,0.7946448,0.03751912), vec3(0.137406,0.8082074,0.03446846), vec3(0.1482471,0.8213817,0.03163764), vec3(0.1593076,0.8340701,0.02901901), vec3(0.1705181,0.8461711,0.02660364), vec3(0.1818026,0.8575799,0.02438164), vec3(0.193109,0.8682408,0.02234097), vec3(0.2045085,0.8783061,0.02046415), vec3(0.2161166,0.8879907,0.01873456), vec3(0.228065,0.8975211,0.01713788), vec3(0.2405015,0.9071347,0.01566174), vec3(0.2535441,0.9169947,0.01429644), vec3(0.26713,0.9269295,0.01303702), vec3(0.2811351,0.9366731,0.01187897), vec3(0.2954164,0.9459482,0.01081725), vec3(0.3098117,0.9544675,0.00984647), vec3(0.3241678,0.9619834,0.008960687), vec3(0.3384319,0.968439,0.008152811), vec3(0.3525786,0.9738289,0.007416025), vec3(0.3665839,0.9781519,0.006744115), vec3(0.3804244,0.9814106,0.006131421), vec3(0.3940988,0.9836669,0.005572778), vec3(0.4076972,0.9852081,0.005063463), vec3(0.4213484,0.9863813,0.004599169), vec3(0.4352003,0.9875357,0.004175971), vec3(0.4494206,0.9890228,0.003790291), vec3(0.4641616,0.9910811,0.003438952), vec3(0.4794395,0.9934913,0.003119341), vec3(0.495218,0.9959172,0.002829038), vec3(0.5114395,0.9980205,0.002565722), vec3(0.5280233,0.9994608,0.002327186), vec3(0.5448696,0.999993,0.00211128), vec3(0.5618898,0.9997557,0.001915766), vec3(0.5790137,0.9989839,0.001738589), vec3(0.5961882,0.9979123,0.00157792), vec3(0.6133784,0.9967737,0.001432128), vec3(0.6305897,0.9957356,0.001299781), vec3(0.6479223,0.9947115,0.001179667), vec3(0.6654866,0.9935534,0.001070694), vec3(0.6833782,0.9921156,0.0009718623), vec3(0.7016774,0.9902549,0.0008822531), vec3(0.720411,0.9878596,0.0008010231), vec3(0.7394495,0.9849324,0.0007273884), vec3(0.7586285,0.9815036,0.0006606347), vec3(0.7777885,0.9776035,0.0006001146), vec3(0.796775,0.9732611,0.0005452416), vec3(0.815453,0.9684764,0.0004954847), vec3(0.8337389,0.9631369,0.0004503642), vec3(0.8515493,0.9571062,0.0004094455), vec3(0.8687862,0.950254,0.0003723345), vec3(0.8853376,0.9424569,0.0003386739), vec3(0.9011588,0.9336897,0.0003081396), vec3(0.9165278,0.9242893,0.000280437), vec3(0.9318245,0.9146707,0.0002552996), vec3(0.9474524,0.9052333,0.0002324859), vec3(0.9638388,0.8963613,0.0002117772), vec3(0.9812596,0.8883069,0.0001929758), vec3(0.9992953,0.8808462,0.0001759024), vec3(1.017343,0.8736445,0.0001603947), vec3(1.03479,0.8663755,0.0001463059), vec3(1.051011,0.8587203,0.0001335031), vec3(1.065522,0.8504295,0.000121866), vec3(1.078421,0.8415047,0.0001112857), vec3(1.089944,0.8320109,0.0001016634), vec3(1.10032,0.8220154,9.291003e-05), vec3(1.109767,0.8115868,8.494468e-05), vec3(1.118438,0.8007874,7.769425e-05), vec3(1.126266,0.7896515,7.109247e-05), vec3(1.133138,0.7782053,6.507936e-05), vec3(1.138952,0.7664733,5.960061e-05), vec3(1.14362,0.7544785,5.460706e-05), vec3(1.147095,0.7422473,5.005417e-05), vec3(1.149464,0.7298229,4.590157e-05), vec3(1.150838,0.7172525,4.211268e-05), vec3(1.151326,0.7045818,3.865437e-05), vec3(1.151033,0.6918553,3.549661e-05), vec3(1.150002,0.6791009,3.26122e-05), vec3(1.148061,0.6662846,2.997643e-05), vec3(1.144998,0.6533595,2.756693e-05), vec3(1.140622,0.6402807,2.536339e-05), vec3(1.134757,0.6270066,2.334738e-05), vec3(1.127298,0.6135148,2.150221e-05), vec3(1.118342,0.5998494,1.981268e-05), vec3(1.108033,0.5860682,1.8265e-05), vec3(1.096515,0.5722261,1.684667e-05), vec3(1.083928,0.5583746,1.554631e-05), vec3(1.070387,0.5445535,1.43536e-05), vec3(1.055934,0.5307673,1.325915e-05), vec3(1.040592,0.517013,1.225443e-05), vec3(1.024385,0.5032889,1.133169e-05), vec3(1.007344,0.489595,1.048387e-05), vec3(0.9895268,0.4759442,0.0), vec3(0.9711213,0.4623958,0.0), vec3(0.9523257,0.4490154,0.0), vec3(0.9333248,0.4358622,0.0), vec3(0.9142877,0.4229897,0.0), vec3(0.8952798,0.4104152,0.0), vec3(0.8760157,0.3980356,0.0), vec3(0.8561607,0.38573,0.0), vec3(0.8354235,0.3733907,0.0), vec3(0.8135565,0.3609245,0.0), vec3(0.7904565,0.348286,0.0), vec3(0.7664364,0.3355702,0.0), vec3(0.7418777,0.3228963,0.0), vec3(0.7171219,0.3103704,0.0), vec3(0.6924717,0.2980865,0.0), vec3(0.66816,0.286116,0.0), vec3(0.6442697,0.2744822,0.0), vec3(0.620845,0.2631953,0.0), vec3(0.5979243,0.2522628,0.0), vec3(0.575541,0.2416902,0.0), vec3(0.5537296,0.2314809,0.0), vec3(0.5325412,0.2216378,0.0), vec3(0.5120218,0.2121622,0.0), vec3(0.492207,0.2030542,0.0), vec3(0.4731224,0.1943124,0.0), vec3(0.4547417,0.1859227,0.0), vec3(0.4368719,0.1778274,0.0), vec3(0.4193121,0.1699654,0.0), vec3(0.401898,0.1622841,0.0), vec3(0.3844986,0.1547397,0.0), vec3(0.3670592,0.1473081,0.0), vec3(0.3497167,0.1400169,0.0), vec3(0.3326305,0.1329013,0.0), vec3(0.3159341,0.1259913,0.0), vec3(0.2997374,0.119312,0.0), vec3(0.2841189,0.112882,0.0), vec3(0.2691053,0.1067113,0.0), vec3(0.2547077,0.1008052,0.0), vec3(0.2409319,0.09516653,0.0), vec3(0.2277792,0.08979594,0.0), vec3(0.2152431,0.08469044,0.0), vec3(0.203301,0.07984009,0.0), vec3(0.1919276,0.07523372,0.0), vec3(0.1810987,0.07086061,0.0), vec3(0.1707914,0.06671045,0.0), vec3(0.1609842,0.0627736,0.0), vec3(0.1516577,0.05904179,0.0), vec3(0.1427936,0.05550703,0.0), vec3(0.1343737,0.05216139,0.0), vec3(0.1263808,0.04899699,0.0), vec3(0.1187979,0.04600578,0.0), vec3(0.1116088,0.04317885,0.0), vec3(0.1047975,0.04050755,0.0), vec3(0.09834835,0.03798376,0.0), vec3(0.09224597,0.03559982,0.0), vec3(0.08647506,0.03334856,0.0), vec3(0.08101986,0.03122332,0.0), vec3(0.07586514,0.0292178,0.0), vec3(0.07099633,0.02732601,0.0), vec3(0.0663996,0.02554223,0.0), vec3(0.06206225,0.02386121,0.0), vec3(0.05797409,0.02227859,0.0), vec3(0.05412533,0.0207902,0.0), vec3(0.050506,0.01939185,0.0), vec3(0.04710606,0.01807939,0.0), vec3(0.04391411,0.01684817,0.0), vec3(0.04091411,0.01569188,0.0), vec3(0.03809067,0.01460446,0.0), vec3(0.03543034,0.01358062,0.0), vec3(0.03292138,0.01261573,0.0), vec3(0.03055672,0.01170696,0.0), vec3(0.02834146,0.01085608,0.0), vec3(0.02628033,0.01006476,0.0), vec3(0.02437465,0.009333376,0.0), vec3(0.02262306,0.008661284,0.0), vec3(0.02101935,0.008046048,0.0), vec3(0.01954647,0.00748113,0.0), vec3(0.01818727,0.006959987,0.0), vec3(0.01692727,0.00647707,0.0), vec3(0.01575417,0.006027677,0.0), vec3(0.01465854,0.005608169,0.0), vec3(0.01363571,0.005216691,0.0), vec3(0.01268205,0.004851785,0.0), vec3(0.01179394,0.004512008,0.0), vec3(0.01096778,0.004195941,0.0), vec3(0.01019964,0.003902057,0.0), vec3(0.009484317,0.003628371,0.0), vec3(0.008816851,0.003373005,0.0), vec3(0.008192921,0.003134315,0.0), vec3(0.00760875,0.002910864,0.0), vec3(0.007061391,0.002701528,0.0), vec3(0.006549509,0.002505796,0.0), vec3(0.00607197,0.002323231,0.0), vec3(0.005627476,0.002153333,0.0), vec3(0.005214608,0.001995557,0.0), vec3(0.004831848,0.001849316,0.0), vec3(0.004477579,0.001713976,0.0), vec3(0.004150166,0.001588899,0.0), vec3(0.003847988,0.001473453,0.0), vec3(0.003569452,0.001367022,0.0), vec3(0.003312857,0.001268954,0.0), vec3(0.003076022,0.001178421,0.0), vec3(0.002856894,0.001094644,0.0), vec3(0.002653681,0.001016943,0.0));\n\n\nint wavelength_to_idx(in float wavelength) {\n    return int(wavelength - WL_START);\n}\n\n/////////////////////////////////////////////////\n// Sampling\n/////////////////////////////////////////////////\n\n// 2017 Inigo Quilez\n\n// Based on https://www.shadertoy.com/view/4tfyW4, but simpler and faster\n//\n// See these too: \n//\n// - https://www.shadertoy.com/view/llGSzw\n// - https://www.shadertoy.com/view/XlXcW4\n// - https://www.shadertoy.com/view/4tXyWN\n//\n// Not testes for uniformity, stratification, periodicity or whatever. Use (or not!) at your own risk\nstruct seed_t {\n    uvec3 v;\n};\n\nconst uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 20170906U;    // Today's date (use three days ago's dateif you want a prime)\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 get_next_rnd(inout seed_t x )\n{\n    x.v = ((x.v>>8U)^x.v.yzx)*k;\n    x.v = ((x.v>>8U)^x.v.yzx)*k;\n    x.v = ((x.v>>8U)^x.v.yzx)*k;\n    \n    return vec3(x.v)*(1.0/float(0xffffffffU));\n}\n\n//\n// By reinder:\n// https://www.shadertoy.com/view/XlGcWD\n//\n\nvec3 random_cos_weighted_hemisphere_direction( const vec3 n, inout seed_t seed ) {\n    vec2 r = get_next_rnd(seed).xy;\n    vec3  uu = normalize(cross(n, abs(n.y) > .5 ? vec3(1.,0.,0.) : vec3(0.,1.,0.)));\n    vec3  vv = cross(uu, n);\n    float ra = sqrt(r.y);\n    float rx = ra*cos(6.28318530718*r.x); \n    float ry = ra*sin(6.28318530718*r.x);\n    float rz = sqrt(1.-r.y);\n    vec3  rr = vec3(rx*uu + ry*vv + rz*n);\n    return normalize(rr);\n}\n\nstruct ray {\n    vec3 origin;\n    vec3 direction;\n    float wavelength;\n    float ior;\n};\n\nstruct hit_rec {\n    vec3 position;\n    vec3 normal;\n    float dist;\n    int mat_type;\n};\n\n/////////////////////////////////////////////////\n// Fresnel\n/////////////////////////////////////////////////\nfloat fresnel(in float cos_theta, in float ior) {\n\t#ifdef SCHLICK\n    \n    float s1 = (ior - 1.0);\n    float s2 = (ior + 1.0);\n    float f0 = s1*s1/(s2*s2);\n    return f0 + (1.0 - f0)*pow(1.0 - cos_theta, 5.0);\n\n    #else\n\n    float g = sqrt(ior*ior + cos_theta*cos_theta - 1.0);\n    float g_sub_c = g - cos_theta;\n    float g_add_c = g + cos_theta;\n    float d1 = (cos_theta*g_add_c - 1.0);\n    float d2 = (cos_theta*g_sub_c + 1.0);\n\n    return 0.5 * ((g_sub_c*g_sub_c)/(g_add_c*g_add_c)) *\n        (1.0 + (d1*d1)/(d2*d2));\n\n    #endif\n}\n\n/////////////////////////////////////////////////\n// Materials\n/////////////////////////////////////////////////\nfloat perfect_mirror(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    r_out.direction = normalize(reflect(r_in.direction, rec.normal));\n    r_out.origin = rec.position + T_MIN*r_out.direction;\n    r_out.wavelength = r_in.wavelength;\n    r_out.ior = r_in.ior;\n\n    return 1.0;\n}\n\nfloat mirror(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    float f = fresnel(dot(-r_in.direction, rec.normal), 8.8);\n\n    perfect_mirror(r_in, rec, r_out, seed);\n\n    return f;\n}\n\nfloat cauchy_ior(in float lambda_nm) {\n    float lambda_mum = lambda_nm*1e-3;\n    \n    // https://en.wikipedia.org/wiki/Cauchy%27s_equation\n    \n    // Real glasses\n    \n    // Fused silica\n    //return 1.4580 + 0.00354 / (lambda_mum*lambda_mum);\n    // Borosilicate glass BK7\n    //return 1.5046 + 0.00420 / (lambda_mum*lambda_mum);\n    // Hard crown glass K5\n    //return 1.5220 + 0.00459  / (lambda_mum*lambda_mum);\n    // Barium crown glass BaK4\n    //return 1.5690 + 0.00531  / (lambda_mum*lambda_mum);\n    // Barium flint glass BaF10\n    //return 1.6700 + 0.00743  / (lambda_mum*lambda_mum);\n    // Dense flint glass SF10\n    return 1.7280 + 0.01342 / (lambda_mum*lambda_mum);\n    \n    // Fake\n    \n    //return 1.4 + 0.06342 / (lambda_mum*lambda_mum);\n}\n\nfloat glass(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    // Check if going in or out\n    vec3 n;\n\tfloat eta;\n    float ior = cauchy_ior(r_in.wavelength);\n    float cosine;\n    \n    if (dot(rec.normal, r_in.direction) > 0.0) {\n        // in -> out\n        n = -rec.normal;\n        eta = ior/ENV_IOR;\n        r_out.ior = ENV_IOR;\n\n        cosine = ior * dot(r_in.direction, rec.normal);\n    } else {\n        // out -> in\n        n = rec.normal;\n        eta = ENV_IOR/ior;\n        r_out.ior = ior;\n\n        cosine = -dot(r_in.direction, rec.normal);\n    }\n\n    vec3 refracted = refract(r_in.direction, n, eta);\n    float d = length(refracted);\n    //float d = 1.0 - eta*eta*(1.0-cosine*cosine);\n    \n    if (d > 0.0) { \n        // Check if transmitted or reflected\n        float f = fresnel(cosine, ior);\n\n        float rnd = get_next_rnd(seed).x;\n        if (rnd < f) {\n            return perfect_mirror(r_in, rec, r_out, seed);\n        }\n\n        r_out.direction = normalize(refracted);\n        r_out.origin = rec.position + T_MIN*r_out.direction;\n        r_out.wavelength = r_in.wavelength;\n        return 1.0;\n    } \n    \n    return perfect_mirror(r_in, rec, r_out, seed);\n}\n\nvoid generic_diffuse(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    r_out.direction = random_cos_weighted_hemisphere_direction(rec.normal, seed);\n    r_out.origin = rec.position + T_MIN * r_out.direction;\n    r_out.wavelength = r_in.wavelength;\n    r_out.ior = r_in.ior;\n}\n\nfloat diffuse_white(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    generic_diffuse(r_in, rec, r_out, seed);\n\n    int wl_idx = wavelength_to_idx(r_out.wavelength);\n\n    return 1.0;\n}\n\nfloat absorber(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    generic_diffuse(r_in, rec, r_out, seed);\n\n    int wl_idx = wavelength_to_idx(r_out.wavelength);\n\n    return 0.0;\n}\n\nfloat emissive(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    int wl_idx = wavelength_to_idx(r_in.wavelength);\n\n    return 0.02*d65[wl_idx];\n}\n\nfloat emissive_p(in ray r_in, in hit_rec rec, out ray r_out, inout seed_t seed) {\n    int wl_idx = wavelength_to_idx(r_in.wavelength);\n\n    return 30.0*d65[wl_idx];\n}\n\n/////////////////////////////////////////////////\n// Objects\n/////////////////////////////////////////////////\n\nstruct triangle {\n    vec3 a, b, c;\n    int mat_type;\n};\n\n#define EPS 1e-5\nvoid hit_triangle(in triangle t, in ray r, out hit_rec rec) {\n    vec3 e1 = t.b - t.a;\n    vec3 e2 = t.c - t.a;\n    vec3 q = cross(r.direction, e2);\n    float a = dot(e1, q);\n\n    // No hit found so far\n    rec.dist = -1.0;\n\n    if (a > -EPS && a < EPS) {\n        return;\n    }\n\n    float f = 1. / a;\n    vec3 s = r.origin - t.a;\n    float u = f * dot(s, q);\n\n    if (u < 0. || u > 1.) {\n        return;\n    }\n\n    vec3 rt = cross(s, e1);\n    float v = f * dot(r.direction, rt);\n\n    if (v < 0.0 || (u + v) > 1.0) {\n        return;\n    }\n\n    // Hit found\n    rec.dist     = f * dot(e2, rt);\n    rec.position = r.origin + rec.dist*r.direction;\n    rec.normal   = normalize(cross(e1, e2));\n    rec.mat_type = t.mat_type;\n}\n\n#define PI_2 (2.0*3.14)\n\n#define QUAD(_a, _b, _c, _d, _mat) \\\n    triangle((_b), (_a),  (_c), (_mat)), \\\n    triangle((_d), (_c), (_a), (_mat))\n        \n#define EQ_TRI(_c, _r, _mat) \\\n    triangle( \\\n        (_c) + (_r)*vec3(sin(PI_2 + PRISM_ROT), 0.0, cos(PI_2 + PRISM_ROT)), \\\n        (_c) + (_r)*vec3(sin(1.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(1.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_c) + (_r)*vec3(sin(2.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(2.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_mat))\n        \n#define EQ_TRI_2(_c, _r, _mat) \\\n    triangle( \\\n        (_c) + (_r)*vec3(sin(1.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(1.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_c) + (_r)*vec3(sin(PI_2 + PRISM_ROT), 0.0, cos(PI_2 + PRISM_ROT)), \\\n        (_c) + (_r)*vec3(sin(2.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(2.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_mat))\n            \n#define F_PRISM(_c, _r, _h, _mat) \\\n    QUAD( \\\n        (_c) + (_r)*vec3(sin(PI_2 + PRISM_ROT), 0.0, cos(PI_2 + PRISM_ROT)), \\\n        (_c) + (_r)*vec3(sin(PI_2 + PRISM_ROT), 0.0, cos(PI_2 + PRISM_ROT)) + vec3(0.0, _h, 0.0), \\\n        (_c) + (_r)*vec3(sin(1.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(1.0/3.0*PI_2 + PRISM_ROT)) + vec3(0.0, _h, 0.0), \\\n        (_c) + (_r)*vec3(sin(1.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(1.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_mat))\n            \n#define B_PRISM(_c, _r, _h, _mat) \\\n    QUAD( \\\n        (_c) + (_r)*vec3(sin(1.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(1.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_c) + (_r)*vec3(sin(1.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(1.0/3.0*PI_2 + PRISM_ROT)) + vec3(0.0, _h, 0.0), \\\n        (_c) + (_r)*vec3(sin(2.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(2.0/3.0*PI_2 + PRISM_ROT)) + vec3(0.0, _h, 0.0), \\\n        (_c) + (_r)*vec3(sin(2.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(2.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_mat))\n            \n#define L_PRISM(_c, _r, _h, _mat) \\\n    QUAD( \\\n        (_c) + (_r)*vec3(sin(2.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(2.0/3.0*PI_2 + PRISM_ROT)), \\\n        (_c) + (_r)*vec3(sin(2.0/3.0*PI_2 + PRISM_ROT), 0.0, cos(2.0/3.0*PI_2 + PRISM_ROT)) + vec3(0.0, _h, 0.0), \\\n        (_c) + (_r)*vec3(sin(PI_2 + PRISM_ROT), 0.0, cos(PI_2 + PRISM_ROT)) + vec3(0.0, _h, 0.0), \\\n        (_c) + (_r)*vec3(sin(PI_2 + PRISM_ROT), 0.0, cos(PI_2 + PRISM_ROT)), \\\n        (_mat))\n            \n#define PRISM(_c, _r, _h, _mat) \\\n    EQ_TRI_2((_c), (_r), (_mat)), \\\n    EQ_TRI((_c) + vec3(0.0, (_h), 0.0), (_r), (_mat)), \\\n    F_PRISM((_c), (_r), (_h), (_mat)), \\\n    B_PRISM((_c), (_r), (_h), (_mat)), \\\n    L_PRISM((_c), (_r), (_h), (_mat))\n\t\t\t\nconst int n_triangles = 14;\nconst vec3 offset_light = vec3(150.0, 0.0, 0);\nconst float prism_h = 200.0;\nconst float light_w = 100.0;//100.0;\nconst float light_p = 330.0;\nconst float light_h = 200.0;\nconst float light_p2 = 500.0;\n\n\nconst float light2_d = 1200.0;// 1300.0;//2100.0;\nconst float light2_p = 200.0;\nconst float shade_l = 800.0;//300.0;\nconst float floor_d = 1000.0; // 559.2\nconst float floor_w = 10000.0;\n\nconst float prism_f = 0.0;\n\ntriangle[14] c_box = triangle[](\n    /* Light over\n    QUAD(\n        vec3(-500.0, 1000.0, -100.0),\n        vec3(-500.0, 1000.0,  100.0),\n        vec3( 500.0, 1000.0,  100.0),\n        vec3( 500.0, 1000.0, -100.0),\n        MAT_EMISSIVE),\n\t//*/\n    /*\n    QUAD(\n        vec3(light2_d + T_MIN, -T_MIN, light2_p),\n        vec3(light2_d + T_MIN,  120.0, light2_p),\n        vec3(light2_d + T_MIN,  120.0, light2_p + light_w),\n        vec3(light2_d + T_MIN, -T_MIN, light2_p + light_w),\n        MAT_ABSORBER),\n\t//*/\n    //* Light left\n    QUAD(\n        vec3(light2_d, prism_f          , light2_p),\n        vec3(light2_d, prism_f + light_h, light2_p),\n        vec3(light2_d, prism_f + light_h, light2_p + light_w),\n        vec3(light2_d, prism_f          , light2_p + light_w),\n        MAT_EMISSIVE_P),\n    //*/\n    /* Some absorber to canalise left light... /!\\ slow convergence\n    QUAD(\n        vec3(light2_d + 1.0    , -1.0  , light2_p - 2.0*T_MIN),\n        vec3(light2_d + 1.0    ,  120.0, light2_p - 2.0*T_MIN),\n        vec3(light2_d - shade_l,  120.0, light2_p - 2.0*T_MIN),\n        vec3(light2_d - shade_l, -1.0  , light2_p - 2.0*T_MIN),\n        MAT_ABSORBER),\n    \n    QUAD(\n        vec3(light2_d + 1.0    , -1.0  , light2_p + light_w + 2.0*T_MIN),\n        vec3(light2_d + 1.0    ,  120.0, light2_p + light_w + 2.0*T_MIN),\n        vec3(light2_d - shade_l,  120.0, light2_p + light_w + 2.0*T_MIN),\n        vec3(light2_d - shade_l, -1.0  , light2_p + light_w + 2.0*T_MIN),\n        MAT_ABSORBER),\n    //*/\n    //* Light Top\n    QUAD(\n        vec3(light_p2          , prism_f + 1.0    , floor_d),\n        vec3(light_p2          , prism_f + light_h, floor_d),\n        vec3(light_p2 + light_w, prism_f + light_h, floor_d),\n        vec3(light_p2 + light_w, prism_f + 1.0    , floor_d),\n        MAT_EMISSIVE_P),\n    //*/\n    \n        \n    // The prism :-)\n    PRISM(vec3(0.0, prism_f, 0.0), 250.0, prism_f + prism_h, MAT_GLASS),\n    \n    // Floor\n    QUAD(\n        vec3(-floor_w, 0.0,  floor_d),\n        vec3(-floor_w, 0.0, -floor_d),\n        vec3( floor_w, 0.0, -floor_d),\n        vec3( floor_w, 0.0,  floor_d),\n        MAT_DIFFUSE_W)\n\n);\n\nfloat hit(in ray r_in, out ray r_out, out bool stop, inout seed_t seed) {        \n    float d1 = -1.0, d2 = -1.0;\n\n    hit_rec rec;\n    hit_rec curr_rec;\n\n    stop = false;\n    rec.dist = -1.0;\n\n    for (int i = 0; i < n_triangles; i++) {\n        hit_triangle(c_box[i], r_in, curr_rec);\n        if (curr_rec.dist > 0. && (curr_rec.dist < rec.dist || rec.dist < 0.)) {\n            rec = curr_rec;\n        }  \n    }\n\n    if (rec.dist > 0.0) {\n        if (rec.mat_type == MAT_MIRROR) {\n            return mirror(r_in, rec, r_out, seed);\n        // Shamefull hack to avoid z fighting between the bottom of the prism\n        // and the ground\n        } else if (rec.mat_type == MAT_GLASS || r_in.ior > ENV_IOR) {\n            return glass(r_in, rec, r_out, seed);   \n        } else if (rec.mat_type == MAT_DIFFUSE_W) {\n            return diffuse_white(r_in, rec, r_out, seed); \n        } else if (rec.mat_type == MAT_EMISSIVE) {\n            stop = true;\n            return emissive(r_in, rec, r_out, seed);\n        } else if (rec.mat_type == MAT_EMISSIVE_P) {\n            stop = true;\n            return emissive_p(r_in, rec, r_out, seed);\n        } else if (rec.mat_type == MAT_ABSORBER) {\n            stop = true;\n            return absorber(r_in, rec, r_out, seed);\n        }\n    }\n\n    stop = true;\n    return 0.0;\n}\n\n/////////////////////////////////////////////////\n// Path tracing\n/////////////////////////////////////////////////\n\nfloat trace_ray(in ray r, inout seed_t seed) {   \n    float reflectance = 1.0;\n    bool stop = false;\n    r.ior = ENV_IOR;\n\n    for (int i = 0; i < 10; i++) {\n        reflectance *= hit(r, r, stop, seed);\n        if (stop) break;\n    }\n\n    if (stop) {\n        return reflectance;\n    } else {\n        return 0.0;\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This buffer keeps track of the screen resolution and adapts the number of samples\n// per frame depending on hardware performaces.\n// It enables Buffer B to invalidate previously computed samples in case the screen is\n// resized.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 prevParams = texture(iChannel0, uv);\n\n    // Ensure the buffer is first initialized with null \n    // parameters and checks for resolution changes   \n    if (iFrame == 0 || \n        abs(prevParams.x - iResolution.x) > 1.0 ||\n        abs(prevParams.y - iResolution.y) > 1.0) {        \n        fragColor = vec4(\n            iResolution.xy,\n            1.0,   \n            0.0);\n    } else {\n        fragColor = vec4(\n            iResolution.xy, \n            prevParams.z, \n            1.0);\n    }\n\n    // Adaptative samples per frame, updates each 10 frames\n    if (fragColor.w > 0.5 && iFrame%10 == 0) {\n        if (iFrameRate >= 30.0) {\n            fragColor.z = 2.0*prevParams.z;\n        } else if (iFrameRate <= 20.0) {\n            fragColor.z = prevParams.z/2.0;\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This buffer performs the path tracing and accumulation of samples\n\nstruct camera {\n  \tvec3 look_from;\n  \tvec3 look_at;\n    vec3 up;\n    float fov;\n    float aspect;\n};\n\nray get_ray(in camera c, in vec2 uv, in float wavelength) {\n\tfloat theta = c.fov * 3.14/180.0;\n    float h_height = tan(theta/2.0);\n    float h_width = c.aspect * h_height;\n    \n    vec3 w = normalize(c.look_from - c.look_at);\n    vec3 u = normalize(cross(c.up, w));\n    vec3 v = cross(w, u);\n    \n    vec3 ll = c.look_from - h_width*u - h_height*v - w;\n    vec3 horizontal = 2.0 * h_width*u;\n    vec3 vertical = 2.0 * h_height*v;\n    \n    return ray(\n        c.look_from, \n        normalize(ll + uv.x*horizontal + uv.y*vertical - c.look_from),\n        wavelength,\n        ENV_IOR\n    );\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 prevParams = texelFetch(iChannel1, ivec2(fragCoord.xy), 0);\n    \n    // Get the number of samples per frame determined in Buffer A\n    // cap it too avoid crazy bugs\n    int samples_per_frame = int(clamp(prevParams.z, 1.0, 128.0));\n    \n    // Initialize the seed for random generation    \n    seed_t seed = seed_t(uvec3(fragCoord, iFrame));\n    \n    vec3 col_xyz = vec3(0.0);\n    \n    for (int i = 0; i < samples_per_frame; i++) {\n        // Offset uv for anti-aliasing\n        vec2 offset = get_next_rnd(seed).xy;\n        vec2 uv = (fragCoord + offset)/iResolution.xy;\n\n        // Sample a wavelength\n        float wavelength = WL_START + get_next_rnd(seed).x * float(WL_SAMPLES);\n\n        // Create camera and get a ray\n        camera cam = camera(\n            vec3(-600.0,  800.0, -500.0),\n            vec3(-600.0, -800.0,  0.0), \n            vec3(0.0, 0.0, 1.0), \n            80.3076,\n            iResolution.x/iResolution.y\n        );\n\n        ray r = get_ray(cam, uv, wavelength);\n\n        // Ray-tracing\n        float col = trace_ray(r, seed);\n\n        int wl_idx = wavelength_to_idx(r.wavelength);\n        col_xyz += xyz_bar[wl_idx] * col;\n    }\n\n    if (prevParams.w > 0.5) {\n        // Get previous value for Monte-Carlo accumulation\n        vec4 prevVal = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n        fragColor = prevVal + vec4(col_xyz, float(samples_per_frame));\n    } else {\n        fragColor = vec4(col_xyz, float(samples_per_frame));\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}