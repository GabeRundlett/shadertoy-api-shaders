{
    "Shader": {
        "info": {
            "date": "1693237751",
            "description": "It's a wavy circle!",
            "flags": 0,
            "hasliked": 0,
            "id": "DtfBRf",
            "likes": 3,
            "name": "eindacor_wavy_circle",
            "published": 3,
            "tags": [
                "wavy"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 336
        },
        "renderpass": [
            {
                "code": "#define AA .002f\n#define TWOPI 6.28318530718f\n\nfloat getOffsetAngle(vec2 first, vec2 second) {\n    vec2 offsetVec = second - first;\n    float angle = atan(offsetVec.y / offsetVec.x);\n    \n    if (first.x < second.x) {\n        angle = TWOPI / 2.f + angle;\n    } else if (first.y > second.y) {\n        angle = TWOPI + angle;\n    }\n    \n    return angle;\n}\n\nfloat getRadialVal(vec2 center, vec2 p) {\n    float offsetAngle = getOffsetAngle(center, p);\n    offsetAngle = mod(TWOPI - offsetAngle + 3.f * TWOPI / 6.f, TWOPI);\n    return offsetAngle / TWOPI;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x += ((.5 / aspectRatio) - .5);\n    uv.x *= aspectRatio;\n    \n    vec2 center  = vec2(.5);\n    \n    float distFromCenter = distance(uv, center);\n    \n    float circleRadius = .4f;\n    float waviness = circleRadius * .03;\n    \n    float radialVal = getRadialVal(center, uv);\n    \n    float waves = 24.;\n    \n    float localRadialVal = mod(radialVal, 1. / waves) * waves;\n    \n    float distCheck = circleRadius + waviness * sin(localRadialVal * TWOPI);\n    \n    float lineWidth = circleRadius * .05;\n    \n    float waveVal = 0.;\n    if (distFromCenter > distCheck) {\n        float outerEdge = distCheck + lineWidth * .5;\n        waveVal = smoothstep(outerEdge + AA, outerEdge - AA, distFromCenter);\n    } else {\n        float innerEdge = distCheck - lineWidth * .5;\n        waveVal = smoothstep(innerEdge - AA, innerEdge + AA, distFromCenter);\n    }\n    \n    fragColor = vec4(waveVal);\n    \n    return;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}