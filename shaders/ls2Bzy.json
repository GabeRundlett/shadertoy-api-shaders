{
    "Shader": {
        "info": {
            "date": "1501029789",
            "description": "Move the mouse and find out which parts of Jake move.\nBased on Jake of Adventure Time.\nWanted to participate with little time to spare for coding, enjoy!",
            "flags": 64,
            "hasliked": 0,
            "id": "ls2Bzy",
            "likes": 19,
            "name": "[SH17B] Adventure Time",
            "published": 3,
            "tags": [
                "2d",
                "time",
                "cartoon",
                "adventure",
                "jake",
                "sh17b",
                "klos"
            ],
            "usePreview": 0,
            "username": "spolsh",
            "viewed": 1519
        },
        "renderpass": [
            {
                "code": "// [SH17B] Adventure Time\n// by Michal \"spolsh\" Klos 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define BLACK vec3(0.0)\n#define WHITE vec3(1.0)\n#define BG vec3(249.0/255.0, 192.0/255.0, 41.0/255.0)\n#define MOUNTH0 vec3(0.5, 0.0, 0.2)\n#define MOUNTH1 vec3(0.9, 0.4, 0.4)\n#define DBG vec3(1.0, 0.0, 1.0)\n#define STROKE 0.005\n\n#define RES iResolution\n#define FRAG fragCoord\n#define T (40.0*iTime)\n#define t (2.0*iTime)\n#define M (iMouse.xy)\n\nfloat udBox( vec2 p, vec2 b )\n{ // by iq\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCapsule( vec2 p, vec2 a, vec2 b, float r )\n{ // by iq\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = FRAG/RES.xy-0.5;\n    uv.y *= RES.y/RES.x; \n    //uv *= vec2(1.5);\n    uv += 0.01*vec2(cos(t),sin(t));\n    uv.y += 0.05;\n        \n    float irisMove = 0.002*sin(T);\n    vec2 facePos\t= vec2(0.0, 0.15);\n    vec2 eyePos0\t= facePos +vec2( 0.14, 0.0);\n    vec2 eyePos1\t= facePos +vec2(-0.14, 0.0);\n    vec2 irisPos0\t= eyePos0 +vec2(0.017 +irisMove, 0.025);\n    vec2 irisPos1\t= eyePos1 +vec2(0.017 +irisMove, 0.025);\n    vec2 irisPos2\t= eyePos0 +vec2(-0.04 +irisMove, -0.052);\n    vec2 irisPos3\t= eyePos1 +vec2(-0.04 +irisMove, -0.052);    \n    vec2 nosePos\t= facePos +vec2(0.0, -0.05);\n    vec2 moustachePos0\t= facePos +vec2(0.0, -0.05);\n    vec2 moustachePos1\t= facePos +vec2(0.0, -0.20);    \n    vec2 handsPos = vec2(0.0, -0.2) + vec2(0.0, 0.01*sin(t));\n    vec2 lidPos\t= vec2(0.0, -0.09);\n    \n    vec2 mouseDir = normalize(((fragCoord.xy-M)/RES.xy) - facePos);\n       \n    vec2 p0 = uv;\n    p0.y *= 1.6;\n    \n    float s0 = length(uv -eyePos0)\t - 0.1;\n    float s1 = length(uv -eyePos1)\t - 0.1;\n    float s2  = length(uv -irisPos0 +0.008*mouseDir)  - 0.065;\n    float s3  = length(uv -irisPos1 +0.008*mouseDir)  - 0.065;    \n    float s9  = length(uv -irisPos2 +0.008*mouseDir)  - 0.025;\n    float s10 = length(uv -irisPos3 +0.008*mouseDir) - 0.025;\n    float s4 = length(p0 -nosePos - vec2(0.0, 0.015)) - 0.062;\n    float s5 = length(p0 -moustachePos0) - 0.12;\n    float s6 = length(p0 -moustachePos0) - 0.12-STROKE;\n    float s7 = uv.y-0.06;\n    float s11 = sdCapsule(p0, nosePos +vec2( 0.091, -0.098), nosePos +vec2( 0.091, 0.0), 0.034);\n    float s12 = sdCapsule(p0, nosePos +vec2(-0.091, -0.098), nosePos +vec2(-0.091, 0.0), 0.034);\n    float s13 = min(max(-s7, s6), min(s11, s12));\n    float s14 = s13 +STROKE;    \n        \n    vec2 p1 = uv -facePos -handsPos;\n    p1.x = -abs(p1.x) + 0.15;    \n    float s15 = sdCapsule(p1, vec2(0.0,    0.0), vec2(0.0,    -1.8), 0.02);\n    float s16 = sdCapsule(p1, vec2(-0.037, 0.0), vec2(-0.037, -1.8), 0.02);\n    float s17 = sdCapsule(p1, vec2(-0.074, 0.0), vec2(-0.074, -1.8), 0.02);\n    float s18 = udBox(p1      +vec2(0.04, 0.3), vec2(0.04, 0.28));\n    float s19 = min(s15, min(s16, s17));\n    float s20 = min(s18, s19 +STROKE);\n    \n    vec2 p2 = uv -facePos -lidPos; \n    p2.x = -abs(p2.x) + 0.15;        \n    p2 *= vec2(1.0, 2.0);\n    float s21 = length(p2) -0.09;\n    float s22 = length(p2 +vec2(0.001, 0.015)) -0.09;\n        \n    vec2 p3 = uv * vec2(1.0, 1.05);\n    p3.y += 0.001*sin(t);\n    float s23 = length(p3 -facePos -vec2(0.0, -0.085)) - 0.065;\n    float s24 = s23 +STROKE;        \n    float s26 = length(p3 -facePos -vec2( 0.0,  -0.115)) - 0.017;\n    float s27 = length(p3 -facePos -vec2( 0.03, -0.108)) - 0.017;\n    float s28 = length(p3 -facePos -vec2(-0.03, -0.108)) - 0.017;\n    float s29 = min( s28, min(s26, s27));\n    float s30 = min( s28, min(s26, s27)) +0.004;\n    p3.y += 0.002*sin(t);\n    float s25 = max( length(p3 -facePos +0.008*mouseDir -vec2(0.02, -0.16)) - 0.03, s24);\n    \n    vec3 c = BG;    \n    c = mix(BLACK,   c, smoothstep(0.0, 0.002, min( s0, s1 )));\n    c = mix(WHITE,   c, smoothstep(0.0, 0.002, min( min( s9, s10), min(s2, s3))));\n    c = mix(BLACK,   c, smoothstep(0.0, 0.002, min(s21, s23)));\n    c = mix(MOUNTH0, c, smoothstep(0.0, 0.002, s24));        \n    c = mix(MOUNTH1, c, smoothstep(0.0, 0.002, s25));                 \t\n    c = mix(BLACK,   c, smoothstep(0.0, 0.002, s29));\n    c = mix(WHITE,   c, smoothstep(0.0, 0.002, s30));\n    c = mix(BG,      c, smoothstep(0.0, 0.002, s22));     \n    c = mix(BLACK,   c, smoothstep(0.0, 0.002, s13));\n    c = mix(BG,      c, smoothstep(0.0, 0.002, s14));   \n    c = mix(BLACK,   c, smoothstep(0.0, 0.002, min(s4, s19)));    \n    c = mix(BG,      c, smoothstep(0.0, 0.002, s20));                 \t       \n    \n    // c = mix(DBG,     c, smoothstep(0.0, 0.002, length((fragCoord.xy-M)/RES.xy) - 0.017));                 \t       \n           \n\tfragColor = vec4(c, 0.0);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 11544,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/steven-universeonsc/adventure-time-everthing-stays-official-prod-rebecca-sugar-sung-by-olivia-olson"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}