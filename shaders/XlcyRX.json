{
    "Shader": {
        "info": {
            "date": "1533335595",
            "description": "I wanted to check https://www.shadertoy.com/view/XlcGD8 if it's correct or not and it seems there are many pixels out of order, unless I misunderstood something. Blue color indicates particles out of order.",
            "flags": 32,
            "hasliked": 0,
            "id": "XlcyRX",
            "likes": 3,
            "name": "Bitonic Sort Test",
            "published": 3,
            "tags": [
                "sort",
                "bitonic"
            ],
            "usePreview": 0,
            "username": "emh",
            "viewed": 592
        },
        "renderpass": [
            {
                "code": "// Fork of \"Bitonic Sort\" by phi16. https://shadertoy.com/view/XlcGD8\n// 2018-08-03 22:18:37\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n    if (fragCoord.x < 256. && fragCoord.y < 256.) {\n        vec4 col1 = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        int i = int(fragCoord.x + fragCoord.y * iResolution.x) + 1;\n        ivec2 fc = ivec2(i % int(iResolution.x), i / int(iResolution.x));\n        vec4 col2 = texelFetch(iChannel0, ivec2(fc), 0);\n        int dir = length(col1) < length(col2) ? 0 : 1;\n        fragColor.b = float(dir);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    int frame = iFrame - iFrame / 200 * 200;\n    if(frame == 0){\n        fragColor = texture(iChannel0,fragCoord.xy / 256.);\n    }else if(frame <= 136 && fragCoord.x < 256. && fragCoord.y < 256.){\n        vec4 v = texture(iChannel2,vec2(0.25,0.5));\n        int sz = 0;\n        sz *= 128; sz += int(v.r * 128.);\n        sz *= 128; sz += int(v.g * 128.);\n        sz *= 128; sz += int(v.b * 128.);\n        sz *= 128; sz += int(v.a * 128.);\n        v = texture(iChannel2,vec2(0.75,0.5));\n        int df = 0;\n        df *= 128; df += int(v.r * 128.);\n        df *= 128; df += int(v.g * 128.);\n        df *= 128; df += int(v.b * 128.);\n        df *= 128; df += int(v.a * 128.);\n        \n        int ix = int(fragCoord.x) + int(fragCoord.y)*256;\n        int packi = ix/sz;\n        int dn = packi-packi/2*2; // sort direction\n        int pOrig = packi*sz;\n        int comp = (ix-pOrig)/df; // reference point\n        comp -= comp/2*2;\n        int ay = comp==0?ix+df:ix-df; // compare target\n        vec4 col1 = texture(iChannel1,uv);\n        vec4 col2 = texture(iChannel1,vec2(float(ay-ay/256*256)+0.5,float(ay/256)+0.5)/iResolution.xy);\n        int dir = length(col1) > length(col2) ? 0 : 1;\n        int a = dir+comp+dn;\n        a-=a/2*2;\n        if(ay < 0 || ay >= 256*256){\n\t        fragColor = col1;\n        }else{\n\t        fragColor = a==1 ? col1 : col2;\n        }\n    }else{\n        fragColor =texture(iChannel1, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    int frame = iFrame - iFrame / 200 * 200;\n    if(frame == 0){\n         if(uv.x < 0.5)fragColor = vec4(0,0,0,1./128.);\n         else fragColor = vec4(0,0,0,1./128.);\n    }else{\n        vec4 v = texture(iChannel0,vec2(0.25,0.5));\n        int c = 0;\n        c *= 128; c += int(v.r * 128.);\n        c *= 128; c += int(v.g * 128.);\n        c *= 128; c += int(v.b * 128.);\n        c *= 128; c += int(v.a * 128.);\n        v = texture(iChannel0,vec2(0.75,0.5));\n        int d = 0;\n        d *= 128; d += int(v.r * 128.);\n        d *= 128; d += int(v.g * 128.);\n        d *= 128; d += int(v.b * 128.);\n        d *= 128; d += int(v.a * 128.);\n        \n        if(d==1)d=c,c*=2;\n        else d/=2;\n        \n        if(uv.x < 0.5){\n          fragColor.a = float(c-c/128*128)/128., c/=128;\n          fragColor.b = float(c-c/128*128)/128., c/=128;\n          fragColor.g = float(c-c/128*128)/128., c/=128;\n          fragColor.r = float(c-c/128*128)/128., c/=128;\n        }else{\n          fragColor.a = float(d-d/128*128)/128., d/=128;\n          fragColor.b = float(d-d/128*128)/128., d/=128;\n          fragColor.g = float(d-d/128*128)/128., d/=128;\n          fragColor.r = float(d-d/128*128)/128., d/=128;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}