{
    "Shader": {
        "info": {
            "date": "1542409540",
            "description": "Renders a surf near the coast of a planet.",
            "flags": 0,
            "hasliked": 0,
            "id": "llVBWh",
            "likes": 4,
            "name": "Watery World",
            "published": 3,
            "tags": [
                "water",
                "planet",
                "coast"
            ],
            "usePreview": 0,
            "username": "bram",
            "viewed": 687
        },
        "renderpass": [
            {
                "code": "\n\n// Simplex 2D noise\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nfloat octavenoise( vec2 uv )\n{\n    float v0 = 1.000 * snoise(uv*1.0);\n \tfloat v1 = 0.500 * snoise(uv*2.0);\n  \tfloat v2 = 0.250 * snoise(uv*4.0);\n   \tfloat v3 = 0.125 * snoise(uv*8.0);\n    return ( v0+v1+v2+v3 ) / 1.875;\n}\n\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise3(vec3 p) {\n\n\tvec3 s = floor(p + dot(p, vec3(F3)));\n\tvec3 x = p - s + dot(s, vec3(G3));\n\t \n\tvec3 e = step(vec3(0.0), x - x.yzx);\n\tvec3 i1 = e*(1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\tvec3 x1 = x - i1 + G3;\n\tvec3 x2 = x - i2 + 2.0*G3;\n\tvec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\tvec4 w, d;\n\t \n\tw.x = dot(x, x);\n\tw.y = dot(x1, x1);\n\tw.z = dot(x2, x2);\n\tw.w = dot(x3, x3);\n\t \n\tw = max(0.6 - w, 0.0);\n\t \n\td.x = dot(random3(s), x);\n\td.y = dot(random3(s + i1), x1);\n\td.z = dot(random3(s + i2), x2);\n\td.w = dot(random3(s + 1.0), x3);\n\t \n\tw *= w;\n\tw *= w;\n\td *= w;\n\t \n\treturn dot(d, vec4(52.0));\n}\n\n\n// Sample 9 locations, and count how many are on water.\nint watercount( vec2 uv )\n{\n    const float e = 0.017;\n    vec2 delta[9];\n    \n    delta[0] = vec2(-e,-e);\n    delta[1] = vec2(0,-e);\n    delta[2] = vec2(e,-e);\n    \n    delta[3] = vec2(-e, 0);\n    delta[4] = vec2(0, 0);\n    delta[5] = vec2(e, 0);\n    \n    delta[6] = vec2(-e, e);\n    delta[7] = vec2(0, e);\n    delta[8] = vec2(e, e);\n\n    int numwater = 0;\n    for ( int i=0; i<9; ++i )\n    {\n        vec2 s = uv + delta[i];\n        float v = octavenoise( s );\n        if ( v > 0.0 )\n            numwater += 1;\n    }\n    return numwater;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // If you count the samples that fall on land, you'll know if it is inland, out on sea, or coastal.\n    int numw = watercount( uv );\n    \n    // We'll assume it is coastal for now, and use whitish to render surf.\n    vec3 col = vec3(0.9,0.9,1);\n    \n    float cutoff = 5.0 + snoise( vec2(iTime,iTime) + uv * 60.0 ) * 4.0;\n\n    if ( numw == 0 )\n    {\n        // No water samples: firmly in-land.\n        col = vec3( 0.2,0.6,0.2 );\n    }\n    else if ( numw > int(cutoff) )\n    {\n        // 'Many' water samples: firmly out on sea:\n        col = vec3( 0.4, 0.54, 0.9 );\n        float tgt = 0.0;\n        float wave = snoise3( vec3( uv * 50.0, iTime ) );\n        float diff = abs( tgt - wave );\n        diff = diff * 12.0;\n        diff = min( diff, 1.0 );\n        col = mix( vec3(1,1,1), col, diff );\n    }\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}