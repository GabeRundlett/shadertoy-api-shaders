{
    "Shader": {
        "info": {
            "date": "1591296651",
            "description": "Fly through the canopy of an otherworldly rainforest!\nThis is a more complex version of my [url=https://www.shadertoy.com/view/wdBfWd]\"Infinite jungle\"[/url] scene, with many fireflies flying through it.\nClick and drag the mouse to look around.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttlcRn",
            "likes": 2,
            "name": "Infinite jungle (modified)",
            "published": 3,
            "tags": [
                "raymarching",
                "lod",
                "jungle"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "//this is based on https://www.shadertoy.com/view/4tcGDr\n\nconst int MAX_MARCHING_STEPS = 1000;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 10000.0;\nconst float EPSILON = 0.00001;\nfloat EPSILON1;\nint color;\n\nvec3 animate(vec3 p){\n    vec3 p1 = p/100.0+vec3(iTime/20.0);\n    p += vec3(sin(p1.y),cos(p1.z),sin(p1.x))*100.0;\n    return p;\n}\n\nvec3 surface_color2(vec3 p)\n{\n    p = animate(p);\n    vec3 col;\n    col = p.xyz*sin(p.x+p.y+p.z);\n    \n    // Output to screen\n    return vec3(col.y,col.z,p.x)/500.0;\n}\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF3(vec3 p) {\n    p *= 2.0;\n    p = animate(p)/10.0;\n    return  4.2 +sin(length(p*5.0)/2.0) + (sin(p.x+p.y+p.z)+cos(p.y)+cos(p.z))*1.1;\n}\n\nvec3 surface_color1(vec3 p)\n{\n    p = sin(p/100.0)*100.0;\n    vec2 uv = vec2(p.x,p.y)/(400.0);\n    float scale = 5.0;\n    vec2 col = (uv.yx*scale*(1.0+sin(uv.x+p.z)/2.0));\n    vec2 col2;\n    for(float i = 1.0; i < 5.0; i++){\n        uv += ceil(col+sin((col.x+col.y)));\n        col /= sin(uv.x);\n        col2 = (col2+col)/(i*i);\n    }\n    \n    // Output to screen\n    return vec3(sin(uv.y)/20.0+.5,sin(col2.x),sin(uv.x)/5.0);\n}\n\nvec3 surface_color(vec3 p)\n{\n    p = sin(p/100.0)*100.0;\n    vec2 uv = vec2(p.x,p.y)/(400.0);\n    float scale = 5.0;\n    vec2 col = (uv.yx*scale*(1.0+sin(uv.x+p.z)/2.0));\n    vec2 col2;\n    for(float i = 1.0; i < 5.0; i++){\n        uv += ceil(col+sin((col.x+col.y)));\n        col /= sin(uv.x);\n        col2 = (col2+col)/(i*i);\n    }\n    \n    // Output to screen\n    return vec3(sin(uv.y)/20.0+.5,sin(uv.x)/5.0,sin(col2.x)*1.5)/1.5;\n}\n\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\n\nfloat bump(vec3 p3)\n{\n    p3 *= 3.;\n  \t//return vec3(0.0);\n    float distortion = 5.0;\n    p3 *= distortion;\n    return length(sin(p3))/(distortion*4.0);\n}\n\n\nfloat sceneSDF1(vec3 p) {\n    p = p + (sin(p.yzx)-sin(p/(50.0)))*10.0;\n    return  4.2 + sin((p.x*2.0+p.y+p.z/3.0))*3.0+sin(p.z)*1.5+bump(p);\n}\n\n\nfloat sceneSDF2(vec3 p){\n\treturn min(sceneSDF1(p/5.0),sceneSDF1(p.zyx/2.0));\n}\n\nfloat sceneSDF(vec3 p){\n    p += sin(p/2.0);\n    p /= 30.0;\n    float p1 = sceneSDF2(p);\n    float p2 = sceneSDF1(p.yxz/5.0);\n    float p3 = sceneSDF3(p*20.0);\n\tfloat result = min(p1,min(p2,p3));\n    if(result == p1){\n    \tcolor = 1;\n    }\n    else if(result == p2){\n    \tcolor = 2;\n    }\n    else if(result == p3){\n    \tcolor = 3;\n    }\n    return result;\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        \n        //reduce the level of detail for distant objects\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        \n        \n        EPSILON1 = EPSILON*depth*depth;\n        if (dist < EPSILON1) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON1, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON1, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON1, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON1, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON1)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON1))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = eye;\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n\n    return color;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord)+vec3(1.0*(iMouse.x/iResolution.x),1.0*(iMouse.y/iResolution.y),0.0);\n    vec3 eye = vec3(sin(iTime/5.0)*2.0, cos(iTime/5.0)*2.0, -iTime)*10.0;    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * -viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON1) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a;\n    if (color == 2){\n    \tK_a = surface_color((p));\n    }\n    else if(color == 1){\n    \tK_a = surface_color1(p);\n    }\n    else if(color == 3){\n    \tK_a = surface_color2(p);\n    }\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    \n    vec3 color1 = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color1, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}