{
    "Shader": {
        "info": {
            "date": "1719686071",
            "description": "Código generado con Claude AI y Copilot",
            "flags": 0,
            "hasliked": 0,
            "id": "X3tSDX",
            "likes": 2,
            "name": "Más esferas e inversiones",
            "published": 3,
            "tags": [
                "spheres",
                "esferas"
            ],
            "usePreview": 0,
            "username": "metamatematico",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 30\n#define MAX_DIST 40.\n#define SURF_DIST .001\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    float c = cos(a), s = sin(a);\n    return vec3(p.x * c - p.z * s, p.y, p.x * s + p.z * c);\n}\n\nfloat getDistance(vec3 p) {\n    float d = MAX_DIST;\n    vec3 z = p;\n    float scale = 0.8;\n    \n    for(int i=0; i<10; i++) {\n        z = rotateY(z, iTime * 0.1 + iMouse.x * 0.001); // Añadir interacción con el ratón\n        z = abs(z) - vec3(5.0, 0.5, 1.0) * scale;\n        \n        if((z.x) < z.y) z.xy = z.yx;\n        if(z.x < z.z) z.xzy = z.xzy;\n        if(z.y < z.z) z.yxz = z.xzy;\n        \n        z = z * 2.80 - vec3(5.0, 3.0, -0.5) * scale;\n        scale *= 1.0200; // Aumentar el factor de escala para incrementar la deformación\n        \n        float sphereDist = sdSphere(z, 1.50 * scale);\n        d = min(d, sphereDist / scale);\n    }\n    \n    return d * 0.5;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDistance(p);\n    vec2 e = vec2(.00001, 0);\n    vec3 n = d - vec3(\n        getDistance(p-e.xyy),\n        getDistance(p-e.yxy),\n        getDistance(p-e.yyx));\n    return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.5;\n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDistance(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 getColor(vec3 p) {\n    vec3 col = vec3(0.5) + 0.5 * sin(iTime * 0.1 + p.xyx * 0.2 + vec3(0,2,4));\n    return mix(vec3(30.8, 10.5, 4.22), vec3(0.2, 0.5, 0.08), col) * .3333333; // Hacer colores más translúcidos\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.09*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(1, 0, -4);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    ro = rotateY(ro, iTime * 0.1 + iMouse.x * 0.001); // Añadir interacción con el ratón\n    rd = rotateY(rd, iTime * 0.1 + iMouse.x * 0.001); // Añadir interacción con el ratón\n    \n    float d = rayMarch(ro, rd);\n    \n    if(d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = getNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = getColor(p);\n        \n        col *= dif;\n        col += pow(max(dot(r, normalize(vec3(1,2,3))), 0.70), 8.0); // specular\n        col *= refract(rd, n, 5.0 / 4.533); // Añadir refracción para simular la óptica de las burbujas de jabón\n    }\n    \n    col = pow(col, vec3(.4545));  // gamma correction\n    \n    fragColor = vec4(col,0.0000001); // Ajustar la opacidad a 0.1 para hacer los objetos casi transparentes\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}