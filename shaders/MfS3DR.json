{
    "Shader": {
        "info": {
            "date": "1704051568",
            "description": "Stylised anti-aliasing with line integral convolution",
            "flags": 32,
            "hasliked": 0,
            "id": "MfS3DR",
            "likes": 6,
            "name": "Stylized LIC AA",
            "published": 3,
            "tags": [
                "blur",
                "aa",
                "lic"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n#define T(u) texture(iChannel0, u/R.xy).rgb\n#define D(u) texture(iChannel1, u/R.xy).xy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n\n    vec3 I = vec3(0.0);\n    float sum = .0;\n    \n    float sigmaL = 5.;\n    \n    \n    float w = gaussian(sigmaL, 0.);\n    I += T(uv)*w;\n    sum += w;\n\n    vec2 dir = D(uv);\n    vec2 where = uv + dir;\n\n    // LIC first side\n    for (float i = 1. ; i<(2.*sigmaL + 1.) ; i++){\n        w = gaussian(sigmaL, i);\n        I += T(where)*w;\n        sum += w;\n        vec2 dir = D(where);\n        where += dir;\n\n    }\n    // LIC second side\n    dir = D(uv);\n    where = uv - dir.xy;\n    for (float i = 1. ; i<(2.*sigmaL + 1.) ; i++){\n        w = gaussian(sigmaL, i);\n        I += T(where)*w;\n        sum += w;\n        vec2 dir = D(where);\n        where -= dir;\n    }\n    I /= sum;\n    fragColor = vec4(I, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n#define T(u) texture(iChannel0, u).rgb\n\nvec4 SST(vec2 uv){\n    vec2 d = 1./R.xy;\n    //Sobel\n    vec3 Gx =  (\n           -1.0 * T(uv + vec2(-d.x, -d.y)) +\n           -2.0 * T(uv + vec2(-d.x,  0.0)).xyz + \n           -1.0 * T(uv + vec2(-d.x,  d.y)).xyz +\n           +1.0 * T(uv + vec2( d.x, -d.y)).xyz +\n           +2.0 * T(uv + vec2( d.x,  0.0)).xyz + \n           +1.0 * T(uv + vec2( d.x,  d.y)).xyz\n           ) / 4.0;\n    vec3 Gy = (\n           -1.0 * T(uv + vec2(-d.x, -d.y)).xyz + \n           -2.0 * T(uv + vec2( 0.0, -d.y)).xyz + \n           -1.0 * T(uv + vec2( d.x, -d.y)).xyz +\n           +1.0 * T(uv + vec2(-d.x,  d.y)).xyz +\n           +2.0 * T(uv + vec2( 0.0,  d.y)).xyz + \n           +1.0 * T(uv + vec2( d.x,  d.y)).xyz\n           ) / 4.0;\n    return vec4(dot(Gx, Gx), dot(Gy, Gy), dot(Gy, Gx), .0);         \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/R.xy;\n    vec4 sst = SST(uv); // Compute Structure Space Tensor\n    \n    fragColor = vec4(sst);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float gaussian(float s, float pos){\n    return exp(-(pos*pos)/(2.*s*s));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define T(u) texelFetch(iChannel0, u, 0).rgb\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    ivec2 uv = ivec2(fragCoord.xy);\n    vec3 G = vec3(0.0);\n    \n    float sigmaG = 8.;\n    \n    float sum = .0;\n\n    float w = gaussian(sigmaG, 0.);\n    G += T(uv)*w;\n    sum += w;\n    // Gaussian Blur Vertical\n    for (float i = 1. ; i<(2.*sigmaG+1.) ; i++){\n        w = gaussian(sigmaG, float(i));\n        G += T(uv + ivec2(0,i))*w;\n        G += T(uv - ivec2(0,i))*w;\n        sum += 2.*w;\n    }\n    G /= sum;\n    fragColor = vec4(G, .0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(u) texelFetch(iChannel0, u, 0).rgb\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    ivec2 uv = ivec2(fragCoord.xy);\n    vec3 G = vec3(0.0);\n    \n    float sigmaG = 8.;\n   \n    float sum = .0;\n\n    float w = gaussian(sigmaG, 0.);\n    G += T(uv)*w;\n    sum += w;\n    // Gaussian Blur Horizontal\n    for (float i = 1. ; i<(2.*sigmaG+1.) ; i++){\n        w = gaussian(sigmaG, float(i));\n        G += T(uv + ivec2(i,0))*w;\n        G += T(uv - ivec2(i,0))*w;\n        sum += 2.*w;\n    }\n    G /= sum;\n    \n    // Compute eigen vector\n    float lambda = .5*(G.x + G.y + sqrt((G.y-G.x)*(G.y-G.x) + 4.*G.z*G.z));\n    vec2 d = vec2(-G.x + lambda, -G.z);\n\n    vec4 res = (length(d) != 0.) ? vec4(normalize(d), sqrt(lambda), 1.) : vec4(.0,1.,0.,1.);\n    fragColor = res;    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}