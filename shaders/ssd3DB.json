{
    "Shader": {
        "info": {
            "date": "1630614283",
            "description": "saw teeth",
            "flags": 0,
            "hasliked": 0,
            "id": "ssd3DB",
            "likes": 6,
            "name": "saw teeth",
            "published": 3,
            "tags": [
                "2d",
                "saw",
                "teeth"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "// por jorge2017a1\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.5),b,d)\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n    \nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat Dientes(vec2 p)\n{\n    float sdb1=sdBox(p, vec2(2.0,0.35) );\n    \n    vec2 pr=p;\n     pr.x= opRep1D(p.x, 0.5 );\n     \n    float sds1=sdCircle( pr-vec2(-0.01,0.3), 0.27 );\n    float sds2=sdCircle( pr-vec2(0.1,0.053), 0.15 );\n    float sds3=sdCircle( pr-vec2(0.0,-0.073), 0.1 );\n    float sds4=sdCircle( pr-vec2(-0.05,0.013), 0.13 );\n    \n    float sdif=differenceSDF(sdb1, sds1);\n    sdif=differenceSDF(sdif,sds2);\n    sdif=differenceSDF(sdif,sds3);\n    sdif=differenceSDF(sdif,sds4);\n    \n    return sdif;\n\n}\n\n//https://www.shadertoy.com/view/sdX3zN\nvec3 getBackgroundColor(vec2 uv) \n{\n  uv = uv * 0.5 + 0.5; // remap uv from <-0.5,0.5> to <0.25,0.75>\n  vec3 gradientStartColor = vec3(0., 0., 0.);\n  vec3 gradientEndColor = vec3(0., 1., 1.);\n  return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv = (2.*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);\n     uv.y+=0.25;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col2=getBackgroundColor(uv);\n     col=mix(col, col2,uv.y);\n     col=mix(col, vec3(0.0),uv.y-0.5)*col2;\n    float t1=0.5*sin(iTime*0.5);\n    float t2=0.5*sin(iTime*1.5);\n    float t3=0.5*sin(iTime*2.0);\n    \n    float d1= Dientes(uv-vec2(0.0+t1,0.1));\n    float d2= Dientes(uv-vec2(0.1+t2,0.0));\n    float d3= Dientes(uv-vec2(0.1+t3,-0.1));\n    col= DrawFig(vec3(1.0), col,d1);\n    col= DrawFig(vec3(0.5,0.3,0.6), col,d2);\n    col= DrawFig(vec3(0.25,0.0,0.6), col,d3);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}