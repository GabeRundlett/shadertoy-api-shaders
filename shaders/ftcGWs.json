{
    "Shader": {
        "info": {
            "date": "1637107563",
            "description": "Buffer Test - using two arrays for position and velocity / Basic textel fetch based on @oneshade's shader [url]https://www.shadertoy.com/view/WtGfDD[/url]\n    ",
            "flags": 32,
            "hasliked": 0,
            "id": "ftcGWs",
            "likes": 12,
            "name": "Ball Buffer Bounce",
            "published": 3,
            "tags": [
                "ballbufferbounce"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    Buffer Demo / Ball Bouncing\n    11/16/21 @byt3_m3chanic\n    \n    Getting back into using buffers for more than post processing.\n    Using two arrays for position and velocity which get set in \n    main then used in the map function for each sphere. Need to figure\n    out how dr2 can get so many moving at once! (and ball collision).\n    \n    Simple bounce/gravity (BufferA)\n    Basic textel fetch based on @oneshade's shader \n    https://www.shadertoy.com/view/WtGfDD\n\n*/\n\n#define R   iResolution\n#define M   iMouse\n#define T   iTime\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MAX_DIST    65.\n#define MIN_DIST    .0005\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat vmax(vec3 v) { return max(max(v.x, v.y), v.z); }\nfloat box(vec3 p, vec3 b, float r) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)))-r;\n}\n// @gaz\nfloat zag(vec3 p, float s) {\n    p = abs(p)-s;\n    if (p.x < p.z) p.xz = p.zx;\n    if (p.y < p.z) p.yz = p.zy;\n    if (p.x < p.y) p.xy = p.yx;\n    return dot(p,normalize(vec3(s*.42,s,0)));\n}\nvec3 hitPoint, hit;\nfloat g_hash, s_hash, fn;\n\nvec4[15] sps = vec4[15](\n    vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),\n    vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),\n    vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.)\n);\nvec4[15] svs = vec4[15](\n    vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),\n    vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),\n    vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.)\n);\n\nvec2 map(vec3 p) {\n    vec2 res = vec2(100.,-1.);\n    vec3 pb  = p.xyz;\n\n    float b1 = 1e5;\n    for (int p=0; p < SPHERE; p++) {\n        float id = float(p);\n        vec4 particlePos = sps[p];\n        vec4 particleVel = svs[p];\n        float ball = length(pb-particlePos.xyz)-.25;\n        if(ball<b1) g_hash= (particleVel.w*15.);\n        b1 = min(ball, b1);\n    }\n\n    if(b1<res.x) {\n        res = vec2(b1,6.);\n    \thit=pb;\n    }\n\n    vec3 pbd = pb-vec3(0,.65,0);\n    pbd.xz=mod(pbd.xz+3.25,6.5)-3.25;\n    float b2 = box(pbd,vec3(1.45,1.55,1.45),.0)-.15;\n    b2=max(abs(b2)-.05,b2);\n    pb.y=abs(abs(abs(pb.y-1.55)-1.)-.5);\n    float b3 = box(pb-vec3(0,.25,0),vec3(2.,.15,2.),.0);\n    b2=max(b2,-b3);\n    \n    if(b2<res.x) {\n        res = vec2(b2,5.);\n    \thit=pb;\n    }    \n\n    float d9 = p.y + 1.085;\n    if(d9<res.x) {\n        res = vec2(d9,4.);\n    \thit=p;\n    }\n\n    return res;\n}\n\n// normal\nvec3 normal(vec3 p, float t, float md) {\n    float e = md*t;\n    vec2 h = vec2(1.,-1.)*.5773;\n    return normalize( \n        h.xyy*map( p + h.xyy*e ).x + \n        h.yyx*map( p + h.yyx*e ).x + \n        h.yxy*map( p + h.yxy*e ).x + \n        h.xxx*map( p + h.xxx*e ).x );\n}\n\nvec3 shade(vec3 p, vec3 rd, float d, float m, inout vec3 n, inout float fresnel, inout vec3 ref) {\n\n    n = normal(p,d,.1);\n\n    vec3 l = normalize(vec3(15.,35,15)-p);\n    float diff = clamp(dot(n,l),.1,.8);\n    float spec = pow(max(dot(reflect(l, n), rd ), .1), 32.)*.45;\n        \n    fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 9.);\n    fresnel = mix(.0, .95, fresnel);\n\n    vec3 h = vec3(.085);\n\n    if(m==4.) {\n        vec2 f = fract(hitPoint.xz*.5)-.5;\n        h=vec3(.302,.388,.212);\n        if(f.x*f.y>0.) h=vec3(.2);\n        ref=h;\n    }\n    if(m==5.) {\n        h=vec3(.024,.075,.075);\n        ref=vec3(.65);\n    }\n    if(m==6.) {\n        h=g_hash>.85?vec3(.02):hue((38.+s_hash)*.95);//vec3(0.004,0.008,0.012);//\n        ref=vec3(g_hash>.85?.75:.45);\n    }\n\n    return (h*diff)+spec;\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    if (iFrame == 0) {\n        O = vec4(vec3(0), 1.0);\n    } else {  \n        // get pos/vel - precal\n        for (int p=0; p < SPHERE; p++) {\n            sps[p] = getParticlePos(p);\n            svs[p] = getParticleVel(p);\n        }\n\n        vec3 C=vec3(.0);\n        vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n\n        vec3 ro = vec3(0,.65,6.),\n             rd = normalize(vec3(uv,-1));\n\n        float x = M.z<0.||M.xy == vec2(0) ? .7 :  .7+(M.y/R.y * .5 - .25) * PI;\n        float y = M.z<0.||M.xy == vec2(0) ? .6 : -(M.x/R.x * 2. - 1.) * PI;\n        if(x<.35)x=.35;\n        mat2 rx = rot(x),ry = rot(y+T*.1);\n        ro.yz *= rx; ro.xz *= ry;\n        rd.yz *= rx; rd.xz *= ry;\n\n        vec3  p = ro + rd * .1;\n        float atten = .95,k = 1.;\n        vec3 fill=vec3(1), ref=vec3(0);\n        float bt =3.;// cheat to break for reflection bounce\n        float ct =6.;// cheat to break for refraction bounce\n\n        // loop inspired/adapted from @blackle's \n        // marcher https://www.shadertoy.com/view/flsGDH\n        float fA = 0.;\n        for(int i=0;i<128;i++)\n        {\n            vec2 ray = map(p);\n            float d = ray.x*.9;\n            float m = ray.y;\n            //save for fog\n            if(bt>2.) fA += d;\n            p += rd * d *k;\n\n            if (d*d < 1e-8) {\n                hitPoint=hit;\n                s_hash=g_hash;\n                \n                vec3 n=vec3(0);\n                float fresnel= 0.;\n                vec3 h=vec3(0);\n\n                C+=shade(p,rd,d,ray.y,n,fresnel,ref)*fill;\n                //if(bt<3.)C=mix(C,vec3(.15), 1.-exp(-.0925*d*d*d));\n                if(bt<1.||ct<1.)break;\n\n                p += rd*.015;\n                k = sign(map(p).x);\n\n                vec3 rr = vec3(0);\n\n                if(m==4.||m==6.&&g_hash>.85) {\n                    fill *=ref;\n                    rd=reflect(-rd,n);\n                    p+=n*.025;\n                    bt--;\n                }else{\n                    fill *= ref;\n                    rr = refract(rd,n,.85);\n                    rd=mix(rd,rr,.95-fresnel);\n                    ct--;\n                }\n            }  \n            if(distance(p,rd)>55.) { break; }\n        }\n        //if we has - render fog\n        if(fA>0.) C=mix(C,vec3(.15), 1.-exp(-.00025*fA*fA*fA));\n        // Output to screen\n        C = sqrt(smoothstep(0.,1.,C));\n        O = vec4(C,1.);\n    }\n}\n\n// end\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//based on @oneshade's shader https://www.shadertoy.com/view/WtGfDD\n#define SPHERE 8\n\n#define getParticlePos(id) texelFetch(iChannel0, ivec2(id, 0), 0)\n#define getParticleVel(id) texelFetch(iChannel0, ivec2(id, 1), 0)\n\n#define hue(a) .25 + .25 * cos(PI * a * iDate.z+vec3(.35,.75,1.25) * vec3(1.,.98,.95))\n#define hash(a, b) fract(sin(a*1.2664745 + b*.9560333 + 3.) * 14958.5453)\n#define r2(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nconst float PI = acos(-1.0);\nconst float PI2 = PI*2.;\n\n//@Dave_Hoskins 1 to 2 hash\nvec2 hash12(in float x) {\n\tvec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec2 randomPos(in float x) {\n    x += hash(iDate.z,iDate.w);\n    return hash12(x) * 0.2 - 0.1;\n}\n\nvec2 randomVel(in float x) {\n    x += hash(iDate.z,iDate.w);\n    vec2 h2 = hash12(x * 847.586 + 285.364);\n    return vec2(h2.x * 0.1 - 0.05,h2.y* 0.05);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// gravity and bounce\n#define gvy .0005\n#define bnc .75\n#define wall 1.325\n\nvec4 setRndPos(float id) {\n    return vec4(randomPos(id),randomPos(id).x,.175);\n}\nvec4 setRndVel(float id) {\n    vec2 dz = randomVel(id+iDate.z);\n    return vec4(randomVel(id),dz.x,dz.y*2.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 corner = vec2(0.5 * (iResolution.x / iResolution.y), 0.5);\n    \n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFragCoord.x < SPHERE && iFragCoord.y < 2) {\n    \n        if (iFrame == 0) {\n            if (iFragCoord.y == 0) fragColor =vec4(0,-.25,0,.125);\n            if (iFragCoord.y == 1) fragColor = setRndVel(fragCoord.x);\n        }\n\n        if (iFrame > 0) {\n            vec4 pos = getParticlePos(iFragCoord.x);\n            vec4 vel = getParticleVel(iFragCoord.x);\n           \n           pos.xyz += vel.xyz;\n           if (pos.x<-wall || pos.x>wall ) {\n                pos.x-=vel.x;\n                vel.x*=bnc;\n                vel.x=-vel.x;\n            }\n            if (pos.z<-wall || pos.z>wall ) {\n                pos.z-=vel.z;\n                vel.z*=bnc;\n                vel.z=-vel.z;\n            }\n            if (pos.y<-.725) {\n                pos.y-=vel.y;\n                vel.y*=bnc;\n                vel.y=-vel.y;\n            }\n            \n            vel.y-=gvy;\n            vel.x*=.998;\n            vel.z*=.999;\n            pos.w-=(abs(vel.w*.0075));\n            \n            if(pos.w<.02||(abs(vel.x)<.0005&&abs(vel.z)<.0005)) {\n                pos.w = .175;\n                vel.xyz = setRndVel(fragCoord.x).xyz;\n            }\n            \n            if (iFragCoord.y == 0) fragColor = pos;\n            if (iFragCoord.y == 1) fragColor = vel;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}