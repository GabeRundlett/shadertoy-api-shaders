{
    "Shader": {
        "info": {
            "date": "1680075620",
            "description": "inspiration:  [url]https://twitter.com/JasonHise64/status/780237713068863488[/url]\nMouse controls camera.\na whole series: https://commons.wikimedia.org/w/index.php?title=Special:ListFiles/JasonHise&ilshowall=1",
            "flags": 0,
            "hasliked": 0,
            "id": "DdcXRj",
            "likes": 50,
            "name": "flex links radial - v4",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction",
                "spinor",
                "antitwister",
                "diracsbelt"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 617
        },
        "renderpass": [
            {
                "code": "// radial variant of https://shadertoy.com/view/mdcXD7\n\n#define rot(a)        mat2(cos(a+vec4(0,11,33,0)))         // 2D rotation \n#define rot3(P,A,a)  ( mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A) ) // 3D rot around an arbitrary axis\n\n#define d(q)                                                                   \\\n        min( length(q) - 1.7,                             /* sphere  */        \\\n             length(q) * length( a.xy= fract(vec2( atan((q).z,(q).x), atan((q).y,length((q).xz))) /.628) - .5) \\\n                       - .2 )                             // radial bands. Note that *.628 was omitted but should be there\n            \nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.;\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -12.*R.y) - R),          // ray direction\n          p = vec3(0,0,60), q,a,                           // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n                            :  vec3( 1,.5,0) * cos(.3*iTime + vec3(0,11,0)); \n        p.yz *= rot(-M.y),                                 // camera rotations\n        p.xz *= rot(-M.x-1.57), \n        D.yz *= rot(-M.y),\n        D.xz *= rot(-M.x-1.57); \n\n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.005 )        // march scene  \n        q = rot3( p, vec3(sin(iTime),0,cos(iTime)), 3.14 *smoothstep(.05, .6, 1./length(p)) ), // the magic is there\n        t = d(q),\n        p += .2*t*D;                                       // step forward = dist to obj      \n\n // O *= O*O*2.;                                           // color scheme\n    if (length(q)<1.8)                                     //   sphere\n        a = cos(6.28*a), t = a.x*a.y,\n        O.rgb *= .5+.5*smoothstep(1.,0.,t/fwidth(t)); \n    else\n        D = vec3(-1,1,0)*1e-3,                             // efficient FD normals https://iquilezles.org/articles/normalsSDF/\n        O.rgb *= .5 -.5* normalize(  D.xxy* d( q + D.xxy ) + D.xyx* d( q + D.xyx ) + D.yxx* d( q + D.yxx ) + D.yyy * d( q + D.yyy ) );\n} \n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}