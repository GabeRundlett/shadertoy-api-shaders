{
    "Shader": {
        "info": {
            "date": "1474765621",
            "description": "Triangular Voronoi",
            "flags": 0,
            "hasliked": 0,
            "id": "ltKGWD",
            "likes": 23,
            "name": "Triangular Voronoi (234c)",
            "published": 3,
            "tags": [
                "voronoi",
                "twotweets",
                "tweet",
                "two",
                "triangular"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1008
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2016 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n/* triangle Voronoi\n\n    I played with voronoi and many 2d distance shape, and after try circles and quads, i tried triangle.\n    And the shape result its funny similar than the famous IQ shaders, but the result is simpler :) \n        Voronoi - metrics     https://www.shadertoy.com/view/MdSGRc\n        Blocks                https://www.shadertoy.com/view/lsSGRc\n\tthis re-discovered things permit to me to finally understand theses codes :)\n*/\n\n/* 234c */\nvoid mainImage( out vec4 f, vec2 g )\n{\n\tvec2 p = g /= iResolution.y / 5.; f-=f-1.;\n    for(int x=-2;x<=2;x++)\n    for(int y=-2;y<=2;y++)\n\t\tp = vec2(x,y),\n\t\tp += .5 + .5*sin( iDate.w * fract(sin((floor(g)+p)*mat2(2,5,5,2)))) - fract(g),\n\t\tf = min(f, sqrt(max(abs(p.x) - p.y, p.y)));\n}/**/\n\n// see possible variation with the code under\n\n/* 263c\nvoid mainImage( out vec4 f, vec2 g )\n{\n\tvec2 p = g /= iResolution.y / 5.; f-=f-1.;\n    \n    //g = (g+g-p)/p.y;g/=dot(g,g)*.5;g.x += iDate.w; // special central uv\n    for(int x=-2;x<=2;x++)\n    for(int y=-2;y<=2;y++)\n\t\tp = vec2(x,y),\n\t\tp += .5 + .5*sin( iDate.w + 9. * fract(sin((floor(g)+p)*mat2(2,5,5,2)))) - fract(g),\n\t\tf = min(f, max(max(p.x, -p.x) - p.y, +p.y)); // triangle\n    \t//p=abs(p),f = min(f, max(p.x, p.y)); // quad\n    \t//f = min(f, length(p)); // circle\n    \n\tf = sqrt(f * vec4(0.3,.7,1,1)); // with color and simple gamma correction\n}/**/\n\n/* original XShade code\nfloat voronoi(vec2 uv)\n{\n    vec2 g = floor(uv), f = fract(uv), p;\n    float res = 3.,d;\n\tmat2 m = mat2(2,5,5,2);\n\tfor(int x=-1;x<=1;x++)\n\t{\n\t\tfor(int y=-1;y<=1;y++)\n\t\t{\n\t\t\tp = vec2(x,y);\n\t\t\tp += 0.5 + 0.5*sin( uTime + uSlider1*fract(sin((g+p)*m)*uSlider2)) - f;\n\t\t\td = max(max(p.x, -p.x) - p.y, p.y);\n\t\t\tres = min(res, d);\n\t\t}\n\t}\n    return res;\n}\n\nvoid main(void)\n{\n\tvec2 uv = (gl_FragCoord.xy * 2. - uScreenSize)/uScreenSize.y * uSlider;\n\n\tgl_FragColor = vec4(sqrt(voronoi(uv) * uColor),1);\n}\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}