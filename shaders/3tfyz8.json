{
    "Shader": {
        "info": {
            "date": "1591365823",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "3tfyz8",
            "likes": 12,
            "name": "Day 169 - kdtree",
            "published": 3,
            "tags": [
                "kdtree",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 168 - Quadtree\" by jeyko. https://shadertoy.com/view/WlsyRr\n// 2020-06-05 07:34:31\n\n// This is a classifier of kdtree points, but it doesn't build the actual structure. \n// That would require a bit different of an approach \n\n\nvec2 r12(float i){\n\treturn texture(iChannel0,vec2(mod(i,256.)/256.,floor(i/256.)*256.)).xy*2. - 1.;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 uv = (U- 0.5*iResolution.xy)/iResolution.y;\n\n    //uv /= dot(uv,uv)*19.;\n    \n    vec3 col = vec3(0);\n\n    \n    float id = 0.;\n    \n    float d = 10e6;\n    float dside = 10e6;\n    \n    #define ITERS 19.\n    #define DOTS 19.\n    \n    for(float i = 0.; i < DOTS; i++){\n    \tvec2 p = r12(i+24.)/1.;\n        \n        p.xy += vec2(sin(i+iTime),cos(i+iTime))/20.;\n        \n        d = min(d, length(p-uv));\n        \n        vec2 split = vec2(0.,0.);\n        \n        for(float k = 1.; k < ITERS; k++ ){\n\t\t\n            float stsz = 1./(pow(2.,floor(k/2.)));\n            \n            vec2 poffs = sign(p-split);\n            vec2 uoffs = sign(uv-split);\n            \n            if(uoffs == poffs){\n            \tsplit += stsz*vec2( poffs.x * float( mod(k,2.) == 1. ) , poffs.y * float( mod(k,2.) == 0. ) );\n            \t\n                id += 2.4;\n            } else {\n                \n                \n                dside = min(dside , abs(uv.x - split.x)-0.0 );\n                dside = min(dside , abs(uv.x - split.x - stsz*2.)-0.0 );\n                dside = min(dside , abs(uv.y - split.y)-0.0 );\n                dside = min(dside , abs(uv.y - split.y - stsz*2.)-0.0 );\n                break;\n            }\n\n        }\t\n    \n    }\n    \n    col += 0.5 + sin(id + vec3(1.,0.5,0.5))/3.;\n    \n    float dw = 0.005;\n    float dott = smoothstep(dw*1.4,dw,d);\n    dw *= 0.8;\n    dside = smoothstep(dw*1.14,dw,dside);\n    \n    col -= vec3(0.,0.4,0.8)*dside;\n    \n    col = mix(col,vec3(1,0.1,0.4),dott);\n    \n    C = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}