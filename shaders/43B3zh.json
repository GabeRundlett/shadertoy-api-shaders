{
    "Shader": {
        "info": {
            "date": "1708172325",
            "description": "Chromatic Aberration Simulation by linearly interpolating blur-weights in RGB, YUV, or YCgCo.\nOriginal idea by Kusma: https://github.com/kusma/vlee/blob/master/data/postprocess.fx",
            "flags": 0,
            "hasliked": 0,
            "id": "43B3zh",
            "likes": 0,
            "name": "Barrel Chrome Aberration",
            "published": 3,
            "tags": [
                "blur",
                "filter",
                "post",
                "aberration",
                "editors"
            ],
            "usePreview": 0,
            "username": "belisoful",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "// To the fullest extent possible under law,\n// the fork author waives all copyright and related or neighboring rights to this work.\n/*\n<videoEditor>\n    <option id=\"1\" title=\"Separation Amount\" name=\"iAmount\" type=\"float\" default=\"0.5\">\n            <!-- id range int[1, 9998], md5 with shaderID prepended and \":\" in between?  -->\n         <!-- type can be [float, int, percent, angle, rgb, rgba, point, popup, toggle] -->\n        <minimum>0</minimum>\n        <maximum>1</maximum>\n        <displaymin>0</displaymin>\n        <displaymax>1</displaymax>\n        <step>0.01</step>\n        <menu>\n            <item>RGB Blue-Red</item>\n            <item>RGB Blue-Red</item>\n        </menu>\n        <flags>\n            <!-- <flag>default</flag> <!-- default, noAnimation, hidden, disabled, collapsed, noSave, noDisplay, ignoreMinMax -->\n        </flags>\n        <disable>\n            <condition id=\"1\" name=\"iAmount\" isnot=\"1\"/>\n        </disable>\n        <display>\n            <condition id=\"1\" name=\"iAmount\" is=\"1\"/>\n        </display>\n        \n    </option>\n    <option id=\"1\" title=\"Distance\" name=\"iDistance\" type=\"float\" default=\"50.0\">\n            <!-- id range int[1, 9998], md5 with shaderID prepended and \":\" in between?  -->\n         <!-- type can be [float, int, percent, angle, rgb, rgba, point, popup, toggle] -->\n        <minimum>0</minimum>\n        <maximum>1</maximum>\n        <displaymin>0</displaymin>\n        <displaymax>1</displaymax>\n        <step>0.01</step>\n        <menu>\n            <item>RGB Blue-Red</item>\n            <item>RGB Blue-Red</item>\n        </menu>\n        <flags>\n            <!-- <flag>default</flag> <!-- default, noAnimation, hidden, disabled, collapsed, noSave, noDisplay, ignoreMinMax -->\n        </flags>\n        <disable>\n            <condition id=\"1\" name=\"iAmount\" isnot=\"1\"/>\n        </disable>\n        <display>\n            <condition id=\"1\" name=\"iAmount\" is=\"1\"/>\n        </display>\n    </option>\n    <group id=\"2\" name=\"Group Name\">\n        <disable/>\n        <display/>\n        <flags/>\n        <option/>\n        <option/>\n    </group>\n    <option id=\"100\" title=\"Debug\" name=\"iDebug\" type=\"toggle\" default=\"0\">\n            <!-- id range int[1, 9998], md5 with shaderID prepended and \":\" in between?  -->\n        <flags>\n            <!-- <noAnimation /> <!-- default, noAnimation, hidden, disabled, collapsed, noSave, noDisplay, ignoreMinMax -->\n        <flags>\n    </option>\n</videoEditor>\n\n--\n\nHow to make your shader Video Editor Aware \n\nTo parameterize a shader, make the default value for the input into a #define, \nand reference the the input variable when setting the default.  The values\nare no longer going to be precompiled defaults.\n```\n    const float MAX_DIST_PX = 50.0;\n    const int num_iter = 7;\n\n```\nbecomes\n```\n    #ifndef iDistance\n        #define iDistance 50.0\n    #endif\n    #ifndef iIterations\n        #define iIterations 10\n    #endif\n    \n    float MAX_DIST_PX = iDistance;\n    int num_iter = iIterations;\n```\n\nAlso add the tag \"editors\" to the shader.\n\n*/\n//#ve_option \"Separation Amount\" iAmount float(0, 0, 1, 1, .01)\n#ifndef iAmount\n    #define iAmount 0.5\n#endif\n\n//#ve_option \"Distance\" iDistance float(0, 0, 75, 250, 1)\n#ifndef iDistance\n    #define iDistance 50.0\n#endif\n\n//#ve_option \"Iterations\" iIterations int(5, 5, 30, 100, 1)\n#ifndef iIterations\n    #define iIterations 10\n#endif\n\n/* #ve_option \"Aberration Style\" iAberrationStyle menu(\n \"RGB Blue-Red\", \"RGB Custom\", \"RGB Custom Code\"\n \"YCoCg Green-Pink\", \"YCoCg Purple-Green\", \"YCoCg Cyan-Orange\", \"YCoCg Yello-Blue\", \"YCoCg Custom\", \"YCoCg Custom Code\", \n \"YUV Purple-Green\", \"YUV Purple-Green\", \"YUV Cyan-Orange\", \"YUV Yello-Blue\",\n \"YUV Custom\", \"YUV Custom Code\")\n*/\n#ifndef iAberrationStyle\n    #define iAberrationStyle 14\n#endif\n\n#ifndef iCustomAberrationR\n    #define iCustomAberrationR 1.5\n#endif\n\n#ifndef iCustomAberrationRdt\n    #define iCustomAberrationRdt -3.0\n#endif\n\n#ifndef iCustomAberrationG\n    #define iCustomAberrationG -1.5\n#endif\n\n#ifndef iCustomAberrationGdt\n    #define iCustomAberrationGdt 3.0\n#endif\n\n#ifndef iCustomAberrationB\n    #define iCustomAberrationB -1.5\n#endif\n\n#ifndef iCustomAberrationBdt\n    #define iCustomAberrationBdt 3.0\n#endif\n\n#ifndef iCustomAberrationY\n    #define iCustomAberrationY 1.0\n#endif\n\n#ifndef iCustomAberrationYdt\n    #define iCustomAberrationYdt 0.0\n#endif\n\n#ifndef iCustomAberrationCg\n    #define iCustomAberrationCg 0.5\n#endif\n\n#ifndef iCustomAberrationCgdt\n    #define iCustomAberrationCgdt 0.0\n#endif\n\n#ifndef iCustomAberrationCo\n    #define iCustomAberrationCo -0.3\n#endif\n\n#ifndef iCustomAberrationCodt\n    #define iCustomAberrationCodt 1.2\n#endif\n\n#ifndef iCustomAberrationU\n    #define iCustomAberrationU 0.0\n#endif\n\n#ifndef iCustomAberrationUdt\n    #define iCustomAberrationUdt 0.0\n#endif\n\n#ifndef iCustomAberrationV\n    #define iCustomAberrationV 1.4\n#endif\n\n#ifndef iCustomAberrationVdt\n    #define iCustomAberrationVdt 1.3\n#endif\n\n//#ve_option \"Noise Amount\" iNoiseAmount float(0, 0.5, 5, 50, .1)\n#ifndef iNoiseAmount\n    #define iNoiseAmount 1.0\n#endif\n\n//#ve_option \"Debug\" iDebug check(0)\n#ifndef iDebug\n    #define iDebug 0\n#endif\n\n\n\nfloat remap01( float t, float a, float b ) {\n\treturn clamp( (t - a) / (b - a), 0.0, 1.0 );\n}\nvec2 remap01( vec2 t, vec2 a, vec2 b ) {\n\treturn clamp( (t - a) / (b - a), 0.0, 1.0 );\n}\n\n//float linterp( float t ) {\n//\treturn clamp( 1.0 - abs( 2.0*t - 1.0 ), 0.0, 1.0 );\n//\n\n\n//note: input [0;1]\nvec4 spectrum_offset_rgb( float t )\n{\n    //note: optimisation from https://twitter.com/Stubbesaurus/status/818847844790575104\n    //t = 3.0 * t - 0.5;\n\t//vec3 ret = clamp( vec3(1.0-t, 1.0-abs(t-1.0), t-1.0), 0.0, 1.0);\n    vec4 ret;\n    \n    if (iAberrationStyle == 1) {\n        ret = vec4( iCustomAberrationR + iCustomAberrationRdt * t, \n                    1.0-abs(iCustomAberrationG + iCustomAberrationGdt * t),\n                    iCustomAberrationB + iCustomAberrationBdt * t, 1.0 );\n    } else if (iAberrationStyle == 2) {\n        ret = vec4(iCustomAberrationR + iCustomAberrationRdt * t, \n                   1.0-abs(iCustomAberrationG + iCustomAberrationGdt * t),\n                   iCustomAberrationB + iCustomAberrationBdt * t, 1.0 );\n    } else { // Blue-Red\n        float t0 =  -1.5 + 3.0 * t;\n        ret = vec4( -t0, 1.0-abs(t0), t0, 1.0);\n    }\n    return clamp(ret, 0.0, 1.0);\n}\n\nconst float gamma = 2.2;\nvec4 lin2srgb( vec4 c )\n{\n    return pow( c, vec4(gamma) );\n}\nvec4 srgb2lin( vec4 c )\n{\n    return pow( c, vec4(1.0/gamma));\n}\n\n\nvec4 yCgCo2rgb(vec4 ycc)\n{\n    float R = ycc.x - ycc.y + ycc.z;\n\tfloat G = ycc.x + ycc.y;\n\tfloat B = ycc.x - ycc.y - ycc.z;\n    return vec4(R,G,B, ycc.w);\n}\n\nvec4 spectrum_offset_ycgco( float t )\n{\n    vec4 ygo;\n    if (iAberrationStyle == 4) {\n        ygo = vec4( 1.0, -1.5*t, 0.0, 1.0 ); //green-purple\n    } else if (iAberrationStyle == 5) {\n        ygo = vec4( 1.0, 0.0, -1.25*t, 1.0 ); //cyan-orange\n    } else if (iAberrationStyle == 6) {\n        ygo = vec4( 1.0, 0.0, 1.5*t, 1.0 ); //brownyello-blue\n    } else if (iAberrationStyle == 7) {\n        ygo = vec4( iCustomAberrationY + iCustomAberrationYdt * t, \n                    iCustomAberrationCg + iCustomAberrationCgdt * t,\n                    iCustomAberrationCo + iCustomAberrationCodt * t, 1.0 );\n    } else if (iAberrationStyle == 8) {\n        // Make your own code here\n        ygo = vec4( iCustomAberrationY + iCustomAberrationYdt * t, \n                    iCustomAberrationCg + iCustomAberrationCgdt * t,\n                    iCustomAberrationCo + iCustomAberrationCodt * t, 1.0 );\n    } else { // default 3, green pink\n        ygo = vec4( 1.0, 1.5*t, 0.0, 1.0 ); //green-pink\n    }\n    return yCgCo2rgb( ygo );\n}\n\nvec4 yuv2rgb( vec4 yuv )\n{\n    vec4 rgb;\n    rgb.r = yuv.x + yuv.z * 1.13983;\n    rgb.g = yuv.x + dot( vec2(-0.39465, -0.58060), yuv.yz );\n    rgb.b = yuv.x + yuv.y * 2.03211;\n    rgb.a = yuv.w;\n    return rgb;\n}\n\n\n// ====\n\n//note: from https://www.shadertoy.com/view/XslGz8\nvec2 radialdistort(vec2 coord, vec2 amt)\n{\n\tvec2 cc = coord - 0.5;\n\treturn coord + 2.0 * cc * amt;\n}\n\n// Given a vec2 in [-1,+1], generate a texture coord in [0,+1]\nvec2 barrelDistortion( vec2 p, vec2 amt )\n{\n    p = 2.0 * p - 1.0;\n\n    /*\n    const float maxBarrelPower = 5.0;\n\t//note: http://glsl.heroku.com/e#3290.7 , copied from Little Grasshopper\n    float theta  = atan(p.y, p.x);\n    vec2 radius = vec2( length(p) );\n    radius = pow(radius, 1.0 + maxBarrelPower * amt);\n    p.x = radius.x * cos(theta);\n    p.y = radius.y * sin(theta);\n\n\t/*/\n    // much faster version\n    //const float maxBarrelPower = 5.0;\n    //float radius = length(p);\n    float maxBarrelPower = sqrt(5.0);\n    float radius = dot(p,p); //faster but doesn't match above accurately\n    p *= pow(vec2(radius), maxBarrelPower * amt);\n\t/* */\n\n    return p * 0.5 + 0.5;\n}\n\n//note: from https://www.shadertoy.com/view/MlSXR3\nvec2 brownConradyDistortion(vec2 uv, float dist)\n{\n    uv = uv * 2.0 - 1.0;\n    // positive values of K1 give barrel distortion, negative give pincushion\n    float barrelDistortion1 = 0.1 * dist; // K1 in text books\n    float barrelDistortion2 = -0.025 * dist; // K2 in text books\n\n    float r2 = dot(uv,uv);\n    uv *= 1.0 + barrelDistortion1 * r2 + barrelDistortion2 * r2 * r2;\n    //uv *= 1.0 + barrelDistortion1 * r2;\n    \n    // tangential distortion (due to off center lens elements)\n    // is not modeled in this function, but if it was, the terms would go here\n    return uv * 0.5 + 0.5;\n}\n\nvec2 distort( vec2 uv, float t, vec2 min_distort, vec2 max_distort )\n{\n    vec2 dist = mix( min_distort, max_distort, t );\n    //return radialdistort( uv, 2.0 * dist );\n    //return barrelDistortion( uv, 1.75 * dist ); //distortion at center\n    return brownConradyDistortion( uv, 75.0 * dist.x );\n}\n\n// ====\n\nvec4 spectrum_offset_yuv( float t )\n{\n    vec4 yuv;\n    if (iAberrationStyle == 10) {\n        yuv = vec4( 1.0, 0.0, 2.0*t, 1.0 ); //purple-green\n    } else if (iAberrationStyle == 11) {\n        yuv = vec4( 1.0, 0.0, -1.0*t, 1.0 ); //cyan-orange\n    } else if (iAberrationStyle == 12) {\n        yuv = vec4( 1.0, -0.75*t, 0.0, 1.0 ); //brownyello-blue\n    } else if (iAberrationStyle == 13) {\n        yuv = vec4( iCustomAberrationY + iCustomAberrationYdt * t, \n                    iCustomAberrationU + iCustomAberrationUdt * t,\n                    iCustomAberrationV + iCustomAberrationVdt * t, 1.0 );\n    } else if (iAberrationStyle == 14) {\n        // Make your own code here\n        yuv = vec4( iCustomAberrationY + iCustomAberrationYdt * t, \n                    iCustomAberrationU + iCustomAberrationUdt * t,\n                    iCustomAberrationV + iCustomAberrationVdt * t, 1.0 );\n    } else { //default 9 purple-green\n        yuv = vec4( 1.0, 3.0*t, 0.0, 1.0 ); //purple-green\n    }\n    return yuv2rgb( yuv );\n}\n\nvec4 spectrum_offset( float t )\n{\n    if (iAberrationStyle >= 0 && iAberrationStyle <= 2)\n        return spectrum_offset_rgb( t );\n   \t//return srgb2lin( spectrum_offset_rgb( t ) );\n    //return lin2srgb( spectrum_offset_rgb( t ) );\n\n    if (iAberrationStyle >= 3 && iAberrationStyle <= 8)\n        return spectrum_offset_ycgco( t );\n    \n    if (iAberrationStyle >= 9 && iAberrationStyle <= 14)\n        return spectrum_offset_yuv( t );\n}\n\n// ====\n\n/*\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n*/\n\nvec4 render( vec2 uv )\n{\n    if (iDebug == 1 && uv.x > 0.7 && uv.y > 0.7 )\n    {\n        float d = length( vec2(0.77)- uv );\n        d = min( d, length( vec2(0.82)- uv ) );\n        d = min( d, length( vec2(0.875)- uv ) );      \n        return vec4(vec3( step( d, 0.025)), 1.0 );\n    }\n    \n    return srgb2lin(texture( iChannel0, uv ).rgba );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\n    if (iDebug == 1 && uv.x > 0.7 &&  uv.y < 0.2 )\n    {\n        vec2 luv = remap01( uv, vec2(0.7,0.0), vec2(1.0, 0.175) );\n        vec4 c;\n        c.r = step( luv.x, 1.0/3.0);\n        c.g = step( 1.0/3.0, luv.x )*step(luv.x, 2.0/3.0);\n        c.b = step( 2.0/3.0, luv.x );\n        c.a = step( luv.x, 1.0/3.0 );\n        c *= 0.4;\n        \n        vec4 rgb = spectrum_offset_rgb( luv.x );\n        c += step( abs(rgb-luv.yyyy), vec4(0.0125) );\n\n        if ( uv.y > 0.20125 )\n        {\n            c = spectrum_offset( luv.x );\n            if ( uv.y < 0.21 )\n                c = vec4(0.0);\n                \n        }\n        \n        fragColor.rgba = c;\n        \n        if ( uv.y > 0.175 )\n            fragColor.rgba = rgb;\n        \n        return;\n    }\n     \n    float max_distort_px = iDistance * (1.0-iMouse.x/iResolution.x);\n\tvec2 max_distort = vec2(max_distort_px) / iResolution.xy;\n    vec2 min_distort = iAmount * (1.0-iMouse.y/iResolution.y) * max_distort;\n\n    //vec2 oversiz = vec2(1.0);\n    vec2 oversiz = distort( vec2(1.0), 1.0, min_distort, max_distort );\n    uv = remap01( uv, 1.0-oversiz, oversiz );\n    \n    //debug oversiz\n    //vec2 distuv = distort( uv, 1.0, max_distort );\n    //if ( abs(distuv.x-0.5)>0.5 || abs(distuv.y-0.5)>0.5)\n    //{\n    //    fragColor = vec4( 1.0, 0.0, 0.0, 1.0 ); return;\n    //}\n    int num_iter = iIterations;\n    float stepsiz = 1.0 / (float(num_iter)-1.0);\n    float rnd = fract(1.61803398875*float(iFrame)+texture(iChannel1, fragCoord.xy/vec2(textureSize(iChannel1,0)), -10.0 ).x ); //nrand( uv + fract(iTime) );\n    float t = stepsiz * rnd * 9.0 / (float(num_iter)-1.0);\n\n    vec4 sumcol = vec4(0.0);\n\tvec4 sumw = vec4(0.0);\n\tfor ( int i=0; i<num_iter; ++i )\n\t{\n\t\tvec4 w = spectrum_offset( t );\n\t\tsumw += w;\n        vec2 uvd = distort(uv, t, min_distort, max_distort );\n\t\tsumcol += w * render( uvd );\n        t += stepsiz;\n\t}\n    sumcol.rgba /= sumw;\n    \n    vec4 outcol = sumcol.rgba;\n    outcol = lin2srgb( outcol );\n    outcol += (rnd - 0.5)*iNoiseAmount/255.0;\n    \n\tfragColor = outcol;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}