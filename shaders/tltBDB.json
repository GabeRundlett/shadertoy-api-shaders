{
    "Shader": {
        "info": {
            "date": "1613404881",
            "description": "Mandelbrot fractal.",
            "flags": 0,
            "hasliked": 0,
            "id": "tltBDB",
            "likes": 2,
            "name": "Mandelbrot Fractal Demo",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "moranzcw",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// Mandelbrot Fractal Demo - by moranzcw - 2021\n// Email: moranzcw@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n#define Scale 1.4\n\nvec3 fractal(vec2 p)\n{    \n\tvec2 z = vec2(0);  \n    \n    int depth = int(mix(3.0, 64.0, sin(iTime) * 0.5 + 0.5));\n\tfor (int i = 0; i < depth; ++i) \n    {\n\t\tz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + p; \n\n\t\tif (dot(z,z) > 4.) \n        {\n\t\t\tfloat s = .05 * float(i);\n\t\t\treturn vec3(vec3(cos(s + 0.5), cos(s + 0.5), cos(s + 0.5)) * 0.4 + 0.6);\n\t\t}\n\t}\n\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    coord *= Scale;\n    coord -= vec2(0.5, 0.0);\n\n    vec3 color = vec3(0);\n    \n    color = fractal(coord);\n\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}