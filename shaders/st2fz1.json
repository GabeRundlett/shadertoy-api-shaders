{
    "Shader": {
        "info": {
            "date": "1651809693",
            "description": "A radar screen just like in the movies.",
            "flags": 8,
            "hasliked": 0,
            "id": "st2fz1",
            "likes": 3,
            "name": "Radar shader with sound",
            "published": 3,
            "tags": [
                "grid",
                "radar"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "mat2 rotate(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat ring(float uvRadius, float ringRadius) {\n    return smoothstep(ringRadius - 0.01, ringRadius, uvRadius) * smoothstep(ringRadius + 0.01, ringRadius, uvRadius);\n}\n\nfloat grid(vec2 uv) {\n    if (fract(uv.x * 10.0) < 0.01) return 1.0;\n    if (fract(uv.y * 10.0) < 0.01) return 1.0;\n    return 0.0;\n}\n\nvec2 random2(vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)),\n\t\tdot(st, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(st) * 43758.5453123 * 0.7897);\n}\n\nfloat circle(vec2 uv, vec2 pos, float radius) {\n    return smoothstep(radius, 0.0, length(uv-pos));\n}\n\nfloat circle2(vec2 uv, vec2 pos, float radius) {\n    return radius*0.1 / length(uv-pos);\n}\n\nfloat randomSin(float t) {\n    return sin(t*0.2352)*sin(t*1.5843)*sin(t*1.2968)+1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    float radius = length(uv);\n    vec3 col = vec3(0.0);\n    float angle = mod(iTime, 3.14159*2.0) - 3.14159;\n    \n    col += ring(radius, 0.1); \n    col += ring(radius, 0.25);\n    col += ring(radius, 0.4);\n    \n    col += smoothstep(0.01, 0.0, uv.x-uv.y) * smoothstep(-0.01, 0.0, uv.x-uv.y);\n    col += smoothstep(0.01, 0.0, -uv.x-uv.y) * smoothstep(-0.01, 0.0, -uv.x-uv.y);\n    \n    col += grid(uv) * smoothstep(0.4, 0.39, radius);\n\n    vec3 radarColor = mix(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), smoothstep(0.7, 0.8, fract(iTime/10.0)) * smoothstep(1.0, 0.9, fract(iTime/10.0)));\n    col *= radarColor;\n    \n    for (int i = 0; i < 15; i++) {\n        vec2 pos = random2(vec2(i, i))*0.25;\n        float itemAngle = atan(pos.y, -pos.x);\n        float size = (mod(-(angle - itemAngle), 3.14159*2.0)-2.0) / 30.0 * randomSin(float(i)+50.0);\n        \n        if (size > 0.0) {\n            vec3 dotColor = vec3(0.0, 0.5, 1.0);\n            if (randomSin(float(i)) > 1.0) {\n                dotColor = vec3(1.0, 0.0, 0.0);\n            }\n            \n            col += circle2(uv, pos, size) * dotColor;\n        }\n    }\n    \n    uv *= rotate(iTime);\n    \n    if (uv.y > 0.0 && uv.x > 0.0) {\n        col += vec3(smoothstep(radius / 5.0, 0.0, uv.y)) * smoothstep(0.4, 0.39, radius) * radarColor;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 random2(vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)),\n\t\tdot(st, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(st) * 43758.5453123 * 0.7897);\n}\n\nfloat randomSin(float t) {\n    return sin(t*0.2352)*sin(t*1.5843)*sin(t*1.2968)+1.0;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float angle = mod(time, 3.14159*2.0) - 3.14159;\n    float sound = 0.0;\n    \n    for (int i = 0; i < 15; i++) {\n        vec2 pos = random2(vec2(i, i))*0.25;\n        float itemAngle = atan(pos.y, -pos.x);\n        float objSound = (mod(-(angle - itemAngle)/2.0, 3.14159*2.0));\n        if (objSound > 6.0) //sound = objSound * 5.0; \n        sound = smoothstep(6.0, 7.0, objSound)*15.0;\n    }\n    \n    return vec2( sin(sound*440.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}