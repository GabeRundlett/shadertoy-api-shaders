{
    "Shader": {
        "info": {
            "date": "1595980223",
            "description": "Masking shapes and changing backogrunds.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tlfR8",
            "likes": 0,
            "name": "PlasmaShaper",
            "published": 3,
            "tags": [
                "parabola",
                "lisandro"
            ],
            "usePreview": 0,
            "username": "parabola",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "\n\n#define PI 3.14159265359\n#define TWO_PI PI * 2\n\nfloat poly(vec2 uv,vec2 p, float s, float dif,int N,float a){\n    // Remap the space to -1. to 1.\n    vec2 st = p - uv ;\n    // Angle and radius from the current pixel\n    float a2 = atan(st.x,st.y)+a;\n    \n    float N_float = float(N);\n    float r = PI*2.0/N_float;\n    float d = cos(floor(.5+a2/r)*r-a2)*length(st);\n    float e = 1.0 - smoothstep(s,s+dif,d);\n    return e;\n}\n\n\nfloat poly(vec2 uv,vec2 p, float s, float dif,float N,float a){\n    // Remap the space to -1. to 1.\n    vec2 st = p - uv ;\n    // Angle and radius from the current pixel\n    float a2 = atan(st.x,st.y)+a;\n    \n    float N_float = float(N);\n    float r = PI*2.0/N_float;\n    float d = cos(floor(.5+a2/r)*r-a2)*length(st);\n    float e = 1.0 - smoothstep(s,s+dif,d);\n    return e;\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nvec2 rotate2d(vec2 uv,float _rot){\n    float fix = iResolution.x/iResolution.y; \n    uv-=vec2(0.5*fix,0.5);\n    uv = rotate2d(_rot)*uv;\n    uv+=vec2(0.5*fix,0.5);\n    return uv;\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2 (gl_FragCoord.xy/iResolution.xy);\n\n    float fix = iResolution.x/iResolution.y; \n    uv=fract(vec2(uv.x,uv.y)*15.); \n    \n    uv.x*=fix;\n    float shape1 = poly(uv,vec2(0.5*fix,0.5), 0.35,0.008,4,iTime)*2.; \n\n    uv = vec2 (gl_FragCoord.xy/iResolution.xy);\n    uv.x*=fix;\n    float shape2 = poly(uv,vec2(0.5*fix,0.5), sin(iTime*3.)/3.,0.0003,3.,iTime); \n \n    float shape3 = poly(uv,vec2(0.5*fix,0.5), sin(-iTime*3.)/3.,0.0003,4.,-iTime); \n   \n    vec3 finalShapePass = vec3 (mix(shape2,shape3,shape1) );\n    vec3 finalShapePass2 = vec3 (mix(shape2,shape3,shape3) )-vec3 (mix(shape2,shape3,shape2) );\n   \n   \n    uv = fract(rotate2d(vec2 (gl_FragCoord.xy/iResolution.xy),iTime/9.));\n    vec2 p = vec2(0.5) - uv; \n    float r = length(p);\n    float a = atan(p.x,p.y);\n    \n    float color= fract( sin(uv.x*9.+iTime)-iTime+sin(r+iTime/50.)*5.);\n    vec3 finalColor= vec3(color-0.2,color-0.1,color-0.1);\n   \n   \n    vec3 finalPass= vec3(mix(finalColor,finalShapePass,-finalShapePass));\n   \n\n    fragColor = vec4(finalPass,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}