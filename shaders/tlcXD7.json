{
    "Shader": {
        "info": {
            "date": "1581070859",
            "description": "The invasion is coming",
            "flags": 0,
            "hasliked": 0,
            "id": "tlcXD7",
            "likes": 9,
            "name": "Panspermia Incoming",
            "published": 3,
            "tags": [
                "symmetry",
                "virus"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "// \"Panspermia Incoming\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0  // optional antialising\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3v3 (vec3 p);\n\nvec4 qrHit;\nvec3 ltDir, bGrid, cId, obRnd, obDisp;\nvec2 obRotCs[2];\nfloat tCur, dstFar;\nbool cOcc;\nconst float pi = 3.14159;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n\nvec3 SymCom (vec3 p, vec2 cs, vec2 w)\n{\n  vec2 f;\n  float a;\n  p.x = - abs (p.x);\n  for (int j = 0; j < 4; j ++) {\n    f.y = dot (p.yz, vec2 (cs.x, - cs.y));\n    if (f.y > 0.) {\n      f.x = dot (p.yz, cs.yx);\n      p.yz = vec2 (dot (f, vec2 (cs.y, - cs.x)), dot (f, cs));\n    }\n    if (j < 3) p.xy = Rot2Cs (p.xy, w);\n  }\n  return vec3 (p.xy, - p.z);\n}\n\nvec3 IcosSym (vec3 p)\n{\n  vec2 cs;\n  cs = CosSin (0.5 * acos (sqrt (5.) / 3.));\n  p.yz = Rot2Cs (vec2 (p.y, abs (p.z)), vec2 (cs.x, - cs.y));\n  return SymCom (p, cs, CosSin (-2. * pi / 3.));\n}\n\nvec3 DodecSym (vec3 p)\n{\n  vec2 cs;\n  cs = CosSin (0.5 * atan (2.));\n  p.xz = Rot2Cs (vec2 (p.x, abs (p.z)), cs);\n  p.xy = Rot2Cs (p.xy, CosSin (- pi / 10.));\n  return SymCom (p, cs, CosSin (-2. * pi / 5.));\n}\n\nvoid ObjState ()\n{\n  obRnd = Hashv3v3 (cId);\n  obDisp = bGrid * (cId + 0.5) + (0.1 + 0.05 * bGrid.x * obRnd.x) *\n     vec3 (CosSin (obRnd.z * tCur + obRnd.x), 0.).xzy;\n  obRotCs[0] = CosSin ((obRnd.y - 0.5) * 0.7 * tCur );\n  obRotCs[1] = CosSin ((obRnd.z - 0.5) * 0.7 * tCur);\n  cOcc = (obRnd.x * step (2., length (cId.xz)) > 0.7);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, q1, q2;\n  float d, d1, d2, ds, r1, r2, len, s;\n  d = dstFar;\n  if (cOcc) {\n    p -= obDisp;\n    p.xz = Rot2Cs (p.xz, obRotCs[0]);\n    p.xy = Rot2Cs (p.xy, obRotCs[1]);\n    len = 0.3;\n    q1 = IcosSym (p);\n    q1.z += 0.18 + len;\n    s = 0.5 * (1. - q1.z / len);\n    r1 = 0.03 * (1. + 5. * s * s);\n    d1 = PrCylAnDf (q1, r1, 0.016 * (1. - 0.7 * s), len);\n    q2 = DodecSym (p);\n    q2.z += 0.18 + len;\n    s = 0.5 * (1. - q2.z / len);\n    r2 = 0.03 * (1. + 5. * s * s);\n    d2 = PrCylAnDf (q2, r2, 0.016 * (1. - 0.7 * s), len);\n    if (d1 < d2) {\n      d = d1;\n      qrHit = vec4 (q1, r1);\n    } else {\n      d = d2;\n      qrHit = vec4 (q2, r2);\n    }\n    q = p;\n    ds = PrSphDf (q, 0.2);\n    if (ds < d) {\n      d = SmoothMin (d, ds, 0.02);\n      qrHit = vec4 (q, 0.);\n    }\n    d *= 0.8;\n  }\n  return d;\n}\n\nvec3 ObjCell (vec3 p)\n{\n  cId.xz = floor (p.xz / bGrid.xz);\n  p.y += 0.2 * tCur * (1. + Hashfv2 (cId.xz));\n  cId.y = floor (p.y / bGrid.y);\n  return p;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cIdP, s, rdi;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi = 1. / rd;\n  cIdP = vec3 (-999.);\n  dHit = eps;\n  for (int j = 0; j < 220; j ++) {\n    p = ObjCell (ro + dHit * rd);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    d = ObjDf (p);\n    s = (bGrid * (cId + step (0., rd)) - p) * rdi;\n    d = min (d, abs (Minv3 (s)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p, cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  cIdP = vec3 (-999.);\n  for (int j = 0; j < 20; j ++) {\n    p = ObjCell (ro + d * rd);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > 2.) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = tCur * 3.;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return 1.5 * mix (vec3 (0.25, 0.6, 1.), vec3 (0., 0.4, 0.3), 0.5 * (1. - rd.y)) *\n     (0.8 + 0.2 * rd.y) * (1. + 0.25 * gd);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn, p;\n  float dstObj, sh;\n  bGrid = vec3 (2.);\n  bgCol = BgCol (rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    p = ObjCell (ro);\n    ObjState ();\n    vn = ObjNf (p);\n    if (length (p - obDisp) > 0.21) col = (length (qrHit.xy) < qrHit.w) ?\n       vec3 (1., 0.4, 0.4) * (0.6 + 0.4 * smoothstep (-0.1, 0.1, sin (15. * atan (qrHit.y, qrHit.x)))) :\n       vec3 (0.4, 1., 0.4) * (0.6 + 0.4 * smoothstep (-0.1, 0.1, sin (15. * 2. * pi * qrHit.z)));\n    else col = vec3 (1., 1., 0.4);\n    sh = ObjSShadow (ro, ltDir);\n    col = col * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       0.1 * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    col = mix (col, bgCol, 0.3 + 0.7 * smoothstep (0.4, 1., dstObj / dstFar));\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 10.;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = 0.6 * pi * mPtr.y;\n  } else {\n    az = 0.02 * pi * tCur;\n    el = 0.1 * pi + 0.2 * pi * sin (0.01 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (0.5);\n  ltDir = vuMat * normalize (vec3 (1., 1., -2.));\n  dstFar = 60.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 4.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec3 Hashv3v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec3 (0., cHashVA3.xy)) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}