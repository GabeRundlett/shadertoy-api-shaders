{
    "Shader": {
        "info": {
            "date": "1711304557",
            "description": "would be cool if lightning would travel down the hole like in matrix video effects",
            "flags": 0,
            "hasliked": 0,
            "id": "lcc3zr",
            "likes": 6,
            "name": "lightning storm",
            "published": 3,
            "tags": [
                "proceduralanimation"
            ],
            "usePreview": 0,
            "username": "orblivius",
            "viewed": 180
        },
        "renderpass": [
            {
                "code": "// Crossing storms, by ukeshet\n// Based on https://twitter.com/zozuar/status/1441384708441456651, with added periodic darkening + lightening.\n// As mentioned in comments: the @zozuar tweet is apparently based on nimitz (twitter: @stormoid) https://www.shadertoy.com/view/3l23Rh\n\nfloat hash21(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 hash22(vec2 uv) {\n    uv = vec2(dot(uv, vec2(127.1,311.7)),\n              dot(uv, vec2(269.5,183.3)));\n    return 2.0 * fract(sin(uv) * 43758.5453123) - 1.0;\n}\n\nfloat perlinNoise(vec2 uv)\n{\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    vec2 blur = smoothstep(.0, 1., fuv);\n    vec2 bl = vec2(.0, .0);\n    vec2 br = vec2(1., .0);\n    vec2 tl = vec2(.0, 1.);\n    vec2 tr = vec2(1., 1.);\n    vec2 bln = hash22(iuv + bl);\n    vec2 brn = hash22(iuv + br);\n    vec2 tln = hash22(iuv + tl);\n    vec2 trn = hash22(iuv + tr);\n    float b  = mix(dot(bln, fuv - bl), dot(brn, fuv - br), blur.x);\n    float t  = mix(dot(tln, fuv - tl), dot(trn, fuv - tr), blur.x);\n    float c = mix(b, t, blur.y);\n    float rs = 2.0 * texture(iChannel0, vec2(uv.x,0.75)).r;\n       \n    return (c*rs);\n}\n\nfloat fbm(vec2 uv, int octaves)\n{\n    float value = .0;\n    float ampitude  = .5;\n    float freq = 2. ;\n    \n    for(int i = 0; i < octaves; i++)\n    {  \n      value += perlinNoise(uv) * ampitude;\n        uv *= freq;\n        ampitude *= .5;\n    }\n    return value;\n}\n\n\nmat2 R(float q){return mat2(cos(q),sin(q),-sin(q),cos(q));}\nvoid mainImage(out vec4 Col,in vec2 FC) \n{\n    vec2 uvv = (FC - 0.5 * iResolution.xy)/iResolution.y;\n    vec3 col1, col2; \n    uvv.xy += fbm(uvv.yx + iTime * .5, 30);\n    float dist1 = abs(uvv.y);\n   \n    col1 = vec3(1.) * mix(.0, .05, hash21(vec2(sin(iTime)))) / dist1;\n    \n    vec4 o=vec4(0);vec2 uv=FC.xy/iResolution.xy,r=iResolution.xy;\n    float t=iTime,i,e,s,g,k=0.01;\n    \n    for(o+=0.5;i++<100.;g+=max(k,e*.2))\n    {\n        vec3 p=vec3((FC-.6*r)/r.y*g+r/r*R(t+g*.5)*.5,g+t/.3); \n             e=.3-dot(p.xy,p.xy);\n        for (s=2.0;s<100.;s/=.6) {\n            p.yz*=R(s); \n            e+=abs(dot(sin(p*s+t*s*.2)/s,p-p+1.));\n        }\n        o+=o.w*min(e*o+(sin(vec4(1.,2.,3.,1.)-p.z*.3)*.6-.4),k)*k;\n      } \n       Col=mix(o,vec4(col1,1.),0.3);\n        Col*=min(1.,1.+cos(.15*t))+min(1.,max(0.,-2.-4.*cos(.15*t)))*smoothstep(.85, 1.,fract(sin(t)*43758.5453));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}