{
    "Shader": {
        "info": {
            "date": "1662073644",
            "description": "a strange way to visualize a heightmap in an orthographic projection.\nthe code could be simpler, but i added another buffer to have better performance !\nalso, there is a glitch on top, dedicated to all the glitch amateurs out there.",
            "flags": 32,
            "hasliked": 0,
            "id": "flGcWy",
            "likes": 14,
            "name": "sliced terrain",
            "published": 3,
            "tags": [
                "heightmap"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "//palette found here : https://www.shadertoy.com/view/XtGGzG\nfloat saturate( float x ) { return clamp( x, 0.0, 1.0 ); }\nvec3 magma_quintic( float x ) {\n\tx = saturate( x );\n\tvec4 x1 = vec4( 1.0, x, x * x, x * x * x ); // 1 x x2 x3\n\tvec4 x2 = x1 * x1.w * x; // x4 x5 x6 x7\n\treturn vec3(\n\t\tdot( x1.xyzw, vec4( -0.023226960, +1.087154378, -0.109964741, +6.333665763 ) ) + dot( x2.xy, vec2( -11.640596589, +5.337625354 ) ),\n\t\tdot( x1.xyzw, vec4( +0.010680993, +0.176613780, +1.638227448, -6.743522237 ) ) + dot( x2.xy, vec2( +11.426396979, -5.523236379 ) ),\n\t\tdot( x1.xyzw, vec4( -0.008260782, +2.244286052, +3.005587601, -24.279769818 ) ) + dot( x2.xy, vec2( +32.484310068, -12.688259703 ) ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float interSpace3 = interSpace1*interSpace2;\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float maxHeight = 0.;\n    int   maxIndex  = 0;\n\n    for (int i = 0; i <= int(interSpace2); i++) {\n            \n        float val = texture( iChannel0, uv ).r;\n\n        if (val > maxHeight ) {\n            maxHeight = val;\n            maxIndex = i;\n        }\n        uv.y += 1./iResolution.y;\n    }\n        \n    float finalHeight = max(maxHeight - float(maxIndex)/interSpace3/slices,0.);\n    \n    float wall = float(maxIndex>0);\n    \n    float finalVal = pow(finalHeight,0.75)*(1.-wall*0.45);\n            \n    fragColor = vec4(magma_quintic(finalVal), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//parameters :\n\nfloat slices = 16.;\nfloat interSpace1 = 4.;\nfloat interSpace2 = 4.;\nfloat mapSize = 600.;\nfloat tilt = 2.;\n\n//the height of a slice = interSpace1*interSpace2",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float getVal( vec2 fc, vec2 res ) {\n    vec2 offset = -iTime*vec2(0.05,0.03);\n\n    vec2 uv = (fc - res*offset)/mapSize;\n    uv.y *= tilt;\n    \n    return sqrt(texture( iChannel0, uv ).r)\n     *(texture( iChannel0, uv/sqrt(2.)*0.6 ).r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 fc = fragCoord;\n\n    float interSpace3 = interSpace1*interSpace2;\n    \n    float maxHeight = 0.;\n\n    int i = int(slices);\n    while (maxHeight == 0. && i > 0) {\n    \n        float val = getVal(fc,iResolution.xy);\n        \n        float currentSlice = float(i) / slices;\n        \n        if (val >= currentSlice) {\n            maxHeight = currentSlice;\n            break;\n        }\n        \n        fc.y += interSpace3;\n        i--;\n    }\n        \n    fragColor = vec4(maxHeight,0.,0.,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    float maxHeight = 0.;\n    int   maxIndex  = 0;\n\n    for (int i = 0; i < int(interSpace1); i++) {\n    \n        float val = texture( iChannel0, uv ).r;\n        \n        if (val > maxHeight) {\n            maxHeight = val;\n            maxIndex = i;\n        }\n        \n        uv.y += interSpace2/iResolution.y;\n\n    }\n    \n    float finalHeight = maxHeight - float(maxIndex)/interSpace1/slices;\n    \n    fragColor = vec4(finalHeight,0.,0.,1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}