{
    "Shader": {
        "info": {
            "date": "1702823570",
            "description": "mirror ball projection",
            "flags": 32,
            "hasliked": 0,
            "id": "4fsGz4",
            "likes": 0,
            "name": "Mirror ball projection",
            "published": 3,
            "tags": [
                "vfx",
                "projection",
                "ball",
                "mirror",
                "reflect",
                "mirrorball"
            ],
            "usePreview": 0,
            "username": "silica163",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "vec2 center02lb0(vec2 p){\n    return p*vec2(.5/(iResolution.x/iResolution.y),.5)+.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv *= 2.;\n    uv.x = fract(uv.x);\n    uv.y -= .5;\n\n    vec4 c0 = texture(iChannel0,uv);\n    vec4 c1 = texture(iChannel1,uv);\n    if(fragCoord.x < iResolution.x/2.){\n        fragColor = c0;\n    } else {\n        fragColor = c1;\n    }\n    //fragColor = texture(iChannel2,fragCoord/iResolution.xy);\n    \n    vec2 projUv = (2.*fragCoord.xy - iResolution.xy)/iResolution.y;\n    \n    vec2 m = (2.*iMouse.xy - iResolution.xy) / iResolution.y;\n    \n    vec2 ra = vec2(PI/2.+m.x*PI,m.y*PI);\n    \n    mat3 rx = mat3(\n    1,0,0,\n    0,sin(ra.y),cos(ra.y),\n    0,-cos(ra.y),sin(ra.y)\n    );\n    \n    mat3 ry = mat3(\n    sin(ra.x), 0, cos(ra.x),\n    0, 1, 0,\n    -cos(ra.x), 0, sin(ra.x)\n    );\n    \n    vec3 look3d = normalize(vec3(projUv,-1)*rx*ry - vec3(0,0,0)*rx*ry);\n    \n    vec2 look2d;\n    float l2dz = sqrt(2.*(look3d.z+1.));\n    look2d.x = look3d.x*(1./l2dz);\n    look2d.y = look3d.y*(1./l2dz);\n    \n    vec4 color2d = texture(iChannel0,center02lb0(look2d));\n    \n    fragColor = color2d;\n    if(fragCoord.x < iResolution.x/2.){\n        float mask = step(1.-length((uv*2.-1.)*vec2(iResolution.x/iResolution.y,1.)),0.);\n        fragColor *= mask;\n        fragColor += c0*(1.-mask);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat3 rotx(float a){\n    return mat3(1, 0, 0, 0, sin(a),cos(a),0,-cos(a),sin(a));\n}\n\nmat3 roty(float a){\n    return mat3(sin(a),0,cos(a),0,1,0,-cos(a),0,sin(a));\n}\n\nmat3 rotz(float a){\n    return mat3(sin(a),cos(a),0,-cos(a),sin(a),0,0,0,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv *2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m = m*2.-1.;\n    m*= 0.;\n    \n    vec2 ra = vec2(PI/2.+m.x*PI,PI/2.+m.y*PI*.5);\n    \n    mat3 rx = mat3(\n    1,0,0,\n    0,sin(ra.y),cos(ra.y),\n    0,-cos(ra.y),sin(ra.y)\n    );\n    \n    mat3 ry = mat3(\n    sin(ra.x), 0, cos(ra.x),\n    0, 1, 0,\n    -cos(ra.x), 0, sin(ra.x)\n    );\n    \n    vec3 ref = vec3(0,0,0);\n    \n    float fb = length(uv);\n    \n    //ref.z = cos(fb*PI);\n    //ref.xy = normalize(uv)*sin(fb*PI);\n    \n    ref.xy = uv;\n    ref.z = sqrt(1.-fb*fb);\n    \n    //ref = reflect(vec3(0,0,-1),ref);\n    \n    ref.x = 2. * ref.z * ref.x;\n    ref.y = 2. * ref.z * ref.y;\n    ref.z = 2. * ref.z * ref.z - 1.;\n    \n    fragColor = vec4(fract(ref),1);\n    fragColor.rg = uv;\n    fragColor = texture(iChannel0,ref*rx*ry)* step(length(uv),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float MAX = 10.,MIN = .001,STEP = 64.;\n\nfloat dist(vec3 rp){\n    return length(rp) -1.;\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0,MIN*10.);\n    return normalize(vec3(\n        dist(p+e.yxx),\n        dist(p+e.xyx),\n        dist(p+e.xxy)\n    ));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv *2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m = m*2.-1.;\n    m *= 0.;\n    \n    vec2 ra = vec2(PI/2.+m.x*PI,PI/2.+m.y*PI*.5);\n    \n    mat3 rx = mat3(\n    1,0,0,\n    0,sin(ra.y),cos(ra.y),\n    0,-cos(ra.y),sin(ra.y)\n    );\n    \n    mat3 ry = mat3(\n    sin(ra.x), 0, cos(ra.x),\n    0, 1, 0,\n    -cos(ra.x), 0, sin(ra.x)\n    );\n    \n    vec3 c = vec3(0);\n    \n    vec3 ro = vec3(uv,1)*rx*ry;\n    float rl = 0.;\n    float hit = 0.;\n    vec3 rd = normalize(vec3(uv,0)*rx*ry-vec3(ro));\n    vec3 rp = ro + rd*rl;\n    \n    for(float i = 0.; i < STEP; i++){\n        rp = ro + rd * rl;\n        float d = dist(rp);\n        \n        rl += d;\n        if(d >= MAX)break;\n        if(d <= MIN)hit = 1.;\n    }\n    vec3 N = normal(rp);\n    vec3 ref = reflect(rd,N);\n    fragColor = texture(iChannel0,ref)*hit;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "struct Ray {\n\tvec3 o;\n\tvec3 p;\n\tvec3 dir;\n\tfloat dist;\n    float hit;\n};\n\nfloat dist(vec3 p){\n\tfloat d = 100.;\n   \n    d= min(d,length(p - 1.) -.5);\n    \n    vec3 cu = abs(p-vec3(0,0,0))-1.;\n    \n    d = (length(max(cu,0.)) + min(0.,max(cu.x,max(cu.y,cu.z))));\n\t\n\treturn -d;\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0.,.01);\n    return normalize(vec3(\n        dist(p+e.yxx),\n        dist(p+e.xyx),\n        dist(p+e.xxy)\n    ));\n    \n}\nvoid march(inout Ray r){\n\tfor(int i = 0;i<64;i++){\n\t\tr.p = r.o + r.dist*r.dir;\n\t\tfloat d = dist(r.p);\n        r.dist += d;\n\t\tif(abs(d) <= .0001){\n            r.hit = 1.;\n            break;\n        }\n        if(d > 100.)break;\n\t}\n}\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Ray direction as color\n    vec3 col = 0.5 + 0.5*rayDir;\n\n    // Output to cubemap\n    fragColor = vec4(mod(rayDir,.5)*2.,1.0);\n    fragColor = vec4(fract(rayDir),1.0);\n    fragColor = vec4(rayDir,1.0);\n    \n    Ray r = Ray(vec3(0),vec3(0),rayDir,0.,0.);\n    march(r);\n    //fragColor = vec4(vec3(dist(rayDir)),1.0);\n    //fragColor = vec4(vec3(1./r.dist),1.0);\n    fragColor.rgb = normal(r.p)*.5+.5;\n    fragColor = texture(iChannel0,rayDir);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "vec2 center02lb0(vec2 p){\n    return p*vec2(.5/(iResolution.x/iResolution.y),.5)+.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv *2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m = m*2.-1.;\n    \n    vec2 ra = vec2(PI/2.+m.x*PI,m.y*PI);\n    \n    mat3 rx = mat3(\n    1,0,0,\n    0,sin(ra.y),cos(ra.y),\n    0,-cos(ra.y),sin(ra.y)\n    );\n    \n    mat3 ry = mat3(\n    sin(ra.x), 0, cos(ra.x),\n    0, 1, 0,\n    -cos(ra.x), 0, sin(ra.x)\n    );\n    \n    vec3 look3d = normalize(vec3(uv,-1)*rx*ry - vec3(0,0,0)*rx*ry);\n   \n    /*\n    float fb = length(uv);\n    vec3 ref = vec3(0);\n    ref.xy = uv;\n    ref.z = sqrt(1.-fb*fb);\n    \n    ref.x = 2. * ref.z * ref.x;\n    ref.y = 2. * ref.z * ref.y;\n    ref.z = 2. * ref.z * ref.z - 1.;\n    */\n    \n    vec2 look2d;\n    float l2dz = sqrt(2.*(look3d.z+1.));\n    look2d.x = look3d.x*(1./l2dz);\n    look2d.y = look3d.y*(1./l2dz);\n    \n    vec4 color2d = texture(iChannel0,center02lb0(look2d));\n    fragColor = color2d;\n    //fragColor = texture(iChannel1,look3d);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}