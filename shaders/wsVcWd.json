{
    "Shader": {
        "info": {
            "date": "1604247074",
            "description": "My tribute to the \"State of the art\" by Spaceballs\n1st place at \"The Party\" 1992\nhttps://www.youtube.com/watch?v=89wq5EoXy-0\nMusic by Travolta.\n\nThanks Nicholas FitzRoy-Dale for the animation! https://github.com/nfd/sota/tree/master/shapes",
            "flags": 96,
            "hasliked": 0,
            "id": "wsVcWd",
            "likes": 54,
            "name": "State of the art",
            "published": 3,
            "tags": [
                "2d",
                "demoscene",
                "amiga",
                "demo",
                "animation",
                "vector",
                "vector",
                "dance",
                "reproduction",
                "spaceballs",
                "stateoftheart",
                "sota"
            ],
            "usePreview": 1,
            "username": "xjorma",
            "viewed": 5140
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\n\nvec4 Load(in int vtxIdx, in int frame, in sampler2D s)\n{\n\treturn texelFetch(s, ivec2(vtxIdx, frame), 0);\n}\n\n// By IQ https://www.shadertoy.com/view/wdBXRW\nfloat sdPoly( in vec2[maxVert] v, in vec2 p, in int num )\n{\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, p.y<v[j].y, e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s*=-1.0;  \n    }\n    \n    return s*sqrt(d);\n}\n\nvec4 sdPoly(in vec2 p, in int frame, in sampler2D s, in int nbPt, in int stride)\n{\n    vec4 o;\n    for(int j = 0; j < 4; j++)\n    {\n\t    vec2[maxVert] v;\n        for(int i = 0; i < stride; i++)\n        {\n            vec4 lv = Load(i, (3 - j) * 3, s);\n            v[i*2 + 0] = (lv.xy - 127.) / 95. + vec2(0,0.1);\n            v[i*2 + 1] = (lv.zw - 127.) / 95. + vec2(0,0.1);\n        }\n        o[j] = sdPoly(v, p, nbPt);\n    }\n    return o;\n}\n\nfloat distFilter(float v)\n{\n    return smoothstep(3. / iResolution.y, 0., v);\n}\n\nfloat triangleSignal(float x, float f)\n{\n    f = 1. / f;\n    return (abs((f * x - 4. * floor(0.25 * f * x)) - 2.) - 1.) / f;\n}\n\nvec3 circle(in vec2 p, in float tp, in float tc)\n{\n    float v0 = distFilter(triangleSignal(length(p - vec2(sin(tp * 0.5 + 1.2), sin(tp * 0.7 + 3.2))), 0.01));\n    float v1 = distFilter(triangleSignal(length(p - vec2(sin(tp * 0.6 + 0.3), sin(tp * 0.83 + 2.7))), 0.01));\n    vec3 cb = vec3(sin(tc * 0.41 + 1.3),sin(tc * 0.52 + 2.4), sin(tc * 0.57 + 1.25)) / 2. + 0.5;\n    vec3 c0 = vec3(sin(tc * 0.37 + 2.7),sin(tc * 0.39 + 3.9), sin(tc * 0.29 + 5.36)) / 2. + 0.5;;\n    vec3 c1 = vec3(sin(tc * 0.39 + 1.6),sin(tc * 0.43 + 4.5), sin(tc * 0.47 + 6.23)) / 2. + 0.5;;\n    return mix(mix(cb, c0, v0), c1, v1);\n}\n\nvec3 noisyCircle(in vec2 p, in float t)\n{\n    float h = hash13(vec3(floor(p * 100.),floor(t * 10.))); \n    vec3 cb = vec3(sin(t * 0.28 + 5.3),sin(t * 0.48 + 2.4), sin(t * 0.43 + 2.25)) / 2. + 0.5;\n    vec3 c0 = vec3(sin(t * 0.31 + 2.7),sin(t * 0.58 + 3.9), sin(t * 0.47 + 4.36)) / 2. + 0.5;\n    float v = distFilter(triangleSignal(length(p) - iTime, 0.1) - 0.05);\n    return vec3(h * v > 0.5?  cb : c0);\n}\n\nfloat seqLength = 2.f;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2\tp = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float\tseqId = floor(iTime / seqLength);\n    int\t\tselect;\n\n    // Select Shape\n    select = int(hash12(vec2(seqId, 0.)) * 3.);  \n    vec4 shapeDist;\n    switch (select)\n    {\n        case 0:\n            shapeDist = sdPoly(p, iFrame % 13, iChannel1, AnbVertices, Astride);\n            break;\n        case 1:\n            shapeDist = sdPoly(p, iFrame % 13, iChannel2, BnbVertices, Bstride);\n            break;\n        case 2:\n            shapeDist = sdPoly(p, iFrame % 13, iChannel3, CnbVertices, Cstride);\n            break;\n    }\n    // select Shape Effect\n    float shapeMask;\n    select = int(hash12(vec2(seqId, 1.)) * 3.);\n    switch (select)\n    {\n        case 0:\n            shapeMask = distFilter(shapeDist.x);\n            break;\n        case 1:\n            shapeMask = distFilter(abs(shapeDist.x) - 0.01);\n            break;\n        case 2:\n            shapeMask = max(distFilter(shapeDist.x), max(distFilter(shapeDist.y) * 0.75, max(distFilter(shapeDist.z) * 0.50, distFilter(shapeDist.w) * 0.25)));\n            break;\n    }\n    // Select backgroud\n    vec3 backCol;\n    select = int(hash12(vec2(seqId, 2.)) * 3.);\n    switch (select)\n    {\n        case 0:\n            backCol = circle(p, iTime, iTime);\n            break;\n        case 1:\n            backCol = 0.5 + 0.5*cos(iTime + p.xyx + vec3(0,2,4));\n            break;\n        case 2:\n            backCol = noisyCircle(p, iTime);\n            break;        \n    }\n    // Select foreground\n    vec3 foreCol;\n    select = int(hash12(vec2(seqId, 3.)) * 3.);\n    switch (select)\n    {\n        case 0:\n            foreCol = vec3(0);\n            break;\n        case 1:\n            foreCol = vec3(1);\n            break;\n        case 2:\n            foreCol = circle(p, iTime, iTime + 22.3);\n            break;        \n    }\n\n    vec3 col = mix(backCol, foreCol, shapeMask);\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 24416,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/david-gallardo-492062428/state-of-the-art"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const uint vertices[338] = uint[](\n0xa10d9c28U, 0x973c954aU, 0x90569d7bU, 0xa372b950U, 0xd44fd850U, 0xe556ec5fU, 0xe461cf5aU, 0xc559b867U, 0xa39893aeU, 0x96b99bc1U, 0x95cc89d9U, 0x72d96acbU, 0x65bc73abU, 0x61a855a2U, 0x3b9b2fb3U, 0x25b71eb9U, 0x11b60fb1U, 0x12af17adU, 0x1ead27a6U, 0x2e8e5d8dU, 0x60735d54U, 0x56485135U, 0x4c1e4a0dU, 0x6d0d7215U, 0x77217a17U, 0x7c0e00d9U, \n0xa70da52aU, 0xa743a555U, 0xb077b98cU, 0xcc9cd494U, 0xdc91df89U, 0xe185e388U, 0xea90e89fU, 0xd7a8bfadU, 0xaab1a1b7U, 0x9fbf9ec9U, 0x9ad286d9U, 0x78d570ccU, 0x6ec278b7U, 0x7bad74a2U, 0x65965183U, 0x4587379aU, 0x3aab39b5U, 0x34b72eacU, 0x2c9d308fU, 0x48715d79U, 0x72747167U, 0x6a515e3cU, 0x5521510dU, 0x720d7617U, 0x7f23821aU, 0x860d00d9U, \n0xab0da330U, 0xa2489e54U, 0x9b689d86U, 0xa69ebdabU, 0xcbb0cea8U, 0xca9ecf96U, 0xd89bdaaaU, 0xd9bbcec3U, 0xadb78cb0U, 0x8bbb91c4U, 0x91ca85d9U, 0x66d95fd3U, 0x5bcc6cb3U, 0x6fa858a0U, 0x5097476eU, 0x36631e62U, 0x1c6b1279U, 0x0e760d6aU, 0x12592b55U, 0x4d5b627aU, 0x6b626653U, 0x5d44592fU, 0x571b5b0dU, 0x7a0d7a13U, 0x81238618U, 0x880d00d9U, \n0xb00da430U, 0x9d40964eU, 0x8e5e8b7eU, 0x938dba88U, 0xc48fcca6U, 0xd4a4d7a2U, 0xe2a4d6acU, 0xc7aeb997U, 0xa19b83a8U, 0x85b98fc1U, 0x89c883d9U, 0x66d961cfU, 0x5bc865b2U, 0x63ac51a4U, 0x459a377fU, 0x286d1656U, 0x0e44033cU, 0x03320a34U, 0x15402654U, 0x3e6f4d7bU, 0x5b615d54U, 0x5d445b33U, 0x581a590dU, 0x810d8012U, 0x81208715U, 0x890d00d9U, \n0xa50d9d29U, 0x99378c50U, 0x845a8779U, 0x8e7fb16bU, 0xd278da7cU, 0xdc80de8fU, 0xda95d495U, 0xcf80b179U, 0x999187a7U, 0x86b595c0U, 0x8dcb83d9U, 0x66d961cfU, 0x5bc865b2U, 0x5faf4faaU, 0x41a13095U, 0x1a8d037dU, 0x0074005dU, 0x03510851U, 0x0e5e096fU, 0x3286488aU, 0x54605752U, 0x4f444b30U, 0x4a194d0dU, 0x740d7517U, 0x77237a1bU, 0x800d00d9U, \n0x9b0d9429U, 0x903b8b4fU, 0x845a897aU, 0x917dac57U, 0xc94fd84fU, 0xe058e366U, 0xdd6dd156U, 0xc45baf6eU, 0x9e928eacU, 0x94c29bc8U, 0x8fd18ed9U, 0x6cd96aceU, 0x64c76db3U, 0x60b650b7U, 0x45b835baU, 0x1eba06aaU, 0x00930485U, 0x0b850a99U, 0x1ba924adU, 0x3ea85196U, 0x50624f54U, 0x4b484538U, 0x431c460dU, 0x680d6715U, 0x6b277418U, 0x780e00d9U, \n0x9b0d9429U, 0x923c9048U, 0x8a579578U, 0x9b77ad51U, 0xd047da48U, 0xe74fec5bU, 0xe45ed052U, 0xc356b463U, 0xa19590abU, 0x96b99ec3U, 0x94ca8cd6U, 0x74d76cc8U, 0x65bc73abU, 0x62ad54acU, 0x41ad30b6U, 0x20bd10b9U, 0x05b503aeU, 0x06ac0baeU, 0x15b122acU, 0x359e5894U, 0x5b725852U, 0x50444a33U, 0x471c450dU, 0x690d6b16U, 0x6f217316U, 0x760d00d9U, \n0x9c0d9d2fU, 0x9b469b56U, 0xa064ab79U, 0xbb84d083U, 0xe07cde69U, 0xe162e765U, 0xeb7ae986U, 0xdb8ac792U, 0xaf9d99adU, 0x9fb1a6c0U, 0x9cca99d7U, 0x7ed772c8U, 0x70bb7cb0U, 0x7ca86ea0U, 0x63994e8fU, 0x3f9b37a3U, 0x38b536c1U, 0x2fc42ab8U, 0x2aa73293U, 0x477d6a89U, 0x6e696457U, 0x5947522eU, 0x4d174b0dU, 0x6b0d6b12U, 0x76207917U, 0x7b0d00d9U, \n0xa50da330U, 0xa2489e54U, 0xa464a77cU, 0xaf97bfa3U, 0xcda6d3a6U, 0xd19ad892U, 0xe097e1aeU, 0xdfb8d0bbU, 0xb1b494afU, 0x92b799c2U, 0x93cb8cd8U, 0x6fd869ceU, 0x63c870afU, 0x73a66ba2U, 0x60984670U, 0x3973257dU, 0x268d2199U, 0x1b981889U, 0x19782d68U, 0x4b5d6d7eU, 0x6e636653U, 0x5d44572eU, 0x5319530dU, 0x710d7214U, 0x7c268018U, 0x830d00d9U, \n0xb00da731U, 0xa3449c51U, 0x95619082U, 0x9998c29fU, 0xc4a1cba8U, 0xd4a4d7a2U, 0xdda5cfbdU, 0xc4bfb7a9U, 0xa3a985aeU, 0x85b98fc2U, 0x8bc983d9U, 0x66d95bd3U, 0x59c768b3U, 0x67ab54a5U, 0x4a973973U, 0x295f1f4fU, 0x12490746U, 0x073e1238U, 0x20422e4dU, 0x4263527bU, 0x60606453U, 0x5f435c31U, 0x5b1b5b0dU, 0x810d8012U, 0x83248916U, 0x8f0d00d9U, \n0xa90da02bU, 0x9b388d4fU, 0x885b8979U, 0x9184b475U, 0xca84d48fU, 0xd794db98U, 0xe0a3daa7U, 0xd39eb685U, 0x999184a5U, 0x86b591bdU, 0x89c883d9U, 0x66d961cfU, 0x5bc865b2U, 0x61ac50a4U, 0x459a348bU, 0x227c0e6bU, 0x06600156U, 0x05400837U, 0x10450e59U, 0x3a794980U, 0x575f5752U, 0x55415430U, 0x521b520dU, 0x7a0d7a17U, 0x7b1f8313U, 0x830d00d9U, \n0xa10d9a2bU, 0x923a8b4fU, 0x845a8879U, 0x917daf63U, 0xd062d967U, 0xdb75db7cU, 0xd67dd37dU, 0xcd6bb271U, 0x99918babU, 0x90bb98c8U, 0x8dd08ed9U, 0x69d967cfU, 0x62c66bb6U, 0x5eb151b1U, 0x44ad38acU, 0x1aa50092U, 0x0086006dU, 0x04700574U, 0x0a880e91U, 0x3e964c8fU, 0x50625355U, 0x4f4b4938U, 0x461b460dU, 0x6c0d6d14U, 0x6f27761aU, 0x800d00d9U, \n0x9b0d9429U, 0x903b8b4aU, 0x84579378U, 0x9777ac54U, 0xcd44da46U, 0xe74beb58U, 0xe25ad14eU, 0xc356b162U, 0x9e928eacU, 0x95c09bc6U, 0x8fd18cd6U, 0x70d86cc8U, 0x66c06db0U, 0x62b14eb3U, 0x43b632bdU, 0x20bd0fb1U, 0x07a50399U, 0x09910c9dU, 0x19ad23b1U, 0x3ea85796U, 0x53625154U, 0x4b484538U, 0x431c430dU, 0x640d6715U, 0x6c237016U, 0x730d00d9U);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    float frame = (fragCoord.y + float(iFrame)) / 8.;\n    int vtxIdx = int(fragCoord.x);\n    if( vtxIdx >= Astride)\n    {\n        discard;\n    }\n    uint cv0 = vertices[vtxIdx + (int(floor(frame + 0.)) % AnbFrames) * Astride];\n    vec4 v0 = vec4(vec2(cv0>>24, (cv0>>16)&255U),vec2((cv0>>8)&255U, (cv0)&255U)); \n    uint cv1 = vertices[vtxIdx + (int(floor(frame + 1.)) % AnbFrames) * Astride];\n    vec4 v1 = vec4(vec2(cv1>>24, (cv1>>16)&255U),vec2((cv1>>8)&255U, (cv1)&255U));\n    vec4 v = mix(v0, v1, fract(frame));\n    fragColor = v;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int maxVert = 56;\n\nconst int AnbFrames = 13;\nconst int AnbVertices = 51;\nconst int Astride = 26;\n\nconst int BnbFrames = 10;\nconst int BnbVertices = 52;\nconst int Bstride = 26;\n\nconst int CnbFrames = 8;\nconst int CnbVertices = 55;\nconst int Cstride = 28;\n\n\n// From https://www.shadertoy.com/view/4djSRW\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const uint vertices[260] = uint[](\n0x440d4d2aU, 0x59496662U, 0x716c7675U, 0x6d846b88U, 0x5960545fU, 0x31862a8cU, 0x148d1390U, 0x18942b93U, 0x348e4879U, 0x50785692U, 0x5dac68bcU, 0x66c45dd0U, 0x5ad75ad9U, 0x8bd98cd4U, 0x8cd29bd6U, 0xafd9b4d9U, 0xb9d9bed9U, 0xc2d9cdd9U, 0xd5d9c8cfU, 0xb1bdacb5U, 0xa87aa369U, 0xa45fac42U, 0xb61dba0dU, 0x990d8e1fU, 0x81397e39U, 0x7122630dU, \n0x440d4d29U, 0x5848655bU, 0x726a7573U, 0x707b6b7fU, 0x56594f59U, 0x2c7e2586U, 0x1688128bU, 0x178e298cU, 0x33814e6cU, 0x51765791U, 0x5fa968bcU, 0x62c05fd0U, 0x5dd85ad9U, 0x8bd98bd7U, 0x8cce8fc7U, 0xb1ccc2d0U, 0xc3d4c2d9U, 0xc2d9cdd9U, 0xd5d9d8c5U, 0xb6b0aca9U, 0xab7aa767U, 0xa65fa945U, 0xa929b30dU, 0x8b0d861bU, 0x81297a2eU, 0x7020630dU, \n0x440d4d29U, 0x5947655dU, 0x726a7573U, 0x6a88648bU, 0x4c664265U, 0x2f7f1e98U, 0x0e97089aU, 0x0d9c219dU, 0x35874276U, 0x497f5196U, 0x5dab6cc0U, 0x63c662d0U, 0x61d662d9U, 0x8bd98bd7U, 0x8cce90caU, 0xb6c6ccc4U, 0xd0d3d4d9U, 0xd7d9dbd9U, 0xdfd9dab2U, 0xb2acaaaaU, 0xa97ba569U, 0xa261a741U, 0xac27b30dU, 0x900d881bU, 0x822a7c32U, 0x6f21630dU, \n0x490d4e29U, 0x56495e63U, 0x69746682U, 0x5ea158a0U, 0x438c3785U, 0x2f8916b6U, 0x0ebc00c0U, 0x04c317c0U, 0x25ad329bU, 0x389847a9U, 0x54b85ac2U, 0x5ec967cfU, 0x69d46bd9U, 0x8bd98bd7U, 0x93d79ad6U, 0xb6c5cdb8U, 0xe4d4ead7U, 0xfdd7ffd4U, 0xecced5a6U, 0xc9a4a5b4U, 0xa1849f76U, 0xa461ab40U, 0xb025b50dU, 0x9a0d9120U, 0x853b8140U, 0x6c22630dU, \n0x490d4e29U, 0x56495e63U, 0x64756386U, 0x53ad4eb1U, 0x29a71da3U, 0x17a913b1U, 0x10bd0cd9U, 0x13d917d9U, 0x1bc71ebeU, 0x25b72fb9U, 0x36be3cc3U, 0x50d255d7U, 0x61d96bd9U, 0x8bd98bd7U, 0x93d79ad6U, 0xb4b6c7a7U, 0xe7bdf1beU, 0xffbbfeb7U, 0xf4b8c594U, 0xbb959db1U, 0x988d997bU, 0xa461ab40U, 0xb327ba0dU, 0x9e0d9622U, 0x8a3b8345U, 0x6e22680dU, \n0x490d5528U, 0x5b485e63U, 0x61735983U, 0x4fab48b2U, 0x29b61bb7U, 0x13bc0fc1U, 0x0fcb11d9U, 0x15d91ed9U, 0x20ca25c7U, 0x2ac731c7U, 0x37c849cbU, 0x50d056d5U, 0x61d96bd9U, 0x85d98bd8U, 0x91cd97c7U, 0xb692c695U, 0xe0a0e99fU, 0xf995f992U, 0xe596b57eU, 0xab829798U, 0x9482997bU, 0xa660b140U, 0xb828c00eU, 0x9e0d9622U, 0x8f358940U, 0x781f6e0dU, \n0x500d5721U, 0x5d306050U, 0x6363587bU, 0x499f40afU, 0x2bb722bbU, 0x19c117c5U, 0x14cc16d2U, 0x1ad929d9U, 0x29d12bccU, 0x2dcb31c9U, 0x37c84ac5U, 0x5dc761ccU, 0x61d996d9U, 0x95d191c7U, 0x94b39eaaU, 0xaa77c27cU, 0xd083d981U, 0xec73eb6fU, 0xd679a364U, 0x9b6c977dU, 0x926c9f67U, 0xa65cb140U, 0xb928c20dU, 0xa30da016U, 0x96269130U, 0x7e1c760eU, \n0x4c0d5421U, 0x5a345e48U, 0x63635a7cU, 0x499f40afU, 0x2bb722bbU, 0x19be14c4U, 0x15cc16d2U, 0x1ad929d9U, 0x26d127ccU, 0x28ca2fc8U, 0x37c84bc6U, 0x60c964ceU, 0x61d996d9U, 0x95d18fc7U, 0x96b7a0acU, 0xaf85b77eU, 0xce86da8aU, 0xe98be786U, 0xd884b26bU, 0xa870978aU, 0x91739d68U, 0xa55cb140U, 0xb928c20dU, 0x9e0d981dU, 0x93298a30U, 0x791c730dU, \n0x480d5026U, 0x553f5a5aU, 0x646c5b9dU, 0x55b541b2U, 0x2db120b0U, 0x1bb515c4U, 0x13cc12d4U, 0x12d921d9U, 0x23d125ccU, 0x27c32ec3U, 0x39c549cbU, 0x52d059d8U, 0x5dd996d9U, 0x95d19ec8U, 0xa7c5b5b3U, 0xc49fcc9eU, 0xe9bdefc9U, 0xf6c6f8bfU, 0xf0b8d38eU, 0xc58aa1a5U, 0x9778a068U, 0xa55cad3fU, 0xb424b80dU, 0x9e0d971aU, 0x91268542U, 0x75276a0fU, \n0x480d5026U, 0x553f5965U, 0x677d66a4U, 0x5fb546a6U, 0x359a2e9bU, 0x1bb515c4U, 0x10cf04d3U, 0x02d712d5U, 0x16cf1cc9U, 0x27bb30b1U, 0x36ae4cc3U, 0x54cd5bd6U, 0x5dd99fd9U, 0xa5d7b2d0U, 0xbaccc9c4U, 0xd6bfdec3U, 0xe1cfe4d9U, 0xead9f1d9U, 0xe7b9e3b1U, 0xddacb2b6U, 0x9c79a069U, 0xa45da650U, 0xab28b30dU, 0x980d9517U, 0x8f237c43U, 0x6e28610dU);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    float frame = (fragCoord.y + float(iFrame)) / 8.;\n    int vtxIdx = int(fragCoord.x);\n    if( vtxIdx >= Bstride)\n    {\n        discard;\n    }\n    uint cv0 = vertices[vtxIdx + (int(floor(frame + 0.)) % BnbFrames) * Bstride];\n    vec4 v0 = vec4(vec2(cv0>>24, (cv0>>16)&255U),vec2((cv0>>8)&255U, (cv0)&255U)); \n    uint cv1 = vertices[vtxIdx + (int(floor(frame + 1.)) % BnbFrames) * Bstride];\n    vec4 v1 = vec4(vec2(cv1>>24, (cv1>>16)&255U),vec2((cv1>>8)&255U, (cv1)&255U));\n    vec4 v = mix(v0, v1, fract(frame));\n    fragColor = v;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const uint vertices[224] = uint[](\n0x610d6016U, 0x58205016U, 0x4c0d360dU, 0x35263a3eU, 0x404f456bU, 0x428734a4U, 0x2dc12dd2U, 0x2ed82dd9U, 0x30d935d9U, 0x34d135caU, 0x3ab7479eU, 0x519655a5U, 0x5baf61b3U, 0x6bb171abU, 0x749d7495U, 0x728b7686U, 0x7d838981U, 0x9a81a285U, 0xa492a59cU, 0xa3a3a5adU, 0xaaadada6U, 0xae96ab85U, 0xa67b9e76U, 0x95738372U, 0x776f6e65U, 0x6c517036U, 0x742d791fU, 0x7d0d00d9U, \n0x650d6414U, 0x5b205215U, 0x4d0d360dU, 0x35203a3eU, 0x404f456bU, 0x428733a3U, 0x2dc12ed2U, 0x30d82dd9U, 0x30d938d9U, 0x36d137c8U, 0x3ab7479eU, 0x519655a5U, 0x5baf61b3U, 0x6bb171abU, 0x749d7499U, 0x718f7a8eU, 0x808d8d8dU, 0x9994a499U, 0xa5a2a5a9U, 0xa1b19dbcU, 0xa1bca7baU, 0xae98aa8fU, 0xa0899684U, 0x8e7f857aU, 0x7f75746bU, 0x70507236U, 0x772e7d1fU, 0x810d00d9U, \n0x620d6116U, 0x5b285018U, 0x4d0d360dU, 0x35203a3eU, 0x4457496dU, 0x43892f9eU, 0x25b028c3U, 0x30d333d5U, 0x39d340cdU, 0x3ec636c6U, 0x33af3fa1U, 0x4f9851a9U, 0x54b65bbcU, 0x67bb6fb5U, 0x72a9729fU, 0x71937893U, 0x7e958d9bU, 0x97a09faaU, 0xa2b4a2baU, 0x99c297caU, 0x9dcca7c6U, 0xabafa7a0U, 0x9e96948eU, 0x8a878180U, 0x7d79776eU, 0x7251723cU, 0x77307b1fU, 0x7d0d00d9U, \n0x620d6016U, 0x5a2a5019U, 0x4d0d360dU, 0x35213a3eU, 0x495d4b6eU, 0x43872e97U, 0x23a228bcU, 0x33cc39ceU, 0x41ca46c2U, 0x43bc36c1U, 0x31a53d9dU, 0x4d984fabU, 0x51b959c0U, 0x65c06ebaU, 0x71af71a3U, 0x71977697U, 0x7c9a89a2U, 0x92a898b3U, 0x9cbe9dc4U, 0x95ce95d3U, 0x9cd6a4ccU, 0xa5baa1aaU, 0x999d9094U, 0x888b8181U, 0x7e7a7a6fU, 0x7551733fU, 0x77317a1fU, 0x7c0d00d9U, \n0x650d6016U, 0x58285118U, 0x4f0d360dU, 0x35233b3eU, 0x4d634c6eU, 0x4283308eU, 0x25972ebcU, 0x39c43fc3U, 0x47bd48b8U, 0x45b238b7U, 0x339b4293U, 0x4c954fabU, 0x51b959c0U, 0x65c06ebaU, 0x71af71a5U, 0x729a749aU, 0x7a9e81a4U, 0x8aac90b5U, 0x92bf96c8U, 0x95d496d9U, 0x9ed99fccU, 0x9dba97aeU, 0x909d8a96U, 0x888b847fU, 0x80767d6dU, 0x7750753fU, 0x77317b1fU, 0x7c0d00d9U, \n0x630d6019U, 0x59285119U, 0x4c0d360dU, 0x36243e3dU, 0x4d5e4c6cU, 0x45793183U, 0x26892eb0U, 0x39bb3fbcU, 0x46b948b6U, 0x45b138b1U, 0x348f408cU, 0x4a934ca5U, 0x51b45cbaU, 0x65ba6db6U, 0x73ab73a3U, 0x7298759aU, 0x7a9e81a4U, 0x86ae8ab9U, 0x8bc28ecaU, 0x8ed48ed9U, 0x98d998ceU, 0x96c092b4U, 0x8d9f8a96U, 0x888b867fU, 0x84758067U, 0x7a557644U, 0x77317b1fU, 0x7c0d00d9U, \n0x640d601aU, 0x5a275119U, 0x4b0d340dU, 0x3723413cU, 0x4f595166U, 0x4b6f2f7bU, 0x27812ea6U, 0x3ab440b6U, 0x46b648b3U, 0x44ae38a9U, 0x35863f85U, 0x49914ca2U, 0x53b05db5U, 0x65b56cb1U, 0x73a974a2U, 0x7399769bU, 0x7b9d7fa5U, 0x81af84bcU, 0x85c487cbU, 0x89d489d9U, 0x93d993d0U, 0x91c38eb7U, 0x8ba18998U, 0x888b877eU, 0x86748365U, 0x7e577746U, 0x77327b1fU, 0x7e0d00d9U, \n0x670d611aU, 0x5c255119U, 0x4b0d320dU, 0x3720443cU, 0x53535b5eU, 0x54662b76U, 0x277d309fU, 0x3bae42b2U, 0x48b249b0U, 0x42a838a1U, 0x3580417eU, 0x489050a1U, 0x55ac5cafU, 0x64af6aadU, 0x70a873a2U, 0x759c779cU, 0x7b9d7ca6U, 0x7daf80bdU, 0x81c483ccU, 0x85d486d9U, 0x91d990d2U, 0x8dc58cb8U, 0x89a3889aU, 0x888b877eU, 0x86748665U, 0x82577945U, 0x78327c1fU, 0x820d00d9U);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor(fragCoord);\n    float frame = (fragCoord.y + float(iFrame)) / 8.;\n    frame = (sin(frame) + 1.) * 3.5;\n    int vtxIdx = int(fragCoord.x);\n    if( vtxIdx >= Cstride)\n    {\n        discard;\n    }\n    uint cv0 = vertices[vtxIdx + (int(floor(frame + 0.)) % CnbFrames) * Cstride];\n    vec4 v0 = vec4(vec2(cv0>>24, (cv0>>16)&255U),vec2((cv0>>8)&255U, (cv0)&255U)); \n    uint cv1 = vertices[vtxIdx + (int(floor(frame + 1.)) % CnbFrames) * Cstride];\n    vec4 v1 = vec4(vec2(cv1>>24, (cv1>>16)&255U),vec2((cv1>>8)&255U, (cv1)&255U));\n    vec4 v = mix(v0, v1, fract(frame));\n    //vec4 v = v0;\n    fragColor = v;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}