{
    "Shader": {
        "info": {
            "date": "1462014174",
            "description": "A simple HDR bloom.\n\nProbably not the best (or most efficient) way to create a blur, but works for what I've done. I've also exaggerated the blur to show it off, because the videos aren't HDR :P",
            "flags": 0,
            "hasliked": 0,
            "id": "4dcXWs",
            "likes": 23,
            "name": "HDR Bloom",
            "published": 3,
            "tags": [
                "posteffect",
                "blur",
                "post",
                "bloom",
                "glow",
                "gaussian",
                "processing"
            ],
            "usePreview": 1,
            "username": "jackdavenport",
            "viewed": 4240
        },
        "renderpass": [
            {
                "code": "//Bloom Settings\n//BLOOM_THRESHOLD - how bright a pixel needs to be to become blurred\n//BLOOM_INTENSITY - how bright the bloom effect is\n//LENS_DIRT - draws lens dirt on the screen\n//DIRT_INTENSITY - how intense the dirt effect is\n//BLOOM_ONLY - only shows the blur created by bloom\n#define BLOOM_THRESHOLD .7\n#define BLOOM_INTENSITY 3.\n#define LENS_DIRT\n#define DIRT_INTENSITY 2.5\n//#define BLOOM_ONLY\n\n//Blur Settings\n//BLUR_ITERATIONS - how many times a blur is created\n//BLUR_SIZE - the radius of the bloom\n//BLUR_SUBDIVISIONS - how many times the texture is sampled per iteration\n#define BLUR_ITERATIONS 3\n#define BLUR_SIZE .03\n#define BLUR_SUBDIVISIONS 32\n\nvec3 getHDR(vec3 tex) {\n \n    return max((tex - BLOOM_THRESHOLD) * BLOOM_INTENSITY, 0.);\n    \n}\n\nvec3 gaussian(sampler2D sampler, vec2 uv) {\n \n    vec3 sum = vec3(0.);\n    \n    for(int i = 1; i <= BLUR_ITERATIONS; i++) {\n     \n        float angle = 360. / float(BLUR_SUBDIVISIONS);\n        \n        for(int j = 0; j < BLUR_SUBDIVISIONS; j++) {\n         \n            float dist = BLUR_SIZE * (float(i+1) / float(BLUR_ITERATIONS));\n            float s    = sin(angle * float(j));\n            float c\t   = cos(angle * float(j));\n            \n#ifndef LENS_DIRT\n            sum += getHDR(texture(sampler, uv + vec2(c,s)*dist).xyz);\n#else\n            vec3 dirt = texture(iChannel1, uv).rgb * DIRT_INTENSITY;\n    \t\tsum += getHDR(texture(sampler, uv+vec2(c,s)*dist).xyz) * dirt;        \n#endif\n            \n        }\n        \n    }\n    \n    sum /= float(BLUR_ITERATIONS * BLUR_SUBDIVISIONS);\n    return sum * BLOOM_INTENSITY;\n    \n}\n\nvec3 blend(vec3 a, vec3 b) {\n \n    return 1. - (1. - a)*(1. - b);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 tx = texture(iChannel0, uv);\n    \n    fragColor.xyz = gaussian(iChannel0, uv);\n    fragColor.a   = tx.a;\n#ifndef BLOOM_ONLY    \n    fragColor.xyz = blend(tx.xyz, fragColor.xyz);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}