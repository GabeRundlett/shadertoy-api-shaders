{
    "Shader": {
        "info": {
            "date": "1669662876",
            "description": "Make sure to pause and restart the sound so it syncs!\n\nThis is the long awaited prequel to Greg 2 https://www.youtube.com/watch?v=GmGLr3c-irA",
            "flags": 64,
            "hasliked": 0,
            "id": "dslSWX",
            "likes": 12,
            "name": "Greg 3",
            "published": 3,
            "tags": [
                "greg",
                "greeg",
                "grog",
                "thegreggening",
                "garg",
                "gegr"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n\n// dont read this code, its not worth it\n// you will only find pain if you continue\n\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define rn 64.\n\nfloat getFreq(float x) {\n\treturn texture(iChannel0, vec2(floor(x * rn + 1.) / rn, 0)).x;\n}\n\nfloat getFreq_smooth(float x) {\n\tfloat index = floor(x * rn) / rn;\n    float next = floor(x * rn + 1.0) / rn;\n\treturn mix(getFreq(index), getFreq(next), smoothstep(0.0, 1.0, fract(x * rn)));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(in vec2 p, in vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.))+min(max(d.x,d.y),0.);\n}\n\nfloat sdSeg(vec3 p, vec3 a, vec3 b, float r) {\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nvec3 rayOri() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float th = tanh(0.08 * iTime);\n    vec3 ro = vec3(0, 13, 3. + 40. * (1.-th));\n    if (iTime > 14.) {\n        float a = 2. * pi * h21(vec2(floor(0.5 * iTime), 11.));\n        if (iTime < 40.)\n            ro.xz *= rot(a + iTime * 10.);\n        else if (iTime > 90. && iTime < 105.) {\n            ro = vec3(0, 13, 3.);\n            ro.xz *= rot(iTime * 4.);\n        }            \n        else\n            ro.xz *= rot(a + iTime);\n        ro.y = 2. * a / pi;\n    }\n    if (iTime > 126.)\n        ro.x += 0.2 * iTime - 126.;\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat dist(vec3 p) {\n    float pd = p.y;\n    float f = getFreq_smooth(0.);\n    float s = 0.04;\n    \n    if (iTime > 90. && iTime < 127.) {\n        pd += 5. * f;\n    }\n    else {\n        if (iTime > 40.) {\n            //p.x += iTime * 1000.;\n            p.xz = mod(p.xz, s * iTime) - 0.5 * s * iTime;\n            p *= 0.6;\n            if (iTime > 50.)\n                p.xz *= rot(4. * iTime);\n                if (iTime > 60.) {\n                p.y -= 1.5;\n                p.yz *= rot(10. * iTime);\n                p.y += 1.5;\n            }\n    }     \n    }\n    \n    float sc = 2. * pow(f, 2.);//1.5 + 0.1 * thc(4., 2. * pi * h21(p.xz) + 10. * iTime);\n    \n    if (iTime > 14.)\n        p *= sc;\n    else\n        p *= 0.2;\n    if (iTime < 40.) {\n        p.y -= 1.5;\n\n        p.xy *= rot(pi-pi * thc(4., pi/2. + iTime));\n        p.y += 1.5;\n        p.xz *= rot(10. * thc(4., iTime));\n    }\n    float sd = length(p - vec3(0,3,0)) - 0.3;\n    float ld = sdSeg(p, vec3(0,1.5,0), vec3(0,3,0), 0.1);\n    float ld2 = sdSeg(p, vec3(-1,2.2,0), vec3(1,2.2,0), 0.075);\n    float ld3 = sdSeg(p, vec3(0,1.5,0), vec3(0.5,0,0), 0.1);\n    float ld4 = sdSeg(p, vec3(0,1.5,0), vec3(-0.5,0,0), 0.1);    \n    float d = min(pd, sd);\n    d = smin(d, ld, 0.12);\n    d = smin(d, ld2, 0.04);\n    d = min(d, ld3);\n    d = min(d, ld4);\n    \n    if (iTime < 14.)\n        return d / (2.);\n    return d / sc;\n}\n\nfloat march(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = dist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = dist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        dist(p-e.xyy),\n        dist(p-e.yxy),\n        dist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 rayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = rayOri();\n    \n    float fr = fract(0.5 * iTime);\n    \n    float h = h21(vec2(131., floor(0.5 * iTime)));\n    float th = tanh(0.2 * max(0., iTime - 12.));\n    if (iTime < 14.) {\n        th = 16.;\n        h = 0.;\n        fr = 1.;\n    }\n    vec3 rd = rayDir(uv, ro, vec3(0, th + h,0), 0.+ fr);\n    if (iTime > 90. && iTime < 105.)\n        rd = rayDir(uv, ro, vec3(0, th + h,0), 1.);\n    \n    vec3 col = vec3(0);\n   \n    float d = march(ro, rd, 1.);\n    \n    vec3 p = ro + rd * d;\n      vec3 n = normal(p);\n    float IOR = 1.2;\n    if(d<MAX_DIST) {        \n      \n        vec3 r = reflect(rd, n);\n\n\n        vec3 lightDir = normalize(vec3(cos(iTime),0.5 * sqrt(2.),sin(iTime)));\n        float dif  = dot(n,  lightDir)*.5+.5;\n        \n        float f = getFreq_smooth(0.);\n        \n        col = vec3(dif) * 10. * th * pow(f, 10.) * pal(4. * f, vec3(0,1,2)/3.); \n        if (p.y < 0.01) {\n            col *= 1./exp(f * 0.25 * length(p.xz));\n            col *= th;\n            col *= 0.75 + 0.25 * thc(4., 2. * pi * f + log(length(p.xz)) * 6. - iTime * 10.);\n            \n            if (iTime > 40. && iTime < 105.)\n                col *=.2 + .8 *mod(floor(0.39 * p.x) + floor(0.4 * p.z), 2.);\n        }\n        else \n            col = mix(vec3(1,0,0), vec3(1), 1.-sqrt(f)) * dif;\n    } \n    \n   // if (iTime > 0.)\n    vec3 tx = texture(iChannel1, p).rgb;\n    col = mix(col, tx, 1.-tanh(0.25 * iTime));\n    if (iTime > 105.)\n        col = mix(col, tx, 0.5 + .5*thc(4., iTime));      \n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 30621,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/athena-landsman/danger-4h30?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}