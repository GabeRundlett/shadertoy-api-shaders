{
    "Shader": {
        "info": {
            "date": "1504859032",
            "description": "Just a quick sketch trying out the volume texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltfcWN",
            "likes": 17,
            "name": "Roiling Cloud",
            "published": 3,
            "tags": [
                "raymarching",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 1147
        },
        "renderpass": [
            {
                "code": "// Hazel Quantock 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\nfloat SDF( vec3 pos )\n{\n    \n    // multi fractal\n    vec3 t = vec3(.02,-.03,-.01)*.3*iTime;\n    vec3 uvw = pos/30.;\n    float f = .0;\n    f += texture(iChannel0,t+uvw*2.).x/2.;\n    f += texture(iChannel0,t+uvw*4.).x/4.;\n    f += texture(iChannel0,t+uvw*8.).x/8.;\n    f += texture(iChannel0,t+uvw*16.).x/16.;\n    f += texture(iChannel0,t+uvw*32.).x/32.;\n\n    f *= .5; // strength of clouds vs bounding shapes\n\n    float g = length(vec3(pos.yz,max(0.,abs(pos.x)-.5)))-1.2;\n//    float g = length(pos.xz)-.7+.5*sin(pos.y-iTime);\n//    g = min(g,length(pos-vec3(0,-2,0))-1.2);\n//    float g = length(vec2(pos.y,length(pos.xz)-(.5+.5*sin(iTime*.31))*2.)) - 1.; // smoke ring!\n//    float g = max(max(abs(pos.x),abs(pos.y)),abs(pos.z)) - 1.; // cube - even hard corners look soft!\n    \n    f += g*.6;\n    \n    return f;\n}\n\nvoid mainImage( out vec4 o, in vec2 uv )\n{\n    vec3 ray = vec3((uv-iResolution.xy*.5)/iResolution.y,.5);\n    ray = normalize(ray);\n    vec3 pos = vec3(0,0,-2);\n    \n    vec2 a = iMouse.xy/iResolution.xy - .5;\n    if ( iMouse.x == .0 && iMouse.y == .0 )\n        a = vec2(-(iTime+sin(iTime))/15.,-.3*cos((iTime+sin(iTime))*.3));\n    a *= vec2(3,2);\n    \n    vec3 csx = vec3(cos(a.x),sin(a.x),-sin(a.x));\n    vec3 csy = vec3(cos(a.y),sin(a.y),-sin(a.y));\n    \n    pos.yz = pos.yz*csy.x + pos.zy*csy.yz;\n    pos.xz = pos.xz*csx.x + pos.zx*csx.yz;\n    ray.yz = ray.yz*csy.x + ray.zy*csy.yz;\n    ray.xz = ray.xz*csx.x + ray.zx*csx.yz;\n    \n    const float density = 12.;\n    const float softness = .1;\n    \n    const float epsilon = .001; // could scale this to pixel size - works well in big scenes\n    float visibility = 1.;\n    float light = 0.;\n    vec3 sunDir = normalize(vec3(1));\n    for ( int i=0; i < 50; i++ )\n    {\n        float h = SDF(pos);\n        float vis = smoothstep(epsilon,softness,h); // really should do an integral thing using previous h\n        h = max(h,epsilon); // ensure we always march forward\n        if ( vis < 1. )\n        {\n            float newvis = visibility * pow(vis,h*density);\n\t    \tlight += (visibility - newvis)*smoothstep( -.5, 1., (SDF(pos+sunDir*softness) - h)/softness );\n            visibility = newvis;\n        }\n        \n        if ( vis <= 0. ) break;\n        pos += h*ray;\n    }\n\n    o = mix( vec4(light*vec4(.9,.8,.7,0)+vec4(.1,.2,.3,1)), vec4(.2,.4,.8,1), visibility );\n    \n    o = pow(o,vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}