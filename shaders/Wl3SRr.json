{
    "Shader": {
        "info": {
            "date": "1580249495",
            "description": "Points in space",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl3SRr",
            "likes": 9,
            "name": "Halftone Noise",
            "published": 3,
            "tags": [
                "halftone",
                "noisegrid"
            ],
            "usePreview": 0,
            "username": "liamegan",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "\n  vec2 getScreenSpace() {\n    vec2 uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    return uv;\n  }\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = getScreenSpace();\n    \n    float w = 30./iResolution.y;\n    \n    uv *= 30.;\n    vec2 grid = floor(uv);\n    vec2 subuv = fract(uv);\n    \n    vec3 colour = vec3(0);\n    float d = 0.;\n    \n    for(int x = -1; x < 2; x++) {\n      \n      for(int y = -1; y < 2; y++) {\n        vec2 os = vec2(x,y);\n        vec2 _grid = grid + os;\n        vec2 _subuv = subuv - os;\n        \n        float r = snoise(_grid*.1 + iTime*.5)*.2+.3;\n          d = r;\n        colour += vec3(smoothstep( r+w, r-w, length(_subuv-.5) ));\n      }\n      \n    }\n    \n\n    fragColor = vec4(colour, mix(0., d, colour.x));\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"Dot Grid\",\n\t\"description\": \"Points in space\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}