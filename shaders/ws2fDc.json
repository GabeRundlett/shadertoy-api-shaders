{
    "Shader": {
        "info": {
            "date": "1591042408",
            "description": "Full screen! I wish more people know how fast and easy fluid solving is... I've shown people in the field and they just reject the idea even though its running right before their eyes. I guess its very difficult for people to unlearn what they were taught",
            "flags": 32,
            "hasliked": 0,
            "id": "ws2fDc",
            "likes": 54,
            "name": "Volumetric Fluid",
            "published": 3,
            "tags": [
                "3d",
                "fluid"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 1383
        },
        "renderpass": [
            {
                "code": "Sampler\nMain\n{\n    vec3 mi = 0.5*vec3(R/N,N*N);\n    vec3 p = vec3(0,0,-R.y/N);\n    vec3 d = normalize(vec3((u-0.5*R)/R.y,1));\n    if (iMouse.z>0.) {\n \t\tp.zx *= e(6.2*iMouse.x/R.x);\n\t\td.zx *= e(6.2*iMouse.x/R.x);\n        p.yz *= e(6.2*iMouse.y/R.y);\n\t\td.yz *= e(6.2*iMouse.y/R.y);\n    } else {\n\t\tp.xz *= e(.2*iTime);\n\t\td.xz *= e(.2*iTime);\n        \n\t\tp.yz *= e(.05*iTime);\n\t\td.yz *= e(.05*iTime);\n\t}\n    Q = vec4(0);\n    for (int i = 0; i < 100; i++) {\n        vec3 o = abs(p)-mi;\n        float m = length(max(o,0.));\n        if (m<.01)\n        { \t\n            vec4 a = 25.*T(p+mi);\n            float aa = length(a);\n            Q += 6e-3*(1.-exp(-aa))*abs(a);\n            p += d*(.1+exp(-.1*aa*aa));\n           //p = mod(p+mi,R3D)-mi;\n        } else p += d*m;\n        \n \t}\n\tQ = atan(Q)*.8;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define N 10.\n#define R iResolution.xy\n#define R3D vec3(R/N,N*N)\n#define d2(U) ((U).xy+vec2(mod(floor((U).z),N),floor(floor((U).z)/N))*R/N)\n#define d3(u) vec3(mod(u,R/N),floor(u/R*N).x+floor(u/R*N).y*N)\n#define e(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define A(U) texture(iChannel0, d2(mod(U,R3D))/R)\n#define B(U) texture(iChannel1,d2(mod(U,R3D))/R)\n#define Sampler vec4 T(vec3 U) {return mix(texture(iChannel0,d2(vec3(U.xy,floor(U.z)))/R),texture(iChannel0,d2(vec3(U.xy, ceil(U.z)))/R),fract(U.z));}\n#define Sampler1 vec4 T1(vec3 U) {return mix(texture(iChannel1,d2(vec3(U.xy,floor(U.z)))/R),texture(iChannel1,d2(vec3(U.xy, ceil(U.z)))/R),fract(U.z));}\n#define Main void mainImage( out vec4 Q, in vec2 u )\n#define _3D  vec3 U = d3(u)\n#define Neighborhood vec4 n = A(U+vec3(0,1,0)), e = A(U+vec3(1,0,0)), f = A(U+vec3(0,0,1)), s = A(U-vec3(0,1,0)), w = A(U-vec3(1,0,0)), b = A(U-vec3(0,0,1));\n#define Init  if (iFrame < 1) ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Sampler\nvoid F (vec3 U, vec3 u, vec4 Q, inout vec3 f, inout float m, inout float w, inout float n) {\n    // Advect\n    vec4 a = T(U+u-A(U+u).xyz);\n    u = normalize(u);\n    // gradient of pressure\n    f += u*(a.w-Q.w);\n    // average pressure\n    m += a.w;\n    // divergence of velocity\n    w += dot(u,a.xyz);\n    // number of neighbors sampled\n    n++;\n}\nMain {\n\t_3D;\n    \n    Q = T(U-A(U).xyz);\n    vec3 f = vec3(0);\n    float w = 0.;\n    float m = 0., n = 0.;\n    \n    \n    F(U,vec3(1,0,0),Q,f,m,w,n);\n    F(U,vec3(0,1,0),Q,f,m,w,n);\n    F(U,vec3(0,0,1),Q,f,m,w,n);\n    F(U,vec3(-1,0,0),Q,f,m,w,n);\n    F(U,vec3(0,-1,0),Q,f,m,w,n);\n    F(U,vec3(0,0,-1),Q,f,m,w,n);\n    \n    \n    f /= n;\n    w /= n;\n    m /= n;\n    Q.w = m - w;\n    Q.xyz -= f;\n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Sampler\nvoid F (vec3 U, vec3 u, vec4 Q, inout vec3 f, inout float m, inout float w, inout float n) {\n    // Advect\n    vec4 a = T(U+u-A(U+u).xyz);\n    u = normalize(u);\n    // gradient of pressure\n    f += u*(a.w-Q.w);\n    // average pressure\n    m += a.w;\n    // divergence of velocity\n    w += dot(u,a.xyz);\n    // number of neighbors sampled\n    n++;\n}\nMain {\n\t_3D;\n    \n    Q = T(U-A(U).xyz);\n    vec3 f = vec3(0);\n    float w = 0.;\n    float m = 0., n = 0.;\n    \n    \n    F(U,vec3(1,0,0),Q,f,m,w,n);\n    F(U,vec3(0,1,0),Q,f,m,w,n);\n    F(U,vec3(0,0,1),Q,f,m,w,n);\n    F(U,vec3(-1,0,0),Q,f,m,w,n);\n    F(U,vec3(0,-1,0),Q,f,m,w,n);\n    F(U,vec3(0,0,-1),Q,f,m,w,n);\n    \n    \n    f /= n;\n    w /= n;\n    m /= n;\n    Q.w = m - w;\n    Q.xyz -= f;\n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Sampler\nvoid F (vec3 U, vec3 u, vec4 Q, inout vec3 f, inout float m, inout float w, inout float n) {\n    // Advect\n    vec4 a = T(U+u-A(U+u).xyz);\n    u = normalize(u);\n    // gradient of pressure\n    f += u*(a.w-Q.w);\n    // average pressure\n    m += a.w;\n    // divergence of velocity\n    w += dot(u,a.xyz);\n    // number of neighbors sampled\n    n++;\n}\nMain {\n\t_3D;\n    \n    Q = T(U-A(U).xyz);\n    vec3 f = vec3(0);\n    float w = 0.;\n    float m = 0., n = 0.;\n    \n    \n    F(U,vec3(1,0,0),Q,f,m,w,n);\n    F(U,vec3(0,1,0),Q,f,m,w,n);\n    F(U,vec3(0,0,1),Q,f,m,w,n);\n    F(U,vec3(-1,0,0),Q,f,m,w,n);\n    F(U,vec3(0,-1,0),Q,f,m,w,n);\n    F(U,vec3(0,0,-1),Q,f,m,w,n);\n    \n    \n    f /= n;\n    w /= n;\n    m /= n;\n    Q.w = m - w;\n    Q.xyz -= f;\n    \n    if (length(U-vec3(0.5,.5,0.9)*R3D) < 5. ) {\n\t\t    \tQ.xyz = vec3(0,0,-.2)*(0.5+0.8*sin(.5*iTime));\n\t\t    }\n     if (length(U-vec3(0.51,.9,.5)*R3D) < 4. ) {\n\t\t    \tQ.xyz = vec3(0,-.4,0)*(0.5+0.8*sin(.2*iTime));\n\t\t    }\n    if (length(U-vec3(0.5,.1,.5)*R3D) < 4. ) {\n\t\t    \tQ.xyz = vec3(0,.4,0)*(0.5+0.8*sin(.4*iTime));\n\t\t    }\n    if (U.x<1.||U.y<1.||U.z<1.||R3D.x-U.x<1.||R3D.y-U.y<1.||R3D.z-U.z<2.) Q.xyz *= 0.;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Sampler\nSampler1\nMain {\n\t_3D;\n    U -= T1(U).xyz;\n    U -= T1(U).xyz;\n    U -= T1(U).xyz;\n    Q = T(U);\n    if (length(U-vec3(0.5,.5,0.9)*R3D) < 3.) {\n\n        Q = 0.5+0.5*sin(.1*iTime*vec4(1,2,3,4));\n    }\n    if (length(U-vec3(0.51,.1,.5)*R3D) < 3. ) {\n    \tQ = 0.5+0.5*sin(.1*iTime+vec4(4,3,2,1));\n    }\n    if (length(U-vec3(0.5,.9,.5)*R3D) < 3. ) {\n    \tQ = 0.5+0.5*sin(.1*iTime-vec4(4,3,2,1));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}