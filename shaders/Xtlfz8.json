{
    "Shader": {
        "info": {
            "date": "1510995923",
            "description": "my first cube :D",
            "flags": 0,
            "hasliked": 0,
            "id": "Xtlfz8",
            "likes": 5,
            "name": "HelloCube",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "simple",
                "tutorial",
                "cube"
            ],
            "usePreview": 0,
            "username": "smkgames",
            "viewed": 653
        },
        "renderpass": [
            {
                "code": "// Created by Seyed Morteza Kamaly - SMK/2017\n\n//I could create this shader by helping this tutorial https://www.youtube.com/watch?v=RGmgHfbU0hU\n\n//https://iquilezles.org/articles/distfunctions\n\n// Constants.\n#define STEPS 64\n#define EPS 0.01\n#define FAR 10.0\n#define PI 3.14159265359\n\n\nmat2 rotate(float a) { \n    return mat2( cos(a), sin(a), -sin(a), cos(a) );\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// Function of distance.\nfloat map( vec3 p ) {\n    p += vec3(0,-1,0); \n    p.xz *= rotate(iTime); \n    return sdBox(p,vec3(1.1));\n   }\n\n// Gradient (numeric) function of the distance function.\nvec3 grad(vec3 p) {\n    vec2 q = vec2(0.0, EPS);\n\n    return vec3(map(p + q.yxx) - map(p - q.yxx),\n                map(p + q.xyx) - map(p - q.xyx),\n                map(p + q.xxy) - map(p - q.xxy));\n}\n\nvec3 shade(vec3 ro, vec3 rd, float t) {\n\tvec3 n = normalize(grad(ro + t*rd));\n    return vec3(0.3, 0.8, 0.7)*pow(1.0-dot(-rd, n), 1.5);\n}\n\n   \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Prepare the radius.\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    \n\n   \n    vec3 ro = vec3(0.0, 1.0, 3.0); // start of the radius.\n    vec3 rd = normalize(vec3(uv, -1.0)); // direction of the radius.\n    \n    // Loop do raymarcher.\n    float t = 0.0, d = EPS;\n    for (int i = 0; i < STEPS; ++i) {\n        d = map(ro + t*rd);\n        if (d < EPS || t > FAR) break;\n        t += d;\n    }\n\n    // Shading.\n    vec3 col = d < EPS ? shade(ro, rd, t) : vec3(0.3, 0.6, 0.7)*(2.0-length(uv));\n    \n    // Post-processing. \n    col = smoothstep(0.0, 1.0, col);\n    col = pow(col, vec3(0.45));\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}