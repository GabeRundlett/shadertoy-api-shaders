{
    "Shader": {
        "info": {
            "date": "1720256221",
            "description": "a small modification",
            "flags": 32,
            "hasliked": 0,
            "id": "MXGSR3",
            "likes": 2,
            "name": "Sound Flower II",
            "published": 3,
            "tags": [
                "asmallmodification"
            ],
            "usePreview": 0,
            "username": "orblivius",
            "viewed": 127
        },
        "renderpass": [
            {
                "code": "// Fork of \"kaleidoscope flower(hw4)\" by zemi. https://shadertoy.com/view/X3GXRG\n// 2024-07-06 08:23:20\n\nvec3 hueShift(vec3 col, float shift){\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\nvec3 aces(vec3 x) {\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 px = 1. / vec2(640.0,360.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tx = texture(iChannel1,uv);\n    float dist = distance(tx,texture(iChannel1,uv+px));\n    px.y *= -1.0;\n    dist += distance(tx,texture(iChannel1,uv+px));\n    px.x *= -1.0;\n    dist += distance(tx,texture(iChannel1,uv+px));\n    px.y *= -1.0;\n    dist += distance(tx,texture(iChannel1,uv+px));\n    uv *= mat2(0.999,0.001,-0.001,0.999);\n\tfragColor = texture(iChannel0,uv*0.995+0.0025)*vec4(0.93,0.91,0.0,0.0)+\n        vec4(smoothstep(0.05,1.3,dist),smoothstep(0.1,2.8,dist),0.0,1.0)*.245;\n\n    fragColor.rgb += hueShift(fragColor.rgb, iTime*.1);\n    fragColor.rgb *= (fragColor.rgb);\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// inspired by foxes' honeycomb fractal\n#define TAU 6.283184\n\nvec3 hash(float x) { \n    return fract(cos((vec3(x) + vec3(23.32445, 132.45454, 65.78943)) * vec3(23.32445, 32.45454, 65.78943)) * 4352.34345); \n}\n\nvec3 noise(float x) {\n    float p = fract(x); \n    x -= p;\n    return mix(hash(x), hash(x + 1.0), p);\n}\n\nvec3 noiseq(float x) {\n    return (noise(x) + noise(x + 10.25) + noise(x + 20.5) + noise(x + 30.75)) * 0.25;\n}\n\nvec3 aces(vec3 x) {\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvec2 rotateUV(vec2 uv, float angle) {\n    angle = angle*TAU;\n    mat2 matrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return matrix * uv;\n}\n\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 hueShift(vec3 col, float shift){\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    float time = iTime * 0.15;\n    vec3 k1 = noiseq(time) * vec3(0.1, 0.19, 0.3) + vec3(1.3, 0.8, 0.63);\n    vec3 k2 = noiseq(time + 1000.0) * vec3(0.2, 0.2, 0.05) + vec3(0.9, 0.9, 0.05);\n\n   \n    // 使用 iChannel0 纹理影响 k1 和 k2\n    float k3 = clamp(texture(iChannel0, vec2(0.01, 0.0)).x, 0.8, 1.0);\n    float k4 = clamp(texture(iChannel0, vec2(0.2, 0.0)).x, 0.5, 1.0);\n    k2 += vec3((k3 - 0.8) * 0.05);\n    k1 += vec3((k4 - 0.5) * 0.01);\n    \n    float g = pow(abs(cos(time * 0.8 + 9000.0)), 4.0);\n    \n    vec2 R = iResolution.xy;\n    vec2 r1 = (U / R.y - vec2(0.5 * R.x / R.y, 0.5));\n    float l = length(r1);\n    vec2 rotate = vec2(cos(time), sin(time));\n    r1 = vec2(r1.x * rotate.x + r1.y * rotate.y, r1.y * rotate.x - r1.x * rotate.y);\n    vec2 c3 = abs(r1.xy / l);\n    if (c3.x > 0.5) c3 = abs(c3 * 0.5 + vec2(-c3.y, c3.x) * 0.86602540);\n    c3 = normalize(vec2(c3.x * 2.0, (c3.y - 0.8660254037) * 7.4641016151377545870));\n    \n    O = vec4(c3 * l * 70.0 * (g + 0.12), 0.5, 0);\n    for (int i = 0; i < 1024; i++) {\n        O.xzy = (k1 * abs(O.xyz / dot(O, O) - k2));\n    }\n    \n    vec2 uv = U / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n     U = 2.*sin(iTime*.2)*rotateUV(U, sin(iTime*.2)*cos(iTime*2.));\n    float radius = length(uv);\n    float angle = atan(uv.y, uv.x) + radius * 3.0 * iTime;\n    vec2 spiralUV = vec2(cos(angle), sin(angle)) * radius;\n    spiralUV = (spiralUV + 1.0) * 0.5;\n\n    vec4 texColor = (texture(iChannel0, vec2(spiralUV.x,.5*abs(sin(iTime*.01)))).rgba + \n        texture(iChannel0, vec2(spiralUV.x+0.01,.5*abs(sin(iTime*.1)))).rgba);\n  \n   O = mix(O, texColor, 0.1);\n    O.rgb *=((O.rgb));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}