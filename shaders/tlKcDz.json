{
    "Shader": {
        "info": {
            "date": "1610865957",
            "description": "I deduced the formula for the \"equiceneter\" of a triangle - the point that is equidistant to all three edges: take the center of mass and pulling it in each vertex's direction proportionally to the length of the side opposite to the vertex",
            "flags": 0,
            "hasliked": 0,
            "id": "tlKcDz",
            "likes": 20,
            "name": "Triangle - Gradient Boundaries",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "equicenter"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 790
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Analytically finding the discontinuties of the\n// gradient of an triangle SDF.\n//\n// They all emanate from a central point, the\n// point that is equally distant from each edge of\n// the triangle. I derived the formula by computing\n// the bisectors of each angle then finding their\n// intersection. Two hours of simplifications later\n// it all reduced itself.\n//\n// Then I discovered this is also called the \"incenter\"\n// and had already a known formula. Oh well, at least\n// I can be proud I landed in the right one by myself.\n\n// Other Gradient boundaries:\n//\n// Triangle: https://www.shadertoy.com/view/tlKcDz\n// Quad:     https://www.shadertoy.com/view/WlycWh\n\n\nvec2 triangleIncenter( in vec2 v0, in vec2 v1, in vec2 v2 )\n{\n    float l0 = length(v2-v1);\n    float l1 = length(v0-v2);\n    float l2 = length(v1-v0);\n\n    return (v0*l0+v1*l1+v2*l2)/(l0+l1+l2);\n}\n\n\n//=====================================================\n\n// signed distance to a disk\nfloat sdDisk( in vec2 p, in vec2 c, in float r )\n{\n    return length(p-c)-r;\n}\n\n// distance to a line segment\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n// signed distance to a 2D triangle\nfloat cro(in vec2 a, in vec2 b ) { return a.x*b.y-a.y*b.x; }\nfloat dot2( in vec2 a ) { return dot(a,a); }\nvec3 sdgTriangle( in vec2 p, in vec2 v0, in vec2 v1, in vec2 v2 )\n{\n    float gs = cro(v0-v2,v1-v0);\n    vec4 res;\n    \n    // edge 0\n    {\n    vec2  e = v1-v0;\n    vec2  w = p-v0;\n    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);\n    float d = dot(q,q);\n    float s = gs*cro(w,e);\n    res = vec4(d,q,s);\n    }\n    \n    // edge 1\n    {\n\tvec2  e = v2-v1;\n    vec2  w = p-v1;\n    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);\n    float d = dot(q,q);\n    float s = gs*cro(w,e);\n    res = vec4( (d<res.x) ? vec3(d,q) : res.xyz,\n                (s>res.w) ?      s    : res.w );\n    }\n    \n    // edge 2\n    {\n\tvec2  e = v0-v2;\n    vec2  w = p-v2;\n    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);\n    float d = dot(q,q);\n    float s = gs*cro(w,e);\n    res = vec4( (d<res.x) ? vec3(d,q) : res.xyz,\n                (s>res.w) ?      s    : res.w );\n    }\n    \n    // distance and sign\n    float d = sqrt(res.x)*sign(res.w);\n    \n    return vec3(d,res.yz/d);\n\n}\n\n//=====================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n\t\n\tvec2 v0 = cos( 0.5*iTime + vec2(0.0,2.0) + 0.0 );\n\tvec2 v1 = cos( 0.5*iTime + vec2(0.0,1.5) + 1.5 );\n\tvec2 v2 = cos( 0.5*iTime + vec2(0.0,3.0) + 4.0 );\n\n    // compute traingle SDF\n\tvec3 dg = sdgTriangle( p, v0, v1, v2 );\n    float d = dg.x;\n    vec2 g = dg.yz;\n    \n    // compute triangle equicenter (yellow dot)\n    vec2 ce = triangleIncenter( v0, v1, v2 );\n\n    // draw triangle SDF\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(1.1,1.4,1.7)*0.5;\n    col *= 0.5+vec3(0.5+0.5*g,0.5);\n    col *= 1.0 - 0.9*exp(-5.0*abs(d));\n    col *= 0.8 + 0.2*cos(200.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    col = clamp(col,0.0,1.0);\n\n    // animate equicenter display\n    float al = 1.0;//smoothstep(-0.2,0.2,cos(3.1415927*iTime) );\n    \n    // draw helped bisectors\n    col = mix(col,vec3(1.0,1.0,1.0),al*smoothstep(px,0.0,sdSegment( p, v0, ce )-0.005));\n    col = mix(col,vec3(1.0,1.0,1.0),al*smoothstep(px,0.0,sdSegment( p, v1, ce )-0.005));\n    col = mix(col,vec3(1.0,1.0,1.0),al*smoothstep(px,0.0,sdSegment( p, v2, ce )-0.005));\n    \n    // draw equicenter in red\n    col = mix(col,vec3(1.0,1.0,0.0),al*smoothstep(px,0.0,sdDisk(p,ce,0.025)));\n\n    // output\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}