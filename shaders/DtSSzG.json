{
    "Shader": {
        "info": {
            "date": "1676231919",
            "description": "WARNING: THRAX HERE.. I DID NOT WRITE THIS, I MERELY FIXED THE ASPECT RATIO. APOLOGIES FOR ANY MISUNDERSTANDING. ORIGINAL TITLE IS BELOW:\nMy first shader !\nNot impressive looking, but I hope it's original.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtSSzG",
            "likes": 3,
            "name": "Fork Playable P manthrax 828",
            "published": 3,
            "tags": [
                "game"
            ],
            "usePreview": 0,
            "username": "manthrax",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "// Pong shader\n// \n// press the mouse and drag up and down to play.\n// HF ! jerome.\n// \n// todo :ball trail.\n\nvec2 uv;\nvec4 col;\nfloat aspect;\nvoid drawCircle( vec2 center, float radius )\n{\n\tvec2 dif = center - uv;\n    dif.x *= aspect;\n\tif( length(dif) < radius )\n\t{\n\t\tcol = vec4(1.0);\n\t}\n}\n\nvoid drawRectangle( vec2 center )\n{\n\tcenter.y = clamp(center.y, 0.25, 0.75 );\n\tif( abs( center.x - uv.x ) < 0.02 )\n\t{\n\t\tif( abs( center.y - uv.y ) < 0.05  )\n\t\t{\n\t\t\tcol = vec4(1,0,0,0);\n\t\t}\n\t}\n}\n\nvoid drawTable()\n{\n\tif( abs( 0.5 - uv.x ) < 0.25 )\n\t{\n\t\tif( abs( 0.5 - uv.y ) < 0.25  )\n\t\t{\n\t\t\tcol = vec4(0.2,0.2,0.2,1.0);\n\t\t}\n\t}\n}\n\nfloat GetheightForTime( float time )\n{\n\tfloat y = 0.0;\n\t\n\t// the X speed is always the same, only the Y speed varies\n\tfloat arraySpeed[3];\n\tarraySpeed[0] = 0.5;\n\tarraySpeed[1] = 0.4;\n\tarraySpeed[2] = 0.3;\n\t\t\n\tfloat div = floor( time / 3.0 );\n\tfloat rest = time - div*3.0;\n\tfloat distanceTotale = div * 0.4 * 3.0; // avg speed is 0.4\n\t\n\tif( rest > 0.0 && rest <= 1.0)\n\t{\n\t\tdistanceTotale += arraySpeed[0] * rest;\n\t}\n\tif( rest > 1.0 && rest <= 2.0)\n\t{\n\t\tdistanceTotale += arraySpeed[0] + arraySpeed[1] * (rest-1.0);\n\t}\n\telse if( rest > 2.0 )\n\t{\n\t\tdistanceTotale += arraySpeed[0] + arraySpeed[1] + arraySpeed[2]*(rest-2.0);\n\t}\t\n\t\n\tfloat restant = fract( distanceTotale );\n\t// move on the Y axis\n\t// how many time did we bounce so far ?\n\tif( restant >= 0.5 )\n\t{\n\t\ty = 0.25 - (restant-0.5);// going down\n\t}\n\telse\n\t{\n\t\ty = -0.25 + restant; //frc*dec; // going up\n\t}\n\n\treturn y;\n}\n\nvec2 findCenter()\n{\n\tvec2 start = vec2(0.5,0.5); // center\n\t\n\tfloat speed = 0.50; // 2 secs to go from one side to the other.\n\tfloat x = 0.;\n\tfloat y = 0.;\n\tfloat secs = floor(iTime);\t\n\tfloat dec = fract( iTime );\n    \n\ty = GetheightForTime(iTime);\n\t\n\t// move on the X axis (speed is constant, easy):\n\tfloat restant = fract( iTime * 0.5 );\n\tif( restant >= 0.5  )\n\t{\n\t\tx = 0.25 - (restant-0.5);\n\t}\n\telse\n\t{\n\t\tx = -0.25 + restant;\n\t}\n\t\n\t// check if the player missed\n\tif( x > 0.24 && length( iMouse.x ) > 100.0 )\n\t{\n\t\t// when is the ball going to reach the right side ?\n\t\tfloat timeReach = ceil( iTime );\n\t\tfloat yfuture = GetheightForTime( timeReach );\n\t\tif( abs( (0.5+y) - (iMouse.y / iResolution.y) ) > 0.07 )\n\t\t{\n\t\t\tcol = vec4(1.0,0.0,0.0,1.0);\n\t\t}\n\t}\n\n\treturn start + vec2(x,y);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\naspect = iResolution.x/iResolution.y;\n\tcol = vec4(0);\n\tuv = fragCoord.xy / iResolution.xy;\n\tvec2 center = findCenter();\n\t\n\tdrawTable();\n\tcenter.x = ((center.x-.5)*1.05)+.5;\n\tdrawCircle( center, 0.03 );\n\t\n\tif( length( iMouse.x ) > 100.0 )\n\t{\n\t\tdrawRectangle( vec2(0.8, iMouse.y / iResolution.y) );\n\t}\n\telse\n\t{\n\t\tdrawRectangle( vec2(0.8, center.y) );\n\t}\n\t\n\t// AI raquette\n\tdrawRectangle( vec2(0.2, center.y) );\n\tfragColor = col;\n}\n\t\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}