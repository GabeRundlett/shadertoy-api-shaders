{
    "Shader": {
        "info": {
            "date": "1712897047",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "McGGzG",
            "likes": 1,
            "name": "rolling shutter abcde",
            "published": 3,
            "tags": [
                "distortion",
                "camera",
                "shutter",
                "rolling"
            ],
            "usePreview": 0,
            "username": "sayochi",
            "viewed": 93
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nconst float HALF_PI = PI / 2.0;\n\n\nbool isInRectangle(vec2 point, vec2 rectPosition, vec2 rectSize) {\n    return point.x >= rectPosition.x &&\n           point.x < rectPosition.x + rectSize.x &&\n           point.y >= rectPosition.y &&\n           point.y < rectPosition.y + rectSize.y;\n}\n\nvec3 drawRectangle(vec2 fragCoord, vec2 rectPosition, vec2 rectSize, vec3 rectColor, float angle) {\n    vec2 rotatedFragCoord = fragCoord - rectPosition;\n    float s = sin(angle);\n    float c = cos(angle);\n    vec2 rotatedCoords = vec2(\n        rotatedFragCoord.x * c - rotatedFragCoord.y * s,\n        rotatedFragCoord.x * s + rotatedFragCoord.y * c\n    );\n    \n    if (isInRectangle(rotatedCoords, -rectSize*0.5f, rectSize)) {\n        return rectColor;\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 screenSize = iResolution.xy;\n    vec2 rectSize = screenSize * vec2(0.5, 0.1);\n    vec2 rectCenter = screenSize * 0.5;\n\n    float rollingSpeed =  fragCoord.y * 0.01f;\n    float rotateAngle = iTime;\n\n    float angle = rotateAngle + rollingSpeed;\n\n    vec3 rectColor1 = vec3(1.0f, 0.0f, 0.0f);\n    vec3 rectColor2 = vec3(0.0f, 1.0f, 0.0f);\n    \n    vec3 pixelColor = vec3(0.0f);\n    pixelColor += drawRectangle(fragCoord, rectCenter, rectSize, rectColor1, angle);\n    pixelColor += drawRectangle(fragCoord, rectCenter, rectSize, rectColor2, angle + HALF_PI);\n\n    fragColor = vec4(pixelColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}