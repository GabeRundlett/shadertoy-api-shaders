{
    "Shader": {
        "info": {
            "date": "1727295858",
            "description": "no longer explodes outside of -1 to 1 range",
            "flags": 0,
            "hasliked": 0,
            "id": "l3jcWW",
            "likes": 1,
            "name": "inverse sqrt explosion hack",
            "published": 3,
            "tags": [
                "approximation",
                "hack",
                "bodge"
            ],
            "usePreview": 0,
            "username": "janpitokiala",
            "viewed": 50
        },
        "renderpass": [
            {
                "code": "float func(float x) {\n  return inversesqrt(x);\n}\n#define ITERATIONS iTime\nfloat taylor(float x) {\n  float mul = 1.;\n  float sum = 1.;\n  for(float i=1.;i<=ITERATIONS;i++) {\n    mul *= -(2.*i-1.)*x/(2.*i);\n    sum += mul;\n  }\n  return sum;\n}\n#define LOOP_POINT 1.5\nfloat func2(float x) {\n  float mul = 1.;\n  if(x>LOOP_POINT) {\n    while(x>LOOP_POINT) {\n      x /= 4.;\n      mul /= 2.;\n    }\n  } else if(x<LOOP_POINT/4.) {\n    while(x<LOOP_POINT/4.)  {\n      x *= 4.;\n      mul *= 2.;\n    }\n  }\n  return taylor(x-1.)*mul;\n}\n#define ZOOM 2.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv *= ZOOM;\n    float y = func(uv.x)-.5;\n    vec3 col = vec3((0.005-distance(uv.y,y)/ZOOM)*iResolution.y);\n    float y2 = func2(uv.x)-.5;\n    col.rg = vec2((0.005-distance(uv.y,y2)/ZOOM)*iResolution.y);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}