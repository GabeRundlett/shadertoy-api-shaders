{
    "Shader": {
        "info": {
            "date": "1639928016",
            "description": "spent ages making a nice example with this, then PC crashed :(\n\nu could use v for any kind of cell property, e.g. circle radius, offsetting a trajectory, color,\neach cell changes randomly \"independently\" of the others",
            "flags": 0,
            "hasliked": 0,
            "id": "7tdSDX",
            "likes": 10,
            "name": "nice technique 2",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "// issue: \n// floor(val) + ipos gives it a diagonal bias (not always noticeable)\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    float sc = 24.;\n    vec2 ipos = floor(sc * uv) + 0.5;\n    vec2 fpos = sc * uv - ipos;\n    \n    // you can put anything here\n    float val = h21(ipos) - iTime;\n    // val = h21(ipos) - 10. * uv.y - iTime;\n    \n    // Gives each cell a fixed angle (removes diagonal bias)\n    /*\n    float a = 2. * 3.14159 * h21(ipos);\n    float c = cos(a); \n    float s = sin(a);\n    \n    // current value (using 0.01 so it looks \"random\" for longer)\n    float v = h21(vec2(c * floor(val), s * floor(val)) + 0.01 * ipos);\n    // next value\n    float v2 = h21(vec2(c * (floor(val) + 1.), s * (floor(val) + 1.)) + 0.01 * ipos);\n    */\n    \n    // current value (using 0.01 so it looks \"random\" for longer)\n    float v = h21(floor(val) + 0.01 * ipos);\n    // next value\n    float v2 = h21(floor(val) + 1. + 0.01 * ipos);\n    \n    // smooth lerp between values\n    float m = fract(val);\n    m = m * m * (3. - 2. * m);\n    v = mix(v, v2, m);\n    \n    fragColor = vec4(v);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}