{
    "Shader": {
        "info": {
            "date": "1709162442",
            "description": "experimenting with perlin noise",
            "flags": 0,
            "hasliked": 0,
            "id": "X32GWV",
            "likes": 2,
            "name": "rainbow phases",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Krapas",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "vec3 n_rand3(vec3 p) {\n\n    vec3 r = \n        fract(\n            sin(\n                vec3(\n                    dot(p, vec3(127.1,311.7,371.8)),\n                    dot(p,vec3(269.5,183.3,456.1)),\n                    dot(p,vec3(352.5,207.3,198.67))\n                )\n            ) * 43758.5453\n        ) * 2.0 - 1.0;\n    return normalize(vec3(r.x/cos(r.x), r.y/cos(r.y), r.z/cos(r.z)));\n}\n\nfloat noise(vec3 p) {\n\n    vec3 fv = fract(p);\n    vec3 nv = vec3(floor(p));\n    \n    vec3 u = fv*fv*fv*(fv*(fv*6.0-15.0)+10.0);\n    \n    return (\n        mix(\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,0.0) ), fv-vec3(0.0,0.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,0.0) ), fv-vec3(1.0,0.0,0.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,0.0) ), fv-vec3(0.0,1.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,0.0) ), fv-vec3(1.0,1.0,0.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,1.0) ), fv-vec3(0.0,0.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,1.0) ), fv-vec3(1.0,0.0,1.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,1.0) ), fv-vec3(0.0,1.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,1.0) ), fv-vec3(1.0,1.0,1.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            u.z\n       )\n  );\n}\n\nfloat oct_noise(vec3 pos, int o)\n{\n\n    float ns = 0.0;\n    float d = 0.0;\n    for(int i=0;i<o;++i)    \n    {\n        float v = pow(2.0,float(i));\n        d += 1.0/v;\n        ns += noise(pos*v)*(1.0/v);\n    }\n    \n    return ns/d;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n    return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 pos = fragCoord/iResolution.xy;\n    pos.x *= iResolution.x/iResolution.y;\n    pos *=  5.0;\n    \n    float result = oct_noise(vec3(pos,iTime), 8);\n    \n    result = abs(result+(sin(iTime*2.0)/4.0)) > 0.2 ? 1.0 : abs(result+(sin(iTime*2.0)/4.0));\n    result = map(result, 0.0, 0.2, 1.0, 0.0);\n    \n    vec3 color = hsv2rgb(vec3(result+iTime/4.0, 1.0, 1.0));\n    \n    fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}