{
    "Shader": {
        "info": {
            "date": "1650198920",
            "description": "sample code\ncontour of the union/intersection/complement of SDFs",
            "flags": 0,
            "hasliked": 0,
            "id": "slScWG",
            "likes": 1,
            "name": "9_1_boolOp2d",
            "published": 3,
            "tags": [
                "ch9"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nfloat rectSDF(vec2 p, vec2 c, vec2 d){\n    p = abs(p - c);\n    return length(max(p - d, vec2(0.0))) + min(max(p.x - d.x, p.y - d.y), 0.0);\n}\nfloat circleSDF(vec2 p, vec2 c, float r){\n    return length(p - c) - r;\n}\nvec3 contour(float v, float interval){\n    return abs(v) < 0.01 ? vec3(0.0):\n    mod(v, interval) < 0.01 ? vec3(1.0):\n    mix(vec3(0, 0, 1), vec3(1, 0, 0), atan(v) / PI + 0.5);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 pos = (2.0 * fragCoord.xy -iResolution.xy)/ iResolution.yy;\n    float v1 = circleSDF(pos, vec2(0.2), 0.4);\n    float v2 = rectSDF(pos, vec2(-0.2), vec2(0.4));\n    float v = int(iTime) % 3 == 0 ? max(v1, v2):\n        int(iTime)% 3 == 1 ? min(v1, v2):\n        max(v1, -v2);\n    fragColor = vec4(contour(v, 0.1), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}