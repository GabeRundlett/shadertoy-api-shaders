{
    "Shader": {
        "info": {
            "date": "1641385373",
            "description": "My participation to genuary 2022",
            "flags": 32,
            "hasliked": 0,
            "id": "7lcSR2",
            "likes": 7,
            "name": "Genuary 2022 - Day3",
            "published": 3,
            "tags": [
                "space",
                "generative",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb, vec3(1.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    //rgb *= 1.-sat(length(cuv*2.)-.5);\n    //rgb += vec3(.5)*(1.-sat((abs(cuv.x)-.115)*400.));\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.1\n#define GLOW_POW .9\n#define GLOW_OPACITY .4\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.)\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x) + abs(v.y);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000., -1.);\n    \n//    acc = _min(acc, vec2(length(p)-1., 0.));\n    \n    float ground = max(-p.y, p.z);\n    acc = _min(acc, vec2(ground, 0.));\n    \n    float th = .2;\n    float rad = 1.;\n    float windowCircle = max(max(length(p.xy)-rad, abs(p.z-th)-.2), -(length(p.xy)-(rad-th)));\n    acc = _min(acc, vec2(windowCircle, 0.));\n    \n    vec3 pu = p-vec3(0.,0.,th);\n    float stpa = PI*2./12.;\n    float an = atan(pu.y, pu.x);\n    float b = mod(an+stpa*.5,stpa)-stpa*.5;\n    pu.xy = vec2(sin(b), cos(b))*length(p.xy);\n    \n    float upperWindow = _cube(pu-vec3(0.,1.9,0.), vec3(th*.5, 1., 2.));\n    upperWindow = max(upperWindow, p.z-th);\n    upperWindow = max(upperWindow, -(length(p.xy)-abs(cos(p.z*.25))));\n    acc = _min(acc, vec2(upperWindow, 0.));\n    \n    float th2 = .2;\n    float rad2 = 1.1;\n    float hull = max(max(length(p.xy)-rad2, abs(p.z-th2)-5.2), -(length(p.xy)-(rad2-th)));\n    hull = max(hull, p.z+1.75);\n    acc = _min(acc, vec2(hull, 0.));\n\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(d)-\n    vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\n\n\n\nvec3 getEnv(vec3 rd)\n{\n    vec3 lightA = 2.*sat(length(rd.xy*2.))*vec3(1.,1.,2.)*pow(texture(iChannel0, .5*vec2(atan(rd.y, rd.x), length(rd.xy)*.1-iTime*.1)).x, 5.);\n    vec3 lightB = sat(length(rd.xy*4.))*vec3(0.310,0.137,0.780)*pow(texture(iChannel0, .1*vec2(atan(rd.y, rd.x)+1., length(rd.xy)*.1-iTime*.05)).x, 3.);\n     vec3 lightC = sat(length(rd.xy*2.))*vec3(1.000,0.302,0.639)*pow(texture(iChannel0, .25*vec2(atan(rd.y, rd.x), length(rd.xy)*.1-iTime*.2)).x, 1.)*.5;\n    vec3 stars = sat(length(rd.xy*1.))*vec3(1.)*pow(texture(iChannel0, .5*vec2(atan(rd.y, rd.x), length(rd.xy)*2.-iTime*.5)).x, 5.)*.5;\n\n    return stars + (lightA + lightB + lightC)*1.5 \n    + vec3(0.400,0.882,0.875)*pow(1.-sat(lenny(rd.xy)),15.)*2.\n        + .75*vec3(0.722,0.863,1.000)*pow(1.-sat(lenny(rd.xy)),3.)*1.*(1.+0.2*rand());\n\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = vec3(0.);\n    vec3 lpos = vec3(0.,-4.,2.);\n    vec3 ldir = lpos-p;\n    vec3 h = normalize(ldir+rd);\n    col = vec3(.5)*pow(texture(iChannel2, p.xz*.25).x,5.); // ambient\n    col += vec3(1.000,0.502,0.675)*pow(sat(dot(n,h)),5.);\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0.,-.2,-3.8);\n    vec3 ta = vec3(0.,-0.5,0.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    \n    vec3 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(res, rd, p, n);\n        float spec = .8*pow(texture(iChannel2, p.xz*2.).x,2.5);\n        vec3 diff = normalize(reflect(rd, n)+spec*(vec3(rand(), rand(), rand())-.5));\n\n        vec3 resdiff = trace(p+n*0.01, diff, 64);\n        if (resdiff.y > 0.)\n        {\n            vec3 pdiff = p+diff*resdiff.y;\n            vec3 ndiff = getNorm(pdiff, resdiff.x);\n            \n            col += getMat(resdiff, diff, pdiff, ndiff); \n        }\n        else\n            col += getEnv(diff);\n    }\n    else\n        col = getEnv(rd);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    seed = texture(iChannel0, uv).x+iTime;\n    vec2 off = (vec2(rand(), rand())-.5)*2.;\n    vec3 col = rdr(uv+off/iResolution.xx);\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .95);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}