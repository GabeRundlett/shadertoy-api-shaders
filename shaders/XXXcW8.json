{
    "Shader": {
        "info": {
            "date": "1726068441",
            "description": "Flower of the Helius - CIS 5660 - Toolkit Func Project",
            "flags": 0,
            "hasliked": 0,
            "id": "XXXcW8",
            "likes": 0,
            "name": "Flower of the Helius- jichumao",
            "published": 3,
            "tags": [
                "circle"
            ],
            "usePreview": 0,
            "username": "jichumao",
            "viewed": 49
        },
        "renderpass": [
            {
                "code": "/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n \n float triangle_wave(float x, float freq, float amplitude) {\n    \n    return abs(mod((x * freq) , amplitude) - (0.5 * amplitude));\n}\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.12 * iResolution.y;\n    \n    // Centered uv\n    //vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    vec2 uvCenter = uv - iResolution.xy * 0.5;\n    // Get pixel angle around the center\n    float a = atan(uvCenter.y, uvCenter.x);\n    float rotatedAngle = a + iTime;\n    \n    float petals = 1000.0;  \n    float deformation = pow(sin(rotatedAngle * petals), 5.0f) * 0.10 * iResolution.y;\n    \n    // Create a smooth transition effect\n    float smoothDeformation = sin(iTime * 0.5);\n    \n    float explodeEffect = sin(iTime * 1.0) * 0.5 + 0.5;\n    //return radius + deformation * smoothDeformation;\n    return radius + deformation * explodeEffect;\n}\n\nvec3 animatedBackground(vec2 uv)\n{\n    // Create a gradient that changes over time\n    float t = sin(iTime * 1.0) * 0.2 + 0.8;\n\n    float len = uv.x/iResolution.x;\n    \n    //vec3 color1 = vec3(0.2) + vec3(0.5) * sin(iTime * 0.15);\n    vec3 color1 = vec3(0.0);\n    //vec3 color2 = vec3(1.0, 0.85, 0.6) ;\n    vec3 color2 = vec3(0.5, len, len);\n    return mix(color1, color2, t);\n}\n\n\nvec3 fadecolor(vec2 uv) {\n\n    float d = length(iResolution.xy * 0.5 - uv)/60.0;\n    float cd = clamp(d, 0.0, 1.0);\n    \n    vec3 color1 = vec3(0.11, 1 , 1);\n    vec3 color2 = vec3(0.7, 0.0 , 0.00);\n    \n    return mix(color1, color2, cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord.xy;\n    vec2 center = iResolution.xy * 0.5;\n    \n    // Compute the dynamic radius for the sharper flower shape\n    float radius = computeRadius(uv);\n    \n    // Create animated background\n    vec3 bgColor = animatedBackground(uv);\n    vec4 layer1 = vec4(bgColor, 1.0);\n    \n    // Create flower shape\n    \n    //vec3 red = vec3(0.85, 0.23, 0.25);\n    vec3 color = fadecolor(uv);\n    vec4 flowerLayer = circle(uv, center, radius, color);\n\t\n    float innerRadius = 15.0 + sin(2.0 * iTime) * 2.0;\n    vec3 flowerCenterColor = fadecolor(uv * sin(iTime * 0.03));\n    vec4 flowerCenter = circle(uv, center, innerRadius, flowerCenterColor);\n    \n    flowerLayer = mix(flowerLayer, flowerCenter, flowerCenter.a);\n     \n    fragColor = mix(layer1, flowerLayer, flowerLayer.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}