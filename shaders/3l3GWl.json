{
    "Shader": {
        "info": {
            "date": "1577857209",
            "description": "用光线步进做个球。\nuse ray marching make a sphere.\nlearn by the art of code\nhttps://www.youtube.com/watch?v=Ff0jJyyiVyw",
            "flags": 0,
            "hasliked": 0,
            "id": "3l3GWl",
            "likes": 2,
            "name": "球形的光线步进（sphere ray marching）",
            "published": 3,
            "tags": [
                "raymarching",
                "artofcodetutorial"
            ],
            "usePreview": 0,
            "username": "ywqy",
            "viewed": 406
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\n//球形\nfloat sdSphere(vec3 point, vec3 offset, float radius) {\n\treturn length(point - offset) - radius;\n}\n\n//平面\nfloat sdPlane(vec3 point, vec3 offset, vec3 normal) {\n\treturn dot(point - offset, normal.xyz);\n}\n\n//计算射线上的点到物体的最小距离\nfloat GetDist(vec3 point) {\n    \n    float sphereDistance = sdSphere(point, vec3(0, 1, 6), 1.0);\n    float planeDistance = sdPlane(point, vec3(0, 0, 6), normalize(vec3(0, 1, -0.4)));\n    \n    float minDistance = min(sphereDistance, planeDistance);\n    \n    return minDistance;\n}\n\n//使用光线步进\nfloat RayMarch(vec3 rayOrigin, vec3 rayDrection) {\n\tfloat distanceFromOrigin = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 point = rayOrigin + rayDrection * distanceFromOrigin;\n        float minDistance = GetDist(point);\n        distanceFromOrigin += minDistance;\n\n        if(distanceFromOrigin > MAX_DIST || minDistance < SURF_DIST) \n            break;\n    }\n    \n    return distanceFromOrigin;\n}\n\n//运用偏移得到法向量\nvec3 GetNormal(vec3 hitPoint) {\n\tfloat hitDistance = GetDist(hitPoint);\n    vec2 epsilon = vec2(.01, 0);\n    \n    vec3 hitNormal = hitDistance - vec3(\n        \tGetDist(hitPoint - epsilon.xyy),\n        \tGetDist(hitPoint - epsilon.yxy),\n        \tGetDist(hitPoint - epsilon.yyx)\n    \t);\n    \n    return normalize(hitNormal);\n}\n\n//漫反射和其阴影\nfloat GetDiffuseLight(vec3 hitPoint) {\n\tvec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 10.0;\n    \n    vec3 lightDirection = normalize(lightPos - hitPoint);\n    vec3 hitNormal = GetNormal(hitPoint);\n    \n    float diffuseLight = dot(hitNormal, lightDirection);\n    diffuseLight = clamp(diffuseLight, 0.0, 1.0);\n    \n    float shadowTolightDist = RayMarch(hitPoint + hitNormal * SURF_DIST * 2.0, lightDirection);\n    if(shadowTolightDist < length(lightPos - hitPoint)) \n        diffuseLight *= .1;\n    \n    return diffuseLight;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    vec3 rayOrigin = vec3(0, 3, -3);\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n\n    float dist = RayMarch(rayOrigin, rayDirection);\n    vec3 hitPoint = rayOrigin + dist * rayDirection;\n    float diffuseLight = GetDiffuseLight(hitPoint);\n    \n    vec3 col = vec3(diffuseLight);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}