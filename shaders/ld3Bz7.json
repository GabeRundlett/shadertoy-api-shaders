{
    "Shader": {
        "info": {
            "date": "1524839673",
            "description": "Learning Music Visual & Shader",
            "flags": 0,
            "hasliked": 0,
            "id": "ld3Bz7",
            "likes": 1,
            "name": "Music Visual Dots",
            "published": 3,
            "tags": [
                "music",
                "visual"
            ],
            "usePreview": 0,
            "username": "tigerhuangyuhao",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "#define bars 6.0                 // How many buckets to divide spectrum into\n#define barSize 1.0 / bars        // Constant to avoid division in main loop\n#define barGap 0.1 * barSize      // 0.1 represents gap on both sides, so a bar is\n                                  // shown to be 80% as wide as the spectrum it samples\n#define sampleSize 0.02           // How accurately to sample spectrum, must be a factor of 1.0\n                                  // Setting this too low may crash your browser!\n\n// Helper for intensityToColour\nfloat h2rgb(float h) {\n\tif(h < 0.0) h += 1.0;\n\tif(h < 0.166666) return 0.1 + 4.8 * h;\n\tif(h < 0.5) return 0.9;\n\tif(h < 0.666666) return 0.1 + 4.8 * (0.666666 - h);\n\treturn 0.1;\n}\n\nfloat sphere(float a, float b, float x, float y, float radius) {\n    float d =  pow(a-x,2.) + pow(b-y, 2.) - radius;\n    return d < 0. ? pow(smoothstep(-0., -radius, d), .2) : 0.; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t// Map input coordinate to [0, 1)\n    float resolution_ratio = iResolution.x/iResolution.y;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.x *= resolution_ratio;\n\t// Get the starting x for this bar by rounding down\n\tfloat barStart = floor(uv.x / resolution_ratio * bars) / bars;\n    \n\t// Sample spectrum in bar area, keep cumulative total\n\tfloat intensity = 0.0;\n\tfor(float s = 0.0; s < barSize; s += barSize * sampleSize) {\n\t\t// Shader toy shows loudness at a given frequency at (f, 0) with the same value in all channels\n\t\tintensity += texture(iChannel0, vec2(barStart + s, 0.0)).r;\n\t}\n\tintensity *= sampleSize; // Divide total by number of samples taken (which is 1 / sampleSize)\n\tintensity = clamp(intensity, 0.000, 1.0); // Show silent spectrum to be just poking out of the bottom\n    \t\n\tfloat d = sphere(uv.x, uv.y, resolution_ratio*barStart+barSize, 0.5, intensity*0.02);        \n    \n   \tfragColor = vec4(d);  // Final output\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}