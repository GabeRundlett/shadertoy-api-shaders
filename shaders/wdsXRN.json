{
    "Shader": {
        "info": {
            "date": "1550774061",
            "description": "Looks cool, but it's pretty slow.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdsXRN",
            "likes": 5,
            "name": "Voronoided",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "Blokatt",
            "viewed": 597
        },
        "renderpass": [
            {
                "code": "#define POINT_N 60\n\nstruct Point {\n\tvec2 position;\n    vec3 colour;\n};\n    \nvec4 dither(vec3 col, vec2 frag, int depth){    \n    float cols = float(depth);\n    float val = texture(iChannel0, mod(frag / 8., 1.)).r;\n\treturn vec4((floor((col.rgb + val * (1. / cols)) * cols) / cols), 1.0);\n}    \n\nfloat noise(vec2 p){\n\treturn fract(sin(dot(p, vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b, float t){\n    vec2 m = vec2(a + b) / 2.;\n    a = vec2(-(a.y - m.y), a.x - m.x) + m;\n    b = vec2(-(b.y - m.y), b.x - m.x) + m; \t\n    float dst = abs((b.y - a.y) * p.x - (b.x - a.x) * p.y + (b.x * a.y) - (b.y * a.x)) / distance(a, b);\n    return smoothstep(0., t * 1.5, dst);        \t              \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Point point[POINT_N];\n    float t = iTime* 6.28318530718 / 2.5;\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.x *= ratio;\n    uv -= .5;  \n    \n    for (int i = 0; i < POINT_N; ++i) {\n    \tpoint[i].position = vec2(noise(vec2(float(i))) * ratio + sin(float(i) * .1 + t) * .1,\n                                 noise(vec2(float(i + 2))) + cos(float(i + 15) * .1 + t * .5) * .1\n                                ) - .5;\n        point[i].position.x += sin(point[i].position.x + t * .5) * .25;  \n        point[i].colour =  hsv2rgb(vec3(noise(vec2(float(i))),\n                                .5,\n                                1.));                              \n    }\n       \n    /*\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse.x *= iResolution.x / iResolution.y;\n    mouse -= .5;\n    point[POINT_N - 1].position = mouse;\n    */\n    \n    int closestIndex = 0;\n    float closestDistance = 999999.; \n    \n    for (int i = 0; i < POINT_N; ++i) {\n    \tfloat d = distance(uv, point[i].position);\n        if (d < closestDistance){                \n        \tclosestIndex = i;             \n            closestDistance = d;             \n        }\n    }\n\n    fragColor = vec4(point[closestIndex].colour, 1.) * (1. - .05 * pow(1. + closestDistance, 8.));\n    float thickness = min(dFdx(uv.x), dFdy(uv.y));\n    for (int i = 0; i < POINT_N; ++i) {\n    \tfragColor *= smoothstep(.005, .01, distance(uv, point[i].position));\n    \tif (i != closestIndex) fragColor *= line(uv, point[closestIndex].position, point[i].position, thickness);\n    }\n    fragColor = dither(fragColor.rgb, fragCoord, 255);\n       \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}