{
    "Shader": {
        "info": {
            "date": "1694722147",
            "description": "Animated logo of React.js\n\nCredits to munrocket who did the original version (https://www.shadertoy.com/view/td3czf)",
            "flags": 0,
            "hasliked": 0,
            "id": "ms3yzH",
            "likes": 8,
            "name": "React logo",
            "published": 3,
            "tags": [
                "bezier",
                "logo",
                "curves",
                "glow",
                "react"
            ],
            "usePreview": 0,
            "username": "jsulpis",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "//====================================================================================\n//\n// React logo \n// by Julien Sulpis (https://twitter.com/jsulpis)\n// https://www.shadertoy.com/view/ms3yzH\n//\n// forked from Magic Loader by Krischan (https://www.shadertoy.com/view/fsGGWG)\n//\n//====================================================================================\n\n#define SCALE 0.5\n#define SPEED 0.5\n#define INTENSITY 15.0\n#define LENGTH 1.8\n#define RADIUS 0.020\n#define FADING 0.05\n#define GLOW 6.\n#define COLOR vec3(0.0, 0.84, 0.97)\n\n#define PI 3.1415926535 \n\n// optimized 2d version of https://www.shadertoy.com/view/ldj3Wh\nvec2 sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C)\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    vec2 res;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    h = sqrt(h);\n    vec2 x = (vec2(h, -h) - q) / 2.0;\n    vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n    float t = clamp(uv.x+uv.y-kx, 0.0, 1.0);\n\n    return vec2(length(d+(c+b*t)*t),t);\n}\n\nvec2 circle(float t){\n    float x = SCALE * sin(t);\n    float y = SCALE * cos(t);\n    return vec2(x, y);\n}\n\nfloat mapcircle(vec2 pos, float delay){\n    float t = fract(-SPEED * iTime + delay);\n    float dl = LENGTH / INTENSITY;\n    vec2 p1 = circle(t * 2.*PI);\n    vec2 p2 = circle((dl + t) * 2.*PI);\n    vec2 c = (p1 + p2) / 2.0;\n    float d = 1e9;\n    \n    for(float i = 2.0; i < INTENSITY; i++){\n        p1 = p2;\n        p2 = circle((i * dl + t) * 2.*PI);\n        vec2 c_prev = c;\n        c = (p1 + p2) / 2.;\n        vec2 f = sdBezier(pos, c_prev, p1, c);\n        d = min(d, f.x + FADING * (f.y + i) / INTENSITY);\n    }\n    return d;\n}\n\nmat2 rotate2D(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec2 deformation = vec2(.5, 1.3);\n    \n    float dist1 = mapcircle(rotate2D(-PI/3.) * uv * deformation, .0);\n    float dist2 = mapcircle(rotate2D(PI/3.) * uv * deformation, 1.);\n    float dist3 = mapcircle(uv * deformation, .5);\n    \n    float col1 = pow(RADIUS/dist1, GLOW);\n    float col2 = pow(RADIUS/dist2, GLOW);\n    float col3 = pow(RADIUS/dist3, GLOW);\n\t\n    float center = smoothstep(.18, .05, length(uv));\n    \n\tvec3 col = (col1 + col2 + col3 + center) * COLOR * (2. * GLOW);\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}