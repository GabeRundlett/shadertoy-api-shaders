{
    "Shader": {
        "info": {
            "date": "1471237177",
            "description": "So, I wondered what would happen if set up a function where I flood filled pixels based on a function where every colour beats half of the colour space.  I also introduce one new random pixel per frame.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "4td3Dr",
            "likes": 19,
            "name": "pixel dominance",
            "published": 3,
            "tags": [
                "cellular",
                "pretty",
                "floodfill"
            ],
            "usePreview": 1,
            "username": "abznak",
            "viewed": 4353
        },
        "renderpass": [
            {
                "code": "/* the interesting code is all in Buf A */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv;\n    \n    //copy Buf A to the screen\n    uv = fragCoord.xy / iResolution.xy;\n    \n    // this removes the 'down-left' tendency that the Buf A algorithm produces\n    //uv = fract((fragCoord.xy-vec2(float(iFrame))) / iResolution.xy);\n    \n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* \n * random number, varying by time.  Seed should be a prime.\n *\n * Just reads the data from iChannel1 in sequence if seed is 1.  It's going to repeat every\n * 65535 frames, but the state should be different enough that it doesn't matter.\n * I'd like to set the seeds up so differently seeded calls repeat at different rates but I'm\n * not sure I've done that yet.  It works, anyway.\n */\nvec4 rnd_tv(int seed) {                \n    const float res_x = 256.;\n    const float res_y = 256.;    \n    int j = iFrame * seed;\n    float x = mod(float(j), res_x);\n    float y = mod((float(j) / res_x), res_y);\n\treturn texture(iChannel1, vec2(x/res_x, y/res_y));\n}\n\n\n// old color, reliative to current pixel\nvec4 oldColor(in vec2 fragCoord, in vec2 dxy) {    \n    return texture(iChannel0,  fract((fragCoord.xy + dxy) / iResolution.xy));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tconst vec4 black = vec4(0., 0., 0., 1.);\n    const vec4 white = vec4(1.);\n    const vec4 red = vec4(1., 0., 0., 1.);\n    // current coordinates, normalised 0..1\n    vec2 uv = fragCoord.xy / iResolution.xy;              \n    \n\n    //////////////////////    \n    // sometimes adds a small coloured square at a random location\n    //////////////////////    \n    if (true) {        \n        vec2 rpt = rnd_tv(1).xy;\n        \n        // I don't think iChannel1 is uniform.  Zooms in a bit to a more uniform area.\n        // some of the resulting points are out of bounds now.  That's fine.\n        rpt *= 2.;\n        rpt -= .5;\n                         \n        const float square_size = 2.;\n        if (all(lessThan(abs(uv - rpt), vec2(square_size)/iResolution.xy))) {                   \n            fragColor = rnd_tv(13);\n            fragColor.a = 1.;\n            return;\n        } \n    }\n    \n    \n    \n    \n    //////////////////////\n \t// pick the dominant pixel from neighbouring pixels (and this pixel).   \n \t//////////////////////\n    \n    \n    // get old colour from buffer\n    #define oc(x,y) (oldColor(fragCoord, vec2(x,y)))    \n    \n    vec4 oldcol = oc(0., 0.);          \n    vec4 col = oldcol;\n    \n\t#define notblack(x) (any(greaterThan(x, black)))\n    #define isblack(x) (!notblack(x))\n    \n    \n    //iterate over nearby pixels\n    for (float dx = -1.0; dx < 2.0; dx++) {\n        for (float dy = -1.0; dy < 2.0; dy++) {\n            vec4 acol = oc(dx, dy);\n\n            float q = dot(acol, acol);\n            float w = dot(col, col);\n\n            \n            // if the colour being replaced is background (black), always replace it with\n            // anything that isn't black.\n            if (isblack(col)&&notblack(acol)) {\n                col = acol;\n            }\n\n            \n            if (notblack(acol)) {\n                float diff = (q - w)/1.5; //    1.5 = 3/2 to rescale -3..3 to -1..1                   \n\n                // different cutoffs are fun, as are varying cutoffs.\n                float cutoff;\n                cutoff = 0.5;\n                //cutoff = sin(float(iFrame/100)) * .5;\n                \n                // designed so ever pixel beats half of the colour space, see https://www.shadertoy.com/view/Mtt3Wn\n                if ((diff < 0. && diff > -cutoff) || (diff > cutoff)) {\n                    col = acol;  //note - picked deterministically if multiple pixels qualify\n                }\n            }\n        }\n    }        \n   \n    fragColor = col;    \n}\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}