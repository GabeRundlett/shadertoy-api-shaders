{
    "Shader": {
        "info": {
            "date": "1676797698",
            "description": "A quick test of the ai",
            "flags": 32,
            "hasliked": 0,
            "id": "Dl2SDt",
            "likes": 0,
            "name": "Dj Shader Chat GPG",
            "published": 3,
            "tags": [
                "ai"
            ],
            "usePreview": 0,
            "username": "DJSoundPhaze",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Get the audio waveform from the iChannel0 texture input\n    vec4 waveform = texture(iChannel0, vec2(0.0, 0.5));\n    \n    // Calculate the average amplitude of the waveform\n    float amplitude = (waveform.x + waveform.y + waveform.z + waveform.w) / 4.0;\n    \n    // Calculate the color based on the amplitude\n    vec3 color = vec3(amplitude);\n    \n    // Add laser beams\n    float laser = smoothstep(0.98, 1.0, amplitude) * 0.5;\n    color += vec3(1.0, 0.5, 0.0) * laser;\n    \n    // Add sound waves\n    float wave = sin(fragCoord.x * 10.0 + iTime * 10.0) * amplitude * 0.1;\n    color += vec3(0.0, 0.5, 1.0) * wave;\n    \n    // Add pulsating circles\n    vec2 center = vec2(0.5, 0.5);\n    float radius = length(fragCoord - center) * 2.0;\n    float pulse = sin(iTime * 3.0) * 0.2 + 0.8;\n    color += vec3(pulse) * smoothstep(1.0, 0.99, radius);\n    \n    // Add rotating squares\n    vec2 squareCoord = fragCoord - vec2(0.5, 0.5);\n    float angle = atan(squareCoord.y, squareCoord.x) + iTime * 2.0;\n    float squareSize = 0.1;\n    vec2 rotatedSquare = vec2(cos(angle), sin(angle)) * squareSize;\n    float square = smoothstep(0.98, 1.0, amplitude) * 0.5;\n    color += vec3(0.5, 0.0, 1.0) * square * smoothstep(squareSize, 0.0, length(rotatedSquare - squareCoord));\n    \n    // Set the output color\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Define the size of the buffer\nconst float BUFFER_SIZE = 0.03;\n\n// Define the strength of the buffer effect\nconst float BUFFER_STRENGTH = 0.05;\n\n// Define the speed of the buffer effect\nconst float BUFFER_SPEED = 0.5;\n\n// Define the color of the buffer effect\nconst vec3 BUFFER_COLOR = vec3(0.5, 1.0, 0.5);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Get the audio waveform from the iChannel0 texture input\n    vec4 waveform = texture(iChannel0, vec2(0.0, 0.5));\n    \n    // Calculate the average amplitude of the waveform\n    float amplitude = (waveform.x + waveform.y + waveform.z + waveform.w) / 4.0;\n    \n    // Calculate the color based on the amplitude\n    vec3 color = vec3(amplitude);\n    \n    // Add laser beams\n    float laser = smoothstep(0.98, 1.0, amplitude) * 0.5;\n    color += vec3(1.0, 0.5, 0.0) * laser;\n    \n    // Add sound waves\n    float wave = sin(fragCoord.x * 10.0 + iTime * 10.0) * amplitude * 0.1;\n    color += vec3(0.0, 0.5, 1.0) * wave;\n    \n    // Add pulsating circles\n    vec2 center = vec2(0.5, 0.5);\n    float radius = length(fragCoord - center) * 2.0;\n    float pulse = sin(iTime * 3.0) * 0.2 + 0.8;\n    color += vec3(pulse) * smoothstep(1.0, 0.99, radius);\n    \n    // Add rotating squares\n    vec2 squareCoord = fragCoord - vec2(0.5, 0.5);\n    float angle = atan(squareCoord.y, squareCoord.x) + iTime * 2.0;\n    float squareSize = 0.1;\n    vec2 rotatedSquare = vec2(cos(angle), sin(angle)) * squareSize;\n    float square = smoothstep(0.98, 1.0, amplitude) * 0.5;\n    color += vec3(0.5, 0.0, 1.0) * square * smoothstep(squareSize, 0.0, length(rotatedSquare - squareCoord));\n    \n    // Apply the buffer effect\n    vec2 bufferCoord = fragCoord - vec2(0.5, 0.5);\n    float bufferDist = length(bufferCoord);\n    float bufferWave = sin(bufferDist * 50.0 + iTime * BUFFER_SPEED);\n    float bufferStrength = smoothstep(1.0, BUFFER_SIZE, bufferDist) * BUFFER_STRENGTH * bufferWave;\n    color += BUFFER_COLOR * bufferStrength;\n    \n    // Set the output color\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}