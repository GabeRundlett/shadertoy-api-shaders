{
    "Shader": {
        "info": {
            "date": "1718283779",
            "description": "fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "M3VGDV",
            "likes": 3,
            "name": "fractal generated",
            "published": 3,
            "tags": [
                "fractal",
                "cindeshader",
                "geomerty"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 100
        },
        "renderpass": [
            {
                "code": "/* sourses https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/Nsy3Dy \n\nThank you gaz for your excellent work in the field of fractal geometry,\ngood luck in your creative work */\n/*\nLet every useful work that helps others in work \nor knowledge bring joy and income, not taking away from another, \nbut multiplying both your own benefits and the benefits of others... \nwith gratitude by default, how at least something works by default in the world*/\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)cos((h)*6.3+vec3(0,23,21))*.5+.5\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n     vec2 uv = (C - .5*iResolution.xy ) / iResolution.y;\n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));  \n    for(\n        float i=0.,g=0.,e,s;\n        ++i<80.;\n        O.rgb+=mix(r/r,H(log(s)),0.5)*.05*exp(-.45*i*i*e))\n    {\n   \n        p=g*d-vec3(0.,.0,1.0);\n       \n        \n        p=R(p,normalize(vec3(0,0,0)),iTime*0.0);\n        p.xy*=mat2(cos(iTime*0.1),sin(iTime*0.1),-sin(iTime*0.1),cos(iTime*0.1) );\n        s=4.;\n        vec4 q=vec4(p,sin(iTime*.15)*.5);\n   \n\t\tfor(int j=0;j++<10;)\n        \n            q=abs(q),\n            \n             \n            q=q.x<q.y?q.zwxy:q.zwyx,\n            q=q.z<q.y?q.xyzw:q.zywx,\n               \n            s*=e=2.15/min(dot(q,q),0.54),\n            q=q*e-vec4(0,4,.8,3);\n         \n        g+=e=min(\n            length(q.w)/s,\n            length(cross(q.xyw,normalize(vec3(1,2,3))))/s-.0002\n        );\n    }\n    O=pow(O,vec4(5));\n  \n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O+= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.15)*.05, 1.0);\n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}