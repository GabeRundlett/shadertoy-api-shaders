{
    "Shader": {
        "info": {
            "date": "1663744356",
            "description": "only 16 colors, nothing more.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftdfDX",
            "likes": 27,
            "name": "With Palette!",
            "published": 3,
            "tags": [
                "raymarching",
                "simple",
                "ray",
                "raymarch",
                "colorful",
                "marching",
                "palette",
                "march",
                "8bit",
                "render",
                "16bit"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 453
        },
        "renderpass": [
            {
                "code": "void render(inout float col,vec2 uv){\n\tvec3 ro = vec3(0.0,0.0,3.0);\n\tvec3 rd = normalize(vec3(uv,-2.0));\n\t\n\tfloat d = 0.0;\n\tfor(float i=0.0;i<256.0;i++){\n\t\tvec3 p = ro + rd*d, cp = p;\n\t\tcp.xy *= mat2(cos(time),-sin(time),sin(time),cos(time));\n\t\tcp.yz *= mat2(cos(time),-sin(time),sin(time),cos(time));\n\t\tcp.zx *= mat2(cos(time),-sin(time),sin(time),cos(time));\n\t\tfloat h = smin(p.y + 0.5,length(max(abs(cp)-0.4,0.0)) - 0.4,0.25);\n\t\tif(h < 0.001 || d > 20.0) break;\n\t\td += h;\n\t}\n  \n  if(d < 20.0){\n  \tvec3 p = ro + rd*d;\n  \tcol += p08*dot(vec3(0.8),p);\n  }\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = (2.0*fragCoord-res.xy)/res.y;\n  vec3 col = vec3(0.0);\n  float colp = 0.0;\n\n  render(colp,uv);\n  \n  colp = mod(floor(colp * 36.0),16.0);\n  \n  switch(int(colp)){\n  \tcase 0: col = A; break;\n  \tcase 1: col = B; break;\n  \tcase 2: col = C; break;\n  \tcase 3: col = D; break;\n  \tcase 4: col = E; break;\n  \tcase 5: col = F; break;\n  \tcase 6: col = G; break;\n  \tcase 7: col = H; break;\n  \tcase 8: col = I; break;\n  \tcase 9: col = J; break;\n  \tcase 10: col = K; break;\n  \tcase 11: col = L; break;\n  \tcase 12: col = M; break;\n  \tcase 13: col = N; break;\n  \tcase 14: col = O; break;\n  \tcase 15: col = P; break;\n  }\n\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.141592\n#define tau pi*2.0\n\n#define time iTime\n#define res iResolution\n\n//sweetie-16 palette//\n#define A vec3(0x1a,0x1c,0x2c) / 255.0\n#define B vec3(0x5d,0x27,0x5d) / 255.0\n#define C vec3(0xb1,0x3e,0x53) / 255.0\n#define D vec3(0xef,0x7d,0x57) / 255.0\n#define E vec3(0xff,0xcd,0x75) / 255.0\n#define F vec3(0xa7,0xf0,0x70) / 255.0\n#define G vec3(0x38,0xb7,0x64) / 255.0\n#define H vec3(0x25,0x71,0x79) / 255.0\n#define I vec3(0x29,0x36,0x6f) / 255.0\n#define J vec3(0x3b,0x5d,0xc9) / 255.0\n#define K vec3(0x41,0xa6,0xf6) / 255.0\n#define L vec3(0x73,0xef,0xf7) / 255.0\n#define M vec3(0xf4,0xf4,0xf4) / 255.0\n#define N vec3(0x94,0xb0,0xc2) / 255.0\n#define O vec3(0x56,0x6c,0x86) / 255.0\n#define P vec3(0x33,0x36,0x57) / 255.0\n\n#define p00 0.025 * 0.0\n#define p01 0.025 * 1.0\n#define p02 0.025 * 2.0\n#define p03 0.025 * 3.0\n#define p04 0.025 * 4.0\n#define p05 0.025 * 5.0\n#define p06 0.025 * 6.0\n#define p07 0.025 * 7.0\n#define p08 0.025 * 8.0\n#define p09 0.025 * 9.0\n#define p10 0.025 * 10.0\n#define p11 0.025 * 11.0\n#define p12 0.025 * 12.0\n#define p13 0.025 * 13.0\n#define p14 0.025 * 14.0\n#define p15 0.025 * 15.0\n\nfloat smin(float a,float b,float k){\n  float h = clamp(0.5 + 0.5*(b-a)/k,0.0,1.0);\n  return mix(b,a,h) - k*h*(1.0-h);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}