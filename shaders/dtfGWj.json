{
    "Shader": {
        "info": {
            "date": "1672832942",
            "description": "Some old never puiblished shader I did on Shader Editor on android.",
            "flags": 64,
            "hasliked": 0,
            "id": "dtfGWj",
            "likes": 10,
            "name": "Trippy landscape travel",
            "published": 3,
            "tags": [
                "landscape",
                "trippy",
                "synthware"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _seed;\n\nfloat hash11(float seed)\n{\n  return fract(sin(seed*123.456)*123.456);\n}\n\nfloat rand()\n{\n  return hash11(_seed++);\n}\nmat2 r2d(float a)\n{\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c,-s,s,c);\n}\n#define sat(a) clamp(a,0.1,1.)\nfloat _sqr(vec2 uv, vec2 s)\n{\n  vec2 l = abs(uv)-s;\n  return max(l.x,l.y);\n}\nfloat _cube(vec3 p, vec3 s)\n{\n  vec3 l = abs(p)-s;\n  return max(l.x,max(l.y,l.z));\n}\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd,r));\n  return normalize(rd+(r*uv.x+u*uv.y)*3.5);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if(a.x<b.x)\n  return a;\n  return b;\n}\n\nvec2 map(vec3 p)\n{\n  vec2 acc = vec2(10000.,-1.);\n\nfloat height = sat(-.3+.7*abs(asin(sin(p.x+sin(p.z+iTime*.3)))))*1.5;\nacc = _min(acc, vec2(-p.y-height,1.));\n//acc = _min(acc, vec2(-p.z+550.,1.));\n//acc = _min(acc, vec2(length(p)-1.,0.));\nvec3 p2 =p+vec3(0.,20.,-45.);\np2.xy *= r2d(iTime);\np2.xz *= r2d(iTime*.7);\nacc = _min(acc, vec2(_cube(p2,vec3(5.)),0.));\n\n\nfloat tube = length(p.xy-vec2(0.,-1.5)\n  -vec2(sin(p.z+iTime+sin(p.z*.5)),cos(p.z)))-.02;\nacc = _min(acc, vec2(tube,2.));\n  return acc;\n}\n\nvec3 getNorm(float d, vec3 p)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  accCol = vec3(0.);\n  vec3 p = ro;\n  for (int i = 0;i<steps;++i)\n  {\n    vec2 res = map(p);\n    if (res.x<0.01)\n      return vec3(res.x,distance(p,ro),res.y);\n    p+=rd*res.x*.5;//*mix(.1,20.,sat(length(p.xz)-55.));\n    if(res.y==2.)\n      accCol += vec3(1.,.2,.2)*(1.-sat(res.x/.2))*.25;\n  }\n  return vec3(-1.);\n}\n\nvec3 rdrSun(vec3 rd)\n{\n  vec3 sun = (vec3(255.,215.,90.)/255.)*\n      pow(sat(5.*(-.8+\n        dot(rd,normalize(vec3(0.,-.5,1.))))),4.)\n        *float(rd.y<0.);\n  //sun = vec3(0.);\n  //sky =vec3(0.);// sat(-.5+dot(rd,normalize(vec3(0.,0.,1.))))*vec3(1.);\nreturn sun;\n}\n\nvec3 rdrSky(vec3 rd)\n{\n  vec3 cols[5];\n  cols[0] = vec3(255.,71.,52.)/255.;\n  cols[1] = vec3(255.,141.,97.)/255.;\n  cols[2] = vec3(217.,142,255.)/255.;\n  cols[3] = vec3(103.,133.,255.)/255.;\n  cols[4] = .7*vec3(93.,83.,220.)/255.;\n  float cur = pow(abs(rd.y)*15.,.5);\n  int icur = int(cur);\n  vec3 sky= mix(cols[min(icur,4)],\n    cols[min(icur+1,4)],\n    smoothstep(0.,1.,fract(cur)));\n\n        return sky*1.3;\n}\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res)\n{\n  if(res.z==0.)\n    return (n*.5+.5)*.5;\n  if(res.z==1.)\n    return vec3(.1)*sat(dot(rd, normalize(p-vec3(-5.))));\n  if(res.z==2.)\n  return vec3(1.,.3,.4);\n  return vec3(.1);\n}\nvec3 rdr(vec2 uv)\n{\n\n  vec3 col= vec3(0.);\n\nuv*=r2d(.2*sin(iTime*.4));\n  float t = iTime*.33;\n  vec3 ro = vec3(0.,-2.,-5.);\n  vec3 ta = vec3(sin(iTime*.2)*3.,-1.+sin(iTime*.2)*2.,0.);\n  vec3 rd = normalize(ta-ro);\n\n  rd = getCam(rd,uv);\n  float depth = 100.;\n\n  vec3 res = trace(ro,rd, 256);\n  if (res.y >0.)\n  {\n    depth = res.y;\n    vec3 p = ro+rd*res.y;\n    vec3 n = getNorm(res.x,p);\n    col = getMat(p,n,rd,res);\n  vec3 refl = normalize(reflect(rd,n)\n    +.1*(vec3(rand(),rand(),rand())));\nvec3 resrefl = trace(p+n*0.01,refl,128);\nif(p.y>-0.17)\n{\nif(resrefl.y>0.)\n{\n  vec3 prefl = p+refl*resrefl.y;\n  vec3 nrefl = getNorm(resrefl.x,prefl);\n\n  col += getMat(prefl,nrefl, refl, resrefl);\n}\nelse\n{\n  col+= rdrSky(refl)+rdrSun(refl);\n\n  }\n  }\n  }\ncol+=accCol;\ncol = mix(col, rdrSky(rd),1.-exp(-depth*0.01));\nif(depth>99.)\ncol+= vec3(1.)*pow(texture(iChannel0, rd.xy*1.5).x,5.);\nif (depth>99.)\ncol+= rdrSun(rd);\nfloat mask = 1.-sat(_sqr(\n  (uv-vec2(0.,.35))*r2d(3.14159265*.25),\n  vec2(.35))*400.);\ncol = mix(col, col.yzx,mask);\ncol = pow(col, vec3(.74545));\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.xx;\n_seed = iTime+texture(iChannel0,uv).x;\n  vec3 col = rdr(uv);\n\n\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 31810,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/airglowsounds/electrifyinglandscape?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}