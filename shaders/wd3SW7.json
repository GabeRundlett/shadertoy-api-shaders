{
    "Shader": {
        "info": {
            "date": "1572186314",
            "description": "A little landcape I made inspired from a few things I saw on pinterest",
            "flags": 0,
            "hasliked": 0,
            "id": "wd3SW7",
            "likes": 30,
            "name": "Chill landscape",
            "published": 3,
            "tags": [
                "2d",
                "landscape",
                "chill"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 488
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 green = vec3(0.42,0.55,0.33).xxx;\nvec3 blue = vec3(0.12,0.33,0.45);\n\n\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nfloat sat(float a)\n{\n    return clamp(a, 0., 1.);\n}\nbool inRange(float a, float mi, float ma)\n{\n  return a> mi &&a<ma;\n}\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\nfloat lenny(vec3 v)\n{\n  return abs(v.x)+abs(v.y)+abs(v.z);\n}\n\nfloat inC(vec2 uv, vec2 pos, float r)\n{\n  return 1.0-sat((length(uv-pos) - r)*550.);\n}\n\nfloat cloud(vec2 uv, vec2 pos)\n{\n  uv.x*=0.8;\n  uv*=2.;\n  float cr = inC(uv,pos+vec2(0.1,0.),0.05);\n  float cl = inC(uv,pos-vec2(0.1,0.),0.05);\n  float base = float(abs(uv.x-pos.x)<0.1&&(abs(uv.y-pos.y)<0.051));\n  float cm = inC(uv,pos+vec2(0.05,0.05),0.07);\n  float cb = inC(uv,pos+vec2(-0.05,0.02),0.07);\n\n  return float(sat(cr+cl+cm+cb+base));\n}\n\nfloat rdrMask(vec2 uv)\n{\n  float c = cloud(uv, vec2(sin(iTime*0.5)*0.5,0.3));\n  float c2=cloud(uv*vec2(-1.,1.)*0.5, vec2(0.3*sin(iTime*0.1),0.2));\n    \n  float inCircle = 1.0-sat((length(uv) - 0.4)*500.);\n  return inCircle * float((1.-c)*(1.-c2));\n}\n\n\nvec3 rdrWater(vec2 uv)\n{\n  float shape = sin(uv.y*20.)*0.1;\n  float thick =0.4*(0.1-uv.y);\n  float f =float(inRange(uv.x,shape-thick, shape+thick));\n\n  vec3 col =mix(green, blue, sin(iTime+uv.y*50.)*0.2+rand(uv.yx));\n  float light =dot(normalize(uv+vec2(0.+0.1*sin(iTime+pow(1.0+uv.y*3., 2.)*103.),0.)),vec2(0.,-1.));\n  return col*f*pow(light,5.);\n}\nvec3 rdr(vec2 uv)\n{\n\n  float isUp = float(sat((0.1*sin(uv.x*10.-4.)*250.+uv.y*450.)));\n  vec2 uvo = uv;\n  vec3 col;\n  uvo+= vec2(sin(-iTime)*0.1,cos(-iTime)*0.1);\n  for(int i= 0;i<10;++i)\n  {\n    col += vec3(0.02*float(10-i))*float(length(uvo)<(0.05*float(i)));\n  }\n  vec3 water = rdrWater(uv)*(1.-isUp);\n  return water+mix(green,blue,uv.y*4.+0.3)*isUp+col*(0.8*isUp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n    vec2 ouv = uv;\n  vec2 center = vec2(0.5)*iResolution.xy/iResolution.xx;\n  uv = uv - center;\n\n  uv*=1.6;\n  vec3 col =0.7* (1.-length(uv+vec2(0.,-0.3)))*vec3(0.21,0.12,0.657);\n  \n  col = col/pow(lenny(col),0.1);\n  col = mix(col, rdr(uv), rdrMask(uv));\n  col += vec3(0.3,uv.y,0.56)*(rand(uv)*0.1+0.5)*lenny(uv);\n  col +=( 1.-length(2.*uv+vec2(0.,-0.3)))*0.5;\n  col *= vec3(0.7,0.6,0.55)*1.7;\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}