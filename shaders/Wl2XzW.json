{
    "Shader": {
        "info": {
            "date": "1565239852",
            "description": "Just experimenting.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl2XzW",
            "likes": 5,
            "name": "3D fbm test",
            "published": 3,
            "tags": [
                "3d",
                "noise",
                "fbm",
                "random"
            ],
            "usePreview": 0,
            "username": "uqone",
            "viewed": 1439
        },
        "renderpass": [
            {
                "code": "#define HASHSCALE1 vec3(.1031)\n\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE1);\n\tp3 += dot(p3, p3.yxz+19.19);\n\treturn fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 noise( in vec3 x )\n{\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\treturn mix(\tmix(mix( hash(p+vec3(0,0,0)), \n\t\t\t\t\t\thash(p+vec3(1,0,0)),f.x),\n\t\t\t\t\tmix( hash(p+vec3(0,1,0)), \n\t\t\t\t\t\thash(p+vec3(1,1,0)),f.x),f.y),\n\t\t\t\tmix(mix( hash(p+vec3(0,0,1)), \n\t\t\t\t\t\thash(p+vec3(1,0,1)),f.x),\n\t\t\t\t\tmix( hash(p+vec3(0,1,1)), \n\t\t\t\t\t\thash(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nconst mat3 m3 = mat3( 0.00,  0.80,  0.60,\n\t\t\t\t\t-0.80,  0.36, -0.48,\n\t\t\t\t\t-0.60, -0.48,  0.64 );\nvec3 fbm(in vec3 q)\n{\n\tvec3 f  = 0.5000*noise( q ); q = m3*q*2.01;\n\tf += 0.2500*noise( q ); q = m3*q*2.02;\n\tf += 0.1250*noise( q ); q = m3*q*2.03;\n\tf += 0.0625*noise( q ); q = m3*q*2.04;\n#if 1\n\tf += 0.03125*noise( q ); q = m3*q*2.05; \n\tf += 0.015625*noise( q ); q = m3*q*2.06; \n\tf += 0.0078125*noise( q ); q = m3*q*2.07; \n\tf += 0.00390625*noise( q ); q = m3*q*2.08;  \n#endif\n\treturn vec3(f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = fbm(float(iTime) + 1000.0 + vec3(fragCoord.x, fragCoord.y, (fragCoord.x + fragCoord.y) * 0.5) * 0.01);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}