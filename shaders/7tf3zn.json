{
    "Shader": {
        "info": {
            "date": "1621406436",
            "description": "No longer do we need to warp each individual axis.\n\nTo use the ordinary noise value, take result.w (left)\nTo use the warping vector, take result.xyz (center)\nTo apply the warping vector, add it back onto the coordinate with some multiplier (right)",
            "flags": 0,
            "hasliked": 0,
            "id": "7tf3zn",
            "likes": 4,
            "name": "OpenSimplex2 Domain Warp Noise",
            "published": 3,
            "tags": [
                "noise",
                "simplex",
                "opensimplex",
                "domainwarp"
            ],
            "usePreview": 0,
            "username": "KdotJPG",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Normalized pixel coordinates (from 0 to 1 on largest axis)\n    vec2 uv = fragCoord / max(iResolution.x, iResolution.y) * 24.0;\n    \n    // Input point\n    vec3 X = vec3(uv, mod(iTime, 578.0) * 0.8660254037844386);\n    \n    // Evaluate noise\n    vec4 noiseResult = openSimplex2_ImproveXYPlanes(X);\n    \n    vec3 col;\n    if (fragCoord.x < iResolution.x / 3.0)\n        col = noiseResult.www;\n    else if (fragCoord.x < iResolution.x * (2.0 / 3.0))\n        col = noiseResult.xyz;\n    else {\n        col = openSimplex2_ImproveXYPlanes(X * 0.75 + noiseResult.xyz * 0.375 + 32.).www;\n    }\n    col = col * 0.5 + 0.5;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0 license https://creativecommons.org/share-your-work/public-domain/cc0/\n\n/////////////// K.jpg's OpenSimplex2, domain-warping vector-output variant ///////////////\n////////////////////// Output: vec4(warpX, warpY, warpZ, fullValue) //////////////////////\n\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 257.0);\n}\n\n// Gradient set is a cuboctahedron\nvec3 grad(float hash) {\n    vec2 g2 = mod(trunc(hash * vec2(1.0, 0.5)), 2.0) - 0.5;\n    vec2 gMove = trunc(hash * 0.125 + vec2(0.0, 0.5)) * g2;\n    vec3 grad = vec3(g2, 0.0) + vec3(-1.0, 1.0, 0.0) * gMove.x + vec3(0.0, -1.0, 1.0) * gMove.y;\n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec4 openSimplex2_UnrotatedBase(vec3 X) {\n    \n    // First half-lattice, closest edge\n    vec3 v1 = round(X);\n    vec3 d1 = X - v1;\n    vec3 score1 = abs(d1);\n    vec3 dir1 = step(max(score1.yzx, score1.zxy), score1);\n    vec3 v2 = v1 + dir1 * sign(d1);\n    vec3 d2 = X - v2;\n    \n    // Second half-lattice, closest edge\n    vec3 X2 = X + 144.5;\n    vec3 v3 = round(X2);\n    vec3 d3 = X2 - v3;\n    vec3 score2 = abs(d3);\n    vec3 dir2 = step(max(score2.yzx, score2.zxy), score2);\n    vec3 v4 = v3 + dir2 * sign(d3);\n    vec3 d4 = X2 - v4;\n    \n    // Gradient hashes for the four points, two from each half-lattice\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0));\n    \n    hashes = mod(hashes, 289.0);\n    vec4 whashes = mod(hashes / 12.0, 12.0);\n    hashes = mod(hashes, 12.0);\n    \n    // Gradient extrapolations & kernel function\n    vec4 a = max(0.6 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n    \n    vec3 og1 = grad(whashes.x); vec3 og2 = grad(whashes.y);\n    vec3 og3 = grad(whashes.z); vec3 og4 = grad(whashes.w);\n    \n    vec4 extrapolationsX = extrapolations * vec4(og1.x, og2.x, og3.x, og4.x);\n    vec4 extrapolationsY = extrapolations * vec4(og1.y, og2.y, og3.y, og4.y);\n    vec4 extrapolationsZ = extrapolations * vec4(og1.z, og2.z, og3.z, og4.z);\n    \n    // Return it all as a vec4\n    return vec4(dot(aaaa, extrapolationsX), dot(aaaa, extrapolationsY), dot(aaaa, extrapolationsZ), dot(aaaa, extrapolations))*vec4(32.69428253173828125*2.);\n}\n\n// Use this if X and Y are horizontal, and Z is vertical or time (or unused).\nvec4 openSimplex2_ImproveXYPlanes(vec3 X) {\n    \n    // Rotate so Z points down the main diagonal. Not a skew transform.\n    mat3 orthonormalMap = mat3(\n         0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187,  0.788675134594813, -0.577350269189626,\n         0.577350269189626,  0.577350269189626,  0.577350269189626);\n    \n    vec4 result = openSimplex2_UnrotatedBase(orthonormalMap * X);\n    return vec4(result.xyz * orthonormalMap, result.w);\n}\n\n// Use this if X and Z are horizontal, and Y is vertical or time (or unused).\nvec4 openSimplex2_ImproveXZPlanes(vec3 X) {\n    \n    // Rotate so Z points down the main diagonal. Not a skew transform.\n    mat3 orthonormalMap = mat3(\n         0.788675134594813, -0.577350269189626, -0.211324865405187,\n         0.577350269189626 , 0.577350269189626,  0.577350269189626,\n        -0.211324865405187, -0.577350269189626,  0.788675134594813);\n    \n    vec4 result = openSimplex2_UnrotatedBase(orthonormalMap * X);\n    return vec4(result.xyz * orthonormalMap, result.w);\n}\n\n// Use this if neither of the above make sense.\nvec4 openSimplex2_Classical(vec3 X) {\n    \n    // Rotate around the main diagonal. Not a skew transform.\n    vec4 result = openSimplex2_UnrotatedBase(dot(X, vec3(2.0/3.0)) - X);\n    return vec4(dot(result.xyz, vec3(2.0/3.0)) - result.xyz, result.w);\n}\n\n//////////////////////////////// End noise code ////////////////////////////////",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}