{
    "Shader": {
        "info": {
            "date": "1490089764",
            "description": "based on https://www.shadertoy.com/view/lt23W1 ",
            "flags": 36,
            "hasliked": 0,
            "id": "XsXyDf",
            "likes": 5,
            "name": "Mic Analyser 4",
            "published": 3,
            "tags": [
                "microphone"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat dx = 1./iResolution.x;\n    float fmax = iSampleRate/4.;\n   \n    float c=0.;\n    float r=0.;\n    float g=0.;\n    float b=0.;\n\n    \n    \nfor(int once=0; once<1; once++) { // because early returns cause issues on some compilers\n        \n    // used for the four diff kinds of analytics\n    vec3 first, second, third, fourth;\n    \n    \n    //  FIRST WINDOW\n   // if (uv.y>.9) {  // 1st sub-window: notes\n        // bars\n       // if ((uv.x<4.*dx)||(1.-uv.x<4.*dx))\n        //    { fragColor = vec4(1.,.7,0.,0.);break;\t}\n     //   if ((abs(uv.x-2./12.)<dx)||(abs(uv.x-3./12.)<dx)||(abs(uv.x-5./12.)<dx)||(abs(uv.x-7./12.)<dx)||(abs(uv.x-8./12.)<dx)||(abs(uv.x-10./12.)<dx))\n          // { fragColor = vec4(.4,.4,1.,0.); break;\t}\n \t//\tif (mod(uv.x,1./12.)<dx) \n        //    { fragColor = vec4(0.,0.,.7,0.); break;\t}\n\n        // data\n        float f = 440.*pow(2.,uv.x); // still, avoid < 440Hz since not enough resolution\n        for (float i=1.; i<=5.; i++) { \n        \tif (f>=440.) c =  max(c,texture(iChannel0,vec2(f/fmax,.5/2.)).r);\n            f *= 2.;\n        }\n        c = (c-.3)*1.5 ; \n        //fragColor=vec4(1.5*c,c,.7*c,1); break;\n    \tfirst = vec3(1.5*c,c,.7*c);\n  //  }\n\n        //  SECOND WINDOW\n\n //   else if (uv.y>.6) {  // 2nd sub-window: narrow spectrum\n        uv.y = (uv.y-.6)/.3;\n        uv.x /= 5.;\n         f = uv.x*fmax;\n        // bars\n     //   if (abs(f-440.)< fmax/(5.*iResolution.x))\n      //      { fragColor = vec4(1.,.7,0.,0.); break;\t}\n \t  //\tif (mod(log(f/440.)/log(2.),1.)< .5/(iResolution.x*uv.x))\n      //      { fragColor = vec4(.7,0.,0.,0.); break;\t}\n \t  //\tif (mod(f,440.)< fmax/(5.*iResolution.x))\n     //       { fragColor = vec4(0.,.7,0.,0.); break;\t}\n\n        // data\n        c =  texture(iChannel0,vec2(uv.x,.5/2.)).r;\n        r =  texture(iChannel0,vec2(uv.x,.6/2.)).r;\n        g =  texture(iChannel0,vec2(uv.x,.7/2.)).r;\n        b =  texture(iChannel0,vec2(uv.x,.8/2.)).r;\n\n        // c = (uv.y<c) ? 1. : 0.;\n    \tsecond = vec3(r, g, b);\n //   }\n\n    \n        //  THIRD WINDOW\n\n //   else if (uv.y>.3) {  // 3rd sub-window: large spectrum\n        uv.y = (uv.y-.3)/.3; \n         f = uv.x*fmax;\n        // bars\n   //     if (abs(f-440.)< fmax/iResolution.x)\n    //        { fragColor = vec4(1.,.7,0.,0.); break;\t}\n  \t//  \tif (mod(log(f/440.)/log(2.),1.)< 2./(iResolution.x*uv.x))\n    //        { fragColor = vec4(.7,0.,0.,0.); break;\t}\n\t//  \tif (mod(f,440.)< fmax/iResolution.x)\n   //         { fragColor = vec4(0.,.7,0.,0.); break; }\n\n\t\t//data\n        c =  texture(iChannel0,vec2(uv.x,.5/2. )).r;\n        r =  texture(iChannel0,vec2(uv.x,.5/1. )).r;\n        g =  texture(iChannel0,vec2(uv.x,.5/2.5)).r;\n        b =  texture(iChannel0,vec2(uv.x,.5/4. )).r;\n\n        \n       //  c = (uv.y<c) ? 1. : 0.;\n    \tthird = vec3(r, g, b);\n    //  }\n\n    \n        //  FOURTH WINDOW\n\n  //  else { // 4th sub-window: signal\n        uv.y = (uv.y-0.)/.3;\n#if 1 // synchro: start signal on a min value\n        float m=999., xm;\n        for (float x=0.5; x< 100.; x+=1.) {\n            c =  texture(iChannel0,vec2(x/512.,1.5/2.)).r;\n            if (c<m) { m=c; xm=x; }\n        }\n         uv.x += xm/512.;\n#endif\n        c =  texture(iChannel0,vec2(uv.x,10.95/2.)).r;\n        r =  texture(iChannel0,vec2(uv.x,2.95 * texture(iChannel0,uv.xy))).r;\n        g =  texture(iChannel0,vec2(uv.x,3.95 * texture(iChannel0,uv.xy))).r;\n        b =  texture(iChannel0,vec2(uv.x,4.95 * texture(iChannel0,uv.xy))).r;\n\n\n        c = (uv.y<c) ? 1. : 0.;\n        r = (uv.y<r) ? 1. : 0.;\n        g = (uv.y<g) ? 1. : 0.;\n        b = (uv.y<b) ? 1. : 0.;\n\n \t\tfourth = vec3(r, g, b);\n\n        \n   // }\n //END OF WINDOWING?   \n     //   r = (uv.y<r) ? 1. : 0.;\n     //   g = (uv.x<g) ? 1. : 0.1;\n     //   b = (uv.x + uv.y <b) ? 0.9 : 0.1;\n    \n    \n        // fragColor = vec4(r, g, b, 1);\n\n    \n    //accumulate image\n//  vec4 new = vec4(r, g, b, 1.0);\n    vec4 new;\n    new = vec4(first.r - second.r - third.r + fourth.r, third.g, second.b, 1.0);\n//    new = vec4(second.r, second.g, second.b, 1.0);\n    //new = vec4(third.r, third.g, third.b, 1.0);\n    //new = vec4(fourth.r, fourth.g, fourth.b, 1.0);\n   // vec4 new = vec4(second, 1.0);\n    \n    //vec4 old = texture(iChannel0, fragCoord*1.28 / iResolution.xy*1.01) ;\n    vec4 old = texture(iChannel0,  fragCoord*1.1 / iResolution.xy*1.1 * vec2(uv.y,0.1/0.1)) ;\n\n    fragColor = new + (old *0.9) ;\n\n\n     // fragColor = vec4(c, c, 0, 1);\n     //fragColor = vec4(c);\n    \n}}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}