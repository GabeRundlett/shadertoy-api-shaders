{
    "Shader": {
        "info": {
            "date": "1650207466",
            "description": "TP 3 + 4 + 5\nTexturing & Animation & Terrain",
            "flags": 0,
            "hasliked": 0,
            "id": "sl2yRt",
            "likes": 1,
            "name": "TP4 - Source thermale montagne",
            "published": 3,
            "tags": [
                "sun",
                "moon",
                "texturing",
                "snow",
                "mount",
                "sunsetthermalsource"
            ],
            "usePreview": 0,
            "username": "Nordine",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "// Texturing\n// Eric Galin\n\nconst int Steps = 600;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\nconst float k = 8.0;\n\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Terrain -----------------------------------------------------------------------------------------------\n\nfloat Terrasement(vec2 p, vec2 c, float h,float ri, float re)\n\n{\n    float d = length(p-c);\n    float m;\n    if(d<ri)\n    {\n        m=0.0;\n    }\n    else if(d>re)\n    {\n        m=1.0;\n    }\n    else\n    {\n        m = smoothstep(ri,re,d);\n    }\n    return mix(5.0f,h,m);\n}\n\nfloat plateau(float h, float e, float a)\n{\n    if(h<a)\n    {\n        return h;\n    }\n    if(h>e+a)\n    {\n        return h;\n    }\n    else\n    {\n        float u= (h-e)/((e+a)-e);\n        h = e+a*u;\n        return h;\n    }\n\n}\n\nfloat Ridge(float n)\n{\n    return 1.0-2.0*abs(n);\n\n}\n\nfloat fbm(vec2 p, float l, int o, float a)\n{\n    float t=0.0;\n    for(int i=0;i<o;i=i+1)\n    {\n        t += a * Noise(p/l);\n        a*=0.5;\n        l*=0.5;\n    }\n    return 50.0+Ridge(t);\n\n    \n}\n\n\n\nfloat hetefdmbridge(vec2 p , float l, float a, int r, float amin, float amax)\n{\n    float t = a * Ridge(10.0);\n    for(int i = 1; i<10; i = i+1)\n    {\n        a*= 0.5;\n        l*=0.5;\n        float att = smoothstep(amin,amax,t);\n        t+= att*a*Ridge(10.0);\n    }\n    return t;\n}\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p )\n{\n    float h = fbm(p,100.0,4,150.0);\n    return Terrasement(p.xy,vec2(0.0,0.0), h,100.0,260.0);\n\n} \n\n\nV Difference(V a,V b)\n{\n    if (a.v>-b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(-b.v,b.i);\n    }\n}\n\n\n// Implicit surface defining the terrain\n// p : Point\n\nV ImplicitTerrain(in vec3 p)\n{\n    float z = Terrain( p.xy );\n    float h = p.z - z; \n    V ret;\n    ret.v = h;\n    if(z>-90.0)\n    {\n        ret.i = 2;\n    }\n    else\n    {\n        ret.i = 1;\n    }\n    return ret;\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u;\n  u = Union(\n      Union(\n      Difference(\n      ImplicitTerrain(p),\n      Sphere(p,vec3(0.0,0.0,0.0),90.0,0)),\n      Sphere(p,vec3(0.0,1000.0,(cos(iTime)*400.0-250.0)),65.0,3)),\n      Sphere(p,vec3(0.0,-1000.0,(-cos(iTime)*400.0-250.0)),65.0,4));\n\n  return u;\n}\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/k);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  if(cos(iTime)<-0.5)\n  {\n       d.z *= cos(iTime)*-2.0-1.0;\n      return mix(vec3(0.22,d.z*100.0*0.3,0.4),vec3(0.0,0.0,d.z*0.4), d.z*0.5+0.5);\n  } \n  d.z = cos(iTime)*(d.z*-4.0 +1.3);\n  return vec3(d.z*1.0,d.z*0.607,d.z*0.4);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(0.0, 0.0, 3000.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nT Texture0(in vec3 p)\n{\n  return T( mix(vec3(0.52,0.75,0.91),vec3(0.0,1.0,1.0),Fbm(p/50.0)),0.0);\n  \n}\n\nT Texture1(in vec3 p)\n{\n   return T( mix(vec3(1.0,1.0,1.0),vec3(0.0,0.0,0.0),Fbm(p/50.0)),0.0);\n}\n\nT Texture2(in vec3 p)\n{\n  return T(vec3(1.0,1.0,1.0),0.0);\n}\n\nT Texture3(in vec3 p)\n{\n    vec3 f = vec3(1.0,1.0,0.094);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = f + (Noise(p)*c/2.0);\n    return T(d,0.0);       \n}\n\nT Texture4(in vec3 p)\n{\n    vec3 f = mix(vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),Fbm(p/50.0));\n    vec3 c = vec3(0.5,0.5,0.5);\n    vec3 d = f + (Noise(p)*c/2.0);\n    return T(d,0.0);            \n}\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Texture0(p);\n    }\n    else if (vp.i==1)\n    {\n        return Texture1(p);\n    }\n    else if (vp.i==2)\n    {\n        return Texture2(p);\n    }\n    else if (vp.i==3)\n    {\n        return Texture3(p);\n    }\n    else if (vp.i==4)\n    {\n        return Texture4(p);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,0.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(500.0, 500.0, 500.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 2000.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\n\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(1000.0,0.0,200.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}