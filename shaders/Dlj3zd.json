{
    "Shader": {
        "info": {
            "date": "1673771166",
            "description": "old movie camera",
            "flags": 0,
            "hasliked": 0,
            "id": "Dlj3zd",
            "likes": 24,
            "name": "old movie camera",
            "published": 3,
            "tags": [
                "graphicdesign",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2145
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define SPEED 200.\n#define ZERO (min(iFrame,0))\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinderX( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinderY( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinderZ( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\n// tweaked as the center aligned horizontal capsule. \nfloat sdHorizontalCapsule( vec3 p, float w, float r )\n{\n      p.x-= clamp( p.x, -w*0.5, w*0.5 );\n      return length( p ) - r;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.yz), p.x );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat largeLensParts(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(0.13,0.13,0.13));\n    float a = radians(-70.);\n    p.y = abs(p.y)-0.1;\n    d = max(-dot(p,vec3(cos(a),sin(a),0.0)),d);\n    p = prevP;\n    p.z = abs(p.z)-0.1;\n    d = max(-dot(p,vec3(cos(a),0.0,sin(a))),d);\n    p = prevP;\n    d = max(p.x-0.05,d);\n    return d;\n}\n\nfloat largeLens(vec3 p){\n    vec3 prevP = p;\n    float d = largeLensParts(p);\n    p*=1.1;\n    float d2 = largeLensParts(p-vec3(0.01,0.0,0.0));\n    d = max(-d2,d);\n    p = prevP;\n    d2 = sdCappedCylinderX(p-vec3(-0.1,0.0,0.0),0.035,0.01)-0.02;\n    d = min(d,d2);\n    return d;\n}\n\nfloat mainLens(vec3 p){\n    vec3 prevP = p;\n    float d = sdCappedCylinderX(p,0.08,0.02)-0.02;\n    float d2 =  sdCappedCylinderX(p-vec3(0.06,0.0,0.05),0.04,0.055);\n    d = min(d,d2);\n    d2 =  sdCappedCylinderX(p-vec3(0.02,0.04,-0.03),0.03,0.05);\n    float mask = sdCappedCylinderX(p-vec3(0.07,0.04,-0.03),0.025,0.01);\n    d2 = max(-mask,d2);\n    d = min(d,d2);\n    d2 =  sdCappedCylinderX(p-vec3(0.03,-0.04,-0.03),0.032,0.05);\n    mask = sdCappedCylinderX(p-vec3(0.08,-0.04,-0.03),0.027,0.01);\n    d2 = max(-mask,d2);\n    d = min(d,d2);\n    d2 = sdCappedCylinderX(p-vec3(0.105,0.0,0.05),0.06,0.01);\n    d = min(d,d2);\n    d2 = largeLens(p-vec3(0.25,0.0,0.05));\n    d = min(d,d2);\n    return d;\n}\n\nfloat viewFinder(vec3 p){\n     vec3 prevP = p;\n     float d = sdBox(p,vec3(0.035));\n     float d2 = sdCappedCylinderX(p-vec3(-0.03,0.0,0.0),0.025,0.1);\n     d = min(d,d2);\n     d2 = sdCappedCone(p-vec3(-0.15,0.0,0.0),0.03,0.05,0.03);\n     float mask = sdCappedCone(p-vec3(-0.17,0.0,0.0),0.03,0.04,0.02);\n     d2 = max(-mask,d2);\n     d = min(d,d2);\n     return d;\n}\n\nfloat reelParts(vec3 p){\n    p.xy*=Rot(radians(iTime*30.));\n    vec3 prevP = p;\n    p.z = abs(p.z)-0.04;\n    float d = sdCappedCylinderZ(p,0.17,0.01);\n    \n    p.xy = DF(p.xy,1.25);\n    p.xy -= vec2(0.075);\n    float mask = sdCappedCylinderZ(p,0.05,0.1);\n    d = max(-mask,d);\n    \n    p = prevP;\n    float d2 = sdCappedCylinderZ(p,0.1,0.015)-0.01;\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat reel(vec3 p){\n    vec3 prevP = p;\n    \n    p.x = abs(p.x);\n    float d = reelParts((p-vec3(0.17,0.0,0.0))* vec3(sign(prevP.x),1,1));\n    \n    p = prevP;\n    p.z = abs(p.z)-0.07;\n    float d2 = sdBox(p-vec3(0.0,-0.15,0.0),vec3(0.15,0.06,0.02));\n    p = prevP;\n    float a = radians(30.);\n    p.x = abs(p.x)-0.1;\n    p.y+=0.1;\n    d2 = max(dot(p,vec3(cos(a),sin(a),0.)),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat body(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(0.185,0.15,0.1))-0.015;\n    p.z = abs(p.z)-0.08;\n    p.x = abs(p.x);\n    p.y = abs(p.y);\n    float d2 = length(p-vec3(0.197,0.13,0.))-0.013;\n    d = min(d,d2);\n    p = prevP;\n    d2 = reel(p-vec3(0.0,0.34,0.0));\n    d = min(d,d2);\n    \n    p.x+=0.05;\n    p.x = abs(p.x)-0.05;\n    d2 = sdCappedCylinderZ(p,0.03,0.13)-0.01;\n    d = min(d,d2);\n    p = prevP;\n    \n    p.x-=0.11;\n    p.y = abs(p.y)-0.05;\n    d2 = sdCappedCylinderZ(p,0.015,0.13)-0.01;\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat triPods(vec3 p){\n    vec3 prevP = p;\n    float d = sdCappedCylinderY(p,0.05,0.015)-0.01;\n    \n    p.x = abs(p.x)-0.02;\n    p.xy*=Rot(radians(-30.));\n    float d2 = sdCappedCylinderY(p-vec3(0.,-0.12,0.),0.005,0.1)-0.01;\n    d = min(d,d2);\n    p = prevP;\n    p.z = abs(p.z)-0.02;\n    p.zy*=Rot(radians(-30.));\n    d2 = sdCappedCylinderY(p-vec3(0.,-0.12,0.),0.005,0.1)-0.01;\n    d = min(d,d2);\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    p.y+=0.05;\n    float d = body(p);\n    float d2 = mainLens(p-vec3(0.24,0.05,0.0));\n    d = min(d,d2);\n    d2 = viewFinder(p-vec3(-0.23,0.0,0.0));\n    d = min(d,d2);\n    d2 = triPods(p-vec3(0.0,-0.17,0.0));\n    d = min(d,d2);\n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*occ;\n    diffCol += col*vec3(1.0,1.0,0.95)*skyDiff*occ;\n    diffCol += col*vec3(0.95)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.));\n    return col;\n}\n\nfloat bgItem(vec2 p){\n    p*=Rot(radians(90.));\n    p.y = abs(p.y)-0.05;\n    float d = abs(Tri(p,vec2(0.05),radians(30.)))-0.0001;\n    return d;\n}\n\nfloat bg(vec2 p){\n    vec2 prevP = p;\n    p-=iTime*0.05;\n    p*=0.8;\n    p.x = mod(p.x,0.095)-0.0475;\n    p.y = mod(p.y,0.055)-0.0275;\n    float d = bgItem(p);\n    return d;\n}\n\nfloat filmItem(vec2 p, float dir){\n    vec2 prevP = p;\n    float d = B(p,vec2(2.,0.07));\n    \n    p.x+=iTime*0.1*dir;\n    p.x = mod(p.x,0.16)-0.08;\n    float d2 = B(p,vec2(0.075,0.035));\n    d = max(-d2,d);\n    p = prevP;\n    p.x+=iTime*0.1*dir;\n    p.y = abs(p.y)-0.0525;\n    p.x = mod(p.x,0.03)-0.015;\n    d2 =  B(p,vec2(0.012));\n    d = max(-d2,d);\n    return d;\n}\n\nfloat icon0(vec2 p){\n    p*=Rot(radians(30.*iTime));\n    vec2 prevP = p;\n    float thickness = 0.002;\n    float d = abs(length(p)-0.06)-thickness;\n    p.x-=0.033;\n    p*=Rot(radians(90.));\n    float d2 = abs(Tri(p,vec2(0.05),radians(30.)))-thickness;\n    d = min(d,d2);\n    return d;\n}\n\nfloat icon1(vec2 p){\n    p*=Rot(radians(-22.*iTime));\n    vec2 prevP = p;\n    p.x*=3.;\n    float d = abs(length(p)-0.06)-0.003;\n    p = prevP;\n    p.y*=3.;\n    float d2 = abs(length(p)-0.06)-0.003;\n    d = min(d,d2);\n    p = prevP;\n    p*= Rot(radians(45.));\n    p.x*=3.;\n    d2 = abs(length(p)-0.06)-0.003;\n    d = min(d,d2);\n    p = prevP;\n    p*= Rot(radians(-45.));\n    p.x*=3.;\n    d2 = abs(length(p)-0.06)-0.003;\n    d = min(d,d2);\n    return d;\n}\n\nfloat icon2(vec2 p){\n    p*=Rot(radians(25.*iTime));\n    vec2 prevP = p;\n    p = DF(p,2.);\n    p -= vec2(0.045);\n    float d = Tri(p,vec2(0.06),radians(45.));\n    return d;\n}\n\nfloat icon3(vec2 p){\n    p*=Rot(radians(-15.*iTime));\n    vec2 prevP = p;\n    p = DF(p.xy,2.);\n    p -= vec2(0.045);\n    float d = Tri(p,vec2(0.06),radians(30.));\n    p = prevP;\n    d = min(abs(length(p)-0.015)-0.002,d);\n    return d;\n}\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat items(vec2 p){\n    vec2 prevP = p;\n    p*=6.;\n    p-=iTime*0.2;\n    vec2 id = floor(p);\n    vec2 grd = fract(p)-0.5;\n    grd*=0.15;\n    float n = random(id);\n    float d = 10.;\n    if(n<0.1){\n        d = icon0(grd);\n    } else if(n>=0.1 && n<0.2){\n        d = icon1(grd);\n    } else if(n>=0.2 && n<0.3){\n        d = icon2(grd);\n    } else if(n>=0.3&& n<0.4){\n        d = icon3(grd);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(-5.0));\n        ro.xz *= Rot(radians(sin(iTime*0.3)*60.0));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(0.);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        col = mix(col,vec3(0.2),S(bg(uv),0.0));\n        col = mix(col,vec3(0.4),S(items(uv),0.0));\n    }\n    \n    \n    uv.y = abs(uv.y);\n    \n    float dd = filmItem(uv-vec2(0.0,0.43),sign(prevUV.y));\n    col = mix(col,vec3(0.9),S(dd,0.0));\n    \n    /*\n    uv = prevUV;\n    dd = icon4(uv-vec2(0.6,0.0));\n    col = mix(col,vec3(0.9),S(dd,0.0));\n    */\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}