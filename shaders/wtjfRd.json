{
    "Shader": {
        "info": {
            "date": "1599659591",
            "description": "Bored cirduit - Result of improvised live code session on Twitch\nLIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time:\nhttps://www.twitch.tv/evvvvil_",
            "flags": 0,
            "hasliked": 0,
            "id": "wtjfRd",
            "likes": 28,
            "name": "[TWITCH] Bored circuit",
            "published": 3,
            "tags": [
                "fractal",
                "lines",
                "demoscene",
                "landscape",
                "specular",
                "glow",
                "pattern",
                "scifi",
                "lazer",
                "circuit",
                "battery",
                "network",
                "gloss",
                "board",
                "industrial"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 995
        },
        "renderpass": [
            {
                "code": "// Bored circuit - Result of an improvised live coding session on Twitch\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time: \n// https://www.twitch.tv/evvvvil_\n\nvec2 z,v,e=vec2(.00035,-.00035);float t,b,tt,g;vec3 op,po,no,al,ld,cutP;\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\nfloat bo(vec3 p,vec3 r){p=abs(p)-r;return max(max(p.x,p.y),p.z);}\nvec2 fb( vec3 p)\n{   \n    cutP=op=p;\n    cutP.xy*=r2(.785);\n    vec2 h,t=vec2(length(p.xz)-3.,5); //BLUE CUT PIECE\n    t.x=abs(t.x)-.4;\n    t.x=max(t.x,-(max(-p.x,abs(abs(abs(cutP.y)-2.)-1.)-.5)));\n    t.x=max(t.x,abs(cutP.y)-5.);\n    h=vec2(length(p.xz)-3.,6); //WHITE CUT PIECE\n    h.x=abs(h.x)-.15;\n    h.x=max(h.x,-(max(-p.x,abs(abs(abs(cutP.y)-2.)-1.)-.3)));\n    h.x=max(h.x,abs(cutP.y)-5.5);\n    float cutter=(abs(abs(cutP.y-8.)-10.)-3.);  \n    h.x=min(h.x,max(length(p.xz)-.6,-cutter));//WHITE CYLINDER  \n    float lazer=max(length(p.xz)-0.1,cutter+0.1);//LAZER\n    g+=0.2/(0.1+lazer*lazer*5.);\n    h.x=min(h.x,lazer);\n    t=t.x<h.x?t:h;\n    h=vec2(length(p.xz)-2.2,3);//BLACK CYLINDER CUT PIECE\n    h.x=abs(h.x)-.4;\n    h.x=max(h.x,abs(abs(cutP.y)-5.)-1.);\n    t=t.x<h.x?t:h;\n    return t;  \n}\nvec2 mp( vec3 p)\n{\n    op=p;\n    vec4 np=vec4(p,1);\n    vec2 h,t=vec2(1000);\n    np.z-=30.;\n    np.z=abs(abs(np.z)-20.)-10.;  \n    vec4 bp=np.xzyw; \n    for(int i=0;i<4;i++){\n        np.xyz=abs(np.xyz)-vec3(25.,clamp(5.5-ceil(-p.z*.05-.5)*4.,5.,15.),0);\n        bp.xyz=abs(bp.xyz)-vec3(20.,clamp(10.-ceil(-p.z*.05)*4.,10.,20.),0);\n        np.xy*=r2(.785);\n        bp.xy*=r2(.785);\n        h=fb(np.xyz); //DRAW VERTICAL FRACTAL\n        h.x/=np.w*1.5;\n        t=t.x<h.x?t:h;\n        h=fb(bp.xyz); //DRAW HORIZONTAL FRACTAL\n        h.x/=bp.w*1.5;\n        t=t.x<h.x?t:h;\n        h=vec2(bo(bp.xyz-vec3(12,0,0),vec3(1,100,1.+cos(p.z*.1)*2.)),3.);//DRAW BLACK BOXES\n        h.x/=bp.w;\n        t=t.x<h.x?t:h;\n        np*=2.;\n        bp*=2.;\n    }\n    p.z=mod(p.z-10.,20.)-10.; //WHITE SPHERES\n    h=vec2(length(p)-1.5,6.);  \n    t=t.x<h.x?t:h;  \n    h=vec2(max(p.y,abs(p.x)-65.),7.);  //TERRAIN\n    t=t.x<h.x?t:h;\n    return t;  \n}\nvec2 tr( vec3 ro, vec3 rd )\n{\n    vec2 h,t=vec2(.1);\n    for(int i=0;i<128;i++){\n        h=mp(ro+rd*t.x);\n        if(h.x<.0001||t.x>100.) break;\n        t.x+=h.x;t.y=h.y;\n    }\n    if(t.x>100.) t.y=0.;\n    return t;  \n}\n#define a(d) clamp(mp(po+no*d).x/d,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d).x/d)\nfloat pattern(vec2 uv){return ceil(abs(sin(uv.y*5.))-.7-.5*sin(op.y*.1+tt))+ceil(abs(sin(uv.x*1.5))-.75);}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n    tt=mod(iTime,56.52);\n    b=ceil(sin(tt*.5));\n    vec3 ro=mix(vec3(1),vec3(-2,3,1),b)*vec3(sin(tt*.5-.75)*6.,7.5,30.+sin(tt*.15)*70.),\n        cw=normalize(vec3(0,0,20.+sin(tt*.5)*20.)-ro),cu=normalize(cross(cw,vec3(0,1,0))),cv=normalize(cross(cu,cw)),\n        rd=mat3(cu,cv,cw)*normalize(vec3(uv,.75)),co,fo;\n    co=fo=vec3(.2,.12,.12)-length(uv)*.1-rd.y*.3;\n    ld=normalize(vec3(0.,.5,sin(tt*.15)*.5));  \n    z=tr(ro,rd); t=z.x;\n    if(z.y>0.){\n        po=ro+rd*t;\n        no=normalize(e.xyy*mp(po+e.xyy).x+ e.yyx*mp(po+e.yyx).x+e.yxy*mp(po+e.yxy).x+e.xxx*mp(po+e.xxx).x);\n        float lines=1.; vec2 linesUV=op.xy*.1;\n        for(int i=0;i<3;i++){      \n            linesUV=abs(linesUV)-.15;\n            lines=min(lines,pattern(linesUV));\n            linesUV*=3.;\n        }        \n        al=mix(vec3(0),vec3(.05,.15,.35),lines);  \n        float spo=exp2(7.-lines*5.);\n        if(z.y<5.)al=vec3(0.);  \n        if(z.y>5.)al=vec3(.8,.7,.8);  \n        if(z.y>6.)al=vec3(0.1,.05,.05)+lines*.025,spo=exp2(10.-lines*5.);\n        float dif=max(0.,dot(no,ld)),\n            fr=pow(1.+dot(no,rd),4.),\n            sp=pow(max(dot(reflect(-ld,no),-rd),0.),spo);\n        co=mix(sp+al*(a(.05)*a(.1)+.2)*(dif*vec3(.7,.6,.4)+s(4.)),fo,min(fr,.5));\n        co=mix(fo,co,exp(-.000005*t*t*t));\n    }\n    co=smoothstep(0.,1.,co);\n    fragColor = vec4(pow(co+g*.4*vec3(.1,.2,.5),vec3(.45)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}