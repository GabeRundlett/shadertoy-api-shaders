{
    "Shader": {
        "info": {
            "date": "1719879909",
            "description": "Some snow fall effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "XXGXzh",
            "likes": 7,
            "name": "falling snowflakes",
            "published": 3,
            "tags": [
                "snow",
                "fall",
                "snowflakes"
            ],
            "usePreview": 0,
            "username": "clicker",
            "viewed": 112
        },
        "renderpass": [
            {
                "code": "float N21(vec2 p) {\n\tvec3 a = fract(vec3(p.xyx) * vec3(213.897, 653.453, 253.098));\n    a += dot(a, a.yzx + 79.76);\n    return fract((a.x + a.y) * a.z);\n}\n\nmat2 Rot(float a) {\n\tfloat s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Snowflake(vec2 uv, vec2 gindex, float w)\n{\n    if (mod(gindex.x + gindex.y, 2.0) == 0.0)\n      return 0.0;\n\n    uv *= Rot(iTime * N21(gindex));\n    \n    float rand = N21(gindex);\n    \n    float slope = 1.0 / (0.75 + sin(iTime * rand) * 0.25);\n    \n    uv.y *= slope;\n    \n    float pi = radians(180.0);\n    float angleDx = pi / 6.0;\n    float angle, d;\n\n    vec2 n;\n\n    uv.x = abs(uv.x);\n\n    for (int i = 0; i < 3; ++i)\n    {    \n        n = vec2(sin(angle), cos(angle));\n        d = dot(uv, n);\n        uv -= n * min(0.0, d) * 2.0;\n        angle -= angleDx;\n    }\n\n    float x1 = (uv.x + uv.y * 0.579) * 30.0;\n    float x2 = (uv.x - uv.y * 0.579) * 30.0;\n    float x3 = uv.y * 30.0;\n    \n    float ss1 = smoothstep(w, -w, fract(x1) - 0.6 * rand);\n    float ss2 = smoothstep(w, -w, fract(x2) - 0.6 * rand);\n    float ss3 = smoothstep(-w, w, fract(x3) - 0.6 * rand);\n    \n    float index1 = floor(x1);\n    float index2 = floor(x2);\n    float index3 = floor(x3);\n    \n    float ss = 0.0;\n\n    float size = floor(clamp(rand * 10.0, 1.0, 10.0));\n\n    if (index1 <= size && index3 <= size)\n    {   \n        ss += ss1 * smoothstep(0.1, 0.1 - w, (uv.y + uv.x * 0.579) - fract(index1 * N21(gindex)) * uv.x * 4.0 * rand) * rand;\n        ss += ss2 * smoothstep(0.1, 0.1 - w, (uv.y + uv.x * 0.579) - fract(index2 * N21(gindex)) * uv.y * 1.0) * rand;\n        ss += ss3 * smoothstep(0.1, 0.1 - w, fract(index3 * N21(gindex))) * rand;\n        \n        ss += smoothstep(w, -w, clamp(1.0, 0.0, abs(d) - 0.01 * rand));\n    }\n    \n    return ss * (1.0 / slope);\n}\n\nvec3 SnowflakesLayer(vec2 uv, float scale, float fallFactor,  float w)\n{\n    uv *= scale;\n\n    uv.x += iTime * 0.2 * fallFactor;\n    uv.y += iTime * 0.4 * fallFactor;\n    \n    vec2 gindex = floor(uv);\n    \n    uv = fract(uv) - 0.5;\n\n    vec3 col = vec3(0.0);\n    \n    for(int y=-1;y<=1;y++) {\n    \tfor(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            \n            vec2 inuv = uv;\n            \n            float rand = N21(gindex + offs);\n    \n            vec2 posOffset = vec2(rand , fract(rand * 34.32)) - vec2(0.5);\n    \n            inuv += posOffset - offs;\n\n            float snowflake = Snowflake(inuv, gindex + offs, w);\n\n            col += vec3(snowflake);\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    float w = fwidth(uv.y);\n    \n    vec3 bg = vec3(.2, .3, .4)*(uv.y+.5)*2.5;\n    bg += vec3(.9, .9, .9)*(-uv.y+.5);\n    \n    uv += mouse;\n    \n    vec3 col = SnowflakesLayer(uv, 5.0, 1.0, w);\n    \n    col += SnowflakesLayer(uv, 4.0, 0.5, w);\n    \n    col = mix(bg, col, 0.2);\n\n    fragColor = vec4(col, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}