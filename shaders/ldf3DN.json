{
    "Shader": {
        "info": {
            "date": "1370423769",
            "description": "Some orbit trap coloring in the Maldebrot set. There are two traps. First one (col1, in blue) is \"average trap distance to line\". The second one (col2, in yellow) is \"minimum distance to point\". The distance to the set (c1, in black) is then multiplied.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldf3DN",
            "likes": 130,
            "name": "Mandelbrot - orbit traps",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "orbittrap",
                "orbit"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 29276
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2016 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// Some geometric orbit traps in the Mandelbrot set. More info:\n//\n// https://iquilezles.org/articles/ftrapsgeometric\n\n\n\n// antialiasing level (squared)\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        \n    vec2 p = (2.0*(fragCoord+vec2(float(m),float(n))/float(AA))-iResolution.xy) / iResolution.y;\n\n\tfloat zoo = 1.0/(350.0 - 250.0*sin(0.25*iTime-0.3));\n\t\n\tvec2 cc = vec2(-0.533516,0.526141) + p*zoo;\n\n\tvec2 t2c = vec2(-0.5,2.0);\n\tt2c += 0.5*vec2( cos(0.13*(iTime-10.0)), sin(0.13*(iTime-10.0)) );\n\t\t\n    // iterate\n    vec2 z  = vec2(0.0);\n    vec2 dz = vec2(0.0);\n\tfloat trap1 = 0.0;\n\tfloat trap2 = 1e20;\n\tfloat co2 = 0.0;\n    for( int i=0; i<150; i++ )\n    {\n\t\t// z' -> 2·z·z' + 1\n        dz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x ) + vec2(1.0,0.0);\n\t\t\t\n        // z -> z² + c\t\t\t\n        z = cc + vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y );\n\t\t\t\n        // trap 1\n\t\tfloat d1 = abs(dot(z-vec2(0.0,1.0),vec2(0.707)));\n\t\tfloat ff = 1.0-smoothstep(0.6,1.4,d1);\n\t\tco2 += ff;\n\t\ttrap1 += ff*d1;\n\n\t\t//trap2\n\t\ttrap2 = min( trap2, dot(z-t2c,z-t2c) );\n\n        if( dot(z,z)>1024.0 ) break;\n    }\n\n    // distance, d(c) = |z|·log|z|/|z'|\n\tfloat d = sqrt( dot(z,z)/dot(dz,dz) )*log(dot(z,z));\n\t\n\tfloat c1 = pow( clamp( 2.00*d/zoo,    0.0, 1.0 ), 0.5 );\n\tfloat c2 = pow( clamp( 1.5*trap1/co2, 0.0, 1.0 ), 2.0 );\n\tfloat c3 = pow( clamp( 0.4*trap2, 0.0, 1.0 ), 0.25 );\n\n\tvec3 col1 = 0.5 + 0.5*sin( 3.0 + 4.0*c2 + vec3(0.0,0.5,1.0) );\n\tvec3 col2 = 0.5 + 0.5*sin( 4.1 + 2.0*c3 + vec3(1.0,0.5,0.0) );\n\tcol += 2.0*sqrt(c1*col1*col2);\n    }\n\tcol /= float(AA*AA);\n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}