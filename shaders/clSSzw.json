{
    "Shader": {
        "info": {
            "date": "1675796532",
            "description": "6 rank convolution. WASD QE and mouse to move. Press R to stop movement.",
            "flags": 48,
            "hasliked": 0,
            "id": "clSSzw",
            "likes": 24,
            "name": "Star Field + 6rank convolution",
            "published": 3,
            "tags": [
                "camera"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "#define exposure 1.5\n#define sqrexposure 0.5\n#define gamma 1.3\n#define bloom 8.0\n\nvec3 expose(vec3 c)\n{\n    return 1.0 - exp(-exposure*(1.0+sqrexposure*c)*c);\n}\n\nvec3 saturate(vec3 c)\n{\n    return pow(expose(c),vec3(1.0/gamma));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 acc = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 convol = texture(iChannel1, 0.5*fragCoord/iResolution.xy);\n    \n    vec3 col = 1.0*acc.xyz/acc.w + bloom*convol.xyz;\n\n    fragColor = vec4(saturate(col), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//controller\n\n//Keyboard constants\nconst int keyLe = 37, keyUp = 38, keyRi = 39, keyDn = 40, keyA = 65, keyB = 66, keyC = 67, keyD = 68, keyE = 69, keyF = 70, keyG = 71, keyH = 72, keyI = 73, keyJ = 74, keyK = 75, keyL = 76, keyM = 77, keyN = 78, keyO = 79, keyP = 80, keyQ = 81, keyR = 82, keyS = 83, keyT = 84, keyU = 85, keyV = 86, keyW = 87, keyX = 88, keyY = 89, keyZ = 90;\n\nbool pressed(int k) \n{\n    return texelFetch(iChannel3, ivec2(k, 0), 0).x > 0.5;\n}\n\nconst float force = 32.0;\nconst float mouse_sens = 100.0;\nconst float roll_speed = 0.5;\n\nvoid mainImage( out vec4 o, in vec2 p )\n{\n    p = floor(p);\n    if(p.x > NAddr && p.y > 0.) discard;\n    \n    //get camera data\n    vec3 cp = get(CamP).xyz;\n    vec4 ca = get(CamA);\n    \n    float mode = get(CamP).w;\n    if(pressed(keyR)) mode = 1.0 - mode;\n    \n    //initialization\n    if(iFrame == 0)\n    {\n        mode = 1.0;\n        cp =  vec3(6,6,5);\n        ca = aa2q( normalize(vec3(0.0,1,0.)), -1.15);\n    }\n    vec4 oldca = ca;\n    if(p.x == PrevCamP) o = vec4(cp, 0);\n    if(p.x == PrevCamA) o = ca;\n    \n    mat3 cam = getCam(ca);\n    \n    //get velocities\n    vec3 cv = get(CamV).xyz;\n    vec4 cav = get(CamAV);\n    \n    float dt = 1./60.0;\n    //update position\n    if(pressed(keyW)) cv += force*dt*cam*vec3(0,0,1);\n    if(pressed(keyS)) cv += force*dt*cam*vec3(0,0,-1);\n    if(pressed(keyA)) cv += force*dt*cam*vec3(-1,0,0);\n    if(pressed(keyD)) cv += force*dt*cam*vec3(1,0,0);\n    \n    cp += dt*cv + 5.0*iTimeDelta*vec3(1,0,0)*mode;\n    cv += -cv*tanh(10.0*dt);\n    \n    //update camera orientation\n    vec2 dmouse = dt*mouse_sens*(iMouse.xy - get(PrevMouse).xy)/iResolution.x;\n    \n    if(length(dmouse) < 0.1)\n    {\n        //rotate around y ax\n        ca = qq2q(ca, aa2q(cam*vec3(0,1,0), -dmouse.x)); \n        //rotate around x ax\n        ca = qq2q(ca, aa2q(cam*vec3(1,0,0), dmouse.y));\n    }\n    \n    //roll camera\n    if(pressed(keyQ)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), -roll_speed*dt)); \n    if(pressed(keyE)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), roll_speed*dt)); \n    \n    if(p.x == CamP) o = vec4(cp, mode);\n    if(p.x == CamA) o = ca;\n    if(p.x == CamV) o = vec4(cv, 0.0);\n    if(p.x == CamAV) o = vec4(0.0);\n    if(p.x == PrevMouse) o = vec4(iMouse.xy, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n#define FOV 0.8\n#define MAX_STEPS 256\n#define MIN_DIST 1e-5\n#define MAX_DIST 60.0\n\n//(reused some of @ollj's code, made it more readible)\n\nfloat CAM_ANGLE = 0.003;\n\n// basic parameters\nfloat R = 2.1;\t\t\t\t\t\t\t\t// planet radius\nfloat H = 0.1;\t\t\t\t\t\t\t// density scale-height of atmosphere (not pressure scale height)\n\nvec3 light = normalize(vec3(1,0.8,-0.6));\nconst float light_bright =1.0;\nconst float light_ang = 0.1;\n\n//specific controller buffer Addresses\nconst float CamP = 0.,     //camera position \n            CamA = 1.,     //camera rotation quaternion    \n            CamV = 2.,     //camera velocity\n            CamAV = 3.,    //camera rotation velocity\n            PrevCamP = 4., //previous frame camera position\n            PrevCamA = 5., //previous frame camera rotation quaternion\n            PrevMouse = 6.,//previous mouse pos\n            NAddr = 7.;    //max address count\n            \n#define get(i) texelFetch(iChannel2,ivec2(i,0),0)\n\n\n\n//ollj quaternionRotation math\n//\n//ANY rotations in 3d are non-commutative!\n//\n//matrix rotations are just bulky, memory wasting\n//EulerRotations almost certainly fail to rotate over the SHORTEST path.\n//EulerRotations almost certainly will gimbalLock and get stuck along one axis\n//QuaternionRotations are superior here.\n//-> we only use EulerRorations for simple input devices (keyboard input)\n//-> we convert to quaternions, buffered as vec4.\n\n//quaternion Identity\nvec4 qid() \n{\n    return vec4(0, 0, 0, 1);\n}\n\n//return quaternion from axis and angle\nvec4 aa2q(vec3 axis, float ang) \n{\n    vec2 g = vec2(sin(ang), cos(ang)) * 0.5;\n    return normalize(vec4(axis * g.x, g.y));\n}\n\n//return AxisAngle of NORMALIZED quaternion input\nvec4 q2aa(vec4 q) \n{\n    return vec4(q.xyz / sqrt(1.0 - q.w * q.w), acos(q.w) * 2.);\n}\n\n//return q2, rotated by q1, order matters (is non commutative) : (aka quaternion multiplication == AxisAngleRotation)\nvec4 qq2q(vec4 q1, vec4 q2) \n{\n    return vec4(q1.xyz * q2.w + q2.xyz * q1.w + cross(q1.xyz, q2.xyz), (q1.w * q2.w) - dot(q1.xyz, q2.xyz));\n}\n\n//extension to qq2q(), scaled by sensitivity [f] (==quaternion ANGULAR equivalent to slerp() )\nvec4 qq2qLerp(vec4 a, vec4 b, float f) \n{\n    float d = dot(a, b), t = acos(abs(d)), o = (1. / sin(t));\n    return normalize(a * sin(t * (1.0 - f)) * o * sign(d) + b * sin(t * f) * o);\n}\n\n//doing qq2q() multiple times, you need to normalize() the quaternion, to fix rounding errors.\n//how often you do this is up to you.\n\n//normalize q (assuming length(q) is already close to 1, we can skip whe sqrt()\nvec4 qn(vec4 q) \n{\n    return q / dot(q,q);\n}\n\n//return quaternion, that is the shortest rotation, between looking to [a before], and looking to [b after] the rotation.\n//http://wiki.secondlife.com/wiki/LlRotBetween\nvec4 qBetween(vec3 a, vec3 b) \n{\n    float v = sqrt(dot(a,a) * dot(a,a));\n\n    if(v == 0.) return qid();\n    \n    v = dot(a, b) / v;\n    vec3 c = a.yzx * b.zxy - a.zxy * b.yzx / v;\n    float d = dot(c,c);\n    \n    if(d != 0.) \n    {\n        float s = (v > - 0.707107) ? 1. + v : d / (1. + sqrt(1. - d));\n        return vec4(c, s) / sqrt(d + s * s);\n    }\n    \n    if(v > 0.) return qid();\n    \n    float m = length(a.xy);\n    \n    return (m != 0.) ? vec4(a.y, - a.x, 0, 0) / m : vec4(1, 0, 0, 0);\n}\n\n//return inverse of quaternion\nvec4 qinv(vec4 q) \n{\n    return vec4(- q.xyz, q.w) / dot(q,q);\n}\n\n//return VECTOR p, rotated by quaterion q;\nvec3 qv2v(vec4 q, vec3 p) \n{\n    return qq2q(q, qq2q(vec4(p, .0), qinv(q))).xyz;\n}\n\n//qv2v()  with swapped inputs\n//return quaterion P (as vector), as if it is rotated by VECTOR p (as if it is a quaternion)\nvec3 vq2v(vec3 p, vec4 q) \n{\n    return qq2q(qinv(q), qq2q(vec4(p, 0.0), q)).xyz;\n}\n\nvec3 vq2v(vec4 a, vec3 b) \n{\n    return qv2v(a, b);\n}\n\n//in case of namespace confuction\nvec3 qv2v(vec3 a, vec4 b) \n{\n    return vq2v(a, b);\n}\n\n//return mat3 of quaternion (rotation matrix without translation)\n//https://www.shadertoy.com/view/WsGfWm\nmat3 q2m(vec4 q) \n{\n    vec3 a = vec3(-1, 1, 1);\n    vec3 u = q.zyz * a, v = q.xyx * a.xxy;\n    mat3 m = mat3(0.5) + mat3(0, u.x,u.y,u.z, 0, v.x,v.y,v.z, 0) * q.w + matrixCompMult(outerProduct(q.xyz, q.xyz), 1. - mat3(1));\n    q *= q; \n    m -= mat3(q.y + q.z, 0, 0, 0, q.x + q.z, 0, 0, 0, q.x + q.y);\n    return m * 2.0;\n}\n\n//return quaternion of orthogonal matrix (with determinant==1., or else quaternionm will not be normalized)\nvec4 m2q(mat3 m) \n{\n#define m2f(a,b) m[a][b]-m[b][a]\n    //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n    float q = 2. * sqrt(abs(1. + m[0][0] + m[1][1] + m[2][2]));\n    return vec4(vec3(m2f(2, 1), m2f(0, 1), m2f(1, 0)) / q / 4., q);\n#undef m2f\n}\n\nfloat at2e(vec2 a) \n{\n    a *= 2.;\n    return atan(a.x, 1. - a.y);\n}\n\n//return quaternion of Euler[yaw,pitch,roll]     \nvec4 eYPR2q(vec3 o) \n{\n    o *= .5;\n    vec3 s = sin(o);\n    //https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Source_code\n    o = cos(o);\n    vec4 a = vec4(s.xz, o.xz);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(-1, 1, -1, 1);\n}\n\nvec4 eYPR2q(vec2 o) \n{\n    o *= .5;\n    vec2 s = sin(o);\n    o = cos(o);\n    vec4 a = vec4(s.x, 0., o.x, 0.);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(- 1, 1, - 1, 1);\n}\n\nmat3 getCam(vec4 q) \n{\n    return q2m(q);\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n\n//uniformly spherically distributed\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\n//The first 6 columns of the U matrix: \nfloat U[846] = float[](-2.2571E-08, -2.2370E-07, -6.4930E-07, -1.3150E-06, -2.2365E-06, -3.4301E-06, -4.9133E-06, -6.7046E-06, -8.8242E-06, -1.1294E-05, -1.4137E-05, -1.7379E-05, -2.1047E-05, -2.5172E-05, -2.9785E-05, -3.4924E-05, -4.0626E-05, -4.6935E-05, -5.3896E-05, -6.1562E-05, -6.9989E-05, -7.9238E-05, -8.9379E-05, -1.0049E-04, -1.1265E-04, -1.2595E-04, -1.4050E-04, -1.5642E-04, -1.7384E-04, -1.9289E-04, -2.1375E-04, -2.3661E-04, -2.6166E-04, -2.8915E-04, -3.1935E-04, -3.5257E-04, -3.8916E-04, -4.2954E-04, -4.7417E-04, -5.2360E-04, -5.7848E-04, -6.3956E-04, -7.0772E-04, -7.8401E-04, -8.6967E-04, -9.6621E-04, -1.0754E-03, -1.1996E-03, -1.3413E-03, -1.5040E-03, -1.6918E-03, -1.9100E-03, -2.1653E-03, -2.4666E-03, -2.8252E-03, -3.2563E-03, -3.7806E-03, -4.4268E-03, -5.2352E-03, -6.2646E-03, -7.6028E-03, -9.3861E-03, -1.1835E-02, -1.5326E-02, -2.0542E-02, -2.8833E-02, -4.3174E-02, -7.1174E-02, -1.3698E-01, -3.4335E-01, -8.4202E-01, -3.4335E-01, -1.3698E-01, -7.1174E-02, -4.3174E-02, -2.8833E-02, -2.0542E-02, -1.5326E-02, -1.1835E-02, -9.3861E-03, -7.6028E-03, -6.2646E-03, -5.2352E-03, -4.4268E-03, -3.7806E-03, -3.2563E-03, -2.8252E-03, -2.4666E-03, -2.1653E-03, -1.9100E-03, -1.6918E-03, -1.5040E-03, -1.3413E-03, -1.1996E-03, -1.0754E-03, -9.6621E-04, -8.6967E-04, -7.8401E-04, -7.0772E-04, -6.3956E-04, -5.7848E-04, -5.2360E-04, -4.7417E-04, -4.2954E-04, -3.8916E-04, -3.5257E-04, -3.1935E-04, -2.8915E-04, -2.6166E-04, -2.3661E-04, -2.1375E-04, -1.9289E-04, -1.7384E-04, -1.5642E-04, -1.4050E-04, -1.2595E-04, -1.1265E-04, -1.0049E-04, -8.9379E-05, -7.9238E-05, -6.9989E-05, -6.1562E-05, -5.3896E-05, -4.6935E-05, -4.0626E-05, -3.4924E-05, -2.9785E-05, -2.5172E-05, -2.1047E-05, -1.7379E-05, -1.4137E-05, -1.1294E-05, -8.8242E-06, -6.7046E-06, -4.9133E-06, -3.4301E-06, -2.2365E-06, -1.3150E-06, -6.4930E-07, -2.2370E-07, -2.2571E-08, 9.4992E-08, 1.2289E-06, 3.8698E-06, 8.1813E-06, 1.4299E-05, 2.2351E-05, 3.2472E-05, 4.4799E-05, 5.9477E-05, 7.6664E-05, 9.6527E-05, 1.1924E-04, 1.4501E-04, 1.7404E-04, 2.0657E-04, 2.4283E-04, 2.8310E-04, 3.2767E-04, 3.7687E-04, 4.3106E-04, 4.9062E-04, 5.5597E-04, 6.2759E-04, 7.0598E-04, 7.9174E-04, 8.8548E-04, 9.8790E-04, 1.0998E-03, 1.2220E-03, 1.3556E-03, 1.5015E-03, 1.6611E-03, 1.8357E-03, 2.0268E-03, 2.2363E-03, 2.4661E-03, 2.7185E-03, 2.9962E-03, 3.3021E-03, 3.6396E-03, 4.0129E-03, 4.4266E-03, 4.8861E-03, 5.3978E-03, 5.9693E-03, 6.6096E-03, 7.3294E-03, 8.1416E-03, 9.0619E-03, 1.0109E-02, 1.1307E-02, 1.2685E-02, 1.4278E-02, 1.6134E-02, 1.8312E-02, 2.0889E-02, 2.3966E-02, 2.7679E-02, 3.2213E-02, 3.7826E-02, 4.4882E-02, 5.3915E-02, 6.5726E-02, 8.1554E-02, 1.0339E-01, 1.3454E-01, 1.8060E-01, 2.5039E-01, 3.4843E-01, 3.4410E-01, -4.7815E-01, 3.4410E-01, 3.4843E-01, 2.5039E-01, 1.8060E-01, 1.3454E-01, 1.0339E-01, 8.1554E-02, 6.5726E-02, 5.3915E-02, 4.4882E-02, 3.7826E-02, 3.2213E-02, 2.7679E-02, 2.3966E-02, 2.0889E-02, 1.8312E-02, 1.6134E-02, 1.4278E-02, 1.2685E-02, 1.1307E-02, 1.0109E-02, 9.0619E-03, 8.1416E-03, 7.3294E-03, 6.6096E-03, 5.9693E-03, 5.3978E-03, 4.8861E-03, 4.4266E-03, 4.0129E-03, 3.6396E-03, 3.3021E-03, 2.9962E-03, 2.7185E-03, 2.4661E-03, 2.2363E-03, 2.0268E-03, 1.8357E-03, 1.6611E-03, 1.5015E-03, 1.3556E-03, 1.2220E-03, 1.0998E-03, 9.8790E-04, 8.8548E-04, 7.9174E-04, 7.0598E-04, 6.2759E-04, 5.5597E-04, 4.9062E-04, 4.3106E-04, 3.7687E-04, 3.2767E-04, 2.8310E-04, 2.4283E-04, 2.0657E-04, 1.7404E-04, 1.4501E-04, 1.1924E-04, 9.6527E-05, 7.6664E-05, 5.9477E-05, 4.4799E-05, 3.2472E-05, 2.2351E-05, 1.4299E-05, 8.1813E-06, 3.8698E-06, 1.2289E-06, 9.4992E-08, 6.0990E-08, 2.5096E-06, 9.8909E-06, 2.3300E-05, 4.3496E-05, 7.1123E-05, 1.0678E-04, 1.5108E-04, 2.0460E-04, 2.6800E-04, 3.4192E-04, 4.2707E-04, 5.2420E-04, 6.3411E-04, 7.5767E-04, 8.9581E-04, 1.0495E-03, 1.2199E-03, 1.4082E-03, 1.6156E-03, 1.8436E-03, 2.0936E-03, 2.3675E-03, 2.6669E-03, 2.9939E-03, 3.3508E-03, 3.7400E-03, 4.1641E-03, 4.6261E-03, 5.1294E-03, 5.6775E-03, 6.2746E-03, 6.9252E-03, 7.6343E-03, 8.4076E-03, 9.2516E-03, 1.0173E-02, 1.1181E-02, 1.2283E-02, 1.3491E-02, 1.4816E-02, 1.6272E-02, 1.7874E-02, 1.9641E-02, 2.1592E-02, 2.3751E-02, 2.6147E-02, 2.8812E-02, 3.1783E-02, 3.5106E-02, 3.8833E-02, 4.3028E-02, 4.7765E-02, 5.3134E-02, 5.9243E-02, 6.6222E-02, 7.4226E-02, 8.3442E-02, 9.4089E-02, 1.0642E-01, 1.2072E-01, 1.3725E-01, 1.5616E-01, 1.7725E-01, 1.9930E-01, 2.1837E-01, 2.2300E-01, 1.8046E-01, 6.7147E-04, -3.9974E-01, 2.2485E-01, -3.9974E-01, 6.7147E-04, 1.8046E-01, 2.2300E-01, 2.1837E-01, 1.9930E-01, 1.7725E-01, 1.5616E-01, 1.3725E-01, 1.2072E-01, 1.0642E-01, 9.4089E-02, 8.3442E-02, 7.4226E-02, 6.6222E-02, 5.9243E-02, 5.3134E-02, 4.7765E-02, 4.3028E-02, 3.8833E-02, 3.5106E-02, 3.1783E-02, 2.8812E-02, 2.6147E-02, 2.3751E-02, 2.1592E-02, 1.9641E-02, 1.7874E-02, 1.6272E-02, 1.4816E-02, 1.3491E-02, 1.2283E-02, 1.1181E-02, 1.0173E-02, 9.2516E-03, 8.4076E-03, 7.6343E-03, 6.9252E-03, 6.2746E-03, 5.6775E-03, 5.1294E-03, 4.6261E-03, 4.1641E-03, 3.7400E-03, 3.3508E-03, 2.9939E-03, 2.6669E-03, 2.3675E-03, 2.0936E-03, 1.8436E-03, 1.6156E-03, 1.4082E-03, 1.2199E-03, 1.0495E-03, 8.9581E-04, 7.5767E-04, 6.3411E-04, 5.2420E-04, 4.2707E-04, 3.4192E-04, 2.6800E-04, 2.0460E-04, 1.5108E-04, 1.0678E-04, 7.1123E-05, 4.3496E-05, 2.3300E-05, 9.8909E-06, 2.5096E-06, 6.0990E-08, 3.9202E-07, 1.0707E-06, -5.5638E-06, -2.4920E-05, -6.0595E-05, -1.1535E-04, -1.9154E-04, -2.9125E-04, -4.1649E-04, -5.6920E-04, -7.5135E-04, -9.6493E-04, -1.2120E-03, -1.4948E-03, -1.8154E-03, -2.1764E-03, -2.5802E-03, -3.0297E-03, -3.5276E-03, -4.0771E-03, -4.6816E-03, -5.3446E-03, -6.0699E-03, -6.8619E-03, -7.7248E-03, -8.6637E-03, -9.6836E-03, -1.0790E-02, -1.1990E-02, -1.3290E-02, -1.4696E-02, -1.6217E-02, -1.7861E-02, -1.9638E-02, -2.1557E-02, -2.3629E-02, -2.5867E-02, -2.8283E-02, -3.0891E-02, -3.3706E-02, -3.6744E-02, -4.0023E-02, -4.3561E-02, -4.7378E-02, -5.1495E-02, -5.5934E-02, -6.0715E-02, -6.5862E-02, -7.1394E-02, -7.7329E-02, -8.3678E-02, -9.0445E-02, -9.7618E-02, -1.0516E-01, -1.1301E-01, -1.2104E-01, -1.2905E-01, -1.3672E-01, -1.4351E-01, -1.4862E-01, -1.5076E-01, -1.4794E-01, -1.3703E-01, -1.1319E-01, -6.9090E-02, 5.3226E-03, 1.1949E-01, 2.5994E-01, 2.8518E-01, -2.6692E-01, 9.7440E-02, -2.6692E-01, 2.8518E-01, 2.5994E-01, 1.1949E-01, 5.3226E-03, -6.9090E-02, -1.1319E-01, -1.3703E-01, -1.4794E-01, -1.5076E-01, -1.4862E-01, -1.4351E-01, -1.3672E-01, -1.2905E-01, -1.2104E-01, -1.1301E-01, -1.0516E-01, -9.7618E-02, -9.0445E-02, -8.3678E-02, -7.7329E-02, -7.1394E-02, -6.5862E-02, -6.0715E-02, -5.5934E-02, -5.1495E-02, -4.7378E-02, -4.3561E-02, -4.0023E-02, -3.6744E-02, -3.3706E-02, -3.0891E-02, -2.8283E-02, -2.5867E-02, -2.3629E-02, -2.1557E-02, -1.9638E-02, -1.7861E-02, -1.6217E-02, -1.4696E-02, -1.3290E-02, -1.1990E-02, -1.0790E-02, -9.6836E-03, -8.6637E-03, -7.7248E-03, -6.8619E-03, -6.0699E-03, -5.3446E-03, -4.6816E-03, -4.0771E-03, -3.5276E-03, -3.0297E-03, -2.5802E-03, -2.1764E-03, -1.8154E-03, -1.4948E-03, -1.2120E-03, -9.6493E-04, -7.5135E-04, -5.6920E-04, -4.1649E-04, -2.9125E-04, -1.9154E-04, -1.1535E-04, -6.0595E-05, -2.4920E-05, -5.5638E-06, 1.0707E-06, 3.9202E-07, -1.4704E-07, -1.3202E-05, -3.6444E-05, -5.3538E-05, -5.0987E-05, -1.8179E-05, 5.3515E-05, 1.7132E-04, 3.4153E-04, 5.6982E-04, 8.6144E-04, 1.2213E-03, 1.6543E-03, 2.1651E-03, 2.7583E-03, 3.4388E-03, 4.2113E-03, 5.0807E-03, 6.0520E-03, 7.1305E-03, 8.3215E-03, 9.6305E-03, 1.1063E-02, 1.2625E-02, 1.4323E-02, 1.6163E-02, 1.8152E-02, 2.0295E-02, 2.2599E-02, 2.5071E-02, 2.7718E-02, 3.0545E-02, 3.3560E-02, 3.6766E-02, 4.0170E-02, 4.3775E-02, 4.7584E-02, 5.1598E-02, 5.5815E-02, 6.0231E-02, 6.4838E-02, 6.9623E-02, 7.4565E-02, 7.9638E-02, 8.4803E-02, 9.0009E-02, 9.5187E-02, 1.0025E-01, 1.0508E-01, 1.0952E-01, 1.1338E-01, 1.1641E-01, 1.1828E-01, 1.1860E-01, 1.1683E-01, 1.1233E-01, 1.0428E-01, 9.1694E-02, 7.3374E-02, 4.7982E-02, 1.4157E-02, -2.9124E-02, -8.1707E-02, -1.4040E-01, -1.9506E-01, -2.2082E-01, -1.6617E-01, 4.4884E-02, 3.5089E-01, -1.5379E-01, 4.3140E-02, -1.5379E-01, 3.5089E-01, 4.4884E-02, -1.6617E-01, -2.2082E-01, -1.9506E-01, -1.4040E-01, -8.1707E-02, -2.9124E-02, 1.4157E-02, 4.7982E-02, 7.3374E-02, 9.1694E-02, 1.0428E-01, 1.1233E-01, 1.1683E-01, 1.1860E-01, 1.1828E-01, 1.1641E-01, 1.1338E-01, 1.0952E-01, 1.0508E-01, 1.0025E-01, 9.5187E-02, 9.0009E-02, 8.4803E-02, 7.9638E-02, 7.4565E-02, 6.9623E-02, 6.4838E-02, 6.0231E-02, 5.5815E-02, 5.1598E-02, 4.7584E-02, 4.3775E-02, 4.0170E-02, 3.6766E-02, 3.3560E-02, 3.0545E-02, 2.7718E-02, 2.5071E-02, 2.2599E-02, 2.0295E-02, 1.8152E-02, 1.6163E-02, 1.4323E-02, 1.2625E-02, 1.1063E-02, 9.6305E-03, 8.3215E-03, 7.1305E-03, 6.0520E-03, 5.0807E-03, 4.2113E-03, 3.4388E-03, 2.7583E-03, 2.1651E-03, 1.6543E-03, 1.2213E-03, 8.6144E-04, 5.6982E-04, 3.4153E-04, 1.7132E-04, 5.3515E-05, -1.8179E-05, -5.0987E-05, -5.3538E-05, -3.6444E-05, -1.3202E-05, -1.4704E-07, -2.1775E-06, 7.8028E-06, 9.3692E-05, 2.4587E-04, 4.3108E-04, 6.1532E-04, 7.6838E-04, 8.6463E-04, 8.8226E-04, 8.0272E-04, 6.1001E-04, 2.9028E-04, -1.6864E-04, -7.7768E-04, -1.5466E-03, -2.4843E-03, -3.5989E-03, -4.8978E-03, -6.3881E-03, -8.0759E-03, -9.9669E-03, -1.2066E-02, -1.4379E-02, -1.6907E-02, -1.9655E-02, -2.2624E-02, -2.5813E-02, -2.9223E-02, -3.2851E-02, -3.6690E-02, -4.0733E-02, -4.4971E-02, -4.9387E-02, -5.3964E-02, -5.8676E-02, -6.3495E-02, -6.8382E-02, -7.3291E-02, -7.8166E-02, -8.2939E-02, -8.7527E-02, -9.1833E-02, -9.5738E-02, -9.9103E-02, -1.0176E-01, -1.0353E-01, -1.0417E-01, -1.0343E-01, -1.0101E-01, -9.6579E-02, -8.9754E-02, -8.0133E-02, -6.7294E-02, -5.0825E-02, -3.0372E-02, -5.7158E-03, 2.3097E-02, 5.5550E-02, 9.0345E-02, 1.2493E-01, 1.5482E-01, 1.7275E-01, 1.6784E-01, 1.2563E-01, 3.1708E-02, -1.1356E-01, -2.5260E-01, -1.9028E-01, 2.9812E-01, -8.2496E-02, 1.9384E-02, -8.2496E-02, 2.9812E-01, -1.9028E-01, -2.5260E-01, -1.1356E-01, 3.1708E-02, 1.2563E-01, 1.6784E-01, 1.7275E-01, 1.5482E-01, 1.2493E-01, 9.0345E-02, 5.5550E-02, 2.3097E-02, -5.7158E-03, -3.0372E-02, -5.0825E-02, -6.7294E-02, -8.0133E-02, -8.9754E-02, -9.6579E-02, -1.0101E-01, -1.0343E-01, -1.0417E-01, -1.0353E-01, -1.0176E-01, -9.9103E-02, -9.5738E-02, -9.1833E-02, -8.7527E-02, -8.2939E-02, -7.8166E-02, -7.3291E-02, -6.8382E-02, -6.3495E-02, -5.8676E-02, -5.3964E-02, -4.9387E-02, -4.4971E-02, -4.0733E-02, -3.6690E-02, -3.2851E-02, -2.9223E-02, -2.5813E-02, -2.2624E-02, -1.9655E-02, -1.6907E-02, -1.4379E-02, -1.2066E-02, -9.9669E-03, -8.0759E-03, -6.3881E-03, -4.8978E-03, -3.5989E-03, -2.4843E-03, -1.5466E-03, -7.7768E-04, -1.6864E-04, 2.9028E-04, 6.1001E-04, 8.0272E-04, 8.8226E-04, 8.6463E-04, 7.6838E-04, 6.1532E-04, 4.3108E-04, 2.4587E-04, 9.3692E-05, 7.8028E-06, -2.1775E-06); \n//The first 6 rows of the V matrix: \nfloat V[846] = float[](-2.4998E-09, -2.4775E-08, -7.1910E-08, -1.4564E-07, -2.4770E-07, -3.7989E-07, -5.4415E-07, -7.4254E-07, -9.7729E-07, -1.2508E-06, -1.5657E-06, -1.9247E-06, -2.3310E-06, -2.7878E-06, -3.2988E-06, -3.8679E-06, -4.4994E-06, -5.1981E-06, -5.9691E-06, -6.8181E-06, -7.7513E-06, -8.7757E-06, -9.8988E-06, -1.1129E-05, -1.2476E-05, -1.3949E-05, -1.5561E-05, -1.7324E-05, -1.9253E-05, -2.1363E-05, -2.3673E-05, -2.6204E-05, -2.8979E-05, -3.2024E-05, -3.5368E-05, -3.9047E-05, -4.3100E-05, -4.7572E-05, -5.2515E-05, -5.7990E-05, -6.4068E-05, -7.0832E-05, -7.8381E-05, -8.6830E-05, -9.6317E-05, -1.0701E-04, -1.1911E-04, -1.3285E-04, -1.4855E-04, -1.6657E-04, -1.8737E-04, -2.1153E-04, -2.3981E-04, -2.7318E-04, -3.1289E-04, -3.6064E-04, -4.1871E-04, -4.9028E-04, -5.7981E-04, -6.9382E-04, -8.4202E-04, -1.0395E-03, -1.3107E-03, -1.6973E-03, -2.2750E-03, -3.1933E-03, -4.7816E-03, -7.8826E-03, -1.5171E-02, -3.8026E-02, -9.3254E-02, -3.8026E-02, -1.5171E-02, -7.8826E-03, -4.7816E-03, -3.1933E-03, -2.2750E-03, -1.6973E-03, -1.3107E-03, -1.0395E-03, -8.4202E-04, -6.9382E-04, -5.7981E-04, -4.9028E-04, -4.1871E-04, -3.6064E-04, -3.1289E-04, -2.7318E-04, -2.3981E-04, -2.1153E-04, -1.8737E-04, -1.6657E-04, -1.4855E-04, -1.3285E-04, -1.1911E-04, -1.0701E-04, -9.6317E-05, -8.6830E-05, -7.8381E-05, -7.0832E-05, -6.4068E-05, -5.7990E-05, -5.2515E-05, -4.7572E-05, -4.3100E-05, -3.9047E-05, -3.5368E-05, -3.2024E-05, -2.8979E-05, -2.6204E-05, -2.3673E-05, -2.1363E-05, -1.9253E-05, -1.7324E-05, -1.5561E-05, -1.3949E-05, -1.2476E-05, -1.1129E-05, -9.8988E-06, -8.7757E-06, -7.7513E-06, -6.8181E-06, -5.9691E-06, -5.1981E-06, -4.4994E-06, -3.8679E-06, -3.2988E-06, -2.7878E-06, -2.3310E-06, -1.9247E-06, -1.5657E-06, -1.2508E-06, -9.7729E-07, -7.4254E-07, -5.4415E-07, -3.7989E-07, -2.4770E-07, -1.4564E-07, -7.1910E-08, -2.4775E-08, -2.4998E-09, 2.0267E-09, 2.6220E-08, 8.2565E-08, 1.7455E-07, 3.0507E-07, 4.7688E-07, 6.9282E-07, 9.5582E-07, 1.2690E-06, 1.6357E-06, 2.0595E-06, 2.5442E-06, 3.0940E-06, 3.7134E-06, 4.4072E-06, 5.1809E-06, 6.0401E-06, 6.9911E-06, 8.0409E-06, 9.1970E-06, 1.0468E-05, 1.1862E-05, 1.3390E-05, 1.5063E-05, 1.6892E-05, 1.8892E-05, 2.1078E-05, 2.3465E-05, 2.6073E-05, 2.8923E-05, 3.2037E-05, 3.5441E-05, 3.9166E-05, 4.3245E-05, 4.7714E-05, 5.2617E-05, 5.8002E-05, 6.3926E-05, 7.0452E-05, 7.7655E-05, 8.5619E-05, 9.4445E-05, 1.0425E-04, 1.1517E-04, 1.2736E-04, 1.4102E-04, 1.5638E-04, 1.7371E-04, 1.9334E-04, 2.1569E-04, 2.4125E-04, 2.7064E-04, 3.0464E-04, 3.4424E-04, 3.9071E-04, 4.4569E-04, 5.1134E-04, 5.9056E-04, 6.8730E-04, 8.0704E-04, 9.5760E-04, 1.1503E-03, 1.4023E-03, 1.7400E-03, 2.2059E-03, 2.8706E-03, 3.8533E-03, 5.3424E-03, 7.4340E-03, 7.3418E-03, -1.0202E-02, 7.3418E-03, 7.4340E-03, 5.3424E-03, 3.8533E-03, 2.8706E-03, 2.2059E-03, 1.7400E-03, 1.4023E-03, 1.1503E-03, 9.5760E-04, 8.0704E-04, 6.8730E-04, 5.9056E-04, 5.1134E-04, 4.4569E-04, 3.9071E-04, 3.4424E-04, 3.0464E-04, 2.7064E-04, 2.4125E-04, 2.1569E-04, 1.9334E-04, 1.7371E-04, 1.5638E-04, 1.4102E-04, 1.2736E-04, 1.1517E-04, 1.0425E-04, 9.4445E-05, 8.5619E-05, 7.7655E-05, 7.0452E-05, 6.3926E-05, 5.8002E-05, 5.2617E-05, 4.7714E-05, 4.3245E-05, 3.9166E-05, 3.5441E-05, 3.2037E-05, 2.8923E-05, 2.6073E-05, 2.3465E-05, 2.1078E-05, 1.8892E-05, 1.6892E-05, 1.5063E-05, 1.3390E-05, 1.1862E-05, 1.0468E-05, 9.1970E-06, 8.0409E-06, 6.9911E-06, 6.0401E-06, 5.1809E-06, 4.4072E-06, 3.7134E-06, 3.0940E-06, 2.5442E-06, 2.0595E-06, 1.6357E-06, 1.2690E-06, 9.5582E-07, 6.9282E-07, 4.7688E-07, 3.0507E-07, 1.7455E-07, 8.2565E-08, 2.6220E-08, 2.0267E-09, 3.8066E-10, 1.5663E-08, 6.1732E-08, 1.4542E-07, 2.7147E-07, 4.4390E-07, 6.6647E-07, 9.4290E-07, 1.2770E-06, 1.6726E-06, 2.1340E-06, 2.6655E-06, 3.2717E-06, 3.9577E-06, 4.7289E-06, 5.5910E-06, 6.5504E-06, 7.6140E-06, 8.7890E-06, 1.0084E-05, 1.1506E-05, 1.3067E-05, 1.4776E-05, 1.6645E-05, 1.8686E-05, 2.0913E-05, 2.3342E-05, 2.5989E-05, 2.8873E-05, 3.2014E-05, 3.5435E-05, 3.9162E-05, 4.3222E-05, 4.7648E-05, 5.2474E-05, 5.7742E-05, 6.3494E-05, 6.9782E-05, 7.6663E-05, 8.4202E-05, 9.2473E-05, 1.0156E-04, 1.1156E-04, 1.2258E-04, 1.3476E-04, 1.4824E-04, 1.6319E-04, 1.7982E-04, 1.9837E-04, 2.1910E-04, 2.4237E-04, 2.6855E-04, 2.9811E-04, 3.3163E-04, 3.6976E-04, 4.1331E-04, 4.6327E-04, 5.2078E-04, 5.8724E-04, 6.6421E-04, 7.5344E-04, 8.5659E-04, 9.7463E-04, 1.1063E-03, 1.2439E-03, 1.3629E-03, 1.3918E-03, 1.1263E-03, 4.1908E-06, -2.4949E-03, 1.4034E-03, -2.4949E-03, 4.1908E-06, 1.1263E-03, 1.3918E-03, 1.3629E-03, 1.2439E-03, 1.1063E-03, 9.7463E-04, 8.5659E-04, 7.5344E-04, 6.6421E-04, 5.8724E-04, 5.2078E-04, 4.6327E-04, 4.1331E-04, 3.6976E-04, 3.3163E-04, 2.9811E-04, 2.6855E-04, 2.4237E-04, 2.1910E-04, 1.9837E-04, 1.7982E-04, 1.6319E-04, 1.4824E-04, 1.3476E-04, 1.2258E-04, 1.1156E-04, 1.0156E-04, 9.2473E-05, 8.4202E-05, 7.6663E-05, 6.9782E-05, 6.3494E-05, 5.7742E-05, 5.2474E-05, 4.7648E-05, 4.3222E-05, 3.9162E-05, 3.5435E-05, 3.2014E-05, 2.8873E-05, 2.5989E-05, 2.3342E-05, 2.0913E-05, 1.8686E-05, 1.6645E-05, 1.4776E-05, 1.3067E-05, 1.1506E-05, 1.0084E-05, 8.7890E-06, 7.6140E-06, 6.5504E-06, 5.5910E-06, 4.7289E-06, 3.9577E-06, 3.2717E-06, 2.6655E-06, 2.1340E-06, 1.6726E-06, 1.2770E-06, 9.4290E-07, 6.6647E-07, 4.4390E-07, 2.7147E-07, 1.4542E-07, 6.1732E-08, 1.5663E-08, 3.8066E-10, 7.3282E-10, 2.0015E-09, -1.0401E-08, -4.6583E-08, -1.1327E-07, -2.1564E-07, -3.5805E-07, -5.4444E-07, -7.7855E-07, -1.0640E-06, -1.4045E-06, -1.8038E-06, -2.2657E-06, -2.7942E-06, -3.3936E-06, -4.0684E-06, -4.8233E-06, -5.6635E-06, -6.5943E-06, -7.6215E-06, -8.7515E-06, -9.9908E-06, -1.1347E-05, -1.2827E-05, -1.4440E-05, -1.6195E-05, -1.8102E-05, -2.0171E-05, -2.2414E-05, -2.4843E-05, -2.7472E-05, -3.0315E-05, -3.3388E-05, -3.6709E-05, -4.0297E-05, -4.4171E-05, -4.8355E-05, -5.2871E-05, -5.7746E-05, -6.3008E-05, -6.8687E-05, -7.4816E-05, -8.1430E-05, -8.8566E-05, -9.6262E-05, -1.0456E-04, -1.1350E-04, -1.2312E-04, -1.3346E-04, -1.4455E-04, -1.5642E-04, -1.6907E-04, -1.8248E-04, -1.9659E-04, -2.1126E-04, -2.2627E-04, -2.4125E-04, -2.5557E-04, -2.6827E-04, -2.7782E-04, -2.8183E-04, -2.7656E-04, -2.5616E-04, -2.1158E-04, -1.2915E-04, 9.9497E-06, 2.2337E-04, 4.8592E-04, 5.3309E-04, -4.9897E-04, 1.8215E-04, -4.9897E-04, 5.3309E-04, 4.8592E-04, 2.2337E-04, 9.9497E-06, -1.2915E-04, -2.1158E-04, -2.5616E-04, -2.7656E-04, -2.8183E-04, -2.7782E-04, -2.6827E-04, -2.5557E-04, -2.4125E-04, -2.2627E-04, -2.1126E-04, -1.9659E-04, -1.8248E-04, -1.6907E-04, -1.5642E-04, -1.4455E-04, -1.3346E-04, -1.2312E-04, -1.1350E-04, -1.0456E-04, -9.6262E-05, -8.8566E-05, -8.1430E-05, -7.4816E-05, -6.8687E-05, -6.3008E-05, -5.7746E-05, -5.2871E-05, -4.8355E-05, -4.4171E-05, -4.0297E-05, -3.6709E-05, -3.3388E-05, -3.0315E-05, -2.7472E-05, -2.4843E-05, -2.2414E-05, -2.0171E-05, -1.8102E-05, -1.6195E-05, -1.4440E-05, -1.2827E-05, -1.1347E-05, -9.9908E-06, -8.7515E-06, -7.6215E-06, -6.5943E-06, -5.6635E-06, -4.8233E-06, -4.0684E-06, -3.3936E-06, -2.7942E-06, -2.2657E-06, -1.8038E-06, -1.4045E-06, -1.0640E-06, -7.7855E-07, -5.4444E-07, -3.5805E-07, -2.1564E-07, -1.1327E-07, -4.6583E-08, -1.0401E-08, 2.0015E-09, 7.3282E-10, -7.9865E-11, -7.1710E-09, -1.9795E-08, -2.9080E-08, -2.7694E-08, -9.8739E-09, 2.9067E-08, 9.3053E-08, 1.8551E-07, 3.0951E-07, 4.6790E-07, 6.6338E-07, 8.9856E-07, 1.1760E-06, 1.4982E-06, 1.8678E-06, 2.2874E-06, 2.7596E-06, 3.2872E-06, 3.8730E-06, 4.5199E-06, 5.2309E-06, 6.0091E-06, 6.8577E-06, 7.7800E-06, 8.7794E-06, 9.8593E-06, 1.1023E-05, 1.2275E-05, 1.3618E-05, 1.5055E-05, 1.6591E-05, 1.8228E-05, 1.9970E-05, 2.1819E-05, 2.3777E-05, 2.5846E-05, 2.8026E-05, 3.0317E-05, 3.2715E-05, 3.5218E-05, 3.7816E-05, 4.0501E-05, 4.3256E-05, 4.6062E-05, 4.8889E-05, 5.1702E-05, 5.4451E-05, 5.7073E-05, 5.9485E-05, 6.1582E-05, 6.3227E-05, 6.4246E-05, 6.4417E-05, 6.3458E-05, 6.1014E-05, 5.6643E-05, 4.9805E-05, 3.9854E-05, 2.6062E-05, 7.6895E-06, -1.5819E-05, -4.4380E-05, -7.6261E-05, -1.0595E-04, -1.1994E-04, -9.0258E-05, 2.4380E-05, 1.9059E-04, -8.3532E-05, 2.3432E-05, -8.3532E-05, 1.9059E-04, 2.4380E-05, -9.0258E-05, -1.1994E-04, -1.0595E-04, -7.6261E-05, -4.4380E-05, -1.5819E-05, 7.6895E-06, 2.6062E-05, 3.9854E-05, 4.9805E-05, 5.6643E-05, 6.1014E-05, 6.3458E-05, 6.4417E-05, 6.4246E-05, 6.3227E-05, 6.1582E-05, 5.9485E-05, 5.7073E-05, 5.4451E-05, 5.1702E-05, 4.8889E-05, 4.6062E-05, 4.3256E-05, 4.0501E-05, 3.7816E-05, 3.5218E-05, 3.2715E-05, 3.0317E-05, 2.8026E-05, 2.5846E-05, 2.3777E-05, 2.1819E-05, 1.9970E-05, 1.8228E-05, 1.6591E-05, 1.5055E-05, 1.3618E-05, 1.2275E-05, 1.1023E-05, 9.8593E-06, 8.7794E-06, 7.7800E-06, 6.8577E-06, 6.0091E-06, 5.2309E-06, 4.5199E-06, 3.8730E-06, 3.2872E-06, 2.7596E-06, 2.2874E-06, 1.8678E-06, 1.4982E-06, 1.1760E-06, 8.9856E-07, 6.6338E-07, 4.6790E-07, 3.0951E-07, 1.8551E-07, 9.3053E-08, 2.9067E-08, -9.8739E-09, -2.7694E-08, -2.9080E-08, -1.9795E-08, -7.1710E-09, -7.9865E-11, -3.2507E-10, 1.1649E-09, 1.3987E-08, 3.6706E-08, 6.4355E-08, 9.1859E-08, 1.1471E-07, 1.2908E-07, 1.3171E-07, 1.1984E-07, 9.1067E-08, 4.3336E-08, -2.5176E-08, -1.1610E-07, -2.3089E-07, -3.7087E-07, -5.3727E-07, -7.3119E-07, -9.5366E-07, -1.2056E-06, -1.4879E-06, -1.8014E-06, -2.1465E-06, -2.5240E-06, -2.9342E-06, -3.3774E-06, -3.8536E-06, -4.3627E-06, -4.9042E-06, -5.4773E-06, -6.0810E-06, -6.7136E-06, -7.3729E-06, -8.0561E-06, -8.7597E-06, -9.4790E-06, -1.0209E-05, -1.0941E-05, -1.1669E-05, -1.2382E-05, -1.3067E-05, -1.3709E-05, -1.4292E-05, -1.4795E-05, -1.5192E-05, -1.5456E-05, -1.5551E-05, -1.5441E-05, -1.5080E-05, -1.4418E-05, -1.3399E-05, -1.1963E-05, -1.0046E-05, -7.5876E-06, -4.5342E-06, -8.5330E-07, 3.4481E-06, 8.2930E-06, 1.3487E-05, 1.8650E-05, 2.3112E-05, 2.5790E-05, 2.5057E-05, 1.8755E-05, 4.7336E-06, -1.6954E-05, -3.7711E-05, -2.8406E-05, 4.4505E-05, -1.2316E-05, 2.8938E-06, -1.2316E-05, 4.4505E-05, -2.8406E-05, -3.7711E-05, -1.6954E-05, 4.7336E-06, 1.8755E-05, 2.5057E-05, 2.5790E-05, 2.3112E-05, 1.8650E-05, 1.3487E-05, 8.2930E-06, 3.4481E-06, -8.5330E-07, -4.5342E-06, -7.5876E-06, -1.0046E-05, -1.1963E-05, -1.3399E-05, -1.4418E-05, -1.5080E-05, -1.5441E-05, -1.5551E-05, -1.5456E-05, -1.5192E-05, -1.4795E-05, -1.4292E-05, -1.3709E-05, -1.3067E-05, -1.2382E-05, -1.1669E-05, -1.0941E-05, -1.0209E-05, -9.4790E-06, -8.7597E-06, -8.0561E-06, -7.3729E-06, -6.7136E-06, -6.0810E-06, -5.4773E-06, -4.9042E-06, -4.3627E-06, -3.8536E-06, -3.3774E-06, -2.9342E-06, -2.5240E-06, -2.1465E-06, -1.8014E-06, -1.4879E-06, -1.2056E-06, -9.5366E-07, -7.3119E-07, -5.3727E-07, -3.7087E-07, -2.3089E-07, -1.1610E-07, -2.5176E-08, 4.3336E-08, 9.1067E-08, 1.1984E-07, 1.3171E-07, 1.2908E-07, 1.1471E-07, 9.1859E-08, 6.4355E-08, 3.6706E-08, 1.3987E-08, 1.1649E-09, -3.2507E-10); \n//center of the convolution \nint Nc = 70; \n//number of ranks \nint Nr = 6; \n//convolution size \nint N = 141; \n\n\nvec3 pack2vec3(vec3 a, vec3 b) \n{\n    uvec3 packed = uvec3(packHalf2x16(vec2(a.x,b.x)), packHalf2x16(vec2(a.y,b.y)), packHalf2x16(vec2(a.z,b.z)));\n    return vec3(uintBitsToFloat(packed.x), uintBitsToFloat(packed.y), uintBitsToFloat(packed.z));\n}\n\nvoid unpack2vec3(vec3 packed, out vec3 a, out vec3 b) \n{\n    uvec3 unpacked = uvec3(floatBitsToUint(packed.x), floatBitsToUint(packed.y), floatBitsToUint(packed.z));\n    vec2 unpackedA = unpackHalf2x16(unpacked.x);\n    vec2 unpackedB = unpackHalf2x16(unpacked.y);\n    vec2 unpackedC = unpackHalf2x16(unpacked.z);\n    a = vec3(unpackedA.x, unpackedB.x, unpackedC.x);\n    b = vec3(unpackedA.y, unpackedB.y, unpackedC.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SLICES 50.0\n\nfloat minimum_distance(vec3 v, vec3 w, vec3 p) \n{\n  vec3 dx = w - v;\n  float l2 = dot(dx, dx);  \n  if (l2 == 0.0) return distance(p, v);   \n  float t = max(0.0, min(1.0, dot(p - v, w - v) / l2));\n  vec3 projection = v + t * (w - v);\n  return distance(p, projection);\n}\n\nvec3 blackBody(float T)\n{\n    vec3 O = vec3(0.0);\n    for (float i=0.; i<3.; i++) \n    { \n        float f = 1.+.5*i; \n        O[int(i)] += 10. * (f*f*f) / (exp((19E3*f/T)) - 1.);  // Planck law\n    }\n    return O;\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat region(vec3 pos)\n{\n    return texture(iChannel1, pos/200.0).x;\n}\n\nvec3 sampleVoxel(vec3 ro, vec3 rd, vec3 pos)\n{\n    float r = region(pos);\n    if(r < 0.5) return vec3(0.0);\n    float temp = hash13(pos);\n    vec3 heat = pow(blackBody(temp*temp*temp*20000.), vec3(1.0));\n    vec3 spos = hash33(pos) + pos;\n    float mdist = minimum_distance(ro, ro + rd*100.0, spos);\n    float camdist = distance(ro, spos);\n    float mindist = 1.25*CAM_ANGLE*camdist;\n    float dec = smoothstep(SLICES, SLICES*0.8, camdist);\n    float bright = min(1000.0, 20.0 * dec * pow(camdist, -2.0));\n    return bright * smoothstep(mindist, 0.0, mdist) * heat;\n}\n\nvec3 VoxelRaycast(vec3 ro, vec3 rd, float maxt)\n{\n\tvec3 voxelPos = floor(ro);\n\t\n    vec3 rayInv = 1.0/rd;\n    vec3 rayMask = vec3(greaterThan(rd, vec3(0.0)));\n\tvec3 rayStep = rayMask * 2.0 - 1.0;          \n\tvec3 offset = (rayMask - ro) * rayInv;\n\n\tvec3 mask = vec3(0.0);\n    vec3 sideLength = vec3(0.0);\n    \n    float traveled = 0.0;\n    vec3 col = vec3(0.0);\n\tfor(int i = 0; i < MAX_STEPS; i++) \n\t{\n        col += sampleVoxel(ro, rd, voxelPos);\n        \n        sideLength = voxelPos * rayInv + offset;\n        mask = vec3(lessThanEqual(sideLength.xyz, min(sideLength.yzx, sideLength.zxy)));\n        voxelPos += mask * rayStep;\n        traveled = dot(sideLength, mask);\n        \n        if(traveled > maxt) break;\n\t}\n    \n    ro = ro + rd*traveled;\n\treturn col;\n}\n\nbool getRay(vec2 uv, out vec3 ro, out vec3 rd)\n{\n    mat3 cam = getCam(get(CamA));\n    \n    ro = get(CamP).xyz;\n   \n    rd = normalize(cam*vec3(FOV*uv, 1.0));\n    \n    return true;\n}\n\nvec4 render(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 cp, rd;\n    if(!getRay(uv, cp, rd)) return vec4(0,0,0,1);\n   \n    return vec4(VoxelRaycast(cp, rd, SLICES), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CAM_ANGLE = 1.5 * FOV / iResolution.y;\n    fragColor = vec4(0.0);   \n\n    fragColor += render(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//first pass of separable convolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    //do a convolution in the x direction on iChannel0\n    //since we have 6 ranks and we can only store 2 in a vec3 we need to do the partial sums in 1/2 resolution chunks in a single buffer(which means max 8 ranks)\n    ivec2 coord = ivec2(fragCoord.xy) % ivec2(iResolution.xy/2.0);\n    ivec2 block = ivec2(fragCoord.xy) / ivec2(iResolution.xy/2.0);\n    int rank_offset = 2 * (block.x + block.y * 2);\n\n    if(rank_offset >= Nr)\n        discard;\n\n    vec3 sum0 = vec3(0.0);\n    vec3 sum1 = vec3(0.0);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        //since we are doing it at 1/2 resolution we need to use 1 mip level higher\n        vec4 pixel = texelFetch(iChannel0, coord + ivec2(i, 0), 1);\n        vec3 pcolor = pow(pixel.xyz/(pixel.w+1e-6),vec3(1.6));\n        \n        //get the rank index\n        int offset = i + Nc;\n        sum0 += pcolor * U[offset + rank_offset * N];\n        sum1 += pcolor * U[offset + (rank_offset + 1) * N];\n    }\n\n    //write the sum packed to the output\n    fragColor = vec4(pack2vec3(sum0, sum1), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//second pass: do the convolution in the y direction\n//and write the result to the output    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //do a convolution in the y direction on iChannel0\n    ivec2 resol = ivec2(iResolution.xy/2.0);\n    ivec2 coord = ivec2(fragCoord.xy) % resol;\n    ivec2 block = ivec2(fragCoord.xy) / resol;\n\n    //we only need 1 block, since we can sum all the ranks here\n    if(block.x + block.y * 2 >= 1)\n        discard;\n\n    vec3 sum = vec3(0.0);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        ivec2 pos = ivec2(coord.x, coord.y + i);\n\n        //skip if the coordinate is outside the image\n        if(pos.x < 0 || pos.x >= resol.x || pos.y < 0 || pos.y >= resol.y)\n            continue;\n        \n        //loop over pairs of ranks\n        for(int j = 0; j < Nr; j += 2)\n        {\n            int block_id = j / 2;\n            ivec2 block_offset = ivec2(block_id % 2, block_id / 2);\n            vec4 pixel = texelFetch(iChannel0, pos + block_offset * resol, 0);\n\n            //unpack the values\n            vec3 val1, val2;\n            unpack2vec3(pixel.xyz, val1, val2);\n\n            //add the values to the sum\n            sum += val1 * V[i + Nc + j * N];\n            sum += val2 * V[i + Nc + (j + 1) * N];\n        }\n    }\n\n    //return the sum\n    fragColor = vec4(sum, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}