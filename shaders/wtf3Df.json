{
    "Shader": {
        "info": {
            "date": "1557884051",
            "description": "experimenting with raymarching a volumetric look. The sound adds to the spaceship feel. ",
            "flags": 8,
            "hasliked": 0,
            "id": "wtf3Df",
            "likes": 8,
            "name": "Starship cruise control",
            "published": 3,
            "tags": [
                "3d",
                "volume",
                "raymarch",
                "sound"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 983
        },
        "renderpass": [
            {
                "code": "vec2 R;\n\nfloat sdCap(vec3 p, vec3 a, vec3 b, float r){\n\tvec3 ab = b-a;\n\tvec3 ap = p-a;\n\tfloat t = dot(ab, ap) / dot(ab, ab);\n\tt = clamp(t, 0., 1.);\n\tvec3 c = a + t*ab;\n\treturn length(p-c) - r;\n}\n\nfloat opSub( float d1, float d2 ) { return max(-d1,d2); }\n\n// Dave Hoskin hash hehe\nfloat hash(float p){\n    p = fract(p * .1071);\n    p *= p + 19.19;\n    p *= p + p;\n    return fract(p);\n}\n// I cant remember where I found this noise function, but it made for something\n// good to trace through\nfloat noise3d(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f * f * (3. - 2. * f);\n\n\tfloat n = p.x + p.y * 157. + 113. * p.z;\n\treturn mix(\n\t\t\tmix(mix(hash(n + 0.0), hash(n + 1.), f.x),\n\t\t\t\t\tmix(hash(n + 157.), hash(n + 158.), f.x), f.y),\n\t\t\tmix(mix(hash(n + 113.), hash(n + 114.), f.x),\n\t\t\t\t\tmix(hash(n + 270.), hash(n + 271.), f.x), f.y), f.z);\n}\nfloat map(vec3 p)\n{\n    float d;\n    vec3 b = vec3(0., 0., 1.);\n   \n    p.z+=iTime*4.;\n    d = noise3d(p*.85)*.2;\n    p = mod(p, b)-.5*b;\n    d = opSub(sdCap(p, vec3(0., 0., 1.),vec3(0., 0., -1.), 2.2 ), d);\n    \n    return d;\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u )\n{\n    R = iResolution.xy;\n    vec2 uv = 13. * vec2(u.xy - .5*R.xy)/R.y; \n   \n    vec3 rd = normalize(vec3(uv,2.));\n  \n    float t, d, c, ns; \n    vec3 col, p, ro = vec3(0);\n   \n    // Raymarch and accumulate color here.\n\t// When we hit a surface, add some color, nudge the ray out a bit and continue\n    for (int i = 0; i < 64; i++) \n    {\n        d = map(ro + rd*t);\n        \n        if(d <= .14)\n        {\n            p = ro + rd * t;\n            p.z+=iTime*4.;\n            ns = sin(p.z*4.);\n            col += mix(vec3(1),vec3(0., 1.2, 1.2), ns) *d*12.;\n            ro = ro + rd*.25;\n            c++;\n        }\n        t += d * .75; \n    }\n    \n    col /= c;\n    \n    float drk = smoothstep(0.0, 0.33, t / 72.);\n    col *= drk;\n    \n    col = clamp(col, .0, 1.);\n\t\n    \n    col = mix(vec3(.8), col, smoothstep(.0, .08, length(uv/9.)));\n    \n    f = vec4(col, 1.);\n        \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float pi2 = 6.283;\nconst float pi = 3.1415;\n\nfloat dist(float inp, float k){\n \treturn clamp(inp*k, -1.0, 1.0);   \n}\n\nfloat osc(float t, float w){\n    return sin(pi2*w*t);   \n}\n\nfloat saw(float t, float hz){\n    float s = 0.;\n    for(float i = 0.; i < 16.;i++){\n        s += osc(t, hz*(i+1.)) / (i + 1.); \n    }\n    return s;\n}\n\nfloat S(float t, float hz)\n{\n    float s, c;\n    \n    float n = max(0., sin((pi*t)/4.)); // saw fade in\n    float p = floor(mod(t / 16., 1.)*2.); // pitch change every fade in\n    \n\tfor(float i = 0.; i < 2.;i++){\n        s += dist(osc(t, hz *(i+1.)*.75), 1.4);\n        s += n*dist(saw(t, hz*(2. + .24*p) *(i+1.)*.75), 1.)*.18;\n        c++; \n\t}\n    s/=c;\n    \n    return s;\n}\n\nvec2 fsound(float t)\n{\n    vec2 f;\n    float lfo = .0015 * sin(t * 30.); // warbly effect\n    f = vec2(S(t + lfo, 55.), S(t + lfo, 55.5));\n    \n    return f; \n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float t = mod(time, 60.) - 4.;\n    vec2 ms = vec2(0);\n   \n    float lfo = .001 * sin(t * 22.);\n    \n    ms = fsound(t);\n    ms += fsound(t + lfo); // Flange it!\n    ms/=2.;\n    \n  \treturn ms * .25;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}