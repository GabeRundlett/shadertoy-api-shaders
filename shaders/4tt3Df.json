{
    "Shader": {
        "info": {
            "date": "1472233777",
            "description": "An implementation of some of the optimisations to the standard sphere tracing algorithm described in 'Enhanced Sphere Tracing' http://erleuchtet.org/~cupe/permanent/enhanced_sphere_tracing.pdf\nUse the mouse to look around.",
            "flags": 0,
            "hasliked": 0,
            "id": "4tt3Df",
            "likes": 13,
            "name": "Enhanced Sphere-tracer Impl",
            "published": 3,
            "tags": [
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 888
        },
        "renderpass": [
            {
                "code": "#define AO\n#define SHADOWS\n#define BOUNCES 3\n\nmat3 rotX(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(1.0, 0.0, 0.0,\n                0.0,   c,  -s,\n                0.0,   s,   c );\n}\n\nmat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nfloat closeObj = 0.0;\n\nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\n//Returns a vector (min distance, material)\nvec2 mapMat(vec3 p){\n\tvec2 sphere = vec2(length(p - vec3(sin(iTime), 0.0, cos(iTime))) - 1.0, 2.0);\n    vec2 sphereb = vec2(length(p - vec3(0.0, 0.0, -6.0)) - 1.0, 2.0);\n    vec2 spherec = vec2(length(p - vec3(4.0, 0.0, -3.0)) - 1.0, 3.0);\n    vec2 sphered = vec2(length(p - vec3(-4.0, 0.0, -3.0)) - 1.0, 3.0);\n    vec2 ground = vec2(p.y + 1.0, 1.0);\n    vec2 wall = vec2(-p.z + 5.0, 3.0);\n    return vecMin(sphered, vecMin(spherec, vecMin(sphereb, vecMin(wall, vecMin(sphere, ground)))));\n}\n\n//Returns the min distance\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\n//Sphere tracer implementation - returns distance to closest object and stores material in closeObj\nfloat trace(vec3 ro, vec3 rd){\n    float t = 1.0;\n    float d = 0.0;\n    float w = 1.4;\n    float ld = 0.0;\n    float ls = 0.0;\n    float s = 0.0;\n    float cerr = 10000.0;\n    float ct = 0.0;\n    float pixradius = 1.0 / iResolution.x;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 256; i++){\n        ld = d;\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        \n        //Detect intersections missed by over-relaxation\n        if(w > 1.0 && abs(ld) + abs(d) < s){\n            s -= w * s;\n            w = 1.0;\n            t += s;\n            continue;\n        }\n        s = w * d;\n        \n        float err = d / t;\n        \n        if(abs(err) < abs(cerr)){\n            ct = t;\n            cerr = err;\n        }\n        \n        //Intersect when d / t < one pixel\n        if(abs(err) < pixradius){\n            inter = 1;\n            break;\n        }\n        \n        t += s;\n        if(t > 50.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        ct = -1.0;\n    }\n    return ct;\n}\n\n\n//Approximate normal\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\n//Trace reflections\nfloat traceReflect(inout vec3 ro, inout vec3 rd, const int bounces){\n    float emin = 0.1;\n    float t = 0.0;\n    int inter = 1;\n    for(int i = 0; i < BOUNCES; i++){\n        vec3 n = normal(ro);\n        vec3 rrd = normalize(reflect(rd, n));\n        float e = 2.0 * max(abs(map(ro)), emin);\n        vec3 rro = ro + rrd * e;\n        t = trace(rro, rrd);\n        if(t == -1.0){\n            inter = 0;\n            break;\n        }\n        ro = rro + rrd * t;\n        rd = rrd;\n                if(closeObj != 2.0){\n            break;\n        }\n    }\n    if(inter == 0){\n        t = -1.0;\n    }\n    return t;\n}\n    \n//Globals for use in lighting calculations - updated in main image\nvec3 camPos = vec3(0.0, 0.0, 0.0);\nvec3 lightPos = vec3(0.0, 0.0, 0.0);\n\n//Calculate ambient light\nvec3 amb(vec3 c, float k){\n    return c * k;\n}\n\n//Calculate diffuse light\nvec3 diff(vec3 c, float k, vec3 p){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    return c * k * max(0.0, dot(n, l));\n}\n\n//Calculate specular light\nvec3 spec(vec3 c, float k, vec3 p, float a){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(p - camPos);\n    float facing = dot(l, n) > 0.0 ? 1.0 : 0.0;\n    vec3 r = reflect(l, n);\n    return c * k * facing * pow(max(0.0, dot(r, v)), a);\n}\n\n//Determine if a point is in shadow - 1.0 = not in shadow\nfloat shadow(vec3 ro, vec3 rd){\n    float t = 0.4;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 64; iter++){\n        d = map(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lightPos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\n//Determine a points' occlusion - 1.0 = unoccluded\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < 25; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(2.0 * occ, 0.0, 1.0);\n}\n\n//Scoping hack to enable macro enabling of shadows and AO\nfloat s = 1.0;\nfloat ao = 1.0;\n\nvec3 colour(vec3 p, float id){\n    \n    //Compute AO and Shadowing for p\n    //Global definitions of s and ao used if SHADOWS or AO are not defined. \n    \n    #ifdef SHADOWS\n    float s = shadow(p, normalize(camPos - p));\n    #endif\n    \n    #ifdef AO\n    float ao = occlusion(p, normal(p));\n    #endif\n    \n    //Colour points by their material ID\n    if(id == 1.0){\n        //Diffuse colour, specular colour, ambient constant, diffuse constant, specular constant\n        \t//shininess, shadow strength\n    \tvec3 col = vec3(1.0);\n        col = (mod(floor(p.z), 2.0) == 0.0 && mod(floor(p.x), 2.0) != 0.0) \n            \t|| (mod(floor(p.z), 2.0) != 0.0 && mod(floor(p.x), 2.0) == 0.0) ? vec3(1.0, 1.0, 1.0) : vec3(0.0, 0.0, 0.0);\n        vec3 specCol = vec3(1.0);\n        float ka = 0.5;\n        float kd = 0.9;\n        float ks = 0.3;\n        float alpha = 4.0;\n        float ss = 0.4;\n        \n        //Phong reflection model with AO and shadowing\n    \treturn amb(col, ka) * ao + diff(col, kd, p) + floor(s) * spec(specCol, ks, p, alpha) - vec3(ss - ss * s);\n    }else if(id == 2.0){\n        //Diffuse colour, specular colour, ambient constant, diffuse constant, specular constant\n        \t//shininess, shadow strength\n    \tvec3 col = vec3(1.0);\n        vec3 specCol = vec3(1.0);\n        float ka = 0.5;\n        float kd = 0.3;\n        float ks = 0.9;\n        float alpha = 64.0;\n        float ss = 0.4;\n        \n        //Phong reflection model with AO and shadowing\n    \treturn amb(col, ka) * ao + diff(col, kd, p) + floor(s) * spec(specCol, ks, p, alpha) - vec3(ss - ss * s);\n    }else if(id == 3.0){\n        //Diffuse colour, specular colour, ambient constant, diffuse constant, specular constant\n        \t//shininess, shadow strength\n    \tvec3 col = vec3((cos(iTime) + 1.0) / 2.0, 0.0, 1.0);\n        vec3 specCol = vec3(1.0);\n        float ka = 0.5;\n        float kd = 0.9;\n        float ks = 0.3;\n        float alpha = 4.0;\n        float ss = 0.4;\n        \n        //Phong reflection model with AO and shadowing\n    \treturn amb(col, ka) * ao + diff(col, kd, p) + floor(s) * spec(specCol, ks, p, alpha) - vec3(ss - ss * s);\n    }else if(id == 4.0){\n        //Diffuse colour, specular colour, ambient constant, diffuse constant, specular constant\n        \t//shininess, shadow strength\n    \tvec3 col = vec3(1.0, 1.0, 0.0);\n        vec3 specCol = vec3(1.0);\n        float ka = 0.5;\n        float kd = 0.9;\n        float ks = 0.8;\n        float alpha = 64.0;\n        float ss = 0.4;\n        \n        //Phong reflection model with AO and shadowing\n    \treturn amb(col, ka) * ao + diff(col, kd, p) + floor(s) * spec(specCol, ks, p, alpha) - vec3(ss - ss * s);\n    }\n    return vec3(0.0, 1.0, 0.0);\n} \n\n//Camera rotation values\nfloat lastx = 0.0;\nfloat lasty = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0 , 1.0, -3.0);\n    lightPos = vec3(0.0, 2.0, -2.0);\n    lastx += iMouse.x - 0.5;\n    lasty += iMouse.y - 0.5;\n    vec3 ro = camPos;\n    vec3 rd = normalize(rotY(radians(lastx)) * rotX(radians(lasty)) * vec3(uv, 1.0));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(0.0);\n    //If intersected\n    if(d > 0.0){\n        //Colour the point\n        if(closeObj == 2.0){\n            ro = c;\n            rd = normalize(c - camPos);\n        \td = traceReflect(ro, rd, 1); \n            if(d < 0.0){\n                col = vec3(0.0);\n            }else{\n            \tc = ro;\n            }\n        }\n        if(closeObj > 0.0 && d > 0.0){\n    \t\tcol = colour(c, closeObj);\n        }\n        //Apply fog\n    \tcol *= 1.0 / exp(d * 0.1);\n    }else{\n        col = vec3(0.0);\n    }\n    col = pow( col, vec3(0.4545) );\n\tfragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}