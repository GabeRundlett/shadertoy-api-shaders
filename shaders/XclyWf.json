{
    "Shader": {
        "info": {
            "date": "1725307952",
            "description": "Change the position of the mouse to change the screen",
            "flags": 0,
            "hasliked": 0,
            "id": "XclyWf",
            "likes": 0,
            "name": "Colour Saturation Lerp",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "X_man_71",
            "viewed": 69
        },
        "renderpass": [
            {
                "code": "float Lerp(float a, float b, float i)\n{\n    return a + (mod(i, 1.0) * (b - a));\n}\n\nfloat Normal(float standardDeviation, float mean, float i)\n{\n    return pow (\n        (1.0 / sqrt(6.28318531 * exp2(standardDeviation))) * 2.71828182,\n        -(exp2(i - mean) / (2.0 * exp2(standardDeviation)))\n    );\n}\n\nvec3 getNormalColour(float i)\n{\n    //'i' should be between 0 and 1\n    \n    float red = Normal(\n        0.04,\n        0.86,\n        i\n    );\n    \n    float green = Normal(\n        0.06,\n        0.76,\n        i\n    );\n    \n    \n    float blue = Normal(\n        0.14,\n        0.28,\n        i\n    );\n    \n    return vec3(red, green, blue);\n}\n\nfloat getLength(float inputValue)\n{\n    float hold = inputValue;\n    float count = 0.0;\n    \n    while (hold > 1.0)\n    {\n        hold /= 10.0;\n        count++;\n    }\n    \n    return count;\n}\n\nfloat join(float a, float b)\n{\n    return (a * pow(10.0, getLength(b))) + b;\n}\n\nfloat getLetterof(float letterIndex, float inputValue)\n{\n    float returnLetter = inputValue;\n    \n    //cut off the back-end\n    for (float i = 0.0; i < getLength(inputValue) - letterIndex; i++ )\n    {\n        returnLetter = returnLetter / 10.0;\n    }\n    returnLetter = floor(returnLetter);\n    \n    //remove any letters front-end letters\n    returnLetter = mod(returnLetter, 10.0);\n    \n    //we are left with the letter of the input that we want to return\n    return returnLetter;\n}\n\nfloat shuffle(float mainValue, float index1, float index2)\n{\n    float returnValue = join(\n        getLetterof(getLength(mainValue) - index1, mainValue),\n        getLetterof(getLength(mainValue) - index2, mainValue)\n    );\n    \n    returnValue /= 100.0;\n    \n    return returnValue;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.xy;\n    vec2 uvm = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float lerpedCoord = 0.0;\n    \n    if (mod(iTime, 14.0) > 7.0)\n    {\n        lerpedCoord = Lerp(\n            (fragCoord.x + iTime * 100.0),\n            (fragCoord.y + iTime * 100.0),\n            (fragCoord.x / fragCoord.y) + iTime\n        );\n    }\n    else\n    {\n        lerpedCoord = Lerp(\n            (fragCoord.x + iTime * 100.0),\n            (fragCoord.y + iTime * 100.0),\n            (fragCoord.y / fragCoord.x) + iTime\n        );\n    }\n        \n    \n    col = vec3(\n        shuffle(lerpedCoord, 2.0, 1.0), //r\n        shuffle(lerpedCoord, 3.0, 2.0), //g\n        shuffle(lerpedCoord, 1.0, 0.0)  //b\n    );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nvoid function(vec4 fragColor, vec2 fragCoord)\n{\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    col.x = Lerp(\n        0.0,\n        1.0,\n        fragColor.x * fragColor.y\n    );\n    \n    col.y = Lerp(\n        0.0,\n        1.0,\n        fragColor.x * fragColor.y\n    );\n    \n    col.z = Lerp(\n        0.0,\n        1.0,\n        fragColor.x / fragColor.y\n    );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}