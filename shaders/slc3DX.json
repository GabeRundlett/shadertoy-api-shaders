{
    "Shader": {
        "info": {
            "date": "1636823891",
            "description": "change the freq() function to change the waveform. make sure the two channels are dissimilar to make an interesting shape. Mouse x to zoom in",
            "flags": 12,
            "hasliked": 0,
            "id": "slc3DX",
            "likes": 37,
            "name": "Oscilloscope music",
            "published": 3,
            "tags": [
                "oscilloscope",
                "sound",
                "music",
                "audio"
            ],
            "usePreview": 1,
            "username": "incription",
            "viewed": 3136
        },
        "renderpass": [
            {
                "code": "#define SAMPLES 600.\nfloat sdSound(vec2 uv) {\n    float i;\n    float hits;\n    \n    float t = iTime;\n    vec2 f = freq(t);\n    vec2 prev;\n    float dt = iTimeDelta / SAMPLES;\n    for(i = 1.; i < SAMPLES; i++) {\n        t += dt;\n\n        prev = f;\n        f = freq(t);\n        \n        hits += min(1., 1. / (sdSegment(uv * (1. - iMouse.x / iResolution.x), prev, f) * 2500.));\n    }\n    \n    return 200. * hits/SAMPLES;\n}\n\nvec2 cube(vec2 uv) {\n    return mod((uv+.5)*8., vec2(1))-.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.000,0.000,0.000);\n    col = mix(col, vec3(0.000,0.000,0.000), 1.-length(uv));\n    col = mix(col, vec3(0.031,0.031,0.031), float(sdBox(cube(uv), vec2(.49)) <= 0.));\n    col = mix(col, vec3(0.404,0.984,0.396), sdSound(uv*3.));\n    \n    vec2 puv = fragCoord/iResolution.xy;\n    puv *= 1. - puv.yx;\n    col *= pow(puv.x*puv.y*30.,.5);\n    \n    // Output to screen\n    fragColor = vec4(col * vec3(0.000,0.667,1.000),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\n#define TAU 6.2831\n#define A4 440.\n#define A3 220.\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nfloat pitch(float i)\n{\n    //cool sfttttuuufffffffff\n    return 415. * pow(2., (i - 60.) / 12.);\n}\n\nfloat wave(float f, float a, float time)\n{\n    float w = 2. * PI * f * time;\n    //float v = pow(abs(sin(w / 2.)), 8.) - .5;\n    float v = pow(max(0., (sin(w) + 1.) / 2.), 2.) - .5;\n    return a * v;\n}\n\nfloat songFreq(float time) {\n    return A4 + A4 * floor(mod(max(0.,time*5.-1.5),5.)) + A4 * floor(mod(max(0.,time*5.-2.5),5.));\n}\n\n\nvec2 freq(float time) {\n    time *= 1.;\n    float f = A3;\n    \n    vec2 fr = vec2(wave(A3 * 2., .5, time) + wave(A4 * 4., .5, time), wave(A3*(2. + PI / 5000.), .5, time) + wave(A3*1., .5, time));\n    return fr * rotationMatrix(time * 40.) * .5;\n}\n\n//https://iquilezles.org/articles/distfunctions2d\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    return freq(time);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}