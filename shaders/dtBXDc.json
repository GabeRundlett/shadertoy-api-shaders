{
    "Shader": {
        "info": {
            "date": "1676722549",
            "description": "My (probably very stupid) implementation of mirror in raymarching.\nCore of raymarching, SDFs and skybox color taken from IQ`s [url=https://www.shadertoy.com/view/3lsSzf]Happy Jumping[/url].\nCamera is attached to mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtBXDc",
            "likes": 13,
            "name": "Raymarching mirror",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "simple",
                "mirror"
            ],
            "usePreview": 0,
            "username": "maras",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "float smin(in float a, in float b, float k) {\n    float h = max(k - abs(a-b), 0.0);\n    \n    return min(a,b) - h*h/(k*4.0);\n}\n\nfloat sdSphere(in vec3 pos, float rad) {\n    return length(pos) - rad;\n}\n\nfloat sdMirror(vec3 pos) {\n    float mirror = max(pos.x + 1.0, pos.y - 0.8);\n    mirror = max(mirror, abs(pos.z + 0.7) - 0.8);\n    mirror = max(mirror, -pos.x - 1.25);\n    \n    return mirror;\n}\n\nfloat sdFrame(vec3 pos) {\n    float frame = max(pos.x + 1.001, pos.y - 0.9);\n    frame = max(frame, abs(pos.z + 0.7) - 0.9);\n    frame = max(frame, -pos.x - 1.2499);\n    \n    return frame;\n}\n\nfloat map(in vec3 pos, bool reflected, inout float material)\n{\n    float ground = pos.y + 0.25;\n    float sphere = sdSphere(pos + vec3(-0.5, -0.2, 0.8), 0.25);\n    float sphere2 = sdSphere(pos + vec3(-0.95, -0.2, 0.8 + sin(iTime)), 0.25);\n    float mirror = sdMirror(pos);\n    float frame = max(sdFrame(pos), -mirror);\n      \n    float res;\n    \n    res = ground;\n    material = 0.0;\n    \n    float sphere_blend = smin(sphere, sphere2, 0.25);\n\n    if (sphere_blend < res) {\n        res = sphere_blend;\n        material = 1.0;\n        if (sphere2 < sphere)\n            material = 2.0;\n    }\n\n    if (!reflected && frame < res) {\n        res = frame;\n        material = 3.0;\n    }\n\n    if (!reflected && mirror < res) {\n        res = mirror;\n        material = 4.0;\n    }\n        \n    \n    return res;\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    float mat = 0.0;\n    \n    return normalize(  vec3(map(pos+e.xyy, false, mat) - map(pos-e.xyy, false, mat),\n                            map(pos+e.yxy, false, mat) - map(pos-e.yxy, false, mat),\n                            map(pos+e.yyx, false, mat) - map(pos-e.yyx, false, mat)));\n}\n\nfloat castRay (inout vec3 ro, vec3 rd, inout bool reflected, inout float material) {\n    float t = 0.0;\n    int i=0;    \n    for (; i<100; i++) {\n        float map_res = map(ro, reflected, material);\n        float h = map_res;\n        ro += h*rd;\n        \n        if (h < 0.001) {\n            if (material > 3.5) {\n                if (!reflected) {\n                    vec3 norm = calcNormal(ro - 0.001 * rd);\n                    rd = rd - 2.0 * dot(rd,norm) * norm;\n\n                    reflected = true;\n                }\n                t += h;\n                continue;\n            }\n            \n            break;\n        }\n        \n        t += h;\n        \n        if (t > 20.0) {\n            break;\n        }\n    }\n    \n    if (t > 20.0) t = -1.0;\n    \n    return t;\n}\n\nfloat castShadow (vec3 ro, vec3 rd) {\n    float t = 0.0;\n    vec3 pos = ro;\n    bool reflected = false;\n    float material = 0.0;\n    for (int i=0; i<100; i++) {\n        float map_res = map(pos, reflected, material);\n        float h = map_res;\n        pos += h*rd;\n\n        \n        if (h < 0.0001) {\n            break;\n        }\n        \n        t += h;\n        \n        if (t > 20.0) {\n            break;\n        }\n    }\n    \n    if (t > 20.0) t = -1.0;\n    \n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float an_x = 10.0*iMouse.x/iResolution.x + 1.0;//iTime;\n    float an_y = 1.0*iMouse.y/iResolution.y;\n    \n    vec3 ta = vec3(0.0, 0.25, 0.0);\n    vec3 ro = ta + vec3(1.5*sin(an_x), 1.5*sin(an_y), 1.5*cos(an_x));\n    ro *= 1.5;\n    \n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0,1,0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(vec3(p.x*uu + p.y*vv + 1.8*ww));\n    \n    vec3 col = vec3(0.4, 0.75, 1.0) - 0.7 * rd.y;\n    col = mix(col, vec3(0.7,0.75,0.8), exp(-10.0*rd.y));\n        \n    bool reflected = false;\n    \n    float material = 0.0;\n    float tp = castRay(ro, rd, reflected, material);\n    float t = tp;\n    vec3 pos = ro;\n    \n    if (t > 0.0) {\n        vec3 nor = calcNormal(pos);\n        \n        float row = floor(mod(pos.x * 2.0, 2.0));\n        float column = floor(mod(pos.z * 2.0, 2.0));\n        \n        vec3 mate = vec3(0.2);\n        if (material < 0.5 && (row < 0.5 || column < 0.5) && !(row < 0.5 && column < 0.5)) mate = vec3(0.1);\n        if (material < 1.5 && material > 0.5) mate = vec3(0.3, 0.2, 0.1);\n        if (material < 2.5 && material > 1.5) mate = vec3(0.1, 0.2, 0.3);\n        if (material < 3.5 && material > 2.5) mate = vec3(0.01);\n        \n        vec3 sun_dir = normalize(vec3(sin(iTime / 5.0), 0.4, cos(iTime / 5.0)));\n        float sun_dif = clamp(dot(nor, sun_dir), 0.0, 1.0);\n        float sun_sha = step(castShadow(pos+nor*0.001, sun_dir), -0.5);\n        float sky_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n        float bou_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, -1.0, 0.0)), 0.0, 1.0);\n        \n        col = mate*vec3(7.0, 5.0, 3.0)*sun_dif*sun_sha;\n        col += mate*vec3(0.5, 0.8, 0.9)*sky_dif;\n        col += mate*vec3(0.7, 0.3, 0.2)*bou_dif;\n    }\n        \n    col = pow(col, vec3(0.4545));\n    if (reflected) {\n        col *= 0.75;\n    }\n    \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}