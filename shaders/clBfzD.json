{
    "Shader": {
        "info": {
            "date": "1693806867",
            "description": "big thanks to sudgylacmoe's video: [url]https://youtu.be/0i3ocLhbxJ4[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "clBfzD",
            "likes": 10,
            "name": "2D PROJECTIVE GEOMETRIC ALGEBRA",
            "published": 3,
            "tags": [
                "algebra",
                "geometric",
                "projective",
                "pga"
            ],
            "usePreview": 0,
            "username": "ENDESGA",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "#define M iMouse.xy\n#define W iResolution.x\n#define H iResolution.y\n#define line vec3\n#define point vec2\n#define EPSILON 0.0001\n#define INFINITY 1e7\n#define AA( uv ) ( 0.5 * ( dFdx( uv.x ) + dFdy( uv.y ) ) )\n\n#define CYAN vec4( 0, 1, 1, 1 )\n#define MAGENTA vec4( 1, 0, 1, 1 )\n#define YELLOW vec4( 1, 1, 0, 1 )\n\n// line that joins two points\nline join( point P1, point P2 )\n{\n\treturn vec3( P1.y - P2.y, P2.x - P1.x, P1.x * P2.y - P1.y * P2.x );\n}\n\n// point that meets two lines\npoint meet( line L1, line L2 ) {\n    return point( L1.y * L2.z - L1.z * L2.y, L1.z * L2.x - L1.x * L2.z ) / ( L1.x * L2.y - L1.y * L2.x );\n}\n\n// \"distance\" between line and point\nfloat dist( line L, point P )\n{\n\treturn ( P.x * L.x + P.y * L.y );\n}\n\n// \"distance\" between point and line\nfloat dist( point P, line L )\n{\n\treturn ( dist( L, P ) + L.z ) / ( L.x * L.x + L.y * L.y );\n}\n\n// project point to line\npoint project( point P, line L )\n{\n\treturn P - ( dist( P, L ) * L.xy );\n}\n\n// project line to point\nline project( line L, point P )\n{\n\treturn line( L.xy, -( P.x * L.x + P.y * L.y ) );\n}\n\n// reflect point across line (2x projection)\npoint mirror( point P, line L )\n{\n\treturn P - ( 2. * dist( P, L ) * L.xy );\n}\n\n// reflect line across point (2x projection)\nline mirror(line L, point P) {\n    return line(L.xy, L.z - dot(L.xy, 2.0 * (P - project(P, L))));\n}\n\n\n//\n\nvec4 draw_col = vec4( 0 );\n\nvoid draw_line( in vec2 uv, in line L, in vec4 line_col )\n{\n\tfloat dist = abs( dist( L, uv ) + L.z ) / length( L.xy );\n\tfloat aa = AA( uv );\n\tdraw_col = mix( draw_col, line_col, smoothstep( aa, -aa, dist - 2. ) );\n}\n\nvoid draw_point( in vec2 uv, point P, in vec4 point_col )\n{\n\tfloat dist = length( uv - P );\n\tfloat aa = AA( uv );\n\tdraw_col = mix( draw_col, point_col, smoothstep( aa, -aa, dist - 12. ) );\n}\n\nvoid mainImage( out vec4 col, in vec2 uv )\n{\n\tpoint P11 = point( 32, 32 );\n\tpoint P12 = M;\n\tpoint P21 = point( 64, ( H / 2. ) - ( sin( iTime * 2. ) * 64. ) );\n\tpoint P22 = point( ( W / 2. ) - ( cos( iTime * 2. ) * 64. ), 64 );\n\n\tline L1 = join( P11, P12 );\n\tline L2 = join( P21, P22 );\n\n\tpoint PM1 = meet( L1, L2 );\n\tpoint PP0 = point( ( W / 2. ) + ( sin( iTime ) * 64. ), ( H - 128. ) + ( cos( iTime ) * 64. ) );\n\tpoint PP1 = project( PP0, L1 );\n\tline LP1 = mirror( L1, PP0 );\n\tline LP2 = join( PP1, P22 );\n\n\tdraw_line( uv, L1, CYAN );\n\tdraw_line( uv, L2, MAGENTA );\n\tdraw_line( uv, LP1, CYAN );\n\tdraw_line( uv, join( PP0, PP1 ), YELLOW );\n\tdraw_line( uv, LP2, MAGENTA );\n\n\tdraw_point( uv, P11, MAGENTA );\n\tdraw_point( uv, P12, CYAN );\n\tdraw_point( uv, mirror( P12, LP2 ), CYAN );\n\tdraw_point( uv, P21, MAGENTA );\n\tdraw_point( uv, P22, MAGENTA );\n\n\tdraw_point( uv, PM1, YELLOW );\n\tdraw_point( uv, PP0, YELLOW );\n\tdraw_point( uv, PP1, YELLOW );\n\n\tcol = draw_col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}