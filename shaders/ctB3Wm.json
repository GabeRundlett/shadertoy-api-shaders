{
    "Shader": {
        "info": {
            "date": "1673372550",
            "description": "Ray marching in L-inf space is faster.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctB3Wm",
            "likes": 35,
            "name": "L-inf raymarching",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "linf"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 540
        },
        "renderpass": [
            {
                "code": "const int it = 18; //transform iterations\nconst float eps = 0.001; //amout of detail\n#define LINF 1\n#define PI 3.141592653\nfloat linf(in vec3 rd) { //project direction onto cube\n\tvec3 k = -vec3(1.0)/abs(rd);\n\treturn -max(max(k.x, k.y), k.z);\n}\nvec3 transform(in vec3 p) {\n    //the fractal\n    float d = 100000.;\n    int i;\n    for (i = 0; i < it; i += 1) {\n        p = abs(p);\n        p *= 2.0;\n        p -= vec3(1);\n        p.xy = vec2(abs(1.-max(p.x, -p.y)), (min(p.x, -p.y)))+vec2(0.75, 0.45);\n        p.y = abs(p.y);\n        p.yz = vec2(min(p.y, -p.z), max(p.y, -p.z))-vec2(1.0, 0.5);\n        p.xz = vec2(min(p.x, p.z), max(p.x, p.z))-0.9;\n    }\n    return p;\n}\nvec3 color(in vec3 p) {\n    //the fractal\n    float d = 100000.;\n    int i;\n    vec3 v = vec3(0);\n    float ao = 0.0;\n    float v1 = 0.0;\n    for (i = 0; i < 12; i += 1) {\n        p = abs(p);\n        p *= 2.0;\n        p -= vec3(1);\n        p.xy = vec2(abs(1.-max(p.x, -p.y)), (min(p.x, -p.y)))+vec2(0.75, 0.45);\n        p.y = abs(p.y);\n        p.yz = vec2(min(p.y, -p.z), max(p.y, -p.z))-vec2(1.0, 0.5);\n        p.xz = vec2(min(p.x, p.z), max(p.x, p.z))-0.9;\n        ao += length(p);\n        v1 += dot(p, p);\n    }\n    v = p;\n    vec3 color = vec3(1);\n    if (1.8+v.y > 0.0) color = vec3(0.5, 1.0, 0.5);\n    if (0.6+v.x > 0.0) color = vec3(0, 1, 0.5);\n    if (-0.8+v.z > 0.0) color = vec3(0.1, 0.1, 1);\n    //if (ao > 8.0) color = vec3(0);\n    return vec3(color*(v1-20.0)*0.05);//vec3(color*(1.-3.0/(ao-12.0))*1.0);//vec3(color*(1.-12./ao)*3.0);//color*vec3(1.0-0.13*(ao-4.0))*2.0;\n}\nfloat sdf(in vec3 p) {\n    p = abs(transform(p))-1.0;\n    #if LINF\n\treturn ((max(max(p.x, p.y), p.z)))*pow(2., -float(it)); //linf distance to box\n    #else\n    return min(max(p.x,max(p.y,p.z)),0.0) + length(max(p,0.0))*pow(2., -float(it)); //euclidean dis\n    #endif\n}\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    float d0 = 0.0;\n    int i;\n    float m = linf(rd);\n    for (i = 0; i < 1000; i += 1) {\n        #if LINF\n        float d = sdf(ro+rd*d0)*m;\n        #else\n        float d = sdf(ro+rd*d0);\n        #endif\n        d0 += d;\n        if (d < d0*eps || d0 > 100.) break;\n    }\n    if (d0 > 100.) return vec3(0); //no hit\n    return mix(color(ro+rd*d0)/(float(i+1)*0.1), vec3(0), 1.-exp(-d0*5.0));//mix(5.0/(vec3(i)+2.0), vec3(1, 0.5, 0), 1.-exp(-d0)); //hit\n}\n#define AA 0\n#if AA\nconst float a = 1./pow(float(AA)*2.+1., 2.);\nconst float a1 = 1./(float(AA)*2.+1.);\n#endif\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    #if AA\n    for (int x = -AA; x <= AA; x += 1) {\n        for (int y = -AA; y <= AA; y += 1) {\n            vec2 uv = ((vec2(x,y)*a1+fragCoord.xy)/iResolution.xy)-0.5;\n    #else\n    vec2 uv = ((fragCoord.xy)/iResolution.xy)-0.5;\n    #endif\n            uv.x *= iResolution.x/iResolution.y;\n            uv.y = -uv.y;\n            vec2 m = iMouse.z>0.0?((iMouse.xy)/iResolution.xy)*vec2(PI*2., PI):vec2(iTime*0.125, 2.0+sin(iTime*0.25)*0.5);\n            vec3 ro = vec3(sin(m.y)*cos(-m.x),sin(m.y)*sin(-m.x),cos(m.y))*0.05;\n            vec3 rd = -normalize(ro);\n            vec3 u = vec3(normalize(vec2(rd.y, -rd.x)), 0);\n            vec3 v = cross(u, rd);\n            rd = normalize(1.0*rd+u*uv.x+v*uv.y);\n            ro -= vec3(-0.6625000371078297,1.6874999810014544,0.4951437083081428);\n            fragColor += vec4(getColor(ro, rd), 1);\n   #if AA\n        }\n    }\n    fragColor *= a;\n    #endif\n    fragColor = 1.-exp(-fragColor*3.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}