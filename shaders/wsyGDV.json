{
    "Shader": {
        "info": {
            "date": "1571048727",
            "description": "Random check board",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyGDV",
            "likes": 1,
            "name": "Monitor Hill Random",
            "published": 3,
            "tags": [
                "random"
            ],
            "usePreview": 0,
            "username": "mmichal",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "const int DIRECTION = 1; // 1, 2, 3, 4;\nconst bool COLOR = true;\n\n\n\n// Random Generators:\nfloat nrand( vec2 n ){\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat N21_1( vec2 n ){\n\tfloat t = fract( n.y*n.x*0.322001 );\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\treturn nrnd0;\n}\n\nfloat N21_2( vec2 n ){\n\tfloat t = fract( n.y*0.24023 );\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\tfloat nrnd1 = nrand( n + 0.11*t );\n\treturn (nrnd0+nrnd1) / 2.0;\n}\n\nfloat N21_3( vec2 n ){\n\tfloat t = fract( tan(n.x*.0321) );\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\tfloat nrnd1 = nrand( n + 0.11*t );\n\tfloat nrnd2 = nrand( n + 0.13*t );\n\treturn (nrnd0+nrnd1+nrnd2) / 3.0;\n}\n\nfloat N21_4(vec2 p){\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float scale = 200.0;   // 10 \"pix\" blocks in x axis in respect to screen resolution\n    float speed = 10.0;   // 10 s to pass screen x resolution\n    \n    speed = 1.0/speed;\n    vec2 uv = (fragCoord -0.5*iResolution.xy)/iResolution.x; // iResolution.y makes uv*scale fit y coord\n    vec3 col = vec3(1.0, 0.0, 0.0);\n\n\n    uv *= scale; //repeat uv\n    float move = iTime*(speed*scale);\n\n    // Direction:\n    if(DIRECTION == 1){ uv.x += move;}\n    else if(DIRECTION == 2){ uv.x -= move; }\n    else if(DIRECTION == 3){ uv.y += move; }\n    else if(DIRECTION == 4){ uv.y -= move; }\n    else{ fragColor = vec4(col, 1.);}\n\n    // Grid and id:\n    vec2 gv = fract(uv) - 0.5; // grid uv - center in the middle\n    vec2 id = floor(uv); // identifier for each cell\n\n    // Color:\n    if(COLOR){\n        float n_r = N21_1(id*0.17); // return \"random\" number for each cell (0-1)\n        float n_g = N21_4(id*.042);\n        float n_b = N21_2(id*.0342);\n    \tcol = vec3(n_r, n_g, n_b);\n    } else {\n        float n_r = N21_1(id);\n        col = vec3(n_r, n_r, n_r);\n    }\n\n    // if (gv.x >.40 || gv.y >.40) {col = vec3(1.0, 0, 0);} // draw the outline of the box\n    fragColor = vec4(col, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}