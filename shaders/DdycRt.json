{
    "Shader": {
        "info": {
            "date": "1696427342",
            "description": "I was thinking about how odometers and similar counters have each drum rotating exponentially faster than the next (or slower, depending on which end you're looking from). I thought, what if instead of having discrete drums rotating, it was continuous?",
            "flags": 0,
            "hasliked": 0,
            "id": "DdycRt",
            "likes": 2,
            "name": "Exponential Fractal Rain",
            "published": 3,
            "tags": [
                "rain",
                "fractalnoise"
            ],
            "usePreview": 0,
            "username": "Retr0id",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "float hash(float x)\n{\n\treturn fract(sin(cos(x*12.13)*19.123)*17.321);\n}\n\n\nfloat noise(vec2 p)\n{\n\tvec2 pm = mod(p,1.0);\n\tvec2 pd = p-pm;\n\tfloat v0=hash(pd.x+pd.y*41.0);\n\tfloat v1=hash(pd.x+1.0+pd.y*41.0);\n\tfloat v2=hash(pd.x+pd.y*41.0+41.0);\n\tfloat v3=hash(pd.x+pd.y*41.0+42.0);\n\tv0 = mix(v0,v1,smoothstep(0.0,1.0,pm.x));\n\tv2 = mix(v2,v3,smoothstep(0.0,1.0,pm.x));\n\treturn mix(v0,v2,smoothstep(0.0,1.0,pm.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float shift = ((1.0 - uv.x) * 12.0);\n\n    // Time varying pixel color\n    //float v = mod((iTime / pow(2.0, shift)) + uv.y + hash(uv.x)+hash(uv.x*3.0)+hash(uv.x*69.0), 1.0) > 0.5 ? 0.0 : 1.0;\n    //v = mod(v+hash(uv.x)+hash(uv.x*3.0)+hash(uv.x*69.0), 1.0);\n    float col = mod((iTime / exp2(shift) * 16.0) + uv.y, 1.0);\n\n    // fractal noise yoinked from https://www.shadertoy.com/view/Msf3Wr by mu6k\n    float v =0.0;\n    float octaves = 24.0;\n    for (float i = 0.0; i<octaves; i+=1.0)\n\t{\n\t\tfloat t = i;\n\t\tfloat l = t;\n\t\tfloat e = exp2(t);\n\t\tv+=noise(vec2(uv.x, mod(uv.y+col+hash(uv.x)+hash(uv.x*3.0)+hash(uv.x*69.0), 1.0))*e+vec2(cos(l)*53.0,sin(l)*100.0))*(1.0-(t/octaves))*(t/octaves);\n\t\t\n\t}\n\t\n\tv-=0.5;\n    v *= 0.5;\n\n    // Output to screen\n    //fragColor = vec4((uv.y > 0.498 && uv.y < 0.502) ? vec3(0.0) : vec3(v),1.0);\n    fragColor = vec4(vec3(v)*vec3(0.3, 1.0, 0.3), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}