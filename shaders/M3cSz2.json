{
    "Shader": {
        "info": {
            "date": "1719324043",
            "description": "A Kaleidoscopic Iterated Functions System approach to generating the menger sponge rendered with raymarching. Change the MENGER_SPONGE_ROUNDESS at line 11 to get a crisper menger sponge.",
            "flags": 0,
            "hasliked": 0,
            "id": "M3cSz2",
            "likes": 2,
            "name": "Raymarched menger sponge",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "ifs",
                "kifs",
                "iterative",
                "3dfractal",
                "mengersponge",
                "fractal3d"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "#define MAX_ITERATIONS 1000\n\n#define MAX_DISTANCE 10000.\n#define MIN_DISTANCE .001\n\n#define SUN_DIR normalize(vec3(3.,7.,4.))\n\n#define METALLIC 1.\n#define SMOOTHNESS 0.\n\n#define MENGER_SPONGE_ROUNDNESS .005\n\nfloat scene(vec3 ro) {\n    vec3 o = vec3(-1.);\n\n    float scale = 1.;\n    for (int i = 0; i < 15; i++) {\n        ro *= 3.;\n        scale *= 3.;\n        ro -= 1.;\n\n        ro = abs(ro-o)+o;\n        fold(o, vec3(0., 1., -1.), ro);\n        fold(o, vec3(-1., 1., 0.), ro);\n        fold(o+vec3(0.,.5,0.), vec3(0.,-1.,0.), ro);\n    }\n    \n    return sdfSphere(ro, 0.5)/scale-MENGER_SPONGE_ROUNDNESS;\n}\n\nvec3 sdfNormal(vec3 ro) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*scene( ro + k.xyy*h ) + \n                      k.yyx*scene( ro + k.yyx*h ) + \n                      k.yxy*scene( ro + k.yxy*h ) + \n                      k.xxx*scene( ro + k.xxx*h ) );\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    vec3 col = texture(iChannel0, rd).rgb;\n    \n    float t = 0.;\n    for (int i = 0; i < MAX_ITERATIONS; i++) {\n        vec3 p = ro + rd*t;\n        float dist = scene(p);\n        \n        if (dist <= MIN_DISTANCE) {\n            vec3 normal = sdfNormal(p);\n            float light = max(dot(normal, SUN_DIR),0.1);\n            vec3 diffuse = vec3(1.,.4,.7);\n            \n            vec3 r = reflect(rd, normal);\n            vec3 specularCrisp = texture(iChannel0,r).rgb;\n            vec3 specularBlurred = texture(iChannel1,r).rgb;\n            vec3 specular = mix(specularBlurred, specularCrisp, SMOOTHNESS);\n            \n            float fresnelFactor = max(pow(1.-dot(normal,r),5.),0.03);\n            vec3 fresnel = specular*fresnelFactor;\n            \n            col = mix(diffuse*light + fresnel*SMOOTHNESS, diffuse*specular, METALLIC);\n            \n            break;\n        }\n        if (dist >= MAX_DISTANCE) {\n            break;\n        }\n        \n        t += dist;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec2 m = (iMouse.xy-iResolution.xy/2.)/iResolution.y;\n\n    vec3 ro = vec3(0,0,2);\n    ro = rot3D(ro,-m.y*4.,-m.x*4.);\n    vec3 rd = getRayDir(ro,vec3(0),uv,45.);\n    \n    vec3 col = render(ro, rd);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 getRayDir(vec3 ro, vec3 wo, vec2 uv, float FOV) {\n    float t = tan(FOV*3.14159/180.);\n    vec3 f = normalize(wo-ro),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        rd = f+r*uv.x*t+u*uv.y*t;\n    return normalize(rd);\n}\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(\n        c,-s,\n        s,c\n    );\n}\nvec3 rot3D(vec3 p, float pitch, float yaw) {\n    p.zy *= rot2D(pitch);\n    p.xz *= rot2D(yaw);\n    return p;\n}\nvoid fold(vec3 o, vec3 n, inout vec3 ro) {\n    n = normalize(n);\n    float d = dot(ro-o, n);\n    ro -= 2.*n*max(d,0.);\n}\n\n//SDF's\nfloat sdfSphere(vec3 ro, float r) {\n    return length(ro)-r;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}