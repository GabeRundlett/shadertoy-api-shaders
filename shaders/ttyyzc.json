{
    "Shader": {
        "info": {
            "date": "1611430288",
            "description": "Adaption of a bezier curve shader by https://www.shadertoy.com/user/oneshade concatinating three splines and adding whispy colory things through voronoi noise by https://www.shadertoy.com/view/Xd23Dh",
            "flags": 0,
            "hasliked": 0,
            "id": "ttyyzc",
            "likes": 3,
            "name": "Dancing Bezier Whisps ðŸ”Š",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "bezier",
                "color",
                "curve",
                "trippy",
                "plot",
                "para",
                "glowmetric"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "#define SAMPLE_POINT_LOW vec2 (0.09, 0.2)\n#define SAMPLE_POINT_MID vec2 (0.3, 0.1)\n#define SAMPLE_POINT_HIGH vec2 (0.8, 0.2)\n\n#define SOUND_IN\n\n#ifdef SOUND_IN\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n#endif\n\nfloat sampleMusic(vec2 p) {\n    return normalize (texture (iChannel0, p)).r;\n}\n\nfloat getBass () {\n    return sampleMusic(SAMPLE_POINT_LOW);   \n}\n\nfloat getMids() {\n    return sampleMusic(SAMPLE_POINT_MID);\n}\n\nfloat getTreble () {\n    return sampleMusic(SAMPLE_POINT_HIGH);   \n}\n\n// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0))\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = InvGold * sin(iTime) * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nvec2 Bezier(in vec2 a, in vec2 b, in vec2 c, in vec2 d, in float t) {\n    float tInv = 1.0 - t;\n    return a * tInv * tInv * tInv +\n           b * Pi * t * tInv * tInv +\n           c * Pi * tInv * t * t +\n           d * t * t * t;\n}\n\nvec3 DrawSnake(vec2 uv, vec3 color, vec2 pts[4], float size, float time, float beat) {\n    vec2 positionBuffer = pts[0];\n    float stepSize = 1.0 / 12.;\n    \n    for (float t=stepSize; t < (1.0 + stepSize); t += stepSize) {\n        vec2 p = Bezier(pts[0],pts[1], pts[2], pts[3], t);\n        color = max(color, mix(\n            color,\n            hue2rgb(time + t),\n            smoothstep(size, 0.0, sdLine(uv, positionBuffer, p))\n        ));\n        color = max(\n            color, \n            mix(color,\n                vec3(0.1), \n                1.-10.*abs(sin(time + t)*2.*beat)*smoothstep(size, 0.0, sdLine(uv, positionBuffer, p))\n            )\n        );\n        positionBuffer = p;\n    }\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    #ifdef SOUND_IN\n    // Overlay by FabriceNeyret2 https://www.shadertoy.com/view/MtyXRW\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n    #endif\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 vp = 0.8*(2.*getBass()+1.*getTreble())*cos(3.*vec2(1.0,0.5) );\n\tfloat f = 2.-1./voronoise( 24.0*uv, vp.x, vp.y );\n    vec3 color = f*getTreble()*1.5*vec3(Silver, Silver, DimGold);\n\n    float t1 = 0.5 * iTime, t2 = iTime, t3 = 1.25 * iTime;\n    float c1 = cos(t1), s1 = sin(t1)+.5*cos(t1-Pi);\n    float c2 = cos(t2), s2 = sin(t2 - 2.*Pi);\n    float c3 = cos(t3), s3 = sin(t3)-DimGold*cos(t3-Pi);\n\n    vec2 p[4];    \n    vec2 uvW = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float pointSize = 96.0 / iResolution.y;\n    \n    vec2 b = p[0] = vec2(s3 * 1.0, s2 * 1.0);\n    p[1] = vec2(c1, c2) * 3. * getTreble();\n    p[2] = vec2(c3 * 3.0, c2 * 1.0) * 2. * getTreble();\n    p[3] = vec2(s2 * 1.0, s1 * 1.0);   \n    color = DrawSnake(uvW, color, p, .5*pointSize, iTime, getTreble ());\n    \n    p[3] = p[3];//vec2(c2, s1);   \n    p[0] = vec2(c1, s2) - vec2(+1.);\n    p[1] = vec2(s3, c2) * 3. * getBass();\n    p[2] = vec2(c3, s2) * -2. * (getMids() + getTreble());\n    color = DrawSnake(uvW, color, p, pointSize, iTime, getMids());\n    \n    p[0] = p[0];//vec2(c1, s2) - vec2(+1.);\n    p[1] = vec2(s1, c2) * 3. * getBass();\n    p[2] = vec2(s2 * -2. * (getMids() + getTreble()), s1);\n    p[3] = b;//vec2(c2, s1);   \n    color = DrawSnake(uvW, color, p, DimGold*pointSize, iTime, getBass());\n    \n    color *= GetVignetteMask(uv, 16., 1.99);\n    \n    fragColor = vec4(color, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float Pi = 355.0 / 113.0; // Thx Zu Chongzhi.\nconst float PiHalf = Pi / 2.0;\nconst float TwoPi = 2. * Pi;\nconst float Gold = (1.+sqrt(5.))/2.;\nconst float InvGold = 1./Gold;\nconst float DimGold  = InvGold*InvGold;\nconst float Silver = DimGold*DimGold;\nconst vec3 LUMA = vec3((1.-0.618)*0.6, 0.618, (1.-0.618)*0.4);\n\nfloat GetScaledTime(float rawTime) {\n    return rawTime*Pi;\n}\n\n// https://www.shadertoy.com/view/lsKSWR\nfloat GetVignetteMask(vec2 uv, float intensity, float extend) {\n    uv = uv * (1.0 - uv);\n    float mask = uv.x*uv.y * intensity;\n    return pow(mask, extend);\n}\n\nfloat getLuminance(vec3 rgb) {\n  return rgb.r * LUMA.r + rgb.g * LUMA.g + rgb.b * LUMA.b;\n}\n\n// Trig functions positive normalized.\n// Checkout https://www.desmos.com/calculator/tkqvncozq4 for a visualization of the approach.\n\nfloat psin(float x) {\n    return .5 * sin(x - PiHalf) + .5;\n}\nvec3 psin(vec3 x) {\n    return vec3(psin(x.r), psin(x.g), psin(x.b));\n}\n\nfloat pcos(float x) {\n    return .5 * sin(x) + .5;\n}\nvec3 pcos(vec3 x) {\n    return vec3(pcos(x.r), pcos(x.g), pcos(x.b));\n}\n\nfloat ptan(float x) {\n    return .87 * tan(x - Pi/2.3) + .5;\n}\nvec3 ptan(vec3 x) {\n    return vec3(ptan(x.r), ptan(x.g), ptan(x.b));\n}\n\n// Voronoi pattern from https://www.shadertoy.com/view/Xd23Dh\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat voronoise( in vec2 p, float u, float v )\n{\n\tfloat k = 1.0+63.0*pow(1.0-v,6.0);\n\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n\tvec2 a = vec2(0.0,0.0);\n    for( int y=-2; y<=2; y++ )\n    for( int x=-2; x<=2; x++ )\n    {\n        vec2  g = vec2( x, y );\n\t\tvec3  o = hash3( i + g )*vec3(u,u,1.0);\n\t\tvec2  d = g - f + o.xy;\n\t\tfloat w = pow( 1.0-smoothstep(0.0,1.414,length(d)), k );\n\t\ta += vec2(o.z*w,w);\n    }\n\t\n    return a.x/a.y;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}