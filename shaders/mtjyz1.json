{
    "Shader": {
        "info": {
            "date": "1691496963",
            "description": "CC0: Quick hack on the train\nTravelling on the train I tried to recreate some twitter art\nUnoptimized, hackish and so on but good enough for the train\n\nThe tweet inspiring me: https://twitter.com/SnowEsamosc/status/1688731167451947008\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mtjyz1",
            "likes": 33,
            "name": "CC0: Quick hack on the train",
            "published": 3,
            "tags": [
                "2d",
                "train"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 449
        },
        "renderpass": [
            {
                "code": "// CC0: Quick hack on the train\n// Travelling on the train I tried to recreate some twitter art\n// Unoptimized, hackish and so on but good enough for the train\n\n// The tweet inspiring me: https://twitter.com/SnowEsamosc/status/1688731167451947008\n\nconst float zoom = log2(1.8);\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\n#define REV(x)      exp2((x)*zoom)\n#define FWD(x)      (log2(x)/zoom)\n\nvec3 effect(vec2 op, vec2 opp) {\n  float aa = 4.0/RESOLUTION.y;\n  const float angle = TAU/10.0; \n  const mat2 rot = ROT(0.5*angle);\n  vec3 col = vec3(0.0);\n  \n  op *= ROT(0.125*TIME);\n  float od = 1E4;\n  \n  for (int j = 0; j < 2; ++j){\n    float tm = TIME+float(j)*0.5;\n    float ctm = floor(tm);\n    float ftm = fract(tm);\n    float z = REV(ftm);\n    vec2 p = op;\n    p /= z;\n  \n    float d = 1E4;\n    float n = floor(FWD(length(p)));\n    float r0 = REV(n);\n    float r1 = REV(n+1.0);\n    \n    for (int i = 0; i < 2; ++i) {\n      vec2 pp = toPolar(p);\n      mod1(pp.y, angle);\n      vec2 rp = toRect(pp);\n      \n      float d0 = circle(rp, r0);\n      float d1 = circle(rp, r1);\n      float d2 = segment(rp, rot*vec2(r0, 0.0), vec2(r1, 0.0));\n      float d3 = segment(rp, transpose(rot)*vec2(r0, 0.0), vec2(r1, 0.0));\n      d0 = abs(d0);\n      d1 = abs(d1);\n      d = min(d, d0);\n      d = min(d, d1);\n      d = min(d, d2);\n      d = min(d, d3);\n      float gd = d*z;\n      vec3 gcol = (1.0+cos(0.5*vec3(0.0, 1.0, 2.0)+op.x*op.y+op.x+TIME+1.6*float(i+j)));\n      col += gcol*0.02/(gd+0.0001);\n      p *= rot;\n    }\n    d *= z;\n    od = min(od, d);\n  }\n  od -= aa*0.66;\n  col = min(col, 1.0);\n  col = mix(col, vec3(0.5), smoothstep(0.0, -aa, od));\n  col = 1.0-col;\n  col *= smoothstep(0.025, 0.25, length(op));\n  col += ((1.0+cos(vec3(0.0, 1.0, 2.0)+TIME))*0.05/(dot(op, op)+0.075));\n  col *= smoothstep(1.5, 0.5, length(opp));\n  col = sqrt(col);\n  return col;  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}