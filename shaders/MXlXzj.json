{
    "Shader": {
        "info": {
            "date": "1709739113",
            "description": "triplanar method generating a fake normal maps",
            "flags": 0,
            "hasliked": 0,
            "id": "MXlXzj",
            "likes": 2,
            "name": "normalmap24",
            "published": 3,
            "tags": [
                "normalmap"
            ],
            "usePreview": 1,
            "username": "yyf1994",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "// Fork of \"normalmap23\" by edwardbraed. https://shadertoy.com/view/tlccz7\n// 2024-03-06 15:31:27\n\n#define gray(rgb) (rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114)\n\nvec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float s = 1.5;\n    vec2 a = calcAspect(iResolution.xy);\n    vec2 uv = fragCoord/iResolution.xy * s * a;\n    \n    float p = 64.0; // power\n    \n    // It is more correct to take the resolution of the original texture\n    vec2 ts = (1.0 / iResolution.xy); // texel step\n    \n    vec3 t1 = texture(iChannel0, uv + vec2( 1.0,  0.0) * ts).xyz;\n    vec3 t2 = texture(iChannel0, uv + vec2(-1.0,  0.0) * ts).xyz;\n    vec3 t3 = texture(iChannel0, uv + vec2( 0.0,  1.0) * ts).xyz;\n    vec3 t4 = texture(iChannel0, uv + vec2( 0.0, -1.0) * ts).xyz;\n    \n    float b1 = 0.5 + gray(vec3(t1 * p - t2 * p)); // left bevel\n    float b2 = 0.5 + gray(vec3(t3 * p - t4 * p)); // top  bevel\n    \n    vec3 r = (1.0 - b1) * vec3( 1.0,  0.0, 1.0); // triplanar multiply\n    vec3 l =        b1  * vec3(-1.0,  0.0, 1.0);\n    vec3 t = (1.0 - b2) * vec3( 0.0,  1.0, 1.0);\n    vec3 d =        b2  * vec3( 0.0, -1.0, 1.0);\n    \n    vec3 n = normalize(r + l + t + d); // result normal\n    \n    vec3 color = n * 0.5 + 0.5;\n    \n    if(uv.x > s * 0.5)\n    {\n        float t = iTime * 0.6;\n        vec2 rot = vec2(sin(t), cos(t));\n        vec3 ld = vec3(rot, 0.2); // light direction\n        float ad = 0.1 + dot(ld, n); // ambient + diffuse\n        color = vec3(ad);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}