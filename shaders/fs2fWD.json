{
    "Shader": {
        "info": {
            "date": "1646325355",
            "description": "click to move\n\ncouldnt think of how to color so botched some glow by reducing MAX_STEPS\n\n(removed glow because it looked weird from below)",
            "flags": 0,
            "hasliked": 0,
            "id": "fs2fWD",
            "likes": 11,
            "name": "Fractal Bracelet",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 0.01, 2.2);\n\n    if (iMouse.z > 0.) {     \n        ro.yz *= Rot(-m.y*3.14+1.);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else ro.y += 0.3 * cos(0.8 * iTime);\n          \n    \n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n   \n    float a = atan(p.x, p.z);\n    float r = length(p.xz);\n    \n    float sc = 3. / pi;\n    // polar\n    \n    //float d = length(vec3(abs(uv.x * r) - 0.25, abs(sc * p.y) - 0.25, 0.)) - 0.2;\n    \n    vec2 uv = sc * vec2(a - 0.25 * iTime, p.y);\n    uv.x = (fract(uv.x) - 0.5) * r;\n    \n    float d = 10.;\n    float m = 0.25;\n    float n = 6.;\n    for (float i = 0.; i < n; i++) {\n        float io = 2. * pi * i / n;\n        d = min(d, dlength(uv) - m);\n        uv = abs(uv) - m;\n        m *= 0.6;// * (0.5 + 0.5 * thc(5., 3. * a + iTime));// + 0.15 * cos(io + iTime);\n        \n    }\n    d = min(d, dlength(uv) - m);\n   // d = length(uv) - m;\n    \n  //  d = max(length(p) - 1.8, d);\n    \n    // main cylinder\n    float d2 = abs(length(p.xz) - 1.) - 0.03;\n    \n    // 2 cylinders on top + bottom\n    float d3 = d2;\n     \n    p.y += 0.05 * cos(3. * a + iTime);\n    float h = 0.35 * pow(abs(cos(0.5 * a + 0.5 * iTime)), 4.);\n    d2 = max(d2, abs(p.y) - h);\n   \n    float h2 = 0.02;\n    d3 = max(d3, abs(abs(p.y) - h - 0.5 * h2) - h2);\n\n    // cut out fractal from main cylinder\n    d2 = -min(-d2, d);\n    \n    d2 = min(d2, d3);\n\n   // d2 = length(p.xz) - 0.8;\n\n    return 0.8 * d2;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    float a = 0.5 * pi * uv.x + 0.18 * iTime;\n    //ro = 2.7 * vec3(cos(a),0,sin(a));\n\n    float zm = mix(1.2, 4., 0.5 + 0.5 * thc(5., 0. * pi * uv.x + 0.5 * iTime));\n    zm = 1.2;\n\n    vec3 rd = GetRayDir(uv, ro, vec3(0), zm);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = -1.;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        vec3 pIn = p + 1000. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, 1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        float v = exp(-0.85 * pow(abs(p.y), 0.25));\n        \n        float fresnel = pow(1. + dot(p, n), 5.);\n        \n        // idk what this does\n        v = smoothstep(0., 1., v);\n        v = clamp(1.5 * v * v, 0., 1.);\n      \n        // color + lighten\n        vec3 e = vec3(1);\n        col = v * pal(0.32 + v, 0.8 * e, 0.5 * e, 0.5 * e, 0.8 * vec3(0,1,2)/3.); \n        //col = clamp(col, 0., 1.);\n       \n        col *= dif;\n        col += 0.08 * n.y;\n         col = smoothstep(0., 1., col);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    col += 0.15;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+0.00005)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat dlength(vec2 uv) {\n    return abs(uv.x) + abs(uv.y);\n}\n\nfloat dlength(vec3 uv) {\n    return abs(uv.x) + abs(uv.y) + abs(uv.z);\n}\n\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}