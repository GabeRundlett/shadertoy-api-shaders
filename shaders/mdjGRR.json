{
    "Shader": {
        "info": {
            "date": "1667172375",
            "description": "Take a little break and relax with cells marching into darkness...\nPlayaround with CELL_SIZE, CELL_WIBBLE and other params to see various results.",
            "flags": 64,
            "hasliked": 0,
            "id": "mdjGRR",
            "likes": 4,
            "name": "March of Cells",
            "published": 3,
            "tags": [
                "cells",
                "2draymarching"
            ],
            "usePreview": 0,
            "username": "propagant",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// March of cells shader by Matej Vanco, October 2022.\n// In memory of Ryan Karazija, Low Roar.\n\n// Public defines\n#define ITER 32\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n\n#define CONTROL_LIGHT false\n\n#define CELL_SIZE 1.5\n#define CELL_WIBBLE 1.0\n#define CELL_FLOW_SPEED 1.0\n#define CELL_COUNT 25.\n\t\n// Light structure (for multiple lights)\nstruct light\n{\n\tvec2 p;  // pos\n\tfloat i; // intens+attenuation\n\tvec3 c;  // color\n};\n\t \n#define LINTENS(x, y, lp, uv) (x / pow(length(lp - uv), y))\n\t\n#define Hash1(n) (fract(sin(n) * 43758.5453123))\n\n#define GEN(uv, a) (vec2(uv.x * cos(a) - uv.y * sin(a), uv.y * cos(a) + uv.x * sin(a)))\n\n// Scene content\nfloat generic(vec2 p)\n{\n\tfloat f = 1.;\n    // Angular 'sweeping' + the X 'wibble' effect\n    p.x = p.x + (sin((p.x * 48.) + (iTime * 0.025)) * (0.01 * CELL_WIBBLE)) + (p.y * sin(iTime * 0.15));\n    // A little offset\n\tp.x += 0.25;\n    // The Y 'wibble' effect - creates a \"cell-like-movement\"\n\tp.y = p.y + cos((p.y * 10.) + (iTime * 0.125)) * (0.085 * CELL_WIBBLE);\n    \n\tfor(float i = 1.; i < CELL_COUNT; i++)\n\t{\t\n        // Cells generation (base is a simple sphere formula)\n\t\tvec2 cp = GEN(vec2(p.x - (0.08 * (i * Hash1(i * 1.5))), p.y + sin(iTime * 0.4) * 0.001), iTime * (i * (0.05 * CELL_FLOW_SPEED)));\n\t\tf = min(f, length(p - cp) - (0.005 * CELL_SIZE));\n\t}\n\n\treturn f;\t\n}\n\n// Traditional raymarching algorithm\nfloat march(in vec2 o, in vec2 d)\n{\n\tfloat t = 0.;\n\tfor(int i = 0; i < ITER; i++)\n\t{\n\t\tvec2 cp = o + (d * t);\n\t\tfloat g = generic(cp);\n\t\tt += g;\n\t\tif(g < MIN_DIST || t > MAX_DIST) break;\n\t}\n\t\n\treturn t;\n}\n\n// Low-visible soft shadows\nfloat shading(in vec2 p, in light l)\n{\n\tvec2 ld = normalize(l.p - p);\n\t\n\tfloat r = 1.0;\n\tfloat t = 0.01;\n\tfloat d = length(l.p - p);\n\t// Soft shadows - low 8-tish iteration\n\tfor(int i = 0; i < 8; i++)\n\t{\n\t\tvec2 pp = p + (ld * 0.0025);\n\t\tfloat s = march(pp, ld);\n        // Shadow softness calc\n\t\tr = min(r, 5.0 * s / t);\n\t\tt += s;\n\t\tif(t < 0.0 || s > 1.0) \n\t\t\tbreak;\n\t\tif(t * 0.55 >= d) break;\n\t}\n\n\treturn r ;\n}\n\n// Build a light source (call this for multiple lights)\nvec3 bLight(in light l, in vec2 o)\n{\n\treturn l.c * shading(o, l) * l.i;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - (0.5 * iResolution.xy)) / iResolution.y;\n    \n    // Lights\n    vec2 l1p = CONTROL_LIGHT ? (iMouse.xy - (0.5 * iResolution.xy)) / iResolution.y : vec2(0.0, sin(iTime * 0.55) * 0.35);\n\tlight l1 = light(l1p, LINTENS(0.09, 1.0, l1p, uv), vec3(0.4, 0.4, 0.8));\n\t\n    // Blinking effect\n\tfloat eff = 0.5 + abs(sin(iTime * Hash1(iTime)) * 0.25);\n    // Scene setup\n\tfloat lDiff = shading(uv, l1);\n\tvec3 fcol = bLight(l1, uv);\n\t\n    // Final mix\n\tfcol = mix(fcol, l1.c * lDiff, smoothstep(1. / iResolution.y, 0.0, generic(uv))) * eff;\n\t\n    fragColor = vec4(fcol, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 30017,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/dsdsdeferadasdasdsadsada/low-roar-give-up"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}