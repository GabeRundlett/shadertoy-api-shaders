{
    "Shader": {
        "info": {
            "date": "1429961026",
            "description": "The supermassive gravity is bending the light. I made them glow so that it's not boring. You can undefine glow if you want. Rotate with mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lj3zG",
            "likes": 25,
            "name": "Singularity",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "glow",
                "distorsion",
                "gravity"
            ],
            "usePreview": 0,
            "username": "mu6k",
            "viewed": 2208
        },
        "renderpass": [
            {
                "code": "/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.*/\n\n#define glow\n\n#define time iTime\n\nvoid angularRepeat(const float a, inout vec2 v)\n{\n    float an = atan(v.y,v.x);\n    float len = length(v);\n    an = mod(an+a*.5,a)-a*.5;\n    v = vec2(cos(an),sin(an))*len;\n}\n\n \t\n// iq's polynomial smooth min (k = 0.1);\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat mBox(vec3 p, vec3 b)\n{\n\treturn max(max(abs(p.x)-b.x,abs(p.y)-b.y),abs(p.z)-b.z);\n}\n\nfloat mSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\n#define rtime1 (time*.082)\n#define rtime2 (time*.027)\n#define rtime3 (time*.013)\n#define rot (mat3(cos(rtime1),0,sin(rtime1),0,1,0,-sin(rtime1),0,cos(rtime1))*mat3(cos(rtime2),sin(rtime2),.0,-sin(rtime2),cos(rtime2),.0,0,0,1)*mat3(1,0,0,0,cos(rtime3),sin(rtime3),0,-sin(rtime3),cos(rtime3)))\n\n\n#define size (time*0.1-1.0)\n\nfloat df(vec3 p)\n{\n    float e = .5;\n    for (int i=0; i<2; i++)\n    {\n        p *= rot;\n        p.x = smin(p.x,-p.x,.5)+e*size;\n        p.y = smin(p.y,-p.y,.5)+e*size;\n        p.z = smin(p.z,-p.z,.5)+e*size;\n        e = e*.5;\n    }\n    return length(p)-0.1;\n}\n\nvec3 nf(vec3 p)\n{\n    vec2 e = vec2(0,0.005);\n    float c = df(p);\n    return normalize(vec3(df(p+e.yxx)-c,df(p+e.xyx)-c,df(p+e.xxy)-c));\n}\n\nvoid rotate(const float a, inout vec2 v)\n{\n    float cs = cos(a), ss = sin(a);\n    vec2 u = v;\n    v.x = u.x*cs + u.y*ss;\n    v.y = u.x*-ss+ u.y*cs;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iResolution.xy*.5) / iResolution.yy;\n    vec2 mouse = (iMouse.xy-iResolution.xy*.5) / iResolution.yy;\n    \n    vec3 pos = vec3(0,0,-7.0);\n    vec3 dir = normalize(vec3(uv,.5));\n    pos += dir*fract(fract((fragCoord.x*64.51230+fragCoord.y*42.123)*2.1512523)*351.2512313)*.5;\n    \n    float rx = mouse.x*8.0 + time*.04 +.1;\n    float ry = mouse.y*8.0 + time*.024+.4;\n    \n    rotate(rx,pos.xz);\n    rotate(rx,dir.xz);    \n    rotate(ry,pos.yx);\n    rotate(ry,dir.yx);\n    \n    float td = .0;\n    \n    for (int i=0; i<100; i++)\n    {\n     \tfloat dist = df(pos);\n        vec3 n = nf(pos);\n       \tpos += dist*dir*.5;\n        dir = normalize(dir - n/(1.0+dist*dist)*.2);\n        td += 1.0/(1.0+dist*dist);\n        if (dist<0.001||dist>1000.0)break;\n    }\n    \n    vec3 color;\n    \n    if (df(pos)>.1)\n    {\n        color = pow(texture(iChannel0,dir).xyz,vec3(2.2));\n    }\n    else\n    {\n    \n        color = vec3(.0,.0,.0);\n    }\n    color /= 1.0+td;\n    #ifdef glow\n      color += vec3(td)*.2*vec3(.4,.1,.05);\n    #endif\n    color *= 1.0-length(uv)*.8;\n   \tcolor *= mix(vec3(.8,1.0,1.1),vec3(1.1,.9,.5), fragCoord.y/iResolution.y);\n    \n\tfragColor = vec4(pow(color,vec3(1.0/2.2)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}