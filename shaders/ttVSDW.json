{
    "Shader": {
        "info": {
            "date": "1582782121",
            "description": "My take on a perturbation method for the Mandelbrot set, which provides great precision benefits without any precomputation or use of double precision numbers",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVSDW",
            "likes": 54,
            "name": "Mandelbrot - perturbation",
            "published": 3,
            "tags": [
                "2d",
                "mandelbrot",
                "iteration",
                "perturbation"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 4210
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This is my own take on the orbit perturbation idea, but\n// using a more direct method than most implementations.\n//\n// The trick is that if the reference orbit is in the interior\n// of the M-set, it won't diverge and numbers will stay sane.\n// Then, the nearby points of the plane will produce orbits that\n// will deviate from the reference orbit just a little, little\n// enough that the difference can be expressed with single\n// precision floating point numbers. So this code iterates the\n// reference orbit Zn and also the current orbit Wn in delta form:\n//\n// Given\n//\n// Zn and Wn = Zn + ΔZn\n// \n// Then\n//\n// Zn+1 = f(Zn) = Zn² + C\n// Wn+1 = f(Wn) = f(Zn+ΔZn) = (Zn+ΔZn)² + C + ΔC = \n//              = Zn² + ΔZn² + 2·Zn·ΔZn + C+ΔC = \n//              = Zn+1 + ΔZn·(ΔZn + 2·Zn) + ΔC = \n//              = Zn+1 + ΔZn+1\n//\n// So, what we need to iterate is\n//\n// ΔZn+1 = ΔZn·(ΔZn + 2·Zn) + ΔC\n// ΔZn+1 = (ΔZn² + ΔC) + 2·Zn·ΔZn  --> delta-orbit (Wn-Zn)\n//  Zn+1 = ( Zn² +  C)             --> periodic orbit, doesn't diverge\n\n\nvec2 cmul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }\n\nfloat mandelbrot(vec2 c)\n{\n    float n = -1.0;\n    vec2 z = vec2(0.0);\n    for( int i=0; i<6000; i++ )\n    {\n        z = cmul(z,z) + c;\n        if( dot(z,z)>4.0 ) { n=float(i); break; }\n    }\n    return n;\n}\n\nfloat mandelbrot_perturbation( vec2 c, vec2 dc )\n{\n    vec2 z  = vec2(0.0);\n    vec2 dz = vec2(0.0);\n    float n = -1.0;\n    for( int i=0; i<6000; i++ )\n    {\n        dz = cmul(2.0*z+dz,dz) + dc;  // dz = cmul(dz,dz)+dc + 2.0*cmul(z,dz);\n        \n        z  = cmul(z,z)+c; // this could be precomputed since it's constant for the whole image\n        \n        // instead of checking for Wn to escape...\n        // if( dot(z+dz,z+dz)>4.0 ) { n=float(i); break; }\n        // ... we only check ΔZn, since Zn is periodic and can't escape\n        if( dot(dz,dz)>4.0 ) { n=float(i); break; }\n    }\n    return n;\n}\n\n#define AA 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // input\n    float time = iTime+0.2;\n    \n    float s = (iMouse.z<0.001) ? -cos(time*2.0)*1.8 : (2.0*iMouse.x-iResolution.x) / iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 p = (2.0*(fragCoord.xy+vec2(float(m),float(n))/float(AA))-iResolution.xy)/iResolution.y;\n    #else\n        vec2  p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    #endif\n    \n        // viewport\n        float zoom; vec2 c;\n        if( sin(time)>0.0 ) { zoom=1.5e-6; c=vec2(-1.1900443,0.3043895); }\n        else                { zoom=1.0e-6; c=vec2(-0.7436441,0.1318255); }\n\n        // mandelbrot\t\n        vec2 dc = p*zoom;\n        float l = (p.x<s) ? mandelbrot_perturbation(c, dc) : \n                            mandelbrot(c + dc);\n        // color\n        col += (l<0.0) ? vec3(0.0) : 0.5 + 0.5*cos( pow(zoom,0.22)*l*0.05 + vec3(3.0,3.5,4.0));\n\n        // reference orbit\n        if( length(p)<0.02 ) col += vec3(1.0,0.0,0.0);\n\n        // separator\n        if( abs(p.x-s)<2.0/iResolution.y) col += vec3(1.0);\n    #if AA>1\n    }\n    col /= float(AA*AA);\n    #endif\n    \n    // output    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}