{
    "Shader": {
        "info": {
            "date": "1630744595",
            "description": "Robot modeling design. This one is not a reproduction. I designed this by myself. I know we can do this more detailed one using the 3D model software but it is what it is. I love to do this with all by the shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "7s3GDf",
            "likes": 11,
            "name": "Gerd Muller 2021",
            "published": 3,
            "tags": [
                "modeling",
                "robot"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 64\n#define MAX_DIST 64.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define Slice(p,a) dot(p,vec2(cos(a),sin(a)))\n#define S(p,d,b) smoothstep(fwidth(p.y),0.0,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define EDGE_WIDTH 0.003\n#define MATERIAL_BODY 0\n#define MATERIAL_SKELTON 1\n#define MATERIAL_EYE 2\n#define MATERIAL_BOX 3\n\n#define ZERO (min(iFrame,0))\n\nfloat edge;\n\n// IQ's 3D noise function. It's faster than the FBM and enough for me to design.\n// The compile is also faster.\nfloat noise3d( vec3 p )\n{\n\tconst vec3 s = vec3(27, 111, 57);\n\tvec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); \n    //p *= p*p*(p*(p*6. - 15.) + 10.); // option\n    h = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\n// by Dave_Hoskins\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.yz),p.x)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat dTaperBox(vec3 p, vec3 b, float angle, float bottomDist) {\n    vec3 prevP = p;\n    float d = B3D(p,b);\n    float a = radians(angle);\n    p.x = abs(p.x);\n    p.x-=bottomDist;    \n    d = max(Slice(p.xy,a),d);\n\n    p = prevP;\n    a = radians(angle);\n    p.z = abs(p.z);\n    p.z-=bottomDist;\n    d = max(Slice(p.zy,a),d);\n\n    return d;\n}\n\nfloat leg(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.06,0.09,0.07));\n    \n    float a = radians(45.0);\n    p.zy = abs(p.zy);\n    p.zy-=0.065;    \n    d = max(Slice(p.zy,a),d);\n    \n    p = prevP;\n    a = radians(30.0);\n    p.xz = abs(p.xz);\n    p.xz-=0.055;    \n    d = max(Slice(p.xz,a),d);\n    \n    p = prevP;\n    p.xy = abs(p.xy);\n    p.xy-=0.055;    \n    d = max(Slice(p.xy,a),d);    \n    \n    return d;\n}\n\nvec2 drawLeg(vec3 p){\n    vec3 prevP = p;\n    \n    p.z*=0.7;\n    p.x=abs(p.x);\n    p.x-=0.028;\n    float d = dTaperBox(p,vec3(0.021,0.035,0.14),60.0,0.1);\n    p = prevP;\n    \n    p.zy = abs(p.zy);\n    p.zy-=0.2;    \n    float maskd = max(Slice(p.zy,radians(-42.0)),B3D(prevP-vec3(0.0,-0.03,0.0),vec3(0.1,0.02,0.2)));\n    \n    d = max(-maskd,d);\n    vec2 res = vec2(d, MATERIAL_SKELTON);\n    \n    p = prevP;\n    p.yz*=Rot(radians(10.0));\n    d = leg(p-vec3(0.0,0.12,0.01));\n    \n    p = prevP;\n    p.yz*=Rot(radians(-20.0));\n    p*=vec3(0.8,0.7,0.8);\n    \n    float d2 = leg(p-vec3(0.0,0.21,-0.07));\n    \n    d = min(d,d2);\n    \n    p = prevP;\n    d2 = sdCappedCylinder(p-vec3(0.0,0.21,-0.01),0.035,0.08);\n    d = min(d,d2);\n    \n    p.yz*=Rot(radians(20.0));\n    d2 = B3D(p-vec3(0.0,0.17,-0.04),vec3(0.015,0.08,0.01));\n    d = min(d,d2);\n    \n    vec2 res2 = vec2(d, MATERIAL_BODY);\n    return combine(res,res2);\n}\n\nfloat sholuder(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.13,0.1,0.07));\n    \n    float a = radians(50.0);\n    p.zy = abs(p.zy);\n    p.zy-=0.075;    \n    d = max(Slice(p.zy,a),d);\n    \n    p = prevP;\n    p.xz = abs(p.xz);\n    p.xz-=0.085;    \n    d = max(Slice(p.xz,a),d);\n    \n    p = prevP;\n    a = radians(30.0);\n    p.x+=0.12;    \n    d = max(-Slice(p.xy,a),d);    \n    \n    p = prevP;\n    p.z = abs(p.z);\n    p.z-=0.065;\n    d = max(-B3D(p-vec3(0.07,0.0,0.0),vec3(0.01,0.06,0.02)),d); \n    \n    return d;\n}\n\nfloat armWithSheild(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.07,0.06,0.09));\n    \n    float a = radians(45.0);\n    p.zy = abs(p.zy);\n    p.zy-=0.065;    \n    d = max(Slice(p.zy,a),d);\n    \n    p = prevP;\n    a = radians(30.0);\n    p.xz = abs(p.xz);\n    p.xz-=0.06;    \n    d = max(Slice(p.xz,a),d);\n    \n    p = prevP;\n    p.xy = abs(p.xy);\n    p.xy-=0.055;    \n    d = max(Slice(p.xy,a),d);    \n    \n    p = prevP;\n    float d2 = B3D(p-vec3(-0.075,0.0,0.05),vec3(0.01,0.05,0.12));\n    \n    p.y = abs(p.y);\n    p.y-=0.03;\n    d2 = max(-B3D(p-vec3(-0.082,0.0,0.05),vec3(0.005,0.005,0.13)),d2);\n    \n    return min(d,d2);\n}\n\nfloat hand(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.02,0.04,0.04));\n    \n    float a = radians(-120.0);\n    p.xz+=0.01;    \n    d = max(Slice(p.xz,a),d);\n    \n    p = prevP;\n    d = max(-B3D(p-vec3(0.015,0.0,0.01),vec3(0.01,0.05,0.015)),d);\n    \n    return d;\n}\n\nvec2 drawArm(vec3 p){\n    vec3 prevP = p;\n    float d = sholuder(p);\n    \n    vec2 res = vec2(d, MATERIAL_BODY);\n    \n    float x = 0.01;\n    d = B3D(p-vec3(x,-0.15,0.0),vec3(0.04,0.1,0.035));\n    \n    float d2 = B3D(p-vec3(x,-0.25,-0.03),vec3(0.04,0.04,0.065));\n    d = min(d,d2);\n    d2 = sdCappedCylinder(p-vec3(x,-0.24,0.0),0.06,0.05);\n    d = min(d,d2);\n    \n    vec2 res2 = vec2(d, MATERIAL_SKELTON);\n    \n    d = armWithSheild(p-vec3(x,-0.25,-0.165));\n    vec2 res3 = vec2(d, MATERIAL_BODY);\n    \n    d = hand(p-vec3(x,-0.25,-0.298));\n    vec2 res4 = vec2(d, MATERIAL_SKELTON);\n    \n    return combine(res,combine(res2,combine(res3,res4)));\n}\n\nfloat bodyTop(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.15,0.15,0.2));\n    \n    float a = radians(50.0);\n    p.zy = abs(p.zy);\n    p.zy-=0.12;    \n    d = max(Slice(p.zy,a),d);\n    \n    p = prevP;\n    a = radians(-40.0);\n    p.xy = abs(p.xz);\n    p.xy-=0.26;    \n    d = max(Slice(p.xz,a),d);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=0.02;\n    p.x = abs(p.x);\n    p.x-=0.02;\n    d = max(-B3D(p-vec3(0.0,0.0,-0.198),vec3(0.007,0.04,0.03)),d);\n    \n    return d;\n}\n\nfloat bodyBtm(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.06,0.1,0.16));\n    \n    float a = radians(35.0);\n    p.zy = abs(p.zy);\n    p.zy-=vec2(0.1,0.13);    \n    d = max(Slice(p.zy,a),d);\n    \n    return d;\n}\n\nvec2 drawBody(vec3 p){\n    vec3 prevP = p;\n    float d = bodyBtm(p-vec3(0.0,-0.1,0.0));\n    float d2 = bodyTop(p-vec3(0.0,0.1,0.0));\n    d = min(d,d2);\n    vec2 res = vec2(d, MATERIAL_BODY);\n    return res;\n}\n\nvec2 drawHead(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.05,0.04,0.1));\n    float a = radians(40.0);   \n    d = max(Slice(p.yz,a),d);\n    d = max(-B3D(p-vec3(0.0,0.0,-0.1),vec3(0.3,0.01,0.01)),d);\n    vec2 res = vec2(d, MATERIAL_BODY);\n    \n    d = B3D(p-vec3(sin(-iTime*2.5)*0.01,0.0,-0.1),vec3(0.025,0.005,0.01));\n    vec2 res2 = vec2(d, MATERIAL_EYE);\n    \n    return combine(res,res2);\n}\n\nvec2 drawBox(vec3 p){\n    vec3 prevP = p;\n    vec3 size = vec3(3.5,0.01,3.5);\n    p.z-=iTime*1.5;\n    p.y+=noise3d(p*80.0)*0.005;\n    p.z=mod(p.z,2.)-1.0;\n    \n    float d = B3D(p,size);\n    p = prevP;\n    float d2 = B3D(p,size);\n    d = max(B3D(p,size),d);\n    vec2 res = vec2(d, MATERIAL_BOX);\n    return res;\n}\n\nvec2 drawCannon(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.17,0.04,0.15));\n    \n    float a = radians(25.0);\n    p.zy = abs(p.zy);\n    p.zy-=0.1;    \n    d = max(Slice(p.zy,a),d);\n    \n    p = prevP;\n    a = radians(20.0);\n    p.xz = abs(p.xz);\n    p.xz-=0.085;    \n    d = max(Slice(p.xz,a),d);\n    \n    p = prevP;\n    p.xy = abs(p.xy);\n    p.xy-=0.055;    \n    d = max(Slice(p.xy,a),d); \n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=0.03; \n    float d2 = B3D(p-vec3(0.0,0.0,-0.13),vec3(0.03));    \n    d = max(-d2,d);\n    \n    p = prevP;\n    p.z = abs(p.z);\n    p.z-=0.1;\n    d2 = B3D(p,vec3(0.18,0.05,0.005));\n    p = prevP;\n    p.xy = abs(p.xy);\n    p.xy-=0.065;  \n    d2 = max(Slice(p.xy,a),d2);\n    d = min(d,d2);\n    \n    vec2 res = vec2(d, MATERIAL_BODY);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=0.03; \n    d = B3D(p-vec3(0.0,0.0,-0.12),vec3(0.02));\n    vec2 res2 = vec2(d, MATERIAL_SKELTON);\n    \n    return combine(res,res2);\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 originalP = p;\n    \n    p.x += sin(iTime*2.2)*0.12;\n    p+=noise3d(p*300.0)*0.001;\n    vec3 prevP = p;\n\n    p.x = abs(p.x);\n    p.x-=0.12;\n    vec2 dleg = drawLeg(p-vec3(0.0,-0.42,-0.05));\n    p = prevP;\n    \n    p.x = abs(p.x);\n    \n    p.x-=0.29;\n    p.x*=-1.0;\n    vec2 dCannon = drawCannon(p-vec3(0.0,0.42,0.03));\n    vec2 darm = drawArm(p-vec3(0.0,0.28,0.0));\n    p = prevP;\n    vec2 dBody = drawBody(p-vec3(0.0,0.1,0.0));\n    vec2 dhead = drawHead(p-vec3(0.0,0.39,0.015));\n    \n    p = originalP;\n    vec2 dBox = drawBox(p-vec3(0.0,-0.47,0.0));\n    \n    vec2 model = combine(combine(dleg,darm),combine(dBody,dhead));\n    return combine(combine(model,dCannon),dBox);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    float lastDistEval = 1e10; \n    float dist;\n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dist = dS.x;\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(stepnum == MAX_STEPS){\n            if (lastDistEval < EDGE_WIDTH && dist > lastDistEval + 0.0005) {\n                edge = 1.0;\n            }\n            if (dist < lastDistEval) lastDistEval = dist;\n        }\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,2,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.)*occ; // spec\n        \n    return diffCol;\n}\n\nfloat bodyPaint(vec2 p, float sc, float flip){\n    vec2 uv = fract(p)-0.5;\n    vec2 id = floor(p);\n\n    float rand = hash12(id);\n    float lineW = 0.14;\n    \n    if(rand<0.5 || rand>=0.8){\n        float dir = (rand>=0.8)?1.0:-1.0;\n        uv*=Rot(radians(dir*45.0*flip));\n        uv.x = abs(uv.x);\n        uv.x-=0.355;\n        lineW = 0.1;\n    }\n    \n    lineW*=sc;\n    float d = max(-(uv.x+(lineW*0.5)),(uv.x-(lineW*0.5)));\n    return d;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    vec3 np = p;\n    float xanim = sin(iTime*2.2)*0.12;\n    if(mat == MATERIAL_BODY){\n        np.x += xanim;\n        float d = bodyPaint(np.xy*30.0,1.0,1.0);\n        float nn = noise3d(np*30.0)*0.2;\n        float sn = hash12(np.xy*100.0)*0.1;\n\n        vec3 bcol = mix(vec3(0.3,0.4,0.3)+nn-sn,vec3(0.1,0.2,0.1),S(p.xy,d,0.0));\n        col = diffuseMaterial(n,rd,p,bcol);\n    } else if(mat == MATERIAL_SKELTON) {\n        np.x += xanim;\n        float nn = noise3d(np*100.0)*0.1;\n        float sn = hash12(np.xy*100.0)*0.1;\n        col = diffuseMaterial(n,rd,p,vec3(0.2)+nn+sn);\n        col*=1.5;\n    } else if(mat == MATERIAL_BOX) {\n        np.z-=iTime*1.5;\n        vec3 prevNp = np;\n        float nn = noise3d(np*5.0)*0.08;\n        float sn = hash12(np.xz*100.0)*0.1;\n        vec3 bcol = vec3(0.6,0.65,0.7)+nn+sn;\n\n        np.z= mod(np.z,0.8)-0.4;\n        float d = B(np.xz,vec2(0.02,0.2));\n        bcol = mix(bcol,vec3(1.0),S(p.xy,d,0.0));\n        np.x = abs(np.x);\n        np.x-=1.5;\n        d = B(np.xz,vec2(0.02,0.4));\n        bcol = mix(bcol,vec3(1.0),S(p.xy,d,0.0));\n        \n        col = diffuseMaterial(n,rd,p,bcol);\n    } else if(mat == MATERIAL_EYE){\n        col = diffuseMaterial(n,rd,p,vec3(0.5,0.0,0.0));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    float handShakeY = noise3d(vec3(iTime*2.0,iTime*2.1,iTime*2.2))*0.15;\n    float handShakeX = noise3d(vec3(iTime*2.1,iTime*2.2,iTime*2.1))*0.3;\n    #if USE_MOUSE == 1\n    handShakeY = 0.0;\n    handShakeX = 0.0;\n    #endif\n    \n    vec3 ro = vec3(handShakeX, handShakeY, 1.3);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-10.0));\n    if(iMouse.z>0.){\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.xz *= Rot(radians(180.0+iTime*20.0));\n    }\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        col = mix(col,vec3(0.6),edge);\n        col *= exp( -0.038*d.x*d.x*d.x );//fog\n    } else {\n        rd.z-=iTime*1.2;\n        // dust effect\n        float c = noise3d(rd) * 0.5 + noise3d(rd * 5.0) * 0.25 + noise3d(rd * 10.0) * 0.1;\n        uv.y-=0.07;\n        col = mix(vec3(0.3,0.3,0.1)+(c*0.2),vec3(0.0),-uv.y+1.0);   \n    }\n    \n    // POST EFFECTS\n    float cline = mod(fragCoord.y, 4.0) < 2.0 ? 0.5 : 1.0;\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    fragColor = vec4(col,1.0)*(cline*1.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}