{
    "Shader": {
        "info": {
            "date": "1589462531",
            "description": "A small experiment for dnb visuals.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lKSDG",
            "likes": 38,
            "name": "Cosmic horizon",
            "published": 3,
            "tags": [
                "abstract",
                "liquid",
                "dnb"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 899
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float PI = 3.14159265;\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\n\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\nvec3 sat(vec3 v)\n{\n  return vec3(sat(v.x),sat(v.y), sat(v.z));\n}\nfloat _sub(float a, float b)\n{\n  return max(a,-b);\n}\nfloat _cir(vec2 uv, float sz)\n{\n  return length(uv)-sz;\n}\n\nfloat _loz(vec2 uv,float sz)\n{\n  return lenny(uv)-sz;\n}\n\nvec3 tunnel(vec2 uv,float sz)\n{\n  //uv += vec2(sin(length(uv)),cos(length(uv)))*.1;\n  float a = sz*atan(uv.y,uv.x)/PI;\n  float d = .021*iTime+.01/length(uv);\n  vec3 col = texture(iChannel0,vec2(d,a)).xxx;\n  return sat(1.-length(uv*.2))*col*sat(length(uv*20.))*mix(vec3(.28+abs(uv.x),.34,sat(.17+length(uv))),vec3(.8,.5,.7),length(uv)-.9);\n}\n\nvec3 rdrLand(vec2 uv)\n{\n  vec3 back;\n  vec3 col;\n  col += 2.*tunnel(uv,1.);\n // col += 1.5*tunnel(uv*.8*r2d(iTime*.2),.2);\n  col += tunnel(uv*5.2*r2d(iTime*.2),.2);\n\n  for (int i = 0;i<8;++i)\n  {\n    float fi= float(i);\n    float sz = 5./(fi+1.);\n    float szc = 7.*mod(sz+iTime*.1,1./9.);\n    float cut = _cir(uv, szc-szc/10.);\n    float ci = _cir(uv, szc);\n    float cir = 1.-sat(_sub(ci,cut)*20.);\n    col += vec3(.53,.94,.58)*(cir)*(sz-.1)*.1;\n  }\n\n  return back+col*.5;\n}\n\nvec3 rdrSqr(vec2 uv)\n{\n  uv = uv *r2d(PI/4.);\n  vec3 acc;\n  for (int i = 0; i < 16; i++)\n  {\n     vec2 suv = uv;\n     suv = suv*r2d(.8*smoothstep(0.,.9,mod(iTime+float(i)*.5,.9)));\n     vec3 col;\n\n     float an = iTime*.1+.15*float(i)+atan(uv.y, uv.x)/PI;\n     float sz = mod(iTime/(float(i+1)*.7),1.);\n     float sqr = _sub(_loz(suv, sz),_loz(suv,sz*.999));\n     col = vec3(1.,float(i)/10.,uv.y*.5+.2)*((1.-sat(sqr*200.))+.7*(1.-sat(sqr*15.)))*sat(float((mod(an,.05)-.015))*20.);\n     acc += col;\n  }\n    return acc;\n}\n\nvec3 rdrScn(vec2 uv)\n{\n  float maskLand = 1.-sat(_cir(uv,.5)*50.);\n\n  vec3 land = rdrLand(uv).zyx;\n  land += rdrSqr(uv)*sat(lenny(uv*2.))*.7;\n  return land;\n}\n\nvec3 rdr2(vec2 uv)\n{\n    vec2 ouv = uv;\n    ouv.y *= 1.+cos((ouv.x*PI));\n    vec3 col = rdrScn(ouv);\n  \tcol *= vec3(.7, .34, .89)*sat(1.-lenny(uv))*2.;\n    vec3 col2;\n    col2 += 2.*vec3(.7, .54, .89).zyx*sat(1.-lenny(uv*vec2(1., 8.)));\n    col2 += vec3(.7, .54, .89).zyx*sat(1.-lenny(uv*vec2(.5, 90.)));\n    col2 += .9*vec3(.7, .54, .89).zyx*sat(1.-lenny((uv*r2d(PI/4.)*vec2(.5, 10.))));\n    col2 += .5*vec3(.7, .54, .89).zyx*sat(1.-lenny((uv*r2d(PI/4.)*vec2(.5, 2.))));\n    col2 += .5*vec3(.7, .54, .89).zyx*sat(1.-lenny(((uv+vec2(-.2, -.5))*r2d(PI/4.)*vec2(.5, 90.))));\n    col2 += .5*vec3(.7, .54, .89).zyx*sat(1.-lenny(((uv+vec2(-.2, .3))*r2d(PI/4.)*vec2(.5, 5.))));\n    \n    vec3 halo = vec3(.6,.7,.9)*(1.-sat(_sub(_cir(uv, .65), _cir(uv, .6))*15.));\n    return col+col2*.5+halo*.4;\n}\n\nvec3 rdrPost(vec2 uv)\n{\n    vec2 dir = uv*.05;\n    float r = rdr2(uv+dir).x;\n    float g = rdr2(uv).y;\n    float b = rdr2(uv-dir).z;\n    return vec3(r,g,b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*iResolution.xy/iResolution.xx;\n  uv*= 1.5;\n  vec3 col = rdrPost(uv);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}