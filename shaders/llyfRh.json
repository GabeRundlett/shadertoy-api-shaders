{
    "Shader": {
        "info": {
            "date": "1541756474",
            "description": "Faberge meets Fibonacci (no. 5 in the \"egg\" series)",
            "flags": 0,
            "hasliked": 0,
            "id": "llyfRh",
            "likes": 8,
            "name": "Fibonacci Polyhedra",
            "published": 3,
            "tags": [
                "reflection",
                "fibonacci",
                "egg",
                "polyhedron",
                "faberge"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 566
        },
        "renderpass": [
            {
                "code": "// \"Fibonacci Polyhedra\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Faberge meets Fibonacci (no. 5 in the \"egg\" series)\n  The Fibonacci scheme for near-uniform covering a sphere with disks is used to\n  construct polyhedra.\n*/\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEllips2Df (vec3 p, vec2 r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit, vdFib;\nvec2 opCs, rotCs, rShell;\nfloat tCur, dstFar, opPhs, nFace;\nint idObj;\nconst int idShell = 1, idHing = 2, idArm = 3, idPolyh = 4;\nconst float pi = 3.14159, phi = 1.618034;\n\nvec3 SphFib (vec3 v, float n)\n{   // based on Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vfMin;\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, hWid, shUp;\n  dMin = dstFar;\n  hWid = 0.3;\n  q = p;\n  q.z += rShell.x + 0.9 * hWid;\n  d = PrCapsDf (q.yzx, 0.25, 0.95);\n  DMINQ (idHing);\n  q.yz = Rot2Cs (q.yz, opCs);\n  q.y = abs (q.y);\n  q.yz = Rot2Cs (q.yz, opCs);\n  q.z -= hWid;\n  d = max (PrBoxDf (q, vec3 (0.95, 0.25, hWid)), - q.y);\n  DMINQ (idArm);\n  q.z -= rShell.x + 0.9 * hWid;\n  r = rShell.x + 0.1 * (1. - q.y / length (q)) * cos (32. * atan (q.x, q.z));\n  d = max (max (PrEllips2Df (q.xzy, vec2 (r, rShell.y) + 0.1),\n     - PrEllips2Df (q.xzy, vec2 (r, rShell.y) - 0.1)), - q.y);\n  DMINQ (idShell);\n  shUp = 1.2 + 1.6 * opPhs;\n  q = p;\n  q.y -= - rShell.y + shUp;\n  d = PrCylDf (q.xzy, 0.1, shUp);\n  q = p;\n  q.y -= - rShell.y + 0.1;\n  d = min (d, PrCylDf (q.xzy, 0.5, 0.05));\n  DMINQ (idArm);\n  q = p;\n  q.y -= - rShell.y + 2. * shUp;\n  q.xz = Rot2Cs (q.xz, rotCs);\n  vdFib = SphFib (normalize (q), nFace);\n  d = RotToDir (vdFib, vec3 (0., 0., 1.), q - vdFib).z - 1.2;\n  DMINQ (idPolyh);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, s;\n  bool isRefl;\n  rShell = vec2 (4., 3.5);\n  isRefl = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar && idObj == idPolyh) {\n    ro += dstObj * rd;\n    vdFib.xz = Rot2Cs (vdFib.xz, rotCs * vec2 (1., -1.));\n    rd = reflect (rd, vdFib);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    isRefl = true;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = vec4 (0.8, 0.85, 0.8, 0.2);\n    if (idObj == idShell) {\n      s = length (qHit / rShell.xyx);\n      col4 = (s > 1. || qHit.y < 0.05) ? col4 : mix (vec4 (0.4, 0.9, 0.4, 0.1),\n         vec4 (0.9, 0.7, 0.7, 0.1), smoothstep (0.3, 0.5, rShell.y - qHit.y) *\n         smoothstep (0.97, 0.98, s));\n      if (s > 1.) vn = VaryNf (64. * qHit, vn, 0.5);\n    } else if (idObj == idHing) col4 *= 1. - 0.5 * SmoothBump (0.05, 0.1, 0.02,\n       mod (4. * qHit.x, 1.));\n    col = col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    if (! isRefl || idObj == idShell && s > 1.)\n       col += 256. * pow (clamp (0.5 + 0.5 * dot (ltDir, reflect (rd, vn)), 0., 1.), 16.) *\n       pow (1. - 0.6 * abs (dot (normalize (ltDir - rd), VaryNf (1024. * qHit, vn, 2.))), 8.);\n    if (idObj == idShell && s < 1.) col *= 0.4 + 0.6 * smoothstep (0.1, 0.2, opPhs);\n    if (isRefl) col *= 0.9;\n  } else {\n    col = (mix (vec3 (1., 0.9, 0.8) * (0.4 + 0.2 * rd.y), vec3 (0.1, 0.1, 0.5),\n       max (SmoothBump (0.45, 0.55, 0.05, mod (64. * atan (rd.z, - rd.x) / pi, 1.)),\n       SmoothBump (0.45, 0.55, 0.05, mod (64. * asin (rd.y) / pi, 1.)))) +\n       vec3 (0.5, 0.5, 1.) * (((rd.y > max (abs (rd.x), abs (rd.z * 0.25))) ?\n       min (2. * rd.y, 1.) : 0.05 * (1. + dot (rd, ltDir))) + 0.5 * step (0., rd.y) *\n       pow (clamp (1.05 - 0.5 * length (max (abs (rd.xz / rd.y) - vec2 (1., 4.), 0.)), 0., 1.),\n       8.))) * (isRefl ? 0.5 : 0.4);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  opPhs = SmoothBump (0.25, 0.85, 0.15, mod (0.1 * tCur, 1.));\n  nFace = 32. * pow (2., mod (floor (0.1 * tCur), 6.));\n  opCs = sin (0.2 * pi * opPhs + vec2 (0.5 * pi, 0.));\n  rotCs = sin (0.01 * pi * tCur + vec2 (0.5 * pi, 0.));\n  az = pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.5 * pi * (2. * mod (floor (0.04 * tCur), 2.) - 1.) *\n       SmoothBump (0.25, 0.65, 0.1, mod (0.04 * tCur, 1.));\n    el -= 0.05 * pi * sin (0.05 * pi * tCur);\n  }\n  el = clamp (el, -0.45 * pi, 0.45 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 2.7, -30.);\n  zmFac = 4.2 + 2. * opPhs;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 60.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrEllips2Df (vec3 p, vec2 r)\n{\n  return (length (p / r.xxy) - 1.) * min (r.x, r.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}