{
    "Shader": {
        "info": {
            "date": "1660645266",
            "description": "Voronoi trackign based on wyatt (and others) works.",
            "flags": 32,
            "hasliked": 0,
            "id": "st3yDX",
            "likes": 21,
            "name": "Another voronoi tracking viz",
            "published": 3,
            "tags": [
                "voronoi",
                "particles",
                "mosaic",
                "voronoitracking"
            ],
            "usePreview": 0,
            "username": "josemorval",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "//Here visualization (voronoi cells)\n//Based on wyatt works\n\nvec2 R;\n\nvec4 read0(vec2 U) {return texelFetch(iChannel0,ivec2(U),0);}\nvec4 read1(vec2 U) {return texelFetch(iChannel1,ivec2(U),0);}\nvec4 read2(vec2 U) {return texelFetch(iChannel2,ivec2(U),0);}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    R = iResolution.xy;\n     \n    vec2 P = read0(U).xy; \n    vec2 V = read1(U).xy; \n    \n    vec2 \n        n = read0(U+vec2(0,1)).xy,\n        e = read0(U+vec2(1,0)).xy,\n        s = read0(U-vec2(0,1)).xy,\n        w = read0(U-vec2(1,0)).xy;\n \tfloat d = (length(n-P.xy)-1.+\n        length(e-P.xy)-1.+\n        length(s-P.xy)-1.+\n        length(w-P.xy)-1.);\n \n    Q = read0(U);\n    Q = vec4(1.)*fract(9221.*sin(213.11+dot(Q.zw,vec2(853.1221,821.11))));\n    Q += vec4(5.*length(V),0.,0.,0.)*(smoothstep(0.,0.1,d));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Here voronoi tracking\n\nvec2 R;\n\nvec4 read0(vec2 U) {return texelFetch(iChannel0,ivec2(U),0);}\nvec4 read1(vec2 U) {return texelFetch(iChannel1,ivec2(U),0);}\nvec4 read2(vec2 U) {return texelFetch(iChannel2,ivec2(U),0);}\n\nvoid swap (vec2 U, inout vec4 Q, vec2 u) {\n    vec4 p = read0(U+u);\n    float d = length(U-Q.xy) - length(U-p.xy);\n    float e = .1;\n    Q = mix(Q,p,d>0.?1.:0.);\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n\n    R = iResolution.xy;\n    vec2 s = U/R-0.5; s.x*=R.x/R.y;\n    \n    Q = read0(U);\n    \n \tswap(U,Q,vec2(1,0));\n \tswap(U,Q,vec2(0,1));\n \tswap(U,Q,vec2(0,-1));\n \tswap(U,Q,vec2(-1,0));\n    \n    \n    Q.xy += read1(Q.xy).xy;\n    if (iFrame < 1) {\n        Q = vec4(0.,0.,0.,0.);\n        float s = 20.;\n        vec4 QQ = vec4(floor(U/s+0.5)*s,0.,0.); \n        QQ.zw = QQ.xy;\n        Q = QQ;\n        \n        //Differents tile sizes\n        /*for(;s<30.;s*=3.){\n            vec4 QQ = vec4(floor(U/s+0.5)*s,0.,0.); \n            QQ.zw = QQ.xy;\n            float mask = fract(591.12*sin(1021.*s+dot(QQ.xy,vec2(2301.23,3201.1))));\n            mask = step(0.3,mask);\n            Q = mix(Q,QQ,mask);\n        }\n        */\n        \n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Here simple velocity field\n\nvec2 R;\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    R = iResolution.xy;\n    vec2 uv = U/R-0.5; uv.x*=R.x/R.y;\n    uv.x += 0.5*sin(0.5*iTime);\n    vec2 dir = mix(vec2(-uv.y,uv.x),vec2(uv.y,-uv.x),0.);\n    Q = vec4(5.*smoothstep(0.4,0.,length(uv))*dir,0.,0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}