{
    "Shader": {
        "info": {
            "date": "1532799257",
            "description": "Controls: see source code comments\n\nMusic by Ott: https://soundcloud.com/ottsonic\nand Caravan Palace: https://soundcloud.com/caravan-palace-official",
            "flags": 80,
            "hasliked": 0,
            "id": "4l3yD7",
            "likes": 43,
            "name": "Trippy interactive spiral",
            "published": 3,
            "tags": [
                "tunnel",
                "interactive",
                "music",
                "spiral",
                "colorful",
                "psychedelic",
                "rainbow",
                "trippy",
                "hypnotic"
            ],
            "usePreview": 0,
            "username": "matfas",
            "viewed": 4861
        },
        "renderpass": [
            {
                "code": "/*\nControls\nMouse click: manipulate spiral parameters\nKeyboard shortcuts\n- 1: toggle invert spiral: 1.0 - spiral\n- 2: toggle invert spiral: 1.0 / spiral\n\nMusic by Ott and Caravan Palace\nOther songs that work well with this shader:\n- https://soundcloud.com/ottsonic/3-ott-owl-stretching-time\n- https://soundcloud.com/ottsonic/4-ott-squirrel-and-biscuits\n- https://soundcloud.com/ottsonic/6-ott-mouse-eating-cheese\n- https://soundcloud.com/ottsonic/ott-baby-robot-02-mr-balloon-hands\n- https://soundcloud.com/caravan-palace-official/lone-digger\n- https://soundcloud.com/caravan-palace-official/aftermath\n\nTODO\nFigure out how to apply distortion along the tangent of the spiral.\n*/\n\n#define DISTORTION 1.0\n\n#define PI   3.14159265359\n#define TAU  6.28318530718\n#define PI_2 1.57079632679\n\nconst int KEY_SPACE = 32;\nconst int KEY_1 = 49;\nconst int KEY_2 = 50;\nconst int KEY_3 = 51;\n\nvec3 linColor(float value)\n{\n    value = mod(value * 6.0, 6.0);\n    vec3 color;\n    \n    color.r = 1.0 - clamp(value - 1.0, 0.0, 1.0) + clamp(value - 4.0, 0.0, 1.0);\n    color.g = clamp(value, 0.0, 1.0) - clamp(value - 3.0, 0.0, 1.0);\n    color.b = clamp(value - 2.0, 0.0, 1.0) - clamp(value - 5.0, 0.0, 1.0);\n    \n    return color;\n}\n\nvec3 sinColor(float value)\n{\n    value *= TAU;\n    vec3 color;\n    \n    color.r = (1.0 + cos(value)) / 2.0;\n    color.g = (1.0 + cos(value - TAU / 3.0)) / 2.0;\n    color.b = (1.0 + cos(value + TAU / 3.0)) / 2.0;\n    \n    return color;\n}\n\nbool toggled(int key)\n{\n    return texelFetch(iChannel1, ivec2(key, 2), 0).x != 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 halfRes = iResolution.xy / 2.0;\n    vec2 pos = (fragCoord - halfRes) / halfRes.y;\n    \n    float mouseX = iMouse.x / iResolution.x;\n    float mouseY = (iMouse.y - halfRes.y) / halfRes.y;\n    float clicked = iMouse.z > 0.0 || iMouse.w > 0.0 ? 1.0 : 0.0;\n    // Increase accuracy per pixel with small values.\n    mouseX *= abs(mouseX * mouseX * mouseX * mouseX);\n    mouseY *= abs(mouseY * mouseY * mouseY * mouseY);\n    \n    // Reduce rounding issues (banding) caused by big iTime values.\n    float fractTime = fract(iTime);\n    float tauTime = mod(iTime, TAU);\n    \n    float len = length(pos);\n    float angle = atan(pos.y, pos.x);\n    \n    float sinAngle = (sin(angle + tauTime) + 1.0) / 2.0;\n    float sound = texture(iChannel0, vec2(sinAngle, 1.0)).x * DISTORTION;\n    float distortion = 1.0 + sound * 0.1;\n    \n    float powLen, sine, arms;\n    if (clicked > 0.0)\n    {\n        powLen = pow(len, mouseY * 256.0);\n        distortion = pow(distortion, mouseY * 256.0);\n        arms = (round(mouseX * 65536.0) / 2.0);\n    }\n    else\n    {\n        //float e = -0.1;\n        //powLen = pow(len, e);\n        //distortion = pow(distortion, e);\n        \n        distortion = 1.0 / sqrt(distortion);\n        powLen = 1.0 / sqrt(len);\n        arms = 4.0;\n    }\n    \n    sine = sin(powLen * 16.0 * distortion + angle * arms - tauTime * 8.0);\n    sine = abs(sine);\n    sine = sqrt(sine);\n    \n    if (toggled(KEY_1)) sine = 1.0 - sine;\n    if (toggled(KEY_2)) sine = 1.0 / sine;\n    \n    fragColor = vec4(linColor(powLen * distortion * distortion - fractTime), 1.0) * sine;\n    //fragColor = vec4(sound, sound, sound, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 16257,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ottsonic/3-ott-owl-stretching-time"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}