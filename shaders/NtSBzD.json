{
    "Shader": {
        "info": {
            "date": "1651840383",
            "description": "net\nrefer to https://www.youtube.com/watch?v=3CycKKJiwis&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=19",
            "flags": 0,
            "hasliked": 0,
            "id": "NtSBzD",
            "likes": 13,
            "name": "Net-2D",
            "published": 3,
            "tags": [
                "2d",
                "noise"
            ],
            "usePreview": 0,
            "username": "fl0a1e",
            "viewed": 523
        },
        "renderpass": [
            {
                "code": "// \n// refer to https://www.youtube.com/watch?v=3CycKKJiwis&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=19\n// \n\n\n// return the distance from point uv to the line ab.\nfloat distLine2D(vec2 uv, vec2 a, vec2 b) {\n    vec2 uv_a = uv - a;\n    vec2 ab = b - a;\n    float t = clamp(dot(uv_a, ab)/dot(ab, ab), 0., 1.);  //t is the proportion of projection (line uv_a) to line ab.\n    return length(uv_a - t * ab);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b){\n    float d = distLine2D(p, a, b);\n    float m = smoothstep(0.03, 0.01, d);\n    m *= smoothstep(1.6, 0.0, length(b-a))+smoothstep(0.09, 0.04, abs(length(b-a)-0.75)); // if length(b-a) > 1.5, return 0.\n    return m;\n}\n\n// noise 0~1\n// you can try this function \"fract(cos(x*375.3434134)*0.3245*25.1247)\" in https://graphtoy.com/ to understand it.\nfloat noise21(vec2 p){\n    //p = fract(p * vec2(556.0862, 298.5618));\n    //p += dot(p, p + 25.34);     //cos() in here\n    //return fract(p.x*p.y);\n    float noi = fract(sin(dot(p, vec2(124.4134, 514.43123)))*556.0862);\n    return noi;\n    \n}\n\nvec2 noise22(vec2 p){\n    float n = noise21(p);\n    return vec2(n, noise21(p+n));\n}\n\n\nvec2 getPos(vec2 id, vec2 off){\n    vec2 n = noise22(id+off)*(iTime+16.1616);\n    return off+sin(n)*.4;\n}\n\n\nfloat layer(vec2 uv){\n    vec2 gv = fract(uv)-0.5;//\n    vec2 id = floor(uv);\n    \n    vec2 p[9];\n    int i = 0;\n    for(float y = -1.; y <= 1.; y++){\n        for(float x = -1.; x <= 1.; x++){\n            p[i++] = getPos(id, vec2(x,y));\n        }\n    }\n    \n    \n    float m = 0.;\n    for(int i = 0; i < 9; i++){\n        m += line(gv, p[4], p[i]);\n        \n        // spark\n        vec2 d = (p[i] - gv)*40.;\n        m += (1./dot(d, d))*(sin(p[i].x*10.+iTime*5.)*.5+.5);\n    }\n    m += line(gv, p[1], p[3]);\n    m += line(gv, p[1], p[5]);\n    m += line(gv, p[3], p[7]);\n    m += line(gv, p[5], p[7]);\n    \n    return m;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n    \n    uv*=10.;\n    \n    \n    float m = 0.;\n    for(float i = 0. ; i < 1.;i += 1./4.){\n        float z = fract(i+iTime*.3);\n        float size = mix(1.5, .5, z);\n        float fade = smoothstep(0., .2, z);\n        m += layer(uv*size+i*20.) * fade;\n    }\n    \n    \n    vec3 col = vec3(0.);\n    vec3 base = sin(iTime*vec3(.234325, .398579, .53783))*.5+.5;\n    col += vec3(m)*base;\n    col += uv.y*0.08*base;\n    \n    // ----------------------\n    // vec2 gv = fract(uv)-0.5;\n    // col.gb = gv.xy;\n    // if(gv.x>.48|| gv.y>.48)col=vec3(1., 0., .0);\n    // --------------------------------------------\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}