{
    "Shader": {
        "info": {
            "date": "1644251887",
            "description": "The world's only rotating boat lift, in Scotland - happy 20th birthday (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "sd2cW3",
            "likes": 25,
            "name": "Falkirk Wheel",
            "published": 3,
            "tags": [
                "water",
                "boat",
                "diorama",
                "canal",
                "engineer"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "// \"Falkirk Wheel\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Examine the gear mechanism\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nfloat tCur, dstFar, bLen, hGap, cRad, zMid, zLen, armAng, gState, bPos, bDir, bId;\nint idObj;\nconst int idBase = 1, idSup = 2, idArm = 3, idRing = 4, idAx = 5, idGate = 6, idGr1 = 7, idGr2 = 8,\n   idChan = 9, idRail = 10, idBoat = 11, idBoatH = 12, idTun = 13, idGrnd = 14, idWat = 15;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 pArm, pGate;\n  vec3 q, qq, sp;\n  vec2 db;\n  float dMin, d, dd, r, h, nt1, nt2, bGap, cCut;\n  dMin = dstFar;\n  pArm = vec4 (2.7, 1.2, 4.7, 5.19);\n  pGate = vec4 (0.85, 0.2, 0.05, 0.01);\n  bGap = bLen + 0.45;\n  cCut = bGap - 0.2;\n  nt1 = 60.;\n  nt2 = 20.;\n  p.y -= hGap + 0.15;\n  qq = p;\n  qq.xy = Rot2D (qq.xy, armAng);\n  sp = sign (vec3 (qq.x, p.yz));\n  q = p;\n  q.y -= - hGap - 1.05;\n  db = vec2 (hGap + 0.7, bLen + 0.6);\n  d = max (PrBoxDf (q, vec3 (db, 0.9).xzy), - PrCylDf (q - vec3 (0., hGap + 1., 0.),\n     db.x + 0.9, db.y - 0.3));\n  DMINQ (idBase);\n  q = qq;\n  d = max (PrBox2Df (q.xy, pArm.xy), pArm.z - length (vec2 (q.x, abs (q.y) - pArm.w)));\n  dd = cRad - length (vec2 (abs (q.x) - hGap, q.y));\n  d = SmoothMax (max (min (min (max (d, dd), abs (dd + 0.15) - 0.15),\n     max (max (max (length (vec2 (abs (q.x), sp.x * q.y)) - hGap - 1.4, sp.x * q.y - 3.),\n     hGap + 0.7 - abs (q.x)), sp.x * q.y)), dd), abs (abs (q.z) - bLen) - 0.1, 0.02);\n  DMINQ (idArm);\n  q = p;\n  q.xy = q.yx;\n  d = max (PrBox2Df (q.xy, pArm.xy), pArm.z - length (vec2 (q.x, abs (q.y) - pArm.w)));\n  dd = cRad - length (vec2 (abs (q.x) - hGap, q.y));\n  d = SmoothMax (max (min (max (d, dd), abs (dd + 0.15) - 0.15), - hGap - 0.25 - p.y),\n     max (- bGap - 0.2 - q.z, abs (mod (q.z, 2. * bGap) - bGap) - 0.15), 0.02);\n  d = max (d, q.z - zMid - zLen);\n  DMINQ (idSup);\n  q = qq;\n  d = PrCylDf (q, 0.3, bLen + 0.7);\n  DMINQ (idAx);\n  q.x = abs (q.x) - hGap;\n  q.xy = Rot2D (q.xy, - armAng * sp.x);\n  d = min (max (abs (length (q.xy) - cRad + 0.16) - 0.1, abs (q.y + 0.3) - 0.35),\n     max (abs (q.y + 0.5) - 0.15, abs (q.x) - 0.85));\n  d = max (d, abs (q.z) - cCut);\n  DMINQ (idChan);\n  d = max (max (abs (q.y + 0.18) - 0.1, abs (q.x) - cRad + 0.2), abs (q.z) - cCut);\n  DMINQ (idWat);\n  if (gState > 0. || gState == 0. && sp.y * sp.z < 0.) {\n    q.z = abs (q.z);\n    q.y += 0.2;\n    d = PrRoundBoxDf (q - vec3 (0., 0., cCut - 0.05), pGate.xyz - pGate.w, pGate.w);\n    DMINQ (idGate);\n    q.y -= 0.2;\n  }\n  q.x = abs (q.x) - 0.93;\n  d = min (PrCylDf (vec3 (q.xz, abs (q.y - 0.22) - 0.06).xzy, 0.02, bLen - 0.07),\n     max (abs (q.z) - bLen + 0.07, PrCylDf (vec3 (q.x, q.y - 0.14, mod (q.z + 0.2, 0.4) -\n     0.2).xzy, 0.02, 0.14)));\n  DMINQ (idRail);\n  q = p;\n  q.y -= hGap * sp.z;\n  dd = max (cCut - abs (q.z), abs (q.z - zMid) - zLen);\n  d = max (min (max (abs (length (q.xy) - cRad + 0.16) - 0.1, abs (q.y + 0.3) - 0.35),\n     max (abs (q.y + 0.5) - 0.15, abs (q.x) - 0.85)), dd);\n  DMINQ (idChan);\n  d = max (max (abs (q.y + 0.18) - 0.1, abs (q.x) - cRad + 0.2), dd);\n  DMINQ (idWat);\n  if (gState > 0.) {\n    q = p - vec3 (0., hGap * sp.z - 0.2, (cCut + 0.05) * sp.z);\n    d = PrRoundBoxDf (q, pGate.xyz - pGate.w, pGate.w);\n    DMINQ (idGate);\n  }\n  q = qq;\n  q.x = abs (q.x) - hGap;\n  q.xy = Rot2D (q.xy, - armAng * sp.x);\n  d = max (abs (length (q.xy) - cRad + 0.05) - 0.05, abs (abs (q.z) - bLen - 0.03) - 0.12);\n  DMINQ (idRing);\n  q.z -= bLen + 0.18;\n  d = max (abs (length (q.xy) - cRad - 0.02) - 0.09, abs (q.z) - 0.02);\n  q.xy = Rot2D (q.xy, 2. * pi * (floor (nt1 * atan (q.y, - q.x) / (2. * pi) + 0.5) / nt1));\n  d = max (d, - PrCaps2Df (vec2 (q.y, q.x + 1.2), 0.035, 0.01));\n  DMINQ (idGr1);\n  q = p;\n  q.z -= bLen + 0.18;\n  d = max (abs (length (q.xy) - cRad - 0.02) - 0.09, abs (q.z) - 0.02);\n  d = min (d, PrCylDf (vec3 (q.x, abs (q.y) - 1.05, q.z - 0.05), 0.07, 0.05));\n  q.xy = Rot2D (q.xy, 2. * pi * (floor (nt1 * atan (q.y, - q.x) / (2. * pi) + 0.5) / nt1));\n  d = max (d, - PrCaps2Df (vec2 (q.y, q.x + 1.2), 0.035, 0.01));\n  DMINQ (idGr1);\n  q = qq;\n  q.z -= bLen + 0.1;\n  q.x = abs (q.x) - 0.5 * hGap;\n  d = PrCylDf (q, 0.2, 0.06);\n  DMINQ (idArm);\n  d = PrCylDf (q, 0.45, 0.03);\n  q.xy = Rot2D (q.xy, (nt1 / nt2) * armAng * sp.x);\n  q.xy = Rot2D (q.xy, 2. * pi * (floor (nt2 * atan (q.y, - q.x) / (2. * pi) + 0.5) / nt2));\n  d = min (d, PrCylDf (q - vec3 (-0.4, 0., 0.05), 0.03, 0.06));\n  DMINQ (idGr2);\n  if (gState > 0.) {\n    q = qq;\n    bId = - sp.x;\n    q.x -= hGap * sp.x;\n    q.xy = Rot2D (q.xy, - armAng);\n  } else {\n    q = p;\n    bId = bDir * sp.y;\n    q.yz -= vec2 (hGap, bPos) * sp.y;\n  }\n  q.z *= bId;\n  d = max (PrCapsDf (q, 0.4, 1.), q.y);\n  DMINQ (idBoatH);\n  d = min (PrCapsDf (q - vec3 (0., 0., -0.1), 0.3, 0.75),\n     PrCylDf ((q - vec3 (0., 0.3, 0.6)).xzy, 0.1, 0.2));\n  DMINQ (idBoat);\n  q = p;\n  q.y += hGap + 0.15;\n  h = 0.2 * (Fbm2 (0.5 * q.xz) - 0.5) * smoothstep (0.9, 2., abs (q.x));\n  d = max (abs (PrRoundBoxDf (q - vec3 (0., 29.7 - h, zMid), vec3 (15., 10. + h, zLen - 15.),\n     20.)) - 0.2, dot (q.yz, sin (0.02 * pi + pi * vec2 (0.5, 1.))) - 7. + 2. * h);\n  d = max (d, - PrBox2Df (q.xz, db));\n  q.y -= hGap * (1. + sp.z) + 0.15;\n  q.z = abs (q.z - zMid) - zLen - 5.;\n  dd = max (q.z, zMid - ((sp.z > 0.) ? -3. : 12.) - q.z);\n  r = length (q.xy) - cRad;\n  if (dd < 0.) d = max (d, 0.2 - r);\n  DMINQ (idGrnd);\n  d = min (max (abs (r - 0.1) - 0.1, dd), max (r, abs (q.z) - 0.1));\n  DMINQ (idTun);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.02 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  vec3 col;\n  vec2 u;\n  float el, f;\n  rd.xz = Rot2D (rd.xz, 0.002 * tCur);\n  el = asin (rd.y);\n  u = vec2 (atan (rd.z, - rd.x) + pi, tan (2. * atan (0.5 * el))) / (2. * pi);\n  f = 32.;\n  col = mix (vec3 (0.1, 0.2, 0.4), vec3 (0.8), mix (Fbm2 (f * u),\n     Fbm2 (f * (u - vec2 (1., 0.))), u.x));\n  col = mix (col, vec3 (0.3, 0.4, 0.5), smoothstep (0.95, 0.98, abs (el) / (0.5 * pi)));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, rdo, vn, vnw;\n  vec2 vf;\n  float dstObj, tc, tg, spd, a, sh, nDotL;\n  bool isWat;\n  bLen = 2.5;\n  hGap = 3.2;\n  cRad = 1.1;\n  zMid = -10.;\n  zLen = 35.;\n  spd = 0.03;\n  tc = mod (spd * tCur, 1.);\n  bDir = - sign (tc - 0.5);\n  tg = 0.3;\n  gState = (0.5 - abs (tc - 0.5) > tg) ? 1. : 0.;\n  if (gState == 0.) {\n    bPos = 35. * (1. - smoothstep (0.1, 0.9, (0.5 - abs (tc - 0.5)) / tg));\n    armAng = 0.5 * pi;\n  } else {\n    bPos = 0.;\n    armAng = pi * (0.5 + smoothstep (0.2, 0.8, (tc - tg) / (1. - 2. * tg)) *\n       sign (2. * floor (mod (spd * tCur, 2.)) - 1.));\n  }\n  isWat = false;\n  rdo = rd;\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    dstObj = ObjRay (ro, rd);\n    if (k == 0 && dstObj < dstFar && idObj == idWat) {\n      ro += dstObj * rd;\n      vnw = VaryNf (vec3 (4., 4., 2.) * qHit + 0.5 * vec3 (0., 0., tCur), vec3 (0., 1., 0.), 0.2);\n      rd = reflect (rd, vnw);\n      ro += 0.01 * rd;\n      isWat = true;\n    } else break;\n  }\n  if (dstObj < dstFar) {\n    vf = vec2 (0.);\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idRing || idObj == idAx) a = atan (qHit.y, - qHit.x);\n    if (idObj <= idGr2) {\n      if (idObj == idBase) {\n        col4 = vec4 (0.7, 0.6, 0.5, 0.) * (0.8 + 0.2 * Fbm2 (32. *\n           (((abs (vn.z) < 0.99) ? qHit.xz : qHit.xy)))) * (0.9 + 0.1 *\n           smoothstep (0., 0.01, abs (fract (qHit.z) - 0.5) - 0.02));\n        vf = vec2 (64., 1.);\n      } else if (idObj == idSup) {\n        col4 = vec4 (0.8, 0.8, 0.8, 0.2) * (0.8 + 0.2 * smoothstep (0., 0.01,\n           abs (abs (abs (qHit.x) - 1.6) - 0.1) - 0.01));\n        vf = vec2 (64., 0.3);\n      } else if (idObj == idArm) {\n        col4 = vec4 (0.95, 0.95, 0.6, 0.2);\n        if (abs (qHit.x) < hGap) col4 *= (0.8 + 0.2 * smoothstep (0., 0.01,\n           abs (abs (qHit.y) - 0.3) - 0.01));\n        vf = vec2 (64., 0.2);\n      } else if (idObj == idRing) {\n        col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.8 + 0.2 * smoothstep (0., 0.01,\n           abs (fract (60. * a / (2. * pi)) - 0.5) - 0.05));\n      } else if (idObj == idAx) {\n        col4 = vec4 (0.8, 0.8, 0.8, 0.2) * (0.9 + 0.1 * step (0., cos (8. * a)));\n      } else if (idObj == idGate) {\n        col4 = vec4 (0.4, 0.5, 0.2, 0.1) * (0.8 + 0.2 * step (0., PrBox2Df (qHit.xy,\n           vec2 (0.7, 0.1))));\n      } else if (idObj == idGr1) {\n        col4 = vec4 (0.8, 0.6, 0.2, 0.2);\n      } else if (idObj == idGr2) {\n        col4 = vec4 (0.9, 0.7, 0.2, 0.2);\n      }\n    } else {\n      if (idObj == idChan) {\n        col4 = vec4 (0.8, 0.9, 1., 0.1) * (0.8 + 0.2 * smoothstep (0., 0.01,\n           abs (abs (qHit.x) - 0.8) - 0.01));\n        vf = vec2 (64., 0.2);\n      } else if (idObj == idRail) {\n        col4 = vec4 (0.9, 0.9, 1., 0.2);\n      } else if (idObj == idBoatH) {\n        col4 = vec4 (0.5, 0.3, 0.1, 0.);\n      } else if (idObj == idBoat) {\n        if (abs (qHit.y - 0.15) < 0.03 || qHit.y > 0.4) col4 = vec4 (1., 0., 0., 0.2);\n        else col4 = (bId > 0.) ? vec4 (0.3, 0.8, 0.8, 0.2) : vec4 (0.8, 0.8, 0.3, 0.2);\n      } else if (idObj == idTun) {\n        col4 = vec4 (0.7, 0.6, 0.5, 0.) * (0.8 + 0.2 * smoothstep (0.,0.01,\n           abs (fract (qHit.z) - 0.5) - 0.01));\n        vf = vec2 (64., 1.);\n      } else if (idObj == idGrnd) {\n        col4 = mix (vec4 (0., 0.5, 0., 0.), vec4 (0.1, 0.45, 0.1, 0.), smoothstep (0.4, 0.6,\n           Fbm2 (0.5 * ro.xz)));\n        vf = vec2 (4., 1.);\n      }\n    }\n    if (vf.y > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n    nDotL = max (dot (vn, sunDir), 0.);\n    if (idObj == idArm || idObj == idGr1 || idObj == idGr2) nDotL *= nDotL;\n    sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n    col = col4.rgb * (0.2 + 0.1 * max (- dot (vn, normalize (vec3 (sunDir.xz, 0.)).xzy), 0.) +\n       0.8 * sh * nDotL) + col4.a * step (0.95, sh) * pow (max (dot (sunDir,\n       reflect (rd, vn)), 0.), 32.);\n  } else {\n    col = SkyCol (rd);\n  }\n  if (length (vec2 (ro.x, ro.y - 0.05 - hGap * (1. + sign (ro.z)))) < 1.1 * cRad)\n     col *= 0.2 + 0.8 * smoothstep (0., 1., zLen - ((sign (ro.z) > 0.) ? 10. : 5.) - abs (ro.z));\n  if (isWat) col = mix (vec3 (0., 0.1, 0.), 0.9 * col, 1. - 0.8 * pow (dot (- rdo, vnw), 2.));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, mMid, ut, mSize, msw;\n  float el, az, zmFac, asp, sr;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./5.) * vec2 (asp, 1.);\n  mMid = (1. - mSize.y) * vec2 (asp, -1.);\n  ut = abs (uv - mMid) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    msw = 2. * mPtr.xy - mMid / vec2 (asp, 1.);\n    if (Maxv2 (abs (msw)) < mSize.y) {\n      regId = 1;\n      msw /= 2. * mSize.y;\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (Maxv2 (ut) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    vuId = 1;\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * msw.x;\n    el += 0.7 * pi * msw.y;\n  } else {\n    az += 0.9 * pi * (2. * SmoothBump (0.25, 0.75, 0.24, mod (0.01 * tCur, 1.)) - 1.);\n    el -= 0.07 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.35 * pi, -0.08 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 3., -30.);\n  zmFac = (vuId == 0) ? 3.5 : 7.;\n  dstFar = 150.;\n  sunDir = vuMat * normalize (vec3 (-1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (Maxv2 (ut) < 0. && Minv2 (abs (ut)) * canvas.y < 3.) col = vec3 (0.8, 0.5, 0.2);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (p - vec2 (0., clamp (p.y, - h, h))) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}