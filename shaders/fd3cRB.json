{
    "Shader": {
        "info": {
            "date": "1653592438",
            "description": "Could be useful for texturing pixel art, or something else :)\n\nPlay around with th and s, you can get other patterns really easily\n\nUsed to generate shapes:\nhttps://www.shadertoy.com/view/7s3cRS",
            "flags": 48,
            "hasliked": 0,
            "id": "fd3cRB",
            "likes": 4,
            "name": "Nice Pattern Automata",
            "published": 3,
            "tags": [
                "feedback",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nvec3 pal(float t, vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float zm = 0.14; \n    vec2 res = floor(iResolution.xy);    \n    vec2 f = mod(floor(32. * iTime) + fragCoord, res);\n    \n    vec3 col = texelFetch( iChannel0, ivec2(zm * f + 0.5 * (1.-zm) * res), 0).rgb;\n    col.b = col.g;\n    col = pal(0.75 + 0.35 * col.g + 0.5 * uv.y, 0.5 * vec3(2,1,3)/3.);\n    \n    fragColor.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nfloat cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).g;\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    ivec2 px = ivec2(f);\n    int frame = iFrame % 1200;\n    \n    ivec2 g = ivec2(f + vec2(100.,151.) * iTime * 60.) & 1023;\n    float rand = texelFetch(iChannel2, g, 0).r;\n    \n    if (frame == 0 || key_down(KEY_RESET)) {      \n        return;\n    }\n           \n    // Center cell\n    float e = cell(px);\n    \n    // Neighbour cells\n    float b = cell(px - ivec2(0,1));\n    float t = cell(px + ivec2(0,1));\n    float l = cell(px - ivec2(1,0));\n    float r = cell(px + ivec2(1,0));   \n    float bl = cell(px + ivec2(-1,-1));\n    float br = cell(px + ivec2(1, -1));\n    float tl = cell(px + ivec2(-1, 1));\n    float tr = cell(px + ivec2(1,  1));   \n    \n    float sum = b + t + l + r;\n    float diag = bl + br + tl + tr;\n    float dif = abs(b-t) * abs(l-r);\n    \n    sum += diag;\n    \n    //e = clamp(e - 0.001, 0., 1.);    \n    //rand = step(0.9, rand);\n    \n    // > 0 and < 1\n    float th = 0.5; // 0.9\n    \n    // between 0 and 7 ish\n    float s = 3.5;\n    \n    if (e <= 0. && rand >= th && sum <= s)\n        e = (rand - th) / (1.-th);\n    else if (sum >= s || dif >= 0.75) // dif makes corners rounder (maybe)\n        e = 0.;\n        \n    col.g = e;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}