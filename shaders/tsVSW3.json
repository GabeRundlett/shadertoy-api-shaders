{
    "Shader": {
        "info": {
            "date": "1575228790",
            "description": "What to do with the excess production... (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "tsVSW3",
            "likes": 13,
            "name": "Trux in Space",
            "published": 3,
            "tags": [
                "raymarch",
                "repetition",
                "truck",
                "tesla"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 581
        },
        "renderpass": [
            {
                "code": "// \"Trux in Space\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA    1   // optional antialisaing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 StdVuMat (float el, float az);\nvec3 Hashv3v3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nmat3 flMat;\nvec3 trkAx, trkAy, trkFx, trkFy, flPos, ltDir, cId, obRnd, obDisp;\nvec2 obRotCs;\nfloat bGrid, tCur, dstFar, spd, obOcc, szFac;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkAx, cos (trkFx * t)), dot (trkAy, cos (trkFy * t)), t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (- dot (trkFx * trkAx, sin (trkFx * t)),\n     - dot (trkFy * trkAy, sin (trkFy * t)), 1.);\n}\n\nvec3 TrackAcc (float t)\n{\n  return vec3 (- dot (trkFx * trkFx * trkAx, cos (trkFx * t)),\n     - dot (trkFy * trkFy * trkAy, cos (trkFy * t)), 0.);\n}\n\nvoid ObjState ()\n{\n  obRnd = Hashv3v3 (cId);\n  obDisp = vec3 (0.6, 0.6, 0.2) * bGrid * (obRnd - 0.5);\n  obRotCs = cos (0.2 * pi * (obRnd.z - 0.5) * sin (1.5 * pi * (obRnd.y - 0.5) * tCur) +\n     vec2 (0., 0.5 * pi));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, b;\n  float dMin, d, h;\n  dMin = dstFar / szFac;\n  p = (p - obDisp) / szFac;\n  p = vec3 (Rot2Cs (p.xy, obRotCs.xy), - p.z);\n  b = vec3 (1.3, 0.9, 3.);\n  q = p;\n  b.x -= 0.2 * abs (q.y + 0.02 * q.z + 0.1);\n  h = ((q.z > 0.5) ? 0.21 : 0.13) * abs (q.z - 0.5);\n  q.y -= - h;\n  b.yz -= vec2 (h, 0.1 * abs (q.y - 0.3));\n  d = max (PrBoxDf (q, b), - PrBoxDf (p - vec3 (0., 0.1, -2.), vec3 (1.15, 0.5, 0.9)));\n  q = p;\n  q.xz = abs (q.xz) - vec2 (1.1, 2.);\n  h = 0.15 * abs (q.z);\n  q.y += 0.8 + h;\n  d = max (d, - PrBoxDf (q, vec3 (0.15, 0.4, 0.6) - vec3 (0., h, 0.6 * q.y)));\n  DMIN (1);\n  q = vec3 (p.x, p.y + 0.95, abs (p.z) - 2.);\n  d = PrCylDf (q.yzx, 0.08, 1.4);\n  DMIN (2);\n  q = p;\n  q.y -= -0.88;\n  d = PrBoxDf (q, vec3 (1.3, 0.03, 1.4));\n  DMIN (3);\n  q = vec3 (abs (p.xz) - vec2 (1.18, 2.), p.y + 0.95).xzy;\n  d = PrRoundCylDf (q.yzx, 0.48, 0.07, 0.2);\n  DMIN (4);\n  return 0.7 * szFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 cIdP, p, s, rdi;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi = 1. / rd;\n  cIdP = vec3 (-999.);\n  dHit = eps;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p / bGrid);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    s = (bGrid * (cId + step (0., rd)) - p) * rdi;\n    d = abs (Minv3 (s)) + eps;\n    if (obRnd.x < obOcc && length (cId.xy - floor (TrackPath (bGrid * cId.z).xy / bGrid)) >= 1.)\n       d = min (d, ObjDf (p - (bGrid * (cId + 0.5))));\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 ObjCol (vec3 p)\n{\n  vec4 col4;\n  float z, r, s;\n  p = (p - obDisp) / szFac;\n  p = vec3 (Rot2Cs (p.xy, obRotCs.xy), - p.z);\n  col4 = vec4 (0.7, 0.1, 0.1, 0.4);\n  if (idObj == 1) {\n    z = abs (p.z - 0.5);\n    if (p.y > 0.15 && abs (z - 0.78) < 0.72 && (abs (p.x) < 1.2 - 0.2 * p.y ||\n       p.y < 0.85 - 2. * ((p.z > 0.5) ? 0.21 : 0.13) * z)) col4 = vec4 (0., 0., 0., -2.);\n    else if (p.z < - 2.98 && abs (p.y + 0.1) < 0.05 && abs (p.x) < 1.25)\n       col4 = vec4 (1., 0., 0., -1.);\n    else if (p.z > 2.98 && abs (p.y + 0.2) < 0.05 && abs (p.x) < 1.25)\n       col4 = vec4 (1., 1., 0.8, -1.);\n    else if (p.y < - 0.75 || abs (p.y) < 0.85 && z < 0.008 || \n       abs (p.y + 0.09) < 0.31 && abs (p.z - 2.01) < 0.008 ||\n       abs (p.y + 0.15) < 0.61 && abs (p.z + 1.01) < 0.008) col4.rgb *= 0.6;\n    else if (p.z > 2.8 && abs (p.y + 0.5) < 0.15 && abs (p.x) < 0.8)\n       col4.rgb *= 1. - 0.3 * step (0.2, cos (8. * pi * p.x));\n    else if (p.y > -0.5 && abs (p.x) < 1.1 && abs (p.z + 2.) < 0.85)\n       col4.rgb *= 0.9 + 0.1 * cos (16. * pi * p.x);\n  } else if (idObj == 2) {\n    col4 = vec4 (0.3, 0.3, 0.4, 0.1);\n  } else if (idObj == 3) {\n    col4.rgb *= 0.4;\n  } else if (idObj == 4) {\n    s = sign (p.z);\n    p = vec3 (abs (p.xz) - vec2 (1.18, 2.), p.y + 0.95).xzy;\n    r = length (p.yz);\n    if (r < 0.2) {\n      p.yz = Rot2D (p.yz, - pi * tCur * s);\n      if (abs (abs (p.y) - abs (p.z)) < 0.1) col4 = vec4 (0.9, 0.9, 1., 0.3);\n    } else if (r > 0.3) col4 = vec4 (0.15, 0.15, 0.15, 0.) * (0.7 + 0.3 * step (0., cos (32. * pi * p.x)));\n  }\n  return col4;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 4. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ErCol (vec3 rd)\n{\n  vec3 erDir, col, vn;\n  float erRad, bs, ts;\n  erDir = normalize (vec3 (0.02, -0.04, 1.));\n  erRad = 0.025;\n  col = vec3 (0.);\n  bs = dot (rd, erDir);\n  ts = bs * bs - 1. + erRad * erRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - erDir) / erRad);\n      col = mix (vec3 (0.3, 0.4, 0.8), vec3 (1., 1., 0.95),\n         smoothstep (0.2, 0.8, Fbm2 (6. * vn.xy + 7.1))) * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n    }\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, nDotL;\n  bool isBg, isRefl;\n  isRefl = false;\n  isBg = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    cId = floor (ro / bGrid);\n    ObjState ();\n    ro -= bGrid * (cId + 0.5);\n    vn = ObjNf (ro);\n    vn.xy = Rot2Cs (vn.xy, vec2 (obRotCs.x, - obRotCs.y));\n    col4 = ObjCol (ro);\n    col4.rgb *= 1. - 0.7 * smoothstep (0.6, 1., dstObj / dstFar);\n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, ltDir), 0.);\n      col = col4.rgb * (0.2 + 0.8 * nDotL * nDotL) +\n         col4.a * pow (max (dot (reflect (rd, vn), ltDir), 0.), 16.);\n      if (idObj == 1) col += 0.2 * StarPat (reflect (rd, vn), 16.);\n    } else if (col4.a == -1.) {\n      col = col4.rgb * (0.2 - 0.8 * dot (rd, vn));\n    } else if (col4.a == -2.) {\n      rd = reflect (rd, vn);\n      isRefl = true;\n      isBg = true;\n    }\n  } else isBg = true;\n  if (isBg) {\n    col = ErCol (rd);\n    if (length (col) < 0.03) col += StarPat (rd, 16.);\n    if (isRefl) col *= 0.8;\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid FlyerPM (float s, float rl, float vu)\n{\n  vec3 vel, ort, ca, sa;\n  float el, az;\n  flPos = TrackPath (s);\n  vel = normalize (TrackVel (s));\n  el = - asin (vel.y);\n  az = atan (vel.z, vel.x) - 0.5 * pi;\n  rl = clamp (rl - 3. * TrackAcc (s).x, -0.4 * pi, 0.4 * pi);\n  ort = (vu >= 0.) ? vec3 (el, az, rl) : vec3 (- el, az + pi, - rl);\n  ca = cos (ort);\n  sa = sin (ort);\n  flMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  spd = 1.;\n  obOcc = 0.5;\n  szFac = 0.12;\n  tCur = mod (tCur, 1800.) + 11.1;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.2 * pi * mPtr.y;\n  } else {\n    az += 0.3 * pi * SmoothBump (0.2, 0.7, 0.15, mod (0.03* tCur, 1.)) * (2. * mod (floor (0.03 * tCur), 2.) - 1.);\n  }\n  vuMat = StdVuMat (el, az);\n  bGrid = 1.;\n  trkAx = 0.5 * vec3 (0.7, 0.8, 1.2);\n  trkAy = 0.5 * vec3 (1., 1.1, 0.9);\n  trkFx = vec3 (0.43, 0.33, 0.23);\n  trkFy = vec3 (0.41, 0.31, 0.12);\n  FlyerPM (spd * tCur, 0.1 * pi * (Fbm1 (0.1 * tCur) - 0.5), 1.);\n  ro = flPos;\n  zmFac = 5.;\n  dstFar = 50.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    rd = vuMat * (rd * flMat);\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (clamp (col, 0., 1.), vec3 (0.6)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec3 Hashv3v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec3 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}