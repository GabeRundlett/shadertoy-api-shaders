{
    "Shader": {
        "info": {
            "date": "1567245720",
            "description": "Playing with my shader from yesterday",
            "flags": 0,
            "hasliked": 0,
            "id": "3tBXWc",
            "likes": 5,
            "name": "ShaderDojo 036",
            "published": 3,
            "tags": [
                "raymarching",
                "volume",
                "experiment",
                "training"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\n#define RID(p, r) (floor((p + r/2.) / r))\n#define REP(p, r) (mod(p + r/2., r) - r /2.)\n\n//from https://www.shadertoy.com/view/XlfGzr\nfloat random(float p) {\n  \treturn fract(sin(p)*1e5);\n}\n\nfloat hash21(vec2 p) {\n  \treturn random(p.x + p.y*1e5);\n}\n\n// hash and noise from shane's : https://www.shadertoy.com/view/ldscWH\nvec3 hash33(vec3 p) { \n\n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n)*2. - 1.;\n}\n\nfloat tetraNoise(in vec3 p)\n{\n    vec3 i = floor(p + dot(p, vec3(0.333333)) );  p -= i - dot(i, vec3(0.166666)) ;\n    \n    vec3 i1 = step(p.yzx, p), i2 = max(i1, 1.0-i1.zxy); i1 = min(i1, 1.0-i1.zxy);    \n    \n    vec3 p1 = p - i1 + 0.166666, p2 = p - i2 + 0.333333, p3 = p - 0.5;\n  \n    vec4 v = max(0.5 - vec4(dot(p,p), dot(p1,p1), dot(p2,p2), dot(p3,p3)), 0.0);\n    vec4 d = vec4(dot(p, hash33(i)), dot(p1, hash33(i + i1)), dot(p2, hash33(i + i2)), dot(p3, hash33(i + 1.)));\n    \n    return clamp(dot(d, v*v*v*8.)*1.732 + .5, 0., 1.); \n}\n\n// from iq\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nmat2 rot(float a)\n{\n    float ca = cos(a); float sa = sin(a);\n    return mat2(ca,-sa,sa,ca);\n}\n\nfloat overCurve(float t)\n{\n    return sin(t * PI * .5);\n}\n\nfloat underCurve(float t)\n{\n    return 1. - cos(t * PI * .5);\n}\n\nfloat map(vec3 p)\n{\n    vec3 cp = p;\n    //p.xz *= rot(iTime * .25);\n    \n    float volNoise = tetraNoise(p * .1125 - vec3(0.,0.,-iTime * 2.5));\n    volNoise = overCurve(volNoise);\n    volNoise = volNoise * volNoise  * 4.;\n    float dist =3.95 - volNoise;\n    \n    float repSize = 10.;\n    vec2 rid = RID(p.xy, repSize);\n    p.xy = REP(p.xy, repSize);\n    \n    float cellNoise = hash21(rid);\n    \n    float cylRadius = overCurve(sin(iTime * 2. + p.z * .1 + cellNoise * 10.) * .5 + .5) * 3.;\n    float cyl = cylRadius - length(p.xy + vec2(cellNoise * 2.));\n    cyl = clamp(cyl,0.,1.);\n    dist *= cyl;\n    p = cp;\n    dist *= clamp(length(p.xy) - repSize*.5,0.,1.);\n    //p = abs(p);\n\t//float cu = max(p.x, max(p.y, p.z));\n\t//    dist = min(dist, 3. - cu);\n    \n    return dist;\n}\n\nfloat volRay(in vec3 ro, in vec3 rd, float maxDist)\n{\n\tfloat nbSample = 60.;\n    float acc = 0.;\n    \n    for(float i = 1.; i > 0.; i -= 1. / nbSample)\n    {\n        vec3 p = ro + rd * maxDist * i;\n        acc += max(0., map(p)) / nbSample;\n        if(acc >= 1.)\n        {\n          //  break;\n        }\n    }\n    \n    return clamp(acc, 0. ,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y;\n\n    vec3 ro = vec3(0.,0.,-10.);\n    vec3 cp = ro;\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float vol = volRay(ro, rd, 100.);\n\tvol *= 2.;\n    vol *= vol;\n    vec3 noColor = vec3(0.,0.,0.);\n    vec3 fullColor = vec3(.6,.4,.37) * 2.;\n    \n    vec3 col = mix(noColor, fullColor, vol);\n\n    // Output to screen\n    fragColor = vec4(col, 0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}