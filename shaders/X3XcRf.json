{
    "Shader": {
        "info": {
            "date": "1726477372",
            "description": "Made by Rik Riesmeijer, 2024 - No rights reserved. Just building up my CC0 stuff further, enjoy!",
            "flags": 0,
            "hasliked": 0,
            "id": "X3XcRf",
            "likes": 2,
            "name": "Pseudo Hash Suite, All 16 Pairs.",
            "published": 3,
            "tags": [
                "test",
                "hash",
                "hash24",
                "hash44",
                "hash41",
                "hash12",
                "hash23",
                "hash21",
                "hash22",
                "suite",
                "hash11",
                "hash13",
                "hash14",
                "hash31",
                "hash32",
                "hash33",
                "hash34",
                "hash43",
                "hash42"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 70
        },
        "renderpass": [
            {
                "code": "// Pseudo Hash Suite, All 16 Pairs.\n// Made by Rik Riesmeijer, 2024 - No rights reserved.\n// License: Copyright-Free, (CC0), Citing this source is not required.\n// Notice: No QA has been done as of now (sep 2024), user discretion is adviced.\n\n// Convenient helper functions that do salting etc.\nuvec4 rndU44(uvec4 u) { return u.yzwx * u.zwxy ^ u; }\nuvec4 h44uvc(vec4  c) { return uvec4(c * 22.33 + 33.33); }\nvec4  hlpr24(vec4  c) { return fract(fract(c) / fract(c.wxyz * c.zwxy + c.yzwx)); }\nvec4  colc44(vec4  c) { return smoothstep(0.4, 0.6, c / 43e8); }\nvec3  hlpr23(vec2  v) { return fract(fract(v *= v.y + 333.3).xyx / fract(v.yxy * v.xxy)); }\nvec2  h1toh2(float x) { return vec2(x / modf(x, x), x / 33e3 + 0.03); }\nvec4  h3toh4(vec3  p) { return vec4(p.x * p.y + p.z, p); }\nvec4  h2toh4(vec2  v) { return vec4(v / 3.33 + 321.0, v * 1e3 + 333.3); }\nfloat v2tofl(vec2  v) { return v.x * (v.y / 12.34 + 56.78); }\n\n// Four dimensional input versions of hashing.\nvec4  hash44(vec4  c) { return colc44(vec4(rndU44(rndU44(h44uvc(c))))); }\nvec3  hash43(vec4  c) { return hash44(c).xyz; }\nvec2  hash42(vec4  c) { return hash44(c).yz; }\nfloat hash41(vec4  c) { return hash44(c).w; }\n\n// Three dimensional input versions of hashing.\nvec4  hash34(vec3  p) { return hash44(h3toh4(p));}\nvec3  hash33(vec3  p) { return hash43(h3toh4(p));}\nvec2  hash32(vec3  p) { return hash42(h3toh4(p));}\nfloat hash31(vec3  p) { return hash41(h3toh4(p));}\n\n// Two dimensional input versions of hashing.\nvec4  hash24(vec2  v) { return hash44(v.xyxx * iResolution.xyzz + v.yxyx); }\nvec3  hash23(vec2  v) { return hash24(v).xyz; }\nvec2  hash22(vec2  v) { return hash24(v).xy; }\nfloat hash21(vec2  v) { return hash24(v).x; }\n\n// One dimensional input versions of hashing.\nvec4  hash14(float x) { return hash24(h1toh2(x)); }\nvec3  hash13(float x) { return hash23(h1toh2(x)); }\nvec2  hash12(float x) { return hash22(h1toh2(x)); }\nfloat hash11(float x) { return hash21(h1toh2(x)); }\n\n//+----------+\n//|//////////|\n//|///DEMO///|\n//|//////////|\n//|/+------+/| |\n//|/|      |/|_|_\n//|/|      |/|\\ /\n//+-+      +-+ v\n\n// Hashing showcase as demo of the above functions.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Clear the fragment color.\n    fragColor -= fragColor;\n\n    // Set up the inputs for our showcase.\n    vec2  v = fragCoord + sin(0.1 * iTime);\n    float x = v2tofl(v);\n    vec4  c = vec4(v / 3.3 + 321.0, v * 1e3 + 333.3);\n    vec3  p = c.xyz;\n    \n    // Set up grid indicators for switch.\n    ivec2 xy = ivec2(v / iResolution.xy * 4.0);\n    int   id = 4 * xy.y + xy.x;\n    \n    // We draw a 4 by 4 grid with each hashing function case by case.\n    vec4 result;\n    switch(id) {\n    \n        // Monochrome outputs.     \n        case 0:\n            result += hash41(c);\n            break;\n        case 1:\n            result += hash31(p);\n            break;\n        case 2:\n            result += hash21(v);\n            break;\n        case 3:\n            result += hash11(x);\n            break;\n            \n        // Two colors used s.t. r = a and g = b.    \n        case 4:\n            result += hash42(c).xyyx;\n            break;\n        case 5:\n            result += hash32(p).xyyx;\n            break;\n        case 6:\n            result += hash22(v).xyyx;\n            break;\n        case 7:\n            result += hash12(x).xyyx;\n            break;\n            \n        // RGB colors.\n        case 8:\n            result = vec4(hash43(c), 1);\n            break;\n        case 9:\n            result = vec4(hash33(p), 1);\n            break;\n        case 10:\n            result = vec4(hash23(v), 1);\n            break;\n        case 11:\n            result = vec4(hash13(x), 1);\n            break;\n        \n        // Full RGBA colors.\n        case 12:\n            result  = hash44(c);\n            break;\n        case 13:\n            result  = hash34(p);\n            break;\n        case 14:\n            result  = hash24(v);\n            break;\n        case 15:\n            result  = hash14(x);\n            break;\n    }\n    \n    // Draw borders for each hashing showcase.\n    v = v / iResolution.xy * 4.0;\n    v = fract(v) * fract(-v);\n    float bordervis = smoothstep(0.012, 0.013, min(v.y, v.x));\n    fragColor = mix(vec4(0.1, 0.2, 0.3, 1), result, bordervis);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}