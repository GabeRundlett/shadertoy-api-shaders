{
    "Shader": {
        "info": {
            "date": "1495725052",
            "description": "Dogfooding my UI shader framework by adding some controls to an old shadertoy.\nOriginal Here:\nhttps://www.shadertoy.com/view/ldB3Rz\nUI Framework Here:\nhttps://www.shadertoy.com/view/Xs2cR1",
            "flags": 48,
            "hasliked": 0,
            "id": "Msffzn",
            "likes": 61,
            "name": "Larval + GUI",
            "published": 3,
            "tags": [
                "test",
                "kifs",
                "ui"
            ],
            "usePreview": 1,
            "username": "P_Malin",
            "viewed": 2174
        },
        "renderpass": [
            {
                "code": "// UI Framework Example. Based on:\n// Larval - @P_Malin\n// https://www.shadertoy.com/view/ldB3Rz\n// Super Shader GUI - @P_Malin\n// https://www.shadertoy.com/view/Xs2cR1\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Some kind of alien fractal thingy.\n// A hacked together KIFS doodle.\n// The fractal parameters aren't that exciting but I like the pretty colours :D\n\n#define iChannelUI iChannel1\n\nfloat UI_GetFloat( int iData )\n{\n    return texelFetch( iChannelUI, ivec2(iData,0), 0 ).x;\n}\n\nbool UI_GetBool( int iData )\n{\n    return UI_GetFloat( iData ) > 0.5;\n}\n\nvec3 UI_GetColor( int iData )\n{\n    return texelFetch( iChannelUI, ivec2(iData,0), 0 ).rgb;\n}\n\n\nvoid UI_Compose( vec2 fragCoord, inout vec3 vColor, out int windowId, out vec2 vWindowCoord )\n{\n    vec4 vUISample = texelFetch( iChannelUI, ivec2(fragCoord), 0 );\n    \n    if ( fragCoord.y < 2.0 )\n    {\n        // Hide data\n        vUISample = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n    \n    vColor.rgb = vColor.rgb * (1.0f - vUISample.w) + vUISample.rgb;\n    \n    windowId = -1;\n    vWindowCoord = vec2(0);\n    \n    if ( vUISample.a < 0.0 )\n    {\n        vWindowCoord = vUISample.rg;\n        windowId = int(round(vUISample.b));\n    }\n}\n\nconst int\n     DATA_UICONTEXT\t\t\t\t\t\t= 0\n\t,DATA_WINDOW_CONTROLS   \t\t\t= 2\n\t,DATA_SCROLLBAR_CONTROLS_WINDOW\t\t= 3\n    ,DATA_ANIMATE\t\t\t\t\t\t= 4\n\t,DATA_ROT_X\t\t\t\t\t\t\t= 5\n\t,DATA_ROT_Y\t\t\t\t\t\t\t= 6\n    ,DATA_EDIT_WHICH_COLOR              = 7\n    ,DATA_WINDOW_EDIT_COLOR \t\t\t= 8\n\t,DATA_BACKGROUND_COLOR        \t\t= 9\n\t,DATA_INTENSITY\t\t\t\t\t\t= 10\n    ,DATA_EXPOSURE\t\t\t\t\t\t= 11\n    ;\n \n\n// ---------------------- 8< --------------------- 8< --------------------------\n\n\n#define kRaymarchIterations 24\n#define kIFSIterations 16\n\nfloat kExposure = 0.1;\n\n#define TEMPERATURE 2200.0\n\nvec3 blackbody(float t)\n{\n    t *= TEMPERATURE;\n    \n    float u = ( 0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * t*t ) \n            / ( 1.0 + 8.42420235e-4 * t + 7.08145163e-7 * t*t );\n    \n    float v = ( 0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * t*t ) \n            / ( 1.0 - 2.89741816e-5 * t + 1.61456053e-7 * t*t );\n\n    float x = 3.0*u / (2.0*u - 8.0*v + 4.0);\n    float y = 2.0*v / (2.0*u - 8.0*v + 4.0);\n    float z = 1.0 - x - y;\n    \n    float Y = 1.0;\n    float X = Y / y * x;\n    float Z = Y / y * z;\n\n    mat3 XYZtoRGB = mat3(3.2404542, -1.5371385, -0.4985314,\n                        -0.9692660,  1.8760108,  0.0415560,\n                         0.0556434, -0.2040259,  1.0572252);\n\n    return max(vec3(0.0), (vec3(X,Y,Z) * XYZtoRGB) * pow(t * 0.0004, 4.0));\n}\n\n\n// KIFS parameters\nconst float fScale=1.25;\nvec3 vOffset = vec3(-1.0,-2.0,-0.2);\t\nmat3 m;\n\nconst float kFarClip = 30.0;\n\nvec2 GetSceneDistance( in vec3 vPos )\n{\n\tfloat fTrap = kFarClip;\n\t\n\tfloat fTotalScale = 1.0;\n\tfor(int i=0; i<kIFSIterations; i++)\n\t{\t\n\t\tvPos.xyz = abs(vPos.xyz);\n\t\tvPos *= fScale;\n\t\tfTotalScale *= fScale;\n\t\tvPos += vOffset;\n\t\tvPos.xyz = (vPos.xyz) * m;\n\t\t\n\t\tfloat fCurrDist = length(vPos.xyz) * fTotalScale;\n\t\t//float fCurrDist = max(max(vPos.x, vPos.y), vPos.z) * fTotalScale;\n\t\t//float fCurrDist = dot(vPos.xyz, vPos.xyz);// * fTotalScale;\t\t\n\t\tfTrap = min(fTrap, fCurrDist);\n\t}\n\n\tfloat l = length(vPos.xyz) / fTotalScale;\n\t\n\tfloat fDist = l - 0.1;\n\treturn vec2(fDist, fTrap);\n}\n\nvec4 Raycast( const in vec3 vOrigin, const in vec3 vDir )\n{\n\tfloat fClosest = kFarClip;\n\tvec2 d = vec2(0.0);\n\tfloat t = 0.01;\n\tfor(int i=0; i<kRaymarchIterations; i++)\n\t{\n\t\td = GetSceneDistance(vOrigin + vDir * t);\n\t\tfClosest = min(fClosest, d.x / t);\n\t\tif(abs(d.x) < 0.0001)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tt += d.x;\n\t\tif(t > kFarClip)\n\t\t{\n\t\t\tt = kFarClip;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn vec4(t, d.x, d.y, fClosest);\n}\n\nvec3 GetSceneNormal( const in vec3 vPos )\n{\n    const float fDelta = 0.000001;\n\n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n    float f1 = GetSceneDistance( vPos + vOffset1 ).x;\n    float f2 = GetSceneDistance( vPos + vOffset2 ).x;\n    float f3 = GetSceneDistance( vPos + vOffset3 ).x;\n    float f4 = GetSceneDistance( vPos + vOffset4 ).x;\n\n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n    return normalize( vNormal );\n}\n\nvec3 TraceRay( const in vec3 vOrigin, const in vec3 vDir )\n{\t\n\tvec4 vHit = Raycast(vOrigin, vDir);\n\t\n\tvec3 vHitPos = vOrigin + vDir * vHit.x;\n\tvec3 vHitNormal = GetSceneNormal(vHitPos);\n\t\n\tfloat fShade = 1.0;\n\tfloat fGlow = 0.0;\n\tvec3 vEnvDir = vDir;\n\tif(vHit.x < kFarClip)\n\t{\n\t\tvEnvDir = reflect(vDir, vHitNormal);\n\t\tfGlow = clamp(1.2 - vHit.z * 0.1, 0.0, 1.0);\n\t\tfGlow = pow(fGlow, 2.0);\n\t\tfShade = fGlow;\n\t}\n\t\n\tvec3 vEnv = texture(iChannel0, vEnvDir).rgb;\n\tvEnv = vEnv * vEnv;\t\n\tvEnv = -log2(1.0 - min(vEnv, 0.99));\n\n    vec3 vEnvColour = UI_GetColor( DATA_BACKGROUND_COLOR );\n\tvEnv *= vEnvColour;\n\t\n\tvec3 vColour = vEnv * (0.25 + fShade * 0.75);\n\t\n    float fIntensity = UI_GetFloat( DATA_INTENSITY );\n    \n    float fTemp = 0.0;\n\t// object glow\n\tif(vHit.x < kFarClip)\n\t{\t\n        vColour += blackbody( fGlow ) * 20.0 * fIntensity;\n\t}\n\t\n    \n\t// outer glow\n\t{\t\t\t\t\n\t\tfloat f = 1.0 - clamp(vHit.w * 0.5, 0.0, 1.0);\t\t\n\t\t\n\t\tfloat fGlowAmount = 0.0;\n\t\t\n\t\t// big glow\n\t\tfloat f1 = pow(f, 20.0);\n\t\tfGlowAmount += f1 * 2.0 * (0.5 + fShade * 0.5);\n\t\n\t\t// small glow\n\t\tfloat f2 = pow(f, 200.0);\n\t\tfGlowAmount += f2 * 5.0 * fShade;\n\t\t\n\t\t//vColour += vGlowColour * fGlowAmount;\n        \n        vColour += blackbody( fGlowAmount * 0.25 ) * 10.0 * fIntensity;        \n\t}    \n    \n\treturn vColour;\n}\n\n\n// mat3 from quaternion\nmat3 SetRot( const in vec4 q )\n{\n\tvec4 qSq = q * q;\n\tfloat xy2 = q.x * q.y * 2.0;\n\tfloat xz2 = q.x * q.z * 2.0;\n\tfloat yz2 = q.y * q.z * 2.0;\n\tfloat wx2 = q.w * q.x * 2.0;\n\tfloat wy2 = q.w * q.y * 2.0;\n\tfloat wz2 = q.w * q.z * 2.0;\n \n\treturn mat3 (\t\n     qSq.w + qSq.x - qSq.y - qSq.z, xy2 - wz2, xz2 + wy2,\n     xy2 + wz2, qSq.w - qSq.x + qSq.y - qSq.z, yz2 - wx2,\n     xz2 - wy2, yz2 + wx2, qSq.w - qSq.x - qSq.y + qSq.z );\n}\n\n// mat3 from axis / angle\nmat3 SetRot( vec3 vAxis, float fAngle )\n{\t\n\treturn SetRot( vec4(normalize(vAxis) * sin(fAngle), cos(fAngle)) );\n}\n\nvec3 ApplyPostFx( const in vec3 vIn, const in vec2 fragCoord )\n{\n\tvec2 vUV = fragCoord.xy / iResolution.xy;\n\tvec2 vCentreOffset = (vUV - 0.5) * 2.0;\n\t\n\tvec3 vResult = vIn;\n\tvResult.xyz *= clamp(1.0 - dot(vCentreOffset, vCentreOffset) * 0.4, 0.0, 1.0);\n\n\tvResult.xyz = 1.0 - exp(vResult.xyz * -kExposure * pow(2.0f, UI_GetFloat( DATA_EXPOSURE )) );\n\t\n\tvResult.xyz = pow(vResult.xyz, vec3(1.0 / 2.2));\n\t\n\treturn vResult;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vUV = fragCoord.xy / iResolution.xy;\n\tvec2 vWindow = vUV * 2.0 - 1.0;\n\tvWindow.x *= iResolution.x / iResolution.y;\n\t\n\tvec2 vMouse = iMouse.xy / iResolution.xy;\n\t\n\tfloat fHeading = iTime * 0.21;\n\tfloat fElevation = cos(iTime * 0.1) * 0.5;\n\tfloat fCameraDistance = 15.0 + sin(iTime * 0.05) * 5.0;\n\t\n\tfloat fSinElevation = sin(fElevation);\n\tfloat fCosElevation = cos(fElevation);\n\tfloat fSinHeading = sin(fHeading);\n\tfloat fCosHeading = cos(fHeading);\n\t\n\tvec3 vCameraOffset;\n\tvCameraOffset.x = fSinHeading * fCosElevation;\n\tvCameraOffset.y = fSinElevation;\n\tvCameraOffset.z = fCosHeading * fCosElevation;\n\t\n\tvec3 vCameraPos = vCameraOffset * fCameraDistance;\n\n\tvec3 vCameraTarget = vec3(0.0, 0.0, 0.0);\n\t\n\tvec3 vForward = normalize(vCameraTarget - vCameraPos);\n\tvec3 vRight = normalize(cross(vec3(0.0, 1.0, 0.0), vForward));\n\tvec3 vUp = normalize(cross(vForward, vRight));\n\t\n\tfloat fFov = 2.0;\n\t\n\tvec3 vDir = normalize(vWindow.x * vRight + vWindow.y * vUp + vForward * fFov);\n\t\n\tvec3 vRotationAxis = vec3(1.0, 4.0, 2.0);\n\n\t// Rotate the rotation axis\n\tmat3 m2 = SetRot( vec3(0.1, 1.0, 0.01), iTime * 0.3 );\t\t\n\t\n\tvRotationAxis = vRotationAxis * m2;\n\t\n\tfloat fRotationAngle = sin(iTime * 0.5);\n\t\n    if ( !UI_GetBool( DATA_ANIMATE ) )\n    {\n\t\tvRotationAxis = vec3( UI_GetFloat(DATA_ROT_X), 1.0, UI_GetFloat(DATA_ROT_Y) );\n        fRotationAngle = length(vRotationAxis);\n    }\n\t\n\tm = SetRot(vRotationAxis, fRotationAngle);\n\t\n\tvec3 vResult = TraceRay(vCameraPos, vDir);\n\t\n\tvResult = ApplyPostFx(vResult,fragCoord);\n\t\n\tint windowId;\n    vec2 vWindowCoord;\n    UI_Compose( fragCoord, vResult, windowId, vWindowCoord );\n    \n\tfragColor = vec4(vResult,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Super Shader GUI\n// https://www.shadertoy.com/view/Xs2cR1\n// Shadertoy UI framework - @P_Malin\n\n// Todo: \n// * window stacking order?\n\n#define iChannelUI \t\t\tiChannel0\n#define iChannelKeyboard \tiChannel1\n#define iChannelFont \t\tiChannel2\n\n#define SHADOW_TEST\n\n///////////////////////////\n// Data Storage\n///////////////////////////\n\nvec4 LoadVec4( sampler2D sampler, in ivec2 vAddr )\n{\n    return texelFetch( sampler, vAddr, 0 );\n}\n\nvec3 LoadVec3( sampler2D sampler, in ivec2 vAddr )\n{\n    return LoadVec4( sampler, vAddr ).xyz;\n}\n\nbool AtAddress( ivec2 p, ivec2 c ) { return all( equal( p, c ) ); }\n\nvoid StoreVec4( in ivec2 vAddr, in vec4 vValue, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    fragColor = AtAddress( fragCoord, vAddr ) ? vValue : fragColor;\n}\n\nvoid StoreVec3( in ivec2 vAddr, in vec3 vValue, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    StoreVec4( vAddr, vec4( vValue, 0.0 ), fragColor, fragCoord);\n}\n\n///////////////////////////\n// Rect\n///////////////////////////\n\nstruct Rect\n{\n    vec2 vPos;\n    vec2 vSize;\n};      \n\nbool Inside( vec2 vPos, vec2 vMin, vec2 vMax )\n{\n    return all( greaterThanEqual( vPos, vMin ) ) && all( lessThan( vPos, vMax ) );\n}\n\nbool Outside( vec2 vPos, vec2 vMin, vec2 vMax )\n{\n    return any( lessThan( vPos, vMin ) ) || any( greaterThanEqual( vPos, vMax ) );\n}\n\nbool Inside( vec2 vPos, Rect rect )\n{\n    return Inside( vPos, rect.vPos, rect.vPos + rect.vSize );\n}\n    \nbool Outside( vec2 vPos, Rect rect )\n{\n    return Outside( vPos, rect.vPos, rect.vPos + rect.vSize );\n}\n\nvoid RectExpand( inout Rect region, vec2 vPadding )\n{\n    // Padding\n    region.vPos -= vPadding;\n    region.vSize += vPadding * 2.0;        \n}\n\nvoid RectShrink( inout Rect region, vec2 vPadding )\n{\n    RectExpand( region, -vPadding);\n}\n\n///////////////////////////\n// Font\n///////////////////////////\n\n// Font printing based on https://www.shadertoy.com/view/ldfcDr\n\n#define AUTO_FONT_SPACING\n//#define HANDLE_EOL\n//#define HANDLE_PRINT_STYLES\n\n// Font characters\nconst uint\n   \t// HTML Entity Names\n    \n    _SP = 0x20u,\t\t// ' '\n    _EXCL = 0x21u, \t\t// '!' \n    _QUOT = 0x22u, \t\t// '\"'\n    _NUM = 0x23u,  \t\t// '#'\n    _DOLLAR = 0x24u, \t// '$'\n    _PERCNT = 0x25u, \t// '%'\n    _AMP = 0x26u, \t\t// '&'\n    _APOS = 0x27u,\t\t// '''    \n    _LPAR = 0x28u, \t\t// '('\n    _RPAR= 0x29u, \t\t// ')'\n    _AST = 0x2Au,\t\t// '*'\n    _PLUS = 0x2Bu,\t\t// '+'\n    _COMMA = 0x2Cu,\t\t// ','    \n    _MINUS = 0x2Du,\t\t// '-'\n    _PERIOD = 0x2Eu,\t// '.'\n    _SOL = 0x2Fu,\t\t// '/' \n\n    _0 = 0x30u, _1 = 0x31u, _2 = 0x32u, _3 = 0x33u, _4 = 0x34u, \n    _5 = 0x35u, _6 = 0x36u, _7 = 0x37u, _8 = 0x38u, _9 = 0x39u, \n\n    _COLON = 0x3Au,\t\t// ':' \n    _SEMI = 0x3Bu,\t\t// ';' \n    _LT = 0x3Cu,\t\t// '<' \n    _EQUALS = 0x3Du,\t// '=' \n    _GT = 0x3Eu,\t\t// '>' \n    _QUEST = 0x3Fu,\t\t// '?' \n    _COMAT = 0x40u,\t\t// '@' \n    \n    _A = 0x41u, _B = 0x42u, _C = 0x43u, _D = 0x44u, _E = 0x45u, \n    _F = 0x46u, _G = 0x47u, _H = 0x48u, _I = 0x49u, _J = 0x4Au,\n    _K = 0x4Bu, _L = 0x4Cu, _M = 0x4Du, _N = 0x4Eu, _O = 0x4Fu,\n    _P = 0x50u, _Q = 0x51u, _R = 0x52u, _S = 0x53u, _T = 0x54u,\n    _U = 0x55u, _V = 0x56u, _W = 0x57u, _X = 0x58u, _Y = 0x59u,\n    _Z = 0x5Au,\n\n    _LSQB = 0x5Bu,\t\t// '[' \n    _BSOL = 0x5Cu,\t\t// '\\'\n    _RSQB = 0x5Du,\t\t// ']' \n    _CIRC = 0x5Eu,\t\t// '^' \n    _LOWBAR = 0x5Fu,\t// '_' \n    _GRAVE = 0x60u,\t\t// '`' \n    \n    _a = 0x61u, _b = 0x62u, _c = 0x63u, _d = 0x64u, _e = 0x65u,\n    _f = 0x66u, _g = 0x67u, _h = 0x68u, _i = 0x69u, _j = 0x6Au,\n    _k = 0x6Bu, _l = 0x6Cu, _m = 0x6Du, _n = 0x6Eu, _o = 0x6Fu,\n    _p = 0x70u, _q = 0x71u, _r = 0x72u, _s = 0x73u, _t = 0x74u,\n    _u = 0x75u, _v = 0x76u, _w = 0x77u, _x = 0x78u, _y = 0x79u,\n    _z = 0x7Au\n\n\t,_LCUB = 0x7Bu\t\t// '{'\n    ,_VERBAR = 0x7Cu\t// '|'\n    ,_RCUB = 0x7Du\t\t// '}'\n    ,_TILDE = 0x7Eu\t\t// '~'\n    \n#ifdef HANDLE_EOL       \n    ,_EOL = 0x1000u \t// End of Line - Carriage Return & Line Feed    \n#endif    \n#ifdef HANDLE_PRINT_STYLES    \n    ,_BOLDON = 0x1001u\t// Special\n    ,_BOLDOFF = 0x1002u\t// Special\n    ,_ITALON = 0x1003u\t// Special\n    ,_ITALOFF = 0x1004u\t// Special    \n#endif    \n;\n\n\nvec4 SampleCharacterTex( uint iChar, vec2 vCharUV )\n{\n    uvec2 iChPos = uvec2( iChar % 16u, iChar / 16u );\n    vec2 vUV = (vec2(iChPos) + vCharUV) / 16.0f;\n    return textureLod( iChannelFont, vUV, 0.0 );\n}\n    \nvec4 SampleCharacter( uint iChar, vec2 vCharUV )\n{\n    uvec2 iChPos = uvec2( iChar % 16u, iChar / 16u );\n    vec2 vClampedCharUV = clamp(vCharUV, vec2(0.01), vec2(0.99));\n    vec2 vUV = (vec2(iChPos) + vClampedCharUV) / 16.0f;\n\n    vec4 vSample;\n    \n    float l = length( (vClampedCharUV - vCharUV) );\n\n    // Skip texture sample when not in character boundary\n    // Ok unless we have big font weight\n    if ( l > 0.01f )\n    {\n        vSample.rgb = vec3(0);\n\t\tvSample.w = 2000000.0; \n    }\n    else\n    {\n\t\tvSample = textureLod( iChannelFont, vUV, 0.0 );    \n        vSample.gb = vSample.gb * 2.0f - 1.0f;\n        vSample.a -= 0.5f + 1.0/256.0;    \n    }\n        \n    return vSample;\n}\n\n\nstruct CharExtents\n{\n    float left;\n    float width;\n};\n    \n// Auto font spacing adapted from Klems shader: https://www.shadertoy.com/view/MsfyDN\nfloat CharVerticalPos(uint iChar, vec2 vUV) \n{\n    vec4 vSample = SampleCharacterTex(iChar, vUV);\n    float dist = vSample.a - (127.0/255.0);\n    dist *= vSample.g * 2.0 - 1.0;\n    return vUV.x - dist;\n}\n\nCharExtents GetCharExtents( uint iChar )\n{\n    CharExtents result;\n\n    result.left = CharVerticalPos( iChar, vec2(0.02, 0.5) );\n    float right = CharVerticalPos( iChar, vec2(0.98, 0.5) );\n    result.width = right - result.left;\n    \n    if ( iChar == _SP )\n    {\n        result.left = 0.3f;\n        result.width = 0.4f;\n    }\n    return result;\n}\n\nstruct PrintState\n{\n    vec2 vPixelPos;\n    \n    vec2 vLayoutStart;\n    // print position\n    vec2 vCursorPos;\n    vec2 vPixelSize;\n\n#ifdef HANDLE_EOL\n    bool EOL;\n#endif\n\n    // result\n    float fDistance;\n};    \n\nvoid MoveTo( inout PrintState state, vec2 vPos )\n{\n    state.vLayoutStart = vPos;\n    state.vCursorPos = vPos;\n#ifdef HANDLE_EOL\n    state.EOL = false;\n#endif\n}\n\nvoid ClearPrintResult( inout PrintState state )\n{\n    state.fDistance = 1000000.0;   \n}\n\nPrintState PrintState_InitCanvas( vec2 vCoords, vec2 vPixelSize )\n{\n    PrintState state;\n    state.vPixelPos = vCoords;\n    state.vPixelSize = vPixelSize;\n    \n    MoveTo( state, vec2(0) );\n\n    ClearPrintResult( state );\n    \n    return state;\n}\n\nstruct LayoutStyle\n{\n    vec2 vSize;\n    float fLineGap;\n    float fAdvancement;\n#ifdef HANDLE_PRINT_STYLES    \n    bool bItalic;\n    bool bBold;  \n#endif    \n};\n    \nLayoutStyle LayoutStyle_Default()\n{\n    LayoutStyle style;\n    style.vSize = vec2(24.0f, 32.0f);    \n    style.fLineGap = 0.1f;\n    style.fAdvancement = 0.1f;\n#ifdef HANDLE_PRINT_STYLES    \n    style.bItalic = false;\n    style.bBold = false;       \n#endif    \n    return style;\n}\n\nstruct RenderStyle\n{\n    vec3 vFontColor;\n    float fFontWeight;   \n};\n\nRenderStyle RenderStyle_Default( vec3 vFontColor )\n{\n    RenderStyle style;\n    style.vFontColor = vFontColor;\n    style.fFontWeight = 0.0f;  \n    return style;\n}\n\nconst float g_fFontDescent = 0.15f;\nconst float g_fFontAscent = 0.65f;\n\nvoid PrintEndCurrentLine( inout PrintState state, const LayoutStyle style )\n{\n    // Apply CR\n    state.vCursorPos.x = state.vLayoutStart.x;\n    \n    // advance Y position to bottom of descender based on current font size.\n\tstate.vCursorPos.y += style.vSize.y * g_fFontDescent;    \n}\n\nvoid PrintBeginNextLine( inout PrintState state, const LayoutStyle style )\n{\n    // move Y position to baseline based on current font size\n\tstate.vCursorPos.y += style.vSize.y * (g_fFontAscent + style.fLineGap);\n}\n\n#ifdef HANDLE_EOL\nvoid PrintEOL( inout PrintState state, const LayoutStyle style )\n{\n    if ( state.EOL )\n    {\n        PrintBeginNextLine( state, style );\n    }\n    PrintEndCurrentLine( state, style );\n    state.EOL = true;\n}\n#endif\n\nvoid PrintCh( inout PrintState state, inout LayoutStyle style, const uint iChar )\n{\n#ifdef HANDLE_EOL\n    if ( iChar == _EOL )\n    {\n        PrintEOL( state, style );\n        return;\n    }\n    else\n#endif\n#ifdef HANDLE_PRINT_STYLES            \n    if ( iChar == _BOLDON )\n    {\n        style.bBold = true;\n        return;\n    }\n    else\n    if ( iChar == _BOLDOFF )\n    {\n        style.bBold = false;\n        return;\n    }\n    else\n    if ( iChar == _ITALON )\n    {\n        style.bItalic = true;\n        return;\n    }\n    else\n    if ( iChar == _ITALOFF )\n    {\n        style.bItalic = false;\n        return;\n    }\n#endif\n    \n#ifdef HANDLE_EOL\n    if ( state.EOL )\n    {\n        PrintBeginNextLine( state, style );\n\t\tstate.EOL = false;\n    }\n#endif\n    \n    vec2 vUV = ((state.vPixelPos - state.vCursorPos) / style.vSize);\n\n    /*if ( (vUV.y > -0.1) && (vUV.y < 0.1) && (abs(vUV.x) < 0.02 || abs(vUV.x - CharWidth(iChar)) < 0.02) )\n    {\n        state.fDistance = -10.0;\n    }*/\n    \n\tCharExtents extents = GetCharExtents( iChar );    \n    vUV.y += 0.8f; // Move baseline\n    vUV.x += extents.left - style.fAdvancement;\n    \n#ifdef HANDLE_PRINT_STYLES    \n    if ( style.bItalic )\n    {\n    \tvUV.x += (1.0 - vUV.y) * -0.4f;\n    }\n#endif\n    \n    vec3 v = SampleCharacter( iChar, vUV ).agb;\n\n#ifdef HANDLE_PRINT_STYLES    \n    if ( style.bBold )\n    {\n    \tv.x -= 0.025f;\n    }\n#endif    \n    \n    if ( v.x < state.fDistance )\n    {\n        state.fDistance = v.x;       \n    }\n    \n    state.vCursorPos.x += style.vSize.x * (extents.width + style.fAdvancement);\n}\n\n\nRect GetFontRect( PrintState state, LayoutStyle style, bool initialLineOffset )\n{\n    Rect rect;\n    \n    rect.vPos = state.vLayoutStart;\n    if ( initialLineOffset )\n    {\n    \trect.vPos.y += style.vSize.y * (style.fLineGap + g_fFontAscent);\n    }\n\trect.vPos.y -= style.vSize.y * (g_fFontAscent);\n    rect.vSize.x = state.vCursorPos.x - state.vLayoutStart.x;\n    rect.vSize.y = style.vSize.y * ( g_fFontAscent + g_fFontDescent );\n    \n    return rect;\n}\n\nfloat GetFontBlend( PrintState state, LayoutStyle style, float size )\n{\n    float fFeatherDist = 1.0f * length(state.vPixelSize / style.vSize);    \n    float f = clamp( (size-state.fDistance + fFeatherDist * 0.5f) / fFeatherDist, 0.0, 1.0);\n    return f;\n}\n\nvoid RenderFont( PrintState state, LayoutStyle style, RenderStyle renderStyle, inout vec3 color )\n{   \n    float f = GetFontBlend( state, style, renderStyle.fFontWeight );\n\n    vec3 vCol = renderStyle.vFontColor;\n    \n    color.rgb = mix( color.rgb, vCol, f);    \n}\n\n// Font print helpers\n\n#define NO_UNROLL(X) (X + min(0,iFrame))\n#define NO_UNROLLU(X) (X + uint(min(0,iFrame)))\n\n#define ARRAY_PRINT( STATE, STYLE, CHAR_ARRAY ) { for (int i=0; i< NO_UNROLL( CHAR_ARRAY.length() ); i++) PrintCh( STATE, STYLE, CHAR_ARRAY[i] ); }\n\nvoid Print( inout PrintState state, LayoutStyle style, uint value )\n{\n\tuint place = 1000000000u;\n\n    bool leadingZeros = true;\n    while( place > NO_UNROLLU( 0u ) )\n    {\n        uint digit = (value / place) % 10u;\n        if ( place == 1u || digit != 0u )\n        {\n            leadingZeros = false;\n        }\n        \n        if (!leadingZeros)\n        {\n            PrintCh( state, style, _0 + digit );\n        }\n        place = place / 10u;\n    }    \n}\n\nvoid Print( inout PrintState state, LayoutStyle style, int value )\n{\n    if ( value < 0 )\n    {\n        PrintCh( state, style, _MINUS );\n        value = -value;\n    }\n\n    Print ( state, style, uint(value) );    \n}\n\nvoid Print( inout PrintState state, LayoutStyle style, float value, int decimalPlaces )\n{\n    if ( value < 0.0f )\n    {\n        PrintCh( state, style, _MINUS );\n    }\n    value = abs(value);\n    \n    int placeIndex = 10;\n    \n    bool leadingZeros = true;\n    while( placeIndex >= NO_UNROLL( -decimalPlaces ) )\n    {\n        float place = pow(10.0f, float(placeIndex) );\n        float digitValue = floor( value / place );\n        value -= digitValue * place;\n        \n        \n        uint digit = min( uint( digitValue ), 9u );\n        \n        if ( placeIndex == -1 )\n        {\n            PrintCh( state, style, _PERIOD );\n        }\n        \n        if ( placeIndex == 0 || digit != 0u )\n        {\n            leadingZeros = false;\n        }        \n        \n        if ( !leadingZeros )\n        {\n        \tPrintCh( state, style, _0 + digit );\n        }\n                \n        placeIndex--;\n    }\n}\n\n\n\n///////////////////////////////////////////\n// General 2d Drawing\n///////////////////////////////////////////\n\nvoid DrawRect( vec2 vCanvasPos, Rect rect, vec4 vColor, inout vec4 vOutColor )\n{\n\tif ( Inside( vCanvasPos, rect ) )\n    {\n        vOutColor = vColor;\n    }\n}\n\nvoid DrawLine( vec2 vCanvasPos, vec2 vA, vec2 vB, float fThickness, vec4 vColor, inout vec4 vOutColor )\n{\n    vec2 vDir = vB - vA;\n    float l = length( vDir );\n    vDir = normalize( vDir );\n\n    vec2 vOffset = vCanvasPos - vA;\n    float fDot = dot( vOffset, vDir );\n    float fT = clamp( fDot, 0.0, l );\n\n    vec2 vClosest = vA + vDir * fT;\n    float fDist = length(vClosest - vCanvasPos) - fThickness;\n\n    if ( fDist < 0.0 )\n    {\n        vOutColor = vColor;\n    }    \n}\n\nvoid DrawBorder( vec2 vCanvasPos, Rect rect, inout vec4 vOutColor )\n{    \n    vec2 vThickness = vec2(1.0);\n    \n\tif ( Inside( vCanvasPos, rect ) )\n    {\n        if ( any( lessThanEqual( vCanvasPos, rect.vPos + vThickness) ) )\n        {\n            vOutColor.rgb = vec3(0.85);\n        }\n        else\n        if ( any( greaterThan( vCanvasPos, rect.vPos + rect.vSize - vThickness) ) )\n        {\n            vOutColor.rgb = vec3(0.0);\n        }\n        else\n        if ( any( lessThanEqual( vCanvasPos, rect.vPos + vThickness * 2.0) ) )\n        {\n            vOutColor.rgb = vec3(1.0);\n        }\n        else\n        if ( any( greaterThan( vCanvasPos, rect.vPos + rect.vSize - vThickness * 2.0) ) )\n        {\n            vOutColor.rgb = vec3(0.4);\n        }\n    }\n}\n\nvoid DrawBorderIndent( vec2 vCanvasPos, Rect rect, inout vec4 vOutColor )\n{    \n    vec2 vThickness = vec2(1.0);\n    \n\tif ( Inside( vCanvasPos, rect ) )\n    {        \n        if ( any( lessThanEqual( vCanvasPos, rect.vPos + vThickness) ) )\n        {\n            vOutColor.rgb = vec3(0.0);\n        }\n        else\n        if ( any( greaterThan( vCanvasPos, rect.vPos + rect.vSize - vThickness) ) )\n        {\n            vOutColor.rgb = vec3(0.85);\n        }\n        else\n        if ( any( lessThanEqual( vCanvasPos, rect.vPos + vThickness * 2.0) ) )\n        {\n            vOutColor.rgb = vec3(0.4);\n        }\n        else\n        if ( any( greaterThan( vCanvasPos, rect.vPos + rect.vSize - vThickness * 2.0) ) )\n        {\n            vOutColor.rgb = vec3(1.0);\n        }\n    }\n}\n    \nstruct UIDrawContext\n{        \n    vec2 vCanvasSize;\n    \n    // position and size of unclipped viewport on the screen\n    Rect viewport;\n    \n    // visible region of viewport on the screen\n    Rect clip;\n    \n    // canvas co-ordinates at top-left corner of viewport\n    vec2 vOffset;\n};\n\nvec2 UIDrawContext_ScreenPosToCanvasPos( UIDrawContext drawContext, vec2 vScreenPos )\n{\n    vec2 vViewPos = vScreenPos - drawContext.viewport.vPos;\n    return vViewPos + drawContext.vOffset;\n}\n\nvec2 UIDrawContext_CanvasPosToScreenPos( UIDrawContext drawContext, vec2 vCanvasPos )\n{\n    return vCanvasPos - drawContext.vOffset + drawContext.viewport.vPos;\n}\n\nbool UIDrawContext_ScreenPosInView( UIDrawContext drawContext, vec2 vScreenPos )\n{\n    return Inside( vScreenPos, drawContext.clip );\n}\n\nbool UIDrawContext_ScreenPosInCanvasRect( UIDrawContext drawContext, vec2 vScreenPos, Rect canvasRect )\n{\n\tvec2 vCanvasPos = UIDrawContext_ScreenPosToCanvasPos( drawContext, vScreenPos );    \n    return Inside( vCanvasPos, canvasRect );\n}\n\nUIDrawContext UIDrawContext_SetupFromRect( Rect rect )\n{\n    UIDrawContext drawContext;\n    drawContext.viewport = rect;\n    drawContext.vOffset = vec2(0);\n    drawContext.vCanvasSize = rect.vSize;\n\treturn drawContext;\n}\n\n\nUIDrawContext UIDrawContext_TransformChild( UIDrawContext parentContext, UIDrawContext childContext )\n{\n    UIDrawContext result;\n    \n    // The child canvas size is unmodified\n    result.vCanvasSize = childContext.vCanvasSize;\n\n    // Child viewport positions are in the parent's canvas\n    // Transform them to screen co-ordinates    \n    result.viewport.vPos = UIDrawContext_CanvasPosToScreenPos( parentContext, childContext.viewport.vPos );\n    vec2 vMax = childContext.viewport.vPos + childContext.viewport.vSize;\n    vec2 vScreenMax = UIDrawContext_CanvasPosToScreenPos( parentContext, vMax );\n    result.viewport.vSize = vScreenMax - result.viewport.vPos;\n    result.vOffset = childContext.vOffset;\n    \n    // Now clip the view so that it is within the parent view\n    vec2 vViewMin = max( result.viewport.vPos, parentContext.clip.vPos );\n    vec2 vViewMax = min( result.viewport.vPos + result.viewport.vSize, parentContext.clip.vPos + parentContext.clip.vSize );\n\n    // Clip view to current canvas\n    vec2 vCanvasViewMin = result.viewport.vPos - result.vOffset;\n    vec2 vCanvasViewMax = vCanvasViewMin + result.vCanvasSize;\n    \n    vViewMin = max( vViewMin, vCanvasViewMin );\n\tvViewMax = min( vViewMax, vCanvasViewMax );\n    \n    result.clip = Rect( vViewMin, vViewMax - vViewMin );\n    \n    return result;\n}\n\nfloat \tUIStyle_TitleBarHeight();\nvec2 \tUIStyle_WindowBorderSize();\nvec2 \tUIStyle_WindowContentPadding();\nvec2 \tUIStyle_ControlSpacing();\nvec2 \tUIStyle_FontPadding();\nvec2 \tUIStyle_CheckboxSize();\nvec2 \tUIStyle_SliderSize();\nvec3 \tUIStyle_ColorPickerSize();\nfloat \tUIStyle_ScrollBarSize();\nvec4    UIStyle_WindowBackgroundColor();\nfloat   UIStyle_WindowTransparency();\n\nstruct UILayout\n{\n    float fTabPosition;\n    vec2 vCursor;\n    Rect controlRect;\n    \n    // Bounds of controls in current stack\n    vec2 vControlMax;\n    vec2 vControlMin;\n};\n    \nUILayout UILayout_Reset()\n{\n    UILayout uiLayout;\n    \n    uiLayout.fTabPosition = 0.0;\n    uiLayout.vCursor = vec2(0);\n    uiLayout.controlRect = Rect( vec2(0), vec2(0) );\n    uiLayout.vControlMax = vec2(0);\n    uiLayout.vControlMin = vec2(0);\n    \n    return uiLayout;\n}\n\nRect UILayout_GetStackedControlRect( inout UILayout uiLayout, vec2 vSize )\n{\n    return Rect( uiLayout.vCursor, vSize );\n}\n\nvoid UILayout_SetControlRect( inout UILayout uiLayout, Rect rect )\n{\n    uiLayout.controlRect = rect;\n    \n    uiLayout.vControlMax = max( uiLayout.vControlMax, rect.vPos + rect.vSize );\n    uiLayout.vControlMin = max( uiLayout.vControlMin, rect.vPos );    \n}\n\nRect UILayout_StackControlRect( inout UILayout uiLayout, vec2 vSize )\n{\n    Rect rect = UILayout_GetStackedControlRect( uiLayout, vSize );\n    UILayout_SetControlRect( uiLayout, rect );\n    return rect;\n}\n\nvoid UILayout_SetX( inout UILayout uiLayout, float xPos )\n{\n    uiLayout.vCursor.x = xPos;\n    uiLayout.vControlMax.x = uiLayout.vCursor.x;\n    uiLayout.vControlMin.x = uiLayout.vCursor.x;\n}\n\nvoid UILayout_StackRight( inout UILayout uiLayout )\n{\n    UILayout_SetX( uiLayout, uiLayout.vControlMax.x + UIStyle_ControlSpacing().x );\n}\n\nvoid UILayout_StackDown( inout UILayout uiLayout )\n{\n    uiLayout.vCursor.x = uiLayout.fTabPosition;\n    uiLayout.vCursor.y = uiLayout.vControlMax.y + UIStyle_ControlSpacing().y;    \n    uiLayout.vControlMax.x = uiLayout.vCursor.x;\n    uiLayout.vControlMin.x = uiLayout.vCursor.x;\n    uiLayout.vControlMax.y = uiLayout.vCursor.y;\n    uiLayout.vControlMin.y = uiLayout.vCursor.y;\n}\n\n#define IDC_NONE            -1\n\nstruct UIContext\n{\n    vec2 vPixelPos;\n    \n    vec2 vMousePos;\n    bool bMouseDown;\n    bool bMouseWasDown;\n    bool bHandledClick;\n    \n    ivec2 vFragCoord;\n    vec4 vOutColor;\n    float fBlendRemaining;\n\n    vec4 vOutData;\n    \n    int iActiveControl;\n    vec2 vActivePos;\n\n    UIDrawContext drawContext;\n    bool bPixelInView; // derived from drawContext\n    vec2 vPixelCanvasPos; // derived from drawContext\n    bool bMouseInView; // derived from drawContext\n    vec2 vMouseCanvasPos; // derived from drawContext\n\n    vec4 vWindowOutColor; // Output for current window draw pass\n#ifdef SHADOW_TEST\n    float fShadow;\n    float fOutShadow;\n#endif    \n};\n\nvoid UI_SetDrawContext( inout UIContext uiContext, UIDrawContext drawContext )\n{\n    uiContext.drawContext = drawContext;\n    \n    uiContext.vPixelCanvasPos = UIDrawContext_ScreenPosToCanvasPos( drawContext, uiContext.vPixelPos );\n    uiContext.bPixelInView = UIDrawContext_ScreenPosInView( drawContext, uiContext.vPixelPos );\n\n    uiContext.vMouseCanvasPos = UIDrawContext_ScreenPosToCanvasPos( drawContext, uiContext.vMousePos );\n    uiContext.bMouseInView = UIDrawContext_ScreenPosInView( drawContext, uiContext.vMousePos );\n}    \n\nUIContext UI_GetContext( vec2 fragCoord, int iData )\n{\n    UIContext uiContext;\n    \n    uiContext.vPixelPos = fragCoord;\n    uiContext.vPixelPos.y = iResolution.y - uiContext.vPixelPos.y;\n    uiContext.vMousePos = iMouse.xy;\n    uiContext.vMousePos.y = iResolution.y - uiContext.vMousePos.y;\n    uiContext.bMouseDown = iMouse.z > 0.0;       \n    \n    vec4 vData0 = LoadVec4( iChannelUI, ivec2(iData,0) );\n    \n    uiContext.bMouseWasDown = (vData0.x > 0.0);\n    \n    uiContext.vFragCoord = ivec2(fragCoord);\n    uiContext.vOutColor = vec4(0.0);\n#ifdef SHADOW_TEST    \n    uiContext.fShadow = 1.0;\n    uiContext.fOutShadow = 1.0f;\n#endif    \n    uiContext.fBlendRemaining = 1.0;\n    \n    uiContext.vOutData = vec4(0.0);\n    if ( int(uiContext.vFragCoord.y) < 2 )\n    {\n        // Initialize data with previous value\n\t    uiContext.vOutData = texelFetch( iChannelUI, uiContext.vFragCoord, 0 );     \n    }\n    uiContext.bHandledClick = false;\n    \n    uiContext.iActiveControl = int(vData0.y);\n    uiContext.vActivePos = vec2(vData0.zw);\n        \n    \n    UIDrawContext rootContext;\n    \n    rootContext.vCanvasSize = iResolution.xy;\n    rootContext.vOffset = vec2(0);\n    rootContext.viewport = Rect( vec2(0), vec2(iResolution.xy) );\n    rootContext.clip = rootContext.viewport;\n\n    UI_SetDrawContext( uiContext, rootContext );\n        \n    if ( iFrame == 0 )\n    {\n        uiContext.bMouseWasDown = false;\n        uiContext.iActiveControl = IDC_NONE;\n    }\n    \n    return uiContext;\n}///\n\nvoid UI_StoreContext( inout UIContext uiContext, int iData )\n{\n    vec4 vData0 = vec4( uiContext.bMouseDown ? 1.0 : 0.0, float(uiContext.iActiveControl), uiContext.vActivePos.x, uiContext.vActivePos.y );\n    StoreVec4( ivec2(iData,0), vData0, uiContext.vOutData, ivec2(uiContext.vFragCoord) );\n}\n\nvec4 UI_GetFinalColor( UIContext uiContext )\n{\n    if ( int(uiContext.vFragCoord.y) < 2 )\n    {\n        return uiContext.vOutData;\n    }\n    \n    if ( uiContext.vOutColor.a >= 0.0 )\n    {\n        // Apply premultiplied alpha.\n        uiContext.vOutColor.rgb *= uiContext.vOutColor.a;\n  \n#ifdef SHADOW_TEST\n        // Shadow composite for premultiplied alpha.\n        // Don't even ask how this works - I'm not sure I know\n        uiContext.vOutColor.rgb *= uiContext.fOutShadow;\n        uiContext.vOutColor.a = 1.0 - ((1.0 - uiContext.vOutColor.a) * uiContext.fOutShadow);\n#endif \t\n    }\n    else\n    {\n#ifdef SHADOW_TEST\n        uiContext.vOutColor.a = -1.0 -uiContext.fOutShadow;\n#else\n        uiContext.vOutColor.a = -2.0;\n#endif \n    }\n    \n    return uiContext.vOutColor;\n}\n\nvoid UI_ComposeWindowLayer( inout UIContext uiContext, float fTransparency, Rect windowRect )\n{\n#ifdef SHADOW_TEST   \n  \tif ( !uiContext.bPixelInView )\n    {\n        return;\n    }\n\n#if 1\n    // cull window?\n    Rect boundsRect = windowRect;\n    RectExpand( boundsRect, vec2( 16.0 ) );\n    if ( !Inside( uiContext.vPixelPos, boundsRect ) )\n    {\n        return;\n    }\n#endif\n    \n    // We need to compose in the parent drawContext for this to work...\n    float fPrevShadow = uiContext.fShadow;\n    \n    vec2 vShadowOffset = vec2( 5.0, 8.0 );\n    float fShadowInner = 3.0;\n\tfloat fShadowOuter = 12.0;\n    \n    Rect shadowRect = windowRect;\n    RectShrink( shadowRect, vec2( fShadowInner ) );\n    \n    vec2 vShadowTestPos = uiContext.vPixelPos - vShadowOffset;\n    vec2 vWindowClosest = clamp( vShadowTestPos, shadowRect.vPos, shadowRect.vPos + shadowRect.vSize );\n\n    float fWindowDist = length( vWindowClosest - vShadowTestPos );\n    \n    float fCurrentShadow = clamp( (fWindowDist) / (fShadowOuter + fShadowInner), 0.0, 1.0 );\n    fCurrentShadow = sqrt( fCurrentShadow );\n    float fShadowTransparency = 0.5;\n\tuiContext.fShadow *= fCurrentShadow * (1.0 - fShadowTransparency) + fShadowTransparency; \n#endif    \n\n  \tif ( !Inside( uiContext.vPixelPos, windowRect ) )\n    {\n        return;\n    }\n\n    float fBlend = uiContext.fBlendRemaining * (1.0f - fTransparency);\n\n#ifdef SHADOW_TEST\n    uiContext.fOutShadow *= fPrevShadow * (fBlend) + (1.0 - fBlend);\n#endif\n    \n    // never blend under \"ID\" window\n    if ( uiContext.vOutColor.a < 0.0 )\n    {\n        return;\n    }\n    \n    if ( uiContext.vWindowOutColor.a < 0.0 )\n    {\n        if ( uiContext.fBlendRemaining == 1.0f )\n        {\n            // Ouput ID without blending\n            uiContext.vOutColor = uiContext.vWindowOutColor;\n            uiContext.fBlendRemaining = 0.0f;\n            return;\n        }\n        else\n        {\n            // blending id under existing color - blend in grey instead of ID\n            uiContext.vWindowOutColor = vec4(0.75, 0.75, 0.75, 1.0);\n        }\n    }\n\n    uiContext.vOutColor += uiContext.vWindowOutColor * fBlend;\n    \n    uiContext.fBlendRemaining *= fTransparency;\n}\n\n///////////////////////////\n// UI Data\n///////////////////////////\n\n#define DIRTY_DATA_MAGIC\t\t\t123.456\n\n// from HSV and HSL by iq - https://www.shadertoy.com/view/lsS3Wc\nconst float eps = 0.0000001;\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nstruct UIData_Bool\n{\n    bool bValue;\n};\n    \nUIData_Bool UI_GetDataBool( int iData, bool bDefault )  \n{\n    UIData_Bool dataBool;\n        \n\tvec4 vData0 = LoadVec4( iChannelUI, ivec2(iData,0) );\n    \n    if ( iFrame == 0 )\n    {\n        dataBool.bValue = bDefault;\n    }\n    else\n    {\n        dataBool.bValue =  vData0.x > 0.5;\n    }\n    \n    return dataBool;\n}\n\nvoid UI_StoreDataBool( inout UIContext uiContext, UIData_Bool dataBool, int iData )\n{\n    vec4 vData0 = vec4(0);\n    vData0.x = dataBool.bValue ? 1.0 : 0.0;\n    StoreVec4( ivec2(iData,0), vData0, uiContext.vOutData, ivec2(uiContext.vFragCoord) );            \n}\n\n\nstruct UIData_Value\n{\n    float fValue;\n    float fRangeMin;\n    float fRangeMax;\n};\n\nUIData_Value UI_GetDataValue( int iData, float fDefaultValue, float fRangeMin, float fRangeMax )  \n{\n    UIData_Value dataValue;\n    \n    vec4 vData0 = LoadVec4( iChannelUI, ivec2(iData,0) );\n    \n    if ( iFrame == 0 )\n    {\n        dataValue.fValue = fDefaultValue;\n    }\n    else\n    {\n        dataValue.fValue = vData0.x;\n    }\n    \n    dataValue.fRangeMin = fRangeMin;\n    dataValue.fRangeMax = fRangeMax;\n    \n    return dataValue;\n}\n\nvoid UI_StoreDataValue( inout UIContext uiContext, UIData_Value dataValue, int iData )\n{\n    vec4 vData0 = vec4(0);\n    vData0.x = dataValue.fValue;\n    StoreVec4( ivec2(iData,0), vData0, uiContext.vOutData, ivec2(uiContext.vFragCoord) );            \n}\n\nstruct UIData_Color\n{    \n    vec3 vHSV;\n};\n\nUIData_Color UI_GetDataColor( int iData, vec3 cDefaultRGB )  \n{\n    UIData_Color dataColor;\n    \n    vec4 vData1 = LoadVec4( iChannelUI, ivec2(iData,1) );\n    \n    if ( iFrame == 0 )\n    {\n        dataColor.vHSV = rgb2hsv( cDefaultRGB );\n    }\n    else\n    {\n        dataColor.vHSV = vData1.rgb;\n    }\n    \n    return dataColor;\n}\n\nvoid UI_StoreDataColor( inout UIContext uiContext, UIData_Color dataColor, int iData )\n{\n    vec4 vData0 = vec4(0);\n    vData0.rgb = hsv2rgb( dataColor.vHSV );\n        \n    StoreVec4( ivec2(iData,0), vData0, uiContext.vOutData, ivec2(uiContext.vFragCoord) );            \n\n    vec4 vData1 = vec4(0);\n    vData1.rgb = dataColor.vHSV;\n        \n    StoreVec4( ivec2(iData,1), vData1, uiContext.vOutData, ivec2(uiContext.vFragCoord) );            \n}\n\nPrintState UI_PrintState_Init( inout UIContext uiContext, LayoutStyle style, vec2 vPosition )\n{\n    vec2 vCanvasPos = uiContext.vPixelCanvasPos;\n    \n    PrintState state = PrintState_InitCanvas( vCanvasPos, vec2(1.0) );\n    MoveTo( state, vPosition + UIStyle_FontPadding() );\n\tPrintBeginNextLine(state, style);\n\n\treturn state;\n}\n\nRect UI_GetFontRect( PrintState state, LayoutStyle style )\n{\n    Rect rect;\n    rect = GetFontRect( state, style, true );\n    vec2 vExpand = UIStyle_FontPadding();\n    vExpand.y += style.vSize.y * style.fLineGap;\n    RectExpand( rect, vExpand );\n\treturn rect;\n}\n\nvoid UI_RenderFont( inout UIContext uiContext, PrintState state, LayoutStyle style, RenderStyle renderStyle )\n{\n    if( uiContext.bPixelInView )\n    {\n        RenderFont( state, style, renderStyle, uiContext.vWindowOutColor.rgb );\n    }\n}\n\nvoid UILayout_SetControlRectFromText( inout UILayout uiLayout, PrintState state, LayoutStyle style )\n{\n    UILayout_SetControlRect( uiLayout, UI_GetFontRect( state, style ) );\n}\n\nstruct UIPanelState\n{\n    UIDrawContext parentDrawContext;\n\tvec4 vParentWindowColor;\n};\n    \nvoid UI_PanelBegin( inout UIContext uiContext, inout UIPanelState panelState )\n{\n    panelState.parentDrawContext = uiContext.drawContext;\n    panelState.vParentWindowColor = uiContext.vWindowOutColor;\n}\n\nvoid UI_PanelEnd( inout UIContext uiContext, inout UIPanelState panelState )\n{\n    if ( !uiContext.bPixelInView )\n    {\n        // Restore parent window color if outside view\n\t    uiContext.vWindowOutColor = panelState.vParentWindowColor;    \n    }\n\n    UI_SetDrawContext( uiContext, panelState.parentDrawContext );\n}\n\n#define FLAG_SET(X,F) (( X & F ) != 0u)\n    \nconst uint\tWINDOW_CONTROL_FLAG_CLOSE_BOX \t\t= 1u,\n\t\t\tWINDOW_CONTROL_FLAG_MINIMIZE_BOX\t= 2u,\n\t\t\tWINDOW_CONTROL_FLAG_RESIZE_WIDGET \t= 4u,\n\t\t\tWINDOW_CONTROL_FLAG_TITLE_BAR \t\t= 8u;\n    \nstruct UIWindowDesc\n{\n    Rect initialRect;\n    bool bStartMinimized;\n    \n    uint uControlFlags;    \n    vec2 vMaxSize;\n};\n\n\nstruct UIWindowState\n{\n    UIPanelState panelState;\n\n    Rect rect;\n    bool bMinimized;\n    bool bClosed;\n    \n    uint uControlFlags;    \n    vec2 vMaxSize;\n    int iControlId;\n\n    Rect drawRect;\n};\n\n\nUIWindowState UI_GetWindowState( UIContext uiContext, int iControlId, int iData, UIWindowDesc desc )\n{\n    UIWindowState window;    \n    \n    vec4 vData0 = LoadVec4( iChannelUI, ivec2(iData,0) );\n        \n    window.rect = Rect( vData0.xy, vData0.zw );\n    \n    vec4 vData1 = LoadVec4( iChannelUI, ivec2(iData,1) );\n    \n    window.bClosed = false;\n    window.bMinimized = (vData1.x > 0.0);    \n    \n    // Clamp window position so title bar is always on canvas\n\tvec2 vSafeMin = vec2(24.0);        \n\tvec2 vSafeMax = vec2(32.0);        \n    vec2 vPosMin = vec2( -window.rect.vSize.x + vSafeMin.x, -vSafeMin.y);//vec2( -window.rect.vSize.x, 0.0) + 24.0, -24.0 );\n    vec2 vPosMax = uiContext.drawContext.vCanvasSize - vSafeMax;\n    window.rect.vPos = clamp( window.rect.vPos, vPosMin, vPosMax );\n    \n    if ( iFrame == 0 || vData1.y != DIRTY_DATA_MAGIC)\n    {\n        window.rect = desc.initialRect;\n        window.bMinimized = desc.bStartMinimized;\n    }       \n    \n    window.uControlFlags = desc.uControlFlags;\n    window.vMaxSize = desc.vMaxSize;\n    \n    window.iControlId = iControlId;\n        \n    return window;\n}\n\nvoid UI_StoreWindowState( inout UIContext uiContext, UIWindowState window, int iData )\n{    \n    vec4 vData0;\n    vData0.xy = window.rect.vPos;\n    vData0.zw = window.rect.vSize;\n    \n    StoreVec4( ivec2(iData,0), vData0, uiContext.vOutData, ivec2(uiContext.vFragCoord) );        \n\n    vec4 vData1;\n    \n    vData1.x = window.bMinimized ? 1.0f : 0.0f;\n    vData1.y = DIRTY_DATA_MAGIC;\n    vData1.zw = vec2(0);\n\n    StoreVec4( ivec2(iData,1), vData1, uiContext.vOutData, ivec2(uiContext.vFragCoord) );        \n}\n\nvoid UI_WriteCanvasPos( inout UIContext uiContext, int iControlId )        \n{\n\tif (!uiContext.bPixelInView)\n        return;\n    Rect rect = Rect( vec2(0), uiContext.drawContext.vCanvasSize );\n    DrawRect( uiContext.vPixelCanvasPos, rect, vec4(uiContext.vPixelCanvasPos, float(iControlId), -1.0 ), uiContext.vWindowOutColor );\n}    \n\nvoid UI_WriteCanvasUV( inout UIContext uiContext, int iControlId )        \n{\n\tif (!uiContext.bPixelInView)\n        return;\n    Rect rect = Rect( vec2(0), uiContext.drawContext.vCanvasSize );\n    DrawRect( uiContext.vPixelCanvasPos, rect, vec4(uiContext.vPixelCanvasPos / uiContext.drawContext.vCanvasSize, float(iControlId), -1.0 ), uiContext.vWindowOutColor );\n}\n\nvoid UI_DrawButton( inout UIContext uiContext, bool bActive, bool bMouseOver, Rect buttonRect )\n{\n\tif (!uiContext.bPixelInView)\n        return;\n    \n    if ( bActive && bMouseOver )\n    {\n    \tDrawBorderIndent( uiContext.vPixelCanvasPos, buttonRect, uiContext.vWindowOutColor );\n    }\n    else\n    {\n    \tDrawBorder( uiContext.vPixelCanvasPos, buttonRect, uiContext.vWindowOutColor );\n    }\n}\n\nbool UI_ProcessButton( inout UIContext uiContext, int iControlId, Rect buttonRect )\n{    \n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, buttonRect ) && uiContext.bMouseInView;\n    \n    bool bButtonPressed = false;\n    \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iControlId;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n            if ( bMouseOver )\n            {\n                bButtonPressed = true;\n            }\n        }\n    }\n\n    bool bActive = (uiContext.iActiveControl == iControlId);\n    \n    UI_DrawButton( uiContext, bActive, bMouseOver, buttonRect );    \n        \n    return bButtonPressed;\n}\n\nvoid UI_DrawCheckbox( inout UIContext uiContext, bool bActive, bool bMouseOver, bool bChecked, Rect checkBoxRect )\n{\n\tif (!uiContext.bPixelInView || Outside( uiContext.vPixelCanvasPos, checkBoxRect ))\n        return;\n    \n    uiContext.vWindowOutColor = vec4(1.0);\n    \n    if ( bActive && bMouseOver )\n    {\n        uiContext.vWindowOutColor = vec4(0.85,0.85,0.85,1.0);\n    }\n\n    DrawBorderIndent( uiContext.vPixelCanvasPos, checkBoxRect, uiContext.vWindowOutColor );\n\n    Rect smallerRect = checkBoxRect;\n    RectShrink( smallerRect, vec2(6.0));\n\n    if ( bChecked )\n    {\n        vec4 vCheckColor = vec4(0.0, 0.0, 0.0, 1.0);\n        DrawLine( uiContext.vPixelCanvasPos, smallerRect.vPos+ smallerRect.vSize * vec2(0.0, 0.75), smallerRect.vPos+ smallerRect.vSize * vec2(0.25, 1.0), 2.0f, vCheckColor, uiContext.vWindowOutColor );\n        DrawLine( uiContext.vPixelCanvasPos, smallerRect.vPos+ smallerRect.vSize * vec2(0.25, 1.0), smallerRect.vPos+ smallerRect.vSize * vec2(1.0, 0.25), 2.0f, vCheckColor, uiContext.vWindowOutColor );\n    }\n}\n\nvoid UI_ProcessCheckbox( inout UIContext uiContext, int iControlId, inout UIData_Bool data, Rect checkBoxRect )\n{    \n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, checkBoxRect ) && uiContext.bMouseInView;\n    \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iControlId;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n            if ( bMouseOver )\n            {\n                data.bValue = !data.bValue;\n            }\n        }\n    }\n    \n    bool bActive = (uiContext.iActiveControl == iControlId);\n    \n    UI_DrawCheckbox( uiContext, bActive, bMouseOver, data.bValue, checkBoxRect );    \n}\n\nvoid UI_DrawSliderX( inout UIContext uiContext, bool bActive, bool bMouseOver, float fPosition, Rect sliderRect, float fHandleSize, bool scrollbarStyle )\n{\n\tif (!uiContext.bPixelInView || Outside( uiContext.vPixelCanvasPos, sliderRect ))\n        return;\n    \n    Rect horizLineRect;\n    \n    horizLineRect = sliderRect;\n    if (!scrollbarStyle)\n    {\n\t    float fMid = sliderRect.vPos.y + sliderRect.vSize.y * 0.5;\n    \thorizLineRect.vPos.y = fMid - 2.0;\n    \thorizLineRect.vSize.y = 4.0;\n    }\n\n    DrawBorderIndent( uiContext.vPixelCanvasPos, horizLineRect, uiContext.vWindowOutColor );\n\n    float fSlideMin = sliderRect.vPos.x + fHandleSize * 0.5f;\n    float fSlideMax = sliderRect.vPos.x + sliderRect.vSize.x - fHandleSize * 0.5f;\n\n    float fDistSlider = (fSlideMin + (fSlideMax-fSlideMin) * fPosition);\n\n    Rect handleRect;\n\n    handleRect = sliderRect;\n    handleRect.vPos.x = fDistSlider - fHandleSize * 0.5f;\n    handleRect.vSize.x = fHandleSize;\n\n    vec4 handleColor = vec4(0.75, 0.75, 0.75, 1.0);\n    if ( bActive )\n    {\n        handleColor.rgb += 0.1;\n    }\n\n    DrawRect( uiContext.vPixelCanvasPos, handleRect, handleColor, uiContext.vWindowOutColor );\n    DrawBorder( uiContext.vPixelCanvasPos, handleRect, uiContext.vWindowOutColor );\n}\n\nvoid UI_DrawSliderY( inout UIContext uiContext, bool bActive, bool bMouseOver, float fPosition, Rect sliderRect, float fHandleSize, bool scrollbarStyle )\n{\n\tif (!uiContext.bPixelInView || Outside( uiContext.vPixelCanvasPos, sliderRect ))\n        return;\n    \n    Rect horizLineRect;\n    \n    horizLineRect = sliderRect;\n    if (!scrollbarStyle)\n    {\n\t    float fMid = sliderRect.vPos.x + sliderRect.vSize.x * 0.5;\n    \thorizLineRect.vPos.x = fMid - 2.0;\n    \thorizLineRect.vSize.x = 4.0;\n    }\n\n    DrawBorderIndent( uiContext.vPixelCanvasPos, horizLineRect, uiContext.vWindowOutColor );\n\n    float fSlideMin = sliderRect.vPos.y + fHandleSize * 0.5f;\n    float fSlideMax = sliderRect.vPos.y + sliderRect.vSize.y - fHandleSize * 0.5f;\n\n    float fDistSlider = (fSlideMin + (fSlideMax-fSlideMin) * fPosition);\n\n    Rect handleRect;\n\n    handleRect = sliderRect;\n    handleRect.vPos.y = fDistSlider - fHandleSize * 0.5f;\n    handleRect.vSize.y = fHandleSize;\n\n    vec4 handleColor = vec4(0.75, 0.75, 0.75, 1.0);\n    if ( bActive )\n    {\n        handleColor.rgb += 0.1;\n    }\n\n    DrawRect( uiContext.vPixelCanvasPos, handleRect, handleColor, uiContext.vWindowOutColor );\n    DrawBorder( uiContext.vPixelCanvasPos, handleRect, uiContext.vWindowOutColor );\n}\n\nvoid UI_ProcessSlider( inout UIContext uiContext, int iControlId, inout UIData_Value data, Rect sliderRect )\n{    \n    float fHandleSize = 8.0;\n    \n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, sliderRect ) && uiContext.bMouseInView;\n    \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iControlId;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        float fSlidePosMin = sliderRect.vPos.x + fHandleSize * 0.5f;\n        float fSlidePosMax = sliderRect.vPos.x + sliderRect.vSize.x - fHandleSize * 0.5f;\n        float fPosition = (uiContext.vMouseCanvasPos.x - fSlidePosMin) / (fSlidePosMax - fSlidePosMin);\n        fPosition = clamp( fPosition, 0.0f, 1.0f );\n        data.fValue = data.fRangeMin + fPosition * (data.fRangeMax - data.fRangeMin);\n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n        }\n    }\n        \n    bool bActive = (uiContext.iActiveControl == iControlId);\n    float fPosition = (data.fValue - data.fRangeMin) / (data.fRangeMax - data.fRangeMin);\n    \n    UI_DrawSliderX( uiContext, bActive, bMouseOver, fPosition, sliderRect, fHandleSize, false );    \n}\n\nvoid UI_ProcessScrollbarX( inout UIContext uiContext, int iControlId, inout UIData_Value data, Rect sliderRect, float fHandleSize )\n{    \n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, sliderRect ) && uiContext.bMouseInView;\n        \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iControlId;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        float fSlidePosMin = sliderRect.vPos.x + fHandleSize * 0.5f;\n        float fSlidePosMax = sliderRect.vPos.x + sliderRect.vSize.x - fHandleSize * 0.5f;\n        float fPosition = (uiContext.vMouseCanvasPos.x - fSlidePosMin) / (fSlidePosMax - fSlidePosMin);\n        fPosition = clamp( fPosition, 0.0f, 1.0f );\n        data.fValue = data.fRangeMin + fPosition * (data.fRangeMax - data.fRangeMin);\n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n        }\n    }\n        \n    bool bActive = (uiContext.iActiveControl == iControlId);\n    float fPosition = (data.fValue - data.fRangeMin) / (data.fRangeMax - data.fRangeMin);\n    \n    UI_DrawSliderX( uiContext, bActive, bMouseOver, fPosition, sliderRect, fHandleSize, true );    \n}\n\nvoid UI_ProcessScrollbarY( inout UIContext uiContext, int iControlId, inout UIData_Value data, Rect sliderRect, float fHandleSize )\n{    \n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, sliderRect ) && uiContext.bMouseInView;\n    \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iControlId;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        float fSlidePosMin = sliderRect.vPos.y + fHandleSize * 0.5f;\n        float fSlidePosMax = sliderRect.vPos.y + sliderRect.vSize.y - fHandleSize * 0.5f;\n        float fPosition = (uiContext.vMouseCanvasPos.y - fSlidePosMin) / (fSlidePosMax - fSlidePosMin);\n        fPosition = clamp( fPosition, 0.0f, 1.0f );\n        data.fValue = data.fRangeMin + fPosition * (data.fRangeMax - data.fRangeMin);\n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n        }\n    }\n        \n    bool bActive = (uiContext.iActiveControl == iControlId);\n    float fPosition = (data.fValue - data.fRangeMin) / (data.fRangeMax - data.fRangeMin);\n    \n    UI_DrawSliderY( uiContext, bActive, bMouseOver, fPosition, sliderRect, fHandleSize, true );    \n}\n\nvoid UI_DrawColorPickerSV( inout UIContext uiContext, bool bActive, vec3 vHSV, Rect pickerRect )\n{\n\tif (!uiContext.bPixelInView || Outside( uiContext.vPixelCanvasPos, pickerRect ))\n        return;\n    \n    vec2 vCurrPixelPos = (uiContext.vPixelCanvasPos - pickerRect.vPos) / pickerRect.vSize;\n    vCurrPixelPos.y = 1.0f - vCurrPixelPos.y;\n    vec3 vHSVCurr = vHSV;\n    vHSVCurr.yz = vCurrPixelPos;\n\n    uiContext.vWindowOutColor = vec4( hsv2rgb( vHSVCurr ), 1.0 );\n    \n    vec2 vSelectedPos = vHSV.yz;\n    vSelectedPos.y = 1.0f - vSelectedPos.y;\n    vSelectedPos = vSelectedPos * pickerRect.vSize + pickerRect.vPos;\n        \n    float l = length( vSelectedPos - uiContext.vPixelCanvasPos );\n    float d = l - 3.0;\n    d = min(d, 5.0 - l);\n    if ( bActive )\n    {\n        float d2 = l - 5.0;\n    \td2 = min(d2, 7.0 - l);\n\t    d = max(d, d2);\n    }\n    \n    float fBlend = clamp(d, 0.0, 1.0);\n    \n    uiContext.vWindowOutColor.rgb = mix(uiContext.vWindowOutColor.rgb, vec3(1.0) - uiContext.vWindowOutColor.rgb, fBlend);\n}\n\nvoid UI_ProcessColorPickerSV( inout UIContext uiContext, int iControlId, inout UIData_Color data, Rect pickerRect )\n{\n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, pickerRect ) && uiContext.bMouseInView;\n    \n    vec3 vHSV = data.vHSV;\n    \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iControlId;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        vec2 vPos = (uiContext.vMouseCanvasPos - pickerRect.vPos) / pickerRect.vSize;\n        vPos = clamp( vPos, vec2(0), vec2(1) );\n        \n        vHSV.yz = vPos;\n        vHSV.z = 1.0f - vHSV.z;\n        \n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n        }\n    }\n    \n    data.vHSV = vHSV;\n    \n    bool bActive = (uiContext.iActiveControl == iControlId);\n    \n    UI_DrawColorPickerSV( uiContext, bActive, vHSV, pickerRect );    \n}\n\nvoid UI_DrawColorPickerH( inout UIContext uiContext, bool bActive, vec3 vHSV, Rect pickerRect )\n{\n\tif (!uiContext.bPixelInView || Outside( uiContext.vPixelCanvasPos, pickerRect ))\n        return;\n    \n    vec2 vCurrPixelPos = (uiContext.vPixelCanvasPos - pickerRect.vPos) / pickerRect.vSize;\n    vec3 vHSVCurr = vHSV;\n    vHSVCurr.x = vCurrPixelPos.y;\n    vHSVCurr.yz = vec2(1.0, 1.0);\n    \n    float fSelectedPos = vHSV.x * pickerRect.vSize.y + pickerRect.vPos.y;\n\n\tuiContext.vWindowOutColor = vec4( hsv2rgb( vHSVCurr ), 1.0 );\n        \n    float l = length( fSelectedPos - uiContext.vPixelCanvasPos.y );\n    float d = l - 1.0;\n    d = min(d, 5.0 - l);\n    if ( bActive )\n    {\n        float d2 = l - 4.0;\n    \td2 = min(d2, 6.0 - l);\n\t    d = max(d, d2);\n    }\n    \n    float fBlend = clamp(d, 0.0, 1.0);\n    \n    uiContext.vWindowOutColor.rgb = mix(uiContext.vWindowOutColor.rgb, vec3(0.5), fBlend);    \n}\n\nvoid UI_ProcessColorPickerH( inout UIContext uiContext, int iControlId, inout UIData_Color data, Rect pickerRect )\n{\n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, pickerRect ) && uiContext.bMouseInView;\n    \n    vec3 vHSV = data.vHSV;\n    \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iControlId;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        float fPos = (uiContext.vMouseCanvasPos.y - pickerRect.vPos.y) / pickerRect.vSize.y;\n        fPos = clamp( fPos, 0.0f, 1.0f );\n        \n        vHSV.x = fPos;\n        \n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n        }\n    }\n    \n    data.vHSV = vHSV;\n    \n    bool bActive = (uiContext.iActiveControl == iControlId);\n    \n    UI_DrawColorPickerH( uiContext, bActive, vHSV, pickerRect );\n}\n\nbool UI_DrawWindowCloseBox( inout UIContext uiContext, Rect closeBoxRect )\n{\n\tif (!uiContext.bPixelInView || !Inside( uiContext.vPixelCanvasPos, closeBoxRect ))\n        return false;\n    \n    vec2 vCrossPos = closeBoxRect.vPos + closeBoxRect.vSize * 0.5;        \n    vec2 vCrossSize = closeBoxRect.vSize * 0.5 * 0.4;\n    vec4 crossColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec2 vCrossSizeFlip = vCrossSize * vec2(1.0, -1.0);\n    \n    DrawLine( uiContext.vPixelCanvasPos, vCrossPos - vCrossSize, vCrossPos + vCrossSize, 2.0f, crossColor, uiContext.vWindowOutColor );\n    DrawLine( uiContext.vPixelCanvasPos, vCrossPos - vCrossSizeFlip, vCrossPos + vCrossSizeFlip, 2.0f, crossColor, uiContext.vWindowOutColor );\n    \n    return true;\n}\n\nbool UI_ProcessWindowCloseBox( inout UIContext uiContext, inout UIWindowState window, int iControlId, Rect closeBoxRect )\n{\n    bool bPressed = UI_ProcessButton( uiContext, iControlId, closeBoxRect );\n    \n    if ( bPressed )\n    {\n \t\twindow.bClosed = true;\n    }\n\n    bool bActive = (uiContext.iActiveControl == iControlId);\n    \n    return UI_DrawWindowCloseBox( uiContext, closeBoxRect );\n}\n    \nbool UI_DrawWindowMinimizeWidget( inout UIContext uiContext, bool bMinimized, Rect minimizeBoxRect )\n{\n\tif (!uiContext.bPixelInView || !Inside( uiContext.vPixelCanvasPos, minimizeBoxRect ))\n        return false;\n    \n    vec2 vArrowPos = minimizeBoxRect.vPos + minimizeBoxRect.vSize * 0.5;        \n    vec2 vArrowSize = minimizeBoxRect.vSize * 0.25;\n    vec4 arrowColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if ( !bMinimized )\n    {\n        DrawLine( uiContext.vPixelCanvasPos, vArrowPos + vec2(-1.0, -0.5) * vArrowSize, vArrowPos + vec2(0.0, 0.5) * vArrowSize, 2.0f, arrowColor, uiContext.vWindowOutColor );\n        DrawLine( uiContext.vPixelCanvasPos, vArrowPos + vec2( 1.0, -0.5) * vArrowSize, vArrowPos + vec2(0.0, 0.5) * vArrowSize, 2.0f, arrowColor, uiContext.vWindowOutColor );\n    }\n    else\n    {\n        DrawLine( uiContext.vPixelCanvasPos, vArrowPos + vec2( 0.5, 0.0 )* vArrowSize, vArrowPos + vec2(-0.5, -1.0) * vArrowSize, 2.0f, arrowColor, uiContext.vWindowOutColor );\n        DrawLine( uiContext.vPixelCanvasPos, vArrowPos + vec2( 0.5, 0.0 )* vArrowSize, vArrowPos + vec2(-0.5,  1.0) * vArrowSize, 2.0f, arrowColor, uiContext.vWindowOutColor );\n    }    \n    \n    return true;\n}\n\nbool UI_ProcessWindowMinimizeWidget( inout UIContext uiContext, inout UIWindowState window, int iControlId, Rect minimizeBoxRect )\n{    \n    bool bPressed = UI_ProcessButton( uiContext, iControlId, minimizeBoxRect );\n    \n    if ( bPressed )\n    {\n \t\twindow.bMinimized = !window.bMinimized;        \n    }\n\n    bool bActive = (uiContext.iActiveControl == iControlId);\n    \n    return UI_DrawWindowMinimizeWidget( uiContext, window.bMinimized, minimizeBoxRect );\n}\n\nvoid UI_ProcessScrollbarPanelBegin( inout UIContext uiContext, inout UIPanelState scrollbarState, int iControlId, int iData, Rect scrollbarPanelRect, vec2 vScrollbarCanvasSize )\n{\n    float styleSize = UIStyle_ScrollBarSize();\n    \n\tbool bScrollbarHorizontal = (scrollbarPanelRect.vSize.x < vScrollbarCanvasSize.x);\n    if ( bScrollbarHorizontal )\n    {        \n        scrollbarPanelRect.vSize.y -= styleSize;\n    }\n\n    bool bScrollbarVertical = (scrollbarPanelRect.vSize.y < vScrollbarCanvasSize.y);\n    if ( bScrollbarVertical )\n    {\n        scrollbarPanelRect.vSize.x -= styleSize;\n    }\n\n    // Adding a vertical scrollbar may mean we now need a horizontal one\n    if ( !bScrollbarHorizontal )\n    {\n        bScrollbarHorizontal = (scrollbarPanelRect.vSize.x < vScrollbarCanvasSize.x);\n        if ( bScrollbarHorizontal )\n        {        \n            scrollbarPanelRect.vSize.y -= styleSize;\n        }\n    }\n    \n    // Todo : Force enable or disable ?\n\n\tvec4 vData0 = LoadVec4( iChannelUI, ivec2(iData,0) );   \n        \n    UIData_Value scrollValueX;\n    scrollValueX.fRangeMin = 0.0;\n    scrollValueX.fRangeMax = max(0.0, vScrollbarCanvasSize.x - scrollbarPanelRect.vSize.x);\n        \n    UIData_Value scrollValueY;\n    scrollValueY.fRangeMin = 0.0;\n    scrollValueY.fRangeMax = max(0.0, vScrollbarCanvasSize.y - scrollbarPanelRect.vSize.y);\n    \n    if ( iFrame == 0 || vData0.z != DIRTY_DATA_MAGIC )\n    {\n        scrollValueX.fValue = 0.0;\n        scrollValueY.fValue = 0.0;\n    }\n    else\n    {\n        scrollValueX.fValue = vData0.x;\n        scrollValueY.fValue = vData0.y;\n    }    \n    \n    scrollValueX.fValue = clamp( scrollValueX.fValue, scrollValueX.fRangeMin, scrollValueX.fRangeMax );\n    scrollValueY.fValue = clamp( scrollValueY.fValue, scrollValueY.fRangeMin, scrollValueY.fRangeMax );\n    \n    if ( bScrollbarHorizontal )\n    {\n        Rect scrollbarRect;\n        scrollbarRect.vPos = scrollbarPanelRect.vPos;\n        scrollbarRect.vPos.y += scrollbarPanelRect.vSize.y;\n        scrollbarRect.vSize.x = scrollbarPanelRect.vSize.x;\n        scrollbarRect.vSize.y = styleSize;\n        \n        float fHandleSize = scrollbarRect.vSize.x * (scrollbarPanelRect.vSize.x / vScrollbarCanvasSize.x);\n\n        if ( uiContext.bPixelInView ) \n        {\n\t        DrawRect( uiContext.vPixelCanvasPos, scrollbarRect, vec4(0.6, 0.6, 0.6, 1.0), uiContext.vWindowOutColor );\n        }        \n        UI_ProcessScrollbarX( uiContext, iControlId, scrollValueX, scrollbarRect, fHandleSize );\n    }\n        \n    if ( bScrollbarVertical )\n    {        \n        Rect scrollbarRect;\n        scrollbarRect.vPos = scrollbarPanelRect.vPos;\n        scrollbarRect.vPos.x += scrollbarPanelRect.vSize.x;\n        scrollbarRect.vSize.x = styleSize;\n        scrollbarRect.vSize.y = scrollbarPanelRect.vSize.y;\n        \n        float fHandleSize = scrollbarRect.vSize.y * (scrollbarPanelRect.vSize.y / vScrollbarCanvasSize.y);\n        \n        if ( uiContext.bPixelInView ) \n        {\n\t        DrawRect( uiContext.vPixelCanvasPos, scrollbarRect, vec4(0.6, 0.6, 0.6, 1.0), uiContext.vWindowOutColor );\n        }\n        \n        UI_ProcessScrollbarY( uiContext, iControlId + 1000, scrollValueY, scrollbarRect, fHandleSize );\n    }\n    \n    if ( bScrollbarHorizontal && bScrollbarVertical ) \n    {\n        Rect cornerRect;\n        cornerRect.vPos = scrollbarPanelRect.vPos;\n        cornerRect.vPos += scrollbarPanelRect.vSize;\n        cornerRect.vSize = vec2(styleSize);\n        \n        if ( uiContext.bPixelInView ) \n        {\n            DrawRect( uiContext.vPixelCanvasPos, cornerRect, vec4(0.7, 0.7, 0.7, 1.0), uiContext.vWindowOutColor );\n        \tDrawBorderIndent( uiContext.vPixelCanvasPos, cornerRect, uiContext.vWindowOutColor );\n        }\n    }\n\n    UI_PanelBegin( uiContext, scrollbarState );    \n    \n    vData0.x = scrollValueX.fValue;\n    vData0.y = scrollValueY.fValue;\n    vData0.z = DIRTY_DATA_MAGIC;\n    StoreVec4( ivec2(iData,0), vData0, uiContext.vOutData, ivec2(uiContext.vFragCoord) );    \n        \n            \n    UIDrawContext scrollbarPanelContextDesc = UIDrawContext_SetupFromRect( scrollbarPanelRect );\n    scrollbarPanelContextDesc.vCanvasSize = vScrollbarCanvasSize;\n    scrollbarPanelContextDesc.vOffset = vec2(scrollValueX.fValue, scrollValueY.fValue);\n\n    UIDrawContext scrollbarPanelContext = UIDrawContext_TransformChild( scrollbarState.parentDrawContext, scrollbarPanelContextDesc );\n    UI_SetDrawContext( uiContext, scrollbarPanelContext );\n}\n\nvoid UI_ProcessScrollbarPanelEnd( inout UIContext uiContext, inout UIPanelState scrollbarState )\n{\n    UI_PanelEnd( uiContext, scrollbarState );    \n}\n\n\nvoid UIStyle_GetFontStyleTitle( inout LayoutStyle style, inout RenderStyle renderStyle );\nvoid PrintWindowTitle( inout PrintState state, LayoutStyle style, int controlId );\n\nvec2 UI_WindowGetTitleBarSize( UIContext uiContext, inout UIWindowState window )\n{\n    return vec2(window.drawRect.vSize.x - UIStyle_WindowBorderSize().x * 2.0, UIStyle_TitleBarHeight() );\n}\n\nvoid UI_DrawWindowTitleBar( inout UIContext uiContext, bool bActive, Rect titleBarRect, inout UIWindowState window )\n{   \n\tif (!uiContext.bPixelInView || Outside( uiContext.vPixelCanvasPos, titleBarRect ))\n        return;\n    \n    vec4 colorA = vec4(0.0, 0.0, 0.5, 1.0);\n    vec4 colorB = vec4(0.03, 0.5, 0.8, 1.0);\n    if ( bActive )\n    {\n        colorA.rgb += 0.1;\n        colorB.rgb += 0.1;\n    }\n\n    float t = (uiContext.vPixelCanvasPos.x - titleBarRect.vPos.x) / 512.0;\n    t = clamp( t, 0.0f, 1.0f );\n    uiContext.vWindowOutColor = mix( colorA, colorB, t );\n    \n    {\n        LayoutStyle style;\n        RenderStyle renderStyle;\n        UIStyle_GetFontStyleTitle( style, renderStyle );\n\n        vec2 vTextOrigin = vec2(0);\n        if ( FLAG_SET(window.uControlFlags, WINDOW_CONTROL_FLAG_MINIMIZE_BOX) )\n        {\n        \tvTextOrigin.x += titleBarRect.vSize.y;\n        }\n        \n        PrintState state = UI_PrintState_Init( uiContext, style, vTextOrigin );    \n        PrintWindowTitle( state, style, window.iControlId );    \n        RenderFont( state, style, renderStyle, uiContext.vWindowOutColor.rgb );\n    }\n}\n\nbool UI_ProcessWindowTitleBar( inout UIContext uiContext, inout UIWindowState window )\n{\n    int iWindowTitleBarControlId = window.iControlId;\n    int iWindowMinimizeControlId = window.iControlId + 1000;\n    int iWindowCloseControlId = window.iControlId + 3000;\n    Rect titleBarRect = Rect( vec2(0.0), UI_WindowGetTitleBarSize( uiContext, window ) );\n    \n    bool bRenderedWidget = false;\n    if ( FLAG_SET(window.uControlFlags, WINDOW_CONTROL_FLAG_MINIMIZE_BOX) )\n    {\n        Rect minimizeBoxRect = Rect( vec2(0.0), vec2(titleBarRect.vSize.y) );\n        RectShrink( minimizeBoxRect, vec2(4.0) );\n        \n    \tbRenderedWidget = UI_ProcessWindowMinimizeWidget( uiContext, window, iWindowMinimizeControlId, minimizeBoxRect );\n    }\n\n    if ( FLAG_SET(window.uControlFlags, WINDOW_CONTROL_FLAG_CLOSE_BOX) )\n    {\n        Rect closeBoxRect = Rect( vec2(0.0), vec2(titleBarRect.vSize.y) ); \n        closeBoxRect.vPos.x = titleBarRect.vSize.x - closeBoxRect.vSize.x;\n        RectShrink( closeBoxRect, vec2(4.0) );\n        \n        if( UI_ProcessWindowCloseBox( uiContext, window, iWindowCloseControlId, closeBoxRect ) )\n        {\n            bRenderedWidget = true;\n        }\n    }\n            \n    bool bMouseOver = Inside( uiContext.vMouseCanvasPos, titleBarRect ) && uiContext.bMouseInView;\n        \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick )\n        {\n            uiContext.iActiveControl = iWindowTitleBarControlId;\n            uiContext.vActivePos = window.rect.vPos - uiContext.vMousePos;\n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iWindowTitleBarControlId )\n    {\n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n        }\n    }    \n    \n    bool bActive = (uiContext.iActiveControl == iWindowTitleBarControlId);\n    \n    if ( bActive )\n    {\n        window.rect.vPos = uiContext.vMousePos + uiContext.vActivePos;\n    }   \n    \n    if (!bRenderedWidget)\n    {\n    \tUI_DrawWindowTitleBar( uiContext, bActive, titleBarRect, window );\n    }\n    \n    return Inside( uiContext.vPixelCanvasPos, titleBarRect );\n}\n\nbool ScreenPosInResizeWidget( inout UIContext uiContext, vec2 vCorner, float fControlSize, vec2 vTestPos )\n{\n    vec2 vTestCanvasPos = UIDrawContext_ScreenPosToCanvasPos( uiContext.drawContext, vTestPos );\n    vec2 vOffset = vTestCanvasPos - vCorner + vec2( fControlSize, 0.0 );\n    bool bInCorner = (vOffset.x + vOffset.y) > 0.0;\n    \n    return bInCorner;\n}\n\nvoid UI_ProcessWindowResizeWidget( inout UIContext uiContext, inout UIWindowState window, int iControlId )\n{\n    vec2 vCorner = uiContext.drawContext.vCanvasSize;\n    float fControlSize = 24.0;\n    \n    bool bMouseOver = ScreenPosInResizeWidget( uiContext, vCorner, fControlSize, uiContext.vMousePos )\n        && uiContext.bMouseInView;\n        \n    if ( uiContext.iActiveControl == IDC_NONE )\n    {\n        if ( uiContext.bMouseDown && (!uiContext.bMouseWasDown) && bMouseOver && !uiContext.bHandledClick)\n        {\n            uiContext.iActiveControl = iControlId;\n            \n            uiContext.vActivePos = window.rect.vSize - uiContext.vMousePos;\n            \n            uiContext.bHandledClick = true;\n        }\n    }\n    else\n    if ( uiContext.iActiveControl == iControlId )\n    {\n        if ( !uiContext.bMouseDown )\n        {\n            uiContext.iActiveControl = IDC_NONE;\n        }\n    }\n        \n    bool bActive = (uiContext.iActiveControl == iControlId);        \n    \n    if ( bActive )\n    {\n        window.rect.vSize = uiContext.vMousePos + uiContext.vActivePos;\n        vec2 vMinWindowSize = vec2( 96.0, 64.0 );\n        window.rect.vSize = max( vMinWindowSize, window.rect.vSize );\n        window.rect.vSize = min( window.vMaxSize, window.rect.vSize );\n    }\n    \n    \n    if ( uiContext.bPixelInView &&\n        ScreenPosInResizeWidget( uiContext, vCorner, fControlSize, uiContext.vPixelPos ) )\n    {\n        vec4 vColor = vec4(0.6, 0.6, 0.6, 1.0);\n        \n        if( bActive )\n        {\n            vColor = vec4(0.8, 0.8, 0.8, 1.0);\n        }\n        uiContext.vWindowOutColor = vColor;\n    }    \n}\n\nvec2 UI_GetWindowSizeForContent( vec2 vContentSize )\n{\n    return vContentSize \n        + vec2( 0.0, UIStyle_TitleBarHeight() )\n    \t+ UIStyle_WindowBorderSize() * 2.0\n    \t+ UIStyle_WindowContentPadding() * 2.0;\n}\n\nUIWindowState UI_ProcessWindowCommonBegin( inout UIContext uiContext, int iControlId, int iData, UIWindowDesc desc )\n{   \n    UIWindowState window = UI_GetWindowState( uiContext, iControlId, iData, desc );\n        \n    UI_PanelBegin( uiContext, window.panelState );\n    \n    uiContext.vWindowOutColor.rgba = UIStyle_WindowBackgroundColor();\n    \n    window.drawRect = window.rect;\n    \n    Rect contextRect = window.drawRect;    \n    RectShrink( contextRect, UIStyle_WindowBorderSize() );\n    \n    vec2 vTitleBarSize = UI_WindowGetTitleBarSize( uiContext, window );\n    if ( window.bMinimized )\n    {\n\t    window.drawRect.vSize.y = vTitleBarSize.y + UIStyle_WindowBorderSize().y * 2.0;\n    }\n    \n    // Get window main panel view\n    Rect panelRect = contextRect;\n    \n    panelRect.vPos.y += vTitleBarSize.y;\n    panelRect.vSize.y -= vTitleBarSize.y;\n    \n    if ( window.bMinimized )\n    {\n        panelRect.vSize.y = 0.0;\n    }           \n    \n    \n    UIDrawContext panelDesc = UIDrawContext_SetupFromRect( panelRect );\n    UIDrawContext panelContext = UIDrawContext_TransformChild( window.panelState.parentDrawContext, panelDesc );\n    UI_SetDrawContext( uiContext, panelContext );\n    \n    if ( FLAG_SET(window.uControlFlags, WINDOW_CONTROL_FLAG_RESIZE_WIDGET) )\n    {\n        int iWindowResizeControlId = window.iControlId + 2000; // hack        \n    \tUI_ProcessWindowResizeWidget( uiContext, window, iWindowResizeControlId );\n    }\n            \n    // Get window content panel view\n    UIDrawContext contentPanelDesc;\n    contentPanelDesc.viewport = Rect( vec2(0.0), uiContext.drawContext.viewport.vSize );\n    RectShrink( contentPanelDesc.viewport, UIStyle_WindowContentPadding() );\n    contentPanelDesc.vOffset = vec2(0);\n    contentPanelDesc.vCanvasSize = contentPanelDesc.viewport.vSize;\n\n    UI_SetDrawContext( uiContext, UIDrawContext_TransformChild( panelContext, contentPanelDesc ) ); \n    \n    return window;\n}\n\nvoid UI_ProcessWindowCommonEnd( inout UIContext uiContext, inout UIWindowState window, int iData )\n{    \n    bool bPixelInPanel = uiContext.bPixelInView;\n    \n    Rect contextRect = window.drawRect;    \n    RectShrink( contextRect, UIStyle_WindowBorderSize() );\n    \n    UIDrawContext windowContextDesc = UIDrawContext_SetupFromRect( contextRect );\n    UIDrawContext windowContext = UIDrawContext_TransformChild( window.panelState.parentDrawContext, windowContextDesc );\n\tUI_SetDrawContext( uiContext, windowContext );\n    \n    bool inTitleBar = false;\n    if (  FLAG_SET(window.uControlFlags, WINDOW_CONTROL_FLAG_TITLE_BAR)  )\n    {\n    \tinTitleBar = UI_ProcessWindowTitleBar( uiContext, window );\n    }\n    \n    UIDrawContext windowBackgroundContextDesc = UIDrawContext_SetupFromRect( window.drawRect );\n    UIDrawContext windowBackgroundContext = UIDrawContext_TransformChild( window.panelState.parentDrawContext, windowBackgroundContextDesc );    \n\n    UI_SetDrawContext( uiContext, windowBackgroundContext );\n    if ( !bPixelInPanel && !inTitleBar )\n    {\n        Rect rect = Rect( vec2(0), window.drawRect.vSize );\n\t    DrawBorder( uiContext.vPixelCanvasPos, rect, uiContext.vWindowOutColor );                    \n    }    \n    \n    if ( uiContext.bMouseDown && uiContext.bMouseInView && !uiContext.bHandledClick )\n    {\n        uiContext.bHandledClick = true;\n    }\n    \n    Rect windowRect = uiContext.drawContext.clip;\n\n    UI_PanelEnd( uiContext, window.panelState );\n    UI_ComposeWindowLayer( uiContext, UIStyle_WindowTransparency(), windowRect );\n    \n    UI_StoreWindowState( uiContext, window, iData );    \n}\n\n////////////////////////////////////////////////////////////////////////\n// Client Code Below Here\n////////////////////////////////////////////////////////////////////////\n\nfloat \tUIStyle_TitleBarHeight() \t\t{ return 24.0; }\nvec2 \tUIStyle_WindowBorderSize() \t\t{ return vec2(4.0); }\nvec2 \tUIStyle_WindowContentPadding() \t{ return vec2(16.0, 8.0); }\nvec2 \tUIStyle_ControlSpacing() \t\t{ return  vec2(4.0); }\nvec2 \tUIStyle_FontPadding() \t\t\t{ return vec2(6.0, 2.0); }\nvec2 \tUIStyle_CheckboxSize() \t\t\t{ return vec2(16.0); }\nvec2 \tUIStyle_SliderSize()\t\t\t{ return vec2(192.0, 24.0f); }\nvec3 \tUIStyle_ColorPickerSize()\t\t{ return vec3(192.0, 192.0, 32.0); }\nfloat \tUIStyle_ScrollBarSize() \t\t{ return 24.0; }\nvec4    UIStyle_WindowBackgroundColor() { return vec4( 0.75, 0.75, 0.75, 1.0 ); }\nfloat   UIStyle_WindowTransparency() \t{ return 0.025f; }\n\nvoid UIStyle_GetFontStyleWindowText( inout LayoutStyle style, inout RenderStyle renderStyle )\n{\n    style = LayoutStyle_Default();\n    style.vSize *= 0.75;\n\trenderStyle = RenderStyle_Default( vec3(0.0) );\n}\n\nvoid UIStyle_GetFontStyleTitle( inout LayoutStyle style, inout RenderStyle renderStyle )\n{\n    style = LayoutStyle_Default();\n    style.vSize *= 0.75;\n\trenderStyle = RenderStyle_Default( vec3(1.0) );\n}\n\nconst int\n     DATA_UICONTEXT\t\t\t\t\t\t= 0\n\t,DATA_WINDOW_CONTROLS   \t\t\t= 2\n\t,DATA_SCROLLBAR_CONTROLS_WINDOW\t\t= 3\n    ,DATA_ANIMATE\t\t\t\t\t\t= 4\n\t,DATA_ROT_X\t\t\t\t\t\t\t= 5\n\t,DATA_ROT_Y\t\t\t\t\t\t\t= 6\n    ,DATA_EDIT_WHICH_COLOR              = 7\n    ,DATA_WINDOW_EDIT_COLOR \t\t\t= 8\n\t,DATA_BACKGROUND_COLOR        \t\t= 9\n\t,DATA_INTENSITY\t\t\t\t\t\t= 10\n    ,DATA_EXPOSURE\t\t\t\t\t\t= 11\n    ;\n    \nconst int\n\t IDC_WINDOW_CONTROLS      \t\t\t= 0\n\t,IDC_SCROLLBAR_CONTROLS_WINDOW \t\t= 1\n    ,IDC_CHECKBOX_ANIMATE \t\t\t\t= 2\n\t,IDC_SLIDER_ROT_X \t\t\t       \t= 3\n\t,IDC_SLIDER_ROT_Y\t\t\t\t\t= 4\n\t,IDC_BACKGROUND_COLOR_BUTTON\t\t= 7\n    ,IDC_WINDOW_EDIT_COLOR       \t\t= 12\n    ,IDC_COLOR_PICKER \t\t\t\t\t= 13\n\t,IDC_SLIDER_INTENSITY\t\t\t\t= 14\n    ,IDC_SLIDER_EXPOSURE\t\t\t\t= 15\n;\n\nvoid PrintWindowTitle( inout PrintState state, LayoutStyle style, int controlId )\n{\n    if ( controlId == IDC_WINDOW_CONTROLS )\n    {\n        uint strA[] = uint[] ( _C, _o, _n, _t, _r, _o, _l, _s );\n        ARRAY_PRINT(state, style, strA);\n    }\n\telse\n    if ( controlId == IDC_WINDOW_EDIT_COLOR )\n    {\n        uint strA[] = uint[] ( _C, _o, _l, _o, _r );\n        ARRAY_PRINT(state, style, strA);\n    }\n}\n\nstruct UIData\n{\n    UIData_Bool animate;\n    \n    UIData_Value rotX;\n    UIData_Value rotY;\n    UIData_Value intensity;\n    UIData_Value exposure;\n\n    UIData_Value editWhichColor;\n    UIData_Color backgroundColor;\n};    \n\n    \nUIData UI_GetControlData()\n{\n    UIData data;\n    \n    data.animate = UI_GetDataBool( DATA_ANIMATE, false );\n    \n    data.rotX = UI_GetDataValue( DATA_ROT_X, 4.3, 0.0, 5.0 );\n    data.rotY = UI_GetDataValue( DATA_ROT_Y, 0.2, 0.0, 5.0 );\n    data.intensity = UI_GetDataValue( DATA_INTENSITY, 1.0, 0.0, 5.0 );\n    data.exposure = UI_GetDataValue( DATA_EXPOSURE, 0.0, -6.0, 6.0 );    \n    \n    data.editWhichColor = UI_GetDataValue( DATA_EDIT_WHICH_COLOR, -1.0, 0.0, 100.0 );\n    data.backgroundColor = UI_GetDataColor( DATA_BACKGROUND_COLOR, vec3(0.1, 0.5, 1.0) );\n    \n    return data;\n}\n\n\nvoid UI_StoreControlData( inout UIContext uiContext, UIData data )\n{\n    UI_StoreDataBool( uiContext, data.animate, DATA_ANIMATE );\n\n    UI_StoreDataValue( uiContext, data.rotX, DATA_ROT_X );\n    UI_StoreDataValue( uiContext, data.rotY, DATA_ROT_Y );\n    UI_StoreDataValue( uiContext, data.intensity, DATA_INTENSITY );\n    UI_StoreDataValue( uiContext, data.exposure, DATA_EXPOSURE );\n\n    UI_StoreDataValue( uiContext, data.editWhichColor, DATA_EDIT_WHICH_COLOR );\n    UI_StoreDataColor( uiContext, data.backgroundColor, DATA_BACKGROUND_COLOR );\n}\n\n\nvoid PrintRGB( inout PrintState state, LayoutStyle style, vec3 vRGB )\n{\n    PrintCh( state, style, _R );\n    PrintCh( state, style, _COLON );\n\n    Print(state, style, vRGB.r, 2 );\n\n    PrintCh( state, style, _SP );\n    PrintCh( state, style, _G );\n    PrintCh( state, style, _COLON );\n\n    Print(state, style, vRGB.g, 2 );\n\n    PrintCh( state, style, _SP );\n    PrintCh( state, style, _B );\n    PrintCh( state, style, _COLON );\n\n    Print(state, style, vRGB.b, 2 );    \n}\n\nvoid UI_ProcessWindowEditColor( inout UIContext uiContext, inout UIData uiData, int iControlId, int iData )\n{\n    UIWindowDesc desc;\n    \n    desc.initialRect = Rect( vec2(256, 48), vec2(265, 310) );\n    desc.bStartMinimized = false;\n    desc.uControlFlags = WINDOW_CONTROL_FLAG_TITLE_BAR | WINDOW_CONTROL_FLAG_CLOSE_BOX;\n    desc.vMaxSize = vec2(100000.0);\n\n    UIWindowState window = UI_ProcessWindowCommonBegin( uiContext, iControlId, iData, desc );\n    \n    // Controls...\n    if ( !window.bMinimized )\n    {    \n\t\tUILayout uiLayout = UILayout_Reset();\n        \n        LayoutStyle style;\n        RenderStyle renderStyle;             \n        UIStyle_GetFontStyleWindowText( style, renderStyle );\n                \n\t\tUILayout_StackControlRect( uiLayout, UIStyle_ColorPickerSize().xy );                \n        UI_ProcessColorPickerSV( uiContext, IDC_COLOR_PICKER, uiData.backgroundColor, uiLayout.controlRect );\n        UILayout_StackRight( uiLayout );\n\t\tUILayout_StackControlRect( uiLayout, UIStyle_ColorPickerSize().zy );        \n        UI_ProcessColorPickerH( uiContext, IDC_COLOR_PICKER+1000, uiData.backgroundColor, uiLayout.controlRect );\n        UILayout_StackDown( uiLayout );        \n        \n        {\n            PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n\n            vec3 vRGB = hsv2rgb(uiData.backgroundColor.vHSV);\n            PrintRGB( state, style, vRGB );\n                \n            UI_RenderFont( uiContext, state, style, renderStyle );\n                        \n\t\t\tUILayout_SetControlRectFromText( uiLayout, state, style );\n\t        UILayout_StackDown( uiLayout );            \n        }\n            \n        {\n            PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n            uint strA[] = uint[] ( _O, _k );\n            ARRAY_PRINT(state, style, strA);\n            UI_RenderFont( uiContext, state, style, renderStyle );\n\t\t\tUILayout_SetControlRectFromText( uiLayout, state, style );\n\n            bool buttonPressed = UI_ProcessButton( uiContext, IDC_COLOR_PICKER + 2000, uiLayout.controlRect ); // Use text for button rect\n            if ( buttonPressed )\n            {\n                window.bClosed = true;\n            }\n\t        UILayout_StackDown( uiLayout );                  \n        }        \n    }\n        \n    UI_ProcessWindowCommonEnd( uiContext, window, iData );    \n    \n    if ( window.bClosed )    \n    {\n        uiData.editWhichColor.fValue = -1.0;\n    }\n    \n}\n\nvoid UI_ProcessWindowMain( inout UIContext uiContext, inout UIData uiData, int iControlId, int iData )\n{\n    UIWindowDesc desc;\n    \n    desc.initialRect = Rect( vec2(16, 16), vec2(380, 180) );\n    desc.bStartMinimized = true;\n    desc.uControlFlags = WINDOW_CONTROL_FLAG_TITLE_BAR | WINDOW_CONTROL_FLAG_MINIMIZE_BOX | WINDOW_CONTROL_FLAG_RESIZE_WIDGET;    \n    desc.vMaxSize = vec2(380.0, 250.0);\n\n    UIWindowState window = UI_ProcessWindowCommonBegin( uiContext, iControlId, iData, desc );\n    \n    if ( !window.bMinimized )\n    {\n        // Controls...\n        Rect scrollbarPanelRect = Rect( vec2(0), vec2( 300.0 + UIStyle_ScrollBarSize(), uiContext.drawContext.vCanvasSize.y ) );\n\n        vec2 vScrollbarCanvasSize = vec2(300, 200);\n\n        UIPanelState scrollbarPanelState;            \n        UI_ProcessScrollbarPanelBegin( uiContext, scrollbarPanelState, IDC_SCROLLBAR_CONTROLS_WINDOW, DATA_SCROLLBAR_CONTROLS_WINDOW, scrollbarPanelRect, vScrollbarCanvasSize );\n\n        {        \n            float tabX = 58.0f;\n            //Scroll Panel Controls...\n            UILayout uiLayout = UILayout_Reset();\n\n            LayoutStyle style;\n            RenderStyle renderStyle;             \n            UIStyle_GetFontStyleWindowText( style, renderStyle );       \n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n                uint strA[] = uint[] ( _A, _n, _i, _m, _a, _t, _e );\n                ARRAY_PRINT(state, style, strA);\n                UI_RenderFont( uiContext, state, style, renderStyle );\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }            \n            UILayout_StackRight( uiLayout );\n            \n            UILayout_StackControlRect( uiLayout, UIStyle_CheckboxSize() );\n            UI_ProcessCheckbox( uiContext, IDC_CHECKBOX_ANIMATE, uiData.animate, uiLayout.controlRect );\n            UILayout_StackDown( uiLayout );\n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n                uint strA[] = uint[] ( _R, _o, _t, _X, _COLON );\n                ARRAY_PRINT(state, style, strA);\n                UI_RenderFont( uiContext, state, style, renderStyle );\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n            //UILayout_StackRight( uiLayout );\n            UILayout_SetX( uiLayout, tabX );\n            \n            UILayout_StackControlRect( uiLayout, UIStyle_SliderSize() );                \n            UI_ProcessSlider( uiContext, IDC_SLIDER_ROT_X, uiData.rotX, uiLayout.controlRect );\n            UILayout_StackRight( uiLayout );\n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n                Print(state, style, uiData.rotX.fValue, 2 );\n\n                UI_RenderFont( uiContext, state, style, renderStyle );\n\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n\n            UILayout_StackDown( uiLayout );    \n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n                uint strA[] = uint[] ( _R, _o, _t, _Y, _COLON );\n                ARRAY_PRINT(state, style, strA);\n                UI_RenderFont( uiContext, state, style, renderStyle );\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n            UILayout_SetX( uiLayout, tabX );\n            //UILayout_StackRight( uiLayout );\n            \n            UILayout_StackControlRect( uiLayout, UIStyle_SliderSize() );                \n            UI_ProcessSlider( uiContext, IDC_SLIDER_ROT_Y, uiData.rotY, uiLayout.controlRect );\n            UILayout_StackRight( uiLayout );\n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n\n                Print(state, style, uiData.rotY.fValue, 2 );\n\n                UI_RenderFont( uiContext, state, style, renderStyle );\n\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n\n            UILayout_StackDown( uiLayout );  \n\n            {\n                // Draw color swatch\n                vec2 vSwatchSize = vec2( uiLayout.controlRect.vSize.y);\n                UILayout_StackControlRect( uiLayout, vSwatchSize );\n                if (uiContext.bPixelInView)\n                {\n                    DrawRect( uiContext.vPixelCanvasPos, uiLayout.controlRect, vec4(hsv2rgb(uiData.backgroundColor.vHSV), 1.0), uiContext.vWindowOutColor );\n                }\n            }\n\n            bool buttonPressed = UI_ProcessButton( uiContext, IDC_BACKGROUND_COLOR_BUTTON, uiLayout.controlRect ); // Get button position from prev control\n\n            if ( buttonPressed )\n            {\n                uiData.editWhichColor.fValue = 0.0;\n            }                \n\n            UILayout_StackRight( uiLayout );            \n            \n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n                uint strA[] = uint[] ( _B, _a, _c, _k, _g, _r, _o, _u, _n, _d, _SP, _C, _o, _l );\n                ARRAY_PRINT(state, style, strA);\n                UI_RenderFont( uiContext, state, style, renderStyle );\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }            \n            \n            UILayout_StackDown( uiLayout );  \n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n                uint strA[] = uint[] ( _I, _n, _t, _COLON );\n                ARRAY_PRINT(state, style, strA);\n                UI_RenderFont( uiContext, state, style, renderStyle );\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n            UILayout_SetX( uiLayout, tabX );\n            //UILayout_StackRight( uiLayout );\n            \n            UILayout_StackControlRect( uiLayout, UIStyle_SliderSize() );                \n            UI_ProcessSlider( uiContext, IDC_SLIDER_INTENSITY, uiData.intensity, uiLayout.controlRect );\n            UILayout_StackRight( uiLayout );\n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n\n                Print(state, style, uiData.intensity.fValue, 2 );\n\n                UI_RenderFont( uiContext, state, style, renderStyle );\n\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n\n            UILayout_StackDown( uiLayout );  \n \n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n                uint strA[] = uint[] ( _E, _x, _p, _COLON );\n                ARRAY_PRINT(state, style, strA);\n                UI_RenderFont( uiContext, state, style, renderStyle );\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n            UILayout_SetX( uiLayout, tabX );\n            //UILayout_StackRight( uiLayout );\n            \n            UILayout_StackControlRect( uiLayout, UIStyle_SliderSize() );                \n            UI_ProcessSlider( uiContext, IDC_SLIDER_EXPOSURE, uiData.exposure, uiLayout.controlRect );\n            UILayout_StackRight( uiLayout );\n\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );        \n\n                Print(state, style, uiData.exposure.fValue, 2 );\n\n                UI_RenderFont( uiContext, state, style, renderStyle );\n\n                UILayout_SetControlRectFromText( uiLayout, state, style );\n            }\n\n            UILayout_StackDown( uiLayout );  \n            \n            #if 0\n            // Debug state\n            {\n                PrintState state = UI_PrintState_Init( uiContext, style, uiLayout.vCursor );\n                uint strA[] = uint[] ( _C, _t, _r, _l, _COLON );\n                ARRAY_PRINT(state, style, strA);\n\n                Print(state, style, uiContext.iActiveControl );\n                UI_RenderFont( uiContext, state, style, renderStyle );\n\n                UILayout_SetControlRectFromText( uiLayout, state, style );            \n            }        \n            #endif\n        }\n        \n        UI_ProcessScrollbarPanelEnd(uiContext, scrollbarPanelState);\n        \n    }    \n    \n    UI_ProcessWindowCommonEnd( uiContext, window, iData );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    UIContext uiContext = UI_GetContext( fragCoord, DATA_UICONTEXT );\n    UIData uiData = UI_GetControlData();\n        \n    // Content...\n    if ( uiData.editWhichColor.fValue >= 0.0 )\n    {\n\t    UI_ProcessWindowEditColor( uiContext, uiData, IDC_WINDOW_EDIT_COLOR, DATA_WINDOW_EDIT_COLOR );\n    }\n    \n    UI_ProcessWindowMain( uiContext, uiData, IDC_WINDOW_CONTROLS, DATA_WINDOW_CONTROLS );\n    \n    // Desktop Controls...\n    {\n    }\n    \n    UI_ComposeWindowLayer( uiContext, 0.0f, uiContext.drawContext.clip );\n\n    UI_StoreControlData( uiContext, uiData );\n    \n    UI_StoreContext( uiContext, DATA_UICONTEXT );\n    \n    fragColor = UI_GetFinalColor( uiContext );    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}