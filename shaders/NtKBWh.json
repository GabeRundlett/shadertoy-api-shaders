{
    "Shader": {
        "info": {
            "date": "1664430301",
            "description": "License CC0: Dark chocolate FBM\nWorking on a cake related shader and created kind of dark chocolate\nbackground. Nothing unique but different colors than what I usually \ndo so sharing.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtKBWh",
            "likes": 14,
            "name": "Dark chocolate FBM",
            "published": 3,
            "tags": [
                "2d",
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "// License CC0: Dark chocolate FBM\n//  Working on a cake related shader and created kind of dark chocolate\n//  background. Nothing unique but different colors than what I usually \n//  do so sharing.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define TTIME       (TAU*TIME)\n#define DOT2(p)     dot(p, p)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat heart(vec2 p) {\n  p.y -= -0.6;\n  p.x = pabs(p.x, 0.125);\n\n  if( p.y+p.x>1.0 )\n      return sqrt(DOT2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n  return sqrt(min(DOT2(p-vec2(0.00,1.00)),\n                  DOT2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nvec2 mod2_1(inout vec2 p) {\n  vec2 n = floor(p + 0.5);\n  p = fract(p+0.5)-0.5;\n  return n;\n}\n\nfloat hf(vec2 p) {  \n  p *= 0.25;\n  vec2 p0 = p;\n  vec2 n0 = mod2_1(p0);\n  vec2 p1 = p*vec2(1.0, -1.0)+vec2(0.5, 0.66);\n  vec2 n1 = mod2_1(p1);\n  const float ss = 0.60;\n  float d0 = heart(p0/ss)*ss;\n  float d1 = heart(p1/ss)*ss;\n  float d = min(d0, d1);\n  return tanh_approx(smoothstep(0.0, -0.1,d)*exp(8.0*-d));\n}\n\nfloat height(vec2 p) {\n  const mat2 rot1 = ROT(1.0);\n  float tm = 123.0+TTIME/240.0;\n  p += 5.0*vec2(cos(tm), sin(tm*sqrt(0.5)));\n  const float aa = -0.45;\n  const mat2  pp = (1.0/aa)*rot1;\n  float h = 0.0;\n  float a = 1.0;\n  float d = 0.0;\n  for (int i = 0; i < 4; ++i) {\n    h += a*hf(p);\n    d += a;\n    a *= aa;\n    p *= pp;\n  }  \n  const float hf = -0.125;\n  return hf*(h/d)+hf;\n}\n\nvec3 normal(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = height(p + e.xy) - height(p - e.xy);\n  n.y = 2.0*e.x;\n  n.z = height(p + e.yx) - height(p - e.yx);\n  \n  return normalize(n);\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  vec2 ppp = p;\n  const float s     = 1.0;\n  const vec3 lp1    = vec3(1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n  const vec3 lp2    = vec3(-1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n  const vec3 lcol1  = HSV2RGB(vec3(0.06, 0.9 , .5));\n  const vec3 lcol2  = HSV2RGB(vec3(0.05, 0.25, 1.0));\n  const vec3 mcol   = HSV2RGB(vec3(0.1 , 0.95, 0.2));\n  const float spe1  = 20.0;\n  const float spe2  = 40.0;\n  float aa = 2.0/RESOLUTION.y;\n\n  float h = height(p);\n  vec3  n = normal(p);\n\n  vec3 ro = vec3(0.0, -10.0, 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(ro - po);\n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n  \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  rn    = n;\n  vec3  ref   = reflect(rd, rn);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  vec3 lpow1 = 0.15*lcol1/DOT2(ld1);\n  vec3 lpow2 = 0.25*lcol2/DOT2(ld2);\n  vec3 dm = mcol*tanh_approx(-h*5.0+0.125);\n  vec3 col = vec3(0.0);\n  col += dm*diff1*lpow1;\n  col += dm*diff2*lpow2;\n  vec3 rm = vec3(1.0)*mix(0.25, 1.0, tanh_approx(-h*1000.0));\n  col += rm*pow(ref1, spe1)*lcol1;\n  col += rm*pow(ref2, spe2)*lcol2;\n\n  const float top = 10.0;\n\n  col = aces_approx(col);\n  col = sRGB(col);\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, q);  \n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}