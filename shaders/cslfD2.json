{
    "Shader": {
        "info": {
            "date": "1689188446",
            "description": "CC0: Shader meta ball intro\nCreated this to show to hacker friend how to do some simple meta ball like effect\nin a fragment shader\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cslfD2",
            "likes": 13,
            "name": "Shader meta ball intro",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "// CC0: Shader meta ball intro\n//  Created this to show to hacker friend how to do some simple meta ball like effect\n//  in a fragment shader\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// Distance field to circle\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;  // Range: 0..1\n  vec2 p = -1. + 2. * q; // Range: -1..1\n  // Adjust for screen ratio\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  // Approximation of pixel size, used for smooth steping the transparency\n  //  at the border of the distance field to reduce aliasing effects\n  float aa = 4.0/RESOLUTION.y;\n\n  // The final distance field\n  float d = 1E4;\n\n  // Let's do 5 balls\n  for (float i = 0.0; i < 5.0; ++i) {\n    // A sinusoidal movement of the balls\n    vec2 off = sin(vec2(1.0, sqrt(0.5))*TIME+i);\n    // Compute the distance from this ball\n    float dd = circle(p - off, 0.33);\n    if (p.y < -1.0+2.0*smoothstep(-0.5, 0.5, sin(TIME))) {\n      // On the bottom we create the final distance field by taking the union \n      //  of the balls shapes using the min function\n      // This make it looks like 5 distinct balls occassionally overlapping\n      d = min(d, dd);\n    } else {\n      // On the top though we that the union using the powerful soft min function\n      //  This gives a more meta ball look\n      d = pmin(d, dd, 1.0);\n    }\n  }\n\n  vec3 col = vec3(0.0);\n  // Add a bit of a glow effect around the meta balls\n  //  simplest way I found the to do is just use the inverted distance + finetuning\n  //  constants\n  col += vec3(1.0, 0.25, 0.125)*0.0001/max(d*d, 0.00001);\n  float a = 10.0*sqrt(abs(d))+TIME;\n  // Compute the ball color using this simple yet appealing way to generate\n  //  a palette of colors\n  vec3 bcol = 0.5*(1.0+cos(0.5*vec3(0.0, 1.0, 2.0)+a));\n  // Compute the transparency using the smoothstep function to reduce aliasing effects\n  float t = smoothstep(0.0, -aa, d);\n  // Mix the background color and the ball color using the transparency\n  col = mix(col, bcol, t);\n  // Distance fields makes certain operations simple\n  //  Take the abs() produces the outline of a shape and by subtracting with a \n  //  number we give the outline a width\n  float od = abs(d)-0.005;\n  // Compute the transparency for the outline \n  // Mix the background color and the outline color using the outline transparency\n  float ot = smoothstep(0.0, -aa, od);\n  col = mix(col, vec3(1.0), ot);\n  \n  // Approximative mapping of RGB to sRGB\n  col = sqrt(col);\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}