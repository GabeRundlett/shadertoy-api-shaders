{
    "Shader": {
        "info": {
            "date": "1511979973",
            "description": "Modeling a simple but complex chemical process - see the source.\nSimilar to the original \"Gray-Scott Explorer\" but with different coloring scheme.",
            "flags": 32,
            "hasliked": 0,
            "id": "MtlfDN",
            "likes": 21,
            "name": "Gray-Scott Explorer 2",
            "published": 3,
            "tags": [
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 943
        },
        "renderpass": [
            {
                "code": "// \"Gray-Scott Explorer 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  The autocatalytic Gray-Scott system involves two chemical reactions\n  U + 2V -> 3V and V -> P.\n  In terms of partial differential equations, where U = U(x,y,t), etc,\n  with diffusion added (fixed diffusion constants D_u and D_v that\n  differ significantly), these correspond to\n    dU/dt = D_u del^2 U - UV^2 + f(1 - U)\n    dV/dt = D_v del^2 V + UV^2 - (f + k)V\n  where f is the feed rate (coupled to reservoirs with U=1 and V=0) and\n  k is the rate constant for V->P.\n\n  The equations are numerically integrated using the Euler method (on a\n  regular CPU use the stable ADI method that allows a 10x larger time\n  step). A small degree of randomness is added to the initial state to\n  break symmetry, so each run will be different; boundaries are periodic.\n\n  The left and right sliders set the k and f parameters; the values are\n  shown x100. The button cycles through several interesting parameter\n  presets; there are many other combinations worth examining. Some\n  patterns are slow to evolve; patience.\n\n  Online sources include:\n   http://blog.hvidtfeldts.net/index.php/2012/08/reaction-diffusion-systems/\n   http://mrob.com/pub/comp/xmorphia/pearson-classes.html\n   https://www.shadertoy.com/view/MdVGRh\n*/\n\nvec3 HsvToRgb (vec3 c);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec2 slVal);\n\nfloat gSize;\n\nfloat Fval (vec2 g)\n{\n  return Loadv4 (int (dot (mod (g, gSize), vec2 (1., gSize)))).x;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 hs;\n  vec3 col, vn, ltDir;\n  vec2 canvas, uv, ut, gv, sv, e;\n  float h[4], tCur, w, hue, colStyle;\n  int gSizeSq;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  ltDir = normalize (vec3 (cos (0.5 * tCur), 3., sin (0.5 * tCur)));\n  gSize = (canvas.y > 1024.) ? 1024. : ((canvas.y > 512.) ? 512. : ((canvas.y > 200.) ? 256. : 64.));\n  gSizeSq = int (gSize * gSize);\n  colStyle = 1.;\n  ut = abs (uv) - vec2 (1.);\n  if (max (ut.x, ut.y) > 0.) {\n    col = ShowWg (uv, canvas, vec3 (0.82), Loadv4 (3).zw);\n  } else {\n    gv = gSize * (0.5 * uv + 0.5);\n    sv = floor (gv);\n    e = vec2 (1., 0.);\n    h[0] = Fval (sv);\n    h[1] = Fval (sv + e);\n    h[2] = Fval (sv + e.yx);\n    h[3] = Fval (sv + e.xx);\n    hs = vec4 (h[0], h[1], h[2], h[3]);\n    vn = normalize (vec3 (hs.x - hs.w - hs.y + hs.z, 0.5, hs.x - hs.w + hs.y - hs.z));\n    gv -= sv;\n    w = mix (mix (hs.x, hs.y, gv.x), mix (hs.z, hs.w, gv.x), gv.y);\n    if (colStyle == 0.) {\n      col = mix (vec3 (1., 1., 0.3), vec3 (0., 0., 0.5), smoothstep (0.3, 0.7, w));\n      col *= 0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n         0.5 * pow (max (0., dot (ltDir, reflect (vec3 (0., -1., 0.), vn))), 32.);\n    } else {\n      hue = mod (0.01 * tCur, 1.);\n      col = HsvToRgb (vec3 (hue, 0.9, 1.)) * mix (max (dot (vn, ltDir), 0.), 0.05, w) +\n         pow (max (0., dot (ltDir, reflect (vec3 (0., -1., 0.), vn))), 64.);\n      col = min (1000. * HsvToRgb (vec3 (hue, 0.3, 1.)) * \n         pow (dot (VaryNf (32. * vec3 (uv, 0.).xzy, vn, 2.), ltDir), 1024.) +\n         col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)), 1.);\n    }\n  }\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, gSize), floor (fi / gSize)) + 0.5) /\n     txSize);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv < 5) {\n    if (iv == -1) k = 8;\n    else if (iv == 0) k = 119;\n    else if (iv == 1) k = 36;\n    else if (iv == 2) k = 93;\n    else if (iv == 3) k = 109;\n    else k = 46;\n  } else {\n    if (iv == 5) k = 107;\n    else if (iv == 6) k = 122;\n    else if (iv == 7) k = 37;\n    else if (iv == 8) k = 127;\n    else k = 47;\n  }\n  q = (q - 0.5) * vec2 (1.7, 2.3);\n  d = 0.;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx - vo);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec2 slVal)\n{\n  vec4 wgBx[3];\n  vec3 c1, c2;\n  vec2 ut, ust;\n  float vW[2], asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.36 * asp, 0., 0.012 * asp, 0.25);\n  wgBx[1] = vec4 (0.44 * asp, 0., 0.012 * asp, 0.25);\n  wgBx[2] = vec4 (0.4 * asp, -0.4, 0.013 * asp, 0.);\n  vW[0] = slVal.x;\n  vW[1] = slVal.y;\n  c1 = vec3 (0.1, 0.1, 0.7);\n  c2 = vec3 (0.5, 0.5, 1.);\n  for (int k = 0; k < 2; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = c2;\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.05) *\n         canvas.y < 5.) ? c2 : vec3 (0.7);\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 2.);\n    if (abs (max (ut.x, ut.y) - 0.015) < 0.006) col = c1;\n    col = mix (col, c1, ShowInt (0.5 * uv - wgBx[k].xy - wgBx[k].zw * vec2 (1., -1.) - vec2 (0.0045, -0.06),\n       0.028 * vec2 (asp, 1.), 2., clamp (floor (1000. * vW[k] * 0.1 + 1e-4), 1., 99.)));\n  }\n  if (length (0.5 * uv - wgBx[2].xy) < wgBx[2].z) {\n    col = (length (0.5 * uv - wgBx[2].xy) < 0.7 * wgBx[2].z) ? c1 : c2;\n  }\n  return col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Gray-Scott Explorer 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT;\nconst float pi = 3.14159;\n\nvec2 Step (int sId)\n{\n  vec4 dv;\n  vec2 sv, c, del2c;\n  c = Loadv4 (sId).xy;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (int (dv.x + gSize * sv.y)).xy +\n          Loadv4 (int (dv.y + gSize * sv.y)).xy +\n          Loadv4 (int (sv.x + gSize * dv.z)).xy +\n          Loadv4 (int (sv.x + gSize * dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (int sId)\n{\n  vec2 sv, c;\n  float s, iSize;\n  iSize = (gSize > 32.) ? 10. : 5.;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashff (mod (17777.7 * (float (sId + 10) + itRand), 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n  } else c = vec2 (1., 0.);\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], stDat, mPtr, mPtrP;\n  vec2 presetKF[7], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, vW, nStep, idPre;\n  int pxId, wgSel, wgReg, gSizeSq, kSel;\n  const int nPre = 7;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y > 1024.) ? 1024. : ((canvas.y > 512.) ? 512. : ((canvas.y > 200.) ? 256. : 64.));\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + gSize * iFrag.y);\n  gSizeSq = int (gSize * gSize);\n  if (iFrag.x >= gSize || pxId >= gSizeSq) discard;\n  doInit = false;\n  doPre = false;\n  wgSel = -1;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    doPre = true;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.z;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (2);\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (3);\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (4);\n    idPre = stDat.z;\n    if (gSize != stDat.w) doInit = true;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.36 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.44 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.4 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[2].xy) < wgBx[2].z) wgReg = 2;\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel >= 0) {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    }\n    doInit = true;\n  }\n  if (gSize == 64. && nStep >= 1000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (doInit) {\n    nStep = 0.;\n    c = Init (pxId);\n  } else {\n    ++ nStep;\n    c = Step (pxId);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if      (pxId == 0) stDat.zw = vec2 (nStep, float (wgSel));\n  else if (pxId == 1) stDat.zw = mPtr.xy;\n  else if (pxId == 2) stDat.zw = vec2 (mPtr.z, itRand);\n  else if (pxId == 3) stDat.zw = slVal;\n  else if (pxId == 4) stDat.zw = vec2 (idPre, gSize);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, gSize), floor (fi / gSize)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, gSize), floor (fi / gSize)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Gray-Scott Explorer 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT;\nconst float pi = 3.14159;\n\nvec2 Step (int sId)\n{\n  vec4 dv;\n  vec2 sv, c, del2c;\n  c = Loadv4 (sId).xy;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (int (dv.x + gSize * sv.y)).xy +\n          Loadv4 (int (dv.y + gSize * sv.y)).xy +\n          Loadv4 (int (sv.x + gSize * dv.z)).xy +\n          Loadv4 (int (sv.x + gSize * dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (int sId)\n{\n  vec2 sv, c;\n  float s, iSize;\n  iSize = (gSize > 32.) ? 10. : 5.;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashff (mod (17777.7 * (float (sId + 10) + itRand), 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n  } else c = vec2 (1., 0.);\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], stDat, mPtr, mPtrP;\n  vec2 presetKF[7], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, vW, nStep, idPre;\n  int pxId, wgSel, wgReg, gSizeSq, kSel;\n  const int nPre = 7;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y > 1024.) ? 1024. : ((canvas.y > 512.) ? 512. : ((canvas.y > 200.) ? 256. : 64.));\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + gSize * iFrag.y);\n  gSizeSq = int (gSize * gSize);\n  if (iFrag.x >= gSize || pxId >= gSizeSq) discard;\n  doInit = false;\n  doPre = false;\n  wgSel = -1;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    doPre = true;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.z;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (2);\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (3);\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (4);\n    idPre = stDat.z;\n    if (gSize != stDat.w) doInit = true;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.36 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.44 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.4 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[2].xy) < wgBx[2].z) wgReg = 2;\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel >= 0) {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    }\n    doInit = true;\n  }\n  if (gSize == 64. && nStep >= 1000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (doInit) {\n    nStep = 0.;\n    c = Init (pxId);\n  } else {\n    ++ nStep;\n    c = Step (pxId);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if      (pxId == 0) stDat.zw = vec2 (nStep, float (wgSel));\n  else if (pxId == 1) stDat.zw = mPtr.xy;\n  else if (pxId == 2) stDat.zw = vec2 (mPtr.z, itRand);\n  else if (pxId == 3) stDat.zw = slVal;\n  else if (pxId == 4) stDat.zw = vec2 (idPre, gSize);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, gSize), floor (fi / gSize)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, gSize), floor (fi / gSize)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Gray-Scott Explorer 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT;\nconst float pi = 3.14159;\n\nvec2 Step (int sId)\n{\n  vec4 dv;\n  vec2 sv, c, del2c;\n  c = Loadv4 (sId).xy;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (int (dv.x + gSize * sv.y)).xy +\n          Loadv4 (int (dv.y + gSize * sv.y)).xy +\n          Loadv4 (int (sv.x + gSize * dv.z)).xy +\n          Loadv4 (int (sv.x + gSize * dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (int sId)\n{\n  vec2 sv, c;\n  float s, iSize;\n  iSize = (gSize > 32.) ? 10. : 5.;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashff (mod (17777.7 * (float (sId + 10) + itRand), 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n  } else c = vec2 (1., 0.);\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], stDat, mPtr, mPtrP;\n  vec2 presetKF[7], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, vW, nStep, idPre;\n  int pxId, wgSel, wgReg, gSizeSq, kSel;\n  const int nPre = 7;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y > 1024.) ? 1024. : ((canvas.y > 512.) ? 512. : ((canvas.y > 200.) ? 256. : 64.));\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + gSize * iFrag.y);\n  gSizeSq = int (gSize * gSize);\n  if (iFrag.x >= gSize || pxId >= gSizeSq) discard;\n  doInit = false;\n  doPre = false;\n  wgSel = -1;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    doPre = true;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.z;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (2);\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (3);\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (4);\n    idPre = stDat.z;\n    if (gSize != stDat.w) doInit = true;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.36 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.44 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.4 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[2].xy) < wgBx[2].z) wgReg = 2;\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel >= 0) {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    }\n    doInit = true;\n  }\n  if (gSize == 64. && nStep >= 1000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (doInit) {\n    nStep = 0.;\n    c = Init (pxId);\n  } else {\n    ++ nStep;\n    c = Step (pxId);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if      (pxId == 0) stDat.zw = vec2 (nStep, float (wgSel));\n  else if (pxId == 1) stDat.zw = mPtr.xy;\n  else if (pxId == 2) stDat.zw = vec2 (mPtr.z, itRand);\n  else if (pxId == 3) stDat.zw = slVal;\n  else if (pxId == 4) stDat.zw = vec2 (idPre, gSize);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, gSize), floor (fi / gSize)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, gSize), floor (fi / gSize)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Gray-Scott Explorer 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 difC, constKF;\nfloat itRand, gSize, delT;\nconst float pi = 3.14159;\n\nvec2 Step (int sId)\n{\n  vec4 dv;\n  vec2 sv, c, del2c;\n  c = Loadv4 (sId).xy;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  dv = mod (vec4 (sv.xx, sv.yy) + vec4 (1., -1., 1., -1.), gSize);\n  del2c = Loadv4 (int (dv.x + gSize * sv.y)).xy +\n          Loadv4 (int (dv.y + gSize * sv.y)).xy +\n          Loadv4 (int (sv.x + gSize * dv.z)).xy +\n          Loadv4 (int (sv.x + gSize * dv.w)).xy - 4. * c;\n  c += delT * (difC * del2c - constKF.y * c +\n     vec2 (constKF.y, - constKF.x * c.y) + c.x * c.y * c.y * vec2 (-1., 1.));\n  return c;\n}\n\nvec2 Init (int sId)\n{\n  vec2 sv, c;\n  float s, iSize;\n  iSize = (gSize > 32.) ? 10. : 5.;\n  sv = vec2 (mod (float (sId), gSize), floor (float (sId) / gSize));\n  if (max (abs (sv.x - 0.5 * gSize), abs (sv.y - 0.5 * gSize)) <= iSize) {\n      s = Hashff (mod (17777.7 * (float (sId + 10) + itRand), 2. * pi));\n      c = vec2 (0.5 + 0.02 * (s - 0.5), 0.25 - 0.02 * (s - 0.5));\n  } else c = vec2 (1., 0.);\n  return c;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], stDat, mPtr, mPtrP;\n  vec2 presetKF[7], iFrag, canvas, ust, c, slVal;\n  float tCur, asp, vW, nStep, idPre;\n  int pxId, wgSel, wgReg, gSizeSq, kSel;\n  const int nPre = 7;\n  bool doInit, doPre;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = (canvas.y > 1024.) ? 1024. : ((canvas.y > 512.) ? 512. : ((canvas.y > 200.) ? 256. : 64.));\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + gSize * iFrag.y);\n  gSizeSq = int (gSize * gSize);\n  if (iFrag.x >= gSize || pxId >= gSizeSq) discard;\n  doInit = false;\n  doPre = false;\n  wgSel = -1;\n  wgReg = -2;\n  difC = vec2 (0.2, 0.1);\n  delT = 1.;\n  presetKF[0] = vec2 (0.047, 0.010);\n  presetKF[1] = vec2 (0.059, 0.020);\n  presetKF[2] = vec2 (0.055, 0.025);\n  presetKF[3] = vec2 (0.060, 0.025);\n  presetKF[4] = vec2 (0.063, 0.050);\n  presetKF[5] = vec2 (0.065, 0.040);\n  presetKF[6] = vec2 (0.065, 0.055);\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    itRand = 0.;\n    idPre = 0.;\n    doPre = true;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.z;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    mPtrP.xy = stDat.zw;\n    stDat = Loadv4 (2);\n    mPtrP.zw = vec2 (stDat.z, 0.);\n    itRand = stDat.w;\n    stDat = Loadv4 (3);\n    slVal = stDat.zw;\n    constKF = slVal.xy * 0.1;\n    stDat = Loadv4 (4);\n    idPre = stDat.z;\n    if (gSize != stDat.w) doInit = true;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.36 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[1] = vec4 (0.44 * asp, 0., 0.012 * asp, 0.25);\n    wgBx[2] = vec4 (0.4 * asp, -0.4, 0.013 * asp, 0.);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[2].xy) < wgBx[2].z) wgReg = 2;\n    if (mPtrP.z <= 0.) {\n      wgSel = wgReg;\n      itRand = tCur;\n    }\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel >= 0) {\n    if (wgSel < 2) {\n      for (int k = 0; k < 2; k ++) {\n        if (wgSel == k) {\n          kSel = k;\n          vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 1.);\n          break;\n        }\n      }\n      vW = 0.01 * floor (100. * vW + 0.5);\n      if (kSel == 0) {\n        slVal.x = clamp (vW, 0.3, 0.7);\n        constKF.x = slVal.x * 0.1;\n      } else if (kSel == 1) {\n        slVal.y = clamp (vW, 0.05, 0.8);\n        constKF.y = slVal.y * 0.1;\n      }\n    } else if (wgSel == 2 && mPtrP.z <= 0.) {\n      idPre = mod (idPre + 1., float (nPre));\n      doPre = true;\n    }\n    doInit = true;\n  }\n  if (gSize == 64. && nStep >= 1000.) {\n    idPre = mod (idPre + 1., float (nPre));\n    doPre = true;\n    doInit = true;\n  }\n  if (doPre) {\n    for (int k = 0; k < nPre; k ++) {\n      if (idPre == float (k)) {\n        constKF = presetKF[k];\n        slVal = constKF / 0.1;\n        break;\n      }\n    }\n  }\n  if (doInit) {\n    nStep = 0.;\n    c = Init (pxId);\n  } else {\n    ++ nStep;\n    c = Step (pxId);\n  }\n  stDat = vec4 (c, 0., 0.);\n  if      (pxId == 0) stDat.zw = vec2 (nStep, float (wgSel));\n  else if (pxId == 1) stDat.zw = mPtr.xy;\n  else if (pxId == 2) stDat.zw = vec2 (mPtr.z, itRand);\n  else if (pxId == 3) stDat.zw = slVal;\n  else if (pxId == 4) stDat.zw = vec2 (idPre, gSize);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, gSize), floor (fi / gSize)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, gSize), floor (fi / gSize)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}