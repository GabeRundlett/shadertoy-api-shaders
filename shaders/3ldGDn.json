{
    "Shader": {
        "info": {
            "date": "1576031359",
            "description": "More experimenting with interference patterns produced by a rotated star filter and some feedback with Conway's game of life as an input source. This version uses a fast blur and fake normals from a flockaroo shader\n\nR to reset. Mouse interaction enabled.",
            "flags": 48,
            "hasliked": 0,
            "id": "3ldGDn",
            "likes": 11,
            "name": "GOL Star Warp Filter V2",
            "published": 3,
            "tags": [
                "normals",
                "filter",
                "star",
                "rotation",
                "gol"
            ],
            "usePreview": 0,
            "username": "matthewwachter",
            "viewed": 798
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat getVal(vec2 uv)\n{\n    return length(min(texture(iChannel0,uv).xyz, vec3(.1)));\n}\n    \nvec2 getGrad(vec2 uv,float delta)\n{\n    vec2 d=vec2(delta,-.0125);\n    return vec2(\n        getVal(uv+d.xy)-getVal(uv-d.xy),\n        getVal(uv+d.yx)-getVal(uv-d.yx)\n    )/delta;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 n = vec3(getGrad(uv,1.0/iResolution.y),150.0);\n    //n *= n;\n    n=normalize(n);\n    fragColor=vec4(n,1);\n    vec3 light = normalize(vec3(1,1,2));\n    float diff=clamp(dot(n,light),1.1,2.0);\n    float spec=clamp(dot(reflect(light,n),vec3(0,0,-1)),0.0,1.0);\n    spec=pow(spec,36.0)*2.4;\n    spec *= .5;\n    //spec=0.0;\n\tfragColor = min(texture(iChannel1,uv+vec2(spec*.02)), vec4(1.0))*vec4(diff)+(vec4(spec)*vec4(.6, .7, 1.0, 1.0));\n    vec4 bl = texture(iChannel0, uv);\n    fragColor += (fragColor * bl)*vec4(.1);\n    fragColor += bl * vec4(.2);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created using Shadertoy-SVG: https://dzduniak.github.io/shadertoy-svg/\n// For better performance, consider using buffers, see example: https://www.shadertoy.com/view/MsyyWh\n\nconst vec3 positions[399] = vec3[399](vec3(0.9996347017586231, 0.0006327070295811669, 0), vec3(0.9967815302312375, 0.005574481934309103, 0), vec3(0.9912520684301853, 0.015151668339967825, 0), vec3(0.9832308880984784, 0.029044582694769103, 0), vec3(0.972902560979128, 0.04693354144692441, 0), vec3(0.9604516588151455, 0.0684988610446454, 0), vec3(0.9381992280483247, 0.10704070925712605, 0), vec3(0.9028229773044587, 0.16831339001655599, 0), vec3(0.8622787177562714, 0.23853721022605906, 0), vec3(0.795002317428589, 0.3550618648529055, 0), vec3(0.7009937763214111, 0.5178873538970947, 0), vec3(0.6337173759937287, 0.6344120085239411, 0), vec3(0.5931731164455414, 0.7046358287334442, 0), vec3(0.5577968657016754, 0.7659085094928741, 0), vec3(0.5355444349348546, 0.8044503577053548, 0), vec3(0.5230935327708721, 0.8260156773030758, 0), vec3(0.5127652056515217, 0.8439046360552311, 0), vec3(0.5047440253198148, 0.8577975504100324, 0), vec3(0.4992145635187626, 0.867374736815691, 0), vec3(0.49636139199137697, 0.872316511720419, 0), vec3(0.4956365995109082, 0.8723265483975411, 0), vec3(0.49282876029610634, 0.8674631652235986, 0), vec3(0.487387152761221, 0.8580379024147988, 0), vec3(0.4794934161007405, 0.8443653723597527, 0), vec3(0.46932918950915337, 0.8267601874470711, 0), vec3(0.45707611218094835, 0.8055369600653649, 0), vec3(0.4351772367954254, 0.7676065039634705, 0), vec3(0.4003630578517914, 0.7073057961463929, 0), vec3(0.3604629814624787, 0.6381959414482118, 0), vec3(0.29425549507141113, 0.5235197257995605, 0), vec3(0.20174059867858896, 0.3632771492004395, 0), vec3(0.1355331122875214, 0.2486009335517883, 0), vec3(0.09563303589820871, 0.17949107885360716, 0), vec3(0.060818856954574674, 0.11919037103652949, 0), vec3(0.03891998156905174, 0.08125991493463515, 0), vec3(0.026666904240846723, 0.06003668755292891, 0), vec3(0.01650267764925961, 0.04243150264024746, 0), vec3(0.008608940988779068, 0.028758972585201215, 0), vec3(0.0031673334538937503, 0.019333709776401618, 0), vec3(0.00035949423909187317, 0.014470326602459067, 0), vec3(-0.00035949423909187317, 0.014470326602459067, 0), vec3(-0.0031673334538936393, 0.019333709776401618, 0), vec3(-0.008608940988779068, 0.028758972585201215, 0), vec3(-0.01650267764925961, 0.04243150264024746, 0), vec3(-0.026666904240846723, 0.06003668755292891, 0), vec3(-0.03891998156905174, 0.08125991493463515, 0), vec3(-0.060818856954574674, 0.11919037103652949, 0), vec3(-0.09563303589820871, 0.17949107885360716, 0), vec3(-0.1355331122875214, 0.2486009335517883, 0), vec3(-0.20174059867858896, 0.3632771492004395, 0), vec3(-0.29425549507141113, 0.5235197257995605, 0), vec3(-0.3604629814624787, 0.6381959414482118, 0), vec3(-0.4003630578517914, 0.7073057961463929, 0), vec3(-0.4351772367954254, 0.7676065039634705, 0), vec3(-0.45707611218094835, 0.8055369600653649, 0), vec3(-0.46932918950915337, 0.8267601874470711, 0), vec3(-0.4794934161007405, 0.8443653723597527, 0), vec3(-0.4873871527612209, 0.8580379024147988, 0), vec3(-0.49282876029610634, 0.8674631652235986, 0), vec3(-0.4956365995109081, 0.8723265483975411, 0), vec3(-0.4963599480688572, 0.8723190173506737, 0), vec3(-0.4992018418014049, 0.8673968127369881, 0), vec3(-0.5047094471752643, 0.8578575536608697, 0), vec3(-0.5126989220082759, 0.8440196576714517, 0), vec3(-0.5229864241182803, 0.8262015423178674, 0), vec3(-0.5353881113231181, 0.80472162514925, 0), vec3(-0.5575525844097138, 0.7663324093818665, 0), vec3(-0.5927890026569366, 0.7053023791313172, 0), vec3(-0.6331730020046233, 0.6353566575050354, 0), vec3(-0.7001834774017334, 0.5192934608459474, 0), vec3(-0.7938204288482666, 0.3571127891540527, 0), vec3(-0.8608309042453766, 0.2410495924949648, 0), vec3(-0.9012149035930633, 0.1711038708686831, 0), vec3(-0.9364513218402862, 0.11007384061813359, 0), vec3(-0.9586157949268818, 0.07168462485075003, 0), vec3(-0.9710174821317196, 0.05020470768213293, 0), vec3(-0.981304984241724, 0.03238659232854858, 0), vec3(-0.9892944590747357, 0.01854869633913044, 0), vec3(-0.9948020644485951, 0.009009437263011963, 0), vec3(-0.9976439581811428, 0.004087232649326326, 0), vec3(-0.998319091796875, 0.0029168701171875797, 0), vec3(-0.999688720703125, 0.0005401611328126404, 0), vec3(-0.9996347017586231, -0.0006327070295808762, 0), vec3(-0.9967815302312374, -0.005574481934309006, 0), vec3(-0.9912520684301853, -0.015151668339967535, 0), vec3(-0.9832308880984784, -0.02904458269476891, 0), vec3(-0.9729025609791279, -0.046933541446924215, 0), vec3(-0.9604516588151455, -0.06849886104464512, 0), vec3(-0.9381992280483246, -0.10704070925712586, 0), vec3(-0.9028229773044586, -0.1683133900165558, 0), vec3(-0.8622787177562714, -0.23853721022605898, 0), vec3(-0.7950023174285888, -0.3550618648529053, 0), vec3(-0.7009937763214111, -0.5178873538970947, 0), vec3(-0.6337173759937287, -0.6344120085239411, 0), vec3(-0.5931731164455414, -0.7046358287334442, 0), vec3(-0.5577968657016754, -0.7659085094928741, 0), vec3(-0.5355444349348545, -0.8044503577053548, 0), vec3(-0.5230935327708721, -0.8260156773030758, 0), vec3(-0.5127652056515216, -0.8439046360552311, 0), vec3(-0.5047440253198147, -0.8577975504100324, 0), vec3(-0.4992145635187626, -0.867374736815691, 0), vec3(-0.49636139199137685, -0.872316511720419, 0), vec3(-0.4956365995109081, -0.8723265483975413, 0), vec3(-0.49282876029610634, -0.8674631652235987, 0), vec3(-0.4873871527612209, -0.8580379024147988, 0), vec3(-0.4794934161007405, -0.8443653723597526, 0), vec3(-0.46932918950915337, -0.8267601874470709, 0), vec3(-0.45707611218094835, -0.805536960065365, 0), vec3(-0.4351772367954254, -0.7676065039634705, 0), vec3(-0.4003630578517914, -0.7073057961463927, 0), vec3(-0.3604629814624787, -0.6381959414482115, 0), vec3(-0.29425549507141113, -0.5235197257995607, 0), vec3(-0.20174059867858896, -0.3632771492004393, 0), vec3(-0.1355331122875214, -0.24860093355178842, 0), vec3(-0.09563303589820871, -0.17949107885360724, 0), vec3(-0.060818856954574674, -0.1191903710365293, 0), vec3(-0.03891998156905174, -0.08125991493463486, 0), vec3(-0.026666904240846723, -0.06003668755292891, 0), vec3(-0.01650267764925961, -0.04243150264024727, 0), vec3(-0.008608940988779068, -0.02875897258520102, 0), vec3(-0.0031673334538936393, -0.019333709776401618, 0), vec3(-0.00035949423909187317, -0.01447032660245897, 0), vec3(0.00035949423909187317, -0.01447032660245897, 0), vec3(0.0031673334538937503, -0.019333709776401618, 0), vec3(0.008608940988779068, -0.02875897258520102, 0), vec3(0.01650267764925961, -0.04243150264024727, 0), vec3(0.026666904240846723, -0.06003668755292891, 0), vec3(0.03891998156905174, -0.08125991493463486, 0), vec3(0.060818856954574674, -0.1191903710365293, 0), vec3(0.09563303589820871, -0.17949107885360724, 0), vec3(0.1355331122875214, -0.24860093355178842, 0), vec3(0.20174059867858896, -0.3632771492004393, 0), vec3(0.29425549507141113, -0.5235197257995607, 0), vec3(0.3604629814624787, -0.6381959414482115, 0), vec3(0.4003630578517914, -0.7073057961463927, 0), vec3(0.4351772367954254, -0.7676065039634705, 0), vec3(0.45707611218094835, -0.805536960065365, 0), vec3(0.46932918950915337, -0.8267601874470709, 0), vec3(0.4794934161007405, -0.8443653723597526, 0), vec3(0.487387152761221, -0.8580379024147988, 0), vec3(0.49282876029610634, -0.8674631652235987, 0), vec3(0.4956365995109082, -0.8723265483975413, 0), vec3(0.49636139199137697, -0.872316511720419, 0), vec3(0.4992145635187626, -0.867374736815691, 0), vec3(0.5047440253198148, -0.8577975504100324, 0), vec3(0.5127652056515217, -0.8439046360552311, 0), vec3(0.5230935327708721, -0.8260156773030758, 0), vec3(0.5355444349348546, -0.8044503577053548, 0), vec3(0.5577968657016754, -0.7659085094928741, 0), vec3(0.5931731164455414, -0.7046358287334442, 0), vec3(0.6337173759937287, -0.6344120085239411, 0), vec3(0.7009937763214111, -0.5178873538970947, 0), vec3(0.795002317428589, -0.3550618648529053, 0), vec3(0.8622787177562714, -0.23853721022605898, 0), vec3(0.9028229773044587, -0.1683133900165558, 0), vec3(0.9381992280483247, -0.10704070925712586, 0), vec3(0.9604516588151455, -0.06849886104464512, 0), vec3(0.972902560979128, -0.046933541446924215, 0), vec3(0.9832308880984784, -0.02904458269476891, 0), vec3(0.9912520684301853, -0.015151668339967535, 0), vec3(0.9967815302312375, -0.005574481934309006, 0), vec3(0.9996347017586231, -0.0006327070295808762, 0), vec3(0.012693806439638244, -0.006914062499999859, 0), vec3(0.018173819631337906, -0.006914062499999859, 0), vec3(0.028794114738702525, -0.006914062499999859, 0), vec3(0.04420018956065164, -0.006914062499999859, 0), vec3(0.07550716519355749, -0.006914062499999859, 0), vec3(0.13069134116172765, -0.006914062499999859, 0), vec3(0.19863759636878964, -0.006914062499999859, 0), vec3(0.2765099132061004, -0.006914062499999859, 0), vec3(0.4057259654998777, -0.006914062499999859, 0), vec3(0.586285753250122, -0.006914062499999859, 0), vec3(0.7155018055438993, -0.006914062499999859, 0), vec3(0.7933741223812101, -0.006914062499999859, 0), vec3(0.8613203775882721, -0.006914062499999859, 0), vec3(0.9165045535564422, -0.006914062499999859, 0), vec3(0.9478115291893481, -0.006914062499999859, 0), vec3(0.9632176040112972, -0.006914062499999859, 0), vec3(0.9738378991186618, -0.006914062499999859, 0), vec3(0.9793179123103619, -0.006914062499999859, 0), vec3(0.9796687147021292, -0.007521684914826998, 0), vec3(0.9769286528229713, -0.012267535775899568, 0), vec3(0.97161839812994, -0.021465020328759542, 0), vec3(0.9639152052998541, -0.034807129353284595, 0), vec3(0.9482614016532898, -0.061919881105422764, 0), vec3(0.9206687569618226, -0.1097109830379484, 0), vec3(0.8866949439048768, -0.1685544168949127, 0), vec3(0.8477579998970033, -0.2359941089153289, 0), vec3(0.7831486701965333, -0.34789896965026856, 0), vec3(0.6928669548034667, -0.5042689990997313, 0), vec3(0.6282576251029968, -0.6161738598346708, 0), vec3(0.5893206810951233, -0.6836135518550872, 0), vec3(0.5553468680381775, -0.7424569857120513, 0), vec3(0.5277542233467103, -0.790248087644577, 0), vec3(0.512100419700146, -0.8173608393967151, 0), vec3(0.5043972268700601, -0.8307029484212402, 0), vec3(0.4990869721770288, -0.8399004329741001, 0), vec3(0.4963469102978708, -0.8446462838351727, 0), vec3(0.49564529135823254, -0.8446462838351727, 0), vec3(0.49290534004569064, -0.8399004329741001, 0), vec3(0.4875952996313573, -0.8307029484212402, 0), vec3(0.4798924176394941, -0.8173608393967151, 0), vec3(0.46423924565315255, -0.790248087644577, 0), vec3(0.4366477143764498, -0.7424569857120513, 0), vec3(0.4026752722263336, -0.6836135518550872, 0), vec3(0.36373989939689677, -0.6161738598346708, 0), vec3(0.299133176803589, -0.5042689990997313, 0), vec3(0.2088551044464113, -0.34789896965026856, 0), vec3(0.1442483818531035, -0.2359941089153289, 0), vec3(0.10531300902366625, -0.1685544168949127, 0), vec3(0.0713405668735505, -0.1097109830379484, 0), vec3(0.043749035596847285, -0.061919881105422764, 0), vec3(0.0280958636105062, -0.034807129353284595, 0), vec3(0.020392981618643002, -0.021465020328759542, 0), vec3(0.015082941204309641, -0.012267535775899568, 0), vec3(0.01234298989176752, -0.007521684914826998, 0), vec3(0.9793179123103619, 0.00691406250000015, 0), vec3(0.9738378991186618, 0.00691406250000015, 0), vec3(0.9632176040112972, 0.00691406250000015, 0), vec3(0.9478115291893481, 0.00691406250000015, 0), vec3(0.9165045535564422, 0.00691406250000015, 0), vec3(0.8613203775882721, 0.00691406250000015, 0), vec3(0.7933741223812101, 0.00691406250000015, 0), vec3(0.7155018055438993, 0.00691406250000015, 0), vec3(0.586285753250122, 0.00691406250000015, 0), vec3(0.4057259654998777, 0.00691406250000015, 0), vec3(0.2765099132061004, 0.00691406250000015, 0), vec3(0.19863759636878964, 0.00691406250000015, 0), vec3(0.13069134116172765, 0.00691406250000015, 0), vec3(0.07550716519355749, 0.00691406250000015, 0), vec3(0.04420018956065164, 0.00691406250000015, 0), vec3(0.028794114738702525, 0.00691406250000015, 0), vec3(0.018173819631337906, 0.00691406250000015, 0), vec3(0.012693806439638244, 0.00691406250000015, 0), vec3(0.01234298989176752, 0.007521684914827482, 0), vec3(0.015082941204309641, 0.012267535775900052, 0), vec3(0.020392981618643002, 0.02146502032876032, 0), vec3(0.0280958636105062, 0.03480712935328489, 0), vec3(0.043749035596847285, 0.06191988110542315, 0), vec3(0.0713405668735505, 0.1097109830379487, 0), vec3(0.10531300902366625, 0.16855441689491282, 0), vec3(0.1442483818531035, 0.2359941089153292, 0), vec3(0.2088551044464113, 0.3478989696502687, 0), vec3(0.299133176803589, 0.5042689990997317, 0), vec3(0.36373989939689677, 0.6161738598346712, 0), vec3(0.4026752722263336, 0.6836135518550874, 0), vec3(0.4366477143764498, 0.7424569857120515, 0), vec3(0.46423924565315255, 0.7902480876445771, 0), vec3(0.4798924176394941, 0.8173608393967152, 0), vec3(0.4875952996313573, 0.8307029484212399, 0), vec3(0.49290534004569064, 0.8399004329741001, 0), vec3(0.49564529135823254, 0.8446462838351727, 0), vec3(0.4963469102978708, 0.8446462838351727, 0), vec3(0.4990869721770288, 0.8399004329741001, 0), vec3(0.5043972268700601, 0.8307029484212399, 0), vec3(0.512100419700146, 0.8173608393967152, 0), vec3(0.5277542233467103, 0.7902480876445771, 0), vec3(0.5553468680381775, 0.7424569857120515, 0), vec3(0.5893206810951233, 0.6836135518550874, 0), vec3(0.6282576251029968, 0.6161738598346712, 0), vec3(0.6928669548034667, 0.5042689990997317, 0), vec3(0.7831486701965333, 0.3478989696502687, 0), vec3(0.8477579998970033, 0.2359941089153292, 0), vec3(0.8866949439048768, 0.16855441689491282, 0), vec3(0.9206687569618226, 0.1097109830379487, 0), vec3(0.9482614016532898, 0.06191988110542315, 0), vec3(0.9639152052998541, 0.03480712935328489, 0), vec3(0.97161839812994, 0.02146502032876032, 0), vec3(0.9769286528229713, 0.012267535775900052, 0), vec3(0.9796687147021292, 0.007521684914827482, 0), vec3(-0.012693806439638133, 0.00691406250000015, 0), vec3(-0.01817381963133813, 0.00691406250000015, 0), vec3(-0.02879411473870286, 0.00691406250000015, 0), vec3(-0.04420018956065186, 0.00691406250000015, 0), vec3(-0.07550716519355771, 0.00691406250000015, 0), vec3(-0.13069134116172798, 0.00691406250000015, 0), vec3(-0.19863759636878964, 0.00691406250000015, 0), vec3(-0.27650991320610063, 0.00691406250000015, 0), vec3(-0.40572596549987794, 0.00691406250000015, 0), vec3(-0.586285753250122, 0.00691406250000015, 0), vec3(-0.7155018055438995, 0.00691406250000015, 0), vec3(-0.7933741223812103, 0.00691406250000015, 0), vec3(-0.8613203775882721, 0.00691406250000015, 0), vec3(-0.9165045535564422, 0.00691406250000015, 0), vec3(-0.9478115291893482, 0.00691406250000015, 0), vec3(-0.9632176040112972, 0.00691406250000015, 0), vec3(-0.9738378991186619, 0.00691406250000015, 0), vec3(-0.9793179123103619, 0.00691406250000015, 0), vec3(-0.9796687147021294, 0.007521684914827482, 0), vec3(-0.9769286528229714, 0.012267535775900052, 0), vec3(-0.97161839812994, 0.02146502032876032, 0), vec3(-0.9639152052998543, 0.03480712935328489, 0), vec3(-0.9482614016532898, 0.06191988110542315, 0), vec3(-0.9206687569618225, 0.1097109830379487, 0), vec3(-0.8866949439048767, 0.16855441689491282, 0), vec3(-0.8477579998970032, 0.2359941089153292, 0), vec3(-0.7831486701965331, 0.3478989696502687, 0), vec3(-0.6928669548034667, 0.5042689990997317, 0), vec3(-0.6282576251029968, 0.6161738598346712, 0), vec3(-0.5893206810951233, 0.6836135518550874, 0), vec3(-0.5553468680381775, 0.7424569857120515, 0), vec3(-0.5277542233467102, 0.7902480876445771, 0), vec3(-0.5121004197001456, 0.8173608393967152, 0), vec3(-0.50439722687006, 0.8307029484212399, 0), vec3(-0.4990869721770286, 0.8399004329741001, 0), vec3(-0.4963469102978706, 0.8446462838351727, 0), vec3(-0.49564529135823254, 0.8446462838351727, 0), vec3(-0.4929053400456904, 0.8399004329741001, 0), vec3(-0.48759529963135706, 0.8307029484212399, 0), vec3(-0.47989241763949386, 0.8173608393967152, 0), vec3(-0.46423924565315233, 0.7902480876445771, 0), vec3(-0.43664771437644945, 0.7424569857120515, 0), vec3(-0.4026752722263336, 0.6836135518550874, 0), vec3(-0.3637398993968963, 0.6161738598346712, 0), vec3(-0.29913317680358875, 0.5042689990997317, 0), vec3(-0.2088551044464111, 0.3478989696502687, 0), vec3(-0.1442483818531035, 0.2359941089153292, 0), vec3(-0.10531300902366625, 0.16855441689491282, 0), vec3(-0.07134056687355039, 0.1097109830379487, 0), vec3(-0.04374903559684751, 0.06191988110542315, 0), vec3(-0.028095863610505978, 0.03480712935328489, 0), vec3(-0.02039298161864278, 0.02146502032876032, 0), vec3(-0.015082941204309419, 0.012267535775900052, 0), vec3(-0.01234298989176752, 0.007521684914827482, 0), vec3(-0.9793179123103619, -0.006914062499999859, 0), vec3(-0.9738378991186619, -0.006914062499999859, 0), vec3(-0.9632176040112972, -0.006914062499999859, 0), vec3(-0.9478115291893482, -0.006914062499999859, 0), vec3(-0.9165045535564422, -0.006914062499999859, 0), vec3(-0.8613203775882721, -0.006914062499999859, 0), vec3(-0.7933741223812103, -0.006914062499999859, 0), vec3(-0.7155018055438995, -0.006914062499999859, 0), vec3(-0.586285753250122, -0.006914062499999859, 0), vec3(-0.40572596549987794, -0.006914062499999859, 0), vec3(-0.27650991320610063, -0.006914062499999859, 0), vec3(-0.19863759636878964, -0.006914062499999859, 0), vec3(-0.13069134116172798, -0.006914062499999859, 0), vec3(-0.07550716519355771, -0.006914062499999859, 0), vec3(-0.04420018956065186, -0.006914062499999859, 0), vec3(-0.02879411473870286, -0.006914062499999859, 0), vec3(-0.01817381963133813, -0.006914062499999859, 0), vec3(-0.012693806439638133, -0.006914062499999859, 0), vec3(-0.01234298989176752, -0.007521684914826998, 0), vec3(-0.015082941204309419, -0.012267535775899568, 0), vec3(-0.02039298161864278, -0.021465020328759542, 0), vec3(-0.028095863610505978, -0.034807129353284595, 0), vec3(-0.04374903559684751, -0.061919881105422764, 0), vec3(-0.07134056687355039, -0.1097109830379484, 0), vec3(-0.10531300902366625, -0.1685544168949127, 0), vec3(-0.1442483818531035, -0.2359941089153289, 0), vec3(-0.2088551044464111, -0.34789896965026856, 0), vec3(-0.29913317680358875, -0.5042689990997313, 0), vec3(-0.3637398993968963, -0.6161738598346708, 0), vec3(-0.4026752722263336, -0.6836135518550872, 0), vec3(-0.43664771437644945, -0.7424569857120513, 0), vec3(-0.46423924565315233, -0.790248087644577, 0), vec3(-0.47989241763949386, -0.8173608393967151, 0), vec3(-0.48759529963135706, -0.8307029484212402, 0), vec3(-0.4929053400456904, -0.8399004329741001, 0), vec3(-0.49564529135823254, -0.8446462838351727, 0), vec3(-0.4963469102978706, -0.8446462838351727, 0), vec3(-0.4990869721770286, -0.8399004329741001, 0), vec3(-0.50439722687006, -0.8307029484212402, 0), vec3(-0.5121004197001456, -0.8173608393967151, 0), vec3(-0.5277542233467102, -0.790248087644577, 0), vec3(-0.5553468680381775, -0.7424569857120513, 0), vec3(-0.5893206810951233, -0.6836135518550872, 0), vec3(-0.6282576251029968, -0.6161738598346708, 0), vec3(-0.6928669548034667, -0.5042689990997313, 0), vec3(-0.7831486701965331, -0.34789896965026856, 0), vec3(-0.8477579998970032, -0.2359941089153289, 0), vec3(-0.8866949439048767, -0.1685544168949127, 0), vec3(-0.9206687569618225, -0.1097109830379484, 0), vec3(-0.9482614016532898, -0.061919881105422764, 0), vec3(-0.9639152052998543, -0.034807129353284595, 0), vec3(-0.97161839812994, -0.021465020328759542, 0), vec3(-0.9769286528229714, -0.012267535775899568, 0), vec3(-0.9796687147021294, -0.007521684914826998, 0), vec3(-1, 9.691683219847925e-17, 0), vec3(-0.9980078125, 0.003457031250000123, 0), vec3(-0.98001953125, -0.006914062499999859, 0), vec3(-0.98001953125, 0.00691406250000015, 0), vec3(-0.49599609375, -0.8452539062499999, 0), vec3(-0.49599609375, 0.8452539062500001, 0), vec3(-0.49599609375, -0.8729492187500001, 0), vec3(-0.49599609375, 0.8729492187500001, 0), vec3(-0.011992187499999973, -0.006914062499999859, 0), vec3(-0.011992187499999973, 0.00691406250000015, 0), vec3(0, -0.01384765625, 0), vec3(0, 0.013847656250000095, 0), vec3(0.011992187499999973, 0.00691406250000015, 0), vec3(0.011992187499999973, -0.006914062499999859, 0), vec3(0.4959960937500001, 0.8452539062500001, 0), vec3(0.4959960937500001, -0.8452539062499999, 0), vec3(0.4959960937500001, -0.8729492187500001, 0), vec3(0.4959960937500001, 0.8729492187500001, 0), vec3(0.98001953125, 0.00691406250000015, 0), vec3(0.98001953125, -0.006914062499999859, 0), vec3(1, 9.691683219847925e-17, 0));\nconst ivec3 triangles[405] = ivec3[405](ivec3(0, 161, 1), ivec3(0, 398, 161), ivec3(1, 160, 397), ivec3(1, 161, 160), ivec3(1, 396, 2), ivec3(1, 397, 396), ivec3(2, 268, 3), ivec3(2, 269, 268), ivec3(2, 396, 269), ivec3(3, 266, 4), ivec3(3, 267, 266), ivec3(3, 268, 267), ivec3(4, 265, 5), ivec3(4, 266, 265), ivec3(5, 265, 6), ivec3(6, 264, 7), ivec3(6, 265, 264), ivec3(7, 263, 8), ivec3(7, 264, 263), ivec3(8, 262, 9), ivec3(8, 263, 262), ivec3(9, 260, 10), ivec3(9, 261, 260), ivec3(9, 262, 261), ivec3(10, 259, 11), ivec3(10, 260, 259), ivec3(11, 258, 12), ivec3(11, 259, 258), ivec3(12, 257, 13), ivec3(12, 258, 257), ivec3(13, 256, 14), ivec3(13, 257, 256), ivec3(14, 255, 15), ivec3(14, 256, 255), ivec3(15, 254, 16), ivec3(15, 255, 254), ivec3(16, 252, 17), ivec3(16, 253, 252), ivec3(16, 254, 253), ivec3(17, 22, 18), ivec3(17, 252, 392), ivec3(17, 392, 22), ivec3(18, 21, 19), ivec3(18, 22, 21), ivec3(19, 20, 395), ivec3(19, 21, 20), ivec3(22, 251, 23), ivec3(22, 392, 251), ivec3(23, 249, 24), ivec3(23, 250, 249), ivec3(23, 251, 250), ivec3(24, 248, 25), ivec3(24, 249, 248), ivec3(25, 247, 26), ivec3(25, 248, 247), ivec3(26, 246, 27), ivec3(26, 247, 246), ivec3(27, 245, 28), ivec3(27, 246, 245), ivec3(28, 244, 29), ivec3(28, 245, 244), ivec3(29, 243, 30), ivec3(29, 244, 243), ivec3(30, 242, 31), ivec3(30, 243, 242), ivec3(31, 241, 32), ivec3(31, 242, 241), ivec3(32, 240, 33), ivec3(32, 241, 240), ivec3(33, 239, 34), ivec3(33, 240, 239), ivec3(34, 238, 35), ivec3(34, 239, 238), ivec3(35, 237, 36), ivec3(35, 238, 237), ivec3(36, 237, 37), ivec3(37, 236, 38), ivec3(37, 237, 236), ivec3(38, 235, 39), ivec3(38, 236, 235), ivec3(39, 234, 389), ivec3(39, 235, 234), ivec3(40, 322, 41), ivec3(40, 323, 322), ivec3(40, 389, 323), ivec3(41, 321, 42), ivec3(41, 322, 321), ivec3(42, 320, 43), ivec3(42, 321, 320), ivec3(43, 320, 44), ivec3(44, 319, 45), ivec3(44, 320, 319), ivec3(45, 318, 46), ivec3(45, 319, 318), ivec3(46, 317, 47), ivec3(46, 318, 317), ivec3(47, 316, 48), ivec3(47, 317, 316), ivec3(48, 315, 49), ivec3(48, 316, 315), ivec3(49, 314, 50), ivec3(49, 315, 314), ivec3(50, 313, 51), ivec3(50, 314, 313), ivec3(51, 312, 52), ivec3(51, 313, 312), ivec3(52, 311, 53), ivec3(52, 312, 311), ivec3(53, 310, 54), ivec3(53, 311, 310), ivec3(54, 309, 55), ivec3(54, 310, 309), ivec3(55, 308, 56), ivec3(55, 309, 308), ivec3(56, 306, 57), ivec3(56, 307, 306), ivec3(56, 308, 307), ivec3(57, 61, 58), ivec3(57, 62, 61), ivec3(57, 306, 383), ivec3(57, 383, 62), ivec3(58, 60, 59), ivec3(58, 61, 60), ivec3(59, 60, 385), ivec3(62, 305, 63), ivec3(62, 383, 305), ivec3(63, 303, 64), ivec3(63, 304, 303), ivec3(63, 305, 304), ivec3(64, 302, 65), ivec3(64, 303, 302), ivec3(65, 301, 66), ivec3(65, 302, 301), ivec3(66, 300, 67), ivec3(66, 301, 300), ivec3(67, 299, 68), ivec3(67, 300, 299), ivec3(68, 298, 69), ivec3(68, 299, 298), ivec3(69, 297, 70), ivec3(69, 298, 297), ivec3(70, 296, 71), ivec3(70, 297, 296), ivec3(71, 294, 72), ivec3(71, 295, 294), ivec3(71, 296, 295), ivec3(72, 293, 73), ivec3(72, 294, 293), ivec3(73, 292, 74), ivec3(73, 293, 292), ivec3(74, 292, 75), ivec3(75, 291, 76), ivec3(75, 292, 291), ivec3(76, 290, 77), ivec3(76, 291, 290), ivec3(77, 288, 381), ivec3(77, 289, 288), ivec3(77, 290, 289), ivec3(77, 381, 78), ivec3(78, 381, 79), ivec3(79, 83, 379), ivec3(79, 381, 83), ivec3(80, 82, 81), ivec3(80, 83, 82), ivec3(80, 379, 83), ivec3(81, 82, 378), ivec3(83, 380, 84), ivec3(83, 381, 380), ivec3(84, 376, 85), ivec3(84, 377, 376), ivec3(84, 380, 377), ivec3(85, 374, 86), ivec3(85, 375, 374), ivec3(85, 376, 375), ivec3(86, 373, 87), ivec3(86, 374, 373), ivec3(87, 373, 88), ivec3(88, 372, 89), ivec3(88, 373, 372), ivec3(89, 371, 90), ivec3(89, 372, 371), ivec3(90, 370, 91), ivec3(90, 371, 370), ivec3(91, 368, 92), ivec3(91, 369, 368), ivec3(91, 370, 369), ivec3(92, 367, 93), ivec3(92, 368, 367), ivec3(93, 366, 94), ivec3(93, 367, 366), ivec3(94, 365, 95), ivec3(94, 366, 365), ivec3(95, 364, 96), ivec3(95, 365, 364), ivec3(96, 363, 97), ivec3(96, 364, 363), ivec3(97, 362, 98), ivec3(97, 363, 362), ivec3(98, 360, 99), ivec3(98, 361, 360), ivec3(98, 362, 361), ivec3(99, 104, 100), ivec3(99, 360, 382), ivec3(99, 382, 104), ivec3(100, 103, 101), ivec3(100, 104, 103), ivec3(101, 102, 384), ivec3(101, 103, 102), ivec3(104, 359, 105), ivec3(104, 382, 359), ivec3(105, 357, 106), ivec3(105, 358, 357), ivec3(105, 359, 358), ivec3(106, 356, 107), ivec3(106, 357, 356), ivec3(107, 355, 108), ivec3(107, 356, 355), ivec3(108, 354, 109), ivec3(108, 355, 354), ivec3(109, 353, 110), ivec3(109, 354, 353), ivec3(110, 352, 111), ivec3(110, 353, 352), ivec3(111, 351, 112), ivec3(111, 352, 351), ivec3(112, 350, 113), ivec3(112, 351, 350), ivec3(113, 349, 114), ivec3(113, 350, 349), ivec3(114, 348, 115), ivec3(114, 349, 348), ivec3(115, 347, 116), ivec3(115, 348, 347), ivec3(116, 346, 117), ivec3(116, 347, 346), ivec3(117, 345, 118), ivec3(117, 346, 345), ivec3(118, 345, 119), ivec3(119, 344, 120), ivec3(119, 345, 344), ivec3(120, 343, 121), ivec3(120, 344, 343), ivec3(121, 342, 388), ivec3(121, 343, 342), ivec3(122, 214, 123), ivec3(122, 215, 214), ivec3(122, 388, 215), ivec3(123, 213, 124), ivec3(123, 214, 213), ivec3(124, 212, 125), ivec3(124, 213, 212), ivec3(125, 212, 126), ivec3(126, 211, 127), ivec3(126, 212, 211), ivec3(127, 210, 128), ivec3(127, 211, 210), ivec3(128, 209, 129), ivec3(128, 210, 209), ivec3(129, 208, 130), ivec3(129, 209, 208), ivec3(130, 207, 131), ivec3(130, 208, 207), ivec3(131, 206, 132), ivec3(131, 207, 206), ivec3(132, 205, 133), ivec3(132, 206, 205), ivec3(133, 204, 134), ivec3(133, 205, 204), ivec3(134, 203, 135), ivec3(134, 204, 203), ivec3(135, 202, 136), ivec3(135, 203, 202), ivec3(136, 201, 137), ivec3(136, 202, 201), ivec3(137, 200, 138), ivec3(137, 201, 200), ivec3(138, 198, 139), ivec3(138, 199, 198), ivec3(138, 200, 199), ivec3(139, 143, 140), ivec3(139, 144, 143), ivec3(139, 198, 393), ivec3(139, 393, 144), ivec3(140, 142, 141), ivec3(140, 143, 142), ivec3(141, 142, 394), ivec3(144, 197, 145), ivec3(144, 393, 197), ivec3(145, 195, 146), ivec3(145, 196, 195), ivec3(145, 197, 196), ivec3(146, 194, 147), ivec3(146, 195, 194), ivec3(147, 193, 148), ivec3(147, 194, 193), ivec3(148, 192, 149), ivec3(148, 193, 192), ivec3(149, 191, 150), ivec3(149, 192, 191), ivec3(150, 190, 151), ivec3(150, 191, 190), ivec3(151, 189, 152), ivec3(151, 190, 189), ivec3(152, 187, 153), ivec3(152, 188, 187), ivec3(152, 189, 188), ivec3(153, 186, 154), ivec3(153, 187, 186), ivec3(154, 185, 155), ivec3(154, 186, 185), ivec3(155, 184, 156), ivec3(155, 185, 184), ivec3(156, 184, 157), ivec3(157, 183, 158), ivec3(157, 184, 183), ivec3(158, 181, 159), ivec3(158, 182, 181), ivec3(158, 183, 182), ivec3(159, 180, 397), ivec3(159, 181, 180), ivec3(159, 397, 160), ivec3(162, 232, 163), ivec3(162, 233, 232), ivec3(162, 391, 233), ivec3(163, 231, 164), ivec3(163, 232, 231), ivec3(164, 230, 165), ivec3(164, 231, 230), ivec3(165, 229, 166), ivec3(165, 230, 229), ivec3(166, 228, 167), ivec3(166, 229, 228), ivec3(167, 227, 168), ivec3(167, 228, 227), ivec3(168, 226, 169), ivec3(168, 227, 226), ivec3(169, 225, 170), ivec3(169, 226, 225), ivec3(170, 224, 171), ivec3(170, 225, 224), ivec3(171, 223, 172), ivec3(171, 224, 223), ivec3(172, 222, 173), ivec3(172, 223, 222), ivec3(173, 221, 174), ivec3(173, 222, 221), ivec3(174, 220, 175), ivec3(174, 221, 220), ivec3(175, 219, 176), ivec3(175, 220, 219), ivec3(176, 218, 177), ivec3(176, 219, 218), ivec3(177, 217, 178), ivec3(177, 218, 217), ivec3(178, 216, 179), ivec3(178, 217, 216), ivec3(179, 216, 396), ivec3(179, 396, 397), ivec3(215, 388, 391), ivec3(233, 391, 390), ivec3(234, 390, 389), ivec3(270, 340, 271), ivec3(270, 341, 340), ivec3(270, 387, 341), ivec3(271, 339, 272), ivec3(271, 340, 339), ivec3(272, 338, 273), ivec3(272, 339, 338), ivec3(273, 337, 274), ivec3(273, 338, 337), ivec3(274, 336, 275), ivec3(274, 337, 336), ivec3(275, 335, 276), ivec3(275, 336, 335), ivec3(276, 334, 277), ivec3(276, 335, 334), ivec3(277, 333, 278), ivec3(277, 334, 333), ivec3(278, 332, 279), ivec3(278, 333, 332), ivec3(279, 331, 280), ivec3(279, 332, 331), ivec3(280, 330, 281), ivec3(280, 331, 330), ivec3(281, 329, 282), ivec3(281, 330, 329), ivec3(282, 328, 283), ivec3(282, 329, 328), ivec3(283, 327, 284), ivec3(283, 328, 327), ivec3(284, 326, 285), ivec3(284, 327, 326), ivec3(285, 325, 286), ivec3(285, 326, 325), ivec3(286, 324, 287), ivec3(286, 325, 324), ivec3(287, 324, 380), ivec3(287, 380, 381), ivec3(323, 389, 387), ivec3(341, 387, 386), ivec3(342, 386, 388), ivec3(386, 387, 390), ivec3(386, 390, 391), ivec3(386, 391, 388), ivec3(387, 389, 390));\nconst int len = 405;\n\nbool sameSide( vec3 p1, vec3 p2, vec3 a, vec3 b ) {\n    vec3 cp1 = cross(b-a, p1-a);\n    vec3 cp2 = cross(b-a, p2-a);\n      \n    return dot(cp1, cp2) >= 0.0;\n}\n\nbool pointInTriangle( vec3 p, vec3 a, vec3 b, vec3 c ) {\n    return sameSide(p, a, b, c) && sameSide(p, b, a, c) && sameSide(p, c, a, b);\n}\n\nbool inPath( vec2 p ) {\n    for (int i=0; i<len; i++) {\n        ivec3 triangle = triangles[i];\n        vec3 a = positions[triangle[0]];\n        vec3 b = positions[triangle[1]];\n        vec3 c = positions[triangle[2]];\n  \n        if (pointInTriangle(vec3(p, 0.0), a, b, c)) {\n            return true;\n        }\n    }\n  \n    return false;\n}\n      \nvec4 logo(vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float step = 1.0 / iResolution.y;\n  \n    vec4 o = vec4(vec3(0.0), 1.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 2.0;\n    uv -= vec2(1.0);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.0;\n    //uv = rotate(uv, iTime * 0.2);\n\n    if (inPath(uv)) {\n        o = vec4(1.0);\n    }\n    return o;\n}\n\n\n#define brushSize iResolution.x/12.0\n\n#define T(i,j) texture(iChannel0, (uv + vec2(i,j)*vec2(1.0/R) )).r \n#define N(i,j)  + float( T(i,j) > 0.)\n\n//noise see https://www.shadertoy.com/view/ltB3zD\nfloat snoise(in vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453)-.15;\n}\n\n// set value for r key to reset with\nconst int Key_R = 82;\n\n// process keyboard input\nbool ReadKey( int key )//, bool toggle )\n{\n\tbool toggle = false;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 c )\n{\n\tvec2 R = iResolution.xy;\n    \n    // retrieve the texture coordinate\n    vec2 uv = c.xy / R;\n    \n    // get the current pixel\n    float v = texture(iChannel0, uv).r;\n    \n    // check to seee if we are at the start of the timeline or if the R key is pressed.\n    if(iFrame > 4 && !ReadKey(Key_R))\n    {\n        // draw a circle if the mouse is clicked\n        if(distance(iMouse.xy, c) < brushSize && iMouse.z > .0)\n        {\n        \tO = vec4(.25);\n        }\n        else\n        {\n            float n =   N(-1,-1) + N(-1, 0) + N(-1, 1)\n                      + N( 0,-1)            + N( 0, 1)\n                      + N( 1,-1) + N( 1, 0) + N( 1, 1);\n\n\n            // resurect if we are not live, and have 3 live neighrbours\n            v += (1.0-float(v > 0.0)) * float(n == 3.0);\n\n            // kill if we do not have either 3 or 2 neighbours\n            v *= float(n == 2.0) + float(n == 3.0);\n\n            // fade the current pixel as it ages\n            v -= float(v > 0.4)*0.05;\n\n            // write out the pixel\n            O = vec4(vec3(v), 1.0);\n        }\n    }\n    //Generate some noise to get things going\n    else\n    {\n        O = vec4(snoise(c) > 0.8 ? 1.0 : 0.0);\n        O = texture(iChannel2, uv);\n        O = logo(c);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: info@matthewwachter.com\n\n#define T(i,j) texture(iChannel0, (uv + vec2(i,j)*vec2(1.0/R) )).r \n#define R iResolution.xy\n#define steps 30.0\n\nfloat snoise(in vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453)-.25;\n}\n\nvec3 hueShift( vec3 color, float hueAdjust ){\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);\n\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I       = dot (color, kRGBToI);\n    float   Q       = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    hue += hueAdjust;\n\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n\n    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );\n\n}\n\nvec2 rotate(vec2 v, float a) {\n    //a *= float(iFrame)/100.0;\n    //a *= 1400.0;\n    a += float(iFrame)/100000.0;\n    a *= 1300.0 + sin(float(iFrame)/100.0*1.0);\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nfloat G(vec2 uv, vec2 offset, float step){\n    float roff = texture(iChannel2, uv).r*.005;//snoise(uv);\n    offset = rotate(offset, roff+(float(step)/steps) * 1.7);\n    offset += uv;\n\n    return T(offset.x, offset.y);\n}\n\nvoid mainImage( out vec4 O, in vec2 c ){\n\t\n\n    \n    // retrieve the texture coordinate\n    vec2 uv = c.xy / R;\n    \n    // get the current pixel\n    float o = T(0, 0);\n    \n    for(int i=0;i<int(steps);++i){\n    \t\n        // cross\n        float s = float(i);\n        float n =      G(uv, vec2(0, i), s)\n           \t\t + G(uv, vec2(-i, 0), s) + G(uv, vec2(i, 0), s)\n            \t\t+ G(uv, vec2(0, -i), s);\n        // x\n        float x = G(uv, vec2(-i, i), -s) + G(uv, vec2(i, i),-s)\n            \t+ G(uv, vec2(-i, -i), -s)+ G(uv, vec2(i, -i), -s);\n        \n        float m = (steps-float(i))/steps;\n        o += n * m;//pow(m, .9);\n        o += x*m;//(x-.1) * pow(m, 1.2);\n        \n    }\n    \n    //vec4 lookup = texture(iChannel2, c/R) * vec4(o*.9);\n    uv *= vec2(.4);\n    vec4 lookup = texture(iChannel1, vec2(uv.x+(o*.1), uv.y));// * (vec4(1.0)+vec4(o*.5));\n    lookup *= vec4(mod(o, 3.0));\n    \n    \n    lookup.rgb = hueShift( lookup.rgb, (o*.14)+2.2 );\n    \n    lookup.g *= .6;\n    \n    lookup.rgb = hueShift( lookup.rgb, (o*.14)+1.2 );\n    \n    lookup.rgb *= vec3(min(o, 1.0));\n    \n    \n    \n    O = lookup;\n    //O = vec4(o, o-1.0, o-1.0*-o/100.0, 1.0);\n\n        \n        \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// feedback\n#define m .98\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec4 c1 = texture(iChannel0,fragCoord/iResolution.xy);\n    vec4 c2 = texture(iChannel1,fragCoord/iResolution.xy);\n    \n    fragColor = mix(c1, c2, m);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 Circle(float Start, float Points, float Point) \n{\n\tfloat Rad = (3.141592 * 2.0 * (1.0 / Points)) * (Point + Start);\n\treturn vec2(sin(Rad), cos(Rad));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 PixelOffset = 1.0 / iResolution.xy;\n    \n    float Start = 2.0 / 10.0;\n\tvec2 Scale = 0.46 * 4.0 * 2.0 * PixelOffset.xy;\n    \n    vec3 N0 = texture(iChannel0, uv + Circle(Start, 10.0, 0.0) * Scale).rgb;\n    vec3 N1 = texture(iChannel0, uv + Circle(Start, 10.0, 1.0) * Scale).rgb;\n    vec3 N2 = texture(iChannel0, uv + Circle(Start, 10.0, 2.0) * Scale).rgb;\n    vec3 N3 = texture(iChannel0, uv + Circle(Start, 10.0, 3.0) * Scale).rgb;\n    vec3 N4 = texture(iChannel0, uv + Circle(Start, 10.0, 4.0) * Scale).rgb;\n    vec3 N5 = texture(iChannel0, uv + Circle(Start, 10.0, 5.0) * Scale).rgb;\n    vec3 N6 = texture(iChannel0, uv + Circle(Start, 10.0, 6.0) * Scale).rgb;\n    vec3 N7 = texture(iChannel0, uv + Circle(Start, 10.0, 7.0) * Scale).rgb;\n    vec3 N8 = texture(iChannel0, uv + Circle(Start, 10.0, 8.0) * Scale).rgb;\n    vec3 N9 = texture(iChannel0, uv + Circle(Start, 10.0, 9.0) * Scale).rgb;\n    vec3 N10 = texture(iChannel0, uv).rgb;\n    \n    float W = 1.0 / 15.0;\n    \n    vec3 color = vec3(0,0,0);\n    \n\tcolor.rgb = \n\t\t(N0 * W) +\n\t\t(N1 * W) +\n\t\t(N2 * W) +\n\t\t(N3 * W) +\n\t\t(N4 * W) +\n\t\t(N5 * W) +\n\t\t(N6 * W) +\n\t\t(N7 * W) +\n\t\t(N8 * W) +\n\t\t(N9 * W) +\n\t\t(N10 * W);\n    \n\n\n    fragColor = vec4(color.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}