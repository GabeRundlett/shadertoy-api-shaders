{
    "Shader": {
        "info": {
            "date": "1598770748",
            "description": "use divergence-free flownoise to distort a base function ( here, radial gradient )",
            "flags": 0,
            "hasliked": 0,
            "id": "WtBBD1",
            "likes": 10,
            "name": "can of worms",
            "published": 3,
            "tags": [
                "perlinnoise",
                "displacement",
                "distortion",
                "flownoise",
                "filament",
                "divergencefree"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "  #define hash(p)    fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n//#define hash2(p) ( 2.* fract( sin( (p) * mat2(127.1,311.7, 269.5,183.3) ) *43758.5453123 ) - 1. )\n  #define hash2(p)   cos( 6.28*hash(p) + vec2(0,11) + V(p)*iTime ) // variant of random gradient + rotating (= lownoise)\n  #define l(i,j)     dot( hash2(I+vec2(i,j)) , F-vec2(i,j) )       // random wavelet at grid vertex I+vec2(i,j) \n  #define L(j,x)     mix( l(0,j), l(1,j), x )\n\n  #define V(p) 2.                                // flownoise rotation speed \n//#define V(p) 2.*( 2.*mod((p).x+(p).y,2.)- 1. ) // checkered rotation direction \n//#define V(p) length(p)\n//#define V(p) ( 8. - length(p) )\n\nfloat Perlin(vec2 p) {                        // Perlin noise\n    vec2 I = floor(p), \n         F = fract(p), \n     //  U = F;\n     //  U = F*F*(3.-2.*F);                   // based Perlin noise\n         U = F*F*F*( F* ( F*6.-15.) + 10. );  // improved Perlin noise ( better derivatives )\n    return mix( L(0,U.x) , L(1,U.x) , U.y );  // smooth interpolation of corners random wavelets\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         S = 8. / R.yy,\n         U = ( 2.*u - R ) * S,\n         D;\n    float v = Perlin( U );                    \n // O = vec4( .5 + .5 * v ); return;          // see Perlin noise\n    \n                                              // --- divergence-free displacement noise\n // D = vec2( v - Perlin( U+vec2(0,S.y) ), Perlin( U+vec2(S.x,0) ) - v ) *2./ S;\n    D = vec2( -dFdy(v), dFdx(v) ) / S;        // using hardware derivatives\n // O = vec4( .5 + .5 * D, 0, 0); return;     // see noise vector\n // O = vec4(.5+.5*atan(D.y,D.x)/3.14); return;// see noise direction\n // D += .5*U; O = vec4(.5+.5*atan(D.y,D.x)/3.14); return;// see noise direction\n    \n    v = length( U + 1.*D );                   // distorted distance\n // O = vec4( v / 10. );                      // see\n // O = vec4( v / max(2.,1.5*length(U)) );    // renormalize by distance\n    O = vec4( v / max(1.5,.5*dot(U,U)) );     // renormalize by distance then div by dist\n // O = vec4( .5 + .5 * sin(v) );             // distorted concentric circles\n // O = vec4( .01* v / fwidth(v) );\n    O *= vec4(1.3,.8,.5,0);                   // coloring\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}