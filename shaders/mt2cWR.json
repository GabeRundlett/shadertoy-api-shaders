{
    "Shader": {
        "info": {
            "date": "1691680664",
            "description": "further simplifying  and optimizing Void And Cluster Bluenoise\" by krax  [url]https://www.shadertoy.com/view/cdfSD8[/url]\n( compute a lot less pixels, buff D useless ).\nLeft: krax algo with sigma = 2.5\nRight: shadertoy bluenoise.",
            "flags": 32,
            "hasliked": 0,
            "id": "mt2cWR",
            "likes": 13,
            "name": "Void And Cluster Bluenoise -spl3",
            "published": 3,
            "tags": [
                "noise",
                "bluenoise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "// more optimization of https://shadertoy.com/view/Dtjczm and https://shadertoy.com/view/DdXSD4\n// simplifying \"Void And Cluster Bluenoise\" by krax. https://shadertoy.com/view/cdfSD8\n// from ref: https://alister-chowdhury.github.io/posts/20221230-bluenoise-generator/\n// ( TODO: try GPmipmap invmin. but half-float spoils it: https://www.shadertoy.com/view/DtffWM )\n// (       Hexagonal version: here https://www.shadertoy.com/view/mllfW8 )\n\n// more reading: https://momentsingraphics.de/BlueNoise.html#The_void_and_cluster_method\n// about variance in A: larger → more LF but more isotropic.  very low → Bayer. Best compromise ~1.9, but shadertoy one ~ 2.5\n// Fourier spectrum: https://www.shadertoy.com/view/DlXfWn\n\nvoid mainImage( out vec4 O, vec2 u )\n{ \n  // O = vec4(texelFetch(iChannel2, ivec2(u), 0).x!=0.); return; // for debug\n \n    vec2 R = iResolution.xy, U = u/R;\n    if ( int(u) == int(R)/2 ) { O = vec4(1, U.y > float(iFrame)/(s*s),0,0); return; } // red separator + progress bar\n    if ( U.x>.5 ) { O = texelFetch(iChannel1, ivec2(u)%1024, 0 ).xxxx; return; }      // reference shadertoy bluenoise \n\n#if 1\n    u = s*fract(u/s);\n#else \n    u *= s/R;\n#endif \n\n    O = T(u.x,u.y).xxxx;\n//  O = vec4(O.x < .001 );   // select first values \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int S = 64;           // bluenoiseSize = SxS , cycling tile\nfloat s = float(S),         // note that more buffers are needed if S > 64 : clone C , S/8^(i+1)\n      sigma = 2.5;          // NB: krax used 1.9 \n\n#define T(x,y) texelFetch(iChannel0, ivec2(x,y) % S, 0)\n\nfloat H( uvec3 x ) {        // from iq https://www.shadertoy.com/view/XlXcW4\n    uint k = 1103515245U;   // GLIB C\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n // x = ((x>>8U)^x.yzx)*k;  // but this version only return 10⁻¹⁹ amplitude\n    return uintBitsToFloat( ((((x.x>>8U)^x.y)*k )  & 0x1fffffffU) ); // why ?\n // return 1e-19* float(((x.x>>8U)^x.y)*k   )  /float(0xffffffffU);  // Uniform\n}\n\n#define M(S,c)                                                                                  \\\nvoid mainImage( out vec4 O, vec2 U ) {                                                          \\\n    if( U.x > float(S/8) || U.y > float(S/8) ) return; /* we only simulate a small square    */ \\\n    O = vec4( 0,1e35,0,0);                                                                      \\\n    ivec2   start = min( ivec2(U)*8, S - 1 ),          /* to reduce a 8x8 above subtile to 1 */ \\\n              end = min( start + 8, S );                                                        \\\n    for( int y=start.y; y<end.y; ++y)                                                           \\\n      for( int x=start.x; x<end.x; ++x) {                                                       \\\n        vec4 E = T(x,y);                                                                        \\\n        c;                                             /* store result */                       \\\n}   } \n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This stage deals with updating the blue noise energy.\n// On the first iteration, we simply seed it with background energy.\n// output: .x = bluenoise, .y = energy.   \n// input:  D.yz = location or largest void.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if( U.x>s || U.y>s ) return; // we only simulate a small (cyclicling) square\n\n    if(iFrame == 0)              // init: noise = 0, energy = random\n    {   O.xy = vec2( 0, H(uvec3(U, 2111)) );\n        return;\n    }\n    \n    O = T(U.x,U.y);              // previous state\n    if(iFrame > S*S-1) return;   // max iteration reached\n \n \n    // Get the result from downscaling and finding the smallest void center\n    U = abs( floor(U) - texelFetch(iChannel1, ivec2(0), 0).zw ) / s;  // delta to target\n\n    float v = 1. - float(iFrame-1) / (s*s-1.); // noise value = normalized iterations\n\n    // Wrap around logic : max energy around optimal void center modulo s : https://www.desmos.com/calculator/zuopknqihy\n    vec2 d = ( abs( U - .5 ) - .5 )  * s / sigma;\n    O.xy += vec2( U==vec2(0) ? v : 0.,            // we are at the optimum : store noise\n                  v * exp( -dot(d,d) ) );         // energy += gaussian to optimum\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Void and cluster reduce init\n// input:  .xy = SxS state noise,energy.\n// output: .xyz = lowest energy value + position on SxS /8   ( and not already chosen )\n\nM( S , \n   if( E.x == 0. && E.y < O.y ) O = vec4( 0, E.y, x, y )\n )",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Void and cluster reduce iteration\n// input:  .xy = SxS /8 state energy,location\n// output: .xyz = lowest energy value + position on SxS /8²  ( and not already chosen )\n//                note that with S = 64 this is only 1 pixel.\n\nM( S/8 ,                                            \n   if( E.y < O.y ) O = E\n )",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}