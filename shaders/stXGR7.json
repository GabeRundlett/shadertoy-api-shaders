{
    "Shader": {
        "info": {
            "date": "1622281524",
            "description": "Inspired by a work from @krankarta https://twitter.com/krankarta?lang=en",
            "flags": 0,
            "hasliked": 0,
            "id": "stXGR7",
            "likes": 11,
            "name": "Zebra mountains",
            "published": 3,
            "tags": [
                "zebra",
                "moutains"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c);}\n\n\nfloat map(vec3 p)\n{\n    float land = -p.y\n    -(sin(p.x*2.+p.z)*.5\n    -sin(p.x*3.+p.z)*.25\n    -sin(p.x*4.+p.z*5.)*.1)*5.5*(1.-sat(length(p.xz)*.4));\n    return max(max(land,length(p.xz)-2.5), -(land+.05));\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0., 1., 0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+r*uv.x+u*uv.y);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy), map(p-e.yxy), map(p-e.yyx)));\n}\n\nvec2 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        float res = map(p);\n        if (res < 0.01)\n            return vec2(res, distance(p, ro));\n        p+= rd * res*.1;\n    }\n    return vec2(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(1.);\n    float dist = 5.;\n    float t = iTime*.1;\n    vec3 ro =vec3(sin(t)*dist, -5., cos(t)*dist);\n    vec3 ta = vec3(0., 0., 0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec2 res = trace(ro, rd, 512);\n    if (res.y > 0.)\n    {\n        float shp = 2.;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        vec3 refl = reflect(rd, n);\n        col = mix(col, vec3(sat(p.y+.5)*.5),\n        sat(-(length(p.xz)-2.3)*4.)*sat((sin(p.z*30.+iTime*5.)-.5)*shp)); \n        col = col*.75+col*texture(iChannel0, refl*vec3(1.,-1.,1.)).xyz;\n    }\n    col += vec3(1.)*sat((length(uv-vec2(0.,-.1))-.25)*4.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n\n    { // Not so cheap antialiasing SSAA x4\n        vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n        vec3 acc = col;\n        // To avoid too regular pattern yielding aliasing artifacts\n        mat2 rot = r2d(uv.y*5.); // a bit of value tweaking, appears to be working well\n        acc += rdr(uv-off.xx*rot);\n        acc += rdr(uv-off.xy*rot);\n        acc += rdr(uv-off.yy*rot);\n        acc += rdr(uv-off.yx*rot);\n        col = acc/5.;\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}