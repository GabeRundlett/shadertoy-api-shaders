{
    "Shader": {
        "info": {
            "date": "1586110228",
            "description": "Visualization of the construction of the group operation on elliptic curves.\nSee header comment for a verbose explanation",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd2cR1",
            "likes": 7,
            "name": "Elliptic curve group operation",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "group",
                "ellipticcurve"
            ],
            "usePreview": 1,
            "username": "NinjaKoala",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "/*\nVisualization of the group structure construction\nfor an elliptic curve.\n\nGiven two points p and q on the curve,\np * q is the third intersection of the\nline through p and q with the curve.\n(Tangent if p=q)\n\nDefine 0 to be an inflection point of the curve.\n\nWe want an abelian (commutative) group on the points of the\ncurve such that 0 is the neutral element and\nfor three points p,q,r\np + q + r = 0 <=> p,q,r collinear\n\nFor a point p, define q := 0 * p\nThen p, q and 0 are collinear and therefore\np + 0 + q = 0 => p + q = 0 => -p = q = 0 * p\n\nSo if there is an inverse element, it has to be 0 * p\nfor each point p on the curve\n\nAssume there is indeed an inverse element, and\nlet now p,q be arbitrary points on the curve, then\np + q + (p*q) = 0 => p + q = -(p*q) = 0 * (p*q)\n\nSo the only operation \"+\" that fulfills the above requirements\nis defined by: p + q := 0 * (p * q)\n\nWe can now test if -p is indeed the inverse element:\np + (-p) = 0 * (p * (-p)) = 0 * (p * (0*p)) = 0 * 0\n                                \\_________/\n                                     v\n                                    = 0\n\nSo \"-p\" is an inverse exactly when 0 = 0 * 0,\nwhich means 0 is the only intersection of the\ncurves tangent in 0 with the curve,\nwhich is the defining property of an inflection point.\n\nFor a geometric proof of associativity, see:\nhttps://www.shadertoy.com/view/3djyz1\n\nNote:\nIt is standard to take the inflection point at infinity\nas neutral element. In that case, 0 * p\nbecomes the reflection of p at the x axis.\nThis leads to an particularly easy computation of\nthe operation. However, i decided to use an\ninflection point that can be actually seen.\n\nThe letters are from the Latin Modern font\n(https://en.wikipedia.org/wiki/Computer_Modern#Latin_Modern)\nconverted to shader with\nhttps://gist.github.com/Ninja-Koala/74fa7652fb4de248949ce1e27b989c14\n*/\n\n//#define ZERO 0\n#define ZERO min(0,iFrame)\n\nfloat border;\n\n// Modified from http://tog.acm.org/resources/GraphicsGems/gems/Roots3And4.c\n// Credits to Doublefresh for hinting there\nint solve_quadric(vec2 coeffs, inout vec2 roots){\n\n\t// normal form: x^2 + px + q = 0\n\tfloat p = coeffs[1] / 2.;\n\tfloat q = coeffs[0];\n\n\tfloat D = p * p - q;\n\n\tif (D < 0.){\n\t\treturn 0;\n\t}\n\telse{\n\t\troots[0] = -sqrt(D) - p;\n\t\troots[1] = sqrt(D) - p;\n\n\t\treturn 2;\n\t}\n}\n\n//From Trisomie21\n//But instead of his cancellation fix i'm using a newton iteration\nint solve_cubic(vec3 coeffs, inout vec3 r){\n\n\tfloat a = coeffs[2];\n\tfloat b = coeffs[1];\n\tfloat c = coeffs[0];\n\n\tfloat p = b - a*a / 3.0;\n\tfloat q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n\tfloat p3 = p*p*p;\n\tfloat d = q*q + 4.0*p3 / 27.0;\n\tfloat offset = -a / 3.0;\n\tif(d >= 0.0) { // Single solution\n\t\tfloat z = sqrt(d);\n\t\tfloat u = (-q + z) / 2.0;\n\t\tfloat v = (-q - z) / 2.0;\n\t\tu = sign(u)*pow(abs(u),1.0/3.0);\n\t\tv = sign(v)*pow(abs(v),1.0/3.0);\n\t\tr[0] = offset + u + v;\t\n\n\t\t//Single newton iteration to account for cancellation\n\t\tfloat f = ((r[0] + a) * r[0] + b) * r[0] + c;\n\t\tfloat f1 = (3. * r[0] + 2. * a) * r[0] + b;\n\n\t\tr[0] -= f / f1;\n\n\t\treturn 1;\n\t}\n\tfloat u = sqrt(-p / 3.0);\n\tfloat v = acos(-sqrt( -27.0 / p3) * q / 2.0) / 3.0;\n\tfloat m = cos(v), n = sin(v)*1.732050808;\n\n\t//Single newton iteration to account for cancellation\n\t//(once for every root)\n\tr[0] = offset + u * (m + m);\n\tr[1] = offset - u * (n + m);\n\tr[2] = offset + u * (n - m);\n\n\tvec3 f = ((r + a) * r + b) * r + c;\n\tvec3 f1 = (3. * r + 2. * a) * r + b;\n\n\tr -= f / f1;\n\n\treturn 3;\n}\n\nfloat cubic_bezier_normal_iteration(float t, vec2 a0, vec2 a1, vec2 a2, vec2 a3){\n\t//horner's method\n\tvec2 a_2=a2+t*a3;\n\tvec2 a_1=a1+t*a_2;\n\tvec2 b_2=a_2+t*a3;\n\n\tvec2 uv_to_p=a0+t*a_1;\n\tvec2 tang=a_1+t*b_2;\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat cubic_bezier_dis_approx_sq(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\tvec2 a3 = (-p0 + 3. * p1 - 3. * p2 + p3);\n\tvec2 a2 = (3. * p0 - 6. * p1 + 3. * p2);\n\tvec2 a1 = (-3. * p0 + 3. * p1);\n\tvec2 a0 = p0 - uv;\n\n\tfloat d0 = 1e38;\n\n\tfloat t;\n\tvec3 params=vec3(0,.5,1);\n\n\tif(all(lessThan(uv,max(max(p0,p1),max(p2,p3))+border)) && all(greaterThan(uv,min(min(p0,p1),min(p2,p3))-border))){\n\t\tfor(int i=ZERO;i<3;i++){\n\t\t\tt=params[i];\n\t\t\tfor(int j=ZERO;j<3;j++){\n\t\t\t\tt=cubic_bezier_normal_iteration(t,a0,a1,a2,a3);\n\t\t\t}\n\t\t\tt=clamp(t,0.,1.);\n\t\t\tvec2 uv_to_p=((a3*t+a2)*t+a1)*t+a0;\n\t\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t\t}\n\t}\n\n\treturn d0;\n}\n\n//segment_dis_sq by iq\nfloat length2( vec2 v ) { return dot(v,v); }\n\nfloat segment_dis_sq( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length2( pa - ba*h );\n}\n\nint segment_int_test(vec2 uv, vec2 p0, vec2 p1){\n\tp0-=uv;\n\tp1-=uv;\n\n\tint ret;\n\t\n\tif(p0.y*p1.y<0.){\n\t\tvec2 nor=p0-p1;\n\t\tnor=vec2(nor.y,-nor.x);\n\t\t\n\t\tfloat sgn;\n\t\t\n\t\tif(p0.y>p1.y){\n\t\t\tsgn=1.;\n\t\t}\n\t\telse{\n\t\t\tsgn=-1.;\n\t\t}\n\n\t\tif(dot(nor,p0)*sgn<0.){\n\t\t\tret=0;\n\t\t}\n\t\telse{\n\t\t\tret=1;\n\t\t}\n\t}\n\telse{\n\t\tret=0;\n\t}\n\n\treturn ret;\n}\n\nint cubic_bezier_int_test(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\n\tfloat cu = (-p0.y + 3. * p1.y - 3. * p2.y + p3.y);\n\tfloat qu = (3. * p0.y - 6. * p1.y + 3. * p2.y);\n\tfloat li = (-3. * p0.y + 3. * p1.y);\n\tfloat co = p0.y - uv.y;\n\n\tvec3 roots = vec3(1e38);\n\tint n_roots;\n\n\tint n_ints=0;\n\n\tif(uv.x<min(min(p0.x,p1.x),min(p2.x,p3.x))){\n\t\tif(uv.y>=min(p0.y,p3.y) && uv.y<=max(p0.y,p3.y)){\n\t\t\tn_ints=1;\n\t\t}\n\t}\n\telse{\n\t\tif(abs(cu) < .0001){\n\t\t\tn_roots = solve_quadric(vec2(co/qu,li/qu),roots.xy);\n\t\t}\n\t\telse{\n\t\t\tn_roots = solve_cubic(vec3(co/cu,li/cu,qu/cu),roots);\n\t\t}\n\n\t\tfor(int i=ZERO;i<n_roots;i++){\n\t\t\tif(roots[i] >= 0. && roots[i] <= 1.){\n\t\t\t\tfloat x_pos = -p0.x + 3. * p1.x - 3. * p2.x + p3.x;\n\t\t\t\tx_pos = x_pos * roots[i] + 3. * p0.x - 6. * p1.x + 3. * p2.x;\n\t\t\t\tx_pos = x_pos * roots[i] + -3. * p0.x + 3. * p1.x;\n\t\t\t\tx_pos = x_pos * roots[i] + p0.x;\n\n\t\t\t\tif(x_pos > uv.x){\n\t\t\t\t\tn_ints++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn n_ints;\n}\n\nvec3 line(vec2 p_0, vec2 p_1){\n\tvec2 tan1 = p_1-p_0;\n\tvec2 nor1 = normalize(vec2(tan1.y,-tan1.x));\n\treturn vec3(nor1,-dot(nor1,p_0));\n}\n\nvec2 third_intersection(vec2 p0, vec2 p1, float g_2, float g_3){\n\tvec2 tang=p1-p0;\n\tfloat p0_val = p0.y*p0.y - (( 4.*p0.x*p0.x - g_2 ) * p0.x - g_3);\n\n\tfloat co=p0_val;\n\tfloat li=-12.*p0.x*p0.x*tang.x + g_2*tang.x + 2.*p0.y*tang.y;\n\tfloat qu=-12.*p0.x*tang.x*tang.x+tang.y*tang.y;\n\tfloat cu=-4.*tang.x*tang.x*tang.x;\n\n\tvec3 roots = vec3(1e38);\n\tint n_roots = solve_cubic(vec3(co/cu,li/cu,qu/cu),roots);\n\n\tvec2 p2=vec2(1e38);\n\n\tfor(int i=ZERO;i<n_roots;i++){\n\t\tvec2 tmp=p0+roots[i]*tang;\n\t\tif(distance(tmp,p0)>0.0001 && distance(tmp,p1)>0.0001){\n\t\t\tp2=tmp;\n\t\t}\n\t}\n\n\treturn p2;\n}\n\nfloat plus_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[32] p=vec2[](vec2(0.0257924,-0.0),\n\t                  vec2(0.0257924,0.00155143),\n\t                  vec2(0.0243185,0.00155143),\n\t                  vec2(0.0232326,0.00155143),\n\t                  vec2(0.00159032,0.00155143),\n\t                  vec2(0.00159032,0.0232712),\n\t                  vec2(0.00159032,0.0243572),\n\t                  vec2(0.00159032,0.0258311),\n\t                  vec2(3.88912e-05,0.0258311),\n\t                  vec2(-0.00151253,0.0258311),\n\t                  vec2(-0.00151253,0.0243572),\n\t                  vec2(-0.00151253,0.0232712),\n\t                  vec2(-0.00151253,0.00155143),\n\t                  vec2(-0.0232323,0.00155143),\n\t                  vec2(-0.0243183,0.00155143),\n\t                  vec2(-0.0257922,0.00155143),\n\t                  vec2(-0.0257922,-0.0),\n\t                  vec2(-0.0257922,-0.00155143),\n\t                  vec2(-0.0243183,-0.00155143),\n\t                  vec2(-0.0232323,-0.00155143),\n\t                  vec2(-0.00151253,-0.00155143),\n\t                  vec2(-0.00151253,-0.0232712),\n\t                  vec2(-0.00151253,-0.0243572),\n\t                  vec2(-0.00151253,-0.0258311),\n\t                  vec2(3.88912e-05,-0.0258311),\n\t                  vec2(0.00159032,-0.0258311),\n\t                  vec2(0.00159032,-0.0243572),\n\t                  vec2(0.00159032,-0.0232712),\n\t                  vec2(0.00159032,-0.00155143),\n\t                  vec2(0.0232326,-0.00155143),\n\t                  vec2(0.0243185,-0.00155143),\n\t                  vec2(0.0257924,-0.00155143));\n\n\tivec2[8] seg=ivec2[](ivec2(3,4),\n\t                     ivec2(4,5),\n\t                     ivec2(11,12),\n\t                     ivec2(12,13),\n\t                     ivec2(19,20),\n\t                     ivec2(20,21),\n\t                     ivec2(27,28),\n\t                     ivec2(28,29));\n\n\tivec4[8] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                       ivec4(5,6,7,8),\n\t                       ivec4(8,9,10,11),\n\t                       ivec4(13,14,15,16),\n\t                       ivec4(16,17,18,19),\n\t                       ivec4(21,22,23,24),\n\t                       ivec4(24,25,26,27),\n\t                       ivec4(29,30,31,0));\n\n\tif(all(lessThan(uv,vec2(0.0257924,0.0258311)+border)) && all(greaterThan(uv,vec2(-0.0257922,-0.0258311)-border))){\n\t\tfor(int i=ZERO;i<8;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<8;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat minus_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[14] p=vec2[](vec2(0.0257924,-4.39771e-08),\n\t                  vec2(0.0257924,0.00155138),\n\t                  vec2(0.0243185,0.00155138),\n\t                  vec2(0.0232326,0.00155138),\n\t                  vec2(-0.0232323,0.00155138),\n\t                  vec2(-0.0243183,0.00155138),\n\t                  vec2(-0.0257922,0.00155138),\n\t                  vec2(-0.0257922,-4.39771e-08),\n\t                  vec2(-0.0257922,-0.00155143),\n\t                  vec2(-0.0243183,-0.00155143),\n\t                  vec2(-0.0231548,-0.00155143),\n\t                  vec2(0.023155,-0.00155143),\n\t                  vec2(0.0243185,-0.00155143),\n\t                  vec2(0.0257924,-0.00155143));\n\n\tivec2[2] seg=ivec2[](ivec2(3,4),\n\t                     ivec2(10,11));\n\n\tivec4[4] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                       ivec4(4,5,6,7),\n\t                       ivec4(7,8,9,10),\n\t                       ivec4(11,12,13,0));\n\n\tif(all(lessThan(uv,vec2(0.0257924,0.00155138)+border)) && all(greaterThan(uv,vec2(-0.0257922,-0.00155143)-border))){\n\t\tfor(int i=ZERO;i<2;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<4;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat asterisk_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[57] p=vec2[](vec2(0.0143119,-0.00725288),\n\t                  vec2(0.0143119,-0.0063996),\n\t                  vec2(0.0140015,-0.00577904),\n\t                  vec2(0.0126829,-0.00515847),\n\t                  vec2(0.00174542,-3.87878e-05),\n\t                  vec2(0.0125278,0.00508085),\n\t                  vec2(0.0140016,0.00577899),\n\t                  vec2(0.0143119,0.00632202),\n\t                  vec2(0.0143119,0.00725284),\n\t                  vec2(0.0143119,0.00826128),\n\t                  vec2(0.0134586,0.00942483),\n\t                  vec2(0.0122175,0.00942483),\n\t                  vec2(0.0116745,0.00942483),\n\t                  vec2(0.0115193,0.00942483),\n\t                  vec2(0.00950251,0.00795098),\n\t                  vec2(0.000892179,0.00159017),\n\t                  vec2(0.00205573,0.0147772),\n\t                  vec2(0.00205573,0.0159408),\n\t                  vec2(0.00104729,0.0167165),\n\t                  vec2(3.88912e-05,0.0167165),\n\t                  vec2(-0.00120223,0.0167165),\n\t                  vec2(-0.00205552,0.0157856),\n\t                  vec2(-0.00205552,0.0147772),\n\t                  vec2(-0.000891973,0.00159017),\n\t                  vec2(-0.0105107,0.00857154),\n\t                  vec2(-0.0115967,0.00942483),\n\t                  vec2(-0.0117519,0.00942483),\n\t                  vec2(-0.0122173,0.00942483),\n\t                  vec2(-0.0134584,0.00942483),\n\t                  vec2(-0.0143117,0.00826128),\n\t                  vec2(-0.0143117,0.00725284),\n\t                  vec2(-0.0143117,0.0063996),\n\t                  vec2(-0.0140012,0.00577899),\n\t                  vec2(-0.0126827,0.00515843),\n\t                  vec2(-0.00174522,3.87878e-05),\n\t                  vec2(-0.0125276,-0.0050809),\n\t                  vec2(-0.0140014,-0.00577904),\n\t                  vec2(-0.0143117,-0.00632202),\n\t                  vec2(-0.0143117,-0.00725288),\n\t                  vec2(-0.0143117,-0.00725288),\n\t                  vec2(-0.0143117,-0.00942487),\n\t                  vec2(-0.0117519,-0.00942487),\n\t                  vec2(-0.000891973,-0.00159021),\n\t                  vec2(-0.00205552,-0.0147772),\n\t                  vec2(-0.00205552,-0.0159408),\n\t                  vec2(-0.00104708,-0.0167165),\n\t                  vec2(-3.86845e-05,-0.0167165),\n\t                  vec2(0.00120244,-0.0167165),\n\t                  vec2(0.00205573,-0.0157857),\n\t                  vec2(0.00205573,-0.0147772),\n\t                  vec2(0.000892179,-0.00159021),\n\t                  vec2(0.0109764,-0.00895942),\n\t                  vec2(0.0113642,-0.00919206),\n\t                  vec2(0.0115969,-0.00942487),\n\t                  vec2(0.0122175,-0.00942487),\n\t                  vec2(0.0134586,-0.00942487),\n\t                  vec2(0.0143119,-0.00826128));\n\n\tivec2[12] seg=ivec2[](ivec2(3,4),\n\t                      ivec2(4,5),\n\t                      ivec2(14,15),\n\t                      ivec2(15,16),\n\t                      ivec2(22,23),\n\t                      ivec2(23,24),\n\t                      ivec2(33,34),\n\t                      ivec2(34,35),\n\t                      ivec2(41,42),\n\t                      ivec2(42,43),\n\t                      ivec2(49,50),\n\t                      ivec2(50,51));\n\n\tivec4[15] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(5,6,7,8),\n\t                        ivec4(8,9,10,11),\n\t                        ivec4(11,12,13,14),\n\t                        ivec4(16,17,18,19),\n\t                        ivec4(19,20,21,22),\n\t                        ivec4(24,25,26,27),\n\t                        ivec4(27,28,29,30),\n\t                        ivec4(30,31,32,33),\n\t                        ivec4(35,36,37,38),\n\t                        ivec4(38,39,40,41),\n\t                        ivec4(43,44,45,46),\n\t                        ivec4(46,47,48,49),\n\t                        ivec4(51,52,53,54),\n\t                        ivec4(54,55,56,0));\n\n\tif(all(lessThan(uv,vec2(0.0143119,0.0167165)+border)) && all(greaterThan(uv,vec2(-0.0143117,-0.0167165)-border))){\n\t\tfor(int i=ZERO;i<12;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<15;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat zero_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[48] p=vec2[](vec2(0.0163288,-0.000155151),\n\t                  vec2(0.0163288,0.00605055),\n\t                  vec2(0.0159409,0.0122562),\n\t                  vec2(0.013226,0.0179964),\n\t                  vec2(0.0096577,0.0254432),\n\t                  vec2(0.00329689,0.0266843),\n\t                  vec2(3.89352e-05,0.0266843),\n\t                  vec2(-0.00461534,0.0266843),\n\t                  vec2(-0.010278,0.0246675),\n\t                  vec2(-0.0134584,0.0174534),\n\t                  vec2(-0.0159407,0.012101),\n\t                  vec2(-0.0163286,0.00605055),\n\t                  vec2(-0.0163286,-0.000155151),\n\t                  vec2(-0.0163286,-0.00597297),\n\t                  vec2(-0.0160181,-0.0129543),\n\t                  vec2(-0.0128379,-0.0188497),\n\t                  vec2(-0.00950234,-0.0251329),\n\t                  vec2(-0.00383967,-0.0266843),\n\t                  vec2(-3.86845e-05,-0.0266843),\n\t                  vec2(0.00415014,-0.0266843),\n\t                  vec2(0.0100455,-0.0250554),\n\t                  vec2(0.0134586,-0.0176862),\n\t                  vec2(0.0159409,-0.0123337),\n\t                  vec2(0.0163287,-0.00628323),\n\t                  vec2(0.00989038,0.000775669),\n\t                  vec2(0.00989038,-0.00504211),\n\t                  vec2(0.00989038,-0.0103169),\n\t                  vec2(0.00903714,-0.0152815),\n\t                  vec2(0.00787359,-0.0226507),\n\t                  vec2(0.003452,-0.0249778),\n\t                  vec2(-3.86405e-05,-0.0249778),\n\t                  vec2(-0.00306392,-0.0249778),\n\t                  vec2(-0.00764062,-0.0230385),\n\t                  vec2(-0.00903685,-0.0155917),\n\t                  vec2(-0.00989013,-0.0109375),\n\t                  vec2(-0.00989013,-0.00380099),\n\t                  vec2(-0.00989013,0.000775669),\n\t                  vec2(-0.00989013,0.00574025),\n\t                  vec2(-0.00989013,0.0108599),\n\t                  vec2(-0.00926957,0.0150488),\n\t                  vec2(-0.00779577,0.0242797),\n\t                  vec2(-0.0019779,0.0249778),\n\t                  vec2(-3.86405e-05,0.0249778),\n\t                  vec2(0.00252114,0.0249778),\n\t                  vec2(0.00764087,0.0235816),\n\t                  vec2(0.00911472,0.015902),\n\t                  vec2(0.00989038,0.0115581),\n\t                  vec2(0.00989038,0.00566267));\n\n\tivec4[16] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(3,4,5,6),\n\t                        ivec4(6,7,8,9),\n\t                        ivec4(9,10,11,12),\n\t                        ivec4(12,13,14,15),\n\t                        ivec4(15,16,17,18),\n\t                        ivec4(18,19,20,21),\n\t                        ivec4(21,22,23,0),\n\t                        ivec4(24,25,26,27),\n\t                        ivec4(27,28,29,30),\n\t                        ivec4(30,31,32,33),\n\t                        ivec4(33,34,35,36),\n\t                        ivec4(36,37,38,39),\n\t                        ivec4(39,40,41,42),\n\t                        ivec4(42,43,44,45),\n\t                        ivec4(45,46,47,24));\n\n\tif(all(lessThan(uv,vec2(0.0163288,0.0266843)+border)) && all(greaterThan(uv,vec2(-0.0163286,-0.0266843)-border))){\n\t\tfor(int i=ZERO;i<16;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat p_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[84] p=vec2[](vec2(0.0192376,0.0125665),\n\t                  vec2(0.0192376,0.0208666),\n\t                  vec2(0.0145834,0.0246675),\n\t                  vec2(0.00992917,0.0246675),\n\t                  vec2(0.00612818,0.0246675),\n\t                  vec2(0.00279265,0.021875),\n\t                  vec2(0.000543133,0.0192375),\n\t                  vec2(-0.000387731,0.0237367),\n\t                  vec2(-0.00387846,0.0246675),\n\t                  vec2(-0.00581768,0.0246675),\n\t                  vec2(-0.00861022,0.0246675),\n\t                  vec2(-0.0101616,0.0228834),\n\t                  vec2(-0.0114028,0.0205563),\n\t                  vec2(-0.0128766,0.0174535),\n\t                  vec2(-0.013885,0.0127216),\n\t                  vec2(-0.013885,0.0127216),\n\t                  vec2(-0.013885,0.0119459),\n\t                  vec2(-0.0131093,0.0119459),\n\t                  vec2(-0.0127215,0.0119459),\n\t                  vec2(-0.0117131,0.0119459),\n\t                  vec2(-0.0116355,0.0120233),\n\t                  vec2(-0.0112477,0.0137301),\n\t                  vec2(-0.00985139,0.01916),\n\t                  vec2(-0.0083775,0.022961),\n\t                  vec2(-0.00597287,0.022961),\n\t                  vec2(-0.00395599,0.022961),\n\t                  vec2(-0.00395599,0.0207114),\n\t                  vec2(-0.00395599,0.0198581),\n\t                  vec2(-0.00395599,0.0193927),\n\t                  vec2(-0.00395599,0.0181516),\n\t                  vec2(-0.00449902,0.0159796),\n\t                  vec2(-0.0133421,-0.0195478),\n\t                  vec2(-0.0139626,-0.0219525),\n\t                  vec2(-0.0145832,-0.0221852),\n\t                  vec2(-0.0176085,-0.0222628),\n\t                  vec2(-0.0183066,-0.0222628),\n\t                  vec2(-0.0192375,-0.0222628),\n\t                  vec2(-0.0192375,-0.0237366),\n\t                  vec2(-0.0192375,-0.0242796),\n\t                  vec2(-0.0188496,-0.0246675),\n\t                  vec2(-0.0183066,-0.0246675),\n\t                  vec2(-0.0162122,-0.0246675),\n\t                  vec2(-0.0139626,-0.0244348),\n\t                  vec2(-0.0117906,-0.0244348),\n\t                  vec2(-0.0093084,-0.0244348),\n\t                  vec2(-0.00667101,-0.0246675),\n\t                  vec2(-0.00426629,-0.0246675),\n\t                  vec2(-0.00380088,-0.0246675),\n\t                  vec2(-0.00279244,-0.0246675),\n\t                  vec2(-0.00279244,-0.0231936),\n\t                  vec2(-0.00279244,-0.0222628),\n\t                  vec2(-0.00356816,-0.0222628),\n\t                  vec2(-0.00465413,-0.0222628),\n\t                  vec2(-0.00861027,-0.0222628),\n\t                  vec2(-0.00861027,-0.0217974),\n\t                  vec2(-0.00861027,-0.0210216),\n\t                  vec2(-0.00861027,-0.0205562),\n\t                  vec2(-0.00806728,-0.0185394),\n\t                  vec2(-0.00775698,-0.0172983),\n\t                  vec2(-0.00496443,-0.00597293),\n\t                  vec2(-0.00442145,-0.00729163),\n\t                  vec2(-0.00248219,-0.010472),\n\t                  vec2(0.00155153,-0.010472),\n\t                  vec2(0.0100067,-0.010472),\n\t                  vec2(0.0192376,0.00100844),\n\t                  vec2(0.00969645,-0.00139623),\n\t                  vec2(0.00876563,-0.00333553),\n\t                  vec2(0.00543005,-0.00876552),\n\t                  vec2(0.00147395,-0.00876552),\n\t                  vec2(-0.00302517,-0.00876552),\n\t                  vec2(-0.00380088,-0.00217194),\n\t                  vec2(-0.00380088,-0.00155138),\n\t                  vec2(-0.00380088,-0.00131874),\n\t                  vec2(-0.00372348,-0.00108597),\n\t                  vec2(-0.00356825,-0.000465454),\n\t                  vec2(7.75911e-05,0.0141955),\n\t                  vec2(0.000698152,0.0168328),\n\t                  vec2(0.00550754,0.022961),\n\t                  vec2(0.00977393,0.022961),\n\t                  vec2(0.0132646,0.022961),\n\t                  vec2(0.0140403,0.0185394),\n\t                  vec2(0.0140403,0.0160572),\n\t                  vec2(0.0140403,0.0127992),\n\t                  vec2(0.011946,0.00356826));\n\n\tivec2[3] seg=ivec2[](ivec2(30,31),\n\t                     ivec2(58,59),\n\t                     ivec2(74,75));\n\n\tivec4[27] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(3,4,5,6),\n\t                        ivec4(6,7,8,9),\n\t                        ivec4(9,10,11,12),\n\t                        ivec4(12,13,14,15),\n\t                        ivec4(15,16,17,18),\n\t                        ivec4(18,19,20,21),\n\t                        ivec4(21,22,23,24),\n\t                        ivec4(24,25,26,27),\n\t                        ivec4(27,28,29,30),\n\t                        ivec4(31,32,33,34),\n\t                        ivec4(34,35,36,37),\n\t                        ivec4(37,38,39,40),\n\t                        ivec4(40,41,42,43),\n\t                        ivec4(43,44,45,46),\n\t                        ivec4(46,47,48,49),\n\t                        ivec4(49,50,51,52),\n\t                        ivec4(52,53,54,55),\n\t                        ivec4(55,56,57,58),\n\t                        ivec4(59,60,61,62),\n\t                        ivec4(62,63,64,0),\n\t                        ivec4(65,66,67,68),\n\t                        ivec4(68,69,70,71),\n\t                        ivec4(71,72,73,74),\n\t                        ivec4(75,76,77,78),\n\t                        ivec4(78,79,80,81),\n\t                        ivec4(81,82,83,65));\n\n\tif(all(lessThan(uv,vec2(0.0192376,0.0246675)+border)) && all(greaterThan(uv,vec2(-0.0192375,-0.0246675)-border))){\n\t\tfor(int i=ZERO;i<3;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<27;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nfloat q_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[74] p=vec2[](vec2(0.00981294,-0.0231936),\n\t                  vec2(0.00981294,-0.0222628),\n\t                  vec2(0.00903727,-0.0222628),\n\t                  vec2(0.00795126,-0.0222628),\n\t                  vec2(0.00399516,-0.0222628),\n\t                  vec2(0.00399516,-0.0217974),\n\t                  vec2(0.00399516,-0.0210216),\n\t                  vec2(0.00399516,-0.0204787),\n\t                  vec2(0.0041504,-0.0200908),\n\t                  vec2(0.0042278,-0.0196254),\n\t                  vec2(0.014855,0.0227283),\n\t                  vec2(0.0149324,0.0229609),\n\t                  vec2(0.0150876,0.0237367),\n\t                  vec2(0.0150876,0.0237367),\n\t                  vec2(0.0150876,0.0244348),\n\t                  vec2(0.0144671,0.02459),\n\t                  vec2(0.0142344,0.02459),\n\t                  vec2(0.0133811,0.02459),\n\t                  vec2(0.0105885,0.021875),\n\t                  vec2(0.00934736,0.019703),\n\t                  vec2(0.00841654,0.0219525),\n\t                  vec2(0.0063997,0.0246675),\n\t                  vec2(0.00267629,0.0246675),\n\t                  vec2(-0.00593408,0.0246675),\n\t                  vec2(-0.0150874,0.0128768),\n\t                  vec2(-0.0150874,0.00155143),\n\t                  vec2(-0.0150874,-0.00504211),\n\t                  vec2(-0.0115192,-0.010472),\n\t                  vec2(-0.00570136,-0.010472),\n\t                  vec2(-0.00252097,-0.010472),\n\t                  vec2(0.000349194,-0.00845522),\n\t                  vec2(0.00252114,-0.00636081),\n\t                  vec2(0.000969711,-0.0124113),\n\t                  vec2(0.00104729,-0.0124113),\n\t                  vec2(-0.000504094,-0.0185394),\n\t                  vec2(-0.00135738,-0.0218749),\n\t                  vec2(-0.00143491,-0.0221852),\n\t                  vec2(-0.00639949,-0.0222628),\n\t                  vec2(-0.00740793,-0.0222628),\n\t                  vec2(-0.00826122,-0.0222628),\n\t                  vec2(-0.00826122,-0.0237366),\n\t                  vec2(-0.00826122,-0.0244348),\n\t                  vec2(-0.00779577,-0.0246675),\n\t                  vec2(-0.00725278,-0.0246675),\n\t                  vec2(-0.00477054,-0.0246675),\n\t                  vec2(-0.00205552,-0.0244348),\n\t                  vec2(0.000504345,-0.0244348),\n\t                  vec2(0.00306412,-0.0244348),\n\t                  vec2(0.00585671,-0.0246675),\n\t                  vec2(0.008339,-0.0246675),\n\t                  vec2(0.00880441,-0.0246675),\n\t                  vec2(0.00981277,-0.0246675),\n\t                  vec2(0.00407269,-0.000155107),\n\t                  vec2(0.00345218,-0.00255978),\n\t                  vec2(-0.00127972,-0.00876548),\n\t                  vec2(-0.00554612,-0.00876548),\n\t                  vec2(-0.00919191,-0.00876548),\n\t                  vec2(-0.00981247,-0.00418878),\n\t                  vec2(-0.00981247,-0.00186164),\n\t                  vec2(-0.00981247,0.00201688),\n\t                  vec2(-0.0074078,0.0110927),\n\t                  vec2(-0.00601153,0.0143506),\n\t                  vec2(-0.00407227,0.0190825),\n\t                  vec2(-0.000504007,0.022961),\n\t                  vec2(0.00267642,0.022961),\n\t                  vec2(0.00329698,0.022961),\n\t                  vec2(0.00508109,0.0228836),\n\t                  vec2(0.00647736,0.0207114),\n\t                  vec2(0.00725308,0.0194703),\n\t                  vec2(0.00802879,0.0172207),\n\t                  vec2(0.00802879,0.0157469),\n\t                  vec2(0.00802879,0.0155143),\n\t                  vec2(0.00795139,0.0152039),\n\t                  vec2(0.00779615,0.0147385));\n\n\tivec2[2] seg=ivec2[](ivec2(9,10),\n\t                     ivec2(73,52));\n\n\tivec4[24] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(3,4,5,6),\n\t                        ivec4(6,7,8,9),\n\t                        ivec4(10,11,12,13),\n\t                        ivec4(13,14,15,16),\n\t                        ivec4(16,17,18,19),\n\t                        ivec4(19,20,21,22),\n\t                        ivec4(22,23,24,25),\n\t                        ivec4(25,26,27,28),\n\t                        ivec4(28,29,30,31),\n\t                        ivec4(31,32,33,34),\n\t                        ivec4(34,35,36,37),\n\t                        ivec4(37,38,39,40),\n\t                        ivec4(40,41,42,43),\n\t                        ivec4(43,44,45,46),\n\t                        ivec4(46,47,48,49),\n\t                        ivec4(49,50,51,0),\n\t                        ivec4(52,53,54,55),\n\t                        ivec4(55,56,57,58),\n\t                        ivec4(58,59,60,61),\n\t                        ivec4(61,62,63,64),\n\t                        ivec4(64,65,66,67),\n\t                        ivec4(67,68,69,70),\n\t                        ivec4(70,71,72,73));\n\n\tif(all(lessThan(uv,vec2(0.0150876,0.0246675)+border)) && all(greaterThan(uv,vec2(-0.0150874,-0.0246675)-border))){\n\t\tfor(int i=ZERO;i<2;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<24;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tfloat aspect_ratio = iResolution.x / iResolution.y;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv-=.5;\n\tuv.x *= aspect_ratio;\n\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse-=.5;\n\tmouse.x *= iResolution.x / iResolution.y;\n\n\tvec2 mouse2 = iMouse.zw / iResolution.xy;\n\tmouse2-=.5;\n\tmouse2.x *= iResolution.x / iResolution.y;\n\n\tconst float line_width = .001;\n\tconst float curve_width = .001;\n\tconst float dot_size = .005;\n\n\tconst float axis_width = .005;\n\n\tconst vec3 bg_col = vec3(1,1,1);\n\tconst vec3 axis_col = vec3(0,0,0);\n\tconst vec3 line_col = vec3(0,1,0);\n\tconst vec3 second_line_col = vec3(1,1,0);\n\tconst vec3 curve_col = vec3(0,0,1);\n\tconst vec3 dot_col = vec3(1,0,0);\n\tconst vec3 text_col = vec3(0,0,0);\n\n    border = 2./iResolution.y;\n\n\tfloat curve_dis = 1e38;\n\tfloat second_curve_dis = 1e38;\n\tfloat dot_dis = 1e38;\n\tfloat axis_dis = 1e38;\n\tfloat line_dis = 1e38;\n\tfloat second_line_dis = 1e38;\n\tfloat text_dis_sq = 1e38;\n\tfloat text_dis = 1e38;\n\n\t//elliptic curve parameters (weierstrass normal form)\n\tfloat g_2 = .3;\n\tfloat g_3 = -.05;\n\n\t//initial approximations for various points (not exactly lying on the curve)\n\t//you can play around with these values, but the gradient descent\n\t//can get unstable if the points are too far away from the curve\n\n\tvec2 p0=vec2(0.043,-0.193); //0: the inflection point\n\tvec2 p1=vec2(-.3,.05*sin(mod(iTime,6.28318530717959))); //p\n\tvec2 p2=vec2(.1,-.1); //q\n\n\t//compute points lying exactly on the curve by gradient descent\n\tconst int grad_descent_iterations=8;\n\tfloat p0_val, hesse_p0_val, p1_val, p2_val;\n\tvec2 p0_grad, hesse_p0_grad, p1_grad, p2_grad;\n\n\tfor(int i=ZERO;i<grad_descent_iterations;i++){\n\t\tp0_val = p0.y*p0.y - (( 4.*p0.x*p0.x - g_2 ) * p0.x - g_3);\n\t\tp0_grad = vec2(-12.*p0.x*p0.x+g_2,2.*p0.y);\n\t\tp0-=(p0_grad*p0_val)/dot(p0_grad,p0_grad);\n\n\t\t//compute inflection point by alternately gradient descenting to curve and hessian of curve\n\t\thesse_p0_val = -96.*g_2*p0.x*p0.x + 96.*p0.x*p0.y*p0.y - 8.*g_2*g_2 - 288.*g_3*p0.x;\n\t\thesse_p0_grad = vec2(-192.*g_2*p0.x + 96.*p0.y*p0.y - 288.*g_3,192.*p0.x*p0.y);\n\t\tp0-=(hesse_p0_grad*hesse_p0_val)/dot(hesse_p0_grad,hesse_p0_grad);\n\n\t\tp1_val = p1.y*p1.y - (( 4.*p1.x*p1.x - g_2 ) * p1.x - g_3);\n\t\tp1_grad = vec2(-12.*p1.x*p1.x+g_2,2.*p1.y);\n\t\tp1-=(p1_grad*p1_val)/dot(p1_grad,p1_grad);\n\n\t\tp2_val = p2.y*p2.y - (( 4.*p2.x*p2.x - g_2 ) * p2.x - g_3);\n\t\tp2_grad = vec2(-12.*p2.x*p2.x+g_2,2.*p2.y);\n\t\tp2-=(p2_grad*p2_val)/dot(p2_grad,p2_grad);\n\t}\n\n\tvec2 p3=third_intersection(p1,p2,g_2,g_3); //p*q\n\tvec2 p4=third_intersection(p0,p3,g_2,g_3); //p+q\n\tvec2 p5=third_intersection(p0,p1,g_2,g_3); //-p\n\n\tdot_dis=min(dot_dis,distance(p0,uv)-dot_size); //0\n\tdot_dis=min(dot_dis,distance(p1,uv)-dot_size); //p\n\tdot_dis=min(dot_dis,distance(p2,uv)-dot_size); //q\n\tdot_dis=min(dot_dis,distance(p3,uv)-dot_size); //p*q\n\tdot_dis=min(dot_dis,distance(p4,uv)-dot_size); //p+q\n\tdot_dis=min(dot_dis,distance(p5,uv)-dot_size); //-p\n\n\tvec3 l0=line(p1,p2);\n\tvec3 l1=line(p0,p4);\n\n\tline_dis=min(line_dis,abs(dot(vec3(uv,1),l0)));\n\tline_dis=min(line_dis,abs(dot(vec3(uv,1),l1)));\n\n\tvec3 l2=line(p1,p5);\n\n\tp0_grad = vec2(-12.*p0.x*p0.x+g_2,2.*p0.y);\n\tvec3 tangent=vec3(normalize(p0_grad),0);\n\ttangent.z=-dot(p0,tangent.xy);\n\n\tsecond_line_dis=min(second_line_dis,abs(dot(vec3(uv,1),l2)));\n\tsecond_line_dis=min(second_line_dis,abs(dot(vec3(uv,1),tangent)));\n\n\tfloat uv_val = uv.y*uv.y - (( 4.*uv.x*uv.x - g_2 ) * uv.x - g_3);\n\tvec2 uv_grad = vec2(-12.*uv.x*uv.x+g_2,2.*uv.y);\n\n\tcurve_dis=min(curve_dis, abs(uv_val)/length(uv_grad)-curve_width);\n\n\taxis_dis=min(axis_dis, abs(uv.x));\n\taxis_dis=min(axis_dis, abs(uv.y));\n\n\tvec2[4] p_positions=vec2[](vec2(.03,.05)-p1,vec2(-.04,-.03)-p3,vec2(.13,.03)-p4,vec2(.03,.03)-p5);\n\tvec2[3] q_positions=vec2[](vec2(-.01,-.05)-p2,p_positions[1]+vec2(-.1,.0),p_positions[2]+vec2(-.1,.0));\n\n\tvec2 plus_position=p_positions[2]+vec2(-.05,1e-7);\n\tvec2 minus_position=p_positions[3]+vec2(.05,1e-7);\n\tvec2 zero_position=vec2(.003,.0425)-p0;\n\tvec2 asterisk_position=p_positions[1]+vec2(-.05,0.);\n\n\ttext_dis_sq=min(text_dis_sq,plus_dis_sq(uv+plus_position));\n\ttext_dis_sq=min(text_dis_sq,minus_dis_sq(uv+minus_position));\n\ttext_dis_sq=min(text_dis_sq,asterisk_dis_sq(uv+asterisk_position));\n\ttext_dis_sq=min(text_dis_sq,zero_dis_sq(uv+zero_position));\n\n\tfor(int i=ZERO;i<4;i++){\n\t\ttext_dis_sq=min(text_dis_sq,p_dis_sq(uv+p_positions[i]));\n\t}\n\tfor(int i=ZERO;i<3;i++){\n\t\ttext_dis_sq=min(text_dis_sq,q_dis_sq(uv+q_positions[i]));\n\t}\n\n\ttext_dis=sign(text_dis_sq)*sqrt(abs(text_dis_sq));\n\n\tvec3 color = bg_col;\n\n\tcolor=vec3(mix(axis_col,color,smoothstep(0., border, axis_dis)));\n\tcolor=vec3(mix(line_col,color,smoothstep(0., border, line_dis)));\n\tcolor=vec3(mix(second_line_col,color,smoothstep(0., border, second_line_dis)));\n\tcolor=vec3(mix(curve_col,color,smoothstep(0., border, curve_dis)));\n\tcolor=vec3(mix(dot_col,color,smoothstep(0., border, dot_dis)));\n\tcolor=vec3(mix(text_col,color,smoothstep(-border/2., border/2., text_dis)));\n\n\tfragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}