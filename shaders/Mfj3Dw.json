{
    "Shader": {
        "info": {
            "date": "1704310372",
            "description": "raymarching sphere tutorial",
            "flags": 0,
            "hasliked": 0,
            "id": "Mfj3Dw",
            "likes": 0,
            "name": "raymarching_sphere",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "anmol",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0, 1, 6, 1);\n    //float displacement = sin(5.0 * p.x) * sin(5.0 * p.y) * sin(5.0 * p.z) * 0.25;\n\n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n    \n    //return sphereDist;\n    //return sphereDist + displacement;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float d0 = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd * d0;\n        float ds = GetDist(p);\n        d0 += ds;\n        \n        if(d0 > MAX_DIST || ds < SURF_DIST){\n            break;\n        }\n    \n    }\n    \n    return d0;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n    GetDist(p - e.xyy),\n    GetDist(p - e.yxy),\n    GetDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPosition = vec3(0, 5, 6);\n    lightPosition.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    lightPosition.y += sin(iTime)*3.;\n    vec3 l = normalize(lightPosition - p);\n    vec3 n = GetNormal(p);\n    \n    float diff = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p + n *  SURF_DIST * 4., l);\n    if(d < length(lightPosition - p)){\n        diff *= .1;\n    }\n    return diff;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy) /iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}