{
    "Shader": {
        "info": {
            "date": "1565800626",
            "description": "particle\nclick to draw particles\nleft/right/up/down to change direction\nspace to randomize direction\n\nfork of https://www.shadertoy.com/view/MdtGDX\n\nWith lots of help from Netgrind",
            "flags": 48,
            "hasliked": 0,
            "id": "ttjSW1",
            "likes": 23,
            "name": "Slime Molding",
            "published": 3,
            "tags": [
                "particles"
            ],
            "usePreview": 0,
            "username": "PsyPhi",
            "viewed": 1104
        },
        "renderpass": [
            {
                "code": "/*\n\tlots o' particles (Image)\n\t2016 stb\n\n\tDrawing from Buf B...\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tfragColor = abs(texture(iChannel0, uv)*2.-1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\tlots o' particles (Buf A)\n\t2016 stb\n\n\tThis shader updates the particles.\n\n\tNo attempt is made to preserve particles upon contact, so only a few will remain after a while :(\n*/\n\nconst float ParticleDensity = 1.; // 0.0-1.0\n\nfloat sensorLen = 0.025;\nfloat sensorAng = 0.5;\nfloat rotAng = 0.5;\n\nmat2 rotate(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nvec2 sense (vec2 _uv, vec2 _pDir)\n{\n\n    //float r = plot(uv,cPos.xy,size);   //Draws location of part\n\n    vec2 sensorL = _uv+(rotate(-sensorAng)*_pDir)*sensorLen; // location of sensor A\n    vec2 sensorC = _uv+_pDir*sensorLen;\n    vec2 sensorR = _uv+(rotate(sensorAng)*_pDir)*sensorLen;\n\n    float senseL = texture(iChannel1, sensorL).a;\n    float senseC = texture(iChannel1, sensorC).a;\n    float senseR = texture(iChannel1, sensorR).a;\n\n    if(senseC > senseL && senseC > senseR)\n    {\n\n    }\n\n    else if (senseC < senseL && senseC < senseR)\n    {\n      float randNum = texture(iChannel3, vec2(0.5,sin(iTime))).x; //add uv to the sin to get a better random\n      randNum = round(randNum)*2.-1.;\n      _pDir *= rotate(rotAng*randNum);\n      // _pDir = vec2(-0.5,-0.5);// for debug\n    }\n\n\n    else if(senseL < senseR)\n    {\n      _pDir *= rotate(-rotAng);\n     // _pDir = vec2(0.0,0.5);// for debug\n    }\n\n    else if(senseL > senseR)\n    {\n      _pDir *= rotate(rotAng);\n    //  _pDir = vec2(0.5,0.0);// for debug\n    }\n    \n    return _pDir;\n\n}\n\n\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n    vec3 MOD3 = vec3(443.8975, 397.2973, 491.1871);\n    vec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy;\n    vec2 px = 1. / res;\n    vec2 uv = fragCoord.xy / res;\n    \n    vec4 buf[9];\n    buf[0] = texture(iChannel0, uv);\n    buf[1] = texture(iChannel0, fract(uv-vec2(px.x, 0.)));\n    buf[2] = texture(iChannel0, fract(uv-vec2(-px.x, 0.)));\n    buf[3] = texture(iChannel0, fract(uv-vec2(0., px.y)));\n    buf[4] = texture(iChannel0, fract(uv-vec2(0., -px.y)));\n    buf[5] = texture(iChannel0, fract(uv-vec2(px.x, px.y)));\n    buf[6] = texture(iChannel0, fract(uv-vec2(-px.x, px.y)));\n    buf[7] = texture(iChannel0, fract(uv-vec2(px.x, -px.y)));\n    buf[8] = texture(iChannel0, fract(uv-vec2(-px.x, -px.y)));\n    \n    // this cell's particle direction & position, if any\n    vec2 pDir = buf[0].rg;\n    vec2 pPos = buf[0].ba;\n    \n    \n    // update this cell's particle position\n    pPos = mod(pPos+pDir, res);\n    \n    \n    // clear the current cell if its particle leaves it\n    if(floor(pPos)!=floor(fragCoord)) {\n        pDir = vec2(0.);\n        pPos = vec2(0.);\n    }\n    \n    // add up any incoming particles\n    float ct = 0.;\n    vec2 pDirAdd = vec2(0.);\n    vec2 pPosAdd = vec2(0.);\n    for(int i=1; i<9; i++) {\n        vec2 pPosI = buf[i].ba;\n        pPosI = mod(pPosI+buf[i].rg, res);\n        if(floor(pPosI)==floor(fragCoord)) {\n            pDirAdd += buf[i].rg;\n            pPosAdd += pPosI;\n            ct ++;\n        }\n    }\n    \n    // if particles were added up, average and transfer them to the current cell\n    if(ct>0.) {\n        pDir = normalize(pDirAdd / ct);\n        \n        \n        \n        \n        //pDir = mix(pDir, texture(iChannel1, uv).rg*2.-1., 0.1 );  //trail follow\n        \n        pDir = sense(uv,pDir); //direction follow\n        \n        \n        pPos = pPosAdd / ct;\n        \n        if(texture(iChannel2, vec2(32./256., .5)).r>.5){\n            pDir = vec2(\n                    hash12(mod(uv+iTime/100.-4., 100.)),\n            \t\thash12(mod(uv-iTime/100.-8., 100.))\n\t\t\t\t)-.5;\n        }\n        \n        if(texture(iChannel2, vec2(37./256., .5)).r>.5){\n            pDir = vec2(-1., 0.);\n        }\n        if(texture(iChannel2, vec2(39./256., .5)).r>.5){\n            pDir = vec2(1., 0.);\n        }\n        if(texture(iChannel2, vec2(38./256., .5)).r>.5){\n            pDir = vec2(0., 1.);\n        }\n        if(texture(iChannel2, vec2(40./256., .5)).r>.5){\n            pDir = vec2(0., -1.);\n        }\n    }\n    \n    // first frame particle setup\n    if(iFrame==0 || (iMouse.z >0. && distance(iMouse.xy, fragCoord)<20.) )\n        if(ParticleDensity>hash12(fragCoord/res)) {\n            vec2 randXY =\n                vec2(\n                    hash12(mod(uv+iTime/100.-4., 100.)),\n            \t\thash12(mod(uv-iTime/100.-8., 100.))\n\t\t\t\t);\n            \n            pDir = normalize(randXY-.5);\n            pPos = fragCoord;\n        }\n    \n    fragColor = vec4(pDir, pPos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\tlots o' particles (Buf B)\n\t2016 stb\n\n\tThis shader predraws the particles for the Image shader.\n*/\n\nconst float FadeAmt = 0.99; // 0.0-1.0\n\nvec3 hs(vec3 c, float s){\n    vec3 m=vec3(cos(s),s=sin(s)*.5774,-s);\n    return c*mat3(m+=(1.-m.x)/3.,m.zxy,m.yzx);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 p = vec3(1.5/iResolution.xy, 0.);\n    \n    vec4 pDot, pTrail;\n    vec2 pDir = texture(iChannel0, uv).rg;\n    \n    pDot = texture(iChannel0, uv)*.5+.5;\n    pTrail = texture(iChannel1, uv);\n    pTrail += texture(iChannel1, uv+p.xz);\n    pTrail += texture(iChannel1, uv-p.xz);\n    pTrail += texture(iChannel1, uv+p.zy);\n    pTrail += texture(iChannel1, uv-p.zy);\n    pTrail*=.2;\n    \n    // make this cell white if it has a nonzero vector length\n    if(length(pDir)>0.){\n       \tpTrail = pDot;\n    }\n    \n    \n    // trail effect\n    pTrail = mix(pDot, pTrail,FadeAmt);\n    //pTrail.rgb = hs(pTrail.rgb, -.1);\n    \n\tfragColor = max(vec4(0.), min(vec4(1.),pTrail));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}