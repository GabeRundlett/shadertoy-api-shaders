{
    "Shader": {
        "info": {
            "date": "1617481206",
            "description": "Now its an SDF too.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sSGWm",
            "likes": 5,
            "name": "Distance to Curved Tube",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "distance",
                "tube",
                "cubic",
                "curved"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "float sdCurvedTube(in vec3 p, in float bend, in float height, in float radius, in float thickness) {\n    vec2 pr = vec2(abs(p.y), length(p.xz) - radius);\n\n    float a = 4.0 * bend * bend;\n    float c = 2.0 - 4.0 * bend * pr.y;\n    float d = -2.0 * pr.x;\n\n    vec2 pq = vec2(c, d) / a;\n    float p2 = abs(pq.x);\n    float v1 = 1.5 / pq.x * pq.y;\n\n    if (pq.y * pq.y * 0.25 + pq.x * pq.x * pq.x / 27.0 > 0.0) {\n        float root, v2 = v1 * sqrt(3.0 / p2);\n        if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(v2 * -sign(pq.y)) / 3.0);\n        else root = sinh(asinh(v2) / 3.0);\n        float x = min(-2.0 * sqrt(p2 / 3.0) * root, height);\n        return length(pr - vec2(x, bend * x * x)) - thickness;\n    }\n\n    else {\n        float x = min(2.0 * sqrt(-pq.x / 3.0) * cos(acos(v1 * sqrt(-3.0 / pq.x)) / 3.0), height);\n        return length(pr - vec2(x, bend * x * x)) - thickness;\n    }\n}\n\nfloat mapScene(in vec3 p) {\n    return sdCurvedTube(p, 0.25 + 0.2 * cos(iTime), 2.0, 1.5 + 0.5 * sin(iTime), 0.1);\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 mouse = iMouse.z > 0.0 ? (iMouse.xy - center) / iResolution.y * 3.14 : vec2(0.0);\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 8.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Sky\n    fragColor = vec4(mix(vec3(0.25, 0.25, 1.0), vec3(1.0), 0.5 + 0.5 * rd.y), 1.0);\n\n    // Raymarch\n    float t = 0.0;\n    for (int i=0; i < 150; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            float diff = sqrt(max(0.0, dot(-rd, n)));\n            fragColor.rgb = vec3(diff);\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n\n    // Ground plane\n    if (rd.y != 0.0) {\n        float tPlane = -(2.0 + ro.y) / rd.y;\n        if (tPlane > 0.0 && (t < 20.0 ? tPlane < t : true)) {\n            vec3 iPlane = ro + rd * tPlane;\n            vec3 planeColor = vec3(1.0);\n\n            // Grid\n            planeColor = mix(planeColor, vec3(0.0, 0.0, 1.0), smoothstep(0.025, 0.0, abs(mod(iPlane.x + 0.25, 0.5) - 0.25)));\n            planeColor = mix(planeColor, vec3(0.0, 0.0, 1.0), smoothstep(0.025, 0.0, abs(mod(iPlane.z + 0.25, 0.5) - 0.25)));\n            planeColor = mix(planeColor, vec3(1.0, 0.0, 0.0), smoothstep(0.025, 0.0, abs(iPlane.x) - 0.01));\n            planeColor = mix(planeColor, vec3(1.0, 0.0, 0.0), smoothstep(0.025, 0.0, abs(iPlane.z) - 0.01));\n\n            planeColor -= 0.8 * exp(-mapScene(iPlane));\n            planeColor /= max(1.0, 0.2 * tPlane); // Fade (can hide a bit of aliasing too)\n\n            fragColor.rgb = mix(fragColor.rgb, planeColor, 0.6);\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}