{
    "Shader": {
        "info": {
            "date": "1690725134",
            "description": "A bit messy and unoptimised, inspired by the references at the top of this page:\nhttps://www.febucci.com/2018/08/easing-functions/",
            "flags": 0,
            "hasliked": 0,
            "id": "ctfcW4",
            "likes": 13,
            "name": "Spring Waves (desmos)",
            "published": 3,
            "tags": [
                "bounce",
                "function",
                "periodic",
                "spring",
                "easing",
                "cc0",
                "elastic",
                "desmos"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "// License: CC0\n\n#define pi 3.14159\n#define ss(a) smoothstep(-1./R.y, 1./R.y, .02 - length(u - a))\n\n// Spring easing function:\n// https://www.desmos.com/calculator/vluz5j0svo\n\n// Wobble both ways (green) \n// https://www.desmos.com/calculator/9atfimg1ox\n#define f(a,b,x) sign(cos(x)) \\\n              * (1. - exp(-(a) * abs(cos(x))) * cos((b) * abs(cos(x))))\n\n// Instant push -> wobble (red)\n// https://www.desmos.com/calculator/gbkax818fx\nfloat g(float a1, float b1, float a2, float b2, float x) {\n    x = mod(x, 2.);\n    float f1 = 1. - exp(-a1 * x) * cos(b1 * x); \n    float f2 = exp(-a2 * (x-1.)) * cos(b2 * (x-1.));\n    f2 = mix(1., f2, step(1., x));\n    return 1. - 2. * f1 * f2;\n}\n\n// Slow push -> wobble (blue)\n// https://www.desmos.com/calculator/rwsnoaj9by\n// a: oscillation strength,  a > 0\n// b: oscillation amount,    b = anything\n// n: Superellipse strength, n = 2, 4, 6, etc.\nfloat h(float a, float b, float n, float x) {\n    // Multiply by square wave to flip-flop sign of wave\n    float s = sign(mod(x, 4.) - 2.); \n    \n    // Make x periodic\n    x = mod(x, 2.);\n    \n    // Clamp x so mix(f,g,v) is a quarter superellipse for 1 < x < 2\n    float v = min(1., x);\n    \n    // Spring equation\n    float f = 1. - exp(-a * x) * cos(b * x);\n    \n    // Half superellipse equation (n = 2. is circle)\n    float g = pow(1. - pow(1.-x, n), 1./n); \n    // g = sqrt(1. - (1.-x) * (1.-x));\n    \n    // Mix spring into circle, then mix with an equation which\n    // is vertical at 0 so that the start/end gradients \n    // match at x = 0, 2, 4 etc.\n    // (sloppy and expensive)\n    float l = mix(mix(f, g, v), \n                  1. - exp(-7. * sqrt(x)), \n                  1. - pow(v, .1)); \n    \n    return l * s;    \n}\n      \nvoid mainImage( out vec4 O, in vec2 I )\n{\n    float t = iTime;\n    \n    vec2 R = iResolution.xy,\n         u = (I-.5*R)/R.y,\n         p = vec2(.5 * f(5., 10., pi/2. * (t + 1.)), .1),\n         q = vec2(.5 * g(12., 20., 6., 16., .5 * t), 0),\n         r = vec2(.5 * h(8., 22., 4., t), -.1);\n         \n    O = vec4(ss(q), ss(p), ss(r), 0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}