{
    "Shader": {
        "info": {
            "date": "1633657063",
            "description": "The effect of a scan",
            "flags": 0,
            "hasliked": 0,
            "id": "7stSRf",
            "likes": 3,
            "name": "Scanning pattern",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "lllcz",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "#define blue vec3(0.34, 0.78, 0.33)\n#define MOV(a,b,c,d,e) (vec2(a*cos(t)+b*cos(0.1*t)), c*sin(t)+d*cos(0.1*(t))))\n#define SMOOTH(r,R) 1.0 - smoothstep(0.0, 1.0, r)\n#define M_PI 3.1415926535897932384626433832795\nfloat _cross(vec2 uv, vec2 center, float radius){\n\n    vec2 d = uv - center;\n    //强制转换类型\n    int x = int(d.x);\n    int y = int(d.y);\n    float r = sqrt(dot(d,d));\n    if((r<radius)&&((x==y)||(x==-y)||(x==0)||(y==0)))\n    {\n       return 1.0;\n    }\n    return 0.0;\n}\n\n\nfloat movingLine(vec2 uv, vec2 c, float l){\n    //速度\n    float theta0 = 20.0*iTime;\n    \n    vec2 d = uv - c;\n    \n    float r = sqrt(dot(d,d));\n\n    if(r < l){\n    //计算到line(240)的距离确定线的宽度\n    \n        //颜色点坐标\n        vec2 p = l * vec2(cos(theta0 * M_PI/180.0), -sin(theta0 * M_PI/180.0));\n        //line颜色为设置颜色本身(l2 = 0)\n        float l2 = length(d - p*(length(d)/length(p)));\n        //d = normalize(d);\n        //度数转化\n        float theta = mod(180.0 * atan(d.y, d.x)/M_PI+theta0, 360.0);\n        float gradient = clamp(1.0 - theta/90.0, 0.0, 1.0);\n        return SMOOTH(l2, 1.0) + 0.5*gradient;\n    }\n    \n    return 0.0;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n\n    vec2 c = iResolution.xy/2.0;\n    \n    vec3 finalColor = vec3(_cross(uv, c, 240.0));\n\n\n    finalColor += movingLine(uv, c, 240.0) * blue;\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}