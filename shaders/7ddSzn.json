{
    "Shader": {
        "info": {
            "date": "1632590508",
            "description": "Fork of tater's shader: https://www.shadertoy.com/view/7sV3WD\n\nNot sure how to get rid of the -pi/pi line but apart from that, it looks okay",
            "flags": 0,
            "hasliked": 0,
            "id": "7ddSzn",
            "likes": 8,
            "name": "Polar Subdivision",
            "published": 3,
            "tags": [
                "2d",
                "circles",
                "polar",
                "subdivide"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "#define pi 3.1415926535\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat h11 (float a) {\n    return fract(sin(a * 12.9898) * 43758.5453123);\n}\n\n//iq palette\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n/*\nfloat getAngleLength(float a, float b) {\n    return min(1. - abs(a-b), abs(a-b));\n}\n*/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv.y += 0.04 * cos(iTime);\n    \n    // polar uv\n    vec2 puv = vec2(atan(uv.y, uv.x), length(uv));\n    vec3 col = vec3(0);\n    float t = mod(iTime * 1., 6000.);\n    float px = 1. / iResolution.y;\n    \n    vec2 aRange = vec2(-pi, pi);\n    vec2 lRange = vec2(0., 0.5);\n    \n    float aLength = 2. * pi;\n    float lLength = 0.5;\n        \n    float id = 0.;\n    vec2 diff;\n    float seed = floor(t / 6.);\n    float a;\n        \n    //PLAY WITH THESE VARIABLES :D\n    float minAngle = pi / 32.;\n    float minLength = 0.015;\n    \n    float iters = 5.;\n    float borderSize = 0.0;\n    float minIters = 1.;\n\n    // replace this with polar equations to get cool shape\n    float lengthDistort = 1.1 * puv.y;\n    //float angleDistort = puv.x;\n\n    for(float i = 0.; i < iters; i++) {   \n        float rand  = h21(vec2(i + id, seed));\n        float rand2 = h21(vec2(i - id, seed));\n        float rand3 = h21(vec2(i + 0.5 * id, seed));\n        \n        float aSplit  = rand  * aLength + aRange.x; // split angle below length split\n        float aSplit2 = rand2 * aLength + aRange.x; // split angle above length split\n        float lSplit  = rand3 * lLength + lRange.x; // split length\n        \n        aSplit  = clamp(aSplit,  aRange.x + minAngle,  aRange.y - minAngle);\n        aSplit2 = clamp(aSplit2, aRange.x + minAngle,  aRange.y - minAngle);\n        lSplit  = clamp(lSplit,  lRange.x + minLength, lRange.y - minLength);\n        \n        //if(h21(vec2(aSplit, lSplit)) > 0.9 && i+1. > minIters) break;\n\n        // diff is used to give unique id to each sector\n        diff = vec2(0);\n        \n        if(lengthDistort < lSplit){\n            if(puv.x + .5 * (1. + cos(aSplit2 + iTime)) < aSplit){\n                aRange = vec2(aRange.x, aSplit);\n                diff.x = aSplit;\n            }\n            else{\n                aRange = vec2(aSplit, aRange.y);\n                diff.x = -lSplit;\n            }\n            lRange = vec2(lRange.x, lSplit);\n            diff.y = -aSplit;\n        }\n        else{\n            if(puv.x + .5 * (1. + cos(aSplit + iTime)) < aSplit2){\n                aRange = vec2(aRange.x, aSplit2);\n                diff.x = aSplit;\n            }\n            else{\n                aRange = vec2(aSplit2, aRange.y);\n                diff.x = -lSplit;\n            }\n            lRange = vec2(lSplit, lRange.y);\n            diff.y = lSplit;\n        }\n\n        // + 10. ensures topleft, bottomright have different Ids\n        id = length(diff * 100. + 10.);  \n        \n        aLength = aRange.y - aRange.x;\n        lLength = lRange.y - lRange.x;\n    }\n    \n    float fade = 1.- abs(pow(cos(t * 2. * pi / 6.),10.));\n\n    a += step(puv.x, aRange.y) * step(lengthDistort, lRange.y) \n    * (1.-smoothstep(-10. * px, 100. * px,.5 * lRange.x + .5 * lRange.y-0.5 * fade));\n       \n    col = vec3(a);\n    vec3 e = vec3(0.5);\n    vec3 al = pal(id * 0.5, e * 1.1, e * 1.1, vec3(1,.7,.4), vec3(0,.15,.2));\n    // vec3 al = pal(id * 0.1, e * 1.2, e, e * 2.0, vec3(0, 0.33, 0.66));\n    col = a * al;\n    \n    fragColor = vec4(col, 1.);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}