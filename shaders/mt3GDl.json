{
    "Shader": {
        "info": {
            "date": "1683308865",
            "description": "CC0: Ancient pyramid at dawn\n WIP - Had the intention to expand more on this but stalled.\n Thought better to share it in the state its in than not.\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mt3GDl",
            "likes": 32,
            "name": "Ancient pyramid at dawn",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 426
        },
        "renderpass": [
            {
                "code": "// CC0: Ancient pyramid at dawn\n//  WIP - Had the intention to expand more on this but stalled.\n//  Thought better to share it in the state its in than not.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n#define ROTY(a)               \\\n  mat3(                       \\\n    +cos(a) , 0.0 , +sin(a) \\\n  , 0.0     , 1.0 , 0.0     \\\n  , -sin(a) , 0.0 , +cos(a) \\\n  )\n\n#define ROTZ(a)               \\\n  mat3(                       \\\n    +cos(a) , +sin(a) , 0.0   \\\n  , -sin(a) , +cos(a) , 0.0   \\\n  , 0.0     , 0.0     , 1.0   \\\n  )\n\n#define ROTX(a)               \\\n  mat3(                       \\\n    1.0 , 0.0     , 0.0       \\\n  , 0.0 , +cos(a) , +sin(a)   \\\n  , 0.0 , -sin(a) , +cos(a)   \\\n  )\n\nconst mat3 roty       = ROTY(radians(10.0));\nconst vec3 sunDir     = normalize(vec3(0.0, -0.01, 1.0))*roty;\nconst vec3 lightPos   = vec3(0.0, -60.0, -200.0)*roty;\nconst float hoff      = 0.725;\nconst vec3 sunColor   = HSV2RGB(vec3(hoff+0.0, 0.9, 0.0005));\nconst vec3 topColor   = HSV2RGB(vec3(hoff+0.0, 0.9, 0.0001));\nconst vec3 glowColor0 = HSV2RGB(vec3(hoff+0.0, 0.9, 0.0001));\nconst vec3 glowColor2 = HSV2RGB(vec3(hoff+0.3, 0.95, 0.001));\nconst vec3 diffColor  = HSV2RGB(vec3(hoff+0.0, 0.9, .25));\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nfloat rayPlane(vec3 ro, vec3 rd, vec4 dim) {\n  return -(dot(ro,dim.xyz)+dim.w)/dot(rd,dim.xyz);\n}\n\nvec2 planeCoord(vec3 p, vec3 c, vec3 up, vec4 dim) {\n  vec3 d = p - c;\n  vec3 xx = (cross(up,dim.xyz));\n  vec3 yy = (cross(xx,dim.xyz));\n  return vec2(dot(d,xx), dot(d,yy));\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat triIso(vec2 p, vec2 q) {\n  p.x = abs(p.x);\n  vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n  float s = -sign( q.y );\n  vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                vec2( dot(b,b), s*(p.y-q.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nvec2 rayBox(vec3 ro, vec3 rd, vec3 boxSize, out vec3 outNormal)  {\n  vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n  vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n  vec3 k = abs(m)*boxSize;\n  vec3 t1 = -n - k;\n  vec3 t2 = -n + k;\n  float tN = max( max( t1.x, t1.y ), t1.z );\n  float tF = min( min( t2.x, t2.y ), t2.z );\n  if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n  outNormal = (tN>0.0) ? step(vec3(tN),t1)  : // ro ouside the box\n                         step(t2,vec3(tF))  ;  // ro inside the box\n  outNormal *= -sign(rd);\n  return vec2( tN, tF );\n}\n\nvec3 sky(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  col += sunColor/(1.0+0.00001 - dot(sunDir, rd));\n  float hd = max(abs(rd.y+0.15), 0.00066);\n  col += 100.0*glowColor0/sqrt(hd);\n  col += glowColor2/(hd);\n  return col;\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nvec3 glow(vec3 ro, vec3 rd) {\n  vec3 bn;\n  vec3 bro = ro;\n  bro.y += -1000.0+70.0;\n  vec2 bi = rayBox(bro, rd, vec3(90.0, 1000.0, 90.0), bn);\n  float lightDist = distance(lightPos, ro);\n  vec3 lightDir   = normalize(lightPos-ro);\n  float g3        = 1.0+0.00001 - dot(lightDir, rd);\n  vec3 col = vec3(0.0);\n  col += 8.0*glowColor0/(g3);\n  vec3 rrd = rd*transpose(roty)*ROTX(0.027);\n  if (bi != vec2(-1.0)) {\n    float bdi = tanh_approx(0.00125*(bi.y-bi.x));\n    col += 1000.0*glowColor0*(bdi/max(rrd.y, 0.005));\n  }\n  \n  float sx = abs(rrd.x);\n  col += 20.0*glowColor0/(abs(mix(20.0*rrd.y*rrd.y, abs(rrd.y), tanh_approx(4.0*sx)))+2.0*sx*sx*sx+0.0001);\n  \n  return col;\n}\n\nvec3 side(vec3 col, vec3 ro, vec3 rd, vec3 nrd, float t, float nt, vec4 dim, vec3 c) {\n  vec3 n = dim.xyz;\n\n  vec3 p = ro + rd*t;\n  vec3 np = ro + nrd*t;\n\n  vec3 r = reflect(rd, n);\n  vec3 ldiff = p - lightPos;\n  vec3 ld = normalize(ldiff);\n  vec3 rcol0 = sky(p, r);\n  float dcol = max(dot(ld, n), 0.0);\n  dcol *= dcol;\n  float aa = distance(p, np);\n  vec2 pp = planeCoord(p, c, vec3(0.0, 1.0, 0.0), dim);\n  vec2 p0 = pp;\n  vec2 p1 = pp;\n  const vec2 tri =vec2(485, sqrt(3.0)*356.0);\n  float d0 = triIso(p0, tri);\n  float d1 = triIso(p1, 0.11*tri);\n  float d = d0;\n  vec3 bcol = col;\n  float hf = smoothstep(-600.0, -400.0, p.y);\n  vec3 pcol = 3.0*diffColor*dcol;  \n  pcol += rcol0;\n  pcol = mix(clamp(col, 0.0, 0.1), pcol, hf); \n  col = mix(col, pcol, smoothstep(aa, 0.0, d));\n  col += topColor/max(0.00005*(d1-1.), 0.000025)*hf;\n  return col;\n}\n\nvec3 pyramid(vec3 col, vec3 ro, vec3 rd, vec3 nrd) {\n  const mat3 rotx = ROTX(radians(-51.8));\n  const mat3 rr0  = rotx;\n  const mat3 rr1  = rr0*ROTY(PI/2.0);\n\n  const vec3 n0   = normalize(vec3(.0, 0.0, 1.0))*rr0;\n  const vec3 c0   = vec3(0.0);\n  const vec4 dim0 = vec4(n0, -dot(c0, n0));\n\n  const vec3 n1   = normalize(vec3(.0, 0.0, 1.0))*rr1;\n  const vec3 c1   = vec3(0.0);\n  const vec4 dim1 = vec4(n1, -dot(c1, n1));\n\n  float t0  = rayPlane(ro, rd , dim0);\n  float nt0 = rayPlane(ro, nrd, dim0);\n  float t1  = rayPlane(ro, rd , dim1);\n  float nt1 = rayPlane(ro, nrd, dim1);\n  if (t1 > 0.0 && nt1 > 0.0) {\n    col = side(col, ro, rd, nrd, t1, nt1, dim1, c1);\n  }\n  if (t0 > 0.0 && nt0 > 0.0) {\n    col = side(col, ro, rd, nrd, t0, nt0, dim0, c0);\n  }\n\n\n  return col;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  const float rdd = 3.0;\n  const float mm = 4.0;\n  vec2 np = p + 4.0/RESOLUTION.y;\n\n  vec3 rd   = normalize(-p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd  = normalize(-np.x*uu + np.y*vv + rdd*ww);\n  vec3 glowCol = glow(ro, rd);\n  \n  vec3 col = sky(ro, rd); \n  col = pyramid(col, ro, rd, nrd);\n  col += glowCol;  \n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  const vec3 ro = vec3(0.0, 0.0, -2700.0)*roty;\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = vec3(0.0,1.0,0.0);\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = (cross(ww, uu));\n  vec3 col = color(ww, uu, vv, ro, p);\n  col = aces_approx(col);\n  col = sRGB(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}