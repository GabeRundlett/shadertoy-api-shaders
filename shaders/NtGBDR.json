{
    "Shader": {
        "info": {
            "date": "1676482698",
            "description": "new fluid sim with a Godunov solver",
            "flags": 32,
            "hasliked": 0,
            "id": "NtGBDR",
            "likes": 3,
            "name": "Fluid sim mk2",
            "published": 3,
            "tags": [
                "simulation",
                "fluid"
            ],
            "usePreview": 0,
            "username": "thepinkpanzer",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "#define T(p) texture(iChannel0,(p))\n#define B(p) texture(iChannel1,(p))\n\nvec4 jet(float x) // from 0 to 1\n{\n    return pow(vec4(x*x*(1.-x)/0.148, pow(x*(1.-x)*4.,2.), x*(1.-x)*(1.-x)/0.148, 0), vec4(1.6));\n}\nvec4 twilight(float x) // from -1 to 1\n{\n    float s  = sign(x);\n    x *= s;\n    \n    float r  = mix(1., (s > 0. ? x*x : x*x*x*x*x), 0.8);\n    float b  = mix(1., (s < 0. ? x*x : x*x*x*x*x), 0.8);\n    float g  = mix(1., x*x*x*x, 0.95);\n    return vec4(r, g, b, 0);\n}\n\nvec4 recolor(float x)\n{\n    x = tanh(x);\n    return jet(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv  = fragCoord/iResolution.xy;\n    vec4 Q   = T(uv);\n    vec4 q   = Q/Q.r;\n    \n    float ek = 0.5*(q.g*q.g+q.b*q.b);\n    float t  = q.a-ek;\n    float s  = (GAMMA-1.)*t*pow(Q.r, -GAMMA);\n    \n    // ek  is kinetic energy per unit mass\n    // t   is thermal energy per unit mass\n    // s   is related to the entropy\n    // Q.r is density\n    \n    // Colour scheme: vec4(tanh(ek/t*10.));//\n    fragColor = tanh(normalize(recolor(sqrt(t)*0.4))*Q.r);//tanh(vec4(Q.r));//recolor(q.b*2.);\n    // Draw obstacles in black\n    fragColor*= (1.-B(uv).r);\n    //fragColor = tanh((int(fragCoord.x + fragCoord.y) % 2 == 0 ? Q : abs(Q))/vec4(1,10,1,1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(p) texture(iChannel0,(p)/iResolution.xy)\n#define Y(p) texture(iChannel1,(p)/iResolution.xy)\n#define PI 3.1415926535897932384626\n\nfloat P(vec4 Q)\n{\n    float ek = (dot(Q.gb, Q.gb))/(2.*Q.r);\n    float T  = Q.a-ek;\n    float P  = T*(GAMMA-1.);\n    return P;\n}\nvec4 Flux(vec4 Q)\n{\n    float P = P(Q);\n    return vec4(Q.g, (Q.g*Q.g/Q.r + P), Q.g*Q.b/Q.r, Q.g/Q.r*(Q.a + P));\n}\nvec4 Flux(vec4 QL, vec4 QR)\n{\n    float PL = P(QL);\n    float PR = P(QR);\n    float uL = QL.g/QL.r;\n    float uR = QR.g/QR.r;\n    float aL = sqrt(GAMMA*PL/QL.r);\n    float aR = sqrt(GAMMA*PR/QR.r);\n    \n    float z  = (GAMMA-1.)/(2.*GAMMA);\n    float Ps = pow(((aL + aR) - (GAMMA-1.)/2.*(uR - uL))/(aL/pow(PL, z) + aR/pow(PR, z)), 1./z);\n    \n    float qL = Ps > PL ? sqrt(1. + (GAMMA+1.)/(2.*GAMMA)*(Ps/PL - 1.)) : 1.;\n    float qR = Ps > PR ? sqrt(1. + (GAMMA+1.)/(2.*GAMMA)*(Ps/PR - 1.)) : 1.;\n    \n    float SL = uL - aL*qL;\n    float SR = uR + aR*qR;\n    float Ss = ((PR - PL) + QL.r*uL*(SL-uL) - QR.r*uR*(SR-uR))/(QL.r*(SL-uL)-QR.r*(SR-uR));\n    \n    vec4 QLs = QL.r*((SL-uL)/(SL-Ss))*vec4(1,Ss,QL.b/QL.r,QL.a/QL.r + (Ss-uL)*(Ss+PL/(QL.r*(SL-uL))));\n    vec4 QRs = QR.r*((SR-uR)/(SR-Ss))*vec4(1,Ss,QR.b/QR.r,QR.a/QR.r + (Ss-uR)*(Ss+PR/(QR.r*(SR-uR))));\n    \n    vec4 flux;\n    if (Ss > 0.)\n    {\n        flux = Flux(QL);\n        if (SL < 0.)\n        {\n            flux += SL*(QLs - QL);\n        }\n    }\n    else\n    {\n        flux = Flux(QR);\n        if (SR > 0.)\n        {\n            flux += SR*(QRs - QR);\n        }\n    }\n    return flux;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Getting the data\n    float x   = fragCoord.x;\n    float y   = fragCoord.y;\n    \n    vec4 Q00  = T(vec2(x , y ));\n    // Q:    Quantities (vec4 of conserved quantities)\n    // Q.r:  Mass density\n    // Q.gb: X- and Y-momentum.\n    // Q.a:  Total energy (kinetic + thermal)\n    \n    // Boring boundary condition stuff\n    #if   X_BOUNDARY == 0\n        float xp  = mod(fragCoord.x + 1.0 + iResolution.x, iResolution.x);\n        float xm  = mod(fragCoord.x - 1.0 + iResolution.x, iResolution.x);\n\n        vec4 Qp0  = T(vec2(xp, y ));\n        vec4 Qm0  = T(vec2(xm, y ));\n    #elif X_BOUNDARY == 1\n        float xp  = x + 1.;\n        float xm  = x - 1.;\n        \n        vec4 Qp0;\n        vec4 Qm0;\n        if (xp >= iResolution.x)\n        {\n            Qp0 = T(vec2(xm, y))*vec4(1,-1,1,1);\n        }\n        else\n        {\n            Qp0 = T(vec2(xp, y));\n        }\n        if (xm < 0.)\n        {\n            Qm0 = T(vec2(xp, y))*vec4(1,-1,1,1);\n        }\n        else\n        {\n            Qm0 = T(vec2(xm, y));\n        }\n    #elif X_BOUNDARY == 2\n        float xp  = x + 1.;\n        float xm  = x - 1.;\n        \n        vec4 Qp0;\n        vec4 Qm0;\n        if (xp >= iResolution.x)\n        {\n            Qp0 = T(vec2(xm, y))*vec4(1,-1,-1,1);\n        }\n        else\n        {\n            Qp0 = T(vec2(xp, y));\n        }\n        if (xm < 0.)\n        {\n            Qm0 = T(vec2(xm, y))*vec4(1,-1,-1,1);\n        }\n        else\n        {\n            Qm0 = T(vec2(xm, y));\n        }\n    #elif X_BOUNDARY == 3\n        float xp  = x + 1.;\n        float xm  = x - 1.;\n        \n        vec4 Qp0;\n        vec4 Qm0;\n        if (xp >= iResolution.x)\n        {\n            Qp0 = mix(T(vec2(xm, y)), Q00, 1.+ALPHA);\n        }\n        else\n        {\n            Qp0 = T(vec2(xp, y));\n        }\n        if (xm < 0.)\n        {\n            Qm0 = mix(T(vec2(xp, y)), Q00, 1.+ALPHA);\n        }\n        else\n        {\n            Qm0 = T(vec2(xm, y));\n        }\n    #endif\n    #if   Y_BOUNDARY == 0\n        float yp  = mod(fragCoord.y + 1.0 + iResolution.y, iResolution.y);\n        float ym  = mod(fragCoord.y - 1.0 + iResolution.y, iResolution.y);\n        \n        vec4 Q0p  = T(vec2(x , yp));\n        vec4 Q0m  = T(vec2(x , ym));\n    #elif Y_BOUNDARY == 1\n        float yp  = y + 1.;\n        float ym  = y - 1.;\n        \n        vec4 Q0p;\n        vec4 Q0m;\n        if (yp >= iResolution.y)\n        {\n            Q0p = T(vec2(x, ym))*vec4(1,1,-1,1);\n        }\n        else\n        {\n            Q0p = T(vec2(x, yp));\n        }\n        if (ym < 0.)\n        {\n            Q0m = T(vec2(x, yp))*vec4(1,1,-1,1);\n        }\n        else\n        {\n            Q0m = T(vec2(x, ym));\n        }\n    #elif Y_BOUNDARY == 2\n        float yp  = y + 1.;\n        float ym  = y - 1.;\n        \n        vec4 Q0p;\n        vec4 Q0m;\n        if (yp >= iResolution.y)\n        {\n            Q0p = T(vec2(x, ym))*vec4(1,-1,-1,1);\n        }\n        else\n        {\n            Q0p = T(vec2(x, yp));\n        }\n        if (ym < 0.)\n        {\n            Q0m = T(vec2(x, yp))*vec4(1,-1,-1,1);\n        }\n        else\n        {\n            Q0m = T(vec2(x, ym));\n        }\n    #elif Y_BOUNDARY == 3\n        float yp  = y + 1.;\n        float ym  = y - 1.;\n        \n        vec4 Q0p;\n        vec4 Q0m;\n        if (yp >= iResolution.y)\n        {\n            Q0p = mix(T(vec2(x, ym)), Q00, 1.+ALPHA);\n        }\n        else\n        {\n            Q0p = T(vec2(x, yp));\n        }\n        if (ym < 0.)\n        {\n            Q0m = mix(T(vec2(x, yp)), Q00, 1.+ALPHA);\n        }\n        else\n        {\n            Q0m = T(vec2(x, ym));\n        }\n    #endif\n    \n    // Calculating the fluxes\n    vec4 Q1 = Q00;\n    Q1 -= DT*(Flux(Q00, Qp0) + Flux(Q00.xzyw, Q0p.xzyw).xzyw\n            - Flux(Qm0, Q00) - Flux(Q0m.xzyw, Q00.xzyw).xzyw);\n    \n    // Diffusion\n    Q1     += D0*(Qp0 + Qm0 + Q0p + Q0m - 4.*Q00)*DT;\n    \n    // Obstacles\n    float q = 0.5*Y(fragCoord).r;\n    Q1 *= vec4(1,1.-q,1.-q,1);\n    \n    // Initial conditions\n    if (iFrame == 0)\n    {\n        if (cos(3.*3.14159265*(fragCoord.y+5.*sin(3.14159*fragCoord.x/iResolution.x*3.))/iResolution.y) > 0.)\n        {\n            Q1 = vec4(1, 4.4,0,10);\n        }\n        else\n        {\n            Q1 = vec4(1,-4.4,0,10);\n        }\n    }\n    fragColor = Q1;//Q00;//FluxQ(Q1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// here i will store the fundamental laws of the universe\n// DT:    Timestep\n// D0:    Diffusion coefficient (numerical dissipation)\n// GAMMA: Adiabatic constant for the gas (1.67=monatomic, 1.4=diatomic, 1.33=polyatomic)\n#define DT      0.04\n#define D0      0.0\n#define GAMMA   1.67\n\n// Boundary conditions\n// 0: Loop\n// 1: Smooth wall\n// 2: No-slip wall\n// 3: Open (linear)\n#define X_BOUNDARY 0\n#define Y_BOUNDARY 1\n\n// Alpha is just used by the OPEN boundary condition\n// Describes whether to be more linear or flat.\n#define ALPHA 0.95\n// Alpha=0 -> flat\n// Alpha=1 -> linear\n// Alpha>=1 will probably be unstable.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Obstacles\n    // Modelled as porous; gas can flow through somewhat (makes for a bit less stress on the system)\n    if (distance(fragCoord, iResolution.xy/2.) < 20.)\n    {\n        fragColor = vec4(0);\n    }\n    else\n    {\n        fragColor = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}