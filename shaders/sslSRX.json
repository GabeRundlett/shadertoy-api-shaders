{
    "Shader": {
        "info": {
            "date": "1618982135",
            "description": "Inspired by: [url=https://mathcurve.com/courbes2d/trochoid/trochoidacentre.shtml]https://mathcurve.com/courbes2d/trochoid/trochoidacentre.shtml[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "sslSRX",
            "likes": 14,
            "name": "Cyclic",
            "published": 3,
            "tags": [
                "math",
                "animation",
                "curve",
                "parametric",
                "gif",
                "trochoid",
                "cyclic"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "// Utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 4.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 2.0;\n    float unit = 4.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Offset\n    uv.y += 0.15;\n    mouse.y += 0.15;\n\n    // Settings modified by mouse\n    float ra = 2.0, rb = -3.0, rc = 2.0;\n    if (iMouse.z > 0.0) {\n        ra = round(mouse.x);\n        rb = round(mouse.y);\n    }\n\n    // Positions\n    vec2 v1 = vec2(-0.5, -sqrt(1.0 / 12.0));\n    vec2 v2 = vec2(0.5, v1.y);\n    vec2 v3 = vec2(0.0, -2.0 * v1.y);\n\n    drawSDF(sdDisc(uv, v1, 0.03), vec3(1.0, 0.0, 0.0));\n    drawSDF(sdDisc(uv, v2, 0.03), vec3(1.0, 0.0, 0.0));\n    drawSDF(sdDisc(uv, v3, 0.03), vec3(1.0, 0.0, 0.0));\n\n    // Rings\n    drawSDF(abs(sdDisc(uv, v1, 0.5)), vec3(0.0, 0.0, 1.0));\n    drawSDF(abs(sdDisc(uv, v2, 0.5)), vec3(0.0, 0.0, 1.0));\n    drawSDF(abs(sdDisc(uv, v3, 0.5)), vec3(0.0, 0.0, 1.0));\n\n    // Brute force parametric plot\n    float tStep = 0.1;\n    vec2 prev; bool init;\n    for (float t=0.0; t < 6.28 + tStep; t += tStep) {\n        float t1 = t * ra, t2 = t * rb, t3 = t * rc;\n\n        vec2 rp1 = vec2(cos(t1), sin(t1)) * 0.5 + v1;\n        vec2 rp2 = vec2(cos(t2), sin(t2)) * 0.5 + v2;\n        vec2 rp3 = vec2(cos(t3), sin(t3)) * 0.5 + v3;\n\n        vec2 cur = (rp1 + rp2 + rp3) / 3.0;\n        if (init) drawSDF(sdLine(uv, prev, cur), vec3(0.5, 0.0, 0.0));\n        init = true;\n\n        prev = cur;\n    }\n\n    // Rotating triangle corners\n    float t1 = iTime * ra;\n    vec2 r1 = vec2(cos(t1), sin(t1)) * 0.5 + v1;\n\n    float t2 = iTime * rb;\n    vec2 r2 = vec2(cos(t2), sin(t2)) * 0.5 + v2;\n\n    float t3 = iTime * rc;\n    vec2 r3 = vec2(cos(t3), sin(t3)) * 0.5 + v3;\n\n    drawSDF(sdDisc(uv, r1, 0.03), vec3(0.0));\n    drawSDF(sdDisc(uv, r2, 0.03), vec3(0.0));\n    drawSDF(sdDisc(uv, r3, 0.03), vec3(0.0));\n\n    // Triangle anatomy\n    drawSDF(sdLine(uv, r1, r2), vec3(0.0));\n    drawSDF(sdLine(uv, r2, r3), vec3(0.0));\n    drawSDF(sdLine(uv, r3, r1), vec3(0.0));\n\n    vec2 c = (r1 + r2 + r3) / 3.0;\n    drawSDF(sdDisc(uv, c, 0.03), vec3(0.0));\n\n    drawSDF(sdLine(uv, r1, c), vec3(0.0));\n    drawSDF(sdLine(uv, r2, c), vec3(0.0));\n    drawSDF(sdLine(uv, r3, c), vec3(0.0));\n\n    // Vignette (kinda)\n    uv *= 0.5;\n    float dd = dot(uv, uv);\n    color -= 0.5 * dd * dd;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}