{
    "Shader": {
        "info": {
            "date": "1504282841",
            "description": "failed to have good SSS between iterations :)",
            "flags": 0,
            "hasliked": 0,
            "id": "XsBczD",
            "likes": 2,
            "name": "Julia Tunnel",
            "published": 3,
            "tags": [
                "julia",
                "tunnel"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nvec2 path(float z)\n{\n\tfloat x = cos(z*.2) * 2.;\n    float y = sin(z*.2) * 2.;\n   \treturn vec2(x,y);\n}\n\nfloat fractusDiff(vec3 p, vec2 v)\n{\n    float pz = p.z * .9;\n    float lim = floor(1. + (sin(pz)*.5+.5)*5.);\n   \tvec2 z = p.xy;\n    vec2 c = v;\n\tfloat h=1.,k=h,lk=h, lh=h;\n    for (float i=0.;i<10.;i++)\n    {\n        h *= 4.*k;\n\t\tk = dot(z,z);\n        if(k > 4.) break;\n        if (i>lim) break;\n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n        lk = k, lh = h;\n    }\n    h = mix(lh, h, fract(pz)); \n    k = mix(lk, k, fract(pz)); \n\treturn sqrt(k/h)*log(k);   \n}\n\nfloat df(vec3 p)\n{\n\tp.xy -= path(p.z);\n\tp *= RotZ(p.z * 0.1);\n    float ftus = fractusDiff(p, vec2(-0.3,-0.649));\n    return max(0.2-length(p.xy),-ftus);\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    df(pos+eps.xyy) - df(pos-eps.xyy),\n\t    df(pos+eps.yxy) - df(pos-eps.yxy),\n\t    df(pos+eps.yyx) - df(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float prec, float ms) \n{\n\tvec3 n;\n\tfloat s = 0.;\n    const int iter = 10;\n\tfor (int i=0;i<iter;i++)\n\t{\n\t\tn = nor(surfPoint,prec); \n\t\tsurfPoint = surfPoint - n * ms; \n\t\ts += df(surfPoint);\n\t}\n\t\n\treturn 1.-s/(ms*float(iter)); // s < 0. => inside df\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,s); \t\t\t\t\t\t\t// precise normale at surf point\n\treturn df(p - n * s);\t\t\t\t\t\t// ratio between df step and constant step\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime + 50.;\n    vec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si)/si.y;\n\tvec3 ro = vec3(0,0.1, t * 2.); \n\tvec3 cv = ro + vec3(0,0,4); \n    ro.xy += path(ro.z);\n    //cv.xy -= path(cv.z);\n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n  \tvec3 rd = normalize(uv.x * x + uv.y * y + z);\n\n\tfloat s = 1., d = 0.5;\n\tfor (int i=0; i<120; i++) // 30 iterations yeah :)\n\t{\n\t\tif (log(d/s/1e6)>0.) break; // due to this special break condition\n\t\td += s = df(ro+rd*d);\n\t}\n\t\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tvec3 ld = normalize(ro-p); \t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, 0.001);\t\t\t\t\t\t\t\t\t\t\t// normal at surface point\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\t\t// specular\n\tvec3 col = vec3(.8,.5,.2);\n    \n    // here the magix happens\n\tfloat sss = clamp(df(p - n*0.001)/0.01, 0., 1.);\t\t\t\t\t\t\t\t// quick sss 0.001 of subsurface\n\t\n\tfloat sb = SubDensity(p, 0.01, 0.1);\t\t\t\t\t\t\t// deep subdensity from 0.01 to 0.1 (10 iterations)\n\tvec3 bb = blackbody(200. * sb);\t\t\t\t\t\t\t\t\t// blackbody color\n\tfloat sss2 = 0.8 - SubDensity(p, 3.); \t\t\t\t\t\t\t// one step sub density of df of 3 of subsurface\n\t\n\tvec3 a = (diff + fre + bb * sss2 * .8 + col * sss * .2) * 0.35 + spe; // near\n    vec3 b = col * sss;\n  \t//vec3 a = (diff + fre + texture(iChannel1, refl).rgb) * 0.35 + spe; // near\n    //vec3 b = col * sss;\n    \n\t//fragColor.rgb = mix(vec3(1), vec3(0), .8-exp(-0.1*d*d));\n    fragColor.rgb = mix(a, b, .8-exp(-0.1*d*d));\n    \n    fragColor = sqrt(fragColor*fragColor*fragColor*0.6);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}