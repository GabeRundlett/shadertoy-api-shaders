{
    "Shader": {
        "info": {
            "date": "1511824988",
            "description": "this is a under-sea view inspired by iq's volcanic, most techniques and functions are adapted from iq's volcanic demo.",
            "flags": 1,
            "hasliked": 0,
            "id": "MtXfWn",
            "likes": 6,
            "name": "Seashape",
            "published": 3,
            "tags": [
                "sea"
            ],
            "usePreview": 0,
            "username": "qq456cvb",
            "viewed": 864
        },
        "renderpass": [
            {
                "code": "const int NUM_STEPS = 256;\nconst float EPSILON = 1e-3;\nconst float PI = 3.1414926;\nconst float time_scale = 1.0;\n\n\nvec3 lig = normalize( vec3(-0.3,0.4,0.7) );\nfloat light_pow = 0.2;\nvec3 sea_col = vec3(0.0, 0.2, 0.5);\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\n// iq's gradient based perlin-noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z);\n\tvec2 rg1 = textureLod( iChannel0, (uv+ vec2(0.5,0.5))/256.0, 0. ).yx;\n\tvec2 rg2 = textureLod( iChannel0, (uv+ vec2(1.5,0.5))/256.0, 0. ).yx;\n\tvec2 rg3 = textureLod( iChannel0, (uv+ vec2(0.5,1.5))/256.0, 0. ).yx;\n\tvec2 rg4 = textureLod( iChannel0, (uv+ vec2(1.5,1.5))/256.0, 0. ).yx;\n\tvec2 rg = mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y );\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n// return value noise (in x) and its derivatives (in yzw)\nvec4 noised( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n#if 0\n    // quintic interpolation\n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n#else\n    // cubic interpolation\n    vec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n#endif    \n    \n    \n    float a = noise(p+vec3(0.0,0.0,0.0));\n    float b = noise(p+vec3(1.0,0.0,0.0));\n    float c = noise(p+vec3(0.0,1.0,0.0));\n    float d = noise(p+vec3(1.0,1.0,0.0));\n    float e = noise(p+vec3(0.0,0.0,1.0));\n\tfloat f = noise(p+vec3(1.0,0.0,1.0));\n    float g = noise(p+vec3(0.0,1.0,1.0));\n    float h = noise(p+vec3(1.0,1.0,1.0));\n\t\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, \n                 du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                            k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                            k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\tvec2 uv = p.xy + f.xy*f.xy*(3.0-2.0*f.xy);\n\treturn textureLod( iChannel0, (uv+118.4)/256.0, 0. ).x;\n}\n\nvec3 noise3d(in vec3 x)\n{\n    return texture(iChannel1, x / 32.0).xyz;\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nfloat displacement( vec3 p )\n{\n# if 0\n    float f = 1.98;  // could be 2.0\n    float s = 0.49;  // could be 0.5\n    float disp = 0.0;\n    float base = 0.5;\n    vec3  d = vec3(0.0);\n    int octaves = 5;\n    \n    p /= 3.0;\n    // prewarp\n    float a = 2.3, b = 1.264, c = 3.952;\n    vec4 n1 = noised(a * p);\n    vec4 n2 = noised(b * p);\n    vec4 n3 = noised(c * p);\n    p = vec3(n1.x, n2.x, n3.x);\n    //p = vec3(noise(2.3 * p + vec3(1.0, 0.0, 0.0)), \n    //         noise(1.264 * p + vec3(0.0, 1.0, 0.0)), \n    //         noise(3.952 * p + vec3(0.0, 0.0, 1.0)));\n    for( int i=0; i < octaves; i++ )\n    {\n        vec4 n = noised(p);\n        disp += base*n.x;          // accumulate values\t\t\n        d += b*n.yzw;      // accumulate derivatives\n        base *= s;\n        p = f*p;\n       // m = f*m3i*m;\n    }\n    vec3 dd = d;\n    d.x = dot(dd, vec3(n1.y, n2.y, n3.y) * a);\n    d.y = dot(dd, vec3(n1.z, n2.z, n3.z) * b);\n    d.z = dot(dd, vec3(n1.w, n2.w, n3.w) * c);\n    d /= 3.0;\n    return vec4( disp, d );\n# else\n\tp += vec3(1.0,0.0,0.8);\n    //p /= 3.0;\n    // prewarp\n    p = noise3d(p);\n\t\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p ); \n\t\n\tfloat n = noise( p*3.5 );\n    f += 0.03*n*n;\n\t\n    return f;\n# endif\n}\n\nfloat flatNoise( vec3 p ) {\n    p *= vec3(4.5, 3.0, 1.78);\n    float f;\n    f  = 0.5000*noise( p.xz ); p = m*p*2.02;\n    f += 0.2500*noise( p.xz ); p = m*p*2.03;\n    f += 0.1250*noise( p.xz ); p = m*p*2.01;\n    f += 0.0625*noise( p.xz );\n    \n    float freq = 0.5;\n    return smoothstep(freq + 0.08, freq + 0.1, f);\n}\n\nfloat density( in vec3 pos )\n{\n    float base = pos.y*0.1;\n    //vec4 disp = displacement(pos*vec3(0.8,1.0,0.8)) - 0.4;\n    //disp.yzw *= vec3(0.8,1.0,0.8);\n    //base += disp.x;\n    base += (displacement(pos*vec3(0.8,1.0,0.8)) - 0.4)*(1.0-smoothstep(0.0,3.0,pos.y));\n    //base = mix(base, pos.y - 0.5, flatNoise(pos));\n\treturn base;\n}\n\nfloat raymarchTerrain( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 30.0;\n    float t = 0.1;\n    for( int i=0; i<160; i++ )\n    {\n\t    float h = density( ro+rd*t );\n        if( h<(0.001*t) || t>maxd ) break;\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos, in float t )\n{\n    vec3 eps = vec3( max(0.004,0.003*t),0.0,0.0);\n\treturn normalize( vec3(\n           density(pos+eps.xyy) - density(pos-eps.xyy),\n           density(pos+eps.yxy) - density(pos-eps.yxy),\n           density(pos+eps.yyx) - density(pos-eps.yyx) ) );\n\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<48; i++ )\n    {\n        float h = density(ro + rd*t);\n\t\th = max( h, 0.0 );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.5 );\n\t\tif( h<0.0001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec3 path( float time )\n{\n\treturn vec3( 16.0*cos(0.2+0.5*0.1*time*1.5), 1.5, 16.0*sin(0.1+0.5*0.11*time*1.5) );\n\t\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid moveCamera( float time, out vec3 oRo, out vec3 oTa, out float oCr, out float oFl )\n{\n\tvec3 ro = path( time+0.0 );\n\tvec3 ta = path( time+1.6 );\n\tta.y *= 0.65 + 0.25*sin(0.09*time);\n\tfloat cr = 0.3*sin(1.0+0.07*time);\n    oRo = ro;\n    oTa = ta;\n    oCr = cr;\n    oFl = 2.1;\n}\n\n\nvec2 gradLight(vec2 uv, float time) {\n    vec2 eps = vec2(0.004, 0.0);\n    vec3 ro, ta; float cr, fl;\n    moveCamera( time, ro, ta, cr, fl );\n    \n\t// camera2world transform\n    mat3 cam = setCamera( ro, ta, cr );\n\n    //uv = uv * uv;\n    //uv /= length(uv);\n    // ray    \n    //uv -= 1.5;\n    float d1, d2, d3;\n    vec3 rd = cam * normalize(vec3(uv,fl));\n    d1 = clamp(dot(rd, lig), 0.0, 1.0);\n    vec3 rd_u = cam * normalize(vec3(uv + eps.xy,fl));\n    d2 = clamp(dot(rd_u, lig), 0.0, 1.0);\n    vec3 rd_v = cam * normalize(vec3(uv + eps.yx,fl));\n    d3 = clamp(dot(rd_v, lig), 0.0, 1.0);\n    //eps.x = 0.01;\n    //eps.y = 0.02;\n    vec2 grad = vec2(d2 - d1, d3 - d1) / eps.xx;\n    return grad;\n}\n\nvec3 render (vec3 ro, vec3 rd, vec2 grad_lig) {\n    vec3 col, bg;\n    bg = sea_col + rd.y * 0.5;\n    float eye2sun = dot(rd,lig);\n    float sun = clamp(eye2sun , 0.0, 1.0 );\n\tbg += vec3(1.0,0.8,0.4)*light_pow*pow( sun, 6.0 );\n    // light through the sea\n    float l1 = 0.3 * pow( sun, 26.0 ) \n        * smoothstep(0.0, 1.0, noise(vec2(atan(grad_lig.y, grad_lig.x)) * 25.0))\n        * pow(5.0 * length(grad_lig), 0.8);\n    float l2 = 0.3 * pow( sun, 22.0 ) \n        * smoothstep(0.0, 1.0, noise(vec2(atan(grad_lig.y, grad_lig.x)) * 18.0))\n        * pow(5.0 * length(grad_lig), 0.5);\n    bg += mix(vec3(l1), vec3(l2), 0.5 + 0.5 * sin(iTime * time_scale));\n    if (eye2sun > 0.999) bg = mix(sea_col, vec3(1.0, 1.0, 1.0), 0.8);\n    col = bg;\n    \n    vec3 pos, norm;\n    float t = raymarchTerrain(ro, rd);\n    if (t > 0.0) {\n        vec3 light = vec3(0.0);\n        pos = ro + t * rd;\n        norm = calcNormal(pos, t);\n        \n        float ang2lig = clamp(dot(lig, norm), 0.0, 1.0);\n        float occ = pow( (1.0-displacement(pos*vec3(0.8,1.0,0.8)) )*1.6-0.5, 2.0 );\n        float sha = 0.0; if( ang2lig>0.01) sha=softshadow(pos,lig,0.01,32.0);\n        float ref_approx = clamp( dot( norm, normalize(lig*vec3(-1.0,0.0,-1.0)) ), 0.0, 1.0 );\n        vec3 material = texcube( iChannel2, 0.5*pos, norm ).xyz;\n        material = mix(vec3(0.8, 0.7, 0.5), material, smoothstep( 0.0, 0.8, norm.y ));\n        material *= texcube( iChannel3, 0.15*pos + vec3(3.12, 0.56, 2.50), norm ).xyz;\n        vec3 yellow = vec3(1.0, 0.85, 0.2);\n        yellow *= texcube( iChannel3, 0.6*pos, norm ).xyz;\n        material = mix(material, yellow, (1.0 - smoothstep(0.1, 0.2, pos.y + 0.6 )) * flatNoise(pos)); \n        \n        \n        float vv = smoothstep( 0.0, 0.8, norm.y )*smoothstep(0.0, 0.1, pos.y );\n\t\tvec3 verde = vec3(0.2,0.45,0.1);\n\t\tverde *= texture( iChannel2, 30.0*pos.xz ).xyz;\n\t\tverde += 0.2*texture( iChannel2, 1.0*pos.xz ).xyz;\n\t\tvv *= smoothstep( 0.0, 0.5, texture( iChannel2, 0.1*pos.xz + 0.01*norm.x ).x );\n        material = mix(material, verde, vv);\n        \n        light += ang2lig*vec3(1.50,1.27,0.99)*light_pow*pow(vec3(sha),vec3(1.5,1.2,1.0));\n\t\tlight += ref_approx*vec3(0.20,0.28,0.40)*light_pow*occ;\n        col = material * light;\n        \n        float absorb = 1.0 - pow(smoothstep(-0.5, 1.0, pos.y), 2.0);\n        col = col * exp(-absorb * 3.0);\n        //col = norm;\n    }\n    \n    col = mix( col, bg, 1.0-exp(-0.00006*t*t*t) );\n    col = pow(col, vec3(1.0/2.2));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    //uv.y -= 0.3;\n    uv.x *= iResolution.x / iResolution.y;\n    \n\n    float time = iTime * time_scale + 3.4;\n    vec3 ro, ta; float cr, fl;\n    moveCamera( time, ro, ta, cr, fl );\n    \n\t// camera2world transform\n    mat3 cam = setCamera( ro, ta, cr );\n    mat3 camT = transpose(cam);\n    vec3 target = camT * lig;\n    vec2 uv_sun = (target * fl / target.z).xy;\n\n    // ray    \n    vec3 rd = cam * normalize(vec3(uv,fl));\n\n    vec2 grad_lig = uv - uv_sun;\n    \n    fragColor = vec4(render(ro, rd, grad_lig), 1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n\tfloat time = 1.0*iTime;\n\n    vec3 ro, ta; float cr, fl;\n    moveCamera( time, ro, ta, cr, fl );\n\n    mat3 cam = setCamera( ro, ta, cr );\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    mat3 camT = transpose(cam);\n    vec3 target = camT * lig;\n    vec2 uv_sun = (target * fl / target.z).xy;\n    vec2 grad_lig = uv - uv_sun;\n\n    vec3 col = render( ro + cam*fragRayOri, cam*fragRayDir, grad_lig );\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}