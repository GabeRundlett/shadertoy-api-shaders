{
    "Shader": {
        "info": {
            "date": "1640712857",
            "description": "Using a Hilbert curve to encode color as a single floating-point number. Use the mouse to change the background color!",
            "flags": 0,
            "hasliked": 0,
            "id": "ftVSWD",
            "likes": 10,
            "name": "Hilbert Color Space",
            "published": 3,
            "tags": [
                "hilbertcurve"
            ],
            "usePreview": 0,
            "username": "sed4906",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "// 2024-09-01 update: Color order changed to RGB (from BGR).\n// 2024-08-29 update: Simpler and more accurate color decoding.\n// Creative Commons CC0 1.0 Universal License.\n\n// Lookup table of Gray Codes\n// (reperesented as a vector,\n// with least significant bit\n// in the x coordinate)\nconst vec3 offsets[8] = vec3[8](\nvec3(0,0,0), // 000\nvec3(1,0,0), // 001\nvec3(1,1,0), // 011\nvec3(0,1,0), // 010\nvec3(0,1,1), // 110\nvec3(1,1,1), // 111\nvec3(1,0,1), // 101\nvec3(0,0,1)  // 100\n);\n\n// See: https://www.math.uwaterloo.ca/~wgilbert/Research/HilbertCurve/HilbertCurve.html\n// for details on how and why this works.\nvec3 HilbertColor(float c) {\n    vec3 coord = vec3(0);\n    \n    float gray = c;\n    int iters = 1;\n    while (gray != 0.0) {\n        int index = min(int(gray * 8.0),7);\n        coord += offsets[index] / float(1 << iters);\n        iters++;\n        gray = fract(gray * 8.0);\n    }\n    \n    return coord;\n}\n\nfloat clicked = 0.0;\n\n// Some specific colors:\n// 0: Black\n// 1/7: Red\n// 17/63: Orange\n// 2/7: Yellow\n// 3/7: Green\n// 4/7: Cyan\n// 5/8: Gray\n// 5/7: White\n// 6/7: Magenta\n// (a little under) 1: Blue\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    clicked = iMouse.x/iResolution.x;\n    \n    // Output to screen\n    if(uv.y >= 0.4 && uv.y <= 0.6) {\n        fragColor = vec4(HilbertColor(uv.x),1.0);\n        \n    } else {\n        if(abs(uv.x - clicked) < 0.5 * (abs(uv.y - 0.5) - 0.1) && abs(uv.y - 0.5) < 0.125) {\n            fragColor = vec4(HilbertColor(-uv.x),1.0);\n        } else {\n            fragColor = vec4(HilbertColor(clicked),1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}