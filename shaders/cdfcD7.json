{
    "Shader": {
        "info": {
            "date": "1686848231",
            "description": "# COPY FROM https://www.shadertoy.com/view/fdtyDH\n\nA simple showcase how the dot product works. Grey/White line color and leght show the dot product result from the red and blue vector. If the white line becomes green the value is negative",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfcD7",
            "likes": 2,
            "name": "Dot Product Visualization",
            "published": 3,
            "tags": [
                "dot"
            ],
            "usePreview": 0,
            "username": "ferrazrx",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "// COPY FROM https://www.shadertoy.com/view/fdtyDH\n\n// https://www.shadertoy.com/view/tsj3Rd\nfloat sdLine(in vec2 p,in vec2 a,in vec2 b)\n{\n    // Find vectors pa and ba:\n    vec2 pa = p-a, ba = b-a;\n    // Compute the dot product of vectors and divide to get the ratio\n    // Clamp the ratio between 0.0 and 1.0\n\tfloat h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    // Return the distance from the given point to the nearest point on line ab\n    return length(pa - ba*h);\n}\n#define UNIT                      (  4.0 / iResolution.y  )\n#define SMAA(d)                   ( smoothstep(UNIT, 0., d) )\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y * 2.0;\n    vec2 mousePosOld = abs(iMouse.zw) / iResolution.y * 2.0;\n    vec2 mousePosCur = iMouse.xy / iResolution.y * 2.0;\n\n    float gradient = sin(uv.x * 0.8) * sin(uv.y * 1.57);\n    gradient = pow(gradient, 0.1);\n    vec3 outputCol = vec3(0.2, 0.2, 0.2) * gradient;\n\n\n    vec2 ro1 = vec2(1.6, 1.0);\n    vec2 rd1 = vec2(1.0, 0.0);\n    \n    vec2 ro2 = ro1;\n    vec2 rd2 = normalize(mousePosCur - ro2);\n    \n    float Drd1rd2 = dot(rd1, rd2);\n    \n    vec2 ro3 = ro1 + rd1 * Drd1rd2;\n    vec2 rd3 = normalize((ro2 + rd2) - ro3);\n    float rd3l = length((ro2 + rd2) - ro3);\n    \n    float lineSide = -sign(dot(vec2(0.0, 1.0), rd2));   \n    \n    vec2 ro4 = ro1 + vec2(0.0, 0.1) * lineSide;\n    vec2 rd4 = rd1 * Drd1rd2;\n    vec3 r4c = abs(Drd1rd2) * vec3(sign(Drd1rd2), 1.0, sign(Drd1rd2));\n\n    \n    float line1 = sdLine(uv, ro1, ro1 + rd1);\n    outputCol = mix(outputCol, vec3(0.1, 0.1, 0.9), SMAA(line1));\n    \n    float line2 = sdLine(uv, ro2, ro2 + rd2);\n    outputCol = mix(outputCol, vec3(1.0, 0.1, 0.1), SMAA(line2));\n    \n    float line3 = sdLine(uv, ro3, ro3 + rd3 * rd3l);\n    outputCol = mix(outputCol, vec3(0.1, 0.9, 0.1), SMAA(line3));\n\n    float line4 = sdLine(uv, ro4, ro4 + rd4);\n    outputCol = mix(outputCol, r4c, SMAA(line4));\n\n    // Output to screen\n    fragColor = vec4(outputCol,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}