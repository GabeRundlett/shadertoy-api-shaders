{
    "Shader": {
        "info": {
            "date": "1665346007",
            "description": "por xor y modificado por jorge\nHere's a quick volumetric cloud renderer.",
            "flags": 0,
            "hasliked": 0,
            "id": "slGfW3",
            "likes": 12,
            "name": "Fork Nimbostrat",
            "published": 3,
            "tags": [
                "volume",
                "clouds",
                "light",
                "sky"
            ],
            "usePreview": 1,
            "username": "jorge2017a2",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n//Xor---https://www.shadertoy.com/view/XlfyD7\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n///---------------\nfloat Speed = .03;\nvec3 Light = vec3(.6,.2,.8);\n    \nfloat Map(vec3 Position)\n{\n    vec3 P = (Position*0.5+texture(iChannel0,Position*2.+iTime*Speed*.2).xyz*.02);\n    \n    float C = texture(iChannel0,P).r;\n    C *= texture(iChannel0,P*vec3(.5,1,.5)).g;\n    C = C*.9+.1*pow(texture(iChannel0,P*5.1).a,2.);\n    return max((C-.3)*sqrt((Position.z-.1)/.3),0.)/.5;\n}\n\nvec3 NubesXor(in vec2 Coord, float pz)\n{\n    vec4 Color;\n    vec3 R = vec3((Coord-.5*iResolution.xy)/iResolution.y,1.0);\n    vec3 P = vec3(0.+sin(iTime*0.5),iTime*Speed,pz);\n    \n    vec4 C = vec4(0);\n    for(float I = .2;I<.5;I+=.01)\n    {\n        float M1 = Map(P+R*I);\n        float M2 = Map(P+R*I+Light*.01);\n        C += vec4((.6+vec3(.6,.5,.4)*(exp(-M2*10.)-M1)),1)*M1*(1.-C.a);\n        if (C.a>.99) break;\n    }\n\tColor = C+vec4(vec3(.5,.7,.9)-R.y*.4,1)*(1.-C.a);\n    return Color.xyz;\n}\n///--------------\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\nvec3 Nave01(vec2 p, vec3 colOut)\n{   vec2 p0=p;\n    float d1= sdBox(p, vec2(0.1,1.0) );\n    float d2= sdCircle(p, 0.5 );\n    p.y=abs(p.y)-1.0;\n    float d3= sdBox(p, vec2(1.0,0.1) );\n    vec3 col= DrawFigBorde(vec3(1.0,0.0,0.0),colOut,d1);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0),col,d2);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0),col,d3);\n    return col;\n}\n\nvec3 Nave02(vec2 p, vec3 colOut)\n{   vec2 p0=p;\n    p.x=abs(p.x)-1.0;\n    float d3= sdBox(p, vec2(0.1,1.0) );\n    p=p0;\n    float d2= sdCircle(p, 0.5 );\n    float d1= sdBox(p, vec2(1.0,0.1) );\n    vec3 col= DrawFigBorde(vec3(1.0,0.0,0.0),colOut,d1);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0),col,d2);\n    col= DrawFigBorde(vec3(1.0,0.0,0.0),col,d3);\n    return col;\n}\n\nvec3 lineat(vec2 p, vec3 colOut)\n{   vec2 p0=p;\n    p.x=mod(p.x+0.5,2.0);\n    float d1= sdBox(p, vec2(1.0,0.1) );\n    p=p0;\n    p.y=mod(p.y+0.5,2.0);\n    float d2= sdBox(p, vec2(0.1,1.0) );    \n    vec3 col= DrawFigBorde(vec3(0.0,0.0,0.0),colOut,d1);\n    col= DrawFigBorde(vec3(0.0,0.0,0.0),col,d2);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=8.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0);\n    float t=iTime;\n    col=NubesXor(fragCoord,1.0+ 1.0*sin(t*0.05));\n    col=lineat(uv-vec2(0.0+sin(t*0.5),1.0+2.0*sin(t)), col);\n    col= Nave01(uv-vec2(0.0,4.0),col);\n    col= Nave02(uv-vec2(3.0,2.0),col);\n    col= Nave02(uv-vec2(-3.0,2.0),col);\n    //col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}