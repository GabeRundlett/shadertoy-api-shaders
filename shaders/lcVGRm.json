{
    "Shader": {
        "info": {
            "date": "1712575102",
            "description": "Menger ring based space station",
            "flags": 0,
            "hasliked": 0,
            "id": "lcVGRm",
            "likes": 21,
            "name": "Fractal Spaceport",
            "published": 3,
            "tags": [
                "fractal",
                "space",
                "menger",
                "satellite"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// \"Fractal Spaceport\" by dr2 - 2024\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// Menger ring based space station\n\n// (Bits from \"Space Elevator\", \"Suborbital Flight\", \"Menger Ring\".)\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Maxv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nfloat tCur, dstFar;\nint nFrame, idObj;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, b;\n  float dMin, d, r, a, rt, objSzFac, nIt, mSclFac;\n  objSzFac = 1./5.;\n  nIt = 3.;\n  mSclFac = 2.2;\n  dMin = dstFar / objSzFac;\n  p /= objSzFac;\n  p.xy = Rot2D (p.xy, -0.2 * pi);\n  p.xz = Rot2D (p.xz, 0.05 * pi * tCur);\n  b = (mSclFac - 1.) * vec3 (1., 1.125, 0.625);\n  rt = 64. / (2. * pi);\n  q = p;\n  r = length (q.xz);\n  a = (r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  q.xz = vec2 (2. * fract (8. * a + 0.5) - 1., r - rt);\n  for (float n = 0.; n < nIt; n ++) {\n    q = abs (q);\n    q.xy = mix (q.xy, q.yx, step (q.x, q.y));\n    q.xz = mix (q.xz, q.zx, step (q.x, q.z));\n    q.yz = mix (q.yz, q.zy, step (q.y, q.z));\n    q = mSclFac * q - b;\n    q.z += b.z * step (q.z, -0.5 * b.z);\n  }\n  d = PrBoxDf (q, vec3 (1.)) / pow (mSclFac, nIt);\n  d = max (PrTorusDf (p.xzy, 0.9, rt), - d);\n  DMINQ (1);\n  q = p;\n  d = PrCylDf (q.xzy, 0.6, 2.2);\n  DMINQ (2);\n  q.y = abs (q.y) - 2.2;\n  d = PrSphDf (q, 0.9);\n  DMINQ (3);\n  q = p;\n  q.xz = Rot2D (q.xz, (0.5 + floor (7. * a)) * (2. * pi / 7.));\n  q.x -= - 0.5 * rt;\n  d = PrCylDf (vec3 (q.z, abs (q.y) - 0.3, q.x), 0.15, 0.5 * rt - 0.8);\n  DMINQ (4);\n  return objSzFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-4 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 24; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.01) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 SphHit (vec3 ro, vec3 rd, float rad)\n{\n  vec3 vn;\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + rad * rad - dot (ro, ro);\n  d = dstFar;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    vn = (ro + d * rd) / rad;\n  }\n  return vec4 (d, vn);\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 1e-4);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 8. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 dSph4, col4;\n  vec3 col, vn, vnh, roo, mDir, stCol;\n  float dstObj, sh, nDotL, dstGrnd, dstCld, h, s, spRad, clDens, mRad, bs, ts;\n  roo = ro;\n  dstGrnd = dstFar;\n  col = vec3 (0.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.1);\n    } else if (idObj == 2) {\n      col4 = mix (vec4 (0.8, 0.8, 0.2, -1.), vec4 (0.85, 0.88, 0.85, 0.1),\n         step (0.2, length (qHit.xz)));\n    } else if (idObj == 3) {\n      col4 = mix (vec4 (0.8, 0.8, 0.2, -1.), vec4 (0.85, 0.88, 0.85, 0.1),\n         step (0.2, length (qHit.xz)));\n      col4 *= 1. - 0.4 * step (0., sin (14. * atan (qHit.z, - qHit.x))) *\n         (1. - step (0.1, abs (qHit.y)));\n    } else if (idObj == 4) {\n      col4 = mix (vec4 (0.8, 0.8, 0.2, -1.), vec4 (0.85, 0.88, 0.85, 0.1),\n         step (0.1, fract (qHit.x - tCur)));\n    }\n    if (col4.a >= 0.) {\n      sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n      nDotL = max (dot (vn, sunDir), 0.);\n      col = col4.rgb * (0.2 + 0.2 * vec3 (0.5, 0.8, 1.) * max (- vn.y, 0.) +\n         0.7 * sh * nDotL * nDotL) + col4.a * vec3 (1., 1., 0.) * step (0.95, sh) *\n         pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n    } else {\n      col = col4.rgb * (0.3 + 0.7 * max (dot (- rd, vn), 0.));\n    }\n  }\n  if (dstObj >= dstFar) {\n    ro = roo;\n    spRad = 200.;\n    dSph4 = SphHit (ro - vec3 (0., - spRad - 5., 0.), rd, spRad);\n    dstGrnd = dSph4.x;\n    if (dstGrnd < dstFar && dstGrnd > 0.) {\n      ro += dstGrnd * rd;\n      vnh = dSph4.yzw;\n      ro.xz += vec2 (0., 0.5 * tCur);\n      h = Fbm2 (vec2 (0.23, 0.2) * ro.xz);\n      vn = VaryNf ((4. - 2. * step (0.45, h)) * ro, vnh, (0.1 + 2.9 * max (h - 0.45, 0.)) *\n         smoothstep (0.03, 0.1, - dot (vnh, rd)));\n      s = Noisefv2 (32. * ro.xz);\n      col4 = vec4 (0., 0.2, 1., 0.3) * (1. - 0.2 * s);\n      col4 = mix (col4, vec4 (0.8, 0.5, 0.2, 0.1) * (1. - 0.1 * s), step (0.45, h));\n      col4 = mix (col4, vec4 (0.4, 0.8, 0.4, 0.1) * (1. - 0.1 * s), smoothstep (0.46, 0.54, h));\n      col4 = mix (col4, vec4 (0.5, 0.7, 0.5, 0.1) * (1. - 0.2 * s), smoothstep (0.6, 0.7, h));\n      col4 = mix (col4, vec4 (1., 1., 1., 0.3) * (1. - 0.2 * s), smoothstep (0.75, 0.8, h));\n      col4.rgb = mix (col4.rgb, vec3 (1., 1., 0.8), 0.2);\n      col4 = mix (vec4 (0.6, 0.6, 0.9, 0.), col4, smoothstep (0.03, 0.1, - dot (vnh, rd)));\n      col4 = mix (vec4 (0.05, 0.05, 0.05, 0.), col4, smoothstep (0., 0.03, - dot (vnh, rd)));\n      col = col4.rgb * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n         col4.a * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 8.);\n      ro.xz += 0.1 * atan (sunDir.xz, sunDir.yy);\n      clDens = clamp (1.6 * Fbm2 (vec2 (0.4, 0.7) * ro.xz) - 0.4, 0., 1.);\n      col *= 1. - 0.3 * clDens;\n    }\n    ro = roo;\n    spRad = 250.;\n    dSph4 = SphHit (ro - vec3 (0., - spRad - 5., 0.), rd, spRad);\n    dstCld = dSph4.x;\n    if (dstCld < dstFar && dstCld > 0.) {\n      ro += dstCld * rd;\n      vnh = dSph4.yzw;\n      ro.xz += vec2 (0., 0.5 * tCur);\n      clDens = clamp (1.6 * Fbm2 (vec2 (0.4, 0.7) * ro.xz) - 0.4, 0., 1.);\n      col = mix (col, vec3 (1.) * (0.2 + 0.8 * max (dot (vnh, sunDir), 0.)), clDens *\n         smoothstep (0.11, 0.14, - dot (vnh, rd)));\n    }\n  }\n  if (length (col) < 0.03) {\n    mDir = normalize (vec3 (-0.5, -0.02, 0.2));\n    mRad = 0.03;\n    stCol = vec3 (0.02, 0.02, 0.04);\n    bs = dot (rd, mDir);\n    ts = bs * bs - dot (mDir, mDir) + mRad * mRad;\n    if (ts > 0.) {\n      ts = bs - sqrt (ts);\n      if (ts > 0.) {\n        vn = normalize ((ts * rd - mDir) / mRad);\n        stCol += vec3 (1., 0.9, 0.5) * clamp (dot (vec3 (0.5, 0.4, -0.77), vn) *\n           (1. - 0.3 * Noisefv3 (4. * vn)), 0., 1.);\n      }\n    } else stCol += StarPat (rd, 10.);\n    col = mix (col, stCol, step (Maxv3 (col), 0.4 * Maxv3 (stCol)));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 1.1 * pi * SmoothBump (0.25, 0.75, 0.22, fract (0.005 * tCur)) *\n       sign (fract (0.0025 * tCur) - 0.5);\n    el -= 0.15 * pi * cos (0.012 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -15. + 6. * cos (0.015 * pi * tCur));\n  zmFac = 4.;\n  sunDir = normalize (vec3 (1., 0.5, -1.));\n  dstFar = 120.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float aa = float (VAR_ZERO); aa < naa; aa ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * aa + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (mod (dot (p, cHashVA2) + vec2 (0., cHashVA2.x), 2. * pi)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (mod (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y),\n     2. * pi)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}