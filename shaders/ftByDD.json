{
    "Shader": {
        "info": {
            "date": "1649669166",
            "description": "experimenting with Voronoi distances and smoothing",
            "flags": 0,
            "hasliked": 0,
            "id": "ftByDD",
            "likes": 9,
            "name": "voronoi experiments",
            "published": 3,
            "tags": [
                "voronoismooth"
            ],
            "usePreview": 0,
            "username": "skal",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "//\n// Playing with Voronoi smooth distance\n//\n//  (basically redoing https://www.shadertoy.com/view/ldl3W8 on my own)\n//\n////////////////////////////////////////////////////////////////////////\n\n#define ISO_PHASE 5.    // to animate the iso-lines\n#define SMOOTH_MIN_PHASE 5.\n\n// see https://www.shadertoy.com/view/4djSRW\nvec2 hash2(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * vec3(.1021, .1013, .0977));\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n////////////////////////////////////////////////////////////////////////\n// distance from origin to segment [p1, p2]\nfloat SegmentDistance(vec2 p1, vec2 p2) {\n  vec2 dir = p2 - p1;\n  float norm = 1. / dot(dir, dir);\n  float frac = clamp(norm * dot(dir, -p1), 0.0, 1.0);\n  return length(p1 + frac * dir);\n}\n\n// distance from origin to (p1+p2)/2 along (p1->p2)\nfloat CellDistance(vec2 p1, vec2 p2) {\n  vec2 mid = 0.5 * (p1 + p2);\n  vec2 dir = normalize(p2 - p1);\n  return dot(mid, dir);\n}\n\n////////////////////////////////////////////////////////////////////////\n\nvec2 GetCenter(vec2 id, float theta) {\n  vec2 phi = 6.283185 * hash2(id) + theta;\n  return 0.5 + 0.5 * sin(phi);\n}\n\nfloat VoronoiDistance(vec2 p, float t, int n, out vec2 p1) {\n  vec2 cell = floor(p);\n  vec2 sub_pos = fract(p);\n  float d1 = 1.e6, d2 = 1.e7;\n  vec2 p2;\n  for (int j = -n; j <= n; ++j) {\n    for (int i = -n; i <= n; ++i) {\n      vec2 offset = vec2(float(i), float(j));\n      vec2 center = offset + GetCenter(cell + offset, t) - sub_pos;\n      float d = dot(center, center);\n      if (d < d1) {\n        d2 = d1;\n        d1 = d;\n        p2 = p1;\n        p1 = center;\n      } else if (d < d2) {\n        d2 = d;\n        p2 = center;\n      }\n    }\n  }\n  return SegmentDistance(p1, p2);\n}\n\n// polynomial smooth min\nfloat smin(float a, float b, float k) {\n  float h = max(k - abs(a - b), 0.0) / k;\n  return min(a, b) - h * h * k * 0.25;\n}\n\nfloat VoronoiMin(vec2 p, float t, int n, vec2 p1, float k) {\n  vec2 cell = floor(p);\n  vec2 sub_pos = fract(p);\n  float d_min = 1.e6;\n  for (int j = -n; j <= n; ++j) {\n    for (int i = -n; i <= n; ++i) {\n      vec2 offset = vec2(float(i), float(j));\n      vec2 p = offset + GetCenter(cell + offset, t) - sub_pos;\n      if (dot(p - p1, p - p1) > 0.001) {  // not the immediate center?  \n        d_min = smin(CellDistance(p1, p), d_min, k);\n      }\n    }\n  }\n  return d_min;\n}\n\n////////////////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = 6. * fragCoord / iResolution.y;\n  float theta = iTime * 1.2;\n  float blend =\n      mix(0.01, 0.38, 0.5 + 0.5 * sin(SMOOTH_MIN_PHASE * theta));\n  vec2 p1;\n  float d12 = VoronoiDistance(uv, theta, 1, p1);\n  float d = VoronoiMin(uv, theta, 2, p1, blend);\n\n  vec3 col = vec3(0.);\n  if (true) {  // draw a line p2 -> p1\n    col = mix(vec3(0.2, 0.2, 0.7), col, smoothstep(0.00, 0.06, d12));\n  }\n  if (true) {  // draw iso-lines\n    float iso_d = d * (0.5 + 0.5 * sin(60. * d + iTime * ISO_PHASE));\n    float amp = 0.5 + 0.5 * sin(2. * theta * 0.5);\n    col = mix(col, amp*vec3(0.76, 0.45, 0.96), smoothstep(0.0, 0.3, iso_d));\n  }\n  if (true) {  // draw cell borders\n    col = mix(vec3(0.35, 0.65, 0.20), col, smoothstep(0.00, 0.02, d));\n  }\n  if (true) {  // draw centers\n    float d = dot(p1, p1);\n    col = mix(vec3(0.97, 0.8, 0.3), col, smoothstep(0.002, 0.005, d));\n  }\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}