{
    "Shader": {
        "info": {
            "date": "1576587647",
            "description": "Distance to an arc, like [url]https://www.shadertoy.com/view/wl23RK[/url], but parametrized differently so it can be used as a joint. Inspired by dr2's morphing experiment - [url]https://www.shadertoy.com/view/3l3GD7[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WldGWM",
            "likes": 42,
            "name": "Joint 2D - distance 2D",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "bend",
                "joint",
                "distanefield"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2629
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a 2D joint. Also doable in 3D: https://www.shadertoy.com/view/3ld3DM\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\n\nvec3 sdJoint2DSphere( in vec2 p, in float l, in float a, float w)\n{\n    // if perfectly straight\n    if( abs(a)<0.001 )\n    {\n        float v = p.y;\n        p.y -= clamp(p.y,0.0,l);\n\t\treturn vec3( length(p), p.x, v );\n    }\n    \n    // parameters\n    vec2  sc = vec2(sin(a),cos(a));\n    float ra = 0.5*l/a;\n    \n    // recenter\n    p.x -= ra;\n    \n    // reflect\n    vec2 q = p - 2.0*sc*max(0.0,dot(sc,p));\n\n\t// distance\n    float u = abs(ra)-length(q);\n    float d = (q.y<0.0) ? length( q+vec2(ra,0.0) ) : abs(u);\n\n    // parametrization (optional)\n    float s = sign(a);\n    float v = ra*atan(s*p.y,-s*p.x);\n    //if( v<0.0 ) v+=sign(a)*6.283185*ra;\n    u = u*s;\n    if( v<0.0 )\n    {\n        if( s*p.x>0.0 ) { v = abs(ra)*6.283185 + v; }\n        else { v = p.y; u = q.x + ra; }\n    }\n    \n    return vec3( d-w, u, v );\n}\n\nvec3 sdJoint2DFlat( in vec2 p, in float l, in float a, float w)\n{\n    // if perfectly straight\n    if( abs(a)<0.001 )\n    {\n        float v = p.y;\n        p.y -= clamp(p.y,0.0,l);\n\t\treturn vec3( length(p), p.x, v );\n    }\n    \n    // parameters\n    vec2  sc = vec2(sin(a),cos(a));\n    float ra = 0.5*l/a;\n    \n    // recenter\n    p.x -= ra;\n    \n    // reflect\n    vec2 q = p - 2.0*sc*max(0.0,dot(sc,p));\n\n\t// distance\n    float u = abs(ra)-length(q);\n    float d = max(length( vec2(q.x+ra-clamp(q.x+ra,-w,w), q.y) )*sign(-q.y),abs(u) - w);\n\n    // parametrization (optional)\n    float s = sign(a);\n    float v = ra*atan(s*p.y,-s*p.x);\n    if( v<0.0 ) v+=sign(a)*6.283185*ra;\n    u = u*s;\n    \n    return vec3( d, u, v );\n}\n\nfloat checker( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.01;  \n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)/2.0)-0.5)-abs(fract((p+0.5*w)/2.0)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    //uv = 0.5*(uv-vec2(0.0,0.5));\n    \n    // animation\n    float le = 1.0;\n    float an = 1.5*sin(iTime);\n\tfloat wi = 0.1;\n    \n    // distance and parametrization\n    vec3 duv1 = sdJoint2DSphere(uv-vec2(-0.6,-0.3),le,an,wi);\n    vec3 duv2 = sdJoint2DFlat(  uv-vec2( 0.6,-0.3),le,an,wi);\n        \n    vec3 duv = (duv1.x<duv2.x) ? duv1 : duv2;\n\n    // round\n    float d = duv.x;\n    \n    // coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 0.8 + 0.2*cos(128.0*d);\n\tcol *= 1.0 - exp(-3.0*abs(d));\n    if( d<0.0 )\n    {\n        col = checker(duv.yz*20.0)*vec3(1);\n        //col = sqrt(texture(iChannel0,duv.yz).xyz);\n        col *= mix(vec3(0,0.6,1),vec3(1,1,0),clamp(duv.z/le,0.0,1.0));\n    }\n\t\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}