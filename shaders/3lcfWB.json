{
    "Shader": {
        "info": {
            "date": "1613923137",
            "description": "Attempting to figure out audio synthesis with a basic drum loop. The code also includes some other sounds I found in the process.",
            "flags": 8,
            "hasliked": 0,
            "id": "3lcfWB",
            "likes": 8,
            "name": "[Sound] Drum beat synthesis",
            "published": 3,
            "tags": [
                "sound",
                "beat",
                "audio",
                "synthesis",
                "drum"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "//See Common for code\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //display multiple bar graphs of different scales over top each other\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y -= .5;\n    float s = 0.;\n    for (float i = .00001; i < .002; i += i) {\n        s += step(uv.y,song(floor(iTime*10.)/10.+floor(uv.x*100.)/100.*i)*1.3);\n    }\n    fragColor = vec4(s/15.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*Ethan Alexander Shulman 2021 - https://xaloez.com/\nCC0, public domain*/\n\n\n//How often the instrument seed is switched.\n#define SWITCH_DELAY .4\n\n\n//Modified FNV-1A hash https://www.shadertoy.com/view/WtdfRX\nuvec4 hash(uvec4 seed) {\n    uvec4 h = (0x6A7F8FAAu^seed)*0x01000193u;\n    h = ((h.wxyz>>3u)^h^seed.yzwx)*0x01000193u;\n    h = ((h.zwxy>>8u)^h^seed.wxyz)*0x01000193u;\n    return h^(h>>11u);\n}\n#define I2F (1./float(0xFFFFFFFFu))\n\nmat2 r2(float a) {\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\n//Variable Fractal Synthesizer https://www.shadertoy.com/view/3l3BWS\nfloat fractal(float t, float repX, float repY, float freq, uvec4 p) {\n    vec4 h = vec4(hash(p))*I2F;\n    vec2 pos = fract(vec2(t/repX,floor(t/repX)/repY));\n    \n    //apply folds based off hash\n    for (int i = 0; i < 8; i++) {\n        float fi = h[i/2], rv = h[(i+1)%4];\n        if (i%2 == 0) fi = fract(fi*10.)*10.;\n        else fi = floor(fi*10.);\n           \n        int id = int(fi)%4;\n        if (id == 0) {//mirror rotate fold\n            pos = (abs(pos)-.5)*r2(rv*6.28);\n        } else if (id == 1) {//plane fold\n            rv *= 6.28;\n            vec2 pnorm = vec2(sin(rv),cos(rv));\n            pos -= pnorm*2.*min(0.,dot(pos,pnorm));\n        } else {//polar fold\n            float sz = .04+rv*1.6,\n                ang = mod(atan(pos.y,pos.x),sz)-sz*.5;\n            pos = vec2(sin(ang),cos(ang))*length(pos);\n        }\n        //apply box fold\n        float ext = h[i%4];\n        pos = clamp(pos,-ext,ext)*2.-pos;\n    }\n    float l = length(pos)*freq;\n    return sin(l*6.28);\n}\n\n\nfloat roughbasswobble(float t) {\n    return fractal(t, .3, 4., 1., uvec4(8232))*\n            fractal(t,.02,1424.,16.,uvec4(187))*.5;\n}\nfloat bass(float t) {\n    return fractal(t,.02-t*.00001,128.,4.,uvec4(11111))*max(0.,1.-t*8.);\n}\nfloat tomdrum(float t) {\n    return fractal(t,.3,150.,4.,uvec4(9234))*\n        fractal(t,.085,1.,7.,uvec4(0))*8.*max(0.,1.-t*8.);\n}\nfloat kickdrum(float t) {\n    return fractal(t,.03+t*.04, 64.,16.,uvec4(45,21,3,52))*max(0.,1.-t*8.);\n}\nfloat hatdrum(float t) {\n    return fractal(t,.001-t*.1,128.,64.,uvec4(111111111))*max(0.,1.-t*32.);\n}\nfloat snaredrum(float t) {\n    return (fractal(t,.002+t*.08,128.,4.,uvec4(1122343))+\n            fractal(t,.003+fract(t*121.273)*.02,128.,4.,uvec4(11111))*0.)*max(0.,1.-t*8.);\n}\nfloat rimdrum(float t) {\n    return fractal(t, .0013-t*.001, 64., 48., uvec4(334))*max(0.,1.-t*42.);\n}\nfloat laser(float t) {\n    return fractal(t, .001+t*.01, 24., 15., uvec4(451))*mod(max(0.,fract(t+.5)*2.-1.),2.);\n}\nfloat whine(float t) {\n    return fractal(t, .005, 24., 15., uvec4(451))*mod(max(0.,fract(t+.5)*2.-1.),2.);\n}\n\nfloat song(float t) {\n    return snaredrum(mod(t+.8,1.6))*0.2+\n           kickdrum(mod(t,1.6))*0.15+\n           hatdrum(mod(t,1./10.))*0.05*step(.7,mod(t-.2,1.6));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//See Common\n\nvec2 mainSound( int samp, float time )\n{\n    return vec2(song(time));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}