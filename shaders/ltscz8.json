{
    "Shader": {
        "info": {
            "date": "1504295338",
            "description": "Yet another cloudy sky... This is actually just a test for a possible future integration into my iOS experiment \"Flamin Stack\" (app which all the rendering is made procedurally, using fragment shaders).",
            "flags": 32,
            "hasliked": 0,
            "id": "ltscz8",
            "likes": 8,
            "name": "Cloudy sky",
            "published": 3,
            "tags": [
                "noise",
                "clouds"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 780
        },
        "renderpass": [
            {
                "code": "// Rendering parameters\n#define CAMERA_FOCAL_LENGTH\t3.0\n#define CAMERA_SPEED\t\t10.0\n#define RAY_STEP_MAX\t\t100.0\n#define RAY_STEP_DIST\t\t0.3\n#define RAY_LENGTH_MAX\t\t20.0\n#define NOISE_FACTOR\t\t6.0\n#define NOISE_FREQUENCY\t\t0.4\n#define NOISE_TEXTURE_SIZE\t64.0\n#define CLOUDS_SPACING\t\t1.0\n#define DENSITY_STEP_MAX\t1.0\n#define DENSITY_FACTOR\t\t0.05\n#define COLOR_CLOUDS_A\t\tvec3 (0.2, 0.2, 0.4)\n#define COLOR_CLOUDS_B\t\tvec3 (0.95, 0.9, 1.0)\n#define COLOR_SKY_A\t\t\tvec3 (0.95, 0.95, 1.0)\n#define COLOR_SKY_B\t\t\tvec3 (0.4, 0.4, 0.6)\n#define COLORIZE\n\n// Math constants\n#define PI 3.14159265359\n\n// PRNG\nfloat rand (in vec2 seed) {\n//\tseed = mod (seed, NOISE_TEXTURE_SIZE);\n\treturn fract (sin (dot (seed, vec2 (11.9898, 78.233))) * 137.5453);\n}\n\n// Noise\nfloat noise (in vec3 p) {\n\tvec3 f = fract (p);\n\tf = f * f * (3.0 - 2.0 * f);\n\tp = floor (p);\n\tp.xy += p.z * vec2 (37.0, 17.0);\n#ifdef NOISE_TEXTURE_SIZE\n\tf.xy = texture (iChannel0, (mod (p.xy + f.xy, NOISE_TEXTURE_SIZE) + 0.5) / iResolution.xy).xy;\n#else\n\tvec2 q = p.xy - vec2 (37.0, 17.0);\n\tvec2 n = vec2 (1.0, 0.0) + 0.5;\n\tf.xy = vec2(\n\t\tmix (\n\t\t\tmix (rand (q + n.yy), rand (q + n.xy), f.x),\n\t\t\tmix (rand (q + n.yx), rand (q + n.xx), f.x),\n\t\t\tf.y\n\t\t),\n\t\tmix (\n\t\t\tmix (rand (p.xy + n.yy), rand (p.xy + n.xy), f.x),\n\t\t\tmix (rand (p.xy + n.yx), rand (p.xy + n.xx), f.x),\n\t\t\tf.y\n\t\t)\n\t);\n#endif\n\treturn mix (f.x, f.y, f.z);\n}\n\n// FBM\nfloat fbm (in vec3 p) {\n#if 0\n\treturn noise (p) / 2.0 + noise (p * 2.0) / 4.0 + noise (p * 4.0) / 8.0;\n#else\n\treturn (noise (p) + noise (p * 2.0) / 2.0 + noise (p * 4.0) / 4.0) / (1.0 + 1.0 / 2.0 + 1.0 / 4.0);\n#endif\n}\n\n// Distance to the scene\nfloat distScene (in vec3 p, in float noise) {\n\treturn CLOUDS_SPACING - abs (p.y + noise);\n}\n\n// HSV to RGB\nvec3 hsv2rgb (in vec3 hsv) {\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n}\n\n// Main function\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the position and orientation of the camera\n\tvec3 rayOrigin = vec3 (0.0, 1.5 * cos (iTime * 0.5), CAMERA_SPEED * iTime);\n\tfloat cameraAngleY = PI * 0.6 * cos(iTime * 0.3);\n\tvec3 cameraForward = vec3 (sin (cameraAngleY), 0.0, cos (cameraAngleY));\n\tvec3 cameraUp = vec3 (sin (iTime * 0.2), 1.0, 0.0);\n\tmat3 cameraOrientation;\n\tcameraOrientation [2] = normalize (cameraForward);\n\tcameraOrientation [0] = normalize (cross (cameraUp, cameraForward));\n\tcameraOrientation [1] = cross (cameraOrientation [2], cameraOrientation [0]);\n\tvec3 rayDirection = cameraOrientation * normalize (vec3 ((2.0 * fragCoord.xy - iResolution.xy) / iResolution.y, CAMERA_FOCAL_LENGTH));\n\n\t// Define the colors\n\tfloat colorMix = smoothstep (-0.4, 0.4, cos (iTime * 0.2));\n\tvec3 colorClouds = mix (COLOR_CLOUDS_A, COLOR_CLOUDS_B, colorMix);\n\tvec3 colorSky = mix (COLOR_SKY_A, COLOR_SKY_B, colorMix);\n\n\t// Ray marching\n#ifdef COLORIZE\n\tvec3 color = vec3 (0.0);\n\tfloat colorCloudsValue = max (max (colorClouds.x, colorClouds.y), colorClouds.z);\n\tfloat colorCloudsSaturation = colorCloudsValue > 0.0 ? 1.0 - min (min (colorClouds.x, colorClouds.y), colorClouds.z) / colorCloudsValue : 0.0;\n#endif\n\tfloat densityTotal = 0.0;\n\tfloat rayLength = 0.0;\n\tfor (float rayStep = 0.0; rayStep < RAY_STEP_MAX; ++rayStep) {\n\n\t\t// Compute the maximum density\n\t\tfloat densityMax = 1.0 - rayLength / max (RAY_LENGTH_MAX, RAY_STEP_MAX * RAY_STEP_DIST);\n\t\tif (densityTotal >= densityMax) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Get the distance to the scene\n\t\tvec3 p = rayOrigin + rayDirection * rayLength;\n\t\tfloat f = NOISE_FACTOR * (fbm (p * NOISE_FREQUENCY) - 0.5);\n\t\tfloat dist = distScene (p, f);\n\t\tif (dist < 0.0) {\n\n\t\t\t// Compute the local density\n\t\t\tfloat densityLocal = min (-dist, DENSITY_STEP_MAX) * DENSITY_FACTOR;\n\t\t\tdensityLocal *= densityMax - densityTotal;\n\n#ifdef COLORIZE\n\t\t\t// Update the color\n\t\t\tcolor += hsv2rgb (vec3 (noise (p * 0.2), colorCloudsSaturation, densityLocal * colorCloudsValue));\n#endif\n\n\t\t\t// Update the total density\n\t\t\tdensityTotal += densityLocal;\n\t\t}\n\n\t\t// Go ahead\n\t\trayLength += max (RAY_STEP_DIST, dist - NOISE_FACTOR);\n\t}\n#ifdef COLORIZE\n\tcolor += colorSky * (1.0 - densityTotal);\n#else\n\tvec3 color = mix (colorSky, colorClouds, densityTotal);\n#endif\n\n\t// Set the fragment color\n\tfragColor = vec4 (color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Rendering parameters\n#define NOISE_TEXTURE_SIZE\t64.0\n\n// PRNG\nfloat rand (in vec2 seed) {\n\treturn fract (sin (dot (seed, vec2 (11.9898, 78.233))) * 137.5453);\n}\n\n// Main function\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Don't waste time\n\tif (iFrame > 1 || fragCoord.x > (NOISE_TEXTURE_SIZE + 1.0) || fragCoord.y > (NOISE_TEXTURE_SIZE + 1.0)) {\n\t\tdiscard;\n\t}\n\n\t// Set the fragment color\n\tvec2 current = mod (fragCoord, NOISE_TEXTURE_SIZE);\n\tvec2 previous = mod (current - vec2 (37.0, 17.0), NOISE_TEXTURE_SIZE);\n\tfragColor = vec4 (rand (previous), rand (current), 1.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}