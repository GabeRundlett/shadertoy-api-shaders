{
    "Shader": {
        "info": {
            "date": "1484311128",
            "description": "THE SEAAAAAAAAAAA !\n\nEARTHQUAAAAAKE !",
            "flags": 0,
            "hasliked": 0,
            "id": "ltGSWW",
            "likes": 1,
            "name": "Sea_Waves",
            "published": 3,
            "tags": [
                "waves",
                "math",
                "sea"
            ],
            "usePreview": 0,
            "username": "PlauM",
            "viewed": 641
        },
        "renderpass": [
            {
                "code": "\n\nvoid traceWave (out vec4 color, in vec2 pixCoords, float distanceWaves){\n    \n    float angleCam = (3.14/5.0) + sin(iTime/5.0);\n    vec2 i = vec2 (cos(angleCam), sin(angleCam));\n    vec2 j = vec2 (-sin(angleCam), cos(angleCam));\n    \n    float x = pixCoords.x - iResolution.x / 2.0;\n    float y = pixCoords.y /*- iResolution.y / 2.0*/;\n    \n    float X = x * i.x + y * i.y;\n    float Y = x * j.x + y * j.y;\n    \n    X += sin(iTime * 50.0) * 5.0;\n    Y += cos(iTime * 50.0) * 5.0;\n    \n    float amplitude = 1.0 / distanceWaves;\n    float periode = 7.0 / distanceWaves;\n    float speed = 0.5 * iTime / distanceWaves;\n    float hauteur = 1.0 / distanceWaves;\n    \n    float dScreen = distanceWaves;\n    float hEye = iResolution.y / 2.0;\n    float d = 800.0;\n    float hauteurWaves = d * hEye / dScreen /* *iResolution.y ??? */;\n    \n    // fonction math d'une vague\n    float sinus = sin(X/*pixCoords.x*/ / periode + speed) * amplitude + iResolution.y / hauteur;\n    \n    // couleur à ajouter + ou - selon la distance\n    vec4 filtre = vec4(0.27, 0.57, 0.85, 1.0) * distanceWaves;\n    \n    // création graphique d'une vague\n    if (Y/*pixCoords.y*/ < sinus)\n    {\n        color = vec4(0.15, 0.15, 0.25, 1.0);\n        \n        color += filtre;\n    }\n}\n\nvoid traceSun (out vec4 color, in vec2 pixCoords){\n    \n    float X = pixCoords.x + sin(iTime * 50.0) * 5.0;\n    float Y = pixCoords.y + cos(iTime * 50.0) * 5.0;\n    \n    float centerX = 90.0;\n    float centerY = 370.0;\n    float rayon = 50.0;\n    float distance = sqrt(pow(X/*pixCoords.x*/-centerX,2.0)+pow(Y/*pixCoords.y*/-centerY,2.0));\n    \n      if (distance < rayon)\n    {\n        color = vec4(1.0, 0.9, 0.0, 1.0);\n    }\n}\n\nvoid mainImage( out vec4 color, in vec2 pixCoords )\n{\n    color = vec4(0.4, 0.73, 1.0 ,1.0);\n    \n    traceSun (color, pixCoords);\n    \n    traceWave (color, pixCoords, 0.41);\n    traceWave (color, pixCoords, 0.32);\n    traceWave (color, pixCoords, 0.24);\n    traceWave (color, pixCoords, 0.15);\n}\n\n\n// I need to create a cam effect beging on sea level and then going up\n// Je voudrais donner l'impression d'une camera qui démarre au niveau de la mer et prend de l'altitude\n\n/*\n\t     _\n\t     |\n\t     |\n\t<    |\n\t|    |\nhEye|    |\n\t|----¯-------------------|\n\tdScreen\t\t\td\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}