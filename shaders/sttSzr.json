{
    "Shader": {
        "info": {
            "date": "1638654584",
            "description": "these trails look like my old plasma tv!!",
            "flags": 0,
            "hasliked": 0,
            "id": "sttSzr",
            "likes": 13,
            "name": "screenburn",
            "published": 3,
            "tags": [
                "voronoi",
                "sin",
                "pattern",
                "trig"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "// 'screenburn' - Del 04/12/2021\n\nvec2 hash2( vec2 p )\n{\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n// Voronoi (IQ) - slightly modified to return get the ID etc.\nvec4 VoronoiGrid( in vec2 x, out vec2 id )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    // first pass: regular voronoi\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n    \n    // second pass: distance to borders\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n    \n    id = (n+mg)+vec2(0.5); // ID is n+mg\n    return vec4(md, length(mr), mr);\n}\n\nvec2 smoothRot(vec2 p,float s,float m,float c,float d)\n{\n  s*=0.5;\n  float k=length(p);\n  float x=asin(sin(atan(p.x,p.y)*s)*(1.0-m))*k;\n  float ds=k*s;\n  float y=mix(ds,2.0*ds-sqrt(x*x+ds*ds),c);\n  return vec2(x/s,y/s-d);\n}\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n} \n#define PI 3.14159\n\nfloat vDrop(vec2 uv,float t)\n{\n    if (iMouse.z>0.5)\n        uv.y *= 12.0;\n    else\n        uv.y *= 2.;\n    uv.x = uv.x*16.0;\t\t\t\t\t\t// H-Count\n    float dx = fract(uv.x);\n    uv.x = floor(uv.x);\n    uv.y *= 0.5;\t\t\t\t\t\t\t// stretch\n    float o=sin(uv.x*215.4);\t\t\t\t// offset\n    float s=cos(uv.x*33.1)*.3 +.7;\t\t\t// speed\n    float trail = mix(18.0,5.0,s);\t\t\t// trail length\n    //float trail = 5.0;\n    float yv = fract(uv.y + t*s + o) * (trail*1.5);\n    yv = 1.0/yv;\n    yv = smoothstep(0.0,1.0,yv*yv);\n    yv = sin(yv*PI)*(s*5.0);\n    float d2 = sin(dx*PI);\n    return yv*(d2*d2);\n}\n\nvoid mainImage(out vec4 k, vec2 p)\n{\n    vec2 uv = (p.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float dd0 = length(uv);\n    float dd1 = smoothstep(0.0,0.3,dd0);\n    uv *= rotate(fract(0.6+iTime*-0.01)*6.28);\n    vec2 id;\n    float scale = 64.0;\n    vec4 grid = VoronoiGrid(uv*scale,id);\n    uv = id/scale;\n\n//    uv = smoothRot(uv,8.0,0.05,0.0,-0.1);\n      uv = smoothRot(uv,4.0,0.35,16.0,0.05);\n        \n    uv *= 0.5;\n    float drop = vDrop(uv.yx,iTime*0.5);\n    vec3 linecol1 = vec3(0.185,0.395,0.5)*2.5;\n    vec3 linecol2 = vec3(0.8,0.75,0.325)*1.5;\n    \n    vec3 linecol = mix(linecol1,linecol2,0.5+sin(iTime*0.2+dd0*0.7)*0.5);\n    \n    vec3 backcol = vec3(0.01,0.04,0.1);\n    vec3 col = mix(backcol,linecol,drop)*dd1;\n    k = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}