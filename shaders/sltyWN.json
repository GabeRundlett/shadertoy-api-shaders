{
    "Shader": {
        "info": {
            "date": "1659859897",
            "description": "linear interpolation animation test",
            "flags": 0,
            "hasliked": 0,
            "id": "sltyWN",
            "likes": 10,
            "name": "linear interpolation animation",
            "published": 3,
            "tags": [
                "linearinterpolation"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 128\n#define MAX_DIST 128.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define DATA_SIZE 8\n#define MOUSE 0\n\nconst vec3 targets0[DATA_SIZE] = vec3[](\n    vec3(0.,0.,0.),vec3(0.1,0.,0.),vec3(0.2,0.,0.),vec3(0.2,0.1,0.),\n    vec3(0.2,0.2,0.),vec3(0.2,0.2,0.1),vec3(0.2,0.2,0.2),vec3(0.1,0.2,0.2)\n); \n\nconst vec3 targets1[DATA_SIZE] = vec3[](\n    vec3(0.,0.,0.),vec3(0.0,0.0,0.1),vec3(0.0,0.0,0.2),vec3(0.0,0.1,0.2),\n    vec3(0.0,0.2,0.2),vec3(0.0,0.2,0.1),vec3(0.0,0.2,0.0),vec3(0.0,0.1,0.0)\n); \n\n// noise and fbm function from https://www.shadertoy.com/view/Xd3GD4\n//-----------------------------------------------------------------------------\nvec2 hash( vec2 p )\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise2d( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    \n    vec2 i = floor( p + (p.x+p.y)*K1 );\n    \n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    \n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    \n    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    \n    return dot( n, vec3(70.0) );\n}\n\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\nvec2 boxAnimation(float t, int index, vec3[DATA_SIZE] targets, vec3 p){\n    vec3 pos = vec3(0.0);\n    vec3 size = vec3(0.05);\n    float d = B3D(p,size);\n    \n    vec2 res = vec2(d, 0);\n    \n    int len = targets.length();\n    for(int i = 1; i<len; i++){\n        if(index<len-i){\n            pos = mix(targets[index],targets[index+1],t);\n        } else {\n            pos = targets[len-i];\n        }\n\n        d = B3D(p-pos,size);\n        \n        int cindex = int(mod(float(i),2.));\n        \n        vec2 res2 = vec2(d, cindex);\n        res = combine(res,res2);\n    }\n    return res;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.y+=cos(p.x*3.0+iTime*2.0)*0.3*cos(p.z*3.0+iTime*1.5)*0.5;\n    p-=vec3(0.0,0.0,1.0);\n    float d = p.y;\n    d = max(abs(p.z)-0.2,d);\n    d = max(abs(p.y)-0.01,d);\n    vec2 res = vec2(d,2.0);\n    \n    p = prevP;\n    p.yz *= Rot(-radians(iTime*20.0-45.));\n    p.xz *= Rot(radians(iTime*20.0-45.));\n    \n    p = abs(p);\n    \n    float it = iTime+5.;\n    float speed = 5.0;\n    float t = mod(it*speed,30.);\n    float t2 = mod(it*speed,1.);\n    \n    int index = int(t);\n    \n    vec2 res2 = boxAnimation(t2,index,targets0,p);\n    vec2 res3 = boxAnimation(t2,index,targets1,p);\n    res = combine(res,combine(res2,res3));\n    \n    return res;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(0,0,0));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.3)*diff;\n    diffCol += col*vec3(0.9)*skyDiff;\n    diffCol += col*vec3(0.7)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == 0){\n        vec3 c = vec3(0.3);\n        col = diffuseMaterial(n,rd,p,c);\n    } else if(mat == 1){\n        vec3 c = vec3(0.6);\n        col = diffuseMaterial(n,rd,p,c);\n    } else if(mat == 2){\n        vec3 c = 0.5 + 0.5*cos(iTime+p+vec3(0,1,2));\n        col = diffuseMaterial(n,rd,p,c);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0.0, -1.2);\n    if(iMouse.z>0. && MOUSE == 1){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        col = mix(vec3(1.0),vec3(0.6), length(uv)-0.01);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );\n    \n    uv+=mod(iTime,5.)*2.0;\n    col+=noise2d(uv*100.0)*0.05;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}