{
    "Shader": {
        "info": {
            "date": "1473773162",
            "description": "Converted to ShaderToy shader referenced here:\nhttp://devlog-martinsh.blogspot.co.uk/2013/05/image-imperfections-and-film-grain-post.html\n\nReferences:\n- Noise algorithm copied http://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere- \n",
            "flags": 0,
            "hasliked": 0,
            "id": "Mly3Rw",
            "likes": 7,
            "name": "Image imperfections + Film Grain",
            "published": 3,
            "tags": [
                "noise",
                "perlinnoise",
                "filmgrain"
            ],
            "usePreview": 0,
            "username": "Weaseltron",
            "viewed": 2876
        },
        "renderpass": [
            {
                "code": "/* \nCopied from http://devlog-martinsh.blogspot.co.uk/2013/05/image-imperfections-and-film-grain-post.html\n\nGLSL implementation of this shader: https://dl.dropboxusercontent.com/u/11542084/FilmGrain_v1.1\n\nCopied references from referenced web page:\nReferences:\n- noise algorithm I copied from HERE* by toneburst, but original implementation comes from Stefan Gustavson found HERE**\n* http://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere-vertex-shader-sourcecode/\n** http://staffwww.itn.liu.se/~stegu/simplexnoise/\n*/\n\n/*\nFilm Grain post-process shader v1.1\t\nMartins Upitis (martinsh) devlog-martinsh.blogspot.com\n2013\n\n--------------------------\nThis work is licensed under a Creative Commons Attribution 3.0 Unported License.\nSo you are free to share, modify and adapt it for your needs, and even use it for commercial use.\nI would also love to hear about a project you are using it.\n\nHave fun,\nMartins\n--------------------------\n\nPerlin noise shader by toneburst:\nhttp://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere-vertex-shader-sourcecode/\n*/\n\n//uniform sampler2D bgl_RenderedTexture; //rendered scene sampler\n//uniform float bgl_RenderedTextureWidth; //scene sampler width\n//uniform float bgl_RenderedTextureHeight; //scene sampler height\n//#define bgl_RenderedTextureWidth ( iResolution.x ) //scene sampler width\n//#define bgl_RenderedTextureHeight ( iResolution.y ) //scene sampler height\n//uniform float timer;\n\nconst float permTexUnit = 1.0/256.0;\t\t// Perm texture texel-size\nconst float permTexUnitHalf = 0.5/256.0;\t// Half perm texture texel-size\n\n//float width = iResolution.x;\n//float height = iResolution.y;\n\n#define width float(iResolution.x)\n#define height float(iResolution.y)\n\nconst float grainamount = 0.05; //grain amount\nbool colored = false; //colored noise?\nfloat coloramount = 0.6;\nfloat grainsize = 1.6; //grain particle size (1.5 - 2.5)\nfloat lumamount = 2.0; //\n    \n//a random texture generator, but you can also use a pre-computed perturbation texture\nvec4 rnm(in vec2 tc) \n{\n    float timer = iTime;\n    float noise =  sin(dot(tc + vec2(timer,timer),vec2(12.9898,78.233))) * 43758.5453;\n\n\tfloat noiseR =  fract(noise)*2.0-1.0;\n\tfloat noiseG =  fract(noise*1.2154)*2.0-1.0; \n\tfloat noiseB =  fract(noise*1.3453)*2.0-1.0;\n\tfloat noiseA =  fract(noise*1.3647)*2.0-1.0;\n\t\n\treturn vec4(noiseR,noiseG,noiseB,noiseA);\n}\n\nfloat fade(in float t) {\n\treturn t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat pnoise3D(in vec3 p)\n{\n\tvec3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel\n\t// and offset 1/2 texel to sample texel centers\n\tvec3 pf = fract(p);     // Fractional part for interpolation\n\n\t// Noise contributions from (x=0, y=0), z=0 and z=1\n\tfloat perm00 = rnm(pi.xy).a ;\n\tvec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;\n\tfloat n000 = dot(grad000, pf);\n\tvec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\tfloat n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));\n\n\t// Noise contributions from (x=0, y=1), z=0 and z=1\n\tfloat perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;\n\tvec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;\n\tfloat n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));\n\tvec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\tfloat n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));\n\n\t// Noise contributions from (x=1, y=0), z=0 and z=1\n\tfloat perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;\n\tvec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;\n\tfloat n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));\n\tvec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\tfloat n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));\n\n\t// Noise contributions from (x=1, y=1), z=0 and z=1\n\tfloat perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;\n\tvec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;\n\tfloat n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));\n\tvec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\tfloat n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));\n\n\t// Blend contributions along x\n\tvec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));\n\n\t// Blend contributions along y\n\tvec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));\n\n\t// Blend contributions along z\n\tfloat n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));\n\n\t// We're done, return the final noise value.\n\treturn n_xyz;\n}\n\n//2d coordinate orientation thing\nvec2 coordRot(in vec2 tc, in float angle)\n{\n\tfloat aspect = width/height;\n    vec2 uv = (tc*2.0)-1.0;\n\tfloat rotX = (uv.x*aspect*cos(angle)) - (uv.y*sin(angle));\n\tfloat rotY = (uv.y*cos(angle)) + (uv.x*aspect*sin(angle));\n//\tfloat rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));\n//\tfloat rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));\n\trotX = ((rotX/aspect)*0.5+0.5);\n\trotY = rotY*0.5+0.5;\n\treturn vec2(rotX,rotY);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    float timer = iTime;\n\tvec2 texCoord = fragCoord.rg / vec2(iResolution.x, iResolution.y);\n\t\n\tvec3 rotOffset = vec3(1.425,3.892,5.835); //rotation offset values\t\n\tvec2 rotCoordsR = coordRot(texCoord, timer + rotOffset.x);\n\tvec3 noise = vec3(pnoise3D(vec3(rotCoordsR*vec2(width/grainsize,height/grainsize),0.0)));\n  \n\tif (colored)\n\t{\n\t\tvec2 rotCoordsG = coordRot(texCoord, timer + rotOffset.y);\n\t\tvec2 rotCoordsB = coordRot(texCoord, timer + rotOffset.z);\n\t\tnoise.g = mix(noise.r,pnoise3D(vec3(rotCoordsG*vec2(width/grainsize,height/grainsize),1.0)),coloramount);\n\t\tnoise.b = mix(noise.r,pnoise3D(vec3(rotCoordsB*vec2(width/grainsize,height/grainsize),2.0)),coloramount);\n\t}\n\n//\tvec3 col = texture(bgl_RenderedTexture, texCoord).rgb;\n\tvec3 col = texture(iChannel0, texCoord).rgb;\n\n\t//noisiness response curve based on scene luminance\n/*\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\n\tfloat luminance = mix(0.0,dot(col, lumcoeff),lumamount);\n\tfloat lum = smoothstep(0.2,0.0,luminance);\n\tlum += luminance;\n*/\t\n\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\n//\tfloat luminance = mix(0.0,dot(col, lumcoeff),lumamount);\n\tfloat luminance = lumamount * dot(col, lumcoeff);\n\tfloat lum = smoothstep(0.2,0.0,luminance);\n//\tfloat lum = smoothstep(0.2,0.0,1.0-luminance);\n\tlum += luminance;\n\t\n\tnoise = mix(noise,vec3(0.0),pow(lum,4.0));\n\tcol = col+noise*grainamount;\n   \n\tfragColor =  vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}