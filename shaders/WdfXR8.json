{
    "Shader": {
        "info": {
            "date": "1551150310",
            "description": "My effort to make a textured intersected sphere look pretty. Change light direction with M O U S E. Uses some bump mapping. ",
            "flags": 0,
            "hasliked": 0,
            "id": "WdfXR8",
            "likes": 3,
            "name": "Glossy",
            "published": 3,
            "tags": [
                "3d",
                "mouse",
                "texture",
                "lighting",
                "intersection",
                "bumpmap"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "// Plento\n// Use the mouse!\nvec2 R;\nvec3 M;\n// Get cubemap\nvec4 cbmp(vec3 p){\n \treturn texture(iChannel0, p);   \n}\n//Get texture\nvec4 t(vec2 p){\n    p.x += iTime*.1;\n \treturn texture(iChannel1, p);   \n}\n\n// height info \nfloat h(vec2 p){\n\treturn dot(vec3(t(p)), vec3(.3333));\n}\n\n// Get normals of texture for bump\nvec3 N(vec2 p)\n{\n    float d = .05;\n    \n    float a = h(p);\n    float b = h(p + vec2(d, .0));\n    float c = h(p + vec2(.0, d)); \n    \n    float dx = (a - b) / d;\n    float dy = (a - c) / d;\n    \n    return normalize(vec3(dx, dy, 1. - a));\n    \n}\n\n// Returns the color information for a simple intersected sphere \nvec4 S(vec3 O, vec3 D, vec3 C)\n{\n    vec3 OC = C - O;\n    float a = dot(D, OC);\n    vec3 P = (O + D) * a;\n    float y = length(C - P);\n    \n    float r = .5; \n    \n    vec3 m = vec3(M.xy / R.xy-.5, M.z);\n    \n    // Starts mouse in initial position\n    if(m.z == 0.)\n        m.xy = vec2(-.03, .17);\n    \n    \n    vec4 c;\n    \n    if(y <= r) // We're in\n    {\n        float x = sqrt((r*r) - (y*y));\n        \n        // Hit location on sphere\n    \tvec3 h = (O + D) * (a - x);\n        \n   \t\t// Normal of sphere at hit location\n    \tvec3 n = normalize(h - C);\n        \n        // reflected normal vector.\n    \tvec3 rf = reflect(D, n); \n \t \t\n        // Spherical  UV coordinates\n        vec2 uv = vec2(atan(n.z, n.x), acos(h.y / r)); \n        \n        // Add base color\n        c += t(vec2(uv.x, uv.y)*2.5)*1.5; \n        // Add cubemap color\n     \tc += cbmp(rf) * .34; \n       \t\n        // light direction\n        vec3 ld = normalize(vec3(m.x*6., m.y*6., -1.)); \n        \n\t\t// Offset the normals\n        n += N(n.xy*2.4) * .0425;\n        \n        // Edge shading\n        c *= smoothstep(C.z, C.z - r, (a-x)); \n        \n        // Diffuse lighting with new bumpy normals\n        c *= max(dot(n, ld), .0); \n        \n        // Specular\n        c += vec4(.52, .6, .6, 1.) \n            * pow(max(dot( reflect(ld, n), D ), 0. ), 10.)*.44;\n        \n        c /= 1.5; \n    }\n    \n    return c;\n    \n}\n\n\nvoid mainImage( out vec4 f, in vec2 u )\n{\n    R = iResolution.xy;\n    M = iMouse.xyz;\n    vec2 U = (u - .5*R.xy)/R.y;\n    \n    f = S(vec3(0), normalize(vec3(U.x, U.y, 1.)), vec3( 0., 0., 1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}