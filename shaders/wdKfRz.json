{
    "Shader": {
        "info": {
            "date": "1606474337",
            "description": "Nothing moves but the arrow!",
            "flags": 0,
            "hasliked": 0,
            "id": "wdKfRz",
            "likes": 11,
            "name": "Yet another illusion...",
            "published": 3,
            "tags": [
                "optical",
                "illusion"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "#define PI\t\t\t\t3.14159265358979\n#define DISC_COUNT\t\t9.0\n#define DISC_DIST\t\t0.7\n#define DISC_RADIUS\t\t0.1\n#define HUE_SPEED\t\t0.06\n#define HUE_STEP\t\t3.0\n\nvec3 hsv2rgb (in vec3 hsv) {\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n}\n\nmat2 rotate (in float angle)\n{\n\tfloat c = cos (angle);\n\tfloat s = sin (angle);\n\treturn mat2 (c, s, -s, c);\n}\n\nfloat segDist (in vec2 p, in vec2 a, in vec2 b) {\n\tp -= a;\n\tb -= a;\n\treturn length (p - b * clamp (dot (p, b) / dot (b, b), 0.0, 1.0));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 p) {\n\n\t// Normalization of the fragment coordinates\n\tp = (2.0 * p - iResolution.xy) / iResolution.y;\n\tfloat halfPixel = 0.5 * dFdy (p.y);\n\n\t// Background color\n\tfragColor = vec4 (vec3 (0.6 + 0.05 * cos (p.x * 50.0) * cos (p.y * 50.0)), 1.0);\n\n\t// Select the direction\n\tfloat dir = sign (cos (iTime * 0.8));\n\n\t// Display the direction\n\tvec2 q = p *rotate (iTime * dir * 0.2);\n\tq.x *= dir;\n\tvec2 tip = vec2 (-0.01, 0.3);\n\tfloat d = max (abs (length (q) - tip.y), min (-q.x, q.x + q.y));\n\td = min (d, segDist (q, tip, tip + vec2 (0.05, 0.05)));\n\td = min (d, segDist (q, tip, tip + vec2 (0.05, -0.05)));\n\td -= 0.01;\n\tfragColor *= smoothstep (-halfPixel, halfPixel, d);\n\n\t// Divide the plan in DISC_COUNT sectors\n\tconst float arc = 2.0 * PI / DISC_COUNT;\n\tp *= rotate (arc * floor (atan (p.y, p.x) / arc + 0.5));\n\tp.x -= DISC_DIST;\n\n\t// Display the discs\n\tfloat h = float (iFrame) * HUE_SPEED;\n\tvec3 hsv = vec3 (h, 0.9, 0.8);\n\n\td = length (p) - DISC_RADIUS;\n\tfragColor = mix (fragColor, vec4 (hsv2rgb (hsv), 1.0), step (d, 0.0));\n\n\tp.y *= dir;\n\td = max (d, -d - 2.0 * halfPixel);\n\n\thsv.x = h - HUE_STEP * HUE_SPEED;\n\tfragColor = mix (fragColor, vec4 (hsv2rgb (hsv), 1.0), smoothstep (halfPixel, -halfPixel, max (d, -p.y)));\n\n\thsv.x = h + HUE_STEP * HUE_SPEED;\n\tfragColor = mix (fragColor, vec4 (hsv2rgb (hsv), 1.0), smoothstep (halfPixel, -halfPixel, max (d, p.y)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}