{
    "Shader": {
        "info": {
            "date": "1649390182",
            "description": "Two distance estimators for the Mandelbrot Set. ESTIMATOR 0 is the one most people use to raymarch quaternionic quadratic sets (like Mandelbrot or Julia set). ESTIMATOR 1 is however a MUCH better estimator and no much more expensive.",
            "flags": 0,
            "hasliked": 0,
            "id": "stjyRw",
            "likes": 29,
            "name": "Mandelbrot Set - distance",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "distance",
                "manderbor"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1367
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Two different distance esimators for the Mandelbrot Set (M).\n// The first one (ESTIMATOR 0 below) is the one most people use to\n// raymarch quaternionic quadratic sets (like Mandelbrot or Julia\n// set), but only works well when very close to M. The second one\n// (ESTIMATOR 1) is a better estimator, especially far from M,\n// that is basically not much more expensive although does suffer\n// form precision when close to M.\n//\n// More info:\n//\n// https://iquilezles.org/articles/distancefractals\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n\n// 0 : traditional estimator\n// 1 : much better estimator\n#define ESTIMATOR 0\n\nfloat sdMandelbrot( vec2 c )\n{\n    vec2 z = vec2(0.0,0.0);\n    vec2 dz = vec2(0.0,0.0);\n    bool exterior = false;\n    float r2;\n    float n = 0.0;\n    for( int i = 0; i<256; i++ )\n    {\n        // dz -> 2·z·dz + 1\n        dz = 2.0*vec2(z.x*dz.x - z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,0.0);\n        // z -> z² + c\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        \n        n += 1.0;\n        r2 = dot(z,z);\n        if( r2>65536.0 )\n        {\n            exterior = true;\n            break;\n        }\n    }\n    \n    #if ESTIMATOR==0\n\t float d = 0.5*sqrt(r2/dot(dz,dz))*log(r2);\n    #else\n     float en = exp2(n);\n     float d = 0.5*sqrt(r2/dot(dz,dz))*en*(1.0-pow(r2,-1.0/en));\n    #endif\n    return (exterior) ? d : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    // animate\n    bool zoom = sin(iTime*0.6)<-0.4;\n\n    // transform\n    vec3 tx = zoom ? vec3(-0.745,0.186, 0.05 ) : vec3(-0.5,0.0, 1.2 );\n    p = tx.xy + p*tx.z;\n    m = tx.xy + m*tx.z;\n    float px = tx.z*2.0/iResolution.y;\n\n    // if not mouse\n    if( iMouse.z<0.001 )\n    {\n        if( zoom )\n        {\n            m = vec2(-0.775,0.2);\n            m += vec2(0.015,0.02)*vec2(cos(iTime),sin(iTime));\n        }\n        else\n        {\n            float time = iTime*0.5;\n            m  = vec2(-0.75,0.0);\n            m += vec2(1.6,1.3)*vec2(cos(time*1.1),sin(time*1.1));\n            m += vec2(0.4,0.4)*vec2(cos(time*3.1),sin(time*3.1));\n        }\n    }\n    \n    // distance\n    float d = sdMandelbrot(p);\n    \n    // coloring\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-5.0*abs(d/tx.z));\n\tcol *= 0.8 + 0.2*cos(100.0*abs(d/tx.z));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,1.4*px,abs(d)) );\n\n    //if( iMouse.z>0.001 )\n    {\n    d = sdMandelbrot(m);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, px, abs(length(p-m)-abs(d))-px));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, px, length(p-m)-px*4.0));\n    }\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}