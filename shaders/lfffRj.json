{
    "Shader": {
        "info": {
            "date": "1724015232",
            "description": "combination  https://www.shadertoy.com/view/DtGyWh#",
            "flags": 0,
            "hasliked": 0,
            "id": "lfffRj",
            "likes": 0,
            "name": " colorful Kaleidoscope 13",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(10.,13,31))*1.5+.5)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S2(d,b) smoothstep(1.,-1., (d - b) / fwidth(d) )\n#define S(d,b) smoothstep(antialiasing(1.5),-antialiasing(1.5),d - b)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\nfloat arrow(vec2 p, float scale, int outline){\n    p*= scale;\n    vec2 prevP = p;\n    float s = 0.1;\n    p*=vec2(1.25,0.5);\n    p.y-=s*0.5;\n    float d = Tri(p,vec2(s));\n    p-=vec2(0.,-s*0.5);\n    float d2 = Tri(p,vec2(s));\n    if(outline == 1)d = abs(max(-d2,d))-0.005;\n    p = prevP;\n    d = max(-p.y-s,d);\n    return d;\n}\n\nfloat animationArrow(vec2 p, float speed){\n    vec2 prevP = p;\n    p.y-=iTime*0.1*speed;\n    p.y+=0.06;\n    p.y = mod(p.y,0.12)-0.06;\n    float d = arrow(p,2.,1);\n    p = prevP;\n    d = max(arrow(p*0.85,2.,0),d);\n    return d;\n}\n\nfloat arrows(vec2 p, float dir, int num, float speed){\n    p*=dir;\n    for(int i = 0; i<num; i++){\n        p.x = abs(p.x)-0.05;   \n    }\n    float d = animationArrow(p,speed);\n    return d;\n}\n\nfloat baseLayer(vec2 p, float y, int num, float speed){\n    vec2 prevP = p;\n    p = DF(p,2.);\n    p-=0.12+y;\n    p*=Rot(radians(45.));\n    float d = arrows(p,1.,num,speed);\n    p = prevP;\n    p = DF(p,2.);\n    p-=0.14+y;\n    p*=Rot(radians(45.));\n    float d2 = arrows(p,-1.,num+1,speed);\n    d = min(d,d2);\n    return d;\n}\n\nfloat drawMainGraphics(vec2 p, float animation){\n    vec2 prevP = p;\n    float d = baseLayer(p,0.,0,0.5*animation);\n    for(int i = 1; i<3; i++){\n        float d2 = baseLayer(p,0.1*float(i),i,1.*float(i)*0.5*animation);\n        d = min(d,d2);\n    }\n    return d;\n}\n\nfloat triGrids(vec2 p){\n    p.x*=1.2;\n    vec2 prevP = p;\n    \n    p.y-=iTime*0.05;\n    float s = 0.06;\n    vec2 q = mod(p,s)-(s*0.5);\n    vec2 prevQ = q;\n    \n    q.y = abs(q.y)-(s*0.5);\n    float d = abs(Tri(q,vec2(s*0.5)))-0.001;\n    q = prevQ;\n    q.y+=s*0.5;\n    float d2 = abs(q.y)-0.002;\n    d = min(d,d2);\n    \n    p = prevP;\n    d = max(Tri(p,vec2(0.24)),d);\n    \n    float a = radians(45.);\n    p.x+=0.028;\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    \n    p = prevP;\n    a = radians(-45.);\n    p.x-=0.028;\n    d = max(-dot(p,vec2(cos(a),sin(a))),d);\n    \n    p = prevP;\n    p.y+=0.03;\n    d2 = abs(Tri(p,vec2(0.21)))-0.003;\n    d = min(d,d2);\n    return d;\n}\n\nfloat drawOuterGraphics(vec2 p){\n    vec2 prevP = p;\n    p = DF(p,2.);\n    p-=0.525;\n    p*=Rot(radians(45.));\n    float d = triGrids(p);\n    return d;\n}\n\nfloat drawCenterGraphics(vec2 p){\n    vec2 prevP = p;\n    p = DF(p,2.);\n    p-=0.025;\n    p*=Rot(radians(45.));\n    float d = abs(B(p,vec2(0.045)))-0.003;\n    p = prevP;\n    float d2 = abs(B(p,vec2(0.03,0.08)))-0.003;\n    d = min(d,d2);\n    d2 = abs(B(p,vec2(0.08,0.03)))-0.003;\n    d = min(d,d2);\n    return d;\n}\n\nfloat stripes(vec2 p, float dir){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(30.));\n    p.x+=iTime*0.01*dir;\n    p.x = mod(p.x,0.02)-0.01;\n    \n    float d = B(p,vec2(0.005,10.));\n    return d;\n}\n\nfloat stripeTriangle(vec2 p, float size, float dir){\n     vec2 prevP = p;\n     float d = Tri(p,vec2(size));\n     d = max(stripes(p,dir),d);\n     return d;\n}\n\nfloat drawFarOuterGraphics(vec2 p){\n    vec2 prevP = p;\n    p*=Rot(radians(23.));\n    p = DF(p,2.);\n    p-=0.38;\n    p*=Rot(radians(45.));\n    p.x*=0.51;\n    p.y*=-1.;\n    float d = stripeTriangle(p,0.13,1.);\n    p = prevP;\n    \n    p*=Rot(radians(23.));\n    p = DF(p,2.);\n    p-=0.575;\n    p*=Rot(radians(45.));\n    p.x*=0.51;\n    float d2 = stripeTriangle(p,0.13,-1.); \n    d = min(d,d2);\n    \n    p = prevP;\n\n    p = DF(p,2.);\n    p-=0.525;\n    p*=Rot(radians(45.));\n    p.x*=0.08;\n    p.y*=-1.;\n    d2 = Tri(p,vec2(0.025));    \n    d = min(d,d2);\n    \n    p = prevP;\n    \n    p = DF(p,2.);\n    p-=0.66;\n    p*=Rot(radians(45.));\n    p.x*=0.51;\n    d2 = stripeTriangle(p,0.15,1.);  \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat centerMask(vec2 p){\n    vec2 prevP = p;\n    p = DF(p,2.);\n    p-=0.265;\n    p*=Rot(radians(45.));\n    float d = B(p,vec2(0.4));\n    p = prevP;\n    p = DF(p,2.);\n    p-=0.66;\n    p*=Rot(radians(45.));\n    p.x*=0.48;\n    float d2 = Tri(p,vec2(0.165)); \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat drawBg(vec2 p){\n    vec2 prevP = p;\n    float l = 0.0012;\n    p = mod(p,0.06)-0.03;\n    float d = min(abs(p.x)-l,abs(p.y)-l);\n    p = prevP;\n    float d2 = centerMask(p*0.98);\n    d = max(-d2,d);\n    return d;\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n     vec2 uv = (C-0.5*iResolution.xy)/iResolution.y;\n    uv*=1.45;\n    vec3 col = vec3(0.);\n    \n    float d = drawMainGraphics(uv*-1.1,0.);\n    col = mix(col,vec3(0.3),S(d,0.0));\n    vec3 p,q,r=iResolution,\n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(0.1,1.,1.),H(g*0.2),sin(0.8))*1./e/8e3\n    )\n    {\n        p=g*d2;\n        \n     p.z*=ceil(iTime*0.05)*d;\n     p.xz*=mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n       p.xy*=mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n        g+=e=length(p.yz)/s;\n         g+=e=length(p.yx)/s;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}