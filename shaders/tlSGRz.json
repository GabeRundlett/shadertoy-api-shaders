{
    "Shader": {
        "info": {
            "date": "1565418797",
            "description": "A cross necklace.\n\nreference: \n3D distance functions: https://iquilezles.org/articles/distfunctions/distfunctions.htm\nChain Reaction: https://www.shadertoy.com/view/wtX3W7",
            "flags": 0,
            "hasliked": 0,
            "id": "tlSGRz",
            "likes": 3,
            "name": "Cross Necklace",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "cross",
                "pbr",
                "link"
            ],
            "usePreview": 0,
            "username": "ikuto",
            "viewed": 494
        },
        "renderpass": [
            {
                "code": "#define\tAA 2\n#define PI 3.1415926\n#define TAO (2.0*PI)\n\nstruct Material {\n\tvec3 albedo;\n    float roughness;\n    float metallic;\n};\n\nMaterial shape_materials[] = Material[] (\n    Material(vec3(0.85, 0.7, 0.2), 0.3, 0.9),\n    Material(vec3(1.0, 1.0, 1.0), 0.3, 0.9)\n);\n\nvec2 rotate(vec2 v, float a) { return cos(a)*v + sin(a)*vec2(v.y,-v.x); }\n\nmat3 lookAt(vec3 eye, vec3 center, vec3 up) {\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvec2 opU(vec2 a, vec2 b) { return a.x < b.x ? a : b; }\n\nfloat sdRoundBox(vec3 p, vec3 b, float r) { return length(max(abs(p) - b, 0.0)) - r; }\n\nfloat sdTorus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\nfloat sdLink(vec3 p, float le, float r1, float r2) {\n    vec3 q = vec3(p.x, max(abs(p.y)-le,0.0), p.z);\n    return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nvec2 mapScene(vec3 p) { \n    float shapeIndex = 0.0;\n    \n    p.y += 0.8;\n    vec3 p1 = p - vec3(0, 6.06, 0), p2 = p1;\n    float d = TAO/32.0, a = atan(p1.x, -p1.y)*1.0/d;\n \tp1.xy = rotate(p1.xy, floor(0.5+a)*d) + vec2(0, 4.0);\n    p2.xy = rotate(p2.xy, (floor(a)+0.5)*d) + vec2(0, 4.0);\n    \n    vec2 res = vec2(sdLink(p1.yxz, 0.125, 0.1, 0.03), shapeIndex);\n    res = opU(res, vec2(sdLink(p2.zxy, 0.125, 0.1, 0.03), shapeIndex++));\n    res = opU(res, vec2(sdRoundBox(p, \tvec3(1.4, 0.2, 0.1), 0.1), shapeIndex));\n    res = opU(res, vec2(sdRoundBox(p  -\tvec3(0, -1.0, 0), vec3(0.2, 2.4, 0.1), 0.1), shapeIndex));\n    res = opU(res, vec2(sdTorus(p.yxz - vec3(2.0, 0, 0), vec2(0.25, 0.06)), shapeIndex));\n    res = opU(res, vec2(sdTorus(p.xzy - vec3(0, 0, 1.7), vec2(0.18, 0.05)), shapeIndex++));\n    return res;\n}\n\nfloat sdScene(vec3 pos) { return mapScene(pos).x; }\n\nvec3 calculateNormal(in vec3 point) {\n    const vec3 step = vec3(0.01, 0.0, 0.0);\n    float gradX = sdScene(point + step.xyy) - sdScene(point - step.xyy);\n    float gradY = sdScene(point + step.yxy) - sdScene(point - step.yxy);\n    float gradZ = sdScene(point + step.yyx) - sdScene(point - step.yyx);\n    \n    vec3 normal = vec3(gradX, gradY, gradZ);\n    return normalize(normal);\n}\n\nvec2 rayMarch(vec3 ray_origin, vec3 ray_direction) {\n    const float MAX_TRACE_DISTANCE = 200.0;\n    \n    float totalDistance = 0.0, shapeIndex = -1.0;\n    for (int i = 0; i < 128; ++i) {\n        vec2 res = mapScene(ray_origin + totalDistance * ray_direction);\n        float minHitDistance = 0.0005 * totalDistance;\n        if (res.x < minHitDistance) {\n            shapeIndex = res.y; break; \n        }\n        if (totalDistance > MAX_TRACE_DISTANCE) break;\n        totalDistance += res.x;\n    }\n    \n\treturn vec2(totalDistance, shapeIndex);\n}\n\nvec3 render(vec3 ray_origin, vec3 ray_direction) {\n\tvec3 color = pow(texture(iChannel0, ray_direction).rgb, vec3(2.2));\n    \n    vec2 res = rayMarch(ray_origin, ray_direction);\n    int shapeIndex = int(res.y);\n    if (shapeIndex >= 0) {\n        vec3 p = ray_origin + ray_direction * res.x;\n        vec3 N = calculateNormal(p);\n\t\tvec3 L = normalize(vec3(1, 1, 1));\n\t\tfloat NdotL = max(0.0, dot(N, L));\n        \n\t\tvec3 ambient = mix(vec3(0.07), vec3(0.05, 0.1, 0.15), N.y * 0.5 + 0.5);\n\t\tvec3 lightCol = vec3(1.0 ,0.9, 0.8);\n\n        Material mat = shape_materials[shapeIndex];\n\t\tcolor = mat.albedo * (NdotL * lightCol + ambient);\n       \n\t\tvec3 reflection = reflect(ray_direction, N);\n\t\tvec3 refMap = pow(texture(iChannel0, reflection).rgb, vec3(2.2));\n        vec3 F0 = mix(vec3(0.04), mat.albedo, mat.metallic);\n\t\tvec3 fresnel = mix(F0, vec3(1.0 - mat.roughness), pow(dot(N, ray_direction) + 1.0, 5.0));\n\t\tcolor = mix(color.rgb, refMap, fresnel);\n    }\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 totalColor = vec3(0.0);\n    float angle = iMouse.z > 0.0 ? (iMouse.x / iResolution.x - 0.5) * 3.14 : -0.1;\n    vec3 rayOrigin = 9.0*vec3(sin(angle), 0.3, cos(angle));\n    mat3 viewMat = lookAt(rayOrigin, vec3(0.0), vec3(0.0, 1.0, 0.0));\n    \n    for (int i = 0; i < AA; ++i)  {\n    \tfor (int k = 0; k < AA; ++k)  {\n        \tvec2 offset = vec2(float(i) + .5, float(k) + .5) / float(AA) - .5;\n        \tvec2 uv = (fragCoord + offset - iResolution.xy * 0.5) / iResolution.y;\n    \t\tvec3 rayDirection = normalize(viewMat * vec3(uv, -1.0));\n        \ttotalColor += render(rayOrigin, rayDirection);\n            totalColor = totalColor * (1.0 - dot(uv, uv) * 0.5);\n        }\n    }         \n    \n\ttotalColor /= float(AA * AA);\n    totalColor = pow(totalColor, vec3(0.4545));\n    \n\tfragColor = vec4(totalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}