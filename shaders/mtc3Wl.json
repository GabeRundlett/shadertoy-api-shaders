{
    "Shader": {
        "info": {
            "date": "1683307600",
            "description": "CC0: Fake trail of bubbles\nWas tinkering with bubble trail earlier\nThis version uses the distance field and how\nquickly it changes to determine the intensity of the trail\nVery fake but looked decent enough to share.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mtc3Wl",
            "likes": 22,
            "name": "Fake trail of bubbles",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "// CC0: Fake trail of bubbles\n// Was tinkering with bubble trail earlier\n// This version uses the distance field and how\n// quickly it changes to determine the intensity of the trail\n// Very fake but looked decent enough to share.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat df(vec2 p, float tm) {\n  vec2 p0 = p; \n  p0 += 0.71*sin(vec2(1.0, sqrt(0.5))*0.5*tm);\n  p0 *= ROT(-tm*0.5);\n  float d = box(p0, vec2(0.25, 0.01));\n  return d;\n}\n\nvec3 bubbles(vec3 col, vec2 p) {\n  float aa = 4.0/RESOLUTION.y;\n  for (float i = 1.0; i < 10.0; ++i) {\n    float sz = 0.3/(1.0+i);\n    vec2 off = vec2(0.123*i);\n    vec2 pp = p+off;\n    pp /= sz;\n    vec2 rp = round(pp);\n    vec2 cp = pp;\n    cp -= rp;\n    const float delta = .01;\n    float dp = df(rp*sz-off, TIME-delta);\n    float dn = df(rp*sz-off, TIME);\n    float dd = (dn-dp)/delta;\n    float h0 = hash(rp);\n    float h1 = fract(3677.0*h0);\n    float h2 = fract(8677.0*h0);\n    float r  = sqrt(h0)/3.0;\n    r *= tanh(4.0*dd);\n    cp -= (0.5-r)*vec2(h1, h2);\n    float fo = smoothstep(12.0*sz*r, -0.1, dn);\n    float d = (length(cp)-mix(r, 0., fo));\n    d = abs(d);\n    d *= sz;\n    d -= aa*0.75;\n    vec3 bcol = vec3(2.0*sqrt(fo))*smoothstep(0.0, -aa, d)*step(0.0, dd)*smoothstep(-0.05, 0.1, dn);\n    col += bcol;\n  }\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float ds = df(p, TIME);\n  vec3 col = vec3(0.0);\n  col = bubbles(col, p);\n  float aa = 4.0/RESOLUTION.y;\n  col = mix(col, vec3(1.0, 0.0, 0.25), smoothstep(0.0, -aa, ds));\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}