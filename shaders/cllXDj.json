{
    "Shader": {
        "info": {
            "date": "1675362435",
            "description": "Credits: \"Cheesy by P_Malin\", \"Raytracing Booleans by iq\".\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cllXDj",
            "likes": 4,
            "name": "My 6th Raytracing",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "flat",
                "sun",
                "cube",
                "shadow",
                "sphere",
                "intersection",
                "box",
                "plane",
                "directional",
                "difference",
                "union",
                "subtraction",
                "hardshadow",
                "flatshadow"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "#define AA 2\n\nmat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nstruct Hit{\n\tfloat t;\n\tfloat id;\n\tvec3 nor;\n} kEmpty = Hit(9.9e20,-1.0,vec3(0.0));\n\nstruct Inter{\n\tHit a; //positive\n\tHit b; //negative\n} iEmpty = Inter(Hit(9.9e20,-1.0,vec3(0.0)),Hit(9.9e20,-1.0,vec3(0.0)));\n\nInter iUn(Inter a,Inter b){\n\tif(b.a.t >= b.b.t){\n\t\tif(a.a.t >= a.b.t) return iEmpty;\n\t\telse return a;\n\t}else if(a.a.t >= a.b.t) return b;\n\telse{\n\t\tInter res = iEmpty;\n\t  if(a.a.t < b.a.t) res.a = a.a;\n\t  else res.a = b.a;\n\t\tif(a.b.t > b.b.t) res.b = a.b;\n\t\telse res.b = b.b;\n  \treturn res;\n\t}\n}\n\nInter iIn(Inter a,Inter b){\n  if(a.a.t < b.a.t){\n    if(a.b.t < b.a.t) return iEmpty;\n    if(a.b.t < b.b.t) return Inter(b.a,a.b);\n    return b;\n  }else if(a.a.t < b.b.t){\n    if(a.b.t < b.b.t) return a;\n    return Inter(a.a,b.b);\n  }else return iEmpty;\n}\n\nInter iDi(Inter b,Inter a){\n  if(a.a.t < b.a.t){\n    if(a.b.t < b.a.t) return b;\n    if(a.b.t < b.b.t) return Inter(a.b,b.b);\n    return iEmpty;\n  }else if(a.a.t < b.b.t){\n    if(a.b.t < b.b.t) return Inter(b.a,a.a);\n    return Inter(b.a,a.b);\n  }else return b;\n}\n\nInter iSphere(float id,vec3 ro,vec3 rd,float r){\n\tInter res;\n\tfloat b = dot(ro,rd);\n\tfloat c = dot(ro,ro) - r*r;\n\tfloat h = b*b - c;\n\tif(h < 0.0) return iEmpty;\n\tres.a.t = -b - sqrt(h);\n\tres.b.t = -b + sqrt(h);\n\tres.a.nor = normalize((ro+rd*res.a.t)/r);\n\tres.b.nor = normalize(-(ro+rd*res.b.t)/r);\n\tres.a.id = id;\n\tres.b.id = id;\n\treturn res;\n}\n\nInter iBox(float id,vec3 ro,vec3 rd,vec3 b){\n\tInter res;\n\tvec3 m = 1.0/rd;\n\tvec3 n = ro * m;\n\tvec3 k = abs(m) * b;\n\tvec3 t1 = -n - k;\n\tvec3 t2 = -n + k;\n\tfloat tN = max(t1.x,max(t1.y,t1.z));\n\tfloat tF = min(t2.x,min(t2.y,t2.z));\n\tif(tF < tN || tF < 0.0) return iEmpty;\n\tres.a.t = tN;\n\tres.b.t = tF;\n\tres.a.nor = normalize(sign(-rd) * step(vec3(res.a.t),t1));\n\tres.b.nor = normalize(sign(-rd) * step(t2,vec3(res.b.t)));\n\tres.a.id = id;\n\tres.b.id = id;\n\treturn res;\n}\n\nInter scene(vec3 ro,vec3 rd){\n  Inter scn = iEmpty;\n\n  scn = iUn(scn,iIn(\n  \tiBox(3.0,ro-vec3(3.0,0.0,0.0),rd,vec3(1)),\n    iSphere(1.0,ro-vec3(3.0,0.0,0.0),rd,1.22)\n  ));\n\n  scn = iUn(scn,iDi(\n  \tiBox(3.0,ro-vec3(-3.0,0.0,0.0),rd,vec3(1)),\n    iSphere(1.0,ro-vec3(-3.0,0.0,0.0),rd,1.22)\n  ));\n\n  scn = iUn(scn,iDi(\n    iSphere(1.0,ro-vec3(0.0,0.0,3.0),rd,1.22),\n  \tiBox(3.0,ro-vec3(0.0,0.0,3.0),rd,vec3(1))\n  ));\n\n  scn = iUn(scn,iUn(\n  \tiBox(3.0,ro-vec3(0.0,0.0,-3.0),rd,vec3(1)),\n    iSphere(1.0,ro-vec3(0.0,0.0,-3.0),rd,1.22)\n  ));\n  \n  scn = iUn(scn,iBox(3.0,ro-vec3(0.0,-3.0,0.0),rd,vec3(1)));\n  scn = iUn(scn,iSphere(1.0,ro-vec3(0.0,3.0,0.0),rd,1.22));\n  \n  scn = iUn(scn,iBox(0.0,ro-vec3(ro.x,-4.0,ro.z),rd,vec3(9.9e20,0.00001,9.9e20)));\n\n  return scn;\n}\n\nHit raytrace(vec3 ro,vec3 rd){\n\tHit res = kEmpty;\n\n  Inter scn = scene(ro,rd);\n\n\tif(scn.a.t > 0.0 && scn.a.t < res.t){\n\t\tres.t = scn.a.t;\n\t\tres.id = scn.a.id;\n\t\tres.nor = scn.a.nor;\n\t}\n\n\treturn res;\n}\n\nfloat dirLight(vec3 rd,Hit h,vec3 pos,float r){\n\tfloat lig = 1.0;\n\n\tfloat a = length(rd-normalize(pos));\n\tif(h.id == -1.0) lig = a;\n\n\treturn r/1500.0 / (lig*lig);\n}\n\nvec3 render(vec2 uv){\n\tvec3 col = vec3(0.0);\n\t\n  vec3 ro = vec3(0.0,0.0,9.0);\n  vec3 rd = normalize(vec3(uv,-2.0));\n\n  //ro.y += 3.5;\n  //rd.zy *= rot(0.5);\n\n  ro.xz *= rot(iTime*0.5);\n  rd.xz *= rot(iTime*0.5);\n\n  vec3 bg = mix(vec3(0.25,0.5,1.0),vec3(0.5,0.95,1),0.5-3.0*clamp(rd.y,0.0,1.0));\n\n  Hit hit = raytrace(ro,rd);\n\n  if(hit.id != -1.0){\n    vec3 nor = hit.nor;\n  \tvec3 pos = ro + rd*hit.t + nor*0.00001;\n    vec3 ref = reflect(rd,nor);\n    vec3 mate = vec3(0.0);\n\n    if(hit.id == 0.0){\n    \tmate += 0.5+0.5*mod(dot(floor(pos*5.0),vec3(1.0)),2.0);\n    }else if(hit.id == 1.0){\n    \tmate += vec3(1,0,0);\n    }else if(hit.id == 2.0){\n    \tmate += vec3(0,1,0);\n    }else if(hit.id == 3.0){\n    \tmate += vec3(0,0,1);\n    }\n\n    {\n    \tvec3 lig = normalize(vec3(0.3,0.45,0.6));\n    \tfloat dif = clamp(dot(nor,lig),0.0,1.0);\n    \tfloat sha = step(length(pos-lig),raytrace(pos,lig).t);\n    \tdif *= sha;\n    \tfloat spe = clamp(dot(ref,lig),0.0,1.0);\n    \tspe = dif * 0.5*pow(spe,64.0);\n\n    \tcol += mate * dif + spe;\n\n      float Bdif = clamp(dot(nor,-lig),0.0,1.0);\n    \tfloat Bspe = clamp(dot(ref,-lig),0.0,1.0);\n    \tcol += mate * Bdif*0.01;\n    \tcol += mate * Bdif*pow(Bspe,2.0)*0.01;\n    }\n\n    {\n    \tfloat dif = clamp(nor.y*0.5+0.5,0.0,1.0);\n    \tfloat spe = smoothstep(-0.6,0.6,ref.y);\n    \tspe *= 0.3+0.96*pow(clamp(1.0+dot(rd,nor),0.0,1.0),5.0);\n    \t//spe *= dif;\n\n    \tcol += (mate*0.75+0.25) * bg * dif*0.05;\n    \tcol += (mate*0.75+0.25) * 2.0*bg * spe*0.05;\n    }\n  }\n\n  col = pow(col,vec3(1.0/2.2));\n\n  col = mix(col,bg,clamp(1.0-exp(-0.025*hit.t),0.0,1.0));\n  \n  col = mix(col,vec3(1),clamp(dirLight(rd,hit,vec3(0.3,0.225,0.6),1.0),0.0,1.0));\n  \n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec3 col = vec3(0.0);\n\n#if AA>1\n  for(int i=0;i<AA;i++)\n  for(int j=0;j<AA;j++){\n    vec2 o = vec2(float(i),float(j)) / float(AA) - 0.5;\n    vec2 uv = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n#else\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n#endif\n    col += render(uv);\n#if AA>1\n  }\n  col /= float(AA*AA);\n#endif\n\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}