{
    "Shader": {
        "info": {
            "date": "1586873681",
            "description": "Change detection on video.\nUses one buffer for background, and another buffer for buffering changes.\nChanges are committed to the background when they are stable (~3 sec)\nTo change input (webcam, video), modify Buffer A-iChannel3",
            "flags": 34,
            "hasliked": 0,
            "id": "WsjyRG",
            "likes": 6,
            "name": "ChangeDetection 2",
            "published": 3,
            "tags": [
                "video",
                "detection",
                "webcam",
                "motion",
                "change"
            ],
            "usePreview": 0,
            "username": "hojo",
            "viewed": 638
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    U /= iResolution.xy;\n    vec3 D =   texture(iChannel1,U).rgb - texture(iChannel0,U).rgb;\n    \n    \n    // TEST DISPLAY LT BACKGROUND (no motion)\n    //O =  texture(iChannel1,U);\n    \n    //Debug DISPLAY one channel\n\t//O = texture(iChannel2,U);\n    \n    //DISPLAY only changed parts on black background\n\t//O = (length(D)<changeThresh) ? COLBACK : texture(iChannel0,U);\n   \n    // Display Movements as inverse video\n    O = (length(D)<changeThresh) ? texture(iChannel1,U) : 1.-texture(iChannel0,U);\n\n    // ALTERNATIVE : Display change as RGB variations from grey 0.5\n    //O = .5 + 1.0*D;\n   \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{    \n// reads video data in channel3\n    vec2 texPos = U/iResolution.xy;\n    //Horiontal flip option\n    if (FLIPHZ) {\n    \ttexPos.x=1.0 - texPos.x;\n    }\n    \n    O = texture(iChannel3,texPos);   \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CHANGE DETECTION, F.Claudel 2020\n//define FLIPHZ for horzontal flip of video source (webcam)\nconst bool FLIPHZ = true;\n\n// vidoe time period (seconds)\nconst float dtFrame = 1.0/60.0; // 1./60 for 60 fps\n\n// changeThresh for background : normalized change on all colors (max sqrt(3))\nconst float changeThresh = 0.11;\n// changeThresh for detection buffer: normalized change on all colors (max sqrt(3))\nconst float changeDetThresh = 0.1;\n\n//time delay for integartion into background (seconds)\nconst float tInteg = 1.0;\n//time delay for integartion into detection buffer (seconds)\nconst float tIntegDet = 0.25;\n// max duration of stable detection (seonds), before switching to background\nconst float  tDetStable = 3.0;\n\n//max Number of stable 'etected frames' (before switching to backgound)\nconst float maxDetStableFrames = tDetStable / dtFrame;\n\n//weight ratio of new frame for background, when no detection (smoothes noise)\nconst float rNew  = 1.0-exp2(-3.0/(tInteg   /dtFrame));\nconst float rNewD = 1.0-exp2(-3.0/(tIntegDet/dtFrame));\n\n// color for background (unchanged)\nconst vec4 COLBACK = vec4(0.0, 0.0, 0.0, 1.0);\n\n// DETECTION FUNCTION, used for Buffer A and B\nvec4 doDetection(vec4 newFrame, vec4 backb, vec4 detb, bool isBack) {\n// isBack : true  to return updated background buffer,\n//          false to return updated detectiuon buffer\n\n    ///absolute norm of change/ref : min 0, max sqrt(3)\n    float change = length(backb.rgb - newFrame.rgb);\n\n    //if small change : incorporate into background at slow speed       \n    if (change <= changeThresh) {\n        //no significant change in new frame => incorporate in backb\n        backb.rgb = rNew *newFrame.rgb + (1.0-rNew)*backb.rgb;\n        backb.a   += 1.0;\n        //no dectection\n        detb.rgb  = COLBACK.rgb;\n        detb.a    = 0.0;\n    } else {\n        //check if newFrame is the same as stored detectionBufer\n        float chDet = length(detb.rgb - newFrame.rgb);\n        bool noChDet= (chDet <= changeDetThresh);\n        //detection of change in newFrame\n\n        if (noChDet) {\n            detb.a  += 1.0;\n            //update detb color slowly\n            detb.rgb =  rNewD *newFrame.rgb + (1.0-rNewD)*detb.rgb;\n        } else {\n            //reste counter to 0, and store new colour\n            detb.a    = 0.0;\n            detb.rgb  = newFrame.rgb;\n        }\n    }\n\n    //if detection buffer counter is large\n    if ((detb.a >= maxDetStableFrames) || (detb.a > backb.a))  {\n        // put detectionBufer into background\n        backb.rgb = detb.rgb;\n        backb.a   = detb.a;\n        //disable detection\n        detb.rgb = COLBACK.rgb;\n        detb.a = 0.0;                \n    }\n\n    //decide which buffer to return accoridng to caller option isBack\n    return (isBack) ? backb : detb;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n// Buffer C store a detection background\n// three first components : RGB color for detected change\n// 4th component counts frames used for change (1 after first change)\n{\n    U /= iResolution.xy;\n    if (iFrame<=1)\n    {\n        //no detetction at beginning\n        O.rgba = vec4(0.,0.,0.,0.);        \n    } else {\n        \n    \tO = doDetection( \n                texture(iChannel0,U), //live frame (buffer A)\n                texture(iChannel1,U), //background (buffer B)\n                texture(iChannel2,U), //detection  (buffer C)\n                false ); // isBack is false for detection\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 O, in vec2 U )\n{\n// Buffer B store a fixed background\n//three first components : RGB color \n//4th component counts frames used for change (1 after first change)\n//\n    U /= iResolution.xy;\n    if (iFrame<=1)\n    {\n        //no detetction at beginning\n        O.rgb = texture(iChannel0,U).rgb;\n        O.a   = 1.0;\n    } else {\n        \n    \tO = doDetection( texture(iChannel0,U), //live frame (buffer A)\n                texture(iChannel1,U), //background (buffer B)\n                texture(iChannel2,U), //detection  (buffer C)\n                true ); // isBack is true for background\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}