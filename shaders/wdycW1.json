{
    "Shader": {
        "info": {
            "date": "1602708429",
            "description": "Extracted from mattz's shader: Hex grid traversal, https://www.shadertoy.com/view/XdSyzK",
            "flags": 0,
            "hasliked": 0,
            "id": "wdycW1",
            "likes": 4,
            "name": "Basic Hex Grid",
            "published": 3,
            "tags": [
                "grid",
                "basic",
                "hex",
                "hexagonal"
            ],
            "usePreview": 0,
            "username": "rtsonneveld",
            "viewed": 684
        },
        "renderpass": [
            {
                "code": "const float hex_factor = 0.8660254037844386;\n\n#define HEX_FROM_CART(p) vec2(p.x / hex_factor, p.y)\n#define CART_FROM_HEX(g) vec2(g.x * hex_factor, g.y)\n#define LINECOLOR vec3(0.75, 0.75, 0.75)\n\nvec2 nearestHexCell(in vec2 pos) {\n    \n    // integer coords in hex center grid -- will need to be adjusted\n    vec2 gpos = HEX_FROM_CART(pos);\n    vec2 hex_int = floor(gpos);\n\n    // adjust integer coords\n    float sy = step(2.0, mod(hex_int.x+1.0, 4.0));\n    hex_int += mod(vec2(hex_int.x, hex_int.y + sy), 2.0);\n\n    // difference vector\n    vec2 gdiff = gpos - hex_int;\n\n    // figure out which side of line we are on and modify\n    // hex center if necessary\n    if (dot(abs(gdiff), vec2(hex_factor*hex_factor, 0.5)) > 1.0) {\n        vec2 delta = sign(gdiff) * vec2(2.0, 1.0);\n        hex_int += delta;\n    }\n\n    return hex_int;\n    \n}\n\n//////////////////////////////////////////////////////////////////////\n// Used only for visualization\n\nfloat hexDist(vec2 p) {\n    p = abs(p);\n    return max(dot(p, vec2(hex_factor, 0.5)), p.y) - 1.0;\n}\n\n//////////////////////////////////////////////////////////////////////\n// Main function\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float scl = 10.5 / iResolution.y;\n\n    float gridline_width = max(0.01, 0.125*scl);\n    float outline_dist = max(0.15, 3.0*scl);\n\n    //////////////////////////////////////////////////\n    // get fragment position\n    vec2 pos = (fragCoord.xy + 0.5 - .5*iResolution.xy) * scl;\n\n\n    //////////////////////////////////////////////////\n    // visualization\n\n    vec2 pos_cell = nearestHexCell(pos);\n    \n    float d = abs(hexDist(pos - CART_FROM_HEX(pos_cell)));\n\n    vec3 c;\n\n    c = LINECOLOR;\n\n    // grid lines\n    c *= smoothstep(0.0, scl, d-gridline_width);\n\n    fragColor = vec4(c, 1.0);\n            \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}