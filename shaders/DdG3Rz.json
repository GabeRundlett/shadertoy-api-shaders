{
    "Shader": {
        "info": {
            "date": "1678155773",
            "description": "vertical gradient",
            "flags": 0,
            "hasliked": 0,
            "id": "DdG3Rz",
            "likes": 0,
            "name": "vertical gradient",
            "published": 3,
            "tags": [
                "verticalgradient"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "//The shader code that embeds a 938x84 frame buffer at its largest size without stretching the input\n\nconst vec2 target_resolution = vec2(940, 86);\n\nvec4 firstColor = vec4(0.000,0.008,0.259,0.0);\nvec4 secondColor = vec4(0.000,0.129,0.639,1.0);\nvec4 thirdColor = vec4(0.259,0.506,1.000,1.0);\nvec4 fourthColor = vec4(0.780,0.851,1.000,1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n\tuv += .5;\n    uv.y -= 0.5/r - 0.5;    \n   \n    float h = 0.333;\n    vec4 col1 = mix(mix(firstColor, secondColor, uv.y/h), mix(secondColor, thirdColor, (uv.y - h)/(1.0 - h*2.0)), step(h, uv.y));  \n    vec4 col2 = mix(mix(secondColor, thirdColor, (uv.y - h)/(1.0 - h*2.0)), mix(thirdColor, fourthColor, (uv.y - h*2.0)/(1.0-h*2.0)), step(h*2.0, uv.y));\n    vec4 col = mix(col1,col2,step(h*2.0,uv.y));\n    fragColor = col;\n   \n    //fragColor = vec4(1.0);\n    // Black bars at the sides\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}