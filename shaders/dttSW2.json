{
    "Shader": {
        "info": {
            "date": "1685797361",
            "description": "An expensive but versatile smoothstep + periodic function, ignore the rendering artifacts.\n\nClick the origin to change offset, and elsewhere to change gradient and sharpness parameters.\n\nClearer visual here: https://www.desmos.com/calculator/6zhbfy9hcb",
            "flags": 32,
            "hasliked": 0,
            "id": "dttSW2",
            "likes": 15,
            "name": "Multi-Wave 2",
            "published": 3,
            "tags": [
                "2d",
                "pulse",
                "wave",
                "graph",
                "function",
                "smoothstep",
                "inverse",
                "periodic"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// About:\n// This was an attempt to improve this function\n// https://www.desmos.com/calculator/of9a6fkocv\n// so that it has a \"sharpness\" parameter n (move the mouse up and down)\n// it's VERY expensive compared to cos or sin but allows for great control\n// of the wave\n// Thanks to IQ for the graph code!\n\n// Alternatively, you can use the other functions here\n// (and their inverses) to do the same thing:\n// https://www.desmos.com/calculator/7m9bv3qpjx\n\n// \"Multi-wave\" using the exponential smooth-min from above link:\n// https://www.desmos.com/calculator/sw4e2swzgp\n// (I think this looks nicer, but is more expensive)\n\nfloat my_tanh(float x, float n) {\n    return x / pow(1. + pow(abs(x), n), 1./n);\n}\n\nfloat my_inverse_tanh(float x, float n) {\n    return x / pow(1. - pow(abs(x), n), 1./n);\n}\n\n// from [-1, 1] -> [-1, 1]\nfloat my_smoothstep(float x, float a, float o, float n) {\n    return my_tanh(a * (my_inverse_tanh(x, n) - my_inverse_tanh(o, n)), n);\n}\n\nfloat my_wave(float x, float a, float o, float n) {\n    return my_smoothstep(cos(8. * x - iTime), a, o, n);\n}\n\nvoid mainImage( out vec4 O, in vec2 fragCoord )\n{\t\n    float dx = 3. / res.y;\n    vec2 uv = 2.4 * (fragCoord - 0.5 * res) / res.y;\n    vec2 ms = 2.4 * (iMouse.xy - 0.5 * res) / res.y;\n    vec2 ouv = uv;\n    vec3 col = vec3(0);   \n    \n    // Background\n    vec2 chck = floor(4. * uv);\n    col = vec3(0.2 + 0.02 * mod(chck.x + chck.y, 2.));\n        \n    float rxy = res.x / res.y;\n    uv.x += 0.5 * rxy;    \n    ms.x += 0.5 * rxy;\n    \n    vec4 data = texelFetch(iChannel0, ivec2(0), 0);\n    \n    // Parameters: a = gradient, o = offset, n = sharpness\n    float a = 8. * data.z; \n    float o = data.x;\n    float n = 1. + 10. * (1. + data.w);\n    \n    bool inSquare = max(abs(uv.x), abs(uv.y)) <= 1.;\n    if (inSquare)\n    {    \n        // Smoothstep\n        float y  = my_smoothstep(uv.x, a, o, n);\n        float dy = my_smoothstep(uv.x-sign(uv.x-0.5)*dx, a, o, n) - y; // distance estimation\n        float di = abs(uv.y-y) / sqrt(dx*dx+dy*dy);    \n        if (uv.y < y && inSquare)\n            col = mix(col, vec3(.5, .5, 1), 0.15);\n        col = mix(col, vec3(1, 0.7, 0), 1.-smoothstep(0., 2., di));\n        \n        // Axes\n        col = mix(col, vec3(1), 0.1 * (1. - smoothstep(0., 2.*dx, abs(uv.x))));\n        col = mix(col, vec3(1), 0.1 * (1. - smoothstep(0., 2.*dx, abs(uv.y))));              \n    }\n    \n    // Draw cursor for offset parameter (o)\n    float dSlider = length(uv - vec2(data.x, 0));\n    float sSlider = smoothstep(0., 2.*dx, 2.*dx - abs(0.05 - dSlider));\n    col = mix(col, vec3(1), 0.7 * sSlider);\n    \n    // Draw cursor for gradient, sharpness parameters (a, n)\n    float dMouse = length(uv - data.zw);\n    col = mix(col, vec3(1), 0.7 * smoothstep(0., 2.*dx, 0.03 - dMouse));\n           \n    // Get new uv coordinates for wave\n    // (HOPEFULLY NOT OFF SCREEN)\n    float x = mix(0.4 * 0.5 * rxy, 1. + 0.5 * rxy, 0.5);  \n    vec2 uv2 = ouv - vec2(x, 0);\n    \n    bool inRect = abs(uv2.x) < 0.5 * rxy && abs(uv2.y) < 0.5;\n    if (inRect) {\n        // Wave\n        float y  = 0.25 * my_wave(uv2.x, a, o, n);\n        float dy = 0.25 * my_wave(uv2.x-sign(uv2.x-0.5)*0.66*dx, a, o, n) - y;\n        float di = abs(uv2.y-y) / sqrt(dx*dx+dy*dy);    \n        if (uv2.y < y)\n            col = mix(col, vec3(.5, 1, .5), 0.2);\n        col = mix(col, vec3(1, 0.7, 0), 1.-smoothstep(0., 2., di));\n\n        // Axes\n        col = mix(col, vec3(1), 0.1 * (1. - smoothstep(0., 2.*dx, abs(uv2.x))));\n        col = mix(col, vec3(1), 0.1 * (1. - smoothstep(0., 2.*dx, abs(uv2.y))));              \n    }\n    \n    if (!inSquare && !inRect)\n        col *= 0.75;\n    \n    O = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, in vec2 px )\n{\n    vec2 uv = 2.4 * (px - 0.5 * res) / res.y;\n    vec2 ms = 2.4 * (iMouse.xy - 0.5 * res) / res.y;\n    float rxy = res.x / res.y;\n    uv.x += 0.5 * rxy;    \n    ms.x += 0.5 * rxy;\n    \n    //  x: slider x coord, stored in [-1, 1] interval\n    //  y: is slider active (0 = no, 1 = yes)\n    // zw: clamped mouse position (when y == 0)\n    // Slider is used for offset parameter (o)\n    // Mouse position is used for gradient, sharpness parameters (a, n)\n    vec4 data = texelFetch(iChannel0, ivec2(0), 0);\n       \n    if (px == vec2(0.5)) {\n        if (iFrame < 1)\n            O = vec4(0, 0, 0.2, 0.1);\n        else\n            O = data;\n\n        if (iMouse.w > 0.) {\n            if (length(ms - vec2(O.x, 0)) < 0.13) {\n                O.x = clamp(ms.x, -0.995, 0.995);\n                O.y = 1.;\n            }\n        } else if (iMouse.z > 0.) {\n            if (O.y == 1.)\n                O.x = clamp(ms.x, -0.995, 0.995);\n        } else \n            O.y = max(0., O.y - 1.);\n        \n        if (O.y == 0. && data.y == 0. && iMouse.z > 0.)\n            O.zw = clamp(ms, -1., 1.);\n    }\n    else \n        O = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define res iResolution.xy",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}