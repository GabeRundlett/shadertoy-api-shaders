{
    "Shader": {
        "info": {
            "date": "1726666083",
            "description": "Auditory illusion where when two tones are played, a third tone is perceived with a frequency equal to the difference between the frequencies of the two tones.",
            "flags": 8,
            "hasliked": 0,
            "id": "l3XcWj",
            "likes": 5,
            "name": "Difference Tones - Aud. Illusion",
            "published": 3,
            "tags": [
                "audio",
                "illusion",
                "sine",
                "sinewave",
                "auditoryillusion"
            ],
            "usePreview": 0,
            "username": "Dev1ati0n",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "vec2 textTL[24] = vec2[24](\n\nvec2(4,-4),vec2(5,-4),vec2(0,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8),\n\nvec2(4,-4),vec2(3,-4),vec2(2,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8),\n\nvec2(4,-4),vec2(2,-4),vec2(0,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8),\n\nvec2(4,-4),vec2(4,-4),vec2(0,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8)\n\n);\n\nfloat freqTL[4] = float[4](450.,432.,420.,440.);\n\nvec2 textTR[6] = vec2[6](\n\nvec2(3,-4),vec2(6,-4),vec2(0,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8)\n\n);\n\nvec2 textB[20] = vec2[20](\n\nvec2(9,-4),vec2(0,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8),\n\nvec2(7,-4),vec2(2,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8),\n\nvec2(6,-4),vec2(0,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8),\n\nvec2(8,-4),vec2(0,-4),vec2(0,-3),vec2(8,-5),vec2(10,-8)\n\n);\n\nfloat freqB[4] = float[4](90.,72.,60.,80.);\n\nint chords[8] = int[8](0,0,1,1,2,2,1,3);\n\nint textB2[22] = int[22](56,126,127,132, 48,113,115,132, 133,113,124,124, 137,48,128,124 ,113,137,121,126 ,119,57);\n\nbool inRect( vec2 p, float x1, float x2, float y1, float y2){\n\n    return (x1<p.x)&&(p.x<x2)&&(y1<p.y)&&(p.y<y2);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n\n    vec2 uv = fragCoord/iResolution.x;\n\n    vec4 bgCol = vec4(.2,.2,.3,0);\n\n    vec4 textCol = vec4(.8,.9,1.,0);\n\n    fragColor = bgCol;\n\n    float screenHeight = iResolution.y/iResolution.x;\n\n    float cycle = mod(iTime*1.3458,8.);\n\n    float freqMult = .3;\n\n    float amp = .08*screenHeight;\n\n    float strokeWidth = .002;\n\n    int Chord = chords[int(cycle)];\n\n    if((.1<uv.x)&&(uv.x<.4)&&(uv.y>.55*screenHeight)&&(uv.y<.8*screenHeight)){\n\n        float x = uv.x*freqTL[Chord]*freqMult+6.2832*fract(iTime);\n\n        float y = uv.y - .675*screenHeight;\n\n        float wave = sin(x)*amp;\n\n        float slope = cos(x)*amp*freqTL[Chord]*freqMult;\n\n        float stroke = sqrt(1.+slope*slope)*strokeWidth;\n\n        float diff = iResolution.x*(abs(y-wave)-stroke)/(1.+abs(slope));\n\n        fragColor = mix(textCol,bgCol,clamp(diff,-.5,.5)+.5);\n\n    }\n\n    \n\n    if((.6<uv.x)&&(uv.x<.9)&&(uv.y>.55*screenHeight)&&(uv.y<.8*screenHeight)){\n\n        float x = uv.x*360.*freqMult+6.2832*fract(iTime);\n\n        float y = uv.y - .675*screenHeight;\n\n        float wave = sin(x)*amp;\n\n        float slope = cos(x)*amp*360.*freqMult;\n\n        float stroke = sqrt(1.+slope*slope)*strokeWidth;\n\n        float diff = iResolution.x*(abs(y-wave)-stroke)/(1.+abs(slope));\n\n        fragColor = mix(textCol,bgCol,clamp(diff,-.5,.5)+.5);\n\n    }\n\n    \n\n    if((.3<uv.x)&&(uv.x<.7)&&(uv.y<.25*screenHeight)){\n\n        float x = uv.x*freqB[Chord]*freqMult+6.2832*fract(iTime);\n\n        float y = uv.y - .125*screenHeight;\n\n        float wave = sin(x)*amp;\n\n        float slope = cos(x)*amp*freqB[Chord]*freqMult;\n\n        float stroke = sqrt(1.+slope*slope)*strokeWidth;\n\n        float diff = iResolution.x*(abs(y-wave)-stroke)/(1.+abs(slope));\n\n        fragColor = mix(textCol,bgCol,clamp(diff,-.5,.5)+.5);\n\n    }\n\n    \n\n    float textWidth = 0.15*screenHeight;\n\n    \n\n    if((.25-textWidth<uv.x)&&(uv.x<textWidth+.25)&&(uv.y>.85*screenHeight)&&(uv.y<.95*screenHeight)){\n\n        float x = 20.*(uv.x-.25)/screenHeight+3.;\n\n        int X = int(x);\n\n        x = mod(x,1.)*.5+.25;\n\n        float y = 10.*(uv.y/screenHeight-.85);\n\n        fragColor = mix(bgCol,textCol,texture(iChannel0, (vec2(x,y)+textTL[Chord*6+X])*.0625).r);\n\n    }\n\n    \n\n    if((.75-textWidth<uv.x)&&(uv.x<textWidth+.75)&&(uv.y>.85*screenHeight)&&(uv.y<.95*screenHeight)){\n\n        float x = 20.*(uv.x-.75)/screenHeight+3.;\n\n        int X = int(x);\n\n        x = mod(x,1.)*.5+.25;\n\n        float y = 10.*(uv.y/screenHeight-.85);\n\n        fragColor = mix(bgCol,textCol,texture(iChannel0, (vec2(x,y)+textTR[X])*.0625).r);\n\n    }\n\n    \n\n    textWidth = .125*screenHeight;\n\n    \n\n    if((.5-textWidth<uv.x)&&(uv.x<textWidth+.5)&&(uv.y>.35*screenHeight)&&(uv.y<.45*screenHeight)){\n\n        float x = 20.*(uv.x-.5)/screenHeight+2.5;\n\n        int X = int(x);\n\n        x = mod(x,1.)*.5+.25;\n\n        float y = 10.*(uv.y/screenHeight-.35);\n\n        fragColor = mix(bgCol,textCol,texture(iChannel0, (vec2(x,y)+textB[Chord*5+X])*.0625).r);\n\n    }\n\n    \n\n    textWidth = .275*screenHeight;\n\n    \n\n    if((.5-textWidth<uv.x)&&(uv.x<textWidth+.5)&&(uv.y>.275*screenHeight)&&(uv.y<.325*screenHeight)){\n\n        float x = 40.*(uv.x-.5)/screenHeight+11.;\n\n        int X = int(x);\n\n        x = mod(x,1.)*.5+.25;\n\n        float y = 20.*(uv.y/screenHeight-.275);\n\n        fragColor = mix(bgCol,textCol,texture(iChannel0, (vec2(x,y)+vec2(textB2[X],-(textB2[X]>>4)))*.0625).r);\n\n    }\n\n    \n\n    if((.48<uv.x)&&(uv.x<.52)){\n\n        if(abs(uv.y-screenHeight*.9)<.003){fragColor = textCol;}\n\n        if(abs(uv.y-screenHeight*.5+.01)<.003){fragColor = textCol;}\n\n        if(abs(uv.y-screenHeight*.5-.01)<.003){fragColor = textCol;}\n\n    }\n\n}\n\n// texture(iChannel0, (uv+vec2(num,-4))*.0625)\n\n// (: (8,-3)\n\n// A: (1,-5)\n\n// a: (1,-7)\n\n//  : (0,-3)\n\n// width = 0.44",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int chords[8] = int[8](0,0,1,1,2,2,1,3);\nfloat freqs[4] = float[4](.064114136,.06154957,.05983986,.062689377);\nvec2 mainSound( int samp, float time )\n{\n    int modSamp = samp&65535;\n    int chord = (samp>>15)&7;\n    \n    return .5*vec2( sin(float(modSamp)*freqs[chords[chord]])+sin(float(modSamp)*.051291309) );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}