{
    "Shader": {
        "info": {
            "date": "1608853080",
            "description": "Um hopefully the title doesnâ€™t give it away\nMade this some time before; was planning to do more but making other stuffs now.\nHope you like my Fresnel",
            "flags": 0,
            "hasliked": 0,
            "id": "WdyyRt",
            "likes": 1,
            "name": "A sphere, a capsule, and a plane",
            "published": 3,
            "tags": [
                "sphere",
                "raymarcher",
                "plane",
                "capsule"
            ],
            "usePreview": 0,
            "username": "Rowsej",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "#define MAX_RAY_DIS 4.1\n#define EPSILON 0.001\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\nfloat sdPlane(vec3 p, float y) {\n    return p.y - y;\n}\nfloat sdVerticalCapsule(vec3 p, float h, float r) {\n    vec3 closestP = vec3(0.0, clamp(p.y, 0.0, h), 0.0);\n    return length(p - closestP) - r;\n}\nfloat sdCapsules(vec3 p, float cx, float r) {\n    return 0.0;\n}\nfloat getSde(vec3 p) {\n    //return min(length(p) - 1.0, p.y + 0.4);\n    return min(min(sdSphere(p, 1.0), sdPlane(p, -0.4)), sdVerticalCapsule(p - vec3(-1.2, -0.2, -0.2), 1.0, 0.1));\n}\nfloat marchShadowRay(vec3 ro, vec3 l) {\n    vec3 rd = normalize(l - ro);\n    float ld = length(l - ro);\n    float t = EPSILON * 15.0;\n    while(t < MAX_RAY_DIS * 3.0) {\n        float sde = getSde(ro + rd * t);\n        if(sde < EPSILON) {\n            break;\n        }\n        t += sde;\n        if(t >= ld) {\n            return 1.0;\n        }\n    }\n    return 0.0;\n}\n// Thanks to Baron for this\nvec3 getSkyCol(vec3 rd) {\n    float t = (rd.y + 1.0) / 2.0;\n    return vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n}\n// Thanks to IQ for this\nvec3 estimateNormal(vec3 p) {\n    vec2 h = vec2(EPSILON, 0.0);\n    return normalize(vec3(getSde(p + h.xyy) - getSde(p - h.xyy),\n                         getSde(p + h.yxy) - getSde(p - h.yxy),\n                         getSde(p + h.yyx) - getSde(p - h.yyx)));\n}\nvec3 getPixel(vec2 coords) {\n    //vec3 ro = vec3(sin(iTime) * 3.0, 0.0, cos(iTime) * -3.0);\n    //vec3 ro = vec3(0.0, 0.0, -3.0);\n    vec3 ro = vec3(0.0, 0.0, -3.0 + sin(iTime / 2.0));\n    float ry = iTime;\n    //vec3 rd = normalize(vec3(cos(ry + 90.0) + cos(ry) * coords.x, coords.y, sin(ry + 90.0) + sin(ry) * coords.x));\n    vec3 rd = normalize(vec3(coords, 1.0));\n    float t = 0.0;\n    bool hit = false;\n    while(t < MAX_RAY_DIS) {\n        float sde = getSde(ro + rd * t);\n        if(sde < EPSILON) {\n            hit = true;\n            break;\n        }\n        t += sde;\n    }\n    if(hit) {\n        vec3 col = vec3(0.2, 0.8, 0.6);\n        vec3 p = ro + rd * t;\n        //vec3 lightPos = vec3(0.0, 2.0, -3.0);\n        vec3 lightPos = vec3(sin(iTime) * 3.0, 2.0, cos(iTime) * -3.0);\n        float lightOnPoint = marchShadowRay(p, lightPos);\n        if(lightOnPoint == 0.0) {\n            return col * 0.1;\n        }\n        vec3 norm = estimateNormal(p);\n        vec3 lightDir = normalize(lightPos - p);\n        float ambient = 0.1;\n        float diffuse = clamp(dot(norm, lightDir), 0.0, 1.0);\n        float shininess = 32.0;\n        float specular = clamp(pow(dot(reflect(lightDir, norm), rd), shininess) * (1.0 - dot(norm, lightDir)), 0.0, 1.0);\n        return (col * (ambient + diffuse) + vec3(1.0, 1.0, 1.0) * specular) * lightOnPoint;\n    }\n    return getSkyCol(rd);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float mind = min(iResolution.x, iResolution.y);\n    vec2 coords = fragCoord;\n    if(mind == iResolution.y) {\n        coords.x -= (iResolution.x - mind) / 2.0;\n    } else {\n        coords.y -= (iResolution.y - mind) / 2.0;\n    }\n    coords = coords / mind - 0.5;\n    vec3 col = getPixel(coords);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}