{
    "Shader": {
        "info": {
            "date": "1698017915",
            "description": "Audio Line",
            "flags": 0,
            "hasliked": 0,
            "id": "cdyBRw",
            "likes": 3,
            "name": "Audio Line",
            "published": 3,
            "tags": [
                "line",
                "audio"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 80
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265358;\n\nfloat rand(vec2 n) \n{ \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 perm(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\n\nfloat noise(vec3 p)\n{\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat noiseStack(vec3 pos,int octaves,float falloff){\n\tfloat n = noise(vec3(pos));\n\tfloat off = 1.0;\n\tif (octaves>1) {\n\t\tpos *= 2.0;\n\t\toff *= falloff;\n\t\tn = (1.0-off)*n + off*noise(vec3(pos));\n\t}\n\tif (octaves>2) {\n\t\tpos *= 2.0;\n\t\toff *= falloff;\n\t\tn = (1.0-off)*n + off*noise(vec3(pos));\n\t}\n\tif (octaves>3) {\n\t\tpos *= 2.0;\n\t\toff *= falloff;\n\t\tn = (1.0-off)*n + off*noise(vec3(pos));\n\t}\n\treturn (1.0+n)/2.0;\n}\n\nvec2 noiseStackUV(vec3 pos,int octaves,float falloff,float diff){\n\tfloat displaceA = noiseStack(pos,octaves,falloff);\n\tfloat displaceB = noiseStack(pos+vec3(3984.293,423.21,5235.19),octaves,falloff);\n\treturn vec2(displaceA,displaceB);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min_res;\n\n    const float w = 0.05; // Line Width\n    const vec3 c = vec3(0, 0.05, 1); // Line Color\n    \n    \n    vec3 col = vec3(0);\n    float audio = texelFetch(iChannel0, ivec2(0), 0).r;\n    float y = sin((-iTime * 0.5 + uv.x) * PI) / (2.0 + uv.x * uv.x * 8.0) * audio;\n    float vy = uv.y + 0.4;\n    \n    float d1 = smoothstep(w, 0.0, abs(vy - y));\n    col += c * d1;\n    col += d1 * d1 * d1 * d1 * 0.5;\n    \n    float d2 = smoothstep(w, 0.0, abs(vy + y));\n    col += c * d2;\n    col += d2 * d2 * d2 * d2 * 0.5;\n    \n    float d3 = smoothstep(w, 0.0, abs(vy - y * 0.5));\n    col += c * d3 * 0.3;\n    col += d3 * d3 * d3 * d3 * 0.2;\n    \n    float d4 = smoothstep(w, 0.0, abs(vy + y * 0.5));\n    col += c * d4 * 0.3;\n    col += d4 * d4 * d4 * d4 * 0.2;\n    \n    // Sparks\n    const float up_flow = 8.0;\n\tfloat spark_grid_size = min_res / 20.0;\n    float rt = iTime * 0.5;\n\tvec2 spark_uv = fragCoord - spark_grid_size * vec2(0, up_flow * rt);\n\tspark_uv -= spark_grid_size * noiseStackUV(0.01 * vec3(spark_uv, 30.0 * iTime), 1, 0.4, 0.1);\n\tif (mod(spark_uv.y / spark_grid_size, 2.0) < 1.0) spark_uv.x += 0.5 * spark_grid_size;\n\tvec2 spark_grid_idx = vec2(floor(spark_uv / spark_grid_size));\n\tfloat spark_random = rand(spark_grid_idx);\n\tfloat spark_life = min(10.0 * (1.0 - min((spark_grid_idx.y) / (24.0 - 20.0 * spark_random), 1.0)), 1.0) * (0.6 + 0.45 * audio);\n\tvec3 sparks = vec3(0);\n\tif (spark_life > 0.0) {\n\t\tfloat spark_size = spark_random * 0.3;\n\t\tfloat spark_radians = 999.0 * spark_random * 2.0 * PI + 2.0 * iTime;\n\t\tvec2 spark_circular = vec2(sin(spark_radians), cos(spark_radians));\n\t\tvec2 spark_off = (0.5 - spark_size) * spark_grid_size * spark_circular;\n\t\tvec2 spark_modulus = mod(spark_uv + spark_off, spark_grid_size) - 0.5 * vec2(spark_grid_size);\n\t\tfloat spark_length = length(spark_modulus);\n\t\tfloat sparks_gray = max(0.0, 1.0 - spark_length / (spark_size * spark_grid_size));\n\t\tsparks = spark_life * sparks_gray * c + pow(spark_life * sparks_gray, 4.0);\n\t}\n    sparks *= smoothstep(-0.4, -0.0, uv.y);\n    sparks *= smoothstep(1.0, 0.0, uv.y);\n    col += sparks;\n    \n    col *= 1.0 - abs(fragCoord.x / iResolution.x * 2.0 - 1.0);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}