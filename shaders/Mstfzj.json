{
    "Shader": {
        "info": {
            "date": "1526272053",
            "description": " ",
            "flags": 1,
            "hasliked": 0,
            "id": "Mstfzj",
            "likes": 13,
            "name": "Abstract_DNA",
            "published": 3,
            "tags": [
                "raymarching",
                "dna"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 956
        },
        "renderpass": [
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nvec3\tcalcNormal( in vec3 pos, float e, vec3 dir);\nfloat\tloop_circle(vec3 p);\nfloat\tcircle(vec3 p, float phase);\nfloat\tsdTorus( vec3 p, vec2 t, float phase );\nfloat\tmylength(vec2 p);\nfloat\tmylength(vec3 p);\nfloat\tnrand( vec2 n );\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\n\n#define I_MAX\t\t200.\n#define E\t\t\t0.0001\n#define FAR\t\t\t200.\n#define PI\t\t\t3.14159\n#define TAU\t\t\tPI*2.\n\n/*\n* Leon's mod polar from : https://www.shadertoy.com/view/XsByWd\n*/\n\nvec2 modA (vec2 p, float count) {\n    float an = TAU/count;\n    float a = atan(p.y,p.x)+an*.5;\n    a = mod(a, an)-an*.5;\n    return vec2(cos(a),sin(a))*length(p);\n}\n\n/*\n* end mod polar\n*/\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    rotate(dir.xz, iMouse.x*.01);\n    vec3\tpos = vec3(.0, .0, 0.0);\n\n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    ret_col = vec3(.490, .482, .470);\n    col.xyz = ret_col*((1.-inter.x*.005)+inter.y*.005);\n    col += h*.005;\n\n    c_out =  vec4(col,1.0);\n}\n\nvoid mainVR( out vec4 c_out, in vec2 f, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = fragRayDir;\n    vec3\tpos = fragRayOri;\n\n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    ret_col = vec3(.490, .482, .470);\n    col.xyz = ret_col*((1.-inter.x*.005)+inter.y*.005);\n    col += h*.005;\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tscene(vec3 p)\n{\n    float\tvar;\n    float\tmind = 1e5;\n\n    p.z-=iTime*2.;\n\n    p.y-= -4.;\n    p.z -= -3.;\n    p.x -= 5.;\n    p.y -= -9.;\n    rotate(p.xz, 1.5);\n    vec3 sp = p;\n    vec3 op = p;\n    \n    p = op;\n    \n    float dd = .030625;\n\top.zy = fract(op.zy*dd)-.5;\n    op.zy /=dd;\n\n    rotate(op.yz, -iTime*.25 + op.x*.15);\n    float num = .5;\n    vec3 rp = op;\n    op.x = fract(op.x*num)-.5;\n    op.x /= num;\n    p = op;\n    \n    p = p.xyz-vec3(.0, -0., 0.);\n    p.z = abs(p.z)-10.;\n    float mada = max(max(abs(p.x)-.9, abs(p.y)-.8), abs(p.z)-.62 );\n    float light_wave = length(p.zy-vec2(-4.0,-8.))-1.*sin(rp.x*.25+iTime);\n    light_wave = abs(light_wave)+.05;\n    float light_wave2 = mylength( (fract((sp-vec3(.0+iTime*4.,.0,0.) ).xyz*.03125)-.5)/.03125 )-16.;\n    mada = min(mada, light_wave);\n    light_wave2 = abs(light_wave2)+.05;\n\n    h += vec3(.1, .4, .1)*vec3(1.)*.25/max(.001, .051 + 1.*light_wave*light_wave );\n    h += vec3(.51, .4, .1)*vec3(1.)*.25/max(.001, .051 + 1.*light_wave2*light_wave2 );\n    mind = min(mind, mada);\n    \n    p = op;\n    float ten0 = mylength(p.xy)-.2;\n    p = op;\n    p.z = fract(p.z*3.)-.5;\n    p.z /= 3.;\n\n    rotate(p.xy, (op.z*1.)*1.+iTime*1. );\n\n    float ming = mylength(vec3(abs(p.y)-.5, p.xz))-.105;\n\n    float caps = 1e5;\n    rotate(p.xz, p.y*5.+iTime*-4.);\n    p.xz = modA(p.xz, 2.);\n    p.x -= .06125;\n    \n    caps = max(length(p.xz)-.01, -p.y-0.9*.5);\n    caps = max(caps, p.y-.9*.5);\n    caps = min(caps, max(max(length(vec2(p.z, (fract(p.y*16.)-.5)/16. ) )-.01, p.x-.01), -p.x-.05) );\n    caps = max(caps, +p.y-.5);\n    caps = max(caps, -p.y-.5);\n    ming = min(ming, caps);\n    ming = max(ming, op.z-10.);\n    ming = max(ming, -op.z-10.);\n    ten0 = ming;\n    ten0 = min(ten0, mada);\n    p = op;\n    p.yx = modA(p.yx, 5.);\n    p.y -= 3.;\n    p.x = max(abs(fract(p.z)-.5 ), max(abs(p.x), abs(p.y)))-.5125;\n    float ten1 = 1e5+length(p.xy)-.02;\n    float ten2 = min(ten0, ten1);\n\n    mind = min(mind, ten2);\n\n    h -= (vec3(.05,.05,-0.505))*vec3(1.)*.0125/max(.01, .01+mind*mind);\n\n    return (mind)*.75;\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n\t    for (float i = -1.; i < I_MAX; ++i)\n\t    {\n\t    \tp = pos + dir * dist.y;\n\t        dist.x = scene(p);\n\t        dist.y += dist.x*.2; // makes artefacts disappear\n\t        if (dist.x < E || dist.y > FAR)\n            {\n                break;\n            }\n\t        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n\n    ret = max(abs(p.x), abs(p.y));\n\n    return ret;\n}\n\nfloat\tmylength(vec3 p)\n{\n\tfloat\tret;\n\n    ret = max(max(abs(p.x), abs(p.y)), abs(p.z));\n\n    return ret;\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}