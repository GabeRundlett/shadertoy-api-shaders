{
    "Shader": {
        "info": {
            "date": "1513116378",
            "description": "more melting font fun... :)",
            "flags": 0,
            "hasliked": 0,
            "id": "MtfBWB",
            "likes": 2,
            "name": "Circle Melt Text",
            "published": 3,
            "tags": [
                "sdf",
                "text",
                "deform",
                "melt"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 645
        },
        "renderpass": [
            {
                "code": "// 2d sdf + lighting code taken from https://www.shadertoy.com/view/MsXBWH by wutzhuhn\n// Melt Circle Text added by Del 12/12/2017\n#define roundnes 0.065\n\n#define PI 3.14159265\n#define DEG2RAD ((PI * 2.0) / 360.0)\n\nfloat subtract(float a, float b)\n{\n\treturn min(max(a, -b), -roundnes) + length(max(vec2(roundnes) + vec2(a, -b), vec2(0.0)));\n}\n\nfloat merge(float a, float b)\n{\n\treturn max(min(a, b), roundnes) - length(max(vec2(roundnes) - vec2(a, b), vec2(0.0)));\n}\n\nmat2 rotate(float a)\n{\n    float sa = sin(a), ca = cos(a);\n\treturn mat2(ca, -sa, sa, ca);\n}\n\nfloat circle(vec2 p, float radius)\n{\n\treturn length(p) - radius;\n}\n\n // --- access to the image of ascii code c\nfloat char(inout vec2 p, int C,float d,float w)\n{\n    //p*=4.2;\n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.)\n    {\n        p.x -= w;\n        return d;\n        //return 1e5;\n    }\n    vec4 cc = textureGrad( iChannel0, p/16. + fract( vec2(C, 15-C/16) / 16. ) , dFdx(p/16.),dFdy(p/16.) );\n    p.x -= w;\n\n    if (iMouse.z>0.5)\n \t   return min(d,(cc.w-0.525)*0.3);    \t\t// 0.3 = blur\n\n    return min(d,(cc.w-0.51)*0.3);    \t\t// 0.3 = blur\n}\n\n\n// http://mercury.sexy/hg_sdf/\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// Central 'DEL' text...\nfloat fontDist(vec2 p)\n{\n    pMod1(p.x,0.449);\n\n    p += vec2(0.24,0.12);\n    p*=4.2;\n    \n    float d = 1e5;\n    float w = 0.504;\n    \n    d =  char(p,68,d,w);\n    d =  char(p,69,d,w);\n    d =  char(p,76,d,w);\n    return d;\t//(min(min(d1,d2),d3));\n}\n\nfloat CircleText(vec2 p)\n{\n    float sinsize = (0.5+sin(iTime*0.7+sin(p.x+p.x)))*0.15;\n    p*=0.45+(0.5+sin(iTime*1.55))*sinsize;\n\tfloat r = length(p);\n    float yp1 = 0.2;\n    if (r>yp1 && r<yp1+0.1)\n    {\n\t\tfloat speed = iTime*0.5;\n\t\tfloat a = atan(p.y,p.x);\n        float yp = (2.0* PI*(r*r));\n        float xp = -a;\n        vec2 p2 = vec2(xp+speed, (yp-0.4)*1.4);\n        return fontDist(p2*0.5);\n    }\n\treturn 1.0;\n}\n\n// render Mask + Repeating 'DEL'\nvec4 shapeDist(vec2 p)\n{\n    p*=1.4;\n    \n\tfloat mask = circle(p,0.70);\n\tmask = subtract(mask,circle(p,0.42));\n\t//mask = min(mask,circle(p,0.32));\n    \n    \n    vec4 res = vec4(0.0);\n    res.w = CircleText(p);\n    res.w = subtract(mask,res.w);\n  \n    const vec3 maskcol = vec3(0.2,0.3,0.5);\n    const vec3 fontcol = vec3(0.65,0.9,0.65);\n    \n    // blend hack\n    float blenddist = 0.05;\n    float blend = mask<-blenddist ? 1.0 : clamp((-mask)*1.0/blenddist,0.0,1.0);\n    res.xyz = mix(maskcol,fontcol,blend);\n    return res;\n}\n\nvec4 maskSharp(vec2 p)\n{\n    vec4 res = shapeDist(p);\n    res.w = clamp(res.w * 250.0, 0.0, 1.0);\n    return res;\n}\n\nfloat maskBlurry(vec2 p)\n{\n    return clamp((shapeDist(p).w + 0.003) * 75.0, 0.0, 1.0);\n}\n\nvec3 normalAt(vec2 p)\n{\n    float ps = 1.0 / iResolution.x;\n    float x = maskBlurry(p - vec2( ps, 0.0)) - maskBlurry(p + vec2( ps, 0.0));\n    float y = maskBlurry(p - vec2(0.0,  ps)) - maskBlurry(p + vec2(0.0,  ps));\n    return normalize(vec3(x, y, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p = ( fragCoord -.5*iResolution.xy ) / iResolution.y;\n    vec3 color = vec3(0.3,0.32,0.3);\n    vec4 res = maskSharp(p);\n    float shade = 0.0;\n    if (res.w>0.0)\n    {\n        float z = (0.5+sin(iTime*3.5))*0.1;\n        vec3 lightPos = vec3(-0.5, -0.3, 0.25+z);\n        vec3 toLight = lightPos - vec3(p, 0.0);\n        vec3 normal = normalAt(p);\n        color = res.xyz;\n        color *= 0.35+clamp(dot(normalize(toLight), normal), 0.0, 1.0) / 0.95 ;;\n        \n    }\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}