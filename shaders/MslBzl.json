{
    "Shader": {
        "info": {
            "date": "1497725862",
            "description": "connect all the poles !\n( only 3 levels for now )\n\n[url]https://en.wikipedia.org/wiki/Flow_Free[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "MslBzl",
            "likes": 21,
            "name": "Flow free",
            "published": 3,
            "tags": [
                "game",
                "puzzle",
                "connect"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 921
        },
        "renderpass": [
            {
                "code": "#define T(u)    texelFetch(iChannel0, ivec2(u), 0)\n#define s(v,e)  smoothstep(.5,.45,v+e)\n#define line(L) 1. - s( abs( fract((L.x==0.?U.x:U.y)+.5) - .5 ), .45-E ) \n#define E .15                                         // pipe thickness\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float S = T(0).z,                                   // size\n          s = S+1.,                                     // T(u+s): links associated to T(u)\n          n = T(2).w,                                   // number of poles pair\n          t = T(0).w,                                   // current timestamp\n          m = 0.;\n    U *= (S+2.)/iResolution.y; U.x -= 3.;               // cell id\n    float V = U.x<0. ? -1. : T(U).x;                    // cell content\n    if (U.x<=1.||U.y<=1.||U.x>=S+1.||U.y>=S+1.){        // out of grid\n        V = T(0).x; \n        if (V==-1.) { O =  vec4(.82); return; }         // grey\n            else m = 1.;                                // if end of game: flash\n    }\n    O =   .5 + .5 * cos( mod(V,100.)*6.3/n + vec4(0,2.1,-2.1,0) ); // pipe color\n    if (V>0.) {\n        vec2 L = T(U+s).xy, bL = T(U+s).zw, D=L+bL,     // link, back link\n             F = fract(U)-.5;\n        if (T(U).y != t ) O += .7;                      // out of date -> disconnected pipe (if not cleaned up)\n        if (T(U).z==t) O += s(length(F),.3);            // poles connected\n                                                        // --- pipe mask\n        m  =  L==vec2(0)&&bL==vec2(0)   ?      0.       // pole alone\n            : L==vec2(0)        ? dot(F,bL)<0. ? s(length(F),E) : line(bL) // cap\n            :bL==vec2(0)||L==bL ? dot(F, L)<0. ? s(length(F),E) : line( L) // cap\n            : L==-bL     ? line(L)                      // line \n                         : s(abs(length(F-.5*D)-.5),E); // turn\n        if (V>100.) m += (1.-m)*s(length(F),0.) ;       // disk\n    }\n    O = mix(vec4(1), O, m);\n  \n  //O -= step(length(U-T(vec2(1,0)).yz-.5),.2);        // debug: mouse pos\n  //if (step(length(F),.2)==1.) O=vec4(.5+.5* (fract(U.y)>.5?L:bL)[int(fract(U.x)>.5)]);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(u)        texelFetch(iChannel0, ivec2(u), 0)\n#define pos(n)      ( u == ivec2(n) )\n#define set(X,Y,v)  n++; if pos(vec2(X,Y)) O.x = v+100.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 u = ivec2(U), m;\n    if (T(0).z == 0.) {                                  // restart game\n        float n = 0.; int S, g = int(T(0).y) + 0 ;       // + N to start at level N-1\n        O -= O;\n        if (g == 0) {                                    // game #1\n            S=6;                                         // 6x6                                       \n            set(4,1, 1.);                                // --- setup poles.\n            set(6,2, 1.);\n            set(2,2, 2.);\n            set(4,3, 2.);\n            set(4,2, 3.);\n            set(6,6, 3.);\n            set(5,2, 4.);\n            set(3,4, 4.);\n            set(2,4, 5.);\n            set(6,3, 5.);\n        } \n        else if (g == 1) {                               // game #2\n            S=6;                                         // 6x6                                       \n            set(3,4, 1.);                                // --- setup poles.\n            set(5,2, 1.);\n            set(4,2, 2.);\n            set(4,5, 2.);\n            set(4,4, 3.);                                \n            set(6,6, 3.);\n            set(4,6, 4.);\n            set(6,5, 4.);\n        } \n        else if (g == 2) {                               // game #3\n            S=8;                                         // 8x8                                       \n            set(2,7, 1.);                                // --- setup poles.\n            set(3,3, 1.);\n            set(2,2, 2.);\n            set(6,2, 2.);\n            set(7,2, 3.);                                \n            set(6,4, 3.);\n            set(5,3, 4.);\n            set(8,5, 4.);\n            set(2,6, 5.);                                \n            set(5,4, 5.);\n            set(5,8, 6.);\n            set(8,7, 6.);\n        } \n        else  g = S = 0; \n        if (u.x==0||u.y==0||u.x==S+1||u.y==S+1) O.x--;   // walls\n                                                         // --- global flags\n        if pos(0) O.yz = vec2(g,S);                      // store game, size, Y out\n        if pos(2) O.w = n/2.;                            // store number of poles pair\n#define D vec2(1,0)                                      // store mouse drag info \n        return;\n    }\n    \n    O = T(u);                                            // previous cell state\n    float V,v, S = T(0).z;                               // size\n    int s=int(S)+1;                                      // T(u+s): links associated to T(u)\n \n\n    v = 0.;                                              // --- finished ? \n    for (int j=1; j<s; j++)\n       for (int i=1; i<s; i++)                           // count connected pipes\n           if ( T(vec2(i,j)).z == T(0).w ) v++;         \n    //     if ( T(vec2(i,j)).x == 0. ) v--; }            // we should also check no empty cell\n\n    if (v == T(2).w) {                                   //    win !\n        if (O.x<0. && max(u.x,u.y)<s) O.x--;             // flash during 135 frames\n        if (pos(0) && O.x<-135.) O.y++, O.z = 0.;        // next game\n        return;                                          // ( important... but droped by linux compiler )\n    }\n\n    if (max(U.x,U.y)>S+S+3.) return;                     // out of grid\n\n    if pos(0) O.w++;                                     // --- test connectivity with timestamps\n    if (max(U.x,U.y)<=S+1. && O.x > 0.) {\n        if (O.x>100.) O.y++;                             // timestamp source at poles\n        else if (T(0).w-O.y>1.) O.x=0.;                  // out of date -> deconnected -> clean up\n        if (O.x>0.) {                    // propagate timestamp if reciprocal connections valid\n            ivec2  bL  = u+ivec2(T(u+s).zw),             // back link\n                   bL2 =bL+ivec2(T(bL+s).xy);            // reciprocal\n            if (bL!=u && bL2==u) O[1+int(O.x>100.)] = T(bL).y+1.; // propagate (in O.w if final pole)\n         // else clean up links... but they are at u+s.\n      }\n    }\n                                                         // --- mouse \n    m = ivec2(iMouse.xy*(S+2.)/iResolution.y); m.x -= 3; // cell id under mouse\n    if pos(D)                                            // mouse storage\n        O.yzw = iMouse.z<=0. ? vec3(0)                   // reset init mouse drag\n                             : O.y==0. ? vec3(m, mod(T(m).x,100.)) // init drag: (pos,content)\n                             : O.yzw ;\n\n    if (iMouse.z>0.) {                                   // on click\n        vec4 M = T(D);                                   // drag start values\n        V = M.w; ivec2 m0 = ivec2(M.yz),                 // clicked content\n                       dm = m - m0;                      // drag vector \n        if (abs(dm.x)<abs(dm).y) dm.x=0; else dm.y=0;    // constrained max step\n        dm = sign(dm);                                   // \n        V = mod(T(m0).x,100.);                           // fix white ghost when downstamped\n        v = T(m0+dm).x;                                  // target cell content\n        if (V>0. && dm!=ivec2(0) && v>=0. && !(v>100.&&v!=V+100.)) {  // valid move      \n            if (pos(m0+dm) && v<100.)  O.x = V, O.y=T(m0).y; // pipe grows here\n            if pos(m0+dm+s) O = vec4(0,0,-dm);           // back link\n            if pos(m0+s)    O.xy   = vec2(dm);           // link\n            if pos(D) O.yz = vec2(m0+dm);                // move mouse handle\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}