{
    "Shader": {
        "info": {
            "date": "1405072299",
            "description": "left to right:\n- uniform noise\n- triangular noise\n- gaussianish noise\n- moar gaussianish noise :)\n\nUsed in relation to http://www.loopit.dk/banding_in_games.pdf",
            "flags": 0,
            "hasliked": 0,
            "id": "4ssXRX",
            "likes": 230,
            "name": "noise distributions",
            "published": 3,
            "tags": [
                "noise",
                "random",
                "gaussian",
                "rnd",
                "rand",
                "distribution",
                "gauss",
                "triangular"
            ],
            "usePreview": 0,
            "username": "hornet",
            "viewed": 18425
        },
        "renderpass": [
            {
                "code": "uvec2 pcg2d(uvec2 v)\n{\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\nvec2 pcg2d_f(vec2 v)\n{\n    return (1.0/float(0xffffffffu)) * vec2(pcg2d( uvec2(floatBitsToUint(v.x), floatBitsToUint(v.y)) ));\n}\n\nuvec3 pcg3d(uvec3 v) {\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\nvec3 pcg3d_f( vec3 v )\n{\n    return (1.0/float(0xffffffffu)) * vec3(pcg3d( uvec3(floatBitsToUint(v.x),\n                  \t\t\t \t\t\t\t\t\t\tfloatBitsToUint(v.y),\n                  \t\t\t \t\t\t\t\t\t\tfloatBitsToUint(v.z)) ));\n}\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n//note: uniform pdf rand [0;1[\nfloat hash13n(vec3 p)\n{\n   \tp  = fract( p * vec3(5.3987, 5.4472, 6.9371) );\n    p += dot( p.yzx, p.xyz + vec3(21.5351, 14.3137, 15.3247) );\n    return fract( (p.x * p.y + p.z) * 95.4307 );\n}\n\n//note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n    return pcg2d_f(n).x;\n    //return hash12n( n);\n\t//return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat nrand( vec3 n )\n{\n    return pcg3d_f(n).x;\n}\n\n\n// ==========================================\n\n//note: remaps v to [0;1] in interval [a;b]\nfloat remap( float a, float b, float v )\n{\n\treturn clamp( (v-a) / (b-a), 0.0, 1.0 );\n}\n//note: quantizes in l levels\nfloat truncf( float a, float l )\n{\n\treturn floor(a*l)/l;\n}\n\n// ==========================================\n\nfloat n1rand( vec3 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07 );\n\treturn nrnd0;\n}\nfloat n2rand( vec3 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07 );\n\tfloat nrnd1 = nrand( n + 0.11 );\n\treturn (nrnd0+nrnd1) / 2.0;\n}\nfloat n3rand( vec3 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07 );\n\tfloat nrnd1 = nrand( n + 0.11 );\n\tfloat nrnd2 = nrand( n + 0.13 );\n\treturn (nrnd0+nrnd1+nrnd2) / 3.0;\n}\nfloat n4rand( vec3 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07 );\n\tfloat nrnd1 = nrand( n + 0.11 );\t\n\tfloat nrnd2 = nrand( n + 0.13 );\n\tfloat nrnd3 = nrand( n + 0.17 );\n\treturn (nrnd0+nrnd1+nrnd2+nrnd3) / 4.0;\n}\n\nfloat n8rand( vec3 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07 );\n\tfloat nrnd1 = nrand( n + 0.11 );\t\n\tfloat nrnd2 = nrand( n + 0.13 );\n\tfloat nrnd3 = nrand( n + 0.17 );\n    \n    float nrnd4 = nrand( n + 0.19 );\n    float nrnd5 = nrand( n + 0.23 );\n    float nrnd6 = nrand( n + 0.29 );\n    float nrnd7 = nrand( n + 0.31 );\n    \n\treturn (nrnd0+nrnd1+nrnd2+nrnd3 +nrnd4+nrnd5+nrnd6+nrnd7) / 8.0;\n}\n\nfloat n4rand_inv( vec3 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07 );\n\tfloat nrnd1 = nrand( n + 0.11 );\t\n\tfloat nrnd2 = nrand( n + 0.13 );\n\tfloat nrnd3 = nrand( n + 0.17 );\n    float nrnd4 = nrand( n + 0.19 );\n\tfloat v1 = (nrnd0+nrnd1+nrnd2+nrnd3) / 4.0;\n    float v2 = 0.5 * remap( 0.0, 0.5, v1 ) + 0.5;\n    float v3 = 0.5 * remap( 0.5, 1.0, v1 );\n    return (nrnd4<0.5) ? v2 : v3;\n}\n\n//alternative Gaussian,\n//thanks to @self_shadow\n//see http://www.dspguide.com/ch2/6.htm\n//note: see also https://www.shadertoy.com/view/MlVSzw for version by @stubbe\nfloat n4rand_ss( vec2 n )\n{\n    float t0 = fract(iTime);\n    float t1 = fract(iTime+0.573953);\n\tfloat nrnd0 = nrand( n + 0.07*(1.0+t0) );\n\tfloat nrnd1 = nrand( n + 0.11*(1.0+t1) );\t\n\treturn 0.23*sqrt(-log(nrnd0+0.00001))*cos(2.0*3.141592*nrnd1)+0.5;\n}\n\n/*\n//Mouse Y give you a curve distribution of ^1 to ^8\n//thanks to Trisomie21\nfloat n4rand( vec2 n )\n{\n\tfloat t = fract( iTime );\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\t\n\tfloat p = 1. / (1. + iMouse.y * 8. / iResolution.y);\n\tnrnd0 -= .5;\n\tnrnd0 *= 2.;\n\tif(nrnd0<0.)\n\t\tnrnd0 = pow(1.+nrnd0, p)*.5;\n\telse\n\t\tnrnd0 = 1.-pow(nrnd0, p)*.5;\n\treturn nrnd0; \n}\n*/\n\nfloat histogram( int iter, vec2 uv, vec2 interval, float height )\n{\n    int NUM_BUCKETS = int(iResolution.x / 4.0);\n    const int ITER_PER_BUCKET = 4096;\n    const float HIST_SCALE = 0.014;\n\n    float NUM_BUCKETS_F = float(NUM_BUCKETS);\n    const float ITER_PER_BUCKET_F = float(ITER_PER_BUCKET);\n    const float RCP_ITER_PER_BUCKET_F = 1.0 / ITER_PER_BUCKET_F;\n\n\n    float time = fract( iTime );\n    time = 0.07*(1.0+time);\n\n\tfloat t = remap( interval.x, interval.y, uv.x );\n\tvec2 bucket = vec2( truncf(t,NUM_BUCKETS_F), truncf(t,NUM_BUCKETS_F)+1.0/NUM_BUCKETS_F);\n\tfloat bucketval = 0.0;\n\tfor ( int i=0;i<ITER_PER_BUCKET;++i)\n\t{\n        float b = float(i)*RCP_ITER_PER_BUCKET_F;\n\t\tfloat seed = time;\n\t\t\n\t\tfloat r;\n\t\tif ( iter < 2 )\n\t\t\tr = n1rand( vec3(i,0.5, seed) );\n\t\telse if ( iter<3 )\n\t\t\tr = n2rand( vec3(i,0.5, seed) );\n\t\telse if ( iter<4 )\n\t\t\tr = n4rand( vec3(i,0.5, seed) );\n\t\telse\n\t\t\tr = n8rand( vec3(i,0.5, seed) );\n\t\t\n\t\tbucketval += step(bucket.x,r) * step(r,bucket.y);\n\t}\n\tbucketval *= HIST_SCALE;\n    \n    float v0 = step( uv.y / height, bucketval );\n    float v1 = step( (uv.y-1.0/iResolution.y) / height, bucketval );\n    float v2 = step( (uv.y+1.0/iResolution.y) / height, bucketval );\n\treturn 0.5 * v0 + v1-v2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    float t = fract( iTime );\n    \n\tfloat o;\n    int idx;\n    vec2 uvrange;\n\tif ( uv.x < 1.0/4.0 )\n\t{\n\t\to = n1rand( vec3(uv,t) );\n        idx = 1;\n        uvrange = vec2( 0.0/4.0, 1.0/4.0 );\n\t}\n\telse if ( uv.x < 2.0 / 4.0 )\n\t{\n\t\to = n2rand( vec3(uv, t) );\n        idx = 2;\n        uvrange = vec2( 1.0/4.0, 2.0/4.0 );\n\t}\n\telse if ( uv.x < 3.0 / 4.0 )\n\t{\n\t\to = n4rand( vec3(uv,t) );\n        idx = 3;\n        uvrange = vec2( 2.0/4.0, 3.0/4.0 );\n\t}\n\telse\n\t{\n\t\to = n8rand( vec3(uv,t) );\n        idx = 4;\n        uvrange = vec2( 3.0/4.0, 4.0/4.0 );\n\t}\n\n    //display histogram\n    if ( uv.y < 1.0 / 4.0 )\n\t\to = 0.125 + histogram( idx, uv, uvrange, 1.0/4.0 );\n    \n\t//display lines\n\tif ( abs(uv.x - 1.0/4.0) < 0.002 ) o = 0.0;\n\tif ( abs(uv.x - 2.0/4.0) < 0.002 ) o = 0.0;\n\tif ( abs(uv.x - 3.0/4.0) < 0.002 ) o = 0.0;\n\tif ( abs(uv.y - 1.0/4.0) < 0.002 ) o = 0.0;\n\n\t\n\tfragColor = vec4( vec3(o), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}