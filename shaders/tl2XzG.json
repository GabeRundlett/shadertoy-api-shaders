{
    "Shader": {
        "info": {
            "date": "1566378046",
            "description": "planetary\n\nWASD, EQ, MOUSE to move ",
            "flags": 48,
            "hasliked": 0,
            "id": "tl2XzG",
            "likes": 8,
            "name": "Planetary II",
            "published": 3,
            "tags": [
                "raymarching",
                "space",
                "planet"
            ],
            "usePreview": 1,
            "username": "dagbrynildsentholander",
            "viewed": 1089
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159265359;\n\nstruct light\n{\n    vec3 lightCol;\n    vec3 lightPos;\n};\n    \nstruct planet\n{\n    float distanceFromSun;\n    float rpm;\n};\n\nlight[1] lights = light[1](\n\tlight(vec3(1., .9, .8)*1., vec3(0., 0., 0.))\n);\n\n\nplanet[8] planets = planet[8](\n    planet(3., 2.),\n    planet(4.3, 3.),\n    planet(5.7, 4.),\n    planet(7., 5.),\n    planet(9., 6.),\n    planet(13., 7.),\n    planet(16.5, 8.),\n    planet(18.1, 9.)\n);\n\nvoid Rx(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(1, 0, 0),\n            \t\tvec3(0, cos(theta), -sin(theta)),\n            \t\tvec3(0, sin(theta), cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Ry(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), 0, sin(theta)),\n            \t\tvec3(0, 1, 0),\n            \t\tvec3(-sin(theta), 0, cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Rz(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), -sin(theta), 0),\n            \t\tvec3(sin(theta), cos(theta), 0),\n            \t\tvec3(0, 0, 1)\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nfloat ground(vec3 p, vec4 n)\n{\n    return dot(p,n.xyz) + normalize(n).w;\n}\n\nfloat sphere( vec3 p, vec3 center, float r )\n{\n  return length(p-center)-r;\n}\n\nfloat box( vec3 p, vec3 center, vec3 size )\n{\n  vec3 d = abs(p-center) - size;\n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat scene(vec3 p)\n{\n    float sun = sphere(p, vec3(0, 0, 0), 2.);\n    float t = iTime/60.*2.*pi;\n    vec3 pos = vec3(sin(t*planets[0].rpm), 0, cos(t*planets[0].rpm))*planets[0].distanceFromSun;\n    float planet1 = sphere(p, pos, .2);\n    \n    pos = vec3(sin(t*planets[1].rpm), 0, cos(t*planets[1].rpm))*planets[1].distanceFromSun;\n    float planet2 = sphere(p, pos, .5);\n    \n    pos = vec3(sin(t*planets[2].rpm), 0, cos(t*planets[2].rpm))*planets[2].distanceFromSun;\n    float planet3 = sphere(p, pos, .5);\n    \n    pos = vec3(sin(t*planets[3].rpm), 0, cos(t*planets[3].rpm))*planets[3].distanceFromSun;\n    float planet4 = sphere(p, pos, .2);\n    \n    pos = vec3(sin(t*planets[4].rpm), 0, cos(t*planets[4].rpm))*planets[4].distanceFromSun;\n    float planet5 = sphere(p, pos, 1.);\n    \n    pos = vec3(sin(t*planets[5].rpm), 0, cos(t*planets[5].rpm))*planets[5].distanceFromSun;\n    float planet6 = sphere(p, pos, .8);\n    \n    pos = vec3(sin(t*planets[6].rpm), 0, cos(t*planets[6].rpm))*planets[6].distanceFromSun;\n    float planet7 = sphere(p, pos, .5);\n    \n    pos = vec3(sin(t*planets[7].rpm), 0, cos(t*planets[7].rpm))*planets[7].distanceFromSun;\n    float planet8 = sphere(p, pos, .5);\n    \n    return min(min(min(min(min(min(min(min(sun, planet1), planet2), planet3), planet4), planet5), planet6), planet7), planet8);\n}\n\nvec3 normal(vec3 p)\n{\n    float e = 0.0001;\n    vec3 normal = vec3(0);\n    normal.x = scene(p+vec3(e, 0, 0)) - scene(p-vec3(e, 0, 0));\n    normal.y = scene(p+vec3(0, e, 0)) - scene(p-vec3(0, e, 0));\n    normal.z = scene(p+vec3(0, 0, e)) - scene(p-vec3(0, 0, e));\n    return -normalize(normal);\n}\n\nfloat shadowr( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = scene(ro + rd*t);\n        if( h<0.005)\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvec2 ray(vec3 ro, vec3 rd, float mint, float maxt) \n{\n    int i = 0;\n    for(float t=mint; t<maxt;)\n    {\n        float distToScene = scene(ro+rd*t);\n        if(distToScene<0.005)\n            return vec2(t, i);\n        t += distToScene;\n        i++;\n    }\n    return vec2(0, 0);\n}\n\nvec3 lighting(vec3 p, vec3 rd, vec3 n, float specularStrength)\n{\n    vec3 result = vec3(0);\n    vec3 ambLight = vec3(0);\n    for(int i = 0; i < lights.length(); i++)\n    {    \n        light l = lights[i]; \n    \tvec3 lightDir = normalize(p-l.lightPos);\n\n    \t// specular\n    \tvec3 viewDir = rd;\n\t\tvec3 reflectDir = reflect(-lightDir, n);\n    \tfloat spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.);\n\t\tvec3 specular = specularStrength * spec * l.lightCol;  \n    \t// diffuse\n    \tfloat diff = max(dot(n, normalize(lightDir)), 0.0);\n    \tvec3 diffuse = diff*l.lightCol;\n    \t// shadow\n    \tfloat shadow = 1.;\n\n        result += (ambLight+diffuse*shadow)+specular*shadow;\n        result/=float(lights.length());\n    }\n    return result;\n}\n\nvec3 drawSky(vec3 ro, vec3 rd)\n{\n    vec2 uv = vec2(asin(dot(normalize(rd.xz), normalize(vec2(1., 1.)) )), acos(rd.y))/(2.*pi)*5.;\n    vec3 sunHalo = vec3(1, .3, 0)*1.5*pow(max(dot(rd, normalize(lights[0].lightPos-ro)), 0.), pow(length(ro), 2.)*.5)*1.2;\n    vec3 galaxy = texture( iChannel2, uv).xyz*max(1.-1.5*pow(abs(rd.y), .4), 0.)*.1 * texture(iChannel1, vec3(uv/4., 0.)).x;\n    vec3 stars = vec3(texture( iChannel2, uv))*max(1.-abs(rd.y), 0.)*pow(texture( iChannel2, uv*3.).x*.6*texture( iChannel2, uv/17.).x+texture( iChannel2, uv/13.).x*texture( iChannel2, uv/3.).x, 2.);\n    return vec3(0.)+sunHalo+galaxy+stars;\n}\n\nvec3 sunColor(vec3 p, vec3 n, vec3 rd)\n{\n    float noise = texture(iChannel1, vec3(p+iTime/20.)/3.).x;\n    float noise2 = texture(iChannel1, vec3(p-iTime/20.)/1.5).x;\n    vec3 col = mix(vec3(1, .15, 0)*.9, vec3(1, .6, 0)*1.5, pow(noise, 2.)*pow(noise2, 2.)*2.);\n    return col*pow(dot(-rd, n)+2., 3.);\n}\n\nvec3 planet1Color(vec3 p, vec3 rd, vec3 n, vec3 color, vec3 planetP) // used for simple planets\n{\n    p-=planetP;\n    float noise = texture(iChannel1, vec3(p)*.5).x;\n    float noise2 = texture(iChannel1, vec3(p)*2.).x;\n    float finalNoise = noise/2.+noise2/2.+.5;\n    vec3 col = color*finalNoise;\n    return col*lighting(p+planetP, rd, n, .1);\n}\n\nvec3 planet3Color(vec3 p, vec3 rd, vec3 n)\n{\n    float t = iTime/60.*2.*pi;\n    vec3 pos = vec3(sin(t*planets[2].rpm), 0, cos(t*planets[2].rpm))*planets[2].distanceFromSun;\n    p-=pos;\n    float noise = texture(iChannel1, vec3(p)/8.).x;\n    float noise2 = texture(iChannel1, vec3(p)/4.).x;\n    float noise3 = texture(iChannel1, vec3(p)/2.).x;\n    float noise4 = texture(iChannel1, vec3(p)).x;\n    float noise5 = texture(iChannel1, vec3(p*4.)).x;\n    p+=pos;\n    float clouds = texture(iChannel1, vec3(p/4.+vec3(sin(p.y*5.)*.2, 0, cos(p.y*2.5)*.1))).x;\n    p-=pos;\n    float finalNoise = noise*.5+noise2*.1+noise3*.15+noise4*.2;\n    vec3 col = vec3(.05, .1, .2)*lighting(p+pos, rd, n, 2.5);\n    if(finalNoise>.55&&finalNoise<=.7)\n        col = mix(vec3(.1, .2, .05), vec3(1, .6, .5)*.5, pow(max(1.-abs(p.y)*noise3*4., 0.), 2.)) * lighting(p+pos, rd, n, .2);\n    col += vec3(1) * lighting(p+pos, rd, n, .1) * pow(clouds, 4.);\n    vec3 atmosphere = mix(vec3(.7, 1., 1.5), vec3(.01, 0, 0), clamp(1.-dot(n, normalize(p+pos)), 0., 1.));\n    return mix(col, atmosphere, max(.9-dot(rd, n)*2., 0.));\n}\n\nvec3 planet4Color(vec3 p, vec3 rd, vec3 n)\n{\n    float t = iTime/60.*2.*pi;\n    vec3 pos = vec3(sin(t*planets[3].rpm), 0, cos(t*planets[3].rpm))*planets[3].distanceFromSun;\n    p-=pos;\n    float noise = texture(iChannel1, vec3(p)*.5).x;\n    float noise2 = texture(iChannel1, vec3(p)*2.).x;\n    float finalNoise = noise/2.+noise2/2.+.5;\n    vec3 col = vec3(.3, .1, .05)*finalNoise;\n    return col*lighting(p+pos, rd, n, .1);\n}\n\nvec3 planet5Color(vec3 p, vec3 rd, vec3 n)\n{\n    float t = iTime/60.*2.*pi;\n    vec3 pos = vec3(sin(t*planets[4].rpm), 0, cos(t*planets[4].rpm))*planets[4].distanceFromSun;\n    p-=pos;\n    float noise = pow(texture(iChannel1, vec3(p*.01)+vec3(sin(p.y)*.2, 0., cos(p.y)*.2)).x, 3.);\n    float noise2 = pow(texture(iChannel1, vec3(p*.05)+vec3(-sin(p.y)*.5, -cos(p.x)*.1, cos(p.y))).x, 2.)*.5;\n    float finalNoise = noise/4.+noise2/4. + .75;\n    vec3 col = vec3(.8-noise*.4, .7-noise2*.5, .5-noise2*.5)*pow(finalNoise, 4.);\n    vec3 atmosphere = mix(vec3(.7, .75, .6), vec3(0), clamp(1.-dot(n, normalize(p+pos)), 0., 1.));\n    return mix(col*lighting(p+pos, rd, n, .3), atmosphere, max(.55-dot(rd, n), 0.));\n}\n\nvec3 planet6Color(vec3 p, vec3 rd, vec3 n)\n{\n    float t = iTime/60.*2.*pi;\n    vec3 pos = vec3(sin(t*planets[5].rpm), 0, cos(t*planets[5].rpm))*planets[5].distanceFromSun;\n    p-=pos;\n    float noise = pow(texture(iChannel1, vec3(p*.01)+vec3(sin(p.y)*.2, 0., cos(p.y)*.2)).x, 3.);\n    float noise2 = pow(texture(iChannel1, vec3(p*.05)+vec3(-sin(p.y)*.5, -cos(p.x)*.1, cos(p.y))).x, 2.)*.5;\n    float finalNoise = noise/4.+noise2/4. + .75;\n    vec3 col = vec3(.7-noise*.4, .7-noise2*.5, .6-noise2*.5)*pow(finalNoise, 4.);\n   \n    return col*lighting(p+pos, rd, n, .3);\n}\n\nvec3 drawRings(vec3 center, vec3 ro, vec3 rd, float ringRadius)\n{\n    float distToPlane = abs(dot(ro, vec3(0, 1, 0)));\n    float angleToPlane = acos(abs(rd.y));\n    float rayDistToPlane = distToPlane/cos(angleToPlane);\n    vec3 p = vec3(ro+rd*rayDistToPlane);\n    if(ray(p, -normalize(rd), 0., 100.).x!=0.)\n        return vec3(0);\n    float distfromcenter = distance(p, center)*pi/ringRadius;\n    float opacity = max(sin(distfromcenter), 0.)*max(1.-abs(p.y), 0.);\n    if(distfromcenter>2.||distfromcenter<1.)\n        opacity=0.;\n    return texture(iChannel2, vec2(0, distfromcenter)).xyz*(.5+lighting(p, rd, vec3(0, 1, 0), .8))*pow(opacity, 32.);\n}\n\nvec3 finalColor(vec3 ro, vec3 rd, vec2 rayResult, vec3 n)\n{\n    vec3 p = ro+rd*rayResult.x;\n    vec3 col = vec3(0);\n    \n    float t = iTime/60.*2.*pi;\n    \n    if(length(p) < 2.1)\n        col = sunColor(p, n, rd);\n    else if(length(p) > 2.1 && length(p) <= 3.1)\n        col=planet1Color(p, rd, n, vec3(.6, .3, .1), vec3(sin(t*planets[0].rpm), 0, cos(t*planets[0].rpm))*planets[0].distanceFromSun);\n    else if(length(p) > 3.1 && length(p) <= 5.1)\n        col=planet1Color(p, rd, n, vec3(.7, .3, .1), vec3(sin(t*planets[1].rpm), 0, cos(t*planets[1].rpm))*planets[1].distanceFromSun);    \n    else if(length(p) > 5.1 && length(p) < 6.5)\n        col=planet3Color(p, rd, n);\n    else if(length(p) > 6.5 && length(p) < 7.9)\n        col=planet4Color(p, rd, n);\n    else if(length(p) > 7.9 && length(p) < 10.)\n        col=planet5Color(p, rd, n);\n    else if(length(p) > 10. && length(p) < 13.)\n        col=planet6Color(p, rd, n);\n    else if(length(p) > 13.)\n        col=planet1Color(p, rd, n, vec3(.1, .2, .3), vec3(sin(t*planets[6].rpm), 0, cos(t*planets[6].rpm))*planets[6].distanceFromSun);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord -  iResolution.xy*.5)/iResolution.y;\n\n    // Camera setup\n    vec3 camRight = vec3(1, 0, 0);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camForward = vec3(0, 0, 1);\n    \n    // Camera rotation\n    vec3 camRot = texture( iChannel0, iResolution.xy).xyz;\n    Rx(camRight, camUp, camForward, camRot.x);\n    Ry(camRight, camUp, camForward, camRot.y);\n    Rz(camRight, camUp, camForward, camRot.z);\n    \n    // Camera movement\n    vec3 ro=texture( iChannel0, vec2(0)).xyz+vec3(0, 1., -5);\n    \n    // Ray\n    vec3 rd = normalize(camForward+(camRight*1.5*uv.x)+(camUp*1.5*uv.y));\n    vec2 rayResult = ray(ro, rd, .1, 100.);\n    vec3 p = ro+rayResult.x*rd;\n    vec3 n = normal(p);\n\n    // Output to screen\n    vec3 finCol = vec3(0);\n    \n    if(rayResult==vec2(0))\n        finCol = vec3(drawSky(ro, rd));\n    else\n    {\n        //tot += pow(col,vec3(0.45) );\n    \tfinCol = vec3(finalColor(ro, rd, rayResult, n));\n    }\n    float t = iTime/60.*2.*pi;\n    vec3 planet6ringpos = vec3(sin(t*planets[5].rpm), 0, cos(t*planets[5].rpm))*planets[5].distanceFromSun;\n    fragColor = vec4(pow(finCol, vec3(0.75))+drawRings(planet6ringpos, ro, rd, 3.6)+drawRings(vec3(0), ro, rd, 5.), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat pi = 3.14159265359;\nvec2 lastNormMouse = vec2(0);\n//Key input taken from \"WASD movement\" by TekF (https://www.shadertoy.com/view/ldyGzW) \nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn textureLod( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\n\n\nvoid Rx(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(1, 0, 0),\n            \t\tvec3(0, cos(theta), -sin(theta)),\n            \t\tvec3(0, sin(theta), cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Ry(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), 0, sin(theta)),\n            \t\tvec3(0, 1, 0),\n            \t\tvec3(-sin(theta), 0, cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Rz(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), -sin(theta), 0),\n            \t\tvec3(sin(theta), cos(theta), 0),\n            \t\tvec3(0, 0, 1)\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    // Normalized mouse coordinates (from 0 to 1)\n    vec2 normMouse = vec2(iMouse.xy/iResolution.xy-.5);\n    \n    // Camera setup\n    vec3 camRight = vec3(1, 0, 0);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camForward = vec3(0, 0, 1);\n    \n    // Camera rotation\n    //vec3 camRot = vec3(-normMouse.y*360., normMouse.x*360.+180., 0)/180.*pi;\n    vec3 camRot = texture(iChannel0, iResolution.xy).xyz;\n    if(iMouse.z>0.)\n    \tcamRot += vec3(-normMouse.y*iTimeDelta*180., normMouse.x*iTimeDelta*180., 0)/180.*pi;\n    Rx(camRight, camUp, camForward, camRot.x);\n    Ry(camRight, camUp, camForward, camRot.y);\n    Rz(camRight, camUp, camForward, camRot.z);\n    \n    // Camera movement\n    vec3 ro=texture( iChannel0, vec2(0.0)).xyz;\n    ro+=(ReadKey(Key_W)-ReadKey(Key_S))*camForward*iTimeDelta*3.;\n    ro+=(ReadKey(Key_D)-ReadKey(Key_A))*camRight*iTimeDelta*2.;\n    ro+=(ReadKey(Key_E)-ReadKey(Key_Q))*camUp*iTimeDelta*2.;\n    \n    if(uv.x<=.5)\n    {\n    \tfragColor = vec4(ro.xyz, 1.0);  \n    }\n    else\n    {\n    \tfragColor = vec4(camRot.xyz, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}