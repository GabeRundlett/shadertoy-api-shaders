{
    "Shader": {
        "info": {
            "date": "1604342532",
            "description": "Smooth gradient at the top, naive banded at the bottom.\nI figured a super simple appoach like this would probably work to remove banding, but I didn't find anyone talking about it when I went looking. So I figured I'd just try it in shadertoy.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdcBzH",
            "likes": 2,
            "name": "Smooth grey gradient no banding",
            "published": 3,
            "tags": [
                "banding",
                "grayscale",
                "gradient",
                "gray",
                "grey",
                "colorbanding"
            ],
            "usePreview": 0,
            "username": "wheybags",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "float noise_scale = 0.003173828125;\n\n// Python code to find noise_scale. Binary searches for an optimal value.\n// Biased towards smaller numbers when the input looks good.\n// Checking values is done by a human. Loop until you get bored.\n/*\ndef get_direction(val):\n    d = \"\"\n    while d != \"b\" and d != \"n\" and d != \"g\":\n        d = input(\"How is {}? [b]andy/[n]oisy/[g]ood: \".format(val))\n\n    return d\n\nlower = 0 \nupper = 1 \n\nbest = None\n\nwhile True:\n    val = lower + (upper - lower) / 2 \n\n    direction = get_direction(val)\n    if direction == \"b\":\n        lower = val \n    else:\n        upper = val \n\n    if direction == \"g\":\n        best = val\n\n    \n    print(\"Range: {}-{}, best: {}\".format(lower, upper, best))\n*/\n\n\n// Extremely primitive rand function https://stackoverflow.com/a/4275343/681026\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n   \tfloat val = uv.x;\n    \n    // Scale the randomness to range across zero, so we don't change the overall tone on average\n    float val_with_noise = clamp(val + rand(uv)*noise_scale - noise_scale/2.0, 0.0, 1.0);\n    \n    float useVal = uv.y < 0.5 ? val : val_with_noise;\n    \n    \n    float distFromCentre = 0.5 - uv.y;\n    fragColor = abs(distFromCentre) < 0.001 ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(useVal, useVal, useVal, 1.0);\n    \n    // Quantise to 8-bit so the original error is visible even if you're using a hdr screen.\n    // I don't actually know if shadertoy uses floating point render targets, so I just put this\n    // in just in case. Can't test since I don't have a HDR screen.\n    fragColor = vec4(ivec4(fragColor*vec4(255.0, 255.0, 255.0, 255.0))) / vec4(255.0, 255.0, 255.0, 255.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}