{
    "Shader": {
        "info": {
            "date": "1703176358",
            "description": "A simple raymarcher that supports single reflections. Mouse to rotate mirror.\n\nI'm still learning this awesome tech, so I might be doing things the wrong way. Comment if you have any suggestions!",
            "flags": 0,
            "hasliked": 0,
            "id": "XclGWr",
            "likes": 1,
            "name": "reflections!",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "mirror"
            ],
            "usePreview": 0,
            "username": "aerowave",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "const float EPSILON = .001;\nconst int MAX_STEPS = 256;\nconst float MAX_DIST = 100.0;\nconst float PI = asin(1.0) * 2.0;\n\nconst bool REFLECTIONS = true;\n\n// i thought maybe i could also store color, but the ground plane would lose its pattern\nstruct Material {\n    float mirror;\n};\n\nMaterial[] materials = Material[](\n    Material(0.2), // floor plane\n    Material(0.0), // sphere 1\n    Material(0.2), // sphere 2\n    Material(0.9) // mirror\n);\n\nfloat sceneSDF(vec3 p, out int ID) {\n    // floor\n    ID = 0;\n    float dist = p.y;\n        \n    // spheres\n    if (dist > EPSILON) ID = 1;\n    dist = min(dist, length(p - vec3(sin(iTime), 1, cos(iTime))) - 0.5);\n    \n    if (dist > EPSILON) ID = 2;\n    dist = min(dist, length(p - vec3(sin(iTime+PI), 1, cos(iTime+PI))) - 0.5);\n    \n    // mirror thing\n    if (dist > EPSILON) ID = 3;\n    dist = min(dist, \n        max(\n            length(p - vec3(3, 1, -1)) - 1.0,\n            (cos(3.0 - iMouse.x / iResolution.x) * (p.x - 3.0) + sin(3.0 - iMouse.x / iResolution.x) * (p.z + 1.0))\n        )\n    );\n    \n    // nothing hit\n    if (dist > EPSILON) ID = -1;\n    return dist;\n}\n\n// Calculate the normal by taking the central differences on the distance field.\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.5773 * 0.0005;\n    int a = 0;\n    return normalize(\n        e.xyy * sceneSDF(p + e.xyy, a) +\n        e.yyx * sceneSDF(p + e.yyx, a) +\n        e.yxy * sceneSDF(p + e.yxy, a) +\n        e.xxx * sceneSDF(p + e.xxx, a));\n}\n\n// gets color for given object\nvec3 albedo(vec3 p, vec3 n, int ID) {\n    switch (ID) {\n        case 0:\n            return vec3(mod(floor(p.x) + floor(p.y) + floor(p.z), 2.0)) * 0.5 + 0.5;\n        case 1:\n            return vec3(1,0,0.5);\n        case 2:\n            return vec3(0,1,0.5);\n        case 3:\n            return vec3(1,1,1);\n    }\n}\n\n// final material shader\nvec3 shade(vec3 p, vec3 d, vec3 n, int ID) {\n    if (ID == -1) // sky\n        return mix(vec3(1,1,0), vec3(1,0,1), dot(d, vec3(0,1,0)) * 2.0);\n        \n    // phong shading or something idk\n    vec3 color = albedo(p, n, ID);\n    return color * (0.5 + 0.5 * dot(n, normalize(vec3(-1,2,0))));\n}\n\n// is this a good way of storing optional data?\nstruct RaycastData {\n    int steps;\n    int ID;\n};\n\n// Sends a ray from input position and marches until a surface is hit\nvec3 raycast(in vec3 rayOrigin, inout vec3 rayDirection, inout RaycastData data) {\n    float dist = 1.;\n    float rayLength = EPSILON * 2.0;\n    data.ID = -1;\n    \n    // march the ray\n    while (data.steps < MAX_STEPS) {\n        dist = sceneSDF(rayOrigin + rayDirection * rayLength, data.ID);\n        rayLength += dist;\n        \n        \n        // hit\n        if (dist < EPSILON) {\n            break;\n        }\n        // render distance\n        if (rayLength > MAX_DIST) {\n            data.ID = -1;\n            break;\n        }\n        data.steps++;\n    }\n    return rayOrigin + rayDirection * rayLength;\n}\n\n// Main code execution\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // centered screen coords\n    vec2 q = (fragCoord.xy - .5 * iResolution.xy ) / iResolution.y;\n    \n    vec3 cameraPos = vec3(0, 1, 3);\n    vec3 rayPosition = vec3(0, 0, 1); // ray origin\n\n    // ray direction for fragCoord.xy... what is this code lol\n    vec3 rayDirection = normalize(vec3(q, 0.) - rayPosition);\n    \n    // default background color\n    vec3 color = shade(vec3(0), rayDirection, vec3(0), -1);\n\n    rayPosition += cameraPos;\n    float dist, rayLength = 1.;\n    RaycastData data = RaycastData(0, -1);\n    \n    // raycast from camera\n    rayPosition = raycast(rayPosition, rayDirection, data);\n    vec3 normal = calcNormal(rayPosition);\n\n    color = shade(rayPosition, rayDirection, normal, data.ID);\n\n    // reflect!\n    if (REFLECTIONS && data.ID != -1 && materials[data.ID].mirror > 0.0) {\n        float mirror = materials[data.ID].mirror;\n\n        // raycast reflection\n        rayDirection = reflect(rayDirection, normal);\n        rayPosition = raycast(rayPosition, rayDirection, data);\n        normal = calcNormal(rayPosition);\n        color = mix(color, shade(rayPosition, rayDirection, normal, data.ID), mirror);\n    }\n\n    // DEBUG: show steps\n    //color = vec3(1.0 - sqrt(float(data.steps) / (float(MAX_STEPS))));\n    \n    fragColor = vec4(color, 1);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}