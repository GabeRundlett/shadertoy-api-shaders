{
    "Shader": {
        "info": {
            "date": "1693510891",
            "description": "Mashup of https://www.shadertoy.com/view/wdB3R3 by denosya, and CRT effect https://www.shadertoy.com/view/Xtccz4 by luka712.\n\nPress mouse to remove CRT/distortion.\n\nHold SPACE to stop \"wobbling\"",
            "flags": 48,
            "hasliked": 0,
            "id": "mtXBWX",
            "likes": 12,
            "name": "Raw Meat on TV",
            "published": 3,
            "tags": [
                "crt",
                "red",
                "bumpmapping",
                "raw",
                "meat"
            ],
            "usePreview": 1,
            "username": "misol101",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "/*\n* Mashup of:\n* Object:     https://www.shadertoy.com/view/wdB3R3 by denosya\n* CRT effect: https://www.shadertoy.com/view/Xtccz4 by luka712\n* by misol101\n*\n* Press mouse to remove CRT/distortion\n*\n* Hold SPACE to stop \"wobbling\"\n*\n*/\n\nvec2 crt_coords(vec2 uv, float bend)\n{\n\tuv -= 0.5;\n    uv *= 2.;\n    uv.x *= 1. + pow(abs(uv.y)/bend, 2.);\n    uv.y *= 1. + pow(abs(uv.x)/bend, 2.);\n    \n    uv /= 2.5;\n    return uv + .5;\n}\n\nfloat vignette(vec2 uv, float size, float smoothness, float edgeRounding)\n{\n \tuv -= .5;\n    uv *= size;\n    float amount = sqrt(pow(abs(uv.x), edgeRounding) + pow(abs(uv.y), edgeRounding));\n    amount = 1. - amount;\n    return smoothstep(0., smoothness, amount);\n}\n\nfloat scanline(vec2 uv, float lines, float speed)\n{\n    return sin(uv.y * lines + iTime * speed) * 0.66;\n}\n\nfloat random(vec2 uv)\n{\n \treturn fract(sin(dot(uv, vec2(15.5151, 42.2561))) * 12341.14122 * sin(iTime * 0.03));   \n}\n\nfloat noise(vec2 uv)\n{\n \tvec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    float a = random(i);\n    float b = random(i + vec2(1.,0.));\n\tfloat c = random(i + vec2(0., 1.));\n    float d = random(i + vec2(1.));\n    \n    vec2 u = smoothstep(0., 1., f);\n    \n    return mix(a,b, u.x) + (c - a) * u.y * (1. - u.x) + (d - b) * u.x * u.y; \n                     \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (iMouse.z > 0.) {\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n\n    vec2 crt_uv = crt_coords(uv, 4.);\n    \n    float s1 = scanline(uv, 400., -10.) * 1.1;\n    float s2 = scanline(uv, 10.+sin(iTime*0.33)*16., -3.) * 0.8;\n    \n    vec4 col;\n    col = texture(iChannel0, crt_uv);\n    \n    col = mix(col, vec4(s1 + s2), 0.05);\n\tfragColor = mix(col, vec4(noise(uv * 75.)), 0.05) * vignette(uv, 1.9, .6, 8.);;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float zNear = 1.0;\nconst float zFar  = 400.0;\n\nconst vec2 TEXTURE_ANIM = vec2(0.3, 0.13);\nconst float EMBOSS = 0.9;\nconst float MATERIAL_SCALE = 1.0;\n\nconst int KEY_SPACE = 32;\n\nbool readKey( int key ) {\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nfloat map(in vec3 m) {\n\n \tvec3 sphereCenter = vec3(0.0, 0.0, 10.);\n    float radius = 4.0;\n\n    float pulse = 0.0;\n\n    vec3 normal = normalize(m - sphereCenter);\n    vec2 UV = ((normal.xy + 1.0) * 0.5) * MATERIAL_SCALE + iTime*TEXTURE_ANIM;\n    \n    float h = (texture(iChannel0, UV).x+sin(iTime)*1.0-1.) * EMBOSS;\n   \n    return length(m - sphereCenter) - radius - h; \n}\n\nbool rayMarching(in vec3 origin, in vec3 ray, out vec3 m) {\n    \n    float\tmarchingDist = 0.0;\n    float \tnbIter \t\t = 0.0;\n    float   stepMul      = 1.0;\n    if (readKey(KEY_SPACE)) stepMul = 0.5;\n\n    for(int i = 0; i<500; i++) {\n        \n        m = origin + ray * marchingDist;    \n        \n    \tfloat dist1 = map(m);\n        \n        if(dist1 < 0.01) {\n            return true;\n        }\n\n\t\tif(dist1 < 0.1) {\n            float eps = 0.005;\n            float dist2 = map(m + ray * eps);    \n            float gradient = (dist2 - dist1) / eps;\n\n            if(gradient > 0.0) {\n                marchingDist += dist1;\n            }\n            else {\n                marchingDist += min(-(dist1 / gradient), 0.1);\n            }\n        }\n        else {\n            marchingDist += dist1 * stepMul;\n\n            if(marchingDist >= zFar) {\n                break;\n            }            \n        }\n    }\n    \n\treturn false;    \n}\n\n// IQ's func <3\nvec3 computeNormal(in vec3 pos)\n{\n\tvec3 eps = vec3( 0.033, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t     map(pos+eps.xyy) - map(pos-eps.xyy),\n\t     map(pos+eps.yxy) - map(pos-eps.yxy),\n\t     map(pos+eps.yyx) - map(pos-eps.yyx));\n\treturn normalize(nor);\n}\n\nvec4 computeColor(in vec3 ray, in vec3 m, in vec3 normal, in vec3 light, in vec3 eye) {\n    \n    vec3 n = normalize(m-vec3(0.0, 0.0, 10.));\n    vec2 UV = ((n.xy + 1.0) * 0.5) * MATERIAL_SCALE + iTime*TEXTURE_ANIM;\n    vec3 pixel = texture(iChannel0, UV).xyy;\n    \n    vec3 lightRay = normalize(m - light);\n    float diffuse = max(0.0, dot(normal, -lightRay));\n    \n    vec3 reflectedLight  = reflect(lightRay, normal);\n    float hilight \t\t = pow(max(dot(reflectedLight, -ray),0.0), 35.0);\n    \n    float ambiant = 0.2;       \n    \n    vec3 render = pixel * (diffuse + ambiant) + hilight;\n    return vec4(render, 1.0);\n}\n\nvec4 run(in vec2 fragCoord )\n{\n    float \tratio \t\t\t= iResolution.x/iResolution.y;\n    vec3 \tviewportCoord \t= vec3(fragCoord.xy/iResolution.y - vec2(ratio/2.0, 0.5), zNear);\n    viewportCoord.x+=+sin(iTime*2.)*0.25;\n    \n    \n    vec3\teye\t\t\t\t= vec3(0.0, 0.0, 0.0);\n    vec3\tray\t\t\t\t= normalize(viewportCoord-eye);\n    vec3\tlight\t\t\t= vec3(5.0*cos(iTime*0.5), 3.0, -10.0);\n    \n    vec3\tm;\n    \n    if(rayMarching(eye, ray, m)) {\n        vec3 normal = computeNormal(m);\n        return computeColor(ray, m, normal, light, eye);\n    }\n    else {\n        return vec4(0.0, 0, 0, 1.0);        \n    }\n    \n}\n    \n//#define SUPERSAMPLING\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    #ifdef SUPERSAMPLING\n    // 5x5 supersampling\n    for(float dx=-0.5; dx<=0.5; dx+=0.25) {\n    \tfor(float dy=-0.5; dy<=0.5; dy+=0.25) {\n            fragColor += run(fragCoord + vec2(dx, dy));\n        }\n    }\n    \n    fragColor /= 25.0;\n    \n    #else\n    fragColor = run(fragCoord);\n    #endif\n} \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}