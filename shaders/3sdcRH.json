{
    "Shader": {
        "info": {
            "date": "1600392660",
            "description": "A simple text renderer using the character map texture. Characters are represented by codes between 0x00 and 0xFF (0 and 255). Characters in the map start in the bottom left corner and end in the top right corner.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sdcRH",
            "likes": 3,
            "name": "Text Renderer",
            "published": 3,
            "tags": [
                "text",
                "rendering"
            ],
            "usePreview": 1,
            "username": "oneshade",
            "viewed": 934
        },
        "renderpass": [
            {
                "code": "int[] stringChars = int[14](0xB8, 0x95, 0x9C, 0x9C, 0x9F, 0xDC, 0x50, 0xA7, 0x9F, 0x82, 0x9C, 0x94, 0xD1, 0x50);\nvec4[6] stringBounds;\n\nvec2 mapBounds(in vec2 uv, in vec4 drawBounds, in vec4 charBounds) {\n    vec2 mappedToDrawBounds = (uv - drawBounds.xy) / (drawBounds.zw - drawBounds.xy);\n    return charBounds.xy + (mappedToDrawBounds * (charBounds.zw - charBounds.xy));\n}\n\nbool inBounds(in vec2 uv, in vec4 bounds) {\n    return (uv.x >= bounds.x && uv.x <= bounds.z) && (uv.y >= bounds.y && uv.y <= bounds.w);\n}\n\nvec4 calcCharBounds(in int char) {\n    float x = mod(float(char), 16.0);\n    float y = (float(char) - x) / 16.0;\n    vec2 uv = vec2(x, y) / 16.0;\n    return vec4(uv, uv + 0.0625);\n}\n\nvoid calcStringBounds(in vec2 position, in vec2 charSize, in int stringLength) {\n    vec2 topLeft = position - 0.5 * vec2(charSize.x * float(stringLength), charSize.y);\n    for (int i=0; i < stringLength; i++) {\n        stringBounds[i] = vec4(topLeft, topLeft + charSize);\n        topLeft.x += charSize.x;\n    }\n}\n\nvec3 renderText(in vec2 uv, in int stringStart, in int stringLength) {\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    for (int i=0; i < stringLength; i++) {\n        if (inBounds(uv, stringBounds[i])) {\n            int charIndex = int(mod(float(stringStart + i), float(stringChars.length())));\n            vec4 bounds = calcCharBounds(stringChars[charIndex]);\n            vec2 mapped = mapBounds(uv, stringBounds[i], bounds);\n            color += texture(iChannel0, mapped).r;\n        }\n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    calcStringBounds(vec2(0.5, 0.5), vec2(0.1666, 0.3333), 6);\n    fragColor = vec4(renderText(uv, int(iTime), 6), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}