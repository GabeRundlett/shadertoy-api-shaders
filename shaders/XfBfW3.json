{
    "Shader": {
        "info": {
            "date": "1725550117",
            "description": "CC0: JavaZone 2024 shader demo\n Built during the presentation \"Literally beautiful code\" \n JavaZone 2024.\n Thanks to all that attended even though it was the last slot in the conference.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XfBfW3",
            "likes": 13,
            "name": "JavaZone 2024 shader demo",
            "published": 3,
            "tags": [
                "blobs"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "// CC0: JavaZone 2024 shader demo\n//  Built during the presentation \"Literally beautiful code\" \n//  JavaZone 2024.\n//  Thanks to all that attended even though it was the last slot in the conference.\n\n// Here are some useful links to help you get started.\n\n// ShaderToy - A great place to code and learn together with a great\n//  community - You are here!\n\n// IQ Articles - A great resource by the great IQ, I visit this very often\n//  - https://iquilezles.org/articles\n\n// The Art of Code - A great YT channel by the great BigWings that \n//  helps you get started with very basics of shader programming\n//  - https://www.youtube.com/@TheArtofCodeIsCool\n\n// An Introduction Shader Art Coding - By the great kishimisu\n//  - https://www.youtube.com/@kishimisu\n\n// Windows Terminal Shader Gallery - You know you want shaders \n//  in windows terminal by me\n//   - https://github.com/mrange/windows-terminal-shader-gallery\n\n\nvec3 palette(float a) {\n  return 0.5+0.5*sin(vec3(0,1,2) +a );\n}\n\n\n// A simple distance field function for a circle. The distance field function give \n//  the distance from p to the object\nfloat circle(vec2 p, float r) {\n  return length(p)-r;\n}\n\n// A \"slightly\" more complex distance field function for a star with 5 points.\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat star5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n// Soft min functions allows distance fields to be distorted in appealing ways\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 q = fragCoord/iResolution.xy;\n  // Middle of the screen should be 0,0\n  vec2 p = -1. + 2. * q;\n  // Adjust for screen ratio\n  p.x *= iResolution.x/iResolution.y;\n\n  /*\n  Code used during the presentation kept here for those that attended\n  float b = iTime;\n  b = fract(b);\n  b -= 0.5;\n  b *= b;\n\n  vec2 p0 = p;\n  p0.x += sin(time);\n  p0.y += b;\n  //p0.y += cos(time);\n  float d0 = circle(p0, 0.25);\n  float d1 = star5(p0, 0.5, 0.55);\n  */\n  \n  \n  float d = 1E3;\n  \n  // Create 5 circles\n  for (int i = 0; i < 5; ++i) {\n    vec2 ip = p;\n    float itime = iTime + float(i);\n    ip.x += sin(itime);\n    ip.y += sin(sqrt(0.5)*itime);\n    float id = circle(ip, 0.5);\n    \n    //d = min(d, id);\n    // Use soft min to create blob like effect\n    d = pmin(d, id, 0.8);\n  }\n\n  // Distance field for the border\n  float od = abs(d)-0.025;\n\n  vec3 col = vec3(0.);\n  \n  if (d < 0.) {\n    // Inside of the main distance field\n    col = palette(10.*d-iTime);\n  }\n  \n  if (od < 0.) {\n    // Inside of the border distance field\n    col = vec3(1.0);\n  }    \n\n  col = sqrt(col);\n\n  // Let's you visualize the distance field\n  //col.x += sin(60.*d);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}