{
    "Shader": {
        "info": {
            "date": "1689394065",
            "description": "unwinds the mandelbrot set from the main cardioid \nclick + drag to move view\nhold shift + mouse up/down to change zoom",
            "flags": 48,
            "hasliked": 0,
            "id": "cdSfR1",
            "likes": 1,
            "name": "Mandelbrot unwound",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "vec4 grad[] = vec4[](\n    vec4(0,0.027,0.391,0),\n    vec4(0.125,0.418,791,0.16),\n    vec4(0.926,1.0,1.0,0.42),\n    vec4(1.0,0.664,0,0.6425),\n    vec4(0,0.008,0,0.8575),\n    vec4(0,0.027,0.391,1.0)\n);\n\nvec3 lerpGrad(vec4[6] g, float x){\n    x = fract(x);\n    for (int i = 0; i < g.length(); i++){\n        if (g[i].a >= x){\n            vec4 gradStart = g[i - 1];\n            vec4 gradEnd = g[i];\n            return mix(gradStart.rgb,gradEnd.rgb,smoothstep(gradStart.a,gradEnd.a,x));\n        }\n    }\n}\n\nvec2 getBulbNormal(float t){\n    return vec2(cos(t) - cos(2.0*t),sin(t) - sin(2.0*t))/(2.0*sqrt((1.0 - cos(t))/2.0));\n}\n\nvec2 getBulbPoint(float t){\n    return vec2(cos(t)/2.0 - cos(2.0*t)/4.0, sin(t)*(1.0 - cos(t))/2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 drag_offset = texelFetch(iChannel1, ivec2(1,0), 0).xy/iResolution.y;\n    float zoom = texelFetch(iChannel0, ivec2(1,0), 0).y/iResolution.y;\n    vec2 uv = ((fragCoord - iResolution.xy/2.0)/iResolution.y)*pow(2.0,zoom) - drag_offset;\n    float t = uv.x*2.0*PI;\n    float l = length(getBulbPoint(t));\n    vec2 coord = getBulbPoint(t) + getBulbNormal(t)*abs(uv.y)*6.0;\n    \n    float n = -1.0;\n    int c = 0;\n    float r0 = coord.x;\n    float i0 = coord.y;\n    float r = 0.0;\n    float i = 0.0;\n    float r2 = 0.0;\n    float i2 = 0.0;\n\n    for (c; c < max_steps && r2 + i2 <= 4.0; c++) {        \n        i = 2.0*r*i + i0;\n        r = r2 - i2 + r0;\n        r2 = r*r;\n        i2 = i*i;\n    }\n    if (r2 + i2 > 4.0) {\n        n = float(c) + 1.0 - log(log(r2*r2 + i2*i2)/2.0)/log(2.0);\n    }\n    \n    vec3 col = n == -1.0 ? vec3(0) : lerpGrad(grad, n/100.0);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int _shift = 16;\n\nbool keyPressed(int key){\n    return texelFetch(iChannel1, ivec2(key,0),0).x >= 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool iszooming = keyPressed(_shift);\n    vec4 col = vec4(0);\n    \n    //zoom\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw;\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0);\n        vec4 m = iMouse;\n        \n        if (m.z < 0.0 && mp.z >= 0.0 && iszooming){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0 && iszooming){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "int max_steps = 1000;\nfloat PI = 3.14159265359;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const int _shift = 16;\n\nbool keyPressed(int key){\n    return texelFetch(iChannel1, ivec2(key,0),0).x >= 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool iszooming = keyPressed(_shift);\n    vec4 col = vec4(0);\n    \n    //drag\n    if (floor(fragCoord) == vec2(1,0)) {\n        float zoom = texelFetch(iChannel2, ivec2(1,0), 0).y/iResolution.y;\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw;\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0);\n        vec4 m = iMouse;\n        \n        if (m.z < 0.0 && mp.z >= 0.0 && !iszooming){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0 && !iszooming){\n            col = vec4((m.xy - abs(m.zw))*pow(2.0,zoom) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}