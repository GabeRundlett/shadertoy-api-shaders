{
    "Shader": {
        "info": {
            "date": "1644338552",
            "description": "reuse base macro noise of https://shadertoy.com/view/7dByWK\nshows how to procedurally mimic Coriolis-like effect : velocity direction tilt + intensity grow toward the Hi an Lo pressure poles, forming weather scale vortices.",
            "flags": 0,
            "hasliked": 0,
            "id": "fd2cDd",
            "likes": 22,
            "name": "Fake vortices : pseudo-Coriolis",
            "published": 3,
            "tags": [
                "noise",
                "waves",
                "vortex",
                "directional",
                "gabor",
                "coriolis"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 539
        },
        "renderpass": [
            {
                "code": "// variant from https://shadertoy.com/view/7dByWK\n\n\n#define hue(v)    ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n#define rot(a)     mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = 2.5* U/iResolution.y;\n   \n\tvec2 g;\n\tfloat n = psrdnoise(U + vec2(.05*iTime, 0), vec2(0), .2*iTime, g); // g returns gradient\n    \n// ------------------------------------------------------------ \n\n    O = hue(.5 + .5*n) ; // coloring the positive and negative \"vortices\"\n    \n    U = fract(10.*U);                // cells to display vectors\n    g *= rot(1.57*(1.+n));           // mimic Coriolis velocity direction tilt\n // g *= rot(1.57*  n   );          \n    \n    float f = 2./(1.-abs(n)),        // mimic speed increase toward poles\n          v = sin(f*dot(U, g ) );    // draw vectors\n    O *= smoothstep(1.5,.0, abs(v)/min(1.,fwidth(v)) );\n    \n                                    // draw white spot at poles\n // O = mix(O, vec4(1), smoothstep(-.8,.8, (abs(n)-.8)/fwidth(n) ) ); \n // O = mix(O, vec4(1), smoothstep(.8,.0, abs(n)/fwidth(n) ) ); // isoline 0   \n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}