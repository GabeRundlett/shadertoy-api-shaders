{
    "Shader": {
        "info": {
            "date": "1566554590",
            "description": "Low precision shader adaptation of my C++ Mandelbrot set zoom animation renderer. To be worked on.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtBXR3",
            "likes": 0,
            "name": "Mandelbrot Zoom Renderer",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "dkudriavtsev",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "// Set parameters here\n\n#define MAX_ITER 1024.0\n#define COLOR_SCALE MAX_ITER\n\n#define AA true\n#define AA_8X true\n\n#define ALT_COLORS 0\n\n// Code\n\n#define ASPECT (iResolution.x / iResolution.y)\n\n#define Real float\n\nstruct Options {\n\tvec2 zoom_point;\n    int frame;\n    float zoom_factor;\n    int max_iter;\n};\n\n/*\n * Types used:\n * Bounds are a vec4(x1, y1, x2, y2)\n * Coordinates are a vec2(x, y)\n */\n\n// Map the current pixel and frame to a point,\n// zoomed to the given point by a given factor.\nvec2 frame_map(vec2 location, Options options) {    \n    vec4 bounds = vec4(vec2(-1.0, 1.0) * ASPECT, vec2(-1.0, 1.0)).xzyw;\n    vec2 zoomed_bounds = (bounds.zw - bounds.xy) \\\n        * pow(options.zoom_factor, Real(-options.frame));\n\n    vec4 px_bounds = vec4(\n        options.zoom_point.xy - zoomed_bounds.xy / 2.0,\n        options.zoom_point.xy + zoomed_bounds.xy / 2.0\n    );\n    \n    return px_bounds.xy + (px_bounds.zw - px_bounds.xy) * location / iResolution.xy;\n}\n\n        \nint iterations(in vec2 c, in int max_iter) {\n    vec2 z = vec2(0);\n    \n    for (int i = 0; i < max_iter; i++) {\n        if (distance(z.x, z.y) > 2.0) return i;\n        \n        z = vec2(\n            z.x*z.x - z.y*z.y + c.x,\n            z.y*z.x + z.x*z.y + c.y\n        );\n    }\n    \n\treturn -1;\n}\n\nvec3 color(vec2 fragCoord, Options options) {\n    vec2 c = frame_map(fragCoord, options);\n    \n    Real i = Real(iterations(c, options.max_iter));\n    vec3 col;\n    \n    if (i == -1.0) {\n    \tcol = vec3(0);\n    } else {\n#if ALT_COLORS\n        col = vec3(\n            sin((i / COLOR_SCALE)),\n            sin(i / (2.0 * COLOR_SCALE)) / 2.0,\n            sin((i / COLOR_SCALE))\n            //COLOR_SCALE - (i / COLOR_SCALE)\n        );\n#else\n        col = vec3(\n            (sin(1.0/log(i)) + sin((i / COLOR_SCALE))) / 2.0,\n            (0.5 * sin(1.0/log2(i)) + sin(i / (2.0 * COLOR_SCALE)) / 2.0) / 2.0,\n            (sin(1.0/log(i)) + sin((i / COLOR_SCALE))) / 2.0\n        );\n#endif\n    }\n\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    Options options;\n   \toptions.frame = iFrame;\n    \n    /*\n    Real angle = 0.026;\n\n    Real r = (1.0 - cos(angle)) / 2.0;\n\toptions.zoom_point = vec2(\n\t\tr * cos(angle) + 0.25,\n\t\tReal y = r * sin(angle)\n\t);\n\t*/\n    \n    options.zoom_point = vec2(-0.74529, 0.113075);\n    \n    options.max_iter = int(pow(1.0, Real(options.frame)) * MAX_ITER);\n    options.zoom_factor = 1.01;\n    \n    vec3 col = vec3(0);\n    col += color(fragCoord + vec2(0.0, 0.0), options);\n    \n    if (AA) {\n        col += color(fragCoord + vec2(0.5, 0.0), options);\n        col += color(fragCoord + vec2(0.0, 0.5), options);\n        col += color(fragCoord + vec2(0.5, 0.5), options);\n        if (AA_8X) {\n            col += color(fragCoord + vec2(0.25, 0.25), options);\n            col += color(fragCoord + vec2(0.75, 0.25), options);\n            col += color(fragCoord + vec2(0.25, 0.75), options);\n            col += color(fragCoord + vec2(0.75, 0.75), options);\n            col /= 8.0;\n        } else {\n            col /= 4.0;\n        }\n    }\n\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}