{
    "Shader": {
        "info": {
            "date": "1460737175",
            "description": "Voronoi noise function with random solid cell colors and cell distance calculation",
            "flags": 0,
            "hasliked": 0,
            "id": "Xs3Xzl",
            "likes": 1,
            "name": "Voronoi cell noise",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "zenex",
            "viewed": 958
        },
        "renderpass": [
            {
                "code": "// Voronoi cell noise function visualizer\n// MIT license\n\nvec2 rand2(vec2 p)\n{\n\tvec2 q = vec2(dot(p, vec2(120.0, 300.0)), dot(p, vec2(270.0, 401.0)));\n\treturn fract(sin(q) * 46111.1111);\n}\n\nfloat rand(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(445.5, 360.535))) * 812787.111);\n}\n\n// distortion [0..1], where 0.0 == squares, and 1.0 == irregular shapes\nvec2 voronoi(in vec2 pos, float distortion)\n{\n\tvec2 cell = floor(pos);\n\tvec2 cellOffset = fract(pos);\n    float borderDist = 8.0;\n    float color;\n    \n\t// sample nearby cells\n\tfor (int x=-1; x<=1; x++)\n    {\n        for (int y=-1; y<=1; y++)\n        {\n            vec2 samplePos = vec2(float(y), float(x));\n            vec2 center = rand2(cell + samplePos) * distortion;\n            vec2 r = samplePos - cellOffset + center;\n            float d = dot(r, r);\n            float col = rand(cell + samplePos);\n\n            if (d < borderDist)\n            {\n                borderDist = d;\n                color = col;\n            }\n        }\n    }\n    \n    // calc border distance\n    borderDist = 8.0;\n    for (int j=-1; j<=1; j++)\n    {\n        for (int i=-1; i<=1; i++)\n        {\n            vec2 samplePos = vec2(float(i),float(j));\n            vec2 center = rand2(cell + samplePos) * distortion;\n            vec2 r = samplePos + center - cellOffset;\n\n            if (dot(r, r) > 0.000001)\n            {\n                borderDist = min(borderDist, dot(0.5 * r, normalize(r)));\n            }\n        }\n    }\n    return vec2(color, borderDist);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xx;\n\tvec2 noise = voronoi(8.0 * uv, 1.0);\n    fragColor = vec4(noise.y, noise.y, noise.x, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}