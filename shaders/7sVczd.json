{
    "Shader": {
        "info": {
            "date": "1655579938",
            "description": "- visualization of Caspar-Klug Theory: https://viralzone.expasy.org/8577\n- reimplementing this effect from democapsid: https://www.shadertoy.com/view/sltGDj\n- finally learning how to use SDF...\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7sVczd",
            "likes": 7,
            "name": "caspar-klug walk",
            "published": 3,
            "tags": [
                "grid",
                "sdf",
                "hexagon",
                "casparklug"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Caspar-Klug\n    float h = 1.0 + round(8.0 / 2.0 * sin(float(iFrame) / 120.0)) + floor(8.0 / 2.0);\n    float k = round(8.0 / 2.0 * sin(float(iFrame) / 30.0)) + floor(8.0 / 2.0);\n    //float h = 4.0;\n    //float k = 2.0;\n    float R = 1.0 / ((h + k) * 1.5);\n    float r = R * cos(radians(30.0));\n    vec2 i = vec2(1.5 * R, 1.0 * r);\n    vec2 j = vec2(0.0 * R, 2.0 * r);\n    mat2 b = mat2(i, j);\n    vec2 t1 = vec2(0);\n    vec2 t2 = b * vec2(h, k);\n    vec2 t3 = rotmat2(radians(-60.0)) * t2;\n    \n    // transform\n    vec2 p = fragCoord / iResolution.y;\n    float s = distance(t1, t2);\n    float a = sqrt(3.0) / 2.0 * s;\n    vec2 h1 = t1 + h * i;\n    vec2 x1 = dot(h1, t2) / dot(t2, t2) * t2;\n    float h1_x1_dist = distance(h1, x1);\n    p *= a + h1_x1_dist;\n    p.y -= h1_x1_dist;\n    p.x -= ((iResolution.x / iResolution.y / a) -  s) / 2.0;\n    p = rotmat2(-atan(t2.y, t2.x)) * p;\n    \n    // distance\n    vec2 v = vec2(3.0 * R, 2.0 * r);\n    vec2 p1 = opRep(p, v);\n    vec2 p2 = opRep(p + v / 2.0, v);\n    float d1 = opUnion(\n        sdHexagon(p1, r),\n        sdHexagon(p2, r)\n    );\n    float d2 = sdHexagon(p - t1, r);\n    float d3 = sdHexagon(p - t2, r);\n    float d4 = sdHexagon(p - t3, r);\n    float th = r * 0.25;\n    float d5;\n    d5 = /*********/ sdSegment(rotmat2(radians(000.0)) * (p - t1), t1, h1);\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(000.0)) * (p - t1), h1, t2));\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(000.0)) * (p - t1), h1, x1));\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(120.0)) * (p - t2), t1, h1));\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(120.0)) * (p - t2), h1, t2));\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(120.0)) * (p - t2), h1, x1));\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(240.0)) * (p - t3), t1, h1));\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(240.0)) * (p - t3), h1, t2));\n    d5 = opUnion(d5, sdSegment(rotmat2(radians(240.0)) * (p - t3), h1, x1));\n    d5 -= th;\n    float d6 = (\n        opUnion(\n            opOnion(sdTriangle(p, t1, t2, t3), th),\n            opOnion(\n                sdTriangle(\n                    p,\n                    x1,\n                    t2 + (t3 - t2) * length(x1),\n                    t3 + (t1 - t3) * length(x1)\n                ),\n                th\n            )\n        )\n    );\n\n    // color\n    vec3 col = vec3(0);\n    col = (d1 > 0.0) ? col : vec3(0.72, 0.45, 0.20);\n    col = (d2 > 0.0) ? col : vec3(1.0, 0.0, 0.0);\n    col = (d3 > 0.0) ? col : vec3(0.0, 1.0, 0.0);\n    col = (d4 > 0.0) ? col : vec3(0.0, 0.0, 1.0);\n    col = (d5 > 0.0) ? col : vec3(0.0, 1.0, 1.0);\n    col = (d6 > 0.0) ? col : 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n    float d = min(min(min(d1, d2), d3), d4);\n    col *= th - exp(-2.0 * abs(d));\n    col *= th + cos(300.0 * d);\n    col = mix(col, vec3(0.5), 1.0 - smoothstep(0.0, th, abs(d)));\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/distfunctions2d/\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat opUnion( float d1, float d2 ) { \n    return min(d1,d2); \n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nvec2 opRep( in vec2 p, in vec2 c )\n{\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\n// r is the inradius\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nmat2 rotmat2(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}