{
    "Shader": {
        "info": {
            "date": "1690006342",
            "description": "circles growing",
            "flags": 0,
            "hasliked": 0,
            "id": "dsXyW4",
            "likes": 0,
            "name": "Circles getting big and small",
            "published": 3,
            "tags": [
                "circle"
            ],
            "usePreview": 0,
            "username": "evpevdev",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159268\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float angle = 1.;\n    float offset_magnitude = 0.6;\n    \n    float period = 8.0;\n    float radius = 0.1 + (0.4 * (sin(iTime*2.*PI / (period*2.5))+1.0)/2.);\n    float max_width = radius/2.;\n    float width = max_width * abs(sin(iTime*2.*PI / period));\n    float separation_min = (radius - max_width)*sqrt(2.);\n    float separation_max = (radius + max_width)*4.;\n    float separation = (sin(iTime*2.*PI / period)/2.+0.5)*(separation_max-separation_min) + separation_min;\n    //vec2 offset = vec2(cos(angle), sin(angle)) * offset_magnitude;\n    float d = length(vec2(mod(uv.x, separation)-separation/2., \n                          mod(uv.y, separation)-separation/2.));\n    d = abs(d - radius);\n    d = step(width, d);\n    \n    vec3 col = vec3(d, d, d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}