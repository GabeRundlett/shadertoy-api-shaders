{
    "Shader": {
        "info": {
            "date": "1665486637",
            "description": "Balls rolling endlessly. -  updated",
            "flags": 0,
            "hasliked": 0,
            "id": "7lKfWt",
            "likes": 29,
            "name": "Rolling Forever 2",
            "published": 3,
            "tags": [
                "raymarch",
                "balls",
                "helix",
                "track"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "// \"Rolling Forever 2\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  0   // optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothMax (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 StdVuMat (float el, float az);\nfloat Fbm2 (vec2 p);\n\nconst int nBall = 17;\nconst int nSpir = 3;\nconst int nLit = 3;\nvec3 bPos[nBall], bRot[nBall], ltPos[nLit], ltCol[nLit], qHit;\nfloat htFlap[2], dstFar, tCur, posLin, radSpir, dhSpir, ballRad, rollVel, fnSpir, dLinSeg,\n   dRotSeg, lenPath;\nint idObj, ballNum;\nconst int idTrk = 1, idSup = 2, idRing = 3, idGate = 4, idBase = 6, idBall = 7;\nconst float pi = 3.1415927;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid SetParms ()\n{\n  fnSpir = float (nSpir);\n  posLin = 1.5;\n  radSpir = 3.;\n  dhSpir = 2.5;\n  rollVel = 2.;\n  dLinSeg = 2. * (posLin + radSpir);\n  dRotSeg = length (vec2 (2. * pi * (fnSpir - 0.25) * radSpir, (fnSpir - 0.25) * dhSpir));\n  lenPath = 4. * (dLinSeg + dRotSeg);\n  ballRad = 0.6;\n  ballRad = lenPath / (2. * pi * floor (lenPath / (2. * pi * ballRad)));\n}\n\nvoid BallPos (int k, out vec3 bPos, out vec3 bRot)\n{\n  float ht, htSeg, htd, posSpir, da, dLRSeg, d;\n  ht = 0.5 * fnSpir * dhSpir;\n  htSeg = (2. * ht - 0.25 * dhSpir) / dRotSeg;\n  htd = ht - 0.25 * dhSpir;\n  posSpir = posLin + radSpir;\n  da = (2. * fnSpir - 0.5) * pi / dRotSeg;\n  dLRSeg = 0.25 * lenPath;\n  d = lenPath * fract (tCur * rollVel / lenPath + float (k) / float (nBall));\n  bRot = vec3 (0., 0., 2. * pi * fract (d / (2. * pi * ballRad)));\n  bPos = vec3 (0.);\n  if (d < 2. * dLRSeg) {\n    if (d < dLinSeg) {\n      bRot.y = -1.;\n      bPos = vec3 (- posSpir + d, htd, posLin);\n    } else if (d < dLRSeg) {\n      d -= dLinSeg;\n      bRot.xy = sin (d * da - 0.5 * pi + vec2 (0.5 * pi, 0.));\n      bPos = vec3 (posSpir * vec2 (1.) + radSpir * bRot.xy, htd - d * htSeg).xzy;\n    } else if (d < dLinSeg + dLRSeg) {\n      d -= dLRSeg;\n      bRot.x = -1.;\n      bPos = vec3 (posLin, - ht, posSpir - d);\n    } else {\n      d -= dLinSeg + dLRSeg;\n      bRot.xy = sin (d * da + pi + vec2 (0.5 * pi, 0.));\n      bPos = vec3 (posSpir * vec2 (1., -1.) + radSpir * bRot.xy, - ht + d * htSeg).xzy;\n    }\n  } else {\n    d -= 2. * dLRSeg;\n    if (d < dLinSeg) {\n      bRot.y = 1.;\n      bPos = vec3 (posSpir - d, htd, - posLin);\n    } else if (d < dLRSeg) {\n      d -= dLinSeg;\n      bRot.xy = - sin (d * da - 0.5 * pi + vec2 (0.5 * pi, 0.));\n      bPos = vec3 (posSpir * vec2 (-1.) + radSpir * bRot.xy, htd - d * htSeg).xzy;\n    } else if (d < dLinSeg + dLRSeg) {\n      d -= dLRSeg;\n      bRot.x = 1.;\n      bPos = vec3 (- posLin, - ht, - posSpir + d);\n    } else {\n      d -= dLinSeg + dLRSeg;\n      bRot.xy = - sin (d * da + pi + vec2 (0.5 * pi, 0.));\n      bPos = vec3 (posSpir * vec2 (-1., 1.) + radSpir * bRot.xy, - ht + d * htSeg).xzy;\n    }\n  }\n  bPos.y += 1.75 * ballRad;\n}\n\nvec4 BallHit (vec3 ro, vec3 rd)\n{\n  vec3 u, vn;\n  float dMin, d, b, w;\n  dMin = dstFar;\n  for (int i = VAR_ZERO; i < nBall; i ++) {\n    u = ro - bPos[i];\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + ballRad * ballRad;\n    if (w > 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        qHit = u + d * rd;\n        vn = qHit / ballRad;\n        ballNum = i;\n      }\n    }\n  }\n  return vec4 (dMin, vn);\n} \n\nfloat BallHitSh (vec3 ro, vec3 rd, float rng)\n{\n  vec3 u;\n  float dMin, d, b, w;\n  dMin = dstFar;\n  for (int i = VAR_ZERO; i < nBall; i ++) {\n    u = ro - bPos[i];\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + ballRad * ballRad;\n    if (w > 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) dMin = d;\n    }\n  }\n  return 0.6 + 0.4 * smoothstep (0., rng, dMin);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq, sn;\n  float dMin, d, tw, hTrk, rTrk, dpTrk, wWid, wdTrk, posSpir, cl;\n  dMin = dstFar;\n  hTrk = 0.25;\n  rTrk = 0.3;\n  dpTrk = 0.3;\n  wWid = 0.1;\n  wdTrk = 2.3;\n  posSpir = posLin + radSpir;\n  sn = sign (p);\n  q = p;\n  q.xz -= posSpir * sn.xz;\n  qq = q;\n  qq.xz = sn.z * (qq.xz + sn.x * qq.zx * vec2 (-1., 1.)) / sqrt(2.);\n  qq.y -= 0.5 * (atan (qq.z, - sn.z * sn.x * qq.x) / pi - fnSpir +\n     0.25 * sn.z + 0.5) * dhSpir - hTrk;\n  tw = (length (qq.xz) - radSpir) / wdTrk;\n  for (int j = VAR_ZERO; j <= nSpir; j ++) {\n    d = SmoothMax (length (vec2 (tw, qq.y)) - rTrk, - PrBox2Df (vec2 (tw, qq.y - hTrk),\n       vec2 (rTrk - wWid, dpTrk)), 0.02);\n    d = max (d, abs (q.y) - (0.5 * fnSpir + 0.2) * dhSpir);\n    if (j == 0) d = max (d, - PrBoxDf (p + vec3 (0., 0.5 * fnSpir * dhSpir, 0.),\n       vec3 (2. * posSpir, 2.2 * hTrk, posSpir)));\n    else if (j == nSpir) d = max (d, - sn.x * q.x);\n    DMIN (idTrk);\n    qq.y -= dhSpir;\n  }\n  q = p;\n  q.y += 0.1 * dhSpir;\n  for (int k = VAR_ZERO; k <= 1; k ++) {\n    qq = q;\n    if (k == 0) {\n      qq.y -= 0.5 * fnSpir * dhSpir;\n    } else {\n      qq.xz = qq.zx;\n      qq.y += 0.5 * (fnSpir - 0.5) * dhSpir;\n    }\n    qq.z = abs (qq.z) - posLin;\n    tw = qq.z / wdTrk;\n    d = SmoothMax (length (vec2 (tw, qq.y)) - rTrk, - PrBox2Df (vec2 (tw, qq.y - hTrk),\n       vec2 (rTrk - wWid, dpTrk)), 0.02);\n    d = max (d, abs (qq.x) - posSpir);\n    DMIN (idTrk);\n  }\n  q = p;\n  q.xz = abs (q.xz) - posLin - radSpir;\n  d = PrRoundBoxDf (q, vec3 (0.05 * radSpir, 0.5 * fnSpir * dhSpir, 0.05 * radSpir), 0.05);\n  DMIN (idSup);\n  q.y -= (0.1 - 0.5 * (fnSpir - 0.5)) * dhSpir;\n  cl = 0.5 * (radSpir - 0.25 * wdTrk);\n  for (int j = VAR_ZERO; j < nSpir; j ++) {\n    qq = q;\n    qq.z -= cl;\n    d = PrRoundBoxDf (qq, vec3 (0.02 * radSpir, 0.04 * radSpir, cl), 0.02);\n    DMIN (idSup);\n    qq.yz -= vec2 (0.5 * dhSpir, -2. * cl);\n    d = PrRoundBoxDf (qq, vec3 (0.02 * radSpir, 0.04 * radSpir, cl), 0.02);\n    DMIN (idSup);\n    q.y -= dhSpir;\n  }\n  q = p;\n  q.y += 0.5 * (fnSpir * dhSpir - wdTrk);\n  q.x = abs (q.x) - posLin;\n  d = PrTorusDf (q, 0.07 * radSpir, 0.5 * wdTrk);\n  DMIN (idRing);\n  for (int k = VAR_ZERO; k <= 1; k ++) {\n    q = p;\n    q.xy -= vec2 (posLin * sign (float (k) - 0.5), -0.5 * (fnSpir * dhSpir - wdTrk));\n    d = PrCylDf (q, 0.5 * wdTrk, 0.03 * radSpir);\n    q.y += 0.2 * wdTrk - 0.7 * wdTrk * htFlap[k];\n    d = max (d, - q.y);\n    DMINQ (idGate + k);\n  }\n  q = p - vec3 (0., - 0.5 * fnSpir * dhSpir - 0.2, 0.);\n  d = PrRoundBoxDf (q, vec3 (vec2 (posLin + 2. * radSpir), 0.2).xzy - 0.02, 0.02);\n  DMINQ (idBase)\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec4 BallCol ()\n{\n  vec3 br, col, q;\n  for (int i = VAR_ZERO; i < nBall; i ++) {\n    if (i == idObj - idBall) {\n      br = bRot[i];\n      break;\n    }\n  }\n  q = qHit;\n  q.xz = Rot2Cs (q.xz, sin (atan (br.x, br.y) + vec2 (0.5 * pi, 0.)));\n  if (abs (q.z) < 0.07) col = vec3 (1., 1., 0.3);\n  else col = (q.z * (mod (pi + atan (q.x, q.y) + br.z, 2. * pi) - pi) > 0.) ? vec3 (0., 1., 1.) :\n     vec3 (1., 0., 1.);\n  return vec4 (col, 0.2);\n}\n\nvec3 WoodCol (vec3 p, vec3 vn)\n{\n  vec2 e;\n  float f;\n  e = vec2 (1., 0.1);\n  p *= 4.;\n  f = dot (vec3 (Fbm2 (p.zy * e), Fbm2 (p.zx * e), Fbm2 (p.yx * e)), abs (vn));\n  return mix (vec3 (0.8, 0.4, 0.2), vec3 (0.45, 0.25, 0.1), f);\n}\n\nvoid BallPM ()\n{\n  float dGap, db, s, d[2];\n  dGap = lenPath / float (nBall);\n  db = tCur * rollVel;\n  d[0] = 10.;\n  d[1] = 10.;\n  for (int i = VAR_ZERO; i < nBall; i ++) {\n    s = lenPath * fract (db / lenPath);\n    d[0] = min (d[0], abs (s - (lenPath - dRotSeg - 0.5 * dLinSeg)));\n    d[1] = min (d[1], abs (s - (dRotSeg + 1.5 * dLinSeg)));\n    db += dGap;\n  }\n  htFlap[0] = 1. - smoothstep (2., 4., d[0] / ballRad);\n  htFlap[1] = 1. - smoothstep (2., 4., d[1] / ballRad);\n  for (int i = VAR_ZERO; i < nBall; i ++) BallPos (i, bPos[i], bRot[i]);\n}\n\nvoid SetLights ()\n{\n  for (int k = VAR_ZERO; k < nLit; k ++) {\n    ltPos[k] = vec3 (0., 100., 0.);\n    ltPos[k].xy = Rot2D (ltPos[k].xy, 0.25 * pi * (1. + 0.2 * sin (0.05 * pi * tCur -\n       pi * float (k) / float (nLit))));\n    ltPos[k].xz = Rot2D (ltPos[k].xz, 0.1 * pi * tCur + pi * float (k) / float (nLit));\n  }\n  ltCol[0] = vec3 (1., 0.5, 0.5);\n  ltCol[1] = ltCol[0].gbr;\n  ltCol[2] = ltCol[0].brg;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, db4;\n  vec3 col, vn, qHitB, ltDir, ltAx, c;\n  float dstObj, nDotL, sh, att, ltDst;\n  BallPM ();\n  db4 = BallHit (ro, rd);\n  qHitB = qHit;\n  dstObj = ObjRay (ro, rd);\n  if (min (dstObj, db4.x) < dstFar) {\n    if (db4.x < dstObj) {\n      dstObj = db4.x;\n      idObj = idBall + ballNum;\n      qHit = qHitB;\n    }\n    ro += dstObj * rd;\n    vn = (idObj < idBall) ? ObjNf (ro) : db4.yzw;\n    if (idObj == idTrk) col4 = vec4 (1., 1., 1., 0.1);\n    else if (idObj == idSup) col4 = vec4 (0.8, 0.6, 0.2, 0.1);\n    else if (idObj == idRing) col4 = vec4 (0.9, 0.8, 0., 0.1);\n    else if (idObj == idGate || idObj == idGate + 1) col4 = \n       mix (vec4 (1., 0., 0., -1.), vec4 (0.9, 0.8, 0., 0.1), step (0.5, fract (4. * qHit.y)));\n    else if (idObj == idBase) col4 = vec4 (WoodCol (qHit, vn), 0.);\n    else if (idObj >= idBall) col4 = BallCol ();\n    if (col4.a >= 0.) {\n      col = vec3 (0.);\n      for (int k = VAR_ZERO; k < nLit; k ++) {\n        ltDir = ltPos[k] - ro;\n        ltDst = length (ltDir);\n        ltDir /= ltDst;\n        ltAx = normalize (ltPos[k]);\n        att = smoothstep (0., 0.01, dot (ltDir, ltAx) - 0.985);\n        sh = (dstObj < dstFar) ? min (ObjSShadow (ro + 0.01 * vn, ltDir),\n           BallHitSh (ro + 0.01 * vn, ltDir, 5.)) : 1.;\n        nDotL = max (dot (vn, ltDir), 0.);\n        if (col4.a > 0.) nDotL *= nDotL * nDotL;\n        c = att * ltCol[k] * (col4.rgb * (0.2 + 0.8 * sh * nDotL) + col4.a * step (0.95, sh) *\n           sh * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.));\n        col += pow (c, vec3 (2.));\n      }\n      col = pow (col, 1. / vec3 (2.));\n    } else col = col4.rgb * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n  } else col = vec3 (0.6, 0.6, 1.) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  col = clamp (col, 0., 1.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, t, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    t = mod (0.01 * tCur, 2.);\n    az = 2.5 * pi * (abs ((floor (16. * t) + smoothstep (0.8, 1.,\n       fract (16. * t))) / 16. - 1.) - 0.5);\n  }\n  el = clamp (el, -0.4 * pi, -0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  SetParms ();\n  ro = vuMat * vec3 (0., -0.5, - (20. + 10. * fnSpir));\n  zmFac = 5.;\n  dstFar = 100.;\n  SetLights ();\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}