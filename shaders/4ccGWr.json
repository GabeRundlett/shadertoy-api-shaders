{
    "Shader": {
        "info": {
            "date": "1711543405",
            "description": "CC0: Lug00ber's Affinity for Cubes\nhttps://www.twitch.tv/lug00ber",
            "flags": 32,
            "hasliked": 0,
            "id": "4ccGWr",
            "likes": 11,
            "name": "Lug00ber's Affinity for Cubes",
            "published": 3,
            "tags": [
                "kali",
                "weird"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "// CC0: Lug00ber's Affinity for Cubes\n//  https://www.twitch.tv/lug00ber\n\nconst vec3 lightCol0 = HSV2RGB(vec3(0.58, 0.8, 1.5));\nconst vec3 lightCol1 = HSV2RGB(vec3(0.68, 0.5, 1.5));\nconst vec3 sunCol    = HSV2RGB(vec3(0.055, 0.5, 2E-2));\nconst vec3 lightPos0 = vec3(1.1, 1.5, 1.25); \nconst vec3 lightPos1 = vec3(-1.5, 1.2, 1.25); \n\n\nfloat df(vec2 p) {\n  p.x *= RESOLUTION.y/RESOLUTION.x;\n  p = 0.5+0.5*p;\n  return texture(iChannel1, p).x;\n}\n\nfloat hf(vec2 p) {  \n  p.x *= RESOLUTION.y/RESOLUTION.x;\n  p = 0.5+0.5*p;\n  return texture(iChannel1, p).y;\n}\n\nvec3 nf(vec2 p) {\n  vec2 e = vec2(sqrt(8.)/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = hf(p + e.xy) - hf(p - e.xy);\n  n.y = hf(p + e.yx) - hf(p - e.yx);\n  n.z = 2.0*e.x;\n  \n  return normalize(n);\n}\n\nvec3 effect(vec3 col, vec2 p) {\n  float aa = sqrt(2.)/RESOLUTION.y;\n\n  float d = df(p);\n  float sd = df(p+0.025*vec2(-1.,1.))-outer;\n  vec3 n = nf(p);\n  \n  vec3 p3 = vec3(p, 0.);\n  vec3 ro = vec3(0.,0.,10.);\n  vec3 rd = normalize(p3-ro);\n  vec3 r = reflect(rd, n);\n  vec3 ld0 = normalize(lightPos0-p3);\n  vec3 ld1 = normalize(lightPos1-p3);\n\n  float spe0 = pow(max(dot(r, ld0), 0.0), 70.);\n  float spe1 = pow(max(dot(r, ld1), 0.0), 40.);\n  \n  vec3 lcol = vec3(0.);\n\n  float cy = p.y;\n  vec2 sp = p-vec2(0.32,0.);\n  vec3 topCol = hsv2rgb(vec3(.55+cy*0.15, 0.95, 1.));\n  topCol += sunCol/max(dot(sp, sp), 1E-2);\n  topCol *= smoothstep(0.7, 0.25, cy);\n  vec3 botCol = hsv2rgb(vec3(-cy*0.125, 0.9, 1.));\n\n  lcol = mix(topCol, botCol, smoothstep(aa, -aa, cy));\n  lcol += spe0*lightCol0;\n  lcol += spe1*lightCol1;\n  lcol *= 0.75+0.25*sin(p.y*RESOLUTION.y*TAU/8.);\n  lcol *= sqrt(2.);\n  lcol -= 0.0125*length(p);\n  float od = d-outer+aa;\n  col *= exp(2.*120.*min(sd+0.0025, 0.));\n  col = mix(col, lcol, smoothstep(aa, -aa, od));\n  col = mix(col, vec3(0.), smoothstep(aa, -aa, abs(od)-aa));\n\n\n  return col;  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.+2.*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = texture(iChannel0, q).xyz;\n  col = effect(col, p);  \n  col = sqrt(col);\n  fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0: Lug00ber's Affinity for Cubes\n\n#define TOLERANCE           0.0001\n#define MAX_RAY_LENGTH      10.0\n#define MAX_RAY_MARCHES     90\n#define NORM_OFF            0.005\n\nconst vec3 sunDir    = normalize(vec3(0.,0., 1.));\nconst vec3 lightPos1 = 2.0*vec3(-1.0, -1.0, -2.0);\nconst vec3 lightPos0 = 4.0*vec3(1.0, 1.0, -2.0);\n\nconst vec3 sunCol    = HSV2RGB(vec3(0.6, .95, 1E-2))*1.;\nconst vec3 lightCol0 = HSV2RGB(vec3(0.7, 0.85, 1.0))*1.;\nconst vec3 lightCol1 = HSV2RGB(vec3(0.8, 0.75, 1.0))*1.;\nconst vec3 bottomBoxCol = HSV2RGB(vec3(0.7, 0.80, 0.5))*1.;\nconst vec3 topBoxCol    = HSV2RGB(vec3(0.57, 0.90, 1.))*1.;\nconst vec3 glowCol0 = HSV2RGB(vec3(0.58, 0.9, 4E-3))*1.;\nconst vec3 glowCol1 = HSV2RGB(vec3(0.03, 0.9, 5E-3))*1.;\n\n  \nmat3 g_rot;\n\nfloat sphere4(vec3 p, float r) {\n  p*=p;\n  return pow(dot(p,p), 0.25) -r;\n}\n\nfloat sphere8(vec3 p, float r) {\n  p*=p;\n  p*=p;\n  return pow(dot(p,p), 0.125) -r;\n}\n\nfloat df(vec3 op) {\n  vec3 p0 = op*g_rot;\n  vec3 p1 = g_rot*op;\n  float d0 = sphere4(p0, 1.);\n  float d1 = sphere4(p1, 0.65);\n  float d = d0;\n  d = pmax(d, -d1, 0.5);\n  return d;\n}\n\n#define BACKSTEP\nfloat rayMarch(vec3 ro, vec3 rd, float tinit, out int iter) {\n  float t = tinit;\n  const float tol = TOLERANCE;\n#if defined(BACKSTEP)\n  vec2 dti = vec2(1e10,0.0);\n#endif  \n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n#if defined(BACKSTEP)\n    if (d<dti.x) { dti=vec2(d,t); }\n#endif  \n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n#if defined(BACKSTEP)\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n#endif  \n  iter = i;\n  return t;\n}\n\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  \n  vec3 ld0 = normalize(lightPos0-ro);\n  vec3 ld1 = normalize(lightPos1-ro);\n\n  float tp0  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -5.0));\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp0 > 0.0) {\n    col += bottomBoxCol*exp(-0.5*(length((ro + tp0*rd).xz)));\n  }\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += topBoxCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += 0.2*topBoxCol*exp(-0.5*max(db, 0.0));\n    col += 0.05*sqrt(topBoxCol)*max(-db, 0.0);\n  }\n\n  col += 1E-2*lightCol0/(1.002-dot(ld0, rd));\n  col += 2E-2*lightCol1/(1.005-dot(ld1, rd));\n  col += sunCol/(1.001-dot(sunDir, rd));\n  return col; \n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  \n  int ii;\n  float t = rayMarch(ro, rd, 0., ii);\n\n  vec3 col = render0(ro, rd);\n  \n  if (t < MAX_RAY_LENGTH) {\n    vec3 p = ro+rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    vec3 rcol = render0(p, r);\n    float fre = 1.0+dot(rd,n);\n    fre *= fre;\n    fre = mix(0.5, 1.0, fre);\n    vec3 ld0 = normalize(lightPos0-p);\n    vec3 ld1 = normalize(lightPos1-p);\n    \n    float dif0 = pow(max(dot(ld0, n), 0.), 4.0)*0.1;\n    float dif1 = pow(max(dot(ld1, n), 0.), 4.0)*0.1;\n\n    col = vec3(0.);\n    col += dif0*lightCol0;\n    col += dif1*lightCol1;\n    col += rcol*fre;\n    mat3 rot = (g_rot);\n    vec3 tp3 = p;\n    vec3 tn3 = n;\n    tp3 *= rot;\n    tn3 *= rot;\n    vec2 p2 = -(tp3.xy*tn3.z+tp3.zx*tn3.y+tp3.yz*tn3.x);\n    float l2 = length(p2);\n    p2.x *= RESOLUTION.y/RESOLUTION.x;\n    vec2 tp2 = 0.5+0.5*p2;\n\n    vec3 pcol = texture(iChannel0, tp2).xyz;\n    float dc = l2-0.6;\n    col = mix(col, pcol*sqrt(.5)*vec3(1., .5, .75)*smoothstep(0.9, 0.0, l2), smoothstep(-0.1250, 0.125, -dc));\n    col += glowCol0/max(abs(dc), 1E-3);\n    col += glowCol1/max(abs(l2*l2-0.05), 1E-4);\n  }\n  \n  return col;\n}\n\nvec3 effect(vec2 p) {\n  float a = TIME*0.25;\n  vec3 r0 = vec3(1.0, sin(vec2(sqrt(0.5), 1.0)*a));\n  vec3 r1 = vec3(cos(vec2(sqrt(0.5), 1.0)*0.913*a), 1.0);\n  mat3 rot = rot(normalize(r0), normalize(r1));\n  g_rot = rot;\n\n  const vec3 up = vec3(0., 1., 0.);\n  const vec3 ro   = vec3(0.0, 0.5, -3.0);\n  const vec3 la   = vec3(0.0);\n\n  const vec3 ww = normalize(la-ro);\n  const vec3 uu = normalize(cross(up, ww));\n  const vec3 vv = cross(ww, uu);\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.*ww);\n\n  vec3 col = vec3(0.0); \n  col = render1(ro, rd);\n  col -= 2E-2*vec3(1.,2.,3.).zyx*(length(p)+0.25); \n  col = aces_approx(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: Lug00ber's Affinity for Cubes\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float outer = 0.025;\nconst float inner = 0.025;\nconst float full  = inner+outer;\n\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n  \n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/noacos/\nmat3 rot(vec3 d, vec3 z) {\n  vec3  v = cross( z, d );\n  float c = dot( z, d );\n  float k = 1.0/(1.0+c);\n\n  return mat3( v.x*v.x*k + c,     v.y*v.x*k - v.z,    v.z*v.x*k + v.y,\n               v.x*v.y*k + v.z,   v.y*v.y*k + c,      v.z*v.y*k - v.x,\n               v.x*v.z*k - v.y,   v.y*v.z*k + v.x,    v.z*v.z*k + c    );\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// CC0: Lug00ber's Affinity for Cubes\n\n\nfloat lug00ber(vec2 p) {\n  vec2 p0 = p;\n  p0.y = abs(p0.y);\n  p0 -= vec2(-0.705, 0.41);\n  float d0 = length(p0)-0.16;\n  \n  float topy = 0.68;\n  vec2 bp = p-vec2(0.27, -0.8);\n  float d1 = segment(p, vec2(0.72, topy), vec2(0.27, -0.8))-0.06;\n  float d2 = segment(p, vec2(-0.13, topy), vec2(0.33, -0.8))-0.1;\n  float d3 = p.y-(topy-0.066);\n\n  float d4 = box(p-vec2(-0.1, topy), vec2(0.25, 0.03))-0.01;\n  float d5 = box(p-vec2(0.685, topy), vec2(0.19, 0.03))-0.01;\n  float d6 = min(d4, d5);\n  \n  vec2 ax7 = normalize(vec2(vec2(0.72, topy)-vec2(0.27, -0.8)));\n  vec2 nor7 = vec2(ax7.y, -ax7.x);\n  float d7 = dot(p, nor7)+dot(nor7, -vec2(vec2(0.72, topy)))+0.05;\n  \n  d2 = pmax(d2, d7, 0.05);\n  float d = d1;\n  d = pmin(d,d2, 0.025);\n  d = max(d, d3);\n  d = pmin(d, d6, 0.1);\n  d = min(d,d0);\n  \n  return d; \n}\n\nfloat df(vec2 p) {\n  float d0 = lug00ber(p);\n  float d1 = abs(p.y)- 0.1;\n  float d = d0;\n  d = pmax(d, -d1, 0.05); \n  return d;\n}\n\nfloat hf(vec2 p) {  \n  float d0 = df(p);\n  d0 -= outer;\n  d0 = clamp(full+d0, 0.0, full);\n  float h = tanh_approx(sqrt(full*full-d0*d0)/full);\n  return -0.5*full*h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.+2.*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.);\n  col.x = df(p);\n  col.y = hf(p);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}