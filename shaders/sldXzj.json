{
    "Shader": {
        "info": {
            "date": "1639425977",
            "description": "My compo for TokyoDemoFest 2021 GLSL competition \n",
            "flags": 0,
            "hasliked": 0,
            "id": "sldXzj",
            "likes": 26,
            "name": "[TDF 2021]ローポリ",
            "published": 3,
            "tags": [
                "lowpoly",
                "tdf2021"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 599
        },
        "renderpass": [
            {
                "code": "\n\n\n//東京\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat box(vec2 p,vec2 b){\n    vec2 q = abs(p)-b;\n    return length(max(vec2(0.),q))+min(0.,max(q.x,q.y));\n}\nfloat box3(vec3 p,vec3 b){\n    vec3 q =abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat tokyo(vec3 p){\n\tp*=2.;\n\tvec3 op = p;\n\tp.x -=6.;\n\tfloat d = box3(p-vec3(0.,4.,0.),vec3(5.,1.,1.));\n\tfloat q = min(d,box3(p-vec3(0.,0.,0.),vec3(4.,3.,1.)));\n\tq = max(q,-min(d,box3(p-vec3(0.,0.,0.),vec3(3.,2.,2.))));\n\td = min(d,q);\n\td =min(d,box3(p,vec3(4.,1.,1.)));\n\td = min(d,box3(p,vec3(1.,7.,1.)));\n\tp.y-=-5.;\n\tp.x = abs(p.x)-2.;\n\tp.xy*=rot(-.885);\n\td = min(d,box3(p,vec3(1.,2.5,1.)));\n\t\n\tp =op;\n\tp.x+=6.;\n\tfloat d2 = box3(p-vec3(0.,4.,0.),vec3(5.,1.,1.));\n\tfloat q2 = min(d2,box3(p-vec3(0.,0.,0.),vec3(4.,3.,1.)));\n\tq2 = max(q2,-min(d2,box3(p-vec3(0.,0.,0.),vec3(3.,2.,2.))));\n\td2 = min(d2,q2);\n\t\n\td2 = min(d2,box3(p-vec3(0.,5.,0.),vec3(1.,2.,1.)));\n\td2 = min(d2,box3(p-vec3(0.,-5.,0.),vec3(1.,2.,1.)));\n\td2 = min(d2,box3(p-vec3(1,-6.5,0.),vec3(2.,.5,1.)));\n\tp.y-=-4.;\n\tp.x = abs(p.x)-2.;\n\tp.xy*=rot(-.885);\n\td2 = min(d2,box3(p,vec3(.5,2.5,1.)));\t\n\t\n\td= min(d2,d);\n\treturn d/2.;\n}\nfloat diam(vec3 p,float s){\n\t p = abs(p);\n\t return (p.x+p.y+p.z-s)*inversesqrt(3.);\n}\n\nvec3 op;\nfloat di(vec3 p){\n    float q = 0.;\n    vec4 pp = vec4(p,1.1);\n    const float cc = 2.;\n    for(float i=1.; i<=cc ;i++){\n      q += (asin(sin(pp.x))+acos(cos(pp.z)))/pp.a;\n      pp*=1.1;\n      pp.xyz +=vec3(1.1,2.,3.);\n      pp.xyz = abs(pp.xyz);\n      pp.xz *=rot(-.785*i+i);\n      \n    }\n    return q/(cc+pp.a);\n\n}\nvec2 sdf(vec3 p){\nvec3 tp = p;\n\t\n   op = p;\n\n    vec2 h;\n    p.xy *=rot(p.z*.1);\n    p.y= -abs(p.y)+(3.+asin(sin(iTime+p.z*.1))*.5);\n    \n    h.x = length(p+1.)-.1;\n    p.y +=2.+di(p);\n    h.x = min(h.x, box(p.xy,vec2(6.1,.5) ) );\n\th.x *=.65;\n    h.y = 1.;\n\t\n    vec2 t;\n\n    tp.xz*=rot(pow(fract(iTime*.3),.125)*3.14);\n    tp.xy*=rot(pow(fract(iTime*.3+.5),.125)*3.14);\n    t.x = mix(diam(tp,2.5),box3(tp,vec3(1.1)),asin(sin(floor(iTime)+pow(fract(iTime),.5)))*.3+.2);\n\tt.x =mix(t.x , tokyo(-tp),clamp(sin(iTime),-.5,.5)+.5);\n\t tp = op;\n    vec4 ttp = vec4(tp,1.);\n\tttp.yz*=rot(iTime*.01);\n    for(float i=0.;i<=6.;i++){\n        ttp*=1.3;\n        ttp.xyz = abs(ttp.xzy)-11.;\n        ttp.xz*=rot(-.785+i);\n\t    ttp.xy*=rot(i);\n        t.x = min(t.x,box3(ttp.xyz,vec3(.5))/ttp.a);\n    }\n\t\n    t.y = 2.;\n    h = t.x < h.x ? t:h;\n    return h;\n    \n}\n#define q(s) s*sdf(p+s).x\n#define ao(rp,n,k) clamp(sdf(rp+n*k).x/k,.0,1.)\n#define gao(rp,n) (ao(rp,n,.1)+ao(rp,n,.5)+ao(rp,n,.7))\nvec3 norm(vec3 p,float e){vec2 nv=vec2(-e,e);return normalize(q(nv.xyy)+q(nv.yxy)+q(nv.yyx)+q(nv.xxx));}\nvec3 pal(float t){return .5+vec3(.5,.2,.1)*cos(6.28*(vec3(1.,.5,.6)*t+vec3(.0,.1,.2)));}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(12.,-0.1+iMouse.y*.01,-6.+iMouse.x*.01);\n    vec3 rt = vec3(0.);\n    vec3 z = normalize(rt-ro);\n    vec3 x = (cross(z,vec3(0.,-1.,.0)));\n    vec3 y = (cross(z,x));\n    \n    vec3 rp = ro;\n    vec3 rd = normalize(mat3(x,y,z)*vec3(uv,.9));\n    vec3 light = mat3(x,y,z)*vec3(-2.,-1.,-4.);\n    vec3 col = vec3(.1);\n    for(float i=0.;i<=128.;i++){\n        vec2 d = sdf(rp);\n        if(length(rp) > 50.) break;\n        if(d.x <.001){\n        \n            vec3 n = norm(rp,.019);\n            vec3 nn = norm(rp,.02+abs(sin(iTime+rp.z*.2))*.01);\n                           float dif = dot(normalize(light-rp),n);\n                           float spc = max(0.,dot(normalize(rp-ro),reflect(normalize(-light),n)));\n                           spc = pow(spc,32.);\n\t\tfloat fr = pow(1.-dot(-rd,n),4.);\n                col = vec3(.1)+vec3(.15,.5,.7)*dif+spc*.75;\n                float l = length(n-nn);\n                float s = step(.01,l);\n                col = max(vec3(0.),mix(col-s,col*s, floor(rp.z*.1-.3+di(rp.zzz*.1)*.2)*(gao(rp,n)/3.)*.75+.5));\n                col = pow(col,vec3(.8));\n\t\tif(d.y ==1.) {col *=smoothstep(10.5,.0,op.z);col += -fr+s*pal(op.z*.1+iTime)*smoothstep(-.1,.1,op.z);}\n                break;\n           \n            \n        }\n        rp +=rd*d.x;\n    \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}