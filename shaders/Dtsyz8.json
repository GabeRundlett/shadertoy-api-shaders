{
    "Shader": {
        "info": {
            "date": "1690402260",
            "description": "Sprite particles blended together and then offset with some motion",
            "flags": 0,
            "hasliked": 0,
            "id": "Dtsyz8",
            "likes": 2,
            "name": "Blended sprite particle storm",
            "published": 3,
            "tags": [
                "sprite",
                "blend",
                "variance",
                "lagrangian",
                "smartblend"
            ],
            "usePreview": 0,
            "username": "animtor120",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "// Texture sampling function with scaling and intensity adjustment\n#define INTENSITY  1.\n#define COUNT 100.\n#define SampleTexture(U) texture(iChannel0, 2.0 * U) * INTENSITY\n\n// Texture for the mean color (you can use different textures or predefined colors)\n#define MeanTexture texture(iChannel0, 2.0 * U, 1.0) * INTENSITY\n\n// #iChannel0 \"file://angelTrumpetOne1.png\"\n// Variant texture sampling options:\n// #define MeanTexture vec4(65, 54, 46, 1) / 255.0      // Mean for Britney video\n// #define SampleTexture(U) vec4(0.5 + 0.5 * sin(120.0 * U.x))   // Gabor noise. mean = 0.5\n// #define SampleTexture(U) SmoothBlobKernel(U)         // Simple blob. mean = 0.5\n// #define MeanTexture 0.5\n\n// Background image texture (change the URL to use a different image)\n\n\n// Smooth kernel for blending particles\n#define SmoothBlobKernel(U) smoothstep(0.2, 0.0, length(U))\n\n// Function to generate a random value based on the input seed\n#define Random(seed) fract(1e4 * sin(seed + vec2(0, 73.17)))\n\nvoid mainImage(out vec4 fragColor, in vec2 U)\n{\n    // Initialize output color\n    fragColor -= fragColor;\n\n    // Get the resolution of the image\n    vec2 resolution = iResolution.xy;\n\n    // Calculate the aspect ratio\n    vec2 aspectRatio = resolution / resolution.y;\n\n    // Check if the current fragment is close to the center\n\n    // Normalize the coordinates\n    vec2 uv = U / resolution.y;\n\n    // Variables to hold the sum and sum of squares\n    float sum = 0.0;\n    float sumSquared = 0.0;\n\n    for (float i = 0.0; i < COUNT; i++)\n    {\n        // Get a random value based on the iteration index\n        vec2 randomOffset = Random(i);\n\n        // Calculate the sprite position\n        float xOff = Random(i).x;\n        vec2 spritePosition = uv * xOff - randomOffset * aspectRatio + 0.1 * cos(i + iTime + vec2(0, 1.6)); \n        spritePosition.x += xOff*.5;\n        float yOff = sin(iTime+i);\n        yOff = max(0., yOff);\n        spritePosition.y += yOff;\n        \n\n        // Calculate the kernel value\n        float kernelValue = SmoothBlobKernel(spritePosition);\n\n        // Update the sum and sum of squares\n        sum += kernelValue;\n        sumSquared += kernelValue * kernelValue;\n\n        // Accumulate the color from the texture\n        fragColor += kernelValue * SampleTexture(spritePosition);\n    }\n\n    // // Normalization\n    // if (uv.x < aspectRatio.x / 2.0)\n    // {\n    //     // Linear blend\n    //     fragColor /= sum;\n    // }\n    // else\n    // {\n        // Variance preserving blend\n        vec4 meanColor = MeanTexture;\n        fragColor = meanColor + (fragColor - sum * meanColor) / sqrt(sumSquared);\n    // }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}