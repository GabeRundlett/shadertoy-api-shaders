{
    "Shader": {
        "info": {
            "date": "1478555868",
            "description": "Today we try ray tracing + some displacement functions\nRay tracing tutorial by the awesome Cabbibo\nhttps://www.shadertoy.com/view/Xl2XWt",
            "flags": 0,
            "hasliked": 0,
            "id": "4ttSRN",
            "likes": 5,
            "name": "#codevember - 07",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "noob",
                "codevember"
            ],
            "usePreview": 0,
            "username": "jcksmssng",
            "viewed": 1180
        },
        "renderpass": [
            {
                "code": "const float SURFACE_HIT_PRECISION = .001;\nconst float MAX_DIST = 10.;\nconst int MAX_STEPS = 100;\n\n// EyeRay Transformation Matrix from the great @cabbibo\n// https://www.shadertoy.com/view/Xl2XWt\nmat3 calculateEyeRayTransformationMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nfloat map( float value, float oldMin, float oldMax, float newMin, float newMax ) \n{\n    return newMin + (newMax - newMin) * (value - oldMin) / (oldMax - oldMin);\n}\n\n\n// iquilezles.org\nfloat displacement( vec3 ray )\n{\n    float r = sin(iTime);\n    return sin( -1. * r + 10. * ray.x ) * sin( r + 11. * ray.y ) * sin( r + 9. * ray.z );\n}\n\n// SDF now returns a distance from object & an ID\nvec2 sphere ( vec3 ray ) \n{\n    vec3 orig = vec3( 0. , 0. , -3.0 );\n    float radius = 1.1;\n   \tfloat dist1 = length( ray - orig ) - radius;\n    float dist2 = displacement( ray );\n    float dist = dist1 + dist2;\n    float id = 1.;\n    \n\treturn vec2( dist, id );\n}\n\n// Inspired by @cabbibo\n// https://www.shadertoy.com/view/Xl2XWt\nvec2 checkRayHit( vec3 eyePos, vec3 rayDir )\n{\n  \tfloat distToSurface = SURFACE_HIT_PRECISION * 2.;\n    \n  \t// The total distance traveled by the ray obviously should start at 0\n  \tfloat totalDist = 0.;\n  \tfloat finalDist = 0.;\n    \n  \t// if our id is less that 0. , it means we haven't hit anything\n  \tfloat id = -1.;\n\n  \tfor( int i = 0; i < MAX_STEPS; i++ ) {\n    \t// Break if we hit the surface\n    \tif( distToSurface < SURFACE_HIT_PRECISION ) break;\n    \n    \t// Break if we reach end of the scene\n    \tif( totalDist > MAX_DIST ) break;\n    \n    \t// Current pos starts at eyePos then follows rayDir along the total distance traveled by the ray\n    \tvec3 currentPos = eyePos + rayDir * totalDist;\n    \tvec2 distToSphere = sphere( currentPos );\n \t\n\t\tid = distToSphere.y;\n        totalDist += distToSphere.x;\n\t}\n\n  \tif( totalDist < MAX_DIST ) {\n  \t\tfinalDist = totalDist;\n  \t}\n\n  \tif( totalDist > MAX_DIST ){ \n  \t\tfinalDist = MAX_DIST;\n    \tid = -1.;\n  \t}\n\n  \treturn vec2( finalDist , id );\n}\n\n// Original function from @cabbibo\n// https://www.shadertoy.com/view/Xl2XWt\nvec3 getSurfaceNormal( vec3 hitPos )\n{    \n\tvec3 tinyChangeX = vec3( 0.001, 0.0, 0.0 );\n    vec3 tinyChangeY = vec3( 0.0 , 0.001 , 0.0 );\n    vec3 tinyChangeZ = vec3( 0.0 , 0.0 , 0.001 );\n    \n   \tfloat upTinyChangeInX = sphere( hitPos + tinyChangeX ).x; \n    float downTinyChangeInX = sphere( hitPos - tinyChangeX ).x; \n    \n    float tinyChangeInX = upTinyChangeInX - downTinyChangeInX;\n    \n    \n    float upTinyChangeInY   = sphere( hitPos + tinyChangeY ).x; \n    float downTinyChangeInY = sphere( hitPos - tinyChangeY ).x; \n    \n    float tinyChangeInY = upTinyChangeInY - downTinyChangeInY;\n    \n    \n    float upTinyChangeInZ   = sphere( hitPos + tinyChangeZ ).x; \n    float downTinyChangeInZ = sphere( hitPos - tinyChangeZ ).x; \n    \n    float tinyChangeInZ = upTinyChangeInZ - downTinyChangeInZ;\n    \n    \n\tvec3 normal = vec3( tinyChangeInX, tinyChangeInY, tinyChangeInZ );\n    \n\treturn normalize(normal);\n}\n\n\nvec3 bgColor(vec3 rayDir)\n{\n    float b = map(rayDir.x, -1., 1., 0., 1.);\n\treturn vec3( .18, .18, b );\n}\n\n// Inspired by @cabbibo\n// https://www.shadertoy.com/view/Xl2XWt\nvec3 sphereColor( vec3 hitPos, vec3 surfaceNormal )\n{\n    vec3 lightPos = vec3( 1. , 4. , 3. );\n\n    // Get direction of light relative to the hit\n    vec3 lightDir = lightPos - hitPos;\n    lightDir = normalize( lightDir );\n    \n    // The dot product of the lightDir to the surfaceNormal of the hit\n    // Gives us how much that hit is facing the light source\n    // -1: faces opposite\n    // 1: faces completely the light\n    float faceValue = dot( lightDir , surfaceNormal );\n    faceValue = max( 0. , faceValue );\n    \n    float b = map( hitPos.x, -1., 1., 0., .8 );\n    vec3 color = vec3( .18 , .18 , b );\n   \t\n    // here's how we do some shadowing !\n    color *= faceValue;\n\treturn color;\n}\n\n// Inspired by @cabbibo\n// https://www.shadertoy.com/view/Xl2XWt\nvec3 color( vec2 rayHitInfo, vec3 eyePos, vec3 rayDir )\n{\n    vec3 color;\n    \n  \tif( rayHitInfo.y < 0.0 ) {\n  \t\tcolor = bgColor(rayDir);  \n  \t} else {\n      \tvec3 hitPos = eyePos + rayHitInfo.x * rayDir;\n\n      \tvec3 surfaceNormal = getSurfaceNormal( hitPos );\n      \n      \tif( rayHitInfo.y == 1. ){\n        \tcolor = sphereColor( hitPos , surfaceNormal ); \n      \t}\n  \t}\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Fixes the aspect ratio to match a square frame\n\t// get values between -1 and +1 for the current pixel\n\tvec2 uv = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n    vec3 eyePos = vec3( 0., 0., 2.);\n    vec3 lookAt = vec3( 0. , 0. , 0. );\n  \n    mat3 eyeTransformationMatrix = calculateEyeRayTransformationMatrix( eyePos, lookAt, 0. ); \n   \n    // For every pixel we throw a ray from the eye\n    vec3 ray = normalize( eyeTransformationMatrix * vec3( uv.xy , 2. ) ); \n    vec2 rayHitInfo = checkRayHit( eyePos , ray );\n    \n\tvec3 c = color( rayHitInfo, eyePos, ray );\n    \n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}