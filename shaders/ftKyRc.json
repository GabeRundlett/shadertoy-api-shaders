{
    "Shader": {
        "info": {
            "date": "1661958184",
            "description": "uuh",
            "flags": 32,
            "hasliked": 0,
            "id": "ftKyRc",
            "likes": 5,
            "name": "Day 986",
            "published": 3,
            "tags": [
                "fractal",
                "projection",
                "4d",
                "apollonian",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 485[4d projected apollonian]\" by jeyko. https://shadertoy.com/view/fdXSD4\n// 2022-08-31 08:06:24\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec2 muv = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    muv *= 6.28;\n\n    vec3 col = vec3(0);\n\n    col = texture(iChannel0,fragCoord.xy/iResolution.xy).xyz;\n    // reinhardt and sutff\n    //col = 1./(1. + 1./col);\n\t\n\tvec2 res = vec2(iResolution.xy);\n\tvec2 U = gl_FragCoord.xy;\n\n\tcol *= 1. - dot(uv,uv)*0.4;\n    col*=1.5;\n    \n    col = 1. - exp(-col*2.);\n    \n    col = mix(col,smoothstep(0.,1.,col),0.5);\n    \n    col = mix(col,smoothstep(0.,1.,col),0.4);\n    \n\n    \n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + e))\n\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.,1.);\n}\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n/*\nvec4 getNormala(vec4 p){\n    vec2 t = vec2(0.0004,0.00);\n    return normalize(vec4(\n        map(p+t.xyyy).x - map(p-t.xyyy).x,\n        map(p+t.yxyy).x - map(p-t.yxyy).x,\n        map(p+t.yyxy).x - map(p-t.yyxy).x,\n        map(p+t.yyyx).x - map(p-t.yyyx).x));\n}\n*/\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n\nfloat sdBox(vec4 p, vec4 s){p = abs(p) - s; return max(p.x,max(p.y,max(p.z,p.w)));}\n\n\nfloat sdBoxEdges(vec4 p, vec4 s, float edgeW){\n    float d = sdBox(p, s);\n    \n    float cuttingEdgeW = edgeW*1.;\n    //d = abs(d);\n    d = max(d, -sdBox(p, s - vec4(-cuttingEdgeW,edgeW,edgeW,edgeW)));\n    d = max(d, -sdBox(p, s - vec4(edgeW,-cuttingEdgeW,edgeW,edgeW)));\n    d = max(d, -sdBox(p, s - vec4(edgeW,edgeW,-cuttingEdgeW,edgeW)));\n    d = max(d, -sdBox(p, s - vec4(edgeW,edgeW,edgeW,-cuttingEdgeW)));\n    \n    \n    return d;\n}\n\n\n#define max4v(v) max(max(v.x, v.y), max(v.z, v.w))\n#define min4(x,y,z,w) min(min(x, y), min(z, w))\n\n\n#define dmin(d,b) d.x < b ? d : vec2(b,d.y + 1.)\nfloat sdTesseractFrame( vec4 p, vec4 b, float e ) { \n  p = abs(p)-b; \n  vec4 q = abs(p+e)-e; \n  mat4 t = mat4(\n        p.x, q.y, q.z, q.w,\n        q.x, p.y, q.z, q.w,\n        q.x, q.y, p.z, q.w,\n        q.x, q.y, q.z, p.w\n  );\n  return min4(\n        length(max(t[0], 0.0)+min(max4v(t[0]),0.0)),\n        length(max(t[1], 0.0)+min(max4v(t[1]),0.0)),\n        length(max(t[2], 0.0)+min(max4v(t[2]),0.0)),\n        length(max(t[3], 0.0)+min(max4v(t[3]),0.0))\n  );\n}\n\n#define pmod(p,a) (mod(p - 0.5*a,a) - 0.5*a)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// 2d creatures see a line\n// 3d creatures see a 2d array, projected by cam z\n// 4d creatrues see a 3d grid, projected by cam w\n\n\n// what i've done here is construct a 3d grid of 2d slices.\n// each slice is a full raymarch into 4d space, projected by the w\n// this just means that instead of doing\n// rd = normalize(vec3(uv,1));\n// we do\n// rd = normalize(vec3(uv,sliceIdx/sliceCnt,1));\n// that's really about all there is to it. in the end we project the 3d grid perspectively to our 2d shadertoy screen.\n\n\n#define iTime (iTime - g_dith/60.)\n\n// Performance vars\n\nfloat sliceCnt = 140.;\nfloat marchSteps = 50.;\nfloat dMult = 1.;\nfloat g_dith;\n\n// Coeff vars\n\nfloat rotSpd = 0.5;\nfloat fov4D = 0.7;     // scale up the sliceZDepth when widening the fov\nfloat sliceZDepth = 4.; \nfloat minT = 10e5;\n\nfloat normalEps = 0.001;\nfloat distEps = 0.001;\nfloat distOffs = -0.0;\n\nfloat ditherAmt = 1.;\n\n#define DEBUG 0\n#define TUBES 1\n\n\nfloat ld(vec3 p){\n\n    #if TUBES\n        return length(p);\n    #else\n        return max(abs(p.x),max(abs(p.y),abs(p.z)));\n    #endif\n}\nfloat ld(vec2 p){\n    #if TUBES\n        return length(p);\n    #else\n        return max(abs(p.x),abs(p.y));\n    #endif\n}\nfloat ld(float p){\n    return p;\n}\nvec2 sdApollonian(vec4 p){\n    vec2 d = vec2(10e5,0.);\n    float sc = 1.;\n    \n    for(float i = 0.; i < 4.; i++){\n        //p = abs(p);\n        p = pmod(p,vec4(1.5 + 0.5*iMouse.y/iResolution.y));\n        \n        float dpp = dot(p,p );\n        p /= dpp; sc /=dpp;\n        \n     \n    }\n    p /= sc;\n\n    d = dmin(d,ld(p.zxw) - 0.001 );\n    //d = dmin(d,length(p.y) - 0.00 );\n    \n    d = dmin(d,ld(length(p)) - 0.001 );\n    \n    return d;\n}\n\nfloat sdGrid(vec4 p){\n    //float dpp = dot(p,p);\n    //p/=dpp;\n    \n    p = pmod(p,1.5);\n    float d = min(\n        length(p.xyz),\n        min(\n            length(p.xyw),\n            min(\n                length(p.xzw),\n                length(p.ywz)\n            )\n        )\n    );\n    //d *= dpp;\n    //d = abs(d);\n    \n    d = d-.014;\n    \n    return d;\n}\n\nvec2 map(vec4 p){\n    \n    \n    p += sin(iTime*vec4(1,2,1.5,0.56)*0.5)*0.2;\n    \n    //p.wz *= rot(1.4);\n    //p.yw *= rot( -iTime*0.4);\n    \n    p.xw *= rot( iTime*0.5*rotSpd);\n    p.wz *= rot( iTime*0.7*rotSpd );\n    \n    p.yw *= rot( iTime*0.5*rotSpd);\n    p.xz *= rot( iTime*0.7 *rotSpd);\n    \n    //p += 0.2 ;\n    \n    //p -= 0.5 ;\n    \n    //p.yw *= rot( -iTime*0.15);\n\n    vec2 d = sdGrid(p)*vec2(1);\n     \n    return d;\n}\n\nvec4 getNormal(vec4 p){\n    vec2 t = vec2(normalEps,0.00);\n    return normalize(map(p).x-vec4(\n        map(p-t.xyyy).x,\n        map(p-t.yxyy).x,\n        map(p-t.yyxy).x,\n        map(p-t.yyyx).x));\n}\n\nfloat rnd(vec2 uv) {\n  return fract(dot(sin(uv*vec2(172.412,735.124)+uv.yx*vec2(97.354,421.653)+vec2(94.321,37.365)),vec2(4.6872,7.9841))+0.71243);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec2 muv = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    muv *= 6.28;\n\n    vec3 col = vec3(0);\n\n\n    #if DEBUG\n    \n        vec3 gro = vec3(sin(muv.x),0,cos(muv.x))*sliceZDepth*1.5;\n        vec3 grd = normalize(vec3(uv,1));\n\n        gro.yz *= rot(-muv.y);\n        grd.yz *= rot(-muv.y);\n        grd.xz *= rot(-muv.x);\n\n    #endif\n    \n    \n    bool hitAtLeastOnce = false;\n    float dither = texture(iChannel1, fragCoord / 1024.0f).r*ditherAmt*2. - 1.*ditherAmt;\n    g_dith = texelFetch(iChannel2, ivec2(fragCoord)%8,0).x;\n    for(float slice = 0.; slice < sliceCnt; slice++){\n          \n        #if DEBUG\n            vec3 sliceUv = gro + grd * plaIntersect( gro + vec3(0,0,1)*slice/sliceCnt*1.*sliceZDepth , grd, vec4(0,0,-1,0) );\n        #else\n            vec2 sliceUv = uv*(1. + (slice + dither)/sliceCnt);\n        #endif\n        \n        \n        vec4 rd = normalize(vec4(sliceUv.xy,sliceZDepth*((slice + dither)/sliceCnt - 0.5),fov4D));\n        \n        vec4 p = vec4(0); \n        p += rd*dither*0.2;\n       \n        p -= 0.4 ;\n        bool hit = false;\n        vec2 d;\n        float glow = 0.;\n        float t = 0.;\n        \n        for(float st = 0.; st < marchSteps; st++){\n            d = map(p);\n            d.x += distOffs;\n            if(d.x < distEps){\n                hit = true;\n                break;\n            } else if (t > 3.5){\n                //t = 10.;\n                break;\n            }\n            \n            d.x *= dMult;\n            t += d.x;\n            p += rd*d.x;\n        }\n        \n\n          \n        const vec3 fogCol = vec3(0.6,0.6,0.56)*1.;\n        if(hit && t < minT){\n            minT = t;\n            hitAtLeastOnce = true;\n            vec4 n = getNormal(p); \n            \n#define AO(a,m) mix(smoothstep(0.,1.,map(p+normalize(n+vec4(0.,0,0,1))*a).x/a),1.,m)\n            col = (pal(0.5,0.*vec3(1.+ sin( p.w*1.),1.,1.),vec3(0.4,1.,1.5),1.,11.*dot(n,rd)));\n            //col = pow(abs(col),vec3(1.8));\n            \n            col *= AO(1.,0.5)*AO(.4,0.7)*AO(.5,0.8)*AO(.2,0.8)*AO(.08,0.8)*AO(.1,0.8);\n            \n            \n            \n            col = mix(col,fogCol,smoothstep(0.,0.5,(t)*.2- 0.4));\n            }\n        else{\n            if(!hitAtLeastOnce)\n                col = fogCol;\n        }\n        \n    }\n    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}