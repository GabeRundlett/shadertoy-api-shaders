{
    "Shader": {
        "info": {
            "date": "1672653429",
            "description": "Sampling from Uniform Probability Distribution on Disk with Hashing",
            "flags": 0,
            "hasliked": 0,
            "id": "dtfGDl",
            "likes": 4,
            "name": "Uniform Distribution on Disk V2",
            "published": 3,
            "tags": [
                "disk",
                "hash",
                "probability"
            ],
            "usePreview": 0,
            "username": "katayu",
            "viewed": 4213
        },
        "renderpass": [
            {
                "code": "\n// original source for hash : https://www.shadertoy.com/view/4lXyWN\nconst uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 hash( uvec3 x )\n{\n    //I think the value of x is usually comes from 2D/3D coordinates or time in most of applications.\n    //These values are small and continuous.\n    //So, multiply large prime value first.\n    x*=k;\n    //mix x, y, z values.\n    //Without shift operator, x, y and z value become same value.\n    x = ((x>>2u)^(x.yzx>>1u)^x.zxy)*k;\n \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\nvec4 disk(vec2 uv, vec2 pos, float rad, vec3 color) {\n\tfloat d = length(pos - uv) - rad;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=  vec4(1., 1., 1., 1.0);\n\n    // \n    float lineWidth = 0.005;\n    float lineSpacing = 0.1;\n\n    // uv座標を計算\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    // normalize\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float y = mod(uv.y, lineSpacing);\n    if (y <= lineWidth)\n    {\n        // 罫線を描画\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n\n    // 横方向の罫線を描画する位置を計算\n    float x = mod(uv.x, lineSpacing);\n    if (x <= lineWidth)\n    {\n        // 罫線を描画\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }    \n  \n\n\n    float dist = length(uv - vec2(0.0, 0.0));\n\n    // 円の直径\n    float diameter = 0.75;\n\n    uvec3 p = uvec3(fragCoord, iFrame);\n    vec3 h = hash(p);\n    float sampling = h.x + h.y + h.z;\n    sampling = (sampling > 3.*0.5) ? 1.:0.;\n    vec3 color = vec3(1.,1.,1.);\n    color *= sampling;\n\n    if (dist <= diameter)\n    {\n        // サンプリングを描画\n       fragColor = vec4(color, 1.0);\n       \n    }\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}