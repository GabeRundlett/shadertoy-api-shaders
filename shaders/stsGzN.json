{
    "Shader": {
        "info": {
            "date": "1621776593",
            "description": "well, it seems to work (for positive values),\nbut it's a bit complicated for raymarching.",
            "flags": 0,
            "hasliked": 0,
            "id": "stsGzN",
            "likes": 6,
            "name": "kd-house",
            "published": 3,
            "tags": [
                "kdtree"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "#define iterations      3\n#define amplitude       0.7\n#define wallThickness   0.03\n#define doorSize        0.1\n\n//Dave_Hoskins's hash function\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec4 kdCell( vec2 p, vec4 limits ) {\n\n    float seed  = floor(iTime*0.25   )*123.456 + 1.111;\n    float seed2 = floor(iTime*0.25+1.)*123.456 + 1.111;\n    float transition = fract(iTime*0.25);\n\n    int k = 1;\n    for (int i = 0; i < iterations; i++) {\n\n        int j = i % 2;\n\n        float r = mix( hash11(seed), hash11(seed2), transition);\n        \n        r = ( (r-0.5)*amplitude + 0.5 ) * (limits[j+2]-limits[j]) + limits[j];\n\n        int c = int(r>p[j]);\n\n        limits[j+c*2] = r;\n        \n        float add = float(k*c);\n        seed  += add;\n        seed2 += add;\n        \n        k += k;\n    }\n    return limits;\n}\n\nfloat sdHouse( in vec2 pos, in vec2 boxSize) {\n\n    //draw ext. corners\n    if ( abs(pos.x)>boxSize.x+wallThickness && abs(pos.y)>boxSize.y+wallThickness ) {\n        vec2 walls2 = abs(pos.xy)-boxSize.xy-wallThickness;\n        return length(walls2);\n    }\n    \n    // current cell coordinates (left up -- right down)\n    vec4 walls = vec4(-boxSize,boxSize);\n    \n    //we find the divided box we are in\n    vec4 cellWalls = kdCell(pos,walls);\n\n    // direction of closest wall (from outside)\n    vec2 w2 = abs(pos) - boxSize;\n    vec2 centerDir = sign(pos) * ( (w2.x>w2.y) ? vec2(1,0) : vec2(0,1));\n\n    //w : side of closest wall (0 to 3)\n    int w = int(centerDir.x + max(centerDir.y*2.0,0.0) + 1.);\n\n    //number of cells to check (1 or 4)\n    //if we are outside of the house, we only check one wall\n    int check = 1 + 3 * int( abs(pos.x)<boxSize.x && abs(pos.y)<boxSize.y );\n\n    float dist2 = 999999.9;\n\n    for (int i = 0; i<check; i++) { \n\n        int w2 = (i+w)%4;\n        int j = (w2+1)%2;\n        int k = 1-j;\n\n        vec2 normals = vec2(j * w2 - j, k * w2 - k * 2);\n\n        //distance from the wall\n        float wallDist = abs(cellWalls[w2]-pos[k]);\n\n        //a point on the other side of the wall\n        vec2 pos2 = pos + normals * ( 0.0001 + wallDist );\n\n        //walls from neighbour cell\n        vec4 cellWalls2 = kdCell(pos2,walls);\n\n        //we place the door on the segment\n        vec2 segment = vec2(max(cellWalls[j],cellWalls2[j]),min(cellWalls[j+2],cellWalls2[j+2]));\n        float center = (segment.x + segment.y)*0.5;\n        float len = abs(segment.x-segment.y)*0.5;\n        float centerDist = abs(center - pos[j]);\n        \n        //closest point\n        vec2 closest = vec2(doorSize - centerDist, wallDist - wallThickness);\n        \n        //adaptative doors (uncomment and remove condition)\n        //closest.x = min(closest.x, len - wallThickness - centerDist);\n\n        //condition : remove door if space is too small\n        closest.x *= float(len - wallThickness > doorSize);\n\n        closest = max(closest, vec2(0.0));\n\n        dist2 = min(dist2, dot( closest,closest ));\n\n    }\n    return sqrt(dist2);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 pos = uv*2.0-1.0;\n    pos.x *= iResolution.x/iResolution.y;\n    pos *= 0.75;\n    \n    //\n    \n    vec2 boxSize = vec2(1.0,0.5);\n\n    float dist = sdHouse(pos,boxSize)*2.;\n    \n    \n    //iq's distance color style\n    //https://www.shadertoy.com/view/3ltSW2\n    vec3 col = vec3(1.0) - sign(dist)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(dist));\n\tcol *= 0.8 + 0.2*cos(150.0*dist);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(dist)) );\n    \n    //masking the inside\n    if (dist<0.0) { col = vec3(1.0); }\n    \n    fragColor = vec4(col,1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}