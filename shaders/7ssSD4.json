{
    "Shader": {
        "info": {
            "date": "1618826347",
            "description": "uuh",
            "flags": 0,
            "hasliked": 0,
            "id": "7ssSD4",
            "likes": 7,
            "name": "Not a 16-cell honeycomb",
            "published": 3,
            "tags": [
                "projection",
                "4d",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "// Failed attempt at doing 16-cell reflections\n// thought it looked fun tho\n\n\n// Fork of \"Day 486[4d projected fractal]\" by jeyko. https://shadertoy.com/view/7dXXD4\n// 2021-04-17 09:42:03\n\n// Fork of \"Day 485[4d projected apollonian]\" by jeyko. https://shadertoy.com/view/fdXSD4\n// 2021-04-17 05:50:39\n\n// Performance vars\n\nfloat sliceCnt = 80.;\nfloat marchSteps = 30.;\nfloat dMult = 1.;\n\n\n// Coeff vars\n\nfloat rotSpd = .3;\nfloat fov4D = 0.4;     // scale up the sliceZDepth when widening the fov\nfloat sliceZDepth = 2.5; \nfloat minT = 10e5;\n\nfloat normalEps = 0.01;\nfloat distEps = 0.001;\nfloat distOffs = 0.;\n\nfloat ditherAmt = 0.5;\n\n#define DEBUG 0\n#define TUBES 1\nvec4 C;\nvec2 muv;\n\n\n\nfloat lattice16Cell(inout vec4 p){\n    \n    float dpp = dot(p,p);\n    dpp = 1.;\n    \n    //p.w = -p.w;\n    p /= dpp;\n    \n    \n    float sz =0.4;\n    for(float i = 0.; i < 3.; i++){\n       p = abs(p);\n       vec4 r = -normalize(vec4(1.,1,1,1));\n       \n       /*\n           r = vec4(0,1,0,0);\n           r.xy *= rot(-pi/4.);\n           r.zx *= rot(-pi/4.);\n           r.yw *= rot(pi/4.);\n           r = -r;\n       */\n       refl(p,r,sz);\n    }\n    \n    \n    //d.x = length(p) - 0.1;\n    \n    vec2 d = vec2(10e5);;\n    \n    #if 1\n        d.x = length(p.xzy);\n        d.x = min(d.x,length(p.xzw));\n        d.x = min(d.x,length(p.yzw)); \n        d.x = min(d.x,length(p.yxw));\n    #endif\n    \n    d.x = min(d.x,length(p) - 0.05);\n    return d.x*dpp;\n\n}\n\n\n\nvec2 map(vec4 p){\n    p -= vec4(.0,.0,.5,.5);\n    vec2 d;\n    vec4 orbit;\n    \n        p.yw *= rot( iTime*0.2*rotSpd );\n        p.yx *= rot( iTime*0.1*rotSpd );\n        p -= 0.2;\n\n        p.yz *= rot( iTime*1.3*rotSpd );\n        p.zw *= rot( iTime*1.*rotSpd );\n\n        p.xw *= rot( iTime*0.5*rotSpd );\n    \n    \n    //d.x = sdBoxEdges(p, vec4(0.4), 0.005);\n    //d.x =  sdTesseractFrame(  p, vec4(0.4), 0.01 );\n    \n    \n    d.x = lattice16Cell(p);\n    vec2 a;\n    //d.x = fTorus(p, a);\n\n    \n    d.x -= 0.01;\n    return d;\n}\n\nvec4 getNormal(vec4 p){\n    vec2 t = vec2(normalEps,0.00);\n    return normalize(map(p).x-vec4(\n        map(p-t.xyyy).x,\n        map(p-t.yxyy).x,\n        map(p-t.yyxy).x,\n        map(p-t.yyyx).x));\n}\n\n// suggested from tdhooper. Thanks!\n// improve compilation time & overall fps.\nconst int NORMAL_STEPS = 8;\nvec4 getNormala(vec4 pos) {\n\n    vec4 eps = vec4(normalEps*1., 0, 0,0.);\n\t\n\tvec4 nor = vec4(0);\n\tfloat invert = 1.;\n\tfor (int i = 0; i < NORMAL_STEPS; i++) {\n\t\tnor += map(pos + eps * invert).x * eps * invert;\n\t\teps = eps.wxyz;\n\t\tinvert *= -1.;\n\t}\n\treturn normalize(nor);\n}\n\nfloat rnd(vec2 uv) {\n  return fract(dot(sin(uv*vec2(172.412,735.124)+uv.yx*vec2(97.354,421.653)+vec2(94.321,37.365)),vec2(4.6872,7.9841))+0.71243);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    C = 0.45*cos( vec4(0.5,3.9,1.4,1.1) + 0.15*iTime*vec4(1.2,1.7,1.3,2.5) ) - vec4(0.3,0.0,0.0,0.0);\n\n    muv = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    muv *= 6.28;\n\n    vec3 col = vec3(0);\n\n\n    #if DEBUG\n    \n        vec3 gro = vec3(sin(muv.x),0,cos(muv.x))*sliceZDepth*1.5;\n        vec3 grd = normalize(vec3(uv,1));\n\n        gro.yz *= rot(-muv.y);\n        grd.yz *= rot(-muv.y);\n        grd.xz *= rot(-muv.x);\n\n    #endif\n    \n    \n    bool hitAtLeastOnce = false;\n    float dither = texture(iChannel1,(fragCoord)/1024.).x*2. - 1.;\n        \n    const vec3 fogCol = vec3(0.6,0.6,0.56)*1.;\n        \n    for(float slice = 0.; slice < sliceCnt; slice++){\n          \n        #if DEBUG\n            vec3 sliceUv = gro + grd * plaIntersect( gro + vec3(0,0,1)*slice/sliceCnt*1.*sliceZDepth , grd, vec4(0,0,-1,0) );\n        #else\n            vec2 sliceUv = uv*(1. +  slice/sliceCnt);\n        #endif\n        \n        \n        vec4 rd = normalize(vec4(sliceUv.xy,sliceZDepth*((slice + dither*ditherAmt)/sliceCnt - 0.5),fov4D));\n        \n        vec4 p = vec4(0.); \n       \n        bool hit = false;\n        vec2 d;\n        float glow = 0.;\n        float t = 0.;\n       \n    \n        for(float st = 0.; st < marchSteps; st++){\n            d = map(p);\n            d.x += distOffs;\n            if(d.x < distEps){\n                hit = true;\n                break;\n            } else if (t > 4.5){\n                break;\n            }\n            \n            d.x *= dMult;\n            t += d.x;\n            p += rd*d.x;\n        }\n        \n\n          \n        if(hit && t < minT){\n            minT = t;\n            hitAtLeastOnce = true;\n            vec4 n = getNormal(p); \n            \n            col = (pal(0.5,0.5*vec3(1.+ sin( p.w*6.)*0.,1.,1.),vec3(0.4,1.,1.5),1.,4.*dot(n,rd)));\n            //col = pow(abs(col),vec3(1.8));\n            //col *= AO(.1)*AO(.01)*AO(.04)*AO(.08)*AO(.13);\n            \n            col *= AO(.1)*AO(1.01)*2.;\n            \n            \n            col = mix(col,fogCol,smoothstep(0.,1.,(t)*.56- 0.5));\n            //col = mix(col,fogCol,0.7-exp(-t));\n            \n            }\n        \n        \n    }\n\n    if(!hitAtLeastOnce)\n        col = fogCol;\n    // reinhardt and sutff\n    col = 1./(1. + 1./col);\n    //col = 1. - exp(-col*1.);\n    col = ACESFilm(col);\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + e))\n\n#define AO(a) smoothstep(0.,1.,map(p+n*a).x/a)\n\n#define pi acos(-1.)\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.,1.);\n}\n/*\nvec4 getNormala(vec4 p){\n    vec2 t = vec2(0.0004,0.00);\n    return normalize(vec4(\n        map(p+t.xyyy).x - map(p-t.xyyy).x,\n        map(p+t.yxyy).x - map(p-t.yxyy).x,\n        map(p+t.yyxy).x - map(p-t.yyxy).x,\n        map(p+t.yyyx).x - map(p-t.yyyx).x));\n}\n*/\n\n\nvoid refl(inout vec4 p, vec4 reflectionPlane, float offs){\n\n    reflectionPlane = normalize(reflectionPlane);\n    float dotReflectionPlane = dot(p + reflectionPlane*offs,reflectionPlane);\n    dotReflectionPlane = max(abs(dotReflectionPlane),0.)*sign(dotReflectionPlane);\n    p -= min(dotReflectionPlane,0.)*2.*reflectionPlane;\n}\nfloat hypercubeLattice(inout vec4 p){\nfloat sz = 0.4;\n    for(float i = 0.; i < 2.; i++){\n       p = abs(p);\n       refl(p,-vec4(0.,1.,0.,0.),sz);\n       refl(p,-vec4(1.,0.,0.,0.),sz);\n       refl(p,-vec4(0.,0.,1.,0.),sz);\n       refl(p,-vec4(0.,0.,0.,1.),sz);\n       \n    \n    }\n    \n    \n    //d.x = length(p) - 0.1;\n    \n    vec2 d;\n    d.x = length(p.xzy);\n    \n    d.x = min(d.x,length(p.xzw));\n    \n    d.x = min(d.x,length(p.yzw));\n    \n    d.x = min(d.x,length(p.yxw));\n    \n    d.x = min(d.x,length(p) - 0.03);\n    return d.x;\n\n}\n\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n\nfloat sdBox(vec4 p, vec4 s){p = abs(p) - s; return max(p.x,max(p.y,max(p.z,p.w)));}\n\n\nfloat sdBoxEdges(vec4 p, vec4 s, float edgeW){\n    float d = sdBox(p, s);\n    \n    vec2 e = vec2(edgeW,0.);\n    d = abs(d) - edgeW*0.1;\n    edgeW *= 1.5;\n    vec4 q = p;\n    /*\n    q.x = abs(q.x);\n    d = max(d, -sdBox(q- vec4(s.x,0,0,0), vec4(edgeW,s.y,s.z,s.w) - e.yxxx));\n    q = p;\n    q.y = abs(q.y);\n    d = max(d, -sdBox(q- vec4(0,s.y,0,0), vec4(s.x,edgeW,s.z,s.w) - e.xyxx));\n    q = p;\n    q.z = abs(q.z);\n    d = max(d, -sdBox(q- vec4(0,0,s.z,0), vec4(s.x,s.y,edgeW,s.w) - e.xxyx));\n    q = p;\n    q.w = abs(q.w);\n    d = max(d, -sdBox(q- vec4(0,0,0,s.w), vec4(s.x,s.y,s.z,edgeW) - e.xxxy));\n    */\n    \n    //d = max(d,-length(q.xyz) );\n    //d = max(d, -sdBox(p, s - vec4(edgeW,-cuttingEdgeW,edgeW,edgeW)));\n    //d = max(d, -sdBox(p, s - vec4(edgeW,edgeW,-cuttingEdgeW,edgeW)));\n    //d = max(d, -sdBox(p, s - vec4(edgeW,edgeW,edgeW,-cuttingEdgeW)));\n    \n    return d;\n}\n\n\n#define max4v(v) max(max(v.x, v.y), max(v.z, v.w))\n#define min4(x,y,z,w) min(min(x, y), min(z, w))\n\n\n#define dmin(d,b) d.x < b ? d : vec2(b,d.y + 1.)\nfloat sdTesseractFrame( vec4 p, vec4 b, float e ) { \n  p = abs(p)-b; \n  vec4 q = abs(p+e)-e; \n  mat4 t = mat4(\n        p.x, q.y, q.z, q.w,\n        q.x, p.y, q.z, q.w,\n        q.x, q.y, p.z, q.w,\n        q.x, q.y, q.z, p.w\n  );\n  return min4(\n        length(max(t[0], 0.0)+min(max4v(t[0]),0.0)),\n        length(max(t[1], 0.0)+min(max4v(t[1]),0.0)),\n        length(max(t[2], 0.0)+min(max4v(t[2]),0.0)),\n        length(max(t[3], 0.0)+min(max4v(t[3]),0.0))\n  );\n}\n\n#define pmod(p,a) (mod(p - 0.5*a,a) - 0.5*a)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}