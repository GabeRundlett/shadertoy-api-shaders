{
    "Shader": {
        "info": {
            "date": "1567113085",
            "description": "This is just some corn.  The idea literally came to me in a dream.  Don't judge my boring subconscious.\n\nI just finished working through the Book of Shaders, so I'm really new to this whole thing.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlBSDV",
            "likes": 1,
            "name": "Hell yeah it's Corn",
            "published": 3,
            "tags": [
                "corn",
                "vegetables"
            ],
            "usePreview": 0,
            "username": "stseagle",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// Box from The Book of Shaders\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\n\n// From Inigo Quilez\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n// From - https://www.shadertoy.com/view/XdXGW8 \nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0.2471, 0.1333, 0.0392);\n    vec3 cornColor = vec3(0.8, 0.7882, 0.2039);\n\n    vec2 st = fragCoord.xy/max(iResolution.x,iResolution.y);\n    st *= 16.;\n    vec2 pos = vec2(st * 1.8);\n    st /= vec2(2.4,1.)*0.3;\n    st = fract(st);\n\n    vec2 mt = iMouse.xy/max(iResolution.x, iResolution.y);\n    float n = .8 + .3 * noise(pos);\n    float cutoff = 0.5;\n    float cornKernel = clamp(box(st, vec2(1.12),0.5),0.,cutoff) * (1./cutoff);\n\n    // Make the kernels look a little uneven\n    vec3 kernel = mix(color, cornColor, cornKernel);\n    kernel = vec3(kernel.r * (n + 0.23), kernel.g * (n + 0.1), kernel.b);\n\n    // shimmer\n    kernel += vec3(1.) * (0.2 + 1.3 * noise(st)) * \n            (1.-distance(mt,st));\n\n    color = color * 0.5 + kernel;\n\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}