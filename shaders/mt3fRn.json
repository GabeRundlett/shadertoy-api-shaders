{
    "Shader": {
        "info": {
            "date": "1700855349",
            "description": "fortnite mmm",
            "flags": 0,
            "hasliked": 0,
            "id": "mt3fRn",
            "likes": 2,
            "name": "Fortnite big bang fractal",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "fortnite"
            ],
            "usePreview": 0,
            "username": "_90_",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 1.5\n#define SURF_DIST .00025\n#define PI 3.141592\n#define T iTime/2.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 pos) {\n    float power = 11.0;\n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n\tfor (int i = 0; i < 5 ; i++) {\n\t\tr = length(z);\n\t\tif (r>10.0) break;\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow( r, power-1.0)*power*dr + 1.0;\n\t\tfloat zr = pow( r,power);\n\t\ttheta = theta*power - T*2.0;\n\t\tphi = phi*power;\n\t\tz = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\tz+=pos;\n\t}\n\treturn 0.5*log(r)*r/dr;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    int ix=0;\n    for(int i=0;i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) {\n            ix = i;\n            break;\n        }\n    }\n    return vec2(dO,ix);\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 1.5, 0.0);\n    ro.yz *= Rot((PI/2.0)-(sin(T)/5.0));\n    ro.xz *= Rot((cos(T)/5.0));\n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,1.0), 1.0);\n    vec3 col = vec3(-0.5);\n    vec2 rm = RayMarch(ro, rd);\n    if(rm.x<MAX_DIST) {\n        vec3 p = ro + rd * rm.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(0.0,0.03,0.2);\n    }\n    col += vec3((rm.y/pow(float(MAX_STEPS),0.55))-0.2) * vec3(0.87,0.95,1.0);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}