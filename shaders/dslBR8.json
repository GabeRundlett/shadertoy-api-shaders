{
    "Shader": {
        "info": {
            "date": "1688676842",
            "description": "Mimicking glsl's packUnorm4x8/unpackUnorm4x8 functionality for easy packing and unpacking unorm textures/color values in a single uint. Can export upto 4 vec4s for the price of 1. ",
            "flags": 32,
            "hasliked": 0,
            "id": "dslBR8",
            "likes": 4,
            "name": "Unorm Vec4 Packing",
            "published": 3,
            "tags": [
                "compression",
                "packing"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = fragCoord/iResolution.xy;   \n    vec2 mouse = bool(dot(vec2(lessThan(iMouse.xy, vec2(0.5))), vec2(1.0))) ? (vec2(0.5)) : (iMouse.xy / iResolution.xy);\n    vec4 packedAll = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    mat4 unpackedAll = mat4(\n                                unpackUnorm4x8(floatBitsToUint(packedAll.x)),\n                                unpackUnorm4x8(floatBitsToUint(packedAll.y)),\n                                unpackUnorm4x8(floatBitsToUint(packedAll.z)),\n                                unpackUnorm4x8(floatBitsToUint(packedAll.w))\n                            );\n    \n    fragColor = unpackedAll[uint(dot(vec2(greaterThan(uv, mouse.xy)), vec2(1.0, 2.0)))]; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel0, uv, 0.0))),\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel1, uv, 0.0))),\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel2, uv, 0.0))),\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel3, uv, 0.0)))\n                    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "uint packUnorm4x8(in vec4 unpacked)\n{\n    uvec4 utex = uvec4(unpacked * 255.0);\n    return ((utex.x << 24) | (utex.y << 16) | (utex.z << 8) | (utex.w));\n}\n\nvec4 unpackUnorm4x8(in uint packed)\n{\n    return vec4(\n        float((packed & 4278190080u) >> 24),\n        float((packed & 16711680u) >> 16),\n        float((packed & 65280u) >> 8),\n        float((packed & 255u))\n    ) * 0.0039215686;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}