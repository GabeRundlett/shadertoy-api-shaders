{
    "Shader": {
        "info": {
            "date": "1576866269",
            "description": "Each direction has an assigned color.\nClick to add waves",
            "flags": 32,
            "hasliked": 0,
            "id": "wlc3R2",
            "likes": 3,
            "name": "Colorsound",
            "published": 3,
            "tags": [
                "soundwave"
            ],
            "usePreview": 0,
            "username": "Guilouf",
            "viewed": 444
        },
        "renderpass": [
            {
                "code": "// Just transmit the image, and add contrast\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    fragColor = texture(iChannel0,uv) * vec4(15,15,15,15);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nKernel, return rgba as left,right,up,down\nTakes a kernel and the current image pixel as input,\nreturns a kernel\n*/\n\nvec2 move(vec2 uv, vec2 xy) {\n\treturn uv + xy / iResolution.xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 prevK = texture(iChannel0, uv); //previous kernel \n    fragColor = prevK;\n    \n    //previous pixels \n    vec4 center = texture(iChannel1, uv); \n    vec4 left = texture(iChannel1, move(uv, vec2(1,0)));\n\tvec4 right = texture(iChannel1, move(uv, vec2(-1,0)));\n    vec4 down = texture(iChannel1, move(uv, vec2(0,1)));\n    vec4 up = texture(iChannel1, move(uv, vec2(0,-1)));\n\n    \n    fragColor.a += (center.r - left.r);\n    fragColor.r += (center.r - right.r);\n    fragColor.g += (center.r - up.r);\n    fragColor.b += (center.r - down.r);\n \n        \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nImage buffer\nTakes previous image and kernel as input,\nreturns a new image\n\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    ivec2 ifragCoord = ivec2(fragCoord);\n    ivec2 intMouse = ivec2(iMouse.xy);\n    \n    vec4 kernel = texture(iChannel0, uv);\n    vec4 draw = texture(iChannel1, uv);\n    \n    if (ifragCoord.x == intMouse.x && ifragCoord.y == intMouse.y)  {\n        draw = vec4(1,1,1,1);  // white\n    } \n    \n    \n    float sum = 0.;\n    \n    sum += kernel.r;\n    sum += kernel.g;\n    sum += kernel.b;\n    sum += kernel.a;\n    \n    sum /= 4.;  // try 2.4\n        \n    \n    fragColor = draw;\n    \n    \n    fragColor.r -= sum;  // adds to red channel\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}