{
    "Shader": {
        "info": {
            "date": "1652962568",
            "description": "Press r to reset\n\nmessy code",
            "flags": 48,
            "hasliked": 0,
            "id": "ss3cRr",
            "likes": 2,
            "name": "Distortion Automata 500",
            "published": 3,
            "tags": [
                "feedback",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col =  texelFetch(iChannel0, ivec2(1. * fragCoord), 0);//.rgba;\n    \n    vec2 uv = (fragCoord - 0. * iResolution.xy) / iResolution.xy;\n    vec4 col2 = texture(iChannel1, uv + 0.5 * (col.rg-0.5));\n\n    col = sqrt(col) + 0.04;\n    fragColor = mix(col,col2,0.5);\n    //fragColor.rgb = (col.a) * col.rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\nvec4 Cell( in ivec2 p ) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).rgba;\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    \n    if (iFrame == 0 || key_down(KEY_RESET)) {\n        vec2 f = fragCoord + 0.01 * iTime; \n       \n        vec3 e = vec3(0.5);\n        float h = h21(f + 113.);\n        float s = step(0.99, h);\n      \n        vec3 col = pal(10. * h, e, e, e, 1. * vec3(0,1,2)/3.);\n        //col *= s;\n        vec2 uv = fragCoord / iResolution.xy;\n        col = texture(iChannel2, uv).rgb;\n        \n        \n        //col *= step(length((uv-0.5) * iResolution.xy/iResolution.y), 0.4);\n        //col = vec3(uv.x * step(length(uv-0.5), 0.4));\n        fragColor = vec4(col, h21(col.rg));\n        //fragColor = vec4(col, s * h21(f + 50.));\n        return;\n    }\n    \n    // center cell\n    vec4 e = Cell(px); \n\n    // neighbour cells\n    vec4 t = Cell(px + ivec2(0,-1));\n    vec4 b = Cell(px + ivec2(0,1));\n    vec4 l = Cell(px + ivec2(-1,0));\n    vec4 r = Cell(px + ivec2(1,0));   \n    \n    float a = e.a;\n\n    float vt = abs(t.r-e.r)+abs(t.g-e.g)+abs(t.b-e.g);\n    float vb = abs(b.r-e.r)+abs(b.g-e.g)+abs(b.b-e.g);\n    float vl = abs(l.r-e.r)+abs(l.g-e.g)+abs(l.b-e.g);\n    float vr = abs(r.r-e.r)+abs(r.g-e.g)+abs(r.b-e.g);\n    \n    vec4 th = vec4(0);\n    float mx = max(max(vt,vb),max(vl,vr));\n    float mn = min(min(vt,vb),min(vl,vr));\n    int c = 0;\n    \n    if (vt == mx) {\n        th = t; c++;\n    }\n    if (vb == mx) {\n        th = b; c++;\n    }\n    if (vl == mx) {\n        th = l; c++;\n    }\n    if (vr == mx) {\n        th = r; c++;\n    }\n    \n    if (mx > 0. * sqrt(2.) && c == 1) {\n        if (e.a < th.a) {\n            e = mix(e,th,0.9);\n           // e.a = mix(e.a, th.a, 0.9) + 0.0;\n        }\n        else \n            e.rgb += 0.001;\n    }    \n    e.a += 0.0;\n    e = fract(e);\n    \n   // if (a == e.a)\n     //   e.a += 0.;\n        \n  //  e.a = fract(e.a);\n    //if (a != e.a)\n      //  e.a = mix(a, e.a, h21(e.rg + r.b));\n    \n    //e.a += 0.005;\n    \n   // e.a -= 0.005;\n    //e.a = fract(e.a);\n\n    e = clamp(e, 0., 1.);\n\tfragColor = e;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 3.1415926535\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Flicker reduction.\n// This CA tends to produce structures that flicker between two states.\n// Code here copies CA output on odd frames and stays unchanged on even.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (iFrame % 2 == 1)\n        fragColor.rgba = texelFetch(iChannel0, ivec2(fragCoord), 0).rgba;\n    else\n        fragColor.rgba = texelFetch(iChannel1, ivec2(fragCoord), 0).rgba;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}