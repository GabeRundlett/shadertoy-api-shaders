{
    "Shader": {
        "info": {
            "date": "1603293936",
            "description": "A simple helper demo for generating a Halton(2, 3) sequence for some TAA stuff.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dyyR3",
            "likes": 9,
            "name": "Halton(2, 3) Sequence",
            "published": 3,
            "tags": [
                "antialiasing",
                "supersampling",
                "halton",
                "temporal",
                "taa",
                "txaa"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 1291
        },
        "renderpass": [
            {
                "code": "/**\n*\n* A simple helper demo for generating a Halton(2, 3) sequence for some TAA stuff.\n*\n* The sequence adds a new offset to the index every 60 frames (or 1 second, this can be changed). So I can \n* scrub the time (shadertoy plugin <3) and see where the discrepancy of the sequence is the lowest and \n* calculate the offset value at that timestep. \n*\n* To calculate offset, offs = floor((t * 1000 / 16.67) / interval)\n*\n* The above calculation assumes a stable framerate of 60 fps. \n*\n*/\n\n//#define GRID\n\nconst int interval = 60;\nconst int sampleCount = 16;\n\n// https://en.wikipedia.org/wiki/Halton_sequence#Implementation_in_pseudocode\nfloat halton(int base, int index)\n{\n\tfloat result = 0.;\n\tfloat f = 1.;\n\twhile (index > 0)\n\t{\n\t\tf = f / float(base);\n\t\tresult += f * float(index % base);\n\t\tindex = index / base; \n        //index = int(floor(float(index) / float(base)));\n\t}\n\treturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    int offset = iFrame / interval; // increment offset every x no. of frames\n    \n    for (int i = 0; i < sampleCount; ++i)\n    {\n        int idx = offset + i;\n        vec2 hh = vec2(halton(2, idx), halton(3, idx)) - .5;\n        hh.x *= iResolution.x / iResolution.y;\n    \tcol += smoothstep(.02, .01, length(uv - hh * 1.8));\n    }\n    \n#ifdef GRID\n    vec2 st = fragCoord / iResolution.xy;\n    st *= 4.;\n    if (fract(st).x < .01 || fract(st).y > .99)\n        col.r += 1.;\n#endif\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}