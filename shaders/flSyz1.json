{
    "Shader": {
        "info": {
            "date": "1661547314",
            "description": "Allows strings to be rendered easily\nsee common tab for mapping functions and variables\npress any key to view it",
            "flags": 48,
            "hasliked": 0,
            "id": "flSyz1",
            "likes": 3,
            "name": "Strings Example",
            "published": 3,
            "tags": [
                "font",
                "reference",
                "keyboard",
                "input"
            ],
            "usePreview": 1,
            "username": "ArmandB",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "/*\n    see common tab for mapping functions and character variables\n    press any key to see it on screen\n    string useage in common\n*/\n\n\n/*\ninput: \n    code - an int representing the location on the font texture to sample\noutput:\n    a texture with the character on it\n*/\nvec3 getChar(int code, vec2 uv){\n    vec2 code_wrapped = vec2(code - code/16*16, 16 - code/16 - 1);\n    return texture(iChannel1, (code_wrapped + clamp(uv,0.0,1.0))/16.0).rgb;\n}\n\n/*\ninput: \n    string - a 64 int array representing all the characters you want to use\n    fontSize - a float representing the scale to use when rendering\n    wrap - int, the number of characters to print before wrapping\n    uv - vec2, uv coordinates (0-1)\noutput:\n    a texture (in the same format as the font texture) with your string on it\n*/\nvec3 renderString(int[64] string, float fontSize, int wrap, vec2 uv){\n    vec3 col = vec3(0);\n    vec2 offset = vec2(0,1.0/fontSize-1.0);\n    for (int i = 0; i < 64; i++){\n        vec2 charuv = uv/fontSize - offset*vec2(0.5,1);\n        if (string[i] == _newline){\n            offset.y -= 1.0;\n            offset.x = 0.0;\n        } else {\n            if (charuv.x >= 0.25 && charuv.x < 0.75 && charuv.y >= 0.0 && charuv.y < 1.0){\n                col = getChar(asciiToImage(string[i]), charuv);\n            }\n            offset.x += 1.0;\n            if (offset.x == float(wrap)){\n                offset.y -= 1.0;\n                offset.x = 0.0;\n            }\n        }\n    }\n    return col;\n}\n\n/*\ninput: \n    num - the number you want a digit of\n    digit - digit of the int you want to use\noutput:\n    the selected digit (int 0-9) in the input number\n*/\nint hexOfInt(int num, int digit){\n    return num >> 4 * digit - 4 & 15;\n}\n\nint digitOfInt(int num, int digit){\n    digit = max(digit,0);\n    int mul = 1;\n    for (int i = 0; i < digit; i++){\n        mul*=10;\n    }\n    return num/(mul/10) - num/mul*10;\n}\n\n\n\n/*////////\n  MAIN\n////////*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //gets the keycode from Buffer A in order to only run the loop for one pixel\n    int keycode = int(texelFetch(iChannel0, ivec2(0), 0).x);\n    bool shiftPressed = bool(texelFetch(iChannel0, ivec2(0), 0).y);\n\n    //init uv coords and screen color\n    vec2 uv = fragCoord/iResolution.y;\n    vec3 col = vec3(1);\n\n    //draw pressed key\n    if (keycode != -1) {\n        col = mix(vec3(1), vec3(0), getChar(keyboardToImage(keycode, shiftPressed), uv*1.5 - vec2(0.25)).x);\n    }\n    \n    //the pressed key in ascii\n    int ascii = keyboardToAscii(keycode, shiftPressed);\n    \n    //String example. Must be 64 chars\n    //use underscore in front of char you want to use\n    int[64] myString = int[64](\n        _A,_s,_c,_i,_i,_colon,_space,\n        hexToAscii(hexOfInt(ascii,3)),\n        hexToAscii(hexOfInt(ascii,2)),\n        hexToAscii(hexOfInt(ascii,1)),\n        _newline,_K,_e,_y,_b,_o,_a,_r,_d,_colon,_space,\n        hexToAscii(hexOfInt(keycode,3)),\n        hexToAscii(hexOfInt(keycode,2)),\n        hexToAscii(hexOfInt(keycode,1)),\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n    );\n    \n    //another string\n    int[64] myOtherString = int[64](\n        _T,_h,_e,_space,\n        _q,_u,_i,_c,_k,_space,\n        _b,_r,_o,_w,_n,_space,\n        _f,_o,_x,_space,\n        _j,_u,_m,_p,_s,_space,\n        _o,_v,_e,_r,_newline,\n        _t,_h,_e,_space,\n        _l,_a,_z,_y,_space,\n        _d,_o,_g,_period,\n        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n    );\n    \n    //render both strings\n    col = mix(col, vec3(0),renderString(myString, 0.1, 64, uv).r);\n    col = mix(col, vec3(0),renderString(myOtherString, 0.1, 64, uv+vec2(0,0.8)).r);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//int keyboardToAscii(int key, bool shiftPressed)\n//remaps a keyboard value to an ascii value\n\n//int asciiToImage(int ascii)\n//remaps an ascii value to a texture position\n\n//int asciiToKeyboard(int ascii)\n//remaps an ascii value to a keyboard value\n\n//int keyboardToImage(int key, bool shiftPressed)\n//remaps a keyboard value to a texture position\n\n//int keyboardToDigit(int key)\n//converts a keyboard value to a digit\n\n//int digitToAscii(int digit)\n//converts a digit to ascii\n\n//int digitToImage(int digit)\n//converts a digit to a texture position\n\n//all (printable) characters in ascii\nconst int _a = 97;\nconst int _b = 98;\nconst int _c = 99;\nconst int _d = 100;\nconst int _e = 101;\nconst int _f = 102;\nconst int _g = 103;\nconst int _h = 104;\nconst int _i = 105;\nconst int _j = 106;\nconst int _k = 107;\nconst int _l = 108;\nconst int _m = 109;\nconst int _n = 110;\nconst int _o = 111;\nconst int _p = 112;\nconst int _q = 113;\nconst int _r = 114;\nconst int _s = 115;\nconst int _t = 116;\nconst int _u = 117;\nconst int _v = 118;\nconst int _w = 119;\nconst int _x = 120;\nconst int _y = 121;\nconst int _z = 122;\n\nconst int _A = 65;\nconst int _B = 66;\nconst int _C = 67;\nconst int _D = 68;\nconst int _E = 69;\nconst int _F = 70;\nconst int _G = 71;\nconst int _H = 72;\nconst int _I = 73;\nconst int _J = 74;\nconst int _K = 75;\nconst int _L = 76;\nconst int _M = 77;\nconst int _N = 78;\nconst int _O = 79;\nconst int _P = 80;\nconst int _Q = 81;\nconst int _R = 82;\nconst int _S = 83;\nconst int _T = 84;\nconst int _U = 85;\nconst int _V = 86;\nconst int _W = 87;\nconst int _X = 88;\nconst int _Y = 89;\nconst int _Z = 90;\n\nconst int _space = 32;\nconst int _newline = 10;\n\nconst int _slash = 47;\nconst int _backslash = 92;\nconst int _pipe = 124;\n\nconst int _colon = 58;\nconst int _semicolon = 59;\nconst int _apostrophe = 39;\nconst int _backtick = 96;\nconst int _quotation = 34;\n\nconst int _question = 63;\nconst int _period = 46;\nconst int _comma = 44;\nconst int _exclaimation = 33;\n\nconst int _equals = 61;\nconst int _plus = 43;\nconst int _minus = 45;\n\nconst int _underscore = 95;\nconst int _asterisk = 42;\nconst int _and = 38;\nconst int _caret = 94;\nconst int _percent = 37;\nconst int _dollar = 36;\nconst int _hash = 35;\nconst int _at = 64;\n\nconst int _arrowleft = 60;\nconst int _arrowright = 62;\nconst int parright = 40;\nconst int parleft = 41;\nconst int sbrackright = 91;\nconst int sbrackleft = 93;\nconst int cbrackright = 123;\nconst int cbrackleft = 125;\n\n/*\nnote: due to missing ascii values\n    enter = return\n    shift = shift in\n    ctrl = device control 1\n    alt = substitute\n    left = missing\n    up = missing\n    right = missing\n    down = missing\n*/\n\n//maps each keyboard key value to ascii\nconst int[256] keyboardToAsciiMap = int[256](\n  0,  0,  0,  0,  0,  0,  0,  0,  8, 27,  0,  0,  0, 10,  0,  0,\n 15, 17, 26,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,\n 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  0,  0,  0,  0,  0,  0,\n  0, 97, 98, 99,100,101,102,103,104,105,107,108,109,110,110,111,\n112,113,114,115,116,117,118,119,120,121,122,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 59, 61, 44, 45, 46, 47,\n 96,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 91, 92, 93, 39,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0\n);\n\n//maps each keyboard key value to ascii when shift is pressed\nconst int[256] shiftKeyboardToAsciiMap = int[256](\n  0,  0,  0,  0,  0,  0,  0,  0,  8, 27,  0,  0,  0, 10,  0,  0,\n 15, 17, 26,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,\n 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n 41, 33, 64, 35, 36, 37, 94, 38, 42, 40,  0,  0,  0,  0,  0,  0,\n  0, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 58, 43, 60, 95, 62, 63,\n126,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,123,124,125, 34,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0\n);\n\n//remaps a keyboard value to an ascii value\nint keyboardToAscii(int key, bool shiftPressed){\n    return shiftPressed ? shiftKeyboardToAsciiMap[key] : keyboardToAsciiMap[key];\n}\n\n//remaps an ascii value to a texture position\nint asciiToImage(int ascii){\n    if (ascii >= 32){\n        return ascii;\n    }\n    return 32;\n}\n\n//maps each ascii value to a keyboard value\nconst int[128] asciiToKeyboardMap = int[128](\n    0,0,0,0,0,0,0,0,8,27,13,0,0,0,0,16,\n    0,17,0,0,0,0,0,0,0,0,18,9,0,0,0,0,\n    32,49,221,51,52,53,55,221,57,48,56,186,187,188,189,190,\n    48,49,50,51,52,53,54,55,56,57,186,186,187,186,189,190,\n    50,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,\n    80,81,82,83,84,85,86,87,88,89,90,218,219,220,54,188,\n    191,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,\n    80,81,82,83,84,85,86,87,88,89,90,218,219,220,191,0\n);\n\n//remaps an ascii value to a keyboard value\nint asciiToKeyboard(int ascii) {\n    return asciiToKeyboardMap[ascii];\n}\n\n//maps each keyboard key value to the correct symbol on the font texture\nconst int[256] keyboardToImageMap = int[256](\n  0,  0,  0,  0,  0,  0,  0,  0, 32, 32,  0,  0,  0, 32,  0,  0,\n 32, 32, 32,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,\n 32,  0,  0,  0,  0, 16, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,\n 48, 49, 50, 51, 52, 53, 54, 55, 56,  57, 0,  0,  0,  0,  0,  0,\n  0, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,\n112,113,114,115,116,117,118,119,120,121,122,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 59, 61, 44, 45, 46, 47,\n 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 91, 92, 93,180,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0\n);\n\n//maps each keyboard key value when shift is pressed to the correct symbol on the font texture\nconst int[256] shiftKeyboardToImageMap = int[256](\n  0,  0,  0,  0,  0,  0,  0,  0, 32, 32,  0,  0,  0, 32,  0,  0,\n 32, 32, 32,  0,  0,  0,  0,  0,  0,  0,  0, 32,  0,  0,  0,  0,\n 32,  0,  0,  0,  0, 16, 17, 18, 19,  0,  0,  0,  0,  0,  0,  0,\n 41, 33, 64, 35, 36, 37, 94, 38, 42, 40,  0,  0,  0,  0,  0,  0,\n  0, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 58, 43, 60, 95, 62, 63,\n 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,123,124,125, 34,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0\n);\n\n//remaps a keyboard value to a texture position\nint keyboardToImage(int key, bool shiftPressed){\n    return shiftPressed ? shiftKeyboardToImageMap[key] : keyboardToImageMap[key];\n}\n\n//converts a keyboard value to a digit\nint keyboardToDigit(int key){\n    if (key >= 48 && key <= 56) {\n        return key - 48;\n    }\n    return -1;\n}\n\n//converts a digit to ascii\nint digitToAscii(int digit){\n    return digit + 48;\n}\n\n//converts a hex digit to ascii\nint hexToAscii(int hex){\n    if (hex < 10){\n        return hex + 48;\n    } else if (hex == 10){\n        return 65;\n    } else if (hex == 11){\n        return 66;\n    } else if (hex == 12){\n        return 67;\n    } else if (hex == 13){\n        return 68;\n    } else if (hex == 14){\n        return 69;\n    } else if (hex == 15){\n        return 70;\n    }\n}\n\n//converts a digit to a texture position\nint digitToImage(int digit){\n    return digit + 48;\n}\n\n/*\nref\n\nnormal:\n  0,  0,  0,  0,  0,  0,  0,  0,bsp,esc,  0,  0,  0,ent,  0,  0,\nsft,ctr,alt,  0,  0,  0,  0,  0,  0,  0,  0,tab,  0,  0,  0,  0,\nspc,  0,  0,  0,  0,  <,  ^,  >,  v,  0,  0,  0,  0,  0,  0,  0,\n  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  0,  0,  0,  0,  0,\n  0,  a,  b,  c,  d,  e,  f,  g,  h,  i,  j,  k,  l,  m,  n,  o,\n  p,  q,  r,  s,  t,  u,  v,  w,  x,  y,  z,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  ;,  =,  ,,  -,  .,  /,\n  `,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  [,  \\,  ],  ',  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0\n  \nshift:\n  0,  0,  0,  0,  0,  0,  0,  0,bsp,esc,  0,  0,  0,ent,  0,  0,\nsft,ctr,alt,  0,  0,  0,  0,  0,  0,  0,  0,tab,  0,  0,  0,  0,\nspc,  0,  0,  0,  0,  <,  ^,  >,  v,  0,  0,  0,  0,  0,  0,  0,\n  ),  !,  @,  #,  $,  %,  ^,  &,  *,  (,  0,  0,  0,  0,  0,  0,\n  0,  A,  B,  C,  D,  E,  F,  G,  H,  I,  J,  K,  L,  M,  N,  O,\n  P,  Q,  R,  S,  T,  U,  V,  W,  X,  Y,  Z,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  :,  +,  <,  _,  >,  ?,\n  ~,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  {,  |,  },  \",  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0\n  \n  ascii\n0,0,0,0,0,0,0,0,bs,tab,lf,0,0,0,0,si,\n0,dc1,0,0,0,0,0,0,0,0,sub,esc,0,0,0,0,\n ,!,\",#,$,%,&,',(,),*,+,,,-,.,/,\n0,1,2,3,4,5,6,7,8,9,:,;,<,=,>,?,\n@,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,\nP,Q,R,S,T,U,V,W,X,Y,Z,[,\\,],^,_,\n`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,\np,q,r,s,t,u,v,w,x,y,z,{,|,},~,0\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (floor(fragCoord) == vec2(0)) {\n        //loops through all keys in the keyboard texture and finds the first one that's pressed\n        int keycode = -1;\n        for (int i = 0; i < 256; i++){\n            if (i == 16) {continue;}\n\n            bool pressed = bool(texelFetch(iChannel0, ivec2(i, 0), 0).x);\n            if (pressed){\n                keycode = i;\n                break;\n            }\n        }\n        bool shiftPressed = bool(texelFetch(iChannel0, ivec2(16,0), 0).x);\n        fragColor = vec4(keycode,shiftPressed,0,0);\n    } else {\n        fragColor = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}