{
    "Shader": {
        "info": {
            "date": "1683913595",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "3tXyDS",
            "likes": 2,
            "name": "Field of prime divisors",
            "published": 3,
            "tags": [
                "primenumbersfactorization"
            ],
            "usePreview": 0,
            "username": "brianhaak",
            "viewed": 157
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    \n    //fragCoord = floor(fragCoord);// - 0.5);\n    \n    //fragCoord.x *= 0.5 / (log(fragCoord.x) - 1.0); // 0.125;\n    //fragCoord.y *= 0.25;// / (log(fragCoord.y) - 1.0);\n   \n   \n    float zoom = 1.0;//8.0;\n    \n    fragCoord = vec2(fragCoord) / zoom;\n    \n    // float vert_pos = (iResolution.y - (iMouse.y - iMouse.w)) / zoom;\n    \n    // float vert_pos = (iResolution.y - abs(iMouse.w)) / zoom;\n    float vert_pos = (abs(iMouse.w)) / zoom;\n    if (iMouse.y > 0.0) {\n        //vert_pos = (iResolution.y - abs(iMouse.y)) / zoom;\n        vert_pos = (abs(iMouse.y)) / zoom;\n    }\n    \n    vert_pos = floor(vert_pos);\n    \n    float y = fragCoord.y;//iResolution.y - fragCoord.y;\n    \n    //fragCoord = floor(vec2(fragCoord.x, y) / zoom);\n    //fragCoord = floor(fragCoord / zoom);\n    //y = fragCoord.y;\n    \n    \n    //float x = floor(0.5 * fragCoord.x) + 2.0;\n    float x = fragCoord.x;// + 1.0;\n    \n    //if (x == y) {\n        //fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    //    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    //    return;\n    //}\n    \n    //if (x > 1.5) {\n    //    fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        //return;\n    //}\n    \n   \n    const vec4 rate = vec4(240.0,144.0,120.0,60.0);\n    vec4  d = abs(rate-iFrameRate);\n    float refresh = (d.x<d.y && d.x<d.z && d.x<d.w) ? rate.x:\n                               (d.y<d.z && d.y<d.w) ? rate.y:\n                                          (d.z<d.w) ? rate.z:\n                                                      rate.w;\n    \n    // compute how many frames we should have delivered so far\n    float frame = round(iTime*refresh);\n    \n    \n    // float offset = iTime * 60.0;\n    float speed = 111.0;\n    //float speed = 1.0 / 4.0;\n    float offset = floor(speed * frame);// / speed) * speed;//iTime * 500.0;\n    \n    vec4 mix_mouse = vec4(0.0);\n    \n    if (abs(y - vert_pos) < 0.51) {\n        mix_mouse = vec4(0.5, 0.5, 0.0, 0.0);\n    }\n    \n    //y += offset + 1046527.0;// + 1800.0;\n    //x += 1046527.0 / 2000.0;// - 2000.0;\n    y += offset;\n    \n    //x += 2.0;\n    \n    float x_for_rem = x + 1.0;\n    \n    float rem = mod(y, x_for_rem); //y - x * integral_ratio;\n    \n    float distance_from_zero = 0.5 * x_for_rem - rem + 1.0;\n    \n    //float intensity = 100.0 - abs(distance_from_zero * distance_from_zero) / (x_for_rem * x_for_rem);\n    float intensity = 1.0 - 1.5 * abs(distance_from_zero * distance_from_zero) / (x_for_rem * x_for_rem);\n    \n    // float dynamic_range = 16.0;\n    //float intensity = (dynamic_range - floor(mod(distance_from_zero, dynamic_range)))/dynamic_range;\n    \n    if (abs(distance_from_zero) / x_for_rem > 0.49) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    fragColor = vec4(intensity, intensity, intensity, 1.0);\n    \n    \n    return;\n    \n    \n    /*\n    if (x >= y) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    if (x > y) {\n        fragColor = vec4(0.0);\n        return;\n    }*/\n    \n    //if (y - offset == floor(iResolution.y / zoom) - 10.0) { //52.0) {\n    //    fragColor = vec4(1.0);\n    //    return;\n    //}\n    \n    \n   \n    \n    //if (x <= 1.0) {\n    //\tfragColor = vec4(0.0);;//vec4(vec3((1.0 / 256.0) * mod(y, 256.)), 1.0);\n    //    return;\n    //}\n    \n    \n   \n    //float line = mod(y / x, repeat); //* step(remainder, 1.0), 256.0);\n    \n    // float linemix = line;//step(remainder, 1.0);//(mod(remainder, 256.) / 512.0);// * (1.0 / 512.0) * mod(remainder, 256.);\n    \n    //fragColor = vec4(vec3(linemix * remainder * step(remainder, 1.0)), 1.0);\n    \n    //fragColor = vec4(vec3(remainder * step(remainder, 1.0) * (repeat - line) / repeat), 1.0);\n    \n    //fragColor = vec4(vec3(remainder * step(remainder, 1.0) * (1.0 - line / repeat)), 1.0);\n    \n    \n    //fragColor = vec4(vec3(remainder * step(remainder, 1.0)), 1.0);\n    // fragColor = vec4(vec3((y / x) * remainder * step(remainder, 1.0)), 1.0);\n    //fragColor = vec4(vec3((y / x) * remainder), 1.0);\n    \n    //float ratio = (y + 0.125) / (x + 0.125);\n    //float integral_ratio = floor(ratio);\n    // float remainder = floor(mod(y + 1.0, x + 0.125)); //y - x * integral_ratio;\n    float remainder = floor(mod(floor(y), floor(x + 1.0))); //y - x * integral_ratio;\n    \n    vec4 shade = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    if (mod(y, vert_pos) < 1.0 && abs(y / (vert_pos) - x) < 1.0) {\n        shade = vec4(0.2, 2.0, 0.2, 1.0);\n    }\n    \n   \n    //float remainder = floor(mod(y, x));\n    // fragColor = vec4(vec3(step(remainder, 0.5)), 1.0);\n    //fragColor = (vec4(vec3(step(remainder, 1.0)), 1.0) + mix_mouse) * shade;\n    //fragColor = ((vec4(0.0, 0.0, 0.0, 1.0), 1.0) + mix_mouse) * shade;\n    fragColor = (vec4(1.7 * step(remainder, 1.0), 1.7 * step(remainder, 1.0), 1.7 * step(remainder, 1.0), 1.0) + mix_mouse) + shade;\n    \n    \n    /* Semi-working code\n    float repeat = 3.0;\n    float r = 1.0 - mod(y / x + 2.0, repeat);// / repeat);\n    float g = 1.0 - mod(y / x + 1.0, repeat);// / repeat);\n    float b = 1.0 - mod(y / x, repeat);// / repeat);\n    fragColor = vec4(vec3(remainder * step(remainder, 1.0)), 1.0);\n    fragColor *= vec4(r, g, b, 1.0);\n    */\n    \n    \n    //fragColor *= vec4(vec3(remainder), 1.0);\n    \n    /*float odd_x = mod(x, 2.0);\n    \n    fragColor *= vec4(odd_x, 1.0, 1.0, 1.0);\n    \n    float even_x = mod(x + 1.0, 2.0);\n    \n    fragColor *= vec4(1.0, even_x, 1.0, 1.0);*/\n    \n    if (x >= y && mix_mouse.x < 0.01) {\n        fragColor = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}