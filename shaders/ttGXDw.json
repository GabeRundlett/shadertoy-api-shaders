{
    "Shader": {
        "info": {
            "date": "1582822219",
            "description": "Kaleidoscope shader by Maria Adelaide (mariaadelaide.com) for CJA project (https://cornelljournalofarchitecture.cornell.edu).",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGXDw",
            "likes": 0,
            "name": "CJA Kaleidoscope",
            "published": 3,
            "tags": [
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "pedroatma",
            "viewed": 81
        },
        "renderpass": [
            {
                "code": "const float ANIMATION_DURATION = 20.0;\nconst float MOSAICS_NUM = 2.0;\n\nvec2 kaleidoCoords(vec2 coords)\n{\n    vec2 v;\n    \n    v = vec2(\n    \tcoords.x - 2.0 * mod(iTime / ANIMATION_DURATION, 1.0),\n        coords.y + 2.0 * mod(iTime / ANIMATION_DURATION, 1.0)\n    );\n    \n    if(v.x < -1.0)\n        v.x = 2.0 + v.x;\n    \n    if(v.x < 0.0)\n\t\tv.x = -v.x;\n    \n    if(v.y > 2.0)\n        v.y = v.y - 2.0;\n    \n   \tif(v.y > 1.0)\n        v.y = 2.0 - v.y;\n\n        \n    return v;\n}\n\nvec2 mirroredSetCoords(vec2 coords) {\n  \tvec2 v;\n    \n    if(coords.x < 0.5 && coords.y >= 0.5)\n    {\n        v = vec2(coords.x * 2.0, (coords.y - 0.5) * 2.0);\n    }\n    else if(coords.x >= 0.5 && coords.y >= 0.5)\n    {\n        v = vec2((1.0 - coords.x) * 2.0, (coords.y - 0.5) * 2.0);\n    }\n    else if(coords.x < 0.5 && coords.y < 0.5)\n    {\n        v = vec2(coords.x * 2.0, (0.5 - coords.y) * 2.0);\n    }\n    else\n    {\n        v = vec2((1.0 - coords.x) * 2.0, (0.5 - coords.y) * 2.0);\n    }\n    \n\treturn v;\n}\n\nvec2 mosaicCoords(vec2 coords)\n{\n    vec2 v;    \n    \n    v = mod(coords, vec2(1.0 / MOSAICS_NUM, 1.0 / MOSAICS_NUM)) * MOSAICS_NUM;\n        \n    return v;\n}\n\nvec2 transform(vec2 coords)\n{\n    vec2 v;\n    \n    v = kaleidoCoords(mirroredSetCoords(mosaicCoords(coords)));\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, transform(uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}