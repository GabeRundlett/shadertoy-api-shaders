{
    "Shader": {
        "info": {
            "date": "1617240974",
            "description": "Bezier curves are turning out to be quite fun.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdjGWz",
            "likes": 6,
            "name": "Cubic Bezier vs. Line Intersect",
            "published": 3,
            "tags": [
                "bezier",
                "line",
                "intersection",
                "cubic",
                "parametric"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\nstruct Intersect {\n    int count;\n    vec2[3] p;\n};\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nconst vec2 eta = vec2(-0.5, sqrt(0.75));\nint solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {\n    float h = 18.0 * a * b * c * d - 4.0 * b * b * b * d + b * b * c * c - 4.0 * a * c * c * c - 27.0 * a * a * d * d;\n\n    b /= a, c /= a, d /= a;\n    float d0 = b * b - 3.0 * c;\n    float d1 = (2.0 * b * b - 9.0 * c) * b + 27.0 * d;\n    float q = d1 * d1 - 4.0 * d0 * d0 * d0, j = sqrt(abs(q));\n\n    vec2 C = q < 0.0 ? vec2(d1, j) : vec2(d1 + j, 0.0);\n    if (abs(C.x) + abs(C.y) < 1e-3) C = vec2(d1 - j, 0.0);\n    float t = atan(C.y, C.x) / 3.0, r = pow(0.25 * dot(C, C), 1.0 / 6.0);\n    C = vec2(cos(t), sin(t));\n\n    float w = -d0 / r - r;\n    roots.x = (C.x * w - b) / 3.0;\n    roots.y = (dot(vec2(C.x, -C.y), eta) * w - b) / 3.0;\n    if (h > 0.0) roots.z = (dot(C, eta) * w - b) / 3.0;\n    else if (abs(dot(C.yx, eta)) < abs(C.y)) roots.x = roots.y;\n\n    return h < 0.0 ? 1 : 3;\n}\n\nvec2 BezierCurvePoint(in vec2 a, in vec2 b, in vec2 c, in vec2 d, in float t) {\n    float tInv = 1.0 - t;\n    return a * tInv * tInv * tInv +\n           b * 3.0 * t * tInv * tInv +\n           c * 3.0 * tInv * t * t +\n           d * t * t * t;\n}\n\nIntersect BezierLineIntersect(in vec2 ca, in vec2 cb, in vec2 cc, in vec2 cd, in vec2 la, in vec2 lb) {\n    vec2 ba = lb - la;\n    float baba = dot(ba, ba);\n    vec2 ld = normalize(ba);\n\n    mat2 invRot = mat2(ld, -ld.y, ld.x);\n    mat2 rot = transpose(invRot);\n\n    ca = (ca - la) * invRot;\n    cb = (cb - la) * invRot;\n    cc = (cc - la) * invRot;\n    cd = (cd - la) * invRot;\n\n    float coeff1 = 3.0 * cb.y - 3.0 * cc.y - ca.y + cd.y;\n    float coeff2 = 3.0 * ca.y - 6.0 * cb.y + 3.0 * cc.y;\n    float coeff3 = 3.0 * cb.y - 3.0 * ca.y;\n    float coeff4 = ca.y;\n\n    vec3 t;\n    int nroots = solveCubic(coeff1, coeff2, coeff3, coeff4, t);\n\n    vec2[3] intersects;\n    int count = 0;\n    for (int n=0; n < nroots; n++) {\n        if (abs(t[n] - 0.5) <= 0.5) {\n            vec2 p = BezierCurvePoint(ca, cb, cc, cd, t[n]) * rot;\n            if (abs(dot(p, ba) / baba - 0.5) <= 0.5) {\n                intersects[count] = p + la;\n                count++;\n            }\n        }\n    }\n\n    return Intersect(count, intersects);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec3 color = vec3(0.25);\n\n    float time = iTime;\n\n    float t1 = time * 0.5, t2 = time, t3 = time * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 ca = vec2(c2, s3) * 0.5;\n    vec2 cb = vec2(s1, s2) * 0.5;\n    vec2 cc = vec2(c3, c1) * 0.5;\n    vec2 cd = vec2(c2, s1) * 0.5;\n\n    vec2 la = vec2(c3, s2) * 0.5;\n    vec2 lb = vec2(s2, c1) * 0.5;\n\n    draw(sdLine(uv, la, lb) - 0.01, vec3(0.0, 0.0, 1.0));\n\n    float tStep = 0.01;\n    vec2 prev = ca;\n    for (float t=tStep; t < 1.0 + tStep; t += tStep) {\n        vec2 cur = BezierCurvePoint(ca, cb, cc, cd, t);\n        draw(sdLine(uv, prev, cur) - 0.01, vec3(1.0, 0.8, 0.0));\n        prev = cur;\n    }\n\n    Intersect intersects = BezierLineIntersect(ca, cb, cc, cd, la, lb);\n    for (int n=0; n < intersects.count; n++) {\n        draw(length(uv - intersects.p[n]) - 0.015, vec3(1.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}