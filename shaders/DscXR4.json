{
    "Shader": {
        "info": {
            "date": "1679924260",
            "description": "inspiration:  [url]https://twitter.com/gsarcone/status/1636081479372398592 [/url]\nMouse controls camera.\nhttps://tglad.blogspot.com/2022/07/quaternions-and-anti-twisters.html\n( the real one.Â I was fighting a stupid bug since day 1. )",
            "flags": 0,
            "hasliked": 0,
            "id": "DscXR4",
            "likes": 19,
            "name": "flex links - v2",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction",
                "spinor",
                "antitwister",
                "diracsbelt"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/md3Szr\n\n#define rot(a)        mat2(cos(a+vec4(0,11,33,0)))         // 2D rotation \n#define rot3(P,A,a)  ( mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A) ) // 3D rot around an arbitrary axis\n#define B(rx,ry,rz)   max(a.x-rx, max(a.y-ry,a.z-rz))      // box\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.;\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -12.*R.y) - R),          // ray direction\n          p = vec3(0,0,60), q,a,                           // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n                            :  vec3( 1,.5,0) * cos(.3*iTime + vec3(0,11,0)); \n\n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.005 )        // march scene\n        q = p, \n        q.yz *= rot(-M.y),                                 // rotations\n        q.xz *= rot(-M.x-1.57), \n        q = rot3( q, vec3(sin(iTime),0,cos(iTime)), 3.14 *smoothstep(6.,1.7, length(q))  ),      \n        a = abs(q),\n        t =        B( 1., 1., 1.),                         // cube\n        t = min(t, B(1e5, .3, .1)),                        // bands\n        t = min(t, B( .3, .1,1e5)),\n        t = min(t, B( .1,1e5, .3)),\n        p += .2*t*D;                                       // step forward = dist to obj    \n      \n\n    O *= O*O*2.;                                           // color scheme\n   // O.rgb *= .5+.5*normalize(q);\n// #define s(v)   a.v.x > max(a.v.y,a.v.z) ? sign(q.v.x) : 0.\n   // O *= .5+.5*vec4( s(xyz), s(yzx), s(zxy), 0);\n} \n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}