{
    "Shader": {
        "info": {
            "date": "1727281206",
            "description": "5th and 4th order polynomial approximation of a sine.\nthe 5th order comes from a kaze emanuar video, but the 4th order is my own.\ni recommend using it if you wanna do FBM noise stuff that uses a shitton of sines, but i doubt it'll work for real trig calc",
            "flags": 0,
            "hasliked": 0,
            "id": "432yWW",
            "likes": 0,
            "name": "attempt at a possibly faster sin",
            "published": 3,
            "tags": [
                "sin",
                "cos",
                "sine",
                "trig"
            ],
            "usePreview": 0,
            "username": "dottedboxguy",
            "viewed": 121
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159265358979323\n\nfloat sstep(float init_x){\n    float x = clamp(init_x,-1.,1.);\n    x = abs(x);\n    return sign(init_x)*(x*(2.-x));\n}\n\nfloat triwave(float x){\n    return abs(fract(x)-.5)*2.;\n}\n\n//green curve\n//turns out this is the exact same as the one glsl implemented, i found it to be ever so slightly faster but it's very much within margin of error\nfloat fastcos5(float x){\n    //const float n = 1.57079632679; //pi/2\n    const float c5 = 0.00740306120839;\n    //const float c5 = ((1.+((4.*n-5.))/2.)-n)/(n*n*n*n*n);\n    const float c3 = 0.165538780475;\n    //const float c3 = ((4.*n)-5.)/(2.*n*n*n);\n    x = triwave(x)-.5;\n    x *= pi;\n    float x2 = x*x;\n    float x3 = x2*x;\n    float x5 = x3*x2;\n    return c5*x5-c3*x3+x;\n}\n\n//blue curve\n//https://www.desmos.com/calculator/gdzgbxhuqr\n//made with the very nice help of @fadaaszhi on discord !\nfloat fastsin4(float x){\n    const float a = 0.224839101355985;\n    const float b = -1.-a;\n    float fx = fract(x)-.5;\n    x = 4.*abs(fx)-1.;\n    float x2 = x*x;\n    float si = x2*x2*a+x2*b+1.;\n    return si*sign(fx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv*=10.;\n    vec3 col =vec3(0.);\n    \n    float y = fastcos5(uv.x);\n    col += vec3(.0, .7, .0)*sstep(iResolution.y/30.*(uv.y-y)+1.)*sstep(iResolution.y/30.*(y-uv.y)+1.);\n    \n    y = fastsin4(uv.x);\n    col += vec3(.0, .0, .7)*sstep(iResolution.y/30.*(uv.y-y)+1.)*sstep(iResolution.y/30.*(y-uv.y)+1.);\n    \n    fragColor = vec4(col, .0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}