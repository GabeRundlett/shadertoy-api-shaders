{
    "Shader": {
        "info": {
            "date": "1385545744",
            "description": "Pure Hydrogen Stromgren sphere radius according number density of hydrogen nuclei and ionizing photon rate",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms2Gzm",
            "likes": 3,
            "name": "Pure Hydrogen Stromgren sphere",
            "published": 3,
            "tags": [
                "nebulae",
                "ionization",
                "stromgren"
            ],
            "usePreview": 0,
            "username": "Mikael",
            "viewed": 522
        },
        "renderpass": [
            {
                "code": "// Mikael Lemercier , November, 2013\n\n#define SHADERTOY 1 //Shadertoy compatibility (no texture)\n#define HOMOGENEOUS_DENSITY 1\n\n#define PI 3.14159\n#define METER_TO_PARSEC 3.24077929e-17\n#define PARSEC_TO_METER 3.08567758e16\n\n#define LINEAR_DENSITY_SLOPE (1.0e7/100.0)\n#define LINEAR_DENSITY_SLOPE_INV_METER (3.08567758e16/LINEAR_DENSITY_SLOPE)\n\n#define LSOL 3.839e26 //J.s^-1\n#define HALPHA_RECOMB_COEF 1.18e-19 //m^3.s^-1 at 10000K\n#define HALPHA_PHOTON_ENERGY 3.0267e-19 //J\n\nvec2 FragCoord;\nvec4 FragColor;\n\n#if SHADERTOY\nvec2 u_windowResolution;\nvec2 u_mousePosition;\n#else\nuniform vec2 u_windowResolution;\nuniform vec2 u_mousePosition;\n#endif\n\nbool affSlider(vec2 p0, vec2 dp, float v)\n{\n\tfloat R=5.;\n\tvec2 pix = FragCoord.xy/u_windowResolution.y;\n\tfloat pt = max(1e-2,1./u_windowResolution.y); R*=pt;\n\tpix -= p0;\n\n\tfloat dp2 = dot(dp,dp);\n\tfloat x = dot(pix,dp)/dp2; if ((x<0.)||(x>1.)) return false;\n\tfloat x2=x*x;\n\tfloat y = dot(pix,pix)/dp2-x2; if (y>R*R) return false;\n\n\tFragColor = vec4(1.,.2,0.,1.); \n\ty = sqrt(y);\n\tif (y<pt) return true;       // rule\n\tvec2 p = vec2(x-v,y);\n\tif (dot(p,p)<R*R) return true; // button\n\t\n\treturn false;\n}\n\nvec4 raymarch( in vec3 ro, in vec3 rd, in float stromgrenSphereRadius, in float cameraDist, in float n)\n{\n\n\tvec4 sum = vec4(0, 0, 0, 0);\n\n\tconst int stepCount = 128;\n\tfloat stepSize = stromgrenSphereRadius*2.0/float(stepCount);\n\tfloat t = cameraDist-stromgrenSphereRadius;\n\tfor(int i=0; i<stepCount; i++)\n\t{\n\t\tfloat pixelSizeAtStep = t/1.5*2.0/ u_windowResolution.y; \n\t\tfloat pixelSurfaceAtStep = pixelSizeAtStep*pixelSizeAtStep;\n\t\tfloat sampledVolume = stepSize*pixelSurfaceAtStep;//pc^3\n\t\t\n\t\tvec3 pos = ro + t*rd;\n#define OHS 1\n#if OHS\n\t\tfloat dist = length(pos);\n\t\tvec4 col = ( step(dist,stromgrenSphereRadius)*vec4(0.0,1.0,0.0,1.0) \n\t\t\t\t   + step(length(pos),stromgrenSphereRadius*0.8)*vec4(0.0,0.0,1.0,1.0)\n\t\t\t\t   + step(length(pos),stromgrenSphereRadius*1.1)*step(stromgrenSphereRadius*0.9,length(pos))*vec4(1.0,0.0,0.0,1.0))\n\t\t\t* n * n * HALPHA_RECOMB_COEF * sampledVolume *PARSEC_TO_METER*HALPHA_PHOTON_ENERGY/(4.0*PI*t*t);//simplified by PARSEC_TO_METER^2 on numerator and denominator\n#else\n\t\tvec4 col = step(length(pos),stromgrenSphereRadius)*vec4(1.0,0,1.0,1.0) \n\t\t\t* n * n * HALPHA_RECOMB_COEF * sampledVolume *PARSEC_TO_METER*HALPHA_PHOTON_ENERGY/(4.0*PI*t*t);//simplified by PARSEC_TO_METER^2 on numerator and denominator\n#endif\n\t\tsum = sum + col;\n\t\t\n\t\tt += stepSize;\n\t}\n\n\treturn sum;//clamp( sum, 0.0, 1.0 );\n}\n\nfloat density(float dist)\n{\n\treturn dist * LINEAR_DENSITY_SLOPE;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if SHADERTOY\n    u_windowResolution = iResolution.xy;\n    u_mousePosition = iMouse.xy;\n#endif\n    \n    FragCoord = fragCoord;\n\tFragColor = vec4(0.);\t\n    \n\tfloat cameraDist = 200.0;\n\t\n    //camera\n    vec3 cameraPos = vec3(0.0,0.0,cameraDist);      \n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize( cameraPos - cameraTarget );\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 p = mix(vec2(-1.0),vec2(1.0),q);\n    p.x *= iResolution.x/ iResolution.y;\n    vec3 cameraDir = normalize( p.x*uu + p.y*vv - 1.5*ww );\n \n\t//Sliders\n\tvec2 normMouse = u_mousePosition/u_windowResolution;\n\tif (affSlider(vec2(.05,.02),vec2(.4,0),normMouse.x)) { fragColor=FragColor; return;}\n\tif (affSlider(vec2(.02,.05),vec2(0,.4),normMouse.y)) { fragColor=FragColor; return;}\n\n\tfloat tpow = pow(1.0e4,-0.75);//temperature^(-3/4)\n#if HOMOGENEOUS_DENSITY\n\tfloat n = pow(10.0,mix(5.0,8.0,normMouse.x));//ne density m^-3 - logarithmic scale\n\tfloat cbrtS = pow(10.0,mix(48.0,49.0,normMouse.y)*0.33);//cube root of ionizing photon rate - logarithmic scale\n\tfloat stromgrenSphereRadius = cbrtS * pow(3.0 /(4.0*PI * n*n*2.0e-16*tpow),1.0/3.0)*METER_TO_PARSEC;\n#else//linear density\n\tfloat rt5S = pow(10.0,mix(48.0,49.0,normMouse.y)*0.2);\n\tfloat stromgrenSphereRadius = rt5S *pow(LINEAR_DENSITY_SLOPE_INV_METER*LINEAR_DENSITY_SLOPE_INV_METER,0.2)*pow( 5.0 /(4.0*PI *2.0e-16*tpow),0.2)*METER_TO_PARSEC;\n#endif\n\t\n\tfragColor = raymarch( cameraPos, cameraDir, stromgrenSphereRadius, cameraDist,n )*10e12; //tenth of pJ.m^-2\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}