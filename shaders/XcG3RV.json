{
    "Shader": {
        "info": {
            "date": "1712948016",
            "description": "AI HELPED ME - SORRY",
            "flags": 0,
            "hasliked": 0,
            "id": "XcG3RV",
            "likes": 1,
            "name": "Kali Hypnosis 3",
            "published": 3,
            "tags": [
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "maxwellcoffee",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926535897932384626433832795\n#define M_PI2 6.2831853071795864769252867675590\n\n\nfloat randomVariation = 1.0;\nint divs = 200;\nint iterations = 5;\n\n// Pseudo-random function\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * float(iTime * randomVariation));\n}\n\nvec3 getRamp(float p) {\n    float randomOffset = rand(vec2(p, 0.1));\n    return vec3(.5) + sin(p * M_PI2 + M_PI2 * vec3(.4,.2,.1) + randomOffset) * .5;\n}\n\nvec3 _cNP(vec3 p, float s) {\n    float randomOffset = rand(p.xy);\n    float tp = sin(iTime * .5 + s * 1.7 + randomOffset) * .5 + .5;\n    float ti = mod(iTime * .1 - s * 1. + randomOffset, 1.);\n\n    vec2 rotationCenter = vec2(.3, .0) / (s * 1.5 + randomOffset);\n    vec2 np = p.xy - rotationCenter;\n    float a = atan(np.y, np.x) + (M_PI + M_PI * tp) + s * .01 + randomOffset;\n    np = vec2(cos(a), sin(a)) * length(np);\n    return vec3(np.xy, a);\n}\n\nvec3 _ocNP(vec3 p, float s) {\n    float randomOffset = rand(p.zy);\n    float ti = mod(iTime * .1 + s * .5 + randomOffset, 2.);\n    vec2 tp = vec2(.2, .0) / (s * 1. + randomOffset);\n    float tpa = atan(tp.y, tp.x) + p.z + randomOffset;\n    tp = vec2(cos(tpa), sin(tpa)) * length(tp);\n    vec2 np = p.xy - tp;\n    float a = atan(np.y, np.x) + (M_PI * ti);\n    np = vec2(cos(a), sin(a)) * length(np);\n    return vec3(np.xy, mod(a + M_PI2, M_PI2));\n}\n\nvec3 gC(vec2 p) {\n    vec3 col = (p.y < 0.001) ? vec3(1.) : vec3(.0);\n    vec3 np = vec3(p.xy, 0.);\n    for (float i = 0.; i < float(iterations); i += 1.) {\n        np = mod(i, 2.) < 1. ? _cNP(np, i + 1.) : _ocNP(np, i + 1.);\n        float npl = length(np);\n\n        col += (np.x > 0.) ? getRamp(npl * .2 + .7 + i * .6) * .3 : vec3(.1);\n        col += (np.y >= -0.0001 && np.y < 0.001) ? vec3(.01) : vec3(.0);\n        col += (np.y >= 0.0 && np.y < 0.01 + 0.0001) ? vec3(.5 * (3. - i)) * (.1 + i * .1) : vec3(.01);\n        col += (np.y >= 0.0 && np.y < 0.0011 && np.x > 0.) ? vec3(.6) : vec3(.0);\n    }\n    col += (p.y < 0.001) ? vec3(.05) : vec3(.0);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord.xy / iResolution.x - vec2(.5) * vec2(1., iResolution.y / iResolution.x);\n    vec3 col = vec3(0.);\n    float div = float(divs) * 2.;\n    float divS = M_PI2 / div;\n\n    float a = mod(atan(p.y, p.x) + M_PI * .5 * iTime * .2, M_PI2);\n    float l = length(p);\n    float q = floor(a / divS);\n    float s = 1.;\n    for (float i = 0.; i < div; i += 1.) {\n        if (q == i) {\n            a -= i * divS - (s * .5 - .5) * divS;\n            p = vec2(cos(a), sin(a)) * l;\n            p.y *= s;\n            col = gC(p);\n        }\n        s *= -1.;\n    }\n\n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}