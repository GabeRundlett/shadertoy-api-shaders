{
    "Shader": {
        "info": {
            "date": "1606855182",
            "description": "TO Create 3D Texture lookup for extreamly fast grass shader",
            "flags": 0,
            "hasliked": 0,
            "id": "tsVfzm",
            "likes": 0,
            "name": "Grass Cross Section",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "jacasch",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "float sdTilableCircle(vec2 p, vec2 o)\n{\n    //neighbour offsets\n    vec2 o1 = vec2(-1,-1);\n    vec2 o2 = vec2(-1,0);\n    vec2 o3 = vec2(-1,1);\n    vec2 o4 = vec2(0,-1);\n    vec2 o5 = vec2(0,0);\n    vec2 o6 = vec2(0,1);\n    vec2 o7 = vec2(1,-1);\n    vec2 o8 = vec2(1,0);\n    vec2 o9 = vec2(1,1);\n    \n    float radius = .1;\n\n    float d1 = length(p + o+o1) - radius;\n    float d2 = length(p + o+o2) - radius;\n    float d3 = length(p + o+o3) - radius;\n    float d4 = length(p + o+o4) - radius;\n    float d5 = length(p + o+o5) - radius;\n    float d6 = length(p + o+o6) - radius;\n    float d7 = length(p + o+o7) - radius;\n    float d8 = length(p + o+o8) - radius;\n    float d9 = length(p + o+o9) - radius;\n    \n    return min(min(min(min(min(min(min(min(d1,d2),d3),d4),d5),d6),d7),d8),d9);\n}\n\nfloat sdCrossSection(vec2 p)\n{\n    float d1 = sdTilableCircle(p,vec2(.63,.5));\n    float d2 = sdTilableCircle(p,vec2(.1,.2));\n    float d3 = sdTilableCircle(p,vec2(.4,0.9));\n    float d4 = sdTilableCircle(p,vec2(.9,0.7));\n    float d5 = sdTilableCircle(p,vec2(.3,0.5));\n    float d6 = sdTilableCircle(p,vec2(.7,0.1));    \n    \n    return min(min(min(min(min(d1,d2),d3),d4),d5),d6);\n}\n\nvec2 GetNormal(vec2 p)\n{\n    float d = sdCrossSection(p);\n    float eps = 0.0001;\n    float dx = sdCrossSection(fract(p + vec2(eps,0) + .5)-.5);\n    float dy = sdCrossSection(fract(p + vec2(0,eps) + .5)-.5);\n    \n    float ddx = dx-d;\n    float ddy = dy-d;\n    \n    //return vec2(1,1);\n    return normalize(vec2(ddx,ddy));\n    //return n;\n}\n\nfloat rayMarch(vec2 ro, vec2 rd, out vec2 normal)\n{\n    float minDist = 0.00001;\n    int maxSteps = 100;\n    int s = 0;\n    \n    float rayDist = 0.;\n    float surfaceDist = sdCrossSection(ro);\n    //for(int i = 0; i < maxSteps; i++);\n    while(s < maxSteps)\n    {\n        if(abs(surfaceDist) < minDist)\n        {\n            //ray hit\n            normal = GetNormal(fract(ro + rd * rayDist + .5)-.5);\n            return rayDist;\n        }\n        s++;\n        rayDist += surfaceDist;\n        surfaceDist = sdCrossSection(fract(ro + rd * rayDist + .5)-.5);\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 2.;\n    uv = fract(uv);\n\tuv -= .5;\n    \n    vec2 n;\n    float d = rayMarch(uv,normalize(vec2(-1,1)), n);\n    n = n * .5 + .5;\n\n    // Output to screen\n    fragColor = vec4(n * (1.-d),0.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}