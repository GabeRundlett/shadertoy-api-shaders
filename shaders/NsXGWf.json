{
    "Shader": {
        "info": {
            "date": "1616616242",
            "description": "Messing around with an idea I had. Instead of solving an equation, just create an intersection formula! Its rather unintuitive but you can get some cool looking stuff, plus its exact :P I'm not too happy how the shading turned out...",
            "flags": 32,
            "hasliked": 0,
            "id": "NsXGWf",
            "likes": 2,
            "name": "Next Level Raytracing",
            "published": 3,
            "tags": [
                "raytracing",
                "experiment",
                "idea"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 145
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 rd = normalize(vec3(uv, -1.0));\n    ivec2 iFragCoord = ivec2(fragCoord);\n\n    vec4 center = texelFetch(iChannel0, iFragCoord, 0);\n    vec4 right = texelFetch(iChannel0, iFragCoord + ivec2(1, 0), 0);\n    vec4 up = texelFetch(iChannel0, iFragCoord + ivec2(0, 1), 0);\n\n    float diff = 1.0;\n    vec3 normal;\n    if (center[3] > 0.0 && right[3] > 0.0 && up[3] > 0.0) {\n        normal = normalize(vec3(right[3] - center[3], up[3] - center[3], 0.02));\n        diff = sqrt(max(0.0, dot(normal, -rd)));\n    }\n\n    fragColor.rgb = center.rgb * diff;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float iScene(in vec3 ro, in vec3 rd) {\n    return dot(cos(rd * 10.0), vec3(1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = iMouse.z > 0.0 ? (iMouse.xy - center) / iResolution.y * 3.14 : vec2(iTime);\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 6.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Sky\n    fragColor = vec4(mix(vec3(0.25, 0.25, 1.0), vec3(1.0), 0.5 + 0.5 * rd.y), -1.0);\n\n    float tScene = iScene(ro, rd);\n    if (tScene > 0.0) {\n        fragColor.rgb = vec3(1.0, 0.0, 0.0);\n        fragColor[3] = tScene;\n    }\n\n    /*\n    // Ground plane\n    if (rd.y != 0.0) {\n        float tPlane = -(2.0 + ro.y) / rd.y;\n        if (tPlane > 0.0 && (tScene > 0.0 ? tPlane < tScene : true)) {\n            fragColor[3] = tPlane;\n            vec3 iPlane = ro + rd * tPlane;\n            vec3 planeColor = vec3(1.0);\n\n            // Grid\n            planeColor = mix(planeColor, vec3(0.0, 0.0, 1.0), smoothstep(0.025, 0.0, abs(mod(iPlane.x + 0.25, 0.5) - 0.25)));\n            planeColor = mix(planeColor, vec3(0.0, 0.0, 1.0), smoothstep(0.025, 0.0, abs(mod(iPlane.z + 0.25, 0.5) - 0.25)));\n            planeColor = mix(planeColor, vec3(1.0, 0.0, 0.0), smoothstep(0.025, 0.0, abs(iPlane.x) - 0.01));\n            planeColor = mix(planeColor, vec3(1.0, 0.0, 0.0), smoothstep(0.025, 0.0, abs(iPlane.z) - 0.01));\n\n            planeColor /= max(1.0, 0.2 * tPlane); // Fade (can hide a bit of aliasing too)\n\n            fragColor.rgb = mix(fragColor.rgb, planeColor, 0.6);\n        }\n    }\n    */\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}