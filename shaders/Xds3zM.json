{
    "Shader": {
        "info": {
            "date": "1366140789",
            "description": "Implementing a stack in a shader, in order to render a recursive fractal with a distance field. Since all the traversing is static it can be resolved at compile/loop unrolling time by the GLSLES interpreter. ANGLE under Win seems to handle it correctly!",
            "flags": 0,
            "hasliked": 0,
            "id": "Xds3zM",
            "likes": 69,
            "name": "Stack",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "distancefield",
                "stack",
                "recursion"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 4789
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nvec2 udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nstruct Segment\n{\n\tvec2 p;\n\tfloat a;\n\tfloat l;\n\tfloat wa;\n\tfloat wb;\n\tint level;\n};\n\nSegment stack[16];\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\tvec2 m = vec2(0.0);\n\tif( iMouse.z>0.0 ) m=-1.0 + 2.0*iMouse.xy/ iResolution.xy;\n\t\t\n\n\tstack[0] = Segment( vec2(0.0,-0.85), 0.0, 0.6, 0.13, 0.08, 0 );\n\tint s = 0;\n\t\n\tfloat id = 0.0;\n\tfloat f = 100.0;\n\tfloat g = 100.0;\n\tfor( int i=0; i<63; i++ )\n\t{\n\t\t/// pop from the stack\n\t\tSegment x = stack[s--];\n\t\t\n\t\t// render line\n\t\tvec2 a = x.p;\n\t\tvec2 b = x.p + x.l*vec2(sin(x.a),cos(x.a));\n\t\tvec2 h = udSegment( p, a, b );\n\t\tfloat d = h.x - mix(x.wa,x.wb,h.y);\n\t\tf = min( f,     d);\n\t\tg = min( g, abs(d) );\n\n        // push new stuff into the stack\t\t\n\t\tid += 1.0;\n\t\tif( x.level<5 )\n\t\t{\n\t\t\tfloat an = m.x + 0.5*sin(8.0*x.l+iTime)*x.l;\n\t\t\tfloat a1 = 0.2 + 0.8*hash(3313.115*id) + an;\n\t\t\tfloat a2 = 0.2 + 0.8*hash(1241.506*id) - an;\n\t\t\tfloat l1 = 0.5 + 0.3*hash(5241.343*id);\n\t\t\tfloat l2 = 0.5 + 0.3*hash(9741.241*id);\n            // push\n\t\t\tstack[++s] = Segment( b, x.a+a1, x.l*l1, x.wb, x.wb*0.65, x.level+1 );\n\t\t\tstack[++s] = Segment( b, x.a-a2, x.l*l2, x.wb, x.wb*0.65, x.level+1 );\n\t\t}\n\t}\n\n    // final color\n\tvec3 col = 0.2 + 0.6*vec3( sqrt(abs(f)) );\n    col += 0.03*sin(180.0*f);\n\tcol = mix( vec3(1.0,0.7,0.3), col, smoothstep( 0.0, 0.005, f ) );\t\n  \tcol *= smoothstep( 0.0, 0.01, g );\n  \t\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}