{
    "Shader": {
        "info": {
            "date": "1580506767",
            "description": "i made a pathmarcher that uses next-event estimation and is straight up sphagetti",
            "flags": 32,
            "hasliked": 0,
            "id": "wltSzH",
            "likes": 12,
            "name": "fractal path marcher",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "//parameters in the common tab\n\nvoid mainImage(out vec4 col, in vec2 _pos) {\n    ivec2 pos = ivec2(_pos);\n    col = texelFetch(iChannel0, pos, 0);\n    col /= col.w + .001;\n    col += (texelFetch(iChannel3, pos&7, 0).x - .5) / 256.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define res iResolution.xy\n#define tau 6.283\n\n//runs at about ~38 fps on my nvidia gt 610\n//feel free to crank up these parameters if\n//you have a more powerful gpu\n\n//...which you probably do, since a low end gpu\n//from 8 years ago isnt a very high bar...\n\n//0 = cubic kifs\n//1 = pow 8 mandelbulb\n#define FRACT 0\n\n//maximum number of light bounces (duh)\n#define MAX_BOUNCES 4\n\n//maximum raymarching steps\n#define MAX_STEPS 128\n//maximum for shadows\n#define MAX_SHADOWSTEPS 256\n\n//number of samples\n#define NSAMPLES 1\n//how much the renderer reuses previous frames\n//the lower it is, the less of a trail there is behind the fractal\n//but it also increases noise\n//also it breaks if you set it to 0, use a small value like .1 instead.\n#define REUSE_FACTOR .7\n\nmat2 rotmat(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\n//sequence of quasirandom 2d points\nvec2 quasirand(int i) { // i is supposed to be an int\n    return fract(float(i) * vec2(1.618028, 1.324717));\n}\n\n//low-bias hash\n//from https://nullprogram.com/blog/2018/07/31/\nuint hash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n//hashes an uvec4 and returns a float that ranges from 0 to 1\nfloat rand1u(uvec4 p) {\n    return (float(hash(hash(hash(p.x) ^ p.y) ^ (hash(p.z) ^ p.w)) >> 8) + .5) / 16777216.;\n}\n\n//returns 4 random floats\nvec4 rand4u(uvec4 p) {\n    return vec4(\n        rand1u(p+uvec2(0,0).xxxy),\n        rand1u(p+uvec2(0,1).xxxy),\n        rand1u(p+uvec2(0,2).xxxy),\n        rand1u(p+uvec2(0,3).xxxy)\n    );\n}\n\n//returns a point on the surface of a sphere\n//it does this by generating 3 gaussian distributed\n//floats using the box-mueller transform\n//then normalizes the result\nvec3 rand3s(uvec4 p) {\n    vec4 tmp = rand4u(p);\n    vec3 gauss = sin((tmp.xxz + vec2(0,.25).xyx) * tau) * sqrt(-log(tmp.yw)).xxy;\n    return normalize(gauss.xyz);\n}\n\n//returns an orthogonal matrix where the first column is the normal\nmat3 ortho(vec3 n) {\n    vec3 bt = n.x>.7 ? vec3(0,1,0) : vec3(1,0,0);\n    vec3 t = normalize(cross(bt, n));\n    bt = cross(t, n);\n    return mat3(n, t, bt);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdf(vec3 p) {\n    \n    #if FRACT==0\n    vec3 x = p;\n    for(int i = 0; i < 8; i++) {\n        x.xy *= rotmat(iTime*.3);\n        x.xz *= rotmat(iTime*.3*1.618028);\n        x.yz *= rotmat(iTime*.3*1.324717);\n        x = abs(x);\n        x -= 1.;\n        x *= 2.;\n    }\n    return (length(x) - 3.) / pow(2., 8.);\n    #endif\n    \n    #if FRACT==1\n    //sort-of copied from https://www.shadertoy.com/view/ltfSWn\n    //but mixed with spaghetti :D\n    p.xz *= rotmat(iTime*.5);\n    vec3 a = p;\n    float d = 1.;\n    for(int i = 0; i < 8; i++) {\n        float r2 = dot(a,a); if(r2 > 256.) break;\n        float r4 = r2*r2;\n        float r8 = r4*r4;\n        d *= 8. * sqrt(r2*r4*r8); d += 1.;\n        vec3 a2 = a *a ;\n        vec3 a4 = a2*a2;\n        float k1 = a2.x + a2.z;\n        float k2 = 1. / (k1*k1*k1*sqrt(k1));\n        float k3 = a4.x + a4.y + a4.z - 6.*a2.x*a2.y + 2.*a2.x*a2.z - 6.*a2.y*a2.z;\n        float k4 = a2.x + a2.z - a2.y;\n        a = vec3( 64. * a.x*a.y*a.z * (a2.x-a2.z) * k4 * (a4.x - 6.*a2.x*a2.z + a4.z) * k3*k2\n                , k3*k3 - 16.*a2.y*k1*k4*k4\n                ,-8.*a.y*k4*(a4.x*a4.x - 28.*a4.x*a2.x*a2.z + 70.*a4.x*a4.z - 28.*a2.x*a4.z*a2.z + a4.z*a4.z) * k3*k2);\n        a += p;\n    }\n    float t = dot(a,a);\n    return .25 * log(t) * sqrt(t) / d;\n    #endif\n    \n}\n\n//tetrahedral numerical normals from\n//https://iquilezles.org/articles/normalsSDF\nvec3 sdf_normal(vec3 p) {\n    const float h = 0.01;\n    #define ZERO (min(iFrame,0))\n    vec3 n = vec3(0.0);\n    for(int i=ZERO; i<4; i++) {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*sdf(p+e*h);\n    }\n    return normalize(n);\n}\n\n//raymarching function\nbool intersect(int maxsteps, vec3 ro, vec3 rd, out float ot) {\n    float t = .01;\n    for(int i = 0; i < maxsteps; i++) {\n        float d = sdf(ro + rd*t);\n        t += d;\n        if(abs(d) < .001) {ot=t; return true;}\n        if(d > 10.) break;\n    }\n    return false;\n}\n\n//point of no return :DDD\n//the only thing missing in this function\n//are meatballs\nvoid mainImage(out vec4 col, in vec2 _pos) {\n    col = vec4(0.);\n    for(int s = 0; s < NSAMPLES; s++) {\n        vec2 pos = ((_pos + quasirand(iFrame) - .5)*2. - res) / res.y;\n\n        #if FRACT==0\n        vec3 ro = vec3(0,0,-5);\n        #endif\n        #if FRACT==1\n        vec3 ro = vec3(0,0,-2);\n        #endif\n        vec3 rd = normalize(vec3(pos,1));\n\n        float importance = 1.;\n        vec3 add[MAX_BOUNCES];\n\n        int bounce = 0;\n        for(bounce = 0; bounce < MAX_BOUNCES; bounce++) {\n            uvec4 seed = uvec4(ivec2(_pos), iFrame, 0) + uint(bounce << 4);\n\n            float t;\n            if(!intersect(MAX_STEPS,ro,rd,t)) break;\n            ro += rd*t;\n\n            vec3 normal = sdf_normal(ro);\n\n            vec3 shadowray;\n            {\n                float c = pow(rand1u(seed+2u), .5/5.);\n                float s = sqrt(1.-c*c);\n                float phi = rand1u(seed+3u) * tau;\n                shadowray = ortho(vec3(0,1,0)) * vec3(c, s*sin(phi), s*cos(phi));\n            }\n\n            bool hit = intersect(MAX_SHADOWSTEPS, ro, shadowray, t);\n            add[bounce] = hit ? vec3(0.) : vec3(dot(normal, shadowray));\n\n            {\n                float c = sqrt(sqrt(rand1u(seed+0u)));\n                float s = sqrt(1.-c*c);\n                float phi = rand1u(seed+1u) * tau;\n                rd = ortho(normal) * vec3(c, s*sin(phi), s*cos(phi));\n                importance /= c;\n            }\n        }\n        \n        vec3 tmp = vec3(0,.5,.7);\n        tmp = rd.y>=0. ? mix(vec3(.3,.7,1), vec3(1), rd.y) : mix(vec3(0), vec3(.3,.7,1), rd.y+1.);\n        for(int i = bounce-1; i >= 0; i--) {\n            tmp *= .7;\n            tmp += add[i];\n        }\n        \n        col.rgb += tmp * importance;\n        col.w += importance;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 col, in vec2 _pos) {\n    ivec2 pos = ivec2(_pos);\n    col  = texelFetch(iChannel0, pos, 0);\n    col += texelFetch(iChannel1, pos, 0);\n    col *= REUSE_FACTOR;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}