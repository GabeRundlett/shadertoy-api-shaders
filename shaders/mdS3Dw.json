{
    "Shader": {
        "info": {
            "date": "1667674303",
            "description": "Prod from Inercia 2022 Shader Royale. ",
            "flags": 64,
            "hasliked": 0,
            "id": "mdS3Dw",
            "likes": 9,
            "name": "大龙猫- Inercia 2022 Shader Royale",
            "published": 3,
            "tags": [
                "inercia"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "vec3 erot(vec3 p,vec3 ax,float t){return mix(dot(ax,p)*ax,p,cos(t))+cross(ax,p)*sin(t);}\nfloat rnd = 0.;\nfloat bpm = 0.;\nfloat box3(vec3 p,vec3 b){\n    p = abs(p)-b;\n    return length(max(vec3(0.),p))+min(0.,max(p.x,max(p.y,p.z)));\n}\nfloat box2(vec2 p,vec2 b){\n    p = abs(p)-b;\n    return length(max(vec2(0.),p))+min(0.,max(p.x,p.y));\n}\nvec2 sdf(vec3 p){\n  vec3 op = p;\n  vec2 h;\n   p.x +=iTime;\n \n  vec3 hp = p;\n  hp.y -=2.;\n   float d = 0.;\n  for(float i=0.2;i<25.;hp=erot(hp,vec3(0.,1.,0.),i+=i)){\n      \n       d += abs(dot(asin(sin(hp*i)),vec3(.4)/i));\n       hp=erot(hp,normalize(vec3(.1,.2,.3)),i);\n  }    float txt = texture(iChannel0,fract(vec2(.05+floor(hp.x*10.)/100.))).r*.1;\n     h.x = abs(p.y+2.)-d*.3-txt;\n   \n     h.x = max(abs(p.z-7.)-7.5,h.x);\n     h.y = 1.;\n  \n     vec2 t;\n    vec3 tp=p;\n  \n  tp.y +=1.+sin(p.z*.5+bpm+iTime)*.1;\n   float q = sign(p.y);\n   tp.xz = fract(tp.xz)-.5;\n   tp =erot(tp,vec3(0.,1.,0.),sign(q)*.785);\n   tp.y = abs(tp.y)-.05;\n  t.x =max(abs(p.z)-5.5, min(length(tp.zy),length(tp.xy))-.01);\n  t.y = 2.;\n  h= t.x < h.x ? t:h;\n  \n    tp = p;\n   \n   tp.y = abs(tp.y)-1.75;\n     tp = erot(tp,vec3(1.,0.,0.),bpm+p.x);\n    tp = abs(tp)-.2;\n \n     t.x = box2(tp.yz,vec2(.05));\n     \n     t.y = 3.;\n  \n    h= t.x < h.x ? t:h;\n    \n    \n    \n    tp = op;\n    for(float j=0.;j<=8.;j++){\n      vec3 ttp= tp;\n      ttp.y +=sin(iTime+j+rnd*.01);\n    ttp.x += tan(bpm+iTime+j+rnd*.01);\n    ttp=erot(ttp,normalize(vec3(.0,.1,.2)),bpm);\n     t.x = box3(ttp,vec3(.2));\n     t.y = 1.+mod(j,3.);;\n    h= t.x < h.x ? t:h;\n       }\n    \n       \n       tp=p;\n       tp.y +=1.5;\n       t.x = abs(tp.y)-.1;\n       t.y = 4.;;\n      \n        h= t.x < h.x ? t:h;\n    \n  return h;\n}\n\n#define q(s) s*sdf(p+s).x\n\nvec3 norm(vec3 p, float ee){vec2 e =vec2(-ee,ee);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvec3 sun(vec2 p){\n    float up = max(0.,p.y);\n     float d = length(p)-.5;;\n     float t = texture(iChannel0,fract(vec2(abs(floor(p.x*100.)/100.)))).r*.1;\n     float bar = abs(abs(p.y+cos(p.x*5.+iTime)*.1)-.2-t)-.01;\n     d = max(-bar,d);\n\n     float glow = abs(.05/d);\n     d = smoothstep(fwidth(d),0.,d);\n     vec3 col = mix(vec3(.9,.9,.0),vec3(.9,.0,.9),sqrt(up));\n    return col *d * up+glow*up*mix(col,1.-col,sin(atan(p.x,p.y)+iTime));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = sun(uv);\n  float beat = sqrt(texture(iChannel0,vec2(.3)).r);\n     rnd = dot(sin(uv*700.),cos(uv.yx*500.))*.5;\n     bpm=iTime;\n  bpm = floor(bpm)+pow(fract(bpm),2.);\n   vec3 ro = vec3(0.2+sin(bpm),1.,-3.+sin(iTime*.1)*2.),rt = vec3(0.,1.,0.);\n  vec3 z = normalize(rt-ro);\n  vec3 x = normalize(cross(z,vec3(0.,-1.,0.)));\n  vec3 y = cross(z,x);\n  vec3 rd = mat3(x,y,z)*normalize(vec3(uv,1.-(.3+floor(sin(bpm+rnd*.05)*5.)*.1)*sqrt(length(uv+rnd*.01))));\n  vec3 rp = ro;\n  vec3 light = vec3(1.,2.,9.);\n  float dd =0.;\n  vec3 acc = vec3(0.);\n  bool ref= false;\n  float dir = 1.;\n  float IOR = 2.4;\n  float i=0.;\n  for(i=0.;i++<108. && dd < 50.;){\n      vec2 d = sdf(rp);\n    d.x  *=dir;\n     if(d.y == 2.){\n         \n          acc += vec3(.9,.0,.9)*exp(-abs(d.x))/(60.-beat*40.+rnd);\n          d.x = max(.002,abs(d.x));       \n      }\n        \n    dd+=d.x;\n      rp+=rd*d.x;\n    \n      if(d.x < .001){\n        \n           \n           vec3 n = norm(rp,.01);\n         vec3 n2 = norm(rp,.03);\n           float dif = max(0.,dot(normalize(light-rp),n));\n           if(d.y == 3.){\n              if(!ref){\n                   rd = refract(rp,n,1./IOR);\n                   rp+=-n+rd*.1;\n                    acc+=dif*.1;\n                ref = true;\n                dir *=-1.;\n              } else {\n                \n                vec3 _rd = refract(rp,n,IOR);\n                if(dot(_rd,rd) ==0.){\n                   rd = reflect(rp,-n);   \n                   rp+=rd*.1;\n                } else {\n                  rd=_rd;\n                  rp+=n+rd*.1;\n                   dir *=-1.;\n                }\n               }\n              continue;\n             \n           } else if(d.y == 4.){\n             \n             rd = reflect(rd,n+rnd*.01);\n              rp+=rd*.1;\n             col =vec3(.1,.0,.2);\n               continue;\n             }\n           float spc = pow(max(0.,dot(rd,reflect(normalize(light-rp),n))),32.);\n           col = dif * vec3(.5)+ mix(vec3(.1),vec3(.3,.0,.9),spc*5.)*dif*step(.15,length(n-n2))*texture(iChannel0,vec2(.3)).r*1.;\n           break;\n        }\n  }\n  if(ref && dd >=50.){\n    col = sun(rd.xy);\n  } \n  col = mix(vec3(.01),col,1.-exp(-i*i));\n\n    // Output to screen\n    fragColor = vec4(col+acc,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 30091,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/alkama/lowvoltage?in=alkama/sets/remix-and-reworks"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}