{
    "Shader": {
        "info": {
            "date": "1637703707",
            "description": "monito 2d y fondo ",
            "flags": 0,
            "hasliked": 0,
            "id": "NlVGWW",
            "likes": 5,
            "name": "monito 2d y fondo ",
            "published": 3,
            "tags": [
                "monito2dyfondo"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n//https://www.shadertoy.com/view/7ly3D1  ... Lightspeed effect\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(1.0),b,d)\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;   return length(max(d,0.0)) + min(max(d.x,d.y),0.0);}\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat ellipse(vec2 p, vec2 focus0, vec2 focus1, float radius) \n{   return distance(p, focus0) + distance(p, focus1) - distance(focus0, focus1) * radius; }\n\nfloat HacerPeloDown1(vec2 p )\n{   float d1= sdCircle(p-vec2(0.0,0.0), 0.5 );\n    float d2= sdCircle(p-vec2(0.2,-0.35),0.5 );\n    float dif1= differenceSDF(d1, d2);\n    return dif1;\n}\nfloat HacerPeloUp1(vec2 p )\n{   float d1= sdCircle(p-vec2(0.0,0.0), 0.5 );\n    float d2= sdCircle(p-vec2(0.42,0.35),0.75 );\n    float dif1= differenceSDF(d1, d2);\n    return dif1;\n}\n\nfloat HacerRostro(vec2 p)\n{   vec2 focus0=vec2(0.0,0.2);\n    vec2 focus1=vec2(0.0,0.8);\n    float radius=2.0;\n    float d1= ellipse(p,focus0,focus1,radius);\n    return d1;\n}\n\nfloat HacerOjo(vec2 p)\n{   vec2 focus0=vec2(0.0,0.2);\n    vec2 focus1=vec2(0.0,0.3);\n    float radius=1.0;\n    float d1= ellipse(p,focus0,focus1,radius);\n    return d1;\n}\n\nfloat HacerBoca(vec2 p)\n{   vec2 focus0=vec2(0.01,0.2);\n    vec2 focus1=vec2(0.2,0.25);\n    float radius=1.0;\n    float d1= ellipse(p,focus0,focus1,radius);\n    return d1;\n}\n\n\nvec3 sd2d(vec2 uv, vec3 col)\n{   float d0=HacerRostro(uv-vec2(0.08,-0.7));\n    col= DrawFigBorde(vec3(0.7,0.6,0.1)-uv.y*0.25, col, d0 );\n    \n    float d1,d2,d3,d4,d5,d6;\n    d1= HacerPeloDown1(uv-vec2(0.05,0.0));\n    d2= HacerPeloUp1(uv-vec2(0.3,0.48));\n    d3= HacerPeloUp1(vec2(-uv.x, uv.y)-vec2(-0.2,0.25));\n    d4= HacerPeloUp1(uv*1.5-vec2(-0.2,0.45));\n    d5= HacerPeloDown1(vec2(-uv.x, uv.y)-vec2(-0.4,-0.1) );\n    d6= HacerPeloUp1(vec2(-uv.x, uv.y)*1.2-vec2(0.6,0.25));\n    \n    float dtdo=unionSDF(d1, d2);\n    dtdo=unionSDF(dtdo, d3);\n    dtdo=unionSDF(dtdo, d4);\n    dtdo=unionSDF(dtdo, d5);\n    dtdo=unionSDF(dtdo, d6);\n    col=DrawFigBorde(vec3(1.0,0.0,0.0)-uv.y, col,dtdo);\n    \n    float dojoI= HacerOjo(uv-vec2(0.0,-0.6));\n    float dojoD= HacerOjo(uv-vec2(0.3,-0.6));\n    col=DrawFigBorde(vec3(0.0,0.0,0.0), col,dojoI);\n    col=DrawFigBorde(vec3(0.0,0.0,0.0), col,dojoD);\n    \n     float dboca= HacerBoca(uv-vec2(0.0,-0.7));\n    col=DrawFigBorde(vec3(0.0,0.0,0.0), col,dboca);\n return col;\n}   \n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv0 = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv0.x *= iResolution.x/iResolution.y;\n    uv0*=1.0;\n     // Normalized pixel coordinates (from -1 to 1)\n    vec2 suv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //Radial UVs    \n    vec2 uv = vec2(length(suv),atan(suv.y,suv.x));\n    //Stars\n    float offset = .1*sin(uv.y*10.f-iTime*.6)*cos(uv.y*48.f+iTime*.3)*cos(uv.y*3.7f+iTime);\n    vec3 rays = vec3(sin(uv.y*150.f+iTime)*.5+.5)* \n    vec3(sin(uv.y*80.f-iTime*0.6)*.5+.5)*\n    vec3(sin(uv.y*45.f+iTime*0.8)*.5+.5)*\n    vec3(1.f-cos(uv.y+22.f*iTime-pow(uv.x+offset,.3f)*60.f))*\n    vec3(uv.x*2.f);\n    vec2 uv2=rays.xy;\n    \n   vec3  col=vec3(0.0);\n    col=sd2d(uv2, col);\n    col=sd2d(uv0, col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}