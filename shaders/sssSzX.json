{
    "Shader": {
        "info": {
            "date": "1618994358",
            "description": "Yet ANOTHER sqrt implementation, but without using IEEE754 bit tricks and assuming there isn't a hardware DIV and SQRT instructions, just MUL and ADD.",
            "flags": 0,
            "hasliked": 0,
            "id": "sssSzX",
            "likes": 19,
            "name": "sqrt",
            "published": 3,
            "tags": [
                "2d",
                "approximation",
                "sqrt"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1072
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Yet ANOTHER sqrt approximation, but without using IEEE754 bit tricks.\n// Yellow, hardware sqrt. Purple, my software implementation.\n//\n// The game in this shader was to do it all assuming you are in some\n// ancient hardware that doesn't have hardware sqrt or division\n// instructions, but does have hardware multiplications. So, it actually\n// computes 1/sqrt(x) to avoid divisions in the Newtown-Raphson loop, at\n// the cost of one software division for inverting the output (or the\n// input). Also it assumes we don't know the floating point bit\n// representation, so it can't bit-shift the exponent of the argument to\n// get an initial guess.\n//\n// Note I have not done my research, so most likely\n// this method is not the optimal way to compute sqrt.\n// Be warned!\n\nfloat my_sqrt( float y )\n{\n    bool lto = y<1.0;\n    y = lto ? y : 1.0/y;\n    \n    float x  = 1.5-0.5*y;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n          x *= 1.5-0.5*y*x*x;\n\n    return lto ? 1.0/x : x;\n}\n\n// For reference, this is a bit-hacked version with one single \n// division. The constant 0x1fbe0000u should be tweaked to achieve\n// a better error over a particular range of values of y.\nfloat my_sqrt_for_IEEE754_and_one_division( float y )\n{\n    float x = uintBitsToFloat( 0x1fbe0000u+(floatBitsToUint(y)>>1) );\n    return 0.5*(x+y/x);\n}\n\n//------------------------------------------------------------------------------\n\nfloat my_sqrt_animated( float y )\n{\n    int num = min( int(iTime) % 15, 10 );\n\n    bool lto = y<1.0;\n    y = lto ? y : 1.0/y;\n\n    float x = 1.0;\n    for( int i=0; i<num; i++ )\n        x *= 1.5-0.5*y*x*x;\n\n    return lto ? 1.0/x : x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2  p = fragCoord/iResolution.x;\n    float px = 1.0/iResolution.x;\n    \n    p  *= 5.0;\n    px *= 5.0;\n\n    float al = max( step(mod(iTime,15.0),10.0),      \n                    smoothstep(-0.1,0.1,sin(6.283185*iTime)) );\n\n    vec3 col = vec3( 0.1 + 0.05*mod(floor(p.x)+floor(p.y),2.0) );\n    \n    // sqrt\n    {\n    float y = sqrt( p.x );\n    col = mix( col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0,1.5*px,abs(p.y-y)) );\n    }\n        \n    // approx sqrt\n    {\n    float y = my_sqrt_animated( p.x );\n    col = mix( col, vec3(1.0,0.0,1.0), al*(1.0-smoothstep(0.0,1.5*px,abs(p.y-y))) );\n    }\n    \n    \n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}