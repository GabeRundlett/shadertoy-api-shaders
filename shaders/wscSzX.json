{
    "Shader": {
        "info": {
            "date": "1572476585",
            "description": "Wanted to try some infinite space with mirror post effect",
            "flags": 32,
            "hasliked": 0,
            "id": "wscSzX",
            "likes": 5,
            "name": "Shadertober 29 injured",
            "published": 3,
            "tags": [
                "raymarching",
                "menger",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = abs(2.0 * fragCoord.xy / iResolution.xy - 1.0) * .5 + .5 ;\n    vec4 col = texture(iChannel0, uv);\n    \n    // post effect\n    vec2 suv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    suv.x *= iResolution.x/iResolution.y;\n    \n    col.g += suv.y;\n    \n    col *= clamp(1.0-length(suv*.5), 0.0, 1.0);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// SHADERTOBER 29 injured\n// Poulet vert 30-10-2019\n// based on iq menger\n\n#define VOLUME 0.001\n#define PI 3.14159\n\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\n\nvec3 opRep(vec3 p, vec3 c)\n{\n     return mod(p+0.5*c,c)-0.5*c;\n}\n\n\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n\n\n// Scene setup\n// based on iq menger : https://iquilezles.org/articles/menger\nvec2 map(vec3 p)\n{\n    // ground\n    vec3 gp = p + vec3(0.0);\n    gp = opRep(gp, vec3(5.0));\n    \n    float d = sdBox(gp, vec3(1.0+sin(iTime)*.5));\n    \n    float s = 1.0;\n   for( int m=0; m<3; m++ )\n   {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 4.0+sin(iTime);\n      vec3 r = abs(1.0 - 3.0*abs(a));\n\n      float da = max(r.y,r.y);\n      float db = max(r.x,r.z);\n      float dc = max(r.z,r.x);\n      float c = (min(da,min(db,dc))-1.0)/s;\n\n      d = max(d,c);\n   }\n    \n    // materials\n    vec2 scene = vec2(d, 0.0);\n    \n    return scene; \n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<128 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(t, ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\n\nvec3 GetNormal (vec3 p)\n{\n    float c = map(p).x;\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(map(p+e.xyy).x, map(p+e.yxy).x, map(p+e.yyx).x) - c);\n}\n\n\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv, float time)\n{\n    \n    \n    // map stuffs\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t.x);\n    \n    vec3 col = vec3(0.0);\n    \n    vec3 nor = GetNormal(pos);\n    vec3 light = vec3(sin(iTime), 1.0, cos(iTime));\n    float l = clamp(dot(nor, light), 0.0, 1.0);\n    \n    if(t.x == -1.0)\n    {\n        vec3 ramp = mix(vec3(1.0, 0.0, 0.5), vec3(0.0,  0.0, 1.0), max(uv.y, 0.0));\n        ramp *= ramp;\n        ramp *= uv.y;\n        ramp = clamp(ramp, 0.0, 1.0);\n        ramp *= abs(uv.y)*-1.+.5;\n        \n        col = ramp;\n    }\n    else\n    {   \n        if(t.y==0.0) // finally only one material but to lazy to edit\n        {\n            col = vec3(.5) - l * .5;\n            col = mix(vec3(1.0, 0.5, 0.5), vec3(0.0, 0.0, .5), col.x);\n        }\n\n        \n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    float time = iTime * 5.0;\n    \n    \n    vec3 cp = vec3(0.0, 0.0, time-5.0);\n    vec3 ct = vec3(sin(iTime)*.1, 0.0, time);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    vd.xy *= rot(iTime);\n    \n    vec3 col = Render(cp, vd, uv, time);\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}