{
    "Shader": {
        "info": {
            "date": "1622048385",
            "description": "Basic sphere using signed distance function. Added a box and a lot of distortion.",
            "flags": 4,
            "hasliked": 0,
            "id": "fls3zH",
            "likes": 4,
            "name": "SDFSphere",
            "published": 3,
            "tags": [
                "sdf",
                "sphere"
            ],
            "usePreview": 0,
            "username": "nialred",
            "viewed": 515
        },
        "renderpass": [
            {
                "code": "/*\n\nReferences:\nhttp://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/\nhttps://michaelwalczyk.com/blog-ray-marching.html\nhttps://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-generating-camera-rays/generating-camera-rays\nhttps://www.shadertoy.com/view/4sdSDN\n\n*/\n\nconst int MAX_MARCHING_STEPS = 500; // Max steps you are willing to search for a \"hit\"\nconst float MAX_DIST = 1000.0; // Max distance to search for a \"hit\"\nconst float MIN_DIST = 0.0; // Where to start the march \nconst float EPSILON = 0.001; // How close you need to be to be considered a hit\n\nfloat wave = 0.0;\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n};\n\nstruct Box\n{\n    vec3 center;\n    vec3 size;\n    float radius; // fillet\n};\n\n// I don't know where I should define this cause I don't know how this scales\n// once you introduce multiple shapes and whatnot, so I just made it global\nSphere sphere = Sphere(vec3(0.0, 0.0, 0.0), 25.0);\nBox box = Box(vec3(0.0, 0.0, 200.0), vec3(50.0, 100.0, 50.0), 60.0);\n\nvoid rotate_2d(float freq, inout vec2 p)\n{\n    float c = cos(freq);\n    float s = sin(freq);\n    p = vec2((p.x*c) - (p.y*s), (p.x*s) + (p.y*c));\n}\n\nfloat distort_surface(float freq, vec3 point)\n{\n    return sin(freq * point.x) * sin(freq * point.x) * sin(freq * point.y) * sin(freq * point.y)* sin(freq * point.y)* sin(freq * point.z)/ sin(freq * point.z)/ sin(freq * point.z);\n    //return sin(freq * point.x) * tan(freq * point.x) * cos(freq * point.x) * sin(freq * point.y) * sin(freq * point.y)* sin(freq * point.y)/ sin(freq * point.z)/ sin(freq * point.z)/ tan(2.0*freq * point.z);\n    //return sin(freq * point.x) / cos(freq * point.y) / sin(0.025*point.z);\n    //return sin(freq * point.x) * sin(freq * point.x);\n    //return 2.75*sin(freq * point.x) * sin(freq * point.y) * sin(freq * point.z);\n    //return point.x/point.z*point.y/point.x;\n    //return sin(freq*point.x/2.0) * sin(point.y/2.0) * sin(point.z/2.0);\n}\n\nvec3 ray_direction(float fieldOfView, vec2 uv) \n{ \n    float z = 1.0 / tan(radians(fieldOfView) / 2.0); // Distance to image plane\n    return normalize(vec3(uv, z));\n}\n\nfloat sphere_sdf(vec3 point)\n{\n    return length(point - sphere.center) - sphere.radius; // Return distance from sphere\n}\n\nfloat sd_box(vec3 point, Box box_obj, float is_rounded) // box and rounded box\n{\n    vec3 diff = abs(point-box_obj.center) - box_obj.size;\n    return length(max(diff, 0.0)) + \n           min(max(diff.x,max(diff.y,diff.z)),0.0) - // not sure\n           (box_obj.radius * is_rounded);\n}\n\nfloat map_world(vec3 point)\n{   \n    rotate_2d(iTime/15.0, point.xz);\n    float displacement = distort_surface(0.5, point);\n    float dist = sphere_sdf(point); // Distance from sphere \n    float box_dist = sd_box(point, box, 1.0);\n    return min(dist, box_dist) + displacement;\n}\n\nfloat shortest_distance_to_surface(vec3 eye_pos, vec3 march_dir, float start, float end)\n{\n    float depth = start; // Starting point for ray march (0.0)\n    float dist = 0.0;    // Initalize distance from sphere variable\n    int i = 0;           \n    \n    while (i < MAX_MARCHING_STEPS)\n    {\n        dist = map_world(eye_pos + (depth * march_dir)); // Distance to sphere (distorted)\n        \n        if (dist < EPSILON) // If at the surface, return the depth from image plane\n        {\n            return depth;\n        }\n        \n        depth += dist;\n        \n        if (depth >= end) // If at the max marching distance, return the max value\n        {\n            return end;\n        }\n        \n        i += 1;\n     }\n     \n     return end;\n}\n\nvec3 estimate_normal(vec3 point)\n{   \n    vec3 step = vec3(EPSILON, 0.0, 0.0);\n    \n    float gradient_x = map_world(point + step) - map_world(point - step);\n    float gradient_y = map_world(point + step.yxz) - map_world(point - step.yxz);\n    float gradient_z = map_world(point + step.yzx) - map_world(point - step.yzx);\n    \n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n    \n    return normalize(normal);\n}\n\nfloat diffuse(vec3 current_pos, vec3 light_pos, vec3 normal)\n{\n    vec3 light_dir = normalize(light_pos - current_pos);\n    float intensity = max(0.0, dot(normal, light_dir));\n    return intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    wave = 2.0*texture(iChannel0, uv).x;\n    float aspect_ratio = iResolution.x/iResolution.y;\n    uv.x = uv.x * aspect_ratio; // Account for image aspect ratio\n\n    // Define camera position\n    vec3 cam_pos = vec3(0.0, 0.0, -75.0);\n     \n    // Define ray as vector from camera position to pixel position\n    Ray ray = Ray(cam_pos, ray_direction(45.0, uv));\n      \n    // Define light position as a 3D vector\n    vec3 light_pos = vec3(20.0, 50.0, -40.0);\n    \n    // Find distance to surface\n    float dist = shortest_distance_to_surface(ray.origin, ray.direction, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) // If sphere doesn't exist at this pixel draw bg\n    { \n        // Eventually want to have the background be a cubic room \n        fragColor = vec4(0.2, 0.2, 0.2, 0.0);\n    }\n    \n    else // If sphere does exist at this pixel, draw color accordingly using basic lighting\n    {\n        vec3 point = ray.origin + dist*ray.direction;\n        vec3 normal = estimate_normal(point);\n        float intensity = diffuse(point, light_pos, normal);\n        normal = vec3(0.85, 0.95, 0.95) * (intensity);\n        normal = normal + 0.25;\n        fragColor = vec4(normal, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}