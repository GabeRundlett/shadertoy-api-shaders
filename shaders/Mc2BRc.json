{
    "Shader": {
        "info": {
            "date": "1725302717",
            "description": "CRT Effect by Dean The Coder found here: https://github.com/deanthecoder/CrtTextBox. \"Borrowed\" for Windows Terminal Shader Gallery with the Dean's permission.",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2BRc",
            "likes": 1,
            "name": "DTC CRT Effect",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 62
        },
        "renderpass": [
            {
                "code": "#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// START OF PORT\n\n//\n// ╓――――――――――――――――――╖\n// ║    CRT Effect    ║░\n// ║        by        ║░\n// ║   DeanTheCoder   ║░\n// ╙――――――――――――――――――╜░\n//  ░░░░░░░░░░░░░░░░░░░░\n//\n// Effects: Fish eye, scan lines, vignette, screen jitter,\n//          background noise, electron bar, shadows,\n//          screen glare, fake surround (with reflections).\n//\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Parameterized values\nconst vec3 brightnessBoost = pow(vec3(1.,1.,1.), vec3(2.0));\nconst float \n    enableScanlines       = 1.\n  , enableSurround        = 1.\n  , enableSignalDistortion= 1.\n  , enableShadows         = 1.\n  ;\n\nvec2 fisheye(vec2 uv)\n{\n    float r = 2.5;\n    uv *= 1.05;\n    return r * uv / sqrt(r * r - dot(uv, uv));\n}\n\nfloat bar(float y)\n{\n    y += 0.5;\n    y = fract(y * 0.7 - TIME * 0.1);\n    return smoothstep(0.7, 0.98, y) + smoothstep(0.98, 1.0, 1.-y);\n}\n\nfloat h21(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.11369, 0.13787));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec4 image(vec2 q) {\n  vec2 p = -1.+2.*q;\n  p *= 1.025;\n  vec2 b = step(abs(p), vec2(1.));\n  q = 0.5+0.5*p;\n  vec4 icol = texture(iChannel0, q);\n  return vec4(icol.rgb, b.x*b.y*icol.w); \n}\n\nvec3 dtcmain(vec2 fragCoord)\n{\n    vec2 res = RESOLUTION.xy;\n  \n    // UV coords in the range of -0.5 to 0.5\n    vec2 uv = (fragCoord / res) - 0.5;\n\n    // Apply fisheye and border effect (if enabled).\n    vec2 st = enableSurround > 0.5 ? fisheye(uv) : uv;\n\n    float ns = h21(fragCoord); // Random number, to use later.\n\n    // Monitor screen.\n    float rnd = h21(fragCoord + TIME); // Jitter.\n\n//    return vec4(imageRgb, 1.0);\n\n    float bev = enableSurround > 0.5 ? (max(abs(st.x), abs(st.y)) - 0.498) / 0.035 : 0.0;\n    if (bev > 0.0)\n    {\n        // We're somewhere outside the CRT screen area.\n        vec3 col = vec3(0.68, 0.68, 0.592);\n        if (bev > 1.0)\n        {\n            // Monitor face.\n            col -= ns * 0.05;\n        }\n        else\n        {\n            // Bevel area.\n            col *= mix(0.1, 1.0, bev);\n            col = col - vec3(0.0, 0.05, 0.1) * ns;\n\n            // Shadow.\n            if (enableShadows > 0. && uv.y < 0.0)\n                col *= min(1.0, 0.6 * smoothstep(0.8, 1.0, bev) + 0.8 + smoothstep(0.4, 0.3, length(uv * vec2(0.4, 1.0))));\n\n            // Screen reflection in the bevel.\n            float dir = sign(-uv.x);\n            vec3 tint = vec3(0);\n            for (float i = -5.0; i < 5.0; i++)\n            {\n                for (float j = -5.0; j < 5.0; j++) {\n                    vec4 tcol = image((st * 0.9 + vec2(dir * i, j * 2.0) * 0.002 + 0.5));\n                    tint += tcol.rgb*tcol.w;\n                }\n            }\n\n            tint /= 80.0;\n            col = mix(tint, col, 0.8 + 0.2 * bev);\n        }\n\n        \n        return col;\n    }\n\n    vec4 imageRgb = image(st + 0.5 + vec2(rnd * enableSignalDistortion, 0)/res);\n    float lum = 1.0;\n\n    // Background noise.\n    lum += enableSignalDistortion * (rnd - 0.5)*0.15;\n\n    // Scrolling electron bar.\n    lum += enableSignalDistortion * bar(uv.y) * 0.2;\n\n    // Apply scanlines (if enabled).\n    if (enableScanlines > 0.5 && (int(fragCoord.y) % 2) == 0)\n        lum *= 0.8;\n\n    // Apply main text color tint.\n    imageRgb.rgb *= lum * brightnessBoost;\n\n\n    vec3 col = vec3(0.);\n    if (enableShadows > 0.5)\n    {\n        // Screen shadow.\n        float bright = 1.0;\n        if (uv.y < 0.0)\n            bright = smoothstep(0.43, 0.38, length(uv * vec2(0.4, 1.0)));\n        col *= min(1.0, 0.5 + bright);\n\n        // Glare.\n        col = mix(col, vec3(0.75 + 0.25 * ns), bright * 0.25 * smoothstep(0.7, 0.0, length((uv - vec2(0.15, -0.3)) * vec2(1.0, 2.0))));\n    }\n\n    col += imageRgb.rgb*imageRgb.w;\n    \n    // Vignette.\n    col *= 1.0 - 1.2 * dot(uv, uv);\n    \n    return col;\n}\n// END OF PORT\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fc = fragCoord;\n    fc.y = RESOLUTION.y - fc.y;\n    fragColor = vec4(dtcmain(fc), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}