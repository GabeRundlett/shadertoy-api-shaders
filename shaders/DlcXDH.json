{
    "Shader": {
        "info": {
            "date": "1685316274",
            "description": "trippy lines",
            "flags": 0,
            "hasliked": 0,
            "id": "DlcXDH",
            "likes": 3,
            "name": "trippy view",
            "published": 3,
            "tags": [
                "lines"
            ],
            "usePreview": 0,
            "username": "forgeapm21",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "//creates a color pallette mask\nvec3 pallette( float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 1.0, 0.557);\n    \n    return a + b * cos( 5.28318*(c*t+d) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    //normalize coordinates to a unit grid (x,y) -> (u,v)\n    //iResolution gives dimensions of canvas, is a vec3, .xy only uses its first two values\n    //iresolution.xy swizzles the attributes of the irezolution vector into a new vector. the object.attributeatribute syntax is a universal thing\n    vec2 uv = (fragCoord / iResolution.xy - 0.5) * 2.0;\n    \n    \n    //original coordinates\n    vec2 uv0 = uv;\n    \n    //shrinks and duplicates the image\n    //uv = fract(uv * 2.0) -0.5;\n    \n    //corrects for nonsquare frames\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //float fot the distance magnitude from coordinates to origin\n    float d = length(uv);\n    \n    //mask color variable\n    vec3 col = pallette(d + iTime/10.0);\n    \n    \n    //this should adjust the length harmonically based on the theta of the point\n    d += cos( sin( uv.y/d * iTime/10.0 ) ) ;\n   \n    //same as below but executed better, it makes a circle\n    //by using sin we can make many circles\n    d = sin(d * 20.0 + iTime);\n    d = abs(d);\n    //d = smoothstep(0.0, 1.0, d);\n    \n\n    d = 0.2/d;\n    \n    //makes a circular region where d1 = 1\n    float d1 = 0.0;\n    if (d <= 1.0 && d >= 0.4)\n    {\n        d1 = 1.0;\n    }\n    \n    //applys color mask to d\n    col *= d;\n    \n    //outputs a color gradient, inputting values of uv for the color values \n    fragColor = vec4(col, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}