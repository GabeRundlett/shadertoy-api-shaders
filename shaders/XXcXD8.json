{
    "Shader": {
        "info": {
            "date": "1718909544",
            "description": "https://claude.ai/chat/78d6d5cc-3dd3-4fe3-aef6-b06de66c6d97",
            "flags": 0,
            "hasliked": 0,
            "id": "XXcXD8",
            "likes": 1,
            "name": "Claude 3.5 AI FX",
            "published": 3,
            "tags": [
                "fx",
                "claude",
                "ai"
            ],
            "usePreview": 0,
            "username": "Sergeindamix",
            "viewed": 90
        },
        "renderpass": [
            {
                "code": "// Funci칩n de utilidad para el ruido\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Funci칩n para el desenfoque gaussiano\nvec3 gaussianBlur(sampler2D channel, vec2 uv, vec2 resolution) {\n    float blur = 2.0;\n    vec3 col = vec3(0.0);\n    for (float x = -4.0; x <= 4.0; x += 1.0) {\n        for (float y = -4.0; y <= 4.0; y += 1.0) {\n            vec2 offset = vec2(x, y) * blur / resolution;\n            col += texture(channel, uv + offset).rgb;\n        }\n    }\n    return col / 81.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 tex = texture(iChannel0, vec2(uv.x, uv.y));\n    \n    float time = iTime;\n    int effect = int(mod(floor(time / 5.0), 15.0));\n    \n    vec3 col = tex.rgb;\n    \n    if (effect == 0) {\n        // Sepia tone\n        float grey = dot(col, vec3(0.299, 0.587, 0.114));\n        col = mix(col, vec3(grey) * vec3(1.2, 1.0, 0.8), 0.8);\n    } \n    else if (effect == 1) {\n        // High contrast black and white\n        float grey = dot(col, vec3(0.299, 0.587, 0.114));\n        grey = smoothstep(0.3, 0.7, grey);\n        col = vec3(grey);\n    } \n    else if (effect == 2) {\n        // Vignette\n        vec2 center = vec2(0.5, 0.5);\n        float dist = distance(uv, center);\n        col *= smoothstep(0.8, 0.2, dist);\n    } \n    else if (effect == 3) {\n        // Color shift\n        col = col.brg;\n    } \n    else if (effect == 4) {\n        // Film grain\n        vec3 grain = vec3(noise(uv * time)) * 0.1;\n        col += grain;\n    }\n    else if (effect == 5) {\n        // Gaussian blur\n        col = gaussianBlur(iChannel0, vec2(uv.x, 1.0 - uv.y), iResolution.xy);\n    }\n    else if (effect == 6) {\n        // Chromatic aberration\n        float aberration = 0.01;\n        col.r = texture(iChannel0, vec2(uv.x + aberration, 1.0 - uv.y)).r;\n        col.g = texture(iChannel0, vec2(uv.x, 1.0 - uv.y)).g;\n        col.b = texture(iChannel0, vec2(uv.x - aberration, 1.0 - uv.y)).b;\n    }\n    else if (effect == 7) {\n        // Film burn\n        vec3 burn = vec3(1.0, 0.5, 0.0) * noise(uv * 2.0 + time);\n        col = mix(col, burn, 0.2);\n    }\n    else if (effect == 8) {\n        // Scanlines\n        float scanline = sin(uv.y * 800.0) * 0.04;\n        col -= scanline;\n    }\n    else if (effect == 9) {\n        // Old film (scratches and flicker)\n        float scratch = noise(vec2(uv.y, time)) * step(0.98, uv.x);\n        float flicker = noise(vec2(0.0, time * 4.0)) * 0.1;\n        col *= 0.7 + 0.3 * sin(10.0 * time * uv.y);\n        col += scratch + flicker;\n    }\n    else if (effect == 10) {\n        // Split screen\n        if (uv.x < 0.5) {\n            col = texture(iChannel0, vec2(uv.x * 2.0, 1.0 - uv.y)).rgb;\n        } else {\n            col = 1.0 - texture(iChannel0, vec2((uv.x - 0.5) * 2.0, 1.0 - uv.y)).rgb;\n        }\n    }\n    else if (effect == 11) {\n        // Lens distortion\n        vec2 center = vec2(0.5, 0.5);\n        vec2 dist = uv - center;\n        float r = length(dist);\n        float power = 0.1;\n        float bind = 0.9;\n        float correctionRadius = pow(bind, power);\n        vec2 newUv = center + normalize(dist) * correctionRadius * pow(r / correctionRadius, 1.0 / power);\n        col = texture(iChannel0, vec2(newUv.x, 1.0 - newUv.y)).rgb;\n    }\n    else if (effect == 12) {\n        // Security camera effect\n        col = texture(iChannel0, vec2(uv.x, 1.0 - uv.y)).rgb;\n        col = (col.r + col.g + col.b) / 3.0 * vec3(0.1, 1.0, 0.1);\n        col += vec3(noise(uv * 50.0 + time)) * 0.1;\n    }\n    else if (effect == 13) {\n        // 8mm film effect\n        col = texture(iChannel0, vec2(uv.x, 1.0 - uv.y)).rgb;\n        col = mix(col, vec3(dot(col, vec3(0.299, 0.587, 0.114))), 0.5);\n        col *= 0.7 + 0.3 * sin(10.0 * time * uv.y);\n        col += vec3(noise(uv * 10.0 + time)) * 0.1;\n    }\n    else if (effect == 14) {\n        // Posterization\n        int levels = 5;\n        col = floor(col * float(levels)) / float(levels);\n    }\n    \n    // A침adir una transici칩n suave entre efectos\n    float transition = smoothstep(0.0, 0.5, mod(time, 2.0)) * smoothstep(1.0, 0.5, mod(time, 2.0));\n    col = mix(tex.rgb, col, transition);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}