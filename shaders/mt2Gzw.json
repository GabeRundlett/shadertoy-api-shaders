{
    "Shader": {
        "info": {
            "date": "1673059359",
            "description": "Game of Life from Rule 30 based on this video: [video]https://youtu.be/IK7nBOLYzdE[/video]",
            "flags": 32,
            "hasliked": 0,
            "id": "mt2Gzw",
            "likes": 4,
            "name": "Cloudy Horizon",
            "published": 3,
            "tags": [
                "gameoflife",
                "rule30",
                "aestetic"
            ],
            "usePreview": 0,
            "username": "KatzenTatzenTanz",
            "viewed": 114
        },
        "renderpass": [
            {
                "code": "#define Scale 1.\n#define Horizon 0.3\n#define HorizonDefinition 0.35\n\n\nfloat TrueScale = max(1.02,Scale);\nvec4 getColor(vec2 uv) {\n    vec3 col = texture(iChannel0, uv).rgb;\n    col.r = max(0.,pow(col.g,0.05)/2. + pow(col.g,3.)/2.);\n    col.g = max(0.,pow(col.g,0.125));\n    col.b = max(0.,col.b - max(0.3,pow(col.b-1.,3.)) + pow(col.b,0.1)/3.);\n    vec3 sky = vec3(0,0.01,0.15)*pow(uv.y*TrueScale,2.);\n    return vec4(col + sky,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (round(fragCoord/TrueScale)+0.5)*TrueScale/iResolution.xy;\n    uv-= vec2(0.5,Horizon);\n    uv/=TrueScale;\n    uv.x+=0.5;\n    if(uv.y >= 2./iResolution.y) {\n        fragColor = getColor(uv);\n        return;\n    }\n    //redefinition for grid\n    uv.y = -uv.y+5./iResolution.y;\n    uv.x += (texture(iChannel1,uv*vec2(0.2+sin(iTime)*0.004,iResolution.y/255.)).r-.5)/iResolution.x*10.;\n    uv.y += (texture(iChannel1,vec2(uv.y/30.,0)).r-0.5)/iResolution.y*4.;\n    fragColor = min(vec4(1.),getColor(uv))-(Horizon-uv.y)/Horizon*HorizonDefinition;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int[] rule = int[] (0,1,1,1,1,0,0,0);\n\nint getRule(vec2 uv) {\n    float y = uv.y;\n    float off = 1./iResolution.x;\n    int x  = int(texture(iChannel0, vec2(uv.x+off,y)).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x,    y)).r == 1.)*2;\n        x += int(texture(iChannel0, vec2(uv.x-off,y)).r == 1.)*4;\n    return x;\n}\n\nint getIteration(vec2 uv) {\n    float offx = 1./iResolution.x;\n    float offy = 1./iResolution.y;\n    int x  = int(texture(iChannel0, vec2(uv.x+offx,uv.y-offy)).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x,     uv.y-offy)).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x-offx,uv.y-offy)).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x+offx,uv.y     )).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x-offx,uv.y     )).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x+offx,uv.y+offy)).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x,     uv.y+offy)).r == 1.);\n        x += int(texture(iChannel0, vec2(uv.x-offx,uv.y+offy)).r == 1.);\n    bool self =  texture(iChannel0, vec2(uv.x,     uv.y     )).r == 1.;\n    return int((self && (x == 3 || x == 2)) || (!self && x == 3));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 0) {\n        if(int(fragCoord.x) == int(iResolution.x)/2 && int(fragCoord.y) == 0)\n                fragColor = vec4(1.);\n            else\n                 fragColor = vec4(0.);\n        return;\n    }\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if(int(fragCoord.y) == 0) {\n        fragColor.r = float(rule[getRule(uv)]);\n        return;\n    }\n    if(int(fragCoord.y) == 1) {\n        fragColor.r = texture(iChannel0,vec2(uv.x,0)).r;\n        return;\n    }\n    if( int(fragCoord.y) == int(iResolution.y)-4+int(sin(iTime)*4.) ||\n        int(fragCoord.x) == int(iResolution.x)-4+int(sin(iTime)*4.) || \n        int(fragCoord.x) == 4+int(sin(iTime)*4.)) {\n        fragColor = vec4(0.);\n        return;\n    }\n    int i = getIteration(uv);\n    if(i == 1) {\n        if(texture(iChannel0,uv).r == 1.) {\n            fragColor = texture(iChannel0,uv);\n            fragColor.a -= 0.002;\n            if(fragColor.a <= 0.) {\n                fragColor = vec4(0,1,1,0);\n            }\n        } else {\n            fragColor = vec4(1);\n        }\n    } else {\n        fragColor = texture(iChannel0,uv) * vec4(0,0.95,0.999,0);\n        \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}