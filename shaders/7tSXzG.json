{
    "Shader": {
        "info": {
            "date": "1627919956",
            "description": "studying the patterns in a jar containing spherical grains of N possible colors.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tSXzG",
            "likes": 9,
            "name": "pattern in colored grains jar",
            "published": 3,
            "tags": [
                "patterns",
                "random",
                "hexagonal",
                "packing"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n#define H(p)     floor( fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453) *n ) / n\n\n// --- adapted from DjinnKahn's algo https://www.shadertoy.com/view/NtBSRV\n// loopless + no 3-4 cases to consider \n\nvoid mainImage( out vec4 O, vec2 U )\n{    \n    float z = .2,  s = 1.73,                  // 1.73 = sqrt(3)\n          n = float(2+int(iTime)%3);          // n = 2,3,4\n    U *= z;\n    \n    vec3 T = mat2x3( 2,1,-1, 0,s,s )/2.  * U, // to tilted space\n         C = ceil(T);\n            \n    vec2 H = floor( (C.y + C.xz) / 3. );      // hex coords center\n                                              // disc once back to screen space\n    O =  smoothstep(z*.7,-z, length( U - mat2(2,0,-1,s) * H ) - 1. )\n       * hue( H(H) );                         // random node color\n}\n\n\n\n\n\n/* // --- my initial version:\n \nvoid mainImage( out vec4 O, vec2 U )\n{\n    float z = .1,   // 25./iResolution.y,\n          n = float(2+int(iTime)%3);   // n = 2,3,4\n    mat2 M = mat2(1,.5,0,.866);        // .866 = sqrt(3.)/2.\n    U *= z *  inverse(M);              // to tilted space\n\n                                       // disc at corner D once back to screen space\n#define D(D)   smoothstep(z*.7,-z, length( (fract(U)-D) *M ) -.5 ) \\\n             * hue( H(floor(U+D)) )    // random node color\n                // on some windows, floor(U)+D is buggy\n    O = D(0.) + D(vec2(1,0)) + D(vec2(0,1)) + D(1.); // 4 contrib discs per tilted cell\n}\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}