{
    "Shader": {
        "info": {
            "date": "1725376500",
            "description": "originals  https://glslsandbox.com/e#75636.1 https://www.shadertoy.com/view/ssySz1",
            "flags": 0,
            "hasliked": 0,
            "id": "XfjBRd",
            "likes": 1,
            "name": "sparsk and color",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define BS .97  // blur strength\n#define H(a) (cos(radians( vec3(30, 60, 90) )+(a)*6.2832)*.5+.5)  // hue\n#define P 1./length((u-p)/w) * (1.-length(u-p)*2./l) * k          // points\n#define NUM_EXPLOSIONS 5.\n#define NUM_PARTICLES 75.\n#define time iTime\nvec2 Hash12(float t){\n\nfloat x = fract(sin(t*674.3)*453.2);\nfloat y = fract(sin((t+x)*714.3)*263.2);\n\nreturn vec2(x, y);\n}\n\nvec2 Hash12_Polar(float t){\n\nfloat p_Angle = fract(sin(t*674.3)*453.2)*6.2832;\nfloat p_Dist = fract(sin((t+p_Angle)*714.3)*263.2);\n\nreturn vec2(sin(p_Angle), cos(p_Angle))*p_Dist;\n}\n#define resolution iResolution.xy\nfloat Explosion(vec2 uv, float t){\n \n float sparks = 0.;\n \n    for(float i = 0.; i<NUM_PARTICLES; i++){\n    \n        vec2 dir = Hash12_Polar(i+1.)*.5;\n        float dist = length(uv-dir*t);\n        float brightness = mix(.0005, .0005, smoothstep(.05, 0., t));\n        \n        brightness *= sin(t*20.+i)*.5+.5; \n        brightness*= smoothstep(1., .6, t);\n        sparks += brightness/dist;\n    }\n    return sparks;\n}\n\n\nconst float Pi = 3.14159;\nuniform vec2 mouse;\n\nconst int   complexity      = 63;    // More points of color.\nconst float mouse_factor    = 56.0;  // Makes it more/less jumpy.\nconst float mouse_offset    = 40.0;   // Drives complexity in the amount of curls/cuves.  Zero is a single whirlpool.\nconst float fluid_speed     = 16.0;  // Drives speed, higher number will make it slower.\nconst float color_intensity = 0.5;\n\nfloat sinApprox(float x) {\n    x = Pi + (2.0 * Pi) * floor(x / (2.0 * Pi)) - x;\n    return (4.0 / Pi) * x - (4.0 / Pi / Pi) * x * abs(x);\n}\n\nfloat cosApprox(float x) {\n    return sinApprox(x + 0.5 * Pi);\n}\n\n#define time iTime\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec3  c = vec3(0), s1 = c, s2 = c, k;\n    \n  \n        vec2 u = (U - R/2.)/R.y*2.5, // screen coords\n         o = u, w, p;\n    \n\n    \n    float t = mod(iTime/36e2, 12.); // 12 hours of minutes\n    if (t < 1.) t += 12.;             // change 0 to 12\n    \n    float l = 30.,            // loop length (detail)\n          z = cos(iTime*0.1)*10.005,  // zoom from mouse y\n          a1 = t*z,           // spiral 1 rotation\n          a2 = sqrt(t*z*2.),  // spiral 2 rotation\n          i = 0., f;\n    \n    u *= z; // apply zoom\n    u = vec2( length(u), atan(u.x, u.y)/6.2832 );  // polar transform\n    if (u.x < 1.) u.x = 1./u.x;  // reciprocals (spirals between 1 & 0)\n    if (z < 1.) a1 = t/z, a2 = sqrt(t/z*2.);  // change rotation for inner\n    w = fwidth(u)*R.y/1e3;  // point size\n      vec2 uv = (U -.5*iResolution.xy)/iResolution.y;\n    for (; i++<l;)  // overlap loop for detail\n        p.x = round((u.x-i)/l)*l+i,  // segment x & skip rows\n        f = p.x*t-a1,                // y speed\n        p.y = round(u.y-f)+f,        // segment y\n        k = H(p.x*p.y)*.5+.5,        // color\n        s1 = max(s1, P),             // spiral 1 (denominator of t)\n        f = sqrt(p.x*t*2.)-a2,\n        p.y = round(u.y-f)+f,\n        k = H(p.x*p.y),\n        s2 = max(s2, P);  // spiral 2\n    \n    c += min(s1*.3 + s2, 1.);              // spirals\n    c += pow(H(length(o)), vec3(10))*.02;  // halo\n    c += H(c-u.y*2e2)*c / pow(u.x, .25);   // rays\n    \n    u = abs(U*2.-R)/R;\n    c *= min(1., 4.-max(u.x, u.y)*4.); // vignette\n      vec3 col = vec3(0);\n \n vec2 p2=(2.0*gl_FragCoord.xy-resolution)/max(resolution.x,resolution.y);\n  for(int i=1;i<complexity;i++)\n  {\n    vec2 newp=p2;\n    newp.x+=0.6/float(i)*sin(float(i)*p2.y+time/fluid_speed+0.3*float(i))+time/mouse_factor+mouse_offset;\n    newp.y+=0.6/float(i)*sin(float(i)*p2.x+time/fluid_speed+0.3*float(i+10))-time/mouse_factor+mouse_offset;\n    p2=newp;\n  }\n  vec3 col2=vec3(color_intensity*sin(3.0*p2.x)+color_intensity,color_intensity*sin(3.0*p2.y)+color_intensity,color_intensity*sin(p2.x+p2.y)+color_intensity);\n \n \n    for(float i = 0.; i<NUM_EXPLOSIONS; i++){\n    float t =iTime+i/NUM_EXPLOSIONS;\n    float ft = floor(t);\n        vec3 color = sin(4.*vec3(.34,.54,.43)*ft)*.25+.75;\n\n       \n        vec2 offset = Hash12(i+1.+ft)-.5;\n        offset*=vec2(1.77, 1.);\n        //col+=.0004/length(uv-offset);\n        \n         col += Explosion(uv-offset, fract(t))*color;\n       }\n   \n   col*=2.;\n    C = vec4(c+col*col2, 1);  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}