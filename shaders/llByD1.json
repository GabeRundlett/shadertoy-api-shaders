{
    "Shader": {
        "info": {
            "date": "1508355679",
            "description": "crunchy fork of:\nhttps://www.shadertoy.com/view/4dffRH\n\nscaling a matrix with offsets is a bit tricky.",
            "flags": 0,
            "hasliked": 0,
            "id": "llByD1",
            "likes": 3,
            "name": "noiseGra13dx crunch",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "noise",
                "perlin",
                "analytic"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 509
        },
        "renderpass": [
            {
                "code": "\n// Computes the analytic derivatives of a 3D Gradient Noise. This can be used for example to compute normals to a\n// 3d rocks based on Gradient Noise without approximating the gradient by having to take central differences. More\n// info here: https://iquilezles.org/articles/gradientnoise\n\n\n// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n\n // replace this by something better. really. do\nvec3 hash(vec3 p)\n{p=vec3(dot(p,vec3(127.1,311.7, 74.7))\n       ,dot(p,vec3(269.5,183.3,246.1))\n       ,dot(p,vec3(113.5,271.9,124.6)))\n;return fract(sin(p)*43758.5453123)*2.-1.;}\nmat3 hash(mat3 p)\n{return mat3(hash(p[0]),hash(p[1]),hash(p[2]));}\nvec3 dots(mat3 a,vec3 w,mat3 b){return vec3\n(dot(a[0],w-b[0]),dot(a[1],w-b[1]),dot(a[2],w-b[2]));}\n//return noiseGra13dx as .x, and its derivatives as .yzw\nvec4 noiseGra13dx(in vec3 x)\n{vec3 p=floor(x),w=fract(x)\n#if 1\n,u=w*w*w*(w*(w*6.-15.)+10.),v=30.*w*w*(w*(w-2.)+1.)//quintic hermite\n#else\n,u=w*w*(3.-2.*w),v=6.*w*(1.-w)//cubic hermite\n#endif    \n//gradients\n,G=hash(p+vec3(0)),F=hash(p+vec3(1))\n;mat3 D=hash(mat3(p,p,p)+mat3(1)),E=hash(mat3(p,p,p)+1.-mat3(1));\n//projections \n;vec3 d=dots(D,w,mat3(1)),e=dots(E,w,1.-mat3(1));\n//interpolations\n;float g=dot(G,w),f=dot(F,w-vec3(1));\n;vec3 h=u.yzx*(g-d.xyx-d.yzz+e.zxy)+d-g,U=u*h,a=d-e\n;mat3 S=D-mat3(G,G,G),W=D-E\n;a.x=(a.x+a.y+a.z)+f-g;\n;float b=u.x*u.y*u.z;\n;return vec4(g+U.x+U.y+U.z+a.x*b// value\n,G*(1.-b)+b*(W[0]+W[1]+W[2]+F)//https://www.shadertoy.com/view/llByD1\n+u.x*(S[0]+u.y*(G-D[0]-D[1]+E[2]))  // derivatives\n+u.y*(S[1]+u.z*(G-D[1]-D[2]+E[0]))\n+u.z*(S[2]+u.x*(G-D[0]-D[2]+E[1]))\n+v*(u.zxy*(g-d.xxy-d.zyz+e.yzx)+h+u.yzx*u.zxy*a.x));}\n\n\n\n\nvoid mainImage( out vec4 o, in vec2 fragCoord ){o=vec4(0);//for compatibility\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 2.5*cos(an), 1.0, 2.5*sin(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // sphere center\t\n\tvec3 sc = vec3(0.0,1.0,0.0);\n\n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tfloat occ = 1.0;\n\tvec3  pos = vec3(0.0);\n\t\n\t// raytrace-plane\n\tfloat h = (0.0-ro.y)/rd.y;\n\tif( h>0.0 ) \n\t{ \n\t\ttmin = h; \n\t\tnor = vec3(0.0,1.0,0.0); \n\t\tpos = ro + h*rd;\n\t\tvec3 di = sc - pos;\n\t\tfloat l = length(di);\n\t\tocc = 1.0 - dot(nor,di/l)*1.0*1.0/(l*l); \n\t}\n\n\t// raytrace-sphere\n\tvec3  ce = ro - sc;\n\tfloat b = dot( rd, ce );\n\tfloat c = dot( ce, ce ) - 1.0;\n\th = b*b - c;\n\tif( h>0.0 )\n\t{\n\t\th = -b - sqrt(h);\n\t\tif( h<tmin ) \n\t\t{ \n\t\t\ttmin=h; \n\t\t\tnor = normalize(ro+h*rd-sc); \n\t\t\tocc = 0.5 + 0.5*nor.y;\n\t\t}\n\t}\n\n    // shading/lighting\t\n\tvec3 col = vec3(0.9);\n\tif( tmin<100.0 )\n\t{\n\t    pos = ro + tmin*rd;\n\n        vec4 n = noiseGra13dx( 12.0*pos );\n        col = 0.5 + 0.5*((p.x>0.0)?n.yzw:n.xxx);\n\t\t\n\t\tcol = mix( col, vec3(0.9), 1.0-exp( -0.003*tmin*tmin ) );\n\t}\n\t\n\t\n\to = vec4( col, 1.0 );\n}\n\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}