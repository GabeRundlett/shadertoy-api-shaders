{
    "Shader": {
        "info": {
            "date": "1584469760",
            "description": "poto",
            "flags": 32,
            "hasliked": 0,
            "id": "tdlcR7",
            "likes": 7,
            "name": "Day 89",
            "published": 3,
            "tags": [
                "mdmtjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 89\" by jeyko. https://shadertoy.com/view/wslyzM\n// 2020-03-17 17:21:08\n\n// Fork of \"Day 88\" by jeyko. https://shadertoy.com/view/3sXyz7\n// 2020-03-17 15:46:42\n\n// Fork of \"Day 85\" by jeyko. https://shadertoy.com/view/WdfczH\n// 2020-03-16 09:19:14\n\n// Fork of \"Day 84\" by jeyko. https://shadertoy.com/view/Wssczn\n// 2020-03-13 10:52:05\n\n// radial blur and chromatic abberation in this buffer\n// thx iq for pallette, mercury for hg-sdf, balkhan for glow\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5),3.4)*0.1;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.)*1.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.98;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor = radial*5.5; \n    \n    fragColor *= 40.;\n    \n    \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.34);\n    //fragColor *= 1.;\n    fragColor = max(fragColor, 0.);\n    \n    fragColor *= 1.7;\n    fragColor.g *= 1.1;\n    fragColor.r *= 0.95 + uvn.x*0.7;\n    fragColor.g *= 0.95 + uvn.y*0.3;\n    fragColor = pow(fragColor, vec4(0.6545 + dot(uvn,uvn)*1.6));\n\t\n    //fragColor *= 1. - dot(uvn,uvn)*0.7;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define iTime (iTime + 14.6)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 att = vec3(1);\n\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(float t){\n\treturn mix(texture(iChannel0,vec2(floor(t)/256.)),texture(iChannel0,vec2(floor(t) + 1.)/256.), smoothstep(0.,1.,fract(t)));\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(vec2 t){\n    //t *= 1.4;\n    vec2 fr = fract(t);\n    //t *= 4.;\n\treturn \n        mix(\n            mix( \n                texture(iChannel0,vec2(floor(t.x), floor(t.y))/256.),\n                texture(iChannel0,vec2(floor(t.x), floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            mix( \n                texture(iChannel0,vec2(floor(t.x) + 1.,floor(t.y))/256.),\n                texture(iChannel0,vec2(floor(t.x) + 1.,floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            smoothstep(0.,1.,fr.x));\n}\n\nfloat sdRhombus(vec3 p, vec3 s){\n    p = abs(p) - s;\n    \n    float d = max(p.z, max(p.x, p.y));\n    \n    d = max(d, dot(p.yx + s.yx*0.5, normalize(vec2(1.))));\n    d = max(d, dot(p.yz + s.yz*0.5, normalize(vec2(1.))));\n    return d;\n}\n\n// Similar to fOpUnionRound, but more lipschitz-y at acute angles\n// (and less so at 90 degrees). Useful when fudging around too much\n// by MediaMolecule, from Alex Evans' siggraph slides\nfloat fOpUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\n\nfloat sdBox( vec3 p, vec3 s )\n{\n    p = abs(p) - s;\n    return max(p.x, max(p.y, p.z));\n}\n\n\n\nvec3 modD = vec3(4.,4.,4.);\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n    \n    \n    p.x += sin(p.x*0.1 + p.y*4. + p.z)*0.2;\n    //p.y += sin(p.x + p.y + p.z)*0.1;\n    \n    //p.x += exp(length(p.y)*0.2)*0.1;\n    \n    vec3 q = p;\n    \n    q.yz = pmod(q.yz, modD.yz);\n    \n    vec3 u = q;\n    \n    vec3 j;\n    vec3 m;\n    \n    for(int i = 0; i < 5;i ++){\n        \n        if(i == 3)\n            j = q;\n    \tq = abs(q);\n    \tif ( q.x < q.y ) { q.xy = q.yx; }\n\t    if ( q.x < q.z ) { q.xz = q.zx; }\n    \tif ( q.y < q.z ) { q.yz = q.zy; }\n        \n        //pModPolar(q.xz, 3.); \n        q.xz *= rot(-0.3);\n        q.yz *= rot(0.25*PI);\n        q.x -= 0.8 + sin(iTime)*0.;\n    \n    \tq.x += 0.24;\n\n    }\n    \n    q.x += 0.4;\n    \n    \n    float dB = sdBox(q, vec3(0.6,0.2,0.1)*0.8);\n    float dBb = length(u) - 0.3;\n    \n    dBb = abs(dBb) + 0.07;\n    d = dmin(d, vec2(dBb,5.));\n    //glow += exp(-abs(dBb)*abs(dBb)*  200.)*5.;\n    \n    //q = abs(q) + 0.01;\n    float dW = -q.x + 0.8;\n    \n    //dW = max(q.x, -q.z + 0.041);\n    \n    \n    //dW = max(dW, -q.x + 0.2);\n    //d = dmin(d, vec2(dB, 10.));\n    d = dmin(d, vec2(dW, 10.));\n    \n    j.y -= 0.1;\n    d = dmin(d, vec2(1. - sdBox(j, vec3(0.14)), 11.));\n    \n    m = abs(m);\n    \n    m.z -= 0.;\n    \n    //float dddd = abs(1.3 - sdBox(m, vec3(0.31,0.9,0.03))) + 0.01;\n    \n    p.y -= 6.;\n    \n    \n    float diam = 0.3;\n    //float dddd = length(p.xy) - diam + 3.*smoothstep(0.,1.,p.y*20.);\n    //float dddd = length(p.xy) - diam + 3.*smoothstep(0.,1.,abs(p.z - iTime)*0.01);\n    float dddd = length(p.xy) - diam + 3.*smoothstep(0.,1.,abs(p.z - iTime + sin(iTime)*2.)*0.03);\n    \n    \n    \n    d = dmin(d, vec2(abs(dddd) + 0.01, 15.));\n    //glow += exp(-dddd*10.)*0.06;\n    \n    vec4 n =valueNoise(p.z);\n    \n    glow += 0.14/(0.01 + dddd*dddd*(1. + n.y*20.))*vec3(0.1,0.1,0.1 + n.x)*att;\n    \n    \n    \n    \n\td.x *= 0.8;\n    return d;\n}\nfloat dith;\nfloat side = 1.;\nint it;\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n    \n\tvec2 d = map(ro);\n\td.x *= side;\n    if(d.x < 0.01)\n        ro += rd*0.04;\n    \n    p = ro; t = 0.; hit = false;\n    \n    \n    for(it = 0; it < 90 + min(0,iFrame)    ; it++){\n    \td = map(p);\n        d.x *= side;\n        d.x *= dith;\n    \t//glow += exp(-d.x*20.);\n        if(d.x < 0.00001){\n        \thit = true;\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir ));\n\tvec3 up = normalize(cross(dir, right));\n    float fov = 0.7;\n    return normalize(dir + (right*uv.x + up*uv.y)*fov);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //\n\t//uv *= 1. - dot(uv,uv)*0.2;\n    uv *= 1. - dot(uv,uv)*0.3;\n    \n    vec4 n = pow(valueNoise(iTime*1.), vec4(2.));\n    \n    \n    uv.xy *= rot(iTime*0.1 + PI*0.78 + sin((iTime - 3.6))*0.2 + n.y*0.25);\n    \n    vec3 col = vec3(0);\n\n    dith = mix(0.95,1., texture(iChannel0, 20.*uv*256. + iTime).x);\n    vec3 ro = vec3(0);\n    \n    \n    float nb = valueNoise(iTime*1./2.).x;\n    float zoom = 5. + n.x*1.;\n    //ro.xz += vec2(sin( 0. + iTime),cos(0. + iTime))*zoom;\n    \n    ro.z += iTime*1.;\n    \n    //ro.y += iTime*modD.y;\n    ro.y += 0.6 + sin(iTime)*0.;\n    \n    vec3 lookAt = vec3(0,ro.y + 1.8,ro.z + 3.);\n    \n    \n    lookAt.y += iMouse.y/iResolution.y*0.05;\n    lookAt.x -= iMouse.x/iResolution.y*0.05 - 0.025;\n    lookAt.y += -0. + valueNoise(iTime*1./2.).x*0.5;\n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    rd.xz *= rot(0.1);\n    \n    vec3 p; float t; bool hit;\n    float tA = 0.;\n    float tF = 0.;\n    \n    for(int i = 0; i < 3; i ++){\n    \tvec2 d = march(ro, rd, p, t, hit);\n    \tvec3 n = getNormal(p)*side;\n        \n        vec3 ld = normalize(vec3(1));\n        vec3 h = normalize(ld - rd);\n        \n        float diff = max(dot(n, ld), 0.);\n        float spec = pow(max(dot(n, -h), 0.), 20.);\n        float fres = pow(1. - max(dot(n, -rd), 0.14), 5.);\n      \t\n        if(i == 0)\n            tF = t;\n        \n        tA = max(tA, t);\n        if(hit){\n            if(d.y == 10.){\n\n                fres = max(fres, 0.1);\n\n                if(i == 5)\n                    col += glow*0.001;\n\t\t\t\t\n                #define ao(j) clamp(map(p + n*j).x/j, 0., 1.) \n                col += pow(fres, 3.3)*0.1*pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *20. + iTime)*att*ao(0.1);\n                att *= vec3(0.2,0.3,0.4)*1.8;\n\n\n                side *= -1.;\n                ro = p;\n                rd = reflect(rd,n);\n                rd = refract(rd,n, 0.98);\n\n            } else if(d.y == 11.){\n\n                fres = max(fres, 0.1);\n\t\t\t\t\n                if(i == 5)\n                    col += glow*0.001;\n\n                //glow *= att;\n                \n                vec3 a = pow(fres, 1.3)*0.014*pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *10. + iTime)*att;\n                \n                //a *= ao(0.1)*ao(0.7);\n                a *= ao(0.1);\n                col += a;\n                \n                \n                att *= vec3(0.2,0.3,0.4)*0.1;\n\n                break;\n\t\t\t\t\n            }\n        \n        } else {\n            //att = att - att + 1.;\n        }\n    }\n\n    \n    //col = mix(col, vec3(0.4,0.1,0.1)*0.03, pow(smoothstep(0.,1.,tA*0.013), 1.6)*att);    \n    //col = mix(col, vec3(0.4,0.1,0.1)*0.006, pow(smoothstep(0.,1.,tF*0.03), 1.6));       \n    //col = mix(col, vec3(0.41,0.1,0.1)*0.002, pow(smoothstep(0.,1.,tA*0.03), 1.6));\n    col = mix(col, vec3(0.41,0.1,0.1)*0.0014, pow(smoothstep(0.,1.,tF*0.03), 1.));\n\n    \n    //col = mix(col, glow*0.01, smoothstep(0.,1.,length(glow)*0.004));\n    col -= glow*0.00002;\n    \n    col = min(col, 0.0032);\n    //col = max(col, 0.01);\n    //col += glow*0.0004;\n    \n    //col -= float(it)*0.00009;    \n    //col = mix(col, vec3(0.4,0.4,0.7)*0.1, pow(smoothstep(0.,1.,tA*0.143), 1.6));\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}