{
    "Shader": {
        "info": {
            "date": "1568194584",
            "description": "Up and down (structure from \"Stairs to Nowhere\"); why?",
            "flags": 0,
            "hasliked": 0,
            "id": "wdcGWr",
            "likes": 14,
            "name": "Submerging Tower",
            "published": 3,
            "tags": [
                "symmetry",
                "stairs",
                "structure"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "// \"Submerging Tower\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nvec4 szFlr;\nvec3 sunDir;\nvec2 twrCs;\nfloat dstFar, tCur, szFac, flSpc, nFlr, twrRad, bSizeV, cIdV, vShift;\nint idObj;\nconst int idFlr = 1, idStr = 2, idRl = 3, idStn = 4, idCln = 5;\nconst float pi = 3.14159, sqrt2 = 1.41421;\n\n#define SZ(x) (szFac * (x))\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, stSpc, xLim1, xLim2, bRad, r, a, x;\n  bool topFlr, botFlr;\n  p.xz = Rot2Cs (p.xz, twrCs);\n  r = length (p.xz) - twrRad;\n  a = 2. * pi * ((floor (6. * atan (p.x, - p.z) / (2. * pi)) + 0.5) / 6.);\n  stSpc = SZ(6.);\n  xLim1 = abs (dot (p.xz, sin (a + vec2 (0.5 * pi, 0.)))) - SZ(22.);\n  xLim2 = xLim1 + SZ(16.);\n  bRad = SZ(0.35);\n  topFlr = (cIdV == 2. * nFlr - 1.);\n  botFlr = (cIdV == 0.);\n  dMin = dstFar;\n  if (topFlr) {\n    d = length (max (abs (vec2 (p.y + 0.5 * szFlr.w, r + szFlr.z + stSpc)) -\n       vec2 (0.5 * szFlr.w, szFlr.z), 0.));\n    DMIN (idFlr);\n    d = max (length (vec2 (p.y + SZ(0.4), abs (r + szFlr.z + stSpc - SZ(0.5))) -\n       (szFlr.z - SZ(0.1))) - bRad, - xLim2);\n    DMIN (idRl);\n  }\n  d = max (length (max (abs (vec2 ((topFlr ? - p.y : abs (p.y)) - flSpc,\n     r - 0.4 * (szFlr.z + stSpc))) - vec2 (szFlr.w, 1.4 * (szFlr.z + stSpc)), 0.)), - xLim1);\n  DMIN (idFlr);\n  d = max (length (max (abs (vec2 (p.y + szFlr.w, r)) - vec2 (szFlr.w,\n     2. * szFlr.z + stSpc + SZ(0.5)), 0.)), xLim2);\n  DMIN (idFlr);\n  p.zx = Rot2D (p.zx, a);\n  p.z = abs (p.z) - twrRad;\n  for (float sz = -1.; sz <= 1.; sz += 2.) {\n    if (! topFlr || sz < 0.) {\n      q.x = abs (p.x) - szFlr.x;\n      q.yz = p.yz - sz * vec2 (szFlr.y - szFlr.w, - (szFlr.z + stSpc));\n      d = abs (q.y) - (szFlr.y - szFlr.w - SZ(0.005));\n      q.xy = vec2 (q.x + sz * q.y, - sz * q.x + q.y) / sqrt2;\n      x = mod (q.x, SZ(sqrt2));\n      d = max (max (max (q.y - min (x, SZ(sqrt2) - x), abs (q.z) - szFlr.z),\n         - SZ(1.) - q.y), d);\n      DMIN (idStr);\n    }\n  }\n  d = max (length (vec2 (p.y + flSpc - SZ(4.), abs (r - szFlr.z) -\n     (2. * szFlr.z + stSpc - SZ(0.8)))) - bRad, - xLim1);\n  DMIN (idRl);\n  d = max (length (vec2 (p.y - SZ(3.5), abs (r - SZ(0.4)) -\n     (2. * szFlr.z + stSpc - SZ(0.1)))) - bRad, xLim2);\n  DMIN (idRl);\n  q = vec3 (abs (p.x) - szFlr.x - SZ(4.), p.y + 0.5 * flSpc,\n     abs (p.z - (szFlr.z + stSpc)) - szFlr.z);\n  d = max (length (vec2 ((q.x + q.y) / sqrt2, q.z)) - bRad,\n     abs (abs (p.x) - szFlr.x) - SZ(8.));\n  DMIN (idRl);\n  q.xz = vec2 (abs (p.x) - szFlr.x + SZ(4.), abs (p.z + szFlr.z + stSpc) - szFlr.z);\n  if (! botFlr) {\n    d = max (length (vec2 ((q.x - (p.y + 1.5 * flSpc)) / sqrt2, q.z)) - bRad,\n       abs (abs (p.x) - szFlr.x) - SZ(8.));\n    DMIN (idRl);\n  }\n  if (! topFlr) {\n    d = max (length (vec2 ((q.x - (p.y - 0.5 * flSpc)) / sqrt2, q.z)) - bRad,\n       abs (abs (p.x) - szFlr.x) - SZ(8.));\n    DMIN (idRl);\n  }\n  q.x = abs (p.x) - SZ(22.);\n  d = min (length (vec2 (q.x, p.y + flSpc - SZ(4.))),\n     length (vec2 (abs (p.x) - SZ(6.), p.y - SZ(3.5)))) - bRad;\n  d = max (d, max (abs (p.z) - (2. * szFlr.z + stSpc), szFlr.z - abs (abs (p.z) -\n     (szFlr.z + stSpc))));\n  DMIN (idRl);\n  q.yz = vec2 (p.y + flSpc - SZ(2.5), abs (abs (p.z) - (szFlr.z + stSpc)) - szFlr.z);\n  d = PrCapsDf (q.xzy, SZ(0.7), SZ(2.));\n  DMIN (idStn);\n  if (! topFlr) {\n    d = length (vec2 (q.x, p.z)) - SZ(0.8);\n    DMIN (idCln);\n  }\n  d = PrCapsDf (vec3 (abs (p.x) - SZ(6.), p.y - SZ(2.5), q.z).xzy, SZ(0.7), SZ(2.));\n  DMIN (idStn);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d, eps, sy;\n  eps = 0.0005;\n  dHit = eps;\n  if (rd.y == 0.) rd.y = 0.001;\n  for (int j = 0; j < 220; j ++) {\n    p = ro + dHit * rd;\n    p.y -= vShift;\n    cIdV = floor (p.y / bSizeV);\n    sy = (bSizeV * (cIdV + step (0., rd.y)) - p.y) / rd.y;\n    d = abs (sy) + eps;\n    if (cIdV >= 0. && cIdV < 2. * nFlr) {\n      p.y = p.y - bSizeV * (cIdV + 0.5);\n      d = min (ObjDf (p), d);\n    }\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  p.y -= vShift;\n  cIdV = floor (p.y / bSizeV);\n  p.y -= bSizeV * (cIdV + 0.5);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, sunCol, p;\n  float ds, fd, att, attSum, d, sd, a, tCloud;\n  rd.y = abs (rd.y);\n  a = atan (rd.x, - rd.z);\n  if (rd.y < 0.02 * Fbm1 (32. * a) + 0.005) {\n     col = mix (0.5 * vec3 (0.4, 0.5, 0.7), vec3 (0.6, 0.4, 0.4),\n        0.5 + 0.5 * dot (normalize (rd.xz), - normalize (sunDir.xz))) *\n        (1. - 0.3 * Fbm2 (128. * vec2 (a, rd.y)));\n  } else {\n    tCloud = -0.05 * tCur;\n    p = rd * (100. - ro.y) / rd.y;\n    p.xz += tCloud * vec2 (1.);\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;\n    p.xz += 0.1 * tCur;\n    att = Fbm2 (p.xz);\n    attSum = att;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    attSum *= 0.3;\n    att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n    sunCol = vec3 (1., 0.8, 0.7) * pow (sd, 1024.) +\n       vec3 (1., 0.4, 0.2) * pow (sd, 256.);\n    col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n       max (rd.y - 0.1, 0.))) + 0.3 * sunCol;\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  }\n  return col;\n}\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 t;\n  float wFreq, wAmp, tWav, ht;\n  tWav = 0.5 * tCur;\n  wFreq = 1.;\n  wAmp = 1.;\n  ht = 0.8 * (1. + sin (length (p) - 3. * tCur));\n  p *= 0.1;\n  for (int j = 0; j < 3; j ++) {\n    p *= qRot;\n    t = tWav * vec2 (1., -1.);\n    t4 = (p.xyxy + t.xxyy) * wFreq;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    ht += wAmp * dot (pow (1. - sqrt (v4.xz * v4.yw), vec2 (8.)), vec2 (1.));\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return ht;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec3 vn;\n  vec2 e;\n  e = vec2 (max (0.1, 0.001 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy),\n     WaveHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col;\n  float dstObj, dstWat, nDotS;\n  bool watRefl, isBg;\n  watRefl = false;\n  isBg = true;\n  bSizeV = 2. * flSpc;\n  dstObj = ObjRay (ro, rd);\n  dstWat = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  if (dstWat < min (dstObj, dstFar)) {\n    watRefl = true;\n    ro += dstWat * rd;\n    rd = reflect (rd, WaveNf (ro, dstWat));\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == idFlr) {\n      col4 = vec4 (0.7, 0.4, 0.2, 0.1);\n      if (vn.y > 0.99) col4 *= 0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.05,\n         mod (0.5 * length (ro.xz) / SZ(1.), 1.));\n    } else if (idObj == idStr) {\n      col4 = vec4 (0.6, 0.3, 0.2, 0.1);\n    } else if (idObj == idRl) {\n      col4 = vec4 (0.7, 0.7, 0.9, 0.4);\n    } else if (idObj == idStn) {\n      col4 = vec4 (0.9, 0.9, 0.1, 0.4);\n    } else if (idObj == idCln) {\n      col4 = vec4 (0.6, 0.8, 0.6, 0.2);\n    }\n    nDotS = max (dot (vn, sunDir), 0.);\n    if (idObj != idFlr && idObj != idStr) nDotS *= nDotS;\n    col = col4.rgb * (0.2 + 0.8 * nDotS) +\n       col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    isBg = false;\n  } else if (! watRefl && rd.y < 0.) {\n    watRefl = true;\n    ro += dstWat * rd;\n    rd = reflect (rd, WaveNf (ro, dstWat));\n  }\n  if (isBg) col = BgCol (ro, rd);\n  if (watRefl) col = mix (mix (vec3 (0., 0.15, 0.), vec3 (0., 0.1, 0.1),\n     smoothstep (0.4, 0.6, Fbm2 (0.5 * ro.xz))), 0.8 * col, 1. - pow (abs (rd.y), 4.));\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.04 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 1. * pi * mPtr.y;\n  } else {\n    az -= 2.5 * pi * sin (0.002 * pi * tCur);\n  }\n  el = clamp (el, -0.3 * pi, -0.01 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  zmFac = 2.;\n  szFac = 0.25;\n  szFlr = SZ(vec4 (14., 8.5, 4., 0.5));\n  flSpc = 2. * szFlr.y - szFlr.w;\n  nFlr = 5.;\n  t = SmoothBump (0.25, 0.75, 0.2, mod (0.03 * tCur, 1.));\n  vShift = -0.95 * 4. * nFlr * flSpc * t;\n  twrCs = sin (pi * t * (2. * floor (mod (0.03 * tCur, 2.)) - 1.) + vec2 (0.5 * pi, 0.));\n  twrRad = SZ(60.);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 1.5 * nFlr * flSpc, -120.);\n  sunDir = normalize (vec3 (-1., 0.2, -1.));\n  dstFar = 200.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}