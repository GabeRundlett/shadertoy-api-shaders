{
    "Shader": {
        "info": {
            "date": "1721085910",
            "description": "structures and creatures",
            "flags": 32,
            "hasliked": 0,
            "id": "4flyWH",
            "likes": 53,
            "name": "Subatomics",
            "published": 3,
            "tags": [
                "abstract"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "\n// Subatomics\n// 2024-07-16 Leon Denise\n\n// Revisiting \"Taste of Noise 12\"\n// https://shadertoy.com/view/7sGSW3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\nfloat gyroid (vec3 p) { return dot(cos(p),sin(p.yzx)); }\n\nfloat jump(float time, float curve)\n{\n    return pow(fract(time), curve) + floor(time);\n}\n\n#define repeat(p,r) (mod(p,r)-r/2.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// Subatomics\n// 2024-07-16 Leon Denise\n\n// Revisiting \"Taste of Noise 12\"\n// https://shadertoy.com/view/7sGSW3\n\n// global variable\nfloat delay = 6.;\nfloat bounces;\nvec3 rng;\n\nfloat fbm(vec3 p) {\n    float result = 0., a = .5;\n    for (float i = 0.; i < 3.; ++i) {\n        p += result*.5;\n        result += ((gyroid(p/a))*a);\n        a /= 2.;\n    }\n    return result;\n}\n\nfloat fbm2(vec3 p) {\n    float result = 0., a = .5;\n    for (float i = 0.; i < 3.; ++i) {\n        p += result*.5;\n        result += ((gyroid(p/a))*a);\n        a /= 2.;\n    }\n    return result;\n}\n\n// geometry\nfloat map (vec3 p)\n{\n    float scene = 1000.;\n    float shape = 1000.;\n    vec3 q = p;\n    \n    // times\n    float t = floor(iTime/delay)*78.;\n    float j = t+rng.x*.002;\n    \n    vec3 rngt = hash31(t);\n    \n    // parameters\n    vec3 angle = vec3(1,2,3)+j;\n    float range = .5;\n    float size = .2;\n    \n    // random falloffs\n    float var = mix(1.2, 1.5, rngt.x);\n    float vaa = 1.7;\n    float vas = mix(1.3, 1.5, rngt.z);\n    \n    // kaleidoscopic iterated function\n    const float count = 8.;\n    float ar = 1., aa = 1., as = 1.0;\n    for (float index = 0.; index < count; ++index)\n    {\n        \n        // rotate\n        p.xz *= rot(angle.y/aa);\n        p.yz *= rot(angle.x/aa);\n        p.xy *= rot(angle.z/aa);\n        // fold\n        p.x = abs(p.x)-range*ar;\n        \n        // combine\n        scene = min(scene, length(p)-size*as);\n        \n        // falloff\n        ar /= var;\n        aa /= vaa;\n        as /= vas;\n    }\n    \n    vec3 qq = abs(fract(q*10.)-.5)*2.;\n    float s = length(qq)+fbm(q*8.);\n    scene += abs(fract(abs(s)*2.)-.5)*.01;\n    \n    // lines\n    p += fbm(q*4.)*.05;\n    shape = min(length(p.xy), length(p.xz));\n    shape = min(shape, length(p.zy));\n    shape -= .002;\n    scene = min(shape, scene);\n    return scene;\n}\n\nvec3 color (vec3 pos, vec3 ray, vec3 normal)\n{    \n    // lighting\n    vec3 rf = reflect(ray, normal);\n    vec3 backlight = vec3(0.1) * sqrt(dot(rf, vec3(0,0,1))*0.5+0.5);\n    vec3 specular = vec3(1) * pow(dot(rf, normalize(vec3(0,1,0)))*0.5+0.5,10.);\n    vec3 color = backlight + specular*.5;\n\n    // brighten up reflections\n    color *= 2.+bounces*1.;\n\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    \n    // reset color\n    fragColor = vec4(0,0,0,1);\n    \n    // white noise\n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    \n    // blue noise scroll https://www.shadertoy.com/view/tlySzR\n    ivec2 pp = ivec2(fragCoord);\n    pp = (pp+(int(iFrame)+196)*ivec2(113,127)) & 1023;\n    rng = texelFetch(iChannel1,pp,0).xyz;\n    \n    // blur edges\n    vec3 rng3 = rng;//hash33(seed+78.);\n    vec2 dof = vec2(cos(rng3.x*6.28),sin(rng3.x*6.28))*rng3.y;\n    uv += dof*pow(length(uv), 8.0)*rng3.z*.2;\n    \n    // camera coordinates\n    vec3 eye = vec3(.5,1,-3.);\n    vec3 at = vec3(0);\n    vec3 z = normalize(at-eye);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = cross(x, z);\n    vec3 ray = normalize(z * 1.5 + uv.x * x + uv.y * y);\n    vec3 pos = eye + ray * (rng3.z*2.);\n    \n    // normalized random direction by Blackle (https://suricrasia.online/demoscene/functions/)\n    rng3 = normalize(tan(rng3*2.-1.));\n    \n    // raymarching\n    const float count = 30.;\n    float total = 0.;\n    bounces = 0.;\n    for (float index = 0.; index < count; ++index)\n    {\n        // volume estimation\n        float dist = map(pos);\n        if (dist < 0.001)\n        {\n            // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n            vec2 off=vec2(0.001,0);\n            vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n\n            // coloring\n            float shade = 1.-index/count;\n            fragColor.rgb += color(pos, ray, normal) * shade / (1.+bounces);\n            \n            // reflection\n            if (++bounces > 1.) break;\n            ray = reflect(ray, normal);\n            ray = normalize(ray + rng3);\n            dist = 0.01;\n            total = 0.;\n        }\n        \n        // dithering\n        dist *= 0.9 + .1 * rng.z;\n        \n        // depth of field\n        total += dist;\n        ray += 0.03*smoothstep(2.,6.,total) * rng3;\n        \n        // ray march\n        pos += ray * dist;\n    }\n    \n    // temporal fade\n    vec4 frame = texture(iChannel0, gl_FragCoord.xy/iResolution.xy);\n    fragColor.rgb = max(fragColor.rgb, frame.rgb);\n    \n    // animation fade\n    fragColor.rgb *= smoothstep(1., .95, fract(iTime/delay));\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Minimal Temporal Anti Aliasing\n// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 frame = texture(iChannel0, uv);\n    vec3 color = frame.rgb;\n    \n    // blue noise scroll https://www.shadertoy.com/view/tlySzR\n    ivec2 pp = ivec2(fragCoord);\n    pp = (pp+(int(iFrame))*ivec2(113,127)) & 1023;\n    vec3 dither = texelFetch(iChannel2,pp,0).xyz;\n    uv += 1.*(dither.xy-.5)/iResolution.xy;\n    \n    vec3 temporal = texture(iChannel1, uv).rgb;\n    \n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) / iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}