{
    "Shader": {
        "info": {
            "date": "1686060442",
            "description": "Very simple implementation of Perlin Noise",
            "flags": 0,
            "hasliked": 0,
            "id": "DtGSD1",
            "likes": 1,
            "name": "Basic Perlin Noise Test",
            "published": 3,
            "tags": [
                "noise",
                "perlin"
            ],
            "usePreview": 0,
            "username": "BaldPolnareff",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "vec2 randomVector(vec2 gridCorner){\n    float x = dot(gridCorner, vec2(127.1, 311.7));\n    float y = dot(gridCorner, vec2(269.5, 183.3));\n    vec2 gradient = vec2(x, y);\n    gradient = sin(gradient) * 43758.5453123;\n    gradient = sin(gradient + iTime);\n    return gradient;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 black = vec3(0.0);\n    vec3 white = vec3(1.0);\n    vec3 color = black;\n\n    // setting up a grid of cells \n    uv *= 8.0;\n    vec2 gridId = floor(uv);\n    vec2 gridUv = fract(uv);\n\n    // finding the corners of each grid\n    vec2 bl = gridId + vec2(0.0, 0.0);\n    vec2 br = gridId + vec2(1.0, 0.0);\n    vec2 tl = gridId + vec2(0.0, 1.0);\n    vec2 tr = gridId + vec2(1.0, 1.0);\n\n    // finding the random gradient vectors for each grid corner\n    vec2 blGradient = randomVector(bl);\n    vec2 brGradient = randomVector(br);\n    vec2 tlGradient = randomVector(tl);\n    vec2 trGradient = randomVector(tr);\n\n    // finding the distance from current pixel to each grid corner\n    vec2 blDist = gridUv - vec2(0.0, 0.0);\n    vec2 brDist = gridUv - vec2(1.0, 0.0);\n    vec2 tlDist = gridUv - vec2(0.0, 1.0);\n    vec2 trDist = gridUv - vec2(1.0, 1.0);\n\n    // finding the dot product of each distance vector and gradient vector\n    float blDot = dot(blDist, blGradient);\n    float brDot = dot(brDist, brGradient);\n    float tlDot = dot(tlDist, tlGradient);\n    float trDot = dot(trDist, trGradient);\n\n    // smoothing the gridUv\n    gridUv = smoothstep(0.0, 1.0, gridUv);\n\n    // interpolating the dot products\n    float b = mix(blDot, brDot, gridUv.x);\n    float t = mix(tlDot, trDot, gridUv.x);\n    float perlin = mix(b, t, gridUv.y);\n    \n\n    color = vec3(.2* perlin, .8 * perlin, perlin);\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}