{
    "Shader": {
        "info": {
            "date": "1690208884",
            "description": "little animation",
            "flags": 0,
            "hasliked": 0,
            "id": "ddSfDc",
            "likes": 14,
            "name": "little animation",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "animation"
            ],
            "usePreview": 1,
            "username": "jorge2017a2",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "//por jorge flores,p.\n//24-jul-2023\n//little animation\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(5.0*antialiasing(1.0),b,d)\n#define PI 3.141516\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nfloat sdCircle( vec2 p, float r )\n{return length(p) - r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\ncolOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.001,0.0));\nreturn colOut;\n}\nvec3 DrawFigBordeCoL(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\nvec3  brazo00_izq(vec2 p ,vec3 col  )\n{\nvec2 pos, med;\nvec2 pr;\nfloat d1, d2,d3,d4,d5;\nfloat dfin, ang;\nvec3 colc;\n \npos=vec2(6.65,1.74);\nmed=vec2(0.15,0.2);\nd1=sdBox(p-pos,med); \n\npos =vec2(6.76,2.21);\nmed =vec2(0.17,0.4);\nang=10.0 * PI / 180.0 ;\npr=Rotate(p - pos ,med,ang);\nd3=sdEllipse(pr,med);\n dfin=unionSDF(d1,d3);\n\n\npos=vec2(6.69,2.05);\nmed=vec2(0.17,0.32);\n \nang=10.0 * PI / 180.0 ;\nmed=vec2(0.17,0.32);\npr=Rotate(p -pos ,med,ang);\nd5=sdEllipse(pr,med);\n \n dfin=unionSDF(dfin,d5);\n col=DrawFigBorde(vec3(1.0 ),col,dfin);\n col=DrawFigBorde(colc,col,abs(dfin)- 0.01);\n return col;\n} \n \nvec3  brazo00_der(vec2 p ,vec3 col)\n{ \n vec2 pos, med;\n float d2,dfin;\n vec3 colc;\n \n pos=vec2(7.83,1.76);\n med=vec2(0.15,0.2);\n d2=sdBox(p - pos,med);\nfloat d6;\npos=vec2(7.81,2.19) ;\nmed=vec2(0.15,0.32) ;\nd6=sdEllipse(p - pos ,med);\n\ndfin=unionSDF(d2,d6 );\n float d7 ;\n    pos=vec2(7.85,2.01);\n    med=vec2(0.15,0.32);\n\n    d7=sdEllipse(p - pos ,med);\n    dfin=unionSDF(dfin,d7);\n \n col=DrawFigBorde(vec3(1.0 ),col,dfin );\n col=DrawFigBorde(colc,col,abs(dfin)- 0.01);\n \n return col;\n} \n \nvec3  Comida00(vec2 p,vec3 col)\n{ \n vec2 pos, med;\n float d1,d2, dfin;\n vec3 colc;\n pos=vec2(7.19,2.46);\n med=vec2(0.5,0.4);\n \n \n    d1=sdEllipse (p - pos,med);\n    // --------- ;\n    pos =vec2(7.19,2.24);\n    med =vec2(0.525,0.2);\n \n d2=sdBox (p-pos,med);\n dfin=unionSDF(d1 ,d2);\n col=DrawFigBorde(vec3(1.0 ),col,dfin);\n col=DrawFigBorde(colc,col,abs(dfin)- 0.01);\n return col;\n} \n \nvec3  cabeza00(vec2 p ,vec3 col)\n{\n vec2 pos, med;\n float d1, d2,d3,d4,d5,d6;\n float r4,r5;\n vec2 p4, p5;\n vec3 colc;\n\n// cabeza ;\npos=vec2(6.74,3.12);\nmed=vec2(0.8,1.05);\nd1=sdEllipse(p - pos,med);\ncol=DrawFigBorde(vec3(1.0),col,d1) ;\n\n// ojo izq ;\npos=vec2(6.8,3.04);\nmed=vec2(0.07,0.14);\nfloat ang ;\nvec2 pr;\nang=10.0 * PI / 180.0 ;\nmed=vec2(0.07,0.14);\npr=Rotate (p- pos,med,ang);\nd2=sdEllipse(pr,med );\ncol=DrawFigBorde (colc,col,abs(d2)-0.01) ;\n\n// ojo derecho ;\npos=vec2(7.26,3.04);\nmed=vec2(0.07,0.13);\nang=10.0 * PI / 180.0;\nmed=vec2(0.07,0.13);\npr=Rotate(p- pos ,med,ang);\nd3=sdEllipse(pr,med);\ncol=DrawFigBorde(colc,col, abs(d3)-0.01);\n\n // -----------Boca ;\npos=vec2(6.9,2.61);\nmed=vec2(0.35,0.05);\nd4=sdBox(p- pos,med);\ncol=DrawFigBorde(colc,col,d4);\n \nreturn col ;\n}\n\n\nvec3 cuerpo(vec2 p, vec3 col)\n{\n//cuerpo\nvec2 pos=vec2(7.05,1.76);\nvec2 med=vec2(1.25,0.64);\nfloat d5=sdEllipse(p-pos,med);\ncol=DrawFigBorde(vec3(0.8 ),col,d5);\nreturn col;\n}\n \nvec3  Cejas(vec2 p,vec3 col)\n{\nvec2 pc1p1, pc1p2,pc1p3;\nvec2 pc2p1, pc2p2,pc2p3;\nvec2 pc3p1,pc3p2,pc3p3;\nvec2 pc4p1,pc4p2,pc4p3;\nvec2 pc5p1,pc5p2,pc5p3;\n \nfloat d1,d2,d3,d4,d5;\nvec3 colc;\n \npc1p1=vec2(6.24,3.49);\npc1p2=vec2(6.37,3.65);\npc1p3=vec2(6.52,3.57);\n\npc2p1=vec2(6.78,3.5);\npc2p2=vec2(6.89,3.64);\npc2p3=vec2(7.0,3.53);\nd1=sdBezier(p,pc1p1,pc1p2,pc1p3);\nd2=sdBezier(p,pc2p1,pc2p2,pc2p3);\ncol=DrawFigBorde(colc,col,d1 ); //ceja izq\ncol=DrawFigBorde(colc,col,d2);//ceja der\nreturn col ;\n}\n\n\n\nvec3  Boca01(vec2 p,vec3 col)\n{\nvec2 pc1p1, pc1p2,pc1p3;\nvec2 pc2p1, pc2p2,pc2p3;\nvec2 pc3p1,pc3p2,pc3p3;\nvec2 pc4p1,pc4p2,pc4p3;\nvec2 pc5p1,pc5p2,pc5p3;\n \nfloat d1,d2,d3,d4,d5;\nvec3 colc;\n \n \npc3p1=vec2(6.58, 2.78); \npc3p2=vec2(6.6, 2.65);\npc3p3=vec2(6.54, 2.56);\n \npc4p1=vec2(6.73, 2.79);\npc4p2=vec2(6.71, 2.66);\npc4p3=vec2(6.8, 2.52 );\n\npc5p1=vec2(6.56,2.66 );\npc5p2=vec2(6.64,2.73 );\npc5p3=vec2(6.72,2.67 );\n \nd3=sdBezier(p,pc3p1,pc3p2,pc3p3);\nd4=sdBezier(p,pc4p1,pc4p2,pc4p3);\nd5=sdBezier(p,pc5p1,pc5p2,pc5p3);\ncol=DrawFigBorde(colc,col,d3);//cachete 1\ncol=DrawFigBorde(colc,col,d4); //cachete 2\ncol=DrawFigBorde(colc,col,d5); //boca\nreturn col ;\n}\n\nvec3  cabeza01 (vec2 p ,vec3 col )\n{\nvec2 pos,med;\nfloat d1, d2, d3;\nvec3 colc=vec3(0.0);\n // cabeza ;\npos=vec2(6.4 ,3.18);\nmed=vec2(0.85,0.95);\nd1=sdEllipse (p-pos, med);\n \n//ojo izq\npos=vec2(6.44,3.23);\nmed=vec2(0.05,0.13);\nd2=sdEllipse (p- pos, med);\n\n// ojo der ;\npos=vec2(6.93,3.28);\nmed=vec2(0.05,0.12);\nd3=sdEllipse(p-pos,med);\n \n col=DrawFigBorde(vec3(1.0) ,col,d1);\n col=DrawFigBorde(colc ,col,abs(d2)- 0.01);\n col=DrawFigBorde(colc ,col,abs(d3)- 0.01);\n \nreturn col;\n}\n\n\nvec3 brazosyComida(vec2 uv, vec3 col )\n{\n col = brazo00_der( uv , col ) ;\n col = Comida00( uv, col ) ;\n col = brazo00_izq( uv , col ) ;\n return col;\n}\n\n\nvec3 cabeza03(vec2 p, vec3 col)\n{\nvec3 colc=vec3(0.0);\nvec2 p1=vec2(6.34,3.28);\nvec2 med1=vec2(0.8,1.0);\nfloat d1=sdEllipse(p-p1,med1);\n\n\nvec2 p2=vec2(6.41,3.28);\nvec2 med2=vec2(0.06,0.13);\nfloat d2=sdEllipse(p-p2,med2);\n\n\nvec2 p3=vec2(6.88,3.31);\nvec2 med3=vec2(0.05,0.13);\nfloat d3=sdEllipse(p-p3,med3);\n\ncol=DrawFigBorde(vec3(1.0),col,d1);\ncol=DrawFigBorde(colc ,col,abs(d2)- 0.01);\ncol=DrawFigBorde(colc ,col,abs(d3)- 0.01);\n    return col;\n}\n\n\nvec3 cejasYBoca03(vec2 p,vec3 col)\n{\nvec2 pc1p1=vec2(6.240,3.520);\nvec2 pc1p2=vec2(6.310,3.680);\nvec2 pc1p3=vec2(6.450,3.590);\n\nvec2 pc2p1=vec2(6.760,3.530);\nvec2 pc2p2=vec2(6.820,3.670);\nvec2 pc2p3=vec2(6.980,3.550);\n\nvec2 pc3p1=vec2(6.400,2.960);\nvec2 pc3p2=vec2(6.380,2.790);\nvec2 pc3p3=vec2(6.270,2.730);\n\nvec2 pc4p1=vec2(6.760,2.900);\nvec2 pc4p2=vec2(6.700,2.840);\nvec2 pc4p3=vec2(6.780,2.760);\n\nvec2 pc5p1=vec2(6.410,2.870);\nvec2 pc5p2=vec2(6.560,2.910);\nvec2 pc5p3=vec2(6.740,2.850);\n\n\nfloat d1=sdBezier(p,pc1p1,pc1p2,pc1p3);\nfloat d2=sdBezier(p,pc2p1,pc2p2,pc2p3);\nfloat d3=sdBezier(p,pc3p1,pc3p2,pc3p3);\nfloat d4=sdBezier(p,pc4p1,pc4p2,pc4p3);\nfloat d5=sdBezier(p,pc5p1,pc5p2,pc5p3);\n\ncol=DrawFigBorde(vec3(0.0),col,d1);\ncol=DrawFigBorde(vec3(0.0),col,d2);\ncol=DrawFigBorde(vec3(0.0),col,d3);\ncol=DrawFigBorde(vec3(0.0),col,d4);\ncol=DrawFigBorde(vec3(0.0),col,d5);\nreturn col;\n\n}\n\nvec3 cabeza04(vec2 p, vec3 col)\n{\n//CABEZA\n    vec2 pos=vec2(6.33,3.27);\n    vec2 med=vec2(0.8,1.0);\n    float d1=sdEllipse(p-pos,med);\n    col=DrawFigBorde(vec3(1.0),col,d1);\n    \nvec2 p2=vec2(6.41,3.28);\nvec2 med2=vec2(0.06,0.13);\nfloat d2=sdEllipse(p-p2,med2);\n    col=DrawFigBorde(vec3(1.0),col,abs(d2)-0.01);\n\nvec2 p3=vec2(6.88,3.31);\nvec2 med3=vec2(0.05,0.13);\nfloat d3=sdEllipse(p-p3,med3);\n    col=DrawFigBorde(vec3(1.0),col,abs(d3)-0.01);    \n    return col;\n}\n\nvec3 Boca04(vec2 p, vec3 col)\n{\nvec2 pc3p1=vec2(6.270,2.970);\nvec2 pc3p2=vec2(6.680,2.800);\nvec2 pc3p3=vec2(7.030,3.000);\n\nvec2 pc4p1=vec2(6.430,2.890);\nvec2 pc4p2=vec2(6.660,2.820);\nvec2 pc4p3=vec2(6.910,2.910);\n\nfloat d3=sdBezier(p,pc3p1,pc3p2,pc3p3);\nfloat d4=sdBezier(p,pc4p1,pc4p2,pc4p3);\n\ncol=DrawFigBorde(vec3(0.0),col,d3);\ncol=DrawFigBorde(vec3(0.0),col,d4);\n     return col;\n}\n\nvec3 cejasy04(vec2 p, vec3 col)\n{\nvec2 pc1p1=vec2(6.220,3.530);\nvec2 pc1p2=vec2(6.280,3.720);\nvec2 pc1p3=vec2(6.450,3.600);\n\nvec2 pc2p1=vec2(6.760,3.560);\nvec2 pc2p2=vec2(6.820,3.700);\nvec2 pc2p3=vec2(6.970,3.580);\n\nfloat d1=sdBezier(p,pc1p1,pc1p2,pc1p3);\nfloat d2=sdBezier(p,pc2p1,pc2p2,pc2p3);\n\ncol=DrawFigBorde(vec3(0.0),col,d1);\ncol=DrawFigBorde(vec3(0.0),col,d2);\n     return col;\n}\n\n\n\nvec3 boca05(vec2 p, vec3 col)\n{\nvec2 pos=vec2(6.70,2.72);\nvec2 med=vec2(0.30,0.2);\nfloat d1= sdBox(p-pos, med );\nfloat ang = 9.0 * PI / 180.0;\nvec2 pr = Rotate(p- pos, med/2.0, ang);\nd1 = sdBox(pr, med);\ncol = DrawFigBorde(vec3(0.0), col, d1);\nreturn col;\n}\n\nvec3 rostro(vec2 uv, vec3 col )\n{ \n float fx=fract(iTime*0.2);\n \n if(fx<0.2)\n {\n  col=cuerpo(uv ,col); //bien\n  col = cabeza00(uv,col);\n  col=Cejas(uv-vec2(0.35,-0.1) , col ) ;\n  col=brazosyComida( uv,col);\n    \n }\n else if(fx<0.4)\n  { \n   col=cuerpo(uv ,col) ;\n     col = cabeza01(uv,col); \n     col=Cejas( uv, col) ;\n     col=Boca01( uv, col) ;\n     col=brazosyComida( uv-vec2(0.0,-0.25),col); \n  }\n  else if(fx<0.6)\n  {\n      col=cuerpo(uv ,col); //bien\n      col= cabeza03(uv,col);\n      col=brazosyComida( uv,col);\n      col=cejasYBoca03( uv,col);\n  }\n else if(fx<0.8)\n {\n  col=cuerpo(uv ,col); \n   col=cabeza04(uv,col);\n   col=Boca04(uv,col);\n   col=cejasy04(uv,col);\n   col=brazosyComida( uv,col);\n }\n else \n {\n   col=cuerpo(uv ,col); \n   col=cabeza04(uv,col);\n   col=cejasy04(uv,col);\n   col=boca05(uv,col);\n   col=brazosyComida( uv,col);\n }\n \n return col;\n}\n\nfloat N21(vec2 p)\n{ return fract(sin(p.x * 100. + p.y * 6574.) * 5647.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(-3.25,-1.25);\n    uv*=2.0;\n    vec3 col=vec3(0.99,0.81,0.74);\n    col=mix(col, vec3(0.0), N21(uv*0.05));\n    col= rostro(uv,col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//iQ\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}