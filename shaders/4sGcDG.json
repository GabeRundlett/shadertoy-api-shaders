{
    "Shader": {
        "info": {
            "date": "1523050358",
            "description": "Little animation inspired from @motions_work : https://twitter.com/motions_work/status/977509125016842240",
            "flags": 0,
            "hasliked": 0,
            "id": "4sGcDG",
            "likes": 18,
            "name": "l o a d i n g",
            "published": 3,
            "tags": [
                "loading",
                "easing"
            ],
            "usePreview": 1,
            "username": "zlnimda",
            "viewed": 977
        },
        "renderpass": [
            {
                "code": "/* ----------------\n*\tzlnimda wrote this file and is under license CC-BY-SA-4.0 \n* \t( see legal notice: https://creativecommons.org/licenses/by-sa/4.0/legalcode )\n/* ----------------\n* \tAnimation of loading\n*/\nprecision highp float;\n\n// AA\n#define\tLOW_RPX\t(20./max(iResolution.x,iResolution.y))\n\n#define RATIO\t(iResolution.x/iResolution.y)\n#define FONT_R\t(16.)\n#define FONT_S\t(1./FONT_R)\n\nconst float M_PI = 3.1415926535897932384626433832795;\n\nconst vec4\tYELOW  = vec4(vec3(0xD3, 0xE7, 0x14) / vec3(0xFF), 1.);\nconst vec4 \tRED    = vec4(vec3(0xFF, 0x38, 0x67) / vec3(0xFF), 1.);\nconst vec4\tBLUE   = vec4(vec3(0x46, 0x2D, 0xFE) / vec3(0xFF), 1.);\nconst vec4\tCYAN   = vec4(vec3(0x09, 0xDE, 0xAF) / vec3(0xFF), 1.);\nconst vec4 \tWHITE  = vec4(1.);\nconst vec4 \tBBLACK = vec4(0., 0., 0., 1.);\n\n\nvec2 rot(vec2 uv, float a)\n{\n    return (mat2(cos(a), -sin(a), sin(a), cos(a)) * mat2(RATIO, 0., 0., 1.)) * uv;\n}\n\n// almost signed dist sq\nvec2 sdsq(vec2 uv, vec2 o, vec2 s, float a)\n{\n    // handle angle & ratio\n    uv = rot(o - uv, a);\n    return s/2.0 - abs(uv);\n}\n\n\n// almost signed dist sp\nfloat sdsp(vec2 uv, vec2 o, float s)\n{\n    // handle angle & ratio\n    uv = o - uv;\n    return length(uv) - s*.5;\n}\n\n// text\nvec4 tx(vec2 uv, vec2 o, float s, float c, float a)\n{\n    // italic weird, keep ratio\n    mat2 rot = mat2(cos(a), 0., -sin(a), 1.) * mat2(RATIO, 0., 0., 1.);\n    uv = rot * (o - uv);\n    vec2 d = s/2.0 - abs(uv);\n    vec2 texCoord = -1.*uv/s+vec2(.5);\n    vec2 offset = vec2(mod(c, FONT_R), -1.-floor(c / FONT_R)) * FONT_S;\n    vec4 f = textureGrad(iChannel0, texCoord*FONT_S + offset, dFdx(uv/16.),dFdy(uv/16.));\n    \n    return mix(vec4(0.0), smoothstep(.5,.485,f.wwww)*f.x, step(0.0, min(d.x, d.y)));\n}\n\n// sq color\nvec4 sq(vec2 uv, vec2 o, vec2 s, vec4 c, float a)\n{\n    // AA\n    s *= 1.+LOW_RPX;\n    vec2 d = sdsq(uv, o, s, a);\n    // AA\n    float dd = min(d.x, d.y);\n    vec3 rc = mix(vec3(.0), c.xyz,\n               // step(.0, dd)\n                clamp(smoothstep(.0, LOW_RPX, dd) / LOW_RPX, .0, 1.)\n              );\n    return vec4(rc, mix(.0, c.a, step(.0, dd)));\n}\n\n// sp color\nvec4 sp(vec2 uv, vec2 o, float s, vec4 c)\n{\n    // AA\n    s *= 1.+LOW_RPX;\n    float d = sdsp(uv, o, s);\n    //return mix(c, vec4(0.0), step(0.0, d));\n    \n    // AA\n    vec3 rc = mix(c.xyz, vec3(.0),\n               // step(.0, dd)\n                clamp(smoothstep(.0, LOW_RPX, d) / LOW_RPX, .0, 1.)\n              );\n    return vec4(rc, mix(c.a, .0, step(.0, d)));\n}\n\nvec4 loading(vec2 uv, vec2 o, float s)\n{\n    vec4 c;\n    float off = 0.;\n    const float d = 0.42;\n    o -= vec2(3.5 *s*d, .0);\n    c += tx(uv, o+vec2((off       ), 0.), s, 108., .0);\n    c += tx(uv, o+vec2((off += s*d), 0.), s, 111., .0);\n    c += tx(uv, o+vec2((off += s*d), 0.), s, 097., .0);\n    c += tx(uv, o+vec2((off += s*d), 0.), s, 100., .0);\n    c += tx(uv, o+vec2((off += s*d), 0.), s, 105., .0);\n    c += tx(uv, o+vec2((off += s*d), 0.), s, 110., .0);\n    c += tx(uv, o+vec2((off += s*d), 0.), s, 103., .0);\n    return c;\n}\n\nfloat BezierDeg4(float p0, float p1, float p2, float p3, float t)\n{\n    // bezier formula following bernstein Bez(t) = E(i->n)Bern(t).Pi with t=[0,1]\n    return p0*pow(1.-t, 3.) + p1*3.*t*pow(1.-t, 2.) + p2*3.*t*t*(1.-t) + p3*t*t*t;\n}\n\nfloat easingBezier(vec2 r, vec2 p0, vec2 p1, float t)\n{\n    t = BezierDeg4(0., p0.x, p1.x, 1., t);\n    return BezierDeg4(r.x, p0.y, p1.y, r.y, t);\n}\n\nfloat easingInOutBack(float t)\n{\n    return easingBezier(vec2(0., 1.), vec2(0.265, -0.55), vec2(0.68, 1.55), t);\n}\n\nvec4 anim(vec2 uv, float t, vec4 c, float i)\n{\n    float ta = t + i *0.03 * mix(-1., 1., step(.5, t));\n    ta = mix(1.-easingInOutBack(ta*2.),\n            easingBezier(vec2(0., 1.), vec2(0.1, 0.75), vec2(0.67, 3.6), (ta-.5)*2.),\n            step(.5, ta));\n    vec2 s = vec2(ta * .25, .015);\n    float e = step(1.8, ta);\n    return sq(uv, vec2(s.x*.5, s.y*i*4.)/RATIO, s, mix(WHITE, c, e), .0)\n        + e * sp(uv, vec2(.315, s.y*i*2.3), .011, c);\n}\n\nvec4 drawsq(vec2 uv, float t, vec4 c)\n{\n    vec4 ec;\n    ec += anim(uv, t, c, 0.);\n    ec += anim(uv, t, c, 1.);\n    ec += anim(uv, t, c, 2.);\n    return ec;\n}\n\nvec4 animDrawSq(vec2 uv, float t)\n{\n    vec4 c;\n    vec2 uvfk;\n    float r = easingInOutBack(t)+.125;\n    \n    const vec2 off  = vec2(.0, .030);\n    const vec2 cent = vec2(.5, .55);\n    uvfk = rot(uv-cent + off, r *2.* M_PI) - off;\n    c += drawsq(uvfk, t, YELOW);\n    uvfk = rot(uv-cent + off, (r + 0.25) *2.* M_PI) - off;\n    c += drawsq(uvfk, t, CYAN);\n    uvfk = rot(uv-cent + off, (r + 0.50) *2.* M_PI) - off;\n    c += drawsq(uvfk, t, BLUE);\n    uvfk = rot(uv-cent + off, (r + 0.75) *2.* M_PI) - off;\n    c += drawsq(uvfk, t, RED);\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = mod(iTime, 2.)/2.;\n    \n    vec4 c;\n    \n    c += animDrawSq(uv, t);\n    \n    const float stp = 20.;\t\t// 20 step\n    const float dt = 5./60.; \t// 5 frames\n    float mm = 1.;\n    for (float it = 1.; it < stp; ++it)\n    {\n        float imp = it/stp;\n        imp = pow(1.-imp, 7.);\n    \tc += animDrawSq(uv, t-dt*(it/stp)) * imp;\n        mm += imp * imp;\n    }\n    c /= mm;\n    \n    // txt independant\n    c += loading(uv, vec2(.5, .1), .1);\n    \n    fragColor = c;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}