{
    "Shader": {
        "info": {
            "date": "1487769631",
            "description": "Improving the post processing of my monte carlo renderer with some Kawase bloom. The bloom stores multiple passes in a single buffer, processed on successive frames.\nInspired by: https://www.artstation.com/artist/paulpepera",
            "flags": 32,
            "hasliked": 0,
            "id": "ldlcDn",
            "likes": 11,
            "name": "Docking Spacecraft",
            "published": 3,
            "tags": [
                "postprocessing",
                "bloom",
                "spaceship",
                "radiosity",
                "bidirectionalmontecarlo"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 1517
        },
        "renderpass": [
            {
                "code": "// Hazel Quantock 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\nconst float phi = 1.61803398875;\n\nvec2 blurTileDim = vec2(3,3);\n\nvec2 Rand( in float seed )\n{\n    vec2 r = fract( vec2( 37.*sin(phi*seed), 31.*sin(seed/phi) ) + seed/1024.);\n    return fract( r + .5);\n}\n\nvec2 Rand( in int seed, in int roll )\n{\n    return Rand( float(seed)*(1.+phi/(1.+float(roll))) );\n}\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    int pass = 0;//iFrame; // don't need animated noise when rendering a still image\n    int pixelSeed = int( Rand( pass, 0 ) * 256. ) + pass*61 + int(fragCoord.x) + 1023*int(fragCoord.y);\n    \n    vec2 dither = Rand( pixelSeed, 0 );\n    \n\tfragColour = texture(iChannel0,fragCoord/iResolution.xy);\n    fragColour /= fragColour.a;\n\n\tvec4 bloom = texture(iChannel1,(fragCoord/iResolution.xy)/blurTileDim\n\t\t+ vec2(2,2)/blurTileDim); // change this according to resolution\n    if ( bloom.a > .0 )\n    {\n\t    bloom /= bloom.a;\n//        bloom = pow(bloom,vec4(2));\n\t    fragColour = mix( fragColour, bloom, .05 );\n    }\n    \n    // HDR\n    const float a = 8.; // exposure\n    const float p = 1.; // top curve - 1. = very smooth, higher = more squashed\n    const float r = 1.; // overflow - 1. = no clipping, higher => more clipping\n    const float d = .5; // desaturation of bright colours\n    fragColour.a = dot(fragColour.rgb,vec3(2,4,1)/7.);\n    fragColour.rgb = mix( fragColour.rgb, fragColour.aaa, fragColour.a*d );\n    fragColour = r*pow(1.-1./(1.+pow(a*fragColour/r,vec4(p))),vec4(1./p));\n    \n\tfragColour = pow(fragColour,vec4(1./2.2)) + dither.xxxx/255.;\n    fragColour.a = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hazel Quantock 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n// Docking Spaceship\n// Inspired by Paul Pepera's artwork: https://www.artstation.com/artist/paulpepera\n\nconst int DEPTH = 3; // trace depth - longest path is 2*DEPTH+1\n\nconst float tau = 6.28318530717958647692;\nconst float phi = 1.61803398875;\n\nvec2 Rand( in float seed )\n{\n\t// line artefacts get worse as seed gets higher => rand isn't the problem\n//    seed /= 100.;\n    // concentrates more at the edges\n//    vec2 r = vec2( fract(37*sin(phi*seed)), fract(31*sin(seed/phi)) );\n\n\t// offsetting by a procession = almost perfect!\n    vec2 r = fract( vec2( 37.*sin(phi*seed), 31.*sin(seed/phi) ) + seed/1024.);\n    \n    return fract( r + .5);  // offset to make edge biases more visible\n}\n\n\n// generate a unique seed \nvec2 Rand( in int seed, in int roll )\n{\n    return Rand( float(seed)*(1.+phi/(1.+float(roll))) );\n}\n\n\nvec3 SphereRand( in int seed, in int roll )\n{\n    vec2 a = Rand(seed,roll);\n    \n    a.x = a.x*2.-1.;\n    a.x = sign(a.x)*(1.-sqrt(1.-abs(a.x))); // this is not the perfect distribution\n    a.x *= tau/4.;\n    a.y *= tau;\n    \n    return vec3(cos(a.x)*sin(a.y),-sin(a.x),cos(a.x)*cos(a.y));\n}\n\nvec3 HemisphereRand( in int seed, in int roll, in vec3 dir )\n{\n    vec3 r = SphereRand(seed,roll);\n    \n    return r*(step(.0,dot(r,dir))*2.-1.);\n}\n\n//todo, multiple light sources...\n/*struct LightSource {\n    vec3 pos;\n    float radius;\n    vec3 col;\n    float strength; // proportion of rays launched from this source\n};*/\n\nconst vec3 lightPos = normalize(vec3(1,1.05,2.75))*900.; // the further this is the fewer rays will hit caustics\nconst vec3 lightSourceCol = vec3(4);\nconst vec3 skyCol = vec3(0); // .001 looks too bright! Amazing.\n\n// I can't do emissive at present, so centre sky dome on light source and adjust its colour to compensate for light colour\nconst float skyRadius = 1000.;\n\nvec3 camTarget = vec3(0);\nvec3 camPos = vec3(1,-1,-7);\nfloat camZoom = 1.;\n\nfloat Box( in vec3 pos, in vec3 p0, in vec3 p1 )\n{\n    vec3 centre = (p0+p1)*.5;\n    vec3 dims = abs(p0-p1);\n    vec3 box = abs(pos-centre) - dims/2.;\n    return max(max(box.x,box.y),box.z);\n}\n\nfloat Ship( in vec3 pos )\n{\n//    return length(pos)-2.;\n    vec3 pos2 = pos;\n    pos2.z = max(.0,abs(pos2.z)-1.);\n    vec2 pos22 = vec2( max(length(pos2.xz)-1.6,.0), pos2.y );\n    float f = length(pos22)-1.;\n    \n//    f -= min(abs(cos(pos.x*tau)),abs(cos(pos.z*tau/3.)))*.1;\n    f -= abs(cos(pos.x*tau))*.1;\n    \n    return .8*min(f,length(pos-vec3(0,.5,-1.5))-1.2);\n}\n\nvec3 ShipTransform( vec3 pos )\n{\n    pos -= vec3(2,-.5,3);\n    \n    vec3 rot = vec3(-.4,-.2,-.1); //pitch, yaw, roll (radians) - applied roll then pitch then yaw - left hand screw rule\n    \n/*this is the inverse, because we're transforming rays not the object\n    vec2 d = vec2(-1,1);\n    pos.xy = pos.xy*cos(rot.z)+sin(rot.z)*d*pos.yx;\n    pos.yz = pos.yz*cos(rot.x)+sin(rot.x)*d*pos.zy;\n    pos.zx = pos.zx*cos(rot.y)+sin(rot.y)*d*pos.xz;*/\n    \n    vec2 d = vec2(1,-1);\n    pos.zx = pos.zx*cos(rot.y)+sin(rot.y)*d*pos.xz;\n    pos.yz = pos.yz*cos(rot.x)+sin(rot.x)*d*pos.zy;\n    pos.xy = pos.xy*cos(rot.z)+sin(rot.z)*d*pos.yx;\n    \n    return pos;\n}\n\nfloat Bay( in vec3 pos )\n{\n    return max(\n        \tlength(pos-vec3(-15,15,0))-24.,\n        \t-(length(pos.xy)-5.)\n        ) - .02*abs(sin(pos.z*9.)+sin(pos.y*9.));\n}\n\n\nfloat SDF( in vec3 pos )\n{\n    // sky dome\n    float f = -(length(pos-lightPos)-skyRadius);\n    \n\tf = min( f, Ship(ShipTransform(pos)) );\n\n\tf = min( f, Bay(pos) );\n\n\treturn f;\n}\n\nvec3 BRDF( out float specular, in vec3 toCam, in vec3 toLight, in vec3 normal, in vec3 pos, in vec2 rand )\n{\n    // map materials to scene\n    \n    float power = 5.;\n    vec2 reflectance = vec2(0);\n    vec3 albedo = vec3(.95);\n    float metallicity = .0;\n\n    if ( length(pos-lightPos)-skyRadius >= -.001  )\n    {\n        vec3 sp = (pos-lightPos)/skyRadius;\n        \n        albedo = skyCol;\n        \n        albedo /= lightSourceCol; \n        reflectance = vec2(0);\n    }\n    else if ( Ship(ShipTransform(pos)) < .001 )\n    {\n        vec3 uvw = ShipTransform(pos)-vec3(0,0,-1.5);\n        //float pattern = cos(uvw.x*tau);\n        float r = length(uvw.xz);\n        float pattern = 1.8-r;\n        pattern = max(pattern,.25-abs(uvw.z-.125));\n        pattern = max(pattern,.25+.5*step(.0,uvw.z)-abs(uvw.x));\n        pattern = min(pattern,r-1.05);\n        albedo = mix( vec3(.95,.1,0), vec3(.95), step(.0,pattern) );\n        \n        // windows\n        albedo = mix( vec3(.02), albedo, step(.0,\n                                              max(\n                                                  abs(r-.8)-.2,\n                                                  .1-abs(abs(uvw.x)+uvw.z-.0)\n                                              )\n                                             ) );\n    }\n\n    \n    // shading\n  \tfloat ndoti = dot(normal,toCam);\n    \n    float fresnel = mix( reflectance.x, reflectance.y, pow( 1.-ndoti, 5. ) );\n\n    if ( true )//rand.x >= fresnel )\n    {\n        specular = -1.;;\n    \treturn albedo * max(.0,dot(toLight,normal));\n    }\n    else\n    {\n        specular = power;\n        return mix( vec3(1), albedo, metallicity );\n    }\n    \n//\treturn mix( albedo * max(.0,dot(toLight,normal)), vec3(spec), fresnel );\n}\n\nvec3 Bounce( in vec3 i, in vec3 n, in float power, in int seed, in int roll )\n{\n    vec3 h = HemisphereRand(seed,roll,n);\n    \n    //h = normalize( mix( n, h, roughness ) );\n    \n    vec3 hnn = dot(h,n)*n;\n    vec3 hperp = h - hnn;\n    h = normalize( hnn + normalize(hperp) * pow( length(hperp), power ) );\n    \n/*    if ( dot(h,i) > .0 )\n    {\n        // it's not obvious, but I think this is right: (It's gone midnight as I write this)\n        //h = reflect(reflect(h,i),n); - nope\n        h = -reflect(h,n); // pretty sure about this one...\n    }*/\n    \n    return reflect(i,h);\n}\n\n\nvec3 Normal( in vec3 pos )\n{\n    vec2 d = vec2(-1,1)*.0001;\n    vec3 ignore; float ignore2;\n    return normalize(\n        SDF(pos+d.xxx)*d.xxx +\n        SDF(pos+d.yyx)*d.yyx +\n        SDF(pos+d.yxy)*d.yxy +\n        SDF(pos+d.xyy)*d.xyy\n    );\n}\n\n\nvec3 Trace( in vec3 pos, in vec3 dir )\n{\n    const float e = .001;\n    const float e2 = e*2.;\n    \n    // try to push ray start out of an object\n    float t = .0;\n    \n    float h = SDF( pos );\n    if ( h < e2 )\n    {\n        vec3 n = Normal(pos);\n\t\tt += (e2-h)/max(.01,dot(dir,n));\n// think ^ this is screwing up shallow-angle reflections\n    }\n    \n    for ( int i=0; i < 500; i++ )\n    {\n        h = SDF( pos+dir*t );\n        t += h;\n        if ( h < .001 ) break;\n    }\n    \n    return pos+dir*t;\n}\n\n\nfloat TestTrace( in vec3 from, in vec3 to )\n{\n    // try to push ray start out of an object\n    float t = max( .1-SDF( from ), .0 );\n    \n    float d = .001;\n    \n    float tEnd = length(to-from) - d;\n    \n    vec3 dir = normalize(to-from);\n        \n    for ( int i=0; i < 100; i++ )\n    {\n        float h = SDF( from+dir*t );\n        t += h;\n        if ( h < d || t > tEnd ) break;\n    }\n    \n    return step( tEnd, t );\n}\n\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    int pass = iFrame;\n//    int pixelSeed = pass + 121*int(fragCoord.x) + 1023*int(fragCoord.y);\n    int pixelSeed = int( Rand( pass, 0 ) * 256. ) + pass*61 + int(fragCoord.x) + 1023*int(fragCoord.y);\n    \n    vec2 jitter = Rand( pixelSeed, 0 );\n    \n    vec3 ray;\n    ray.xy = (fragCoord.xy+(jitter-.5)*1.-iResolution.xy*.5)/iResolution.y;\n//    if ( max(abs(ray.x),abs(ray.y)) > .5 ) discard;\n    \n    vec3 pos = camPos;\n    vec3 target = camTarget;\n    ray.z = camZoom;\n\n    // depth of field\n    pos += SphereRand(pixelSeed,20)*.01;\n    \n    ray = normalize(ray);\n\n    vec3 forward = normalize(target-pos);\n    vec3 right = normalize(cross(vec3(0,1,0),forward));\n    vec3 up = cross(forward,right);\n    ray = ray.x*right + ray.y*up + ray.z*forward;\n\t\n    \n    // point light, fire ray in random direction\n    vec3 lightRay = SphereRand(pixelSeed,1);\n    \n\n    const int N = DEPTH;\n    vec3 viewIntersections[N], lightIntersections[N];\n    vec3 viewNormal[N], lightNormal[N];\n    vec3 viewCol[N], lightCol[N];\n    \n    viewIntersections[0] = Trace( pos, ray );\n    lightIntersections[0] = Trace( lightPos, lightRay );\n    viewNormal[0] = Normal(viewIntersections[0]);\n    lightNormal[0] = Normal(lightIntersections[0]);\n\n    vec3 lastViewDir = ray;\n    vec3 lastLightDir = lightRay;\n    vec3 viewDir = HemisphereRand(pixelSeed,0,viewNormal[0]);\n    vec3 lightDir = HemisphereRand(pixelSeed,1,lightNormal[0]);\n\n    float specular;\n    viewCol[0] = BRDF( specular, -lastViewDir, viewDir, viewNormal[0], viewIntersections[0], Rand(pixelSeed,20) );\n    if ( specular >= .0 ) viewDir = Bounce( lastViewDir, viewNormal[0], specular, pixelSeed, 30 );\n    lightCol[0] = lightSourceCol * BRDF( specular, lightDir, -lastLightDir, lightNormal[0], lightIntersections[0], Rand(pixelSeed,21) );\n    if ( specular >= .0 ) lightDir = Bounce( lastLightDir, lightNormal[0], specular, pixelSeed, 31 );\n\n    for ( int i=1; i < N; i++ )\n    {\n    \tviewIntersections[i] = Trace( viewIntersections[i-1], viewDir );\n    \tlightIntersections[i] = Trace( lightIntersections[i-1], lightDir );\n    \tviewNormal[i] = Normal(viewIntersections[i]);\n    \tlightNormal[i] = Normal(lightIntersections[i]);\n\n        lastViewDir = viewDir;\n        lastLightDir = lightDir;\n        viewDir = HemisphereRand(pixelSeed,2*i+0,viewNormal[i]);\n        lightDir = HemisphereRand(pixelSeed,2*i+1,lightNormal[i]);\n\n        viewCol[i] = viewCol[i-1] * BRDF( specular, -lastViewDir, viewDir, viewNormal[i], viewIntersections[i], Rand(pixelSeed,22) );\n\t    if ( specular >= .0 ) viewDir = Bounce( lastViewDir, viewNormal[i], specular, pixelSeed, 32+i*2 );\n        lightCol[i] = lightCol[i-1] * BRDF( specular, lightDir, -lastLightDir, lightNormal[i], lightIntersections[i], Rand(pixelSeed,23) );\n\t    if ( specular >= .0 ) lightDir = Bounce( lastLightDir, lightNormal[i], specular, pixelSeed, 33+i*2 );\n    }\n\n    // connect every light intersection (including source) with every view intersection (excluding source)\n    vec3 col = vec3(0);\n    vec3 lastViewPos = pos;\n    vec3 lastViewCol = vec3(1,1,1);\n    for ( int i=0; i < N; i++ )\n    {\n        vec3 toView = normalize(lastViewPos - viewIntersections[i]);\n        float weight = 1./min(float(1+i),float(2*N-i)); // divide by the number of rays which have this many bounces\n        float shadow = TestTrace( viewIntersections[i], lightPos );\n        vec3 cold = weight * lastViewCol * lightSourceCol * BRDF( specular, toView, normalize(lightPos-viewIntersections[i]), viewNormal[i], viewIntersections[i], Rand(pixelSeed,24) ) * shadow;\n        if ( specular < .0 ) col += cold;\n\n        vec3 lastLightPos = lightPos;\n        vec3 lastLightCol = lightSourceCol;\n        for ( int j=0; j < N; j++ )\n        {\n            weight = 1./min(float(2+i+j),float(2*N-1-i-j)); // divide by the number of rays which have this many bounces\n            shadow = TestTrace( viewIntersections[i], lightIntersections[i] );\n\n            vec3 toLight = normalize(lightIntersections[i]-viewIntersections[i]);\n            vec3 lightColHere = lastLightCol * BRDF( specular, -toLight, normalize(lastLightPos-lightIntersections[i]), lightNormal[i], lightIntersections[i], Rand(pixelSeed,25) );\n            if ( specular >= .0 ) lightColHere = vec3(0);\n    \n            cold = weight * lastViewCol * lightColHere * BRDF( specular, toView, toLight, viewNormal[i], viewIntersections[i], Rand(pixelSeed,27) ) * shadow;\n            if ( specular < .0 ) col += cold;\n            \n/*            // light bleed hack (for photons)\n            if ( abs(dot(viewNormal[i],toLight)) < .01 )\n            {\n            \tcol += lastLightCol * smoothstep( .3, .0, length(lightIntersections[i]-viewIntersections[i]) );\n            }*/\n            \n            lastLightPos = lightIntersections[i];\n            lastLightCol = lightCol[j];\n        }\n        \n        lastViewPos = viewIntersections[i];\n        lastViewCol = viewCol[i];\n    }\n\n//col = vec3(exp2(-length(pos - viewIntersections[0])));\n    \n\tfragColour = texture(iChannel0,fragCoord/iResolution.xy);\n\n    if ( pass == 0 || ( iMouse.x != .0 && iMouse.x == iMouse.z ) ) fragColour = vec4(0);\n\n    fragColour.rgb += col;\n    fragColour.a += 1.;\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Hazel Quantock 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n// multi-stage kawase bloom, using a pipeline of buffers!\n// buffer 1: downsample scene\n// buffers 1-n: ping-pong bloom\n// this gives us WAY more blur than I actually want, but that's good!\n\nvec2 blurTileDim = vec2(3,3);\n\nvec2 sat( vec2 a )\n{\n    return clamp(a,.01,.99);\n}\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    vec2 uv = blurTileDim*(fragCoord/iResolution.xy);\n    vec2 tile = floor(uv);\n    uv -= tile;\n    \n    int pass = int(tile.x*blurTileDim.y+tile.y);\n    \n    float r;\n    if ( pass == 0 )\n    {\n        r = 1.;\n        \n        vec2 d = r*vec2(-1,1);\n        // todo: clamp!\n        fragColour  = texture( iChannel0, uv+d.xx/iResolution.xy );\n        fragColour += texture( iChannel0, uv+d.xy/iResolution.xy );\n        fragColour += texture( iChannel0, uv+d.yx/iResolution.xy );\n        fragColour += texture( iChannel0, uv+d.yy/iResolution.xy );\n        fragColour /= 4.;\n    }\n    else\n    {\n        // multi-pass\n        int lastPass = pass-1;\n        vec2 lastTile;// = vec2(pass/int(s.y),mod(pass,int(s.y)));\n        lastTile.x = float(lastPass/int(blurTileDim.y));\n        lastTile.y = float(lastPass)-blurTileDim.y*lastTile.x;\n        \n        r = float(pass)-.5;\n\n        vec2 d = r*vec2(-1,1);\n        // todo: clamp!\n        fragColour  = texture( iChannel1, (sat(uv+(d.xx+.5)*blurTileDim/iResolution.xy)+lastTile)/blurTileDim );\n        fragColour += texture( iChannel1, (sat(uv+(d.xy+.5)*blurTileDim/iResolution.xy)+lastTile)/blurTileDim );\n        fragColour += texture( iChannel1, (sat(uv+(d.yx+.5)*blurTileDim/iResolution.xy)+lastTile)/blurTileDim );\n        fragColour += texture( iChannel1, (sat(uv+(d.yy+.5)*blurTileDim/iResolution.xy)+lastTile)/blurTileDim );\n        fragColour /= 4.;\n        fragColour = mix( fragColour,\n                         texture( iChannel1, (sat(uv+.5*blurTileDim/iResolution.xy)+lastTile)/blurTileDim ),\n                         .15 );\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}