{
    "Shader": {
        "info": {
            "date": "1639648981",
            "description": "Mausolea = plural of mausoleum (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "ftcSWS",
            "likes": 16,
            "name": "Mausolea",
            "published": 3,
            "tags": [
                "building",
                "lightcone",
                "mausoleum"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "// \"Mausolea\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrConCylDf (vec3 p, vec2 cs, float r, float h);\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h);\nfloat Maxv2 (vec2 p);\nfloat Minv2 (vec2 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 qHit, sunDir, lmpPos[3];\nvec2 gId, nSub, rfCs, lmpCs[3];\nfloat dstFar, tCur, bWid, bHt, trHt, gSize, lmpRot[3], lmpAz;\nint idObj;\nbool isDark;\nconst int idFlr = 1, idRf = 2, idWall = 3, idCol = 4, idLit = 5, idPlat = 6, idRoad = 7, \n   idTree = 8, idMvLmp = 9;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid SetBldParm ()\n{\n  vec2 h;\n  h = Hashv2v2 (73.11 * gId + 0.1);\n  bWid = (0.15 + 0.1 * h.x) * gSize;\n  bHt = bWid * (0.75 + 0.25 * h.y);\n  if (h.y < 0.05) bHt = 0.;\n  trHt = 0.5 + 0.5 * bHt / (0.25 * gSize);\n  rfCs = sin (0.1 * (1. + bHt) * pi + vec2 (0.5 * pi, 0.));\n  h = Hashv2v2 (13.1 * gId + 0.1);\n  nSub = 1. + step (0.33, h) + 2. * step (0.67, h);\n}\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q, ss;\n  vec2 bw;\n  float dMin, d, db, w, h;\n  dMin = dstFar;\n  q = p;\n  q.xz -= gSize * (gId + 0.5);\n  q.y -= 0.01;\n  d = PrRoundBoxDf (q, vec3 (vec2 (0.4075 * gSize), 0.01).xzy - 0.002 * gSize, 0.002 * gSize);\n  DMINQ (idPlat);\n  d = trHt * PrConCapsDf (vec3 ((abs (q.xz) - 0.39 * gSize) / trHt, q.y / trHt - 0.11),\n     sin (0.06 * pi + vec2 (0.5 * pi, 0.)), 0.03, 0.06);\n  DMINQ (idTree);\n  if (bHt > 0.) {\n    h = 2. * bHt / (nSub.x + nSub.y);\n    w = bWid / max (nSub.x, nSub.y);\n    q.y -= h + 0.005;\n    q.xz = mix (q.xz, abs (q.xz) - 0.2 * gSize, step (1.5, nSub));\n    q.xz = mix (q.xz, abs (q.xz) - 0.1 * gSize, step (2.5, nSub));\n    bw = bWid / nSub;\n    db = PrRoundBox2Df (q.xz, bw + 0.25 * w - 0.001 * w, 0.001 * w);\n    ss = vec3 (abs (q.xz) - 1.25 * bw, q.y - 1.05 * h).xzy;\n    d = abs (q.y + 0.95 * h) - 0.04 * h;\n    d = SmoothMax (d, db, 0.005);\n    DMINQ (idFlr);\n    d = (nSub.x != nSub.y) ? max (- ss.y - 0.1 * h,\n       dot (((nSub.x > nSub.y) ? ss.yx : ss.yz), rfCs)) : max (max (- ss.y - 0.1 * h,\n       dot (ss.yx, rfCs)), max (- ss.y - 0.1 * h, dot (ss.yz, rfCs)));\n    d = SmoothMax (d, db, 0.005);\n    DMINQ (idRf);\n    d = max (PrRoundBox2Df (q.xz, bw - 0.25 * w - 0.001 * w, 0.001 * w), abs (q.y) - h);\n    DMINQ (idWall);\n    d = min (PrCapsDf (vec3 (q.x, q.y - 0.6 * h, abs (q.z) - bw.y + 0.22 * w).yzx, 0.03 * w, 0.2 * w),\n       PrCapsDf (vec3 (abs (q.x) - bw.x + 0.22 * w, q.y - 0.6 * h, q.z), 0.03 * w, 0.2 * w));\n    DMINQ (idLit);\n    q.xz = mod (q.xz + 0.25 * w, 0.5 * w) - 0.25 * w;\n    d = max (PrCylDf (q.xzy, 0.1 * w, h), db);\n    DMINQ (idCol);\n  }\n  q = p;\n  d = q.y;\n  DMINQ (idRoad);\n  return dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 gIdP;\n  float dHit, d, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  rdi.xz = 1. / rd.xz;\n  gIdP = vec2 (-999.);\n  eps = 0.001;\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 240; j ++) {\n    p = ro + dHit * rd;\n    gId = floor (p.xz / gSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetBldParm ();\n    }\n    d = GObjDf (p);\n    dHit += min (d, eps + max (0., Minv2 ((gSize * (gId + step (0., rd.xz)) - p.xz) * rdi.xz)));\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat GObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    p = ro + d * rd;\n    gId = floor (p.xz / gSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetBldParm ();\n    }\n    h = GObjDf (p);\n    sh = min (sh, smoothstep (0., 0.2 * d, h));\n    d += max (h, 0.01);\n    if (h < 0.001 || d > dMax) break;\n  }\n  idObj = idObjT;\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p - lmpPos[0];\n  q.y -= 0.07 - lmpPos[0].y;\n  q.yz = Rot2D (q.yz, -0.05 * pi);\n  q.xz = Rot2D (q.xz, lmpRot[0] + lmpAz);\n  q.z = - q.z;\n  d = PrConCylDf (q, sin (0.05 * pi + vec2 (0.5 * pi, 0.)), 0.01, 0.01);\n  DMINQ (idMvLmp);\n  q = (p - lmpPos[1]).xzy;\n  d = PrConCylDf (q, lmpCs[1], 0.03, 0.02);\n  DMINQ (idMvLmp);\n  q = (p - lmpPos[2]).xzy;\n  d = PrConCylDf (q, lmpCs[2], 0.03, 0.02);\n  DMINQ (idMvLmp);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0002 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (h, 0.01);\n    if (h < 0.001 || d > dMax) break;\n  }\n  idObj = idObjT;\n  return 0.7 + 0.3 * sh;\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = (p - lmpPos[1]).xzy;\n  d = PrConCylDf (q, lmpCs[1], 0.03, 1.5);\n  DMINQ (idMvLmp);\n  q = (p - lmpPos[2]).xzy;\n  d = PrConCylDf (q, lmpCs[2], 0.03, 1.5);\n  DMINQ (idMvLmp);\n  return dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShGrid (vec2 p, vec2 g, int stag)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (stag > 0 && 2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.02, 0.03, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.07 * pi * smoothstep (0.4, 0.47, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec4 ObjCol (vec3 ro, vec3 rd, inout vec3 vn)\n{\n  vec4 col4, cBld;\n  vec3 rg;\n  vec2 h;\n  bool fxz;\n  h = Hashv2v2 (39.1 * gId + 0.1);\n  cBld = vec4 (HsvToRgb (vec3 (0.7 * h.x, 0.2, 0.6 + 0.2 * h.y)), 0.1);\n  if (idObj == idFlr) {\n    col4 = cBld;\n  } else if (idObj == idRf) {\n    col4 = cBld;\n  } else if (idObj == idWall) {\n    fxz = (abs (vn.x) > 0.99);\n    rg = ShGrid ((fxz ? qHit.zy : qHit.xy) * 32., vec2 (1., 1.5), 1);\n    col4 = cBld * rg.y;\n    rg.xz *= sign (fxz ? vn.x : vn.z);\n    if (fxz) {\n      if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n      else vn.xz = Rot2D (vn.xz, rg.x);\n    } else {\n      if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n      else vn.zx = Rot2D (vn.zx, rg.x);\n    }\n  } else if (idObj == idCol) {\n    col4 = cBld;;\n  } else if (idObj == idPlat) {\n    rg = ShGrid (32. * ro.xz, vec2 (1.), 0);\n    col4 = vec4 (0.5, 0.5, 0.5, 0.1) * rg.y;\n    if (vn.y > 0.99) {\n      if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n      else vn.yx = Rot2D (vn.yx, rg.x);\n    }\n  } else if (idObj == idRoad) {\n    rg = ShGrid (16. * ro.xz, vec2 (1.), 0);\n    col4 = vec4 (0.3, 0.3, 0.35, 0.) * rg.y;\n    if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n    else vn.yx = Rot2D (vn.yx, rg.x);\n  } else if (idObj == idTree) {\n    col4 = vec4 (0.1, 0.4, 0.1, 0.);\n  } else if (idObj == idLit) {\n    col4 = vec4 (1., 1., 0.7, -1.);\n  } else if (idObj == idMvLmp) {\n    col4 = (isDark && (qHit.z < -0.002 || qHit.z > -0.002 &&\n       abs (fract (8. * atan (qHit.y, - qHit.x) / (2. * pi) + 0.5) - 0.5) < 0.15)) ?\n       vec4 (0.7, 0.7, 0.5, -1.) : vec4 (0.8, 0.8, 0.3, 0.2);\n  }\n  return col4;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  skCol = (isDark ? 0.1 : 1.) * vec3 (0.4, 0.5, 0.8);\n  if (rd.y < 0.02 * Fbm1 (128. * mod (atan (rd.x, rd.z) / (2. * pi) + 0.625, 1.))) {\n    col = 0.9 * skCol;\n  } else {\n    q = 0.02 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    if (! isDark) {\n      sd = max (dot (rd, sunDir), 0.);\n      skCol = mix (skCol, vec3 (1., 1., 0.8), step (0.1, sd) *\n         0.2 * pow (sd, 128.) + 0.8 * pow (sd, 2048.));\n    } else clCol *= 0.3;\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo, rdo, qHitG, ltPos, ltDir, ltAx;\n  vec2 vf;\n  float dstObjG, dstObj, dstTrObj, sh, a, ltDst, att;\n  int idObjG;\n  lmpCs[0] = sin (0.28 * pi + vec2 (0.5 * pi, 0.));\n  lmpCs[1] = sin (0.06 * pi + vec2 (0.5 * pi, 0.));\n  lmpCs[2] = sin (0.06 * pi + vec2 (0.5 * pi, 0.));\n  vf = vec2 (0.);\n  roo = ro;\n  rdo = rd;\n  dstObjG = GObjRay (ro, rd);\n  idObjG = idObj;\n  qHitG = qHit;\n  dstObj = isDark ? ObjRay (ro, rd) : dstFar;\n  if (dstObjG < min (dstObj, dstFar)) {\n    idObj = idObjG;\n    qHit = qHitG;\n    dstObj = dstObjG;\n  }\n  if (rd.y < 0. && min (dstObjG, dstObj) >= dstFar) {\n    dstObj = - ro.y / rd.y;\n    idObj = idRoad;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = (idObj == idObjG) ? GObjNf (ro) : ObjNf (ro);\n    col4 = ObjCol (ro, rd, vn);\n    if (idObj == idFlr || idObj == idWall) {\n      vf = vec2 (128., 0.2);\n    } else if (idObj == idCol) {\n      a = mod (16. * (atan (qHit.z, - qHit.x) / (2. * pi)), 1.);\n      vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * a * a));\n      vf = vec2 (128., 0.2);\n    } else if (idObj == idPlat) {\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idTree) {\n      vf = vec2 (256., 2.);\n    } else if (idObj == idRoad) {\n      vf = vec2 (32., 1.);\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n    if (isDark) {\n      ltPos = lmpPos[0];\n      ltAx = vec3 (0., 0., -1.);\n      ltAx.yz = Rot2D (ltAx.yz, 0.12 * pi);\n      ltAx.xz = Rot2D (ltAx.xz, - lmpRot[0] - lmpAz);\n      ltDir = ltPos - ro;\n      ltDst = length (ltDir);\n      ltDir /= ltDst;\n    } else {\n      ltDst = dstFar;\n      ltDir = sunDir;\n    }\n    sh = GObjSShadow (ro + 0.01 * vn, ltDir, ltDst);\n    if (isDark) sh = min (sh, ObjSShadow (ro + 0.01 * vn, vec3 (0., 1., 0.), ltDst));\n    if (col4.a >= 0.) {\n      if (isDark) {\n        att = smoothstep (-0.05, 0.05, dot (ltAx, ltDir) - lmpCs[0].x) *\n           step (- dot (vn, ltDir), 0.) / (1. + 0.01 * ltDst * ltDst);\n        att = min (att, sh);\n        col = col4.rgb * (0.1 + 0.1 * max (vn.y, 0.) + 0.8 * att * max (dot (vn, ltDir), 0.)) +\n           col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n        for (int k = 1; k <= 2; k ++) {\n          ltDir = lmpPos[k] - ro;\n          ltDst = length (ltDir);\n          ltDir /= ltDst;\n          ltAx = vec3 (0., 1., 0.);\n          att = smoothstep (-0.1, 0.1, dot (ltAx, ltDir) - lmpCs[k].x) *\n             step (- dot (vn, ltDir), 0.) / (1. + 0.002 * ltDst * ltDst);\n          col += att * (col4.rgb * max (dot (vn, ltDir), 0.) +\n             col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.));\n        }           \n      } else {\n        col = col4.rgb * (0.2 + 0.1 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n           0.8 * sh * max (dot (vn, sunDir), 0.)) +\n           col4.a * step (0.95, sh) * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n      }\n    } else col = col4.rgb * (0.6 - 0.4 * dot (vn, rd));\n    col = mix (col, SkyBgCol (roo, rd), smoothstep (0.5, 0.9, dstObj / dstFar));\n  } else col = SkyBgCol (ro, rd);\n  if (isDark) {\n    for (int k = 1; k <= 2; k ++) {\n      ro = roo;\n      rd = rdo;\n      dstTrObj = TrObjRay (ro, rd);\n      if (dstTrObj < min (dstObj, dstFar)) {\n        ro += dstTrObj * rd;\n        vn = TrObjNf (ro);\n        ltDst = length (lmpPos[k] - ro);\n        att = step (qHit.z, 0.) / (1. + 0.1 * ltDst * ltDst);\n        att *= max (- dot (vn, rd), 0.) * (1. - smoothstep (-0.2, -0.1, dstTrObj - min (dstObj, dstFar)));\n        if (att > 0.) col = mix (col, vec3 (1., 1., 0.8) * (1. + 16. * pow (Fbm2 (1024. *\n           vec2 (dot (qHit.yx, sin (atan (rd.z, - rd.x) + vec2 (0.5 * pi, 0.))),\n           qHit.z - 0.1 * tCur)), 16.)), 0.15 * att);\n      }\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 TrackPath (float t)\n{ \n  vec3 p;\n  float pLen, s, cCount;\n  pLen = 2.* gSize;\n  p.y = 0.;\n  s = mod (t, 11.);\n  if (s < 7.) p.xz = (s < 4.) ? vec2 (0., s) : vec2 (s - 4., 4.);\n  else p.xz = (s < 9.) ? vec2 (3., 11. - s) : vec2 (12. - s, 2.);\n  cCount = floor (t / 11.);\n  if (mod (cCount, 2.) == 0.) p.x *= -1.;\n  else p.x -= 1.;\n  p.z += 2. * cCount;\n  p.xz *= pLen ;\n  return p;\n}\n\nvoid FlyPR (float s, out vec3 p, out float az)\n{\n  vec3 fpF, fpB, vd;\n  float ds;\n  ds = 0.05;\n  fpF = TrackPath (s + ds);\n  fpB = TrackPath (s - ds);\n  vd = fpF - fpB;\n  p = 0.5 * (fpF + fpB);\n  az = 0.5 * pi - atan (vd.z, vd.x);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 flMat, vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, mMid, ut, mSize, msw;\n  float spd, el, az, zmFac, asp, sr, tPos;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 18000.) + 30. * floor (dateCur.w / 3600.);\n  asp = canvas.x / canvas.y;\n  mSize = (1./5.) * vec2 (asp, 1.);\n  mMid = vec2 (asp, 1.) * (1. - mSize.y) * vec2 (-1., -1.);\n  ut = abs (uv - mMid) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    msw = 2. * mPtr.xy - mMid / vec2 (asp, 1.);\n    if (Maxv2 (abs (msw)) < mSize.y) {\n      regId = 1;\n      msw /= 2. * mSize.y;\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (Maxv2 (ut) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    vuId = 1;\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  isDark = (vuId == 0);\n  spd = 0.1;\n  tPos = spd * tCur;\n  gSize = 2.;\n  FlyPR (tPos + 0.1, lmpPos[0], lmpRot[0]);\n  FlyPR (tPos + 0.3, lmpPos[1], lmpRot[1]);\n  FlyPR (tPos - 0.3, lmpPos[2], lmpRot[2]);\n  lmpPos[0].y = 0.3;\n  lmpPos[1].y = 1.;\n  lmpPos[2].y = 1.;\n  FlyPR (tPos, ro, az);\n  ro.y = 0.2;\n  ro.xz += 0.001;\n  el = 0.;\n  lmpAz = 0.;\n  if (mPtr.z > 0.) {\n    lmpAz += 2. * pi * msw.x;\n    az += 2. * pi * msw.x;\n    el += 0.6 * pi * msw.y;\n  }\n  lmpAz = clamp (lmpAz, - 0.5 * pi, 0.5 * pi);\n  el = clamp (el, - 0.25 * pi, 0.25 * pi);\n  vuMat = StdVuMat (el - 0.03 * pi, az);\n  dstFar = 20.;\n  sunDir = normalize (vec3 (0.5, 1.5, -1.));\n  zmFac = 3.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (mPtr.z > 0. && Maxv2 (abs (uv)) < 0.03 && Minv2 (abs (uv)) < 0.005)\n     col = mix (col, vec3 (1., 1., 1.), 0.2);\n  if (Maxv2 (ut) < 0. && Minv2 (abs (ut)) * canvas.y < 2.) col = vec3 (0.5, 0.5, 0.1);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrConCylDf (vec3 p, vec2 cs, float r, float h)\n{\n  return max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n}\n\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h)\n{\n  vec2 b;\n  float d;\n  d = max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n  h /= cs.x * cs.x;\n  r /= cs.x;\n  b = vec2 (r, h);\n  b *= cs.y;\n  p.z += b.x;\n  return min (d, min (length (p - vec3 (0., 0., h)) - r + b.y,\n     length (p - vec3 (0., 0., - h)) - r  - b.y));\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) -\n     1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}