{
    "Shader": {
        "info": {
            "date": "1505631226",
            "description": "A shader based interpretation of the artwork of David Ortiz using the Raymarching algorithm.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xlsyzr",
            "likes": 1,
            "name": "The Plural Singularity",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "nightfox",
            "viewed": 597
        },
        "renderpass": [
            {
                "code": "float sphere(vec3 pos, float r) {\n\treturn length(pos) - r;   \n}\n\nvec3 opRep( vec3 p, vec3 c ) {\n    return mod(p,c)-0.5*c;\n}\n\nvec2 scene(vec3 p, vec3 camera) {\n    vec3 spaces = vec3(9.,6.,6.9);\n\n    p = opRep(p,spaces);\n   \n    vec2 d = vec2(sphere(p, 2.),43.17);\n\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x -= 0.3;\n    uv.y -= 0.65;\n    uv *= 2.0;\n    uv.x *= iResolution.x/iResolution.y;\n        \n    vec3 camera = vec3(0.0,0.0,3.0*iTime);\n    vec3 screen = vec3(uv.x+camera.x,uv.y+camera.y,camera.z+2.);\n    vec3 rayDirection = normalize(screen - camera);\n    \n    const int numSteps = 100;\n    const float EPSILON = 0.05;\n    \n    vec3 pos = screen;\n    vec3 color;\n    \n    vec3 ambientLight = vec3(.7);\n    vec3 light1 = vec3(10.0*sin(iTime),10.*cos(iTime),10.+camera.z);\n    \n    vec3 light1color = vec3(1.0);\n    \n    for (int step = 0; step < numSteps; step++) {\n        vec2 d = scene(pos, camera);\n        color = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(d.y-1.0) );\n\n        if (abs(d.x) < EPSILON) {\n            vec2 eps = vec2(0.0, EPSILON);\n            vec3 normal = normalize(vec3(\n    \t\tscene(pos + eps.yxx, camera).x - scene(pos - eps.yxx, camera).x,\n    \t\tscene(pos + eps.xyx, camera).x - scene(pos - eps.xyx, camera).x,\n    \t\tscene(pos + eps.xxy, camera).x - scene(pos - eps.xxy, camera).x));\n            vec3 ambience = ambientLight * color;\n            float diff = clamp(dot(normal, normalize(light1 - pos)),0.0,1.0);\n            diff *= 5.0 / dot(light1 - pos, light1 - pos);\n            vec3 diffuse = vec3(pow(diff, 0.4545));\n            float specular = clamp(pow(diffuse.y, 32.0),0.0,1.0);\n            float lightStrength = 10.;\n            float shininess = 4.;\n            \n            vec3 lights = clamp(diffuse, 0.0, 1.0) * color * lightStrength + specular * lightStrength *(shininess*light1color);\n            color = lights * light1color + ambience;\n            color = mix(color,vec3(1.0),smoothstep(20.0,90.0,pos.z-camera.z));\n            break;\n        }\n        pos += rayDirection * d.x;\n        color = vec3(1.0);\n    }\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}