{
    "Shader": {
        "info": {
            "date": "1583672328",
            "description": "visual experiment with color worms",
            "flags": 32,
            "hasliked": 0,
            "id": "wtVXDV",
            "likes": 16,
            "name": "Color rush",
            "published": 3,
            "tags": [
                "noise",
                "collision",
                "colors",
                "hue"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "#define SF 2./min(iResolution.x, iResolution.y)\n#define SS(l, s) smoothstep(SF, -SF, l - s)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;    \n    vec2 ouv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel1, ouv).xyz;    \n    \n    for (float i = 0.; i < float(COUNT); i += 1.) {\n        vec4 point = FD(i, 0);\n        \n        vec2 pos = point.xy;        \n        \n        float d = length(uv - pos)*1.5;                \n        float g = SS(d, RADIUS);                    \n        \n        col = mix(col, vec3(1.).rgb, g*.5);                       \n    }       \n\n    fragColor = texture(iChannel0, ouv);\n    fragColor = vec4(col, 0.);\n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define COUNT 122\n#define RADIUS .03\n#define SPEED .0038\n\n#define FD(x,y) texelFetch(iChannel0, ivec2(x, y), 0)\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n#define MOD3 vec3(.1031, .11369, .13787)\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz + 19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\n}\n\nfloat snoise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int x = int(fragCoord.x);\n    float fx = fragCoord.x;\n    int y = int(fragCoord.y);\n    \n    if(y > 2 || x > COUNT){\n    \tdiscard;\n    }     \n    \n    vec2 rt = vec2(iResolution.x / iResolution.y, 1.);\n    \n    if(iFrame == 1){\n        float ms = sqrt(float(COUNT));\n        float yp = floor(float(x) / ms) - ms*.45;\n        float xp = mod(float(x), ms) - ms*.45;\n        vec2 pos = (vec2(xp,yp)) * (1./ms)*.9;\n                \n        pos *= rt;                       \n                \n        vec2 dir = normalize(vec2(hash12(fragCoord*200.)*2.-1., hash12(fragCoord * 100.)*2.-1.));   \n        \n        if(y==0){\n            fragColor = vec4(pos, dir);                   \n        }\n        if(y==1){\n            fragColor = vec4(0., hash11(float(x)), 0., 0.);                   \n        }\n        \n    } else {\n        vec4 iPoint = FD(x,0);\n        vec2 pos = iPoint.xy;        \n        vec2 dir = iPoint.zw;\n                \n        \n        bool col = false;\n                                                       \n        \n        if(iPoint.x <= (-.5*rt.x + RADIUS)){\n            dir.x *= -1.;      \n            col = true;\n        }\n        if(iPoint.x >= (.5*rt.x - RADIUS)){\n            dir.x *= -1.; \n            col = true;\n        }\n        if(iPoint.y <= (-.5*rt.y + RADIUS)){\n            dir.y *= -1.;            \n            col = true;\n        }\n        if(iPoint.y >= (.5*rt.y - RADIUS)){\n            dir.y *= -1.;            \n            col = true;\n        }\n        \n        for(int i=0; i<COUNT; i+=1){\n            if(i!=x){\n                vec4 nPoint = FD(i,0);\n                vec2 nPointDir = nPoint.zw;\n                if(distance(nPoint.xy, pos) < (RADIUS*2.)){\n                    vec2 inV = normalize(nPoint.xy - pos);\n                    if(dot(dir, inV) > 0.){                    \t \n                        dir = reflect(dir, inV);                        \n                    }\n                    \n                    col = true;                    \n                }\n            }        \t\n        }\n        \n        dir = normalize(dir);\n                \n        pos += dir * SPEED \n            + vec2(\n                snoise(vec3(fx, fx*100., iTime)),\n                snoise(vec3(fx*33., fx*78., iTime))\n            )*.005;\n            // + vec2(sin(iTime*20. + hash11(float(x*25))), cos(iTime*10.  + hash11(float(x*100)))) * SPEED * .5;\n        \n        pos.x = min(max(pos.x, -.5*rt.x + RADIUS), .5*rt.x - RADIUS);\n        pos.y = min(max(pos.y, -.5*rt.y + RADIUS), .5*rt.y - RADIUS);\n        \n    \n        if(y==0){\n            fragColor = vec4(pos, dir);\n        } else if(y==1){\n            float oColFactor = FD(x,1.).y;\n            fragColor =  vec4(oColFactor + iTime*.25, oColFactor, 0, 0);\n        }       \n        \n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define COL1 vec3(24, 32, 38) / 255.0\n#define COL2 vec3(235, 241, 245) / 255.0\n\n#define SF 2./min(iResolution.x, iResolution.y)\n#define SS(l, s) smoothstep(SF, -SF, l - s)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;    \n    vec2 ouv = fragCoord/iResolution.xy;    \n    \n    float m = 0.; \n    \n    vec3 backCol = texture(iChannel1, ouv).xyz;    \n    vec3 col = backCol*.99;\n    \n    for (float i = 0.; i < float(COUNT); i += 1.) {\n        vec4 point = FD(i, 0);\n        vec4 colData = FD(i, 1);\n        \n        float pointColFactor = colData.x;        \n        \n        vec2 pos = point.xy;        \n        \n        float d = length(uv - pos);        \n        float g = SS(d, RADIUS);                \n        \n        if(g > 0.){\n        \t\n        }\n        col = mix(col, hue(pointColFactor).rgb, g);                       \n    }       \n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}