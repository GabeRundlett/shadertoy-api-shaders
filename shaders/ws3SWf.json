{
    "Shader": {
        "info": {
            "date": "1573891388",
            "description": "Inktober, but with shaders",
            "flags": 32,
            "hasliked": 0,
            "id": "ws3SWf",
            "likes": 7,
            "name": "shadetober #26 (dark)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "#define LARGE 9999999.\nfloat sdBox(vec2 p, vec2 b) {\n    // https://www.youtube.com/watch?v=62-pRVZuS5c\n    \n    // if both components are negative then distToBox becomes 0\n    // and we add in the (non-zero) negative second term\n    vec2 d = abs(p) - b;\n    vec2 clampedToExterior = max(d, 0.);\n    float distToBox = length(clampedToExterior);\n    \n    // max(dx,dy) gives us the largest component, which could be negative\n    // if both dx and dy are negative, then the min() part gives us the negative\n    // value. if either value is positive then the min part just zeroes out this\n    // term\n    float interiorDistToBox = min(max(d.x, d.y), 0.);\n    \n    return distToBox + interiorDistToBox;\n}\n\nfloat grid(vec2 p) {\n    float pad = .4;\n    float d = sdBox(p + vec2(pad, -pad), vec2(.2));\n    d = min(d, sdBox(p + vec2(-pad, pad), vec2(.2)));\n    d = min(d, sdBox(p + vec2(pad), vec2(.2)));\n    d = min(d, sdBox(p - vec2(pad), vec2(.2)));\n    return d;\n}\n\nfloat map(vec2 p) {\n    return min(grid(p + vec2(.8, .0)), grid(p - vec2(.8, .0)));\n}\n\nvec2 march(vec2 ro, vec2 rd) {\n    vec2 t = vec2(0., LARGE);\n    for(int i = 0; i < 100; i++) {\n        vec2 p = ro + rd * t.x;\n        float d = map(p);\n        t.y = min(t.y, d);\n        if (d < .0001) { return t; }\n        t.x += d;\n    }\n    return t;\n}\n\n//https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n    vec2 lp = (iMouse.xy * 2. - iResolution.xy)/iResolution.y;\n    vec2 ld = uv - lp;\n    float d2m = length(ld);\n    \n    //vec2 rdi = vec2(uv + vec2(rand(iTime), rand(iTime + 10.)));\n\t//uv += ld * pow(texture(iChannel0, rdi).r, 10.);\n\n    // some lighting\n    vec3 ld3 = normalize(vec3(ld, .1));\n    float incd = 1.-dot(-ld3, texture(iChannel1, uv).rgb);\n    \n    vec3 col = vec3(1.-d2m) * .5 * incd * texture(iChannel2, uv*.2).rgb;\n    \n    float boxDist = map(uv);\n    vec2 marchResult = march(uv, normalize(lp - uv));\n    if( d2m > marchResult.x ) { col = vec3(0.); }\n    //col = vec3(marchResult.y);\n    if( boxDist < 0.) { col = mix(.1, .0, d2m / 2.) - vec3(step(.01, abs(boxDist))); }\n    //if( boxDist < 0.) { col = vec3(.1); }\n\n    // Output to screen\n    //col *= texture(iChannel0, vec2(uv + vec2(rand(iTime), rand(iTime + 10.)) )).r * 1.;\n    //col = texture(iChannel1, uv).rgb;\n    //col = vec3(1.-d2m) * .5 * incd;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float height(vec2 uv) {\n    return texture(iChannel0, uv).r;\n}\n\nvec2 grad(vec2 uv) {\n    vec2 ep = vec2(0.01, 0.);\n    return normalize(\n        height(uv) - \n        vec2(height(uv - ep.xy), height(uv - ep.yx))\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if 0\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = normalize(vec3(-grad(uv), 1.));\n    fragColor = vec4(col, 1.0);\n    #else\n    // from https://www.shadertoy.com/view/4lfSD8\n    float pstr = 2.0;\n    \n    float tstep = 1.;\n    \n    float ux = tstep / iChannelResolution[0].x;\n    float uy = tstep / iChannelResolution[0].y;\n    \n    //\n    \n    vec2 uv[9];\n    float itn[9];\n    \n    // 0 1 2\n    // 3 4 5\n    // 6 7 8\n    \n    uv[0] = vec2(-ux, -uy);\n    uv[1] = vec2(0, -uy);\n    uv[2] = vec2(ux, -uy);\n    \n    uv[3] = vec2(-ux, 0);\n  \tuv[4] = vec2(0, 0);\n    uv[5] = vec2(ux, 0);\n    \n    uv[6] = vec2(-ux, uy);\n    uv[7] = vec2(0, uy);\n    uv[8] = vec2(ux, uy);\n    \n    for(int i = 0; i < 9; i++)\n    {\n        uv[i] += fragCoord / iChannelResolution[0].xy;\n        uv[i].y = uv[i].y;\n        vec3 col = texture(iChannel0, uv[i]).rgb;\n        itn[i] = 1.0 - (col.r + col.g + col.b) * .333333;\n    }\n    \n    float nstep = 2.0;\n   \n    float nx = (itn[2] + (nstep * itn[5]) + itn[8]) - (itn[0] + (nstep * itn[3]) + itn[6]);\n    float ny = (itn[6] + (nstep * itn[7]) + itn[8]) - (itn[0] + (nstep * itn[1]) + itn[2]);\n    \n    float hx = (itn[2] + -0.25*itn[5] + itn[8]) - (itn[0] + -0.25*itn[3] + itn[6]);\n    float hy = (itn[6] + -0.25*itn[7] + itn[8]) - (itn[0] + -0.25*itn[1] + itn[2]);\n    \n    float dx = (hx + nx) / pstr;\n    float dy = (hy + ny) / pstr;\n    \n    float dz = 1.0 / pstr;\n    \n    float dstep = 0.25;\n    fragColor = normalize(vec4(dx+dstep, dy+dstep, dz, 0.0));\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}