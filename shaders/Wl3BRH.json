{
    "Shader": {
        "info": {
            "date": "1612185430",
            "description": "menger hall",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl3BRH",
            "likes": 4,
            "name": "Simple Menger Hall",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "//Copyright (c) 2021 Butadiene\n//Released under the MIT license\n//https://opensource.org/licenses/mit-license.php\n\nprecision mediump float;\n\nuniform float time;\nuniform vec2 resolution;\n\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\n\nfloat cube(vec3 p,vec3 s){\n    vec3 q = abs(p);\n    vec3 m = max(s-q,0.);\n    return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n}\n\nfloat cube2(vec2 p,vec2 s){\n    vec2 q = abs(p);\n    vec2 m = max(s-q,0.);\n    return length(max(q-s,0.))-min(m.x,m.y);\n}\n\nfloat cube3(vec3 p,vec2 s){\n    return min(min(cube2(p.xy,s),cube2(p.yz,s)),cube2(p.zx,s));\n}\n\nvec2 pmod(vec2 p,float n){\n  float np = 3.141592*2./n;\n  float r = atan(p.x,p.y)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  return length(p)*vec2(cos(r),sin(r));\n}\n\nfloat menger(vec3 p){\n  \n  //p.y += 0.3;\n    float d0 = cube(p,vec3(10000.));\n    \n    float k =1.8;\n        \n    float s = 1.0/3.;\n    for(int i = 0;i<6;i++){\n     \n        \n        vec3 sp = mod(p-vec3(k/2.),k)-0.5*k;\n        \n        float d1 = cube3(sp,vec2(s));\n        \n        d0 = max(d0,-d1);\n        \n          k /= 3.;\n        s /= 3.;\n        \n    }\n    \n    return d0;\n}\n\nfloat dist(vec3 p){\n    p.y -= 0.21;\n    p.z -= 0.2*iTime;\n    p.xy  = pmod(p.xy,8.);\n    p.x -= -0.1;\n    float k = 0.4;\n    //p = mod(p,k)-0.5*k;\n    float d = menger(p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n     vec2 p = (uv-0.5)*2.0;\n    \n    p.y *= iResolution.y/iResolution.x;\n\n    vec3 ro = vec3(0,0,0);\n    \n    vec3 rd = normalize(vec3(p,0.5)-ro);\n    rd.yz *= rot(0.4);\n    float d,t =0.;\n    float ac = 0.;\n    for(int i = 0;i<66;i++){\n        d = dist(ro+rd*t);\n        t += d;\n        ac += 0.8*exp(-0.2*t);\n        if(d<0.0000001)break;\n    }\n\n    vec3 col = vec3(0);\n    \n    col = vec3(0.7,0.4,0.3)*ac*0.1;\n    \n    col = pow(col,vec3(1.4));\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}