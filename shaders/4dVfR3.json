{
    "Shader": {
        "info": {
            "date": "1529810999",
            "description": "Refraction mapping",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVfR3",
            "likes": 30,
            "name": "Refraction mapping",
            "published": 3,
            "tags": [
                "raymarching",
                "refraction"
            ],
            "usePreview": 0,
            "username": "setchi",
            "viewed": 1462
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592654\n\nconst float EPS = 1e-2;\nconst float EPS_N = 1e-3;\nfloat OFFSET = EPS * 300.0;\n\nfloat TIME;\n\nvec3 rotateX(vec3 p, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return vec3(p.x, c * p.y + s * p.z, -s * p.y + c * p.z);\n}\n\nvec3 rotateY(vec3 p, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return vec3(c * p.x - s * p.z, p.y, s * p.x + c * p.z);\n}\n\nvec4 permute(vec4 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    i = mod(i, 289.0);\n    vec4 p = permute(permute(permute(\n                i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n            i.y + vec4(0.0, i1.y, i2.y, 1.0)) +\n        i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 1.0 / 7.0; // N=7\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z); //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_); // mod(j,N)\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1),\n        dot(p2, x2), dot(p3, x3)));\n}\n\nfloat sdPlane(vec3 p) {\n    return p.y + 3.5;\n}\n\nfloat udBox(vec3 p, vec3 b, float r) {\n    return length(max(abs(p) - b, 0.0)) - r;\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nfloat dGlass(vec3 p) {\n    float t = TIME * 1.9;\n    float it = mod(floor(t), 4.);\n    float ft = smoothstep(0.3, 0.9, fract(t));\n    float nt = step(it, 0.) - step(it, 1.);\n\n    p.yx += snoise(p * 1. + vec3(t, -t, 0)) * sin(fract(t) * PI) * nt * 0.2;\n    float torus = sdTorus(rotateX(p, PI / 2.), vec2(.5, .2));\n    float sphere = sdSphere(p, .6);\n    float box = udBox(rotateY(rotateX(p, PI / 4.), PI / 4.), vec3(0.4), 0.05);\n\n    if (it == 0.)\n        return mix(box, sphere, ft);\n    if (it == 1.)\n        return sphere;\n    if (it == 2.)\n        return mix(sphere, torus, ft);\n    if (it == 3.)\n        return mix(torus, box, ft);\n}\n\nfloat map(vec3 p) {\n    float b = sdPlane(p);\n    float c = dGlass(p);\n    return min(b, c);\n}\n\nfloat rand(vec2 st) {\n    return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat box_size(vec2 st, float n) {\n    st = (floor(st * n) + 0.5) / n;\n    float offs = rand(st) * 5.;\n    return (1. + sin(TIME * 3. + offs)) * 0.5;\n}\n\nfloat box(vec2 st, float size) {\n    size = 0.5 + size * 0.5;\n    st = step(st, vec2(size)) * step(1.0 - st, vec2(size));\n    return st.x * st.y;\n}\n\nvec3 pattern(vec2 p) {\n    float n = 1.;\n    vec2 st = fract(p * n);\n    float size = box_size(p, n);\n    return vec3(box(st, size)) * 0.5;\n}\n\nvec2 intersect(vec3 ro, vec3 ray) {\n    float t = 0.0;\n    for (int i = 0; i < 100; i++) {\n        float res = map(ro + ray * t);\n        if (res < 0.005) return vec2(t, res);\n        t += res;\n    }\n\n    return vec2(-1.0);\n}\n\nvec3 normal(vec3 pos, float e) {\n    vec3 eps = vec3(e, 0.0, 0.0);\n\n    return normalize(vec3(\n        map(pos + eps.xyy) - map(pos - eps.xyy),\n        map(pos + eps.yxy) - map(pos - eps.yxy),\n        map(pos + eps.yyx) - map(pos - eps.yyx)));\n}\n\nmat3 createCamera(vec3 ro, vec3 ta, float cr) {\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nvec3 render(vec2 p) {\n    vec3 ro = vec3(6., 2.5, 6.);\n    vec3 ta = vec3(0);\n    mat3 cm = createCamera(ro, ta, 0.);\n    vec3 ray = cm * normalize(vec3(p, 10.0));\n\n    vec3 fresnel = vec3(0, 0, 0);\n\n    for (int i = 0; i < 2; i++) {\n        // marching loop\n        vec2 res = intersect(ro, ray);\n\n        // hit check\n        if (res.y <= -0.5) {\n            return vec3(1.0);\n        }\n        \n        vec3 pos = ro + ray * res.x;\n        vec3 nor = normal(pos, 0.008);\n\n        if (dGlass(pos) > 0.005) {\n            vec3 col = vec3(0);\n            col += pattern(pos.xz);\n            col += fresnel;\n            return col + vec3(0.001, 0.002, 0.004) * res.x;\n        }\n\n        if (i == 0 && dot(-ray, nor) < 0.5) {\n            float a = 1. - dot(-ray, nor) * 2.;\n            fresnel = mix(fresnel, vec3(0., 0.8, 0.8), a);\n        }\n\n        float eta = 0.9;\n        ray = normalize(refract(ray, nor, eta));\n        ro = pos + ray * OFFSET;\n    }\n}\n\nvec3 aaRender(vec2 p) {\n  vec3 col = vec3(0.0);\n  const int iter = 4;\n\n  for (int i = 1; i <= iter; i++) {\n    float fi = float(i);\n    vec2 offset = (vec2(step(fi, 2.), mod(fi, 2.)) - .5) * 0.0015;\n    col += render(p + offset);\n  }\n\n  return col / float(iter);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n  TIME = iTime;\n  vec3 color = aaRender(uv) + 0.2;\n  fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}