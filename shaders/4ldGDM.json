{
    "Shader": {
        "info": {
            "date": "1469720194",
            "description": "lhexagonal version of  https://www.shadertoy.com/view/4scGWf , keeping the strategy \"exactly one wall per cell\".",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldGDM",
            "likes": 14,
            "name": "hexamaze",
            "published": 3,
            "tags": [
                "2tweets",
                "maze",
                "hexagonal",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 869
        },
        "renderpass": [
            {
                "code": "// inspired from maze: https://www.shadertoy.com/view/4scGWf\n//   hexagonal tiling: https://www.shadertoy.com/view/4dKXR3\n// another strategy (bad): https://www.shadertoy.com/view/ltd3DM\n\n/**/\nvoid mainImage( out vec4 O,  vec2 U )\n{ \n    vec2 R = iResolution.xy;\n         U = (U-R/2.)/R.y -.1*iTime;           // centered coords   \n    U *= mat2(1,-1./1.73, 0,2./1.73) *24.;           // conversion to hexagonal coordinates\n   \n    float r = sin(1e5*length (ceil(U)));             // trick : [-1,-.5], [-.5,.5], [.5,1] have same weight \n    O += 20./R.y/  fract( r >.5  ? U.x : r< -.5 ? U.y : U.x+U.y ) - O; \n    //O += 20./R.y/  fract( r >.5  ? U.x : r< -.5 ? U.y : 1.-U.x-U.y ) - O;  // better math less pretty !\n    //length(fract(1.-U)) < 1./24. ? O+=2. : O;  // fill some holes\n  //O += -4.+5.*cos(3.14*fract r >.5  ? g.x : r< -.5 ? g.y : g.z ))     - O; \n  //O += .1/ abs(cos(3.14*(    r >.5  ? g.x : r< -.5 ? g.y : g.z ) ))   - O; // variants\n  //O += .1/ abs(sin(3.14*(    r >.5  ? g.x : r< -.5 ? g.y : g.z ) ))   - O; \n  //O += .1/ abs ( fract(      r >.5  ? g.x : r< -.5 ? g.y : g.z ) -.5) - O; \n\n  //O += .2*vec4(fract(floor(U)/2.),0,0);            // tile color \n}\n/**/\n\n\n/**   // Shane version:\nvoid mainImage(out vec4 f, vec2 g){ \n    vec2 R = iResolution.xy; \n    g = (g - R/2.)/R.y + iTime*.125; \n    g *= mat2(1.732, -1, 0, 2)/1.732*20.; \n    \n    float id = fract(sin(dot(floor(g), vec2(123, 289)))*43758.5453); \n    vec2 g2 = fract(g - .5) - .5; \n    float cir = smoothstep(0., 40./R.y, length(g2) - .05); \n    float c = fract( id >.66 ? g.x : id> .33 ? g.y : 1.-g.x-g.y ); \n    c = 1.-smoothstep(0., 40./R.y, abs(c - .05)/(1.-.05)); \n    c = max(c, 1. - cir); f = vec4(c); \n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}