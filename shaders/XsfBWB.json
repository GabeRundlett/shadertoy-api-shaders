{
    "Shader": {
        "info": {
            "date": "1497734423",
            "description": "Something ancient",
            "flags": 0,
            "hasliked": 0,
            "id": "XsfBWB",
            "likes": 9,
            "name": "Magic Orb",
            "published": 3,
            "tags": [
                "symmetry"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 639
        },
        "renderpass": [
            {
                "code": "// \"Magic Orb\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothMin (float a, float b, float r);\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nfloat dstFar, tCur;\nint idObj;\nconst float pi = 3.14159;\n\nvec3 IcosSym (vec3 p)\n{\n  const float dihedIcos = 0.5 * acos (sqrt (5.) / 3.);\n  float a, w;\n  w = 2. * pi / 3.;\n  p.z = abs (p.z);\n  p.yz = Rot2D (p.yz, - dihedIcos);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 4; k ++) {\n    p.zy = Rot2D (p.zy, - dihedIcos);\n    p.y = - abs (p.y);\n    p.zy = Rot2D (p.zy, dihedIcos);\n    if (k < 3) p.xy = Rot2D (p.xy, - w);\n  }\n  p.z = - p.z;\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.x -= 2. * p.x * step (0., p.x);\n  return p;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 pIco;\n  const vec3 vIco = normalize (vec3 (sqrt(3.), -1., 0.5 * (3. + sqrt(5.))));\n  float dMin, r, d, f;\n  dMin = dstFar;\n  idObj = 1;\n  f = 1.;\n  for (int k = 0; k < 3; k ++) {\n    pIco = IcosSym (p);\n    r = 2.8 * f;\n    d = - (0.021 * r + SmoothMin (- abs (length (p) - r),\n       - length (length ((pIco + 0.411 * r * vIco).xy - 0.093 * r) -\n       0.114 * r), 0.021 * r));\n    if (d < dMin) { dMin = d;  qHit = p; }\n    if (k == 0) p.xy = Rot2D (p.xy, 0.051 * pi * tCur);\n    else if (k == 1) p.yz = Rot2D (p.yz, 0.052 * pi * tCur);\n    f *= 0.93;\n  }\n  d = length (p) - 2.8 * f;\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = 0.1 + float (j) / 16.;\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return 0.5 + 0.5 * clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.05;\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nfloat MarbVol (vec3 p)\n{\n  vec3 q;\n  float f;\n  f = 0.;\n  p *= 0.7;\n  q = p;\n  for (int j = 0; j < 5; j ++) {\n    q = abs (q) / dot (q, q) - 0.89;\n    f += 1. / (1. + abs (dot (p, q)));\n  }\n  return f;\n}\n\nvec3 VtRot (vec3 p, vec3 a)\n{\n  a *= pi * tCur;\n  p.yz = Rot2D (p.yz, a.x);\n  p.zx = Rot2D (p.zx, a.y);\n  p.xy = Rot2D (p.xy, a.z);\n  return p;\n}\n\nvec3 SphMarb (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float t;\n  col = vec3 (0.);\n  ro = VtRot (ro, - vec3 (0.03, 0.022, 0.026));\n  rd = VtRot (rd, - vec3 (0.03, 0.022, 0.026));\n  t = 0.;\n  for (int j = 0; j < 20; j ++) {\n    t += 0.02;\n    col = mix (HsvToRgb (vec3 (mod (0.4 * MarbVol (ro + t * rd) +\n       0.03 * pi * tCur, 1.), 1., 1. / (1. + t))), col, 0.95);  \n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, bgCol, qHitT;\n  float dstObj, c, sh, bk, env, eFac;\n  int idObjT;\n  dstObj = ObjRay (ro, rd);\n  env = 1.;\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    idObjT = idObj;\n    qHitT = qHit;\n    vn = ObjNf (ro);\n    bk = max (dot (vn, - normalize (vec3 (ltDir.x, 0., ltDir.z))), 0.);\n    sh = ObjSShadow (ro, ltDir);\n    if (idObjT == 1) {\n      col = vec3 (1., 0.95, 0.4);\n      vn = VaryNf (50. * qHitT, vn, 3.);\n      sh = 0.5 + 0.5 * sh;\n      col = col * (0.1 + 0.1 * bk + sh * 0.7 * max (dot (vn, ltDir), 0.));\n      eFac = 0.25;\n    } else {\n      col = 2. * (0.8 + 0.2 * sh) * SphMarb (0.5 * ro, refract (rd, vn, 1./1.5));\n      eFac = 0.05;\n     }\n    env = eFac * ObjAO (ro, vn);\n    col += sh * 0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 256.);\n    rd = reflect (rd, vn);\n  } else col = vec3 (0., 0., 0.05);\n  c = (rd.y > max (abs (rd.x), abs (rd.z * 0.25))) ? min (2. * rd.y, 1.) :\n     0.05 * (1. + dot (rd, ltDir));\n  if (rd.y > 0.) c += 0.5 * pow (clamp (1.05 - 0.5 *\n     length (max (abs (rd.xz / rd.y) - vec2 (1., 4.), 0.)), 0., 1.), 6.);\n  bgCol = vec3 (0.4, 0.4, 1.) * c + 2. * vec3 (1., 0.9, 0.8) *\n     (clamp (0.0002 / (1. - abs (rd.x)), 0., 1.) +\n      clamp (0.0002 / (1. - abs (rd.z)), 0., 1.));\n  col += env * bgCol;\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 10.;\n  if (mPtr.z > 0.) {\n    az = 3. * pi * mPtr.x;\n    el = -0.1 * pi + 1. * pi * mPtr.y;\n  } else {\n    az = 0.02 * pi * tCur;\n    el = -0.25 * pi + 0.1 * pi * sin (0.022 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 3.6));\n  ro = vuMat * vec3 (0., 0., -12.);\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  dstFar = 30.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}