{
    "Shader": {
        "info": {
            "date": "1643901105",
            "description": "A fun little shader to experiment with coordinates transformations.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsByRt",
            "likes": 5,
            "name": "Rotating circles shapes",
            "published": 3,
            "tags": [
                "shapes"
            ],
            "usePreview": 0,
            "username": "MarcoF",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "float circle(vec2 uv, vec2 position, float radius, float blur)\n{\n\treturn 1.0 - smoothstep(radius - blur, radius + blur, length(uv - position));\n}\n\nvec2 rotate(vec2 original, float angle, vec2 pivot)\n{\n\tmat2 rotation = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n\tvec2 final = original;\n\tfinal -= pivot;\n\tfinal *= rotation;\n\tfinal += pivot;\n\treturn final;\n}\n\nvec2 scale(vec2 original, vec2 scale, vec2 pivot)\n{\n\tscale = 1.0 / scale;\n\tmat2 s = mat2(scale.x, 0.0, 0.0, scale.y);\n\tvec2 final = original;\n\tfinal -= pivot;\n\tfinal *= s;\n\tfinal += pivot;\n\treturn final;\n}\n\nfloat changeRange(float iValue, float iMin, float iMax, float fMin, float fMax) \n{\n\tfloat fValue = (iValue-iMin)/(iMax-iMin);\n\tfValue *= fMax-fMin;\n\tfValue += fMin;\n\treturn fValue;\n}\n\nint nCircles = 50;\nbool coolEffect = false;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mr = min(iResolution.x, iResolution.y);\n\tvec2 uv = fragCoord / mr;\n    \n    uv.x -= 0.5;\n\n    vec3 col = vec3(0);\n    \n\tfor (int i = 0; i < nCircles; i++) {\n\t\tfloat s = changeRange(float(i), 0.0, float(nCircles - 1), 1.0, 1.0/float(nCircles));\n\n\t\tvec2 suv = scale(uv, vec2(s), vec2(0.5));\n\n\t\tfloat t = changeRange(float(i), 0.0, float(nCircles - 1), iTime*0.1, iTime*2.1);\n        \n        if (coolEffect && i%2!=0) t *= -1.0;\n        \n\t\tvec2 ruv = rotate(suv, t, vec2(0.5));\n\n        if (distance(ruv, vec2(0.5)) < 0.5) {\n            float c = float(ruv.x < 0.5);\n            col = vec3(c);\n        }\n\t}\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}