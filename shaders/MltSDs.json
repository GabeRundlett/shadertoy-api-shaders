{
    "Shader": {
        "info": {
            "date": "1482290440",
            "description": "Quick julia fractal for Reddit daily programmer 20160729. Use the mouse!",
            "flags": 0,
            "hasliked": 0,
            "id": "MltSDs",
            "likes": 3,
            "name": "Another Julia",
            "published": 3,
            "tags": [
                "julia"
            ],
            "usePreview": 0,
            "username": "sixstring982",
            "viewed": 650
        },
        "renderpass": [
            {
                "code": "#define RES iResolution\n\n//********************************\n//***** Compute Julia Fractal ****\n//********************************\n#define JULIA_ITERS 64\nfloat julia(vec2 z, vec2 c) {\n    int breakout = 0;\n    for (int i = 0; i < JULIA_ITERS; i++) {\n        if (z.x * z.x + z.y * z.y > 4.0) {\n         \tcontinue;  // break   \n        }\n        breakout = i;\n        \n        z = vec2(z.x * z.x - z.y * z.y,\n                 2.0 * z.x * z.y) + c;\n    }\n    \n    return 4.0 * float(breakout) / float(JULIA_ITERS);\n}\n\n//********************************\n//***** Color Scheme          ****\n//********************************\n\n// Convert pixel coordinates to texture coordinates\n// https://iquilezles.org/articles/palettes\nmat4 PALETTE_COEFF = \n    mat4(0.5, 0.5, 1.0, 0.3,\n         0.5, 0.5, 1.0, 0.2,\n         0.5, 0.5, 1.0, 0.2,\n         0.0, 0.0, 0.0, 0.0);\n\nfloat paletteComponent(vec4 v, float x) {\n    return v.x + v.y * cos(2.0 * 3.14159 * (v.z * x + v.w));\n}\n\nvec3 palette(float x) {\n \tx += iTime * 0.1;\n\n    return vec3(paletteComponent(PALETTE_COEFF[0], x),\n                paletteComponent(PALETTE_COEFF[1], x),\n                paletteComponent(PALETTE_COEFF[2], x));\n}\n\nvec2 uvFromPx(vec2 pxCoord) {\n    return (2.0 * pxCoord - RES.xy) / RES.y;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pxFragCoord ) {\n    vec2 uvMouse = uvFromPx(iMouse.xy);\n    \n    vec3 color = vec3(0.0);\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            if (x == 0 || y == 0) {\n            \tvec2 uvFragCoord = uvFromPx(pxFragCoord + vec2(x, y));\n            \tvec3 component = palette(julia(uvFragCoord, uvMouse));\n                color += component * (x == 0 && y == 0 ? 2.0 : 1.0);\n            }\n        }\n    }\n\tfragColor = vec4(color / 8.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}