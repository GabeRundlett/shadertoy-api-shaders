{
    "Shader": {
        "info": {
            "date": "1675639021",
            "description": "this is my attempt to re-create my voronoi i drew by hand\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cl2Xzz",
            "likes": 3,
            "name": "voronoi second closest dist",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "// var a_n = [1,2,3,4,5,6,7,8,9]\n// var n_dist_min1 = 10.;\n// var n_dist_min2 = 10.;\n// for(var n of a_n){\n//     if(n < n_dist_min1){\n        \n//         n_dist_min1 = n;\n//     }\n//     if(n > n_dist_min1 && n < n_dist_min2){\n\n//         n_dist_min2 = n;\n//     }\n    \n// }\n// console.log(\"n_dist_min1\")\n// console.log(n_dist_min1)\n// console.log(\"n_dist_min2\")\n// console.log(n_dist_min2)\n// for(var n of a_n){\n//     if(n < n_dist_min1){\n//         n_dist_min2 = n_dist_min1;\n//         n_dist_min1 = n;\n//     }\n//     if(n > n_dist_min1 && n < n_dist_min2){\n\n//         n_dist_min2 = n;\n//     }\n    \n// }\n// console.log(\"n_dist_min1\")\n// console.log(n_dist_min1)\n// console.log(\"n_dist_min2\")\n// console.log(n_dist_min2)\n\n\n\nfloat f_n_dist_line_by_iq(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\n#define n_tau 6.2831\nfloat f_n_rnd(vec2 o)\n{\n\treturn fract(sin(dot(o.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat f_n_dist_euclidean(vec2 o_p1, vec2 o_p2){\n    vec2 o_delta = o_p1-o_p2;\n    \n    return sqrt(\n        pow(o_delta.x,2.)\n        + pow(o_delta.y,2.)\n    );\n}\nfloat f_n_dist_manhatten(vec2 o_p1, vec2 o_p2){\n    return abs(o_p1.x-o_p2.x) + abs(o_p1.y-o_p2.y);\n}\nvec2 f_o_rnd_from_o_fc_floor(vec2 o_fc_floor){\n\n    float n_rnd = f_n_rnd(o_fc_floor);\n    float n_rnd2 = f_n_rnd(o_fc_floor*20.);\n    vec2 o_prnd = (vec2(n_rnd, n_rnd2)-.5)*sin(iTime);\n    return o_prnd;\n}\n\nvec4 f_o_voronoi(vec2 o_fc_nor){\n\n    vec2 o_fc_nor_floor = floor(o_fc_nor);\n    vec2 o_fc_nor_fract = fract(o_fc_nor);\n    float n_t = iTime*0.5;\n    vec2 o_scl_krnl = vec2(3.);\n    vec2 o_scl_krnl_half_floor = floor(o_scl_krnl/2.);\n    float n_dist_min = 1.;\n    float n_dist_min2 = 1.;\n    vec2 o_fc_nor_min = vec2(0.);\n    vec2 o_trn_knrl_min = vec2(0.);\n    for(float n_x = -o_scl_krnl_half_floor.x; n_x <= o_scl_krnl_half_floor.x; n_x+=1.){\n        for(float n_y = -o_scl_krnl_half_floor.y; n_y <= o_scl_krnl_half_floor.y; n_y+=1.){\n            \n            // this is a unique absolute x y coordinate, (23, 13) or (243, 88)...\n            vec2 o_fc_nor_krnl_floor = vec2(n_x, n_y) + o_fc_nor_floor;\n            // this is the relative coordinate with floating points\n            // (0.13, 0.33), (1.23, -1.32) ... \n  \n            vec2 o_rnd = f_o_rnd_from_o_fc_floor(o_fc_nor_krnl_floor);\n            \n            vec2 o_fc_nor_krnl_plus_fract = vec2(n_x, n_y) - o_fc_nor_fract + o_rnd;\n            \n            float n_dist = length(o_fc_nor_krnl_plus_fract);\n            \n            if(n_dist < n_dist_min){\n                o_trn_knrl_min = vec2(n_x, n_y);\n                o_fc_nor_min = vec2(n_x, n_y) + o_rnd;\n                n_dist_min2 = n_dist_min;\n                n_dist_min = n_dist;\n            }\n            if(\n                n_dist > n_dist_min\n                && \n                n_dist < n_dist_min2\n            ){\n                n_dist_min2 = n_dist;\n            }\n        }\n    }\n    \n    return vec4(n_dist_min, n_dist_min2, o_fc_nor_min);\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_fc_nor = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n    vec2 o_mc_nor = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n\n    vec2 o_fc_nor_nooff = fragCoord.xy/iResolution.xy;\n    \n    vec2 o_fc_nor_zoomed = o_fc_nor*10.;\n    vec4 o_voronoi = f_o_voronoi(o_fc_nor_zoomed);\n    \n    \n    float n_idx = float(o_fc_nor.x > 0.);\n    fragColor = vec4(o_voronoi[int(n_idx)]);\n    if(o_fc_nor.y > 0.){\n        float n_min1_minus_min2 =  o_voronoi.x - o_voronoi.y;\n        fragColor = vec4(abs(sin(n_min1_minus_min2*n_tau*2.)));//sin(sqrt(n_min1_minus_min2)*n_tau*10.));\n    }\n    float n_radius = (1./0.09);\n    float n_outline = (2.);\n    float n_dist_o_fc_nor_zoomed_point = length((fract(o_fc_nor_zoomed-.5)-.5));\n    n_dist_o_fc_nor_zoomed_point = smoothstep(1., 0.5, n_dist_o_fc_nor_zoomed_point*n_radius);\n    float n_dist_o_fc_nor_zoomed_point2 = smoothstep(1., 0.5, n_dist_o_fc_nor_zoomed_point*(n_radius+n_outline));\n    fragColor *= vec4(1.)*(1.-n_dist_o_fc_nor_zoomed_point);\n    fragColor *= vec4(n_dist_o_fc_nor_zoomed_point2);\n    fragColor += vec4(0., 1.,0., 1.)*n_dist_o_fc_nor_zoomed_point;\n    \n    float n_dist_o_min = length(o_voronoi.x);\n    n_dist_o_min = smoothstep(1., 0.5, n_dist_o_min*n_radius);\n    float n_dist_o_min2 = smoothstep(1., 0.5, n_dist_o_min*(n_radius+n_outline));\n    fragColor *= vec4(1.)*(1.-n_dist_o_min);\n    fragColor *= vec4(n_dist_o_min2);\n    fragColor += vec4(1., 1.,0., 1.)*n_dist_o_min;\n    \n    vec2 o = fract(o_fc_nor_zoomed)-vec2(0.5);\n    float n_d_grid = max(abs(o.x), abs(o.y));\n    n_d_grid = .5-n_d_grid;\n    \n    float n_th = 0.01;\n    float n_aa = 1./iResolution.x;\n    n_d_grid = smoothstep(n_th, n_th+n_aa, n_d_grid);\n    fragColor *= vec4(n_d_grid);\n    \n\n\n    vec2 o_rnd = o_voronoi.zw;\n    //vec2 o_p_in_quadrat = (vec2(1.)/5.)*floor(fract(o_fc_nor_zoomed)*5.);\n    //o_p_in_quadrat = vec2(0.);\n    //    float n_dist_line = f_n_dist_line_by_iq(\n    //        fract(o_fc_nor_zoomed),\n    //        o_p_in_quadrat,\n    //        o_rnd\n    //    );\n    //n_dist_line = smoothstep(n_th, n_th+n_aa, n_dist_line);\n    \n    // i think i still have to loop ... \n    n_th = 0.005;\n    float n_its = 5.;\n    float n_dist_line = 0.;\n    for(float n_x = 0.; n_x <= 1.; n_x+= 1./n_its){\n        for(float n_y = 0. ; n_y <= 1.; n_y+= 1./n_its){\n            \n            float n = f_n_dist_line_by_iq(\n                fract(o_fc_nor_zoomed),\n                vec2(n_x, n_y),//o_p_in_quadrat,\n                o_rnd\n            );\n            n_dist_line += smoothstep(n_th+n_aa, n_th, n);\n        }\n    }\n    \n    \n    if(o_fc_nor.x >= .0 && o_fc_nor.y > 0.){\n        fragColor = vec4(1.-n_dist_line);\n        fragColor *= pow(o_voronoi.x,1./2.);\n    \n    }\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}