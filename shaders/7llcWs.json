{
    "Shader": {
        "info": {
            "date": "1648967336",
            "description": "A fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "7llcWs",
            "likes": 3,
            "name": "Blue glaze mosaic",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 36.*4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    float scale = c1.z;\n    float offset = 0.;\n    float offset1 = iTime/1000.;\n    float p1 = 1.;\n        vec2 t2 = vec2(0.);\n        vec2 t3 = vec2(0.);\n        for(int k = 0; k < 12; k++){\n            uv += t2;\n            uv /= scale;\n            uv -= ceil(t2.x*t2.y+5.)/4.; //mosaic pattern\n\n            //uv += vec2(1.); //this also makes an interesting pattern\n            t2 = -p1*triangle_wave(uv-.5,scale);\n            t3 = p1*triangle_wave(uv.yx,scale);\n            uv = (t2-t3);\n            p1 *= -1.;\n            //col.x = max(uv.y+uv.x-col.x,col.x*2.25);\n            //col = abs(col.yzx-vec3(1.5-col.x))/2.;\n            \n            //uv.x -= .5;\n            \n            col.x =\n                max(uv.y+uv.x,col.x*2.75)\n                //max(floor((uv.y+uv.x)*8.)/8.,col.x*2.75)\n            ;\n            col = abs(col.yzx-vec3(1.-col.x))/2.;\n        }\n\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //multiply by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a *= 1. + mod(floor(a1/8.),2.);\n    //a *= 1. + mod(floor(a1/4.),2.);\n    //a *= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\nvec2 mainSound(int samp, float t){\n  t /= 1.5;\n  \n  float s1 =\n      8.;\n  //t = t + floor(t/s1+floor(t*s1))/s1;\n  //t = t + fmod(t*s1,floor(t)+1.)/s1;\n\n  //t = t + floor(floor(t*s1)+floor(t/s1))/s1;\n  \n  float\n  m1 =\n      mod(floor(t)+floor(t*s1)/s1+floor(t)/s1,s1)\n      //fmod(t*s1,s1)\n      //fmod(t+floor(t*s1),s1)\n      //fmod(t+floor(t)*floor(t/s1),s1)\n  ;\n\n  float m3 =\n      fmod(floor(t*s1)+floor(t/s1)/s1,s1)\n      //fmod((t*8.)/(fmod(t*s1,m1+1.)+.5),s1*z1)\n      //fmod((t*8.+m1),s1*z1)\n  ;\n  t *=\n      1.+fmod(floor(t*s1)/s1+m1,2.)\n      //1.+fmod(floor(t*s1/(.5+m1*2.))*floor(t/s1/(.5+m1*4.)+z1),2.)\n      //1.+fmod(floor(t/s1)*floor(t/s1+z1),2.)\n      //1.+fmod(floor(t/s1)*floor(t*s1+z1),2.)\n      //1.+fmod(floor(t*s1)*floor(t*s1+z1),2.)\n  ;\n      \n  \n  float a=sqrt((1.-sqrt(fract(t))))*.2,\n\n  nb = pow(2.,(m3)/5.+7.);\n\n  return vec2(fract(t*nb*.998)*a\n   ,fract(t*nb)*a);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}