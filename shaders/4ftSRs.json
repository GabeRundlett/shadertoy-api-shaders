{
    "Shader": {
        "info": {
            "date": "1714323376",
            "description": "felix the cat",
            "flags": 0,
            "hasliked": 0,
            "id": "4ftSRs",
            "likes": 20,
            "name": "felix the cat",
            "published": 3,
            "tags": [
                "2d",
                "felixthecat"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n// abril-28-2024-\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///feliz the cat\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(4.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(12.0/antialiasing(0.5),0. , d - (b) )\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat SDF_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat SDF_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat SDF_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat divf(float a, float b)\n{\n    //evita crash por 1/0.0 =Infinito=error, en compilar\n    if(b==0.0)\n    {b=0.00001;}\n    return a/b;\n}\n\n\n\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\nvec3 bigotes(vec2 uv, vec3 col)\n{\nvec2 pc1p1=vec2(1.360,.650);\nvec2 pc1p2=vec2(1.540,.670);\nvec2 pc1p3=vec2(1.780,.580);\n\nvec2 pc2p1=vec2(1.410,.540);\nvec2 pc2p2=vec2(1.580,.490);\nvec2 pc2p3=vec2(1.720,.360);\n\nvec2 pc3p1=vec2(.020,.450);\nvec2 pc3p2=vec2(.170,.580);\nvec2 pc3p3=vec2(.360,.650);\n\nvec2 pc4p1=vec2(.000,.620);\nvec2 pc4p2=vec2(.190,.700);\nvec2 pc4p3=vec2(.5330,.650);\n\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\nfloat d4= sdBezier(uv,pc4p1,pc4p2,pc4p3);\n\nvec3 c1=vec3(0.0);\nvec3 c2=vec3(0.0,1.0,0.0);\ncol=DrawFigDelgado(c1,col,d1);\ncol=DrawFigDelgado(c1,col,d2);\ncol=DrawFigDelgado(c1,col,d3);\ncol=DrawFigDelgado(c1,col,d4);\n\n    return col;\n}\n\nvec3 felix(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med;\nfloat dfin;\nfloat  r1 ;\n\nA=vec2(0.87,-0.06);\nr1=0.46;\nfloat d1=sdCircle(p-A,r1);\n\nA=vec2(0.69,0.08);\nr1=0.46;\nfloat d2=sdCircle(p-A,r1);\n\nA=vec2(0.65,-0.1);\nr1=0.28;\nfloat d3=sdCircle(p-A,r1);\n\nA=vec2(2.29,-0.04);\nr1=1.38;\nfloat d4=sdCircle(p-A,r1);\n\ndfin=SDF_I(d1,d2);\ndfin=SDF_U(dfin,d3);\ndfin=SDF_D(dfin,d4);\ncolout= DFB(vec3(1.0), colout, dfin);\n\nA=vec2(0.68,-0.04);\nmed=vec2(0.03,0.07);\nfloat d5=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d5);\n\n\n\n//------ojo derecho\nA=vec2(1.05,-0.04);\nr1=0.44;\nfloat d6=sdCircle(p-A,r1);\n\nA=vec2(1.21,0.07);\nr1=0.44;\nfloat d7=sdCircle(p-A,r1);\n\nA=vec2(1.31,-0.16);\nr1=0.19;\nfloat d8=sdCircle(p-A,r1);\n\n\nA=vec2(2.06,-0.09);\nr1=1.12;\nfloat d9=sdCircle(p-A,r1);\n\ndfin=SDF_I(d6,d7);\ndfin=SDF_U(dfin,d8);\ndfin=SDF_I(d9, dfin);\ncolout= DFB(vec3(1.0), colout, dfin);\n\n\nA=vec2(1.18,-0.07);\nmed=vec2(0.03,0.07);\nfloat d10=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d10);\n\n\n//nariz\nA=vec2(0.91,-0.49);\nmed=vec2(0.08,0.045);\nfloat d11=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d11);\n\n\n//cabeza\nA=vec2(0.95,-0.19);\nr1=0.63;\nfloat d18=sdCircle(p-A,r1);\n\n      ///----rostro add\n\n    A=vec2(0.67,-0.39);\n    r1=0.3;\n    float d1a=sdCircle(p-A,r1);\n\n    A=vec2(1.22,-0.42);\n    r1=0.3;\n    float d2a=sdCircle(p-A,r1);\n\nd18=SDF_U(d18,d1a);\nd18=SDF_U(d18,d2a);\n\n\nfloat d18tdo=d18;\nd18=abs(d18)-0.001;\ncolout= DFB(vec3(0.0), colout, d18);\n\n//boca\nA=vec2(0.91,-1.51);\nr1=0.84;\nfloat d13=sdCircle(p-A,r1);\n\nd13=abs(d13)-0.001;\nd13=SDF_I(d18tdo,d13);\ncolout= DFB(vec3(1.0,0.0,0.0), colout, d13);\n\n\n//sup cir\nA=vec2(1.03,0.78);\nr1=0.46;\nfloat d14=sdCircle(p-A,r1);\n\n//pelo centro\nA=vec2(0.98,0.02);\nr1=0.83;\nfloat d15=sdCircle(p-A,r1);\nd15=SDF_D(d15,d18tdo);\n\n//dif pelo izq\nA=vec2(2.65,0.46);\nr1=1.18;\nfloat d16=sdCircle(p-A,r1);\n\nA=vec2(-0.74,0.76);\nr1=1.31;\nfloat d17=sdCircle(p-A,r1);\n\n\n//dif pelo\nA=vec2(1.73,0.34);\nmed=vec2(0.19,0.1);\nfloat d1b=sdTriangleIsosceles(vec2(p.x,-p.y)-A,med);\n\nA=vec2(0.15,0.2);\nmed=vec2(0.19,0.1);\nfloat d2b=sdTriangleIsosceles(vec2(p.x,-p.y)-A,med);\n\n\ndfin=SDF_D(d15,d16);\ndfin=SDF_D(dfin,d17);\ndfin=SDF_D(dfin,d14);\n\ndfin=SDF_D(dfin,d1b);\ndfin=SDF_D(dfin,d2b);\n\ncolout= DFB(vec3(1.0), colout, dfin);\n\n\n//cuerpo\nA=vec2(0.91,-1.06);\nr1=0.29;\nfloat d12=sdCircle(p-A,r1);\n//d18tdo\nd12=SDF_D(d12,d18tdo);\nd12=abs(d12)-0.01;\ncolout= DFB(vec3(0.0), colout, d12);\n\ncolout= bigotes(p-vec2(0.0,-1.0),colout);\n\n\nreturn colout;\n}\n\n///-----------------------\n\nvec3 bigotesB(vec2 uv, vec3 col)\n{\n    \nvec2 pc1p1=vec2(.020,.480);\nvec2 pc1p2=vec2(.190,.520);\nvec2 pc1p3=vec2(.370,.560);\n\nvec2 pc2p1=vec2(.100,.290);\nvec2 pc2p2=vec2(.300,.360);\nvec2 pc2p3=vec2(.410,.450);\n\nvec2 pc3p1=vec2(.450,.370);\nvec2 pc3p2=vec2(.550,.650);\nvec2 pc3p3=vec2(.850,.550);\n\nvec2 pc4p1=vec2(.690,.290);\nvec2 pc4p2=vec2(1.000,.350);\nvec2 pc4p3=vec2(1.190,.290);\n\nvec2 pc5p1=vec2(1.440,.570);\nvec2 pc5p2=vec2(1.640,.580);\nvec2 pc5p3=vec2(1.760,.590);\n\nvec2 pc6p1=vec2(1.410,.470);\nvec2 pc6p2=vec2(1.650,.460);\nvec2 pc6p3=vec2(1.800,.390);\n\n\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\nfloat d4= sdBezier(uv,pc4p1,pc4p2,pc4p3);\nfloat d5= sdBezier(uv,pc5p1,pc5p2,pc5p3);\nfloat d6= sdBezier(uv,pc6p1,pc6p2,pc6p3);\n\nvec3 c1=vec3(0.0);\ncol=DrawFigBorde(c1,col,d1);\ncol=DrawFigBorde(c1,col,d2);\ncol=DrawFigBorde(c1,col,d3);\ncol=DrawFigBorde(c1,col,d4);\ncol=DrawFigBorde(c1,col,d5);\ncol=DrawFigBorde(c1,col,d6);\n\n    return col;\n}\n\nvec3 felixB(vec2 p, vec3 colout)\n{\nvec2 A,B, med;\nfloat dfin;\nfloat r1 ;\n\n//cabeza\nA=vec2(0.87,-0.2);\nr1=0.62;\nfloat d1=sdCircle(p-A,r1);\n\n//grande pelo\nA=vec2(0.88,0.02);\nr1=0.85;\nfloat d2=sdCircle(p-A,r1);\n\nA=vec2(-1.22,1.08);\nr1=1.85;\nfloat d3=sdCircle(p-A,r1);\n\nd2=SDF_D(d2,d3);\n\n\nA=vec2(0.91,0.68);\nmed=vec2(0.1,0.3);\nfloat he=0.23;\nfloat d4= sdTrapezoid(p-A, med.x, med.y, he);\nd2=SDF_D(d2,d4);\n\n\n//dif pelo 2 der\nA=vec2(2.11,0.62);\nr1=0.94;\nfloat d5=sdCircle(p-A,r1);\n\n\nA=vec2(0.08,0.27);\nmed=vec2(0.18,0.2);\nfloat d1c=sdTriangleIsosceles(vec2(p.x, -p.y)-A,med);\n\nA=vec2(1.2,-0.3);\nr1=0.54;\nfloat d5b=sdCircle(p-A,r1);\n\n\nd2=SDF_D(d2,d5);\nd2=SDF_D(d2,d1c);\nd2=SDF_D(d2,d5b);\n\ncolout= DFB(vec3(1.0), colout, d2);\ncolout= DFB(vec3(1.0), colout, d1);\n\n\n//cuerpo\nA=vec2(0.76,-1.03);\nr1=0.25;\nfloat d6=sdCircle(p-A,r1);\nd6=SDF_D(d6,d2);\ncolout= DFB(vec3(1.0), colout, d6);\n\n//ojo izq\nA=vec2(0.97,-0.04);\nr1=0.42;\nfloat d7=sdCircle(p-A,r1);\n\nA=vec2(1.4,-0.28);\nr1=0.72;\nfloat d8=sdCircle(p-A,r1);\n\nA=vec2(0.52,-0.19);\nr1=0.72;\nfloat d9=sdCircle(p-A,r1);\n\nd7=SDF_I(d7,d8);\nd7=SDF_I(d7,d9);\ncolout= DFB(vec3(1.0), colout, d7);\n\n\n//----ojo der\nA=vec2(0.99,-0.16);\nr1=0.5;\nfloat d1a=sdCircle(p-A,r1);\n\nA=vec2(1.44,0.01);\nr1=0.38;\nfloat d2a=sdCircle(p-A,r1);\n\nA=vec2(0.42,-0.19);\nr1=0.83;\nfloat d3a=sdCircle(p-A,r1);\n\nd1a=SDF_I(d1a,d2a);\nd1a=SDF_D(d1a,d3a);\ncolout= DFB(vec3(1.0), colout, d1a);\n\n\n\nA=vec2(1.09,-0.13);\nmed=vec2(0.03,0.07);\nfloat d10=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d10);\n\nA=vec2(1.46,-0.13);\nmed=vec2(0.03,0.07);\nfloat d11=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d11);\n\n\n//nariz\nA=vec2(1.36,-0.52);\nmed=vec2(0.07,0.05);\nfloat d13=sdEllipse(p-A,med);\nd13=abs(d13)-0.01;\ncolout= DFB(vec3(0.0), colout, d13);\n\n    colout= bigotesB(p-vec2(0.0,-1.0),colout);\n    return colout;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    vec2 uv0=uv;\n    uv-=vec2(-0.1,0.25);\n    float esc=2.0;\n    uv*=esc;\n    \n    vec3 col=vec3(1.0)-uv0.y*2.0;\n    float opc=mod(iTime*1.5,4.0);\n    \n    if(opc<=1.0)\n        col= felix(uv,col);\n    else if(opc>1.0 && opc<=2.0 )\n        col=felixB(uv,col);\n    else if(opc>2.0 && opc<=3.0 )\n        col= felix(uv,col);\n    else if(opc>3.0 && opc<=4.0 )\n        col= felixB(vec2(1.8-uv.x,uv.y),col);\n    \n    \n    col=felixB(uv-vec2(-2.5,0.0),col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n///--\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}