{
    "Shader": {
        "info": {
            "date": "1599056956",
            "description": "post processing  glowing orbs with bending feedback.",
            "flags": 32,
            "hasliked": 0,
            "id": "WlSfDm",
            "likes": 27,
            "name": "Feedback bend",
            "published": 3,
            "tags": [
                "2d",
                "postprocessing",
                "feedback",
                "bend"
            ],
            "usePreview": 0,
            "username": "Jaromir",
            "viewed": 1051
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define M_PI 3.14159265359\n\nmat2 rot(float a)\n{\nreturn mat2(\n  cos(a), sin(a),\n  -sin(a), cos(a)\n  );\n}\n\nfloat hash11(float n)\n{\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat noise31(in vec3 n)\n{\n\tvec3 p = floor(n);\n    vec3 f = fract(n);\n    f = f*f*(3.-2.*f);\n    float q = p.x+p.y*57.+p.z*113.;\n    float r = mix(mix(mix(hash11(q+0.),hash11(q+1.),f.x),\n                      mix(hash11(q+57.),hash11(q+58.),f.x),f.y),\n                  mix(mix(hash11(q+113.),hash11(q+114.),f.x),\n                      mix(hash11(q+170.),hash11(q+171.),f.x),f.y),f.z);\n    return r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 oUv = fragCoord.xy/iResolution.xy;\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    //fbm\n    vec2 nUv = uv*7.5;\n    vec3  nP = vec3(nUv,iTime*0.5);\n    float n = noise31(nP)*0.5; \t\tnP.xy*=rot(0.25*M_PI);\n    \t  nP.xy+=vec2(-iTime*0.0234,iTime*0.0543);\n\t\t  n+= noise31(nP*2.)*0.25;  nP.xy*=rot(0.25*M_PI);\n    \t  nP.xy+=vec2(iTime*0.0587,iTime*0.0876);\n\t\t  n+= noise31(nP*3.)*0.0125; nP.xy*=rot(0.25*M_PI);\n    \t  nP.xy+=vec2(iTime*0.0478,-iTime*0.0234);\n\t\t  n+= noise31(nP*4.)*0.0625;\n    \n    #if 1\n      //nice glowing orbs\n      vec2 p1 = vec2(cos(iTime*0.723+0.1),sin(iTime*0.541-0.35))*0.5;\n      vec4 s1 = vec4(length(uv+p1));\n      s1 = vec4(1.)/s1*0.2;\n      s1.rgb*=vec3(0.3,0.3,0.7);\n    \n      vec2 p2 = vec2(cos(iTime*0.483+0.8),sin(iTime*0.372+0.8))*0.564;\n      vec4 s2 = vec4(length(uv+p2));\n      s2 = vec4(1.)/s2*0.08;\n      s2.rgb*=vec3(0.8,0.3,0.2);    \n\n      vec2 p3 = vec2(cos(iTime*0.567-0.3),sin(iTime*0.691-0.3))*0.494;\n      vec4 s3 = vec4(length(uv+p3));\n      s3 = vec4(1.)/s3*0.1;\n      s3.rgb*=vec3(0.7,0.6,0.3);    \n    \n      vec4 s = vec4(0.);\n      s+=s1;\n      s+=s2;\n      s+=s3;\n    \n\t#else\n      //britney\n      vec4 s = texture(iChannel1,oUv);\n    #endif\n    \n    float ang = atan(uv.y,uv.x);     \n    ang+=M_PI;\n    vec2 bend = vec2(cos(ang),sin(ang));\n    float l = length(uv);\n    float mask = abs(bend.y*3.);\n    mask+=abs(bend.x*2.)*0.5;\n    l = smoothstep(0.,0.5,l);\n    mask = clamp(mask,0.,1.)*l*mix(n,1.,0.9);\n    mask = pow(mask,2.);\n    \n    vec2  offset = vec2(bend*mask);\n    \t  offset*=vec2(5.,4.);\n          offset/=iResolution.xy;\n          offset+=(n-0.5)*clamp(l,0.,1.)*0.01;\n    \n    vec4  col = (texture(iChannel0,oUv+offset)-vec4(s));\n    \n    float feedback = 0.9;\n    col*=feedback;\n    \n    fragColor = vec4(s)+col - n*0.01;\n    //fragColor = vec4(mask);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}