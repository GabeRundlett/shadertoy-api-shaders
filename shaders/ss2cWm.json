{
    "Shader": {
        "info": {
            "date": "1643895020",
            "description": "My participation to genuary 2022\nOrganic looking output using only rectangular shapes.",
            "flags": 0,
            "hasliked": 0,
            "id": "ss2cWm",
            "likes": 8,
            "name": "Genuary 2022 - Day30",
            "published": 3,
            "tags": [
                "generative",
                "organic",
                "molecule",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat _sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}\n\nfloat hexa_full(vec2 uv, float rad, float th)\n{\n    vec2 uv2 = uv;\n    float rep = PI*2.0/6.;\n    float an = atan(uv2.y,uv2.x);\n    float sectors = mod(an+rep*.5,rep)-rep*.5;\n    float id = floor((an+rep*.5)/rep);\n    uv2 = vec2(sin(sectors), cos(sectors))*length(uv);\n    if (mod(id, 2.) < 0.1)\n        return abs(uv2.y-rad)-th;\n    return 10.;\n}\n\nfloat hexa(vec2 uv, float rad, float th)\n{\n    vec2 uv2 = uv;\n    float rep = PI*2.0/6.;\n    float an = atan(uv2.y,uv2.x);\n    float sectors = mod(an+rep*.5,rep)-rep*.5;\n    uv2 = vec2(sin(sectors), cos(sectors))*length(uv);\n    \n    return abs(uv2.y-rad)-th;\n}\n\nvec3 palette(float f)\n{\n    vec3 cols[4];\n    \n    cols[0] = vec3(0.341,0.094,0.271);\n    cols[1] = vec3(0.565,0.047,0.243);\n    cols[2] = vec3(0.780,0.000,0.224);\n    cols[3] = vec3(1.000,0.341,0.200);\n    \n    return cols[int(min(f*4.,3.))];\n}\n\nvec3 rdr(vec2 uv)\n{\n    float shp = iResolution.x*.5;\n    vec3 col = palette(uv.x+.35);\n    float sides = 6.;\n    float h = .1;\n    float angle = PI/sides;\n    float len =  h*2.0*tan(PI/sides)*.5;\n    float th = 0.004;\n    \n    vec3 yellow = vec3(1.000,0.765,0.000);\n\n    col = mix(col, yellow, 1.-sat(_sqr((uv+vec2(len*2.55,-len*1.5))*r2d(angle), vec2(len, th))*shp));\n    \n    vec2 uv2 = uv;\n    float rep = PI*2.0/sides;\n    float an = atan(uv2.y,uv2.x);\n    float sectors = mod(an+rep*.5,rep)-rep*.5;\n    uv2 = vec2(sin(sectors), cos(sectors))*length(uv);\n    \n    \n    \n    float shape2 = hexa(uv, .1, th);\n    shape2 = min(shape2, hexa_full(uv, .08,th));\n    col = mix(col, yellow, 1.-sat(shape2*shp));\n    \n    uv += vec2(-len,0.)*3.5;\n    float shape3 = hexa(uv, .1, th);\n\n    shape3 = max(shape3, -uv.y+len);\n    col = mix(col, yellow, 1.-sat(shape3*shp));\n    \n    uv += vec2(-len,0.)*3.5;\n    float shape4 = hexa(uv, .1, th);\n    col = mix(col, yellow, 1.-sat(shape4*shp));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv-vec2(-.15,0.));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}