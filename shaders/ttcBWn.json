{
    "Shader": {
        "info": {
            "date": "1612493619",
            "description": "An interesting variant of fractal noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttcBWn",
            "likes": 13,
            "name": "Strange Life",
            "published": 3,
            "tags": [
                "noise",
                "strange",
                "hairynoise",
                "hairy"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "float WhiteNoise(in vec3 p) {\n    return fract(1853.475 * cos(dot(p, vec3(1385.846, 1548.847, 4.837))));\n}\n\nfloat SmoothNoise(in vec3 p) {\n    vec3 c = floor(p);\n    vec3 l = fract(p);\n    l *= l * (3.0 - 2.0 * l);\n\n    float ldb = WhiteNoise(c);\n    float rdb = WhiteNoise(c + vec3(1.0, 0.0, 0.0));\n    float lub = WhiteNoise(c + vec3(0.0, 1.0, 0.0));\n    float rub = WhiteNoise(c + vec3(1.0, 1.0, 0.0));\n    float ldf = WhiteNoise(c + vec3(0.0, 0.0, 1.0));\n    float rdf = WhiteNoise(c + vec3(1.0, 0.0, 1.0));\n    float luf = WhiteNoise(c + vec3(0.0, 1.0, 1.0));\n    float ruf = WhiteNoise(c + 1.0);\n\n    return mix(mix(mix(ldb, rdb, l.x), mix(lub, rub, l.x), l.y),\n               mix(mix(ldf, rdf, l.x), mix(luf, ruf, l.x), l.y),\n               l.z);\n}\n\nfloat HairyNoise(in vec3 p, in float scale, in float octaves) {\n    p *= scale;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        // Magic numbers\n        p.xz *= mat2(-0.48406725864, -0.87503079323, 0.87503079323, -0.48406725864);\n        p.yz *= mat2(0.15022546991, -0.98865176285, 0.98865176285, 0.15022546991);\n\n        value += abs(SmoothNoise(p) * 2.0 - 1.0) * nscale;\n        tscale += nscale;\n        nscale *= 0.25;\n\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(pow(1.0 - HairyNoise(vec3(uv * 5.0, 0.25 * iTime), 1.0, 10.0), 5.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}