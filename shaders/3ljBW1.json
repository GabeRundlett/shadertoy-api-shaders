{
    "Shader": {
        "info": {
            "date": "1598837434",
            "description": "Does it need a description",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljBW1",
            "likes": 1,
            "name": "Triple cubemap + high fov ðŸ¤”",
            "published": 3,
            "tags": [
                "raymarching",
                "fov",
                "cubemaps"
            ],
            "usePreview": 0,
            "username": "xacer",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "\n\n\nconst int MAXSTEPS = 400;\nconst float EPSILON = 0.001;\n\nvec3 cam = vec3(0.0, 0.0, 0.0);\nmat3 camMatrix = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n\nvec3 createRay (in vec2 uv) {\n\treturn normalize(vec3(uv, 1.0)) * camMatrix;\n}\n\nvoid kib (inout vec2 prev, in float d, in float id) {\n    if (prev.x > d) {\n    \tprev.x = d;\n        prev.y = id;\n    }\n}\n\nfloat sdSphere (in vec3 p, in vec3 c, in float r) {\n    return r - length(p - c);\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 map (in vec3 p) {\n    vec2 v = vec2(1.0 - sdBox(p, vec3(1.0)), 1.0);\n    return v;\n}\n\nconst vec3 xDir = vec3(0.00001, 0, 0);\nconst vec3 yDir = vec3(0, 0.00001, 0);\nconst vec3 zDir = vec3(0, 0, 0.00001);\nvec3 surfaceNormal (in vec3 pos) {\n    vec3 normal = vec3(\n        map(pos + xDir).x - map(pos - xDir).x,\n        map(pos + yDir).x - map(pos - yDir).x,\n        map(pos + zDir).x - map(pos - zDir).x\n    );\n    return normalize(normal);\n}\n\nvec3 ld = vec3(1.0, 0.0, 0.0);\n\nvec3 trace (in vec3 ro, in vec3 rd) {\n    float t = 0.0;\n    for (int i = 0; i < MAXSTEPS; i ++) {\n    \tvec3 pos = ro + t * rd;\n        vec2 dist = map(pos);\n        if (dist.x < EPSILON) {\n        \tvec3 no = surfaceNormal(pos);\n            \n            float diffuse = max(-dot(no, ld), 0.0);\n            float specular = max(-dot(reflect(rd, no), ld), 0.0);\n            specular = pow(specular, 32.0);\n            \n            //float shade = diffuse * 0.7 + specular * 0.3;\n            float shade = 1.0;\n            vec3 tint = texture(iChannel0, pos).rgb;\n            \n            vec3 an = abs(no);\n            if (an.x > an.y && an.x > an.z) {\n           \t\ttint = texture(iChannel1, pos).rgb;\n            } else if (an.y > an.x && an.y > an.z) {\n            \ttint = texture(iChannel2, pos).rgb;\n            }\n            return shade * tint;\n            \n        }\n        t += dist.x;\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    \n    ld.x = -cos(iTime);\n    ld.z = -sin(iTime);\n    \n    float xyRot = (iMouse.x - iResolution.x / 2.0) / 90.0;\n    float zRot = (iMouse.y - iResolution.y / 2.0) / 90.0;\n   \tcamMatrix = mat3(1, 0, 0,\t0, cos(zRot), sin(zRot),0, -sin(zRot), cos(zRot)) * \n\t\t\tmat3(cos(xyRot), 0, sin(xyRot), 0, 1, 0, -sin(xyRot), 0, cos(xyRot));\n    \n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 20.0 * (fragCoord-(iResolution.xy/2.0))/max(iResolution.x, iResolution.y);\t\n    vec3 ray = createRay(uv);\n    \n    vec3 col = trace(cam, ray);\n    \n    // Output to screen\n    fragColor = vec4(col.rgb, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}