{
    "Shader": {
        "info": {
            "date": "1609352589",
            "description": "Rotate camera by mouse\nPure voxel casting",
            "flags": 48,
            "hasliked": 0,
            "id": "WtcyW7",
            "likes": 2,
            "name": "voxel Bunny Test",
            "published": 3,
            "tags": [
                "voxel"
            ],
            "usePreview": 0,
            "username": "XutXtuX",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "//Local version on https://github.com/SirSeruju/voxelShaderVisualisation\n//It support png slices of voxel volume\n//With samplers it faster a lot\n\n#define MAX_DISTANCE 600.0\n\n\n#define VOLUME_SIZE_X 32\n#define VOLUME_SIZE_Y 32\n#define VOLUME_SIZE_Z 32\n// 32x32x32\n// from https://www.shadertoy.com/view/MdlyDs\nconst uint volume[1024] = uint[1024](0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,917504u,917504u,917504u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1966080u,12531712u,16742400u,16742400u,16723968u,16711680u,8323072u,4128768u,2031616u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,6144u,2063360u,16776704u,33553920u,33553920u,33553920u,33553920u,33520640u,16711680u,8323072u,8323072u,2031616u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,268435456u,402653184u,134217728u,201326592u,67108864u,0u,0u,7168u,2031104u,16776960u,33554176u,33554176u,33554304u,33554176u,33554176u,33554176u,33553920u,16744448u,8323072u,4128768u,1572864u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,805306368u,939524096u,402653184u,478150656u,260046848u,260046848u,260046848u,125832192u,130055680u,67108608u,33554304u,33554304u,33554304u,33554304u,33554304u,33554304u,33554304u,33554176u,16776704u,8355840u,4128768u,917504u,0u,0u,0u,0u,0u,0u,0u,0u,0u,805306368u,1056964608u,1056964608u,528482304u,528482304u,260046848u,260046848u,260046848u,130039296u,130154240u,67108739u,67108807u,33554375u,33554375u,33554370u,33554368u,33554368u,33554304u,33554304u,16776960u,8330240u,4128768u,393216u,0u,0u,0u,0u,0u,0u,0u,0u,939524096u,1040187392u,1040187392u,520093696u,251658240u,251658240u,260046848u,125829120u,125829120u,130088704u,63045504u,33554375u,33554375u,33554375u,33554407u,33554407u,33554370u,33554370u,33554374u,33554310u,16776966u,4144642u,917504u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,15360u,130816u,262017u,4194247u,33554383u,67108847u,33554415u,33554407u,33554407u,33554375u,33554375u,33554318u,2031502u,32262u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,31744u,130816u,262019u,2097151u,134217727u,134217727u,67108863u,33554415u,33554407u,33554415u,33554383u,2097102u,982926u,32262u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,31744u,130816u,524263u,117964799u,127926271u,134217727u,67108863u,16777215u,4194303u,4194303u,2097151u,1048574u,65422u,16134u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3u,31751u,130951u,524287u,252182527u,261095423u,261095423u,59768830u,2097150u,1048574u,1048575u,262143u,131070u,65534u,16134u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,7u,31751u,130959u,503840767u,520617982u,529530879u,261095423u,1048575u,1048574u,1048574u,524286u,524287u,131070u,65534u,16134u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3u,1799u,32527u,134348750u,1040449534u,1057488894u,520617982u,51380223u,1048575u,1048575u,524287u,524287u,524287u,131070u,65534u,15886u,6u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1536u,3968u,8175u,65535u,1006764030u,1040449534u,1057488894u,50855934u,524286u,524286u,524287u,524287u,524286u,262142u,131070u,65534u,32270u,14u,6u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3968u,8160u,8191u,805371903u,2080505854u,2114191358u,101187582u,34078718u,524286u,524286u,524286u,524286u,524286u,524286u,262142u,131070u,32766u,8078u,3590u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8128u,8176u,16383u,2013331455u,2080505854u,235143166u,101187582u,524286u,1048574u,1048574u,1048574u,1048574u,524286u,524286u,262142u,131070u,32766u,16382u,8070u,1024u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8160u,8184u,1879064574u,2013331455u,470024190u,67371006u,524286u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,524286u,262142u,65534u,16382u,8160u,1024u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8128u,8184u,805322750u,402718719u,134479870u,524286u,524286u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,65534u,16382u,16368u,1792u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3968u,8184u,16382u,131071u,262142u,524286u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,65534u,16382u,16368u,1792u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1792u,8184u,16380u,65535u,262143u,524286u,524286u,1048574u,1048574u,1048575u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,65534u,16376u,16368u,1792u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8176u,16376u,32767u,262143u,524286u,1048574u,1048574u,1048575u,1048575u,1048575u,1048575u,1048574u,1048574u,524286u,262142u,32766u,16376u,8176u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,4032u,8184u,32766u,262142u,524286u,524286u,1048575u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,32766u,16376u,8176u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,384u,8184u,32766u,131070u,262142u,524286u,1048575u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,524286u,131070u,32766u,16368u,1920u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,4080u,32764u,65534u,262142u,524286u,524286u,524286u,1048574u,1048574u,524286u,524286u,524286u,262142u,131070u,32764u,8160u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,256u,16376u,32760u,131068u,262140u,262142u,524286u,524286u,524286u,524286u,524286u,262142u,131070u,65532u,16368u,3840u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3968u,32752u,65528u,131068u,262142u,262142u,262142u,262142u,262142u,262142u,262140u,131064u,32752u,7936u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8064u,32736u,65528u,131070u,131070u,131070u,131070u,131070u,131070u,65532u,32752u,8160u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3456u,16376u,32764u,65534u,65534u,65534u,32766u,32764u,16380u,4048u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,48u,2680u,8188u,8188u,8188u,8188u,4092u,120u,16u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,120u,248u,508u,508u,508u,248u,240u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,96u,240u,504u,504u,504u,240u,96u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,224u,224u,224u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u);\n\n\n/*\n#define VOLUME_SIZE_X 15\n#define VOLUME_SIZE_Y 5\n#define VOLUME_SIZE_Z 1\nconst uint volume[VOLUME_SIZE_X * VOLUME_SIZE_Y] = uint[VOLUME_SIZE_X * VOLUME_SIZE_Y](\n    1u, 1u, 1u, 0u, 1u, 0u, 0u, 0u, 1u, 1u, 1u, 0u, 1u, 0u, 0u,\n    1u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 1u, 0u, 1u, 0u, 1u, 0u, 0u,\n    1u, 1u, 1u, 0u, 1u, 0u, 0u, 0u, 1u, 0u, 1u, 0u, 1u, 1u, 1u,\n    1u, 0u, 0u, 0u, 1u, 0u, 0u, 0u, 1u, 0u, 1u, 0u, 1u, 0u, 1u,\n    1u, 1u, 1u, 0u, 1u, 1u, 1u, 0u, 1u, 1u, 1u, 0u, 1u, 1u, 1u);\n*/\n\n\nuint getVoxel(ivec3 c){\n    /*\n    if (c.x < 0 ||\n        c.y < 0 ||\n        c.z < 0) return 0u;\n    if (c.x > VOLUME_SIZE_X - 1 ||\n        c.y > VOLUME_SIZE_Y - 1 ||\n        c.z > VOLUME_SIZE_Z - 1) return 0u;\n    */\n    \n    c %= 32;    \n    int index = c.x * VOLUME_SIZE_X + c.z;\n    return volume[index] & (1u << c.y);\n}\n\n\n// alhorithm from http://www.cse.chalmers.se/edu/year/2010/course/TDA361/grid.pdf\nfloat voxelCast(vec3 ro, vec3 rd, float maxDist){\n    float t = 0.0;\n\tvec3 ic = floor(ro);\n\tvec3 stepC = sign(rd);\n    vec3 tDelta = abs(vec3(1) / rd);\n    vec3 dist = (ic - ro) * stepC + max(vec3(0), stepC);\n\tvec3 tMax = tDelta * dist;\n    \n    while (getVoxel(ivec3(ic)) == 0u && t < maxDist) {\n        float tMin = min(min(tMax.x, tMax.y), tMax.z);\n        t = tMin;\n        vec3 s = sign(vec3(tMin) - tMax) + vec3(1);\n        ic += stepC * s;\n        tMax += tDelta * s;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    //vec3 ro = texture(iChannel0, vec2(0, 0)).xyz + vec3(0, 30, 0);\n    vec3 ro = vec3(32, 32, 32);\n    vec3 rd = vec3(-1, 0, 0);\n    rd.y = m.y * 2.0 - 1.0;\n    rd.xz = vec2(1, 0) * rot(-m.x * 6.28) * sin(m.y * 3.14);\n    rd = normalize(rd);\n    rd = rotCam(uv, ro, rd, 1.0);\n\n    vec3 col = vec3(0.7, 0.7, 0.3) * (1.0 - voxelCast(ro, rd, MAX_DISTANCE) / MAX_DISTANCE);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_STEPS 128\n#define SURFACE_DIST 0.01\n#define MAX_DIST 3000.0\n#define NORMAL_EPSILON 0.01\n\nmat2 rot(float a) {\n\tfloat c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 rotCam(vec2 uv, vec3 p, vec3 f, float z) {;\n    vec3 r = normalize(cross(vec3(0, 1, 0), f));\n    vec3 u = cross(f, r);\n    vec3 c = p + f * z;\n    vec3 i = c + uv.x * r + uv.y * u;\n    vec3 d = normalize(i - p);\n    return d;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define KEY_LEFT 65\n#define KEY_FORWARD 87\n#define KEY_RIGHT 68\n#define KEY_BACKWARD 83\n#define KEY_DASH 16\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    if (floor(fragCoord) == vec2(0, 0)) {\n        vec3 rd;\n        rd.y = m.y * 2.0 - 1.0;\n        rd.xz = vec2(1, 0) * rot(-m.x * 6.28) * sin(m.y * 3.14);\n        rd = normalize(rd);\n\n        float dash = texelFetch(iChannel1, ivec2(KEY_DASH,0), 0).x * 10.0 + 1.0;\n        float forward = texelFetch(iChannel1, ivec2(KEY_FORWARD,0), 0).x;\n        float backward = texelFetch(iChannel1, ivec2(KEY_BACKWARD,0), 0).x;\n        float right = texelFetch(iChannel1, ivec2(KEY_RIGHT,0), 0).x;\n        float left = texelFetch(iChannel1, ivec2(KEY_LEFT,0), 0).x;\n        vec3 pos = vec3(0, 0, 0);\n        if (iTime > 1.0)\n            pos = texture(iChannel0, vec2(0, 0)).xyz;\n            \n        pos += (forward - backward) * rd * 0.1 * dash;\n        pos += (right - left) * normalize(cross(vec3(0, 1, 0), rd)) * 0.1 * dash;\n        //pos += texture(iChannel0, vec2(1, 0)).xyz;\n        fragColor = vec4(pos, 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}