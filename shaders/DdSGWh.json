{
    "Shader": {
        "info": {
            "date": "1667496681",
            "description": "The wall of speakers\n\nsound:\nminutesunlimited\nhttps://soundcloud.com/minutesunlimited\n\n",
            "flags": 64,
            "hasliked": 0,
            "id": "DdSGWh",
            "likes": 89,
            "name": "The wall of speakers",
            "published": 3,
            "tags": [
                "graphicdesign",
                "cineshader"
            ],
            "usePreview": 1,
            "username": "yasuo",
            "viewed": 9230
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xy)-t.x,p.z);\n    return length(q)-t.y;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\n// tweaked as the center aligned horizontal capsule. \nfloat sdHorizontalCapsule( vec3 p, float w, float r )\n{\n  p.x-= clamp( p.x, -w*0.5, w*0.5 );\n  return length( p ) - r;\n}\n\nfloat speaker(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.45,0.95,0.34))-0.03;\n    float d2 = length(p-vec3(0.,-0.2,-0.53))-0.38;\n    \n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.,-0.2,-0.36),vec2(0.36,0.03));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.,-0.2,-0.32),vec2(0.32,0.025));\n    d = min(d,d2);\n    d2 = length(p-vec3(0.,-0.25,-0.08))-0.12;\n    d = min(d,d2);\n    \n    d2 = sdHorizontalCapsule(p-vec3(0.,-0.75,-0.36),0.6,0.06);\n    d = max(-d2,d);\n    \n    d2 = length(p-vec3(0.,0.55,-0.36))-0.2;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.,0.55,-0.36),vec2(0.2,0.03));\n    d = min(d,d2);\n    \n    p.z-=-0.36;\n    p.x = abs(p.x)-0.4;\n    p.y = abs(p.y)-0.9;\n    d2 = length(p)-0.03;\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat speaker2(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.45,0.34))-0.03;\n    float d2 = sdBox(p-vec3(0.,0.,-0.35), vec3(0.9,0.4,0.01))-0.03;\n    d = max(-d2,d);\n    \n    p.x = abs(p.x);\n    d2 = length(p-vec3(0.4,0.,-0.5))-0.36;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.4,0.,-0.3),vec2(0.34,0.03));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.4,0.,-0.29),vec2(0.3,0.025));\n    d = min(d,d2);\n    d2 = length(p-vec3(0.45,0.,-0.08))-0.1;\n    d = min(d,d2);\n    \n    p.z-=-0.3;\n    p.x = abs(p.x)-0.86;\n    p.y = abs(p.y)-0.36;\n    d2 = length(p)-0.03;\n    d = min(d,d2);    \n    \n    return d;\n}\n\nfloat speaker3(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.95,0.34))-0.03;\n    \n    float d2 = length(p-vec3(0.0,0.,-0.68))-0.66;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.35),vec2(0.64,0.05));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.33),vec2(0.6,0.045));\n    d = min(d,d2);\n    \n    d2 = length(p-vec3(0.0,0.,0.1))-0.2;\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.3),vec2(0.56,0.035));\n    d = min(d,d2);    \n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.24),vec2(0.52,0.035));\n    d = min(d,d2);        \n        \n    d2 = sdTorus(p-vec3(0.0,0.,-0.19),vec2(0.47,0.035));\n    d = min(d,d2);  \n    \n    d2 = abs(length(p.xy)-0.73)-0.07;\n    d = min(d,max((abs(p.z)-0.38),d2));\n    \n    p.z-=-0.37;\n    p.x = abs(p.x)-0.86;\n    p.y = abs(p.y)-0.86;\n    d2 = length(p)-0.03;\n    d = min(d,d2);    \n    \n    p = prevP;\n    p.z-=-0.37;\n    p.xy = DF(p.xy,3.0);\n    p.xy -= vec2(0.52);\n    d2 = length(p)-0.03;\n    d = min(d,d2); \n    \n    p = prevP;\n    p.xy*=Rot(radians(sin(iTime)*120.));\n    p.z-=-0.37;\n    p.y=abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));    \n    \n    p = prevP;\n    p.xy*=Rot(radians(90.+sin(iTime)*120.));\n    p.z-=-0.37;\n    p.y=abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));      \n    \n    return d;\n}\n\nfloat changeSpeakers(vec3 p, float start, float speed){\n    vec3 prevP = p;\n    float endTime = 3.;\n    float t = iTime*speed;\n    float scenes[3] = float[](0.,1.,2.);\n    for(int i = 0; i<scenes.length(); i++){\n        scenes[i] = mod(scenes[i]+start,endTime);\n    }\n    \n    float scene = scenes[int(mod(t,endTime))];\n    \n    float d = 10.;\n    if(scene<1.) {\n        p.x=abs(p.x)-0.5;\n        d = speaker(p);\n    } else if (scene >= 1. && scene<2.){\n        p.y=abs(p.y)-0.5;\n        d = speaker2(p);\n    } else {\n        d = speaker3(p);\n    }\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.y -=iTime*0.5;\n    vec2 id = floor(p.xy*0.5);\n    p.z-=3.;\n    p.xy = mod(p.xy,2.0)-1.0;\n\n    id*=.5;\n    float rand = Hash21(id);\n    \n    float d = 10.;\n    p.z-=rand*0.3;\n    if(rand<0.3) {\n        d = changeSpeakers(p,1.,0.5+rand);\n    } else if(rand>=0.3 && rand<0.7) {\n        d = speaker3(p);\n    } else {\n        p.x=abs(p.x)-0.5;\n        d = speaker(p);\n    }\n    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.3));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.5);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        float scene = mod(iTime,15.);\n        float rotY = -10.;\n        float rotX = 0.;\n        if(scene>=5. && scene<10.){\n            rotY = 0.;\n            rotX = -30.;\n        } else if(scene>=10.){\n            rotY = 0.;\n            rotX = 30.;\n        }\n        \n        ro.yz *= Rot(radians(rotY));\n        ro.xz *= Rot(radians(rotX));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 30062,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/minutesunlimited/violation-twanz-nola-bounce-flip"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}