{
    "Shader": {
        "info": {
            "date": "1547217556",
            "description": "color lights shining",
            "flags": 48,
            "hasliked": 0,
            "id": "3ssGRl",
            "likes": 1,
            "name": "Color Shine",
            "published": 3,
            "tags": [
                "color",
                "hsv",
                "shine"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "const float tau=8.*atan(-1.);\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\tvec3 p=abs(fract(c.x+K.xyz)*6.0-K.w);\n\treturn c.z*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),c.y);\n}\nbool isActive(int keyCode){\n\treturn texture(iChannel0,vec2((float(keyCode)+0.5)/256.,1.)).r>0.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n\tvec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y*3.;\n\tint object=int(texture(iChannel0,vec2(0.,1.)).r);\n\tfragColor=vec4(0);\n\tvec2 d;\n\tfloat w;\n\tvec4 v;\n\tvec4 v2;\n\tvec2 p;\n\tvec2 f=vec2(0);\n    for(int i=0;i<objects;i++){\n\t\tv=texture(iChannel0,vec2((float(i)+0.5)/iResolution.x,0.));\n\t\tv2=texture(iChannel0,vec2((float(i)+0.5)/iResolution.x,1.5/iResolution.y));\n\t\td=v.xy*vec2(sin(iTime*v2.x),cos(iTime*v2.y))+v.zw;\n        points[i]=vec3(d,v2.z);\n\t\td=uv-points[i].xy;\n        p=uv-v.zw;\n\t\tw=dot(d,d);\n        if(isActive(32)){\n\t\t\tfragColor+=0.01/w;\n\t\t\tw=4.*length(d)/(w*w+3.);\n\t\t\tw*=w;w*=w;w*=w;w*=w;w*=w;\n            if(object==i){\n\t\t\t\tfragColor+=w*vec4(1,0,0,1);\n\t\t\t\tfragColor+=0.001/dot(p,p);\n            }\n        }else{\n\t\t\tf+=normalize(d)/w*points[i].z;\n        } \n\t}\n    float m=1.-iMouse.x/iResolution.x*2.;\n    vec3 col=hsv2rgb(vec3(atan(f.x,f.y)/tau,m,clamp(length(f.xy),0.,1.)));\n\tfragColor+=vec4(col,1.);\n\t//fragColor=texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\nhighp float rand(vec2 co) {\n    return fract(sin(mod(dot(co.xy ,vec2(12.9898,78.233)),3.14))*43758.5453);\n}\nbool isPress(int keyCode){\n    bool pNow=texture(iChannel0,vec2((float(keyCode)+0.5)/256.,0.)).r>0.;\n    bool pBefore=texture(iChannel1,vec2((float(keyCode)+0.5)/256.,0.1)).r>0.;\n\treturn (!pBefore)&&pNow;\n}\nfloat press(int keyCode){\n    float pNow=texture(iChannel0,vec2(float(keyCode)/256.,0.)).r;\n\treturn pNow;\n}\nbool isActive(int keyCode){\n\treturn texture(iChannel0,vec2(float(keyCode)/256.,1.)).r>0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 c){\n\tvec2 uv=c/iResolution.xy;\n\tfloat objId=texture(iChannel1,vec2(0.,1.)).r;\n\tfragColor=texture(iChannel0,uv);\n    if(c.y<2.){\n\t\t\tfragColor=texture(iChannel1,uv);\n        if(iFrame==0){\n\t\t\tfragColor=vec4(rand(c)*3.,rand(c+0.1)*3.,rand(c+0.4)*6.-3.,0);\n\t\t\tif(c.y<1.)fragColor=vec4(rand(c+0.2)*5.,rand(c+0.3)*5.,0,0);\n        }\n    \tif(isActive(32)&&c.x<objId+1.&&c.x>objId){\n         \tif(c.y<1.){\n    \t    \tfragColor.y+=press(87)/10.;\n    \t    \tfragColor.y-=press(83)/10.;\n\t\t\t\tfragColor.x+=press(68)/10.;\n    \t    \tfragColor.x-=press(65)/10.;\n\t\t\t\tfragColor.w+=press(84)/10.;\n    \t    \tfragColor.w-=press(71)/10.;\n\t\t\t\tfragColor.z+=press(72)/10.;\n    \t    \tfragColor.z-=press(70)/10.;\n         \t}else{\n\t\t\t\tfragColor.y+=press(73)/10.;\n    \t    \tfragColor.y-=press(75)/10.;\n\t\t\t\tfragColor.x+=press(76)/10.;\n    \t    \tfragColor.x-=press(74)/10.;\n\t\t\t\tfragColor.z+=press(38)/10.;\n    \t    \tfragColor.z-=press(40)/10.;\n         \t}\n    \t}\n    }\n    if(c.y>R.y-1.&&c.x<1.){\n\t\tfloat objId=texture(iChannel1,vec2(0.,1.)).r;\n\t\tif(isPress(39))objId=mod(objId+1.,float(objects));\n        if(isPress(37))objId=mod(objId+1.,float(objects));\n\t\tfragColor.r=objId;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int objects=15;\nvec3 points[objects];",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}