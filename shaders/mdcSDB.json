{
    "Shader": {
        "info": {
            "date": "1680378837",
            "description": "Glowing orb",
            "flags": 0,
            "hasliked": 0,
            "id": "mdcSDB",
            "likes": 31,
            "name": "Glowy orb",
            "published": 3,
            "tags": [
                "orb",
                "glowing"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 787
        },
        "renderpass": [
            {
                "code": "#define MAX_RAY_MARCH_STEPS 32\n#define MAX_DISTANCE 4.0\n#define SURFACE_DISTANCE 0.002\n\nstruct Hit\n{\n    float dist;\n    float closest_dist;\n    vec3 p;\n};\n    \nfloat specularBlinnPhong(vec3 light_dir, vec3 ray_dir, vec3 normal)\n{\n    vec3 halfway = normalize(light_dir + ray_dir);\n    return max(0.0, dot(normal, halfway));\n}\n\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p)\n{\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat SDF(vec3 point)\n{\n    vec3 p = vec3(point.xy, iTime * 0.3 + point.z);\n    float n = (noise(p) + noise(p * 2.0) * 0.5 + noise(p * 4.0) * 0.25) * 0.57;\n    return length(point) - 0.35 - n * 0.3;\n}\n\nvec3 getNormal(vec3 point)\n{\n    vec2 e = vec2(0.002, 0.0);\n    return normalize(SDF(point) - vec3(SDF(point - e.xyy), SDF(point - e.yxy), SDF(point - e.yyx)));\n}\n\nHit raymarch(vec3 p, vec3 d)\n{\n    Hit hit;\n    hit.closest_dist = MAX_DISTANCE;\n    for (int i = 0; i < MAX_RAY_MARCH_STEPS; ++i)\n    {\n        float sdf = SDF(p);\n        p += d * sdf; \n        hit.closest_dist = min(hit.closest_dist, sdf);\n        hit.dist += sdf;\n        if (hit.dist >= MAX_DISTANCE || abs(sdf) <= SURFACE_DISTANCE)\n            break; \n    }\n    \n    hit.p = p;\n    return hit;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    fragColor = vec4(0, 0, 0, 1);\n    if (dot(uv, uv) > 1.0) return;\n    vec3 pos = vec3(0, 0, -1);\n    vec3 dir = normalize(vec3(uv, 1));\n    \n    Hit hit = raymarch(pos, dir);\n    fragColor = vec4(pow(max(0.0, 1.0 - hit.closest_dist), 32.0) * (max(0.0, dot(uv, vec2(0.707))) * vec3(0.3, 0.65, 1.0) + max(0.0, dot(uv, vec2(-0.707))) * vec3(0.6, 0.35, 1.0) + vec3(0.4, 0.5, 1.0)), max(0.0, hit.closest_dist));\n    if (hit.closest_dist >= SURFACE_DISTANCE)\n        return;\n    vec3 normal = getNormal(hit.p);\n\n    vec3 ray_dir = normalize(pos - hit.p);\n    float facing = max(0.0, sqrt(dot(normal, vec3(0.707, 0.707, 0))) * 1.5 - dot(normal, -dir));\n    fragColor = mix(vec4(0), vec4(0.3, 0.65, 1.0, 1.0), 0.75 * facing * facing * facing);\n    \n    facing = max(0.0, sqrt(dot(normal, vec3(-0.707, -0.707, 0))) * 1.5 - dot(normal, -dir));\n    fragColor = vec4(fragColor.rgb, 0) + mix(vec4(0), vec4(0.6, 0.35, 1.0, 1.0), 0.75 * facing * facing * facing);\n    \n    facing = max(0.0, sqrt(dot(normal, vec3(0.0, 0.0, -1.0))) * 1.5 - dot(normal, -dir));\n    fragColor = vec4(fragColor.rgb, 0) + mix(vec4(0), vec4(0.4, 0.5, 1.0, 1.0), 0.5 * facing * facing * facing);\n    \n    fragColor = vec4(fragColor.rgb, 0) + mix(vec4(0), vec4(0.4, 0.625, 1.0, 1.0), pow(specularBlinnPhong(normalize(vec3(600, 800, -500) - hit.p), ray_dir, normal), 12.0) * 1.0);\n    fragColor = vec4(fragColor.rgb, 0) + mix(vec4(0), vec4(0.6, 0.5625, 1.0, 1.0), pow(specularBlinnPhong(normalize(vec3(-600, -800, -00) - hit.p), ray_dir, normal), 16.0) * 0.75);\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.25));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}