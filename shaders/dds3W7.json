{
    "Shader": {
        "info": {
            "date": "1666256413",
            "description": "GPVM Path Tracing Starting Point\n\nPrepared for this meeting: https://www.meetup.com/graphics-programming-virtual-meetup/events/289089535/\n\nPath Tracing logic is in Buffer A.\n\nMouse drag: change the view direction",
            "flags": 32,
            "hasliked": 0,
            "id": "dds3W7",
            "likes": 4,
            "name": "Fork of GPVM Path Tracing",
            "published": 3,
            "tags": [
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "dzil123",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n  * Path Tracing\n  */\n\n// Ray\nstruct Ray {\n  vec3 origin;\n  vec3 direction;\n};\n\nvec3 rayAt(Ray ray, float t) {\n  return ray.origin + t * ray.direction;\n}\n\nstruct Material {\n    int type;\n    vec3 color;\n    float roughness;\n};\n\nMaterial materials[] = Material[] (\n    Material(0, vec3(0.9, 0.9, 0.9), 0.0),\n    Material(1, vec3(1.0, 1.0, 1.0), 1.0),\n    Material(0, vec3(0.3, 0.9, 0.8), 0.0)\n);\n\nstruct Sphere {\n    vec3 center;\n    float radius;\n    int material_index;\n};\n\nSphere spheres[] = Sphere[] (\n    Sphere(vec3(0.0, -1.0, -2.0), 1.0, 0),\n    Sphere(vec3(-5.0, 0.0, 15.0), 10.0, 1),\n    Sphere(vec3(5.0, 0.0, 20.0), 10.0, 2),\n    Sphere(vec3(0.0, -54.0, 0.0), 50.0, 1)\n);\n\n// Scene\nvec3 background(Ray ray)\n{\n    float y = ray.direction.y;\n    vec3 col = vec3(0.7, 0.8, 1.0) - 0.5 * y;\n    col = mix(col, vec3(0.8, 0.9, 1.0), min(exp(-10.0*y), 0.0));\n    //col = vec3(y * .5 + .5);\n    col = texture(iChannel2, ray.direction).rgb;\n    //col += 0.1 * sky(ray.direction);\n    return col;\n}\n\nstruct HitRecord {\n    float t;\n    int material_index;\n    vec3 position;\n    vec3 normal;\n};\n\nbool raySphereIntersection(Ray ray, Sphere sphere, inout HitRecord hit) {\n    vec3 oc = ray.origin - sphere.center;\n    float a = dot(ray.direction, ray.direction);\n    float b = 2.0 * dot(oc, ray.direction);\n    float c = dot(oc, oc) - sphere.radius * sphere.radius;\n    float discriminant = b*b - 4.0*a*c;\n    \n    if (discriminant > 0.0) {\n        float t = (-b - sqrt(discriminant) ) / (2.0*a);\n        \n        if (t > 0.0) {\n            vec3 hitPoint = rayAt(ray, t);\n            \n            if (t < hit.t) {\n                hit.t = t;\n                hit.material_index = sphere.material_index;\n                hit.normal = normalize(hitPoint - sphere.center);\n                hit.position = hitPoint;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n\nRay generateRay(vec2 fragCoord, inout uint rngState);\n\n\nbool castRay(Ray ray, inout HitRecord hit) {\n    bool anyHit = false;\n    \n    uint x = 0u;\n    vec3 cameraPos = generateRay(vec2(0.0), x).origin;\n    //anyHit = anyHit || raySphereIntersection(ray, Sphere(cameraPos, 5.0, vec3(1.0)), hit);\n    \n    for (int i = 0; i < spheres.length(); i++) {\n        anyHit = raySphereIntersection(ray, spheres[i], hit) || anyHit;\n    }\n    \n    return anyHit;\n}\n\n\n\n// Path tracing\nvec3 traceRay(Ray ray, inout uint rngState)\n{\n    vec3 color = vec3(1.0);\n\n    for (int i = 0; i < 30; i++) {\n        HitRecord hit;\n        hit.t = 10000.0;\n        if (!castRay(ray, hit)) {\n            break;\n        }\n      \n        Material mat = materials[hit.material_index];\n        \n        switch (mat.type) {\n            case 0:\n                color *= mat.color;\n                ray = Ray(hit.position, reflect(ray.direction, hit.normal));\n                break;\n            case 1:\n                color *= mat.color;\n                vec3 dir = normalize(hit.normal + randomPointSphere(rngState) * mat.roughness);\n                ray = Ray(hit.position, dir);\n                break;\n        }\n        continue;\n        \n        vec3 prevDir = ray.direction;\n        //color = max(color, vec3(0.0));\n        \n        \n        vec2 uv = iMouse.xy / iResolution.xy;\n        bool metallic = uv.x > 0.5;\n        float roughness = clamp(uv.y * 1.1 - 0.1, 0.0, 1.0);\n        \n        metallic = true;\n        roughness = .0;\n        \n        if (metallic) {\n            ray.direction += randomPointSphere(rngState) * roughness;\n        } else {\n            bool algorithm1 = true;\n            if (algorithm1) {\n                ray.direction = mix(ray.direction, hit.normal + randomPointSphere(rngState), roughness * 0.5 + 0.5);\n            } else {\n                vec3 rng = randomPointSphere(rngState);\n                if (dot(rng, hit.normal) < 0.0) {\n                    rng *= -1.0;\n                }\n                //color *= dot(rng, hit.normal);\n                ray.direction = rng;\n            }\n        }\n        \n        //ray.direction += randomPointSphere(rngState) * 0.5;\n        //color *= 1.0 + pow(max(0.0, dot(prevDir, ray.direction)), 1.0);\n        //ray.direction = hit.normal + randomPointSphere(rngState);\n        ray.direction = normalize(ray.direction);\n        continue;\n        \n        vec3 rng = randomPointSphere(rngState);\n        float rngdot = dot(rng, hit.normal);\n        rng *= sign(rngdot);\n        //return vec3(rngdot);\n        //return hit.normal;\n        return vec3(abs(abs(rngdot) - dot(rng, hit.normal)));\n        color *= abs(rngdot);\n        ray.direction = rng;\n    }\n\n    if (length(color) < 0.999 && length(background(ray)) > 0.99999) {\n        //color *= 10.0;\n    }\n\n    return color * background(ray);\n    return randomPointSphere(rngState);\n}\n\nRay generateRay(vec2 fragCoord, inout uint rngState) {\n    vec2 rotation = load(ROTATION_INDEX).xy / iResolution.x;\n    \n    vec2 jitter = vec2(uniformFloat01(rngState), uniformFloat01(rngState)) - 0.5f;\n    jitter *= 1.0;\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    \n    mat3 mat = CameraRotation(rotation);\n    \n    vec3 ro = vec3(0.0, 0.0, -10.0) * mat;\n    vec3 rd = normalize(vec3((fragCoord + jitter - iResolution.xy*0.5)*a, 0.5)) * mat;\n    return Ray(ro, rd);\n}\n\n\nvec3 finalGather(vec3 color, vec2 fragCoord) {\n    int frameCount = getFrameCount();\n    if (frameCount != 0) {\n        vec3 lastFrameColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n        color = mix(lastFrameColor, color, 1.0f / float(frameCount+1));\n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);    \n    Ray ray = generateRay(fragCoord, rngState);\n\n    vec3 col = traceRay(ray, rngState);\n    col = finalGather(col, fragCoord);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n  * Persistent states\n  */\n#define store(pos, value) if (all(equal(ivec2(fragCoord), (pos)))) { fragColor = (value); }\n\nvoid updateCamera(inout vec4 fragColor, in vec2 fragCoord)\n{\n    if (iFrame == 0) {\n        store(PREVIOUS_ROTATION_INDEX, vec4(0.0, 0.0, 0.0, 0.0));\n        store(ROTATION_INDEX, vec4(0.0, 0.0, 0.0, 0.0));\n    }\n    \n    vec2 prevRotation = load(PREVIOUS_ROTATION_INDEX).xy;\n    vec3 rotation = load(ROTATION_INDEX).xyz;\n\n    bool mouseButtonDown = iMouse.z > 0.0;\n    vec2 mouseCurrentPos = iMouse.xy;\n    vec2 mouseClickPos = abs(iMouse.zw);\n    vec2 mouseDelta = (mouseClickPos - mouseCurrentPos) * 3.0;\n    \n    if (mouseButtonDown) {\n        store(ROTATION_INDEX, vec4(prevRotation + mouseDelta, 1.0, 0.0));\n    } else if (rotation.z != 0.0) {\n        store(PREVIOUS_ROTATION_INDEX, vec4(rotation.xy, 0.0, 0.0));\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = load(ivec2(fragCoord));\n\n    bool isResolutionChanged = any(notEqual(load(RESOLUTION_INDEX).xy, iResolution.xy));\n    store(RESOLUTION_INDEX, vec4(iResolution, 0.0));\n    \n    bool atStart = iFrame == 0;\n    updateCamera(fragColor, fragCoord);\n\n    store(MOUSE_POS_INDEX, iMouse);\n    \n    bool isMouseMoved = !all(equal(load(MOUSE_POS_INDEX), iMouse));\n    bool needResetFrame = atStart || isMouseMoved || isResolutionChanged;\n    int frameCount = needResetFrame ? 0 : getFrameCount() + 1;\n    store(FRAME_COUNT_INDEX, vec4(float(frameCount), 0.0, 0.0, 0.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define load(pos) texelFetch(iChannel1, (pos), 0)\n\nconst ivec2 MOUSE_POS_INDEX = ivec2(0, 0);\nconst ivec2 RESOLUTION_INDEX = ivec2(1, 0);\n\nconst ivec2 FRAME_COUNT_INDEX = ivec2(0, 1);\n\nconst ivec2 PREVIOUS_ROTATION_INDEX = ivec2(2, 0);\nconst ivec2 ROTATION_INDEX = ivec2(2, 1);\n\n#define getFrameCount() int(load(FRAME_COUNT_INDEX).x)\n\nmat3 CameraRotation(vec2 m)\n{\n    m.y = -m.y;\n    \n    vec2 s = sin(m);\n    vec2 c = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, c.y, s.y, 0.0, -s.y, c.y);\n    mat3 rotY = mat3(c.x, 0.0, -s.x, 0.0, 1.0, 0.0, s.x, 0.0, c.x);\n    \n    return rotX * rotY;\n}\n\nvec3 lessThanV3(vec3 f, float value)\n{\n    return vec3(\n        (f.x < value) ? 1.0f : 0.0f,\n        (f.y < value) ? 1.0f : 0.0f,\n        (f.z < value) ? 1.0f : 0.0f);\n}\n\n// Random\nuint pcg(uint seed)\n{\n    uint state = seed * 747796405u + 2891336453u;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return (word >> 22u) ^ word;\n}\n \nfloat uniformFloat01(inout uint state)\n{\n    state = pcg(state);\n    return float(state) / 4294967296.0;\n}\n\nfloat uniformFloatn01(inout uint state)\n{\n    return uniformFloat01(state) * 2.0 - 1.0;\n}\n\nvec3 randomPointSphere(inout uint state) {\n    vec3 pos = vec3(1.0);\n    \n    for (int i = 0; i < 50; i++) {\n        pos = vec3(uniformFloatn01(state), uniformFloatn01(state), uniformFloatn01(state));\n        float l = length(pos);\n        if (l < 1.0 && l > 0.01) {\n            break;\n        }\n    }\n    return normalize(pos);\n}\n\nvec3 sky(vec3 eyedir) {\n\tfloat pi = 3.1415;\n\t\n\tfloat v_angle = acos(clamp(eyedir.y, -1.0, 1.0));\n\tfloat c = (1.0 - v_angle / (pi * 0.5));\n\tfloat sky_curve = 0.06;\n\tvec3 sky_horizon_color = vec3(0.646, 0.656, 0.67);\n\tvec3 sky_top_color = vec3(0.2, 0.3, 0.4);\n\tvec3 sky = mix(sky_horizon_color, sky_top_color, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));\n\tfloat sky_energy = 2.0;\n\tsky *= sky_energy;\n\n\tvec3 light0_color = vec3(1.0);\n\tfloat light0_energy = 1.0;\n\tfloat light0_size = 0.01 / pi;\n\tvec3 light0_direction = normalize(vec3(2.0, 1.0, 0.0));\n\t\n\tfloat sun_angle = acos(dot(light0_direction, eyedir));\n\tfloat sun_curve = 0.15;\n\tfloat sun_angle_max = 0.7;\n\tif (sun_angle < light0_size) {\n\t\tsky = light0_color * light0_energy;\n\t} else if (sun_angle < sun_angle_max) {\n\t\tfloat c2 = (sun_angle - light0_size) / (sun_angle_max - light0_size);\n\t\tsky = mix(light0_color * light0_energy, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));\n\t}\n\n\tc = (v_angle - (pi * 0.5)) / (pi * 0.5);\n\tvec3 ground_bottom_color = vec3(0.2, 0.169, 0.133);\n\tvec3 ground_horizon_color = vec3(0.646, 0.656, 0.67);\n\tfloat ground_curve = 0.02;\n\tvec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));\n\n\tvec3 color = mix(ground, sky, step(0.0, eyedir.y));\n\t\n\treturn color;\n}\n\nfloat colormap_red(float x) {\n\tif (x < 0.2523055374622345) {\n\t\treturn (-5.80630393656902E+02 * x - 8.20261301968494E+01) * x + 2.53829637096771E+02;\n\t} else if (x < 0.6267540156841278) {\n\t\treturn (((-4.07958939010649E+03 * x + 8.13296992114899E+03) * x - 5.30725139102868E+03) * x + 8.58474724851723E+02) * x + 2.03329669375107E+02;\n\t} else if (x < 0.8763731146612115) {\n\t\treturn 3.28717357910916E+01 * x + 8.82117255504255E+00;\n\t} else {\n\t\treturn -2.29186583577707E+02 * x + 2.38482038123159E+02;\n\t}\n}\n\nfloat colormap_green(float x) {\n\tif (x < 0.4578040540218353) {\n\t\treturn ((4.49001704856054E+02 * x - 5.56217473429394E+02) * x + 2.09812296466262E+01) * x + 2.52987561849833E+02;\n\t} else {\n\t\treturn ((1.28031059709139E+03 * x - 2.71007279113343E+03) * x + 1.52699334501816E+03) * x - 6.48190622715140E+01;\n\t}\n}\n\nfloat colormap_blue(float x) {\n\tif (x < 0.1239372193813324) {\n\t\treturn (1.10092779856059E+02 * x - 3.41564374557536E+02) * x + 2.17553885630496E+02;\n\t} else if (x < 0.7535201013088226) {\n\t\treturn ((((3.86204601547122E+03 * x - 8.79126469446648E+03) * x + 6.80922226393264E+03) * x - 2.24007302003438E+03) * x + 3.51344388740066E+02) * x + 1.56774650431396E+02;\n\t} else {\n\t\treturn (((((-7.46693234167480E+06 * x + 3.93327773566702E+07) * x - 8.61050867447971E+07) * x + 1.00269040461745E+08) * x - 6.55080846112976E+07) * x + 2.27664953009389E+07) * x - 3.28811994253461E+06;\n\t}\n}\n\nvec4 colormap(float x) {\n\tfloat r = clamp(colormap_red(x) / 255.0, 0.0, 1.0);\n\tfloat g = clamp(colormap_green(x) / 255.0, 0.0, 1.0);\n\tfloat b = clamp(colormap_blue(x) / 255.0, 0.0, 1.0);\n\treturn vec4(r, g, b, 1.0);\n}\n\nvec3 debug_step(float t) {\n    if (t < 0.0) {\n        return vec3(0.0);\n    } else if (t > 1.0) {\n        return vec3(1.0, 1.0, 0.0);\n    }\n    \n    return colormap(t).rgb;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}