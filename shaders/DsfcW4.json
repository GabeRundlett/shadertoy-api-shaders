{
    "Shader": {
        "info": {
            "date": "1686796722",
            "description": "A fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "DsfcW4",
            "likes": 9,
            "name": "Fractal mosaic 39 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "sitar"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        //fract(a)\n        fract(a-fract(a*4.))\n        //fract(a-fract(a*pow(floor(a.x),2.)))\n        //abs(fract(a)+fract(a/16.)/16.)/(1.+1./16.)\n        //mod(a*sign(1.-2.*mod(floor(a/2.),2.)),4.)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //-vec2(1.,0.5)\n        //vec2(1.+sign(a.x)/2.,0.5-sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = .5*2.;\n    vec2 uv = (fragCoord)/iResolution.y/1.5/t1;\n    uv.x += (iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    bool b = true;\n    uv.x = mod(uv.x,.25)+.25+.125;\n    //uv.y = mod(uv.y,.5)+.25-.125;\n    for(int k = 0; k < 4; k++){\n        uv =\n            abs(.5-uv-t2*sign(uv.y-uv.x))/1.5\n        ;\n        b = uv.y<uv.x;\n        if(b) uv = uv.yx;\n        t2 =\n            triangle_wave(uv-.5*sign(uv.x-uv.y)).yx\n        ;\n        uv =\n            t2-triangle_wave(uv.yx).yx\n        ;\n        col.x =\n            max(sign(uv.x),col.x)\n            //abs(sign(uv.x)-col.x)/2.\n        ;\n        \n        //awesome kaleidoscope effect!\n        //if(t2.y>t2.x) {t2 = t2.yx; uv=uv.yx-iTime/8.;}\n        \n        col.xyz =\n            abs(col.yzx-float(b)/2.)\n        ;\n        //if(uv.y < .5) uv.y += .5;\n    }\n    if (!b) col = abs(1.-col);\n    fragColor = vec4(min(col,vec3(1.)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fract1(float a){\n    return\n        .125+abs(.125-fract(a))\n        //abs(fract(a)*1.125-.125)\n    ;\n}\n\nfloat fmod2(float a, float b){\n    return b*mod(floor(a),b);\n}\n\nfloat fmod1(float a, float b){\n    //a -= mod(a,3.);\n    \n    //a -= fmod2(a/4.,4.)/2.;\n    //a += fmod2(a+1.,b);\n    //a += mod(floor(a/2.),2.);\n    //a = a + floor(a/b)/b*8.;\n    //a += pow(2.,mod(floor(a/8.),b*b));\n    \n    /*\n    for(float a2 = 64.*2.; a2 < 128.*2.; a2 *= 2.){\n        a += mod(floor(a/a2),2.)+mod(floor(a/a2/2.),3.)+mod(floor(a/a2/4.),4.);\n        a /= 1. + mod(floor(a),2.);\n    }\n    */\n    return\n        mod(mod(floor(a),b)*mod(floor((a)/b),b),b)\n        //floor(mod(a/(1.+mod(floor(a+b),2.)),b))\n        //mod(mod(floor(floor(floor(a)*3.)/(8.-b)),b)*mod(floor((a)/b),b),b)\n        //mod(floor(a/2.)+floor(mod(a,2.)/2.),b)\n        //mod(floor(a/8.+8./b)+floor(a/b),b)\n        //mod(mod(floor(a*b/4.),b)*mod(floor(a/b)*floor(a*b/4.),b*2.),b*2.)\n        //mod(floor(a/8.+b/8.),floor(8./b))\n        //mod(mod(floor(a/2.+4.),floor(floor(b*8.+3.)/2.)),b)\n        //mod(mod(4.+floor(a*b/8.),4.+floor(a*b)),b)\n        //floor(mod(floor(a*b/(8.-b)),b))\n        //mod(mod(floor(a),b+mod(floor(a/b),b)),b)\n        //mod(mod(floor(a),1.+mod(floor(a),b))*mod(floor(a/b),1.+mod(floor(a/b),1.+mod(floor(a),b))),b)\n        //mod(mod(floor(a),b)*mod(floor(a/b/8.),b),b)\n        //mod(floor(a+pow(floor(b/(.5+mod(floor(a/8.),8.))),b)),b)\n        //mod(floor(a+pow(2.,b)/b/b),b)\n        //floor(sqrt(mod(mod(floor(a),b)*mod(floor(a*4./b),b),b*b)))\n        //floor(sqrt(mod(floor(a),b)*mod(floor(a/b),b*b)))\n        //mod(floor(a*sign(1.-2.*mod(floor(a/8.),2.))),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    \n    \n    return\n        fmod1(a,b)\n        //fmod1(mod(a+b,b*7.5),b)\n        //fmod1(a+fmod1(a/2.,b),b+fmod1(a/2.,b))\n        //fmod1(fmod1(a,b+8.),b)\n        //fmod1(a+fmod1(a*b/4.,b)*4./b,b)\n        //fmod1(a+fmod1(a/(8.-b),b),b)\n        //fmod1(a+fmod1(a,b*(b+1.)),b)\n        //floor(fmod1(a/2.,b*b)*fmod1(a,b*2.)/2./b)\n        //fmod1(a/(1.+mod(floor(a/2.),2.)),b)\n    ;\n}\n\n\nvec2 mainSound(int samp, float time){\n  time /= 2.;\n  float s1 =\n      8.,\n  s2 = 8.,\n  t = time/2.,\n  m1 = fmod(t,s1/2.);\n  t = \n      s1*pow(2.,fmod(t*16.+m1,2.))*t/(1.+fmod(floor(t*4.),2.))\n      //s1*pow(2.,fmod(t*16.,2.))*t\n  ;\n  float\n  m3 =\n      floor(fmod(time*16.,s1/2.)/2.)\n      //floor(fmod(time*8.,s1)/2.)\n      //floor(fmod(time*16.,s1)/4.)\n      //floor(fmod(t,s1*2.)/2.)\n      //floor(fmod(time*8.,s1*2.)/2.)\n  ;\n  float m2 =\n      1. + fmod(t,s1/2.);\n  ;\n  float a=\n      pow(1.-log(fract(t/2.)),2.)*2.\n      //pow(log(1./8.+fract(t/2.)/4.),2.)*2.\n      //time*128.*pow((1.-sqrt(fract1(t/2.)/2.))/2.,2.)\n  ;\n  float nb =\n      time*pow(2.,(m3+m2-m1)/7.+9.)\n      //time*pow(2.,(m3/2.+m2-m1)/2.5+8.)\n  ;\n  return\n      //abs(.5-vec2(fract(nb*.998),fract(nb))*1.5)*a\n      \n      //sitar\n      \n      \n      log(.125+abs(abs(a/8.)-abs(a/8.-abs(.5-vec2(fract(nb/2.+.5),fract(nb)))*a)))\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //abs(1./16.-abs(.5-vec2(fract(nb*.998),fract(nb))*1.5))*a\n      //log(1.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a)\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}