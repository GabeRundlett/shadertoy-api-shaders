{
    "Shader": {
        "info": {
            "date": "1693263170",
            "description": "Raymarching adaptation of https://www.shadertoy.com/view/ldGSWV",
            "flags": 0,
            "hasliked": 0,
            "id": "DtlBRX",
            "likes": 2,
            "name": "Mellow rainbow blobby blob thing",
            "published": 3,
            "tags": [
                "raymarching",
                "sound",
                "sines"
            ],
            "usePreview": 0,
            "username": "bwestlin",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "#define t iTime\n#define ic0 iChannel0\n\n// Smooth minimum : https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p, float s) {\n  return length(p)-s;\n}\n\nfloat sdPlane(vec3 p, vec4 n) {\n    return dot(p, n.xyz) + n.w;\n}\n\nfloat map(vec3 p) {\n    float d = sdPlane(p - vec3(0.0, -1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0));    \n    \n    for (float x = -5.0; x < 5.0; x += 1.0) {\n        d = smin(\n            d,\n            sdSphere(p - vec3(\n                    x + sin(x + iTime * 0.7),\n                    -1.4 + texture(ic0, vec2(x * 0.1 * sin(iTime), 0.1)).x + sin(x * iTime),\n                    -3.0 - 0.1 * cos(x + iTime)\n                ), 0.1 + 0.2 * texture(ic0, vec2(x + iTime, 0.)).x),\n            1.5);\n    }\n    \n    return d;\n}\n\nconst float EPS = 0.001;\nconst float MAX_ITER = 40.0;\nconst float MAX_T = 100.0;\n\nfloat intersect(vec3 origin, vec3 rayDir) {\n    float t = 0.0;\n    float dt = 0.1;\n    \n    for (float i = 0.0; i < MAX_ITER; i += 1.0) {\n        t += dt;\n        \n        dt = map(t * rayDir + origin);\n        if (abs(t) < EPS) {\n            break;\n        }\n        \n        if (t > MAX_T) {\n            t = 0.0;\n            break;\n        }\n    }\n\treturn t;\n}\n\nvec3 simple_camera(vec2 uv) {\n    vec3 forward = vec3(0.0, 0.0, -1.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 side = vec3(1.0, 0.0, 0.0);\n    return normalize(forward + uv.x * side + uv.y * up);\n}\n\nvec3 plasma(vec2 uv) {\n    float s1 = .5 + .5 * min(texture(ic0, vec2(.1, 0.) ).x * 1.5, 1.);\n    float s2 = .5 + .5 * min(texture(ic0, vec2(.4, 0.) ).x * 1.5, 1.);\n    float s3 = .5 + .5 * min(texture(ic0, vec2(.6, 0.) ).x * 1.5, 1.);\n    float s4 = .5 + .5 * min(texture(ic0, vec2(.9, 0.) ).x * 1.5, 1.);\n    \n    vec2 p1 = vec2(0., 0.);\n    vec2 p2 = vec2(0., 1.);\n    vec2 p3 = vec2(1., 1.0);\n    vec2 p4 = vec2(1., 0.);\n       \n    float c1 = .5 + .5 * sin(distance(uv, p1) * 10. * s1 + t + s1 / 4.);\n    float c2 = .5 + .5 * sin(distance(uv, p2) * 10. * s2 + t + s2 / 4.);\n    float c3 = .5 + .5 * sin(distance(uv, p3) * 10. * s3 + t + s3 / 4.);\n    float c4 = .5 + .5 * sin(distance(uv, p4) * 25. * s4 + t * 3. + s4 / 4.);\n           \n\treturn vec3(c1 + c4 * .33, c2 + c4 * .33, c3 + c4 * .33);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 cameraOrigin = vec3(0.0, 0.0 + sin(iTime), 0.0);\n    vec3 rayDir = simple_camera(uv);\n    rayDir.y -= 0.3;\n        \n    vec3 color = vec3(0.);\n    \n    float t = intersect(cameraOrigin, rayDir);\n    \n    if (t > 0.0) {\n        vec3 hit = cameraOrigin + t * rayDir;        \n        color = plasma(hit.xy / 7.);\n        color *= vec3(16.0 / (t*t));\n    }    \n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}