{
    "Shader": {
        "info": {
            "date": "1602515049",
            "description": "Beneath the city streets...",
            "flags": 0,
            "hasliked": 0,
            "id": "tsKyzw",
            "likes": 18,
            "name": "Underground Trains",
            "published": 3,
            "tags": [
                "architecture",
                "train",
                "london",
                "station"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "// \"Underground Trains\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Beneath the city streets... (viewpoint varies, mouseable, mouse in lower-left \n// corner for mono image)\n\n#define AA  1   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec4 cSize, dSize;\nvec3 ltDir, qHit, statSz;\nfloat tCur, dstFar, trnSpc, cxId, gGap, trnPos, trnUp, trnDir, tunSpc, stpWd, wThk, whlRad;\nint idObj;\nbool opDoor, colImg;\nconst int idCar = 1, idWin = 2, idWhl = 3, idTrk = 4, idTun = 5, idPlat = 6, idBase = 7,\n   idWal = 8, idCeil = 9, idStp = 10, idHrail = 11, idSup = 12, idLamp = 13;\nconst float pi = 3.1415927, sqrt2 = 1.41421;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, db, dr, dx, dy, dd, stSize;\n  dMin = dstFar;\n  p.x -= gGap * (cxId + 0.5) + trnDir * (0.5 * gGap - tunSpc);\n  q = p;\n  q.xy -= vec2 (- trnDir * 4., - trnUp - whlRad + 0.1);\n  stSize = 0.3;\n  q.z *= trnDir;\n  q.z -= stSize * floor (4. / stSize);\n  dx = abs (q.x) - stpWd;\n  dr = length (vec2 (dx, mod (q.z, stSize) - 0.5 * stSize)) - 0.03;\n  dr = max (dr, abs (q.z - 2.4) - 2.4);\n  q.yz = Rot2Cs (q.yz, vec2 (1. / sqrt2));\n  d = max (length (vec2 (dx, q.y - 0.78)) - 0.03, abs (q.z - 4.12) - 3.4);\n  DMIN (idHrail);\n  d = max (dr, abs (q.y - 0.53) - 0.26);\n  d = min (d, PrSphDf (vec3 (dx, q.y - 0.78, q.z - 7.55), 0.05));\n  DMIN (idHrail);\n  d = abs (p.y - trnUp) - 2.7;\n  q.z = (abs (mod (q.z * sqrt2, 2. * stSize) - stSize) + stSize) / sqrt2;\n  d = 0.8 * max (max (max (q.y - q.z, 0.1 - q.y), dx - 0.05), d);\n  DMIN (idStp);\n  p.z = mod (p.z - trnDir * trnPos + 0.5 * trnSpc, trnSpc) - 0.5 * trnSpc; \n  q = p;\n  db = abs (max (PrRoundBoxDf (q, vec3 (0., cSize.yz), cSize.x), - trnUp - q.y));\n  d = db - cSize.w;\n  dy = 0.5 - abs (q.y - cSize.y);\n  d = max (d, min (min (0.4 - abs (mod (q.z, 1.) - 0.5), cSize.z - abs (q.z)), dy));\n  d = max (d, - max (max (PrRoundBox2Df (q.xy, vec2 (0., cSize.x - 0.2), cSize.x - 0.3), - dy),\n     0.05 - abs (q.x)));\n  dd = max (PrRoundBox2Df (vec2 (trnDir * q.x + cSize.x, q.z), dSize.xy, dSize.z),\n     - dSize.w - q.y);\n  if (opDoor) d = max (d, - dd);\n  DMINQ (idCar);\n  d = db - 0.5 * cSize.w;\n  if (opDoor) d = max (d, - dd);\n  DMINQ (idWin);\n  d = PrCylDf (vec3 (q.x, q.y + trnUp - (2. * cSize.y - 0.1), abs (q.z) - 4. * dSize.z).xzy, 0.05,\n     2. * cSize.y - 0.1);\n  DMIN (idHrail);\n  q.xz = abs (q.xz) - vec2 (0.65, 0.75) * cSize.xz;\n  q.z = abs (q.z) - 0.6;\n  q.y -= - trnUp;\n  d = max (PrCylDf (q.yzx, whlRad, 0.08), q.y);\n  DMINQ (idWhl);\n  return dMin;\n}\n\nvoid SetTrnConf ()\n{\n  float t;\n  t = mod (8. * tCur / trnSpc + 0.5 * step (1.5, cxId), 1.);\n  trnPos = trnSpc * smoothstep (0.08, 0.92, t);\n  trnDir = 1. - 2. * mod (cxId, 2.);\n  opDoor = (0.5 - abs (t - 0.5) < 0.05);\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float s;\n  float dHit, d, cxIdP, eps;\n  eps = 0.0001;\n  dHit = eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  cxIdP = -99.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cxId = floor (p.x / gGap);\n    if (cxId != cxIdP) {\n      cxIdP = cxId;\n      SetTrnConf ();\n    }\n    s = ((cxId + step (0., rd.x)) * gGap - p.x) / rd.x;\n    d = (cxId >= 0. && cxId <= 3.) ? GObjDf (p) : dstFar;\n    d = min (d, abs (s) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dt, dx, dz;\n  dMin = dstFar;\n  p.x -= 2. * gGap;\n  q = p;\n  dx = abs (q.x) - statSz.x;\n  dz = abs (q.z) - 9.5;\n  q.x = abs (abs (q.x) - gGap) - tunSpc;\n  dt = max (PrRoundBox2Df (q.xy, vec2 (0., cSize.y), cSize.x + 0.4), - cSize.y - 1.2 - q.y);\n  d = max (abs (dt) - 0.1, statSz.z - 0.5 - abs (q.z));\n  DMIN (idTun);\n  q.y -= - trnUp - whlRad - 0.1;\n  d = PrRoundBox2Df (vec2 (abs (q.x) - 0.65 * cSize.x, q.y), vec2 (0.06, 0.1) - 0.03, 0.03);\n  DMIN (idTrk);\n  q = p;\n  d = max (max (abs (PrBox2Df (q.xz, statSz.xz + wThk)) - wThk, - dt),\n     - PrRoundBoxDf (vec3 (dx - 0.5 * wThk, q.y - 5.16, dz), vec3 (wThk, 1.56, 0.8), 0.05));\n  DMIN (idWal);\n  q.y -= statSz.y + 2.6;\n  d = max (abs (length (vec2 (mod (q.x + 0.25 * gGap, 0.5 * gGap) - 0.25 * gGap, q.y)) -\n     0.4 * gGap) - 0.1, - q.y);\n  DMIN (idCeil);\n  q = p;\n  q.y -= - trnUp - whlRad + 0.1;\n  d = max (PrBox2Df (q.yz, vec2 (0.4, 1.7 * cSize.z)), 2.8 - abs (abs (q.x) - gGap));\n  DMIN (idPlat);\n  d = abs (q.y + 0.35 + wThk) - wThk;\n  DMIN (idBase);\n  q = p;\n  q.y -= 3.58;\n  q.z = dz;\n  d = PrBoxDf (q, vec3 (statSz.x, 0.1, 0.85));\n  DMIN (idStp);\n  q = p;\n  q.y -= 4.1;\n  d = PrCylDf (vec3 (q.y - 0.4, abs (dz) - 0.82, q.x), 0.03, statSz.x);\n  d = min (d, max (PrCylDf (vec3 (mod (q.x + 0.15, 0.3) - 0.15, q.y + 0.01, abs (dz) - 0.82).xzy,\n     0.03, 0.41), dx));\n  q.x = abs (q.x + 5.7 * sign (q.z)) - gGap;\n  q.z = dz + 0.8;\n  d = max (d, - PrBox2Df (q.xz, vec2 (stpWd, 0.5)));\n  DMIN (idHrail);\n  q = p;\n  d = max (PrCylDf (vec3 (mod (q.x + 0.5 * gGap, gGap) - 0.5 * gGap, q.y - 0.8,\n     abs (dz) - 0.3).xzy, 0.07, 2.7), dx);\n  DMIN (idSup);\n  d = PrCapsDf (vec3 (dx, q.y - statSz.y - 2.5, mod (q.z + 2., 4.) - 2.), 0.25, 0.5);\n  DMIN (idLamp);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.02 * g, 0.03 * g, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.2 * smoothstep (0.35, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, sq.x * sq.y, ss.y);\n}\n\nvec4 ShStagGrid3d (vec3 p, vec3 vn, vec2 g)\n{\n  vec3 rg;\n  rg = ShStagGrid ((abs (vn.x) > 0.99) ? p.zy : ((abs (vn.y) > 0.99) ? p.zx : p.xy), g);\n  if (abs (vn.x) > 0.99) {\n    rg.xz *= sign (vn.x);\n    if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n    else vn.xz = Rot2D (vn.xz, rg.x);\n  } else if (abs (vn.y) > 0.99) {\n    rg.xz *= sign (vn.y);\n    if (rg.x == 0.) vn.yx = Rot2D (vn.yx, rg.z);\n    else vn.yz = Rot2D (vn.yz, rg.x);\n  } else if (abs (vn.z) > 0.99) {\n    rg.xz *= sign (vn.z);\n    if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n    else vn.zx = Rot2D (vn.zx, rg.x);\n  }\n  return vec4 (vn, rg.y);\n}\n\nfloat Truch (vec2 p)\n{\n  vec2 ip;\n  ip = floor (p);\n  p -= ip + 0.5;\n  if (Hashfv2 (ip) < 0.5) p = vec2 (- p.y, p.x);\n  return min (length (0.5 + p), length (0.5 - p));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, rg4;\n  vec3 col, vn, ltDirL, stg;\n  vec2 vf, u;\n  float dstObj, dstObjG, nDotL, dSum, sSum, s, dx;\n  bool isMet;\n  gGap = 8.;\n  trnSpc = 210.;\n  cSize = vec4 (1., 0.7, 6., 0.06);\n  dSize = vec4 (0.1, 0.8, 0.2, 1.3 * cSize.y);\n  tunSpc = 1.7 * cSize.x;\n  whlRad = 0.5;\n  trnUp = 0.98;\n  statSz = vec3 (18., 7., 3. * cSize.z);\n  stpWd = 0.9;\n  wThk = 0.5;\n  dstObjG = GObjRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstObj, dstObjG)  < dstFar) {\n    if (dstObjG < dstObj) {\n      dstObj = dstObjG;\n      ro += dstObj * rd;\n      vn = GObjNf (ro);\n    } else {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n    }\n    dx = abs (ro.x - 2. * gGap);\n    vf = vec2 (0.);\n    stg = vec3 (0.);\n    if (idObj == idCar) {\n      col4 = vec4 (1., 0.3, 0.3, 0.1) * (0.4 + 0.6 * smoothstep (0.005, 0.01,\n         min (abs (max (PrRoundBox2Df (vec2 (abs (qHit.x) - cSize.x, qHit.z), dSize.xy, dSize.z),\n         - dSize.w - qHit.y)), max (abs (qHit.z), abs (qHit.y - 0.42 * cSize.y) - 1.72 * cSize.y))));\n      s = max (PrRoundBoxDf (qHit, vec3 (0., cSize.yz), cSize.x), - trnUp - qHit.y);\n      col4 *= 1. - 0.7 * step (abs (s), 0.6 * cSize.w);\n      if (s < 0.) {\n        col4 *= 0.5 + 0.3 * smoothstep (0.05, 0.07, abs (mod (4. * qHit.x / cSize.x, 1.) - 0.5));\n      } else {\n        u = vec2 (abs (qHit.z) - 0.6 * cSize.z, qHit.y + 0.5 * cSize.y);\n        col4 = mix (col4, vec4 (0.7, 0.1, 0.1, 0.1), step (abs (length (u) - 0.2), 0.04));\n        u = abs (u) - vec2 (0.3, 0.05);\n        col4 = mix (col4, vec4 (0.1, 0.1, 0.7, 0.1), step (max (u.x, u.y), 0.));\n        if (abs (qHit.z) < cSize.z + 0.5) col4 *= 0.7 + 0.3 * smoothstep (0.01, 0.02,\n           length (vec2 (qHit.x, mod (qHit.z + 0.5, 1.) - 0.5)) - 0.2 * cSize.x);\n        else if (length (qHit.xy - vec2 (0., - 0.5 * cSize.y)) < 0.3 * cSize.y) col4 =\n           (trnDir * sign (qHit.z) > 0.) ? vec4 (1., 1., 0.3, -1.) : vec4 (1., 0., 0., -1.);\n      }\n    } else if (idObj == idWin) {\n      col4 = vec4 (0.1, 0.1, 0.2, 0.1);\n    } else if (idObj == idWhl) {\n      col4 = vec4 (0.4, 0.4, 0.45, 0.2);\n    } else if (idObj == idTrk) {\n      col4 = vec4 (0.8, 0.8, 0.85, 0.2) * ( 1. - 0.9 * smoothstep (0., 5.,\n         max (abs (ro.z) - statSz.z, 0.)));\n      cxId = floor (ro.x / gGap);\n      SetTrnConf ();\n      u = vec2 (ro.x - gGap * (cxId + 0.5) - trnDir * (0.5 * gGap - tunSpc),\n         mod (ro.z - trnDir * trnPos + 0.5 * trnSpc, trnSpc) - 0.5 * trnSpc); \n      col4 *= 0.7 + 0.3 * smoothstep (0., 0.3, PrRoundBox2Df (u, cSize.xz, cSize.x));\n    } else if (idObj == idTun) {\n      col4 = vec4 (0.4, 0.3, 0., 0.) * (0.8 + 0.2 * step (0.2, mod (8. * ro.y, 1.)));\n      col4 *= 1. - 0.9 * smoothstep (0., 5., abs (ro.z) - statSz.z);\n    } else if (idObj == idPlat) {\n      col4 = vec4 (0.5, 0.4, 0.2, 0.1);\n      if (ro.y > -1.) {\n        if (abs (dx - gGap) > 2.98) {\n          u = abs (vec2 (abs (ro.x - 2. * gGap + 5.7 * sign (ro.z)) - gGap,\n             abs (ro.z) - 6.5)) - vec2 (stpWd, 2.5);\n          col4 *= 0.85 + 0.15 * smoothstep (-0.1, 0.3, max (u.x, u.y));\n          stg = ro;\n        } else {\n          col4 = mix (vec4 (0.8, 0.1, 0.1, 0.1), vec4 (0.1, 0.2, 0.1, 0.1), step (0.,\n             sign (sin (4. * pi * ro.z))));\n        }\n      } else col4 *= 0.9 + 0.1 * cos (16. * pi * ro.z);\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idStp) {\n      col4 = vec4 (0.4, 0.45, 0.4, 0.);\n      vf = vec2 (64., 1.);\n    } else if (idObj == idHrail) {\n      col4 = vec4 (0.5, 0.5, 0.55, 0.2);\n    } else if (idObj == idSup) {\n      col4 = vec4 (0.5, 0.5, 0.55, 0.2) * (0.85 + 0.15 * sin (16. * pi * ro.y));\n    } else if (idObj == idBase) {\n      col4 = vec4 (0.2, 0.2, 0.2, 0.) * (0.5 + 0.5 * Fbm2 (32. * ro.xz));\n      if (abs (abs (dx - gGap) - 1.7) < 0.65 * cSize.x)\n         col4 *= (0.5 + 0.5 * step (0.8, mod (2. * ro.z, 1.)));\n      vf = vec2 (32., 2.);\n    } else if (idObj == idWal) {\n      if (dx < statSz.x + 0.1 * wThk) {\n        col4 = vec4 (0.45, 0.5, 0.6, 0.1);\n        stg = ro + vec3 (0., 0.23, 0.);\n        u = vec2 (mod (ro.z + 4., 8.) - 4., ro.y - 1.);\n        col4 = mix (col4, vec4 (0.7, 0.1, 0.1, 0.1), step (abs (length (u) - 0.6), 0.12));\n        u = abs (u) - vec2 (0.9, 0.15);\n        col4 = mix (col4, vec4 (0.1, 0.1, 0.7, 0.1), step (max (u.x, u.y), 0.));\n        s = PrRoundBox2Df (vec2 (ro.y - statSz.y - 2.5,\n           mod (ro.z + 2., 4.) - 2.), vec2 (0., 0.5), 0.25);\n        col4.rgb += vec3 (0.9, 0.9, 0.8) / (3. + 50. * s * s);\n      } else col4 = vec4 (0.1, 0.15, 0.2, 0.);\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idCeil) {\n      col4 = vec4 (0.65, 0.75, 0.7, 0.1);\n      col4.rgb *= 0.85 + 0.15 * smoothstep (0.08, 0.1, abs (Truch (2. * ro.xz) - 0.5));\n      col4 = mix (vec4 (1., 1., 0.9, -1.), col4, \n         smoothstep (0.06, 0.08, abs (mod (ro.x + 0.25 * gGap, 0.5 * gGap) - 0.25 * gGap)));\n    } else if (idObj == idLamp) {\n      col4 = vec4 (vec3 (0.9, 0.9, 0.8) * (0.95 + 0.05 * cos (32. * pi * ro.y)), -1.);\n    }\n    if (stg != vec3 (0.)) {\n      rg4 = ShStagGrid3d (stg, vn, vec2 (4./3., 2.));\n      vn = rg4.xyz;\n      col4.rgb *= 0.9 + 0.1 * rg4.w;\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    if (col4.a >= 0.) {\n      isMet = (idObj == idCar || idObj == idTrk || idObj == idWhl);\n      dSum = 0.;\n      sSum = 0.;\n      for (int k = VAR_ZERO; k < 5; k ++) {\n        if (k < 4) {\n          ltDirL = normalize (vec3 (vec2 (min (statSz.x, statSz.z) - 1.), statSz.y + 2.).xzy);\n          ltDirL.xz = Rot2D (ltDirL.xz, 0.5 * pi * float (k));\n        } else ltDirL = ltDir;\n        nDotL = max (dot (vn, ltDirL), 0.);\n        if (isMet) nDotL *= nDotL;\n        dSum += ((k < 4) ? 1. : 0.5) * nDotL;\n        sSum += ((k < 4) ? 1. : 0.5) * pow (max (dot (normalize (ltDirL - rd), vn), 0.), 32.);\n      }\n      col = col4.rgb * (0.1 + 0.4 * dSum) + 0.5 * col4.a * sSum;\n    } else col = col4.rgb * (0.6 - 0.4 * dot (rd, vn));\n    if (idObj == idWin) col += vec3 (0., 0., 0.03);\n  } else {\n    col = vec3 (0.1);\n  }\n  if (! colImg) col = vec3 (0.9, 0.7, 0.5) * Maxv3 (col);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, mMid[2], ut[2], mSize, msw;\n  float el, az, zmFac, asp, vuId, regId, sr, t;\n  int vuMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  colImg = true;\n  asp = canvas.x / canvas.y;\n  mSize = (1./6.) * vec2 (asp, 1.);\n  if (mPtr.z > 0. && Minv2 (- mPtr.xy + 0.03 * vec2 (1. / asp, 1.) - 0.5) > 0.) colImg = ! colImg;\n  mMid[0] = vec2 (asp, 1.) * (1. - mSize.y) * vec2 (-1., 1.);\n  mMid[1] = vec2 (asp, 1.) * (1. - mSize.y) * vec2 (1., 1.);\n  for (int k = 0; k < 2; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1.;\n  if (mPtr.z > 0. && colImg) {\n    for (int k = 0; k < 2; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = 1. + float (k);\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == -1.) msw = mPtr.xy;\n  }\n  vuId = 0.;\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = float (k + 1);\n      break;\n    }\n  }\n  if (regId > 0. && (vuId == 0. || vuId == regId)) vuId = regId - vuId;\n  t = mod (0.05 * tCur, 6.);\n  vuMode = int (mod (vuId + floor (t / 2.), 3.)) + 1;\n  t = mod (t, 2.);\n  t = SmoothBump (0.25, 0.75, 0.22, mod (t, 1.)) * sign (t - 1.);\n  if (vuMode == 1) {\n    az = -0.5 * pi;\n    el = -0.05 * pi;\n  } else if (vuMode == 2) {\n    az = 0.55 * pi;\n    el = -0.15 * pi;\n  } else if (vuMode == 3) {\n    az = 0.75 * pi;\n    el = -0.15 * pi;\n  }\n  if ((mPtr.z <= 0. || ! colImg)  && vuId == 0.) {\n    if (vuMode == 1) az += 0.25 * pi * t;\n    else if (vuMode == 2 || vuMode == 3) el += 0.15 * pi * t;\n  }\n  if (mPtr.z > 0. && (vuId == 0. || vuId == regId)) {\n    az += 2. * pi * msw.x;\n    el += pi * msw.y;\n  }\n  el = clamp (el, -0.4 * pi, 0.4 * pi);\n  vuMat = StdVuMat (el, az);\n  if (vuMode == 1) {\n    ro = vuMat * vec3 (0., 0., -4.);\n    ro.xy += vec2 (17., 1. /*3.*/);\n    ro.y = max (ro.y, 0.);\n    zmFac = 2.7;\n  } else if (vuMode == 2) {\n    ro = vec3 (4., 8., 5.);\n    zmFac = 3.;\n  } else if (vuMode == 3) {\n    ro = vec3 (4., 6., 15.);\n    zmFac = 3.;\n  }\n  dstFar = 150.;\n  ltDir = vuMat * normalize (vec3 (0.3, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a +\n       0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 2.1)\n       col = colImg ? vec3 (0.3, 0.7, 0.3) : vec3 (0.9, 0.7, 0.5);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}