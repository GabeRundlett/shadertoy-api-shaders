{
    "Shader": {
        "info": {
            "date": "1725417602",
            "description": "Reset time (Alt+Down) if it doesn't animate, since this writes into the buffer at frame 0\n\nPositions are clamped from 0-1 because of the buffer, but it looks fine, so I won't complain. \nI might do this again using Bezier curves if I have the time. \n",
            "flags": 32,
            "hasliked": 0,
            "id": "4fyXzR",
            "likes": 0,
            "name": "Halvorsen Attractor",
            "published": 3,
            "tags": [
                "raymarching",
                "attractor"
            ],
            "usePreview": 0,
            "username": "StarstruckDreaming",
            "viewed": 79
        },
        "renderpass": [
            {
                "code": "#define HIT_DIST .01\n#define MAX_DIST 100.\n#define MAX_STEPS 100\n#define NUM_SPHERES 1000\n\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat GetDist(vec3 p)\n{\n    float dist = MAX_DIST;\n    vec2 fakeCoord = vec2(0);\n    vec2 fakeuv = (fakeCoord-.5*iResolution.xy)/iResolution.y;\n    \n    for(int i = 0; i < NUM_SPHERES; i++)\n    {\n        dist = min(dist, sdSphere(p - texture(iChannel0, fakeuv).xyz, .3));\n        \n        if(int(fakeCoord.x) > int(iResolution.x))\n        {\n            fakeCoord = vec2(0., fakeCoord.y + 1.);\n        }\n        else\n        {\n            fakeCoord.x += 1.;\n        }\n        fakeuv = (fakeCoord-.5*iResolution.xy)/iResolution.y;\n    }\n    return dist;\n}\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dist = 0.;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 pos = ro + dist*rd;\n        float delta = GetDist(pos);\n        dist += delta;\n        if(dist > MAX_DIST || delta < HIT_DIST) break;\n    }\n    return dist;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p); \n    vec2 e = vec2(.01, 0);\n    vec3 n = d - vec3(\n    GetDist(p-e.xyy),\n    GetDist(p-e.yxy),\n    GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0, 5, 6);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 3.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    \n    float d = RayMarch(p + n*HIT_DIST*3., l);\n    if(d < length(lightPos - p))\n    {\n        dif *= .5;\n    }\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 0, -40);\n    vec3 rd = normalize(vec3(uv, 1));\n    \n    float d = RayMarch(ro, rd);\n    d /= 100.;\n    vec3 p = ro + rd*d;\n    float dif = GetLight(p);\n    col = vec3(d);\n    // Output to screen\n    fragColor = vec4(1.-col, 1.0);\n    //fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define NUM_SPHERES 1000\n#define deltaspeed .01\n#define STEPSIZE .5\n#define A 1.89\n\nfloat deltax(vec3 pos, float a)\n{\n    return -1. * (a*pos.x +4.*pos.y + 4.*pos.z + pos.y*pos.y);\n}\nfloat deltay(vec3 pos, float a)\n{\n    return -1. *(a*pos.y + 4.*pos.z + 4.*pos.x + pos.z*pos.z);\n}\nfloat deltaz(vec3 pos, float a)\n{\n    return -1. *(a*pos.z + 4.*pos.x + 4.*pos.y + pos.x*pos.x);\n}\n\n\nvec3 delta(vec3 pos, float a, float stepsize)\n{\n    return vec3(deltax(pos, a), deltay(pos, a), deltaz(pos, a)) * stepsize;\n}\n\nvec4 update(vec4 prev)\n{\n    prev.xyz += deltaspeed * delta(prev.xyz, A, STEPSIZE);\n    return prev;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if(int((fragCoord.y * iResolution.x) + fragCoord.x) < NUM_SPHERES)\n    {\n        fragColor = update(texture(iChannel0, uv));\n        \n    }\n    else\n    {\n        fragColor = vec4(0);\n    }\n    // Weird way to randomize starting position, but ok. \n    if(iFrame < 10)\n    {\n        fragColor = texture(iChannel1, uv);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}