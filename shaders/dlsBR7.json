{
    "Shader": {
        "info": {
            "date": "1692761015",
            "description": "Blurry spirals add together and evolve to create a slow, smoldering effect",
            "flags": 0,
            "hasliked": 0,
            "id": "dlsBR7",
            "likes": 3,
            "name": "Fire Spaghetti",
            "published": 3,
            "tags": [
                "fire",
                "abstract",
                "spirals"
            ],
            "usePreview": 0,
            "username": "adacohen",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "#define MAIN_PALETTE vec3(1.00,0.44,0.00),vec3(0.46,0.52,0.32),vec3(0.25,0.62,0.96),vec3(0.04,0.40,0.69)\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat random(vec2 seed) {\n  highp float a = 12.9898;\n  highp float b = 78.233;\n  highp float c = 43758.5453;\n  highp float dt = dot(seed.xy, vec2(a, b));\n  highp float sn = mod(dt, 3.14);\n  return fract(sin(sn) * c);\n}\n\nvec2 spiralizeUv(vec2 uv, float twistAmount) {\n  float dist = length(uv);\n  float angle = atan(uv.y, uv.x);\n  float spiralAngle = angle + twistAmount * dist;\n  return dist * vec2(cos(spiralAngle), sin(spiralAngle));\n}\n\nfloat spiral(vec2 uv, float thickness, float twistAmount) {\n  float blur = 20.0;\n  vec2 spiralUv = spiralizeUv(uv, twistAmount);\n  float spiralScale = 1.0 + length(uv) * abs(twistAmount) / 10.0;\n  thickness *= pow(spiralScale, 3.0);\n  return 1.0 - smoothstep(thickness, thickness * blur, abs(spiralUv.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n  // Spherical lens distortion\n  uv = uv * (1.0 + 0.5 * length(uv));\n  vec3 col = vec3(0.0);\n\n  // Make a bunch of spirals at different offsets and twist amounts\n  bool rotateDirection = true;\n  for(float i = 0.; i < 30.; i++) {\n    vec2 curUv = uv;\n    float rotationSpeed = random(vec2(i, 30.0)) * 0.1 + 0.1;\n    if(rotateDirection) {\n      rotationSpeed *= -1.0;\n    }\n    rotateDirection = !rotateDirection;\n    float rotation = iTime * rotationSpeed;\n    float colorShiftSpeed = random(vec2(i, 31.0)) * 0.1 + 0.1;\n    float thickness = random(vec2(i, 11.0)) * 0.002 + 0.004;\n    float twistSpeed = random(vec2(i, 3.0)) * 0.02 + 0.02;\n    float driftSpeed = random(vec2(i, 14.0)) * 0.1 + 0.1;\n    vec2 driftAmplitude = vec2(random(vec2(i, 4.0)), random(vec2(i, 5.0))) * 0.4;\n    // Twist and untwist with time in a sinusoidal pattern\n    const float maxTwist = 10.0;\n    float twistAmount = maxTwist * sin(iTime * twistSpeed + random(vec2(i, 6.0)) * 6.28318);\n    vec2 offset = vec2(random(vec2(i, 0.0)), random(vec2(i, 1.0))) - 0.5;\n    offset += vec2(driftAmplitude.x * cos(iTime * driftSpeed + random(vec2(i, 2.0)) * 6.28318), driftAmplitude.y * sin(iTime * driftSpeed + random(vec2(i, 7.0)) * 6.28318)) * 0.5;\n    curUv = curUv + offset;\n        // Rotate the spiral around the center\n    curUv = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation)) * curUv;\n    float val = spiral(curUv, thickness, twistAmount);\n    float spiralColorT = random(vec2(i, 10.0)) + iTime * colorShiftSpeed;\n    // Tiny hint of blue tint\n    vec3 spiralColor = cosPalette(spiralColorT, MAIN_PALETTE) + vec3(0., 0., 0.15);\n    col += val * spiralColor * 0.35;\n  }\n\n  const float overExposureThreshold = 3.0;\n  // If we're above the overexposure threshold, mix with white to wash out the image\n  col = mix(col, vec3(1.0), smoothstep(overExposureThreshold, overExposureThreshold + 1.0, length(col)));\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n  // fragColor = vec4(spiralUv, 0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}