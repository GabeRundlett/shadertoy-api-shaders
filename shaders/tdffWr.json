{
    "Shader": {
        "info": {
            "date": "1588021407",
            "description": "All 720 permutations of 6 elements. Press 'x' to multiply permutation index by int(iTime) - if coprime to 2,3,5, then still get full set, otherwise, a reduced selection. Now uses lexicographically ordered unranking - press 'l' to see other ordering.",
            "flags": 16,
            "hasliked": 0,
            "id": "tdffWr",
            "likes": 9,
            "name": "Permutation Grid",
            "published": 3,
            "tags": [
                "permutations"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "const int N = 6;\n// Shuffle the array according to the rank.\n// 0 <= k < N!\nint unrankperm(int k, int t) {\n  int a[N];\n  for (int i = 0; i < N; i++) {\n    a[i] = i;\n  }\n  for (int i = 0; i < N-1; i++) {\n    int k1 = k%(N-i);\n    k = k/(N-i);\n    int tmp = a[i+k1];\n    if (i == t) return tmp;\n    a[i+k1] = a[i];\n    a[i] = tmp;\n\n  }\n  return a[t];\n}\n\n// unrank in lexicographic order - shuffle, but instead of\n// swapping the selected item with the front item, just\n// close the gap, but keep the same order.\nint unrankperm2(int k, int t) {\n  int a[N];\n  int p = 1;\n  for (int i = 0; i < N; i++) {\n    a[i] = i;\n    p *= i+1;\n  }\n  // p is N!\n  for (int i = N; i > 1; i--) {\n    p /= i;\n    // p is (i-1)!\n    int k1 = k/p;\n    k = k%p;\n    int tmp = a[k1];\n    for (int j = k1; j < i-1; j++) {\n      a[j] = a[j+1];\n    }\n    a[i-1] = tmp;\n  }\n  return a[N-t-1];\n}\n\nvec3 colors[] =\n  vec3[](vec3(1,0,0),vec3(1,1,0),vec3(0,1,0),\n         vec3(0,1,1),vec3(0,0,1),vec3(1,0,1));\n\nbool key(int code) {\n  return texelFetch(iChannel3, ivec2(code,2),0).x != 0.0;\n}\n\nconst int CHAR_L = 76;\nconst int CHAR_X = 88;\n\nvec3 bgcolor(vec2 fragCoord) {\n  ivec2 pdim = ivec2(iResolution.xy);\n  ivec2 pcoord = ivec2(fragCoord);\n  pcoord.y = pdim.y-1-pcoord.y;\n  vec3 col = vec3(0.2);\n  int W = 12, W1 = N;\n  int H = 10, H1 = 6;\n  int M = 1;\n  ivec2 bdim = ivec2(W*(W1+M)+M, H*(H1+M)+M);\n  ivec2 bcoord = pcoord*bdim/pdim;\n  int nwidth = bdim.x;\n  int nheight = bdim.y;\n  int i = bcoord.x, j = bcoord.y;\n  int i1 = (i+W1)%(W1+M); // Index within a horizontal block\n  int j1 = (j+H1)%(H1+M);   // Index within a vertical block\n  if (i1 < W1 && j1 < H1) {\n    int index = (i-M)/(W1+M)*(H*H1)+(j-M)/(H1+M)*H1+j1;\n    if (key(CHAR_X)) index = index*int(iTime)%(W*H*H1);\n    int p = key(CHAR_L) ? unrankperm(index,i1) : unrankperm2(index,i1);\n    col = colors[p];\n  }\n  ivec2 boffset = (bcoord*pdim+bdim-1)/bdim; // Index of 1st pixel in block\n  if (bcoord.x > 0 && j1 < H1 && pcoord.x == boffset.x) col = vec3(0);\n  if (bcoord.y > 0 && i1 < W1 && pcoord.y == boffset.y) col = vec3(0);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  fragColor = vec4(bgcolor(fragCoord),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}