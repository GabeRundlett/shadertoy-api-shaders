{
    "Shader": {
        "info": {
            "date": "1531776915",
            "description": "Mondrian exercise ",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml3yRr",
            "likes": 8,
            "name": "Rectangles",
            "published": 3,
            "tags": [
                "rectangles",
                "mondrian",
                "bookofshaders"
            ],
            "usePreview": 0,
            "username": "dazuma",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "vec3 vLine(vec2 uv, vec2 pos, float border, float width)\n{\n    float vl = smoothstep(pos.x-border/2., pos.x, uv.x) - smoothstep(pos.x, pos.x+border/2., uv.x);\n    float hl = step(pos.y-width/2.,uv.y) - step(pos.y+width/2., uv.y);\n    return vec3(1.-vl*hl);\n}\n\nvec3 hLine(vec2 uv, vec2 pos, float border, float width)\n{\n    float vl = smoothstep(pos.y-border/2., pos.y, uv.y) - smoothstep(pos.y, pos.y+border/2., uv.y);\n    float hl = step(pos.x-width/2.,uv.x) - step(pos.x+width/2., uv.x);\n    return vec3(1.-vl*hl);\n}\n\nvec3 square(vec2 uv, vec2 pos, vec2 width, float border, vec3 color)\n{\n    float val = vLine(uv, vec2(pos.x-width.x/2.,pos.y), border, width.y).x;\n    val *= vLine(uv, vec2(pos.x+width.x/2.,pos.y), border, width.y).x;\n    val *= hLine(uv, vec2(pos.x,pos.y+width.y/2.), border, width.x).x;\n    val *= hLine(uv, vec2(pos.x,pos.y-width.y/2.), border, width.x).x;\n    float cval = step(pos.x-width.x/2., uv.x) - step(pos.x+width.x/2., uv.x);\n    cval *= step(pos.y-width.y/2., uv.y) - step(pos.y+width.y/2., uv.y);\n    vec3 c = 1. - vec3(cval)*vec3(1.-color.x,1.-color.y,1.-color.z);\n    return vec3(val)*c;\n}\n\nvec3 crossHair(vec2 uv, vec2 pos, float border){\n    float val = vLine(uv, pos, border, 1.).x;\n    val *= hLine(uv, pos, border, 1.).x;\n    return vec3(val);\n}\n\nvec3 crossSquare(vec2 uv, vec2 pos, vec2 width, float border, vec3 color)\n{\n    vec3 val = square(uv,pos,width,border, color);\n    val *= crossHair(uv, pos+width/2., border);\n    val *= crossHair(uv, pos-width/2., border);\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.x;\n    vec3 col = vec3(0.);\n    float ar = iResolution.y/iResolution.x;\n    vec2 point[5];\n    point[0] = vec2(0.5*sin(iTime*0.05)+0.5,0.5);\n    point[1] = vec2(0.60,0.5*sin(iTime*0.02)+0.5);\n    point[2] = vec2(0.78,0.5*sin(iTime*0.03)+0.5);\n    point[3] = vec2(0.5*sin(iTime*0.04)+0.5,0.5*sin(iTime*0.01)+0.5);\n    point[4] = iMouse.xy/iResolution.xy;\n    \n    float m_dist = 1.;  // minimun distance\n    vec2 m_point;        // minimum position\n    \n    for (int j=0; j<5; j++){\n        for (int i = 0; i < 5; i++) {\n            float dist = distance(point[j], point[i]);\n            if ( dist < m_dist && j != i) {\n                // Keep the closer distance\n                m_dist = dist;\n\n                // Kepp the position of the closer point\n                m_point = point[i];\n            }\n        }\n\t\t\n        if (j == 0){\n        \tcol = crossSquare(uv, vec2(point[j].x,point[j].y*ar), vec2(m_dist/2.), 0.01, vec3(1.,0.,0.));\n        } else if (j == 1 || j == 2){\n            col *= crossSquare(uv, vec2(point[j].x,point[j].y*ar), vec2(m_dist/2.), 0.01, vec3(0.13333,0.3137,0.5843));\n        } else if (j==3){\n            col *= crossSquare(uv, vec2(point[j].x,point[j].y*ar), vec2(m_dist/2.), 0.01, vec3(0.98039,0.78823,0.003921));\n        }  else if (j==4){\n            col *= crossSquare(uv, vec2(point[j].x,point[j].y*ar), vec2(m_dist/2.), 0.01,  vec3(1.,0.,0.));\n        }\n            \n    }\n    \n    \n    //if (iMouse.z > 0.){\n       \t//col = square(uv, iMouse.xy/iResolution.x, vec2(0.1,0.2), 0.01);\n    //}\n    //else{\n    \t//col = square(uv, vec2(0.5,0.5*ar), vec2(0.5, 0.2), 0.01);\n    //}\n\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}