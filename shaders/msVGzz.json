{
    "Shader": {
        "info": {
            "date": "1678234557",
            "description": "nasty stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "msVGzz",
            "likes": 4,
            "name": "vector field of a magnet",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nconst float mu = 0.0000012566371; //permiability of a vaccum\n\nvec3 mag(vec3 p){\n    vec3 m = vec3(1,0,0); //dipole moment\n    float ds = dot(p,p); //distance from p to center squared\n    float d = sqrt(ds); //distance from p to center\n    vec3 rhat = p/d; //p to center normalized\n    return mu*(3.0*dot(m,p)*p/ds - m)/(4.0*PI*pow(d,3.0));\n}\n\nfloat sdLine(vec2 a, vec2 b, vec2 p){\n    vec2 ab = b - a;\n    float t = dot(p - a, ab) / dot(ab, ab);\n    vec2 p2 = a + clamp(t,0.0,1.0) * ab;\n    return length(p - p2);\n}\n\n//https://www.shadertoy.com/view/XsXSz4\nfloat sdTriangle(vec2 a, vec2 b, vec2 c, vec2 p){\n    vec2 e0 = b - a;\n\tvec2 e1 = c - b;\n\tvec2 e2 = a - c;\n\n\tvec2 v0 = p - a;\n\tvec2 v1 = p - b;\n\tvec2 v2 = p - c;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = e0.x*e2.y - e0.y*e2.x;\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdArrow(vec2 a, vec2 b, float r, vec2 p){\n    float d = sdLine(a,b,p) - r;\n    vec2 ab = b-a;\n    vec2 a0 = a - ab*0.4;\n    vec2 a1 = a + vec2(ab.y,-ab.x)*0.1;\n    vec2 a2 = a - vec2(ab.y,-ab.x)*0.1;\n    return min(d,sdTriangle(a0,a1,a2,p) - r/3.0);\n}\n\nfloat sampleVectorField(vec2 uv, float t, float s){\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            vec2 celluv = fract(uv*s);\n            vec2 cell = floor(uv*s)/s + vec2(x,y)/s;\n            vec2 m = mag(vec3(cell,t)).xy;\n            float len = length(m);\n            vec2 mn = m/len;\n            n = min(n,sdArrow(mn*clamp(len/mu,0.0,0.6) + vec2(0.5) + vec2(x,y), vec2(0.5) + vec2(x,y), 0.6*clamp(len/mu,0.0,1.0)/s, celluv));\n        }\n    }\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/iResolution.y;\n    float pxunit = 1.0/iResolution.y;\n    \n    float t = sin(iTime/2.0);\n    float scale = 13.0;\n    vec3 magnet = mag(vec3(uv,t));\n    float vectorfield = sampleVectorField(uv,t,scale);\n    vec3 col = mix(vec3(1),clamp(magnet/mu,0.0,1.0),smoothstep(0.0,pxunit*20.0,vectorfield));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}