{
    "Shader": {
        "info": {
            "date": "1466094673",
            "description": "( of course there is a little cheating at interlocking. solving it is a bit involved ;-) ).",
            "flags": 0,
            "hasliked": 0,
            "id": "lsKSRt",
            "likes": 31,
            "name": "gear field - hexagonal tiling 7",
            "published": 3,
            "tags": [
                "2d",
                "gears",
                "pattern",
                "tiling",
                "hexagonal",
                "tuto",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1297
        },
        "renderpass": [
            {
                "code": "// relying on hexagonal tiling tutos https://www.shadertoy.com/view/4dKXR3\n//                               and https://www.shadertoy.com/view/XdKXz3\n\n/**/ // 343 chars\nvoid mainImage( out vec4 O, vec2 U )\n{ \n    vec2 R = iResolution.xy;\n         U = (U-R/2.)/R.y * 5.;                           // centered coords\n    \n    U *= mat2(1.73/2.,-.5, 0,1);                          // conversion to\n    vec3 g = vec3(U, 1.-U.x-U.y),                         // hexagonal coordinates\n        id = floor(g);                                    // cell id\n    \n    g = fract(g); g.z = 1.-g.x-g.y;                       // triangle coords    \n    U = (g.xy-ceil(1.-g.z)/3.) * mat2(1,.5, 0,1.73/2.);   // screenspace local coords (centered)\n    float r = length(U)/(1.73/2.)*3., // discs r=1 in contact     // to polar coords\n          a = atan(U.y,U.x) - iTime*sign(g.z); \n\n        //anti-aliasing    // gears pattern      // color per cell-id\n    O = smoothstep(.07,.0, r-.9 -.1*sin(15.*a) ) *(1.+mod(id,3.).xyzx)/4.; \n}\n/**/\n\n\n\n/** // golfed version: 292 chars\n\nvoid mainImage( out vec4 O, vec2 U )\n{ \n    U = (U-(O.xy=iResolution.xy)/2.)/O.y * mat2(4.3,-2.5, 0,5);\n    vec4 g = vec4(U, 1.-U.x-U.y, 0);\n    O = 1. + mod(ceil(g),3.);\n    \n    g = fract(g); \n    U = ( g.xy - ceil(g.z= g.x+g.y)/3. ) * mat2(1,.5, 0,.86);\n    g.w = atan(U.y,U.x) - iTime*sign(1.-g.z); \n   \n    O *= min(1., 1.- length(U)*52. +13.5 +1.5*sin(15.*g.w)  ) / 4.; \n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}