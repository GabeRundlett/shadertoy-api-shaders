{
    "Shader": {
        "info": {
            "date": "1629911556",
            "description": "Republic Of Korea Flag",
            "flags": 0,
            "hasliked": 0,
            "id": "Nd3GDM",
            "likes": 8,
            "name": "Republic Of Korea Flag",
            "published": 3,
            "tags": [
                "flag",
                "korea",
                "rok",
                "nation"
            ],
            "usePreview": 0,
            "username": "hyunamy",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "// Created by hyunamy - 2021.08\n// License Creative Commons Attribution-NonCommercial-Share Hyunamy 3.0 Unported License.\n\nconst float PI = 3.141592;\n\nvec3 RED = vec3(206., 17., 39.) / 255.;\nvec3 BLUE = vec3(0., 62., 135.) / 255.;\n\nconst float PadX = .39;\nconst float PadY = .26;\n\nconst float LW = .3;\nconst float CenterScale = .625;\nconst float WingScale = .43;\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s = sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nfloat Band(float t, float start, float end, float blur)\n{\n    float step1 = smoothstep(start-blur, start+blur, t);\n    float step2 = smoothstep(end+blur, end-blur, t);\n    return step1 * step2;\n}\n\nfloat Rect(vec2 uv, float l, float r, float b, float t, float blur) \n{\n    float band1 = Band(uv.x, l, r, blur);\n    float band2 = Band(uv.y, b, t, blur);    \n    \n    return band1 * band2;\n}\n\nvec4 LeftTop(vec2 uv, float angle, float scale)  \n{\n    vec4 col = vec4(0);\n    \n    uv *= rotationMatrix(angle) / scale;\n    \n    col += Rect(uv, -LW, LW, .1, .2, .005);   \n    col += Rect(uv, -LW, LW, -.05, .05, .005);   \n    col += Rect(uv, -LW, LW, -.2, -.1, .005);   \n    col.rgb *= 0.;\n    \n    return col;\n}\n\nvec4 RightTop(vec2 uv, float angle, float scale)\n{\n    vec4 col = vec4(0);   \n    \n    uv *= rotationMatrix(angle) / scale;\n    \n    float w = .45;\n    float l = LW - LW * w;\n    float r = LW - LW * w;\n    \n    col += Rect(uv, -LW * w - l, LW * w - l, .1, .2, .005);   \n    col += Rect(uv, -LW * w + r, LW * w + r, .1, .2, .005);   \n    col += Rect(uv, -LW, LW, -.05, .05, .005);    \n    col += Rect(uv, -LW * w - l, LW * w - l, -.2, -.1, .005);   \n    col += Rect(uv, -LW * w + r, LW * w + r, -.2, -.1, .005);   \n    \n    col.rgb *= 0.;\n    return col;\n}\n\nvec4 LeftBottom(vec2 uv, float angle, float scale)\n{\n    vec4 col = vec4(0);   \n    \n    uv *= rotationMatrix(angle) / scale;\n    \n    float w = .45;\n    float l = LW - LW * w;\n    float r = LW - LW * w;\n    \n    col += Rect(uv, -LW, LW, .1, .2, .005);   \n    col += Rect(uv, -LW * w - l, LW * w - l, -.05, .05, .005);   \n    col += Rect(uv, -LW * w + r, LW * w + r, -.05, .05, .005);\n    col += Rect(uv, -LW, LW, -.2, -.1, .005); \n    \n    col.rgb *= 0.;\n    return col;\n}\n\nvec4 RightBottom(vec2 uv, float angle, float scale)\n{\n    vec4 col = vec4(0);   \n    \n    uv *= rotationMatrix(angle) / scale;\n    \n    float w = .45;\n    float l = LW - LW * w;\n    float r = LW - LW * w;\n     \n    col += Rect(uv, -LW * w - l, LW * w - l, .1, .2, .005);   \n    col += Rect(uv, -LW * w + r, LW * w + r, .1, .2, .005);   \n    col += Rect(uv, -LW * w - l, LW * w - l, -.05, .05, .005);   \n    col += Rect(uv, -LW * w + r, LW * w + r, -.05, .05, .005);\n    col += Rect(uv, -LW * w - l, LW * w - l, -.2, -.1, .005);   \n    col += Rect(uv, -LW * w + r, LW * w + r, -.2, -.1, .005);     \n    \n    col.rgb *= 0.;\n    return col;\n}\n\nvec4 CenterBody(vec2 uv, float scale)\n{\n    vec2 rotatedUV = uv * rotationMatrix(30.) / scale;\n    \n    float body = smoothstep(0.01, 0., rotatedUV.y);    \n    vec4 col = vec4(mix(RED, BLUE, body), 1.);\n\n    float d = length(rotatedUV);\n    col.a = smoothstep(0.4, 0.39, d);    \n    \n    float sd = length(rotatedUV - vec2(-0.2, 0.0));\n    float sc = smoothstep(0.205, 0.195, sd);\n    col.rgb = mix(col.rgb, RED, sc);\n    \n    sd = length(rotatedUV - vec2(0.2, 0.0));\n    sc = smoothstep(0.205, 0.195, sd);\n    col.rgb = mix(col.rgb, BLUE, sc);\n    \n    return col;\n}\n\nvec4 Flag(vec2 uv)\n{\n    vec4 col = vec4(0); \n    \n    vec4 body = CenterBody(uv, CenterScale);    \n    col = mix(col, body, body.a);\n    \n    vec4 lt = LeftTop(uv - vec2(-PadX,PadY), -50., WingScale);\n    col = mix(col, lt, lt.a);\n    \n    vec4 rt = RightTop(uv - vec2(PadX,PadY), 50., WingScale);\n    col = mix(col, rt, rt.a);\n    \n    vec4 lb = LeftBottom(uv - vec2(-PadX,-PadY), 50., WingScale);\n    col = mix(col, lb, lb.a);\n    \n    vec4 rb = RightBottom(uv - vec2(PadX,-PadY), -50., WingScale);\n    col = mix(col, rb, rb.a);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    float t = uv.x * 5. - iTime * 1.4 + uv.y * 3.5;\n    uv.y += sin(t)*.035;\n    \n    vec4 col = vec4(1);    \n    \n    vec4 flag = Flag(uv);\n    col = mix(col, flag, flag.a);\n    float shadow = .95 + cos(t) *.156;    \n    col *= shadow;\n    col *= smoothstep(0.5, 0.495, abs(uv.y)); \n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}