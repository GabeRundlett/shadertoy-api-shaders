{
    "Shader": {
        "info": {
            "date": "1648602187",
            "description": "cool",
            "flags": 0,
            "hasliked": 0,
            "id": "ftXcWB",
            "likes": 1,
            "name": "04 change based on rectangle",
            "published": 3,
            "tags": [
                "rectangle"
            ],
            "usePreview": 0,
            "username": "ccc9527",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "//构造一个矩形，p为矩形中心相对屏幕中间的偏移，w和h是宽和高，blur是边界的模糊度\nvec3 Rectangle(vec2 uv,vec2 p,float w,float h,float blur)\n{\n    uv -= p;\n    //uv.x += 0.2*uv.y;//平行四边形效果\n    //w -= uv.y*0.2;   //梯形效果\n    //弯曲效果\n    float m = sin(iTime+uv.x*8.0)*0.1;\n    uv.y -= m;//\n    vec3 c1 = vec3(smoothstep(w+blur,w-blur,uv.x));\n    vec3 c2 = vec3(smoothstep(-w-blur,-w+blur,uv.x));\n    vec3 c3 = vec3(smoothstep(h+blur,h-blur,uv.y));\n    vec3 c4 = vec3(smoothstep(-h-blur,-h+blur,uv.y));\n    return c1*c2*c3*c4;\n}\n//求出t在(a,b)范围内出比例\nfloat Remap01(float a,float b,float t)\n{\n    return (t-a)/(b-a);\n}\n//求(a,b)范围的t映射到(c,d)之后的结果\nfloat Remap(float a,float b,float c,float d,float t)\n{\n    return c+(d-c)*Remap01(a,b,t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    float blur = Remap(-0.5,0.5,0.01,0.2,uv.x);//(-0.5,0.5)是图形的x取值范围\n    blur = pow(blur,2.0);\n    col = Rectangle(uv,vec2(0.0),0.5,0.1,blur);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}