{
    "Shader": {
        "info": {
            "date": "1471440436",
            "description": "THE COCONUT, NUT; IS A GIANT NUT! THAT IF YOU EAT TOO MUCH, YOU GET VERY FAT!\n\nfat hexagon and rainbow.",
            "flags": 0,
            "hasliked": 0,
            "id": "lld3WB",
            "likes": 1,
            "name": "Colors With Hexagon Bulb.",
            "published": 3,
            "tags": [
                "raymarching",
                "light"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 678
        },
        "renderpass": [
            {
                "code": "float sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\n// ----\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\nfloat trace( vec3 o, vec3 r )\n{\n    float t = 0.0;\n    \n    for(int i = 0; i < 32; i++)\n    {\n        \n        vec3 p = o+r*t;\n        float d = log2(opI(sdHexPrism( p, vec2(1.0, 0.9)), sdTorus( p, vec2(1.0, 0.9)) )) + 1.0;\n        float x = sdTorus( p, vec2(0.0, 1.0) );\n        t += (d + x) * 0.5;\n        \n    }\n    \n    return t;\n}\nmat2 rot( void )\n{\n    return mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    r.xz *= rot();\n    \n    vec3 o = vec3( 0.0, 0.0, -3.0 );\n    \n    float t = trace(o, r);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    \n    vec3 fc = vec3(fog);\n\tfragColor = vec4(fc,1.0);\n    fragColor += vec4(fc - r, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}