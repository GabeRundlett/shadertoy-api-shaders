{
    "Shader": {
        "info": {
            "date": "1495131635",
            "description": "Little shader art.",
            "flags": 40,
            "hasliked": 0,
            "id": "MslBR4",
            "likes": 34,
            "name": "Cipher (sound)",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "srtuss",
            "viewed": 694
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    fragColor = vec4(0.);\n    \n    for(int i = 0; i < 40; ++i)\n    {\n        float x = (float(i) - 20.) / 20.;\n        fragColor += texture(iChannel0, (fragCoord.xy + vec2(x * 100., 0.)) / iResolution.xy) * exp(abs(x) * -1.);\n    }\n    fragColor /= 20.;\n   \tfragColor += texture(iChannel1, fragCoord.xy / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float lydian(float x)\n{\n    float o = floor(x / 12.);\n    x -= o * 12.;\n    return o * 12. + step(2., x) * 2. +\n        step(4., x) * 2. +\n        step(6., x) * 2. +\n        step(7., x) * 1. +\n        step(9., x) * 2. +\n        step(11., x) * 2.;\n}\n\nfloat dorian(float x)\n{\n    float o = floor(x / 12.);\n    x -= o * 12.;\n    return o * 12. + step(2., x) * 2. +\n        step(3., x) * 1. +\n        step(5., x) * 2. +\n        step(7., x) * 2. +\n        step(9., x) * 2. +\n        step(10., x) * 1.;\n}\n\n#define pi 3.1415926535897932384626433832795\nfloat tempo = 2.4;\n\nfloat padvoice(float time, float f)\n{\n    return (sin(time * f * 2000.) + sin(time * f * 4000.) + sin(time * f * 2000. * exp2(17. / 12.)) * .5) * (sin(time * f * 40.) * .3 + .5);\n}\n\nfloat leadvoice(float time, float f)\n{\n    float x = fract(time * f * 500. / pi);\n    float s = 0.01;\n    float pw = .5 + sin(time * 1.) * .4;\n    return smoothstep(pw - s, pw, x) * smoothstep(1., 1. - s, x) - .5;\n}\n\nfloat voice1(float time)\n{\n    float v = 0.;\n    float tb = fract(time * tempo * 2.);\n    float ti = floor(time * tempo * 2.);\n    \n    float rnb = (sin(floor(ti * .125) * 10.) * .5 + .5) * 10.;\n    float rn = (sin(ti * 10.) * .5 + .5) * 30.;\n    \n    float ro = exp2(dorian(rnb) / 12.);\n    \n    //v += sin(500. * ro * time) *\n    //    smoothstep(0., 0.01, tb) * smoothstep(1., .9, tb);\n    \n    float w = 0.;\n    w += sin(2000. * exp2(lydian(rn) / 12.) * time) *\n        smoothstep(0., 0.01, tb) * smoothstep(1., .9, tb) * .5;\n    \n    w += sin(2000. * exp2(lydian(rn + 4.) / 12.) * time) *\n        smoothstep(0., 0.01, tb) * smoothstep(1., .9, tb) * .5;//*/\n    \n    w *= step(mod(time * tempo, 128.), 64.);\n    v += w;\n    \n    \n    w = 0.;\n    w += sin(250. * exp2(lydian(rnb) / 12.) * time) * 1.;\n    w += sin(500. * exp2(lydian(rnb) / 12.) * time) * 1.;\n    w += padvoice(time, exp2(lydian(rnb) / 12.));\n    w += padvoice(time, exp2(lydian(rnb + 4.) / 12.));\n    w += padvoice(time, exp2(lydian(rnb + 7.) / 12.));//*/\n    \n    w *= step(mod(time * tempo, 64.), 32.);\n    \n    rn = (fract(floor(time * tempo * 4.) * .02) * .5 + .5) * 30. + rnb;\n    v += leadvoice(time, exp2(lydian(rn) / 12.)) *\n        step(64., mod(time * tempo, 128.)) * .8;\n    \n    v += w * fract(time * tempo) * smoothstep(1., .9, fract(time * tempo));\n    \n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 v = vec2(0.);\n    \n    vec2 pan = vec2(1., .5), toff = vec2(0.002, 0.);\n    float fbt = 2. / 3. / tempo;\n    \n    v += voice1(time);\n    \n    for(int i = 1; i < 4; ++i)\n    {\n        v.x += voice1(time - float(i) * fbt + toff.x) * exp(float(i) * -.4) * pan.x;\n        v.y += voice1(time - float(i) * fbt + toff.y) * exp(float(i) * -.4) * pan.y;\n        pan = pan.yx;\n        toff = toff.yx;\n    }\n    \n    v *= .6;\n    \n    float tb;\n    \n    tb = mod(time * tempo, 8.);\n    tb = max(mod(tb, 1. / 8.), tb - 1.);\n    v += fract(sin(time * 234.523) * 7862134.) * exp(mod(tb, 1. / 4.) / tempo * -80.) *\n        (fract(tb) + .2) * 2.;\n    \n    float dmix = step(64., mod(time * tempo, 128.));\n    \n    tb = mod(time * tempo, 4.);\n    tb = min(tb, mod(time * tempo - 2.5, 4.));\n    tb = max(tb, 0.);\n    v = mix(v, v * (1. - exp(tb * -1.) * .8), dmix);\n    v += sin(sqrt(tb) * 150.) * 1. * exp(tb * -.5) * dmix;\n    \n    tb = mod(time * tempo - 1., 4.);\n    tb = min(tb, mod(time * tempo - 2.5, 5.));\n    v += fract(sin(time * 142.523) * 7862134.) * exp(tb * -8.) * .5 * dmix;\n    \n    tb = mod(time * tempo - 1.5, 4.);\n    tb = mod(tb - 1.5, 3.);\n    v += vec2(1.) * sin(sqrt(tb) * 1000.) * exp(tb * -10.) * .2 * dmix;\n    \n    return v * .25;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "vec4 letter(vec2 uv, float seed)\n{\n    vec2 cl = floor(uv);\n    \n    float i = floor(fract(sin(seed *1235.234 + dot(cl, vec2(1., 33.))) * 234156.43) * 256.);\n    vec2 dx = dFdx(uv / 16.), dy = dFdy(uv / 16.);\n    return textureGrad(iChannel0, (fract(uv) + vec2(mod(i, 16.), floor(i / 16.))) / 16., dx, dy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n   \t\n    uv *= 10.;\n    \n    float s = dot(uv, uv);\n    uv = uv * (1. + s * .0001 + s*s * .000003);\n    \n    float tt = iTime * 2.4 * .25;\n    \n    uv.y += tt * 3.;\n    uv.x += (floor(tt) + smoothstep(.2, .5, fract(tt))) * 20.;\n    \n    vec3 col = vec3(1.) * (letter(uv, 0.).xxx * letter(uv * .1, 0.).xxx + letter(uv * 4., floor(iTime * 10.)).xxx * .1);\n    \n    col = sqrt(col);\n    \n\tfragColor = vec4(col ,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 v = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    fragColor = v * smoothstep(.5, .7, v.y);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}