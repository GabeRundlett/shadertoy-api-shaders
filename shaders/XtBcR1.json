{
    "Shader": {
        "info": {
            "date": "1507314251",
            "description": "ReactionDiffusion 5",
            "flags": 32,
            "hasliked": 0,
            "id": "XtBcR1",
            "likes": 14,
            "name": "ReactionDiffusion 5",
            "published": 3,
            "tags": [
                "reactiondiffusion5"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 882
        },
        "renderpass": [
            {
                "code": "vec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a) +\n        cell(fragCoord, vec2(0., st), dir, a) +\n        cell(fragCoord, vec2(st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(0., 0.), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = mod(iTime,3.14159*2.);\n    \n    // thanks to shane for this lighting model\n\n    vec2 lp0 = laplacian2D(fragCoord, vec2(0), .8, .2);\n    vec2 lp1 = laplacian2D(fragCoord, vec2(-1), .8, .2);\n                        \n    float c = lp0.g;\n    float c2 = lp1.g;\n                       \n   \tvec3 col = vec3(1)*c;\n    col += vec3(.2, .4, 1)*max(c2*c2*1.5 - c*c, 0.0)*iResolution.y*.2;\n    \n    fragColor = (vec4(col, 1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a) +\n        cell(fragCoord, vec2(0., st), dir, a) +\n        cell(fragCoord, vec2(st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(0., 0.), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n    \n   \tif (iFrame < 30)\n    {\n        uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    \t//if (length(uv) < 0.05)\n\t\t//\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv)); \n        \n        fragColor = vec4(texture(iChannel1, uv).rg, 0.0, 0.0);\n    }\n    else if (iMouse.z > 0.0)\n\t{\n\t\tfragColor = texture(iChannel0, uv);\n        if (length((uv-mo)*vec2(iResolution.x/iResolution.y,1)) < 0.1)\n\t\t\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv-mo)); \n\t}\n    else\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1.,.01);\n        float feedCoef = 0.3;\n        float killCoef = 0.3;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .3, .7);\n        \n        float reaction = ab.x * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a) +\n        cell(fragCoord, vec2(0., st), dir, a) +\n        cell(fragCoord, vec2(st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(0., 0.), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n\tfragColor = vec4(0,0,0,0);\n    \n    if (iMouse.z > 0.0)\n\t{\n\t\tfragColor = texture(iChannel0, uv);\n       \n\t}\n    else{\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1.,.01);\n        float feedCoef = 0.3;\n        float killCoef = 0.3;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .3, .7);\n        \n        float reaction = ab.x * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a) +\n        cell(fragCoord, vec2(0., st), dir, a) +\n        cell(fragCoord, vec2(st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(0., 0.), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n\tfragColor = vec4(0,0,0,0);\n    \n   \tif (iMouse.z > 0.0)\n\t{\n\t\tfragColor = texture(iChannel0, uv);\n        \n\t}\n    else {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1.,.01);\n        float feedCoef = 0.3;\n        float killCoef = 0.3;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .3, .7);\n        \n        float reaction = ab.x * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a) +\n        cell(fragCoord, vec2(0., st), dir, a) +\n        cell(fragCoord, vec2(st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, 0.), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(0., 0.), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n    \n    if (iMouse.z > 0.0)\n\t{\n\t\tfragColor = texture(iChannel0, uv);\n        \n\t}\n    else{\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 diffusionCoef = vec2(1.,.01);\n        float feedCoef = 0.3;\n        float killCoef = 0.3;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .3, .7);\n        \n        float reaction = ab.x * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}