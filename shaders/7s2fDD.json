{
    "Shader": {
        "info": {
            "date": "1646346829",
            "description": "Can never get the colors quite right. Technique is just 3 2D fractals (1 for each axis) extended into columns, removed from a sphere (stole the idea from someone else but cant remember name)",
            "flags": 0,
            "hasliked": 0,
            "id": "7s2fDD",
            "likes": 4,
            "name": "Fractal 2398129312",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = (0.51 + 0.5 * thc(6., 0.2 * iTime)) * 1.8 * vec3(0, 1, -1);\n   \n    \n    float t = 0.2 * iTime;\n    float o = 2. * pi / 3.;\n    \n    //vec3 ro = 0.1 * vec3(cos(t-o), cos(t), cos(t+o)); //2.6\n  //  ro = vec3(0,4.4,1.);\n   ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nvec3 getRa() {\n   return vec3(0);\n    return vec3(0, 1, 0);\n}\n\nvec2 op1(vec2 p, float m) {\n    p *= 1. + 0.125 * m;\n    //p *= Rot(0. * length(p) + 0. * iTime);\n    return abs(p) - m;\n}\n\nfloat op2(float l, vec2 p, float r) {\n\n    return min(l + 0.125 * (abs(p.x) + abs(p.y)), length(p) - 0.75 * r);\n\n    //return (0.5 + 0.5 * cos(pi * l - iTime)) * min(l, length(p) - r);\n}\n\nvec2 op3(vec2 p, float a) {\n    return p * Rot(a);\n}\n\nfloat GetDist(vec3 p) {\n   \n    float r1 = 0.;\n    float r2 = 0.1;\n    \n    vec2 xy = p.xy, yz = p.yz, zx = p.zx;\n    float m = sqrt(2.) / 2.;\n    float dxy = length(xy) - m, dyz = length(yz) - m, dzx = length(zx) - m;\n    for (float i = 0.; i < 6.; i++) {  \n        float io = 2. * pi * i / 6.;\n        //m *= 0.5 + 0.5 * cos(iTime);\n        xy = op1(xy, m), yz = op1(yz, m), zx = op1(zx, m);    \n        m *= 0.45 + 0.05 * cos(8. * mlength(p) + io + iTime);\n        float r = m;\n        dxy = op2(dxy, xy, r), dyz = op2(dyz, yz, r), dzx = op2(dzx, zx, r);\n    }\n    \n    float d = min(min(dxy, dyz), dzx);\n    \n    float d2 = length(p) - 1.48;\n    d2 = -min(d, -d2);\n    \n\n    //d = max(d - r2, length(p) - 1. + 0.5 * cos(2. * length(p) + iTime));\n   // d = min(d, d2);\n   \n    return d2;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    vec3 ra = getRa();\n    \n    vec3 rd = GetRayDir(uv, ro, ra, 1.4);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(1.);\n        \n        float fresnel = pow(1.+dot(rdIn, nExit), 5.);\n        //col += fresnel;\n        float fresnel2 = pow(1.+dot(rd, n), 1.5); \n        col *= fresnel2;\n        \n        //col *= 0.5 + 0.5 * n;\n       \n        col = clamp(col, 0., 1.);\n        vec3 e = vec3(1);\n        col *= pal(n.y, e, e, e, 0.35 * vec3(0,1,2)/3.);\n        col += 0.15 * n.y;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}