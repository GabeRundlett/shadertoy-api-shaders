{
    "Shader": {
        "info": {
            "date": "1682173622",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nThanks @Shane - as this is mostly his skills here!",
            "flags": 0,
            "hasliked": 0,
            "id": "ddVSDd",
            "likes": 24,
            "name": "Year of Truchets #013",
            "published": 3,
            "tags": [
                "2d",
                "animation",
                "hexagon",
                "truchet",
                "tiles"
            ],
            "usePreview": 1,
            "username": "byt3_m3chanic",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #013\n    04/22/2023  @byt3_m3chanic \n    \n    Getting some schooling after my first woven truchet from @Shane\n    who has some amazing examples and shaders. \n    \n    https://www.shadertoy.com/view/MtlBDs\n    \n    https://www.shadertoy.com/view/3dSBzt\n    \n    https://www.shadertoy.com/view/NlKfzV\n    \n*/\n\n#define R          iResolution\n#define M          iMouse\n#define T          iTime\n\n#define PI         3.14159265\n#define PI2        6.28318530\n#define SQ3        1.732\n\nconst vec2 s = vec2(1, 1.7320508);\n\nconst float scale = 5.;\nconst float radi = .28867514;\nconst float harc = .57735027;\nconst float narc = .95494262;\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 p) { return fract(sin(dot(p,vec2(27.609, 57.583)))*43758.5453); }\nvec3 hue(float t) { return .45+.45*cos(PI2*t*(vec3(.12,.51,.92)+vec3(.88,.97,.85))); }\n\n//@Shane grid functions\nvec4 getGrid(vec2 p) {\n    vec4 ip = floor(vec4(p/s, p/s - .5));\n    vec4 q = p.xyxy - vec4(ip.xy + .5, ip.zw + 1.)*s.xyxy;\n    return dot(q.xy, q.xy)<dot(q.zw, q.zw)? vec4(q.xy, ip.xy) : vec4(q.zw, ip.zw + .5);\n}\n\nvec3 segment(vec3 col, float d, float px, vec3 cx) {\n    col=mix(col,col*.25,smoothstep(.075+px,-px,d-.025));\n    col=mix(col,vec3(.0),smoothstep(px,-px,d-.025));\n    col=mix(col,cx,smoothstep(px,-px,d));\n    return col; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    float px = fwidth(uv.x)*PI2;\n    \n    uv+=T*vec2(.01,.03);\n    \n    vec4 h = getGrid(uv*scale);\n    vec2 p = h.xy;\n\n    float rnd = hash21(h.zw + vec2(.09, .04));\n    float rnd2 = hash21(h.zw + vec2(.37, 7.83)); \n    \n    rnd = floor(rnd*144.);\n    p.xy*=rot(rnd*PI/3.);\n    \n    float dir = mod(rnd, 2.)*2. - 1.;\n    float th = .15+.1*sin(uv.x*3.5+T);\n    float speed = (T*1.)*dir;\n    \n    vec3 d,a3;\n\n    if(rnd2<.25){\n        vec2 p0 = p - vec2(0, -harc);\n        vec2 p1 = p - vec2(0, harc);\n        vec2 p2 = p;\n        d.x = length(p0) - radi;\n        d.y = length(p1) - radi;\n        d.z = abs(p2.y);\n        \n        a3.x = atan(p0.x, p0.y);\n        a3.y = atan(p1.x, p1.y);\n        a3.z = p2.x;\n\n        a3 = fract(a3*vec3(6./PI2, 6./PI2,3.) + vec3(-1, 1, 1)*speed - vec3(0, 0, .5)) - .5;\n    }\n    \n    else if(rnd2<.5){\n        vec2 p0 = p;\n        vec2 p1 = rot(PI/3.)*p;\n        vec2 p2 = rot(2.*PI/3.)*p;\n        d.x = abs(p0.y);\n        d.y = abs(p1.y);\n        d.z = abs(p2.y);\n        \n        a3.x = p0.x;\n        a3.y = p1.x;\n        a3.z = p2.x;\n        \n        a3 = fract(a3*3. + vec3(1, -1, 1)*speed - .5) - .5;\n    }\n    else {\n    \n        vec2 p0 = p - vec2(-.5, -radi);\n        vec2 p1 = p - vec2(.5, -radi);\n        vec2 p2 = p - vec2(0, harc);\n        d.x = length(p0) - radi;\n        d.y = length(p1) - radi;\n        d.z = length(p2) - radi;\n        \n        a3.x = atan(p0.x, p0.y);\n        a3.y = atan(p1.x, p1.y);\n        a3.z = atan(p2.x, p2.y);\n\n        a3 = fract(a3*6./PI2 + speed) - .5;\n    }\n    \n    d = abs(d) - th;\n    a3 = max(d+.1, (abs(a3)*2. - .5)/1.); \n\n\n    vec3 ch = hue((uv.y+125.)*.235);\n    float zz = sin((uv.x+uv.y)*400.)*2.-1.;\n    vec3 C = mix(vec3(.15), vec3(.0), smoothstep(px,-px,zz)*.5);\n\n    C = segment(C,d.x,px,ch);\n    C = mix(C, vec3(1), 1. - smoothstep(-px, px, a3.x));\n\n    C = segment(C,d.y,px,ch);\n    C = mix(C, vec3(1), 1. - smoothstep(-px, px, a3.y));\n\n    C = segment(C,d.z,px,ch);\n    C = mix(C, vec3(1), 1. - smoothstep(-px, px, a3.z));\n\n    // Output to screen\n    C = pow(C,vec3(.4545));\n    fragColor = vec4(C,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}