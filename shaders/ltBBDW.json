{
    "Shader": {
        "info": {
            "date": "1515767783",
            "description": "press [Space] to rotation\n\nbuf A : accumulated sum",
            "flags": 48,
            "hasliked": 0,
            "id": "ltBBDW",
            "likes": 11,
            "name": "precalculated O(1) rotation blur",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "motionblur"
            ],
            "usePreview": 0,
            "username": "phi16",
            "viewed": 874
        },
        "renderpass": [
            {
                "code": "float th(float x) {\n\treturn x / 1.1 / 3.1415926535 / 2.;\n}\n\nfloat rd(float x) {\n\treturn x / sqrt(2.01);\n}\n\nvec4 sumImage(float from, float to, float radius) {\n    vec2 p1 = vec2(th(from), rd(radius));\n    vec2 p2 = vec2(th(to), rd(radius));\n    vec4 c1 = texture(iChannel0, p1) * from;\n    vec4 c2 = texture(iChannel0, p2) * to;\n\treturn (c2 - c1) / (to - from);\n}\n\nvec4 blurImage(float from, float to, float radius) {\n    float diff = to - from;\n    float R = 2. * 3.1415926535;\n    float fm = mod(from, R);\n    float tm = mod(to, R);\n    float c1 = from + R - fm;\n    float c2 = to - tm;\n    float cR = c2 - c1;\n    vec4 u1 = sumImage(fm, R, radius) * (R - fm);\n    vec4 u2 = sumImage(0., tm, radius) * tm;\n    vec4 uR = sumImage(0., R, radius) * cR;\n    return (u1 + u2 + uR) / (to - from);\n}\n\nvec2 radvel() {\n\treturn texture(iChannel1, vec2(0.5)).rg;\n}\n\n// Font\nvec4 SampleFontTex(vec2 uv) // https://www.shadertoy.com/view/llcXRl\n{\n    vec2 fl = floor(uv + 0.5);\n    uv = fl + fract(uv+0.5)-0.5;\n    return texture(iChannel2, (uv+0.5)*(1.0/16.0), -100.0) + vec4(0.0, 0.0, 0.0, 0.000000001);\n}\nvoid renderChar(int x,int y, vec2 pos, float size, vec3 color, inout vec4 fragColor, vec2 fragCoord){\n    vec2 p = (fragCoord - pos) / size;\n    if(abs(p.x) < 0.5 && abs(p.y) < 0.5){\n        float po = SampleFontTex(p+vec2(float(x),float(y))).a;\n        if(abs(po-0.5) < 0.005){\n            fragColor.xyz = mix(fragColor.xyz,color,smoothstep(0.505,0.495,po));\n        }else if(po < 0.5){\n            fragColor.xyz = color;\n        }\n    }\n}\n#define renderC(x,y,p,s,c) renderChar(x,y,p,s,c,fragColor,fragCoord)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.) / iResolution.x * 4.;\n    float t = - atan(uv.y, uv.x) + 3.1415926535;\n    float r = length(uv);\n    vec2 rv = radvel();\n    float tt = rv.r * 2. * 3.1415926535;\n    float dt = rv.g * 40. + 0.001;\n\tfragColor = blurImage(t+tt,t+tt+dt,r);\n    \n    if(float(iFrame) < iResolution.x / 1.1) {\n\t    vec2 tpos = vec2(30,30);\n#define CC(xp,yp) renderC(xp,yp,tpos,40.,vec3(1.));tpos.x += 20.\n    \tCC(9,11); CC(14,9); CC(9,9); CC(4,8); CC(9,9); CC(1,9); CC(12,9); CC(9,9); CC(10,8); CC(9,9); CC(14,9); CC(7,9); CC(14,13); CC(14,13); CC(14,13);\n#undef CC\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 tex(vec2 p) {\n    if(max(abs(p.x),abs(p.y)) > 1.) return vec4(0);\n    return texture(iChannel0, p*0.5+0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float theta = fragCoord.x / iResolution.x * 2. * 3.1415926535 * 1.1;\n    float radius = fragCoord.y / iResolution.y * sqrt(2.01);\n    vec2 p = vec2(cos(theta), sin(theta)) * radius;\n    vec4 t = tex(p);\n    if(fragCoord.x == 0.5) {\n\t\tfragColor = t;\n    } else {\n        float count = floor(fragCoord.x);\n        vec2 nCoord = fragCoord - vec2(1.,0.);\n        vec4 nei = texture(iChannel1, nCoord / iResolution.xy);\n\t    fragColor = (nei * count + t) / (count + 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool press() {\n    return texture(iChannel0, vec2(32.5/256., 0.)).r > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iTime == 0.) {\n\t    fragColor = vec4(0);\n    } else {\n\t    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n        fragColor.r += fragColor.g * 5.;\n        if(press()) fragColor.g += 0.0004;\n        else fragColor.g *= 0.9;\n        fragColor.r = mod(fragColor.r, 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}