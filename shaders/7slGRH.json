{
    "Shader": {
        "info": {
            "date": "1615531636",
            "description": "Another visual experiment with noise. Lots of unexpected variation so let it run! :)",
            "flags": 32,
            "hasliked": 0,
            "id": "7slGRH",
            "likes": 22,
            "name": "Desolate Shores",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "mouse",
                "terrain",
                "fbm",
                "color"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "\n// Cole Peterson\n\n// Noise and coloring experiment!\n\n#define R iResolution.xy\n\nvec3 t(vec2 p){\n    return texture(iChannel0, p).xyz;   \n}\n\nfloat height(vec2 p){\n    return t(p).r;\n}\n\nvec3 BumpedNormal(vec2 uv, float strength){\n    float h = 0.002;\n    \n    vec3 p = t(uv); \n    float dx = height(uv) - height(uv + vec2(h, .0));\n    float dy = height(uv) - height(uv + vec2(0., h));\n    return normalize( vec3(0., 0., -1.) + vec3(dx, dy, 0.)*strength);\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = u / R,\n    cuv =  vec2(u.xy - 0.5*R.xy)/R.y; \n    \n    vec3 lp = vec3(.4, .55, -1.0),\n    sp = vec3(cuv, 0.0),\n    ro = vec3(0, 0, -0.8),\n    rd = normalize(sp - ro),\n    ld = lp - sp;\n    \n    float dist = max(length(ld), 0.001);\n    ld /= dist;\n    \n    float msk = texture(iChannel0, uv).w;\n    vec3 norm = BumpedNormal(uv, 11.0);\n  \t\n    float dif = max(dot(norm, ld), 0.);  \n    float spec = pow(max(dot( reflect(-ld, norm), -rd), 0.), 16.); \n    float fal = 1.8 / (.8*dist*dist);\n    \n    vec3 col = (t(uv) * dif * fal) + (vec3(.8, .8, .9)*spec*.7 * msk);\n    \n    col = 1. - exp(-col);\n    f = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat hsh(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat perlin(vec2 p){\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    float a = hsh(i);\n    float b = hsh(i+vec2(1., .0));\n    float c = hsh(i+vec2(0. ,1 ));\n    float d = hsh(i+vec2(1., 1. ));\n    vec2 u = smoothstep(0., 1., f);\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat octnse(vec2 p, float t, int oct){\n    float a = 1.;\n    float n = 0.;\n    for(int i = 0; i < oct; i++){\n        p.y+=t;\n     \tn += perlin(p) * a * .5;\t\n        p*=2.;\n        a *= .5;\n    }\n    return n;\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = .35*vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 uv2 = u / R;\n    if(iMouse.z > 0.) uv += m*1.5;\n\n    uv.x += (iTime+6.)*.035 + 14.37;\n    uv.y += (iTime+6.)*.04 + 14.37;\n    \n    float n1 = 2.*octnse(uv*9., 0., 10) - 1. - .3,\n    n2 = 2.*octnse((uv+43.)*3., 0., 10) - 1.;\n    \n    float val = octnse((uv + vec2(n1, n2)*12.) * .45, 0., 8);\n    \n    vec3 col = vec3(val);\n    col += mix(vec3(.7, .3, .1)*.95, vec3(.2, .0, .8), n1) * n2 * .38;\n    col -= ss(.0, .2, n1) * .15;\n    col = col*col*col*col*col*1.6;\n    \n    float msk = ss(.0, 0.02, n2*n1 - .05);\n    msk -= ss(.0, 0.02, n2*n1 - .09);\n   \n    f = vec4(sqrt(clamp(col, 0.0, 1.0)), msk);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}