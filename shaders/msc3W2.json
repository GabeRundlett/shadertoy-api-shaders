{
    "Shader": {
        "info": {
            "date": "1677840751",
            "description": "Toy city with chopper and cybertrucks (don't forget to mouse)",
            "flags": 0,
            "hasliked": 0,
            "id": "msc3W2",
            "likes": 32,
            "name": "Mini Metropolis",
            "published": 3,
            "tags": [
                "city",
                "flight",
                "truck",
                "traffic",
                "helicopter"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "// \"Mini Metropolis\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/*\n  No. 9 in \"Skyscraper\" series\n    \"Gotham City\"               (XljXR3)\n    \"Pannini Flies Gotham\"      (4s3XzN)\n    \"Urban Growth\"              (XdXcRM)\n    \"Alphaville\"                (XtfczN)\n    \"Alphapolis\"                (4scyDj)\n    \"Urban Smog\"                (NsdGDN)\n    \"Spherical Metropolis\"      (ssG3W3)\n    \"Mriya Over Metropolis\"     (ct2SR1)\n*/\n\n#define AA    0  // (= 0/1) optional antialiasing\n\n#if 1\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 StdVuMat (float el, float az);\nvec3 HsvToRgb (vec3 c);\nfloat Hashff (float p);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat IFbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nmat3 flyerMat;\nvec3 flyerPos, qHit, sunDir, regSz;\nvec2 cId, cIdT, bIdV, cTimeV, csRotor;\nfloat dstFar, tCur, cCar, qcCar, cDir, vDir, flrHt, bShape, bWid, bWidU, bHt, bHtU, hiMid,\n   tWid, twHt, nFloor, fDayLt, szFacFl;\nint idObj, modeLt;\nbool flyVu;\nconst int idBldgF = 1, idBldgC = 2, idTwr = 3, idTwrTop = 4, idRoad = 5, idSWalk = 6,\n   idTrLight = 7, idStLight = 8, idPool = 9, idTrnk = 10, idTree = 11, idCarBdy = 12,\n   idCarWhl = 13,idHeli = 14, idRotorM = 15, idRotorT = 16, idSkd = 17;\nconst float pi = 3.1415927;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat FlyerDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, s;\n  dMin = dstFar / szFacFl;\n  p = flyerMat * (p - flyerPos) / szFacFl;\n  d = PrRoundBoxDf (p - vec3 (0., 0.5, -1.2), vec3 (4.5, 2., 5.5), 0.1);\n  if (d < 0.1) {\n    q = p;\n    r = 1.;\n    if (q.z < -0.1) {\n      s = (q.z + 0.1) * (q.z + 0.1);\n      r *= 1. - 0.1 * s;\n      q.y -= 0.05 * s;\n    } else if (q.z > 0.1) {\n      s = (q.z - 0.1) * (q.z - 0.1);\n      r *= 1. - 0.03 * s;\n    }\n    q.x *= 0.8;\n    d = PrCapsDf (q, max (r, 0.), 2.);\n    q = p;\n    q.yz = Rot2D (q.yz - vec2 (1.1, -4.2), -0.05 * pi);\n    r = 0.2 * (1. + 0.25 * q.z);\n    q.y *= 0.7;\n    d = min (d, PrCapsDf (q, r, 1.5));\n    q = p;\n    q.yz -= vec2 (1.7, -0.2);\n    d = min (d, PrCylDf (q.xzy, 0.4, 0.4));\n    q = p;\n    q.yz -= vec2 (0.4, -1.);\n    r = 1.1;\n    if (q.z < 0.) {\n      s = q.z * q.z;\n      r *= 1. - 0.2 * s;\n      q.y -= 0.1 * s;\n    }\n    q.y *= 0.8;\n    d = SmoothMin (d, PrCapsDf (q, max (r, 0.), 1.5), 0.03);\n    q = p;\n    q.yz -= vec2 (1.4, -6.15);\n    d = min (d, max (PrRoundCylDf (q.yzx, 0.5, 0.05, 0.02), 0.35 - length (q.yz)));\n    q = p;\n    DMINQ (idHeli);\n    q = p;\n    q.yz = Rot2Cs (q.yz - vec2 (1.4, -6.15), csRotor);\n    d = PrRoundBoxDf (q, vec3 (0.01, 0.32, 0.04), 0.02);\n    DMINQ (idRotorT);\n    q = p;\n    q.yz -= vec2 (2., -0.2);\n    d = PrCylDf (q.xzy, 0.12, 0.5);\n    q.y -= 0.4;\n    q.xz = Rot2Cs (q.xz, csRotor);\n    d = min (d, PrRoundBoxDf (q, vec3 (4.5, 0.02, 0.08), 0.03));\n    DMINQ (idRotorM);\n    q = p;\n    q.x = abs (q.x);\n    q.xy -= vec2 (0.9, -1.4);\n    d = PrRoundBoxDf (q, vec3 (0.1, 0.01, 1.4), 0.04);\n    q.xy = Rot2D (q.xy, -0.1 * pi);\n    q.z = abs (q.z);\n    q.yz -= vec2 (0.4, 0.7);\n    d = min (d, PrCylDf (q.xzy, 0.06, 0.4));\n    DMINQ (idSkd);\n    dMin *= 0.7;\n  } else dMin = min (dMin, d);\n  return szFacFl * dMin;\n}\n\nfloat FlyerRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = FlyerDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 FlyerNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = FlyerDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 FlyerCol ()\n{\n  vec4 col4;\n  if (idObj == idHeli) {\n    col4 = mix (vec4 (1., 1., 0., 0.2), vec4 (1., 0., 0., 0.2), smoothstep (0., 0.02,\n       abs (qHit.y) - 0.04));\n    if (length (vec2 (qHit.x, qHit.y / 0.8)) > 1.24 && qHit.y > 0.55 && qHit.z > 0.4 &&\n       abs (abs (qHit.x) - 0.3) > 0.05) col4 = vec4 (0., 0.5, 0.5, -2.);\n  } else if (idObj == idRotorM) {\n    col4 = (length (qHit.xz) < 4.2) ? vec4 (0.8, 0.8, 0.9, 0.1) : vec4 (1., 1., 0.2, 0.1);\n  } else if (idObj == idRotorT) {\n    col4 = (length (qHit.yz) > 0.06) ? vec4 (0.8, 0.8, 0.9, 0.1) : vec4 (1., 1., 0.2, 0.1);\n  } else if (idObj == idSkd) {\n    col4 = vec4 (0.7, 0.7, 0.75, 0.1);\n  }\n  return col4;\n}\n\nvoid SetBldgParms ()\n{\n  if (Hashfv2 (9. * cId) > 0.5 || mod (cId.x, 3.) + mod (cId.y, 3.) != 0. || cId == vec2 (0.)) {\n    bHt = (0.25 * Hashfv2 (13. * cId) + 0.05) * (1. + 0.15 / flrHt) + 0.1;\n    nFloor = floor (bHt * (0.6 + 0.4 * length (sin (0.125 * pi * cId))) / flrHt);\n    bHt = (nFloor + 0.3) * flrHt;\n    bWid = floor ((0.17 + Hashfv2 (11. * cId) * 0.1) / flrHt + 0.5) * flrHt;\n    bShape = Hashfv2 (17. * cId);\n    cIdT = mod (cId + 8., vec2 (16.)) - 8.;\n    hiMid = 0.75 * clamp (4. / max (length (cIdT), 1.), 0., 1.);\n    bWidU = floor (bWid * (0.5 + 0.3 * Hashfv2 (12. * cId)) / flrHt + 0.5) * flrHt;\n    bHt = (0.5 * Hashfv2 (13. * cId) + 0.05) * hiMid * (1.5 + (bWid - 0.15) / flrHt) + 0.1;\n    bHtU = 0.25 * bHt + 0.75 * max (0., Hashfv2 (15. * cId) - 0.5) * hiMid + 0.05;\n    bHt = (floor (bHt / flrHt) + 0.2) * flrHt;\n    bHtU = floor (bHtU / flrHt) * flrHt;\n    bHtU += 0.2 * flrHt * step (0., bHtU);\n    if (cIdT == vec2 (0.)) {\n      bHt = max (bHt, 24.2 * flrHt);\n      bHtU = max (bHtU, 10.2 * flrHt);\n    }\n    tWid = ((bHtU > 0.) ? bWidU : bWid) - 0.0125;\n  } else {\n    bHt = 0.;\n  }\n}\n\nfloat BldgDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 s;\n  float d;\n  q = p;\n  q.y -= -0.01;\n  d = abs (q.y) - 0.01;\n  DMINQ (idRoad);\n  p.xz = fract (p.xz) - vec2 (0.5);\n  q = p;\n  q.y -= 0.0015;\n  d = PrBoxDf (q, vec2 (0.35, 0.0015).xyx);\n  DMINQ (idSWalk);\n  if (bHt > 0.) {\n    q.y -= bHt - 0.2 * flrHt + 0.0005;\n    if (bShape > 0.25) {\n      d = PrBoxDf (q, vec2 (bWid, bHt).xyx);\n      DMINQ (idBldgF);\n    } else {\n      d = PrCylDf (q.xzy, bWid, bHt);\n      DMINQ (idBldgC);\n    }\n    q.y -= bHt + bHtU - 0.2 * flrHt - 0.001;\n    if (bHtU > 0.) {\n      if (bShape > 0.5) {\n        d = max (PrBoxDf (q, vec2 (bWidU, bHtU).xyx),\n           - PrBoxDf (q - vec3 (0., bHtU, 0.), vec2 (tWid, 0.1 * flrHt).xyx));\n        DMINQ (idBldgF);\n      } else {\n        d = max (PrCylDf (q.xzy, bWidU, bHtU),\n           - PrCylDf ((q - vec3 (0., bHtU, 0.)).xzy, tWid, 0.1 * flrHt));\n        DMINQ (idBldgC);\n      }\n    }\n    q.y -= bHtU - 0.2 * flrHt - 0.001;\n    if (bShape < 0.1) {\n      d = PrCapsDf (q.xzy, 0.4 * bWidU, 1.25 * flrHt);\n      DMINQ (idBldgC);\n    } else if (bShape > 0.7) {\n      d = PrBoxDf (q, vec2 (0.25 * bWidU, 1.25 * flrHt).xyx);\n      DMINQ (idBldgF);\n    }\n    if (bHt + bHtU > 30. * flrHt) {\n      twHt = 0.1 * (bHt + bHtU);\n      q.y -= twHt;\n      d = PrCapsDf (q.xzy, 0.3 * flrHt, twHt);\n      DMINQ (((q.y > 0.9 * twHt) ? idTwrTop : idTwr));\n    }\n    if (cIdT == vec2 (0.)) {\n      q = p;\n      q.y -= 2. * (bHt + bHtU) + 0.2 * flrHt;\n      d = PrCylDf (q.xzy, 0.3, flrHt);\n      DMINQ (idBldgC);\n    }\n  } else {\n    d = PrCylDf (q.xzy, 0.19, 0.005);\n    DMINQ (idPool);\n    q.xz = abs (q.xz) - 0.21;\n    q.y -= 0.7 * flrHt;\n    d = PrCylDf (q.xzy, 0.005, 0.7 * flrHt);\n    DMINQ (idTrnk);\n    q.y -= 0.6 * flrHt;\n    d = PrSphDf (q, 0.4 * flrHt);\n    DMINQ (idTree);\n  }\n  q = p;\n  q.y -= 0.025;\n  q.xz = mod (q.xz + 0.05, 0.1) - 0.05;\n  s = abs (p.xz) - vec2 (0.5);\n  d = max (min (PrCylDf (q.xzy, 0.0012, 0.025),\n     PrCylDf ((q - vec3 (0., 0.025, 0.)).xzy, 0.005, 0.0007)),\n     - min (PrBox2Df (p.xz, vec2 (0.45)), max (PrBox2Df (s, vec2 (0.18)),\n     - PrBox2Df (s, vec2 (0.05)))));\n  DMINQ (idStLight);\n  q = p;\n  q.y -= 0.023;\n  q.xz = abs (q.xz) - vec2 (0.345);\n  d = PrCylDf (q.xzy, 0.002, 0.02);\n  DMINQ (idTrLight);\n  return dMin;\n}\n\nvec3 CarPos (vec3 p)\n{\n  vec3 q, s;\n  float fqx;\n  s.xz = abs (fract (p.xz) - 0.5) - 0.35;\n  vDir = (cDir == 0. && s.z > 0. || cDir == 1. && s.x < 0.) ? 0. : 1.;\n  if (vDir == 0.) p.xz = vec2 (- p.z, p.x);\n  q = p;\n  fqx = floor (q.x);\n  q.x -= fqx + 0.5;\n  q.z = sign (q.x) * (q.z + 3. * fqx) - cTimeV.x - ((cDir == vDir) ? vDir + cTimeV.y : 1.);\n  cCar = floor (20. * q.z);\n  q.z = fract (q.z) - 0.5;\n  q.x = abs (q.x) - 0.395 - 0.06 * (step (0.6, Hashff (11. * cCar)) + 0.5 * Hashff (13. * cCar));\n  return q;\n}\n\nfloat CarDf (vec3 p, float dMin)\n{\n  vec3 q, qq, b;\n  float d, h, bf, szFacCar;\n  szFacCar = 0.06;\n  q = CarPos (p);\n  bf = PrBox2Df (q.xz + vec2 (0., -0.1), vec2 (0.015, 0.2));\n  q.z = mod (q.z, 0.05) - 0.025;\n  dMin /= szFacCar;\n  q /= szFacCar;\n  q.y -= 0.15;\n  b = vec3 (0.13, 0.09, 0.3);\n  qq = q;\n  b.x -= 0.2 * abs (qq.y + 0.02 * qq.z + 0.01);\n  h = ((qq.z > 0.05) ? 0.21 : 0.13) * abs (qq.z - 0.05);\n  qq.y -= - h;\n  b.yz -= vec2 (h, 0.1 * abs (qq.y - 0.03));\n  d = max (PrBoxDf (qq, b), - PrBoxDf (q - vec3 (0., 0.01, -0.2), vec3 (0.115, 0.05, 0.09)));\n  qq = q;\n  qq.xz = abs (qq.xz) - vec2 (0.11, 0.2);\n  h = 0.15 * abs (qq.z);\n  qq.y += 0.08 + h;\n  d = max (d, - PrBoxDf (qq, vec3 (0.015, 0.04, 0.06) - vec3 (0., h, 0.06 * qq.y)));\n  d = max (d, bf);\n  if (d < dMin) qcCar = cCar;\n  DMINQ (idCarBdy);\n  qq = q;\n  qq.y -= -0.088;\n  d = PrBoxDf (qq, vec3 (0.13, 0.003, 0.14));\n  d = max (d, bf);\n  if (d < dMin) qcCar = cCar;\n  DMINQ (idCarBdy);\n  qq = vec3 (abs (q.xz) - vec2 (0.118, 0.2), q.y + 0.095).xzy;\n  d = PrRoundCylDf (qq.yzx, 0.041, 0.007, 0.013);\n  d = max (d, bf);\n  DMINQ (idCarWhl);\n  return 0.7 * szFacCar * dMin;\n}\n\nvec4 CarCol ()\n{\n  vec4 col4;\n  float z, r, s;\n  col4 = vec4 (HsvToRgb (vec3 (Hashff (qcCar * 37.), 0.5,\n     0.4 + 0.6 * vec3 (Hashff (qcCar * 47.)))), 0.5);\n  if (idObj == idCarBdy) {\n    z = abs (qHit.z - 0.05);\n    if (qHit.y > 0.015 && abs (z - 0.078) < 0.072 && (abs (qHit.x) < 0.12 - 0.2 * qHit.y ||\n       qHit.y < 0.085 - 2. * ((qHit.z > 0.05) ? 0.21 : 0.13) * z)) col4 = vec4 (0., 0., 0., -2.);\n    else if (qHit.z < - 0.298 && abs (qHit.y + 0.01) < 0.005 && abs (qHit.x) < 0.125)\n       col4 = vec4 (1., 0., 0., -1.);\n    else if (qHit.z > 0.298 && abs (qHit.y + 0.02) < 0.005 && abs (qHit.x) < 0.125)\n       col4 = vec4 (1., 1., 0.8, -1.);\n    else if (qHit.y < - 0.075 || abs (qHit.y) < 0.085 && z < 0.0008 || \n       abs (qHit.y + 0.009) < 0.031 && abs (qHit.z - 0.201) < 0.0008 ||\n       abs (qHit.y + 0.015) < 0.061 && abs (qHit.z + 0.101) < 0.0008) col4.rgb *= 0.6;\n    else if (qHit.z > 0.28 && abs (qHit.y + 0.05) < 0.015 && abs (qHit.x) < 0.08)\n       col4.rgb *= 1. - 0.3 * step (0.2, cos (80. * pi * qHit.x));\n    else if (qHit.y > -0.05 && abs (qHit.x) < 0.11 && abs (qHit.z + 0.2) < 0.085)\n       col4.rgb *= 0.9 + 0.1 * cos (160. * pi * qHit.x);\n  } else if (idObj == idCarWhl) {\n    s = sign (qHit.z);\n    qHit = vec3 (abs (qHit.xz) - vec2 (0.118, 0.2), qHit.y + 0.095).xzy;\n    r = length (qHit.yz);\n    if (r < 0.02) {\n      if (cDir == vDir) qHit.yz = Rot2D (qHit.yz, - 2. * pi * tCur * s);\n      if (abs (abs (qHit.y) - abs (qHit.z)) < 0.01) col4 = vec4 (0.9, 0.9, 1., 0.3);\n    } else if (r > 0.03) col4 = vec4 (vec3 (0.3), 0.) * (0.7 + 0.3 * step (0., cos (320. * pi * qHit.x)));\n  }\n  return col4;\n}\n\nfloat GObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = BldgDf (p, dMin);\n  dMin = CarDf (p, dMin);\n  return dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP, rdi;\n  float dHit, d, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.0001;\n  rdi= 1. / rd.xz;\n  cIdP = vec2 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p.xz);\n    if (Minv2 (p.xz + regSz.xz) > 0. && Maxv2 (p.xz - regSz.xz) < 1.) {\n      if (cId != cIdP) {\n        cIdP = cId;\n        SetBldgParms ();\n      }\n      d = GObjDf (p);\n    } else d = dstFar;\n    dHit += min (d, eps + max (0., Minv2 ((cId + step (0., rd.xz) - p.xz) * rdi)));\n    if (d < eps || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat GObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  cIdP = vec2 (-999.);\n  d = 0.001;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    p = ro + d * rd;\n    cId = floor (p.xz);\n    if (cId != cIdP) {\n      cIdP = cId;\n      SetBldgParms ();\n    }\n    h = BldgDf (p, dstFar);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += clamp (h, 0.01, 0.1);\n    if (h < 0.001) break;\n  }\n  idObj = idObjT;\n  return 0.7 + 0.3 * sh;\n}\n\nvec4 BldgCol (vec3 vn)\n{\n  vec4 col4;\n  vec2 g;\n  float wFac, f;\n  wFac = 1.;\n  col4 = vec4 (HsvToRgb (vec3 (0.7 * Hashfv2 (19. * cId), 0.2,\n     0.6 + 0.2 * Hashfv2 (21. * cId))), 0.3);\n  if (abs (vn.y) < 0.05) {\n    f = fract (qHit.y / flrHt - 0.2) - 0.5;\n    wFac = 1. - (step (0., f) - 0.5) * step (abs (abs (f) - 0.24), 0.02) -\n       0.801 * step (abs (f), 0.22);\n    if (wFac < 0.2) {\n      f = (idObj == idBldgF) ? 1.5 * dot (qHit.xz, normalize (vn.zx)) :\n         length (qHit.xz) * (atan (qHit.z, qHit.x) + 0.5 * pi);\n      wFac = min (0.2 + 0.8 * floor (fract (f / flrHt + 0.25) * (1. + Hashfv2 (51. * cId))), 1.);\n    }\n    col4.rgb *= wFac;\n  } else if (vn.y > 0.95) {\n    g = step (0.05, fract (qHit.xz * 70.));\n    col4.rgb *= mix (0.8, 1., g.x * g.y);\n  }\n  if (vn.y < 0.95 && wFac > 0.5)\n     col4.rgb *= (0.8 + 0.2 * Noisefv2 (512. * vec2 (qHit.x + qHit.z, qHit.y)));\n  if (wFac < 0.5) col4.a = -2.;\n  return col4;\n}\n\nvec4 GObjCol (vec3 ro, vec3 rd, vec3 vn)\n{\n  vec4 col4;\n  vec2 g, b;\n  float f, ff, y;\n  col4 = vec4 (0.);\n  if (idObj == idBldgF || idObj == idBldgC) {\n    col4 = BldgCol (vn);\n  } else if (idObj == idTwr) {\n    col4 = vec4 (0.3);\n  } else if (idObj == idTwrTop) {\n    col4 = vec4 (1., 0., 0., -2.);\n  } else if (idObj == idRoad) {\n    g = abs (fract (qHit.xz) - 0.5);\n    if (g.x < g.y) g = g.yx;\n    col4.rgb = mix (vec3 (0.12, 0.12, 0.15), vec3 (0.12), step (g.x, 0.355));\n    col4.rgb = mix (col4.rgb, vec3 (0.7, 0.6, 0.1), ((step (abs (g.x - 0.495), 0.002) +\n       step (abs (g.x - 0.365), 0.002)) + step (abs (g.x - 0.44), 0.0015) *\n       step (fract (g.y * 18. + 0.25), 0.7)) * step (g.y, 0.29));\n    col4 = mix (col4, vec4 (0.8, 0.8, 0.8, 0.2), step (0.6, fract (g.x * 30. + 0.25)) *\n       step (0.36, g.x) * step (abs (g.y - 0.32), 0.02));\n    col4 = mix (col4, vec4 (0.8, 0.8, 0.8, 0.2), step (0., Minv2 (abs (g) - 0.493)));\n    if (fDayLt > 0.5) {\n      b = CarPos (ro).xz;\n      g = abs (b + vec2 (0., -0.1)) - vec2 (0.015, 0.2);\n      if (Maxv2 (g) < 0.) col4 *= 0.6 + 0.4 * smoothstep (0.001, 0.003,\n         length (max (abs (vec2 (b.x, mod (b.y, 0.05) - 0.025)) - 0.06 * vec2 (0.13, 0.3), 0.)));\n    } else {\n      g = abs (fract (qHit.xz) - 0.5);\n      f = 1.3 * (1. - smoothstep (0.05, 0.2, length (g - 0.5)));\n      if (g.x < g.y) g = g.yx;\n      f += step (g.y, 0.35) * (1. - smoothstep (0.02, 0.05,\n         length ((vec2 (0.8 * abs (g.x - 0.437) - 0.015, mod (g.y + 0.05, 0.1) - 0.05)))));\n      col4.rgb = mix (col4.rgb, vec3 (1., 1., 0.7), 0.2 * f);\n    }\n  } else if (idObj == idSWalk) {\n    g = step (0.05, fract (qHit.xz * 35.));\n    col4.rgb = 1.2 * vec3 (0.2) * mix (0.7, 1., g.x * g.y);\n    if (bHt > 0.) {\n      f = ((bShape > 0.25) ? max (abs (qHit.x), abs (qHit.z)) : length (qHit.xz)) - bWid;\n      if (f < 0.02) col4.rgb *= 2.;\n      else if (f < 0.025) col4 = vec4 (vec3 (1., 1., 0.7) * max (0.5 - 0.5 * rd.y, 0.), -1.);\n    } else {\n      if (length (abs (qHit.xz) - 0.21) < 0.01) col4.rgb *= 0.7;\n    }\n  } else if (idObj == idTrLight) {\n    f = 2. * (atan (qHit.z, qHit.x) / pi + 1.) + 0.5;\n    ff = floor (f);\n    y = qHit.y - 0.014;\n    if (abs (y) < 0.004 && abs (f - ff) > 0.3) {\n      col4 = vec4 (mix (vec3 (0., 1., 0.), vec3 (1., 0., 0.), step (0., y)), -1.);\n      col4.rgb *= 1. - 0.8 * step (0., y * sign (cDir - 0.5) * sign (mod (ff, 2.) - 0.5));\n    } else {\n      col4 = vec4 (0.4, 0.2, 0.1, 0.5);\n    }\n  } else if (idObj == idStLight) {\n    if (qHit.y > 0.024 && vn.y < 0.1) {\n      col4 = vec4 (vec3 (0.8, 0.8, 0.4) * (0.7 - 0.3 * vn.y), -1.);\n    } else {\n      col4 = vec4 (vec3 (0.5, 0.5, 0.55) * (1. + 0.3 * sin (128. * 2. * pi * qHit.y)), 0.5);\n    }\n  } else if (idObj == idPool) {\n    col4 = (length (qHit.xz) < 0.18) ? vec4 (0.4, 0.4, 0.5, -2.) :\n       vec4 (0.2, 0.3, 0.5, 0.1) * (0.6 + 0.4 * fDayLt);\n  } else if (idObj == idTrnk) {\n    col4 = vec4 (0.4, 0.2, 0., 0.1);\n  } else if (idObj == idTree) {\n    col4 = vec4 (0., 0.6, 0.1, 0.1);\n  } else if (idObj == idCarBdy || idObj == idCarWhl) {\n    col4 = CarCol ();\n    if (idObj == idCarBdy && fDayLt < 0.5 && col4.a > 0.) {\n      g = abs (fract (ro.xz) - 0.5);\n      f = 1.3 * (1. - smoothstep (0.05, 0.2, length (g - 0.5)));\n      if (g.x < g.y) g = g.yx;\n      f += step (g.y, 0.35) * (1. - smoothstep (0.02, 0.05, length ((vec2 (0.8 *\n         abs (g.x - 0.437) - 0.015, mod (g.y + 0.05, 0.1) - 0.05)))));\n      col4.rgb = mix (col4.rgb, vec3 (0.7, 0.7, 0.5), 0.4 * f);\n    }\n  }\n  return col4;\n}\n\nfloat FObjDf (vec3 p)\n{\n  vec4 sLen;\n  vec3 q;\n  float dMin, d, s;\n  dMin = dstFar;\n  s = 0.1 / regSz.x;\n  q = p;\n  q = vec3 (q.xz - 0.5, q.y - regSz.y + 0.05).xzy;\n  q = abs (q);\n  sLen = vec4 (regSz + vec3 (0.5, 0.05, 0.5), 0.);\n  d = min (min (\n     PrRoundBoxDf (q - sLen.wyz, sLen.xww + s, s),\n     PrRoundBoxDf (q - sLen.xwz, sLen.wyw + s, s)),\n     PrRoundBoxDf (q - sLen.xyw, sLen.wwz + s, s));\n  DMIN (1);\n  return dMin;\n}\n\nfloat FObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    d = FObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 FObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = FObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd, vec3 sz)\n{\n  vec3 v, tm, tp, vn;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = sz / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return vec4 (dMin, vn);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, p, clCol;\n  float fd, f, ff;\n  rd.y = abs (rd.y);\n  col = vec3 (0.6);\n  if (rd.y >= 0.) {\n    p = 0.01 * (rd * (100. - ro.y) / max (rd.y, 0.0001) + ro + 4. * tCur);\n    ff = Fbm2 (p.xz);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (p.xz + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.7, 0.7, 0.8), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd),\n       clCol, 0.4 + 0.6 * f * fd);\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, db4, dx4;\n  vec3 col, vn, rdr, roo;\n  vec2 g, vf;\n  float dstObjF, dstObjG, dstFlyer, sh, s, f;\n  bool isRf, isBg;\n  roo = ro;\n  dx4 = BlkHit (vec3 (ro.xz - 0.5, ro.y - regSz.y).xzy, rd, vec3 (regSz.xz + 0.5, regSz.y).xzy);\n  db4 = BlkHit (vec3 (ro.xz - 0.5, ro.y + 0.041).xzy, rd, vec3 (regSz.xz + 0.5, 0.04).xzy);\n  dstObjF = FObjRay (ro, rd);\n  dstObjG = (dx4.x < dstFar) ? GObjRay (ro, rd) : dstFar;\n  dstFlyer = FlyerRay (ro, rd);\n  isBg = false;\n  if (min (dstObjG, min (dstFlyer, dstObjF)) < dstFar) {\n    vf = vec2 (0.);\n    if (dstObjG < min (dstFlyer, dstObjF)) {\n      ro += dstObjG * rd;\n      cId = floor (ro.xz);\n      SetBldgParms ();\n      vn = GObjNf (ro);\n      isRf = false; //((idObj == idBldgF || idObj == idBldgC) && vn.y > 0.95);\n      col4 = GObjCol (ro, rd, vn);\n      col = col4.rgb;\n      if (isRf && (rd.y <= 0. || rd.y > 0. && dstObjG < 0.3 * dstFar) && fDayLt < 0.3) col4.a =-2.;\n      if (col4.a >= 0.) {\n        if (idObj == idRoad) vf = vec2 (512., 1.);\n        else if ((idObj == idBldgF || idObj == idBldgC) && ! isRf) vf = vec2 (512., 0.5);\n        else if (idObj == idTrnk) vf = vec2 (256., 0.5);\n        else if (idObj == idTree) vf = vec2 (128., 2.);\n        else if (idObj == idSWalk && bHt == 0.) {\n          s = length (qHit.xz) - 0.2;\n          vn = normalize (vec3 ((1. - smoothstep (0., 0.02,\n             abs (s))) * sign (s) * normalize (qHit.xz), 2.)).xzy;\n        }\n        if (vf.x > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n        sh = (fDayLt > 0.5) ? mix (1., GObjSShadow (ro + 0.01 * vn, sunDir), fDayLt) : 1.;\n        col = col * (0.3 + 0.3 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n           0.2 * max (vn.y, 0.) + 0.7 * sh * max (dot (vn, sunDir), 0.)) +\n           step (0.95, sh) * col4.a * pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n        if (idObj == idBldgF || idObj == idBldgC) col *= 0.5 + 0.5 * smoothstep (0.3, 0.7, fDayLt);\n        if (fDayLt > 0.5) col *= vec3 (1., 0.9, 0.8);\n      }\n      if (col4.a == -2.) {\n        rdr = reflect (rd, vn);\n        g = Rot2D (rdr.xz, 5.1 * atan (20. + cId.y, 20. + cId.x));\n        f = step (1., 0.3 * ro.y + 4. * rdr.y -\n           0.1 * floor (5. * IFbm1 (0.3 * atan (g.y, g.x) + pi) + 0.05));\n        if (idObj == idBldgF || idObj == idBldgC) {\n          if (modeLt == 3 && ! isRf) {\n            col *= 0.5 + 3.5 * floor (2. * Hashff (73. * (floor (qHit.y / flrHt) -\n               floor (0.5 * nFloor * tCur))));\n          } else {\n            if (f == 1.) col = mix (0.3 * col, BgCol (ro, rdr), 0.5);\n            else col *= 0.3;\n            if (fDayLt < 1.) {\n              s = Hashfv2 (37. * cId);\n              f = step (fDayLt, 0.2 + 0.3 * Hashfv2 (47. * cId));\n              col = mix (0.2 * col, vec3 (0.8 + 0.2 * s, 0.75 - 0.4 * s, 0.), f);\n            }\n          }\n        } else if (idObj == idPool) {\n          if (f == 1.) col = 0.9 * BgCol (ro, rdr);\n          else col *= 0.3;\n        } else if (idObj == idCarBdy) {\n          if (f == 1.) col = mix (0.3 * col, BgCol (ro, rdr), 0.5);\n          else col *= 0.3;\n          col = mix (vec3 (0.2, 0.1, 0.), col, fDayLt);\n        }\n      }\n      if (col4.a == -2.) col *= 1. - 0.95 * smoothstep (0.4, 0.7, dstObjG / dstFar);\n      if (modeLt > 0) col = mix (col, BgCol (ro, rd), smoothstep (0.4, 1., dstObjG / dstFar));\n      else col = mix (col, vec3 (0.3), smoothstep (0.6, 1., dstObjG / dstFar));\n    } else if (dstFlyer < dstObjF) {\n      ro += dstFlyer * rd;\n      vn = FlyerNf (ro);\n      col4 = FlyerCol ();\n      col = col4.rgb;\n      if (col4.a >= 0.) {\n        if (fDayLt > 0.5) {\n          col = col * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n             col4.a * pow (max (dot (reflect (sunDir, vn), rd), 0.), 64.);\n          col = mix (col, BgCol (ro, reflect (rd, vn)), 0.2);\n        } else {\n          col = 0.3 * col * (0.7 + 0.3 * vn.y);\n        }\n      } else if (col4.a == -2.) {\n        col = mix (col, BgCol (ro, reflect (rd, vn)), 0.8);\n      }\n    } else {\n      ro += dstObjF * rd;\n      vn = FObjNf (ro);\n      col = vec3 (0.6) * (0.5 + 0.5 * max (dot (vn, sunDir), 0.));\n    }\n  } else {\n    col = BgCol (ro, rd);\n    isBg = true;\n  }\n  if (db4.x < min (min (dstObjF, dstObjG), dstFar)) {\n    vn = db4.yzw;\n    col = vec3 (0.5) * (0.2 + 0.8 * max (dot (vn, sunDir), 0.));\n  }\n  if (flyVu) {\n    if (isBg) col *= 0.7;\n  } else if (dx4.x < min (min (dstObjF, dstObjG), dstFar)) {\n    ro = roo + dx4.x * rd;\n    vn = dx4.yzw;\n    if (isBg) col *= 0.7;\n    col = mix (col, 0.8 * BgCol (ro, reflect (rd, vn)), 0.05 +\n       0.95 * pow (1. - abs (dot (vn, rd)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 TrackPath (float t)\n{ \n  vec3 p;\n  vec2 s;\n  float tt;\n  p.y = 1.8 + 1.5 * sin (0.4 * pi * t);\n  t = mod (t, 4.);\n  tt = -1. + 2. * fract (t);\n  s = regSz.xz - 0.5;\n  if (t < 1.) p.xz = vec2 (s.x, s.y * tt);\n  else if (t < 2.) p.xz = vec2 (- s.x * tt, s.y);\n  else if (t < 3.) p.xz = vec2 (- s.x, - s.y * tt);\n  else if (t < 4.) p.xz = vec2 (s.x * tt, - s.y);\n  p.xz += 0.5;\n  return p;\n}\n\nvoid FlyerPM (float s, float rl, float vu, out vec3 flPos, out mat3 flMat)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, ca, sa;\n  float ds, rlFac, elFac, el, az;\n  ds = 0.06;\n  elFac = 0.7;\n  rlFac = 0.005;\n  fpF = TrackPath (s + ds);\n  fpB = TrackPath (s - ds);\n  vel = normalize ((fpF - fpB) / (2. * ds));\n  acc = (fpF - 2. * TrackPath (s) + fpB) / (2. * ds * ds);\n  flPos = 0.5 * (fpF + fpB);\n  va = cross (acc, vel);\n  el = - elFac * asin (vel.y);\n  az = atan (vel.z, vel.x) - 0.5 * pi;\n  rl += rlFac * length (va) * sign (va.y);\n  ort = (vu >= 0.) ? vec3 (el, az, rl) : vec3 (- el, az + pi, - rl);\n  ca = cos (ort);\n  sa = sin (ort);\n  flMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n}\n\n#define N_WIN  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat, vuFlyMat;\n  vec4 mPtr;\n  vec3 ro, rd, col, vd;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw, mAzEl, vAzEl;\n  float spd, zmFac, el, az, asp, sr, cTime, tPos;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./6.) * vec2 (asp, 1.);\n  mMid[0] = (1. - mSize.y) * vec2 (asp, -1.);\n  for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    for (int k = 0; k < N_WIN; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = k + 1;\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = k + 1;\n      break;\n    }\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  mAzEl = (mPtr.z > 0. && vuId == regId) ? vec2 (2., 1.) * pi * msw : vec2 (0.);\n  if (length (uv * vec2 (1. / asp, 1.)) < 1.5 * SmoothBump (0.25, 0.75, 0.03, fract (tCur / 45.)))\n     vuId = 1 - vuId;\n  flyVu = (vuId == 1);\n  modeLt = 0;\n  fDayLt = 1.;\n  tCur += 2.;\n  regSz = vec3 (4., 2.8, 4.);\n  spd = 0.1;\n  tPos = spd * tCur;\n  szFacFl = flyVu ? 0.007 : 0.02;\n  csRotor = sin (10. * pi * tCur + vec2 (0.5 * pi, 0.));\n  FlyerPM (tPos, 0.2 * pi * (Fbm1 (16. * tPos) - 0.5), 1., flyerPos, flyerMat);\n  flyerPos.y += 0.04 * (Fbm1 (tPos) - 0.5);\n  sunDir = normalize (vec3 (1., 1., -1.));\n  if (flyVu) {\n    FlyerPM (tPos - 0.1, 0., 1., ro, vuFlyMat);\n    ro.xz += 0.01;\n    az = mAzEl.x;\n    el = clamp (mAzEl.y, -0.45 * pi, 0.45 * pi);\n    zmFac = 2.;\n  } else {\n    ro = vec3 (0., 3., -5.5 * regSz.z);\n    az = -0.1 * pi;\n    el = 0.;\n    if (mPtr.z > 0.) {\n      az += mAzEl.x;\n      el = clamp (el + mAzEl.y, -0.45 * pi, 0.2 * pi);\n    } else {\n      vd = normalize (- ro);\n      el += asin (vd.y);\n      az += 0.5 * pi - atan (vd.z, -vd.x);\n    }\n    zmFac = 4.2 / (1. - 0.9 * smoothstep (0., 1., - el));\n    el -= 0.025 * pi;\n  }\n  vuMat = StdVuMat (el, az);\n  if (! flyVu) {\n    ro = vuMat * ro;\n    ro.xz += 0.5;\n    ro.y -= 0.3 * regSz.z;\n  }\n  sunDir = vuMat * sunDir;\n  dstFar = 100.;\n  flrHt = 0.07;\n  cTime = 0.15 * tCur;\n  cDir = mod (floor (cTime), 2.);\n  cTimeV = vec2 (floor (0.5 * floor (cTime)), fract (cTime));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    if (flyVu) uvv.x = 2. * tan (0.5 * atan (uvv.x / asp)) * asp;\n    rd = vuMat * normalize (vec3 (uvv, 1.));\n    if (flyVu) rd = rd * vuFlyMat;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.7, 0.3, 0.3);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat IFbm1 (float p)\n{\n  float s, a;\n  p *= 5.;\n  s = 0.;\n  a = 10.;\n  for (int j = 0; j < 4; j ++) {\n    s += floor (a * Noiseff (p));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return 0.1 * s;\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}