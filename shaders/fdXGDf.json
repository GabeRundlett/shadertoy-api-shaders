{
    "Shader": {
        "info": {
            "date": "1616621063",
            "description": "goku v3",
            "flags": 8,
            "hasliked": 0,
            "id": "fdXGDf",
            "likes": 3,
            "name": "goku v3",
            "published": 3,
            "tags": [
                "gokuv3"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1 ----jorgeFloresP\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n//----------\nfloat sdBox( in vec2 p, in vec2 b )\n{  vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r; }\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n////-------------------\n\n//https://www.shadertoy.com/view/tlGBW3\n//Created by manu210404 in 2021-03-13\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\nfloat sdPoly11 POLY(11)\nfloat sdPoly28 POLY(28)\nfloat sdPoly17 POLY(17)\nfloat sdPoly09 POLY(9)\nfloat sdPoly25 POLY(25)\n\n\nvec2 pt25[ 25]=vec2[](  \nvec2(.52,.01),vec2(.21,.14),vec2(.29,.17),vec2(.12,.34),vec2(.26,.34),\nvec2(.12,.54),vec2(.09,.58),vec2(.05,.61),vec2(.01,.64),vec2(.04,.67),\nvec2(.11,.70),vec2(.17,.71),vec2(.21,.71),vec2(.25,.69),vec2(.31,.65),\nvec2(.27,.82),vec2(.26,.86),vec2(.22,.95),vec2(.19,1.00),vec2(.26,1.00),\nvec2(.35,.98),vec2(.44,.93),vec2(.49,.86),vec2(.55,.72),vec2(.52,.01) );\n\nfloat sdPoly15 POLY(15)\nvec2 pt15[ 15]=vec2[](  \nvec2(.53,.03),vec2(.82,.08),vec2(.76,.13),vec2(.91,.19),vec2(.80,.23),\nvec2(.97,.37),vec2(.92,.41),vec2(.88,.43),vec2(.84,.44),vec2(.98,.59),\nvec2(.91,.60),vec2(.82,.60),vec2(.73,.58),vec2(.55,.72),vec2(.53,.03) );\n\n\n//float sdPoly15 POLY(15)\nvec2 pt15b[ 15]=vec2[](  \nvec2(.38,.11),vec2(.35,.29),vec2(.32,.53),vec2(.53,.61),vec2(.73,.50),\nvec2(.67,.12),vec2(.66,.10),vec2(.62,.06),vec2(.56,.02),vec2(.55,.01),\nvec2(.52,.00),vec2(.48,.02),vec2(.43,.05),vec2(.39,.09),vec2(.38,.11) );\n\n\nfloat sdPoly18 POLY(18)\nvec2 pt18[ 18]=vec2[](  \nvec2(.35,.29),vec2(.37,.27),vec2(.36,.34),vec2(.39,.32),vec2(.38,.42),\nvec2(.38,.45),vec2(.41,.50),vec2(.42,.41),vec2(.42,.38),vec2(.44,.33),\nvec2(.45,.39),vec2(.46,.44),vec2(.47,.47),vec2(.51,.52),vec2(.55,.56),\nvec2(.53,.61),vec2(.32,.53),vec2(.35,.29) );\n\n\nfloat sdPoly20 POLY(20)\nvec2 pt20[ 20]=vec2[](  \nvec2(.70,.28),vec2(.68,.26),vec2(.69,.33),vec2(.66,.30),vec2(.67,.35),\nvec2(.68,.40),vec2(.68,.45),vec2(.67,.48),vec2(.66,.45),vec2(.65,.42),\nvec2(.62,.38),vec2(.59,.35),vec2(.59,.39),vec2(.59,.45),vec2(.58,.50),\nvec2(.57,.53),vec2(.55,.56),vec2(.53,.61),vec2(.73,.50),vec2(.70,.28) );\n\n\n//float sdPoly11 POLY(11)\nvec2 pt11[ 11]=vec2[](  \nvec2(.38,.12),vec2(.36,.12),vec2(.34,.14),vec2(.31,.18),vec2(.31,.19),\nvec2(.31,.27),vec2(.31,.30),vec2(.32,.30),vec2(.34,.29),vec2(.35,.28),\nvec2(.38,.12) );\n\n\nfloat sdPoly12 POLY(12)\nvec2 pt12[ 12]=vec2[](  \nvec2(.67,.12),vec2(.69,.12),vec2(.71,.13),vec2(.74,.18),vec2(.74,.18),\nvec2(.75,.22),vec2(.75,.26),vec2(.75,.29),vec2(.74,.30),vec2(.73,.31),\nvec2(.70,.28),vec2(.67,.12) );\n\n\nfloat sdPoly13 POLY(13)\nvec2 pt13[ 13]=vec2[](  \nvec2(.41,.40),vec2(.39,.42),vec2(.41,.46),vec2(.42,.46),vec2(.44,.47),\nvec2(.47,.46),vec2(.47,.44),vec2(.49,.40),vec2(.48,.40),vec2(.47,.43),\nvec2(.45,.44),vec2(.43,.44),vec2(.41,.40) );\n\n\n//float sdPoly13 POLY(13)\nvec2 pt13b[ 13]=vec2[](  \nvec2(.56,.41),vec2(.58,.44),vec2(.59,.45),vec2(.61,.47),vec2(.64,.46),\nvec2(.65,.44),vec2(.67,.42),vec2(.65,.39),vec2(.64,.42),vec2(.62,.43),\nvec2(.61,.43),vec2(.59,.42),vec2(.56,.41) );\n\nfloat sdPoly14 POLY(14)\nvec2 pt14[ 14]=vec2[](  \nvec2(.40,.18),vec2(.39,.23),vec2(.39,.24),vec2(.39,.28),vec2(.40,.31),\nvec2(.42,.34),vec2(.43,.35),vec2(.45,.35),vec2(.46,.34),vec2(.48,.32),\nvec2(.49,.28),vec2(.49,.20),vec2(.46,.18),vec2(.40,.18) );\n\n\n//float sdPoly15 POLY(15)\nvec2 pt15c[ 15]=vec2[](  \nvec2(.57,.19),vec2(.56,.22),vec2(.56,.25),vec2(.56,.28),vec2(.57,.31),\nvec2(.58,.33),vec2(.60,.34),vec2(.62,.35),vec2(.64,.34),vec2(.65,.30),\nvec2(.65,.26),vec2(.64,.19),vec2(.62,.19),vec2(.59,.18),vec2(.57,.19) );\n\n\nfloat sdPoly6 POLY(6)\nvec2 pt6[ 6]=vec2[](  \nvec2(.51,.15),vec2(.51,.16),vec2(.52,.18),vec2(.52,.16),vec2(.52,.16),\nvec2(.51,.15) );\n\nfloat sdPoly9 POLY(9)\nvec2 pt9[ 9]=vec2[](  \nvec2(.48,.13),vec2(.51,.12),vec2(.53,.12),vec2(.55,.13),vec2(.58,.15),\nvec2(.55,.13),vec2(.52,.12),vec2(.51,.12),vec2(.48,.13) );\n\n\n\nvec3 RostroGoku(in vec2 pp, vec3 col) \n{\n  vec2 p=pp;\n  float sd1 = sdPoly25(p-vec2(0.0,-0.2), pt25);\n  float sd2 = sdPoly15(p-vec2(0.0,-0.2), pt15);\n  float sd3 = sdPoly15(p-vec2(0.0,-0.2), pt15b);\n  float sd4 = sdPoly18(p-vec2(0.0,-0.2), pt18);\n  float sd5 = sdPoly20(p-vec2(0.0,-0.2), pt20);\n  float sd6 = sdPoly11(p-vec2(0.0,-0.2), pt11); //orejas izq\n  float sd7 = sdPoly12(p-vec2(0.0,-0.2), pt12); //orejas der\n  float sd8 = sdPoly13(p-vec2(0.0,-0.2), pt13); //ceja izq\n  float sd9 = sdPoly13(p-vec2(0.0,-0.2), pt13b); //ceja der\n  float sd10 = sdPoly14(p-vec2(0.0,-0.2), pt14);\n  float sd11 = sdPoly15(p-vec2(0.0,-0.2), pt15c);\n  //nariz\n  float sd12 = sdPoly6(p-vec2(0.0,-0.2), pt6);\n  float sd13 = sdPoly9(p-vec2(0.0,-0.2), pt9);\n  float ojo1= sdCircle(  p-vec2(0.44+0.03*sin(iTime),0.05), 0.022 );\n  float ojo2= sdCircle(  p-vec2(0.59+0.03*sin(iTime),0.05), 0.022 );\n  \n  col = mix(col,vec3(0.0, 0.0,0.0),S(sd1,0.0));\n  col = mix(col,vec3(0.0, 0.0,0.0),S(sd2,0.0));\n  col = mix(col,vec3(0.98, 0.82,0.720),S(sd3,0.0));\n  col = mix(col,vec3(0.0, 0.0,0.0),S(sd4,0.0));\n  col = mix(col,vec3(0.0, 0.0,0.0),S(sd5,0.0));\n  //orejas\n  col = mix(col,vec3(0.92, 0.82,0.720),S(sd6,0.0));\n  col = mix(col,vec3(0.92, 0.82,0.720),S(sd7,0.0));\n  //cejas\n  col = mix(col,vec3(0.3, 0.3,0.3),S(sd8,0.0));\n  col = mix(col,vec3(0.3, 0.3,0.3),S(sd9,0.0));\n  col = mix(col,vec3(1.0, 1.0,1.0),S(sd10,0.0));\n  col = mix(col,vec3(1.0, 1.0,1.0),S(sd11,0.0));\n  col = mix(col,vec3(0.0, 0.0,0.0),S(sd12,0.0));\n  //boca\n  col = mix(col,vec3(0.0, 0.0,0.0),S(sd13,0.0));\n  //ojos\n  col = mix(col,vec3(0.3, 0.2,0.2),S(ojo1,0.0));\n  col = mix(col,vec3(0.3, 0.2,0.2),S(ojo2,0.0));\n  \n  return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = (fragCoord-iResolution.xy)/iResolution.y;\n    //posicion\n    vec2 p=uv+vec2(1.5,0.7);\n    // escala\n    p.x*=0.7;\n    p*=0.5+1.0*abs(sin(iTime*0.35));\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n     col= RostroGoku( p,col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//modificado por jorge flores p.  -24-mar-2020\n\n//Created by nabr in 2019-06-05\n// https://www.shadertoy.com/view/WlSGWw\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\nvec2 synthv2( float t)\n{\n// --------- SYNTH\n    int t1=int(t) % 4;\n    vec2 valor=mat4x2(496, 656, 696, 376, 776, 456, 656, 276)[t1];\n    \n\tvec2 s = sin(t * mat4x2(496, 656, 696, 376, 776, 456, 656, 276)[t1]) - .5;\n    vec2 s2 = tan(t * valor)*tan(t * valor)+ 1.0;\n    \n\tif(t<6.) // intro\n    {\n\t\ts *= sin(s * mod(t, 8.) + 18. * sin(t));\n        s+=s2;\n    }\n\telse \n    {\n\n        s *=  sin(s * mod(t*0.5, 8.) * 16.) ;\n        s=s*s2;\n    }   \n    return s;\n}\n   \nvec2 m(float t)\n{\n    vec2 s= synthv2( t);\n\t// --------- DRUMS(kick)\n    \n\tfloat tm = mod(t, .5);\n    float tm2 = mod(t, 1.8);\n    \n\tif(t<6.) tm = mod(t, 1.5); // intro\n\tfloat finetune = 1.8;\n    \n\t// kick\n\t\n    float k = (sin(80.0 * exp(-sin(tm * finetune) * 10.0)) * exp(-tm * 10.0));\n\tk *= cos(120.0 * exp(-tm * 2.0));\n    \n    // sub\n\tfloat kovt = (k - sin(tm * 580.) * exp(-tm * 1.5));\n\tkovt *= min(1., tm * 100.) * max(0., .5 - tm);\n\tkovt -= (.25 - asin(kovt * tm * 12.));\n\tk *= min(1., tm * 500.) * max(0., 1. - tm);\n\tk = 1.9 * (kovt + k);\n    \n    // -------- MASTER\n\treturn (k + .4 * s ) * .25;\n}\n\n//modificado por jorge flores p.  -24-mar-2020\n//Created by nabr in 2019-06-05\n//https://www.shadertoy.com/view/WlSGWw\nvec2 mainSound( in int samp,float time){return m(time);}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}