{
    "Shader": {
        "info": {
            "date": "1725248981",
            "description": "Rothko inspired shader. Kinda broken on mobile and I left in some debug code from when I was trying to fix it",
            "flags": 0,
            "hasliked": 0,
            "id": "lcSBR3",
            "likes": 2,
            "name": "Look at me I'm Mark Rothko!",
            "published": 3,
            "tags": [
                "rothko"
            ],
            "usePreview": 0,
            "username": "PreMalone",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "\nprecision highp float;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Random\nfloat random2 (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 13758.5453123);\n}\n\nfloat random (float a) {\n    return fract(sin(a *109.057)\n                 * 23758.5453123);\n}\n\nfloat random2 (float a) {\n    return fract(sin(a *109.057)\n                 * 13758.5453123);\n}\n\nfloat draw_box(vec2 top_left, vec2 bottom_right, float fade, vec2 _st) {\n    vec2 x = smoothstep(top_left - fade, top_left, _st);\n    x -= smoothstep(bottom_right, bottom_right + fade, _st);\n    return x.x * x.y;\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat noise2 (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random2(i);\n    float b = random2(i + vec2(1.0, 0.0));\n    float c = random2(i + vec2(0.0, 1.0));\n    float d = random2(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat noise (float a) {\n    float i = floor(a);\n    float f = fract(a);\n    return mix(random(i),random(i+1.0), smoothstep(0.0,1.0,f));\n}\n\nfloat noise2 (float a) {\n    float i = floor(a);\n    float f = fract(a);\n    return mix(random2(i),random2(i+1.0), smoothstep(0.0,1.0,f));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord/iResolution.xy;\n    float time_step = 1000.*random2(0.005*floor(4.5*iTime));\n    //Background\n    fragColor = vec4(0.048,0.000,0.145,1.000);\n    \n    //Add some dark noise\n    float bg_noise = noise(60.360*st+114.+time_step);\n    bg_noise = smoothstep(0.468,1.028,bg_noise);\n    fragColor = mix(fragColor, vec4(0.032,0.017,0.105,1.000), bg_noise);\n    \n\t//Add some light green noise\n    bg_noise = noise(20.360*st+14.+time_step);\n    bg_noise = smoothstep(0.628,4.252,bg_noise);\n    fragColor = mix(fragColor, vec4(0.129,0.490,0.145,1.000), bg_noise);\n    \n//top left rothko box\n    vec2 corner1 = vec2(0.050,0.450);\n    vec2 corner2 = vec2(0.470,0.930);\n    float base_box = draw_box(corner1, corner2, 0.05, st);\n    vec3 box_color = vec3(0.646,0.644,0.875);\n    \n    //Add noise around the edges\n    float n = noise(18.432*st + 1433.680+time_step);\n    n = smoothstep(0.116,0.636,n) - smoothstep(0.662, 0.932, n);\n    float noise_box = n * draw_box(corner1, corner2, 0.09, st);\n    noise_box = mix(noise_box,1.0, base_box);\n    \n    //dissolve edges\n    float sharp_box;\n    float dissolve_mask = smoothstep(1.0, 0.142, noise_box) - smoothstep(0.144,0.,noise_box);\n    sharp_box = smoothstep(0.0,1.308,random(noise_box*st.x+time_step))*noise_box;\n    noise_box = mix(noise_box,sharp_box,0.980*dissolve_mask);\n    \n    //sharpen edge\n    noise_box = pow(noise_box,3.0);\n\n    //blobs\n    n = noise(23.544*st + 541.123+time_step);\n    n = smoothstep(0.200,0.420, n)-smoothstep(0.4,1.032,n);\n    n *= sin(noise(30.0*st.y));\n    box_color = mix(box_color, vec3(0.099,0.145,0.120), 0.102*n);\n    \n    //fuzzy waves\n    n = sin(37.112*st.y)*noise(25.*st.y+0.3*sin(35.464*noise(12.*st.x+time_step))+time_step);\n    box_color = mix(box_color, vec3(0.059,0.220,0.205), 0.25*n);\n    fragColor = mix(fragColor, vec4(box_color,1.000), noise_box);\n\n//top right rothko bg\n    \n//top right rothko box\n    corner1 = vec2(0.565,0.430);\n    corner2 = vec2(0.920,0.920);\n    base_box = draw_box(corner1, corner2, 0.08, st);\n    box_color = vec3(0.063,0.011,0.675);\n    \n    //Add noise around the edges\n    n = noise(vec2(15.100,8.340)*st + 933.680+time_step);\n    n = smoothstep(0.116,0.636,n) - smoothstep(0.662, 0.932, n);\n    noise_box = n * draw_box(corner1, corner2, 0.18, st);\n    noise_box = mix(noise_box,1.0, base_box);\n    \n    //dissolve edges\n    sharp_box;\n    dissolve_mask = smoothstep(1.0, 0.478, noise_box) - smoothstep(0.480,0.,noise_box);\n    sharp_box = smoothstep(0.0,0.532,random(noise_box*st.x+time_step))*noise_box;\n    noise_box = mix(noise_box,sharp_box,0.760*dissolve_mask);\n    \n    //sharpen edge\n    noise_box = pow(noise_box,4.0);\n    //Crackly dark noise\n    n = noise(vec2(93.5,13.48)*st - time_step);\n    float dark_n = smoothstep(0.316,0.632, n)-smoothstep(0.358,0.714,n);\n    float light_n = smoothstep(0.408,0.876, n) - smoothstep(0.636,1.116, n);\n    box_color = mix(box_color,vec3(0.042,0.030,0.215), 0.256*dark_n);\n    box_color = mix(box_color,vec3(0.150,0.138,0.500), 0.152*light_n);\n    \n    //saturation noise\n    vec3 box_hsv = rgb2hsv(box_color);\n    n = noise(vec2(8.0,12.0)*st+time_step);\n    n = smoothstep(-0.048,1.268,n);\n    box_hsv.y += 0.23*n;\n    box_color = mix(box_color,hsv2rgb(box_hsv),-0.036);\n    fragColor = mix(fragColor, vec4(box_color,1.000), noise_box);\n\n//bottom rothko bg\n    corner1 = vec2(0.010,0.055);\n    corner2 = vec2(0.990,0.3);\n    vec2 warped_st = st + 0.02*noise2(3.448*st+time_step)-0.01;\n    noise_box = draw_box(corner1, corner2, 0.08, warped_st);\n    noise_box *= noise2(6.5*st+time_step);\n    noise_box = random2(noise_box*(st.x*st.y+time_step))*noise_box;\n    noise_box = pow(noise_box,1.5);\n    \n    box_color = vec3(0.655,0.436,0.115);\n    fragColor = mix(fragColor, vec4(box_color,1.000), noise_box);\n//bottom rothko box\n    corner1 = vec2(0.020,0.070);\n    corner2 = vec2(0.980,0.310);\n    \n    warped_st = st + 0.015*noise2(15.0*st+time_step);\n    base_box = draw_box(corner1, corner2, 0.02, warped_st);\n    box_color = vec3(0.775,0.623,0.334);\n    \n    //Add noise around the edges\n    n = noise2(vec2(44.5,55.48)*st + time_step);\n    n = smoothstep(0.116,0.636,n) - smoothstep(0.662, 0.932, n);\n    noise_box = n * draw_box(corner1, corner2, 0.025, warped_st);\n    noise_box = mix(noise_box,1.0, base_box);\n    \n    //dissolve edges\n    sharp_box;\n    dissolve_mask = smoothstep(1.0, 0.286, noise_box) - smoothstep(0.944,0.,noise_box);\n    sharp_box = smoothstep(0.0,0.532,random(noise_box*st.x+time_step))*noise_box;\n    noise_box = mix(noise_box,sharp_box,0.600*dissolve_mask);\n    \n    //sharpen edge\n    noise_box = pow(noise_box,3.5);\n    //Crackly dark noise\n    vec2 sin_st = sin(vec2(4.5*st.x,2.0+0.8*st.y));\n    n = noise2(vec2(3.5,23.48)*sin_st + time_step);\n    dark_n = smoothstep(0.316,0.632, n)-smoothstep(-0.138,0.714,n);\n    light_n = smoothstep(0.200,0.556, n) - smoothstep(0.260,0.732, n);\n    box_color = mix(box_color,vec3(0.215,0.020,0.000), 0.088*dark_n);\n    box_color = mix(box_color,vec3(0.795,0.870,0.466), 0.104*light_n);\n    \n    //saturation noise\n    box_hsv = rgb2hsv(box_color);\n    n = noise2(vec2(173.0,454.0)*st+time_step);\n    n = smoothstep(-0.048,1.268,n);\n    box_hsv.y -= 0.23*n;\n    box_color = mix(box_color,hsv2rgb(box_hsv),0.760*(noise2(4.0*st+time_step)+0.6));\n    fragColor = mix(fragColor, vec4(box_color,1.000), noise_box*0.95);\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}