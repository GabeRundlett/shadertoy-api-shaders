{
    "Shader": {
        "info": {
            "date": "1509251994",
            "description": "Gaussian primes: [url]http://mathworld.wolfram.com/GaussianPrime.html[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4ljyRK",
            "likes": 7,
            "name": "Primes - Gaussian",
            "published": 3,
            "tags": [
                "2d",
                "gaussian",
                "prime",
                "primes"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 983
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2017\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n\n// Gaussian primes: http://mathworld.wolfram.com/GaussianPrime.html\n//\n// Regular primes: https://www.shadertoy.com/view/4slGRH\n\nbool isPrime( int x )\n{\n\tif( x==1 ) return false;\n\tif( x==2 ) return true;\n\tif( x==3 ) return true;\n\tif( x==5 ) return true;\n\tif( x==7 ) return true;\n\tif( (x&1)==0 ) return false;\n\tif( (x%3)==0 ) return false;\n\tif( (x%5)==0 ) return false;\n\n    int xm = 1 + int(sqrt(float(x)));\n    \n\tint y = 7;\n\tfor( int i=0; i<100; i++ ) // count up to 3000 (100*30). See  https://iquilezles.org/blog/?p=1558\n\t{\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm    ) return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t}\n\t\n\treturn true;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = exp2( -(2.0 + 2.0*cos(6.2831*iTime/20.0)) );\n    ivec2 p = ivec2( floor((fragCoord-iResolution.xy*0.5)*s) );\n    \n    p = abs(p);\n    \n    \n    bool isPr = false;\n    \n    if( p.x==0 ) \n    {\n        isPr = isPrime(p.y) && ((p.y&3)==3);\n    }\n    else if( p.y==0 ) \n    {\n        isPr = isPrime(p.x) && ((p.x&3)==3);\n    }\n    else\n    {\n        isPr = isPrime(p.x*p.x+p.y*p.y);\n    }\n    \n    if( p.x==1 && p.y==1 ) isPr = true;\n    \n    fragColor = vec4( isPr?vec3(0.5,1.0,0.0):vec3(0.0), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}