{
    "Shader": {
        "info": {
            "date": "1523368521",
            "description": "reproduce some  Ã‰tienne Jacob's effects [url]https://goo.gl/vBGWwj[/url] (see ref below)\n\nfollowing his tuto (based of Processing) [url]https://necessarydisorder.wordpress.com/[/url]\ncore Idea:  interpolated points delayed.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldycWV",
            "likes": 60,
            "name": "necessary-disorder \"Gif7\"",
            "published": 3,
            "tags": [
                "2d",
                "curves",
                "interpolation",
                "art",
                "reproduction",
                "etiennejacob"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1346
        },
        "renderpass": [
            {
                "code": "// #4b: https://shadertoy.com/view/MsGcWK\n// #4: https://shadertoy.com/view/lsGcWK\n// #3: https://shadertoy.com/view/MdGcWK\n// shaking grid: https://www.shadertoy.com/view/MdyyWK\n// #2: https://shadertoy.com/view/lsGyWK\n// #1: https://shadertoy.com/view/MdGyWK\n\n// http://www.thisiscolossal.com/2018/04/animation-of-sinusoidal-waves-in-gifs-by-etienne-jacob\n// EJ's tutos: https://necessarydisorder.wordpress.com/\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))          // rotation\n#define S(D,e) smoothstep( 3., 0., length(D)*R.y -e )      // for antialiasing\nvec2 A,B,R; float l;\n#define line(p,a,b) ( l = dot(B=b-a, A=p-a)/dot(B,B), clamp(l,0.,1.) == l ? S(A-B*l,0.) : 0.)\n//float line(vec2 p, vec2 a, vec2 b) {                     // draw a segment without round ends\n//    b -= a; p -= a;\n//    float l = dot(b,p)/dot(b,b);\n//    return clamp(l, 0., 1.) == l ? S( p - b * l ,0.) : 0.;\n//}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    R = iResolution.xy;\n    U = ( U+U - R ) / R.y;\n    O -= O;\n    \n    float v,f, t = 2.*iTime, T = 12., S=1.6, K = .05;\n    mat2 M  = rot(6.283/8.), M2 = rot(6.283/48.);\n    vec2 _P, P, Ui, Uj = U;\n    \n#define  P0(t) vec2(-.9,.4) + K* vec2(2.*cos(t+1.) ,sin(t+1.)  )\n#define  P1(t) vec2(  0,.4) + K* vec2(2.*cos(t1(t)),-sin(t1(t)))\n#define  t1(t)  S*(t) + .5*cos( S*(t) )\n\n    // 48 curves = 8 angular copies (4+sym) of 6 dephased-curves \n    for (float j=0.; j<6.; j++, Uj*=M2 ) {         // 6 phases\n        f  = t + 6.283*j/6.;\n        _P= P0(f);\n        for (float s=0.; s<1.; s+=.01) {           // draw delayed-interpolation P0 -> P1\n            P = mix( P0(f-T*s) , P1(f-T*(1.-s)) , s ); \n            v =  1. + 1e2* length(P-_P);           // thicker when slow\n            Ui = Uj;\n            for (int i = 0; i < 4; i++, Ui*= M )   // 4 angular copies\n                O += line(Ui*sign(Ui.y),_P,P) / v; // + central symmetry\n            _P = P;                                // NB: doable to use 2ble symmetry\n        }\n        for (int i = 0; i < 8; i++, Ui*= M )       // draw dots\n            O += S(P0(f)-Ui, 2.),\n            O += S(P1(f)-Ui, 2.);\n   }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}