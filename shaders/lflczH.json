{
    "Shader": {
        "info": {
            "date": "1727564704",
            "description": "Claude 3.5 Sonnet Ray Marching \"more complex\" example",
            "flags": 0,
            "hasliked": 0,
            "id": "lflczH",
            "likes": 0,
            "name": "Ray Marching Complex by Claude",
            "published": 3,
            "tags": [
                "claude"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 46
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n#define PI 3.14159265359\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Signed distance functions\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sdFloor(vec3 p) {\n    float d = p.y + 1.0;\n    // Create a checkerboard pattern\n    float s = 0.1;\n    if (fract(s*p.x)*fract(s*p.z) < 0.5) d -= 0.05;\n    return d;\n}\n\n// Scene description\nfloat getDist(vec3 p) {\n    float time = iTime * 0.5;\n    \n    // Rotating spheres\n    vec3 p1 = rotateY(time) * p;\n    float sphere1 = sdSphere(p1 - vec3(2, 0, 0), 1.0);\n    \n    vec3 p2 = rotateY(-time * 1.3) * p;\n    float sphere2 = sdSphere(p2 - vec3(-2, sin(time) * 0.5, 0), 0.7);\n    \n    // Central cube\n    float cube = sdBox(p - vec3(0, 0.5 + sin(time) * 0.5, 0), vec3(0.5));\n    \n    // Floor\n    float floor = sdFloor(p);\n    \n    return min(min(min(sphere1, sphere2), cube), floor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(0.001, 0);\n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx)\n    );\n    return normalize(n);\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p),\n        r = normalize(cross(vec3(0, 1, 0), f)),\n        u = cross(f, r),\n        c = f * z,\n        i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\nvec3 getLight(vec3 p, vec3 rd) {\n    vec3 lightPos = vec3(2, 5, 3);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    \n    float diff = clamp(dot(n, l), 0.0, 1.0);\n    float d = rayMarch(p + n * SURF_DIST * 2.0, l);\n    if(d < length(lightPos - p)) diff *= 0.1;\n    \n    vec3 r = reflect(-l, n);\n    float spec = pow(max(dot(r, -rd), 0.0), 32.0);\n    \n    return vec3(diff) + vec3(spec);\n}\n\nvec3 getSkyColor(vec3 rd) {\n    float t = 0.5 * (rd.y + 1.0);\n    return mix(vec3(0.5, 0.7, 1.0), vec3(0.2, 0.2, 0.6), t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 3, -5);\n    vec3 rd = getRayDir(uv, ro, vec3(0, 0, 0), 1.0);\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    vec3 col;\n    \n    if(d > MAX_DIST) {\n        col = getSkyColor(rd);\n    } else {\n        vec3 light = getLight(p, rd);\n        col = light * 0.8;\n        \n        // Add reflections\n        vec3 n = getNormal(p);\n        vec3 r = reflect(rd, n);\n        float reflDist = rayMarch(p + n * SURF_DIST * 3.0, r);\n        vec3 reflPos = p + r * reflDist;\n        vec3 reflCol;\n        if(reflDist > MAX_DIST) {\n            reflCol = getSkyColor(r);\n        } else {\n            reflCol = getLight(reflPos, r) * 0.8;\n        }\n        col += reflCol * 0.4;\n    }\n    \n    // Gamma correction\n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}