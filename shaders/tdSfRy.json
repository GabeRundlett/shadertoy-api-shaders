{
    "Shader": {
        "info": {
            "date": "1590268196",
            "description": "3D DCT - Very simple transformation with lots of uses.",
            "flags": 40,
            "hasliked": 0,
            "id": "tdSfRy",
            "likes": 8,
            "name": "DCT Happy Dance",
            "published": 3,
            "tags": [
                "video",
                "compression",
                "dct"
            ],
            "usePreview": 1,
            "username": "eiffie",
            "viewed": 652
        },
        "renderpass": [
            {
                "code": "//DCT Happy Dance - by eiffie (video compression using a 3d discrete cosine transform)\n#define FRAME_RATE 60.\n//buffer A has some defines to play with\nvoid mainImage( out vec4 O, in vec2 U ){\n  float Z=floor(mod(iTime*FRAME_RATE,64.));\n  vec2 safeRez=floor(iResolution.xy/64.)*64.;\n  vec2 p=vec2(mod(Z,8.),floor(Z/8.))*safeRez/8.+(U/iResolution.xy)*(safeRez/8.);\n  O=texture(iChannel0,p/iResolution.xy).rbba;//original is in r, g is tranformed, b is inverse transform\n  //O=texture(iChannel0,U/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//glitch pop\n//#define JUST_PLEASE_STOP\n#define tau 6.283185\nfloat nofs(float n){return -2.0*abs(mod(n,8.0)-4.0)+3.0;}\nfloat scale(float note){//throws out dissonant tones\n float n2=mod(note,12.0);\n if((n2==1.0)||(n2==3.0)||(n2==6.0)||(n2==8.0)||(n2==11.0))note=-100.0;\n return note;\n}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;}\nfloat I(float n,float t,float bt){\n  float f=ntof(scale(n)),att=100.0;\n  if(f<12.0)return 0.0;\n  f*=t*tau;\n  float a=sin(mod(f+bt*3.14159*sin(mod(f*0.251,tau)),tau));\n  a*=(1.0-exp(-bt*att))*clamp(1.0-bt,0.,1.)*60.0/n;\n  return a;\n}\nfloat sound(float time){\n  float tim=time*6.;\n  float b=floor(tim);\n  float t0=fract(tim),t1=mod(tim,2.0)*0.5,t2=mod(tim,4.0)*0.25;\n  float n2=nofs(b*0.0625)+nofs(b*0.125)+nofs(b*0.25);\n  float n1=n2+nofs(b*0.5),n0=n1+nofs(b);\n  float a0=I(n0+72.0,time,t0);\n  float a1=I(n1+60.0,time,t0);\n  float a1h=I(n1+56.0,time,t0);\n  float a2=I(n2+24.0,time,t0);\n  float v=0.1*(a0+a1+a2+a1h);\n  return clamp(v,-1.,1.);\n}\nint imod(int a, int b){return a-a/b*b;}\nvec2 mainSound( in int samp,in float time){\n #ifdef JUST_PLEASE_STOP\n  return vec2(0);\n #endif\n  int sampy=int(time*44100.),ps=imod(sampy,16);\n  float f=0.0;\n  for(int i=0;i<16;i++){\n    f+=sound(float(sampy-ps+i)/44100.)*cos(tau/32.*(float(i)+.5)*float(ps));\n  }\n  f*=.06125;//like throwing out all but the first term of the DCT??\n  return vec2(f);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//choose a quality 0-3*(N-1) higher being better quality\n#define QUALITY 1.\n//#define I_DONT_WANT_TO_SEE_A_HAPPY_DANCE_BECAUSE_IM_DEAD_INSIDE\n//the DCT cube size 4x4x4=16, 8x8x8=512 (texture lookups)\n#define N 4.\n//Frames for a video are drawn and then a 3d DCT type II transform\n//is applied on cubes. The video has low frequencies so only\n//the data in the low tet of the cube is needed. The rest is tossed\n//with a simple formula x+y+z>QUALITY.\n//Then the inverse transform is applied resulting in the happy dance! \n#define rez iResolution.xy\n#define pi 3.14159\nfloat tube(vec2 pa, vec2 ba){return length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0));}\nfloat DE(vec2 p, float tym){//the happy dance takes more code than the 3d DCT\n  vec2 p2=abs(p);           //and rightfully so\n  p2.x-=1.;if(iTime>15.)tym+=iTime;\n  float m=abs(max(abs(p2.x)-0.25,p2.y-0.52));\n  if(abs(p.x)>0.75){p.x-=sign(p.x)*0.75;p*=2.0;}\n  float sa=sin(tym);\n  vec2 h=vec2(sa*0.1,0.8),n=vec2(sa*0.1,0.7);\n  vec2 s=vec2(sa*0.1,0.5),b=vec2(sa*0.2,0.0);\n  vec2 h1=vec2(sa*0.5-0.2,0.7+sa*0.1),h2=vec2(sa*0.5+0.2,0.7-sa*0.1);\n  vec2 e1=vec2(sa*0.25-0.3,0.4+sa*0.1),e2=vec2(sa*0.25+0.3,0.4-sa*0.1);\n  vec2 k1=vec2(sa*0.25-0.2,-0.5),k2=vec2(sa*0.25+0.2,-0.5);\n  vec2 f1=vec2(-0.4,-0.9),f2=vec2(0.4,-0.9);\n  float d=min(tube(p-e1,h1-e1),tube(p-s,e1-s));\n  d=min(d,min(tube(p-e2,h2-e2),tube(p-s,e2-s)));\n  d=min(d,min(tube(p-n,b-n),tube(p-n,h-n)-0.07));\n  d=min(d,min(tube(p-b,k1-b),tube(p-b,k2-b)));\n  d=min(d,min(tube(p-k1,f1-k1),tube(p-k2,f2-k2)));  \n  return min(d-0.04,m);\n}\nvec2 safeRez;\nvec4 get(vec3 p){//change 3d DCT addressing to 2d texture addressing\n  p=floor(p);\n  vec2 v=p.xy+vec2(.5)+vec2(mod(p.z,8.),floor(p.z/8.))*safeRez/8.;\n  return texture(iChannel0,v/rez);\n}\nvoid mainImage( out vec4 c, in vec2 p ) {\n  if(iFrame<2){c=vec4(0);return;}\n  c=texture(iChannel0,p/rez);\n  safeRez=floor(rez/64.)*64.;if(any(greaterThan(p,safeRez))){c=vec4(0);return;}\n  p=floor(p);//the frames are laid out in a 8x8 grid and need to be a multiple\n  vec2 p8=p*vec2(8)/safeRez; //of 8 in size for the 8x8x8 cubes so\n  vec2 fl=floor(p8),fr=2.0*(fract(p8)-0.5);//some bs to do that\n  float Z=fl.y*8.+fl.x;//the video frame or z depth\n  vec3 p3=vec3(floor(p-fl*safeRez/8.),Z),pk=mod(p3,vec3(N));//position in frame(s), pos in cube\n  if(iFrame<5 || iTime>15.){//draw a happy dance in front of mirrors\n    float tym=Z/(64.)*6.283;\n   #ifdef I_DONT_WANT_TO_SEE_A_HAPPY_DANCE_BECAUSE_IM_DEAD_INSIDE\n    c.x=texture(iChannel1,vec2(0.45)+fr/8.+vec2(cos(tym),sin(tym))*0.25).r;\n   #else\n    c.x=DE(fr,tym);c.x=smoothstep(0.1,0.,c.x);\n   #endif\n  }else if(iFrame==5){//build DCT II cubes NxNxN\n    c.y=0.0;\n    for(float z=.5;z<N;z+=1.)for(float y=.5;y<N;y+=1.)for(float x=.5;x<N;x+=1.){\n      vec3 pn=vec3(x,y,z),cs=cos(pi/N*pn*pk);c.y+=get(p3-pk+pn).x*cs.x*cs.y*cs.z;\n    }\n    c.y*=8./(N*N*N);\n  }else if(iFrame==6){//compress the crap out of it\n    if(pk.x+pk.y+pk.z>QUALITY)c.y=0.0;//squash the high frequencies to mimic compression\n  }else if(iFrame==7){//invert using DCT III\n    c.z=0.0;\n    for(float z=.0;z<N;z+=1.)for(float y=.0;y<N;y+=1.)for(float x=.0;x<N;x+=1.){\n      vec3 pn=vec3(x,y,z),h=vec3(.5),cs=mix(h,cos(pi/N*pn*(pk+h)),step(h,pn));\n      c.z+=get(p3-pk+pn).y*cs.x*cs.y*cs.z;\n    }\n  }//thats it!\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}