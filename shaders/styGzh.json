{
    "Shader": {
        "info": {
            "date": "1666147008",
            "description": "stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "styGzh",
            "likes": 16,
            "name": "Space Bubbles",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "glass",
                "bubble"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define A(p) texture(iChannel0, p).x\nmat2 rot(float a) {return mat2(cos(a), -sin(a), sin(a), cos(a));}\n\nfloat hash13(vec3 p3){\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat rbox( vec3 p, vec3 b, float r ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\nfloat sub( float d1, float d2 ) { return max(-d1,d2); }\n#define b vec3(1.2)\n\n\nvec3 getCell(vec3 p){return floor(p / b);}\nvec3 getCellCoord(vec3 p){return mod(p, b) - b*.5;}\n\n\nfloat map(vec3 p){\n    float d = 999.;\n  \n    vec3 id = getCell(p);\n    vec3 rup = getCellCoord(p);\n    float rnd = 2.*hash13(id*663.) - 1.;\n    \n    rup.y += rnd*.2;\n    \n    rup.xz *= rot(rnd*.3 + .3*iTime*sign(rnd) + id.x);\n    rup.xy *= rot(rnd*.3 + .3*iTime*sign(rnd) + id.y);\n    \n    rup.x+=cos(rup.z*30.)*.02;\n    rup.y+=sin(rup.z*30.)*.02;\n    d = min(length(rup)-.45, d);\n\n    d = sub(rbox(p-vec3(0., iTime*.55, 0.), vec3(2.4), .01), d );\n\n    return d;\n}\n\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nvec3 color(vec3 ro, vec3 rd, vec3 n, float t){\n    vec3 p = ro + rd*t;\n    \n    vec3 lp = ro + vec3(0., 0., 2.5);\n    \n    vec3 ld = normalize(lp-p);\n    float dd = length(p - lp);\n    float dif = max(dot(n, ld), .1);\n    float fal = max(1. / (dd), .0);\n    float spec = pow(max(dot( reflect(-ld, n), -rd), 0.), 23.);\n\n    vec3 objCol = vec3(1);\n     \n    objCol += spec * .75;\n    objCol *= (dif + .4);\n    objCol *= fal;\n    \n    return objCol;\n}\n\n\n#define FAR 10.\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n        \n    vec3 rd = normalize(vec3(uv, 1.5));    \n    rd = normalize(vec3(uv, 2.0 - dot(uv, uv) * -0.3));\n    vec3 ro = vec3(0);\n    \n    \n    if(abs(uv.x) > .75){f = vec4(0,0,0,1); return;} // Thanks elenzil\n    \n    rd.xz*=rot(.8);\n    ro.y += iTime*.55;\n    \n    float d = 0.0, t = 0., ns = 0.;\n    vec3 p, n, col = vec3(0);\n    \n    int nHits = 0;\n    int maxHits = 3;\n    \n    for(int i = 0; i < 80; i++){\n    \td = map(ro + rd*t); \n        \n        if(nHits >= maxHits || t > FAR)break;\n  \n        if(abs(d) < 0.004){\n           \n            p = ro + rd*t;\n            n = normal(p);\n            \n            if(d > 0. && nHits == 0){\n                rd = refract(rd, n, 1.02);\n                vec3 ref = reflect(n, rd);\n                col += texture(iChannel0, ref).xyz*.4;\n                col.zxy += abs(ref)*.1;\n            }\n            col += color(ro, rd, n, t);\n            \n            nHits++;\n            t += .2;\n        }\n\n        t += abs(d) * .7;\n        \n        ns++;\n    }\n    \n    if(nHits > 0)col /= float(nHits)*.6;\n    \n    col *= ss(10., 4., ns*.1);\n    col = pow(col*1.4, vec3(2.4));\n    col = 1.-exp(-col);\n    col += .12*hash12(u*42. + 32. + iTime);\n    \n    \n    f = vec4(col, 1.0);\n}\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}