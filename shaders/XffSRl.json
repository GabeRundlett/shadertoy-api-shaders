{
    "Shader": {
        "info": {
            "date": "1705549093",
            "description": "Particle system with changing orbit",
            "flags": 0,
            "hasliked": 0,
            "id": "XffSRl",
            "likes": 4,
            "name": "Particle Glitch Sytem",
            "published": 3,
            "tags": [
                "particles",
                "glitch",
                "genuary",
                "genuary16"
            ],
            "usePreview": 0,
            "username": "insurgentes300",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "#define particleCount 200\n#define particleLife 3\n#define ringCount 10000\n#define speed 0.075f\n#define aberrationStrength 0.001\n\nvec2 uv;\n\nfloat rand(vec2 p)\n{\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise(vec2 rnduv)\n{\n    vec2 intCoords = floor(rnduv);\n    vec2 frg = fract(rnduv);\n\n    float f;\n    float a = rand(intCoords + vec2(0, 0));\n    float b = rand(intCoords + vec2(1, 0));\n    float c = rand(intCoords + vec2(0, 1));\n    float d = rand(intCoords + vec2(1, 1));\n\n    vec2 l = 3.f*frg*frg - 2.f*frg*frg*frg;\n    f = -1. + 2.*(a + (b-a)*l.x + (c-a)*l.y + (a-b-c+d)*l.x*l.y);\n    return f;\n}\n\nfloat drawCircle(vec2 center, float radius)\n{\n    return 1.0 - smoothstep(0.0, radius, length(uv - center));\n}\n\nvec3 drawRing(int num, float r, float iTime)\n{\n    float intTime = ceil(iTime);\n    vec3 ring = vec3(0.f);\n    float orbit = 10.0 + mod(intTime, 10.0) * 2.0; // Change the orbit value every second\n\n    for (int i = 1; i <= num; i++)\n    {\n        float cnt = float(i);\n        vec2 c = vec2(cos(iTime*cnt*speed)*orbit, sin(iTime*cnt*speed)*orbit);\n        c *= (noise(c)+1.);\n        vec3 circle = vec3(1.0, 0.5, 0.0) * drawCircle(c, r);\n        ring += circle;\n\n        int life = int(intTime) - i;\n        if (life % particleLife * int(ceil(rand(uv))) == 0)\n        {\n            ring -= smoothstep(0.3, 1., circle);\n        }\n    }\n    return ring;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 50.f;\n\n    vec3 ring = vec3(0.f);\n    ring = drawRing(particleCount, 1., iTime);\n\n    // Apply chromatic aberration\n    vec3 aberration = vec3(\n        drawRing(particleCount, 1., iTime - aberrationStrength).r,\n        drawRing(particleCount, 1., iTime).g,\n        drawRing(particleCount, 1., iTime + aberrationStrength).b\n    );\n\n    fragColor = vec4(ring * aberration, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}