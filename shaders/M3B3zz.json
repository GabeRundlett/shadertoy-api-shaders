{
    "Shader": {
        "info": {
            "date": "1708108802",
            "description": "costas arraya, gradient or flat, greyscale or 1bit.\nwhen the gradient is no stepped in the same period as the costas-array (for each costas array), you get \"bleeding wavefront overlaps) by projecting 2 greyscales over each other (1 smooth, one stepped)",
            "flags": 0,
            "hasliked": 0,
            "id": "M3B3zz",
            "likes": 1,
            "name": "costas dither gradient (flicker)",
            "published": 3,
            "tags": [
                "gradient",
                "dither",
                "costas",
                "costasarray",
                "welch"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "\n\nfloat CostasWelch(float x,float b,float period){\n // return mod( round(      exp2(mod(x,period)) ) , period );\n //   return mod( round(     pow(b,mod(x,period)) ) , period );      // not exactly indentical\n // return float(int( .5 + pow(b,mod(x,period)) ) % int(period));  // not exactly indentical\n  return float(int(round(pow(b,mod(x,period)))) % int(period));  // original\n}\n\n//to animate the greyscale of a costas array color pallette \nfloat anim(float a,float p){\n//return a;\n//return fract( ( a+float(iFrame) ) / p );//imprecise nonsense\nreturn mod(a+float(iFrame),p);}\n\n//for (b,period) pairs\n//the pairs (3,5) (3,7) (5,7)  make costas arrays\n//the pairs (2,11) (2,13) (2,29) look a lot like they make costas arrays\n\n//return 1-bit-color-depth costas-array dither-gradient over uv.x (uv,b,p)\nfloat costas4Dither(vec2 u,vec2 b,float p){//uv,basis,periodExpomnent\n   float c=0.;\n   //u.x=anim(u.x,p);&&neglible effect, high cost\n   //u.x=-anim(u.x,p);//likelÃ¶y not wx ) , period+1.); //Gradient\n   //c = mod( u.x - anim(CostasWelch(u.y, b.x ,p),p) , p+1.); //Gradient\n   //c = mod( u.x -      CostasWelch(  c, b.y ,p)    , p+1.); //Gradient\n    c = mod(    anim(CostasWelch(u.y, b.x,p),p) -     u.x , p+1.); //Gradient\n    c = mod(         CostasWelch(  c, b.y,p)    -     u.x , p+1.); //Gradient\n   // c = mod(        (CostasWelch(u.y, b.x,p),p) , p+1.)-u.x; //Gradient\n  //  c = mod(       u.x-CostasWelch(  c, b.y,p)  , p+1.)    ; //Gradient\n    c /= p-2.;\n    return c;}\n\nvoid mainImage(out vec4 O, vec2 u){\n    float period=28.;\n    vec2 b=vec2(2);\n    float c=0.;\n\n//3 iterations of costas4Dither of different periods (for larger LCM-period)\n \n    c+=costas4Dither(u,vec2(2),29.);\n    //c+=costas4Dither(u,vec2(2),29.);\n   // c+=costas4Dither(u,vec2(2),11.);//flickers a LOT\n   // c/=2.;//averaging\n    //why is this bulsing, this seems to be a code error.\n    //almot certainly the averaging should instead happen \n    //BEFORE flattening-to-monochrome.\n    //\n   //a better approach seems to be \n   //https://www.shadertoy.com/view/7stXDN\n   //but as of now, rthat is not even animated\n   //, that may be faster (1 mod less) but likely still flickers\n\n\n    u /= iResolution.xy;\n         if(u.y > .9)O=vec4(c);           //greyscale flat\n    else if(u.y > .40)O=vec4(c+u.x*2.-1.); //greyscale gradient\n    else if(u.y > .1)O= vec4( u.x > c );  //1bit      gradient\n    else O= vec4( .5 > c );                //1bit      flat\n\n//1bit should not flicker, but it seems to flicker a lot \n//and it flickers more for shoter p\n\n//i suspect that it flickers because the gradient bleeds into the greyscaled costas array, yeah that it.\n//you can not gradient an animated costas array, the costas goes over the same domain of the gradient \n//(or a non-orthogonal projection of it)\n//and this fold creates the flicker.\n//this flicker is more noticable in 1bit, and for shorter-period-arrays\n\n//there may still exist a fixing adjustment for this\n//, but that likely will tile-the-gradient to perfectly fit with the costas-period\n\n;}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}