{
    "Shader": {
        "info": {
            "date": "1403188726",
            "description": "Trying the nice surface shading tricks from my  on a landscape.>\nToggle Ambient Occlusion: A, Toggle Reflection Occlusion: S. View modes:Q,W,L",
            "flags": 16,
            "hasliked": 0,
            "id": "ldfXzS",
            "likes": 86,
            "name": "Wet Sand",
            "published": 3,
            "tags": [
                "ambientocclusion",
                "specularocclusion"
            ],
            "usePreview": 1,
            "username": "TekF",
            "viewed": 8607
        },
        "renderpass": [
            {
                "code": "// Hazel Quantock 2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// artefacts from noise texture interpolation\n//#define FAST\n\n// keys\nconst int kA=65,kB=66,kC=67,kD=68,kE=69,kF=70,kG=71,kH=72,kI=73,kJ=74,kK=75,kL=76,kM=77,kN=78,kO=79,kP=80,kQ=81,kR=82,kS=83,kT=84,kU=85,kV=86,kW=87,kX=88,kY=89,kZ=90;\nconst int k0=48,k1=49,k2=50,k3=51,k4=52,k5=53,k6=54,k7=55,k8=56,k9=57;\nconst int kSpace=32,kLeft=37,kUp=38,kRight=39,kDown=40;\n\n\n// TOGGLES:\n\n// demo mode - cycle through the effects\nconst int kDemoMode = kD;\n\n// aesthetic toggles\nint kAnimate = kA;  float pauseTime = 3.6;\n//int kPrintedPaper = kP;\nint kLensFX = kL;\n\n// lighting\n//int kLighting = k0; // turn all diffuse illumination on/off (to see reflections better)\n//int kAlbedo = k1;\n//int kShadow = k2;\n//int kDirectLight = k3;\n//int kAmbientGradient = k4;\nint kAmbientOcclusion = kA;\nint kShowAmbientOcclusion = kQ;\n\n// specular\n//int kSpecular = k9; // turn all specular on/off (to see diffuse better)\n//int kSpecularHighlight = kQ;\n//int kFresnel = kW;\nint kReflectionOcclusion = kS;\n//int kReflections = kR;\nint kShowSpecularOcclusion = kW;\n\n\n// key is javascript keycode: http://www.webonweboff.com/tips/js/event_key_codes.aspx\nbool ReadKey( int key, bool toggle )\n{\n\tfloat keyVal = textureLod( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\n\nbool Toggle( int val, int index )\n{\n// Toggles are breaking the compile! AARGH!\n// try removing a few of them, or something\n// mostly want to see spec/amb occ\n\t\n/*\tfloat cut = fract(iTime/30.0)*11.0;\n\tif ( !ReadKey( kDemoMode, true ) && float(index) > cut )\n\t{\n\t\treturn false;\n\t}*/\n\t\n\t// default everything to \"on\"\n\treturn !ReadKey( val, true );\n}\n\n\nvec2 Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\n\t// On Chrome 36 I get an artefact where the texture wraps, so do the wrap manually\t\n\tuv = fract(uv/256.0)*256.0;\n\n#ifdef FAST\n\tvec4 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0 );\n#else\n\t// high precision interpolation, if needed\n\tvec4 rg = mix( mix(\n\t\t\t\ttextureLod( iChannel0, (floor(uv)+0.5)/256.0, 0.0 ),\n\t\t\t\ttextureLod( iChannel0, (floor(uv)+vec2(1,0)+0.5)/256.0, 0.0 ),\n\t\t\t\tfract(uv.x) ),\n\t\t\t\t  mix(\n\t\t\t\ttextureLod( iChannel0, (floor(uv)+vec2(0,1)+0.5)/256.0, 0.0 ),\n\t\t\t\ttextureLod( iChannel0, (floor(uv)+1.5)/256.0, 0.0 ),\n\t\t\t\tfract(uv.x) ),\n\t\t\t\tfract(uv.y) );\n#endif\t\t\t  \n\n\treturn mix( rg.yw, rg.xz, f.z );\n}\n\nfloat Granite( in vec3 x )\n{\n\treturn (\n\t\t\t abs(Noise(x* 1.0).x-.5)/1.0\n\t\t\t+abs(Noise(x* 2.0).x-.5)/2.0\n\t\t\t+abs(Noise(x* 4.0).x-.5)/4.0\n\t\t\t+abs(Noise(x* 8.0).x-.5)/8.0\n\t\t\t+abs(Noise(x*16.0).x-.5)/16.0\n\t\t)*32.0/31.0;\n//\t\t\t+abs(Noise(x*32.0).x-.5)/32.0\n//\t\t\t+abs(Noise(x*64.0).x-.5)/64.0\n//\t\t)*128.0/127.0;\n}\n\n\nfloat DistanceField( vec3 p, float t )\n{\n\t//return p.y;\n\t//return (p.y - max(.0,Granite(p.xzy*vec3(1,1,0))-.5)) / 1.2;\n\n// this doesn't get good occlusion, because the lumps don't have a gradient to their sides\n\t//return min(p.y, ( p.y - (Granite(p.xzy*vec3(1,1,0))-.5) ) / 1.2);\n\n\treturn min(p.y, ( p.y - (Granite(p)-.5) ) * (.65-.2*2.0/max(2.0,t)) ); // adjust accuracy with depth\n}\n\nfloat DistanceField( vec3 p )\n{\n\treturn DistanceField( p, 0.0 );\n}\n\n\nvec3 Sky( vec3 ray )\n{\n\treturn mix( vec3(.8), vec3(0), exp2(-(1.0/max(ray.y,.01))*vec3(.4,.6,1.0)) );\n}\n\n\nvec3 Shade( vec3 pos, vec3 ray, vec3 normal, vec3 lightDir, vec3 lightCol, float shadowMask, float distance )\n{\n\tvec3 ambient = vec3(.5);\n//\tif ( Toggle(kAmbientGradient,2) )\n\t\tambient = mix( vec3(.2,.27,.4), vec3(.4), (-normal.y*.5+.5) ); // ambient\n//\t\tambient = mix( vec3(.03,.05,.08), vec3(.1), (-normal.y+1.0) ); // ambient\n\t// ambient occlusion, based on my DF Lighting: https://www.shadertoy.com/view/XdBGW3\n\tfloat aoRange = distance/20.0;\n\t\n\tfloat occlusion = max( 0.0, 1.0 - DistanceField( pos + normal*aoRange )/aoRange ); // can be > 1.0\n//\tocclusion = min( 1.0, occlusion ); // prevent excessive occlusion\n\tocclusion = exp2( -2.0*pow(occlusion,2.0) ); // tweak the curve\n//\tocclusion *= mix(.5,1.0,pow(grainq,.2));\n\tif ( Toggle(kAmbientOcclusion,1) )\n\t\tambient *= occlusion;\n\n\tfloat ndotl = max(.0,dot(normal,lightDir));\n\tfloat lightCut = smoothstep(.0,.1,ndotl);//pow(ndotl,2.0);\n\tvec3 light = vec3(0);\n\n//\tif ( Toggle(kDirectLight,3) )\n\t\t\tlight += lightCol*shadowMask*ndotl;\n\n\tlight += ambient;\n\n\n\t// And sub surface scattering too! Because, why not?\n\tfloat transmissionRange = .1;//distance/5.0;\n\tfloat transmission = max( 0.0, DistanceField( pos + lightDir*transmissionRange )/transmissionRange );\n\tvec3 subsurface = vec3(1,.8,.5) * .5 * lightCol * transmission;\n//\tcommented out because it's a little buggy with small distances, and sand shouldn't have a lot of sss\n//\tlight += subsurface;\n\n\n\tfloat specularity = smoothstep( .5,1.0, texture( iChannel0, pos.xz/256.0 ).r )\n\t\t\t\t\t\t*pow(smoothstep( 0.05, 0.0, pos.y ),2.0); // don't let the lumps be too shiny\n\t\n\tvec3 h = normalize(lightDir-ray);\n\tfloat specPower = exp2(3.0+6.0*specularity);\n\tvec3 specular = lightCol*shadowMask*pow(max(.0,dot(normal,h))*lightCut, specPower)*specPower/32.0;\n\t\n\tvec3 rray = reflect(ray,normal);\n\tvec3 reflection = vec3(0);\n\t\n//\tif ( Toggle(kReflections,6) )\n\t\treflection = Sky( rray );\n\t\n\t\n\t// specular occlusion, adjust the divisor for the gradient we expect\n\tfloat specOcclusion = max( 0.0, 1.0 - DistanceField( pos + rray*aoRange )/(aoRange*max(.01,dot(rray,normal))) ); // can be > 1.0\n\tspecOcclusion = exp2( -2.0*pow(specOcclusion,2.0) ); // tweak the curve\n\t\n\t// prevent sparkles in heavily occluded areas\n\tspecOcclusion *= occlusion;\n\n\tif ( Toggle(kReflectionOcclusion,7) )\n\t\treflection *= specOcclusion; // could fire an additional ray for more accurate results\n\t\n\tfloat fresnel = pow( 1.0+dot(normal,ray), 5.0 );\n\tfresnel = mix( mix( .0, .05, specularity ), mix( .4, 1.0, specularity ), fresnel );\n\t\n//\tif ( !Toggle(kFresnel,8) )\n//\t\tfresnel = 1.0; // chrome\n\t\n\tvec3 albedo = vec3(.5,.3,.13);\n\t\n//\tif ( !Toggle(kAlbedo,5) ) albedo = vec3(1);\n\t\n\tvec3 result = vec3(0);\n//\tif ( Toggle(kLighting,-1) )\n\t\tresult = light*albedo;\n\n//\tif ( Toggle(kSpecular,6) )\n\t{\n\t\tresult = mix( result, reflection, fresnel );\n\t\n//\t\tif ( Toggle(kSpecularHighlight,9) )\n\t\t\tresult += specular;\n\t}\n\n\tif ( !Toggle(kShowAmbientOcclusion,-1) )\n\t\tresult = vec3(occlusion);\n\n\tif ( !Toggle(kShowSpecularOcclusion,-1) )\n\t\tresult = vec3(specOcclusion);\n\t\n\treturn result;\n}\n\n\n\n\n// Isosurface Renderer\n#ifdef FAST\nconst int traceLimit=40;\nconst float traceSize=.005;\n#else\nconst int traceLimit=60;\nconst float traceSize=.002;\n#endif\t\n\nfloat Trace( vec3 pos, vec3 ray, float traceStart, float traceEnd )\n{\n\tfloat t = traceStart;\n\tfloat h;\n\tfor( int i=0; i < traceLimit; i++ )\n\t{\n\t\th = DistanceField( pos+t*ray, t );\n\t\tif ( h < traceSize || t > traceEnd )\n\t\t\tbreak;\n\t\tt = t+h;\n\t}\n\t\n\tif ( t > traceEnd )//|| h > .001 )\n\t\treturn 0.0;\n\t\n\treturn t;\n}\n\nfloat TraceMin( vec3 pos, vec3 ray, float traceStart, float traceEnd )\n{\n\tfloat Min = traceEnd;\n\tfloat t = traceStart;\n\tfloat h;\n\tfor( int i=0; i < traceLimit; i++ )\n\t{\n\t\th = DistanceField( pos+t*ray, t );\n\t\tMin = min(h,Min);\n\t\tif ( /*h < .001 ||*/ t > traceEnd )\n\t\t\tbreak;\n\t\tt = t+max(h,.1);\n\t}\n\t\n\treturn Min;\n}\n\nvec3 Normal( vec3 pos, vec3 ray, float t )\n{\n\t// in theory we should be able to get a good gradient using just 4 points\n\n\tfloat pitch = .5 * t / iResolution.x;\n#ifdef FAST\n\t// don't sample smaller than the interpolation errors in Noise()\n\tpitch = max( pitch, .005 );\n#endif\n\t\n\tvec2 d = vec2(-1,1) * pitch;\n\n\tvec3 p0 = pos+d.xxx; // tetrahedral offsets\n\tvec3 p1 = pos+d.xyy;\n\tvec3 p2 = pos+d.yxy;\n\tvec3 p3 = pos+d.yyx;\n\t\n\tfloat f0 = DistanceField(p0,t);\n\tfloat f1 = DistanceField(p1,t);\n\tfloat f2 = DistanceField(p2,t);\n\tfloat f3 = DistanceField(p3,t);\n\t\n\tvec3 grad = p0*f0+p1*f1+p2*f2+p3*f3 - pos*(f0+f1+f2+f3);\n\t\n\t// prevent normals pointing away from camera (caused by precision errors)\n\tfloat gdr = dot ( grad, ray );\n\tgrad -= max(.0,gdr)*ray;\n\t\n\treturn normalize(grad);\n}\n\n\n// Camera\n\nvec3 Ray( float zoom, in vec2 fragCoord )\n{\n\treturn vec3( fragCoord.xy-iResolution.xy*.5, iResolution.x*zoom );\n}\n\nvec3 Rotate( inout vec3 v, vec2 a )\n{\n\tvec4 cs = vec4( cos(a.x), sin(a.x), cos(a.y), sin(a.y) );\n\t\n\tv.yz = v.yz*cs.x+v.zy*cs.y*vec2(-1,1);\n\tv.xz = v.xz*cs.z+v.zx*cs.w*vec2(1,-1);\n\t\n\tvec3 p;\n\tp.xz = vec2( -cs.w, -cs.z )*cs.x;\n\tp.y = cs.y;\n\t\n\treturn p;\n}\n\n\n// Camera Effects\n\nvoid BarrelDistortion( inout vec3 ray, float degree )\n{\n\t// would love to get some disperson on this, but that means more rays\n\tray.z /= degree;\n\tray.z = ( ray.z*ray.z - dot(ray.xy,ray.xy) ); // fisheye\n\tray.z = degree*sqrt(ray.z);\n}\n\nvec3 LensFlare( vec3 ray, vec3 light, float lightVisible, float sky, in vec2 fragCoord )\n{\n\tvec2 dirtuv = fragCoord.xy/iResolution.x;\n\t\n\tfloat dirt = 1.0-texture( iChannel1, dirtuv ).r;\n\t\n\tfloat l = (dot(light,ray)*.5+.5);\n\t\n\treturn (((pow(l,30.0)+.05)*dirt*.1 + 1.0*pow(l,200.0))*lightVisible + sky*1.0*pow(l,5000.0))*vec3(1.05,1,.95);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ray = Ray(1.0, fragCoord);\n\t\n\tif ( Toggle(kLensFX,10) )\n\t\tBarrelDistortion( ray, .5 );\n\t\n\tray = normalize(ray);\n\tvec3 localRay = ray;\n\n\tvec2 mouse = vec2(0);\n\tif ( iMouse.z > 0.0 )\n\t\tmouse = .5-iMouse.yx/iResolution.yx;\n\t\t\n\tfloat T = iTime*.1;\n\tvec3 pos = 2.0*Rotate( ray, vec2(.2,2.8-T)+vec2(-.5,-6.3)*mouse );\n\tpos += vec3(0,.3,0) + T*vec3(0,0,-1);\n\t\n\tfloat top = .5, bottom = .0;\n\t\n\tvec3 col;\n\n\tvec3 lightDir = normalize(vec3(3,1,-2));\n\t\n\tfloat topIntersection = (top-pos.y)/ray.y;\n\tfloat bottomIntersection = (bottom-pos.y)/ray.y;\n\t\n\tfloat traceStart = .5;\n\tfloat traceEnd = 40.0;\n\t\n\tif ( ray.y > 0.0 )\n\t\ttraceEnd = min(traceEnd,topIntersection);\n\telse if ( ray.y < 0.0 )\n\t{\n\t\ttraceEnd = min(traceEnd,bottomIntersection);\n\t\tif ( pos.y > top )\n\t\t\ttraceStart = min(traceEnd,topIntersection);\n\t}\n\t\n\tfloat t = Trace( pos, ray, traceStart, traceEnd );\n\tif ( t > .0 )\n\t{\n\t\tvec3 p = pos + ray*t;\n\t\t\n\t\t// shadow test\n\t\tfloat s = 0.0;\n//\t\tif ( Toggle(kShadow,4) )\n\t\t\ts = Trace( p, lightDir, .05, (top-p.y)/lightDir.y );\n\t\t\n\t\tvec3 n = Normal(p, ray, t);\n\t\tcol = Shade( p, ray, n, lightDir, vec3(1.1,1,.9), (s>.0)?0.0:1.0, t );\n\t\t\n\t\t// fog\n\t\tfloat f = 80.0;\n\t\tcol = mix( vec3(.8), col, exp2(-t*vec3(.4,.6,1.0)/f) );\n\t}\n\telse\n\t{\n\t\tcol = Sky( ray );\n\t}\n\t\n\tif ( Toggle(kLensFX,10) )\n\t{\n\t\t// lens flare\n\t\tfloat sun = 1.0;//TraceMin( pos, lightDir, .5, 40.0 );\n\t\tcol += LensFlare( ray, lightDir, smoothstep(-.04,.1,sun), step(t,.0),fragCoord );\n\t\n\t\t// vignetting:\n\t\tcol *= smoothstep( .5, .0, dot(localRay.xy,localRay.xy) );\n\t\n\t\t// compress bright colours, ( because bloom vanishes in vignette )\n\t\tvec3 c = (col-1.0);\n\t\tc = sqrt(c*c+.05); // soft abs\n\t\tcol = mix(col,1.0-c,.48); // .5 = never saturate, .0 = linear\n\t\t\n\t\t// grain\n\t\tvec2 grainuv = fragCoord.xy + floor(iTime*60.0)*vec2(37,41);\n\t\tvec2 filmNoise = texture( iChannel0, .5*grainuv/iChannelResolution[0].xy ).rb;\n\t\tcol *= mix( vec3(1), mix(vec3(1,.5,0),vec3(0,.5,1),filmNoise.x), .1*filmNoise.y );\n\t}\n\t\n\tfragColor = vec4(pow(col,vec3(1.0/2.6)),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}