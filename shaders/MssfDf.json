{
    "Shader": {
        "info": {
            "date": "1498663243",
            "description": "Left: tilable Poisson-disc (bufA)  and its Fourier spectrum (inset).\nRight:  transform in Fourier space (bufC). Here: shuffling phases to random \n\nFor fullscreen, restart and go fullscreen fast ;-)\nSpace : module / complex spectrum / phases      S: inset",
            "flags": 48,
            "hasliked": 0,
            "id": "MssfDf",
            "likes": 23,
            "name": "Poisson-disc + Fourier op",
            "published": 3,
            "tags": [
                "fft",
                "poisson",
                "sampling",
                "fourier",
                "bluenoise",
                "dft"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 2026
        },
        "renderpass": [
            {
                "code": "// tilable version of Poisson-disc https://www.shadertoy.com/view/MslfDf\n// + Fourier-based transform (e.g. kernel convolution) using https://www.shadertoy.com/view/4s3GDs\n\n// set your module and phase in Buf A\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n\n// adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS#\n// see also https://www.shadertoy.com/view/4dGGz1 to play with spectrum.\n\n\n//Display modes\n#define MAGNITUDE 0.\n#define PHASE 1.\n#define COMPONENT 2.\n\nfloat DISPLAY_MODE = MAGNITUDE;\n\n//Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nvec4 rainbow(float x)  { return .5 + .5 * cos(6.2832*(x - vec4(0,1,2,0)/3.)); }\nvec4 rainbow(vec2 C)   { return rainbow(atan(C.y,C.x)/3.1416 + .5); }\n\nvec4 paintDFT(vec2 F) {\n  if (DISPLAY_MODE == MAGNITUDE)\n     #if MAG_SCALE == LOG\n        return vec4( log(length(F)) / log(SIZE*SIZE) );\n     #elif MAG_SCALE == LINEAR\n        return vec4( length(F) / SIZE );\n     #endif\n\n    else if ( DISPLAY_MODE == PHASE )     return rainbow(F);        \n    else /* if ( DISPLAY_MODE == COMPONENT ) */ return vec4(.5 + .5*F/SIZE, 0,0);        \n}\n\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    vec2 R = iResolution.xy, U=uv;\n    //O = texture(iChannel0,uv/R).xxxx; return;\n        \n    vec2 pixel = ( uv - iResolution.xy/2.) / SIZE  + vec2(2,1)/2.,\n         tile  = floor(pixel),\n         stile = floor(mod(2.*pixel,2.));\n         uv = fract(pixel) * SIZE / R ;\n\n    O-=O;\n    \n    DISPLAY_MODE = floor(texture(iChannel3, .5/R).w); // persistant key flag.\n    bool INSET =  texture(iChannel3,vec2(1.5,.5)/R).w == 0.;\n    \n    if (tile.y==-1. && abs(tile.x-.5)<1.) {   // buttons displaying current flags value\n        for (float i=0.; i<3.; i++) \n            O += smoothstep(.005,.0,abs(length(uv*R/SIZE-vec2(.2+i/7.,.97))-.025));\n        float v = DISPLAY_MODE;\n        O.b += smoothstep(.03,.02,length(uv*R/SIZE-vec2(.2+v/7.,.97)));\n    }\n    \n    if(tile == vec2(0,0))  //Input + DFT (Left)\n        if (stile == vec2(0) && INSET )\n             O += paintDFT(texture(iChannel1, 2.*uv).xy);      // initial spectrum\n        else O += texture(iChannel0, uv).x;                    // initial texture\n      //else O += length(texture(iChannel0, uv).rgb);\n\n    if(tile == vec2(1,0))  // Output +DFT (Right)\n        if (stile == vec2(0) && INSET)\n             O += paintDFT(texture(iChannel3, 2.*uv).xy);      // initial Fourier\n        else { O += .5+.5*texture(iChannel2, uv).x;            // final texture\n             }\n        \n    if(tile.y>0.) O += texture(iChannel0, U/iResolution.xy).x; // displayed values in top margin   \n    if (tile != mod(tile,vec2(2,1))) O+=.3;    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n// Poisson disk : repealing particles.\n// compare to https://www.shadertoy.com/view/MslfDf , \n// we do bufA in .zw and Image reconstruction in .xy . \n\n#define zoom 4. // better to use a pow of 2\n#define P(i,j)  ( floor(U/zoom)+vec2(i,j)+ texelFetch(iChannel0, ivec2(mod( U/zoom+vec2(i,j), SIZE/zoom)), 0).zw ) \n\n#define rnd(U)  ( 2. * fract(4567.89*sin(4567.89*U*mat2(1,-13.17,377.1,-78.73))) - 1. )\n \n//#define T(i,j)  texture(iChannel0, fract( ( U + vec2(i,j) ) / iResolution.xy ) ).zw\n#define T(i,j)  texelFetch(iChannel0, ivec2( mod( U + vec2(i,j) , SIZE/zoom) ), 0 ).zw\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (iFrame==0) {\n        O.zw = .2*rnd(U);                   // particles location = vec2(i,j) + stored perturb\n        return;                             // start with jittered grid (rough approx of Poisson disc)\n    }\n    \n    O -= O;\n    vec2 U0 = T(0,0), D, F = vec2(0);\n    \n    for (int j=-4; j<=4; j++)               // look in the neighborhood\n        for (int i=-4; i<=4; i++)           // with [-3,3]^2, a leak occurs at ~100\"+resize\n            if ( vec2(i,j) != vec2(0) ) {\n                D = vec2(i,j)+T(i,j) - U0;  // distance vector to particle (i,j)\n                float l = length(D);\n                F += D / l * max(2.-l,0.);  // simulates a spring (only repealing, otherwise clamped)\n            }\n    \n    O.zw = U0 - .1* F;                      // displace particle proportionaly to force\n    \n    \n\tif (max(U.x,U.y)<SIZE) \n    for (int j=-3; j<=3; j++)\n        for (int i=-3; i<=3; i++) \n            O.xy += smoothstep(2.,0., length( P(i,j) *zoom - U ) );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fourier transform of the input\n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n// #define ang(a)  vec2(cos(a), sin(a))\n// vec2 cmul (vec2 a,float t) { vec2 b=ang(t); return mat2(b,-b.y,b.x)*a; } \n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = tex(iChannel0, n+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, n+.5).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE/2.) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// do your operation in spectral domain here\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\nbool keyPress(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.); }\nbool keyToggle(int ascii) {return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.75)).x > 0.); }\nfloat rand(vec2 uv) { return fract(1e5*sin(dot(uv,vec2(17.4,123.7)))); }\nfloat gauss(float x) { return exp(-.5*x*x); }\n#define ang(a)  vec2(cos(a), sin(a))\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 T = texture(iChannel0, U / iResolution.xy).xy;\n    U -= .5;\n    vec2 X = 2.*U/SIZE - 1.;\n    float l = length(X), s = sign(-X.x), y = iMouse.y/iResolution.y;\n    \n# if 0        \n    // --- your custom Fourier-space filter here --------------------\n    float  \n       // F = 1.;                                  // 1: neutral\n       // F = l*10.;                               // 2: derivative\n       // F = .01/(.01+l);                         // 3: integral\n       // F = gauss(l/.125)*30.;                   // 4: gaussian blur   <---\n          F = smoothstep(.03,.0, abs(l-.3)) * 20.; // 5.1: ring filter   <---\n       // F = smoothstep(.2,.0, abs(l-.4)) * 20.;  // 5.2: ring filter   <---\n       // F = smoothstep(-.1,.1,l-y) * 20.;        // 6: kill LF (mouse tuning)\n       // F = float(fract(U.x/2.)*fract(U.y/2.)>0.);   // odd  freq only\n       // F = float(fract(U.x/2.)+fract(U.y/2.)==0.);  // even freq only\n       // F = SIZE/length(T);                      // 7: flat modulus\n    \n    T *= F;\n\n\tif (l==0.) T*=0.;                    // cancels DC\n    O = vec4(T,F,F);\n    \n# else\n    // --- or, your custom Fourier-space function here ------------\n    //            see also https://www.shadertoy.com/view/4dGGz1\n       T *= ang(6.2832*rand(U))*4.;            // 10: white noise\n    // T *= gauss(l/.05)*10.;                  // 11: modulus profile : gauss\n    // T *= gauss(abs(l-.12)/.005)*10.;        // 12: modulus profile : ring (blue noise)\n    // T = cmul(T,iTime*s);              // 13: phase shift with time\n    \n   // T *= SIZE;\n\tif (l==0.) T*=0.;                    // cancels DC\n             \n    O = vec4(T,T);\n    \n#endif\n    \n    if ( U==vec2(0)) {\n        O.w = texture(iChannel1,U/iResolution.xy).w;\n        if ( keyPress(32) ) O.w = mod(O.w+.1, 3.) ;  // persistant key flag\n    }\n    if ( U==vec2(1,0)) O.w = float(keyToggle(64+19)); // key S state\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// invFourier transform \n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } \n#define W(uv)   mod(uv+SIZE/2.,SIZE)                    // wrap [-1/2,1/2] to [0,1]\n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n\n    for(float n = 0.; n < SIZE; n++)  {\n        float m = W(n);       // W to warp 0,0 to mid-window.\n        vec2 xn = tex(iChannel0, m+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, m+.5).zw,\n             a =  6.2831853 *  (uv-.5) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    O /= SIZE;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}