{
    "Shader": {
        "info": {
            "date": "1713564244",
            "description": "Create waves with left click/dragging. Press O to toggle between creating waves and obstacles. Press R to reset obstacles. Press S to reset waves. Press T to load a heightmap texture. See Buffer A for additional settings/demos.",
            "flags": 48,
            "hasliked": 0,
            "id": "4cdXR8",
            "likes": 4,
            "name": "2D Waves Simulation",
            "published": 3,
            "tags": [
                "waves",
                "simulation",
                "interactive"
            ],
            "usePreview": 0,
            "username": "afsadfasdfsadf",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "// See Buffer A for simulation code.\n// \n// NOTE: 𝚜̶𝚠̶𝚒̶𝚝̶𝚌̶𝚑̶𝚒̶𝚗̶𝚐̶ ̶𝚘̶𝚏̶𝚏̶ ̶𝚝̶𝚑̶𝚎̶ ̶𝚝̶𝚊̶𝚋̶/̶𝚠̶𝚒̶𝚗̶𝚍̶𝚘̶𝚠̶ ̶𝚠̶𝚒̶𝚕̶𝚕̶ ̶𝚌̶𝚊̶𝚞̶𝚜̶𝚎̶ ̶𝚝̶𝚑̶𝚎̶ ̶𝚜̶𝚒̶𝚖̶𝚞̶𝚕̶𝚊̶𝚝̶𝚒̶𝚘̶𝚗̶ ̶𝚝̶𝚘̶ ̶𝚐̶𝚕̶𝚒̶𝚝̶𝚌̶𝚑̶ ̶𝚘̶𝚞̶𝚝̶.\n// 4/26/24: ^This has been fixed.\n// \n// GLSL Tutorial:\n// Anything prepended with two slashes is a commment and not part of the code.\n// Some features are toggled by commenting out the code.\n// Be sure to hit the > at the bottom left corner after changes.\n\n// 5/7/24: Stability and speed improvements \n//         (Mostly from using more digits in the constants sqrt(2), sqrt(2)/2, and pi)\n//         Go Fullscreen for more stability.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float v = texture(iChannel0, uv).x;\n    float f = (1.0 - 1.0/(1.0 + abs(v))) * sign(v);\n    \n    v = texture(iChannel0, uv).w;\n    float h = (1.0 - 1.0/(1.0 + abs(v))) * sign(v);\n    \n    // Linear renderer:\n    //fragColor = (0.3*texture(iChannel0, uv).xxxx + vec4(0.0, 0.0, texture(iChannel0, uv).z, 0.0));\n    \n    // Inverse renderer (higher values approach but never reach full brightness):\n    fragColor = vec4(abs(f), f, f, 1.0);\n    \n    //if (h > 0.491) {\n        fragColor += vec4(0.0, h, 0.0, 0.0);\n    //}\n    fragColor.z += texture(iChannel0, uv).z*0.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Use the Shadertoy Custom Textures extension to upload a custom heightmap into iChannel2.\n// https://chrome.google.com/webstore/detail/jgeibpcndpjboeebilehgbpkopkgkjda\n\n\nfloat lDistance(vec2 p0, vec2 p1, vec2 p2) {\n    vec2 p01 = p0 - p1;\n    vec2 p21 = p2 - p1;\n    float dot = p01.x * p21.x + p01.y * p21.y;\n    float len_sq = p21.x * p21.x + p21.y * p21.y;\n    float param = -1.0;\n    if (len_sq != 0.0) param = dot / len_sq;\n    \n    vec2 p = p1 + param * p21;\n    \n    if (param < 0.0) p = p1;\n    else if (param > 1.0) p = p2;\n    \n    vec2 d = p0 - p;\n    return length(d);\n}\nvec2[] dss = vec2[] (\nvec2(1.0, 0.0),\nvec2(0.70710678118, 0.70710678118),\nvec2(0.0, 1.0),\nvec2(-0.70710678118, 0.70710678118),\nvec2(-1.0, 0.0),\nvec2(-0.70710678118, -0.70710678118),\nvec2(0.0, -1.0),\nvec2(0.70710678118, -0.70710678118),\nvec2(2.0, 0.0),\nvec2(1.41421356237, 1.41421356237),\nvec2(0.0, 2.0),\nvec2(-1.41421356237, 1.41421356237),\nvec2(-2.0, 0.0),\nvec2(-1.41421356237, -1.41421356237),\nvec2(0.0, -2.0),\nvec2(1.41421356237, -1.41421356237));\n\nfloat k = 10.0;\nfloat speed = 4.0;\nfloat pi = 3.14159265359;\nfloat startTime = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // (displacement, velocity, obstacle, 1.0);\n    vec2 uv = fragCoord.xy;\n    vec2 p1 = iMouse.xy;\n    vec2 p3 = vec2((iTime-startTime)*32.0*1.5 + 100.0, iResolution.y * 0.75);\n    vec2 p4 = vec2((iTime-startTime)*32.0 + 100.0, iResolution.y * 0.5);\n    vec2 p5 = vec2((iTime-startTime)*32.0*0.75 + 100.0, iResolution.y * 0.25);\n    vec2 p2 = texture(iChannel1, vec2(0.25, 0.5)).zw;\n    vec2 mp = texture(iChannel1, vec2(0.75, 0.5)).xy;\n    \n    float d = lDistance(uv, p1, p2);\n    // pulsed mouse dragging:    (remove this ↓ semicolon and two slashes.)\n    // brush radius:    ↓\n    // brush smoothness:↓     ↓\n    // brush strength:  ↓     ↓          ↓\n    d = clamp(1.0-pow(d/20.0, 5.0), 0.0, 1.0);// * (sign(sin(float(iFrame)*pi+pi/2.0)-0.9)*0.5 + 0.5);\n    \n    if (mp.x <= 0.0 || mp.y <= 0.0 ) d=0.0;\n    \n    // speed of sound demos: (uncomment the three lines below)\n    d += clamp(1.0-distance(uv, p3)/10.0, 0.0, 1.0) * (sign(sin(float(iFrame)*0.1*pi+pi/2.0)-0.9)*0.5 + 0.5);\n    d += clamp(1.0-distance(uv, p4)/10.0, 0.0, 1.0) * (sign(sin(float(iFrame)*0.1*pi+pi/2.0)-0.9)*0.5 + 0.5);\n    d += clamp(1.0-distance(uv, p5)/10.0, 0.0, 1.0) * (sign(sin(float(iFrame)*0.1*pi+pi/2.0)-0.9)*0.5 + 0.5);\n    \n    vec4 old = texture(iChannel0, uv/iResolution.xy);\n    \n    float isO = texture(iChannel3, vec2(79.0/255.0, 1.0)).x;\n    float isR = texture(iChannel3, vec2(82.0/255.0, 0.0)).x;\n    float isS = texture(iChannel3, vec2(83.0/255.0, 0.0)).x;\n    float isT = texture(iChannel3, vec2(84.0/255.0, 0.0)).x;\n    float v = old.y;\n    float o = old.z;\n    float h = old.w;\n    float dT = clamp(iTimeDelta, 0.003, 0.03);\n    vec2 iuv = uv / iResolution.xy;\n    \n    if (isR > 0.5) {\n        // Velocity based on tension demo:\n        if (iuv.x * 0.25 + iuv.y > 0.3) o = 0.7;\n        else o = 0.3;\n        \n        // Refraction demo:\n        if (iuv.x + iuv.y * 0.5 > 0.7) o = 0.7;\n        else o = 0.0;\n        \n        // Load texture from iChannel2:\n        o = length(texture(iChannel2, iuv+vec2(0.5,0.0)).xyz);\n        if (o < 0.9) {\n             o = 0.0;\n        } else {\n             o = 1.0;\n        }\n        \n        // Reset:\n        o = 0.0;\n    }\n    if (isT > 0.5) {\n        h = (length(texture(iChannel2, iuv+vec2(0.5, 0.0)).xyz));\n        //float t = 0.95;\n        //if (h < t) {\n        //    d = t - h;\n        //}\n    }\n    \n    if (isO > 0.5) {\n        o = max(o, d);\n        d = 0.0;\n    }\n    d += old.x;\n    \n    // Left-to-right waves:\n    //if (fragCoord.x < 2.0/* && iTime < pi/5.0*/) d = sin(iTime*5.0)*5.0 + 5.0;\n    \n    for (int i = 0; i < 16; i++) {\n        vec2 ds = dss[i];\n        float dds = length(ds);\n        vec2 s = ds + uv;\n        float value = texture(iChannel0, s/iResolution.xy).x;\n        float delta = value - old.x;\n        \n        delta /= dds;\n        \n        float xo = texture(iChannel0, s/iResolution.xy).z;\n        float xh = texture(iChannel0, s/iResolution.xy).w;\n        if (h > abs(d)) xo += (h - abs(d)) * 2.0;\n        v += delta * dT * k * speed * (1.0-clamp(xo, 0.0, 1.0));\n    }\n    /*if (abs(v) > 50.0) {\n        v = 50.0 * sign(v);\n        o = 0.0;\n    }*/\n    \n    d += v * dT * speed;\n    //if (o > 0.9999) {\n    //    d = 0.0;\n    //    v = 0.0;\n    //}\n    //if (d < h) {\n    //    v = 0.0;\n    //}\n    \n    if (isS > 0.5) {\n        d = 0.0;\n        v = 0.0;\n        \n        startTime = iTime;\n    }\n    \n    fragColor = vec4(d, v, o, h);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This is for reading mouse input.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x/iResolution.x < 0.5) {\n        float x = iMouse.z * 2.0 - 1.0;\n        fragColor = vec4(iMouse.xy, texture(iChannel0, vec2(0.25, 0.5)).xy);\n    } else {\n        fragColor = vec4(iMouse.z, texture(iChannel0, vec2(0.75, 0.5)).xyz);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}