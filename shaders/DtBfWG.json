{
    "Shader": {
        "info": {
            "date": "1694418017",
            "description": "Each cube face shows a different view of the Mandelbox interior",
            "flags": 0,
            "hasliked": 0,
            "id": "DtBfWG",
            "likes": 13,
            "name": "Mandelbox-Faced Cube",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "// \"Mandelbox-Faced Cube\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/*\n  No. 10 in \"Mandelbox\" series; others listed in \"Compleat Mandelbox 2\" (cllfD2).\n*/\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Maxv2 (vec2 p);\nfloat Minv2 (vec2 p);\nfloat Maxv3 (vec3 p);\nfloat Minv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, ltDirEx, pathMid;\nvec2 qBlk;\nfloat dstFar, tCur, pathRad, cFace;\nint nFrame;\nconst float pi = 3.1415927;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 q4, q4o;\n  vec3 q;\n  float d;\n  const float mScale = 2.8;\n  const int nIter = 12;\n  q = p;\n  q4o = vec4 (6. * (fract (q / 6. + 0.5) - 0.5), 1.);\n  q4 = q4o;\n  for (int j = 0; j < nIter; j ++) {\n    q4.xyz = 2. * clamp (q4.xyz, -1., 1.) - q4.xyz;\n    q4 = mScale * q4 / clamp (dot (q4.xyz, q4.xyz), 0.25, 1.) + q4o;\n  }\n  d = length (q4.xyz) / q4.w;\n  d = max (d, - PrTorusDf ((p - pathMid).xzy, 0.02, pathRad));\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, h, s, sLo, sHi, eps;\n  eps = 0.0005;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 240; j ++) {\n    h = ObjDf (ro + s * rd);\n    if (h < eps || s > dstFar) {\n      sHi = s;\n      break;\n    }\n    sLo = s;\n    s += h;\n  }\n  if (h < eps) {\n    for (int j = VAR_ZERO; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      if (ObjDf (ro + s * rd) > eps) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec4 ObjNfL (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  float s;\n  e = 1e-4 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  s = dot (v, vec4 (1.));\n  return vec4 (normalize (2. * v.yzw - s), (s - 2. * v.x - 4. * ObjDf (p)) / (e.x * e.x));\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 4. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vn4;\n  vec3 col, vn;\n  float dstObj, att;\n  dstObj = ObjRay (ro, rd);\n  col = vec3 (0.);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn4 = ObjNfL (ro);\n    vn = vn4.xyz;\n    att = exp2 (- 8. * max (dstObj - 4., 0.));\n    col = att * HsvToRgb (vec3 (cFace / 10., 0.2, 1.)) *\n       (0.2 + 0.8 * step (0.9, abs (vn4.w) / 256.)) * (0.3 + 0.7 * max (dot (vn, ltDir), 0.));\n  }\n  if (dstObj >= dstFar || Maxv3 (col) < 0.01) col = 4. * StarPat (rd, 64.);\n  return clamp (col, 0., 1.);\n}\n\nvec3 TrkPath (float t)\n{\n  return pathMid + vec3 (Rot2D (vec2 (0., pathRad), 2. * pi * t / pathRad), 0.).xzy;\n}\n\nvoid ExMain (out vec3 fCol, in vec2 fCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd;\n  float el, az, zmFac, vuTr;\n  vuTr = 0.02 * tCur + 0.3 * cFace;\n  pathRad = mix (1.5, 2.5, 0.5 + 0.5 * sin (0.03 * pi * vuTr));\n  pathMid = vec3 (0., 0.7 * sin (0.05 * pi * vuTr), 0.);\n  ro = TrkPath (vuTr);\n  vd = normalize (TrkPath (vuTr + 0.1) - ro);\n  az = atan (vd.z, - vd.x) - 0.5 * pi;\n  el = 0.;\n  vuMat = StdVuMat (el, az);\n  zmFac = 15.;\n  rd = normalize (vec3 (fCoord, zmFac));\n  rd.xy = Rot2D (rd.xy, 0.5 * pi * vuTr);\n  rd = vuMat * rd;\n  ltDir = vuMat * normalize (vec3 (0.7, 1., -1.));\n  fCol = ShowScene (ro, rd);\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd, float bSize)\n{\n  vec3 v, tm, tp, u, vn;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, vn), dot (u.yzx, vn)) / bSize;\n  }\n  return vec4 (dMin, vn);\n}\n\nvec3 ExShowScene (vec3 ro, vec3 rd)\n{\n  vec4 db4;\n  vec3 col, vn;\n  float dstObj;\n  db4 = BlkHit (ro, rd, 3.);\n  dstObj = db4.x;\n  if (dstObj < dstFar) {\n    vn = db4.yzw;\n    cFace = dot (vn, vec3 (4., 2., 1.)) + 4.;\n    if (Maxv2 (abs (qBlk)) < 0.97) {\n      ExMain (col, qBlk);\n    } else {\n      col = vec3 (0.5) * (0.2 + 0.8 * max (dot (vn, ltDirEx), 0.)) +\n         0.3 * pow (max (dot (ltDirEx, reflect (rd, vn)), 0.), 32.);\n    }\n  } else {\n    col = StarPat (rd, 16.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  zmFac = 4.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n    zmFac += 2. * abs (az);\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.07 * pi * tCur;\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -22.);\n  dstFar = 100.;\n  ltDirEx = vuMat * normalize (vec3 (0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ((length (uv) > 0.99) ? vec3 (0.82) : ExShowScene (ro, rd));\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (mod (dot (p, cHashVA2) + vec2 (0., cHashVA2.x), 2. * pi)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}