{
    "Shader": {
        "info": {
            "date": "1722354798",
            "description": "api version of original post: https://www.shadertoy.com/view/ldd3DB\nfor testing purposes",
            "flags": 32,
            "hasliked": 0,
            "id": "Mc2cWW",
            "likes": 8,
            "name": "Fork Interactiv api",
            "published": 3,
            "tags": [
                "fish",
                "dynamic",
                "swarm",
                "multipass",
                "attraction",
                "repulsion",
                "boids",
                "birdoids"
            ],
            "usePreview": 0,
            "username": "vaagh",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "// Created by sebastien durand - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n// Distance to a fish\nfloat sdFish(float i, vec2 p, float a) {\n    float ds, c = cos(a), s = sin(a);\n    p *= 20.*mat2(c,s,-s,c); // Rotate and rescale\n    p.x *= .97 + (.04+.2*p.y)*cos(i+9.*iTime);  // Swiming ondulation (+rotate in Z axes)\n    ds = min(length(p-vec2(.8,0))-.45, length(p-vec2(-.14,0))-.12);   // Distance to fish\n    p.y = abs(p.y)+.13;\n    return max(min(length(p),length(p-vec2(.56,0)))-.3,-ds)*.05;\n}\n\n\nvoid mainImage(out vec4 cout, vec2 uv) {\n    vec2 p = 1./iResolution.xy;\n    float d, m = 1e6;\n    vec4 c, ct, fish;\n\n    for(float i=0.; i<NB; i++) {     \n        fish = texelFetch(iChannel0,ivec2(i,0),0); // (xy = position, zw = velocity) \n        m = min(m, d = sdFish(i, fish.xy-uv.xy*p.y, atan(fish.w,fish.z))); // Draw fish according to its direction\n        // Background color sum based on fish velocity (blue => red) + Halo - simple version: c*smoothstep(.5,0.,d);\n        ct += mix(vec4(0,0,1,1), vec4(1,0,0,1), length(fish.zw)/MAX_VEL)*(2./(1.+3e3*d*d*d) + .5/(1.+30.*d*d)); \n    }\n    // Mix fish color (white) and Halo\n    cout = mix(vec4(1.),.5*sqrt(ct/NB), smoothstep(0.,p.y*1.2, m));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by sebastien durand - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\nvec2 hash(float n) { return fract(sin(vec2(n,n*7.))*43758.5); }\nvec4 Fish(float i) { return texelFetch(iChannel0, ivec2(i,0),0);}\n\nvoid mainImage(out vec4 fc, vec2 uv) {   \n    if(uv.y > .5 || uv.x > NB) discard;\n    \n    vec2  w, vel, acc, sumF, R = iResolution.xy, res = R/R.y;\n    float d, a, v, dt = .03, id = floor(uv.x);  \n    \n// = Initialization ===================================\n    if (iFrame < 5) fc = vec4(.1+.8*hash(id)*res,0,0);\n            \n// = Animation step ===================================\n    else { \n        vec4 fish = Fish(id);\n        \n// - Sum Forces -----------------------------  \n\t// Borders action\n        sumF = .8*(1./abs(fish.xy) - 1./abs(res-fish.xy));         \n        \n    // Mouse action        \n        w = fish.xy - iMouse.xy/iResolution.y;                  // Repulsive force from mouse position\n        sumF += normalize(w)*.65/dot(w,w);\n\n    // Calculate repulsion force with other fishs\n        for(float i=0.;i<NB;i++)\n            if (i != id) {                                            // only other fishs\n                d = length(w = fish.xy - Fish(i).xy);\n    \t\t\tsumF -= d > 0. ? w*(6.3+log(d*d*.02))/exp(d*d*2.4)/d  // attractive/repulsive force from otehrs\n                    : .01*hash(id);                                   // if same pos : small ramdom force\n            }\n    // Friction    \n        sumF -= fish.zw*RESIST/dt;\n        \n// - Dynamic calculation ---------------------     \n    // Calculate acceleration A = (1/m * sumF) [cool m=1. here!]\n        a = length(acc = sumF); \n        acc *= a>MAX_ACC ? MAX_ACC/a : 1.; // limit acceleration\n    // Calculate speed\n        v = length(vel = fish.zw + acc*dt);\n        vel *= v>MAX_VEL ? MAX_VEL/v : 1.; // limit velocity\n// - Save position and velocity of fish (xy = position, zw = velocity) \n        fc = vec4(fish.xy + vel*dt, vel);  \n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define NB      40.\n#define MAX_ACC  3.\n#define MAX_VEL .5\n#define RESIST  .2\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}