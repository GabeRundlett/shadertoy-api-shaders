{
    "Shader": {
        "info": {
            "date": "1718722606",
            "description": "Slerp animation experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "XXtSzN",
            "likes": 24,
            "name": "Slerp animation experiment",
            "published": 3,
            "tags": [
                "slerp",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 64.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(kw*antialiasing(1.5),kw*-antialiasing(1.5),d - b)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// https://www.geeks3d.com/20140205/glsl-simple-morph-target-animation-opengl-glslhacker-demo/\n// https://en.wikipedia.org/wiki/Slerp\n// it seems like the following works based on the above resources.\nvec3 Slerp(vec3 p0, vec3 p1, float t)\n{\n    float dotp = dot(normalize(p0), normalize(p1));\n    float theta = acos(dotp);\n    vec3 p = ((p0*sin((1.-t)*theta) + p1*sin(t*theta)) / sin(theta));\n    return p;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdSegment( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat getTime(float t, float duration){\n    return clamp(t,0.0,duration)/duration;\n}\n\nfloat Hash(vec2 p){\n    vec2 randP = fract(sin(p*123.456)*567.89);\n    randP += dot(randP,randP*34.56);\n    float n = fract(randP.x*randP.y); \n    return n;\n}\n\nfloat curveDistWithAnimation(vec3 p, vec3 p1, vec3 p2, float heightRatio, float tn){\n    vec3 start = p1;\n    vec3 end = p2;\n    vec3 center = mix(start,end,0.5);\n    float dist = distance(start,end);\n    center.y -= dist*heightRatio;\n    start-=center;\n    end-=center;\n    \n    float d = 10.;\n    float d2 = 10.;\n    float _step = 0.1;\n    int index = 0;\n    vec3 clist[10] = vec3[](vec3(0.),vec3(0.),vec3(0.),vec3(0.),vec3(0.),vec3(0.),vec3(0.),vec3(0.),vec3(0.),vec3(0.));\n    for(float i = 0.0; i<1.; i+=_step){\n        vec3 pos = Slerp(start,end,i);\n        pos += center;\n        clist[index] = pos;\n        index++;\n        //d2 = length(p-pos)-0.01;\n        //d = min(d,d2);\n    }\n    \n    float lineR = 0.005;\n    for(int i = 0; i<clist.length()-1; i++){\n        d2 = sdSegment(p,clist[i],clist[i+1],lineR);\n        d = min(d,d2);\n    }\n    d2 = sdSegment(p,clist[clist.length()-1],p2,lineR);\n    d = min(d,d2);\n        \n    float t = cubicInOut(getTime(mod(iTime*tn,1.0),0.6));\n    vec3 animatePos = Slerp(start,end,t);\n    d2 = length(p-(animatePos+center))-0.035;\n    d = min(d,d2);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.z+=0.8*iTime;\n    vec2 id = floor(p.xz*0.5);\n    p.xz = mod(p.xz,2.0)-1.0;\n    float n = Hash(id);\n    \n    float baseDist = 0.8;\n    vec3 p1 = vec3(baseDist-(n*0.5),0.0,baseDist-(n*0.5));\n    vec3 p2 = vec3(-baseDist+(n*0.5),0.0,-baseDist+(n*0.5));\n    if(n<0.5){\n        p1 = vec3(baseDist-(n*0.5),0.0,-baseDist+(n*0.5));\n        p2 = vec3(-baseDist+(n*0.5),0.0,baseDist-(n*0.5));\n    }\n    \n    float d = max(abs(p.y)-0.02,length(p.xz-p1.xz)-0.07);\n    float d2 = max(abs(p.y)-0.02,length(p.xz-p2.xz)-0.07);\n    d = min(d,d2);\n    \n    vec2 res2 = vec2(d,2);\n    \n    d2 = curveDistWithAnimation(p,p1,p2,0.5+n*0.5,clamp(0.2+n*0.5,0.0,1.0));\n    d = min(d,d2);\n    p = prevP;\n\n    vec2 res = combine(vec2(d,0),vec2(p.y,1));\n    \n    return combine(res,res2);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n        \n        if(i<50){\n            dO.x += dS.x*0.38;\n        } else {\n            dO.x += dS.x;\n        }\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nfloat circuit(vec2 p, float sc, float n){\n    p.y+=iTime*0.1*(n<0.5?1.0:-1.0);\n    if(n<0.5){\n        p.x+=iTime*0.1*(n<0.25?1.0:-1.0);\n    }\n    p*=5.;\n    vec2 uv = fract(p)-0.5;\n    vec2 id = floor(p);\n    \n    float scale = 0.05;\n    \n    float lineW = 0.14;\n    n*=0.5;\n    n += Hash(id)*0.5;\n    if(n<0.5 || n>=0.8){\n        float dir = (n>=0.8)?1.0:-1.0;\n        uv*=Rot(radians(dir*45.0));\n        uv.x = abs(uv.x);\n        uv.x-=0.355;\n        lineW = 0.1;\n    }\n    \n    lineW*=sc;\n    float d = max(-(uv.x+(lineW*0.5)),(uv.x-(lineW*0.5)));\n    return d;\n}\n\nfloat dots(vec2 p){\n    p = mod(p,0.16)-0.08;\n    float d = length(p)-0.005;\n    return d;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == 0){\n        col = diffuseMaterial(n,rd,p,vec3(1.5));\n    } else if(mat == 1) {\n        p.z+=0.8*iTime;\n        vec2 id = floor(p.xz*0.5);\n        p.xz = mod(p.xz,2.0)-1.0;\n        float n2 = Hash(id);\n        vec2 prevP = p.xz;\n        p.x = abs(p.x)-1.; \n        p.z = abs(p.z)-1.; \n        float thickness = 0.001;\n        float d = min(B(p.xz,vec2(thickness,0.04)),B(p.xz,vec2(0.04,thickness)));\n        p.xz = prevP;\n        float d2 = dots(p.xz);\n        d = min(d,d2);\n        float kw = 3.5;\n        col = mix(vec3(0.01),vec3(2.),S(d,0.0));\n        kw = 5.;\n        \n        d = circuit(p.xz,2.,n2);\n        d = max(B(p.xz,vec2(0.4+n2*0.3)),d);\n        col = mix(col,vec3(0.2),S(d,0.0));\n        \n        col = diffuseMaterial(n,rd,p,col);\n    } else if(mat == 2) {\n        col = diffuseMaterial(n,rd,p,vec3(0.6));\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    \n    vec3 ro = vec3(0, 0, -3.5);\n    ro.yz *= Rot(radians(40.0));\n    ro.xz *= Rot(radians(iTime*10.0));\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}