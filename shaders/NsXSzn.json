{
    "Shader": {
        "info": {
            "date": "1618166092",
            "description": "License CC0: Infinite bezier curve\nWhile I am sure something like this already exists on shadertoy\nI didn't find it and wanted a simple programming challenge for sunday\nevening",
            "flags": 0,
            "hasliked": 0,
            "id": "NsXSzn",
            "likes": 6,
            "name": "Infinite bezier curve",
            "published": 3,
            "tags": [
                "2d",
                "bezier"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 451
        },
        "renderpass": [
            {
                "code": "// License CC0: Infinite bezier curve\n//  While I am sure something like this already exists on shadertoy\n//  I didn't find it and wanted a simple programming challenge for sunday\n//  evening\n\n#define RESOLUTION iResolution\n#define TIME       iTime\n#define L2(x)      dot(x, x)\n\nconst float lw = 0.005;\n\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// http://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat box(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat bezier(vec2 pos, vec2 A, vec2 B, vec2 C) {    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = L2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( L2(d+(c+b*t.x)*t.x),\n                   L2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\nvec2 primitive(vec2 p, vec2 a, vec2 b, vec2 c) {\n  float db = bezier(p, a, b, c)-lw;\n  float d0 = segment(p, a, b);\n  float d1 = segment(p, b, c);\n  float d3 = box(p-a, vec2(lw*4.0));\n  float d4 = box(p-b, vec2(lw*4.0));\n  float d5 = box(p-c, vec2(lw*4.0));\n  \n  float dp = d0;\n  dp = min(dp, d1);\n  dp -= lw;\n  dp = min(dp, d3);\n  dp = min(dp, d4);\n  dp = min(dp, d5);\n\n  return vec2(db, dp);\n}\n\n// The amplitude generating function, x is cell number\nfloat ampl(float x) {\n  return 0.5*hash(x)+0.5*sin(0.5*x+TIME);\n}\n\n// The derivate generating function, x is cell number\nfloat dampl(float x) {\n  // The derivate should be switching signs per cell number in order to\n  //  make the intercepting point lie in the cell\n  float m = fract(x*0.5) > 0.0 ? 1.0 : -1.0;\n  return m*(1.0+0.5*(-1.0 + 2.0*hash(x+123.0)));\n}\n\nvec2 cell(vec2 cp, float cn) {\n  float a0 = ampl(cn);\n  float a1 = ampl(cn+1.0);\n  float d0 = dampl(cn);\n  float d1 = dampl(cn+1.0);\n \n  float t = (a0-a1+d1)/(d1-d0);\n\n  vec2 p0 = vec2(-0.5, a0);\n  vec2 p1 = p0 + t*vec2(1.0, d0);\n  vec2 p2 = vec2(0.5, a1);\n \n  return primitive(cp, p0, p1, p2);\n}\n\nvec2 curve(vec2 p) {\n  vec2 cp = p;\n  float cn = mod1(cp.x, 1.0);\n\n  // Sample surrounding cells to make distance field continuous\n  // A possible optimizations is compute the surrounding cells using\n  // a segments (ie not smooth) instead as the distance field should be \n  // a close approximation at the edges to the \n  vec2 d0 = cell(cp-vec2(-1.0, 0.0), cn-1.0);\n  vec2 d1 = cell(cp, cn);\n  vec2 d2 = cell(cp-vec2(1.0, 0.0), cn+1.0);\n  \n  vec2 d = d0;\n  d = min(d, d1);\n  d = min(d, d2);\n  \n  return d;\n}\n\nvec2 df(vec2 p) {\n  p.x += TIME;\n  return curve(p);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  \n  float z = 0.75;\n  vec2 d = df(p/z)*z;\n  \n  vec3 col = vec3(0.0125);\n  \n  float m = smoothstep(-0.1, 0.1, sin(TIME));\n  col = mix(col, vec3(0.0, 0.75, 0.75), smoothstep(-aa, aa, -d.x));\n  col = mix(col, mix(col, vec3(0.75, 0.0, 0.0), m), smoothstep(-aa, aa, -d.y));\n \n  // Visalizes the distance field\n  // col += vec3(0.25, 0.25, 0.5)*pow((0.5+ 0.5*sin(100.0*d.x)), 20.0);\n  \n  col = pow(clamp(col, 0.0, 1.0), vec3(1.0/2.2));\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}