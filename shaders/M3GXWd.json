{
    "Shader": {
        "info": {
            "date": "1723651535",
            "description": "exploring the sdf caverns",
            "flags": 32,
            "hasliked": 0,
            "id": "M3GXWd",
            "likes": 7,
            "name": "spelunkery",
            "published": 3,
            "tags": [
                "cavediving"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "//debugs\n#define DEBUG_STEPS false\n#define DEBUG_NORMS false\n#define DEBUG_DEPTH false\n#define DEBUG_MATER false\n\n#define SS(a,b,c) smoothstep(a-b,a+b,c)\n#define gyr(p) dot(sin((p).xyz),cos((p).zxy))\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,s,-s,c);\n}\n#define T iTime\n#define R iResolution\nstruct Raymarch {\n    float d;\n    int m;\n};\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nRaymarch map(in vec3 p) {\n    float d = 999.;\n    int mater = -1;\n    \n    float g1 = gyr(p);\n    \n    vec3 tube_p = p;\n    tube_p.xy += sin(p.z*2.)*.1;\n    float tube = length(tube_p.xy) - 0.3;\n    tube += gyr(p*10.)*.02;\n    tube += gyr(p*3.)*.02;\n    g1 = max(g1,-tube);\n    \n    float tube2 = length(p.xy - sin(p.z*7.)*.15) - 0.2;\n    g1 = max(g1,-tube2);    \n    \n    if (g1<d) mater = 1;\n    d = min(d, g1);\n    \n    \n    // spiral arms\n    float arm_d = 9999.;\n    for (float i=0.;i<6.;i++) {\n        vec3 arm_p = p;\n        arm_p.z += i;\n        arm_p.xy += vec2(cos(arm_p.z),sin(arm_p.z))*.3*(0.75+0.25*sin(arm_p.z*.3-iTime));\n        float arm = length(arm_p.xy) - 0.02;\n        if (arm<d) mater = 2;\n        d = min(d, arm);\n        arm_d = min(arm_d, arm);\n        if (i<1.) {\n            arm_p.y += 0.025;\n            arm_p.y *= .8;\n            arm_p.x *= 1.2;\n            arm_p.xy += vec2(cos(arm_p.z*8.),sin(arm_p.z*8.))*.05;\n            arm = length(arm_p.xy) - 0.01;\n            if (arm<d) mater = 3;\n            d = min(d, arm);\n            arm_d = min(arm_d, arm);\n        }\n    }\n    \n    // rings\n    vec3 rings_p = p;\n    rings_p.z = fract(rings_p.z + 0.5) - 0.5;\n    rings_p.yz *= Rot(1.7);\n    float ring = sdTorus(rings_p, vec2(0.2 + sin(iTime+p.z*.2)*.05, 0.1)) + .095;\n    if (ring<d) mater = 4;\n    d = min(d, ring);\n    \n    // bridge\n    if (abs(p.x + sin(p.z)*.05)<.1 && (arm_d>.025)) {\n        float bridge = p.y + .15 + .05*sin(p.z*.5);\n        if (ring<d) mater = 1;\n        d = min(d, bridge);\n    }\n    \n    return Raymarch(d, mater);\n}\nvec3 norm(in vec3 p) {\n    float m = map(p).d;\n    vec2 d = vec2(.02,0.);\n    return normalize(map(p).d-vec3(\n        map(p-d.xyy).d,map(p-d.yxy).d,map(p-d.yyx).d\n    ));\n}\nvoid mainImage( out vec4 color, in vec2 coord ) {\n    vec2 uv = coord/R.xy;\n    color = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 hueShift( vec3 color, float hueAdjust ){\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);\n    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I       = dot (color, kRGBToI);\n    float   Q       = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n    hue += hueAdjust;\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//debugs\n#define DEBUG_STEPS false\n#define DEBUG_NORMS false\n#define DEBUG_DEPTH false\n#define DEBUG_MATER false\n\n#define SS(a,b,c) smoothstep(a-b,a+b,c)\n#define gyr(p) dot(sin((p).xyz),cos((p).zxy))\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,s,-s,c);\n}\n#define T iTime\n#define R iResolution\nstruct Raymarch {\n    float d; // distance\n    int m; // material index\n};\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nRaymarch map(in vec3 p) {\n    float d = 999.;\n    int mater = -1;\n    \n    float g1 = gyr(p);\n    \n    vec3 tube_p = p;\n    tube_p.xy += sin(p.z*2.)*.1;\n    float tube = length(tube_p.xy) - 0.3;\n    tube += gyr(p*10.)*.02;\n    tube += gyr(p*3.)*.02;\n    g1 = max(g1,-tube);\n    \n    float tube2 = length(p.xy - sin(p.z*7.)*.15) - 0.2;\n    g1 = max(g1,-tube2);    \n    \n    if (g1<d) mater = 1;\n    d = min(d, g1);\n    \n    \n    // spiral arms\n    float arm_d = 9999.;\n    for (float i=0.;i<6.;i++) {\n        vec3 arm_p = p;\n        arm_p.z += i;\n        arm_p.xy += vec2(cos(arm_p.z),sin(arm_p.z))*.3*(0.75+0.25*sin(arm_p.z*.3-iTime));\n        float arm = length(arm_p.xy) - 0.02;\n        if (arm<d) mater = 2;\n        d = min(d, arm);\n        arm_d = min(arm_d, arm);\n        if (i<1.) { // spiral twist arm\n            arm_p.y += 0.025;\n            arm_p.y *= .8;\n            arm_p.x *= 1.2;\n            arm_p.xy += vec2(cos(arm_p.z*8.),sin(arm_p.z*8.))*.05;\n            arm = length(arm_p.xy) - 0.01;\n            if (arm<d) mater = 5;\n            d = min(d, arm);\n            arm_d = min(arm_d, arm);\n        }\n    }\n    \n    // rings\n    vec3 rings_p = p;\n    rings_p.z = fract(rings_p.z + 0.5) - 0.5;\n    rings_p.yz *= Rot(1.7);\n    float ring = sdTorus(rings_p, vec2(0.2 + sin(iTime+p.z*.2)*.05, 0.1)) + .095;\n    if (ring<d) mater = 4;\n    d = min(d, ring);\n    \n    // bridge\n    if (abs(p.x + sin(p.z)*.05)<.1 && (arm_d>.025)) {\n        float bridge = p.y + .15 + .05*sin(p.z*.5);\n        if (ring<d) mater = 1;\n        d = min(d, bridge);\n    }\n    \n    return Raymarch(d, mater);\n}\nvec3 norm(in vec3 p) {\n    float m = map(p).d;\n    vec2 d = vec2(.02,0.);\n    return normalize(map(p).d-vec3(\n        map(p-d.xyy).d,map(p-d.yxy).d,map(p-d.yyx).d\n    ));\n}\nvoid mainImage( out vec4 color, in vec2 coord ) {\n    vec2 uv = coord/R.xy;\n    vec2 uvc = (coord-R.xy/2.)/R.y;\n    float d = 0.;\n    float dd = .1;\n    int mat = -1;\n    vec3 p = vec3(0.,0.,T/2.);\n    vec3 rd = normalize(vec3(uvc.xy,1.));\n    int steps=0;\n    float fog = 0.;\n    bool infog = false;\n    float glo = 0.;\n    for (float i=0.;i<90. && dd>.001 && d < 40. && fog < 1.;i++) {\n        Raymarch result = map(p);\n        dd = result.d;\n        glo += 1./dd;\n        if (infog) dd *= 2. + uv.y*4.; // <<-- broken fog thing that was kinda cool so i kept it\n        mat = result.m;\n        p += rd*dd;\n        d += dd;\n        if (dd<.001 && mat==1) {\n            fog += .05;\n            dd=.1;\n            infog = true;\n        }\n        steps++;\n    }\n    // color = vec4(fog); return;\n    bool hit = dd<.01;\n    if (DEBUG_MATER) {\n        if (hit && mat == 1) { color=vec4(1,0,0,1); return; }\n        if (hit && mat == 2) { color=vec4(0,1,0,1); return; }\n        if (hit && mat == 3) { color=vec4(0,0,1,1); return; }\n        if (hit && mat == 4) { color=vec4(1,1,0,1); return; }\n    }\n    if (DEBUG_STEPS) { color = vec4(1./float(steps)); return; }\n    if (DEBUG_DEPTH) { color = vec4(1./d); return; }\n    vec3 n = norm(p);\n    if (DEBUG_NORMS) { color.rgb = n; return; }\n\n    if (hit && glo>9999. && glo<99999.) { color = vec4(1.1-length(uvc)); return; }\n\n    float bw = n.x+n.y;\n    bw = n.y;\n    // bw *= SS(.9,.15,1./d);\n    color = vec4(vec3(bw),1.0);\n    color.rgb *= hueShift(vec3(1,0.3,0.1), float(steps)/2.+iTime*2.+p.z+n.x*3.+n.y*3.);\n\n    // change the feedback mode calculations over time based on material\n    bool magic_fb = hit && (mat==4);\n    if (hit && (mat==5) && fract(iTime+p.z)>.5) magic_fb = true;\n    bool glitch_fb = false; // glitchy feedback mode\n    if (hit && mat==4 && fract(iTime*1.1)>.5) glitch_fb = true;\n    if (sin(iTime*.2)>.5) glitch_fb = true; \n    if (!infog && !magic_fb) {\n        color.rgb = hueShift(color.rgb, smoothstep(0.7,1.,color.g+p.x)*200.);\n        color.rgb -= 0.5;\n        color.rgb *= 1.;\n        if (!magic_fb && !glitch_fb) color.rgb *= 7.77;\n        color.rgb += .5;\n    } else {\n        color *= 1.+uv.y*2.;\n        if (glitch_fb) {\n            // \"bad\" mix probably, produces nans or infs, but the 'spiral arms'\n            // guarantee every pixel gets reset before things go off the rails\n            vec3 lp = texture(iChannel0,(uv-.5)*1.001+.5).rgb;\n            color.rgb = mix(color.rgb, lp, 0.7 + lp.b*.3);\n        } else { // normal feedback mode\n            float fb_zoom = 1.;\n            if (magic_fb) fb_zoom += .05;\n            vec2 fb_uv = (uv-.5)*fb_zoom+.5;\n            vec3 lp = texture(iChannel0,fb_uv).rgb;\n            float mix_amt = 0.95 + lp.b*.05;\n            if (magic_fb) mix_amt = 1.;\n            color.rgb = mix(color.rgb, lp, mix_amt);\n            if (magic_fb) color.rgb *= 5.;\n        }\n        // if (mat==2 && hit) color.rgb = hueShift(color.rgb, 0.2);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}