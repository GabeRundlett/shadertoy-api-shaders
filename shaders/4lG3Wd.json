{
    "Shader": {
        "info": {
            "date": "1477361118",
            "description": "This is my first attempt at a ray tracer. Credit goes to iq for the distance functions. Feed back is appreciated.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lG3Wd",
            "likes": 9,
            "name": "Raytracer",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 1,
            "username": "Mrfixit13",
            "viewed": 1304
        },
        "renderpass": [
            {
                "code": "\nfloat A = 0.15;\nfloat B = 0.50;\nfloat C = 0.10;\nfloat D = 0.20;\nfloat E = 0.02;\nfloat F = 0.30;\nvec3 W = vec3(11.2);\n\nvec3 lp = vec3(0.0,0.0,1.0);\nvec3 lc = vec3(1.0,0.9,0.8)*20.0;\nvec2 mouse;\n\nstruct mat{\nvec3 col;\nvec3 rcol;\nfloat frc;\nfloat frm; \n};\n    \nstruct ray{\nvec3 o;\nvec3 d;\nfloat m;\n};\n\nmat getMat(float n){\n  \tmat m;   \n    \n    m.col = vec3(0.8);\n    m.rcol= vec3(1.0);\n    m.frm = 0.5;\n    m.frc = 0.05;\n   \n    \n    if(n < 1.0){\n        //n = floor(texture(iChannel0,vec2(n,0.0)).r*10.0)/10.0-0.1;\n        \n        if(n == 0.1){\n\n        m.col = vec3(1.0,0.0,0.0);\n\n        }else if(n == 0.2){\n\n        m.col = vec3(1.0,1.0,0.0);\n\n        }else if(n == 0.0){\n\n        m.col = vec3(0.1);\n\n        }else if(n == 0.3){\n\n        m.col = vec3(0.0,1.0,0.0);\n\n        }else if(n == 0.4){\n\n        m.col = vec3(0.0,1.0,1.0);\n\n        }else if(n == 0.5){\n\n        m.col = vec3(0.0,0.0,1.0);\n\n        }else if(n == 0.6){\n\n        m.col = vec3(1.0,0.0,1.0);\n\n        }\n    }else if(n < -0.1){  \n    m.frm = 0.9;\n    m.frc = 0.05;\n    }else{\n        m.frm = 1.0;\n         m.frc = 0.45*m.frm;\n         m.col = vec3(0.0);\n\n        if(n == 1.0){\n            \n        m.rcol= vec3(1.0,0.766,0.336);\n       \n        }else if(n == 1.2){\n       \n        m.rcol= vec3(0.955,0.637,0.538);\n      \n        }else if(n >= 1.1){\n\n        m.rcol= vec3(0.972, 0.960, 0.915);  \n\n        }\n        \n    }\n \n    return m;\n}\n\n\nvec3 uncharted2ToneMapping(vec3 x){\n\t\n\t\t\n\treturn ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\nvec2 plane( vec3 p)\n{\n    \n    float x = float(int(mod(p.x*5.0,2.0)+1.00));\n    float z = float(int(mod(p.z*5.0,2.0)+1.00));\n    float check = abs(x-z)*-0.1;\n\treturn vec2(p.y,check);\n}\n\nfloat length8( vec3 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y+p.z, 1.0/8.0 );\n}\n\n\nfloat plane2( vec3 p ,vec3 d)\n{\n    \n\treturn dot(d,p);\n}\n\n\nfloat sphere(vec3 p,float r){\n    \n       return length(p)-r; \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n\nvec2 comp(vec2 a,vec2 b){\n    \n    return (a.x < b.x) ? a : b;\n}\n\n/*vec2 comp(vec2 a,vec2 b){\n    \n    return vec2(smin(a.x , b.x,32.0),(a.x < b.x) ? a.y : b.y);\n}*/\n\nvec2 map(vec3 rp){\n    vec2 dis = vec2(50.0);\n\n    \n    dis = comp(dis,vec2(plane(rp-vec3(0,-1,0)).xy ));\n    dis = comp(dis,vec2(plane2(rp-vec3(0,0.0,-2.0),vec3(0,0,1)),-0.1));\n    \n    dis = comp(dis,vec2(sphere(rp - vec3(lp),0.1),2.0));\n    \n    dis = comp(dis,vec2(sdEllipsoid(rp - vec3(0.5,0.,1.0),vec3(0.2,0.2,0.2)),-0.7));\n    \n    dis = comp(dis,vec2(sphere(rp - vec3(-1.52,-0.5,-1.0),0.5),0.1));\n    dis = comp(dis,vec2(sphere(rp - vec3(-0.51,-0.5,-1.0),0.5),0.2));\n    dis = comp(dis,vec2(sphere(rp - vec3(0.51,-0.5,-1.0),0.5),0.3));\n    dis = comp(dis,vec2(sphere(rp - vec3(1.52,-0.5,-1.0),0.5),0.5));\n    \n    dis = comp(dis,vec2(sphere(rp - vec3(-1.0,0.5,-1.0),0.5),1.0));\n    dis = comp(dis,vec2(sphere(rp - vec3(0.0,0.5,-1.0),0.5),1.1));\n    dis = comp(dis,vec2(sphere(rp - vec3(1.0,0.5,-1.0),0.5),1.2));\n    \n    dis = comp(dis,vec2(sdTorus(rp - vec3(0.0,-0.95,0.0),vec2(0.45,0.05)),-0.1));\n    dis = comp(dis, vec2( 0.5*sdTorus( opTwist(rp-vec3(0.0,-0.5, 0.0)),vec2(0.250,0.1)), -0.7 ));\n  \n    return dis;\n}\n\n\n\n\nvec4 castRay(vec3 ro , vec3 rd,float imax){\n    \n    float i = 0.002;\n    vec2 dat;\n    \n    for(int n = 0; n < 256; n++){\n        \n        dat.xy = map(ro+rd*i);\n        \n        if(dat.x < 0.002)return vec4(ro+rd*i,dat.y);\n        \n        if(i > imax)return vec4(ro+rd*i,-1.1);\n        \n        i+=max(abs(dat.x),0.002);\n    }\n    \n    return vec4(ro+rd*i,-1.1);\n}\n\n\nvec3 calcNormal(vec3 pos){\n    vec2 off = vec2(0.002,0.0);\n    \n   \tvec3 normal = normalize(vec3(\n    map(pos+off.xyy).x - map(pos-off.xyy).x,\n    map(pos+off.yxy).x - map(pos-off.yxy).x,\n    map(pos+off.yyx).x - map(pos-off.yyx).x )); \n    \n    return normal;\n}\n\nray castRayR(vec3 ro , vec3 rd,float imax){\n    \n    float i = 0.002;\n    vec2 dat;\n    bool pass = false;\n    float pre = 1.0;\n    \n    for(int n = 0; n < 512; n++){\n        \n        dat.xy = map(ro+rd*i);\n        \n        \n        if(dat.x < 0.002 && dat.y > -0.5)return ray(vec3(ro+rd*i),vec3(rd),dat.y);\n        \n        if(i > imax)return ray(vec3(ro+rd*i),vec3(rd),-1.1);\n        \n        if(pre < 0.0 && dat.x > 0.0){\n            pass=true;\n            ro=ro+rd*i;\n            rd=normalize(rd+calcNormal(ro)*1.0/1.5);\n            i=0.000;\n        }\n        \n        if(pre > 0.0 && dat.x < 0.0){\n            pass=false;\n            ro=ro+rd*i;\n            rd=normalize(rd-calcNormal(ro)*1.5);\n            i=0.000;\n        }\n        \n        i+=max(abs(dat.x),0.002);\n        pre=dat.x;\n    }\n    \n    return ray(vec3(ro+rd*i),vec3(rd),-1.1);\n}\n\nfloat calcShadow(vec3 sp,float imax){\n   vec3 dp = normalize(lp-sp);\n    float i2 = 0.1;\n    for(int n =0; n < 200;n++){\n        \n        i2 += max(abs(map(sp+dp*i2).x/1.0) , 0.01);\n        \n        if(abs(map(sp+dp*i2).x) < 0.01){\n            \n            if(map(sp+dp*i2).y < -1.5){\n                \n                vec3 norm = calcNormal(sp+dp*i2);\n                float fren =pow(1.0 - max(dot(-dp,norm),0.0),5.0);\n     \t        fren = mix(0.1,1.0,fren);\n            return 1.0-fren;\n                \n                \n            }else if(map(sp+dp*i2).y < 2.0){\n        \n            return 0.0;\n            }else{\n                \n            return 1.0;\n                \n            }\n            \n        }else if( i2 > imax) return 1.0;\n            \n    }\n    \n    return 1.0;\n}\n\n\n\n//from iq's raytracer \nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.1, 1.0 );    \n}\n\n\nvec3 renderR(vec3 ro,vec3 rd){\n    vec3 pos = vec3(0,0,0),normal = vec3(0.0,0.0,0.0),color = vec3(0.0,0.0,0.0),ref = vec3(1.0);\n    mat mate; \n   \tfloat prec = 0.002;\n    vec3 bg = vec3(0.3,0.7,1.0)*1.0;\n    float dist = 0.0;\n    float cons = 1.0;\n    float lin = 0.14;\n    float quad = 0.07;\n    \n\tfor(int j = 1; j<4; j++){\n        vec4 dat = vec4(0.0);\n        if(j < 2){\n     \tray temp = castRayR(ro,rd,15.0/float(j));\n        rd = temp.d;\n        dat = vec4(temp.o,temp.m);\n        }else{\n        dat = castRay(ro,rd,15.0/float(j));\n \n        }\n     \tvec3 pos = dat.xyz;\n \t\n     \t\n            \n            dist+=length(ro-pos);\n            float fog = exp(-dist/10.0);\n            float dist1 = dist+length(lp-pos);\n           \tfloat atten = 1.0/(cons + lin*dist1 + quad * (dist1 * dist1)); \n            \n            if(dat.w >= 2.0){\n     \t       color+=lc*ref;    \n     \t       return color;\n               \n     \t    }else if(dat.w <= -1.0){\n            \n            dist+=length(ro-pos);\n  \t\t\tfloat fog = exp(-dist/10.0);\n   \t\t\tcolor+=ref*bg;\n   \t\t\treturn color;\n                \n            }else{\n     \t         \n     \t        mate = getMat(dat.w);\n                vec3 c = pow(mate.col,vec3(2.2));   \n     \t        vec3 rc = pow(mate.rcol,vec3(2.2));\n                \n     \t        normal = calcNormal(pos);\n     \t        vec3 ld = normalize(lp-pos);\n                \n     \t        float fren =pow(1.0 - max(dot(-rd,normal),0.0),5.0);\n     \t        fren = mix(mate.frc,mate.frm,fren);\n                \n     \t        vec3 lit = (max(dot(ld,normal),0.0))*lc/12.0;\n                lit*=calcShadow(pos,15.0/float(j));\n                \n     \t        vec3 dif = c*lit*(1.0-fren)*ref;\n                vec3 amb = c*bg/6.3*ref*(1.0-fren)*calcAO(pos,normal);\n                \n                dif*=atten;\n                \n     \t    \tcolor+= dif + amb;\n                \n     \t        ref*=fren*rc; \n                \n     \t    }\n            \n     \t    ro=pos;\n     \t\trd=reflect(rd,normal);\n     \t  \t  \t\n    }\n   dist+=length(ro-pos);\n   float fog = exp(-dist/10.0);\n   color+=ref*bg;\n   return color;\n    \n}\n\nvec3 render(vec3 ro,vec3 rd){\n    vec3 pos = vec3(0,0,0),normal = vec3(0.0,0.0,0.0),color = vec3(0.0,0.0,0.0),ref = vec3(1.0);\n    mat mate; \n   \tfloat prec = 0.002;\n    vec3 bg = vec3(0.3,0.7,1.0)*1.0;\n    float dist = 0.0;\n    float cons = 1.0;\n    float lin = 0.14;\n    float quad = 0.07;\n    \n\tfor(int j = 1; j<7; j++){\n   \n     \tvec4 dat = castRay(ro,rd,15.0/float(j));\n     \tvec3 pos = dat.xyz;\n \t\n     \t\n            \n            dist+=length(ro-pos);\n            float fog = exp(-dist/10.0);\n            float dist1 = dist+length(lp-pos);\n           \tfloat atten = 1.0/(cons + lin*dist1 + quad * (dist1 * dist1)); \n            \n            if(dat.w >= 2.0){\n     \t       color+=lc*ref;    \n     \t       return color;\n               \n     \t    }else if(dat.w < -1.0){\n            \n            dist+=length(ro-pos);\n  \t\t\tfloat fog = exp(-dist/10.0);\n   \t\t\tcolor+=ref*bg;\n   \t\t\treturn color;\n                \n            }else if(dat.w < -0.5 && j < 3){\n                \n             \n     \t        mate = getMat(dat.w);\n                vec3 c = pow(mate.col,vec3(2.2));   \n     \t        vec3 rc = pow(mate.rcol,vec3(2.2));\n                \n     \t        normal = calcNormal(pos);\n     \t        vec3 ld = normalize(lp-pos);\n                \n     \t        float fren =pow(1.0 - max(dot(-rd,normal),0.0),5.0);\n     \t        fren = mix(mate.frc,mate.frm,fren);\n               \n                \n     \t        vec3 dif = renderR(ro,rd)*(1.0-fren)*ref;\n                vec3 amb = c*bg/24.0*ref*(1.0-fren)*calcAO(pos,normal);\n                \n                dif*=atten;\n                \n     \t    \tcolor+= dif;\n                \n     \t        ref*=fren*rc; \n                \n            }else{\n     \t         \n     \t        mate = getMat(dat.w);\n                vec3 c = pow(mate.col,vec3(2.2));   \n     \t        vec3 rc = pow(mate.rcol,vec3(2.2));\n                \n     \t        normal = calcNormal(pos);\n     \t        vec3 ld = normalize(lp-pos);\n                \n     \t        float fren =pow(1.0 - max(dot(-rd,normal),0.0),5.0);\n     \t        fren = mix(mate.frc,mate.frm,fren);\n                \n     \t        vec3 lit = (max(dot(ld,normal),0.0))*lc/12.0;\n                lit*=calcShadow(pos,15.0/float(j));\n                \n     \t        vec3 dif = c*lit*(1.0-fren)*ref;\n                vec3 amb = c*bg/24.0*ref*(1.0-fren)*calcAO(pos,normal);\n                \n                dif*=atten;\n                \n     \t    \tcolor+= dif + amb;\n                \n     \t        ref*=fren*rc; \n                \n     \t    }\n            \n     \t    ro=pos;\n     \t\trd=reflect(rd,normal);\n     \t  \t  \t\n    }\n   dist+=length(ro-pos);\n   float fog = exp(-dist/10.0);\n   color+=ref*bg;\n   return color;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (vec2(-1.0)+2.0*(fragCoord.xy / iResolution.xy)) * vec2(iResolution.x/iResolution.y,1.0);\n    \n    \n    mouse = (iMouse.xy/iResolution.xy*2.0-vec2(1.0))*vec2(iResolution.x/iResolution.y,1.0)*2.0;\n    mouse.y = max(mouse.y,-0.5);\n    \n    mat3 rot = mat3(vec3(sin(mouse.x+3.14159/2.0),0,sin(mouse.x)),\n                    vec3(0,1,0),\n                    vec3(sin(mouse.x+3.14159),0,sin(mouse.x+3.14159/2.0)));\n    \n    //float p0 = texture(iChannel0,vec2(0.0,0.0)).g;\n    \n    lp=vec3(0.0,mouse.y,0.5);\n    \n    vec3 ro = vec3(0.0,0.0,1.9)+vec3(0.0,0.0,0.0);\n    vec3 rd = normalize(vec3(uv,-2.0));\n   \trd = rot*rd;\n\tro = rot*ro;\n    \n    \n    vec3 color = render(ro,rd);\n\n    vec3 curr = uncharted2ToneMapping(color.xyz*5.0);\n\tvec3 whiteScale = 1.0/uncharted2ToneMapping(W); \n\tvec3 mapped = curr*whiteScale;\n\t\n\tmapped = pow(mapped, vec3(1.0 / 2.2));\n\t\n\tfragColor =  vec4(mapped,1.0) ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}