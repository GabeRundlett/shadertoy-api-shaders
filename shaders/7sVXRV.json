{
    "Shader": {
        "info": {
            "date": "1634967377",
            "description": "Semi-spooky experiments with sound tab.",
            "flags": 8,
            "hasliked": 0,
            "id": "7sVXRV",
            "likes": 11,
            "name": "Sound Experiment #2",
            "published": 3,
            "tags": [
                "sound",
                "experiment",
                "short"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "// Based on the spooky sound in this p5.js sketch:\n// https://editor.p5js.org/allison.parrish/sketches/8aW5OeI8M\n\n// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\n// Modified hash from https://www.shadertoy.com/view/4djSRW\nfloat noise(in vec3 p) {\n\tp = fract(p * 0.731 - p.x * 253.567);\n    p += dot(p + p, p.yzx + 33.33);\n    return fract((p.x + p.y) * p.z);\n}\n\nfloat snoise(in vec3 p) {\n    vec3 cell = floor(p);\n    vec3 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldb = noise(cell);\n    float rdb = noise(cell + vec3(1.0, 0.0, 0.0));\n    float ldf = noise(cell + vec3(0.0, 0.0, 1.0));\n    float rdf = noise(cell + vec3(1.0, 0.0, 1.0));\n    float lub = noise(cell + vec3(0.0, 1.0, 0.0));\n    float rub = noise(cell + vec3(1.0, 1.0, 0.0));\n    float luf = noise(cell + vec3(0.0, 1.0, 1.0));\n    float ruf = noise(cell + 1.0);\n\n    return mix(mix(mix(ldb, rdb, local.x), mix(ldf, rdf, local.x), local.z),\n               mix(mix(lub, rub, local.x), mix(luf, ruf, local.x), local.z), local.y);\n}\n\nfloat fnoise(in vec3 p, in float scale, in float octaves) {\n    p *= scale;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += snoise(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = 0.1 * iTime;\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y + time;\n\n    // iq's domain warping technique\n    float warp = 0.0;\n    for (int i=0; i < 5; i++) warp = fnoise(vec3(uv, 0.25 * time) + warp, 2.0, 5.0);\n\n    float pow2 = warp * warp, pow4 = pow2 * pow2, pow8 = pow4 * pow4;\n    fragColor = vec4(pow4, pow4 + pow8, pow4, 1.0);\n\n    // Aspect correct uncentered and undrifting UVs\n    uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time) {\n    return vec2(makeNoise(time));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define TAU 6.28\n\nfloat erf(in float x) {\n    return sign(x) * sqrt(1.0 - exp2(-1.787776 * x * x));\n}\n\n// Approximate gaussian filtered saw wave\nfloat gsaw(in float x, in float w) {\n    x = fract(x);\n    return (erf(2.0 * (1.0 - x) / w) - erf(2.0 * x / w)) / 2.0 + x;\n}\n\nfloat whiteNoise(in float time) {\n    // return fract(495.381 * cos(937.385 * time + 18.387));\n    // https://www.shadertoy.com/view/4djSRW\n    time = fract(time * 0.1031);\n    time *= time + 33.33;\n    time *= time + time;\n    return fract(time);\n}\n\nfloat smoothNoise(in float time) {\n     return mix(whiteNoise(floor(time)), whiteNoise(ceil(time)), smoothstep(0.0, 1.0, fract(time)));\n}\n\nfloat squareWave(in float time) {\n    return mod(floor(2.0 * TAU * time), 2.0);\n}\n\nfloat triWave(in float time) {\n    return (1.0 - 2.0 * abs(1.0 - 2.0 * fract(TAU * time + 0.25)));\n}\n\nfloat sineWave(in float time) {\n     return sin(TAU * time);\n}\n\nfloat bump(in float time, in float width, in float sharpness) {\n    time = max(0.0, abs(time) - width) * sharpness;\n    return exp(-time * time);\n}\n\nfloat expFade(in float time, in float sharpness) {\n    return exp2(-time * sharpness);\n}\n\nfloat makeNoise(in float time) {\n    float sound = 0.0;\n\n    // Kind of spooky, also sounds a bit like a ventilator fan\n    float amp = 1.0 / 50.0;\n    for (float i=0.0; i < 50.0; i++) {\n        float freq = floor(mix(100.0, 1000.0, whiteNoise(i)));\n        sound += amp * sin(mod(TAU * freq * time, TAU));\n    }\n\n    // Okayish bell tolling\n    if (time > 5.0 && time < 26.0) {\n        float time1 = time - 5.0;\n        float time2 = time1 - min(3.0 * floor(time1 / 3.0), 15.0);\n        sound += gsaw(TAU * 55.0 * time2, 0.15) * expFade(time2, 1.0) * expFade(time1, 0.1);\n    }\n\n    // Drum\n    if (time > 28.0) {\n        float time3 = time - 28.0;\n        float time4 = mod(time3, 3.0);\n        sound += 0.5 * sineWave(100.0 * expFade(time4, 1.0) * time4) * expFade(time4, 1.0) * expFade(time3, 0.15);\n    }\n\n    return sound;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}