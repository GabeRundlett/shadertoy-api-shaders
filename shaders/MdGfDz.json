{
    "Shader": {
        "info": {
            "date": "1528300457",
            "description": "Shadertoy has a blue noise texture now, yay!\n\nLeft: blue noise. Right: white noise.\n\nCheck bottom of shader for notes.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdGfDz",
            "likes": 22,
            "name": "Blue Noise Dissolve",
            "published": 3,
            "tags": [
                "stochastic"
            ],
            "usePreview": 0,
            "username": "demofox",
            "viewed": 4492
        },
        "renderpass": [
            {
                "code": "#define ANIMATE_NOISE 1\n#define HAS_GREEN_SCREEN 0\n\n//----------------------------------------------------------------------------------------\n///  1 out, 3 in...\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 443.8975\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    const float c_goldenRatioConjugate = 0.61803398875;\n    \n    // use default \"new shadertoy\" as background\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 bg = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // foreground color\n    vec3 fg = texture( iChannel0, uv ).rgb;\n    \n    // handle greenscreen if there is one\n    // This is for the videos with greenscreen backgrounds\n    #if HAS_GREEN_SCREEN\n    \tfloat opaque = (fg.g > 0.5 && fg.r < 0.2 && fg.b < 0.2) ? 0.0 : 1.0;\n    #else\n    \tfloat opaque = 1.0;\n    #endif\n\n    // animate transparency over time\n    float alpha = (sin(iTime*2.0)*0.5+0.5) * 1.2 - 0.1;\n    \n    // use blue noise to do a stochastic alpha\n    vec2 blueNoiseUV = fragCoord / vec2(1024.0, 1024.0);\n    float blueNoise = texture(iChannel1, blueNoiseUV).r;\n    #if ANIMATE_NOISE\n        blueNoise = fract(blueNoise + float(iFrame%64) * c_goldenRatioConjugate);\n    \tfloat whiteNoise = hash13(vec3(uv, float(iFrame%256) / 256.0));\n    #else\n\t\tfloat whiteNoise = hash13(vec3(uv, 0.0));    \t\n    #endif\n    if (uv.x > 0.5)\n        opaque *= step(alpha, whiteNoise);\n    else\n    \topaque *= step(alpha, blueNoise);\n    \n    // use the binary opaque value (opaque or not, no semi transparency)\n    // to select background or foreground\n    vec3 col = mix(bg, fg, opaque);\n    \n    if (abs(uv.x - 0.5) < 0.001)\n\t\tcol = vec3(0.0, 1.0, 0.0);        \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n/*\n\nItems of note!\n\n* The blue noise texture sampling should be set to \"nearest\" (not mip map!) and repeat\n\n* you should calculate the uv to use based on the pixel coordinate and the size of the blue noise texture.\n * aka you should tile the blue noise texture across the screen.\n * blue nois actually tiles really well unlike white noise.\n\n* A blue noise texture is \"low discrepancy over space\" which means there are fewer visible patterns than white noise\n * it also gives more even coverage vs white noise. no clumps or voids.\n\n* In an attempt to make it also blue noise over time, you can add the golden ratio and frac it.\n * that makes it lower discrepancy over time, but makes it less good over space.\n * thanks to r4unit for that tip! https://twitter.com/R4_Unit\n\nFor more information:\n\nWhat the heck is blue nois:\nhttps://blog.demofox.org/2018/01/30/what-the-heck-is-blue-noise/\n\nLow discrepancy sequences:\nhttps://blog.demofox.org/2017/05/29/when-random-numbers-are-too-random-low-discrepancy-sequences/\n\nYou can get your own blue noise textures here:\nhttp://momentsingraphics.de/?p=127\n\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}