{
    "Shader": {
        "info": {
            "date": "1587031414",
            "description": "Classic spectrogram  - with the help of Shadertoy spectrum input.\nNEEDS A RESET at first run on Windows Browser (why? help!)\nColoring with note pitch within octave (press mouse button for pure intensity)",
            "flags": 96,
            "hasliked": 0,
            "id": "3sByR3",
            "likes": 4,
            "name": "Spectrogram test",
            "published": 3,
            "tags": [
                "sound",
                "spectrogram",
                "microphone"
            ],
            "usePreview": 0,
            "username": "hojo",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //display Buffer A output\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// (C) F. Claudel 2020\n// this buffer memorizes the background to draw over it\n// AUDIO FEED in iChanel1\n//   microphone ,\n//   soundcloud\n//    https://soundcloud.com/nemixmusic/valkyrie-profile-tomorrow-nemix-remix\n//    https://soundcloud.com/classical-piano-hits/waltz-chopin\n//\n// Get audio feed FFT, display as a Sppectrogram , frequencies on log scale\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //number of octaves, normally log2(512) => 9\n    float nbSamp = iChannelResolution[1].x;\n   \n    // number of octaves (first octave is spread on a just one value...)\n    float nbOct=log2(nbSamp);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // y Offset in screen for first pixel\n    float yOffscr = 0.5/iResolution.y;\n    // x offset in FF buffer\n    float xOffFFT = 0.5/nbSamp;\n    //low octaves to discard for LOGY display\n    float octOffRem = YLOG ? octOffLog : 0.0;\n        \n    // number of octaves to display\n\tfloat nbOctDisp = min(maxOctaves, nbOct-octOffRem);\n\n    \n    float pFreq; //posiiton inf FFT buffer (normalized 0=>1)\n    float phase; // note phase within octavbe, for coloring\n    if (YLOG) {\n    \t//compute for each Y the position in FOurier series (using log display)       \n    \tpFreq = exp2((uv.y-yOffscr)*nbOctDisp+octOffRem)/exp2(nbOct) + xOffFFT;\n        phase = mod((uv.y-yOffscr)*nbOctDisp, 1.0);\n    } else {\n        //linear frequency display\n        pFreq = (uv.y-yOffscr)/nbOct*nbOctDisp +xOffFFT;\n        phase = mod(-log2(uv.y-yOffscr)/log2(nbOctDisp),1.0);\n    }\n    \n    // Thickness of spetroram moving column (2 pixels, normalized)\n    float COLTHICK = 1./iResolution.x; \n     \n    // x position on screen depends time and preious time\n    float tSound= iTime;\n    float xpos1 = fract((tSound-iTimeDelta)*speedx); //fract => periodize\n    float xpos2 = fract((tSound)*speedx);\n    if (xpos1 > xpos2) xpos1 -= 1.0; //avoid carriage return\n    \n     // define smooth alpha on time + period+thickness : 1 during time, 0 out\n\tfloat alphaCol = smoothstep( 0.0, COLTHICK, uv.x - (xpos1-COLTHICK/2.0));\n    alphaCol -= smoothstep( 0.0, COLTHICK, uv.x - (xpos2+COLTHICK/2.0));\n    \n    // mix rgba with previous buffer\n    vec4 prevCol = texture(iChannel0, fragCoord/iResolution.xy).rgba;\n    float freqI = texture(iChannel1, vec2(pFreq,0.25)).r;\n    \n    //check mouse status to see if we inverse palettes\n    if (iMouse.z>0.001) { PALPHASE = !PALPHASE; }\n    \n    if (PALPHASE) {\n        // palette color is phase, amplify with intensity\n   \t\tfragColor = mix(prevCol,\n        \tpalettePhase(freqI, phase), \n       \t\talphaCol );\n    } else {\n        //palette inetnsity\n   \t\tfragColor = mix(prevCol,\n        \tpaletteSound(freqI), \n       \t\talphaCol );\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 22424,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/classical-piano-hits/waltz-chopin"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// LOG or linear frequency o Y axis : \n// use 1.0 for LOG dispolay,, else 0.0 for LINEAR\nconst bool YLOG = true;\n\n// Colouring with Note Phase in octave + intensity dimming\n//  else intensiy colouring\nbool PALPHASE = true; // also changed by clicking the mouse\n\n//speed of spectrogram : screen fraction per second\nconst float speedx = 1./15.;\n    \n//max number of octaves displayed (low octaves can be skipped in log mode)\nconst float maxOctaves = 9.0;\n//for log display, skip those octaves (not enough data in FFT)\nconst float octOffLog = 2.0; \n//Amplification of Spectrum\nconst float specAmpli = 1.0;\n\nvec4 paletteSound(in float x) {\n    // convert intensity to colors, alpha is 1.0\n    x*=specAmpli;\n    //x*=x;//adapt level\n\tvec3 p = vec3( x, 4.0*x*(1.0-x), 1.0-x ) * x;\n    return vec4(p,1.0); //alpha=1\n}\n\nvec4 palettePhase(in float intensity, in float phase) {\n    //phase is between 0 an 1\n    //periodic palette for notes pitch in octave, alpha is 1.0\n    // note : no gamma correction because FFT values seem non-linear...\n    \n    vec3 p = 0.5+0.5*sin(6.28318530718*(vec3(0.0,0.33,0.66)+phase));\n    // modulate by intensity              \n    return vec4( intensity*p ,1.0); //alpha=1\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}