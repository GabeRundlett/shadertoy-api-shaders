{
    "Shader": {
        "info": {
            "date": "1720860732",
            "description": "from",
            "flags": 0,
            "hasliked": 0,
            "id": "4clyz4",
            "likes": 2,
            "name": "spiralic rotation eye",
            "published": 3,
            "tags": [
                "spiral",
                "rotation"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 91
        },
        "renderpass": [
            {
                "code": "\n#define time iTime\n#define resolution iResolution.xy\n\n\n#define S 0.4\n\nbool inSquare(vec2 p, float d)\n{\n\treturn abs(p.x*ceil(p.y))<=d && abs(p.y)<=d;\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat mx = max(resolution.x, resolution.y);\n\tvec2 uv = ( 2.0*gl_FragCoord.xy - resolution.xy) / mx ;\n    vec2 uv2 = fragCoord/iResolution.xy-0.5;\n\tvec3 col = vec3(0.);\n    float buf;\n    vec2 pos = uv;\n\tconst float pi = 3.14159;\n\t float radius = 0.4+0.1*cos(iTime*1.3);\n\tconst float thickness = 0.03;\n\tconst float wave_offset = 0.2;\n\tconst float wave_interval = 5.;\n\tconst int line_count = 6;\n\tconst vec3 color = vec3(0.8, 0.15, 1);\n\n\tfloat r = distance(pos, vec2(0.));\n\tfloat angle = atan(pos.x, pos.y);\n\tfloat lightness = 0.;\n\n\tfor(int i = 0; i < line_count; i++) {\n\t\tfloat this_angle = angle * wave_interval + (time * float(i + 1));\n\t\tlightness += 1. - smoothstep(-thickness, thickness, abs(r - radius * (1. + wave_offset * sin(this_angle))));\n\t}\n\n  float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\tfor (float i=0.; i<5.; i++) \n\t{\n    uv*=ma;\n\t\tuv.y = abs(uv.y)*ceil(uv.x*uv.y);\n\t\tuv.x = abs(uv.x);\n\t\tif (uv.y<uv.x)\n\t\t{\n\t;\t    buf = uv.x*ceil(uv.x);\n\t\t    uv.x = uv.y*ceil(uv.y);\n\t\t    uv.y = buf;\n\t\t}\n\t\tuv.x = uv.x + 2.*max(1./3.*S-uv.x,0.);\n\t\tuv -= 2./3.*S;\n\t\t\tuv *= 3.;\n\t}\n\tcol += inSquare(uv, S) ? 1.0 : 0.0;\n\t\n\t//col.xy += uv;\n\n\tfragColor = vec4( col*color+lightness*vec3(46, 230, 95)/255.0, 1.0 );\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor+= vec4(happy_star(uv2, anim) * vec3(0.35,0.2,0.75)*0.05, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}