{
    "Shader": {
        "info": {
            "date": "1505660657",
            "description": "instead of joining 2 bodies, it pushes them away\ncontrol camera with WASD  and mouse",
            "flags": 48,
            "hasliked": 0,
            "id": "4lfyzX",
            "likes": 0,
            "name": "inverse smin",
            "published": 3,
            "tags": [
                "3d",
                "distancefield",
                "raymarch",
                "smin"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 606
        },
        "renderpass": [
            {
                "code": "float smin1(float a, float b, float k)//joins 2 bodies\n{\n    float s = max((k-abs(a-b))*(.5/k),0.);\n    s*=s;\n    s*=s*(2.*k);\n    return min(a-s,b-s);\n}\nfloat smin2(float a, float b, float k)//pushes them away\n{\n    float s = max((k-abs(a-b))*(.5/k),0.);\n    s*=s;\n    s*=s*(2.*k);\n    return min(a+s,b+s);\n}\nfloat objects(vec3 p)\n{\n    //cube\n    vec3 d = abs(p-vec3(-6.,0.,0.)) - 1.;\n    float s1 = min(max(d.x,max(d.y,d.z)),0.) + length(max(d,0.));\n    //sphere 1\n    float s2 = length(p-vec3(-4.,0.,0.))-1.;\n    //cilinder\n    vec3 c = p;\n    c.y = max(abs(c.y)-2.,0.);\n    float s3 = length(c)-1.;\n    //sphere 2\n    float s4 = length(p-vec3(1.5,0.,0.))-1.;\n    //sphere 3\n    float s5 = length(p-vec3(5.,0.,0.))-1.;\n    //sphere 4\n    float s6 = length(p-vec3(6.5,0.,0.))-1.;\n    \n    float r = smin2(s1,s2,1.5);\n          r = min(r,s3);\n    \t  r = smin2(r,s4,1.5);\n    \t  r = min(r,s5);\n    \t  r = smin2(r,s6,1.5);\n    return r;\n}\nvoid march(vec3 look, inout vec3 p, inout float d)\n{\n    for (int i = 0; i < 32; ++i)\n    {\n        d = objects(p);\n        p += d*look;\n    }\n}\n#define D .001\nvec3 normal(vec3 p){\n    return normalize(vec3(\n        objects(vec3(p.x + D, p.y, p.z)) - objects(vec3(p.x - D, p.y, p.z)),\n        objects(vec3(p.x, p.y + D, p.z)) - objects(vec3(p.x, p.y - D, p.z)),\n        objects(vec3(p.x, p.y, p.z + D)) - objects(vec3(p.x, p.y, p.z - D))\n    ));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 look   = texture( iChannel0, (vec2(1.,0.)+.5)/iResolution.xy).xyz;\n    vec3 camPos = texture( iChannel0, (vec2(2.,0.)+.5)/iResolution.xy).xyz;\n    camPos+=vec3(5.,0.,-6.);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    mat3 mtx;\n    mtx[2] = look;\n    mtx[0] = normalize(vec3(mtx[2].z,0.,-mtx[2].x));\n    mtx[1] = cross(mtx[2],mtx[0]);\n    look = mtx*normalize(vec3(uv,1.));\n \n    vec3 p = camPos;\n    float d = 0.;\n    march(look, p, d);\n    vec3 n = look;\n    if(d<.1){ n = normal(p); }\n\tfragColor = vec4(n,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void rotVec(inout vec4 v, float x, float y)\n{\n    y = asin(v.y) - y;\n    if(-1.56 > y){ y = -1.56; };\n    if( 1.56 < y){ y = 1.56; };\n    float l = cos(y);\n    float xv = v.x, zv = v.z;\n    v.z = zv * cos(x) - xv * sin(x);\n    v.x = zv * sin(x) + xv * cos(x);\n    l /= sqrt(v.x * v.x + v.z * v.z);\n    v.x *= l;\n    v.y = sin(y);\n    v.z *= l;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float keyW  = texture( iChannel1, vec2(87.5/256.,.25) ).x;\n    float keyS  = texture( iChannel1, vec2(83.5/256.,.25) ).x;\n    float keyA  = texture( iChannel1, vec2(65.5/256.,.25) ).x;\n    float keyD  = texture( iChannel1, vec2(68.5/256.,.25) ).x;\n    vec4 mouse  = texture( iChannel0, vec2(0.5,.5)/iResolution.xy);\n    vec4 look   = texture( iChannel0, vec2(1.5,.5)/iResolution.xy);\n    vec4 camPos = texture( iChannel0, vec2(2.5,.5)/iResolution.xy);\n    vec4 final = vec4(0.);\n    \n    //make sure \"look\" always is a normalized vector\n    if(dot(look,look)==0.){look = normalize(vec4(-.4,0.,1.,0.));}\n    \n    if(fragCoord.x == 0.5)//mod mouse texel\n    {\n        if(iMouse.z>0.){ mouse = iMouse; }\n        else           { mouse.z = 0.;   }\n\t\tfinal = mouse;\n    }\n    if(fragCoord.x == 1.5)//mod look texel\n    {\n        if(iMouse.z>0. && mouse.z>0.)\n        {\n            mouse = (iMouse-mouse)*.01;\n            rotVec(look, mouse.x, -mouse.y); \n        }\n        final = look;\n    }\n    if(fragCoord.x == 2.5)//mod camPos texel\n    {\n        final = camPos + look*(keyW-keyS)*.1 +\n                normalize(vec4(look.z,0.,-look.x,0.))*(keyD-keyA)*.1;\n    }\n    fragColor = final;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}