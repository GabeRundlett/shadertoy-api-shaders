{
    "Shader": {
        "info": {
            "date": "1724276222",
            "description": "ada129690_Spirals",
            "flags": 0,
            "hasliked": 0,
            "id": "lfXBzf",
            "likes": 1,
            "name": "ada129690_Spirals",
            "published": 3,
            "tags": [
                "ada129690spirals"
            ],
            "usePreview": 0,
            "username": "ada129690",
            "viewed": 72
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nconst vec3 black = vec3(0.);\nconst vec3 white = vec3(1.);\n\nconst vec3 a = vec3(.5);\nconst vec3 b = vec3(.5);\nconst vec3 c = vec3(1.);\nconst vec3 d = vec3(0., .33, .67);\nvec3 palette(float t) {\n    return a + b * cos(2. * PI * (c * t + d));\n}\n\nfloat spiral(vec2 uv, float c) {\n    float r = distance(vec2(0.), uv);\n    float alpha = atan(uv.y, uv.x);\n    float n = round((r / c - alpha) / (2. * PI));\n    float dr = r - c * (alpha + 2. * PI * n);\n    const float th = .01;\n    return 1. - smoothstep(0., th, abs(dr));\n}\n\nfloat singleSpiral(vec2 uv) {\n    float c = .02;\n    float r = distance(vec2(0.), uv);\n    float alpha = atan(uv.y, uv.x);\n    float n = round((r / c - alpha) / (2. * PI));\n    float dr = r - c * (alpha + 2. * PI * n);\n    dr = abs(dr);\n    dr = .005 / dr;\n    dr = pow(dr, 1.4);\n    return dr;\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle), c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat tripleSpiral(vec2 uv) {\n    float v = 0.;\n    const float N = 3.;\n    const float dtheta = 2. * PI / N;\n    float dt = 5. * iTime;\n    mat2 rot = rot2D(dt);\n    float c = .02;\n    float r0 = .75;\n    for (float i = 0.; i < N; i++) {\n        float r = r0 * (((sin(iTime) + 1.) / 2.) + .5);\n        float x = r * cos(dtheta * i);\n        float y = r * sin(dtheta * i);\n        v = max(v, spiral(rot * (uv + vec2(x, y)), c));\n    }\n    return v;\n}\n\nvec3 pretty(vec2 uv) {\n    vec2 uv0 = uv;\n    float d = distance(vec2(0.), uv);\n    float v = max(\n        singleSpiral(uv * rot2D(-iTime * 2.)),\n        singleSpiral(uv * vec2(-1., 1.) * rot2D(-iTime * 2.))\n    );\n    vec2 col_uv = uv0 * rot2D(-(d * 10. - iTime));\n    float t = atan(col_uv.y, col_uv.x) / (2. * PI);\n    vec3 col = palette(sin(t * 2. + d + iTime * .7) * .5 + .5);\n    col = mix(black, col, v);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv0 = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 uv = uv0;\n    float d0 = distance(vec2(0.), uv);\n    vec3 col = vec3(0.);\n    for (float i = 0.; i < 3.; i++) {\n        float d = distance(vec2(0.), uv);\n        float v = max(\n            singleSpiral(uv * rot2D(-iTime * 2.)),\n            singleSpiral(uv * vec2(-1., 1.) * rot2D(-iTime * 2.))\n        );\n        vec2 col_uv = uv0 * rot2D(-(d * 10. - iTime));\n        float t = atan(col_uv.y, col_uv.x) / (2. * PI);\n        vec3 c = palette(sin(t * 2. + d + iTime * .7) * cos(t * d0 + iTime * .2));\n        col += mix(black, c, v);\n        uv = fract(uv * .932) - .5;\n    }\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}