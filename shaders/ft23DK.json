{
    "Shader": {
        "info": {
            "date": "1624747025",
            "description": "made for livecode.demozoo.org Release Party in bonzomatic in roughly 1 hour.",
            "flags": 32,
            "hasliked": 0,
            "id": "ft23DK",
            "likes": 28,
            "name": "That Thing Under Abstraction",
            "published": 3,
            "tags": [
                "bonzomatic",
                "liveshader",
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 561
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax,p)*ax,p,cos(ro))+cross(ax,p)*sin(ro);\n}\n\nfloat comp(vec3 p) {\n  p = asin(sin(p*8.)*.99)/8.;\n  return dot(p,normalize(vec3(3,2,1)));\n}\n\nfloat d1,d2,d3;\nfloat stuff(vec3 p) {\n  d1 = comp(erot(p, normalize(vec3(1,2,3)), .7)+.3);\n  d2 = comp(erot(p, normalize(vec3(1,3,2)), 1.6)+.6);\n  d3 = comp(erot(p, normalize(vec3(3,-2,1)), .4)+.8);\n  return (d1+d2+d3)/2.5;\n}\n\nfloat ball;\nfloat scene(vec3 p) {\n  vec3 p3 = p;\n  p3.xy = asin(sin(p3.xy*3.))/3.;\n  ball = length(p3)-.5+sin(iTime*9.+length(sin(p)))*.02;\n  p3.xy = asin(sin(p3.xy*8.))/8.;\n  ball = min(ball, length(p3)-.2+sin(iTime*13.)*.01);\n  //ball += length(sin(p*100)/800);\n  ball += length(sin(p*20.)/50.);\n  ball += length(cos(p*10.)/80.);\n  ball += length(sin(erot(p,normalize(vec3(2,3,4)),2.4)*150.)/700.);\n  //ball += length(sin(erot(p,normalize(vec3(3,1,-4)),1.4)*200)/800);\n  return min(stuff(p) + p.z*.1, ball);\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.001);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat bps = 32./10.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  float rr = .9;\n  vec4 past = texture(iChannel0,uv + sin(mat2(cos(rr),-sin(rr),sin(rr),cos(rr))*uv*30.+cos(uv))*.001);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  float bar = floor(iTime*bps);\n  float lastbigbar = floor((iTime-iTimeDelta)*bps/4.);\n  float bigbar = floor(iTime*bps/4.);\n  float res = iTime - bigbar;\n  if (lastbigbar != bigbar) past.w = .15;\n\n\tvec3 cam = normalize(vec3(3.+sin(bigbar) + cos(res)*.3,uv));\n  vec3 init = vec3(-3,0,0);\n  \n  bool camtype1 = sin(bigbar*3.) < 0.;\n  bool camtype2 = cos(bigbar*7.) < 0.;\n  bool camtype3 = sin(bigbar*9.) < 0.;\n  bool camtype4 = sin(bigbar*2.) < 0.;\n  \n  float zrot = camtype1 ? 0. : iTime*.1;\n  float yrot = .5;\n  cam = erot(cam,vec3(0,1,0),yrot);\n  init = erot(init,vec3(0,1,0),yrot);\n  cam = erot(cam,vec3(0,0,1),zrot);\n  init = erot(init,vec3(0,0,1),zrot);\n  init.z += 1.;\n  float sgn = camtype3 ? -1. : 1.;\n  if (camtype1) init.x += sgn*mod(iTime,100.)*.2;\n  if (camtype2) init.y += sgn*mod(iTime,100.)*.2;\n  \n  vec3 p = init;\n  bool hit = false;\n  float atten = 1.;\n  float dist;\n  for (int i = 0; i < 100; i++) {\n    dist = scene(p);\n    hit = dist*dist < 1e-7;\n    p += cam*dist;\n    \n    if (hit) {\n      if (abs(sin(d1*40.))<.2 && dist != ball) {\n        vec3 n = norm(p);\n        \n        float fres = 1.-abs(dot(cam,n))*.98;\n        cam = reflect(cam,n);\n        atten *= fres;\n        p += n*.01;\n        hit = false;\n      } else {\n        break;\n      }\n    }\n    if (distance(p,init)>10.)break;\n  }\n  \n  bool isball = ball == dist;\n  float fog = smoothstep(1.,10.,distance(p,init));\n  float sd1 = d1;\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  float ao = smoothstep(-.1,.1,scene(p+n*.3));\n  float fact = length(sin(r*3.)*.5+.5)/sqrt(3.)*ao;\n  float diff = length(sin(n*3.)*.5+.5)/sqrt(3.)*ao;\n  float fres = 1.-abs(dot(cam,n))*.98;\n  float spec = (pow(fact,8.)*4.+fact*.2)*fres;\n  vec3 diffcol = isball ? (camtype4? vec3 (.5,.01,.1) :vec3 (.2,.01,.2) ): vec3(0);\n  vec3 col = diff*diffcol + spec;\n  col = mix(col, vec3(0.01), fog);\n  fragColor.xyz = (hit ? col : vec3(0.01))*atten + vec3(0.02,0.01,.04);\n  float pre = length(fragColor.xyz);\n  pre = mix(pre, past.w,.98);\n  float vig = 1.-dot(uv,uv)*.5;\n  fragColor += pre;\n  fragColor = sqrt(smoothstep(0.,1.4,fragColor))*vig;\n  mat3 desat = mat3(vec3(.1),vec3(.1),vec3(.1))+mat3(.7);\n  mat3 sat = inverse(desat);\n  fragColor.xyz *= sat;\n  fragColor.xyz *= sat;\n  fragColor.a = pre;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}