{
    "Shader": {
        "info": {
            "date": "1559641972",
            "description": "Day/night, inside/outside views (mouse in small window to select view)",
            "flags": 0,
            "hasliked": 0,
            "id": "Wlj3DD",
            "likes": 14,
            "name": "Palace on the Hill",
            "published": 3,
            "tags": [
                "raymarch",
                "cloud",
                "architecture",
                "building"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 614
        },
        "renderpass": [
            {
                "code": "// \"Palace on the Hill\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nbool HexNeb (vec2 a, vec2 b);\nvec2 SSBump (float w, float s, float x);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Minv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit, bSize, drSize;\nvec2 gId, hillPos;\nfloat tCur, dstFar, baseHt, wallThk, hgSize, drAng, hillRad;\nint idObj;\nbool isShad, isNt;\nconst int idWall = 1, idFlr = 2, idRoof = 3, idWbar = 4, idChim = 5, idDoor = 6,\n   idRail = 7, idLmp = 8, idTabl = 9, idGrnd = 10;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat BldDf (vec3 p)\n{\n  vec3 q, pAbs, pMod;\n  float dMin, d, twrRad, dWin, dTwr, dDoor, rUp, rRad;\n  twrRad = 0.5;\n  pMod = vec3 (mod (p.xz + 0.5, 1.) - 0.5, mod (p.y, bSize.y) - 0.5 * bSize.y).xzy;\n  pAbs = abs (vec3 (p.xz, pMod.y - 0.1).xzy) - bSize;\n  dMin = dstFar;\n  q = p;\n  d = max (PrBoxAn2Df (q.xz, bSize.xz, wallThk), abs (q.y - bSize.y) - bSize.y);\n  dDoor = PrBox2Df ((q - vec3 (0., bSize.y - 1.05, 0.)).xy, drSize.xy);\n  d = max (d, - dDoor);\n  dWin = abs (q.y - bSize.y) - bSize.y;\n  q = vec3 (pMod.xz, pMod.y - 0.1).xzy;\n  dWin = max (dWin, min (max (PrBox2Df (q.xy, vec2 (0.2, 0.6)), pAbs.x + 0.7),\n     max (PrBox2Df (q.zy, vec2 (0.2, 0.6)), pAbs.z + 0.7)));\n  d = max (d, - dWin);\n  dTwr = twrRad + 0.5 * wallThk - length (pAbs);\n  d = max (d, dTwr);\n  DMIN (idWall);\n  q = vec3 (pAbs.xz, p.y).xzy;\n  d = PrCylAnDf ((q - vec3 (0., bSize.y + 0.25, 0.)).xzy, twrRad, 0.07, bSize.y + 0.25);\n  q.y = pMod.y - 0.1;\n  d = max (d, - min (PrBox2Df (q.xy, vec2 (0.08, 0.6)), PrBox2Df (q.zy, vec2 (0.08, 0.6))));\n  DMIN (idWall);\n  q = p;\n  q.y = pMod.y - 0.1;\n  d = max (min (length (vec2 (pAbs.z, q.y)) - 0.3 * wallThk,\n     max (length (vec2 (pMod.x, pAbs.z)) - 0.3 * wallThk, pAbs.y)), pAbs.x + 0.7);\n  d = max (d, - dDoor);\n  d = min (d, max (min (length (vec2 (pAbs.x, q.y)) - 0.3 * wallThk,\n     max (length (vec2 (pAbs.x, pMod.z)) - 0.3 * wallThk, pAbs.y)), pAbs.z + 0.7));\n  d = max (d, abs (p.y - bSize.y) - bSize.y);\n  DMIN (idWbar);\n  q = p;\n  q.y = mod (p.y - 0.5 * wallThk + 0.5 * (bSize.y - 0.5 * wallThk),\n     bSize.y - 0.5 * wallThk) - 0.5 * (bSize.y - 0.5 * wallThk);\n  d = PrBoxDf (q, vec3 (bSize.xz, 0.5 * wallThk).xzy);\n  d = max (max (d, - max (PrBox2Df (q.xz, bSize.xz - 1.1), abs (p.y - bSize.y) - 0.2)), dTwr);\n  DMIN (idFlr);\n  rRad = 12.;\n  rUp = rRad - 0.721 + 0.01;\n  q = p;\n  q.y -= 2. * bSize.y - rUp;\n  d = min (PrCylDf (q.yzx, rRad, bSize.x + wallThk), PrCylDf (q, rRad, bSize.z + wallThk));\n  d = max (max (d, rUp - q.y), dTwr);\n  DMIN (idRoof);\n  q = vec3 (pAbs.xz, p.y - 2. * bSize.y - 0.9).xzy;\n  d = 0.7 * PrCylDf (q.xzy, (twrRad + 0.07) * (0.6 - 0.4 * q.y / 0.4), 0.4);\n  DMIN (idRoof);\n  q = p;\n  q.y -= 2. * bSize.y + 0.8;\n  d = min (PrBoxDf (q, vec3 (bSize.x + wallThk, 0.1, 0.2)),\n     PrBoxDf (q, vec3 (0.2, 0.1, bSize.z + wallThk)));\n  DMIN (idChim);\n  q.y -= 0.3;\n  q.xz = pMod.xz;\n  d = PrCylAnDf (q.xzy, 0.13, 0.05, 0.2);\n  q.xz = abs (p.xz);\n  d = max (d, max (min (q.x, q.z) - 0.5, 0.5 - min (bSize.x - q.x, bSize.z - q.z)));\n  DMIN (idChim);\n  q = vec3 (pAbs.x + bSize.x - drSize.x + 0.02, p.y - bSize.y + 1.05, pAbs.z - 0.5 * wallThk);\n  q.xz = Rot2D (q.xz, - drAng);\n  q.x -= 0.5 * drSize.x - 0.016;\n  d = PrRoundBoxDf (q, vec3 (0.5 * drSize.x - 0.005, drSize.y - 0.01, drSize.z), 0.005);\n  DMINQ (idDoor);\n  rRad = 0.02;\n  q = p;\n  q.y -= bSize.y + 0.4;\n  d = min (PrCylDf (vec3 (pAbs.x + 1., q.yz), rRad, bSize.z - 1.),\n     PrCylDf (vec3 (q.xy, pAbs.z + 1.).yzx, rRad, bSize.x - 1.));\n  q.xz = mod (q.xz + 0.25, 0.5) - 0.25;\n  q.y -= -0.2;\n  d = min (d, max (PrCylDf (q.xzy, rRad, 0.2), PrBoxAn2Df (p.xz, bSize.xz - 1., 0.1)));\n  DMIN (idRail);\n  rRad = 0.15;\n  q = p;\n  q.y -= 2. * bSize.y - wallThk - rRad;\n  q.xz = abs (abs (q.xz) - 0.5 * bSize.xz) - 1.5 * rRad;\n  d = PrSphDf (q, rRad);\n  DMIN (idLmp);\n  q = p;\n  q.xz = abs (abs (q.xz) - 0.5 * bSize.xz);\n  q.y -= 0.62;\n  d = PrCylDf (q.xzy, 0.3, 0.02);\n  q.y -= -0.32;\n  d = min (d, PrCylDf (q.xzy, 0.03, 0.3));\n  q.y -= 0.4;\n  d = min (d, PrCylDf (q.xzy, 0.01, 0.1));\n  DMIN (idTabl);\n  q.y -= 0.1;\n  d = PrSphDf (q, 0.3 * rRad);\n  DMIN (idLmp);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 cId, rr;\n  float dMin, d, r;\n  q = p;\n  q.y -= baseHt;\n  if (! isShad) d = PrBoxDf (q + vec3 (0., - bSize.y, 0.), bSize + vec3 (1., 1.6, 1.));\n  dMin = (isShad || d < 0.1) ? BldDf (q) : d;\n  if (! isShad) {\n    q = p;\n    q.y -= -0.005;\n    q.y -= 5.01 * (1. - smoothstep (12., 28., length (q.xz)));\n    d = 0.8 * PrCylDf (q.xzy, 32., 0.001);\n    DMIN (idGrnd);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat HillDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  if (length (gId) == 0. || HexNeb (gId, vec2 (0.))) d = dstFar;\n  else {\n    q = p;\n    q.xz -= HexToPix (gId * hgSize) + hillPos;\n    q.y += hillRad * smoothstep (0., hillRad, length (q.xz));\n    d = PrCylDf (q.xzy, hillRad, hillRad);\n  }\n  return d;\n}\n\nvoid SetHillConf ()\n{\n  vec2 rr;\n  rr = Hashv2v2 (gId);\n  hillRad = 0.4 * hgSize * (1. - 0.5 * length (rr));\n  hillPos = (0.7 * hgSize * rr.x - hillRad) * sin (2. * pi * rr.y + vec2 (0.5 * pi, 0.));\n}\n\nfloat HillRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, tol;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  tol = 0.0005;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetHillConf ();\n    }\n    d = HillDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + 0.002;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < tol || dHit > dstFar || p.y < 0. || rd.y > 0. && p.y > 20.) break;\n  }\n  if (d >= tol) dHit = dstFar;\n  return dHit;\n}\n\nvec3 HillNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (- HillDf (p + e.xxx), HillDf (p + e.xyy), HillDf (p + e.yxy), HillDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, rds, mDir, vn, clCol;\n  vec2 q;\n  float mRad, bs, ts, f, ff, fd;\n  if (isNt) {\n    rd.xz = Rot2D (rd.xz, 0.001 * tCur);\n    mDir = normalize (vec3 (0., 0.1, -1.));\n    mRad = 0.02;\n    col = vec3 (0.02, 0.02, 0.04) + vec3 (0.06, 0.04, 0.02) *\n       pow (clamp (dot (rd, mDir), 0., 1.), 16.);\n    bs = dot (rd, mDir);\n    ts = bs * bs - dot (mDir, mDir) + mRad * mRad;\n    if (ts > 0.) {\n      ts = bs - sqrt (ts);\n      if (ts > 0.) {\n        vn = normalize ((ts * rd - mDir) / mRad);\n        col += 0.8 * vec3 (1., 0.9, 0.5) * clamp (dot (vec3 (-0.77, 0.4, 0.5), vn) *\n           (1. - 0.3 * Noisefv3 (4. * vn)), 0., 1.);\n      }\n    } else {\n      rds = floor (2000. * rd);\n      rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n      for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n      col += 0.5 * smoothstep (0.01, 0.04, rd.y) * vec3 (0.8, 0.8, 0.6) *\n         min (1., 0.5e-3 * pow (min (6., length (rds)), 5.));\n    }\n  } else {\n    rd.y = abs (rd.y) + 0.0001;\n    q = 0.02 * (ro.xz + tCur + ((50. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.7, 0.7, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol, 0.1 + 0.9 * f * fd);\n  }\n  return col;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  isShad = true;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat TxPattern (vec3 p)\n{\n  float t, tt, c;\n  p = abs (0.5 - fract (4. * p));\n  c = 0.;\n  t = 0.;\n  for (float j = 0.; j < 6.; j ++) {\n    p = abs (p + 3.) - abs (p - 3.) - p;\n    p /= clamp (dot (p, p), 0., 1.);\n    p = 3. - 1.5 * p;\n    if (mod (j, 2.) == 0.) {\n      tt = t;\n      t = length (p);\n      c += exp (-1. / abs (t - tt));\n    }\n  }\n  return c;\n}\n\nvec4 BldCol (vec3 ro, vec3 vn, bool inRoom)\n{\n  vec4 col4;\n  vec2 q;\n  float f;\n  q = abs (ro.xz) - bSize.xz;\n  f = max (q.x, q.y);\n  if (idObj == idWall) {\n    q = vec2 (abs (ro.x), abs (ro.y - baseHt - bSize.y + 1.05)) - drSize.xy;\n    if (max (q.x, q.y) < 0.05) {\n      col4 = vec4 (0.4, 0.2, 0.1, 0.1);\n    } else if (f > 0.9 * wallThk) {\n      col4 = vec4 (1., 1., 1., 0.2);\n      q = SSBump (0.2 * wallThk, 0.5 * wallThk,\n         mod (ro.y - baseHt - 0.5 * wallThk + 0.5 * (bSize.y - 0.5 * wallThk),\n         bSize.y - 0.5 * wallThk) - 0.5 * (bSize.y - 0.5 * wallThk));\n      if (q.x + q.y != 0.) {\n        vn.y += 0.2 * (q.y - q.x);\n        vn = normalize (vn);\n        col4.rgb *= dot (q, vec2 (0.8, 1.1));\n      }\n    } else if (f < -0.9 * wallThk) {\n      col4 = vec4 (0.9, 1., 0.9, 0.2);\n      q = abs (abs (mod (ro.xz + 0.5, 1.) - 0.5) - 0.46);\n      if (abs (vn.z) > 0.99 && (abs (ro.x) > 1. || ro.y - baseHt > bSize.y))\n         col4.rgb *= 0.5 + 0.5 * smoothstep (0.01, 0.02, q.x);\n      if (abs (vn.x) > 0.99) col4.rgb *= 0.5 + 0.5 * smoothstep (0.01, 0.02, q.y);\n    } else {\n      col4 = vec4 (0.9, 0.9, 0.9, 0.2);\n    }\n  } else if (idObj == idFlr) {\n    col4 = vec4 (0.8, 0.5, 0.3, 0.2);\n    if (abs (ro.y - baseHt - bSize.y) > 0.5 * bSize.y) {\n      if (vn.y > 0.99) {\n        col4 = mix (col4, vec4 (0.4, 0.3, 0.1, 0.), Fbm2 (vec2 (4., 32.) *\n           ro.xz)) * (0.6 + 0.4 * smoothstep (0.03, 0.08, mod (8. * ro.z + 0.5, 1.)));\n      } else if (vn.y < -0.99) {\n        col4 = vec4 (vec3 (0., 0., 1.), 0.2);\n        if (f < -0.21)\n          col4 = vec4 (mix (col4.rgb, vec3 (1., 1., 0.3), step (1.7, TxPattern (0.5 * ro))), 0.2);\n      }\n    } else if (abs (vn.y) < 0.01) {\n      col4 *= 1.5;\n    }\n   } else if (idObj == idRoof) {\n    if (vn.y > 0.1) {\n      col4 = vec4 (0.8, 0.8, 0.7, 0.3);\n    } else {\n      col4 = vec4 (1., 1., 1., 0.2);\n      f = 0.;\n      if (abs (vn.z) > 0.99) q = ro.xy;\n      else if (abs (vn.x) > 0.99) q = ro.zy;\n      else f = 99.;\n      if (f == 0.) {\n        f = abs (length (q - vec2 (0., 2. * bSize.y + baseHt + 0.34)) - 0.24);\n        if (f < 0.04) col4 = isNt ? vec4 (0.8, 0.8, 0.6, -1.) : vec4 (0.8, 0.8, 0., 0.5);\n      }\n    }\n  } else if (idObj == idChim) {\n    col4 = vec4 (0.7, 0.7, 0.75, 0.2);\n  } else if (idObj == idWbar) {\n    col4 = vec4 (0.4, 0.5, 0.3, 0.2);\n  } else if (idObj == idDoor) {\n    if (length (qHit.xy - vec2 (drSize.x - 0.4, -0.1)) < 0.05) col4 = vec4 (0.8, 0.8, 0., 0.3);\n    else col4 = (0.6 + 0.4 * smoothstep (0.03, 0.08, mod (12. * qHit.x + 0.5, 1.))) *\n       mix (vec4 (0.7, 0.5, 0.2, 0.2), vec4 (0.5, 0.25, 0.1, 0.1),\n       Fbm2 (vec2 (24., 4.) * qHit.xy));\n  } else if (idObj == idRail) {\n    col4 = vec4 (0.8, 0.8, 0.5, 0.3);\n  } else if (idObj == idLmp) {\n    col4 = vec4 (1., 1., 0.8, -1.);\n  } else if (idObj == idTabl) {\n    col4 = vec4 (0.7, 0.4, 0.1, 0.2);\n  }\n  return col4;\n}\n\nvec3 BldIntLit (vec4 col4, vec3 ro, vec3 vn, float sh)\n{\n  vec3 col, ltDir;\n  float dif, att, f;\n  if (idObj != idFlr) {\n    dif = 0.;\n    for (float sx = -1.; sx <= 1.; sx += 2.) {\n      for (float sz = -1.; sz <= 1.; sz += 2.) {\n        ltDir = vec3 (0.5 * sx * bSize.x, 2. * bSize.y + baseHt - 0.2, 0.5 * sz * bSize.z) - ro;\n        att = length (ltDir);\n        if (att > 0.) ltDir /= att;\n        dif = max (dif, max (dot (vn, ltDir), 0.) / (1. + 0.1 * att * att));\n      }\n    }\n    col = col4.rgb * (0.1 + 0.8 * dif);\n  } else {\n    col = 0.15 * col4.rgb;\n    f = length (abs (ro.xz) - 0.5 * bSize.xz);\n    if (vn.y > 0.99) col = col * (1.5 - 0.5 * smoothstep (1., 2., f)) * \n       (0.8 + 0.2 * smoothstep (0.35, 0.4, f)) + 0.2 * sh;\n    else if (vn.y < -0.99 && ro.y > baseHt + 2. * bSize.y - 0.3)\n       col = 1.3 * col * (2. - smoothstep (1., 2., f));\n  }\n  return col;\n}\n\nvec3 BldExtLit (vec4 col4, vec3 ro, vec3 rd, vec3 vn, float sh)\n{\n  vec3 col, ltDir;\n  float dif, att;\n  if (! isNt) {\n    dif = max (dot (vn, sunDir), 0.);\n    col = col4.rgb * (0.2 + 0.2 * max (dot (vn, - normalize (vec3 (sunDir.xz, 0.).xzy)), 0.) +\n       0.7 * sh * dif) + col4.a * sh * smoothstep (0., 0.1, dif) *\n       pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else {\n    dif = 0.;\n    for (float sx = -1.; sx <= 1.; sx += 1.) {\n      for (float sz = -1.; sz <= 1.; sz += 2.) {\n        ltDir = vec3 (sx * (bSize.x + 2.), baseHt + 1., sz * (bSize.z + 3.)) - ro;\n        att = length (ltDir);\n        if (att > 0.) ltDir /= att;\n        dif = max (dif, max (dot (vn, ltDir), 0.) / (1. + 0.01 * att * att));\n      }\n    }\n    col = 0.7 * col4.rgb * (0.2 + 0.8 * dif);\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, gCol, vn, roo;\n  vec2 q, vf;\n  float dstObj, dstHill, sh, f, fogHt;\n  bool isGrnd, isBg, inRoom;\n  int idObjT;\n  hgSize = 40.;\n  wallThk = 0.08;\n  drSize = vec3 (0.6, 0.85, 0.25 * wallThk);\n  drAng = pi + 0.5 * pi * smoothstep (0., 1.5, 3.5 - length (vec2 (ro.x, abs (ro.z) - bSize.z)));\n  roo = ro;\n  isGrnd = false;\n  isBg = false;\n  isShad = false;\n  dstObj = ObjRay (ro, rd);\n  dstHill = HillRay (ro, rd);\n  gCol = vec3 (0.2, 0.5, 0.3) * (isNt ? 0.05 : 1.);\n  inRoom = false;\n  vf = vec2 (0.);\n  if (min (dstObj, dstHill) < dstFar) {\n    if (dstObj < dstHill) {\n      ro += dstObj * rd;\n      gCol *= 0.7 + 0.3 * Fbm2 (2. * ro.xz);\n      vn = ObjNf (ro);\n      if (idObj == idGrnd) {\n        col = vec3 (0.5, 0.4, 0.2) * (0.6 + 0.4 * Fbm2 (32. * ro.xz)); \n        f = smoothstep (0., 1., PrRoundBox2Df (ro.xz, bSize.xz + vec2 (1., 2.), 1.));\n        if (f > 0.) {\n          vn.xz = Rot2D (vn.xz, 0.3 * pi * f * Fbm2 (32. * vec2 (sin (atan (ro.z, - ro.x)) + 1.,\n             0.03 * ro.y)));\n          gCol = mix (col * (isNt ? 0.4 : 1.), gCol, f);\n          isGrnd = true;\n        } else vf = vec2 (64., 0.5);\n        col4 = vec4 (col, 0.);\n      } else {\n        q = abs (ro.xz) - bSize.xz;\n        f = max (q.x, q.y);\n        inRoom = (idObj != idDoor && f < 0. && ro.y < baseHt + 2. * bSize.y ||\n           idObj == idDoor && qHit.z > 0.);\n        col4 = BldCol (ro, vn, inRoom);\n        q = abs (ro.xz) - bSize.xz;\n        f = max (q.x, q.y);\n        if (idObj == idWall) {\n          q = vec2 (abs (ro.x), abs (ro.y - baseHt - bSize.y + 1.05)) - drSize.xy;\n          if (max (q.x, q.y) > 0.05 && f > 0.9 * wallThk) vf = vec2 (64., 0.5);\n        } else if (idObj == idRoof && vn.y < 0.1) vf = vec2 (64., 0.5);\n      }\n    } else if (dstHill < dstFar) {\n      ro += dstHill * rd;\n      gCol *= 0.7 + 0.3 * Fbm2 (2. * ro.xz);\n      gId = PixToHex (ro.xz / hgSize);\n      SetHillConf ();\n      vn = HillNf (ro);\n      q = ro.xz - HexToPix (gId * hgSize) - hillPos;\n      vn.xz = Rot2D (vn.xz, 0.03 * pi * dot (sin (vec2 (13., 23.) *\n         (pi * Hashfv2 (gId) + atan (q.y, - q.x))), vec2 (1.)));\n      isGrnd = true;\n    }\n  } else {\n    if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n      col = isNt ? vec3 (0.07) : mix (vec3 (0.4, 0.5, 0.7), vec3 (0.3, 0.41, 0.55), \n         smoothstep (-0.02, 0.01, rd.y));\n      isBg = true;\n    } else if (rd.y >= 0.) {\n      col = SkyCol (ro, rd);\n      isBg = true;\n    } else {\n      ro += (- ro.y / rd.y) * rd;\n      gCol *= 0.7 + 0.3 * Fbm2 (2. * ro.xz);\n      vn = vec3 (0., 1., 0.);\n      isGrnd = true;\n    }\n  }\n  if (! isBg) {\n    if (col4.a < 0.) {\n      col = col4.rgb * max (0.6 - 0.4 * dot (rd, vn), 0.); \n    } else {\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      sh = 1.;\n      if (! isNt) {\n        if (dstObj < min (dstHill, dstFar) && (idObj != idGrnd || ro.y > 0.1 || rd.y < 0.)) {\n          idObjT = idObj;\n          sh = ObjSShadow (ro, sunDir);\n          idObj = idObjT;\n        }\n      }\n      if (inRoom) col = BldIntLit (col4, ro, vn, sh);\n      else if (! isGrnd) col = BldExtLit (col4, ro, rd, vn, sh);\n      else if (isNt) col = gCol;\n      else {\n        gCol *= 0.5 + 0.5 * smoothstep (baseHt - 3., baseHt - 0.1, ro.y);\n        col = gCol * (0.2 + 0.3 * max (dot (vn, - normalize (vec3 (sunDir.xz, 0.))), 0.) +\n           0.7 * sh * max (dot (vn, sunDir), 0.));\n        col = mix (col, vec3 (0.4, 0.5, 0.7) - 0.05, smoothstep (0.7, 1., length (ro) / dstFar));\n      }\n    }\n  }\n  fogHt = baseHt - 0.5;\n  if (ro.y < fogHt) {\n    f = Fbm2 (0.1 * (roo.xz + ((fogHt - roo.y) / rd.y) * rd.xz + 1.5 * tCur));\n    col = mix (col, (isNt ? vec3 (0.1) + 0.1 * f : vec3 (0.7, 0.65, 0.7) + 0.2 * f),\n       (1. - smoothstep (fogHt - 2., fogHt, ro.y)) *\n       clamp (f * (1. - smoothstep (-0.05, -0.001, rd.y)), 0., 1.));\n    if (ro.y < 0.001) col = mix (col, (isNt ? vec3 (0.1) : vec3 (0.4, 0.5, 0.8) + 0.02),\n       smoothstep (-0.05, -0.001, rd.y));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa, mMid, ut, mSize, ms, tu;\n  float el, az, asp, zmFac, tCyc, t, tt, ti, s, regId, winHt, sr, rz;\n  bool mMove;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  winHt = 0.85;\n  mSize = (1./5.) * vec2 (asp, 1.) * winHt;\n  mMid = vec2 (asp, winHt - mSize.y) * vec2 (1. - mSize.y, -1.);\n  ut = abs (uv - mMid) - mSize;\n  mMove = true;\n  if (max (ut.x, ut.y) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    mMove = ! mMove;\n  }\n  regId = 0.;\n  ms = mPtr.xy + 0.5 * vec2 (1., winHt);\n  if (ms.x > 1. - mSize.x / asp && abs (ms.y - 0.5 * mSize.y) < 0.5 * mSize.y) regId = 1.;\n  if (abs (mPtr.y) > 0.5 * winHt) regId = -1.;\n  tCyc = 100.;\n  isNt = (mod (tCur, 2. * tCyc) > tCyc);\n  if (mPtr.z > 0. && regId == 1.) {\n    if (ms.x > 1. - 0.5 * mSize.x / asp) mMove = ! mMove;\n    if (ms.y < 0.5 * mSize.y) isNt = ! isNt;\n  }\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && regId == 0.) {\n    az = 3. * pi * mPtr.x;\n    el = pi * mPtr.y;\n    if (! mMove) {\n      el -= -0.05 * pi;\n      el = clamp (el, -0.4 * pi, 0.01 * pi);\n    }\n  } else {\n    if (! mMove) {\n      az = -0.4 * (floor (0.3 * tCur) + smoothstep (0., 0.1, mod (0.3 * tCur, 1.)));\n      el = -0.05 * pi;\n    }\n  }\n  baseHt = 5.;\n  bSize = vec3 (8., 2., 4.);\n  if (mMove) {\n    t = (4. / tCyc) * mod (tCur, tCyc);\n    az += pi * step (2., t);\n    ti = mod (t, 1.);\n    s = (t <= 2.) ? 1. : -1.;\n    tt = (smoothstep (0.25, 0.75, ti) - step (min (abs (t - 0.5), abs (t - 2.5)), 0.5)) * s;\n    ro = vec3 (0., baseHt + 1.4, 15. * tt);\n    rz = abs (ro.z) / bSize.z - 1.;\n    if (rz > 0.) ro.y += 0.4 * rz * rz;\n    tu = vec2 (0.75 - ti, ti - 0.25);\n    tu *= step (tu, vec2 (0.));\n    if (tt == 0.) az -= 4. * pi * (tu.x - tu.y) * s;\n    else if (abs (tt) == 1.) az -= 2. * pi * (tu.x + tu.y) * s;\n    if (tt == 0.) el += 0.2 * (0.5 * pi - abs (0.5 * pi - mod (az, pi)));\n    el = clamp (el, -0.2 * pi, 0.2 * pi);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  sunDir = normalize (vec3 (-1., 0.5, -1.));\n  if (mMove) {\n    zmFac = 2.;\n    sunDir.xz = Rot2D (sunDir.xz, 0.1 * tCur);\n  } else {\n    ro = vuMat * vec3 (0., baseHt + 1., -50.);\n    zmFac = 3.6;\n    sunDir = vuMat * sunDir;\n  }\n  dstFar = 400.;\n  col = vec3 (0.);\n  if (abs (uvs.y) < winHt) {\n#if ! AA\n    const float naa = 1.;\n#else\n    const float naa = 3.;\n#endif  \n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = 0.; a < naa; a ++) {\n      rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n         sr * (0.667 * a + 0.5) * pi), zmFac));\n      col += (1. / naa) * ShowScene (ro, rd);\n    }\n  }\n  if (max (ut.x, ut.y) < 0.) {\n    if (min (abs (ut.x), abs (ut.y)) * canvas.y < 2.) col = vec3 (0.2, 0.2, 0.1);\n    else if (mPtr.z > 0. && regId == 1. && (min (abs (ut.x + mSize.x),\n       abs (ut.y + mSize.y)) * canvas.y < 1.)) col = vec3 (0.3, 0.3, 0.1);\n\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w)\n{\n  return max (PrBox2Df (p, vec2 (b + w)), - PrBox2Df (p, vec2 (b - w)));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nbool HexNeb (vec2 a, vec2 b)\n{\n  vec2 d = a - b;\n  return (d.x == 0. && abs (d.y) == 1. || abs (d.x) == 1. && d.y == 0. ||\n    d.x * d.y == -1.);\n}\n\nvec2 SSBump (float w, float s, float x)\n{\n  return vec2 (step (x + s, w) * step (- w, x + s), step (x - s, w) * step (- w, x - s));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (p + vec3 (37., 39., 41.)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}