{
    "Shader": {
        "info": {
            "date": "1608632576",
            "description": "Approximations for the Bessel functions J0 and J1 and the Struve functions H0 and H1.\nhttps://en.wikipedia.org/wiki/Bessel_function\nhttps://en.wikipedia.org/wiki/Struve_function",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt3czM",
            "likes": 8,
            "name": "Bessel J0/J1 + Struve H0/H1",
            "published": 3,
            "tags": [
                "approximation",
                "bessel"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\n    Approximations for the Bessel functions J0 and J1 and the Struve functions H0 and H1.\n    https://en.wikipedia.org/wiki/Bessel_function\n    https://en.wikipedia.org/wiki/Struve_function\n*/\n\n// https://link.springer.com/article/10.1007/s40314-020-01238-z\nfloat BesselJ0(float x)\n{\n    float xx = x * x;\n    float lamb = 0.865;\n    float q    = 0.7172491568;\n    float p0   = 0.6312725339;\n    float ps0  = 0.4308049446;\n    float p1   = 0.3500347951;\n    float ps1  = 0.4678202347;\n    float p2   =-0.06207747907;\n    float ps2  = 0.04253832927;\n\n    float lamb4 = (lamb * lamb) * (lamb * lamb);\n    float t0 = sqrt(1.0 + lamb4 * xx);\n    float t1 = sqrt(t0);\n    \n    return xx == 0.0 ? 1.0 : 1.0/(t1 * (1.0 + q * xx)) * ((p0 + p1*xx + p2*t0) * cos(x) + ((ps0 + ps1*xx) * t0 + ps2*xx) * (sin(x)/x));\n}\n\n// https://www.sciencedirect.com/science/article/pii/S2211379718300111\nfloat BesselJ1(float x)\n{\n    float xx = x * x;\n\n    return (sqrt(1.0 + 0.12138 * xx) * (46.68634 + 5.82514 * xx) * sin(x) - x * (17.83632 + 2.02948 * xx) * cos(x)) /\n           ((57.70003 + 17.49211 * xx) * pow(1.0 + 0.12138 * xx, 3.0/4.0) );\n}\n\n// https://research.tue.nl/nl/publications/efficient-approximation-of-the-struve-functions-hn-occurring-in-the-calculation-of-sound-radiation-quantaties(c68b8858-9c9d-4ff2-bf39-e888bb638527).html\nfloat StruveH0(float x)\n{\n    float xx = x * x;\n\n    return BesselJ1(x) + 1.134817700  * (1.0 - cos(x))/x - \n                         1.0943193181 * (sin(x) - x * cos(x))/xx - \n                         0.5752390840 * (x * 0.8830472903 - sin(x * 0.8830472903))/xx;\n}\n\n// https://research.tue.nl/nl/publications/efficient-approximation-of-the-struve-functions-hn-occurring-in-the-calculation-of-sound-radiation-quantaties(c68b8858-9c9d-4ff2-bf39-e888bb638527).html\nfloat StruveH1(float x)\n{\n    const float pi = 3.14159265359;\n\n    float xx = x * x;\n\n    return 2.0/pi - BesselJ0(x) + 0.0404983827 * sin(x)/x + \n                                  1.0943193181 * (1.0 - cos(x))/xx - \n                                  0.5752390840 * (1.0 - cos(x * 0.8830472903))/xx;\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n\tvec2 uv = uv0 - 0.5;\n    uv0 += 0.0;\n    \n    vec2 tex = uv0;\n    tex -= iResolution.y * 0.5;\n    //tex /= iResolution.xx * 0.125;\n    tex *= vec2(64,8) / iResolution.x;\n\n    vec3 col = vec3(0.0);\n    \n\tcol = mix(vec3(1.0), vec3(0.9), Grid(tex.xy * 4.0, 0.0));        \n\tcol = mix(col, vec3(0.5), Grid(tex.xy * 1.0, 0.0));        \n\tcol = mix(col, vec3(0.125), Cross(tex.xy * 1.0, 0.)); \t\n    \n        \n    col = mix(col, vec3(1.0, 0.5, 0.0), Graph(StruveH1(tex.x) - tex.y, 0.5) * 0.75);\n    col = mix(col, vec3(0.0, 1.0, 0.5), Graph(StruveH0(tex.x) - tex.y, 0.5) * 0.75);\n    \n    col = mix(col, vec3(0.0, 0.5, 1.0), Graph(BesselJ1(tex.x) - tex.y, 0.5));       \n    col = mix(col, vec3(1.0, 0.0, 0.0), Graph(BesselJ0(tex.x) - tex.y, 0.5)); \n    //col = mix(col, vec3(0.0, 1.0, 0.0), Graph(Foo(tex.x) - tex.y, 0.5)); \n    \n    #if 1\n    vec2 s = (uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow2(s.x);    s.y = 1.0-Pow2(s.y);\n    col *= mix(1.0, 0.4, Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    \n    outCol = vec4(GammaEncode(clamp01(col)), 1.0);    \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define PixelCount iResolution.xy\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define rsqrt inversesqrt\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\nconst float Pi2  = Pi * 2.0;\nconst float RcpPi= 1.0 / Pi;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat ddxyLen(float v) { return length(vec2(dFdx(v), dFdy(v))); }\nfloat ddxyRcpLen(float v) { return rsqrt( Pow2(dFdx(v)) + Pow2(dFdy(v)) ); }\n\n\nfloat rescale(float v) { return v * ddxyRcpLen(v); }\n\nfloat Graph(float f, float b)\n{\n    return clamp01(1.0 - (abs(rescale(f))-0.5-b)); \n}\n\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * Pi), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    float xl = Lines(uv.x, b);    \n    float yl = Lines(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    float xl = Line(uv.x, b);    \n    float yl = Line(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Dot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v *= ddxyRcpLen(v);\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}