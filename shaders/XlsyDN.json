{
    "Shader": {
        "info": {
            "date": "1504881148",
            "description": "based on [url=https://www.shadertoy.com/view/4dyXWc]SSS Fractal[/url], subdensity perturbated by texture3D Noise",
            "flags": 0,
            "hasliked": 0,
            "id": "XlsyDN",
            "likes": 5,
            "name": "SSS Noisy Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "sss",
                "noisy"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 747
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nvec3 mat = vec3(1,0.26,0);\t\t\t\t\t\t\t\t\t\t\t// color material\n\nfloat fractus(vec3 p)\n{\n\tvec2 z = p.xz;\n    vec2 c = vec2(1,-1) * p.y; // evolutionn along axis y\n\tfloat k = 1., h = 1.0;\n\tconst float iter = 5.;\n    // julia fractal\n    for (float i=0.;i<iter;i++)\n    {\n        //if (i/iter > (sin(iTime*.5)*.5+.5)) break; // ucomment to see the differents iterations\n\t\th *= 4.*k;\n\t\tk = dot(z,z); \n        if(k > 4.) break;\n\t\tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n    }\n\treturn sqrt(k/h)*log(k);   \n}\n\nvec4 df(vec3 p)\n{\n\tp *= 0.3;\n\tfloat fr = fractus(p)*1.5;\t\t\t\t\t\t\t\t\t\t\t// 3d pattern\n    return vec4(fr, vec3(step(fr, 0.54)));\t\t\t\t\t\t\t// df, df color strip\n}\n\nvec4 dfH(vec3 p)\n{\n\tp *= 0.3;\n\tfloat fr = fractus(p)*1.5;\t\t\t\t\t\t\t\t\t\t\t// 3d pattern\n    fr -= textureLod(iChannel0, p*5.,1.).x*.2;\n\treturn vec4(fr, vec3(step(fr, 0.54)));\t\t\t\t\t\t\t// df, df color strip\n}\n\nvec3 nor( vec3 p , vec3 e)\n{\n\treturn normalize(vec3(\t\t\t\t\t\t\t\t\t\t\t// normalized differenciate value along x, y and z for get normal at surf point\n\t    df(p+e.xyy).x - df(p-e.xyy).x,\t\t\t\t\t\t\t\t// diffenrencial over x fo surf point\n\t    df(p+e.yxy).x - df(p-e.yxy).x,\t\t\t\t\t\t\t\t// diffenrencial over y fo surf point\n\t    df(p+e.yyx).x - df(p-e.yyx).x ));\t\t\t\t\t\t\t// diffenrencial over z fo surf point\n}\n\nvec3 norH( vec3 p , vec3 e)\n{\n\treturn normalize(vec3(\t\t\t\t\t\t\t\t\t\t\t// normalized differenciate value along x, y and z for get normal at surf point\n\t    dfH(p+e.xyy).x - dfH(p-e.xyy).x,\t\t\t\t\t\t\t\t// diffenrencial over x fo surf point\n\t    dfH(p+e.yxy).x - dfH(p-e.yxy).x,\t\t\t\t\t\t\t\t// diffenrencial over y fo surf point\n\t    dfH(p+e.yyx).x - dfH(p-e.yyx).x ));\t\t\t\t\t\t\t// diffenrencial over z fo surf point\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = norH(p,vec3( 0.01, 0, 0)); \t\t\t\t\t\t\t// precise normale at surf point\n\treturn df(p - n * s).x/s;\t\t\t\t\t\t\t\t\t\t// ratio between df step and constant step\n}\n\nvec2 shade(vec3 ro, vec3 rd, float d, vec3 lp, float li)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, vec3( 0.001, 0, 0));\t\t\t\t\t\t\t// normal at surface point\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat amb = 0.132; \t\t\t\t\t\t\t\t\t\t\t\t// ambiance factor\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\t\t// specular\n\tfloat sss = 1. - SubDensity(p, 1.); \t\t\t\t\t\t\t// sub density of df\n\treturn vec2(\n        (diff + fre + spe) * amb * li, \t\t\t\t\t\t\t\t// ambiant diffuse + fresenl + specular => out\n        (diff + fre + sss) * amb * li + spe \t\t\t\t\t\t// ambient diffuse + fresnel + subsurface => in\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 si = iResolution.xy;\t\t\t\t\t\t\t\t\t\t// size of the creen\n\n\tfloat time = iTime * 0.5;\t\t\t\t\t\t\t\t\t\t// time for cam\n\t\n    float cam_e = 0.; \t\t\t\t\t\t\t\t\t\t\t\t// cam elevation\n    float cam_d = 7.128; \t\t\t\t\t\t\t\t\t\t\t// cam distance to origin\n    \n    if (iMouse.z > 0.) \t\t\t\t\t\t\t\t\t\t\t\t// if mouse click on sreen\n    {\n        cam_d = 10. * iMouse.x/si.x;\t\t\t\t\t\t\t\t// cam distance range 0 to 10\n        cam_e = 5. * iMouse.y/si.y;\t\t\t\t\t\t\t\t\t// cam elevation range 0 to 5\n    }\n    \n    vec3 cu = vec3(0,1,0);\t\t\t\t\t\t\t\t\t\t\t// cam up\n  \tvec3 cv = vec3(0,0,0); \t\t\t\t\t\t\t\t\t\t\t// cam center view located on the center of the ball\n    \t\n    vec3 col = vec3(0.); \t\t\t\t\t\t\t\t\t\t\t// pixel color to out\n    \n    vec3 ro = vec3(-sin(time), sin(cam_e), cos(time))*cam_d; \t\t// ray origin\n\tvec3 lpi = vec3(-sin(time*2.), sin(cam_e), cos(time*2.))*2.;\t// light point in ball\n\n  \tvec3 rov = normalize(cv-ro);\t\t\t\t\t\t\t\t\t// dir from ray origin to cam view center => axis z\n    vec3 u = normalize(cross(cu,rov));\t\t\t\t\t\t\t\t// perpendicular dir to plane fromed by cam up and rov => axis x\n  \tvec3 v = cross(rov,u);\t\t\t\t\t\t\t\t\t\t\t// perpendicular dir to plane fromed by u and rov => axis y\n  \tvec2 uv = (fragCoord*2.-si)/si.y;\t\t\t\t\t\t\t\t\t\t// pixel coord in centered into the screen with screen ratio ( range -si.x/s.y to si.x/si.y for the x)\n    vec3 rd = normalize(rov + uv.x*u + uv.y*v);\t\t\t\t\t\t// ray dir of the current pixel in 3d\n    \n\tfloat md = 20.;\t\t\t\t\t\t\t\t\t\t\t\t\t// mas distance\n    float s = 1.;\t\t\t\t\t\t\t\t\t\t\t\t\t// ray marching step value ( radius of each sphere from df alogn ray marching)\n    float d = 0.;\t\t\t\t\t\t\t\t\t\t\t\t\t// distance from df to cam origine substepped by ray marching algo \n    for(int i=0;i<250;i++)\t\t\t\t\t\t\t\t\t\t\t// 250 iterations\n    {      \n        if (s<0.25*log(d*d/s/1e5)||s>md) break;\t\t\t\t\t\t// one break condition when we are close df or when we are far of the df\n        s = df(ro+rd*d).x;\t\t\t\t\t\t\t\t\t\t\t// radius of the sphere to df from ray point ( ro + rd *d => ray origin + ray direction * distance ) \n        d += s * 0.5;\t\t\t\t\t\t\t\t\t\t\t\t// sub stepping of the df for improved the float precision of the df on pc with double its not necessary\n    }\n    \n    if (d<md)\t\t\t\t\t\t\t\t\t\t\t\t\t\t// if distance ot the df is less than max distance, so ray dir is on df\n    {\n\t\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t// surf point\n\t\tcol = mix(\n            shade(p, rd, 1., lpi, 5.).y * mat, \t\t\t\t\t\t// interior lighting\n            shade(ro, rd, d, ro, 1.).x * (mat+0.5), \t\t\t\t// exterior lighting\n        0.8);// add shade for external reflectivity\n\n    }\n    \n\tfragColor.rgb = col;\t\t\t\t\t\t\t\t\t\t\t// write pixel color to the gpu buffer\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}