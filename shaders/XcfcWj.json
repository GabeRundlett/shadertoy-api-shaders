{
    "Shader": {
        "info": {
            "date": "1721568729",
            "description": "Uses some of iq's star SDFs and splatting to spawn a field of sparlkes.",
            "flags": 0,
            "hasliked": 0,
            "id": "XcfcWj",
            "likes": 3,
            "name": "Splat Sparkles",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "splat",
                "sparkle",
                "sparkles",
                "stplatting"
            ],
            "usePreview": 0,
            "username": "Nimphious",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "#define SPLAT_MULT 4\n\nvec2 rotateUV(in vec2 uv, in float rot) {\n    vec3 t = vec3(sin(rot), cos(rot), 0.0);\n    t.z = -t.x;\n    uv = t.yy * uv.xy + t.xz * uv.yx;\n    return uv;\n}\n\nvec3 sparkle(in vec2 p, in vec2 cell, in float phase) {\n    //vec2 uv = (p - 0.5) * 0.5;\n    vec2 uv = p - 1.0;\n\n    vec4 rand = hash43(vec3(cell, floor((phase + 1.0) / 2.0)));\n\n    float rot = rand.w + sign(rand.w - 0.5) * phase * 1.3;\n    //float rot = 0.0;\n\n    vec2 offset = rand.yz * 0.7;\n    uv = rotateUV(uv + offset, rot);\n\n    float size = rand.x;\n    float sizeMod = 0.5 * cos(phase * 3.14159265358979) + 0.5;\n    size *= sizeMod;\n\n\n    float d = sdStar(uv, 0.4 * size, 4.0, 0.6 - sizeMod * 0.3);\n\n\n    float star = smoothstep(-0.01, -0.02, d);\n    float glow = smoothstep(-0.1 + sizeMod * 0.2, -0.1, d) * 0.15;\n    vec3 col_a = hsl2rgb(fract(phase * 1.4), 1.0, 0.6);\n    vec3 col_b = vec3(1.0, 1.0, 1.0);\n    \n    vec3 col = mix(col_a, col_b, sizeMod);\n    \n    //return colorize(d);\n    return col * vec3(star + glow);\n}\n\nvec3 sparkleLayer(in vec2 uv, in vec2 vel) {\n    uv = uv + vel * iTime;\n\n    vec2 splatuv = fract(uv * float(SPLAT_MULT) / 2.0);\n    vec2 cell = floor(uv * float(SPLAT_MULT) / 2.0);\n    \n    vec3 cellRand = hash32(cell);\n    \n    float speed = 2.0;\n    \n    vec3 col = sparkle(splatuv, cell, speed * iTime + hash12(cell) * 4.0);\n    \n    col += sparkle(splatuv - vec2( 1, 0), cell + vec2( 1, 0), speed * iTime + hash12(cell + vec2( 1, 0)) * 4.0);\n    col += sparkle(splatuv - vec2(-1, 0), cell + vec2(-1, 0), speed * iTime + hash12(cell + vec2(-1, 0)) * 4.0);\n    col += sparkle(splatuv - vec2( 0, 1), cell + vec2( 0, 1), speed * iTime + hash12(cell + vec2( 0, 1)) * 4.0);\n    col += sparkle(splatuv - vec2( 0,-1), cell + vec2( 0,-1), speed * iTime + hash12(cell + vec2( 0,-1)) * 4.0);\n    \n    col += sparkle(splatuv - vec2( 1, 1), cell + vec2( 1, 1), speed * iTime + hash12(cell + vec2( 1, 1)) * 4.0);\n    col += sparkle(splatuv - vec2(-1, 1), cell + vec2(-1, 1), speed * iTime + hash12(cell + vec2(-1, 1)) * 4.0);\n    col += sparkle(splatuv - vec2(-1,-1), cell + vec2(-1,-1), speed * iTime + hash12(cell + vec2(-1,-1)) * 4.0);\n    col += sparkle(splatuv - vec2( 1,-1), cell + vec2( 1,-1), speed * iTime + hash12(cell + vec2( 1,-1)) * 4.0);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.yy * 2.0;\n    \n    vec2 splatuv = fract(uv * float(SPLAT_MULT) / 2.0);\n    vec2 cell = floor(uv * float(SPLAT_MULT) / 2.0);\n    \n    vec3 cellRand = hash32(cell);\n    \n    vec3 col = sparkleLayer(uv, vec2(0.2, 0.1));\n    col += sparkleLayer(uv, vec2(-0.01, -0.13));\n    col += sparkleLayer(uv, vec2(-0.06, 0.2));\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n    return hsl2rgb(vec3(h, s, l));\n}\n\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a regular n-sided start.\n\n// List of some other 2D distances:\n//\n//    https://www.shadertoy.com/playlist/MXdSRf\n//\n// and\n//\n//    https://iquilezles.org/articles/distfunctions2d\n\n\n\n// signed distance to a n-star polygon, with external angle w\nfloat sdStar(in vec2 p, in float r, in float n, in float w)\n{\n    // these 5 lines can be precomputed for a given shape\n    //float m = n*(1.0-w) + w*2.0;\n    float m = n + w*(2.0-n);\n    \n    float an = 3.1415927/n;\n    float en = 3.1415927/m;\n    vec2  racs = r*vec2(cos(an),sin(an));\n    vec2   ecs =   vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= racs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, racs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n//----------------------------------------------------------------------------------------\n// 1 out 4 in...\nfloat hash14(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}