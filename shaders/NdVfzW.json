{
    "Shader": {
        "info": {
            "date": "1657786515",
            "description": "mechanical metamorphoses with the color strips a la Chris Foss",
            "flags": 32,
            "hasliked": 0,
            "id": "NdVfzW",
            "likes": 21,
            "name": "Meta Mecha Tech",
            "published": 3,
            "tags": [
                "abstract",
                "tech",
                "mecha",
                "foss"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "\n// Meta Mecha Tech\n// mechanical metamorphoses\n// with the color strips a la Chris Foss \n\n// main code is in Buffer A\n// Buffer B is a minimal temporal anti aliasing\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat rng, material;\nvec3 coord;\n\n// signed distance function\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    float shape = 100.;\n    float t = 206.+iTime*.1;\n    float anim = fract(t);\n    float index = floor(t);\n    float signal = rng*sin(iTime*100.)*pow(anim,40.)*.1;\n    t = pow(anim,0.1)+index+signal;\n    float a = 1.;\n    vec3 e = vec3(.01,0.05,0.02);\n    const float count = 5.;\n    for (float i = 0.; i < count; ++i) {\n        \n        p.xz = abs(p.xz)-.15*a;\n        p.xz *= rot(t/a+i);\n        p.yz *= rot(t/a+i);\n        p = p - clamp(p, -e*a, e*a);\n        dist = min(dist, length(p.xy)-.01*a);\n        a /= 1.5;\n    }\n    \n    coord = p;\n    \n    shape = max((dist - .002), p.z+.005);\n    material = shape < dist ? 1. : 0.;\n    dist = min(dist, shape);\n    \n    return dist;\n}\n\nvoid coloring (inout vec3 color, in vec3 pos, in vec3 normal, in vec3 ray, in vec2 uv, in float shade)\n{\n    // Inigo Quilez color palette\n    // https://iquilezles.org/www/articles/palettes/palettes.htm\n    vec3 tint = .5+.5*cos(vec3(0,.3,.6)*6.283+iTime*.2+uv.y*2.);\n    vec3 rf = reflect(ray, normal);\n    \n    if (material == 0.)\n    {\n        float top = dot(rf, vec3(0,1,0))*.5+.5;\n        float glow = dot(normal, ray)*.5+.5;\n        color = vec3(0.9) * pow(dot(normal, -normalize(pos))*.5+.5, 0.5);\n        color += vec3(.5)*clamp(top,0.,1.);\n        color += tint*glow;\n        color *= shade;\n    }\n    else\n    {\n        float top = dot(rf, vec3(0,1,0))*.5+.5;\n        float front = dot(normal, vec3(0,0,1))*.5+.5;\n        color = tint;\n        color *= smoothstep(.01,.0,sin(coord.z*200.));\n        color += vec3(.5)*top;\n        color += vec3(.2)*clamp(top,0.,1.);\n        color *= shade*front;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 color = vec3(.2)*smoothstep(2.,.5,length(uv));\n    material = 0.;\n    \n    // coordinates\n    vec3 pos = vec3(0,0,1.2);\n    vec3 at = vec3(0);\n    pos.xz *= rot(cos(iTime*.1)*.2);\n    pos.zy *= rot(sin(iTime*.2)*.1);\n    vec3 ray = lookAt(pos, at, uv, 1.);\n    \n    // noise\n    vec3 blue = texture(iChannel0, fragCoord/1024.).xyz;\n    vec3 white = hash33(vec3(fragCoord, iFrame));\n    rng = white.x;\n    \n    // start ahead\n    pos += ray * white.z * .2;\n    \n    // blur edges\n    float dof = .2*smoothstep(.5, 2., length(uv));\n    ray.xy += vec2(cos(blue.x*6.28),sin(blue.x*6.28))*white.z*dof;\n    \n    // raymarch\n    float maxDist = 8.;\n    const float count = 50.;\n    float steps = 0.;\n    float total = 0.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        if (dist < total/iResolution.y || total > maxDist) break;\n        dist *= 0.9+0.1*blue.z;\n        ray += white * total*.01;\n        pos += ray * dist;\n        total += dist;\n    }\n    \n    // coloring\n    float shade = steps/count;\n    if (shade > .001 && total < maxDist) {\n        // NuSan\n        // https://www.shadertoy.com/view/3sBGzV\n        vec2 noff = vec2(.001,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n        coloring(color, pos, normal, ray, uv, shade);\n    }\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define repeat(p,r) (mod(p,r)-r/2.)\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Temporal Anti Aliasing from:\n// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/\n\n// but only the color clamping...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 temporal = texture(iChannel1, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) / iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}