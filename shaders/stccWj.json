{
    "Shader": {
        "info": {
            "date": "1722952628",
            "description": "Use the mouse to rotate the camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "stccWj",
            "likes": 1,
            "name": "infinite menger sponge",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "menger"
            ],
            "usePreview": 0,
            "username": "DualU",
            "viewed": 90
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat cube(vec2 v, float w) {\n\t\n    v += w/2.f;\n    \n    bool b = true;\n\n\twhile (v.x <= 0.f || v.y <= 0.f || v.x >= w || v.y >= w) {\n\t\tif (b) {\n\t\t\tv.x += w * 2.f;\n\t\t\tv.y += w * 2.f;\n\t\t}\n\t\tw *= 3.f;\n\t\tb = !b;\n\t}\n    \n\tfloat w3 = w / 3.f;\n\tfloat w6 = 2.f * w3;\n\twhile ((v.x < w3 || v.x > w6 || v.y < w3 || v.y > w6) && w > SURF_DIST) {\n\t\tif (v.x > w6)v.x -= w6;\n\t\telse if (v.x > w3)v.x -= w3;\n\t\tif (v.y > w6)v.y -= w6;\n\t\telse if (v.y > w3)v.y -= w3;\n\t\tw = w3;\n\t\tw3 = w / 3.f;\n\t\tw6 = 2.f * w3;\n\t}\n\treturn abs(min(min(v.x - w3, w6 - v.x), min(v.y - w3, w6 - v.y)));\n}\n\nfloat GetDist(vec3 p) {\n    p*=0.25;\n    float xy = cube(p.xy, 1.f);//max(cube(p.xy, 1.f), abs(p.z - 0.5f) - 0.5f);\n    float yz = cube(p.yz, 1.f);//max(cube(p.yz, 1.f), abs(p.x - 0.5f) - 0.5f);\n    float xz = cube(p.xz, 1.f);//max(cube(p.xz, 1.f), abs(p.y - 0.5f) - 0.5f);\n    float d = max(xy, max(yz, xz));\n    return d;\n    //p = abs(p)-s;\n\t//return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    m.y = 1.-m.y;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(m.y*PI+1.);\n    ro.xz *= Rot(m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n    \n    ro = vec3(0,0,iTime*0.05f);\n    \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        //vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}