{
    "Shader": {
        "info": {
            "date": "1576950880",
            "description": "a strange place",
            "flags": 0,
            "hasliked": 0,
            "id": "wld3R2",
            "likes": 8,
            "name": "Bracewell Probe #1020",
            "published": 3,
            "tags": [
                "landscape",
                "crosshair"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 467
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax,p)*ax,p,cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nvec3 sq(vec2 uv) {\n  return vec3(cos(uv.x), sin(uv.x)*sin(uv.y),sin(uv.x)*cos(uv.y));\n}\n\nfloat comp(vec3 p, vec3 off, vec3 ro) {\n  float scale = 2.2;\n  p+=off;\n  p=erot(p,sq(ro.xy),acos(-1.)*ro.z);\n  p = (fract(p/scale)-0.5)*scale;\n  return length(p) - 0.1;\n}\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(float a, float b) {\n  int x = FK(a); int y = FK(b);\n  return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\nvec3 hash3(float a) {\n  float t1 = hash(a, cos(a));\n  float t2 = hash(t1, cos(a+t1));\n  float t3 = hash(t2, cos(a+t2));\n  return vec3(t1,t2,t3);\n}\n\nfloat smin(float a, float b, float k){\n  float h = max(0.,k-abs(a-b))/k;\n  return min(a,b)-h*h*h*k/6.;\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p, mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat scene(vec3 p) {\n  float dist = 100000.;\n  for (int i = 0; i < 4; i++) {\n    vec3 off = hash3(float(i));\n    vec3 rot = hash3(cos(float(i*i)));\n    dist = smin(comp(p,off,rot),dist,0.2);\n  }\n  float offset = sin(p.x)+cos(p.y*0.8)+sin((p.x+p.y)*0.2)*0.5+cos((p.x-p.y)*0.3)*0.5;\n  return linedist(vec2(dist,p.z), vec2(0,0), vec2(0.95+cos(iTime)*0.05,2.5+offset*0.2))-0.2;\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.01);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvec3 shade(vec3 p, vec3 n, vec3 cam) {\n  return pow(smoothstep(-0.3,1.,scene(p+reflect(cam,n))*vec3(0.9,0.9,1)),vec3(2));\n}\n\nfloat borders(vec2 frag, vec2 res) {\n  vec2 frg = floor(frag);\n  vec2 crungy = floor(abs(frag-res/2.));\n  vec2 quad = floor(res/2.-abs(frag-res/2.));\n  float borderpos = floor(min(res.x,res.y)/4.);\n  if (quad.x == borderpos || quad.y == borderpos) return 1.;\n  if (quad.y == borderpos/2.) return 1.;\n  if (mod(iTime,2.)>0.5){\n  if (frg.x == floor(res.x/2.) && frg.y < res.y/2.+8. && frg.y > res.y/2.-8.) return 1.;\n  if (frg.y == floor(res.y/2.) && frg.x < res.x/2.+8. && frg.x > res.x/2.-8.) return 1.;\n  }\n  return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord - .5* iResolution.xy ) / iResolution.y;\n  \n\n  vec3 cam = normalize(vec3(0.7, uv));\n  vec3 init = vec3(0,sin(iTime/30.)*30.,4. + cos(iTime/10.)*0.5);\n  cam = erot(cam, vec3(0,1,0), cos(iTime*0.3)*0.5+0.5);\n  cam = erot(cam, vec3(0,0,1), sin(iTime*0.3)*0.8);\n  \n  vec3 p = init;\n  bool hit = false;\n  for (int i = 0; i < 300; i++) {\n    float dist = scene(p);\n    if (cam.z>0.)break;\n    if (dist*dist < 0.0001) { p+=dist*cam; hit = true; break; }\n    if (distance(init, p) > 100.) break;\n    p+=dist*cam;\n  }\n  float fog = sqrt(smoothstep(0.,50.,distance(p,init)));\n  vec3 n = norm(p);\n  fragColor.xyz = sqrt(hit ? mix(shade(p,n,cam),vec3(0.9),fog) : vec3(0.9));\n  float dx = dFdx(fragColor.z);\n  float dy = dFdy(fragColor.z);\n  fragColor.xyz -= dot(uv,vec2(dx,dy))*vec3(2,1,0);\n  \n  float b = borders(fragCoord.xy, iResolution.xy);\n  fragColor.xyz = mix(fragColor.xyz*0.95 + hash(uv.x+cos(iTime),uv.y+iTime)*0.02, vec3(1), b);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}