{
    "Shader": {
        "info": {
            "date": "1497544882",
            "description": "Uuuh",
            "flags": 32,
            "hasliked": 0,
            "id": "4dlBRl",
            "likes": 4,
            "name": "drl0013",
            "published": 3,
            "tags": [
                "rotation",
                "buffer"
            ],
            "usePreview": 0,
            "username": "DrLuke",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "/*\nInspired by: https://www.youtube.com/watch?v=QAja2jp1VjE\n\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nhttps://creativecommons.org/licenses/by/4.0/\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nInspired by: https://www.youtube.com/watch?v=QAja2jp1VjE\n\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nhttps://creativecommons.org/licenses/by/4.0/\n*/\n\n\nvec2 rotvec2(vec2 invec, float angle)\t// Simple vector rotation (Pay attention in school kiddos!)\n{\n    return vec2(invec.x * cos(angle) - invec.y*sin(angle),\n                invec.x * sin(angle) + invec.y*cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t// Generate UV coords\n    uv = (uv - vec2(0.5)) / 1.6;\t// Make UV coordinates go from -1 to 1, and then scale it a bit\n    uv.x *= iResolution.x/iResolution.y;\t// Correct aspect ratio\n    #define stepval 0.001\n    uv = floor(uv/stepval)*stepval;\t// Discretize coordinates\n    \n    \n    vec2 uvbg = uv;\t// Foreground is just normal uv coords\n    vec2 shiftvec = vec2(sin(iTime*0.5)*0.1, sin(iTime*0.21482608604)*0.1);\t// Shift center of rotation around\n    vec2 uvfg = rotvec2(uv - shiftvec, sin(iTime*1.5)*0.1) + shiftvec;\t// Rotate texture\n\t\n    // Pixel threshold, play around\n    #define threshlow 0.90\n    #define threshhigh 0.93\n    float bg = smoothstep(threshlow, threshhigh, texture(iChannel0, uvbg).r) * 0.5;\t// turn noise into more binary noise\n    #define offset vec2(sin(iTime)*0.01, cos(iTime*0.3423)*0.01)\n    float fg = smoothstep(threshlow, threshhigh, texture(iChannel0, uvfg + offset).r) * 0.5;\n    //float fg = smoothstep(0.93, 0.95, texture(iChannel0, uvfg).r) * 0.5;\t// Try without the offset, too!\n    \n    fragColor = mix(vec4(pow(bg*0.1 + fg, 0.3)), texture(iChannel1, fragCoord.xy / iResolution.xy + (texture(iChannel0, fragCoord.xy / iResolution.xy).r * .004)), 0.75);\t// Correction to prevent bright flash when textures align\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}