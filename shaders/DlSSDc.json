{
    "Shader": {
        "info": {
            "date": "1676655950",
            "description": "BiCubic interpolation. Using BiLinear but curving the UVs\nInspired by iq inplementation https://www.shadertoy.com/view/XsfGDn",
            "flags": 0,
            "hasliked": 0,
            "id": "DlSSDc",
            "likes": 0,
            "name": "BiCubic interpolation test",
            "published": 3,
            "tags": [
                "test",
                "bicubic",
                "sampling",
                "interpolation"
            ],
            "usePreview": 0,
            "username": "djancool",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "#define res 8.0\n\nfloat s_curve(float x, float p)\n{\n    float x1 = pow(x, p);\n    float x2 = pow(1.0 - x, p);\n    return x1 / (x1 + x2);\n}\n\nvec2 s_curve2(vec2 x, float p)\n{\n    vec2 x1 = pow(x, vec2(p));\n    vec2 x2 = pow(1.0 - x, vec2(p));\n    return x1 / (x1 + x2);\n}\n\nvec3 hash(vec2 i) {\n  return vec3(fract(sin(dot(i.xy, vec2(12.9898, 78.233))) * 43758.5453),\n              fract(sin(dot(i.xy, vec2(54.323, 21.123))) * 23452.2345),\n              fract(sin(dot(i.xy, vec2(31.432, 93.532))) * 98562.9867));\n}\n\nvec3 tex2D(vec2 uv)\n{\n    uv = fract(uv);\n    uv = floor(uv * res) / res;\n    return hash(uv);\n}\n\nvec3 bilInterp(vec2 uv)\n{\n    float pxl = 1.0 / res;\n    uv -= pxl * 0.5;\n    vec2 blend = fract(uv * res);\n\n    vec3 col_x1 = tex2D(uv + vec2(0.0, 0.0));\n    vec3 col_x2 = tex2D(uv + vec2(pxl, 0.0));\n    vec3 col_y1 = tex2D(uv + vec2(0.0, pxl));\n    vec3 col_y2 = tex2D(uv + vec2(pxl, pxl));\n    \n    vec3 col_x = mix(col_x1, col_x2, blend.x);\n    vec3 col_y = mix(col_y1, col_y2, blend.x);\n    vec3 col = mix(col_x, col_y, blend.y);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x + iTime * 0.02;\n    uv *= 3.0;\n    uv = (uv - vec2(0.0, 0.333));\n    \n    \n    float time_frac = fract(iTime * 0.15);\n    float blend = s_curve(min(time_frac, 1.0 - time_frac) * 2.0, 15.0) * 0.5 + 1.0;\n    \n    \n    // BiCubic Interpolation // inspired from: https://www.shadertoy.com/view/XsfGDn\n    vec2 uvBC = uv + 0.5 / res;\n    uvBC *= res;\n    vec2 uvBC_index = floor(uvBC);\n    vec2 uvBC_fract = fract(uvBC);\n    uvBC = uvBC_index + vec2(s_curve2(uvBC_fract, blend));\n    uvBC = (uvBC - 0.5) / res;\n    // BiCubic Interpolation //\n    \n    // Base color\n    vec3 col = bilInterp(uvBC);\n    \n\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}