{
    "Shader": {
        "info": {
            "date": "1613215870",
            "description": "Version at the end of the Shader Royale, not my favourite version to be honnest. Will create a new version later that go back to the point where I was liking it.",
            "flags": 64,
            "hasliked": 0,
            "id": "WtcBzl",
            "likes": 7,
            "name": "[OMZG] Shader Royale - Á¶è",
            "published": 3,
            "tags": [
                "shaderroyale"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "\n\n\nfloat bbox(vec2 uv, vec2 a, vec2 b, float t){\n    float l = length(b-a);\n    vec2 d = (b-a)/l;\n    vec2 q = uv - (a+b)*.5;\n  \n    q = mat2(d.x,-d.y,d.y,d.x)*q;\n    float tt = max(texture(iChannel0,vec2(abs(q.x+q.y*20.)*.01)).r*.02,.001);\n    q = abs(q) - vec2(l+(t/tt)*.0001,t-tt)*.5;\n    return length(max(q,vec2(0.))) + min(max(q.x,q.y),0.);\n  }\n  \n  \n  float left_fu(vec2 uv){\n   float h =  bbox(uv,vec2(-.1,-.2), vec2(-.1,.1),.01);\n    \n    float t = bbox(uv,vec2(-.2,.2), vec2(.0,.2),.01);\n    h = min(t,h);\n    \n     t = bbox(uv,vec2(.0,.2), vec2(-.2,.1),.01);\n    h = min(t,h);\n    \n     t = bbox(uv,vec2(-.05,.1), vec2(.01,.05),.01);\n    h = min(t,h);\n    \n      t = bbox(uv,vec2(-.15,.30), vec2(-.10,.25),.01);\n    h = min(t,h);\n    return h;\n    }\n       \n  float right_fu(vec2 uv){\n     float h =  bbox(uv,vec2(.35,.25), vec2(.05,.25),.01);\n    \n      float t = abs(bbox(uv,vec2(.3,.13), vec2(.1,.13),.1))-.01;\n      h = min(t,h);\n\n    \n     uv +=vec2(.05,.0);\n      t = bbox(uv,vec2(.25,.00), vec2(.25,-.20),.01);\n      h = min(t,h);\n    uv *=.5;\n   \n    t = abs(bbox(uv,vec2(.2,-.05), vec2(.05,-.05),.1))-.001;\n      h = min(t,h);\n    \n     t = bbox(uv,vec2(.2,-.05), vec2(.05,-.05),.001);\n      h = min(t,h);\n    return h;\n    \n  }\n  float fu(vec2 uv){\n    float h =  left_fu(uv);\n    float r = right_fu(uv);\n    h = min(h,r);\n    \n    \n    return h ;\n      \n    }\n    \nvec3 pal(float t){\n\n    return vec3(.5)+.5*cos(2.*3.141592*(1.*t+vec3(.0,.3,.7)));\n  }\n  \n  \n float mandel(vec2 uv){\n     float tt = texture(iChannel0,vec2(.3)).r*.1;\n      vec2 c = vec2(.41-tt,.42+tt);\n      vec2 z = uv;\n      float limit = 200.;\n      float cpt =  0.;\n   \n   for(float i = 0.;i<=limit; i++){\n   \n        z = vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y)+c;\n        if(length(z) >2.) break;\n        cpt ++;\n     \n     }\n     \n     return cpt /limit;\n   }\n   #define fGlobalTime iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    float t1 = texture(iChannel0,vec2(.3)).r*.01;\n \n  float t2 = texture(iChannel0,vec2(.7)).r*.01;\n  uv *=(fract(-fGlobalTime*.5+length(uv)));\n  uv *=2.;\n  uv.x +=fract(fGlobalTime+t1*.1);\n   uv.y += sin(fGlobalTime)+t2*10.;\n  vec2 id = floor(uv);\n  uv = fract(uv)-.5;\n float d = fu(uv);\n   float mandal = mandel(abs(uv)+.1);\n  d = abs(.01/(d));\n  if(mod(id.x,2.) ==0.){\n     d = 1.-d;\n  }\n  vec3 col = vec3(d)*pal(mandal*10.+d*.001+fract(fGlobalTime)+uv.x);\n\n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 25415,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/h0ffman/hoffman-ziphead"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}