{
    "Shader": {
        "info": {
            "date": "1437412045",
            "description": "the less efficient simulator I ever coded.\nThe \"game\" was: GLSL ES only allows for static access 1D arrays. Try doing something with that ;-)\n(that's why most demos are tricking events and their treatments by pure playback cinematics).",
            "flags": 0,
            "hasliked": 0,
            "id": "4tfSzS",
            "likes": 3,
            "name": "simulating collisions - array",
            "published": 3,
            "tags": [
                "simulation",
                "arrays"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 2352
        },
        "renderpass": [
            {
                "code": "// here: array implementation ( https://www.shadertoy.com/view/4tfSzS ). so slowwww...\n// simple brick particles : https://www.shadertoy.com/view/ltXXRS\n// sorted particles : https://www.shadertoy.com/view/llfXRS . the best !\n\n\nfloat time,T,cycl;\n\nfloat rnd(float x) { return fract(1345.56*sin(876.654*x)); }\nfloat rnd(int i, int j) { return rnd(float(i)-47.45*float(j)); }\n\nint grid[30*20];\n#define grid(j,i) grid[20*int(j)+int(i)]\n#define valid(x,y) ( x>=0 && x<20 && y>=0 && y<30 )\n\n\n// --- value of grid(y,x)\nint testGrid(int y, int x) { // horribly greedy (because only static access for arrays)\n    //return 0;\n    if ( !valid(x,y) ) return -1; \n      for (int j=0; j<30; j++)\n          if (j==y)\n       \t\t for (int i=0; i<20; i++)\n            \tif (i==x) return grid(j,i);\n    return -1;\n}\n\n\nvoid mainImage( out vec4 f, vec2 uv )\n{\n    time = floor(4.*iTime);\n    T    = mod(time,48.);\n    cycl = time-T-827.31; \n    vec2 r = iResolution.xy;\n\tuv = (2.*uv-r) / r.y; uv.y = -uv.y;\n\n    // --- init grid \n    for (int j=0; j<30; j++)\n        for (int i=0; i<20; i++)\n            grid(j,i) = rnd(i,j)>.9 ? 1 : 0;   \n    \n    // --- init particle\n \tivec2 p, pos = ivec2(10,0), vel=ivec2(0,1);\n\n    // --- simulation\n    // horribly greedy : yes, it replays whole time & pos for each pixel at each frame \n    for (float t=0.; t<48.; t++)\n        if (t>T) break; // future must be kept unknown for the sake of human beings. \n        else {\n            p = pos+vel; // target new position\n            p.x = p.x<0 ? 19 : p.x >19 ? 0 : p.x; // cyclical world\n            p.y = p.y<0 ? 29 : p.y >29 ? 0 : p.y;\n            if (testGrid(p.y,p.x)==0) // free space on trajectory: go, go !\n            { pos = p; vel = ivec2(0,1);}\n            else vel= ivec2(rnd(t+cycl)<.5?-1:1 ,0); // blocked: jiggle around\n        }\n    \n    // --- display\n    vec2 fuv = (uv-vec2(-.666,-1))/2.*30.; // 20x30 grid, centered, (0,0) top left\n    ivec2 iuv = ivec2(fuv);\n    \n    int v = testGrid(iuv.y,iuv.x); \n    \n    // out of playfield\n    if (v<0) {  \n\t    // f = vec4(.5); \n    \tf = .2+.2*texture(iChannel1,uv);\n        return;\n    }\n   \n    // display blocks\n    // f = vec4(v);\n   \tif (v==0) f = .3*texture(iChannel2,uv); else f = texture(iChannel0,uv*2.5);\n       \n    // display particle\n    //if ((pos.x==iuv.x) && (pos.y==iuv.y) )f = vec4(1,0,0,0);\n    f = mix(f, vec4(1,0,T/48.,0), smoothstep(.5,.4,length(vec2(pos)+.5-fuv)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}