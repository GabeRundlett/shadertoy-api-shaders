{
    "Shader": {
        "info": {
            "date": "1591533408",
            "description": "fourth attempt, this one looks the neatest imo\nlooks a lot like a plasma. i like it",
            "flags": 0,
            "hasliked": 0,
            "id": "wtXcR4",
            "likes": 5,
            "name": "earthbound bg 3",
            "published": 3,
            "tags": [
                "2d",
                "abstract",
                "snes",
                "earthbound"
            ],
            "usePreview": 0,
            "username": "thefox231",
            "viewed": 1055
        },
        "renderpass": [
            {
                "code": "const float thickness = .1;\nconst vec3 mainColor = vec3(.1, .3, .3);\n\nbool equals(float a, float b) {\n    return mod(abs(a - b), 0.2) < thickness;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = vec3(.0);\n    \n    // fix aspect ratio\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    uv.x -= (aspectRatio - 1.) * .5;\n    \n    // pixelate\n    float pxAmt = 90.;\n    \n    uv.x = floor(uv.x * pxAmt) / pxAmt;\n    uv.y = floor(uv.y * pxAmt) / pxAmt;\n    \n    // repixelate\n    pxAmt = 90.;\n    \n    uv.x = floor(uv.x * pxAmt) / pxAmt;\n    uv.y = floor(uv.y * pxAmt) / pxAmt;\n    \n    // interlacing .\n    if (mod(fragCoord.y, 2.) < 1.) {\n        uv += .4 + sin(iTime * .5 + uv.y * 15.) * 0.1;\n    } else {\n        uv -= .4 + cos(iTime * .5 + uv.y * 15. + .5) * 0.1;\n    }\n    \n    // weird plasma circles thing......\n    vec2 circlePosition = vec2(.5, .5);\n    float circleDistance = 1.0 - length(circlePosition - uv);\n    \n    vec3 circleColor = mainColor * .8 + sin(iTime + uv.x * 6. + uv.y * 9. + sin(uv.x * 8.) + cos(iTime)) * .15;\n    \n    if (equals(circleDistance, iTime * .1 + sin(uv.y * 3.) * (.6 + sin(iTime * .3) * .4))) {\n    \tcolor += circleColor;\n    } else {\n        float avg = (circleColor.r + circleColor.g + circleColor.b) / 3.;\n        color += vec3(avg) * .4 * circleDistance;\n    }\n    \n    // color shortening\n    // gives it a kind of like snes-like palette\n    float shortAmt = 8.0;\n    color = ceil(color * shortAmt) / shortAmt;\n    \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}