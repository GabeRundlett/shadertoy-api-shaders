{
    "Shader": {
        "info": {
            "date": "1630574181",
            "description": "Vine covered pillars (upgraded visuals)",
            "flags": 0,
            "hasliked": 0,
            "id": "sdcGWB",
            "likes": 17,
            "name": "Vines at Night 2",
            "published": 3,
            "tags": [
                "shadow",
                "vine"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "// \"Vines at Night 2\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // = 0/1 - optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_LIT 4\n\nvec3 ltPos[N_LIT + 1], ltAx;\nvec2 gId[2];\nfloat tCur, dstFar, hgSize[2], bRad, bDel, vLev, tileHt;\nint idObj;\nconst int idVin = 1, idCol = 2, idCap = 3, idFlr = 4;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, cRad, cLen, hp, br, tw, a, s, r;\n  dMin = dstFar;\n  p.xz -= HexToPix (gId[0] * hgSize[0]);\n  cRad = 0.1;\n  cLen = 1.;\n  tw = 1.;\n  d = dMin;\n  vLev = 0.;\n  for (float k = float (VAR_ZERO); k < 5.; k ++) {\n    tw = - tw;\n    s = (k + 1.) / 5.;\n    hp = tw * (16. - 10. * s) + bRad - 0.5;\n    br = (0.015 - 0.01 * s + 0.005 * (bRad - 0.75)) * (1.5 - 0.3 * p.y / cLen);\n    q = p;\n    q.y -= (bDel + 1.3 * s) * hp;\n    a = 2. * pi * q.y / hp;\n    q.xz = Rot2D (q.xz, (5. - 3. * bDel) * pi * (sign (bRad - 0.5) * a +\n       (0.01 * bDel + 0.3 * s) * sin (3. * a)));\n    q.x -= cRad + br;\n    r = length (q.xz) - br;\n    if (r < d) vLev = s;\n    d = SmoothMin (d, r, 0.005);\n  }\n  d = max (d, abs (p.y - cLen) - cLen);\n  DMIN (idVin);\n  q = p;\n  q.y -= cLen;\n  d = PrCylDf (q.xzy, cRad, cLen);\n  DMIN (idCol);\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi) + 0.5) / 6.));\n  q.y -= 2. * cLen + 0.065 - 0.1 * cos (pi * length (q.xz) / (0.5 * sqrt3 * hgSize[0]));\n  q.z = abs (q.z) - 0.04;\n  d = PrRoundBox2Df (q.yz, vec2 (0.025, 0.01), 0.01);\n  DMIN (idCap);\n  q = p;\n  q.y = abs (q.y - cLen) - cLen + 0.03;\n  d = PrCylDf (q.xzy, cRad + 0.05, 0.03);\n  DMIN (idCap);\n  return 0.7 * dMin;\n}\n\nvoid SetObjConf ()\n{\n  vec2 fRand;\n  fRand = Hashv2v2 (gId[0] + 27.1);\n  bRad = 0.5 + 0.5 * fRand.x;\n  bDel = fRand.y;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize[0] / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSize[0];\n  pM = HexToPix (PixToHex (ro.xz / hgSize[0]));\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId[0] = PixToHex (p.xz / hgSize[0]);\n    if (gId[0] != gIdP) {\n      gIdP = gId[0];\n      SetObjConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0. || p.y > 3.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat FObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  p.xz -= HexToPix (gId[1] * hgSize[1]);\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 6.);\n  d = q.y - tileHt + 0.01;\n  if (d < 0.05) d = SmoothMax (abs (q.x) - 0.495 * sqrt3 * hgSize[1], d, 0.01);\n  return d;\n}\n\nvoid SetFObjConf ()\n{\n  tileHt = 0.03 + 0.02 * Hashfv2 (gId[1] + 27.1);\n}\n\nfloat FObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize[1] / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSize[1];\n  pM = HexToPix (PixToHex (ro.xz / hgSize[1]));\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId[1] = PixToHex (p.xz / hgSize[1]);\n    if (gId[1] != gIdP) {\n      gIdP = gId[1];\n      SetFObjConf ();\n    }\n    d = FObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 FObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = FObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float ltDist)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  gIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId[0] = PixToHex (p.xz / hgSize[0]);\n    if (gId[0] != gIdP) {\n      gIdP = gId[0];\n      SetObjConf ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.07 * d, h));\n    d += h;\n    if (sh < 0.05 || d > ltDist) break;\n  }\n  return sh;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 4. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  vec3 col, mDir, vn;\n  float mRad, bs, ts;\n  mDir = normalize (vec3 (0.6, 0.03, 1.));\n  mRad = 0.025;\n  col = vec3 (0.06, 0.06, 0.03) * pow (clamp (dot (rd, mDir), 0., 1.), 16.);\n  bs = dot (rd, mDir);\n  ts = bs * bs - 1. + mRad * mRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - mDir) / mRad);\n      col += vec3 (1., 0.9, 0.5) * (0.07 + 0.93 * clamp (dot (vec3 (-0.77, 0.4, 0.5), vn) *\n         (1. - 0.3 * Noisefv3 (8. * vn)), 0., 1.));\n    }\n  } else col += StarPat (rd, 6.);\n  return col;\n}\n\nfloat GlowCol (vec3 ro, vec3 rd, float dstLim)\n{\n  vec3 dirGlow;\n  float dstGlow, brGlow;\n  brGlow = 0.;\n  for (int k = VAR_ZERO; k < N_LIT; k ++) {\n    dirGlow = ltPos[k] - ro;\n    dstGlow = length (dirGlow);\n    brGlow += smoothstep (-0.1, 0.1, dstLim - dstGlow) *\n       pow (max (dot (rd, dirGlow), 0.) / dstGlow, 2048.) / dstGlow;\n  }\n  return clamp (brGlow, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 ltVec, ltDir, roo, col, c, vn, q;\n  vec2 vf;\n  float dstObj, dstFObj, atten, a, sh, y;\n  bool isBg;\n  isBg = true;\n  vf = vec2 (0.);\n  roo = ro;\n  dstFObj = FObjRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstFObj < min (dstObj, dstFar)) {\n    dstObj = dstFObj;\n    idObj = idFlr;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    if (idObj == idFlr) {\n      vn = FObjNf (ro);\n      col4 = vec4 (0.5, 0.5, 0.5, 0.1) * (0.7 + 0.3 * Hashfv2 (17.1 * gId[1])) *\n         (1. - 0.2 * Fbm2 (32. * ro.xz));\n      vf = vec2 (32., 2. * (1. - smoothstep (0.1, 0.3, dstObj / dstFar)));\n    } else {\n      vn = ObjNf (ro);\n      q = ro;\n      q.xz -= HexToPix (gId[0] * hgSize[0]);\n      if (idObj == idVin) {\n        col4 = vec4 (0.6, 0.7, 0.4, 0.2) * (0.4 + 0.6 * vLev);\n        vf = vec2 (64., 2. * (2. - vLev));\n      } else if (idObj == idCol) {\n        col4 = vec4 (0.6, 0.5, 0.4, 0.1);\n        a = mod (16. * (atan (q.z, - q.x) / (2. * pi)), 1.);\n        vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * a * a));\n        y = mod (8. * q.y, 1.) - 0.5;\n        vn.y = 0.15 * pi * sign (y) * SmoothBump (0., 0.06, 0.02, 0.5 - abs (y));\n        vn = normalize (vn);\n        vf = vec2 (64., 0.5);\n      } else if (idObj == idCap) {\n        col4 = vec4 (0.5, 0.4, 0.3, 0.1);\n        if (vn.y > 0.99 && length (q.xz) < 0.14) col4 *= 0.6;\n        vf = vec2 (32., 1.);\n      }\n    }\n    isBg = false;\n  }\n  if (! isBg) {\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    ltVec = roo - ro;\n    atten = 0.1 + 0.9 * smoothstep (0.7, 0.85, dot (ltAx, - normalize (ltVec))) / (1. + 0.05 * dot (ltVec, ltVec));\n    ltVec += ltPos[N_LIT];\n    ltDir = normalize (ltVec);\n    sh = ObjSShadow (ro, ltDir, length (ltVec));\n    col = atten * (col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n    c = vec3 (0.);\n    for (int k = VAR_ZERO; k < N_LIT; k ++) {\n      ltVec = ltPos[k] - ro;\n      ltDir = normalize (ltVec);\n      atten = 1. / (1. + 0.2 * dot (ltVec, ltVec));\n      sh = ObjSShadow (ro, ltDir, length (ltVec));\n      c += atten * col4.rgb * sh * max (dot (vn, ltDir), 0.);\n    }\n    col = mix (col, c * vec3 (0.7, 0.7, 1.), smoothstep (-0.05, 0.05, Maxv3 (c) - Maxv3 (col)));\n  }\n  if (dstObj / dstFar > 0.6) col = mix (col, SkyCol (rd), smoothstep (0.6, 1., dstObj / dstFar));\n  col = mix (col, vec3 (0.4, 0.9, 1.), min (2.5 * GlowCol (roo, rd, min (dstObj, dstFar)), 1.));\n  return clamp (col, 0., 1.);\n}\n\nvec2 TrackPath (float t)\n{\n  vec2 r;\n  float tt;\n  tt = mod (t, 4.);\n  if (tt < 1.) r = mix (vec2 (sqrt3 * 0.5, -0.5), vec2 (sqrt3 * 0.5, 0.5), tt);\n  else if (tt < 2.) r = mix (vec2 (sqrt3 * 0.5, 0.5), vec2 (0., 1.), tt - 1.);\n  else if (tt < 3.) r = mix (vec2 (0., 1.), vec2 (0., 2.), tt - 2.);\n  else r = mix (vec2 (0., 2.), vec2 (sqrt3 * 0.5, 2.5), tt - 3.);\n  r += vec2 (0.001, 3. * floor (t / 4.));\n  return r;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, p1, p2, vd;\n  float el, az, asp, zmFac, sr, vel, tCyc, s;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  hgSize[0] = 1.;\n  hgSize[1] = 1./3.;\n  vel = 0.1;\n  p1 = 0.5 * (TrackPath (vel * tCur + 0.2) + TrackPath (vel * tCur + 0.4));\n  p2 = 0.5 * (TrackPath (vel * tCur - 0.2) + TrackPath (vel * tCur - 0.4));\n  ro.xz = 0.5 * (p1 + p2);\n  ro.x += 0.2 * (2. * SmoothBump (0.25, 0.75, 0.15, mod (0.07 * vel * tCur, 1.)) - 1.);\n  ro.y = 0.7;\n  vd = p1 - p2;\n  az = atan (vd.x, vd.y);\n  el = 0.04 * pi * sin (0.05 * 2. * pi * tCur);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  vuMat = StdVuMat (el, az);\n  zmFac = 2.2;\n  dstFar = 20.;\n  ltPos[N_LIT] = 0.5 * vuMat * normalize (vec3 (cos (2. * pi * (0.022 * tCur)), 1., 0.));\n  ltAx = vuMat * vec3 (0., 0., 1.);\n  for (int k = 0; k < N_LIT; k ++) {\n    s = float (k) / float (N_LIT);\n    ltPos[k] = vec3 (Rot2D (vec2 (0., 2.5 + float (k)), 0.5 * (0.7 + 0.3 * s) * pi *\n       sin (pi * (0.05 * (1. + 0.35 * s) * (tCur + 10.) + 2. * s))) + vec2 (0., ro.z),\n       0.8 + 0.3 * sin (2. * pi * (0.07 * tCur + s))).xzy;\n  }\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}