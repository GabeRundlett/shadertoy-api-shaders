{
    "Shader": {
        "info": {
            "date": "1495930667",
            "description": "raymarched torus tunnel with some feedback glow\nkinda slow",
            "flags": 32,
            "hasliked": 0,
            "id": "MdXfDH",
            "likes": 21,
            "name": "day9 torus tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "torus"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 5041
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    fragColor = min(vec4(.9), pow(tex, vec4(.75)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat time = 0.1;\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat length8(vec3 x)\n{\n \treturn pow(dot(vec3(1.0, 2.0, 1.0), pow(x, vec3(8.0))), 1.0/8.0)  ;\n}\n\nfloat length8(vec2 x)\n{\n \treturn pow(dot(vec2(1.0, 1.0), pow(x, vec2(8.0))), 1.0/8.0)  ;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    \n  vec2 q = vec2(length8(p.xy)-t.x,p.z);\n  return length8(q)-t.y;\n}\n\nfloat map(vec3 p)\n{\n\n    vec3 q = p;\n\n    float rep = 0.1;\n        \n    vec3 c = vec3(rep);\n    p.z = mod(p.z,c.z)-0.5*c.z;\n\n    \n    vec3 p_s;\n        \n    float bars = 1000.0;\n    float inner = 1000.0;\n    int sides = 4;\n    float angle = 3.1415 * 0.5;\n    \n    float blockID = floor(q.z / rep) + iTime * 0.2;\n    \n    for ( int i = 0; i < sides; i ++)\n    {\n        \n        p_s = p * rotationMatrix(vec3(0.0, 0.0, 1.0), angle * float(i));\n        \n        \n        \n        float cutout = 10000.;\n        vec2 line = vec2(0.3, 0.01);\n        p_s = p_s.yxz + vec3(\n            sin(blockID * 3.0)* 0.5 + 0.3 ,\n            0.0,\n            0.0);\n         \n        p_s = p_s * rotationMatrix(vec3(0.0, 0.0, 1.0),  sin(blockID/3.0 ));\n      // \tp_s = p_s * vec3(3.0, 1.0, 1.0);\n\n        cutout = sdTorus88(p_s, line);\n        \n        inner = min(inner, cutout); \n        \n        \n\n    }\n\n        \n    \n    float result = inner;  \n    return result;\n}\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = time;\n}\n\n vec3 gradient(vec3 p, float t) {\n\t\t\tvec2 e = vec2(0., t);\n\n\t\t\treturn normalize( \n\t\t\t\tvec3(\n\t\t\t\t\tmap(p+e.yxx) - map(p-e.yxx),\n\t\t\t\t\tmap(p+e.xyx) - map(p-e.xyx),\n\t\t\t\t\tmap(p+e.xxy) - map(p-e.xxy)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime * 0.2;\n    vec2 _p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec3 ray = normalize(vec3(_p, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);\n    \n    float depth = 0.1, d = 0.0, iter = 0.0;\n    vec3 p;\n    \n    for( int i = 0; i < 80; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d < 0.001) {\n\t\t\thit = true;\n            break;\n        }\n        if ( depth > 20.0)\n            break;\n                   \n\t\tdepth += d * 0.15;\n\t\titer++;\n                   \n    }\n    vec3 col = vec3(0.0);\n    \n    if(hit)\n    \tcol = vec3(1.0 - iter / 80.0);\n\n    col = pow(col, vec3(\n        cos(floor(p.z / 0.1)) * 0.5 + 0.7 , \n        0.9, \n        sin(floor(p.z / 0.1)) * 0.5 + 0.7 ));\n    \n    fragColor = vec4(( col), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nmat2 rot2D(float theta)\n{\n \treturn mat2(cos(theta), -sin(theta), sin(theta), cos(theta));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 base = texture(iChannel0, uv).rgb;\n    \n    // sample the last texture with uv's slightly scaled up\n    vec2 offs = (uv- 0.5) * 0.01 * sin(iTime* 0.2);\n    offs = offs * rot2D(iTime);\n    vec3 overlay = texture(iChannel1, offs + uv).rgb;\n    \n    // Additively blend the colors together\n    vec4 col = vec4(base* 0.8 + overlay*0.4, 1.0);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}