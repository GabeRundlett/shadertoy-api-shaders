{
    "Shader": {
        "info": {
            "date": "1603627605",
            "description": "Works as advertised (alternating mix and sort cycles)",
            "flags": 32,
            "hasliked": 0,
            "id": "tsGyDy",
            "likes": 33,
            "name": "Magic Ball Sorter",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "physics",
                "entropy",
                "galton"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 682
        },
        "renderpass": [
            {
                "code": "// \"Magic Ball Sorter\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nmat3 QtToRMat (vec4 q);\nvec3 OrAng (vec3 p);\nvec3 OrAngT (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\nvec4 Loadv4 (int idVar);\n\nconst ivec3 nbEdge = ivec3 (20, 2, 16);\nconst int nBall = nbEdge.x * nbEdge.y * nbEdge.z;\n\nvec3 ltDir, qHit, vnBall, hbSize, blkAng, vnBlk;\nfloat dstFar, hbMarg, nBin;\nint idObj, idBall;\nconst int txOff = 4;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 sLen;\n  vec3 q, eWid, ss;\n  float dMin, d, tr, f, b;\n  dMin = dstFar;\n  q = p;\n  q = OrAng (q);\n  sLen = vec4 (hbSize - hbMarg - 0.1, 0.);\n  eWid = vec3 (0.15);\n  q = abs (q);\n  d = min (min (\n     PrRoundBoxDf (q - sLen.wyz, eWid + sLen.xww - 0.1, 0.1),\n     PrRoundBoxDf (q - sLen.xwz, eWid + sLen.wyw - 0.1, 0.1)),\n     PrRoundBoxDf (q - sLen.xyw, eWid + sLen.wwz - 0.1, 0.1));\n  DMINQ (1);\n  q = p;\n  q.y -= - hbSize.x - eWid.x - 0.4;\n  d = PrRoundBoxDf (q, vec3 (hbSize.z + 3., 0.4, hbSize.z + 3.) - 0.05, 0.05);\n  DMINQ (2);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 cEdge;\n  float dMin, d, cGap, hGap, hHt, vHt, cr, hy;\n  dMin = dstFar;\n  cGap = 2.5;\n  cEdge = vec2 (3.5, 4.5);\n  hGap = 0.2;\n  hHt = 0.5;\n  vHt = 8.;\n  cr = 0.46;\n  hy = hbSize.y - hbMarg - 0.5;\n  p = OrAng (p);\n  q = p;\n  d = max (abs (q.x) - cEdge.x * cGap, abs (q.z) - cEdge.y * cGap);\n  q.z += 0.25 * cGap * sign (mod (floor (q.x / cGap + 0.5), 2.) - 0.5);\n  d = max (d, PrCapsDf (vec3 (mod (q.xz + 0.5 * cGap, cGap) - 0.5 * cGap, q.y), cr, hy));\n  dMin = min (dMin, d);\n  q = p;\n  d = max (abs (q.z) - hbSize.z + hbMarg, - q.x - hbSize.x + hbMarg);\n  if (mod (nBin, 2.) != 0.) q.z += hbSize.z / nBin;\n  q.z = mod (q.z + hbSize.z / nBin, 2. * hbSize.z / nBin) - hbSize.z / nBin;\n  d = max (d, PrRoundBoxDf (vec3 (q.x + hbSize.x, q.yz), vec3 (vHt, hy, 0.01), cr));\n  dMin = min (dMin, d);\n  q = p;\n  q.z = abs (q.z) - hbSize.z;\n  d = q.z + hbMarg;\n  q.x -= hHt * hbSize.x;\n  d = max (d, PrRoundBoxDf (q, vec3 (0.01, hy, (1. - hGap) * hbSize.z), cr));\n  dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (txOff + 4 * n);\n    u = ro - p.xyz;\n    rad = 0.46 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n} \n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  u = vnBall * QtToRMat (Loadv4 (txOff + 4 * idBall + 2));\n  return step (0., sign (u.y) * sign (u.z) * atan (u.x, u.y));\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  v = ro / rd;\n  tp = (hbSize - hbMarg - 0.04) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return dMin;\n}\n\nfloat BlkHitSil (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  v = ro / rd;\n  tp = (hbSize - hbMarg - 0.04) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd, vec3 col)\n{\n  vec4 col4;\n  vec3 roo, rdo, vn, colT;\n  float dstBall, dstObj, dstTrObj, db, c, nDotL;\n  hbMarg = 0.4;\n  dstObj = ObjRay (ro, rd);\n  dstTrObj = TrObjRay (ro, rd);\n  dstBall = dstFar;\n  roo = ro;\n  rdo = rd;\n  ro = OrAng (ro);\n  rd = OrAng (rd);\n  db = BlkHitSil (ro, rd);\n  if (db < dstFar) {\n    dstBall = BallHit (ro, rd);\n    if (dstBall < min (dstObj, dstFar)) {\n      vn = OrAngT (vnBall);\n      c = Loadv4 (txOff + 4 * idBall + 1).w;\n      col = vec3 (1., 0.3, 0.3);\n      if (c > 0.) col = (c == 1.) ? col.grg : ((c == 2.) ? col.ggr : ((c == 3.) ? col.rrg :\n         (c == 4.) ? col.rgr : col.grr));\n      col4 = vec4 (col * (0.6 + 0.4 * BallChqr (idBall, vnBall)), 0.3);\n      idObj = -1;\n    }\n  }\n  ro = roo;\n  rd = rdo;\n  if (dstObj < min (dstBall, dstFar)) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.2);\n    } else if (idObj == 2) {\n       col4 = mix (vec4 (0.7, 0.3, 0.1, 0.1), vec4 (0.4, 0.2, 0.1, 0.1),\n          Fbm2 (qHit.xz * vec2 (0.5, 4.)));\n    }\n  }\n  if (min (dstBall, dstObj) < dstFar) {\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj != 4) nDotL *= nDotL;\n    col = col4.rgb * (0.3 + 0.7 * nDotL) + col4.a * pow (max (0.,\n       dot (ltDir, reflect (rd, vn))), 32.);\n  } else if (db < dstFar) col *= 0.9;\n  if (dstTrObj < min (dstBall, dstObj)) {\n    ro = roo;\n    rd = rdo;\n    ro += dstTrObj * rd;\n    vn = TrObjNf (ro);\n    colT = vec3 (0.8, 0.8, 0.9) * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) + 0.1 * pow (max (0.,\n       dot (ltDir, reflect (rd, vn))), 32.);\n    col = mix (col, colT, 0.85);\n  }\n  if (BlkHit (OrAng (roo), OrAng (rdo)) < min (dstObj, dstFar)) {\n    vn = OrAngT (vnBlk);\n    col = mix (col, vec3 (0.7, 0.7, 0.75) * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (0., dot (ltDir, reflect (rdo, vn))), 32.),\n       pow (1. - abs (dot (rdo, vn)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  float b, zmFac, el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  hbSize = stDat.xyz;\n  stDat = Loadv4 (1);\n  blkAng = stDat.xyz;\n  zmFac = 9.;\n  stDat = Loadv4 (2);\n  nBin = stDat.w;\n  stDat = Loadv4 (3);\n  el = stDat.x;\n  az = stDat.y;\n  vuMat = StdVuMat (el, az);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  b = length (hbSize);\n  ro = vuMat * vec3 (0., -0.04, - 8.) * b;\n  dstFar = 20. * b;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  col = vec3 (0.3, 0.3, 0.35) * (0.7 + 0.3 * uv.y);\n  col = ShowScene (ro, rd, col);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 OrAng (vec3 p)\n{\n  p.xz = Rot2D (p.xz, blkAng.y);\n  p.yz = Rot2D (p.yz, blkAng.x);\n  p.xy = Rot2D (p.xy, blkAng.z);\n  return p;\n}\n\nvec3 OrAngT (vec3 p)\n{\n  p.xy = Rot2D (p.xy, - blkAng.z);\n  p.yz = Rot2D (p.yz, - blkAng.x);\n  p.xz = Rot2D (p.xz, - blkAng.y);\n  return p;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Magic Ball Sorter\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst ivec3 nbEdge = ivec3 (20, 2, 16);\nconst int nBall = nbEdge.x * nbEdge.y * nbEdge.z;\n\nvec3 hbSize, gVec;\nfloat nStep, fOvlap, fricN, fricS, fricT, delT, nBin, rSeed;\nconst float txRow = 128.;\nconst int txOff = 4;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv;\n  float diamN, rSep, diamAv, h, fc, ft;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (txOff + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (txOff + 4 * n + 1).xyz;\n      wmN = Loadv4 (txOff + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 drw;\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = VAR_ZERO; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid ObsInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  vec2 cEdge;\n  float cGap, hGap, hHt, vHt, rSep, diamAv, h, fc, ft, fHoriz;\n  fHoriz = 0.5;\n  cGap = 2.5;\n  hGap = 0.2;\n  hHt = 0.5;\n  cEdge = vec2 (3.5, 4.5);\n  vHt = 8.;\n  diamAv = 0.5 * (diam + 1.);\n  dr.y = 0.;\n  dr.xz = rm.xz;\n  dr.z += 0.25 * cGap * sign (mod (floor (dr.x / cGap + 0.5), 2.) - 0.5);\n  if (abs (dr.x) < cEdge.x * cGap && abs (dr.z) < cEdge.y * cGap)\n     dr.xz = mod (dr.xz + 0.5 * cGap, cGap) - 0.5 * cGap;\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  if (mod (nBin, 2.) != 0.) dr.z += hbSize.z / nBin;\n  dr.z = mod (dr.z + hbSize.z / nBin, 2. * hbSize.z / nBin) - hbSize.z / nBin;\n  dr.x = max (dr.x + hbSize.x - vHt, 0.);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  dr.x -= hHt * hbSize.x;\n  if (dr.x > 0.) am.z -= fHoriz * sign (rm.z);\n  else am.z += 0.5 * fHoriz * sign (rm.z);\n  dr.z = min (abs (dr.z) - hGap * hbSize.z, 0.) * sign (dr.z);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 5.;\n  p = Loadv4 (txOff + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  p = Loadv4 (txOff + 4 * mId + 1);\n  vm = p.xyz;\n  bCol = p.w;\n  qm = Loadv4 (txOff + 4 * mId + 2);\n  wm = Loadv4 (txOff + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  ObsInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec3 e;\n  float mIdf, ha;\n  mIdf = float (mId);\n  e = vec3 (0.5 * hbSize.x, hbSize.y, 2. * hbSize.z);\n  rm = 0.8 * (floor (vec3 (mod (mIdf, e.x), mod (mIdf, e.x * e.y) / e.x,\n     mIdf / (e.x * e.y))) - 0.5 * (e - 1.));\n  rm.x += hbSize.x - 4.5;\n  ha = mIdf + rSeed;\n  vm = 0.05 * normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1. - 0.3 * Hashff (ha + 0.1);\n  bCol = floor (nBin * Hashff (ha + 1.1));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, p, qm;\n  vec3 rm, vm, wm, blkAng;\n  vec2 iFrag, canvas;\n  float el, az, diam, bCol, bc, vMax, nCyc, todCur, todInit;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + txOff) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= txOff) mId = (pxId - txOff) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  delT = 0.005;\n  if (doInit) {\n    hbSize = vec3 (nbEdge);\n    nStep = 0.;\n    nCyc = 0.;\n    el = 0.;\n    az = 0.;\n    todInit = todCur;\n    nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    blkAng = vec3 (0., -0.5 * pi, 1.5 * pi);\n  } else {\n    stDat = Loadv4 (0);\n    hbSize = stDat.xyz;\n    stDat = Loadv4 (1);\n    blkAng = stDat.xyz;\n    nCyc = stDat.w;\n    stDat = Loadv4 (2);\n    nBin = stDat.w;\n    stDat = Loadv4 (3);\n    el = stDat.x;\n    az = stDat.y;\n    todInit = stDat.z;\n    nStep = stDat.w;\n    ++ nStep;\n  }\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = clamp (0.5 * pi * mPtr.y, -0.2 * pi, 0.);\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), blkAng.x));\n  gVec.xy = Rot2D (gVec.xy, blkAng.z);\n  rSeed = 11.1 * mod (todInit, 1.);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam, bCol);\n    else Step (mId, rm, vm, qm, wm, diam, bCol);\n  }\n  if (nStep > 1000.) {\n    vMax = 0.;\n    for (int n = VAR_ZERO; n < nBall; n ++) vMax = max (vMax, length (Loadv4 (txOff + 4 * n + 1).xyz));\n    if (vMax < 0.5) {\n      nStep = 0.;\n      ++ nCyc;\n      if (mod (nCyc, 2.) > 0.) bc = floor (nBin * (0.5 * rm.z / hbSize.z + 0.5));\n      else todInit = todCur;\n      rSeed = 11.1 * mod (todInit, 1.);\n      Init (mId, rm, vm, qm, wm, diam, bCol);\n      if (mod (nCyc, 2.) > 0.) bCol = bc;\n      else nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    }\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = vec4 (blkAng, nCyc);\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, nBin);\n  else if (pxId == 3) stDat = vec4 (el, az, todInit, nStep);\n  else {\n    mId = pxId - (txOff + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, bCol)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= txOff) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Magic Ball Sorter\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst ivec3 nbEdge = ivec3 (20, 2, 16);\nconst int nBall = nbEdge.x * nbEdge.y * nbEdge.z;\n\nvec3 hbSize, gVec;\nfloat nStep, fOvlap, fricN, fricS, fricT, delT, nBin, rSeed;\nconst float txRow = 128.;\nconst int txOff = 4;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv;\n  float diamN, rSep, diamAv, h, fc, ft;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (txOff + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (txOff + 4 * n + 1).xyz;\n      wmN = Loadv4 (txOff + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 drw;\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = VAR_ZERO; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid ObsInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  vec2 cEdge;\n  float cGap, hGap, hHt, vHt, rSep, diamAv, h, fc, ft, fHoriz;\n  fHoriz = 0.5;\n  cGap = 2.5;\n  hGap = 0.2;\n  hHt = 0.5;\n  cEdge = vec2 (3.5, 4.5);\n  vHt = 8.;\n  diamAv = 0.5 * (diam + 1.);\n  dr.y = 0.;\n  dr.xz = rm.xz;\n  dr.z += 0.25 * cGap * sign (mod (floor (dr.x / cGap + 0.5), 2.) - 0.5);\n  if (abs (dr.x) < cEdge.x * cGap && abs (dr.z) < cEdge.y * cGap)\n     dr.xz = mod (dr.xz + 0.5 * cGap, cGap) - 0.5 * cGap;\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  if (mod (nBin, 2.) != 0.) dr.z += hbSize.z / nBin;\n  dr.z = mod (dr.z + hbSize.z / nBin, 2. * hbSize.z / nBin) - hbSize.z / nBin;\n  dr.x = max (dr.x + hbSize.x - vHt, 0.);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  dr.x -= hHt * hbSize.x;\n  if (dr.x > 0.) am.z -= fHoriz * sign (rm.z);\n  else am.z += 0.5 * fHoriz * sign (rm.z);\n  dr.z = min (abs (dr.z) - hGap * hbSize.z, 0.) * sign (dr.z);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 5.;\n  p = Loadv4 (txOff + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  p = Loadv4 (txOff + 4 * mId + 1);\n  vm = p.xyz;\n  bCol = p.w;\n  qm = Loadv4 (txOff + 4 * mId + 2);\n  wm = Loadv4 (txOff + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  ObsInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec3 e;\n  float mIdf, ha;\n  mIdf = float (mId);\n  e = vec3 (0.5 * hbSize.x, hbSize.y, 2. * hbSize.z);\n  rm = 0.8 * (floor (vec3 (mod (mIdf, e.x), mod (mIdf, e.x * e.y) / e.x,\n     mIdf / (e.x * e.y))) - 0.5 * (e - 1.));\n  rm.x += hbSize.x - 4.5;\n  ha = mIdf + rSeed;\n  vm = 0.05 * normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1. - 0.3 * Hashff (ha + 0.1);\n  bCol = floor (nBin * Hashff (ha + 1.1));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, p, qm;\n  vec3 rm, vm, wm, blkAng;\n  vec2 iFrag, canvas;\n  float el, az, diam, bCol, bc, vMax, nCyc, todCur, todInit;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + txOff) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= txOff) mId = (pxId - txOff) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  delT = 0.005;\n  if (doInit) {\n    hbSize = vec3 (nbEdge);\n    nStep = 0.;\n    nCyc = 0.;\n    el = 0.;\n    az = 0.;\n    todInit = todCur;\n    nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    blkAng = vec3 (0., -0.5 * pi, 1.5 * pi);\n  } else {\n    stDat = Loadv4 (0);\n    hbSize = stDat.xyz;\n    stDat = Loadv4 (1);\n    blkAng = stDat.xyz;\n    nCyc = stDat.w;\n    stDat = Loadv4 (2);\n    nBin = stDat.w;\n    stDat = Loadv4 (3);\n    el = stDat.x;\n    az = stDat.y;\n    todInit = stDat.z;\n    nStep = stDat.w;\n    ++ nStep;\n  }\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = clamp (0.5 * pi * mPtr.y, -0.2 * pi, 0.);\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), blkAng.x));\n  gVec.xy = Rot2D (gVec.xy, blkAng.z);\n  rSeed = 11.1 * mod (todInit, 1.);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam, bCol);\n    else Step (mId, rm, vm, qm, wm, diam, bCol);\n  }\n  if (nStep > 1000.) {\n    vMax = 0.;\n    for (int n = VAR_ZERO; n < nBall; n ++) vMax = max (vMax, length (Loadv4 (txOff + 4 * n + 1).xyz));\n    if (vMax < 0.5) {\n      nStep = 0.;\n      ++ nCyc;\n      if (mod (nCyc, 2.) > 0.) bc = floor (nBin * (0.5 * rm.z / hbSize.z + 0.5));\n      else todInit = todCur;\n      rSeed = 11.1 * mod (todInit, 1.);\n      Init (mId, rm, vm, qm, wm, diam, bCol);\n      if (mod (nCyc, 2.) > 0.) bCol = bc;\n      else nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    }\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = vec4 (blkAng, nCyc);\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, nBin);\n  else if (pxId == 3) stDat = vec4 (el, az, todInit, nStep);\n  else {\n    mId = pxId - (txOff + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, bCol)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= txOff) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Magic Ball Sorter\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst ivec3 nbEdge = ivec3 (20, 2, 16);\nconst int nBall = nbEdge.x * nbEdge.y * nbEdge.z;\n\nvec3 hbSize, gVec;\nfloat nStep, fOvlap, fricN, fricS, fricT, delT, nBin, rSeed;\nconst float txRow = 128.;\nconst int txOff = 4;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv;\n  float diamN, rSep, diamAv, h, fc, ft;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (txOff + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (txOff + 4 * n + 1).xyz;\n      wmN = Loadv4 (txOff + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 drw;\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = VAR_ZERO; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid ObsInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  vec2 cEdge;\n  float cGap, hGap, hHt, vHt, rSep, diamAv, h, fc, ft, fHoriz;\n  fHoriz = 0.5;\n  cGap = 2.5;\n  hGap = 0.2;\n  hHt = 0.5;\n  cEdge = vec2 (3.5, 4.5);\n  vHt = 8.;\n  diamAv = 0.5 * (diam + 1.);\n  dr.y = 0.;\n  dr.xz = rm.xz;\n  dr.z += 0.25 * cGap * sign (mod (floor (dr.x / cGap + 0.5), 2.) - 0.5);\n  if (abs (dr.x) < cEdge.x * cGap && abs (dr.z) < cEdge.y * cGap)\n     dr.xz = mod (dr.xz + 0.5 * cGap, cGap) - 0.5 * cGap;\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  if (mod (nBin, 2.) != 0.) dr.z += hbSize.z / nBin;\n  dr.z = mod (dr.z + hbSize.z / nBin, 2. * hbSize.z / nBin) - hbSize.z / nBin;\n  dr.x = max (dr.x + hbSize.x - vHt, 0.);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  dr.x -= hHt * hbSize.x;\n  if (dr.x > 0.) am.z -= fHoriz * sign (rm.z);\n  else am.z += 0.5 * fHoriz * sign (rm.z);\n  dr.z = min (abs (dr.z) - hGap * hbSize.z, 0.) * sign (dr.z);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 5.;\n  p = Loadv4 (txOff + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  p = Loadv4 (txOff + 4 * mId + 1);\n  vm = p.xyz;\n  bCol = p.w;\n  qm = Loadv4 (txOff + 4 * mId + 2);\n  wm = Loadv4 (txOff + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  ObsInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec3 e;\n  float mIdf, ha;\n  mIdf = float (mId);\n  e = vec3 (0.5 * hbSize.x, hbSize.y, 2. * hbSize.z);\n  rm = 0.8 * (floor (vec3 (mod (mIdf, e.x), mod (mIdf, e.x * e.y) / e.x,\n     mIdf / (e.x * e.y))) - 0.5 * (e - 1.));\n  rm.x += hbSize.x - 4.5;\n  ha = mIdf + rSeed;\n  vm = 0.05 * normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1. - 0.3 * Hashff (ha + 0.1);\n  bCol = floor (nBin * Hashff (ha + 1.1));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, p, qm;\n  vec3 rm, vm, wm, blkAng;\n  vec2 iFrag, canvas;\n  float el, az, diam, bCol, bc, vMax, nCyc, todCur, todInit;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + txOff) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= txOff) mId = (pxId - txOff) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  delT = 0.005;\n  if (doInit) {\n    hbSize = vec3 (nbEdge);\n    nStep = 0.;\n    nCyc = 0.;\n    el = 0.;\n    az = 0.;\n    todInit = todCur;\n    nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    blkAng = vec3 (0., -0.5 * pi, 1.5 * pi);\n  } else {\n    stDat = Loadv4 (0);\n    hbSize = stDat.xyz;\n    stDat = Loadv4 (1);\n    blkAng = stDat.xyz;\n    nCyc = stDat.w;\n    stDat = Loadv4 (2);\n    nBin = stDat.w;\n    stDat = Loadv4 (3);\n    el = stDat.x;\n    az = stDat.y;\n    todInit = stDat.z;\n    nStep = stDat.w;\n    ++ nStep;\n  }\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = clamp (0.5 * pi * mPtr.y, -0.2 * pi, 0.);\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), blkAng.x));\n  gVec.xy = Rot2D (gVec.xy, blkAng.z);\n  rSeed = 11.1 * mod (todInit, 1.);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam, bCol);\n    else Step (mId, rm, vm, qm, wm, diam, bCol);\n  }\n  if (nStep > 1000.) {\n    vMax = 0.;\n    for (int n = VAR_ZERO; n < nBall; n ++) vMax = max (vMax, length (Loadv4 (txOff + 4 * n + 1).xyz));\n    if (vMax < 0.5) {\n      nStep = 0.;\n      ++ nCyc;\n      if (mod (nCyc, 2.) > 0.) bc = floor (nBin * (0.5 * rm.z / hbSize.z + 0.5));\n      else todInit = todCur;\n      rSeed = 11.1 * mod (todInit, 1.);\n      Init (mId, rm, vm, qm, wm, diam, bCol);\n      if (mod (nCyc, 2.) > 0.) bCol = bc;\n      else nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    }\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = vec4 (blkAng, nCyc);\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, nBin);\n  else if (pxId == 3) stDat = vec4 (el, az, todInit, nStep);\n  else {\n    mId = pxId - (txOff + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, bCol)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= txOff) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Magic Ball Sorter\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst ivec3 nbEdge = ivec3 (20, 2, 16);\nconst int nBall = nbEdge.x * nbEdge.y * nbEdge.z;\n\nvec3 hbSize, gVec;\nfloat nStep, fOvlap, fricN, fricS, fricT, delT, nBin, rSeed;\nconst float txRow = 128.;\nconst int txOff = 4;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvoid PairInt (int mId, vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, dv;\n  float diamN, rSep, diamAv, h, fc, ft;\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    p = Loadv4 (txOff + 4 * n);\n    rmN = p.xyz;\n    diamN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    diamAv = 0.5 * (diam + diamN);\n    if (n != mId && rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      vmN = Loadv4 (txOff + 4 * n + 1).xyz;\n      wmN = Loadv4 (txOff + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((diam * wm + diamN * wmN) / (diam + diamN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid BdyInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec4 drw;\n  vec3 dr, dv;\n  float rSep, diamAv, h, fc, ft;\n  diamAv = 0.5 * (diam + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = VAR_ZERO; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < diamAv) {\n      fc = fOvlap * (diamAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n}\n\nvoid ObsInt (vec3 rm, vec3 vm, vec3 wm, float diam, inout vec3 am, inout vec3 wam)\n{\n  vec3 dr, dv;\n  vec2 cEdge;\n  float cGap, hGap, hHt, vHt, rSep, diamAv, h, fc, ft, fHoriz;\n  fHoriz = 0.5;\n  cGap = 2.5;\n  hGap = 0.2;\n  hHt = 0.5;\n  cEdge = vec2 (3.5, 4.5);\n  vHt = 8.;\n  diamAv = 0.5 * (diam + 1.);\n  dr.y = 0.;\n  dr.xz = rm.xz;\n  dr.z += 0.25 * cGap * sign (mod (floor (dr.x / cGap + 0.5), 2.) - 0.5);\n  if (abs (dr.x) < cEdge.x * cGap && abs (dr.z) < cEdge.y * cGap)\n     dr.xz = mod (dr.xz + 0.5 * cGap, cGap) - 0.5 * cGap;\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  if (mod (nBin, 2.) != 0.) dr.z += hbSize.z / nBin;\n  dr.z = mod (dr.z + hbSize.z / nBin, 2. * hbSize.z / nBin) - hbSize.z / nBin;\n  dr.x = max (dr.x + hbSize.x - vHt, 0.);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  dr.xz = rm.xz;\n  dr.x -= hHt * hbSize.x;\n  if (dr.x > 0.) am.z -= fHoriz * sign (rm.z);\n  else am.z += 0.5 * fHoriz * sign (rm.z);\n  dr.z = min (abs (dr.z) - hGap * hbSize.z, 0.) * sign (dr.z);\n  rSep = length (dr);\n  if (rSep < diamAv) {\n    fc = fOvlap * (diamAv / rSep - 1.);\n    dv = vm;\n    h = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * h, 0.);\n    am += fc * dr;\n    dv -= h * dr + cross (wm, dr);\n    ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec4 p;\n  vec3 am, wam;\n  float fDamp, grav, ms;\n  fOvlap = 1000.;\n  fricN = 10.;\n  fricT = 10.;\n  fricS = 0.5;\n  fDamp = 0.001;\n  grav = 5.;\n  p = Loadv4 (txOff + 4 * mId);\n  rm = p.xyz;\n  diam = p.w;\n  p = Loadv4 (txOff + 4 * mId + 1);\n  vm = p.xyz;\n  bCol = p.w;\n  qm = Loadv4 (txOff + 4 * mId + 2);\n  wm = Loadv4 (txOff + 4 * mId + 3).xyz;\n  ms = diam * diam * diam;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  PairInt (mId, rm, vm, wm, diam, am, wam);\n  BdyInt (rm, vm, wm, diam, am, wam);\n  ObsInt (rm, vm, wm, diam, am, wam);\n  am -= grav * gVec + fDamp * vm;\n  wam -= fDamp * wm;\n  vm += delT * am / ms;\n  rm += delT * vm;\n  wm += delT * wam / (0.2 * ms * diam);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * delT * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float diam, out float bCol)\n{\n  vec3 e;\n  float mIdf, ha;\n  mIdf = float (mId);\n  e = vec3 (0.5 * hbSize.x, hbSize.y, 2. * hbSize.z);\n  rm = 0.8 * (floor (vec3 (mod (mIdf, e.x), mod (mIdf, e.x * e.y) / e.x,\n     mIdf / (e.x * e.y))) - 0.5 * (e - 1.));\n  rm.x += hbSize.x - 4.5;\n  ha = mIdf + rSeed;\n  vm = 0.05 * normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (ha), Hashff (ha + 0.3), Hashff (ha + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  diam = 1. - 0.3 * Hashff (ha + 0.1);\n  bCol = floor (nBin * Hashff (ha + 1.1));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, p, qm;\n  vec3 rm, vm, wm, blkAng;\n  vec2 iFrag, canvas;\n  float el, az, diam, bCol, bc, vMax, nCyc, todCur, todInit;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + txOff) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= txOff) mId = (pxId - txOff) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  delT = 0.005;\n  if (doInit) {\n    hbSize = vec3 (nbEdge);\n    nStep = 0.;\n    nCyc = 0.;\n    el = 0.;\n    az = 0.;\n    todInit = todCur;\n    nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    blkAng = vec3 (0., -0.5 * pi, 1.5 * pi);\n  } else {\n    stDat = Loadv4 (0);\n    hbSize = stDat.xyz;\n    stDat = Loadv4 (1);\n    blkAng = stDat.xyz;\n    nCyc = stDat.w;\n    stDat = Loadv4 (2);\n    nBin = stDat.w;\n    stDat = Loadv4 (3);\n    el = stDat.x;\n    az = stDat.y;\n    todInit = stDat.z;\n    nStep = stDat.w;\n    ++ nStep;\n  }\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = clamp (0.5 * pi * mPtr.y, -0.2 * pi, 0.);\n  }\n  gVec = vec3 (0., Rot2D (vec2 (1., 0.), blkAng.x));\n  gVec.xy = Rot2D (gVec.xy, blkAng.z);\n  rSeed = 11.1 * mod (todInit, 1.);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, diam, bCol);\n    else Step (mId, rm, vm, qm, wm, diam, bCol);\n  }\n  if (nStep > 1000.) {\n    vMax = 0.;\n    for (int n = VAR_ZERO; n < nBall; n ++) vMax = max (vMax, length (Loadv4 (txOff + 4 * n + 1).xyz));\n    if (vMax < 0.5) {\n      nStep = 0.;\n      ++ nCyc;\n      if (mod (nCyc, 2.) > 0.) bc = floor (nBin * (0.5 * rm.z / hbSize.z + 0.5));\n      else todInit = todCur;\n      rSeed = 11.1 * mod (todInit, 1.);\n      Init (mId, rm, vm, qm, wm, diam, bCol);\n      if (mod (nCyc, 2.) > 0.) bCol = bc;\n      else nBin = 4. + floor (3. * Hashff (mod (todInit, 1.)));\n    }\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = vec4 (blkAng, nCyc);\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, nBin);\n  else if (pxId == 3) stDat = vec4 (el, az, todInit, nStep);\n  else {\n    mId = pxId - (txOff + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, diam) : vec4 (vm, bCol)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= txOff) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}