{
    "Shader": {
        "info": {
            "date": "1681111042",
            "description": "inspiration: https://twitter.com/pickover/status/1644864126462599169",
            "flags": 0,
            "hasliked": 0,
            "id": "mdKXWh",
            "likes": 50,
            "name": "crossbars 2",
            "published": 3,
            "tags": [
                "2d",
                "2tweets",
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1126
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/msGXW1\n\n  #define S(v)     smoothstep(0.,1., v)                   // for AAdraw AND for arc shape \n  #define H(p)     fract(sin((p+.17) * 12.9898) * 43.5453)// hash\n  #define N(s,x)  (s)* floor( 4.*H(d+T-7.7*(X+x)+x)/(s) ) // random node(time#, ball#, stage#)\n  #define R       (floor(iResolution.xy/8.)*8.)           // to avoid fwidth artifact\n//#define arc(t) mix(i,j, S(fract(t)) ) - U.y             // arc trajectory\n  #define arc(t) mix( i+sin(i*iTime)*.2*s, j+sin(j*iTime)*.4*s, S(fract(t)) ) - U.y // animated variant\n           \nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = 4.*U/R - 2.;                                    // normalize window in [-2,2]Â² = 4 stages\n    float s = exp2(-floor(1.-U.x)), S=s, i,j,v,n;       // 2 / number of nodes at each stage\n    \n    O = vec4(1);                                        // start with a white page\n    for( i = .5*s-2.; i < 2.; i += s )                  // === drawing the net (same as ref)\n        for( j = s-2.; j < 2.; j += s+s )               // on each stage, loop on in/out pairs\n            v = arc(U.x),      \n            O *= .5+.5* S( abs(v)/fwidth(v) );          // blacken-draw curve arc()=0\n\n    for ( n=0.; n<1.; n+=.1 )  {                        // === drawing the balls                                  \n        float d = H(n),                                 // lauch 10 per second, at random time d\n              X = floor(U.x), x = U.x-X,                // X = stage#, T = time#\n              t = 2.-iTime+d, T = floor(t); t-=T;       // t = x coords ( fract(t) do each stage in // )                                                      \n        s = S;\n        if (t<.1 && x>.9 ) s*=2., X++;                  // manage ball at stage transition\n        if (t>.9 && x<.1 ) s/=2., X--;\n        i = .5*s-2. + N(s   ,0.);                       // select in/out nodes ( mimic draw curve above )\n        j =    s-2. + N(2.*s,1.);                       // 1: offset for the input nodes \n        v = arc(t);                                         \n        O = mix( vec4(1,0,0,1), O,                      // blend-draw ball\n                 S( length( vec2( fract(U.x-t+.5)-.5, v )*R/4. ) -5. ) );\n    }                                                   // fract: to draw all stages in parallel\n  \n    O = sqrt(O);                                        // to sRGB\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}