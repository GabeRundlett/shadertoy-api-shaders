{
    "Shader": {
        "info": {
            "date": "1635206585",
            "description": "Simulate elastic collisions between circles with velocity and mass mapped to color intensity and size. Red indicates a collision. It is not fully optimized. Relearning a lot of math... Seems to expand and cool down... Now with walls. Less buggy...",
            "flags": 32,
            "hasliked": 0,
            "id": "7dyXDy",
            "likes": 9,
            "name": "elastic collision 2D",
            "published": 3,
            "tags": [
                "collision",
                "simulation",
                "velocity",
                "mass",
                "elastic"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "// Image\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.y;\n    uv.x -= (iResolution.x / iResolution.y - 1.0) / 2.0;\n\n    vec3 col = vec3(0);\n    for (int j = 0; j < N; j++) {\n        vec4 motion = texelFetch(iChannel0, ivec2(j, IPOS), 0);\n        vec4 prop = texelFetch(iChannel0, ivec2(j, IPRP), 0);\n        float dist = distance(uv, motion.xy);\n        if (dist < prop.y) {\n            col = vec3(0, 1, 1);\n            if (dist < prop.y - prop.y * 0.075) {\n                float speed = clamp(length(motion.zw) / length(vec2(MPVELO, MPVELO)), 0.25, 1.0);\n                col = prop.z == 1.0 ? vec3(speed, 0, 0) : vec3(0, speed, 0);\n            }\n        }\n    }\n\n    fragColor = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffer A\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2  uv = fragCoord;\n    ivec2 iv = ivec2(uv);\n\n    vec4 fcol = vec4(0);\n    if (iv.x < N && iv.y < IEND) {\n        if (iFrame == 0) {\n            // initialize\n            /****/ if (iv.y == IPOS) {\n                fcol = vec4(random3(uv.xy + iDate.xy + iTime).xy, 0, 0);\n                vec2 vel = random3(uv.yx + iDate.xy + iTime).xy;\n                vel.x *= random(uv.xy + iDate.xy + iTime) < 0.5 ? -1.0 : +1.0;\n                vel.y *= random(uv.yx + iDate.xy + iTime) < 0.5 ? -1.0 : +1.0;\n                fcol.zw = vel * MPVELO;\n            } else if (iv.y == IPRP) {\n                fcol.x = MPMASS * random(uv.xy + iDate.xy + iTime); // mass\n                fcol.y = fcol.x / MPMASS * MPRADI;                  // radius\n            }\n        } else {\n            vec4 motion1 = texelFetch(iChannel0, ivec2(iv.x, IPOS), 0);\n            vec2 pos1 = motion1.xy;\n            vec2 vel1 = motion1.zw;\n            vec4 prop1 = texelFetch(iChannel0, ivec2(iv.x, IPRP), 0);\n            float mass1 = prop1.x;\n            float radius1 = prop1.y;\n\n            bool cll = false;\n            for (int j = 0; j < N; j++) {\n                if (iv.x != j) {\n                    vec4 motion2 = texelFetch(iChannel0, ivec2(j, IPOS), 0);\n                    vec2 pos2 = motion2.xy;\n                    vec2 vel2 = motion2.zw;\n                    vec4 prop2 = texelFetch(iChannel0, ivec2(j, IPRP), 0);\n                    float mass2 = prop2.x;\n                    float radius2 = prop2.y;\n                    float d = distance(pos1, pos2);\n                    if (d < radius1 + radius2) {\n                        vec2 n = normalize(pos1 - pos2);\n                        pos1 += n * (radius1 + radius2 - d);\n                        if (dot(pos2 - pos1, vel1) > 0.0) { \n                            // https://en.wikipedia.org/wiki/Elastic_collision#Two-dimensional_collision_with_two_moving_objects\n                            vel1 -= (2.0 * mass2 / (mass1 + mass2)) * (dot(vel1 - vel2, pos1 - pos2) / length(pos1 - pos2)) * (pos1 - pos2);\n                            // https://en.wikipedia.org/wiki/Specular_reflection#Vector_formulation\n                            vel1 -= 2.0 * dot(vel1, n) * n;\n                        }\n                        cll = true;\n                        break;\n                    }\n                }\n            }\n            \n            /****/ if (pos1.x - radius1 < 0.0) {\n                pos1.x = radius1;\n                vel1.x *= -1.0;\n            } else if (pos1.x + radius1 > 1.0) {\n                pos1.x = 1.0 - radius1;\n                vel1.x *= -1.0;\n            } else if (pos1.y - radius1 < 0.0) {\n                pos1.y = radius1;\n                vel1.y *= -1.0;\n            } else if (pos1.y + radius1 > 1.0) {\n                pos1.y = 1.0 - radius1;\n                vel1.y *= -1.0;\n            }\n\n            pos1 += vel1 * iTimeDelta;\n\n            /****/ if (iv.y == IPOS) {\n                fcol = vec4(pos1, vel1);\n            } else if (iv.y == IPRP) {\n                fcol = vec4(prop1.x, prop1.y, int(cll), 0);\n            }\n        }\n    }\n\n    fragColor = fcol;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Common\n\n/////// buffer data channel row index: position & velocity\n#define IPOS 0\n/////// buffer data channel row index: properties (mass, radius, & collision)\n#define IPRP 1\n/////// buffer data channel row index: end of data\n#define IEND 2\n/////// number of particles\n#define N 1280 / 4\n/////// maximum particle mass\n#define MPMASS 1.0\n/////// maximum particle radius\n#define MPRADI 0.015\n/////// maximum particle velocity\n#define MPVELO 0.25\n\nfloat random(vec2 seed) {\n    // https://thebookofshaders.com/10/\n    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 random3(vec2 seed) {\n    return vec3(random(seed.xy), random(seed.yx), random(seed.xx));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}