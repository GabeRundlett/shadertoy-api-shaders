{
    "Shader": {
        "info": {
            "date": "1609708010",
            "description": "https://youtu.be/Fq8qgzzm_nA",
            "flags": 64,
            "hasliked": 0,
            "id": "3tcyzl",
            "likes": 6,
            "name": "Aastal - Nothing is less dub",
            "published": 3,
            "tags": [
                "dubstep"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n// A clip I did for a friend\n// The video is here https://youtu.be/Fq8qgzzm_nA\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c);}\n#define FFT(v) (pow(texelFetch(iChannel1, ivec2(v,0),0).x,3.)+.3)\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\n\nfloat _cir(vec2 p, float r)\n{\n    return length(p)-r;\n}\nfloat _rho(vec2 p, float r)\n{\n    return lenny(p)-r;\n}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\nvec3 rdr(vec2 uv)\n{\n    float shp = iResolution.x*.5;\n    vec3 col;\n    mat2 rotCover = r2d((FFT(10)-.5)*.2);\n    vec2 moveScene = rotCover*vec2(FFT(10)-.5, FFT(20)-.5);\n    \n    // Back\n    col = vec3(52, 49, 54)/255.;\n    col += .5*(1.-sat(_cir(uv-vec2(.1,0.), .1)*2.))*(vec3(129, 80, 161)/255.);\n    col += .5*(1.-sat(_cir(uv-vec2(-.1,0.), .05)*2.))*(vec3(129, 80, 161)/255.).xzy;\n    col = pow(col, vec3(2.45));\n    \n    // back grid\n    uv -= .02*moveScene;\n    float gridAStp = .1;\n    float gridATh = 0.0001;\n    \n    vec2 gridAv = mod(uv, gridAStp)-gridATh;\n    float gridA = min(gridAv.x, gridAv.y);\n    col = mix(col, sat(col+vec3(.05)), 1.-sat(gridA*shp));\n    \n    float gridBStp = gridAStp/5.;\n    float gridBTh = gridATh/2.;\n    \n    vec2 gridBv = mod(uv, gridBStp)-gridBTh;\n    float gridB = min(gridBv.x, gridBv.y);\n    col = mix(col, sat(col+vec3(.015)), 1.-sat(gridB*shp));\n    col *= pow((1.-sat(lenny(uv*.5)-.2)), 5.);\n    \n\n    \n    // Piou Piou\n    \n    float barRep = .025;\n    float barTh = 0.002;\n    \n    vec2 uvBars = uv;\n    float barsIdx = round((uvBars.y+barRep*.5) / barRep);\n    uvBars.y = mod(uvBars.y+.5*barRep, barRep)-barRep;\n    \n    float bars = _sqr(uvBars, vec2(FFT(5.*(barsIdx+10.))*.5, barTh));\n    \n    vec3 grad = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)+2.*FFT(barsIdx+10.));\n    col += grad *(1.-sat(bars*shp));\n    col += grad *(1.-sat(bars*5.))*.5;\n    \n    // Logo\n    vec2 coverUv = moveScene*.25+((cos(iTime*.25)*.2+1.)*5.*uv+vec2(.5));//+vec2(sin(iTime), cos(iTime))*.1;\n    //coverUv *= ;\n    vec4 coverBlack4 = texture(iChannel0, coverUv*.95);\n    vec4 cover4 = texture(iChannel0, coverUv);\n    vec3 cover = cover4.xyz;\n    col = col*sat(.0+pow(sat(_rho(coverUv-vec2(.5)-vec2(0.,-.1), .5)*2.), .4));\n    //col *= sat(.5+1.-coverBlack4.w);\n    if (coverUv.x > 0. && coverUv.y > 0. && coverUv.x < 1. && coverUv.y < 1.)\n        ;//col = mix(col, cover, cover4.w); // I use the extension to put a custom texture here\n//        col = cover;\n        \n\n    vec3 rhoCol = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)).zxy;\n    \n    \n    // Border\n    float th = .23;\n    float border = abs(uv.y)-th;\n    \n    col = mix(col, vec3(0.), sat(border*shp));\n    \n    col *= .5+rhoCol*pow(1.-sat(_rho(coverUv-vec2(.5), 1.5)*1.), 1.);\n\n    return col;\n}\n\nvec3 chroma(vec2 uv)\n{\n    vec2 dir = normalize(vec2(1.));\n    float strength = 0.025*sat(length(uv))+FFT(10)*.05*length(uv);\n    vec3 rgb;\n    \n    rgb.x = rdr(uv+dir*strength).x;\n    rgb.y = rdr(uv).y;\n    rgb.z = rdr(uv-dir*strength).z;\n    \n    return rgb;\n}\n\nvec3 cheapAA(vec2 uv)\n{\n    vec3 col = chroma(uv);\n    vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n    float diff = pow(fwidth(col.z), 1.);\n    if (true)//diff > 0.3) // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    uv.y *= 1.+abs(uv.x);\n    vec3 col = cheapAA(uv);\n    \n    col = mix(col, col.zxy*(2.-sat(length(uv*4.))), sin(iTime*.5)*.5+.5);\n\n    \n    col *= sat(iTime-0.2);\n    col *= 1.-sat(iTime-213.);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 25179,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/aastal/nothing-is-less"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}