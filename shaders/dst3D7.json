{
    "Shader": {
        "info": {
            "date": "1677451578",
            "description": "Forked from Ohanami Stipple, which is a port of the code from the \"Ohanami\" 4kb demo: https://www.pouet.net/prod.php?which=71888\nSome code borrowings from IQ clouds.\n\nUse mouse X to change camera angle.",
            "flags": 32,
            "hasliked": 0,
            "id": "dst3D7",
            "likes": 12,
            "name": "Countryside in Autumn",
            "published": 3,
            "tags": [
                "clouds",
                "grass",
                "tree"
            ],
            "usePreview": 1,
            "username": "guil",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "\nfloat col=5.,col2=1e3,col3=1e3;\n\n\n// Signed distance field function.\nfloat f(vec3 p)\n{\n    float ter = -fbm(.2*p.xz+2.)*.3; // Ground\n    col3=p.y-ter;\n    p.y-=ter;\n    float d=max(col3,p.y);\n    \n    \n    if(length(p)<10.)p.xz = mod(p.xz+3.,5.)-2.;// Multiply trees\n      \n    float s=1.,s1=s,g=1.6,g1=1.7;\n       \n    mat2 m1 = r2D(2.2);\n    mat2 m2 = r2D(1.05);\n    mat2 m3 = r2D(-.1);\n\n    int j=7;\n    float h=3.;\n    float scale=.7;\n    p/=scale;\n    \n    //float a = length(p-vec3(0,h/2.,0))-h/2.;\n    //if(a>2.)return min(d, a); \n    \n    \n    // Evaluate the tree \n    d=min(d,scale*max(p.y-h,max(-p.y,length(p.xz)-.1/(p.y+.7)))/s);// trunc \n    for(int k=0;k<int(h);k++){\n      vec3 q=p;\n      s=s1;\n      // Evaluate the tree branches\n      for(int i=0;i<j;\n        q.x=abs(q.x),\n        q.z=(i==0)?q.z:abs(q.z), \n        q.y-=1.,\n        q.xz *= m2,\n        q.xy *= m1,\n        q.xz *= m3,\n        q*=g,\n        s*=g,\n        d=min(d,scale*max(q.y-1.,max(-q.y,length(q.xz)-.1/(q.y+.7)))/s),\n        ++i);\n      // Leaves\n      q.y-=1.;      \n      float l = (length(q*vec3(.6,.3,1.))-.3)/s;\n      if(l<d)col=max(0.,l), d=l;      \n      // return to trunc\n      p.y-=1.5;\n      p.xz *= -m1,\n      s1*=g1;\n      p*=g1;\n      j -=1;}\n    \n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy -.5;\n    uv.x*=iResolution.x/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    float zoom=1.;\n   \n    // Set up camera and primary ray.\n    vec3 ro=1.*vec3(sin(3.0*m.x),0.*m.y+2.,cos(3.0*m.x));\n    vec3 rd=normalize(vec3(uv.xy,zoom));\n    vec3 target=vec3(0,2.,0);\n\n    vec3 w=normalize(target-ro);\n    vec3 u=normalize(cross(w,vec3(0,1,0)));\n    vec3 v=normalize(cross(w,-u));\n\n    rd=mat3(u,v,w)*rd;\n    \n    // Sky \n    vec3 eps = vec3(1./iResolution.xy,0.);\n    uv = .5+.5*uv;\n    fragColor =  texture( iChannel0, uv,0.)*.2\n                +texture( iChannel0, uv+eps.xz,0.)*.2\n                +texture( iChannel0, uv-eps.xz,0.)*.2\n                +texture( iChannel0, uv+eps.zy,0.)*.2\n                +texture( iChannel0, uv-eps.zy,0.)*.2;\n    \n    \n    // Signed distance field raymarch.\n    float t=0.,d=0.;\n    for(int i=0;i<100;++i)\n    {\n        d=f(ro+rd*t);\n        if(d<1e-3)break;\n        t+=d*.9;\n        if(t>30.)return;\n    }\n\n    // Colourise ground, branch/trunk, or cherry blossom.\n    {\n        vec3 rp=ro+rd*t;\n        fragColor.rgb=vec3(.75,.6,.4)/1.5;//wood\n        if(col<2e-3)fragColor.rgb=vec3(1.,.5,.1);//red leaves\n        if(col3<1e-2||t>12.)//grass\n            fragColor.rgb=vec3(.6,1.,.6)/3.,\n            fragColor.rg +=fbm1(rp.xz*.2)/8.,\n            fragColor.rgb +=texture(iChannel1,rp.xz*1.4+iTime*.1).rgb/3.;\n    }\n\n    // Lighting.\n    vec3 ld=sundir;\n    float e=1e-2;\n    float d2=f(ro+rd*t+ld*e);\n    float l=max(0.,(d2-d)/e);\n\n    float d3=f(ro+rd*t+vec3(0,1,0)*e);\n    float l2=max(0.,.5+.5*(d3-d)/e);\n\n    vec3 rp=ro+rd*(t-1e-3);\n\n    // Directional shadow.\n    t=0.1;\n    float sh=1.;\n    for(int i=0;i<30;++i)\n    {\n        d=f(rp+ld*t)+.01;\n        sh=min(sh,d*50.+0.3);\n        if(d<1e-4)break;\n        t+=d;\n    }\n\n    fragColor.rgb*=1.5*sh*(.2+.8*l)*vec3(1.,1.,.9)*.7+l2*vec3(.85,.85,1.)*.4;\n    fragColor.rgb=clamp(fragColor.rgb,0.,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 sundir = normalize( vec3(-1.,.5,-1.) );\nconst vec3 suncol = vec3(1.,.8,.5);\n\n\nmat2 r2D(float a)\n{\n\tfloat si = sin(a);\n\tfloat co = cos(a);\n\treturn mat2(si, co, -co, si);\n}\n\nfloat fbm(vec2 p)//ground\n{\n    float s=.3;\n    mat2 m = r2D(1.);\n    vec2 r= vec2(0.);\n    for(int i=0;i<7;i++)r+=sin(p), p=m*(p*s+.2*r+.1),s*=1.6;\n    return r.x+r.y;\n}\n\nfloat fbm1(vec2 p)//grass\n{\n    float s=2.;\n    mat2 m = r2D(1.);\n    vec2 r= vec2(0.);\n    for(int i=0;i<8;i++)r+=(sin(p.yx+.5))/s, p=m*p*s+cos(r.yx*s), s*=1.02;\n    return (r.x+r.y)/s;\n}\n\n\nfloat fbm2(vec3 p, float t)//clouds\n{\n    float s=1., r= -2.9;\n    mat2 m = r2D(1.);\n    vec3 n = vec3(1.);\n    for(int i=0;i<12;i++)\n        p.xy *= m,\n        p.xz *= m,\n        n+=.5*cos(p.zxy+.05*t)/s, \n        r+=length(sin(p*s+n)/s),\n        s*=1.5;\n    return r;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nconst float sc =.5;\nconst float low = 2.;\nconst float high = 7.;\n\nfloat f(vec3 p)\n{\n    p *= sc;\n    p.z +=.2*iTime;\n    float d =fbm2(p*vec3(.3,1.2,.4),iTime)/sc;\n    return d+exp(low-p.y)+exp(p.y-high);\n}\n\nvec2 raymarch( vec3 ro, vec3 rd)\n{\n    float t=5.,d=0.,c=0.,dd,k=.85;\n    for(int i=0;i<100;++i)\n    {\n        d=f(ro+rd*t);        \n        c+=exp(-d*d);\n        t+=d*k;\n        k*=1.003;\n        if(t>150.)return vec2(0.);       \n    }\n\n    ro =ro+rd*t,t=1.2;\n    if(sc*ro.y>high)return vec2(0.);   \n    dd=d;\n    d=f(ro+sundir*t);\n    return vec2(.4*(d-dd)/t,c*.004);\n}\n\nvec4 render( in vec3 ro, in vec3 rd )//modified from IQ clouds\n{\n    // background sky         \n    float sun = clamp( dot(sundir,rd), 0.0, 1.0 );    \n    vec3 col = vec3(0.6,0.6,0.78) - rd.y*0.2*vec3(1.0,0.4,.05) + 0.1*0.5;    \n    col += 0.4*suncol*pow( sun, 8.0 );  \n    // clouds        \n    vec2 res = raymarch( ro, rd);\n    float k = res.x, c=res.y;\n    if(c>.0)\n       col = k>0.? col*.9+(.2+3.5*k)*c*suncol : col*(.9+.8*k)+.1*suncol,\n       col += vec3(0.2,0.08,0.04)*pow( sun, 3.0 );    \n    return vec4( col, 1.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy -.5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n   \n\n    float zoom=1.;   \n    vec3 ro=1.*vec3(sin(3.*m.x),0.*m.y+2.,cos(3.*m.x));\n    vec3 rd=normalize(vec3(uv.xy,zoom));\n    vec3 target=vec3(0,2.,0);\n\n    vec3 w=normalize(target-ro);\n    vec3 u=normalize(cross(w,vec3(0,1,0)));\n    vec3 v=normalize(cross(w,-u));\n\n    rd=mat3(u,v,w)*rd;\n    \n    fragColor = render( ro, rd );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}