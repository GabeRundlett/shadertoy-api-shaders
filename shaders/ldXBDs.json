{
    "Shader": {
        "info": {
            "date": "1498773879",
            "description": "my first voronoi edge distance shader, uses smoothmin to make round corners",
            "flags": 0,
            "hasliked": 0,
            "id": "ldXBDs",
            "likes": 24,
            "name": "round voronoi",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 1039
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define roundness 1.0\n\nfloat dot2(vec2 p) {\n    return dot(p,p);\n}\n//smoothmin function by iq\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 get_point(float i)\n{\n    return vec2(sin(time*i*i*0.01)+cos(i)*0.5,cos(time*i*0.12)+sin(i)*0.5)*7.0;\n}\n\nvec2 map(vec2 p) {\n    float len = 10000.0;\n    vec2 cell;\n    float id;\n    \n    //finding closest point\n    for(float i = 1.0; i < 10.0; i++) {\n        //making cell position\n        vec2 orig = get_point(i);\n        \n        //checking if this cell is closer than the others\n        if (len > dot2(p-orig)) {\n            cell = orig;\n            id = i;\n            len = dot2(p-orig);\n        }\n    }\n    \n    //finding length\n    for(float i2 = 1.0; i2 < 10.0-1.0; i2++) {\n        float i = i2;\n        // skip the same cell\n        if (i >= id) i++;\n    \n        //making cell position\n        vec2 orig = get_point(i);\n        \n        //the point between two cells\n        vec2 mid = (orig+cell)*0.5;\n        //finding the length from the two cells borders\n        float num = dot(normalize(orig-cell),p-mid);\n        //compare to current smallest length from borders\n        len = smin(len,abs(num),roundness);\n    }\n    \n    return vec2(len, id);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = 10.0*(fragCoord.xy*2.0-iResolution.xy) / iResolution.y;\n    \n    vec2 info = map(uv);\n    float id = info.y;\n    float len = info.x;\n    // some random colors\n    vec3 c = vec3(sin(info.y)*0.5+0.5, cos(info.y*2.345)*0.5+0.5, fract(info.y*0.342));\n    \n\tfragColor = vec4(min(len*10.0, 1.0)*c, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}