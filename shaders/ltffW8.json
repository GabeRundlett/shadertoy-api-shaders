{
    "Shader": {
        "info": {
            "date": "1511722979",
            "description": "Play with #define TEST in BufA to test the optimizer (see comments).\nOn my nvidia, optimizer \n- recognize cos(i)  already calculated\n- only if it was end result: cos(i)+1  not help cos(i)-1\n- still, 1.*cos(i)-0. seen as cos(i)\n- cos(N)  moved out of loop",
            "flags": 32,
            "hasliked": 0,
            "id": "ltffW8",
            "likes": 0,
            "name": "testing optimizer (3)",
            "published": 3,
            "tags": [
                "fps",
                "gpu",
                "perfmeter",
                "compilation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": "// reusing test base of https://shadertoy.com/view/lllfz7\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tO =  texelFetch(iChannel0, ivec2(U), 0);\n    O += texelFetch(iChannel1, ivec2(U), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TEST 0 // 0 - 6\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float  N =  texelFetch(iChannel0, ivec2(0),0).a ;// N will adjust depending on your GPU power\n    O -= O;\n    \n    for (float i=0.; i<N; i++) {\n        float c,s;\n       #if   TEST == 0\n        O.xy += U * mat2(c=cos(i),s=sin(i),-s,c);\n       #elif TEST == 1\n        O.xy += U * mat2(cos(i),sin(i),-sin(i),cos(i));              \n       #elif TEST == 2\n        O.xy += U * mat2(cos(i),sin(i), 1.-sin(i)*2.,1.-cos(i)*2.);\n       #elif TEST == 3\n        O.xy += U * mat2(sin(i)+1.,cos(i)+1., cos(i),sin(i));\n       #elif TEST == 4                                                    // costlier\n        O.xy += U * mat2(sin(i)+1.,cos(i)+1., cos(i)-1.,sin(i)-1.);\n       #elif TEST == 5\n        O.xy += U * mat2(sin(i)+1.,cos(i)+1., 1.*cos(i)-0.,1.*sin(i)-0.);\n       #elif TEST == 6\n        O.xy += U * mat2(cos(N),sin(N),-sin(N),cos(N));                  // free :-) \n       #endif\n    }\n    \n    O = .01*sign(O);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// performance meter + GPU power qualibration\n\nvoid mainImage( out vec4 O, vec2 U )\n{                                                        // N will adjust depending on your GPU power\n    int N = iFrame==0 ? 30000 : int( texelFetch(iChannel0, ivec2(0),0).a );\n    float sTimeDelta = texelFetch(iChannel0, ivec2(1),0).a,\n          h = iResolution.y;   \n    U -= .5;                                                     \n    O = texelFetch(iChannel0, ivec2(U-vec2(1,0)), 0);    // scrool the perf display\n    \n    if (U.x==0. && U.y < h/(iTimeDelta*65.) ) O += .8;   // fps. top = 65 fps\n    if (U.x==0. && abs(U.y - h/(sTimeDelta*65.) ) < 1. ) O = vec4(0,1,0,0); // smoothed fps\n    if (mod(U.y,10.*iResolution.y/65.) < 1.) O = vec4(1,0,0,0);   // red line every 10 fps\n    \n    O.a = iFrame<30 && U==vec2(0) && h>200.              // use 30 frames to adjust to your computer\n        ? float(N) * (.9 + .1*(1./31.)/iTimeDelta )      // relaxation towards 30fps goal.\n        : float(N);\n\n    if (U==vec2(1)) O.a = .9*sTimeDelta + .1*iTimeDelta; // smoothed FPS;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}