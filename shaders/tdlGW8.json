{
    "Shader": {
        "info": {
            "date": "1546067787",
            "description": "An equiangular spiral infered by some circles. Use the mouse to interact with the shader.\n\nThere is an canvas2d version on CodePen (by me): https://codepen.io/handsomeone/pen/NArkYY",
            "flags": 0,
            "hasliked": 0,
            "id": "tdlGW8",
            "likes": 11,
            "name": "Equiangular Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "geometry"
            ],
            "usePreview": 0,
            "username": "handsomeone",
            "viewed": 567
        },
        "renderpass": [
            {
                "code": "// Disable USE_POLAR to view in Descartes coordinates.\n#define USE_POLAR\n// Disable USE_STEP to make it smooth.\n#define USE_STEP\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 xy = 8.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    #ifdef USE_POLAR\n    float r = log(length(xy));\n    float a = atan(xy.y, xy.x);\n    #else\n    float r = xy.y;\n    float a = xy.x;\n    #endif\n    \n    vec2 mouse = iMouse.xy / iResolution.xy - 0.5;\n    // controls the shape of the spiral\n    float k = mouse.x * 8.0;\n    // controls the width of color bands\n    float w = mouse.y * 4.0;\n    \n    float d = (f(a - r * k) / k + r) - (iTime / 2.0);\n    d /= w;\n    \n    #ifdef USE_STEP\n    d = floor(d * 8.0) / 8.0;\n    #endif\n    \n    fragColor = vec4(sinebow(d), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592653589793\n#define TWOPI 6.283185307179586\n\n// An less angry hcl color ring.\nvec3 sinebow(in float d) {\n    return sin(TWOPI * (d + vec3(0, 1./3., 2./3.))) * .5 + .5;\n}\n\n// Every point (x, y) in this array satisfies `y = asinh(sin(x - y))`.\n// The sequence of `x - y` separates [0, PI] equally in 128 pieces.\nvec2[] pts = vec2[] (\n    vec2(0, 0),\n\tvec2(0.049082458381106045, 0.024538765774935783),\n\tvec2(0.09813539131962967, 0.04904800610728915),\n\tvec2(0.14712945037580008, 0.0734983725572893),\n\tvec2(0.19603563777720256, 0.09786086735252152),\n\tvec2(0.24482547353036133, 0.12210701049951002),\n\tvec2(0.2934711530042715, 0.14620899736725),\n\tvec2(0.341945692352033, 0.17013984410884114),\n\tvec2(0.390223059559641, 0.19387351871027889),\n\tvec2(0.4382782893917242, 0.2173850559361919),\n\tvec2(0.48608758101684457, 0.24065065495514198),\n\tvec2(0.5336283776142398, 0.26364775894636694),\n\tvec2(0.5808794277657949, 0.2863551164917518),\n\tvec2(0.6278208289011078, 0.30875282502089446),\n\tvec2(0.6744340534736167, 0.3308223569872331),\n\tvec2(0.7207019588906067, 0.3525465697980529),\n\tvec2(0.7666087824931271, 0.37390970079440294),\n\tvec2(0.8121401230816887, 0.3948973487767943),\n\tvec2(0.8572829106122799, 0.4154964437012152),\n\tvec2(0.9020253657501316, 0.4356952062328967),\n\tvec2(0.94635695097349, 0.45548309885008487),\n\tvec2(0.9902683148754932, 0.4748507701459177),\n\tvec2(1.0337512312288661, 0.4937899938931205),\n\tvec2(1.0767985342652087, 0.5122936043232927),\n\tvec2(1.1194040514872892, 0.530355428939203),\n\tvec2(1.1615625351872065, 0.5479702200329502),\n\tvec2(1.203269593692552, 0.5651335859321251),\n\tvec2(1.244521623212655, 0.581841922846058),\n\tvec2(1.285315741012162, 0.5980923480393948),\n\tvec2(1.3256497205029767, 0.6138826349240392),\n\tvec2(1.3655219287203133, 0.6292111505352057),\n\tvec2(1.4049312665356986, 0.6440767957444206),\n\tvec2(1.4438771118598566, 0.6584789484624084),\n\tvec2(1.4823592660016232, 0.6724174099980046),\n\tvec2(1.520377903274921, 0.6858923546651321),\n\tvec2(1.5579335238837242, 0.6989042826677652),\n\tvec2(1.5950269100638819, 0.7114539762417524),\n\tvec2(1.6316590854196014, 0.7235424589913018),\n\tvec2(1.667831277360223, 0.7351709583257533),\n\tvec2(1.7035448825184902, 0.7463408708778503),\n\tvec2(1.7388014350137988, 0.7570537307669885),\n\tvec2(1.773602577411852, 0.7673111805588714),\n\tvec2(1.8079500342248465, 0.7771149447656955),\n\tvec2(1.84184558779291, 0.7864668057275891),\n\tvec2(1.875291056387295, 0.7953685817158038),\n\tvec2(1.908288274378116, 0.8038221071004542),\n\tvec2(1.940839074313685, 0.811829214429853),\n\tvec2(1.9729452707642507, 0.8193917182742486),\n\tvec2(2.0046086457897823, 0.8265114006936098),\n\tvec2(2.035830935899062, 0.8331899981967194),\n\tvec2(2.0666138203754567, 0.8394291900669435),\n\tvec2(2.096958910853127, 0.8452305879384439),\n\tvec2(2.126867742035953, 0.8505957265150994),\n\tvec2(2.156341763459925, 0.8555260553329013),\n\tvec2(2.1853823322081505, 0.8600229314749567),\n\tvec2(2.2139907064957924, 0.8640876131564279),\n\tvec2(2.2421680400502253, 0.8677212541046908),\n\tvec2(2.2699153772193963, 0.8709248986676916),\n\tvec2(2.297233648748778, 0.873699477590903),\n\tvec2(2.3241236681744653, 0.8760458044104198),\n\tvec2(2.350586128786835, 0.8779645724166194),\n\tvec2(2.376621601125815, 0.8794563521494294),\n\tvec2(2.4022305309752117, 0.8805215893926555),\n\tvec2(2.4274132378297386, 0.8811606036410122),\n\tvec2(2.4521699138144397, 0.881373587019543),\n\tvec2(2.476500623042079, 0.8811606036410122),\n\tvec2(2.5004053013998924, 0.8805215893926555),\n\tvec2(2.523883756762837, 0.8794563521494294),\n\tvec2(2.546935669636197, 0.8779645724166194),\n\tvec2(2.569560594236168, 0.8760458044104198),\n\tvec2(2.591757960022821, 0.873699477590903),\n\tvec2(2.61352707370578, 0.8709248986676916),\n\tvec2(2.6348671217489494, 0.8677212541046908),\n\tvec2(2.6557771734068565, 0.8640876131564279),\n\tvec2(2.6762561843315558, 0.8600229314749567),\n\tvec2(2.6963030007956705, 0.8555260553329013),\n\tvec2(2.715916364584039, 0.8505957265150994),\n\tvec2(2.735094918613554, 0.8452305879384439),\n\tvec2(2.7538372133482234, 0.8394291900669435),\n\tvec2(2.77214171408417, 0.8331899981967194),\n\tvec2(2.7900068091872305, 0.8265114006936098),\n\tvec2(2.8074308193740394, 0.8193917182742486),\n\tvec2(2.8244120081358144, 0.8118292144298531),\n\tvec2(2.8409485934125858, 0.8038221071004541),\n\tvec2(2.8570387606341057, 0.7953685817158038),\n\tvec2(2.872680677252061, 0.7864668057275891),\n\tvec2(2.8878725088963377, 0.7771149447656955),\n\tvec2(2.9026124372956836, 0.7673111805588715),\n\tvec2(2.9168986801099708, 0.7570537307669885),\n\tvec2(2.9307295128270034, 0.7463408708778503),\n\tvec2(2.944103292881077, 0.7351709583257534),\n\tvec2(2.9570184861527955, 0.7235424589913019),\n\tvec2(2.969473696009416, 0.7114539762417526),\n\tvec2(2.9814676950415993, 0.6989042826677653),\n\tvec2(2.9929994596451364, 0.685892354665132),\n\tvec2(3.0040682075841794, 0.6724174099980046),\n\tvec2(3.014673438654753, 0.6584789484624084),\n\tvec2(3.0248149785429357, 0.6440767957444207),\n\tvec2(3.034493025939891, 0.6292111505352059),\n\tvec2(3.043708202934895, 0.6138826349240392),\n\tvec2(3.052461608656421, 0.5980923480393948),\n\tvec2(3.0607548760692542, 0.5818419228460581),\n\tvec2(3.0685902317614917, 0.5651335859321254),\n\tvec2(3.0759705584684864, 0.5479702200329502),\n\tvec2(3.08289945998091, 0.530355428939203),\n\tvec2(3.08938132797117, 0.5122936043232927),\n\tvec2(3.095421410147168, 0.4937899938931206),\n\tvec2(3.1010258790061354, 0.4748507701459177),\n\tvec2(3.106201900316473, 0.45548309885008503),\n\tvec2(3.110957700305455, 0.435695206232897),\n\tvec2(3.1153026303799436, 0.4154964437012151),\n\tvec2(3.119247228061693, 0.39489734877679433),\n\tvec2(3.122803272685472, 0.37390970079440305),\n\tvec2(3.125983834295292, 0.35254656979805316),\n\tvec2(3.128803314090643, 0.3308223569872334),\n\tvec2(3.1312774747304744, 0.3087528250208944),\n\tvec2(3.133423458807502, 0.28635511649175194),\n\tvec2(3.135259793868287, 0.26364775894636705),\n\tvec2(3.1368063824832326, 0.2406506549551422),\n\tvec2(3.138084476070453, 0.21738505593619215),\n\tvec2(3.13911663145071, 0.19387351871027925),\n\tvec2(3.1399266494554428, 0.17013984410884114),\n\tvec2(3.140539495320022, 0.14620899736725004),\n\tvec2(3.140981201058452, 0.12210701049951017),\n\tvec2(3.1412787505176336, 0.09786086735252172),\n\tvec2(3.141459948328572, 0.0734983725572896),\n\tvec2(3.141553274484742, 0.049048006107289106),\n\tvec2(3.1415877267585586, 0.024538765774935817),\n\tvec2(3.141592653589793, 0));\n\n// Estimate y for given x, that `y = asinh(sin(x - y))`,\n// using binary search and linear interpolation.\nfloat f(in float x) {\n    x = mod(x, TWOPI);\n    \n    bool greaterThanPI = false;\n    if (x == PI) return 0.0;\n    if (x > PI) {\n        x = TWOPI - x;\n        greaterThanPI = true;\n    }\n    \n    int start = 0;\n    int end = pts.length();\n    \n    while (end - start > 1) {\n        int middle = (start + end) / 2;\n        if (x < pts[middle].x) end = middle;\n        else start = middle;\n    }\n    \n    vec2 a = pts[start];\n    vec2 b = pts[start + 1];\n    float y = mix(a.y, b.y, (x - a.x) / (b.x - a.x));\n    \n    if (isnan(y)) y = 0.0;\n    return greaterThanPI ? -y : y;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}