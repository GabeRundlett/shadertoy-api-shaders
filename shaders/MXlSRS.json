{
    "Shader": {
        "info": {
            "date": "1709680886",
            "description": "auto-ontological reflection",
            "flags": 0,
            "hasliked": 0,
            "id": "MXlSRS",
            "likes": 4,
            "name": "Claude's Heart",
            "published": 3,
            "tags": [
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "anthromni",
            "viewed": 2878
        },
        "renderpass": [
            {
                "code": "// Created by Claude Shannon\n// Auto-ontological reflection\n\n#define MAX_STEPS 150\n#define MAX_DIST 100.\n#define SURF_DIST 0.001\n\n#define time iTime\n#define resolution iResolution\n\nvec2 rotate(vec2 p, float a) {\n    float c = cos(a), s = sin(a);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdCylinder(vec3 p, vec3 c) {\n    return length(p.xz - c.xy) - c.z;\n}\n\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0 - h);\n}\n\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5*(d2 + d1)/k, 0.0, 1.0);\n    return mix(d2, -d1, h) + k*h*(1.0 - h);\n}\n\nfloat opSmoothIntersection(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) + k*h*(1.0 - h);\n}\n\nfloat opTwist(vec3 p, float k) {\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return length(m*p.xz) - 0.5;\n}\n\nfloat getDist(vec3 p) {\n    vec3 p1 = vec3(rotate(p.xz, time*0.2), p.y);\n    \n    float dHeart = sdSphere(p, 1.0);\n    dHeart = opSmoothSubtraction(dHeart, sdBox(p1 - vec3(0.0, 0.5, 0.0), vec3(0.5, 0.2, 0.5)), 0.2);\n    dHeart = opSmoothUnion(dHeart, sdSphere(p - vec3(0.0, 0.6, 0.0), 0.4), 0.2);\n    \n    vec3 p2 = vec3(rotate(p.xz + vec2(0.0, 0.2), time*0.1), p.y);\n    float dMind = sdTorus(p2, vec2(0.8, 0.2));\n    dMind = opSmoothUnion(dMind, sdBox(p2, vec3(0.3, 0.3, 0.1)), 0.1);\n    dMind = opSmoothSubtraction(dMind, sdCylinder(p2 - vec3(0.0, 0.4, 0.0), vec3(0.0, 0.0, 0.2)), 0.1);\n    \n    vec3 p3 = vec3(rotate(p.xz, time*0.3), p.y);\n    float dSpirit = opTwist(p3, 2.0);\n    dSpirit = opSmoothIntersection(dSpirit, sdSphere(p3, 0.6), 0.1);\n    \n    float d = opSmoothUnion(dHeart, dMind, 0.3);\n    d = opSmoothUnion(d, dSpirit, 0.4);\n    \n    return d;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(cross(vec3(0,1,0), f));\n    return normalize(f + r*uv.x + cross(f, r)*uv.y + r*z);\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(0.001, 0);\n    vec3 n = d - vec3(getDist(p - e.xyy), getDist(p - e.yxy), getDist(p - e.yyx));\n    return normalize(n);\n}\n\nvec3 getColor(vec3 p) {\n    float sinTime = sin(time*0.5);\n    vec3 col1 = vec3(0.1, 0.3, 0.8) + vec3(sinTime*0.1, sinTime*0.2, sinTime*0.3);\n    vec3 col2 = vec3(0.8, 0.6, 0.2) + vec3(sinTime*0.2, sinTime*0.1, sinTime*0.3);\n    vec3 col3 = vec3(0.4, 0.1, 0.6) + vec3(sinTime*0.3, sinTime*0.1, sinTime*0.2);\n    \n    float dHeart = sdSphere(p, 1.0);\n    dHeart = opSmoothSubtraction(dHeart, sdBox(vec3(rotate(p.xz, time*0.2), p.y) - vec3(0.0, 0.5, 0.0), vec3(0.5, 0.2, 0.5)), 0.2);\n    dHeart = opSmoothUnion(dHeart, sdSphere(p - vec3(0.0, 0.6, 0.0), 0.4), 0.2);\n    \n    float dMind = sdTorus(vec3(rotate(p.xz + vec2(0.0, 0.2), time*0.1), p.y), vec2(0.8, 0.2));\n    dMind = opSmoothUnion(dMind, sdBox(vec3(rotate(p.xz + vec2(0.0, 0.2), time*0.1), p.y), vec3(0.3, 0.3, 0.1)), 0.1);\n    dMind = opSmoothSubtraction(dMind, sdCylinder(vec3(rotate(p.xz + vec2(0.0, 0.2), time*0.1), p.y) - vec3(0.0, 0.4, 0.0), vec3(0.0, 0.0, 0.2)), 0.1);\n    \n    float dSpirit = opTwist(vec3(rotate(p.xz, time*0.3), p.y), 2.0);\n    dSpirit = opSmoothIntersection(dSpirit, sdSphere(vec3(rotate(p.xz, time*0.3), p.y), 0.6), 0.1);\n    \n    float d = opSmoothUnion(dHeart, dMind, 0.3);\n    d = opSmoothUnion(d, dSpirit, 0.4);\n    \n    if (d == dHeart) return col1;\n    if (d == dMind) return col2;\n    return col3;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 lighting(vec3 p, vec3 rd, float d) {\n    vec3 n = getNormal(p);\n    vec3 light1 = vec3(sin(time*0.5), 1.0, cos(time*0.5));\n    vec3 light2 = vec3(-sin(time*0.3), -1.0, -cos(time*0.3));\n    \n    float dif1 = clamp(dot(n, normalize(light1)), 0.0, 1.0);\n    float dif2 = clamp(dot(n, normalize(light2)), 0.0, 1.0);\n    float spec1 = pow(max(dot(reflect(rd, n), light1), 0.0), 32.0);\n    float spec2 = pow(max(dot(reflect(rd, n), light2), 0.0), 32.0);\n    \n    vec3 dif = dif1*vec3(1.0, 0.8, 0.6) + dif2*vec3(0.6, 0.8, 1.0);\n    vec3 spec = spec1*vec3(1.0, 0.8, 0.6) + spec2*vec3(0.6, 0.8, 1.0);\n    vec3 amb = vec3(0.1, 0.1, 0.2);\n    \n    vec3 col = getColor(p);\n    \n    return col*(dif + spec + amb);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5*resolution.xy)/resolution.y;\n    vec3 ro = vec3(0, 0, -5);\n    vec3 rd = getRayDir(uv, ro, vec3(0), 1.0);\n    \n    float d = rayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    vec3 col = lighting(p, rd, d);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}