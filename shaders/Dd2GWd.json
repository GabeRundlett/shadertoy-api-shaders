{
    "Shader": {
        "info": {
            "date": "1668352836",
            "description": "colorize",
            "flags": 0,
            "hasliked": 0,
            "id": "Dd2GWd",
            "likes": 3,
            "name": "colorize fields",
            "published": 3,
            "tags": [
                "colorize"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "\nvec3 f_o_color_colorized_distance_modsin(\n    float n_dist_norm, \n    float n_repetitions \n){\n    float n_tau = 6.2831;\n    return vec3(sin(n_tau*n_dist_norm*n_repetitions)*0.5+0.5);\n}\n\nvec3 f_o_color_colorized_distance_modlin(\n    float n_dist_norm, \n    float n_repetitions \n){\n    float n_mod = 1.0/n_repetitions;\n    float n_dist_mod = (mod(n_dist_norm, n_mod)/n_mod);\n    \n    return vec3(n_dist_mod);\n}\n\nvec3 f_o_rgb_converted_from_hsl( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 f_o_color_colorized_distance_colorspectrum(\n    float n_dist_norm\n){\n\n    return f_o_rgb_converted_from_hsl(\n        vec3(n_dist_norm, 0.5, 0.5)\n    );\n}\nvec3 f_o_color_colorized_distance_colorsaturation(\n    float n_dist_norm\n){\n    return f_o_rgb_converted_from_hsl(vec3(0,n_dist_norm, 0.5));\n}\n\nvec3 f_o_color_smoothstep(\n    float n_dist_norm, \n    float n_min, \n    float n_max\n){\n    float n_range = n_max - n_min; \n    if(n_dist_norm > n_min && n_dist_norm < n_max){\n        float n_dist_in_range_norm = (n_dist_norm - n_min) / n_range;\n        \n        return f_o_rgb_converted_from_hsl(vec3(n_dist_in_range_norm, 0.5 ,0.5));\n    }\n    \n    return vec3(n_dist_norm);\n}\n\nvec3 f_o_color_switch(\n    float n_dist_norm, \n    float n_switch\n){\n    if(n_dist_norm > n_switch){\n        return vec3(1.0, 0.0,0.0);\n    }\n    return vec3(0.0,1.0,0.0);\n}\nvec3 f_o_color_smoothswitch(\n    float n_dist_norm, \n    float n_switch\n){\n    float n_range = 1.0 - n_switch;\n    float n_d_norm = n_dist_norm / n_range;\n    if(n_dist_norm > n_switch){\n        n_range = 1.0 - n_range;\n        n_d_norm = (n_dist_norm-n_switch) / n_range;\n    }\n    return f_o_rgb_converted_from_hsl(vec3(1./3.,n_d_norm, n_d_norm));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_pix_coo_nor = fragCoord.xy/iResolution.y;\n    vec2 o_mou_coo_nor = iMouse.xy/iResolution.xy;\n    \n    vec2 o_p_res = vec2(3.0, 3.0);\n    vec2 o_p_bigger = o_pix_coo_nor * o_p_res;\n    vec2 o_p_floor = floor(o_p_bigger);\n    vec2 o_p_fract = fract(o_p_bigger);\n    float n_index_center = o_p_floor.y * o_p_res.x + o_p_floor.x;\n\n\n    float n_dist = length(o_p_fract-0.5);\n    float n_dist_norm = n_dist / (1.0/o_p_res.x);\n    n_dist_norm = sin(n_dist_norm*6.2831+iTime)*0.5+0.5;\n    fragColor = vec4(n_dist_norm);\n\n\n    vec3[] a_o_color = vec3[](\n        vec3(sqrt(n_dist_norm)),\n        vec3(n_dist_norm),\n        vec3(f_o_color_colorized_distance_colorspectrum(n_dist_norm)),\n        vec3(f_o_color_colorized_distance_modlin(n_dist_norm, 10.0)),\n        vec3(f_o_color_colorized_distance_modsin(n_dist_norm, 10.0)),\n        vec3(f_o_color_colorized_distance_colorsaturation(n_dist_norm)),\n        vec3(f_o_color_smoothstep(n_dist_norm, 0.3, 0.35)),\n        vec3(f_o_color_switch(n_dist_norm,0.5)),\n        vec3(f_o_color_smoothswitch(n_dist_norm, 0.5))\n    );\n    fragColor = vec4( a_o_color[int(n_index_center)],1.0);\n\n   \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}