{
    "Shader": {
        "info": {
            "date": "1647528238",
            "description": "ink logic stolen from https://www.shadertoy.com/view/4tsSRS",
            "flags": 0,
            "hasliked": 0,
            "id": "sllcRH",
            "likes": 7,
            "name": "Fork Ink Blot S elvi5tim 212",
            "published": 3,
            "tags": [
                "noise",
                "transition",
                "paint",
                "ink",
                "fill",
                "splatter",
                "blot"
            ],
            "usePreview": 0,
            "username": "elvi5tim",
            "viewed": 510
        },
        "renderpass": [
            {
                "code": "#define SPEED 10.0\n#define MAX_DIST 1.0\n#define CELLS 10.0\n\n\nfloat sqrLen(vec2 vec)\n{\n\treturn vec.x * vec.x + vec.y * vec.y  ;  \n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n//noise from iq\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture( iChannel0, (uv+0.5)/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat mapToRange(float fromMin, float fromMax, float toMin, float toMax, float val)\n{\n    val = max(fromMin, (min(fromMax, val)));//clamp in range if outside\n    float fromSize = fromMax - fromMin;\n    val = (val - fromMin) / fromSize;\n    return mix(toMin, toMax, val);\n}\n\nvec2 pixelToNormalizedspace(vec2 pixel)\n{\n    vec2 res;\n    res.x = pixel.x * 2.0 / iResolution.x - 1.0;\n    res.y = pixel.y * 2.0 / iResolution.y - 1.0;\n    res.y *= iResolution.y / iResolution.x;//correct aspect ratio\n    return res;\n}\n\nfloat opUnion(float d1, float d2)\n{\n \treturn min(d1, d2);  \n}\n\nfloat opMinus(float d1, float d2)\n{\n \treturn max(-d1, d2);\n}\n\nfloat opIntersect(float d1, float d2)\n{\n \treturn max(d1, d2);\n}\n\nfloat circle(vec2 diff, float radius)\n{\n    return length(diff) - radius;\n}\n\nfloat line(vec2 diff, vec2 dir, float thickness)\n{\n    vec2 proj = dot(diff, dir) * dir;\n    vec2 perp = diff - proj;\n    return length(perp) - thickness;\n}\n\nfloat signedDist2D(vec2 pos)\n{\n\tfloat dist = MAX_DIST;\n    for (int i = 0; i < int(CELLS); ++i)\n    {\n        \n        dist = opUnion(dist, circle(random2(vec2(i)), 1.0 / (CELLS * 2.0)));\n    }\n\n    return dist;\n}\n\nfloat FX0(float val, float noise)\n{    \n    noise \t\t= pow(noise, 6.0);\n    float time \t= iTime * 2.0 + 0.1;\n    float str \t= max(0.0, (val * time));\n    float str2 \t= pow(str, 10.0) ;\n    str \t\t= str2 * noise;\n    \n    return str;\n}\n\nfloat FX1(float val, float noise, float expansion, float time)\n{\n    \n    noise \t\t= pow(noise, 6.0);\n    \n    val \t\t= val * expansion * 0.5;\n    float str \t= (1.0 + val * time);\n    float str2 \t= pow(str, 20.0) ;\n    str \t\t= mapToRange(0.3, 1.0, 0.0, 1.0, str2 * noise) ;  \n    \n    return str;\n}\n\nfloat FX2(float val, float noise, float expansion, float time)\n{    \n    noise \t\t= pow(noise, 6.0);\n    \n    val \t\t= val * (expansion);\n    float str \t= (1.0 + val * time) * (expansion);\n    float str2 \t= pow(str, 20.0) ;\n    str \t\t= str2 * noise;\n    str \t\t= mapToRange(0.2, 1.0, 0.0, 1.0, str);\n    \n    return str;\n}\n\nfloat FX3(float val, float noise, float expansion, float time)\n{    \n    val = clamp(val, 0.0, 1.0);\n    float str \t= mapToRange(0.3, 1.0, 0.0, 1.0, FX2(val, noise, expansion, time)) * expansion;\n    float ins \t= FX2(val * pow(expansion - 0.5, 1.0), noise, expansion, time) * expansion;\n    ins \t\t= mapToRange(0.0, 20.0, 0.0, 1.0, ins);\n    str \t\t+= ins;\n    \n    return str;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time \t= mod(iTime, 5.0) * 5.0;\n    vec2 fragPos \t\t= pixelToNormalizedspace(fragCoord.xy);\n\tvec3 pos \t\t= vec3(fragPos, time * 0.00001 * SPEED);\n    \n    //noise sampling\n    vec3 scaledPos \t= 8.0 * pos;\n    float noiseVal \t= 0.0;\n    float ampl \t\t= 1.0;\n    float maxValue \t= 0.0;\n    \n    for(float i = 0.0; i < 8.0; ++i)\n    {\n        noiseVal \t+= noise(scaledPos) * ampl;\n        scaledPos \t*= 2.0;\n        maxValue \t+= ampl;\n        ampl \t\t*= 0.5;\n    }\n    noiseVal /= maxValue;\n    vec2 startPoint = vec2(0.0, 0.0);\n\n    float expansion = sqrLen(fragPos - startPoint);\n    expansion \t\t= 1.0 - expansion;\n    expansion \t\t+= time * time * SPEED  * 0.0005 - 0.6;    \n    expansion \t\t= min(expansion, MAX_DIST);\n    \n\n    float res = FX3(-signedDist2D(fragPos), noiseVal, expansion, time);\n\n    res = clamp(res, 0.0, 1.0);\n    \n    fragColor = vec4(texture(iChannel1, fragCoord / iResolution.xy).rgb *vec3(1.0 - res), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}