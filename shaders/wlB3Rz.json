{
    "Shader": {
        "info": {
            "date": "1558261536",
            "description": "https://thebookofshaders.com/11/\nhttp://yrlab.zatunen.com/webgl/noise/noise.html",
            "flags": 0,
            "hasliked": 0,
            "id": "wlB3Rz",
            "likes": 3,
            "name": "WIP: noise",
            "published": 3,
            "tags": [
                "wip"
            ],
            "usePreview": 0,
            "username": "takahiroando",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCH = 30;\nconst float EPSILON = 0.000001f;\n\nfloat random(vec2 p) {\n    return fract(sin(dot(p, vec2(12.34, -56.78))) * 901234.);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    float a = random(i), c = random(i + vec2(0., 1.)),\n        b = random(i + vec2(1., 0.)), d = random(i + 1.);\n    vec2 u = smoothstep(0., 1., f);\n    // value noise!\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n}\n\nfloat sdsphere(vec3 pos, vec3 center, float radius) {\n    return length(pos - center) - radius;\n}\n\nfloat sdscene(vec3 pos) {\n    return sdsphere(pos, vec3(.0, .0, .0), 1.0);\n}\n\nfloat raymarch(vec3 pos, vec3 dir) {\n    float res = .0;\n    for (int i = 0; i < MAX_MARCH; ++i) {\n        float r = sdscene(pos);\n        if (r <= EPSILON) {\n            return res;\n        }\n        res += r;\n        pos += dir * r;\n    }\n    return -1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec3 cd = normalize(vec3(uv, -1.0));\n    vec3 cr = normalize(cross(cd, vec3(0.0, 1.0, 0.0)));\n    vec3 cu = cross(cr, cd);\n    vec3 cp = vec3(.0, .0, 10.0);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //float c = raymarch(cp, cd) >= 0.0f ? 1.0 : 0.0;\n    float c = noise(uv * 5.);\n\n    // Output to screen\n    fragColor = vec4(c, c, c, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}