{
    "Shader": {
        "info": {
            "date": "1507879974",
            "description": "fork of:\nhttps://www.shadertoy.com/view/llBXzW\n\nmore compatibility:\n- no ichannel textures (crappy hash instead)\n- ni gloval mutables (#define instead)",
            "flags": 0,
            "hasliked": 0,
            "id": "llSczw",
            "likes": 6,
            "name": " Intergalactics",
            "published": 3,
            "tags": [
                "planet",
                "scattering",
                "atmospheric"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 766
        },
        "renderpass": [
            {
                "code": "//parent: https://www.shadertoy.com/view/llBXzW\n//self  : https://www.shadertoy.com/view/llBXzW\n//ad 3d scatter planet atmosphere 3d\n\n/* -------------------------------\n  \n  Shaders used\n  'Atmospheric Scattering Sample' from \n  https://www.shadertoy.com/view/lslXDr - gltracy\n\n  cloud coverage from '2d Fast Clouds' \n  https://www.shadertoy.com/view/XsjSRt - Sinuousity\n\n  smooth and cheap 3d starfield from 'Fancy ties' \n  https://www.shadertoy.com/view/ltfGDs - nimitz\n\n  Fisheye lens effect from 'Cypher'\n  https://www.shadertoy.com/view/MlsGRS - dila\n\n  sun-sunIntensity from 'Kepler 256o'\n  https://www.shadertoy.com/view/XsjGRd - otaviogood\n\n  --------------------------------- */\n\nconst float fov = 1.5;\n//Global material id (keeps code cleaner)\nfloat matid = 0.;\n\n// math const\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\nconst float MAX = 10000.0;\n\nvec3 sunCol = vec3(258.0, 208.0, 100.0) / 15.0;\n\n\n// scatter const\nconst float K_R = 0.166;\nconst float K_M = 0.0025;\nconst float E = 14.3; \t\t\t\t\t\t// light intensity\nconst vec3  C_R = vec3( 0.3, 0.7, 1.0 ); \t// 1 / wavelength ^ 4\nconst float G_M = -0.85;\t\t\t\t\t// Mie g\n\nconst float R = 2.0;\nconst float R_INNER = 1.8;\nconst float SCALE_H = 4.0 / ( R - R_INNER );\nconst float SCALE_L = 1.0 / ( R - R_INNER );\n\nconst int NUM_OUT_SCATTER = 10;\nconst float FNUM_OUT_SCATTER = 10.0;\n\nconst int NUM_IN_SCATTER = 10;\nconst float FNUM_IN_SCATTER = 10.0;\n#define time iTime*1.3\nconst float eps = 0.001;\n\n//2d Fast Clouds const\n//SETTINGS//\nconst float timeScale = 30.0;\nconst float cloudScale = 0.5;\nconst float skyCover = 0.6; //overwritten by mouse x drag\nconst float softness = 0.2;\nconst float brightness = 1.0;\nconst int noiseOctaves = 8;\nconst float curlStrain = 3.0;\n//SETTINGS//\n\nvec3 light = normalize(vec3(-.5, 0.2, -0.2));\n\nfloat pi = 3.14159265359;\n\n#define radian  (time*pi)/180.0 \n#define mx  iMouse.x/55.\n#define my  iMouse.y/55.\n\n#define ry  mat3(cos(radian*32.-mx), 0.0,-sin(radian*32.-mx),\\\n\t\t\t   0.0, 1.0, 0.0, \\\n\t\t\t   sin(radian*32.-mx), 0.0, cos(radian*32.-mx)  )\n     \n#define rx  mat3(1.0, 0.0, 0.0,\\\n\t\t\t   0.0, cos(radian*13.-my), sin(radian*13.-my), \\\n\t\t\t   0.0,-sin(radian*13.-my), cos(radian*13.-my) )\n// ray direction\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\t\n\treturn normalize( vec3( xy, -z ) );\n}\n\n// ray intersects sphere\n// e = -b +/- sqrt( b^2 - c )\nvec2 ray_vs_sphere( vec3 p, vec3 dir, float r ) {\n\tfloat b = dot( p, dir );\n\tfloat c = dot( p, p ) - r * r;\n\t\n\tfloat d = b * b - c;\n\tif ( d < 0.0 ) {\n\t\treturn vec2( MAX, -MAX );\n\t}\n\td = sqrt( d );\n\t\n\treturn vec2( -b - d, -b + d );\n}\n\n// Mie\n// g : ( -0.75, -0.999 )\n//      3 * ( 1 - g^2 )               1 + c^2\n// F = ----------------- * -------------------------------\n//      2 * ( 2 + g^2 )     ( 1 + g^2 - 2 * g * c )^(3/2)\nfloat phase_mie( float g, float c, float cc ) {\n\tfloat gg = g * g;\n\t\n\tfloat a = ( 1.0 - gg ) * ( 1.0 + cc );\n\n\tfloat b = 1.0 + gg - 2.0 * g * c;\n\tb *= sqrt( b );\n\tb *= 2.0 + gg;\t\n\t\n\treturn 1.5 * a / b;\n}\n\n// Reyleigh\n// g : 0\n// F = 3/4 * ( 1 + c^2 )\nfloat phase_reyleigh( float cc ) {\n\treturn 0.75 * ( 1.0 + cc );\n}\n\nfloat density( vec3 p ){\n\treturn exp( -( length( p ) - R_INNER ) * SCALE_H );\n}\n\nfloat optic( vec3 p, vec3 q ) {\n\tvec3 step = ( q - p ) / FNUM_OUT_SCATTER;\n\tvec3 v = p + step * 0.5;\n\t\n\tfloat sum = 0.0;\n\tfor ( int i = 0; i < NUM_OUT_SCATTER; i++ ) {\n\t\tsum += density( v );\n\t\tv += step;\n\t}\n\tsum *= length( step ) * SCALE_L;\n\t\n\treturn sum;\n}\n//from 'Atmospheric Scattering Sample'\n//https://www.shadertoy.com/view/lslXDr - gltracy\nvec3 in_scatter( vec3 o, vec3 dir, vec2 e, vec3 l ) {\n\tfloat len = ( e.y - e.x ) / FNUM_IN_SCATTER;\n\tvec3 step = dir * len;\n\tvec3 p = o + dir * e.x;\n\tvec3 v = p + dir * ( len * 0.5 );\n\n\tvec3 sum = vec3( 0.0 );\n\tfor ( int i = 0; i < NUM_IN_SCATTER; i++ ) {\n\t\tvec2 f = ray_vs_sphere( v, l, R );\n\t\tvec3 u = v + l * f.y;\n\t\t\n\t\tfloat n = ( optic( p, v ) + optic( v, u ) ) * ( PI * 4.0 );\n\t\t\n\t\tsum += density( v ) * exp( -n * ( K_R * C_R + K_M ) );\n\n\t\tv += step;\n\t}\n\tsum *= len * SCALE_L;\n\t\n\tfloat c  = dot( dir, -l );\n\tfloat cc = c * c;\n\t\n\treturn sum * ( K_R * C_R * phase_reyleigh( cc ) + K_M * phase_mie( G_M, c, cc ) ) * E;\n}\n//Random function\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n//Noise function\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n//From Dave_Hoskins\nvec2 hash22(vec2 p){\n\tp  = fract(p * vec2(5.3983, 5.4427));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\n}\n\nvec3 hash33(vec3 p){\n\tp  = fract(p * vec3(5.3983, 5.4427, 6.9371));\n    p += dot(p.yzx, p.xyz  + vec3(21.5351, 14.3137, 15.3219));\n\treturn fract(vec3(p.x * p.z * 95.4337, p.x * p.y * 97.597, p.y * p.z * 93.8365));\n}\n//--------------------Utility, Domain folding and Primitives---------------------\nfloat tri(in float x){return abs(fract(x)-.5);}\n//smooth and cheap 3d starfield\n//from 'Fancy ties'\n//https://www.shadertoy.com/view/ltfGDs - nimitz\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*.85*fov;\n    \n    //Triangular deformation (used to break sphere intersection pattterns)\n    p.x += (tri(p.z*50.)+tri(p.y*50.))*0.006;\n    p.y += (tri(p.z*50.)+tri(p.x*50.))*0.006;\n    p.z += (tri(p.x*50.)+tri(p.y*50.))*0.006;\n\tfor (float i=0.;i<3.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        vec3 id = floor(p*(.15*res));\n        float rn = hash33(id).z;\n        float c2 = 1.-smoothstep(-0.2,.4,length(q));\n        c2 *= step(rn,0.005+i*0.014);\n        c += c2*(mix(vec3(1.0,0.75,0.5),vec3(0.85,0.9,1.),3.*rn*30.)*0.5 + 0.5);\n        p *= 1.15;\n    }\n    \n    return c*c*1.5*6.;\n}\n\nfloat distanceFunction(vec3 pos){\n    return length(pos) - R_INNER;\n}\n \nvec3 getNormal(vec3 p)\n{\n    const float d = eps;\n    return\n        normalize\n        (\n            vec3\n            (\n                distanceFunction(p+vec3(d,0.0,0.0))-distanceFunction(p+vec3(-d,0.0,0.0)),\n                distanceFunction(p+vec3(0.0,d,0.0))-distanceFunction(p+vec3(0.0,-d,0.0)),\n                distanceFunction(p+vec3(0.0,0.0,d))-distanceFunction(p+vec3(0.0,0.0,-d))\n            )\n        );\n}\n \n\n\nfloat saturate(float num)\n{\n    return clamp(num,0.0,1.0);\n}\n\nfloat noised(vec2 uv)\n{\n    uv*=9.;\n    return sin(uv.x)+cos(uv.y+dot(uv.x,uv.y));\n    //return texture(iChannel0,uv).r;\n}\n\nvec2 rotate(vec2 uv)\n{\n    uv = uv + noised(uv*0.2)*0.005;\n    float rot = curlStrain;\n    float sinRot=sin(rot);\n    float cosRot=cos(rot);\n    mat2 rotMat = mat2(cosRot,-sinRot,sinRot,cosRot);\n    return uv * rotMat;\n}\n\nfloat fbm (vec2 uv)\n{\n    float rot = 1.57;\n    float sinRot=sin(rot);\n    float cosRot=cos(rot);\n    float f = 0.0;\n    float total = 0.0;\n    float mul = 0.5;\n    mat2 rotMat = mat2(cosRot,-sinRot,sinRot,cosRot);\n    \n    for(int i = 0;i < noiseOctaves;i++)\n    {\n        f += noised(uv+iTime*0.00015*timeScale*(1.0-mul))*mul;\n        total += mul;\n        uv *= 3.0;\n        uv=rotate(uv);\n        mul *= 0.5;\n    }\n    return f/total;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pos = (fragCoord.xy*2.0 -iResolution.xy) / iResolution.y;\n    vec3 camPos = vec3(0.0, 0.0, -3.0-sin(time*.5)*.5) * rx*ry;\n    vec3 camDir = vec3(0.0, 0.0, -1.0);\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //Fisheye lens effect from 'Cypher'\n\t//https://www.shadertoy.com/view/MlsGRS - dila\n    vec3 eye = normalize(vec3(uv, 1.0 - dot(uv,uv) * 0.33)); \n    //camDir *= rx*ry;//*ry;//*rx;\n    //camUp  *= rx*ry;//*ry;//*rx;\n\n    vec3 camSide = cross(camDir, camUp);\n    float focus = 1.5;\n\n    vec3 rayDir;// =  normalize(camSide*pos.x + camUp*pos.y + camDir*focus)*rx*ry;  \n    eye*=rx*ry;\n    float t = 0.0, d;\n    rayDir=eye;\n    vec3 posOnRay = camPos;\n    float dense = 16.0;\n    \n    //sun-sunIntensity from 'Kepler 256o'\n    //https://www.shadertoy.com/view/XsjGRd - otaviogood\n    vec3 localRay = normalize(rayDir);\n    float sunIntensity = 1.0 - (dot(localRay, light) * 0.5 + 0.5);\n    //sunIntensity = (float)Math.Pow(sunIntensity, 14.0);\n    sunIntensity = 0.2 / sunIntensity;\n    sunIntensity = min(sunIntensity, 40000.0);\n    sunIntensity = max(0.0, sunIntensity - 3.0);\n    //////////////////////////////////////////////////\n    \n    for(int i=0; i<32; ++i){\n        d = distanceFunction(posOnRay);\n        t += d;\n        posOnRay = camPos + t*rayDir;\n        if(d < eps){ break; }\n    }\n    \n  \n    vec3 normal = getNormal(posOnRay);\n    vec2 e = ray_vs_sphere( camPos, rayDir, R );\n\t\n\tvec2 f = ray_vs_sphere( camPos, rayDir, R_INNER );\n\te.y = min( e.y, f.x );\n    //////////////////////\n    vec2 screenUv = fragCoord.xy/iResolution.xy;\n    vec2 uv2 = fragCoord.xy/(40000.0*cloudScale);\n    \n    float mouseXAffect = (iMouse.x/iResolution.x);\n    \n    float cover = 0.55;\n    \n    float bright = brightness*(1.8-cover);\n    \n    //cloud coverage from '2d Fast Clouds' \n    //https://www.shadertoy.com/view/XsjSRt - Sinuousity\n    float color1 = fbm((posOnRay.yz*.015)-0.5+iTime*0.00004*timeScale);  //xz\n    float color2 = fbm((posOnRay.zy*.015)-10.5+iTime*0.00002*timeScale); //yz\n    \n    float clouds1 = smoothstep(1.0-cover,min((1.0-cover)+softness*2.0,1.0),color1);\n    float clouds2 = smoothstep(1.0-cover,min((1.0-cover)+softness,1.0),color2);\n    \n    float cloudsFormComb = saturate(clouds1+clouds2);\n    \n    vec4 skyCol = vec4(0.6,0.8,1.0,1.0);\n    float cloudCol = saturate(saturate(1.0-pow(color1,1.0)*0.2)*bright);\n    vec4 clouds1Color = vec4(cloudCol,cloudCol,cloudCol,1.0);\n    vec4 clouds2Color = mix(clouds1Color,skyCol,0.25);\n    vec4 cloudColComb = mix(clouds1Color,clouds2Color,saturate(clouds2-clouds1));\n    vec4 clouds = vec4(0.0);\n\tclouds = mix(skyCol,cloudColComb,cloudsFormComb);\n\tvec3 I = in_scatter( camPos, rayDir, e, light );\n    \n    if(abs(d) < eps){\n        float diffuse = clamp( dot(normal, light), 0.015, 1.);\n        float specular = 1.5*pow(clamp(dot(reflect(rayDir, normal), light), 0., 1.), 30.);\n        vec3 brdf = 1.5*vec3(.10, .11, .11);\n        float fre = 0.1*pow(clamp(1. + dot(normal, rayDir), 0., 1.), 2.);\n        brdf += 1.30*diffuse*vec3(1., .9, .75);\n        vec3 spe = vec3(1.0,0.8,0.7)*specular;\n        fragColor = vec4((I*.025)+clouds.rgb*diffuse+spe+brdf*fre, 1.0);  //+specular2+fre+brdf\n    } else {\n        fragColor = vec4(0.0);\n        fragColor.rgb+=stars(rayDir*.35); //.4\n        fragColor.rgb+=I;\n        fragColor.rgb += sunCol*(sunIntensity*.0025);\n    }\n} \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}