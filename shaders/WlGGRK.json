{
    "Shader": {
        "info": {
            "date": "1579284762",
            "description": "Somehow I found this kind of transition intriguing.\nProbably very common anywhere but inspired from BBC Radio 1's intro as in this https://www.youtube.com/watch?v=KTaokISuOGQ.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlGGRK",
            "likes": 9,
            "name": "Triangle tile animation",
            "published": 3,
            "tags": [
                "2d",
                "triangle"
            ],
            "usePreview": 0,
            "username": "hiogawa",
            "viewed": 579
        },
        "renderpass": [
            {
                "code": "// TODO:\n// - [x] interpolation curve\n// - [x] different direction\n// - [x] aniti aliasing\n// - [x] different color\n// - [x] fit vertical size\n// - [ ] offset by mouse position\n// - [ ] use random color\n\n#define AA 4.0\n#define NUM_ROWS 4.0\n#define SCALE NUM_ROWS * (sqrt(3.0) / 2.0)\n#define COLOR1 vec3(1.0) * 0.15\n#define COLOR2 vec3(0.0, 1.0, 1.0) * 0.95\n#define COLOR3 vec3(1.0, 0.0, 1.0) * 0.95\n#define COLOR4 vec3(1.0, 1.0, 0.0) * 0.95\n\nfloat someStep(float t) {\n    // Doubles step so it's more \"sticky\".\n    return smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, t));\n}\n\nfloat smoothMod(float s, float m) {\n  return someStep(mod(s, m) / m) * m;\n}\n\nvec2 invSimplexFrame(vec2 xy, float state) {\n  mat3 transf;\n  if (state == 0.0) {\n    transf = mat3(\n              1.0,             0.0, 0.0,\n        1.0 / 2.0, sqrt(3.0) / 2.0, 0.0,\n              0.0,             0.0, 1.0);\n  }\n  if (state == 1.0) {\n    transf = mat3(\n            - 1.0,             0.0, 0.0,\n      - 1.0 / 2.0, sqrt(3.0) / 2.0, 0.0,\n              1.0,             0.0, 1.0);\n  }\n  if (state == 2.0) {\n    transf = mat3(\n      - 1.0 / 2.0, - sqrt(3.0) / 2.0, 0.0,\n        1.0 / 2.0, - sqrt(3.0) / 2.0, 0.0,\n        1.0 / 2.0,   sqrt(3.0) / 2.0, 1.0);\n  }\n  return vec2(inverse(transf) * vec3(xy, 1));\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n  float state1;    // {0, 1, 2}\n  bool  state2;    // {0, 1}\n  float state3;    // [0, 2)\n  bool  px_state1; // {0, 1}\n\n  // Offset time so that first frame shows triangles for shadertoy browser.\n  float t = iTime + 3.0;\n  state1 = mod(t, 6.0) < 2.0 ? 0.0 :\n           mod(t, 6.0) < 4.0 ? 1.0 :\n                               2.0;\n  state2 = mod(t, 4.0) < 2.0;\n  state3 = smoothMod(t, 2.0);\n\n  // Multi sampling\n  vec3 color;\n  for (float i = 0.0; i <= 1.0; i += 1.0 / AA) {\n    for (float j = 0.0; j <= 1.0; j += 1.0 / AA) {\n\n      // Rendering code of single uv\n      vec2 uv = SCALE * (frag_coord + vec2(i, j)) / iResolution.y;\n      vec2 st = invSimplexFrame(uv, state1);\n      px_state1 = fract(st.x) + fract(st.y) > state3;\n      vec3 c;\n      if (state1 == 0.0) {\n        c = px_state1 ? (state2 ? COLOR2 : COLOR1) : (state2 ? COLOR1 : COLOR3);\n      }\n      if (state1 == 1.0) {\n        c = px_state1 ? (state2 ? COLOR3 : COLOR1) : (state2 ? COLOR1 : COLOR4);\n      }\n      if (state1 == 2.0) {\n        c = px_state1 ? (state2 ? COLOR4 : COLOR1) : (state2 ? COLOR1 : COLOR2);\n      }\n      color += c;\n    }\n  }\n  color /= pow((AA + 1.0), 2.0);\n\n  frag_color = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n// History\n//\n\n// 1st version\n\n/*\n\n#define AA 4.0\n#define NUM_ROWS 4.0\n#define SCALE NUM_ROWS * (sqrt(3.0) / 2.0)\n#define COLOR1 vec3(1.0) * 0.15\n#define COLOR2 vec3(0.0, 1.0, 1.0) * 0.95\n#define COLOR3 vec3(1.0, 0.0, 1.0) * 0.95\n#define COLOR4 vec3(1.0, 1.0, 0.0) * 0.95\n\nfloat someStep(float t) {\n    // Doubles step so it's more \"sticky\".\n    return smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, t));\n}\n\nfloat smoothMod(float s, float m) {\n  return someStep(mod(s, m) / m) * m;\n}\n\nvec2 invSimplexFrame(vec2 xy, float state) {\n  mat3 transf;\n  if (state == 0.0) {\n    transf = mat3(\n              1.0,             0.0, 0.0,\n        1.0 / 2.0, sqrt(3.0) / 2.0, 0.0,\n              0.0,             0.0, 1.0);\n  }\n  if (state == 1.0) {\n    transf = mat3(\n            - 1.0,             0.0, 0.0,\n      - 1.0 / 2.0, sqrt(3.0) / 2.0, 0.0,\n              1.0,             0.0, 1.0);\n  }\n  if (state == 2.0) {\n    transf = mat3(\n      - 1.0 / 2.0, - sqrt(3.0) / 2.0, 0.0,\n        1.0 / 2.0, - sqrt(3.0) / 2.0, 0.0,\n        1.0 / 2.0,   sqrt(3.0) / 2.0, 1.0);\n  }\n  return vec2(inverse(transf) * vec3(xy, 1));\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n  float state1;    // {0, 1, 2}\n  bool  state2;    // {0, 1}\n  float state3;    // [0, 2)\n  bool  px_state1; // {0, 1}\n\n  // Offset time so that first frame shows triangles for shadertoy browser.\n  float t = iTime + 3.0;\n  state1 = mod(t, 6.0) < 2.0 ? 0.0 :\n           mod(t, 6.0) < 4.0 ? 1.0 :\n                               2.0;\n  state2 = mod(t, 4.0) < 2.0;\n  state3 = smoothMod(t, 2.0);\n\n  // Multi sampling\n  vec3 color;\n  for (float i = 0.0; i <= 1.0; i += 1.0 / AA) {\n    for (float j = 0.0; j <= 1.0; j += 1.0 / AA) {\n\n      // Rendering code of single uv\n      vec2 uv = SCALE * (frag_coord + vec2(i, j)) / iResolution.y;\n      vec2 st = invSimplexFrame(uv, state1);\n      px_state1 = fract(st.x) + fract(st.y) > state3;\n      vec3 c;\n      if (state1 == 0.0) {\n        c = px_state1 ? (state2 ? COLOR2 : COLOR1) : (state2 ? COLOR1 : COLOR3);\n      }\n      if (state1 == 1.0) {\n        c = px_state1 ? (state2 ? COLOR3 : COLOR1) : (state2 ? COLOR1 : COLOR4);\n      }\n      if (state1 == 2.0) {\n        c = px_state1 ? (state2 ? COLOR4 : COLOR1) : (state2 ? COLOR1 : COLOR2);\n      }\n      color += c;\n    }\n  }\n  color /= pow((AA + 1.0), 2.0);\n\n  frag_color = vec4(color, 1.0);\n}\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}