{
    "Shader": {
        "info": {
            "date": "1507021775",
            "description": "Accordion tube arms (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "MtlyWl",
            "likes": 5,
            "name": "Flexibility",
            "published": 3,
            "tags": [
                "tube",
                "flex",
                "accordion",
                "concertina"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 531
        },
        "renderpass": [
            {
                "code": "// \"Flexibility\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\n\nvec3 ltDir;\nvec2 arcLim, dpLoop, qBlk;\nfloat tCur, dstFar, rLoop, aLoop, rBase, rTop, rIn;\nint idObj;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, rVar, cExt, s, r;\n  cExt = 0.3;\n  rVar = 0.02;\n  p.y -= 8. * cExt;\n  dMin = dstFar;\n  qq = p;\n  qq.xz = Rot2D (p.xz, 2. * pi * (floor (3. * atan (p.z, - p.x) / (2. * pi) + 0.5) / 3.));\n  qq.x -= - rBase;\n  q = qq;  q.x -= rLoop;\n  q.xy = Rot2D (q.xy, aLoop);\n  s = mod (30. * atan (q.y, - q.x) / (pi * aLoop), 1.);\n  d = PrTorusDf (q, rIn + rVar * SmoothBump (0.25, 0.75, 0.1, s), rLoop);\n  d = max (d, dot (vec2 (q.x, abs (q.y)), arcLim));\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q = qq;  q.x -= rLoop;  q.xy -= dpLoop;\n  q.xy = Rot2D (q.xy, aLoop);\n  s = mod (30. * atan (q.y, q.x) / (pi * aLoop), 1.);\n  d = PrTorusDf (q, rIn + rVar * SmoothBump (0.25, 0.75, 0.1, s), rLoop);\n  d = max (d, dot (vec2 (- q.x, abs (q.y)), arcLim));\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q = qq;  q.y -= -4. * cExt;\n  d = PrRCylDf (q.xzy, rIn + rVar, 0.05, 4. * cExt + 0.05);\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q = qq;  q.xy -= vec2 (2. * rLoop, cExt) + dpLoop;\n  d = PrRCylDf (q.xzy, rIn + rVar, 0.05, cExt + 0.05);\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q = p;  q.y -= dpLoop.y + 2. * cExt + 0.5 * rIn + 3. * rVar;\n  q.xz = Rot2D (q.xz, - pi / 18.);\n  r = rBase - 2. * rLoop - dpLoop.x;\n  s = mod (9. * atan (q.x, - q.z) / (2. * pi), 1.);\n  d = PrTorusDf (q.xzy, 0.5 * rIn + 2. * rVar *\n     SmoothBump (0.5 - 0.15 / r, 0.5 + 0.15 / r, 0.01, s), r);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;  q.y -= -4. * cExt;\n  q.y = abs (q.y) - cExt;\n  d = PrTorusDf (q.xzy, 0.35 * rIn, rBase);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;  q.y -= -8. * cExt - 0.05 - 0.01;\n  d = PrCylDf (q.xzy, rBase + 0.3, 0.01);\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p;  q.y -= dpLoop.y + 2. * cExt + 0.5 * rIn + 3. * rVar;\n  d = PrCylDf (q.xzy, rTop, 0.02);\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.002, -0.002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvoid BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, qnBlk;\n  float dn, df, bSize;\n  bSize = 10. * dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk)) / bSize;\n  }\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float u;\n  u = rd.y + 1.;\n  return vec3 (0.5, 0.5, 1.) * (0.05 + 0.245 * u * u);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj;\n  rLoop = 2. + 1.2 * sin (0.1 * 2. * pi * tCur);\n  aLoop = 0.5 * pi / rLoop;\n  arcLim = vec2 (sin (1.01 * aLoop), cos (1.01 * aLoop));\n  dpLoop = 2. * rLoop * vec2 (- cos (2. * aLoop), sin (2. * aLoop));\n  rIn = 0.2;\n  rBase = 6.;\n  rTop = rBase - 2. * rLoop - dpLoop.x - 0.65 * rIn;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar && idObj == 1) {\n    vn = ObjNf (ro + dstObj * rd);\n    if (vn.y > 0.99) {\n      ro += dstObj * rd;\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      dstObj = ObjRay (ro, rd);\n    }\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 3) {\n      col = vec3 (0.9, 0.9, 1.) * (0.5 - 0.5 * dot (rd, vn)) / (1. + 0.6 * pow (length (ro.xz) / rTop, 4.));\n    } else if (idObj == 4) {\n      col = vec3 (0.9, 0.9, 0.8);\n      col = col * (0.1 + 0.9 * max (dot (vn, ltDir), 0.)) +\n         0.5 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    } else {\n      col = vec3 (0.5, 0.4, 0.);\n      col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n         0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    }\n    if (idObj == 4) {\n      BlkHit (ro, reflect (rd, vn));\n      qBlk = mod (8. * qBlk, 1.);\n      col = mix (col, vec3 (0.5) * (0.5 + 0.5 * SmoothBump (0.1, 0.9, 0.02, qBlk.x) *\n         SmoothBump (0.1, 0.9, 0.02, qBlk.y)), 0.2);\n    }\n  } else {\n    col = BgCol (rd);\n    BlkHit (ro, rd);\n    qBlk = mod (8. * qBlk, 1.);\n    col = mix (col, vec3 (0.5) * (0.9 + 0.1 * SmoothBump (0.1, 0.9, 0.02, qBlk.x) *\n       SmoothBump (0.1, 0.9, 0.02, qBlk.y)), 0.2);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = pi / 6.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.05 * tCur;\n    el += 0.1 * pi * sin (0.03 * 2. * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 2., -30.);\n  rd = vuMat * normalize (vec3 (uv, 3.2));\n  dstFar = 50.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (pow (ShowScene (ro, rd), vec3 (0.8)), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}