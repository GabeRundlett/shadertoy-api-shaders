{
    "Shader": {
        "info": {
            "date": "1612695795",
            "description": "It shows a way to make a flood in parallel",
            "flags": 48,
            "hasliked": 0,
            "id": "wltfWH",
            "likes": 0,
            "name": "Random 1",
            "published": 3,
            "tags": [
                "buffers"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Generate UV's\n    vec2 uv = fragCoord.xy*dif.xy;\n\n    //Shows the flood propagating\n    #if Rendering == Normal\n    vec4 Col = vec4(S(uv).w);\n    fragColor = Col;\n    #endif\n    \n    #if Rendering == Abnormal\n    vec4 Col = vec4(S(uv));\n    fragColor = G(vec2(Col.x, Col.w));\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//This per cell what it can take from other neighbours and if the other neighbours can't get water from itsel it means it has to hold it(this is done with buffer C)\n//iChannel2 determiness where there can be water and not\n\nvec4 Initialise(in vec2 uv)\n{\n    return vec4(\n        G(uv).x,//Holds the amount of maximum capacity of water\n        0.0,//Holds the amount of water a cell has to holds for itself\n        0.0,//Does nothing\n        G(uv).x*1.5//Holds the amount of water of a cell\n    );\n}\n\nvoid mainImage( out vec4 pn, in vec2 fragCoord )\n{ \n    //Generate UV's\n    vec2 uv = fragCoord.xy*dif.xy;\n\n    //Get neighbour points\n    vec4[4] npns = vec4[4]\n    (\n        S(uv + dif.xz),\n        S(uv - dif.xz),\n        S(uv + dif.zy),\n        S(uv - dif.zy)\n    );\n    \n    //Do passes\n\n    //Initialise\n    pn = iFrame < 3 || mod(iTime, 6.) > 5.95 || K(37) == 1. ? Initialise(uv) : S(uv);\n    \n    //Pass 1\n    PASS_1(pn.x, uv, pn, npns);\n    \n    //Pass \n    PASS_2(pn.y, uv, pn, npns);\n    \n    //Pass \n    PASS_3(pn.z, uv, pn, npns);\n    \n    //Pass \n    PASS_4(pn.w, uv, pn, npns);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Set Buffer B to the new flood map\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = S(fragCoord/iResolution.xy);//Take the previous value\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Handy texture grabbing\n#define dif vec3(1./iResolution.xy, 0)\n#define S(uv) texture(iChannel0, uv)\n#define G(uv) texture(iChannel1, uv)\n#define K(key) texelFetch(iChannel2, ivec2(key, 0), 0).x\n\n//Pass grabbers\n#define One(index) npns[index].x\n#define Two(index) npns[index].y\n#define Thr(index) npns[index].z\n#define For(index) npns[index].w\n\n#define ONE pn.x\n#define TWO pn.y\n#define THR pn.z\n#define FOR pn.w\n\n//Setting\n#define Normal 1\n#define Abnormal 2\n#define Rendering Normal\n\n\n//n standing for number, pn standing for packedNumbers and npns standing for neighbour packed numbers\nvoid PASS_1(inout float n, in vec2 uv, in vec4 pn, in vec4[4] npns)//This being number x\n{\n    //Holds the amount of maximum capacity of water\n}\nvoid PASS_2(inout float n, in vec2 uv, in vec4 pn, in vec4[4] npns)//This being number y\n{\n    //Holds the amount of water a cell has to holds for itself\n    \n    \n    //Calculate the amount of water a cell has to hold from its previous value\n    n = 4. - (One(0) + One(1) + One(2) + One(3));\n}\nvoid PASS_3(inout float n, in vec2 uv, in vec4 pn, in vec4[4] npns)//This being number z\n{\n    //Does nothing\n}\nvoid PASS_4(inout float n, in vec2 uv, in vec4 pn, in vec4[4] npns)//This being number w\n{\n   //Holds the amount of water of a cell\n   \n   //Calculate the new amount of water\n   n = (\n            For(0) * One(0) +\n            For(1) * One(1) +\n            For(2) * One(2) +\n            For(3) * One(3) +\n            n * TWO\n        )*0.25;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}