{
    "Shader": {
        "info": {
            "date": "1719999031",
            "description": "original source fractal form gaz and galaxy\nhttps://www.shadertoy.com/view/MdXSzS and sun from https://www.shadertoy.com/view/l3V3Dt\nbless all countries",
            "flags": 0,
            "hasliked": 0,
            "id": "XXGSWm",
            "likes": 5,
            "name": "trance fest best funny time",
            "published": 3,
            "tags": [
                "fractal",
                "galaxy"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "\n\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat snoise(vec3 uv, float res)\n{\nconst vec3 s = vec3(1e0, 1e2, 1e4);\n\nuv *= res;\n\nvec3 uv0 = floor(mod(uv, res))*s;\nvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\nvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\nvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n       uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\nvec4 r = fract(sin(v*1e-3)*1e5);\nfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\nr = fract(sin((v + uv1.z - uv0.z)*1e-3)*1e5);\nfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\nreturn mix(r0, r1, f.z)*2.-1.;\n}\n\nvec3 renderStar(vec2 p, vec2 uv, float time, float brightness, float aspect, float radius, float invRadius,\nvec3 orange, vec3 orangeRed){\n    float fade = pow( length( 2.0 * p ), 0.5 );\nfloat fVal1 = 1.0 - fade;\nfloat fVal2 = 1.0 - fade;\n\nfloat angle = atan( p.x, p.y )/6.2832;\nfloat dist = length(p);\nvec3 coord = vec3( angle, dist, time * 0.1 );\n\nfloat newTime1 = abs( snoise( coord + vec3( 0.0, -time * ( 0.35 + brightness * 0.001 ), time * 0.015 ), 15.0 ) );\nfloat newTime2 = abs( snoise( coord + vec3( 0.0, -time * ( 0.15 + brightness * 0.001 ), time * 0.015 ), 45.0 ) );\nfor( int i=1; i<=7; i++ ){\nfloat power = pow( 2.0, float(i + 1) );\nfVal1 += ( 0.5 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 10.0 ) * ( newTime1 + 1.0 ) ) );\nfVal2 += ( 0.5 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 25.0 ) * ( newTime2 + 1.0 ) ) );\n}\n\nfloat corona = pow( fVal1 * max( 1.1 - fade, 0.0 ), 2.0 ) * 50.0;\ncorona += pow( fVal2 * max( 1.1 - fade, 0.0 ), 2.0 ) * 50.0;\ncorona *= 1.2 - newTime1;\nvec3 sphereNormal = vec3( 0.0, 0.0, 1.0 );\nvec3 dir = vec3( 0.0 );\nvec3 center = vec3( 0.5, 0.5, 1.0 );\nvec3 starSphere = vec3( 0.0 );\n\nvec2 sp = p;// -1.0 + 2.0 * uv;\nsp.x *= aspect;\nsp *= ( 2.0 - brightness );\n  float r = dot(sp,sp);\nfloat f = (1.0-sqrt(abs(1.0-r)))/(r) + brightness * 0.5;\nif( dist < radius ){\ncorona *= pow( dist * invRadius, 24.0 );\n  vec2 newUv;\n  newUv.x = sp.x*f;\n  newUv.y = sp.y*f;\nnewUv += vec2( time, 0.0 );\n\nvec3 texSample = vec3(0.5);//texture( iChannel0, newUv ).rgb;\nfloat uOff = ( texSample.g * brightness * 4.5 + time );\nvec2 starUV = newUv + vec2( uOff, 0.0 );\nstarSphere = vec3(0.5);//texture( iChannel0, starUV ).rgb;\n}\n\nfloat starGlow = min( max( 0.50 - dist * ( 1.0 - brightness ), 0.0 ), 1.0 );\n//fragColor.rgb = vec3( r );\nvec3 color = vec3( 0.0 * ( 0.75 + brightness * 2.3 ) * orange ) + starSphere + corona * orange + starGlow * orangeRed;\n    return color;\n}\n\nfloat freqs[4];\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec4 fragColor =O;\n    vec2 uv = (C.xy / iResolution.xy) - .5;\n        vec2 uv3 = (C.xy / iResolution.xy) - .5;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n\nfloat v1, v2, v3;\nv1 = v2 = v3 = 0.0;\nfloat len2 = 1.;\nfreqs[0] = 0.5 * len2;\nfreqs[1] = 0.5 * len2;\nfreqs[2] = 0.5 * len2;\nfreqs[3] = 0.5 * len2;\n\nfloat brightness = freqs[1] * 0.25 + freqs[2] * 0.25;\nfloat radius = (0.24 + brightness * 0.2 ) ;\nfloat invRadius = 1.0/radius;\n\nvec3 red = vec3( 1.0, 0.3, 0.0 );\n    vec3 blue = vec3( 0.3, 0.65, 1.0 );\nvec3 orangeRed = vec3( 0.8, 0.35, 0.1 );\n    vec3 orangeBlue = vec3( 0.3, 0.05, 3.0 );\nfloat time = iTime * 0.1;\nfloat aspect = iResolution.x/iResolution.y;\nvec2 uv2 = C.xy / iResolution.xy;    \n  \n uv3.x/=0.5;\n   uv3*=3.1;\nvec2 p2 = uv3-0.5;\n\n \n   \n   \n\n    vec3 color2 = renderStar(p2+0.5, uv, time, brightness, aspect, radius, invRadius,\n    blue, orangeBlue);\n   \n   \n   \nfloat s = 0.0;\nfor (int i = 0; i < 90; i++)\n{\nvec3 p = s * vec3(uv, 0.0);\np.xy *= ma;\np += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\nfor (int i = 0; i < 8; i++) p = abs(p) / dot(p,p) - 0.659;\nv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\nv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\nv3 += length(p.xy*10.) * .0003;\ns  += .035;\n}\n\nfloat len = length(uv);\nv1 *= smoothstep(.7, .0, len);\nv2 *= smoothstep(.5, .0, len);\nv3 *= smoothstep(.9, .0, len);\n\nvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n(v1 + v3) * .3,\nv2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\nfragColor=vec4(min(pow(abs(col), vec3(1.2)), 1.0), 1.0);\n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,2));\n \n    for(float i=0.,s,e,g=1.5;\n        ++i<90.;\n        O.xyz+=.1*mix(vec3(1),H(log(s)*.3),.8)*exp(-12.*i*i*e)\n    )\n    {\n        p=g*d-vec3(0,0,2.5);\n        p.z+=0.1+0.5*cos(iTime);\n        p=R(p,normalize(vec3(1,2.*sin(iTime*.1),3)),0.);\n        s=5.;\n        p=p/dot(p,p)+1.;\n        for(int i=0;i++<8;p*=e)\n            p=1.-abs(p-1.),\n            s*=e=1.6/min(dot(p,p),1.5);\n        g+=e=length(cross(p,vec3(.577)))/s-5e-4;\n    }\n    O*=fragColor;\n    O.rgb+= color2 ;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}