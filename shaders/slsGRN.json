{
    "Shader": {
        "info": {
            "date": "1621693976",
            "description": "forked: \nRaymarched 3D hyperslice of a 4D roundedBox.\nhyperslice-vec4 in 4D space rotates by 2*quaternions, that are normalize(oscillating vec4())\n3d hyperslice (of 4d map() object) has 3d normals and a shadow in 3d space.\nNote this is NOT 4D raymarching\n",
            "flags": 32,
            "hasliked": 0,
            "id": "slsGRN",
            "likes": 2,
            "name": "4D Rounded box (Bluey)",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "4d",
                "box",
                "bluey"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// I raymarched a 3D slice of a 4D rounded box. The 3D slice (plane) that\n// cuts the 4D box is animated over time, and the cube itself is rotating\n// in 4D space. Note this is NOT 4D raymarching, it is 3D raymarching (of\n// a 3D slice of a 4D world).\n\n\n//colors\n#define blueBright (vec3(127,200,245)/255.)\n#define grey vec3(1.,.8,.6)\n\n#if HW_PERFORMANCE==0\n#define AA 0\n#else\n#define AA 0  // Set AA to 1 if your machine is too slow\n#endif\n\n#define dd(a) dot(a,a)\n#define sat(a) clamp(a,0.,1.)\n\nfloat sdBox(vec4 p,vec4 b){p=abs(p)-b//squared distance to roundedBox4d\n ;return min(max(max(p.x,p.y),max(p.z,p.w)),0.)+dd(max(p,0.));}\n\n//quaternion to 4d rotation (within 3d slice of a 4d point)\nmat4x4 q2m(vec4 q){return mat4x4(q.x,-q.y,-q.z,-q.w,q.y, q.x,-q.w, q.z\n                                ,q.z, q.w, q.x,-q.y,q.w,-q.z, q.y, q.x);}\n\n//return distance of p.xyz to a 4d roundedBox\n//a hyperslice is defined by a vec4, that is quaterion-rotated over time\nfloat map(vec3 pos, float time\n){vec4 p = vec4(pos,0.5*sin(time*0.513));//hyperslice-vector\n //rotate 3D point into 4D /todo, replace 4d rotation matrices by something more intuitive.\n ;vec4 a=normalize(cos(.2*time*vec4(1.0,1.7,1.1,1.5)+vec4(0.0,1.0,5.0,4.0)))//quaternion\n ;vec4 b=normalize(cos(.2*time*vec4(1.9,1.7,1.4,1.3)+vec4(3.0,2.0,6.0,5.0)))//quaternion\n ;p=q2m(b)*p*q2m(a)//2 rotation matrices\n ;return sqrt(sdBox(p,vec4(.8,.5,.7,.2)))-.16// 4D box\n ;}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(vec3 u,in float t\n){vec2 e=vec2(1.,-1.)*.5773;const float p=.00025\n ;return normalize(e.xyy*map(u+e.xyy*p,t)+e.yyx*map(u+e.yyx*p,t)\n\t\t\t\t  +e.yxy*map(u+e.yxy*p,t)+e.xxx*map(u+e.xxx*p,t));}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow(vec3 u,vec3 d,float a,float b,float t//rayOrigin,direction,min,max,time\n){float r=1.,m=a\n ;for(int i=0;i<32;i++ //good continuity of basic shapes needs only 32 shadow iterations\n ){float h=map(u+d*m,t);r=min(r,16.*h/m);m+=clamp(h,.01,.25);if(r<.001||m>b)break;}\n  return sat(r);}\n\nvec2 intersect( in vec3 ro, in vec3 rd, in float time\n){vec2 res = vec2(1e20,-1.0)\n ;{float t = (-1.0-ro.y)/rd.y;if( t>0.0 ) res = vec2(t,1.0);}    // plane\n ;{float tmax = min(6.0,res.x)\n  ;float t = 0.4\n  ;for( int i=0; i<128; i++ //marching loop for 4f\n  ){vec3 pos = ro + t*rd\n   ;float h = map(pos, time) //distancew field of 4d object\n   ;if( h<0.001 || t>tmax ) break\n   ;t += h\n   ;}\n  ;if( t<tmax && t<res.x ) res = vec2(t,2.0)\n  ;}    // plane\n  ;return res;}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p, in vec2 dpdx, in vec2 dpdy ){\n    // filter kernel\n    vec2 w = abs(dpdx)+abs(dpdy) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ ){\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        float di = 0.5*sin(fragCoord.x*147.0)*sin(fragCoord.y*131.0);\n        float time = iTime - 0.5*(1.0/24.0)*(float(m*AA+n)+di)/float(AA*AA-1);\n        \n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        float time = iTime;\n        #endif\n\n\t    // create view ray\n        vec3 ro = vec3(-0.5,0.0,2.5);\n        vec3 rd = normalize( vec3(p,-1.8) );\n         // ray differentials\n        vec2 px = (-iResolution.xy+2.0*(fragCoord.xy+vec2(1.0,0.0)))/iResolution.y;\n        vec2 py = (-iResolution.xy+2.0*(fragCoord.xy+vec2(0.0,1.0)))/iResolution.y;\n        vec3 rdx = normalize( vec3(px,-1.8) );\n        vec3 rdy = normalize( vec3(py,-1.8) );\n\n        // raymarch\n        vec2 tm = intersect( ro, rd, time );\n        vec3 col = vec3(0.6,0.75,0.85) - 0.97*rd.y;\n        if( tm.y>0.0 ){\n            // shading/lighting\t\n            vec3 pos = ro + tm.x*rd;\n            vec3 nor = (tm.y<1.5)?vec3(0.0,1.0,0.0):calcNormal(pos,time);\n            vec3 color=blueBright;\n            vec3 lig = normalize(vec3(0.8,0.4,0.6));\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            vec3  hal = normalize(lig-rd);\n            float sha = calcSoftshadow( pos+0.001*nor, lig, 0.001, 4.0, time );\n            float amb = 0.6 + 0.4*nor.y;\n            float bou = clamp(-nor.y,0.0,1.0);\n            float spe = clamp(dot(nor,hal),0.0,1.0);\n            col  = color*dif*sha*3.5;\n            col += vec3(0.12,0.18,0.24)*amb*4.;\n            col += vec3(0.30,0.20,0.10)*bou*2.;\n            \n            if( pos.y<-.99 ){\n                // project pixel footprint into the plane\n                vec3 dpdx = ro.y*(rd/rd.y-rdx/rdx.y);\n                vec3 dpdy = ro.y*(rd/rd.y-rdy/rdy.y);\n                float f = checkersGradBox( 2.0*pos.xz, 2.0*dpdx.xz, 2.0*dpdy.xz );\n                col *= 0.2 + f*vec3(0.05);\n            }\n            else                col *= 0.25;\n            \n            col += 0.2*pow(spe,8.0)*dif*sha;\n            \n            col = mix( col, vec3(0.6,0.7,0.8), 1.0-exp(-0.001*tm.x*tm.x) );           \n        }\n\n        // gamma        \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    tot = pow( tot, vec3(0.45) );\n    \n    tot = clamp(tot,0.0,1.0);\n        \n    tot = tot*tot*(3.0-2.0*tot);\n\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright © 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Quadratic Bezier - 3D BBox : https://www.shadertoy.com/view/ldj3Wh\n\n// Analytical computation of the exact bounding box for a cubic bezier segment\n// See https://iquilezles.org/articles/bezierbbox\n\n\n#define AA 0\n\nstruct bound3{vec3 mMin;vec3 mMax;};\n\n//---------------------------------------------------------------------------------------\n// bounding box for a bezier (https://iquilezles.org/articles/bezierbbox)\n//---------------------------------------------------------------------------------------\nbound3 BezierAABB( in vec3 p0, in vec3 p1, in vec3 p2 )\n{\n    // extremes\n    vec3 mi = min(p0,p2);\n    vec3 ma = max(p0,p2);\n\n    // p = (1-t)^2*p0 + 2(1-t)t*p1 + t^2*p2\n    // dp/dt = 2(t-1)*p0 + 2(1-2t)*p1 + 2t*p2 = t*(2*p0-4*p1+2*p2) + 2*(p1-p0)\n    // dp/dt = 0 -> t*(p0-2*p1+p2) = (p0-p1);\n\n    vec3 t = clamp((p0-p1)/(p0-2.0*p1+p2),0.0,1.0);\n    vec3 s = 1.0 - t;\n    vec3 q = s*s*p0 + 2.0*s*t*p1 + t*t*p2;\n\n    mi = min(mi,q);\n    ma = max(ma,q);\n    \n    return bound3( mi, ma );\n}\n\n\n// ray-ellipse intersection\nfloat iEllipse( in vec3 ro, in vec3 rd,         // ray: origin, direction\n             in vec3 c, in vec3 u, in vec3 v )  // disk: center, 1st axis, 2nd axis\n{\n\tvec3 q = ro - c;\n\tvec3 r = vec3(\n        dot( cross(u,v), q ),\n\t\tdot( cross(q,u), rd ),\n\t\tdot( cross(v,q), rd ) ) / \n        dot( cross(v,u), rd );\n    \n    return (dot(r.yz,r.yz)<1.0) ? r.x : -1.0;\n}\n\n\n// ray-box intersection (simplified)\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad ) \n{\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*(ro-cen);\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec2(-1.0);\n\n\treturn vec2( tN, tF );\n}\n\nfloat length2( in vec3 v ) { return dot(v,v); }\n\nvec3 iSegment( in vec3 ro, in vec3 rd, in vec3 a, in vec3 b )\n{\n\tvec3 ba = b - a;\n\tvec3 oa = ro - a;\n\t\n\tfloat oad  = dot( oa, rd );\n\tfloat dba  = dot( rd, ba );\n\tfloat baba = dot( ba, ba );\n\tfloat oaba = dot( oa, ba );\n\t\n\tvec2 th = vec2( -oad*baba + dba*oaba, oaba - oad*dba ) / (baba - dba*dba);\n\t\n\tth.x = max(   th.x, 0.0 );\n\tth.y = clamp( th.y, 0.0, 1.0 );\n\t\n\tvec3 p =  a + ba*th.y;\n\tvec3 q = ro + rd*th.x;\n\t\n\treturn vec3( th, length2( p-q ) );\n    \n}\n\n\nfloat iBezier( in vec3 ro, in vec3 rd, in vec3 p0, in vec3 p1, in vec3 p2, in float width)\n{\n    const int kNum = 50;\n    \n    float hit = -1.0;\n    float res = 1e10;\n    vec3 a = p0;\n    for( int i=1; i<kNum; i++ )\n    {\n        float t = float(i)/float(kNum-1);\n        vec3 b = mix(mix(p0,p1,t),mix(p1,p2,t),t);\n        vec3 r = iSegment( ro, rd, a, b );\n        if( r.z<width*width )\n        {\n            res = min( res, r.x );\n            hit = 1.0;\n        }\n        a = b;\n    }\n    \n    return res*hit;\n    \n    \n}\n\nfloat hash1( in vec2 p )\n{\n    return fract(sin(dot(p, vec2(12.9898, 78.233)))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n    // camera position\n\tvec3 ro = vec3( -0.5, 0.4, 1.5 );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // bezier animation\n    float time = iTime*0.5;\n    vec3 p0 = vec3(0.8,0.6,0.8)*sin( time*0.7 + vec3(3.0,1.0,2.0) );\n    vec3 p1 = vec3(0.8,0.6,0.8)*sin( time*1.1 + vec3(0.0,6.0,1.0) );\n    vec3 p2 = vec3(0.8,0.6,0.8)*sin( time*1.3 + vec3(4.0,2.0,3.0) );\n\tfloat thickness = 0.01;\n        \n    // render\n   \tvec3 col = vec3(0.4)*(1.0-0.3*length(p));\n\n    // raytrace bezier\n    float t = iBezier( ro, rd, p0, p1, p2, thickness);\n\tfloat tmin = 1e10;\n    if( t>0.0 )\n\t{\n    \ttmin = t;\n\t\tcol = vec3(1.0,0.75,0.3);\n\t}\n\n    // compute bounding box for bezier\n    bound3 bbox = BezierAABB( p0, p1, p2 );\n    bbox.mMin -= thickness;\n    bbox.mMax += thickness;\n\n    \n    // raytrace bounding box\n    vec3 bcen = 0.5*(bbox.mMin+bbox.mMax);\n    vec3 brad = 0.5*(bbox.mMax-bbox.mMin);\n\tvec2 tbox = iBox( ro, rd, bcen, brad );\n\tif( tbox.x>0.0 )\n\t{\n        // back face\n        if( tbox.y < tmin )\n        {\n            vec3 pos = ro + rd*tbox.y;\n            vec3 e = smoothstep( brad-0.03, brad-0.02, abs(pos-bcen) );\n            float al = 1.0 - (1.0-e.x*e.y)*(1.0-e.y*e.z)*(1.0-e.z*e.x);\n            col = mix( col, vec3(0.0), 0.25 + 0.75*al );\n        }\n        // front face\n        if( tbox.x < tmin )\n        {\n            vec3 pos = ro + rd*tbox.x;\n            vec3 e = smoothstep( brad-0.03, brad-0.02, abs(pos-bcen) );\n            float al = 1.0 - (1.0-e.x*e.y)*(1.0-e.y*e.z)*(1.0-e.z*e.x);\n            col = mix( col, vec3(0.0), 0.15 + 0.85*al );\n        }\n\t}\n\t\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    // dithering\n    tot += ((hash1(fragCoord.xy)+hash1(fragCoord.yx+13.1))/2.0-0.5)/256.0;\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}