{
    "Shader": {
        "info": {
            "date": "1650064767",
            "description": "shader showdown 2022 quarterfinals\n\nUPDATE: added AA",
            "flags": 32,
            "hasliked": 0,
            "id": "NlBcRd",
            "likes": 72,
            "name": "Jansen Blueprint",
            "published": 3,
            "tags": [
                "straandbeast"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 1322
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//antialising\n#define AA_SAMPLES 1\n\nfloat t = 0.;\nfloat ot = 0.;\n#define ro(r) mat2(cos(r),-sin(r),sin(r),cos(r))\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p,mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat doodad(vec3 p, vec2 a, vec2 b, float s) {\n  s/=2.;\n  float wire = max(min(length(p.yz-a)-.04, length(p.yz-b)-.04),abs(p.x)-s-.04);\n  return min(max(linedist(p.yz,a,b)-.05,abs(abs(p.x)-s)-.02),wire);\n}\n\nvec2 poop(vec2 a, vec2 b, float d1, float d3, float side) {\n  float d2 = distance(a,b);\n  float p = (d1*d1+d2*d2-d3*d3)/d2/2.;\n  float o = side*sqrt(d1*d1-p*p);\n  return a + mat4x2(-p,-o,o,-p,p,o,-o,p)*vec4(a,b)/d2;\n}\n\nfloat scene(vec3 p) {\n  float dist = 1e4;\n  vec2 D = ro(ot*7.)*vec2(.15,0);\n  p.x-=0.025;\n  {\n  float side = 1.;\n  vec2 M = vec2(-.4*side,0);\n  vec2 a = poop(M,D,.4,.6,side);\n  vec2 b = poop(M,D,.4,.6,-side);\n  vec2 c = poop(M,a,.4,.5,side);\n  vec2 d = poop(b,c,.35,.4,side);\n  vec2 e = poop(b,d,.4,.6,side);\n  \n  dist = min(dist, doodad(p,D,a,.0));\n  dist = min(dist, doodad(p,M,a,.1));\n  dist = min(dist, doodad(p,D,b,.2));\n  dist = min(dist, doodad(p,M,b,.3));\n  dist = min(dist, doodad(p,b,d,.0));\n  dist = min(dist, doodad(p,M,c,.0));\n  dist = min(dist, doodad(p,c,d,.1));\n  dist = min(dist, doodad(p,b,e,.1));\n  dist = min(dist, doodad(p,c,a,.2));\n  dist = min(dist, doodad(p,d,e,.2));\n  }\n  p.x+=0.05;\n  {\n  float side = -1.;\n  vec2 M = vec2(-.4*side,0);\n  vec2 a = poop(M,D,.4,.6,side);\n  vec2 b = poop(M,D,.4,.6,-side);\n  vec2 c = poop(M,a,.4,.5,side);\n  vec2 d = poop(b,c,.35,.4,side);\n  vec2 e = poop(b,d,.4,.6,side);\n  \n  dist = min(dist, doodad(p,D,a,.0));\n  dist = min(dist, doodad(p,M,a,.1));\n  dist = min(dist, doodad(p,D,b,.2));\n  dist = min(dist, doodad(p,M,b,.3));\n  dist = min(dist, doodad(p,b,d,.0));\n  dist = min(dist, doodad(p,M,c,.0));\n  dist = min(dist, doodad(p,c,d,.1));\n  dist = min(dist, doodad(p,b,e,.1));\n  dist = min(dist, doodad(p,c,a,.2));\n  dist = min(dist, doodad(p,d,e,.2));\n  }\n  return dist;\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.001);\n  return normalize(scene(p)-vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\nfloat bpm = 127.;\n\nvec3 pixel_color(vec2 uv) {\n  \n  uv += texture(iChannel0,uv*2.).x*0.0025;\n  \n  float m = 2.*60./bpm;\n  float rng = floor(m*iTime)/m;\n  float w = iTime - rng;\n  t =rng + mix(pow( w,3.),w,.8);\n  ot =t ;\n  t += fract(cos(rng)*456.)*3.;\n  \n  vec3 cam = normalize(vec3(1.8+cos(rng*45.)*.5,uv));\n  vec3 init = vec3(-3,cos(rng*445.)*.3,-.2);\n  \n  float ry = sin(cos(rng*64.)*100.)*.3;\n  cam.xz*=ro(ry);\n  init.xz*=ro(ry);\n  float rz = t*.5 + cos(rng*64.)*100.;\n  cam.xy*=ro(rz);\n  init.xy*=ro(rz);\n  \n  vec3 p = init;\n  bool hit = false;\n  bool trig = false;\n  for (int i = 0; i < 50 && !hit; i++) {\n    float dist = scene(p);\n    hit = dist*dist < 1e-6;\n    if (!trig) trig = dist<0.005;\n    p += cam*dist;\n  }\n  float v = 1.-dot(uv,uv)*.5;\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  float fact = dot(cam,r);\n  vec2 grid = abs(asin(sin(uv*40.)));\n  float g =smoothstep(1.52,1.58,max(grid.x,grid.y));\n  float f = smoothstep(.8,.85,fact) + smoothstep(.4,.45,fact)*smoothstep(.5,1.,cos(uv.y*1000.));\n  vec3 fragColor = min(vec3(1),hit ? vec3(f) : vec3(trig?1.:g))*.8;\n  fragColor.xyz += texture(iChannel1,clamp(ro(ot)*(uv*6.+vec2(4.2,2))+.5,0.,1.)).xyz;\n  fragColor*=v;\n  return fragColor*fragColor;\n}\n\nvec2 weyl_2d(int n) {\n    return fract(vec2(n*12664745, n*9560333)/exp2(24.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    fragColor = vec4(0);\n    for (int i = 0; i < AA_SAMPLES; i++) {\n        vec2 uv2 = uv + weyl_2d(i)/iResolution.y*1.25;\n        fragColor += vec4(pixel_color(uv2), 1.);\n    }\n\tfragColor.xyz = sqrt(fragColor.xyz/fragColor.w);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//from https://www.shadertoy.com/view/4sKyRK\nfloat distanceToBottleCurve(vec2 point) {\n    return point.y-0.1*sin(point.x*2.5 + 0.6) + 0.05*sin(5.0*point.x) + 0.04*sin(7.5*point.x);\n}\nbool texturee(vec2 uv) {\n    float ang = atan(uv.y, uv.x);\n    float len = floor(length(uv)*10.0);\n    bool val = len == 2. || len == 6. || len == 9.;\n    if (len == 3. || len == 4. || len == 5. || len == 8. || len == 10.) {\n        val = distanceToBottleCurve(vec2(ang+len,0.0))*7.99 > cos(len*7.99);\n    }\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    //I would make a better revision logo but I am too tired :(\n    fragColor = vec4(1.0,91.0,188.0,1.0)/255.;\n    float rad1 = abs(floor(atan(uv.x,uv.y)/2.)*.04);\n    if (texturee(uv*2.5)) {\n        fragColor = vec4(255.0,214.0,0.0,1.0)/255.;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}