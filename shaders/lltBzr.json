{
    "Shader": {
        "info": {
            "date": "1538503948",
            "description": "Quick demo: engage relativistic speeds! Every green linis 1 light minute.\n\nPress left/right to go to Earth/Mars. Press down to switch reference frames.\n\nThe ship accelerates at about 1 light second per second, or 30,000,000 g.",
            "flags": 48,
            "hasliked": 0,
            "id": "lltBzr",
            "likes": 9,
            "name": "To Mars & Back: Relativistic",
            "published": 3,
            "tags": [
                "relativity"
            ],
            "usePreview": 0,
            "username": "JeroenDStout",
            "viewed": 620
        },
        "renderpass": [
            {
                "code": "vec2 spaceTransform ( in vec2 coord, in mat3x3 trans )\n{\n    vec3 c = vec3(coord.x, coord.y, 1.);\n    return (c * trans).xy;\n}\n\nvoid drawPlanetSS( inout vec3 frag, in vec2 coord, in vec2 xy, float radius, in vec3 col)\n{\n    float dist = length(coord - xy) / radius;\n\tfrag = mix( frag, col, 1. - smoothstep(9.5e-1, 1e0, dist) );\n}\n\nvoid drawShipSS( inout vec3 frag, in vec2 coord, in vec2 xy, float scale )\n{\n    drawPlanetSS( frag, coord, xy, 0.04 * scale, vec3(1., 1., 1.));\n}\n\nvoid drawClock(inout vec3 frag, in vec2 xy, float _r, float time)\n{\n    // some code borrowed from https://www.shadertoy.com/view/lsXGz8\n    \n\tfloat frac = mod(time, 1.0);\n\tfloat secs = mod(floor(time), 60.0 );\n\tfloat mins = mod(time/60.0, 60.0 );\n\tfloat hors = mod(time/3600.0, 12.0 );\n    \n    float r = length(xy) / _r;\n    xy *= vec2(-1.);\n    \n\tfloat a = atan( xy.y, xy.x )+3.1415926;\n    \n\tfrag = mix( frag, vec3(0.9-0.4*pow(r,4.0)), 1.0-smoothstep(0.94,0.95,r) );\n\tfrag = mix( frag , vec3(0.0), 1.0-smoothstep(0.05,0.07,abs(r-0.95)) );\n    \n    vec2 fracOr = vec2(0., 0.065);\n    float r2 = length(xy-fracOr) / _r;\n\tfrag = mix( frag , vec3(0.7, 0.65, 0.45), 1.0-smoothstep(0.01,0.07,abs(r2-.3)));\n    \n\tfloat f = abs(2.0*fract(0.5+a*12.0/6.2831)-1.0);\n\tfloat w = fwidth(f);\n\tf = 1.0 - smoothstep( 0.05-w, 0.1+w, f );\n\tf *= smoothstep( 0.5, 0.86, r ) - smoothstep( 0.94, 0.95, r );\n\tfrag = mix( frag, vec3(0.0), f );\n    \n\tvec2 dir;\n    \n\tdir = vec2( sin(6.2831*frac), cos(6.2831*frac) );\n    frag = line( frag, vec2(0.), dir*0.05, xy - fracOr, vec2(0.0035,1.0), vec4(0.1,0.0,0.5,.5) );\n    \n\tdir = vec2( sin(6.2831*hors/12.0), cos(6.2831*hors/12.0) );\n    frag = line( frag, vec2(0.0), dir*0.07, xy, vec2(0.0085,1.0), vec4(0.0,0.0,0.0,1.0) );\n    \n\tdir = vec2( sin(6.2831*mins/60.0), cos(6.2831*mins/60.0) );\n    frag = line( frag, vec2(0.0), dir*0.12, xy, vec2(0.0055,1.0), vec4(0.0,0.0,0.0,1.0) );\n    \n\tdir = vec2( sin(6.2831*secs/60.0), cos(6.2831*secs/60.0) );\n    frag = line( frag, vec2(0.0), dir*0.12, xy, vec2(0.0035,1.0), vec4(0.5,0.0,0.0,1.0) );\n}\n\nvoid drawGrid(inout vec3 frag, in vec2 xy, float time)\n{\n    vec2 gridPos = xy;\n    gridPos.y *= 60.;\n    gridPos.y += time;\n    gridPos = mod(gridPos+0.5, vec2(1.));\n    \n    frag = line( frag, vec2(0.0, -100.), vec2(0., 100.), gridPos-0.5, vec2(0.015,2.0), vec4(0.0,1.0,0.0,0.2) );\n//    frag = line( frag, vec2(-100.0, 0.), vec2(100., 0.), gridPos-0.5, vec2(0.015,2.0), vec4(0.0,1.0,0.0,0.05) );\n\n    frag = line( frag, vec2(-100.0, 0.), vec2(100., 0.), xy, vec2(0.015,2.0), vec4(0.7,1.0,0.7,0.40) );\n}\n\nvoid drawVector(inout vec3 frag, in vec2 xy, in vec2 origin, in vec2 dir, in vec3 col)\n{  \n    frag = line( frag, origin, origin+dir, xy, vec2(0.015,2.0), vec4(col, 1.) );\n    frag = line( frag, origin, origin+vec2(dir.x, 0.), xy, vec2(0.015,2.0), vec4(col, 0.5) );\n    frag = line( frag, origin, origin+vec2(0., dir.y), xy, vec2(0.015,2.0), vec4(col, 0.5) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);\n\n    fragColor = vec4(0.1, 0.1, 0.1, 1.0);\n    \n    vec4 baseData = texelFetch( iChannel0, ivec2(0, 0), 0);\n    float shipX = baseData.x;\n    float shipS = baseData.y;\n    \n    float dispX = 1.75;\n    float rScale = 1.5;\n    \n    mat3x3 trans = mat3x3( rScale, 0., 0.,\n                           0., rScale, 0.,\n                           0., 0., 1. ); \n    \n    trans[0][2] = dispX;\n    trans[1][2] = 0.;\n    \n    float time = baseData.z;\n    vec2 shipJpRfOrient = getShipOrientJRf(shipS*60.);\n    \n    vec2 spaceFold = vec2(0., 1.) - shipJpRfOrient;\n    \n    mat3x3 invTrans = inverse(trans);\n    \n    vec2 localPos = spaceTransform(uv, trans);\n    \n    drawGrid( fragColor.xyz, localPos, time);\n    \n    drawPlanetSS( fragColor.xyz, localPos, vec2(0., 0.), 0.1, vec3( 0.1, 0.4, 0.9 ) );\n    drawPlanetSS( fragColor.xyz, localPos, vec2(3.5, 0), 0.08, vec3( 0.8, 0.4, 0.05 ) );\n    \n    drawShipSS( fragColor.xyz, localPos, vec2(baseData.x, 0), rScale );\n    \n    drawVector( fragColor.xyz, spaceTransform(uv, trans),\n               \t\tvec2(shipX, 0.), shipJpRfOrient, vec3(1.0, 0.9, 0.0));\n    \n    vec2 terraClock = spaceTransform(vec2(0.0, 0.), invTrans);\n    vec2 shipClock = spaceTransform(vec2(baseData.x, 0.), invTrans);\n    \n    drawClock( fragColor.xyz, terraClock - uv - vec2(0., -0.3), .15, baseData.z);\n    drawClock( fragColor.xyz, shipClock - uv - vec2(0., 0.3), .15, baseData.w);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 getShipOrientJRf( in float speed )\n{\n    float ang = atan(speed);\n    return vec2(sin(ang), cos(ang));\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec3 line( in vec3 buf, in vec2 a, in vec2 b, in vec2 p, in vec2 w, in vec4 col )\n{\n   float f = sdLine( p, a, b );\n   float g = fwidth(f)*w.y;\n   return mix( buf, col.xyz, col.w*(1.0-smoothstep(w.x-g, w.x+g, f)) );\n}\nfloat segment(vec2 uv)\n{\n    uv = abs(uv);\n\treturn (1.0-smoothstep(0.07,0.10,uv.x))\n         * (1.0-smoothstep(0.46,0.49,uv.y+uv.x))\n         * (1.25 - length(uv*vec2(3.8,1.3)));\n}\n\n/* Clock rendering by Andre: https://www.shadertoy.com/view/Xsy3zG */\n\nfloat sevenSegment(vec2 uv,int num)\n{\n\tfloat seg= 0.0;\n    \n    if (num>=2 && num!=7 || num==-2)\n        seg = max(seg,segment(uv.yx));\n        \n    if (num==0 || \n            (uv.y<0.?((num==2)==(uv.x<0.) || num==6 || num==8):\n            (uv.x>0.?(num!=5 && num!=6):(num>=4 && num!=7) )))\n        seg = max(seg,segment(abs(uv)-0.5)); \n\t\n    if (num>=0 && num!=1 && num!=4 && (num!=7 || uv.y>0.))\n        seg = max(seg,segment(vec2(abs(uv.y)-1.0,uv.x)));\n    \n\treturn seg;\n}\n\nfloat showNum(vec2 uv,float nr, bool zeroTrim)\n{\n    if (uv.x>-3.0 && uv.x<0.0)\n    {\n        float digit = floor(-uv.x / 1.5);\n\t\tnr /= pow(10.,digit);\n        nr = mod(floor(nr+0.000001),10.0);\n        if (nr==0.0 && zeroTrim && digit!=0.0)\n            return 0.;\n\t\treturn sevenSegment(uv+vec2( 0.75 + digit*1.5,0.0),int(nr));\n    }\n\treturn 0.;\n}\n\nfloat dots(vec2 uv)\n{\n\tuv.y = abs(uv.y)-0.5;\n\tfloat l = length(uv);\n\treturn (1.0-smoothstep(0.11,0.13,l)) * (1.0-l*2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0, uv);\n    \n    ivec2 pix = ivec2(fragCoord.xy);\n    \n    fragColor = data;\n    \n    if (pix.y == 0) {\n        if (pix.x == 0) {\n            float shipPos      = data.x;\n            float shipRfSpeed  = data.y;\n            \n            float shipTimeDil  = getShipOrientJRf(shipRfSpeed*60.).y;\n            float timeAdjust   = 1.;\n            \n            if (texelFetch( iChannel1, ivec2(KEY_DOWN,2), 0).x == 0.) {\n                timeAdjust   = 1. / shipTimeDil;\n            }\n            \n            float tDelta\t   = min(1. / 20., iTimeDelta);\n                \n            float jupTimeRate  = tDelta * timeAdjust;\n            float shipTimeRate = tDelta * shipTimeDil * timeAdjust;\n            \n            float jupTime      = data.z + jupTimeRate;            \n            float shipTime     = data.w + shipTimeRate;   \n            \n            if (iTime < 0.1) {\n                jupTime = iDate.w;\n                shipTime = iDate.w;\n                shipPos = 0.;\n            }\n            \n            shipPos += shipRfSpeed * shipTimeRate;\n            \n            //shipRfSpeed -= texelFetch( iChannel1, ivec2(KEY_LEFT,0),0 ).x * iTimeDelta * 1.;\n            //shipRfSpeed += texelFetch( iChannel1, ivec2(KEY_RIGHT,0),0 ).x * iTimeDelta * 1.;\n            \n            float distToTravel = 0.;\n            if (texelFetch( iChannel0, ivec2(1,0),0 ).x == 0.) {\n                distToTravel = 3.5 - shipPos;\n            }\n            else if (texelFetch( iChannel0, ivec2(1,0),0 ).x == 1.) {\n                distToTravel = -shipPos;\n            }\n            \n            float distToTravelFac = min(1., abs(distToTravel) * 100.);\n            \n            float slowDownDist = sign(shipRfSpeed) * pow(shipRfSpeed, 2.) * 60.;\n            shipRfSpeed += sign(distToTravel - slowDownDist) * shipTimeRate / 60. * distToTravelFac;\n            \n            if (abs(distToTravel) < 1e-3) {\n                shipRfSpeed *= exp(-shipTimeRate * 10.);\n            }\n            \n    \t\tfragColor = vec4(shipPos, shipRfSpeed, jupTime, shipTime);\n        }\n        else if (pix.x == 1) {\n            if (texelFetch( iChannel1, ivec2(KEY_RIGHT,0),0 ).x != 0.) {\n                fragColor.x = 0.;\n            }\n            if (texelFetch( iChannel1, ivec2(KEY_LEFT,0),0 ).x != 0.) {\n                fragColor.x = 1.;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}