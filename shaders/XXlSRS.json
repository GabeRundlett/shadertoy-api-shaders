{
    "Shader": {
        "info": {
            "date": "1709659012",
            "description": "messy ugly code, don't bother reading it. Just basic raymarching written from scratch to make this one thing, not be any good.",
            "flags": 32,
            "hasliked": 0,
            "id": "XXlSRS",
            "likes": 9,
            "name": "recursionÕè",
            "published": 3,
            "tags": [
                "raymarching",
                "text",
                "recursion",
                "modelling"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    O = texture(iChannel0, U/iResolution.xy)*2.;\n    O = O/(O + vec4(1));\n    O = pow(O, vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int maxSteps = 2<<8;\nfloat minDist = 1e-3; \nfloat maxDist = 1e3;\nfloat bevel = 0.02;\nfloat base = 0.05;\nfloat width = 1.7;\n\n#define rotx (iMouse.z > 0.?iMouse.y/iResolution.y*0.5+1.:1.2)\n#define roty (iMouse.z > 0.?(iMouse.x/iResolution.x*2. - 1.)*1.7:sin(iTime)*0.7)\n\n#define m(x) m = min(m, x);\n\nfloat boxDF( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n} // By Inigo Quilez\n\nfloat rectDF( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n} // By Inigo Quilez\n\nmat2x2 rot(float x){\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nfloat df(vec3 p) {\n    float m = maxDist;\n    \n    p.xz *= rot(roty);\n    \n    m(boxDF(p, vec3(width, 1., 0.01))-bevel);\n    p.y += 1. + bevel + base;\n    p.yz *= rot(rotx);\n    m(max(boxDF(p + vec3(0,1,0), vec3(width, 1., base))-bevel, -boxDF(p + vec3(0, 0.68, 1.04), vec3(width - 0.2, 0.62, 1))));\n    m(-p.z + base);\n    \n    float w = 0.135;\n    if (abs(p.x) < width && abs(p.y + 1.) < 1.) m(boxDF(vec3(mod(p.xy - vec2(0.2, 0) + w/2., w)-w/2., p.z), vec3(0.05, 0.05, 0.06)) - 0.005);\n    \n    \n    return m;\n}\n\nvec3 norm(float d, vec3 p, float e){\n    return vec3(\n        \n        d - df(p - vec3(e, 0, 0)),\n        d - df(p - vec3(0, e, 0)),\n        d - df(p - vec3(0, 0, e))\n    \n    )/e;\n}\n\nvec3 norm(vec3 p, float e){\n    return norm(df(p), p, e);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = (2.*U-r)/r.y;\n\n    vec3 o = vec3(0, 0, -3. * sin(iTime * 0.5) - 8.);\n    vec3 dir = normalize(vec3(uv, 5.));\n    float d, t = 0.;\n    vec3 p = vec3(0);\n    \n    for (int i = maxSteps; i-->0;){\n        p = o + dir*t;\n        d = df(p);\n        \n        t += d;\n        \n        if (d < minDist) break;\n        if (t > maxDist){\n            t = maxDist;\n            O = vec4(0); return;\n        }\n    }\n    \n    vec3 col = vec3(1.);\n    vec3 normal = norm(d, p, 1e-4*t);\n    \n    vec3 tp = p;\n    tp.xz *= rot(roty);\n    \n    if (abs(tp.x) < width-0.1 && abs(tp.y) < 0.9 && tp.z < 0.){ // Screen\n        col = vec3(.5);\n        // Recursion time!\n        \n        vec2 suv = tp.xy / vec2(width-0.1, 0.9);\n        vec2 suV = suv * 0.5 + 0.5;\n        \n        col = texture(iChannel0, suV).xyz * 1.2; // 1.2 times the buffer brightness so it fades to white\n       \n    } else {\n    \n        tp.y += 1. + bevel;\n        tp.yz *= rot(rotx);\n        \n        if (tp.z >= base + bevel*2. -1e-2 ){ // the 1e-2 prevents float point precision z fighting issues. See what happens without it!\n            col = texture(iChannel1, tp.yx*0.1).xyz; // Table\n            vec3 gray = col * vec3(0.3, 0.5, 0.2); // Half step for desaturation - adding components gives grayscale.\n            col = mix(pow(col, vec3(2)), vec3(gray.x + gray.y + gray.z), 0.2)*0.2;\n            \n            col *= smoothstep(0., 0.2, rectDF(tp.xy + vec2(0, 1), vec2(1.6, 1.))) * 0.8 + 0.2;\n            \n        } else {\n            \n            float x = (abs(tp.x) < 0.5 && abs(tp.y+1.65) < 0.25)?5.:8.;\n            \n            col *= pow(dot(normal, normalize(vec3(1, 1, -2))), x); // Pow to give it a kinda metallic look.\n                        \n            col *= (abs(tp.x) < width-0.2 && abs(tp.y+0.7) < 0.6)?texture(iChannel2, tp.xy*0.463 + vec2(0, 0.043)).x*0.9 + 0.1:0.1;\n            \n            \n        }\n    }\n\n    O = vec4(col, 1.) * smoothstep(30., 1., t);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}