{
    "Shader": {
        "info": {
            "date": "1478295279",
            "description": "A quick colour picker. Change the value of correct_gamma to 1 to see the gamma corrected version.",
            "flags": 32,
            "hasliked": 0,
            "id": "MttXR8",
            "likes": 18,
            "name": "HSV Colour picker",
            "published": 3,
            "tags": [
                "2d",
                "saturation",
                "rainbow",
                "hue",
                "value",
                "colour",
                "picker",
                "selector"
            ],
            "usePreview": 0,
            "username": "kaamilj",
            "viewed": 2240
        },
        "renderpass": [
            {
                "code": "#define correct_gamma 0\n\nfloat interpolate(float one, float two, float point){\n    float interpolated = one + (two - one)*point;\n    return interpolated;\n}\n\nfloat map(float value, float fromMin, float fromMax, float toMin, float toMax){\n    float percentage = (value - fromMin)/(fromMax - fromMin);\n    return toMin + (toMax - toMin)*percentage;\n}\n\nvec4 hueToRGB(float hue){\n    float red = 0.0;\n    float green = 0.0;\n    float blue = 0.0;\n    if(hue >= 0.0 && hue < 60.0){\n        red = 1.0;\n        green = hue/60.0;\n        blue = 0.0;\n    }else if(hue >= 60.0 && hue < 120.0){\n        red = 1.0 - (hue - 60.0)/60.0;\n        green = 1.0;\n        blue = 0.0;\n    }else if(hue >= 120.0 && hue < 180.0){\n        red = 0.0;\n        green = 1.0;\n        blue = (hue - 120.0)/60.0;\n    }else if(hue >= 180.0 && hue < 240.0){\n        red = 0.0;\n        green = 1.0 - (hue - 180.0)/60.0;\n        blue = 1.0;\n    }else if(hue >= 240.0 && hue < 300.0){\n        red = (hue - 240.0)/60.0;\n        green = 0.0;\n        blue = 1.0;\n    }else if(hue >= 300.0 && hue <= 360.0){\n        red = 1.0;\n        green = 0.0;\n        blue = 1.0 - (hue - 300.0)/60.0;\n    }\n    return vec4(red,green,blue,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float hue = clamp(texture(iChannel0, vec2(0.01,0.01)).x * 360.0, 0.0, 360.0);\n    vec4 pixel = vec4(0,0,0,0);\n\tvec2 uv = fragCoord.xy / (iResolution.xy - vec2(50,0));\n    pixel = hueToRGB(hue);\n    \n    if(uv.x < 1.0){\n\t\tpixel = vec4(uv.y*interpolate(1.0, pixel.x, uv.x),uv.y*interpolate(1.0, pixel.y, uv.x),uv.y*interpolate(1.0, pixel.z, uv.x),1.0);\n    }else if(uv.y > 0.1 && uv.x > 1.01){\n        float mapped = map(uv.y, 0.1, 1.0, 360.0, 0.0);\n        if(abs(mapped - hue)<0.5){\n            pixel = vec4(0,0,0,1);\n        }else{\n        \tpixel = hueToRGB(mapped);\n        }\n    }else if(uv.y < 0.08 && uv.x > 1.01){\n        pixel = texture(iChannel0, vec2(0.25,0.25));\n    }else{\n        pixel = vec4(1,1,1,1);\n    }\n    \n    vec2 selectedPos = texture(iChannel0, vec2(0.15,0.15)).xy*(iResolution.xy - vec2(50,0));\n    if(abs(length(selectedPos - fragCoord) - 8.0) < 0.5){\n        if(selectedPos.y > iResolution.y*0.5){\n        \tpixel = vec4(0,0,0,1);\n        }else{\n            pixel = vec4(1,1,1,1);\n        }\n    }\n    \n    #if correct_gamma == 1\n    //Suggested by FabriceNeyret2\n    //It doesn't seem right to me, if someone could point me to somewhere explaining this it'd be great!\n    fragColor = pow(pixel, vec4(1.0/2.2));\n    \n    #else\n    fragColor = pixel;\n    \n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float interpolate(float one, float two, float point){\n    float interpolated = one + (two - one)*point;\n    return interpolated;\n}\n\nfloat map(float value, float fromMin, float fromMax, float toMin, float toMax){\n    float percentage = (value - fromMin)/(fromMax - fromMin);\n    return toMin + (toMax - toMin)*percentage;\n}\n\nvec4 hueToRGB(float hue){\n    float red = 0.0;\n    float green = 0.0;\n    float blue = 0.0;\n    if(hue >= 0.0 && hue < 60.0){\n        red = 1.0;\n        green = hue/60.0;\n        blue = 0.0;\n    }else if(hue >= 60.0 && hue < 120.0){\n        red = 1.0 - (hue - 60.0)/60.0;\n        green = 1.0;\n        blue = 0.0;\n    }else if(hue >= 120.0 && hue < 180.0){\n        red = 0.0;\n        green = 1.0;\n        blue = (hue - 120.0)/60.0;\n    }else if(hue >= 180.0 && hue < 240.0){\n        red = 0.0;\n        green = 1.0 - (hue - 180.0)/60.0;\n        blue = 1.0;\n    }else if(hue >= 240.0 && hue < 300.0){\n        red = (hue - 240.0)/60.0;\n        green = 0.0;\n        blue = 1.0;\n    }else if(hue >= 300.0 && hue <= 360.0){\n        red = 1.0;\n        green = 0.0;\n        blue = 1.0 - (hue - 300.0)/60.0;\n    }\n    return vec4(red,green,blue,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/(iResolution.xy - vec2(50,0));\n    vec2 mouseUV = iMouse.xy/(iResolution.xy - vec2(50,0));\n    bool changing = iMouse.z/(iResolution.x-50.0) > 1.01 && iMouse.w/iResolution.y > 0.1;\n    if(changing){\n        fragColor = vec4(map(mouseUV.y, 0.1, 1.0, 1.0, 0.0),0,0,0);\n    }else{\n    \tfragColor = texture(iChannel0, vec2(0.01,0.01));\n    }\n    vec4 pixel = hueToRGB(clamp(texture(iChannel0, vec2(0.01,0.01)).x*360.0, 0.0, 360.0));\n    if(uv.x > 0.1 && uv.y > 0.1){\n        if(iMouse.z/(iResolution.x-50.0) < 1.0 && iMouse.z/(iResolution.x-50.0) > 0.0){\n            vec4 pixel = hueToRGB(texture(iChannel0, vec2(0.01,0.01)).x*360.0);\n            fragColor = vec4(clamp(mouseUV.x, 0.0, 1.0),mouseUV.y,1,1);\n        }else{\n            fragColor = texture(iChannel0, vec2(0.15,0.15));\n        }\n    }\n    if(uv.x > 0.2, uv.y > 0.2){\n        vec2 colorUV = texture(iChannel0, vec2(0.15,0.15)).xy;\n        fragColor = vec4(colorUV.y*interpolate(1.0, pixel.x, colorUV.x),colorUV.y*interpolate(1.0, pixel.y, colorUV.x),colorUV.y*interpolate(1.0, pixel.z, colorUV.x),1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}