{
    "Shader": {
        "info": {
            "date": "1552379679",
            "description": "Complex Sine & Cosine Waves\nmy step by step tutorial 12\nby Arthur Stammet, 03.2019\ninspired by The Art of Code : https://www.youtube.com/watch?v=jKuXA0trQPE",
            "flags": 0,
            "hasliked": 0,
            "id": "3dlXWf",
            "likes": 1,
            "name": "Tuto012 Sine & Cosine Waves",
            "published": 3,
            "tags": [
                "wave",
                "tutorial",
                "sine"
            ],
            "usePreview": 0,
            "username": "arthurstammet",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "/* ************************************************************************************* \n\nSine & Cosine Waves\n\nBasic tutorial 12\nby Arthur Stammet, 03.2019\n\ninspired by The Art of Code : https://www.youtube.com/watch?v=jKuXA0trQPE\n\n************************************************************************************* */\n\nfloat Bar (float t, float b1, float b2, float blur) {\n    float s1 = smoothstep(b1 - (blur/2.), b1 + (blur/2.), t); \t// first ramp\n    float s2 = smoothstep(b2 + (blur/2.), b2 - (blur/2.), t); \t// second ramp\n    return s1 * s2; \t\t\t\t\t\t\t\t\t\t\t// build ramp\n}\n\nfloat Rectangle (vec2 uv, float L, float R, float B, float T, float blur ) {\n    float b1 = Bar(uv.x, L, R, blur); \t// build Left-Right Limits\n    float b2 = Bar(uv.y, B, T, blur); \t// build Bottom-Top Limits\n    return b1 * b2;\n}\n\nfloat sineWave (float x, float s, float f, float a) {\n    float w = sin(s+x*f)*a;\n    return w;\n}\n\nfloat cosineWave (float x, float s, float f, float a) {\n    float w = cos(s+x*f)*a;\n    return w;\n}\n\nfloat Waves4 (float x, float p, float f, float a) {\n    float w = sin(p+x*f)*a;\n    return w;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set the center to the middle of the screen and make the pixels quadratic\n    vec2 p = (fragCoord-.5*iResolution.xy)/iResolution.y; \n\n    // change values here --------------------------------------------------------------\n\n\tfloat freq = 14. + sin(iTime * 0.1) * 10.;\n    float amp = sin(iTime * 0.15) * 0.4;    \n    float phase = iTime;    \n    float blur = 0.03;    \n    \n    // dimensions of the base rectangle (before y-distortion)\n    float width = 1.5;\n    float height = 0.04;\n    \n    // ---------------------------------------------------------------------------------\n    \n\tfloat x = p.x;\n    float modS = sineWave( x, phase, freq, amp);\n    float modC = cosineWave( x, phase, freq, amp);\n    float yS = p.y - modS;\n    float yC = p.y - modC;\n    \n    vec3 back = vec3 ( 0., 0., 0. ); // colorized screen (animated)\n    vec3 sinWave = vec3 ( 0., 1., 0. ); // green\n    vec3 cosWave = vec3 ( 0., 0., 1. ); // blue\n\tsinWave *= Rectangle( vec2(x,yS), -width/2., width/2., -height/2., height/2., blur);\n\tcosWave *= Rectangle( vec2(x,yC), -width/2., width/2., -height/2., height/2., blur);\n    \n    fragColor = vec4(back + sinWave + cosWave, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}