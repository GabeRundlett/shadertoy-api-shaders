{
    "Shader": {
        "info": {
            "date": "1594125192",
            "description": "I enjoyed playing around with this :)\nFeel free to experiment with different values for num_rings and circles_per_ring.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt2cWR",
            "likes": 12,
            "name": "Synesthetic Rings",
            "published": 3,
            "tags": [
                "2d",
                "sound",
                "colors",
                "audio",
                "visualizer",
                "musicvisualizer",
                "soundcloud"
            ],
            "usePreview": 0,
            "username": "isaacchurchill",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "//#define XOR_COLORING\n\n#define PI 3.14159265\n\nvec3 palette(float f)\n{\n#ifdef XOR_COLORING\n    return vec3(mod(f, 2.0));\n#else\n    f *= 0.09 * PI * 2.0;\n    return clamp(\n        vec3(sin(f + 2.0), sin(f + 1.0), sin(f + 0.0)),\n        0.0, 1.0);\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float circle_radii = abs(texture(iChannel0, vec2(iTime,0.0)).x) * 0.7;\n    const float ring_spread = 0.35;\n\tconst float circle_spread = 0.2;\n    \n    int intersections = 0;\n    float closest_dist = 999.9;\n    \n    const int num_rings = 4;\n    const int circles_per_ring = 16;\n    for (int j = 0; j < num_rings; j++) {\n        float theta = (float(j) / float(num_rings)) * PI * 2.0;\n        theta += iTime;\n        vec2 ring_center = uv + vec2(sin(theta), cos(theta)) * ring_spread;\n        \n        for (int i = 0; i < circles_per_ring; i++) {\n            float theta2 = (float(i) / float(circles_per_ring)) * PI * 2.0;\n\t        theta2 -= iTime * 0.2;\n            vec2 circle_pos = ring_center + vec2(sin(theta2), cos(theta2)) * circle_spread;\n            \n            float dist = length(circle_pos) - circle_radii;\n            closest_dist = min(abs(dist), closest_dist);\n            if (dist < 0.0) {\n\t\t\t\tintersections++;\n            }\n        }\n    }\n    \n    vec3 col = vec3(0.25);\n    if (intersections > 2) {\n\t    col = palette(float(intersections + 2));\n        col /= log(closest_dist * 120.0 + exp(0.8));\n    } else {\n        col /= log(closest_dist * 15.0 + exp(0.8));\n        col.z += (sin(closest_dist * 130.0) + 1.0)\n               * 0.07 / (closest_dist * 15.0 + 1.0);\n    }\n    col = clamp(col, 0.0, 1.0);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}