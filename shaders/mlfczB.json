{
    "Shader": {
        "info": {
            "date": "1691326580",
            "description": "Glass buoy",
            "flags": 0,
            "hasliked": 0,
            "id": "mlfczB",
            "likes": 3,
            "name": "golden glow",
            "published": 3,
            "tags": [
                "3d",
                "spheremarching"
            ],
            "usePreview": 0,
            "username": "kig",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "\n#define THRESHOLD 0.02\n#define MAX_DISTANCE 8.0\n\n#define RAY_STEPS 30\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat noise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n/*\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = ((p.xy+vec2(37.0,17.0)*p.z) + f.xy);\n\tvec2 rg = textureLod( iChannel0, (uv + 0.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n*/\n\nfloat map(in vec3 p, in float t)\n{\n\tvec3 q = p + 0.1*vec3(0.2, -2.0, 2.2)*-t;\n\tfloat f;\n    f = 0.500*noise( q ); q = q*2.0;\n    f += 0.295*noise( q ); q = q*2.0;\n    f += 0.205*noise( q ); q = q*2.0;\n    //f += 0.0625*noise( q ); q = q*2.0;\n    //f += 0.03125*noise( q ); q = q*2.0;\n    //f += 0.015625*noise( q );\n\treturn 0.5+0.5*f;\n}\n\n\n// camera rotation\nmat3 rotationXY( vec2 angle ) {\n\t// pitch\n\tfloat cp = cos( angle.x );\n\tfloat sp = sin( angle.x );\n\t// yaw\n\tfloat cy = cos( angle.y );\n\tfloat sy = sin( angle.y );\n\n\treturn mat3(\n\t\tcy     , 0.0, -sy,\n\t\tsy * sp,  cp,  cy * sp,\n\t\tsy * cp, -sp,  cy * cp\n\t);\n}\n\nfloat scene(vec3 p)\n{\n    mat3 mp = rotationXY(vec2(-0.15, 0.25*3.14159)) * rotationXY(vec2(3.14159*0.25-0.8, 0.0));\n    float c = length(max(abs(mp*p*mat3(1.2, 0.1, -0.2, 0.1, 0.7, -0.2, 0.1, 0.1, -0.9) - (-0.4)*-1.*vec3(0.5, .05, 1.15)) - vec3(1.35), 0.0)) - 0.05;\n    float b = min(length(p-vec3(-2.5, -0.8+0.2*sin(3.0*iTime), 0.5))-(1.2+0.*cos(iTime)), (map(p*0.2, iTime*1.1)*-.35+.9+1.0*p.y));\n    return min(c, b);\n}\n\nvec3 normal(vec3 p, float d)\n{\n    mat3 mp = rotationXY(vec2(-0.15, 0.25*3.14159)) * rotationXY(vec2(3.14159*0.25-0.8, 0.0));\n    float c = length(max(abs(mp*p*mat3(1.2, 0.1, -0.2, 0.1, 0.5, -0.2, 0.1, 0.1, -0.9) - (-0.4)*-1.*vec3(0.5, .05, 1.15)) - vec3(1.35), 0.0)) - 0.05;\n\tfloat e = 0.05;\n\tfloat dx = scene(vec3(e, 0.0, 0.0) + p) - d;\n\tfloat dy = scene(vec3(0.0, e, 0.0) + p) - d;\n\tfloat dz = scene(vec3(0.0, 0.0, e) + p) - d;\n    vec3 n = vec3(0.0);\n    if (c < 0.1) {\n        vec3 v = mp*p*mat3(1.2, 0.1, -0.2, 0.1, 0.5, -0.2, 0.1, 0.1, -0.9);\n        if ((int(fract(v.z*v.x*1.0) > 0.5) ^ int(fract(v.y*2.) > 0.5)) == 0) {\n           p *= 4.0;\n           n = 0.002*vec3(noise(p), noise(p + vec3(1.0, 0.0, 0.0)), noise(p + vec3(0.0, 1.0, 0.0)));\n        }\n    }\n\treturn normalize(vec3(dx, dy, dz) + n);\n}\n\nvec3 shadeBg(vec3 nml, vec2 fragCoord, int bounces)\n{\n\tvec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n\tvec2 uv = (2.0 * fragCoord.xy / iResolution.xy - 1.0) * aspect;\n\tvec3 bgLight = normalize(vec3(\n\t\t0.0, // cos(iTime*0.2/0.954929658551372)*4.0, \n\t\t0.0, // sin(iTime/1.1936620731892151)*3.0 - 4.0, \n\t\t-1.0 // sin(iTime*0.2/0.954929658551372)*8.0\n\t));\n\tvec3 sun = vec3(2.0, 1.8, 0.85);\n\tfloat bgDiff = dot(nml, vec3(0.0, -1.0, 0.0));\n\tfloat sunPow = dot(nml, bgLight);\n\tfloat sp = max(sunPow, 0.0);\n\tvec3 bgCol = max(0.0, bgDiff)*2.0*vec3(0.6, 0.7, 0.70);\n\tbgCol += max(0.0, -bgDiff)*vec3(0.4, 0.55, 0.37);\n\tbgCol += vec3(0.7, 0.5, 0.27)*((0.5*pow(1.0-abs(bgDiff), 5.0)*(5.0-dot(uv,uv))));\n\tbgCol += sun*(0.5*pow( sp, 4.0)+pow( sp, 256.0));\n\tbgCol += vec3(0.5, 0.2, 0.15)*(pow( sp, 32.0) + pow( sp, abs(bgLight.y)*128.0));\n    bgCol += vec3(1.3,1.1,0.9) * ((1.0-pow(abs(bgDiff), 0.6)) * 1.0); // * map(-nml) * map(-nml*nml.y));\n    float f = 0.0; //sin(iTime+atan(nml.y, nml.x) * 20.0)*sin(-iTime+atan(nml.z*nml.y, nml.x) * 20.0) > 0.0 ? 1.0 : 0.0;\n    if (bounces > 0) {\n      bgCol *= max(0.62, f+pow(0.95*sin(0.5*iTime+45.0*dot(nml, vec3(-0.3, 0.0, 1.0))*max(0.0, bgDiff)), 4.0));\n    } else {\n      bgCol *= 0.72;\n    }\n    bgCol *= (1.0+(nml.y))*0.6+0.5*map(4.0*nml.yzy*(bgDiff), iTime * 1.1)*(1.0-max(0.0, bgDiff));\n\treturn pow(max(vec3(0.0), bgCol), vec3(1.9));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n\tif (iResolution.x < iResolution.y) {\n\t\taspect = vec2(1.0, iResolution.y / iResolution.x);\n\t}\n\tvec2 uv = (2.0 * fragCoord.xy / iResolution.xy - 1.0) * aspect;\n\tvec3 d = normalize(vec3(uv, 1.0));\n\tvec3 p = vec3(uv*-2.0, -6.5) + d*3.6;\n    vec3 o = vec3(1.0);\n    int bounces = 0;\n    for (int i=0; i<RAY_STEPS; i++) {\n        float dist = scene(p);\n        if (dist < THRESHOLD) {\n            bounces++;\n            vec3 nml = normal(p, dist);\n            mat3 mp = rotationXY(vec2(-0.15, 0.25*3.14159)) * rotationXY(vec2(3.14159*0.25-0.8, 0.0));\n            float c = length(max(abs(mp*p*mat3(1.2, 0.1, -0.2, 0.1, 0.5, -0.2, 0.1, 0.1, -0.9) - (-0.4)*-1.*vec3(0.5, .05, 1.15)) - vec3(1.35), 0.0)) - 0.1;\n            if (c < 0.1) {\n                vec3 v = mp*p*mat3(1.2, 0.1, -0.2, 0.1, 0.5, -0.2, 0.1, 0.1, -0.9);\n                if ((int(fract(v.z*v.x*1.0) > 0.5) ^ int(fract(v.y*2.) > 0.5)) == 0) {\n                  o *= vec3(0.3);\n                }\n            }\n            d = reflect(d, nml);\n            p += (23.0*THRESHOLD) * d;\n        }\n        if (dist > MAX_DISTANCE) {\n            break; \n        }\n        p += dist * d;\n    }\n\tfragColor = vec4( 1.0 - exp(-1.0 * o * shadeBg(-d, fragCoord, bounces)), 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}