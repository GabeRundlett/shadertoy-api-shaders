{
    "Shader": {
        "info": {
            "date": "1549034202",
            "description": "Non physical thin-film iridescence.\n(No spectral interference computation).",
            "flags": 0,
            "hasliked": 0,
            "id": "3s2GDw",
            "likes": 25,
            "name": "Thin-film iridescence (dotNV)",
            "published": 3,
            "tags": [
                "raymarch",
                "iridescence",
                "thinfilm"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 1598
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nNon physical thin-film iridescence.\n(No spectral interference computation).\n\n\nMain inspiration for this shader:\nhttps://twitter.com/minionsart/status/932660640178737163\nhttps://sdm.scad.edu/faculty/mkesson/vsfx419/wip/best/winter11/megan_stifter/iridescence.html\n\n\nGeometries are generated with sphere-tracing algorithms:\nhttp://www.michaelwalczyk.com/blog/2017/5/25/ray-marching\nhttps://iquilezles.org/articles/distfunctions\nhttp://mercury.sexy/hg_sdf/\n\nThin-film iridescence is faked here with the usage of the dot product\nbetween normal and the ray direction vector (eye).\nNoise is added via a triplanar method, and mapped to a gradient.\nFinally I bump mapped (via triplanar) to add a nice touch to the shader.\n\nMore about generation of the gradient:\nhttps://iquilezles.org/articles/palettes\n\nMore about noise:\nhttps://thebookofshaders.com/11/\n\nMore about triplanar mapping:\nhttps://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/\n\nMore about bump mapping via heighmap or texture:\nhttps://squircleart.github.io/shading/normal-map-generation.html\nhttps://www.shadertoy.com/view/4ss3W7\n\n\nIf you want to do a more physically based iridescence, checkout these refs:\nhttps://en.wikipedia.org/wiki/Thin-film_interference\nhttps://www.alanzucconi.com/2017/07/15/cd-rom-shader-1/\nhttp://www.will-cavanagh.com/?portfolio=physically-based-thin-film-interference\nhttps://www.gamedev.net/articles/programming/graphics/thin-film-interference-for-computer-graphics-r2962/\n\n\nSome notation:\np: position (usually in world space)\nn: normal\nrd: ray direction (eye or view vector)\nld: light direction\n\n*/\n\n#define SPHERE_ID 0\n#define CUBE_ID 1\n#define OCTAHEDRON_ID 2\n// more complex geometries\n#define STAR_ID 3 \n#define SHAPE_ID 4\n\n#define PI 3.14159\n#define TAU 6.28318\n\n/** Parameters **/\nconst int ANTIALIAS = 2; // put this to 1 if it's too slow\n\nconst int geometry_id = SPHERE_ID; // change the geometry here\nconst bool show_allshape = true;\nconst float speed_showshape = .03;\n\nconst float fre_exponent = 5.;\nconst float spe_exponent = 32.;\nconst float noise_scale = 120.;\n\nconst float iri_factor = .7;\nconst float spe_factor = .4;\nconst float dif_factor = .1;\nconst float cub_factor = .09;\nconst float fre_factor = .7;\nconst float noise_factor = .3;\n\nconst float bump_factor = .008;\nconst float blend_exponent = 32.;\n\nconst float gamma = 2.2;\n\n\n\n/** Libs **/\nvec3 pal(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n\treturn a + b * cos(TAU * (c * t + d));\n}\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nvoid amod(inout vec2 p, float c) {\n\tfloat m = TAU / c;\n\tfloat a = mod(atan(p.y, p.x) - m * .5, m) - m * .5;\n\tp = vec2(cos(a), sin(a)) * length(p);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k) {\n\tfloat h = clamp(.5 + .5*(b - a) / k, 0., 1.);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}\n\n// http://mercury.sexy/hg_sdf/\nfloat stmin(float a, float b, float k, float n) {\n\tfloat st = k / n;\n\tfloat u = b - k;\n\treturn min(min(a, b), .5 * (u + a + abs(mod(u - a + st, 2. * st) - st)));\n}\n\nfloat box(vec3 p, vec3 b) {\n\tb = abs(p) - b;\n\treturn min(max(b.x, max(b.y, b.z)), 0.) + length(max(b, 0.));\n}\n\nfloat sphere(vec3 p, float d) {\n\treturn length(p) - d;\n}\n\nfloat octahedron(vec3 p, float d) {\n\treturn dot(p, normalize(sign(p))) - d;\n}\n\nfloat length8(vec2 p) {\n\tp = pow(p, vec2(8.));\n\treturn pow(p.x + p.y, 1. / 8.);\n}\n\nfloat torus82(vec3 p, vec2 t) {\n\tvec2 q = vec2(length(p.xz) - t.x, p.y);\n\treturn length8(q) - t.y;\n}\n\nfloat cone(vec3 p, vec2 c) {\n\t// c must be normalized\n\tfloat q = length(p.xy);\n\treturn dot(c, vec2(q, p.z));\n}\n\nfloat star(vec3 p) {\n\tfloat d = torus82(p.yzx, vec2(1., .1));\n\tamod(p.xy, 8.);\n\td = smin(d, box(p, vec3(1.3, .1, .1)), .1);\n\tp.x -= 1.7;\n\tp.xy *= r2d(-PI * .5);\n\treturn smin(d, max(cone(p.zxy, normalize(vec2(.4, .2))), -p.y - .4), .1);\n}\n\n// courtesy of flopine\nfloat flopine_shape(vec3 p) {\n\tp.y -= .3;\n\tfloat s = sphere(p, .8);\n\tp.y += 1.;\n\tfloat b = box(p, vec3(1, .25, 1));\n\tfloat o = octahedron(p, .7);\n\treturn stmin(stmin(b, o, .3, 3.), s, .5, 2.);\n}\n\n// Signed distance field\nfloat de(vec3 p) {\n    \n    if(show_allshape) {\n        float t = fract(iTime * speed_showshape);\n        if (t < .2)\n            return sphere(p, 1.);\n        if (t >= .2 && t < .4)\n            return box(p, vec3(.7));\n        if (t >= .4 && t < .6)\n            return octahedron(p, .7);\n        if (t >= .6 && t < .8)\n            return star(p);\n        if (t >= .8 && t < 1.)\n            return flopine_shape(p);\n    } else {\n        if (geometry_id == SPHERE_ID)\n            return sphere(p, 1.);\n        if (geometry_id == CUBE_ID)\n            return box(p, vec3(.7));\n        if (geometry_id == OCTAHEDRON_ID)\n            return octahedron(p, .7);\n        if (geometry_id == STAR_ID)\n            return star(p);\n        if (geometry_id == SHAPE_ID)\n            return flopine_shape(p);\n    }\n    \n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(.0005, 0.);\n\treturn normalize(vec3(\n\t\tde(p + e.xyy) - de(p - e.xyy),\n\t\tde(p + e.yxy) - de(p - e.yxy),\n\t\tde(p + e.yyx) - de(p - e.yyx)\n\t));\n}\n\n// Grad noise https://www.shadertoy.com/view/XdXGW8\nvec2 hash(vec2 uv) {\n\tconst vec2 k = vec2(.3183099, .3678794);\n\tuv = uv * k + k.yx;\n\treturn -1. + 2. * fract(16. * k * fract(uv.x * uv.y *(uv.x + uv.y)));\n}\n\nfloat noise2D(vec2 p) {\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\n\tvec2 u = f * f*(3.0 - 2.0*f);\n\n\treturn mix(mix(dot(hash(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),\n\t\tdot(hash(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n\t\tmix(dot(hash(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),\n\t\t\tdot(hash(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// Triplanar noise\nfloat noise3D(vec3 p, vec3 n) {\n\tvec3 weight = pow(abs(n), vec3(blend_exponent));\n\tweight /= (weight.x + weight.y + weight.z);\n\n\treturn\n\t\tnoise2D(p.yz) * weight.x +\n\t\tnoise2D(p.yz) * weight.y +\n\t\tnoise2D(p.yz) * weight.z;\n}\n\nvec3 tex2D(vec2 uv) {\n\tvec3 col = texture(iChannel1, uv).rgb;\n\treturn pow(col, vec3(gamma));\n}\n\nvec3 cubemap(vec3 rd) {\n\tvec3 col = texture(iChannel0, rd).rgb;\n\treturn pow(col, vec3(gamma));\n}\n\n// Tri-planar bump-mapping\n// From shane: https://www.shadertoy.com/view/MlXSWX\n// Tri-Planar blending function. Based on an old Nvidia tutorial\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D(vec3 p, vec3 n) {\n\tvec3 weight = pow(abs(n), vec3(blend_exponent));\n\t//vec3 weight = max((abs(n) - .2) * 7., .001); // shane's factors\n\tweight /= (weight.x + weight.y + weight.z);\n\n\treturn\n\t\ttex2D(p.yz) * weight.x +\n\t\ttex2D(p.zx) * weight.y +\n\t\ttex2D(p.xy) * weight.z;\n}\n\n#define luma(c) (c.r * .299 + c.g * .587 + c.b * .114)\n\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total.\n// convert texture to greyscale, then compute difference to get edge\nvec3 do_bumpmap(vec3 p, vec3 n, float bumpfactor) {\n\tconst float eps = .001;\n\tfloat ref = luma(tex3D(p, n));\n\tvec3 grad = vec3(\n        luma(tex3D(vec3(p.x - eps, p.y, p.z), n)) - ref,\n\t\tluma(tex3D(vec3(p.x, p.y - eps, p.z), n)) - ref,\n\t\tluma(tex3D(vec3(p.x, p.y, p.z - eps), n)) - ref) / eps;\n\n\tgrad -= n * dot(n, grad);\n\treturn normalize(n + grad * bumpfactor);\n}\n\nvec3 camera(vec3 ro, vec2 uv, vec3 ta) {\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 right = normalize(cross(fwd, vec3(0, 1, 0)));\n\tvec3 up = normalize(cross(right, fwd));\n\treturn normalize(fwd + uv.x*right + up * uv.y);\n}\n\nvec3 shading(vec3 p, vec3 rd, vec3 n) {\n\tn = do_bumpmap(p, n, bump_factor);\n\n\tvec3 ld = normalize(vec3(1, 1, -1));\n\tvec3 h = normalize(ld - rd); // half vector\n\n\tfloat dotNL = max(0., dot(n, ld));\n\tfloat dotNV = max(0., dot(n, -rd));\n\tfloat dotNH = max(0., dot(n, h));\n\n\tvec3 albedo = tex3D(p, n);\n\tvec3 cubemap = cubemap(reflect(rd, n));\n\tfloat noise = noise_factor * (noise3D(p * noise_scale, n) - .5);\n\n\tfloat fre = pow(1. - dotNV, fre_exponent);\n\tfloat spe = pow(dotNH, spe_exponent);\n\n\tvec3 iri = pal(dotNV + noise,\n\t\tvec3(.1),\n\t\tvec3(.3),\n\t\tvec3(.7),\n\t\tvec3(.3, .6, .1)\n\t);\n\n\tvec3 col = iri * iri_factor + spe * spe_factor + dotNL * dif_factor;\n\t//col *= luma(albedo) + .95;\n\tcol += cubemap * cub_factor;\n\tcol += fre * fre_factor;\n\n\treturn clamp(col, 0., 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec3 ray_ori = vec3(3. * cos(iTime * .5), cos(iTime) * 3., -3. * sin(iTime * .5));\n\tvec3 target = vec3(0);\n\tvec3 col = vec3(0);\n\n\t// Super sampling antialiasing\n\t// from iq\n\tfor (int j = 0; j < ANTIALIAS; j++) {\n\t\tfor (int i = 0; i < ANTIALIAS; i++) {\n\t\t\tvec2 off = vec2(float(i), float(j)) / float(ANTIALIAS);\n\n\t\t\tvec2 uv = (fragCoord.xy + off) / iResolution.xy - .5;\n\t\t\tuv.x *= iResolution.x / iResolution.y;\n\n\t\t\tvec3 ray_dir = camera(ray_ori, uv, target);\n\t\t\tvec3 pos;\n\n\t\t\tfloat tdist = 0.; // total distance from the ray origin to the point\n\t\t\tfloat tmax = 10.; // max distance\n\t\t\t\t\t\t\t  // Sphere-tracing\n\t\t\tfor (float i = 0.; i < 1.; i += .01) {// 100 iterations\n\t\t\t\tpos = ray_ori + ray_dir * tdist;\n\t\t\t\tfloat dist = de(pos); // signed distance field\n\t\t\t\tif (dist < .001 || tdist > tmax)\n\t\t\t\t\tbreak;\n\t\t\t\ttdist += dist;\n\t\t\t}\n\n\t\t\tif (tdist <= tmax) {\n\t\t\t\tvec3 nor = normal(pos);\n\t\t\t\tcol += shading(pos, ray_dir, nor);\n\t\t\t} else {\n\t\t\t\tcol += vec3(.9, .9, .94); // background\n\t\t\t}\n\t\t}\n\t}\n    \n\tcol /= float(ANTIALIAS * ANTIALIAS);\n\n\t// gamma\n\tcol = pow(col, vec3(1. / gamma));\n\n\t// vignetting (from iq)\n\tvec2 q = fragCoord / iResolution.xy;\n\tcol *= .5 + 0.5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), .25);\n\n\tfragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}