{
    "Shader": {
        "info": {
            "date": "1692652686",
            "description": "messy code",
            "flags": 32,
            "hasliked": 0,
            "id": "ctffzN",
            "likes": 38,
            "name": "3D Particle Sim",
            "published": 3,
            "tags": [
                "particles",
                "fun",
                "buffer"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 406
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 px )\n{\n    O = texelFetch(iChannel0, ivec2(px), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n#define res iResolution.xy\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define ballRadius .03\n\n\n// Hash from BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(vec2 a) {\n    int x = FK(a.x), y = FK(a.y);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\n// Capsule SDF from iq\nfloat seg( vec3 p, vec3 a, vec3 b, float r ) {\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat map0(vec3 p, float t) {\n    p.xy *= rot(.2*t);\n    float d1 = length(p.xz) - 1.3 + .3 * thc(4., .5*t);\n    float d = length(vec2(d1, p.y)) - .15 + .05 * thc(4., .25*t);\n    \n    return d;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec3 norm(vec3 p) {\n\tfloat d = map0(p, iTime);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map0(p-e.xyy, iTime),\n        map0(p-e.yxy, iTime),\n        map0(p-e.yyx, iTime));\n    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{\n    if (iFrame < 1) {\n        // Position\n        if (px.y == .5)     \n            O.xyz = 3. * vec3(hash(px), hash(px+.1), hash(px+.2));\n            \n        // Velocity\n        else if (px.y == 1.5)\n            O.xyz = vec3(0);\n    }\n    else {        \n        vec3 p = texelFetch(iChannel0, ivec2(px.x, .5), 0).xyz;\n        vec3 v = texelFetch(iChannel0, ivec2(px.x, 1.5), 0).xyz;\n        vec3 n = norm(p);\n        \n        if (px.y == .5) {\n            // Move ball\n            p += v;\n            \n            // Clamp to sphere\n            float l = length(p);\n            if (l > 5.)\n                p *= 5. / l;\n            \n            O.xyz = p;\n        } \n        else if (px.y == 1.5) {\n            // Push away from surface if touching\n            if (map0(p, iTime) - ballRadius < 0.)\n                v = .06 * n;      \n            else {\n                v -= .04 * n;\n                v.xy += .002 * vec2(-n.y, n.x);\n                v.yz += .002 * vec2(-n.z, n.y);\n                v *= .99;\n            }\n            O.xyz = v;\n        }\n        else if(px.y == 2.5) { \n            // Store previous position\n            O.xyz = p;\n        }\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define EPS .001\n\nvec3 ro;\nvec3 rd;\n\n#define numPoints 16\nvec3 points[numPoints];\nvec3 pointsPrev[numPoints];\n\nvoid setOri() {\n    vec2 m = iMouse.xy / res;\n    ro = vec3(0, 2.5, -4);\n   // ro.yz *= rot(-m.y*pi+1.);\n   // ro.xz *= rot(-m.x*2.*pi);\n}\n\nvoid setDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n         r = normalize(cross(vec3(0,1,0), f)),\n         u = cross(f,r),\n         c = f*z,\n         i = c + uv.x*r + uv.y*u;\n    rd = normalize(i);\n}\n\nvec2 map(vec3 p) {\n    float mat;\n    float d = map0(p, iTime);\n    \n    float d2 = 1e5;\n    for (int i = 0; i < numPoints; i++) \n        d2 = min(d2, seg(p, points[i], pointsPrev[i], ballRadius));\n    \n    d2 < d ? d = d2, mat = 1.\n           : d;\n           \n    return vec2(d, mat);\n}\n\nvec3 march(vec3 ro, vec3 rd, float z) {\t\n    float d = 0.;\n    float s = sign(z);\n    int steps = 0;\n    float mat = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        m.x *= .9 + .2 * hash(vec2(p.y, hash(p.xz)));\n        if (s != sign(m.x)) { z *= 0.5; s = sign(m.x); }\n        if (abs(m.x) < EPS || d > MAX_DIST) {\n            steps = i + 1;\n            mat = m.y;\n            break;\n        }\n        d += m.x * z; \n    }   \n    return vec3(min(d, MAX_DIST), steps, mat);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{\n    vec2 uv = (px - 0.5 * res) / res.y;\n\t\n    setOri();\n    setDir(uv, ro, vec3(0), 1.);\n    \n    vec3 col = vec3(0);\n\n    for (int i = 0; i < numPoints; i++) {\n        points[i] = texelFetch(iChannel0, ivec2(i, 0), 0).xyz;\n        pointsPrev[i] = texelFetch(iChannel0, ivec2(i, 2), 0).xyz;\n    }  \n    \n    vec3 m = march(ro, rd, 1.);  \n    float d = m.x;    \n    vec3 p = ro + rd * d;\n\n    if (d<MAX_DIST) {        \n        vec3 n = norm(p);\n        vec3 r = reflect(rd, n);        \n        float fres = pow(1. + dot(rd, n),  2.);     \n        col = vec3(m.z);\n    }\n    \n    col = max(col, vec3(1.-1./cosh(.05*m.y)));\n    col = sqrt(col);\n    \n    O = .94 * texelFetch(iChannel1, ivec2(px), 0);\n    O = max(O, vec4(col,1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}