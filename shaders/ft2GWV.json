{
    "Shader": {
        "info": {
            "date": "1624747675",
            "description": "It turned out not so good but I had a lot of fun, I will probably fix it up and make a pretty version later. \nhttps://livecode.demozoo.org/\nhttps://www.twitch.tv/psenough",
            "flags": 0,
            "hasliked": 0,
            "id": "ft2GWV",
            "likes": 6,
            "name": "Tater @ livecode Release Jam",
            "published": 3,
            "tags": [
                "raymarch",
                "jam",
                "livecode",
                "demozoo"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "#define STEPS 250.0\n#define MDIST 550.0\n#define pi 3.1415926\n\n#define pmod(p,x) (mod(p,x) - (x)*0.5)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat smin(float a, float b, float k){\n  float h = max(0.0,k-abs(a-b));\n  return min(a,b)-h*h*0.25/k;\n}\nfloat anim(){\n  return sin(iTime); \n}\nfloat rand(vec2 a){\n  return fract(sin(dot(a,vec2(43.234,21.4343)))*94544.3434343)-0.5;\n}\nfloat ssRemap(float t, float s1, float s2, float c){\n  return 0.5*(s2-s1)*(t-asin(cos(t*pi)/sqrt(c*c+1.0))/pi)*s1*t;\n}\nfloat wave(vec3 p, float t){\n  float dist = length(p.xz)-fract(t+0.5)*50.0;\n  dist = min(dist,0.0);\n  float wave = sin(dist)*exp(-abs(length(dist*0.2)));\n  wave*=max(0.,1.0-fract(t-0.5)*2.0);\n  return wave;\n}\nfloat ball(vec3 p, float t){\n  float mag = 80.0;\n  p.y += (fract(t)-0.5)*mag;\n  float a = length(p)-3.0;\n  return a;\n}\n\nvec2 map(vec3 p){\n  vec3 po = p;\n  \n  float t= mod(iTime,300.0)*0.6;\n  vec2 a = vec2(1);\n  vec2 b = vec2(2);\n  \n  //Bending\n  p.y = pmod(p.y,60.0);\n  \n  float th = atan(p.x,p.z)/(2.0*pi)+0.5;\n  th*=300.0;\n  float r = length(p.xz)-60.0;\n  p.x = r;\n  //p.z = th;\n  p.xy*=rot(sin(t));\n  //p.xy*=rot(p.z*0.01*sin(t));\n  p.xy = abs(p.xy)-5.0;\n  p.xy*=rot(-pi/4.0);\n  p.y=mix(p.y,ssRemap(p.y,0.01,0.4,0.3),0.5+0.5*anim());\n  \n  vec3 po2 = p;\n  float count = 6.0;\n  float wav =0.0;\n  for(float i =0.0; i < count; i++){\n    p = po2;\n    t+=1.0/count;\n    float mag = 10.0;\n    p.x+=rand(vec2(floor(t),i))*mag;\n    p.z+=(rand(vec2(floor(t),i*1.5)))*mag*30.0;\n    a.x = smin(a.x,ball(p,t),0.5);\n    wav +=wave(p,t)*1.5;\n  }\n  p = po2;\n  t = mod(iTime,300.0)*4.0;\n  wav+=sin(p.z+t)*0.1+sin(p.x+t)*0.1;\n  wav+=sin(p.z*0.5-t)*0.2+sin(p.x*0.5-t)*0.2;\n  \n  //a.x = ball(p,t);\n  b.x = p.y-wav;\n  \n  \n  a=(a.x<b.x)?a:b;\n  \n  return a;\n}\n\nvec3 norm(vec3 p){\n  vec2 e = vec2(0.01,0);\n  return normalize(map(p).x-vec3(\n  map(p-e.xyy).x,\n  map(p-e.yxy).x,\n  map(p-e.yyx).x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\t\n  float t= mod(iTime,300.0);\n  vec3 col = vec3(0.1);\n  vec3 ro = vec3(0,70,-150);\n  \n  float drop = 0.0;\n  drop = 0.0;\n  ro.y-=drop;\n  \n  //ro.z*=sin(t);\n  //ro.y += sin(t)*20.0;\n  ro.xz*=rot(t*0.3);\n  vec3 lk = vec3(0,0,0);\n  \n  lk.y-=drop;\n  vec3 f = normalize(lk-ro);\n  vec3 r = normalize(cross(vec3(0,1,0),f));\n  vec3 rd = f*1.0+uv.x*r+uv.y*cross(f,r);\n  \n  vec3 p = ro;\n  float dO, shad;\n  vec2 d;\n  \n  for(float i = 0.0; i<STEPS; i++){\n    p = ro+rd*dO;\n    d = map(p);\n    dO+=d.x*0.9;\n    \n    if(abs(d).x<0.01){\n      shad = i/STEPS;\n      break;\n    }\n    if(dO>MDIST){\n      dO = MDIST;\n      p = ro+rd*dO;\n      d.y=0.0;\n      break;\n    }\n  }\n  shad = 1.0-shad;\n  vec3 n = norm(p);\n  vec3 ld = normalize(vec3(1,1,0));\n  vec3 h = normalize(ld - rd);\n  float spec = pow(max(dot(n,h),0.0),20.0);\n  \n  vec3 al = vec3(0);\n  if(d.y==1.0) al = vec3(0,0.8,0.2);\n  if(d.y==2.0) al = vec3(0,0,0.9)*1.5;\n  p.y-=5.0;\n  vec3 back = mix(vec3(0.1,0.1,0.5),vec3(0.0,0.4,0.6),clamp(p.y*0.05,0.0,1.0))*0.9;\n  //back = vec3(0);\n  \n  col = shad*al;\n  col+=spec*0.5;\n  \n  col = mix(col,back*2.0,(dO/MDIST));\n\n  fragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}