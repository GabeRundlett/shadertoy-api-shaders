{
    "Shader": {
        "info": {
            "date": "1481052802",
            "description": "Takes video and generates a log-scaled density plot for the intensity of each column of pixels  in the image, RGB and Luma overlaid.\nThis demonstrates quite well the problem of picking a green-screen from a video source.",
            "flags": 2,
            "hasliked": 0,
            "id": "XtcSRs",
            "likes": 103,
            "name": "Video Intensity Scope",
            "published": 3,
            "tags": [
                "video",
                "imageprocessing",
                "scope",
                "intensity"
            ],
            "usePreview": 1,
            "username": "robingreen",
            "viewed": 11423
        },
        "renderpass": [
            {
                "code": "// Robin Green, Dec 2016\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n       \n    // calculate the intensity bucket for this pixel based on column height (padded at the top)\n    const float max_value = 270.0;\n    const float buckets = 512.0;\n    float bucket_min = log( max_value * floor(uv.y * buckets) / buckets );\n    float bucket_max = log( max_value * floor((uv.y * buckets) + 1.0) / buckets );\n    \n    // count the count the r,g,b and luma in this column that match the bucket\n    vec4 count = vec4(0.0, 0.0, 0.0, 0.0);\n    for( int i=0; i < 512; ++i ) {\n        float j = float(i) / buckets;\n        vec4 pixel = texture(iChannel1, vec2(uv.x, j )) * 256.0;\n        \n        // calculate the Rec.709 luma for this pixel\n        pixel.a = pixel.r * 0.2126 + pixel.g * 0.7152 + pixel.b * 0.0722;\n\n        vec4 logpixel = log(pixel);\n        if( logpixel.r >= bucket_min && logpixel.r < bucket_max) count.r += 1.0;\n        if( logpixel.g >= bucket_min && logpixel.g < bucket_max) count.g += 1.0;\n        if( logpixel.b >= bucket_min && logpixel.b < bucket_max) count.b += 1.0;\n        if( logpixel.a >= bucket_min && logpixel.a < bucket_max) count.a += 1.0;\n    }\n    \n    // sum luma into RGB, tweak log intensity for readability\n    const float gain = 0.3;\n    const float blend = 0.6;\n    count.rgb = log( mix(count.rgb, count.aaa, blend) ) * gain;\n          \n    // output\n    fragColor = count;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}