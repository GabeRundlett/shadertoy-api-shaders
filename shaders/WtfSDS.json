{
    "Shader": {
        "info": {
            "date": "1564008042",
            "description": " Trying to make some sort of cell like noise using value noise-- by exploiting the 4 texture channels available to get 4 value noises and convert to something vaguely cell-like\n\nleft: single sample\nright: 4 octaves fbm(uses prior sample to simulate flow)",
            "flags": 0,
            "hasliked": 0,
            "id": "WtfSDS",
            "likes": 15,
            "name": "VNoise Cell/Flow",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "flow",
                "cellular"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 687
        },
        "renderpass": [
            {
                "code": "//use fade curve? Makes it rounder but I don't like the look as much for fbm\n//#define SMOOTH_CELL\n\n//Offset position by prior octave to get some flow\n#define FLOW_STRENGTH 2.0\n\n//Use fast approx pow(x,.25) instead of real thing? \n//Objective was a fast cell noise, so want to avoid pow\n#define FAST_POW_QUARTER \n\nfloat VNoiseCell( in vec2 p )\n{\n#ifndef SMOOTH_CELL\n    vec2 uv = p;\n#else\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    vec2 uv = i + u+.5;\n#endif\n    \n    //Fetch 4 value noises--\n    vec4 r = texture(iChannel0, uv*(1.0/256.0)).rgba*2.0-1.0;\n    \n    //make some crappy cells(using geometric average)\n    float t = abs(r.a*r.b*r.g*r.r);\n#ifdef FAST_POW_QUARTER\n    float geo_avg = intBitsToFloat(798731503 + (floatBitsToInt(t)>>2)); \n#else\n    float geo_avg = pow(t,.25);\n#endif\n    return geo_avg*2.0 -1.0;\n}\n\n// -----------------------------------------------\n//Render code taken from IQ value noise https://www.shadertoy.com/view/lsf3WH\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\t\n\tfloat f = 0.0;\n\n    float split = .4;\n    // left: value noise\t\n\tif( p.x<split )\n\t{\n\t\tf = VNoiseCell( 8.0*uv );\n\t}\n    // right: fbm - fractal noise (4 octaves)\n    else\t\n\t{\n\t\tuv *= (6.0 + sin(iTime*.25+9.0)*4.0);\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n        float flow = sin(iTime*0.1+5.0)*1.0 + FLOW_STRENGTH;\n        #if 0\n\t\tf  = 0.5000*VNoiseCell( uv ); uv = m*uv;\n\t\tf += 0.2500*VNoiseCell( uv +f*flow); uv = m*uv;\n\t\tf += 0.1250*VNoiseCell( uv +f*flow); uv = m*uv;\n\t\tf += 0.0625*VNoiseCell( uv +f*flow); uv = m*uv;\n        #else\n        \n       \tfloat f1  = VNoiseCell( uv ); uv = m*uv;\n\t\tfloat f2 = VNoiseCell( uv +f1*flow); uv = m*uv;\n\t\tfloat f3= VNoiseCell( uv +f2*flow); uv = m*uv;\n\t\tfloat f4 = VNoiseCell( uv +f3*flow); uv = m*uv;\n        \n        f = f1 *.5 + f2*.25 + f3*.125 + f4*0.0625;\n        #endif\n        \n\t}\n\n\tf = 0.5 + 0.5*f;\n\t\n    f *= smoothstep( 0.0, 0.005, abs(p.x-split) );\t\n\t\n\tfragColor = vec4( f, f, f, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}