{
    "Shader": {
        "info": {
            "date": "1724317812",
            "description": "fiddling around with physics",
            "flags": 32,
            "hasliked": 0,
            "id": "lfsfWS",
            "likes": 3,
            "name": "ball simulation",
            "published": 3,
            "tags": [
                "simulation",
                "balls"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 o = fragCoord.xy / iResolution.xy;\n    vec4 o2 = texture(iChannel0, o);\n    fragColor = o2;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define n_tau 6.2831\n\n\nvec2 frand(vec2 o) {\n    vec2 od1 = vec2(o.x * 23.14077926, o.y * 232.61690225);\n    vec2 od2 = vec2(o.x * 54.47856553, o.y * 345.84153136);\n    vec2 o2 = vec2(o);\n    o2.x = fract(sin(od1.x) * 136.8168);\n    o2.y = fract(sin(od2.y) * 534.7645);\n    return o2;\n}\n\nvec2 f_o_rnd(vec2 o) {\n    return fract(sin(vec2(o.x * 12.19898, o.y * 78.21233)) * 321758.49153);\n}\n\nvec2 fhash22(vec2 p) {\n    vec3 p3 = fract(vec3(p.x, p.y, p.x) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 texelCoord = ivec2(fragCoord.xy);\n\n    vec2 o_scl = iResolution.xy;\n    float n_scl_min = min(o_scl.x, o_scl.y);\n    float naa = 1.0 / n_scl_min;\n    vec2 o_trn_nor = (fragCoord - o_scl * 0.5) / n_scl_min;\n    vec2 o_trn_nor_mou = (iMouse.xy - o_scl * 0.5) / n_scl_min;\n    vec4 o_trn_nor_mou_last = texelFetch(iChannel0, ivec2(0), 0);\n    float n_x_to_y = iResolution.x / iResolution.y;\n    if (iFrame == 0) {\n        vec2 o_rnd1 = fhash22(fragCoord);\n        vec4 op = vec4(\n            o_rnd1 - 0.5, // translation random\n            fhash22(o_rnd1) // .z = radius\n            // .w unused\n        );\n        if (int(fragCoord.x) % 2 == 0) {\n            op = vec4(\n                0.000, 0.00001, // velocity\n                0.000, -0.00001 // acceleration\n            );\n        }\n        fragColor = op;\n        return;\n    }\n    // data structure of first row of bufferA \n    // [\n    //   vec4(mouse pos .xy, mouse pos delta .xy )\n    //   vec4(unused)\n    //   vec4(point1 pos .xy, point1 radius, unused)\n    //   vec4(point1 velocity .xy, point1 accelleration .xy)\n    //   ...\n    //   vec4(pointN...)\n    // ]\n\n    vec2 o_dir_mouse = o_trn_nor_mou_last.zw;\n    float n_speed_mouse = length(o_dir_mouse);\n    float n_rad_mouse = 0.1;\n    float n_rad_point_max = 0.03;\n    float n_rad_point_min = 0.03;\n\n    if (int(fragCoord.x) == 0 && int(fragCoord.y) == 0) {\n        vec4 op = vec4(\n            o_trn_nor_mou.xy, // translation\n            o_trn_nor_mou_last.xy - o_trn_nor_mou.xy // delta (direction vector and len(...) is speed\n        );\n        fragColor = op;\n        return;\n    }\n    vec4 o_pos = texelFetch(iChannel0, texelCoord, 0);\n    vec4 o_vel_acc = texelFetch(iChannel0, texelCoord + ivec2(1, 0), 0);\n    \n    if (fragCoord.y <= 1.0 && int(fragCoord.x) % 2 == 0) {\n        o_vel_acc = o_pos;\n        o_pos = texelFetch(iChannel0, texelCoord - ivec2(1, 0), 0);\n    }\n    \n    if (fragCoord.y <= 1.0) {\n\n       // apply accelleration to velocity\n        o_vel_acc.xy += o_vel_acc.zw;\n        \n        // check if point has collision \n        // if so make accelleration smaller and change direction\n        float nrad = o_pos.z * n_rad_point_max + n_rad_point_min;\n        vec2 o_ball_pos_nor = o_pos.xy + 0.5;\n        if (o_ball_pos_nor.y - nrad <= 0.0 || o_ball_pos_nor.y + nrad >= 1.0) {\n            o_vel_acc.y *= -0.8;\n        }\n        if (o_ball_pos_nor.x - nrad <= 0.0 || o_ball_pos_nor.x + nrad >= 1.0) {\n            o_vel_acc.x *= -0.8;\n        }\n        \n        float ndist = max(abs(o_ball_pos_nor.x), abs(o_ball_pos_nor.y));\n        if (abs(ndist) > 1.01 || ndist < -0.01) {\n            o_vel_acc.xy = vec2(0.0, 0.000);\n            o_pos.xy = vec2(0.0);\n        }\n        \n        \n        // update position\n        o_pos.xy += o_vel_acc.xy;\n\n        vec2 o_dir = o_pos.xy - o_trn_nor_mou.xy;\n        float nl = length(o_dir);\n        float nt = n_rad_mouse + nrad;\n        if (nl < nt) {\n            o_pos.xy = o_trn_nor_mou.xy + normalize(o_dir) * nt;\n            o_vel_acc.xy += n_speed_mouse * normalize(o_dir);\n        }\n        \n       if (fragCoord.y <= 1.0 && int(fragCoord.x) % 2 == 0) {\n           fragColor = o_vel_acc;\n           return;\n       }else{\n           fragColor = o_pos;\n           return;\n       }\n       \n\n        \n \n    }\n\n    float n_its = 100.0;\n    float n_it_nor_one = 1.0 / n_its;\n    float n_min = 1.0;\n    float n2 = 0.0;\n    for (float n_it_nor = n_it_nor_one; n_it_nor < 1.0; n_it_nor += n_it_nor_one) {\n        vec4 o_col = texelFetch(\n            iChannel0,\n            ivec2(n_it_nor * vec2(n_its, 0.0)),\n            0\n        );\n        \n        float nrad = o_col.z * n_rad_point_max + n_rad_point_min;\n        float no = length(o_trn_nor.xy - o_col.xy);\n        float n = 1.0 - smoothstep(nrad, nrad - naa * 4.0, no);\n\n        if (n < n_min) {\n            n_min = n;\n            n2 += smoothstep(nrad - 0.01, nrad - naa * 4.0 - 0.01, no);\n        }\n    }\n\n    float nm = length(o_trn_nor - o_trn_nor_mou.xy);\n    float nm2 = smoothstep(n_rad_mouse, n_rad_mouse - naa * 4.0, nm);\n    float nm3 = smoothstep(n_rad_mouse - 0.01, n_rad_mouse - 0.01 - naa * 4.0, nm);\n    vec3 obg = vec3(0.2);\n    vec3 o2 = vec3(n_min + nm2);\n    vec3 nobg = vec3(1.0 - n_min) + nm2;\n    vec4 o = vec4((1.0 - nobg) * obg + nm3 + n2, 1.0);\n\n    fragColor = o;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}