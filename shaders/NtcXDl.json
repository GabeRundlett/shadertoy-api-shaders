{
    "Shader": {
        "info": {
            "date": "1639954904",
            "description": "basic idea:\nhttps://www.shadertoy.com/view/NlcSDs",
            "flags": 0,
            "hasliked": 0,
            "id": "NtcXDl",
            "likes": 4,
            "name": "noise pattern thingy",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat h21 (vec2 p, float sc) {\n    p.x = mod(p.x, sc); p.y = mod(p.y, sc);\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat rand(vec2 ipos, vec2 fpos, float sc) {\n    // V2:\n    //float val = atan(fpos.y, fpos.x) + 8. * length(fpos - 0.5) + h21(ipos, sc) + iTime;\n    float val = length(fpos - 0.5) + h21(ipos, sc) + iTime;\n    \n    float v1 = h21(floor(val) + ipos,      sc);\n    float v2 = h21(floor(val) + ipos + 1., sc);\n    \n    float m = fract(val);\n    m = m * m * (3. - 2. * m);\n   \n    return mix(v1, v2, m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/ iResolution.y;\n    uv += 2. + 0.02 * iTime;\n    \n    float c = 30.;\n    float sc = 6.;\n    \n    vec2 ipos = floor(sc * uv) + 0.5;  \n    vec2 fpos = fract(sc * uv) - 0.;\n    \n    // Corner positions\n    vec2 lp  = ipos + vec2(1,0);\n    vec2 tp  = ipos + vec2(0,1);\n    vec2 tlp = ipos + vec2(1,1);  \n    vec2 idp = ipos + vec2(0,0);\n\n    // Generate values for each corner of uv\n    float sc2 = c * sc;\n    float l  = rand(lp,  fpos, sc2);\n    float t  = rand(tp,  fpos, sc2);\n    float tl = rand(tlp, fpos, sc2);\n    float id = rand(idp, fpos, sc2);\n\n    // Smooth fpos so boundaries meet smoothly\n    vec2 sfpos = fpos * fpos * (3. - 2. * fpos);\n    \n    // Box lerp between the corner values\n    float v = l  * sfpos.x      * (1.-sfpos.y)\n     \t    + t  * (1.-sfpos.x) * sfpos.y\n     \t    + tl * sfpos.x      * sfpos.y\n      \t    + id * (1.-sfpos.x) * (1.-sfpos.y);\n\n    fpos -= 0.5;\n    // mlength on its own works fine too\n    float d = mlength(fpos) + 0.8 * abs(fpos.x) + 0.5 * cos(10. * v + iTime);\n    float k = v; //+ cos(10. * d -iTime); // <- V2\n    float s = smoothstep(-k, k, d - 2. * v);\n    s = mix(2., 10., 0.5 + 0.5 * thc(4., 100. * v + iTime)) * s * s;\n\n    vec3 e = vec3(1);\n    vec3 col = s * pal(v, e, e, e, 0.25 * vec3(0.,0.33, 0.66));\n    col += 0.05;\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}