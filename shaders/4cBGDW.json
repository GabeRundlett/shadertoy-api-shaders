{
    "Shader": {
        "info": {
            "date": "1704209904",
            "description": "alternative approach to https://www.shadertoy.com/view/lfj3W1\ndoing projective vector tracing instead of ray marching\nMouse controls camera",
            "flags": 0,
            "hasliked": 0,
            "id": "4cBGDW",
            "likes": 13,
            "name": "wireframe dodecahedron 2",
            "published": 3,
            "tags": [
                "dodecahedron"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// alternative approach to https://www.shadertoy.com/view/lfj3W1\n// doing projective vector tracing instead of ray marching\n\n// simplified from \"Compound of Five Tetrahedra\" by mla. https://shadertoy.com/view/tsXyWs\nvec3 vertices[20] = vec3[](\n         vec3( 0  , 0  , 1  ), \n         vec3( .58, .33, .75), \n         vec3( 0  ,-.67, .75), \n         vec3(-.58, .33, .75),\n         vec3( .36, .87, .33),\n         vec3( .93,-.13, .33), \n         vec3( .58,-.75, .33), \n         vec3(-.58,-.75, .33), \n         vec3(-.93,-.13, .33), \n         vec3(-.36, .87, .33), \n         vec3( .58, .75,-.33),\n         vec3( .93, .13,-.33), \n         vec3( .36,-.87,-.33), \n         vec3(-.36,-.87,-.33), \n         vec3(-.93, .13,-.33),  \n         vec3(-.58, .75,-.33),  \n         vec3( 0  , .67,-.75),  \n         vec3( .58,-.33,-.75), \n         vec3(-.58,-.33,-.75), \n         vec3( 0  , 0  ,-1  ) \n      );\n/**                                                          // analytic vertices\n#define CS(a) cos( a - vec2(0,11) )\n#define vertices(i)  i< 1 ? vec3( 0,0,1 )                                        \\\n                   : i< 4 ? vec3( CS(  .524 - 2.1  *float(i- 1) ) * .661,  .75 ) \\\n                   : i<10 ? vec3( CS( 1.183 - 1.047*float(min(i- 4, 9-i)) ) *float((i- 4)/3<1?1:-1)*vec2(1, i%2<1?1:-1 ) *.943,  .333 ) \\\n                   : i<16 ? vec3( CS( 1.183 - 1.047*float(max(i-13,12-i)) ) *float((i-10)/3<1?1:-1)*vec2(1, i%2>0?1:-1 ) *.943, -.333 ) \\\n                   : i<19 ? vec3( CS( 1.57  - 2.1  *float(i-16) ) * .661, -.75 ) \\\n                   :        vec3( 0,0,-1 )\n/**/\n              // full faces, so each edge is drawn  twice\nint seg[] = int[] (  0, 2, 6, 5, 1  // 3 bottom\n                   , 0, 3, 8, 7, 2\n                   , 0, 1, 4, 9, 3\n                   , 2, 7,13,12, 6  // 6 crown\n                   , 8,14,18,13, 7\n                   , 6,12,17,11, 5                  \n                   , 3, 9,15,14, 8\n                   , 1, 5,11,10, 4 \n                   , 4,10,16,15, 9\n                   ,19,18,14,15,16  // 3 top\n                   ,19,17,12,13,18\n                   ,19,16,10,11,17\n  );\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    p -= a;\n    b -= a;\n    return length(p - b *  clamp(dot(p, b) / dot(b, b), 0., 1.) );\n}\n\n#define R      iResolution.xy\n#define rot(a) mat2(cos(a+vec4(0,33,11,0)))\n\nvec3 T(vec3 p) {\n    vec2 M = iMouse.xy;\n    if (length(M) > 10. )\n      M = ( 2.*M/R - 1. ) * 3.14,\n      p.yz *= rot( M.y),  // theta\n      p.zx *= rot(-M.x);  // phi\n\n    p.yz *= rot(iTime/8.);\n    p.zx *= rot(iTime/5.);\n    return p;\n}\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    U = ( 2.*U - R.xy ) / R.y;\n    O *= 0.;\n    vec3 _P,P,P0;\n    \n    for( int i; i <= seg.length(); i++ ) {\n        _P = P; P = T( vertices[seg[i%60]] ); \n        P /= P.z - 1.7;\n       if (i>0) O += .5* smoothstep(3./R.y,0., segment( U, _P.xy, (i%5>0 ? P : P0 ).xy ) );\n       if (i%5<1) P0 = P;  // ^ should be max(), but +.5 allow to verify that there are 2 edges\n    }\n\n/**                                               // debug\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n   for( int i; i< 20; i++ ) {                       \n         _P = P; P = T( vertices[i] ); Q=P;\n        P /= P.z - 1.7;\n        O += smoothstep(.1/abs(Q.z-1.7),0., length( U - P.xy) )*hue(float(i)/20.);\n        O += .5*smoothstep(.01,0., segment( U, _P.xy, P.xy ) + .02/(Q.z-1.7) );       \n    } \n/**/\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}