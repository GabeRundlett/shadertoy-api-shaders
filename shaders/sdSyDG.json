{
    "Shader": {
        "info": {
            "date": "1644000052",
            "description": "trying to reproduce https://twitter.com/lefredj/status/1480190630647287811",
            "flags": 32,
            "hasliked": 0,
            "id": "sdSyDG",
            "likes": 23,
            "name": "Architecture",
            "published": 3,
            "tags": [
                "simulation",
                "particles",
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{ \n    vec2 U = ( 2.*u - R ) / R.y;\n    O-=O;\n#if 1                                                   // 3D view\n    U.y ++;\n    U *= 25. * mat2(1,1.3,-1,1.3)/2.7 ; // = inverse(mat2(2,-2,1,1))\n#else                                                   // top view\n    U = 15.*U + 10.;\n#endif\n    for( float d = .125, z= .5; z < 7.; z+=d, U-=d ) if( T(U).w >= z ) // optional stacks\n      {\n        if ( min(U.x,U.y)> 0. && max(U.x,U.y) < 20. ) { // === draw terrain\n            O = hue( T(U).w/8. ); \n#if 0                                                   // look = plain + shadowed\n            if ( fract(z-.5) > 0. ) O *= .5;\n#else                                                   // look = block cells\n            vec2 A = .5+.5*smoothstep(0.,-60./R.y,abs(fract(U)*2.-1.)-1.); \n            O *= min(A.x,A.y);                          // cells borders\n#endif\n        }\n        if ( fract(z-.5) < .1 && floor(z) == floor(T(U).w) ) // ( if stacks )\n          for( int i=0; i<7; i++)                       // === draw partics\n            O -= smoothstep(45./R.y,0., length(U-T(vec2(i,20)).xy) - .2);\n      }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === manage particles and terrain ==========================\n//  terrain (20x20) : O.w  = height ( i.e. id of partic field )\n//  partics ( 7x1 ) : O.xy = P, O.zw = V  \n\n#define hash(p)  fract(sin((p)* vec2(12.9898, 78.233) -iDate.w) * 43758.5453)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);                                          // previous state\n // if ( iFrame%4 > 0 ) return;                        // to slow down\n    if (u.y==20.5 && u.x<7.) {                         // === particles\n       vec2 P = O.xy;                                  // prev location\n       O.xy = P + O.zw;                                // particle move\n       if ( T(O.xy).w != u.x || min(O.x,O.y)<0. || max(O.x,O.y)>20. ) // goes out of level:\n           O.xy -= .5*O.zw,\n           floor(P.x+O.z)-floor(P.x) == 0. ? O.w = - O.w : O.z = -O.z,// bounce\n           O.xy += .5*O.zw;\n         \n       if (iFrame < 1) {                               // init partics\n           vec2 D = sign(hash(u.x)-.5); \n           O = vec4(u.xx-.25*D.yx,.125*D);             // normal speed = .5*D\n       }\n    } \n    if( max(u.x,u.y) > 20.) return;                    // === terrain\n    for( float i=.5; i<7.; i++ ) {                     // if we are where partic gone out of field\n        vec4 P = T(vec2(i,20));\n        if ( O.w != i && floor(u) == floor(P.xy+P.zw) ) O.w = i; // then extend field\n    }   \n    if (iFrame < 1) u = abs(u-10.),                    // init terrain\n                    O.w = min(6.5, 10. - max(u.x,u.y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}