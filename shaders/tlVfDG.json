{
    "Shader": {
        "info": {
            "date": "1615001132",
            "description": "I got to this by controlling the parameters of the Apollonian.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlVfDG",
            "likes": 13,
            "name": "Apollonian control",
            "published": 3,
            "tags": [
                "fractal",
                "apollonian"
            ],
            "usePreview": 0,
            "username": "gaz",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "// 3D arbitrary axis rotation\n// https://www.shadertoy.com/view/wtVyWK\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n\n// hue by FabriceNeyret2\n#define hue(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvec3 trans(vec3 p)\n{\n    return R(p,normalize(vec3(1,1,2)),iTime*.1+.5);\n}\n\nfloat apollonian(inout vec3 p)\n{\n    // Control parameters\n    //*\n    float r=2.2;\n    float x=1.;\n    float y=2.;\n    float z=2.;\n    //*/\n    \n    // Other patterns(example)\n    /*\n    float r=12.5;\n    float x=5.2;\n    float y=7.1;\n    float z=2.5;\n    //*/\n       \n    // Fine-tune with some offsets\n    // All numbers are offsets.\n    // s=2. is a number that suppresses the progress of the ray.\n    // If you see artifacts, increase the number.\n    float e,s=2.;\n    for(int i=0;i<6;i++){\n        p=abs(p-vec3(x,y,z))-vec3(x-.2,y,z);\n        //p=abs(p-vec3(x,y,z)*.05)-vec3(x,y,z-.2);\n        //p=mod(p-vec3(x,y,z),vec3(x,y,z)*2.)-vec3(x,y,z);\n        e=(r+.1)/clamp(dot(p,p),.1,r);\n        s*=e;\n        p=abs(p)*e;\n    }\n    return min(length(p.xz),p.y)/s;\n    //return length(p)/s;\n}\n\nfloat apollonian_std(inout vec3 p)\n{\n    // Control parameters\n    float r=1.;\n    float x=1.;\n    float y=1.;\n    float z=1.;\n\n    float e,s=2.;\n    for(int i=0;i<8;i++){\n        p=abs(p-vec3(x,y,z))-vec3(x,y,z);\n        //p=mod(p-vec3(x,y,z),vec3(x,y,z)*2.)-vec3(x,y,z);\n        e=r/clamp(dot(p,p),.0,r);\n        s*=e;\n        p=abs(p)*e;\n    }\n    return min(length(p.xz),p.y)/s;\n    //return length(p)/s;\n}\n\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec3 p,r=iResolution,\n    rd=normalize(vec3((C-.5*r.xy)/r.y,1)),\n    ro=vec3(0,0,-1.8);\n    \n    for(float i=1.,g=0.,e;i<99.;i++)\n    {\n        p=g*rd+ro;\n        p=trans(p);\n        // Achieves transparency with non-collision SDF\n        g+=e=apollonian(p)+.001;\n        //g+=e=apollonian_std(p)+.001;\n        O.rgb+=mix(vec3(1),hue(length(p)),.6)*.0015/e/i;\n    }\n\n#if 1\n    // Y axis\n    for(float i=1.,g=0.,e;i<99.;i++){\n        p=g*rd+ro;\n        p=trans(p);\n        g+=e=length(p.xz)-.005;\n        e<.001?O.g+=.2/i:i;\n    }\n\n    // X grid\n    for(float i=1.,g=0.,e;i<99.;i++){\n        p=g*rd+ro;\n        p=trans(p);\n        p.xz=fract(p.xz-.5)-.5;\n        g+=e=length(p.yz)-.005;\n        e<.001?O.r+=.2/i:i;\n    }\n\n    // Z grid\n    for(float i=1.,g=0.,e;i<99.;i++){\n        p=g*rd+ro;\n        p=trans(p);\n        p.xz=fract(p.xz-.5)-.5;\n        g+=e=length(p.xy)-.005;\n        e<.001?O.b+=.3/i:i;\n    }\n\n    // Y axis point (pitch 1.0)\n    for(float i=1.,g=0.,e;i<99.;i++){\n        p=g*rd+ro;\n        p=trans(p);\n        p.y=fract(p.y-.5)-.5;\n        g+=e=length(p)-.015;\n        e<.001?O+=.3/i:O;\n    }\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}