{
    "Shader": {
        "info": {
            "date": "1574153688",
            "description": "The Camera position is rotated. ",
            "flags": 0,
            "hasliked": 0,
            "id": "tdGSWw",
            "likes": 2,
            "name": "Moving camera with spheres",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define EPSILON 1e-4\n#define INFTY 1e6\nconst float sphereSize = 0.15;\nconst float num = 3.0;\n\nfloat sphereSDF(vec3 camPos, vec3 sphPos) {\n    vec3 p =- camPos + sphPos;\n    return length(p) - sphereSize;\n}\nfloat getAngle(vec3 p, vec3 q) {\n    return acos(dot(normalize(p), normalize(q)));\n}\nfloat hitSphere(vec3 camPos, vec3 sphPos, vec3 ray) {\n    vec3 p = - camPos + sphPos;\n    return length(p) * sin(getAngle(p, ray)) - sphereSize;\n}\nvec3 getSpherePos(vec3 camPos, vec3 sphPos, vec3 ray) {\n    vec3 p = - camPos + sphPos;\n    float ang = getAngle(p, ray);\n    float d = length(p);\n    float theta = d*cos(ang) - sqrt(pow(d * cos(ang), 2.0) - pow(d, 2.0) + pow(sphereSize, 2.0));\n    return camPos + theta*ray;\n}\n\nvec3 getNormal(vec3 p, vec3 sphPos) {\n    float d = EPSILON;\n    return normalize(vec3(\n            sphereSDF(p + vec3(d, 0.0, 0.0), sphPos) - sphereSDF(p, sphPos),\n            sphereSDF(p + vec3(0.0, d, 0.0), sphPos) - sphereSDF(p, sphPos),\n            sphereSDF(p + vec3(0.0, 0.0, d), sphPos) - sphereSDF(p, sphPos)\n        ));\n}\nmat3 rotX(float theta) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, sin(theta), cos(theta),\n        0.0, - cos(theta), sin(theta)\n    );\n}\nmat3 rotY(float theta) {\n    return mat3(\n        sin(theta), 0.0, cos(theta),\n        0.0, 1.0, 0.0,\n        - cos(theta), 0.0, sin(theta)\n    );\n}\nmat3 rotZ(float theta) {\n    return mat3(\n        sin(theta), cos(theta), 0.0,\n        - cos(theta), sin(theta), 0.0,\n        0.0, 0.0, 1.0\n    );\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // pixel position\n    vec2 pixPos = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera\n    vec3 camPos = vec3(0.0, 0.0, 1.0);\n    vec3 camDir = vec3(0.0, - 0.0, - 1.0);\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    vec3 camSide = cross(camDir, camUp);\n    float targetDepth = 1.0;\n    float theta = iTime * 0.3;\n    camPos = rotY(theta) * rotX(theta) * rotZ(theta) * camPos;\n    camDir = rotY(theta) * rotZ(theta) * rotX(theta) * camDir;\n    camUp = rotY(theta) * rotZ(theta) * rotX(theta) * camUp;\n    // camSide = cross(camDir, camUp);\t// moderate deformation\n    float colMode = mod(theta * 2.0 / PI, 2.0); \n    // 0<colMode<1 if 0<theta<PI/2, 1<colMode<2 if PI/2<theta<PI, \n\n    //light\n    vec3 lightDir = vec3(0.0, 0.0, - 5.0);\n    lightDir = normalize(lightDir);\n\n    vec3 ray = normalize(camSide * pixPos.x + camUp * pixPos.y + camDir * targetDepth);\n    vec3 sphPos = vec3(INFTY);\n    bool hit = false;\n    for(float i = - num; i < num; i ++ ) {\n        for(float j = - num; j < num; j ++ ) {\n            for(float k = - num; k < num; k ++ ) {\n                if (hitSphere(camPos, vec3(i, j, k), ray) < EPSILON && distance(camPos, vec3(i, j, k)) > 0.2) {\n                    vec3 p = vec3(i, j, k);\n                    if (distance(p, camPos) < distance(sphPos, camPos)) {\n                        sphPos = p;\n                    }\n                    hit = true;\n                }\n            }\n        }\n    }\n    if (hit) {\n        vec3 rayPos = getSpherePos(camPos, sphPos, ray);\n        vec3 normal = getNormal(rayPos, sphPos);\n        float diff = clamp(dot(lightDir, - normal), 0.1, 1.0);\n        fragColor = mix(\n            vec4(0.0, 0.2667, 1.0, 1.0),\n            vec4(0.0, 1.0, 0.298, 1.0), \n            mod(colMode, 1.0) * diff\n            );       \n    }else {\n        fragColor = vec4(\n            vec3(step(1.0, colMode)), \n            1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}