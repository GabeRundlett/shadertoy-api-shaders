{
    "Shader": {
        "info": {
            "date": "1568536482",
            "description": "Was doing some experiments with fBm generated tunnels and I thought the formations looked pretty cool.\n\nHighly reminiscent of roots underwater.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdc3WN",
            "likes": 6,
            "name": "Breathing roots",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "fbm",
                "warping",
                "domain",
                "root",
                "structure"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   Breathing roots\n   Simplex noise by nikat: https://www.shadertoy.com/view/XsX3zB\n\n   Covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define M_PI 3.1415926535\n#define M_HPI 1.57079632675\n#define DRAW_DISTANCE 300.0\n// Rock formation can swing anywhere between 1.0 to 4.0\n#define ROCK_FORMATION (1.2 + (sin(iTime * 0.5 + M_PI) + 1.0) * 0.5)\n#define MARCH_SIZE 0.01\n//#define WOBBLY_SCENE\n//#define CAVE_SCENE\n\nfloat blueNoise (vec2 forPos)\n{\n\tfloat noiseVal = texture (iChannel0, forPos).r;\n    return noiseVal * 0.9 + 0.1;\n}\n\nfloat rand2(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat smooth2D(vec2 n)\n{\n\tconst vec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand2(b), rand2(b + d.yx), f.x), mix(rand2(b + d.xy), rand2(b + d.yy), f.x), f.y);\n}\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat simplex2d(vec2 p)\n{\n    return simplex3d (vec3 (p.xy, 1.0));\n}\n\nfloat fBm (in vec2 uv)\n{\n    float res = 0.0;\n\tres += abs (smooth2D(uv)) * 0.5;\n\tres += abs (smooth2D(uv * 2.0)) * 0.25;\n\tres += abs (smooth2D(uv * 4.0)) * 0.125;\n\tres += abs (smooth2D(uv * 8.0)) * 0.0625;\n\tres += abs (smooth2D(uv * 16.0)) * 0.03125;\n    return res;\n}\n\nfloat domainWarp (in vec3 pos)\n{\n    mat2 rotMat = mat2(0.82533561491, -0.56464247339, 0.56464247339, 0.82533561491);\n    float v1 = fBm(rotMat * pos.xz + pos.y);\n    pos.xz = rotMat * pos.xz + 4.0;\n    float v2 = fBm(vec2 (v1) + pos.xz - pos.y);\n    return v2 * ROCK_FORMATION;\n}\n\n#ifdef WOBBLY_SCENE\n    float scene (vec3 pos)\n    {\n        if ( pos.y < 1.0 || pos.y > 3.0 ) return 1.0;\n        vec3 diffVec = pos.xyz - vec3 (0.0, 2.0, pos.z);\n        if ( dot (diffVec, diffVec) < 1.0 ) return 0.0;\n\n        pos.xz *= 4.0;\n        pos.z *= 3.0;\n        pos.xz += sin(simplex3d (pos) + pos.y);\n        pos.y *= 0.001;\n\n        float joe1 = simplex3d (pos);\n        pos.xz = mat2(0.99500416527 , -0.09983341664, 0.09983341664, 0.99500416527) * pos.xz;\n        float joe2 = simplex3d (pos);\n\n        if ( max (joe1, joe2) > ROCK_FORMATION - 1.2 ) return 1.0;\n        else return 0.0;\n    }\n#elif defined CAVE_SCENE\n\n    float dots (vec2 uv, float inpTime)\n    {\n        vec2 uvF = fract(uv * 0.5) * 5.0 - 2.5;\n        vec2 uvI = floor(uv * 0.5);\n        float retVal = 0.0;\n        for (int i = 0; i != 3; i++)\n        {\n            float uniqueNum1 = rand2 (uvI + vec2(float(i)));\n            float uniqueNum2 = rand2 (uvI + vec2(float(i * 2)));\n            float flucStrength = abs (uniqueNum2) * sin(inpTime * uniqueNum1) * 2.0;\n            vec2 flucDir = vec2 (sin(inpTime * uniqueNum2), cos(inpTime * uniqueNum2));\n            vec2 disp = flucDir * flucStrength;\n            float rad = max (uniqueNum2, 0.3);\n            retVal += clamp (0.3/length(uvF - disp) * abs (rad), 0.0, 1.0);\n        }\n        if ( retVal > ROCK_FORMATION - 1.0 ) return 1.0;\n        return 0.0;\n    }\n\n    vec2 grad (vec2 uv)\n    {\n        float gradX = simplex2d(uv + vec2 (0.0001, 0.0)) - simplex2d(uv - vec2 (0.0001, 0.0));\n        float gradY = simplex2d(uv + vec2 (0.0, 0.0001)) - simplex2d(uv - vec2 (0.0, 0.0001));\n        return vec2 (gradX, gradY);\n    }\n\n    float scene(vec3 pos)\n    {\n        if ( pos.y < 1.0 || pos.y > 3.0 ) return 1.0;\n        vec3 diffVec = pos.xyz - vec3 (0.0, 2.0, pos.z);\n        if ( dot (diffVec, diffVec) < 1.0 ) return 0.0;\n\n        pos.xz *= 2.0;\n        pos.z *= 6.0;\n        \n        pos.x += sin(pos.z) * 0.5;\n        pos.z += sin(pos.x) * 0.5;\n\n        pos.xz += grad (pos.xz + vec2(pos.y)) * 100.0;\n\n        return dots(pos.xz, pos.y);\n    }\n\n#else\n    float scene (vec3 pos)\n    {\n        if ( pos.y < 1.0 || pos.y > 3.0 ) return 1.0;\n        vec3 diffVec = pos.xyz - vec3 (0.0, 2.0, pos.z);\n        if ( dot (diffVec, diffVec) < 1.0 ) return 0.0;\n\n        pos.xz *= 4.0;\n\n        return clamp (domainWarp (pos), 0.0, 1.0);\n    }\n#endif\n\nvec3 sceneNorm(vec3 pos)\n{\n    float dx = scene(pos + vec3 (0.01, 0.0, 0.0)) - scene(pos - vec3 (0.01, 0.0, 0.0));\n    float dy = scene(pos + vec3 (0.0, 0.01, 0.0)) - scene(pos - vec3 (0.0, 0.01, 0.0));\n    float dz = scene(pos + vec3 (0.0, 0.0, 0.01)) - scene(pos - vec3 (0.0, 0.0, 0.01));\n    return normalize (vec3 (dx, dy, dz));\n}\n\nfloat luminance(vec3 rgb)\n{\n    return dot(rgb, vec3(0.2125, 0.7154, 0.0721));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 20.0 - 10.0;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec4 finalColor = vec4 (0.0);\n    vec3 curEye = vec3 (0.0, 2.0, iTime * 0.1);\n    vec3 curLook = vec3 (0.0, 0.0, 1.0);\n    vec3 curUp = vec3 (0.0, 1.0, 0.0);\n    vec3 curSide = normalize (cross (curLook, curUp));\n    curUp = cross (curSide, curLook);\n    if ( curUp.y < 0.0 ) curUp = -curUp;\n    vec3 sampleDirNorm = normalize (curLook + curSide * uv.x + curUp * uv.y);\n\n    vec3 sampleDir = sampleDirNorm * MARCH_SIZE * blueNoise (uv);\n    vec3 samplePt = curEye + sampleDir;\n    const vec3 distColor = vec3 (0.56, 0.71, 0.81);\n\n    for (;;)\n    {\n        vec3 diffToSamplePt = samplePt - curEye;\n        float distToSamplePtSq = dot (diffToSamplePt, diffToSamplePt);\n        \n        if ( distToSamplePtSq > DRAW_DISTANCE )\n        {\n            finalColor.rgb = distColor;\n            break;\n        }\n        \n        if ( scene(samplePt) == 1.0 )\n        {\n            vec3 texVal = texture (iChannel1, samplePt.xy).rgb;\n            vec3 norm = sceneNorm (samplePt);\n            // Triplanar that please ;)\n            if ( abs(norm.x) > 0.7 ) texVal = texture (iChannel1, samplePt.yz).rgb;\n            else if ( abs(norm.y) > 0.7 ) texVal = texture (iChannel1, samplePt.xz).rgb;\n            else texVal = texture (iChannel1, samplePt.xy).rgb;\n            if ( samplePt.y < 1.01 || samplePt.y > 2.99 ) texVal = texture (iChannel1, samplePt.xz).rgb;\n            texVal = luminance (texVal) * distColor;\n            \n            vec3 diffVec = samplePt - curEye;\n            float fader = 5.0 / dot (diffVec, diffVec);\n            fader = clamp (fader, 0.0, 1.0);\n            \n            finalColor.rgb = mix (distColor, texVal, fader);\n            break;\n        }\n        samplePt += sampleDir;\n    }\n    \n    // Output to screen\n    fragColor = vec4 (finalColor.rgb, finalColor.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}