{
    "Shader": {
        "info": {
            "date": "1697938304",
            "description": "Fores fire simulation",
            "flags": 32,
            "hasliked": 0,
            "id": "dsKfR1",
            "likes": 1,
            "name": "ForestFire AVA",
            "published": 3,
            "tags": [
                "fire"
            ],
            "usePreview": 0,
            "username": "ai22m030",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float frameCount = float(iFrame);\n\n    // Use modulo on iTime to determine which buffer to display\n    if(mod(frameCount, 2.0) == 1.0)\n    {\n        fragColor = texture(iChannel0, fragCoord/iResolution.xy); // Display Buf A\n    }\n    else\n    {\n        fragColor = texture(iChannel1, fragCoord/iResolution.xy); // Display Buf B\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 0) // only seed the initial state on the first frame\n    {\n        float isTree = step(0.7, rand(fragCoord)); // roughly 70% chance to be a tree\n        fragColor = vec4(0.0, isTree, 0.0, 1.0); // Trees are green\n        return;\n    }\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sample the current state of the pixel\n    vec3 currentState = texture(iChannel0, uv).rgb;\n    \n    // Get the states of Von Neumann neighbors (Up, Down, Left, Right)\n    vec3 up = texture(iChannel0, mod(uv + vec2(0.0, 1.0/iResolution.y), 1.0)).rgb;\n    vec3 down = texture(iChannel0, mod(uv - vec2(0.0, 1.0/iResolution.y), 1.0)).rgb;\n    vec3 left = texture(iChannel0, mod(uv - vec2(1.0/iResolution.x, 0.0), 1.0)).rgb;\n    vec3 right = texture(iChannel0, mod(uv + vec2(1.0/iResolution.x, 0.0), 1.0)).rgb;\n    \n    // Parameters\n    float p = 0.01; // probability for a tree to catch fire if no neighbor is burning\n    float g = 0.001; // Base probability for an empty cell to grow a tree\n    \n    // Check for fire in the neighborhood\n    bool fireNearby = up.r > 0.5 || down.r > 0.5 || left.r > 0.5 || right.r > 0.5;\n    \n    vec3 nextState = currentState;\n    \n    // Fire logic\n    if(currentState.r == 1.0) // Currently on fire\n    {\n        nextState = vec3(0.0, 0.0, 0.0); // Becomes empty\n    }\n    \n    if(currentState.g == 1.0) // Currently a tree\n    {\n        if(fireNearby)\n        {\n            nextState = vec3(1.0, 0.0, 0.0); // Set on fire\n        }\n    }\n    \n    if(currentState.g == 0.0 && currentState.r == 0.0)\n    {\n        if(rand(fragCoord.xy + vec2(iTime) * (iResolution.y + iResolution.x)) < p)\n        {\n            nextState = vec3(1.0, 0.0, 0.0);\n        }\n        else if(rand(fragCoord.xy + vec2(iTime) * (iResolution.x + iResolution.z)) < g) // Empty space grows a tree with chance g at intervals\n        {\n            nextState = vec3(0.0, 1.0, 0.0); // Grow tree\n        }\n    }\n    \n    \n    fragColor = vec4(nextState, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float rand(float co) { return fract(sin(co * (91.3458)) * 47453.5453); }\nfloat rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co) { return rand(co.xy + rand(co.z)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert pixel coordinate to range [0, 1]\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Sample the current state of the pixel\n    vec3 currentState = texture(iChannel0, uv).rgb;\n    \n    // Get the states of Von Neumann neighbors (Up, Down, Left, Right)\n    vec3 up = texture(iChannel0, mod(uv + vec2(0.0, 1.0 / iResolution.y), 1.0)).rgb;\n    vec3 down = texture(iChannel0, mod(uv - vec2(0.0, 1.0 / iResolution.y), 1.0)).rgb;\n    vec3 left = texture(iChannel0, mod(uv - vec2(1.0 / iResolution.x, 0.0), 1.0)).rgb;\n    vec3 right = texture(iChannel0, mod(uv + vec2(1.0 / iResolution.x, 0.0), 1.0)).rgb;\n    \n    // Parameters\n    float p = 0.01; // probability for a tree to catch fire if no neighbor is burning\n    float g = 0.001; // Base probability for an empty cell to grow a tree\n    \n    // Check for fire in the neighborhood\n    bool fireNearby = up.r > 0.5 || down.r > 0.5 || left.r > 0.5 || right.r > 0.5;\n    \n    vec3 nextState = currentState;\n    \n    // Fire logic\n    if(currentState.r == 1.0) // Currently on fire\n    {\n        nextState = vec3(0.0, 0.0, 0.0); // Becomes empty\n    }\n    \n    if(currentState.g == 1.0) // Currently a tree\n    {\n        if(fireNearby)\n        {\n            nextState = vec3(1.0, 0.0, 0.0); // Set on fire\n        }\n    }\n    else if(mod(iTime, 1.0) < 0.1 && rand(fragCoord.xy + vec2(iTime)) < g) // Empty space grows a tree with chance g at intervals\n    {\n        nextState = vec3(0.0, 1.0, 0.0); // Grow tree\n    }\n    \n    fragColor = vec4(nextState, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}