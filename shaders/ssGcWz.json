{
    "Shader": {
        "info": {
            "date": "1654680097",
            "description": "quadratic-bezier //二次Bezier曲线\nCubic-bezier  //三次Bezier曲线\nsimulation how the Bezier curve is generated //模拟Bezier曲线是如何生成的",
            "flags": 0,
            "hasliked": 0,
            "id": "ssGcWz",
            "likes": 3,
            "name": "11 Bezier Curve(quadratic/Cubic)",
            "published": 3,
            "tags": [
                "quadraticbezier"
            ],
            "usePreview": 0,
            "username": "ccc9527",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "#define S(size,d) smoothstep(size, size-1.5/iResolution.y, d)\n\n//画线函数,p为uv,即屏幕上任意一点,ab为线段两端点,size是线段宽,\n//size-1.5/iResolution.y是线段边缘模糊百分比,color是线段颜色\nvec3 DrawLine(vec2 uv,vec2 a,vec2 b,float size,vec3 color)\n{\n    vec2 ap = uv-a;\n    vec2 ab = b-a;\n    \n    float t = dot(ap,ab)/dot(ab,ab);//点p在线段上投影占ab的百分比\n    t = clamp(t,0.0,1.0);\n    \n    //ap-ab*t表示点p到线段ab的垂点,即d是点p到线段的距离\n    float d = length(ap-ab*t);\n    float s = S(size,d);\n    \n    return s*color;\n}\nvec3 DrawPoint(vec2 uv,vec2 p,float size,vec3 color)\n{\n    float d = length(uv-p);\n    d = S(size,d);\n    \n    return d*color;\n}\n//画Beizer曲线,abc为二次Bezier曲线的三个控制点，通过一个个点表示曲线,\n//size为距离点的大小以及模糊程度,color为每个点的颜色\nvec3 Bezier(vec2 uv,vec2 a,vec2 b,vec2 c,float size,vec3 color)\n{\n    vec2 p1 = vec2(0.0);\n    vec2 p2 = vec2(0.0);\n    vec2 p = vec2(0.0);\n    vec3 col = vec3(0.0);\n    for(float t = 0.0;t<=1.0;t+=0.003)\n    {\n        p1 = mix(a,b,t);\n        p2 = mix(b,c,t);\n        p = mix(p1,p2,t);\n        col += DrawPoint(uv,p,size,color);\n    }\n    return col;\n}\n//画Beizer曲线,abcd为三次Bezier曲线的三个控制点，通过一个个点表示曲线,\n//size为距离点的大小,color为每个点的颜色\nvec3 Bezier(vec2 uv,vec2 a,vec2 b,vec2 c,vec2 d,float size,vec3 color)\n{\n    vec2 p1 = vec2(0.0);\n    vec2 p2 = vec2(0.0);\n    vec2 p3 = vec2(0.0);\n    \n    vec2 p11 = vec2(0.0);\n    vec2 p12 = vec2(0.0);\n    \n    vec2 p = vec2(0.0);\n    vec3 col = vec3(0.0);\n    \n    for(float t = 0.0;t<=1.0;t+=0.003)\n    {\n        p1 = mix(a,b,t);\n        p2 = mix(b,c,t);\n        p3 = mix(c,d,t);\n        \n        p11 = mix(p1,p2,t);\n        p12 = mix(p2,p3,t);\n        \n        p = mix(p11,p12,t);\n        col += DrawPoint(uv,p,size,color);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    float w = iResolution.x/iResolution.y;\n\n    vec3 col = vec3(0.0f);\n    float size = 0.015;\n    \n    if(false) //为True画二次Bezier曲线\n    {\n        //Draw Three Point,三个控制点\n        vec2 a = vec2(0.1*w,0.15);\n        vec2 b = vec2(0.5*w,0.8);\n        vec2 c = vec2(0.8*w,0.25);\n\n        col += DrawPoint(uv,a,size,vec3(1.0));\n        col += DrawPoint(uv,b,size,vec3(1.0));\n        col += DrawPoint(uv,c,size,vec3(1.0));\n\n        //Draw Two Line,三个控制的形成的两条直线\n        col += DrawLine(uv,a,b,size/3.0,vec3(1.0,0.0,1.0));\n        col += DrawLine(uv,b,c,size/3.0,vec3(1.0,0.0,1.0));\n\n        float t = fract(iTime/5.0);//Time,每五秒一个循环\n\n        //两条直线上的某一个点,随t的变化而变化(用t值进行插值得到)\n        vec2 p1 = mix(a,b,t);\n        col += DrawPoint(uv,p1,size,vec3(1.0));\n        vec2 p2 = mix(b,c,t);\n        col += DrawPoint(uv,p2,size,vec3(1.0));\n\n        //画出p1与p2的连线\n        col += DrawLine(uv,p1,p2,size/3.0,vec3(1.0,1.0,0.0));\n\n        //同样用t在直线p1与p2直接进行插值得到的点就是Bezier曲线上的点\n        vec2 p = mix(p1,p2,t);\n        col += DrawPoint(uv,p,size,vec3(1.0));\n\n        //用相同的方法画出Bezier曲线用于对比\n        col += Bezier(uv,a,b,c,size/3.0,vec3(1.0));\n    }\n    else  //否则画三次Bezier曲线\n    {\n        //Draw Four Point,四个控制点\n        vec2 a = vec2(0.1*w,0.15);\n        vec2 b = vec2(0.3*w,0.85);\n        vec2 c = vec2(0.65*w,0.8);\n        vec2 d = vec2(0.8*w,0.25);\n\n        col += DrawPoint(uv,a,size,vec3(1.0));\n        col += DrawPoint(uv,b,size,vec3(1.0));\n        col += DrawPoint(uv,c,size,vec3(1.0));\n        col += DrawPoint(uv,d,size,vec3(1.0));\n\n        //Draw Three Line,四个控制的形成的三条直线\n        col += DrawLine(uv,a,b,size/3.0,vec3(1.0,0.0,1.0));\n        col += DrawLine(uv,b,c,size/3.0,vec3(1.0,0.0,1.0));\n        col += DrawLine(uv,c,d,size/3.0,vec3(1.0,0.0,1.0));\n\n        float t = fract(iTime/5.0);//Time,每五秒一个循环\n\n        //三条直线上的某一个点,随t的变化而变化(用t值进行插值得到)\n        vec2 p1 = mix(a,b,t);\n        col += DrawPoint(uv,p1,size,vec3(1.0));\n        vec2 p2 = mix(b,c,t);\n        col += DrawPoint(uv,p2,size,vec3(1.0));\n        vec2 p3 = mix(c,d,t);\n        col += DrawPoint(uv,p3,size,vec3(1.0));\n\n        //画出p1,p2,p3的连线\n        col += DrawLine(uv,p1,p2,size/3.0,vec3(1.0,1.0,0.0));\n        col += DrawLine(uv,p2,p3,size/3.0,vec3(1.0,1.0,0.0));\n\n        //同样用t在直线p1,p2,p3直接进行插值得到两个点\n        vec2 p11 = mix(p1,p2,t);\n        col += DrawPoint(uv,p11,size,vec3(1.0));\n        vec2 p12 = mix(p2,p3,t);\n        col += DrawPoint(uv,p12,size,vec3(1.0));\n        //画得到的这两个点的曲线\n        col += DrawLine(uv,p11,p12,size/3.0,vec3(0.0,1.0,1.0));\n        \n        //同样用t在直线p11与p12直接进行插值得到的点就是Bezier曲线上的点\n        vec2 p = mix(p11,p12,t);\n        col += DrawPoint(uv,p,size,vec3(1.0));\n        \n        //用相同的方法画出Bezier曲线用于对比\n        col += Bezier(uv,a,b,c,d,size/3.0,vec3(1.0));\n    }\n    \n    col = pow(col,vec3(1.0/2.2));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}