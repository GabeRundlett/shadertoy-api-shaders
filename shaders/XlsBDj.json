{
    "Shader": {
        "info": {
            "date": "1513379006",
            "description": " Evolution of my \"Buffer computed points\". https://shadertoy.com/view/XllBRj\n\n\n\n",
            "flags": 96,
            "hasliked": 0,
            "id": "XlsBDj",
            "likes": 152,
            "name": "â™« Neuron proximitors ",
            "published": 3,
            "tags": [
                "points",
                "buffer"
            ],
            "usePreview": 1,
            "username": "patu",
            "viewed": 9246
        },
        "renderpass": [
            {
                "code": "// Fork of \"Buffer computed points.\" by patu. https://shadertoy.com/view/XllBRj\n// http://bit.ly/shadertoy-plugin\n\nfloat SqDistancePtSegment( vec2 a, vec2 b, vec2 p )\n{\n    vec2 \n        pa = p - a, \n        ba = b - a,\n    \td = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    \n    return dot(d, d);\n}\n\nvoid mainImage( out vec4 F, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x += .75;\n    \n\tF -= F;\n    \n    vec2 u = uv;    \n    \n    for (int y = 0; y < 64; y++) {\n        vec4 c1 = texelFetch(iChannel0, ivec2(0, y), 0); // data from bufA 1st column\n        vec4 c2 = texelFetch(iChannel0, ivec2(1, y), 0); // data from bufA 2nd column \n        \n        // bufA column 3 contains volume data\n        float volc = round(pow(texelFetch(iChannel0, ivec2(2, y), 0).r, 4.) * 1.7) * c2.w * 2.;\n        \n        F = mix(F, abs(c1.xyzx) * 1.1 * volc, smoothstep(0., 1., 1. / length(uv - c1.xy) * .008));\n        F = mix(F, abs(c2.xyzx) * 1.1 * volc, smoothstep(0., 1., 1. / length(uv - c2.xy) * .005));\n        \n        F += abs(c1.xyzx) * .4 * volc * smoothstep(0., 1., 1. / length(uv - c1.xy) * .15) * .1;\n        \n        // segment\n        F = mix(F, abs(mix(c1.xyzw, c2.xyzx, .5)) * volc, (1. - smoothstep(0.0, .00001, SqDistancePtSegment(c1.xy, c2.xy, uv))) * 1.);        \n    }    \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash12(vec2 p) {\n\tfloat h = dot(p , vec2(127.1,311.7));\t\n    return fract(abs(sin(h)*43758.5453123));\n}\n\nvoid mainImage(out vec4 C, in vec2 fragCoord)\n{\n    C = vec4(-.5);\n    \n    // buffer texure\n    \n    if (int(fragCoord.y) < 64) {\n        \n        float vol = texelFetch(iChannel1, ivec2(fragCoord.y * 2., 0), 0).r;\n        \n        // first column -- position\n        if (int(fragCoord.x) == 0) {        \n\n            if (iFrame == 0) {            \n\n                // initial position\n                C.x = (hash12(fragCoord.xy) / 2. - .5) + .75;\n                C.y = (hash12(fragCoord.yx) / 2. - .5) * 2.;\n\t\t\t\t\n                // initial speed vector\n                C.z = (hash12(fragCoord.xy * C.xy) / 2. - .5) * 2.;\n                C.w = (hash12(C.xy * 1000.+ iDate.w * 100.) / 2. - .5) * 4.;\n\n            } else {\n                \n\t\t\t    // previous frame\n                C = texelFetch(iChannel0, ivec2(fragCoord.xy), 0) - .5;  \n                C.xy += (C.zw) * 0.01;\n\t\t\t\tC += .5;\n            }\n\n        }\t\n        \n        // second column -- nearest point position\n        if (int(fragCoord.x) == 1) {\n            float minDist = 2.;\n            \n            vec4 G = texelFetch(iChannel0, ivec2(0, fragCoord.y), 0); // 1st column \n            vec4 P = texelFetch(iChannel0, ivec2(fragCoord.xy), 0); // 2nd column previous value \n            \n            C = G;\n            \n            // test all values stored in 1st column.\n            for (int i = 0; i < 64; i++) {\n            \tvec4 H = texelFetch(iChannel0, ivec2(0, i), 0);\n                float d = distance(G.xy, H.xy);\n                \n                if (d < minDist) {\n                    if (d < 1. - vol) {\n                        C.xy = H.xy;\n                        minDist = d;\n                        if (dot(G.xy, C.xy) > .5) {\n                            C.w = 1.;   \n                        }\n                        break;\n                    } else {\n                        C.xy = G.xy;   \n                    }\n                }\n            }\n            \n            C.w -= 0.1;\n            C.w = max(C.w, 0.);\n        }\n        \n        // third column - copy of sound texture \n        if (int(fragCoord.x) == 2) {\n            C.r = vol;\n        }\n        \n        C = fract(C);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 12797,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/talayotiksound-recording/humanon-charade"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}