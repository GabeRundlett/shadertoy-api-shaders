{
    "Shader": {
        "info": {
            "date": "1706635224",
            "description": "now supports x+y equations! also performs a LOT better.",
            "flags": 0,
            "hasliked": 0,
            "id": "lcjSzK",
            "likes": 5,
            "name": "Better Graphing Calculator",
            "published": 3,
            "tags": [
                "calculator"
            ],
            "usePreview": 0,
            "username": "ThePlaneGuy45",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "float calcFunction(float x, float y) {\n\n    x /= iResolution.y;\n    y /= iResolution.y;\n\n    x*=1000./zoom;\n    y*=1000./zoom;\n\n    return graph(x, y);\n\n}\n\nfloat max2(vec2 a) {\n    return max(a.x, a.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 c )\n{\n    vec2 px = c;\n    c -= iResolution.xy*0.5;\n    if(iFrame!=0) {\n        c += iMouse.xy-iResolution.xy*0.5;\n    }\n    \n    float z0 = calcFunction(c.x-graphRadius, c.y);\n    float z1 = calcFunction(c.x+graphRadius, c.y);\n    float z2 = calcFunction(c.x, c.y-graphRadius);\n    float z3 = calcFunction(c.x, c.y+graphRadius);\n    float z4 = calcFunction(c.x, c.y);\n    \n    float mratio = 1000.0/(iResolution.y*zoom);\n    \n    float x0 = mratio*(c.x-1.5);\n    float x1 = mratio*(c.x+1.5);\n    float x2 = mod(mratio*(c.x-0.75)+0.5, 1.0)-0.5;\n    float x3 = mod(mratio*(c.x+0.75)+0.5, 1.0)-0.5;\n    float y0 = mratio*(c.y-1.5);\n    float y1 = mratio*(c.y+1.5);\n    float y2 = mod(mratio*(c.y-0.75)+0.5, 1.0)-0.5;\n    float y3 = mod(mratio*(c.y+0.75)+0.5, 1.0)-0.5;\n    \n    if(\n        (z0 < 0.0 && z1 > 0.0) ||\n        (z0 > 0.0 && z1 < 0.0) ||\n        (z2 < 0.0 && z3 > 0.0) ||\n        (z2 > 0.0 && z3 < 0.0) \n    ) {\n        fragColor = vec4(color, 1.0);\n    } else {\n    \n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        \n        if(\n            x2 < 0.0 && x3 > 0.0 ||\n            y2 < 0.0 && y3 > 0.0\n        ) {\n        \n            fragColor = vec4(0.9, 0.9, 0.9, 1.0);\n        \n        }\n        \n        if(x0 < 0.0 && x1 > 0.0) {\n        \n            fragColor = vec4(1.0, 0.5, 0.5, 1.0);\n        \n        }\n        if(y0 < 0.0 && y1 > 0.0) {\n        \n            fragColor = vec4(0.4, 0.8, 0.4, 1.0);\n        \n        }\n    \n        if(mode==1&&z4<0.0){\n        \n            fragColor = mix(fragColor, vec4(color, 1.0), 0.5);\n        \n        } else if(mode==2&&z4>0.0) {\n        \n            fragColor = mix(fragColor, vec4(color, 1.0), 0.5);\n        \n        }\n        \n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float zoom = 200.0;\n\nconst float graphRadius = 1.0;\nconst vec3 color = vec3(0.0, 0.5, 1.0);\nconst int mode = 1;\n// 0 = equal to\n// 1 = less than\n// 2 = greater than\n\nfloat graph(float x, float y) {\n\n    return 2.0*y-x-sin(3.0*x);\n    \n    // Other equations:\n    // x*x-y*y-4.0: Circle with radius 2\n    // x*x+y*y-4.0: Hyperbola with radius 2\n    // 2.0*y-x-sin(3.0*x): cool line thing\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}