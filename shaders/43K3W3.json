{
    "Shader": {
        "info": {
            "date": "1718318149",
            "description": "xxxx",
            "flags": 0,
            "hasliked": 0,
            "id": "43K3W3",
            "likes": 2,
            "name": "cute star shader vertrau",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "Dion",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "// ShaderToy GLSL Script\n#define PI         3.14159265358979\n#define STEPS      5.0\n#define RADIUS     0.8\n#define SLOPE      2.5\n#define THICKNESS  0.08\n#define AA         0.01\n#define REPEAT     2.0\n\nmat2 rotate (in float angle)\n{\n    float c = cos (angle);\n    float s = sin (angle);\n    return mat2 (c, s, -s, c);\n}\n\nfloat starDist (in vec2 p)\n{\n    // Divide the plane into STEPS sectors\n    const float arc = 2.0 * PI / STEPS;\n    p *= rotate(arc * floor(atan(p.y, p.x) / arc + 0.5));\n\n    // Compute the signed distance to the triangle edge (there is one triangle per sector)\n    return (p.x + abs(p.y) * SLOPE - RADIUS) / sqrt(1.0 + SLOPE * SLOPE);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Get the audio input from channel 0 and amplify it\n    vec4 audio = texture(iChannel0, vec2(0.01, 0.25)) * 10.0;\n\n    // Calculate the intensity based on the audio level\n    float intensity = audio.r + audio.g + audio.b;\n\n    // Calculate the beat-dependent flicker intensity\n    float beat = sin(iTime * 2.0 * intensity); // Adjust the multiplier to synchronize with the beat\n\n    // Strobe effect based on the beat\n    float strobe = step(0.5, beat);\n\n    // Flicker between black and white based on the strobe effect\n    vec3 col = mix(vec3(0.0), vec3(1.0), strobe);\n\n    // Star shape parameters\n    float starSize = 0.1; // Size of the star\n    vec2 starPos = vec2(0.5, 0.5); // Position of the star in the center\n    float starIntensity = 0.0;\n\n    // Translate and scale coordinates for the star\n    vec2 p = (uv - starPos) / starSize;\n\n    // Compute the signed distance to the star shape\n    float star = starDist(p);\n\n    // Determine if we are inside the star shape\n    if (star < 0.0)\n    {\n        starIntensity = 1.0;\n    }\n\n    // Decide the star's color based on the background color\n    vec3 starColor = vec3(1.0); // Always white for the star\n\n    // Apply the star color based on the star intensity\n    col = mix(col, starColor, starIntensity);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}