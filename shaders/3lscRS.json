{
    "Shader": {
        "info": {
            "date": "1592351107",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "3lscRS",
            "likes": 18,
            "name": "Day 179",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "\n#define T iTime\n\n// wrighter here \n// -- plant -- //\n// fractal in the middle\n// mist \n// floating object inside walls \n// floating mysterius tentacles\n\n// everything is going to be glowy, transparent\n// except of the floating objects inside of the walls \n\n\n// if i have time\n// transparent\n// polar repetetion, 4 times\n\nvec3 path (float z){\n    z *= 0.5;\n    return vec3(sin(z), cos(z),0);\n}\n\nvec3 glow = vec3(0);\n\n#define pal(a,b,c,d,e) ((a)+(b)*sin((c)*(d) + (e)))\n\n#define rot(j) mat2(cos(j),-sin(j),sin(j),cos(j))\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n\n#define kick (floor(T) + pow(fract(T),7.))\n\n\nvec2 map(vec3 p){\n\t\tvec2 d = vec2(10e6);\n        float dTrans = 10e7;\n\n        p.y -= 1.;\n\n    \tp -= sin(p)/1.;\n    \n        //p.z += T; \n        vec4 q = vec4(p,1.);\n        for(int i = 0; i < 4; i++){\n\n            float dpp = dot(q.xyz,q.xyz);\n            q /= dpp;\n\n            q.xyz = abs(q.xyz) - vec3(0.03,0.02,0.4);\n\t\t\t\n            //q.xz *= rot(0.5);\n            q.xy *= rot(0. + sin( (T + kick*pi/2.)*0.6)*0.14 );\n            \n            //q.zx *= rot(-0.2 );\n\n        }\n\n        dTrans = min(dTrans, length(q.xyz)/q.w);\n\n        dTrans = min(dTrans, length(q.xy)/q.w);\n\n        dTrans -= 0.003;\n\n        dTrans *= 0.5; \n        dTrans = abs(dTrans) + 0.004;\n\n\n        //dTrans = min(dTrans, length(p)-0.4);\n\n        glow += 0.7/(0.01 + dTrans*dTrans*2000.)*pal(0.5,0.5,vec3(0.7,0.2,0.1),1.,length(p) + T );\n\t\t\n        d.x = min(d.x, dTrans);\n\n        dTrans = 10e8;\n        dTrans = min(dTrans, length(q.xz)/q.w);\n    \tglow += 8.7/(0.01 + dTrans*dTrans*200.)*pal(0.5,0.5,vec3(0.89,0.2,0.1),1.,length(p) + T )*pow(abs(sin(length(p)*4. + T - kick*4.)),40.);\n\n        dTrans = abs(dTrans*0.5) + 0.004;\n\n        d.x = min(d.x, dTrans);\n\n        q.yz *= rot(.0);\n\n    \tq.x +=.0;\n    \tq.z -=.0;\n    \t\n    \tq.z -= 0.;\n    \tq.xy *= rot(0.3*pi);\n    \tq = abs(q);\n        float db = max(q.z,q.x)/q.w*0.4;\n        db -= 0.04;\n        //glow += 0.7/(0.01 + dTrans*dTrans*200.)*pal(0.5,0.5,vec3(0.89,0.2,0.1),1.,length(p) + T )*pow(abs(sin(p.x*4. + T)),40.);\n\n        d.x = min(d.x,db);\n\t\t\n    \tfloat dbb = abs(length(p)-1.5)+0.003; \n        d.x = min(d.x,dbb);\n    \tglow += exp(-dbb)*0.1;\n\t\t\n    \n    \td.x *= 0.9;\n\treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.04,0.0,0.0);\n    //col = vec3(0.7,0.1,0.5);\n\n    uv *= 1. + dot(uv,uv);\n    \n    vec3 ro = vec3(0,0,0.0);\n    ro.y += sin(T);\n    ro.xz += vec2(cos(T)*0.4 + 1.,sin(T)*0.5-1.2)*9.;\n\n    vec3 lookAt = vec3(0);\n\n    lookAt.z = ro.z + 2.;\n\n    lookAt -= lookAt;\n\n    ro += path(ro.z);\n\n    lookAt += path(lookAt.z);\n\n\n    vec3 dir = normalize(lookAt - ro);\n\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up= normalize(cross(dir, right));\n\n    vec3 rd = normalize(dir + right*uv.x + up*uv.y);\n\n\n    vec3 p = ro; float t = 0.; vec2 d = vec2(10e7);\n    bool didHit = false;\n\n\n\n    //p.z -= T + 4.;\n\n    for(int i = 0; i < 110; i++){\n        d = map(p);\n        if(d.x < 0.001){\n        \tdidHit = true;\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n\n    col += glow*0.06;\n\n    \n    \n    \n    if(didHit){\n    \tvec2 t = vec2(0.001,0);\n        vec3 n = normalize(map(p).x - vec3(map(p-t.xyy).x,map(p-t.yxy).x,map(p-t.yyx).x));\n        \n        \n        #define AO(j) clamp(map(p + n*j).x/j,0.,1.)\n        \n        col += 2.*AO(0.9)*AO(0.1);\n\n    }\n\n    col = 1. - col;\n    col = smoothstep(0.,1.,col);\n    \n    col *= 1. - dot(uv,uv)*0.1;\n    \n    //col = mix(col,vec3(0.5),smoothstep(0.,1.,t*0.001));\n    //col \n    /*\n    col /= 1. - col*0.2;\n    \n    */\n    //col = smoothstep(0.,1.,col*1.);\n    \n    col = pow(col,vec3(0.454545));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}