{
    "Shader": {
        "info": {
            "date": "1638625776",
            "description": "License: CC0, author: M책rten R책nge\nInspired by: https://www.twitch.tv/thindal\nNet of stars very obviously inspired by BigWings - The Universe Within:\n https://www.shadertoy.com/view/lscczl\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NldSzr",
            "likes": 17,
            "name": "Thindal twitch logo",
            "published": 3,
            "tags": [
                "2d",
                "twitch"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "// License: CC0, author: M책rten R책nge\n//  Inspired by: https://www.twitch.tv/thindal\n//  Net of stars very obviously inspired by BigWings - The Universe Within:\n//   https://www.shadertoy.com/view/lscczl\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define RESOLUTION      iResolution\n#define TIME            iTime\n#define TTIME           (TAU*TIME)\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(x)         (0.5+0.5*cos(x))\n#define LINECOL(x,y)    lineCol(aa, z, np, cp, cps[x], cps[y]);\n\n\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst vec3 baseLogoCol = HSV2RGB(vec3(0.715, 0.333, 0.8));\n\n// License: Unknown, author: Unknown, found: don't remember\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec2 hash(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n  return length(pa - ba*h);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nvec2 cellPos(vec2 np) {\n  vec2 hp = hash(np);\n  return 0.3*vec2(sin(hp*TIME));   \n}\n\nvec3 lineCol(float aa, float z, vec2 np, vec2 cp, vec2 p0, vec2 p1) {\n  float l = length(p0 - p1);\n  float d = segment(cp, p0, p1)-1.5*aa/z;\n\n  float cd = min(length(cp-p0), length(cp-p1));\n\n  float v = 2.0*exp(-1.75*l)*exp(-15.*max(d, 0.0));\n  float s = 1.0-tanh_approx(v);\n  vec3 hsv = vec3(0.715, s, v);\n\n  return hsv2rgb(hsv);\n}\n\nfloat plane(vec2 p, vec2 n, float m) {\n  return dot(p, n) + m;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d\nfloat polygon4(vec2[4] v, vec2 p) {\n  const int N = 4;\n  float d = dot(p-v[0],p-v[0]);\n  float s = 1.0;\n  for( int i=0, j=N-1; i<N; j=i, ++i) {\n    vec2 e = v[j] - v[i];\n    vec2 w =    p - v[i];\n    vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n    d = min( d, dot(b,b) );\n    bvec3 c = bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);\n    if( all(c) || all(not(c)) ) s*=-1.0;  \n  }\n  return s*sqrt(d);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d\nfloat isosceles(vec2 p, vec2 q) {\n  p.x = abs(p.x);\n  vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n  float s = -sign( q.y );\n  vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n               vec2( dot(b,b), s*(p.y-q.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}\n\nfloat dthindal(vec2 p) {\n  vec2 p0 = -p.yx;\n  vec2 q0 = vec2(0.57, 0.96);\n\n  vec2 p1 = -p.yx;\n  vec2 q1 = vec2(0.31, 0.575);\n\n  if (p.y > 0.0) {\n    q0 = vec2(0.524, 0.88);\n    q1 = vec2(0.29, 0.5);\n  }\n\n  p0.y += 0.59;\n  p1.y += 0.35;\n\n  const vec2 p2[] = vec2[](vec2(-0.62, 0.075), vec2(-0.035, 0.075), vec2(-0.035, -0.075), vec2(-0.365, -0.075));\n\n  float d0 = isosceles(p0, q0);\n  float d1 = isosceles(p1, q1);\n  float d2 = polygon4(p2, p);\n  float d3 = plane(p, normalize(vec2(1.0, 1.7)), -0.055);\n\n  d0 = max(d0, -d1);\n  if (p.y > 0.0) {\n    d0 = max(d0, -d3);\n  }\n  \n  float d = d0;\n  d = min(d, d2);\n  \n  return d;\n}\n\nvec4 gridColor(vec2 p) {\n  float z = 0.2;\n  float aa = 2.0/RESOLUTION.y;\n\n  vec3 col = vec3(0.0);\n  p /= z;\n  vec2 cp = fract(p) - 0.5;\n  vec2 np = floor(p);\n\n  vec2 cps[9];\n  int idx = 0;\n\n  for (float y = -1.0; y <= 1.0; ++y) {\n    for (float x = -1.0; x <= 1.0; ++x) {\n      vec2 off = vec2(x, y);\n      cps[idx++] = cellPos(np+off) + off;\n    }\n  }\n\n  col += LINECOL(4, 0);\n  col += LINECOL(4, 1);\n  col += LINECOL(4, 2);\n  col += LINECOL(4, 3);\n\n  col += LINECOL(4, 5);\n  col += LINECOL(4, 6);\n  col += LINECOL(4, 7);\n  col += LINECOL(4, 8);\n\n  col += LINECOL(1, 3);\n  col += LINECOL(1, 5);\n  col += LINECOL(7, 3);\n  col += LINECOL(7, 5);\n\n  float i = col.x+col.y+col.z;\n\n  return vec4(col, tanh_approx(i));\n}\n\nvec3 thindal(vec3 col, vec2 p, vec2 q) {\n  const float zi = 1.1;\n  vec2 op = p;\n  float aa = 2.0/RESOLUTION.y;\n\n  float fade = 0.9*mix(0.9, 1.0, PCOS(0.25*TTIME+10.0*q.x));\n\n  vec2 pi = p;\n  const float period = 10.0;\n  const float coff = PI;\n  float ptime = (1.0/period)*TIME;\n  float mtime = mod(ptime, 2.0);\n  float ntime = floor(ptime/2.0);\n  float anim = min(1.0, mtime)*step(1.0, ptime); \n  float h = hash(ntime+123.4);\n  float s = floor(h*5.0);\n  float off = 0.6*p.x+p.y;\n  if (s == 1.0) {\n    off = p.x+p.y*p.y;\n  }  else if (s == 2.0) {\n    off = p.x+p.y*p.y*p.y;\n  } else if (s == 3.0) {\n    off = p.x*p.y+p.y*p.x;\n  } else if (s == 4.0) {\n    off = p.x+p.y*p.x;\n  }\n\n  off += -2.0/3.0+PI*anim;\n  float angle = off+mix(coff*0.42, -coff*0.42 , fade);\n  float split = angle+coff;\n  int _nsplit = int(mod1(split, 1.0*coff));\n\n  pi /= zi;\n  float di  = dthindal(pi);\n  float dii = abs(di-0.0125) - 0.0025;\n  di = min(di, dii);\n  di *= zi;\n  \n  float dg = di;\n\n  const vec3 lcol2 = vec3(2.0, 1.55, 1.25).xzy*0.85;\n\n  float gmix = pow(abs(cos(angle)), 8.0);\n  float gmix2 = abs(1.0/tanh_approx(split))*0.5;\n\n  dg = abs(dg-0.025);\n  float glow = exp(-10.0*max(dg+0., 0.0));\n  vec3 glowCol = mix(lcol2.zyx*lcol2.zyx/6.0, lcol2.zyx, glow*glow)*gmix2;\n  col -= 0.5*exp(-10.0*max(di+0.1, 0.0));\n  col = mix(col, vec3(mix(baseLogoCol, sqrt(glowCol*0.5), gmix)), smoothstep(-aa, aa, -di));\n  col += 0.5*smoothstep(0.5, 0.45, abs(anim-0.5))*glowCol*glow*gmix;\n\n  return col;\n}\n\n// The path function\nvec3 offset(float z) {\n  float a = z;\n  vec2 p = -0.075*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n  return vec3(p, z);\n}\n\n// The derivate of the path function\n//  Used to generate where we are looking\nvec3 doffset(float z) {\n  float eps = 0.1;\n  return 0.5*(offset(z + eps) - offset(z - eps))/eps;\n}\n\n// The second derivate of the path function\n//  Used to generate tilt\nvec3 ddoffset(float z) {\n  float eps = 0.1;\n  return 0.125*(doffset(z + eps) - doffset(z - eps))/eps;\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  float h = hash(n);\n  float s = mix(0.05, 0.25, h);\n\n  vec3 hn;\n  vec2 p = (pp-off*vec3(1.0, 1.0, 0.0)).xy;\n  p *= ROT(TAU*h);\n\n  return gridColor(p);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  return vec3(0.0);\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  float rdd = (2.0+1.0*tanh_approx(lp));  // Playing around with rdd can give interesting distortions\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  const float planeDist = 1.0-0.;\n  const int furthest = 4;\n  const int fadeFrom = max(furthest-3, 0);\n\n  const float fadeDist = planeDist*float(furthest - fadeFrom);\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 0.95;\n  bool cutOut = false;\n\n  // Steps from nearest to furthest plane and accumulates the color \n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0 && acol.w < cutOff) {\n      vec3 pp = ro + rd*pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*float(furthest), planeDist*float(fadeFrom), nz);\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol.xyz = mix(skyCol, pcol.xyz, fadeIn);\n      pcol.w *= fadeOut;\n      pcol = clamp(pcol, 0.0, 1.0);\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n// To debug cutouts due to transparency  \n//  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/index.htm\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, vec3(1.0/2.2));\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float tm  = TIME*0.3;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  vec3 col = effect(p, q);\n  col *= smoothstep(3.0, 6.0, TIME);\n  col = thindal(col, p, q);\n  col *= smoothstep(0.0, 10.0*q.y, TIME);\n  col = postProcess(col, q);\n \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}