{
    "Shader": {
        "info": {
            "date": "1629307444",
            "description": "Testing an idea for calculating barycentric coordinates before implementing in a 3D software renderer I'm working on. Not great method for shaders but the idea should be more efficient in my triangle rasterizer.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dd3z4",
            "likes": 7,
            "name": "Inverse Scanline Barycentric",
            "published": 3,
            "tags": [
                "scanline",
                "inverse",
                "interpolationbarycentric"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 172
        },
        "renderpass": [
            {
                "code": "// Utilities\n#define draw(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\nstruct Vertex { float x; float y; vec3 uv; };\n#define makeVertex(pos, uv) Vertex((pos).x, (pos).y, uv)\n#define swap(a, b) { tmp = a, a = b, b = tmp; }\n\nvoid render(inout vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n\n    float co = cos(iTime), si = sin(iTime);\n    mat2 rot = mat2(co, si, -si, co);\n\n    Vertex a = makeVertex(rot * vec2(cos(      iTime) * 0.5 - 1.0, sin(      iTime) * 0.5 + 1.0), vec3(1.0, 0.0, 0.0));\n    Vertex b = makeVertex(rot * vec2(sin(3.0 * iTime) * 0.2 - 1.0, cos(3.0 * iTime) * 0.2 - 1.0), vec3(0.0, 1.0, 0.0));\n    Vertex c = makeVertex(rot * vec2(cos(2.0 * iTime) * 0.5 + 1.0, sin(2.0 * iTime) * 0.5 - 1.0), vec3(0.0, 0.0, 1.0));\n\n    // Sort vertices in ascending order of the y coordinate\n    Vertex tmp;\n    if (b.y < a.y) swap(a, b);\n    if (c.y < b.y) {\n        if (c.y < a.y) swap(a, c);\n        swap(b, c);\n    }\n\n    // Find the second middle point (across from the middle vertex on the long edge)\n    float tMid = (b.y - a.y) / (c.y - a.y);\n    Vertex mid = Vertex(mix(a.x, c.x, tMid), b.y, mix(a.uv, c.uv, tMid));\n    if (mid.x > b.x) swap(b, mid);\n\n    vec3 bary = vec3(0.0);\n    bool inside = false;\n    if (a.y < uv.y && uv.y < b.y) { // Lower half of the triangle\n        float tA = (uv.y - a.y) / (mid.y - a.y);\n        vec3 baryA = mix(a.uv, mid.uv, tA); // Interpolate UVs along the left edge\n        float isectA = mix(a.x, mid.x, tA); // Left edge intersection\n\n        float tB = (uv.y - a.y) / (b.y - a.y);\n        vec3 baryB = mix(a.uv, b.uv, tB); // Interpolate UVs along the right edge\n        float isectB = mix(a.x, b.x, tB); // Right edge intersection\n\n        bary = mix(baryA, baryB, (uv.x - isectA) / (isectB - isectA)); // Interpolate between the intersections\n        inside = isectA < uv.x && uv.x < isectB;//\n        fragColor.r += 0.5 * float(!inside);//\n    }\n\n    if (b.y < uv.y && uv.y < c.y) { // Upper half of the triangle\n        float tA = (uv.y - mid.y) / (c.y - mid.y);\n        vec3 baryA = mix(mid.uv, c.uv, tA); // Interpolate UVs along the left edge\n        float isectA = mix(mid.x, c.x, tA); // Left edge intersection\n\n        float tB = (uv.y - b.y) / (c.y - b.y);\n        vec3 baryB = mix(b.uv, c.uv, tB); // Interpolate UVs along the right edge\n        float isectB = mix(b.x, c.x, tB);; // Right edge intersection\n\n        bary = mix(baryA, baryB, (uv.x - isectA) / (isectB - isectA)); // Interpolate between the intersections\n        inside = isectA < uv.x && uv.x < isectB;//\n        fragColor.b += 0.5 * float(!inside);//\n    }\n\n    fragColor += vec4(inside ? bary : vec3(0.0), 1.0);\n}\n\n// Supersampled antialiasing\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    render(fragColor, fragCoord);\n    render(fragColor, fragCoord + vec2(0.5, 0.0));\n    render(fragColor, fragCoord + vec2(0.0, 0.5));\n    render(fragColor, fragCoord + vec2(0.5, 0.5));\n    fragColor /= 4.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}