{
    "Shader": {
        "info": {
            "date": "1667872244",
            "description": "whatever, made it on the plane",
            "flags": 0,
            "hasliked": 0,
            "id": "ddB3zV",
            "likes": 5,
            "name": "LDN001",
            "published": 3,
            "tags": [
                "whatever"
            ],
            "usePreview": 0,
            "username": "antoinefortin",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "float drawLine (vec2 p1, vec2 p2, vec2 uv, float a)\n{\n    float r = 0.;\n    float one_px = 1. / iResolution.x; //not really one px\n    \n    // get dist between points\n    float d = distance(p1, p2);\n    \n    // get dist between current pixel and p1\n    float duv = distance(p1, uv);\n\n    //if point is on line, according to dist, it should match current uv \n    r = 1.-floor(1.-(a*one_px)+distance (mix(p1, p2, clamp(duv/d, 0., 1.)),  uv));\n        \n    return r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\nvec2 uv = (fragCoord -.5 * iResolution.xy) / iResolution.y;\n    // Time varying pixel color\n    vec3 col = vec3(0.0f);\n    vec3 col2 = vec3(0.0f);\n    float radius = .5f;\n    float tt = iTime;\n       uv.y += .15;\n       \n    vec3 l1 = vec3(0.0f);\n        vec3 l2 = vec3(0.0f);\n    for(int i = 0; i < 25; i++)\n    {\n        l1 += vec3(\n        drawLine(\n        vec2(0.0, 0.0), \n        vec2( radius * sin(tt + float(i)), \n        (cos(uv.y * 2.7) - radius * cos(tt + float(i)))) - .15, \n        uv - vec2(0.0,0.0f), \n        1.0));\n        \n        \n        l2 += vec3(\n        drawLine(\n        vec2(0.0, 0.0), \n        vec2( radius * sin(tt - float(i)), \n        (sin(uv.x * 1.7) - radius * sin(tt - float(i)))) - .15, \n        uv - vec2(0.0,0.0f), \n        1.0));\n        \n    }\n    \n    \n    //col += vec3(drawLine(vec2(0.0, 0.0), vec2( radius * sin(tt + 2.0f),radius * cos(tt + 2.0f)), uv, 2.5));\n    l1 = clamp(l1, 0.0f, 1.0f);\n    l2 = clamp(l2, 0.0f, 1.0f);\n    \n    vec3 cc = l1 * vec3(abs(uv.x) * 22. + abs(uv.y), uv.y, 0.0f);\n    cc += l2;\n\n    // Output to screen\n    fragColor = vec4(cc,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}