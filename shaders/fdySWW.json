{
    "Shader": {
        "info": {
            "date": "1634607945",
            "description": "earth ship 2d",
            "flags": 0,
            "hasliked": 0,
            "id": "fdySWW",
            "likes": 0,
            "name": "earth ship 2d",
            "published": 3,
            "tags": [
                "earthship2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "///earth ship 2d- por-JFP\n///por jorge2017a2...2021-oct-18\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n    return colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{   vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{   p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdParallelogram( in vec2 p, float wi, float he, float sk )\n{   vec2 e = vec2(sk,he);\n    p = (p.y<0.0)?-p:p;\n    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);\n    vec2  d = vec2(dot(w,w), -w.y);\n    float s = p.x*e.y - p.y*e.x;\n    p = (s<0.0)?-p:p;\n    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);\n    d = min( d, vec2(dot(v,v), wi*he-abs(s)));\n    return sqrt(d.x)*sign(-d.y);\n}\n\nvec3 Cielo(vec2 p, vec3 col)\n{  col=DrawFig(vec3(0.2,0.0,0.3), col, -p.y+3.5 );\n return col;\n}\n\nvec3 colina(vec2 p, vec3 col)\n{   p.x=opRep1D(p.x, 8.5 );\n    float d1= sdTriangleIsosceles(vec2(p.x,-p.y+0.5), vec2(4.0,2.0) );\n    col=DrawFigBordeCol(vec3(0.3), col, d1 , vec3(0.35));\n    return col;\n}\n\nvec3 columna2(vec2 p, vec3 col)\n{   //esta funcion se puede mejorar....solo con usar la funcion  DrawFigBordeCol\n    // y asi se eliminan funciones ...ver la nave\n    float d1= sdTrapezoid( vec2(p.x, -p.y), 1.2, 1.5, 0.5 );\n    float d2= sdTrapezoid( vec2(p.x, -p.y)-vec2(-0.5,0.0), 0.5, 0.8, 0.4 );\n    float d3=sdParallelogram(vec2(p.x,-p.y)-vec2(0.8,0.0), 0.4, 0.4, 0.15 );    \n    float d4=sdBox(p-vec2(-0.5,-3.0), vec2(0.9,2.5) );\n    float d5=sdBox(p-vec2(0.9,-3.0), vec2(0.55,2.5) );\n    float d4a=sdBox(p-vec2(-0.5,-2.9), vec2(0.8,2.4) );\n    float d5a=sdBox(p-vec2(0.9,-2.9), vec2(0.4,2.4) );\n    //parte inferior\n    float d6= sdTrapezoid( vec2(p.x, -p.y)-vec2(-0.5,5.8), 0.8, 1.4, 0.5 );\n    float d7=sdParallelogram(vec2(p.x,-p.y)-vec2(1.25,5.85), 0.65, 0.45, 0.25 );    \n    float d6a= sdTrapezoid( vec2(p.x, -p.y)-vec2(-0.5,5.8), 0.6, 1.2, 0.35 );\n    float d7a=sdParallelogram(vec2(p.x,-p.y)-vec2(1.2,5.8), 0.5, 0.3, 0.25 );    \n    \n    col=DrawFig(vec3(1.0), col, d1);\n    col=DrawFig(vec3(0.0), col, d2);\n    col=DrawFig(vec3(0.0), col, d3);\n    col=DrawFig(vec3(1.0), col, d4);\n    col=DrawFig(vec3(1.0), col, d5);\n    col=DrawFig(vec3(0.0), col, d4a);\n    col=DrawFig(vec3(0.0), col, d5a);\n    col=DrawFig(vec3(1.0), col, d6);\n    col=DrawFig(vec3(1.0), col, d7);\n    col=DrawFig(vec3(0.0), col, d6a);\n    col=DrawFig(vec3(0.0), col, d7a);\n    return col;\n}\n\n\nvec3 Nave(vec2 p, vec3 col)\n{   float d1= sdTriangleIsosceles(vec2(p.x, -p.y), vec2(1.0,1.0) );\n    float d2=sdParallelogram(vec2(p.x,-p.y)-vec2(1.1,0.5), 0.5, 0.5, 0.45 );    \n    float d3=sdParallelogram(vec2(p.x,-p.y)-vec2(2.1,0.5), 0.5, 0.5, 0.45 );    \n    float d4= sdBox(p-vec2(1.0,-1.5), vec2(2.0,0.5) );\n    float d5= sdTrapezoid( vec2(p.x, -p.y)-vec2(1.1,2.4), 2.0, 1.5, 0.35 );\n    col=DrawFigBordeCol(vec3(0.0),col,d1,vec3(1.0));\n    col=DrawFigBordeCol(vec3(0.0),col,d2,vec3(1.0));\n    col=DrawFigBordeCol(vec3(0.0),col,d3,vec3(1.0));\n    col=DrawFigBordeCol(vec3(0.0),col,d4,vec3(1.0));\n    col=DrawFigBordeCol(vec3(0.0),col,d5,vec3(1.0));    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec3  col=vec3(0.5)-uv.y*0.125;\n    uv*=8.0;\n    vec2 uv1=uv;\n    \n    uv1.x= opRep1D(uv1.x-5.0+iTime*5.0, 25.0 );\n    col= Cielo(uv, col);\n    col=colina(uv1-vec2(0.0,5.0), col);\n    col=columna2(uv1*2.0-vec2(10.0,12.0), col);\n    col=columna2(uv1*1.5-vec2(5.0,5.0), col);\n    col=columna2(uv1*1.5-vec2(15.0,6.0), col);\n    col= Nave(uv-vec2(0.0,1.0+2.0*sin(iTime*0.5)),col);\n    col=columna2(uv1, col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}