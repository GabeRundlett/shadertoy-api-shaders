{
    "Shader": {
        "info": {
            "date": "1676103717",
            "description": "Shader for rendering 1px wide lines",
            "flags": 0,
            "hasliked": 0,
            "id": "dl2XW1",
            "likes": 5,
            "name": "1px wide line",
            "published": 3,
            "tags": [
                "simple",
                "line",
                "px",
                "1px",
                "itsharderthanyouthink"
            ],
            "usePreview": 0,
            "username": "rsk",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "// 1px wide line\n// author: rsk -> https://twitter.com/rsk\n\n// sets pixel size for rendering\n#define PX_SIZE 1.0\n\nbool isLine(vec2 a, vec2 b, vec2 p) {\n    // line parametric equation:\n    // x = x0 + ab.x * t\n    // y = y0 + ab.y * t\n    //\n    a = floor(a);\n    b = floor(b);\n    // `+ 0.01` allows to render zero length lines (if `ab == (0, 0)`, `t` will\n    // be `nan`), and at same time it will not affect rendered pixel position,\n    // because it will keep shifted position in the same integer cell\n    b.x += 0.01;\n    p = floor(p);\n\n    vec2 ab = b - a;\n    // swap `x` and `y` if needed\n    // algorithm depends on which side is wider `x` or `y`, but both variants is\n    // similar just instead of `x` `y` is used, swapping allows simplify code,\n    // and get rid of `if` branching\n    int i = int(abs(ab.x) > abs(ab.y));\n    int xi = 1 - i;\n    int yi = i;\n    float t = (p[xi] - a[xi]) / ab[xi];\n    float y = round(a[yi] + ab[yi] * t);\n    // `x` should be rounded because `0.01` was added before, otherwise some\n    // tests will fail, line will not be rendered in some places\n    float minX = round(min(a[xi], b[xi]));\n    float maxX = round(max(a[xi], b[xi]));\n    return p[yi] == y && minX <= p[xi] && p[xi] <= maxX;\n}\n\nbool seg(vec2 position, float size, float rotation, vec2 fragment) {\n    vec2 cs = vec2(cos(rotation), sin(rotation));\n    vec2 a = -cs * size / 2.0 + position;\n    vec2 b =  cs * size / 2.0 + position;\n    return isLine(a, b, fragment);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragCoord /= PX_SIZE;\n    const float tau = 6.283185307179586;\n    vec2 r = iResolution.xy / PX_SIZE;\n    float s = min(r.x, r.y) / 2.25;\n    \n    vec2 p = r / vec2(3.0, 2.0);\n    bool lines = seg(p, s, 0.0, fragCoord);\n    lines = lines || seg(p, s, tau / 4.0, fragCoord);\n    \n    float pxScale = s / 200.0;\n    // zero length line, rendered as one pixel\n    lines = lines || isLine(p + round(vec2(10.0) * pxScale), p + round(vec2(10.0) * pxScale), fragCoord);\n    lines = lines || isLine(p + round(vec2(15.0) * pxScale), p + round(vec2(50.0) * pxScale), fragCoord);\n    lines = lines || isLine(p + round(vec2(15.0) * pxScale), p + round(vec2(20.0, 25.0) * pxScale), fragCoord);\n    lines = lines || isLine(p + round(vec2(15.0) * pxScale), p + round(vec2(25.0, 20.0) * pxScale), fragCoord);\n\n    p += vec2(p.x, 0.0);\n    float t = iTime / 3.0;\n    lines = lines || seg(p, s, t, fragCoord);\n    float tShifted = iTime / 25.0 + tau / 4.0;\n    lines = lines || seg(p, s, tShifted, fragCoord);\n    tShifted += tau / 4.0;\n    lines = lines || seg(p, s, tShifted, fragCoord);\n    \n    const int steps = 20;\n    p = r / vec2(float(steps) + 1.0, 7.0);\n    float ps = s / 5.5;\n    for (int i = 0; i < steps; i++) {\n        lines = lines || seg(p + vec2(p.x * float(i), 0.0), ps, tau / float(steps - 1) * float(i), fragCoord);\n    }\n    p = vec2(r.x/(float(steps) + 1.0), r.y * 6.0 / 7.0);\n    for (int i = 0; i < steps; i++) {\n        lines = lines || seg(p + vec2(p.x * float(i), 0.0), ps, tau / float(steps - 1) * float(i), fragCoord);\n    }\n    fragColor = vec4(vec3(!lines), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}