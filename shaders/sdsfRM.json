{
    "Shader": {
        "info": {
            "date": "1644989375",
            "description": "poggers (still some improvements I wanna make)",
            "flags": 64,
            "hasliked": 0,
            "id": "sdsfRM",
            "likes": 10,
            "name": "Visualizer 2.0",
            "published": 3,
            "tags": [
                "music",
                "visualizer",
                "visualize"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/\nconst float pi     = 3.141592653589793; // Pi\nconst float two_pi = 6.283185307179586; // 2 * Pi\nconst float inv_pi = 0.318309886183790; // 1 / Pi\n\nvec3 color_palette(float t)\n{\n    return 0.5 * (vec3(\n    cos( two_pi * (t - 0.0000000000000000) ),\n    cos( two_pi * (t - 0.3333333333333333) ),\n    cos( two_pi * (t - 0.6666666666666666) )\n    ) + 1.0);\n}\n\nvec3 visualizer(vec2 fragCoord)\n{\n    vec3 col = vec3(0.0);\n\n    float wave_amplitude = 0.5 * (texture(iChannel0, vec2(fragCoord.x / iResolution.x, 1.)).x - 0.5);\n\n    vec2 uv = 2.0 * (fragCoord - 0.5 * iResolution.xy) / max(iResolution.x, iResolution.y);\n\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x) ;\n\n    float freq_amplitude0 = texture( iChannel0, vec2(fract(2.0 * ( (2.0 * theta + 0.25 * two_pi * iTime) / two_pi ) ), 0.0) ).x;\n    float freq_amplitude1 = texture( iChannel0, vec2(fract(2.0 * ( (2.0 * theta - 0.25 * two_pi * iTime) / two_pi ) ), 0.0) ).x;\n\n    //freq_amplitude0 = pow(freq_amplitude0, 2.0);\n    //freq_amplitude1 = pow(freq_amplitude1, 2.0);\n    freq_amplitude0 *= freq_amplitude0;// * freq_amplitude0;\n    freq_amplitude1 *= freq_amplitude1;// * freq_amplitude1;\n\n    if(wave_amplitude + 0.4 < uv.y)\n    {\n        col = color_palette( fract( (fragCoord.x / iResolution.x) + iTime ) );\n    }\n    if(wave_amplitude - 0.4 > uv.y)\n    {\n        col = color_palette( fract( (fragCoord.x / iResolution.x) - iTime ) );\n    }\n\n    if(r > 0.25 && r < 0.3 * freq_amplitude0 + 0.3)\n    {\n        col = color_palette( fract( 2.0 * ( (theta - 0.25 * two_pi * iTime) / two_pi) ) );\n    }\n    if(r < 0.20 && r > 0.1 * freq_amplitude1 + 0.15)\n    {\n        col = color_palette( fract( 2.0 * ( (theta + 0.25 * two_pi * iTime) / two_pi) ) );\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    fragColor.rgb = (\n    visualizer( fragCoord + vec2(-0.500, -0.250) ) +\n    visualizer( fragCoord + vec2(-0.250,  0.500) ) +\n    visualizer( fragCoord + vec2( 0.250,  0.500) ) +\n    visualizer( fragCoord + vec2( 0.500, -0.500) )\n    ) / 4.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28231,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/cautioncrisis/sweden-caution-crisis-remix?si=5333346d31dd4fc7908c4c4c57f626e2&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}