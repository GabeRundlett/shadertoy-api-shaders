{
    "Shader": {
        "info": {
            "date": "1562086686",
            "description": "View of signed distance function that I previously wrote here: https://www.shadertoy.com/view/Mt33zr",
            "flags": 0,
            "hasliked": 0,
            "id": "3tlSzH",
            "likes": 5,
            "name": "Quadratic Bezier SDF",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "quadratic"
            ],
            "usePreview": 0,
            "username": "zlnimda",
            "viewed": 709
        },
        "renderpass": [
            {
                "code": "/* ----------------\n*\tzlnimda wrote this file and is under license CC-BY-SA-4.0 \n* \t( see legal notice: https://creativecommons.org/licenses/by-sa/4.0/legalcode )\n/* ----------------\n* \tBezier algo from my previous shader: https://www.shadertoy.com/view/Mt33zr\n* \tPoints and distance view from iq: https://www.shadertoy.com/view/MlKcDD\n*/\n\n#define M_PI 3.1415926535897932384626433832795\n\nfloat weight(float dist)\n{\n    return pow(max(0., 1. - dist), 100.);\n}\n\nvec2 BezierDeg3(vec2 p0, vec2 p1, vec2 p2, float t)\n{\n    // bezier formula following bernstein Bez(t) = E(i->n)Bern(t).Pi with t=[0,1]\n    // Deg3 -> Bez(t) = (1-t)Â²P0 + 2t(1-t)P1 +tÂ²P2\n    return p0*pow(1.-t, 2.) + p1*2.*t*(1.-t) + p2*t*t;\n}\n\n// Cardano's method : https://en.wikipedia.org/wiki/Cubic_function#Cardano's_method\nvec3 Cardan(float p, float q)\n{\n    float p3 = p*p*p;\n    float D = - (4.*p3+27.*q*q);\n    if (D > 0.)\n    {\n        float a = 2.*sqrt(-p/3.);\n        float b = acos(sqrt(27./(-p3))*-q/2.)/3.;\n        return vec3(a*cos(b), a*cos(b+2.*M_PI/3.), a*cos(b+4.*M_PI/3.));\n    }\n    else if (D < 0.)\n    {\n        float coef = 1./3.;\n        float DD = sqrt(-D/27.);\n        float u = (-q+DD)/2.;\n        u = sign(u)*abs(pow(abs(u), 1./3.));\n        float v = (-q-DD)/2.;\n        v = sign(v)*pow(abs(v), 1./3.);\n        return vec3(u + v);\n    }\n    else\n    {\n        if (p == 0. || q == 0.)\n            return vec3(0.);\n        float r = 3.*q/p;\n        float r2 = -3.*q / (2.*p);\n        return vec3(r, r2, r2);\n    }\n}\n\n// Resolve cubic equation\nvec3 resolveEqDeg3(float a, float b, float c, float d)\n{\n    vec3 A = vec3(b, c, d) / a;\n    float p = A.y - A.x*A.x/3.;\n    float q = A.x*(2.*A.x*A.x-9.*A.y)/27.+A.z;\n    return Cardan(p, q) - (b / (3.*a));\n    \n}\n\n// Main element to bezier curve SDF\nfloat dBezier(vec2 pos, vec2 p0, vec2 p1, vec2 p2)\n{\n    // dP/dt(t) = 2(A+Bt)\n    // simplified from \n    // dP/dt(t) = -2(1-t)P0 + 2(1-2t)P1 + 2tP2\n    vec2 A = p1-p0;\n    vec2 B = p2 - p1 - A;\n    \n    // search for equation\n    // MP.dP/dt = 0\n    vec2 M = p0 - pos;\n    vec3 t = resolveEqDeg3(dot(B, B), dot(A, B)*3., dot(A,A)*2.+dot(M,B), dot(M,A));\n    \n    float d = 1000.;\n    \n    if (t.x >= 0. && t.x <= 1.)\n        d = min(d, distance(pos, BezierDeg3(p0, p1, p2, t.x)));\n\tif (t.y >= 0. && t.y <= 1.)\n        d = min(d, distance(pos, BezierDeg3(p0, p1, p2, t.y)));\n    if (t.z >= 0. && t.z <= 1.)\n        d = min(d, distance(pos, BezierDeg3(p0, p1, p2, t.z)));\n    return d;\n}\n\n// signed function to a quadratic bezier curve\nfloat dBezierCorrect(vec2 uv, vec2 p0, vec2 p1, vec2 p2)\n{\n    float d = distance(p0,uv);\n    d = min (d, distance(p2,uv));\n    d = min (d, dBezier(uv, p0, p1, p2));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2 p0 = vec2(1.3,0.9)*cos(iTime*1.1 + vec2(0.0,5.0) );\n    vec2 p1 = vec2(1.3,0.9)*cos(iTime*1.2 + vec2(3.0,4.0) );\n    vec2 p2 = vec2(1.3,0.9)*cos(iTime*1.3 + vec2(2.0,1.0) );\n    \n    float d = dBezierCorrect(uv, p0, p1, p2);\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}