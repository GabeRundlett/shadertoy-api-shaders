{
    "Shader": {
        "info": {
            "date": "1484542461",
            "description": "Approximating a 50 point shape by 1, 2, 3, ..., 50 Fourier coefficients. The last coefficients are pretty small and therefore can be stored in very few bits or simply discarded, achieving data compression similar to JPG or MPG",
            "flags": 0,
            "hasliked": 0,
            "id": "ltKSWD",
            "likes": 81,
            "name": "Fourier - approximation",
            "published": 3,
            "tags": [
                "2d",
                "approximation",
                "compression",
                "fourier",
                "dft"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 6596
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Approximating a 50 point shape by 1, 2, 3, ..., 50 Fourier coefficients, great for\n// shape compression. The last coefficients are pretty small and therefore they can be \n// stored in very few bits (or completely discarded as in this example)\n//\n// Some related info: https://iquilezles.org/articles/fourier\n\n\nfloat hash( float n ) \n{\n    return fract( n*63.0*fract( n*0.3183099 ) );\n}\n\nfloat sdSegmentSq( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    vec2  d = pa - ba*h;\n\treturn dot(d,d);\n}\n\nfloat sdPointSq( in vec2 p, in vec2 a )\n{\n    vec2 d = p - a;\n\treturn dot(d,d);\n}\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\n\n//=================================================================================================\n// digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\nfloat SampleDigit(const in float n, const in vec2 vUV)\n{\t\t\n\tif(vUV.x  < 0.0) return 0.0;\n\tif(vUV.y  < 0.0) return 0.0;\n\tif(vUV.x >= 1.0) return 0.0;\n\tif(vUV.y >= 1.0) return 0.0;\n\t\n\tfloat data = 0.0;\n\t\n\t     if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n\telse if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n\telse if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\t\n\tvec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n\tfloat fIndex = vPixel.x + (vPixel.y * 4.0);\n\t\n\treturn mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt( in vec2 uv, in float value )\n{\n\tfloat res = 0.0;\n\tfloat maxDigits = 1.0+ceil(.01+log2(value)/log2(10.0));\n\tfloat digitID = floor(uv.x);\n\tif( digitID>0.0 && digitID<maxDigits )\n\t{\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n\t}\n\n\treturn res;\t\n}\n//=================================================================================================\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float e = 2.0/iResolution.y;\n\tvec2 p = (-iResolution.xy+2.0*fragCoord) / iResolution.y;\n\n    vec3 col = vec3(1.0);\n\n    vec2 path[50];\n    \n    //------------------------------------------------------\n    // generate a path of 50 random points\n    //------------------------------------------------------\n    {\n        vec2 d = vec2(1000.0);\n        vec2 q = vec2(0.25,0.7);\n        path[0] = q;\n        float dir = 0.0;\n        for( int i=1; i<50; i++ )\n        {\n            float h = float(i)/50.0;\n            dir += 1.7*(-1.0+2.0*hash(float(i)));\n            q += 0.16*vec2( cos(dir), sin(dir) );\n            q = mix( q, path[0], pow(h,16.0) );\n            path[i] = q;\n        }\n    }\n\n    //------------------------------------------------------\n    // draw path\n    //------------------------------------------------------\n    {\n        vec2 d = vec2(1000.0);\n        for( int i=0; i<49; i++ )\n        {\n            vec2 a = path[i+0];\n            vec2 b = path[i+1];\n            d = min( d, vec2(sdSegmentSq( p,a,b ), sdPointSq(p,a) ) );\n        }\n        d = sqrt( min( d, vec2(sdSegmentSq( p, path[49], path[0] ), sdPointSq(p,path[49]) ) ) );\n\n        col = mix( col, vec3(0.7,0.7,0.7), 1.0-smoothstep(0.0,1.0*e,d.x) );\n        col = mix( col, vec3(0.9,0.2,0.0), 1.0-smoothstep(5.0*e,6.0*e,d.y) );\n    }\n\n    //------------------------------------------------------\n    // compute fourier transform of the path\n    //------------------------------------------------------\n\n\n    vec2 fcs[50];\n    for( int k=0; k<50; k++ )\n    {\n        vec2 fc = vec2(0.0);\n        for( int i=0; i<50; i++ )\n        {\n            float an = -6.283185*float(k)*float(i)/50.0;\n            fc += cmul(path[i],vec2(cos(an),sin(an)));\n        }\n        fcs[k] = fc;\n    }\n\n    //------------------------------------------------------\n    // inverse transform using only n<=25 coefficients\n    //------------------------------------------------------\n    float n = min(mod(2.0*iTime,30.0),25.0);\n    float ni = floor(n);\n    float nf = fract(n);\n    n = ni + smoothstep(0.0,1.0,nf);\n    \n    {\n    float d = 1000.0;\n    vec2 oq, fq;\n    for( int i=0; i<50; i++ )\n    {\n        vec2 q = vec2(0.0);\n        for( int k=0; k<25; k++ )\n        {\n            float w = clamp( n-float(k), 0.0, 1.0 );\n            \n            float w1 = 6.283185*float(k)*float(i)/50.0;\n            q += w*cmul( fcs[k], vec2( cos(w1), sin(w1) ) )/50.0;\n            \n            float w2 = 6.283185*float(49-k)*float(i)/50.0;\n            q += w*cmul( fcs[49-k], vec2( cos(w2), sin(w2) ) )/50.0;\n        }\n\n        if( i==0 ) fq=q; else d = min( d, sdSegmentSq( p, q, oq ) );\n        oq = q;\n    }\n    d = sqrt( min( d, sdSegmentSq( p, oq, fq ) ) );\n\n    col = mix( col, vec3(0.1,0.1,0.2), 1.0-smoothstep(0.0*e,2.0*e,d) );\n    col *= 0.75 + 0.25*smoothstep( 0.0, 0.3, sqrt(d) );\n\n    }\n\n    //------------------------------------------------------\n    // print number of coefficients and vignette\n    //------------------------------------------------------\n\tcol *= 1.0 - PrintInt( (p-vec2(0.85,0.6))*4.0, 2.0*n );\n    col *= 1.0 - 0.15*length(p);\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}