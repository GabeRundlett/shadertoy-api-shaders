{
    "Shader": {
        "info": {
            "date": "1683161967",
            "description": "A simple Quaternion Rotation Demo.\nThis example is for beginners who dare to brave quaternions.",
            "flags": 0,
            "hasliked": 0,
            "id": "dttGWj",
            "likes": 4,
            "name": "Rotation 3D ~ traditional",
            "published": 3,
            "tags": [
                "3d",
                "simple",
                "basic",
                "rotate",
                "easy",
                "quaternion",
                "matrix",
                "rotation",
                "spin",
                "beginners"
            ],
            "usePreview": 0,
            "username": "Dirk",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "\n\n    // Rotation 3D ( Quanternions for Beginners )\n    // by Dirk Stockton\n    \n\n    // USE THESE THREE FUNCTIONS...\n\n    vec4 quanternionMul(vec4 q1, vec4 q2) {\n        vec3 crossProduct = cross(q1.xyz, q2.xyz);\n        float dotProduct = dot(q1.xyz, q2.xyz);\n        return vec4(crossProduct + q1.w*q2.xyz + q2.w*q1.xyz, q1.w*q2.w - dotProduct);\n    }\n    \n    vec4 quanternionRot(vec3 axis, float angle) {\n        float halfAngle = angle * 0.5;\n        float s = sin(halfAngle);\n        return vec4(axis * s, cos(halfAngle));\n    }\n    \n    vec3 rotate3D(vec3 p, vec3 axis, float angle) {\n        vec4 quat = quanternionRot(normalize(axis), angle);\n        return quanternionMul(quanternionMul(quat, vec4(p, 0.0)), vec4(-quat.xyz, quat.w)).xyz;\n    }\n    \n    \n    // ...TO ROTATE THE POSITION OF AN OBJECT LIKE BOX()...\n    \n    float box( vec3 p, vec3 b ){\n        vec3 q = abs(p) - b;\n        return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n    }\n    \n    float map( vec3 p ){\n    \n        p = rotate3D( p, vec3(1, 1, 0), iTime ); // ...BY USING THIS LINE OF CODE :P \n        \n        //  rotate3D( p, axis, angle )\n        \n        //  p     = The position to be rotated\n        //  axis  = The Axis(xyz) to be rotated, 0=off 1=on\n        //  angle = The magnitude of the rotation\n        \n        float d = box(p,vec3(.25));\n        return d;\n    }\n    \n    //   Standard RayMarch   //\n    //                       //\n    //   | | | | | | | | |   //\n    //   v v v v v v v v v   //\n    \n    #define e vec2(0.0,0.001)\n    \n    vec3 calcNormal( vec3 p ){\n        return normalize( vec3( map(p+e.xyy)-map(p-e.xyy),\n                                map(p+e.yxy)-map(p-e.yxy),\n                                map(p+e.yyx)-map(p-e.yyx) ));\n    }\n    float castRay( vec3 ro, vec3 rd ){\n        float t = 0.;\n        for( int i=0; i<100; i++ ){\n            vec3 p = ro+rd*t;\n            float d = map(p);\n            if(abs(d)<e.y) break;\n            t+=d;\n            if(d>20.0) break;\n        }\n        if(t>20.0) t=-1.;\n        return t;\n    }\n    void mainImage( out vec4 O, in vec2 U ){\n        vec2  uv = (2.*U-iResolution.xy)/iResolution.y;\n        vec3  ro = vec3(0.,0.,1.5);\n        vec3  rd = normalize( vec3(uv,-1.5) );\n        float t = castRay(ro,rd);\n        vec3  col = vec3(0.);\n        if(t>0.0){\n            vec3  pos = ro+rd*t;\n            vec3  nor = calcNormal(pos);\n            vec3  dir = normalize(vec3(2.,1.,3.4));\n            float dif = dot(nor,dir);\n            col += dif;\n        }\n        col *= 1.3;\n        O = vec4(col,0.);\n    }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}