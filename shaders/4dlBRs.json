{
    "Shader": {
        "info": {
            "date": "1497701598",
            "description": "...",
            "flags": 0,
            "hasliked": 0,
            "id": "4dlBRs",
            "likes": 0,
            "name": "boxPass",
            "published": 3,
            "tags": [
                "box"
            ],
            "usePreview": 0,
            "username": "kekwizard",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 250\n#define MIN_DIST 0.0001\n#define NORMAL_SMOOTHNESS 0.02\n#define PI 3.14159265359\n\nfloat time = 0.;\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));   \n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvec3 opCheapBend( vec3 p )\n{\n    float c = cos(1.0*p.y);\n    float s = sin(1.0*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return q;\n}\n\nfloat Scene(vec3 position)\n{\n    vec3 orig = position;\n    vec3 c = vec3(10., 10., 20.0);\n    \n    position.x = mod(position.x, c.x) - 0.5 * c.x; // p.z -0.05 - 0.05\n    position.y = mod(position.y, c.y) - 0.5 * c.y; // p.z -0.05 - 0.05\n    position.z = mod(position.z, c.z) - 0.5 * c.z; // p.z -0.05 - 0.05\n\n    vec3 rpos = position;\n    mat2 ma = Rotate(time + pow((orig.z / c.z), 1.01) * sin(time) * 0.005);\n    rpos.xy *= ma;\n    //rpos.xz *= mb;\n    //rpos.yz *= mb;\n    \n    float bsize = 2.;\n    float bhole = bsize - 0.5;\n    float bextrude = bsize + 0.5;\n    \n    //position = opCheapBend(position);\n   \n    float boxB = sdBox(rpos, vec3(bsize));\n    float boxA = sdBox(rpos, vec3(bhole, bhole, bextrude));\n    float boxC = sdBox(rpos, vec3(bhole, bextrude, bhole));\n    float boxD = sdBox(rpos, vec3(bextrude, bhole, bhole));\n\n    \n    float cellX = mod(orig.x / c.x, 2.);\n    \n    \n\tfloat res = opS(boxA, boxB);//min(res, svalue);\n    res = opS(boxC, res);\n    res = opS(boxD, res);\n    \n    position.z = mod(orig.z + sign(cellX - 1.0) * time * 10.0, c.z * .75) - 0.5 * c.z;\n    \n    \n    res = min(sdSphere(position, 1.0), res);\n    \n    //position.x += (position.x / 17.0);\n    \n   // position.z += position.z * sin(time);\n    \n    float map = 1.0;//-Sphere(17.99, position);\n    \n    //float timeD = c.z * 0.5 + c.z * 0.5 * sin(iTime * .5);\n   // float threshold = 0.1;\n    //if( abs(timeD - position.y - c.z * 0.5) < threshold ) return .0;\n    \n    \n\n    \n    map = min(map, res);\n    return map;\n}\n\nvec3 cameraMovement(vec3 position) {\n\tposition.z = time * 4.0;\n    return position;\n}\n\nvec3 Normal(vec3 position)\n{\n\tvec3 offset = vec3(NORMAL_SMOOTHNESS, 0, 0);\n    \n    vec3 normal = vec3\n    (\n        Scene(position - offset.xyz) - Scene(position + offset.xyz),\n        Scene(position - offset.zxy) - Scene(position + offset.zxy),\n        Scene(position - offset.yzx) - Scene(position + offset.yzx)\n    );\n    \n    return normalize(normal);\n}\n\nvec4 RayMarch(vec3 origin,vec3 direction)\n{\n    \n\n    float hitDist = 0.0;\n    int iters = 1;\n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        iters++;\n        float sceneDist = Scene(origin + direction * hitDist);\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return vec4(origin + direction * hitDist, float(iters)/float(MAX_STEPS));\n}\n\nvoid steadyRotate(inout vec3 orig, inout vec3 dir) {\n\tmat2 ma = Rotate(time * 0.0015);\n    mat2 mb = Rotate(time * 0.005);\n    orig.xy *= ma;\n    dir.xy *= ma;\n    \n    orig.xz *= mb;\n    dir.xz *= mb;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = iTime * 0.8;\n        \n    vec2 aspect = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec3 rayOrigin = cameraMovement(vec3(0. , 0., 0.0));\n    vec3 rayDirection = normalize(vec3(uv - aspect / 2.0, 1.0));   \n    \n    //steadyRotate(rayDirection, rayOrigin);\n    vec4 scenePosition = RayMarch(rayOrigin, rayDirection);\n        \n    \n\tfragColor = vec4(vec3(1. - scenePosition.w), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}