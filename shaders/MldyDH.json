{
    "Shader": {
        "info": {
            "date": "1532518997",
            "description": "[url]https://svs.gsfc.nasa.gov/30082[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "MldyDH",
            "likes": 36,
            "name": "Day-Night Cycle",
            "published": 3,
            "tags": [
                "shadow",
                "earth",
                "planet",
                "night",
                "penumbra",
                "lights",
                "atmosphere",
                "day"
            ],
            "usePreview": 1,
            "username": "davidar",
            "viewed": 2325
        },
        "renderpass": [
            {
                "code": "#define SCALE 0.9\n\nvec4 textureSeamless(sampler2D s, vec2 uv) {\n    // avoid mipmap artifacts due to uv discontinuities\n    vec2 dx = min(abs(dFdx(uv)), abs(dFdx(fract(uv + 0.5))));\n    vec2 dy = min(abs(dFdy(uv)), abs(dFdy(fract(uv + 0.5))));\n    return textureGrad(s, uv, dx, dy);\n}\n\nfloat speckle(vec2 p, float density) {\n    float m = 0.;\n    for (float y = -1.; y <= 1.; y++) {\n        for (float x = -1.; x <= 1.; x++) {\n            vec2 q = floor(p) + vec2(x,y) + hash22(floor(p) + vec2(x,y));\n            //m += 1.5 * rexp(q) * exp(-2. * distance(p,q) / clamp(density, 0., 1.));\n            float a = 1.5 * rexp(q) * pow(1.5 * clamp(density, 0., 0.67), 1.5);\n            m += a * exp(-2.0 * distance(p,q) / clamp(density, 0.67, 1.));\n        }\n    }\n    return m;\n}\n\nvec3 map(vec3 p) {\n    float lat = 90. - acos(p.y / length(p)) * 180./PI;\n    float lon = atan(p.x, p.z) * 180./PI;\n    vec2 uv = vec2(lon/360., lat/180.) + 0.5;\n    vec3 c;\n    c.xy = textureSeamless(iChannel0, uv).xy;\n    c.x = max(c.x, 0.);\n    c.z = speckle(1000. * uv, c.y);\n    c.z *= 0.5 * FBM(vec3(50. * uv, iTime));\n    return c;\n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(1,0)/1e3;\n    p += 0.04 * vec3(\n        map(p + e.xyy).x - map(p - e.xyy).x,\n        map(p + e.yxy).x - map(p - e.yxy).x,\n        map(p + e.yyx).x - map(p - e.yyx).x)/ (2. * length(e));\n\treturn normalize(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n    float lat = 15. * sin(0.1 * iTime);\n    float lon = -5. * iTime;\n    if (iMouse.z > 0.) {\n        lat = 90.  - 180. * iMouse.y/iResolution.y;\n        lon = 180. - 360. * iMouse.x/iResolution.x;\n    }\n    vec3 camPos = 10. * fromlatlon(lat, lon);\n    vec3 w = normalize(-camPos);\n    vec3 u = normalize(cross(w, vec3(0,1,0)));\n    vec3 v = normalize(cross(u, w));\n    mat3 camera = mat3(u, v, w);\n    \n    vec3 sun = fromlatlon(23.5 * sin(2.*PI * iTime/60.), -360. * iTime/15.);\n    vec3 dir = normalize(camera * vec3(p / SCALE, length(camPos)));\n\t\t\t  \n\tvec2 e = ray_vs_sphere(camPos, dir, R_INNER + ATMOSPHERE_THICKNESS);\n\tif (e.x > e.y) return;\n\t\n\tvec2 f = ray_vs_sphere(camPos, dir, R_INNER);\n\te.y = min(e.y, f.x);\n    float dist = f.x;\n    \n    fragColor = vec4(0,0,0,1);\n    if (f.x < f.y) {\n        vec3 q = camPos + dir * dist;\n        vec3 c = map(q);\n        float height = c.x;\n        float density = c.y;\n        float cities = c.z;\n        float light = dot(normal(q), sun);\n        float specular = pow(clamp(dot(normalize(sun - dir), q), 0., 1.), 64.);\n        vec3 day = vec3(0.06, 0.05, 0.2);\n        vec3 night = vec3(0.00, 0.00, 0.01);\n        if (height > 0.) {\n            day = mix(vec3(0.16, 0.23, 0.09), vec3(0.56, 0.49, 0.28), smoothstep(0., 0.5, height));\n            night = vec3(0.00, 0.00, 0.02);\n            night *= 1. + 1.5 * clamp(FBM(50. * q) - 0.15, 0., 1.);\n            night = mix(night, 0.75 * sqrt(density) * vec3(0.95, 0.76, 0.47),\n                        smoothstep(0., 1., cities) * dot(normalize(camPos), q));\n            night = clamp(night, 0., 1.);\n        } else {\n            day += 0.25 * specular * vec3(0.87, 0.75, 0.);\n        }\n        fragColor.rgb = mix(night, day * light, smoothstep(-0.1, 0.1, light));\n    }\n\n\tfragColor.rgb += in_scatter(camPos, dir, e, sun);\n    \n    fragColor.rgb = pow(fragColor.rgb, vec3(1./2.2));\n}\n\t\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ATMOSPHERE_THICKNESS 0.2\n\n#define PI 3.14159265359\n\n#define N vec2( 0, 1)\n#define E vec2( 1, 0)\n#define S vec2( 0,-1)\n#define W vec2(-1, 0)\n\n#define rexp(p) (-log(1e-4 + (1. - 2e-4) * hash12(p)))\n\nvec3 fromlatlon(float lat, float lon) {\n    return vec3(sin(lon*PI/180.) * cos(lat*PI/180.), sin(lat*PI/180.), cos(lon*PI/180.) * cos(lat*PI/180.));\n}\n\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n// https://www.shadertoy.com/view/4djSRW\n// Trying to find a Hash function that is the same on ALL systens\n// and doesn't rely on trigonometry functions that change accuracy \n// depending on GPU. \n// New one on the left, sine function on the right.\n// It appears to be the same speed, but I suppose that depends.\n\n// * Note. It still goes wrong eventually!\n// * Try full-screen paused to see details.\n\n\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n//#define HASHSCALE1 443.8975\n//#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n//#define HASHSCALE4 vec3(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n        vec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n        vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n        p3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n        vec3 p3 = fract(vec3(p) * HASHSCALE3);\n        p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n        vec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n        vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n        vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n        p4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n\n// By David Hoskins, May 2014. @ https://www.shadertoy.com/view/4dsXWn\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n        vec3 f = fract(p); \n        f *= f * (3.0-2.0*f);\n\n    return mix(\n                mix(mix(hash13(i + vec3(0.,0.,0.)), hash13(i + vec3(1.,0.,0.)),f.x),\n                        mix(hash13(i + vec3(0.,1.,0.)), hash13(i + vec3(1.,1.,0.)),f.x),\n                        f.y),\n                mix(mix(hash13(i + vec3(0.,0.,1.)), hash13(i + vec3(1.,0.,1.)),f.x),\n                        mix(hash13(i + vec3(0.,1.,1.)), hash13(i + vec3(1.,1.,1.)),f.x),\n                        f.y),\n                f.z);\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 ) * 1.7;\n\nfloat FBM( vec3 p )\n{\n    float f;\n\n        f = 0.5000 * Noise(p); p = m*p;\n        f += 0.2500 * Noise(p); p = m*p;\n        f += 0.1250 * Noise(p); p = m*p;\n        f += 0.0625   * Noise(p); p = m*p;\n        f += 0.03125  * Noise(p); p = m*p;\n        f += 0.015625 * Noise(p);\n    return f;\n}\n\n\n// Written by GLtracy\n// https://www.shadertoy.com/view/lslXDr\n\n// ray intersects sphere\n// e = -b +/- sqrt( b^2 - c )\nvec2 ray_vs_sphere( vec3 p, vec3 dir, float r ) {\n\tfloat b = dot( p, dir );\n\tfloat c = dot( p, p ) - r * r;\n\t\n\tfloat d = b * b - c;\n\tif ( d < 0.0 ) {\n\t\treturn vec2( 1e4, -1e4 );\n\t}\n\td = sqrt( d );\n\t\n\treturn vec2( -b - d, -b + d );\n}\n\n// Mie\n// g : ( -0.75, -0.999 )\n//      3 * ( 1 - g^2 )               1 + c^2\n// F = ----------------- * -------------------------------\n//      8pi * ( 2 + g^2 )     ( 1 + g^2 - 2 * g * c )^(3/2)\nfloat phase_mie( float g, float c, float cc ) {\n\tfloat gg = g * g;\n\t\n\tfloat a = ( 1.0 - gg ) * ( 1.0 + cc );\n\n\tfloat b = 1.0 + gg - 2.0 * g * c;\n\tb *= sqrt( b );\n\tb *= 2.0 + gg;\t\n\t\n\treturn ( 3.0 / 8.0 / PI ) * a / b;\n}\n\n// Rayleigh\n// g : 0\n// F = 3/16PI * ( 1 + c^2 )\nfloat phase_ray( float cc ) {\n\treturn ( 3.0 / 16.0 / PI ) * ( 1.0 + cc );\n}\n\n// scatter const\nconst float R_INNER = 1.0;\n//const float R = R_INNER + 0.5;\n\nconst int NUM_OUT_SCATTER = 8;\nconst int NUM_IN_SCATTER = 80;\n\nfloat density( vec3 p, float ph ) {\n\treturn exp( -max( length( p ) - R_INNER, 0.0 ) / ATMOSPHERE_THICKNESS / ph );\n}\n\nfloat optic( vec3 p, vec3 q, float ph ) {\n\tvec3 s = ( q - p ) / float( NUM_OUT_SCATTER );\n\tvec3 v = p + s * 0.5;\n\t\n\tfloat sum = 0.0;\n\tfor ( int i = 0; i < NUM_OUT_SCATTER; i++ ) {\n\t\tsum += density( v, ph );\n\t\tv += s;\n\t}\n\tsum *= length( s );\n\t\n\treturn sum;\n}\n\nvec3 in_scatter( vec3 o, vec3 dir, vec2 e, vec3 l ) {\n\tconst float ph_ray = 0.05;\n    const float ph_mie = 0.02;\n    \n    const vec3 k_ray = vec3( 3.8, 13.5, 33.1 );\n    const vec3 k_mie = vec3( 21.0 );\n    const float k_mie_ex = 1.1;\n    \n\tvec3 sum_ray = vec3( 0.0 );\n    vec3 sum_mie = vec3( 0.0 );\n    \n    float n_ray0 = 0.0;\n    float n_mie0 = 0.0;\n    \n\tfloat len = ( e.y - e.x ) / float( NUM_IN_SCATTER );\n    vec3 s = dir * len;\n\tvec3 v = o + dir * ( e.x + len * 0.5 );\n    \n    for ( int i = 0; i < NUM_IN_SCATTER; i++, v += s ) {   \n\t\tfloat d_ray = density( v, ph_ray ) * len;\n        float d_mie = density( v, ph_mie ) * len;\n        \n        n_ray0 += d_ray;\n        n_mie0 += d_mie;\n        \n#if 0\n        vec2 e = ray_vs_sphere( v, l, R_INNER );\n        e.x = max( e.x, 0.0 );\n        if ( e.x < e.y ) {\n           continue;\n        }\n#endif\n        \n        vec2 f = ray_vs_sphere( v, l, R_INNER + ATMOSPHERE_THICKNESS );\n\t\tvec3 u = v + l * f.y;\n        \n        float n_ray1 = optic( v, u, ph_ray );\n        float n_mie1 = optic( v, u, ph_mie );\n\t\t\n        vec3 att = exp( - ( n_ray0 + n_ray1 ) * k_ray - ( n_mie0 + n_mie1 ) * k_mie * k_mie_ex );\n        \n\t\tsum_ray += d_ray * att;\n        sum_mie += d_mie * att;\n\t}\n\t\n\tfloat c  = dot( dir, -l );\n\tfloat cc = c * c;\n    vec3 scatter =\n        sum_ray * k_ray * phase_ray( cc ) +\n     \tsum_mie * k_mie * phase_mie( -0.78, c, cc );\n    \n\t\n\treturn 10.0 * scatter;\n}\n\n// angle : pitch, yaw\nmat3 rot3xy( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\n// ray direction\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( radians( 90.0 - fov * 0.5 ) );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\t\n\treturn normalize( vec3( xy, -z ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float line(vec2 a, vec2 b, vec2 p, float width) {\n    // https://iquilezles.org/articles/distfunctions\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n    float d = length(pa - ba * h);\n    float x = distance(p,a) / (distance(p,a) + distance(p,b));\n    return 1.5 * mix(rexp(a), rexp(b), x) * smoothstep(width/2., 0., d) * smoothstep(1.75, 0.5, distance(a,b));\n}\n\nfloat network(vec2 p, float width) {\n    // based on https://www.shadertoy.com/view/lscczl\n    vec2 c = floor(p) + hash22(floor(p));\n    vec2 n = floor(p) + N + hash22(floor(p) + N);\n    vec2 e = floor(p) + E + hash22(floor(p) + E);\n    vec2 s = floor(p) + S + hash22(floor(p) + S);\n    vec2 w = floor(p) + W + hash22(floor(p) + W);\n    \n    float m = 0.;\n    m += line(n, e, p, width);\n\tm += line(e, s, p, width);\n    m += line(s, w, p, width);\n    m += line(w, n, p, width);\n   \n    for (float y = -1.; y <= 1.; y++) {\n        for (float x = -1.; x <= 1.; x++) {\n            vec2 q = floor(p) + vec2(x,y) + hash22(floor(p) + vec2(x,y));\n            float intensity = distance(p,q) / clamp(rexp(floor(p) + vec2(x,y)), 0., 1.);\n            m += line(c, q, p, width);\n            m += 10. * exp(-40. * intensity);\n        }\n    }\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (iFrame > 10) {\n        fragColor = textureLod(iChannel0, fragCoord/iResolution.xy, 0.);\n        if (fragColor.zw == iResolution.xy) return;\n    }\n    \n    float lat = 180. * fragCoord.y/iResolution.y - 90.;\n    float lon = 360. * fragCoord.x/iResolution.x;\n    vec3 p = fromlatlon(lat, lon);\n    \n    vec2 uv = fragCoord / iResolution.y + 1.;\n    vec2 wiggle = vec2(FBM(vec3(50. * uv, 1)), FBM(vec3(50. * uv, 2))) - 0.5;\n    \n    float height = FBM(3. * p) - 0.5;\n    fragColor.x = height;\n    if (height < 0.) {\n        fragColor.y = 0.;\n    } else {\n        float d = 0.75;\n        float width = 3e-3;\n        d += 0.5 * network(100. * uv + 1.0 * wiggle, 100. * width);\n        d += 1.0 * network( 30. * uv + 0.3 * wiggle,  30. * width);\n        d += 2.0 * network( 10. * uv + 0.1 * wiggle,  10. * width);\n        d += smoothstep(0.1, 0., height); // coast\n        d *= 0.1 + clamp(2. * FBM(12. * p) - 0.5, 0., 1.);\n        d *= 0.2 + 1.3 * clamp(2. * FBM(1.5 * p) - 0.67, 0., 1.);\n        fragColor.y = d;\n    }\n    \n    fragColor.zw = iResolution.xy;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}