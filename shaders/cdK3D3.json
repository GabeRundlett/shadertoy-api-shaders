{
    "Shader": {
        "info": {
            "date": "1679130390",
            "description": "Mirror Room is one of my favorite shaders.\nI'm trying to make this shader under 500 characters.\nFeel free to cheat ... as long as the shader becomes smaller with multiple reflections.\nThanks for your help.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdK3D3",
            "likes": 9,
            "name": "Golfing Mirror Room - 537 chars",
            "published": 3,
            "tags": [
                "raytracing",
                "golf"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "// The original Mirror Room by DiLemming is 1911 chars:\n// https://www.shadertoy.com/view/4sS3zc\n\n// 537 chars - Fabrice continues to do the IMPOSSIBLE!!\n#define v vec3//\n#define B  if ( k > 0. && k < t ) t = k, p = P + t*D, n =  //\n#define P(v,f)                                              \\\n    b = dot(v,D),                                           \\\n    k = ( f - dot(v,P) ) / b;                               \\\n    B   -v*sign(b);                                        //\n#define S(v)                                                \\\n    k = dot(D,D), b = dot(D, P-v),                          \\\n    k = ( -sqrt( b * b - k * dot(P-v, P-v) + k ) - b ) / k; \\\n    B   p - v;\n\nvoid mainImage( out vec4 o, vec2 u ) {\n    float k,b, t, l = 0., T = iTime;\n\tvec3 R = iResolution, p,n,         // t, p,n = current hit point\n         V = v (0,1,0),\n\t     P = v (sin(T*.5),2,-4),     // l, P,D = current ray\n         D = normalize( v ( u+u, R) - R  );\n\t\n\tfor ( o *= l; o.a++ < 9.;\n          P = p + n/1e4, D = reflect (normalize(D), n) // bounces iterations\n        ) {\n        t = 1e9;\n        P( v ( 1,.1, 0), 3.)        // test 6 planes\n        P( v ( 1,.4, 0),-2.)\n        P( V    ,    )\n        P( V    ,  5.)\n        P( V.xxy,  5.)\n        P( V.yxy, -6.)\n        S( v (-1, 2.2 + sin(T), 0)) // test 2 spheres\n        S( v ( 1, 1, 2)    )\n\t\tl += t;\n\t\tb = dot (n, D) / l;            // shading\n\t\to = (o + b*b) * (1. - n*n/.1/l/l).rgbb;\n\t}\n\to /= .1;   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}