{
    "Shader": {
        "info": {
            "date": "1520855406",
            "description": "Merging, reflecting droplets moving slowly",
            "flags": 0,
            "hasliked": 0,
            "id": "XsKcRz",
            "likes": 4,
            "name": "Slow Drops",
            "published": 3,
            "tags": [
                "reflection",
                "gravity",
                "droplet",
                "coalescence"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 600
        },
        "renderpass": [
            {
                "code": "// \"Slow Drops\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_SPHR 8\n\nvec3 sunDir, vnCylOut;\nfloat htSphr[N_SPHR], rSphr[N_SPHR], dstFar, tCur, tCyc, sFac, rHole, bCylRad, bCylHt, dCylOut;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvoid SphrSetup ()\n{\n  float t, s, g, h0, v0, hMax;\n  tCyc = 10.;\n  t = mod (tCur, tCyc);\n  sFac = (t < 0.5 * tCyc) ? 0.3 : 0.1;\n  rHole = 0.01 + 0.3 * SmoothBump (0.45, 0.55, 0.05, mod (t / tCyc + 0.5, 1.));\n  h0 = -5.1;\n  for (int k = 0; k < N_SPHR; k ++) {\n    s = float (k) + 2.;\n    hMax = - h0 + 0.5 * pow (s, 1.5);\n    g = 8. * hMax / (tCyc * tCyc);\n    v0 = sqrt (2. * g * hMax); \n    htSphr[k] = 0.4 * (h0 + v0 * t - 0.5 * g * t * t);\n    rSphr[k] = 0.4 * (0.2 + 0.03 * pow (s, 1.5));\n  }\n}\n  \nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  p.y -= - (bCylHt - 1.75);\n  q = p;  q.y -= 0.2;\n  d = PrCylDf (q.xzy, 3., 0.2);\n  q = p;\n  d = - SmoothMin (- d, PrSphDf (q - vec3 (0., 0.18, 0.), rHole), 0.5 * rHole);\n  for (int k = 0; k < N_SPHR; k ++) {\n    q = p;  q.y -= htSphr[k];\n    d = SmoothMin (d, PrSphDf (q, rSphr[k]), sFac * rSphr[k]);\n  }\n  DMIN (1);\n  q = p;  q.y -= 0.22;\n  d = PrRoundBox2Df (vec2 (length (q.xz) - 3.1, q.y), vec2 (0.1, 0.22), 0.03);\n  DMIN (2);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvoid InCylHit (vec3 ro, vec3 rd)\n{\n  vec3 s;\n  float a, b, w, ws, srdy;\n  dCylOut = dstFar;\n  vnCylOut = vec3 (0.);\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - bCylRad * bCylRad);\n  if (w > 0.) {\n    ws = sqrt (w);\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      dCylOut = (- b + ws) / a;\n      s = ro + dCylOut * rd;\n    } else s.y = bCylHt;\n    if (abs (s.y) < bCylHt) vnCylOut.xz = - s.xz / bCylRad;\n    else {\n      dCylOut = (- srdy * ro.y + bCylHt) / abs (rd.y);\n      vnCylOut.y = - srdy;\n    }\n  }\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  rd.y = abs (rd.y) + 0.001;\n  return mix (vec3 (0.2, 0.3, 0.65) + 0.2 * pow (max (dot (rd, sunDir), 0.), 256.),\n     vec3 (0.8), clamp (3. * (Fbm2 (0.02 * (rd.xz * (100. - ro.y) / rd.y + ro.xz + tCur)) -\n     0.4) * rd.y + 0.2, 0., 1.));\n}\n\nvec3 ShStagGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.5 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.3, 3. * h);\n    if (sh < 0.001) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, rg;\n  vec2 qw;\n  float hy, hhy, hw, ww, f, b, aa, sRotH, sRotV, r, s, sh;\n  InCylHit (ro + vec3 (0., - bCylHt + 1.25, 0.), rd);\n  if (vnCylOut.y == 0.) {\n    ro += dCylOut * rd;\n    vn = vnCylOut;\n    hy = (ro.y - 1.75) / bCylHt;\n    hhy = abs (hy) - 0.43;\n    aa = atan (vn.x, - vn.z) / pi;\n    sRotH = mod (64. * 0.5 * (1. + aa) + 0.5, 1.) - 0.5;\n    hw = 0.29;\n    ww = 0.28;\n    qw = abs (vec2 (sRotH, hhy));\n    if (qw.x < ww && qw.y < hw) {\n      qw = abs (qw - 0.5 * vec2 (ww, hw)) - vec2 (0.44 * ww, 0.47 * hw);\n      if (max (qw.x, qw.y) < 0.) col = 0.7 * SkyCol (ro, reflect (rd, vn));\n      else col = vec3 (0.5, 0.5, 0.4) * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n         0.5 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 128.);\n    } else {\n      col = vec3 (0.7, 0.72, 0.6);\n      qw -= vec2 (ww, hw);\n      if (abs (hy) > (1. - 0.85/16.) || max (qw.x, qw.y) < 0.02) {\n        col *= 0.9;\n        vn.xz = Rot2D (vn.xz, - pi * aa);\n        if (abs (hy) > (1. - 0.85/16.)) {\n          sRotV = (1. - abs (2. * SmoothBump (1. - 0.9/16., 0.97, 0.03, abs (hy)) - 1.));\n        } else {\n          sRotV = (1. - abs (2. * SmoothBump (hw, hw + 0.02, 0.02, abs (hhy)) - 1.)) * sign (hhy);\n          vn.xz = Rot2D (vn.xz, 0.4 * pi * sign (sRotH) *\n             (1. - abs (2. * SmoothBump (- (ww + 0.02), ww + 0.02, 0.04, sRotH) - 1.)));\n        }\n        vn.yz = Rot2D (vn.yz, -0.2 * pi * sRotV * sign (hy));\n        vn.xz = Rot2D (vn.xz, pi * aa);\n      } else {\n        qw = 16. * vec2 (12. * aa, hy);\n        rg = ShStagGrid (qw);\n        col *= rg.y * (1. - 0.3 * Noisefv2 (8. * qw));\n        rg.xz *= sign ((abs (vn.x) > 0.5) ? vn.x : vn.z);\n        if (abs (vn.x) > 0.5) {\n          if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n          else vn.xz = Rot2D (vn.xz, rg.x);\n        } else {\n          if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n          else vn.zx = Rot2D (vn.zx, rg.x);\n        }\n      }\n      col = col * (0.4 + 0.6 * max (dot (vn, sunDir), 0.)) +\n         0.1 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n    }\n  } else if (vnCylOut.y > 0.) {\n    ro += dCylOut * rd;\n    r = length (ro.xz);\n    vn = vec3 (0., 1., 0.);\n    if (r < 1.) col = SkyCol (ro, reflect (rd, vn));\n    else {\n      b = 1. - smoothstep (-0.1, -0.01, rd.y) * smoothstep (0.4, 0.8, dCylOut / (1.6 * bCylRad));\n      col = vec3 (0.75, 0.72, 0.72);\n      s = b * SmoothBump (0.45, 0.55, 0.04, mod (2. * r, 1.));\n      col *= 1. - 0.05 * s;\n      vn.y = 1. - 0.05 * s;\n      vn.xz = - sign (s) * sqrt (1. - vn.y * vn.y) * ro.xz / r;\n      col *= (1. - 0.2 * b * Noisefv2 (128. * ro.xz));\n      sh = ObjSShadow (ro, sunDir);\n      col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         0.1 * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n    }\n  } else col = SkyCol (ro, rd);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, cRefl;\n  float dstObj, s, r, sh;\n  dstObj = ObjRay (ro, rd);\n  cRefl = vec3 (1.);\n  if (dstObj < dstFar && idObj == 1) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (ro.y < 0.41 - (bCylHt - 1.75)) {\n      r = length (ro.xz);\n      s = 0.001 * sin (2. * pi * (4. * r - 0.5 * tCur)) / (r * r);\n      vn.y = 1. - abs (s);\n      vn.xz = - sign (s) * sqrt (1. - vn.y * vn.y) * ro.xz / r;\n      vn = VaryNf (8. * ro + 0.2 * tCur * vec3 (0., 0., 1.), vn, 0.05);\n    } else cRefl *= vec3 (1., 0.95, 1.);\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar && idObj == 1) {\n    cRefl *= vec3 (1., 0.95, 1.);\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) col = SkyCol (ro, reflect (rd, vn));\n    else if (idObj == 2) {\n      col = vec3 (0.6, 0.5, 0.5) * (1. - 0.2 * SmoothBump (0.45, 0.55, 0.03,\n         mod (32. * atan (ro.z, - ro.x) / pi, 1.)));\n      vn = VaryNf (32. * ro, vn, 1.);\n      sh = ObjSShadow (ro, sunDir);\n      col *= 0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.);\n    }\n  } else {\n    col = BgCol (ro, rd);\n  }\n  col *= cRefl;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd;\n  vec2 canvas, uv;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  SphrSetup ();\n  bCylRad = 16.;\n  bCylHt = 3.;\n  ro = vec3 (0.2, 6., -12.);\n  vd = normalize (vec3 (0., max (0.4 * htSphr[N_SPHR - 1], -0.2), 0.) - ro);\n  vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  rd = vuMat * normalize (vec3 (uv, 4.5));\n  dstFar = 50.;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}