{
    "Shader": {
        "info": {
            "date": "1557055290",
            "description": "Stars... (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "3lf3zX",
            "likes": 10,
            "name": "Star Globe",
            "published": 3,
            "tags": [
                "fbm",
                "stars"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "// \"Star Globe\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar;\nint idObj;\nconst float pi = 3.14159;\n\nfloat BallHit (vec3 ro, vec3 rd, vec3 p, float s)\n{\n  vec3 v;\n  float b, d;\n  v = ro - p;\n  b = dot (rd, v);\n  d = b * b + s * s - dot (v, v);\n  return (d > 0.) ? - b - sqrt (d) : dstFar;\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  q.xy = Rot2D (q.xy, pi / 6.);\n  d = PrCylDf (q.xzy, 0.05, 1.18);\n  DMINQ (1);\n  d = max (min (PrCylAnDf (q, 1.1, 0.05, 0.025), PrCylAnDf (q, 1.16, 0.01, 0.04)), - q.x);\n  DMINQ (2);\n  q = p;\n  q.y -= -1.17;\n  d = PrCylDf (q.xzy, 0.7, 0.02);\n  DMINQ (3);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 531.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 571.13 * scl * q.yx));\n  return 8. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, sd;\n  float dstBall, dstObj, nDotL, tCyc, t, aRot;\n  dstBall = BallHit (ro, rd, vec3 (0.), 1.);\n  dstObj = ObjRay (ro, rd);\n  if (dstBall < min (dstObj, dstFar)) {\n    ro += dstBall * rd;\n    vn = normalize (ro);\n    nDotL = max (dot (vn, ltDir), 0.);\n    sd = vn;\n    sd.xy = Rot2D (sd.xy, pi / 6.);\n    col = vec3 (0.1, 0.1, 0.15);\n    if (abs (sd.y) > 0.997) {\n      col = vec3 (0.7, 0.6, 0.1);\n      nDotL *= nDotL;\n    }\n    col = col * (0.2 + 0.8 * nDotL) + 0.05 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    if (abs (sd.y) < 0.997) {\n      tCyc = 10.;\n      t = 2. * pi * tCur / tCyc;\n      aRot = 0.02 * tCyc * t + 0.5 * (t - sin (t));\n      sd.xz = Rot2D (sd.xz, aRot);\n      col += 4. * StarPat (sd, 1.) * smoothstep (0.05, 0.4, max (- dot (rd, vn), 0.));\n    }\n  } else if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col = vec3 (0.7, 0.6, 0.1);\n    } else if (idObj == 2) {\n      col = vec3 (0.9, 0.8, 0.4) * (1. - 0.5 * step (abs (length (qHit.xy) - 1.1), 0.043) *\n         SmoothBump (0.45, 0.55, 0.02, mod (60. * atan (qHit.y, - qHit.x) / pi, 1.)));\n    } else if (idObj == 3) {\n      col = vec3 (0.6, 0.6, 0.65);\n      if (vn.y > 0.99) col *= (1. - 0.1 * smoothstep (0.4, 0.5, Fbm2 (4. * qHit.xz * vec2 (1., 8.)))) *\n         (0.7 + 0.3 * smoothstep (0., 0.1, max (abs (qHit.x) - 0.35, abs (qHit.z) - 0.02))) *\n         (1. - step (abs (length (qHit.xz) - 0.6), 0.05) *\n         0.6 * SmoothBump (0.46, 0.54, 0.02, mod (15. * atan (qHit.z, - qHit.x) / pi + 0.5, 1.)));\n    }\n    if (idObj > 1) vn = VaryNf (128. * qHit, vn, 1.);\n    nDotL = max (dot (vn, ltDir), 0.);\n    col = col * (0.2 + 0.8 * nDotL * nDotL) +\n       0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else {\n    col = StarPat (rd, 4.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., -0.1, -8.);\n  dstFar = 50.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 6.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}