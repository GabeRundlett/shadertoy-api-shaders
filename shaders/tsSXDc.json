{
    "Shader": {
        "info": {
            "date": "1555098334",
            "description": "simplif. Rayleigh scattering of coherent plane wave on on random particles (green)\nTop: random phases\nMiddle: particle spread << wavelength,  thus coherent (all ~ in phase). -> interference rebuilt the plane wave.\nBottom: particle spread >>\nRed: ref wave.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsSXDc",
            "likes": 8,
            "name": "coherent Rayleigh",
            "published": 3,
            "tags": [
                "refraction",
                "rayleigh",
                "interferences",
                "huygens"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 650
        },
        "renderpass": [
            {
                "code": "#define N 800.      // number of random partics\n#define k 400.      // plane sine wave (kx) propag from left to right\n#define W1 .001     // dielectric material width middle\n#define W2 .5       // dielectric material width bottom\n#define Lcoher 0*15 // coherence length. 0: coherent source (laser)\n\n#define rnd2(p) fract(sin((p)*mat2(127.1,311.7,269.5,183.3))*43758.5453123)\n#define rnd(p)  fract(sin((p)* 78.233) * 43758.5453)\n#define srnd(p) ( 2.*rnd(p) - 1. )\n#define K(x)    smoothstep(1.,0.,abs(x))  // photon kernel (incoherent source)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U /= R.y;\n    \n    float v = 0., phi, a=1.,l,\n          W = U.y < .35 ? W2 : W1;\n    \n    for (float i=0.; i<N; i++) {\n        vec2 P = .5+vec2(W,1)*(2.*rnd2(vec2(i))-1.);// random partic\n     // P.y = fract(.5*P.y-U.y+.5)+U.y-.5;          // sliding window for continuity\n        l = length(U-P);\n     // a = max(0.,(U-P).x/l);                      // (scattering function)\n        phi = k*( a*l + P.x );                      // phase left -> P -> U\n        if(U.y>.66) phi += 6.28*rnd2(P).x;          // top: incoherent phases\n#if Lcoher > 0                                      //  incoherent source\n      float x = phi/float(Lcoher),\n         iphi = floor(x) , f = fract(x);\n      phi += 3.14*( K(f) * srnd(iphi) + K(1.-f) * srnd(iphi+1.) ); // random phase per photon\n#endif        \n        v += sin(phi - 10.*iTime) /l; // (l*l)      // diffracted wave\n    }\n    O = vec4(.5+.5*v*.3/sqrt(N));\n    \n    if (abs(U.x-.5) < W/2.+2./R.x) O.g = .7;        // dielectric width\n    if (U.y<.05) O = vec4(.5+.5*sin(k*U.x - 10.*iTime),0,0,1); // ref without material\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}