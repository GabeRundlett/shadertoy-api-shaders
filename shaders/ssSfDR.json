{
    "Shader": {
        "info": {
            "date": "1645987236",
            "description": "Mix of stuff, mainly Art of code + IQ articles. Not really gyroid, but gyroid sdf is base for displacement terrain",
            "flags": 0,
            "hasliked": 0,
            "id": "ssSfDR",
            "likes": 4,
            "name": "大龙猫 - Gyroid Terrain",
            "published": 3,
            "tags": [
                "terrain",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n\n\nfloat gyros(vec3 p) {\n  \n    return (dot(sin(p),cos(p.yxz)));\n  }\n  float di(vec3 p){\n    \n      float q=0.;\n      vec4 pp = vec4(p,1.);\n      for(float i=0.;i<8.;i++){\n        q = q+clamp(asin(sin(gyros(pp.xyz)/pp.a)*.9),0.,.5);\n         pp*=1.75;\n         pp.xyz =abs(pp.xyz)-10.9125;\n         pp.xz*=rot(.785);\n\n\n        }\n        return q;\n    }\n float diff=0.;\nvec2 sdf(vec3 p){\n   p.xy*=rot(p.z*.1);\n   p.y = -(abs(p.y)-1.);\n  vec2 h;\n\n  vec3 op = p;\n   p.z +=iTime;\n\n  h.x = p.y+1.+(diff=(di(p)*.3));\n  h.y= 1.;\n  h.x *=.7;\n  return h;\n  } \n  \n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p,float ee){vec2 e=vec2(-ee,ee);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.0,.3,.7)));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(.1);\n\n  vec3 ro  = vec3(0.,-.9,-5.)+1e-5;\n;\n  vec3 rt  = vec3(0.,-.950,.0)+1e-5;\n  vec3 z   = normalize(rt-ro);\n  vec3 x   = normalize(cross(z,vec3(0.,-1.,0.)));\n  vec3 y   = normalize(cross(z,x));\n  \n  vec3 rp = ro;\n  vec3 rd = mat3(x,y,z)*normalize(vec3(uv,1.));\n  \n  vec3 light = vec3(0.,1.,-3.)+1e-4;\n  float dd = 0.;\n  for(float i=0.;i<128.;i++){\n      vec2 d = sdf(rp);\n      dd+=d.x;\n      rp+=rd*d.x;\n    if(dd> 50.) break;\n      if(d.x < .0001) {\n           vec3 n = norm(rp,.0005);\n        vec3 n2 = norm(rp,.002);\n           float dif = max(0.,dot(normalize(light-rp),n));\n        float spc = pow(max(0.,dot(normalize(ro-rp),reflect(-normalize(light-rp),n))),4.);\n           col = dif*vec3(.2)+spc*pal(dot(rp,n)*.1);\n            \n           break;\n      }\n   \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}