{
    "Shader": {
        "info": {
            "date": "1697161743",
            "description": "this",
            "flags": 32,
            "hasliked": 0,
            "id": "ddcfDN",
            "likes": 0,
            "name": "magma 2368",
            "published": 3,
            "tags": [
                "2d",
                "noise"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 54
        },
        "renderpass": [
            {
                "code": "//based on\n//https://shop-us.kurzgesagt.org/collections/new-stuff/products/cosmic-web-poster?variant=40612030119984\n\nvec4 bokeh(sampler2D sampler, ivec2 uv, int r){\n    vec4 col = vec4(0);\n    float maxbright = 0.0;\n    for (int x = -r; x <= r; x++){\n        for (int y = -r; y <= r; y++){\n            if (x*x + y*y < r*r){\n                vec4 newcol = texture(sampler,(vec2(uv)+vec2(x,y))/iResolution.xy);\n                float w = dot(newcol.rgb,newcol.rgb);\n                if (w > maxbright){\n                    col = newcol;\n                    maxbright = w;\n                }\n            }\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = bokeh(iChannel0,ivec2(fragCoord),5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//based on\n//https://shop-us.kurzgesagt.org/collections/new-stuff/products/cosmic-web-poster?variant=40612030119984\n\n//blackbody by fishy: https://www.shadertoy.com/view/DtX3W8\n#define responseCurve(w, p, v) sin(6.28318530718*clamp((v-p)/w + 0.5,0.0,1.0) - 1.57079632679)*0.5+0.5\nvec3 getBlackbodyColor(float t)\n{\n    vec3 col = vec3(0), m = vec3(0);\n    for(float v = 400.; v < 700.; v += 75.)\n    {\n        vec3 r = vec3(responseCurve(100., 440., v),\n                      responseCurve(200., 550., v),\n                      responseCurve(200., 600., v));\n        m += r;\n        col += 2.*v*v*v*(1./(exp(v/t) - 1.))*r;\n    }\n    return col/m;\n}\n\n//random functions from Dave Hoskins: //https://www.shadertoy.com/view/4djSRW\n//  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nvec2 voronoicell(vec2 uv){\n    float n = 999.0;\n    vec2 cell = vec2(0);\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            vec2 cellpos = floor(uv) + vec2(x,y) + hash22(floor(uv) + vec2(x,y));\n            float d = distance(cellpos,uv);\n            if (d < n){\n                n = d;\n                cell = cellpos;\n            }\n        }\n    }\n    return cell;\n}\n\nfloat voronoi3dedges(vec3 uv){\n    float d1 = 999.0;\n    float d2 = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                float d = distance(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv);\n                if (d < d1) {\n                    d2 = d1;\n                    d1 = d;\n                } else if (d < d2){\n                    d2 = d;\n                }\n            }\n        }\n    }\n    return (abs(d1-d2) + 1.0 - d1)/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*128.0;\n    vec2 cell = voronoicell(uv)/16.0;\n    \n    float rand = 0.1*voronoi3dedges(vec3(cell*5.0,10));\n    float cracks = voronoi3dedges(vec3(cell,0));\n    float lines = voronoi3dedges(vec3(cell,10));\n    float temp = 30.0 - cracks*30.0 - rand*40.0;\n\n    // Time varying pixel color\n    vec3 base = mix(vec3(0.3,0.2,0.4),vec3(0.1,0.1,0.2),smoothstep(0.0,0.3,lines + rand));\n    vec3 col = mix(base,getBlackbodyColor(temp)+vec3(0.1,0.1,0.2),smoothstep(0.0,1.0,(temp-20.0)*0.25));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}