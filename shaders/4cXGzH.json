{
    "Shader": {
        "info": {
            "date": "1702708252",
            "description": "A fractal rug pattern with an ornate design.",
            "flags": 8,
            "hasliked": 0,
            "id": "4cXGzH",
            "likes": 7,
            "name": "Purple and green rug",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug",
                "sitar",
                "flute"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nconst float scale = 1.5;\n\n\nvoid transform(inout vec2 uv, inout vec2 t2, inout vec3 col,inout float c1){\n        //if(t2.x>t2.y)\n        uv.y -= 1./4.;\n        //uv -= vec2(.5,1.5);\n        //if(uv.y<-1./4.)\n        uv = (uv+t2)/scale;\n        \n        uv = (fract(vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        col.x =\n            max(length(uv-t2-c1)/3.,col.x);\n        \n        t2 = triangle_wave(uv+.5);\n        uv =\n            //t2-triangle_wave(uv.yx)+fract(t2/2.)\n            \n            //looks better with more iterations\n            t2-triangle_wave(uv.yx)-fract(t2/2.)\n        ;\n        //t2.x = (t2.x+1.5*sign(t2.y-t2.x));\n        //uv.x = (uv.x+1.5*sign(uv.y-uv.x)); \n        \n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        float warp_scale = 16.*2.;\n        vec2 uv1 = uv;\n        //if(k>3) uv1 += iTime/8.;\n        vec2 warp =\n            \n            vec2(0.)\n            //vec2(sin((uv1.x)*warp_scale),cos((uv1.y)*warp_scale))/warp_scale\n            //1.-t2.yx*t2.yx\n            //uv1.yx/2.\n            //fract(t2)\n        ;\n        //if(k>3)\n        //warp = warp*warp*16.;\n        //else\n        //warp = vec2(0);\n        \n        vec2 uv_1 =\n            uv + warp.yx\n            //uv+warp*warp/2.\n            //uv/2.+warp.yx\n        ,\n        t2_1=\n            t2+warp.yx\n        ;\n        vec3 col_1 = col;\n        transform(uv_1,t2_1,col_1,c1);\n        //uv_1 = rotate(uv_1,uv.y/1.5);\n        //t2_1 = rotate(t2_1,uv.y/1.5);\n        transform(uv,t2,col,c1);\n        \n        c1 =\n            //max(abs(uv.y-uv.x*sign(uv.x-uv.y))/2.,c1)\n            //max(abs(uv_1.y-uv_1.x)*1.5,c1)\n            max(abs(uv_1.y+uv_1.x)/2.,c1)\n        ;\n        c1 =\n            max(1.-abs(2.*c1-1.),c1/4.)\n            \n            //more colorful\n            //abs(2.*c1-1.)\n            \n            //Spooky!\n            //max(abs(2.*c1-2.),c1/4.)/2.\n        ;\n        col.x =\n            max(length(uv_1-t2_1-c1)/3.,col.x)\n            \n            //blue and white\n            //c1\n            \n            //red and blue and white\n            //max(1.-abs(2.*c1-1.),c1/4.)\n\n            \n            //more colorful\n            //max(length(uv-t2-c1)/3.,1.-col.x)\n            \n            //blue and green\n            //max(length(uv-c1)/3.,col.x)\n           \n            //purple\n            //2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n            //black and white\n            //col.x\n        ;\n        col =\n            abs(col-(1.-(c1*col.x)));\n        col1 =\n            abs(col1*c1-col-1.).yzx\n            \n            //more like a mosaic\n            //abs(col1*c1-col*sign(t2.y-t2.x)-1.).yzx\n            //abs(col1*c1-col+sign(t2.y-t2.x)).yzx\n        ;\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 6.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12./2.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1/2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/mtSBzV\n\nint collatz(int initial, int steps){\n    //hailstone numbers\n    //makes some interesting rhythms\n    for(int i = 0; i < steps; i++){\n        if(initial%2==0) initial /= 2;\n        else initial = initial*3+1;\n    }\n    return initial;\n}\nfloat collatz(float initial, float steps){\n    return float(collatz(int(initial),int(steps)));\n}\n\nfloat mod1(float a,float b){\n    //a += mod(floor(a/16.),16.);\n\n    //a += collatz(mod(a/4.,b),8.);\n    //a += collatz(mod(a/4.,8.),b);\n    \n    return\n        mod(a,b)\n        //mod(a+mod(a,b+3.),b)\n        //mod(a+4.*floor(mod(a/4.,b)),b)\n    ;\n}\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),5.); i++){\n        a /= 2.0;\n        //a /= 1.0+mod(floor(a),2.);\n        a += mod1(floor(a/2.),b)*i;\n    }\n}\n\nfloat fmod(float a, float b, float tempo){\n    //a += mod(floor(a/16.),16.);\n    \n    //distort(a,b);\n    \n    float\n    t1 =\n        mod1(floor(b/2.),tempo)\n        //mod1(floor(a/2.),tempo)\n        //mod1(floor(b/2.+a/4.),2.)\n        //mod1(floor(b/2.)+floor(a/2.),2.),\n    ,\n    a1 =\n        floor(a+t1),\n    a0 =\n        a1\n        //a1+floor(a1/2.)*4.\n        //a1+floor(a1/4.)*3.+floor(a1/3.)*4.\n    ,\n    a2 =\n        mod1(a0,3.)\n        //mod1(a1*2.,3.)\n    ,\n    a3 =\n        mod1(a0,4.)\n    ;\n    return\n        mod1(a0-a2-a3,b)\n        //mod1(a1-a2-a3+2.,b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod(a,b,2.)\n        //max(fmod(a/2.,b,2.),fmod(a,b,4.))\n    ;\n}\n\nfloat prime_rhythm(float time){\n    //time += mod(floor(time/16.),16.);\n\n    //time += floor(time/8.);\n    return (1.+fmod(time/4.,2.))/(1.+fmod(time/2.,2.));\n}\n\nfloat fmod1(float a, float b){\n\n    //a += collatz(a/8./8.,b);\n    return\n        fmod(a,b)\n        //fmod(a+4.+floor(a/4.)*4.,b)\n    ;\n}\n\n#define fract1(a) (1.-pow(fract(-a),2.))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 banjo(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,6./4.));\n}\n\nvec2 harp(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,2.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.));\n}\n\nvec2 synth_drum(vec2 a, vec2 nb,float m2){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./m2)\n  + synth(1./8.,a,1./4.,1.,nb*2.,m2/4.));\n}\n\nvec2 oud(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 steel_drum(vec2 a, vec2 nb){\nreturn a/16./4.*abs(synth(1./2.,a,1./8.,1.,nb*4.,1.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n;\n}\n\nvec2 gamelan(vec2 a, vec2 nb){\nreturn\na/16./4.*abs(synth(1./4.,a,1./8.,1.,nb*2.,1./2.)\n  +.5*synth(1./4.,a,1./4.,1.,nb*2.,1./2.)) \n;\n}\n\nvec2 sitar1(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./4.+a*(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 sitar(vec2 a, vec2 nb){\nreturn a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.)));\n}\n\nvec2 sitar3(vec2 a, vec2 nb){\nreturn a*a/16./4.*abs((.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -(abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n;\n}\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a*a/16./4.*abs((abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -(a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar6(vec2 a, vec2 nb){\n    return a/16./4.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 note1(vec2 rhythm,float attack,float duration)\n{\n\nreturn -vec2((log(attack+fract1(rhythm.x)/2./duration)),(log(attack+fract1(rhythm.y)/4./duration)));\n\n}\n\nvec2 mainSound1(int samp, float time,float scale,float duration){\n  //time += mod(floor(time/16.),16.);\n\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time)*prime_rhythm(time/2.)*2.\n      //prime_rhythm(time+floor(time/8.))*prime_rhythm(time/2.)*2.\n  ,t = s1*time/4./tempo1,\n  t7 =\n      (1.+fmod(t/8.,2.))\n      //(1.+fmod(t/8.+mod(t/8.,2.),2.))\n  ,\n  t4 = t/prime_rhythm(time+11.)/t7,\n  t1 =\n       fmod(t4,2.)\n       //fmod(t4+floor(time/8.),2.)\n  ,\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 =\n      (1.+fmod(t5,2.))\n      //(1.+fmod(t5+floor(time/4./4./4.),2.))\n  ,\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod1(t6,s1/2.)/2.)\n      //floor(fmod1(t6+floor(time/8./4.),s1/2.)/2.)\n\n  ,\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.)\n      //1. + fmod1(t/t3/2.+floor(time/4./4.),s1/2.)\n  ,note = (\n      (m3+m2-t1*4.)\n      //mod(m3+m2-t1*4.-floor(time/4.)*4.,8.)-4.\n      //(m3+m2-t1*4.+fmod(time/2.,2.))\n      //(m3+m2+t1*4.-2.)\n      //(m3+m2-t1*4.)+mod(m3,2.)\n  )/7.\n  ,attack=1./64.\n  ;\n  vec2\n  rhythm = vec2(t/2./prime_rhythm(time+14.),t/prime_rhythm(time+7.))\n  ,a=\n      note1(rhythm,attack,duration)\n      //note1(rhythm*2.,attack*2.,duration*2.)\n  ,\n  nb =\n      t*vec2(pow(2.,note+scale),pow(2.,note+scale))*tempo1\n      \n      //distortion\n      //t*vec2(pow(2.,note+scale),pow(2.,note+a.y/128./128./16.+scale))*tempo1/2.\n\n  ;\n  return\n      //oud\n      oud(a,nb)+oud(a,nb/2.)/2.+oud(a,nb/4.)/4.\n      //sitar1(a,nb)\n      \n      //flute\n      //min(sitar1(a,nb),oud(a,nb/2.))\n\n      //sitar\n      //a/16./2.*abs(\n      //synth(1./4.,a,0.,1.,nb*2.,1./2.)\n      //-.5*synth(1./8.,a,1./8.,1.,nb,1./2.))/2.\n      \n      //sitar\n      //a/16./2.*abs(\n      //synth(1./4.,a,0.,1.,nb*2.,1./2.)\n      //+.5*synth(1./8.,a,1./8.,1./duration,nb,1./2.))/2.\n      \n      //sitar\n      //abs(oud(a,nb)-oud(a,nb*2.)/2.)\n      \n      //banjo\n      //a/16./4.*abs(\n      //synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n      //+ synth(1./8.,a,1./4.,1.,nb*2.,6./4.))\n      \n      //synth drum\n      //a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n      //+ log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n  ;\n  \n}\n\nvec2 mainSound1(int samp, float time,float scale){\n    return mainSound1(samp,time,scale,1.);\n}\n\nvec2 mainSound(int a,float b){\n    float scale = 6.25;\n    return\n        //sounds like sitar (using oud)\n        \n        //abs(mainSound1(a,b,6.25,1./2.)-mainSound1(a,b,7.25)/2.)\n        \n        //abs(mainSound1(a,b,6.25,1./2.)-mainSound1(a,b,8.25,1./2.)/4.)\n        \n        (mainSound1(a,b,scale,1./2.)-(mainSound1(a,b,scale+1.,1.)/2.-mainSound1(a,b,scale+2.,2.)/4.))/2.\n        \n        //((mainSound1(a,b,scale,1.)/2.+mainSound1(a,b,scale+1.,2.)))\n        \n        //sounds like sitar (using synth drum)\n        //abs(mainSound1(a,b,5.5,1./2.)-mainSound1(a,b,6.5,1.)/2.)\n        \n        //sitar6\n        //64.*(mainSound1(a,b,8.,1./2.)/4.-mainSound1(a,b,7.,1.))\n\n    ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}