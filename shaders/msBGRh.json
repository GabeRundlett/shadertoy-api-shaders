{
    "Shader": {
        "info": {
            "date": "1667203725",
            "description": "practice shader made while starting to go through thebookofshaders.com",
            "flags": 0,
            "hasliked": 0,
            "id": "msBGRh",
            "likes": 2,
            "name": "1.03-HeartbeatCursor",
            "published": 3,
            "tags": [
                "thebookofshaders"
            ],
            "usePreview": 0,
            "username": "retonym",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord)  \n{\n    vec2 uv = fragCoord.xy;\n    \n    //squish the uv space from a wide rectangle to a square, so that\n    //our spotlight will be a circle instead of an oval.\n    float screenRatio = iResolution.x/iResolution.y;\n    uv.x *= screenRatio;\n\tvec2 st = uv/iResolution.xy;\n\n\n    //TEST 3: THE ~FOURTH DIMENSION~\n    \n    //HEARTBEAT STRENGTH\n    //i want to get a 'heartbeat effect'\n    //i think i can do this by using sin\n    //sin goes from 1 to -1 across time.\n    //that means it passes through the values .5, .5, -.5, and -.5 -- that's 4 'beats'. \n    //let's say i only want to use the positive beats-- the .5s.\n    //i can check how close a sin value is to .5, and use that to drive the brightness of a color.\n    //so let's get our sin function going...\n    //multiply time by 6 to make it faster.\n    float sinwave = sin(iTime * 6.0);\n    //now, let's check how close sinwave is to our 'trigger point' of .5\n    //FOR FUN -- change the 'trigger point' to .8 or .2 and see how it affects heartbeat rhythm!\n    float sinTriggerPoint = .5;\n    //i'll call this closeness value 'hs' for heartbeatStrength\n    float hs  = abs(sinwave - sinTriggerPoint);\n    //and i'll use oneminus because i want to get a value where the closer we are to a heartbeat, \n    //the closer the heartbeat value is to '1'.\n    hs = 1.0 - hs;\n    //clamp the output to prevent negative values causing weird colors.\n    hs = clamp(hs, 0.0, 1.0);\n       \n    //HEARTBEAT STRENGTH-DRIVEN COLOR\n    //great, we have a heartbeat value that goes from 0 at weakest, to 1 at strongest. \n    //let's use that value to drive a color.\n    //let's make something that goes from purple at weakest, to red at strongest.\n    //color is (r, g, b, alpha)\n    //so i want the red to always be on but to get a bit stronger when the heartbeat is at its strongest\n    //and i want the blue to only show up when the heartbeat is at its weakest -- and mix with the red then to make purple.\n    vec4 color = vec4(.5 + (.3 * hs), 0.0, 1.0-hs, 1.0);\n\n    //SIMPLE SPOTLIGHT AROUND THE MOUSE CURSOR\n    //now let's make our spotlight that follows the mouse.\n    //normalize mouse position\n    vec2 mouseValue = iMouse.xy/iResolution.xy; \n    //at the very start, we squished the wide rectangular screen ratio into a square,\n    //to make the spotlight a circle instead of an oval.\n    //unfortunately that means the mouse x position is now squished to map onto that square space.\n    //so we multiply it by the screenRatio to 'unsquish' it back across a wide rectangular screen space.   \n    mouseValue.x *= screenRatio;\n    //get distance from mouse pos to the pixel being rendered by this fragment...\n    //when rendered out, this value looks like a black 'spotlight' around the mouse.\n    float len = distance(st, mouseValue);\n    //we have a spotlight. now change the spotlight size by multiplying the effect by a constant...\n    len = len * 5.0;\n    //i think it'd be cool to make the length vary with the heartbeat strength as well.\n    len -= hs;\n    vec4 mouseCircle = vec4(len, len, len, 1.0);\n    //invert the color of the circle.\n    vec4 mouseCircleInverted = vec4(1.0-mouseCircle.rgb, 1.0);\n    \n    //PUTTING IT ALL TOGETHER\n    //multiply the simple spotlight by the heartbeat color!\n    fragColor = mouseCircleInverted * color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}