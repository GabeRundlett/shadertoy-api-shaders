{
    "Shader": {
        "info": {
            "date": "1591473955",
            "description": "Cube consisting of many dots, inspired by a Kefrens demo",
            "flags": 0,
            "hasliked": 0,
            "id": "3tlyRH",
            "likes": 13,
            "name": "Primitive cubic lattice",
            "published": 3,
            "tags": [
                "cube",
                "dots"
            ],
            "usePreview": 0,
            "username": "Roninkoi",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAXIT 128\n#define EPSILON 0.001\n \n#define minx4(a, b) ((a.w) < (b.w) ? (a) : (b))\n#define minx2(a, b) ((a.x) < (b.x) ? (a) : (b))\n\nmat3 rotX(float a)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(a), -sin(a),\n        0., sin(a), cos(a)\n    );\n}\n \nmat3 rotY(float a)\n{\n    return mat3(\n        cos(a), 0.0, -sin(a),\n        0., 1., 0.,\n        sin(a), 0.0, cos(a)\n    );\n}\n \nmat3 rotZ(float a)\n{\n    return mat3(\n        cos(a), -sin(a), 0.,\n        sin(a), cos(a), 0.,\n        0., 0., 1.\n    );\n}\n \nfloat t;\n \nfloat sphere(vec3 r, float a)\n{\n    return length(r) - a;\n}\n \nfloat torus(vec3 r, vec2 a)\n{\n    vec2 p = vec2(length(r.xz) - a.x, r.y);\n    return length(p) - a.y;\n}\n \nfloat plane(vec3 r, vec3 o, vec3 n) {\n    return dot(r - o, n);\n}\n\nfloat cylinder(vec3 r, vec2 a)\n{\n\tvec2 p = abs(vec2(length(r.xz), r.y)) - a;\n\t\n\treturn min(max(p.x, p.y), 0.0) + length(max(p, 0.));\n}\n\nfloat hash(vec2 r) {\n    return fract(sin(dot(r, vec2(15.5921, 96.654654))) * 23626.3663);\n}\n\nfloat box(vec3 r, vec3 a)\n{\t\n    vec3 p = (abs(r) - a);\n    \n    return length(max(p, 0.));\n}\n \nfloat pbox(vec3 r, float a)\n{\t\n    vec3 p = (abs(r) - a);\n    \n    float dr = 0.02 / (a);\n    float n = 16.;\n    p = p - (a / n) * clamp(round(p / (a / n)), -n, n);\n    p = (length(p) - vec3(dr));\n    \n    return length(max(p, 0.));\n}\n\nfloat shade(vec3 n, vec3 rd)\n{\n    return clamp(max(dot(n, -rd), 0.) + 1., 0., 1.);\n}\n \nvec3 fog(float z, vec3 col, vec3 fogCol)\n{\n    return mix(fogCol, col, exp(-z));\n}\n\nmat3 obj;\n\nvec2 map(vec3 r)\n{    \n    obj = mat3(1.);\n    \n    float ts = (sin(t) + 1.) * (sin(t) + 1.) * (sin(t) + 1.) / 8.;    \n    float tss = (cos(t) + 1.) * 0.8;\n    \n    obj *= rotY((t + tss) * 2.) * rotX((t + tss) * 2.);\n    r = obj * r;\n    \n    float d = pbox(r, ts * 1.4 + 0.5);\n    \n    return vec2(d, d);\n}\n\nvec3 matCol(vec2 o)\n{\n    return vec3(0.0, 1.0, o.y);\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    t = iTime * 0.5;\n   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n   \n    mat3 cam = rotY(-PI) * rotX(0.3);\n       \n    vec3 ro = vec3(0., 0.5, -4.0);\n    vec3 rd = cam * normalize(vec3(uv * 2., -1.));\n    vec3 r = ro;\n   \n    vec3 bcol = vec3(1.0 - uv.y * 0.5 + cos(1.5*uv.x), 0.2 - uv.y, uv.y);\n    vec4 col = vec4(0.);\n    col.rgb = bcol;\n   \n    float sh = 1.;\n   \n    float glow = 0.;\n   \n    int ch = 1;\n   \n    for (int i = 0; i < MAXIT; ++i) {\n        vec2 d = map(r);\n        float z = length(r - ro);\n       \n        glow += exp(-d.x * 0.001);\n    \n        if (d.x < EPSILON) {\n            col.rgb = mix(col.rgb, \n\t\t\t\tmatCol(d), \n\t\t\t\tshade(normalize(r), rd));\n            col.rgb = fog(z * 0.1, col.rgb, bcol);\n            break;\n        }\n       \n        d.x *= 0.6 - 0.1 * hash(uv);\n\t\tr += rd * d.x;\n        \n        sh = (float(i) / float(MAXIT));\n    }\n   \n    \n\tcol.rgb *= exp(-sh * 1.0);\n    col.rgb = mix(col.rgb, vec3(0.0, 1.0, 0.7), glow * 0.03);\n   \n    fragColor = vec4(col.rgb, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}