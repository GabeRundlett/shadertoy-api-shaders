{
    "Shader": {
        "info": {
            "date": "1558088060",
            "description": "Was looking for some nice lightning effects and stumbled on the shader:\n   https://www.shadertoy.com/view/3sXSD2\n\nTinkered a bit with it and while I added nothing innovative I thought it looked quite nice in the end and wanted to share. \n",
            "flags": 0,
            "hasliked": 0,
            "id": "3lsGWs",
            "likes": 18,
            "name": "Electric Nyan Cat",
            "published": 3,
            "tags": [
                "fbm",
                "lightning"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1144
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Was looking for some nice lightning effects and stumbled on the shader:\n//   https://www.shadertoy.com/view/3sXSD2\n\n// Tinkered a bit with it and while I added nothing innovative I thought it \n// looked quite nice in the end and wanted to share. \n// NyanCat added just because why not?\n\n\n\n// using a slightly adapted implementation of iq's simplex noise from\n// https://www.shadertoy.com/view/Msf3WH with hash(), noise() and fbm()\nvec2 hash (in vec2 p)\n{\n  p = vec2 (dot (p, vec2 (127.1, 311.7)),\n            dot (p, vec2 (269.5, 183.3)));\n\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\nfloat noise (in vec2 p)\n{\n  const float K1 = .366025404;\n  const float K2 = .211324865;\n\n  vec2 i = floor (p + (p.x + p.y)*K1);\n   \n  vec2 a = p - i + (i.x + i.y)*K2;\n  vec2 o = step (a.yx, a.xy);    \n  vec2 b = a - o + K2;\n  vec2 c = a - 1. + 2.*K2;\n\n  vec3 h = max (.5 - vec3 (dot (a, a), dot (b, b), dot (c, c) ), .0);\n\n  vec3 n = h*h*h*h*vec3 (dot (a, hash (i + .0)),\n                         dot (b, hash (i + o)),\n                         dot (c, hash (i + 1.)));\n\n  return dot (n, vec3 (70.));\n}\n\nfloat fbm (in vec2 p, float time)\n{\n  float c =  cos(time/sqrt(3.0));\n  float d =  noise (p                 );\n  d += .5*   noise (p + vec2(+c  ,+0.0));\n  d += .25*  noise (p + vec2(+0.0,+c  ));\n  d += .125* noise (p + vec2(-c  ,+0.0));\n  d += .0625*noise (p + vec2(+0.0,-c  ));\n  d /= (1. + .5 + .25 + .125 + .0625);\n  return .5 + .5*d;\n}\n\nvec2 toPolar (in vec2 p)\n{\n  float r = length (p);\n  float a = atan (p.y, p.x);\n  return vec2 (r, a); \n}\n\nvec2 toRect (in vec2 p)\n{\n  float x = p.x*cos (p.y);\n  float y = p.x*sin (p.y);\n  return vec2 (x, y); \n}\n\nvec4 nyanCat(vec2 p)\n{\n  p.y *= -1.0;\n  p = clamp(p,0.0,1.0);\n  p.x = p.x*40.0/256.0;\n  p.y = 0.5 + 1.2*(0.5-p.y);\n  p = clamp(p,0.0,1.0);\n  float fr = floor(mod(20.0*iTime, 6.0 ));\n  p.x += fr*40.0/256.0;\n  return texture(iChannel0, p);\n}\n\n\nvec3 electricNyanCat(in vec2 uv)\n{\n  const float thickness = 0.25;\n  const float haze = 2.5;\n  const float size = .075;\n  const int count = 3;\n\n  vec2 p = uv;\n\n  vec2 pp = toPolar(p);\n  pp.y += 0.2*p.x;\n  p = toRect(pp);\n\n  vec3 col = vec3(0.0);\n\n  float a1 = smoothstep(0.05, 1.0, length(p - vec2(-0.6, 0.0)));\n  float a2 = smoothstep(0.05, 1.0, length(p - vec2(0.6, 0.0)));\n  float s1 = 1.0 / (a1 + 0.1)*1.1;\n  float s2 = 1.0 / (a2 + 0.1)*1.1;\n\n  float e1 = 1.6 + 0.4*sin(iTime*sqrt(2.0));\n  float e2 = e1;\n\n  for (int i = 0; i < count; ++i)\n  {\n    float fi = float(i);\n    float time = iTime + fi;\n    float fe1 = (pow(fi + 1.0, 0.2))*e1;\n    float fe2 = fe1;\n    vec2 o1 = 1.5*time*vec2(0,-1);\n    vec2 o2 = o1;\n    float d1 = abs ((p.y*haze)*thickness / (p.y - fe1*fbm (p + o1, time*0.11)*a1))*s1;\n    float d2 = abs ((p.y*haze)*thickness / (p.y - fe2*fbm (p + o2, time*0.09)*a2))*s2;\n    col += d1*size*vec3 (.1, .8, 2.);\n    col += d2*size*vec3 (2., .1, .8);\n  }\n\n  col /= float(count-1);\n    \n  vec4 cat = nyanCat(uv/3.0 - vec2(-0.5, 0.25));\n  col += cat.xyz*cat.w; \n      \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  uv = 2.0*uv - 1.0;\n  uv.x *= iResolution.x/iResolution.y;\n  \n  vec3 col = electricNyanCat(uv*2.0);\n\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}