{
    "Shader": {
        "info": {
            "date": "1578290743",
            "description": "Boolean operation",
            "flags": 0,
            "hasliked": 0,
            "id": "3ld3zB",
            "likes": 1,
            "name": "Boolean operation",
            "published": 3,
            "tags": [
                "imi202001"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "float sphereSDF(vec3 p, vec3 cent, float rad) {\n    return distance(p, cent) - rad;\n}\nfloat sceneSDF(vec3 p){\n    float cup = min(sphereSDF(p, vec3(0.0, sin(iTime), 0.0), 0.3), sphereSDF(p, vec3(0.0), 0.5));\n    float diff = max(sphereSDF(p, vec3(1.0, sin(iTime), 0.0), 0.3), -sphereSDF(p, vec3(1.0, 0.0,0.0), 0.5));\n    float cap = max(sphereSDF(p, vec3(-1.0, sin(iTime), 0.0), 0.3), sphereSDF(p, vec3(-1.0, 0.0, 0.0), 0.5));\n    return min(min(diff, cap), cup);\n}\nvec3 gradSDF(vec3 p) {\n    float d = 0.0001;\n    return normalize(vec3(\n        sceneSDF(p + vec3(d, 0.0, 0.0)) - sceneSDF(p + vec3(-d, 0.0, 0.0)),\n        sceneSDF(p + vec3(0.0, d, 0.0)) - sceneSDF(p + vec3(0.0, - d, 0.0)),\n        sceneSDF(p + vec3(0.0, 0.0, d)) - sceneSDF(p + vec3(0.0, 0.0, - d))\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // fragment position\n     vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera\n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 cDir = vec3(0.0, 0.0, - 1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    // light\n    vec3 lightDir = vec3(1.0, 0.0, 1.0);\n\n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n    // marching loop\n    vec3 rPos = cPos;\n    for(int i = 0; i < 40; i++ ) {\n        rPos += ray * sceneSDF(rPos);\n    }\n    \n    // collision detection\n    if (abs(sceneSDF(rPos)) < 0.001) {\n        vec3 normal = gradSDF(rPos);\n        float diff = clamp(dot(lightDir, gradSDF(rPos)), 0.1, 1.0);\n        fragColor = vec4(vec3(diff), 1.0);\n    } else {\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}