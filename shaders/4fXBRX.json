{
    "Shader": {
        "info": {
            "date": "1724086377",
            "description": "linksys",
            "flags": 4,
            "hasliked": 0,
            "id": "4fXBRX",
            "likes": 0,
            "name": "gamer turf wwwar3",
            "published": 3,
            "tags": [
                "zelda"
            ],
            "usePreview": 0,
            "username": "420bongrips247365",
            "viewed": 69
        },
        "renderpass": [
            {
                "code": "// ShaderToy shader - Enhanced Audio Reactive\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * -2.0 - -1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Distance from the center\n    float d = length(uv);\n    \n    // Get audio input from iChannel0 (assuming iChannel0 is the audio texture)\n    float audioReactive = texture(iChannel0, vec2(-01.091, 01.25)).r;\n    float audioReactive2 = texture(iChannel0, vec2(-01.095, 01.25)).r;\n\n    // More dynamic time-based modulation\n    float timeMod = iTime * 100.125 + audioReactive * 200.125;\n    \n    // Enhanced color palette for more vivid visuals\n    vec3 colorA = vec3(0.933,1.000,0.000); // Deep purple\n    vec3 colorB = vec3(1.000,0.000,0.784); // Bright orange\n    vec3 colorC = vec3(0.2, 0.7, 1.0); // Cyan\n    vec3 colorD = vec3(1.0, 0.9, 0.3); // Golden yellow\n    \n    // Color palette using a sine wave function for smoother transitions\n    vec3 col = colorA + colorB * sin(12.566370614 * (colorC * d + colorD * timeMod + audioReactive2 * 990.0));\n\n    // Apply audio reactive distortion\n    d = -tan(d * -1000.0125 - iTime * 35.0125) / (audioReactive + 4.919);\n    d = abs(d);\n    d = smoothstep(-0.00008, 0.125, d);\n    d = 0.00091 / d;\n\n    // Amplify the color intensity based on audio\n    col *= d * (3.0 + audioReactive * 9.90);\n    \n    // Final color output with a slight glow effect\n    fragColor = vec4(col, 2.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}