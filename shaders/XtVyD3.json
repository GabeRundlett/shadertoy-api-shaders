{
    "Shader": {
        "info": {
            "date": "1537976501",
            "description": "Each particle is associated with 2 targets, and try to get at equal distance to them. \nVariant: reciprocal links share color. pastel if orphan. #Bias for uneven link stat. Demo mode (auto-restart)\nSet N in common.  Try relax = .5 :-)\nRewind to restart.",
            "flags": 32,
            "hasliked": 0,
            "id": "XtVyD3",
            "likes": 8,
            "name": "\"solar system\" social game 2b",
            "published": 3,
            "tags": [
                "simu"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1112
        },
        "renderpass": [
            {
                "code": "// show-cycles + bias variant of https://shadertoy.com/view/4tGyDc\n// variant of https://www.shadertoy.com/view/XlyyDc\n\n// --- draw particles\n\n#define S(d)     smoothstep( 2., 0., d)\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) ) // https://www.shadertoy.com/view/ll2cDc\n\n// line segment with disc ends: https://www.shadertoy.com/view/4dcfW8\nfloat line(vec2 p, vec2 a,vec2 b, out float h) { \n    p -= a, b -= a;\n\t h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n\treturn length(p - b * h);                    // dist to segment\n}\n \nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n    U = -.05*R + 1.1*U;                          // margin\n    vec4 BB = T(N);                              // Bbox\n    vec2  L = ( BB.zw-BB.xy ) / R;\n    float H = 1. / max( L.x, L.y );              // scaling\n#define frame(i)  ( T(i).xy -BB.xy ) * H\n//#define frame(i)   T(i).xy *R.y                // dont rescale\n    \n    for( int i=0; i<N; i++) {\n        vec4 C = hue(C(i).x/float(N));           // particle id -> color\n        if (C(i).y==0.) C = .7+.3*C;             // pastel if no link to me\n        vec2 P = frame( i ),                     // particle coords\n             A = frame( T(i).z ),                // targets coords\n             B = frame( T(i).w );\n        O += S( length( U - P ) -4.) *C;         // draw partic\n        float ha, hb, \n              da = line( U, P, A, ha),           // draw lines to targets\n              db = line( U, P, B, hb);\n        if ( db < da ) da = db, ha = hb;  \n        O += S( da ) * (1.-ha) *C;\n    }\n    //O = sqrt(O);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- simulates particles\n\n#define hash(p)   fract( sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define irnd(x,y) floor( float(N) * pow( hash(vec2(x,y)), bias) )    \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float y = floor(U.y);\n    \n    if (iFrame==0                            // 1st frame\n        || ( DEMO && T(N+1).z < 1e-5 ) ) {   // converged: restart\n      if (U.x==.5) {                    // --- init partics (0,y) \n        float t = mod(iDate.w,10.);\n        O.x = hash(vec2(U.y+t,1)) * R.x/R.y; // .xy = location\n        O.y = hash(vec2(U.y-t,-1));\n        O.z = irnd(U.y,   t);                // .zw = targets id\n        O.w = irnd(U.y, ++t);                // the 3 points must differ\n        while ( O.z==y )             O.z = irnd(U.y, ++t);\n        while ( O.w==y || O.w==O.z ) O.w = irnd(U.y, ++t);\n      }\n      else O.x = y;                          // default cycle id (1,y)\n      return;\n    }\n    \n    if (U.x==.5) {                      // --- motion for partics (0,y)\n        O = T(U.y);                          // previous partic state\n        vec2 A = T(O.z).xy,                  // targets coords\n             B = T(O.w).xy,\n             M = (A+B)/2.,                   // bisector: center+dir\n             D = vec2(B.y-A.y,A.x-B.x),\n             P = O.xy - M ,                  // M to partic coords\n             pP = M + dot(P,D)*D/(dot(D,D)+1e-9); // proj on bisector\n        O.xy = mix(O.xy,pP,relax);           // move with relaxation\n      //O.xy = mix(O.xy,pP,relax*(.5+hash(O.xy))); // opt: noise in move\n        \n        if ( int(y) == N ) {                 // Bbox in (0,N)\n            O = 1e2 * vec4(1,1,-1,-1);\n            for( int i=0; i<N; i++) {\n                O.x = min( O.x, T(i).x);\n                O.y = min( O.y, T(i).y);\n                O.z = max( O.z, T(i).x);\n                O.w = max( O.w, T(i).y);\n            }\n        }\n        if ( int(y) == N+1 ) {               // center of mass in (0,N+1)\n            O -= O;\n            for( int i=0; i<N; i++) O.xy += T(i).xy;\n            // O.xy /= float(N);\n            // O.zw = T(U.y).xy;             // prev (to check convergence)\n            O.z = length(T(U.y).xy - O.xy);  // change (to check convergence)\n        }\n    }\n    else if (U.x==1.5) {                 // ---- color graphs\n        O = T(U.y);                          // previous partic state\n        float c = C(U.y).x;                  // if back-link, c = min(ids)\n        if ( T(O.z).z == y || T(O.z).w == y ) c = min(c,C(O.z).x);\n        if ( T(O.w).z == y || T(O.w).w == y ) c = min(c,C(O.w).x);\n        O.x = c;                             // new cycle id propagated\n        O.y = 0.;                            // Count links to me\n        for (int i=0; i<N; i++)\n            if ( T(i).z == y || T(i).w == y ) { O.y++; break; }\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define DEMO true  // restart once converged\n\n#define N 30       // number of particles\n#define relax .5   // relaxation speed. try .01 .5 .9 \n#define bias  1.   // 1. uniform stat of links. Try 4\n\n#define texelFetch(ch,u,l) texture(ch, (vec2(u)+.5)/R ) // webGL1\n\n#define T(y) texelFetch(iChannel0, ivec2(0,y), 0)   // pos + links\n#define C(y) texelFetch(iChannel0, ivec2(1,y), 0)   // cycle id\n\n#define R iResolution.xy",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}