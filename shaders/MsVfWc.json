{
    "Shader": {
        "info": {
            "date": "1530897567",
            "description": "polygonal columns. \noptimizations:   (compute 100x for measures)\n#BBOX: evaluate polygon only if close. Here: gain = 50%\n#ROOF: evaluate polygon only if in slice. Here: gain = 50%\n#ZFAR: early stop right after the scene. Here: gain = 75%\nNB: don't  add :)",
            "flags": 0,
            "hasliked": 0,
            "id": "MsVfWc",
            "likes": 2,
            "name": "columns 2b (optims): polygons",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "// optimization variant of https://shadertoy.com/view/4dVfD3\n#define BBOX 1 // evaluate polygon only if close.   Here: gain = 50%\n#define ROOF 0 // evaluate polygon only if in slice.Here: gain = 50%\n#define ZFAR 0 // early stop right after the scene. Here: gain = 75%\n\n// variant of https://shadertoy.com/view/4sKfD3 ( columns )\n// and https://www.shadertoy.com/view/lsGczd    ( polygons )\n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n  for(int k=0; k<100; k++){                      // slowing 100x for measures\n    float t = 4.+1.*iTime, i, d=0.;\n    mat2  R = mat2( sin(t+vec4(0,33,11,0)) );\n    vec3  q = iResolution,\n          D = normalize(vec3(.3*(U+U-q.xy)/q.y, -1)), // ray direction\n       // D = vec3(.3*(U+U-q.xy)/q.y, -1),       // ray direction\n          p = 30./q;                             // marching point along ray \n    O-=O;\n    for ( O++; O.x > 0. && t > .01 && d < 100.; O-=.015 ) {\n        q = p,\n        q.xz *= R, q.yz *= R,                    // rotation\n        i = (q.x+3.)/6.;                         // floor = column number\n        q.x = mod(q.x+3.,6.)-3.,                 // repeat in x\n        q.y = abs(q.y)-5.;                       // 2 rows\n        \n        float r = 2., h = 2.,                    // radius, height/2\n              l = length(q.xy);\n#if BBOX                                         // OPTIM: bounding cylinder\n      if (l<r+1.) // what best ? +.1, 1, 2 ?\n#endif\n#if ROOF                                         // OPTIM: bounding roof\n      if (abs(q.z)<h+1.) // what best ? +.1, 1, 2 ?\n#endif\n      {\n        float a = atan(q.x,q.y),\n              N = 3. + floor(abs(i)),            // number poly sides\n              b = 3.14159/N;\n        a = mod(a,2.*b)-b;\n      //l *= cos(a) / cos(b),                    // 2D polygonal distance\n        l *= cos(a),                             // 2D polygonal distance\n        r *= cos(b);                             // r = vertices, not faces\n      }    \n        t = max( l-r, abs(q.z) -h );             // inter Z-range\n        if (i<0.) t = max(t, -(l-r*.75));        // hole\n\n        p += t*D;                                // step forward = dist to obj\n#if ZFAR                                         // OPTIM: early stop after scene\n        d += t;\n#endif\n    }\n  }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}