{
    "Shader": {
        "info": {
            "date": "1683754530",
            "description": "koch kifs",
            "flags": 0,
            "hasliked": 0,
            "id": "mtK3Rm",
            "likes": 0,
            "name": "KochMagic",
            "published": 3,
            "tags": [
                "kochkifs"
            ],
            "usePreview": 0,
            "username": "oemfoe",
            "viewed": 51
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 M = iMouse.xy / iResolution.xy;\n    vec3 col = vec3(0.0);\n    \n    uv -= 0.5;\n    uv.x *= aspect;\n    \n    uv.x -= 0.25;\n    vec2 c = uv.xy * 2.;\n    uv = vec2(0.);\n    int it = 0;\n    for (int i = 0; i < 50; i++){\n        uv = vec2(\n            uv.x * uv.x - uv.y * uv.y,\n            2. * uv.x * uv.y\n        ) + c;\n        \n        it = i;\n        if (length(uv) > 2.)\n            break;\n    }\n    \n    if (it < 49) {\n        uv = c;\n        uv.x += 0.5;\n    }\n    uv /= 2.;\n    //uv.x += 0.25;\n    \n    \n    \n    uv *= 1.5;\n    float zoom = 1.0;\n    uv /= zoom;\n    float d;\n    float a = 0.8333 * 3.14159;\n    vec2 n = vec2(sin(a), cos(a));\n    uv.x = abs(uv.x);\n    uv.y -= 0.29;\n    uv.x -= 0.5;\n    \n\n    d = dot(uv, n);\n    uv -= n * max(0., d) * 2.;\n    uv.x += 0.5;\n    \n    a = 0.6666 * 3.14159;\n    n = vec2(sin(a), cos(a));\n    uv.x += 0.5;\n    float scale = 1.;\n    \n    for (int i = 0; i < 8; i++) {\n        uv.x -= 0.5;\n        uv *= 3.;\n\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n\n        d = dot(uv, n);\n        uv -= n * min(0., d) * 2.;\n        \n        scale *= 3.;\n    }\n    \n    \n    //col += vec3(uv.x, uv.y, 0.);\n    col += texture(iChannel0, rot(iTime / 20.) * uv / scale * zoom - M).rgb;\n    \n    d = abs(uv.y) + max(0., abs(uv.x) - 1.);\n    //col += smoothstep(0.01 * scale, 0., d);\n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}