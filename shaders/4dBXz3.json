{
    "Shader": {
        "info": {
            "date": "1414140907",
            "description": "How to clip and reflect a vector to a hemisphere (useful for making sure your vectors are in the positive side of a plane/normal). More info: [url]https://iquilezles.org/articles/dontflip[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4dBXz3",
            "likes": 40,
            "name": "Vector reflect/clip",
            "published": 3,
            "tags": [
                "2d",
                "reflect",
                "vectors",
                "clip"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3440
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// A useful trick to avoid certain type of discontinuities\n// during rendering and procedural content generation. More info:\n//\n// https://iquilezles.org/articles/dontflip/dontflip.htm\n\n\n\n// Flip v if in the negative half plane defined by r (this works in 3D too)\nvec2 flipIfNeg( in vec2 v, in vec2 r )\n{\n    float k = dot(v,r);\n    return (k>0.0) ? v : -v;\n}\n\n// Reflect v if in the negative half plane defined by r (this works in 3D too)\nvec2 reflIfNeg( in vec2 v, in vec2 r )\n{\n    float k = dot(v,r);\n    return (k>0.0) ? v : v-2.0*r*k;\n}\n\n// Clip v if in the negative half plane defined by r (this works in 3D too)\nvec2 clipIfNeg( in vec2 v, in vec2 r )\n{\n    float k = dot(v,r);\n    return (k>0.0) ? v : (v-r*k)*inversesqrt(1.0-k*k/dot(v,v));\n}\n\n//===============================================================\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n// https://www.shadertoy.com/view/slj3Dd\nfloat sdArrow( in vec2 p, vec2 a, vec2 b, float w1, float w2 )\n{\n    const float k = 3.0;\n\tvec2  ba = b - a;\n    float l2 = dot(ba,ba);\n    float l = sqrt(l2);\n\n    p = p-a;\n    p = mat2(ba.x,-ba.y,ba.y,ba.x)*p/l;\n    p.y = abs(p.y);\n    vec2 pz = p-vec2(l-w2*k,w2);\n\n    vec2 q = p;\n    q.x -= clamp( q.x, 0.0, l-w2*k );\n    q.y -= w1;\n    float di = dot(q,q);\n\n    q = pz;\n    q.y -= clamp( q.y, w1-w2, 0.0 );\n    di = min( di, dot(q,q) );\n\n    if( p.x<w1 )\n    {\n    q = p;\n    q.y -= clamp( q.y, 0.0, w1 );\n    di = min( di, dot(q,q) );\n    }\n\n    if( pz.x>0.0 )\n    {\n    q = pz;\n    q -= vec2(k,-1.0)*clamp( (q.x*k-q.y)/(k*k+1.0), 0.0, w2 );\n    di = min( di, dot(q,q) );\n    }\n    \n    float si = 1.0;\n    float z = l - p.x;\n    if( min(p.x,z)>0.0 )\n    {\n      float h = (pz.x<0.0) ? w1 : z/k;\n      if( p.y<h ) si = -1.0;\n    }\n    return si*sqrt(di);\n}\n\n//===============================================================\n\nfloat line( in vec2 p, in vec2 a, in vec2 b, float w , float e)\n{\n    return 1.0 - smoothstep( -e, e, sdLine( p, a, b ) - w );\n}\n\nfloat arrow( in vec2 p, in vec2 a, in vec2 b, float w1, float w2, float e )\n{\n    return 1.0 - smoothstep( -e, e, sdArrow( p, a, b, w1, w2) );\n}\n\n//===============================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 p = fragCoord/iResolution.x;\n    vec2 q = p;\n    p.x = mod(p.x,1.0/3.0) - 1.0/6.0;\n    \n    p.y -= 0.5*iResolution.y/iResolution.x;\n    p.y += 0.04;\n    \n    float e = 1.0/iResolution.x;\n   \n    float time = iTime;\n    \n    //time = mod( time, 8.0 );\n    float an = 0.3*(1.0-smoothstep(-0.1,0.1,sin(0.125*6.283185*(time+1.0/2.0))));\n    \n    vec2 r = vec2( sin(an), cos(an) );\n    vec2 pe = r.yx*vec2(-1.0,1.0);\n    \n    vec3 col = vec3(0.15);\n    col = vec3(21,32,43)/255.0;\n\n    float wi = 0.0015;\n    float s = dot(p,r);\n    if( s>0.0 )\n    {\n        float r = length(p);\n        if( r<0.12 )\n        {\n            float nr = r/0.12;\n            col += 0.25*nr*nr;\n        }\n        col = mix(col,vec3(0.7), 1.0-smoothstep(-e,e,abs(r-0.12)-wi));\n    }\n\n    col = mix( col, vec3(0.7), arrow(p, vec2(0.0), r*0.18, wi, 0.01, e) );\n    col = mix( col, vec3(0.7), line(p, -0.12*pe, 0.12*pe, wi, e) );\n\n    {\n    float an = cos(0.5*6.283185*time);\n    vec2 v = vec2( -cos(an), sin(an) )*0.12;\n    vec2 f;\n         if( q.x<0.333 ) f = flipIfNeg( v, r );\n    else if( q.x<0.666 ) f = reflIfNeg( v, r );\n    else                 f = clipIfNeg( v, r );\n\n    col = mix( col, col+0.2, arrow(p, vec2(0.0), v, wi, 5.0*wi, e) );\n    col = mix( col, vec3(1.0,0.7,0.2), arrow(p, vec2(0.0), f, wi, 5.0*wi, e) );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}