{
    "Shader": {
        "info": {
            "date": "1658309242",
            "description": "fluidicly incorrect",
            "flags": 32,
            "hasliked": 0,
            "id": "7dGfWw",
            "likes": 61,
            "name": "Minimal Fluidish Simulacre",
            "published": 3,
            "tags": [
                "fluid",
                "small"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1107
        },
        "renderpass": [
            {
                "code": "\n// Minimal Fluidish Simulacre\n\n// found by accident that shifting pixels\n// on a height map with the slope direction\n// calculated by sampling neighbors at random long range\n// produces somehow turbulent fluid movement\n\n// i'm amazed that it produces such organic patterns\n// when there is no perlin noise, no gyroid, no force fields\n// just white grainy noise and slope movement\n\n// this accident is dedicated to Cornus Ammonis\n// which works inspired me in so many ways\n// and because this shader looks like a drunken version of his work\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define T(uv) texture(iChannel0,uv).a\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // the salt of life\n    float noise = hash13(vec3(fragCoord, iFrame));\n    \n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // random spawn\n    float height = clamp(.001/noise,0.,1.);\n    \n    // mouse interaction\n    if (iMouse.z > 0.)\n        height += clamp(.02/length(uv-iMouse.xy/iResolution.xy), 0., 1.);\n    \n    // move uv toward slope direction\n    vec2 e = vec2(.2*noise,0);\n    vec2 normal = normalize(vec2(T(uv+e.xy)-T(uv-e.xy),T(uv+e.yx)-T(uv-e.yx)));\n    uv += 5. * normal * noise / iResolution.xy;\n\n    // accumulate and fade away\n    height = max(height, texture(iChannel0, uv).a - .005*noise);\n    \n    // lighting\n    e = vec2(2./iResolution.y, 0);\n    normal = normalize(vec2(T(uv+e.xy)-T(uv-e.xy),T(uv+e.yx)-T(uv-e.yx)));\n    float light = dot(normal, vec2(0,-1))*.5+.5;\n    \n    fragColor = vec4(vec3(light*height), height);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}