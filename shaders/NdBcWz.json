{
    "Shader": {
        "info": {
            "date": "1643322325",
            "description": "After the lions, the Irish harp was straightforward (with some simplifications), so here is the complete Royal Standard of the United Kingdom. Each quarter rendered in a separate buffer.\n\nMouse to zoom, 'x' for progressive rendering,",
            "flags": 48,
            "hasliked": 0,
            "id": "NdBcWz",
            "likes": 21,
            "name": "The Royal Standard",
            "published": 3,
            "tags": [
                "bezier",
                "flag",
                "standard",
                "svg",
                "arms",
                "quartering"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 473
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// The Royal Standard of the United Kingdom, Matthew Arcus, mla. 2022\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// https://en.wikipedia.org/wiki/Royal_Standard_of_the_United_Kingdom\n//\n// Composed of the Royal Arms of England, Scotland and Ireland, with\n// the Welsh left out:\n//\n// \"Wales is not represented in the Royal Standard, as its special\n// position as a Principality was recognised by the creation of the\n// Prince of Wales long before the incorporation of the quarterings\n// for Scotland and Ireland in the Royal Arms.\"\n//\n// according to https://www.royal.uk, who ought to know, I suppose.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// The Standard used in Scotland has the lion rampant twice\n// instead of the three lions of England.\n//#define NORTHOFTHEBORDER\n#if !defined NORTHOFTHEBORDER\n#define channel1 iChannel1\n#define channel2 iChannel2\n#else\n#define channel1 iChannel2\n#define channel2 iChannel1\n#endif\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0*fragCoord/iResolution.xy;\n    bvec2 quad = lessThan(uv,vec2(1));\n    // Each buffer only 1/4 rendered.\n    uv = 0.5*fract(uv);\n    if (all(quad)) fragColor = texture(iChannel0,uv);\n    else if (all(not(quad))) fragColor = texture(channel1,uv);\n    else fragColor = texture(channel2,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const uint points[] = uint[](\n1493175066u, 1404445083u, 1404445083u, 1315715099u, 1227700772u, 1227700772u, 1139620908u, 1313153382u, 1313153382u, 1486685856u, 1489963229u, 1489963229u, 1493175066u, \n1263613936u, 1207253306u, 1207253306u, 1150958212u, \n1429276968u, 1228218946u, 1228218946u, 1027226461u, 1083456453u, 1083456453u, 1139620908u, 1313153382u, 1313153382u, 1486685856u, 1457981412u, 1457981412u, 1429276968u, \n1202261078u, 1193807048u, 1185353017u, 1176964520u, 1249186602u, 1249186602u, 1321474220u, 1327175963u, 1337727279u, 1345001688u, 1352341632u, 1353586655u, 1347884912u, 1275072995u, 1275072995u, 1202261078u, \n1148784405u, 1140133764u, 1131483121u, 1122898011u, 1205737132u, 1205737132u, 1288576253u, 1294277996u, 1304829312u, 1312169257u, 1319443666u, 1320754225u, 1315052481u, 1231951211u, 1231951211u, 1148784405u, \n1093931449u, 1085018659u, 1076105867u, 1067193071u, 1161435678u, 1161435678u, 1255678286u, 1261380029u, 1271996881u, 1279271290u, 1286545699u, 1287856258u, 1282154514u, 1188042982u, 1188042982u, 1093931449u, \n1037112375u, 1027806361u, 1018565883u, 1009325398u, 1116085626u, 1116085626u, 1222845853u, 1228547597u, 1239098912u, 1246373321u, 1253713266u, 1255023825u, 1249256545u, 1143217228u, 1143217228u, 1037112375u, \n977737346u, 967841500u, 958076722u, 948311938u, 1069097144u, 1069097144u, 1189947886u, 1195649630u, 1206200946u, 1213540890u, 1220815299u, 1222125858u, 1216424115u, 1097080730u, 1097080730u, 977737346u, \n914495620u, 903813328u, 893196565u, 882645332u, 1019880394u, 1019880394u, 1157049920u, 1162817199u, 1173368515u, 1180642924u, 1187982868u, 1189227891u, 1183526148u, 1049043652u, 1049043652u, 914495620u, \n845617685u, 833493579u, 821434996u, 809573011u, 966928018u, 966928018u, 1124217489u, 1129919232u, 1140470548u, 1147810493u, 1155084902u, 1156395460u, 1150628181u, 998122933u, 998122933u, 845617685u, \n748821322u, 784867004u, 807673266u, 827726779u, 808851896u, 808851896u, 789977013u, 763631691u, 763631691u, 737286368u, 743053845u, 743053845u, 748821322u, \n791157035u, 828841311u, 852499882u, 879500245u, 853023185u, 853023185u, 826480590u, 808851580u, 808851580u, 791157035u, \n827070765u, 912269043u, 943594825u, 970005232u, 895555669u, 895555669u, 821171642u, 824121204u, 824121204u, 827070765u, \n894638290u, 939662171u, 1049173555u, 1054939297u, 996611888u, 996611888u, 938284479u, 916461384u, 916461384u, 894638290u, \n931141648u, 940710186u, 974068002u, 979573285u, \n944510701u, 986781440u, 1101667538u, 1109792031u, 1047598223u, 1047598223u, 985338879u, 964957558u, 964957558u, 944510701u, \n868423945u, 883169815u, 883169815u, 897915686u, \n814029241u, 822876741u, 832903871u, 833756101u, \n773069158u, 780409368u, 784866012u, 783227845u, \n915871757u, 908073409u, 874125927u, 838998045u, 845224512u, 785455976u, 782833566u, 790437219u, 720246717u, 715265728u, 713233874u, 713233874u, 711136484u, 798954843u, 798954843u, 886773202u, 901322480u, 901322480u, 915871757u, \n877401713u, 919345800u, 966203380u, 986584451u, 950736132u, 950736132u, 914822277u, 896144763u, 896144763u, 877401713u, \n1005196367u, 1115363077u, 1155667326u, 1158943312u, 1086788025u, 1086788025u, 1014632737u, 1009914552u, 1009914552u, 1005196367u, \n984290686u, 997070407u, 1010177806u, 1036588973u, \n912790836u, 994580366u, 1014764840u, 1028133625u, 972558898u, 972558898u, 916918636u, 914821968u, 914821968u, 912790836u, \n1040781763u, 1099240383u, 1194202160u, 1182142292u, 1128402643u, 1128402643u, 1074662994u, 1057755147u, 1057755147u, 1040781763u, \n1110512037u, 1080103158u, 1080103158u, 1049759816u, \n1021907712u, 1037308834u, 1052644353u, 1067979855u, \n951259785u, 1021252901u, 1054413581u, 1065684916u, 1011683128u, 1011683128u, 957746877u, 954470563u, 954470563u, 951259785u, \n1081282256u, 1236210081u, 1329204715u, 1351814065u, 1222642635u, 1222642635u, 1093536740u, 1087376730u, 1087376730u, 1081282256u, \n1093537233u, 1112542833u, 1128533591u, 1144720968u, \n970788824u, 1069617750u, 1086459760u, 1109527795u, 1038159137u, 1038159137u, 966790479u, 968822420u, 968822420u, 970788824u, \n1107364986u, 1253052242u, 1443498917u, 1495205539u, 1496778403u, 1496778403u, 1498416803u, 1315309284u, 1315309284u, 1132201766u, 1119816144u, 1119816144u, 1107364986u, \n1259277024u, 1219234598u, 1181617054u, 1127877311u, \n1148651959u, 1125714975u, 1114312489u, 984157641u, 979504088u, 979504088u, 974850535u, 1061751247u, 1061751247u, 1148651959u, \n1482426188u, 1471547670u, 1471547670u, 1460734688u, 1502023144u, 1554057965u, 1507002607u, 1542325930u, 1510147520u, 1482426188u, 1482426188u, 1482426188u, 1482426188u, \n1318126872u, 1416168766u, 1497171083u, 1588396892u, 1607598876u, 1615070189u, 1597703349u, 1484130769u, 1203243521u, 1163987121u, 1171130276u, 1171130276u, 1178338967u, 1248200152u, 1248200152u, 1318126872u, \n977537817u, 1070730332u, 1162676890u, 1194985399u, 1166214791u, 1166214791u, 1137509719u, 1055328070u, 1055328070u, 973146421u, 975374887u, 975374887u, 977537817u, \n982714778u, 1000933916u, 1021315604u, 1039469055u, \n1020595420u, 1007881412u, 994708678u, 984157227u, \n979898112u, 999558935u, 1004670811u, 1011290010u, \n967447012u, 978784848u, 992154206u, 1006309959u, \n932516965u, 946738381u, 960894154u, 975115445u, \n895096353u, 906696315u, 916395733u, 925243183u, \n798430627u, 807933548u, 808195929u, 806754381u, \n853546672u, 859838314u, 864032810u, 883693756u, \n753735027u, 760485528u, 760485528u, 767236030u, \n577969038u, 577968491u, 548411704u, 548411327u, 548410875u, 572069182u, 598414467u, 615650313u, 632164637u, 647827967u, 647827523u, 648023622u, 622333510u, 594480710u, 600837254u, 611847258u, 603065347u, 606735000u, 588122740u, 632031432u, 601163227u, 634651991u, 622133647u, 705364512u, 721421601u, 762971291u, 779683256u, 801048298u, 814155960u, 814155960u, 827198086u, 808848344u, 808848344u, 790498601u, 786435501u, 780144012u, 773590356u, 764808719u, 753798584u, 742526277u, 734203527u, 733614006u, 740561279u, 780276116u, 803738419u, 835457843u, 875959091u, 929631931u, 920390684u, 900662914u, 1002374272u, 1098056832u, 1189872768u, 1248134705u, 1338966897u, 1326384964u, 1247152194u, 1161824216u, 1115884315u, 985138521u, 985140202u, 992349570u, 998379283u, 976752664u, 983175449u, 981275146u, 958403280u, 952046588u, 937170142u, 917181843u, 880940972u, 842733366u, 806753864u, 780342681u, 756225307u, 732042886u, 794565598u, 720837775u, 755834876u, 792273807u, 841822452u, 1065759730u, 1099903972u, 1105803595u, 1030568024u, 657208659u, 577970249u, 577969038u, 577969038u, 577969038u, 577969038u, \n798099081u, 800196598u, 790825287u, 815860325u, 792660633u, 791153645u, 789712195u, 790170942u, 790170942u, 790629689u, 798821722u, 798821722u, 806948219u, 731386304u, 917245717u, 837946038u, 890898327u, 843711801u, 798099081u, 798099081u, 798099081u, 798099081u, \n814745676u, 830474637u, 840501998u, 815598708u, \n779224802u, 780536068u, 782895915u, 774507817u, \n623709769u, 640355913u, 640355913u, 657002057u, \n677774844u, 715064574u, 739444304u, 767624949u, \n681510645u, 708707859u, 733349716u, 758712314u, \n688196756u, 732564528u, 727124326u, 717883737u, 697567548u, 716376655u, 708971294u, 701565933u, 688196756u, 688196756u, 688196756u, 688196756u, 688196756u, \n610536535u, 615124061u, 617221228u, 620170361u, \n723127375u, 728370373u, 734465309u, 742722893u, \n634717509u, 715393393u, 671419162u, 675351397u, 679087019u, 689310503u, 693963438u, \n644286321u, 635701101u, 628164511u, 623118310u, \n624429123u, 634325059u, 639436982u, 645859572u, 639306042u, 633801110u, 623905173u, \n632296257u, 642519820u, 648155788u, 647631343u, \n740168055u, 722211383u, 712774437u, 709301298u, \n605361643u, 551950970u, 684203335u, 684202151u, \n626071602u, 625481964u, 630528284u, 638327068u, \n1264256599u, 1298925698u, 1340606118u, 1394607864u, \n1150093027u, 1157367645u, 1157367645u, 1164642263u, \n613491387u, 558245376u, 647571654u, 637217749u, 676211269u, 650454952u, 644752675u, 663430480u, 662841194u, 667429199u, 669985379u, 682830410u, 694430093u, 712125614u, 762981417u, 734275715u, 768420672u, 761735476u, 747382573u, 736044433u, 703145120u, 729162776u, 745415619u, 742140339u, 781723802u, 805251059u, 754722014u, 777987241u, 791553162u, 777791969u, 841033827u, 839133186u, 839133186u, 837232545u, 797320920u, 828973426u, 755638642u, 684532246u, 684532246u, 613491387u, \n673784576u, 678699884u, 685515855u, 692921685u, 691872876u, 683484035u, 693838490u, 683811533u, 683811533u, 673784576u, \n615981803u, 617227166u, 617227166u, 618472528u, \n737747479u, 756163143u, 762323612u, 768287474u, \n761667506u, 758390710u, 755310539u, 752885740u, 724836715u, 681386542u, 604905834u, 596910422u, 589308328u, 587997730u, 586621596u, 592061199u, 600056612u, 681583605u, 736568099u, 772415802u, 777134331u, 778707092u, 776282171u, 773857250u, 767958955u, 761667506u, 761667506u, 761667506u, 761667506u, \n627975466u, 614016915u, 655894221u, 651373293u, 0u );\nconst uvec2 boxes[] = uvec2[](\n  uvec2(1139607200u,1493187628u),\n  uvec2(1150957552u,1263614596u),\n  uvec2(1027212960u,1486699564u),\n  uvec2(1176964182u,1353586991u),\n  uvec2(1122897685u,1320754560u),\n  uvec2(1067192761u,1287856593u),\n  uvec2(1009325111u,1255024160u),\n  uvec2(948311682u,1222126194u),\n  uvec2(882645124u,1189228227u),\n  uvec2(809572885u,1156395796u),\n  uvec2(737286069u,827727548u),\n  uvec2(791156686u,879500714u),\n  uvec2(821171642u,970006259u),\n  uvec2(894637503u,1054940723u),\n  uvec2(931141648u,979573285u),\n  uvec2(944509951u,1109794002u),\n  uvec2(868423945u,897915686u),\n  uvec2(814029241u,833756101u),\n  uvec2(773069158u,784866245u),\n  uvec2(711136484u,915873123u),\n  uvec2(877401221u,986585736u),\n  uvec2(1005195553u,1158944517u),\n  uvec2(984290686u,1036588973u),\n  uvec2(912789868u,1028134798u),\n  uvec2(1040780882u,1194202160u),\n  uvec2(1049759816u,1110512037u),\n  uvec2(1021907712u,1067979855u),\n  uvec2(951258813u,1065686309u),\n  uvec2(1081281457u,1351815585u),\n  uvec2(1093537233u,1144721009u),\n  uvec2(966790387u,1109529174u),\n  uvec2(1107363491u,1498419026u),\n  uvec2(1127877311u,1259277214u),\n  uvec2(974850487u,1148653353u),\n  uvec2(1460733376u,1554058728u),\n  uvec2(1163985692u,1615071745u),\n  uvec2(973145431u,1194986588u),\n  uvec2(982714778u,1039469084u),\n  uvec2(984157227u,1020595420u),\n  uvec2(979898112u,1011290010u),\n  uvec2(967447012u,1006309982u),\n  uvec2(932516965u,975115469u),\n  uvec2(895096353u,925243183u),\n  uvec2(798430627u,808196173u),\n  uvec2(853546672u,883693756u),\n  uvec2(753735027u,767236030u),\n  uvec2(548405647u,1338980683u),\n  uvec2(731383097u,917246400u),\n  uvec2(814745676u,840502388u),\n  uvec2(774506210u,782896425u),\n  uvec2(623709769u,657002057u),\n  uvec2(677774590u,767624949u),\n  uvec2(681510419u,758712314u),\n  uvec2(688195900u,732564628u),\n  uvec2(610536535u,620170361u),\n  uvec2(723127375u,742722893u),\n  uvec2(634717509u,715393963u),\n  uvec2(623118189u,644286438u),\n  uvec2(623904835u,645859734u),\n  uvec2(632295919u,648155969u),\n  uvec2(709300599u,740168754u),\n  uvec2(551949803u,684203335u),\n  uvec2(625481778u,638327068u),\n  uvec2(1264256599u,1394608258u),\n  uvec2(1150093027u,1164642263u),\n  uvec2(558244210u,841034926u),\n  uvec2(673784474u,693839189u),\n  uvec2(615981803u,618472528u),\n  uvec2(737747479u,768287474u),\n  uvec2(586620843u,778707957u),\n  uvec2(614016298u,655895277u)\n);\nconst int paths[] = int[](\n  26,34,60,92,124,156,188,220,252,284,310,330,350,370,378,398,406,414,422,460,480,500,508,528,548,556,564,584,604,612,632,658,666,686,712,744,770,778,786,794,802,810,818,826,834,842,1024,1068,1076,1084,1092,1100,1108,1134,1142,1150,1164,1172,1186,1194,1202,1210,1218,1226,1234,1314,1334,1342,1350,1400,1408);\n\nconst int colors[boxes.length()] =\n  int[](1,0,1,2,2, 2,2,2,2,2, 1,1,1,1,0, 1,0,0,0,1, 1,1,0,1,1, 0,0,1,1,0, 1,1,0,1,1,\n        1,1,0,0,0, 0,0,0,0,0, 0,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,1, 0); \n\nvec3 getcolor(int i) {\n  vec3 col = vec3(1,0,1);\n  // Colors from Wikipedia SVG\n  if (i == 0) col = vec3(0x0a,0x26,0x62)/255.0;\n  if (i == 1) col = vec3(0xff,0xd2,0x14)/255.0;\n  if (i == 2) col = vec3(1);\n  col = pow(col,vec3(2.2));\n  return col;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// The Royal Banner of Ireland, Matthew Arcus, mla. 2022\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// https://en.wikipedia.org/wiki/Coat_of_arms_of_Ireland\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  //if (iFrame > 0 && iMouse.z <= 0.0) discard;\n  vec2 p = 2.0*fragCoord/iResolution.xy;\n  if (p.x > 1.0 || p.y > 1.0) discard;\n  if (iMouse.z > 0.0) {\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    p -= mouse;\n    p *= 0.25;\n    p += mouse;\n  }\n  p.y = 1.0-p.y;\n  p *= vec2(500,250);\n  vec3 col = getcolor(0);\n  float eps = 2.0; // Allow for line width \n  float px = fwidth(p.x);\n  float lwidth = 0.5;\n  int N = paths.length();\n  if (key(CHAR_X)) N = min(int(2.0*iTime),N); // Progressive effect\n  for (int i = 0; i < N; i++) {\n    vec4 box = decode(boxes[i]);\n    if ((p.x >= box.x-eps && p.x <= box.z+eps && p.y >= box.y-eps && p.y <= box.w+eps)) {\n      //assert(i != N-1); // With progressive drawing, show bounding boxes\n      int start = i == 0 ? 0 : paths[i-1];\n      int end = paths[i];\n      vec2 initpos = decode(points[start/2]);\n      vec2 p0 = initpos;\n      wind = 0;\n      float d = 1e8;\n      for (int j = start+2; j < end; j += 6) {\n        vec2 c0 = decode(points[(j+0)/2]);\n        vec2 c1 = decode(points[(j+2)/2]);\n        vec2 p1 = decode(points[(j+4)/2]);vec2(points[j+4],points[j+5]);\n        vec2 box1 = min(min(c0,c1),min(p0,p1))-eps;\n        vec2 box2 = max(max(c0,c1),max(p0,p1))+eps;\n        if (p.x < box1.x || p.y  < box1.y  || p.x > box2.x || p.y > box2.y) {\n          polywind(p,p0,p1);\n        } else {\n          d = min(d,bezier(p,mat4x2(p0,c0,c1,p1)));\n        }\n        p0 = p1;\n      }\n      polywind(p,p0,initpos); // Close curve if necessary\n      if (colors[i] != 0 && (wind&1) == 1) col = getcolor(colors[i]);;\n      col = mix(vec3(0),col,smoothstep(0.0,px,d-lwidth));\n    }\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col = 1.0-col;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const uint points[] = uint[](\n995824862u, 997921960u, 997921960u, 1000019059u, 1002771626u, 1002771626u, 1005589728u, \n992285384u, 995234578u, 995234578u, 998249307u, 1000805147u, 1000805147u, 1003360987u, \n947001990u, 966138265u, 986192190u, 986192190u, 986192190u, 972888499u, 965220940u, 957553382u, 949230354u, 949230354u, 971905867u, 977214150u, 983833197u, 985209434u, 987109960u, 989207094u, 989207093u, 989207092u, 989207092u, 989207092u, 989207093u, 989207094u, 997202417u, 1008474551u, 1008474551u, 1008474551u, 997202417u, 989207094u, 989469255u, 991763190u, 989862719u, 987831179u, 980884448u, 988159013u, 995499114u, 1003166805u, 1003166805u, 1003166805u, 999693242u, 1016797970u, 999693242u, 1003166805u, 1003166805u, 1004477638u, 998186288u, 998186288u, 1026825487u, 1043078068u, 1043078068u, 1043078161u, 1040129291u, 1040129291u, 1051401455u, 1058413738u, 1061100637u, 1063722001u, 1066736519u, 1071389773u, 1076043027u, 1092361515u, 1092361515u, 1091902600u, 1091902600u, 1091378148u, 1098390673u, 1114381456u, 1121197191u, 1119558768u, 1119558768u, 1117985881u, 1119558768u, 1119558768u, 1121197191u, 1123097733u, 1124342914u, 1124342914u, 1110711280u, 1106385177u, 1119033993u, 1131682808u, 1150622458u, 1150622458u, 1133648606u, 1141316015u, 1141316015u, 1155930612u, 1160976682u, 1160976682u, 1137973485u, 1146296117u, 1146296117u, 1165629297u, 1169954487u, 1169954487u, 1146951347u, 1149310345u, 1145967924u, 1142625503u, 1144984750u, 1144984750u, 1161958595u, 1165300793u, 1165300793u, 1141969977u, 1140659003u, 1140658890u, 1140658777u, 1136005614u, 1135677855u, 1135219007u, 1140002964u, 1140002964u, 1140002964u, 1130631446u, 1122308386u, 1113985326u, 1116344440u, 1110380595u, 1104351215u, 1097731994u, 1088360342u, 1079054226u, 1081740955u, 1081740955u, 1081740955u, 1072041740u, 1066078029u, 1060114318u, 1056116626u, 1047793558u, 1039470490u, 1033768805u, 1021120483u, 1008472160u, 997527620u, 983830596u, 970199108u, 973541545u, 976556249u, 979505417u, 976228743u, 976228868u, 976228993u, 983503477u, 991498942u, 999494406u, 1008472770u, 1014174345u, 1019548243u, 1038619224u, 1040257625u, 1039012411u, 1038094876u, 1038029308u, 1038094876u, 1039012411u, 1040257625u, 1040388697u, 1040454233u, 1040454233u, 1041568346u, 1041568346u, 1042747994u, 1042813520u, 1042813520u, 1042879045u, 1042813520u, 1042813520u, 1042747994u, 1044189788u, 1044189788u, 1045697117u, 1044189788u, 1044189788u, 1042747994u, 1042616942u, 1042616942u, 1042485890u, 1047597781u, 1055331086u, 1055331086u, 1055331086u, 1047597781u, 1042485890u, 1042485890u, 1042485890u, 1042420355u, 1042027408u, 1049105463u, 1049105554u, 1049040098u, 1041110243u, 1041110243u, 1041110243u, 1003820259u, 993203421u, 982521048u, 984749337u, 984749455u, 984749574u, 978523691u, 978523691u, 989599292u, 992286219u, 994973152u, 997594549u, 1005131162u, 1014896074u, 1024660987u, 1037571525u, 1044649397u, 1051792805u, 1048188449u, 1048188449u, 1048188449u, 1040651981u, 1028658904u, 1016731362u, 1007818445u, 1000281907u, 995170168u, 986126225u, 978851760u, 981211069u, 981211069u, 983635914u, 981211069u, 981211069u, 978851760u, 975312830u, 972101582u, 970069989u, 963909675u, 936384647u, 920852501u, 920852501u, 919476472u, 938154264u, 938154264u, 949229869u, 934615487u, 926882315u, 922229393u, 915872453u, 916134600u, 916265673u, 916265673u, 917576405u, 917576405u, 918887137u, 920263384u, 920263384u, 921705168u, 920263384u, 920263384u, 918887137u, 918952674u, 918952674u, 919083747u, 918952674u, 918952674u, 918887137u, 917838567u, 917838567u, 916789997u, 922753799u, 934812446u, 947001990u, 947001990u, 947001990u, 947001990u, \n934615487u, 949229870u, 938154264u, 938154264u, 919476472u, 920852502u, 920852502u, 936384647u, 963909675u, 970069989u, 972101582u, 975312830u, 978851760u, 978655151u, 978655151u, 978524078u, 978524078u, 929896120u, 909579324u, 889328065u, 843518080u, 843518080u, 843518080u, 829362229u, 838340386u, 847318544u, 837881285u, 834080232u, 830279178u, 825560620u, 821366293u, 817106430u, 812846728u, 806227506u, 799608284u, 798231982u, 792071684u, 785976922u, 778374792u, 781258416u, 782044860u, 782110403u, 781717191u, 783945421u, 796987131u, 810225629u, 796987131u, 783945421u, 781717191u, 780734161u, 776867527u, 773197482u, 768020098u, 760483544u, 764219153u, 768020299u, 761401380u, 771756045u, 782176246u, 792989606u, 793514003u, 793972864u, 808587512u, 793514243u, 778375439u, 770838828u, 771756429u, 772739566u, 780276527u, 788271741u, 796332492u, 812388818u, 817107570u, 821826322u, 828445636u, 828445636u, 829756330u, 829756330u, 831067024u, 831067024u, 836047950u, 835720391u, 838210741u, 838210741u, 840701090u, 842536278u, 842536278u, 844371466u, 847189479u, 847189479u, 850073029u, 850859681u, 850859681u, 851711869u, 856364877u, 856364877u, 861017884u, 861017884u, 862066675u, 863377467u, 865867813u, 865867813u, 868358159u, 868358159u, 869996688u, 877992209u, 885463434u, 912333472u, 915872453u, 922229393u, 926882315u, 934615487u, 934615487u, 934615487u, 934615487u, \n810159696u, 815861471u, 815861471u, 821628783u, 815861471u, 815861471u, 810159696u, 810159696u, 810159696u, 810159696u, \n1040454233u, 1040454233u, 1040323161u, 1040257625u, 1040912999u, 1041633909u, 1042485890u, 1042616942u, 1042616942u, 1042747995u, 1041568346u, 1041568346u, 1040454233u, 1040454233u, 1040454233u, 1040454233u, \n916265674u, 916265674u, 916134600u, 915872453u, 914889421u, 913906387u, 912857815u, 912857815u, 914299618u, 916789997u, 917838567u, 917838567u, 918887137u, 917576405u, 917576405u, 916265674u, 916265674u, 916265674u, 916265674u, \n1089938112u, 1090658966u, 1090789995u, 1090593346u, 1089217090u, 1051206228u, 1039081988u, 1026695602u, 1004806585u, 990782038u, 976757491u, 951460772u, 939074257u, 935862938u, 934224489u, 933569087u, 931537350u, 937435523u, 937435523u, 937435523u, 901456395u, 925639513u, 899228600u, 884613738u, 884613738u, 884613738u, 877405132u, 897328128u, 915219503u, 930685976u, 930685976u, 930685976u, 912991596u, 891692375u, 891692375u, 900998677u, 931931403u, 931931403u, 930293092u, 933635529u, 933635529u, 959259862u, 961553929u, 963913532u, 964241180u, 968566604u, 972892029u, 979576895u, 966600763u, 953559095u, 938616830u, 928262138u, 917972982u, 885336135u, 878389222u, 871376773u, 862398276u, 861021903u, 859711066u, 854730314u, 850732622u, 846734930u, 839722614u, 842082019u, 842082019u, 841033508u, 838149913u, 850339751u, 850339751u, 862529589u, 850339751u, 850339751u, 838149913u, 837691160u, 837232405u, 836773648u, 832775911u, 823076523u, 821765900u, 820455277u, 822749121u, 820783090u, 818751522u, 816130099u, 816457855u, 816785612u, 812788126u, 820455842u, 828058022u, 828778825u, 840706385u, 852699481u, 873015609u, 864037262u, 855058915u, 844704255u, 843721288u, 842738320u, 847063676u, 851389056u, 855714436u, 859712193u, 860695289u, 861678386u, 868690782u, 870722285u, 872688252u, 874326475u, 883042754u, 892807608u, 896805411u, 896805411u, 903228076u, 908274412u, 911289079u, 911289079u, 911813267u, 919546485u, 927214168u, 931736234u, 933833438u, 935865107u, 940190580u, 949234569u, 949234569u, 948447989u, 956181239u, 963848953u, 967257003u, 981871568u, 981871568u, 982264693u, 987704155u, 993143618u, 995961605u, 996158181u, 996158181u, 997862306u, 1011755975u, 1011755975u, 1012476817u, 1017391950u, 1023027968u, 1025125083u, 1039477465u, 1053829847u, 1064446503u, 1064446503u, 1064446503u, 1046817408u, 1034168855u, 1021520302u, 1002841888u, 1053107778u, 1068115462u, 1076110860u, 1078535696u, 1078011196u, 1084498950u, 1089938112u, 1089938112u, 1089938112u, 1089938112u, \n834611185u, 826943401u, 821372892u, 821372892u, 821372892u, 826943401u, 834611185u, 842278969u, 851716246u, 851716246u, 851716246u, 842278969u, 834611185u, 834611185u, 834611185u, 834611185u, \n1331826582u, 1324289770u, 1316687367u, 1300303367u, 1300303367u, 1322519797u, 1303383075u, 1303383075u, 1297747345u, 1265241489u, 1201409425u, 1183649663u, 1189221211u, 1193547359u, 1241520098u, 1274091886u, 1302010561u, 1307712824u, 1307712824u, 1307581748u, 1307385136u, 1307188525u, 1293360153u, 1276845071u, 1255152515u, 1233197814u, 1250171303u, 1250171303u, 1204558433u, 1234836477u, 1234836477u, 1228872777u, 1228872777u, 1222843542u, 1204886872u, 1185553392u, 1185553392u, 1183587692u, 1208556916u, 1208556916u, 1161961293u, 1211899999u, 1211899999u, 1191911237u, 1221533254u, 1221533254u, 1229201346u, 1254497991u, 1254497991u, 1242177219u, 1222188364u, 1264459011u, 1306729658u, 1322393748u, 1274159619u, 1225859955u, 1173627202u, 1163927522u, 1154293379u, 1121328266u, 1121328266u, 1121262729u, 1121262729u, 1121197191u, 1114381456u, 1098390673u, 1091378148u, 1091902600u, 1091902600u, 1092361515u, 1092361515u, 1076043027u, 1071389773u, 1066736519u, 1063722001u, 1061100637u, 1058413738u, 1051401455u, 1040129291u, 1040129291u, 1043143697u, 1043143604u, 1043143604u, 1026825487u, 998186288u, 998186288u, 1004477638u, 1003166805u, 1003166805u, 995499114u, 988159013u, 980884448u, 987831179u, 989862719u, 991763190u, 989469255u, 989207094u, 987109960u, 985274970u, 983833197u, 977214150u, 971905867u, 949230354u, 949230354u, 957553382u, 965220940u, 972888499u, 986192190u, 986192190u, 986192190u, 966138265u, 947001990u, 934812446u, 922753799u, 916789997u, 916724461u, 916724461u, 916593390u, 898898767u, 848370983u, 848370983u, 826416621u, 809770651u, 786505427u, 763174668u, 750526127u, 738532938u, 726539749u, 728571563u, 728571563u, 728571626u, 728571626u, 728571688u, 728571814u, 743186261u, 751837045u, 760487829u, 731193427u, 715268203u, 699277444u, 707600661u, 711270677u, 714940693u, 715923713u, 720904546u, 725885379u, 731914679u, 737222986u, 742531293u, 753868988u, 760881284u, 767828043u, 768155776u, 768155885u, 768155994u, 763502990u, 756163027u, 748888600u, 758522420u, 762520136u, 766517852u, 768877169u, 771826353u, 774841074u, 781525693u, 781525443u, 781525192u, 790831300u, 798498903u, 806100970u, 806101124u, 805773585u, 805446046u, 807805363u, 813113787u, 818422211u, 824123815u, 827793657u, 831397963u, 843063432u, 843063432u, 846078120u, 850403480u, 850403480u, 848044087u, 853090274u, 853090274u, 857743472u, 871374964u, 871374964u, 868360219u, 873013190u, 873013190u, 880681108u, 896016500u, 896016500u, 892674087u, 894312370u, 894312370u, 899686435u, 909320182u, 909320182u, 904339349u, 908992276u, 908992276u, 916660186u, 929963958u, 929963958u, 923279112u, 933633776u, 939925288u, 946282337u, 955588392u, 955588392u, 964566792u, 966270853u, 966270853u, 966270853u, 976690985u, 984227572u, 988028633u, 992419535u, 996548302u, 995106466u, 995106466u, 993664631u, 995106466u, 995106466u, 996548302u, 1004216010u, 1010835172u, 1010835172u, 1010835172u, 1004216010u, 996548302u, 996679379u, 996679379u, 996875992u, 1010507851u, 1043472532u, 1059791032u, 1076109533u, 1087054206u, 1087054206u, 1087447429u, 1087447429u, 1087906189u, 1079648351u, 1056710509u, 1056710509u, 1056710509u, 1079648351u, 1087906189u, 1090462140u, 1090462140u, 1093083628u, 1090462140u, 1090462140u, 1087906189u, 1089479111u, 1090462212u, 1090658882u, 1090658882u, 1090789954u, 1090789954u, 1093280322u, 1093280322u, 1095836226u, 1093280322u, 1093280322u, 1090789954u, 1090789954u, 1090658882u, 1090658882u, 1090789996u, 1090658966u, 1089938112u, 1084498950u, 1078076732u, 1078535696u, 1079059985u, 1079453201u, 1079453201u, 1081812499u, 1081812499u, 1084171798u, 1081812499u, 1081812499u, 1079453201u, 1079453201u, 1079059985u, 1078535696u, 1078666832u, 1079453320u, 1081091764u, 1088169841u, 1115236559u, 1097935319u, 1080634079u, 1076243188u, 1078012919u, 1078012919u, 1080109866u, 1092758249u, 1092758249u, 1089416192u, 1098722437u, 1098722437u, 1096428467u, 1106389850u, 1106389850u, 1115368505u, 1131031532u, 1131031532u, 1119365995u, 1119365825u, 1119365655u, 1124346315u, 1131358796u, 1138371277u, 1150364365u, 1159342720u, 1168321076u, 1186605369u, 1186605571u, 1186605773u, 1189620490u, 1192962854u, 1196239682u, 1195584403u, 1189948396u, 1184312389u, 1179266254u, 1176644907u, 1173958024u, 1160654430u, 1155018253u, 1149316540u, 1138371976u, 1135029692u, 1131687409u, 1123364353u, 1128017458u, 1132670562u, 1132670651u, 1131687684u, 1130704716u, 1136996180u, 1134374821u, 1134374821u, 1139617588u, 1150824156u, 1139617588u, 1134374821u, 1134374821u, 1131687926u, 1126051826u, 1133654075u, 1141321859u, 1142370524u, 1150693560u, 1159016595u, 1161638068u, 1161965820u, 1162293573u, 1171272126u, 1174941997u, 1178611868u, 1177628626u, 1177300893u, 1176973161u, 1180970844u, 1186606892u, 1192242940u, 1201942223u, 1202597688u, 1203253153u, 1201287287u, 1205285007u, 1209282728u, 1214591156u, 1214918743u, 1215246330u, 1217605602u, 1223897042u, 1230254017u, 1235234741u, 1235562337u, 1235889932u, 1235234507u, 1225207499u, 1215246027u, 1214262971u, 1214262890u, 1214262809u, 1212231096u, 1224879532u, 1237527968u, 1250438535u, 1254436178u, 1254436178u, 1244409146u, 1240214758u, 1236020371u, 1229532318u, 1229532318u, 1229532318u, 1229794435u, 1236413557u, 1243098216u, 1264593981u, 1269312408u, 1269312408u, 1261054913u, 1254173563u, 1247292213u, 1244670775u, 1244670775u, 1244670775u, 1248013074u, 1257712402u, 1267477266u, 1278159505u, 1278159505u, 1278159505u, 1269049995u, 1265707611u, 1262430762u, 1258170882u, 1252207100u, 1252207100u, 1259284905u, 1268394398u, 1277503891u, 1283008794u, 1283008794u, 1283008794u, 1276193072u, 1269508349u, 1262823626u, 1252403423u, 1252403423u, 1252403423u, 1257318540u, 1268590724u, 1279928443u, 1291462669u, 1291462669u, 1291462669u, 1281959954u, 1276192724u, 1276192724u, 1263937379u, 1262429944u, 1260856972u, 1264199287u, 1261839938u, 1258890751u, 1247552916u, 1249191135u, 1249191135u, 1245521090u, 1234904396u, 1224222165u, 1205544596u, 1189029435u, 1189029435u, 1165174231u, 1173627674u, 1173627674u, 1334978083u, 1335828123u, 1336743872u, 1224415168u, 1210258422u, 1210258422u, 1186729501u, 1269305001u, 1269305001u, 1278611135u, 1271074672u, 1263472674u, 1262621153u, 1262621153u, 1262621153u, 1269895662u, 1275204045u, 1275204045u, 1277235719u, 1271468637u, 1265701555u, 1261704118u, 1273697378u, 1285690638u, 1311905054u, 1311905054u, 1311905054u, 1301222530u, 1306989531u, 1312756532u, 1318523663u, 1320292995u, 1320292995u, 1332745271u, 1357124453u, 1357124453u, 1340740313u, 1344279068u, 1347817824u, 1350504741u, 1350504649u, 1350504649u, 1369575604u, 1369575275u, 1369575275u, 1339363394u, 1331826582u, 1331826582u, 1331826582u, 1331826582u, \n1154625506u, 1149382684u, 1149382842u, 1149382842u, 1149382842u, 1149382684u, 1154625506u, 1159802792u, 1165176671u, 1165176671u, 1165176671u, 1159802792u, 1154625506u, 1154625506u, 1154625506u, 1154625506u, \n1276056033u, 1276056033u, 1276383662u, 1282216312u, 1288048962u, 1295913173u, 1297879168u, \n1307841736u, 1307841736u, 1284904123u, 1289425693u, \n1106978479u, 1106978479u, 1113008049u, 1135617953u, \n1203513120u, 1209149208u, 1209149208u, 1214850832u, 1214850832u, 1220814600u, 1220814680u, 1220814761u, 1220814842u, 1220814842u, \n843327092u, 843327092u, 828646783u, 810165826u, 810165826u, 824845890u, 829368034u, 834217733u, 834217733u, 839067431u, 840640263u, 840640263u, 842213096u, 842147560u, 839788185u, 843327092u, 843327092u, 843327092u, 843327092u, \n821372892u, 831858664u, 842803273u, 851716246u, \n816785465u, 811607973u, 790308782u, 790308782u, 798303954u, 821700390u, 821700390u, 821700390u, 821307270u, 821831604u, 822355939u, 816785465u, 816785465u, 816785465u, 816785465u, 816785465u, \n861809438u, 846801762u, 846146656u, 846146656u, 828320550u, 844376688u, 844376688u, 844376688u, 845490817u, 850668159u, 855911037u, 858532526u, 859581140u, 860629754u, 861809438u, 861809438u, 861809438u, 861809438u, 861809438u, \n816130164u, 816130164u, 784738323u, 785787284u, 785787284u, 799353037u, 815081770u, \n1134309285u, 1134309285u, 1139552051u, 1150758620u, \n1149382842u, 1149382842u, 1151938628u, 1157115913u, 1162358735u, 1165176671u, 1165176671u, \n1131753236u, 1115959050u, 1109012387u, 1109012387u, 1103572559u, 1127558692u, 1127558692u, 1127558692u, 1132473967u, 1132474008u, 1132474049u, 1131753236u, 1131753236u, 1131753236u, 1131753236u, 1131753236u, \n1129590795u, 1129590795u, 1108160756u, 1134375379u, 1134375379u, 1131557103u, 1141584038u, \n1166815556u, 1152790918u, 1159803517u, 1159803517u, 1130639851u, 1147220151u, 1147220151u, 1147220151u, 1152004293u, 1156657324u, 1161375890u, 1165242555u, 1165504743u, 1165766932u, 1166815556u, 1166815556u, 1166815556u, 1166815556u, 1166815556u, \n1232940973u, 1239101711u, 1216557424u, 1216557424u, 1224945898u, 1213345939u, 1213345939u, 1213345939u, 1215246435u, 1215246375u, 1215246316u, 1218654166u, 1222258639u, 1225863113u, 1232940973u, 1232940973u, 1232940973u, 1232940973u, 1232940973u, \n1086988670u, 1086988670u, 1076043996u, 1059725496u, 1043406996u, 1010442315u, 996810455u, \n938744089u, 938744089u, 960829766u, 978524296u, 996153290u, 1013454750u, 1031411614u, \n1003101269u, 1003101269u, 999627706u, 1016797970u, \n1091902450u, 1091902450u, 1086135128u, 1086134881u, \n1043078068u, 1043078068u, 1049303735u, 1049303584u, \n723853714u, 710877615u, 701899477u, 701899477u, 690233787u, 707862789u, 707862789u, 707862789u, 710091034u, 712974609u, 715858184u, 717955366u, 719397186u, 720839005u, 723853714u, 723853714u, 723853714u, 723853714u, 723853714u, \n771760817u, 758129385u, 753804272u, 753804272u, 744170262u, 755835440u, 755835440u, 755835440u, 759964212u, 763961934u, 767959656u, 769729171u, 771760817u, \n728505954u, 728505954u, 702553614u, 699866965u, 699866965u, 716513016u, 728506164u, \n807084426u, 804725278u, 804725278u, 802431665u, 802431665u, 813703752u, 817701307u, \n1112545835u, 1112545835u, 1117854043u, 1113397318u, \n1140922807u, 1140922807u, 1147607183u, 1125652418u, \n1146033974u, 1146033974u, 1134302968u, 1126504047u, \n1144525998u, 1144525998u, 1138693285u, 1132729412u, 1127814132u, 1119163334u, 1114510173u, \n1118376211u, 1118376211u, 1109266651u, 1094586557u, \n1043206312u, 1043206312u, 1032917007u, 1027149920u, 1021317296u, 1012863198u, 1019678982u, 1026494767u, 1029378333u, 1035538719u, 1041633569u, 1050349822u, 1043206312u, 1043206312u, 1043206312u, 1043206312u, \n1048908852u, 1013912620u, 1013912620u, 978916387u, 978916387u, 933893177u, 955191707u, 955191707u, 953750462u, 990581694u, 1027412926u, 1044386757u, 1044386757u, \n780538537u, 780538537u, 752489229u, 740495839u, 740495839u, 758780459u, 773001702u, \n765398948u, 765398948u, 743968580u, 734138268u, 734138268u, 740757171u, 763498201u, \n783355494u, 783355494u, 773918111u, 757206500u, 757206500u, 772345064u, 795676125u, \n823463457u, 823463457u, 820579625u, 805768401u, 805768401u, 824118435u, 836046304u, \n781323974u, 781323974u, 795676389u, 810225629u, \n1044976237u, 1044976237u, 1019744849u, 1014108809u, 1008472770u, 999494406u, 991498942u, 983503477u, 976163457u, 976163332u, 976163207u, 979505418u, 976490713u, 973476009u, 970199108u, 983830596u, 997462084u, 1008472160u, 1021120483u, 1033768805u, 1039404954u, 1047728022u, 1056051090u, 1060048782u, 1066012493u, 1072041741u, 1081675420u, 1081675420u, 1081675420u, 1079054226u, 1088360342u, 1097666458u, 1104351215u, 1110315059u, 1116278904u, 1113985326u, 1122308386u, 1130631446u, 1139937428u, 1139937428u, 1139937428u, 1135153471u, 1135612319u, 1136005614u, 1140593241u, 1140593354u, 1140593467u, 1141969977u, 1165235257u, 1165235257u, 1161893059u, 1144919215u, 1144919215u, 1142625503u, 1145967924u, 1149244809u, 1146951348u, 1169888952u, 1169888952u, 1165563761u, 1146296117u, 1146296117u, 1137973485u, 1160911146u, 1160911146u, 1155930612u, 1141250479u, 1141250479u, 1133648606u, 1150622458u, 1150622458u, 1131617273u, 1118968457u, 1106319641u, 1110645745u, 1124277378u, 1124277378u, 1100356803u, 1091312612u, 1091837064u, 1091837064u, 1092361516u, 1092361516u, 1076043027u, 1071389773u, 1066736519u, 1063722001u, 1061035102u, 1058413738u, 1051401455u, 1040063755u, 1040063755u, 1043078161u, 1043078068u, 1043078068u, 1026759951u, 998120752u, 998120752u, 1004477639u, 1003101269u, 1003101269u, 995499114u, 988159013u, 980818912u, 987831180u, 989797183u, 991828722u, 989141556u, 989141556u, \n1008474551u, 1008474551u, 990452244u, 983833197u, 977148614u, 971840331u, 949230354u, 949230354u, 957553382u, 965155404u, 972822963u, 986126654u, 986126654u, 986126654u, 966072729u, 947001990u, 929766236u, 916527859u, 916527859u, 920787644u, 925702679u, 934549951u, 949229870u, 938088728u, 938088728u, 919476472u, 920786966u, 920786966u, 936319111u, 963844139u, 970069989u, 976295839u, 992679834u, 1000281907u, 1007818445u, 1016665827u, 1028658904u, 1040651981u, 1048188449u, 1048188449u, 1048188449u, 1051727269u, 1044649397u, 1037505989u, 1024660987u, 1014896075u, 1005131162u, 997594549u, 994907616u, 992286219u, 989599292u, 978523692u, 978523692u, 984749574u, 984749455u, 984749337u, 982521048u, 993137886u, 1003820259u, 1041110243u, 1041110243u, 1041110243u, 1049040098u, 1049040018u, 1049105463u, 1041961872u, 1042420355u, \n978458542u, 978458542u, 929896120u, 909579324u, 889262529u, 843518080u, 843518080u, 843518080u, 829362229u, 838274850u, 847253008u, 837815749u, 834080232u, 830279178u, 825560620u, 821300757u, 817040894u, 812846728u, 806227506u, 799608284u, 798166446u, 792071684u, 785911386u, 778374792u, 781192880u, 784010968u, 778374866u, 773197482u, 768020098u, 760418008u, 764219153u, 767954763u, 761401380u, 771756045u, 782110710u, 792989606u, 793448467u, 793907328u, 808587512u, 793448707u, 778375439u, 770838828u, 771756429u, 772674030u, 780276527u, 788271741u, 796332492u, 812323282u, 817042034u, 821760786u, 828380100u, 828380100u, 829690794u, 829690794u, 831067024u, 831067024u, 836047950u, 835720391u, 838210741u, 838210741u, 840701090u, 842536278u, 842536278u, 844371466u, 847189479u, 847189479u, 850007493u, 850859681u, 850859681u, 851711869u, 856364877u, 856364877u, 861017884u, 861017884u, 862001139u, 863311931u, 865867813u, 865867813u, 868358159u, 868358159u, 869996688u, 877992209u, 885987731u, 916265674u, 916265674u, \n1079387665u, 1079387665u, 1071392249u, 1053042242u, 1002776352u, 1021454766u, 1034103319u, 1046751872u, 1064380967u, 1064380967u, 1064380967u, 1053764311u, 1039411929u, 1025059547u, 1022962432u, 1017326414u, 1012411281u, 1011690439u, 1011690439u, 997796770u, 996092645u, 996092645u, 995896069u, 993078082u, 987638619u, 982199157u, 981806032u, 981806032u, 967191467u, 963783418u, 956115703u, 948382453u, 949169033u, 949169033u, 940125045u, 935799571u, 933767902u, 931670698u, 927148632u, 919480949u, 911813267u, 911223543u, 911223543u, 908208876u, 903162540u, 896739875u, 896739875u, 892938679u, 882977218u, 874326476u, 872622716u, 870656749u, 868625246u, 861678386u, 860629753u, 859646657u, 855648900u, 851323520u, 846998140u, 842672784u, 843655752u, 844704255u, 854993379u, 863971726u, 872950073u, 852699481u, 840706385u, 828713289u, 828058022u, 820390306u, 812722590u, 816720076u, 816392319u, 816064563u, 818685986u, 820717554u, 822683585u, 820389741u, 821700364u, 823076523u, 832710375u, 836708112u, 840705848u, 842016483u, 842016483u, 839722614u, 846669394u, 850667086u, 854664778u, 859645530u, 861021903u, 862332740u, 871311237u, 878323686u, 885270599u, 917907446u, 928262138u, 938551294u, 953559095u, 966535227u, 979511359u, 972826493u, 968501068u, 964175644u, 963847996u, 961553929u, 959194326u, 933569993u, 933569993u, 930227556u, 931865867u, 931865867u, 900933141u, 891626839u, 891626839u, 912926060u, 930620440u, 930620440u, 930620440u, 915219503u, 897262592u, 877405132u, 884548202u, 884548202u, 884548202u, 899163064u, 925573977u, 901390859u, 937369987u, 937369987u, 937369987u, 931471814u, 933503551u, 934158953u, 935862938u, 939074257u, 951395236u, 976691955u, 990716502u, 1004741049u, 1026695602u, 1039016452u, 1051402838u, 1090724417u, 1090724417u, \n1010769636u, 1010769636u, 995172007u, 984162036u, 976625449u, 966205317u, 966205317u, 966205317u, 964501256u, 955522856u, 955522856u, 946216801u, 939859752u, 933568240u, 923213576u, 929898422u, 929898422u, 916594650u, 908926740u, 908926740u, 904273813u, 909254646u, 909254646u, 899620899u, 894246834u, 894246834u, 892608551u, 895950963u, 895950963u, 880615572u, 872947654u, 872947654u, 868294683u, 871309427u, 871309427u, 857677935u, 853024738u, 853024738u, 847978551u, 850337944u, 850337944u, 846012584u, 842997896u, 842997896u, 831332427u, 827728121u, 824058278u, 818356675u, 813048251u, 807739827u, 805380510u, 805708049u, 806035588u, 806035434u, 798433367u, 790765764u, 781459656u, 781459907u, 781460157u, 774775538u, 771760817u, 768746096u, 766452316u, 762454600u, 758456884u, 748823064u, 756097491u, 763437454u, 768090458u, 768090349u, 768090240u, 767762507u, 760815748u, 753803452u, 742465756u, 737157450u, 731849143u, 725819843u, 720839010u, 715858177u, 714875157u, 711205141u, 707535125u, 699211908u, 715202667u, 731127891u, 760422293u, 751771509u, 743120725u, 728506277u, 728506152u, 728506027u, 728506027u, 728506027u, 728506027u, 726474213u, 738467402u, 750460591u, 763109132u, 786439891u, 809705115u, 826351085u, 848305447u, 848305447u, 898833231u, 916593390u, \n1121328266u, 1121328266u, 1154227843u, 1163927522u, 1173561665u, 1225794419u, 1274094083u, 1322328212u, 1306729658u, 1264459011u, 1222122828u, 1242111683u, 1254432455u, 1254432455u, 1229135810u, 1221467718u, 1221467718u, 1191845701u, 1211834463u, 1211834463u, 1161895757u, 1208491380u, 1208491380u, 1183522156u, 1185553392u, 1185553392u, 1204821336u, 1222843542u, 1228807241u, 1228807241u, 1234770940u, 1234770940u, 1204492897u, 1250105767u, 1250105767u, 1233132278u, 1255086979u, 1276779535u, 1293294617u, 1307188525u, 1307319600u, 1307516212u, 1307712824u, 1307712824u, 1302010561u, 1274091886u, 1241454562u, 1193547359u, 1189221211u, 1183649663u, 1201409425u, 1265175953u, 1297681809u, 1303383075u, 1303383075u, 1322454261u, 1300237831u, 1300237831u, 1316687367u, 1324224234u, 1331761046u, 1339297858u, 1369509739u, 1369509739u, 1369510067u, 1350439113u, 1350439113u, 1350439204u, 1347752288u, 1344213532u, 1340674777u, 1357058917u, 1357058917u, 1332679735u, 1320227458u, 1320227458u, 1318458126u, 1312690996u, 1306923995u, 1301156994u, 1311773982u, 1311773982u, 1311773982u, 1285625102u, 1273631842u, 1261638581u, 1265636019u, 1271403101u, 1277170183u, 1275138509u, 1275138509u, 1269830125u, 1262555617u, 1262555617u, 1262555617u, 1263407138u, 1270943600u, 1278480062u, 1269173929u, 1269173929u, 1186663965u, 1210192886u, 1210192886u, 1224349631u, 1336678335u, 1335762587u, 1334912547u, 1173562138u, 1173562138u, 1165108695u, 1188963899u, 1188963899u, 1205413523u, 1224156629u, 1234773323u, 1245455554u, 1249125598u, 1249125598u, 1247421844u, 1258825215u, 1261774402u, 1264133750u, 1260791436u, 1262298871u, 1263871843u, 1276061652u, 1276061652u, 1281828882u, 1291397133u, 1291397133u, 1291397133u, 1279862907u, 1268525187u, 1257187467u, 1252337887u, 1252337887u, 1252337887u, 1262758089u, 1269442812u, 1276062000u, 1282943258u, 1282943258u, 1282943258u, 1277438355u, 1268328862u, 1259219369u, 1252141564u, 1252141564u, 1258105346u, 1262299690u, 1265642074u, 1268984459u, 1278093968u, 1278093968u, 1278093968u, 1267411729u, 1257646865u, 1247882001u, 1244539703u, 1244539703u, 1244539703u, 1247226677u, 1254108027u, 1260989376u, 1269181336u, 1269181336u, 1264528444u, 1243032679u, 1236348021u, 1229728898u, 1229466781u, 1229466781u, 1229466781u, 1235889299u, 1240149222u, 1244343609u, 1254305106u, 1254305106u, 1250307462u, 1237462432u, 1224813996u, 1212165560u, 1214131737u, 1214131818u, 1214131899u, 1215180491u, 1225141963u, 1235168971u, 1235824395u, 1235496800u, 1235169205u, 1230122945u, 1223831505u, 1217474529u, 1215180794u, 1214853207u, 1214525620u, 1209151655u, 1205153935u, 1201156215u, 1203187617u, 1202532152u, 1201876687u, 1192177403u, 1186541356u, 1180905308u, 1176907624u, 1177235357u, 1177563089u, 1178546331u, 1174876461u, 1171206590u, 1162228037u, 1161900284u, 1161572531u, 1158885523u, 1150562487u, 1142239452u, 1141256323u, 1133588538u, 1125920754u, 1131622390u, 1134243749u, 1136930644u, 1130573644u, 1131622147u, 1132605114u, 1132605026u, 1127951921u, 1123298817u, 1131621873u, 1134898620u, 1138240903u, 1149251004u, 1154887181u, 1160588894u, 1173892487u, 1176513835u, 1179200718u, 1184181316u, 1189882860u, 1195518867u, 1196174146u, 1192831782u, 1189554953u, 1186540237u, 1186540035u, 1186539833u, 1168190003u, 1159211648u, 1150233293u, 1138240205u, 1131293260u, 1124280778u, 1119300119u, 1119300289u, 1119300458u, 1130965996u, 1130965996u, 1115302968u, 1106324314u, 1106324314u, 1096297395u, 1098656901u, 1098656901u, 1089350656u, 1092627177u, 1092627177u, 1079978794u, 1077881846u, 1077881846u, 1076112116u, 1080568542u, 1097869782u, 1115171023u, 1088104305u, 1081026228u, 1073882616u, 1082795113u, 1089872576u, 1097015574u, 1056579437u, 1056579437u, \n3170970609u, 3166448673u, 3165072494u, 3165072572u, 3161009314u, 3155635343u, 3151113363u, 3156290752u, 3161468140u, 3161468240u, 3161468282u, 3159764405u, 3157405142u, 3170971094u, 3170971094u, 3184537046u, 3182177717u, 3180473722u, 3180473680u, 3180473580u, 3185650880u, 3190828179u, 3186306191u, 3180932258u, 3176869052u, 3176868974u, 3175492641u, 3170970609u, 3170970609u, 3170970609u, 3170970609u, \n610863775u, 610864498u, 652349060u, 668470670u, 680004830u, 676268770u, 639044263u, 645597958u, 648809344u, 644877245u, 637733930u, 615451482u, 615451232u, 600836704u, 600836704u, 586222176u, 586222426u, 563940394u, 556796861u, 552864640u, 556075783u, 562629287u, 525404898u, 521669854u, 533204366u, 549326468u, 590810482u, 590809759u, 600836767u, 600836767u, 610863775u, \n609225312u, 609225312u, 626003237u, 626003633u, 626003850u, 619450462u, 600838557u, 582226014u, 575672202u, 575671985u, 575671589u, 592448096u, 592448096u, 600836704u, 600836704u, 609225312u, \n1063192480u, 1063192303u, 1085474356u, 1092617857u, 1096550060u, 1093338890u, 1086785358u, 1124009765u, 1127744957u, 1116210496u, 1100088467u, 1058604385u, 1058604896u, 1048577888u, 1048577888u, 1038550880u, 1038550369u, 997065875u, 980944192u, 969409981u, 973145893u, 1010370382u, 1003816714u, 1000605356u, 1004537473u, 1011680820u, 1033963247u, 1033963424u, 1048577952u, 1048577952u, 1063192480u, \n1040189344u, 1040189344u, 1023411626u, 1023411346u, 1023411192u, 1029964642u, 1048576640u, 1067189090u, 1073742840u, 1073742994u, 1073743274u, 1056966560u, 1056966560u, 1048577952u, 1048577952u, 1040189344u, \n1048579584u, 1040387472u, 1038028000u, 1038027819u, 1030753383u, 1020988564u, 1012927626u, 1022168096u, 1031474108u, 1031473877u, 1031473779u, 1028393452u, 1024264608u, 1048578464u, 1048578464u, 1072892320u, 1068763628u, 1065683571u, 1065683669u, 1065683900u, 1074990112u, 1084230794u, 1076104340u, 1066404967u, 1059130411u, 1059130592u, 1056771472u, 1048579584u, 1048579584u, 1048579584u, 1048579584u, \n117835870u, 84280927u, 42272605u, 42272952u, 42273201u, 68487921u, 97520009u, 88476044u, 80546137u, 80546051u, 80545897u, 105908235u, 117508284u, 127862815u, 127862815u, 138151809u, 126551760u, 132711757u, 142804301u, 148440397u, 151782854u, 151586384u, 175178901u, 154206981u, 137888517u, 115147525u, 98502022u, 131991430u, 124913650u, 124913650u, 117835870u, \n121899129u, 121899129u, 77203257u, 58852897u, 48760199u, 43582635u, 41943808u, 69927705u, 84345704u, 94438402u, 112788762u, 133760964u, 133760964u, 127862815u, 127862815u, 121899129u, \n225316334u, 225905991u, 219417776u, 211029040u, 218958860u, 227937219u, 233180005u, 221776766u, 210504603u, 199822072u, 195234483u, 191171122u, 190581199u, 173411030u, 173411030u, 156175324u, 162663397u, 171117603u, 175639657u, 186322188u, 184421816u, 182783590u, 188943894u, 193727885u, 196087060u, 204475796u, 214371831u, 225316334u, 225316334u, 225316334u, 225316334u, \n169811929u, 217194457u, 235151954u, 219030344u, 207496184u, 174203839u, 170336647u, 176562667u, 184558108u, 188555744u, 195699059u, 182067231u, 165683231u, 165683008u, 165683008u, 165682785u, 182066785u, 195697933u, 188554400u, 184556644u, 176626837u, 170335481u, 174201537u, 207493768u, 219028280u, 235150382u, 217194151u, 169811623u, 169811776u, 169811776u, 169811929u, \n165683136u, 165683136u, 212148416u, 238100672u, 252321984u, 266215516u, 287121216u, 266214948u, 252321216u, 238099904u, 212147648u, 165682880u, 165682880u, 165683008u, 165683008u, 165683136u, \n58728256u, 66068163u, 77602463u, 89464479u, 85532208u, 82582940u, 83238176u, 90185133u, 96738875u, 111877691u, 118300219u, 127147532u, 132128205u, 132128576u, 132128576u, 132128947u, 127148148u, 118300741u, 111878213u, 96739397u, 90185939u, 83239264u, 82583781u, 85532752u, 89464801u, 77602785u, 66068413u, 58728256u, 58728256u, 58728256u, 58728256u, 0u );\nconst uvec2 boxes[] = uvec2[](\n  uvec2(995824755u,1005589728u),\n  uvec2(992285384u,1003361115u),\n  uvec2(915869339u,1169956144u),\n  uvec2(760483246u,978852549u),\n  uvec2(810159696u,821628783u),\n  uvec2(1040257625u,1042748034u),\n  uvec2(912857797u,918887149u),\n  uvec2(812786051u,1090792400u),\n  uvec2(821372841u,851716246u),\n  uvec2(699272227u,1369584062u),\n  uvec2(1149382495u,1165177018u),\n  uvec2(1276055680u,1297879521u),\n  uvec2(1284903709u,1307841736u),\n  uvec2(1106978479u,1135617969u),\n  uvec2(1203513096u,1220814842u),\n  uvec2(810165631u,843327271u),\n  uvec2(821372892u,851716246u),\n  uvec2(790308562u,822356025u),\n  uvec2(828320368u,861809760u),\n  uvec2(784738323u,816130452u),\n  uvec2(1134309084u,1150758821u),\n  uvec2(1149382495u,1165177018u),\n  uvec2(1103572516u,1132474275u),\n  uvec2(1108160523u,1141584339u),\n  uvec2(1130639506u,1166815869u),\n  uvec2(1213345709u,1239101808u),\n  uvec2(996810455u,1086988670u),\n  uvec2(938743710u,1031412038u),\n  uvec2(999627538u,1016798293u),\n  uvec2(1086134881u,1091902450u),\n  uvec2(1043077664u,1049303988u),\n  uvec2(690233605u,723854037u),\n  uvec2(744170032u,771761136u),\n  uvec2(699866638u,728506197u),\n  uvec2(802431370u,817701553u),\n  uvec2(1112545350u,1117854251u),\n  uvec2(1125652418u,1147607479u),\n  uvec2(1126504047u,1146033974u),\n  uvec2(1114510173u,1144525998u),\n  uvec2(1094586557u,1118376211u),\n  uvec2(1012862991u,1050349871u),\n  uvec2(933892507u,1048908857u),\n  uvec2(740495839u,780538637u),\n  uvec2(734138035u,765398948u),\n  uvec2(757206248u,795676262u),\n  uvec2(805768355u,836046369u),\n  uvec2(781323974u,810225629u),\n  uvec2(970198684u,1169890608u),\n  uvec2(916525699u,1051728732u),\n  uvec2(760417710u,978459338u),\n  uvec2(812720515u,1090726864u),\n  uvec2(699210478u,1010770674u),\n  uvec2(1056574499u,1369518526u),\n  uvec2(3151113201u,3190828502u),\n  uvec2(521669216u,680005252u),\n  uvec2(575670880u,626004381u),\n  uvec2(969409683u,1127745440u),\n  uvec2(1023410816u,1073743776u),\n  uvec2(1012926880u,1084231168u),\n  uvec2(42271493u,175180529u),\n  uvec2(41943808u,133761145u),\n  uvec2(156174799u,233180774u),\n  uvec2(165681800u,235152376u),\n  uvec2(165682624u,287121600u),\n  uvec2(58727712u,132129120u)\n);\nconst int paths[] = int[](\n  14,28,570,800,820,852,890,1216,1248,2288,2320,2334,2342,2350,2370,2408,2416,2448,2486,2500,2508,2522,2554,2568,2606,2644,2658,2672,2680,2688,2696,2734,2760,2774,2788,2796,2804,2812,2826,2834,2866,2892,2906,2920,2934,2948,2956,3174,3308,3478,3768,3980,4546,4608,4670,4702,4764,4796,4858,4920,4952,5014,5076,5108,5170);\n\nconst int colors[boxes.length()] =\n  int[](7,7,6,6,0, 0,0,6,0,6, 0,0,0,0,0, 8,0,8,8,8, 0,0,8,8,8, 8,0,0,0,0,\n        0,8,8,8,8, 0,0,0,0,0, 4,8,8,8,8, 8,0,0,0,0, 0,0,0,\n        6,6,6,6,6, 6,6,6,6,6, 6,6);\n\nvec3 getcolor(int i) {\n  vec3 col = vec3(1,0,1);\n  // Colors from Wikipedia SVG\n  if (i == 0) col = vec3(0xa0,0,0)/255.0;\n  if (i == 1) col = vec3(0x0a,0x26,0x62)/255.0;\n  if (i == 2) col = vec3(0xff,0xd1,0x28)/255.0;\n  if (i == 3) col = vec3(0xff,0xd2,0x14)/255.0;\n  if (i == 4) col = vec3(0);\n  if (i == 5) col = vec3(0xa0,0,0)/255.0;\n\n  if (i == 6) col = vec3(0xb4,0,0x1e)/255.0;\n  if (i == 7) col = vec3(1);\n  if (i == 8) col = vec3(0x1e,0x82,0xd2)/255.0;\n  col = pow(col,vec3(2.2));\n  return col;\n}\n\n// The frame, easier to draw separately\nconst vec4 frame[] =\n  vec4[](vec4(36.500000,38.500122,463.500000,211.499939),\n         vec4(41.500000,43.500122,458.500000,206.499939),\n         vec4(26.500000,28.500122,473.500000,221.499939),\n         vec4(31.500000,33.500122,468.500000,216.499939));\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// The Royal Banner of Scotland, Matthew Arcus, mla. 2022\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// https://en.wikipedia.org/wiki/Royal_arms_of_England, first used by Richard I\n// around 1198. This forms two quarters of what usually known as the Royal\n// Standard (but should really be the \"Royal Banner\").\n//\n// Filled cubic Bezier curves, taken from the Wikipedia SVG, drawn as sequences\n// of line segments, with some bounding boxes to stop things being too slow.\n// Using line segments makes it easy to compute filling with the usual winding\n// number calculation.\n//\n// Since the lions overlap slightly in the y-direction, we draw everything\n// twice in the overlapping region (which isn't wide). The code to do this\n// is a little ad hoc.\n//\n// I've tried various other speedups, but nothing that makes a huge amount of\n// difference (I get an adequate 37fps on my Intel box at 512x288). \n// Precalculating the segment bounding boxes doesn't help much & increases\n// the amount of static data considerably. Scanning all the bounding boxes\n// and making a list of boxes to revisit doesn't help much either.\n//\n// On Nvidia, omitting the const modifiers for the static data greatly increases\n// compilation time (which is about 4 seconds for GTX1650/Linux/FF).\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = 2.0*fragCoord/iResolution.xy;\n  if (p.x > 1.0 || p.y > 1.0) discard;\n  if (iMouse.z > 0.0) {\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    p -= mouse;\n    p *= 0.25;\n    p += mouse;\n  }\n  //vec2 p = fragCoord/iResolution.xy;\n  //p *= 4.0;\n  p.y = 1.0-p.y;\n  p *= vec2(500,250);\n  vec3 col = getcolor(2);\n  float eps = 2.0; // Allow for line width \n  float px = fwidth(p.x);\n  float lwidth = 0.5;\n  int N = paths.length();\n  if (key(CHAR_X)) N = min(int(2.0*iTime),N); // Progressive effect\n  for (int i = 0; i < N; i++) {\n    if (i == 52) p = quarter(p);\n    vec4 box = decode(boxes[i]);\n    if ((p.x >= box.x-eps && p.x <= box.z+eps && p.y >= box.y-eps && p.y <= box.w+eps)) {\n      //assert(i != N-1); // With progressive drawing, show bounding boxes\n      int start = i == 0 ? 0 : paths[i-1];\n      int end = paths[i];\n      vec2 initpos = decode(points[start/2]); //vec2(points[start],points[start+1]);\n      vec2 p0 = initpos;\n      wind = 0;\n      float d = 1e8;\n      for (int j = start+2; j < end; j += 6) {\n        vec2 c0 = decode(points[(j+0)/2]);//vec2(points[j+0],points[j+1]);\n        vec2 c1 = decode(points[(j+2)/2]);//vec2(points[j+2],points[j+3]);\n        vec2 p1 = decode(points[(j+4)/2]);vec2(points[j+4],points[j+5]);\n        vec2 box1 = min(min(c0,c1),min(p0,p1))-eps;\n        vec2 box2 = max(max(c0,c1),max(p0,p1))+eps;\n        if (p.x < box1.x || p.y  < box1.y  || p.x > box2.x || p.y > box2.y) {\n          polywind(p,p0,p1);\n        } else {\n          d = min(d,bezier(p,mat4x2(p0,c0,c1,p1)));\n        }\n        p0 = p1;\n      }\n      polywind(p,p0,initpos); // Close curve if necessary\n      if (colors[i] != 0 && (wind&1) == 1) col = getcolor(colors[i]);;\n      col = mix(vec3(0),col,smoothstep(0.0,px,d-lwidth));\n    }\n  }\n  // Draw frame\n  //p = quarter(p);\n  for (int i = 0; i < frame.length(); i+=2) {\n    vec4 outer = frame[i]; // (x0,y0,x1,y1)\n    vec4 inner = frame[i+1]; // (x0,y0,x1,y1)\n    if (inrect(p,outer) && !inrect(p,inner)) {\n      col = getcolor(6);\n    }\n  }\n  for (int i = 0; i < frame.length(); i++) {\n    vec4 rect = frame[i]; // (x0,y0,x1,y1)\n    col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.xy,rect.xw)-lwidth));\n    col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.xy,rect.zy)-lwidth));\n    //col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.zy,rect.zw)-lwidth));\n    //col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.xw,rect.zw)-lwidth));\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col = 1.0-col;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const uint points[] = uint[](\n1023086715u, 1011159039u, 998510476u, 978587518u, 1008602819u, 1029115677u, 1051070385u, \n985666026u, 966398367u, 947196298u, 927928841u, 939593872u, 960761860u, 994513073u, \n1002115894u, 979178328u, 966398998u, 958076183u, 983110749u, 1002640464u, 1021908041u, \n1083577444u, 1081742612u, 1078334958u, 1067652746u, 1093473820u, 1107105133u, 1113855129u, \n1785270954u, 1759777642u, 1765676107u, 1771443499u, 1781535785u, 1793987495u, 1806504746u, \n161419226u, 137170948u, 120328394u, 105714012u, 129700117u, 148246786u, 163516753u, \n170003789u, 162860154u, 142805951u, 114298160u, 138218803u, 156831215u, 172035646u, \n203754858u, 197397685u, 189205519u, 173804453u, 195169197u, 215288779u, 218762517u, \n277875495u, 262474507u, 249629471u, 232590172u, 239602306u, 248187319u, 272763275u, \n259393533u, 250349361u, 237831859u, 221120151u, 237962775u, 256050653u, 280430337u, \n292881882u, 291898653u, 281609340u, 259589120u, 287114206u, 306512942u, 313001264u, \n341050963u, 345245127u, 350553419u, 348062817u, 362284183u, 367396171u, 362940036u, \n1838027821u, 1823085797u, 1826428346u, 1833440916u, 1841698230u, 1850021158u, 1858344109u, \n1954419137u, 1974407631u, 1986007417u, 1990398157u, 1969885389u, 1969885389u, 1949372621u, \n1922569334u, 1934300523u, 1953961237u, 1973621949u, 1958679702u, 1946096726u, 1941967806u, 1929843668u, 1923814421u, 1922569334u, 1922569334u, 1922569334u, 1922569334u, \n230626207u, 215815145u, 204674126u, 190780659u, 191370239u, 193860367u, 215093833u, \n1180503058u, 1179454798u, 1180044935u, 1225723757u, 1186533534u, 1127157977u, 1068503257u, 1037569649u, 1008799532u, 1007751385u, 996675788u, 991367272u, 973017192u, 961613928u, 944181908u, 998183572u, 972100989u, 1057625295u, 1072501611u, 1057232226u, 1124144509u, 1132401731u, 1147999248u, 1151603566u, 1159074544u, 1159271491u, 1153504497u, 1147934117u, 1183126904u, 1207374844u, 1227821685u, 1229460396u, 1221334176u, 1211176326u, 1260721568u, 1267209220u, 1273369189u, 1281823508u, 1283003351u, 1276646574u, 1313543271u, 1309545223u, 1326649931u, 1342575004u, 1375408661u, 1375408234u, 1375407833u, 1319964575u, 1319964177u, 1319963971u, 1340148952u, 1356598355u, 1343818658u, 1343818658u, 1331038961u, 1255738241u, 1255738241u, 1180503058u, 1180503058u, 1180503058u, 1180503058u, \n1007751385u, 1022693622u, 1033441533u, 1048383722u, \n998183572u, 1031738001u, 1031738001u, 1065292431u, \n829229832u, 959712008u, 1361708536u, 1458963960u, 1536951800u, 1610614452u, 1610614852u, 1610615377u, 1463159089u, 1405028657u, 1124534577u, 765791924u, 649792596u, 620564242u, 620564242u, 591335888u, 816322184u, 936971319u, 1186729015u, 1237453879u, 1299647990u, 1330449397u, 1410666918u, 1598885501u, 1730154109u, 1796148861u, 1831669545u, 1847595308u, 1725764012u, 1793528988u, 1832457197u, 1853625737u, 1875777101u, 1901794221u, 1911559533u, 1964774551u, 1940722243u, 1972113891u, 1959464894u, 1941966715u, 1963921181u, 1933577720u, 1893994051u, 1902906802u, 1904086279u, 1943997665u, 1923025872u, 1891175310u, 1852312528u, 1860963164u, 1869613746u, 1878264320u, 1802701172u, 1813974050u, 1784548386u, 1761676322u, 1765018356u, 1730153204u, 1679756020u, 1605832456u, 1440418462u, 1628310548u, 1669597185u, 1771243484u, 1729890121u, 1686898529u, 1641416831u, 1630209532u, 1583940878u, 1475151118u, 1342440718u, 1185089423u, 1127483279u, 1097926543u, 1075840599u, 1023346329u, 1035929391u, 1047267269u, 1046939739u, 1018562350u, 985138967u, 951650054u, 966985628u, 968558642u, 968362184u, 936576960u, 904857385u, 873072595u, 911476932u, 912460211u, 829229491u, \n598741454u, 608834190u, 607392630u, 606934106u, 586290292u, 576001058u, 566039500u, 555160846u, 539039009u, 521147709u, 521737377u, 521213089u, 519050245u, 505943323u, 482088370u, 457774468u, 464327864u, 460919857u, 456790960u, 445584571u, 430052736u, 402593156u, 404821243u, 408294521u, 402592716u, 385357163u, 361698635u, 339285380u, 346952940u, 350688341u, 347476926u, 323163325u, 298194222u, 268506315u, 279647345u, 290329617u, 294851421u, 276501477u, 238359623u, 245895837u, 236917858u, 196940743u, 195695209u, 170463967u, 138482114u, 158076797u, 130420367u, 163318705u, 191106421u, 207752368u, 229248064u, 229248468u, 229249221u, 344134288u, 373166054u, 342560900u, 314577093u, 300355370u, 313331474u, 326045426u, 333581892u, 290721476u, 276237830u, 277548180u, 289344693u, 300616880u, 309726226u, 293473406u, 286395281u, 303631169u, 259460228u, 260311428u, 270338368u, 230361191u, 263521907u, 287770281u, 270402969u, 330826615u, 332531246u, 360645954u, 387385010u, 359139289u, 320145775u, 370674970u, 386469338u, 419172201u, 457183229u, 501944351u, 541790220u, 541790220u, 581636090u, 590221540u, 590221540u, 598741454u, 598741454u, 598741454u, 598741454u, \n225579543u, 214700579u, 204214838u, 195695209u, \n230625608u, 202248455u, 186650498u, 158076797u, \n191106421u, 210898572u, 210898572u, 230625188u, \n270338368u, 280889567u, 287639925u, 295504324u, \n287770281u, 297928425u, 305072054u, 300550233u, \n332138076u, 334497415u, 339806053u, 338430058u, \n318116149u, 374673849u, 434573699u, 487461077u, \n602080847u, 613942485u, 639566649u, 637535933u, 654575007u, 672597368u, 658311087u, 679216794u, 688326519u, 667748776u, 696322303u, 693308623u, 659754122u, 668733093u, 656150753u, 629411609u, 650121366u, 608048000u, 590614847u, 572068614u, 553522152u, 534974806u, 513676166u, 470552824u, 496177026u, 467276044u, 463474240u, 492440795u, 492178644u, 492178644u, 491850957u, 466292010u, 485821126u, 502663917u, 504498822u, 502663752u, 505154066u, 473499998u, 501679463u, 529663811u, 535758181u, 544736360u, 561907319u, 576979933u, 595067983u, 602080847u, 602080847u, 602080847u, 602080847u, \n519243790u, 508495685u, 504105108u, 511838517u, \n658770601u, 676661796u, 669059963u, 661523421u, \n541722601u, 557254849u, 571214054u, 584517831u, 570034805u, 538643014u, 541722601u, 541722601u, 541722601u, 541722601u, \n568331043u, 580913912u, 591006500u, 597756866u, 592186414u, 583732351u, 573770947u, 573836344u, 576523182u, 568331043u, 568331043u, 568331043u, 568331043u, \n541265141u, 537464242u, 538447502u, 523243339u, 551161637u, 569184112u, 591269976u, 587075412u, 591924840u, 609095013u, 587796052u, 584322395u, 573377762u, 562629895u, 551947549u, 541265141u, 541265141u, 541265141u, 541265141u, \n548539647u, 548408969u, 544608127u, 540938430u, 560467932u, 572919728u, 595987904u, 586091916u, 579669288u, 574098617u, 566693100u, 558763282u, 548539647u, 548539647u, 548539647u, 548539647u, \n510987088u, 519506768u, 519506768u, 528026448u, 527437121u, 548736312u, 575147194u, 594546215u, 606998025u, 614272194u, 633146851u, 642780517u, 651168938u, \n1278413538u, 1307642584u, 1322584909u, 1330449397u, \n1851658771u, 1852379878u, 1845564208u, 1832326118u, \n1885868366u, 1885868648u, 1899303550u, 1901728681u, \n1909264578u, 1913065855u, 1909658190u, 1940197964u, \n1942687613u, 1928990585u, 1924272030u, 1916735415u, \n830016264u, 690227976u, 777586242u, 726598657u, 731972620u, 765068248u, 770573961u, 790103463u, 820642999u, 863241339u, 975832029u, 1232274802u, 1298859378u, 1417086322u, 1474691297u, 1543635318u, 1506411095u, 1479214178u, 1447298309u, 1506608389u, 1672610053u, 1746404263u, 1613103835u, 1507264676u, 1408370466u, 1415055233u, 1424951234u, 1440745421u, 1381304773u, 1349191514u, 1192298008u, 1119880579u, 1027671400u, 902301032u, 781059432u, 726075827u, 830015923u, \n1090720486u, 1083708157u, 1074336564u, 1071649663u, \n1124864841u, 1124733888u, 1127552015u, 1132467265u, \n648612487u, 627968613u, 616827358u, 609356079u, 598674168u, 622070850u, 648612487u, 648612487u, 648612487u, 648612487u);\nconst uvec2 boxes[] = uvec2[](\n  uvec2(978587331u,1051070587u),\n  uvec2(927928324u,994513417u),\n  uvec2(958075702u,1021908247u),\n  uvec2(1067652196u,1113855626u),\n  uvec2(1759777450u,1806505259u),\n  uvec2(105713626u,163516764u),\n  uvec2(114297791u,172035646u),\n  uvec2(173804453u,218762602u),\n  uvec2(232589707u,277875548u),\n  uvec2(221119965u,280430589u),\n  uvec2(259589086u,313001434u),\n  uvec2(341050465u,367396484u),\n  uvec2(1823085613u,1858344596u),\n  uvec2(1949372621u,1990398415u),\n  uvec2(1922569150u,1973622123u),\n  uvec2(190779977u,230626547u),\n  uvec2(944179953u,1375409573u),\n  uvec2(1007751385u,1048383741u),\n  uvec2(998183567u,1065292436u),\n  uvec2(591332622u,1972115080u),\n  uvec2(130417527u,608834994u),\n  uvec2(195695127u,225579625u),\n  uvec2(158076797u,230625608u),\n  uvec2(191106421u,230625188u),\n  uvec2(270338271u,295504324u),\n  uvec2(287770281u,305072217u),\n  uvec2(332138076u,339806314u),\n  uvec2(318116053u,487461305u),\n  uvec2(463471417u,696325096u),\n  uvec2(504104773u,519244085u),\n  uvec2(658770468u,676662237u),\n  uvec2(538642409u,584518261u),\n  uvec2(568331000u,597757123u),\n  uvec2(523242722u,609095768u),\n  uvec2(540937401u,595988670u),\n  uvec2(510987088u,651169319u),\n  uvec2(1278413528u,1330449397u),\n  uvec2(1832325651u,1852380134u),\n  uvec2(1885868366u,1901728681u),\n  uvec2(1909264578u,1940197966u),\n  uvec2(1916735353u,1942687671u),\n  uvec2(690225377u,1746406152u),\n  uvec2(1071649510u,1090720639u),\n  uvec2(1124733769u,1132467265u),\n  uvec2(598673711u,648612930u)\n);\nconst int paths[] = int[](\n  14,28,42,56,70,84,98,112,126,140,154,168,182,196,222,236,358,366,374,556,750,758,766,774,782,790,798,806,904,912,920,940,966,1004,1036,1062,1070,1078,1086,1094,1102,1176,1184,1192,1212);\n\nconst int colors[boxes.length()] =\n  int[](1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,0,0,0,0,\n        0,0,0,3,0, 0,4,4,5,1, 0,0,0,0,0, 2,3,0,0,4);\n\nvec3 getcolor(int i) {\n  vec3 col = vec3(1,0,1);\n  // Colors from Wikipedia SVG\n  if (i == 0) col = vec3(0xa0,0,0)/255.0;\n  if (i == 1) col = vec3(0x0a,0x26,0x62)/255.0;\n  if (i == 2) col = vec3(0xff,0xd1,0x28)/255.0;\n  if (i == 3) col = vec3(0xff,0xd2,0x14)/255.0;\n  if (i == 4) col = vec3(0);\n  if (i == 5) col = vec3(0xa0,0,0)/255.0;\n  col = pow(col,vec3(2.2));\n  return col;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// The Royal Banner of England, Matthew Arcus, mla. 2022\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// https://en.wikipedia.org/wiki/Royal_arms_of_England, first used by Richard I\n// around 1198. This forms two quarters of what usually known as the Royal\n// Standard (but should really be the \"Royal Banner\").\n//\n// zoom in with mouse\n// 'x' draws progressively\n//\n// Filled cubic Bezier curves, taken from the Wikipedia SVG, drawn as sequences\n// of line segments, with some bounding boxes to stop things being too slow.\n// Using line segments makes it easy to compute filling with the usual winding\n// number calculation.\n//\n// Since the lions overlap slightly in the y-direction, we draw everything\n// twice in the overlapping region (which isn't wide). The code to do this\n// is a little ad hoc.\n//\n// I've tried various other speedups, but nothing that makes a huge amount of\n// difference (I get an adequate 37fps on my Intel box at 512x288). \n// Precalculating the segment bounding boxes doesn't help much & increases\n// the amount of static data considerably. Scanning all the bounding boxes\n// and making a list of boxes to revisit doesn't help much either.\n//\n// [Looks like accessing large amounts of static data is slow, so I've\n// encoded all of the coordinate pairs as 16 bit fixed point integers,\n// packed into 32 bit uints. This gets FPS (on Intel) up to 60 at 512x288].\n//\n// On Nvidia, omitting the const modifiers for the static data greatly increases\n// compilation time (which is about 4 seconds for GTX1650/Linux/FF) [now less\n// than a second with the fixed point data change].\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = 2.0*fragCoord/iResolution.xy;\n  if (p.x > 1.0 || p.y > 1.0) discard;\n  if (iMouse.z > 0.0) {\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    p -= mouse;\n    p *= 0.25;\n    p += mouse;\n  }\n  p.y = 1.0-p.y;\n  p *= vec2(500,250);\n  vec3 col = getcolor(0);\n  float eps = 2.0; // Allow for line width \n  float px = fwidth(p.x);\n  float lwidth = 0.5;\n  // The lions overlap in the y direction, so draw twice, with a shift up,\n  // where necessary. This is a bit of a bodge\n  int M = 2;\n  if (p.y < 77.0) M = 1;\n  else if (p.y < 154.0) p.y -= 77.0;\n  else p.y -= 154.0;\n  if (p.y > 15.0) M = 1; // Draw twice only in a thin band\n  //assert(M == 1); // Check banding\n  for (int j = 0; j < M; j++, p.y += 77.0) {\n    int N = paths.length();\n    if (key(CHAR_X)) N = min(int(2.0*iTime),N); // Progressive effect\n    for (int i = 0; i < N; i++) {\n      vec4 box = decode(boxes[i]);\n      if (p.x >= box.x-eps && p.x <= box.z+eps && p.y >= box.y-eps && p.y <= box.w+eps) {\n        //assert(i != N-1); // With progressive drawing, show bounding boxes\n        int start = i == 0 ? 0 : paths[i-1];\n        int end = paths[i];\n        vec2 initpos = decode(points[start/2]); //vec2(points[start],points[start+1]);\n        vec2 p0 = initpos;\n        wind = 0;\n        float d = 1e8;\n        for (int j = start+2; j < end; j += 6) {\n          vec2 c0 = decode(points[(j+0)/2]);//vec2(points[j+0],points[j+1]);\n          vec2 c1 = decode(points[(j+2)/2]);//vec2(points[j+2],points[j+3]);\n          vec2 p1 = decode(points[(j+4)/2]);vec2(points[j+4],points[j+5]);\n          vec2 box1 = min(min(c0,c1),min(p0,p1))-eps;\n          vec2 box2 = max(max(c0,c1),max(p0,p1))+eps;\n          if (p.x < box1.x || p.y  < box1.y  || p.x > box2.x || p.y > box2.y) {\n            polywind(p,p0,p1);\n          } else {\n            d = min(d,bezier(p,mat4x2(p0,c0,c1,p1)));\n          }\n          p0 = p1;\n        }\n        polywind(p,p0,initpos); // Close curve if necessary\n        if (colors[i] != 0 && (wind&1) == 1) col = getcolor(colors[i]);;\n        col = mix(vec3(0),col,smoothstep(0.0,px,d-lwidth));\n      }\n    }\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col = 1.0-col;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\n\nint wind = 0; // Compute winding number here\nvoid polywind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.y <= 0.0) {\n    if (r.y > 0.0 && t > 0.0) wind++;\n  } else {\n    if (r.y <= 0.0 && t < 0.0) wind--;\n  }\n}\n\n// The usual function, but also include segment in winding number computation\nfloat segment(vec2 p, vec2 q, vec2 r) {\n  polywind(p,q,r);\n  p -= q; r -= q; // Relative to q\n  float t = dot(p,r)/dot(r,r);\n  t = clamp(t, 0.0, 1.0);\n  return length(p-t*r);\n}\n\nvec4 beziercoeff(int i, int N) {\n  // Matrix formulation due to Shane.\n  float t = float(i)/float(N);\n  float u = 1.0-t, t2 = t*t, u2 = u*u;\n  return vec4(u*u2,3.0*t*u2,3.0*u*t2,t*t2);\n}\n\n// Distance to Cubic Bezier.\n// Split the path into N subsegments.\nfloat bezier(vec2 p, mat4x2 m) {\n  // Since we spend most of the time deciding not to draw\n  // curves, the value of N doesn't seem to be time critical.\n  int N = 16;\n  vec2 q = m[0];\n  float d = 1e8;\n  for (int i = 1; i <= N; i++) {\n    vec2 r = m*beziercoeff(i,N);\n    d = min(d,segment(p,q,r));\n    q = r;\n  }\n  return d;\n}\n\nvec2 decode(uint n) {\n  return vec2(n>>16,n&0xffffu)/64.0;\n}\n\nvec4 decode(uvec2 p) {\n  return vec4(decode(p.x),decode(p.y));\n}\n\nbool inrect(vec2 p, vec4 rect) {\n  return p.x >= rect.x && p.x <= rect.z && p.y >= rect.y && p.y <= rect.w;\n}\n\nvec2 quarter(vec2 p) {\n  p -= vec2(250,125);\n  p = -abs(p);\n  p += vec2(250,125);\n  return p;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}