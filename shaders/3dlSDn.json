{
    "Shader": {
        "info": {
            "date": "1551068129",
            "description": "This is my first post at shadertoy! Thank you for watching!\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3dlSDn",
            "likes": 3,
            "name": "Colorful metaballs",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "metaballs"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 1334
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Butadiene\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\t\t\tconst float  _ypos =-0.25;\n\n\n\t\t\t// The MIT License\n\t\t\t// Copyright © 2013 Inigo Quilez\n\t\t\t// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\t\t//Making noise\n\t\t\tfloat hash(vec2 p)  \n\t\t\t{\n\t\t\t\tp  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n\t\t\t\treturn -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n\t\t\t}\n\n\t\t\tfloat noise( in vec2 p )\n\t\t\t{\n\t\t\t\tvec2 i = floor( p );\n\t\t\t\tvec2 f = fract( p );\n\t\n\t\t\t\tvec2 u = f*f*(3.0-2.0*f);\n\n\t\t\t\treturn mix( mix( hash( i + vec2(0.0,0.0) ), \n\t\t\t\t\t\t\t\t hash( i + vec2(1.0,0.0) ), u.x),\n\t\t\t\t\t\t\tmix( hash( i + vec2(0.0,1.0) ), \n\t\t\t\t\t\t\t\t hash( i + vec2(1.0,1.0) ), u.x), u.y);\n\t\t\t}\t\t\t\n\t\t\t///////////////////////////////////////////////////////////////////////\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tfloat smoothMin(float d1,float d2,float k)\n\t\t\t{\n\t\t\t\treturn -log(exp(-k*d1)+exp(-k*d2))/k;\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\t// Base distance function\n\t\t\tfloat ball(vec3 p,float s)\n\t\t\t{\n\t\t\t\treturn length(p)-s;\n\t\t\t}\n\n\t\t\t\n\t\t\t// Making ball status\n\t\t\tvec4 metaballvalue(int i)\n\t\t\t{\n\t\t\t\tfloat ifloat = float(i);\n                float kt = 3.*iTime*(0.1+0.01*ifloat);\n\t\t\t\tvec3 ballpos = 0.3*vec3(noise(vec2(ifloat,ifloat)+kt),noise(vec2(ifloat+10.,ifloat*20.)+kt),noise(vec2(ifloat*20.,ifloat+20.)+kt));\n\t\t\t\tfloat scale = 0.05+0.02*hash(vec2(ifloat,ifloat));\n\t\t\t\treturn  vec4(ballpos,scale);\n\t\t\t}\n\t\t\t// Making ball distance function\n\t\t\tfloat metaballone(vec3 p, int i)\n\t\t\t{\t\n\t\t\t\tvec4 value = metaballvalue(i);\n\t\t\t\tvec3 ballpos = p-value.xyz;\n\t\t\t\tfloat scale =value.w;\n\t\t\t\treturn  ball(ballpos,scale);\n\t\t\t}\n\n\t\t\t//Making metaballs distance function\n\t\t\tfloat metaball(vec3 p)\n\t\t\t{\n\t\t\t\tfloat d1;\n\t\t\t\tfloat d2 =  metaballone(p,0);\n\t\t\t\tfor (int i = 1; i < 6; ++i) {\n\t\t\t\t\n\t\t\t\t\td1 = metaballone(p,i);\n\t\t\t\t\td1 = smoothMin(d1,d2,20.);\n\t\t\t\t\td2 =d1;\n\t\t\t\t\t}\n\t\t\t\treturn d1;\n\t\t\t}\n\t\t\n\t\t\t// Making distance function\n\t\t\tfloat dist(vec3 p)\n\t\t\t{\t\n\t\t\t\tfloat y = p.y;\n\t\t\t\tfloat d1 =metaball(p);\n\t\t\t\tfloat d2 = y-(_ypos); //For floor\n\t\t\t    d1 = smoothMin(d1,d2,20.);\n\t\t\t\treturn d1;\n\t\t\t}\n\n\n\t\t\t//enhanced sphere tracing  http://erleuchtet.org/~cupe/permanent/enhanced_sphere_tracing.pdf\n\n\t\t\tfloat raymarch (vec3 ro,vec3 rd)\n\t\t\t{\n\t\t\t\tfloat previousradius = 0.0;\n\t\t\t\tfloat maxdistance = 3.;\n\t\t\t\tfloat outside = dist(ro) < 0. ? -1. : +1.;\n\t\t\t\tfloat pixelradius = 0.01;\n\t\t\t\tfloat omega = 1.2;\n\t\t\t\tfloat t =0.0001;\n\t\t\t\tfloat step = 0.;\n\t\t\t\tfloat minpixelt =999999999.;\n\t\t\t\tfloat mint = 0.;\n\t\t\t\tfloat hit = 0.01;\n\t\t\t\t\tfor (float i = 0.; i < 80.; ++i) {\n\n\t\t\t\t\t\tfloat radius = outside*dist(ro+rd*t);\n\t\t\t\t\t\tbool fail = omega>1. &&step>(abs(radius)+abs(previousradius));\n\t\t\t\t\t\tif(fail){\n\t\t\t\t\t\t\tstep -= step *omega;\n\t\t\t\t\t\t\tomega =1.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tstep = omega * radius;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpreviousradius = radius;\n\t\t\t\t\t\tfloat pixelt = radius/t;\n\t\t\t\t\t\tif(!fail&&pixelt<minpixelt){\n\t\t\t\t\t\t\tminpixelt = pixelt;\n\t\t\t\t\t\t\tmint = t;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!fail&&pixelt<pixelradius||t>maxdistance)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tt += step;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tif ((t > maxdistance || minpixelt > pixelradius)&&(mint>hit)){\n\t\t\t\t\treturn -1.;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\treturn mint;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t// The MIT License\n\t\t\t// Copyright © 2013 Inigo Quilez\n\t\t\t// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\t\t// https://www.shadertoy.com/view/Xds3zN\n\n\t\t\t//Tetrahedron technique  https://iquilezles.org/articles/normalsSDF\n\t\t\tvec3 getnormal( in vec3 p)\n\t\t\t{\n\t\t\t\tvec2 e = vec2(0.5773,-0.5773)*0.0001;\n\t\t\t\tvec3 nor = normalize( e.xyy*dist(p+e.xyy) + e.yyx*dist(p+e.yyx) + e.yxy*dist(p+e.yxy ) + e.xxx*dist(p+e.xxx));\n\t\t\t\tnor = normalize(vec3(nor));\n\t\t\t\treturn nor ;\n\t\t\t}\n\t\t\t////////////////////////////////////////////////////////////////////////////\n\n\t\t\t// Making shadow\n\t\t\tfloat softray( vec3 ro, vec3 rd , float hn)\n\t\t\t{\n\t\t\t\tfloat t = 0.000001;\n\t\t\t\tfloat jt = 0.0;\n\t\t\t\tfloat res = 1.;\n\t\t\t\tfor (int i = 0; i < 20; ++i) {\n\t\t\t\t\tjt = dist(ro+rd*t);\n\t\t\t\t\tres = min(res,jt*hn/t);\n\t\t\t\t\tt = t+ clamp(0.02,2.,jt);\n\t\t\t\t}\n\t\t\t\treturn clamp(res,0.,1.);\n\t\t\t}\n\t\t\t\n\t\t\t// The MIT License\n\t\t\t// Copyright © 2013 Inigo Quilez\n\t\t\t// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\t\t// https://www.shadertoy.com/view/ld2GRz\n\n\t\t\tvec4 material(vec3 pos)\n\t\t\t{\n                vec4 ballcol[6]=vec4[6](vec4(0.5,0.,0.,1.),\n\t\t\t\t\t\t\t\tvec4(0.,0.5,0.,1.),\n\t\t\t\t\t\t\t\tvec4(0.,0.,0.5,1.),\n\t\t\t\t\t\t\t\tvec4(0.25,0.25,0,1.),\n\t\t\t\t\t\t\t\tvec4(0.25,0,0.25,1.),\n                    \t\t\tvec4(0.,0.25,0.25,1.));\n\t\t\t\tvec3 mate = vec3(0,0,0);\n\t\t\t\tfloat w = 0.01;\n\t\t\t\t\t// Making ball color\n\t\t\t\t\tfor (int i = 0; i < 6; ++i) {\n\t\t\t\t\t\tfloat x = clamp( (length( metaballvalue(i).xyz - pos )-metaballvalue(i).w)*10.,0.,1. ); \n\t\t\t\t\t\tfloat p = 1.0 - x*x*(3.0-2.0*x);\n\t\t\t\t\t\tmate += p*vec3(ballcol[i].xyz);\n\t\t\t\t\t\tw += p;\n\t\t\t\t\t}\n\t\t\t\t// Making floor color\n\t\t\t\tfloat x = clamp(  (pos.y-_ypos)*10.,0.,1. );\n\t\t\t\tfloat p = 1.0 - x*x*(3.0-2.0*x);\n\t\t\t\tmate += p*vec3(0.4,0.4,0.4);\n\t\t\t\tw += p;\n\t\t\t\tmate /= w;\n\t\t\t\treturn vec4(mate,1);\n\t\t\t}\n\t\t\t////////////////////////////////////////////////////\n\t\t\t\n\t\t\t//Phong reflection model ,Directional light\n\t\t\tvec4 lighting(vec3 pos,vec3 ro)\n\t\t\t{\t\n\t\t\t\tvec3 mpos =pos;\n\t\t\t\tvec3 normal =getnormal(mpos);\n\t\t\t\t\t\n\t\t\t\tvec3 viewdir = normalize(pos-ro);\n\t\t\t\tvec3 lightdir = normalize(vec3(0.5,0.5,-0.5));\n\t\t\t\t\n\t\t\t\tfloat sha = softray(mpos,lightdir,3.3);\n\t\t\t\tvec4 Color = material(mpos);\n\t\t\t\t\n\t\t\t\tfloat NdotL = max(0.,dot(normal,lightdir));\n\t\t\t\tvec3 R = -normalize(reflect(lightdir,normal));\n\t\t\t\tfloat spec =pow(max(dot(R,-viewdir),0.),10.);\n\n\t\t\t\tvec4 col =  sha*(Color* NdotL+vec4(spec,spec,spec,0.));\n\t\t\t\treturn col;\n\t\t\t}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (fragCoord* 2.0 - iResolution.xy) / min(iResolution.x,iResolution.y);\n\t\n    vec2 sc = 2.*(uv-0.5);\n    \n    vec3 ro = vec3(0.18,0.2,-0.8);\n        \n    vec3 rd = normalize(vec3(sc,4)-ro);\n    \n    vec4 baccol = vec4((0.2+uv.y*0.5)*vec3(0.,1.,1.),1.);\n    \n    float t = raymarch(ro,rd);\n    \n\tvec4 col;\n\n\tif (t==-1.) {\n\t\tcol = baccol;\n\t}\n\telse{\n\t\tvec3 pos = ro+rd*t;\n\t\tcol = lighting(pos,ro);\n\t}\n \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}