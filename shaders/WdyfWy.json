{
    "Shader": {
        "info": {
            "date": "1607813028",
            "description": "3D analog of 2D fractal noise. That's a lot of mixing!",
            "flags": 0,
            "hasliked": 0,
            "id": "WdyfWy",
            "likes": 1,
            "name": "Fractal Noise 3D",
            "published": 3,
            "tags": [
                "3d",
                "noise",
                "fractalnoise",
                "tricubic",
                "layernoise"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW):\nfloat Noise3D(in vec3 p3) {\n\tp3  = fract(p3 * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat SmoothNoise3D(in vec3 p) {\n    vec3 cell = floor(p);\n    vec3 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldb = Noise3D(cell);                       // Left, Down, Back\n    float rdb = Noise3D(cell + vec3(1.0, 0.0, 0.0)); // Right, Down, Back\n    float ldf = Noise3D(cell + vec3(0.0, 0.0, 1.0)); // Left, Down, Front\n    float rdf = Noise3D(cell + vec3(1.0, 0.0, 1.0)); // Right, Down, Front\n    float lub = Noise3D(cell + vec3(0.0, 1.0, 0.0)); // Left, Up, Back\n    float rub = Noise3D(cell + vec3(1.0, 1.0, 0.0)); // Right, Up, Back\n    float luf = Noise3D(cell + vec3(0.0, 1.0, 1.0)); // Left, Up, Front\n    float ruf = Noise3D(cell + vec3(1.0, 1.0, 1.0)); // Right, Up, Front\n\n    return mix(mix(mix(ldb, rdb, local.x),\n                   mix(ldf, rdf, local.x),\n                   local.z),\n\n               mix(mix(lub, rub, local.x),\n                   mix(luf, ruf, local.x),\n                   local.z),\n\n               local.y);\n}\n\nfloat FractalNoise3D(in vec3 p, in float scale, in float octaves) {\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += SmoothNoise3D(p * pow(2.0, octave) * scale) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n    }\n\n    return value / tscale;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(FractalNoise3D(vec3(uv, iTime), 4.0, 4.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}