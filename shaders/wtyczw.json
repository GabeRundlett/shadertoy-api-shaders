{
    "Shader": {
        "info": {
            "date": "1610671605",
            "description": "Dots following a surface! You can rotate the object with the mouse. If you would like to try different objects, you can modify the mapSurface() function in common. You can also change the number of wanderers and their size in common.",
            "flags": 32,
            "hasliked": 0,
            "id": "wtyczw",
            "likes": 5,
            "name": "Surface Wanderers",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "animation",
                "wandering",
                "surfacefollowing"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "vec4 mapScene(in vec3 p) {\n    vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 6.28;\n\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    p.xz *= mat2(cy, -sy, sy, cy);\n\n    float cx = cos(mouse.y), sx = sin(mouse.y);\n    p.yz *= mat2(cx, -sx, sx, cx);\n\n    float surface = mapSurface(p);\n\n    float wanderers = 1000000.0;\n    for (int w=0; w < WANDERERS; w++) {\n        vec3 wandererPos = fetch(iChannel0, ivec2(w, 0)).xyz;\n        wanderers = min(wanderers, length(p - wandererPos) - SIZE);\n    }\n\n    return surface < wanderers ? vec4(surface, vec3(0.0, 1.0, 0.0)) : vec4(wanderers, vec3(0.6, 0.4, 0.0));\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy).x - mapScene(p - e.xyy).x,\n                          mapScene(p + e.yxy).x - mapScene(p - e.yxy).x,\n                          mapScene(p + e.yyx).x - mapScene(p - e.yyx).x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        vec4 d = mapScene(p);\n        if (d.x < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            fragColor.rgb += d.yzw;\n            fragColor.rgb *= max(0.2, dot(n, l));\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d.x;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define WANDERERS 15\n#define SIZE 0.15\n\n#define fetch(buf, addr) texelFetch(buf, addr, 0)\n\n#define BSPHERE 2.0\nfloat mapSurface(in vec3 p) {\n    float c = cos(p.y), s = sin(p.y);\n    p.xz *= mat2(c, -s, s, c);\n    return (length(p) - 1.5 + dot(sin(p * 2.0), vec3(1.0)) * 0.2) * 0.8;\n}\n\nvec3 getSurfNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapSurface(p + e.xyy) - mapSurface(p - e.xyy),\n                          mapSurface(p + e.yxy) - mapSurface(p - e.yxy),\n                          mapSurface(p + e.yyx) - mapSurface(p - e.yyx)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec3 Hash13(in float x) {\n   x += iDate.w;\n   vec3 p = fract(x * vec3(0.1031, 0.103, 0.0973));\n   p += dot(p, p.yzx + 33.33);\n   return fract((p.xxy + p.yzz) * p.zyx); \n}\n\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nfloat snoise(in float x) {\n    float local = fract(x);\n    local *= local * (3.0 - 2.0 * local);\n    return mix(Hash11(floor(x)), Hash11(ceil(x)), local);\n}\n\nfloat fnoise(in float x) {\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (int octave=0; octave < 8; octave++) {\n        value += snoise(x) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        x *= 2.0;\n    }\n\n    return value / tscale * 10.0 - 5.0;\n}\n\nvec3 getPerpVec(in vec3 v) {\n    vec3 perp = vec3(-v.y, v.x, 0.0);\n    vec3 a = abs(v);\n    if (a.x <= a.y && a.x <= a.z) {\n        perp = vec3(0.0, -v.z, v.y);\n    }\n\n    if (a.y < a.x && a.y < a.z) {\n        perp = vec3(-v.z, 0.0, v.x);\n    }\n\n    return perp;\n}\n\n// Rotate on axis, from tdhooper (https://www.shadertoy.com/view/WlKyzW) who in turn got it from blackle\nvec3 axisRot(in vec3 p, in vec3 ax, in float ro) {\n    return mix(dot(ax, p) * ax, p, cos(ro)) + sin(ro) * cross(ax, p);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame == 0) {\n        if (iFragCoord.x < WANDERERS && iFragCoord.y == 0) {\n            vec3 ro = normalize(Hash13(fragCoord.x) * 2.0 - 1.0);\n            vec3 rd = -ro;\n            ro *= BSPHERE;\n\n            float t = 0.0;\n            for (int i=0; i < 100; i++) {\n                vec3 p = ro + rd * t;\n                float d = mapSurface(p);\n                if (d < 0.001) {\n                    fragColor.xyz = p;\n                }\n\n                if (t > 2.0 * BSPHERE) {\n                    break;\n                }\n\n                t += d;\n            }\n        }\n    }\n\n    if (iFrame > 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        if (iFragCoord.x < WANDERERS && iFragCoord.y == 0) {\n            fragColor = fetch(iChannel0, iFragCoord);\n            float wandererSpeed = Hash11(fragCoord.x * 835.478 + 345.524) * 0.1;\n            vec3 n = getSurfNormal(fragColor.xyz);\n            fragColor.xyz += wandererSpeed * axisRot(getPerpVec(n), n, fnoise(float(iFrame) * wandererSpeed + fragCoord.x * 238.748));\n            fragColor.xyz -= n * mapSurface(fragColor.xyz);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}