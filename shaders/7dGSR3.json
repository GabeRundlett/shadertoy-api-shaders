{
    "Shader": {
        "info": {
            "date": "1635000881",
            "description": "faster bokehs in O(r), hexagonal-shaped and simple anamorphic bokehs also supported",
            "flags": 32,
            "hasliked": 0,
            "id": "7dGSR3",
            "likes": 36,
            "name": "1D SAT + scanline bokeh",
            "published": 3,
            "tags": [
                "blur",
                "bokeh",
                "kernel",
                "sat"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1176
        },
        "renderpass": [
            {
                "code": "\nconst float tau = 6.283185;\n\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    vec2 pw = 1.0 / iChannelResolution[0].xy;\n    vec2 uv = fragCoord * pw;\n    vec2 rb = (uv * 2.0 - 1.0) * vec2(iResolution.x / iResolution.y, 1.0);    \n    vec2 R = vec2(0.5,1.0)*exp(mix(log(3.0), log(64.0),cos(-rb.y*0.15*tau - 0.8 + iTime)*0.5 + 0.5));\n    vec4 c = vec4(0.0);\n    int IRy = int(R.y);\n    vec2 rd = vec2(R.x*R.x, 1.0/(R.y*R.y));\n    float cw = 0.0;\n    for (int i = -IRy; i <= IRy; ++i) {\n        float fi = float(i);\n#if (BOKEH == 1)\n        float w = 0.866025*min(1.0, (1.0 - abs(fi/R.y)) / 0.5)*R.y;\n#elif (BOKEH == 2)\n        float x = -fi/R.y;\n        float f1 = sin(radians(54.0))*(1.0 - x) / cos(radians(54.0));\n        float f2 = sin(radians(162.0))*(-2.618 - x) / cos(radians(162.0));\n        float f3 = step(cos(radians(144.0)),x);\n        float w = min(f1,f2)*R.y*f3;\n#else\n        float w = (1.0 - rd.y*fi*fi) * rd.x;\n        w = sqrt(w);\n#endif\n        float owl = max(0.0, w - fragCoord.x);\n        float owr = max(0.0, fragCoord.x - iChannelResolution[0].x + w);\n        // subtract the missing pixels at the border from the weight\n        cw += 2.0 * w - owl - owr;\n        w *= pw.x;\n        float y = uv.y + pw.y * fi;\n        vec4 p0 = texture(iChannel0, vec2(uv.x - w, y));\n        vec4 p1 = texture(iChannel0, vec2(uv.x + w, y));\n        c += (p1 - p0);\n    }\n#ifdef FAKE_LINEAR_LIGHT\n    float exposure = 1.0;\n#ifdef LONDON\n    exposure = 0.7;\n#endif\n    fragColor = vec4(pow(ACESFitted((c.rgb / cw + 0.5) * exposure), vec3(1.0/2.2)),1.0);\n#else\n    fragColor = c / cw + 0.5;\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = iFrame;\n    if (frame < 60) { // input; we give it a second so the viewer has a chance to change to fullscreen ;)\n        vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n        uv.x *= iResolution.x / iResolution.y;\n#ifdef LONDON\n        fragColor = texture(iChannel2, (uv*0.5*vec2(1.0, 16.0/9.0))*0.5 + 0.5);\n#else\n        fragColor = texture(iChannel1, (uv*0.5*vec2(1.0, 1.0))*0.5 + 0.5);\n#endif\n#ifdef FAKE_LINEAR_LIGHT\n        // fake linear light\n        fragColor.rgb = InvACESFitted(pow(fragColor.rgb, vec3(2.2)));\n#endif\n        // DC offset correction, causing integral to become non-monotonic\n        fragColor = fragColor - 0.5;\n    } else {\n        frame -= 60;\n        ivec2 fc = ivec2(fragCoord);\n        vec4 d = texelFetch(iChannel0, fc + ivec2( 0, 0), 0);\n        fragColor = d; // as-is\n        if (frame < 12) {\n            // sum horizontally via jump flooding\n            int S = 1 << frame;\n            int x = fc.x - S;\n            if (x >= 0) {\n                vec4 b = texelFetch(iChannel0, ivec2(x, fc.y), 0);\n                fragColor += b;\n            }\n        }\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// after changing any of these, you need to restart the shader\n#define FAKE_LINEAR_LIGHT\n// 0 = anamorphic circular\n// 1 = hexagon\n// 2 = pentagon\n#define BOKEH 1\n#define LONDON\n\n///////////////////////////////////////////////\n\n// ACES fitted\n// from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n\n    color = color * ACESOutputMat;\n\n    // Clamp to [0, 1]\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n\nvec3 InvRRTAndODTFit(vec3 x)\n{\n    return -1.0/100.0*(21647550.0*x + sqrt(-1873455419487500.0*x*x + 2326712714032270.0*x + 2415638944900.0) - 1228930.0)/(983729.0*x - 1000000.0);\n}\n\nvec3 InvACESFitted(vec3 color)\n{    \n    color = color * inverse(ACESOutputMat);\n    \n    // Apply RRT and ODT\n    color = InvRRTAndODTFit(color);\n\n    color = color * inverse(ACESInputMat);\n\n    return color;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}