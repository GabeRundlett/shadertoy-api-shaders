{
    "Shader": {
        "info": {
            "date": "1658818926",
            "description": "Trying to make a sand-like effect. The idea is to move particles within 2x2 cells ensuring no loss of mass.\n* Mouse: spawn particles\n* Mouse + shift: remove particles\n* Space: reset",
            "flags": 48,
            "hasliked": 0,
            "id": "NsVfWy",
            "likes": 4,
            "name": "Rainbow Sand Experiment",
            "published": 3,
            "tags": [
                "simulation",
                "particles",
                "sand"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2022\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  Particles are capable of falling or sliding down a slope greater than 45 degrees. \n//  Particle motion is performed within 2x2 cells. Buffer A's cells are in a natural\n//  alignment: cell 0, 0 includes the four cells (0 ... 1, 0 ... 1). Buffer B is offset\n//  by 1, 1 so it can advect particles across buffer A's cell boundaries. Buffers C and D\n//  are just copies of A and B respectively to get twice the integration speed.\n//\n// ---------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifc = ivec2(fragCoord);\n    vec4 top = texelFetch(iChannel0, ivec2(ifc.x, ifc.y & ~1), 0);\n    vec4 bottom = texelFetch(iChannel0, ivec2(ifc.x, ifc.y | 1), 0);\n    fragColor = max(top, bottom);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0 || keyDown(32))\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n        ivec2 coord = ivec2(fragCoord);\n        \n        evolveByCells(iChannel0, coord, ivec2(0), ivec2(iResolution.xy), fragColor);\n        spawnSand(iFrame, fragCoord, iResolution, iMouse, fragColor);\n        removeSand(iChannel1, iFrame, fragCoord, iResolution, iMouse, fragColor);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int COLOR_CYCLE_FRAMES = 6000;\n\nfloat length2(vec2 x)\n{\n    return dot(x, x);\n}\n\nfloat square(float x)\n{\n    return x * x;\n}\n\nvec4 rainbow(int i)\n{\n    switch(i)\n    {\n        case 0:\n            return vec4(1.0, 0.0, 0.0, 1.0);\n        case 1:\n            return vec4(1.0, 0.5, 0.0, 1.0);\n        case 2:\n            return vec4(1.0, 1.0, 0.0, 1.0);\n        case 3:\n            return vec4(0.0, 1.0, 0.0, 1.0);\n        case 4:\n            return vec4(0.0, 0.0, 1.0, 1.0);\n        case 5:\n            return vec4(0.25, 0.0, 0.5, 1.0);\n        case 6:\n            return vec4(0.5, 0.0, 0.7, 1.0);\n    }\n}\n\nconst int COLOR_CHANGE_FRAMES = 200;\nvec4 colorByFrame(int frame)\n{   \n    int colorIndex = (frame / COLOR_CHANGE_FRAMES) % 7;\n    int nextColorIndex = (colorIndex + 1) % 7;\n    int blendIndex = frame % COLOR_CHANGE_FRAMES;\n    float blend = float(blendIndex) / float(COLOR_CHANGE_FRAMES);\n    return mix(rainbow(colorIndex), rainbow(nextColorIndex), blend);\n}\n\nconst float PI = 3.141592653598793;\n\nvec2 rotate(float a)\n{\n    return vec2(sin(a), cos(a));\n}\n\nvoid spawnSand(int frame, vec2 fragCoord, vec3 res, vec4 mouse, inout vec4 fragColor)\n{\n    if (fragColor == vec4(0.0, 0.0, 0.0, 1.0))\n    {\n        float centerSpeedup = (sin(float(frame) * 0.001) * 0.5 + 0.5) * 0.02;\n        float centerTime = (float(frame) * (0.001 + centerSpeedup) - PI * 0.5);\n        vec2 spawnCenter = vec2(sin(centerTime) * 0.45 + 0.5, 0.95) * res.xy;\n        \n        if (mouse.z > 0.0 && mouse.y > res.y * 0.9)\n        {\n            spawnCenter.x = mouse.x;\n        }\n\n        float rotateTime = float(frame) * 0.1;\n        const float SPAWN_DISTANCE = 30.0;\n        vec2 spawnPoints[3] = vec2[](spawnCenter + SPAWN_DISTANCE * rotate(rotateTime),\n                                     spawnCenter + SPAWN_DISTANCE * rotate(rotateTime + PI * (2.0 / 3.0)),\n                                     spawnCenter + SPAWN_DISTANCE * rotate(rotateTime - PI * (2.0 / 3.0)));\n\n        for (int i = 0; i < 3; ++i)\n        {\n            if (length2(spawnPoints[i] - fragCoord) < square(res.x * 0.003))\n            {\n                fragColor = colorByFrame(frame + COLOR_CHANGE_FRAMES * i);\n            }\n        }\n    }\n}\n\nconst vec4 EMPTY = vec4(0.0, 0.0, 0.0, 1.0);\n\nvoid removeSand(sampler2D mipSampler, int frame, vec2 fragCoord, vec3 res, vec4 mouse, inout vec4 fragColor)\n{\n    if (mouse.z > 0.0 && mouse.y < res.y * 0.9)\n    {\n        vec2 removePos = mouse.xy;\n\n        if (length2(removePos - fragCoord) < square(res.x * 0.02))\n        {\n            fragColor = EMPTY;\n        }\n    }\n    \n    vec3 fullTest0 = textureLod(mipSampler, vec2(0.2, 0.6), 3.0).xyz;\n    vec3 fullTest1 = textureLod(mipSampler, vec2(0.4, 0.4), 3.0).xyz;\n    vec3 fullTest2 = textureLod(mipSampler, vec2(0.6, 0.4), 3.0).xyz;\n    vec3 fullTest3 = textureLod(mipSampler, vec2(0.8, 0.6), 3.0).xyz;\n    \n    int deleteInterval = 1000;\n    if (any(greaterThan(fullTest0, vec3(0))) &&\n        any(greaterThan(fullTest1, vec3(0))) &&\n        any(greaterThan(fullTest2, vec3(0))) &&\n        any(greaterThan(fullTest3, vec3(0))))\n    {\n        deleteInterval = 10;\n    }\n    \n    if ((frame % deleteInterval == 0) && fragCoord.y < 1.0)\n    {\n        fragColor = EMPTY;\n    }\n    //fragColor = fullTest0;\n}\n\nvoid evolveByCells(sampler2D sampler, ivec2 coord, ivec2 offset, ivec2 ires, out vec4 fragColor)\n{\n    ivec2 cellCoord = (coord - offset) / 2;\n    ivec2 llCell = cellCoord * 2 + offset;\n    ivec2 lrCell = llCell + ivec2(1, 0);\n    ivec2 ulCell = llCell + ivec2(0, 1);\n    ivec2 urCell = llCell + ivec2(1, 1);\n    \n    if (!all(lessThan(urCell, ires)) || (offset != ivec2(0) && (coord.x == 0 || coord.y == 0)))\n    {\n        fragColor = texelFetch(sampler, coord, 0);\n        return;\n    }\n    \n    vec4 ulValue = texelFetch(sampler, ulCell, 0);\n    vec4 urValue = texelFetch(sampler, urCell, 0);\n    vec4 llValue = texelFetch(sampler, llCell, 0);\n    vec4 lrValue = texelFetch(sampler, lrCell, 0);\n    ulValue.w = urValue.w = llValue.w = lrValue.w = 1.0;\n    \n    bvec4 cell = bvec4(ulValue != EMPTY, urValue != EMPTY, llValue != EMPTY, lrValue != EMPTY);\n    \n    if (cell == bvec4(true,  false,\n                      false, false) ||\n        cell == bvec4(true,  false,\n                      false, true)||\n        cell == bvec4(true,  true,\n                      false, true))\n    {\n        // left side falls\n        llValue = ulValue;\n        ulValue = EMPTY;\n    }\n    else if (cell == bvec4(false, true,\n                           false, false) ||\n             cell == bvec4(false, true,\n                           true, false) ||\n             cell == bvec4(true, true,\n                           true, false))\n    {\n        // right side falls\n        lrValue = urValue;\n        urValue = EMPTY;\n    }\n    else if (cell == bvec4(true, true,\n                           false, false))\n    {\n        // both sides fall\n        lrValue = urValue;\n        urValue = EMPTY;\n        llValue = ulValue;\n        ulValue = EMPTY;\n    }\n    else if (cell == bvec4(true, false,\n                           true, false))\n    {\n        // left side collapses\n        lrValue = ulValue;\n        ulValue = EMPTY;\n    }\n    else if (cell == bvec4(false, true,\n                           false, true))\n    {\n        // right side collapses\n        llValue = urValue;\n        urValue = EMPTY;\n    }\n\n    if (coord == llCell)\n    {\n        fragColor = llValue;\n    }\n    else if (coord == lrCell)\n    {\n        fragColor = lrValue;\n    }\n    else if (coord == ulCell)\n    {\n        fragColor = ulValue;\n    }\n    else if (coord == urCell)\n    {\n        fragColor = urValue;\n    }\n}\n\n#define keyClick(ascii)   ( texelFetch(iChannel3,ivec2(ascii,1),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0 || keyDown(32))\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n        ivec2 coord = ivec2(fragCoord);\n        \n        evolveByCells(iChannel0, coord, ivec2(1), ivec2(iResolution.xy), fragColor);\n        spawnSand(iFrame, fragCoord, iResolution, iMouse, fragColor);\n        removeSand(iChannel1, iFrame, fragCoord, iResolution, iMouse, fragColor);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0 || keyDown(32))\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n        ivec2 coord = ivec2(fragCoord);\n        \n        evolveByCells(iChannel0, coord, ivec2(0), ivec2(iResolution.xy), fragColor);\n        spawnSand(iFrame, fragCoord, iResolution, iMouse, fragColor);\n        removeSand(iChannel1, iFrame, fragCoord, iResolution, iMouse, fragColor);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0 || keyDown(32))\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n        ivec2 coord = ivec2(fragCoord);\n        \n        evolveByCells(iChannel0, coord, ivec2(1), ivec2(iResolution.xy), fragColor);\n        spawnSand(iFrame, fragCoord, iResolution, iMouse, fragColor);\n        removeSand(iChannel1, iFrame, fragCoord, iResolution, iMouse, fragColor);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}