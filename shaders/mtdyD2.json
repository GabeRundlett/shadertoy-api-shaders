{
    "Shader": {
        "info": {
            "date": "1699696405",
            "description": "variant of generalized solenoid https://shadertoy.com/view/dlVGDW\ntry alt #def L\n\nreal trefoil knot is [ (2+cos3n)*[cos2m, sin2m], sin3n ] https://en.wikipedia.org/wiki/Trefoil_knot\nbut is not easy to raymarch (no SDF). do you have an efficient solution ?",
            "flags": 0,
            "hasliked": 0,
            "id": "mtdyD2",
            "likes": 34,
            "name": "pseudo-trefoil",
            "published": 3,
            "tags": [
                "spiral",
                "ring",
                "knot",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// variant of generalized solenoid https://shadertoy.com/view/dlVGDW\n\n#define rot2(a)      mat2(cos(a+vec4(0,11,33,0)))                 // rotation\n\nvec3 S = vec3(3,2,0);                                             // knot parameter\n\n//#define L(p) length(p) - .05                                    // cross section. 2nd = Shane squarish\n//#define L(p) ( q.xy = abs(p) - .05 + .02, min(max(q.x, q.y), 0.) + length(max(q.xy, 0.)) - .02 )\n  #define L(p) int(iTime)%4 < 2 ? length(p) - .05 : ( q.xy = abs(p) - .05 + .02, min(max(q.x, q.y), 0.) + length(max(q.xy, 0.)) - .02 )\n\nfloat sdf(vec3 q) {\n        q = vec3( length(q.xz)-.5, q.y, atan(q.z,q.x)-.5*iTime ), // cylindrical coordinates\n        q = vec3( length(q.xy), atan(q.y,q.x), q.z );             // torus coordinates\n        return L( vec2(q.x-.2, ( mod(S.x*q.z-S.y*q.y,6.28)-3.14 ) /16. )); // solenoïd\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,r;\n    vec3  R = iResolution, e = vec3(1e-3,0,0), N,\n          D = normalize(vec3(U+U, -18.*R.y) - R),          // ray direction\n          p = vec3(0,0,15), q,                             // marching point along ray \n          C = iMouse.z > 0. ? 8.*iMouse.xyz/R -4.             // camera control\n                          : 3.* cos(.3*iTime + vec3(0,11,0)); // demo mode\n       // S = ceil( vec3( 5.*iTime+vec2(1,0),0)   );\n    \n    p.yz *= rot2(-C.y),                                    // rotations\n    p.xz *= rot2(-C.x-1.57),\n    D.yz *= rot2(-C.y),                              \n    D.xz *= rot2(-C.x-1.57);\n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.01 )         // march scene\n        q = p, \n        t = min(t, sdf(q) ),                               // solenoïd\n        p += .5*t*D;                                       // step forward = dist to obj    \n    \n    N = vec3( sdf(q+e), sdf(q+e.yxy), sdf(q+e.yyx) ) - t ; // normal\n    O.x < 0. ? O = .5*texture(iChannel0, D) :              // uncomment to display environment \n    O *= O*O*O*3.* texture(iChannel0, reflect(D,N/length(N) ) ); // reflect of environment map\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}