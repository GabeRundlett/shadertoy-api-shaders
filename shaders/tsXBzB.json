{
    "Shader": {
        "info": {
            "date": "1588507384",
            "description": "Simplest self-contained fractal I could think of.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsXBzB",
            "likes": 1,
            "name": "Carre de Sierpinzki",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "Windless",
            "viewed": 324
        },
        "renderpass": [
            {
                "code": "vec4 carre(vec2 from, vec2 to, vec2 pos) {\n    \n    while(true) {\n    \n        int colone = int((pos.x - from.x) / (to.x - from.x) * 3.);\n        int ligne  = int((pos.y - from.y) / (to.y - from.y) * 3.);\n\n        if( (colone == 1) && (ligne == 1) ) return vec4(0.,0.,33.,1.);\n\n        if(distance(from, to) < 0.11 + (cos(iTime) * 0.1) ) {\n            return vec4(0.33,0.33, 1.00, 1.);\n        }\n\n\t\tvec2 newFrom = vec2(\n            from.x + (to.x - from.x) / 3. * float(colone) \n            , from.y + (to.y - from.y) / 3. * float(ligne)\n        );\n        vec2 newTo = vec2(\n            from.x + (to.x - from.x) / 3. * float(colone + 1) \n            , from.y + (to.y - from.y) / 3. * float(ligne + 1)\n        );\n        \n        from = newFrom;\n        to = newTo;\n        \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = carre(vec2(0., 0.), vec2(1.,1.), uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}