{
    "Shader": {
        "info": {
            "date": "1618690464",
            "description": "spooky",
            "flags": 0,
            "hasliked": 0,
            "id": "sdsXDN",
            "likes": 14,
            "name": "Whack-a-Spook",
            "published": 3,
            "tags": [
                "mouse",
                "raymarch",
                "sdf",
                "tiling",
                "ghosts"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 406
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define STEPS 128.0\n#define MDIST 300.0\n#define pi 3.141592\n\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat SU( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\nfloat ball(vec3 p, float r){ return length(p)-r; }\n\nfloat cyl(vec3 p, float r){\n    return length(p.xz)-r;\n}\n\nfloat box(vec3 p, vec3 s) {\n    p=abs(p)-s;\n    return max(p.x, max(p.y,p.z));\n}\n\nvec3 gl = vec3(0);\n\nvec2 Dist1(vec3 p,float t){\n    vec3 np = p;\n    np.xz*=rot(t);\n    np.y +=sin(t)*15.5+15.0;\n    vec2 a = vec2(ball(np,1.5),0.0);\n    a.x = min(max(max(cyl(p,1.5),np.y-0.1),-np.y-1.5),a.x);\n    \n    float eye = ball(abs(np-vec3(1.3,0,0.))-vec3(0.,0,0.4),0.4);\n    a.x = min(eye,a.x);\n    \n    np.xz*=rot(t*2.0);\n    np.xz = abs(np.xz);\n    np.xz*=rot(pi/6.0);\n    np.xz = abs(np.xz);\n    np.xz*=rot(pi/6.0);\n    \n    float feet = ball(np-vec3(0,-2.1,1.5),0.9);\n    \n    a.x = SU(feet,a.x,0.2);\n    \n    a.x =max(-p.y-3.5,a.x);\n    gl+= 0.01/(0.1+abs(a.x))*vec3(0.682,0.843,0.882);\n    a.x =max(-p.y-2.5,a.x);\n\n    vec2 b = vec2(box(p-vec3(0,-3.5,0),vec3(3.0,1.0,3.0)),1.0);\n    \n    b = (b.x<a.x)?b:a;\n\n    b.x*=0.4;\n    return b;\n}\nvec2 Dist2(vec3 p){\n    vec3 np = p;\n    float t = iTime;\n    np.xz= abs(np.xz)-vec2(6);\n    np.xz= abs(np.xz)-vec2(3);\n    vec2 id = floor(p.xz/6.0);            \n    t+=hash12(id*0.5)*200.0; \n    vec2 c = Dist1(np,t);\n    \n    t = iTime;\n    np = p;\n    \n    float hx = 22.0;\n    float hz = 26.0;\n    np.x-=-hx*0.5+(iMouse.x/iResolution.x)*hx;\n    np.z-=-hz*0.5+(iMouse.y/iResolution.y)*hz;\n    np-=vec3(0,0,-20);\n    np.zy*=rot(-abs(sin(t*5.0))*0.5);\n    \n    vec2 a = vec2(0.6*cyl(np-vec3(0,0,18),2.0),2.0);\n    a.x = max(a.x,-np.y-3.0);\n    a.x = max(a.x,np.y-3.0);\n    \n    np.zy*=rot(pi/2.0);\n    \n    vec2 b = vec2(cyl(np,1.0),3.0);\n    b.x = max(b.x,-np.y);\n    b.x = max(b.x,np.y+-18.0);\n    a = (b.x<a.x)?b:a;\n    a.x*=0.7;\n    \n    a = (c.x<a.x&&a.x>0.0)?c:a;\n    return a;\n}\nvec3 march(vec3 ro, vec3 rd){\n    vec3 p = ro;\n    float i = 0.0;\n    float t = 0.0;\n    vec2 d=vec2(0);\n    float shad = 0.0;\n    for(i;i<STEPS; i++) {\n        d=abs(Dist2(p));\n        \n        if(d.x<.001) {\n            if(d.y!=0.0)break;\n            d.x=0.1;\n        }\n        if(t>MDIST){\n            d.y = 0.0;\n            i=0.0;\n            break;\n        }\n        t+=d.x;\n        p+=rd*d.x;\n    }    \n    return vec3(t, d.y, i);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float t = iTime*0.4;\n\n    float cir = 18.0;\n    \n    vec3 ro = vec3(0,19.0+sin(t)*4.0,-25); \n    \n    \n    //Uncomment this line for camera spin\n    //ro = vec3(cir*sin(t),7.0+sin(t)*3.0,cir*cos(t));\n    \n    vec3 look = vec3(0,0,0);\n\n    float z = 1.0;\n    vec3 f = normalize(look-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = f*z+uv.x*r+uv.y*cross(f,r);\n    \n    vec3 obj = march(ro,rd);\n    \n    float shad = obj.z/STEPS;\n    \n    vec3 col = vec3(shad);\n    \n    if(obj.y == 1.0) {\n        col = vec3(1.1-shad);\n        col*=vec3(0.525,0.004,0.694);\n    }\n    else if(obj.y == 2.0) {\n        col = vec3(1.1-shad);\n        col*=vec3(0.196,0.196,0.196);\n        }\n    else if(obj.y == 3.0) {\n        col = vec3(0.8-shad);\n        col*=vec3(1.000,0.737,0.251);\n    }\n    else{\n    col = vec3(0.000,0.047,0.459)*0.4;\n    }\n    col+=min(gl*0.25,1.0);//Transparent effect from NuSan\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}