{
    "Shader": {
        "info": {
            "date": "1616087697",
            "description": "Branchless and exact test tube SDF without trig.",
            "flags": 0,
            "hasliked": 0,
            "id": "wltfz2",
            "likes": 4,
            "name": "Open End Tube (Test Tube) SDF",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "exact",
                "openendtube",
                "testtube",
                "notrig"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "// a: position of the tube opening\n// b: position of the tube base\n// r: tube radius\n// t: tube thickness\nfloat sdHalfTube(in vec3 p, in vec3 a, in vec3 b, in float r, in float t) {\n     vec3 pa = p - a, ba = b - a;\n     float h = length(ba), hh = 0.5 * h;\n     vec2 p2 = vec2(length(pa - ba * dot(pa, ba) / dot(ba, ba)), dot(pa, ba) / h);\n     float tube = length(vec2(p2.x - r, max(0.0, abs(p2.y - hh) - hh))) - t;\n     float base = max(p2.y, abs(length(p2) - r) - t);\n     return mix(base, tube, step(0.0, p2.y));\n}\n\nvec2 mapScene(in vec3 p) {\n    float t1 = iTime * 0.75, t2 = iTime * 1.25, t3 = iTime * 1.5;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec3 a = vec3(c3, 0.25 + 0.75 * s2, c1) * 2.0;\n    vec3 b = vec3(c2, 0.25 + 0.75 * s1, s3) * 2.0;\n    float r = 0.75 + 0.375 * sin(iTime);\n    float t = 0.125 + 0.0625 * cos(iTime);\n\n    float tube = sdHalfTube(p, a, b, r, t);\n    float da = length(p - a) - 0.125;\n    float db = length(p - b) - 0.125;\n\n    return tube < min(da, db) ? vec2(tube, 0) : da < db ? vec2(da, 1) : vec2(db, 2);\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy).x - mapScene(p - e.xyy).x,\n                          mapScene(p + e.yxy).x - mapScene(p - e.yxy).x,\n                          mapScene(p + e.yyx).x - mapScene(p - e.yyx).x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 mouse = iMouse.z > 0.0 ? (iMouse.xy - center) / iResolution.y * 3.14 : vec2(0.0);\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 8.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Sky\n    fragColor = vec4(mix(vec3(0.25, 0.25, 1.0), vec3(1.0), 0.5 + 0.5 * rd.y), 1.0);\n\n    // Raymarch\n    float t = 0.0;\n    for (int i=0; i < 250; i++) {\n        vec3 p = ro + rd * t;\n        vec2 d = mapScene(p);\n        if (d.x < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = normalize(vec3(-1.0, 1.0, 1.0));\n            int id = int(d.y);\n\n            float diff = sqrt(max(0.0, dot(-rd, n)));\n            if (id == 0) {\n                fragColor.rgb = vec3(diff);\n            }\n\n            if (id == 1) {\n                fragColor.rgb = vec3(0.0, 0.0, diff);\n            }\n\n            if (id == 2) {\n                fragColor.rgb = vec3(diff, 0.0, 0.0);\n            }\n\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d.x;\n    }\n\n    // Ground plane\n    if (rd.y != 0.0) {\n        float tPlane = -(2.0 + ro.y) / rd.y;\n        if (tPlane > 0.0 && (t < 20.0 ? tPlane < t : true)) {\n            vec3 iPlane = ro + rd * tPlane;\n            vec3 planeColor = vec3(1.0);\n\n            // Grid\n            planeColor = mix(planeColor, vec3(0.0, 0.0, 1.0), smoothstep(0.025, 0.0, abs(mod(iPlane.x + 0.25, 0.5) - 0.25)));\n            planeColor = mix(planeColor, vec3(0.0, 0.0, 1.0), smoothstep(0.025, 0.0, abs(mod(iPlane.z + 0.25, 0.5) - 0.25)));\n            planeColor = mix(planeColor, vec3(1.0, 0.0, 0.0), smoothstep(0.025, 0.0, abs(iPlane.x) - 0.01));\n            planeColor = mix(planeColor, vec3(1.0, 0.0, 0.0), smoothstep(0.025, 0.0, abs(iPlane.z) - 0.01));\n\n            planeColor -= exp(-mapScene(iPlane).x);\n            planeColor /= max(1.0, 0.2 * tPlane); // Fade (can hide a bit of aliasing too)\n\n            fragColor.rgb = mix(fragColor.rgb, planeColor, 0.6);\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}