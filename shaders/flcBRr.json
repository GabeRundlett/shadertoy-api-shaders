{
    "Shader": {
        "info": {
            "date": "1662483429",
            "description": "Trying to replicate giraffe texture",
            "flags": 0,
            "hasliked": 0,
            "id": "flcBRr",
            "likes": 13,
            "name": "Replicate Giraffe - by hugolnx",
            "published": 3,
            "tags": [
                "procedural",
                "texture",
                "fur",
                "texturing",
                "giraffe",
                "hugolnx"
            ],
            "usePreview": 0,
            "username": "hugolnx",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "#define SHADERTOY 1\n// GITHUB: https://github.com/HugoLnx/shaders-laboratory/tree/master/shaders/replicate-giraffe\n// ORIGINAL: https://github.com/HugoLnx/shaders-laboratory/tree/master/textures/giraffe-skin-fur.jpg\n// ORIGINAL SOURCE: https://www.pexels.com/photo/close-up-of-giraffe-body-skin-fur-12406721/\n\n// Aux simple functions\n#define TWO_PI 6.283185\n#define PI 3.14159\nfloat norm(float x) { return x*.5 + .5; }\nfloat denorm(float x) { return x*2. - 1.; }\nfloat xstep(float b, float e, float v) {\n    return step(b, v) - step(e, v);\n}\nfloat xsmoothstep(float b, float e, float v) {\n    return smoothstep(b, e, v) - step(e, v);\n}\nfloat flatten(float v, float layers) {\n  return floor(v*layers) * (1./layers);\n}\nfloat nsin(float t) {return norm(sin(t * TWO_PI));}\nfloat ncos(float t) {return norm(cos(t * TWO_PI));}\nfloat ntan(float t) {return norm(tan(t * TWO_PI));}\nfloat sat(float t) {return clamp(t, 0., 1.);}\nfloat rsat(float t) {return mod(t+10000.0, 1.);}\nfloat xclamp(float v, float minV, float maxV) {\n  return clamp(v, minV, maxV) * xstep(minV, maxV, v);\n}\nfloat xclampnorm(float v, float minV, float maxV) {\n  return (xclamp(v, minV, maxV) - minV) / (maxV-minV);\n}\nvec3 togrey(vec3 c) {\n  return vec3((c.r+c.g+c.b)/3.);\n}\nfloat normrange(float v, float minV, float maxV) { return sat((v-minV)/(maxV-minV)); }\n\n// -------------------\n// BEGIN https://github.com/stegu/webgl-noise\n// -------------------\n\nvec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3 mod7(vec3 x) {return x - floor(x * (1.0 / 7.0)) * 7.0;}\nvec3 permute(vec3 x) {return mod289((34.0 * x + 10.0) * x);}\nvec4 permute(vec4 x) {return mod289(((x*34.0)+10.0)*x);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n// Cellular\nvec2 cellular(vec3 P) {\n#define K 0.142857142857 // 1/7\n#define Ko 0.428571428571 // 1/2-K/2\n#define K2 0.020408163265306 // 1/(7*7)\n#define Kz 0.166666666667 // 1/6\n#define Kzo 0.416666666667 // 1/2-1/6*2\n#define jitter 1.0 // smaller jitter gives more regular pattern\n\n\tvec3 Pi = mod289(floor(P));\n \tvec3 Pf = fract(P) - 0.5;\n\n\tvec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n\tvec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n\tvec3 p1 = permute(p + Pi.y - 1.0);\n\tvec3 p2 = permute(p + Pi.y);\n\tvec3 p3 = permute(p + Pi.y + 1.0);\n\n\tvec3 p11 = permute(p1 + Pi.z - 1.0);\n\tvec3 p12 = permute(p1 + Pi.z);\n\tvec3 p13 = permute(p1 + Pi.z + 1.0);\n\n\tvec3 p21 = permute(p2 + Pi.z - 1.0);\n\tvec3 p22 = permute(p2 + Pi.z);\n\tvec3 p23 = permute(p2 + Pi.z + 1.0);\n\n\tvec3 p31 = permute(p3 + Pi.z - 1.0);\n\tvec3 p32 = permute(p3 + Pi.z);\n\tvec3 p33 = permute(p3 + Pi.z + 1.0);\n\n\tvec3 ox11 = fract(p11*K) - Ko;\n\tvec3 oy11 = mod7(floor(p11*K))*K - Ko;\n\tvec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\n\n\tvec3 ox12 = fract(p12*K) - Ko;\n\tvec3 oy12 = mod7(floor(p12*K))*K - Ko;\n\tvec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n\tvec3 ox13 = fract(p13*K) - Ko;\n\tvec3 oy13 = mod7(floor(p13*K))*K - Ko;\n\tvec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n\tvec3 ox21 = fract(p21*K) - Ko;\n\tvec3 oy21 = mod7(floor(p21*K))*K - Ko;\n\tvec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n\tvec3 ox22 = fract(p22*K) - Ko;\n\tvec3 oy22 = mod7(floor(p22*K))*K - Ko;\n\tvec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n\tvec3 ox23 = fract(p23*K) - Ko;\n\tvec3 oy23 = mod7(floor(p23*K))*K - Ko;\n\tvec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n\tvec3 ox31 = fract(p31*K) - Ko;\n\tvec3 oy31 = mod7(floor(p31*K))*K - Ko;\n\tvec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n\tvec3 ox32 = fract(p32*K) - Ko;\n\tvec3 oy32 = mod7(floor(p32*K))*K - Ko;\n\tvec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n\tvec3 ox33 = fract(p33*K) - Ko;\n\tvec3 oy33 = mod7(floor(p33*K))*K - Ko;\n\tvec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n\tvec3 dx11 = Pfx + jitter*ox11;\n\tvec3 dy11 = Pfy.x + jitter*oy11;\n\tvec3 dz11 = Pfz.x + jitter*oz11;\n\n\tvec3 dx12 = Pfx + jitter*ox12;\n\tvec3 dy12 = Pfy.x + jitter*oy12;\n\tvec3 dz12 = Pfz.y + jitter*oz12;\n\n\tvec3 dx13 = Pfx + jitter*ox13;\n\tvec3 dy13 = Pfy.x + jitter*oy13;\n\tvec3 dz13 = Pfz.z + jitter*oz13;\n\n\tvec3 dx21 = Pfx + jitter*ox21;\n\tvec3 dy21 = Pfy.y + jitter*oy21;\n\tvec3 dz21 = Pfz.x + jitter*oz21;\n\n\tvec3 dx22 = Pfx + jitter*ox22;\n\tvec3 dy22 = Pfy.y + jitter*oy22;\n\tvec3 dz22 = Pfz.y + jitter*oz22;\n\n\tvec3 dx23 = Pfx + jitter*ox23;\n\tvec3 dy23 = Pfy.y + jitter*oy23;\n\tvec3 dz23 = Pfz.z + jitter*oz23;\n\n\tvec3 dx31 = Pfx + jitter*ox31;\n\tvec3 dy31 = Pfy.z + jitter*oy31;\n\tvec3 dz31 = Pfz.x + jitter*oz31;\n\n\tvec3 dx32 = Pfx + jitter*ox32;\n\tvec3 dy32 = Pfy.z + jitter*oy32;\n\tvec3 dz32 = Pfz.y + jitter*oz32;\n\n\tvec3 dx33 = Pfx + jitter*ox33;\n\tvec3 dy33 = Pfy.z + jitter*oy33;\n\tvec3 dz33 = Pfz.z + jitter*oz33;\n\n\tvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n\tvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n\tvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n\tvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n\tvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n\tvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n\tvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n\tvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n\tvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n\n\t// Sort out the two smallest distances (F1, F2)\n#if 0\n\t// Cheat and sort out only F1\n\tvec3 d1 = min(min(d11,d12), d13);\n\tvec3 d2 = min(min(d21,d22), d23);\n\tvec3 d3 = min(min(d31,d32), d33);\n\tvec3 d = min(min(d1,d2), d3);\n\td.x = min(min(d.x,d.y),d.z);\n\treturn vec2(sqrt(d.x)); // F1 duplicated, no F2 computed\n#else\n\t// Do it right and sort out both F1 and F2\n\tvec3 d1a = min(d11, d12);\n\td12 = max(d11, d12);\n\td11 = min(d1a, d13); // Smallest now not in d12 or d13\n\td13 = max(d1a, d13);\n\td12 = min(d12, d13); // 2nd smallest now not in d13\n\tvec3 d2a = min(d21, d22);\n\td22 = max(d21, d22);\n\td21 = min(d2a, d23); // Smallest now not in d22 or d23\n\td23 = max(d2a, d23);\n\td22 = min(d22, d23); // 2nd smallest now not in d23\n\tvec3 d3a = min(d31, d32);\n\td32 = max(d31, d32);\n\td31 = min(d3a, d33); // Smallest now not in d32 or d33\n\td33 = max(d3a, d33);\n\td32 = min(d32, d33); // 2nd smallest now not in d33\n\tvec3 da = min(d11, d21);\n\td21 = max(d11, d21);\n\td11 = min(da, d31); // Smallest now in d11\n\td31 = max(da, d31); // 2nd smallest now not in d31\n\td11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n\td11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n\td12 = min(d12, d21); // 2nd smallest now not in d21\n\td12 = min(d12, d22); // nor in d22\n\td12 = min(d12, d31); // nor in d31\n\td12 = min(d12, d32); // nor in d32\n\td11.yz = min(d11.yz,d12.xy); // nor in d12.yz\n\td11.y = min(d11.y,d12.z); // Only two more to go\n\td11.y = min(d11.y,d11.z); // Done! (Phew!)\n\treturn sqrt(d11.xy); // F1, F2\n#endif\n}\n\nvec2 ncellular(vec2 p, float seed) {\n  p *= 15.;\n  seed *= 0.3;\n  return cellular(vec3(p, seed));\n}\n\n// Classic Perlin noise\nfloat perlin(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat nperlin(vec2 p, float seed) {\n  p *= 20.;\n  seed *= 0.5;\n  return norm(perlin(vec3(p, seed)));\n}\n\n// Simplex Noise\nfloat simplex(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat nsimplex(vec2 x, float seed) {\n  x *= 10.;\n  seed *= 0.3;\n  return norm(simplex(vec3(x, seed)));\n}\n\n\n// -------------------\n// END noise3D\n// -------------------\n\n// -------------------\n// BEGIN https://www.shadertoy.com/view/4dS3Wd\n// -------------------\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat morgan(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\nfloat morgan(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nfloat morgan(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\nfloat nmorgan(float x) {\n  x *= 20.;\n  return morgan(x);\n}\nfloat nmorgan(vec2 x) {\n  x *= 20.;\n  return morgan(x);\n}\nfloat nmorgan(vec2 x, float seed) {\n  x *= 20.;\n  seed *= 0.5;\n  return morgan(vec3(x, seed));\n}\n// -------------------\n// END Morgan Noises\n// -------------------\n\n\n// -------------------\n// BEGIN http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n// -------------------\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 P = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, P.wz) : vec4(c.gb, P.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n    // vec4 p = mix(vec4(c.bg, P.wz), vec4(c.gb, P.xy), step(c.b, c.g));\n    // vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 P = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + P.xyz) * 6.0 - P.www);\n    return c.z * mix(P.xxx, clamp(p - P.xxx, 0.0, 1.0), c.y);\n}\n// -------------------\n// END HSV Conversion \n// -------------------\n\nvec3 hsv(float h, float s, float v) {return hsv2rgb(vec3(h, s, v));}\n\n\n// Noise Aux Functions\nfloat random(vec2 uv, float seed) {\n    const float a = 12.9898;\n    const float b = 78.233;\n    const float c = 43758.543123;\n    return fract(sin(dot(uv, vec2(a, b)) + seed) * c);\n}\n\n#define OCTAVES 6\n#define OCTAVES_F 6.0\n\n// Simplex Variations\n#define SIMPLEX_VARS_SCALE 1.0\nfloat turbSimplex( vec3 p ) {\n  p *= SIMPLEX_VARS_SCALE;\n\tfloat w = 100.0;\n\tfloat t = -.5;\n  vec3 shift = vec3(100.);\n\n\tfor (float f = 1.0 ; f < OCTAVES_F ; f++ ){\n\t\tfloat power = pow( 2.0, f );\n\t\tt += abs( simplex( power * p + shift ) / power );\n\t}\n\n\treturn t;\n}\n\nfloat nturbSimplex(vec2 p, float seed) {\n  p *= 2.;\n  seed *= 0.08;\n  return 1.-sat(-1.2*turbSimplex(vec3(p, seed)));\n}\n\nfloat nturb2Simplex(vec2 st2, float seed) {\n  seed *= 0.04;\n  vec3 st = vec3(st2, seed);\n  st *= SIMPLEX_VARS_SCALE * 3.;\n  float value = 0.0;\n  float amplitude = 1.0;\n  vec3 shift = vec3(200.);\n  for (int i = 0; i < OCTAVES; i++) {\n      value += amplitude * abs(simplex(st));\n      st = st * 2. + shift;\n      amplitude *= .5;\n  }\n  return clamp(value, -1., 1.);\n}\n\nfloat fbmSimplex(vec3 x) {\n  x *= SIMPLEX_VARS_SCALE;\n\tfloat v = 0.0;\n\tfloat a = 1.;\n\tvec3 shift = vec3(300.);\n\tfor (int i = 0; i < OCTAVES; ++i) {\n\t\tv += a * simplex(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn clamp(v, -1., 1.);\n}\n\nfloat nfbmSimplex(vec2 x, float seed) {\n  x *= 5.;\n  seed *= 0.2;\n  return norm(fbmSimplex(vec3(x, seed)));\n}\n\n\n// Morgan Variations\n#define MORGAN_VARS_SCALE 2.5\nfloat turbMorgan( vec3 p ) {\n  p *= MORGAN_VARS_SCALE;\n\tfloat w = 100.0;\n\tfloat t = -.5;\n  vec3 shift = vec3(0.);\n\n\tfor (float f = 1.0 ; f < OCTAVES_F ; f++ ){\n\t\tfloat power = pow( 2.0, f );\n\t\tt += abs( denorm(morgan( power * p + shift )) / power );\n\t}\n\n\treturn t;\n}\n\nfloat nturbMorgan(vec2 p, float seed) {\n  p *= 2.;\n  seed *= 0.05;\n  return 1.-sat(-2.0*turbMorgan(vec3(p, seed)));\n}\n\nfloat nturb2Morgan(vec2 st2, float seed) {\n  seed *= 0.03;\n  vec3 st = vec3(st2, seed);\n  st *= MORGAN_VARS_SCALE * 6.;\n  float value = 0.0;\n  float amplitude = 1.0;\n  vec3 shift = vec3(0.);\n  for (int i = 0; i < OCTAVES; i++) {\n      value += amplitude * abs(denorm(morgan(st)));\n      st = st * 2. + shift;\n      amplitude *= .5;\n  }\n  return clamp(value, -1., 1.);\n}\n\nfloat fbmMorgan(vec3 x) {\n  x *= MORGAN_VARS_SCALE;\n\tfloat v = 0.0;\n\tfloat a = .9;\n\tvec3 shift = vec3(0.);\n\tfor (int i = 0; i < OCTAVES; ++i) {\n\t\tv += a * (denorm(morgan(x))+0.05);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn clamp(v, -1., 1.);\n}\n\nfloat nfbmMorgan(vec2 x, float seed) {\n  x *= 5.;\n  seed *= 0.2;\n  return norm(fbmMorgan(vec3(x, seed)));\n}\n\n\n\n// Cellular Variations\n#define CELLULAR_VARS_SCALE 1.5\nfloat turbCellular( vec3 p ) {\n  p *= CELLULAR_VARS_SCALE;\n\tfloat w = 100.0;\n\tfloat t = -.5;\n  vec3 shift = vec3(700.);\n\n\tfor (float f = 1.0 ; f < OCTAVES_F ; f++ ){\n\t\tfloat power = pow( 2.0, f );\n\t\tt += abs( denorm(cellular( power * p + shift ).x) / power );\n\t}\n\n\treturn t;\n}\n\nfloat nturbCellular(vec2 p, float seed) {\n  p *= 2.;\n  seed *= 0.07;\n  return sat(0.85+2.*turbCellular(vec3(p, seed)));\n}\n\nfloat nturb2Cellular(vec2 st2, float seed) {\n  seed *= 0.02;\n  vec3 st = vec3(st2, seed);\n  st *= CELLULAR_VARS_SCALE * 5.;\n  float value = 0.0;\n  float amplitude = 1.0;\n  vec3 shift = vec3(800.);\n  for (int i = 0; i < OCTAVES; i++) {\n      value += amplitude * abs(denorm(cellular(st).x));\n      st = st * 2. + shift;\n      amplitude *= .5;\n  }\n  return clamp(value, -1., 1.);\n}\n\nfloat fbmCellular(vec3 x) {\n  x *= CELLULAR_VARS_SCALE;\n\tfloat v = 0.0;\n\tfloat a = 1.;\n\tvec3 shift = vec3(900.);\n\tfor (int i = 0; i < OCTAVES; ++i) {\n\t\tv += a * denorm(cellular(x).x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn clamp(v, -1., 1.);\n}\n\nfloat nfbmCellular(vec2 x, float seed) {\n  seed *= 0.1;\n  x *= 5.;\n  return norm(fbmCellular(vec3(x, seed)));\n}\n\n\nvec2 rotate(vec2 v, float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c) * v;\n}\n\n#define RED vec3(1., 0., 0.)\n#define GRE vec3(0., 1., 0.)\n#define BLU vec3(0., 0., 1.)\n#define WRED vec3(1., .8, .8)\n#define WGRE vec3(.8, 1., .8)\n#define WBLU vec3(.8, .8, 1.)\n#define BLU2 vec3(0.35, 0.5, 1.)\n#define PUR vec3(1., 0., 1.)\n#define YEL vec3(1., 1., 0.)\n#define CYA vec3(0., 1., 1.)\n#define WHI vec3(1., 1., 1.)\n#define BLANK vec3(0.35, 0., 0.35)\n\nvec4 getNoise(vec2 uv, float t) {\n  float tseed = floor(t*0.1);\n  float seed  = tseed;\n  float seed2 = tseed + 373.297;\n  float seed3 = tseed + 793.713;\n  float seed4 = tseed + 127.139;\n  float seed5 = tseed + 929.197;\n  vec2 roll = -0.05*t*vec2(1.);\n  // uv += roll;\n\n  float v = 0.;\n  float v1 = 0.;\n  float v2 = 0.;\n  float v3 = 0.;\n\n  float p4turb = nturb2Simplex(uv*3., seed);\n  p4turb = flatten(p4turb, 3.);\n  vec2 p4uv = uv/3.0 + p4turb * 0.0025;\n  vec2 p4Cel = ncellular(p4uv, seed);\n  float p4 = p4Cel.x - p4Cel.y*0.8;\n  p4 = normrange(p4, 0.0, 0.1)*2.;\n  p4 = sat(p4);\n\n  float p2 = nturbSimplex(uv*5., seed2);\n  p2 = flatten(p2, 5.0);\n  p2 = p2 * step(0.5, p2);\n\n  float p3 = nfbmSimplex(uv*10., seed);\n  float p3b = nfbmSimplex(uv, seed);\n\n  vec2 uvp1 = uv;\n  float rotation = PI * 0.25;\n  //vec2 dir = vec2(cos(rotation), sin(rotation));\n  uvp1 -= cos((uvp1.y*p2)*TWO_PI*50.)*mix(.001, 0.003, flatten(p3b, 2.));\n  uvp1 = rotate(uvp1, rotation);\n  float baseZoom = 1000.0;\n  float xZoom = 1.;\n  uvp1 *= baseZoom;\n  uvp1.x *= xZoom;\n  float rand = random(vec2(floor(uvp1.x), 0.0), seed);\n  float yZoom = mix(0.001, .1, rand);\n  uvp1.y *= yZoom;\n  uvp1 = floor(uvp1);\n  float p1 = random(uvp1, seed);\n  float mixC = p3;\n  float minC = mix(0.05, 0.15, mixC);\n  float maxC = mix(0.35, 0.5, mixC);\n  float mixB = p3b;\n  float minB = mix(.65, 0.8, mixB);\n  float maxB = mix(.75, 0.9, mixB);\n  p1 = (1.-p4)*mix(minC, maxC, p1) + p4*mix(minB, maxB, p1);\n\n  float final = p1;\n\n  v1 = p1;\n  v2 = p4turb;\n  v3 = p4;\n  v = final;\n\n  return vec4(v1, v2, v3, v);\n}\n\n\n#ifndef SHADERTOY\nuniform sampler2D iChannel0;\nuniform float iTime;\nuniform vec2 iResolution2D;\n#define iResolution vec4(iResolution2D, 0., 0.)\nout vec4 outColor;\n#endif\n\nvec3 withColor(vec4 noises) {\n  float v = noises.w;\n  float stripes = noises.z;\n\n  // RGB(58,30,18)\n  vec3 CMIN = vec3(58., 30., 18.)/255.;\n\n  // RGB(106,62,31)\n  //vec3 CMIN = vec3(106., 62., 31.)/255.;\n\n  // RGB(157,124,103)\n  //vec3 CMAX = vec3(157., 124., 103.)/255.;\n  // RGB(190,143,120)\n  //vec3 CMAX = vec3(190.0, 143., 120.)/255.;\n\n  // RGB(126,70,27)\n  vec3 CMAX = vec3(126., 70., 27.)*2./255.;\n\n  vec3 c = mix(CMIN, CMAX, normrange(v, 0.0, 0.8));\n  //vec3 c = CMAX * normrange(v, 0.0, 0.5);\n  c = mix(c, WHI*v, stripes);\n  return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from -0.5 to 0.5)\n  float mx = max(iResolution.x, iResolution.y);\n  vec2 ct = iResolution.xy / mx / 2.0;\n  vec2 uv = fragCoord/mx - ct;\n  vec2 uv2 = fragCoord / iResolution.xy - .5;\n\n  float t = iTime;\n  t *= 0.35;\n\n\n  int count = 0;\n  vec3 sims[30];\n\n  float alldiv = .5;\n  vec2 uvZoom1 = uv / 2.;\n  vec2 uvZoom2 = uvZoom1 / 2.;\n  float txdiv = 1.;\n  txdiv *= alldiv;\n\n  vec4 noises1 = getNoise(uv/alldiv, t);\n  vec4 noises2 = getNoise(uvZoom1/alldiv, t);\n  vec4 noises3 = getNoise(uvZoom2/alldiv, t);\n\n  sims[count++] = WHI * noises1.x;\n  sims[count++] = withColor(noises1);\n  sims[count++] = WHI * noises1.x;\n  sims[count++] = withColor(noises1); //texture(iChannel0, uv/txdiv).rgb;\n  sims[count++] = WHI * noises1.y;\n  sims[count++] = withColor(noises1);\n  sims[count++] = WHI * noises1.y;\n  sims[count++] = withColor(noises1); //texture(iChannel0, uvZoom1/txdiv).rgb;\n  sims[count++] = WHI * noises1.z;\n  sims[count++] = withColor(noises2);\n  sims[count++] = WHI * noises1.z;\n  sims[count++] = withColor(noises3); //texture(iChannel0, uvZoom2/txdiv).rgb;\n\n  uv2 += .5;\n  float gridWidth = 2.0;\n  float gridHeight = 6.0;\n  float gridX = floor(uv2.x*gridWidth);\n  float gridY = floor((1.-uv2.y)*gridHeight);\n  int gridInx = int(floor(gridY*gridWidth + gridX));\n  vec3 c;\n  for (int i = 0; i < count; i++) {\n    c += sims[i] * (gridInx == i ? 1.0 : 0.0);\n  }\n  \n\n  // Output to screen\n  fragColor = vec4(c, 1.0);\n}\n\n#ifndef SHADERTOY\nvoid main()\n{\n  mainImage(outColor, gl_FragCoord.xy);\n}\n#endif",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}