{
    "Shader": {
        "info": {
            "date": "1569791071",
            "description": "Based on: \n- [Ray Marching and Signed Distance Functions by Jamie Wong](http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/)\n- [@iq distance functions](http://iquilezles.org/articles/distfunctions/distfunctions.htm)",
            "flags": 0,
            "hasliked": 0,
            "id": "tdyGRW",
            "likes": 13,
            "name": "Raymarching studies",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "makio135",
            "viewed": 471
        },
        "renderpass": [
            {
                "code": "#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define EPSILON 0.0001\n#define PI 3.1415926\n\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat dot2(vec2 v) {\n    return dot(v, v);\n}\n\nfloat sdCappedCone(vec3 p, float h, float r1, float r2) {\n    vec2 q = vec2(length(p.xz), p.y);\n\n    vec2 k1 = vec2(r2, h);\n    vec2 k2 = vec2(r2 - r1, 2.0 * h);\n    vec2 ca = vec2(q.x - min(q.x,(q.y < 0.0) ? r1 : r2), abs(q.y) - h);\n    vec2 cb = q - k1 + k2 * clamp(dot(k1 - q, k2) / dot2(k2), 0.0, 1.0);\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt(min(dot2(ca), dot2(cb)));\n}\n\nfloat opSmoothUnion(float a, float b, float k) {\n  float h = max(k - abs(a - b), 0.0 ) / k;\n  return min(a, b) - h * h * h * k * (1.0 / 6.0);\n}\n\nfloat sceneSDF(vec3 p) {\n  p = rotateY(iTime) * p;\n\n  float s = sin(iTime * 2.) / 2. + 0.5;\n  float t = smoothstep(0., 2., s);\n  float l = 0.5 + s;\n  float r = 0.4;\n  float r2 = r - s/2.;\n\n  vec3 q = abs(p);\n  float d = sdCappedCone(q + vec3(0, -l, 0.), l, r, r2);\n  float a90 = radians(90.);\n  float a45 = radians(45.);\n  mat3 rotX = rotateX(a90);\n  d = min(d, sdCappedCone(rotX * q + vec3(0, -l, 0.), l, r, r2));\n  d = min(d, sdCappedCone(rotX * rotateY(a90) * q + vec3(0, -l, 0.), l, r, r2));\n  d = opSmoothUnion(d, sdCappedCone(rotateX(a45) * q + vec3(0, -l, 0.), l, r, r2), 0.1);\n  d = opSmoothUnion(d, sdCappedCone(rotateX(radians(60.)) * rotateY(a45)* q + vec3(0, -l, 0.), l, r, r2), 0.1);\n\n  return d;\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p) {\n    float pDist = sceneSDF(p);\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - pDist,\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - pDist,\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - pDist\n    ));\n}\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n\n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    }\n\n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n\n    vec3 light1Pos = vec3(-4.0, //* sin(iTime),\n                          2.0,\n                          4.0); //* cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n\n    vec3 light2Pos = vec3(2.0, //* sin(0.37 * iTime),\n                          2.0, //* cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);\n    return color;\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(8.0, 5.0 * sin(0.2 * iTime), 7.0);\n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    vec3 worldDir = viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    /*if (dist > MAX_DIST - EPSILON) { // Didn't hit anything\n         float d = 0.6 - length((fragCoord - iResolution.xy/2.)/iResolution.x);\n         fragColor = vec4(vec3(d), 1.0);\n         return;\n    }*/\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.97, 0.22, 0.5) * (mod(length(p), 0.3) > 0.15 ? 1. : 0.);\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 40.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n    //fragColor = vec4(fragCoord/iResolution.xy, 0.5, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}