{
    "Shader": {
        "info": {
            "date": "1671022720",
            "description": "This probably could have been done in a regular grid, I've used a tiling of big and small squares. \n\nclick the left or right sides to see the grid\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds2SDc",
            "likes": 33,
            "name": "Truchet Tiling (MAYBE!)",
            "published": 3,
            "tags": [
                "tiling"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define mlength(a) max(abs(a.x), abs(a.y))\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat box(in vec2 p, in vec2 b) {\n    // Circle (sloppy)\n    float d1 = length(p) - .56; \n    \n    // Box\n    vec2 d = abs(p)-b;\n    float d2 = length(max(d,0.)) + min(max(d.x,d.y),0.);\n    \n    // Mix between them\n    return mix(d1, d2, .5 + .5 * thc(4., iTime));\n}\n\nvec2 tile(vec2 fpos, vec2 ipos, float k) { \n    // Rotate tile randomly\n    float h = floor(2. * h21(ipos));  \n    fpos *= rot(h * pi / 2.);\n\n    // Outlines of 2 boxes\n    vec2 off = vec2(1.-.25, .25).xy;\n    float s = smoothstep(-k, k, -abs(box(fpos+off,vec2(.5)))+.075);\n    s = max(s,smoothstep(-k, k, -abs(box(fpos-off,vec2(.5)))+.075));                         \n    \n    // Checkerboard pattern\n    float chk = mod(ipos.x + ipos.y, 2.);\n    \n    // Split the tiling into \"in\" and \"out\" parts\n    // In by default\n    float s2   = smoothstep(-k, k, -box(fpos + off, vec2(.5)));\n    s2 = max(s2, smoothstep(-k, k, -box(fpos - off, vec2(.5))));  \n    \n    // Out if [checkerboard, rotate] == [0,0] or [1,1]\n    if (chk == h)\n        s2 = 1. - s2;\n\n    // Return outline and in/out regions\n    return vec2(s, s2);\n}\n\nvec3 layer(vec2 uv, float sc) {\n    float k = sc / iResolution.y;\n\n    uv += 1.5 * k * vec2(.25, .75) * iTime;\n    \n    // Split into grid\n    vec2 ipos = floor(sc * uv);\n    vec2 fpos = fract(sc * uv);\n       \n    // Split into grid of big and small tiles\n    float m = mod(2. * ipos.x - ipos.y, 5.);    \n    vec2 o = vec2(0);\n    if (m != 3.) {\n        fpos *= 0.5;   \n        if (m == 2.)      o = vec2(1,0); \n        else if (m == 4.) o = vec2(0,1); \n        else if (m == 1.) o = vec2(1);  \n    }   \n    fpos += .5 * o - .5;\n    ipos -= o;\n    \n    if (m == 3.) { // Small tile\n        float h = h21(ipos);\n        float d = length(fpos) - .5 * h;\n        float s = smoothstep(-k, k, -d + .25 * (1.-h));\n        return vec3(0, 1. - mod(ipos.x + ipos.y, 2.), 1. - s);\n    } else {       // Big tile     \n        vec2 s = tile(fpos, ipos, .5 * k);\n        float md = mod(ipos.x + ipos.y, 5.) / 5.;\n        return vec3(s, 1);\n    }\n}\n\nfloat clickLayer(vec2 uv, float sc) {\n    float k = sc / iResolution.y;\n\n    uv += 1.5 * k * vec2(.25, .75) * iTime;\n    \n    // Split into grid\n    vec2 ipos = floor(sc * uv);\n    vec2 fpos = fract(sc * uv);\n       \n    // Split into grid of big and small tiles\n    float m = mod(2. * ipos.x - ipos.y, 5.);    \n    vec2 o = vec2(0);\n    if (m != 3.) {\n        fpos *= 0.5;   \n        if (m == 2.)      o = vec2(1,0); \n        else if (m == 4.) o = vec2(0,1); \n        else if (m == 1.) o = vec2(1);  \n    }   \n    fpos += .5 * o - .5;\n    ipos -= o;\n    \n    float md = mod(ipos.x + ipos.y, 5.);\n    \n    if (m == 3.) { // Small tile\n        float d = mlength(fpos) - .48;\n        float s = smoothstep(-k, k, d);\n        return s;\n    } else {       // Big tile     \n        float d = mlength(fpos) - .48;\n        float s = smoothstep(-.5*k, .5*k, d);\n        float a = step(.5 * iResolution.x, iMouse.x);\n        if (md == 0.)\n            a *= thc(2., iTime + 32. * length(fpos));\n        else if (md == 1.)\n            a *= thc(2., iTime + 32. * mlength(fpos));\n        else if (md == 2.)\n            a *= thc(2., iTime + 32. * fpos.x);\n        else if (md == 3.)\n            a *= thc(2., iTime + 32. * fpos.y);\n        else if (md == 4.)\n            a *= thc(2., iTime + 32. * (fpos.x / (1. + fpos.y)));\n        return max(s, a);   \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // Detect mouse\n    float z = 0.;\n    if (iMouse.z > 0.)\n        z = 8.;\n    \n    // Layers\n    float sc = 18. - z;\n    vec3   s = layer(uv, sc);\n    vec3  s2 = layer(uv + vec2(.432/sc), sc);\n    float s3 = clickLayer(uv, sc);\n\n    vec3 col = .75 + .25 * cos(2. * pi * \n               (.65 * s.y + .05 * uv.x + vec3(0,1,2)/6.));\n    \n    // Dots\n    col -= .1 * s.y * (1. - s.z) + .02 * s2.x;\n    \n    // Shadow\n    col -= .3 * s2.y;\n    \n    // Thick outline\n    col = mix(col, vec3(.1, 0, .15), s.x - .28 * s.y);   \n    \n    if (iMouse.z > 0. && iMouse.x > 0.5 * iResolution.x)\n        col *= 0.5;\n\n    // Click layer\n    col += step(1., z) * s3;\n       \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}