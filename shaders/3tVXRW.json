{
    "Shader": {
        "info": {
            "date": "1582302186",
            "description": "An attempt at implementing generalized penrose tilings. \nInspired by https://youtu.be/KuXxly7-k1Q\nTouch the canvas to rotate the slicing plane. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3tVXRW",
            "likes": 4,
            "name": "GeneralizedPenrose-v3",
            "published": 3,
            "tags": [
                "raymarching",
                "tesselation",
                "lattice"
            ],
            "usePreview": 0,
            "username": "natpbs",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "/* ==== GeneralizedPenrose-v3 ==== */\n// inspired by https://youtu.be/KuXxly7-k1Q\n// by natpbs\n\n/* ???? Explanation ???? */\n// the image shows a 2d ortographic of a 3d cubic lattice. \n// However, only those cubes which lie completely inside of one half-space\n// delimited by the cutting plane are represented.\n\n// The code is not well commented, this is because I wrote it in the\n// Android app ShaderEditor https://github.com/markusfisch/ShaderEditor\n// and comments ended up slowing down the text editor so I deleted them.\n// :/\n// Now I'm not even sure what most of the code means anymore...\n\n/* #### Constants #### */\n// scene\n// larger values mean that more cubes feet in the screen\nconst float scale = 8.0; \n// side of a cube, on a scale where 0.5 is the lattice step\nconst float side = 0.47;\n// how round the cubes' edges are\n//   0.0 -> cube\n//   1.0 -> sphere\nconst float roundness = 0.15;\n// ray-marching\nconst int max_steps = 64;\nconst float threshold = 1.0 / 64.0;\n// math\nconst float TAU = 6.28318530718;\nconst float PHI = 0.5 + sqrt(1.25);\nconst float MAX_FLOAT = 1e20;\n\nvec4 quaternion;\n\n/* ++++ Functions ++++ */\n\nvec3 rotate(vec3 point, vec4 quaternion) {\n\tpoint += 2.0 * cross(\n\t\tcross(point, quaternion.xyz)\n\t\t+ point * quaternion.w,\n\t\tquaternion.xyz\n\t);\n\treturn point;\n}\n\nvec2 rescale(vec2 coord) {\n\tcoord += coord;\n\tcoord -= iResolution.xy;\n\tcoord /= iResolution.x;\n\treturn coord;\n}\n\nvec4 get_rotation() {\n\tconst float depth = 0.3;\n\tvec2 coord = rescale(iMouse.xy);\n\tvec3 axis = vec3(coord, depth);\n\taxis = normalize(axis);\n\tfloat real = axis.z;\n\taxis = cross(axis, vec3(0, 0, 1));\n\treturn vec4(axis, real);\n}\n\nfloat lattice_d(vec3 p) {\n\tp = fract(p) - 0.5;\n\tp = abs(p) - side * (1.0 - roundness);\n\treturn length(max(p,0.0))\n\t\t+ min(max(p.x,max(p.y,p.z)),0.0)\n\t\t- side * roundness;\n}\n\nvec3 lattice_n(vec3 p) {\n\tconst vec2 eps = vec2(0, 1.0 / 128.0);\n\tvec3 n = vec3(\n\t\tlattice_d(p + eps.yxx)\n\t\t- lattice_d(p - eps.yxx),\n\t\tlattice_d(p + eps.xyx)\n\t\t- lattice_d(p - eps.xyx),\n\t\tlattice_d(p + eps.xxy)\n\t\t- lattice_d(p - eps.xxy)\n\t);\n\treturn normalize(n);\n}\n\nbool cube_beyond(vec3 p, vec3 point, vec3 direction) {\n\tp = floor(p);\n\tp -= point;\n\tfloat d0 = dot(p, direction);\n\tdirection *= d0;\n\tfor (int k = 1; k < 8; k++) {\n\t\tvec3 v = p + vec3(\n\t\t\t(k>>0) & 1,\n\t\t\t(k>>1) & 1,\n\t\t\t(k>>2) & 1\n\t\t);\n\t\tfloat d = dot(v, direction);\n\t\tif (d <= 1e-5) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nvec3 set_color(vec3 p){\n\tvec3 n = lattice_n(p);\n\tquaternion.w = - quaternion.w;\n\tn = rotate(n, quaternion);\n\tvec3 color = 0.5 - 0.5 * n;\n\treturn color;\n}\n\nvec3 march(in vec3 p, in vec3 direction, out float d) {\n\tvec3 p_start = p;\n\tfor (int i = 0; i < max_steps; i++) {\n\t\td = lattice_d(p);\n\t\td = abs(d);\n\t\tif (d < threshold) {\n\t\t\tbool not_cut = cube_beyond(p, p_start, direction);\n\t\t\tif (not_cut) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\td += (0.5 - side) * 2.0;\n\t\t}\n\t\tp += d * direction;\n\t}\n\treturn p;\n}\n\n/* ~~~~ Main ~~~~ */\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n\tvec2 coord = rescale(frag_coord.xy);\n\n\tfloat depth = PHI - 1.0;\n\tvec3 param =\n\t\tvec3(scale * coord, depth);\n\n\tvec3 axis;\n\tvec2 angle;\n\tquaternion = get_rotation();\n\tvec3 point = rotate(param, quaternion);\n\tvec3 direction =\n\t\trotate(vec3(0, 0, 1), quaternion);\n\n\tfloat d;\n\tvec3 point_end = march(point, direction, d);\n\n\tvec3 color = set_color(point_end);\n    frag_color = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}