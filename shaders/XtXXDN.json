{
    "Shader": {
        "info": {
            "date": "1436723544",
            "description": "Vogel's distribution of points on a disk. [url=https://4rknova.com/blog/2017/01/01/vogel]Blog entry[/url]\nBased on [url=http://blog.marmakoide.org/?p=1]Marmakoide's article[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XtXXDN",
            "likes": 31,
            "name": "Vogel's Distribution Method",
            "published": 3,
            "tags": [
                "disk",
                "distribution",
                "uniform",
                "vogel"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 1892
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2015\n// WTFPL\n\n#define E  5e-5\n#define GA 2.39996322972865332\n#define PI 3.14159265359\n#define NS 512\n\nvec2 texsample(vec2 uv, float a, float i, float n)\n{\n    // The disk is divided to NS rings of equal areas\n    // and each point is placed on the corresponding ring \n    // with a theta-offset by the golden angle.\n    // Note that in the article quoted in the description,\n    // r is calculated as sqrt(i / n). This spreads a few \n    // of the initial points unevenly. The method used \n    // below seems to produce better results.\n    float r = sqrt((i+.5) / n)\n        , t = i * a;\n    // Convert from polar coordinates to cartesian.\n    return r * vec2(cos(t), sin(t));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv *= 1.1 * vec2(iResolution.x / iResolution.y, 1);\n    \n    vec3 col = vec3(0);\n        \n    for (int i = 0; i < NS; ++i)\n    {\n        vec2 p = texsample(uv, GA, float(i), float(NS))\n           , d = (p - uv);\n        float x =  E / dot(d,d);\n        col += vec3(x*x);\n    }\n    \n\tfragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}