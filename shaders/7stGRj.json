{
    "Shader": {
        "info": {
            "date": "1630245519",
            "description": "Anyone else looking forward to the new Dune movie?\nThe cycle lasts 30 seconds, if you can wait that long.",
            "flags": 1,
            "hasliked": 0,
            "id": "7stGRj",
            "likes": 53,
            "name": "Dune (Sand Worm)",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "dune",
                "movie",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "dean_the_coder",
            "viewed": 8367
        },
        "renderpass": [
            {
                "code": "// 'Dune (Sand Worm)' dean_the_coder (Twitter: @deanthecoder)\n// https://www.shadertoy.com/view/7stGRj (YouTube: https://youtu.be/GqkO68U4Hws)\n//\n// Processed by 'GLSL Shader Shrinker'\n// (https://github.com/deanthecoder/GLSLShaderShrinker)\n//\n// I'm kinda excited about the new Dune movie, but hope they\n// don't mess it up. The 1984 version was the one for me!\n//\n// Thanks to Evvvvil, Flopine, Nusan, BigWings, Iq, Shane,\n// totetmatt, Blackle, Dave Hoskins, byt3_m3chanic, and a bunch\n// of others for sharing their time and knowledge!\n\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define R\tiResolution\n#define NM\tnormalize\n#define Z0\tmin(iTime, 0.)\n#define sat(x)\tclamp(x, 0., 1.)\n#define S01(a)\tsmoothstep(0., 1., a)\n#define S(a, b, c)\tsmoothstep(a, b, c)\n#define minH(a, b, c) { float h_ = a; if (h_ < h.d) h = Hit(h_, b, c); }\n\nfloat t;\nstruct Hit {\n\tfloat d;\n\tint id;\n\tvec3 uv;\n};\n\nfloat n31(vec3 p) {\n\tconst vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p);\n\tp = fract(p);\n\tp = p * p * (3. - 2. * p);\n\tvec4 h = vec4(0, s.yz, s.y + s.z) + dot(ip, s);\n\th = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n\th.xy = mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\nfloat n21(vec2 p) { return n31(vec3(p, 1)); }\n\nfloat smin(float a, float b, float k) {\n\tfloat h = sat(.5 + .5 * (b - a) / k);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat box(vec3 p, vec3 b) { return length(max(abs(p) - b, 0.)); }\n\nfloat cap(vec3 p, vec2 h) {\n\tp.y -= clamp(p.y, 0., h.x);\n\treturn length(p) - h.y;\n}\n\nHit map(vec3 p) {\n\tfloat d, e, g, lp, r, rz,\n\t      f = S(0., 5., t),\n\t      n = n31(p * 4.);\n\td = n21(p.xz * .1) * 3. + p.y + 2.5;\n\tg = smin(d, length(p - vec3(.2, -8.6, 12.6)) - 6. + .01 * (.5 + .5 * sin(p.y * 22.)), 1.);\n\tp += vec3(.5 + sin(t * .6) * .2 + .6 * sin(p.z * .4 - .66), 1. - cos(p.z * .3 - .3 - f * mix(.8, 1., S01(sin(t * 1.4) * .5 + .5))) * 1.8, S(28., 30., t) * 2.5 - mix(6., 2.8, f));\n\tr = .8 + smin(p.z * .18, 2., .5) + abs(sin(p.z * 2.) * S01(p.z) * .05);\n\tr *= S(-5.3 + 2.75 * cos(t * .8) * f, 1.4, p.z);\n\tlp = length(p.xy);\n\tf = abs(lp - r - .05) - .03;\n\tr *= S(2.5, .35 + sin(t) * .1, p.z);\n\td = max(abs(lp - r) - .02, .4 - p.z);\n\tp.xy = vec2(fract(atan(p.y, p.x) * .477) - .5, lp);\n\tp.y -= r;\n\tHit h = Hit(min(d, box(p, vec3(.2 + p.z * .77, .02, .4))), 2, p);\n\tp.y += .13;\n\tvec2 v2 = vec2(.1, sat(.07 * p.y));\n\tp.z -= .4;\n\trz = mod(p.z, .3) - .15;\n\te = max(min(cap(vec3(mod(p.x, .08333) - .04167, p.y, rz), v2), cap(vec3(mod(p.x + .04167, .08333) - .04167, p.y, rz - .15), v2)), -0.05 - p.z * 0.2);\n\td = abs(p.x) - p.z * .5 - .5;\n\tminH(max(e, d), 4, p);\n\tf = max(f, d - .05);\n\tminH(f, 3, p);\n\tg = smin(g, h.d, .4 + .4 * n * S(1., 0., abs(g - f)));\n\tminH(g, 1, p);\n\treturn h;\n}\n\nvec3 N(vec3 p, float t) {\n\tfloat h = t * .4;\n\tvec3 n = vec3(0);\n\tfor (int i = min(iFrame, 0); i < 4; i++) {\n\t\tvec3 e = .005773 * (2. * vec3(((i + 3) >> 1) & 1, (i >> 1) & 1, i & 1) - 1.);\n\t\tn += e * map(p + e * h).d;\n\t}\n\n\treturn NM(n);\n}\n\nfloat shadow(vec3 p, vec3 lp) {\n\tfloat d,\n\t      s = 1.,\n\t      t = .1,\n\t      mxt = length(p - lp);\n\tvec3 ld = NM(lp - p);\n\tfor (float i = Z0; i < 40.; i++) {\n\t\td = map(t * ld + p).d;\n\t\ts = min(s, 15. * d / t);\n\t\tt += max(.1, d);\n\t\tif (mxt - t < .5 || s < .001) break;\n\t}\n\n\treturn S01(s);\n}\n\nfloat ao(vec3 p, vec3 n, float h) { return map(h * n + p).d / h; }\n\nfloat fog(vec3 v) { return exp(dot(v, v) * -.001); }\n\nvec3 lights(vec3 p, vec3 rd, float d, Hit h) {\n\tvec3 c,\n\t     ld = NM(vec3(6, 3, -10) - p),\n\t     n = N(p, d);\n\tfloat spe = 1.;\n\tif (h.id == 3) {\n\t\tc = vec3(.4, .35, .3);\n\t\tn.y += n31(h.uv * 10.);\n\t\tn = NM(n);\n\t}\n\telse if (h.id == 2) c = mix(vec3(.16, .08, .07), vec3(.6), pow(n31(h.uv * 10.), 3.));\n\telse if (h.id == 4) c = vec3(.6, 1, 4);\n\telse {\n\t\tspe = .1;\n\t\tc = vec3(.6);\n\t\tn.x += sin((p.x + p.z * n.z) * 8.) * .1;\n\t\tn = NM(n);\n\t}\n\n\tfloat ao = mix(ao(p, n, .2), ao(p, n, 2.), .7);\n\treturn mix((sat(.1 + .9 * dot(ld, n)) * (.1 + .9 * shadow(p, vec3(6, 3, -10))) * (.3 + .7 * ao) + (sat(.1 + .9 * dot(ld * vec3(-1, 0, -1), n)) * .3 + pow(sat(dot(rd, reflect(ld, n))), 10.) * spe) * ao) * c * vec3(1.85, .5, .08), vec3(1.85, .5, .08), S(.7, 1., 1. + dot(rd, n)) * .1);\n}\n\nvec4 march(inout vec3 p, vec3 rd, float s, float mx) {\n\tfloat i,\n\t      d = .01;\n\tHit h;\n\tfor (i = Z0; i < s; i++) {\n\t\th = map(p);\n\t\tif (abs(h.d) < .0015) break;\n\t\td += h.d;\n\t\tif (d > mx) return vec4(0);\n\t\tp += h.d * rd;\n\t}\n\n\treturn vec4(lights(p, rd, d, h), h.id);\n}\n\nvec3 scene(vec3 rd) {\n\tt = mod(iTime, 30.);\n\tvec3 c,\n\t     p = vec3(0);\n\tvec4 col = march(p, rd, 180., 64.);\n\tfloat f = 1.,\n\t      x = n31(rd + vec3(-t * 2., -t * .4, t));\n\tif (col.w == 0.) c = mix(vec3(.5145, .147, .0315), vec3(.22, .06, .01), sat(rd.y * 3.));\n\telse {\n\t\tc = col.rgb;\n\t\tf = fog(p * (.7 + .3 * x));\n\t}\n\n\tf *= 1. - x * x * x * .4;\n\treturn mix(vec3(.49, .14, .03), c, sat(f));\n}\n\n#define rgba(col)\tvec4(pow(max(vec3(0), col), vec3(.45)) * sat(t), 0)\n\nvoid mainVR(out vec4 fragColor, vec2 fc, vec3 ro, vec3 rd) {\n\trd.xz *= mat2(1, 0, 0, -1);\n\tfragColor = rgba(scene(rd));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fc) {\n\tvec2 uv = (fc - .5 * R.xy) / R.y,\n\t     q = fc.xy / R.xy;\n\tvec3 r = NM(cross(vec3(0, 1, 0), vec3(0, 0, 1))),\n\t     col = scene(NM(vec3(0, 0, 1) + r * uv.x + cross(vec3(0, 0, 1), r) * uv.y));\n\tcol *= .5 + .5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), .4);\n\tfragColor = rgba(col) * sat(30. - t);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}