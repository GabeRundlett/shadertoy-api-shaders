{
    "Shader": {
        "info": {
            "date": "1507065468",
            "description": "More raymarching stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "4tByzR",
            "likes": 4,
            "name": "Panic",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Gaeel",
            "viewed": 578
        },
        "renderpass": [
            {
                "code": "float time(float t){\n    //return t*0.3;\n    float tt = t;\n    tt = floor(tt)+smoothstep(0.0,1.0,fract(tt));\n    //t=floor(tt)+smoothstep(0.0,1.0,fract(tt));\n    return tt;\n}\n\nfloat PI = 3.14159265359;\n\nfloat map(vec3 p, float roff){\n    p = fract(p)*2.0-1.0;\n    float the = time(iTime/3.0+roff);\n    p.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    the = time(iTime*1.0);\n    p.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    the = time(iTime/6.0);\n    p.yz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    float m = sin(iTime*2.0)*0.5+0.5;\n    float m1 = pow(m,0.5);\n    float m2 = pow(1.0-m,0.5);\n    float d1 = length(p)-mix(0.0,0.6,m1)+sin(iTime+roff)*0.15;\n\tfloat d2 = length(max(abs(p)-vec3(1.0,1.0,1.0)*mix(0.0,0.4,m2),0.0));\n    return min(d1,d2);\n}\n\n\nfloat trace(vec3 o, vec3 r, float roff){\n    float t = 0.0;\n    vec3 p = o;\n    float d = 1.0;\n    float iter = 0.0;\n    float m = sin(iTime/4.0)*0.5+0.5;\n    float max_iter = mix(12.0,48.0,m);\n    float hit = 0.0001;\n    while(d>hit && iter<max_iter){\n    \t//vec3 p = o + r * t;\n\t\td = map(p,roff+length(o-p)*2.0)*0.5;\n        p+=r*d;\n        t += d;\n        iter++;\n    }\n    \n    return t*float(iter)/float(max_iter);\n}\n\nvec3 getR(vec2 uv, float off){\n    vec3 r = normalize(vec3(uv, 2.0+off));\n    float the = time(iTime/3.0);\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    the = time(iTime/4.0);\n    r.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    the = time(iTime/6.0);\n    r.yz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    return r;\n}\n\nvec3 doIm( float t, vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n                  \n    vec3 o = vec3(time(time(time(t/1.0))), time(time(time(t/1.0+0.5))), 0.0);\n    //vec3 o = vec3(0.0,0.0,0.0);  \n    float off = sin(uv.x+time(t/2.0))*sin(uv.y-time(t/2.0));\n    vec3 r = getR(uv, off);\n\tfloat ttr = trace(o,r,0.0);\n    off = sin(uv.x+time(t/2.0)+0.03)*sin(uv.y-time(t/2.0)-0.05);\n    r = getR(uv, off);\n    float ttg = trace(o,r,0.2);\n    off = sin(uv.x+time(t/2.0)-0.05)*sin(uv.y-time(t/2.0)+0.03);\n    r = getR(uv, off);\n    float ttb = trace(o,r,0.4);\n                  \n\tfloat fogr = 1.0 / (1.0 + ttr * ttr * 0.1);\n    float fogg = 1.0 / (1.0 + ttg * ttg * 0.1);\n    float fogb = 1.0 / (1.0 + ttb * ttb * 0.1);\n   \tvec3 col = vec3(fogr,fogg,fogb)*0.9;\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat mv = 0.5-sin(time(iTime/4.0))*0.5;\n\tfragColor = vec4(doIm(iTime,fragCoord),1);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}