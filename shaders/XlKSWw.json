{
    "Shader": {
        "info": {
            "date": "1484582377",
            "description": "was going to cut a tree but this is easeir",
            "flags": 0,
            "hasliked": 0,
            "id": "XlKSWw",
            "likes": 1,
            "name": "Voronoi Intersection Pattern",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "voronoi",
                "intersection",
                "easing",
                "merging"
            ],
            "usePreview": 0,
            "username": "parameterized",
            "viewed": 697
        },
        "renderpass": [
            {
                "code": "\nfloat rand(vec2 n)\n{\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n//(n1x, n1y, n2x, n2y) n=closest points\nvec4 voronoi(vec2 pos, float jitter)\n{\n\tvec2 posi = floor(pos);\n\tvec2 pos2 = vec2(0, 0);\n\tfloat dist = 0.0;\n\tvec2 n1 = vec2(0, 0);\n\tvec2 n2 = vec2(0, 0);\n\tfloat n1d = 9.0;\n\tfloat n2d = 9.0;\n\tfor (int i=-2; i < 2; i++) {\n\t\tfor (int j=-2; j < 2; j++) {\n\t\t\tpos2 = posi+vec2(i,j)+vec2(0.5)+(vec2(rand(posi+vec2(i,j)), rand(posi+vec2(i,j)+0.5))*2.0-1.0)*jitter*0.5;\n\t\t\tdist = dot(pos-pos2, pos-pos2);\n\t\t\tif (dist < n2d) {\n\t\t\t\tif (dist < n1d) {\n\t\t\t\t\tn2d = n1d;\n\t\t\t\t\tn1d = dist;\n\t\t\t\t\tn2 = n1;\n\t\t\t\t\tn1 = pos2;\n\t\t\t\t} else {\n\t\t\t\t\tn2d = dist;\n\t\t\t\t\tn2 = pos2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn vec4(n1, n2);\n}\n\nvec4 voronoi(vec2 pos)\n{\n\treturn voronoi(pos, 1.0);\n}\n\nfloat easeInOutCubic(float t)\n{\n    return t<0.5 ? 4.0*t*t*t : (t-1.0)*(2.0*t-2.0)*(2.0*t-2.0)+1.0;\n}\n\nfloat triangleWave(float t)\n{\n    return 1.0 - 2.0*abs(floor(t*0.5+0.5)-t*0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-vec2(iResolution.x/2.0,0)) / min(iResolution.x, iResolution.y);\n    float pos = easeInOutCubic(triangleWave(iTime))-0.5;\n    vec3 col = vec3(0.95);\n    vec4 vpts = voronoi(uv*8.0, sin(iTime/2.0)*0.5+0.5);\n    float t = easeInOutCubic(triangleWave(iTime));\n    col = distance(uv*8.0,vpts.xy*t+vpts.zw*(1.0-t))<0.1+0.5*(1.0-t) ? vec3(1.0-distance(uv*8.0,vpts.zw)-distance(uv*8.0,vpts.xy)) : col;\n\tfragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}