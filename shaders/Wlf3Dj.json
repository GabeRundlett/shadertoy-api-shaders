{
    "Shader": {
        "info": {
            "date": "1557593556",
            "description": "Simple randomized voronoi noise",
            "flags": 0,
            "hasliked": 0,
            "id": "Wlf3Dj",
            "likes": 5,
            "name": "Voronoi noise test",
            "published": 3,
            "tags": [
                "voronoi",
                "test",
                "noise"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 671
        },
        "renderpass": [
            {
                "code": "struct cell\n{\n\tvec2 center;\n    vec3 color;\n};\n\n//pseudo-random function which returns a vec3 and increments a given seed\n//changing the constants changes the noise\n//it's also changed by the date\nvec3 pseudorandPos(out float randseed)\n{\n    vec3 returnVal = vec3(.0);\n    returnVal.x = fract(cos(randseed) * 512.49499588 + 421.059484);\n    returnVal.y = fract(sin(randseed) * 494.98571723 + 768.344599);\n    returnVal.z = fract(cos(randseed) * 231.24411988 + 923.148277);\n    randseed += .049219 + length(returnVal);\n\treturn returnVal;\n}\n\n\nconst int CELL_AMOUNT = 32;\ncell cells[CELL_AMOUNT];\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    \n\tfloat randseed = 0.0;\n    for(int i = 0; i < CELL_AMOUNT; i++)\n    {\n    \tcells[i] = cell(pseudorandPos(randseed).xy, pseudorandPos(randseed));\n        cells[i].center.y *= iResolution.y/iResolution.x;\n    }\n    \n    float minDistToCenter = 10000.0;\n    vec3 col = vec3(.0);\n    \n    for(int i = 0; i < CELL_AMOUNT; i++)\n    {\n        float distToCenter = length(uv - cells[i].center);\n        bool distSmaller = distToCenter < minDistToCenter;\n    \tminDistToCenter = mix(minDistToCenter, distToCenter, distSmaller);\n        col = mix(col, cells[i].color, float(distSmaller));\n        \n    }\n\tcol = mix(vec3(.0), col, float(minDistToCenter < iTime / 20.0));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}