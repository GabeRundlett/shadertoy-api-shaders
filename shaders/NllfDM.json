{
    "Shader": {
        "info": {
            "date": "1650983262",
            "description": "Just playing around with forked shader",
            "flags": 32,
            "hasliked": 0,
            "id": "NllfDM",
            "likes": 12,
            "name": "Pixel Lines V3",
            "published": 3,
            "tags": [
                "copy",
                "thing"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scale factor to enlarge image by\n    float sf = dim.y / (iResolution.y - 81.);\n\n    // Scale and centre image to screen\n    vec2 coord = ceil(sf * fragCoord) ;\n    coord -= ceil(sf * 0.5 * iResolution.xy - 0.5 * dim);\n\n    vec3 col = texelFetch(iChannel0, ivec2(coord), 0).rgb;\n    \n    float m = mlength(coord - 0.5 * dim + 0.5);\n    col += step(abs(m- 0.5 * dim.x - 0.5), 0.);   \n        \n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float line(vec2 f, float t, float o) {\n    float a = 0.25 + 0.25 * cos(-7.5 * t + o);\n    float y = a * dim.y * sin(t + o) + (1.-a) * f.x * cos(t + o);\n    //y = 0.45 * dim.y * cos(10000. * pow((f.y - f.x)/dim.x, 3.)+ t + o);\n    y *= 0.5 + 0.5 * cos(7.5 * f.x/dim.x - 3.75 * t + o + 0. * pi/30. * h21(f));\n    return step(f.y, y);\n}\n\n// a bit sloppy\nvec3 lineCol(float x) {\n    float o = 2. * pi / 3.;\n    return 0.5 + 0.5 * thc(4., vec3(x-o,x,x+o));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center fragCoord\n    fragCoord -= 0.5 * dim;\n\n    vec3 col;\n    \n    float n = 15.;\n    for (float i = 0.; i < n; i++) {\n        // Lower framerate + offset time for each line\n        float time = 0.25 * floor(15. * iTime) / 15.;\n        float o = 2. * pi * i / n;\n        \n        // Center line (draw everything under the line)\n        float c = line(fragCoord, time, o); \n        \n        // Shift line up/down/left/right\n        float t = line(fragCoord - vec2(0,1), time, o);\n        float b = line(fragCoord + vec2(0,1), time, o);\n        float l = line(fragCoord - vec2(1,0), time, o);\n        float r = line(fragCoord + vec2(1,0), time, o);\n        \n        // Only draw cells which have 0 and 1 cell neighbours\n        float mx = max(max(t,b), max(l,r));\n        float mn = min(min(t,b), min(l,r));\n         \n        // Only draw new line if a line hasn't been drawn already on this pixel\n        if (col == vec3(0))\n            col = c * (mx - mn) * lineCol(2. * pi * i / n + 0.75 * pi);\n    }\n    \n    // Restrict to bounds\n    col *= step(fragCoord.x, 0.5 * dim.x) * step(fragCoord.y, 0.5 * dim.y);\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// dimensions of sprite - has to be less than screen dimensions\nconst vec2 dim = vec2(81);\n\n#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}