{
    "Shader": {
        "info": {
            "date": "1655438453",
            "description": "A glowing gem fractal.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsGcWG",
            "likes": 2,
            "name": "Shimmering emeralds",
            "published": 3,
            "tags": [
                "fractal",
                "emerald"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/12.0;\n    float scale = c1.z;\n    float offset = 0.;\n    float offset1 = iTime/1000.;\n    for(int i=0;i<2;i++)\n    {\n        vec2 t2 = vec2(0.);\n        vec2 t3 = vec2(0.);\n        for(int k = 0; k < 7; k++){\n            uv += (t2.yx)/scale*sign(uv.y-uv.x);\n            uv.x -= float(k-i);\n            //uv.x -= float(k-i)*floor(uv.x);\n            t2 = triangle_wave(uv.yx-1.5,scale);\n            t3 = triangle_wave(uv,scale);\n            uv.yx = (t2-t3)/(scale);\n            vec2 uv1 = uv + triangle_wave((uv.yx+iTime/2.)*2.,scale)/16.;\n        col.x = min(((uv1.x-uv1.y)),col.x)/sqrt(3.);\n        col = (col+vec3(col.x)).yzx/sqrt(3.);\n        }\n        \n    }\n    fragColor = vec4(-vec3(col*4.),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}