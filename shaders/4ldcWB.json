{
    "Shader": {
        "info": {
            "date": "1533908818",
            "description": "I have respect\nhttps://twitter.com/THINKING_FACE__/status/1020473830815350784",
            "flags": 32,
            "hasliked": 0,
            "id": "4ldcWB",
            "likes": 17,
            "name": ":thinking_face: spinner",
            "published": 3,
            "tags": [
                "2d",
                "spinner",
                "emoji",
                "thinking"
            ],
            "usePreview": 1,
            "username": "kaneta",
            "viewed": 958
        },
        "renderpass": [
            {
                "code": "#define TAU 6.283185307\n#define PI 3.141592654\n\n#define WING_NUM 5.0\n#define SPEED -6.0\n\nfloat time;\n\nvec4 thinking_face(vec2 uv, vec2 b)\n{\n    uv += b * 0.5;\n    return texture(iChannel0, uv / b);\n}\n\nmat2 rot(float x)\n{\n    float c = cos(x), s = sin(x);\n    return mat2(c, s, -s, c);\n}\n\n// Rotate fold technique\n// https://gam0022.net/blog/2017/03/02/raymarching-fold/\nvec2 foldRotate(in vec2 p, in float s) {\n    float a = PI / s - atan(p.x, p.y);\n    float n = TAU / s;\n    a = floor(a / n) * n;\n    p *= rot(a);\n    return p;\n}\n\nfloat circle(vec2 uv, float s)\n{\n    return length(uv) - s;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nvec2 spinnerFold(vec2 uv)\n{\n    return foldRotate(uv, WING_NUM * (sin(time + PI*-0.5) * 0.5 + 0.5));\n}\n\nvec4 spinner(vec2 uv)\n{\n    uv *= rot(time * SPEED);\n    vec2 p = spinnerFold(uv);\n    float body = circle(p, 0.25);\n    float wing = circle(p - vec2(0.0, 0.55), 0.25);\n    float d = smin(body, wing, 7.0);\n    return mix(vec4(0.0), vec4(0.4118 ,0.2667 ,0.0, 1.0), step(d, 0.0));\n}\n\nvec4 thinking_spinner(vec2 uv)\n{\n    vec4 col = thinking_face(uv, vec2(0.75));\n    uv *= rot(time * SPEED);\n    vec2 p = spinnerFold(uv);\n    p += vec2(0.0, -0.5);\n    vec4 wingFace = thinking_face(p, vec2(0.75));\n    col = mix(col * step(0.1, col.a), wingFace, wingFace.a);\n    \n    return col;\n}\n\nvec3 getColor(vec2 uv)\n{\n    const int num = 4;\n    vec4 col = vec4(0.0);\n    for(int i=0; i<num; i++) {\n        time = iTime + float(i) * 0.004;\n        vec4 c = thinking_spinner(uv);\n        vec4 b = spinner(uv);\n        b = mix(vec4(0.2), b, b.a);\n        c = mix(b, c, c.a);\n        col += c;\n    }\n    return col.rgb / float(num);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 col = getColor(uv);\n    \n    // Simple vignette effect by Ippokratis\n    // https://www.shadertoy.com/view/lsKSWR\n    uv = fragCoord.xy / iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 200.0;\n    vig = pow(vig, 0.1);\n    fragColor = vec4(vec3(vig * col), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// I got idea of this code from here\n// https://www.shadertoy.com/view/lslGDn\n\n// Reference of implementation\n// https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch25.html\n\n#define AA\n\nfloat cross2(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\nfloat InTri( vec2 A, vec2 B, vec2 C, const in vec2 P )\n{\n    vec2 a = C - A, b = B - A, c = P - A;\n    vec2 area = vec2(cross2(c,b),cross2(a,c)) / (cross2(a,b));\n    return -min(min(area.x, area.y), 1.0 - area.x - area.y);\n}\n\nfloat InBezier(vec2 A, vec2 B, vec2 C, vec2 P, float cond)\n{\n    vec2 a = C - A, b = B - A, c = P - A;\n    vec2 area = vec2(cross2(c,b),cross2(a,c)) / (cross2(a,b));\n    float area2 = 1.0 - area.x - area.y;\n    vec2 d = vec2(area.y * 0.5, 0.0) + area2;\n    return max(cond * (d.x * d.x - d.y), -min(min(area.x, area.y), area2));\n}\n\n#define IT(a,b,c) d = min( d, InTri(v[a],v[b],v[c], uv));\n#define IB(a,b,c) d = min( d, InBezier(v[a],v[b],v[c], uv, -1.0));\n#define IB2(a,b,c) d = min( d, InBezier(v[a],v[b],v[c], uv, 1.0));\n\nfloat udRect( vec2 p, vec2 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat _31(vec2 uv) {    // 1\n    float d = 10000.0;\n    if (udRect(uv - vec2(0.1050,0.8745), vec2(0.2610,0.2555)) == 0.0) {\n    vec2 v[67] = vec2[67](\n        vec2(-0.0450,0.6230),vec2(-0.0780,0.6290),vec2(-0.0980,0.6550),vec2(-0.1180,0.6810),vec2(-0.1180,0.7170),vec2(-0.1180,0.7290),\n        vec2(-0.1200,0.7340),vec2(-0.1230,0.7390),vec2(-0.1340,0.7510),vec2(-0.1490,0.7670),vec2(-0.1520,0.7800),vec2(-0.1560,0.7940),\n        vec2(-0.1530,0.8300),vec2(-0.1450,0.9450),vec2(-0.1020,1.0180),vec2(-0.0880,1.0430),vec2(-0.0620,1.0680),vec2(-0.0360,1.0930),\n        vec2(-0.0130,1.1040),vec2(0.0380,1.1300),vec2(0.1050,1.1300),vec2(0.1720,1.1300),vec2(0.2220,1.1050),vec2(0.2410,1.0950),\n        vec2(0.2630,1.0760),vec2(0.2850,1.0580),vec2(0.2980,1.0400),vec2(0.3170,1.0140),vec2(0.3320,0.9750),vec2(0.3480,0.9370),\n        vec2(0.3550,0.8960),vec2(0.3610,0.8660),vec2(0.3630,0.8280),vec2(0.3660,0.7900),vec2(0.3630,0.7800),vec2(0.3530,0.7450),\n        vec2(0.2900,0.7190),vec2(0.2270,0.6930),vec2(0.1420,0.6900),vec2(0.1330,0.6900),vec2(0.1180,0.6890),vec2(0.1040,0.6880),\n        vec2(0.0950,0.6870),vec2(0.0870,0.6870),vec2(0.0850,0.6880),vec2(0.0820,0.6880),vec2(0.0800,0.6840),vec2(0.0790,0.6800),\n        vec2(0.0780,0.6720),vec2(0.0770,0.6650),vec2(0.0750,0.6600),vec2(0.0740,0.6580),vec2(0.0730,0.6550),vec2(0.0720,0.6530),\n        vec2(0.0710,0.6500),vec2(0.0710,0.6480),vec2(0.0690,0.6450),vec2(0.0680,0.6430),vec2(0.0660,0.6410),vec2(0.0650,0.6390),\n        vec2(0.0620,0.6360),vec2(0.0600,0.6340),vec2(0.0570,0.6330),vec2(0.0390,0.6240),vec2(0.0070,0.6210),vec2(-0.0250,0.6190),\n        vec2(-0.0450,0.6230)\n    );\n    IT(45,6,7)IT(12,8,10)IT(6,45,5)IT(8,12,7)IT(14,16,44)IT(5,46,4)IT(45,12,14)IT(7,12,45)IT(46,66,4)IT(20,16,18)\n    IT(64,66,46)IT(53,62,64)IT(66,2,4)IT(54,58,62)IT(54,56,58)IT(58,60,62)IT(62,53,54)IT(53,64,51)IT(20,22,24)IT(24,26,28)\n    IT(20,24,39)IT(28,30,38)IT(34,36,32)IT(30,32,36)IT(24,28,39)IT(48,51,64)IT(46,5,45)IT(64,46,47)IT(52,53,51)IT(50,51,48)\n    IT(47,48,64)IT(39,28,38)IT(38,30,36)IT(41,20,40)IT(41,42,44)IT(41,44,20)IT(44,45,14)IT(20,39,40)IT(44,16,20)IB2(0,1,2)\n    IB2(2,3,4)IB(4,5,6)IB(6,7,8)IB2(8,9,10)IB2(10,11,12)IB2(12,13,14)IB2(14,15,16)IB2(16,17,18)IB2(18,19,20)IB2(20,21,22)\n    IB2(22,23,24)IB2(24,25,26)IB2(26,27,28)IB2(28,29,30)IB2(30,31,32)IB2(32,33,34)IB2(34,35,36)IB2(36,37,38)IB(38,39,40)IB(40,41,42)\n    IB2(42,43,44)IB(44,45,46)IB(46,47,48)IB2(48,49,50)IB(50,51,52)IB(52,53,54)IB2(54,55,56)IB2(56,57,58)IB2(58,59,60)IB2(60,61,62)\n    IB2(62,63,64)IB2(64,65,66)\n    return d;\n    }\n    return d;\n}\nfloat _32(vec2 uv) {    // 2\n    float d = 10000.0;\n    if (udRect(uv - vec2(0.0460,0.8295), vec2(0.1650,0.2105)) == 0.0) {\n    vec2 v[193] = vec2[193](\n        vec2(-0.0470,0.6220),vec2(-0.0770,0.6280),vec2(-0.0970,0.6500),vec2(-0.1040,0.6580),vec2(-0.1080,0.6640),vec2(-0.1120,0.6710),\n        vec2(-0.1150,0.6790),vec2(-0.1180,0.6880),vec2(-0.1180,0.6970),vec2(-0.1190,0.7060),vec2(-0.1190,0.7220),vec2(-0.1190,0.7570),\n        vec2(-0.1100,0.7800),vec2(-0.1020,0.8040),vec2(-0.1040,0.8330),vec2(-0.1060,0.8570),vec2(-0.1030,0.8660),vec2(-0.1000,0.8760),\n        vec2(-0.0890,0.8800),vec2(-0.0830,0.8830),vec2(-0.0750,0.8830),vec2(-0.0670,0.8830),vec2(-0.0580,0.8800),vec2(-0.0500,0.8780),\n        vec2(-0.0450,0.8750),vec2(-0.0260,0.8600),vec2(-0.0230,0.8240),vec2(-0.0220,0.8040),vec2(-0.0180,0.8000),vec2(-0.0140,0.7990),\n        vec2(0.0040,0.8000),vec2(0.0230,0.8010),vec2(0.0520,0.8040),vec2(0.0820,0.8080),vec2(0.1080,0.8120),vec2(0.1220,0.8140),\n        vec2(0.1310,0.8140),vec2(0.1400,0.8150),vec2(0.1470,0.8140),vec2(0.1540,0.8130),vec2(0.1580,0.8100),vec2(0.1630,0.8080),\n        vec2(0.1670,0.8030),vec2(0.1780,0.7910),vec2(0.1740,0.7730),vec2(0.1710,0.7550),vec2(0.1570,0.7480),vec2(0.1480,0.7440),\n        vec2(0.1230,0.7380),vec2(0.1120,0.7360),vec2(0.1030,0.7330),vec2(0.0950,0.7310),vec2(0.0940,0.7300),vec2(0.0930,0.7290),\n        vec2(0.0920,0.7270),vec2(0.0910,0.7250),vec2(0.0900,0.7220),vec2(0.0890,0.7190),vec2(0.0880,0.7150),vec2(0.0870,0.7110),\n        vec2(0.0870,0.7070),vec2(0.0830,0.6890),vec2(0.0800,0.6780),vec2(0.0780,0.6680),vec2(0.0760,0.6600),vec2(0.0740,0.6520),\n        vec2(0.0710,0.6470),vec2(0.0690,0.6430),vec2(0.0670,0.6400),vec2(0.0650,0.6380),vec2(0.0610,0.6360),vec2(0.0510,0.6290),\n        vec2(0.0350,0.6250),vec2(0.0180,0.6210),vec2(-0.0080,0.6200),vec2(-0.0350,0.6190),vec2(-0.0470,0.6220),vec2(0.0250,0.6420),\n        vec2(0.0470,0.6470),vec2(0.0530,0.6550),vec2(0.0590,0.6630),vec2(0.0630,0.6950),vec2(0.0640,0.7090),vec2(0.0670,0.7120),\n        vec2(0.0710,0.7160),vec2(0.0700,0.7260),vec2(0.0690,0.7370),vec2(0.0650,0.7390),vec2(0.0530,0.7430),vec2(0.0690,0.7470),\n        vec2(0.0700,0.7470),vec2(0.0720,0.7480),vec2(0.1230,0.7560),vec2(0.1390,0.7620),vec2(0.1560,0.7680),vec2(0.1560,0.7790),\n        vec2(0.1560,0.7920),vec2(0.1410,0.7930),vec2(0.1260,0.7940),vec2(0.0510,0.7850),vec2(0.0210,0.7810),vec2(0.0080,0.7800),\n        vec2(-0.0050,0.7790),vec2(-0.0170,0.7780),vec2(-0.0290,0.7780),vec2(-0.0320,0.7830),vec2(-0.0360,0.7890),vec2(-0.0380,0.7940),\n        vec2(-0.0400,0.8000),vec2(-0.0420,0.8140),vec2(-0.0450,0.8410),vec2(-0.0520,0.8520),vec2(-0.0600,0.8640),vec2(-0.0740,0.8640),\n        vec2(-0.0810,0.8640),vec2(-0.0840,0.8610),vec2(-0.0880,0.8590),vec2(-0.0880,0.8510),vec2(-0.0890,0.8440),vec2(-0.0870,0.8320),\n        vec2(-0.0810,0.8010),vec2(-0.0940,0.7700),vec2(-0.1000,0.7580),vec2(-0.1010,0.7280),vec2(-0.1030,0.6990),vec2(-0.0990,0.6870),\n        vec2(-0.0960,0.6770),vec2(-0.0880,0.6670),vec2(-0.0810,0.6580),vec2(-0.0700,0.6510),vec2(-0.0600,0.6440),vec2(-0.0480,0.6410),\n        vec2(-0.0240,0.6330),vec2(0.0210,0.6410),vec2(0.0230,0.6420),vec2(0.0250,0.6420),vec2(0.1720,0.8250),vec2(0.1670,0.8270),\n        vec2(0.1560,0.8370),vec2(0.1110,0.8770),vec2(0.0430,0.8630),vec2(0.0250,0.8590),vec2(0.0200,0.8590),vec2(0.0160,0.8590),\n        vec2(0.0120,0.8640),vec2(0.0060,0.8700),vec2(0.0090,0.8770),vec2(0.0160,0.8880),vec2(0.0530,0.8930),vec2(0.1010,0.8980),\n        vec2(0.1390,0.8800),vec2(0.1570,0.8720),vec2(0.1720,0.8580),vec2(0.1880,0.8440),vec2(0.1880,0.8370),vec2(0.1880,0.8330),\n        vec2(0.1850,0.8290),vec2(0.1830,0.8260),vec2(0.1790,0.8250),vec2(0.1760,0.8240),vec2(0.1720,0.8250),vec2(0.1700,0.9440),\n        vec2(0.1590,0.9480),vec2(0.1530,0.9630),vec2(0.1480,0.9780),vec2(0.1510,0.9900),vec2(0.1550,1.0030),vec2(0.1660,1.0020),\n        vec2(0.1770,1.0020),vec2(0.1920,0.9940),vec2(0.2070,0.9870),vec2(0.2080,0.9820),vec2(0.2110,0.9730),vec2(0.2060,0.9620),\n        vec2(0.2020,0.9520),vec2(0.1940,0.9470),vec2(0.1850,0.9420),vec2(0.1810,0.9410),vec2(0.1780,0.9410),vec2(0.1700,0.9440),\n        vec2(0.0060,0.9760),vec2(-0.0070,0.9880),vec2(-0.0030,1.0070),vec2(0.0000,1.0270),vec2(0.0160,1.0330),vec2(0.0360,1.0400),\n        vec2(0.0480,1.0230),vec2(0.0550,1.0100),vec2(0.0540,0.9980),vec2(0.0530,0.9870),vec2(0.0430,0.9770),vec2(0.0240,0.9580),\n        vec2(0.0060,0.9760)\n    );\n    IT(116,16,18)IT(114,115,18)IT(20,114,18)IT(20,22,113)IT(112,113,22)IT(22,24,112)IT(20,113,114)IT(118,16,117)IT(116,117,16)IT(118,14,16)\n    IT(13,14,119)IT(119,14,118)IT(111,112,24)IT(111,24,110)IT(18,115,116)IT(119,121,13)IT(180,182,190)IT(186,182,184)IT(190,182,188)IT(186,188,182)\n    IT(140,146,148)IT(146,140,142)IT(109,26,27)IT(109,110,26)IT(24,26,110)IT(144,146,142)IT(31,32,99)IT(109,27,107)IT(10,123,124)IT(124,125,8)\n    IT(12,121,122)IT(12,13,121)IT(123,10,122)IT(10,124,8)IT(6,8,125)IT(12,122,10)IT(126,4,6)IT(126,6,125)IT(127,2,4)IT(127,4,126)\n    IT(2,129,130)IT(2,128,129)IT(2,130,76)IT(76,130,131)IT(128,2,127)IT(105,107,28)IT(107,27,28)IT(103,105,28)IT(102,29,30)IT(99,101,31)\n    IT(101,102,30)IT(30,31,101)IT(103,28,29)IT(103,29,102)IT(132,74,76)IT(133,74,132)IT(76,131,132)IT(74,133,72)IT(135,78,72)IT(135,72,133)\n    IT(78,70,72)IT(99,32,33)IT(139,148,150)IT(165,167,169)IT(139,150,138)IT(98,36,97)IT(36,98,34)IT(33,34,98)IT(97,38,40)IT(138,150,152)\n    IT(38,97,36)IT(33,98,99)IT(163,165,169)IT(175,163,169)IT(177,179,175)IT(163,175,179)IT(173,169,171)IT(175,169,173)IT(158,136,156)IT(136,138,152)\n    IT(152,154,136)IT(136,154,156)IT(96,40,42)IT(90,91,86)IT(89,90,86)IT(86,54,85)IT(60,83,84)IT(57,84,85)IT(89,86,87)IT(83,60,81)\n    IT(66,79,80)IT(66,68,79)IT(68,70,79)IT(79,70,78)IT(80,62,64)IT(64,66,80)IT(80,81,62)IT(60,62,81)IT(53,86,91)IT(97,40,96)\n    IT(48,92,93)IT(93,46,48)IT(92,48,49)IT(50,91,92)IT(44,95,96)IT(96,42,44)IT(95,44,94)IT(44,46,94)IT(94,46,93)IT(56,57,85)\n    IT(55,56,85)IT(58,59,84)IT(59,60,84)IT(57,58,84)IT(50,51,91)IT(50,92,49)IT(53,54,86)IT(53,91,52)IT(52,91,51)IT(55,85,54)\n    IT(140,148,139)IB2(0,1,2)IB2(2,3,4)IB2(4,5,6)IB2(6,7,8)IB2(8,9,10)IB2(10,11,12)IB(12,13,14)IB2(14,15,16)IB2(16,17,18)\n    IB2(18,19,20)IB2(20,21,22)IB2(22,23,24)IB2(24,25,26)IB(26,27,28)IB(28,29,30)IB(30,31,32)IB(32,33,34)IB2(34,35,36)IB2(36,37,38)\n    IB2(38,39,40)IB2(40,41,42)IB2(42,43,44)IB2(44,45,46)IB2(46,47,48)IB(48,49,50)IB(50,51,52)IB(52,53,54)IB(54,55,56)IB(56,57,58)\n    IB(58,59,60)IB2(60,61,62)IB2(62,63,64)IB2(64,65,66)IB2(66,67,68)IB2(68,69,70)IB2(70,71,72)IB2(72,73,74)IB2(74,75,76)IB(77,78,79)\n    IB(79,80,81)IB2(81,82,83)IB(83,84,85)IB(85,86,87)IB2(87,88,89)IB(89,90,91)IB(91,92,93)IB(93,94,95)IB(95,96,97)IB(97,98,99)\n    IB2(99,100,101)IB(101,102,103)IB2(103,104,105)IB2(105,106,107)IB2(107,108,109)IB(109,110,111)IB(111,112,113)IB(113,114,115)IB(115,116,117)IB(117,118,119)\n    IB2(119,120,121)IB(121,122,123)IB(123,124,125)IB(125,126,127)IB(127,128,129)IB(129,130,131)IB(131,132,133)IB2(133,134,135)IB2(136,137,138)IB(138,139,140)\n    IB2(140,141,142)IB2(142,143,144)IB2(144,145,146)IB2(146,147,148)IB2(148,149,150)IB2(150,151,152)IB2(152,153,154)IB2(154,155,156)IB2(156,157,158)IB2(158,159,160)\n    IB2(161,162,163)IB2(163,164,165)IB2(165,166,167)IB2(167,168,169)IB2(169,170,171)IB2(171,172,173)IB2(173,174,175)IB2(175,176,177)IB2(177,178,179)IB2(180,181,182)\n    IB2(182,183,184)IB2(184,185,186)IB2(186,187,188)IB2(188,189,190)IB2(190,191,192)\n    return d;\n    }\n    return d;\n}\n\nvec4 thinking_face(vec2 uv)\n{\n    uv *= 0.4;\n    uv += vec2(0.1, 0.85);\n    float body = _31(uv);\n    vec3 ret = step(body, 0.0) * vec3(1.0, 0.6, 0.1);\n    float face = _32(uv);\n    ret = mix(ret, vec3(0.0), step(face, 0.0));\n    \n    return vec4(ret, step(body, 0.0));\n}\n\nvec4 getColor(vec2 uv) {\n    vec4 ret = thinking_face(uv);\n    return ret;\n}\n\nvec4 aaGetColor(vec2 p) {\n    vec4 col = vec4(0.0);\n    const int num = 4;\n    \n    for (int i = 0; i < num; i++) {\n        float fi = float(i + 1);\n    \tcol += getColor(p + vec2(step(fi, 2.001), mod(fi, 2.001)) * vec2(0.002, 0.0028));\n    }\n    return col / float(num);\n}\n\n// Detect change resolution technique\n// https://www.shadertoy.com/view/lscBW4\nbool resolutionChanged() {\n    return floor(texelFetch(iChannel0, ivec2(0), 0).r) != floor(iResolution.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    if (resolutionChanged()) {\n        if (fragCoord.x < 1.5 && fragCoord.y < 1.5) {\n            fragColor = floor(vec4(iResolution.xyx, 0.0));\n        } else {\n    \t\tvec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\t    \t#ifdef AA\n    \t\t\tvec4 fill = aaGetColor(uv);\n    \t\t#else\n    \t\t\tvec4 fill = getColor(uv);\n    \t\t#endif\n    \t\tfragColor = fill;   \n        }\n    } else {\n        vec2 uv = (fragCoord.xy / iResolution.xy);\n    \tfragColor = texture(iChannel0, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}