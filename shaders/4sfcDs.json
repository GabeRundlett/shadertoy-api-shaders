{
    "Shader": {
        "info": {
            "date": "1490258233",
            "description": "Made this in a still hour and it reminds me to the background animations of the playstation3 os",
            "flags": 0,
            "hasliked": 0,
            "id": "4sfcDs",
            "likes": 4,
            "name": "ChocWarp",
            "published": 3,
            "tags": [
                "waves",
                "wave",
                "uv",
                "animation",
                "background",
                "dots",
                "uvs",
                "dot",
                "ps3",
                "os",
                "manipulation"
            ],
            "usePreview": 0,
            "username": "JavasCrypt20",
            "viewed": 772
        },
        "renderpass": [
            {
                "code": "//  //  SOME PROCEDURAL PATTERN- GENERATORS  //  //\nfloat PatChecker(vec2 uvs,  float countX, float countY ){\n    return mod( floor( countX * uvs.x) + floor( countY * uvs.y), 2.0);\n}\nfloat PatGradSaw( float uvAxis, float count){\n\treturn fract( count * uvAxis);\n}\nfloat PatGradSawMirr( float uvAxis, float count){\n\treturn abs( fract( count * uvAxis)* 2.0 - 1.0);\n}\nfloat PatSinWave( float uvX, float uvY, float count ){\n\treturn smoothstep(0.0, 0.06, 0.2 - 0.1 * sin( count * uvX) - uvY);\n}\nfloat PatDots( vec2 uvs, float count, float size){\n\treturn smoothstep( size , size + 0.425, length( fract( count * uvs) - 0.5));\n}\nfloat PatBricks( vec2 uvs, float size, float gap, float smoothness){\n\treturn smoothstep(0.54-gap-smoothness,0.54-gap,\n           max(abs(fract(size*uvs.x-0.5*mod(floor(size*uvs.y),2.0))-0.5),\n           abs(fract(size*uvs.y)-0.5)));\n}\nfloat panX( float uvx, float speed){\n    return uvx + iTime * speed;\n}\nfloat panY( float uvy, float speed){\n    return uvy + iTime * speed;\n}\n\n//  // MAIN SHADER  //  //\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = uv.x * ( iResolution.x / iResolution.y);\n    float bricks = PatBricks( vec2( uv.x + iTime / 10.0, uv.y - iTime / 10.0), 2.0, 0.001, 1.0);\n    float bricks2 = PatBricks( vec2( -uv.x + iTime / 24.0, -uv.y + iTime / 36.0), 32.0, 0.1, 0.95);\n    bricks = bricks * 1.5 * bricks2 - bricks2;\n    bricks = clamp( pow( bricks, 1.5),0.0,1.0);\n    bricks /= 60.0;\n    float waves = 1.0 - PatDots( vec2( uv.x+bricks, panY( uv.y+bricks, 0.1)), 1.68, 0.35);\n    float waves2 = ( 1.0 - PatSinWave( panX( -uv.x , 0.18), abs ( uv.y / 1.3  - 0.31 - waves / 12.0) , 3.2 ));\n    float waves3 = PatGradSawMirr( panX( uv.x - pow((waves2 - waves)/ 4.0, 0.2) , 0.25 ), 0.5);\n    float result = abs ( ( waves * waves2) / waves2 * waves3 * (waves2 + waves3)) / 4.0;\n\tfloat red = pow( result, 1.8 + 0.6 * cos (iTime)- waves );\n    float green = result * 1.8 + 0.6 * sin (iTime)* waves2 * result;\n    float blue = pow( result, 0.6 + sin (iTime)* result* -waves2 );\n    fragColor = vec4( red, green, blue, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}