{
    "Shader": {
        "info": {
            "date": "1598452487",
            "description": "Landmass z-morph - Result of improvised live code session on Twitch\nLIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time:\nhttps://www.twitch.tv/evvvvil_",
            "flags": 0,
            "hasliked": 0,
            "id": "tt2BzW",
            "likes": 30,
            "name": "[TWITCH] Landmass z-morph",
            "published": 3,
            "tags": [
                "mix",
                "terrain",
                "demoscene",
                "glow",
                "transition",
                "organic",
                "world",
                "dark",
                "morphing",
                "mountain",
                "lazer",
                "cathedral",
                "monument"
            ],
            "usePreview": 1,
            "username": "evvvvil",
            "viewed": 2003
        },
        "renderpass": [
            {
                "code": "// Landmass z-morph - Result of an improvised live coding session on Twitch\n// Thankx to zblll, 5jeesus, stobeee and others for the ideas\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time: \n// https://www.twitch.tv/evvvvil_\n\nvec2 z,v,e=vec2(.0035,-.0035);float t,tt,mixer,g;vec3 np,modP,op,po,no,al,ld;\nfloat bo(vec3 p,vec3 r) {p=abs(p)-r;return max(max(p.x,p.y),p.z);}\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\nfloat smin( float d1, float d2, float k ){  float h = max(k-abs(d1-d2),0.0);return min(d1,d2)-h*h*0.25/k; }\nfloat smax( float d1, float d2, float k ){  float h = max(k-abs(-d1-d2),0.0);return max(-d1,d2)+h*h*0.25/k; }\nvec4 texNoise(vec2 uv){ float f = 0.; f+=texture(iChannel0, uv*.125).r*.5; f+=texture(iChannel0,uv*.25).r*.25;\n                       f+=texture(iChannel0,uv*.5).r*.125; f+=texture(iChannel0,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\nvec2 fbAngular( vec3 p )\n{\n    float mMix=mix(2.,1.,clamp(mixer,.5,1.)*2.-1.);//MATERIAL ID MIXER\n    vec2 h,t=vec2(bo(p,vec3(21,.5,.5)),mMix); \n    h=vec2(bo(p,vec3(20.8,.3,.7)),2.+mMix); \n    h.x=min(h.x,bo(p,vec3(20.6,.9,.1)));\n    t=t.x<h.x?t:h;\n    h=vec2(bo(p,vec3(20.8,.7,.3)),1); \n    p.x=mod(p.x,3.)-1.5;\n    h.x=min(h.x,length(p.xy)-.15+abs(p.z)*.1);\n    t=t.x<h.x?t:h;\n    return t;\n}\nvec2 mp( vec3 p )\n{   \n    op=modP=p; //SCENE 1 ANGULAR SCENE\n    mixer=clamp(sin(tt*.65+p.z*.1),-.5,.5)+.5; //OVERALL SCENE MIXER \n    modP.z=mod(modP.z+tt*2.,40.)-20.; \n    np=modP; \n    for(int i=0;i<5;i++){\n        np.xz=abs(np.xz)-vec2(3.5,2);\n        np.xz*=r2(.785);\n        np.yz*=r2(-sin(-p.y*.1 )*.1);\n    }  \n    vec2 h,scene1=fbAngular(np);  \n    np.xz+=1.2;\n    np.xy*=r2(.785*2.);  \n    h=fbAngular(np*1.5); h.x/=1.5;\n    scene1=scene1.x<h.x?scene1:h;  \n    np.xz*=r2(-.785*2.);\n    np.x+=4.;\n    h=fbAngular(abs(np*.5)-vec3(0,0,5)); h.x/=.5;\n    scene1=scene1.x<h.x?scene1:h;\n    scene1.x*=0.8;  //SCENE 2 ORGANIC SCENE    \n    float tnoi=texNoise((p.xz+vec2(0,tt*2.))*.02).r*1.5; \n    float tDisp=sin((p.z+tt*2.)*.5+p.x*.2);\n    p.y+=tDisp;\n    vec2 scene2 =vec2(p.y+5.+tnoi*5.,1.); //TERRAIN  \n    scene2.x=smin(scene2.x,length(abs(modP.xz+tnoi*2.)-vec2(3.5,2))-2.+tnoi*2.+sin(p.y*.3)+sin(p.y*2.*p.x)*0.03,5.); //VERTICAL CYLINDERS\n    vec3 cylP=modP+vec3(0,5,0); cylP.x=abs(cylP.x)-8.+tDisp;\n    scene2.x=smin(scene2.x,length(cylP.xy+tnoi*2.)-2.+tnoi*2.+sin(p.y*.3)+sin(p.y*2.*p.x)*0.017,5.);//HORIZONTAL CYLINDERS\n    scene2.x=smax(length(modP+vec3(0,6,0)+tnoi*3.)-4.,scene2.x,5.);  //HOLE IN MIDDLE OF TERRAIN\n    //scene2.x=smax(length(modP+vec3(0,12,0))-3.4+tnoi,scene2.x,2.); //Dig hole where blue sphere with tentacle is, removed to optimize shader as design impact is minimal\n    scene2.x*=0.5;\n    h=vec2(length(np.yz+vec2(-.3,0.)),6);\n    h.x=min(h.x,max(length(cos(p*.5+sin(op.z*.2)+vec3(0,tt,tt))),abs(p.x)-3.));\n    modP.xz*=r2(sin(p.y*.2+tt));  \n    h.x=min(h.x,length(abs(modP.xz)-.5)-max(0.,.5-abs(p.y+10.)*.1));  \n    h.x=smin(h.x,length(modP+vec3(0,12,0))-3.+tnoi,1.5);\n    scene2.x=min(scene2.x,h.x);  \n    g+=0.1/(0.1+h.x*h.x*(40.-39.*sin(op.z*.7)));  \n    vec2 t=mix(scene1,scene2,vec2(mixer,0.));  \n    return t;\n}\nvec2 tr( vec3 ro, vec3 rd )\n{\n    vec2 h,t=vec2(.1);\n    for(int i=0;i<128;i++){\n        h=mp(ro+rd*t.x);\n        if(h.x<.0001||t.x>60.) break;\n        t.x+=h.x;t.y=h.y;\n    }\n    if(t.x>60.) t.y=0.;  \n    return t;\n}\n#define a(d) clamp(mp(po+no*d).x/d,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d).x/d)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n    tt=23.6+mod(iTime,62.82);\n    vec3 ro=mix(vec3(12.,5.,-9.),vec3(0.,-2.,-10.),ceil(sin(tt*.4))),\n         cw=normalize(vec3(0,-2.,0)-ro),cu=normalize(cross(cw,vec3(0,1,0))),cv=normalize(cross(cu,cw)),\n         rd=mat3(cu,cv,cw)*normalize(vec3(uv,.5)),co,fo;\n    z=tr(ro,rd);t=z.x;  \n    float timeMixer=clamp(sin(tt*.65),-.5,.5)+.5;\n    ld=normalize(vec3(.3,.2,.5));\n    vec3 sun=vec3(pow(clamp(dot(ld,rd),0.,1.),32.))*mix(vec3(.7,.4,0.),vec3(0.2),timeMixer);  \n    co=fo=sun+(mix(vec3(.6,.3,.3),vec3(.1,.15,.2),timeMixer)-length(uv)*.1-rd.y*.2);\n    if(z.y>0.){ \n        po=ro+rd*t; \n        no=normalize(e.xyy*mp(po+e.xyy).x+e.yyx*mp(po+e.yyx).x+e.yxy*mp(po+e.yxy).x+e.xxx*mp(po+e.xxx).x);\n        al=vec3(1);\n        if(z.y>=1.) al=mix(vec3(.1,.2,.4),vec3(1),2.-z.y);\n        if(z.y>=3.) al=mix(vec3(0),vec3(1),4.-z.y);   \n        float dif=max(0.0,dot(no,ld)),    \n              fr=pow(1.+dot(no,rd),4.),    \n              spo=exp2(1.+25.*texNoise(.05*vec2(np.y,dot(np.xz,vec2(.7)))).r),\n              sp=pow(max(dot(reflect(-ld,no),-rd),0.),spo);\n        co=mix(sp*.5+al*(a(.05)*a(.1)+.2)*(dif+s(2.)),fo,min(fr,.5));\n        co=mix(fo,co,exp(-.00005*t*t*t));\n    }\n    fragColor = vec4(pow(co+g*.2*mix(vec3(.7,.2,.1),vec3(.1,.2,.7),timeMixer),vec3(.45)),1);\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}