{
    "Shader": {
        "info": {
            "date": "1592223150",
            "description": "A small thingy did this noon, don't judge the code, it's mainly been done on my smartphone and I did not take time to clean it.",
            "flags": 64,
            "hasliked": 0,
            "id": "3tsyWM",
            "likes": 2,
            "name": "Crappy code",
            "published": 3,
            "tags": [
                "2d",
                "design",
                "vaporwave",
                "chill",
                "clean"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nmat2 r2d(float a){float cosa = cos(a);float sina = sin(a);return mat2(cosa,-sina,sina,cosa);}\n\n\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\n\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\n\nfloat _union(float a, float b)\n{\n  return min(a,b);\n}\nvec3 cols[4];\nvoid setup()\n{\n  cols[0] = .8*vec3(106, 48, 128)/255.;\n  cols[1] = vec3(125, 44, 82)/255.;\n  cols[2] = .8*vec3(232, 26, 77)/255.;\n  cols[3] = .9*vec3(227, 187, 54)/255.;\n}\nvec3 rdr(vec2 uv, float sh, float tm)\n{\n  int cnt = 8;\n  float fcnt = float(cnt);\n  int i = 0;\n  vec3 col = vec3(1.);\n\nfloat sharp = 200.;//(uv.y<0. ? 20.*(abs(uv.x)+.1) : 200.)*sh;\n   while(i <cnt)\n   {\n     float fi = 0.;//float(i);\n     float rx = .0;//(fi-(fcnt/2.))/(fcnt/2.);\n     vec2 p = r2d(5.*smoothstep(0.,1.,(.5+.5*sin(.1*float(i)+tm*.1))))*(vec2(sin(iTime)*.1, .1*cos(iTime*.5))+vec2(1.*(abs(.8+.4*sin(iTime*.5))))*uv-vec2(rx,0.));\nfloat shading = 2.*dot(p,vec2(p.x,p.y));\n     col = mix(col, shading*vec3(1.), (1.-sat((lenny(p)-.55-.1*abs(sin(fi*15.+iTime*.1)))*sharp)));\n     ++i;\n   }\n   col *= pow(1.-sat(lenny(uv*.5)),.5);\n\n   setup();\n   float axis = uv.y;\n   if (abs(axis) < .4)\n   {\n     col *= vec3(1.)+cols[int(mod(abs((1.9+uv.y+uv.x+mod(iTime*sh,1.)*.6)*20.),4.))].zyx;\n   }\n  return col;\n}\n\n\n\nvec3 tone(vec3 c,vec2 uv)\n{\n  c *= mix(vec3(1.),vec3(.78,.87,.98), sat(length(uv)-.9));\nc = pow(c, vec3(1./.6));\n  return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*iResolution.xy/iResolution.xx;\n  uv*=5.;\n  vec3 col = rdr(uv,.4,iTime);\n  col = mix(rdr(uv*.5,-.2,iTime*2.),col, 1.-sat((length(uv)-1.2)*200.));\n    vec3 col2 = col;\n    col2.xy = col2.xy * r2d(length(uv));\n    col = mix(col, col2, (1.-length(uv))*.5+sin(2.7));\n    col = pow(col, vec3(1./.8));\n  fragColor = vec4(tone(col,uv), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23162,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/emil-rottmayer/detached?in=emil-rottmayer/sets/detached-ep-vinyl-edition"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}