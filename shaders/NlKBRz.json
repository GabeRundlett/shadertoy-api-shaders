{
    "Shader": {
        "info": {
            "date": "1663929533",
            "description": "Trying repeat objects with random position in raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "NlKBRz",
            "likes": 5,
            "name": "Random position Cubes",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "hatoo",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "vec2 rot2(vec2 p, float t) {\n    return vec2(cos(t) * p.x - sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\nvec3 rotX(vec3 p, float t) {\n    return vec3(p.x, rot2(p.yz, t));\n}\nvec3 rotY(vec3 p, float t) {\n    return vec3(p.y, rot2(p.zx, t)).zxy;\n}\nvec3 rotZ(vec3 p, float t) {\n    return vec3(rot2(p.xy, t), p.z);\n}\nvec3 euler(vec3 p, vec3 t) {\n    return rotZ(rotY(rotX(p, t.x), t.y), t.z);\n}\n//end rot\n//start hash\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nuvec3 u = uvec3(1, 2, 3);\nconst uint UINT_MAX = 0xffffffffu;\nuint uhash11(uint n) {\n    n ^= (n << u.x);\n    n ^= (n >> u.x);\n    n *= k.x;\n    n ^= (n << u.x);\n    return n * k.x;\n}\nuvec2 uhash22(uvec2 n) {\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\nuvec3 uhash33(uvec3 n) {\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\nfloat hash11(float p) {\n    uint n = floatBitsToUint(p);\n    return float(uhash11(n)) / float(UINT_MAX);\n}\nfloat hash21(vec2 p) {\n    uvec2 n = floatBitsToUint(p);\n    return float(uhash22(n).x) / float(UINT_MAX);\n}\nfloat hash31(vec3 p) {\n    uvec3 n = floatBitsToUint(p);\n    return float(uhash33(n).x) / float(UINT_MAX);\n}\nvec2 hash22(vec2 p) {\n    uvec2 n = floatBitsToUint(p);\n    return vec2(uhash22(n)) / vec2(UINT_MAX);\n}\nvec3 hash33(vec3 p) {\n    uvec3 n = floatBitsToUint(p);\n    return vec3(uhash33(n)) / vec3(UINT_MAX);\n}\n//end hash\n//start pnoise\nfloat gtable2(vec2 lattice, vec2 p) {\n    uvec2 n = floatBitsToUint(lattice);\n    uint ind = uhash22(n).x >> 29;\n    float u = 0.92387953 * (ind < 4u ? p.x : p.y);  //0.92387953 = cos(pi/8)\n    float v = 0.38268343 * (ind < 4u ? p.y : p.x);  //0.38268343 = sin(pi/8)\n    return ((ind & 1u) == 0u ? u : -u) + ((ind & 2u) == 0u ? v : -v);\n}\nfloat pnoise21(vec2 p) {\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    float[4] v;\n    for(int j = 0; j < 2; j++) {\n        for(int i = 0; i < 2; i++) {\n            v[i + 2 * j] = gtable2(n + vec2(i, j), f - vec2(i, j));\n        }\n    }\n    f = f * f * f * (10.0 - 15.0 * f + 6.0 * f * f);\n    return 0.5 * mix(mix(v[0], v[1], f[0]), mix(v[2], v[3], f[0]), f[1]) + 0.5;\n}\nfloat gtable3(vec3 lattice, vec3 p) {\n    uvec3 n = floatBitsToUint(lattice);\n    uint ind = uhash33(n).x >> 28;\n    float u = ind < 8u ? p.x : p.y;\n    float v = ind < 4u ? p.y : ind == 12u || ind == 14u ? p.x : p.z;\n    return ((ind & 1u) == 0u ? u : -u) + ((ind & 2u) == 0u ? v : -v);\n}\nfloat pnoise31(vec3 p) {\n    vec3 n = floor(p);\n    vec3 f = fract(p);\n    float[8] v;\n    for(int k = 0; k < 2; k++) {\n        for(int j = 0; j < 2; j++) {\n            for(int i = 0; i < 2; i++) {\n                v[i + 2 * j + 4 * k] = gtable3(n + vec3(i, j, k), f - vec3(i, j, k)) * 0.70710678;\n            }\n\n        }\n    }\n    f = f * f * f * (10.0 - 15.0 * f + 6.0 * f * f);\n    float[2] w;\n    for(int i = 0; i < 2; i++) {\n        w[i] = mix(mix(v[4 * i], v[4 * i + 1], f[0]), mix(v[4 * i + 2], v[4 * i + 3], f[0]), f[1]);\n    }\n    return 0.5 * mix(w[0], w[1], f[2]) + 0.5;\n}\n//end pnoise\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nvec3 opRepRnd(in vec3 p, in vec3 c) {\n    vec3 q = mod(p + 0.5 * c, c) - 0.5 * c;\n    vec3 g = floor((p + 0.5 * c) / c);\n\n    return q - 0.5 * c * (2.0 * hash33(g) - 1.0);\n}\n\nfloat map(vec3 pos, vec3 cPos) {\n    vec3 c = vec3(4.0);\n    float d = max(sdBox(opRepRnd(pos, c), vec3(0.5)) - 0.01, -sdSphere(pos - cPos, 50.0));\n    return d;\n}\n\nvec3 gradMap(vec3 p, vec3 cPos) {\n    float eps = 0.001;\n    return normalize(vec3(map(p + vec3(eps, 0.0, 0.0), cPos) - map(p - vec3(eps, 0.0, 0.0), cPos), map(p + vec3(0.0, eps, 0.0), cPos) - map(p - vec3(0.0, eps, 0.0), cPos), map(p + vec3(0.0, 0.0, eps), cPos) - map(p - vec3(0.0, 0.0, eps), cPos)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    float t = iTime * 0.3;\n    vec3 cPos = vec3(0.0, 0.0, t * 100.0);\n    vec3 cDir = vec3(0.0, 0.1, 1.0);\n    vec3 cUp = rotZ(vec3(0.0, 1.0, 0.0), t);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n\n    vec3 lDir = vec3(1.0);\n\n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n    vec3 rPos = ray + cPos;\n    ray = normalize(ray);\n    for(int i = 0; i < 64; i++) {\n        if(map(rPos, cPos) > 0.001) {\n            rPos += map(rPos, cPos) * ray;\n        } else {\n            float amb = 0.3;\n            float diff = 0.7 * max(dot(normalize(lDir), gradMap(rPos, cPos)), 0.0);\n            vec3 col = vec3(1.0);\n            fragColor.rgb = col * (diff + amb);\n            break;\n        }\n    }\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}