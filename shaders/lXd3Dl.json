{
    "Shader": {
        "info": {
            "date": "1717159003",
            "description": "This is an experiment, trying to replicate CC Pixel Motion Blur or something.\nBasic frame accumulation -> Cheap optical flow -> Vector displacement/blur\niChannel1 in A and iChannel0 in D can be changed!",
            "flags": 32,
            "hasliked": 0,
            "id": "lXd3Dl",
            "likes": 2,
            "name": "Screen Spaced Motion Blur?",
            "published": 3,
            "tags": [
                "postprocessing",
                "motionblur",
                "opticalflow",
                "chatgpt"
            ],
            "usePreview": 0,
            "username": "adrilyphia",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define D .8\n#define BLOCK_SIZE 1.\n#define SEARCH_RADIUS 3.\n#define BLUR 20.\n#define SAMPLES 5\n#define INTENSITY 7.\n#define SPREAD 1.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define bb(uv) texture(iChannel0,uv)\n#define v(uv) texture(iChannel1,uv)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = mix(v(uv), bb(uv), D/2.);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define bb(uv) texture(iChannel0,uv)\n#define v(uv) texture(iChannel1,uv)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = mix(v(uv), bb(uv), D);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texelSize = 1. / iResolution.xy;\n    \n    vec2 blockCoord = floor(fragCoord / BLOCK_SIZE) * BLOCK_SIZE;\n    vec2 blockUV = blockCoord / iResolution.xy;\n\n    vec2 bestMatch = vec2(0.0);\n    float bestMatchError = 1.0 / 0.0; // Large number\n\n    for (float dy = -SEARCH_RADIUS; dy <= SEARCH_RADIUS; dy++) {\n        for (float dx = -SEARCH_RADIUS; dx <= SEARCH_RADIUS; dx++) {\n            vec2 searchBlockCoord = blockCoord + vec2(dx, dy) * BLOCK_SIZE;\n            vec2 searchUV = searchBlockCoord / iResolution.xy;\n\n            if (searchUV.x < 0. || searchUV.x > 1. || searchUV.y < 0. || searchUV.y > 1.)\n                continue;\n\n            float error = 0.0;\n            for (float by = 0.0; by < BLOCK_SIZE; by++) {\n                for (float bx = 0.0; bx < BLOCK_SIZE; bx++) {\n                    vec2 offset = vec2(bx, by) * texelSize;\n                    vec4 currentColor = texture(iChannel1, blockUV + offset);\n                    vec4 previousColor = texture(iChannel0, searchUV + offset);\n                    error += distance(currentColor, previousColor);\n                }\n            }\n\n            if (error < bestMatchError) {\n                bestMatchError = error;\n                bestMatch = vec2(dx, dy);\n            }\n        }\n    }\n\n    vec2 flow = bestMatch * BLOCK_SIZE / iResolution.xy;\n    vec3 flowColor = vec3(flow * 1., 0.0);\n    fragColor = vec4(flowColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 blurOpticalFlow(vec2 uv, sampler2D flowTex) {\n    float blurRadius = BLUR;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    \n    vec2 flow = vec2(0.0);\n    float totalWeight = 0.0;\n\n    for (float x = -blurRadius; x <= blurRadius; x += 2.0) {\n        for (float y = -blurRadius; y <= blurRadius; y += 2.0) {\n            vec2 offset = vec2(x, y) * texelSize;\n            vec2 sampleFlow = texture(flowTex, uv + offset).rg;\n            flow += sampleFlow;\n            totalWeight += 1.0;\n        }\n    }\n    \n    return flow / totalWeight;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    const int numSamples = SAMPLES;\n    \n    vec2 flow = blurOpticalFlow(uv, iChannel1);\n    flow *= iResolution.xy;\n    \n    vec4 color = vec4(0.0);\n    float totalWeight = 0.0;\n    for (int i = 0; i < numSamples; i++) {\n\n        float t = float(i) / float(numSamples) * INTENSITY;\n        vec2 sampleUV = uv + flow * (t * SPREAD - 0.5) / iResolution.xy;\n        vec4 sampleColor = texture(iChannel0, sampleUV);\n        color += sampleColor;\n        totalWeight += 1.0;\n    }\n\n    color /= totalWeight;\n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}