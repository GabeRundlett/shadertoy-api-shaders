{
    "Shader": {
        "info": {
            "date": "1619370133",
            "description": "nothing fancy. same lighting model as [url]https://www.shadertoy.com/view/NslXzH[/url] but plus AA.\nleft = no AA, right = AA.",
            "flags": 32,
            "hasliked": 0,
            "id": "ssfSWX",
            "likes": 6,
            "name": "simple AA crate",
            "published": 3,
            "tags": [
                "aa"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\n#define AA 0\n\n\nfloat opUnion(in float a, in float b, out bool aWins);\nfloat opMinus(in float a, in float b);\nfloat opIntsc(in float a, in float b);\nfloat opExtrusion( in vec3 p, in float d, in float h );\nfloat opOnion( in float sdf, in float thickness );\n\nfloat sdPlaneY(in vec3 p);\nfloat sdBoxFrame(in vec3 p, in vec3 b, in float e);\nvec3 sky(in vec3 dir);\nfloat fineNoise(in vec3 p);\n\n\nfloat gMapCalls;\n\nfloat gSceneTheta = 0.0;\n\nfloat map(in vec3 p, out vec3 localCoords, out int material) {\n    float d     = 1e9;\n    localCoords = p;\n    material    = 1;\n    \n    vec3 P;\n    bool aWins;\n\n    P = p;\n    P.xz *= rot2(gSceneTheta);\n    d = opUnion(d, sdBoxFrame(P, vec3(1.0), 0.0) - 0.2, aWins);\n    if (!aWins) {\n        material = 1;\n        localCoords = P;\n    }\n    \n    d = opOnion(d, 0.01);\n    \n    d = opIntsc(d, p.y - 0.9);\n\n    P = vec3(p.x, p.y + 1.2, p.z);\n    d = opUnion(d, sdPlaneY(P), aWins);\n    if (!aWins) {\n        material = 0;\n        localCoords = P;\n    }\n    \n/*  P = p;\n   // P.xz *= rot2(gTime * 0.3);\n    vec2 q = vec2( length(P.xz), P.y );\n    d = opUnion(d, sdParabola(q, 0.1, 0.1), aWins);\n    if (!aWins) {\n        material = 1;\n        localCoords = P;\n    }*/\n\n\n    return d;\n}\n\n\n// IQ: https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    vec3 unused1;\n    int unused2;\n    const float h = 0.002;      // replace by an appropriate value\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*h, unused1, unused2);\n    }\n    return normalize(n);\n}\n\nconst float closeEps = 0.002;\n\nfloat march(in vec3 ro, in vec3 rd) {\n    const int maxSteps = 100;\n\n    vec3 localCoords;\n    int  material;\n\n    float t = 0.0;\n    for (int n = ZERO; n < maxSteps; ++n) {\n        float d = map(ro + rd * t, localCoords, material);\n        float closeEnoughEps = (n == maxSteps ? 0.2 : closeEps);\n        if (d < closeEnoughEps) {\n            return t;\n        }\n        t += d;\n        if (t > 200.0) {\n            return t;\n        }\n    }\n    return t;\n}\n\nvec3 lightDirection = normalize(vec3(-2.0, -1.0, 0.7));\n\nfloat calcDiffuseAmount(in vec3 p, in vec3 n) {\n    return clamp(dot(n, -lightDirection), 0.0, 1.0);\n}\n\nconst float AOFactorMin = 0.2;\nconst float AOFactorMax = 1.0;\nfloat calcAOFactor(in vec3 p, in vec3 n) {\n    vec3 unused1;\n    int unused2;\n    const float sampleDist = 0.4;\n    float dist = smoothstep(0.0, sampleDist, map(p + n * sampleDist, unused1, unused2));\n    return mix(AOFactorMin, AOFactorMax, (dist));\n}\n\nfloat calcShadowLight(in vec3 p) {\n    float t = march(p - lightDirection * 0.05, -lightDirection);\n    return t > 40.0 ? 1.0 : 0.0;\n}\n\nfloat maxComponent(in vec3 v) {\n    return max(v.x, max(v.y, v.z));\n}\n\nstruct pol3 {\n    float rho;\n    float tht;\n    float phi;\n};\n\npol3 sphericalFromCartesian(in vec3 cartesian) {\n    pol3 ret;\n\n    ret.tht = atan(cartesian.z, cartesian.x);\n    ret.phi = acos(dot(normalize(cartesian), vec3(0.0, 1.0, 0.0))) - PI/2.0;\n    ret.rho = length(cartesian);\n\n    return ret;\n}\n\nconst vec3 albedo1 = vec3(0.0, 0.6, 1.0);\nconst vec3 albedo2 = vec3(0.7, 0.2, 0.3);\nconst vec3 albedo3 = vec3(0.5, 0.1, 0.2);\nconst vec3 albedo4 = vec3(1.0, 1.0, 0.2);\nconst vec3 albedo5 = vec3(1.0, 0.2, 0.2);\n\n\nvoid calcMaterialCommons(in int material, in vec3 pCrt, in pol3 pPol) {\n}\n\n\nvec3 getAlbedo(in int material, in vec3 pCrt, in pol3 pPol) {\n    switch (material) {\n    //    default: return vec3(1e9, 0.0, 1e9);\n        case 0: return vec3(0.2);\n        case 1: return vec3(1.0);\n    }\n}\n\nvec3 getReflectivity(in int material, in vec3 pCrt, in pol3 pPol) {\n    switch (material) {\n        default: return vec3(1.0, 0.0, 1.0);\n        case 0: return vec3(fineNoise(pCrt * 3.0));\n        case 1: return vec3(0.5);\n    }\n}\n\nvec3 render(in vec3 ro, in vec3 rd) {\n\n    vec3 col = vec3(0.0);\n\n    int bouncesLeft = 3;\n\n    vec3 contributionLeft = vec3(1.0);\n\n    while (bouncesLeft >= 0 && maxComponent(contributionLeft) > 0.001) {\n        bouncesLeft -= 1;\n        float t = march(ro, rd);\n        vec3 p = ro + t * rd;\n        if (length(p) > 20.0) {\n            \n            col += sky(rd) * contributionLeft;\n            break;\n        }\n\n        vec3 normal = calcNormal(p);\n\n        vec3 ptCrt;\n        int material;\n        map(p, ptCrt, material);\n        pol3 ptSph = sphericalFromCartesian(ptCrt);\n\n\n        float incomingLight = 1.0;\n        incomingLight = min(incomingLight, calcDiffuseAmount(p, normal));\n        incomingLight = min(incomingLight, calcShadowLight(p));\n        float ambient = 0.05 * calcAOFactor(p, normal);\n        incomingLight += ambient;\n\n        float fres = 0.2 + 0.8 * clamp(pow(1.0 - abs(dot(rd, normal) - 0.1), 2.0), 0.0, 1.0);\n\n        calcMaterialCommons(material, ptCrt, ptSph);\n\n        vec3 reflectivity = fres * getReflectivity(material, ptCrt, ptSph);\n        vec3 diffuse = incomingLight * getAlbedo(material, ptCrt, ptSph);\n        \n        col += diffuse * (1.0 - reflectivity) * contributionLeft;\n        contributionLeft *= reflectivity;\n          \n        ro = p + normal * 0.05;\n        rd = reflect(rd, normal);\n    }\n\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    vec4 persistedInfo = texelFetch(iChannel0, ivec2(0, 0), 0);\n    setupCoords(iResolution.xy, 1.5);\n    setupTime(persistedInfo[2]);\n    vec2  uv        = worldFromScreen(XY);\n    float luv       = length(uv);\n    vec2  ms        = worldFromScreen(iMouse.xy) * 1.5;\n    float smoothEps = gWorldFromScreenFac * 2.0;\n\n    // look-from and look-to points\n    // right-handed system where x is right, y is up, z is forward.\n    float dt = 0.5;\n    float t = gTime * 0.23;\n    vec3 trgPt = vec3(0.0);\n    \n    gMapCalls = 0.0;\n    vec3 col = vec3(0.0);\n\n    gSceneTheta = ms.x * -1.5;\n    float camTheta = t;\n    float camAlttd = sin(t * 0.32) * 0.2 - ms.y * 0.8;\n    camAlttd = max(camAlttd, -0.1);\n    vec3 camPt = vec3(cos(camTheta), camAlttd, sin(camTheta)) * 5.0;\n    \n    // camera's forward, right, and up vectors. right-handed.\n    vec3 camFw = normalize(trgPt - camPt);\n    vec3 camRt = cross(camFw, vec3(0.0, 1.0, 0.0));\n    vec3 camUp = cross(camRt, camFw);\n\n    vec2 aaD = worldFromScreen(vec2(1.0));\n    bool leftSide = XY.x < iResolution.x / 2.0;\n    float accum = 0.0;\n    for (float aax = -0.5; aax <= 0.5; aax += 0.5) {\n        for (float aay = -0.5; aay <= 0.5; aay += 0.5) {\n            // ray origin and direction\n            vec3 ro    = camPt;\n            vec3 rd    = normalize(camFw + (uv.x + aax * gWorldFromScreenFac) * camRt + (uv.y + aay * gWorldFromScreenFac) * camUp);\n            const int maxSteps = 100;    \n            col += render(ro, rd);\n            accum += 1.0;\n            if (leftSide) {\n                break;\n            }\n        }\n        if (leftSide) {\n            break;\n        }\n    }\n    col /= accum;\n\n    float outCircle = smoothstep(-smoothEps, smoothEps, luv - 1.0);\n    col *= 1.0 - 0.1 * outCircle * pow(luv, 1.5);\n\n  //  col.r = gMapCalls / 200.0;\n  \n    col = pow(col, vec3(1.0 / 2.2));\n\n    col *= 1.0 + 0.5 * smoothstep(2.0, 0.0, abs(XY.x - iResolution.x/2.0));\n    \n    RGBA = vec4(col, 1.0);\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n\nvec3 sky(in vec3 rd) {\n    float tht = atan(rd.z, rd.x);\n    float phi = acos(dot(normalize(rd), vec3(0.0, 1.0, 0.0)));\n    vec3 col = rd * 0.5 + 0.5;\n    col *= smoothstep(0.002, -0.002, sin(tht       * 4.0)) * -0.3 + 1.0;\n    col *= smoothstep(0.002, -0.002, sin(phi * 2.0 * 4.0)) * -0.3 + 1.0;\n    col = mix(col, col / max(col.r, max(col.g, col.b)), 0.2);\n    col *= rd.y < 0.0 ? 0.5 : 1.0;\n    return col;\n}\n\n// dir is unit-length\nvec3 directionToColor(in vec3 dir) {\n    vec3 ret = dir * 0.5 + 0.5;\n    return ret;\n}\n\n\nfloat opUnion(in float a, in float b, out bool aWins) {\n    aWins = a < b;\n    return aWins ? a : b;\n}\n\nfloat opMinus(in float a, in float b) {\n    return max(a, -b);\n}\n\nfloat opIntsc(in float a, in float b) {\n    return max(a, b);\n}\n\n// https://iquilezles.org/articles/distfunctions/distfunctions.htm\nfloat opExtrusion( in vec3 p, in float d, in float h )\n{\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\nfloat sdPlaneY(in vec3 p)\n{\n    return p.y;\n}\n\n// IQ: https://iquilezles.org/articles/distfunctions\nfloat sdBoxFrame(in vec3 p, in vec3 b, in float e )\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n\n\n\n// noise from IQ: https://www.shadertoy.com/view/4sfGzS\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n                    \nfloat fineNoise(in vec3 p) {\n    vec3 q = 2.0 * p;\n    float f;\n    f  = 0.5000*noise( q ); q = m*q*2.01;\n    f += 0.2500*noise( q ); q = m*q*2.02;\n    f += 0.1250*noise( q ); q = m*q*2.03;\n    f += 0.0625*noise( q ); q = m*q*2.01;\n    return f;\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fork of \"boilerplate stuff\" by elenzil. https://shadertoy.com/view/7dX3R2\n// 2021-04-05 18:18:15\n\nconst float PI  = 3.14159265359;\nconst float TAO = PI * 2.0;\n\n// global time parameter\nfloat gTime;\n\nvec2  gCanvasRes;\nfloat gCanvasSmallRes;\nfloat gZoom;\nfloat gScreenFromWorldFac;\nfloat gWorldFromScreenFac;\n\n\n// to prevent loop-unrolling\n#define ZERO (min(0, int(iFrame)))\n\n\n// set up world coordinates where a unit circle fits\n// in the smallest dimension of the canvas, plus a zoom factor.\nvoid setupCoords(in vec2 canvasResolution, in float zoom) {\n\n    gCanvasRes = canvasResolution;\n\n    // the smallest dimension of the canvas\n    gCanvasSmallRes = min(canvasResolution.x, canvasResolution.y);\n    \n    // small = shrink\n    gZoom = zoom;\n    \n    // factor to get from world scale to screen scale\n    gScreenFromWorldFac = gZoom * gCanvasSmallRes / 2.0;\n    \n    // factor to get from screen scale to world scale\n    gWorldFromScreenFac = 1.0 / gScreenFromWorldFac;\n}\n\nvec2 worldFromScreen(in vec2 screenPt) {\n    return (screenPt - gCanvasRes / 2.0) * gWorldFromScreenFac;;\n    \n}\n\n// in case we want to speed or slow down things from iTime.\n// this needs to be called in each pass.\nvoid setupTime(in float time) {\n    gTime = time;\n}\n\nmat2 rot2(in float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\n// 0, 0:\n// [0] = is mouse down\n// [1] = is time frozen\n// [2] = current time\n// [3] = timescale\n\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    ivec2 IJ = ivec2(XY);\n\n    RGBA = texelFetch(iChannel0, IJ, 0);\n\n    if (iFrame == 0 || IJ.x != 0 || IJ.y != 0) {\n        RGBA = vec4(0.0, 0.0, iTime, 1.0);\n        return;\n    }\n\n    bool  mouseWasDown = RGBA[0] == 1.0;\n    bool  timeIsFrozen = RGBA[1] == 1.0;\n    float time         = RGBA[2];\n    float timeScale    = RGBA[3];\n\n    bool mouseIsDown = iMouse.z > 0.0;\n\n    timeIsFrozen = timeIsFrozen ^^ (!mouseIsDown && mouseWasDown);\n    \n    timeIsFrozen = mouseIsDown;\n\n    timeScale = clamp(timeScale + (timeIsFrozen ? -0.01 : 0.01) * 60.0 / iFrameRate, 0.0, 1.0);\n    time += iTimeDelta * timeScale;\n\n    RGBA[0] = mouseIsDown  ? 1.0 : 0.0;\n    RGBA[1] = timeIsFrozen ? 1.0 : 0.0;\n    RGBA[2] = time;\n    RGBA[3] = timeScale;\n\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}