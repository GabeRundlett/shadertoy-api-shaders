{
    "Shader": {
        "info": {
            "date": "1675425351",
            "description": "ma télé est cassée, mais comme elle est inintéressante et que netflix nous formate, je préfère regarder directement les interférences entre moi et elle, entre l'homme et la machine. \nMa petite télé je te aime <3",
            "flags": 0,
            "hasliked": 0,
            "id": "dtXSDf",
            "likes": 2,
            "name": "Générique Netflix",
            "published": 3,
            "tags": [
                "netflix"
            ],
            "usePreview": 0,
            "username": "raphaeldl",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "// 2057\n// based on \"le créateur aka le tout puissant\"\n\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    return mod(p+0.1*c,c)-0.1*c;\n}\n\n\nfloat SDF(vec3 p)\n{\n    p = opRep(p, vec3(4.));\n    return length(p)-1.1;\n}\n\n vec2 rotate(vec2 st, float a)                                 //Declarer Rotation\n{\n        st = mat2(cos(a), -sin(a), sin(a), cos(a))*(st-0.5);\n        return st+0.5;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )        //SET UP\n{\n\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;      //centrer\n    uv.x *= iResolution.x/iResolution.y;             //x=y      \n    \n    \n    vec2 uv1 = uv + vec2(-0.25,0.0);      //UV a gauche\n    vec2 uv2 = uv + vec2(0.25,0.0);       //UV a droite\n    \n    //uv.y += cos(iTime) + cos(iTime*5.0)/1.5;                  //Harmonique y\n    //uv.x += cos(iTime) + cos(iTime*5.0)/7.0;                  //Harmonique x\n    \n    uv = rotate(uv2/uv1, iTime);               //Rotation\n    \n    \n    float smth = smoothstep(0.1, 0.5+cos(iTime*4.0), 0.2);     //Smooth et Flash \n    float smth2 = smoothstep(4.8, .1, 1.2+cos(iTime));\n    float smth3 = smoothstep(0.8+cos(iTime), 0.2, 0.2);\n    \n    \n    vec3 p = vec3 (iTime,0.,-1.);\n    vec3 dir = normalize(vec3(uv,0.02));\n    \n   \n    \n    float shad = .9;\n    \n    \n    \n    for (int i=0;i<60;i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = float(i)/14.;\n            break;\n        }\n        p += d*dir;\n    }\n    \n   \n    \n    \n    vec3 col = vec3(1.2 - shad);\n    col += ((vec3(0.0, 1.0, 1.0) * (smth / smth2)*smth3 + 0.5*cos(uv.y+vec3(2,4,30)) -0.2 + 0.6*cos(iTime))*sin(iTime));     //couleur cercle \n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}