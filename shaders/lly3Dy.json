{
    "Shader": {
        "info": {
            "date": "1476447995",
            "description": "with Things on top\n\nprops to Mithaldu for the improved spectrum reading code",
            "flags": 32,
            "hasliked": 0,
            "id": "lly3Dy",
            "likes": 6,
            "name": "Spectrum Analyzer",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "halcy",
            "viewed": 484
        },
        "renderpass": [
            {
                "code": "// https://github.com/Jam3/glsl-fast-gaussian-blur\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture(image, uv) * 0.1964825501511404;\n  color += texture(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float interpol = min(1.0, pow(length(fragCoord.xy / iResolution.xy), 2.0) * 1.3);\n    vec4 centColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    fragColor = blur13(iChannel0, fragCoord.xy / iResolution.xy, iResolution.xy, vec2(0.0, 1.0));\n\tfragColor = centColor * (1.0 - interpol) + fragColor * interpol;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float specbins[16];\n\nfloat distfunc(vec3 pos) {\n\tfloat dist = min(min(pos.y, -abs(pos.z) + 2.0), -abs(pos.x) + 2.0);\n    for(int specbin = 0; specbin < 512; specbin+=32) {\n        float specx = float(specbin) / 512.0;\n        float specgram = specbins[specbin/32];\n        float boxdist = length(max(abs(pos - vec3(-1.0 + specx * 2.0, 0.0, 0.0)) - vec3(0.065, pow(specgram, 2.5) * 2.0, 0.015), 0.0)) - 0.01;\n        dist = min(dist, boxdist);\n    }\n    return(dist);\n}\n\n\nvec3 color(float inVal) {\n\tvec3 a = vec3(0.5, 0.5, 0.5);\n\tvec3 b = vec3(0.5, 0.5, 0.5);\n\tvec3 c = vec3(1.0, 1.0, 0.5);\n\tvec3 d = vec3(0.8, 0.9, 0.3);\n\treturn(a + b * cos(6.28318 * (c * inVal + d)));\n}\n\n// For ray fuzzing, from some other shader\nvec3 hash33(vec3 p){ \n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 coords = (2.0 * fragCoord.xy  - iResolution.xy) / max(iResolution.x, iResolution.y);\n    \n    // grab highest from each bin\n    for(int specbin = 0; specbin < 512; specbin+=32) {\n        float specgram = 0.0;\n    \tfor(int specbinoff = 0; specbinoff < 32; specbinoff++) {\n            float samples = texture(iChannel0, vec2(float(specbin+specbinoff) / 512.0, 0.0)).r;\n        \tspecgram = samples > specgram ? samples : specgram;\n        }\n        specbins[specbin/32] = specgram;\n    }\n    \n    // cut off some of the shared baseline amplitude, and multiply everything a little instead\n    float lowest = 99999.0;\n    for(int specbin = 0; specbin < 16; specbin++) {\n        lowest = specbins[specbin] < lowest ? specbins[specbin] : lowest;\n    }\n    lowest /= 3.0;\n    for(int specbin = 0; specbin < 16; specbin++) {\n        specbins[specbin] -= lowest;\n        specbins[specbin] *= 1.125;\n    }\n    \n    float breaktime = iTime;\n    breaktime += texture(iChannel0, vec2(0.8, 0.0)).r * 0.3;\n    vec3 eye = vec3(sin(breaktime) * -1.75, cos(iTime * 0.2) + 1.7, cos(breaktime) * -1.75);\n    vec3 lookat = vec3(0.0, 0.5, 0.0);\n    vec3 lookdir = normalize(lookat - eye);\n    vec3 left = normalize(cross(lookdir, vec3(0.0, 1.0, 0.0)));\n    vec3 up = normalize(cross(left, lookdir));\n    vec3 lookcenter = eye + lookdir;\n\tvec3 pixelpos = lookcenter + coords.x * left + coords.y * up;\n    vec3 ray = normalize(pixelpos - eye);\n    \n    ray += hash33(ray) * 0.03 * pow(length(coords), 2.5) * pow(texture(iChannel0, vec2(0.0, 0.0)).r * 2.0, 3.0);\n    \n    vec3 pos = eye;\n    float dist = 1.0;\n    float iters = 32.0;\n    for(int i = 0; i < 32; i++) {\n        dist = distfunc(pos);\n        pos += ray * dist;\n        if(dist < 0.001) {\n        \titers = float(i);\n            break;\n        }\n    }\n   \tvec2 d = vec2(0.001, 0.0);\n    vec3 normal = normalize(vec3(\n        distfunc(pos - d.xyy) - distfunc(pos + d.xyy),\n        distfunc(pos - d.yxy) - distfunc(pos + d.yxy),\n        distfunc(pos - d.yyx) - distfunc(pos + d.yyx)\n    ));\n    vec3 lightd = normalize(vec3(1.0, -2.0, 1.0));\n    float light = max(0.0, dot(normal, lightd)) + 0.21;\n    float itershade = 1.0 - iters / 32.0;\n    \n    vec3 colorVal = color(light + itershade * 0.2);\n    fragColor = vec4(colorVal.xyz, 0.0);\n    fragColor = fragColor * clamp(mod(fragCoord.y, 2.0),  .7, 1.0) * (1.2 - pow(length(coords), 4.0)); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// https://github.com/Jam3/glsl-fast-gaussian-blur\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture(image, uv) * 0.1964825501511404;\n  color += texture(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float interpol = min(1.0, pow(length(fragCoord.xy / iResolution.xy), 2.0) * 1.3);\n    vec4 centColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    fragColor = blur13(iChannel0, fragCoord.xy / iResolution.xy, iResolution.xy, vec2(1.0, 0.0));\n\tfragColor = centColor * (1.0 - interpol) + fragColor * interpol;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}