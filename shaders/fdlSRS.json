{
    "Shader": {
        "info": {
            "date": "1618779557",
            "description": "homework",
            "flags": 32,
            "hasliked": 0,
            "id": "fdlSRS",
            "likes": 1,
            "name": "318_selevenko_v0v5",
            "published": 3,
            "tags": [
                "homework"
            ],
            "usePreview": 0,
            "username": "ghost18",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "const vec3 CAMERA_POS = vec3(0, 2, -7);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0.0, 2.0, -7.0);\nconst vec3 LIGHT1_POS = vec3(-3, 3, 3.0);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec4 LIGHT1_COLOR = vec4(1, 1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(4,  3, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec4 LIGHT2_COLOR = vec4(0, 0.1, 1, 0.2);\n\nconst vec3 LIGHT3_POS = vec3(0, 3, 2);\nconst float LIGHT3_RADIUS = 0.3;\nconst vec4 LIGHT3_COLOR = vec4(1, 0, 1, 1);\n\nvec3 randDir;\n\nconst vec3 SPH2_POS = vec3(2.0, 2.0, 0.0);\n\nconst vec3 CYLINDER1_POS = vec3(0.0, 0.2, 0);\n\nfloat traceCylinder(vec3 pos, vec3 dir, inout vec3 normal) {\n    const float R = 1.0f;\n    const float H = 0.1f;\n    float floorT = (-1.0 - pos.y) / dir.y;\n    if (floorT < 0.0)\n        return INF;\n    vec3 finalPos = pos + dir * floorT;\n    if (dot(finalPos.xz, finalPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return floorT;\n    }\n    \n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -1.0) {\n        vec3 wPos = pos + t * dir;\n        normal = normalize(vec3(wPos.x, 0, wPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist){\n        return true;\n    }\n    vec3 cy1Norm;\n    float cy1T = traceCylinder(pos, dir, cy1Norm);\n    return (cy1T < dist);\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n\n    if (dot(worldPos.xz, worldPos.xz) >= 30.0) {\n        return INF;\n    }   \n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    if (sinB > 1.0) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec3 Minecraft_drawing (in vec2 input_vector) {\n    \n    vec3 d = vec3(input_vector, 1) / iResolution - 0.5;\n    vec3 fractional_part;\n    vec3 source = d;\n    vec3 floor_scene;\n    vec3 scene_cut = vec3(10.8, 0.0, -18.0);\n    scene_cut.y = 3.0 * cos(scene_cut.z * scene_cut.x);\n    vec3 filter1 = vec3(1, 7, 0.1);\n    for (float i = 0.0; i < 25.0; i += 0.001) {\n        scene_cut += d * i * 0.15;\n        fractional_part = fract(scene_cut);\n        floor_scene = floor(scene_cut) * 0.5;\n        if (cos(floor_scene.z) + sin(floor_scene.x) > (floor_scene.y + 1.0)) {\n            floor_scene.y = floor_scene.y + 1.0;\n\t    \tsource = (fractional_part.y - 0.1 * cos((scene_cut.x + scene_cut.z) * 20.0) > 0.8 ? filter1 : fractional_part.y * filter1.yxz) / i;\n            break;\n        }\n    }\n    \n    return source.rgb;\n}\n\n\nvec4 sampleFog(vec3 pos, vec3 dir, in vec2 ex)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.011;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 1.4).x\n            + texture(iChannel3, curPos * 2.8).x\n            + texture(iChannel3, curPos * 5.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(Minecraft_drawing(ex) * totalAbs, 1.0 - opacity);\n}\n\nvec3 randVals;\n\nvec3 computeLight(vec3 worldPos, vec3 color, vec3 normal, vec3 viewVec) {\n    vec3 light1Pos = LIGHT1_POS + randDir * LIGHT1_RADIUS;\n    vec3 toLight = light1Pos - worldPos;\n    bool occl = isOccluded(worldPos + normalize(toLight) * 1e-3, light1Pos);\n    float lightAtten = 20.0f / dot(toLight, toLight) * (occl ? 0.0 : 1.0);\n\n    vec3 light2Pos = LIGHT2_POS + randDir * LIGHT2_RADIUS;\n    vec3 toLight2 = light2Pos - worldPos;\n    bool occl2 = isOccluded(worldPos + normalize(toLight2) * 1e-3, light2Pos);\n    float light2Atten = 10.0f / dot(toLight2, toLight2) * (occl2 ? 0.0 : 1.0);\n    \n    vec3 light3Pos = LIGHT3_POS + randDir * LIGHT3_RADIUS;\n    vec3 toLight3 = light3Pos - worldPos;\n    bool occl3 = isOccluded(worldPos + normalize(toLight3) * 1e-3, light3Pos);\n    float light3Atten = 10.0f / dot(toLight3, toLight3) * (occl3 ? 0.0 : 1.0);\n\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight))) * lightAtten * LIGHT1_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * light2Atten * LIGHT2_COLOR\n        + max(0.0f, dot(normal, normalize(toLight3))) * light3Atten * LIGHT3_COLOR\n        + textureLod(iChannel1, viewVec, 10.0) * 0.3\n    ).rgb;\n}\n\nfloat tracePolygon(vec3 pos, vec3 dir, vec3 v0, vec3 v1, vec3 v2, out vec3 normal)\n{   \n    vec3 result;\n    \n    vec3 T = pos - v0;\n    vec3 E1 = v1  - v0;\n    vec3 E2 = v2  - v0;\n    \n    vec3 P = cross(dir, E2);\n    vec3 Q = cross(T,   E1);\n    \n    float det = dot(P, E1);\n    \n    float t = dot(Q, E2) / det;\n    float u = dot(P, T)  / det;\n    float v = dot(Q, dir) /det ;\n    \n    float A = (v1.y-v0.y)*(v2.z-v0.z) - (v2.y-v0.y)*(v1.z-v0.z);\n    float B = (v1.z-v0.z)*(v2.x-v0.x) - (v2.z-v0.z)*(v1.x-v0.x);\n    float C = (v1.x-v0.x)*(v2.y-v0.y) - (v2.x-v0.x)*(v1.y-v0.y);\n    \n    normal.x = A;\n    normal.y = B;\n    normal.z = C;\n    \n    normal = normalize(normal);\n    \n    if( u >= 0.0 && v >= 0.0 && u + v <= 1.0 && t > 0.0)\n        return t;\n    \n    return INF;\n}\n\nfloat traceOctahedron(vec3 pos, vec3 dir, float size, vec3 coords, out vec3 normal)\n{\n    float scaleOcta = 1.0/ size;\n    \n    int minIndex = 0;\n    \n    vec3 normal1;\n    vec3 normal2; \n    vec3 normal3; \n    vec3 normal4; \n    vec3 normal5; \n    vec3 normal6; \n    vec3 normal7; \n    vec3 normal8; \n    \n    vec3 v1 = vec3(coords.x - scaleOcta, coords.y, coords.z);\n    vec3 v2 = vec3(coords.x, coords.y - scaleOcta,coords.z);\n    vec3 v3 = vec3(coords.x + scaleOcta, coords.y, coords.z);\n    vec3 v4 = vec3(coords.x, coords.y + scaleOcta, coords.z);\n    vec3 v5 = vec3(coords.x, coords.y, coords.z + scaleOcta);\n    vec3 v6 = vec3(coords.x, coords.y, coords.z-scaleOcta);\n    \n    float T1 = tracePolygon(pos, dir, v1, v2, v5, normal1);\n    float T2 = tracePolygon(pos, dir, v2, v3, v5, normal2);\n    float T3 = tracePolygon(pos, dir, v3, v4, v5, normal3);\n    float T4 = tracePolygon(pos, dir, v4, v1, v5, normal4);\n    float T5 = tracePolygon(pos, dir, v1, v2, v6, normal5);\n    float T6 = tracePolygon(pos, dir, v2, v3, v6, normal6);\n    float T7 = tracePolygon(pos, dir, v3, v4, v6, normal7);\n    float T8 = tracePolygon(pos, dir, v4, v1, v6, normal8);\n\n    vec3[]  array1 = vec3[] (normal1, normal2, normal3, normal4, normal5, normal6, normal7, normal8);\n    float[] array2 = float[](T1, T2, T3, T4, T5, T6, T7, T8);\n \n    float minT = array2[0];\n    \n    for (int i = 1; i < 8; i++) {\n        if (minT > array2[i])\n        {\n            minT = array2[i];\n            minIndex = i;\n        }\n    }\n    normal = array1[minIndex];\n    return array2[minIndex];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals * 2.0 - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    int materialType = EMISSION;\n    float mult = 1.0;\n    vec3 color;\n    \n    float GLASS_R = ((AIR_N - GLASS_N) * (AIR_N - GLASS_N)) / ((AIR_N + GLASS_N) * (AIR_N + GLASS_N));\n    float GLASS_T = 1.0 - GLASS_R;\n    \n    for (int i = 0; i < 10; i++) {\n    vec3 normal = vec3(0, 0, 0);\n\n        float t = traceSphere(curPos - LIGHT1_POS, viewVec, LIGHT1_RADIUS, normal);\n        if (t != INF) {\n            color = LIGHT1_COLOR.rgb * 5.0;\n            materialType = EMISSION;\n        }\n        \n        float l2_t = traceSphere(curPos - LIGHT2_POS, viewVec, LIGHT2_RADIUS, normal);\n        if (t > l2_t) {\n            t = l2_t;\n            color = LIGHT2_COLOR.rgb;\n            materialType = EMISSION;\n        }\n        \n        float l3_t = traceSphere(curPos - LIGHT3_POS, viewVec, LIGHT3_RADIUS, normal);\n        if (t > l3_t) {\n            t = l3_t;\n            color = LIGHT3_COLOR.rgb;\n            materialType = EMISSION;\n        }\n        \n        float sphere_t = traceSphere(curPos, viewVec, 1.0, normal);\n        if (sphere_t < t) {\n            if (GLASS_R > randVals.y) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n            }\n            t = sphere_t;\n        }\n        vec3 cylNormal = normal;\n        float cylT = traceCylinder(curPos, viewVec, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            vec3 pos = curPos + t * viewVec;\n            color = texture(iChannel2, pos.xz * pos.y).rgb;\n            normal = cylNormal;\n            materialType = DIFFUSE;\n        }\n        vec3 planeNormal = normal;\n        float planeT = tracePlane(curPos, viewVec, planeNormal);\n        if (planeT > 0.0 && planeT < t) {\n            t = planeT;\n            vec3 pos = curPos + t * viewVec;\n            color = texture(iChannel0, pos.xz * 0.2).rgb;\n            normal = vec3(0, 1, 0);\n            materialType = DIFFUSE;\n            if (randVals.y < 0.3) {\n                materialType = REFLECTION;\n            }\n        }\n        \n        vec3 octahedronNormal;\n        const vec3 octahedronPosVec = vec3(2.0, 1.0, 0.0);\n        float octahedronT  = traceOctahedron(curPos, viewVec, 1.0, octahedronPosVec, octahedronNormal);\n        if (octahedronT < t)\n        {\n            t = octahedronT;\n            color = vec3(1.0, 0.0, 0.0);\n            normal = octahedronNormal;\n            if(randVals.x * 0.04 < GLASS_R)\n               materialType = REFLECTION;\n\n            else{\n                materialType = REFRACTION;\n                if(dot(viewVec, normal) > 0.0) {\n                    n2 = AIR_N;\n                } else {\n                    n2 = GLASS_N;\n\n                }\n\n            }\n\n        }\n        \n        if (t != INF) {\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb += mult * computeLight(curPos + t * viewVec, color, normal, viewVec);\n                break;\n            } else if (materialType == REFLECTION) {\n                curPos += viewVec * t;\n                fragColor.rgb = mult * computeLight(curPos + t * viewVec, color, normal, viewVec);\n                viewVec = reflect(viewVec, normal);\n                curPos += viewVec * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curPos += viewVec * t;\n                viewVec = refraction(viewVec, normal, n1, n2);\n                curPos += viewVec * 1e-5;\n                vec4 fog = sampleFog(curPos, viewVec, fragCoord);\n                mult *= 1.0 - fog.a;\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n        } else {\n            fragColor += mult * texture(iChannel1, viewVec) * 0.3;\n            break;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}