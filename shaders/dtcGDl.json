{
    "Shader": {
        "info": {
            "date": "1683310049",
            "description": "CC0: To infinity and beyond...\nWIP - Had some more plans but stalled out\nTried to replicate something but don't reemmber what\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dtcGDl",
            "likes": 31,
            "name": "To infinity and beyond...",
            "published": 3,
            "tags": [
                "infinity"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "// CC0: To infinity and beyond...\n// WIP - Had some more plans but stalled out\n// Tried to replicate something but don't reemmber what\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  12.0\n#define MAX_RAY_MARCHES 60\n#define MAX_SHADOW_MARCHES 30\n#define NORM_OFF        0.001\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define CSA(a)          vec2(cos(a),sin(a))\n\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB_(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: M책rten R책nge, found: https://github.com/mrange/glsl-snippets\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// License: CC0, author: M책rten R책nge, found: https://github.com/mrange/glsl-snippets\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat horseshoe(vec2 p, vec2 c, float r, vec2 w) {\n  p.x = abs(p.x);\n  float l = length(p);\n  p = mat2(-c.x, c.y, c.y, c.x)*p;\n  p = vec2((p.y>0.0 || p.x>0.0)?p.x:l*sign(-c.x),\n           (p.x>0.0)?p.y:l );\n  p = vec2(p.x,abs(p.y-r))-w;\n  return length(max(p,0.0)) + min(0.0,max(p.x,p.y));\n}\n\nfloat inf(vec2 p) {\n  const float sm = 0.125;\n  p.y = -pabs(p.y, sm);\n  p.x = -pabs(p.x, sm);\n  const float a = PI/4.;\n  const vec2 csa = CSA(a);\n  const float r = 1.5;\n  p.y += 2.0*r*sin(a);\n  return horseshoe(p, csa, r, vec2(100.0, 0.25));\n}\n\nfloat inf(vec3 p, float h) {\n  p = p.yzx;\n  float d = inf(p.xy);\n  vec2 w = vec2(d, abs(p.z) - h);\n  return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat dot2(vec2 p) {\n  return dot(p, p);\n}\n\nfloat dot2(vec3 p) {\n  return dot(p, p);\n}\n\nfloat df(vec3 p) {\n  float d0 = inf(p, 0.125)-0.1;\n  vec2 pp = 20.0*p.yz;\n  float h = dot2(sin(pp));\n  h *= h;\n  h *= h;\n  h *= h;\n  float d1 = p.x-0.05*abs(p.y)+0.00005*h;\n  const vec2 nn = normalize(vec2(1.5, 1.));\n  const float zz = 0.5;\n  float d = d1;\n  /*\n  float d2 = vorMap(p/zz)*zz-0.025+0.025*length(p.zy);\n  d = pmax(d, -d2, 0.05);*/\n  d = pmax(d, -(d0-0.125), 0.025);\n  d = min(d, d0);\n\n  return d;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  return t;\n}\n\n\nfloat softShadow(vec3 ps, vec3 ld, float mint, float k) {\n  float res = 0.0;\n  float t = mint*7.0;\n  for (int i=0; i<MAX_SHADOW_MARCHES; ++i) {\n    vec3 p = ps + ld*t;\n    float d = df(p);\n    if (d < 0.0) return 0.0;\n    res += 0.05*inversesqrt((d));\n    if (res > 1.0) {\n      return 0.0;\n    };\n    t += max(d, mint);\n  }\n  return clamp(1.0-res, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  const vec3 lightPos1 = vec3(5.0, 3.0, 1.0)*2.;\n  const vec3 lightPos2 = vec3(5.0, -3.0, -2.0)*2.;\n  \n  float t = rayMarch(ro, rd);\n  vec3 col = vec3(0.0);\n\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  vec3 r = reflect(rd, n);\n\n  vec3 ld1 = normalize(lightPos1 - p);\n  float ll21 = dot2(lightPos1 - p);\n  float dif1 = max(dot(ld1, n), 0.0);\n  float spe1 = pow(max(dot(ld1, r), 0.0), 10.0);\n\n  float sd = softShadow(p, ld1, 0.025, 2.0);\n\n  vec3 ld2 = normalize(lightPos2 - p);\n  float ll22 = dot2(lightPos2 - p);\n//  float sd1 = softShadow(p, ld1, 0.025, 2.0);\n  float dif2 = max(dot(ld2, n), 0.0);\n  dif2 *= dif2;\n  float spe2 = pow(max(dot(ld2, r), 0.0), 20.0);\n\n  const float i = 100.0; \n//  float h = 0.7 + 0.125*p.z*p.x-0.25*p.x+0.0125*p.y*p.z;\n  float h1 = 0.6;\n  float h2 = 0.025;\n  \n  vec3 dcol1 = hsv2rgb(vec3(h1, 0.85, i));\n  vec3 scol1 = hsv2rgb(vec3(h1, 0.33, i));\n\n  vec3 dcol2 = hsv2rgb(vec3(h2, 0.90, 0.33*i));\n  vec3 scol2 = hsv2rgb(vec3(h2, 0.66, 0.33*i));\n  if (t < MAX_RAY_LENGTH) {\n    vec3 col1 = dcol1;\n    col1 *= mix(0.1, 1.0, dif1);\n    col1 *= mix(0.2, 1.0, sd);\n    col1 += spe1*sd*scol1;\n    col1 /= ll21;\n    col += col1;\n    \n    vec3 col2 = dcol2;\n    col2 *= mix(0.1, 1.0, dif2);\n    col2 *= mix(0.2, 1.0, sd);\n    col2 += spe2*sd*scol2;\n    col2 /= ll22;\n    col += col2;\n  }\n\n  col -= 0.08*vec3(1.0, 2.0, 1.0);\n  return 1.5*col;\n}\n\nvec3 effect(vec2 p) {\n  const vec3 ro = vec3(5.0, 0.0, 0.01);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render(ro, rd);\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p);\n  col *= smoothstep(1.75, 1.0-0.5, length(pp));\n  col = aces_approx(col); \n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}