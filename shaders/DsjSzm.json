{
    "Shader": {
        "info": {
            "date": "1670452349",
            "description": "Day 17 of Codevember 2022\n\nInstagram : https://www.instagram.com/etidouu/\nTwitter : https://twitter.com/EPEtidou",
            "flags": 0,
            "hasliked": 0,
            "id": "DsjSzm",
            "likes": 3,
            "name": "Codevember #17 Vasarely",
            "published": 3,
            "tags": [
                "motion",
                "vasarely",
                "codevember",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "Etidou",
            "viewed": 132
        },
        "renderpass": [
            {
                "code": "// Inspiration: https://www.shadertoy.com/view/WlscD2\n\n#ifndef PI\n#define PI 3.1415926535897932384626433832795\n#endif\n\n#define DIVS 20.0\n\n\nfloat rand (vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec2 rotate (vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nbool approx (float a, float b, float d)\n{\n    return abs(a-b)<=d;\n}\n\nfloat circleSquare (vec2 uv, float t)\n{\n    float power = 4./(cos(t*PI/8.)+1.);\n    float lhs =\n        pow(abs(uv.x-uv.y), power) +\n        pow(abs(uv.y+uv.x), power)\n    ;\n    float rhs = 1.;\n    \n    return smoothstep(0.4, 0.5, rhs - lhs);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy-.5;\n    uv.x*= iResolution.x / iResolution.y;\n    \n    // grid\n    vec2 div = uv * DIVS;\n    vec2 sq = fract(div) - .5;\n    vec2 id = floor(div);\n    \n    // rotation\n    float rot = clamp(cos(iTime + id.x *.2 + id.y * .2), -.5, .5) + .5;\n    sq = rotate(sq, rot * PI * .25);\n    \n    // rectangles\n    vec2 asq = abs(sq);\n\tfloat rect = circleSquare(asq * 2., iTime * 2. + id.x);\n    \n    vec2 idc = id / DIVS;\n    vec3 col = vec3(0);\n    col = mix(vec3(1., 0., 1.), vec3(0.1, 0.025, 0.5), min(1.0, idc.x - idc.y + .5)) * rect;\n    col-= .5 - length((id+.5) / DIVS);\n    \n    vec2 ptc1 = vec2(cos(iTime*.5) * .4, sin(iTime*.5) * .4);\n    col.rgb+= vec3(0.5, 1., 0) * (1. - length(ptc1 - idc)) * (1. - rect);\n    \n    vec2 ptc2 = vec2(cos(iTime*.5 + PI) * .4, sin(iTime*.5 + PI) * .4);\n    col.rgb+= vec3(.8, 0., .5) * (1. - length(ptc2 - idc)) * (1. - rect);\n    vec2 ptc3 = vec2(cos(iTime*1.0 + PI*.5) * .4, sin(iTime*1.0 + PI*.5) * .4);\n    col.rgb+= vec3(1., 1., 1.) * (1. - length(ptc3 - idc)) * (1. - rect) * (cos(iTime)*.2 + .4);\n    \n    col*= rand(uv) * .25 + .9;\n    \n\t\n    float visible = step(abs(id.x), DIVS);\n    \n    col+= rand(uv) * .1;\n    \n    col+= (1. - visible) * clamp(pow(max(0., (1.-length(uv))), .2)* 1.1, .2, 1.);\n    col.b*= .92;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}