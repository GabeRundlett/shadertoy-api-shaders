{
    "Shader": {
        "info": {
            "date": "1723531563",
            "description": "projector",
            "flags": 0,
            "hasliked": 0,
            "id": "XclfR7",
            "likes": 0,
            "name": "aug122024v3",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "// Fork of \"aug122024v2\" by brendanluu. https://shadertoy.com/view/XfffRN\n// 2024-08-13 06:45:47\n\n// Simple random function\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n// Simple 2D noise function\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n// Simple FBM (Fractal Brownian Motion) function for cloud-like texture\nfloat fbm(vec2 p) {\n    float f = 0.0;\n    float w = 0.5;\n    for (int i = 0; i < 5; i++) {\n        f += w * noise(p);\n        p *= 8.0;\n        w *= 0.5;\n    }\n    return f;\n}\n// Blob shape function\nfloat blobShape(vec2 uv, float time) {\n    vec2 pos = vec2(\n        sin(time * 1.1) * 0.05,\n        cos(time * 0.9) * 0.05\n    );\n    float blob = length(uv - pos);\n    blob += sin(atan(uv.y - pos.y, uv.x - pos.x) * 99.0 + time * 2.0) * 0.5;\n    return blob;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates and apply zoom\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 3.0;\n\n    // Calculate distance from center\n    float dist = length(uv);\n\n    // Define portal parameters\n    float portalRadius = .4;\n    float portalEdgeSize = 10.4;\n\n    // Create base color (light blue for sky)\n    vec3 col = vec3(0.000,0.800,1.000);\n\n    // Add some subtle cloud-like texture\n    float clouds = fbm(uv * 2.0 + iTime * 0.05) * 0.1;\n    col += clouds * vec3(0.2);\n\n    // Create portal effect\n    if (dist < portalRadius) {\n        // Inside the portal\n        vec3 portalColor = vec3(1.000,0.482,0.141);  // Warm white\n        col = mix(col, portalColor, smoothstep(portalRadius - portalEdgeSize, portalRadius, dist));\n\n        // Add some swirling effect\n        float angle = atan(uv.y, uv.x);\n        float swirl = sin(angle * 80.0 + iTime * .5) * 0.2 + 0.2;\n        col += swirl * vec3(1.000,1.000,1.000) * (1.0 - dist / portalRadius);\n\n        // Add glow\n        col += vec3(1.0, 0.9, 0.7) * pow(1.0 - dist / portalRadius, 1.1);\n    } else {\n        // Outside the portal\n        float glow = exp(-dist * 1.0) * 0.8;\n        col += vec3(1.000,0.667,0.000) * glow;\n    }\n\n    // Add subtle lens flare\n    float flare = pow(max(1.0 - dist * 0.7, 0.0), 5.0) * 0.5;\n    col += vec3(0.000,0.000,0.000) * flare;\n\n    // Create blob mask\n    float blob = blobShape(uv, iTime);\n    float mask = smoothstep(0.1, 0.6, blob);\n\n    // Apply mask with fade to black\n    col = mix(col, vec3(0.0), mask);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}