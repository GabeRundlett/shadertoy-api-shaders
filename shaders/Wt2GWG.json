{
    "Shader": {
        "info": {
            "date": "1560936419",
            "description": "  Waltzing with molecules (mouseable).\n  Rigid-body molecular dynamics; depending on view, the ridden molecule \n  is either transparent or shown in grey.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "Wt2GWG",
            "likes": 6,
            "name": "Molecular Waltz",
            "published": 3,
            "tags": [
                "collision",
                "physics",
                "md",
                "rigidbody",
                "moleculardynamics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "// \"Molecular Waltz\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nmat3 QtToRMat (vec4 q);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\n\n#define S_BIG  1  // big/small system - must also change in buffer shader\n#if S_BIG\nconst int nMolE = 6;\n#else\nconst int nMolE = 5;\n#endif\n\nvec3 rSph[4], ltDir, qnHit, rdSign, vnBlk;\nfloat dstFar, hbLen;\nint idObj, idMol, rideMol;\nbool riding;\nconst int nMol = nMolE * nMolE * nMolE;\nconst int nsMol = 4;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 sLen, rsLen;\n  vec3 eWid;\n  float dMin, d;\n  dMin = dstFar;\n  sLen = vec4 (vec3 (hbLen - 0.4), 0.);\n  if (riding) {\n    d = - PrBoxDf (p, vec3 (sLen));\n    if (d < dMin) { dMin = d;  idObj = 1; }\n  } else {\n    rsLen = vec4 (sLen.xyz * rdSign, 0.);\n    eWid = vec3 (0.04);\n    d = min (min (\n       PrBoxDf (p - rsLen.xww, eWid + sLen.wyz),\n       PrBoxDf (p - rsLen.wyw, eWid + sLen.xwz)),\n       PrBoxDf (p - rsLen.wwz, eWid + sLen.xyw));\n    if (d < dMin) { dMin = d;  idObj = 1; }\n    p = abs (p);\n    d = min (min (\n       PrBoxDf (p - sLen.wyz, eWid + sLen.xww),\n       PrBoxDf (p - sLen.xwz, eWid + sLen.wyw)),\n       PrBoxDf (p - sLen.xyw, eWid + sLen.wwz));\n    if (d < dMin) { dMin = d;  idObj = 2; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat SphHit (vec3 ro, vec3 rd)\n{\n  mat3 mRot;\n  vec3 rm, v, vn;\n  float dMin, b, d, w, sz;\n  dMin = dstFar;\n  sz = 0.5;\n  for (int n = 0; n < nMol; n ++) {\n    if (n == rideMol && riding) continue;\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    for (int j = 0; j < nsMol; j ++) {\n      v = ro - (rm + mRot * rSph[j]);\n      b = dot (rd, v);\n      w = b * b + sz * sz - dot (v, v);\n      if (w >= 0.) {\n        d = - b - sqrt (w);\n        if (d > 0. && d < dMin) {\n          dMin = d;\n          idMol = n;\n          vn = v + d * rd;\n        }\n      }\n    }\n  }\n  qnHit = vn / sz;\n  return dMin;\n}\n\nfloat SphHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 mRot;\n  vec3 rm, v;\n  float dMin, b, d, w, sz;\n  dMin = dstFar;\n  sz = 0.5;\n  for (int n = 0; n < nMol; n ++) {\n    rm = Loadv4 (4 * n).xyz;\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    for (int j = 0; j < nsMol; j ++) {\n      v = ro - (rm + mRot * rSph[j]);\n      b = dot (rd, v);\n      w = b * b + sz * sz - dot (v, v);\n      if (w >= 0.) {\n        d = - b - sqrt (w);\n        if (d > 0. && d < dMin) dMin = d;\n      }\n    }\n  }\n  return smoothstep (0.5 * rng, rng, dMin);\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  v = ro / rd;\n  tp = (hbLen - 0.4) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return dMin;\n}\n\nfloat BlkHitSil (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  v = ro / rd;\n  tp = (hbLen - 0.4) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, w;\n  float dstSph, dstObj, sh, t;\n  rdSign = sign (rd);\n  dstObj = ObjRay (ro, rd);\n  t = -1. / (2. * sqrt (2.));\n  rSph[0] = vec3 (-0.5, 0., - t);\n  rSph[1] = vec3 (0.5, 0., - t);\n  rSph[2] = vec3 (0., -0.5, t);\n  rSph[3] = vec3 (0., 0.5, t);\n  dstSph = SphHit (ro, rd);\n  if (min (dstSph, dstObj) < dstFar) {\n    if (dstObj < dstSph) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        w = smoothstep (0., 0.04, abs (fract (5. * ro / hbLen + 0.5) - 0.5));\n        col = vec3 (mix (vec3 (0.5), vec3 (0.5, 0.6, 0.5),\n           dot (abs (vn) * w.yzx * w.zxy, vec3 (1.))));\n      } else if (idObj == 2) col = vec3 (0.45, 0.55, 0.45);\n    } else {\n      ro += rd * dstSph;\n      vn = qnHit;\n      if (idMol == rideMol) col = vec3 (0.8, 0.8, 0.9);\n      else col = HsvToRgb (vec3 (float (idMol) / float (nMol), 1., 1.));\n    }\n    sh = 0.6 + 0.4 * SphHitSh (ro + 0.01 * ltDir, ltDir, 2. * hbLen);\n    col = col * (0.2 +  0.1 * max (- dot (vn, ltDir), 0.) +\n       0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       0.2 * step (0.95, sh) * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    if (! riding && BlkHit (ro, rd) < dstFar) col = mix (col,\n       vec3 (0.7, 0.7, 0.75) * (0.2 + 0.8 * max (dot (vnBlk, ltDir), 0.)) +\n       0.1 * pow (max (0., dot (ltDir, reflect (rd, vnBlk))), 64.),\n       pow (1. - abs (dot (rd, vnBlk)), 4.));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ori, ca, sa, mMid, ut, mSize, msw;\n  float az, el, asp, vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./5.) * vec2 (asp, 1.);\n  mMid = vec2 (asp, 1.) * (1. - mSize.y);\n  ut = abs (uv - mMid) - mSize;\n  regId = -1.;\n  if (mPtr.z > 0.) {\n    regId = 0.;\n    msw = mPtr.xy;\n    if (min (msw.x, msw.y) > 0.5 - mSize.y) {\n      regId = 1.;\n      msw = (msw - 1.) / mSize.y + 1.;\n    }\n  }\n  vuId = 0.;\n  if (max (ut.x, ut.y) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    vuId = 1.;\n  }\n  if (regId == 1.) vuId = 1. - vuId;\n  riding = (vuId == 0.);\n  stDat = Loadv4 (4 * nMol);\n  hbLen = stDat.y;\n  dstFar = 100.;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && regId == vuId) {\n    az += 2. * pi * msw.x;\n    el += 2. * pi * msw.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, (riding ? 1.5 : 4.5)));\n  ltDir = normalize (vec3 (0.7, 2., -1.));\n  rideMol = (nMolE / 2) * (nMolE * (nMolE + 1) + 1);\n  if (riding) {\n    ro = Loadv4 (4 * rideMol).xyz;\n    rd = QtToRMat (Loadv4 (4 * rideMol + 2)) * rd;\n  } else {\n    ro = vuMat * vec3 (0., 0., -6. * hbLen);\n  }\n  if (riding || BlkHitSil (ro, rd) < dstFar) col = ShowScene (ro, rd);\n  else col = vec3 (0.8, 1., 0.8) * (0.3 + 0.2 * uv.y);\n  if (max (ut.x, ut.y) < 0. && min (abs (ut.x), abs (ut.y)) * canvas.y < 2.)\n     col = vec3 (0., 0., 0.4);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Molecular Waltz\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Minv3 (vec3 p);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define S_BIG  1\n#if S_BIG\nconst int nMolE = 6;\n#else\nconst int nMolE = 5;\n#endif\n\nvec3 rSph[4];\nfloat todCur, hbLen, fOvlap, nStep;\nconst int nMol = nMolE * nMolE * nMolE;\nconst int nsMol = 4;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 WallForce (vec3 r)\n{\n  vec3 dr;\n  dr = hbLen - abs (r);\n  return - step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, dr, rts, rtsN, rms, fc, am, wam, rMom;\n  float farSite, rSep, dt;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSite = 0.5 + sqrt (3./8.);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nMol; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < 2. * farSite) {\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      for (int j1 = 0; j1 < nsMol; j1 ++) {\n        rts = mRot * rSph[j1];\n        rms = rm + rts;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nsMol; j2 ++) {\n          rtsN = mRotN * rSph[j2];\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += fOvlap * (1. / rSep - 1.) * dr;\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  dr = hbLen - abs (rm);\n  if (Minv3 (dr) < farSite + 0.5) {\n    for (int j = 0; j < nsMol; j ++) {\n      rts = mRot * rSph[j];\n      fc = WallForce (rm + rts);\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom = vec3 (0.);\n  for (int j = 0; j < nsMol; j ++) {\n    rts = rSph[j];\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n  }\n  rMom /= float (nsMol);\n  wam = mRot * (wam * mRot / rMom);\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float nme, mIdf, b, t;\n  nme = float (nMolE);\n  mIdf = float (mId);\n  rm = 2.2 * (floor (vec3 (mod (mIdf, nme), mod (mIdf, nme * nme) / nme,\n      mIdf / (nme * nme))) - 0.5 * (nme - 1.));\n  t = todCur + mIdf;\n  b = 2. * Hashff (t) - 1.;\n  qm = EulToQt (vec3 (0.1 * b, 0., 0.));\n  vm = 1.5 * (2. * vec3 (Hashff (t + 11.), Hashff (t + 21.), Hashff (t + 31.)) - 1.);\n  wm = vec3 (0.2, 0.2, 3.) * b;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float tCur, mxStep, t;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nMol + 1) discard;\n  tCur = iTime;\n  todCur = iDate.w;\n  t = -1. / (2. * sqrt (2.));\n  rSph[0] = vec3 (-0.5, 0., - t);\n  rSph[1] = vec3 (0.5, 0., - t);\n  rSph[2] = vec3 (0., -0.5, t);\n  rSph[3] = vec3 (0., 0.5, t);\n  fOvlap = 1000.;\n  mId = (pxId < 4 * nMol) ? mId = pxId / 4 : -1;\n  doInit = false;\n  mxStep = 30000.;\n  if (iFrame <= 5) {\n    doInit = true;\n    hbLen = 1.5 * float (nMolE);\n  } else {\n    stDat = Loadv4 (4 * nMol);\n    nStep = stDat.x;\n    hbLen = stDat.y;\n    ++ nStep;\n    if (nStep > mxStep) doInit = true;\n  }\n  if (doInit) {\n    nStep = 0.;\n  }\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n    kp = 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n  } else stDat = vec4 (nStep, hbLen, 0., 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}