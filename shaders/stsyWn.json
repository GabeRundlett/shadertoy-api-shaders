{
    "Shader": {
        "info": {
            "date": "1647858574",
            "description": "Newton Fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "stsyWn",
            "likes": 3,
            "name": "Newton Fractal - Spi3lot",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "newton",
                "set"
            ],
            "usePreview": 0,
            "username": "Spi3lot",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n#define TAU 2.0 * PI\n\n\n// ITERATIONS basically only define how far you can zoom *OUT*\n#define ITERATIONS 50\n#define CENTER c(0.0, 0.0)\n//#define CENTER ROOT_1 - c(5.0 / 9.0 - 249225.0 / 90000000.0)\n\n#define ROOT_1 rootOfUnity(0, 3)\n#define ROOT_2 rootOfUnity(1, 3)\n#define ROOT_3 rootOfUnity(2, 3)\n\n\nvec2 c(float a, float b)\n{\n    return vec2(a, b);\n}\n\nvec2 c(float a)\n{\n    return c(a, 0.0);\n}\n\nvec2 polar(float r, float theta)\n{\n    return r * vec2(cos(theta), sin(theta));\n}\n\nvec2 polar(float theta)\n{\n    return polar(1.0, theta);\n}\n\nvec2 rootOfUnity(int n, int index) {\n    return polar(TAU * float(n) / float(index));\n}\n\n\nvec2 conjugate(vec2 z) {\n    return c(z.x, -z.y);\n}\n\nvec2 cmul(vec2 ab, vec2 cd)\n{\n    float a = ab.x * cd.x - ab.y * cd.y;\n    float b = ab.x * cd.y + ab.y * cd.x;\n    \n    return vec2(a, b);\n}\n\nvec2 cdiv(vec2 ab, vec2 cd)\n{\n    // dot(cd, cd) = cd.x * cd.y (= c² + d²) = cd * conjugate(cd)\n    return cmul(ab, conjugate(cd)) / dot(cd, cd);\n}\n\nvec2 sq(vec2 z)\n{\n    return cmul(z, z);\n}\n\n\nvec2 P(vec2 z)\n{\n    // Maybe use vieta theorem here for custom roots\n    return cmul(z, sq(z)) - c(1.0);\n}\n\nvec2 P_prime(vec2 z)\n{\n    // 3z²\n    return 3.0 * sq(z);\n}\n\nvec2 iterate(vec2 z)\n{\n    for (int i = 0; i < ITERATIONS; i++)\n        z -= cdiv(P(z), P_prime(z));\n        \n    return z;\n}\n\n\n// Distance to root\nfloat dist(vec2 z, vec2 root)\n{\n    return distance(z, root);\n}\n\nvec2 closestRoot(vec2 z) {\n    float d1 = dist(z, ROOT_1);\n    float d2 = dist(z, ROOT_2);\n    float d3 = dist(z, ROOT_3);\n    \n    float mini = min(min(d1, d2), d3);\n    \n    vec2 closest;\n    if (mini == d1) closest = ROOT_1;\n    else if (mini == d2) closest = ROOT_2; \n    else if (mini == d3) closest = ROOT_3;\n\n    return acos(closest);\n    //return acos(closest) / PI;\n\n    /*\n    int n;\n    switch (mini)\n    {\n        case d1: n = 1; break;\n        case d2: n = 2; break;\n        case d3: n = 3; break;\n    }\n    \n    return n;\n    */\n}\n\n\nvec2 transform(vec2 v)\n{\n    return 2.0 * v - iResolution.xy;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = exp2(12.0 - iTime) * transform(fragCoord) / iResolution.x;\n    \n    if (iMouse.z > 0.0)\n        uv += transform(iMouse.xy) / iResolution.x;\n    \n    vec2 z = iterate(uv);\n    vec2 col = closestRoot(z);\n\n    // Output to screen\n    fragColor = vec4(col, 1, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}