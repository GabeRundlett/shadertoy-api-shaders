{
    "Shader": {
        "info": {
            "date": "1491782062",
            "description": "hold mouse to drag view.center==whiteOval towards mouse.xy\n\n2d waveform display that scales nicely to make it harder to get lost while zooming in.\ncore is\n#define echo(x) fract(x)*floor(abs(x))",
            "flags": 32,
            "hasliked": 0,
            "id": "XsBcWh",
            "likes": 6,
            "name": "2d graph canvas2",
            "published": 3,
            "tags": [
                "2d",
                "sin",
                "graph",
                "echo"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 746
        },
        "renderpass": [
            {
                "code": "//nicely scaling waveform display via\n//#define echo(x) fract(x)*floor(abs(x))\n//smallest grid=\"echo\" distance ==1.0;\n//scales nicely with less moire\n//to quickly find main axes, vec2(0), and f(x)\n//by moving towards increasing brightness of a seesaw pattern.\n\n//goal is to have something that lets me zoom into audio waveforms\n//in a fragment shader, without getting lost.\n\n//buffa needed to store a dragable mouse position\n\nvoid mainImage( out vec4 c, in vec2 i ){\n c=texture(iChannel0,i/iResolution.xy,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//nicely scaling waveform display via\n//#define echo(x) fract(x)*floor(abs(x))\n//smallest grid=\"echo\" distance ==1.0;\n//scales nicely with less moire\n//to quickly find main axes, vec2(0), and f(x)\n//by moving towards increasing brightness of a seesaw pattern.\n\n//goal is to have something that lets me zoom into audio waveforms\n//in a fragment shader, without getting lost.\n\n\n//left mouse button sets a movement vector that moves \n//the view enter (==whire oval) towards mousePosition.\n\n//todo, keyboard input to modify zoom\n\nconst float zoom=440.;\n//because shadertoys webgl implementation does some 60hz==60 frames per second \n//resolution and because the base tome for music is=\"middle C4\"= seconds*440.*sin(x);\n//and the vertical resolution is 1 16 bit float per channel.\n//WebGl.audio encoding 2 \"stereo moments\" per vec4() in an image to be parsed by WebAudio.\n//to 44kHz,16bpp, stereo.\n\n//const vec2 MouseSesetivity=vec2(2.);\n\n//2 linear equations for stereo audio.\nvec2 mainSound( in int samp,float x){\n //return vec2(sin(x),cos(x));//basic stereo waveform\n return vec2(sin(x)+sin(x*.5)*2.+sin(x*.001)*100.,cos(x)-x*.1);//stereo waveforms\n}\n\n//#define get2(a,b) texture(iChannel0,vec2(a,b+.5)/iResolution.xy,1.)\n#define get(a)  texture(iChannel0,vec2(a,  .5)/iResolution.xy,1.)\n#define gety(a) get(a).xy\n\n/*\n//recursive mod().\nfloat modi(float x){\n //i=max(abs(i)+1.,10.);\n float r=0.;//float m=1.;\n r=mix(r,fract(x/32.),.5);\n r=mix(r,fract(x/16.),.5);\n r=mix(r,fract(x/ 8.),.5);\n r=mix(r,fract(x/ 4.),.5);\n r=mix(r,fract(x/ 2.),.5);\n r=mix(r,fract(x/ 1.),.5);//could make this a loop. aint got no time for that.\n return r;}\n*/\n//modi() is outperformed by echo(a):\n#define echo(a) min(fract(a)*floor(abs(a-.25)-.5),1.)\n\n\nvoid mainImage( out vec4 c, in vec2 i ){\n if(i.x<1.&&i.y<1.){\n  if(iMouse.xy!=vec2(0.)){\n   vec2 a=gety(.5)+(iMouse.xy/iResolution.xy-vec2(.5))*5.;\n   c=vec4(a,0.,0.); \n }return;} //bottom left pixel.xy stores an offset\n vec2 offset=gety(.5)+iResolution.xy*.5;\n //offset=vec2(-400.,.5)+iResolution.xy*.5;//debug overwrite\n //bug: offset scaling and aspect is a it too confusing. seems buggy.\n //it definitely should not coincidentally have vec2(0)not move when scaled like that.\n //but for now i am selling this unwanted effect as a feature.   \n    \n i/=iResolution.xy;\n float j=length(i-vec2(.5));//distance to screen center, disregarding ratio.\n     i-=+vec2(.5);\n i.x*=iResolution.x/iResolution.y;\n //offset.x*=iResolution.x/iResolution.y;\n i-=offset.xy/iResolution.xy-vec2(.5);//offset by mouse (disregards aspect ratio)\n i*=zoom;\n \n i*=sin(iTime*2.-.6)+.51;//zoom over time\n vec3 d=vec3(i,length(i));\n    \n d.z=1.7-echo(d.z);    \n d.x=2.7-echo(d.x);\n d.y=2.7-echo(d.y);\n    \n    \n vec2 e=vec2(0);// ((mainSound( in int samp,i.x)+vec2(i.y);\n //above line ceases to work. compiler but poorly evaded.\n \n \n e=echo(e);//min(fract(e)*floor(abs(e-.25)-.5),1.);\n //e=echo(e*.25)+echo(e*.5)+echo(e);\n //e.x=modi(e.x,1.);\n //e.y=modi(e.y,1.);\n \n //d=(d*.6-e.x*.4);//mono\n    \n d=(d*.6-e.x*.4);//mono\n d.x-=e.x;d.y-=e.y; //optional stereo modification\n    //makes e.x redish and adds e.y as blue\n    \n //z*=.2;d.xyz=vec3(max(d.x,d.y))*.5;\n //xy=mix(d.xy,-e*3.,.5);//stereo\n if(j<.01&&j>.008)d.xyz=vec3(1.);\n    \n c=vec4(d.xzy,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}