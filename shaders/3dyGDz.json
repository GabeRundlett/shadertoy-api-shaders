{
    "Shader": {
        "info": {
            "date": "1570524066",
            "description": "THis is a training",
            "flags": 8,
            "hasliked": 0,
            "id": "3dyGDz",
            "likes": 2,
            "name": "BR Level0",
            "published": 3,
            "tags": [
                "training"
            ],
            "usePreview": 0,
            "username": "cedricl",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "#define FAR 400.\n#define INVFOV .4\n#define REP 2.\n#define REP2 1.\n#define K 3.\n\nvec2 Rot(vec2 p, float th) { return vec2(p.x*cos(th)-p.y*sin(th), p.x*sin(th)+p.y*cos(th)); }\n\nfloat map(vec3 p)\n{\n    vec3 p2 = p;\n//    p2.xz = Rot(p2.xz, 0.0016*iTime);\n    p2.xy = Rot(p2.xy, 0.08*iTime) + iTime*0.1;\n    p2 = mod(p2, 4.2*REP) - 4.2*REP2;\n    float sph2 = length(p2 - vec3(0., 0., 0.)) - 1.35;\n        \n    p.y += 0.5*sin(p.x*0.13 + iTime*2.)*sin(p.z*.17 + iTime*2.13);\n    p = mod(p, REP) - REP2;\n    float sph = length(p - vec3(0., 0., 0.)) - 0.35;\n\n    return -log(exp(-K*sph)+exp(-K*sph2)) / K;\n}\n\nvec4 trace(vec3 o, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 400; i++)\n    {\n        float d = map(o);\n        if(abs(d) < 0.001)\t\n            return vec4(o, t);\n        o += rd * d;\n        t += d;\n    }\n    return vec4(o, FAR);\n}\n\nvec3 N(vec3 p)\n{\n    vec2 e = vec2(0.1, 0.);\n    int id;\n    return normalize(-vec3(map(p - e.xyy), map(p - e.yxy), map(p - e.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord/iResolution.xy) - 0.5) * 2.;\n    uv.y *= iResolution.y/iResolution.x;\n\n    float STime = iTime * 0.1;\n    \n    vec3 o = vec3(0., 4. + 0.4*sin(STime), STime*5.);\n    vec3 front = normalize(vec3(0. + 1.5 * sin(STime*0.2),0.,-1.));\n    vec3 right = vec3(front.z, 0., -front.x);\n    vec3 up = cross(front, right);\n    vec3 rd = normalize(front + uv.x*INVFOV*right + uv.y*INVFOV*up);\n    vec4 s = trace(o, rd);\n    vec3 n = N(s.xyz);\n    vec3 l = o + 18.5*right + 8.0*front;\n    vec3 l2 = o - 25.5*right;\n    \n    vec3 color = vec3(.1 * n.y);\n    if(trace(s.xyz+0.01*n, normalize(l-s.xyz)).a > length(l-s.xyz)-0.01)\n    {\n        color += vec3(2., 1.5, 1.) * max(0., -dot(normalize(s.xyz - l), n)) / pow(length(s.xyz-l)*0.07, 1.9);\n        color += vec3(.6) * pow(max(0.0, -dot(reflect(rd, n), normalize(s.xyz - l))), 122.0);\n    }\n\n    if(trace(s.xyz+0.01*n, normalize(l2-s.xyz)).a > length(l2-s.xyz)-0.01)\n    {\n\t\tcolor += 1.2*vec3(.3, .5, 1.) * max(0., -dot(normalize(s.xyz - l2), n)) / pow(length(s.xyz-l2)*0.07, 0.9);\n    \tcolor += vec3(0.2) * pow(max(0.0, -dot(reflect(rd, n), normalize(s.xyz - l2))), 2.0);\n    }\n    \n    color += vec3(.5) * clamp(1.-pow(max(dot(-n, rd), 0.), .3), 0., 1.);\n    color = mix(color, vec3(0.4, 1.2, 2.8), pow(clamp(s.a*0.01, 0., 1.), 1.2));\n\n    fragColor = vec4(color,1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI2 6.2831\nvec2 mainSound( in int samp, float time )\n{\n    vec2 Out = vec2(0.0);\n    \n    for(int i = 0; i < 12; i++)\n    {\n        float HTime = time - .137*float(i);\n        float wv1 = smoothstep(0.1, 0.21+0.1*sin(HTime), sin(PI2*(27.5 + 1.5137*float(i))*HTime));\n        float wv2 = smoothstep(0.15, 0.351+0.2*sin(HTime), sin(PI2*(55.0 + 10.5137*float(i))*HTime));\n        float wv3 = mix(wv1, wv2, 0.5+0.5*sin(0.3*HTime));\n        Out += 0.15*vec2( wv3 * cos(0.2 * HTime),  wv3 * sin(0.2 * HTime) ) / pow(float(i+1), 0.7);\n    }\n    \n    float wv5 = (fract(time * PI2 * 11.) - 0.5) + (fract(time * PI2 * 11.05) - 0.1);\n    Out += 0.06*vec2( wv5 * cos(0.17 * time),  wv5 * sin(0.13 *time));\n\n    return Out * clamp(0.3*time, 0., 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}