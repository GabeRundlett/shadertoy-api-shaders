{
    "Shader": {
        "info": {
            "date": "1624731090",
            "description": "I love the planet that appears on the github's front page so I decided to do mine :).\nWill proabably make it as a Windows terminal background at some point.",
            "flags": 0,
            "hasliked": 0,
            "id": "flS3zt",
            "likes": 17,
            "name": "Github like planet",
            "published": 3,
            "tags": [
                "planet",
                "github"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 614
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\nfloat _sph(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat _cir(vec2 p, float r)\n{\n    return length(p)-r;\n}\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000., -1.);\n    \n    \n    return vec2(_sph(p, 1.), 0.);\n}\n\nvec3 accLight;\n\nvec3 lPos = vec3(5.,-5.,5.);\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.0001)\n            return vec3(res.x, distance(p, ro), res.y);\n        vec3 h = normalize(rd+(lPos-p));\n        accLight += vec3(1.)*(1.-sat(res.x/.5))*.1*sat(sat(dot(normalize(p),h))+.3);//*sat(dot(normalize(p), rd));\n        p+= rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    \n    return normalize(rd+r*uv.x+u*uv.y);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.0001, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 rdr(vec2 uv)\n{\n    accLight = vec3(0.);\n    vec3 col = vec3(0.078,0.063,0.137);\n    \n    col = mix(col, vec3(0.239,0.216,0.565), 1.-sat((length(uv-vec2(.3))-.1)*3.));\n    col = mix(col, vec3(0.239,0.216,0.565), 1.-sat((length(uv-vec2(-.3,.3))-.1)*3.));\n    col = mix(col, vec3(0.408,0.216,0.565), 1.-sat((length(uv-vec2(.3,-.3))-.1)*3.));\n    col += sat(length(uv*.75))*sat(pow(texture(iChannel1, uv*4.).x,20.)*5.*2500./iResolution.x)*texture(iChannel1, uv*5.+vec2(iTime*.25, 0.)).x;\n   \n    float rad = 5.;\n    float t = 1.5+0.*iTime*.25;\n    vec3 ro = vec3(sin(t)*rad,-3.,cos(t)*rad);\n    vec3 ta = vec3(0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    float depth = -1.0f;\n    // Might be good to use raytracing here, may be way lighter\n    vec3 res = trace(ro, rd, 50);\n    if (res.y > 0.)\n    {\n        depth = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        //col = n*.5+.5;\n        // If you look carefully and move the camera you'll notice \n        // that I don't account for seamless transition as originally \n        // I used a custom texture that does it pretty well\n        // You know shadertoy custom texture...\n        vec2 coords = vec2(atan(p.x, p.z)+iTime*.25, acos(p.y))*vec2(1./(PI*2.),1./(PI))-vec2(0.,PI);\n        \n       // float earth = 1.-texture(iChannel0, coords)-).x;\n        vec2 deform = vec2(1., 2.);\n        vec2 rep = deform*.003;\n        vec2 id = floor((coords+rep*.5)/rep);\n\n        vec2 mapcoord = mod(coords+rep*.5,rep)-rep*.5;\n        \n        float earth2 = 1.-texture(iChannel0, id*rep*.5).x;\n        earth2 = sat(pow(earth2, 10.)*10.);\n        vec3 h = normalize(rd+(lPos-p));\n        float NdH =dot(n,h);\n        vec3 rgb = vec3(0.239,0.216,0.565)*sat(sat(NdH)+.2);\n        \n        col = rgb;\n        if (earth2 > 0.01)\n        col = mix(rgb, vec3(0.843,0.643,0.918), 1.-sat(_cir(mapcoord/deform,sat(earth2)*.0005)*4000.));\n        \n        col += 2.*vec3(0.239,0.216,0.565)*(1.-sat(-dot(rd, n)*1.5))*sat(sat(NdH*1.)+.25);\n        col += vec3(0.408,0.216,0.565)*(1.-sat(-dot(rd, n)*3.5));\n    }\n    else\n        col += mix(vec3(0.239,0.216,0.565)*.1, vec3(0.408,0.216,0.565), 1.)*accLight;\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    vec2 off = vec2(1., -1.)/(iResolution.x*3.);\n    if (true) // Not so cheap antialiasing\n    {\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}