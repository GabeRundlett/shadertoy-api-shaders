{
    "Shader": {
        "info": {
            "date": "1589278530",
            "description": "Easy sailing with a favorite drink (impossible now)",
            "flags": 0,
            "hasliked": 0,
            "id": "3dsfWl",
            "likes": 23,
            "name": "Booze Cruise",
            "published": 3,
            "tags": [
                "refraction",
                "ocean",
                "glass",
                "beer",
                "bottle"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 726
        },
        "renderpass": [
            {
                "code": "// \"Booze Cruise\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0    // optional antialiasing (longer compile time)\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nstruct {\n  vec3 pCont;\n  float rCont, hCont, hSurf, hCap, hLab;\n} cnf;\n\nvec3 sunDir, ltDir;\nfloat dstFar, tCur, rTbl, hTbl;\nint idObj;\nbool inCont, chkLbl, doBott;\nconst int idCap = 1, idBal = 2, idLbl1 = 3, idLbl2 = 4, idLbl3 = 5, idStir = 6, idStirB = 7,\n   idFom = 8, idTbl = 9, idFlr = 10, idRail = 11, idWal = 12;\n\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat TObjDf (vec3 p)\n{\n  vec3 pp, q;\n  float dMin, d, r, bf, s, rb, hb;\n  dMin = dstFar;\n  pp = p - cnf.pCont;\n  r = length (pp.xz);\n  if (doBott) {\n    bf = 0.95;\n    s = bf * cnf.rCont;\n    q = pp;\n    rb = cnf.rCont * (bf + (1. - bf) * smoothstep (0., 0.2 * cnf.rCont, q.y + cnf.hCont) -\n       0.65 * smoothstep (0., 1.5 * cnf.rCont, q.y - cnf.hCont) +\n       0.05 * smoothstep (0.,  0.1 * cnf.rCont, q.y - 2. * cnf.hCont - 0.7 * cnf.rCont));\n    d = inCont ? rb - r : r - rb;\n    d = max (d, max (q.y - 2. * cnf.hCont - cnf.rCont, - q.y - cnf.hCont));\n    hb = cnf.hCont + 0.3 * (r * r / (s * s) - 1.);\n    d = min (d, max (r - bf * cnf.rCont, abs (q.y + hb - 0.02) - 0.02));\n    dMin = d;\n  } else {\n    bf = 0.95;\n    q = pp;\n    rb = cnf.rCont * (bf + (1. - bf) * smoothstep (0., 0.2 * cnf.rCont, q.y + cnf.hCont) +\n       0.4 * smoothstep (0., 2.8 * cnf.rCont, q.y + 0.75 * cnf.hCont));\n    d = inCont ? rb - r : r - rb;\n    d = max (d, abs (q.y) - cnf.hCont);\n    q.y -= - cnf.hCont + 0.05;\n    d = min (d, PrCylDf (q.xzy, bf * cnf.rCont, 0.05));\n    dMin = d;\n  }\n  return 0.8 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 pp, q;\n  float dMin, d, r, rm, a, s, db;\n  dMin = dstFar;\n  pp = p - cnf.pCont;\n  r = length (pp.xz);\n  rm = 1.4 * cnf.rCont;\n  if (doBott) {\n    q = pp;\n    q.y -= cnf.hCap;\n    d = PrCylDf (q.xzy, 0.4 * cnf.rCont + 0.4 - min (0.4 * (q.y + 0.4) * (q.y + 0.4), 1.), 0.4);\n    DMIN (idCap);\n    if (inCont) {\n      q = pp;\n      q.x = abs (q.x) - 0.7;\n      q.y -= - cnf.hCont + 0.9;\n      d = PrSphDf (q, 0.6);\n      DMIN (idBal);\n    }\n    if (! inCont && chkLbl) {\n      q = pp;\n      q.y -= cnf.hLab;\n      db = abs (r - cnf.rCont - 0.02) - 0.01;\n      a = atan (q.z, - q.x);\n      d = max (db, length (vec2 (r * a, q.y)) - 2.);\n      DMIN (idLbl1);\n      d = max (db, max (abs (2. * (mod (a, 2. * pi) - pi)), abs (q.y)) - 2.);\n      DMIN (idLbl2);\n    }\n  } else {\n    if (! inCont && chkLbl) {\n      q = pp;\n      q.y -= cnf.hLab;\n      d = max (abs (r - rm - 0.02) - 0.01, length (vec2 (r * atan (- q.x, - q.z), q.y)) - 1.5);\n      DMIN (idLbl3);\n    }\n    q = pp;\n    q.xz = Rot2D (q.xz, 0.3 * pi);\n    q.xy = Rot2D (q.xy - vec2 (1.2, 1.6), 0.05 * pi);\n    d = PrCylDf (q.xzy, 0.2, cnf.hCont + 1.5);\n    DMIN (idStir);\n    q.y -= cnf.hCont + 1.5;\n    d = PrSphDf (q, 0.3);\n    DMIN (idStirB);\n    q = pp;\n    s = r / rm;\n    s = 0.2 * (1. - s * s);\n    q.y -= cnf.hCont - 0.1 + s;\n    d = PrCylDf (q.xzy, rm - 0.03, 0.2 + s);\n    DMIN (idFom);\n  }\n  if (! inCont) {\n    q = p;\n    q.y -= hTbl - 0.1;\n    d = PrCylDf (q.xzy, rTbl, 0.1);\n    DMIN (idTbl);\n    q = p;\n    q.y -= 0.5 * hTbl;\n    d = PrCylDf (q.xzy, 1., 0.5 * hTbl);\n    q = p;\n    q.z -= 17.;\n    d = min (d, max (q.y, q.z));\n    DMIN (idFlr);\n    q.y = abs (abs (q.y - 8.) - 4.) - 2.;\n    q.z -= -0.5;\n    d = length (q.yz) - 0.3;\n    q = p;\n    q.x = mod (q.x + 5., 10.);\n    q -= vec3 (5., 6.5, 16.5);\n    d = min (d, PrCylDf (q.xzy, 0.3, 7.5));\n    DMIN (idRail);\n    d = max (max (61. - length (p.xz), abs (p.y - 20.) -20.1), p.z - 15.);\n    DMIN (idWal);\n  }\n  return 0.8 * dMin;\n}\n\nfloat TObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = TObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 CObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.005, -0.005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.005, -0.005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat LabSym (vec2 p)\n{\n  vec2 q;\n  float d, r;\n  r = length (p);\n  d = max (min (0.06 - abs (0.1 - abs (r - 0.8)), p.y), min (0.06 - abs (p.y), 1.1 - abs (p.x)));\n  q = Rot2D (p, 2. * pi * floor (16. * ((r > 0.) ? atan (p.y, - p.x) / (2. * pi) : 0.) + 0.5) / 16.);\n  d = max (d, min (min (0.06 - abs (q.y), 0.2 - abs (q.x + 1.1)), p.y + 0.1));\n  q.x += 1.5;\n  d = max (d, min (0.1 - length (q), p.y + 0.1));\n  return d;\n}\n\nvec4 ObjCol (vec3 p)\n{\n  vec4 c, colLb1, colLb2, colLb3, colLb4;\n  vec3 q;\n  vec2 w;\n  float r, a, s;\n  colLb1 = vec4 (0., 0.7, 0.4, 0.1);\n  colLb2 = vec4 (0., 0., 0.5, 0.1);\n  colLb3 = vec4 (1., 1., 0.2, 0.3);\n  colLb4 = vec4 (0.7, 0.7, 0.7, 0.);\n  q = p - cnf.pCont;\n  r = length (q.xz);\n  if (doBott) {\n    a = atan (q.z, - q.x);\n    if (idObj == idCap) {\n      c = colLb1 + 0.1;\n      if (r < 1.4) {\n        if (q.y > cnf.hCap - 0.1) {\n          s = LabSym (1.3 * q.xz);\n          c = mix (mix (c, colLb2, smoothstep (-0.05, -0.01, s)), colLb3, smoothstep (0.01, 0.05, s));\n        } else c *= 0.5;\n      } else c *= 1. - 0.3 * sin (16. * a);\n    } else if (idObj == idLbl1) {\n      w = vec2 ((cnf.rCont + 0.1) * a, q.y - cnf.hLab);\n      c = mix (colLb1, colLb2, smoothstep (0., 0.05, length (w) - 1.9));\n      s = LabSym (0.9 * w);\n      c = mix (mix (c, colLb2,\n         smoothstep (-0.05, -0.01, s)), colLb3, smoothstep (0.01, 0.05, s));\n      if (r < cnf.rCont + 0.01) c = mix (c, colLb4, 0.8);\n    } else if (idObj == idLbl2) {\n      w = vec2 ((cnf.rCont + 0.1) * (mod (a, 2. * pi) - pi), q.y - cnf.hLab);\n      c = mix (colLb1, colLb2, smoothstep (0., 0.05, max (abs (w.x) - 2.95, abs (w.y) - 1.9)));\n      w = mod (w + vec2 (0., 0.5), vec2 (3., 2.2)) - 0.5 * vec2 (3., 2.2);\n      s = LabSym (1.5 * w);\n      c = mix (mix (c, colLb2,\n         smoothstep (-0.05, -0.01, s)), colLb3, smoothstep (0.01, 0.05, s));\n      if (r < cnf.rCont + 0.01) c = mix (c, colLb4, 0.8);\n    } else if (idObj == idBal) {\n      c = vec4 (0.9, 0.9, 1., 0.2); \n    }\n  } else {\n    if (idObj == idLbl3) {\n      w = vec2 ((1.4 * cnf.rCont + 0.1) * atan (- q.x, - q.z), q.y - cnf.hLab);\n      c = mix (colLb1, colLb2, smoothstep (0., 0.05, length (w) - 1.4));\n      s = LabSym (1.4 * w);\n      c = mix (mix (c, colLb2, smoothstep (-0.05, -0.01, s)), colLb3, smoothstep (0.01, 0.05, s));\n      if (r < 1.4 * cnf.rCont + 0.01) c = mix (c, colLb4, 0.8);\n    } else if (idObj == idFom) {\n      c = vec4 (1., 1., 1., 0.3) * (1. - 0.1 * Fbm2 (8. * q.xz));\n    } else if (idObj == idStir) {\n      q.xz = Rot2D (q.xz, 0.3 * pi);\n      q.xy = Rot2D (q.xy - vec2 (1.2, 1.6), 0.05 * pi);\n      c = mix (vec4 (0.8, 0.9, 0.8, 0.1), vec4 (0.9, 0.7, 0., 0.1), step (0., sin (4. * pi * q.y)));\n    } else if (idObj == idStirB) {\n      c = vec4 (0.9, 0.3, 0.3, 0.1);\n    }\n  }\n  if (idObj == idTbl) {\n    c = vec4 (0.85, 0.95, 0.9, 0.2);\n    if (p.y > hTbl - 0.1) c = (mix (vec4 (0.5, 0.7, 0.4, 0.1), c, \n       smoothstep (0.02, 0.03, abs (Fbm2 (vec2 (0.5, 0.2) * p.xz) - 0.4)))) *\n       (0.7 + 0.3 * smoothstep (0.2, 0.5, r - cnf.rCont));\n  } else if (idObj == idFlr) {\n    c = vec4 (0.5, 0.3, 0.1, 0.1) * (0.7 + 0.3 * SmoothBump (0.1, 3.9, 0.05, mod (p.z + 2., 4.))) *\n       (0.8 + 0.2 * smoothstep (0.1, 0.2, length (p.xz) - rTbl));\n  } else if (idObj == idRail) {\n    c = vec4 (0.8, 0.8, 0.9, 0.1);\n  } else if (idObj == idWal) {\n    c = vec4 (0.9, 0.9, 0.85, 0.1);\n  }\n  return c;\n}\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  q = 0.5 * p + vec2 (1.5, 0.) * tCur;\n  h = 0.5 * sin (dot (q, vec2 (-0.05, 1.))) + 0.3 * sin (dot (q, vec2 (0.1, 1.2)));\n  wFreq = 1.;\n  wAmp = 1.;\n  tw = 0.1 * tCur * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 3; j ++) {\n    q *= qRot;\n    t4 = q.xyxy * wFreq + tw.xxyy;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    t = 1. - sqrt (v4.xz * v4.yw);\n    t *= t;\n    t *= t;\n    h += wAmp * dot (t, t);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return h;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.01, 0.005 * d * d), 0.);\n  p *= 0.5;\n  return normalize (vec3 (0.3 * (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy),  WaveHt (p.xz + e.yx))), e.x)).xzy;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float sd, a, f, ff, fd, h;\n  a = atan (rd.z, rd.x) - 0.005 * tCur;\n  h = Fbm1 (32. * a);\n  if (rd.y < 0.02 * h * h + 0.005) {\n    col = mix (vec3 (0.3, 0.32, 0.3), vec3 (0.4, 0.43, 0.43), 0.5 +\n       0.5 * dot (normalize (rd.xz), - normalize (sunDir.xz))) *\n       (1. - 0.3 * Fbm2 (128. * vec2 (a, rd.y)));\n  } else {\n    q = 0.01 * (ro.xz + vec2 (0., 8.) * tCur + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = 0.7 * (0.7 + 0.5 * ff) * (vec3 (1.) - vec3 (0.2, 0.2, 0.1) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix ((vec3 (0.7, 0.7, 0.75)), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol, 0.1 + 0.9 * f * fd);\n    sd = pow (max (dot (rd, sunDir), 0.), 256.);\n    col += (0.1 * sd + 0.3 * pow (sd, 4.)) * vec3 (1., 1., 0.3);\n  }\n  return col;\n}\n\nvoid SetParm (int cnfId)\n{\n  hTbl = 6.;\n  rTbl = 12.;\n  if (cnfId == 0) {\n    cnf.rCont = 3.;\n    cnf.hCont = 2. * cnf.rCont;\n    cnf.pCont = vec3 (2.5 * cnf.rCont, cnf.hCont + hTbl + 0.2, 0.);\n    cnf.hSurf = 2.8 * cnf.hCont + hTbl;\n    cnf.hCap = 2. * cnf.hCont + cnf.rCont + 0.1;\n    cnf.hLab = 0.3 * cnf. hCont;\n  } else {\n    cnf.rCont = 2.5;\n    cnf.hCont = 2.5 * cnf.rCont;\n    cnf.pCont = vec3 (-2.5 * cnf.rCont, cnf.hCont + hTbl + 0.2, 0.);\n    cnf.hSurf = 2. * cnf.hCont + hTbl - 0.1;\n    cnf.hLab = 0.65 * cnf.hCont;\n  }\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, rdo, rdd, vn, vnW, colD, colR, col, row, rdw;\n  vec2 vf;\n  float dstObj, dstCont, dstContW, dstSurf, rdDotN, eta, hMenisc, dw, s, rFac;\n  bool contHit, inLiq, inLiqW;\n  SetParm (doBott ? 0 : 1);\n  eta = 1.33;\n  roo = ro;\n  rdo = rd;\n  inCont = false;\n  chkLbl = true;\n  dstCont = TObjRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  dstContW = dstCont;\n  hMenisc = 0.;\n  rdDotN = 0.;\n  inLiq = false;\n  contHit = (dstCont < min (dstObj, dstFar));\n  if (contHit) {\n    ro += dstCont * rd;\n    vn = CObjNf (ro);\n    vnW = vn;\n    rdDotN = - dot (rd, vn);\n    if (ro.y < cnf.hSurf) {\n      rd = refract (rd, vn, 1. / eta);\n      inLiq = true;\n      inLiqW = true;\n    }\n    hMenisc = max (0., ro.y - cnf.hSurf);\n    ro += 0.01 * rd;\n    inCont = true;\n    dstSurf = dstFar;\n    if (inLiq && rd.y > 0. || ! inLiq && rd.y < 0.) dstSurf = - (ro.y - cnf.hSurf) / rd.y;\n    dstCont = TObjRay (ro, rd);\n    dstObj = ObjRay (ro, rd);\n    if (dstSurf < min (min (dstCont, dstObj), dstFar)) {\n      ro += dstSurf * rd;\n      if (inLiq) {\n        vn = vec3 (0., -1., 0.);\n        rdd = refract (rd, vn, eta);\n        if (length (rdd) > 0.) {\n          rd = rdd;\n          inLiq = false;\n        } else {\n          rd = reflect (rd, vn);\n        }\n      } else {\n        vn = vec3 (0., 1., 0.);\n        rd = refract (rd, vn, 1. / eta);\n        inLiq = true;\n        inLiqW = true;\n      }\n      ro += 0.01 * rd;\n      dstCont = TObjRay (ro, rd);\n      dstObj = ObjRay (ro, rd);\n    }\n    if (dstCont < min (dstObj, dstFar)) {\n      ro += dstCont * rd;\n      vn = CObjNf (ro);\n      if (inLiq) {\n        rdd = refract (rd, vn, eta);\n        if (length (rdd) > 0.) {\n          rd = rdd;\n          inCont = false;\n          inLiq = false;\n        } else {\n          rd = reflect (rd, vn);\n        }\n      } else inCont = false;\n      hMenisc = min (hMenisc, max (ro.y - cnf.hSurf, 0.));\n      ro += 0.01 * rd;\n      dstObj = ObjRay (ro, rd);\n    }\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    col4 = ObjCol (ro);\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj == idFom) vf = vec2 (16., 1.);\n    else if (idObj == idWal) vf = vec2 (128., 0.2);\n    else if (idObj == idFlr) {\n      s = mod (ro.z + 2., 4.);\n      vn.yz = Rot2D (vn.yz, 0.2 * pi * SmoothBump (0.2, 0.3, 0.05, abs (s)) * sign (s - 2.));\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    colD = col4.rgb * (0.2 + 0.2 * max (- dot (ltDir, vn), 0.) + 0.8 * max (dot (ltDir, vn), 0.) +\n       col4.a * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 32.));\n  } else {\n    row = ro;\n    rdw = rd;\n    rFac = 1.;\n    if (rd.y < 0.) {\n      dw = - row.y / rdw.y;\n      row += dw * rdw;\n      rdw = reflect (rdw, WaveNf (row, dw));\n      rFac = 0.9;\n    }\n    colD = rFac * BgCol (row, rdw);\n  }\n  colR = vec3 (0.);\n  if (contHit) {\n    ro = roo;\n    rd = rdo;\n    ro += dstContW * rd;\n    rd = reflect (rd, vnW);\n    ro += 0.01 * rd;\n    inCont = false;\n    chkLbl = false;\n    dstObj = ObjRay (ro, rd);\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      col4 = ObjCol (ro);\n      vn = ObjNf (ro);\n      colR = col4.rgb * (0.2 + 0.2 * max (- dot (ltDir, vn), 0.) + 0.8 * max (dot (ltDir, vn), 0.) +\n         col4.a * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 32.));\n    } else {\n      row = ro;\n      rdw = rd;\n      rFac = 1.;\n      if (rd.y < 0.) {\n        dw = - row.y / rdw.y;\n        row += dw * rdw;\n        rdw = reflect (rdw, WaveNf (row, dw));\n        rFac = 0.9;\n      }\n      colR = rFac * BgCol (row, rdw);\n    }\n  }\n  if (contHit) {\n    if (inLiqW) hMenisc = 0.;\n    col = mix (vec3 (0.8, 0.7, 0.2), vec3 (1.), smoothstep (0., 0.2, hMenisc)) * colD;\n    if (eta != 1.) col = mix (colR, col, 0.2 + 0.8 * smoothstep (0., 0.9, rdDotN));\n  } else col = colD;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    //float t = mod (0.01 * tCur, 2.);\n    //az += 0.2 * pi * SmoothBump (0.3, 0.7, 0.1, mod (t, 1.)) * sign (t - 1.);\n    //el -= 0.03 * pi * sin (0.007 * pi * tCur);\n  }\n  el = clamp (el, -0.25 * pi, 0.03 * pi);\n  az = clamp (az, -0.3 * pi, 0.3 * pi);\n  if (abs (abs (az) - 0.5 * pi) < 0.19 * pi) az = (0.5 + 0.19 * sign (abs (az) - 0.5 * pi)) * pi * sign (az);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 15., -55.);\n  zmFac = 3.5;\n  dstFar = 150.;\n  ltDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n  sunDir = normalize (vec3 (1., 1., -1.));\n  doBott = (sign (abs (mod (az + 2. * pi, 2. * pi) - pi) - 0.5 * pi) == sign (uv.x));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}