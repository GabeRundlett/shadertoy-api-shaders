{
    "Shader": {
        "info": {
            "date": "1458020307",
            "description": "Here are the One Tweet versions of the clock shader that was started here: https://www.shadertoy.com/view/MsdXzH\nWe decided to separate these shaders since they are different enough from the original idea.",
            "flags": 0,
            "hasliked": 0,
            "id": "XddSRN",
            "likes": 5,
            "name": "One Tweet Clock 136 chars",
            "published": 3,
            "tags": [
                "clock",
                "small",
                "short",
                "onetweet",
                "golf"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 997
        },
        "renderpass": [
            {
                "code": "// 128 chars - Thanks to the #define trick:\n/**/\n#define N 1e-3 / (1.-cos(atan(u.x,u.y) \nvoid mainImage(out vec4 o, vec2 u) {\n\tu += u-iResolution.xy;\n    o = N - iDate.w/vec4(6875,573,9.55,1))) + N * 12.));}\n/**/\n\n// 136 chars - After many EPIC battles between Fabrice and Andre, coyote made this:\n// Infinite hands, with indicators and colors\n// Red is hours, Green is minutes & Blue is seconds.\n/**\n#define N 1e-3 / (1.-cos(atan(i.x,i.y) \nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti+=i-iResolution.xy;\n\to =  N-iDate.w/vec4(6875,573,9.55,1)))\n        +N*12.));\n}\n/**/\n\n// 163 chars - Fabrice created this colorful clock\n// On hands, indicators & colors\n/**\n#define N 1e-3 / ( 1.-cos(atan(i.x,i.y) \nvoid mainImage(out vec4 o,vec2 i) {\n\ti -= o.xy = iResolution.xy*.5;\n\to  = length(i/o.y)>.9 ? o-o :  N-iDate.w/vec4(6875,573,9.55,1))) + N*12.));\n}\n/**/\n\n// 116 chars - Jedi Master Fabrice created the smallest clock from one of Andre's ideas:\n/**\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti+=i-iResolution.xy;\n\to = 1e-4 / (1.-cos(atan(i.x,i.y)-iDate.w/vec4(6875,573,9.55,1)));\n}\n/**/\n\n// 137 chars - Andre reduced Fabrice's shader with some clever macro tricks\n// Infinite hands, no indicators, B&W\n/**\n#define N +vec4(.998<cos(atan(i.x,i.y)-iDate.w/\nvoid mainImage(out vec4 o,vec2 i)\n{   \n    i+=i-(o.xy=iResolution.xy);\n    o  = N 573.))     // minutes\n         N 9.55))     // seconds\n         N 6875.));   // hours      \n}\n/**/\n\n// 147 chars - Soon afterwards, Fabrice added indicators\n/**\n#define N(t) +vec4(cos(iDate.w/t atan(i.x,i.y))>.998)\nvoid mainImage(out vec4 o,vec2 i)\n{   \n    i+=i-iResolution.xy;\n    o  =  N(1e9 - 12.*) // 12 hour indicators\n        N(573. -)     // minutes\n         N(9.55 -)     // seconds\n         N(6875.- );   // hours      \n}\n/**/\n\n// 140 chars - Fabrice started the one tweet clock shader with this:\n// Infinite hands, no indicators, B&W\n/**\n#define N(t) +vec4(cos(iDate.w/t - atan(i.x,i.y))>.998)\nvoid mainImage(out vec4 o,vec2 i)\n{   \n    i+=i-(o.xy=iResolution.xy);\n    o  = N(573. )     // minutes\n         N(9.55 )     // seconds\n         N(6875. );   // hours      \n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}