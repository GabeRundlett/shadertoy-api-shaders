{
    "Shader": {
        "info": {
            "date": "1644179558",
            "description": "Following @demofox's second tutorial: [url=https://blog.demofox.org/2020/06/06/casual-shadertoy-path-tracing-2-image-improvement-and-glossy]https://blog.demofox.org/2020/06/06/casual-shadertoy-path-tracing-2-image-improvement-and-glossy-reflections/[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "fdBcW3",
            "likes": 22,
            "name": "My Second Pathtraced Scene",
            "published": 3,
            "tags": [
                "globalillumination",
                "pathtracer",
                "stochastic"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "// Based on https://blog.demofox.org/2020/05/25/casual-shadertoy-path-tracing-1-basic-camera-diffuse-emissive/\n// and https://blog.demofox.org/2020/06/06/casual-shadertoy-path-tracing-2-image-improvement-and-glossy\n\n// https://64.github.io/tonemapping/#uncharted-2\nvec3 Uncharted2(in vec3 color) {\n    color *= 2.0;\n\n    float A = 0.15, B = 0.50, C = 0.10;\n    float D = 0.20, E = 0.02, F = 0.30;\n    color = (((A * color + C * B) * color + D * E) / ((A * color + B) * color + D * F)) - E / F;\n\n    //float whiteMax = 4.0;\n    //color /= (((A * whiteMax + C * B) * whiteMax + D * E) / ((A * whiteMax + B) * whiteMax + D * F)) - E / F;\n    color *= 1.9335;\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor.rgb /= fragColor.a; // Average\n    fragColor.rgb = Uncharted2(fragColor.rgb); // Tonemap\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545)); // Gamma correct\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Settings\n#define MAX_BOUNCES 16\n#define EPSILON 0.001\n\n// Constants\n#define TAU 6.28318530718\n#define PI 3.14159265359\n#define RHO 1.57079632679\n\n// Structs\nstruct Ray {\n    vec3 pos;\n    vec3 dir;\n};\n\nstruct HitInfo {\n    float hitDist;\n    vec3 hitPos;\n    vec3 surfNor;\n    vec2 surfUv;\n    int objId;\n};\n\nstruct Material {\n    vec3 albedo;\n    vec3 emissive;\n    float percentSpecular;\n    float roughness;\n    vec3 specularColor;\n};\n\n// RNG utilities\nuint wangHash(inout uint seed) {\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat rand01(inout uint state) {\n    return float(wangHash(state)) / 4294967296.0;\n}\n \nvec3 randUnitVec(inout uint state) {\n    float z = rand01(state) * 2.0 - 1.0;\n    float a = rand01(state) * TAU;\n    float r = sqrt(1.0 - z * z);\n    float x = r * cos(a);\n    float y = r * sin(a);\n    return vec3(x, y, z);\n}\n\n// Camera basis matrix\nmat3 getCameraBasis(in vec2 an) {\n    vec2 c = cos(an), s = sin(an);\n    return mat3(       c.x, 0.0,        s.x,  // Right\n                s.x * -s.y, c.y,  c.x * s.y,  // Up\n                 s.x * c.y, s.y, -c.x * c.y); // Forward\n}\n\n// Update with closest intersection\nvoid addRayHit(inout HitInfo curHit, in HitInfo newHit) {\n    if (newHit.hitDist > 0.0) {\n        if (curHit.hitDist < 0.0) curHit = newHit;\n        else if (newHit.hitDist < curHit.hitDist) curHit = newHit;\n    }\n}\n\n// Transformations\nmat4 Translate(in vec3 t) {\n    return mat4(1.0, 0.0, 0.0, 0.0,\n                0.0, 1.0, 0.0, 0.0,\n                0.0, 0.0, 1.0, 0.0,\n                t.x, t.y, t.z, 1.0);\n}\n\nmat4 Scale(in vec3 s) {\n    return mat4(s.x, 0.0, 0.0, 0.0,\n                0.0, s.y, 0.0, 0.0,\n                0.0, 0.0, s.z, 0.0,\n                0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 RotateX(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat4(1.0, 0.0, 0.0, 0.0,\n                0.0,  co,  si, 0.0,\n                0.0, -si,  co, 0.0,\n                0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 RotateY(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat4( co, 0.0,  si, 0.0,\n                0.0, 1.0, 0.0, 0.0,\n                -si, 0.0,  co, 0.0,\n                0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 RotateZ(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat4( co,  si, 0.0, 0.0,\n                -si,  co, 0.0, 0.0,\n                0.0, 0.0, 1.0, 0.0,\n                0.0, 0.0, 0.0, 1.0);\n}\n\n// Primitive intersectors\n// Ray vs. Plane intersection\nHitInfo planeIsect(in Ray ray, in mat4 mat, in int objId) {\n    mat4 matInv = inverse(mat);\n    ray.pos = (matInv * vec4(ray.pos, 1.0)).xyz;\n    ray.dir = (matInv * vec4(ray.dir, 0.0)).xyz;\n\n    float hitDist = -ray.pos.y / ray.dir.y;\n    vec3 hitPos = ray.pos + ray.dir * hitDist;\n    vec3 surfNor = transpose(matInv)[1].xyz; // To worldspace\n    vec2 surfUv = hitPos.xz;\n    hitPos = (mat * vec4(hitPos, 1.0)).xyz; // To worldspace\n\n    return HitInfo(hitDist, hitPos, surfNor, surfUv, objId);\n}\n\n// Ray vs. Sphere intersection\nHitInfo sphereIsect(in Ray ray, in mat4 mat, in int objId) {\n    mat4 matInv = inverse(mat);\n    ray.pos = (matInv * vec4(ray.pos, 1.0)).xyz;\n    ray.dir = (matInv * vec4(ray.dir, 0.0)).xyz;\n\n    float a = dot(ray.dir, ray.dir);\n    float b = dot(ray.pos, ray.dir);\n    float c = dot(ray.pos, ray.pos) - 1.0;\n\n    float dis = b * b - a * c;\n    if (dis < 0.0) return HitInfo(-1.0, vec3(0.0), vec3(0.0), vec2(0.0), -1);\n\n    float hitDist = (-b - sign(c) * sqrt(dis)) / a;\n    vec3 hitPos = ray.pos + ray.dir * hitDist;\n    vec3 surfNor = (transpose(matInv) * vec4(hitPos, 0.0)).xyz; // Convert normal to worldspace\n    vec2 surfUv = vec2(atan(hitPos.z, hitPos.x), atan(hitPos.y, length(hitPos.xz)));\n    hitPos = (mat * vec4(hitPos, 1.0)).xyz; // Convert position to worldspace\n\n    return HitInfo(hitDist, hitPos, surfNor, surfUv, objId);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "HitInfo traceRay(in Ray ray) {\n    HitInfo hit = HitInfo(-1.0, vec3(0.0), vec3(0.0), vec2(0.0), -1);\n\n    // Ground plane\n    addRayHit(hit, planeIsect(ray, mat4(1.0), 1));\n\n    // Big sphere light\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(0.0, 1.0, -5.0)), 2));\n\n    // Silver metallic spheres\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(-2.0, 0.5, -5.0)) * Scale(vec3(0.5)), 3));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(2.0, 0.5, -5.0)) * Scale(vec3(0.5)), 3));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(0.0, 0.15, -4.05)) * Scale(vec3(0.15)), 3));\n\n    // Green metallic spheres\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(-2.0, 0.4, -3.0)) * Scale(vec3(0.4)), 4));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(-1.0, 0.4, -3.0)) * Scale(vec3(0.4)), 5));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(0.0, 0.4, -3.0)) * Scale(vec3(0.4)), 6));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(1.0, 0.4, -3.0)) * Scale(vec3(0.4)), 7));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(2.0, 0.4, -3.0)) * Scale(vec3(0.4)), 8));\n\n    // Small sphere lights\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(-2.0, 0.2, -2.25)) * Scale(vec3(0.2)), 2));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(-1.0, 0.2, -2.25)) * Scale(vec3(0.2)), 2));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(0.0, 0.2, -2.25)) * Scale(vec3(0.2)), 2));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(1.0, 0.2, -2.25)) * Scale(vec3(0.2)), 2));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(2.1, 0.2, -2.25)) * Scale(vec3(0.2)), 2));\n\n    // Large opaque glass spheres\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(3.0, 0.75, -4.0)) * Scale(vec3(0.75)), 9));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(-3.0, 0.75, -4.0)) * Scale(vec3(0.75)), 9));\n\n    // Sphere lights over the opaque glass spheres\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(3.0, 1.9, -4.0)) * Scale(vec3(0.2)), 2));\n    addRayHit(hit, sphereIsect(ray, Translate(vec3(-3.0, 1.9, -4.0)) * Scale(vec3(0.2)), 2));\n\n    return hit;\n}\n\nMaterial getMaterial(in vec2 surfUv, in int objId) {\n    Material mtl = Material(vec3(0.0), vec3(0.0), 0.0, 0.0, vec3(0.0));\n\n    // Ground plane\n    if (objId == 1) mtl = Material(vec3(1.0, 0.4, 0.2), vec3(0.0), 0.5, 0.7, vec3(1.0, 0.4, 0.2));\n\n    // Big sphere light\n    if (objId == 2) mtl = Material(vec3(0.0), vec3(2.0), 0.0, 0.0, vec3(0.0));\n\n    // Silver metallic spheres\n    if (objId == 3) mtl = Material(vec3(0.0), vec3(0.0), 1.0, 0.0, vec3(1.0));\n\n    // Green metallic spheres with increasing roughness\n    if (objId == 4) mtl = Material(vec3(0.0, 1.0, 0.0), vec3(0.0), 1.0, 0.0, vec3(0.0, 1.0, 0.0));\n    if (objId == 5) mtl = Material(vec3(0.0, 1.0, 0.0), vec3(0.0), 1.0, 0.25, vec3(0.0, 1.0, 0.0));\n    if (objId == 6) mtl = Material(vec3(0.0, 1.0, 0.0), vec3(0.0), 1.0, 0.5, vec3(0.0, 1.0, 0.0));\n    if (objId == 7) mtl = Material(vec3(0.0, 1.0, 0.0), vec3(0.0), 1.0, 0.75, vec3(0.0, 1.0, 0.0));\n    if (objId == 8) mtl = Material(vec3(0.0, 1.0, 0.0), vec3(0.0), 1.0, 1.0, vec3(0.0, 1.0, 0.0));\n\n    // Large opaque glass spheres\n    if (objId == 9) mtl = Material(vec3(1.0), vec3(0.0), 0.5, 0.0, vec3(1.0));\n\n    return mtl;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n\n    // Load last frame\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n\n    // Jitter UVs for antialiasing\n    fragCoord += vec2(rand01(rngState), rand01(rngState));\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Camera ray\n    mat3 cam = getCameraBasis(vec2(0.0, -0.8));\n    Ray ray = Ray(vec3(0.0, 4.0, -0.5), normalize(cam * vec3(uv, 1.0)));\n\n    // Pathtrace!\n    vec3 acc = vec3(0.0);\n    vec3 throughput = vec3(1.0);\n    for (int bounce=0; bounce < MAX_BOUNCES; bounce++) {\n        HitInfo hit = traceRay(ray);\n        if (hit.hitDist < 0.0) break;\n        Material mtl = getMaterial(hit.surfUv, hit.objId);\n\n        hit.surfNor = normalize(hit.surfNor); // Normalize the surface normal as a final step\n        hit.surfNor *= sign(dot(hit.surfNor, -ray.dir)); // Flip towards the camera\n\n        // Accumulate bounce light\n        acc += mtl.emissive * throughput;\n\n        // Step to the surface\n        ray.pos = hit.hitPos + hit.surfNor * EPSILON;\n\n        // Choose specular reflection with chance percentSpecular\n        if (rand01(rngState) < mtl.percentSpecular) {\n            vec3 diffuseRay = normalize(hit.surfNor + randUnitVec(rngState));\n            vec3 specularRay = reflect(ray.dir, hit.surfNor);\n            ray.dir = normalize(mix(specularRay, diffuseRay, mtl.roughness * mtl.roughness));\n            throughput *= mtl.specularColor;\n        }\n\n        // Reflect diffusely otherwise\n        else {\n            ray.dir = normalize(hit.surfNor + randUnitVec(rngState));\n            throughput *= mtl.albedo;\n        }\n\n        // Russian roulette optimization\n        float stopChance = max(throughput.r, max(throughput.g, throughput.b));\n        if (rand01(rngState) > stopChance) break;\n        throughput /= stopChance;\n    }\n\n    // Accumulate frame\n    fragColor.rgb += acc;\n    fragColor.a += 1.0;\n\n    // Restart on mouse down\n    if (iMouse.z > 0.0) {\n        fragColor = vec4(0.0);    \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}