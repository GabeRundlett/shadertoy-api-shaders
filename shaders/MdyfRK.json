{
    "Shader": {
        "info": {
            "date": "1529507984",
            "description": "Self-solving jigsaw with live image",
            "flags": 0,
            "hasliked": 0,
            "id": "MdyfRK",
            "likes": 19,
            "name": "Live Jigsaw",
            "published": 3,
            "tags": [
                "wave",
                "sunset",
                "bird",
                "puzzle",
                "jigsaw"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 976
        },
        "renderpass": [
            {
                "code": "// \"Live Jigsaw\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Self-solving jigsaw with live image\n\n// Tiling based on simplified (textureless) version of Shane's \"Jigsaw\"\n// Scenery updated from my old \"Seabirds at Sunset\"\n\n#define AA  0   // optional antialiasing\n\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrSphDf (vec3 p, float r);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Maxv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nmat3 birdMat[2], bdMat;\nvec3 birdPos[2], bdPos, fltBox, qHit, qnBlk, sunDir, waveDisp, cloudDisp, ltDir, blkSize;\nfloat dstFar, tCur, birdVel, birdLen, legAng;\nint idObj, idObjGrp;\nconst int idWing = 1, idBdy = 2, idEye = 3, idBk = 4, idLeg = 5;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat BdWingDf (vec3 p, float dMin)\n{\n  vec3 q, qh;\n  float wngFreq, wSegLen, wChord, wSpar, fTap, tFac, d, dd, a, wr, wf;\n  wngFreq = 6.;\n  wSegLen = 0.15 * birdLen;\n  wChord = 0.3 * birdLen;\n  wSpar = 0.03 * birdLen;\n  fTap = 8.;\n  tFac = (1. - 1. / fTap);\n  q = p - vec3 (0., 0., 0.3 * birdLen);\n  q.x = abs (q.x) - 0.1 * birdLen;\n  wf = 1.;\n  a = -0.1 + 0.2 * sin (wngFreq * tCur);\n  d = dMin;\n  qh = q;\n  for (int k = 0; k < 5; k ++) {\n    q.xy = Rot2D (q.xy, a);\n    q.x -= wSegLen;\n    wr = wf * (1. - 0.5 * q.x / (fTap * wSegLen));\n    dd = PrFlatCylDf (q.zyx, wr * wChord, wr * wSpar, wSegLen);\n    if (k < 4) {\n      q.x -= wSegLen;\n      dd = min (dd, PrCapsDf (q, wr * wSpar, wr * wChord));\n    } else {\n      q.x += wSegLen;\n      dd = max (dd, PrCylDf (q.xzy, wr * wChord, wSpar));\n      dd = min (dd, max (PrTorusDf (q.xzy, 0.98 * wr * wSpar, wr * wChord), - q.x));\n    }\n    if (dd < d) { d = dd;  qh = q; }\n    a *= 1.03;\n    wf *= tFac;\n  }\n  q = qh;\n  DMINQ (idObjGrp + idWing);\n  return dMin;\n}\n\nfloat BdBodyDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float bkLen, d, a, wr, tr, u;\n  bkLen = 0.15 * birdLen;\n  q = p;\n  wr = q.z / birdLen;\n  if (wr > 0.5) {\n    u = (wr - 0.5) / 0.5;\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) / 1.5, -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr * birdLen, birdLen);\n  DMINQ (idObjGrp + idBdy);\n  q = p;\n  q.x = abs (q.x);\n  wr = (wr + 1.) * (wr + 1.);\n  q -= birdLen * vec3 (0.3 * wr, 0.1 * wr, -1.2);\n  d = PrCylDf (q, 0.009 * birdLen, 0.2 * birdLen);\n  DMINQ (idObjGrp + idBdy);\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.08, 0.05, 0.9);\n  d = PrSphDf (q, 0.04 * birdLen);\n  DMINQ (idObjGrp + idEye);\n  q = p;  q -= birdLen * vec3 (0., -0.015, 1.15);\n  wr = clamp (0.5 - 0.3 * q.z / bkLen, 0., 1.);\n  d = PrFlatCylDf (q, 0.25 * wr * bkLen, 0.25 * wr * bkLen, bkLen);\n  DMINQ (idObjGrp + idBk);\n  return dMin;\n}\n\nfloat BdFootDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float lgLen, ftLen, d;\n  lgLen = 0.1 * birdLen;\n  ftLen = 0.5 * lgLen;\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.1, -0.12, 0.6);\n  q.yz = Rot2D (q.yz, legAng);\n  q.xz = Rot2D (q.xz, -0.05 * pi);\n  q.z += lgLen;\n  d = PrCylDf (q, 0.15 * lgLen, lgLen);\n  DMINQ (idObjGrp + idLeg);\n  q.z += lgLen;\n  q.xy = Rot2D (q.xy, 0.5 * pi);\n  q.xy = Rot2D (q.xy, floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) * (2. * pi / 3.));\n  q.xz = Rot2D (q.xz, - pi + 0.4 * legAng);\n  q.z -= ftLen;\n  d = PrCapsDf (q, 0.2 * ftLen, ftLen);\n  DMINQ (idObjGrp + idLeg);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin;\n  dMin = dstFar;\n  for (int k = 0; k < 2; k ++) {\n    idObjGrp = (k + 1) * 256;\n    q = birdMat[k] * (p - birdPos[k]);\n    dMin = BdWingDf (q, dMin);\n    dMin = BdBodyDf (q, dMin);\n    dMin = BdFootDf (q, dMin);\n  }\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 BirdCol (vec3 n)\n{\n  vec4 col4;\n  vec3 nn;\n  float gw, w;\n  int ig, id;\n  ig = idObj / 256;\n  id = idObj - 256 * ig;\n  if (id == idWing) {\n    gw = 0.15 * birdLen;\n    w = mod (qHit.x, gw);\n    w = SmoothBump (0.15 * gw, 0.65 * gw, 0.1 * gw, w);\n    col4 = vec4 (mix (vec3 (0.05), vec3 (1.), w), 0.1);\n  } else if (id == idEye) {\n    col4 = vec4 (0., 0.6, 0., 1.);\n  } else if (id == idBdy) {\n    if (ig == 1) nn = birdMat[0] * n;\n    else nn = birdMat[1] * n;\n    col4 = vec4 (mix (mix (vec3 (1.), vec3 (0.1), smoothstep (0.5, 1., nn.y)), vec3 (1.),\n       1. - smoothstep (-1., -0.7, nn.y)), 0.1);\n  } else if (id == idBk) {\n    col4 = vec4 (1., 1., 0., 0.1);\n  } else if (id == idLeg) {\n    col4 = vec4 ((0.5 + 0.4 * sin (100. * qHit.z)) * vec3 (0.6, 0.4, 0.), 0.1);\n  }\n  col4.gb *= 0.7;\n  return col4;\n}\n\nvec3 BirdTrack (float t)\n{\n  vec3 bp, tt, fbR;\n  float ti[9], rdTurn, tC, tCyc, tSeq, a, h, hd, tf, rSeg;\n  rdTurn = 0.45 * min (fltBox.x, fltBox.z);\n  t = - t;\n  rdTurn = 0.45 * min (fltBox.x, fltBox.z);\n  tC = 0.5 * pi * rdTurn / birdVel;\n  tt = vec3 (fltBox.x - rdTurn, length (fltBox.xy), fltBox.z - rdTurn) * 2. / birdVel;\n  tCyc = 2. * (2. * tt.z + tt.x  + 4. * tC + tt.y);\n  tSeq = mod (t, tCyc);\n  ti[0] = 0.;  ti[1] = ti[0] + tt.z;  ti[2] = ti[1] + tC;\n  ti[3] = ti[2] + tt.x;  ti[4] = ti[3] + tC;  ti[5] = ti[4] + tt.z;\n  ti[6] = ti[5] + tC;  ti[7] = ti[6] + tt.y;  ti[8] = ti[7] + tC;\n  h = - fltBox.y;\n  hd = 1.;\n  if (tSeq > 0.5 * tCyc) { tSeq -= 0.5 * tCyc;  h = - h;  hd = - hd; }\n  rSeg = -1.;\n  fbR = vec3 (1.);\n  fbR.xz -= vec2 (rdTurn) / fltBox.xz;\n  bp.xz = fltBox.xz;\n  bp.y = h;\n  if (tSeq < ti[4]) {\n    if (tSeq < ti[1]) {\n      tf = (tSeq - ti[0]) / (ti[1] - ti[0]);\n      bp.xz *= vec2 (1., fbR.z * (2. * tf - 1.));\n    } else if (tSeq < ti[2]) {\n      tf = (tSeq - ti[1]) / (ti[2] - ti[1]);  rSeg = 0.;\n      bp.xz *= fbR.xz;\n    } else if (tSeq < ti[3]) {\n      tf = (tSeq - ti[2]) / (ti[3] - ti[2]);\n      bp.xz *= vec2 (fbR.x * (1. - 2. * tf), 1.);\n    } else {\n      tf = (tSeq - ti[3]) / (ti[4] - ti[3]);  rSeg = 1.;\n      bp.xz *= fbR.xz * vec2 (-1., 1.);\n    }\n  } else {\n    if (tSeq < ti[5]) {\n      tf = (tSeq - ti[4]) / (ti[5] - ti[4]);\n      bp.xz *= vec2 (- 1., fbR.z * (1. - 2. * tf));\n    } else if (tSeq < ti[6]) {\n      tf = (tSeq - ti[5]) / (ti[6] - ti[5]);  rSeg = 2.;\n      bp.xz *= - fbR.xz;\n    } else if (tSeq < ti[7]) {\n      tf = (tSeq - ti[6]) / (ti[7] - ti[6]);\n      bp.xz *= vec2 (fbR.x * (2. * tf - 1.), - 1.);\n      bp.y = h + 2. * fltBox.y * hd * tf;\n    } else {\n      tf = (tSeq - ti[7]) / (ti[8] - ti[7]);  rSeg = 3.;\n      bp.xz *= fbR.xz * vec2 (1., -1.);\n      bp.y = - h;\n    }\n  }\n  if (rSeg >= 0.) {\n    a = 0.5 * pi * (rSeg + tf);\n    bp += rdTurn * vec3 (cos (a), 0., sin (a));\n  }\n  return vec3 (bp.z, bp.y + 1.2 * fltBox.y, - bp.x);\n}\n\nvoid BirdPM (float t)\n{\n  vec3 bpF, bpB, vel, acc, va, ort, cr, sr;\n  float vy, el, dt;\n  dt = 1.;\n  bdPos = BirdTrack (t);\n  bpF = BirdTrack (t + dt);\n  bpB = BirdTrack (t - dt);\n  vel = (bpF - bpB) / (2. * dt);\n  vy = vel.y;\n  vel.y = 0.;\n  acc = (bpF - 2. * bdPos + bpB) / (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) / length (vel);\n  vel.y = vy;\n  el = - 0.7 * asin (vel.y / length (vel));\n  ort = vec3 (el, atan (vel.z, vel.x) - 0.5 * pi, 0.2 * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  bdMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n  legAng = pi * clamp (0.4 + 1.5 * el, 0.12, 0.8);\n}\n\nfloat WaveHt (vec3 p)\n{\n  float ht, w, wb;\n  p *= 0.03;\n  ht = 0.5 * sin (2. * dot (p.xz + 20. * waveDisp.xz, vec2 (1.)));\n  p += waveDisp;\n  wb = 1.414;\n  w = wb;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x) + 20. * waveDisp;\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return ht;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p) - vec2 (WaveHt (p + e.xyy), WaveHt (p + e.yyx)), e.x).xzy);\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, p;\n  float ds, fd, att, attSum, d, sd;\n  p = ro + rd * (200. - ro.y) / rd.y;\n  ds = 0.1 * sqrt (length (ro - p));\n  fd = 0.001 / (smoothstep (0., 10., ds) + 0.1);\n  p.xz *= fd;\n  p.xz -= cloudDisp.xz;\n  p *= 3.;\n  att = Fbm2 (p.xz);\n  attSum = att;\n  fd *= 3.;\n  d = fd;\n  ds *= fd;\n  for (int j = 0; j < 4; j ++) {\n    attSum += Fbm2 (p.xz + d * sunDir.xz);\n    d += ds;\n  }\n  sd = clamp (dot (sunDir, rd), 0., 1.);\n  skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n  col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) * max (rd.y - 0.1, 0.))) +\n     0.3 * (vec3 (1., 0.4, 0.2) * pow (sd, 256.) + vec3 (1., 0.8, 0.7) * pow (sd, 1024.));\n  attSum = 1. - smoothstep (1., 9., attSum);\n  col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.2),\n     att * (0.001 + 0.999 * smoothstep (0.001, 0.004, rd.y))), attSum) +\n     vec3 (1., 0.4, 0.) * pow (attSum * att, 4.) * (pow (sd, 8.) + 0.5);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col;\n  float dstObj, reflFac, dw;\n  reflFac = 1.;\n  dstObj = ObjRay (ro, rd);\n  if (rd.y < 0. && dstObj >= dstFar) {\n    dw = - (ro.y + 1.5) / rd.y;\n    ro += dw * rd;\n    rd = reflect (rd, WaveNf (ro, dw));\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    reflFac *= 0.7;\n  }\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    col4 = BirdCol (vn);\n    col = col4.rgb * (0.2 + 0.8 * max (dot (vn, sunDir), 0.) +\n       col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.));\n  } else col = SkyCol (ro, rd);\n  return reflFac * col;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd, vec3 blkSize)\n{\n  vec3 v, tm, tp, u;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = blkSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return dMin;\n}\n\nfloat JigDist (vec2 p, vec4 dpEdge, bool evOdd)\n{\n  vec4 a, cc, s;\n  vec2 e, bx, by;\n  float ecShift, ecRad, tcRad, d;\n  e = vec2 (0, 1);\n  e = evOdd ? e : e.yx;\n  ecShift = 2.;\n  ecRad = length (vec2 (0.5, 0.5 + ecShift));\n  bx = ecShift * e.yx;\n  by = (1. + ecShift) * e.xy;\n  d = max (length (abs (p) + bx) - ecRad, ecRad - length (abs (p) - by));\n  if (evOdd) dpEdge = dpEdge.zwxy;\n  a = 0.05 * pi * clamp (0.5 - dpEdge, -0.2, 0.2);\n  ecRad -= 0.02;\n  s = (2. * step (vec4 (0.5), dpEdge) - 1.) * vec4 (-1., 1., -1., 1.);\n  tcRad = 0.12;\n  d = s.x * min (s.x * d, length (Rot2D (p + bx, a.x) - ecRad * e.yx)- tcRad);\n  d = s.y * min (s.y * d, length (Rot2D (p - bx, a.y) + ecRad * e.yx)- tcRad);\n  d = s.z * min (s.z * d, length (Rot2D (p - by, a.z) + ecRad * e.xy)- tcRad);\n  d = s.w * min (s.w * d, length (Rot2D (p + by, a.w) - ecRad * e.xy)- tcRad);\n  return d;\n}\n\nvec3 JigPat (vec2 p, float rndOff)\n{\n  vec4 dpEdge;\n  vec2 cID, e, q, iq;\n  float d, h;\n  d = dstFar;\n  e = vec2 (0.5, 0.);\n  for (float iy = 0.; iy < 2.; iy ++) {\n    for (float ix = 0.; ix < 2.; ix ++) {\n      q = p + vec2 (ix, iy);\n      iq = floor (q / 2.) * 2. - vec2 (ix, iy);\n      dpEdge = vec4 (Hashfv2 (iq + rndOff + e.yx), Hashfv2 (iq + rndOff - e.yx),\n         Hashfv2 (iq + rndOff + e.xy), Hashfv2 (iq + rndOff - e.xy));\n      h = JigDist (mod (q, 2.) - 1., dpEdge, (ix == iy));\n      if (h < d) {\n        cID = iq;\n        d = h;\n      }\n    }\n  }\n  return vec3 (- d, cID);\n}\n\nvec3 ShowSceneBlk (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, jp;\n  vec2 cID, w;\n  float dBlk, t, rndOff;\n  bool isImg;\n  dBlk = BlkHit (ro, rd, blkSize);\n  if (dBlk < dstFar) {\n    ro += dBlk * rd;\n    vn = qnBlk;\n    isImg = false;\n    if (vn.y > 0.99) {\n      col = vec3 (0.2, 0.3, 0.2);\n      t = tCur / 30. + 0.1;\n      rndOff = 17. * floor (t);\n      jp = JigPat (ro.xz, rndOff);\n      cID = jp.yz;\n      w = abs (cID) / blkSize.xz;\n      if (Hashfv2 (cID + rndOff) < clamp (3.2 * SmoothBump (0.2, 0.8, 0.18,\n         mod (t, 1.)) + 2. * max (w.x, w.y) - 2.2, 0., 1.)) {\n        col = ShowScene (vec3 (0., 4., -30.), normalize (vec3 (ro.xz / blkSize.z, 2.4)));\n        col = mix (vec3 (0.2), col, smoothstep (0.015, 0.025, jp.x));\n        isImg = true;\n      }\n    } else col = vec3 (0.2, 0.2, 0.3);\n    if (isImg) col = clamp (col * mix (1., smoothstep (0., 1., Maxv3 (col)), 0.2), 0., 1.);\n    else {\n      if (vn.y > 0.99) vn = VaryNf (128. * ro, vn, 0.5);\n      col = col * (0.2 + 0.8 * max (dot (ltDir, vn), 0.)) +\n         0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 16.);\n    }\n  } else col = vec3 (0.7, 0.7, 0.8) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  sunDir = normalize (vec3 (0., 0.05, 1.));\n  waveDisp = 0.001 * tCur * vec3 (1., 0., 1.);\n  cloudDisp = 0.05 * tCur * vec3 (1., 0., -1.);\n  birdLen = 1.2;\n  birdVel = 7.;\n  fltBox = vec3 (12., 4., 12.);\n  for (int k = 0; k < 2; k ++) {\n    BirdPM (tCur + float (k) * 10.);\n    birdMat[k] = bdMat;\n    birdPos[k] = bdPos;\n  }\n  dstFar = 100.;\n  blkSize = vec3 (16.25, 0.1, 9.25);\n  az = 0.;\n  el = -0.5 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -4. * blkSize.x);\n  ltDir = vuMat * normalize (vec3 (0.5, 0.5, -1.));\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), 6.8));\n    col += (1. / naa) * ShowSceneBlk (ro, rd);\n  }\n  fragColor = vec4 (pow (clamp (col, 0., 1.), vec3 (0.8)), 1);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x / rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  if (f > 0.001) {\n    g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n    n += f * (g - n * dot (n, g));\n    n = normalize (n);;\n  }\n  return n;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}