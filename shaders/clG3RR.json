{
    "Shader": {
        "info": {
            "date": "1683393481",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nif music doesnt start - stop/rrwd and play again\n\nmousable - and full screen is nice!\n",
            "flags": 96,
            "hasliked": 0,
            "id": "clG3RR",
            "likes": 22,
            "name": "Year of Truchets #018",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "truchet",
                "path"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #018\n    05/06/2023  @byt3_m3chanic\n    \n    All year long I'm going to just focus on truchet tiles and the likes!\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n    Thanks to @Shane for his path shaders!\n    https://www.shadertoy.com/view/MlXSWX\n    \n    good song choices\n    https://soundcloud.com/trybesof/tim-green-battle-illusion\n    https://soundcloud.com/trybesof/tim-green-pyxis\n\n*/\n\n#define COLOR(COORD) texture(iChannel0,(COORD))\nfloat hash21(vec2 p) { return fract(sin(dot(p,vec2(27.609, 57.583)))*43758.5453); }\n// chroma spread fake thing\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\n\tvec2 uv = fragCoord.xy/iResolution.xy;    \n    vec3 color = COLOR(uv).rgb;\n    // effect sammple\n    vec3 fgclr = vec3(0.);\n    float f = length(uv  - 1.75);\n    fgclr.x = COLOR(uv - vec2(f*0.001,.000)).x;\n    fgclr.y = COLOR(uv + vec2(f*0.002,.001)).y;\n    fgclr.z = COLOR(uv - vec2(f*0.002,.001)).z;\n \n    // mask for effect and mixdown \n    float dt = length(uv-.5)-.22;\n    vec3 C = mix(color,fgclr,smoothstep(0.,.275,dt));\n    C = mix(C,clamp(C+.01,vec3(0),vec3(1)),hash21(uv+2.));\n    // output -gamma correct\n    C = pow(C, vec3(0.4545));\n    fragColor = vec4(C,1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #018\n    05/06/2023  @byt3_m3chanic\n    \n    All year long I'm going to just focus on truchet tiles and the likes!\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n    Thanks to @Shane for his path shaders!\n    https://www.shadertoy.com/view/MlXSWX\n    \n    good song choices\n    https://soundcloud.com/trybesof/tim-green-battle-illusion\n    https://soundcloud.com/trybesof/tim-green-pyxis\n\n*/\n\n#define R          iResolution\n#define M          iMouse\n#define T          iTime\n#define PI         3.141592653\n#define PI2        6.283185307\n\n#define MAX_DIST   80.\n#define MIN_DIST   1e-3\n\nfloat sampleFreq(float freq) { \n    float a = texture(iChannel0, vec2(freq, .25)).x; \n    if(a<.0001) a = .5+.5*sin(T+cos(T*.12));\n    return a;\n}\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 p) { return fract(sin(dot(p,vec2(27.609, 57.583)))*43758.5453); }\n\n//@iq SDF's\nfloat box( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat trs( vec3 p,vec2 t){\n    vec2 q = vec2(length(p.zx)-t.x,p.y);\n    return length(q)-t.y;\n}\n\n//@Shane - path function\nvec2 path(in float z){\n    vec2 p1 =vec2(2.38*sin(z * .15)+5.38*cos(z * .075), 3.4*cos(z * .0945));\n    vec2 p2 =vec2(3.2*sin(z * .089),4.31*sin(z * .127)+2.5*cos(z * .095));\n    return (p1 - p2)*.3;\n}\n\n//@MercurySexy\nvec2 pModPolar(inout vec2 p) {\n    float angle = 0.26179938779;//0.52359877559;//hardcoded for speed 2.*PI/24;\n    float a = atan(p.y, p.x) + angle/2.,\n          r = length(p),\n          c = floor(a/angle);\n    a = mod(a,angle) - angle/2.;\n    p = vec2(cos(a), sin(a))*r;\n    if (abs(c) >= (12.)) c = abs(c);\n    return vec2(c,angle);\n}\n\nfloat time=0.,tspeed=0.,glow = 0.,gwave=0.;\nvec3 hp,hit,lp = vec3(0.);\nvec2 gid,sid;\nmat2 rxa,rxb;\n\nconst float sz = 1.;\nconst float hf = .5;\n\nvec2 map (in vec3 pos, float sg) {\n \tvec2 res = vec2(1e5,0);\n \tvec3 p = pos;\n\n    \n \tvec2 tun = p.xy - path(p.z);\n    vec3 px = vec3(tun+vec2(0.,-.1),pos.z+tspeed+5.+gwave);\n    vec3 q = vec3(tun,p.z);\n\n    float iz = floor((q.z+hf)/sz);\n    q.z = mod(q.z+hf,sz)-hf;\n    vec3 r = q;\n    r.z*=1.15;\n    \n    float zhs=hash21(vec2(iz,0.));\n    if(zhs<.75) r.xy *= rxa;\n    if(zhs>.95) r.xy *= rxb;\n    vec2 id = pModPolar(r.xy);\n    r -= vec3(4.25,0,0);\n    r.xy *= rot(id.y*6.);\n\n    vec2 mid = vec2(id.x,iz);\n    float hs = hash21(mid);\n    \n    if(hs>.5) r.xz*=rot(1.5707);\n    float ct = box(r,vec3(hf));\n    float tk = .15+.1*sin(p.z*.075);\n    \n\n    float d = min(\n    trs(r-vec3(hf,0,-hf),vec2(hf,tk)),\n    trs(r-vec3(-hf,0,hf),vec2(hf,tk))\n    );\n\n    if(hs>.75) d = min(length(r.yz)-tk,length(r.yx)-tk);\n    if (hs>.9) d = min(length(vec3(abs(r.x),r.yz)-vec3(hf,0,0))-tk,length(r.yx)-tk);\n    \n    d = max(abs(d)-.025,d);\n    d = max(ct,d);\n    \n    if(d<res.x) {\n        res = vec2(d,1.);\n        hit=q;\n        sid=mid;\n    }\n        \n    float ns = sampleFreq(.01)*.5;    \n    float nx = sampleFreq(.4)*PI2; \n    float nr = sampleFreq(.75)*PI2; \n    float b=length(px)-(.001+ns); \n    px.xz *= rot(nx);\n    px = abs(px.xzy)-.3;\n    px.zy *= rot(-nr);\n    b = min(trs(px,vec2(.2+ns,.01)),b);\n       \n    if(sg==1.) { glow += .001/(.0002+b*b);}\n    \n    if(b<res.x) {\n        res = vec2(b,1.);\n        hit=px;\n        sid=vec2(0);\n    }\n\n    res.x /=1.15;\n \treturn res;\n}\n\nvec3 normal(vec3 p, float t) {\n    t*=MIN_DIST;\n    float d = map(p,0.).x;\n    vec2 e = vec2(t,0);\n    vec3 n = d - vec3(\n        map(p-e.xyy,0.).x,\n        map(p-e.yxy,0.).x,\n        map(p-e.yyx,0.).x\n        );\n    return normalize(n);\n}\n\n//@iq of hsv2rgb\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.+vec3(0,4,2),6.)-3.)-1., 0., 1.0 );\n    return c.z * mix( vec3(1), rgb, c.y);\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    // precal\n    time = iTime;\n    tspeed = time*3.85;\n    gwave = 7.75+5.*sin(time*.1);\n    rxa=rot(T*.3);\n    rxb=rot(-T*.25);\n    \n    vec3 C =vec3(0);\n\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    \n    vec3 ro = vec3(0,0,.1);\n    vec3 rd = normalize(vec3(uv,-1.));\n\n    // mouse //\n    float x = M.xy==vec2(0) && M.z<1. ? 0. : -(M.y/R.y*.5-.25)*PI;\n    float y = M.xy==vec2(0) && M.z<1. ? 0. : -(M.x/R.x*2.-1.)*PI;\n    if(M.z>0.){\n        mat2 rx = rot(x), ry = rot(y);\n        ro.zy *= rx; ro.xz *= ry; \n        rd.zy *= rx; rd.xz *= ry;\n    }\n    \n    ro.z -= tspeed;\n    ro.xy += path(ro.z);\n\n    // center tracking\n    rd.xy = rot( (.2*sin(time*.3))-path(lp.z).x/ 24. )*rd.xy;\n    rd.xz = rot( path(lp.z+1.).y/ 14. )*rd.xz;\n\n    float d,m;\n    vec3 p = vec3(0);\n\n    for(int i=0;i<255;i++) {\n        p=ro+rd*d;\n        vec2 ray = map(p,1.);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST)break;\n        d+= i>75? ray.x*.65 : ray.x * .2;\n        m = ray.y;\n    }\n    gid=sid;\n\n    if(d<MAX_DIST) {\n        vec3 n = normal(p,d);\n\n        vec3 lpos = vec3(0,0,-6);\n        lpos.z -= tspeed;\n        lpos.xy += path(lpos.z);\n        vec3 l = normalize(lpos-p);\n        float diff = clamp(dot(n,l),.1,.9);\n\n        vec3 h = vec3(.001);\n\n        float hs = hash21(gid);\n        if(hs<.625) h = hsv2rgb(vec3(p.z*.025,1.,.5));\n \n        C = h *diff;\n        \n    } \n\n    C = mix(vec3(.0175),C, exp(-.000045*d*d*d));\n    C = mix(C,vec3(.89),clamp(glow*.5,0.,1.));\n    //C = pow(C, vec3(.4545));\n    O = vec4(C,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 33253,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/trybesof/tim-green-pyxis"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}