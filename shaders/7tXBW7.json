{
    "Shader": {
        "info": {
            "date": "1651004536",
            "description": "Rock Paper Scissors Automaton - Watch cells play rock paper scissors against each other",
            "flags": 32,
            "hasliked": 0,
            "id": "7tXBW7",
            "likes": 3,
            "name": "RPS Automaton",
            "published": 3,
            "tags": [
                "automata",
                "cellular",
                "paper",
                "rock",
                "moore",
                "automaton",
                "scissors",
                "rps"
            ],
            "usePreview": 0,
            "username": "Spi3lot",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// [0; 8]\n#define NEIGHBOR_THRESHOLD 3\n\n#define R vec3(0.0, 1.0, 1.0)\n#define P vec3(1.0, 0.0, 1.0)\n#define S vec3(1.0, 1.0, 0.0)\n\n\nvec3 getColorFromNoise(float white)\n{\n    return (white < 0.333) ? R : ((white < 0.666) ? P : S);\n}\n\nvec3 getWinner(ivec2 coord)\n{\n    vec3 me;\n    int r = 0;\n    int p = 0;\n    int s = 0;\n\n    for (int j = -1; j <= 1; j++)\n    {\n        for (int i = -1; i <= 1; i++)\n        {\n            vec3 rps = texelFetch(iChannel0, coord + ivec2(i, j), 0).rgb;\n\n            if (i == j && j == 0)\n                me = rps;\n            else if (rps == R)\n                r++;\n            else if (rps == P)\n                p++;\n            else if (rps == S)\n                s++;\n        }\n    }\n\n    if (me == R)\n        return (p >= NEIGHBOR_THRESHOLD) ? P : R;\n    else if (me == P)\n        return (s >= NEIGHBOR_THRESHOLD) ? S : P;\n    else if (me == S)\n        return (r >= NEIGHBOR_THRESHOLD) ? R : S;\n\n    return vec3(0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    vec3 col;\n\n    if (iFrame < 100) {\n        vec2 uv = fragCoord / iResolution.xy;\n        float white = texture(iChannel1, uv).r;\n        \n        col = getColorFromNoise(white);\n    }\n    else {\n        col = getWinner(coord);\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}