{
    "Shader": {
        "info": {
            "date": "1570813136",
            "description": "copy-paste in JS console:\nH=location.host;E=(H?window:opener);E.tab1.click();E.gShaderToy.SetTexture(1,{mSrc:'https://i.imgur.com/H5YzLhr.png',mType:'texture',mID:1,mSampler:{filter:'mipmap',vflip:'true',srgb:'false',internal:'byte'}});\nif pb, cf header",
            "flags": 32,
            "hasliked": 0,
            "id": "Wsy3DG",
            "likes": 22,
            "name": "raytrace geometry images as vol",
            "published": 3,
            "tags": [
                "volume",
                "voxel",
                "mipmap",
                "optimization",
                "mesh",
                "encoding",
                "load",
                "customtexture",
                "custommesh",
                "accelerationstructure"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1877
        },
        "renderpass": [
            {
                "code": "// true volume ray-tracing variant of https://shadertoy.com/view/tdK3Rd\n// optimized version (minmax structure) of https://shadertoy.com/view/wdyGRt\n\n// Geometry Images: encoding mesh & bump in texture. From http://hhoppe.com/proj/gim/\n// mesh image :               https://i.imgur.com/H5YzLhr.png\n// bump image (unused here) : https://i.imgur.com/HE34SCq.png\n\n// You can load them in shadertoy either from the JS console ( press F12 )\n\n//      window.tab1.click(); gShaderToy.SetTexture(1,{mSrc:'https://i.imgur.com/H5YzLhr.png',mType:'texture',mID:1,mSampler:{filter:'mipmap',wrap:'repeat',vflip:'true',srgb:'false',internal:'byte'}});\n\n// or by clicking the magic link in shader description. [UPDATE: no longer allowed]\n// ATTENTION: on Windows, window.tab1.click(); sometime isn't define. → manually go to buffA then copy-paste the rest.\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0,ivec2(U), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Geometry Images: encoding mesh & bump in texture. From http://hhoppe.com/proj/gim/\n// mesh image :               https://i.imgur.com/H5YzLhr.png\n// bump image (unused here) : https://i.imgur.com/HE34SCq.png\n// you can load them in shadertoy either from the JS console ( press F12 )\n//      window.tab1.click(); gShaderToy.SetTexture(1,{mSrc:'https://i.imgur.com/H5YzLhr.png',mType:'texture',mID:1,mSampler:{filter:'mipmap',wrap:'repeat',vflip:'true',srgb:'false',internal:'byte'}});\n// or by clicking the magic link in shader description. [UPDATE: no longer allowed]\n// ATTENTION: on Windows, window.tab1.click(); sometime isn't define. → manually go to buffA then copy-paste the rest.\n\n\n#define LOD 0                // Compatible with MIPmapping and compression ! \n#define TILE 8               // Size of tiles in min/max acceleration structure\n#define TILE2 4              // Size of tiles2 in upper level\n#define Ntile  (256/TILE)    // number of tiles\n#define Ntile2 (Ntile/TILE2) // number of tiles2 \n\nint CAPS=0;     // === fonts & message from https://www.shadertoy.com/results?query=message\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.5;\n#define char(c) T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad( iChannel3, U/16. + fract( vec2(c, 15-(c)/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0);\n#define endMsg  return length(T.yz)==0. ? 0. : T.x;\n#define C(c) spc char(64+CAPS+c);\n\nfloat message(vec2 U) { // --- display waiting message \"Click URL to load geometry\"\n    initMsg\n    C(3) low C(12)C(9)C(3)C(11) spc caps C(21)C(18)C(12) spc low C(20)C(15) spc\n    C(12)C(15)C(1)C(4) spc C(7)C(5)C(15)C(13)C(5)C(20)C(18)C(25)\n    endMsg\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy; // === initialization\n    if ( iFrame<1 || texelFetch(iChannel0,ivec2(0),0).a == 0. ) { // structure not yet computed\n        if ( iChannelResolution[1].x <1. ) {          // geom image loaded not yet loaded\n            O.rgb = vec3( message((U/R.y-vec2(0,.2))*8.) ); // display load message\n        } else {                             // init min/max acceleration structure\n            U -= .5; O-=O;\n            if (max(U.x/2.,U.y) <= float(Ntile) ) {\n                float s = mod(U.x,2.)<1. ? 1. : -1.; // compute min on even pixels and max on odd pixels\n                vec3 M = vec3(1e5);\n                for(int y = 0; y < TILE; y++)\n                    for(int x = 0; x < TILE; x++)\n                        M = min(M, s* texelFetch(iChannel1,ivec2(U.x/2.,U.y)*TILE+ivec2(x,y), 0).xyz) ;\n                    O.xyz = s*M; O.w = 1.;\n            } else {\n                U.y -= float(Ntile+1);\n                if (U.y>=0. && max(U.x/2.,U.y) <= float(Ntile2+1) ) {\n                float s = mod(U.x,2.)<1. ? 1. : -1.; // compute min on even pixels and max on odd pixels\n                vec3 M = vec3(1e5);\n                for(int y = 0; y < TILE*TILE2; y++)\n                    for(int x = 0; x < TILE*TILE2; x++)\n                        M = min(M, s* texelFetch(iChannel1,ivec2(U.x/2.,U.y)*TILE*TILE2+ivec2(x,y), 0).xyz) ;\n                    O.xyz = s*M; O.w = 1.;                    \n        }}}\n        return;\n    }\n        \n    O = texelFetch(iChannel0,ivec2(U), 0);          // restore struct + prev image \n    if (max(U.x/2.,U.y) <= float(Ntile) ) return;   // preserve minmax struct. Ok, should be in another buffer :-)\n    if (max(U.x/2.,U.y-float(Ntile+1)) <= float(Ntile2) ) return;\n\n    // === display geometry image as slice of voxels (cumulated in time).\n    // indeed, we could now do it in Image buffer.\n    \n    U *= 256./R.y; U.x -= float(2*Ntile);\n    if (max(U.x/1.2,U.y)>256.) return;              // image is clamped anyway\n\n    float eps = 2.*exp2(float(LOD)) / 256.,         // / 4. to see vertices\n          //z = fract(iTime);\n            z = fract(float(iFrame<<LOD)/256./1.2);\n    O-=O;\n    for (z=1.+eps; z>=-eps; z-=eps) \n    {\n        vec3 P = vec3( U/257., z*1.2-.1 );          // target voxel center\n        P.xz = .5 + ( P.xz-.5) * mat2(cos( 6.28*iMouse.x/R.x + vec4(0,33,11,0))); // scene rotation with mouse\n        P.yz = .5 + ( P.yz-.5) * mat2(cos(-3.14*iMouse.y/R.y + vec4(0,33,11,0))); // rot from https://www.shadertoy.com/view/XlsyWX\n        if ( min(P.x,min(P.y,P.z))<-eps ||  max(P.x,max(P.y,P.z))>1.+eps ) continue; // scene BBox\n            \n        for(int t2y = 0; t2y < Ntile2; t2y++)\n            for(int t2x = 0; t2x < Ntile2; t2x++) \n            {\n                vec3 m = texelFetch(iChannel0,ivec2(2*t2x  ,t2y+Ntile+1), 0).xyz - P,\n                     M = texelFetch(iChannel0,ivec2(2*t2x+1,t2y+Ntile+1), 0).xyz - P;\n                if ( max(m.x,max(m.y,m.z)) <= eps && min(M.x,min(M.y,M.z)) >= -eps ) { // tile2 contains a visible tile\n\n                    for(int ty = 0; ty < TILE2; ty++)\n                        for(int tx = 0; tx < TILE2; tx++) \n                        {\n                            m = texelFetch(iChannel0,ivec2(2*(t2x*TILE2+tx)  ,t2y*TILE2+ty), 0).xyz - P,\n                            M = texelFetch(iChannel0,ivec2(2*(t2x*TILE2+tx)+1,t2y*TILE2+ty), 0).xyz - P;              \n                            if ( max(m.x,max(m.y,m.z)) <= eps && min(M.x,min(M.y,M.z)) >= -eps ) { // tile contains a visible voxel\n                                for(int y = 0; y < TILE>>LOD; y++)\n                                    for(int x = 0; x < TILE>>LOD; x++) {\n                                        vec3 T = texelFetch(iChannel1,(ivec2(t2x,t2y)*TILE2+ivec2(tx,ty))*(TILE>>LOD)+ivec2(x,y), LOD).xyz - P;\n                                        if (abs(T.z)<eps && dot(T.xy,T.xy)<eps*eps) { O = vec4(z); return; }\n                                    }\n                                //tx=ty=999; // stop ray. wrong: could be the eps-neighbor, and not even monotonous anyway.\n                            }\n                        }\n                }\n            }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}