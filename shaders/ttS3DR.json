{
    "Shader": {
        "info": {
            "date": "1559304589",
            "description": "Just a room in my aunt's shop thingy..",
            "flags": 0,
            "hasliked": 0,
            "id": "ttS3DR",
            "likes": 9,
            "name": "A mirror room",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 533
        },
        "renderpass": [
            {
                "code": "#define EPSILON 0.001\n#define PI 3.141593\n#define PHI 1.618033\n\n\n#define null_color vec3(0.3,0.5,0.7)\n#define null_gloss 256.\n#define null_sAmb 0.1\n#define null_sSpec 0.5\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nstruct Ray {\n    vec3 o;\n    vec3 d;\n};\n   \nstruct Light {\n    vec3 c;\n    vec3 o;\n    float s;\n};\n    \nstruct Material {\n    vec3 col;\n    float op; //opacity\n    float sa; //ambient strength\n    float ss; //specular strength;\n    float gl; //gloss\n    float refl; //reflectiveness\n    float refr; //refractiveness\n};\n    \nstruct ReflectObjData {\n    vec3 pos;\n    Material mat;\n};\n\n//Dist Funcs https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, float s ) {\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  \tvec3 d = abs(p) - b;\n    return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  \tvec3 d = abs(p) - b;\n \treturn length(max(d,0.0)) - r\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n    return length(p.xz-c.xy)-c.z;\n}\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    float m = p.x+p.y+p.z-s;\n    vec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    \n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat sdOctahedronBound( in vec3 p, in float s)\n{\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n//Inter -------------------------------------------------------------------------------\n\nfloat opUnion( float d1, float d2 ) {  return min(d1,d2); }\n\nvec2 opUnion2( vec2 d1, vec2 d2) { return d1.x < d2.x ? d1 : d2; }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nmat2x2 rotationMatrix ( float deg ) {\n    float rad = radians(deg);\n    float c = cos(rad), s = sin(rad);\n    return mat2x2(c, -s, s, c);\n}\n\nvec2 map (vec3 pos) {\n    \n    vec3 p = pos;\n    //vec2 x = vec2(sdPlane(vec3(pos.x, pos.y, pos.z)), 1.1);\n    vec2 x = vec2(0.);\n    float d = 0.;\n    \n    //d = sdRoundBox( p-vec3(0.,0.5,0.), vec3(1., 1., 1.), 0.1);\n    /*d = opSmoothUnion(sdSphere(p, 1.), sdPlane(p), 2.);\n    \n    x = vec2(d, 1.1);\n    \n    vec2 asdf = vec2(5.0,0.0)*mat2x2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n    \n    d = sdSphere(p-vec3(asdf.x,1.5,asdf.y), 2.);\n    x = opUnion2(vec2(d, 1.2), x);\n    \n    vec2 asdf1 = vec2(5.0,0.0)*mat2x2(cos(iTime+PI/2.),sin(iTime+PI/2.),-sin(iTime+PI/2.),cos(iTime+PI/2.));\n    \n    d = sdSphere(p-vec3(asdf1.x,1.5,asdf1.y), 1.5);\n    x = opUnion2(vec2(d, 1.2), x);\n    \n    vec2 asdf2 = vec2(5.0,0.0)*mat2x2(cos(iTime+PI),sin(iTime+PI),-sin(iTime+PI),cos(iTime+PI));\n    \n    d = sdSphere(p-vec3(asdf2.x,1.,asdf2.y), 1.);\n    x = opUnion2(vec2(d, 1.4), x);*/\n    \n    x = vec2(sdPlane(p), 1.3);\n    \n     p = pos + vec3(0., -4.7, 0.);\n    \n    d = sdBox( p, vec3(3., 1., 3.) );\n    \n    x = opUnion2(vec2(d, 1.1), x);\n    \n    //MIRRORS\n    \n    p = pos + vec3(3.6, 0., -0.5);\n    \n    d = sdBox( p, vec3(1., 4., 2.5) );\n    \n    x = opUnion2(vec2(d, 1.2), x);\n    \n    p = pos - vec3(2.8, 0., -0.5);\n    \n    d = sdBox( p, vec3(1., 4., 2.5) );\n    \n    x = opUnion2(vec2(d, 1.2), x);\n    \n    p = pos + vec3(0., 0., 3.);\n    \n    // WALL THAT ISNT REFLECTIVE IN THE MIRROR ROOM\n    \n    d = sdBox( p, vec3(3., 4., 1.) );\n    \n    x = opUnion2(vec2(d, 1.1), x);\n    \n    p = pos + vec3(4.7, 0., -2.3);\n    \n    // WALLS THAT THE CURTAIN TOUCH (NOT IN THE MIRROR ROOM)\n    \n    d = sdBox( p, vec3(3., 4., 0.2) );\n    \n    x = opUnion2(vec2(d, 1.1), x);\n    \n    p = pos + vec3(-4.7, 0., -2.3);\n    \n    d = sdBox( p, vec3(3., 4., 0.2) );\n    \n    x = opUnion2(vec2(d, 1.1), x);\n    \n    // WALL THAT ISNT PART OF THE MIRROR ROOM\n    \n    p = pos + vec3(0., 0., -6.) + texture(iChannel0, pos.xy/32.).r/512.;\n    \n    d = sdBox( p, vec3(6., 6., 1.) );\n    \n    x = opUnion2(vec2(d, 1.1), x);\n    \n    \n    // CURTAIN\n    \n    p = pos + vec3(-5.3+sin(iTime)/32.+pos.y/32.+0.2, 0., -1.9+sin(pos.x*(16.+pos.y))/32.);\n    p.x += 10.5;\n    //p = pos + vec3(-2.7, 0., -2.9);\n    \n    d = sdBox( p, vec3(5., 4., 0.04) );\n    \n    x = opUnion2( vec2(d, 1.5),x);\n    \n    \n    \n    // CURTAIN POLE\n    \n    p = pos;\n    \n    p.xy *= rotationMatrix ( 90. );\n    \n    p += vec3(-3.1, 3.6, -2.).yxz;\n    \n    d = sdCylinder (p, vec3(0., 0., 0.1) );\n    \n    x = opUnion2( vec2(d, 1.2), x);\n    \n    \n    \n    //  SEATS \n    \n    p = pos + vec3( -1.0, 0.0, 0.0 ) + texture(iChannel2, pos*4.).r/512.;\n    \n    d = sdRoundBox( p, vec3(0.5, 0.5, 1.7), 0.2 );\n    \n    x = opUnion2( vec2(d, 1.6), x);\n    \n    p = pos + vec3( 1.8, 0.0, 0.0 ) + texture(iChannel2, pos*4.).r/512.; // TEXTURE SHOULD BE IN THE NORMALS!!!!!\n    \n    d = sdRoundBox( p, vec3(0.5, 0.5, 1.7), 0.2 );\n    \n    x = opUnion2( vec2(d, 1.6), x);\n    \n    //d = sdRoundBox(p-vec3(asdf.x*10.,-3.0,asdf.y*10.), vec3(8.0,5.0,8.0), 0.1);\n    //x = opUnion2(vec2(d, 1.2), x);\n    return x;\n    \n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.01;\n    float tmax = 30.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.001;\n    float t = tmin; //distance travelled\n    float m = -1.0; //color id\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t ); //smallest distance\n        if( abs(res.x)<precis || t>tmax ) break; //break if ray goes too far or too near.\n        t += res.x;  //otherwise add small distance for new march position\n\t    m = res.y; //get best color id\n    }\n\n    if( t>tmax ) m=-1.0; //if ray went too far, there is no color id.. just air.\n    return vec2( t, m );\n}\n\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    float thk = 0.1;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + thk*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, int technique )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    \n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n\n        // traditional technique\n        if( technique==0 )\n        {\n        \tres = min( res, 10.0*h/t );\n        }\n        // improved technique\n        else\n        {\n            // use this if you are getting artifact on the first iteration, or unroll the\n            // first iteration out of the loop\n            //float y = (i==0) ? 0.0 : h*h/(2.0*ph); \n\n            float y = h*h/(2.0*ph);\n            float d = sqrt(h*h-y*y);\n            res = min( res, 10.0*d/max(0.0,t-y) );\n            ph = h;\n        }\n        \n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\n\n/*\nstruct Material {\n    vec3 col;\n    vec3 op; //opacity\n    vec3 sa; //ambient strength\n    vec3 ss; //specular strength;\n    vec3 gl; //gloss\n    vec3 refl; //reflectiveness\n    vec3 refr; //refractiveness\n};\n*/\n\nMaterial ID2Material ( float m, vec3 ref, vec3 pos, vec3 nor) {\n    Material mat = Material ( null_color, 1., null_sAmb, null_sSpec, null_gloss, 0., 0.);\n    if (m != 1.0) {\n        if( m == 1.1 ) {\n            mat.col = vec3(1.0);\n        }\n        else if(m == 1.2) {\n            mat.refl = 1.0;\n            mat.ss = 1.0;\n        } else if(m == 1.3) {\n            mat.col = vec3(1.);\n            mat.refl = 1.0;\n        } else if(m == 1.4) {\n            mat.col = vec3(1.);\n            mat.refl = 0.1;\n            mat.refr = iTime+0.000001;\n            mat.op = 0.;\n        } else if(m == 1.5) {\n            mat.col = vec3(0.9, 0.0, 0.1);\n            mat.ss = 0.2;\n            mat.gl = 4.;\n        }\n    }\n    \n    return mat;\n}\n\nvec3 calcAlbedoReflectance ( in vec3 ro, in vec3 rdi ) {\n    \n    vec3 rd = normalize(rdi);\n    vec3 cTotal = vec3(0.);\n    float cCount = 0.;\n    float rad = 0.;\n    \n    for(int i = 0; i < 12; i++) {\n        \n        vec2 trd2 = rd.xz * mat2x2(cos(rad), -sin(rad), sin(rad), cos(rad));\n        vec3 trd = normalize(vec3(trd2, rd.y).xzy);\n        \n        vec2 res = castRay(ro, trd);\n        float t = res.x, m = res.y;\n        \n        vec3 pos = ro+t*trd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(trd, nor);\n        \n        Material mat = ID2Material(m, ref, pos, nor);\n        \n        cTotal += mat.col*mat.refl/PHI;\n        \n        \n        rad += 2.*PI/12.;\n        \n        \n        cCount++;\n        \n    }\n    \n    vec3 dTotal = cTotal / cCount;\n    \n    return dTotal;\n    \n}\n            \nvec3 renderRef ( vec3 ro, vec3 rd, vec3 npos, vec3 nnor, vec3 nref, float nt, float nm ) {\n    \n    vec3 col = null_color; //default color\n    float gl = null_gloss; //default gloss\n    //vec2 res = castRay(ro, rd); //cast ray, get stuff\n    \n    vec3 colref = col;\n    \n    float t = nt, m = nm;\n    \n    if(m != -1.0) {\n        \n        //preset variables\n        vec3 pos = npos;\n        vec3 nor = nnor;\n        vec3 ref = reflect(rd, nor);\n        \n        //strengths\n        float sAmb = null_sAmb, sSpec = null_sSpec;\n        \n        \n        \n        if(m == 1.1) {\n            col = vec3(1.0,1.0,1.0);\n        } else if(m == 1.2) {\n            col = pow(colref,vec3(1.0/2.2));\n            sSpec = 1.0;\n        } else if(m == 1.3) {\n            col = mix(colref, vec3(1.0), 0.5);\n        } else if(m == 1.5) {\n            col = vec3(0.9, 0.0, 0.1);\n            sSpec = 0.2;\n            gl = 4.;\n        } else if(m == 1.6) {\n            col = vec3(1.0, 1.0, 1.0);\n            sSpec = 0.1;\n            gl = 128.;\n        }\n        \n        const int LIGHT_AMOUNT = 3;\n        Light[LIGHT_AMOUNT] lights = Light[LIGHT_AMOUNT] (\n            //Light( vec3(1.0,0.5,0.0), vec3(0.0, 3.0, -6.0), 0.9),\n            //Light( vec3(1.0,1.0,0.0), vec3(6.0, 3.0, 0.0), 0.7 ),\n            //Light( vec3(0.0,0.5,1.0), vec3(0.0, 3.0, 6.0), 1. ),\n            //Light( vec3(0.5,0.0,1.0), vec3(-6.0, 3.0, 0.0), 0.7 ),\n            Light( vec3(1.0,0.7,0.2), vec3(0.0, 5.0, 3.0), 1.),\n            Light( vec3(1.0,0.7,0.2), vec3(3.0, 5.0, 3.0), 1.),\n            Light( vec3(1.0,0.7,0.2), vec3(-3.0, 5.0, 3.0), 1.)\n        );\n        \n        vec3 viewdir = normalize(ro - pos);\n        \n        vec3 dcol = col;\n        vec3 totalAmb = vec3(0.);\n        vec3 totalLigCol = vec3(0.);\n        \n        //per-light rendering\n        \n        for(int i = 0; i < LIGHT_AMOUNT; i++) {\n            Light cLight = lights[i];\n            vec3 ligcN = cLight.c*cLight.s, ligoN = cLight.o;\n            vec3 ligdirN = normalize(ligoN - pos);\n            vec3 inligrefN = reflect(-ligdirN, nor);\n            \n            float dif = max(dot(nor, ligdirN), 0.) * calcSoftshadow(pos, ligdirN, 0.01, 0.3, 1);\n            float spec = sSpec*pow(max(dot(viewdir, inligrefN), 0.0), gl);\n            \n            float dist = length(pos - ligoN);\n            \n            totalAmb += sAmb *ligcN;\n            totalLigCol += (dif/dist + spec) * ligcN;\n            \n        }\n        //using wave constructive interference. (what happens when two light waves interact with each other.)\n        //hopefully this is coorect :)\n        totalLigCol += totalAmb / vec3(LIGHT_AMOUNT);\n        \n        col *= totalLigCol;\n        \n    }\n    \n    return clamp(col, vec3(0.0), vec3(1.0));\n    \n}\n\nvec3 castReflectionRay ( in vec3 ref, in vec3 pos, in vec3 nor ) {\n    vec3 nref = ref, npos = pos, nnor = nor;\n    vec3 ro = vec3(0.), rd = vec3(0.);\n    float nt = 0., nm = -1.0;\n    float ni = 1.;\n    bool suc = false;\n    \n    for ( int i = 0; i < 24; i++ ) {\n        vec2 cres = castRay(npos, nref);\n        ro = npos, rd = nref;\n        nt = cres.x;\n        nm = cres.y;\n        vec3 cpos = ro+nt*rd;\n        vec3 cnor = calcNormal(cpos);\n        vec3 cref = reflect(rd, cnor);\n        npos = cpos, nref = cref, nnor = cnor;\n        \n        Material mat = ID2Material(nm, nref, npos, nnor);\n        \n        if(mat.refl == 0.0 || length(mat.col) > 0.92) {\n            suc = true;\n            break;\n        }\n        \n        ni++;\n    }\n    vec3 col = vec3(1.0);\n    col = renderRef ( ro, rd, npos, nnor, nref, nt, nm );\n    col /= ni;\n    \n    \n    return col;\n    \n}\n\nvoid swap ( inout vec3 a, inout vec3 b ) {\n    vec3 c = a;\n    a = b;\n    b = c;\n}\n\nvoid swap ( inout float a, inout float b ) {\n    float c = a;\n    a = b;\n    b = c;\n}\n\n/*\n\nFollowing\n\nVec3f refract(const Vec3f &I, const Vec3f &N, const float &ior) \n{ \n    float cosi = clamp(-1, 1, dotProduct(I, N)); \n    float etai = 1, etat = ior; \n    Vec3f n = N; \n    if (cosi < 0) { cosi = -cosi; } else { std::swap(etai, etat); n= -N; } \n    float eta = etai / etat; \n    float k = 1 - eta * eta * (1 - cosi * cosi); \n    return k < 0 ? 0 : eta * I + (eta * cosi - sqrtf(k)) * n; \n} \n\nwhich means\n\nfloat cosi = clamp(-1, 1, dot(I, N));\nfloat etai = 1, etat = ior\nvec3 n = N;\nif(cosi < 0) { cosi = -cosi; } else { swap(etai, etat); n = -N; }\nfloat eta = etai/etat;\nfloat k = 1 - eta * eta * (1 - cosi * cosi);\nreturn k < 0 ? 0 : eta * I + (eta * cosi - sqrt(k)) * n;\n\n*/\n\n//vec3 refract(\n\nvec3 castRefractionRay ( in vec3 rd, in vec3 pos, in vec3 nor, in float m ) {\n    vec3 npos = pos, nnor = nor;\n    vec3 ro = vec3(0.);\n    float nt = 0., nm = m;\n    bool suc = false;\n    \n    float ior = 1.;\n    \n    for ( int i = 0; i < 2; i++ ) {\n        vec2 cresf = castRay(npos-rd*2., rd);\n        Material nmat = ID2Material(cresf.y, vec3(0.), npos, nnor);\n        if(nmat.op == 1.0 || nmat.refl == 0.) {\n            suc = true;\n            break;\n        }\n        \n        vec3 I = normalize(rd);\n        vec3 N = nnor;\n        \n        float cosi = clamp(dot(I, N), -1., 1.);\n        float etai = 1., etat = nmat.refl;\n        \n        if(cosi < 0.) { cosi = -cosi; } else { swap(etai, etat); N = -nnor; }\n        \n        float eta = etai/etat;\n        /*\n        float k = 1. - eta * eta * (1. - cosi * cosi);\n        return k < 0. ? vec3(0.) : eta * I\n        */\n        \n        vec3 nrd = refract(normalize(rd), N, eta);\n        \n        /*\n        \n        vec3 N = nnor;\n        vec3 I = normalize(rd);\n        \n        \n        float nior = nmat.refr;\n        \n        float NdI = dot(N, I);\n        \n        if(NdI < 0.) {\n            NdI = -NdI;\n        } else {\n            N = -nnor;\n            swap(ior, nior);\n        }\n        \n        \n        float eta = ior/nior;\n        \n        \n        float t1 = dot(I, nnor);\n        \n        //float c1 = length(nor*I);\n        //float c1 = dot(nnor, I);\n        float c1 = cos(t1);\n        \n        float c2 = sqrt(1. - eta*eta*(1.-c1*c1));\n        \n        vec3 T = eta * I + (eta*c1 - c2)*nnor; */\n        \n        \n        //ro = npos, rd = nref;\n        vec2 cres = castRay(npos, nrd);\n        ro = npos, rd = nrd;\n        nt = cres.x;\n        nm = cres.y;\n        vec3 cpos = ro+nt*rd;\n        vec3 cnor = calcNormal(cpos);\n        vec3 cref = reflect(rd, cnor);\n        npos = cpos, ior = nmat.refr, nnor = cnor; \n    }\n    vec3 col = vec3(0.3, 0.5, 0.7);\n    col = renderRef ( ro, rd, npos, nnor, vec3(0.), nt, nm );\n    \n    \n    return col;\n    \n}\n\nvec3 render ( vec3 ro, vec3 rd ) {\n    \n    vec3 col = null_color; //default color\n    float gl = null_gloss; //default gloss\n    vec2 res = castRay(ro, rd); //cast ray, get stuff\n    \n    float t = res.x, m = res.y;\n    \n    if(m != -1.0) {\n        \n        //preset variables\n        vec3 pos = ro+t*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd, nor);\n        \n        //strengths\n        float sAmb = null_sAmb, sSpec = null_sSpec;\n        \n        //vec2 refres = castRay(pos, ref);\n        //float tref = refres.x, mref = refres.y;\n        vec3 colref = vec3(0.3, 0.5, 0.7);\n        colref = castReflectionRay(ref, pos, nor);\n        vec3 colrefr = vec3(0.3, 0.5, 0.7);\n        //colrefr = castRefractionRay(rd, pos, nor, m);\n        \n        /*if(mref != -1.0) {\n            vec3 posref = pos+tref*ref;\n            vec3 norref = calcNormal(posref);\n            vec3 refref = reflect(ref, norref);\n            if( mref == 1.1 ) {\n                colref = vec3(1.0, 1.0, 1.0);\n            }\n            \n            const int LIGHT_AMOUNT = 4;\n            Light[LIGHT_AMOUNT] lights = Light[LIGHT_AMOUNT] (\n                Light( vec3(1.0,0.5,0.0), vec3(0.0, 3.0, -6.0), 0.9),\n                Light( vec3(1.0,1.0,0.0), vec3(6.0, 3.0, 0.0), 0.7 ),\n                Light( vec3(0.0,0.5,1.0), vec3(0.0, 3.0, 6.0), 1. ),\n                Light( vec3(0.5,0.0,1.0), vec3(-6.0, 3.0, 0.0), 0.7 )\n            );\n\n            vec3 viewdir = normalize(pos - posref);\n\n            vec3 dcol = colref;\n            vec3 totalAmb = vec3(0.);\n            vec3 totalLigCol = vec3(0.);\n\n            //per-light rendering\n\n            for(int i = 0; i < LIGHT_AMOUNT; i++) {\n                Light cLight = lights[i];\n                vec3 ligcN = cLight.c*cLight.s, ligoN = cLight.o;\n                vec3 ligdirN = normalize(ligoN - posref);\n                vec3 inligrefN = reflect(-ligdirN, norref);\n\n                float dif = max(dot(norref, ligdirN), 0.);\n                float spec = 0.5*pow(max(dot(viewdir, inligrefN), 0.0), gl);\n\n                totalAmb += 0.1 *ligcN;\n                totalLigCol += (dif + spec) * ligcN;\n\n            }\n\n            totalLigCol += totalAmb / vec3(LIGHT_AMOUNT);\n\n            colref *= totalLigCol;\n        } */\n        \n        \n        \n        if(m == 1.1) {\n            col = vec3(1.0,1.0,1.0);\n            //col = mix(col, calcAlbedoReflectance(ro, rd)+col, 0.01); \n            gl = 8.;\n            sSpec = 0.25;\n            //sAmb = 0.2;\n        } else if(m == 1.2) {\n            col = pow(colref,vec3(1.0/2.2));\n            col = mix(col, \n                      mix(\n                          col, \n                          vec3(0.9),\n                          0.5\n                      ),\n                      clamp(\n                          texture(iChannel1, pos.zy/8./vec2(1.2+sin(pos.z*4.)/32.,1.1+cos(pos.y*4.)/32.)).r-0.3,\n                          0.,1.\n                      )\n                  );\n            sSpec = 2.0;\n            gl *= 4.;\n        } else if(m == 1.3) {\n            col = mix(colref, vec3(1.0), 0.9);\n            if(abs(0.5-mod(pos.x/2., 1.)) < 0.01) {\n                col = mix(col, vec3(texture(iChannel1, pos.xz).r), clamp(1.-abs(0.5-mod(pos.x/4., 1.))*20.,0.,0.1));\n            }\n            if(abs(0.5-mod(pos.z/2., 1.)) < 0.01) {\n                col = mix(col, vec3(texture(iChannel1, pos.xz).r), clamp(1.-abs(0.5-mod(pos.z/4., 1.))*20.,0.,0.1));\n            }\n        } else if(m == 1.4) {\n            col = mix(colrefr, colref, 0.00);\n            sSpec = 2.;\n            gl *= 2.;\n        } else if(m == 1.5) {\n            col = vec3(0.9, 0.0, 0.1);\n            sSpec = 0.2;\n            gl = 4.;\n        } else if(m == 1.6) {\n            col = vec3(1.0, 1.0, 1.0);\n            sSpec = 0.1;\n            gl = 128.;\n        }\n        \n        const int LIGHT_AMOUNT = 5;\n        Light[LIGHT_AMOUNT] lights = Light[LIGHT_AMOUNT] (\n            //Light( vec3(1.0,0.5,0.0), vec3(0.0, 3.0, -6.0), 0.9),\n            //Light( vec3(1.0,1.0,0.0), vec3(6.0, 3.0, 0.0), 0.7 ),\n            //Light( vec3(0.0,0.5,1.0), vec3(0.0, 3.0, 6.0), 1. ),\n            //Light( vec3(0.5,0.0,1.0), vec3(-6.0, 3.0, 0.0), 0.7 ),\n            Light( vec3(1.0,0.7,0.2), vec3(0.0, 5.0, 4.0), 1.),\n            Light( vec3(1.0,0.7,0.2), vec3(3.0, 5.0, 4.0), 1.),\n            Light( vec3(1.0,0.7,0.2), vec3(-3.0, 5.0, 4.0), 1.),\n            Light( vec3(0.8,0.9,1.), vec3(10.,10.,10.), 2.),\n            Light( vec3(0.7,0.9,1.), vec3(10.,10.,10.), 1.)\n        );\n        \n        vec3 viewdir = normalize(ro - pos);\n        \n        vec3 dcol = col;\n        vec3 totalAmb = vec3(0.);\n        vec3 totalLigCol = vec3(0.);\n        \n        //per-light rendering\n        \n        for(int i = 0; i < LIGHT_AMOUNT; i++) {\n            Light cLight = lights[i];\n            vec3 ligcN = cLight.c*cLight.s, ligoN = cLight.o;\n            vec3 ligdirN = normalize(ligoN - pos);\n            vec3 inligrefN = reflect(-ligdirN, nor);\n            \n            float ao = calcAO(pos, nor);\n            float dif = max(dot(nor, ligdirN), 0.) * calcSoftshadow(pos, ligdirN, 0.01, 0.3, 1) + ao/3.;\n            float spec = sSpec*pow(max(dot(viewdir, inligrefN), 0.0), gl);\n            \n            \n            float dist = length(pos - ligoN);\n            \n            totalAmb += sAmb *ligcN;\n            totalLigCol += (dif/dist + spec) * ligcN;\n            \n        }\n        //using wave constructive interference. (what happens when two light waves interact with each other.)\n        //hopefully this is coorect :)\n        totalLigCol += totalAmb / vec3(LIGHT_AMOUNT);\n        \n        col *= totalLigCol;\n        \n    }\n    \n    return clamp(col, vec3(0.0), vec3(1.0));\n    \n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 saturate ( vec3 col, float amp ) {\n    vec3 ds = vec3( col.r+col.g+col.b ) / 3.;\n    return mix( ds, col, amp );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Reposition origin\n    uv = -1.0+2.0*uv;\n    // Adjusting aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    // Get ray origin, ray direction\n    \n    vec3 ro = vec3( 1.5*cos(0.1*iTime + 6.0*mo.x), 1.0 + 2.0*mo.y,1.5*sin(0.1*iTime + 6.0*mo.x) );\n    \n    mat3 ca = setCamera( ro, vec3(0.0, 2.0, 0.), 0.01);\n    vec3 rd = ca*normalize(vec3(uv, 2.0)); //normalization is unneccessary...\n    \n    vec3 col = render(ro, rd);\n    \n    //col = pow(col, vec3(1.0/2.2));\n    //col *= sqrt(1.5-0.5*length(uv));\n    //col *= 0.5 + 0.5*16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y);\n    col = saturate(col, 1.309);\n    \n    vec2 bp = fragCoord.xy/iResolution.xy*2.-1.;\n    float vgn1 = pow(smoothstep(0.0,.3,(bp.x + 1.)*(bp.y + 1.)*(bp.x - 1.)*(bp.y - 1.)),.5);\n    float vgn2 = 1.-pow(dot(vec2(bp.x*.3, bp.y),bp),3.);\n    col *= mix(vgn1,vgn2,.4)*.5+0.5;\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}