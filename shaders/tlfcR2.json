{
    "Shader": {
        "info": {
            "date": "1592481787",
            "description": "Lots of different 'Newton's Cradles' - mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "tlfcR2",
            "likes": 12,
            "name": "Cradles of Newton",
            "published": 3,
            "tags": [
                "mechanics",
                "physics",
                "pendulum"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "// \"Cradles of Newton\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothMax (float a, float b, float r);\nvec3 HsvToRgb (vec3 c);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 Hashv3v2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltAx, qHit, fSize;\nvec2 gId, cellSz, csP, csS;\nfloat tCur, dstFar, cRad, szFac, pLen, sLen, bRad, pAng, kMin, kMax;\nint idObj;\nbool isOcc;\nconst float kLim = 4.;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid CellConf ()\n{\n  vec3 h;\n  float sAng;\n  h = Hashv3v2 (17.7 * gId + 1.1);\n  isOcc = (length (h) > 0.3);\n  szFac = min (1.2 + 0.7 * h.x, 1.6);\n  pAng = 0.2 * pi * sin (0.4 * 2. * pi * tCur / sqrt (szFac));\n  csP = sin (pAng + vec2 (0.5 * pi, 0.));\n  bRad = 0.3;\n  pLen = 1.2;\n  kMax = 1. + floor (kLim * h.y);\n  kMin = -1. + floor ((kMax + 1.) * h.z);\n  fSize = vec3 (1., pLen + bRad, (2. * kMax + 1.3) * bRad);\n  sAng = atan (fSize.x / (2. * pLen - bRad));\n  sLen = pLen / cos (sAng);\n  csS = sin (sAng + vec2 (0.5 * pi, pi));\n}\n\nfloat MechDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, fRad, sRad, sz;\n  dMin /= szFac;\n  p /= szFac;\n  fRad = 0.08;\n  sRad = 0.05;\n  for (float k = float (VAR_ZERO); k <= kLim; k ++) {\n    q = p;\n    q.y -= fSize.y + bRad - fRad + pLen;\n    if (k == 0.) {\n      if (kMin == 0.) q.yz = Rot2Cs (q.yz, csP);\n    } else {\n      sz = sign (q.z);\n      q.z = abs (q.z) - 2. * k * bRad;\n      if (k > kMin && sz * pAng > 0.) q.yz = Rot2Cs (q.yz, vec2 (csP.x, abs (csP.y)));\n    }\n    q.y -= - 2. * pLen;\n    d = PrSphDf (q, bRad);\n    DMINQ (2);\n    q.x = abs (q.x);\n    q.y -= bRad;\n    q.yx = Rot2Cs (q.yx, csS);\n    q.y -= sLen - bRad;\n    d = PrCylDf (q.zxy, sRad, sLen);\n    DMINQ (3);\n    if (k == kMax) break;\n  }\n  q = vec3 (abs (p.x) - fSize.x, p.y - 2. * fSize.y, p.z);\n  d = PrCapsDf (q, fRad, fSize.z);\n  DMINQ (4);\n  q = vec3 (p.x, p.y - 2. * fSize.y, abs (p.z) - fSize.z).yzx;\n  d = PrCapsDf (q, fRad, fSize.x);\n  DMINQ (5);\n  q = vec3 (abs (p.xz) - fSize.xz, p.y - fSize.y);\n  d = PrCylDf (q, fRad, fSize.y);\n  q.z -= - 0.97 * fSize.y;\n  d = min (d, PrCylDf (q, 3. * fRad, 0.03 * fSize.y));\n  DMINQ (5);\n  return dMin * szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, hc, r;\n  dMin = dstFar;\n  r = cRad - length (p.xz);\n  p.xz = Rot2D (p.xz, 2. * pi * cellSz.x * gId.x);\n  p.x += cRad + 3.;\n  p.y -= cellSz.y * gId.y;\n  q = p;\n  d = SmoothMax (r, - PrBoxDf (q, vec3 (4., 0.5 * cellSz.y - 0.5, 7.2)), 0.2);\n  DMINQ (1);\n  if (r < 0.01) {\n    if (isOcc) {\n      p.y -= - (0.5 * cellSz.y - 0.5);\n      dMin = MechDf (p, dMin);\n    }\n  } else dMin = min (dMin, r + 0.02);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float dHit, d;\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    p = ro + dHit * rd;\n    gId = vec2 ((floor (atan (p.z, - p.x) / (2. * pi * cellSz.x)) + 0.5),\n       floor (p.y / cellSz.y + 0.5));\n    if (gId != gIdP) {\n      gIdP = gId;\n      CellConf ();\n    }\n    d = ObjDf (p);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BaseShd (vec3 p)\n{\n  vec3 q;\n  float d, sz;\n  d = dstFar / szFac;\n  p.xz = Rot2D (p.xz, 2. * pi * cellSz.x * gId.x);\n  p.x += cRad + 3.;\n  p.y -= cellSz.y * (gId.y - 0.5) + 0.5;\n  p /= szFac;\n  for (float k = float (VAR_ZERO); k <= kLim; k ++) {\n    q = p;\n    q.y -= fSize.y + bRad;\n    if (k == 0.) {\n      if (kMin == 0.) q.yz = Rot2Cs (q.yz, csP);\n    } else {\n      sz = sign (q.z);\n      q.z = abs (q.z) - 2. * k * bRad;\n      if (k > kMin && sz * pAng > 0.) q.yz = Rot2Cs (q.yz, vec2 (csP.x, abs (csP.y)));\n    }\n    d = min (d, length (q.xz));\n    if (k == kMax) break;\n  }\n  return smoothstep (1., 1.2, d / bRad);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ld;\n  float dstObj, lw, nDotR;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      nDotR = - dot (vn, rd);\n      if (vn.y < -0.99 && length (ro.xz) > cRad + 1. && nDotR > 0.) {\n        col4 = vec4 (vec3 (0.8, 0.8, 0.6) * (0.2 + 0.8 * nDotR), -1.);\n      } else {\n        col4 = vec4 (0.6, 0.6, 0.7, 0.);\n        if (vn.y > 0.9) col4 *= 0.8 * (isOcc ? 0.6 + 0.4 * BaseShd (ro) : 1.);\n        else if (vn.y < -0.9) col4 *= 1.5;\n        vn = VaryNf (16. * ro, vn, 0.5);\n      }\n    } else if (idObj == 2) {\n      col4 = vec4 (HsvToRgb (vec3 (mod (17.11 * gId.x + 27.33 * gId.y, 1.), 0.8, 1.)), 0.3);\n    } else if (idObj == 3) {\n      col4 = vec4 (0.7, 0.7, 0.4, 0.1) * (0.9 + 0.1 * sin (16. * pi * qHit.y));\n    } else if (idObj == 4) {\n      col4 = mix (vec4 (0.7, 0.7, 0.4, 0.1), vec4 (0.7, 0.3, 0.2, 0.2) * (0.8 +\n         0.2 * sin (32. * pi * qHit.z)), step (0.05, abs (mod (qHit.z + bRad, 2. * bRad) - bRad)));\n    } else if (idObj == 5) {\n      col4 = vec4 (0.7, 0.3, 0.2, 0.2) * (0.8 + 0.2 * sin (32. * pi * qHit.z));\n    }\n    if (col4.a >= 0.) {\n      col = 0.2 * col4.rgb;\n      for (int k = 0; k < 2; k ++) {\n        if (k == 0) {\n          ld = ltAx;\n          lw = 0.1 + 0.9 * smoothstep (0.95, 0.98, - dot (ltAx, rd)); \n        } else {\n          ld = vec3 (0., 1., 0.);\n          lw = 1.; \n        }\n        col += lw * (0.4 * col4.rgb * max (dot (vn, ld), 0.) +\n           0.5 * col4.a * pow (max (dot (ld, reflect (rd, vn)), 0.), 32.));\n      }\n    } else col = col4.rgb;\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, tStep, t, fd;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  fd = floor (dateCur.w / 7200.);\n  tCur = mod (tCur, 36000.) + 30. * fd;\n  az = 0.;\n  el = -0.05 * pi;\n  tStep = 5.;\n  t = floor (tCur / tStep) + smoothstep (0.8, 1., mod (tCur / tStep, 1.));\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.8 * pi * mPtr.y;\n  }\n  zmFac = 4. + 5. * abs (az) / pi;\n  cellSz = vec2 (1./16., 8.);\n  cRad = 40.;\n  az += 2. * pi * cellSz.x * (t + 0.5) * sign (2. * mod (fd, 2.) - 1.);\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., - 0.7 * cRad);\n  ro.y += cellSz.y * (t + 0.2);\n  dstFar = 4. * cRad;\n  ltAx = vuMat * normalize (vec3 (0., 0., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec3 Hashv3v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39);\n  return fract (sin (dot (p, cHashVA2) + vec3 (0., cHashVA2.xy)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}