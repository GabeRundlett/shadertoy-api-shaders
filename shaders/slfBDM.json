{
    "Shader": {
        "info": {
            "date": "1650968059",
            "description": "yep",
            "flags": 0,
            "hasliked": 0,
            "id": "slfBDM",
            "likes": 0,
            "name": "raymarching funny balls 2000",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Heksi",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\n#define PI 3.14159265359\n#define minDist 0.00001\n#define maxMarch 800\n#define maxDist 50.\n\nstruct camera {\n    vec3 origin;\n    vec3 lookVec;\n    vec3 rightVec;\n    vec3 upVec;\n};\n\nstruct rayMarchHit {\n    bool hasHit;\n    int marchCount;\n    vec3 pos;\n    vec3 normal;\n    float distTraveled;\n    float closestDistance;\n};\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\nfloat distToSphere(vec3 c, float r, vec3 p) {\n    return length(c - p) - r;\n}\n\nfloat distToSphereMod(vec3 c, float r, vec3 p) {\n    return length(c - p) - r;\n}\n\nfloat distToGround(vec3 p, float h) {\n    //float r = p.y - h\n    //+ noise(p.xz * 19. + iTime) / 80.\n    //+ noise(p.xz * 5. + iTime) / 40.\n    //+ noise(p.xz + iTime) / 4.;\n\n    //float m = length(p.xz);\n    //return r + m*m/10. / (1. + m * 0.05);\n    \n    float r = distToSphere(vec3(0, -20, 0), 20., p) \n    + noise(p.xy * 2. + iTime) / 20.\n    + noise(p.yz * 2. + iTime) / 20.\n    + noise(p.xz * 2. + iTime) / 20.;\n    return r;\n}\n\nfloat sdf(vec3 p) {\n    const int objectCount = 2;\n    float dists[objectCount];\n    float smallestDistance = 1e10;\n    \n    dists[0] = distToSphereMod(\n        vec3(0, 0.5, 0),\n        1., \n        p\n    );\n\n    dists[1] = distToGround(p, -0.4);\n\n    for (int i = 0; i < objectCount; i++) {\n        smallestDistance = min(smallestDistance, dists[i]);\n    }\n\n    return smallestDistance;\n}\n\nvec3 getNormalAt(vec3 p) {\n    float d = sdf(p);\n    vec2 e = vec2(0.01, 0);\n    return normalize(d - vec3(\n        sdf(p-e.xyy),\n        sdf(p-e.yxy),\n        sdf(p-e.yyx)\n    ));\n}\n\nrayMarchHit rayMarch(vec3 origin, vec3 direction) {\n    rayMarchHit hit = rayMarchHit(\n        false,      // hasHit\n        0,          // marchCount\n        origin,     // pos\n        vec3(0),  // normal\n        0.,         // distTraveled\n        0.          // closestDistance \n    );\n\n    for (int i = 0; i < maxMarch; i++) {\n        float distToScene = sdf(hit.pos);\n\n        if (distToScene < hit.closestDistance) {\n            hit.closestDistance = distToScene;\n        }\n\n        hit.marchCount += 1;\n        hit.distTraveled += distToScene;\n        hit.pos = origin + direction * hit.distTraveled;\n        hit.normal = getNormalAt(hit.pos);\n\n        if (distToScene <= minDist) {\n            hit.hasHit = true;\n            break;\n        }\n        \n        if (hit.distTraveled >= maxDist) { break; }\n    }\n\n    return hit;\n}\n\nvec3 getSunCol(vec3 normal, vec3 lightDir) {\n    vec3 sunColor = vec3(0);\n    sunColor += max(smoothstep(0.99, 1., dot(normal, lightDir)) , 0.);  \n    sunColor += max(smoothstep(0.9, 1., dot(normal, lightDir)) , 0.) / 3.;\n    \n    return sunColor;\n}\n\nvec3 getSkyCol(vec3 normal, vec3 lightDir) {\n    // base color\n    vec3 skyCol = mix(\n        vec3(0.2, 0.2, 0.9),\n        vec3(0.4, 0.7, 1),\n        dot(normal, lightDir)\n    );\n    \n    // clouds\n    skyCol = mix(\n        skyCol,\n        mix(skyCol, vec3(1.), noise(normal.xz * 5.) * noise(normal.xz * 1.) * .2),\n        smoothstep(-1., 1., dot(normal, vec3(0, 1, 0)))\n    );\n    \n    return skyCol + getSunCol(normal, lightDir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= vec2(1, -1);\n\n    vec2 muv = iMouse.xy / iResolution.xy;\n\n    camera cam = camera(\n        vec3(-cos(muv.x * 10.) * 7., muv.y * 20. - 10., -sin(muv.x * 10.) * 7.),\n        vec3(0),\n        vec3(0),\n        vec3(0)\n    );\n\n    cam.lookVec = normalize(vec3(0, 0.5, 0)-cam.origin);\n    cam.rightVec = cross(cam.lookVec, vec3(0, 1, 0));\n    cam.upVec = cross(cam.lookVec, cam.rightVec);\n\n    vec3 lightDir = normalize(vec3(\n        0.5, 2, 1\n    ));\n    \n    vec3 rayDir = normalize(\n        cam.lookVec + \n        cam.rightVec*uv.x + \n        cam.upVec*uv.y\n    );\n    \n    vec3 col = getSkyCol(rayDir, lightDir);\n    \n    rayMarchHit marchHit = rayMarch(cam.origin, rayDir);\n    \n    if (marchHit.hasHit) {\n        vec3 reflected = rayDir - (2. * dot(rayDir, marchHit.normal) * marchHit.normal);\n        \n        col = vec3(0.5,0.5,0.5);\n        \n        // fresnel\n        col = mix(col, getSkyCol(reflected, lightDir), smoothstep(0.5, 1., 1.-dot(marchHit.normal, reflected)));\n        \n        // specular\n        col += getSunCol(reflected, lightDir);\n        \n        // diffuse\n        col *= max(dot(marchHit.normal, lightDir), 0.);\n        \n        // shadow\n        rayMarchHit shadow = rayMarch(marchHit.pos - rayDir/100., lightDir);\n        \n        if (shadow.hasHit) {\n            col *= 0.;\n        }\n        \n        // fog\n        col = mix(col, getSkyCol(rayDir, lightDir), smoothstep(0.6, 1., marchHit.distTraveled / maxDist));\n    }\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}