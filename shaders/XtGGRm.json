{
    "Shader": {
        "info": {
            "date": "1473716833",
            "description": "Test for https://www.youtube.com/watch?v=LKnqECcg6Gw, *in*correctly blurring and correcting for brightness. See https://www.shadertoy.com/view/XlGGRm for *correct* blurring.",
            "flags": 32,
            "hasliked": 0,
            "id": "XtGGRm",
            "likes": 0,
            "name": "sqrt blur",
            "published": 3,
            "tags": [
                "test",
                "blur",
                "filter",
                "square",
                "gaussianblur",
                "brightness",
                "sqrt",
                "squareroot"
            ],
            "usePreview": 0,
            "username": "realazthat",
            "viewed": 760
        },
        "renderpass": [
            {
                "code": "\n\n// change this number to change the size of the blur *window*\n// note, for gaussian, the real parameter is the *sigma*, which\n// changes the blur.\n// however, since we are brute force computing the blur,\n// we need a window for which to compute the blur in (as the gaussian\n// blur has weights even at an infinite distance); for different sigma,\n// an appropriate radius will get 99%+ accurate gaussian etc.\n// if the sigma is too large, and the radius is too small, it won't\n// be an accurate gaussian.\n#define GAUSSIANRADIUS 16\n\nhighp float PI = 3.14159265358979323846;\n\n\n\n\n\n\n\n\nvoid gaussianBlur( out vec4 fragColor, in vec2 fragCoord, in highp float sigma )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tint kernel_window_size = GAUSSIANRADIUS*2+1;\n    int samples = kernel_window_size*kernel_window_size;\n    \n    highp vec4 color = vec4(0);\n    \n    // precompute this, it is used a few times in the weighting formula below.\n    highp float sigma_square = sigma*sigma;\n    \n    // here we need to keep track of the weighted sum, because if you pick a\n    // radius that cuts off most of the gaussian function, then the weights\n    // will not add up to 1.0, and will dim the image (i.e it won't be a weighted average,\n    // because a weighted average assumes the weights all add up to 1). Therefore,\n    // we keep the weights' sum, and divide it out at the end.\n    highp float wsum = 0.0;\n    for (int ry = -GAUSSIANRADIUS; ry <= GAUSSIANRADIUS; ++ry)\n    for (int rx = -GAUSSIANRADIUS; rx <= GAUSSIANRADIUS; ++rx)\n    {\n        \n        // 2d gaussian function, see https://en.wikipedia.org/wiki/Gaussian_blur#Mathematics\n        // basically: this is a formula that produces a weight based on distance to the center pixel.\n        highp float w = (1.0 / (2.0*PI*sigma_square))* exp(-(float(rx*rx) + float(ry*ry)) / (2.0*sigma_square));\n        //highp float w = (1.0 / (2.0*PI*sigma_square)) * exp(-(dot(vec2(0,0), vec2(rx,ry)) / (2.0*sigma_square));\n        wsum += w;\n    \tcolor += texture(iChannel0, uv+vec2(rx,ry)/iResolution.xy)*w;\n    }\n    \n    fragColor = color/wsum;\n}\n\nvoid gaussianEdge( out vec4 fragColor, in vec2 fragCoord, in highp float sigma)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 original = texture(iChannel0, uv);\n    vec4 blurred = vec4(0);\n    gaussianBlur(blurred, fragCoord, sigma);\n    fragColor = original - blurred;\n}\n\n\n\n\n\nhighp float cutoff_sigma(highp float pixel_frequency, highp float pixel_cutoff_frequency) {\n    // see http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15463-f13/www/proj2/www/rlai/\n    //\n    // > There is a mathematical relation between the cut-off frequencies and the standard\n    // deviation of the Gaussian filter, namely that (stdev = k*(N/fc)); k is a constant,\n    // and N is the width of the image (we assume it is roughly square-shaped), and fc is\n    // the desired cut-off frequency.\n    //\n    // ME: what is a good k?\n    \n    highp float k = (1.0/sqrt(PI));\n    //highp float k = (1.0/PI);\n    //highp float k = 1.0;\n    highp float sigma = k*(pixel_frequency/pixel_cutoff_frequency);\n    \n    return sigma;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    // uncommment this line to just show texture\n    fragColor = texture(iChannel0, uv);\n    \n    \n    // play with these for the amount of the blur, see below for explanation and correct\n    // values.\n    highp float sigma = 10.0;\n    //highp float sigma = cutoff_sigma(1.0, 1.0/sqrt(2.0));\n    //highp float sigma = cutoff_sigma(1.0, 1.0/(2.0));\n\n    // uncomment this line to show gaussian blur (a low pass filter)\n    // play with sigma or different effects\n    // note if sigma exceeds some amount in relation to GAUSSIANBOXRADIUS, it will be innacurate\n    gaussianBlur(fragColor, fragCoord, sigma);\n    \n    // uncomment this line to show what gaussian blur removes (the high frequency data, aka edges)\n    // play with sigma or different effects\n    // note if sigma exceeds some amount in relation to GAUSSIANBOXRADIUS, it will be innacurate\n    // gaussianEdge(fragColor, fragCoord, sigma);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // red on the left, green on the right.\n    if (uv.x < 0.5) {\n\t    fragColor = vec4(1.0,0.0,0.0,1.0);\n    } else {\n\t    fragColor = vec4(0.0,1.0,0.0,1.0);\n        \n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}