{
    "Shader": {
        "info": {
            "date": "1591699690",
            "description": "wait for it",
            "flags": 0,
            "hasliked": 0,
            "id": "3llyzM",
            "likes": 1,
            "name": "Red Zeroes",
            "published": 3,
            "tags": [
                "sft"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "//Red Zeroes by eiffie\n#define time iTime\n#define rez iResolution.xy\n\nfloat segment(vec2 uv){//from Andre https://www.shadertoy.com/view/Xsy3zG\n uv = abs(uv);return (1.0-smoothstep(0.0,0.28,uv.x)) * (1.0-smoothstep(0.4-0.14,0.4+0.14,uv.y+uv.x));\n}\nfloat sevenSegment(vec2 uv,int num){\n uv=(uv-0.5)*vec2(1.5,2.2);\n float seg=0.0;if(num>=2 && num!=7 || num==-2)seg+=segment(uv.yx);\n if (num==0 || (uv.y<0.?((num==2)==(uv.x<0.) || num==6 || num==8):(uv.x>0.?(num!=5 && num!=6):(num>=4 && num!=7) )))seg += segment(abs(uv)-0.5); \n if (num>=0 && num!=1 && num!=4 && (num!=7 || uv.y>0.))seg += segment(vec2(abs(uv.y)-1.0,uv.x)); \n return seg;\n}\n//prints a \"num\" filling the \"rect\" with \"spaces\" # of digits including minus sign\nfloat formatFloat(vec2 uv, vec2 rect, float num, float spaces){\n uv/=rect;if(uv.x<0.0 || uv.y<0.0 || uv.x>1.0 || uv.y>1.0)return 0.0;\n uv.x*=float(spaces);\n float place=ceil(uv.x);\n uv.x=fract(uv.x);\n num *= pow(10.,place);//assumes num is 0-1\n num = mod(floor(num),10.0);\n return sevenSegment(uv,int(num));\n}\nvec2 cmul(vec2 a, vec2 b){return vec2(a.x*b.x-a.y*b.y,dot(a,b.yx));}\nfloat scale;\nfloat mndfk(vec2 dZ){\n  dZ*=scale;\n  vec2 dC=dZ,Z=vec2(1.,.5606);\n  float iters=200.+time*4.;\n  float n=0.;\n  for(float i=0.;i<400.;i+=1.){n=i;\n    dZ=2.*cmul(Z,dZ)+cmul(dZ,dZ)+dC;//sft math by K. I. Martin\n    if(dot(dZ,dZ)>4000.||i>=iters)break;\n  }\n  return((iters-n)+1.33*log(log(dot(dZ,dZ))))/iters;\n}\nvoid mainImage( out vec4 O, in vec2 U ) {\n  vec2 uv=(2.0*U-rez)/rez.x;\n  scale=0.25*exp(-time);\n  float a=-time*0.62+3.;\n  a=mndfk(uv+vec2(cos(a),sin(a))*0.5);\n  float d=formatFloat(U,vec2(rez.x,rez.y*.07),scale,32.);\n  O=vec4(d,a,a,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}