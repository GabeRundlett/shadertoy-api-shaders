{
    "Shader": {
        "info": {
            "date": "1634249164",
            "description": "Result of experimentation with organic patterns",
            "flags": 32,
            "hasliked": 0,
            "id": "fddXWs",
            "likes": 8,
            "name": "Taste of Noise 8",
            "published": 3,
            "tags": [
                "weird"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 419
        },
        "renderpass": [
            {
                "code": "// Fork of \"Taste of Noise 7\" by leon. https://shadertoy.com/view/NddSWs\n// 2021-10-14 00:25:36\n\n\n// taste of noise 8 by leon denise 2021/10/15\n// result of experimentation with organic patterns\n// using code from Inigo Quilez, David Hoskins and NuSan\n// thanks to Fabrice Neyret for code reviews\n// licensed under hippie love conspiracy\n\n// return color from pixel coordinate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, gl_FragCoord.xy/iResolution.xy);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\nfloat smoothing(float d1, float d2, float k) { return clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 ); }\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n#define repeat(p,r) (mod(p,r)-r/2.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// taste of noise 8 by leon denise 2021/10/15\n// result of experimentation with organic patterns\n// using code from Inigo Quilez, David Hoskins and NuSan\n// thanks to Fabrice Neyret for code reviews\n// licensed under hippie love conspiracy\n\n// global variable\nfloat material;\nfloat rng;\n\n// sdf\nfloat map (vec3 p)\n{\n    // time\n    float t = iTime*2.+rng*9.;\n    \n    /*float grid = 5.;\n    vec3 cell = floor(p/grid);\n    p = repeat(p,grid);*/\n    \n    float dp = length(p);\n    \n    // rotation parameter\n    vec3 angle = vec3(.1,-5.5,.1)+t*.1;//+dp*.5;//+cell;\n    \n    float size = sin(rng*3.14);\n    \n    //float wave = sin(t*.4+p.y);\n    //float w = wave*.5+.5;\n    \n    // kif\n    const int count = 4;\n    float a = 1.0;\n    float scene = 1000.;\n    float shape = 1000.;\n    for (int index = 0; index < count; ++index)\n    {\n        float wave = sin(t*.4+p.y+float(index)*.2);\n        // fold\n        p.xz = abs(p.xz)-(.6+wave*.2)*a;\n        \n        // rotate\n        p.xz *= rot(angle.y/a);\n        p.yz *= rot(angle.x/a);\n        p.yx *= rot(angle.z/a);\n        \n        // sphere\n        shape = length(p)-0.2*a*size;\n        \n        // material blending\n        material = mix(material, float(index), smoothing(shape, scene, 0.3*a));\n        \n        // add\n        scene = smin(scene, shape, (1.+wave*.2)*a);\n        \n        // falloff\n        a /= 2.;\n    }\n        \n    return scene;\n}\n\n// return color from pixel coordinate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // reset color\n    fragColor = vec4(0,0,0,1);\n    material = 0.0;\n    \n    // camera coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 eye = vec3(0,0,3.);\n    vec3 at = vec3(0,0,0);\n    vec3 z = normalize(at-eye);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = (cross(x, z));\n    vec3 ray = normalize(vec3(z * 1. + uv.x * x + uv.y * y));\n    vec3 pos = eye;\n    \n    // white noise\n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    rng = hash13(seed);\n    \n    // raymarch\n    const float steps = 30.0;\n    float index;\n    for (index = steps; index > 0.0; --index)\n    {\n        // volume estimation\n        float dist = map(pos);\n        if (dist < 0.001)\n        {            \n            break;\n        }\n        \n        // dithering\n        dist *= 0.5 + .1 * rng;\n        \n        // raymarch\n        pos += ray * dist;\n    }\n    \n    float shade = index/steps;\n\n    // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n    vec2 off=vec2(.001,0);\n    vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n\n    // Inigo Quilez color palette (https://iquilezles.org/articles/palettes)\n    vec3 tint = vec3(.5)+vec3(.5)*cos(vec3(1,2,3)+material*.2+length(pos)*1.5-1.);\n\n    // lighting\n    float ld = dot(reflect(ray, normal), vec3(0,1,0))*0.5+0.5;\n    vec3 light = vec3(0.537,0.733,0.243) * sqrt(ld);\n    ld = dot(reflect(ray, normal), -vec3(0,0,1))*0.5+0.5;\n    light += vec3(1) * pow(ld, 4.)*.5;\n\n    // pixel color\n    fragColor.rgb = (tint + light) * shade;\n\n    // temporal buffer\n    fragColor = max(fragColor, texture(iChannel0, fragCoord.xy/iResolution.xy) - 0.005);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}