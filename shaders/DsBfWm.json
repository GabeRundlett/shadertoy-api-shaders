{
    "Shader": {
        "info": {
            "date": "1689759241",
            "description": "Quasi-Snoopy in flight mode",
            "flags": 0,
            "hasliked": 0,
            "id": "DsBfWm",
            "likes": 18,
            "name": "Doggy Dreaming",
            "published": 3,
            "tags": [
                "peanuts",
                "snoopy",
                "beagle"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "// \"Doggy Dreaming\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  1   // optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 qHit, sunDir, qEye;\nvec2 csHead, csEar, szKen;\nfloat dstFar, tCur;\nint nFrame, idObj;\nconst int idBod = 1, idHead = 2, idEar = 3, idArm = 4, idLeg = 5, idTail = 6, idNos = 7, idJaw = 8,\n   idEye = 9, idCap = 10, idNeck = 11, idScarf = 12, idSeat = 13, idCush = 14, idKenWl = 15,\n   idKenRf = 16, idKenFl = 17;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qr, ePos;\n  float dMin, d, db;\n  dMin = dstFar;\n  p.y -= 5.5;\n  p.xz *= -1.;\n  ePos = vec3 (0.25, 0.85, 0.3);\n  q = p;\n  q.xz = Rot2Cs (q.xz, csHead);\n  qr = q;\n  q.y -= 0.7;\n  d = PrSphDf (q, 0.5);\n  d = max (d, - PrSphDf (vec3 (abs (q.x), q.y + 0.7, q.z) - ePos, 0.18));\n  q.yz = Rot2D (q.yz, -0.11 * pi);\n  q.z -= 0.6;\n  d = max (SmoothMin (d, PrSphDf (q, 0.35), 0.3), 0.06 - length (vec2 (q.y + 0.05,\n     max (0.1 - q.z, 0.))));\n  DMINQ (idHead);\n  q.y -= -0.05;\n  d = PrCylDf (q.xzy, 0.32, 0.05);\n  DMINQ (idJaw);\n  q.yz -= vec2 (0.22, 0.27);\n  d = PrSphDf (q, 0.1);\n  DMINQ (idNos);\n  q = qr;\n  q.y -= 0.7;\n  d = max (PrSphDf (q, 0.55), min (length (q.yz - vec2 (0.45, -0.25)) - 0.35,\n     min (q.z + 0.25, 0.4 - q.y)));\n  DMINQ (idCap);\n  q = qr;\n  q.x = abs (q.x);\n  qEye = q - ePos;\n  d = PrSphDf (qEye, 0.17);\n  DMINQ (idEye);\n  q = qr;\n  q.x = abs (q.x);\n  q -= vec3 (0.48, 0.7, -0.05);\n  d = PrCapsDf (q, 0.06, 0.12);\n  q.x -= 0.04;\n  q.xy = Rot2Cs (q.xy, csEar);\n  d = SmoothMin (d, SmoothMax (max (PrCaps2Df (q.zy, 0.15, 0.5), q.y),\n     abs (q.x) - 0.02, 0.03), 0.03);\n  DMINQ (idEar);\n  q = p;\n  q.yz -= vec2 (0.15, -0.1);\n  d = max (length (q.xz) - 0.15, abs (q.y) - 0.2);\n  DMINQ (idNeck);\n  q = p;\n  q.xy -= vec2 (0.1, 0.07) * CosSin (2. * pi * (q.z + tCur)) * smoothstep (0.3, 0.6, - q.z);\n  q.x = abs (q.x);\n  q -= vec3 (0.14, 0.15, -1.3);\n  d = 0.5 * PrBoxDf (q, vec3 (0.01, 0.04, 1.2));\n  DMINQ (idScarf);\n  q = p;\n  q.yz -= vec2 (-0.35, -0.05);\n  q.x *= 0.85;\n  d = PrSphDf (q, 0.45);\n  q.y -= -0.6;\n  d = SmoothMin (d, PrSphDf (q, 0.55), 0.3);\n  DMINQ (idBod);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, -0.3, 0.05);\n  q.xz = Rot2D (q.xz, 0.15 * pi);\n  q.yz = Rot2D (q.yz, -0.1 * pi);\n  d = PrSphDf (q, 0.11);\n  q.z -= 0.3;\n  d = SmoothMin (d, PrCapsDf (q, 0.1, 0.3), 0.05);\n  DMINQ (idArm);\n  q.yz -= vec2 (0.06, 0.34);\n  d = SmoothMax (PrCaps2Df (q.xy, 0.1, 0.05), abs (q.z) - 0.04, 0.04);\n  q.x = abs (q.x);\n  q.xy = Rot2D (q.xy - vec2 (0.05, 0.13), 0.1 * pi);\n  q.x = abs (q.x) - 0.025;\n  d = SmoothMin (d, PrSphDf (q, 0.04), 0.01);\n  DMINQ (idArm);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.4, -1.35, 0.2);\n  d = PrCapsDf (q, 0.13, 0.45);\n  DMINQ (idLeg);\n  q.yz -= vec2 (0.06, 0.52);\n  d = SmoothMax (PrCaps2Df (q.xy, 0.1, 0.06), abs (q.z) - 0.04, 0.04);\n  q.x = abs (q.x);\n  q.xy = Rot2D (q.xy - vec2 (0.05, 0.13), 0.1 * pi);\n  q.x = abs (q.x) - 0.025;\n  d = SmoothMin (d, PrSphDf (q, 0.04), 0.01);\n  DMINQ (idLeg);\n  q = p;\n  q.yz -= vec2 (-1.3, -0.6);\n  d = PrCapsDf (q, 0.07, 0.3);\n  DMINQ (idTail);\n  q = p;\n  q.yz -= vec2 (-1.55, 0.1);\n  d = PrRoundBoxDf (q, vec3 (0.6, 0.08, 0.7), 0.02);\n  DMINQ (idSeat);\n  q = p;\n  db = dot (vec2 (abs (q.x), q.y), vec2 (1.) / sqrt(2.)) + 1.1;\n  q.yz -= vec2 (-5.4, 0.5);\n  d = max (abs (PrBox2Df (q.xz, szKen)) - 0.07,\n     max (min (- PrCaps2Df (vec2 (q.x, q.y - 0.6), 0.65, 0.75), q.z),\n     max (db, abs (q.y - 2.1) - 2.)));\n  DMINQ (idKenWl);\n  d = max (abs (db) - 0.06, Maxv2 (abs (q.xz) - szKen - 0.3));\n  DMINQ (idKenRf);\n  d = PrBoxDf (q, vec3 (szKen + 0.3, 0.1).xzy);\n  DMINQ (idKenFl);\n  q.xz -= -0.4 * szKen;\n  d = PrRoundBoxDf (q, vec3 (0.6 * szKen, 0.1).xzy, 0.05);\n  DMINQ (idCush);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  idObj = idObjT;\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.3, 0.35, 0.7), vec3 (0.8, 0.8, 0.8),\n     clamp (2. * (Fbm2 (4. * rd.xz / rd.y + 0.1 * tCur) - 0.1) * rd.y, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, cb4;\n  vec3 col, vn;\n  vec2 u, vf;\n  float dstObj, sh, nDotL;\n  bool isLit;\n  csHead = CosSin (0.2 * pi * sin (0.3 * pi * tCur));\n  csEar = CosSin (-0.4 * pi * (1. + sin (0.5 * pi * tCur)));\n  szKen = vec2 (1.6, 2.2);\n  dstObj = ObjRay (ro, rd);\n  isLit = false;\n  vf = vec2 (0.);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    cb4 = vec4 (0.9, 0.9, 0.92, 0.05);\n    if (idObj <= idJaw) {\n      col4 = cb4;\n      if (idObj == idBod) {\n        if (qHit.z < 0.) col4 *= 0.5 + 0.5 * smoothstep (0., 0.02,\n           PrCaps2Df (vec2 (qHit.x, qHit.y - 0.4), 0.03, 0.5));\n      } else if (idObj == idHead) {\n        col4 = (length (qEye) < 0.21) ? vec4 (0.8, 0.6, 0.2, 0.2) :\n           cb4 * (0.5 + 0.5 * step (0.03, length (qHit.yz - vec2 (0.2, 0.05))));\n      } else if (idObj == idEar) {\n        col4 *= 0.93 + 0.07 * sin (32. * pi * qHit.z);\n      } else if (idObj == idTail) {\n        col4 *= 0.3 + 0.7 * step (-0.17, qHit.z);\n      } else if (idObj == idNos) {\n        col4 = vec4 (0.7, 0.5, 0.5, 0.);\n      } else if (idObj == idJaw) {\n        col4 = vec4 (0.9, 0.9, 0.8, 0.2) * (0.4 + 0.6 * min (step (0.2,\n           fract (32. * (atan (qHit.z, qHit.x) / (2. * pi) + 0.5))),\n           step (0.005, abs (qHit.y))));\n      }\n    } else if (idObj <= idCush){\n      if (idObj == idCap) {\n        col4 = vec4 (0.5, 0.2, 0., 0.) * (0.93 + 0.07 * sin (32. * pi * qHit.x));\n        vf = vec2 (8., 0.2);\n      } else if (idObj == idNeck || idObj == idScarf) {\n        col4 = mix (mix (vec4 (0., 1., 1., 0.2), vec4 (1., 0.3, 0.3, 0.2),\n           step (0.015, abs (qHit.y))), cb4, step (0.042, abs (qHit.y)));\n      } else if (idObj == idSeat) {\n        col4 = vec4 (0.6, 0.5, 0.1, 0.);\n      } else if (idObj == idCush) {\n        col4 = vec4 (0.7, 0.4, 0.4, 0.);\n      }\n    } else {\n      col4 = vec4 (0.8, 0.6, 0.1, 0.);\n      if (idObj == idKenWl) {\n        col4 *= (0.5 + 0.5 * step (0., PrBox2Df (qHit.xz, szKen))) *\n           (0.8 + 0.2 * smoothstep (0.08, 0.1, abs (fract (4. * qHit.y + 0.5) - 0.5)));\n        if (abs (qHit.z) > szKen.y) {\n          u = vec2 (qHit.x * sign (qHit.z - szKen.y), qHit.y - 2.75);\n          if (min (max (min (max (abs (PrCaps2Df ((u - vec2 (-0.1, 0.2)).yx, 0.2, 0.2)),\n             - PrBox2Df (u + vec2 (0.3, 0.), vec2 (0.3, 0.2))),\n             max (abs (PrCaps2Df ((u + vec2 (-0.1, 0.2)).yx, 0.2, 0.2)),\n             - PrBox2Df (u - vec2 (0.3, 0.), vec2 (0.3, 0.2)))), abs (u.x) - 0.3),\n             abs (length (u.xy) - 0.65) + 0.03) < 0.06) col4 = vec4 (0.2, 1., 1., 0.2);\n        }\n      } else if (idObj == idKenRf) {\n        col4 *= 0.8 + 0.2 * smoothstep (0.04, 0.05, abs (fract (2. * qHit.z + 0.5) - 0.5));\n        vf = vec2 (16., 0.2);\n      } else if (idObj == idKenFl) {\n        col4 *= 0.7;\n        vf = vec2 (4., 0.5);\n      }\n    }\n    if (idObj == idEye) {\n      rd = reflect (rd, vn);\n      col = mix (vec3 (0., 0.3, 0.3), ((rd.y > 0.) ? SkyCol (rd) : vec3 (0.1, 0.5, 0.1)), 0.7);\n    } else {\n      isLit = true;\n    }\n  } else if (rd.y < 0.) {\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    vn = vec3 (0., 1., 0.);\n    col4 = vec4 (0.2, 0.5, 0.2, 0.) * (0.7 + 0.3 * Fbm2 (ro.xz));\n    vf = vec2 (1., 0.5);\n    isLit = true;\n  } else {\n    col = SkyCol (rd);\n  }\n  if (isLit) {\n    if (vf.y > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    nDotL = max (dot (vn, sunDir), 0.);\n    if (idObj >= idBod || idObj <= idTail) nDotL *= sqrt (nDotL);\n    sh = (dstObj < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n    col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, sunDir), 0.) + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv;\n  float el, az, zmFac, asp, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.9 * pi * SmoothBump (0.25, 0.75, 0.22, fract (0.04 * tCur)) * sign (fract (0.02 * tCur) - 0.5);\n    el -= 0.05 * pi * cos (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, 0.1 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 3., -25.);\n  ro.y = max (ro.y, 0.05);\n  zmFac = 5.;\n  dstFar = 100.;\n  sunDir = vuMat * normalize (vec3 (0.5, 0.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi);\n    rd = vuMat * normalize (vec3 (uvv, zmFac));\n    col += (1. / naa) * ((length (uvv * vec2 (max (0.8, 1. / asp), 1.)) > 0.99) ? vec3 (0.82) :\n       ShowScene (ro, rd));\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (vec3 (p.xy, sign (p.z) * (max (0., abs (p.z) - h)))) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (vec2 (p.x, sign (p.y) * (max (0., abs (p.y) - h)))) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}