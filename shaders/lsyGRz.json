{
    "Shader": {
        "info": {
            "date": "1452936830",
            "description": "Particle attraction dynamics with forces calculated by finite differences.",
            "flags": 32,
            "hasliked": 0,
            "id": "lsyGRz",
            "likes": 6,
            "name": "Particle Attraction",
            "published": 3,
            "tags": [
                "dynamics",
                "particle"
            ],
            "usePreview": 0,
            "username": "cornusammonis",
            "viewed": 1005
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    fragColor = 0.5 + 0.5 * sin(50.0 * texture(iChannel1, uv)); \n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "#define speed 0.002\n#define accel 10.0\n\nfloat hash( vec2 p ) {\n    float h = dot(p,vec2(127.1,311.7)); \n    return fract(sin(h)*43758.5453123);\n}\n\nvec2 pm(vec2 uv) {\n    return mod(mod(uv, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 is = texture(iChannel0, uv);\n    vec2 pos = is.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    float im = texture(iChannel1, pm(pos)).x;\n    float im_n = texture(iChannel1, pm(pos+n)).x;\n    float im_e = texture(iChannel1, pm(pos+e)).x;\n    float im_s = texture(iChannel1, pm(pos+s)).x;\n    float im_w = texture(iChannel1, pm(pos+w)).x;\n    float im_nw = texture(iChannel1, pm(pos+nw)).x;\n    float im_sw = texture(iChannel1, pm(pos+sw)).x;\n    float im_ne = texture(iChannel1, pm(pos+ne)).x;\n    float im_se = texture(iChannel1, pm(pos+se)).x;\n\n    float dx = 2.0 * (im_e - im_w) + im_ne + im_se - im_sw - im_nw;\n    float dy = 2.0 * (im_n - im_s) + im_nw + im_ne - im_se - im_sw;\n    \n    vec2 vel = clamp(is.zw + accel * vec2(dx, dy), -1.0, 1.0);\n\n    // initialize with noise\n    if(iFrame<10) {\n        fragColor = vec4(hash(uv + 1.5), hash(uv + 2.1), hash(uv + 3.5) - 0.5, hash(uv + 4.1) - 0.5);\n    } else {\n        fragColor = vec4(pm(pos + speed * vel), vel);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define NUM_PARTICLES 200\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 stepX = vec2(1.0 / iResolution.x, 0.0);\n    vec2 halfStep = vec2(0.5 / iResolution.x, 0.5 / iResolution.x);\n    \n    float scale = 0.3;\n    float accum = 0.0;\n    \n    vec2 c = fragCoord.xy;\n    vec2 r = iResolution.xy;\n    vec2 r_n = vec2(0.0, iResolution.y);\n    vec2 r_e = vec2(iResolution.x, 0.0);\n\n    for (int i = 0; i < NUM_PARTICLES; i++) {\n        vec2 pos = r * texture(iChannel0, stepX * float(i) + halfStep).xy;\n        \n        float d = distance(c, pos);\n        float d_n = distance(c + r_n, pos);\n        float d_e = distance(c + r_e, pos);\n        float d_s = distance(c - r_n, pos);\n        float d_w = distance(c - r_e, pos);\n        float minWrap = min(min(d_n, d_s), min(d_e, d_w));\n        float minDistance = min(minWrap, d);\n        accum += scale / minDistance;\n    }\n    fragColor = clamp(vec4(accum), 0.0, 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}