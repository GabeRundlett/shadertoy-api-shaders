{
    "Shader": {
        "info": {
            "date": "1644085952",
            "description": "reproducing https://twitter.com/sjpalmer1994/status/1407000529750876163",
            "flags": 0,
            "hasliked": 0,
            "id": "7sScWK",
            "likes": 24,
            "name": "tri-Sierpinski triangle zoom",
            "published": 3,
            "tags": [
                "sierpinski",
                "short",
                "reproduction",
                "sierpinsky"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    return length(p - b * h);                         // dist to segment\n}\n\nfloat t, T;\n\nfloat S( vec2 U ) {                                   // === Sierpinski triangle\n     float O = 0., l, s = R.y/T;\n     U *= T;\n     for (int i=int(log2(R.y))-1; i>=0; i--, s/=2.) { // fractal loop\n         l = min( line(U,vec2(0,0),vec2(1,0)),        \n                  line(U,vec2(0,0),vec2(.5,.87)) );   // triangle\n        l = min(l,line(U,vec2(1,0),vec2(.5,.87)) );\n        O = max(O, smoothstep(1.5,0.,l*s ) * (i>0 ? 1. : t ) ); // fade last\n        U *= 2.;                                      // fractal recursion: 3 branches\n        if (U.y > .86) U.x-=.5, U.y-=.87;\n        else if (U.x > 1.) U.x--;   \n    }  \n    return O;\n}\n\nvoid mainImage(out vec4 O, vec2 u) {                  // ==========================\n     vec2  U = ( u - .5*R ) /R.y + vec2(.12,.3);\n           t = fract(.3*iTime),\n           T = exp2(-t);                              // zoom factor\n\n    O = vec4( S(U),                                   // draw the 3 triangles\n              S(U+vec2(.755,.43)+ (1./T-1.)*vec2(.5,.87) ), \n              S(U+vec2(.748 +1./T-1.,-.44) ),  1 );\n    O = mix( O, vec4(O.r+O.g+O.b), .5);               // desaturate\n    O = sqrt(O);\n} ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}