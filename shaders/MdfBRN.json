{
    "Shader": {
        "info": {
            "date": "1495039980",
            "description": "Another pattern. I realize the code is pretty inefficient and would appreciate any tips to refactor.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdfBRN",
            "likes": 0,
            "name": "Circle Design 2",
            "published": 3,
            "tags": [
                "pattern"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 u = (g+g-iResolution.xy)/iResolution.y;\n    u = fract(u) - .5;\n       vec2 un = u, us = u, ue = u, uw = u;\n    \n    float r = .7, d = step(length(u),r);\n    for (int i = 0; i < 10; i++)\n    {\n        r *= .4 + .1 * sin(float(i) + iTime);\n        \n        un += vec2(0, r);\n        us -= vec2(0, r);\n        ue -= vec2(r, 0);\n        uw += vec2(r, 0);\n        \n        vec2 en=ue, es=ue, ew=ue, ee=ue,\n             nn=un, ns=un, nw=un, ne=un,\n             wn=uw, ws=uw, ww=uw, we=uw,\n             sn=us, ss=us, sw=us, se=us;\n        r *= 1.5;\n        en += vec2(0, r);\n        es -= vec2(0, r);\n        ee -= vec2(r, 0);\n        ew += vec2(r, 0);\n        \n        wn += vec2(0, r);\n        ws -= vec2(0, r);\n        we -= vec2(r, 0);\n        ww += vec2(r, 0);\n        \n        sn += vec2(0, r);\n        ss -= vec2(0, r);\n        se -= vec2(r, 0);\n        sw += vec2(r, 0);\n        \n        nn += vec2(0, r);\n        ns -= vec2(0, r);\n        ne -= vec2(r, 0);\n        nw += vec2(r, 0);\n        \n        if (mod(float(i), 2.) == 0.)\n        {\n        \td -= step(dot(en,en), r*r);\n            d -= step(dot(es,es), r*r);\n            d -= step(dot(ee, ee),r*r);\n            d -= step(dot(ew, ew),r*r);\n            \n            d -= step(dot(nn,nn), r*r);\n            d -= step(dot(ns,ns), r*r);\n            d -= step(dot(ne, ne),r*r);\n            d -= step(dot(nw, nw),r*r);\n            \n            d -= step(dot(wn,wn), r*r);\n            d -= step(dot(ws,ws), r*r);\n            d -= step(dot(we, we),r*r);\n            d -= step(dot(ww, ww),r*r);\n            \n            d -= step(dot(sn,sn), r*r);\n            d -= step(dot(ss,ss), r*r);\n            d -= step(dot(se, se),r*r);\n            d -= step(dot(sw, sw),r*r);\n        }\n        else\n        {\n        \td += step(dot(en,en), r*r);\n            d += step(dot(es,es), r*r);\n            d += step(dot(ee, ee),r*r);\n            d += step(dot(ew, ew),r*r);\n            \n            d += step(dot(nn,nn), r*r);\n            d += step(dot(ns,ns), r*r);\n            d += step(dot(ne, ne),r*r);\n            d += step(dot(nw, nw),r*r);\n            \n            d += step(dot(wn,wn), r*r);\n            d += step(dot(ws,ws), r*r);\n            d += step(dot(we, we),r*r);\n            d += step(dot(ww, ww),r*r);\n            \n            d += step(dot(sn,sn), r*r);\n            d += step(dot(ss,ss), r*r);\n            d += step(dot(se, se),r*r);\n            d += step(dot(sw, sw),r*r);\n        }\n        \n    }\n\tf = vec4(d);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}