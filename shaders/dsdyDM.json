{
    "Shader": {
        "info": {
            "date": "1695146279",
            "description": "a red planet with ring",
            "flags": 0,
            "hasliked": 0,
            "id": "dsdyDM",
            "likes": 2,
            "name": "Red planet with ring revised",
            "published": 3,
            "tags": [
                "space",
                "planet",
                "ring"
            ],
            "usePreview": 0,
            "username": "Raukie",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Calculate the center of the screen\n    vec2 center = vec2(0.5,0.5);\n    \n    // Calculate the radius of the circle (half the screen height)\n     float radius = 0.3f;\n\n    // Calculate the vector from the current pixel to the center\n    vec2 toCenter = (fragCoord.xy / iResolution.xy - center) * vec2(iResolution.x / iResolution.y, 1.0);\n\n    // Calculate the distance from the current pixel to the center\n    float aspect =  min(iResolution.x / iResolution.y, 1.0);\n    float distance = length(toCenter) * aspect;\n\n    // Check if the pixel is inside the circle\n   \n    float depth = 1.0 - (distance / radius);\n\n    float a = pow(depth, 0.3);\n    float depthMin = clamp(a, 0.0, 1.0);\n    //lighting outside of the sphere\n    float b = depthMin + pow(min(depth, 0.0),1.0);\n    \n    //ring around the planet equetor\n    float distanceY = iResolution.y / 2.0 - fragCoord.y * aspect;\n    float distanceX = abs(iResolution.x / 2.0 - fragCoord.x) * aspect;\n    float depthX = 1.3 - (distanceX/(iResolution.x*0.5f));\n    float r = pow(clamp(depthX, 0.0, 1.0),0.9);\n    float t = 1.0;\n    float blue = 0.0;\n    if(distanceY > 0.0 || depth < 0.01){\n         float depthRing = 1.0f - abs(distanceY * t) / (iResolution.y * (r));\n        float c = pow(depthRing, 2.0);\n        float noiseRing = texture(iChannel3, (fragCoord.xy+sign(distanceY)*vec2((iTime*10.0), iTime*2.0))*(0.0072)).x*1.0;\n        c+=noiseRing*pow(c,10.0);\n        c = clamp(c, 0.0, 1.0);\n        c -= (1.0*0.01 * pow((iResolution.y / 2.0 / abs(distanceY)), 0.2));\n        blue = c;\n    }\n    float noise = texture(iChannel3, (fragCoord.xy+vec2(iTime*10.0, 0.0))*0.01).x*0.1;\n    b += noise;\n    blue = clamp(blue, 0.0, 1.0);\n    fragColor = vec4(b-blue*pow(blue,50.0), 0.0, blue, 1.0); \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}