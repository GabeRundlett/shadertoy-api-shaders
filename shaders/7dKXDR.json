{
    "Shader": {
        "info": {
            "date": "1634499178",
            "description": "you should play vrchat, it's a good game",
            "flags": 0,
            "hasliked": 0,
            "id": "7dKXDR",
            "likes": 3,
            "name": "newton memes",
            "published": 3,
            "tags": [
                "newton"
            ],
            "usePreview": 0,
            "username": "pema99",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// operations on complex numbers\nvec2 cmul(vec2 a, vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 conjugate(vec2 a)\n{\n    return vec2(a.x, -a.y);\n}\n\nvec2 cdiv(vec2 a, vec2 b)\n{\n    return cmul(a, conjugate(b)) / (b.x * b.x + b.y * b.y);\n}\n\nvec2 cpow(vec2 a, int e)\n{\n    vec2 res = a;\n    for (int i = 1; i < e; i++)\n    {\n        res = cmul(res, a);\n    }\n    return res;\n}\n\n// 4th degree polynomial with no constant term\nvec2 f(vec2 a, vec2 r[4])\n{\n    vec2 res = vec2(0.);\n    for (int i = 0; i < 4; i++)\n    {\n        res += cpow(cmul(r[i], a), 4-i);\n    }\n    return res;\n}\n\n// derivative\nvec2 df(vec2 a, vec2 r[4])\n{\n    vec2 res = vec2(0.);\n    for (int i = 0; i < 4; i++)\n    {\n        res += float(4-i) * cpow(cmul(r[i], a), 4-i-1);\n    }\n    return res;\n}\n\n// newton-raphson\nvec2 newton(vec2 guess, vec2 r[4])\n{\n    for (int i = 0; i < 30; i++)\n    {\n        guess = guess - cdiv(f(guess, r), df(guess, r));\n    }\n    return guess;\n}\n\nvec3 hs(vec3 Color, float Shift)\n{\n    vec3 P = vec3(0.55735, 0.55735, 0.55735)*dot(vec3(0.55735, 0.55735, 0.55735),Color);\n    vec3 U = Color-P;\n    vec3 V = cross(vec3(0.55735, 0.55735, 0.55735),U);\n    Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n    return Color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*((fragCoord/iResolution.xy)-0.5);\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 r[4];\n    for (int i = 0; i < 4; i++)\n    {\n        r[i] = vec2(cos(float(i)*6.28*0.25 +3.14*0.5), sin(float(i)*6.28*0.25 +3.14*0.5));\n    }\n    r[0].x = sin(iTime)*0.7;\n    r[2].x = sin(-iTime)*0.7;\n    r[1] += vec2(cos(iTime*0.5), sin(iTime*0.5))*0.2;\n    r[3] -= vec2(cos(iTime*0.5), sin(iTime*0.5))*0.2;\n    vec2 guess = newton(uv, r);\n    \n    float minDist = distance(guess, r[0]);\n    vec2 minNum = r[0];\n    for (int i = 1; i < 4; i++)\n    {\n        float dist = distance(guess, r[i]);\n        if (dist < minDist)\n        {\n            minNum = r[i];\n            minDist = dist;\n        }\n    }\n\n    fragColor = vec4(hs(hs(vec3(1., 0., 0.), log(abs(guess.x))/5.), log(abs(guess.y))/5.), 1.);\n    \n    // Debug\n    /*for (int i = 0; i < 4; i++)\n    {\n        if (distance(r[i], uv) < 0.05)\n        {\n            fragColor = vec4(0.);\n        }\n    }*/\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}