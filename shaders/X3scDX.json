{
    "Shader": {
        "info": {
            "date": "1726735159",
            "description": " flower",
            "flags": 0,
            "hasliked": 0,
            "id": "X3scDX",
            "likes": 1,
            "name": "flower of hexagon",
            "published": 3,
            "tags": [
                "flower",
                "hexagon"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 43
        },
        "renderpass": [
            {
                "code": "\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat circle(ivec2 t, vec2 q)\n{\n    vec3 r = (hash32(vec2(t)*13.456+cos(iTime*0.001))*0.5+0.5);\n    return 1.0-smoothstep(-0.01,+0.01,length(q-r.xy)-r.z);\n}\n\nfloat fuzzy_xor(float a, float b)\n{\n    return max(min(a,b),1.0-max(a,b));\n}\nfloat HexDist(vec2 p){\n    p = abs(p);\n    float c = dot(p, normalize(vec2(1, 1.73)));\n    c= max(c,p.x);\n    return c;\n}\n\nvec4 HexCoord(vec2 uv){\n    vec2 r = vec2(1, 1.73);\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n    \n    vec2 gv;\n    if(length(a) < length(b))\n        gv = a;\n    else \n        gv = b;\n        \n    \n    float x = atan(gv.x, gv.y);\n    float y = 0.5 - HexDist(gv);\n    vec2 id = uv - gv;\n    return vec4(x, y, id.x, id.y);\n}\n\nfloat pattern(vec2 uv, float t){\n   float speed = 0.5;\n   return sin(uv.x * uv.x + uv.y * uv.y + t * speed);\n}\nfloat tile_env(ivec2 t, vec2 q)\n{\n    float d = 0.0;\n    for(int y = -1; y <= +1; y++)\n        for(int x = -1; x <= +1; x++)\n            d = fuzzy_xor(d,circle(t+ivec2(x,y), q-vec2(x,y)));\n\n    return d;\n}\n\nfloat random_overlapping_circles_xored(vec2 p, float n)\n{\n    ivec2 t = ivec2(floor(p*n));\n    vec2 q = fract(p*n);\n\n    return tile_env(t, q);\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n        vec2 uv = (I - 0.5 * iResolution.xy)/iResolution.y;\n    I = .5 + (I - R / 2.) / R.y;\n vec4 hc = HexCoord(uv*3.);\n    o = vec4(0);\n\n    {\n        o = vec4(I.xy,0.0,1.0);\n\n        o = vec4(vec3(random_overlapping_circles_xored(hc.xy, 5.0))*vec3(0.,0.,2.),1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}