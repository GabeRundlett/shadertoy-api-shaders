{
    "Shader": {
        "info": {
            "date": "1564854578",
            "description": "Used a 2d buffer split into segments and interpolated between in 3d space\nsuggestions welcome",
            "flags": 32,
            "hasliked": 0,
            "id": "ttjSzR",
            "likes": 9,
            "name": "volumetric fire using buffer",
            "published": 3,
            "tags": [
                "fire",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 816
        },
        "renderpass": [
            {
                "code": "float sq (float x) { return x*x; }\nvec2 getFrame (float z) {\n    z = floor(z);\n    return vec2(\n        mod(z, fs.x)/fs.x,\n        floor(z/fs.x)/fs.y\n    );\n}\nfloat getDensity (vec3 p) {\n    if(p.y>1.||p.y<0.) return 0.;\n    if(p.x>1.||p.x<0.) return 0.;\n    if(p.z<0.||p.z>1.) return 0.;\n    float c1 = texture(iChannel0, p.xy/fs+getFrame(p.z*fs.x*fs.y)).r;\n    float c2 = texture(iChannel0, p.xy/fs+getFrame(mod(p.z*fs.x*fs.y+1., fs.x*fs.y))).r;\n    return c1+(c2-c1)*fract(p.z*fs.x*fs.y);\n    //return c1;\n}\nfloat sgetDensity (vec3 p) {\n    return 1.-getDensity(p+0.5)*20.;\n}\nvec2 rotate2D (vec2 p, float angle){\n    return vec2(p.x*cos(angle)-p.y*sin(angle), p.y*cos(angle)+p.x*sin(angle));\n}\nvec4 trace (vec3 o, vec3 r) {\n    vec3 p = o;\n    float t = 0.;\n    float b = 0.;\n    for(int i = 0; i<int(STEPS); i++) {\n        vec3 np = p+0.5;\n        float rad = 0.5;\n        np.y -= sqrt(sq(rad)-sq(np.x-0.5)-sq(np.z-0.5));\n        //np.x -= (-rad+sqrt(sq(rad)-sq(np.z-0.5)))*sign(np.x-0.5);\n        float inb = max(getDensity(np), 0.);\n        b += (inb);\n        p += r*DIST/STEPS*(pow(1.001, -sq(inb*600.))+1.);\n    }\n    return vec4(p, b);\n}\nvec4 ttrace (vec3 o, vec3 r) {\n    vec3 p = o;\n    float t = 0.;\n    for(int i = 0; i<int(STEPS); i++) {\n        p = o+r*t;\n        //t += 1./(getDensity(p+0.5)+1.);\n        t+=sgetDensity(p)*0.01;\n    }\n    return vec4(p, t);\n}\nconst float E = 0.0001;\nvec3 estimateNormal (vec3 p) {\n    return normalize(vec3(\n        sgetDensity(vec3(p.x+E, p.y, p.z))-sgetDensity(vec3(p.x-E, p.y, p.z)),\n        sgetDensity(vec3(p.x, p.y+E, p.z))-sgetDensity(vec3(p.x, p.y-E, p.z)),\n        sgetDensity(vec3(p.x, p.y, p.z+E))-sgetDensity(vec3(p.x, p.y, p.z-E))\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse-=0.5;\n    float aspect = iResolution.y/iResolution.x;\n    uv.x/=aspect;\n    mouse.x/=aspect;\n    vec3 cam = vec3(0., 0., -1.);\n    vec3 ray = normalize(vec3(uv.xy*1.3, 1.));\n    \n    vec3 rot = vec3(mouse.y*6., -mouse.x*3., 0.);\n    \n    cam.zy = rotate2D(cam.zy, rot.x);\n    ray.zy = rotate2D(ray.zy, rot.x);\n    \n    cam.xz = rotate2D(cam.xz, rot.y);\n    ray.xz = rotate2D(ray.xz, rot.y);\n   \t\n    \n    vec4 t = trace(cam, ray);\n    vec3 end = t.xyz;\n    float b = clamp(t.w*0.012, 0., 1.);\n    float gl = pow(b, 7.);\n    vec3 fc = vec3(\n        b*b*3.-gl*0.8,\n        b-gl*0.1, \n        2.*sqrt(b)*(cos(b*3.14159)+1.)*0.2+\n        gl*0.9\n    );\n    vec3 norm = estimateNormal(end);\n    float diffuse = max(dot(norm, -ray), 0.);\n    vec3 col = vec3(1.)*fc;\n    //col = norm;\n    //float fog = 1.0 / (1.0 + b*b*0.01);\n    //col *= fog;\n    //col = vec3(getDensity(vec3((uv+0.5), mod(iTime, fs.x*fs.y))));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fs vec2(5., 5.)\n#define STEPS 300.\n#define DIST 2.0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ppf = iResolution.xy/fs;//pixels per frame\n    vec2 res = vec2(1.)/fs;\n    float z = floor(uv.x*fs.x)+fs.x*floor(uv.y*fs.y);\n    vec2 ouv = uv;\n    uv = mod(uv, res);\n    uv/=res;\n    ivec2 niuv = ivec2(uv*ppf);\n    ivec2 iuv = ivec2(fragCoord);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    float speed = 4.;\n    vec3 past = texelFetch(iChannel0, ivec2(iuv.x, iuv.y-int(speed)), 0).rgb;\n    vec3 pu = texelFetch(iChannel0, ivec2(iuv.x, iuv.y+1), 0).rgb;\n    vec3 pd = texelFetch(iChannel0, ivec2(iuv.x, iuv.y-1), 0).rgb;\n    vec3 pl = texelFetch(iChannel0, ivec2(iuv.x-1, iuv.y), 0).rgb;\n    vec3 pr = texelFetch(iChannel0, ivec2(iuv.x+1, iuv.y), 0).rgb;\n    \n    \n    vec3 avg = (pu+pd+pl+pr+past*2.)/6.;\n    float tz = z/fs.x/fs.y*0.1;\n    vec2 tuv = ouv;\n    float density = 2.0;\n    float cooldown = texture(iChannel1, tz+vec2(tuv.x, tuv.y-iTime/60.*speed)*density).r;\n    float rand = texture(iChannel1, tz+avg.xy/res*density).r;\n    float kill = texture(iChannel2, (avg.xy+iTime/60.*speed)*density).r;\n    vec3 col = avg-max(cooldown*rand*rand*0.4, 0.001);\n    //col *= 0.98+(kill-0.98)*0.3;\n    vec3 idcol = vec3(uv, tz);\n    if (iTime<1.) col = vec3(0.);\n    //if (length(mouse-uv)<0.1) col = vec3(1.);\n    if (niuv.y<int(speed)+1) col = vec3(1.);\n    if (niuv.y<1) col = vec3(0.);\n    if (niuv.x<1) col = vec3(0.);\n    //col = texture(iChannel2, ouv).rgb;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}