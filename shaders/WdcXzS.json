{
    "Shader": {
        "info": {
            "date": "1572219968",
            "description": "Vorofluid - Playing with voronoi particle tracking #4\n[url]JAVASCRIPT: H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<8;i++)E.P.apply(this,A);};if(!H)close();[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "WdcXzS",
            "likes": 20,
            "name": "Voronoi vortex particle fluid",
            "published": 3,
            "tags": [
                "fast",
                "particles"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1363
        },
        "renderpass": [
            {
                "code": "vec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\nvec4 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   vec2 velocity_source = particle_param.z*\n       vec2( (B(pos+vec2(0,1))-B(pos-vec2(0,1))).z,\n             (B(pos-vec2(1,0))-B(pos+vec2(1,0))).z );\n   return vec4(velocity_source,1.,particle_param.w)*gauss(pos - particle_param.xy, radius*100.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n   vec4 density = pdensity(pos);\n   vec2 velocity = 4.*SAMPLE(iChannel1, pos, size).xy;\n   float vorticity = SAMPLE(iChannel1, pos, size).z;\n   float dens = SAMPLE(iChannel1, pos, size).w;\n   fragColor = vec4(0.25*abs(velocity.xyy) + 1.8*vec3(1.2,1.,0.9)*sin(5.*vec3(0.1,0.12,0.3)*density.w),1.0);\n   //fragColor = vec4(SAMPLE(iChannel2, pos, size).xyz  + 0.8*vec3(0.4,0.6,0.9)*vorticity,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//voronoi particle tracking \n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = SAMPLE(iChannel0, pos+dx, size);\n    vec2 sizep = size - vec2(1,1);\n    vec2 rpos1 = mod(pos-Unb.xy+size*0.5,size) - size*0.5;\n    vec2 rpos2 = mod(pos-U.xy+size*0.5,size) - size*0.5;\n    //check if the stored neighbouring particle is closer to this position \n    if(length(rpos1) < length(rpos2))\n    {\n        U = Unb; //copy the particle info\n        U.xy = mod(U.xy,size); //limit the position to the texture\n    }\n}\n\nvec4 B(vec2 pos)\n{\n   return 5.*SAMPLE(iChannel1, pos, size);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    U = SAMPLE(iChannel0, pos, size);\n    \n    //check neighbours \n    Check(U, pos, vec2(-1,0));\n    Check(U, pos, vec2(1,0));\n    Check(U, pos, vec2(0,-1));\n    Check(U, pos, vec2(0,1));\n    Check(U, pos, vec2(-1,-1));\n    Check(U, pos, vec2(1,1));\n    Check(U, pos, vec2(1,-1));\n    Check(U, pos, vec2(1,-1));\n    \n    //small divergence\n    vec2 ppos = U.xy;\n    \n    vec2 velocity = B(ppos).xy + U.w*vec2(0.,0.001);\n  \n    //dont make the particles be too close\n    vec2 repulsion = vec2(B(ppos+vec2(1,0)).w - B(ppos+vec2(-1,0)).w, B(ppos+vec2(0,1)).w - B(ppos+vec2(0,-1)).w);\n    //mouse interaction\n    if(iMouse.z>0.)\n        repulsion += 0.05*(ppos-iMouse.xy)*gauss(ppos-iMouse.xy, 50.);\n    //update the particle\n    U.xy -= dt*(velocity + 3.*repulsion);\n    \n    \n    if(iFrame < 1)\n    {\n       if(mod(pos.x,1.)<1. && mod(pos.y,1.)<1. && abs(pos-size*0.5).x < vec2(size*0.5).x && abs(pos-size*0.5).y < vec2(size*0.5).y)\n       {\n           U = vec4(pos,(3./(radius*radius))*tan(0.63*3.141*sin(2.*(SAMPLE(iChannel2, pos, size).x-0.5))),SAMPLE(iChannel2, pos, size).x);\n       }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define size iResolution.xy\n#define SAMPLE(a, p, s) texture((a), (p)/s)\n\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\n   \n#define PI 3.14159265\n#define dt 2.5\n\nconst float radius = 0.7;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//solve the poisson equation\n\n\nvec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\nvec4 RS(vec4 a)\n{\n    return tanh(5.*a);\n}\n\nvec4 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   vec2 velocity_source = particle_param.z*RS(B(pos)).z*\n       vec2( (B(pos+vec2(0,1))-B(pos-vec2(0,1))).z,\n             (B(pos-vec2(1,0))-B(pos+vec2(1,0))).z )/(B(pos).z+0.001);\n   return vec4(velocity_source,1.,1.)*gauss(pos - particle_param.xy, radius);\n}\n\nconst vec4 damp = vec4(0.002,0.002,1.,0.00001);\nconst vec4 ampl = vec4(0.001,0.001,1.,0.01/(radius*radius));\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec4 density = pdensity(pos);\n    U = (1.-damp)*0.25*(B(pos+vec2(0,1))+B(pos+vec2(1,0))+B(pos-vec2(0,1))+B(pos-vec2(1,0)));\n    U += density*ampl;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}