{
    "Shader": {
        "info": {
            "date": "1361323490",
            "description": "just a little intro...",
            "flags": 0,
            "hasliked": 0,
            "id": "XslGzn",
            "likes": 15,
            "name": "CPU intro!",
            "published": 3,
            "tags": [
                "noise",
                "plagiarism",
                "binary",
                "oscilloscope",
                "grid"
            ],
            "usePreview": 0,
            "username": "CPU",
            "viewed": 2099
        },
        "renderpass": [
            {
                "code": "\n// inspired by CRT oscilloscopes... facebook.com/steveoscpu\n\n\nfloat Logo(vec2 p) {\n\tfloat y = floor((p.y)*16.)+3.;\n\tif(y < 0. || y > 4.) return 0.;\n\tfloat x = floor((1.-p.x)*16.)-8.;\n\tif(x < 0. || x > 14.) return 0.;\n\tfloat v=31698.0;if(y>0.5)v=19026.0;if(y>1.5)v=17362.0;if(y>2.5)v=18962.0;if(y>3.5)v=31262.0;\n\treturn floor(mod(v/pow(2.,x), 2.0));\n}\n\nfloat hash( float n ) { return fract(sin(n)*43758.5453); }\n\nfloat noise( in vec2 x )\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n    \tf = f*f*(3.0-2.0*f);\n    \tfloat n = p.x + p.y*57.0;\n    \treturn mix(mix(hash(n+0.0), hash(n+1.0),f.x), mix(hash(n+57.0), hash(n+58.0),f.x),f.y);\n}\n\nvec3 cloud(vec2 p) {\n\tp.x *= 1.14;\n\tp.x -= iTime*.1;\n\tp.y *= 3.14;\n\tvec3 f = vec3(0.0);\n    \tf += 0.5000*noise(p*10.0)*vec3(0.9, 0.2,0.7);\n    \tf += 0.2500*noise(p*20.0)*vec3(0.9, 1.6, 0.5);\n    \tf += 0.1250*noise(p*40.0)*vec3(0.9, 0.7, 0.3);\n    \tf += 0.0625*noise(p*80.0)*vec3(0.9, 1.2, 0.9);\n\treturn f*f*2.;\n}\n\nconst float SPEED\t= 0.001;\nconst float SCALE\t= 80.0;\nconst float DENSITY\t= 0.8;\nconst float BRIGHTNESS\t= 10.0;\n#define ORIGIN\t(iResolution.xy*.5)\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nvec3 layer(float i, vec2 pos, float dist, vec2 coord) {\n\tfloat t = i*10.0 + iTime*i*i;\n\tfloat r = coord.x - (t*SPEED);\n\tfloat c = fract(coord.y + i*.543 + iTime*i*.01);\n\tvec2  p = vec2(r, c*.5)*SCALE*(4.0/(i*i));\n\tvec2 uv = fract(p)*2.0-1.0;\n\tfloat a = coord.y*(3.1415926*2.0) - (3.1415926*.5);\n\tuv = vec2(uv.x*cos(a) - uv.y*sin(a), uv.y*cos(a) + uv.x*sin(a));\n\tfloat m = clamp((rand(floor(p))-DENSITY/i)*BRIGHTNESS, 0.0, 1.0);\n\treturn  clamp(vec3(Logo(uv*.5))*m*dist, 0.0, 1.0);\n}\n\nfloat segment(vec2 P, vec2 P0, vec2 P1)\n{\n\tvec2 v = P1 - P0;\n\tvec2 w = P - P0;\n\tfloat b = dot(w,v) / dot(v,v);\n\tv *= clamp(b, 0.0, 1.0);\n\treturn length(w-v);\n}\n\nfloat StockValue(float x, float s) {\n\treturn fract(sin(x)*10000.0)*.25*s-x*.5;\n}\n\nvec3 Chart( vec2 p ) {\n\n\tfloat d = 1e20;\n\tfloat s = 20.;\n\tfloat t = iTime*s*.08;\n\n\tp = p*s + vec2(t+s*.25,-t*.5);\n\n\tfloat x = floor(p.x);\n\n\tvec2 p0 = vec2(x-.5, StockValue(x+0., s));\n\tvec2 p1 = vec2(x+.5, StockValue(x+1., s));\n\td = min(d, segment(p+vec2(0,0), p0, p1));\n\n\tp0 = vec2(x+1.5, StockValue(x+2., s));\n\td = min(d, segment(p+vec2(0,0), p1, p0));\n\n\tp = abs(mod(p, vec2(1.,1.))-vec2(.5,.5))-.01;\n\tfloat b =1.0-clamp(min(p.x, p.y)*iResolution.x/s, 0.0, 1.0);\n\n\tfloat a1=clamp(1.0-d,0.0,1.0);\n\ta1*=a1;\n\treturn vec3(a1*a1,a1*a1*a1,a1+b*0.2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2   pos = fragCoord.xy - ORIGIN ;\n\tfloat dist = length(pos) / iResolution.y;\n\tvec2 coord = vec2(pow(dist, 0.1), atan(abs(pos.x), pos.y) / (3.1415926*2.0));\n\tvec3 color = cloud(coord)*3.0*dist;\n\tcolor.b=cloud(coord*0.998).x*(3.0*dist);\n\tcoord = vec2(pow(dist, 0.1), atan(pos.x, pos.y) / (3.1415926*2.0));\n\tcolor += layer(2.0, pos, dist, coord)*0.3;\n\tcolor += layer(3.0, pos, dist, coord)*0.2;\n\tcolor += layer(4.0, pos, dist, coord)*0.1;\n\tpos.y=-pos.y;\n        vec3 c=((clamp(3.0*abs(fract(iTime*0.1+vec3(0,2./3.0,1./3.0))*2.-1.)-1.,0.,1.)-1.)+1.);\n        c*=(0.2-dist*0.1)*Logo(pos/iResolution.xy);\n\tfragColor = vec4( (1.0+(2.0-dist*2.0))*0.4 *Chart(pos/iResolution.x)+c+color*.4 , 1.0);//\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}