{
    "Shader": {
        "info": {
            "date": "1653183887",
            "description": "A simpler and more correct (but less general) way of doing what I've done here:\nhttps://www.shadertoy.com/view/7lffzj\n\nShould be useful for pixel art ",
            "flags": 32,
            "hasliked": 0,
            "id": "NdtyRM",
            "likes": 8,
            "name": "Pixel Line Equation",
            "published": 3,
            "tags": [
                "pixelart"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sc = mix(0.25, 0.1, tanh(iTime));\n    vec3 col = texelFetch(iChannel0, ivec2(sc *fragCoord), 0).rgb;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float pxLine(vec2 f, vec2 p, vec2 q) {\n    f -= p;\n\n    vec2 dir = 0.5 * (q - p);\n    \n    float d = min(abs(f.x - round(dir.x/dir.y * f.y)),\n                  abs(f.y - round(dir.y/dir.x * f.x)));\n                          \n    return step(d, 0.) * step(abs(f.x - dir.x), abs(dir.x))\n                       * step(abs(f.y - dir.y), abs(dir.y));           \n}\n\n// Old version:\n/*\nfloat pxLine(vec2 f, vec2 p, vec2 q) {\n    // Centre the coordinates at p\n    f -= p;\n\n    // Get direction from p to q, use for gradient and bounding box dimensions\n    vec2 dir = 0.5 * (q - p);\n    \n    // Look at the line as a function of x, and as a function of y\n    float l = max( step(abs(f.x - round(dir.x/dir.y * f.y)), 0.),\n                   step(abs(f.y - round(dir.y/dir.x * f.x)), 0.) );\n               \n    // Restrict to the box bounded by p and q           \n    return l * step(abs(f.x - dir.x), abs(dir.x))\n             * step(abs(f.y - dir.y), abs(dir.y));           \n}\n\n// Old Old version:\n/*\nfloat pxLine(vec2 f, vec2 p, vec2 q) {\n    // Centre the coordinates at p\n    f -= p;\n    \n    vec2 dir = 0.5 * (q - p);\n    float a = atan(dir.y, dir.x) - 3.14159/4.;\n    float v = (cos(a)-sin(a))/(cos(a)+sin(a));\n    \n    // Is pixel within 0.5 of the line?\n    // Look at the line as a function of x, and as a function of y\n    // (smoothstep for anti-aliasing works well too: ss(-.5,.5,...))\n    float l = max( step(abs(f.x - v*f.y), 0.5), \n                   step(abs(f.x/v - f.y), 0.5) );\n        \n    // Restrict to the box bounded by p and q\n    return l * step(abs(f.x - dir.x), abs(dir.x))\n             * step(abs(f.y - dir.y), abs(dir.y));\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{\n    vec3 col = vec3(0);\n   \n    // fragCoord must be offset by 0.5\n    f -= vec2(30,20) - 0.5;\n\n    // pxLine must take rounded positions as inputs \n    vec2 p = round(10. * vec2(cos(iTime), sin(1.25 * iTime)));\n    vec2 q = round(14. * vec2(cos(1.15 * iTime), sin(iTime)));\n\n    // Draw the origin + points\n    col   += step(length(f), 0.);\n    col.r += step(length(f - p), 0.);\n    col.g += step(length(f - q), 0.);\n    \n    // Draw the line\n    col.b += pxLine(f, p, q);      \n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}