{
    "Shader": {
        "info": {
            "date": "1719436910",
            "description": "    Daily Grid Grind\n    Had a weird idea to do the dotted lines, and how would I do this for a grid and\n    make them move.. so here it is. Truchet pattern added for design/taste.ðŸ¤Œ",
            "flags": 0,
            "hasliked": 0,
            "id": "43cXW8",
            "likes": 27,
            "name": "Byt3-daily-001",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "truchet",
                "motion",
                "daily",
                "dotted"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 275
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Had a weird idea to do the dotted lines, and how would I do this for a grid and\n    make them move.. so here it is. Truchet pattern added for design/taste.ðŸ¤Œ\n    \n    Byt3-daily-001\n    06/26/2024  @byt3_m3chanic\n    \n*/\n\n#define R     iResolution\n#define T     iTime\n#define M     iMouse\n\n#define PI    3.141592653\n#define PI2   6.283185307\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 a) { return fract(sin(dot(a, vec2(27.609, 57.583)))*43758.5453); }\n\nfloat box( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nconst float scale = 5.;\nconst float gap = 5.;\n\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n\n    float mt = T*.5;\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n\n    vec3 C = vec3(0);\n \n    uv *= rot(T*.02);\n    uv.y -= T*.13;\n\n    vec3 cc = mix(vec3(0,1,0),vec3(1,0,0),.5+.5*sin(uv.x*.5+T*.5));\n    float px = fwidth(uv.x);\n    \n    vec2 uvs = uv*scale;\n    \n    vec2 vv = fract(uvs)-.5;\n    vec2 uu = fract(uvs-.6)-.5;\n    vec2 dd = floor(uvs-.6);\n    vec2 id = floor(uvs);\n    vec2 ix = floor(vv*scale);\n    vec2 vx = vv;\n\n    float sw = .075;   \n    float hs = hash21(dd);  \n    \n    if(mod(ix.x,gap)==0.||mod(ix.y,gap)==0.){\n        float e;\n        \n        if (mod(ix.y,gap)==0.) {\n            vx.x += mod(id.y,2.) <1. ? mt: -mt;\n            ix = floor(vx*scale);\n            vx = fract(vx*scale)-.5;\n            e =  box(vx,vec2(.25,sw));\n \n        } else if (mod(ix.x,gap)==0.) {\n            vx.y += mod(id.x,2.) <1. ? mt: -mt;\n            ix = floor(vx*scale);\n            vx = fract(vx*scale)-.5;\n            e =  box(vx,vec2(sw,.25));\n        }\n\n        C = mix(C,cc,smoothstep(px,-px,e));\n\n    }\n\n    float d =  box(vv-vec2(.1),vec2(.04))-.025;\n    float g =  box(uu,vec2(.35))-.05;\n    \n    C = mix(C,vec3(1),smoothstep(px,-px,d));\n    \n    if(hs>.5) uu.x=-uu.x;\n\n    vec2 gx = length(uu-.5)<length(uu+.5) ? vec2(uu-.5) : vec2(uu+.5);\n    \n    float f =  abs(length(gx)-.5)-.15;\n\n    if(hs>.85) f = min(length(uu.x),length(uu.y))-.15;\n\n    hs = fract(hs*43439.254);\n    vec3 clr = hs>.75? cc : vec3(.25);\n    \n    hs = fract(hs*43439.254);\n    float t = hs>.75?max(g,-f):abs(max(g,-f))-.0005;\n    \n    C = mix(C,clr,smoothstep(.012,.01,t));\n\n    if(hs<.25) {\n        C = mix(C,cc,smoothstep(.012,.01,max(f+.075,g)));\n    }\n    \n    // Output to screen\n    fragColor = vec4(C,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}