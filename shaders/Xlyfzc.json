{
    "Shader": {
        "info": {
            "date": "1543354812",
            "description": "curl noise with something like lic (line integral convolution)",
            "flags": 32,
            "hasliked": 0,
            "id": "Xlyfzc",
            "likes": 16,
            "name": "curl noise lic",
            "published": 3,
            "tags": [
                "noise",
                "curl",
                "lic"
            ],
            "usePreview": 1,
            "username": "mds2",
            "viewed": 1397
        },
        "renderpass": [
            {
                "code": "#define COFFEE 0 // set to 1 to make it coffee, 0 makes it blood\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    float intense = texture(iChannel0, uv).r;\n    \n#if COFFEE    \n    vec3 color = smoothstep(vec3(0.1, 0.2, 0.4), vec3(0.4, 0.6, 0.8), vec3(intense));\n#else\n    vec3 color = vec3(intense);\n#endif    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// All hash functions copied from https://www.shadertoy.com/view/Xt3cDn\n// Thanks, nimitz!\n\n//Modified from: iq's \"Integer Hash - III\" (https://www.shadertoy.com/view/4tXyWN)\n//Faster than \"full\" xxHash and good quality\nuint baseHash(uvec2 p)\n{\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\n//--------------------------------------------------\n\nfloat hash12(vec2 x)\n{\n    uint n = baseHash(floatBitsToUint(x));\n    \n    return float(n & 0x7fffffffU)/float(0x7fffffff);\n}\n\n\nfloat noise_term(in vec2 x, in float scale_val) {\n    vec2 s = vec2(scale_val);\n    vec2 x00 = x - mod(x, s);\n    vec2 x01 = x + vec2(0.0, scale_val);\n    x01 = x01 - mod(x01, s);\n    vec2 x10 = x + vec2(scale_val, 0.0);\n    x10 = x10 - mod(x10, s);\n    vec2 x11 = x + s;\n    x11 = x11 - mod(x11, s);\n    \n    float v00 = hash12(x00);\n    float v01 = hash12(x01);\n    float v10 = hash12(x10);\n    float v11 = hash12(x11);\n    \n    vec2 uv = mod(x, s) / s;\n    \n    float yweight = smoothstep(0.0, 1.0, uv.y);\n    float v1 = mix(v10, v11, yweight);\n    float v0 = mix(v00, v01, yweight);\n    \n    float xweight = smoothstep(0.0, 1.0, uv.x);\n    \n    return mix(v0, v1, xweight);\n}\n\nfloat noise(in vec2 x, in float base_scale, in float space_decay, in float height_decay,\n           in float shift_by) {\n\tfloat h = 1.0;\n    float s = base_scale;\n\n    float summation = 0.0;\n    \n    for (int i = 0; i < 5; ++i) {\n    \tsummation = summation + h * noise_term(x + vec2(0.0, s * shift_by), s);\n        s *= space_decay;\n        h *= height_decay;\n    }\n    return summation;\n}\n\nfloat simple_noise(in vec2 uv, in float shift_by) {\n  return noise(uv * 10.0, 5.0, 0.75, 0.75, shift_by);\n}\n\nvec2 noise2(in vec2 uv, in float shift_by) {\n    return vec2(simple_noise(uv, shift_by),\n                simple_noise(uv + vec2(0.0, 101.0), shift_by));\n}\n\nvec2 noise_grad(in vec2 uv, in float shift_by) {\n    float f = simple_noise(uv, shift_by);\n    const float h = 0.001;\n    const float h_inv = 1000.0;\n    \n    // just hte definition of a derivative / gradient\n    return h_inv * vec2(simple_noise(uv + vec2(h, 0.0), shift_by) - f,\n                        simple_noise(uv + vec2(0.0, h), shift_by) - f);\n}\n\nvec2 curl_noise(in vec2 uv, in float shift_by) {\n    vec2 grad = noise_grad(uv, shift_by);\n    return vec2(grad.y, -grad.x); // curl of simple_noise * z_unit : d/dy noise - d/dx noise\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 feedback_lookup(in vec2 coord) {\n    vec2 uv = (iResolution.y * coord + iResolution.xy) / (2.0 * iResolution.xy);\n    return texture(iChannel0, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 sample_from = coord + 0.75 / iResolution.y * curl_noise(coord, 0.0 * iTime);\n    sample_from.x -= 1.25/iResolution.y;\n    vec2 half_rect = iResolution.xy / iResolution.y;\n    sample_from = mod(sample_from + half_rect, 2.0 * half_rect) - half_rect;\n    float bright =\n        0.5 + 0.5 * sin(4.0 * iTime + 16.0 * 3.141592654 * texture(iChannel1, mod(0.2 * coord, vec2(1.0))).r);\n    bright = smoothstep(0.9, 0.95, bright); // make it sharper\n    vec4 col1 = vec4(vec3(bright), 1.0);\n    vec4 col2 = feedback_lookup(sample_from);\n    fragColor = mix(col1, col2, 0.9);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}