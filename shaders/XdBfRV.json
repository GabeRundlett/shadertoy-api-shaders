{
    "Shader": {
        "info": {
            "date": "1501074181",
            "description": "I wrote a little javascript utility to convert strings into uint array declarations suitable for use with the font texture: https://tekf.github.io/Misc-Tools/StringToHex.html\nI figure it might come in handy for my fellow \"Shadertoy Professors\". :)",
            "flags": 0,
            "hasliked": 0,
            "id": "XdBfRV",
            "likes": 12,
            "name": "StringToHex",
            "published": 3,
            "tags": [
                "text",
                "font",
                "string",
                "tool"
            ],
            "usePreview": 1,
            "username": "TekF",
            "viewed": 1208
        },
        "renderpass": [
            {
                "code": "// Prints character in the range uv = (0,0) to (.5,1)\nfloat PrintCharacter( in int char, in vec2 uv )\n{\n    uint idx = uint(char);\n    vec2 charp = vec2( idx&0xFU, 0xFU-(idx>>4U) );\n\n    if ( min(uv.x,uv.y) < .0 || max(uv.x-.5,uv.y-1.) > .0 )\n        return 0.;\n    uv.x += .25;\n\n//    return step(textureLod(iChannel0, (uv+charp)/16., .0).w,.5);\n//    return smoothstep(.53,.47,textureLod(iChannel1, (uv+charp)/16., .0).w );\n//    return textureLod(iChannel0, (uv+charp)/16., .0).x;\n    return 1.-textureLod(iChannel1, (uv+charp)/16., .0).w;\n}\n\nvoid mainImage( out vec4 o, in vec2 u )\n{\n    u = ((u-iResolution.xy*.5)/iResolution.y)*150.;\n    \n    float t = 0.;\n\n    const int string[] = int[]( 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x61, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x20, 0x74, 0x65, 0x73, 0x74 );\n    vec2 uv = u / 14. - vec2(-float(string.length())*.25,.2);\n\n    float a = .0;\n    for ( int i=0; i < string.length(); i++ )\n    {\n        a += PrintCharacter( string[i], uv ); uv.x -= .5;\n    }\n    t += smoothstep(.487,.513,a);\n    \n    const int string2[] = int[]( 0x74, 0x6f, 0x20, 0x73, 0x65, 0x65, 0x20, 0x69, 0x66, 0x20, 0x49, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65 );\n    uv = vec2(u) / 10. - vec2(-float(string2.length())*.25,-.9);\n    a = .0;\n    for ( int i=0; i < string2.length(); i++ )\n    {\n        a += PrintCharacter( string2[i], uv ); uv.x -= .5;\n    }\n    t += smoothstep(.48,.52,a);\n\n    const int string3[] = int[]( 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x21, 0x20, 0x3a, 0x29 );\n    uv = vec2(u) / 10. - vec2(-float(string3.length())*.25,-2.);\n    a = .0;\n    for ( int i=0; i < string3.length(); i++ )\n    {\n        a += PrintCharacter( string3[i], uv ); uv.x -= .5;\n    }\n    t += smoothstep(.48,.52,a);\n\n    o = mix( o, 1.-o, t );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}