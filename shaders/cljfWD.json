{
    "Shader": {
        "info": {
            "date": "1694062613",
            "description": "bap",
            "flags": 0,
            "hasliked": 0,
            "id": "cljfWD",
            "likes": 1,
            "name": "interpolationÕè",
            "published": 3,
            "tags": [
                "thing"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "float scale = 25.;\nint types = 5;\n\nfloat bicubic(float a, float b, float c, float d, float t){\n    t += 1.;\n    float one   = t-1.;\n    float two   = t-2.;\n    float three = t-3.;\n    //return (-(t-1.)*(t-2.)*(t-3.)*a + t*(t-1.)*(t-2.)*d + 3.*t*(t-2.)*(t-3.)*b - 3.*t*(t-1.)*(t-3.)*c)/6.;\n    // https://www.desmos.com/calculator/5d6ph151vi interactive :D\n    return (-one*two*three*a + t*one*two*d + 3.*t*two*three*b - 3.*t*one*three*c)/6.;\n}\n\nvec4 bicubic(vec4 a, vec4 b, vec4 c, vec4 d, float t){\n    return vec4(\n        bicubic(a.x, b.x, c.x, d.x, t),\n        bicubic(a.y, b.y, c.y, d.y, t),\n        bicubic(a.z, b.z, c.z, d.z, t),\n        bicubic(a.w, b.w, c.w, d.w, t)\n    );\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n\n    //scale = scale + sin(iTime*.3)*scale*.5;\n    \n    vec2 uv = U / iResolution.y * scale;\n\n    O = texelFetch(iChannel0, ivec2(uv+.5), 0);\n    \n    vec2 miniUV = uv - floor(uv);\n\n    \n    float x = mod(iTime, float(types));\n    if (x < 1.) return; // Point filter\n    \n    //*\n    if (x < 2.){\n\n        // Worse than bilinear!\n\n        vec4 col11 = texelFetch(iChannel0, ivec2(floor(uv)), 0);\n        vec4 col21 = texelFetch(iChannel0, ivec2(ceil(uv.x), floor(uv.y)), 0);\n        vec4 col12 = texelFetch(iChannel0, ivec2(floor(uv.x), ceil(uv.y)), 0);\n        vec4 col22 = texelFetch(iChannel0, ivec2(ceil(uv)), 0);\n        \n        miniUV.x = miniUV.x < .5?sqrt(miniUV.x*2.)*.5:sqrt(2. -2.*miniUV.x)*-.5+1.;\n        miniUV.y = miniUV.y < .5?sqrt(miniUV.y*2.)*.5:sqrt(2. -2.*miniUV.y)*-.5+1.;\n\n        O = mix(mix(col11, col21, miniUV.x), mix(col12, col22, miniUV.x), miniUV.y);\n        \n        \n        return;\n    }\n    \n\n    \n    if (x < 3.){\n\n        // Bilinear\n        // Basic, disgusting\n        vec4 col11 = texelFetch(iChannel0, ivec2(floor(uv)), 0);\n        vec4 col21 = texelFetch(iChannel0, ivec2(ceil(uv.x), floor(uv.y)), 0);\n        vec4 col12 = texelFetch(iChannel0, ivec2(floor(uv.x), ceil(uv.y)), 0);\n        vec4 col22 = texelFetch(iChannel0, ivec2(ceil(uv)), 0);\n\n        vec2 miniUV = uv - floor(uv);\n\n        O = mix(mix(col11, col21, miniUV.x), mix(col12, col22, miniUV.x), miniUV.y);\n                \n        return;\n    }\n    \n    if (x < 4.){\n        \n        // Basic Quadratic thingy\n        \n        \n        vec4 col11 = texelFetch(iChannel0, ivec2(floor(uv)), 0);\n        vec4 col21 = texelFetch(iChannel0, ivec2(ceil(uv.x), floor(uv.y)), 0);\n        vec4 col12 = texelFetch(iChannel0, ivec2(floor(uv.x), ceil(uv.y)), 0);\n        vec4 col22 = texelFetch(iChannel0, ivec2(ceil(uv)), 0);\n        \n        miniUV.x = miniUV.x < .5?miniUV.x*miniUV.x*2.:4.*miniUV.x -2.*miniUV.x*miniUV.x-1.;\n        miniUV.y = miniUV.y < .5?miniUV.y*miniUV.y*2.:4.*miniUV.y -2.*miniUV.y*miniUV.y-1.;\n\n        O = mix(mix(col11, col21, miniUV.x), mix(col12, col22, miniUV.x), miniUV.y);\n        \n        \n        return;\n        \n        \n        \n        // .... I actually prefer this over bicubic\n        \n        \n    }//*/\n    \n    /*\n    if (x > 1. && x < 4.){\n        \n        float t = (x-1.) * .5 + .5;\n        \n        vec4 col11 = texelFetch(iChannel0, ivec2(floor(uv)), 0);\n        vec4 col21 = texelFetch(iChannel0, ivec2(ceil(uv.x), floor(uv.y)), 0);\n        vec4 col12 = texelFetch(iChannel0, ivec2(floor(uv.x), ceil(uv.y)), 0);\n        vec4 col22 = texelFetch(iChannel0, ivec2(ceil(uv)), 0);\n        \n        miniUV.x = miniUV.x < .5?pow(miniUV.x*2., t)*.5:pow(2. -2.*miniUV.x, t)*-.5+1.;\n        miniUV.y = miniUV.y < .5?pow(miniUV.y*2., t)*.5:pow(2. -2.*miniUV.y, t)*-.5+1.;\n\n        O = mix(mix(col11, col21, miniUV.x), mix(col12, col22, miniUV.x), miniUV.y);\n        \n        \n        return;\n    }//*/\n\n            \n    if (x < 5.){\n\n        // Bicubic\n        vec4 c00 = texelFetch(iChannel0, ivec2(floor(uv)+vec2(-1, -1)), 0);\n        vec4 c01 = texelFetch(iChannel0, ivec2(floor(uv)+vec2(-1,  0)), 0);\n        vec4 c02 = texelFetch(iChannel0, ivec2(floor(uv.x)-1., ceil(uv.y)), 0);\n        vec4 c03 = texelFetch(iChannel0, ivec2(floor(uv.x)-1., ceil(uv.y)+1.), 0);\n        \n        vec4 c10 = texelFetch(iChannel0, ivec2(floor(uv)+vec2(0, -1)), 0);\n        vec4 c11 = texelFetch(iChannel0, ivec2(floor(uv)), 0);\n        vec4 c12 = texelFetch(iChannel0, ivec2(floor(uv.x), ceil(uv.y)), 0);\n        vec4 c13 = texelFetch(iChannel0, ivec2(floor(uv.x), ceil(uv.y)+1.), 0);\n\n        vec4 c20 = texelFetch(iChannel0, ivec2(ceil(uv.x), floor(uv.y)-1.), 0);\n        vec4 c21 = texelFetch(iChannel0, ivec2(ceil(uv.x), floor(uv.y)), 0);\n        vec4 c22 = texelFetch(iChannel0, ivec2(ceil(uv)), 0);\n        vec4 c23 = texelFetch(iChannel0, ivec2(ceil(uv)+vec2(0, 1)), 0);\n\n        vec4 c30 = texelFetch(iChannel0, ivec2(ceil(uv.x) + 1., floor(uv.y)-1.), 0);\n        vec4 c31 = texelFetch(iChannel0, ivec2(ceil(uv.x) + 1., floor(uv.y)), 0);\n        vec4 c32 = texelFetch(iChannel0, ivec2(ceil(uv.x) + 1., ceil(uv.y)), 0);\n        vec4 c33 = texelFetch(iChannel0, ivec2(ceil(uv.x) + 1., ceil(uv.y)+1.), 0);\n        \n        // That's quite a bit more memory access üòÖ\n        \n        vec4 c0 = bicubic(c00, c01, c02, c03, miniUV.y);\n        vec4 c1 = bicubic(c10, c11, c12, c13, miniUV.y);\n        vec4 c2 = bicubic(c20, c21, c22, c23, miniUV.y);\n        vec4 c3 = bicubic(c30, c31, c32, c33, miniUV.y);\n        \n        O = bicubic(c0, c1, c2, c3, miniUV.x);\n        \n        \n        // Add a slash at the start of the line below to see what the bicubic formula does :)\n        /*\n        uv.x /= 8.;\n        O*= abs(uv.y-(bicubic(0., 1., .1, 1., uv.x-2.)*5.+8.));\n        \n        O*= abs(uv.x - 1.);\n        O*= abs(uv.x - 2.);\n        O*= abs(uv.x - 3.);\n        O*= abs(uv.x - 4.);\n        //*/\n        \n        return;\n    }\n    \n    O *= 0.; // Black if none evaluated\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}