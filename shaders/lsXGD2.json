{
    "Shader": {
        "info": {
            "date": "1379525944",
            "description": "Clic to swap between continuous / granular model",
            "flags": 0,
            "hasliked": 0,
            "id": "lsXGD2",
            "likes": 3,
            "name": "homogeneous mixture gaz+stars",
            "published": 3,
            "tags": [
                "galacticrendering"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "// colors of an homogeneous mixture of gaz and stars\n// x: density 0->big\n// y: albedo 0->1\n\nvec3 StarsColor = normalize(vec3(1.,.9,.7));\nfloat StarsAvgLum = .5;\nvec3 DustColor = normalize(vec3(1.,.6,1.));  \n\nint DUST_TYPE = 2;   // < 0 : granular (pigment>>um). \n                     // > 0 : continuous\n                     //      1: only fluid extinct\n                     //      2: fluid extinct  + grey grains\n                     //      3: Rayleigh extinct+scatter (phaseFunc=color)\n                     // clic to swap sign\n\nfloat RefDepth = 1.; // color defined for this thikness of material\n\n#define PI 3.14159\nvec2 FragCoord;\nvec4 FragColor;\n\n// --- sliders and mouse widgets\n\nbool affMouse() \n{\n\tfloat R=5.;\n\tvec2 pix = FragCoord.xy/iResolution.y;\n\tfloat pt = max(1e-2,1./iResolution.y); R*=pt;\n\n\tvec2 ptr = iMouse.xy/iResolution.y; \n\tvec2 val = iMouse.zw/iResolution.y; \n\tfloat s=sign(val.x); val = val*s;\n\t\n\t// current mouse pos\n    float k = dot(ptr-pix,ptr-pix)/(R*R*.4*.4);\n\t\tif (k<1.) \n\t    { if (k>.8*.8) FragColor = vec4(0.);\n\t\t     else      FragColor = vec4(s,.4,0.,1.); \n\t\t  return true;\n\t\t}\n\t\n\t// prev mouse pos \n    k = dot(val-pix,val-pix)/(R*R*.4*.4);\n\t\tif (k<1.) \n\t    { if (k>.8*.8) FragColor = vec4(0.);\n\t\t     else      FragColor = vec4(0.,.2,s,1.); \n\t\t  return true;\n\t\t}\n\t\n\treturn false;\n}\nbool affSlider(vec2 p0, vec2 dp, float v)\n{\n\tfloat R=5.;\n\tvec2 pix = FragCoord.xy/iResolution.y;\n\tfloat pt = max(1e-2,1./iResolution.y); R*=pt;\n\tpix -= p0;\n\n\tfloat dp2 = dot(dp,dp);\n\tfloat x = dot(pix,dp)/dp2; if ((x<0.)||(x>1.)) return false;\n\tfloat x2=x*x;\n\tfloat y = dot(pix,pix)/dp2-x2; if (y>R*R) return false;\n\n\tFragColor = vec4(1.,.2,0.,1.); \n\ty = sqrt(y);\n\tif (y<pt) return true;       // rule\n\tvec2 p = vec2(x-v,y);\n\tif (dot(p,p)<R*R) return true; // button\n\t\n\treturn false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    FragCoord=fragCoord;\n    FragColor = vec4(0.);\t\n\tvec2 uv  = fragCoord.xy/iResolution.y;\n\tvec2 val = iMouse.xy/iResolution.xy;\n\n\tif (iMouse.z>0.) DUST_TYPE=-DUST_TYPE; // clic to swap\n\t\n\t// ------ sliders ------\n#if 0\t\n\tif (affMouse()) return;\n\tif (iMouse.z<=0.) // auto-tuning if no user tuning\n\t{\n\t\tfloat t = iTime;\n\t\tval = vec2(.95,.5) + vec2(.04,.3)*vec2(cos(t),sin(t));\n\t}\n\tif (affSlider(vec2(.05,.02),vec2(.4,0),val.x)) { fragColor=FragColor; return;}\n\tif (affSlider(vec2(.02,.05),vec2(0,.4),val.y)) { fragColor=FragColor; return;} \n#endif\n\t// --------------------\n\n\tuv  = fragCoord.xy/iResolution.xy;\n\t\n\t// draw indicators\n\tif (uv.x>.91) {\n\t\tif (uv.y>.85) { fragColor = vec4(DustColor ,1.0); return; }\n\t\tif (uv.y<.15) { fragColor = vec4(StarsColor,1.0); return; }\n\t}\n\t\n\tvec3 opticalDepth = vec3(uv.x*10.); // sigma_e * rho * L\n\tvec3 albedo = vec3(uv.y); //  0 to 100%\n\t\n\t// NB: we assume only 1 scatter.\n\t//\n\t// 0: opaque non-diffracting dust: achromatic extinction, colApp = albedo\n\t// 1: fluids: \n\t//    1.1: colored extinction (albedo = 0 if pure liquid). colApp = optDepth\n\t//    1.2: if gaz or impurities,  => +Rayleigh: colored scattering +k.rho(theta)/lambda^4\n\t//    1.3: if big impurities, => +Mie or opaque (case 0)\n\t//                                  if white, ambiant spectrum is scattered\n\t//         TYPE=2 assumes 1.3 with grey albedo: dirty snow >> micron. \n\t\n    if (DUST_TYPE<0)\n\t\talbedo *= DustColor;\n\telse {\n\t\topticalDepth *= -log(DustColor)/RefDepth;\n\t\tif (DUST_TYPE==1) albedo = vec3(0.);\n\t\tif (DUST_TYPE==3) albedo = vec3(1.);\n\t}\n \n\t// dust illumination: 4pi/opticalDepth *  StarsColor*StarsAvgLum\n\t// proportion scattered to eye: albedo_a.Col*opticalDepth / 4Pi\n\tvec3 v = StarsColor*StarsAvgLum/opticalDepth*(1. + albedo); // *opticDepth/opticDepth);\n\t\n\tfloat lum = max(max(v.x,v.y),v.z); \n\t// v /= log(1.+1.5*lum);\n\n\t\n\tfragColor = vec4(v,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}