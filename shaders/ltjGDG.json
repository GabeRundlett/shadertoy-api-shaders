{
    "Shader": {
        "info": {
            "date": "1432137355",
            "description": "For reference. Please mess around with the code and do whatever you want with it.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltjGDG",
            "likes": 4,
            "name": "Simple Sphere Texture Map",
            "published": 3,
            "tags": [
                "simple",
                "sphere"
            ],
            "usePreview": 0,
            "username": "ddddddddd",
            "viewed": 1617
        },
        "renderpass": [
            {
                "code": "// simple sphere cheat map.\n// dean alex\n\n\n\nfloat radius = 0.25;\nfloat focal = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    //----- setup -----\n    float aspect = iResolution.x / iResolution.y;\n    float Px = iMouse.x / iResolution.x * aspect;\n    float Py = iMouse.y / iResolution.y;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float tx = uv.s * aspect;\n    float ty = uv.t;\n    \n    \n    \n    //----- get coordinates of texture -----\n    float dx = tx - Px;\n    float dy = ty - Py;\n    float dis = sqrt( dx*dx + dy*dy );\n    \n    if( dis > radius ){ // piexl is outside boundary of sphere. stop here\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n        return;\n    }\n    \n    \n    // width of radius at y\n    float rad_w = sqrt( radius*radius - dy*dy );\n    float warp_x = dx / rad_w;\n    \n    // height of radius at x\n    float rad_h = sqrt( radius*radius - dx*dx );\n    float warp_y = dy / rad_h;\n    \n    // warp the values with a cos curve to approximate the angle of the edges\n    warp_x = warp_x / (cos( dx * 3.14159265358979586 ));\n    warp_y = warp_y / (cos( dy * 3.14159265358979586 ));\n    \n    \n    \n    //----- shading -----\n    float dismf = dis / radius;\n    dismf = 1.0 - dismf;\n    \n    \n    vec4 tex = texture( iChannel0, vec2( warp_x * focal + Px, warp_y * focal + Py ) );\n    tex.rgb *= (dismf * 0.9) + 0.1;\n    \n    // specular\n    dismf = dismf * dismf * dismf * dismf * dismf * dismf;\n    tex.rgb += dismf;\n        \n    fragColor = tex;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}