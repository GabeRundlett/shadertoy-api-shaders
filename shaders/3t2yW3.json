{
    "Shader": {
        "info": {
            "date": "1595538183",
            "description": "Nice Shader for nice german Streamer Dangerzone DJ",
            "flags": 4,
            "hasliked": 0,
            "id": "3t2yW3",
            "likes": 1,
            "name": "Vinyl makeover Dangerzone",
            "published": 3,
            "tags": [
                "microfone"
            ],
            "usePreview": 0,
            "username": "Davy_Jones444",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "#define BARS 12.\n\n#define PI 3.14159265359\n\n// rotation transform\nvoid tRotate(inout vec2 p, float angel) {\n    float s = sin(angel), c = cos(angel);\n\tp *= mat2(c, -s, s, c);\n}\n\n// circle distance\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\n// union\nfloat opU(float a, float b) {\n    return min(a, b);\n}\n\n// substraction\nfloat opS(float a, float b) {\n    return max(a, -b);\n}\n\n// distance function of half of an ark\n// parameters: inner radius, outer radius, angle\nfloat sdArk(vec2 p, float ir, float or, float a) {\n    \n    // add outer circle\n    float d = sdCircle(p, or);\n        \n    // substract inner circle\n    d = opS(d, sdCircle(p, ir));\n    \n    // rotate with angle\n    tRotate(p, -a * PI / 2.);\n    \n    // clip the top\n    d = opS(d, -p.y);\n    \n    // add circle to the top\n    d = opU(d, sdCircle(p - vec2((or + ir) / 2., 0.), (or - ir) / 2.));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    \n    // I wanted it to look good on my phone vertically :P\n    if (iResolution.x > iResolution.y) uv.x *= iResolution.x / iResolution.y; else uv.y *= iResolution.y / iResolution.x;\n    \n    // little white padding\n    uv *= 1.05;\n    \n    // add circles\n    float d = sdCircle(uv, 1.);\n    d = opS(d, sdCircle(uv, .34));\n    d = opU(d, sdCircle(uv, .04));\n    \n    // calculate position of the bars\n    float barsStart = .37;\n    float barsEnd = .94;\n    float barId = floor((length(uv) -barsStart) / (barsEnd - barsStart) * BARS);\n    \n    // only go forward if we're in a bar\n    if (barId >= 0. && barId < BARS) {\n        \n        float barWidth = (barsEnd - barsStart) / BARS;\n        float barStart = barsStart + barWidth * (barId + .25);\n        float barAngel = texture(iChannel0, vec2(1. - barId / BARS, .25)).x * .5;\n\n        // add a little rotation to completely ruin the beautiful symmetry\n        tRotate(uv, -barAngel * .2 * sin(barId + iTime));\n        \n        // mirror everything\n    \tuv = abs(uv);\n        \n        // add the bars\n        d = opS(d, sdArk(uv, barStart, barStart + barWidth / 2., barAngel));\n    }\n    \n    // use the slope to render the distance with antialiasing\n    float w = min(fwidth(d), .01);\n    fragColor = vec4(.90,.890,d/.001, 1.0);\n\t\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}