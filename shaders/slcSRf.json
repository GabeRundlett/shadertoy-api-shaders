{
    "Shader": {
        "info": {
            "date": "1639486249",
            "description": "Hypersphere Frame",
            "flags": 0,
            "hasliked": 0,
            "id": "slcSRf",
            "likes": 2,
            "name": "Hypersphere Frame",
            "published": 3,
            "tags": [
                "4d"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2021 IWBTShyGuy \n\n#define AA 2\n\nconst vec3 GOLD = pow(vec3(242, 186, 35) / 255.0, vec3(2.2));\n\nfloat sdSphereFrame3D(vec4 p, float r, float e) {\n    return min(min(min(\n        length(vec2(length(p.xyz) - r, p.w)) - e,\n        length(vec2(length(p.yzw) - r, p.x)) - e),\n        length(vec2(length(p.zwx) - r, p.y)) - e),\n        length(vec2(length(p.wxy) - r, p.z)) - e\n    );\n}\n\nfloat sDist(in vec4 p) {\n    return sdSphereFrame3D(p, 1.0, 0.1);\n}\n\nvec4 calcNormal(in vec4 p) {\n    const vec2 e = vec2(1.0e-4, 0);\n    return normalize(vec4(\n        sDist(p + e.xyyy) - sDist(p - e.xyyy),\n        sDist(p + e.yxyy) - sDist(p - e.yxyy),\n        sDist(p + e.yyxy) - sDist(p - e.yyxy),\n        sDist(p + e.yyyx) - sDist(p - e.yyyx)\n    ));\n}\n\nconst float FAR = 12.0;\nvoid mainImage0(out vec4 fragColor, in vec2 fragCoord) {\n    float veloMove = 0.5;\n    float veloTarget = 0.3;\n    vec4 position = vec4(\n        (1.0 + cos(iTime * veloMove)) * 1.5,\n        0.5,\n        (1.0 + cos(iTime * veloMove)) * 1.5,\n        sin(iTime * veloMove) * 1.5\n    );\n    vec4 direction = normalize(vec4(sin(iTime * veloTarget), 0, cos(iTime * veloTarget), 0) - position);\n    vec4 up = vec4(-direction.y, direction.x, 0, 0);\n    vec4 tactile = vec4(0, 0, -direction.w, direction.z);\n    if (length(tactile) < 1.0e-2) {\n        fragColor = vec4(1, 0, 0, 1);\n        return;\n    }\n    Camera camera = newCamera(\n        position,\n        direction,\n        up,\n        tactile,\n        PI / 4.0,\n        iResolution.x / iResolution.y\n    );\n    Ray ray = cameraRay(camera, fragCoord / iResolution.xy);\n\n    float dist = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec4 p = ray.origin + dist * ray.direction;\n        float dist0 = sDist(p);\n        if (dist0 < 1.0e-6 || dist > FAR) break;\n        dist += dist0;\n    }\n\n    vec3 col = pow(texture(iChannel0, normalize(ray.direction.zwx)).xyz, vec3(2.2));\n    if (dist < FAR) {\n        vec4 p = ray.origin + dist * ray.direction;\n        vec4 normal = calcNormal(p);\n        float c = microfacet(\n            normal,\n            ray.direction,\n            ray.direction,\n            0.4,\n            0.5\n        ) * 0.7;\n        c += microfacet(\n            normal,\n            ray.direction,\n            vec4(0, 0, 0, -1),\n            0.9,\n            0.5\n        ) * 0.3;\n        col = clamp(c, 0.0, 1.0) * GOLD;\n    }\n\n\n    // It must be remark the camera does not collide with shape.\n    // The result does not change if the following commet out is removed.\n    //if (dist < 1.0e-3) col = vec3(0);\n\n    fragColor = vec4(pow(col, vec3(0.4545)), 1);\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    \n// smart anti-aliasing\n// reference: https://shadertoyunofficial.wordpress.com/2021/03/09/advanced-tricks/\n\n// If defined, visualize anti-aliased pixels.\n//#define VISUALIZE_AA\n#ifdef AA\n    if (fwidth(length(O.xyz)) > 0.1) {\n\n        O.xyz = pow(O.xyz, vec3(2.2));\n        vec4 o;\n#if (AA == 2)\n        for (int k = 0; k < 4; k++) {\n              mainImage0(o,U + (vec2(k % 2, k / 2) - 0.5) / 1.5);\n              O += pow(o, vec4(2.2));\n        }\n        O /= 5.0;\n#elif (AA == 3)\n        for (int k = 0; k < 9; k += k == 3 ? 2 : 1 ) {\n              mainImage0(o, U + vec2(k % 3 - 1, k / 3 - 1) / 3.0);\n              O += pow(o, vec4(2.2));\n        }\n        O /= 9.0;\n#endif\n#ifdef VISUALIZE_AA\n        O = vec4(1);\n    } else {\n        O = vec4(0,0,0,1);\n#endif\n        O.xyz = pow(O.xyz, vec3(0.4545));\n    }\n#endif\n    O.w = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n// 4D toolkit\n//\n// The MIT License\n// Copyright © 2021 IWBTShyGuy \n//\n\nconst float PI = 3.141592653;\n\nvec4 three_cross(in vec4 a, in vec4 b, in vec4 c) {\n    return vec4(\n        -determinant(mat3(a.yzw, b.yzw, c.yzw)),\n        determinant(mat3(a.zwx, b.zwx, c.zwx)),\n        -determinant(mat3(a.wxy, b.wxy, c.wxy)),\n        determinant(mat3(a.xyz, b.xyz, c.xyz))\n    );\n}\n\nstruct Camera {\n    vec4 position;\n    vec4 direction;\n    //@ upper direction of camera\n    //@ not need to perp to `direction`\n    vec4 up_direction;\n    //@ normal of the hyperplane\n    //@ not have to be normalized\n    //@ assumed being perp to `direction`.\n    vec4 tactile;\n    float fov;\n    //@ x / y\n    float aspect;\n};\n\nCamera newCamera(\n    in vec4 position,\n    in vec4 direction,\n    in vec4 up_direction,\n    in vec4 tactile,\n    in float fov,\n    in float aspect\n) {\n    Camera camera;\n    camera.position = position;\n    camera.direction = direction;\n    camera.up_direction = up_direction;\n    camera.tactile = tactile;\n    camera.fov = fov;\n    camera.aspect = aspect;\n    return camera;\n}\n\nstruct Ray {\n    vec4 origin;\n    vec4 direction;\n};\n\n// uv: fragCoord / iResolution.xy\nRay cameraRay(in Camera camera, in vec2 uv) {\n    uv = uv * 2.0 - 1.0;\n    float h = tan(camera.fov * 0.5);\n    float w = h * camera.aspect;    \n    vec4 right = -normalize(three_cross(camera.direction, camera.up_direction, camera.tactile));\n    vec4 up = -normalize(three_cross(right, camera.direction, camera.tactile));\n    vec4 direction = normalize(right * w * uv.x + up * h * uv.y + camera.direction);\n    Ray ray;\n    ray.origin = camera.position;\n    ray.direction = direction;\n    return ray;\n}\n\n// ------------------- microfacet base rendering ------------------- //\nfloat microfacet(vec4 normal, vec4 cameraDir, vec4 lightDir, float metal, float roughness) {\n    vec4 middle = normalize(cameraDir + lightDir);\n    float dotCN = clamp(-dot(cameraDir, normal), 0.0, 1.0);\n    float dotLN = clamp(-dot(lightDir, normal), 0.0, 1.0);\n    float dotNM = -dot(normal, middle);\n    float dotCM = dot(cameraDir, middle);\n    float alpha = roughness * roughness;\n    \n    // diffuse BRDF\n    float diffuse = 1.0 - metal;\n    \n    // microfacet distribution\n    float alpha2 = alpha * alpha;\n    float tmp = 1.0 - dotNM * dotNM * (1.0 - alpha2);\n    float distribution = alpha2 / (tmp * tmp);\n\n    // schlick approxy & geometric decay\n    float alp = alpha * 0.5;\n    float sal = dotLN / (dotLN * (1.0 - alp) + alp);\n    float sac = dotCN / (dotCN * (1.0 - alp) + alp);\n    float decay = sal * sac;\n\n    // fresnel\n    float c = 1.0 - dotCM;\n    c = c * c * c * c * c;\n    float fresnel = metal + (1.0 - metal) * c;\n\n    // specular BRDF\n    tmp = 4.0 * dotCN * dotLN;\n    float specular = distribution * decay / tmp * fresnel;\n    if (tmp < 0.0001) specular = 0.0;\n    \n    return (diffuse + specular) * dotLN;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}