{
    "Shader": {
        "info": {
            "date": "1637880316",
            "description": "Find the connected component.  \nMight be accelerated by using a table of equivalent values rather than directly propagating.\n\nclick to restart a new truchet tiling.  Scale N in Common (try 80) .\n\"infinite\" tiling: comment BuffA:17 & set 1.*Time in Image:5",
            "flags": 32,
            "hasliked": 0,
            "id": "7ty3zG",
            "likes": 28,
            "name": "connected components in truchets",
            "published": 3,
            "tags": [
                "flood",
                "short",
                "connected",
                "truchets"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "#define hue(v)  vec4( .6 + .6 * cos( .5+(v)  + vec3(0,23,21)  ) , 1 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = N * u / R.y + 0.*iTime, I = floor(U), F = fract(U);\n         \n    O = T(I);                                          // cell states \n    O.w > 0. ? F = vec2(1.-F.y,F.x) : F;\n    \n    O =   smoothstep(N*1.5/R.y,0.,abs(min(length(F),length(1.-F))-.5) - .1 ) // truchet drawing\n        * hue( O[ F.x+F.y < 1. ? 1 : 2 ] );            // coloring\n         \n // if (iMouse.z>0.) O += (1.-O.w)*.3*mod(I.x+I.y,2.); // debug: draw tiles\n // O += .3*T(I).w;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define H(p)  mod(p.x+p.y,2.)\n  #define H(p)  fract(sin(dot(p, vec2(12.9898, 78.233))-iTime) * 43758.5453)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if ( iFrame < 1 || iMouse.z>0.) {         // --- init: create truchet\n        vec2 I = u-.5;                        // store truchet data\n        O.w = step(.5,H(I));                  // random axis\n     // if (u.x > N*R.x/R.y || u.y > N) { O.yz = vec2(0); return; }\n        O.y = 1.+I.x+4096.*I.y;               // id of tile segment #1\n        O.z = -O.y;                           // id of tile segment #2\n        return;\n    }\n    \n    u -= .5;\n    O = T(u);                                 // previous state\n    if (u.x > N*R.x/R.y || u.y > N) return;   // propagate only visible tiles\n    \n                                              // --- propagate id along connections\n#define left(T)    T.y\n#define right(T)   T.z\n#define bot(T)   ( T.w<1. ? T.y : T.z )\n#define top(T)   ( T.w<1. ? T.z : T.y )\n    if (O.w<1.) { // tile contains:  \\     new id = min(connections)\n        O.y = min( O.y, min( right(T(u-vec2(1,0))), top(T(u-vec2(0,1))) ));\n        O.z = min( O.z, min( left (T(u+vec2(1,0))), bot(T(u+vec2(0,1))) ));\n    }\n    else {        // tile contains:  /     new id = min(connections)\n        O.y = min( O.y, min( right(T(u-vec2(1,0))), bot(T(u+vec2(0,1))) ));\n        O.z = min( O.z, min( left (T(u+vec2(1,0))), top(T(u-vec2(0,1))) ));\n    }\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float N = 30.; // vertical number of tiles\n\n#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}