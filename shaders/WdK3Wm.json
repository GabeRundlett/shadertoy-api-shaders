{
    "Shader": {
        "info": {
            "date": "1573997283",
            "description": "who's remember the  summer hit of 100 AD ?\n[url=https://en.wikipedia.org/wiki/Seikilos_epitaph]wikipedia[/url]",
            "flags": 8,
            "hasliked": 0,
            "id": "WdK3Wm",
            "likes": 10,
            "name": "song of Seikilos",
            "published": 3,
            "tags": [
                "song",
                "cover",
                "seikilos"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/WdK3Wm\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\nfloat tex(in vec3 px)\n{\n    //#define S(_p)(smoothstep(0., 1., fract(_p)))\n    float z=1.,f=0.,k=27.;\n    for(int i=0;i<2;i++)\n    {\n        vec3 p=px;\n\t\tfor(float i=.5;i>0.;i-=.125)\n        {\n            float u=floor(p).x+floor(p).y*k;\n            vec4 v=vec4(u,u+1.,u+k,1.+u+k);\n            v=fract(.5+fract(1.5701*v)*v*870.369);\n            f += i * mix(mix(v.x, v.y, fract(p.x)),\n                         mix(v.z, v.w, fract(p.x)),fract(p.y));\n            p.xy *= mat2(0, 2, 3, 0);\n            p =p+f*f; \n        }\n        //px *= .4;\n        z *= -1.001;   \n    \tf/=z; \n    }\n    return clamp(f*f*12.,0.,1.);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p=(fragCoord.xy*2.-iResolution.xy)/min(iResolution.x,iResolution.y);\n    //dither https://www.shadertoy.com/view/3tj3DW)\n    vec3 dthr =20.*fract(sin(p.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n    vec3 o=4.*vec3(cos(iTime),sin(iTime), 2.),d=normalize(vec3(p,-.8+cos(-.3*iTime)));\n    float h=0.;\n    // #define map(_p)(max(-.1,dot(_p,vec3(0,0,1))-.025*tex(vec2(_p.x,(acos(_p.y/sqrt(100.-dot(_p,_p)))/(acos(-1.)))+_p.y))))\n    #define map(_p)(max(-0.,.1+dot(_p,vec3(0,0,1))-.025*tex(_p)))\n    if(length(p)+.6<.5)\n    {\n    h+=map((o+d*h));\n    h+=map((o+d*h));\n    }h+=map((o+d*h));\n    h+=map((o+d*h));\n    \n    vec3 pos=o+h*d;\n    vec2 e=vec2(-.001,.001);\n    vec3 n=normalize(e.yxx*map((pos+e.yxx))+e.xxy*map((pos+e.xxy))+e.xyx*map((pos+e.xyx))+e.yyy*map((pos+e.yyy)));\n    vec3 li=normalize(vec3(-5.*cos(.85*iTime),5.*sin(.85*iTime),20));\n    float fr=clamp(1.+dot(n,d),0.0,1.0);\n    float sp=pow(clamp(dot(reflect(d,n),li),0.0,1.0),32.0);\n    float c=fr+sp;\n    fragColor.xyz=dthr;\n    if(abs(h)>10.)\n    {\n    c*=max(1.,1.25/length(d.xy));\n    fragColor.xyz+=.9-sqrt(.5+.5*cos(iTime+vec3(1,c*1.25,c*1.25)));\n    }\n    else \n        fragColor.xyz=clamp(vec3(c*1.5,c*1.25,c), 0., 1.);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( in int samp,float time)\n{\n   // int block = int((iBlockOffset+0.5)*iSampleRate/(512.*512.));\n   // int s = 512*512*block + 512*int(gl_FragCoord.y) + int(gl_FragCoord.x);\n    return mSound(samp, time);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "\n/* \n\n\t\n\tWhile you live, shine\n\thave no grief at all \n\tlife exists only for a short while\n\tand time will claim its toil\n\n*/\n\n\nfloat intfract(int s,float n)\n{\n    //Explanation and copyright : shadertoy.com/view/4ltfRN\n    int sn=int(n),a=s%sn,b=(s/sn);\n    const float MAXF=float(uint(-1))+1.;\n    return fract((float(a)/n)+float((uint(b)*uint(MAXF*float(sn)/n)))/MAXF);\n}\n\n\nvec2 mSound(int samp, float time)\n{\n   const int l=1, a=2,_=999;\n    \n\tconst int[]\n        pseq=int[](0,1,_,_,2,_,_,_,\n                   3,4,5,6,_,_,_,\n                   7,_,_,8,9,10,11,\n                   12,13,_,_,14,15,_,_,\n                   16,17,18,19,20,21,\n                   22,23,_,_,24,25,_,_,\n                   26,27,28,29,30,31,\n                   32,33,_,_,34,35,36),\n        nseq=int[](l,l,a,a,l,a,a,a,\n                   l,l,l,l,a,a,a,\n                   l,a,a,l,l,l,l,\n                   l,l,a,a,l,l,a,a,\n                   l,l,l,l,l,l,\n                   l,l,a,a,l,l,a,a,\n                   l,l,l,l,l,l,\n                   l,l,a,a,l,l,l),\n        jscale=int[](69,76,76,73,74,76,74,73,74,76,74,73,71,69,71,67,69,73,76,74,73,74,73,69,71,67,69,73,71,74,76,73,69,69,69,66,64);\n    \n    vec2 v = vec2(0);\n    float clkbase = 3.; //bpm\n    int clk = int(iSampleRate*(clkbase/8.)); // duration of one step of the sequencer\n   \t\n    const int len = pseq.length();\n    //-------- is: \"index (of) sequence\"\n    int is = samp/clk;\n    for (;is%len > 0 && nseq[is%len]==a; is--){}\n    int nl = 1;\n    for (;(is+nl)<len && nseq[(is+nl)]==a; nl++){}\n    int synsamp = samp - is*clk;\n    float syntime = float(synsamp)/iSampleRate,\n          notedur = float(nl*clk)/iSampleRate;\n    int pitchcode = pseq[is%len];\n    //if(pitchcode==_) return vec2(0);\n\n    float f =0.;\n    f = 440.*exp2(float(jscale[pitchcode]-69)*0.0833334);\n    \n\t// aulos \n    v=vec2(.15*mod(3.+syntime*3.*f,6.101),.12*mod(3.+syntime*2.*f,6.111));\n    v+=.08*mod(12.+syntime*f,6.);\n    v+=.04*mod(6.+syntime*f,12.2);\n    \n    // lyre\n    float ly = (sin(6.3*intfract(synsamp,iSampleRate /f))\n                 +.25*abs(.8-cos(6.283185*intfract(synsamp,.5*iSampleRate/f))))\n             \t * exp(-syntime/notedur*2.)*(1.-exp(-1.+syntime/notedur));\n    \n    //-------- out\n    return .707 * (.2 * v + .6 * ly); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}