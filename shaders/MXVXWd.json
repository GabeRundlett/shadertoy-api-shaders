{
    "Shader": {
        "info": {
            "date": "1720662233",
            "description": "Credit - kishimisu on YouTube for the tutorial and for introducing me into this beautiful, mystifying, entrancing rabbit hole that I may never come out from",
            "flags": 0,
            "hasliked": 0,
            "id": "MXVXWd",
            "likes": 2,
            "name": "introToRayMarching",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "sdf",
                "etc",
                "custompalette"
            ],
            "usePreview": 0,
            "username": "JOEMANFLAME",
            "viewed": 76
        },
        "renderpass": [
            {
                "code": "//--------------------------------------------------------------------------------------------------------------------\n// Geometry\n\n// Functions\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle) {\n    // Rodrigues' rotation formula\n    return mix(dot(axis, p)*axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n    \n}\n\nfloat smin( float a, float b, float k )\n{\n    k *= 1.0;\n    float r = exp2(-a/k) + exp2(-b/k);\n    return -k*log2(r);\n}\n\nfloat sUnion (float d1, float d2, float k) {\n        float h = clamp(0.5 + 0.5 *(d2-d1)/k, 0.0, 1.0);\n        return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5); \n    vec3 b = vec3(0.500, 0.500, 0.500);\n    vec3 c = vec3(1.000, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.577);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n// Geometry SDFs\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - 1.0;             // SDF of a sphere of radius 1\n}\n\nfloat sdBox (vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);  // SDF of a box with xyz = b\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n// Mapping\nfloat map(vec3 p) {\n    \n    p.z += iTime*.6;\n    \n    // Space Repetition\n    p.xy = fract(p.xy) - 0.5;     // Spacing = 1 ( -0.5 translates vec3 to center of unit square )\n    p.z = mod(p.z, 0.25) - 0.125;  // Spacing = 0.25\n    \n    float box = sdOctahedron(p, 0.15); // SDF of box\n    \n    // smooth union between the objeccts\n    return box;\n}\n\n//--------------------------------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;  // transform px coordinates into uv-space\n    vec2 m = ( iMouse.xy * 2.0 - iResolution.xy) / iResolution.y; // px coordinates into uv-space for mouse\n    \n    // Initialization\n    vec3 r0 = vec3(0, 0, -3.0); // ray origin\n    vec3 rd = normalize(vec3(uv*0.7, 1));  // ray direction NOTE: leverage use of UV coordinates being the xy axes of screen,\n                                       // can plug them into x and y of vec3, meaning each pixel has its own ray-Dir\n\n    vec3 col = vec3(0);                // final pixel color\n    \n    float t = 0.0;                     // Distance Travelled                                \n    int iter = 80;                     // ray-march iterations to perform (per pixel)\n    \n    //Vertical camera rotation (Goes first)\n    //r0.yz *= rot2D(-m.y);\n    //rd.yz *= rot2D(-m.y);\n    \n    //Horizontal camera rotation\n    //r0.xz *= rot2D(-m.x);\n    //rd.xz *= rot2D(-m.x);\n    \n    if (iMouse.z < 0.) m = vec2(cos(iTime*0.2), sin(iTime*0.2));\n    \n    // Raymarching\n    int i;\n    for (i = 0; i < iter; i++) {\n        vec3 p = r0 + rd * t;              // Position along the ray w.r.t. the rays origin\n        \n        p.xy *= rot2D(t*0.2 * m.x);    // rotate ray based on distance travelled\n        \n        p.y += sin(t*(m.y+1.0)*0.5)*0.35;  // add sin component w frequency of t (distance travelled)\n        \n        \n        float d = map(p);              // current distance to the scene\n\n        t += d;                        // \"march\" the ray\n        \n        // col = vec3(i) / float(iter);   // output color based on number of iterations performed\n        \n        if ( d < 0.001 || t > 100.0) break;       // stop ray-marching if sufficiently close to geometry or stop ray-marching if ray passes all geometry\n    }\n    \n    \n    // Coloring\n    col = palette(t*0.05 + float(i)*0.005);            // color based on distance the ray has travelled\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}