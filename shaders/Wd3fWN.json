{
    "Shader": {
        "info": {
            "date": "1605063280",
            "description": "3d normal map texture test",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3fWN",
            "likes": 1,
            "name": "Starbox",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "xacer",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "\nconst int MAXSTEPS = 100;\n\nfloat map (in vec3 p) {\n\treturn length(p - clamp(p, -0.5, 0.5)) - 0.5;\n}\n\nvec3 surfaceNormal (in vec3 p) {\n\treturn normalize(p);\n}\n\nfloat march (in vec3 ro, in vec3 rd) {\n\tfloat t = 0.0;\n    for (int i = 0; i < MAXSTEPS; i ++) {\n    \tfloat d = map(ro + rd * t);\n        t += d;\n        if (d < 0.01) return t;\n    }\n    return -1.0;\n}\n\nvec3 noise3d (in vec3 pos) {\n    vec3 s = pos/2.0 +0.5;\n\tvec3 pos1 = texture(iChannel0, s.xy).rgb;\n    vec3 pos2 = texture(iChannel0, s.yz).rgb;\n    vec3 pos3 = texture(iChannel0, s.zx).rgb;\n    return pos1 * abs(pos.z) + pos2 * abs(pos.x) + pos3 * abs(pos.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 lightDirection = vec3(1.0, 0.0, 0.0);\n    float a = iTime+3.1415/2.0;\n    mat3 rotationMatrix = mat3(\n        cos(a), 0, -sin(a), 0, 1, 0, sin(a), 0, cos(a)\n    );\n    \n    vec3 cameraPosition = 3.0 * vec3(cos(iTime), 0, sin(iTime));\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.yy;\n    vec3 ray = normalize(vec3(uv.xy, 1.0)) * rotationMatrix;\n\t\n    float t = march(cameraPosition, ray);\n    \n    if (t < 0.0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n\t}\n    \n    vec3 hit = cameraPosition + ray * t;\n    \n\tvec3 nor = surfaceNormal(hit);\n    \n    float diffuse = max(-dot(nor, lightDirection), 0.0);\n    float specular = pow(max(-dot(reflect(ray, nor), lightDirection), 0.0), 32.0);\n    float light = diffuse * 0.6 + specular * 0.4;\n    light = 1.0;\n    vec3 tint = noise3d(nor);\n    \n    // Output to screen\n    fragColor = vec4(tint * light,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}