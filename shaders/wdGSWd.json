{
    "Shader": {
        "info": {
            "date": "1575311586",
            "description": "This effect wasn't what I was going for..! Even better in full-screen.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdGSWd",
            "likes": 22,
            "name": "Flame spew incident",
            "published": 3,
            "tags": [
                "voronoi",
                "flame",
                "fire",
                "fluid",
                "particle"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 659
        },
        "renderpass": [
            {
                "code": "// Fork of \"Lava blaster\" by michael0884. https://shadertoy.com/view/WdtXzs\n// 2019-11-08 18:25:44\n\n// Fork of \"Vorofluid\" by michael0884. https://shadertoy.com/view/3sdXRX\n// 2019-11-01 23:20:11\n\n// Fork of \"Voronoi vortex particle fluid\" by michael0884. https://shadertoy.com/view/WdcXzS\n// 2019-10-30 21:27:02\n\n//density and velocity\nvec3 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   return vec3(particle_param.zw,gauss(pos - particle_param.xy, sqrt(0.5)*radius));\n}\nvec4 ufract(vec4 p){return clamp(p,0.,1.);}\nvec3 ufract(vec3 p){return clamp(p,0.,1.);}\nvec2 ufract(vec2 p){return clamp(p,0.,1.);}\nvec4 ofract(vec4 p){return p-fract(p);}\nvec3 ofract(vec3 p){return p-fract(p);}\nvec2 ofract(vec2 p){return p-fract(p);}\nvoid mainImage(out vec4 fragColor, vec2 pos) {\n    vec4 voxel = SAMPLE(iChannel0, pos, size);\n    vec3 density = pdensity(pos);\n    vec4 blur = B(pos);\n    float vorticity = B(pos+vec2(2,0)).y-B(pos-vec2(2,0)).y-B(pos+vec2(0,2)).x+B(pos-vec2(0,2)).x;\n    vec4 iMouse1 = iMouse/size.xyxy;\n    iMouse1 = vec4(390,220,0,0)/vec4(800,450,800,450);\n    vec4 iMouse2 = iMouse/size.xyxy;\n    iMouse2 = vec4(800,400,0,0)/vec4(800,450,800,450);\n    int id = int(floor(pos.x/size.x*8.0));\n    const float height = 20.0;\n    vec3 ld = normalize(vec3(-4,3,2));\n    vec2 po2 = pos+(height/ld.y)*ld.xz;\n    vec4 tex1 = SAMPLE(iChannel0, pos, size);\n    vec4 tex2 = SAMPLE(iChannel1, pos, size);\n    vec4 te21 = SAMPLE(iChannel0, po2, size);\n    vec4 te22 = SAMPLE(iChannel1, po2, size);\n    float val = length(tex2.xy);\n    float va2 = length(te22.xy);\n    float cx = (iMouse1.x*2.0-1.0)*0.25;\n    float cy = max(abs(cx),1.0)*(iMouse1.y*2.0-1.0)*0.25;\n    vec3 densit2 = pdensity(po2);\n    vec4 blu2 = B(po2);\n    float vorticit2 = B(po2+vec2(1.5,0)).y-B(po2-vec2(1.5,0)).y-B(po2+vec2(0,1.5)).x+B(po2-vec2(0,1.5)).x;\n    float l1 = 490.*abs(vorticity);\n    float l2 = 490.*abs(vorticit2);\n    float l0 = 1.-l1;\n    float l00 = mix(0.25*l1,l1,smoothstep(0.0,0.5-iMouse1.y,l1+5.0-10.0*iMouse1.x));\n\n    float smoke = smoothstep(0.0,cy,val+cx);\n    float smok2 = smoothstep(0.0,cy,va2+cx);\n    float maskSmoke = smoothstep(iMouse2.x,iMouse2.y,exp2(0.)*smoke);\n    float maskSmok2 = smoothstep(iMouse2.x,iMouse2.y,exp2(0.)*smok2);\n    float maskFlame = smoothstep(iMouse2.y,-1.0/450.,exp2(0.)*smoke);\n    float smokePart21Amount = 0.25+0.75*smoothstep(.932,.21,1.*l2+(3.*10.*abs(densit2.x+densit2.y)+1.*30.*(abs(blu2.z)))-0.125);\n    float smokePart22Amount = 0.75+0.25*smoothstep(0.75,0.125,l2);\n    float smokePart11Amount = 0.01+0.99*smoothstep(.932,.21,1.*l1+(3.*10.*abs(density.x+density.y)+1.*30.*(abs(blur.z)))-0.125);\n    float smokePart12Amount = 0.01+0.99*smoothstep(0.75,0.125,l1);\n    vec3 flamePart1Amount = \n        1.0*vec3(1.,0.3,0.1)*smoothstep(0.015625,0.0625,length(density.xy))*abs(512.*vorticity)+\n        1.0*vec3(1.,0.3,0.1)*l00 +\n        1.0*clamp(l1*2.-2.,0.,1.)*0.5*vec3(0.1,0.1,0.1)*l0;\n    //fragColor = texture(iChannel3,pos*8./size);\n\tfragColor = textureNoTile(iChannel3,iChannel2,(4. + 6.*0.0625)*pos/800.-(iTime*0.015625), 0.5);\n    vec3 hsv = rgb2hsv(fragColor.rgb); \n    vec4 iMouse3 = vec4(45,55,525,0)/vec4(800,450,800,450);\n    fragColor.rgb = mix(vec3(1),fragColor.rgb,\n                        smoothstep(0.02598,0.99,\n                                   length(vec3(iMouse3.w,42./450.,42./450.)*64.*wdistance(hsv,iMouse3.xyz,vec3(1)))));\n\n    fragColor.rgb = mix(fragColor.rgb,fragColor.rgb*smokePart21Amount*smokePart22Amount,maskSmok2);\n    fragColor.rgb = mix(fragColor.rgb,fragColor.rgb*smokePart11Amount*smokePart12Amount,maskSmoke);\n    fragColor.rgb = mix(fragColor.rgb,fragColor.rgb+flamePart1Amount,maskFlame);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define size iResolution.xy\n#define SAMPLE(a, p, s) texture((a), (p)/s)\n#define B(pos) SAMPLE(iChannel1, pos, size)\n\nfloat vmax(vec3 a) {return max(max(a.x,a.y),a.z);}\nfloat vmin(vec3 a) {return min(min(a.x,a.y),a.z);}\nfloat sqr(float x) { return x*x; }\nfloat gauss(vec2 x, float r) { return exp(-sqr(length(x)/r)); }\nfloat gauss(float d, float r) { return exp(-sqr(d/r)); }\nvec3 vwdistance(vec3 p, vec3 a, vec3 R) {return abs(mod(p + 0.5 * R - a, R) - 0.5 * R);}\nfloat wdistance(vec3 p, vec3 a, vec3 R) {return length(mod(p + 0.5 * R - a, R) - 0.5 * R);}\nfloat wdistance(vec2 p, vec2 a, vec2 R) {return length(mod(p + 0.5 * R - a, R) - 0.5 * R);}\nfloat wdistance(float p, float a, float R) {return abs(mod(p + 0.5 * R - a, R) - 0.5 * R);}\n\n//#define SPEED\n   \n#define PI 3.14159265\n\n#ifdef SPEED\n//high speed\n    #define dt 8.5\n    #define P 0.01\n#else\n//high precision\n \t#define dt 2.\n    #define P 0.02 //0.05\n#endif\n\n//how many particles per pixel, 1 is max\n#define particle_density 1.0\n#define minimal_density 0.25\n\nconst float radius = 2.0;\n\nconst vec2 ampl = vec2(0.1*0.75,0.0001);\nconst float velocity_damp = 0.995; // 0.9995;\n\nvec4 phase2(sampler2D iChannelA, sampler2D iChannelB, vec2 U, vec2 R) {\n    //velocity and density\n    vec4 particle = SAMPLE(iChannelA, U, R);\n    vec2 velocity = particle.zw;\n    float density = gauss(U - particle.xy, sqrt(0.5)*radius);\n\n    vec4 B_e = SAMPLE(iChannelB, U+vec2(1,0), R);\n    vec4 B_w = SAMPLE(iChannelB, U-vec2(1,0), R);\n    vec4 B_n = SAMPLE(iChannelB, U+vec2(0,1), R);\n    vec4 B_s = SAMPLE(iChannelB, U-vec2(0,1), R);\n    \n    float div = B_e.x-B_w.x+B_n.y-B_s.y;\n\n    return vec4(0.5*velocity, (1.-0.001)*0.25*(B_n.z+B_e.z+B_s.z+B_w.z) + ampl.x*div,0);\n}\n\n// by Chickenkiller in 2019-01-22 at https://www.shadertoy.com/view/tdjGRh\nvec3 rgb2hsv(vec3 rgb) //convert rgb to hsv color space\n{\n\tfloat c_max = vmax(rgb);\n\tfloat c_min = vmin(rgb);\n\tvec3 hsv = vec3(0,c_max>0.?1.-c_min/c_max:0.0,c_max);\n\t\n\tif (c_max==c_min) {hsv.x=6.0;}\n\telse if (c_max==rgb.r) {hsv.x=0.0+(rgb.g-rgb.b)/(c_max-c_min);}\n\telse if (c_max==rgb.g) {hsv.x=2.0+(rgb.b-rgb.r)/(c_max-c_min);}\t\n\telse if (c_max==rgb.b) {hsv.x=4.0+(rgb.r-rgb.g)/(c_max-c_min);}\n\thsv.x = fract(hsv.x/6.0);\n\thsv = clamp(hsv,0.0,1.0);\n\treturn hsv;\n}\n// Official HSV to RGB conversion\nvec3 hsv2rgb(float h, float s, float v) {\n\treturn v* mix(vec3(1),clamp(abs(mod(h* 6.+ vec3(0,4,2),6.)- 3.)- 1.,0.,1.),s);\n}\nvec3 hsv2rgb(vec3 hsv) { return hsv2rgb(hsv.x,hsv.y,hsv.z); }\nvec3 cubic(vec3 x) {\n\treturn x* x* (3.0- 2.0* x);\n}\n// Smooth HSV to RGB conversion\nvec3 hsv2rgb_smooth(float h, float s, float v) {\n\treturn v* mix(vec3(1),cubic(clamp(abs(mod(h* 6.+ vec3(0,4,2),6.)- 3.)- 1.,0.,1.)),s);\n}\n\n// By IQ at https://www.shadertoy.com/view/Xtl3zf\n// The MIT License\nvec4 textureNoTile(sampler2D iChannelT, sampler2D iChannelR, vec2 x, float v) {\n    float k = texture(iChannelR, 0.005*x).x; // cheap (cache friendly) lookup\n    \n    vec2 duvdx = dFdx(x);\n    vec2 duvdy = dFdy(x);\n    \n    float l = k*8.0;\n    float f = fract(l);\n    \n    float ia = floor(l); // my method\n    float ib = ia + 1.0;\n    \n    vec2 offa = sin(vec2(3.0,7.0)*ia); // can replace with any other hash\n    vec2 offb = sin(vec2(3.0,7.0)*ib); // can replace with any other hash\n\n    vec4 cola = textureGrad(iChannelT, x + v*offa, duvdx, duvdy);\n    vec4 colb = textureGrad(iChannelT, x + v*offb, duvdx, duvdy);\n    \n    vec3 colc = cola.rgb-colb.rgb;\n    \n    return mix(cola, colb, smoothstep(0.2,0.8,f-0.1*(colc.x+colc.y+colc.z)));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//voronoi particle tracking \n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = SAMPLE(iChannel0, pos+dx, size);\n    vec2 rpos1 = mod(pos-Unb.xy+size*0.5,size) - size*0.5;\n    vec2 rpos2 = mod(pos-U.xy+size*0.5,size) - size*0.5;\n    //check if the stored neighbouring particle is closer to this position \n    if(length(rpos1) < length(rpos2))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvoid mainImage(out vec4 O, in vec2 pos )\n{\n    vec4 prev_O = SAMPLE(iChannel0, pos, size);\n    O = prev_O;\n    \n    //check neighbours \n    Check(O, pos, vec2(-1,0));\n    Check(O, pos, vec2(1,0));\n    Check(O, pos, vec2(0,-1));\n    Check(O, pos, vec2(0,1));\n    Check(O, pos, vec2(-1,-1));\n    Check(O, pos, vec2(1,1));\n    Check(O, pos, vec2(1,-1));\n    Check(O, pos, vec2(1,-1));\n    Check(O, pos, vec2(-8,0));\n    Check(O, pos, vec2(8,0));\n    Check(O, pos, vec2(0,-8));\n    Check(O, pos, vec2(0,8));\n    Check(O, pos, vec2(-32,0));\n    Check(O, pos, vec2(32,0));\n    Check(O, pos, vec2(0,-32));\n    Check(O, pos, vec2(0,32));\n    O.xy = mod(O.xy,size); //limit the position to the texture\n    \n    //make new particles by diverging existing ones\n \tif(length(mod(pos-O.xy+size*0.5,size) - size*0.5) > 1./minimal_density)\n    {\n        O.xy = pos;\n        O.zw *= 1.03;\n    }\n\n    vec2 ppos = O.xy;\n\n    //mouse interaction\n    vec4 mouse = iMouse;\n    if(mouse.z<=0.) {\n        mouse=vec4(size.x*(0.5+0.45*cos(2.02*iTime*0.125)), size.y*(0.5+0.45*sin(3.01*iTime*0.125)),\n                   step(.75,mod(iTime*0.125+0.75,2.))*(2.0+sin(4.*32.*iTime)-0.9875),0);\n    }\n    if(mouse.z>0.)\n    {\n        float k = gauss(ppos-mouse.xy, 25./4.*(1.+5.*smoothstep(1.5,1.975,mod(iTime*0.125,2.))));\n        if(k>0.75){\n        O.zw += \n            -410.25*(size.x/800.*size.y/450.)*\n            (0.125+0.875*smoothstep(1.95,2.,mod(iTime*0.125,2.)))*\n            k*dt*(\n                sin(atan(ppos.x-mouse.x,ppos.y-mouse.y)*20.0+iTime*0.125)*\n                normalize(ppos-mouse.xy)*1.0\n                \n            )+\n            O.zw*(1.-k) +\n            0.0*k*0.2*vec2(cos(0.02*iTime*dt), sin(0.02*iTime*dt));\n        O.xy = pos;\n        }\n    }\n\t\n    //update the particle\n    vec4 B_0 = SAMPLE(iChannel1, ppos+vec2(0,0), size);\n    vec4 B_e = SAMPLE(iChannel1, ppos+vec2(1,0), size);\n    vec4 B_w = SAMPLE(iChannel1, ppos-vec2(1,0), size);\n    vec4 B_n = SAMPLE(iChannel1, ppos+vec2(0,1), size);\n    vec4 B_s = SAMPLE(iChannel1, ppos-vec2(0,1), size);\n\n    vec2 pressure = 5.0*vec2(B_e.z - B_w.z, B_n.z - B_s.z);\n    O.zw *= velocity_damp; // decrease velocity with time\n    O.zw += P*pressure*dt;\n    //smooth velocity\n    //vec2 velocity = 2.951*5.0*B_0.xy + O.zw;\n    vec2 velocity = 2.951*5.0*0.5*prev_O.zw + O.zw;\n    O.xy += dt*velocity;\n    O.xy = mod(O.xy,size); //limit the position to the texture\n    \n    \n    if(iFrame < 1)\n    {\n      \tif(mod(pos, vec2(1./particle_density)).x < 1. && mod(pos, vec2(1./particle_density)).y < 1.)\n           O = vec4(pos,0.,0.);\n      \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 u, vec2 pos) { u = phase2(iChannel0,iChannel1,pos,size); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}