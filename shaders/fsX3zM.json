{
    "Shader": {
        "info": {
            "date": "1615651226",
            "description": "License CC0: 2D rocket distance field\nNothing fancy, just a 2D rocket",
            "flags": 0,
            "hasliked": 0,
            "id": "fsX3zM",
            "likes": 7,
            "name": "2D rocket distance field",
            "published": 3,
            "tags": [
                "2d",
                "sdf"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "// License CC0: 2D rocket distance field\n//  Nothing fancy, just a 2D rocket\n\n#define RESOLUTION    iResolution\n#define TIME          iTime\n#define PI            3.141592654\n#define TAU           (2.0*PI)\n\n// IQ's min\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) {\n  return pmax(a, -a, k);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n// IQ's vesica\nfloat vesica(vec2 p, float r, float d) {\n  p = abs(p);\n  float b = sqrt(r*r-d*d);\n  return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                           : length(p-vec2(-d,0.0))-r;\n}\n\nfloat rocket(vec2 p) {\n  const float lw = 0.0125;\n  const float sm = 0.0125;\n\n  float d0 = vesica(p, 0.25, 0.125)-lw;\n  float d1 = abs(circle(p-vec2(0.0, 0.05), 0.125*0.66)) - lw;\n  float d2 = circle(p-vec2(0.0, -0.225), 0.225);\n  d2 = max(d2, -(d0 - lw*2.0));\n  float d3 = circle(p-vec2(0.0, -0.38), 0.25);\n  float d4 = max(d0, d3+lw*2.0);\n  float d5 = abs(d4)-lw*0.5;\n  d5 = min(d5, d4+lw*1.5);\n\n  float d = d0;\n  // To make the distance field more smooth\n  d = pmax(d, -d1, sm);\n  d = pmin(d, d2 , sm);\n  d = pmax(d, -d3, sm);\n  d = pmin(d, d5 , sm);\n\n  return d;\n}\n\nfloat df(vec2 p) {\n  const float s = 3.0;\n  return rocket(p/s)*s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n\n  float d = df(p);\n\n  vec3 col = vec3(0.1);\n  col = mix(col, vec3(1.0), smoothstep(-aa, aa, -d));\n  if(p.x > 0.0)\n  col += 0.5*sin(d*300.0);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}