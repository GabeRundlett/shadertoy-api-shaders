{
    "Shader": {
        "info": {
            "date": "1604659460",
            "description": "just some funky hatifnat-like creatures chillin' to a nice tune in a club",
            "flags": 0,
            "hasliked": 0,
            "id": "3ddBRM",
            "likes": 12,
            "name": "Clubbing Hatifnats",
            "published": 3,
            "tags": [
                "sdf",
                "spheremarching",
                "hatifnats"
            ],
            "usePreview": 0,
            "username": "daltostronic",
            "viewed": 540
        },
        "renderpass": [
            {
                "code": "int Iterations = 25;\nfloat Epsilon = 0.01;\nfloat CameraAngle = 1.0;\nfloat HatiScale = 0.2;\n\nstruct Object\n{\n    float Distance;\n    int Iteration;\n    vec3 Color;\n    float MinDistance;\n};\n\nObject map(vec3 p);\n\nObject raytrace(vec3 camera, vec3 ray, int iterations, float threshold)\n{\n    vec3 p = camera;\n    Object obj;\n    float MinDistance = 1000000.0;\n    for (int i = 0; i < iterations; i++) {\n        obj = map(p);\n        obj.Iteration = i;\n        MinDistance = min(MinDistance, obj.Distance);\n        if (obj.Distance < threshold) break;\n        p += ray * obj.Distance;\n    }\n\n    obj.MinDistance = MinDistance;\n\n    return obj;\n}\n\nvec4 extractColor(Object obj, vec3 clearColor)\n{\n    float c = 1.0 - float(obj.Iteration) / 50.0;\n\n    return vec4(mix(clearColor, obj.Color, c), 1.0);\n}\n\nObject ellipsoid(in vec3 p, in vec3 r, vec3 color)\n{\n    Object result;\n    result.Color = color;\n    \n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    result.Distance = k0*(k0-1.0)/k1;\n\n    return result;\n}\n\nObject capsule(vec3 p, float h, float r, vec3 color)\n{\n    Object result;\n    result.Color = color;\n    \n    p.z -= clamp(p.z, 0.0, h);\n    result.Distance = length(p) - r;\n\n    return result;\n}\n\nObject plane(vec3 p, float h, vec3 color)\n{\n    Object result;\n    result.Color = color;\n    result.Distance = p.z - h;\n    return result;\n}\n\nvec3 repeat(vec3 p, vec3 c)\n{\n    return mod(p, c) - 0.5 * c;\n}\n\nfloat smin(float a, float b)\n{\n    float k = 8.;\n    float res = exp(-k*a) + exp(-k*b);\n    return -log(res) / k;\n}\n\nObject sum(Object a, Object b)\n{\n    if (a.Distance < b.Distance)\n        return a;\n    return b;\n}\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,  s,\n                -s, c);\n}\n\nvec3 hsv(float H, float S, float V) {\n    vec3 c = vec3(H, S, V);\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nObject hatifnat(vec3 p, float h, vec3 color, float fftL)\n{\n    Object c = capsule(p, 1.0 * h, HatiScale, color);\n\n    p.y = abs(p.y);\n\n    Object e0 = ellipsoid(p - vec3(-0.2, 0.1, 1.0 * h + 0.45), vec3(0.05, 0.05, mix(0.1, 0.01, fftL)), vec3(1.0));\n    \n\tObject result = sum(c, e0);\n\treturn result;\n}\n\nObject map(vec3 p)\n{\n    float fftL = texture(iChannel0, vec2(0.1, 0.0)).r;\n    float fftM = texture(iChannel0, vec2(0.5, 0.0)).r;\n    float fftH = texture(iChannel0, vec2(0.9, 0.0)).r;\n    float pattern = 10.0 * sin(p.x * 0.0001 + fftL * 0.01 + iTime * 0.1);\n    float fftX = texture(iChannel0, vec2(pattern, 0.0) / 100.0).r;\n    \n\tvec3 rep = vec3(2.0, 2.0, 0.0);\n\t\n\tvec3 p0 = p;\n    p0.x += p.z * 0.25 * cos(p.z - iTime * 2.5 + p.x);\n    p0.y += p.z * 0.25 * sin(p.z - iTime * 2.5 + p.y);\n\tvec3 p1 = p;\n    p1.x += p.z * 0.25 * cos(p.z + iTime * 2.5 + p.x + 2.093);\n    p1.y += p.z * 0.25 * sin(p.z + iTime * 2.5 + p.y + 2.093);\n\tvec3 p2 = p;\n    p2.x += p.z * 0.25 * cos(p.z - iTime * 2.5 + p.x + 4.187);\n    p2.y += p.z * 0.25 * sin(p.z - iTime * 2.5 + p.y + 4.187);\n\tvec3 p3 = p;\n    p3.x += p.z * 0.25 * cos(p.z + iTime * 2.5);\n    p3.y += p.z * 0.25 * sin(p.z + iTime * 2.5);\n\n\tfloat h = fftX;\n\tfloat h1 = h + mix(1.0, 0.15, fftL);\n\tfloat h2 = h + mix(1.0, 0.15, fftM);\n\tfloat h3 = h + mix(1.0, 0.15, fftH);\n\t\n\tvec3 color = hsv(pattern, 0.5, 1.0);\n    Object c0 = hatifnat(repeat(p0, rep), h, color, fftL);\n    Object c1 = hatifnat(repeat(p1 - vec3(0.0, 1.0, 0.0), rep), h1, color, fftL);\n    Object c2 = hatifnat(repeat(p2 - vec3(1.0, 1.5, 0.0), rep), h2, color, fftL);\n    Object c3 = hatifnat(repeat(p3 - vec3(1.0, 0.5, 0.0), rep), h3, color, fftL);\n    Object hatifnats = sum(c0, sum(c1, sum(c2, c3)));\n    \n    Object plane = plane(p, 0.0, hsv(pattern, 0.5, 1.0));\n\t\n\tObject result = hatifnats;\n\tresult.Distance = smin(hatifnats.Distance, plane.Distance);\n\t\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tvec3 camera = vec3(-5.0, 0.0, 6.0);\n\tcamera.xy *= r2d(sin(iTime * 0.5) * 0.5);\n\tcamera.x += iTime;\n\tvec3 ray = normalize(vec3(1.0, uv.x, uv.y));\n\tray.xz *= r2d(CameraAngle);\n\t\n\tObject result = raytrace(camera, ray, Iterations, Epsilon);\n\n\tfragColor = extractColor(result, vec3(0.0));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}