{
    "Shader": {
        "info": {
            "date": "1632365428",
            "description": "a fluid simulator",
            "flags": 32,
            "hasliked": 0,
            "id": "sdGGDc",
            "likes": 2,
            "name": "simplified fluid advect",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "noobdawn",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/4sd3WB\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 udu = texture(iChannel0, uv).xy;\n    float u = udu.x;\n    float du = udu.y;\n    \n    //fragColor = vec4(texture(iChannel0, uv).zw, 0.0, 1.0);\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 d = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    // init property\n    if (iTime < 0.1)\n    {\n        if ((uv.x > 0.1) && (uv.x < 0.9) && (uv.y > 0.4) && (uv.y < 0.5))\n            fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        else\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n\n    vec4 origin = texture(iChannel0, uv);\n    float du = origin.y;\n    // check mouse input position\n    vec2 r = fragCoord.xy - iMouse.xy;\n    float dist = 0.001 * dot(r, r);\n    if (iMouse.z > 0.0 && dist < 0.2) {\n        fragColor = vec4(0.0, 0.2, origin.zw);\n        return;\n    }\n    // copy\n    float _X = texture(iChannel0, vec2(uv.x + d.x, uv.y)).x;\n    float _x = texture(iChannel0, vec2(uv.x - d.x, uv.y)).x;\n    float _Y = texture(iChannel0, vec2(uv.x, uv.y + d.y)).x;\n    float _y = texture(iChannel0, vec2(uv.x, uv.y - d.y)).x;\n    vec2 n = -vec2((_X - _x) / d.x, (_Y - _y) / d.y);\n    vec2 offset = n.xy;\n    if ((abs(n.x) < 0.001) && (abs(n.y) < 0.001))\n        offset = vec2(0);\n    float np = texture(iChannel0, uv + offset * 0.01).z;   \n    fragColor = vec4(origin.xy, np, origin.w);\n    \n    //fragColor = vec4(origin.xy, n);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 d = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 origin = texture(iChannel0, uv);\n    \n    float u = origin.x;\n    float du = origin.y;\n    \n    float ux = texture(iChannel0, vec2(uv.x + d.x, uv.y)).x;\n    float umx = texture(iChannel0, vec2(uv.x - d.x, uv.y)).x;\n    float uy = texture(iChannel0, vec2(uv.x, uv.y + d.y)).x;\n    float umy = texture(iChannel0, vec2(uv.x, uv.y - d.y)).x;\n    float uxy = texture(iChannel0, vec2(uv.x + d.x, uv.y + d.y)).x;\n    float umxy = texture(iChannel0, vec2(uv.x - d.x, uv.y + d.y)).x;\n    float uxmy = texture(iChannel0, vec2(uv.x + d.x, uv.y - d.y)).x;\n    float umxmy = texture(iChannel0, vec2(uv.x - d.x, uv.y - d.y)).x;\n    \n    \n    // edge\n    \n    float nu = u + du + 0.25 * (umx + ux + umy + uy + 0.707 * (uxy + umxy + uxmy + umxmy) - 8.0 * u);\n    //  u + du + 0.5 * (umx + ux + umy + uy - 4.0 * u);\n    nu = 0.9 * nu;\n    \n    fragColor = vec4(nu, nu - u, origin.zw);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}