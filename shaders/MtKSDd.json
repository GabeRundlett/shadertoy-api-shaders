{
    "Shader": {
        "info": {
            "date": "1486597460",
            "description": "Algebraic construction of a circle. Doing this so I won't inevitably forget the formulas.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtKSDd",
            "likes": 6,
            "name": "Algebraic Circle",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "culdevu",
            "viewed": 633
        },
        "renderpass": [
            {
                "code": "// The algebraic construction of a rational circle: \n//   a bijection from the projective rational line to the rational circle\n// \n// Given a rational parameter r, the point\n//\n//  / 1 - r^2     2r    \\\n// |  ------- , -------  |\n//  \\ 1 + r^2   1 + r^2 /\n//\n// denotes a point on the unit circle\n\nvec2 screenToWorld(vec2 coord)\n{\n    return 2.5 * (2.0 * coord / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = screenToWorld(fragCoord);\n    \n    vec3 final = vec3(0, 0, 0);\n    \n    // draw the gridlines\n    if (mod(abs(round(uv.x) - uv.x), 1.0) < 0.02)\n        final = vec3(0.2, 0.2, 0.2);\n    if (mod(abs(round(uv.y) - uv.y), 1.0) < 0.02)\n        final = vec3(0.2, 0.2, 0.2);\n    \n    // draw the axes\n    if (uv.x * uv.x < 0.02 * 0.02)\n        final = vec3(0.8, 0.8, 0.8);\n    if (uv.y * uv.y < 0.02 * 0.02)\n        final = vec3(0.8, 0.8, 0.8);\n    \n    // draw the circle\n    float rad2 = dot(uv, uv);\n    if (abs(1.0 - rad2) < 0.04)\n        final = vec3(1, 0, 0);\n    \n    float r = screenToWorld(iMouse.xy).y;\n    \n    // draw the line\n    float y = uv.x * r + r;\n    if (abs(y - uv.y) < 0.04)\n        final = vec3(0, 0, 1);\n    \n    // draw the r dot\n    if (length(uv - vec2(0, r)) < 0.08)\n        final = vec3(1, 1, 0);\n    \n    // draw the projected dot\n    vec2 pos = vec2(\n        (1.0 - r*r) / (1.0 + r*r),\n        (2.0 * r) / (1.0 + r*r)\n    );\n    if (length(uv - pos) < 0.08)\n        final = vec3(0, 1, 0);\n    \n    fragColor = vec4(final, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}