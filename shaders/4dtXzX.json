{
    "Shader": {
        "info": {
            "date": "1460605450",
            "description": "Click the mouse to set the a and b parameters for the elliptic curve, to see how they affect the shape of the curve. The red lines show values for a and b that introduce singular points, making the curve non-elliptic.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dtXzX",
            "likes": 5,
            "name": "Elliptic curve explorer",
            "published": 3,
            "tags": [
                "math",
                "curve",
                "elliptic"
            ],
            "usePreview": 0,
            "username": "huttarl",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "// This is an exercise in preparation for another shader I'm working on,\n// https://www.shadertoy.com/view/lstXRj (not published yet).\n\n// In particular, it lets you explore how changes in a and b affect the curve.\n// Click mouse to set a = mouse x coordinate, b = mouse y.\n\n// The red curve shows values for a and b that introduce singular points in\n// the curve, such as cusps (a=b=0), self-intersections (certain b > 0), or\n// isolated points (certain b < 0), which make the curve non-elliptic.\n\n// For values of a and b left of the red curve, the elliptic includes a separate\n// round shape. For values above the red curve, the elliptic has a \"horseshoe\"\n// bend. For values below the red curve, the elliptic looks more like a simple\n// hyperbola.\n\n// See https://en.wikipedia.org/wiki/Elliptic_curve about elliptic curves.\n\n// HT to marius at https://www.shadertoy.com/view/Mt2Gzw, who already made a shader\n// with elliptic curves. I used his delta idea (adapted).\n\n// TODO: display the values of a and b on-screen, e.g. using digits from\n//    https://www.shadertoy.com/view/Xst3zX\n// TODO: use a 1:1 aspect ratio?\n// TODO: make the distance formulas more accurate for black line\n//    See e.g. https://www.shadertoy.com/view/Xd2Xz1\n//     or https://www.shadertoy.com/view/4ts3DB ?\n//   For the red line, we just get by with vertical distance to the nearest\n//   line.\n//   For the cubic curve, maybe also look at\n//    http://www.gamedev.net/topic/419160-distance-from-point-to-cubic-curve/\n//   What I see online talks about distance to a cubic spline, so we may need\n//   to approximate the curve as a spline.\n\nconst float PI = 3.14159265;\n\nfloat distRedLine(vec2 p) {\n    // The red line is where 4a^3 + 27b^2 = 0.\n    if (p.x > 0.) return 999999.;\n    // Just return vertical distance -- good enough.\n    float y = sqrt(p.x * p.x * p.x * -4./27.);\n    return abs(abs(p.y) - y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = (uv * 2. - 1.) * 5.; // center at origin and zoom out.\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m = (m * 2. - 1.) * 5.;\n    \n    float a = m.x, b = m.y;\n        \n    float delta = -uv.y * uv.y + uv.x * uv.x * uv.x + a * uv.x + b;\n    float ad = abs(delta);\n\n    const float hueChange = 1.;\n    vec4 curveColor = vec4(\n        sin(ad * hueChange + iTime) * 0.5 + 0.5,\n        sin(ad * hueChange + iTime + PI * 2. / 3.) * 0.5 + 0.5,\n        sin(ad * hueChange + iTime + PI * 4. / 3.) * 0.5 + 0.5,\n\t    1.0);\n\n    // Thin black line in the middle\n    curveColor *= min(ad * 10., 1.);\n    \n    vec4 background = vec4(1.0);\n    \n    // Show where values of a,b would make the curve non-singular.\n    // When the determinant of a and b is zero, the curve is singular.\n    float dist = distRedLine(uv); // distance from red line\n    float color = min(dist * 20., 1.0);\n    background *= vec4(1., color, color, 1.);\n\n    // JG wanted rainbow colors.\n    // Rainbow on black:\n    // fragColor = vec4(r1, g1, b1, 1.0) * pow(0.8, ad*5.);\n    // Rainbow on white:\n    fragColor = mix(curveColor, background, 1. - pow(0.2, ad));\n\n    // a little fancy coloring...\n    // fragColor = vec4(ad, pow(abs(delta), 0.16), pow(abs(delta), 0.1), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}