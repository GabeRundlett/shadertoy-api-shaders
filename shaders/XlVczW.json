{
    "Shader": {
        "info": {
            "date": "1535365211",
            "description": "Another train trip; use mouse to override automatic view selection and look around.",
            "flags": 32,
            "hasliked": 0,
            "id": "XlVczW",
            "likes": 14,
            "name": "Train Ride 2",
            "published": 3,
            "tags": [
                "tunnel",
                "landscape",
                "tree",
                "snow",
                "train",
                "mountain"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 1083
        },
        "renderpass": [
            {
                "code": "// \"Train Ride 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define TREES  1   // optional trees\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo);\nfloat PrFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDst (vec2 p);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (vec2 vId);\n\n#define N_CAR 4\n\nmat3 carMat[N_CAR], trMat;\nvec3 carPos[N_CAR], trPos, qHit, trkAx, trkFx, trkAy, trkFy, sunDir;\nfloat dstFar, tCur, trMid, trLen, tunSep, tunLen, tunRad;\n#if TREES\nvec2 gId, trOff;\nfloat grHt, szFac, hgSize;\n#endif\nint idObj;\nconst int idRail = 1, idRbase = 2, idSlp = 3, idVia = 4, idTun = 5, idGrnd = 6, idCar = 11,\n   idFCar = 12, idBCar = 13, idWhl = 14, idCon = 15, idBLamp = 16, idFLamp = 17,\n   idTrnk = 21, idLvs = 22;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkAx, sin (trkFx * t)), 0.3 + dot (trkAy, sin (trkFy * t)), t);\n}\n\nvec3 TrackDir (float t)\n{\n  return vec3 (dot (trkFx * trkAx, cos (trkFx * t)), dot (trkFy * trkAy, cos (trkFy * t)), 1.);\n}\n\nfloat GrCentHt (vec2 p)\n{\n  return mix (- (3. + 0.2 * sin (0.1 * 2. * pi * p.y)) *\n     SmoothBump (tunLen + 20., tunSep - tunLen - 20., 20., mod (p.y, tunSep)),\n     0., smoothstep (6., 12., clamp (abs (p.x), 6., 12.)));\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrCentDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.xy -= TrackPath (p.z).xy;\n  q = p;\n  q.z = mod (q.z + 0.5 * tunSep, tunSep) - 0.5 * tunSep;\n  q.y -= -1. - 4. * smoothstep (20., 40., abs (q.x));\n  d = PrFlatCyl2Df (q.zy, tunLen - 4. + 0.03 * q.x * q.x, 4. + 0.02 * cos (0.2 * 2. * pi * q.x));\n  d = max (d, - PrFlatCyl2Df (p.yx, 0.7 * tunRad, tunRad));\n  DMINQ (idGrnd);\n  q = p;\n  d = q.y - GrCentHt (q.xz);\n  DMINQ (idGrnd);\n  return dMin;\n}\n\nfloat GrndHt (vec2 p)\n{\n  mat2 qRot;\n  vec2 q;\n  float wAmp, h, w;\n  w = smoothstep (2., 30., abs (p.x));\n  h = 0.;\n  if (w > 0.) {\n    q = 0.07 * p;\n    qRot = 2.2 * mat2 (0.8, -0.6, 0.6, 0.8);\n    wAmp = 25.;\n    for (int j = 0; j < 4; j ++) {\n      h += wAmp * Noisefv2 (q);\n      wAmp *= -0.35;\n      q *= qRot;\n    }\n  }\n  if (w < 1.) h = mix (GrCentHt (p), h, w);\n  return h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    p.x -= TrackPath (p.z).x;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0. || s > dstFar) break;\n    sLo = s;\n    s += max (0.01 * s, 0.4 * h);\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      p.x -= TrackPath (p.z).x;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  p.x -= TrackPath (p.z).x;\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy), GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat CarDf (vec3 p, float dir, float dMin)\n{\n  vec3 q;\n  float d, dy;\n  q = p;\n  dy = -0.25 * max (q.z * dir - 0.5, 0.);\n  d = PrRoundBoxDf (q - vec3 (0., dy, 0.), vec3 (0.3, 0.25 + dy, 1.55), 0.4);\n  DMINQ (((dir == 0.) ? idCar : ((dir < 0.) ? idFCar : idBCar)));\n  q = p;\n  q.xz = abs (q.xz);\n  q.z = abs (q.z - 0.9);\n  q -= vec3 (0.35, -0.6, 0.2);\n  d = PrCylDf (q.yzx, 0.16, 0.08);\n  DMINQ (idWhl);\n  q = p;\n  q.z = (dir == 0.) ? abs (q.z) - 1.8 : q.z + 1.8 * dir;\n  d = PrCylDf (q.xzy, 0.3, 0.5);\n  DMINQ (idCon);\n  if (dir < 0.) {\n    q = p;\n    q.yz -= vec2 (-0.25, -1.9);\n    d = PrCylDf (q, 0.1, 0.1);\n    DMINQ (idFLamp);\n  } else if (dir > 0.) {\n    q = p;\n    q.x = abs (q.x) - 0.2;\n    q.yz -= vec2 (-0.25, 1.9);\n    d = PrCylDf (q, 0.08, 0.1);\n    DMINQ (idBLamp);\n  }\n  return dMin;\n}\n\nfloat TrackDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 b;\n  float d;\n  p.xy -= TrackPath (p.z).xy;\n  q = p;\n  q.z = mod (q.z + 0.5 * tunSep, tunSep) - 0.5 * tunSep;\n  d = min (PrFlatCylAnDf (q.yxz, 0.7 * tunRad, tunRad, 0.05, tunLen),\n     PrBoxDf (q, vec3 (tunRad, 0.15, tunLen)));\n  DMINQ (idTun);\n  q = p;\n  q.y += 3.6;\n  q.z = mod (q.z + 2., 4.) - 2.;\n  b = abs (q.xz) - vec2 (0.35, 1.8);\n  d = max (max (abs (q.x) - 0.7, q.y - 3.82),\n     - max (length (q.yz + vec2 (clamp (q.y, -2., 2.), 0.)) - 5.5, min (b.x, b.y)));\n  DMINQ (idVia);\n  q = p;\n  q.y -= 0.17;\n  d = PrBox2Df (q.xy, vec2 (0.6, 0.05));\n  DMINQ (idRbase);\n  q = p;\n  q.y -= 0.15;\n  q.z = mod (q.z + 1., 2.) - 1.;\n  d = PrBoxDf (q, vec3 (0.6, 0.1, 0.15));\n  DMINQ (idSlp);\n  q = p;\n  q.x = abs (q.x) - 0.4;\n  q.y -= 0.33;\n  d = PrRoundBox2Df (q.xy, vec2 (0.012, 0.027), 0.02);\n  DMINQ (idRail);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = GrCentDf (p, dMin);\n  dMin = TrackDf (p, dMin);\n  for (int k = 0; k < N_CAR; k ++) {\n    dMin = CarDf (carMat[k] * (p - carPos[k]),\n       ((k == 0) ? -1. : ((k < N_CAR - 1) ? 0. : 1.)), dMin);\n  }\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.05, 0.2);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\n#if TREES\n\nfloat TreesDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, ht;\n  dMin = dstFar;\n  if (szFac > 0.) {\n    p.xz -= HexToPix (gId * hgSize) + trOff;\n    p.y -= grHt;\n    dMin /= szFac;\n    p /= szFac;\n    ht = 2.;\n    q = p;\n    q.y -= ht - 0.1;\n    d = PrCylDf (q.xzy, 0.15 - 0.03 * q.y / ht, ht);\n    DMINQ (idTrnk);\n    q = p;\n    q.y -= ht + 2.5;\n    d = PrCapsDf (q.xzy, 1. - 0.2 * q.y, 1.5);\n    DMINQ (idLvs);\n    dMin *= szFac;\n  }\n  return dMin;\n}\n\nvoid SetTrParms ()\n{\n  vec2 g, w;\n  float t;\n  szFac = 0.2 + 0.3 * Hashfv2 (17. * gId + 99.);\n  w = Hashv2v2 (33. * gId);\n  g = HexToPix (gId * hgSize);\n  g.x -= TrackPath (g.y).x;\n  trOff = hgSize * max (0., 0.5 * sqrt3 - szFac) * w.x * sin (2. * pi * w.y + vec2 (0.5 * pi, 0.));\n  t = abs (mod (g.y + 0.5 * tunSep, tunSep) - 0.5 * tunSep);\n  grHt = (t > tunLen) ? GrndHt (g + trOff) : 3.2;\n  if (! (grHt < -0.5 && abs (g.x) >  2. * tunRad || t < 0.5 * tunLen && abs (g.x) < 10.)) szFac = 0.;\n}\n\nfloat TreesRay (vec3 ro, vec3 rd, float dstLim)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = min (hv.x, min (hv.y, hv.z));\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    d = TreesDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + 0.002;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < 0.0005 || dHit > dstLim || p.y < -5. || rd.y > 0. && p.y > 25.) break;\n  }\n  if (d >= 0.0005) dHit = dstFar;\n  return dHit;\n}\n\nvec3 TreesNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (TreesDf (p + e.xxx), TreesDf (p + e.xyy), TreesDf (p + e.yxy), TreesDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat TreesSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-99.);\n  d = 0.01;\n  for (int j = 0; j < 20; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    h = TreesDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.1, 0.2);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\n#endif\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.3, 0.3, 0.9), vec3 (0.45, 0.45, 0.6), 1. - max (rd.y, 0.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  rd.y = abs (rd.y);\n  ro.xz += 2. * tCur;\n  col = SkyBg (rd) + 0.1 * vec3 (1., 1., 0.9) * pow (max (dot (rd, sunDir), 0.), 64.);\n  col = mix (col, vec3 (0.8), clamp (0.2 + Fbm2 (0.05 *\n     (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001))) * rd.y, 0., 1.));\n  return col;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4, carCol;\n  col4 = vec4 (0.);\n  carCol = vec4 (0.1, 0.3, 1., 0.3);\n  if (idObj == idTun) {\n    if (abs (qHit.x) < tunRad && (qHit.y < 0.7 * tunRad ||\n       length (vec2 (qHit.x, qHit.y - 0.7 * tunRad)) < tunRad))\n       col4 = (abs (qHit.x) < 0.03 && abs (mod (4. * qHit.z / tunLen + 0.5, 1.) - 0.5) < 0.1) ?\n       vec4 (0.8, 0.8, 0.4, -1.) : 0.2 * vec4 (0.5, 0.3, 0.1, 0.);\n    else col4 = vec4 (0.5, 0.3, 0.1, 0.);\n  } else if (idObj == idVia) {\n    col4 = vec4 (0.6, 0.4, 0.2, 0.05) * (0.6 + 0.4 * SmoothBump (0.05, 0.95, 0.02,\n       mod (4. * qHit.y, 1.)));\n  } else if (idObj == idRbase) {\n    col4 = vec4 (0.5, 0.3, 0.2, 0.05) * (1. - 0.5 * Noisefv2 (128. * qHit.xz));\n  } else if (idObj == idSlp) {\n    col4 = vec4 (0.65, 0.6, 0.6, 0.1);\n  } else if (idObj == idRail) {\n    col4 = vec4 (0.3, 0.3, 0.4, 0.4);\n  } else if (idObj == idCar || idObj == idFCar || idObj == idBCar) {\n    col4 = (abs (qHit.y - 0.22) < 0.26) ? vec4 (0.2, 0.2, 0.2, 0.3) :\n       ((abs (abs (qHit.y - 0.22) - 0.28) < 0.02) ? vec4 (0.2, 1., 0.2, 0.3) : carCol);\n  } else if (idObj == idCon) {\n    col4 = carCol;\n  } else if (idObj == idWhl) {\n    col4 = (length (qHit.yz) < 0.07) ? vec4 (0.2, 0.2, 0.2, 0.1) : vec4 (0.6, 0.6, 0.6, 0.3);\n  } else if (idObj == idFLamp) {\n    col4 = (length (qHit.xy) < 0.09) ? vec4 (1., 1., 0.8, -1.) : carCol;\n  } else if (idObj == idBLamp) {\n    col4 = (length (qHit.xy) < 0.07) ? vec4 (1., 0.2, 0., -1.) : carCol;\n  }\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, colS, vn, vnn;\n  float dstHit, dstObj, dstTrees, dstGrnd, dstMin, f, dFac, dkTun, sh;\n  int idObjS;\n#if TREES\n  vec2 vf;\n  int idObjT;\n#endif\n  bool isWind, isGrnd, isCar;\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  dstMin = min (min (dstGrnd, dstObj), dstFar);\n#if TREES\n  idObjT = idObj;\n  dstTrees = TreesRay (ro, rd, dstMin);\n  if (dstTrees > dstObj) idObj = idObjT;\n  dstMin = min (dstMin, dstTrees);\n#else\n  dstTrees = dstFar;\n#endif\n  isWind = false;\n  isGrnd = false;\n  if (dstMin < dstFar) {\n    col4 = vec4 (0.);\n    if (dstTrees < min (dstGrnd, dstObj)) {\n#if TREES\n      ro += dstTrees * rd;\n      gId = PixToHex (ro.xz / hgSize);\n      vn = TreesNf (ro);\n      if (idObj == idTrnk) {\n        col4 = vec4 (0.4, 0.2, 0.1, 0.);\n        vf = vec2 (32., 2.);\n      } else if (idObj == idLvs) {\n        col4.rgb = mix (vec3 (0.2, 0.4, 0.2), vec3 (0.9, 0.9, 0.95), 0.2 +\n           0.8 * smoothstep (-0.6, -0.4, vn.y));\n        col4.a = 0.2;\n        vf = vec2 (16., 2.);\n      }\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      col = col4.rgb * (0.3 + 0.7 * max (0., dot (sunDir, vn))) +\n         col4.a * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 16.);\n#endif\n    } else {\n      dkTun = 1.;\n      if (dstObj < dstGrnd) {\n        ro += dstObj * rd;\n        vn = ObjNf (ro);\n        vnn = vn;\n        dkTun = max (SmoothBump (tunLen, tunSep - tunLen, 3., mod (ro.z, tunSep)),\n           step (1.7 * tunRad + 0.5, ro.y));\n        if (idObj == idGrnd) isGrnd = true;\n        else {\n          col4 = ObjCol ();\n          col = col4.rgb;\n          if (idObj == idTun || idObj == idVia) vn = VaryNf (8. * ro, vn, 1.);\n          isCar = (idObj == idCar || idObj == idFCar || idObj == idBCar);\n          if (dkTun == 0.) {\n            col += vec3 (1., 1., 0.8) * (0.1 + 0.4 * max (dot (normalize (vn.xy),\n               normalize (vec2 (0., 1.7 * tunRad) - (ro.xy - TrackPath (ro.z).xy))), 0.)) * \n               (1. - smoothstep (0.1, 0.3, abs (mod (4. * ro.z / tunLen + 0.5, 1.) - 0.5)));\n            if (! isCar) col *= 0.3 + 0.7 * smoothstep (-1., 0., abs (ro.z - trMid) - 0.5 * trLen);\n          }\n          if (col4.a >= 0.) {\n            col = col * mix (0.3, 0.1 + 0.1 * max (vn.y, 0.) + 0.8 * max (0., dot (sunDir, vn)), dkTun) +\n               col4.a * dkTun * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 32.);\n            if (dkTun == 1. && isCar) {\n              isWind = (idObj == idCar && (abs (qHit.y - 0.22) < 0.26 &&\n                 abs (mod (1.5 * qHit.z, 1.) - 0.5) > 0.02 || abs (qHit.x) < 0.4 && abs (qHit.z) < 0.7) ||\n                 (idObj == idFCar || idObj == idBCar) && (abs (qHit.y - 0.22) < 0.26 &&\n                 (idObj == idFCar && qHit.z < -0.5 || idObj == idBCar && qHit.z > 0.5 ||\n                 abs (mod (1.5 * qHit.z, 1.) - 0.5) > 0.02)));\n              col = mix (col, SkyCol (ro, reflect (rd, vn)), (isWind ? 0.7 :\n                 0.2 * smoothstep (0.1, 0.3, vn.y)));\n            }\n          }\n        }\n      } else {\n        ro += dstGrnd * rd;\n        vn = GrndNf (ro, dstGrnd);\n        isGrnd = true;\n      }\n    }\n    dFac = (1. - smoothstep (0.3, 0.4, min (dstObj, dstGrnd) / dstFar)) *\n       (1. - smoothstep (-0.2, -0.1, dot (rd, vn)));\n    if (isGrnd) {\n      vnn = vn;\n      col = vec3 (0.);\n      colS = vec3 (0.);\n      if (vnn.y < 0.8) {\n        f = length (ro.xz);\n        col = mix (vec3 (0.37, 0.35, 0.25), vec3 (0.27, 0.25, 0.3),\n           mix (0.5, smoothstep (0.2, 0.8, Fbm2 (vec2 (8. * f, ro.y))), dFac));\n        col *= mix (1., 0.8 + 0.2 * Noisefv2 (4. * vec2 (f, ro.y)), dFac);\n        vn = VaryNf (0.5 * vec3 (1., 0.05, 1.) * ro, vnn,\n           6. * (1. - smoothstep (0.4, 0.85, vnn.y)) * dFac);\n        vn = VaryNf (4. * ro, vn, 0.5 * (1. - smoothstep (0.8, 1., dstGrnd / 25.)));\n      } else {\n        vn = VaryNf (2. * ro, vnn, smoothstep (0.75, 0.85, vnn.y) * dFac);\n      }\n    }\n    if (dstObj < dstGrnd && idObj == idTun && vnn.y > 0.65 && qHit.y > 1.) isGrnd = true;\n    if (isGrnd) {\n      if (vnn.y > 0.65) colS = mix (vec3 (0.8, 0.8, 0.85), vec3 (0.9, 0.9, 0.95),\n           mix (0.5, smoothstep (0.2, 0.8, Fbm3 (ro)), dFac));\n      col = mix (col, colS, smoothstep (0.75, 0.8, vnn.y + 0.1 * Fbm2 (2. * ro.xz)));\n      col *= 0.1 + 0.1 * max (vn.y, 0.) + 0.8 * max (dot (sunDir, vn), 0.);\n    }\n    if (dkTun > 0. && col4.a >= 0.) {\n      idObjS = idObj;\n      sh = ObjSShadow (ro, sunDir);\n      if ((idObjS == idRbase || idObjS == idSlp || idObjS == idRail) && sh < 1.) sh *= 0.5;\n#if TREES\n      sh = min (sh, TreesSShadow (ro, sunDir));\n#endif\n      col *= min (sh, 1. - 0.5 * max (1.2 * Fbm2 (0.1 * ro.xz - tCur * vec2 (0.15, 0.)) - 0.2, 0.));\n    }\n    col = mix (SkyBg (rd), col, exp (32. * min (0., 0.7 - dstMin / dstFar)));\n  } else {\n    col = SkyCol (ro, rd);\n  }\n  return clamp (mix (col, vec3 (col.b), 0.2) * mix (1., smoothstep (0., 1., Maxv3 (col)), 0.2), 0., 1.);\n}\n\nvoid TrainCarPM (float t)\n{\n  vec3 vp, vd, ve, vf;\n  trPos = TrackPath (t);\n  vp = TrackDir (t);\n  vd = - normalize (vec3 (vp.x, 0., vp.z));\n  ve = normalize (vec3 (0., vp.yz));\n  trPos.y += 1.3;\n  trMat = mat3 (vec3 (1., 0., 0.), vec3 (0., ve.z, - ve.y), ve) *\n      mat3 (vec3 (- vd.z, 0., vd.x), vec3 (0., 1., 0.), vd);\n}\n\n#define N_VU 5\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur, stDat;\n  vec3 ro, rd, vd, vDir, col;\n  vec2 canvas, uv, ori, ca, sa, mSize, mMid[N_VU], ut[N_VU];\n  float nVu, el, az, zmFac, vuMode, centMode, asp, smMode, cGap, tz, trVel, dx, gh;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  stDat = Loadv4 (vec2 (0., 0.));\n  mPtr.xyz = stDat.xyz;\n  vuMode = stDat.w;\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.);\n  nVu = float (N_VU);\n  centMode = (vuMode >= 0.) ? vuMode : mod (floor (tCur / 30.), nVu);\n  asp = canvas.x / canvas.y;\n  mSize = vec2 (asp / nVu, 1. / (nVu + 1.));\n  for (int k = 0; k < N_VU; k ++) {\n    mMid[k] = - vec2 (mSize.x / mSize.y, 1.) + vec2 (2 * (k + 1), 1) * mSize;\n    ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  smMode = -1.;\n  for (int k = 0; k < N_VU; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      smMode = float (k);\n      break;\n    }\n  }\n  if (smMode >= 0.) {\n    vuMode = smMode;\n  } else {\n    vuMode = centMode;\n    uv.y -= mSize.y;\n    uv /= 1. - mSize.y;\n  }\n  trkAx = vec3 (1.9, 2.9, 4.3);\n  trkFx = 0.15 * vec3 (0.23, 0.17, 0.13);\n  trkAy = 0.03 * vec3 (1.9, 2.9, 4.3);\n  trkFy = 0.5 * vec3 (0.23, 0.17, 0.13);\n  tunSep = 150.;\n  tunLen = 15.;\n  tunRad = 1.4;\n#if TREES\n  hgSize = 1.5;\n#endif\n  trVel = 8.;\n  trMid = trVel * tCur;\n  vDir = TrackDir (trMid);\n  cGap = 1.9 * 2.2 * sqrt (1. - vDir.x * vDir.x);\n  trLen = float (N_CAR) * cGap;\n  for (int n = 0; n < N_CAR; n ++) {\n    TrainCarPM (trMid - 0.5 * float (2 * n - N_CAR + 1) * cGap);\n    carPos[n] = trPos - vec3 (0., 0.15, 0.); \n    carMat[n] = trMat;\n  }\n  az = 0.;\n  el = -0.01;\n  if (smMode == -1. && mPtr.z > 0. && mPtr.y > -0.5 + (1. / (nVu + 1.))) {\n    az += 2. * pi * mPtr.x;\n    el += 0.25 * pi * mPtr.y;\n  }\n  zmFac = 3.;\n  if (vuMode == 0.) {\n    tz = floor (trMid / tunSep) * tunSep;\n    ro = TrackPath (tz + 0.5 * tunSep);\n    dx = 2. * step (2.5, mod (tz / tunSep, 6.)) - 1.;\n    ro.x += 13. * dx;\n    gh = GrndHt (ro.xz);\n    ro.xy += vec2 (-3. * dx, min (5. + 0.2 * gh * gh, 20.));\n    vd = TrackPath (trMid) - ro;\n  } else if (vuMode == 1.) {\n    tz = trMid - 0.5 * trLen - 8.;\n    ro = TrackPath (tz);\n    ro.y += 2.;\n    vd = TrackDir (tz);\n    vd.y = 0.;\n  } else if (vuMode == 2.) {\n    tz = trMid + 0.5 * trLen + 8.;\n    ro = TrackPath (tz);\n    ro.y += 2.;\n    vd.xz = Rot2D (TrackDir (tz).xz, pi);\n    vd.y = 0.;\n  } else if (vuMode == 3.) {\n    tz = trMid + 0.5 * trLen + 6.;\n    ro = TrackPath (tz);\n    ro.y += 1.5;\n    vd.xz = TrackDir (tz).xz;\n    vd.y = 0.;\n  } else if (vuMode == 4.) {\n    tz = trMid - 25.;\n    ro = TrackPath (tz);\n    ro.y += 7.;\n    vd = TrackPath (trMid + 0.6 * trLen) - ro;\n  }\n  vd = normalize (vd);\n  ori = vec2 (el + asin (vd.y), az + 0.5 * pi - atan (vd.z, vd.x));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (0., 3., 1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.01 * 2. * pi * tCur);\n  dstFar = 250.;\n  col = pow (ShowScene (ro, rd), vec3 (0.8));\n  for (int k = 0; k < N_VU; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = (float (k) == centMode) ? vec3 (0.8, 0.3, 0.3) : vec3 (0.5, 0.8, 0.5);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo)\n{\n  return length (p - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo;\n}\n\nfloat PrFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h)\n{\n  return max (abs (length (p.xy - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo) - w, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#if TREES\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDst (vec2 p)\n{\n  p = abs (p);\n  return 0.5 * sqrt3 - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\n#endif\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  if (f > 0.001) {\n    g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n    n += f * (g - n * dot (n, g));\n    n = normalize (n);\n  }\n  return n;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Train Ride 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 Loadv4 (vec2 vId);\n\nconst float pi = 3.14159;\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\n#define N_VU 5\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec2 canvas, iFrag;\n  float tCur, tMouse, nStep, nVu, vuMode;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (fragCoord.x >= 2. || fragCoord.y >= 1.) discard;\n  iFrag = floor (fragCoord);\n  if (iFrame > 5) {\n    stDat = Loadv4 (vec2 (0., 0.));\n    mPtrP.xyz = stDat.xyz;\n    vuMode = stDat.w;\n    stDat = Loadv4 (vec2 (1., 0.));\n    tMouse = stDat.x;\n  } else {\n    mPtrP = mPtr;\n    vuMode = -1.;\n    tMouse = tCur;\n  }\n  nVu = float (N_VU);\n  if (mPtr.z > 0.) {\n    if (mPtr.y < -0.5 + (1. / (nVu + 1.))) vuMode = floor (nVu * clamp (mPtr.x + 0.5, 0., 0.99));\n    tMouse = tCur;\n  } else if (tCur - tMouse > 10.) vuMode = -1.;\n  if (iFrag.y == 0.) {\n    if (iFrag.x == 0.) fragColor = vec4 (mPtr.xyz, vuMode);\n    else  if (iFrag.x == 1.) fragColor = vec4 (tMouse, 0., 0., 0.);\n  }\n}\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}