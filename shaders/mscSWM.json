{
    "Shader": {
        "info": {
            "date": "1679914875",
            "description": "interpolation",
            "flags": 0,
            "hasliked": 0,
            "id": "mscSWM",
            "likes": 13,
            "name": "voronoi with noise ",
            "published": 3,
            "tags": [
                "interpolation"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\nfloat f_n_by_o(vec2 o){\n    o.x += o.x*0.1;\n    float n =  sin(\n        o.x * o.y + 1.234 * 3.13347\n    ) * 1.2341 *o.x + 12.3414*o.y;\n    return fract((fract(n)+o.x*o.x+o.y*o.y));\n}\nfloat f_n_noise_interpolated(\n    vec2 o\n){\n    vec2 o_xp0yp0 = o + vec2(0.,0.);\n    vec2 o_xp0yp1 = o + vec2(0.,1.);\n    vec2 o_xp1yp0 = o + vec2(1.,0.);\n    vec2 o_xp1yp1 = o + vec2(1.,1.);\n\n    float n_xp0yp0 = f_n_by_o(floor(o_xp0yp0));\n    float n_xp0yp1 = f_n_by_o(floor(o_xp0yp1));\n    float n_xp1yp0 = f_n_by_o(floor(o_xp1yp0));\n    float n_xp1yp1 = f_n_by_o(floor(o_xp1yp1));\n\n    vec2 o_fract = fract(o);\n    float n1 = \n        (1.-o_fract.x) * n_xp0yp0\n        + o_fract.x * n_xp1yp0;\n    float n2 = \n        (1.-o_fract.x) * n_xp0yp1\n        + o_fract.x * n_xp1yp1;\n    float n3 = \n        (1.-o_fract.y) * n1\n        + o_fract.y * n2;\n    \n    //float n_1 = mix(n_xp0yp0, n_xp1yp0, (o_fract.x));\n    //float n_2 = mix(n_xp0yp1, n_xp1yp1, (o_fract.x));\n    //float n_3 = mix(n_1, n_2, (o_fract.y));\n    return n3; \n}\nfloat f_n_noise_interpolated_stacked(\n    vec2 o, \n    float n_its, \n    float n_it_factor_freq,\n    float n_it_factor_amp\n){\n    float n_freq = 1.;\n    float n_amp = 1.;\n    float n_sum = 0.;\n    float n_factor_amp_sum = 0.;\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        n_freq *= n_it_factor_freq; \n        n_amp *= n_it_factor_amp;\n        n_factor_amp_sum += n_amp;\n        n_sum += f_n_noise_interpolated(o*n_freq)*n_amp;\n    }\n    return n_sum/n_factor_amp_sum;\n}\nfloat f_n_noise_interpolated_blurred(\n    vec2 o_fc, \n    float n_intensity_nor\n){\n    vec2 o_scl_krn = vec2(3.);\n    float n_sum = 0.;\n    vec2 o_scl_krn_half = floor(o_scl_krn/2.);\n    float n_noise_interpolated = f_n_noise_interpolated(\n        o_fc\n    );\n    for(float n_x = 0.; n_x < o_scl_krn.x; n_x+=1.){\n        for(float n_y = 0.; n_y < o_scl_krn.x; n_y+=1.){\n            vec2 o_trn = vec2(\n                n_x -o_scl_krn_half.x,\n                n_y -o_scl_krn_half.y \n            );\n            n_sum += f_n_noise_interpolated(\n                o_fc+o_trn\n            );\n        }   \n    }\n    float n_blurred = n_sum / (o_scl_krn.x * o_scl_krn.y);\n    return n_intensity_nor * n_blurred + (1.-n_intensity_nor)*n_noise_interpolated; \n}\nfloat f_n_noise_interpolated_blurred_stacked(\n    vec2 o, \n    float n_its, \n    float n_it_factor_freq,\n    float n_it_factor_amp\n){\n    float n_freq = 1.;\n    float n_amp = 1.;\n    float n_sum = 0.;\n    float n_factor_amp_sum = 0.;\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        n_freq *= n_it_factor_freq; \n        n_amp *= n_it_factor_amp;\n        n_factor_amp_sum += n_amp;\n        n_sum += f_n_noise_interpolated_blurred(o*n_freq, 1.)*n_amp;\n    }\n    return n_sum/n_factor_amp_sum;\n}\n\nvec2 f_o_rotdt(vec2 o, float n_radians) {\n  float s = sin(n_radians);\n  float c = cos(n_radians);\n\n  return o * mat2(\n    c, -s,\n    s, c\n  );\n}\n\nfloat f_n_noise_interpolated_rotated_layered(\n    vec2 o,\n    float n_radians \n){\n    float n1 = f_n_noise_interpolated(\n        o\n    );\n    float n2 = f_n_noise_interpolated(\n        f_o_rotdt(o , n_radians)\n    );\n    float n3 = n1/2. + n2/2.;\n    n3 = n1*n1 + (1.-n1)*n2;\n    return n3;\n}\nfloat f_n_noise_interpolated_rotated_stacked(\n    vec2 o, \n    float n_its, \n    float n_it_factor_freq,\n    float n_it_factor_amp, \n    float n_it_angrotnor\n){\n    float n_freq = 1.;\n    float n_amp = 1.;\n    float n_sum = 0.;\n    float n_factor_amp_sum = 0.;\n    float n_angrotnor = 1.;\n    #ifndef n_tau\n        float n_tau = 6.2831;\n    #endif\n\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        n_freq *= n_it_factor_freq; \n        n_amp *= n_it_factor_amp;\n        n_angrotnor *= n_it_angrotnor;\n        n_factor_amp_sum += n_amp;\n        n_sum += f_n_noise_interpolated(f_o_rotdt(o*n_freq, n_angrotnor*n_tau))*n_amp;\n    }\n    return n_sum/n_factor_amp_sum;\n}\nfloat f_n_noise_interpolated_translated_rotated_blurred_stacked(\n    vec2 o, \n    float n_its, \n    float n_it_factor_freq,\n    float n_it_factor_amp, \n    vec2 o_trn_factor, \n    float n_it_angrotnor, \n    float n_it_blurfactor\n){\n    float n_freq = 1.;\n    float n_amp = 1.;\n    float n_sum = 0.;\n    float n_factor_amp_sum = 0.;\n    float n_angrotnor = 1.;\n    float n_blur_int_nor = 1.;\n    vec2 o_trn = vec2(1.);\n    #ifndef n_tau\n        float n_tau = 6.2831;\n    #endif\n\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        n_freq *= n_it_factor_freq; \n        n_amp *= n_it_factor_amp;\n        n_angrotnor *= n_it_angrotnor;\n        n_factor_amp_sum += n_amp;\n        n_it_blurfactor *= n_blur_int_nor;\n        o_trn *= o_trn_factor;\n        n_sum += \n            f_n_noise_interpolated_blurred(\n                f_o_rotdt((o+o_trn)*n_freq, n_angrotnor*n_tau), \n                n_it_blurfactor-1.\n            )*n_amp;\n    }\n    return n_sum/n_factor_amp_sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_fc = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n    fragColor = vec4(1.0);\n    vec2 o = o_fc*20.+vec2(sin(iTime*.5), cos(iTime*.5))*2.;// vec2 o, \n    float n_group_a_n_noiseparam = 7.;\n    float[] a_n_noiseparam = float[](\n            5.,// float n_its, \n            2.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp,\n            1., // o_trn_factor[0]\n            1., // o_trn_factor[1]\n            0.0,// float n_it_angrotnor, \n            1.0,// float n_it_blurfactor, \n\n            5.,// float n_its, \n            9.,// float n_it_factor_freq,\n            .5,// float n_it_factor_amp, \n            1., // o_trn_factor[0]\n            1., // o_trn_factor[1]\n            0.4,// float n_it_angrotnor, \n            1.0,// float n_it_blurfactor, \n\n            5.,// float n_its, \n            3.,// float n_it_factor_freq,\n            0.9,// float n_it_factor_amp, \n            1., // o_trn_factor[0]\n            1., // o_trn_factor[1]\n            0.0,// float n_it_angrotnor, \n            2.0,// float n_it_blurfactor, \n\n            3.,// float n_its, \n            2.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp, \n            1., // o_trn_factor[0]\n            1., // o_trn_factor[1]\n            0.3,// float n_it_angrotnor, \n            1.0,// float n_it_blurfactor, \n\n            5.,// float n_its, \n            3.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp, \n            1., // o_trn_factor[0]\n            1., // o_trn_factor[1]\n            iTime*.1,// float n_it_angrotnor, \n            2.0,// float n_it_blurfactor, \n\n            5.,// float n_its, \n            3.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp, \n            1., // o_trn_factor[0]\n            1., // o_trn_factor[1]\n            1.+f_n_by_o(o)*.02,// float n_it_angrotnor, \n            2.0,// float n_it_blurfactor, \n\n            5.,// float n_its, \n            3.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp, \n            f_n_by_o(o)*1.23, // o_trn_factor[0]\n            f_n_by_o(o)*3.12, // o_trn_factor[1]\n            1.+f_n_by_o(o)*.02,// float n_it_angrotnor, \n            2.0,// float n_it_blurfactor, \n\n            6.,// float n_its, \n            2.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp, \n            0., // o_trn_factor[0]\n            0., // o_trn_factor[1]\n            1.,// float n_it_angrotnor, \n            0.0,// float n_it_blurfactor, \n            \n            6.,// float n_its, \n            2.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp, \n            0., // o_trn_factor[0]\n            0., // o_trn_factor[1]\n            .4,// float n_it_angrotnor, \n            0.,// float n_it_blurfactor, \n\n            6.,// float n_its, \n            2.,// float n_it_factor_freq,\n            0.5,// float n_it_factor_amp, \n            f_n_by_o(o)*0.2, // o_trn_factor[0]\n            f_n_by_o(o)*0.2, // o_trn_factor[1]\n            1.,// float n_it_angrotnor, \n            0.0// float n_it_blurfactor, \n\n    );\n    float n_len_a_n_noiseparam = float(a_n_noiseparam.length());\n    float n_len_a_n_noiseparam_group = float(n_len_a_n_noiseparam)/n_group_a_n_noiseparam;\n    float n_idx_switch_time = mod(floor(iTime), n_len_a_n_noiseparam_group);\n    if(iMouse.z > 0.){\n       n_idx_switch_time = floor((iMouse.x / iResolution.x) * n_len_a_n_noiseparam_group);\n    }\n    float n_idx_a_n_noiseparam = n_idx_switch_time*n_group_a_n_noiseparam;\n    float n_index = \n        floor(((fragCoord.x/iResolution.x)) / (1. / float(n_len_a_n_noiseparam_group)))\n        * n_group_a_n_noiseparam;\n    // n_index = 5.;\n    float n = f_n_noise_interpolated_translated_rotated_blurred_stacked(\n            o,// vec2 o, \n            a_n_noiseparam[int(n_index+0.)],\n            a_n_noiseparam[int(n_index+1.)],\n            a_n_noiseparam[int(n_index+2.)],\n            vec2 (\n                a_n_noiseparam[int(n_index+3.)],\n                a_n_noiseparam[int(n_index+4.)]\n            ),\n            a_n_noiseparam[int(n_index+5.)],\n            a_n_noiseparam[int(n_index+6.)]\n    );\n    float noise_switching_with_time = f_n_noise_interpolated_translated_rotated_blurred_stacked(\n            o,// vec2 o, \n            a_n_noiseparam[int(n_idx_a_n_noiseparam+0.)],\n            a_n_noiseparam[int(n_idx_a_n_noiseparam+1.)],\n            a_n_noiseparam[int(n_idx_a_n_noiseparam+2.)],\n            vec2 (\n                a_n_noiseparam[int(n_idx_a_n_noiseparam+3.)],\n                a_n_noiseparam[int(n_idx_a_n_noiseparam+4.)]\n            ),\n            a_n_noiseparam[int(n_idx_a_n_noiseparam+5.)],\n            a_n_noiseparam[int(n_idx_a_n_noiseparam+6.)]\n    );\n    fragColor = vec4(n);\n    float n_h_noiseprev = 0.25;\n\n    if(o_fc.y > -n_h_noiseprev){\n        float n_its = 5.;\n        float n_max = 0.;\n        for(float n_it = 0.; n_it < n_its; n_it+=1.){\n            float n_it_nor = n_it / n_its;\n            float n_radius = 0.25;\n            float n_radians = n_it_nor*n_tau;\n            vec2 o_p = vec2(\n                sin(n_radians)*n_radius,\n                cos(n_radians)*n_radius\n            )+vec2(0., ((1.-n_h_noiseprev)/2.)-.5/2.);\n            vec2 o_diff = o_p - o_fc;\n            float n_ang_nor = fract(atan(o_diff.y, o_diff.x)/n_tau+.5);\n            float n = length(o_diff);\n            n = 1.-n;\n            // n *= (sin(n_ang_nor*n_tau*20.)*.5+.5)*.4+1.;\n            float n_noiserand  = f_n_noise_interpolated_translated_rotated_blurred_stacked(\n                    vec2(sin(n_ang_nor*n_tau), cos(n_ang_nor*n_tau))\n                    + vec2(n_it_nor*5., n_it_nor*3.)\n                    + vec2(sin(iTime), cos(iTime)), \n                    a_n_noiseparam[int(n_idx_a_n_noiseparam+0.)],\n                    a_n_noiseparam[int(n_idx_a_n_noiseparam+1.)],\n                    a_n_noiseparam[int(n_idx_a_n_noiseparam+2.)],\n                    vec2 (\n                        a_n_noiseparam[int(n_idx_a_n_noiseparam+3.)],\n                        a_n_noiseparam[int(n_idx_a_n_noiseparam+4.)]\n                    ),\n                    a_n_noiseparam[int(n_idx_a_n_noiseparam+5.)],\n                    a_n_noiseparam[int(n_idx_a_n_noiseparam+6.)]\n            );\n            n = n * (1. + (n_noiserand*.05));\n            n = pow(n, 20.);\n\n            \n            if(n > n_max){\n                n_max = n;\n            }\n        }\n\n        fragColor = vec4(n_max);\n    }\n\n    vec2 o_abs = abs(\n        (fragCoord.xy/iResolution.xy)\n            *vec2(n_len_a_n_noiseparam_group*2., 2./n_h_noiseprev)\n            -vec2(1.+2.*n_idx_switch_time, 1.)\n    );\n    float n_dist_sqr = max(o_abs.x, o_abs.y);\n    n_dist_sqr = smoothstep(0.03, 0.0, abs(n_dist_sqr-.98));\n    fragColor += vec4(n_dist_sqr);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}