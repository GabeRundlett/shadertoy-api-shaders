{
    "Shader": {
        "info": {
            "date": "1588354880",
            "description": "experimenting with hypercentric optics as described by the applied science video here: https://www.youtube.com/watch?v=iJ4yL6kaV1A\n\nuse the mouse to rotate",
            "flags": 0,
            "hasliked": 0,
            "id": "tsffDM",
            "likes": 9,
            "name": "Hypercentric Optics",
            "published": 3,
            "tags": [
                "hypercentric",
                "pericentric",
                "appliedscience",
                "domino",
                "dominos"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat super(vec3 p) {\n    return sqrt(length(p*p));\n}\n\nfloat box(vec3 p, vec3 d) {\n    vec3 q = abs(p)-d;\n    return super(max(vec3(0), q)) + min(0., max(q.x, max(q.y, q.z)));\n}\n\nfloat linedist(vec3 p, vec3 a, vec3 b) {\n    float k = dot(p-a,b-a)/dot(b-a,b-a);\n    return distance(p, mix(a,b,clamp(k,0.,1.)));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(ax,p)*ax, p, cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = max(0., k-abs(b-a))/k;\n    return min(a,b)-h*h*h*k/6.;\n}\n\nint mat;\nfloat domino(vec3 p, mat3 topholes, mat3 bottomholes) {\n    float body = box(p, vec3(0.0,0.4,0.9))-0.2;\n    float holes = linedist(p, vec3(.2,0.45,0), vec3(0.2,-0.45,0))-0.04; //divider\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            vec2 holepos = vec2(float(i-1), float(j-1))*0.3;\n            if (topholes[i][j] == 1.) {\n                holes = min(holes, length(p-vec3(.2,holepos+vec2(0.,0.55)))-0.08);\n            }\n            if (bottomholes[i][j] == 1.) {\n                holes = min(holes, length(p-vec3(.2,holepos+vec2(0.,-0.55)))-0.08);\n            }\n        }\n    }\n    mat = -body < holes ? 1 : 0;\n    return -smin(-body, holes, 0.05);\n}\n\nfloat scene(vec3 p) {\n    float table = box(p-vec3(0,0,-1.2), vec3(3,3,0.05))-0.05;\n    float d1 = domino(erot(p-vec3(-1,0,0),vec3(0,0,1),-0.05), mat3(0,0,1,0,1,0,1,0,0), mat3(1,0,1,0,1,0,1,0,1));\n    int d1mat = mat;\n    float d2 = domino(erot(p-vec3(1,0,0),vec3(0,0,1),0.1), mat3(1,0,1,0,0,0,1,0,1), mat3(0,0,0,0,1,0,0,0,0));\n    int d2mat = mat;\n    float dominos = min(d1,d2);\n    mat = d1 < d2 ? d1mat : d2mat;\n    mat = dominos < table ? mat : 2;\n    return min(dominos,table);\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])) );\n}\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\nvec3 srgb(float k) {\n    return vec3(k*k);\n}\n\nvec3 trilinear_texture(vec3 p, vec3 n) {\n    return mix(mix(texture(iChannel0,p.xz), texture(iChannel0,p.yz), n.x*n.x), texture(iChannel0,p.xy), n.z*n.z).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n\n    //when centricity is negative, instead of camera rays diverging from the\n    //image plane, they instead converge. you can image this as the image plane\n    //being a refractive object that causes the camera rays to switch directions\n    float centricity = cos(iTime)*0.5;\n    vec3 cam = normalize(vec3(1,uv*centricity));\n    vec3 init = vec3(-5,uv*(4.-centricity*2.));\n\n   \tfloat yrot = 0.1;\n    float zrot = 3.14;\n    if (iMouse.z > 0.) {\n        yrot += -4.*mouse.y;\n        zrot += 4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n\n    vec3 p = init;\n    bool hit = false;\n    for (int i = 0; i < 500 && !hit; i++) {\n        float dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n        if (distance(p, init) > 100.) break;\n    }\n    int locmat = mat;\n\tvec3 n = norm(p);\n    vec3 r = reflect(cam, n);\n    float ao = smoothstep(-1.,1.,scene(p+n*0.1)/.1);\n    float specao = smoothstep(0.,1.,scene(p+r*0.3)/.3);\n    float diff = ao*length(sin(n*2.5)*0.5+0.5)/sqrt(3.);\n    float spec = length(sin(r*2.5)*0.5+0.5)/sqrt(3.);\n    float diffbright = locmat == 0 ? 0.05 : 1.;\n    float specbright = locmat == 2 ? 0.1 : 1.5;\n  \n    p += trilinear_texture(p*0.5,n)*0.1;\n    vec3 tex = trilinear_texture(p,n)*0.25 + trilinear_texture(p*0.5,n)*0.5 + trilinear_texture(p*0.2,n);\n    vec3 diffcol = locmat == 2 ? (tex.x*0.5+0.1)*srgb(0.9, 0.85, 0.8) : srgb(0.95);\n    specbright += tex.x*tex.x*0.2;\n    vec3 col = mix(diffcol*0.1, diffcol, diff)*diffbright + pow(spec, 10.)*specbright*specao;\n    fragColor.xyz = hit ? col : vec3(pow(length(sin(cam*2.5)*0.5+0.5)/sqrt(3.), 10.)+0.01);\n    fragColor.xyz = sqrt(fragColor.xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}