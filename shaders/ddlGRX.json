{
    "Shader": {
        "info": {
            "date": "1666577379",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "ddlGRX",
            "likes": 4,
            "name": "Fractal mosaic 29 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5),\n   \n    a1 =\n        a+a2\n        //a+a2+floor(a2.x)\n    ;\n\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n        //abs(fract((a1+1.)*(a2.x+a2.y))-.5)\n        //abs(fract((a1+fmod(a.y,2.))*(a2.x+a2.y))-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = true;\n    for(int k = 0; k < 6; k++){\n        t3 = uv.x < uv.y;\n        uv =\n            abs(.5+uv+t2)\n            //abs(.5*float(t3)+uv+t2)\n        ;\n        //uv = abs(fract(vec2(uv)*1.5)-.5)/1.5;\n        //uv += (distance(floor(uv),round(uv+.5)));\n        \n        //uv.x += fpow(uv.x,2.)/2.;\n\n        t2 =\n            -triangle_wave(uv-.5*sign(uv.x-uv.y))\n            //-triangle_wave(uv-.5)/(.5+fmod(t2.x,2.))\n        ;\n        uv =\n            t2-triangle_wave(uv.yx)\n            //abs(.5+t2+triangle_wave(uv.yx))\n        ;\n        \n        //uv *= -sign(uv.x-uv.y);\n\n\n        float c1 =\n            uv.x-uv.y\n            //abs(uv.x-uv.y)\n            //distance(uv,t2)\n            //uv.x*uv.y\n            //length(uv)\n        ;\n        col = col.yzx;\n        vec3 col1 = col;\n        if(t3 || uv.y < uv.x) col1 = abs(col.yzx-vec3(col.yz,c1));\n        if(!t3 || uv.y > uv.x) col1 = abs(col1-max(col,vec3(col.yz,c1)));\n        col = col1;\n        //if(uv.x<uv.y) col=col.yzx;\n        //if(t2.x>t2.y) {uv=-uv.yx;t2=-t2.yx;}\n    }\n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\n\nvec2 mainSound(int samp, float time){\n  float tempo = .5;\n  time /= tempo;\n  float s1 =\n      4.;\n  //time += (floor(time*s1))/s1;\n  float s2 = 8.,\n  m4 =\n      fmod(floor(time*s1)*floor(time/s1),2.)\n  ,\n  t=\n      //time/(1.+m4)\n      time/(2.-m4)\n  ;\n  //t += floor(t*4.)*4.;\n  float m1 =\n      fmod(floor(t/s1)*floor(t*s1),s2)\n      //fmod(floor(t/(1.+m4))*floor(t*s1),s2)\n      //fmod(floor(t/s1)*(floor(t*s1)+floor(t)),s2)\n  ,\n  m3 =\n      fmod(floor(t*(s1))/(m1+.5),s2);\n  /*\n  for(int i = 0; i < 3; i++){\n      t += (floor(mod(((t*2.)),2.)))/2.;\n  }\n  */\n  t /=\n      (1.+fmod(t/s1,2.))/s1\n      //(1.+fmod(t/(1.+m1),2.))\n  ;\n  //t += fmod(t/8.,8.);\n\n  float m2 =\n      1. + fmod(t,s1)\n  ;\n  \n  float a= //instruments\n      //sqrt(1.-sqrt(fract(t/s1)))*.2\n      //(1.-sqrt(fract(t/s1)))*.2\n      //pow(2.-log(fract(t)),2.)\n      -log(1./64./2.+fract1(t)/8.)\n\n      //64.*pow(1.-sqrt(fract(t))/1.25,2.)\n      //pow(1.-sqrt(fract(t/s1))/1.5,2.)*pow(1.-sqrt(fract(t/s1/s1))/1.5,2.)\n      //fract(-t/s1)*fract(t/s1)\n      //pow(1.-sqrt(fract(t/s1)/pow(2.,fmod(t/s1,s1))),2.)\n  ,\n\n  nb = time*tempo*pow(2.,(m3+m2)/5.+6.);\n\n    return\n      //abs(.5-vec2(fract(nb*.998),fract(nb/2.)))*a\n      //log(abs(.5-vec2(fract(nb*.998),fract(nb/2.)))*a)\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //gamelan\n      //a/16./2.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb*.998),fract1(nb)))/2.)))\n\n      //oud\n      //a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb*2.*.998),fract1(nb*2.)))/2.))\n      //+.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb*.998),fract1(nb)))/2.)))/2.\n      \n      //steel drum\n      a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb*4.*.998),fract1(nb*4.)))))\n      + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb*2.*.998),fract1(nb*2.)))/2.)))      \n      \n      //vec2(fract(time*nb*.998/4.*m2*s1)*a,fract(time*nb/4.*m2)*a)\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a),b)*b;\n}\n\nfloat fmod1(float a, float b){\n    //divide by prime numbers to get interesting rhythms\n    float a1 = a;\n    //a += mod(floor(a/2.),4.)*2.;\n    //a += mod(floor(a/2.),2.)/2.;\n    \n    /*\n    for(float i = 1.; i < mod(floor(a),8.); i++){\n        a += mod(floor(a/2.),b)*i;\n        a *= 1.+mod(floor(a)*2.,2.);\n        i /= 1.+mod(floor(a)*2.,2.);\n    }\n    */\n    \n    //a /= 1. + mod(floor(a1/3.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    \n    return\n        mod(floor(a),b)\n        //mod(floor(mod(floor(a/2.),b*2.)),b)\n        //mod(mod(floor(a),floor(a/b+b)),b)\n        //mod(floor(a*8./b),b)\n        //mod(floor(a/2.)*floor(a*4./b),b)\n        //mod(floor(a)*mod(floor(-a*sign(.5-mod(floor(a/b/4.),3.))),b),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //mod(fmod1(a/2.,b*2.)*fmod1(a*2.,b),8.)\n    ;\n}\n\n//#define fmod(a,b) mod(floor(mod(a,1.+(a)*2./3.)),b)\n#define fmod0(x,y) mod((floor(mod(time,y))+floor(x)),y)\n#define fmod1(x,y) floor(mod(floor((x)/y)*y,y*y)/y)\n#define fmod2(x,y) mod(floor(x)*floor((x)/y),y)\n#define fmod3(x,y) abs(floor(mod(floor((x)*2.),y)-y/2.))*2.\n#define fmod4(x,y) mod(floor(x-floor((x)/y)),y)\n\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)/4.,y*y)/y)\n#define fpow(x,y) pow(y,mod(floor(x),y))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}