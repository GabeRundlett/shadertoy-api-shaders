{
    "Shader": {
        "info": {
            "date": "1606575713",
            "description": "License CC0: Smooth Kaleidoscope 2\nBeen working a bit too much and lacked the motivation do shaders for awhile\nWanted to do something simple to get started again so went back to kaleidoscopic effects that tend to be rather simple yet nice looking",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVfRh",
            "likes": 24,
            "name": "Smooth Kaleidoscope 2",
            "published": 3,
            "tags": [
                "2d",
                "kaleidoscope",
                "sabs"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1275
        },
        "renderpass": [
            {
                "code": "// License CC0: Smooth Kaleidoscope 2\n// Been working a bit too much and lacked the motivation do shaders for awhile\n// Wanted to do something simple to get started again so went back to kaleidoscopic \n// effects that tend to be rather simple yet produce appealing results.\n\n// SABS by ollj.\n// rgb2hsv from: https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define LESS(a,b,c) mix(a,b,step(0.,c))\n#define SABS(x,k)   LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define ROT(x)      mat2(cos(x), -sin(x), sin(x), cos(x))\n#define PSIN(x)     (0.5+0.5*sin(x))\n\nconst mat2[] rotations = mat2[](ROT(0.0*PI/2.0), ROT(1.0*PI/2.0), ROT(2.0*PI/2.0), ROT(3.0*PI/2.0));\n\nfloat rand(vec2 n) { \n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\nvec2 mod2_1(inout vec2 p) {\n  vec2 pp = p + 0.5;\n  vec2 nn = floor(pp);\n  p = fract(pp) - 0.5;\n  return nn;\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nfloat cell0(vec2 p) {\n  float d0 = circle(p+0.5, 0.5);\n  float d1 = circle(p-0.5, 0.5);\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n\n  return d;\n}\n\nfloat cell1(vec2 p) {\n  float d0 = abs(p.x);\n  float d1 = abs(p.y);\n  float d2 = circle(p, 0.25);\n  \n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  d = min(d, d2);\n\n  return d;\n}\n\nfloat cell(vec2 p, vec2 cp, vec2 n, float lw) {\n  float r = rand(n+1237.0);\n  cp *= rotations[int(4.0*r)];\n  float rr = fract(13.0*r);\n  float d = 0.0;\n  if (rr > 0.25) {\n    d = cell0(cp);\n  } else {\n    d = cell1(cp);\n  }\n  return abs(d) - lw;\n}\n\nfloat truchet(vec2 p, float lw) {\n  float s = 0.1;\n  p /= s;\n  vec2 cp = p;\n  vec2 n = mod2_1(cp);\n  float d = cell(p, cp, n, lw)*s;\n  return d;\n}\n\nfloat df(vec2 p, float rep, float time) {\n  const float lw = 0.05;\n\n  vec2 pp = toPolar(p);\n  pp.x /= 1.0+pp.x;\n  p = toRect(pp);\n  \n  vec2 cp = p;\n  \n  float sm  = 3.0/rep;\n\n  float n = smoothKaleidoscope(cp, sm, rep);\n  cp *= ROT(0.05*time);\n  cp-=0.1*time;\n  \n  return truchet(cp, lw*mix(0.25, 2.0, PSIN(-2.0*time+5.0*cp.x+(0.5*rep)*cp.y)));\n}\n\nvec3 color(vec2 q, vec2 p, float rep, float tm) {\n  vec2 pp = toPolar(p);\n  \n  float d = df(p, rep, tm);\n  \n  vec3 col = vec3(0.0);\n  float aa = 2.0/RESOLUTION.y;\n  vec3 baseCol = hsv2rgb(vec3(-0.25*tm+sin(5.5*d), tanh(pp.x), 1.0));\n  col = mix(col, baseCol, smoothstep(-aa, aa, -d));\n  col = baseCol + 0.5*col.zxy;\n  return col;\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(0.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q    = fragCoord/RESOLUTION.xy;\n  vec2 p    = -1. + 2. * q;\n  p.x       *= RESOLUTION.x/RESOLUTION.y;\n  vec2 op   = p;\n  vec3 col  = vec3(0.0);\n  \n  float tm = TIME*0.25;\n  float aa = -1.0+0.5*(length(p));\n  float a = 1.0;\n  float ra = tanh(length(0.5*p));\n\n  for (int i = 0; i < 6; ++i) {\n    p *= ROT(sqrt(0.1*float(i))*tm-ra);\n    col += +a*color(q, p, 30.0-6.0*float(i), 1.0*tm+float(i));\n    a *= aa;\n  }\n\n  col = tanh(col);\n  col = abs(p.y-col);\n  col = max(1.0-col, 0.0);\n  col = pow (col, tanh(0.0+length(op)*1.0*vec3(1.0, 1.5, 3.0)));\n  col = postProcess(col, q);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}