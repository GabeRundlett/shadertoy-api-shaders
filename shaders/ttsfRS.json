{
    "Shader": {
        "info": {
            "date": "1597081570",
            "description": "Source : https://www.youtube.com/watch?v=PBxuVlp7nuM\n\nMy Connection Game : https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect",
            "flags": 0,
            "hasliked": 0,
            "id": "ttsfRS",
            "likes": 0,
            "name": "9. Simple Camera Model",
            "published": 3,
            "tags": [
                "simplecameramodel"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "// Get Distance To The Ray Rd\nfloat DistanceLine( vec3 ro , vec3 rd , vec3 p ) {\n    float h = length( cross( ( p - ro ) , rd ) ) / length(rd);\n    return h;\n}\n\n// Draw Circle\nfloat DrawCircle(vec3 ro , vec3 rd , vec3 p, float radius ) {\n    float h = DistanceLine( ro , rd , p );\n    h = smoothstep ( radius , radius - 0.001f , h );\n    return h;\n}\n\n// Cube \nfloat CircleCube( vec2 uv , vec3 camPos , float zoom, vec3 objectCenter, float len ) {\n    \n    vec3 lookAt = objectCenter - camPos;\n    \n    vec3 F = normalize( lookAt );\n\n    vec3 R = normalize( cross( vec3(0.0f,1.0f,0.0f), F  ) );\n    vec3 U = normalize( cross( F , R ) );\n\t\n    vec3 nearPlanCenter = camPos + F * zoom;\t// ( - ) \n    vec3 intersectionPoint = nearPlanCenter + uv.x * R + uv.y * U;\n    \n    vec3 rd = intersectionPoint - camPos;\n    \n    float h = 0.0f;\n    float hDiv2 = len/2.0f;\n    \n    // left bottom\n    h += DrawCircle( camPos , rd , objectCenter + vec3( -hDiv2 , -hDiv2 , -hDiv2 ) , 0.1f );\n    h += DrawCircle( camPos , rd , objectCenter + vec3( -hDiv2 , -hDiv2 , +hDiv2 ) , 0.1f );\n    \n    // left top\n    h += DrawCircle( camPos , rd , objectCenter + vec3( -hDiv2 , +hDiv2 , -hDiv2 ) , 0.1f );\n    h += DrawCircle( camPos , rd , objectCenter + vec3( -hDiv2 , +hDiv2 , +hDiv2 ) , 0.1f );\n    \n\t// right bottom\n    h += DrawCircle( camPos , rd , objectCenter + vec3( +hDiv2 , -hDiv2 , -hDiv2 ) , 0.1f );\n    h += DrawCircle( camPos , rd , objectCenter + vec3( +hDiv2 , -hDiv2 , +hDiv2 ) , 0.1f );\n    \n    // right top\n    h += DrawCircle( camPos , rd , objectCenter + vec3( +hDiv2 , +hDiv2 , -hDiv2 ) , 0.1f );\n    h += DrawCircle( camPos , rd , objectCenter + vec3( +hDiv2 , +hDiv2 , +hDiv2 ) , 0.1f );\n    \n    return h;\n}\n\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5f;\n    uv.x *= iResolution.x / iResolution.y;\n     \n    \n    // variables\n\tfloat zoom = 2.0f;\n    \n    vec3 camPos = vec3( cos(iTime) * 4.0f - sin (iTime) * 4.0f , 4.0f , cos(iTime) * 4.0f + sin(iTime) * 4.0f );\t\t// ro\n    vec3 objectCenter = vec3 (0.0f, 0.0f , 10.0f ); \t// center of Object\n    \n    float cubeLength = 2.0f;\n    \n    \n    \n    float h = CircleCube( uv, camPos , zoom , objectCenter, cubeLength );\n    \n    vec3 col = vec3(h);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}