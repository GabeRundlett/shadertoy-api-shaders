{
    "Shader": {
        "info": {
            "date": "1677669067",
            "description": "Simple test of periodic piecewise C2 cubic interpolation of points.\nYou can move one of the points with mouse.\n\nIf you set a fixed initial slope and accel instead of the periodicity condition, moving the points only affect the neigbouring pieces.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dd33zs",
            "likes": 4,
            "name": "Periodic cubic spline",
            "published": 3,
            "tags": [
                "2d",
                "spline",
                "cubic",
                "periodic"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "/*\nSee https://www.shadertoy.com/view/dd33RB for C1 quadratic spline variant\nSee https://www.shadertoy.com/view/dd3Gzl for cubic cardinal spline variant\nSee https://www.shadertoy.com/view/cstGRs for akima spline variant\n*/\n\nconst vec3 dot_col = vec3(0);\nconst vec3 curve_col = vec3(0,1,0);\nconst vec3 bg_col = vec3(1);\n\nconst float dot_size = .01;\nconst float line_width = .003;\n\nconst float zoom = 2.;\n\n// compute matrix for getting parameters of cubic polynomial with end points a b\nmat4 solution_matrix(vec2 a, vec2 b){\n\tmat4 matrix = mat4(a.x * a.x * a.x, b.x * b.x * b.x, 3. * a.x * a.x, 6. * a.x,\n\t                   a.x * a.x, b.x * b.x, 2. * a.x, 2.,\n\t                   a.x, b.x, 1., 0.,\n\t                   1., 1., 0., 0.);\n\n\treturn inverse(matrix);\n}\n\n// compute parameters of cubic polynomial with end points a b and slope ma in a, second derivative mma in a\nvec4 compute_params(vec2 a, vec2 b, float ma, float mma){\n\tmat4 inv = solution_matrix(a, b);\n\n\treturn inv * vec4(a.y, b.y, ma, mma);\n}\n\n// compute slope at end of cubic piece\nfloat slope_at_end(vec4 params, float end){\n\tfloat diff = end * (end * 3. * params.x + 2. * params.y) + params.z;\n\treturn diff;\n}\n\n// compute accel at end of cubic piece\nfloat accel_at_end(vec4 params, float end){\n\tfloat diff = end * 6. * params.x + 2. * params.y;\n\treturn diff;\n}\n\n// approximate distance to cubic curve between a and b\nfloat cubic_distance_approx(vec2 uv, float a, float b, vec4 params){\n\tfloat val = uv.x * (uv.x * (uv.x * params.x + params.y) + params.z) + params.w;\n\tfloat diff = uv.x * (uv.x * 3. * params.x + 2. * params.y) + params.z;\n\n\tif(uv.x > a && uv.x < b){\n\t\treturn abs(uv.y-val) / length(vec2(diff,1));\n\t}\n\telse{\n\t\treturn 1e38;\n\t}\n}\n\n// compute parameters of the linear function which computes outgoing slope and accel as function of ingoing slope and accel\nmat2x3 slope_change_func(vec2 a, vec2 b){\n\tmat4 inv = solution_matrix(a, b);\n\n\tvec3 ci = mat2x3(inv[0].xyz, inv[1].xyz) * vec2(a.y, b.y);\n\n\tmat3 sol_mat = transpose(mat3(inv[2].xyz, inv[3].xyz, ci));\n\n\tvec3 slope_func = sol_mat * vec3(3.*b.x*b.x, 2.*b.x, 1.);\n\tvec3 accel_func = sol_mat * vec3(6.*b.x, 2., 0.);\n\n\treturn mat2x3(slope_func, accel_func);\n}\n\n// concatenate two affine linear functions\nmat2x3 concat_lin_func(mat2x3 f1, mat2x3 f2){\n\tmat3 f3 = mat3(f1) * mat3(f2);\n\treturn mat2x3(f3[0], f3[1]);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tfloat border = 2. / iResolution.x;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= .5;\n    uv.y *= iResolution.y / iResolution.x;\n\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse -= .5;\n    mouse.y *= iResolution.y / iResolution.x;\n\n\tborder *= zoom;\n\tuv *= zoom;\n\tmouse *= zoom;\n\n\t// choose sensible point for preview\n    if(mouse.x < -.6 || mouse.x > .6){\n        mouse = vec2(-.1,.2);\n    }\n\n\t// clamp mouse to allowed area\n\tmouse.x = clamp(mouse.x, -.37, .37);\n\n\t// points that are interpolated\n\tvec2 points[] = vec2[](vec2(-.8,-.2),vec2(-.6,.1),vec2(-.4,.2),mouse,vec2(.4,.0),vec2(.6,-.2));\n\n\t// repeat curve\n\tuv.x -= points[0].x;\n\tuv.x = mod(uv.x, points[points.length()-1].x - points[0].x);\n\tuv.x += points[0].x;\n\n\tvec3 color = bg_col;\n\n\tfloat curve_dis = 1e38;\n\tfloat point_dis = 1e38;\n\n\tmat2x3 slope_func = mat2x3(1);\n\n\t// compute slope and accel in last point as affine linear function of the slope and accel in first point\n\tfor(int i=0;i<points.length()-1;i++){\n\t\tmat2x3 change_func = slope_change_func(points[i], points[i+1]);\n\t\tslope_func = concat_lin_func(slope_func, change_func);\n\t}\n\n\tmat2 matrix = transpose(mat2(slope_func[0].xy,slope_func[1].xy) - mat2(1));\n\tvec2 solution = inverse(matrix) * -vec2(slope_func[0].z,slope_func[1].z);\n\n\tfloat initial_slope = solution.x;\n\tfloat initial_accel = solution.y;\n\n\t//float initial_slope = 0.;\n\t//float initial_accel = 0.;\n\n\tfloat last_slope = initial_slope;\n\tfloat last_accel = initial_accel;\n\n\t// render splines and dots\n\tfor(int i=0;i<points.length()-1;i++){\n\t\tpoint_dis = min(point_dis, distance(uv,points[i])-dot_size);\n\n\t\tvec4 params = compute_params(points[i], points[i+1], last_slope, last_accel);\n\t\tcurve_dis = min(curve_dis, cubic_distance_approx(uv, points[i].x, points[i+1].x, params)-line_width);\n\n\t\tlast_slope = slope_at_end(params, points[i+1].x);\n\t\tlast_accel = accel_at_end(params, points[i+1].x);\n\t}\n\n\tpoint_dis = min(point_dis, distance(uv,points[points.length()-1])-dot_size);\n\n\tcolor = mix(curve_col, color, smoothstep(-border/2.,border/2.,curve_dis));\n\tcolor = mix(dot_col, color, smoothstep(-border/2.,border/2.,point_dis));\n\n\tfragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}