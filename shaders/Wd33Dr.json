{
    "Shader": {
        "info": {
            "date": "1568165846",
            "description": "Really dirty shader code with the intent to make a somewhat lively animation of my imp character, Dip.\nMight revisit it later and rewrite it all, since a lot of it is kinda frankenspaghetticode from rapid prototyping.\n\nV proud of my son, tho!\nowo",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd33Dr",
            "likes": 8,
            "name": "Dip [Animated Portrait]",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "animation",
                "character"
            ],
            "usePreview": 0,
            "username": "ompuco",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.001;\n\n\n\nvec2 rotate(vec2 v, float a) {\n\treturn vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nvec3 Zigzag(vec3 pos, float freq, float offset){\n    float i = (pow(offset+abs(pos.x),.8));\n    float x = freq-abs(mod(i,2.0*freq)-freq);\n    pos.y+=(x);\n    return pos;\n}\n\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n\n\nfloat map(vec3 p) {\n    //p.x+=sin(p.y*2.0+iTime*4.0)/8.0;\n    \n    float head=sdRoundedCylinder(p+vec3(.0,.05,-.050),.375,.6,.01);\n\n    vec3 p2 = p;p2.x=abs(p2.x);p2.y/=1.4;\n\n    vec3 p3 = p;p3.z*=1.12;\n    //p3.x-=sin(iTime*2.0)/4.0;\n    //p3.x-=sin(p3.y+iTime*2.0)/8.0;\n    //p3.z+=step(p.z,.0)*sin(p3.y)/8.0;\n    p3.z-=smoothstep(.0,1.0,p3.y)/8.0;\n\t\n    \n    float body = sdRoundedCylinder(p3+vec3(.0,1.7,.350+sin(p3.y)/8.0),.3,1.7,.103);\n\t    p3.yz=rotate(p3.yz,.105);\n\n    body = opSmoothUnion(body, sdRoundedCylinder(p3+vec3(.0,.9,.150),.25,1.7,.103),.1);\n    \n    float d=opSmoothUnion(body,head,.15);\n     \n    float horns = sdOctahedron(p2-vec3(.5,.44,.1),.5);\n    horns = max(horns,-sdBox(p2-vec3(.0,.5,.0),vec3(.2,1.0,1.0)));\n    d=min(d,horns);\n    \n    \n    //d=min(d,body);\n    \n\n\n    \n    return d;\n}\n\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nstruct rmData{\n    vec4 color;//TODO @SAM: just do the colors at end of rm() function, u dummy\n    vec3 pos;\n    float depth;\n};\n\n    \nrmData rm(vec3 eye, vec3 dir, float start, float end) {\n    float depth = start;\n    rmData raym;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = map(eye + depth * dir);\n        if (dist < EPSILON) {\n            raym.depth=depth;\n            raym.pos=eye + depth * dir;\n\t\t\treturn raym;\n        }\n        depth += dist;\n        if (depth >= end) {\n            raym.depth=end;\n            return raym;\n        }\n    }\n    raym.depth=end;\n    return raym;\n}\n            \n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 rotor = vec2(sin(iTime*2.0)/2.0,cos(iTime));\n\n    float eyeLook = mod(rotor.x+3.14*9.0,3.14*2.0)-3.14;\n    //eyeLook=clamp(eyeLook*12.5,-2.7,2.7)/2.7;\n    eyeLook=clamp(eyeLook*2.0,-1.0,1.0);\n\n    eyeLook=smoothstep(0.0,1.0,eyeLook/2.0+.5)*2.0-1.0;\n    eyeLook*=.85;\n        //eyeLook=clamp(eyeLook,-1.,1.)*.6;\n\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    dir.xz=rotate(dir.xz,rotor.x);\n    dir.yz=rotate(dir.yz,rotor.y/4.0-.15);\n\n    vec3 eye = vec3(0.0, 0.2, 5.25);\n    eye.z+=(sin(iTime/2.0)/2.0+.5)*1.0;\n    eye.xz=rotate(eye.xz,rotor.x);\n    eye.yz=rotate(eye.yz,rotor.y/4.0-.15);\n    \n\n\n    rmData r = rm(eye, dir, MIN_DIST, MAX_DIST);\n    float dist = r.depth;\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    //vec3 n = estimateNormal(r.pos);\n    \n    vec3 p = r.pos;\n    p.x=abs(p.x);\n    \n    vec3 lDir = (vec3(.65,.5,.85))*2.0;\n    \n    \n    \n    fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    \n    float eyes=step(length(p+vec3(-.4,-.1,-.6)),.25);\n    float blink = clamp(1.0-abs(sin(iTime*0.45))*16.0,.0,1.0);\n    \n    \n    //blink rate for second blink set\n    float blinkRate = .4;\n    \n    //second set of blinks for more dynamic blinking lol\n    blink = max(blink,clamp(1.0-abs(cos(iTime*0.45*blinkRate))*16.0/blinkRate,.0,1.0));\n    \n    //squint occasionally\n    blink = max(blink,clamp(.35-abs(cos(iTime/4.0+.15)),.0,.10));\n\n    eyes*=step(p.y+p.x/8.0,.2-blink);\n    \n    //horizontal pupils follow camera\n    float pupils =step(.0,sdBox(p+vec3(-.4-eyeLook*sign(r.pos.x)/6.0,-.1+p.x/8.0,-.6),vec3(.01,.1,.5)));\n    \n    \n    //fragColor.g+=step(.0,n.y)*.25*step(-.5,r.pos.y);\n    //fragColor.g+=step(.0,n.y)*.05*step(n.y,.01);\n    \n    //fragColor.rgb=n.rgb;\n\n    fragColor.g=clamp(fragColor.g+eyes*pupils,.0,1.0);\n\n    \n    \n    \n    vec3 pm = Zigzag(r.pos,.11,.15);\n    \n    \n    pm.y=mix(r.pos.y,pm.y*2.0+.35,clamp(1.0-abs(pm.x),.0,1.0));\n\n\n    \n    float talkFreq = mix(sin(iTime*16.0),sin(iTime*13.0)-.8,clamp((cos(iTime*2.0+.15)+.5)*4.0,0.0,1.0));\n    float talkH=clamp(talkFreq/16.0+.1,.015,.25);\n    //float talkW=smoothstep(-1.0,1.0,clamp(-cos(iTime*2.0+.15)*8.0+.5,.0,1.0)*.24)*1.15-.34;\n    float talkW=smoothstep(-1.0,1.0,clamp(-cos(iTime*2.0+.15)*8.0+.5,.0,1.0)*.24)*.65;\n\n    float mouth = (sdEllipsoid(pm+vec3(.0,.425-pow(abs(pm).x,2.0)/1.0,-.5),vec3(talkW,talkH,.5)));\n\n    \n    \n    fragColor.g+=1.0-step(-.01,mouth);\n    \n    //cel shading\n    //fragColor*=mix(.5,1.0,clamp(fragColor.g+round(dot(n,lDir)+.5),.0,1.0));\n\n    \n\n\n\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}