{
    "Shader": {
        "info": {
            "date": "1605003939",
            "description": "masses with a big masses at the begin and at the end. \nkeyboard arrows (right and left) moove top node, space reset position. \ntrying to make a collision with a circle and the borders but it made the rope go berserk after some time so I clamped velocity. ",
            "flags": 48,
            "hasliked": 0,
            "id": "wdGcWc",
            "likes": 10,
            "name": "mass_spring_system_2",
            "published": 3,
            "tags": [
                "2d",
                "springs"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// Fork of \"mass_spring_system_1\" by balkhan. https://shadertoy.com/view/tsGyzt\n// 2020-10-28 12:56:32\n\n// Fork of \"mass_spring_system_0\" by balkhan. https://shadertoy.com/view/3ljXDm\n// 2020-10-23 13:40:46\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2 rotate(vec2 v, float alpha);\nfloat line(vec2 p1, vec2 p2, vec2 p, float thickness);\nfloat mlength(vec2 p) {vec2 a = abs(p); return max(a.x, a.y);}\nfloat cube(vec2 p, vec2 d, vec2 l) {vec2 a = abs(p-d)-l; return max(a.x, a.y);}\n#define SHOW_LINES\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    vec2\tR = iResolution.xy;\n    vec2\tu = 1.*(f.xy-.5*R) / R.y;\n    vec3 idl;\n    float ma,md = 1e5;\n    o -= o;\n    \n    for( float i = .0; i < NUM; i++)\n    {\n        vec2 cd = vec2(floor((i)/NUM) , mod(i, NUM) );\n        ma = 1.*texture(iChannel0, (cd+vec2(.0, NUM+.5))/R).x;//+.0*(cd.x <= .0 ? 1. : .0)*.0+(cd.y <= .0 ? 2. : .0)*.0;\n        vec2 pos = texture(iChannel0, cd/R).xy-vec2(.125,.0);//-vec2((cd.x <= 0. ? .125:.0), (cd.y <= 0. ? .125:.0) );\n        float bl = (i == NUM-1. || i == .0 ? 0. : 0.)*1e5+length(u - pos*SC)-(.0075*ma);\n    \tmd = min(md,\n                 bl\n                 );\n        if ( md == bl && md < (0.005))\n        {\n        \tidl.x = i*1.1+1.57+.0*floor(iTime);\n            vec2 R1 = iChannelResolution[1].xy;\n            idl.x += smoothstep(.55, .5, texture(iChannel1, (i == NUM-1.?vec2(.01, .0275):32./R1)+.5*(u-pos*SC -vec2(-20./8.-1.0*cd.y/64.+3./8., -9./8.+.0) )/(ma/8.+0.) ).w);\n        }\n        #ifdef SHOW_LINES\n        vec2 apos = texture(iChannel0, vec2(cd.x+0., cd.y-1.)/R ).xy-vec2((cd.x <= 0. ? .125:.0), (cd.y-1. <= 0. ? .125:.0) );\n        float l0 = 1.-(line(apos*SC, pos*SC, u, 0.005) );\n        \t\t        md = min(md,\n\t\t                 l0\n                        );\n        #endif\n        if (md < 0.001)\n            break;\n    }\n    #ifdef SHOW_LINES\n    if (f.x < 1./SC && f.y < NUM*2./SC) // pos and mass displayed bottom left\n\to.xyz += (texelFetch(iChannel0, ivec2(f.xy*SC), 0).xyz/3.)+.5*(f.y <= NUM/SC?1.:.0);\n    else\n    #endif\n    {\n        float cbd = max(\n             cube(u,vec2(-.0250,.365), vec2(.6, .07)*1.0+.0*vec2(480., 31.5)/R )\n                 ,\n             -cube(u,vec2(-.0250,.365), vec2(.55, .065)*1.0+.0*vec2(440., 29.25)/R )\n                 );\n        cbd = min(cbd, \n                  length(u-vec2(.25, .0)*SC)-.05\n                  );\n    md = min(md,\n             cbd\n             \n            );\n    idl.x = (md == cbd ?0.25:idl.x)*1.0;\n    o.xyz += .25+.75*vec3(smoothstep( 0.0125, 0.01125, md))*1.0*abs(sin( idl.x*3.+.5*vec3(0.50, 1., 2.) +1.570+.0 ) );\n    }\n    //o = texture(iChannel0, vec2(1.0, 0.)+.0*f/R);\n}\n\nvec2 rotate(vec2 v, float alpha)\n{\n\tfloat vx = v.x*cos(alpha)-v.y*sin(alpha);\n\tfloat vy = v.x*sin(alpha)+v.y*cos(alpha);\n\tv.x = vx;\n\tv.y = vy;\n\treturn v;\n}\n\nfloat line(vec2 p1, vec2 p2, vec2 p, float thickness)\n{\n\tp -= p1;\n\tvec2 lineVector = p2-p1;\n\t\t\n\tfloat angle = -atan(lineVector.y,lineVector.x);\n\tp = rotate(p,angle);\n\t\n\tfloat dx = 0.0;\n\tif(p.x<0.0)\n\t\tdx = abs(p.x);\n\telse if(p.x>length(lineVector))\n\t\tdx = abs(p.x) - length(lineVector);\n\t\t\n\treturn ( thickness/(dx+abs(p.y)) );\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n* BUFFER A : 2D Particle System\n*/\n\n\n// for reading clarity's sake, not rly useful\nstruct\tparticle\n{\n    vec2\tpos; // position\n    vec2\tacc; // acceleration\n    vec2\tvit; // velocity\n    float\tma;  // mass\n};\n\n#define Gr vec2(.0+0.*sin(iTime), -.98)\n#define DIST .05\n    //.025*.1\n#define WALLS\n\n    void\tinit_pos(inout vec2 pos, vec2 ij)\n{\n    pos.x = .75+1.0*(-.25+1.0*(NUM-ij.y)*DIST)-.5*NUM*DIST;\n    pos.y = .5*NUM*DIST*57.*.0+.0*ij.y*DIST+.4150*NUM*DIST*.0+1.45;\n}\n\nvoid\tinit(inout particle part, vec2 f)\n{\n    part.acc = vec2(0.);\n\tpart.vit.xy = vec2(0.);\n    init_pos(part.pos, f);\n    part.ma = ( !(f.y >= NUM*2.-1.) && f.y >= NUM*2.-(NUM-1.) ? 0. : 1.0)*7.+1.;\n}\n\nvec2 DistanceConstraint(vec2 x, vec2 x2, float restlength, float stiffness)\n{\n    vec2 delta = x2 -x;\n    float deltalength = length(delta);\n    float diff = (deltalength-restlength) /deltalength;\n    return delta*stiffness*diff;\n}\n\nvec2 summ_current_minus_rest_spring_len(vec2 f, vec2 R, particle parts)\n{\n    vec2 summ_pos = vec2(.0);    \n    vec2 fpos = texture(iChannel0, (f+vec2(0., 0.))/R.xy ).xy;\n    float xrest = 1.;\n    for(float i = 0.; i <= 2.; i++)\n    {\n        vec2 cd = vec2(.0, i-1.);\n        vec2 idf = f + cd;\n        if(idf.x < .0 || idf.x > NUM || idf.y < .0 || idf.y > NUM)\n            continue;\n        if (cd.y == 0.)\n            continue;\n        float ma = texture(iChannel0, (f+cd+vec2(.0, NUM) )/R).x;\n            xrest = DIST;\n       \tcd = texture(iChannel0, (f+cd)/R.xy ).xy; // need a vec2, reusing cd var\n            summ_pos += DistanceConstraint(fpos, cd, xrest*1., 6.*.0+1.0*8./(abs(ma-parts.ma)*.25+1.)+.0 );\n    }\n\treturn summ_pos/2.;\n}\n\nvoid collision(vec2 f, vec2 R, inout particle parts)\n{\n    vec2 np = parts.pos + parts.vit;\n    vec2 cp = vec2(.45, .0);\n    vec2 dd = np -cp;\n\tif (length(dd) < .25+parts.ma/24.)\n    {\n        //parts.vit *= -.95;\n        parts.acc *= -.75;\n        parts.vit *= -1./(length(dd)+.505);\n    }\n\n}\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    bool reinit = false;\n    particle parts;\n    vec4\ttexture_buff;\n    vec2\tR = iResolution.xy;\n    //o -= o;\n    o = vec4(0.);\n    if (f.x == iResolution.x-0.5) // reserve last x line for keyboard input memory\n    {\n        if (float(iFrame) <= 10.)\n\t    {\n\t        o.xy = vec2(0.);\n\t        return;\n        }\n        o.xy = texture(iChannel0, vec2(1., .0)).xy*.975;\n        o.x += texelFetch( iChannel1, ivec2(KEY_RIGHT,0),0 ).x*.0625*iTimeDelta;\n        o.x -= texelFetch( iChannel1, ivec2(KEY_LEFT,0),0 ).x*.0625*iTimeDelta;\n        //o.y += texelFetch( iChannel1, ivec2(KEY_UP,0),0 ).x*.0625*iTimeDelta;\n        //o.y -= texelFetch( iChannel1, ivec2(KEY_DOWN,0),0 ).x*.0625*iTimeDelta;\n        return;\n    }\n    if (f.x == iResolution.x-1.5)\n    {\n        o.xy = R.xy;// stock resolution inside to check against new resolutions\n        return;\n    }\n    if (f.x > 1. || f.y > NUM+NUM)\n        discard;\n    float kb = texelFetch( iChannel1, ivec2(32,0),0 ).x; // check for space pressed\n    // reset all parameters on space or resolution change\n    if (float(iFrame) <= 10. || kb > .0 || texelFetch(iChannel0, ivec2(vec2(R.x-1.5,.0) ), 0).xy!=R.xy)\n    {\n\t\tinit(parts, f);\n\t    o.xy += parts.pos;\n\t\to.zw += parts.vit;\n        if (f.y > NUM)\n        {\n            o -= o;\n        \to.x = parts.ma;\n        }\n        return;\n    }\n    \n    if (f.y > NUM)\n    {\n        o = -o;\n        o.x = texture(iChannel0, f/R ).x;\n        return;\n    }\n    parts.ma = texture(iChannel0, (f+vec2(.0, NUM) )/R).x;\n    texture_buff = texture(iChannel0, f/R.xy ).xyzw;\n    parts.pos = texture_buff.xy;\n  \tparts.vit = texture_buff.zw;\n    if (f.y >= NUM-1.5 && (f.x <= 1. || f.x >= NUM-1.5 )) // last node need to moove only from keyboard\n    {\n        vec2 moove = texture(iChannel0, vec2(1., .0)).xy;\n        o = vec4(clamp(parts.pos+moove,vec2(-2.), vec2( 2.) ), .0, .0);\n        return;\n    }\n    parts.acc = \n            parts.ma*Gr*iTimeDelta*.05\n            +\n            summ_current_minus_rest_spring_len(f, R, parts)*iTimeDelta\n            ;\n//    parts.acc = clamp(parts.acc, -.015*.0125, .015*.0125); // too groovy\n    #ifdef WALLS\n    if(parts.pos.y + parts.vit.y*1.0 < -1.5)\n    {\n        parts.pos.y = -1.5;parts.vit.y = .0*.95*abs(parts.vit.y);\n    }\n    if(parts.pos.x + parts.vit.x < -3.)\n        parts.vit.x = .0*.95*abs(parts.vit.x);\n    if(parts.pos.x + parts.vit.x > 3.5)\n        parts.vit.x = .0*-.95*abs(parts.vit.x);\n    #endif\n    collision(f, R, parts);\n    parts.vit.xy += parts.acc.xy;\n\tparts.pos.xy += parts.vit.xy;\n\t    \to.xy += parts.pos.xy;\n\t\t\to.zw += parts.vit.xy;\n    o.zw = clamp(o.zw, -.015, .015); // velocity clamp avoid most explosive behavior\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define NUM 100.\n\n#define SC .25",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}