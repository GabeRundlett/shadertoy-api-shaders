{
    "Shader": {
        "info": {
            "date": "1656641833",
            "description": "- was trying to figure out \"| 6 3 2\" -> https://en.wikipedia.org/wiki/Wythoff_symbol\n- my geogebra for snub point -> https://www.geogebra.org/calculator/zdb5wjp9\n- small glitch (fixed by mla)\n- fizzer's demo helped -> https://www.shadertoy.com/view/3tyXWw",
            "flags": 0,
            "hasliked": 0,
            "id": "NdcBzS",
            "likes": 6,
            "name": "snub hexagonal tiling",
            "published": 3,
            "tags": [
                "sdf",
                "tiling",
                "hexagonal",
                "schwarz",
                "wythoff",
                "snub"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "vec2 snub632() {\n    // fermat point\n    vec2 pf = intersection(vec2(-0.75, cos30 / 2.0), v3, vec2(1, 0), v2);\n    // reflect over side (y-axis)\n    vec2 q1 = vec2(-1.0 * pf.x, pf.y);\n    // vec2 q2 = vec2(pf.x, pf.y + 2.0 * (cos30 - pf.y));\n    // project to hypotenuse then double to obtain reflection\n    vec2 q3 = dot(pf, v3) / dot(v3, v3) * v3;\n    q3 = pf + 2.0 * (q3 - pf);\n    // snub point is at half the hypotenuse of the new right triangle (Thales's theorem)\n    return q1 + ((q3 - q1) / 2.0);\n}\n\nfloat sdSnubSchwartz632(vec2 p, float t)\n{\n    // take advantage of symmetry\n    float a = atan(p.y, p.x);\n    float M = floor(mod(degrees(a) - 30.0, 360.0) / 60.0) * 60.0;\n    p = rotmat2(radians(M)) * p;\n    // centralpoint\n    float d = sdCircle(p, t);\n    // snub point\n    vec2 g = snub632();\n    // rotate\n    vec2 G = rotmat2(radians(180.0)) * (g - v2) + v2;\n    d = opUnion(d, sdSegment(p, g, G) - t);\n    // fix by https://www.shadertoy.com/user/mla\n    d = opUnion(d, sdSegment(rotmat2(radians(-60.0)) * p, g, G) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(-60.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+60.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+120.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+180.0)) * (G - g) + g) - t);\n    return d;\n}\n\nfloat sdSnubSchwarz632Plane(vec2 p, float t) {\n    float r = cos30;\n    float R = r / cos30;\n    vec2 v = vec2(3.0 * R, 2.0 * r);\n    vec2 p1 = opRep(p, v);\n    vec2 p2 = opRep(p + v / 2.0, v);\n    return opUnion(\n        sdSnubSchwartz632(p1, t),\n        sdSnubSchwartz632(p2, t)\n    );\n\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    p *= 2.0;\n    m *= 2.0;\n    p += iTime / 2.0;\n    m += iTime / 2.0;\n\n    float t = 0.075;\n\n    // distance\n    float d = sdSnubSchwarz632Plane(p, t);\n    \n    vec3 col = vec3(0.5);\n    col = (d > 0.0) ? col : 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n    col *= t - exp(-1.0 * abs(d));\n    col *= t + cos(150.0 * d);\n    col = mix(col, vec3(0.5), 1.0 - smoothstep(0.0, t, abs(d)));\n    \n    if (iMouse.z > 0.001)\n    {\n        d = sdSnubSchwarz632Plane(m, t);\n        col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) -abs(d)) - 0.005));\n        col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rotmat2(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat opUnion( float d1, float d2 )\n{ \n    return min(d1,d2); \n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nvec2 opRep( in vec2 p, in vec2 c )\n{\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nconst float cos30 = cos(radians(30.0));\n\nvec2 v1 = vec2(0, 0);\nvec2 v2 = vec2(0, cos30);\nvec2 v3 = vec2(0.5, cos30);\n\n// http://paulbourke.net/geometry/pointlineplane/\nvec2 intersection(vec2 p1, vec2 p2, vec2 p3, vec2 p4) {\n    float d = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n    float ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / d;\n    // float ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / d;\n    return p1 + ua * (p2 - p1);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}