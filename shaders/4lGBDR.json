{
    "Shader": {
        "info": {
            "date": "1542180391",
            "description": "Testing [url]https://www.shadertoy.com/view/4lcSRn[/url] As it turns, it fails miserably when the the cones start degenerating to cylinders...",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGBDR",
            "likes": 9,
            "name": "Test Cylinder Intersector",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "cylinder"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 825
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Testing https://www.shadertoy.com/view/4lcSRn.\n\nvec4 iSphere( in vec3 ro, in vec3 rd, in vec3 ce, in float ra )\n{\n\tvec3 oc = ro - ce;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - ra*ra;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec4(-1.0);\n    float t = -b - sqrt( h );\n\treturn vec4( t, (oc + t*rd)/ra );\n}\n\nvec4 iCylinder( in vec3 ro, in vec3 rd, \n                in vec3 pa, in vec3 pb, float ra, \n                out float v ) // extreme a, extreme b, radius\n{\n\tv = 0.0;\n    vec3 ba = pb-pa;\n\n    vec3  oc = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoc = dot(ba,oc);\n    \n    float a = baba - bard*bard;\n    float b = baba*dot( oc, rd) - baoc*bard;\n    float c = baba*dot( oc, oc) - baoc*baoc - ra*ra*baba;\n    float h = b*b - a*c;\n    if( h<0.0 ) return vec4(-1.0);\n    h = sqrt(h);\n    float t = (-b-h)/a;\n\n    // body\n    float y = baoc + t*bard;\n    if( y>0.0 && y<baba )\n    {\n        v = y/baba;\n        return vec4( t, (oc+t*rd - ba*v)/ra );\n    }\n    \n    return vec4(-1.0);\n}\n\n// cylinder normal at point p\nvec3 nCylinder( in vec3 p, in vec3 a, in vec3 b, float ra )\n{\n    vec3  pa = p - a;\n    vec3  ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    return (pa - ba*paba/baba)/ra;\n}\n\n#define AA 2\n\nvec3 path( in float h )\n{\n    return 0.5*sin(6.2831*h*vec3(3.0,2.0,5.0)+vec3(0.0,1.0,3.0)+0.5*iTime*vec3(1.1,1.3,1.7));\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd, out float h )\n{\n    vec3  oce = path(0.0);\n    vec4 tnor = vec4(1e20);\n    const int num = 80; // make this bigger for more precision curve\n    float hm = 0.0;\n    for( int i=1; i<=num; i++ )\n    {\n        float h = float(i)/float(num);\n        vec3 ce = path(h);\n        float ra = 0.04;\n\n        vec4 tmp; float tmpv;\n\n        // links\n        tmp = iCylinder( ro, rd, oce, ce, ra, tmpv );\n        if( tmp.x>0.0 && tmp.x<tnor.x ) { tnor = tmp; hm=h+tmpv/float(num); }\n\n        // points\n        tmp = iSphere( ro, rd, oce, ra );\n        if( tmp.x>0.0 && tmp.x<tnor.x ) { tnor = tmp; hm=h; }\n\n\n        oce = ce;\n    }\n    \n    // enable to render floor\n    //float t = (-0.6-ro.y)/rd.y; if( t>0.0 && t<tnor.x ) { hm=0.4; tnor=vec4(t,0.0,1.0,0.0); }\n\n    h = hm;\n    return tnor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.01*iTime;\n\tvec3 ro = vec3( 1.0*sin(an), 0.4, 1.0*cos(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\n        // raytrace\n        float hm;\n        vec4 tnor = intersect( ro, rd, hm );\n        float t = tnor.x;\n    \n        // shading/lighting\t\n        vec3 col = vec3(0.015)*(1.0-0.15*dot(p,p));\n        if( t<1e19 )\n        {\n            vec3 mate = 0.5 + 0.5*cos(2.0*hm*6.2831+vec3(0.0,2.0,3.0));\n\n            vec3 pos = ro + t*rd;\n            vec3 nor = tnor.yzw;\n            const vec3 lig = vec3(0.8,0.6,0.0);\n            vec3 hal = normalize(lig-rd);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float spe = clamp(dot(nor,hal),0.0,1.0);\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            float kk; float sha = (intersect( pos+nor*0.001, lig, kk ).x<1e19) ? 0.0 : 1.0;\n            float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n            \n            col = vec3(0.05,0.1,0.15)*amb + vec3(1.0,0.8,0.5)*dif*sha;\n            col *= mate;\n            col += 0.5*pow(spe,32.0)*dif*sha;\n            col += fre*fre*0.2*mate*(0.5+0.5*dif*sha);\n        }\n\t\n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}