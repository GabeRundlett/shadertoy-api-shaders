{
    "Shader": {
        "info": {
            "date": "1667821897",
            "description": "Calculating a summed area table to use for performing a box blur in constant time w.r.t. blur radius. Drag mouse around to change blur radius.",
            "flags": 32,
            "hasliked": 0,
            "id": "dsBGRm",
            "likes": 9,
            "name": "SAT Box Blur",
            "published": 3,
            "tags": [
                "blur",
                "filter",
                "box",
                "area",
                "table",
                "summed"
            ],
            "usePreview": 1,
            "username": "fad",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "#define CLAMP_TO_EDGE\n\nvec4 sumToPoint(ivec2 p) {\n    if (p.x <= 0 || p.y <= 0) {\n        return vec4(0.0);\n    }\n    \n    return texelFetch(iChannel0, min(p, ivec2(iResolution.xy)) - 1, 0);\n}\n\nvec4 sumOverRect(ivec2 a, ivec2 b) {\n#ifdef CLAMP_TO_EDGE\n    ivec2 z = ivec2(0);\n    ivec2 r = ivec2(iResolution.xy);\n    return \n        + (a.x < 0 ? (sumToPoint(ivec2(1, b.y)) - sumToPoint(ivec2(1, a.y))) * float(min(b.x, 0) - a.x) : vec4(0.0))\n        + (b.x > r.x ? (sumToPoint(ivec2(r.x, b.y)) - sumToPoint(ivec2(r.x - 1, b.y)) - sumToPoint(ivec2(r.x, a.y)) + sumToPoint(ivec2(r.x - 1, a.y))) * float(b.x - max(a.x, r.x)) : vec4(0.0))\n        + (a.y < 0 ? (sumToPoint(ivec2(b.x, 1)) - sumToPoint(ivec2(a.x, 1))) * float(min(b.y, 0) - a.y) : vec4(0.0))\n        + (b.y > r.y ? (sumToPoint(ivec2(b.x, r.y)) - sumToPoint(ivec2(b.x, r.y - 1)) - sumToPoint(ivec2(a.x, r.y)) + sumToPoint(ivec2(a.x, r.y - 1))) * float(b.y - max(a.y, r.y)) : vec4(0.0))\n        + (a.x < 0 && a.y < 0 ? sumToPoint(ivec2(1)) * float((min(b.x, 0) - a.x) * (min(b.y, 0) - a.y)) : vec4(0.0))\n        + (a.x < 0 && b.y > r.y ? (sumToPoint(ivec2(1, r.y)) - sumToPoint(ivec2(1, r.y - 1))) * float((min(b.x, 0) - a.x) * (b.y - max(a.y, r.y))) : vec4(0.0))\n        + (b.x > r.x && a.y < 0 ? (sumToPoint(ivec2(r.x, 1)) - sumToPoint(ivec2(r.x - 1, 1))) * float((b.x - max(a.x, r.x)) * (min(b.y, 0) - a.y)) : vec4(0.0))\n        + (b.x > r.x && b.y > r.y ? (sumToPoint(r) - sumToPoint(ivec2(r.x - 1, r.y)) - sumToPoint(ivec2(r.x, r.y - 1)) + sumToPoint(r - 1)) * float((b.x - max(a.x, r.x)) * (b.y - max(a.y, r.y))) : vec4(0.0))\n        + sumToPoint(clamp(b, z, r))\n        - sumToPoint(clamp(ivec2(a.x, b.y), z, r))\n        - sumToPoint(clamp(ivec2(b.x, a.y), z, r))\n        + sumToPoint(clamp(a, z, r));\n#else\n    return sumToPoint(b) - sumToPoint(ivec2(a.x, b.y)) - sumToPoint(ivec2(b.x, a.y)) + sumToPoint(a);\n#endif\n}\n\nvec4 avgOverRect(ivec2 a, ivec2 b) {\n    return sumOverRect(a, b) / float((b.x - a.x) * (b.y - a.y));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    int s;\n    \n    if (iMouse == vec4(0.0)) {\n        s = int((0.5 - 0.5 * cos(iTime)) * 100.0) + 1;\n    } else {\n        s = int(abs(iMouse.x) / 5.0 + 1.0);\n    }\n    \n    fragColor = pow(avgOverRect(ivec2(fragCoord) - s, ivec2(fragCoord) + s + 1), vec4(1.0 / 2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    ivec2 p = ivec2(fragCoord);\n    \n    if (iFrame == 0) {\n        fragColor = pow(texelFetch(iChannel0, p % textureSize(iChannel0, 0), 0), vec4(2.2));\n        return;\n    }\n    \n    int numXSteps = int(ceil(log2(iResolution.x)));\n    int numYSteps = int(ceil(log2(iResolution.y)));\n    fragColor = texelFetch(iChannel1, p, 0);\n    \n    if (iFrame > numXSteps + numYSteps) {\n        return;\n    }\n    \n    ivec2 s = p;\n    \n    if (iFrame <= numXSteps) {\n        s.x -= 1 << iFrame - 1;\n    } else {\n        s.y -= 1 << iFrame - numXSteps - 1;\n    }\n    \n    if (s.x >= 0 && s.y >= 0) {\n        fragColor += texelFetch(iChannel1, s, 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}