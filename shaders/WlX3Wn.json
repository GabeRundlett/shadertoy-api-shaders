{
    "Shader": {
        "info": {
            "date": "1555979102",
            "description": "\"Alexa's wet dream\" a PC 4kb Intro ranked 5th at Revision demoparty 2019.\nAlexa doesn't dream of electric sheep, she dreams of \"Techno, Death & Robots\".\nGet executable file: http://www.pouet.net/prod.php?which=81117\nCode: evvvvil, Music: Hoffman + Noby ",
            "flags": 96,
            "hasliked": 0,
            "id": "WlX3Wn",
            "likes": 25,
            "name": "[4kb] Alexa's wet dream",
            "published": 3,
            "tags": [
                "intro",
                "demoscene",
                "demo",
                "glow",
                "robot",
                "techno",
                "death",
                "robots",
                "faces",
                "4kb"
            ],
            "usePreview": 1,
            "username": "evvvvil",
            "viewed": 2040
        },
        "renderpass": [
            {
                "code": "//               DESiRE & Logicoma\n//\n//              p  r  e  s  e  n  t\n//\n//              \"Alexa's wet dream\"\n//         a PC 4k Intro for REVISION 2019\n//\n//                code: evvvvil\n//             music: Hoffman + Noby\n//\n//         Get the executable 4kb file from: \n//    http://www.pouet.net/prod.php?which=81117\n//\n//            g  r  e  e  t  i  n  g  s\n//\n//    Dascon, Virgill, Mr Vux, LJ, Ferris, UNC, Nusan\n//    Slerpy, Flopine, Ponk, lsdLive, Alkama, yx\n//    CNCD, Poo-brain, Conspiracy, ASD, Smash, RamonB5\n//    Fairlight, Luisa, Dan, Soundy, Made, Oni\n//    Bossman, Hellmood, Prismbeings, Farbrausch\n//    Still, Ronny, Triace, Gopher, RGBA, Pixtur\n//    Peisik, Mercury, Slimey, Rift, Alcatraz, Keito\n//    Scarab/K-Storm, Tom Dagone, Tropical Trevor\n//    and everyone at DESiRE, Logicoma & Epoch groups\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec3 f=vec3(0);//Cheap as fuck blur, it should really be a nice DOF, but that costs 100 bytes more\n\tfor(int g=0;g<80;g++)\n\t\tf+=texture(iChannel0,gl_FragCoord.xy/iResolution.xy+float(g)*.00002).xyz;\n\tfragColor=vec4(f/80.,1);\n}\n\n//You may need to rewind the demo once the shader has loaded to make sure you're in sync with audio.\n//Check the \"Buffer A\" tab for the whole 90 lines that make up this demo, with every line commented.",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 18444,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/evvvvil-evvvvil/spag-bolski"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int sceneQuarter;float tt,g,g2,tunnelShift,clampedZ,ss;vec4 set,set3,set4,set5;//Bunch of fucking global vars, nothing to see here, move along\nvec3 np,cp,sp,ro1=vec3(0,-5,-20.),ro2=vec3(6,-7.5,-4.);//More boring global vars\nvec3 arr[] = vec3[12](vec3(3.,5,0),vec3(3,5,0),vec3(1,1.1,0),vec3(1,3,0),vec3(1,3,0),vec3(2,3,0),vec3(0.4,2.7,0),vec3(3.1,0,2.2),vec3(0,1,2),vec3(2,3,0),vec3(2.2,4.4,1.2),vec3(5.7,3,2));//Array of geometry settings for each scene, we make new scene by changing those numbers\nvec4 b[] = vec4[12](vec4(1.373,0.64,-.7,0.),vec4(1.373,0.64,-.7,0.),vec4(3.14,0.39,3.7,0.),vec4(-1.92,0.90,-0.2,0.),vec4(.785,0.4,3.7,0.0),vec4(0.4,.785,3.7,0.4),vec4(2.19,0.445,3.7,2.5),vec4(1.91,1.28,3.7,0.0),vec4(0.74,0.5,3.7,0),vec4(0.01),vec4(0.3),vec4(0.32));//This is another settings array changing rotation within pseudo fractal and all that shit\nmat2 r(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}//Bloody rotate 2d function, simple as fuck, unlike buying jewelery for the wife or shopping for the husband's fishing rods\nfloat a(float b){return clamp(tt/2.-b/2.,0.,1.);}//THE animation function. Gives you a number from 0 to 1 over two seconds starting at the time specified as the function argument\nfloat s(float b){return 0.3*sin(clamp(tt-b,0.,0.75)*16.76);}//This is the wobble function, again give it a time value and ti will shake shit at that time for second or so.\nfloat bo(vec3 p,vec3 r){vec3 q=abs(p)-r;return max(max(q.x,q.y),q.z);}//Cheap box function, nothing glamorous here, like your girlfriend when she wears her crocs.\nfloat noise(vec3 p){//Ya the bloody noise function from Shane, via Virgill which I actually only use to create a nice specular gloss map.\n    vec3 ip=floor(p),s=vec3(7,157,113);p-=ip;//Bruvs, I'm not that clever I dont really understand this shit, but it's thing of fucking beauty of a noise function, that I can tell you, and it's small for a quality noise\n    vec4 h=vec4(0,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p);\n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);return mix(h.x,h.y,p.z);\n}\nvec2 o(vec2 h, vec2 d){return (h.x<d.x)?h:d;}//Simple geometry merger function whch merges geometries together while retaining material ID\nvec2 fb( vec3 p)//\"Fucking bit\" function which makes a \"fucking bit\" which is like piece that our complex geometry is based on.\n{//Bunch of fucking boxes around a few more boxes, makes a long piece of nicely stacked boxes, we use fb function in map to create huge amount of geom base don this piece\n vec3 dp=p;dp.xy*=r(sin(tt*0.5)*set.w-set5.w);//Create a new position dp to add wobbled rotation\n vec2 h,t=vec2(bo(abs(p)-vec3(3,0,0),vec3(1.*ss,.8,1)),0);//bunch of boxes\n  h=vec2(bo(abs(p)-vec3(2,0,0),vec3(1.2,.8,1.2)),1);//bunch of boxes\n  h.x=min(bo(abs(abs(p)-vec3(0,.6,.6))-vec3(0,.3,.3),vec3(3.,.1,.1*ss)),h.x);//more fucking boxes\n  h.x=min(bo(dp+vec3(5),vec3(17,1,1)),h.x);//God I love a fucking box me\n  t=o(t,h);//Mergeroo the fuckeroo (groups geometry together)\n  h=vec2(bo(dp+vec3(set.z),vec3(17.-sin(p.x*set4.w+tt*set4.w)*17.,0.1,0.1)),9);//These are the transparent glowy lines\n  g+=0.1/(0.1+h.x*h.x*10.);t=o(t,h);//Mergeroo the fuckeroo (groups geometry together)\n  t.x*=.5;return t;//t.x*=0.5 helps remove artifact\n}\nvec2 mp( vec3 p ){//The fucking \"map\" function, where all geometry is made... This bitch is centre stage, like me screaming \"fuck amiga\" to antagonise the old school at any given demo party\n    float modT=mod(tt,14.12);clampedZ=set5.y-clamp((modT-7.06)*set3.w,0.,set5.y*2.);//We change scenes every 14.12 seconds so we mod time by 14.12 to use further down\n    bool m=tt>56.&&tt<111.8;//This bool saves me bytes, it's not super elegent but neither are you\n    tunnelShift=(m&&mod(tt,24.)>12.)?clamp(modT-7.06,0.,2.)/2.:(modT>7.06&&p.z>clampedZ?1.:0.);//This is the scene shifter, it brings the new scene from the back at certain time until it reached the front\n    sp=p;sp.z=mod(p.z+set3.y*set3.w-38.,set3.x*2.)-set3.x;//sp is like a new position for p which we mod\n    np=sp;set=mix(b[sceneQuarter],b[sceneQuarter+1],tunnelShift);//np is also another new position, usually i alwasy use np based on p and i push/pull/rotate and abs symetry the fuckign np positoin before eventually pushing it through fb creating loads of geom\n    for(int i=0;i<6;i++){//Pretty sure you know what a loop is? I mean you just keep making the same mystakes over and over it seems.\n      np=abs(np)-mix(arr[sceneQuarter],arr[sceneQuarter+1],tunnelShift)-set3.z;//Yeah we fucking push np apart each iteration and set3.z is used like to explode the geometry out\n      np.yz*=r(set.x*float(i));//Little bit of rotation on yz axis\n      np.xz*=r(set.y*float(i)-set4.x);//And again more rotation make it bit more interesting\n      np-=.4*atan(p.y); //this makes it all more intresting and make robot faces more like robot fucking faces.\n    }ss=1.;//This is not elegent and why not pass it as arguemnt in fb function? BECAUSE IT COST MORE BYTES. a lot of byte crunching technique are neither elgent nor optimized, but who gives a shit? The byte count must be under 4096 bytes so fuck it\n  \tvec2 h,t=fb(np);//Here now we fucked with np enough and created a complex \"new position\" and we push it throuhg the simple piece function to create huge amount of geom\n    h=vec2(.7*length(np-vec3(0,set4.y,0))-(1.-abs(sin(p.y*0.2+tt*4.))),9);//BLUE BUBBLES \n    g2+=0.1/(0.1+h.x*h.x*10.);t=o(t,h);//Making blue bubbles glow\n    h=vec2(.7*length(sp-vec3(0,-6,0))-5.0,2);//MOUTH (white sphere in middle)\n    h.x=min(h.x,length(abs(sp-vec3(0,2,-6))-vec3(3,0,0))-1.5-a(69.)*1.7);if(m)t=o(t,h);//EYES (two white sphere above previous one and spread out like eyes...\n    cp.xzy=vec3(abs(np.xz)-5.,sin(p.y))+vec3(1,-8,0);// cp is new position for the outter bits it's derived from np.\n    cp.xz*=r(0.785);ss=10.;h=fb(cp);t=o(t,h);//OUTTER BITS. Idea is to create a lot of outter geometry at different scale but using same fb function, heometry is snug but on outisde of central bits made with fb(np)\n    h=vec2(bo(cos(np/2.-vec3(1.5,2.5,2.0)-tt*0.8),vec3(0.1,set4.z,0.1)),2);t=o(t,h);//WHITE LINES, these white lines are not as fun as cocaine white lines, but it's not bad still\n   \th=vec2(bo(abs(np*.6)-set5.z,vec3(0.2,10,0.5)),9);t=o(t,h);g+=0.1/(0.2+h.x*h.x);//Shooting flashy chevrons outta geometry\n    t.x=max(t.x,-bo(p-vec3(0,0,clampedZ),vec3(30,30,.6*max(0.,modT-9.))));//Final cutting box to avoid artifact when merging scenes. Really improves the scene changes to be seamless, otherwise we have dirty cut sdue to brutal tunnelShift if statement\n  \treturn t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 h,uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1),m=vec2(.1),e=vec2(.00035,-.00035);//Get some fucking uvs, set the near plane and define epsilon\n    tt=iTime;//tt is equal to time, if i use directly iTime (t.x in my c++ framework) then it costs more bytes.\n    sceneQuarter=int(floor(tt/7.06)/2.);//Not sure why the fuck i named this sceneQuarter, what it is is that we change the content every 14.12 which is every 2 scenes.\n    set3=vec4(25.-a(14.12)*15.+a(53.5)*21.,clamp(tt-7.06,0.,49.3),sin(a(14.12)*3.14)*3.+sin(a(42.3)*3.14)+(a(111.)-a(127.))*3.5-a(169.)*5.,ceil(clamp(tt-7.06,0.,1.))*2.5+7.5*a(14.12)+a(53.5)*19.-ceil(a(113.))*19.+a(169.));\n    set4=vec4(set3.y*0.03*(1.-a(14.12))+s(55.7)+s(69.7)+s(84.)/3.,-7.5+a(22.4)*10.-a(40.7)*3.,-2.+a(15.5)*3.-a(54.)*.99+a(112.)-a(168.),5.-a(53.5)*5.);//Yeah these vec4s hold animation data, whenever I want to animate something I will put it in one of vec4 scalar and so it optimizes animation bost byte wise and fps wise\n    set5=vec4(6.-a(112.)*3.-a(164.)*3.,32.+a(56.)*15.,-20.+a(53.2)*20.+mod(clamp(tt-56.48,0.,59.7),1.765)*24.,(a(71.)-a(130.))*2.);//so like for example set5.x is used to animate the camera direction\n    float cc=cos(tt*.2),ss=sin(tt*.4);//This saves me bytes as its used a few times\n    if(tt>56.35){//Dirty fucking if else statement because I need to brutally change shit at 56.35 when the robot faces begin and it cost less bytes than doing some sort of polling ceil(a(56.35))\n        set3.y=0.03+max(tt-113.,0.);//At 56.35 I want to stop the tunneling and z axis modulo                \n        if(tt<113.){//Betweeen 56.35 and 113 I want the camera position to move around sort of like in circular path\n        \tro1=vec3(cc*-4.,ss*4.,-15.),ro2=vec3(cc*2.-4.,ss*-2.,-10);\n        }else{ro1=vec3(0,-4.8,-20.+a(113.)*14.);}//after 113 we change one of the camera position\n    }    \n   \tvec3 ro=mix(ro1+s(147.4)+s(154.4)+s(161.4),ro2,floor(mod(max(tt-15.35,0.),7.06)/3.53+ceil(a(78.9)-a(80.6)))-ceil(a(54.18)));//Bang on the clap, every like 3.53 seconds we switch the camera origin from like center to on side, shit like that\n    vec3 cw=normalize(vec3(cc*set5.x,20.*s(13.4)+ss*set5.x,0)-ro),cu=normalize(cross(cw,vec3(0,1,0))),cv=normalize(cross(cu,cw)),//Get camera done bruvs\n    rd=mat3(cu,cv,cw)*normalize(vec3(uv,.5)),co,fo,ld,lp=ro-vec3(0,2,2.5);//You know the fucking socre it's just a bloody camera innit, move along I said, more interesting shit to see.\n    co=fo=vec3(.005+0.5*a(54.))*(1.-(length(uv)-.2));//background and fog color, starts black then gets whiter, idea was you're in a dream and so should be black but towards the end Alexa wakes up so it gets white. Yeah I can totally be a poncy artist when I want, I'm pretentious enough despite my lack of designer beard, and shitty boating shoes worn sockless. Urgh, those people don't just look like cunts, they fucking are.\n    for(int i=0;i<128;i++){//Main raymarching loop, you know the fucking score, usual shit with like super brutal \"transparency\" with one line of code. Size coding is a bitch you gotta get with it bruvs.\n        h=mp(ro+rd*m.x);//The step count above of \"128\" was actually \"196\" for the party version as they have huge gpu. Toned it down for shadertoy but it's bit more dirty, change to 196 for a better look\n        if(h.x<.0001){//We hit something broh, just like me during the last night of Revision demoparty 2019. The day after I woke up with scratched faces cos hit something and fell over when totally drunk but unfortunetly cannot remember where or why. Fun times, broski.\n            if(h.y<9.)break;//if material id is less than 9 then it's opaque shit\n            m.x+=2.;continue;//Here BRUTAL but very short and size coded way of getting some \"transparency\" by just fucking pushing going forward when we hit geom with material id of 9.\n        }\n        m.x+=h.x;m.y=h.y;//YaYa, pass where we at, sphere tracing flex shit and material ID push\n    }\n    vec3 po=ro+rd*m.x,no=normalize(e.xyy*mp(po+e.xyy).x+e.yxy*mp(po+e.yxy).x+e.yyx*mp(po+e.yyx).x+e.xxx*mp(po+e.xxx).x),//Get some fucking position so we can get some normals\n    al=m.y==0.?vec3(.7,.1,.1):vec3(m.y<2.?0.:1.);//Pretty fucking crunched material system, red, black or white \n    ld=normalize(lp-po);//We have a point light and its position is ld so we calculate the light direction from it\n    fragColor = vec4(//MICRO LIGHTING ENGINE, made out of compressed & golfed bits I stole from different people, sss from tekF and specular by Shane? \n        pow(mix((1.-pow(min(1.,length(lp-po)/(tt>28.25?50.:30.)),4.))* //Yeah that's our point light attenuation\n          clamp(pow(max(dot(reflect(-ld,no),-rd),0.),//This is our specular\n                    exp2(1.+3.*noise(np/vec3(.4,.8,.8)+noise((np+1.)/vec3(.2,.4,.4)))))+ //oh yeah broski specular gloss map is fucking winning asit  adds so much detail and bit oif dirty metal look\n            al*exp2(-2.*pow(max(0.,1.-mp(po+no*(m.x/50.)).x/(m.x/50.)),2.))* //Why not throw in some fucking AO, this is nice syze coded ambient occlusion\n            (max(0.,dot(no,ld))+1.5*smoothstep(0.,1.,mp(po+ld*0.4).x/0.4)),0.,1.),              //Subsurface scattering \n          \tfo,1.-exp(-.00002*m.x*m.x*m.x))+g*0.05+vec3(0,.5,1)*g2*0.05,vec3((1.-a(168.5))*.45)),1);//Fog and glow added at the end with also cheap tone mapping and fade to white at the end\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}