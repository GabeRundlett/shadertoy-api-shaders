{
    "Shader": {
        "info": {
            "date": "1497620109",
            "description": "Updated with lots more holes",
            "flags": 0,
            "hasliked": 0,
            "id": "ldlfRl",
            "likes": 8,
            "name": "Chinese Puzzle Balls 2",
            "published": 3,
            "tags": [
                "symmetry"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "// \"Chinese Puzzle Balls 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Updated with lots more holes; symmetry transformations adapted from \"sdf modpolyhedra\"\n  by tdhooper\n*/\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothMin (float a, float b, float r);\nvec3 HsvToRgb (vec3 c);\n\n#define N_BALL 5\nfloat aSpin, sHole, redFac, tCur, dstFar;\nint idObj;\nconst float pi = 3.14159;\n\nvec3 IcosSym (vec3 p)\n{\n  const float dihedIcos = 0.5 * acos (sqrt (5.) / 3.);\n  float a, w;\n  w = 2. * pi / 3.;\n  p.z = abs (p.z);\n  p.yz = Rot2D (p.yz, - dihedIcos);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 4; k ++) {\n    p.zy = Rot2D (p.zy, - dihedIcos);\n    p.y = - abs (p.y);\n    p.zy = Rot2D (p.zy, dihedIcos);\n    if (k < 3) p.xy = Rot2D (p.xy, - w);\n  }\n  p.z = - p.z;\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.x -= 2. * p.x * step (0., p.x);\n  return p;\n}\n\nvec3 DodecSym (vec3 p)\n{\n  const float dihedDodec = 0.5 * atan (2.);\n  float a, w;\n  w = 2. * pi / 5.;\n  p.z = abs (p.z);\n  p.xz = Rot2D (p.xz, dihedDodec);\n  p.xy = Rot2D (p.xy, - 0.25 * w);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 4; k ++) {\n    p.zy = Rot2D (p.zy, - dihedDodec);\n    p.y = - abs (p.y);\n    p.zy = Rot2D (p.zy, dihedDodec);\n    if (k < 3) p.xy = Rot2D (p.xy, - w);\n  }\n  p.z = - p.z;\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.x -= 2. * p.x * step (0., p.x);\n  return p;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float cLen, rad, smVal, dMin, d, aRot, r;\n  dMin = dstFar;\n  rad = 1.;\n  smVal = 0.01;\n  q = p;\n  d = PrTorusDf (q.xzy, 0.03 * rad, 1.03 * rad);\n  if (d < dMin) { dMin = d;  idObj = 20; }\n  q.xz = abs (q.xz) - 0.707 * 1.03 * rad;\n  cLen = 0.7;\n  q.y -= - cLen;\n  d = PrCylDf (q.xzy, 0.03 * rad, cLen);\n  if (d < dMin) { dMin = d;  idObj = 20; }\n  aRot = 1.5 * aSpin;\n  q = p;\n  for (int j = 0; j < N_BALL; j ++) {\n    r = length (q);\n    d = - SmoothMin (- (max (r - rad, - (r - 1.03 * redFac * rad))),\n       min (length (IcosSym (q) + vec3 (0., 0., rad)) - rad * sHole,\n       length (DodecSym (q) + vec3 (0., 0., rad)) - rad * sHole), redFac * smVal);\n     \n    if (d < dMin) { dMin = d;  idObj = j; }\n    q = q.yzx;\n    q.xz = Rot2D (q.xz, aRot);\n    rad *= redFac;\n    smVal *= redFac;\n    aRot *= 1.23;\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float d, h;\n  d = 0.;\n  for (int j = 0; j < 100; j ++) {\n    h = ObjDf (ro + d * rd);\n    d += h;\n    if (h < 0.0005 || d > dstFar) break;\n  }\n  return d;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = 0.1 + float (j) / 16.;\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return 0.5 + 0.5 * clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 1.;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.08 * (1. + 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 ltDir, col, bgCol, vn;\n  float dstHit, ts, amb, c, sh, bk;\n  ts = fract (tCur * 0.333 + 0.125) - 0.25;\n  aSpin = 0.1 * (tCur + max (0., ts) - 3. * min (0., ts));\n  sHole = 0.3 * (0.7 + 0.3 * cos (tCur * 0.4));\n  redFac = 0.87;\n  dstHit = ObjRay (ro, rd);\n  ltDir = normalize (vec3 (0.2, 1., -0.1));\n  col = vec3 (0.);\n  amb = 1.;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    if (idObj < 20) col = HsvToRgb (vec3 (mod (1.7 * float (idObj) + 0.5, 1.), 1., 1.));\n    else col = vec3 (0.5, 0.5, 0.);\n    vn = ObjNf (ro);\n    bk = max (dot (vn, - normalize (vec3 (ltDir.x, 0., ltDir.z))), 0.);\n    sh = ObjSShadow (ro, ltDir);\n    col = col * (0.2 + 0.2 * bk + sh * 0.8 * max (dot (vn, ltDir), 0.)) +\n       sh * 0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    amb = 0.2 * ObjAO (ro, vn);\n    rd = reflect (rd, vn);\n  }\n  c = (rd.y > max (abs (rd.x), abs (rd.z * 0.25))) ? min (2. * rd.y, 1.) :\n     0.05 * (1. + dot (rd, ltDir));\n  if (rd.y > 0.) c += 0.5 * pow (clamp (1.05 - 0.5 *\n     length (max (abs (rd.xz / rd.y) - vec2 (1., 4.), 0.)), 0., 1.), 6.);\n  bgCol = vec3 (0.5, 0.5, 1.) * c + 2. * vec3 (1., 0.8, 0.9) *\n     (clamp (0.0002 / (1. - abs (rd.x)), 0., 1.) +\n      clamp (0.0002 / (1. - abs (rd.z)), 0., 1.));\n  col += amb * bgCol;\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  az = 0.25 * pi - 0.1 * tCur;\n  el = -0.4 + 0.1 * sin (0.3 * tCur);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 4.));\n  ro = vuMat * vec3 (0., 0., -5.);\n  dstFar = 10.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}