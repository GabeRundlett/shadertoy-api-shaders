{
    "Shader": {
        "info": {
            "date": "1670421647",
            "description": "where are the lines and what's chaotic?",
            "flags": 0,
            "hasliked": 0,
            "id": "NltyRN",
            "likes": 2,
            "name": "chaotic lines",
            "published": 3,
            "tags": [
                "lines"
            ],
            "usePreview": 0,
            "username": "Jormala",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "#define PI acos(-1.)\n#define TAU 2.0*PI\n\n#define LINE_COUNT 16\n#define SCALE 6.0\n\n#define nsin(x) sin(x*TAU)*0.5+0.5\n\nstruct Line\n{\n    vec2 pos;\n    float ang;\n    float seed;\n};\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat noise(float x, float seed)\n{\n    float noiseVal = 0.;\n    noiseVal += texture(iChannel0, vec2(x, seed)     ).r;\n    noiseVal += texture(iChannel0, vec2(x+1./1024., seed) ).r;\n    noiseVal += texture(iChannel0, vec2(x+2./1024., seed) ).r;\n    noiseVal += texture(iChannel0, vec2(x+3./1024., seed) ).r;\n    return noiseVal/4.0;\n}\n\nvoid rotate(inout vec2 point, float ang)\n{\n    point *= mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n}\n\nfloat distFromLine(Line l, vec2 point)\n{\n    point -= l.pos;\n    rotate(point, -l.ang);\n\n    float off = sin(point.x*TAU)*0.25*(nsin(iTime*0.05)+0.1);\n    off += noise(point.x/4.0, l.seed)*.2-0.1;\n    \n    float dist = abs(point.y - off);\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = vec2(0.5, 0.5*iResolution.y/iResolution.x);\n\n    vec2 raw_point = fragCoord.xy/iResolution.xx;\n    vec2 raw_p = raw_point-center;\n    float raw_dist = length(raw_p);\n    float raw_p_ang = atan(raw_p.y, raw_p.x)+TAU;\n    \n    float cx = iTime*TAU*0.09;\n    vec2 off = vec2( cos(cx), sin(cx) );\n    \n    vec2 noiseCoord = vec2( cos(raw_p_ang), sin(raw_p_ang) )*0.01+off*0.01;\n    \n    float r = center.y/2.;\n    float r_off = r/10.0;\n    float r_off_off = (noise(noiseCoord.x, noiseCoord.y)*0.2);\n    r += r_off_off*0.2;\n    r_off += r_off_off;\n    \n    float nadd = 7.;\n    float nmult = -3.;\n    float outNoise = noise(noiseCoord.x, noiseCoord.y);\n    \n    outNoise *= nmult;\n    outNoise += nadd;\n    \n    if (raw_dist > r)\n    {\n        float alpha = abs(raw_dist-r);\n        alpha *= outNoise;\n        alpha = clamp(1.-alpha, 0., 1.);\n        alpha = smoothstep(0., 1., alpha);\n        \n        fragColor = vec4(alpha);\n        return;\n    }\n    \n    vec2 point = normalize(raw_p)*acos(raw_dist/r)/TAU*0.25+center;\n    \n    float t = iTime*0.05;\n    t = abs(1.-mod(t, 2.));\n    t = smoothstep(0., 1., t);\n    point = mix(raw_point, point, t);\n    \n    point *= SCALE;\n    center *= SCALE;\n    vec2 p = point-center;\n    float dist = length(p);\n    \n    Line[LINE_COUNT] lines;\n    for (int i=0; i<LINE_COUNT; i++)\n    {\n        float seed = float(i+1)*1000.6874;\n        \n        vec2 pos = vec2(noise(float(i+1)*0.1, seed), noise(float(i+1)*0.2, seed));\n        vec2 dir = vec2(noise(float(i+1)*0.3, seed), noise(float(i+1)*0.4, seed));\n        dir -= pos;\n        \n        pos += dir*iTime*0.001;\n        pos.x = abs(abs(mod(pos.x*2.0, 2.0)-1.0)-1.0)*SCALE;\n        pos.y = abs(abs(mod(pos.y*2.0, 2.0)-1.0)-1.0)*center.y*2.;\n        \n        float ang = noise(float(i+1)*0.5, seed)*TAU+iTime*0.05;\n        \n        lines[i] = Line(pos, ang, seed);\n    }\n    \n    \n    float min_dfl = distFromLine(lines[0], point);\n    for (int i=1; i<LINE_COUNT; i++)\n    {\n        Line l = lines[i];\n        float dfl = distFromLine(l, point);\n        if (dfl < min_dfl)\n            min_dfl = dfl;\n    }\n    \n    /*\n    min_dist = abs(mod(min_dist*2.0, 2.)-1.);\n    min_dist = clamp(min_dist, 0.0, 1.0);\n    min_dist = smoothstep(0., 1., 1.0-min_dist);\n    */\n    \n    float hue = min_dfl*0.1*SCALE;\n    \n    hue += (point.x+point.y/2.)*0.1*SCALE;\n    hue += sin(hue*TAU*6.0)*0.015;\n    \n    float bright = sin(4.*(p.x+p.y)-iTime*2.)*0.15+0.85;\n    \n    vec2 sp = p + off*center.y/2.;\n    float s = atan(sp.y, sp.x)*5.;\n    s += (dist+sin(dist*TAU*6.0)*0.03)*5./SCALE;\n    s += iTime*0.05*TAU;\n    \n    s = clamp(sin(s), 0., 1.);\n    \n    hue += s*2./6.;\n    \n    vec2 uv = raw_p*5.5+vec2(0.55, 0.5);\n    uv = clamp(uv, vec2(0.), vec2(1.));\n    if (texture(iChannel1, uv) == vec4(vec3(0.), 1.))\n    {\n        hue += .5;\n        bright -= 0.1;\n    }\n    \n    float sat = abs(mod(min_dfl*2.0, 2.)-1.);\n    sat = clamp(sat, 0.0, 1.0);\n    sat = smoothstep(0., 1., 1.0-sat);\n    sat = 0.7-sat*0.2;\n    \n    vec3 col = vec3(hue, sat, bright);\n    col = hsv2rgb(col);\n    \n    if (raw_dist > r-r_off)\n    {\n        float t = abs(raw_dist-r);\n        t *= outNoise;\n        t = clamp(1.-t, 0., 1.);\n        t *= (raw_dist-r+r_off)/r_off;\n        t = smoothstep(0., 1., t);\n        \n        float hue = raw_p_ang/PI/2.+iTime*0.09;\n        vec3 nc = hsv2rgb( vec3(hue, 0.8, 1.) );\n        \n        col = mix(col, nc, t);\n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}