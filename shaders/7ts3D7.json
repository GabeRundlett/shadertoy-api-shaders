{
    "Shader": {
        "info": {
            "date": "1622255086",
            "description": "Continuous Multiple Neighborhood Cellular Automata",
            "flags": 32,
            "hasliked": 0,
            "id": "7ts3D7",
            "likes": 15,
            "name": "Continuous MNCA Example 0",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "diffusion",
                "automata",
                "life",
                "chaos",
                "cellular",
                "conway",
                "gameoflife",
                "cellularautomata",
                "cellularautomata",
                "cgol"
            ],
            "usePreview": 1,
            "username": "SlackermanzCA",
            "viewed": 1360
        },
        "renderpass": [
            {
                "code": "//\t----    ----    ----    ----    ----    ----    ----    ----\n//  Shader developed by Slackermanz\n//\n//  Info/Code:\n//  ﻿ - Website: https://slackermanz.com\n//  ﻿ - Github: https://github.com/Slackermanz\n//  ﻿ - Shadertoy: https://www.shadertoy.com/user/SlackermanzCA\n//  ﻿ - Discord: https://discord.gg/hqRzg74kKT\n//  \n//  Socials:\n//  ﻿ - Discord DM: Slackermanz#3405\n//  ﻿ - Reddit DM: https://old.reddit.com/user/slackermanz\n//  ﻿ - Twitter: https://twitter.com/slackermanz\n//  ﻿ - YouTube: https://www.youtube.com/c/slackermanz\n//  ﻿ - Older YT: https://www.youtube.com/channel/UCZD4RoffXIDoEARW5aGkEbg\n//  ﻿ - TikTok: https://www.tiktok.com/@slackermanz\n//  \n//  Communities:\n//  ﻿ - Reddit: https://old.reddit.com/r/cellular_automata\n//  ﻿ - Artificial Life: https://discord.gg/7qvBBVca7u\n//  ﻿ - Emergence: https://discord.com/invite/J3phjtD\n//  ﻿ - ConwayLifeLounge: https://discord.gg/BCuYCEn\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch( iChannel0, ivec2(gl_FragCoord[0], gl_FragCoord[1]), 0); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\t----    ----    ----    ----    ----    ----    ----    ----\n//  Shader developed by Slackermanz\n//\n//  Info/Code:\n//  ﻿ - Website: https://slackermanz.com\n//  ﻿ - Github: https://github.com/Slackermanz\n//  ﻿ - Shadertoy: https://www.shadertoy.com/user/SlackermanzCA\n//  ﻿ - Discord: https://discord.gg/hqRzg74kKT\n//  \n//  Socials:\n//  ﻿ - Discord DM: Slackermanz#3405\n//  ﻿ - Reddit DM: https://old.reddit.com/user/slackermanz\n//  ﻿ - Twitter: https://twitter.com/slackermanz\n//  ﻿ - YouTube: https://www.youtube.com/c/slackermanz\n//  ﻿ - Older YT: https://www.youtube.com/channel/UCZD4RoffXIDoEARW5aGkEbg\n//  ﻿ - TikTok: https://www.tiktok.com/@slackermanz\n//  \n//  Communities:\n//  ﻿ - Reddit: https://old.reddit.com/r/cellular_automata\n//  ﻿ - Artificial Life: https://discord.gg/7qvBBVca7u\n//  ﻿ - Emergence: https://discord.com/invite/J3phjtD\n//  ﻿ - ConwayLifeLounge: https://discord.gg/BCuYCEn\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n#define txdata (iChannel0)\n#define PI 3.14159265359\n\nconst uint MAX_RADIUS = 16u;\n\nuint u32_upk(uint u32, uint bts, uint off) { return (u32 >> off) & ((1u << bts)-1u); }\n\nfloat  tp(uint n, float s) \t\t\t{ return (float(n+1u)/256.0) * ((s*0.5)/128.0); }\nfloat utp(uint v, uint  w, uint o) \t{ return tp(u32_upk(v,w,w*o), 105.507401); }\nfloat bsn(uint v, uint  o) \t\t\t{ return float(u32_upk(v,1u,o)*2u)-1.0; }\n    \nvec3 gdc( ivec2 of, sampler2D tx ) {\n\tfloat \tfx \t\t= gl_FragCoord[0];\n\tfloat \tfy \t\t= gl_FragCoord[1];\n\tfloat\twx \t\t= iResolution.x;\n\tfloat\twy \t\t= iResolution.y;\n\tfloat\twv \t\t= 1.0;\n\tvec2\tdc\t\t= vec2( wx/wv, wy/wv );\n\tfloat\tcx\t\t= mod( fx+float(of[0]), dc[0] ) + floor( fx/dc[0] ) * dc[0];\n\tfloat\tcy\t\t= mod( fy+float(of[1]), dc[1] ) + floor( fy/dc[1] ) * dc[1];\n\tvec4 \tpxdata \t= texelFetch( tx, ivec2(cx, cy), 0);\n\treturn \tvec3( pxdata[0], pxdata[1], pxdata[2] ); }\n    \nfloat gdv( ivec2 of, sampler2D tx, int c ) {\n\tvec3 pxdata = gdc( of, tx );\n\treturn \tpxdata[c]; }\n    \nvec2 nbhd( ivec2 r, sampler2D tx, int c ) {\n\tuint\ttmx = 65536u;\n\tuint\tchk = 2147483648u / (\n\t\t\t\t\t( \tuint(float(r[0])*float(r[0])*PI + float(r[0])*PI + PI\t)\n\t\t\t\t\t- \tuint(float(r[1])*float(r[1])*PI + float(r[1])*PI\t\t) ) * 128u );\n\tfloat\tpsn = (chk >= tmx) ? float(tmx) : float(chk);\n\t\t\tfloat \td = 0.0;\n\t\t\tfloat \ta = 0.0;\n\t\t\tfloat \tb = 0.0;\n\t\t\tfloat\tt = 0.0;\n\tfor(float i = float(r[0])*-1.0; i <= float(r[0]); i+=1.0) {\n\t\tfor(float j = float(r[0])*-1.0; j <= float(r[0]); j+=1.0) {\n\t\t\t\t\td = round(sqrt(i*i+j*j));\n\t\t\tfloat\tw = 1.0;\n\t\t\tif( d <= float(r[0]) && d > float(r[1]) ) {\n\t\t\t\tt  = gdv( ivec2(i,j), tx, c ) * w * psn;\n\t\t\t\ta += t - fract(t);\n\t\t\t\tb += w * psn; } } }\n\treturn vec2(a, b); }\n                \nfloat bitring(vec2[MAX_RADIUS] rings, uint bits) {\n\tfloat sum = 0.0; float tot = 0.0;\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) {\n\t\tif(u32_upk(bits, 1u, i) == 1u) { sum += rings[i][0]; tot += rings[i][1]; } }\n\treturn sum / tot; }\n    \n//\tUsed to reseed the surface with lumpy noise\nfloat get_xc(float x, float y, float xmod) {\n\tfloat sq = sqrt(mod(x*y+y, xmod)) / sqrt(xmod);\n\tfloat xc = mod((x*x)+(y*y), xmod) / xmod;\n\treturn clamp((sq+xc)*0.5, 0.0, 1.0); }\nfloat shuffle(float x, float y, float xmod, float val) {\n\tval = val * mod( x*y + x, xmod );\n\treturn (val-floor(val)); }\nfloat get_xcn(float x, float y, float xm0, float xm1, float ox, float oy) {\n\tfloat  xc = get_xc(x+ox, y+oy, xm0);\n\treturn shuffle(x+ox, y+oy, xm1, xc); }\nfloat get_lump(float x, float y, float nhsz, float xm0, float xm1) {\n\tfloat \tnhsz_c \t= 0.0;\n\tfloat \txcn \t= 0.0;\n\tfloat \tnh_val \t= 0.0;\n\tfor(float i = -nhsz; i <= nhsz; i += 1.0) {\n\t\tfor(float j = -nhsz; j <= nhsz; j += 1.0) {\n\t\t\tnh_val = round(sqrt(i*i+j*j));\n\t\t\tif(nh_val <= nhsz) {\n\t\t\t\txcn = xcn + get_xcn(x, y, xm0, xm1, i, j);\n\t\t\t\tnhsz_c = nhsz_c + 1.0; } } }\n\tfloat \txcnf \t= ( xcn / nhsz_c );\n\tfloat \txcaf\t= xcnf;\n\tfor(float i = 0.0; i <= nhsz; i += 1.0) {\n\t\t\txcaf \t= clamp((xcnf*xcaf + xcnf*xcaf) * (xcnf+xcnf), 0.0, 1.0); }\n\treturn xcaf; }\nfloat reseed(int seed) {\n\tvec4\tfc = gl_FragCoord;\n\tfloat \tr0 = get_lump(fc[0], fc[1],  2.0, 19.0 + mod(iDate[3]+float(seed),17.0), 23.0 + mod(iDate[3]+float(seed),43.0));\n\tfloat \tr1 = get_lump(fc[0], fc[1], 14.0, 13.0 + mod(iDate[3]+float(seed),29.0), 17.0 + mod(iDate[3]+float(seed),31.0));\n\tfloat \tr2 = get_lump(fc[0], fc[1],  6.0, 13.0 + mod(iDate[3]+float(seed),11.0), 51.0 + mod(iDate[3]+float(seed),37.0));\n\treturn clamp((r0+r1)-r2,0.0,1.0); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tShader Setup\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n\tconst\tfloat \tmnp \t= 1.0 / 65536.0;\t\t\t//\tMinimum value of a precise step for 16-bit channel\n    const \tivec2\torigin  = ivec2(0, 0);\n            vec3\tref_c\t= gdc( origin, txdata );\t//\tOrigin value references\n    \n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tRule Initilisation\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n\tuint[4] bitringdata = uint[4]\n\t(\t32766u, \t\t3472619019u, \t32752u, \t\t3675719802u \t);\n\n\tuint[8] ubv \t\t= uint[8]\n\t(\t39879523u, \t\t526972426u, \t2727874005u, \t1461826227u, \n\t\t1300644632u, \t1298224u, \t\t95419984u, \t\t823214418u\t\t);\n\n\tuint[1] ubi \t\t= uint[1]\n\t(\t2390857921u \t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n//\tParameters\n\tconst\tfloat \ts  = mnp *  64.0 *  96.0;\n\tconst\tfloat \tn  = mnp *  64.0 *  16.0;\n\n//\tOutput Values\n\tvec3 res_c = ref_c;\n\n//\tNH Rings\n\tvec2[MAX_RADIUS] nh_rings_r;\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) {\n\t\tnh_rings_r[i] = nbhd( ivec2(i+1u,i), txdata, 0 ); }\n\n\tfloat[4] nhv_r;\n        nhv_r[0] = bitring(nh_rings_r, bitringdata[0]);\n        nhv_r[1] = bitring(nh_rings_r, bitringdata[1]);\n        nhv_r[2] = bitring(nh_rings_r, bitringdata[2]);\n        nhv_r[3] = bitring(nh_rings_r, bitringdata[3]);\n\n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tUpdate Functions\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n\tconst uint bt = 8u;\n\n\tif( nhv_r[0] >= utp(ubv[0],bt,0u) && nhv_r[0] <= utp(ubv[0],bt,1u) ) { res_c[0] += bsn(ubi[0], 0u)*s; }\n\tif( nhv_r[0] >= utp(ubv[0],bt,2u) && nhv_r[0] <= utp(ubv[0],bt,3u) ) { res_c[0] += bsn(ubi[0], 1u)*s; }\n\tif( nhv_r[0] >= utp(ubv[1],bt,0u) && nhv_r[0] <= utp(ubv[1],bt,1u) ) { res_c[0] += bsn(ubi[0], 2u)*s; }\n\tif( nhv_r[0] >= utp(ubv[1],bt,2u) && nhv_r[0] <= utp(ubv[1],bt,3u) ) { res_c[0] += bsn(ubi[0], 3u)*s; }\n\n\tif( nhv_r[1] >= utp(ubv[2],bt,0u) && nhv_r[1] <= utp(ubv[2],bt,1u) ) { res_c[0] += bsn(ubi[0], 4u)*s; }\n\tif( nhv_r[1] >= utp(ubv[2],bt,2u) && nhv_r[1] <= utp(ubv[2],bt,3u) ) { res_c[0] += bsn(ubi[0], 5u)*s; }\n\tif( nhv_r[1] >= utp(ubv[3],bt,0u) && nhv_r[1] <= utp(ubv[3],bt,1u) ) { res_c[0] += bsn(ubi[0], 6u)*s; }\n\tif( nhv_r[1] >= utp(ubv[3],bt,2u) && nhv_r[1] <= utp(ubv[3],bt,3u) ) { res_c[0] += bsn(ubi[0], 7u)*s; }\n\n\tif( nhv_r[2] >= utp(ubv[4],bt,0u) && nhv_r[2] <= utp(ubv[4],bt,1u) ) { res_c[0] += bsn(ubi[0], 8u)*s; }\n\tif( nhv_r[2] >= utp(ubv[4],bt,2u) && nhv_r[2] <= utp(ubv[4],bt,3u) ) { res_c[0] += bsn(ubi[0], 9u)*s; }\n\tif( nhv_r[2] >= utp(ubv[5],bt,0u) && nhv_r[2] <= utp(ubv[5],bt,1u) ) { res_c[0] += bsn(ubi[0],10u)*s; }\n\tif( nhv_r[2] >= utp(ubv[5],bt,2u) && nhv_r[2] <= utp(ubv[5],bt,3u) ) { res_c[0] += bsn(ubi[0],11u)*s; }\n\n\tif( nhv_r[3] >= utp(ubv[6],bt,0u) && nhv_r[3] <= utp(ubv[6],bt,1u) ) { res_c[0] += bsn(ubi[0],12u)*s; }\n\tif( nhv_r[3] >= utp(ubv[6],bt,2u) && nhv_r[3] <= utp(ubv[6],bt,3u) ) { res_c[0] += bsn(ubi[0],13u)*s; }\n\tif( nhv_r[3] >= utp(ubv[7],bt,0u) && nhv_r[3] <= utp(ubv[7],bt,1u) ) { res_c[0] += bsn(ubi[0],14u)*s; }\n\tif( nhv_r[3] >= utp(ubv[7],bt,2u) && nhv_r[3] <= utp(ubv[7],bt,3u) ) { res_c[0] += bsn(ubi[0],15u)*s; }\n\n    res_c[0] -= n;\n\tres_c[1] = res_c[0];\n\tres_c[2] = res_c[0];\n    \n    res_c = clamp(res_c,0.0,1.0);\n    \n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tShader Output\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n    if (iMouse.z > 0. && length(iMouse.xy - fragCoord) < 14.0) {\n        res_c[0] = round(mod(float(iFrame),2.0));\n        res_c[1] = 0.0;\n        res_c[2] = 0.0; }\n    if (iFrame == 0) { res_c[0] = reseed(0); res_c[1] = reseed(1); res_c[2] = reseed(2); }\n    fragColor=vec4(res_c[0],res_c[1],res_c[2],1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}