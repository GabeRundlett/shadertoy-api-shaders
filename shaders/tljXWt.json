{
    "Shader": {
        "info": {
            "date": "1567533482",
            "description": "Inspired by Mark Rothko paintings, it cycles through color palettes and generates a noisier and more watercolor looking version.",
            "flags": 0,
            "hasliked": 0,
            "id": "tljXWt",
            "likes": 8,
            "name": "Rothko generator",
            "published": 3,
            "tags": [
                "2d",
                "art",
                "rothko"
            ],
            "usePreview": 0,
            "username": "stseagle",
            "viewed": 1122
        },
        "renderpass": [
            {
                "code": "vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\n// Official HSV to RGB conversion \n\n// Smooth HSV to RGB conversion \nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n// Color, and then amount (in percent) is positive for  \n// brightening and negative for darkening\nvec3 brighten(in vec3 color, in float amt) {\n    vec3 c_hsv = rgb2hsb(color);\n    return hsv2rgb(vec3(c_hsv.x, c_hsv.y, c_hsv.z * (1. + amt)));\n}\n\n// Color, and then amount to shift the hue\nvec3 shiftHue(in vec3 color, in float amt) {\n    vec3 c_hsv = rgb2hsb(color);\n    return hsv2rgb(vec3(c_hsv.x + amt, c_hsv.y, c_hsv.z));\n}\n\n// Color, and then amount (in percent) of saturation -\n//  positive to saturate negative to desaturate\nvec3 saturate(in vec3 color, in float amt) {\n    vec3 c_hsv = rgb2hsb(color);\n    return hsv2rgb(vec3(c_hsv.x, c_hsv.y * (1. + amt), c_hsv.z));\n}\n\nvec3 drawRect(in vec2 _st, vec2 pos, vec2 size, vec3 color) {\n    float hor = step(pos.x,_st.x) - step(pos.x + size.x,_st.x);\n    float ver = step(pos.y,_st.y) - step(pos.y + size.y,_st.y);\n    return mix(vec3(0.0), color,  hor * ver);\n}\n\nfloat drawRoundRect(in vec2 _st, vec2 pos, vec2 size, float edges) {\n    float hor = smoothstep(pos.x, pos.x + edges, _st.x) - smoothstep(pos.x + size.x,pos.x + size.x + edges,_st.x);\n    float ver = smoothstep(pos.y, pos.y + edges,_st.y) - smoothstep(pos.y + size.y, pos.y + size.y + edges,_st.y);\n    return hor * ver;\n}\n\n// From Inigo Quilez\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n// https://www.shadertoy.com/view/XdXGW8 \nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat random(in float seed) {\n    return fract(sin(dot(vec2(seed),\n                         vec2(11.039234,66.74392)))*\n        5706.2373);\n}\n\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    return mix(random(i), random(i + 1.), smoothstep(0.,1.,f));\n}\n\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\nfloat noisyRect(in vec2 _st, vec2 pos, vec2 size, vec2 noiseFrac, float ratio) {\n    float r1 = 0.;\n    // The crispy rectangle\n    float no = snoise(_st * 115.) *.3;\n    vec2 mt = iMouse.xy/max(iResolution.x, iResolution.y);\n    float hor = smoothstep(pos.x , pos.x + 0.07,_st.x) - \n        smoothstep(pos.x + size.x , pos.x + size.x + 0.07,_st.x) ;\n    float ver = smoothstep(pos.y , pos.y + 0.07,_st.y) - \n        smoothstep(pos.y + size.y , pos.y + size.y+ 0.07,_st.y) ;\n\n    r1 = hor * ver + no;\n    r1 = ratio * step(0.7,r1);\n\n    // the soft rectangle\n    float r2= 0.;\n    no = noise(_st * (28.23)) * (0.06 + 0.02 * sin(iTime))+0.02;\n    float hor2 = smoothstep(pos.x +no, pos.x + 2.*no,_st.x) - \n        smoothstep(pos.x + size.x+no, pos.x + size.x + 2.*no,_st.x) ;\n    float ver2 = smoothstep(pos.y+no, pos.y +2.*no,_st.y) - \n        smoothstep(pos.y + size.y+no, pos.y + size.y+2.*no,_st.y) ;\n\n    r2 = (1. - ratio ) *hor2 * ver2;\n\n    return  r1 + r2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/min(iResolution.x, iResolution.y);\n    float w = 0.74;\n    // Center the tall rectangle if landscape aspect ratio\n    if (iResolution.x > iResolution.y) { \n    \tst.x -= 0.4*(iResolution.x - 0.74 * iResolution.y)/iResolution.y;\n    }\n    \n    vec2 mt = iMouse.xy/min(iResolution.x, iResolution.y);\n    vec3 base_color = vec3(0.4 + 0.4 * sin(iTime * 0.12 + 0.4), \n                0.36 + 0.35 * sin(iTime* 0.05 + 0.3), 0.5 +\n                0.57 * cos(iTime * 0.034 + 0.35)); \n    vec3 color = brighten(shiftHue(base_color, 0.5), -0.7);\n   \n\n    float splits[4]; \n    splits[0] = 0.;\n    splits[1] = 0.1 + 0.3 * noise(iTime * .11);\n    splits[2] = 0.3 + 0.3 * noise(iTime * .352);\n    splits[3] = .95;\n\n    // Paint noise\n    float n = 0.5 + 0.6 * noise(vec2(st.x*  90., st.y* 16.1 ) + mt);\n\t\n    // The buffer between the rectangles and edges\n    float bf = 0.02;\n    \n    // Make three noisy rectangles\n    vec3 rects = vec3(0.);\n    for (int i = 0; i < 3; i++) {\n        float x = bf;\n        float y = bf * (float(i) ) + splits[i];\n        \n        float h = splits[i+1] - y;\n        vec3 c = shiftHue(brighten(saturate(base_color, -float(i) * 0.25), \n                                   -float(i) * 0.18), -float(i-2) * 0.02);\n\n        rects += noisyRect(st , vec2(x,y), vec2(w, h), vec2(mt.x, mt.y) ,\n                           0.2 + mt.y * 0.4) * c + \n            0.5 * noisyRect(st , vec2(x,y), vec2(w, h), vec2(mt.x, mt.y) , mt.y) * c ;\n        rects -= drawRoundRect(st, vec2(x,y), vec2(w, h), 0.03) * n * \n                    brighten(shiftHue(c, -0.16) , -0.5) * 0.45;\n\n    }\n\n    color += rects;\n\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}