{
    "Shader": {
        "info": {
            "date": "1666421665",
            "description": "modified @vincentdchan's for the night mode version, only changed colours",
            "flags": 32,
            "hasliked": 0,
            "id": "mdf3R2",
            "likes": 5,
            "name": "macOS Monterey 2",
            "published": 3,
            "tags": [
                "wallpape"
            ],
            "usePreview": 0,
            "username": "itsmealec",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord/iResolution.xy;\n  fragColor = texture(iChannel0, uv);\n\n  fragColor.xyz *= (uv.y * 1.08 + 0.65);\n  // fragColor = vec4(col); // Output to screen\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 sin_shape(in vec2 uv, in float offset_y) {\n  // Time varying pixel color\n  float y = sin((uv.x + iTime * -0.06 + offset_y) * 5.5);\n\n  float x = uv.x * 8.;\n  float a=1.;\n\tfor (int i=0; i<5; i++) {\n\t\tx*=0.53562;\n\t\tx+=6.56248;\n\t\ty+=sin(x)*a;\t\t\n\t\ta*=.5;\n\t}\n\n  float y0 = step(0.0, y * 0.08 - uv.y + offset_y);\n  return vec3(y0, y0, y0);\n}\n\nvec2 rotate(vec2 coord, float alpha) {\n  float cosA = cos(alpha);\n  float sinA = sin(alpha);\n  return vec2(coord.x * cosA - coord.y * sinA, coord.x * sinA + coord.y * cosA);\n}\n\nvec3 scene(in vec2 uv) {\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    col += sin_shape(uv, 0.3) * 0.2;\n    col += sin_shape(uv, 0.7) * 0.2;\n    col += sin_shape(uv, 1.1) * 0.2;\n\n    vec3 fragColor;\n    \nif (col.x >= 0.6 ) {\t\t\tfragColor = vec3(0.12549019607843137, 0.043137254901960784, 0.4117647058823529);\n    } else if (col.x >= 0.4) {\tfragColor = vec3(0.27254901960784315, 0.05411764705882353, 0.607843137254902);\n    } else if (col.x >= 0.2) {\tfragColor = vec3(0.7215686274509804, 0.19215686274509805, 0.7294117647058823);\n    } else {\t\t\t\t\tfragColor = vec3(0.8352941176470589, 0.3764705882352941, 0.6588235294117647);\n    }\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = rotate(fragCoord + vec2(0.0, -300.0), 0.5);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 col0 = scene((fragCoord * 2.0)/iResolution.xy);\n    vec3 col1 = scene((-(fragCoord * 2.0) + vec2(1.0, 0.0))/iResolution.xy);\n    vec3 col2 = scene((-(fragCoord * 2.0) + vec2(1.0, 1.0))/iResolution.xy);\n    vec3 col3 = scene(((fragCoord * 2.0) + vec2(0.0, 1.0))/iResolution.xy);\n\n    // Output to screen\n    fragColor = vec4((col0 + col1 + col2 + col2) / 4.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}