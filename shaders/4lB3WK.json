{
    "Shader": {
        "info": {
            "date": "1432993658",
            "description": "there's just so much stuff you can do with ray marching",
            "flags": 0,
            "hasliked": 0,
            "id": "4lB3WK",
            "likes": 7,
            "name": "raymarching is so awesome",
            "published": 3,
            "tags": [
                "3d",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 836
        },
        "renderpass": [
            {
                "code": "#define FOV_SCALE 1.\n#define EPSILON .008\nconst vec3 ne = vec3(.0004435,0.,0.);\nconst vec3 repeat = vec3(20.,0.,20.);\nconst vec3 repeat2 = repeat/2.;\n\nfloat df(in vec3 p) {\n    vec3 ap = abs(p);\n    vec3 r = mod(ap,repeat)-repeat2;\n    float d = min(1.+p.y,\n                  length(max(abs(r)-vec3(2.,40.,2.),0.)));\n    \n    float dp = cos(ap.x+ap.z)*.5+.5;\n    ap.y += dp;\n    d = max(-(length(mod(ap,vec3(5.))-vec3(2.5))-2.), d);\n\n    return d;\n}\nvec3 nrm(in vec3 p) {\n    return normalize(vec3(df(p+ne)-df(p-ne),\n                     df(p+ne.yxz)-df(p-ne.yxz),\n                     df(p+ne.yzx)-df(p-ne.yzx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n    uv.y *= iResolution.y/iResolution.x;\n\t\n    vec3 ld = normalize(vec3(500.,100.,200.));\n    float ct = iTime*10.;\n    vec3 rp = vec3(0.,20.,ct);\n    vec3 rd = normalize(vec3(0.,-2.,10.));\n    vec3 srd = rd;\n    vec3 rr = cross(vec3(0.,1.,0.),rd);\n    rd = normalize(rd*FOV_SCALE + uv.x*rr + uv.y*cross(rd,rr));\n    //rr = vec3(0.,0.,0.)*.001;\n    \n    float d,s = 0.;\n    for (int i = 0; i < 256; i++) {\n        d = df(rp);\n        if (d < EPSILON) break;\n        \n        rp += d*rd;\n        s += d*.02;\n        //rd = normalize(rd+d*rr);\n        rr = cross(normalize(vec3(sin(s),cos(s),sin(s))),rd);\n    \trd = normalize(srd*FOV_SCALE + uv.x*rr + uv.y*cross(rd,rr));\n    }\n    \n    vec3 c;\n    if (d < EPSILON) {\n        vec3 n = nrm(rp);\n        c = texture(iChannel0,(rp.xy+rp.zx*.5)*.1).xyz;\n        \n        rd = n;\n        rp -= rd*d;\n        for (int i = 0; i < 4; i++) {\n            d = df(rp);\n            if (d < EPSILON) break;\n        }\n        \n        c = .14*c +\n            max(0.,dot(ld,n))*c;\n    } else {\n        c = vec3(.9);\n    }\n    \n    fragColor = vec4(pow(c*2.0,vec3(1.2,1.2,1.3)),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}