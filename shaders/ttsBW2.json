{
    "Shader": {
        "info": {
            "date": "1597969970",
            "description": "Source Link : https://www.youtube.com/watch?v=HFPlKQGChpE\nMy Game : https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ttsBW2",
            "likes": 1,
            "name": "19. Calculating Ray-Sphere",
            "published": 3,
            "tags": [
                "simplebuff"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "float remap01( float a , float b , float t ) {\n\treturn ( t - a ) / ( b - a );   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord - 0.5 * iResolution.xy ) / iResolution.y;\n\n    \n    vec3 col =vec3(0);\n    \n    \n    vec3 ro = vec3(0);\n    vec3 rd = normalize( vec3( uv.x , uv.y , 1 ) );\n    \n    vec3 s = vec3( 0 , 0 , 3);\n    \n    float radius = 1.0;\n    float t = dot( s - ro , rd );\n    vec3 p = ro + rd * t ;\n    \n    \n    float y = length( s - p );\n    \n    if ( y < radius ) {\n    \tfloat x = sqrt( radius * radius - y * y  );\n    \tfloat t1 = t - x ;\n    \tfloat t2 = t + x;\n        \n        float c = remap01(s.z , s.z  - radius, t1 );\n        col = vec3(c);\n    }\n    \n    \n    \n    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}