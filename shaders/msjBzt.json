{
    "Shader": {
        "info": {
            "date": "1690044966",
            "description": "Welcome to visit our Rainbow Rhythm via Real-Time Ray Tracing on GPUÔºÅ",
            "flags": 0,
            "hasliked": 0,
            "id": "msjBzt",
            "likes": 1,
            "name": "SWS3005_13",
            "published": 3,
            "tags": [
                "realtimeraytracing"
            ],
            "usePreview": 0,
            "username": "oasis_land",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.8, 0.8, 0.8 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 4;\nconst int NUM_MATERIALS = 10;\nconst int NUM_PLANES = 1;\nconst int NUM_ROWS = 5;\nconst int NUM_SPHERES = NUM_ROWS * NUM_ROWS;\n\nconst int n = 10;\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n    float radian;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\nvec3 hsv2rgb(vec3 hsv)\n{\n    vec3 rgb = clamp(abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\n    rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n    return hsv.z * mix(vec3(1.0), rgb, hsv.y);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    for(int i = 0;i < NUM_ROWS;i++)\n    {\n        for(int j = 0;j < NUM_ROWS;j++)\n        {\n            Sphere[i * NUM_ROWS + j].radius = 0.5;\n            Sphere[i * NUM_ROWS + j].radian = float(i + j) * PI / 10.0;\n            Sphere[i * NUM_ROWS + j].center = vec3( -i * 2 + 4, abs(sin(2.0 * iTime + Sphere[i * NUM_ROWS + j].radian)) + Sphere[i * NUM_ROWS + j].radius, -j * 2 + 4);\n            Sphere[i * NUM_ROWS + j].materialID = i + 5 - j ;\n        }\n    }\n    \n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    for(int i = 1; i < 10; i++)\n    {\n        float colorchange = float(i) / 5.0 + iTime / 2.0;\n        Material[i].k_d = hsv2rgb(vec3(mod(colorchange, 1.0), 1.0, 1.0));;\n        Material[i].k_a = 0.2 * Material[i].k_d;\n        Material[i].k_r = vec3( 0.5, 0.5, 0.5 ) + 0.5 * Material[i].k_d;\n        Material[i].k_rg = 0.5 * Material[i].k_r;\n        Material[i].n = 128.0;\n    }\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, 4.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 0.7, 0.3, 0.3 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 4.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 0.3, 0.7, 0.3 );\n\n    // Light 2.\n    Light[2].position = vec3( 4.0, 8.0, -4.0 );\n    Light[2].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[2].I_source = vec3( 0.2, 0.2, 0.9 );\n\n    // Light 3.\n    Light[3].position = vec3( -4.0, 8.0, -4.0 );\n    Light[3].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[3].I_source = vec3( 0.6, 0.6, 0.1 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n     \n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = N;\n    for(int j = 0; j < NUM_SPHERES; j++)\n    {\n        vec3 radius = hitPos - vec3(Sphere[j].center.x ,0.0 ,Sphere[j].center.z);\n        float r = length(radius)/5.0;\n        float time = fract((iTime * 2.0 + Sphere[j].radian) / PI) * PI / 2.0;\n        if(r < time && r > (time - PI/10.0))\n        {\n            hitNormal += sin((r - time) * 40.0) * normalize(radius) * (PI / 2.0 - time) / (PI / 2.0);\n        }\n    }\n    \n    hitNormal = normalize(hitNormal);\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    \n    float a = dot(ray.d,ray.d);\n    float b = 2.0 * dot(ray.d, ray.o - sph.center);\n    float c = dot(ray.o - sph.center,ray.o - sph.center) - sph.radius * sph.radius;\n    float d = b * b - 4.0 * a * c;\n    if(d < 0.0) return false;\n    float sqrtd = sqrt(d);\n    float t1 = (- b - sqrtd)/(2.0 * a);\n    float t2 = (- b + sqrtd)/(2.0 * a); \n\n    if (tmin <= t1 && t1 <= tmax) t = t1;\n    else if (tmin <= t2 && t2 <= tmax) t = t2;\n    else return false;\n\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(hitPos - sph.center);\n\n    return true;\n\n\n    //return false;  // Replace this with your code.\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    \n    float a = dot(ray.d,ray.d);\n    float b = 2.0 * dot(ray.d, ray.o - sph.center);\n    float c = dot(ray.o - sph.center,ray.o - sph.center) - sph.radius * sph.radius;\n    float d = b * b - 4.0 * a * c;\n    if(d < 0.0) return false;\n    float sqrtd = sqrt(d);\n    float t1 = (- b - sqrtd)/(2.0 * a);\n    float t2 = (- b + sqrtd)/(2.0 * a); \n\n    if (tmin <= t1 && t1 <= tmax) return true;\n    else if (tmin <= t2 && t2 <= tmax) return true;\n    else return false;\n\n    //return false;  // Replace this with your code.\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    for (int i = 0; i < NUM_PLANES; i++)\n    {\n        if (IntersectPlane(Plane[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal))\n        {\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Plane[i].materialID;\n            hasHitSomething = true;\n        }\n    }\n    for (int i = 0; i < NUM_SPHERES; i++)\n    {\n        if (IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) \n        {\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;\n            hasHitSomething = true;\n        }\n    }\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    for (int i = 0; i < NUM_LIGHTS; i++)\n    {\n        Ray_t lightray;\n        lightray.o = nearest_hitPos;\n        lightray.d = normalize(Light[i].position - nearest_hitPos);\n        bool inShadow = false;\n        for (int j = 0; j < NUM_PLANES; j++)\n        {\n            if (IntersectPlane(Plane[j], lightray, DEFAULT_TMIN, nearest_t))\n                inShadow = true;\n            \n        }\n        for (int j = 0; j < NUM_SPHERES; j++)\n        {\n            if (IntersectSphere(Sphere[j], lightray, DEFAULT_TMIN, nearest_t)) \n                inShadow = true;\n        }\n        I_local += PhongLighting(lightray.d, nearest_hitNormal, -ray.d, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 2.0 * sin(iTime / 2.0) + 5.0, 7.0, 2.0 * cos(iTime / 2.0));\n    vec3 cam_lookat = vec3( 0.0, 0.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis));\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis * 1.0  +  pixel_pos.y * cam_y_axis * 1.0 +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}