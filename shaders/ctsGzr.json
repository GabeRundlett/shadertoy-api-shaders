{
    "Shader": {
        "info": {
            "date": "1671566366",
            "description": "morphin circles , from left to right \n//n_sum,    (n+=n); \n//n_min     (min(n_min, n))\n//n_product (n*=n)\n//n_quotient",
            "flags": 0,
            "hasliked": 0,
            "id": "ctsGzr",
            "likes": 1,
            "name": "multiple ways to 'morph' circles",
            "published": 3,
            "tags": [
                "morphing"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "float f_o_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trpino_nooffset = (fragCoord.xy )/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_fc_nor = (fragCoord.xy )/ iResolution.xy;\n    \n   \n    float[] a_n_operation_result = float[](\n        0.0, //n_sum,    (n+=n); \n        1.0, //n_min     (min(n_min, n))\n        1.0, //n_product (n*=n)\n        1.0 //n_quotient\n    );\n    float n_index = floor(o_fc_nor.x / (1. / float(a_n_operation_result.length())));\n    float n_x =(1./float(a_n_operation_result.length()));\n    n_x = (n_x)*n_index +(n_x/2.);\n    vec2[] a_o = vec2[](\n        vec2(n_x, sin(iTime)*0.5+0.5),\n        vec2(n_x, sin(iTime+(6.2831/2.))*0.5+0.5)\n    );\n    vec2 o_diff = vec2(0.);\n    for(float n_index = 0.; n_index < float(a_o.length()); n_index+=1.){\n        vec2 o_diff = o_fc_nor - a_o[int(n_index)];\n        float n_length = length(o_diff);\n        a_n_operation_result[0] += n_length;\n        a_n_operation_result[1] = min(a_n_operation_result[1], n_length);\n        a_n_operation_result[2] *= n_length;\n        a_n_operation_result[3] /= n_length;\n    }\n    \n    float n = a_n_operation_result[int(n_index)];\n    fragColor = vec4(n);\n    //fragColor = sqrt(fragColor);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}