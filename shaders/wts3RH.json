{
    "Shader": {
        "info": {
            "date": "1555688979",
            "description": "experimental semi-failures of weaving in wallpaper tilings\ntried to make this weave with 1 smooshstep, but could only reduce it to a 2d smoothstep.\n\nthe 2 patterns have a semi-nonintuitive overlap, not a lot like a \"weave\", but also not useless.",
            "flags": 0,
            "hasliked": 0,
            "id": "wts3RH",
            "likes": 1,
            "name": "weave trials",
            "published": 3,
            "tags": [
                "smoothstep",
                "wallpaper",
                "chip",
                "weaving",
                "weave"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "/*\nhttps://www.shadertoy.com/view/Wlf3z8\nmade me try to parallelize/untie the [smoothstep()-smoothstep()]\nor [smoothstep*smoothstep()] dupe/differential that comes with such weaves\n, that is in all these culling weaves\n, into a [vec2 smoothstep()] with some wallpaper-folding\n, and then my 2 layers went a bit overboard with compositing:\n\nself: https://www.shadertoy.com/view/wts3RH\n\nsimilar cross-T-fold and offser-crosses (in 3d space) are included in my [spinor] shader\n, used to identity spinning axes in a distorting field:\nhttps://www.shadertoy.com/view/tdXXzl\nnote that a 3d T-fold uis useful to make a [wireframe box] or [wireframe cross]\n//but thats really just a sequence of 2 2d folds?\n\nthere is a lot of parallelization potential for weaves in higher domain counts\n, that then get culled into less domains, with overlap.\nThey do not need any kerning, instead they use high-domain tilings (eg, wallpaper-group)\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 u\n){u/=iResolution.y\n ;u*=4.\n ;u=fract(u)\n ;u=abs(u-.5)\n ;//if(u.x>1.&&u.y>1.)u=u-1.\n ;u-=.25\n ;//above is one specific wallpaper tiling;\n  \n  ;//below is 2 patterns\n//;if(   (u.y)<   (u.x))u.y=(u.y)//cross L ;\n  ;if(abs(u.y)<   (u.x))u.x=abs(u.y)//cross T\n//;if(   (u.y)<abs(u.x))u=abs(vec2(-u.y,u.x))//cross T\n//;if(   (u.y)<   (u.x))u=vec2(-u.y,u.x)//cross L ;\n \n  //meaning of [u] now changes to [pattern brigntness]\n   ;u=vec2(smoothstep(.1,-.1,    (u))) \n //;u=vec2(smoothstep(.1,-.1,abs(u)))\n //and then we have 1 monochrome images to mix //;u.x=mix(u.x,u.y,.7)\n  \n  #if 0\n   #if 0\n   ;u.y-=u.x*.5\n   #endif\n  ;u.x=min(u.x,u.y)+.5\n  #else\n  ;u.x*=.5\n  ;//u.y*=.5\n  ;u.y-=u.x*.5\n  ;u.x=max(u.x,1.-u.y)*.5\n  #endif\n /**/\n      \n ;u.y=u.x\n ;fragColor = vec4(u,0,1);}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}