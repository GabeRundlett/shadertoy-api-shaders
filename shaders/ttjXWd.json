{
    "Shader": {
        "info": {
            "date": "1572801108",
            "description": "Cranberries are difficult to render...",
            "flags": 0,
            "hasliked": 0,
            "id": "ttjXWd",
            "likes": 7,
            "name": "Cranberry",
            "published": 3,
            "tags": [
                "subsurface",
                "organic",
                "translucent",
                "food",
                "beerlambert",
                "cranberry",
                "hungry"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 561
        },
        "renderpass": [
            {
                "code": "const vec3 C = vec3(0.0,-0.3,0.3);\nfloat R = 0.4;\n\nfloat map(vec3 p, float r)\n{\n    return length(p-C)-r;\n}\n\nfloat Fresnel(float n1, float n2, vec3 normal, vec3 incident, float ref)\n{\n    // Schlick aproximation\n    float r0 = (n1-n2) / (n1+n2);\n    r0 *= r0;\n    float cosX = -dot(normal, incident);\n    if (n1 > n2)\n    {\n        float n = n1/n2;\n        float sinT2 = n*n*(1.0-cosX*cosX);\n        // Total internal reflection\n        if (sinT2 > 1.0)\n            return 1.0;\n        cosX = sqrt(1.0-sinT2);\n    }\n    float x = 1.0-cosX;\n    float ret = r0+(1.0-r0)*x*x*x*x*x;\n\n    // adjust reflect multiplier for object reflectivity\n    ret = (ref + (1.0-ref) * ret);\n    return ret;\n}\n\nvec3 beer(vec3 o, vec3 incident, vec3 ab, float r, float d)\n{\n    vec3 o2c=C-o;\n    float cv=dot(C-o,incident);\n    float cp=dot(C-o,C-o);\n    float h=cp-cv*cv;\n\n    float hdp=sqrt(r*r-min(h,r*r));\n\n    float dp=max(hdp*2.0,0.3)*d;\n    return exp(-ab*dp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=vec4(0.0);\n    \n    float a=iResolution.x/iResolution.y;\n    vec2 uv=fragCoord/iResolution.xy*2.0-1.0;\n    uv.x*=a;\n    \n    const vec3 op = vec3(0.0,-0.1,-0.3);\n    vec3 f=vec3(0.0,0.0,1.0);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 r=vec3(1.0,0.0,0.0);\n    \n    vec3 of=op;\n    vec3 v=normalize(f+r*uv.x+u*uv.y);\n\n    fragColor = pow(texture(iChannel0,v), vec4(2.2));\n    fragColor.a = 0.0;\n    \n    vec3 lp=vec3(-0.1,0.1,-0.3);\n    \n    float d=0.0;\n    for(int i=0;i<128;i++)\n    {\n        vec3 p=of+v*d;\n        \n        float m;\n        {\n            vec3 np=p;\n            np.y/=max(abs(np.x),0.7);\n\n            vec3 n=normalize(np);\n            vec3 c=texture(iChannel1,vec2(atan(n.z,n.x),acos(n.y)+0.1)*0.015).rgb;\n            float r = R - c.r*0.075;\n\n            m=map(np,r);\n            if(m<0.01)\n            {\n                n=normalize(vec3(m-map(np-vec3(0.01,0.0,0.0),r),\n                                 m-map(np-vec3(0.0,0.01,0.0),r),\n                                 m-map(np-vec3(0.0,0.0,0.01),r)));\n                n+=texture(iChannel1,vec2(atan(n.z,n.x),acos(n.y))*0.5).rgb*0.4-0.2;\n                n=normalize(n);\n\n                float ref=Fresnel(1.0,3.2,n,v,0.1);\n                vec4 rc=pow(textureLod(iChannel0,n,3.0),vec4(2.2))*0.05;\n                const vec3 lc=vec3(1.0);\n\n                vec3 ld=normalize(lp-np);\n                float ndotl=max(dot(n,ld),0.0)+max(dot(n,normalize(vec3(-ld.x,0.0,ld.z))*0.7),0.0);\n\n                // Spec\n                vec3 h=normalize(ld-v);\n                float s=max(dot(h,n),0.0);\n                s=pow(s,70.0)*4.0;\n\n                // Diff\n\n                float att=min(1.0/dot(lp-np,lp-np),1.0);\n                vec3 dif=beer(lp,ld,vec3(4.5,40.0,10.5), R*1.1, 1.3);\n\n                vec3 ldif=mix(vec3(1.0)*dif,rc.rgb+s,ref)*att;\n                float rim=pow(max(1.0-dot(-v,n),0.0),10.0)*0.1;\n                vec3 fc=ldif+rim;\n\n                fragColor=vec4(fc,1.0);\n                break;\n            }\n        }\n        \n        float fm=p.y+0.35;\n        if(fm<0.001)\n        {\n            float gridX=1.0-pow(abs(mod(p.x,0.5)-0.25)/0.25,50.0);\n            float gridZ=1.0-pow(abs(mod(p.z,0.5)-0.25)/0.25,50.0);\n            \n            vec3 n=vec3(0.0,1.0,0.0);\n            vec3 ld=normalize(lp-p);\n            float ndotl=max(dot(ld,n),0.2);\n            float s=max(dot(normalize(ld-v),n),0.0);\n            s=pow(s,500.0);             \n            \n            float ao=pow(smoothstep(0.0,0.5,distance(p,C)),10.0);\n            fragColor=vec4(gridX*gridZ*ndotl+s)*min(1.0/dot(lp-p,lp-p),0.5);\n            fragColor*=ao;\n            break;\n        }\n        \n        float wm=2.0-p.z;\n        if(wm<0.0001)\n        {\n            float gridX=1.0-pow(abs(mod(p.x,0.5)-0.25)/0.25,50.0);\n            float gridZ=1.0-pow(abs(mod(p.z,0.5)-0.25)/0.25,50.0);\n            \n            vec3 n=vec3(0.0,0.0,-1.0);\n            vec3 ld=normalize(lp-p);\n            float ndotl=max(dot(ld,n),0.2);           \n            \n            fragColor=vec4(ndotl*(1.0/dot(lp-p,lp-p)));\n            break;\n        }\n        \n        d+=min(min(m,fm),wm);\n    }\n    \n    fragColor=pow(fragColor,vec4(1.0/2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}