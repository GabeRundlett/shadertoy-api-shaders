{
    "Shader": {
        "info": {
            "date": "1619708605",
            "description": "BuffA pauses the video to avoid the shower door effect.\nOk, very far from\nreference: Murat Yıldırım work  ( see image at forum bottom ).\n[url]https://www.designboom.com/art/murat-yildirim-furry-artworks-09-19-2020/[/url]\n",
            "flags": 32,
            "hasliked": 0,
            "id": "NsSSzW",
            "likes": 17,
            "name": "hairy Britney",
            "published": 3,
            "tags": [
                "worley",
                "short",
                "lic",
                "hairy"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 583
        },
        "renderpass": [
            {
                "code": "#define S(v)    smoothstep(30./R.y,0.,v )\n#define hash(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\nfloat h; // pos along line\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    h = clamp(dot(p, b) / dot(b, b), 0., 1.);           // proj coord on line\n    return length(p - b * h);                           // dist to segment\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, I,I0,H,\n         P = ( 2.*u - R ) / R.y,\n         U = 20.*u/R.y,\n      // F = vec2(P.y,-P.x);                            // field direction of hairs\n         F = vec2(1,1);\n  //F = normalize(mix(F,vec2(1),.5+.5*sin(2.*iTime))) ; \n    float l = 1e5, d;\n    O = vec4(0);\n    \n    for( int k=0; k<9; k++ ) {                          // check neighbor cells\n        I = vec2(k%3-1,k/3-1);\n        for (float n=0.; n<17.; n++) {                  // N hair per cell\n            H =  hash(floor(U)+I+n/1.71);               // random position in cell\n            P = I + H + .05*cos(5.*iTime+n+vec2(0,11)); // relative to current cell, + motion\n         // d = length(fract(U)-P);                     // ( used only to draw debug points )\n         // if ( d < l ) l = d, I0=I; // P0 = P;        // ( used only to draw debug points )\n            O = max( O,  \n                     S( line(fract(U),I+.5,P-F))        // blend hair strends\n                  // S( line(fract(U),I+H,P-F))         // variant without strends\n                     * texture(iChannel0, (floor(U)+I+.5*H) *R.y/20./R ) *h ); // hair color\n        }\n    }\n                                                        // debug:\n//O = vec4( S(l-.1) );                                  //  show points\n//O = S(l-.1) *vec4(mod(floor(U)+I0,2.),.5,1) ;         //  color points(tile)\n//O = mix( vec4(mod(floor(U),2.),0,1), O, O.a );        //  show tiles\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// select a frame in the video\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.xy;\n    O = iChannelTime[1] < .9\n          ? texture(iChannel1, U ) \n          : texture(iChannel0, U );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}