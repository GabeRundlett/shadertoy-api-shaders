{
    "Shader": {
        "info": {
            "date": "1720726256",
            "description": "experimenting with presentations of cellular noise, most code here comes directly from the book of shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "Mfsczn",
            "likes": 5,
            "name": "cellnoise exp 2",
            "published": 3,
            "tags": [
                "experiment",
                "learning",
                "cellularnoise"
            ],
            "usePreview": 0,
            "username": "tetrismegistus",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "vec2 random2( vec2 p ) { \n return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float hexagon = sdHexagon(st, .5);\n       \n    // Scale\n    st *= 50.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 1.;  // minimum distance\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(i_st + neighbor);\n\n\t\t\t// Animate the point\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            m_dist = min(m_dist, dist);\n        }\n    }\n\n    vec3 blue = vec3(0.455,0.537,0.753);\n    vec3 orange = vec3(0.961,0.318,0.035);\n    vec3 offWhite = vec3(0.941,0.918,0.776);\n    \n    vec3 verGrad = mix(orange, blue, st.y);\n    vec3 horGrad = mix(offWhite, blue, st.x);\n    vec3 mixGrad = mix(verGrad, horGrad, sin(iTime));    \n  \n    \n    vec3 color = mixGrad - m_dist;\n    \n \n    fragColor = vec4(color * hexagon,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}