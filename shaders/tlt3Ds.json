{
    "Shader": {
        "info": {
            "date": "1578027249",
            "description": "simplex noise and a 3 point bezier curve came out a bit playstationish",
            "flags": 0,
            "hasliked": 0,
            "id": "tlt3Ds",
            "likes": 8,
            "name": "Noise Fun #2",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "bezier",
                "simplex"
            ],
            "usePreview": 0,
            "username": "ndxbxrme",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "\nvec2 bezier(in vec2 p1, in vec2 p2, in vec2 p3, in float t)\n{\n    float oneminust = 1. - t;\n    return oneminust * oneminust * p1 + 2. * oneminust * t * p2 + t * t * p3;\n}\n\nfloat wobbler(in vec2 uv, in float offset)\n{\n    float n = snoise(uv.xyx + iTime * offset);\n\tvec2 p1 = vec2(0.0, .5 + .2 * sin(iTime) + n * .2);\n    vec2 p2 = vec2(0.5, 0.5 + n * .1);\n    vec2 p3 = vec2(1.0, .5 + .2 * cos(iTime) + n * .2);\n    vec2 p = bezier(p1, p2, p3, uv.x);\n    float y = p.y + n * .1;\n    return pow(smoothstep(p.y + .34, p.y + .3, uv.y) * smoothstep(y, y + .04, uv.y), 5.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y += .2;\n    float f = wobbler(uv, .1) * .3;\n    f += wobbler(uv, .2) * .3;\n    f += wobbler(uv, .11) * .3;\n    vec3 col = vec3(0.2, 0.5, 0.7) * vec3(f) * 1.5 + .2 - length(uv - vec2(.5, .8)) * .1;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//simplex noise from https://thebookofshaders.com/edit.php#11/iching-03.frag\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}