{
    "Shader": {
        "info": {
            "date": "1722610040",
            "description": "implementing mandelbrot. ",
            "flags": 0,
            "hasliked": 0,
            "id": "McByRK",
            "likes": 1,
            "name": "mandelbrot-zoom",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "fractals",
                "maths"
            ],
            "usePreview": 0,
            "username": "arjunsdev",
            "viewed": 69
        },
        "renderpass": [
            {
                "code": "#define GRAY vec3(.5)\n#define BLACK vec3(.0)\n#define RED vec3(1.,.3,.3)\n#define BLUE vec3(.3,.3,1.)\n#define GREEN vec3(.3,1.,.3)\n#define WHITE vec3(1.,1.,1.)\n#define PI 3.14159\n\nfloat xMin = -2.0;\nfloat xMax = 1.0;\nfloat yMin = -1.0;\nfloat yMax = 1.0;\nfloat frq = 10.0;\nfloat amp = 28000.0;\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nfloat map(float n, float start1, float stop1, float start2,float stop2){\n    float newVal = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n    return newVal;\n}\nfloat mapExponential(float value, float inputMin, float inputMax, float outputMin, float outputMax) {\n    float normalizedValue = (value - inputMin) / (inputMax - inputMin);\n    float exponentialValue = pow(normalizedValue, 4.0);\n    float mappedValue = mix(outputMin, outputMax, exponentialValue);\n\n    return mappedValue;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 m = iMouse / iResolution.x;\n    vec2 center = vec2(0.781515,0.46569);\n\tvec2 uv = fragCoord/iResolution.xy;\n    float sSin = mapExponential(mod(iTime,frq),0.0,frq,1.0,amp);\n\tuv = center + (uv-center)/sSin;\n    \n    float x0 = map(uv.x,0.0,1.0,xMin,xMax);\n    float y0 = map(uv.y,0.0,1.0,yMin,yMax);\n    float x = 0.0;\n    float y = 0.0;\n    float x2 = 0.0;\n    float y2 = 0.0;\n    int iteration = 0; \n    int max_iterations = int(map(sSin,0.0,amp+50.0,150.0,2000.0));\n    while(x2+y2<=4.0&&iteration<max_iterations){\n        y = (x+x)*y+y0;\n        x=x2-y2+x0;\n        x2=x*x;\n        y2=y*y;\n        iteration++;\n    }\n    float ratio = float(iteration)/float(max_iterations);\n    float v = pow((pow(ratio,360.0)*255.0),1.5);\n    vec3 hsl = vec3(mod(pow(ratio,0.5), 1.0),0.5,ratio);\n    if(iteration==max_iterations||iteration==0){\n        fragColor = vec4(WHITE,1.0);\n    }else{\n        fragColor = vec4(hsl2rgb(hsl*1.2),1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}