{
    "Shader": {
        "info": {
            "date": "1676476621",
            "description": "a crab on a beach",
            "flags": 96,
            "hasliked": 0,
            "id": "fsG3Ry",
            "likes": 9,
            "name": "BC - Beach",
            "published": 3,
            "tags": [
                "sketch",
                "beach",
                "buffers",
                "crab"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 nuv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = texture(iChannel2, uv).rgb;\n    vec4 wave = texture(iChannel0, uv);\n    vec4 wetness = texture(iChannel1, uv);\n    if(wetness.a > 0.0) col -= 0.5;\n    else col -= (wetness.r + wetness.b) * 0.5;\n    \n    col = mix(col, wave.rgb, wave.a);\n    \n    vec4 crabValue = getCrabValue(nuv, iTime+CRAB_OFFSET, 3./iResolution.y);\n    \n    col = mix(col, crabValue.rgb, crabValue.a);\n    fragColor = vec4(col.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 32378,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/relaxing-white-noise/ocean-sounds-for-sleep-75-minutes"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 wave = getWaterLine(uv, iTime);\n    \n    float localBrim = getBrim(wave.y) + .01;\n    float wv = S(0., .05, wave.x - uv.y);\n    float b = S(0., 10./iResolution.y, (wave.x + localBrim) - uv.y);\n    vec3 foam = vec3(1);\n    vec2 waveCoord = vec2(uv.x, uv.y - wave.x);\n\n    foam -= pow(texture(iChannel0, uv + waveCoord - vec2(0, iTime*0.1)).r,.1) * .1;\n    \n    vec3 col = mix(foam, vec3(0.349,0.624,1.000), wv);    \n        \n    col -= length(waveCoord.y * 100.0) * 0.005;\n        \n    float w = 10.0;\n    float t = cos(iTime/20.0) * 3.0;\n    if(wave.x > uv.y)\n    {\n        float waveShading = length(cos(waveCoord.y * w + t)) * cos((waveCoord.x + waveCoord.y - t) * w);\n        col -= waveShading * 0.01;\n    }   \n        \n    \n    col = clamp(col, 0., 1.);\n\n    fragColor = vec4(col,max(wv,b));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define S(A,B,U) smoothstep(A,B,U)\n#define CRAB_OFFSET cos(iTime/10.0 + sin(-iTime*0.5+cos(iTime/2.-10.234)))*3.\n\nfloat rand (vec2 p)\n{\n    return fract(sin(dot(p.xy,vec2(2189.1283,8941.1283)))*(1828.1233));\n}\n\nfloat getBrim(float wave)\n{\n    float brim = 0.01;\n    float whiteLerp = (wave + 1.0)  * 0.5;\n    whiteLerp = pow(whiteLerp, 2.0);\n    return brim + (5.*brim * whiteLerp + brim/2.);\n}\n\nvec2 getWaterLine(vec2 uv, float time)\n{\n    float s = sin(uv.x * 5. + (sin(time / 10.0)*5.0)) * .05 + cos(time/2.0)*0.25;\n    float o = cos(time);\n    float scale = (0.5  * cos(time + sin(uv.x + cos(time + uv.x * 0.2))) + 1.0)/2.0;\n    \n    s*=scale;\n    s+=o*.3;\n    return vec2(s,o);\n}\n\nvec2 getCrabPosition(vec2 uv, float time)\n{\n    float crabX = mod((time-1.5)/10., 6.25) - 2.5;\n    return vec2(crabX-0.8, 1.3 + cos(time / 6.) * 0.05);\n}\n\n// thanks iq https://www.shadertoy.com/view/MlKcDD\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat sdBezier( vec2 p, vec2 v0, vec2 v1, vec2 v2 )\n{\n\tvec2 i = v0 - v2;\n    vec2 j = v2 - v1;\n    vec2 k = v1 - v0;\n    vec2 w = j-k;\n\n\tv0-= p; v1-= p; v2-= p;\n    \n\tfloat x = cro(v0, v2);\n    float y = cro(v1, v0);\n    float z = cro(v2, v1);\n\n\tvec2 s = 2.0*(y*j+z*k)-x*i;\n\n    float r =  (y*z-x*x*0.25)/dot2(s);\n    float t = clamp( (0.5*x+y+r*dot(s,w))/(x+y+z),0.0,1.0);\n    \n\treturn length( v0+t*(k+k+t*w) );\n}\nfloat o = 0.01;\nvec2 foff = vec2(0,-0.0075);\nvec2 footPos1(float dir, float t, float i){return vec2(0.045*dir,o+i*0.015)-foff;}\nvec2 footPos2(vec2 p1, float dir, float t, float i){return p1 + vec2(dir*0.025+cos(t)*o,3.*o+i*o)+foff;}\nvec2 footPos3(vec2 p1, float dir, float t, float i){return p1 + vec2(dir*0.05+pow(cos(t),2.)*o,o+i*o)+foff;}\nvoid drawLeg(vec2 uv, vec2 crabPos, float dir, float i, float t, inout float legs)\n{\n        vec2 p = uv - crabPos + vec2(0.00,0.02);\n        float m = (i < 3.) ? 1. : -1.;\n        vec2 p1 = footPos1(dir, t, i);\n        vec2 p2 = footPos2(p1, dir, t, i);\n        vec2 p3 = footPos3(p1, dir, t, i);\n        float d = sdBezier(p, p1, p2, p3);\n        legs = min(legs, d*10.);\n}\nfloat fs = 0.005;\nfloat thresh = .98;\nvoid drawFoot(vec2 p, float dir, float i, float t, inout float foot)\n{\n    float m = (i < 3.) ? 1. : -1.;\n    vec2 p1 = footPos1(dir,t,i);\n    vec2 p3 = footPos3(p1, dir, t, i);\n    float v = length(p-p3)-fs;\n    float anim = pow(cos(t),2.);\n\n    if(anim > thresh) foot = min(foot, v);\n}\n\nvec4 getCrabValue(vec2 uv, float time, float px)\n{   \n    uv*=1.5;\n    vec2 crabPos = getCrabPosition(uv, time)-vec2(0,0.03);\n    vec2 localPosition = (uv-crabPos);\n    localPosition = localPosition/vec2(1,.5 + abs(sin(localPosition.x*10.)) * sign(localPosition.y)*.5) + vec2(0,-.03);\n    float c = length(localPosition) - .02;\n    float cull = length(uv - crabPos) - .1;\n    cull = S(0., px, cull);\n    if(cull>0.)c=1.;\n    \n    time *= 10.0;\n    float t = time/2.;\n    float legs = 1.;\n    for(float i=0.;i<3.;i+=1.){\n        t -= .5;\n        drawLeg(uv, crabPos, -1., i, t, legs);\n    }\n    t = time/2.;\n    for(float i=0.;i<3.;i+=1.){\n        t -= 1.;\n        drawLeg(uv, crabPos, 1., i, t, legs);\n    }\n    float sl = smoothstep(px*10.5, 0., legs-0.05);\n    float sc = smoothstep(px*1.5,0.0,c/1.1-0.05);\n    vec3 color = mix(vec3(.8,0,0)*(1.0-pow(legs*10.,2.)), vec3(1,0,0)*(1.0-pow(c*10.,2.)), sc);\n    return vec4(color, max(sc, sl));\n}\nfloat crabFoot(vec2 uv, vec2 o, float s)\n{\n    return length(uv + o) - s;\n}\nfloat getCrabFeetValue(vec2 nuv, float time, float px)\n{\n\n    nuv*=1.5;\n    vec2 crabPos = getCrabPosition(nuv, time)-vec2(0,0.03);\n    time *= 10.0;\n    float t = time/2.;\n    float c= 1.0;\n    \n    vec2 p = nuv - crabPos + vec2(0.0,0.02);\n    for(float i=0.;i<3.;i+=1.){\n        t -= .5;\n        drawFoot(p, -1., i, t, c);\n    }\n    t = time/2.;\n    for(float i=0.;i<3.;i+=1.){\n        t -= 1.;\n        drawFoot(p, 1., i, t, c);\n    }     \n    return c;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 nuv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec4 water = texture(iChannel0, uv);\n    vec4 selfSample = texture(iChannel1, uv);\n    float a = selfSample.a - 0.05;\n    vec2 wl = getWaterLine(nuv, iTime);\n\n    float localBrim = getBrim(wl.y);\n    \n    if(wl.x > nuv.y) selfSample.r = 1.0;\n    if(wl.x + localBrim > nuv.y)\n    {\n        float l = S(1.,0.,(nuv.y - wl.x) / localBrim);\n        selfSample.r = max(selfSample.r,l);\n    }\n    vec3 col = vec3(0);\n    float w = length(water.rgb);\n    col.r = clamp(selfSample.r * 0.996, 0.,1.);\n    col.b = selfSample.b * 0.9998;\n    col.g=0.;\n    float crabFeet = getCrabFeetValue(nuv, iTime+CRAB_OFFSET,3./iResolution.y);\n    if(crabFeet < 0.0) col.b = 0.2;\n    \n    fragColor = vec4(col,a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.949,0.824,.663);\n    float sand = texture(iChannel0, uv * 5.).r;\n    float dunes = cos((uv.y + sin(uv.x * 10.0) * 0.015 * cos(uv.x/.1)) * 100.0);\n    \n    float size = 100.;\n    vec2 aspect = vec2(iResolution.x/iResolution.y,1);\n    vec2 cell = fract(uv * aspect * size);\n    vec2 id = floor(uv * aspect * size)/size;\n    float shells = rand(id*3.14);\n    \n    col -= dunes * 0.01;\n    col -= sand * 0.1;\n    \n    float thresh = .05;\n    if(shells <= thresh)\n    {\n        size = rand(id);\n        vec3 stoneColor = texture(iChannel1, cell).rgb;\n        col += (S(3./iResolution.y,0.,length(cell-.5)-0.3*pow(size,3.))*.3*rand(id*100.))*stoneColor;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}