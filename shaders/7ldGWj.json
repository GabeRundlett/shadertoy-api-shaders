{
    "Shader": {
        "info": {
            "date": "1636757217",
            "description": "A shader done in Material Maker",
            "flags": 32,
            "hasliked": 0,
            "id": "7ldGWj",
            "likes": 27,
            "name": "Red Shinny Spike Torus",
            "published": 3,
            "tags": [
                "materialmaker",
                "generatedshader"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 756
        },
        "renderpass": [
            {
                "code": "// Red Shinny Spike Torus\n//\n// By https://twitter.com/paulofalcao\n//\n// Generated in Material Maker\n//\n// This uses the MFSDF scene description technique\n// https://www.shadertoy.com/view/7dySRc\n//\n// To generate your own shaders you need:\n//\n// - Material Maker - https://rodzilla.itch.io/material-maker\n// - My Ray Marching library - https://github.com/paulofalcao/MaterialMakerRayMarching\n// \n// Here is a 2 hour video explaining how to use it - https://youtu.be/PvmIohbf93Q\n// \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 color = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor = vec4(pow(color.xyz/color.w,vec3(1.0/2.2)), 1.0f);\n     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* Generated by Material Maker */\n\n#define SEED_VARIATION 0.0\n\n//---\n\nfloat rand(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t      dot(x, vec2(3.4562, 17.398))), vec2(3.14))) * 43758.5453);\n}\n\nvec3 rand3(vec2 x) {\n    return fract(cos(mod(vec3(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t\t  dot(x, vec2(3.4562, 17.398)),\n                              dot(x, vec2(13.254, 5.867))), vec3(3.14))) * 43758.5453);\n}\n\nvec3 rgb2hsv(vec3 c) {\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat param_rnd(float minimum, float maximum, float seed) {\n\treturn minimum+(maximum-minimum)*rand(vec2(seed));\n}\nvec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\nfloat wave3d_constant(float x) {\n\treturn 1.0;\n}\n\nfloat wave3d_sine(float x) {\n\treturn 0.5-0.5*cos(3.14159265359*2.0*x);\n}\n\nfloat wave3d_triangle(float x) {\n\tx = fract(x);\n\treturn min(2.0*x, 2.0-2.0*x);\n}\n\nfloat wave3d_sawtooth(float x) {\n\treturn fract(x);\n}\n\nfloat wave3d_square(float x) {\n\treturn (fract(x) < 0.5) ? 0.0 : 1.0;\n}\n\nfloat wave3d_bounce(float x) {\n\tx = 2.0*(fract(x)-0.5);\n\treturn sqrt(1.0-x*x);\n}\n\nfloat mix3d_mul(float x, float y, float z) {\n\treturn x*y*z;\n}\n\nfloat mix3d_add(float x, float y, float z) {\n\treturn min(x+y+z, 1.0);\n}\n\nfloat mix3d_max(float x, float y, float z) {\n\treturn max(max(x, y), z);\n}\n\nfloat mix3d_min(float x, float y, float z) {\n\treturn min(min(x, y), z);\n}\n\nfloat mix3d_xor(float x, float y, float z) {\n\tfloat xy = min(x+y, 2.0-x-y);\n\treturn min(xy+z, 2.0-xy-z);\n}\n\nfloat mix3d_pow(float x, float y, float z) {\n\treturn pow(pow(x, y), z);\n}float mfsdf3d_smooth_union_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )/k;\n\treturn min(a,b)-h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_union(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n    float h=mfsdf3d_smooth_union_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_union_f(a.w+e,b.w,k)-mfsdf3d_smooth_union_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_union_f(a.w,b.w+e,k)-mfsdf3d_smooth_union_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_subtraction_f(float a,float b,float k){\n\tfloat h = max( k-abs(-a-b), 0.0 )/k;\n\treturn max(-a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_subtraction(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_subtraction_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_subtraction_f(a.w+e,b.w,k)-mfsdf3d_smooth_subtraction_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_subtraction_f(a.w,b.w+e,k)-mfsdf3d_smooth_subtraction_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_intersection_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )/k;\n\treturn max(a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_intersection(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_intersection_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_intersection_f(a.w+e,b.w,k)-mfsdf3d_smooth_intersection_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_intersection_f(a.w,b.w+e,k)-mfsdf3d_smooth_intersection_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))/(3.14159265359/2.0)),h);\n}vec4 MFSDF_Union(vec4 in1,vec4 in2,vec4 in3,vec4 in4,vec4 in5,vec4 in6,vec4 in7,vec4 in8){\n    vec4 t=(in1.w<in2.w)?vec4(in1):vec4(in2);\n    t=(t.w<in2.w)?vec4(t):vec4(in2);\n    t=(t.w<in3.w)?vec4(t):vec4(in3);\n    t=(t.w<in4.w)?vec4(t):vec4(in4);\n    t=(t.w<in5.w)?vec4(t):vec4(in5);\n    t=(t.w<in6.w)?vec4(t):vec4(in6);\n    t=(t.w<in7.w)?vec4(t):vec4(in7);\n    t=(t.w<in8.w)?vec4(t):vec4(in8);\n    return t;\n}\n\n\n//MATH\nconst float PI=3.14159265359;\nconst float TAU=6.28318530718;\n\nvec2 rndint_hash23(vec3 p3){\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvoid Onb(in vec3 N, inout vec3 T, inout vec3 B){\n    vec3 UpVector=abs(N.z)<0.999?vec3(0,0,1):vec3(1,0,0);\n    T=normalize(cross(UpVector,N));\n    B=cross(N,T);\n}\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n// RANDOM START\n//from https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nuint rand_pcg(inout uint seed){\n    uint state = seed;\n    seed = seed * uint(747796405) + uint(2891336453);\n    uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n    return (word >> uint(22)) ^ word;\n}\n\nfloat RandomFloat01(inout uint state){\n    uint r=rand_pcg(state);\n    r &= uint(0x007FFFFF);\n    r |= uint(0x3F800000);\n    return uintBitsToFloat(r) - 1.0f;\n}\n\n// RANDOM END\n\n// SAMPLING START\n\nvec3 constSampleSphere(float r1,float r2){\n    float z=1.0-2.0*r1;\n    float r=sqrt(max(0.0,1.0-z*z));\n    float phi=TAU*r2;\n    return vec3(r*cos(phi),r*sin(phi),z);\n}\n\nvec3 cosineSampleHemissphere(inout uint state,vec3 n){\n    float u1=RandomFloat01(state);\n    float u2=RandomFloat01(state);\n    return normalize(n+constSampleSphere(u1,u2)); \n}\n\n// Adapted from \"Sampling the GGX Distribution of Visible Normals\",\n// http://jcgt.org/published/0007/04/01/\nvec3 SampleGGXVNDF(inout uint state,vec3 Ve,float alpha_x,float alpha_y){\n    float U1=RandomFloat01(state);\n    float U2=RandomFloat01(state);\n    \n    //transforming the view direction to the hemisphere configuration\n    vec3 Vh = normalize(vec3(alpha_x * Ve.x, alpha_y * Ve.y, Ve.z));\n\n    //orthonormal basis\n    vec3 T1;vec3 T2;\n    Onb(Vh,T1,T2);\n\n    //parameterization of the projected area\n    float r = sqrt(U1); \n    float phi = 2.0 * PI * U2;    \n    float t1 = r * cos(phi);\n    float t2 = r * sin(phi);\n    float s = 0.5 * (1.0 + Vh.z);\n    t2 = (1.0 - s)*sqrt(1.0 - t1*t1) + s*t2;\n\n    //reprojection onto hemisphere\n    vec3 Nh = t1*T1 + t2*T2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2))*Vh;\n\n    //transforming the normal back to the ellipsoid configuration\n    vec3 Ne = normalize(vec3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.0f, Nh.z))); \n\n    return Ne;\n}\n\nfloat schlickWeight(float cosTheta) {\n    float m=clamp(1.-cosTheta,0.,1.);\n    float m2=m*m;\n    return m2*m2*m;\n}\n\n// SAMPLING END\n\nconst float p_o90873_CamX = -2.276000023;\nconst float p_o90873_CamY = -1.105000019;\nconst float p_o90873_CamZ = 1.014999986;\nconst float p_o90873_LookAtX = 0.000000000;\nconst float p_o90873_LookAtY = -0.528999984;\nconst float p_o90873_LookAtZ = 0.000000000;\nconst float p_o90873_CamD = 1.500000000;\nconst float p_o90873_CamZoom = 1.000000000;\nconst float p_o90873_MaxDistance = 200.000000000;\nconst float p_o85587_BaseColor_r = 1.000000000;\nconst float p_o85587_BaseColor_g = 1.000000000;\nconst float p_o85587_BaseColor_b = 1.000000000;\nconst float p_o85587_BaseColor_a = 1.000000000;\nconst float p_o85587_Metallic = 0.000000000;\nconst float p_o85587_Specular = 0.500000000;\nconst float p_o85587_Roughness = 0.000000000;\nconst float p_o85587_Emission = 5.000000000;\nconst float p_o85587_Normal = 0.000000000;\nconst float p_o85587_Alpha = 0.000000000;\nconst float p_o85587_AmbientOcclusion = 0.000000000;\nconst float p_o85587_scale = 1.702000000;\nconst float p_o85587_TranlateX = -2.286000000;\nconst float p_o85587_TranlateY = 0.647000000;\nconst float p_o85587_TranlateZ = 0.840000000;\nconst float p_o85587_RotateX = 0.000000000;\nconst float p_o85587_RotateY = 0.000000000;\nconst float p_o85587_RotateZ = 0.000000000;\nvec3 o85587_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0);\n}\nfloat o85587_input_Metallic_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85587_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85587_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nvec3 o85587_input_Emission_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0,1.0,1.0);\n}\nvec3 o85587_input_Normal_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(0.0,1.0,0.0);\n}\nfloat o85587_input_Alpha_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85587_input_AmbientOcclusion_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85587_input_sdf3d(vec3 p, float _seed_variation_) {\n\nreturn length((p))-0.4 ;\n}\n// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_o85587(vec4 uv, float _seed_variation_) {\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3(p_o85587_TranlateX,p_o85587_TranlateY,p_o85587_TranlateZ),vec3(p_o85587_RotateX,p_o85587_RotateY,p_o85587_RotateZ)*6.28318530718)/p_o85587_scale;\n\tfloat sdf=o85587_input_sdf3d(uv.xyz, _seed_variation_)*p_o85587_scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4(p_o85587_AmbientOcclusion*o85587_input_AmbientOcclusion_tex3d(vec4(uv.xyz,19.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4(p_o85587_Alpha*o85587_input_Alpha_tex3d(vec4(uv.xyz,15.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4(p_o85587_Normal*o85587_input_Normal_tex3d(vec4(uv.xyz,14.0), _seed_variation_),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4(p_o85587_Emission*o85587_input_Emission_tex3d(vec4(uv.xyz,13.0), _seed_variation_),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o85587_Roughness*o85587_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o85587_Specular*o85587_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4(p_o85587_Metallic*o85587_input_Metallic_tex3d(vec4(uv.xyz,2.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o85587_BaseColor_r, p_o85587_BaseColor_g, p_o85587_BaseColor_b, p_o85587_BaseColor_a).rgb*o85587_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}const float p_o85591_BaseColor_r = 1.000000000;\nconst float p_o85591_BaseColor_g = 1.000000000;\nconst float p_o85591_BaseColor_b = 1.000000000;\nconst float p_o85591_BaseColor_a = 1.000000000;\nconst float p_o85591_Metallic = 0.000000000;\nconst float p_o85591_Specular = 0.000000000;\nconst float p_o85591_Roughness = 0.000000000;\nconst float p_o85591_Emission = 5.000000000;\nconst float p_o85591_Normal = 0.000000000;\nconst float p_o85591_Alpha = 0.000000000;\nconst float p_o85591_AmbientOcclusion = 0.000000000;\nconst float p_o85591_scale = 1.000000000;\nconst float p_o85591_TranlateX = 5.780000000;\nconst float p_o85591_TranlateY = -0.148000000;\nconst float p_o85591_TranlateZ = -2.078000000;\nconst float p_o85591_RotateX = 0.218000000;\nconst float p_o85591_RotateY = -0.071000000;\nconst float p_o85591_RotateZ = 0.280000000;\nvec3 o85591_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0);\n}\nfloat o85591_input_Metallic_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85591_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85591_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nvec3 o85591_input_Emission_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0,1.0,1.0);\n}\nvec3 o85591_input_Normal_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(0.0,1.0,0.0);\n}\nfloat o85591_input_Alpha_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85591_input_AmbientOcclusion_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nconst float p_o85603_sx = 22.120000000;\nconst float p_o85603_sy = 0.280000000;\nconst float p_o85603_sz = 24.020000000;\nconst float p_o85603_r = 0.010000000;\nfloat o85591_input_sdf3d(vec3 p, float _seed_variation_) {\nvec3 o85603_0_q = abs((p)) - vec3(p_o85603_sx, p_o85603_sy, p_o85603_sz);\nfloat o85603_0_1_sdf3d = length(max(o85603_0_q,0.0))+min(max(o85603_0_q.x,max(o85603_0_q.y,o85603_0_q.z)),0.0)-p_o85603_r;\n\nreturn o85603_0_1_sdf3d;\n}\n// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_o85591(vec4 uv, float _seed_variation_) {\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3(p_o85591_TranlateX,p_o85591_TranlateY,p_o85591_TranlateZ),vec3(p_o85591_RotateX,p_o85591_RotateY,p_o85591_RotateZ)*6.28318530718)/p_o85591_scale;\n\tfloat sdf=o85591_input_sdf3d(uv.xyz, _seed_variation_)*p_o85591_scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4(p_o85591_AmbientOcclusion*o85591_input_AmbientOcclusion_tex3d(vec4(uv.xyz,19.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4(p_o85591_Alpha*o85591_input_Alpha_tex3d(vec4(uv.xyz,15.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4(p_o85591_Normal*o85591_input_Normal_tex3d(vec4(uv.xyz,14.0), _seed_variation_),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4(p_o85591_Emission*o85591_input_Emission_tex3d(vec4(uv.xyz,13.0), _seed_variation_),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o85591_Roughness*o85591_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o85591_Specular*o85591_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4(p_o85591_Metallic*o85591_input_Metallic_tex3d(vec4(uv.xyz,2.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o85591_BaseColor_r, p_o85591_BaseColor_g, p_o85591_BaseColor_b, p_o85591_BaseColor_a).rgb*o85591_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}const float p_o85619_k = 0.293000000;\nconst float p_o85595_BaseColor_r = 1.000000000;\nconst float p_o85595_BaseColor_g = 0.000000000;\nconst float p_o85595_BaseColor_b = 0.000000000;\nconst float p_o85595_BaseColor_a = 1.000000000;\nconst float p_o85595_Metallic = 0.225000000;\nconst float p_o85595_Specular = 0.878000000;\nconst float p_o85595_Roughness = 0.000000000;\nconst float p_o85595_Emission = 0.000000000;\nconst float p_o85595_Normal = 0.000000000;\nconst float p_o85595_Alpha = 0.000000000;\nconst float p_o85595_AmbientOcclusion = 0.000000000;\nconst float p_o85595_scale = 0.991000000;\nconst float p_o85595_TranlateX = 0.000000000;\nconst float p_o85595_TranlateY = -0.743000000;\nconst float p_o85595_TranlateZ = 0.000000000;\nconst float p_o85595_RotateX = -0.120000000;\nconst float p_o85595_RotateY = 0.059000000;\nconst float p_o85595_RotateZ = -0.079000000;\nvec3 o85595_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0);\n}\nfloat o85595_input_Metallic_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85595_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85595_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nvec3 o85595_input_Emission_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0,1.0,1.0);\n}\nvec3 o85595_input_Normal_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(0.0,1.0,0.0);\n}\nfloat o85595_input_Alpha_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85595_input_AmbientOcclusion_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nconst float p_o85610_Distort = 0.168000000;\nconst float p_o85610_Correction = 17.656000000;\nconst float p_o85610_Bound = 3.645000000;\nconst float p_o85609_R = 0.800000000;\nconst float p_o85609_r = 0.270000000;\nfloat o85610_input_sdf(vec3 p, float _seed_variation_) {\nvec2 o85609_0_q = vec2(length((p).xy)-p_o85609_R,(p).z);\nfloat o85609_0_1_sdf3d = length(o85609_0_q)-p_o85609_r;\n\nreturn o85609_0_1_sdf3d;\n}\nconst float p_o85615_x_scale = 4.000000000;\nconst float p_o85615_y_scale = 14.000000000;\nconst float p_o85615_z_scale = 15.000000000;\nfloat o85615_fct(vec3 uv, float _seed_variation_) {\n\treturn mix3d_mul(wave3d_sine(p_o85615_x_scale*uv.x), wave3d_sine(p_o85615_y_scale*uv.y), wave3d_sine(p_o85615_z_scale*uv.z));\n}vec3 o85610_input_tex3d(vec4 p, float _seed_variation_) {\nvec3 o85615_0_1_tex3d = vec3(o85615_fct((p).xyz, _seed_variation_));\n\nreturn o85615_0_1_tex3d;\n}\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_o85610(vec3 p, float _seed_variation_) {  \n  const vec3 e=vec3(0.01,-0.01,0.0);\n  float v1=o85610_input_sdf(p+e.xyy, _seed_variation_);\n  float v2=o85610_input_sdf(p+e.yyx, _seed_variation_);\n  float v3=o85610_input_sdf(p+e.yxy, _seed_variation_);\n  float v4=o85610_input_sdf(p+e.xxx, _seed_variation_);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\n//By pauloFalcao\nvec4 distortHeighByNormal_o85610(vec3 uv, float _seed_variation_) {\n    float d=o85610_input_sdf(uv, _seed_variation_);\n\tif (d<=abs(p_o85610_Distort*(p_o85610_Bound+1.0))+0.01){\n\t\tvec3 n=normal_o85610(uv, _seed_variation_);\n\t\tvec3 s=o85610_input_tex3d(vec4(uv-d*n,0.0), _seed_variation_);\n\t    return vec4(s,o85610_input_sdf(uv-n*s*p_o85610_Distort, _seed_variation_));\n\t} else {\n\t\treturn vec4(vec3(0.0),d);\n\t}\n\n}float o85595_input_sdf3d(vec3 p, float _seed_variation_) {\nvec4 o85610_0_d = distortHeighByNormal_o85610((p).xyz, _seed_variation_);\no85610_0_d.w = o85610_0_d.w/(1.0+p_o85610_Distort*p_o85610_Correction);float o85610_0_1_sdf3d = o85610_0_d.w;\n\nreturn o85610_0_1_sdf3d;\n}\n// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_o85595(vec4 uv, float _seed_variation_) {\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3(p_o85595_TranlateX,p_o85595_TranlateY,p_o85595_TranlateZ),vec3(p_o85595_RotateX,p_o85595_RotateY,p_o85595_RotateZ)*6.28318530718)/p_o85595_scale;\n\tfloat sdf=o85595_input_sdf3d(uv.xyz, _seed_variation_)*p_o85595_scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4(p_o85595_AmbientOcclusion*o85595_input_AmbientOcclusion_tex3d(vec4(uv.xyz,19.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4(p_o85595_Alpha*o85595_input_Alpha_tex3d(vec4(uv.xyz,15.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4(p_o85595_Normal*o85595_input_Normal_tex3d(vec4(uv.xyz,14.0), _seed_variation_),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4(p_o85595_Emission*o85595_input_Emission_tex3d(vec4(uv.xyz,13.0), _seed_variation_),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o85595_Roughness*o85595_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o85595_Specular*o85595_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4(p_o85595_Metallic*o85595_input_Metallic_tex3d(vec4(uv.xyz,2.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o85595_BaseColor_r, p_o85595_BaseColor_g, p_o85595_BaseColor_b, p_o85595_BaseColor_a).rgb*o85595_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}const float p_o85599_BaseColor_r = 1.000000000;\nconst float p_o85599_BaseColor_g = 1.000000000;\nconst float p_o85599_BaseColor_b = 1.000000000;\nconst float p_o85599_BaseColor_a = 1.000000000;\nconst float p_o85599_Metallic = 0.000000000;\nconst float p_o85599_Specular = 0.575000000;\nconst float p_o85599_Roughness = 0.000000000;\nconst float p_o85599_Emission = 0.000000000;\nconst float p_o85599_Normal = 0.000000000;\nconst float p_o85599_Alpha = 0.000000000;\nconst float p_o85599_AmbientOcclusion = 0.000000000;\nconst float p_o85599_scale = 1.547000000;\nconst float p_o85599_TranlateX = 0.019000000;\nconst float p_o85599_TranlateY = -1.701000000;\nconst float p_o85599_TranlateZ = -0.025000000;\nconst float p_o85599_RotateX = 0.000000000;\nconst float p_o85599_RotateY = 0.000000000;\nconst float p_o85599_RotateZ = 0.000000000;\nconst float p_o85605_x_scale = 2.000000000;\nconst float p_o85605_y_scale = 2.000000000;\nconst float p_o85605_z_scale = 2.000000000;\nfloat o85605_fct(vec3 uv, float _seed_variation_) {\n\treturn mix3d_xor(wave3d_square(p_o85605_x_scale*uv.x), wave3d_square(p_o85605_y_scale*uv.y), wave3d_square(p_o85605_z_scale*uv.z));\n}vec3 o85599_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\nvec3 o85605_0_1_tex3d = vec3(o85605_fct((p).xyz, _seed_variation_));\n\nreturn o85605_0_1_tex3d;\n}\nfloat o85599_input_Metallic_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85599_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85599_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nvec3 o85599_input_Emission_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0,1.0,1.0);\n}\nvec3 o85599_input_Normal_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(0.0,1.0,0.0);\n}\nfloat o85599_input_Alpha_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o85599_input_AmbientOcclusion_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nconst float p_o85604_sx = 10.360000000;\nconst float p_o85604_sy = 0.250000000;\nconst float p_o85604_sz = 18.710000000;\nconst float p_o85604_r = 0.010000000;\nfloat o85599_input_sdf3d(vec3 p, float _seed_variation_) {\nvec3 o85604_0_q = abs((p)) - vec3(p_o85604_sx, p_o85604_sy, p_o85604_sz);\nfloat o85604_0_1_sdf3d = length(max(o85604_0_q,0.0))+min(max(o85604_0_q.x,max(o85604_0_q.y,o85604_0_q.z)),0.0)-p_o85604_r;\n\nreturn o85604_0_1_sdf3d;\n}\n// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_o85599(vec4 uv, float _seed_variation_) {\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3(p_o85599_TranlateX,p_o85599_TranlateY,p_o85599_TranlateZ),vec3(p_o85599_RotateX,p_o85599_RotateY,p_o85599_RotateZ)*6.28318530718)/p_o85599_scale;\n\tfloat sdf=o85599_input_sdf3d(uv.xyz, _seed_variation_)*p_o85599_scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4(p_o85599_AmbientOcclusion*o85599_input_AmbientOcclusion_tex3d(vec4(uv.xyz,19.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4(p_o85599_Alpha*o85599_input_Alpha_tex3d(vec4(uv.xyz,15.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4(p_o85599_Normal*o85599_input_Normal_tex3d(vec4(uv.xyz,14.0), _seed_variation_),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4(p_o85599_Emission*o85599_input_Emission_tex3d(vec4(uv.xyz,13.0), _seed_variation_),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o85599_Roughness*o85599_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o85599_Specular*o85599_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4(p_o85599_Metallic*o85599_input_Metallic_tex3d(vec4(uv.xyz,2.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o85599_BaseColor_r, p_o85599_BaseColor_g, p_o85599_BaseColor_b, p_o85599_BaseColor_a).rgb*o85599_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}vec4 o90873_input_mfsdf(vec4 p, float _seed_variation_) {\nvec4 o85587_0_1_v4v4 = PBRObjectMaker_o85587((p), _seed_variation_);\nvec4 o85591_0_1_v4v4 = PBRObjectMaker_o85591((p), _seed_variation_);\nvec4 o85595_0_1_v4v4 = PBRObjectMaker_o85595((p), _seed_variation_);\nvec4 o85599_0_1_v4v4 = PBRObjectMaker_o85599((p), _seed_variation_);\nvec4 o85619_0_1_v4v4 = mfsdf3d_smooth_union(o85595_0_1_v4v4, o85599_0_1_v4v4,p_o85619_k);\nvec4 o85586_0_1_v4v4 = MFSDF_Union(o85587_0_1_v4v4,o85591_0_1_v4v4,o85619_0_1_v4v4,vec4(0.0,0.0,0.0,9999999.0),vec4(0.0,0.0,0.0,9999999.0),vec4(0.0,0.0,0.0,9999999.0),vec4(0.0,0.0,0.0,9999999.0),vec4(0.0,0.0,0.0,9999999.0));\n\nreturn o85586_0_1_v4v4;\n}\nvec3 o90873_input_hdri(vec2 uv, float _seed_variation_) {\n\nreturn vec3(0.0);\n}\n\n//tetrahedron normal by PauloFalcao\nvec3 normal_o90873(vec3 p, float _seed_variation_) {  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=o90873_input_mfsdf(vec4(p+e.xyy,0.0), _seed_variation_).w;\n  float v2=o90873_input_mfsdf(vec4(p+e.yyx,0.0), _seed_variation_).w;\n  float v3=o90873_input_mfsdf(vec4(p+e.yxy,0.0), _seed_variation_).w;\n  float v4=o90873_input_mfsdf(vec4(p+e.xxx,0.0), _seed_variation_).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid raymarch_o90873(in vec3 o,in vec3 v,out vec3 p,inout float d, float _seed_variation_) {\n  float s;\n  for(int i=0;i<512;i++){\n    p=o+v*d;\n    s=o90873_input_mfsdf(vec4(p,0.0), _seed_variation_).w;\n    if (abs(s)<0.0001) break;\n    d+=s;\n    if (d>p_o90873_MaxDistance) break;\n  } \n}\n\n/*EDITED OLD\nvec3 pathtracing_o90873(vec2 uv, float _seed_variation_) {\n\n\t// Init random\n\tvec2 rndgen=rndint_hash23(vec3(uv,iTime))*15360.0;\n    uint rngState = uint(uint(rndgen.x) * uint(1973) + uint(rndgen.y) * uint(9277) + uint(iTime*1223.0) * uint(26699)) | uint(1);\nEDITED OLD*/\n  \nvec3 pathtracing_o90873(uint rngState, vec2 uv, float _seed_variation_) { //EDITED NEW \n\n\t//vec3 o=vec3(p_o90873_CamX,p_o90873_CamY,p_o90873_CamZ)*p_o90873_CamZoom; //EDITED OLD add mouse\n    \n    //EDITED NEW add mouse\n    float mx=(iMouse.x/iResolution.x)*4.0;\n    float my=(iMouse.y/iResolution.y)*4.0;\n\tvec3 o=vec3(p_o90873_CamX+my,p_o90873_CamY,p_o90873_CamZ+mx)*p_o90873_CamZoom;\n    //EDITED NEW add mouse\n    \n    vec3 t=vec3(p_o90873_LookAtX,p_o90873_LookAtY,p_o90873_LookAtZ);\n    vec3 u=vec3(0.0,1.0,0.0);\n    vec3 c=normalize(t-o);\n    vec3 cx=normalize(cross(u,c));\n    vec3 cy=normalize(cross(cx,c));\n   \n\tvec2 xy=uv-0.5;\n\n    vec3 v=normalize(c*p_o90873_CamD+cx*xy.x+cy*xy.y);\n\n    vec3 p;\n    float d=0.01;\n    vec3 rgb=vec3(1.0);\n    vec3 io=o;\n    int i;\n    for(i=0;i<8;i++){\n    \n        raymarch_o90873(io,v,p,d, _seed_variation_);\n        \n        vec3 n=normal_o90873(p, _seed_variation_);\n        \n        //View direction to tangent space\n        vec3 ot;vec3 ob;Onb(n,ot,ob);\n        vec3 vt=vec3(dot(-v,ot),dot(-v,ob),dot(-v,n));\n\t\n        if (d<p_o90873_MaxDistance){\t\n        //if (length(p-o)<p_o90873_MaxDistance){\n        vec3 obj_Emission=o90873_input_mfsdf(vec4(p,13.0), _seed_variation_).rgb;\n        \n        if ((obj_Emission.x+obj_Emission.y+obj_Emission.z)>0.001){\n            rgb=obj_Emission*rgb;\n            break;\n        } else {\n            float s=RandomFloat01(rngState);\n\n            vec3 obj_BaseColor=o90873_input_mfsdf(vec4(p,1.0), _seed_variation_).rgb; // 1 - BaseColor  (r,g,b,sdf)\n            float obj_Metallic=o90873_input_mfsdf(vec4(p,2.0), _seed_variation_).x;   // 2 - Metallic   (v,0,0,sdf)\n            float obj_Specular=o90873_input_mfsdf(vec4(p,4.0), _seed_variation_).x;   // 4 - Specular   (v,0,0,sdf)\n            float obj_Roughness=o90873_input_mfsdf(vec4(p,5.0), _seed_variation_).x;  // 5 - Roughness  (v,0,0,sdf)\n\n            if (s>obj_Specular*obj_Specular){\n                rgb=(obj_BaseColor-obj_BaseColor*obj_Metallic)*rgb;\n                v=cosineSampleHemissphere(rngState,n);\n            } else {\n\n                float r2=obj_Roughness*obj_Roughness;\n                vec3 vndf=SampleGGXVNDF(rngState,vt,r2,r2);\n                vec3 nv=reflect(-vt,vndf);\n\n                //Sample direction back to camera space\n                nv=nv.x*ot+nv.y*ob+nv.z*n;\n\n                float FH=schlickWeight(dot(n,nv));\n                vec3 Cspec0=mix(vec3(obj_Specular*.08),obj_BaseColor,obj_Metallic);\n                vec3 Fs=mix(Cspec0,vec3(1.0),FH);\n                rgb=Fs*rgb;\n                \n                v=nv;\n            }\n            io=p;\n            d=0.01;\n        }\n        } else {\n        rgb*=o90873_input_hdri(equirectangularMap(v.xzy), _seed_variation_).xyz;\n        break;\n        }\n    }//for(int i\n    if (i==8) rgb=vec3(0.0);//did not hit any light source\n\n\treturn rgb;\n\t\n}\n\n/* EDITED OLD\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nfloat minSize = min(iResolution.x, iResolution.y);\nfloat _seed_variation_ = SEED_VARIATION;\nvec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))/minSize;\nvec3 o90873_0_1_rgb = pathtracing_o90873((UV), _seed_variation_);\nfragColor = vec4(o90873_0_1_rgb, 1.0);\n}\nEDITED OLD*/\n\n//EDITED NEW\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    vec2 xy=fragCoord+vec2(RandomFloat01(rngState),RandomFloat01(rngState));\n\n    float minSize = min(iResolution.x, iResolution.y);\n    float _seed_variation_ = SEED_VARIATION;\n    vec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (xy-0.5*(iResolution.xy-vec2(minSize)))/minSize;\n    vec3 rgb = /*change here*/pathtracing_o90873(rngState,(UV), _seed_variation_);\n\n    if (iMouse.z<0.1){\n        vec4 lastFrameColor = texture(iChannel0, fragCoord / iResolution.xy);\n        fragColor = vec4(lastFrameColor+vec4(rgb,1.0));\n    } else {\n        fragColor = vec4(rgb,1.0);\n    }\n\n}\n//EDITED NEW",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}