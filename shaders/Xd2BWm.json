{
    "Shader": {
        "info": {
            "date": "1500820466",
            "description": "An air balloon passing over some rocky wetlands. Rendered in an abstract faux low-poly style.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xd2BWm",
            "likes": 57,
            "name": "[SH17B] Abstract Balloon Flight",
            "published": 3,
            "tags": [
                "raymarch",
                "abstract",
                "lowpoly",
                "adventure"
            ],
            "usePreview": 1,
            "username": "Shane",
            "viewed": 6249
        },
        "renderpass": [
            {
                "code": "/*\n\n\tAbstract Balloon Flight\n\t-----------------------\n\n\tOne of the things I like about this competition is that I don't have to come up with\n\tideas - since the organizers have already taken care of that part. Having said that, \n\tI really struggled to think of a scene that conveyed \"adventure\" that would fit into \n\ta shader that would compile and run. In the end, I went for a cliche \"balloon over \n\tsunset terrain\" scene. Not exactly \"out of the box\" thinking, but at least I got my \n\thomework in on time. :)\n\t\n\tI chose an abstract, semi realistic, low-poly rendering style. Ironically, in a shader \n\tenvironment, achieving a low-poly look requires more effort than producing the smoother\n\tlooking imagery usually associated with a high polygon count. \n\n\tThe balloon was hacked together on the fly. It was a bit fiddly, but not that big a deal.\n\tModeling is simple enough - Just add the right objects in the right places. However, more\n\tdetail means slower distance functions. I got around that by using an old trick which\n\tinvolves intersecting with a sphere surrounding the object, then only raymarching the\n\tpixels necessary. \n\n\tThe low-poly looking terrain with its random rocks and greenery required a little more\n\teffort. Basically, you need 3D Voronoi, or something similar, to achieve that. Of course,\n\tthat's prohibitively expensive, so I've used one smooth noise base layer overlayed with\n\ta lower quality repeat cell tile algorithm that I came up with some time ago - and have \n\texplained in other examples.\n\t\n    Anyway, I tried to keep the size down, but more detail requires more writing, so it's a \n\tlittle larger than usual. I've hacked this together pretty quickly, so it needs some\n\ttidying up, both codewise and algorithmically speaking. I'll set about that over the\n\tnext couple of days. I'll try to get compilation time down too - You should never blame\n\tyour tools, but I swear it's WebGL 2's fault. :D\n\n*/\n\n// Allowing a bit of mouse movement. The scene was designed to look straight ahead, but\n// uncomment it if you want.\n//#define MOUSE_LOOK\n\n#define FAR 100. // Maximum ray distance. Analogous to the far plane.\n\n#define WAT 0. // Water.\n#define TER 1. // Terrain.\n#define BAL 2. // Balloon.\n#define BAS 3. // Basket.\n#define VEG 4. // Vegetation.\n#define SKY 5. // Sky.\n#define FLA 6. // Flame.\n\n#define camSpeed 5.\n\n// Balloon postion - relative to the camera.\n#define balPos vec3(-6, 12, 40)\n\n// Scene object ID. Either the path (0) or the surroundings (1).\nfloat objID;\nfloat svObjID; // Global ID to keep a copy of the above from pass to pass.\n\n// A flag to check whether we need to do the expensive balloon calculations. A sphere surrounding\n// the balloon will be raytraced prior to entering the raymarching loop, then the flag will be set.\nfloat balHit; \n\n// Fabrice's concise, 2D rotation formula.\nmat2 r2(float th){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\n// vec3 to float hash.\nfloat hash31( vec3 p ){ return fract(cos(dot(p, vec3(157, 113, 7)))*45758.5453); }\n\n\n// Minimum - with corresponding object ID.\nvec2 objMin(vec2 a, vec2 b){ \n    \n    // Returning the minimum distance along with the ID of the\n    // object. This is one way to do it. There are others.\n    return a.x < b.x ? a : b;\n    \n    //Equivalent to: return a.x < b.x ? a: b; \n    //float s = step(a.x, b.x);\n    //return s*a + (1. - s)*b;\n}\n\n\n\n// Tri-Planar blending function. Based on an old Nvidia tutorial.\nvec3 tex3D( sampler2D t, in vec3 p, in vec3 n ){\n    \n    n = max(abs(n), 0.001);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(t, p.yz).xyz;\n    vec3 ty = texture(t, p.zx).xyz;\n    vec3 tz = texture(t, p.xy).xyz;\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. :)\n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return (tx*tx*n.x + ty*ty*n.y + tz*tz*n.z);\n}\n\n\nfloat drawObject(in vec3 p){\n    \n    // Wrap conditions:\n    // Anything that wraps the domain will work.\n    //p = cos(p*6.2831853)*.25 + .25; \n    //p = abs(cos(p*3.14159)*.5);\n    //p = fract(p) - .5; \n    //p = abs(fract(p) - .5); \n    \n    // Distance metrics:\n    // Here are just a few variations. There are way too many to list them all,\n    // but you can try combinations with \"min,\" and so forth, to create some\n    // interesting combinations.\n    \n    // Spherical. (Square root needs to be factored to \"d\" in the cellTile function.)\n    //p = fract(p) - .5;    \n    //return dot(p, p)/1.5;\n    \n    // Octahedral... kind of.\n    //p = abs(fract(p)-.5);\n    //return dot(p, vec3(.333));\n    \n    // Triangular.\n    //p = fract(p) - .5;\n    //p = max(abs(p)*.866025 + p.yzx*.5, -p);\n    //return max(max(p.x, p.y), p.z);    \n    \n    // Cubic.\n    //p = abs(fract(p) - .5); \n    //return max(max(p.x, p.y), p.z);\n    \n    // Cylindrical. (Square root needs to be factored to \"d\" in the cellTile function.)\n    //p = fract(p) - .5; \n    //return max(max(dot(p.xy, p.xy), dot(p.yz, p.yz)), dot(p.xz, p.xz));\n    \n    // Octahedral.\n    //p = abs(fract(p) - .5); \n    //p += p.yzx;\n    //return max(max(p.x, p.y), p.z)*.5;\n\n    // Hexagonal tube.\n    p = abs(fract(p) - .5); \n    p = max(p*.866025 + p.yzx*.5, p.yzx);\n    return max(max(p.x, p.y), p.z);\n    \n    \n}\n\n\n// Repeat cellular tile routine. The operation count is extremely low when compared to conventional\n// methods. No loops, no flooring, no hash calls, etc. Conceptually speaking, this is the fastest way \n// to produce a reasonable 3D cellular pattern... Although, there's one with three objects and no \n// rotation, but quality really suffers at that point. \nfloat cellTile(in vec3 p){\n    \n    // Draw four overlapping objects (spheres, in this case) at various positions throughout the tile.\n    vec4 d; \n    d.x = drawObject(p - vec3(.81, .62, .53));\n    p.xy = vec2(p.y - p.x, p.y + p.x)*.7071;\n    //p.xy = vec2(p.y*.866025 - p.x*.5, p.y*.5 + p.x*.866025); // Etc.\n    d.y = drawObject(p - vec3(.39, .2, .11));\n    p.yz = vec2(p.z - p.y, p.z + p.y)*.7071;\n    //p.yz = vec2(p.z*.866025 - p.y*.5, p.z*.5 + p.y*.866025); // Etc.\n    d.z = drawObject(p - vec3(.62, .24, .06));\n    p.xz = vec2(p.z - p.x, p.z + p.x)*.7071;\n    //p.xz = vec2(p.z*.866025 - p.x*.5, p.z*.5 + p.x*.866025); // Etc.\n    d.w = drawObject(p - vec3(.2, .82, .64));\n\n    // Obtain the minimum, and you're done.\n    d.xy = min(d.xz, d.yw);\n        \n    //return 1. - min(d.x, d.y)*2.; // Scale between zero and one... roughly.\n    \n    // For anyone wanting to experiment with this, the following gives better variance:\n    const float scale = 1.; // 1 up to 4, or higher, depending on the look you want.\n    // Obviously, for the reverse, you take the one and minus away.\n    return 1. - min(min(d.x, d.y)*2.*scale, 1.);\n    \n}\n\nfloat drawObject2(in vec3 p){\n    \n    // Wrap conditions:\n    // Anything that wraps the domain will work.\n    //p = cos(p*6.2831853)*.25 + .25; \n    //p = abs(cos(p*3.14159)*.5);\n    //p = fract(p) - .5; \n    //p = abs(fract(p) - .5); \n    \n    // Cubic.\n    p = abs(fract(p) - .5); \n    return max(max(p.x, p.y), p.z);\n\n\n    // Hexagonal tube.\n    p = abs(fract(p) - .5); \n    p = max(p*.866025 + p.yzx*.5, p.yzx);\n    return max(max(p.x, p.y), p.z);\n    \n    \n}\n\n\nfloat cellTile2(in vec3 p, float scale){\n    \n    // Draw four overlapping objects (spheres, in this case) at various positions throughout the tile.\n    vec4 d; \n    d.x = drawObject2(p - vec3(.81, .62, .53));\n    p.xy = vec2(p.y - p.x, p.y + p.x)*.7071;\n    //p.xy = vec2(p.y*.866025 - p.x*.5, p.y*.5 + p.x*.866025); // Etc.\n    d.y = drawObject2(p - vec3(.39, .2, .11));\n    p.yz = vec2(p.z - p.y, p.z + p.y)*.7071;\n    //p.yz = vec2(p.z*.866025 - p.y*.5, p.z*.5 + p.y*.866025); // Etc.\n    d.z = drawObject2(p - vec3(.62, .24, .06));\n    p.xz = vec2(p.z - p.x, p.z + p.x)*.7071;\n    //p.xz = vec2(p.z*.866025 - p.x*.5, p.z*.5 + p.x*.866025); // Etc.\n    d.w = drawObject2(p - vec3(.2, .82, .64));\n\n    // Obtain the minimum, and you're done.\n    d.xy = min(d.xz, d.yw);\n        \n    //return 1. - min(d.x, d.y)*2.; // Scale between zero and one... roughly.\n \n    // For anyone wanting to experiment with this, the following gives better variance:\n    //const float scale = 2.; // 1 up to 4, or higher, depending on the look you want.\n    // Obviously, for the reverse, you take the one and minus away.\n    return 1. - min(min(d.x, d.y)*2.*scale, 1.);\n    \n}\n\n/*\n// Second order version.\nfloat cellTile(in vec3 p){\n    \n    // Draw four overlapping objects (spheres, in this case) at various positions throughout the tile.\n    vec4 v, d; \n    d.x = drawObject(p - vec3(.81, .62, .53));\n    p.xy = vec2(p.y - p.x, p.y + p.x)*.7071;\n    d.y = drawObject(p - vec3(.39, .2, .11));\n    p.yz = vec2(p.z - p.y, p.z + p.y)*.7071;\n    d.z = drawObject(p - vec3(.62, .24, .06));\n    p.xz = vec2(p.z - p.x, p.z + p.x)*.7071;\n    d.w = drawObject(p - vec3(.2, .82, .64));\n\n    v.xy = min(d.xz, d.yw), v.z = min(max(d.x, d.y), max(d.z, d.w)), v.w = max(v.x, v.y); \n   \n    d.x =  min(v.z, v.w) - min(v.x, v.y); // First minus second order, for that beveled Voronoi look. Range [0, 1].\n    //d.x =  min(v.x, v.y); // Minimum, for the cellular look.\n        \n    return d.x*2.; // Normalize.\n    \n}\n*/\n\n\n\n// The path is a 2D sinusoid that varies over time, depending upon the frequencies, and amplitudes.\nvec2 path(in float z){ \n\n    //return vec2(0); // Path 1.\n    //return vec2(sin(z*.05)*cos(z*.1)*2.5, sin(z*.06)*2.); // Path 2.\n    return vec2(sin(z*.1)*2.5, cos(z*.12)*.5); // Path 3.\n}\n\n\n\n// The triangle function that Shadertoy user Nimitz has used in various triangle noise demonstrations.\n// See Xyptonjtroz - Very cool. Anyway, it's not really being used to its full potential here.\nvec3 tri(in vec3 x){return abs(x-floor(x)-.5);} // Triangle function.\n\n// The function used to perturb the object. Obviously, more layers would be more convincing. \n// However, this is a GPU-draining distance function, so any finer details should be bump mapped.\nfloat surfFunc(in vec3 p){\n    \n    return cellTile(p/8.);//*.8 + dot(tri(p*0.384*2. + tri(p.yzx*0.192*2.)), vec3(0.666))*.2;\n     \n    // More interesting formations, and still quick, but not fast enough for this example.\n    //return cellTile(p/10.)*.75 + cellTile(p/10.*3.)*.25; \n \n    // Very cheap triangle noise. Looks OK, all things considering.\n    //p /= 4.;\n\t//float n = dot(tri(p*0.5 + tri(p.yzx*0.25)), vec3(0.666));\n    //return n*.75 + dot(tri(p*0.75 + tri(p.yzx*0.375)), vec3(0.666))*.25;\n\n}\n\n// Perturbing the sea floor. Just a very basic sinusoidal combination.\nfloat surfFunc2(in vec3 p){\n\n    \n\treturn dot(sin(p + sin(p.yzx*2. - vec3(0, 0, iTime*2.).yzx)), vec3(.1666)) + .5;\n \n\n}\n\n\n\n// Smooth maximum, based on IQ's smooth minimum.\nfloat smax(float a, float b, float s){\n    \n    float h = clamp(.5 + .5*(a - b)/s, 0., 1.);\n    return mix(b, a, h) + h*(1. - h)*s;\n}\n\n \n// Cheap and nasty 2D smooth noise function, based on IQ's original. Very trimmed down. In fact,\n// I probably went a little overboard. I think it might also degrade with large time values. I'll \n// swap it for something more robust later.\nfloat n2D(vec2 p) {\n \n\tvec2 i = floor(p); p -= i; p *= p*(3. - p*2.); //p *= p*p*(p*(p*6. - 15.) + 10.);    \n    \n\treturn dot(mat2(fract(sin(vec4(0, 41, 289, 330) + dot(i, vec2(41, 289)))*43758.5453))*\n               vec2(1. - p.y, p.y), vec2(1. - p.x, p.x));\n\n}\n\n// Producing some kind of prism shape.\nfloat doShape2(vec2 p){\n   \n    p = abs(p);\n    return max(p.x*.866025 + p.y*.5, p.y);\n    //return max((p.x + p.y)*.7, max(p.x, p.y));\n    \n}\n\n// To rotated hexagonal shapes combined together to produce a dodecahedron.\nfloat doShape(vec2 p){\n    \n    return max(doShape2(p), doShape2(p*r2(3.14159/6.)));\n    \n}\n\n\n// The scene. Hacked together in a hurry on the fly. A lot of it is pretty standard.\nfloat map(vec3 p){\n    \n   \n\n    // The noise layers.\n    float trSf = n2D(p.xz/12.);//terrain(p.xz);//triTerrain(p.xz);//\n    \n    float sf = surfFunc(p); // Surface perturbation.\n    \n \n    vec2 pth = path(p.z); // Wrap the gorge around the path.\n   \n    // Very basic water perturbation. The water follows the path, so the function is called after the\n    // path perturbation. It's also called here for reuse purposes.\n    float sf2 = surfFunc2(p); \n    \n   \n\n    \n    \n    p.xy -= pth;\n    \n    \n    float bas=1e4, bal=1e4, flame=1e4;\n  \n    if(balHit>0.){\n        \n        vec3 q = p;\n\n\n        vec3 bPos = q - balPos;//vec3(-6, 12, 40. + iTime*camSpeed);\n        bPos.z -= iTime*camSpeed;\n\n        bPos.xy *= r2(pth.x/64. + sin(iTime/4.)*.1);//r2(sin(iTime/8.)*.3);\n\n        // BALLOON\n        // Constructed with a series of conic dodecahedral prism-like objects.\n        bal = max(doShape(bPos.xz) - mix(.8, 2.9, (bPos.y + 1.8)/3.6), abs(bPos.y) - 1.8);\n\n        bPos.y -= 2.8;\n        float b2 = max(doShape(bPos.xz) - mix(2.9, 3., (bPos.y + 1.)/2.), abs(bPos.y) - 1.);\n        // Calculating the balloon frame ring - that holds the ropes.\n        float balRings = max(b2 - .1, -(-(bPos.y) - .8));\n        bal = min(bal, b2);\n\n        bPos.y -= 2.;\n        b2 = max(doShape(bPos.xz) - mix(3., 2., (bPos.y + 1.)/2.), abs(bPos.y) - 1.);\n        bal = min(bal, b2);\n\n\n        bPos.y -= 1.5;\n        b2 = max(doShape(bPos.xz) - mix(2., 0., (bPos.y + .5)/1.), abs(bPos.y) - .5);\n        bal = min(bal, b2);\n\n\n\t\t// BASKET\n        bPos.y += 10.4;\n        q = abs(bPos);\n        float hx = doShape2(q.xz);\n        bas = max(hx - .8, q.y - .8);\n        bas = max(bas, -max(max(hx - .9, -(hx-.7)), q.y - .4)); // Adding the top and bottom rim.\n        bas = min(bas, max(hx - .25, abs(bPos.y -.5) - .8)); // Flame stand - No such thing, but were keeping it simple.\n\n        // FLAME\n        // A volumetric approach to the flame would look better, but this will do.\n        // Mild flickering - Dave's suggestion.\n        float flicker = smoothstep(.25, .55, sin(iTime*3. - sf2*4.)*.3 + .7);\n        bPos.y -= (1. + flicker);\n        bal = max(bal, -max(length(bPos.xz) - .6, bPos.y - 4.)); // Bore out the ballon where the flame enters.\n        flame = length(bPos*vec3(1, .5, 1)) - (.35 + sf2*.1)*flicker; \n        bPos.y += (1. + flicker);   \n\n\t\t// The ropes that hold the basket. Basic repeat polar stuff.\n        bPos.y -= 3.2;\n        float ropes = max(doShape(bPos.xz) - mix(.8, 2.9, (bPos.y + 2.6)/5.2), abs(bPos.y) - 2.6);\n        bPos.xz += sin(bPos.xz*2. + cos(bPos.zx*2. + iTime))*.1;\n        float a = atan(bPos.z, bPos.x)/6.2831853; a = (floor(a*12.) + .5)/12.*6.2831853;\n        bPos.xz = bPos.xz*r2(a);\n        float bx = abs(bPos.z)-.5/12.;\n\n        ropes = max(max(ropes, bx), -(ropes+.1));\n\n        // Combining the basket frame, ropes and the basket itself.\n        bas = min(min(bas, ropes), balRings);\n        \n    }\n \n     \n    // Water. Just a plane with a little bit of sinusoidal perturbation. Nothing fancy.\n    float water = p.y + 4.2 + (sf2 - .5)*.4;\n    water += (.5 - sf)*.4;\n\n    // Used to carve out the channel.\n    vec2 ca = abs(p.xy*vec2(1, 1) - vec2(0, 1)); // Stretch and lower space.\n    \n    // The terrain. A flat plane with a base smooth noise layer. Some cellular noise is added to \n    // the base layer to make it look rocky.\n    float terrain = p.y + 1. + (.5 - trSf)*10.;\n    terrain = smax(5. - length(ca) + (.5 - sf)*1., terrain + (.5 - sf)*1., 4.) + (.5 - sf);\n    \n    // Finer cellular noise to provide the greenish abstract vegetation.\n    float sf3 = cellTile2(p + .5, 2.);\n   \n    \n    terrain = smax(terrain, -max(ca.x - 1., ca.y - 6.), 2.);\n    \n    // Vegetation.\n    float veg = terrain - .1 + terrain/4. + sf/4. - sf3*.2;\n    \n    \n    \n \n    \n    // Determine the overall closest object and its corresponding object ID. There's a way\n    // to save some cycles and take the object-ID calculations out of the distance function, \n    // but I'm leaving them here for simplicity.\n    vec2 d = objMin(vec2(water, WAT), vec2(terrain, TER));\n    d = objMin(d, vec2(bas, BAS));\n    d = objMin(d, vec2(bal, BAL));\n    d = objMin(d, vec2(veg, VEG));\n    d = objMin(d, vec2(flame, FLA));\n    \n    objID = d.y; // Set the global object ID.\n    ///////////////\n    \n\t// Return the minimum hit point. \n    return d.x*.9; // Shortening the ray step a fraction to alleviate any minor overstepping.\n \n}\n\n \n/*\n\n// The bump function.\nfloat bumpFunc(vec3 p, vec3 n){\n\n\n    float c; //if(svObjID>.5 ) \n    c = 1. - surfFunc(p*3.); // cellTile(p/8.*3.);\n \n    return c; \n\n}\n\n// Standard function-based bump mapping function with some edging thrown into the mix.\nvec3 doBumpMap(in vec3 p, in vec3 n, float bumpfactor, inout float edge, inout float crv){\n    \n    // Resolution independent sample distance... Basically, I want the lines to be about\n    // the same pixel with, regardless of resolution... Coding is annoying sometimes. :)\n    vec2 e = vec2(8./iResolution.y, 0); \n    \n    float f = bumpFunc(p, n); // Hit point function sample.\n    \n    float fx = bumpFunc(p - e.xyy, n); // Nearby sample in the X-direction.\n    float fy = bumpFunc(p - e.yxy, n); // Nearby sample in the Y-direction.\n    float fz = bumpFunc(p - e.yyx, n); // Nearby sample in the Y-direction.\n    \n    float fx2 = bumpFunc(p + e.xyy, n); // Sample in the opposite X-direction.\n    float fy2 = bumpFunc(p + e.yxy, n); // Sample in the opposite Y-direction.\n    float fz2 = bumpFunc(p + e.yyx, n);  // Sample in the opposite Z-direction.\n    \n     \n    // The gradient vector. Making use of the extra samples to obtain a more locally\n    // accurate value. It has a bit of a smoothing effect, which is a bonus.\n    vec3 grad = vec3(fx - fx2, fy - fy2, fz - fz2)/(e.x*2.);  \n    //vec3 grad = (vec3(fx, fy, fz ) - f)/e.x;  // Without the extra samples.\n\n\n    // Using the above samples to obtain an edge value. In essence, you're taking some\n    // surrounding samples and determining how much they differ from the hit point\n    // sample. It's really no different in concept to 2D edging.\n    edge = abs(fx + fy + fz + fx2 + fy2 + fz2 - 6.*f);\n    edge = smoothstep(0., 1., edge/e.x*2.);\n    \n    \n    // We may as well use the six measurements to obtain a rough curvature value while we're at it.\n    //crv = clamp((fx + fy + fz + fx2 + fy2 + fz2 - 6.*f)*32. + .6, 0., 1.);\n    \n    // Some kind of gradient correction. I'm getting so old that I've forgotten why you\n    // do this. It's a simple reason, and a necessary one. I remember that much. :D\n    grad -= n*dot(n, grad);          \n                      \n    return normalize(n + grad*bumpfactor); // Bump the normal with the gradient vector.\n\t\n}\n\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec3 doBumpMap( sampler2D tx, in vec3 p, in vec3 n, float bf){\n   \n    const vec2 e = vec2(0.001, 0);\n    \n    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    \n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n                      \n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n    \n}\n\n*/\n\n// Standard raymarching routine.\nfloat trace(vec3 ro, vec3 rd){\n   \n    float t = 0., d;\n    \n    for (int i=0; i<128; i++){\n\n        d = map(ro + rd*t);\n        \n        if(abs(d)<.001*(t*.125 + 1.) || t>FAR) break;\n        \n        t += d;\n    }\n    \n    return min(t, FAR);\n}\n\n// Refective raymarching routine - More relaxed epsilon distance, and fewer iterations.\nfloat traceRef(vec3 ro, vec3 rd){\n   \n    float t = 0., d;\n    \n    for (int i=0; i<96; i++){\n\n        d = map(ro + rd*t);\n        \n        if(abs(d)<.002*(t*.25 + 1.) || t>FAR) break;\n        \n        t += d;\n    }\n    \n    return min(t, FAR);\n}\n\n\n// Intersection of a sphere. IQ's formula - trimmed down a little.\nfloat traceSphere( in vec3 ro, in vec3 rd, in vec4 sph ){\n\n\tro -= sph.xyz;\n\tfloat b = dot(ro, rd);\n\tfloat h = b*b - dot(ro, ro) + sph.w*sph.w;\n    return h<0. ? -1. : -b - sqrt( h );\n}\n\n\n// Cheap shadows are the bain of my raymarching existence, since trying to alleviate artifacts is an excercise in\n// futility. In fact, I'd almost say, shadowing - in a setting like this - with limited  iterations is impossible... \n// However, I'd be very grateful if someone could prove me wrong. :)\nfloat softShadow(vec3 ro, vec3 lp, float k, float t){\n\n    // More would be nicer. More is always nicer, but not really affordable.\n    const int maxIterationsShad = 48; \n    \n    vec3 rd = lp-ro; // Unnormalized direction ray.\n\n    float shade = 1.;\n    float dist = .0025*(t*.125 + 1.);  // Coincides with the hit condition in the \"trace\" function.  \n    float end = max(length(rd), 0.0001);\n    //float stepDist = end/float(maxIterationsShad);\n    rd /= end;\n\n    // Max shadow iterations - More iterations make nicer shadows, but slow things down. Obviously, the lowest \n    // number to give a decent shadow is the best one to choose. \n    for (int i=0; i<maxIterationsShad; i++){\n\n        float h = map(ro + rd*dist);\n        //shade = min(shade, k*h/dist);\n        shade = min(shade, smoothstep(0.0, 1.0, k*h/dist)); // Subtle difference. Thanks to IQ for this tidbit.\n        // So many options here, and none are perfect: dist += min(h, .2), dist += clamp(h, .01, stepDist), etc.\n        dist += clamp(h, .02, .5); \n        \n        // Early exits from accumulative distance function calls tend to be a good thing.\n        if (h<0.0 || dist > end) break; \n    }\n\n    // I've added a constant to the final shade value, which lightens the shadow a bit. It's a preference thing. \n    // Really dark shadows look too brutal to me. Sometimes, I'll add AO also just for kicks. :)\n    return min(max(shade, 0.) + .15, 1.); \n}\n\n\n// Standard normal function. It's not as fast as the tetrahedral calculation, but more symmetrical. Due to \n// the intricacies of this particular scene, it's kind of needed to reduce jagged effects.\nvec3 getNormal(in vec3 p) {\n\tconst vec2 e = vec2(0.0025, 0);\n\treturn normalize(vec3(map(p + e.xyy) - map(p - e.xyy), map(p + e.yxy) - map(p - e.yxy),\tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\n\n/*\n// Tetrahedral normal, to save a couple of \"map\" calls. Courtesy of IQ.\nvec3 getNormal( in vec3 p ){\n\n    // Note the slightly increased sampling distance, to alleviate\n    // artifacts due to hit point inaccuracies.\n    vec2 e = vec2(0.0025, -0.0025); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n*/\n\n// Normal calculation, with some edging and curvature bundled in.\nvec3 getNormal(vec3 p, inout float edge, inout float crv, float ef) { \n\t\n    // Roughly two pixel edge spread, regardless of resolution.\n    vec2 e = vec2(ef/iResolution.y, 0);\n\n\tfloat d1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\tfloat d3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\tfloat d5 = map(p + e.yyx), d6 = map(p - e.yyx);\n\tfloat d = map(p)*2.;\n\n    edge = abs(d1 + d2 - d) + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n    //edge = abs(d1 + d2 + d3 + d4 + d5 + d6 - d*3.);\n    edge = smoothstep(0., 1., sqrt(edge/e.x*2.));\n/*    \n    // Wider sample spread for the curvature.\n    e = vec2(12./450., 0);\n\td1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\td3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\td5 = map(p + e.yyx), d6 = map(p - e.yyx);\n    crv = clamp((d1 + d2 + d3 + d4 + d5 + d6 - d*3.)*32. + .5, 0., 1.);\n*/\n    \n    e = vec2(.0015, 0); //iResolution.y - Depending how you want different resolutions to look.\n\td1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\td3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\td5 = map(p + e.yyx), d6 = map(p - e.yyx);\n\t\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\n// I keep a collection of occlusion routines... OK, that sounded really nerdy. :)\n// Anyway, I like this one. I'm assuming it's based on IQ's original.\nfloat calcAO(in vec3 pos, in vec3 nor)\n{\n\tfloat sca = 1.5, occ = 0.0;\n    for( int i=0; i<5; i++ ){\n    \n        float hr = 0.01 + float(i)*0.5/4.0;        \n        float dd = map(nor * hr + pos);\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\n/*\n// Simple environment mapping. Pass the reflected vector in and create some\n// colored noise with it. The normal is redundant here, but it can be used\n// to pass into a 3D texture mapping function to produce some interesting\n// environmental reflections.\n//\n// More sophisticated environment mapping:\n// UI easy to integrate - XT95    \n// https://www.shadertoy.com/view/ldKSDm\nvec3 eMap(vec3 rd, vec3 sn){\n\n    vec3 tx = tex3D(iChannel0, rd, sn);\n    return smoothstep(.15, .5, tx); \n    \n}\n*/\n \n\n/*\n// vec3 to float hash.\nfloat hash21( vec2 p ){ return fract(sin(dot(p, vec2(41, 289)))*45758.5453); }\nfloat hash( float n ){ return fract(sin(n)*45758.5453); }\n\n// IQ's value noise, with analytical derivatives.\nvec4 n3D2( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n\n    float n = p.x + 317.0*p.y + 157.0*p.z;\n    \n    float a = hash(n+0.0);\n    float b = hash(n+1.0);\n    float c = hash(n+317.0);\n    float d = hash(n+318.0);\n    float e = hash(n+157.0);\n\tfloat f = hash(n+158.0);\n    float g = hash(n+474.0);\n    float h = hash(n+475.0);\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z), \n                      2.0* du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                                      k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                                      k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );\n}\n\n// Distance function.\nvec4 fmap2(vec3 p){\n\n    // Three layers of noise. More would be nicer.\n    p *= vec3(1, 4, 1)/400.;\n    \n    return n3D2(p)*0.57 + n3D2(p*4.)*0.28 + n3D2(p*8.)*0.15;\n}\n\n*/\n\n// Non-standard vec3-to-vec3 hash function.\nvec3 hash33(vec3 p){ \n    \n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n); \n}\n\n// Compact, self-contained version of IQ's 3D value noise function.\nfloat n3D(vec3 p){\n    \n\tconst vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); //p *= p*p*(p*(p * 6. - 15.) + 10.);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n\n// Distance function.\nfloat fmap(vec3 p){\n\n    // Three layers of noise. More would be nicer.\n    p *= vec3(1, 4, 1)/400.;\n    \n    return n3D(p)*0.57 + n3D(p*4.)*0.28 + n3D(p*8.)*0.15;\n}\n\n\n\n// Used in one of my volumetric examples. With only four layers, it's kind of going to waste\n// here. I might replace it with something more streamlined later.\nvec4 cloudLayers(vec3 ro, vec3 rd, vec3 lp, float far){\n    \n    // The ray is effectively marching through discontinuous slices of noise, so at certain\n    // angles, you can see the separation. A bit of randomization can mask that, to a degree.\n    // At the end of the day, it's not a perfect process. Note, the ray is deliberately left \n    // unnormalized... if that's a word.\n    //\n    // Randomizing the direction.\n    rd = (rd + (hash33(rd.zyx)*0.004-0.002)); \n    // Randomizing the length also. \n    rd *= (1. + fract(sin(dot(vec3(7, 157, 113), rd.zyx))*43758.5453)*0.04-0.02); \n    \n    // Some more randomization, to be used for color based jittering inside the loop.\n    //vec3 rnd = hash33(rd+311.);\n\n    // Local density, total density, and weighting factor.\n    float ld=0., td=0., w=0.;\n\n    // Closest surface distance, and total ray distance travelled.\n    float d=1., t=0.;\n    \n\n    // Distance threshold. Higher numbers give thicker clouds, but fill up the screen too much.    \n    const float h = .5;\n\n\n    // Initializing the scene color to black, and declaring the surface position vector.\n    vec3 col = vec3(0), sp;\n    \n    \n    vec4 d4 = vec4(1, 0, 0, 0);\n    \n\n    // Particle surface normal.\n    //\n    // Here's my hacky reasoning. I'd imagine you're going to hit the particle front on, so the normal\n    // would just be the opposite of the unit direction ray. However particles are particles, so there'd\n    // be some randomness attached... Yeah, I'm not buying it either. :)\n    vec3 sn = normalize(hash33(rd.yxz)*.03-rd);\n    //vec4 ns4;\n\n    // Raymarching loop.\n    for (int i=0; i<4; i++) {\n\n        // Loop break conditions. Seems to work, but let me\n        // know if I've overlooked something.\n        if(td>1. || t>far)break;\n\n\n        sp = ro + rd*t; // Current ray position.\n        // Noise with analytical derivatives. More expensive and didn't add enough to the scene,\n        // so they didn't make the cut. Diminishing returns, and all that.       \n        //ns4 = fmap(sp);\n        //sn = -normalize(ns4.yzw);\n        //d = ns4.x*.8 + .4;//fmap(sp); // Closest distance to the surface... particle.\n        d = fmap(sp); // Closest distance to the surface... particle.\n        \n        //d = d4.x;\n        //sn = normalize(d4.yzw);\n\n        // If we get within a certain distance, \"h,\" of the surface, accumulate some surface values.\n        // The \"step\" function is a branchless way to do an if statement, in case you're wondering.\n        //\n        // Values further away have less influence on the total. When you accumulate layers, you'll\n        // usually need some kind of weighting algorithm based on some identifying factor - in this\n        // case, it's distance. This is one of many ways to do it. In fact, you'll see variations on \n        // the following lines all over the place.\n        //\n        ld = (h - d) * step(d, h); \n        w = (1. - td) * ld;   \n\n        // Use the weighting factor to accumulate density. How you do this is up to you. \n        //td += w*w*8. + 1./60.; //w*w*5. + 1./50.;\n        td += w*.5 + 1./65.; // Looks cleaner, but a little washed out.\n\n\n        // Point light calculations.\n        vec3 ld = lp-sp; // Direction vector from the surface to the light position.\n        float lDist = max(length(ld), 0.001); // Distance from the surface to the light.\n        ld/=lDist; // Normalizing the directional light vector.\n\n        // Using the light distance to perform some falloff.\n        float atten = 100./(1. + lDist*0.005 + lDist*lDist*0.00005);\n\n        // Ok, these don't entirely correlate with tracing through transparent particles,\n        // but they add a little anglular based highlighting in order to fake proper lighting...\n        // if that makes any sense. I wouldn't be surprised if the specular term isn't needed,\n        // or could be taken outside the loop.\n        float diff = max(dot( sn, ld ), 0.);\n        float spec = pow(max( dot( reflect(-ld, sn), -rd ), 0. ), 4.);\n        \n        // Accumulating the color. Note that I'm only adding a scalar value, in this case,\n        // but you can add color combinations.\n        //col += w*(1. + diff*.5 + spec*.5)*atten;\n \n        // Try this instead, to see what it looks like without the fake contrasting. Obviously,\n        // much faster.\n        col += w*(diff*diff + vec3(1, .75, .5)*spec + .5)*atten;//*1.25;\n        \n        // Optional extra: Color-based jittering. Roughens up the grey clouds that hit the camera lens.\n        //col += (fract(rnd*289. + t*41.)-.5)*0.02;;\n\n\n\n        // Enforce minimum stepsize. This is probably the most important part of the procedure.\n        // It reminds me a little of of the soft shadows routine.\n        t += max(d4.x*.5, 0.25)*100.; //* 0.75\n        // t += 0.2; // t += d*0.5;// These also work, but don't seem as efficient.\n\n    }\n    \n    //t = min(t, FAR); //24.\n    \n    return vec4(col, t);\n        \n}\n\n// Pretty standard way to make a sky. \nvec3 getSky(in vec3 ro, in vec3 rd, vec3 lp, float t){\n    \n\t// Sun strength.\n    float sun = max(dot(rd, normalize(lp - ro)), 0.0); \n    \n    // The blueish sky color. Tinging the sky redish around the sun. \t\n    vec3 col =  mix(vec3(.25, .6, .8), vec3(.8, .8, .6), 1.5*pow(sun, 8.))*(1.-.75*rd.y);\n    \n     \n    // Sun. I can thank IQ for this tidbit. Producing the sun with three\n    // layers, rather than just the one. Much better.\n    col += 0.1*vec3(.7, .3, .9)*pow(sun, .5);\n    col += 0.4*vec3(1., .4, .2)*pow(sun, 1.);\n    col += 0.5*vec3(1.)*pow(sun, 512.);\n    \n    // Mixing this up to give the sky a bit more contrast and color. Not realistic, obviously.\n    col = mix(col*.7, col*col*1.25, .5);\n    col = mix(col.zyx, col, sun*.25+.75);\n    \n    // Add a touch of speckle. For better or worse, I find it breaks the smooth gradient up a little.\n    col = clamp(col + hash31(rd)*.04 - .02, 0., 1.);\n    \n \n    //return col; // Clear sky day. Much easier. :)\n    \n\t\n\t// Clouds. Render some 3D clouds far off in the distance. I've made them sparse and wispy,\n    // since we're in the desert, and all that.\n    \n    // Mapping some 2D clouds to a plane to save some calculations. Raytrace to a plane above, which\n    // is pretty simple, but it's good to have Dave's, IQ's, etc, code to refer to as backup.\n    \n    // Give the direction ray a bit of concavity for some fake global curvature - My own dodgy addition. :)\n    //rd = normalize(vec3(rd.xy, sqrt(rd.z*rd.z + dot(rd.xy, rd.xy)*.1) ));\n \n    // If we haven't hit anything and are above the horizon point (there for completeness), render the sky.\n    \n    // Raytrace to a plane above the scene.\n    float tt = (1000. - ro.y)/(rd.y + .2);\n \n    if(t>=FAR && tt>0.){\n\n        // Trace out a very small number of layers. In fact, there are so few layer that the following\n        // is almost pointless, but I've left it in.\n        vec4 cl = cloudLayers(ro + rd*tt, rd, lp, FAR*3.);\n        vec3 clouds = cl.xyz;\n\n        // Mix in the clouds.\n        col = mix( col, col*.5 + .75, clouds); // *clamp(rd.y*4. + .0, 0., 1.)\n    }\n    \n    return col;\n\n}\n\n\n\n\n// Coloring\\texturing the scene objects, according to the object IDs.\nvec3 getObjectColor(vec3 p, vec3 n){\n    \n    //p.xy -= path(p.z);\n    // Scene object coloring.\n    vec3 tx;\n\n    if(svObjID==TER) { // Terrain.\n        \n        tx = tex3D(iChannel0, p/8., n );\n        tx = smoothstep(-.1, .5, tx);\n\t\ttx *= vec3(1, .85, .7);\n        \n        // Optional: Extra crevice darkening from biological buildup. Adds\n        // depth - in addition to the shadows and AO. \n        tx *= smoothstep(.1, .6, surfFunc(p))*.6 + .4;\n        \n        // Alternative algae in the crevices.\n        //float c = smoothstep(.1, .6, surfFunc(p));\n        //tx *= vec3(c*c, c, c*c*c)*.6 + .4;\n    }\n    else if(svObjID==WAT) { // Water.\n        \n        //tx = tex3D(iChannel0, p/4., n );\n        //tx = smoothstep(-.1, .5, tx);\n        // To save calculations - and compilation time, the water will be purely\n        // reflective. This is just a dummy variable of sorts.\n        tx = vec3(1);\n    }\n    else if(svObjID==BAL) { // The ballon.\n        \n        // Matching the balloon's movement (in the distance function) to match \n        // texturing and coloring.\n        vec2 pth = path(p.z);\n \n        vec3 bPos = p;\n        bPos.xy -= pth;\n        bPos -= balPos; //vec3(-6, 12, 40. + iTime*camSpeed);\n        bPos.z -= iTime*camSpeed;\n     \tbPos.xy *= r2(pth.x/64. + sin(iTime/4.)*.1);\n        \n        tx = tex3D(iChannel0, bPos/4., n );\n        tx = smoothstep(-.1, .5, tx);\n       \n        // Polar modular calculations to give the red and white stripes.\n        float a = atan(bPos.z, bPos.x)/6.2831853*12.;\n        \n        if(mod(a + .5, 2.)<1. ) tx *= vec3(3, 1, .75); // Color every second one red.\n        else tx *= vec3(3, 2.5, 1.5); // Alternate ones white.\n        \n        \n    }\n    else if(svObjID==BAS) { // Basket.\n        tx = tex3D(iChannel0, p/4., n );\n        tx = smoothstep(-.1, .5, tx);\n        tx *= vec3(1.5, 1., .5); // Brownish timber color.\n    }\n    else if(svObjID==VEG) { // Vegetation.\n        \n        tx = tex3D(iChannel0, p/4., n );\n        tx = smoothstep(-.1, .5, tx);\n        tx *= vec3(.7, 1.2, .5); // Green.\n \n        \n    }\n    else if(svObjID==FLA) { // Flame.\n        tx = tex3D(iChannel0, p + iTime, n );\n        tx = smoothstep(-.1, .5, tx);\n        // Increase the flame intensity - since it's supposed to be hot, and stuff.\n        // A volometric approach to the flame would have been nice, but I'm trying\n        // to keep it simple.\n        tx *= vec3(8, 2, .8)*12.; // Ramp the color right up for the flame.\n        \n    }\n    \n    //tx *= bumpFunc(p.xyz, n);\n\n    \n    return tx;\n    \n}\n\n \n\n// Using the hit point, unit direction ray, etc, to color the scene. Diffuse, specular, falloff, etc. \n// It's all pretty standard stuff.\nvec3 doColor(in vec3 ro, in vec3 rd, in vec3 lp, float t, float wf){\n    \n    // Initiate the scene (for this pass) to zero.\n    vec3 sceneCol = vec3(0);\n    \n    // Retrieve the background color.\n    vec3 sky = getSky(ro, rd, lp, t);\n    \n    \n    if(t<FAR){ // If we've hit a scene object, light it up.\n        \n        // Surface hit point.\n        vec3 sp = ro + rd*t;\n\n        // Retrieving the normal at the hit point, plus the edge and curvature values.\n        float edge = 0., crv = 1.;\n        float ef = 16.;\n        if(svObjID==BAL) ef = 24.;\n        //if(svObjID==CLO) ef = 64.;\n        //if(svObjID==WAT) ef = 128.;\n        vec3 sn = getNormal(sp, edge, crv, ef);\n\n\n        float bf = .5;\n        if(svObjID<.5) bf = .01;\n\n        float edge2 = 0., crv2 = 1.; \n        //if(svObjID>.5)\n        //sn = doBumpMap(sp, sn, bf/(1. + t/FAR*.125), edge2, crv2); \n\n        bf = .07;\n        if(svObjID<.5) bf = .04;\n        //sn = doBumpMap(iChannel0, sp, sn, bf);\n        \n        // Shading. Shadows, ambient occlusion, etc. We're only performing this on the \n        // first pass. Not accurate, but faster, and in most cases, not that noticeable.\n        // In fact, the shadows almost didn't make the cut, but it didn't quite feel \n        // right without them.\n        /*\n        balHit = 1.;\n        float ao = calcAO(sp, sn);\n        ////////\n        // Flagging pixels over the balloon that don't need shadow calculations... Such a hassle,\n        // but it saves a lot of shadow calculations.\n        // Positioning the invisible collision sphere over the balloon. Used to flag pixels that\n        // contain the balloon, so that the expensive balloon rendering calculations are only\n        // performed on those pixels. See the distance function.\n        vec2 pth = path(sp.z);\n        vec3 bPos = vec3(0, 4, iTime*camSpeed);\n        bPos.xy *= r2(pth.x/64. + sin(iTime/4.)*.1);//r2(sin(iTime/8.)*.3);\n        bPos.xy -= pth;   \n        bPos += balPos; //vec3(-6, 12.-3., 40.);\n        bPos.y -= 3.;\n        balHit = traceSphere(sp + sn*.002, normalize(lp - (sp + sn*.002)), vec4(bPos, 8.)); // Balloon pixel flag.\n        ////////\n        //\n        float sh = softShadow(sp + sn*.002, lp, 16., t); // Set to \"1.,\" if you can do without them.\n        sh = (sh + ao*.3)*ao;\n        balHit = 1.;\n        */\n        \n        float ao = calcAO(sp, sn);\n        float sh = softShadow(sp + sn*.002, lp, 16., t); // Set to \"1.,\" if you can do without them.\n        sh = (sh + ao*.3)*ao;\n        \n    \n    \n        vec3 ld = lp - sp; // Light direction vector.\n        float lDist = max(length(ld), 0.001); // Light to surface distance.\n        ld /= lDist; // Normalizing the light vector.\n\n        // Attenuating the light, based on distance.\n        float atten = 2./(1. + lDist*0.01 + lDist*lDist*0.00008);\n\n        // Standard diffuse term.\n        float diff = max(dot(sn, ld), 0.);\n        //diff = pow(diff, 2.)*.66 + pow(diff, 4.)*.34;\n        // Standard specualr term.\n        float spec = pow(max( dot( reflect(-ld, sn), -rd ), 0.0 ), 32.0);\n        //float fres = clamp(1. + dot(rd, sn), 0., 1.);\n        //float Schlick = pow( 1. - max(dot(rd, normalize(rd + ld)), 0.), 5.0);\n        //float fre2 = mix(.5, 1., Schlick);  //F0 = .5.\n\n        // Coloring the object. You could set it to a single color, to\n        // make things simpler, if you wanted.\n        vec3 objCol = getObjectColor(sp, sn);\n        \n        // Changing materials, if the water's hit. Not used.\n        //if(wf<1.) { diff *= .5; spec *= .5; }\n        \n\n        // Combining the above terms to produce the final scene color.\n        sceneCol = objCol*(diff + ao*.5 + vec3(1, .7, .5)*spec*1.);\n        \n         \n        // Edges.\n        //sceneCol *= 1. - edge2*.6; // Bump mapped edging for the terrain only.     \n        \n        sceneCol *= 1. - edge*.7; // Geometry based edging.\n        \n        // Reflection. Not really suitable for this example.\n        //sceneCol += eMap(reflect(rd, sn), sn);\n\n        // Apply the attenuation and shadows.\n        sceneCol *= atten*sh;\n        \n        \n    \n    }\n    \n        // APPLYING FOG\n    // Fog - based off of distance from the camera.\n    float fog = smoothstep(0.75, .99, t/FAR); // t/FAR; \n \n\n    //if(wf<1.) sky = mix(sky, sky*sky, .5);\n    // Blend in a bit of light fog for atmospheric effect. I really wanted to put a colorful, \n    // gradient blend here, but my mind wasn't buying it, so dull, blueish grey it is. :)\n    sceneCol = mix(sceneCol, sky,  fog); // exp(-.002*t*t), etc. fog.zxy \n\n    \n  \n    // Return the color. Done once for each pass.\n    return sceneCol;\n    \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    // Screen coordinates.\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\t\n    vec3 offsCam = vec3(0, 6, 10)*0.;\n\t// Camera Setup.\n\tvec3 ro = vec3(0, 4, iTime*camSpeed) + offsCam; // Camera position, doubling as the ray origin.\n\tvec3 lk = ro + vec3(0, 0, .25);  // \"Look At\" position.\n \n   \n    // Light position. Set reasonably far away in the background somewhere. A sun is usually so far \n    // away that direct light is called for, put I like to give it just a bit of a point light feel.\n    vec3 lp = ro + vec3(10, FAR*.26, FAR*.52)*2.;\n    \n    // Used for the balloon positioning. \n    vec2 pth = path(ro.z);\n    \n   \n\t// Using the Z-value to perturb the XY-plane.\n\t// Sending the camera, \"look at,\" and light vector down the path. The \"path\" function is \n\t// synchronized with the distance function.\n    ro.xy += pth;//path(ro.z);\n\tlk.xy += path(lk.z);\n\tlp.xy += path(lp.z);\n    \n\n    // Using the above to produce the unit ray-direction vector.\n    float FOV = 3.14159/3.; // FOV - Field of view.\n    vec3 forward = normalize(lk-ro);\n    vec3 right = normalize(vec3(forward.z, 0., -forward.x )); \n    vec3 up = cross(forward, right);\n\n    // rd - Ray direction.\n    vec3 rd = normalize(forward + FOV*uv.x*right + FOV*uv.y*up);\n    //rd = normalize(vec3(rd.xy, sqrt(max(rd.z*rd.z - dot(rd.xy, rd.xy)*.15, 0.)) ));\n    \n    // Camera swivel - based on path position.\n    vec2 sw = path(lk.z);\n    rd.xy *= r2(-sw.x/32.);\n    \n    // The scene wasn't really designed with mouse movement in mind, but it's\n    // here if desired.\n    #ifdef MOUSE_LOOK\n    // Mouse controls. A bit hacky, but I'll fix them.    \n\tvec2 ms = vec2(0);\n    if (iMouse.z > 1.0) ms = (2.*iMouse.xy - iResolution.xy)/iResolution.xy;\n    vec2 a = sin(vec2(1.5707963, 0) - ms.x); \n    mat2 rM = mat2(a, -a.y, a.x);\n    rd.xz = rd.xz*rM; \n    a = sin(vec2(1.5707963, 0) - ms.y); \n    rM = mat2(a, -a.y, a.x);\n    rd.yz = rd.yz*rM;\n    #endif\n\n    \n    // Positioning the invisible collision sphere over the balloon. Used to flag pixels that\n    // contain the balloon, so that the expensive balloon rendering calculations are only\n    // performed on those pixels. See the distance function.\n    vec3 bPos = vec3(0, 4, iTime*camSpeed);\n    bPos.xy *= r2(pth.x/64. + sin(iTime/4.)*.1);//r2(sin(iTime/8.)*.3);\n\tbPos.xy -= pth;   \n    bPos += balPos; //vec3(-6, 12.-3., 40.);\n    bPos.y -= 3.;\n    balHit = traceSphere(ro, rd, vec4(bPos, 8.)); // Balloon pixel flag.\n    \n    \n    // Trace the scene.    \n    float t = trace(ro, rd);\n    \n    \n    \n    svObjID = objID; // Save the object ID, for use in the coloring equation.\n    \n    // Water factor. Used in this way to avoid calling \"doColor\" twice. The compiler would\n    // rather not do that.\n    float wf = 1.;\n    // Saving the background. The fog needs to be applied twice to the water. Once for the \n    // reflective color, and again for the overall scene.\n    vec4 fpBg; // First pass background... I named it in a hurry. :)\n    float fpSh; // Save the first pass shadow.\n    \n    // An overly simplistic water reflection pass. Basically, the water is given full reflection\n    // to avoid to many calculations. Ideally, you'd combine a tiny bit of the first pass color\n    // with a Fresnel combination of reflective and refractive passes, but the compiler has a \n    // fit (ever since WebGL 2, it seems), so just this. :)\n    if(svObjID==WAT && t<FAR){\n        // Save the sky color and fog factor, as viewed from the camera.\n        fpBg.xyz = getSky(ro, rd, lp, t);\n        fpBg.w = smoothstep(0.75, .99, t/FAR); // t/FAR; \n        \n        ro += rd*t;\n        vec3 n = getNormal(ro);\n        \n////    \n        // Fist pass shadow over the water. It's barely noticeable, so it was tempting to skip\n        // it, but I couldn't bring myself to have shadowless water. :)\n        balHit = 1.;  \n        //float ao = calcAO(ro, n);\n        fpSh = softShadow(ro + n*.002, lp, 16., t); // Set to \"1.,\" if you can do without them.\n        //fpSh = (fpSh + ao*.3)*ao;        \n///         \n        \n        rd = reflect(rd, n);\n        t = traceRef(ro + rd*.001*(t*.125 + 1.), rd);\n        svObjID = objID; // Save the reflected object ID.\n        wf = .8;\n    }\n    \n    \n    // Retrieving the color at the initial hit point.\n    // Soft shadows create problems with the flagging feature, so all pixels will be\n    // checked.\n    balHit = 1.; \n    vec3 sceneColor = doColor(ro, rd, lp, t, wf);\n \n    // Toning down the water color and applying camera fog... as opposed to the reflective fog.   \n    if(wf<.999){\n        sceneColor *= fpSh;\n        sceneColor *= wf; // Tone down the reflective water color a bit.\n        sceneColor = mix(sceneColor, fpBg.xyz,  fpBg.w);\n    }\n    \n\t// Debugger to see the region of pixels covered by the sphere that contain the balloon.\n    //if(balHit>0.) sceneColor *= 1.2;\n    \n    // POSTPROCESSING\n    \n    \n    // Subtle vignette.\n    uv = fragCoord/iResolution.xy;\n    sceneColor *= pow(16.*uv.x*uv.y*(1. - uv.x)*(1. - uv.y) , .125);//*.75 + .25;\n    // Colored varation.\n    //sceneColor = mix(pow(min(vec3(1.5, 1, 1)*sceneColor, 1.), vec3(1, 3, 16)), sceneColor, \n                   //pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y) , .125));\n    \n    // A very simple overlay. Two linear waves - rotated at 60 degree angles - to give a dot-matrix vibe.\n    //uv = sin(uv*r2(3.14159/6.)*3.14159*iResolution.y/1.5)*.1 + 1.;\n    //sceneColor *= uv.x*uv.y;\n    \n    // Mild LCD overlay.\n    //vec2 rg = mix(mod(fragCoord, vec2(2))*sceneColor.xy, sceneColor.xy, .65);\n    //sceneColor = vec3(rg, sceneColor.z - mix(sceneColor.x - rg.x, sceneColor.y - rg.y, .65));\n    \n   \n\n    // Clamping the scene color, then presenting to the screen.\n\tfragColor = vec4(sqrt(clamp(sceneColor, 0.0, 1.0)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}