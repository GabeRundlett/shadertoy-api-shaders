{
    "Shader": {
        "info": {
            "date": "1685904219",
            "description": "CC0: Another braided truchet\nTinkering with other kind of braid patterns\n",
            "flags": 0,
            "hasliked": 0,
            "id": "clVSzz",
            "likes": 21,
            "name": "Another braided truchet",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "// CC0: Another braided truchet\n//  Tinkering with other kind of braid patterns\n//  Original inspiration from: https://twitter.com/kamoshika_vrc/status/1665017981875924992?s=20\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nfloat modPolar(inout vec2 p, float repetitions) {\n  float angle = TAU/repetitions;\n  float a = atan(p.y, p.x) + angle/2.;\n  float r = length(p);\n  float c = floor(a/angle);\n  a = mod(a,angle) - angle/2.;\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (repetitions/2.0)) c = abs(c);\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat ref(inout vec2 p, vec2 r) {\n  float d = dot(p, r);\n  p -= r*min(0.0, d)*2.0;\n  return d < 0.0 ? 0.0 : 1.0;\n}\n\nfloat dot2(vec2 p) {\n  return dot(p, p);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat heart(vec2 p) {\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nfloat heart(vec2 p, float sz) {\n  p /= sz;\n    p.x -= -0.51;\n    p = p.yx;\n  return heart(p)*sz;\n}\n\nvec3 braid(vec3 col, vec2 p, vec2 cp, float z, float aa) {\n  const float reps  = 12.0;\n  const float a     = TAU/reps;\n  const float bsz0  = a*0.4;\n  const mat2 rot2   = ROT(a*0.5);\n\n  float cd = length(cp)-0.5;\n  vec2 pp = cp;\n\n  pp *= rot2;\n  float n = modPolar(pp, reps);\n\n  float bw = 0.0175;\n\n  vec2 bp0 = pp;\n  bp0.y = -abs(bp0.y);\n  bp0 *= transpose(rot2);\n  bp0.x -= 0.5;\n  float bd0 = length(bp0) - bsz0*0.5;\n  bd0 = abs(bd0) - bw;\n\n  vec2 bp1 = pp;\n  bp1.x -= 0.5;\n  float bd1 = heart(bp1, bsz0);\n  bd1 = abs(bd1) - bw;\n\n  float ringi   = 4.0*sqrt(max(-bd0, 0.0));\n  float hearti  = 4.0*sqrt(max(-bd1, 0.0));\n  vec3 heartCol = hsv2rgb(vec3(0.95, mix(0.9, .75, hearti), mix(0.33, 2.0, hearti))); \n  vec3 ringCol  = hsv2rgb(vec3(0.1, mix(0.95, 0.5, ringi), mix(0.33, 2.0, ringi)));\n  \n  vec3 col0 = ringCol;\n  vec3 col1 = heartCol;\n  if (-cd > 0.0) {\n    float tmp = bd0;\n    bd0 = bd1;\n    bd1 = tmp;\n    col0 = heartCol;\n    col1 = ringCol;\n  }\n  const float shade = -150.0;\n  col *= 1.0-exp(shade*max(bd0, 0.0));\n  col = mix(col, col0, smoothstep(0.0, -aa, bd0));\n\n  col *= 1.0-exp(shade*max(bd1, 0.0));\n  col = mix(col, col1, smoothstep(0.0, -aa, bd1));\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  const float pr = 20.0;\n  const float z = 1.0;\n  p /= z;\n\n  p += pr*sin(0.125*vec2(1.0, sqrt(0.5))*(100.0+TIME)/pr);\n  float aa = 4.0/(z*RESOLUTION.y);\n\n  vec2 cp = p;\n  vec2 np = round(cp);\n  float nh0 = hash(np+123.4);\n  cp -= np;\n  if (nh0 > 0.5) cp = cp*ROT(PI/2.0);\n\n  vec2 bp = cp;\n  float bn = ref(bp, normalize(vec2(1.0)));\n  bp -= 0.5;\n\n  vec3 col = vec3(0.0);\n  col = braid(col, p, bp, z, aa);\n  col *= smoothstep(1.75, 0.5, length(pp));\n  col = sqrt(col);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}