{
    "Shader": {
        "info": {
            "date": "1726936458",
            "description": "I wanted to show a way I thought of to do FBM only using integers, it was a fun little adventure! Made by Rik Riesmeijer (CCO: Copyright Free).",
            "flags": 0,
            "hasliked": 0,
            "id": "l3Bcz1",
            "likes": 0,
            "name": "SByte FBM - More Connected Paths",
            "published": 3,
            "tags": [
                "procedural",
                "fbm",
                "int",
                "byte",
                "paths"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 48
        },
        "renderpass": [
            {
                "code": "// Some parameters for the demo. Enjoy!\n#define seed     -33                      // For random setup.\n#define balance (0.5 + 0.1 * sin(iTime))  // or a given value\n\n// Integer FBM By Rik Riesmeijer (CC0)\nivec4 hash(ivec4 x) { return x * (x ^ seed) * (x ^ -seed); } // Can be anything you want.\nvec4 ifbm(ivec2 v, vec2 f) { // Here, v is int coord and f is fractional part.\n    const ivec4 i = ivec4(   3,   5, - 8, -72), // Pythagorean sines scaled to be int.\n                j = ivec4(   4,  12,  15,  60), // Same for cosines.\n                k = ivec4( -22, -63,  65,  60), // More for second iteration.\n                l = ivec4(  21, -16,  72,  72), // Same for cosines.\n                a = ivec4(   1,   2,   3,   4); // Logarithmic layer weights.  \n    ivec2 w, q, r; w = q = r = v; w.x++; q.y++; r++;\n    ivec4 x =((hash(i * v.x - j * v.y ^ hash(j * v.x + i * v.y)) >> a) +\n             ((hash(k * v.x - l * v.y ^ hash(l * v.x + k * v.y)) >> a) >> 4)) % 128;\n    ivec4 y =((hash(i * w.x - j * w.y ^ hash(j * w.x + i * w.y)) >> a) +\n             ((hash(k * w.x - l * w.y ^ hash(l * w.x + k * w.y)) >> a) >> 4)) % 128;\n    ivec4 z =((hash(i * q.x - j * q.y ^ hash(j * q.x + i * q.y)) >> a) +\n             ((hash(k * q.x - l * q.y ^ hash(l * q.x + k * q.y)) >> a) >> 4)) % 128;\n    ivec4 s =((hash(i * r.x - j * r.y ^ hash(j * r.x + i * r.y)) >> a) +\n             ((hash(k * r.x - l * r.y ^ hash(l * r.x + k * r.y)) >> a) >> 4)) % 128;\n    \n    // Make into black and white colors.\n    f = smoothstep(0.0, 1.0, f);\n    return vec4(dot(mix(mix(vec4(x), vec4(y), f.x),\n                        mix(vec4(z), vec4(s), f.x), f.y),\n                        vec4(1.0 / 512.0))) + 0.5;\n}\n\n// Demo.\nvoid mainImage(out vec4 c, in vec2 v) {\n    v = v / iResolution.y * 3.0 + 100.0 + 0.5 * vec2(0, iTime);\n    v *= mat2(3, -4, 4, 3);\n    ivec2 iv = ivec2(v);\n    c = ifbm(iv, fract(v));\n    c = smoothstep(0., 0.001, c - balance );\n    c = mix(vec4(0.4, 0.6, 0.4, 1), vec4(0.4, 0.8, 1, 1), c);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}