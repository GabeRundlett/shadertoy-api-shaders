{
    "Shader": {
        "info": {
            "date": "1597525586",
            "description": "Wall flier",
            "flags": 0,
            "hasliked": 0,
            "id": "Wllfzl",
            "likes": 4,
            "name": "Wall flyer z",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\n\n\nfloat GetDist(vec3 p) {\n    float move = -iTime;\n    \n    vec3 pl = p;\n    pl.y += move;\n    pl.xz *= Rot(pl.y);\n    float plane1 = dot(pl, normalize(vec3(0, 0,  1))) + 1.5;\n    float plane2 = dot(pl, normalize(vec3(0, 0,  -1))) + 1.5;\n    float planes = min(plane1, plane2);\n    planes *= 0.1;\n\n\tvec3 gp = p;\n    gp.x += iTime / 2.;\n    gp.y += move * 5.;\n    float gscale = 4.;//1. + 3. * (0.5 + 0.5 * sin(p.y / 1.));\n    float gyroid = dot(sin(gp * gscale), cos(gp.zxy * gscale)) - 1.4 - 0.2 * (S(-5., 0., p.y));\n    gyroid *= 0.1;\n\n    gp = p;\n    gp.x += iTime / 2.;\n    gp.y += move * 5.;\n    gscale = 7.;\n    float gyroid2 = dot(sin(gp * gscale), cos(gp.zxy * gscale)) - 0.5 - 1.2 * (S(-5., 0., p.y));\n    gyroid2 *= 0.1;\n\n    return max(-planes, gyroid+gyroid2);\n}\n\n\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 0, 0);\n    \n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, ro + vec3(0.0001, 1, 0), 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n        //col += n;\n    \t//col += vec3(S(80., 100., d));\n        float dif = dot(n, normalize(ro + vec3(0,0,0.5)))*.5+.5;\n    \tcol += dif;  \n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    col = vec3(S(0., -10., d));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}