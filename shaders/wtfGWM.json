{
    "Shader": {
        "info": {
            "date": "1556476041",
            "description": "Based on [url]https://www.shadertoy.com/view/WtfGWH[/url]\n\nMusic: Ragged dream © 2018 Deni Diezer ([url]https://soundcloud.com/deni-diezer/deni-diezer-ragged-dream[/url])",
            "flags": 96,
            "hasliked": 0,
            "id": "wtfGWM",
            "likes": 8,
            "name": "Walking to the light [Intro]",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "lambert",
                "pathtracing",
                "brdf",
                "montecarlo",
                "blinnphong",
                "pbr",
                "ggx",
                "soundcloud"
            ],
            "usePreview": 0,
            "username": "sschmidtix",
            "viewed": 993
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------\n// Things to try (in Buffer A):\n//\n// * Play with NUM_SAMPLES and NUM_DEPTH to improve framerate\n// ---------------------------------------------------------------------\n\n// Post-processing parameters\n#define COLOR_GRADING 0.8, 0.85, 0.9\n#define VIGNETTE 0.2\n\n// Shader entry point\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(0.);\n    \n    if (iFrame > 0)\n        // Read texture in buffer A\n        col = texture(iChannel0, uv).rgb;\n    \n    // Inverse gamma function\n    col = pow(col, vec3(1. / 2.2));\n    \n    // Post-processing: color grading\n    col = pow(col, vec3(COLOR_GRADING));\n    // Post-processing: vignette\n    col *= 0.5 + 0.5 * pow(16.0 * uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y), VIGNETTE);\n    \n    // Return fragment color\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Copyright © 2019 Stefan Schmidt\n//\n// Small intro with music\n//\n// Based on https://www.shadertoy.com/view/WtfGWH\n// Music: Ragged dream © 2018 Deni Diezer\n//        (https://soundcloud.com/deni-diezer/deni-diezer-ragged-dream)\n// ---------------------------------------------------------------------\n\n// Parameters\n#define NUM_SAMPLES     10\n#define MAX_DEPTH       10\n\n#define SHADOW_EPSILON  0.5\n\n#define SSAA\n// #define FPS_BAR\n#define IOR             1.3\n\n#define M_PI            radians(180.)\n\n// Material definitions\n#define MAT_LOMMEL      0\n#define MAT_SPECULAR    1\n#define MAT_REFRACTION  2\n\nstruct Material {\n    int type;\n    vec3 albedo;     // Albedo color\n    vec3 emissive;   // Emissive color\n};\n\n#define MAT_WARMLIGHT 0\n#define MAT_MOONDUST  1\n#define MAT_METAL     2\n#define MAT_WATER     3\n#define MAT_NUM       4\n\nMaterial materials[MAT_NUM];\n\nvoid initMaterials() {\n    materials[MAT_WARMLIGHT] = Material(MAT_LOMMEL, vec3(0.05), 2. * vec3(1.0, 0.65, 0.4));\n    materials[MAT_MOONDUST]  = Material(MAT_LOMMEL, vec3(0.75), vec3(0.0));\n    materials[MAT_METAL]     = Material(MAT_SPECULAR, .8 * vec3(0.65, 0.75, 0.72), vec3(0.0));\n    materials[MAT_WATER]     = Material(MAT_REFRACTION, vec3(0.95, 0.96, 0.98), vec3(0.0));\n}\n\n// Scene\nstruct Sphere {\n    float radius;\n    vec3 center;\n    \n    Material material;\n};\n\n#define NUM_SPHERES 8\nSphere scene[NUM_SPHERES];\n\nvoid initScene() {\n    initMaterials();    \n    \n    // Front and back walls\n    scene[0] = Sphere(1e5, vec3(50.0, 40.8, -1e5), materials[MAT_WARMLIGHT]);\n    scene[1] = Sphere(1e5, vec3(50.0, 40.8, 1e5 + 170.0), materials[MAT_METAL]);\n    // Left and right walls\n    scene[2] = Sphere(1e5, vec3(-1e5 + 1.0, 40.8, 81.6), materials[MAT_METAL]);\n    scene[3] = Sphere(1e5, vec3(1e5 + 99.0, 40.8, 81.6), materials[MAT_METAL]);\n    // Ceiling and floor\n    scene[4] = Sphere(1e5, vec3(50.0, 1e5 + 81.6, 81.6), materials[MAT_MOONDUST]);\n    scene[5] = Sphere(1e5, vec3(50.0, -1e5, 81.6), materials[MAT_MOONDUST]);\n    // Objects\n    scene[6] = Sphere(16.5, vec3(27.0, 17.0, 47.0), materials[MAT_METAL]);\n    scene[7] = Sphere(16.5, vec3(73.0, 17.0, 78.0), materials[MAT_WATER]);\n}\n\n// Ray: p(t) = origin + t * direction\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\n\n// Ray casting\nbool castRayToSphere(Ray ray, Sphere sphere, out float t) {\n    vec3 oc = ray.origin - sphere.center;\n    float qb = dot(ray.direction, oc);\n    \n    float det = qb * qb - dot(oc, oc) + sphere.radius * sphere.radius;\n    if (det < 0.)\n        return false;\n    \n    float sqrt_det = sqrt(det);\n    \n    float t1 = -qb - sqrt_det;\n    float t2 = -qb + sqrt_det;\n    \n    if (t1 > SHADOW_EPSILON) {\n        if (t2 > SHADOW_EPSILON)\n            t = min(t1, t2);\n        else\n            t = t1;\n        return true;\n    } else if (t2 > SHADOW_EPSILON) {\n        t = t2;\n        return true;\n    } else\n        return false;\n}\n\nbool castRay(Ray ray, out Sphere result, out float t) {\n    bool intersection = false;\n    t = 1e5;\n    \n    for (int i = 0; i < NUM_SPHERES; ++i) {\n        Sphere sphere = scene[i];\n        float t_;\n        \n        if (castRayToSphere(ray, sphere, t_) && (t_ < t)) {\n            intersection = true;\n            t = t_;\n            result = sphere;\n        }\n    }\n    \n    return intersection;\n}\n\n\n// Random number generator\nvec3 seed;\n\nvoid initRandom(vec2 fragCoord) {\n    seed = vec3(fragCoord, iFrame);\n}\n\nfloat getRandom() {\n\tseed = fract(sin(cross(seed, vec3(12.9898, 78.233, 43.1931))) * 43758.5453);\n    \n    return seed.x;\n}\n\n\n// BRDF math\nvec3 getHemisphereUniformSample(vec3 n) {\n    float cosTheta = getRandom();\n    float sinTheta = sqrt(1. - cosTheta * cosTheta);\n    \n    float phi = 2. * M_PI * getRandom();\n    \n    // Spherical to cartesian\n    vec3 t = normalize(cross(n.yzx, n));\n    vec3 b = cross(n, t);\n    \n\treturn (t * cos(phi) + b * sin(phi)) * sinTheta + n * cosTheta;\n}\n\n\n// Render\nvec3 render(Ray ray) {\n    vec3 acc = vec3(0.);    // Cumulative radiance\n    vec3 att = vec3(1.);    // Light attenuation\n    \n    for (int depth = 0; depth < MAX_DEPTH; depth++) {\n        Sphere sphere;\n        float t;\n        \n        if (!castRay(ray, sphere, t))\n            break;\n        \n        // Calculate point of impact and normal\n        vec3 p = ray.origin + t * ray.direction;\n        vec3 normal = normalize(p - sphere.center);\n        \n        // Orient normal towards ray direction\n        float cosThetaI = dot(ray.direction, normal);\n        \n        vec3 facingNormal = (cosThetaI < 0.) ? normal : -normal;\n        \n        // Emissive radiance\n        Material material = sphere.material;\n        acc += att * material.emissive;\n        \n        // Lommel material\n        if (material.type == MAT_LOMMEL) {\n            vec3 reflected = getHemisphereUniformSample(facingNormal);\n            \n            att *= material.albedo;\n            \n            ray = Ray(p, reflected);\n        }\n        // Specular material\n        else if (material.type == MAT_SPECULAR) {\n            vec3 reflected = reflect(ray.direction, facingNormal);\n            \n            att *= material.albedo;\n            \n            ray = Ray(p, reflected);\n        }\n        // Refraction material\n        else if (material.type == MAT_REFRACTION) {\n            float eta = (cosThetaI < 0.) ? (1. / IOR) : IOR;\n            \n            vec3 refracted = refract(ray.direction, facingNormal, eta);\n            \n            if (all(equal(refracted, vec3(0.)))) {\n                // Total internal reflection\n                vec3 reflected = reflect(ray.direction, facingNormal);\n                \n\t            ray = Ray(p, reflected);\n            } else {\n                // Fresnel F0\n                float F0_ = (IOR - 1.) / (1. + IOR);\n                float F0 = F0_ * F0_;\n                \n                // Fresnel with Schlick approximation\n                float cosTheta = (cosThetaI < 0.) ? -cosThetaI : dot(refracted, normal);\n                float F = F0 + (1.0 - F0) * pow(1. - cosTheta, 5.);\n                \n                if (getRandom() < F) {\n                    vec3 reflected = reflect(ray.direction, facingNormal);\n                    \n                    ray = Ray(p, reflected);\n                } else {\n                    att *= material.albedo;\n                    \n                    ray = Ray(p, refracted);\n                }\n            }\n        }\n    }\n    \n    return acc;\n}\n\n// Animation\n#define FADE_START 204.0\n#define FADE_END 218.5\n#define FADE_LENGTH (FADE_END - FADE_START)\n\n#define SAFE_DISTANCE .7\n#define SAFE_FORCE 0.0003\n\n#define AVG_ALPHA 0.2\n\n#define LOOKAT_NUM 5\n\nstruct LookAt {\n    float t;\n    float z;\n};\n\nLookAt lookAt[LOOKAT_NUM];\n\nvoid initLookAt() {\n    lookAt[0] = LookAt(0.0, 80.);\n    lookAt[1] = LookAt(64., 110.);\n    lookAt[2] = LookAt(101.5, 230.);\n    lookAt[3] = LookAt(114.0, 80.);\n    lookAt[4] = LookAt(240.0, -40.);\n}\n\n// Shader entry point\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    initRandom(fragCoord);\n    initScene();\n    initLookAt();\n    \n    float time = iChannelTime[1];\n    float timeDelta = 60. * iTimeDelta;\n    \n    // Music\n    float kickFrequency = 1. / 512.; // ~45 Hz\n    float kickAmplitude = texture(iChannel1, vec2(kickFrequency * 512. / iResolution.x, .25)).r;\n    float kickEnergy = (5. + 20. * log(kickAmplitude)) / 5.;\n    kickEnergy = clamp(kickEnergy, 0.0, 1.0);\n    \n    // Light\n    float fadeEnergy = pow(clamp(1. - (time - FADE_START) / FADE_LENGTH, 0.0, 1.0), 2.2);\n    \n    scene[0].material.emissive = vec3(1.0, 0.65, 0.4) * (2. * fadeEnergy + 1.3 * kickEnergy);\n    \n    // Camera\n    vec4 viewData = texture(iChannel0, vec2(0.5) / iResolution.xy);\n    \n    vec2 viewPos = viewData.xy;\n    vec2 viewVelocity = viewData.zw;\n    \n    if ((iFrame == 0) || (time > FADE_END)) {\n        viewPos = vec2(0.);\n        viewVelocity = vec2(0);\n    }\n    \n    vec2 viewAcceleration = vec2(0);\n    viewAcceleration += 0.0001 * (vec2(getRandom(), getRandom()) - vec2(0.5));\n    \n    if (viewPos.x > SAFE_DISTANCE)\n        viewAcceleration.x -= SAFE_FORCE * (viewPos.x - SAFE_DISTANCE);\n    if (viewPos.x < -SAFE_DISTANCE)\n        viewAcceleration.x -= SAFE_FORCE * (viewPos.x - -SAFE_DISTANCE);\n    if (viewPos.y > SAFE_DISTANCE)\n        viewAcceleration.y -= SAFE_FORCE * (viewPos.y - SAFE_DISTANCE);\n    if (viewPos.y < -SAFE_DISTANCE)\n        viewAcceleration.y -= SAFE_FORCE * (viewPos.y - -SAFE_DISTANCE);\n    \n    viewVelocity += viewAcceleration * timeDelta;\n    viewVelocity *= 0.0018 / length(viewVelocity);\n    \n    viewPos += viewVelocity * timeDelta;\n    \n    float camZ = 169. - time * (100. / FADE_START);\n    vec3 cameraPos = vec3(viewPos * vec2(48., 40.) + vec2(50., 40.8), camZ);\n    \n    float lookAtZ = 0.0;\n    for (int i = 0; i < LOOKAT_NUM; i++)\n        if (time >= lookAt[i].t)\n            lookAtZ = lookAt[i].z + (time - lookAt[i].t) * (lookAt[i + 1].z - lookAt[i].z) /\n            \t(lookAt[i + 1].t - lookAt[i].t);\n    \n    vec3 cz = normalize(vec3(50., 40., lookAtZ) - cameraPos);\n    vec3 cy = normalize(cross(vec3(1., 0., 0.), cz));\n    vec3 cx = cross(cz, cy);\n    \n\tmat3 cameraTransform = mat3(cx, cy, cz);\n    \n    // Render frame\n    vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i < NUM_SAMPLES; ++i) {\n#ifdef SSAA\n        vec2 ssaa = vec2(getRandom(), getRandom());\n#else\n        vec2 ssaa = vec2(.5);\n#endif\n        \n        vec2 screenCoord = vec2(2. / iResolution.y) * (fragCoord + ssaa) - \n            vec2(iResolution.x / iResolution.y, 1.);\n        vec3 rayDirection = cameraTransform * normalize(vec3(.53135 * screenCoord, 1.));\n        \n        Ray ray = Ray(cameraPos, rayDirection);\n        col += render(ray);\n    }\n    col /= vec3(NUM_SAMPLES);\n    \n    // Average with last frames\n    float alpha = 1. / (1. + ((1. - AVG_ALPHA) / AVG_ALPHA) / timeDelta);\n    col = mix(texture(iChannel0, fragCoord / iResolution.xy).rgb, col, alpha);\n    \n    // Store camera variables\n    if (all(equal(floor(fragCoord.xy), vec2(0.))))\n        fragColor = vec4(viewPos.x, viewPos.y, viewVelocity.x, viewVelocity.y);\n    else\n        fragColor = vec4(col, 1.0);\n    \n    // FPS display\n#ifdef FPS_BAR\n    if ((uv.y < -0.98) && (uv.y > -0.995)) {\n        float p = 2. / timeDelta - 1.;\n        fragColor = vec4(float(uv.x < p));\n    }\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 18543,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/sschmidtix/ragged-dream-cut-2018-deni-diezer"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}