{
    "Shader": {
        "info": {
            "date": "1588421175",
            "description": "License CC0: Fortress Harkonnen\nInspired by: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\n",
            "flags": 64,
            "hasliked": 0,
            "id": "tslBW7",
            "likes": 37,
            "name": "Fortress Harkonnen",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1158
        },
        "renderpass": [
            {
                "code": "// License CC0: Fortress Harkonnen\n// Inspired by: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\n\n// SABS from ollj\n#define LESS(a,b,c) mix(a,b,step(0.,c))\n#define SABS(x,k)   LESS((.5/k)*x*x+k*.5,abs(x),abs(x)-k)\n\n#define PI      3.141592654\n#define TAU     (2.0*3.141592654)\n#define TIME    iTime\n#define PERIOD  55.0\n#define PERIODS 5.0\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat plane(vec2 p, vec2 n, float m) {\n  return dot(p, n) + m;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat holey(float d, float k) {\n  return abs(d) - k;\n}\n\nfloat tanh2(float x) {\n  // Hack around precision problem\n  if (abs(x) > 50.0) {\n    return sign(x);\n  } else {\n    return tanh(x);\n  }\n}\n\nfloat nfield(vec2 p, vec2 c) {\n  vec2 u = p;\n\n  float a = 0.0;\n  float s = 1.0;\n\n  \n  for (int i = 0; i < 25; ++i) {\n    float m = dot(u,u);\n    u = SABS(u, 0.0125)/m + c;\n    u *= pow(s, 0.65);\n    a += pow(s, 1.0)*m;\n    s *= 0.75;\n  }\n  \n  return -tanh2(0.125*a);\n}\n\nvec3 normal(vec2 p, vec2 c) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(2.0/iResolution.y, 0);\n  \n  vec3 n;\n  n.x = nfield(p + e.xy, c) - nfield(p - e.xy, c);\n  n.y = 2.0*e.x;\n  n.z = nfield(p + e.yx, c) - nfield(p - e.yx, c);\n  \n  return normalize(n);\n}\n\nvec3 field(vec2 p, vec2 c) {\n  vec2 u = p;\n\n  float a = 0.0;\n  float s = 1.0;\n\n  vec2 tc = vec2(0.5, 0.3);\n  rot(tc, TAU*TIME/PERIOD);\n  vec2 tpn = normalize(vec2(1.0));\n  float tpm = 0.0 + 1.4*tanh(length(p));\n  \n  float tcd = 1E10;\n  float tcp = 1E10;\n  \n  for (int i = 0; i < 18; ++i) {\n    float m = dot(u,u);\n    u = SABS(u, 0.0125)/m + c;\n    tcd = min(tcd, holey(circle(u-tc, 0.05), -0.1));\n    tcp = min(tcp, holey(plane(u, tpn, tpm), -0.1));\n    u *= pow(s, 0.5);\n    a += pow(s, 1.0)*m;\n    s *= 0.75;\n  }\n  \n  return vec3(tanh(0.125*a), tanh(tcd), tanh(tcp));\n\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col=pow(clamp(col,0.0,1.0),vec3(.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= iResolution.x/iResolution.y;\n    \n  float currentPeriod = mod(floor(TIME/PERIOD), PERIODS);\n  float timeInPeriod = mod(TIME, PERIOD);\n  \n  p *= 0.25 + (0.005*timeInPeriod) + pow(1.35, currentPeriod);\n  vec2 c = vec2(-0.5, -0.35);\n   \n  vec3 gp = vec3(p.x, 1.0*tanh(1.0 - (length(p))), p.y);\n  vec3 lp1 = vec3(-1.0, 1.5, 1.0);\n  vec3 ld1 = normalize(lp1 - gp);\n  vec3 lp2 = vec3(1.0, 1.5, 1.0);\n  vec3 ld2 = normalize(lp2 - gp);\n  vec3 f = field(p, c);\n\n  vec3 n = normal(p, c);\n\n  float diff1 = max(dot(ld1, n), 0.0);\n  float diff2 = max(dot(ld2, n), 0.0);\n  \n  vec3 col = vec3(0.0);\n  \n  const vec3 dcol1 = vec3(0.3, 0.5, 0.7).xyz;\n  const vec3 dcol2 = 0.5*vec3(0.7, 0.5, 0.3).xyz;\n  const vec3 scol1 = 0.5*vec3(1.0);\n  const vec3 scol2 = 0.5*0.5*vec3(1.0);\n  \n  col += diff1*dcol1;\n  col += diff2*dcol2;\n  col += scol1*pow(diff1, 10.0);\n  col += scol2*pow(diff2, 3.0);\n  col -= vec3(tanh(f.y-0.1));\n  col += 0.5*(diff1+diff2)*(1.25*pow(vec3(f.z), 5.0*vec3(1.0, 4.0, 5.0)));\n \n  col = postProcess(col, q);\n \n  const float fade = 2.0;\n  float fadeIn  = smoothstep(0.0, fade, timeInPeriod);\n  float fadeOut = 1.0-smoothstep(PERIOD - fade, PERIOD, timeInPeriod);\n  col *= fadeIn*fadeOut;\n \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22430,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/gmm/ugress-win-without-triumph"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}