{
    "Shader": {
        "info": {
            "date": "1691441691",
            "description": "A simple trans flag shader first done at MondayNightBytes Shader Jam. This is the shadertoy version without FFT and a bit different blur.",
            "flags": 32,
            "hasliked": 0,
            "id": "ctBcR1",
            "likes": 1,
            "name": "Trans pride",
            "published": 3,
            "tags": [
                "pride",
                "transgender",
                "shaderjam"
            ],
            "usePreview": 0,
            "username": "eimink",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float E = 0.001;\nconst int STEPS = 64;\nconst float FAR = 40.0;\n\nfloat fft = 0.0;\n\nstruct MarchResult\n{\n  float id;\n  float t;\n  vec3 p;\n  vec3 n;\n  float d;\n};\n\nfloat box(vec3 position, vec3 dimensions){\n  vec3 b = abs(position)-dimensions;\n  return length(max(b, 0.0)) + min(max(b.x, max(b.y, b.z)), 0.0); \n}\n\nvec2 opU(vec2 d1, vec2 d2)\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nvec2 scene(vec3 p){\n  vec3 pp = abs(p);\n  vec2 res = vec2(1.,0.);\n  \n  for (float i = 0.; i < 35.0; ++i)\n  {\n    float a = box(p+vec3(0.,0.+sin(iTime-i),10.0-i),vec3(1.,1.,1.0));\n    float b = box(p+vec3(0.,2.+sin(iTime-i),10.0-i),vec3(1.,1.,1.0));\n    float c = box(p+vec3(0.,4.+sin(iTime-i),10.0-i),vec3(1.,1.,1.0));\n    float d = box(p+vec3(0.,6.+sin(iTime-i),10.0-i),vec3(1.,1.,1.0));\n    float e = box(p+vec3(0.,8.+sin(iTime-i),10.0-i),vec3(1.,1.,1.0));\n    res = opU(res,opU(opU(vec2(d,2.0),vec2(e,1.0)),opU(vec2(c,3.0),opU(vec2(a,1.0),vec2(b,2.0)))));\n  }    \n  \n  return res;\n  \n}\n\nvec3 calcNormal(vec3 pos) \n{\n    vec2 e = vec2(0.00001, 0.0);\n    return normalize( vec3(scene(pos+e.xyy).x-scene(pos-e.xyy).x,\n                           scene(pos+e.yxy).x-scene(pos-e.yxy).x,\n                           scene(pos+e.yyx).x-scene(pos-e.yyx).x ) );\n}\n\nMarchResult march(vec3 ro, vec3 rd)\n{\n  float t = E;\n  float id = 0.0;\n  vec3 position = ro;\n  for (int i = 0; i < STEPS;++i){\n    vec2 d = scene(position);\n    t +=d.x;\n    id = d.y;\n    position = ro+rd*t;\n    if (d.x < E || t > FAR) break;\n  }\n  MarchResult res;\n  res.t = t;\n  res.id = id;\n  res.p = position;\n  res.n = calcNormal(position);\n  return res;\n}\n\nvec3 colorize(MarchResult m, vec3 ld)\n{\n  float t = m.d;\n  vec3 p = m.p;\n  vec3 col = vec3(0.0);\n  if (m.id == 2.0)\n  {\n      col = vec3(1.0,.2,.9) + clamp(dot(m.n,ld),0.0,1.0);\n  }\n  else if (m.id == 3.0)\n  {\n    col = vec3(.8) + clamp(dot(m.n,ld),0.0,1.0);\n  }\n  else if (m.id == 1.0)\n  {\n    col = vec3(.2,.5,1.0) + clamp(dot(m.n,ld),0.0,1.0);\n  }\n  else col = vec3(0);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  vec2 uvv = -1.0 + 2.0*uv;\n  uvv.x *= iResolution.x / iResolution.y;\n    \n  vec3 rayOrigin = vec3(sin(iTime)*10.,sin(iTime)*2.-5.0,cos(iTime)*10.0-10.0);\n  vec3 lookAt = vec3(0.0, -5.0, 0.0);\n  \n  vec3 z = normalize(lookAt - rayOrigin);\n  vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n  vec3 y = normalize(cross(x, z));\n  \n  vec3 rayDirection = normalize(mat3(x, y, z) * vec3(uvv, radians(60.00)));\n  \n  vec3 lightDirection = -rayDirection;\n  \n  vec3 col = vec3(0.0);\n  \n  MarchResult t = march(rayOrigin, rayDirection);\n  if ( t.t < FAR){\n    col = colorize(t,lightDirection);\n  }\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 bufB = texelFetch(iChannel1,ivec2(fragCoord),0);\n    vec4 bufA = texelFetch(iChannel0,ivec2(fragCoord),0);\n    vec3 col;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n  fragColor = mix(bufB,bufA,0.05);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}