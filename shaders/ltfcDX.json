{
    "Shader": {
        "info": {
            "date": "1530810650",
            "description": "Emergence of turing patterns in the Brusselator. Press SHIFT to see the other concentration.\n\nRunge-kutta integrator of the finite differences Brusselator.\n",
            "flags": 48,
            "hasliked": 0,
            "id": "ltfcDX",
            "likes": 4,
            "name": "Brusselator",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction",
                "turingpatterns"
            ],
            "usePreview": 0,
            "username": "dazuma",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 components = texture(iChannel0, uv).xyz;\n    float val;\n    \n    float seeModel = texelFetch( iChannel1, ivec2(16,0), 0 ).x; // SHIFT KEY\n    \n    if (seeModel < 1.0) {val = components.x/2.;}\n    else {val = components.y/2.;}\n    fragColor = vec4(val, 1.-val, 1.-val, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n    \n    vec2 k1 = sources(uv, d2x, d2y);\n    \n    fragColor = vec4(k1,0,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy + texture(iChannel1, xy).xy * dt/2.;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy + texture(iChannel1, xy + vec2(0., delta.y)).xy * dt/2.;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy + texture(iChannel1, xy + vec2(delta.x, 0.)).xy * dt/2.;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy + texture(iChannel1, xy + vec2(0., -delta.y)).xy * dt/2.;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy + texture(iChannel1, xy + vec2(-delta.x, 0.)).xy * dt/2.;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n\n    vec2 k2 = sources(uv, d2x, d2y);\n     \n    fragColor = vec4(k2,0,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy + texture(iChannel1, xy).xy * dt/2.;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy + texture(iChannel1, xy + vec2(0., delta.y)).xy * dt/2.;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy + texture(iChannel1, xy + vec2(delta.x, 0.)).xy * dt/2.;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy + texture(iChannel1, xy + vec2(0., -delta.y)).xy * dt/2.;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy + texture(iChannel1, xy + vec2(-delta.x, 0.)).xy * dt/2.;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n\n    vec2 k3 = sources(uv, d2x, d2y);\n     \n    fragColor = vec4(k3,0,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float hash(float seed)\n{\n    return fract(sin(seed) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 delta = 1. / iResolution.xy;\n    vec2 uv =    texture(iChannel0, xy).xy + texture(iChannel1, xy).xy * dt;\n    vec2 uv_n =  texture(iChannel0, xy + vec2(0., delta.y)).xy + texture(iChannel1, xy + vec2(0., delta.y)).xy * dt;\n    vec2 uv_e =  texture(iChannel0, xy + vec2(delta.x, 0.)).xy + texture(iChannel1, xy + vec2(delta.x, 0.)).xy * dt;\n    vec2 uv_s =  texture(iChannel0, xy + vec2(0., -delta.y)).xy + texture(iChannel1, xy + vec2(0., -delta.y)).xy * dt;\n    vec2 uv_w =  texture(iChannel0, xy + vec2(-delta.x, 0.)).xy + texture(iChannel1, xy + vec2(-delta.x, 0.)).xy * dt;\n    vec2 d2x = dif2x(uv, uv_e, uv_w);\n    vec2 d2y = dif2y(uv, uv_n, uv_s);\n\n    vec2 k4 = sources(uv, d2x, d2y);\n    \n    uv = texture(iChannel0, xy).xy;\n    vec2 k1 = texture(iChannel3, xy).xy;\n    vec2 k2 = texture(iChannel2, xy).xy;\n    vec2 k3 = texture(iChannel1, xy).xy;\n    \n    uv = uv + dt/6.*(k1 + 2.*k2 + 2.*k3 + k4);\n    \n    if(iFrame<5) {\n    \tfragColor = vec4(sin(xy.x),hash(hash(xy.x)*hash(xy.y+29.)),0,1);\n    } else {\n        fragColor = vec4(uv.x,uv.y,0,1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float dr = 0.01;\nconst float idr2 = 1./(dr*dr);\nconst float A = 1.;\nconst float B = 1.9;\nconst float g = 50000.;\nconst float d = 20.;\nconst float dt = 0.000001;\n\nvec2 dif2x(vec2 uv, vec2 uv_e, vec2 uv_w){\n    vec2 d2x = idr2*(uv_e - 2.*uv + uv_w);\n    return d2x;\n}\n\nvec2 dif2y(vec2 uv, vec2 uv_n, vec2 uv_s){\n    vec2 d2x = idr2*(uv_n - 2.*uv + uv_s);\n    return d2x;\n}\n\nvec2 sources(vec2 uv, vec2 d2x, vec2 d2y)\n{\n    vec2 k;\n    k.x = d2x.x + d2y.x + g*(A - B*uv.x + uv.x*uv.x*uv.y - uv.x);\n    k.y = d*(d2x.y + d2y.y) + g*(B*uv.x - uv.x*uv.x*uv.y);\n    return k;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}