{
    "Shader": {
        "info": {
            "date": "1536007944",
            "description": "An algorithm for sorting 3 numbers.\n\nI saw iq try his hand at an algorithm for sorting 3 floats ( https://twitter.com/iquilezles/status/559477513139675136 ) and wondered if I could do better. I hope I succeeded. UPDATE: Nope. I failed. ",
            "flags": 0,
            "hasliked": 0,
            "id": "XtKcWh",
            "likes": 1,
            "name": "Sort3",
            "published": 3,
            "tags": [
                "sort",
                "median"
            ],
            "usePreview": 0,
            "username": "CeeJayDK",
            "viewed": 877
        },
        "renderpass": [
            {
                "code": "//I'm doing swaps using swizzles to network sort 3 values. \n//You can design your own network sorts using http://pages.ripco.net/~jgamble/nw.html\n\nvec3 sort3( vec3 c ) //this is the sorting algoritm this Shadertoy is about.\n{\n    //1st cycle\n\tc.rg = (c.r < c.g) ? c.rg : c.gr; //2 op\n\n\t//2st cycle\n\tc.rb = (c.r < c.b) ? c.rb : c.br; //2 op\n\n\t//3rd cycle\n\tc.gb = (c.g < c.b) ? c.gb : c.bg; //2 op\n    \n    return c;\n}\n\n\nvec3 noise( vec3 p ) //noise maker\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\nvoid mainImage( out vec4 c, in vec2 fc )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fc/iResolution.xy;\n    \n    \n    c.rgb = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)); //Time varying pixel color\n\n\tc.rgb = noise(uv.x * uv.y + c.rgb); //Make some noise. Try the median with this - it makes the noise more pleasant.\n    \n    //c.rgb = vec3(0.4,0.8,0.2); //Enter your own constant numbers to check it's working\n    \n\tc.rgb = sort3(c.rgb);\t//lets get this sorted.\n    \t\t\t\t\t\t//Will make the image look blue since that component now stores the max.\n    \n    //c.rgb = c.rrr; //only the red   (the minimum if you used sort)\n    c.rgb = c.ggg; //only the green (the  median if you used sort)\n    //c.rgb = c.bbb; //only the blue  (the maximum if you used sort)\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}