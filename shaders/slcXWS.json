{
    "Shader": {
        "info": {
            "date": "1639672959",
            "description": "The place of the core",
            "flags": 0,
            "hasliked": 0,
            "id": "slcXWS",
            "likes": 9,
            "name": "The place of the core",
            "published": 3,
            "tags": [
                "core"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 64\n#define MAX_DIST 64.\n#define SURF_DIST .0001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define ZERO (min(iFrame,0))\n\n\n// by Dave_Hoskins\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat simplePyramid(vec3 p, float h, vec3 s){\n    vec3 prevP = p;\n    p.y*=h;\n    float d = B3D(p,s);\n    float a = radians(45.);\n    p.xz = abs(p.xz);\n    d = max(dot(p.xy,vec2(cos(a),sin(a))),d);\n    d = max(dot(p.yz,vec2(cos(a),sin(a))),d);\n    return d;\n}\n\nfloat polygonObject(vec3 p){\n    vec3 prevP = p;\n    \n    float d = B3D(p,vec3(0.2,0.2,0.2));\n    float a = radians(45.0);\n    p = abs(p);\n    p-=vec3(-0.1,0.5,0.0);\n    d = max(dot(p,vec3(cos(a),sin(a),cos(a))),d);\n    \n    p = prevP;\n    p.y=abs(p.y);\n    p.xz*=Rot(radians(45.0));\n    p.y-=0.56;\n    float d2 = simplePyramid(p,0.39,vec3(0.14));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=0.56;\n    p.xy*=Rot(radians(90.0));\n    p.xz*=Rot(radians(45.0));\n    d2 = simplePyramid(p,0.39,vec3(0.14));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z = abs(p.z);\n    p.z-=0.56;\n    p.yz*=Rot(radians(-90.0));\n    p.xz*=Rot(radians(45.0));\n    d2 = simplePyramid(p,0.39,vec3(0.14));\n    d = min(d,d2*0.6);    \n    return d;\n}\n\nfloat particleObject(vec3 p, float h, vec3 s){\n    p.y*=h;\n    p.y = abs(p.y)-0.03;\n    float d = simplePyramid(p,1.0,s);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.xy*=Rot(radians(20.*iTime*3.0));\n    p.yz*=Rot(radians(30.*iTime*2.0));\n    float d = polygonObject(p);\n  \n    p = prevP;\n    p.xy*=Rot(radians(-30.*iTime*1.5));\n    p.yz*=Rot(radians(-20.*iTime*2.0));\n    p = abs(p)-0.4;\n    float d2 = particleObject(p,0.9,vec3(0.07));\n    d = min(d,d2);\n    p = abs(p)-0.4;\n    d2 = particleObject(p,0.9,vec3(0.07));\n    d = min(d,d2);\n    \n\n    p = prevP;\n    p.y-=iTime*0.5;\n    p = mod(p,0.8)-0.4;\n    p = abs(p)-0.4;\n    float d3 = B3D(p,vec3(0.1,0.3,0.5));\n    p = abs(p)-0.4;\n    d3 = min(B3D(p,vec3(0.7,0.1,0.3)),d3);\n    p = abs(p)-0.4;\n    d3 = min(B3D(p,vec3(0.3,0.1,0.6)),d3);\n    \n    p = prevP;\n    d2 = -length(p) + 3.8;\n    d2 = max(d3,d2);\n    d = min(d,d2);\n    \n    vec2 model = vec2(d,0);\n\n    return model;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,2,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 reflectMaterial(vec3 p, vec3 rd, vec3 n) {\n    vec3 r = reflect(p+rd*1.6,n);\n    vec3 col = r;\n    \n    return col;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n\n    return diffuseMaterial(n,rd,p,reflectMaterial(n,rd,p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy -.3;\n    \n    float t = iTime*2.0;\n    t += 0.1*hash12(uv);\n    \n    vec3 ro = vec3(0, 0, 1.0);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-30.0));\n    if(iMouse.z>0.){\n        ro.yz *= Rot(-m.y*3.14+1.);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.xz *= Rot(radians(-15.0+t*20.0));\n    }\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 0.5);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        col *= exp( -0.038*d.x*d.x*d.x );//fog\n    } else {\n        col = vec3(0.0);\n    }\n    \n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}