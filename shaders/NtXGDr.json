{
    "Shader": {
        "info": {
            "date": "1621858646",
            "description": "My practice of using noises. ",
            "flags": 0,
            "hasliked": 0,
            "id": "NtXGDr",
            "likes": 3,
            "name": "Bunch of fish in noisy water",
            "published": 3,
            "tags": [
                "noise",
                "gradient",
                "gradientnoise"
            ],
            "usePreview": 0,
            "username": "ahmaderfani12",
            "viewed": 740
        },
        "renderpass": [
            {
                "code": "vec2 random2d(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\nfloat random (in float x) {\n    return fract(sin(x)*1e4);\n}\n// Gradient Noise by Inigo Quilez\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2d(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2d(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2d(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2d(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 scale2d(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat circle(vec2 st,float r,vec2 pos,vec2 scale){\n    st -=pos;\n    st = scale2d(scale) * st;\n    st +=pos;\n    \n    float dist = distance(st,pos);\n    dist = smoothstep(r,r+0.003,dist);\n    return dist;\n}\n\nfloat square(vec2 st, float size, vec2 pos,vec2 scale, float angle){\n    st +=pos;\n    st = scale2d(scale) * st;\n    st=rotate2d(angle) * st;\n   \n    float b = smoothstep((size),(size+0.003),abs(st.x))+  smoothstep((size),(size+0.003),abs(st.y));\n    return (clamp(b,0.0,1.));\n}\n\nvec3 fish(vec2 st,float size,vec2 pos, vec3 colorTint){\n\t\n    float time = iTime/2. * random(pos.x)*2.;\n   \t\n    float y=abs(sin(time*1.57)) * (floor(sin(time*3.14))+1.)*1.2 -0.1;\n  \t\n    pos.y=y;\n    \n   float col = circle(st,size,pos,vec2(0.910,0.480)) * ( square(st,size/1.2,1. -pos + vec2(-1.,-0.98),vec2(0.850,0.40),0.78));    \n    col = 1. - col;\n    return col * colorTint;\n}\n\nvec3 drawFishes(vec2 st){\n    vec3 fishes = vec3(0.0);\n    for(int i = 0; i <= 200; i++) { \n        fishes +=vec3(fish(st,0.005,vec2(random(float(i))*2.,0.0),vec3(0.660,0.010,0.073)));   \n    }\n   return fishes;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  //Adjust uv\n    vec2 st = fragCoord/iResolution.xy;\n    st.x *=  iResolution.x/iResolution.y;\n    \n    //St scaler\n    float gridMultiplier=10.;\n    \n    //Fish and water colors\n    vec3 color = vec3(0.0);\n\tvec3 colorA=vec3(0.017,0.037,0.975);\n    vec3 colorB=vec3(0.379,1.000,0.962);\n    \n    //Set uvs(st)\n    st *=gridMultiplier;\n     vec2 fishSt= st+(noise(st+(iTime*1.0)))/3.;\n\tst += noise(st+vec2(0.0,-iTime*2.2));  \n    \n    //Get noise for water\n    float waterWave = noise(st)*0.5 + 0.5;\n    \n    color =  mix(colorA, colorB, waterWave);\n    color  = color +  drawFishes(fishSt/gridMultiplier) ;\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}