{
    "Shader": {
        "info": {
            "date": "1560753188",
            "description": "Realistic NODs of the panoramic GPNVG-18's, with blur coefficient and brightness to mimic realistic nightvision\nWhats up with no one documenting/noting their code for their shaders its really annoying considering I don't know anything about shaders?",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjGRd",
            "likes": 1,
            "name": "GPNVG-18 Nightvision",
            "published": 3,
            "tags": [
                "nightvision",
                "nightvision",
                "gpnvg18",
                "nvg",
                "goggles"
            ],
            "usePreview": 0,
            "username": "DavidE",
            "viewed": 594
        },
        "renderpass": [
            {
                "code": "//Blur----------------------------------------------------------------------------------------------------------------------------------\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n//Circles-------------------------------------------------------------------------------------------------------------------------------\nfloat remap(float value, float inputMin, float inputMax, float outputMin, float outputMax)\n{\n    return (value - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;\n}\nfloat rand(vec2 n, float time)\n{\n  return 0.5 + 0.5 * \n     fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453 + time);\n}\n\nstruct Circle\n{\n\tvec2 center;\n\tfloat radius;\n};\n    \nvec4 circle_mask_color(Circle circle, vec2 position)\n{\n\tfloat d = distance(circle.center, position);\n\tif(d > circle.radius)\n\t{\n        //Mask color (Black)\n\t\treturn vec4(0.0, 0.0, 0.0, 1.0);\n\t}\n\t\n\tfloat distanceFromCircle = circle.radius - d;\n\tfloat intencity = smoothstep(\n\t\t\t\t\t\t\t\t    0.0, 1.0, \n\t\t\t\t\t\t\t\t    clamp(\n                                        //Size of Circles for Goggles (0.0, 1.0, 0.0, 1.0)\n\t\t\t\t\t\t\t\t\t    remap(distanceFromCircle, 0.1, 0.3, 0.0, 1.0),\n\t\t\t\t\t\t\t\t\t    0.0,\n\t\t\t\t\t\t\t\t\t    1.0\n\t\t\t\t\t\t\t\t    )\n\t\t\t\t\t\t\t\t);\n\treturn vec4(intencity, intencity, intencity, 1.0);\n}\n\nvec4 mask_blend(vec4 a, vec4 b)\n{\n\tvec4 one = vec4(1.0, 1.0, 1.0, 1.0);\n\treturn one - (one - a) * (one - b);\n}\n\n\n//NVG----------------------------------------------------------------------------------------------------------------------------------- \nfloat hash(in float n) { return fract(sin(n)*43758.5453123); }\n\n//Void\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//Blur Effects----------------------------------------------------------------------------------------------------------------------\n\t\t//declare stuff\n\t\tconst int mSize = 21; //Blur size (keep between 11 - 22 for effective blur)\n\t\tconst int kSize = (mSize-1)/2;\n\t\tfloat kernel[mSize];\n\t\tvec3 final_colour = vec3(0.5);\n\t\t\n\t\t//create the 1-D kernel\n\t\tfloat sigma = 7.0;\n\t\tfloat Z = 0.0;\n\t\tfor (int j = 0; j <= kSize; ++j)\n\t\t{\n\t\t\tkernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n\t\t}\n\t\t\n\t\t//get the normalization factor (as the gaussian has been clamped)\n\t\tfor (int j = 0; j < mSize; ++j)\n\t\t{\n\t\t\tZ += kernel[j];\n\t\t}\n\t\t\n\t\t//read out the texels\n\t\tfor (int i=-kSize; i <= kSize; ++i)\n\t\t{\n\t\t\tfor (int j=-kSize; j <= kSize; ++j)\n\t\t\t{\n\t\t\t\tfinal_colour += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\t\n\t\t\t}\n\t\t}\n    \n    //NVG Effects-----------------------------------------------------------------------------------------------------------------------\n\tvec2 p = fragCoord.xy / iResolution.xy;\t\n\tvec2 u = p * 2. - 1.;\n\tvec2 n = u * vec2(iResolution.x / iResolution.y, 1.0);\n\tvec3 c = texture(iChannel0, p).xyz;\n    \n    //Effects: Grain and Vignette\n\tc += hash((hash(n.x) + n.y) * iTime) * 0.2; //Grain\n    \tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tfloat wide = iResolution.x / iResolution.y;\n\tvec2 position = vec2(uv.x * wide, uv.y);\n\t\n    //Drawing the circle posititions\n\tCircle circle_a = Circle(vec2(0.5, 0.5), 0.5); //left Circle\n\tCircle circle_b = Circle(vec2(wide - 0.5, 0.5), 0.5); //right circle\n    Circle circle_c = Circle(vec2(0.88, 0.5), 0.5); //middle circle\n    \n    //Morphing all masks together\n\tvec4 mask_a = circle_mask_color(circle_a, position);\n\tvec4 mask_b = circle_mask_color(circle_b, position);\n    vec4 mask_c = circle_mask_color(circle_c, position);\n\tvec4 mask1 = mask_blend(mask_a, mask_b);\n    //Blending both mask a and b to c...\n    vec4 maska = mask_blend(mask_a, mask_c);\n    vec4 maskb = mask_blend(mask_b, mask_c);\n    //...recombing them to make a new mask\n    vec4 mask2 = mask_blend(maska, maskb);\n    //Blend mask1 and 2 together\n    vec4 mask = mask_blend(mask1, mask2);\n\n\tc *= smoothstep(length(n * n * n * vec2(0.075, 0.4)), 1.0, 0.75); //Vignette\n\n    //FragColor variables NVG(c) * Bloom(color) * Blur(final_colour)\n    \n    //Color Green NVG equation: vec3(0.2126, 0.7152, 0.0722)) * vec3(0.2, 1.5,0.4)\n    //Color Turqoise NVG equation: vec3(0.2, 0.7152, 0.0722)) * vec3(0.0, 1.5,1.1)\n    \n    //Blur goes first so no colors are present besides greens\n\tc = dot(c, final_colour/(Z*Z) * vec3(0.0, 0.7152, 0.0)) * vec3(0.0, 1.5,1.1); //With Blur GPNVG-18 w/ turqoise filter\n    \n\t//c = dot(c, vec3(0.2, 0.7152, 0.0722)) * vec3(0.0, 1.5,1.1); //Without Blur GPNVG-18 w/ turqoise filter\n\t\n\tfragColor = vec4(c,1.0) * mask;\n    \n    //If you don't want the goggle view use this fragColor instead...\n    //fragColor = vec4(c,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}