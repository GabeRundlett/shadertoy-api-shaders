{
    "Shader": {
        "info": {
            "date": "1690309369",
            "description": "My second attempt on a shader. Applied some of the techniques that I learned from kishimisu's awesome shader tutorial together with some tricks I already knew.",
            "flags": 32,
            "hasliked": 0,
            "id": "ds2BWt",
            "likes": 4,
            "name": "Neon Sliders",
            "published": 3,
            "tags": [
                "2d",
                "neon"
            ],
            "usePreview": 0,
            "username": "StefanPijnacker",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "vec2 Rotate(vec2 uv, float angle)\n{\n    float rad = angle * (3.141594 / 180.0);\n    mat2 rot = mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n    \n    return uv * rot;\n}\n\nvec3 palletes(float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return a + b * cos(6.28316 * (c * t + d));\n}\n\nfloat angles[4] = float[4](50., 120., 240., 0.);\nfloat zooms[4] = float[4](0.85f, 1.2f, 0.6, 1.0f);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    vec3 palls[4];\n    \n    palls[0] = palletes(uv.x * uv.y + iTime * 0.2, vec3(0.424,0.784,0.855), \n    vec3(0.098,0.416,0.525), vec3(1.0, 1.0, 1.0),vec3(0.173,0.745,0.886));\n    palls[1] = palletes(uv.x * uv.y + iTime * 0.7, vec3(0.938, 0.328, 0.718),\n    vec3(0.659, 0.483, 0.328), vec3(0.388, 0.388, 0.296), vec3(2.538, 2.478, 0.168));\n    palls[2] = palls[0];\n    palls[3] = palls[1];\n\n    float time = iTime * 0.5;\n    int i = int(time) % 4;\n    int i2 = (i + 1) % 4;\n    \n    float t = smoothstep(0.0, 0.3, fract(time));\n    float offset = mix(angles[i], angles[i2], t);\n    float zoomM = mix(zooms[i], zooms[i2], t);\n    uv *= zoomM;\n\n    uv = Rotate(uv, iTime * 5. + offset);\n    vec3 tex = vec3(texture(iChannel0, uv).rgb);\n    \n    vec3 pal = mix(palls[i], palls[(i + 1) % 4], t);\n\n    vec3 color = tex.r * pal; // symbol\n    color += tex.g * abs(uv.x) * vec3(0.110,0.110,0.110); // borders\n    color += tex.b * pal * 2.; // moving borders\n\n    fragColor = vec4(vec3(color), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define gridScale 4.0\n#define pi 3.14159265359\n\nfloat N21(vec2 uv)\n{\n    return fract(sin(uv.x * 18.289 + uv.y * 112.282) * 5102.32);\n}\n\nfloat sphereSDF(vec2 uv)\n{\n    return length(uv) - 0.5;\n}\n\nfloat boxSDF(vec2 uv, vec2 b) // Thank you Inigo Quilez \n{\n    vec2 d = abs(uv)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 gID = floor(uv * gridScale);\n\n    float speed = 0.9;\n    float t = iTime * speed;\n    int row = int(floor(t)) % int(gridScale);\n    float pos = (cos(t * pi) + 1.0) * 0.5;\n    \n    float r = N21(vec2(floor(t), 0.0));\n    float dir = step(0.5, r);\n    float isMoving = 0.0;\n\n    if(dir == 1.0)\n    {\n        if(int(gID.y) == row)\n        {\n            uv.x += pos;\n            isMoving = 1.0;\n        }\n    }\n    else\n    {\n        if(int(gID.x) == row)\n        {\n            uv.y += pos;\n            isMoving = 1.0;\n        }\n    }\n    \n    vec2 lUV = fract(uv * gridScale) * 2.0 - 1.0;\n    float dist = abs(sphereSDF(lUV));\n    dist = smoothstep(0.0, 0.325, dist);\n    dist = 0.13 / dist;\n    \n    float distBox = boxSDF(lUV, vec2(0.8));\n    distBox = step(0.125, distBox);\n    float glow = isMoving * distBox * ((cos(t * pi * 2.0 - pi) + 1.0) * 0.5);\n\n    fragColor = vec4(vec3(dist, distBox, glow) ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}