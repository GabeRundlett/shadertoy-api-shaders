{
    "Shader": {
        "info": {
            "date": "1452023456",
            "description": " A basic gravity simulator thing using a brute-force all pairs approach to calculate the acceleration of each body.",
            "flags": 32,
            "hasliked": 0,
            "id": "Ms3GDS",
            "likes": 9,
            "name": "N-Body Gravity Test",
            "published": 3,
            "tags": [
                "simulation",
                "particles",
                "gravity",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 1539
        },
        "renderpass": [
            {
                "code": "//#define VIEW_POSITION_BUFFER\n\n#define NUM_BODIES 2048\n\n#define BODY_RADIUS 1.4\n\nvec2 invres = vec2(0);\n\nvec4 getBody(int id)\n{\n    vec2 uv = vec2(0);\n    float fid = float(id) * invres.x;\n        \n    uv.x = fract(fid);\n    uv.y = floor(fid) * invres.y;\n\n    return textureLod(iChannel0, uv, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    invres = 1.0/iResolution.xy;\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    float d = 1e6;\n    \n    vec2 body = vec2(0);\n    for(int i = 0;i < NUM_BODIES;i += 4)\n    {\n        body = getBody(i + 0).xy - uv;\n\t\td = min(d, dot(body,body));\n        \n        body = getBody(i + 1).xy - uv;\n\t\td = min(d, dot(body,body));\n        \n        body = getBody(i + 2).xy - uv;\n\t\td = min(d, dot(body,body));\n        \n        body = getBody(i + 3).xy - uv;\n\t\td = min(d, dot(body,body));\n    }\n    \n    d = sqrt(d);\n    \n    float px = 1.0/iResolution.y;\n    \n    float c = 1.-smoothstep(BODY_RADIUS*px - px, BODY_RADIUS*px, d);\n    \n\tfragColor = vec4(vec3(c),1.0);\n    \n    #ifdef VIEW_POSITION_BUFFER\n    fragColor = texture(iChannel0, uv / res / vec2(1.0,16.0));\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Calculates the acceleration of each object and integrates its position.\n\n#define CLAMP_VIEW\n\n#define NUM_BODIES 2048\n\n#define BODY_MASS 0.1\n#define TIME_SCALE 0.001\n#define MAX_ACCEL 1e4\n\nvec2 invres = vec2(0);\n\nmat2 Rotate(float a)\n{\n\treturn mat2(cos(a), sin(a),-sin(a), cos(a));   \n}\n\n//Get a body from the backbuffer with its ID (xy = Current pos, zw = Last pos).\nvec4 getBody(int id)\n{\n    vec2 uv = vec2(0);\n    float fid = float(id) * invres.x;\n        \n    uv.x = fract(fid);\n    uv.y = floor(fid) * invres.y;\n\n    return textureLod(iChannel0, uv, 0.0);\n}\n\n//Integrate the body's position.\nvec4 Integrate(vec4 body, vec2 accel, float delta)\n{\n    return vec4(2.0*body.xy - body.zw + accel * delta*delta, body.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    invres = 1.0/iResolution.xy;\n    fragCoord = floor(fragCoord);\n    int id = int(fragCoord.x) + int(iResolution.x * floor(fragCoord.y));\n    \n    if(id >= NUM_BODIES)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 res = iResolution.xy / iResolution.y;\n    \n    vec4 body = getBody(id);\n    \n    vec2 acc = vec2(0);\n    \n    for(int i = 0;i < NUM_BODIES;i++)\n    {\n            vec2 diff = getBody(i).xy - body.xy;\n            acc += (i == id) ? vec2(0) : min(MAX_ACCEL, BODY_MASS / dot(diff, diff)) * normalize(diff);\n    }\n    \n    body = Integrate(body, acc, iTimeDelta * TIME_SCALE);\n    \n    //Initialization (iFrame == 0 doesn't seem to work when the page is initially loaded)\n    if(iFrame == 0 || iTime < 2.0)\n    {\n        vec2 rpos = vec2(0);\n        float stride = iChannelResolution[1].x;\n        rpos.x = mod(float(id), stride);\n        rpos.y = floor(float(id) / stride);\n        vec4 rnd = texture(iChannel1, rpos / iChannelResolution[1].xy, -99.0);\n        body = abs(rnd.xyxy) * res.xyxy;\n        body += sin(float(id)*0.0005)*0.001;\n        body.zw += (rnd.zw - 0.5) * 0.001;\n        \n        body.zw -= res/2.0;\n        body.zw *= Rotate(0.001);\n        body.zw = 1.002*body.zw + res/2.0; \n    }\n    \n    #ifdef CLAMP_VIEW\n    \tbody.xy = clamp(body.xy, vec2(0), res.xy);\n    #endif\n    \n    fragColor = body;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}