{
    "Shader": {
        "info": {
            "date": "1666512170",
            "description": "The Gosper Curve using a simple stack (just storing the offset of the \"current instruction\").\n\nSee also Fabrice's hard wired recursion here: [url]https://www.shadertoy.com/view/cdsGRj[/url] (my one only goes down 3 levels though).",
            "flags": 0,
            "hasliked": 0,
            "id": "dss3z2",
            "likes": 12,
            "name": "Gosper Curve with Stack",
            "published": 3,
            "tags": [
                "lsystem",
                "stack",
                "gosper"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Gosper Curve, drawn with stack. mla, 2022.\n//\n// Inspired by https://www.shadertoy.com/view/cdsGRj by FabriceNeyret2\n//\n// Uses an explicit stack to keep track of the recursion.\n// We still plot out all of the curve segments. A better approach would be\n// to keep track of intermediate segments and avoid recursing far from\n// the point being plotted.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\n// Each instruction is an integer number of turns, followed by\n// either an instruction offset for the recursive call or -1\n// to terminate the current level.\n#define C(turns,offset) (((turns) << 16) | ((offset) & 0xffff))\nconst int A = 0, B = 8, END = -1, L = -1, R = 1;\nint program[16] =\n  int[] (C(0,A),C(L,B),C(L+L,B),C(R,A), C(R+R,A),C(0,A),C(R,B),C(L,END),\n         C(R,A),C(L,B),C(0,B),C(L+L,B), C(L,A),C(R+R,A),C(R,B),C(0,END));\n\nconst int maxdepth = 3;\nconst float angle = PI/3.0;\n\nvec2 p = vec2(0);     // The drawing point\nvec2 point = vec2(0); // The moving point\nfloat theta = 0.0;    // Cumulative angle\nfloat plen = 0.0;     // Cumulative path length\n\nfloat drawsegment(vec2 pos, float t) {\n  vec2 seg = vec2(cos(theta),sin(theta));  // Segment has length 1\n  if (t >= plen && t < plen+1.0) point = p + (t-plen)*seg;\n  vec2 q = p + seg;\n  float d = segment(pos,p,q);\n  plen += 1.0;\n  p = q;\n  return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n  float scale = pow(7.0,0.5*float(maxdepth));\n  pos *= 0.6*scale;\n  pos -= vec2(0,0.55*scale);\n  int stack[maxdepth];\n  int depth = 0;\n  stack[depth++] = 0;\n  float t = mod(3.0*iTime,pow(7.0,float(maxdepth))); // Moving point\n  float d = 1e8;\n  while (depth > 0) {\n    int instr = program[stack[depth-1]++];\n    // Decode instruction\n    int turns = instr>>16;\n    int code = instr<<16>>16;\n    theta += float(turns)*angle; // Apply turn\n    if (code == END) depth--;    // Terminate level & unwind\n    else if (depth == maxdepth) d = min(d,drawsegment(pos,t)); // Segment\n    else stack[depth++] = code;  // Recurse\n  }\n  float px = fwidth(pos.x);\n  vec3 col = vec3(smoothstep(0.0,px,d-0.05));\n  col = mix(vec3(1,0,0), col,smoothstep(0.0,px,distance(pos,point)-0.2));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}