{
    "Shader": {
        "info": {
            "date": "1547137078",
            "description": "Tried to make it look like the Nike By You advertising campaign.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wdf3zl",
            "likes": 18,
            "name": "AIR VAPORMAX",
            "published": 3,
            "tags": [
                "ui",
                "2ddistance",
                "nike"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 728
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define combine(v1,v2) v1.w < v2.w ? v1 : v2\n#define opSubtraction(d1,d2) max(-d1,d2)\n#define hash(h) fract(sin(h) * 43758.5453123)\n\nconst float WallDistance = 0.03;\nconst float GlowDistance = 0.01874;\nconst float MarchDumping = 0.358;\n\n// numbers 0123456789:\nint c[] = int[](31599,9362,29671,29391,23497,31183,31215,29257,31727,31695,1040);\n\n/* The glass like shader is based on https://www.shadertoy.com/view/Md3SDB */\n// 2d distance functions from https://iquilezles.org/articles/distfunctions2d\nfloat dBox2d(vec2 p, vec2 b) {\n\treturn max(abs(p.x) - b.x, abs(p.y) - b.y);\n}\n\nvec3 lineTex(vec2 uv)\n{\n    float stripeSize = 50.0;\n    float t = iTime*10.0;\n    return vec3(tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize);\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec3 line( in vec3 buf, in vec2 a, in vec2 b, in vec2 p, in vec2 w, in vec4 col )\n{\n   float f = sdLine( p, a, b );\n   float g = fwidth(f)*w.y;\n   return mix( buf, col.xyz, col.w*(1.0-smoothstep(w.x-g, w.x+g, f)) );\n}\n\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdCapsule( vec3 p, float h, float r )\n{\n    p.z -= clamp( p.z, 1.0, h );\n    return length( p ) - r;\n}\n\nfloat opElongate( in vec3 p, in vec2 size, in vec3 h )\n{\n    vec3 q = abs(p)-h;\n    return sdTorus( max(q,0.0), size ) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec4 map(vec3 p){\n    float speed = iTime*15.0;\n    vec3 prevP = p;\n    \n    float cmnR = 0.035;\n    float floorD = p.y+3.0;\n    float sole0 = opElongate(p+vec3(-0.05,0,2.9), vec2(0.3,0.11), vec3(0.3,0.05,0.001));\n   \tsole0 = opSubtraction(length(p+vec3(0,0,2.6))-0.3, sole0)-cmnR;\n    \n    float sole1 = opElongate(p+vec3(0.05,0,1.8), vec2(0.35,0.11), vec3(0.6,0.05,0.001));\n   \tsole1 = opSubtraction(length(p+vec3(0.2,0,1.45))-0.3, sole1)-cmnR;\n    sole1 = opSubtraction(length(p+vec3(0.1,0,2.15))-0.3, sole1);\n    \n    float sole2 = opElongate(p+vec3(0.1,0,0.7), vec2(0.4,0.11), vec3(0.75,0.05,0.001));\n   \tsole2 = opSubtraction(length(p+vec3(0.3,0,1.1))-0.3, sole2)-cmnR;\n    \n    float sole3 = opElongate(p+vec3(0,0,-0.5), vec2(0.35,0.11), vec3(0.6,0.05,0.001));\n   \tsole3 = opSubtraction(length(p+vec3(0,0,-1.1))-0.8, sole3)-cmnR;\n    \n    p.x = -abs(p.x);\n    float sole4 = sdCapsule(p+vec3(0.7,0,-0.3),1.3,0.2);\n    p = prevP;\n    \n    float sole5 = opElongate(p+vec3(0,0,-2.5), vec2(0.35,0.12), vec3(0.3,0.05,0.001));\n   \tsole5 = opSubtraction(length(p+vec3(0,0,-1.95))-0.7, sole5)-cmnR;\n    \n    vec4 res = combine(vec4(vec3(0.9,0.3,0.3),sole0),vec4(vec3(0.9,0.3,0.3),sole1));\n    vec4 res2 = combine(vec4(vec3(0.9,0.3,0.3),sole2),vec4(vec3(0.9,0.3,0.3),sole3));\n    vec4 res3 = combine(vec4(vec3(0.9,0.3,0.3),sole4),vec4(vec3(0.9,0.3,0.3),sole5));\n    vec4 res4 = combine(res,res2);\n    vec4 res5 = combine(res3,res4);\n    \n    return res5;\n}\n\nfloat getBit(int num,int bit)\n{\n\treturn float( num>>bit & 1);\n}\n\nfloat Sprite3x5(int sprite,vec2 p)\n{\n\tfloat bounds = float(all(lessThan(p,vec2(3,5))) && all(greaterThanEqual(p,vec2(0,0))));\n\treturn getBit(sprite,int((2.0 - p.x) + 3.0 * p.y)) * bounds;\n}\n\nfloat Digit(int n,vec2 p)\n{\n\tn = int(mod(float(n),11.0));\n    return Sprite3x5(n == 0 ? c[0] : n == 1 ? c[1] : n == 2 ? c[2] : n == 3 ? c[3] : n == 4 ? c[4] : n == 5 ? c[5] : n == 6 ? c[6] : n == 7 ? c[7] : n == 8 ? c[8] : n == 9 ? c[9] : n == 10 ? c[10] : 0,p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    mat3 camRotY = matRotateY(radians(-iTime*30.0))*matRotateX(radians(40.0));\n\t//mat3 camRotY = matRotateX(radians(90.0)); // for debug purpose\n    \n\tvec3 ro=vec3(0.,-.1,-8.);\n    vec3 rd=normalize(vec3(p,1.8));\n\t\n    float t, dist;\n\tt = 0.0;\n\tvec3 distPos = vec3(0.0);\n\tvec4 distCl = vec4(0.0);\n    \n    vec3 accu = vec3(0.0);\n    float glowFactor = 0.0;\n    float steps = 0.0;\n\tfor(int i = 0; i < 60; i++){\n        steps = float(i);\n        \n\t\tdistCl = map(distPos);\n\t\tdist = distCl.w;\n        float absd = abs(dist);\n        absd *= 0.8 + hash(absd) * 0.2;\n        \n\t\tif(dist < 1e-4){break;}\n        if(t>30.)break;\n        \n\t\tglowFactor += pow(1.0 - smoothstep(0.0, GlowDistance, dist), 14.0) * step(0.0, dist);\n        float f = absd * (1.0 - smoothstep(0.0, WallDistance, absd));\n        accu += vec3(f);\n\n        t += max(0.0001, absd * MarchDumping);\n        \n\t\tdistPos = (ro+rd*t)*camRotY;\n\t}\n    glowFactor /= steps;\n\taccu += 0.7 * pow(glowFactor, 1.2) * vec3(1.0);\n\n    // drawing UI\n    vec2 uv = p;\n    vec2 uvRef = uv;\n    \n    // bg color\n    vec3 uicol = vec3(0.0);\n    vec3 white = vec3(1.0);\n    \n    uvRef.y -= 0.5;\n    uvRef.x = mod(uvRef.x,1.0)-0.5;\n    uvRef.y = mod(uvRef.y,1.0)-0.5;\n    uicol = line( uicol, vec2(0.0, 0.2), vec2(0.0, -0.2), uvRef, vec2(0.002,1.0), vec4(white,2.0) );\n\tuicol = line( uicol, vec2(0.2, 0.0), vec2(-0.2, 0.0), uvRef, vec2(0.002,1.0), vec4(white,2.0) );\n    \n    // guage\n    float guageBg = dBox2d(uv+vec2(-1.0, -0.5), vec2(0.11,0.36));\n    uicol = mix( uicol, white, 1.0-smoothstep(0.0001,0.01,abs(guageBg)) );\n    \n    vec3 ltex = lineTex(uv);\n    float ganimate = sin(iTime*1.2)*0.1;\n    float guageBar = dBox2d(uv+vec2(-1.0, -0.4-ganimate), vec2(0.0005,0.15+ganimate));\n    uicol = mix( uicol, ltex, 1.0-smoothstep(0.09,0.105,abs(guageBar)) );\n    \n    float naviSize = 0.03;\n    float navi = sdTriangle(vec2(naviSize,naviSize*2.0),vec2(-naviSize,naviSize),vec2(naviSize,-naviSize*0.25),uv+vec2(-1.15,-0.62-ganimate*2.2));\n    uicol = mix( uicol, white, 1.0-smoothstep(0.003,0.01,abs(navi)) );\n\n    // guage2\n    ganimate = sin(iTime*1.5)*0.1;\n    float guage0 = dBox2d(uv+vec2(1.1-ganimate, 0.4), vec2(0.15+ganimate,0.006));\n    uicol = mix( uicol, ltex, 1.0-smoothstep(0.029,0.03,abs(guage0)));\n    \n    ganimate = sin(iTime*1.7)*0.1;\n    float guage1 = dBox2d(uv+vec2(1.1-ganimate, 0.5), vec2(0.15+ganimate,0.006));\n    uicol = mix( uicol, ltex, 1.0-smoothstep(0.029,0.03,abs(guage1)));\n    \n    ganimate = sin(iTime*1.9)*0.1;\n    float guage2 = dBox2d(uv+vec2(1.1-ganimate, 0.6), vec2(0.15+ganimate,0.006));\n    uicol = mix( uicol, ltex, 1.0-smoothstep(0.029,0.03,abs(guage2)));\n    \n    // fake 3D graph\n    uicol = line( uicol, vec2(1.0, -0.15), vec2(1.0, -0.5), uv, vec2(0.003,1.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(1.0, -0.5), vec2(0.7, -0.7), uv, vec2(0.003,1.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(1.0, -0.5), vec2(1.3, -0.7), uv, vec2(0.003,1.0), vec4(white,2.0) );\n    \n    uicol = line( uicol, vec2(1.0, -0.3), vec2(0.85, -0.6), uv, vec2(0.003,1.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(1.0, -0.3), vec2(1.15, -0.6), uv, vec2(0.003,1.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(0.85, -0.6), vec2(1.15, -0.6), uv, vec2(0.003,1.0), vec4(white,2.0) );\n    \n\tfloat dot0 = dBox2d(uv+vec2(-1.0, 0.15), vec2(0.001,0.001));\n    uicol = mix( uicol, white, 1.0-smoothstep(0.025,0.03,abs(dot0)) );\n\tfloat dot1 = dBox2d(uv+vec2(-0.7, 0.7), vec2(0.001,0.001));\n    uicol = mix( uicol, white, 1.0-smoothstep(0.025,0.03,abs(dot1)) );\n\tfloat dot2 = dBox2d(uv+vec2(-1.3, 0.7), vec2(0.001,0.001));\n    uicol = mix( uicol, white, 1.0-smoothstep(0.025,0.03,abs(dot2)) );\n    \n    float ax = cos(iTime*2.5)*0.03;\n    float ay = sin(iTime*1.7)*0.04;\n    float ax2 = cos(iTime*1.9)*0.05;\n    float ay2 = sin(iTime*2.1)*0.06;\n    \n    float rotVal = radians(-iTime*30.0);\n    mat2 m = rot(rotVal);\n    \n\tfloat td = sdTriangle(vec2(0.12+ax,0.12+ay)*m,vec2(-0.12+ax2,0.12+ay2)*m,vec2(-0.12+ax,-0.12+ay)*m,uv+vec2(-1.0,0.55));\n    uicol = mix( uicol, white, 1.0-smoothstep(0.006,0.01,abs(td)) );\n    \n    // AIR LOGO\n    vec2 logoPos = vec2(1.25,-0.5);\n\tuicol = line( uicol, vec2(0.1, 0.07), vec2(0.0, -0.07), uv+logoPos, vec2(0.02,2.0), vec4(white,2.0) );\n\tuicol = line( uicol, vec2(0.14, 0.07), vec2(0.14, -0.07), uv+logoPos, vec2(0.02,2.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(0.23, 0.07), vec2(0.23, -0.07), uv+logoPos, vec2(0.02,2.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(0.32, 0.07), vec2(0.32, -0.07), uv+logoPos, vec2(0.02,2.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(0.36, 0.07), vec2(0.45, 0.07), uv+logoPos, vec2(0.02,2.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(0.45, 0.07), vec2(0.37, -0.03), uv+logoPos, vec2(0.02,2.0), vec4(white,2.0) );\n    uicol = line( uicol, vec2(0.37, -0.03), vec2(0.5, -0.07), uv+logoPos, vec2(0.02,2.0), vec4(white,2.0) );\n    \n    // digit\n    uv = ( fragCoord.xy /iResolution.xy ) * vec2(256,128);\n\tvec2 cpos = vec2(113.0,117.0);\n\tfloat dc = Digit(int(fract(iTime)*10.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*20.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(10,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*40.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*50.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(10,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*70.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*80.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*90.0),floor(uv-cpos));\n   \tuicol = mix(uicol,white,dc );\n    \n\t// rendering result\n\tfloat brightness = 2.0;\n    vec3 dst = accu*brightness;\n\tfragColor = vec4(dst+uicol, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}