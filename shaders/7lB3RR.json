{
    "Shader": {
        "info": {
            "date": "1623199312",
            "description": "just a noodle",
            "flags": 2,
            "hasliked": 0,
            "id": "7lB3RR",
            "likes": 8,
            "name": "halftone cmyk noodle",
            "published": 3,
            "tags": [
                "video",
                "halftone",
                "cmyk"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 540
        },
        "renderpass": [
            {
                "code": "float px_dotsize = 20.0; // almost const, computed once at start of main\nconst float dots_per_screen = 100.0;\nvec2 edge_size = vec2(0.01);\n\nmat2 makeTwist(in float theta) {\n  float st = sin(theta);\n  float ct = cos(theta);\n  return mat2(ct, st, -st, ct);\n}\n\nvec2 dotCenter(in vec2 uv, in mat2 twist) {\n  vec2 xformed = twist * uv;\n  xformed = xformed - mod(xformed, vec2(px_dotsize));\n  xformed = xformed + 0.5 * px_dotsize;\n  return transpose(twist) * xformed;\n}\n\nfloat dotNess(in vec2 uv, in vec2 dot_center, in float val) {\n  float rad = 0.6 * px_dotsize * sqrt(smoothstep(0.0, 1.0, val)); // val between 0 and 1\n  float len = length(uv - dot_center);\n  float out_val = (rad-len);\n  return clamp(out_val, 0.0, 1.0);\n}\n\nvec3 dotCmy(in vec2 uv) {\n  mat2 twist = makeTwist(0.1);\n  vec2 center = dotCenter(uv, twist);\n  float val = 1.0 - textureLod(iChannel0, center/iResolution.xy, 2.0).r;\n  float cyan = dotNess(uv, center, val);\n  twist = makeTwist(-0.75);\n  center = dotCenter(uv, twist);\n  val = 1.0 - textureLod(iChannel0, center/iResolution.xy, 2.0).g;\n  float magenta = dotNess(uv, center, val);\n  twist = makeTwist(0.4);\n  center = dotCenter(uv, twist);\n  val = 1.0 - textureLod(iChannel0, center/iResolution.xy, 2.0).b;\n  float yellow = dotNess(uv, center, val);\n  return vec3(cyan, magenta, yellow);\n}\n\nfloat edgeness(in vec2 uv) {\n  float f = dot(texture(iChannel0, uv).rgb, vec3(1.0));\n  vec2 grad = vec2(dot(texture(iChannel0, uv + edge_size * vec2(1.0, 0.0)).rgb, vec3(1.0)),\n                   dot(texture(iChannel0, uv + edge_size * vec2(0.0, 1.0)).rgb, vec3(1.0)))\n              - f;\n  // grad = grad / min(edge_size.x, edge_size.y);\n  return length(grad);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    px_dotsize = max(iResolution.x, iResolution.y) / dots_per_screen;\n    edge_size = edge_size.x * iResolution.x / iResolution.xy;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 cmy = dotCmy(fragCoord);\n    \n    float edgeblack = smoothstep(0.75, 0.42, edgeness(uv));\n\n    // Output to screen\n    fragColor = vec4(edgeblack * (1.0 - cmy),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}