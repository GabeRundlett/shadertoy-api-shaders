{
    "Shader": {
        "info": {
            "date": "1615878631",
            "description": "本来想着试着做一个loading的效果，后面加了一点metaball的实现，主要是卡在每个球对颜色的影响，希望球完全重合之后变成颜色的累加而非覆盖",
            "flags": 0,
            "hasliked": 0,
            "id": "fds3WH",
            "likes": 3,
            "name": "metaball loading animation",
            "published": 3,
            "tags": [
                "color",
                "metaball",
                "animation",
                "loading"
            ],
            "usePreview": 0,
            "username": "hanker",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "//圆的等势面\n#define PI 3.1415\nfloat metaCircle(vec2 uv,vec2 center,float radius){\n    float offsetX = uv.x - center.x;\n    float offsetY = uv.y - center.y;\n    return sqrt((radius * radius) / (offsetX * offsetX + offsetY * offsetY));\n}\nfloat meta(vec2 uv,vec3 c1,vec3 c2){\n    float m1 = metaCircle(uv,c1.xy,c1.z);\n    float m2 = metaCircle(uv,c2.xy,c2.z);\n    return m1 + m2;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy * 2. - 1.;\n    uv.y *= iResolution.y / iResolution.x;\n\n  \n    vec2 cA = vec2(.6 * sin(iTime ),0.);\n    vec2 cB = vec2(.6 * sin(iTime + PI * .5),0.);\n    vec2 cC = vec2(.6 * sin(iTime + PI) ,0.);\n\n    float r1 = .1 + .05 * cos(iTime);\n    float r2 = .1 + .05 * cos(iTime + PI * .5);\n    float r3 = .1 + .05 * cos(iTime + PI);\n\n    vec3 colorA = vec3(1.,0.,0.);\n    vec3 colorB = vec3(0.,1.,0.);\n    vec3 colorC = vec3(0.,0.,1.);\n\n    float perA = metaCircle(uv,cA,r1);\n    float perB = metaCircle(uv,cB,r2);\n    float perC = metaCircle(uv,cC,r3);\n    \n    float m = perA + perB + perC;\n    m = smoothstep(.9,1.,m);\n\n    //计算了一下受到各个球颜色的影响\n    //TODO 这个地方有问题，能勉强有效果\n    float effect1 = length(uv - cA) > r1 ? perA * 2.5 : 1.;\n    float effect2 = length(uv - cB) > r2 ? perB * 2.5 :  1.;\n    float effect3 = length(uv - cC) > r3 ? perC * 2.5 :  1.;\n\n    vec3 col = ((colorA * effect1 ) + (colorB * effect2) + (colorC * effect3)) * m;\n\n    fragColor = vec4(col,1.);\n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}