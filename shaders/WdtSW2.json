{
    "Shader": {
        "info": {
            "date": "1572910684",
            "description": "fractal fbm tiles",
            "flags": 0,
            "hasliked": 0,
            "id": "WdtSW2",
            "likes": 1,
            "name": "fractal fbm tiles",
            "published": 3,
            "tags": [
                "fractal",
                "fbm",
                "tiles"
            ],
            "usePreview": 0,
            "username": "ArthurSango",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "float r( vec2 uv) {\n  return fract( sin( dot( uv, vec2( 123.3, 34.222) ) ));\n}\n\nfloat noise( vec2 st ) {\n\n    vec2 uv = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f*f*(5.-2.0*f);\n    \n    vec2 a = uv;\n    vec2 b = uv + vec2(1.,0.);\n    vec2 c = uv + vec2(1.,1.);\n    vec2 d = uv + vec2(0.,1.);\n\n    float ra = r(a);\n    float rb = r(b);\n    float rc = r(c);\n    float rd = r(d);\n    \n    return mix( mix( ra, rb, u.x) , mix(rc,rd,u.y) , abs( sin( ra+rb+rc+rd ) ) );\n    \n\n}\n\n// borrowed frrom https://iquilezles.org/articles/fbm\nfloat fbm( in vec2 x, in float H )\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i=0; i<7; i++ )\n    {\n        t += a*noise(f*x);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = abs ( uv * 2. - 1. );\n    \n    float a = iTime;\n    \n    vec3 col = vec3(1.);\n    \n    uv *= mat2( sin(a/10.), 0., 0., sin( a/10.) );\n    \n       \n    if ( (uv.x < 0.25 && uv.y > 0.75) || (uv.y < 0.25 && uv.x > 0.25 ) ) {\n      uv *= mat2 ( cos(a), sin(a), -sin(a), cos(a) );\n    } else  if ( (uv .x < 0.25 && uv .y < 0.25) || (uv .y > 0.75 && uv .x > 0.25 ) ) {\n      uv  *= mat2 ( cos(-a), sin(-a), -sin(-a), cos(a) );\n    }   else  {\n      uv  *= mat2 ( -cos(-a), -sin(-a), -sin(-a), -cos(a) );\n    }\n \n  //  uv *= step(  distance( uv, vec2(0.) ), 0.5 * r(uv) );\n    uv *= step(  distance( uv, vec2(0.) ), 0.5 * abs(sin(a/10.)) );\n  \n    \n \n\tcol.x = fbm( uv, 0.6) - 0.1 ;\n    col.z = fbm( uv, 0.1) - 0.1 ;\n    col.y = fbm( uv, 0.9 ) - distance( uv, vec2( 0.5) );\n    \n    vec3 c = cross( col, vec3( sin(a), cos(a), -sin(1.-a) ) );\n    col *= c;\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}