{
    "Shader": {
        "info": {
            "date": "1668684769",
            "description": "click and drag mouse, draws a rectangle where there is the mouse",
            "flags": 0,
            "hasliked": 0,
            "id": "dsBGzW",
            "likes": 3,
            "name": "rectangle where mouse",
            "published": 3,
            "tags": [
                "rectangle"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iTime < 0.1){ // reset time to clear the screen\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n        return;\n    }\n    \n    vec2 a_n_mouse_normalized = vec2(iMouse.x / iResolution.x, iMouse.y / iResolution.y);\n    \n    vec2 a_n_pixel_coordinate_normalized = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    \n    float n_scale_x = 33.0;\n    float n_scale_y = 33.0;\n    float n_scale_x_normalized = n_scale_x / iResolution.x;\n    float n_scale_y_normalized = n_scale_y / iResolution.y;\n    if(\n        a_n_pixel_coordinate_normalized.x >= a_n_mouse_normalized.x\n        &&\n        a_n_pixel_coordinate_normalized.x < a_n_mouse_normalized.x + n_scale_x_normalized\n        &&\n        a_n_pixel_coordinate_normalized.y >= a_n_mouse_normalized.y\n        &&\n        a_n_pixel_coordinate_normalized.y < a_n_mouse_normalized.y + n_scale_y_normalized\n     ){\n        float n_center_x = (a_n_mouse_normalized.x + (n_scale_x_normalized / 2.0));\n        float n_center_y = (a_n_mouse_normalized.y + (n_scale_y_normalized / 2.0));\n       float n_distance = sqrt(\n           pow(a_n_pixel_coordinate_normalized.x - n_center_x,2.0) + \n           pow(a_n_pixel_coordinate_normalized.y - n_center_y,2.0)\n          );\n          float n_distance_normalized = n_distance/n_scale_y_normalized;\n          float n_distance_normalized_inverted = 1.0 - n_distance_normalized;\n\n       fragColor = vec4(\n       n_distance_normalized_inverted,\n       n_distance_normalized_inverted,\n       n_distance_normalized_inverted,\n       1.0\n       );\n    }else{\n    \n        discard;\n    }\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}