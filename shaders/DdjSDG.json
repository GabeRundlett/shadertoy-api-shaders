{
    "Shader": {
        "info": {
            "date": "1670818545",
            "description": "I made an algorithm to anti-alias the mandelbrot set.",
            "flags": 32,
            "hasliked": 0,
            "id": "DdjSDG",
            "likes": 2,
            "name": "Antialiased Colored Mandelbrot",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "antialiasing"
            ],
            "usePreview": 0,
            "username": "dankcatlord",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 a = texture(iChannel0, uv).rgb;\n    vec3 b = iTime + uv.xyx + vec3(0.0, 2.0, 4.0);\n\n    vec3 col = sqrt((a.x * cos(b) + a.y * sin(b) - a.z) * 0.5 + 0.5);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "precision highp float;\nprecision highp int;\n\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\nvec2 noise(uvec2 p) {\n    float U = uintBitsToFloat(\n        hash(0x717bc129u ^ hash(uint(iFrame) ^ hash(p.x ^ hash(p.y)))) & 0x007fffffu | 0x3f800000u\n    ) - 1.5;\n    float V = uintBitsToFloat(\n        hash(0xf00d5a7cu ^ hash(uint(iFrame) ^ hash(p.x ^ hash(p.y)))) & 0x007fffffu | 0x3f800000u\n    ) - 1.5;\n    return vec2(U,V);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 info = texture(iChannel0, vec2(0.5) / iResolution.xy);\n    float frame = info.w;\n    if (info.xy != iResolution.xy) frame = float(iFrame - 1);\n    if (fragCoord == vec2(0.5)) {\n        fragColor.xy = iResolution.xy;\n        fragColor.z = 0.0;\n        fragColor.w = frame;\n        return;\n    }\n    vec2 uv = ((vec2(fragCoord.x, fragCoord.y - 0.5) + noise(uvec2(fragCoord))) * 2.0 - iResolution.xy) *\n        max(1.35 / iResolution.x, 1.15 / iResolution.y);\n    uv.x -= 0.75;\n    \n    vec2 z = uv;\n    vec2 z2 = z * z;\n    vec2 c = uv;\n    \n    int i;\n    for (i = 0; i < 1024; i++) {\n        if ((z2.x + z2.y) > 256.0) break;\n        z.y = (z.x + z.x) * z.y + c.y;\n        z.x = z2.x - z2.y + c.x;\n        z2 = z * z;\n    }\n    float iter = sqrt(float(i) - log2(log2(z2.x + z2.y)) + 4.0);\n    \n    fragColor = vec4(mix(\n        texture(iChannel0, fragCoord / iResolution.xy).rgb,\n        i == 1024 ? vec3(0.0, 0.0, 1.0) : vec3(cos(iter), sin(iter), 0.0),\n        1.0 / (float(iFrame) - frame)\n    ),0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}