{
    "Shader": {
        "info": {
            "date": "1717367774",
            "description": "You can see that when the ray is inside the sphere, the color changes. Additionally, only the closest sphere is displayed at the pixel.",
            "flags": 0,
            "hasliked": 0,
            "id": "43V3RW",
            "likes": 0,
            "name": "017 - Depth checking with normal",
            "published": 3,
            "tags": [
                "raytracing",
                "mouse",
                "raytracer",
                "ray",
                "beginner"
            ],
            "usePreview": 0,
            "username": "PiGIon",
            "viewed": 102
        },
        "renderpass": [
            {
                "code": "// 2024.06.02 rev 1\n\n#define ray_tmin 0.1\n#define ray_tmax 100.0\n\n// returns x value of a noise texture\nfloat rand(int idx) {\n    return texelFetch(iChannel0, ivec2(idx, 0), 0).x - 0.5;\n}\n\n// normal relative to ray direction\n// e.g. if inside a sphere it returns -normal\nbool front_face(vec3 d, vec3 out_n, out vec3 n) {\n    bool outside = dot(d, out_n) < 0.;\n    n = outside ? n : -n;\n    return outside;\n}\n\n// returns t for a vector\n// o - origin of the vector\n// dir - direction of the vector\n// t - can be read as \"time\"\nvec3 at(vec3 o, vec3 dir, float t) {\n    return o + t * dir;\n}\n\n// length squared\n// optimized function for dot(v, v)\nfloat length_squared(vec3 v) {\n    return v.x * v.x + v.y * v.y + v.z * v.z;\n}\n\n// from Ray Tracing in One Weekend\n// coord - sphere coord\n// radius - sphere radius\n// o - ray origin\n// d - ray direction\n// t - distance from o to sphere collision\n// p - point of the collision\n// n - normal of the collision (not normalized)\n// outside - whether the hit was inside or outside the sphere\nbool hit_sphere(\n    vec3 coord,\n    float radius,\n    vec3 o,\n    vec3 d,\n    out float t,\n    out vec3 p,\n    out vec3 n,\n    out bool outside\n    ) {\n    vec3 oc = coord - o;\n    float a = length_squared(d);\n    float b = dot(d, oc);\n    float c = length_squared(oc) - radius * radius;\n    float discriminant = b * b - a * c;\n    if (discriminant < 0.) {\n        t = -1.0;\n        return false;\n    }\n    float sqrtd = sqrt(discriminant);\n    \n    float root = (b - sqrtd) / a;\n    if (root <= ray_tmin || ray_tmax <= root) {\n        root = (b + sqrtd) / a;\n        if (root <= ray_tmin || ray_tmax <= root) {\n            return false;\n        }\n    }\n    \n    t = root;\n    p = at(o, d, t);\n    n = (p - coord) / radius;\n    outside = front_face(d, n, n);\n    return true;\n}\n\n// returns a range of vec2(-1) to vec2(1) based on mouse and screen size\n// deals with first frame and returns vec2(0) if so\nvec2 uv_mouse() {\n    if (length(iMouse.xy) == 0.) {\n        return vec2(0, 0);\n    }\n    return ((iMouse.xy / iResolution.xy) - 0.5) * 2.;\n}\n\n// function that returns the color of a sphere\nbool sphere(vec3 cam, vec3 dir, vec3 pos, float radius, out vec4 hit) {\n    float t;\n    vec3 p;\n    vec3 n;\n    bool outside;\n    bool is_hit = hit_sphere(pos, radius, cam, dir, t, p, n, outside);\n    if (!is_hit) {\n        return is_hit;\n    }\n\n    vec3 c = vec3(1., 0., 0.);\n    vec3 N = normalize(n);\n    if (!outside) {\n        c = vec3(0., 0., 1.);\n    }\n\n    hit = vec4(mix(c, vec3(0.), min(1., t / 2.)), t);\n    return is_hit;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec2 uv = (2. * frag_coord - iResolution.xy) / iResolution.y;\n    vec3 origin = vec3(0.);\n    vec4 O = frag_color;\n    vec2 mouse = uv_mouse();\n\n    // world space, x=horizontal, y=vertical, z=depth\n    vec3 pos_w = vec3(0., 0., -1.);\n    vec3 cam_w = vec3(-mouse, 0.);\n    \n    // move everything to camera/view space\n    vec3 cam_c = origin;\n    // camera always points \n    vec3 cam_dir = vec3(0., 0., -1.);\n\n    // we already have the NDC, which is uv from -1 to 1 at xy\n    // we just place a plane at the front of the camera here\n    // get the direction from camera to the uv plane\n    vec3 dir = vec3(uv, -1.);\n\n    // from Ray Tracing in One Weekend\n    // blue background\n    vec3 unit_direction = normalize(dir);\n    float t = 0.5 * (unit_direction.y + 1.0);\n    t = 0.5 * (unit_direction.y + 1.0);\n    vec4 bg_color = vec4((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0), 1.);\n    O = bg_color;\n    \n    // the spheres are always the same, they just go back to the bottom when not needed\n    vec4 hit = vec4(0., 0., 0., ray_tmax);\n    bool sphere_hit = false;\n    for (int i = 0; i < 50; i++) {\n        float radius = abs(rand(i + 3)) * 2. + 0.2;\n        // cycle sphere Y from bottom to top\n        float sphere_y = mod((rand(i + 1) * 10. - iTime), 8.);\n        vec3 pos_w = vec3(rand(i) * 10., 4. - sphere_y, -1. - rand(i + 2));\n        // move sphere to camera space\n        vec3 pos_c = pos_w - cam_w;\n        vec4 new_hit;\n        bool is_hit = sphere(cam_c, dir, pos_c, radius, new_hit);\n        sphere_hit = sphere_hit || is_hit;\n        hit = is_hit && new_hit.w < hit.w ? new_hit : hit;\n    }\n    \n    if (sphere_hit) {\n        O = mix(O, hit, 1.);\n    }\n\n    frag_color = O;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}