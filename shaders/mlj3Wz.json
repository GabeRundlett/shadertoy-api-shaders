{
    "Shader": {
        "info": {
            "date": "1673181220",
            "description": "I asked ChatGPT3 to write a fragment shader\n\nPrompt \"write a shadertoy.com fragment shader that draws a sine wave wrapped in a circle\"\n\nOnly modification (you can see in the code) is to swap iGlobalTime for iTime.",
            "flags": 0,
            "hasliked": 0,
            "id": "mlj3Wz",
            "likes": 4,
            "name": "ChatGPT3 \"Sine wrapping circle\"",
            "published": 3,
            "tags": [
                "spiral",
                "ai",
                "chat",
                "gpt",
                "chatgpt3"
            ],
            "usePreview": 0,
            "username": "fragcula",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "// Prompted form ChatGPT3, if you think it ripped you off let me know, it must have gotten the code from somewhere?\n// Inspired to ask ChatGPT3 by https://www.shadertoy.com/view/dljGWz (https://www.shadertoy.com/user/BitsnBobs)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize coordinates to [-1, 1]\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n\n    // Compute distance from center\n    float r = length(uv);\n\n    // Compute angle around circle\n    float a = atan(uv.y, uv.x);\n\n    // Compute sine wave\n    float y = sin(a*20.0 + r*10.0 + iTime*5.0); // ChatGPT3 used iGlobalTime here.\n\n    // Compute color from sine wave\n    vec3 col = vec3(y, y*0.5+0.5, y*0.25+0.75);\n\n    // Output color\n    fragColor = vec4(col, 1.0);\n}\n\n/*\nwrite a shadertoy.com fragment shader that draws a sine wave wrapped in a circle\n\nHere is a ShaderToy fragment shader that draws a sine wave wrapped in a circle:\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize coordinates to [-1, 1]\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n\n    // Compute distance from center\n    float r = length(uv);\n\n    // Compute angle around circle\n    float a = atan(uv.y, uv.x);\n\n    // Compute sine wave\n    float y = sin(a*20.0 + r*10.0 + iGlobalTime*5.0);\n\n    // Compute color from sine wave\n    vec3 col = vec3(y, y*0.5+0.5, y*0.25+0.75);\n\n    // Output color\n    fragColor = vec4(col, 1.0);\n}\n\nThis shader uses the following uniforms:\n\n    iResolution: the dimensions of the output image in pixels\n    iGlobalTime: the current time in seconds\n\nIt expects a vec2 coordinate in screen space (i.e., fragCoord) and outputs a vec4 color value (i.e., fragColor). The mainImage function is the entry point for the fragment shader and is called once for each pixel of the output image.\n\nThe shader first normalizes the screen space coordinates to the range [-1, 1] using the dimensions of the output image. It then computes the distance from the center of the circle (r) and the angle around the circle (a) using the normalized coordinates.\n\nNext, the shader computes the sine wave using the angle and distance, and uses the value of the sine wave to compute a color value. Finally, it outputs the color value as the fragment color. The sine wave is animated over time by using the iGlobalTime uniform in the computation of the sine wave.\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}