{
    "Shader": {
        "info": {
            "date": "1561923467",
            "description": "Assumes the webcam feed aspect ratio matches the display aspect ratio because I'm too tired to math right now (and please don't show up in the comments telling me how)",
            "flags": 2,
            "hasliked": 0,
            "id": "ttsSzr",
            "likes": 19,
            "name": "Game Boy Camera",
            "published": 3,
            "tags": [
                "camera"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1642
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 palette[4];\n    palette[0] = vec3(  8, 24, 32)/255.;\n    palette[1] = vec3( 52,104, 86)/255.;\n    palette[2] = vec3(136,192,112)/255.;\n    palette[3] = vec3(224,248,208)/255.;\n    \n    vec4 res;\n    res.xy = vec2(128,112); // \"square\" resolution\n    res.zw = vec2(res.y*iResolution.x/iResolution.y,res.y); // widescreen resolution\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x=1.-uv.x; // optional mirror selfie mode\n    uv = floor(uv*res.zw);\n    \n    int value = 0;\n    if (abs(uv.x*2.-res.z) < res.x)\n    {\n\t    float gray = dot(texture(iChannel0,uv/res.zw).rgb, vec3(0.2126,0.7152,0.0722));\n\t    \n        float dither = texture(iChannel1, uv/8.).r;\n\t    value = int(floor(gray*3.+dither));\n    }\n    \n    fragColor = vec4(palette[value], 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}