{
    "Shader": {
        "info": {
            "date": "1614848271",
            "description": "Doom Fire, based on https://fabiensanglard.net/doom_fire_psx/index.html.",
            "flags": 32,
            "hasliked": 0,
            "id": "WtVfRc",
            "likes": 3,
            "name": "Doom Fire PSX",
            "published": 3,
            "tags": [
                "fire",
                "doom"
            ],
            "usePreview": 0,
            "username": "gwiazdorrr",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "#define FIRE_WIDTH 320.0\n#define FIRE_HEIGHT 160.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= FIRE_WIDTH;\n    uv.y *= FIRE_HEIGHT;\n    int index = int(texelFetch(iChannel0, ivec2(uv), 0).r);\n    fragColor = colors[index];\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FPS 20.0\n#define WIND_STRENGTH 4\n#define WIND_START_OFFSET -1\n#define DURATION_ON 10.0\n#define DURATION_OFF 5.0\n\n#define M_PI 3.1415926535897932384626433832795\n\n// https://www.shadertoy.com/view/tdXXRM\nfloat noise(vec2 p, float t) {\n    float ta = t*.654321;\n    float tb = t*(ta*.123456);\n    return fract(sin(mod(p.x*ta+p.y*tb, M_PI))*5678.);\n}\n\nint sampleFire(vec2 coords) {\n    return int(texelFetch(iChannel0, ivec2(coords), 0).r);\n}\n\nint spreadFire(vec2 coords, float t) {\n\n    // how likely it is that the value stays the same?\n    // the tutorial does this from the perspective of a source fire state; source\n    // state can affect one of four pixels above, so a chance of a pixel being unaffected\n    // is (3/4)^4\n    float copyChance = pow(float(WIND_STRENGTH-1)/float(WIND_STRENGTH), float(WIND_STRENGTH));\n    \n    float rand = noise(coords, t);\n    int state;\n    if (rand < copyChance) {\n        // value unchanged\n        state = sampleFire(coords);\n    } else {\n        // normalize the random\n        float r = (rand - copyChance) / (1.0 - copyChance);\n        // pick source index\n        float offset = r * float(WIND_STRENGTH) + float(WIND_START_OFFSET);\n        // sample from the row below with a horizontal offset\n        state = sampleFire(coords + vec2(floor(offset), -1.0));\n        // wind down (50% chance)\n        if (fract(offset) > 0.5) {\n            state -= 1;\n        }\n    }\n    return state;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int result;// = sampleFire(fragCoord);\n    float t = iTime;\n    \n#ifdef FPS\n    t *= FPS;\n    float previousT = (iTime - iTimeDelta) * FPS;\n    if (fract(t) > fract(previousT)) {\n        // the same frame, don't update\n        result = sampleFire(fragCoord);\n    }\n    else\n#endif    \n    {\n        if (fragCoord.y < 1.0) {\n            // toggle bottom row on and off\n            if (mod(iTime, DURATION_ON + DURATION_OFF) < DURATION_ON) {\n                result = colors.length() - 1;\n            } else {\n                result = 0;\n            }\n        } else {\n            result = spreadFire(fragCoord, t);\n        }\n    }\n        \n    fragColor.r = float(result);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define RGB(x) vec4(float((x >> 16) & 0xFF) / 255.0, float((x >> 8) & 0xFF) / 255.0, float(x & 0xFF) / 255.0, 1.0)\n\nvec4 colors[] = vec4[](\n    RGB(0x070707),\n    RGB(0x1f0707),\n    RGB(0x2f0f07),\n    RGB(0x470f07),\n    RGB(0x571707),\n    RGB(0x671f07),\n    RGB(0x771f07),\n    RGB(0x8f2707),\n    RGB(0x9f2f07),\n    RGB(0xaf3f07),\n    RGB(0xbf4707),\n    RGB(0xc74707),\n    RGB(0xDF4F07),\n    RGB(0xDF5707),\n    RGB(0xDF5707),\n    RGB(0xD75F07),\n    RGB(0xD7670F),\n    RGB(0xcf6f0f),\n    RGB(0xcf770f),\n    RGB(0xcf7f0f),\n    RGB(0xCF8717),\n    RGB(0xC78717),\n    RGB(0xC78F17),\n    RGB(0xC7971F),\n    RGB(0xBF9F1F),\n    RGB(0xBF9F1F),\n    RGB(0xBFA727),\n    RGB(0xBFA727),\n    RGB(0xBFAF2F),\n    RGB(0xB7AF2F),\n    RGB(0xB7B72F),\n    RGB(0xB7B737),\n    RGB(0xCFCF6F),\n    RGB(0xDFDF9F),\n    RGB(0xEFEFC7),\n    RGB(0xFFFFFF)\n);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}