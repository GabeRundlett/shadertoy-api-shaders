{
    "Shader": {
        "info": {
            "date": "1581271044",
            "description": "Added more details to the cake!",
            "flags": 32,
            "hasliked": 0,
            "id": "wldSzB",
            "likes": 3,
            "name": "Office Cake v2",
            "published": 3,
            "tags": [
                "cakepathtraced"
            ],
            "usePreview": 0,
            "username": "angelo12",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "\n#define INV_GAMMA  0.454545\n\nvoid\nmainImage(out vec4 fragColor, in vec2 fragPos)\n{\n    vec2 uv = (fragPos) /iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    if(iFrame > 0)\n    {\n        col = texture(iChannel0, uv).xyz;\n        col /= float(iFrame);\n    }\n\n    col *= 2.5;// Exposure\n    col = pow(col, vec3(INV_GAMMA)); //Gamma correction\n    fragColor = vec4(col, 1.0);\n}   ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define M_PI 3.1415926535\n#define M_TAU M_PI*2.0\n\nfloat seed_;\n\nvec2 \nrotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat \nsdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat \nsdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat \nsdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat\nhash(float seed)\n{\nuvec2 p = floatBitsToUint(vec2(seed+=.1,seed+=.1));\np = 1103515245U*((p >> 1U)^(p.yx));\nuint h32 = 1103515245U*((p.x)^(p.y>>3U));\nuint n = h32^(h32 >> 16);\nreturn float(n)/float(0xffffffffU);\n}\n\nmat3\nSetCamera(vec3 ro, vec3 ta, float roll)\n{\n    vec3 f, temp, r, u;\n    f = normalize(ta - ro);\n    temp = normalize(vec3(sin(roll), cos(roll), 0.0));\n    r = normalize(cross(temp, f));\n    u = normalize(cross(f, r));\n\n    return mat3(r, u, f);\n}\n\nfloat\nsdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\n#define UOP(dist, ID) res = uop(res, vec2(dist, ID))\nvec2\nuop(vec2 a, vec2 b)\n{\n    return (a.x < b.x) ? a : b;\n}\n\n#define DEF_ID 0.0\n#define LEFT_WALL_ID 1.0\n#define RIGHT_WALL_ID 2.0\n#define LIGHT_ID 5.0\n#define CAKE_ID 6.0\n#define TORUS_ID 7.0\n#define CHERRY_ID 8.0\n\n#define EPS 0.01\nvec2\nMap(vec3 p)\n{\n    vec2 res = vec2(1e10, -1.0);\n\n    //Interior\n    if(p.x > -0.27 && p.x < 0.27) \n    if(p.z > -0.65 && p.z < 0.5) \n    if(p.y > -0.1 && p.y < 0.25) \n    {\n        //Center cornerll box items\n        UOP(sdSphere(p - vec3(0.07, 0.13, -0.18), 0.04), DEF_ID);\n        vec3 q = p;\n        q.xz = rotate(q.xz, -0.4);\n        UOP(sdBox(q - vec3(-0.12, 0.0, -0.12), vec3(0.02, 0.2, 0.02)), DEF_ID);\n\n        //Cake\n        vec3 pCake = p - vec3(0.0f, 0.0f, -0.15f);\n        float cakeRad = 0.13;\n        //cakeRad -= 0.0005*(0.5 + 0.5*sin(200.0 * p.y));\n        UOP(sdRoundedCylinder(pCake,  cakeRad, 0.012f, 0.08), CAKE_ID);\n\n        //Candle\n        vec3 pDecoration = pCake - vec3(0.0, 0.097, 0.0);   \n\n        //Candy Spheres\n        if(pDecoration.y > -0.01 && pDecoration.y < 0.058) //No need to evaluate this for every ray\n        {\n            float rSphere = 0.024;\n            float radius = 0.21;\n            float numElements = 8.0;\n            vec3 ring = pDecoration;\n            for(float i = 0.0; i < numElements; ++i){\n                float angle = 2.0 * M_PI * i / numElements; \n                vec3 rotatedPos = ring - vec3(0.0 - radius*cos(angle), 0.0, -radius*sin(angle));\n                float tRad = 0.005;\n                tRad -= 0.0007*(0.5 + 0.5*sin(16.0 * atan(rotatedPos.x, rotatedPos.z)));\n                UOP(sdTorus(rotatedPos, vec2( 0.02, tRad)),TORUS_ID);\n                UOP(sdSphere(rotatedPos - vec3(0.0, rSphere, 0.0), rSphere ),CHERRY_ID);\n            }\n        }\n    }\n\n    //Exterior box\n    {\n        //Bottom wall\n        UOP(sdBox(p - vec3(0.0, -0.1, 0.0), vec3(0.5, EPS, 1.0)), DEF_ID);\n        UOP(sdBox(p - vec3(-0.5, 0.2, 0.0), vec3(EPS, 0.5, 1.0)), LEFT_WALL_ID);\n        UOP(sdBox(p - vec3(0.5, 0.2, 0.0), vec3(EPS, 0.5, 1.0)), RIGHT_WALL_ID);\n\n        //Ceiling wall\n        UOP(sdBox(p - vec3(0.0, 0.7, 0.0), vec3(0.5, EPS, 1.0)), DEF_ID);\n        UOP(sdBox(p - vec3(0.0, 0.7, 0.0), vec3(0.2, EPS, 0.2)), LIGHT_ID);\n\n        //Back wall\n        UOP(sdBox(p - vec3(0.0, 0.0, 0.3), vec3(1.0, 1.0, EPS)), DEF_ID);\n    }\n\n    return res;\n}\n\n#define MAX_STEPS 200\n#define MIN_DIST 0.001\n#define MAX_DIST 20.0\nvec2\nRayMarch(vec3 ro, vec3 rd)\n{\n    vec2 res = vec2(-1.0, -1.0);\n    float t = 0.0;\n    for(int i = 0; i < MAX_STEPS && t < MAX_DIST; ++i)\n    {\n        vec2 hit = Map(ro + t*rd);\n\n        if(abs(hit.x) < t*MIN_DIST)\n        {\n            res = vec2(t, hit.y);\n            break;\n        }\n\n        t += hit.x;\n    }\n    return res;\n}\n\nvec3\nCalcNormal(vec3 p)\n{\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(Map(p + e.xyy).x - Map(p - e.xyy).x,\n                          Map(p + e.yxy).x - Map(p - e.yxy).x,\n                          Map(p + e.yyx).x - Map(p - e.yyx).x\n    ));\n\n}\n\nstruct Material\n{\n    vec3 col;\n    float emi;\n    float rough;\n    float fresnel;\n    vec2 pad;\n};\n\nMaterial\nGetMaterialFromID(float id, vec3 p, vec3 N)\n{\n    Material mat;\n    //Default\n    mat.col = vec3(1.0);\n    mat.emi = 0.0;\n    mat.rough = 1.0; //1.0 is maximum roughness 0.0 is perfectly reflective\n    mat.fresnel = 0.0;\n    if(id == DEF_ID) return mat; //fast path for default mat\n\n    if(id == CAKE_ID)\n    {\n        mat.col = vec3(0.06, 0.04, 0.02);\n        float row = 1.0;\n        if(N.y < 0.1)\n        {\n            row = mod(floor((p.y - 0.045) * 37.0),2.0);\n            mat.col = row * mat.col + (1.0 - row) * (vec3(1.0, 0.84, 0.3));\n            mat.rough = 0.3 * (row) + (1.0 - row) * 1.0;\n        }\n        else\n        {\n            mat.col.r *= 2.0;\n            mat.rough = 0.1;// * (1.0 - row);\n        }\n    }\n    else if(id == LEFT_WALL_ID)\n    {\n        mat.col = vec3(1.0, 0., 0.0);\n    }\n    else if(id == RIGHT_WALL_ID)\n    {\n        mat.col = vec3(0.0, 1.0, 1.0);\n    }\n    else if(id == LIGHT_ID)\n    {\n        mat.col = vec3(1.0, 0.8, 0.54);\n        mat.emi = 1.6;\n    }\n    else if(id == CHERRY_ID)\n    {\n        mat.col = vec3(0.8, 0.0, 0.0);\n        mat.rough = 0.5;\n        mat.fresnel = 1.0;\n    }\n    return mat;\n}\n\nvec3\nCosineWeightedRay(vec3 N, float seed)\n{\n    float u = hash(seed + 70.93);\n    float v = hash(seed + 21.43);\n\n    float a = M_TAU*v;\n    u = 2.0*u - 1.0;\n\n    return(normalize(N + vec3(sqrt(1.0 - u*u)*vec2(cos(a), sin(a)), u)));\n}\n#define saturate(val) clamp(0.0, 1.0, val)\n\nvec3\nCalcRayDirection(vec3 originalRd, vec3 reflectionDir, vec3 normal, float rough, float seed)\n{\n    vec3 newRd = vec3(0.0);\n    vec3 randDir = CosineWeightedRay(normal, seed);\n    if(rough >= 1.0)\n    {\n        newRd = randDir;\n    }\n    else\n    {\n        newRd = reflectionDir*(saturate(1.0 - rough)) + rough * randDir;\n        newRd = normalize(newRd);\n    }\n\n    return newRd;\n}\n\n#define GI_BOUNCES 4\nvec3\nRender(vec3 ro, vec3 rd)\n{\n    //Ray setup\n    vec3 tot = vec3(0.0);\n    vec3 rayCol = vec3(1.0);\n\n    for(int bounce = 0; bounce < GI_BOUNCES; ++bounce) \n    {\n        //Unpacking Ray results\n        vec2 res = RayMarch(ro, rd);\n        float t = res.x;\n        float id = res.y;\n\n        //Geometry        \n        vec3 P = ro + t*rd;\n        vec3 N = CalcNormal(P);\n        vec3 R = reflect(rd, N);\n\n        //Material\n        Material mat = GetMaterialFromID(id, P, N); \n        rayCol *= mat.col;\n        float emi = mat.emi;\n        float fresnel = mat.fresnel;\n\n        //Lighting\n        vec3 colAcc = vec3(0.0); \n        vec3 indirect = emi * rayCol;\n        float fre = fresnel * pow( saturate(1.0+dot(N,rd)), 5.0 );\n\n        //Shading\n        colAcc += 1.00 * indirect;\n        colAcc += 0.07 * fre;\n        tot += colAcc;\n\n        //Next bounce ray Dir\n        float timeSeed =  76.2 + 73.1*float(bounce) + seed_ + 17.7*float(iFrame);\n        rd = CalcRayDirection(rd, R, N, mat.rough, timeSeed);\n        ro = P;\n    }\n\n    return tot;\n}\n\nvoid\nmainImage(out vec4 fragColor, in vec2 fragPos)\n{\n    //Random number generator\n    float seed = dot(fragPos, vec2(12.9898, 78.233)) + 1131.1*float(iFrame);\n    seed_ = hash(seed * 81.94);\n    vec2 offset = - 0.5  + vec2(hash(seed + 13.271), hash( seed + 63.216));\n\n    //Initializing color to the prev frame value\n    vec2 screen = (fragPos) / iResolution.xy;\n    vec3 col = texture(iChannel0, screen).xyz;\n    if(iFrame == 0) col = vec3(0.0);\n\n    //Camera setup\n    float roll = 0.0;\n\n    float nearP = 1.0;\n    vec3 ta = vec3(0.0, 0.22, 0.0);\n    vec3 ro = ta + vec3(0.0, 0.0, -1.0);\n    mat3 cam = SetCamera(ro, ta, roll);\n    vec2 uv = ((fragPos + offset) - 0.5*iResolution.xy) / iResolution.y;\n    vec3 rd = cam * normalize(vec3(uv, nearP));\n\n    col += Render(ro, rd);\n\n    fragColor = vec4(col, 1.0);\n}   \n\n/*\n\tShader Sundays! (6/52) \n\t\"Office Cake Part 2\"\n\t\n\tTuned most of the cake values to make it look nicer, there's more I would have liked to do with it but \n\tmaybe I'll revisit it some other time. \n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}