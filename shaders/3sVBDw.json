{
    "Shader": {
        "info": {
            "date": "1607292278",
            "description": "A night random shader to relax after a day of struggling to https certificate issues.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sVBDw",
            "likes": 2,
            "name": "Random sheet",
            "published": 3,
            "tags": [
                "random",
                "robot",
                "sheet",
                "feet"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nconst float PI = 3.141592653;\n#define sat(a) clamp(a, 0.,1.)\n\nfloat cir(vec2 p, float r, float amp)\n{\n    p *= .5;\n    float sspd = (amp < 1. ? 1. : -1.);\n    float an = atan(p.y, p.x)+PI*.75+iTime*(r*.1+.5)+iTime*sspd;\n    float v = sin(an*10.);\n    \n    float sCnt = 5.;\n    \n    float freq = texelFetch(iChannel0, ivec2(int(sCnt*abs(atan(p.y, p.x))/PI),0),0).x*.25;\n    if (amp > 1.)\n        v=asin(sin(an*10.))/(PI*.5);\n    \n    return length(p)-r-amp*v*0.01+freq;\n}\n\nfloat sub(float a, float b)\n{\n    return max(a, -b);\n}\n\nvec3 rdr(vec2 uv)\n{\n    uv += vec2(asin(sin(-iTime*5.)), cos(iTime*5.))*.15;\n    vec3 col = vec3(18.,22.,60.)/255.;\n    vec3 red = vec3(252.,139.,111.)/255.;\n    vec3 green = vec3(113.,197.,157.)/255.;\n\n    float th = 0.008;\n    float sp = 0.05;\n    \n    float r = .02;\n    //float a = abs(cir(uv, r, 0.01))-th;\n    //col = mix(col, vec3(1.), 1.-sat(a*400.));\n    \n    float a;\n    int i = 0;\n    float bps = 2.;\n    float beat = mod(iTime, 1./bps)*bps;\n    int cnt = int(mix(2., 8., mod(iTime, 10.)/10.));\n    while (i < cnt)\n    {\n        float fi = float(i);\n        r += sp+texelFetch(iChannel0, ivec2(i*5, 0.), 0).x*.05;\n        a = abs(cir(uv, r, fi/2.5+.5*sin(iTime+fi)))-th;\n        vec3 rgb = (mod(fi, 2.) < 0.1 ? red : green);\n    \tcol = mix(col, rgb, 1.-sat(a*iResolution.x*.025));\n        col += .5*rgb*(1.-sat(a*5.))*sat(pow(1.-beat, .5)+.2);\n    \t++i;\n    }\n    \n    col = mix(col, 2.*col.zyx*vec3(sin(iTime)*.2+.8, uv*.5+.5), sin(iTime*.5));\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    vec2 ouv = uv;\n\tuv *= 4.;\n    \n//    uv *= (sin(iTime*.2)*.2+.5)+.1*sin(iTime*.34);\n    uv *= sin(iTime)*.5+1.;\n    \n    uv *= r2d(sin(iTime*.5)*.5+length(ouv));\n    uv += vec2(sin(iTime), cos(iTime));\n    \n    float rep = mix(3.,.75, float(mod(iTime, 6.) < 3.));\n    uv = mod(uv+rep*.5, rep)-rep*.5;\n    vec3 col = rdr(uv/rep);\n\tvec3 a = col + vec3(.23,.54,.36)*1.0-abs(ouv.x*2.);\n    vec3 b = col + vec3(.23,.54,.36).zxy*abs(ouv.x*2.);\n    col = mix(a, b, sin(iTime)*.5+.5);\n    col = pow(col, vec3(.45));\n    fragColor = vec4(col.zyx,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}