{
    "Shader": {
        "info": {
            "date": "1613226340",
            "description": "a sense of self-lost in the gyroid shape. ",
            "flags": 64,
            "hasliked": 0,
            "id": "3t3Bzs",
            "likes": 4,
            "name": "The Lost Self",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p,float scale, float thickness, float bias){\n    p*=scale;\n    \n    // can also play with the p and p.zxy by adding some numbers \n    // scale needs to add the largest multiplers in either p or p.zxy \n    // return abs(dot(sin(p*2.),cos(p.zxy*1.23))-bias)/(scale*2.)-thickness;\n\n    return abs(dot(sin(p),cos(p.zxy))-bias)/scale-thickness;\n    \n    }\n\nfloat GetDist(vec3 p) {\n    float box = sdBox(p, vec3(1));\n    \n    // wanting something organic? the scales for two should not be multiplicable by each other (ex.: can't be 4 and 8)\n    float g1 = sdGyroid(p,5.,.02,1.5);\n    float g2 = sdGyroid(p+vec3(1.),8.85,.02,2.);\n    float g3 = sdGyroid(p+vec3(2.),15.85,.03,0.32);\n    float g4 = sdGyroid(p+vec3(3.),28.85,.04,1.2);\n    float g5 = sdGyroid(p+vec3(3.),34.20,.05,1.3);\n    \n    //float g = max(g1,g2);//union \n  //float g = max(g1,-g2);//subtraction \n    \n    g1-=g2*.3;//bump mapper \n    g1-=g3*.2;//bump mapper \n    g1+=g4*.1;//bump mapper \n    \n    //float d=max(box,g1*.8);// intersect the box \n   \t\n    float d = g1*.8;\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    float fft  = texture( iChannel0, vec2(uv.x-1.)).x; \n\t\n    // second texture row is the sound wave\n\tfloat wave = texture( iChannel0, vec2(uv.x-1.,0.1) ).x;\n\t\n\t// convert frequency to colors\n\tvec3 soundEl = vec3(fft,0.5*fft*(1.0-fft),fft );// * fft;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3, -3)*S(-.01,0.01,fft)*0.5;\n    ro.yz *= Rot(abs(sin(iTime*.2))*S(-.01,0.028,fft)*3.14+1.);\n    ro.xz *= Rot(cos(iTime*.5*S(-.01,0.01,fft))*6.2831);\n    \n    // mouse controls 3d \n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    //zoom factor \n    vec3 rd = GetRayDir(uv, ro, vec3(0),2.*sin(iTime*0.5*S(-0.01,0.1,fft)));// S(0.,0.2,fft)*5.\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \tcol+=n*.5+.5;// 0 <> 1 \n        col -= dif*soundEl;  \n    \n        //ambient occulusion - cheaper \n    float g2 = sdGyroid(p+vec3(1.),8.85,.02,2.);\n        col*=S(-.1,.1,g2)-soundEl;\n\n    }\n    \n   // col*=0.;// for 2d\n    d = sdGyroid(vec3(uv.x,uv.y,iTime*.1),10.,.02,.3);\n   //col+=d*.8; // for 2d \n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 25418,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/yitingliu/you"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}