{
    "Shader": {
        "info": {
            "date": "1725538863",
            "description": "performance test",
            "flags": 32,
            "hasliked": 0,
            "id": "Mc2fWK",
            "likes": 0,
            "name": "blitFrameBuffer test perf test",
            "published": 3,
            "tags": [
                "blitframebuffer"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n        vec4 neighbor = texture(iChannel0, uv );\n    // Output to screen\n    fragColor = neighbor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    // Size of a single pixel in texture coordinates\n    vec2 pixelSize = 1.0 / iResolution.xy;\n\n    // Initialize variables for the sum of neighbor values\n    float sum = 0.0;\n    int count = 0;\n\n    // Loop through a 9x9 kernel around the current pixel\n    for (int y = -33; y <= 33; y++) {\n        for (int x = -33; x <= 33; x++) {\n            // Offset texture coordinates for neighboring pixels\n            vec2 offset = vec2(float(x), float(y)) * pixelSize;\n            vec4 neighbor = texture(iChannel0, uv + offset);\n\n            // Here we assume we are interested in the red channel (neighbor.r)\n            sum += neighbor.r; // Sum up the red values\n            count += 1; // Keep track of the number of samples\n        }\n    }\n\n    // Calculate the average value of the neighbors\n    float average = sum / float(count);\n\n    // Apply some simple rule based on the average\n    float newState = average > 0.5 ? 1.0 : 0.0; // Example rule: if average > 0.5, set to 1, else 0\n\n    // Set the fragment color based on the new state\n    fragColor = vec4(vec3(newState), 1.0); // Grayscale output\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}