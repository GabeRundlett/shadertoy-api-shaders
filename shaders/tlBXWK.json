{
    "Shader": {
        "info": {
            "date": "1567089624",
            "description": "Having fun with motion blur\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tlBXWK",
            "likes": 34,
            "name": "Storming Cubes",
            "published": 3,
            "tags": [
                "cube",
                "storm"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1032
        },
        "renderpass": [
            {
                "code": "// Storming Cubes\n// inspired by Inigo Quilez live stream shader deconstruction\n// Leon Denise (ponk) 2019.08.28\n// Licensed under hippie love conspiracy\n\n// Using code from\n// Inigo Quilez\n// Morgan McGuire\n\n// tweak zone\nconst float range = .4;\nconst float radius = .065;\nconst float blend = .7;\nconst float balance = 2.0;\nconst float falloff = 1.5;\nconst int count = 5;\n\n// increment it at your own GPU risk\nconst float motion_frames = 10.;\n\n// tool box\nconst float TAU = 6.283;\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat smoothmin (float a, float b, float r) { float h = clamp(.5+.5*(b-a)/r, 0., 1.); return mix(b, a, h)-r*h*(1.-h); }\nfloat sdBox (vec3 p, vec3 b) { vec3 d = abs(p) - b; return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)); }\nvec3 look (vec3 eye, vec3 target, vec2 anchor, float fov) {\n    vec3 forward = normalize(target-eye);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward * fov + right * anchor.x + up * anchor.y);\n}\n\nfloat geometry (vec3 pos, float time) {\n    float a = 1.0;\n    float scene = 1.;\n    float t = time * .5;\n    float ft = smoothstep(0.,.9,pow(fract(t),.7));\n    t = floor(t)+ft;\n    float w = sin(ft*3.1415);\n    for (int i = count; i > 0; --i) {\n        pos.xy *= rot(cos(t)*balance/a+a*2.);\n        pos.zy *= rot(sin(t)*balance/a+a*2.);\n        pos = abs(pos)-(range+w*.2)*a;\n        \n        a /= falloff;\n    }\n    scene = sdBox(pos, vec3(radius*(1.1-w)));\n    return scene;\n}\n\nfloat raymarch ( vec3 eye, vec3 ray, float time, out float total ) {\n    total = 0.0;\n    const int count = 10;\n    for (int index = count; index > 0; --index) {\n        float dist = geometry(eye+ray*total,time);\n        total += dist;\n        if (dist < 0.001 * total)\n            return float(index)/float(count);\n    }\n    return 0.;\n}\n\nvec3 camera (vec3 eye) {\n    vec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n    if (iMouse.z > 0.5) {\n        eye.yz *= rot(mouse.y*3.1415);\n        eye.xz *= rot(mouse.x*3.1415);\n    } else {\n        eye = vec3(1,3.5,1.);\n    }\n    return eye;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 eye = camera(vec3(0,0,3.5));\n    vec3 ray = look(eye, vec3(0), uv, 2.);\n    float total = 0.;\n    fragColor = vec4(0);\n    for (float index = motion_frames; index > 0.; --index) {\n        float dither = random(ray.xy+fract(iTime+index));\n        float time = iTime+(dither+index)/10./motion_frames;\n        fragColor += vec4(raymarch(eye, ray, time,total))/motion_frames;\n    }\n    fragColor = vec4(pow(fragColor.r, .3));\n    \n    // extra color\n    fragColor.rgb *= vec3(.8,.85,.8);\n    float d = smoothstep(4.,0.,total);\n    fragColor.rgb += vec3(0.9,.5,.4) * d;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}