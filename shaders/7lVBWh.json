{
    "Shader": {
        "info": {
            "date": "1664457615",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "7lVBWh",
            "likes": 3,
            "name": "Test 3D projection",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "#define N_tile 21.\nvec3 cell_shade(in vec2 uv, in vec2 uv_floor) {\n    vec3 res = vec3(.0);\n    \n    // Activation/Step things\n    float radius = length(uv);\n    float ring_dist = 0.7;\n    float ring_thickness = 0.15;\n    float activation_ext = smoothstep(ring_dist+ring_thickness - 0.04, ring_dist+ring_thickness, radius);\n    float activation_int = (1.-smoothstep(ring_dist-0.04, ring_dist, radius));\n    float activation_ring = (1.-activation_int)*(1.-activation_ext);\n    \n    // Color things\n    float uv_floor_x_value = 1.;\n    float uv_floor_y_value = 1.;\n   \n    vec3 col_interior = vec3(uv_floor_x_value*uv_floor_y_value, 0., 0.);\n    vec3 col_exterior = vec3(0., uv_floor_x_value*uv_floor_y_value, 0.);\n    vec3 col_ring = vec3(0., 0., uv_floor_x_value*uv_floor_y_value);    \n    \n    //Render\n    res += col_interior*activation_int;\n    res += col_exterior*activation_ext;\n    res += col_ring*activation_ring;\n    \n    return res;\n}\n\nvec2 shape_interpolation(vec2 shape1, vec2 shape2, float ratio){\n    return mix(shape1, shape2,  smoothstep(0.0,1.0, ratio));\n}\n\n\nvec3 Sphere(in vec2 st, float radius) {\n    //return sphere_coord;\n    vec2 uv = (st/radius);\n    vec2 sphere_uv = normalize(uv)*(asin(length(uv)) / 3.1415926);\n    float mask = 1.-step(radius, length(st));\n    return vec3(sphere_uv, mask);\n}\n\nvec3 Parabole(vec2 uv, float radius){\n    vec3 res = vec3(.0, .0, 0.);\n    vec2 uv_parabol = (uv)*(pow(length(uv), -.5))*1./pow(radius, -.5);// Change le pow pour du turfu\n    float mask =(1.-step(radius, length(uv)));\n    return vec3(uv_parabol, mask);\n}\n\n\nvec3 Gaussian2D(vec2 uv, float radius){\n    vec3 res = vec3(.0, .0, 0.);\n    \n    float sigma = 5.1;\n    vec2 uv_Gaussian = uv * exp(dot(uv, uv)*sigma)/(2.*sqrt(sigma));    \n    float mask =(1.-step(radius, length(uv)));\n    return vec3(uv_Gaussian, mask);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy-.5;\n    \n    float radius = .4;\n    vec3 parabole = Parabole(uv, radius);    \n    vec2 parabole_uv_floor = floor(parabole.xy*N_tile);// *-1. move the center on the corner\n    vec3 col_parabole = cell_shade((fract(parabole.xy*N_tile-.5)-.5)*2., parabole_uv_floor)*(parabole.z);\n    \n    //Lumi√®re add *pow(sphere_uv.z*1.5, 2.)    \n    vec3 sphere = Sphere(uv, radius);    \n    vec2 sphere_uv_floor = floor(sphere.xy*(N_tile));// *-1. move the center on the corner\n    vec3 col_sphere = cell_shade((fract(sphere.xy*N_tile*radius*2.-.5)-.5)*2., sphere_uv_floor)*(sphere.z); \n   \n   \n    vec3 gaussian_uv = Gaussian2D(uv, radius);    \n    vec2 gaussian_uv_floor = floor(gaussian_uv.xy*N_tile);// *-1. move the center on the corner\n    vec3 col_gaussian = cell_shade((fract(gaussian_uv.xy*N_tile*2.-.5)-.5)*2., gaussian_uv_floor)*(gaussian_uv.z); \n   \n   \n   \n    vec2 sphere2 = sphere.xy*N_tile*radius*2.-.5;\n    vec2 gaussian2 = gaussian_uv.xy*N_tile*2.-.5;\n    vec2 parabole2 = parabole.xy*N_tile-.5;\n    \n    vec2 interp = shape_interpolation(parabole2, gaussian2, .5*cos(iTime)+.5);\n    vec3 col_interp = cell_shade((fract(interp.xy)-.5)*2., sphere_uv_floor)*(sphere.z); \n    \n    \n    // Plane texture\n    vec2 cell_uv = (fract(uv*(N_tile)+vec2(0.5,0.5))-.5)*2.;\n    vec2 cell_uv_floor = floor(uv*N_tile+.5);\n    vec3 col_shade = cell_shade(cell_uv, cell_uv_floor)*(1.-parabole.z);\n    \n\n    // Output to screen\n    fragColor = vec4(col_shade+col_interp,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}