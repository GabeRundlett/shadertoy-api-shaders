{
    "Shader": {
        "info": {
            "date": "1719249664",
            "description": "/*originals https://www.shadertoy.com/view/WdGGWK*/\nhttps://www.shadertoy.com/view/WstXRH\nthx   Flopine",
            "flags": 0,
            "hasliked": 0,
            "id": "43cXzj",
            "likes": 1,
            "name": "combination of two",
            "published": 3,
            "tags": [
                "cube",
                "sphere",
                "combination"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "\n#define ITER 100.\n#define PI 3.141592\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a) );}\n\nfloat sc(vec3 p, float s) \n{\n    p = abs(p);\n    p = max(p, p.yzx);\n    return min(p.x, min(p.y, p.z)) - s;\n}\n\nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\n\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat ring (vec3 p, float r, float w)\n{return max(abs(cyl(p, r,1.))-w,abs(p.z)-0.08);}\n\nfloat SDF (vec3 p)\n{\n    float r = 5.;\n    float w = 0.01;\n    float d = 1e10;\n\tfor (int i = 0; i<=6; i++)\n    {\n        float ratio = float(i)/5.;\n        r-=ratio;\n        w += ratio*0.1;\n        p.xz *= rot(iTime*0.5);\n        p.yz *= rot(iTime*0.2);\n        d = min(d, ring (p,r,w));\n    }  \n    return d;\n}\n\n\nfloat cage (vec3 p)\n{\n    float size = .6;\n    float d = 10000.;\n    for (float i = 0.; i<5.; i++)\n    {\n        float ratio = .1;\n        size += ratio;\n        p.xz *= rot(iTime*0.5*i);\n          p.xy *= rot(iTime*0.5*i);\n        d = min(d, max(-sc(p, size*0.85), box(p,vec3(size))));\n    }\n    return d;\n}\n\nfloat g1 = 0.;\nfloat misfit (vec3 p)\n{\n    p.xy += vec2(\n        mix(0.,-0.5+texture(iChannel0, p.yz*0.05).r,exp(-fract(iTime*0.05)*8.)*6.),\n         mix(0.,-.5+texture(iChannel0, p.xz*0.01).r,exp(-fract(iTime*0.05)*8.)*6.)\n    );\n    float d = length(p)+(.1-exp(-fract(-iTime*0.15)*8.)*6.);\n    g1 += 0.1/(0.1+d);\n    return d;\n}\n\nfloat SDF2 (vec3 p)\n{return min(misfit(p),cage(p));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n\n\n vec2 uv2= 2.*(fragCoord/iResolution.xy)-1.;\n\tuv2.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro2 = vec3(0.001,0.001,-6.),\n        rd2 = normalize(vec3(uv2,1.)),\n        col2 = vec3(0.),\n        p2 = ro2;\n    \n    float shad2 = 0.;\n    bool hit2 = false;\n    \n    for (float i = 0.; i<64.; i++)\n    {\n        float d2 = SDF(p2);\n        if (d2<0.001)\n        {\n            shad2 = i/64.;\n            hit2 = true;\n            break;\n        }\n        \n        p2+=d2*rd2;\n    }\n    \n    if (hit2)\n    {\n        col2 = vec3(1.-shad2);\n    }\n    vec3 ro = vec3(0.,0.,-2.5),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.);\n    \n    float shad = 0.;\n    bool hit = false;\n    \n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF2(p);\n         \n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        p += d*rd*0.5;\n    }\n    \n    if (hit) col = vec3(1.-shad);\n\n    col += g1*vec3(0.5,0.5,1.5)*0.1;\n\n    fragColor = vec4(col+col2,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}