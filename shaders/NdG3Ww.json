{
    "Shader": {
        "info": {
            "date": "1631652360",
            "description": "Visualizes the values that buffers may access with respect to frame number.",
            "flags": 32,
            "hasliked": 0,
            "id": "NdG3Ww",
            "likes": 15,
            "name": "Buffer Execution Order",
            "published": 3,
            "tags": [
                "shadertoy",
                "buffer"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 641
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 a = texture(iChannel0, uv);\n    vec4 b = texture(iChannel1, uv);\n    vec4 c = texture(iChannel2, uv);\n    vec4 image = vec4(iFrame, a.r, b.r, c.r);\n\n    int i = int(fragCoord.y / iResolution.y * (4. * 5.)) / 5;\n    i = 3 - i;\n    int j = int(fragCoord.y / iResolution.y * (4. * 5.)) % 5;\n    if (j < 4)\n        j = 3 - j;\n\n    vec4 color = vec4[](\n        vec4(0 ,  .15, 1, 1),\n        vec4(1 ,  .20, 0, 1),\n        vec4(0 ,  .50, 0, 1),\n        vec4(.8,  .00, 0, 1),\n        vec4(1 , 1.  , 1, 1)\n    )[j];\n\n    bool bar = false;\n    \n    initText(iResolution, fragCoord, vec2(0, 4 * 5));\n    \n    if (i < 4)\n    {\n        vec4 value = vec4[](a, b, c, image)[i];\n\n        if (j < 4)\n            bar = fragCoord.x < mod(value[j] * 20., iResolution.x);\n\n        for (int k=0 ; k<codes.length() ; ++k)\n            putc(codes[k]);\n    }\n\n    if (charId.x >= 0.)\n        char = texture(iChannel3, (charId + charCoord) / 16.).r;\n    \n    fragColor = mix(vec4(0), color, abs(float(bar) - char));\n    fragColor.xyz = pow(fragColor.xyz, vec3(1. / 2.2));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    bufferImage(fragColor, fragCoord, iResolution, iFrame, iChannel0, iChannel1, iChannel2);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    bufferImage(fragColor, fragCoord, iResolution, iFrame, iChannel0, iChannel1, iChannel2);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    bufferImage(fragColor, fragCoord, iResolution, iFrame, iChannel0, iChannel1, iChannel2);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void bufferImage(out vec4 fragColor, vec2 fragCoord, vec3 iResolution, int iFrame, sampler2D iChannel0, sampler2D iChannel1, sampler2D iChannel2)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 a = texture(iChannel0, uv);\n    vec4 b = texture(iChannel1, uv);\n    vec4 c = texture(iChannel2, uv);\n    fragColor = vec4(iFrame, a.r, b.r, c.r);\n}\n\nvec2 charId;\nvec2 charCoord;\nbool marked;\nfloat char;\nvec2 xy, textCoord;\nvec2 f;\n\nvoid initText(vec3 iResolution, vec2 fragCoord, vec2 size)\n{\n    charId = vec2(-1);\n    charCoord = vec2(0);\n    marked = false;\n    char = 0.;\n    xy = size - vec2(0, 1);\n    f = iResolution.y / size.y * vec2(.5, 1);\n    textCoord = fragCoord;\n}\n\nvoid newline()\n{\n    xy.x = 0.;\n    xy.y -= 1.;\n    marked = false;\n}\n\nvoid mark()\n{\n    marked = !marked;\n}\n\nvoid putc(int code)\n{\n    if (code == -1)\n        newline();\n    else if (code == -2)\n        mark();\n    else\n    {\n        if (all(lessThan(xy, textCoord / f)) && all(lessThan(textCoord / f, xy + 1.)))\n        {\n            charId = vec2(code % 16, 15 - code / 16);\n            charCoord = (textCoord / f - (xy + .5)) * f / f.y;\n            if (marked)\n            {\n                charCoord /= .5;\n                charCoord += .75;\n            }\n            else\n                charCoord += .5;\n            charCoord = clamp(charCoord, 0., 1.);\n        }\n        if (marked)\n            xy.x += .5;\n        else\n            xy.x += 1.;\n    }\n}\n\n/*\nprint(\n\t\",\\n\".join(\n\t\t\"// \" + line + \"\\n\"\n\t\t+ \", \".join(\n\t\t\t\"-2\" if x == \"#\"\n\t\t\telse hex(ord(x))\n\t\t\tfor x in line)\n\t\t+ \", -1\"\n\t\tfor line in [\n\t\t\t\"Buffer A:\",\n\t\t\t\"    iBufferA#T#.frame = iFrame\",\n\t\t\t\"    iBufferA#T#.fromA = texture(iBufferA#T-1#).frame\",\n\t\t\t\"    iBufferA#T#.fromB = texture(iBufferB#T-1#).frame\",\n\t\t\t\"    iBufferA#T#.fromC = texture(iBufferC#T-1#).frame\",\n\t\t\t\"Buffer B:\",\n\t\t\t\"    iBufferB#T#.frame = iFrame\",\n\t\t\t\"    iBufferB#T#.fromA = texture(iBufferA#T  #).frame\",\n\t\t\t\"    iBufferB#T#.fromB = texture(iBufferB#T-1#).frame\",\n\t\t\t\"    iBufferB#T#.fromC = texture(iBufferC#T-1#).frame\",\n\t\t\t\"Buffer C:\",\n\t\t\t\"    iBufferC#T#.frame = iFrame\",\n\t\t\t\"    iBufferC#T#.fromA = texture(iBufferA#T  #).frame\",\n\t\t\t\"    iBufferC#T#.fromB = texture(iBufferB#T  #).frame\",\n\t\t\t\"    iBufferC#T#.fromC = texture(iBufferC#T-1#).frame\",\n\t\t\t\"Image:\",\n\t\t\t\"    iScreen#T#.frame = iFrame\",\n\t\t\t\"    iScreen#T#.fromA = texture(iBufferA#T  #).frame\",\n\t\t\t\"    iScreen#T#.fromB = texture(iBufferB#T  #).frame\",\n\t\t\t\"    iScreen#T#.fromC = texture(iBufferC#T  #).frame\",\n\t\t\t]))\n*/\n\nint codes[] = int[](\n// Buffer A:\n0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x41, 0x3a, -1,\n//     iBufferA#T#.frame = iFrame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x69, 0x46, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferA#T#.fromA = texture(iBufferA#T-1#).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, 0x2d, 0x31, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferA#T#.fromB = texture(iBufferB#T-1#).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, 0x2d, 0x31, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferA#T#.fromC = texture(iBufferC#T-1#).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, 0x2d, 0x31, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n// Buffer B:\n0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x42, 0x3a, -1,\n//     iBufferB#T#.frame = iFrame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x69, 0x46, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferB#T#.fromA = texture(iBufferA#T  #).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, 0x20, 0x20, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferB#T#.fromB = texture(iBufferB#T-1#).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, 0x2d, 0x31, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferB#T#.fromC = texture(iBufferC#T-1#).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, 0x2d, 0x31, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n// Buffer C:\n0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x43, 0x3a, -1,\n//     iBufferC#T#.frame = iFrame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x69, 0x46, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferC#T#.fromA = texture(iBufferA#T  #).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, 0x20, 0x20, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferC#T#.fromB = texture(iBufferB#T  #).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, 0x20, 0x20, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iBufferC#T#.fromC = texture(iBufferC#T-1#).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, 0x2d, 0x31, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n// Image:\n0x49, 0x6d, 0x61, 0x67, 0x65, 0x3a, -1,\n//     iScreen#T#.frame = iFrame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x69, 0x46, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iScreen#T#.fromA = texture(iBufferA#T  #).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, -2, 0x54, 0x20, 0x20, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iScreen#T#.fromB = texture(iBufferB#T  #).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, -2, 0x54, 0x20, 0x20, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1,\n//     iScreen#T#.fromC = texture(iBufferC#T  #).frame\n0x20, 0x20, 0x20, 0x20, 0x69, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, -2, 0x54, -2, 0x2e, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x69, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, -2, 0x54, 0x20, 0x20, -2, 0x29, 0x2e, 0x66, 0x72, 0x61, 0x6d, 0x65, -1\n);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}