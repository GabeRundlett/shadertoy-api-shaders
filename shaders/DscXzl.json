{
    "Shader": {
        "info": {
            "date": "1680225417",
            "description": "Just wanted to define a function for many moving points where I could infer the nearby ones without testing them all.\n\nHold down mouse button to see Voronoi cells.\n\nIt's more like a sodafield, now.  Following the paths of bubbles in a fizzy drink.",
            "flags": 0,
            "hasliked": 0,
            "id": "DscXzl",
            "likes": 17,
            "name": "Starfield with point culling",
            "published": 3,
            "tags": [
                "voronoi",
                "starfield"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 523
        },
        "renderpass": [
            {
                "code": "const float density = 12.0;\nconst int w = 2, h = 2;   // neighbourhood size (*2+1)\nconst bool polar = false;\nconst bool accel = true;\nconst float wobble = 0.25;\n\nfloat nrand( vec2 n ) {\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453); }\nvec2 nrand2( vec2 n ) { return vec2(nrand(n * vec2(-3.2145, 1.2345)),\n                                    nrand(n * vec2(-5.4321, 3.4521))); }\nfloat nrand( ivec2 n ) {\treturn fract(sin(dot(vec2(n.xy), vec2(12.9898, 78.233)))* 43758.5453); }\nvec2 nrand2( ivec2 n ) { return vec2(nrand(vec2(n) * vec2(-3.2145, 1.2345)),\n                                    nrand(vec2(n) * vec2(-5.4321, 3.4521))); }\n\nvec4 point(ivec3 c, float t) {\n    const int period = 256;\n    float speed = 0.2 + 1.0 * nrand(c.xz);\n    float st = mod(speed * t, float(period));\n    c.y -= int(floor(st));\n    if (c.y < 0) c.y += period;\n    vec4 p = vec4(nrand2(c.xy), speed, nrand(c.xy + c.yz));\n    p.y += fract(st) - 0.5;\n\n    return p;\n}\n\n// from: https://www.shadertoy.com/view/ll2GD3\nvec3 _pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec4 pal(float i) {\n    return vec4(_pal(i, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67)), 1.0);\n}\n\nvec2 xfrm(vec2 uv) {\n    if (polar) {\n        uv -= 0.5;\n        uv = vec2(atan(uv.y, uv.x), distance(uv, vec2(0.0)));\n        uv.x /= 3.141592653589;\n    }\n    if (accel) {\n        uv.y = pow(uv.y + 0.03, 0.25);\n    }\n    return uv;\n}\n\nvec2 ixfrm(vec2 uv) {\n    if (accel) {\n        uv.y = pow(uv.y, 1.0 / 0.25) - 0.03;\n    }\n    if (polar) {\n        uv.x *= 3.141592653589;\n        uv = vec2(cos(uv.x), sin(uv.x)) * uv.y;\n        uv += 0.5;\n    }\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y;\n\n    fragColor = vec4(0);\n\n    vec4 nearest = vec4(1.0);\n    float nearest_d = 9999.0;\n\n    ivec2 iuv = ivec2(floor(xfrm(uv) * density));\n    \n    for (int y = -h; y <= h; ++y) {\n        if (iuv.y + y < 0) continue;\n        for (int x = -w; x <= w; ++x) {\n            for (int z = 0; z < 2; ++z) {\n                ivec3 ic = ivec3(iuv + ivec2(x, y), z);\n                vec4 p = point(ic, iTime);\n                p.xy += vec2(ic);\n                p.x += sin((p.y * 0.5 + p.w) * 2.0 * 3.141592653589) * wobble;\n\n                p.xy = ixfrm(p.xy / density);\n                p.z = mix(p.z, 1.0, 0.25);\n                float d = distance(uv, p.xy);\n#if 1\n                if (nearest_d * p.z >= d * nearest.z)\n#else\n                if (nearest_d >= d)\n#endif\n                {\n                    nearest = p;\n                    nearest_d = d;\n                }\n            }\n        }\n    }\n    if (iMouse.z > 0.0) {\n        fragColor = pal(nearest.w);\n    } else {\n        fragColor = pal(nearest.w) * nearest.z / (nearest_d * 150.0);\n        fragColor.rgb = clamp(fragColor.rgb - 0.1, 0.0, 1.0);\n    }\n    //if (((iuv.x ^ iuv.y) & 1) > 0) fragColor.g = max(fragColor.g, 0.2);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}