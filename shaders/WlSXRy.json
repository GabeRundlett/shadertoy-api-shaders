{
    "Shader": {
        "info": {
            "date": "1566224540",
            "description": "The Lost Tapes 2\nhttps://www.instagram.com/p/B0Rsw2CACAf/",
            "flags": 0,
            "hasliked": 0,
            "id": "WlSXRy",
            "likes": 11,
            "name": "DANIEL ARSHAM CASSETTE TAPE",
            "published": 3,
            "tags": [
                "raymerching",
                "cassettetape"
            ],
            "usePreview": 1,
            "username": "yasuo",
            "viewed": 575
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define hash(h) fract(sin(h) * 43758.5453123)\n#define PI 3.141592653589793\n\n// noise and fbm function from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//-----------------------------------------------------------------------------\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p );\n    return f;\n}\n\nfloat sdBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))-r\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdTapeGear( vec3 p, vec2 h )\n{\n    float r = (length(p)-0.23);\n    float w = 0.05;\n    float h2 = 0.1;\n  \tvec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    float len = 0.38;\n\tfloat resd = min(max(d.x,d.y),0.0) + length(max(d,0.0));\n    float res2d = max(-r,resd);\n    float b = sdBox(p*matRotateY(radians(-10.0)),vec3(w,h2,len),0.0);\n    float b2 = sdBox(p*matRotateY(radians(25.0)),vec3(len,h2,w),0.0);\n    float b3 = sdBox(p*matRotateY(radians(-50.0)),vec3(len,h2,w),0.0);\n    \n    \n    float res3d = max(-b,res2d);\n    float res4d = max(-r,min(min(b,b2),b3));\n  \treturn min(res3d,res4d);\n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    if ( val1.w < val2.w ) {\n        return val1;\n    }\n    return val2;\n}\n\nvec4 map(vec3 p){    \n    vec3 pref = p;\n    vec2 uv = p.xy;\n\n    float b0 = sdBox((p+vec3(0.0, 0.0,0.0)),vec3(2.0,1.2,0.2),0.1);\n    float b1 = sdBox((p+vec3(0.0, -0.2,0.32)),vec3(1.8,0.7,0.03),0.1);\n    \n    p.x = abs(p.x);\n    p.x -= 2.0;\n    float b2 = sdTriPrism((p+vec3(0.0, 0.95,0.0))*matRotateZ(radians(-50.0)),vec2(1.0,0.6));\n    p = pref;\n    float b3 = sdBox((p+vec3(0.0, 0.92,0.0)),vec3(1.6,0.35,0.35),0.0);\n    float b4 = sdBox((p+vec3(0.0, -0.2,-0.4)),vec3(1.8,0.7,0.03),0.1);\n    \n    p.x = abs(p.x);\n    p.x -= 1.1;\n    float hole0 = sdCappedCylinder((p+vec3(0.0, 1.1,0.0))*matRotateX(radians(90.0)),0.08,1.0);\n    p = pref;\n    \n    p.x = abs(p.x);\n    p.x -= 0.7;\n    float hole1 = sdCappedCylinder((p+vec3(0.0, 0.95,0.0))*matRotateX(radians(90.0)),0.08,1.0);\n    p = pref;\n    \n    float holes = min(hole0,hole1);\n    \n    float centerRectHole =  sdBox((p+vec3(0.0, -0.15,0.0)),vec3(0.4,0.2,0.3),0.05);\n    \n    p.x = abs(p.x);\n    p.x -= 0.8;\n    float centerHoles = sdCappedCylinder((p+vec3(0.0, -0.15,0.0))*matRotateX(radians(90.0)),0.27,1.0);\n    p = pref;\n    \n   \tp.x = abs(p.x);\n    p.x -= 0.8;\n    float tapeCircles = sdCappedCylinder((p+vec3(0.0, -0.15,0.0))*matRotateX(radians(90.0)),0.65,0.07);\n    p = pref;\n    \n    float tape = max(-centerHoles,tapeCircles);\n    \n    p.x = abs(p.x);\n    p.x -= 0.8;\n    float tapeGear = sdTapeGear((p+vec3(0.0, -0.15,0.0))*matRotateX(radians(90.0))*matRotateY(radians(90.0)*iTime*0.5), vec2(0.1,0.1));\n    p = pref;\n    \n    p.x += fbm(p*1.8)*1.2;\n    p.y += fbm(p*1.2)*1.3;\n    p.z += fbm(p*2.0)*1.1;\n   \tfloat fragileParts0 = (sdBox(p+vec3(1.8,0.8,-0.2),vec3(0.1,0.2,0.5),0.0)-1.0);\n    p = pref;\n    \n    p.x += fbm(p*1.8)*1.2;\n    p.y += fbm(p*1.2)*1.3;\n    p.z += fbm(p*2.0)*1.1;\n   \tfloat fragileParts1 = (sdBox(p+vec3(-3.2,-1.7,-0.2),vec3(0.3,0.6,0.5),0.0)-1.0);\n    p = pref;\n    \n    float f = p.y+1.3;\n    \n    float resB = max(-centerHoles,max(-centerRectHole, max(-holes,min(max(-b4,max(-b1,b0)),max(-b2,b3)))));\n    vec4 res = vec4(vec3(1.0,1.0,1.0),min(f,max(-fragileParts1,max(-fragileParts0,min(min(resB,tape),tapeGear)))));\n    \n    return res;\n}\n\nvec3 normalMap(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        map(p + vec3(  d, 0.0, 0.0)).w - map(p + vec3( -d, 0.0, 0.0)).w,\n        map(p + vec3(0.0,   d, 0.0)).w - map(p + vec3(0.0,  -d, 0.0)).w,\n        map(p + vec3(0.0, 0.0,   d)).w - map(p + vec3(0.0, 0.0,  -d)).w\n    ));\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n    float h = 0.0;\n    float c = 0.001;\n    float r = 1.0;\n    float shadow = 0.5;\n    for(float t = 0.0; t < 30.0; t++){\n        h = map(ro + rd * c).w;\n        if(h < 0.001){\n            return shadow;\n        }\n        r = min(r, h * 16.0 / c);\n        c += h;\n    }\n    return 1.0 - shadow + r * shadow;\n}\n\n// from simon green and others\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - map(p + n*d).w);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 uv = p;\n    \n    float time = iTime*2.0;\n    \n    vec3 ro = vec3( 3.5*cos(0.1*time + 6.0), 0.0, -0.5+5.5*sin(0.1*time + 6.0) );\n    vec3 ta = vec3( 0.0, -0.4, -0.7 );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    float zoom = 1.5;\n    vec3 rd = ca * normalize( vec3(p.xy,zoom) );\n    \n    float t, dist;\n    float lastDistEval = 1e10;\n    float edge = 0.0;\n    t = 0.0;\n    vec3 distPos = ro+rd;\n    vec4 distCl = vec4(0.0);\n    for(int i = 0; i < 64; i++){\n        distCl = map(distPos);\n        dist = distCl.w;\n        t += dist;\n        distPos = ro+rd*t;\n        \n        if (dist < lastDistEval) lastDistEval = dist;\n        if(dist < 0.01 || dist > 60.0) break;\n    }\n\n    vec3 color;\n    float shadow = 1.0;\n    if(dist < 1.0){\n        // lighting\n        vec3 lightDir = vec3(0.0, 1.0, 0.0);\n        vec3 light = normalize(lightDir + vec3(0.5, 0.0, 0.9));\n        vec3 normal = normalMap(distPos);\n\n        // difuse color\n        float diffuse = clamp(dot(light, normal), 0.6, 1.0);\n        float lambert = max(.0, dot( normal, light));\n        \n        // ambient occlusion\n        float ao = ambientOcclusion(distPos,normal);\n        \n        // shadow\n        shadow = shadowMap(distPos + normal * 0.001, light);\n\n        // result\n        color += vec3(lambert);\n        color = ao*diffuse*(distCl.xyz+(.1-length(p.xy)/3.))*vec3(1.0, 1.0, 1.0);\n        \n    }else{\n        color =.84*max(mix(vec3(0.6,0.6,0.6)+(.1-length(p.xy)/3.),vec3(1),.1),0.);\n    }\n\n    // rendering result\n    float brightness = 1.5;\n    vec3 dst = (color * max(0.8, shadow))*brightness;\n    \n    fragColor = vec4(dst, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}