{
    "Shader": {
        "info": {
            "date": "1701765041",
            "description": "This shader showcases a method to alternate between samples using a height and weight value. ",
            "flags": 0,
            "hasliked": 0,
            "id": "mlcBWl",
            "likes": 3,
            "name": "Height Switch",
            "published": 3,
            "tags": [
                "mix",
                "contrast",
                "barycentric",
                "lerp",
                "blend",
                "linear",
                "height",
                "interpolation",
                "bilinear",
                "heightblend"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nThis shader demonstrates a cost-effective height blend method. It alternates \nbetween samples based on the combination of weights and heights. It requires \nonly one sample, but it would be desirable to have a smooth variant of this, \neven if it requires more samples.\n\nHeight interpolation is a common technique in computer graphics used to blend\nsamples (typically texture colors) based on their height information. Heightmaps\nassociated with each sample introduce a bias to the blending weight, resulting\nin a more natural transition between textures. Regardless of height at 100% \nweight, a sample is fully visible, and at 0% weight, it's entirely hidden.\n\nThe three columns from left to right demonstrate linear (2 value), barycentric \n(3 value), and bilinear (4 value) interpolation. This shader allows mouse control \nfor you to enlarge one of the columns by moving the X-axis to the column center. \nGlobal constants below further enhance control and alternate views.\n\nFor background reading, consider reading my source at:\nhttps://playerunknownproductions.net/news/stochastic-texturing\n\nOr see my biom texture shuffle for a shader where this could be used:\nhttps://www.shadertoy.com/view/dsVyRw\n*/\n\n// Switch values around to show different things\n// 0 = Interpolated unique Textures\n// 1 = Interpolated identical Textures\n// 2 = Weight/Alpha values\n#define SHOWVALUES 2\n\n// Uncomment and set height values; heights should be in the range of 0-1\n// Linear interpolation is XY, barycentric is XYZ, and bilinear is XYZW\n//#define HEIGHT vec4(1.0, 1.0, 1.0, 1.0)\n\n// Make switch when one weight with bias from heights is larger than the other\nbool heightSwitch(float weight, vec2 heights) {\n    \n    // Split the weight into two components\n    vec2 weights = vec2(1.0 - weight, weight);\n\n    // add bounds to height so nothing odd happens at 0. or 1.\n    heights = clamp(heights, 0.01, 0.99);\n    \n    // scale heights with their weight\n    heights = heights * weights;\n    \n    // return when to switch\n    return heights.x > heights.y;\n}\n\n// switch between 2 samples using height bias\n// https://www.desmos.com/calculator/3yoqgulaww\nvec3 heightSwitch(vec2 gridUV, vec2 detailUV) {\n\n    // Choose between using constant height values or sampling heightmaps\n    #ifdef HEIGHT\n        // Use constant height values\n        vec2 height = HEIGHT.xy;\n        \n    #else\n        #if SHOWVALUES == 1\n            // Sample the same offset heightmap\n            float heightA = texture(iChannel1, detailUV).x;\n            float heightB = texture(iChannel1, vec2(-detailUV.y, detailUV.x)).x;\n        \n        #else        \n            // Sample unique heightmaps\n            float heightA = texture(iChannel0, detailUV).x;\n            float heightB = texture(iChannel1, detailUV).x;\n        #endif\n        \n        // Combine heights\n        vec2 heights = vec2(heightA, heightB);\n    #endif\n    \n    // Calculate zigzag linear weight\n    float weight = abs(fract(gridUV.y * 0.5) * 2.0 - 1.0);\n    \n    // Find out when to do height switch\n    bool heightSwitcher = heightSwitch(weight, heights);\n    \n    #if SHOWVALUES == 0\n        // For Mip caculation\n        vec2 duvdx = dFdx( detailUV );\n        vec2 duvdy = dFdy( detailUV );\n        \n        // Alternate the textures\n        return heightSwitcher ? textureGrad(iChannel0, detailUV, duvdx, duvdy).xyz : \n                                bone(textureGrad(iChannel1, detailUV, duvdx, duvdy).x);\n                                       \n    #elif SHOWVALUES == 1\n        /*\n        // Normally do this but here the height and textures are the same here\n        // Mip caculation\n        vec2 duvdx = dFdx( detailUV );\n        vec2 duvdy = dFdy( detailUV );\n    \n        // Alternate the UVs\n        vec2 uv = alternate ? detailUV : vec2(-detailUV.y, detailUV.x);\n        \n        // Sample texture\n        return bone( textureGrad(iChannel1, uv, duvdx, duvdy).x );\n        */\n        \n        // Aternate the results based on heightSwitcher\n        return bone( heightSwitcher ? heights.x : heights.y );\n        \n    #else\n        // Alternate the colors\n        return heightSwitcher ? vec3(1,0,0) : vec3(0,0,0);\n    #endif\n}\n\n// Make switch when one weight with bias from heights is larger than the other\nbvec2 heightSwitch(vec3 weights, vec3 heights) {\n\n    // add bounds to height so nothing odd happens at 0. or 1.\n    heights = clamp(heights, 0.01, 0.99);\n    \n    // scale heights with their weight\n    heights = heights * weights;\n    \n    // return when to switch\n    return bvec2(heights.x > max(heights.y, heights.z), heights.y > heights.z);\n}\n\n// switch between 3 samples using height bias\nvec3 baryHeightSwitch(vec2 gridUV, vec2 detailUV) {\n\n    // Choose between using constant height values or sampling heightmaps\n    #ifdef HEIGHT\n        // Use constant height values\n        vec3 height = HEIGHT.xyz;\n        \n    #else\n        #if SHOWVALUES == 1\n            // Sample the same offset heightmap\n            float heightA = texture(iChannel1, detailUV).x;\n            float heightB = texture(iChannel1, vec2(-detailUV.y, -detailUV.x)).x;\n            float heightC = texture(iChannel1, vec2(-detailUV.y, detailUV.x)).x;\n        \n        #else        \n            // Sample unique heightmaps\n            float heightA = texture(iChannel0, detailUV).x;\n            float heightB = texture(iChannel1, detailUV).x;\n            float heightC = texture(iChannel2, detailUV).y;\n        #endif\n        \n        // Combine heights\n        vec3 heights = vec3(heightA, heightB, heightC);\n    #endif\n    \n    // Calculate barycentric weights for a square pattern\n    vec3 weights = baryWeights(gridUV);\n    \n    // Find out when to do height switch\n    bvec2 heightSwitcher = heightSwitch(weights, heights);\n\n    #if SHOWVALUES == 0\n        // Mip caculation\n        vec2 duvdx = dFdx( detailUV );\n        vec2 duvdy = dFdy( detailUV );\n    \n        // Height switch to alternate texture sample\n        return heightSwitcher.x ? textureGrad(iChannel0, detailUV, duvdx, duvdy).xyz : \n               heightSwitcher.y ? bone(textureGrad(iChannel1, detailUV, duvdx, duvdy).x) : \n                                  textureGrad(iChannel2, detailUV, duvdx, duvdy).xyz;\n\n    #elif SHOWVALUES == 1\n        /* \n        // Normally do this but here the height and textures are the same here\n        // Mip caculation\n        vec2 duvdx = dFdx( detailUV );\n        vec2 duvdy = dFdy( detailUV );\n    \n        // Height switch rotated texture sample\n        vec2 uv = heightSwitcher.x ? detailUV : \n                  heightSwitcher.y ? vec2(-detailUV.y, -detailUV.x) : \n                                     vec2(-detailUV.y, detailUV.x);\n        \n        // Sample texture\n        return bone( textureGrad(iChannel1, uv, duvdx, duvdy).x );\n        */\n        \n        // Aternate the results based on heightSwitcher\n        return bone( heightSwitcher.x ? heights.x : \n                     heightSwitcher.y ? heights.y : \n                                        heights.z );\n        \n    #else\n        // Debug view of the height switch\n        return heightSwitcher.x ? vec3(1., 0., 0.) : \n               heightSwitcher.y ? vec3(0., 1., 0.) : \n                                  vec3(0., 0., 1.);\n    #endif  \n}\n\n// Make switch when one weight with bias from heights is larger than the other\nbvec3 heightSwitch(vec4 weights, vec4 heights) {\n\n    // add bounds to height so nothing odd happens at 0. or 1.\n    heights = clamp(heights, 0.01, 0.99);\n    \n    // scale heights with their weight\n    heights = heights * weights;\n    \n    // Partial result to reuse\n    float maxHeightCD = max(heights.z, heights.w);\n    \n    // return when to switch\n    return bvec3(heights.x > max(maxHeightCD, heights.y), \n                 heights.y > maxHeightCD,\n                 heights.z > heights.w);\n}\n\n// switch between 4 samples using height bias\nvec3 bilinearHeightSwitch(vec2 gridUV, vec2 detailUV) {   \n    \n    // Choose between using constant height values or sampling heightmaps\n    #ifdef HEIGHT\n        // Use constant height values\n        vec4 height = HEIGHT;\n        \n    #else    \n        #if SHOWVALUES == 1\n            // Sample the same offset heightmap\n            float heightA = texture(iChannel1, detailUV).x;\n            float heightB = texture(iChannel1, vec2(-detailUV.y, -detailUV.x)).x;\n            float heightC = texture(iChannel1, vec2(-detailUV.y, detailUV.x)).x;\n            float heightD = texture(iChannel1, vec2(detailUV.x, -detailUV.y)).x;\n        \n        #else        \n            // Sample unique heightmaps\n            float heightA = texture(iChannel0, detailUV).x;\n            float heightB = texture(iChannel1, detailUV).x;\n            float heightC = texture(iChannel2, detailUV).y;\n            float heightD = texture(iChannel3, detailUV).x;\n        #endif\n        \n        // Combine heights\n        vec4 heights = vec4(heightA, heightB, heightC, heightD);\n    #endif\n    \n    // Calculate vanilla bilinear weights\n    vec4 weights = bilinearWeights(gridUV);\n        \n    // Find out when to do height switch\n    bvec3 heightSwitcher = heightSwitch(weights, heights);\n        \n    #if SHOWVALUES == 0\n        // Mip caculation\n        vec2 duvdx = dFdx( detailUV );\n        vec2 duvdy = dFdy( detailUV );\n    \n        // Height switch to alternate texture sample\n        return heightSwitcher.x ? textureGrad(iChannel0, detailUV, duvdx, duvdy).xyz : \n               heightSwitcher.y ? bone(textureGrad(iChannel1, detailUV, duvdx, duvdy).x) : \n               heightSwitcher.z ? textureGrad(iChannel2, detailUV, duvdx, duvdy).xyz : \n                                  textureGrad(iChannel3, detailUV, duvdx, duvdy).xyz;\n               \n    #elif SHOWVALUES == 1\n        /* \n        // Normally do this but here the height and textures are the same here\n        // Mip caculation\n        vec2 duvdx = dFdx( detailUV );\n        vec2 duvdy = dFdy( detailUV );\n    \n        // Height switch to rotated texture sample\n        vec2 uv = heightSwitcher.x ? detailUV : \n                  heightSwitcher.y ? vec2(-detailUV.y, -detailUV.x) : \n                  heightSwitcher.z ? vec2(-detailUV.y, detailUV.x) : \n                                     vec2(detailUV.x, -detailUV.y);\n        \n        // Sample texture\n        return bone( textureGrad(iChannel1, uv, duvdx, duvdy).x );\n        */\n        \n        // Height switch to alternate texture sample\n        return bone( heightSwitcher.x ? heights.x : \n                     heightSwitcher.y ? heights.y : \n                     heightSwitcher.z ? heights.z : \n                                        heights.w );\n    #else\n        // Debug view of the height switch\n        return heightSwitcher.x ? vec3(1., 0., 0.) : \n               heightSwitcher.y ? vec3(0., 1., 0.) : \n               heightSwitcher.z ? vec3(0., 0., 1.) : \n                                  vec3(0., 0., 0.);\n    #endif\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n    // Calculate UVs for the x-axis of the window\n    vec2 uv = fragCoord / iResolution.x;\n    \n    // Calculate UVs for the blend grids\n    vec2 gridUV = uv * 6.0;\n    \n    // Calculate UVs for the detail texture\n    vec2 detailUV = uv * 7.0;\n    \n    // Create a float to divide into sections for comparisons\n    float comparisonX = uv.x * 3.0;\n\n    // Enable mouse controls when clicked; otherwise, animate\n    float pointer;\n    if (iMouse.x > 0.0) {\n        // Mouse controls\n        vec2 mouse = iMouse.xy / iResolution.xy;\n        pointer = mouse.x * 3.0;\n    } else {\n        // Animation when no mouse input is used\n        //pointer = fract(iTime * 0.1) * 3.0;\n    }\n    \n    // Create zigzag weights\n    float weight = abs(fract(pointer - 0.5) * 2.0 - 1.0);\n    \n    // make transitions deadzones for easier use\n    weight = straightContrast(weight, 2.);\n            \n    // Define default edge locations for the columns\n    vec2 columnEdges = vec2(1.0, 2.0); \n    \n    // Mouse-controlled animations to zoom into the columns    \n    vec2 zoomColumnEdges = columnEdges;\n    if (pointer <= 1.0) {\n        // Zoom into the left side        \n        zoomColumnEdges = vec2(2.8, 2.9);\n    } else if (pointer <= 2.0) {\n        // Zoom into the center column\n        zoomColumnEdges = vec2(0.1, 2.9);\n    } else {\n        // Zoom into the right column\n        zoomColumnEdges = vec2(0.1, 0.2);\n    }\n\n    // Interpolate between default column edge positions and zoom\n    columnEdges = mix(columnEdges, zoomColumnEdges, weight);    \n    \n    // Choose interpolation method based on the x-coordinate\n    vec3 color;\n    if (comparisonX <= columnEdges.x) {\n        // Left side\n        color = heightSwitch(gridUV, detailUV);\n                        \n    } else if (comparisonX <= columnEdges.y) {\n        // Center section\n        color = baryHeightSwitch(gridUV, detailUV);\n        \n    } else {\n        // Right side        \n        color = bilinearHeightSwitch(gridUV, detailUV);\n    }\n    \n    // Add lines between columns\n    float BorderThickness = 0.004;    \n    color += step(abs(comparisonX - columnEdges.x), BorderThickness);\n    color += step(abs(comparisonX - columnEdges.y), BorderThickness);\n    \n    // Add arrows pointing at the center of columns\n    color += step(uv.y + abs(fract(comparisonX)-0.5), BorderThickness*5.);\n        \n    // Set the output color\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//_____________________________Generic Functions________________________________\n\n// Linearly increases contrast of Alpha\n// See: https://www.desmos.com/calculator/k1g3naqoue\nfloat straightContrast(float alpha, float contrast) {\n    return clamp(contrast * (alpha - 0.5) + 0.5, 0., 1.);\n}\n\n// makes viridis colormap with polynimal 6\nvec3 viridis(float t) {\n    const vec3 c0 = vec3(0.274344,0.004462,0.331359);\n    const vec3 c1 = vec3(0.108915,1.397291,1.388110);\n    const vec3 c2 = vec3(-0.319631,0.243490,0.156419);\n    const vec3 c3 = vec3(-4.629188,-5.882803,-19.646115);\n    const vec3 c4 = vec3(6.181719,14.388598,57.442181);\n    const vec3 c5 = vec3(4.876952,-13.955112,-66.125783);\n    const vec3 c6 = vec3(-5.513165,4.709245,26.582180);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// makes bone colormap with polynimal 6\nvec3 bone(float t) {\n    const vec3 c0 = vec3(-0.005007,-0.003054,0.004092);\n    const vec3 c1 = vec3(1.098251,0.964561,0.971829);\n    const vec3 c2 = vec3(-2.688698,-0.537516,2.444353);\n    const vec3 c3 = vec3(12.667310,-0.657473,-8.158684);\n    const vec3 c4 = vec3(-27.183124,8.398806,10.182004);\n    const vec3 c5 = vec3(26.505377,-12.576925,-5.329155);\n    const vec3 c6 = vec3(-9.395265,5.416416,0.883918);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// Interpolation ________________________________________________________________\n\n// Make tiling bilinear weights\nvec4 bilinearWeights(vec2 uv) {\n    // Generate zigzag pattern\n    vec2 zigZag = abs(fract(uv * 0.5) * 2.0 - 1.0);\n    \n    // Invert zigzag as a partial of the weights\n    vec2 infZigZag = 1.0 - zigZag;\n\n    // Generate alpha values (weights) for bilinear interpolation.\n    float weightA = zigZag.x * zigZag.y;\n    float weightB = zigZag.x * infZigZag.y;\n    float weightC = infZigZag.x * zigZag.y;\n    float weightD = infZigZag.x * infZigZag.y;\n    \n    // Combine weight/alpha values. \n    return vec4(weightA, weightB, weightC, weightD);\n}\n\n// Make square tiling barycentric weights\nvec3 baryWeights(vec2 uv) {\n    // Create zigzag tiling for UVs\n    vec2 zigZag = abs(fract(uv * 0.5) * 2.0 - 1.0);\n\n    // make individual weights for pattern\n    float weightA = min(zigZag.x, zigZag.y);\n    float weightB = min(1.-zigZag.x, 1.-zigZag.y);\n    float weightC = 1. - weightA - weightB;\n    \n    // when to alternate the 2 C samples\n    //float switchC = float(zigZag.x < zigZag.y);\n    \n    // Join weights together\n    return vec3(weightA, weightB, weightC);//, switchC);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}