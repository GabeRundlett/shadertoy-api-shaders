{
    "Shader": {
        "info": {
            "date": "1485301789",
            "description": "Little shader art.",
            "flags": 8,
            "hasliked": 0,
            "id": "ltKSRc",
            "likes": 16,
            "name": "Gravity Shielding (sound)",
            "published": 3,
            "tags": [
                "sound",
                "tech",
                "scifi"
            ],
            "usePreview": 0,
            "username": "srtuss",
            "viewed": 611
        },
        "renderpass": [
            {
                "code": "// srtuss, 2017\n\n#define pi 3.1415926535897932384626433832795\n\nfloat light(vec3 p)\n{\n    float s, w, v;\n    s = 3.5;\n    w = abs(fract(p.y * s) - .5) / s;\n    \n    v = min(v, length(vec2(length(p) - .8, w)) - .02);\n    \n    return length(vec2(abs(length(p) - .8), w));//v;\n}\n\nvec2 rotate(vec2 v, float a)\n{\n    float co = cos(a), si = sin(a);\n    return v * mat2(co, si, -si, co);\n}\n\nfloat scene(vec3 p)\n{\n    // chamber:\n    float v = length(p) - 1.;\n    \n    //return v;\n    \n    float s = 6.;\n    float w = abs(fract(p.y * s) - .5) / s;\n    \n    float a = atan(p.z, p.x);\n    \n    v = min(v, length(vec2(v, w)) - .01 - (sin(a * 10.) + 1.) * 0.01);\n    \n    //v = length(p) - 1.;\n    \n    s = 3. / pi;\n    w = abs(fract(a * s) - .5) / s;\n    float l = length(p.xz);\n    \n    v = max(v, ((w - .3) * l));\n    \n    v = max(v, -length(p) + .6);\n    \n    v = min(v + .05, max(v, -(length(p) - .9)));\n    \n    v = min(v + .04, max(v, -(length(p.xz) - .5)));\n    \n    //v = min(v, length(p.xz) - .2);\n    \n    \n    s = 2.;\n    w = abs(fract(p.y * s) - .5) / s;\n    \n    v = min(v, length(vec2(length(p) - .8, w)) - .02);\n    \n    v = min(v, max(v - .02, light(p) - .02));\n    \n    \n    \n    // walkway\n    v = min(v, max(p.y + .2, abs(l - 3.) - 1.));\n    \n    s = 30.;\n    vec2 uv = p.xz * s;\n    float rf = min(\n        abs(fract(dot(uv, normalize(vec2(.5, 1.)))) - .5),\n    \tabs(fract(dot(uv, normalize(vec2(-.5, 1.)))) - .5));\n    rf = (rf - .08) / s;\n    \n    v = max(v, -max(abs(l - 3.) - .9, (-p.y - .22)));\n    //v = min(v, max(abs(l - 3.) - .9, max(rf, p.y + 0.21)));\n    \n    \n    // support\n    s = 2. / pi;\n    float r = abs(fract(a * s) - .5) / s;\n    float sh = abs(dot(vec2(l, p.y + .2), normalize(vec2(1., 1.9))));\n    w = max(r * l - 0.1, sh - .1);\n    w = max(w, -(l - .7));\n    \n    w = max(w, -sh + .01);\n    //w = max(w, -max(sh - .101, (r - .06) * l));\n    w = max(w, -((r - .06) * l));\n    \n    v = min(v, min(w, max(v - .04, w - .1)));\n    v = min(v, max(length(vec2(sh, r)) - 0.05, -l + .7));\n    \n    \n    // rings/wires\n    s = 3. / pi;\n    r = abs(fract(a * s) - .5) / s;\n    w = length(vec2(length(vec2(p.y, length(p.xz) - 3.)) -1., r * l)) - .04;\n    v = min(v, w);//*/\n    \n    float open = smoothstep(1., 1.2, iTime) * .05 +\n        smoothstep(1.2, 1.4, iTime) * -.01 +\n        smoothstep(2., 6., iTime) * 1. + sin((iTime - 5.) * 3.) * .05 * smoothstep(5., 8., iTime) * smoothstep(10., 8., iTime);\n    \n    \n    float vv = v;\n    vec3 pp = p;\n    for(int i = 0; i < 6; ++i)\n    {\n        p = pp;\n        \n        p.xz = rotate(p.xz, float(i) * 2. * pi / 6.);\n        \n        vec2 ro = vec2(-0.3, .5);\n        p.xy = rotate(p.xy + ro, open * -1.5) - ro;\n        l = length(p.xz);\n        v = length(p) - 1.;\n\n        s = 6.;\n        w = abs(fract(p.y * s) - .5) / s;\n\n        a = atan(p.z, p.x);\n\n        v = min(v, length(vec2(v, w)) - .01 - (sin(a * 10.) + 1.) * 0.01);\n\n        //v = length(p) - 1.;\n\n        s = 3. / pi;\n        a = clamp(a, -.5, .5);\n        w = abs(fract(a * s) - .5) / s;\n\n        v = max(v, -((w - .3) * l));\n\n        v = max(v, -length(p) + .6);\n\n        v = min(v + .05, max(v, -(length(p) - .9)));\n\n        v = min(v + .04, max(v, -(length(p.xz) - .5)));\n        \n        vv = min(vv, v);\n    }\n    return vv;\n}\n\nfloat field(vec3 p)\n{\n    float v = length(p) - 1.;\n    \n    float s = 6.;\n    float w = abs(fract(p.y * s) - .5) / s;\n    \n    float a = atan(p.z, p.x);\n    \n    v = min(v, length(vec2(v, w)) - .01 - (sin(a * 10.) + 1.) * 0.01);\n    \n    //v = length(p) - 1.;\n    \n    s = 3. / pi;\n    w = abs(fract(a * s) - .5) / s;\n    float l = length(p.xz);\n    \n    v = max(v, ((w - .3) * l));\n    \n    v = max(v, -length(p) + .6);\n    \n    v = min(v + .05, max(v, -(length(p) - .9)));\n    \n    v = min(v + .04, max(v, -(length(p.xz) - .5)));\n    \n   \t//v = min(v, length(p.xz) - .2);\n    \n    \n\t//v = min(v, l - 0.4);\n    \n    return v - min(1., iTime / 6.) * .03;\n}\n\nvec3 field_normal(vec3 p)\n{\n    vec2 h = vec2(0.005, 0.0);\n    return normalize(vec3(\n        field(p + h.xyy) - field(p - h.xyy),\n        field(p + h.yxy) - field(p - h.yxy),\n        field(p + h.yyx) - field(p - h.yyx)\n    ));\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 h = vec2(0.005, 0.0);\n    return normalize(vec3(\n        scene(p + h.xyy) - scene(p - h.xyy),\n        scene(p + h.yxy) - scene(p - h.yxy),\n        scene(p + h.yyx) - scene(p - h.yyx)\n    ));\n}\n\nvec4 tpm(sampler2D tex, vec3 nml, vec3 p)\n{\n    vec3 mx = max(vec3(0.0), pow((abs(nml.xyz) - 0.2) * 7.0, vec3(3.0)));\n\tmx /= dot(mx, vec3(1.0));\n    \n    vec4 col = texture(tex, vec2(p.yz)) * mx.x;\n    col += texture(tex, vec2(p.xz)) * mx.y;\n    col += texture(tex, vec2(p.xy)) * mx.z;\n    return col;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n\tfloat res = 1.0;\n    float t = mint;\n\tfor(int i = 0; i < 32; ++i)\n\t{\n\t\tfloat h = scene(ro + rd*t);\n\t\tif(h < 0.001)\n\t\t\treturn 0.0;\n\t\tres = min(res, k * h / t);\n\t\tt += h;\n\t}\n\treturn res;\n}\n\nfloat amb_occ(vec3 p, float h)\n{\n\tfloat acc = 0.0;\n\tacc += scene(p + vec3(-h, -h, -h));\n\tacc += scene(p + vec3(-h, -h, +h));\n\tacc += scene(p + vec3(-h, +h, -h));\n\tacc += scene(p + vec3(-h, +h, +h));\n\tacc += scene(p + vec3(+h, -h, -h));\n\tacc += scene(p + vec3(+h, -h, +h));\n\tacc += scene(p + vec3(+h, +h, -h));\n\tacc += scene(p + vec3(+h ,+h, +h));\n\treturn acc / h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv += (fract(1253786. * sin(iTime * vec2(11., 22))) - .5) * 0.03 * exp(max(0., iTime - 6.) * -1.);\n    \n    vec3 rd = normalize(vec3(uv, 1.3));\n    vec3 ro = vec3(0., 0.2, -2.);\n    \n    float tt = -.1;\n    rd.yz = rotate(rd.yz, tt);\n    ro.yz = rotate(ro.yz, tt);\n    \n    float pn = iTime * .2;\n    rd.xz = rotate(rd.xz, pn);\n    ro.xz = rotate(ro.xz, pn);\n    \n    float rl = -.4;\n    rd.yz = rotate(rd.yz, rl);\n    ro.yz = rotate(ro.yz, rl);\n    \n   \n    \n    \n    vec3 col = vec3(0.);\n    \n    vec3 sun = normalize(vec3(.2, .5, .3));\n    vec3 sun2 = normalize(vec3(.4, -.5, .3));\n    \n    float d = 0.;\n    float g = 0.;\n    for(int i = 0; i < 90; ++i)\n    {\n        d += scene(ro + rd * d);\n        g += smoothstep(0.3, 0., length(ro + rd * d) - 1.);\n    }\n    \n    if(d < 8.)\n    {\n        vec3 hit = ro + rd * d;\n        vec3 nml = normal(hit);\n        //col = vec3(1.) * (nml * .5  + .5) * exp(d * -.2); \n\n        vec3 li = softshadow(hit, sun, .01, 1., 3.) * vec3(1., .5, 0.4);\n        li += softshadow(hit, sun2, .01, 1., 3.) * vec3(.8, 0.9, 1.);\n        \n        float v = light(hit);\n        float x = sin(atan(hit.z, hit.x) + iTime * 40.) * .3 + .7;\n        li += (vec3(5.) * exp(v * -30.) + smoothstep(0.01, .0, v - 0.01)) * x;//smoothstep(0.1, .0, v);\n        //li += .1;\n        \n        vec3 ref = reflect(rd, nml);\n        //li += pow(texture(iChannel2, ref, 40.).xyz, vec3(2.)) * 0.2;\n        \n        float e = smoothstep(0., 1., amb_occ(hit, .002) /*+ (texture(iChannel1, hit.xz * 10.).x - .5) * 1.*/) * 0.2;\n        \n        col = pow(tpm(iChannel1, nml, hit).xyz + e, vec3(2.)) * li;\n        \n    }\n    else\n    {\n        col = pow(tpm(iChannel0, rd, rd).xyz, vec3(10.));\n    }\n    \n    d = 0.;\n    for(int i = 0; i < 20; ++i)\n    {\n        d += field(ro + rd * d);\n    }\n    if(d < 5.)\n    {\n        vec3 hit = ro + rd * d;\n        vec3 nml = field_normal(hit);\n        \n        float field_int = exp(fract(iTime) * -25.) + exp(fract(iTime * 1.3333333333) * -25.) + min(1., (iTime - 2.) / 6.);\n        field_int = max(field_int, 0.);\n        field_int *= .1;\n        \n    \tcol += field_int * (pow(1. - abs(tpm(iChannel0, nml, hit * .25 + iTime * .1).x - .5), 32.)) * (1. - dot(-nml, rd)) * (.5 + sin(iTime * 5.) * .5);\n    \t\n        col += field_int * (pow(1. - abs(tpm(iChannel0, nml, hit * .1 - iTime * .5).x - .5), 32.)) * (1. - dot(-nml, rd)) * exp(fract(iTime * 2.) * -2.);\n        \n        //col += 0.01;\n    }//*/\n    \n    //col += g * 0.01 * (clamp((iTime - 4.) * .1, 0., 1.));\n    \n    col = pow(col, vec3(1. / 2.2));\n    \n    col *= 1.3;\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// srtuss, 2017\n\nfloat s(float t)\n{\n    float v = 0.;\n    for(int i = 0; i < 32; ++i)\n    {\n        float h = float(i + 6);\n        v += sin(t * h) / h;\n    }\n    return v;\n    //return sin(t) + sin(t * 2.1) * .5 + sin(t * 5.13) * .25 + sin(t * 7.13) * .125;\n}\n\nvec2 s2(float t)\n{\n    vec2 v = vec2(0.);\n    vec4 rnd = vec4(1., 2., 3., 4.);\n    for(int i = 0; i < 16; ++i)\n    {\n        t += rnd.z;\n        rnd = fract(sin(rnd * 11.3123) * 908745.123);\n        v += s((t + sin(t * (6. + rnd.y * 1.111)) * .01) * exp2(rnd.y * .1 + 8.)) * vec2(rnd.x, 1. - rnd.x);\n    }\n    float wob = sin(t * 40.) * .2 + .5;\n    return mix(v * .3, vec2(1.) * sin(t * 400.), wob);\n}\n\nfloat hsh(float x)\n{\n    return fract(sin(x * 237.234234) * 982734.1235);\n}\n\nfloat nse(float x)\n{\n    float fl = floor(x);\n    x = smoothstep(0., 1., fract(x));\n    return mix(hsh(fl), hsh(fl + 1.), x) - .5;\n}\n\nfloat fbm(float x)\n{\n    return nse(x) + nse(x * -2.) * .5 + nse(x * 4.1) * .25;\n}\n\nvec2 metal(float time, float seed, float fmul, float lp)\n{\n    vec2 v = vec2(0.);\n    for(int i = 0; i < 30; ++i)\n    {\n        float f = 100. + pow(hsh(float(i) + seed), 3.) * 15000.;\n        f *= fmul;\n        vec4 dat = texture(iChannel0, vec2(float(i) / 100., time * 0.1));\n        \n        float amp = dat.x * exp(-f * lp);\n        \n    \tv += sin(time * f * 6.) * amp * (vec2(nse(time * .09 * f), nse(time * .091 * f)) * .8 + .2);\n        time -= 3.3333;\n    }\n    v *= 0.5;\n    return v;\n}\n\nvec2 sparks(float t)\n{\n    vec2 v = vec2(0.);\n    /* vec4 rnd = vec4(1., 2., 3., 4.);\n    for(int i = 0; i < 1; ++i)\n    {\n        rnd = fract(sin(rnd * 11.3123) * 908745.123);\n        float f = 80.;\n        v += exp(fract(t * f + hsh(floor(t * f)) * 0.1) * -100.) * vec2(rnd.x, 1. - rnd.x);\n        t += rnd.x;\n    }*/\n    float f = 80.;\n    v += exp(fract(t * f + hsh(floor(t * f)) * 0.1) * -100.) * vec2(.2, .8);\n    t -= .1;\n    v += exp(fract(t * f + hsh(floor(t * f)) * 0.1) * -100.) * vec2(.8, .2);\n    return v * fract(t + sin(t) * .3);// * smoothstep(-.2, .2, nse(t * 1.));\n}\n\nfloat f1(float t, float ts, float tl, float k)\n{\n\tfloat o1 = clamp(t - ts, 0.0, tl);\n\tfloat o2 = max(t - (ts + tl), 0.0);\n\n\treturn o1 * o1 * k / (2.0 * tl) + o2 * k;\n}\n\nfloat phase(float t)\n{\n    // phase result\n    float p;\n    \n    float tb = 0.0, td = 1.0;\n    float fl = 4.0, fn = 10.6;\n    \n    p = fl * t;\n    p += f1(t, tb, 0.4, fn - fl); fl = fn; tb += 2.0;\n    fn = (13.0);\n    p += f1(t, tb, 0.05, fn - fl); fl = fn; tb += 0.05;\n    fn = (0.001);\n    p += f1(t, tb, 0.8, fn - fl); fl = fn; tb += 0.3;\n    \n    \n    \n    return p;\n}\n\nfloat phase2(float t)\n{\n    // phase result\n    float p;\n    \n    float tb = 0.0, td = 1.0;\n    float fl = .5, fn = 1.2;\n    \n    p = fl * t;\n    p += f1(t, tb, 8., fn - fl);fl = fn; tb += 8.0;\n    //fn = (1.0);\n    //p += f1(t, tb, 1., fn - fl); fl = fn; tb += 0.05;\n    \n    \n    return p;\n}\n\n\nfloat wf2(float x)\n{\n    return nse(fract((sin(x * 300.0) * 0.001 + x) * 100.0) * 26.0) + sin(x * 100.);\n}\n\nvec2 se(float time)\n{\n    vec2 v = vec2(0.);\n    if(time > 1.)\n\t    v += vec2(hsh(time)) * .1 * (exp(max(time - 1., 0.) * -8.) + .5) * exp(max(time - 2., 0.) * -2.);\n    \n\n    float tt = max(time - 1.1, 0.) * .6;\n    v += wf2(phase(tt) * 1.0) * exp(-1.0 * max(tt - 2.0, 0.0)) * exp(-1.0 * max(1.0 - tt, 0.0)) * 0.1;\n\n    return v;\n}\n\nvec2 echo(float t)\n{\n    vec2 v;\n    \n    float a = 0.5, et = 0., fb = 0.6;\n    v = vec2(s(t));\n    v = v.yx + se(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.2;\n    v = v.yx + se(t - et) * a * vec2(0.5, 1.0); a *= -fb; et += 0.2;\n    v = v    + se(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.3;\n    v = v.yx + se(t - et) * a * vec2(1.0, 0.5); a *= -fb; et += 0.2;\n    /*v = v    + se(t - et) * a * vec2(0.5, 1.0); a *= fb; et += 0.3;\n    v = v    + se(t - et) * a * vec2(1.0, 0.5); a *= -fb; et += 0.3;\n    v = v.yx + se(t - et) * a * vec2(0.5, 1.0); a *= fb; et += 0.2;\n    v = v.yx + se(t - et) * a * vec2(1.0, 0.5); a *= -fb; et += 0.3;\n    v = v    + se(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.4;\n    v = v.yx + se(t - et) * a * vec2(0.5, 1.0); a *= -fb; et += 0.3;\n    v = v.yx + se(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.2;*/\n    \n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float _time = time;\n    time = phase2(time);//(time + exp(min(time, 1.) * 0.3));\n    vec2 v = sparks(time) * .05;\n    time *= 2.;\n    v += (vec2(s2(time) * 0.5) * 0.9 + metal(time, 1., .1, 0.) * 0.2) * .5;\n    \n    vec2 th = vec2(0.);\n    float tm = mod(time, 6.2);\n    float the = exp(tm * -1.) * min(tm * 40., 1.);\n    th = vec2(1.) * fbm(time * 30.) * the;\n    time -= 1.;\n    tm = mod(time, 6.2);\n    th += vec2(.3) * fbm(time * 30.) * exp(tm * -1.) * min(tm * 40., 1.);\n    time -= 1.;\n    tm = mod(time, 6.2);\n    th += vec2(.1) * fbm(time * 30.) * exp(tm * -1.) * min(tm * 40., 1.);\n    \n    time = _time;\n    \n    v += se(_time) * 0.4;\n    \n    return mix(v, th * 2., sqrt(the) * .5) * 1.3;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}