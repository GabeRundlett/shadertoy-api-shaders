{
    "Shader": {
        "info": {
            "date": "1722583070",
            "description": "originals https://www.shadertoy.com/view/ssVGWc",
            "flags": 1,
            "hasliked": 0,
            "id": "XfByzV",
            "likes": 2,
            "name": "hexagon tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "hexagon",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(1., 10.233))) * 40000.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nfloat invs(float y) {\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat isBetween(float a, float b, float c) {\n    //float k = 3. / iResolution.y;\n    return smoothstep(-0.5, 0., -mod(c-a, 2. * pi) + mod(b-a - 0.1 * pi, 2. * pi));\n   //return exp( -1. * (abs(-mod(c-a, 2. * pi) + mod(b-a, 2. * pi))) );\n}\n\nfloat ellipse(vec2 uv, vec2 p, vec2 q, float i) {\n    float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    i = 1.-quadTest;\n\n    // center point\n    vec2 c = (i == 1.) ? vec2(p.x, q.y)\n                       : vec2(q.x, p.y);\n\n    // axis distances between points\n    float x = abs(q.x - p.x), y = abs(q.y - p.y);\n\n    // ellipses (asymptotes when x==0 or y==0, annoying)\n    //float d = (i == 1.) ? length((uv - c) * vec2(y/x,1)) - y\n    //                    : length((uv - c) * vec2(1,x/y)) - x;\n\n    float d = sdEllipse(uv - c, vec2(x, y));\n\n    // (make this smoothstep or exp)\n    // float s = smoothstep(-0.02, 0.02, -abs(d) + 0.01);\n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, -abs(d) + 0.006);\n    s = exp(-100. * abs(d));\n    // a, b angles from center to points\n    // c angle from center to uv\n    float a1 = atan(p.x-c.x, p.y-c.y);\n    float a2 = atan(q.x-c.x, q.y-c.y); // move b from a-> b to \"draw\" thing\n    float b = atan(uv.x-c.x, uv.y-c.y);\n    \n    // flip clockwise <-> anticlockwise across diagonal quads\n    // float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    \n    // cut out a1,a2 segment of ellipse\n    float as = isBetween(a1, a2, b);\n    return s;// * mix(as, 1. - as, quadTest);\n}\n\n#define R iResolution.xy\n#define Main void mainImage2(out vec4 Q, in vec2 U) \n#define A(U) texture(iChannel0,(U)/R)\n#define B(U) texture(iChannel1,(U)/R)\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define phi 1.618\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \n #define R3(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)cos((h)*6.3+vec3(0,23,21))*.5+.5\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon(vec2 p, float r)\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\n\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n\n\t\nvec4 Q =fragColor;\nvec2 U = fragCoord;\nvec2 C = fragCoord;\n vec4 O=vec4(0);\n \n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));  \n    \n    float i=0.,g=0.,e,s;\n    \n    for(;++i<99.;){\n        p=d*g;\n        p.z+=(-iTime);\n        p=R3(p,vec3(1),.0);\n        \n        p=asin(sin(p*4.));\n        float sdf=sdHexagon(p.xy,2.);\n        \n        p.xy=vec2(sdf);\n        s=3.;\n        for(int i=0;i++<6;){\n\t\t\tp=vec3(3.2,6.8,5.2)-abs(p);    \n            \n          \tp=p.x<p.y?p.zxy:p.zyx;\n            s*=e=17.8/min(dot(p,p),13.8);\n            p=abs(p)*e;\n        }\n        g+=e=abs(p.y)/s+.001;\n        O.xyz+=(H(log(s)*.8)+.5)*exp(sin(i))/e*3e-5;\n    }\n    O*=O*O*O;\n    \n Q = A(U);\n    vec2 V = 2.*(U-.5*R)/R.y;\n    V.xy *= vec2(.8,1.2);\n       V*=ma;\n    for (float i = 0.; i < 100.; i++) {\n        vec3 W = vec3(V,0);\n        float c = 1.;\n        for (float j = 0.; j < 2.; j++) {\n            vec4 h = hash44(vec4(i+j*100.,U,iFrame));\n            float N = floor(64.);\n            float n = floor(h.z*N)/N;\n            float b = mod(floor(n*N),30.);\n            float a = 23.*pi*n*(1.+b)/2.;\n            W *= 1.8;\n            W.xy *= ei(a)*ma;\n            \n            W.x += 2.*n*exp2(-j);\n            c += 6.*n/(j+1.);\n            \n            vec4 dQ= exp2(4.*j)*exp(-80.*length(W.xy))*max(sin(-2.+c+vec4(1,2,3,100)),0.);\n            Q.xyz += 1.5*dQ.xyz;\n        }\n    }\n    vec3 from=vec3(1.,.5,0.5)*O.xyz;\n    mainVR(fragColor, fragCoord, from, dir);\n    fragColor+=Q;\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n     \n    fragColor+= vec4(happy_star(uv, anim) * vec3(0.35,0.2,1.015)*0.1, 1.0);\n  }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}