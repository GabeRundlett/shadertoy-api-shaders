{
    "Shader": {
        "info": {
            "date": "1607010800",
            "description": "This was fun!",
            "flags": 0,
            "hasliked": 0,
            "id": "wsGfD1",
            "likes": 8,
            "name": "Animated Graph",
            "published": 3,
            "tags": [
                "noise",
                "math",
                "graph",
                "continuousnoise"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "float noise(in float x) {\n    return fract(sin(x * 12.5673) * 573.123);\n}\n\nfloat continuousNoise(in float x) {\n    const float r = 2.735;\n\n    float x1 = floor(x * r) / r;\n    float y1 = noise(x1);\n\n    float x2 = ceil(x * r) / r;\n    float y2 = noise(x2);\n\n    return y1 + (0.5 + 0.5 * sin((2.0 * (x - x1) / (x2 - x1) - 1.0) * 1.57)) * (y2 - y1);\n}\n\nvec2 getSlopeVector(in float x) {\n    return normalize(vec2(0.002, continuousNoise(x + 0.001) - continuousNoise(x - 0.001)));\n}\n\n// SDF of equilateral triangle from Inigo Quilez's 2D distance functions article (https://iquilezles.org/articles/distfunctions2d):\nfloat sdEquilateralTriangle(in vec2 p, in float s) {\n    p /= s;\n\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0 / k;\n    if (p.x + k * p.y > 0.0) {\n        p = vec2(p.x - k * p.y, -k * p.x - p.y) / 2.0;\n    }\n\n    p.x -= clamp(p.x, -2.0, 0.0);\n    return -length(p) * sign(p.y) * s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 3.0 / iResolution.y * 4.0;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    fragColor.b += smoothstep(unit, 0.0, abs(uv.y - continuousNoise(uv.x + iTime)) - 0.01) * float(uv.x < 0.0);\n\n    vec2 slopeVector = getSlopeVector(iTime);\n    vec2 gradientVector = slopeVector.yx * vec2(1.0, -1.0);\n\n    uv.y -= continuousNoise(iTime);\n    vec2 tUV = vec2(dot(uv, gradientVector), dot(uv, slopeVector));\n\n    fragColor.rb += smoothstep(unit, 0.0, sdEquilateralTriangle(tUV, 0.1));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}