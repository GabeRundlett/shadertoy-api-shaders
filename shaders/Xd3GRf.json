{
    "Shader": {
        "info": {
            "date": "1451196159",
            "description": "Hello! I'm trying to optimize the ashima simplexNoise3D, I did some basic optim but can't find more, do you have suggestions? Thanks!\n\nOptimized2D Ashima : https://www.shadertoy.com/view/4sdGD8",
            "flags": 0,
            "hasliked": 0,
            "id": "Xd3GRf",
            "likes": 41,
            "name": "Optimized Ashima SimplexNoise3D",
            "published": 3,
            "tags": [
                "noise",
                "noise3d",
                "simplexnoise",
                "ashima"
            ],
            "usePreview": 0,
            "username": "Makio64",
            "viewed": 3081
        },
        "renderpass": [
            {
                "code": "// Optimized AshimaSimplexNoise by @makio64 https://www.shadertoy.com/view/Xd3GRf\n// Original : https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl\n// 2D Version: https://www.shadertoy.com/view/4sdGD8\n\n// v2.1 better permute ordering operation\n// v2.0: remove lowp & mediump it was causing bug on low device android.\nvec4 permute(vec4 x) { return mod(((x*34.)+1.)*x, 289.); }\nfloat snoise(in vec3 v){\n  const vec2 C = vec2(0.16666666666,0.33333333333);\n  const vec4 D = vec4(0,.5,1,2);\n  vec3 i  = floor(C.y*(v.x+v.y+v.z) + v);\n  vec3 x0 = C.x*(i.x+i.y+i.z) + (v - i);\n  vec3 g = step(x0.yzx, x0);\n  vec3 l = (1. - g).zxy;\n  vec3 i1 = min( g, l );\n  vec3 i2 = max( g, l );\n  vec3 x1 = x0 - i1 + C.x;\n  vec3 x2 = x0 - i2 + C.y;\n  vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  vec4 p = permute( permute( permute( i.z + vec4(0., i1.z, i2.z, 1.)) + i.y + vec4(0., i1.y, i2.y, 1.))+ i.x + vec4(0., i1.x, i2.x, 1.));\n  vec3 ns = .142857142857 * D.wyz - D.xzx;\n  vec4 j = -49. * floor(p * ns.z * ns.z) + p;\n  vec4 x_ = floor(j * ns.z);\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = floor(j - 7. * x_ ) * ns.x + ns.yyyy;\n  vec4 h = 1. - abs(x) - abs(y);\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  vec4 sh = -step(h, vec4(0.));\n  vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy;\n  vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww;\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pos = uv;\n    if(uv.x < .5){\n        pos*=20.;\n    } else {\n        pos*=0.5;\n    }\n    if(uv.y < .5){\n        pos*=5.;\n    } else {\n        pos*=20.;\n    }    \n    float noise = snoise(vec3(-pos.x,pos.y,0.5*iTime));\n\tfragColor = vec4(vec3(noise),1.0);\n}\n\n\n// For reference permute before v2.1\n// vec4 permute(in vec4 x){return mod(x*x*34.+x,289.);}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}