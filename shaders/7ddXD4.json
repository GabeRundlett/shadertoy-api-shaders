{
    "Shader": {
        "info": {
            "date": "1633191836",
            "description": "This is a two-state cellular automata based on a Moore neighborhood and Conway's Game of Life rules thats shows how to reference the previous frame of the same buffer to maintain state across generations.",
            "flags": 32,
            "hasliked": 0,
            "id": "7ddXD4",
            "likes": 1,
            "name": "cellular automata moore life",
            "published": 3,
            "tags": [
                "conway",
                "gameoflife",
                "cellularautomata",
                "mooreneighborhood"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // output Buffer A\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define N   100.0\n#define P   0.65\n#define ON  0.75\n#define OFF 0.25\n\nvec2 uv_to_cell(vec2 uv)\n{\n    mat2 b = mat2(1.0 / N, 0.0, 0.0, 1.0 / N);\n    return b * round(inverse(b) * uv);\n}\n\nfloat random (vec2 st)\n{\n    // https://thebookofshaders.com/10/\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // default to time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n    // compute circular cell radius\n    float r = 1.0 / N / 2.0;\n    // calculate central cell coordinate\n    vec2 cell = uv_to_cell(uv);\n    // update cell state if it contains the uv\n    if (distance(uv, cell) < r) {\n        if (iFrame < 60) {\n            // set random initial state\n            col = vec3(fract(random(iTime + cell * iTime)) <= P ? ON : OFF);\n        } else {\n            // get ON/OFF state of Moore neighborhood\n            // https://en.wikipedia.org/wiki/Moore_neighborhood\n            float dx = 2.0 * r;\n            float dy = 2.0 * r;\n            int nw = int(texture(iChannel0, cell + vec2(-dx, +dy)).rgb == vec3(ON));\n            int nc = int(texture(iChannel0, cell + vec2(0.0, +dy)).rgb == vec3(ON));\n            int ne = int(texture(iChannel0, cell + vec2(+dx, +dy)).rgb == vec3(ON));\n            int wc = int(texture(iChannel0, cell + vec2(-dx, 0.0)).rgb == vec3(ON));\n            int cc = int(texture(iChannel0, cell + vec2(0.0, 0.0)).rgb == vec3(ON));\n            int ec = int(texture(iChannel0, cell + vec2(+dx, 0.0)).rgb == vec3(ON));\n            int sw = int(texture(iChannel0, cell + vec2(-dx, -dy)).rgb == vec3(ON));\n            int sc = int(texture(iChannel0, cell + vec2(0.0, -dy)).rgb == vec3(ON));\n            int se = int(texture(iChannel0, cell + vec2(+dx, -dy)).rgb == vec3(ON));\n            int n = nw + nc + ne + wc + ec + sw + sc + se;\n            // update state of current central cell\n            // https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\n            // Any live cell with two or three live neighbours survives.\n            // All other live cells die in the next generation.\n            // Any dead cell with three live neighbours becomes a live cell.\n            // Similarly, all other dead cells stay dead.\n            if (cc == 1) col = vec3((n == 2 || n == 3) ? ON : OFF);\n            else /*****/ col = vec3((n == 3) ? ON : OFF);\n        }\n    }\n    // output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}