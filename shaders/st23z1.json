{
    "Shader": {
        "info": {
            "date": "1623388309",
            "description": "Warped.",
            "flags": 0,
            "hasliked": 0,
            "id": "st23z1",
            "likes": 14,
            "name": "Warping Grid",
            "published": 3,
            "tags": [
                "texture",
                "warp",
                "bilinear",
                "piecewise"
            ],
            "usePreview": 1,
            "username": "oneshade",
            "viewed": 499
        },
        "renderpass": [
            {
                "code": "#define SCALE 4.0\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\n// Random cycling points\nvec2 getPoint(in vec2 cell) {\n    float freq = Hash11(dot(cell, vec2(393.84, 673.48))) * 10.0 - 5.0;\n    float phase = Hash11(dot(cell, vec2(348.46, 183.37)));\n    float amp = Hash11(dot(cell, vec2(275.35, 741.69)));\n    float t = iTime * freq + phase;\n    return cell + 0.5 + 0.5 * vec2(cos(t), sin(t)) * amp;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// Get UV coordinates in a bilinear patch (requires solving a quadratic)\nfloat cross2D(in vec2 a, in vec2 b) { return a.y * b.x - a.x * b.y; }\nbool iBilinear(in vec2 xy, in vec2 a, in vec2 b, in vec2 c, in vec2 d, out vec4 uv) {\n    vec2 p = a - b + c - d;\n    vec2 q = b - a, r = d - a;\n\n    float c1 = cross2D(r, p);\n    float c2 = cross2D(r, q) + cross2D(a, p) + cross2D(p, xy);\n    float c3 = cross2D(a, q) + cross2D(q, xy);\n\n    float discr = c2 * c2 - 4.0 * c1 * c3;\n    if (discr > 0.0) {\n        uv.yw = (vec2(-1.0, 1.0) * sqrt(discr) - c2) / c1 * 0.5;\n        uv.xz = (xy.x - a.x - r.x * uv.yw) / (p.x * uv.yw + q.x);\n        return true;\n    }\n\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * SCALE;\n    float unit = 2.0 * SCALE / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 cell = floor(uv);\n    vec2 centerPoint = getPoint(cell);\n    for (int i=-1; i <= 1; i++) {\n        for (int j=-1; j <= 1; j++) {\n            if (abs(i) != abs(j)) {\n                // Draw lines to the right, left, top, and bottom cell points\n                vec2 edgePoint = getPoint(cell + vec2(i, j));\n                color += smoothstep(unit, 0.0, sdLine(uv, centerPoint, edgePoint));\n            }\n\n            if (i <= 0 && j >= 0) {\n                vec4 patchUv;\n\n                // Cells and their vertices\n                vec2 c1 = cell + vec2(i    , j - 1), v1 = getPoint(c1);\n                vec2 c2 = cell + vec2(i + 1, j - 1), v2 = getPoint(c2);\n                vec2 c3 = cell + vec2(i + 1, j    ), v3 = getPoint(c3);\n                vec2 c4 = cell + vec2(i    , j    ), v4 = getPoint(c4);\n\n                // Draw the current warped cell\n                if (iBilinear(uv, v1, v2, v3, v4, patchUv)) {\n                    if (all(lessThan(abs(patchUv.zw - 0.5), vec2(0.5)))) {\n                        vec2 texUv = (iResolution.y / SCALE * (c1 + patchUv.zw) + center) / iResolution.xy;\n                        color += texture(iChannel0, texUv).rgb;\n                    }\n                }\n            }\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}