{
    "Shader": {
        "info": {
            "date": "1563487692",
            "description": "checkerboard",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd23z1",
            "likes": 3,
            "name": "[Ese] checkerboard",
            "published": 3,
            "tags": [
                "checkerboard"
            ],
            "usePreview": 0,
            "username": "Eseris",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "// A checkerboard with exact analytic antialiasing\n// reference: https://iquilezles.org/articles/checkerfiltering\n\n\nmat2 rot(float a) {\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\n// triangle signal\nvec2 tri(vec2 x) {\n    return 1. - 2. * abs(fract(x * .5) - .5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - iResolution.xy / 2.)/iResolution.yy;\n    uv *= rot(.1 * iTime);\n    uv *= 6.;\n    \n    // filter kernel\n    vec2 w = max(abs(dFdx(uv)), abs(dFdy(uv))) + .01;\n    \n    // analytical integral\n    vec2 i = (tri(uv+0.5*w)-tri(uv-0.5*w))/w;\n    \n    float c = .5 - .5 * i.x * i.y;\n    \n    vec2 v = 2. * smoothstep(-.1, .1, sin(uv * 3.141592)) - 1.;\n    //c = 1. - v.x * v.y - .5 * (v.x * v.y);\n    \n    //float c = (mod(floor(uv.x) + floor(uv.y), 2.) < 1. ) ? 0. : 1.;\n\n    fragColor = vec4(vec3(c), 1);\n} ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}