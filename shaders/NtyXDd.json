{
    "Shader": {
        "info": {
            "date": "1641492099",
            "description": "random generate pipe maze in SMB3",
            "flags": 0,
            "hasliked": 0,
            "id": "NtyXDd",
            "likes": 7,
            "name": "Pipe Maze in SMB3",
            "published": 3,
            "tags": [
                "bitmap",
                "truchet"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// Copyright Â© 2022 IWBTShyGuy\n// Attribution 4.0 International (CC BY 4.0)\n\n// bitmap reference\n// https://www.spriters-resource.com/nes/supermariobros3/sheet/81122/\n\nconst vec3 PALLET[] = vec3[](\n    vec3(0),\n    vec3(0xb0, 0xfc, 0xcc) / 255.0,\n    vec3(0x00, 0x90, 0x38) / 255.0,\n    vec3(0x00, 0x3c, 0x14) / 255.0,\n    vec3(0xa4, 0x00, 0x00) / 255.0,\n    vec3(0xfc, 0x98, 0x38) / 255.0,\n    vec3(0xfc, 0xbc, 0xb0) / 255.0\n);\n\nconst vec3 DARK_WHITE = vec3(0x17, 0x3f, 0x5b) / 255.0;\n\nconst uint BITMAP[] = uint[](\n    858993459U,858993459U,858993459U,858993459U,286331155U,286331153U,286331153U,823202065U,\n    286396963U,572662050U,842142242U,857944882U,286396963U,572662050U,842142242U,857944882U,\n    286396963U,572662050U,842142242U,857944882U,286396963U,572662050U,842142242U,857944882U,\n    286396963U,572662050U,842142242U,857944882U,286396963U,572662050U,842142242U,857944882U,\n    286396963U,572662050U,842142242U,857944882U,286396963U,572662050U,842142242U,857944882U,\n    286396963U,572662050U,842142242U,857944882U,286396963U,572662050U,842142242U,857944882U,\n    286396963U,572662050U,842142242U,857944882U,286396963U,572662050U,842142242U,857944882U,\n    858993459U,858993459U,858993459U,858993459U,858993459U,858993459U,858993459U,858993459U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    287384112U,572658209U,589504802U,53621555U,287384112U,572658209U,589504802U,53621555U,\n    1073741824U,1145324612U,1145324612U,71582788U,1145044992U,1431655765U,1431655765U,1146443093U,\n    1430536192U,1431655765U,1431655765U,1163150677U,1431651328U,1431655765U,1431655765U,1162241109U,\n    1431655424U,1431655765U,1431655765U,1162232917U,1431655488U,1431655765U,1431655765U,1163150676U,\n    1431655744U,1431655765U,1431655765U,1163220292U,1431655748U,1431655765U,1431655765U,1163215941U,\n    1431655764U,1431655765U,1431655765U,1163220309U,1431655764U,1431655765U,1431655765U,1163220309U,\n    1431655764U,1431655765U,1431655765U,1163220309U,1431655764U,1431655765U,1431655765U,1163220309U,\n    1431655764U,1431655765U,1431655765U,1163220309U,1431655764U,1431655765U,1431655765U,1163220309U,\n    1431655764U,1431655765U,1431655765U,1163220309U,1431655764U,1431655765U,1431655765U,1163220309U\n);\n\nconst int TILE[] = int[](\n    // tile 0\n    0, 0, 5, 0, 0,\n    0, 0, 5, 0, 0,\n    6, 6, 7, 6, 6,\n    0, 0, 5, 0, 0,\n    0, 0, 5, 0, 0,\n\n    // tile 1\n    0, 0, 5, 0, 0,\n    0, 0, 3, 0, 0,\n    6, 2, 0, 4, 6,\n    0, 0, 1, 0, 0,\n    0, 0, 5, 0, 0,\n    \n    // tile 2\n    0, 1, 5, 0, 0,\n    0, 5, 8, 6, 2,\n    6, 11, 0, 9, 6,\n    4, 6, 10, 5, 0,\n    0, 0, 5, 3, 0,\n\n    // tile 3\n    0, 0, 5, 0, 0,\n    0, 0, 8, 6, 2,\n    6, 6, 6, 6, 6,\n    4, 6, 10, 0, 0,\n    0, 0, 5, 0, 0,\n\n    // tile 4\n    0, 0, 8, 6, 10,\n    0, 0, 0, 0, 5,\n    6, 6, 10, 0, 8,\n    0, 0, 5, 0, 0,\n    0, 0, 5, 0, 0\n);\n\nint getBitmapIdx(in ivec2 U, in int unitIdx) {\n    switch (unitIdx) {\n        case 0: return 512;\n        case 1: return U.y < 16 ? (15 - U.y) * 32 + U.x : 512;\n        case 2: return U.x < 16 ? (15 - U.x) * 32 + 31 - U.y : 512;\n        case 3: return U.y > 15 ? (U.y - 16) * 32 + U.x : 512;\n        case 4: return U.x > 15 ? (U.x - 16) * 32 + 31 - U.y : 512;\n        case 5: return (31 - U.y % 16) * 32 + U.x;\n        case 6: return (31 - U.x % 16) * 32 + 31 - U.y;\n        case 7: return min(63 - U.y, 32 + U.y) * 32 + max(31 - U.x, U.x);\n        case 8: return min(63 - U.y, 32 + U.y) * 32 + max(sign(U.y - 15) * (31 - U.x), U.x);\n        case 9: return min(63 - U.y, 32 + U.y) * 32 + max(sign(15 - U.y) * (31 - U.x), U.x);\n        case 10: return min(63 - U.y, 32 + U.y) * 32 + max(31 - U.x, sign(15 - U.y) * U.x);\n        case 11: return min(63 - U.y, 32 + U.y) * 32 + max(31 - U.x, sign(U.y - 15) * U.x);\n    }\n}\n\nvec3 unitColor(in ivec2 U, in int unitIdx) {\n    int idx = getBitmapIdx(U, unitIdx);\n    return PALLET[(BITMAP[idx/8]>>idx*4)%16u];\n}\n\nvec3 darkUnitColor(in ivec2 U, in int unitIdx) {\n    int idx = getBitmapIdx(U, unitIdx);\n    switch ((BITMAP[idx/8]>>idx*4)%16u) {\n        case 1u:\n        case 4u:\n            return DARK_WHITE;\n        default:\n            return vec3(0);\n    }\n}\n\n// If one simply rotates and flips the bitmap, the highlights will be off.\n// These transformations are represented by substitutions.\nconst int ROT_UNIT[12] = int[](0, 2, 3, 4, 1, 6, 5, 7, 9, 10, 11, 8);\nconst int SYM_UNIT[12] = int[](0, 1, 4, 3, 2, 5, 6, 7, 11, 10, 9, 8);\n\nstruct Tile {\n    int idx;\n    bool rot;\n    bool sym;\n};\n\nint getUnitIdx(in ivec2 U, in Tile tile) {\n    if (tile.sym) U = ivec2(4 - U.x, U.y);\n    if (tile.rot) U = ivec2(4 - U.y, U.x);\n    int unitIdx = TILE[tile.idx * 25 + (4 - U.y) * 5 + U.x];\n    if (tile.rot) unitIdx = ROT_UNIT[unitIdx];\n    if (tile.sym) unitIdx = SYM_UNIT[unitIdx];\n    return unitIdx;\n}\n\nvec3 tileColor(in ivec2 U, in Tile tile) {\n    return unitColor(U % 32, getUnitIdx(U / 32, tile));\n}\n\nvec3 tileDarkColor(in ivec2 U, in Tile tile) {\n    return darkUnitColor(U % 32, getUnitIdx(U / 32, tile));\n}\n\nTile getTile(int randomIdx) {\n    switch (randomIdx) {\n        case 0: return Tile(0, false, false);\n        case 1: return Tile(1, false, false);\n        case 2: return Tile(2, false, false);\n        case 3: return Tile(2, false, true);\n        case 4: return Tile(3, false, false);\n        case 5: return Tile(3, true, false);\n        case 6: return Tile(3, false, true);\n        case 7: return Tile(3, true, true);\n        case 8: return Tile(4, false, false);\n        case 9: return Tile(4, true, false);\n        case 10: return Tile(4, false, true);\n        default: return Tile(4, true, true);\n    }\n}\n\n// https://www.shadertoy.com/view/XlXcW4\nvec3 hash(uvec3 x) {\n    const uint k = 1103515245U;  // GLIB C\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvoid mainImage(out vec4 O, in vec2 FC) {\n    ivec2 U = ivec2(FC + iTime * iResolution.x / 24.0);\n    vec3 c = tileColor(U % 160, getTile(int(hash(uvec3(U / 160, 1)).x * 12.0)));\n    if (c == vec3(0)) {\n        U = ivec2(FC + iTime * iResolution.x / 48.0);\n        c = tileDarkColor(U % 160, getTile(int(hash(uvec3(U / 160, 1)).y * 12.0)));\n    }\n    O = vec4(c, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}