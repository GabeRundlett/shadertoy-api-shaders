{
    "Shader": {
        "info": {
            "date": "1593800739",
            "description": "License CC0: Alien skin\nMore playing around with warped FBMs",
            "flags": 0,
            "hasliked": 0,
            "id": "wtBcRW",
            "likes": 23,
            "name": "Alien Skin",
            "published": 3,
            "tags": [
                "fbm",
                "warp"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1063
        },
        "renderpass": [
            {
                "code": "// License CC0: Alien skin\n//  More playing around with warped FBMs\n//  https://iquilezles.org/articles/warp\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat hash(in vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nvec2 hash2(vec2 p) {\n  p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n  return fract(sin(p)*18.5453);\n}\n\nfloat psin(float a) {\n  return 0.5 + 0.5*sin(a);\n}\n\nfloat onoise(vec2 x) {\n  x *= 0.5;\n  float a = sin(x.x);\n  float b = sin(x.y);\n  float c = mix(a, b, psin(TAU*tanh(a*b+a+b)));\n  \n  return c;\n}\n\nfloat vnoise(vec2 x) {\n  vec2 i = floor(x);\n  vec2 w = fract(x);\n    \n#if 1\n  // quintic interpolation\n  vec2 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n#else\n  // cubic interpolation\n  vec2 u = w*w*(3.0-2.0*w);\n#endif    \n\n  float a = hash(i+vec2(0.0,0.0));\n  float b = hash(i+vec2(1.0,0.0));\n  float c = hash(i+vec2(0.0,1.0));\n  float d = hash(i+vec2(1.0,1.0));\n    \n  float k0 =   a;\n  float k1 =   b - a;\n  float k2 =   c - a;\n  float k3 =   d - c + a - b;\n\n  float aa = mix(a, b, u.x);\n  float bb = mix(c, d, u.x);\n  float cc = mix(aa, bb, u.y);\n  \n  return k0 + k1*u.x + k2*u.y + k3*u.x*u.y;\n}\n\nfloat fbm(vec2 p, int mx) {\n  vec2 op = p;\n  const float aa = 0.45;\n  const float pp = 2.03;\n  const vec2 oo = -vec2(1.23, 1.5);\n  const float rr = 1.2;\n  \n  float h = 0.0;\n  float d = 0.0;\n  float a = 1.0;\n  \n  for (int i = 0; i < mx; ++i) {\n    h += a*onoise(p);\n    d += (a);\n    a *= aa;\n    p += oo;\n    p *= pp;\n    rot(p, rr);\n  }\n  \n  return mix((h/d), -0.5*(h/d), pow(vnoise(0.9*op), 0.25));\n}\n\nfloat warp(vec2 p) {\n  const int mx1 = 8;\n  const int mx2 = 3;\n  const int mx3 = 3;\n  vec2 v = vec2(fbm(p, mx1), fbm(p+0.7*vec2(1.0, 1.0), mx1));\n  \n  rot(v, 1.0+TIME*0.1);\n  \n  vec2 vv = vec2(fbm(p + 3.7*v, mx2), fbm(p + -2.7*v.yx+0.7*vec2(1.0, 1.0), mx2));\n\n  rot(vv, -1.0+TIME*0.2315);\n\n    \n  return fbm(p + 1.4*vv, mx3);\n}\n\nfloat height(vec2 p) {\n  float a = 0.005*TIME;\n  p += 5.0*vec2(cos(a), sin(sqrt(0.5)*a));\n  p *= 2.0;\n  p += 13.0;\n  float h = warp(p);\n  float rs = 3.0;\n  return 0.4*tanh(rs*h)/rs;\n}\n\nvec3 normal(vec2 p) {\n  // As suggested by IQ, thanks!\n  vec2 eps = -vec2(2.0/iResolution.y, 0.0);\n  \n  vec3 n;\n  \n  n.x = height(p + eps.xy) - height(p - eps.xy);\n  n.y = 2.0*eps.x;\n  n.z = height(p + eps.yx) - height(p - eps.yx);\n  \n  \n  return normalize(n);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(0.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)  {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x*=RESOLUTION.x/RESOLUTION.y;\n \n  const vec3 lp1 = vec3(0.8, -0.75, 0.8);\n  const vec3 lp2 = vec3(-0., -1.5, -1.0);\n\n  float h = height(p);\n  vec3 pp = vec3(p.x, h, p.y);\n  vec3 ld1 = normalize(lp1 - pp);\n  vec3 ld2 = normalize(lp2 - pp);\n \n  vec3 n = normal(p);\n  float diff1 = max(dot(ld1, n), 0.0);\n  float diff2 = max(dot(ld2, n), 0.0);\n \n  const vec3 baseCol1 = vec3(0.6, 0.8, 1.0);\n  const vec3 baseCol2 = sqrt(baseCol1.zyx);\n  \n  vec3 col = vec3(0.0);\n  col += baseCol1*pow(diff1, 16.0);\n  col += 0.1*baseCol1*pow(diff1, 4.0);\n  col += 0.15*baseCol2*pow(diff2,8.0);\n  col += 0.015*baseCol2*pow(diff2, 2.0);\n\n  col = clamp(col, 0.0, 1.0);\n  col =mix(0.05*baseCol1, col, 1.0 - (1.0 - 0.5*diff1)*exp(- 2.0*smoothstep(-.1, 0.05, (h))));\n\n\n  col = postProcess(col, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}