{
    "Shader": {
        "info": {
            "date": "1719787235",
            "description": "You can add more cube by doing a min() and adding more RayTrace() at line 56 and subtracting the position of the cube to the camera",
            "flags": 0,
            "hasliked": 0,
            "id": "4XdXWl",
            "likes": 1,
            "name": "Cube Ray intersection",
            "published": 3,
            "tags": [
                "cube"
            ],
            "usePreview": 0,
            "username": "12446GD",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "const float pi = 3.14159265358979;\n\n\n\nvec3 Raytrace(vec3 ro,vec3 rd){\n    vec3 minimum = vec3(-0.5);\n    vec3 maximum = vec3(0.5);\n    \n    vec3 tmin = (minimum-ro)/rd;\n    vec3 tmax = (maximum-ro)/rd;\n    \n    if (tmin.x > tmax.x){\n        float temp = tmax.x;\n        tmax.x = tmin.x;\n        tmin.x = temp;\n    }\n    if(tmin.y>tmax.y){\n        float temp = tmax.y;\n        tmax.y = tmin.y;\n        tmin.y = temp;\n    }\n    if(tmin.z>tmax.z){\n        float temp = tmax.z;\n        tmax.z = tmin.z;\n        tmin.z = temp;\n    }\n    \n    float tenter = max(max(tmin.x,tmin.y),tmin.z); \n    float texit = min(min(tmax.x,tmax.y),tmax.z);\n    \n    if ((tenter <= texit) && (texit >= 0.0)){\n        return vec3(tenter/5.0);    //Used tenter for depth use 0.0 if not\n    }else{\n        return vec3(1.0);\n    }\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    float rotation = mod(iTime,2.0*pi);\n    vec3 Cam = vec3(sin(rotation),0.0,-cos(rotation))*2.0;\n    vec3 Dir = normalize(vec3(uv,1.0));\n\n    mat3 Rot = mat3(\n                cos(-rotation+pi),0.0,sin(-rotation+pi),\n                     0.0     ,1.0,       0.0,\n                -sin(-rotation+pi),0.0,cos(-rotation+pi)\n    );\n    \n    Dir = Dir*-Rot;\n    \n    vec3 col = Raytrace(Cam,Dir) ;\n\n    fragColor = vec4(col,0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}