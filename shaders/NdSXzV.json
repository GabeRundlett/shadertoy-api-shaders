{
    "Shader": {
        "info": {
            "date": "1620550041",
            "description": "Intersections with this case of a trochoid can be solved analytically. Best part, you can apply all sorts of transformations without having to change the intersector (translate, rotate, scale, shear)!",
            "flags": 0,
            "hasliked": 0,
            "id": "NdSXzV",
            "likes": 8,
            "name": "Limacon Intersection 2D I",
            "published": 3,
            "tags": [
                "2d",
                "ray",
                "raycasting",
                "intersection",
                "trochoid",
                "limacon"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "// Convenience struct\nstruct Hit4 {\n    int nHit;\n    vec4 tHit;\n};\n\n// Drawing utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// SDFs\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat sqLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    vec2 toProj = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return dot(toProj, toProj);\n}\n\nfloat sdVerticalLine(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\n\nfloat sdInfLine(in vec2 p, in vec2 a, in vec2 b) {\n    return abs(dot(p - a, normalize(b - a).yx * vec2(-1.0, 1.0)));\n}\n\nfloat sdVectorArrow(in vec2 p, in vec2 v) {\n    float m = length(v); vec2 n = v / m;\n    p = vec2(dot(p, n.yx * vec2(1.0, -1.0)), dot(p, n));\n    return min(sdVerticalLine(p, m) - 0.025, sdIsosceles(p - vec2(0.0, m), 0.1, 0.15));\n}\n\n// Parametric\nvec2 posLimacon(in float t, in float alpha) {\n    float t2 = 2.0 * t;\n    float x = cos(t2) + alpha * cos(t);\n    float y = sin(t2) + alpha * sin(t);\n    return vec2(x, y);\n}\n\n// Intersection\nHit4 iLimacon(in vec2 ro, in vec2 rd, in float alpha) {\n    Hit4 isect = Hit4(0, vec4(-1.0));\n    float y = dot(ro, normalize(rd).yx * vec2(1.0, -1.0));\n    float u = atan(rd.y, rd.x), dd = dot(rd, rd);\n\n    float shift = 0.5 * u;\n    vec2 sc = vec2(sin(shift), 2.0 * cos(shift)) * alpha;\n\n    // Solve a quartic in tan((x+shift)/2)\n    float qa = y + sc.x, qb = sc.y - 4.0, qc = 2.0 * y, qd = sc.y + 4.0, qe = y - sc.x;\n    qb /= qa; qc /= qa; qd /= qa; qe /= qa; // Divide by leading coefficient to make it 1\n\n    float bb = qb * qb;\n    float p = qc - 0.375 * bb;\n    float q = qd - 0.5 * qb * qc + 0.125 * bb * qb;\n    float r = qe - 0.25 * qb * qd + 0.0625 * bb * qc - 0.01171875 * bb * bb;\n\n    // Solve for an arbitary root to x^3 + 2px^2 + (p^2 - 4r)x - q^2\n    float ra = 2.0 * p;\n    float rb = p * p - 4.0 * r;\n    float rc = -q * q;\n\n    float raa = ra * ra;\n    float inflect = ra / 3.0;\n\n    float rp = rb - raa / 3.0;\n    float rq = raa * ra / 13.5 - ra * rb / 3.0 + rc;\n    float rppp = rp * rp * rp, rqq = rq * rq;\n\n    float p2 = abs(rp);\n    float v1 = 1.5 / rp * rq;\n\n    float lambda;\n    if (rqq * 0.25 + rppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2);\n        if (rp < 0.0) lambda = sign(rq) * cosh(acosh(v2 * -sign(rq)) / 3.0);\n        else lambda = sinh(asinh(v2) / 3.0);\n        lambda = -sqrt(p2 / 3.0) * lambda;\n    }\n\n    else lambda = sqrt(-rp / 3.0) * cos(acos(v1 * sqrt(-3.0 / rp)) / 3.0);\n    lambda = 2.0 * lambda - inflect;\n\n    // Solve two quadratic equations (checking for negative sqrts which should be complex)\n    if (lambda < 0.0) return isect;\n    float sqrtLambda = sqrt(lambda);\n\n    float pLambda = p + lambda, qLambda = q / sqrtLambda;\n    float offs = 0.25 * qb;\n\n    float foo = lambda - 2.0 * (pLambda + qLambda);\n    float bar = lambda - 2.0 * (pLambda - qLambda);\n\n    if (foo >= 0.0) {\n        vec2 roots = atan((vec2(1.0, -1.0) * sqrt(foo) + sqrtLambda) * 0.5 - offs) * 2.0 + shift;\n        isect.tHit.x = dot(posLimacon(roots.x, alpha) - ro, rd) / dd; // Project onto the ray\n        isect.tHit.y = dot(posLimacon(roots.y, alpha) - ro, rd) / dd;\n        isect.nHit += 2;\n    }\n\n    if (bar >= 0.0) {\n        vec2 roots = atan((vec2(1.0, -1.0) * sqrt(bar) - sqrtLambda) * 0.5 - offs) * 2.0 + shift, tRoots;\n        tRoots.x = dot(posLimacon(roots.x, alpha) - ro, rd) / dd; // Project onto the ray\n        tRoots.y = dot(posLimacon(roots.y, alpha) - ro, rd) / dd;\n        if (isect.nHit > 0) isect.tHit.zw = tRoots;\n        else isect.tHit.xy = tRoots;\n        isect.nHit += 2;\n    }\n\n    return  isect;\n}\n\n// Animation\nvec2 Hash12(in float t) {\n\tvec3 p3 = fract(t * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec4 getRay(in float t) {\n    float id = floor(t), local = fract(t);\n    vec2 a = Hash12(id), b = Hash12(id + 1.0), c = Hash12(id + 2.0);\n    vec2 mid1 = 0.5 * (a + b), mid2 = 0.5 * (b + c);\n\n    float tInv = 1.0 - local;\n    vec2 pos = mid1 * tInv * tInv + 2.0 * b * tInv * local + mid2 * local * local;\n    vec2 dir = normalize(mid1 * (local - 1.0) + (1.0 - 2.0 * local) * b + mid2 * local);\n\n    return vec4(pos, dir);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 8.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 8.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float alpha = 3.0 * sin(iTime * 0.5);\n\n    vec4 ray = getRay(iTime * 0.25);\n    vec2 ro = ray.xy * 8.0 - 4.0, rd = ray.zw;\n    if (iMouse.z > 0.0) ro = mouse.zw, rd = mouse.xy - mouse.zw;\n\n    // Nice colors from iq\n    float limacon = 1e20;\n    vec2 prev = posLimacon(-3.14, alpha);\n    float tStep = 0.05;\n    for (float t=tStep - 3.14; t < 3.14 + tStep; t += tStep) {\n        vec2 cur = posLimacon(t, alpha);\n        limacon = min(limacon, sqLine(uv, prev, cur));\n        prev = cur;\n    }\n\n    drawSDF(sqrt(limacon) * 0.5 - 0.015, vec3(0.0, 0.0, 1.0));\n    drawSDF(sdInfLine(uv * 0.5, ro * 0.5, (ro + rd) * 0.5) - 0.001, vec3(1.0, 0.8, 0.0));\n    drawSDF(sdVectorArrow((uv - ro) * 0.5, rd * 0.5), vec3(1.0));\n\n    // Find the closest hit in front of the camera\n    Hit4 hit = iLimacon(ro, rd, alpha);\n    for (int n=0; n < hit.nHit; n++) {\n        vec2 pos = ro + rd * hit.tHit[n];\n        drawSDF(length(uv - pos) - 0.1, vec3(1.0, 0.0, 0.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}