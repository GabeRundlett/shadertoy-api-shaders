{
    "Shader": {
        "info": {
            "date": "1673043804",
            "description": "https://genuary.art/  Steal like an artist\nReproducing some Etienne Jacob's work",
            "flags": 32,
            "hasliked": 0,
            "id": "Dlj3Rm",
            "likes": 23,
            "name": "Genuary2023 jan.6",
            "published": 3,
            "tags": [
                "genuary"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float _seed;\nfloat hash11(float seed)\n{\n  return fract(sin(seed*123.456)*123.456);\n}\nfloat rand()\n{\n  return hash11(_seed++);\n}\nfloat _cube(vec3 p, vec3 s)\n{\n  vec3 l = abs(p)-s;\n  return max(l.x,max(l.y,l.z));\n}\nfloat _cucube(vec3 p, vec3 s,vec3 t)\n{\n  vec3 l = abs(p)-s;\n  float c = max(l.x,max(l.y,l.z));\n  l = abs(l)-s*t;\n\n  float x = max(max(l.x,c),l.y);\n  float y = max(max(l.z,c),l.y);\n  float z = max(max(l.x,c),l.z);\n  return min(min(x,y),z);\n}\nmat2 r2d(float a)\n{\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c,-s,s,c);\n}\n#define sat(a) clamp(a,0.1,1.)\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd,r));\n  return normalize(rd+(r*uv.x+u*uv.y)*.75);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if(a.x<b.x)\n  return a;\n  return b;\n}\n\nvec2 map(vec3 p)\n{\n  vec2 acc = vec2(10000.,-1.);\n\n//acc = _min(acc, vec2(length(p)-1.,0.));\nacc = _min(acc, vec2(-p.y,1.));\nfloat time = iTime*.5;\np.z+=time*.65;\nvec2 rep = vec2(1.);\nvec3 p2 = p-vec3(0.,-.25,0.);\nvec2 id = floor((p2.xz+rep*.5)/rep);\nfloat ida = abs(id.x+10.*id.y);\np2.xz = mod(p2.xz+rep*.5,rep)-rep*.5;\nfloat t = time*2.+ida;\np2.y+=abs(sin(t*2.))*.1;\np2.yz*=r2d(-t);\n\nfloat cube = _cube(p2,vec3(.2));\nacc = _min(acc,vec2(cube,ida));\nfloat cubew = _cucube(p2,vec3(.21),vec3(.1));\nacc = _min(acc,vec2(cubew,-ida));\n  return acc;\n}\n\nvec3 getNorm(float d, vec3 p)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  accCol = vec3(0.);\n  vec3 p = ro;\n  for (int i = 0;i<steps&&distance(p,ro)<40.;++i)\n  {\n    vec2 res = map(p);\n    if (res.x<0.01)\n      return vec3(res.x,distance(p,ro),res.y);\n    p+=rd*res.x*.35;\n\n  }\n  return vec3(-1.);\n}\n\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res)\n{\n  vec3 col = n*.5+.5;\n  float gsz = 5.;\n  if (res.z==1.)\n  {\n    vec2 gridh = sin(p.xz*gsz)-.9;\n    col*= 0.*sat(max(gridh.x,gridh.y)*100.);\n  }\n  if (res.z<0.)\n  {\n    vec2 gridh = sin(p.xy*gsz)-.9;\n    col= vec3(1.)*2.*pow(texture(iChannel0,vec2(res.z*.01+iTime*.005)).x,4.);\n  }\n  if(res.z>1.)\n  col = vec3(0.);\n  return col;\n}\n\nvec3 rdr(vec2 uv,vec2 ouv)\n{\n\n  vec3 col= vec3(0.);\n  float t = iTime*.33;\n  vec3 ro = vec3(4.,-4.,2.);\n  vec3 ta = vec3(0.,0.,0.);\n  vec3 rd = normalize(ta-ro);\n\n  rd = getCam(rd,uv);\n\n  vec3 res = trace(ro,rd, 128);\n  float y =-1.;\n  if (res.y >0.)\n  {\n    vec3 p = ro+rd*res.y;\n    vec3 n = getNorm(res.x,p);\n    y = p.y;\n    col = getMat(p,n,rd,res);\n    if(res.z != 0.)\n    {\n      vec3 refl = normalize(reflect(rd,n)\n        +(vec3(rand(),rand(),rand())-.5)*.1);\n      vec3 resrefl = trace(p+n*.01,refl,128);\n      if(resrefl.y>0.)\n      {\n        vec3 prefl = p+n*.01+refl*resrefl.y;\n        vec3 nrefl = getNorm(resrefl.x,prefl);\n        col+= getMat(prefl,nrefl,refl,resrefl);\n      }\n    }\n  }\ncol+=accCol;\ncol = mix(col, texture(iChannel1,ouv).xyz,.6);\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.xx;\nvec2 ouv = (fragCoord.xy/iResolution.xy);\n\n  _seed = texture(iChannel0,uv).x+iTime;\n\n  vec3 col = rdr(uv,ouv);\n    { // Not so cheap antialiasing SSAA x4\n\n        vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n        vec3 acc = col;\n        // To avoid too regular pattern yielding aliasing artifacts\n        mat2 rot = r2d(uv.y*5.); // a bit of value tweaking, appears to be working well\n        acc += rdr(uv-off.xx*rot,ouv);\n        acc += rdr(uv-off.xy*rot,ouv);\n        acc += rdr(uv-off.yy*rot,ouv);\n        acc += rdr(uv-off.yx*rot,ouv);\n        col = acc/5.;\n    }\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}