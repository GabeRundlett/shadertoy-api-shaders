{
    "Shader": {
        "info": {
            "date": "1641721890",
            "description": "inspired by https://twitter.com/TatsuyaBot/status/1477856713332359171\n\n\n",
            "flags": 32,
            "hasliked": 0,
            "id": "fsscRH",
            "likes": 17,
            "name": "pixels factory",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "drschizzo",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "#define SIMPLE_BLUR_ \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord)/iResolution.xy;\n    #ifndef SIMPLE_BLUR\n        vec3 col=vec3(0.);\n        float blur=(iResolution.x/300.)*pow(uv.y*1.3,2.);\n        float n=0.;\n        for(float i=-blur;i<=blur;i+=blur/2.)\n            for(float j=-blur;j<=blur;j+=blur/2.){\n                n++;\n                col+=texelFetch(iChannel0,ivec2(fragCoord+vec2(i,j)),0).rgb;\n            }\n\n        col/=n;\n    #else\n        vec3 col=textureLod(iChannel0,uv,pow(uv.y*1.3,2.)*3.).rgb;\n    #endif\n    \n    fragColor=pow(vec4(col,1.),vec4(0.45));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T iTime\n#define pi acos(-1.)\n\n\n \nfloat sdCylinder(vec3 p, float h,float r){\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nstruct Hit{\n    float d;\n    float obj;\n    vec2 id;\n    float cy;\n};\n\nHit map(vec3 p){\n   \n    \n    p.xz*=mat2(cos(pi/2.),sin(pi/2.),-sin(pi/2.),cos(pi/2.));\n//     p.y-=(.5+.5*sin(p.z/5.)*3.);\n     \n\n    float d=p.y;\n    \n    d=max(d,-p.y-1.3);\n\n\n    float cy=1000.;\n    float c1=1000.;\n    \n    float obj=0.;\n    \n    float idz=p.z;\n    p.z=mod(p.z+2.,4.)-2.;\n    vec3 sp=p;\n    idz=idz-p.z;\n     \n    float t=iTime+100.+(pi*2.)*fract(sin(43.23*sin(idz+14.2)));\n    \n    float f=fract(t/2.);\n    float off=t*2.;\n    vec3 rp=p;\n    rp.x+=off;\n\n    rp.x=mod(rp.x+2.,4.)-2.;\n    float idx=floor(p.x-rp.x);\n    \n    float depth=.3;\n    float width=1.5;\n    \n    if(idx<0.){\n        if(idx<-6.){\n           // rp.z+=.1*sin(sp.x*.8+t*5.);\n            c1=min(c1,sdCylinder(rp,width,3.));\n        }\n        else{\n            float nb=5.;\n            for(float i=0.;i<nb;i++){\n                float s=idx>-4.1?smoothstep(i*(1./nb),(i+1.)*(1./nb),f):1.;\n                float de=depth*s;\n                float wi=width*s;\n                c1=min(c1,sdCylinder(rp-vec3(0,-i*depth,0),wi,de));\n                c1=min(c1,sdTorus(rp-vec3(0,-i*depth-.2,0),vec2(wi,.05)));\n                \n            }\n        }\n       d=opSmoothSubtraction(c1,d,.15);\n    }\n    \n    if(idx<-5.5){\n        \n\n\n        float y=idx>-7.?3.*pow(smoothstep(1.5,0.,f*1.5),2.):.32;\n        cy=sdCylinder(vec3(rp.x,p.y+y,rp.z),width,.5);\n        if(cy<d)\n            obj=1.;\n        d=min(d,cy);\n    \n    }\n    float c2=length(sp-vec3(0,1.5*pow(abs(sin((t-0.05)*pi/2.)),.5)+.5,0))-.8;\n    c2*=.8;\n    if(c2<d)\n        obj=2.;\n\n\n    \n    return Hit(opSmoothUnion(d,c2,.6),obj,vec2(p.x-rp.x+off+100.,idz+100.),min(cy,c2*.8));\n}\n\nvec3 normal(vec3 p){\n    vec2 e=vec2(0,.001);\n    float d=map(p).d;\n    return(normalize(d-vec3(map(p-e.yxx).d,\n                          map(p-e.xyx).d,\n                          map(p-e.xxy).d)));\n}\n\n\n\n\nmat3 cam(vec3 ro, vec3 lp) {\n\tvec3 cd = normalize(lp - ro); \n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); \n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvec3 textNorm(vec2 p){\n    float a=texture(iChannel1,p).r;\n    float xL=texture(iChannel1,p+vec2(1.,0)).r;\n    float xR=texture(iChannel1,p+vec2(-1.,0)).r;\n    float yU=texture(iChannel1,p+vec2(0.,1.)).r;\n    float yD=texture(iChannel1,p+vec2(0.,-1.)).r;\n    \n    float xDelta = ((xL-xR)+1.)*0.5;\n     float         yDelta = ((yU-yD)+1.)*0.5;\n    \n    return normalize(vec3(xDelta,\n                          1.,\n                          yDelta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec4 prevcol=texture(iChannel2,fragCoord.xy/iResolution.xy);\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 ro=vec3(24.+iTime*2.,10.,8.);\n    vec3 fog=abs(sin(vec3(.8,.5,.3)+iTime/10.))*.6;//vec3(.6,.6,.8);\n    \n    vec3 rd=normalize(cam(ro,vec3(24.+iTime*2.+(sin(iTime/2.)),0.,-7.))*normalize(vec3(uv,-1.)));\n    float dt=0.;\n    float obj=0.;\n    vec2 ido=vec2(0.);\n    float cy=1000.;\n    for(float i=0.;i<100.;i++){\n        Hit h=map(ro+dt*rd);\n        obj=h.obj;\n        ido=h.id;\n        cy=h.cy;\n        float d=h.d;\n        dt+=d;\n        if(d<.001 || d > 100.)\n            break;\n    }\n            vec3 p=ro+dt*rd;\n\n    vec3 varcol=vec3(0.);\n    if(dt<250.){\n    \n        vec3 n=normal(p);\n        vec3 lpos=vec3(1.,3.5,6.);\n        float diff=clamp(dot(n,normalize(lpos)),0.1,1.);\n        \n        vec3 col=vec3(.3,.3,.3);\n        varcol=abs(sin(vec3(.8,.5,.3)+(ido.x+ido.y)));\n        if(obj==1.){\n            col=varcol;\n            diff=.8+.2*diff;\n            \n            }\n        else if(obj==2.){\n           col=varcol;\n            col+=texture(iChannel0,reflect(rd,n)).rgb*(1.-pow(max(0.,dot(-rd,n)),5.));\n        }\n        else{\n            vec3 ref=texture(iChannel0,reflect(-rd,n)).rgb*(1.-pow(max(0.,dot(-rd,n)),5.));\n\n\n            col=mix(ref+texture(iChannel1,vec2(p.x,p.z+iTime*2.)/10.).r*.3,varcol,pow(smoothstep(.6,0.,cy),2.));\n            \n        }\n        \n\n\n        \n        fragColor = vec4(col*vec3(clamp((diff),-1.,1.)),1.0);\n        \nfragColor=mix(fragColor,vec4(fog,1.),pow(clamp(-p.z/80.,0.,1.),.8));\n\n    }\n      else    \n          fragColor = vec4(vec3(0.),1.0);\n    \n    \n    \n    fragColor.a=cy;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}