{
    "Shader": {
        "info": {
            "date": "1477653661",
            "description": "Kwak, kwak",
            "flags": 0,
            "hasliked": 0,
            "id": "MlcSRn",
            "likes": 15,
            "name": "Dux",
            "published": 3,
            "tags": [
                "waves",
                "raymarch",
                "ducks"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 780
        },
        "renderpass": [
            {
                "code": "// \"Dux\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrEllCylDf (vec3 p, vec2 r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\n\nconst float pi = 3.14159;\n\nvec3 qHit, sunDir;\nvec2 gId, gIdHit;\nfloat dstFar, tCur, dukHt, dukAyz, dukAxy;\nint idObj;\nconst int idBdy = 1, idWng = 2, idHead = 3, idBk = 4;\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  float f;\n  ro.xz += 0.5 * tCur;\n  f = Fbm2 (0.1 * (ro + rd * (50. - ro.y) / rd.y).xz);\n  return mix (vec3 (0.2, 0.3, 0.55) + 0.25 * pow (1. - max (rd.y, 0.), 8.) +\n     0.35 * pow (max (dot (rd, sunDir), 0.), 16.),\n     vec3 (0.85), clamp (0.8 * f * rd.y + 0.1, 0., 1.));\n}\n\nfloat WaveHt (vec2 p)\n{\n  vec2 u;\n  u = 0.1 * (vec2 (p.y * cos (0.2 * pi)) +\n     vec2 (p.x * sin (0.2 * pi)) * vec2 (-1., 1.));\n  u = mod (u + vec2 (-0.1, 0.053) * tCur, 1.) - 0.5;\n  u = exp (-100. * u * u);\n  return 0.5 + (u.x + u.y) / (3. + 0.05 * dot (p, p));\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 50; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.5, h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 8; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p)\n{\n  vec2 e = vec2 (0.01, 0.);\n  float h;\n  h = WaveHt (p.xz);\n  return normalize (vec3 (h - WaveHt (p.xz + e.xy), e.x, h - WaveHt (p.xz + e.yx)));\n}\n\nfloat DukDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 r, cs;\n  float d, h, s;\n  q = p;\n  r = vec2 (0.04, 0.06 + 0.01 * clamp (q.z, -0.4, 0.4));\n  h = 0.1;\n  s = (length (q.xz / r) - 1.) * min (r.x, r.y);\n  d = min (max (s, abs (q.y) - h), length (vec2 (s, q.y)) - h);\n  if (d < dMin) { dMin = d;  idObj = idBdy;  qHit = q;  gIdHit = gId; }\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.1, 0.06, 0.12);\n  cs = vec2 (cos (0.3), sin (0.3));\n  q.yz = Rot2Cs (q.yz, cs);\n  cs.y = - cs.y;\n  q.xy = Rot2Cs (q.xy, cs);\n  q.xz = Rot2Cs (q.xz, cs);\n  q = q.yxz;\n  r = vec2 (0.06, 0.1 + 0.016 * clamp (q.z, -0.4, 0.4));\n  h = 0.014;\n  s = (length (q.xz / r) - 1.) * min (r.x, r.y);\n  d = min (max (s, abs (q.y) - h), length (vec2 (s, q.y)) - h);\n  d = SmoothMin (d, dMin, 0.01);\n  if (d < dMin) { dMin = d;  idObj = idWng;  qHit = q;  gIdHit = gId; }\n  q = p;\n  q.yz -= vec2 (0.15, -0.08);\n  d = PrEllipsDf (q, vec3 (0.08, 0.07, 0.1));\n  d = SmoothMin (d, dMin, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idHead;  qHit = q;  gIdHit = gId; }\n  q = p;\n  q.yz -= vec2 (0.14, -0.19);\n  r = vec2 (0.03, 0.008);\n  h = 0.02;\n  d = max (PrEllCylDf (q, r, h),\n      - PrEllCylDf (q - vec3 (0., 0., h), r - 0.004, 2. * h));\n  if (d < dMin) { dMin = d;  idObj = idBk;  qHit = q;  gIdHit = gId; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float bb = PrBox2Df (p.xz, vec2 (3.6));\n  p.xz -= gId;\n  p.y -= 0.05 + dukHt;\n  p.yz = Rot2D (p.yz, -3. * dukAyz);\n  p.xy = Rot2D (p.xy, 5. * dukAxy);\n  return max (DukDf (p, dstFar), bb);\n}\n\nvoid EvalDukPa ()\n{\n  vec2 e = vec2 (0.1, 0.);\n  dukHt = WaveHt (gId);\n  dukAyz = WaveHt (gId - e.yx) - WaveHt (gId + e.yx);\n  dukAxy = WaveHt (gId - e) - WaveHt (gId + e);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 srd, dda, h, gIdP;\n  float dHit, d;\n  srd = - sign (rd.xz);\n  dda = - srd / (rd.xz + 0.0001);\n  gIdP = vec2 (-10.);\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + dHit * rd;\n    h = fract (dda * fract (srd * p.xz));\n    gId = floor (p.xz + 0.5);\n    if (abs (gId.x) <= 4. && abs (gId.y) <= 4.) {\n      if (gId.x != gIdP.x || gId.y != gIdP.y) {\n        EvalDukPa ();\n        gIdP = gId;\n      }\n      d = ObjDf (p);\n    } else d = dstFar;\n    dHit += min (d, 0.2 + max (0., min (h.x, h.y)));\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.05, 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ObjCol ()\n{\n  vec3 col, cBdy;\n  float s;\n  cBdy = (mod (gIdHit.x, 2.) == mod (gIdHit.y, 2.)) ?\n     vec3 (1., 0., 0.) : vec3 (1., 1., 0.);\n  if (idObj == idBdy) {\n    col = cBdy * (1. - smoothstep (0.02, 0.06, qHit.y) *\n       smoothstep (0., 0.14, qHit.z) * 0.1 * SmoothBump (0.3, 0.5, 0.05,\n       mod (50. * qHit.x, 1.)));\n  } else if (idObj == idWng) {\n    col = cBdy * (1. - step (0.004, qHit.y) *\n       smoothstep (0., 0.04, qHit.z) * 0.2 * SmoothBump (0.3, 0.5, 0.05,\n       mod (100. * qHit.x, 1.)));\n  } else if (idObj == idHead) {\n    s = length (qHit.yz - vec2 (0.02, -0.05));\n    if (s > 0.02) col = cBdy;\n    else col = (abs (s - 0.01) < 0.003) ? vec3 (1., 1., 1.) : vec3 (0.3, 0.3, 1.);\n  } else if (idObj == idBk) col = vec3 (1., 0.5, 0.);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colW, vn;\n  float dstObj, dstWat, sh;\n  bool waterRefl;\n  dstWat = WaveRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  waterRefl = (dstWat < min (dstFar, dstObj));\n  if (waterRefl) {\n    ro += rd * dstWat;\n    vn = WaveNf (ro);\n    vn = VaryNf (10. * ro, vn, 0.2);\n    colW = vec3 (0., 0.2, 0.3) * (0.4 + 0.6 * max (dot (vn, sunDir), 0.));\n    rd = reflect (rd, vn);\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    col = ObjCol ();\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    sh = ObjSShadow (ro, sunDir);\n    col = col * (0.4 + 0.6 * sh * max (dot (vn, sunDir), 0.)) +\n       0.1 * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n  } else col = SkyCol (ro, rd);\n  if (waterRefl) col = mix (colW, col, 0.3);\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  az = -0.03 * pi * tCur;\n  el = -0.15 * pi;\n  el = clamp (el, -0.45 * pi, -0.02 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -9.);\n  rd = vuMat * normalize (vec3 (uv, 4.));\n  dstFar = 20.;\n  sunDir = normalize (vec3 (1., 0.8, -0.8));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrEllCylDf (vec3 p, vec2 r, float h)\n{\n  return max ((length (p.xy / r) - 1.) * min (r.x, r.y), abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}