{
    "Shader": {
        "info": {
            "date": "1688223633",
            "description": "My first attempt at working with KIFS fractals. I don't quite understand how to design them yet, but I thought this result was cool.",
            "flags": 0,
            "hasliked": 0,
            "id": "csjcRd",
            "likes": 5,
            "name": "KIFS Structure",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "sdf",
                "kifs"
            ],
            "usePreview": 0,
            "username": "Dragonpeak",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "const float EPS = .001;\nconst float FAR = 40.;\nconst int ITRS = 16;\nconst float FOCAL_LEN = .9;\nstruct Ray\n{\n    vec3 origin;\n    vec3 dir;\n};\nRay constructViewRay(vec2 screen_pos, vec3 pos, vec3 look_dir, vec3 up, float len)\n{\n    Ray r = Ray(pos, vec3(0));\n    \n    vec3 side = cross(up, look_dir);\n    vec3 cam_up = cross(look_dir,side);\n    \n    r.dir = normalize(side*screen_pos.x+cam_up*screen_pos.y+look_dir*len);\n    \n    return r;\n}\nfloat smin( float a, float b, float k )\n{//https://iquilezles.org/articles/smin/\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat sdBox(vec3 p, vec3 b)\n{\n  //https://iquilezles.org/articles/distfunctions/\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nconst vec3 degr2 = vec3(0.7071,-0.7071,0);\n\nfloat map(vec3 p, out float depth)\n{\n    float im = iMouse.x/iResolution.x*6.28;\n    float dist = FAR;\n    float sc = 1.;\n    int id = 0;\n    \n    for(int i = 0; i < ITRS; i++)\n    {\n        float di = float(i)*.2+sin(iTime-3.)*.1+.05;\n        vec3 plane = normalize(vec3(sin(di), cos(di), cos(di)));\n        \n        p -= plane*min(dot(plane, p),0.)*2.;\n        \n        p -= degr2.yyz*min(dot(degr2.yyz, p),0.)*2.;\n        p -= degr2.xzx*min(dot(degr2.xzx, p),0.)*2.;\n        \n        p -= vec3(0,0,1)*min(dot(vec3(0,0,1), p),0.)*2.;\n        float it = sin(iTime*.1)*.15+.075;\n        p = mat3(vec3(cos(it),0,sin(it)),\n        vec3(0,1,0),\n        vec3(-sin(it),0,cos(it)))*p;\n        \n        float box = sdBox(p, vec3(1,1,4))*sc;\n        depth = (box < dist) ? depth : float(i);\n        dist = smin(dist, box,.2);\n        \n        p.z -=2.2;\n        p.x -=.3;\n        p.y +=.3;\n        \n        p*=1.1;\n        sc/=1.1;\n        \n    }\n    return dist;\n}\nfloat march(Ray r, out float itrDepth)\n{\n    float depth = .01;\n    itrDepth = 0.;\n    while(depth < FAR)\n    {\n        float dist = map(r.origin+r.dir*depth, itrDepth);\n        if(dist < EPS)\n        {\n            break;\n        }\n        depth+=dist;\n    }\n    return depth;\n}\n\nvec3 mapNormal(vec3 pos)\n{\n    float ignore = 0.; \n    vec3 eps = vec3(.001, 0, 0);\n    return normalize(vec3(map(pos+eps,ignore)-map(pos-eps,ignore),\n    map(pos+eps.yxy,ignore)-map(pos-eps.yxy,ignore),\n    map(pos+eps.yyx,ignore)-map(pos-eps.yyx,ignore)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy);\n    vec2 screenPos = (fragCoord.xy/iResolution.x*2.-1.)+vec2(0,iResolution.y/iResolution.x)*.75;\n    vec3 eye = vec3(sin(iTime-5.), cos(iTime-5.), 0.)*25.;\n    Ray viewRay = constructViewRay(screenPos, eye, normalize(-eye), vec3(0,0,1), FOCAL_LEN);\n    float itrDepth = 0.;\n    \n    float dist = march(viewRay, itrDepth);\n    vec3 col = texture(iChannel0, viewRay.dir.xzy).xyz;\n    if(dist<FAR)\n    {\n        vec3 nrm = mapNormal(viewRay.origin+viewRay.dir*dist); \n        col = mix(vec3(0.855,0.463,0.106), vec3(0.008,0.043,0.094), float(itrDepth)/float(ITRS));\n        col *= max(dot(nrm, normalize(vec3(.4,.4,.6))),0.)*vec3(4.)+texture(iChannel0, nrm.xzy).xyz;\n    }\n\n    fragColor = vec4(pow(col*vec3(0.867,0.765,0.675), vec3(1./2.2)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}