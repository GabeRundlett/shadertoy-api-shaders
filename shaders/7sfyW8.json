{
    "Shader": {
        "info": {
            "date": "1642068296",
            "description": "My participation to genuary 2022\n800x80",
            "flags": 0,
            "hasliked": 0,
            "id": "7sfyW8",
            "likes": 8,
            "name": "Genuary 2022 - Day13",
            "published": 3,
            "tags": [
                "genuary",
                "800x80",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nvec3 rdrr(vec2 uv, vec2 ouv)\n{\n    vec3 col;\n    float shp = iResolution.x*.5;\n    \n    \n    float rep = 0.02;\n    vec2 idx = floor((uv+rep*.5)/vec2(rep));\n    \n\n    float minLoad = -23.;\n    float maxLoad = 23.;\n    \n    float load = mix(minLoad, maxLoad, (sin(iTime)*.5+.5));\n    \n    if (idx.x > minLoad && idx.x < load && abs(idx.y) < 2.)\n    {\n        uv = mod(uv+.5*rep, vec2(rep))-rep*.5;\n        float sqr = _sqr(uv, vec2(rep * .1));\n        col = mix(col, vec3(1.), 1.-sat(sqr*shp));\n    }\n    float border = abs(_sqr(ouv, vec2(23.*rep, 2.*rep)))-rep*.1;\n    col = mix(col, vec3(1.), 1.-sat(border*shp));\n    \n    return col;    \n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col;\n    vec2 dir = vec2(0.,1.);\n    float dist = 0.007*sin(uv.x*15.+iTime*2.);\n    \n    col.r = rdrr(uv+dir*dist, uv).r;\n    col.g = rdrr(uv, uv).g;\n    col.b = rdrr(uv-dir*dist, uv).b;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    col = mix(col, 1.-col, sin(uv.x*2.+iTime)*.5+.5);\n    float border = _sqr(uv, vec2(.47,.05));\n    col *= 1.-sat(border*iResolution.x);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}