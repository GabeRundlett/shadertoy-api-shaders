{
    "Shader": {
        "info": {
            "date": "1574513177",
            "description": "I thought was a concept car, but it is not...",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKXzV",
            "likes": 6,
            "name": "Tesla Cybertruck",
            "published": 3,
            "tags": [
                "raymerching"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 553
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    return (val1.w < val2.w)?val1:val2;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec4 GetDist(vec3 p) {\n    \n    vec3 prevP = p;\n    float _floor = p.y;\n\n    float y = 0.25;\n    \n    // body\n    float b = sdBox(p-vec3(0.0,1.0+y,0.0),vec3(1.3,0.7,2.8));\n    float b2 = sdBox(p-vec3(0.0,1.4+y,1.7),vec3(1.1,0.35,1.0));\n    \n    prevP*= matRotateX(radians(15.0));\n    \n    float _cut = prevP.y -1.75-y;\n    prevP = p;\n    \n    prevP*= matRotateX(radians(-8.0));\n    float _cut2 = prevP.y -1.6-y;\n    \n    vec3 hexP = p-vec3(0.0,0.3+y,-0.0);\n    hexP*= matRotateY(radians(90.0));\n    \n    hexP.x = abs(hexP.x);\n    hexP.x -= 1.7;\n    \n    float hex = sdHexPrism(hexP, vec2(0.6,2.0));\n    prevP = p;\n    \n    prevP.x = abs(prevP.x);\n    prevP.x -= 0.3;\n    prevP*= matRotateY(radians(-40.0));\n    \n    float _cut3 = prevP.z +2.5;\n    \n    b = max(-_cut3,max(-b2,max(-hex,max(_cut2,max(_cut,b)))));\n    \n    prevP = p;\n    vec4 resB = vec4(vec3(0.8),b);\n        \n    // ground\n    vec4 f = vec4(vec3(0.3),_floor*0.6);\n    \n    // mud guard\n    vec3 hexP2 = prevP-vec3(0.0,0.31+y,-0.0);\n    hexP2*= matRotateY(radians(90.0));\n    \n    hexP2.x = abs(hexP2.x);\n    hexP2.x -= 1.7;\n    float hex2 = sdHexPrism(hexP2, vec2(0.7,1.45));\n    float hex3 = sdHexPrism(hexP2, vec2(0.6,1.8));\n    prevP = p;\n    float hexCut = prevP.y-0.55;\n    vec4 resMud= vec4(vec3(0.3),max(-hexCut,max(-hex3,hex2)));\n    \n    // tyres\n    vec3 tyreP = prevP-vec3(0.0,0.3+y,-0.0);\n    tyreP*= matRotateX(radians(90.0))*matRotateZ(radians(90.0));\n    tyreP.x = abs(tyreP.x);\n    tyreP.x -= 1.7;\n    tyreP.y = abs(tyreP.y);\n    tyreP.y -= 1.2;\n    float tyre = sdCappedCylinder(tyreP,0.52,0.2);\n    vec4 resTyre = vec4(vec3(0.2),tyre);\n    prevP = p;\n    \n    // side windows\n    prevP.x*=0.99;\n    prevP.z*=1.1;\n    float gy = -0.05+y;\n    float g = sdBox(prevP-vec3(0.0,1.4+gy,0.0),vec3(1.3,0.3,2.8));\n    \n    prevP*= matRotateX(radians(15.0));\n    \n    float _gcut = prevP.y -1.75-gy;\n    prevP = p;\n    \n    prevP*= matRotateX(radians(-8.0));\n    float _gcut2 = prevP.y -1.6-gy;\n    prevP = p;\n    float _gcut3 = prevP.z -0.6;\n    float _gcut4 = prevP.y -1.3-gy;\n    \n    g = max(-_gcut4,max(_gcut3,max(_gcut2,max(_gcut,g))));\n    prevP = p;\n    vec4 resG = vec4(vec3(0.3),g);\n    \n    // front window\n    prevP*= matRotateX(radians(15.0));\n    float fg = sdBox(prevP-vec3(0.0,1.75+y,-0.7),vec3(1.2,0.01,0.7));\n    vec4 resFG = vec4(vec3(0.3),fg);\n    \n    vec4 model = combine(combine( combine(combine(combine(f,resB),resTyre),resG),resFG),resMud);\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n    float h = 0.0;\n    float c = 0.001;\n    float r = 1.0;\n    float shadow = 0.5;\n    for(float t = 0.0; t < 30.0; t++){\n        h = GetDist(ro + rd * c).w;\n        if(h < 0.001){\n            return shadow;\n        }\n        r = min(r, h * 16.0 / c);\n        c += h;\n    }\n    return 1.0 - shadow + r * shadow;\n}\n\nfloat GetAmbientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - RayMarch(p + n*d,n).w);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,8,3);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n\n    float ao = GetAmbientOcclusion(p,n);\n    \n    float lambert = max(.0, dot( n, l))*0.1;\n    \n    float shadow = shadowMap(p + n * 0.001, l);\n    \n    return vec2((lambert+dif*ao),max(0.9, shadow)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.xz *= Rot(radians(iTime*20.0));\n    ro.yz *= Rot(radians(-20.0));\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n    \n        vec2 dif = GetLight(p);\n        col = vec3(dif.x)*d.xyz;\n        col *= dif.y;\n        \n    } else {\n        // background\n        col = vec3(1.0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}