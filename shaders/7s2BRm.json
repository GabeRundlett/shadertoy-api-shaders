{
    "Shader": {
        "info": {
            "date": "1645917169",
            "description": "Simulates the format of the 2D viewport grid in the Valve Hammer level editor.",
            "flags": 0,
            "hasliked": 0,
            "id": "7s2BRm",
            "likes": 0,
            "name": "Fork Hammer 2D  Fatter lines",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "hammereditor"
            ],
            "usePreview": 0,
            "username": "gchipunov",
            "viewed": 158
        },
        "renderpass": [
            {
                "code": "bool onGridline(int distFrom, int spacing);\nbool onSplitline(int distFrom, int spacing, int interval);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Colours , used to return to fragColor depending on criteria.\n\tconst vec4 cBackground = vec4(0.0,0.0,0.0,1.0);\t\t\t// Background colour.\n\tconst vec4 cOrigin = vec4(0.0,0.392,0.392,1.0);\t\t\t// Frag is directly in line with mouse's X or Y.\n\tconst vec4 cLargeSplit = vec4(0.392,0.18,0.004,1.0);\t// Frag is on a large split line.\n\tconst vec4 cMedSplit = vec4(0.449,0.449,0.449,1.0);\t\t// Frag is on a medium split line.\n\tconst vec4 cGridline = vec4(0.593,0.293,0.293,1.0);\t\t// Frag is on a grid line.\n\t\n\t// Grid lines\n\tconst int spacingStd = 16;\t\t\t// Spacing of normal grid lines\n\tconst int intervalLargeSplit = 16;\t// On how many gridlines a large split occurs.\n\tconst int intervalMedSplit = 8;\t\t// On how many gridlines a medium split occurs.\n\tconst float zoom = 1.0;\t\t\t// Zoom level of the grid.\n\t\n\t// Effective spacing\n\t// This is the standard grid spacing, as an integer, once zoom has been applied.\n\t// We do this here and use this value later to avoid float rounding errors.\n\tint effGrid = int(floor((float(spacingStd) * zoom) + 0.5)) ;\n\t\n\t// Convenience integer values for resolution and frag position.\n\tint fragX = int(fragCoord.x - 0.5);\n\tint fragY = int(fragCoord.y - 0.5);\n\tint width = int(iResolution.x);\n\tint height = int(iResolution.y);\n\t\n\t// The offsets to the original mouse position were found by trial and error.\n\tint mouseX = int(iMouse.x);\n\tint mouseY = int(iMouse.y - 1.0);\n\t\n\t// Distance this frag is from the mouse position, in each axis.\n\tint xDistFrom = int(abs(float(mouseX - fragX)));\n\tint yDistFrom = int(abs(float(mouseY - fragY)));\n\t\n\t// ============================================================\n\t\n\t// If on same X or Y as mouse, paint with origin colour.\n\tif ( fragX == mouseX || fragY == mouseY )\n\t{\n\t\tfragColor = cOrigin;\n\t\treturn;\n\t}\n\t\n\t// If on grid line, decide which colour to paint.\n\telse if ( onGridline(xDistFrom, effGrid) || onGridline(yDistFrom, effGrid) \n    ||\n     onGridline(xDistFrom-1, effGrid) || onGridline(yDistFrom-1, effGrid) \n      ||\n     onGridline(xDistFrom+1, effGrid) || onGridline(yDistFrom+1, effGrid) \n    )\n\t{\n\t\t// If on large split line, choose this first.\n\t\tif ( onSplitline(xDistFrom, effGrid, intervalLargeSplit) ||\n\t\t     onSplitline(yDistFrom, effGrid, intervalLargeSplit))\n\t\t{\n\t\t\tfragColor = cLargeSplit;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Then check medium split line.\n\t\telse if ( onSplitline(xDistFrom, effGrid, intervalMedSplit) ||\n\t\t     onSplitline(yDistFrom, effGrid, intervalMedSplit))\n\t\t{\n\t\t\tfragColor = cMedSplit;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Otherwise, return normal grid line colour.\n\t\telse\n\t\t{\n\t\t\tfragColor = cGridline;\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t// Fragment is not in line with any grid line - paint as background.\n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n\n// @brief Returns whether the given fragment distance from the mouse axis lies on a grid line.\n// @param distFrom Units the fragment is away from the mouse axis value. 0 = on the same axis.\n// @param spacing The units between each consecutive grid line.\n// @return True if distFrom lies on a gridline, false otherwise.\nbool onGridline(int distFrom, int spacing)\n{\n\treturn mod(float(distFrom), float(spacing)) == 0.0;\n}\n\n// @brief Returns whether the given fragment distance from the mouse axis lies on a split line.\n// @param distFrom Units the fragment is away from the mouse axis value. 0 = on the same axis.\n// @param spacing The units between each consecutive grid line.\n// @param interval On how many gridlines a split occurs. Eg. 4 would imply a split every 4\n//\t\t  grid spacing amounts.\n// @return True if distFrom lies on the split line, false otherwise.\nbool onSplitline(int distFrom, int spacing, int interval)\n{\n\tint newSpacing = spacing * interval ;\n\t\n\treturn mod(float(distFrom), float(newSpacing)) == 0.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}