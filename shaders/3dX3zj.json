{
    "Shader": {
        "info": {
            "date": "1547005089",
            "description": "\"I can hack you back in time, like a time machine\"\n\nPart of code taken from IQ.",
            "flags": 65,
            "hasliked": 0,
            "id": "3dX3zj",
            "likes": 22,
            "name": "Matrix Lavalamp",
            "published": 3,
            "tags": [
                "80s",
                "wireframe",
                "lavalamp",
                "metaball",
                "hackerman",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 14194
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\n#define AA\n\n\nfloat sdSphere( in vec3 p, in float r )\n{\n    return length(p)-r;\n}\n\nconst float k = 8.;\n\nfloat map(in vec3 pos)\n{\n    // MetaBall\n    float r = 0.5;\n    vec3  d = vec3(0.2,0.7,0.2);\n    float h = -cos(iTime/8.)*5.;\n \tfloat sminAcc = 0.;\n    sminAcc += exp2(-k *sdSphere( pos - d*vec3(sin(iTime/2.0+0.2),sin(iTime/2.1+0.4) + h,sin(iTime/2.3+0.7)), r ));\n    sminAcc += exp2(-k *sdSphere( pos - d*vec3(sin(iTime/2.4+1.3),sin(iTime/1.9+0.5) + h,sin(iTime/2.5+0.2)), r ));\n    sminAcc += exp2(-k *sdSphere( pos - d*vec3(sin(iTime/2.9+2.3),sin(iTime/3.0+0.3) + h,sin(iTime/2.6+0.8)), r ));\n    sminAcc += exp2(-k *sdSphere( pos - d*vec3(sin(iTime/2.2+2.9),sin(iTime/2.8+0.8) + h,sin(iTime/1.8+0.9)), r ));\n\t// Grids\n\tsminAcc += exp2(-k * (2. - abs(pos.y)));\n\n    return -log2( sminAcc )/k;\n}\n\n\nvec3 calcNormal(vec3 pos)\n{\n    vec2\teps\t= vec2(0.0001,0);\n\tfloat\td\t= map(pos);\n\treturn\tnormalize(vec3(map(pos+eps.xyy)-d,map(pos+eps.yxy)-d,map(pos+eps.yyx)-d));\n}\n\nvec3 applyFog(vec3 rgb,float distance, vec3 fogColor)\n{\n    float fogAmount = 1.0 - exp( -distance*0.3 );\n    return mix( rgb, fogColor, fogAmount );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 lavaLamp(vec3 ro,vec3 rd,vec3 cd,float dist)\n{\n    float t = 1.0;\n    float d;\n    for( int i=0; i<64; i++ )\n    {\n        vec3\tp = ro + t*rd;\n        float\th = map(p);\n        t += h;\n        d = dot(t*rd,cd);\n        if( abs(h)<0.001 || d>dist ) break;\n    }\n\n    vec3 col = vec3(0.0);\n\n    if( d<dist )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        pos *= 3.;\n        pos.z += iTime*0.4;\n\n        vec3 proj = abs(fract(pos) - 0.5);\n        proj = smoothstep(0.1, 0., proj);\n        #if 0\n        \tcol = vec3(dot(proj, smoothstep(0.1, 0.9, vec3(1) - abs(nor))));\n        #else\n            col = proj * smoothstep(0.1, 0.9, vec3(1) - abs(nor));\n            col = vec3(max(max(col.x, col.y), col.z));\n        #endif\n        col*= vec3(.5, 1., 0.3);\n        col = applyFog(col, d, vec3(0));\n    }\n    return col;\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    fragColor = vec4(lavaLamp(ro/3. + vec3(0.0,.0,4.0),rd ,rd,14.) ,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 tot = vec3(0.0);\n        \n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n \n        // camera\t\n        vec3 ro = 4.*vec3( sin(0.00*iMouse.x), 0.2 , cos(0.00*iMouse.x) );\n        //vec3 ro = vec3(0.0,.0,4.0);\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        //vec3 cd = ca[2];    \n        \n        vec3 rd =  ca*normalize(vec3(p,1.0));        \n        \n        vec3 col = lavaLamp(ro ,rd ,ca[2],7.);\n\n\t    tot += col;\n#ifdef AA\n    }\n    tot /= 4.;\n#endif\n    \n    //tot = pow(tot, vec3(1. / 2.2));\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 17284,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/sound-of-hazel/ben-daglish-the-last-ninja-the-wilderness-remix-by-hazel"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}