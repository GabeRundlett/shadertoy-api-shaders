{
    "Shader": {
        "info": {
            "date": "1561056527",
            "description": "Based on https://www.shadertoy.com/view/llsSzB\n\nWas just playing around trying to get a smoldering effect but it didn't really work so I changed tac.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSGDK",
            "likes": 6,
            "name": "Laser in red smoke",
            "published": 3,
            "tags": [
                "red",
                "smoke",
                "laser"
            ],
            "usePreview": 0,
            "username": "falldeaf",
            "viewed": 806
        },
        "renderpass": [
            {
                "code": "//noise & fbm from : https://www.shadertoy.com/view/Xds3Rj\n\nfloat hash(float x)\n{\n\treturn fract(21654.6512 * sin(385.51 * x));\n}\n\nfloat hash(vec2 p)\n{\n\treturn fract(21654.65155 * sin(35.51 * p.x + 45.51 * p.y));\n}\n\nfloat lhash(float x, float y)\n{\n\tfloat h = 0.0;\n\t\n\tfor(int i = 0;i < 5;i++)\n\t{\n\t\th += (fract(21654.65155 * float(i) * sin(35.51 * x + 45.51 * float(i) * y * (5.0 / float(i))))* 2.0 - 1.0) / 10.0;\n\t}\n\treturn h / 5.0 + 0.02;\n\treturn (fract(21654.65155 * sin(35.51 * x + 45.51 * y))* 2.0 - 1.0) / 20.0;\n}\n\nfloat noise(vec2 p)\n{\n\tvec2 fl = floor(p);\n\tvec2 fr = fract(p);\n\t\n\tfr.x = smoothstep(0.0,1.0,fr.x);\n\tfr.y = smoothstep(0.0,1.0,fr.y);\n\t\n\tfloat a = mix(hash(fl + vec2(0.0,0.0)), hash(fl + vec2(1.0,0.0)),fr.x);\n\tfloat b = mix(hash(fl + vec2(0.0,1.0)), hash(fl + vec2(1.0,1.0)),fr.x);\n\t\n\treturn mix(a,b,fr.y);\n}\n\n//Fractal Brownian Motion \nfloat fbm(vec2 p)\n{\n\tfloat v = 0.0, f = 1.0, a = 0.5;\n\tfor(int i = 0;i < 5; i++)\n\t{\n\t\tv += noise(p * f) * a;\n\t\tf *= 2.0;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n//Fun start here\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //change the animation speed\n    float time = iTime*1.;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv*2.0 -1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n    vec4 m = iMouse / iResolution.xxxx;\n\n    float p = fbm(vec2(noise(uv+time/2.5),noise(uv*2.+cos(time/2.)/2.)));\n\t//uncomment for more plasma/lighting/plastic effect..\n    //p = (1. - abs(p * 2.0 - 1.0))*.8;\n\n\tvec3 col = pow(vec3(p),vec3(0.3))-0.4;\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.2,pow(1.0 / 2.0,0.5) - uv.y/40.0) );\n    float s = smoothstep(.35,.6,col.x);\n    float s2 = smoothstep(.47,.6,col.x);\n    float s3 = smoothstep(.51,.6,col.x);\n    //multiply by the inverse to get the \"smoky\" effect, first attempt\n    col*=vec3(1.3,.1,0.1)*s; //add red\n    col+=vec3(0.3,0.4,.1)*s2; //add orange\n    col+=vec3(1.,4.,.1)*s3; //add yellow\n    //made it more bright\n    col*=1.5;\n    \n    float burnpoint = m.x * 2.5 - 1.3;// 0.1;\n    float leftside = burnpoint;\n    float normalized = abs(uv.x - burnpoint);\n\n    if(uv.x < (burnpoint-0.1) + sin(uv.y*9.)/16.) col /= (normalized * 1.9)/0.3;\n    if(uv.x > (burnpoint+0.1) + sin(uv.y*9.)/16.) col /= (normalized * 1.9)/0.3;\n    col /= normalized * 1.;\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}