{
    "Shader": {
        "info": {
            "date": "1589297459",
            "description": "was working on something else and made this instead.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdsfWl",
            "likes": 9,
            "name": "circles, push, pull",
            "published": 3,
            "tags": [
                "circles",
                "pushing",
                "pulling"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "\n\n\nmat2 rot(in float rads) {\n    return mat2(sin(rads), cos(rads), -cos(rads), sin(rads));\n}\n\nfloat trapezoid(in float t) {\n    /*\n            t    f(t)\n            0    0\n            1    1\n            2    1\n            3    0\n    */\n\n    if (t < 1.0) {\n        return t;\n    }\n    if (t < 2.0) {\n        return 1.0;\n    }\n    if (t < 3.0) {\n        return 1.0 - (t - 2.0);\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    RGBA.a   = 1.0;\n\n    // float rad = (sin(iTime * 0.1) * 0.5 + 0.5) * 200.0 + 100.0;\n\n    vec2 md = abs(iMouse.xy - iResolution.xy / 2.0) / (iResolution.xy / 2.0);\n    if (length(iMouse.xy) < 50.0) {\n        md = vec2(0.8, 0.8);\n    }\n    float rad = mix(10.0, 80.0, md.x);\n    \n    float cd = length(XY - iResolution.xy / 2.0) / (iResolution.x / 2.0);\n    rad *= mix(1.0, 0.5, cd);\n\n    float lw  = 5.0;\n\n    XY -= iResolution.xy * 0.5;\n    XY *= rot(-iTime * 0.02);\n\n    vec3 cot = vec3(0.7);\n    vec3 cin = vec3(0.8);\n\n    vec2 xy = XY;\n    int it = int(iTime);\n    if (XY.x > -rad / 2.0 && XY.x < rad / 2.0) {\n        cin = vec3(1.0);\n        xy.y += rad * trapezoid(mod(iTime      , 4.0)) - 0.5;\n    }\n    if (XY.y > -rad / 2.0 && XY.y < rad / 2.0) {\n        cin = vec3(1.0);\n        xy.x += rad * trapezoid(mod(iTime + 1.0, 4.0)) - 0.5;\n    }\n\n    /*\n    ivec2 ij = ivec2(xy / rad);\n    if (ij.x == ij.y && ij.x == 0) {\n        cin = vec3(1.0, 0.0, 0.0);\n    }\n    */\n\n\n    // cin *= sin(length(xy) * 0.1) * 0.2 + 0.8;\n\n    // xy.y += sin((XY.x / rad + 0.5) * 3.1415 * 5.0 + iTime) * 2.0;\n    // xy.x += sin((XY.y / rad + 0.5) * 3.1415 * 5.0 + iTime) * 2.0;\n\n    vec2 uv = (mod(xy - rad/2.0, rad) - rad/2.0) * 2.0;\n\n\n    float c = smoothstep(0.0, lw, abs(rad - length(uv) - 2.0 * lw / 2.0));\n    vec3 rgb = vec3(c);\n\n    if (length(uv) > rad - lw) {\n        rgb *= cot;\n    }\n    else if (length(uv) < rad - lw) {\n        rgb *= cin;\n    }\n\n    \n\n    RGBA.rgb = rgb;\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}