{
    "Shader": {
        "info": {
            "date": "1672962524",
            "description": "finally i made it! although it is not very accurate, but recognizable for sure :)",
            "flags": 0,
            "hasliked": 0,
            "id": "dljGzW",
            "likes": 5,
            "name": "aphex twin logo 2",
            "published": 3,
            "tags": [
                "logo"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "vec2 f_o_rotd(vec2 o, float n_ang){\n    return vec2(\n        cos(n_ang)*o.x - sin(n_ang)*o.y, \n        sin(n_ang)*o.x + cos(n_ang)*o.y\n    );\n}\n\nfloat f_sdUnevenCapsule( in vec2 p, in vec2 pa, in vec2 pb, in float ra, in float rb )\n{\n    p  -= pa;\n    pb -= pa;\n    float h = dot(pb,pb);\n    vec2  q = vec2( dot(p,vec2(pb.y,-pb.x)), dot(p,pb) )/h;\n    \n    //-----------\n    \n    q.x = abs(q.x);\n    \n    float b = ra-rb;\n    vec2  c = vec2(sqrt(h-b*b),b);\n    float k = c.x*q.y - c.y*q.x;\n    float m = dot(c,q);\n    float n = dot(q,q);\n    \n         if( k < 0.0 ) return sqrt(h*(n            )) - ra;\n    else if( k > c.x ) return sqrt(h*(n+1.0-2.0*q.y)) - rb;\n                       return m                       - ra;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //needed for anti aliasing ?\n    float n_ratio_iresx_to1 = 1./ iResolution.x;\n    \n    vec2 o_trn_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_trn_mo_nor = iMouse.xy / iResolution.xy;\n    \n    float n_ratio_x_to_y = iResolution.x / iResolution.y; \n    \n    vec2 o_trn_fc_nor_offset = (o_trn_fc_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    vec2 o_trn_mo_nor_offset = (o_trn_mo_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    o_trn_fc_nor_offset *= 1.2;\n    o_trn_fc_nor_offset += vec2(0., -0.2);\n    float n_r, n_dist, n_fuzz, n_smst_1, n_smst_2, n_d; \n\n     n_r = 0.05;\n     n_d = f_sdUnevenCapsule(\n        o_trn_fc_nor_offset, \n        vec2(-0.38, 0.0), \n        vec2(-0.0, 0.0), \n        n_r, \n        n_r\n    );\n     n_fuzz = n_ratio_iresx_to1*10.;\n     n_smst_1 = 0.01; \n     n_smst_2 = 0.01+n_fuzz;\n    \n    n_dist += smoothstep(n_smst_2, n_smst_1, n_d);\n    \n    \n    \n    // \n    \n    \n     n_r = 0.05;\n     n_d = f_sdUnevenCapsule(\n        o_trn_fc_nor_offset+vec2(0., 0.05), \n        vec2(-0.0, 0.0), \n        vec2(0.21, -.38), \n        n_r*1.9, \n        n_r*0.6\n    );\n     n_fuzz = 0.01;\n     n_smst_1 = 0.01; \n     n_smst_2 = 0.01+n_fuzz;\n    \n    n_dist += smoothstep(n_smst_2, n_smst_1, n_d);\n    \n    \n    // \n    \n        \n     n_r = 0.023;\n     n_d = f_sdUnevenCapsule(\n        o_trn_fc_nor_offset+vec2(0., 0.05), \n        vec2(-0.1, 0.0), \n        vec2(-0.3, -.33), \n        n_r*2.1, \n        n_r\n    );\n     n_fuzz = 0.01;\n     n_smst_1 = 0.01; \n     n_smst_2 = 0.01+n_fuzz;\n    \n    n_dist += smoothstep(n_smst_2, n_smst_1, n_d);\n    \n    // \n      \n     n_d = length(vec2(-0.16, -0.22)-o_trn_fc_nor_offset);\n     n_fuzz = 0.01;\n     n_smst_1 = 0.055; \n     n_smst_2 = 0.055+n_fuzz;\n    \n    n_dist +=  smoothstep(n_smst_2, n_smst_1, n_d);\n    \n    \n    // \n    \n     n_d = length(vec2(-0.099, -0.152)-o_trn_fc_nor_offset);\n     n_fuzz = 0.01;\n     n_smst_1 = 0.027; \n     n_smst_2 = 0.027+n_fuzz;\n    \n    \n    n_dist *= 1.- smoothstep(n_smst_2, n_smst_1, n_d);\n   \n            \n     n_r = 0.023;\n     n_d = f_sdUnevenCapsule(\n        o_trn_fc_nor_offset+vec2(0., 0.05), \n        vec2(-0.2, 0.01), \n        vec2(-0.4, -.33), \n        n_r*0.8, \n        n_r*0.8\n    );\n     n_fuzz = 0.01;\n     n_smst_1 = 0.01; \n     n_smst_2 = 0.01+n_fuzz;\n     \n    n_dist *= 1.- smoothstep(n_smst_2, n_smst_1, n_d);\n\n\n     n_r = 0.023;\n     n_d = f_sdUnevenCapsule(\n        o_trn_fc_nor_offset,\n          vec2(-0.2, -0.03),\n        vec2(-0.2*abs(1.-o_trn_fc_nor_offset.x*10.), -0.5), \n        //vec2(-0.5, 0.5), \n        n_r*0.8, \n        n_r*0.8\n    );\n     n_fuzz = 0.01;\n     n_smst_1 = 0.01; \n     n_smst_2 = 0.01+n_fuzz;\n     \n    n_dist *= 1.- smoothstep(n_smst_2, n_smst_1, n_d);\n    \n    \n    //n_dist *= 1.-smoothstep(n_smst_2, n_smst_1, n_d);\n    \n     n_d = length(vec2(-0.1, -0.2)-o_trn_fc_nor_offset);\n\n     float n_thick = 0.03;\n     float n_radius = 0.5;\n\n    n_dist += smoothstep(\n        //0.5,\n        2./iResolution.y,\n        0.,\n        //abs(n_d-0.5)*(1.-n_thick)\n        abs(n_d-n_radius)-n_thick*.5\n    );\n    \n\n    \n    fragColor = vec4(n_dist);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}