{
    "Shader": {
        "info": {
            "date": "1647916285",
            "description": "Visually \"flattens\"/undistorts minibrots by interpolating between their actual formulas and quadratic approximations, turning them into an exact replica of the mandelbrot set while shedding all the filaments they're surrounded with.",
            "flags": 0,
            "hasliked": 0,
            "id": "flscWr",
            "likes": 13,
            "name": "minibrot flattening",
            "published": 3,
            "tags": [
                "mandelbrot",
                "animation",
                "minibrot"
            ],
            "usePreview": 0,
            "username": "peabrainiac",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "// targeted minibrot/bulb; other targets can be found below\n\nconst vec2 a = vec2(-1.0,0.0);          // minibrot position\nconst vec2 scale = vec2(0.5,0.0);       // minibrot scale\nconst int n = 2;                        // minibrot period\nconst float brightnessAdjustment = 1.9; // handpicked value so the animation loops better\n\n//const vec2 a = vec2(-1.754877666,0.0);\n//const vec2 scale = vec2(0.019035516,0.0);\n//const int n = 3;\n//const float brightnessAdjustment = 1.3;\n\n//const vec2 a = vec2(-0.1225611,0.7448617);\n//const vec2 scale = vec2(-0.0095177579,-0.188673925);\n//const int n = 3;\n//const float brightnessAdjustment = 1.3;\n\n//const vec2 a = vec2(-0.504340175,0.562765761);\n//const vec2 scale = vec2(0.0455608555,-0.0627925894);\n//const int n = 5;\n//const float brightnessAdjustment = 1.25;\n\n//const vec2 a = vec2(0.359031062,-0.100934876);\n//const vec2 scale = vec2(-0.0107836821,-0.00590681318);\n//const int n = 8;\n//const float brightnessAdjustment = 0.9;\n\n\nvec2 cmul(vec2 a, vec2 b){\n    return vec2(dot(a,vec2(1.0,-1.0)*b),dot(a,b.yx));\n}\n\nvec2 cdiv(vec2 a, vec2 b){\n    return vec2(dot(a,b),dot(a.yx,vec2(1.0,-1.0)*b))/dot(b,b);\n}\n\nvec2 cpow(vec2 a, float b){\n    float arg = b*atan(a.y,a.x);\n    float r = pow(dot(a,a),0.5*b);\n    return r*vec2(cos(arg),sin(arg));\n}\n\nconst int ITER = 250;\nconst float sampleGridSize = 0.5;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // precomputes coefficients for the linear approximation of (...(((z+a)^2+(c+a))...)^2+(c+a)\n    vec2 adz = vec2(1.0,0.0);\n    vec2 adc = vec2(0.0,0.0);\n    vec2 z = a;\n    for (int i=1;i<n;i++){\n        adz = 2.0*cmul(adz,z);\n        adc = 2.0*cmul(adc,z)+vec2(1.0,0.0);\n        z = cmul(z,z)+a;\n    }\n    \n    vec2 C = cmul(a,cdiv(scale,vec2(1.0,0.0)-scale));\n    \n    float time = mod(0.25*iTime,1.0);\n    float t = (0.5+0.5*cos(time*3.14159265358));\n    \n    fragColor = vec4(vec3(0.0),1.0);\n    \n    for (float offsetX=-0.5+0.5*sampleGridSize;offsetX<0.5;offsetX+=sampleGridSize){\n        for (float offsetY=-0.5+0.5*sampleGridSize;offsetY<0.5;offsetY+=sampleGridSize){\n            vec2 c = -0.35*a+5.0*(fragCoord+vec2(offsetX,offsetY)-iResolution.xy*0.5)/length(iResolution.xy);\n            c = cmul((c-C),cpow(scale,time))+C;\n            z = vec2(0.0,0.0);\n            vec2 dz = vec2(1.0,0.0);\n            int i;\n            for (i=0;i<ITER&&dot(z,z)<100.0;i++){\n                // does one iteration normally\n                dz = i==0?dz:2.0*cmul(z,dz);\n                z = cmul(z,z)+c;\n                // does n-1 iterations, then linearly interpolates that with its linear approximation\n                vec2 z2 = z+a;\n                vec2 dz2 = dz;\n                for (int i2=1;i2<n&&dot(z2,z2)<1e13;i2++){\n                    dz2 = 2.0*cmul(z2,dz2);\n                    z2 = cmul(z2,z2)+c+a;\n                }\n                z = mix(cmul(adz,z)+cmul(adc,c),z2,t);\n                dz = mix(cmul(adz,dz),dz2,t);\n            }\n            float d = (i>=ITER)?1.0:pow(dot(adz,adz),t)*sqrt(dot(z,z)/dot(dz,dz))*0.5*(log(dot(z,z))+(1.0-t)*log(dot(adz,adz)));\n            d *= pow(dot(scale,scale),0.5-brightnessAdjustment*time);\n            fragColor.xyz += vec3(max(0.0,1.0-0.15*length(iResolution.xy)*d))*(sampleGridSize*sampleGridSize);\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}