{
    "Shader": {
        "info": {
            "date": "1535705144",
            "description": "Holy balls... (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "MlGyDR",
            "likes": 6,
            "name": "Fibonacci's Holes",
            "published": 3,
            "tags": [
                "lighting",
                "spiral",
                "fibonacci"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 576
        },
        "renderpass": [
            {
                "code": "// \"Fibonacci's Holes\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // optional antialiasing\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrSphAnDf (vec3 p, float r, float w);\nfloat SmoothMax (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir;\nfloat tCur, dstFar;\nconst float pi = 3.14159, phi = 1.618034;\n\nfloat SphFib (vec3 v, float n)\n{   // based on iq's version of Keinert et al's Spherical Fibonnacci Mapping code\n  vec4 b;\n  vec3 q;\n  vec2 ff, c;\n  float fk, ddMin, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * (1. - v.z * v.z)) / log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = 2. * vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int s = 0; s < 4; s ++) {\n    a = dot (ff, vec2 (s - 2 * (s / 2), s / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    q = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z) - v;\n    ddMin = min (ddMin, dot (q, q));\n  }\n  return sqrt (ddMin);\n}\n\nfloat FibHole (vec3 p)\n{\n  return smoothstep (0.09, 0.1, SphFib (p, 256.));\n}\n\nfloat ObjDf (vec3 p)\n{\n  float d;\n  d = PrSphDf (p, 1.1);\n  if (d < 0.03) {\n    p.yz = Rot2D (p.yz, 0.03 * tCur);\n    d = PrSphAnDf (p, 1., -0.01 + 0.02 * FibHole (normalize (p)));\n    p.xy = Rot2D (p.xy, 0.05 * tCur);\n    d = 0.4 * min (d, PrSphAnDf (p, 1.04, -0.01 + 0.02 * FibHole (normalize (p))));\n    d = min (d, PrSphDf (p, 0.2));\n  }\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.05, h);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, sh, f;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    if (length (ro) > 0.3) {\n      vn = ObjNf (ro);\n      sh = ObjSShadow (ro, ltDir);\n      col = vec3 (0.5, 0.1, 0.);\n      if (dot (vn, ro) > 0.) col = col * (0.1 + 0.1 * max (dot (vn, - normalize (vec3 (ltDir.xz, 0.).xzy)), 0.) +\n         0.8 * sh * max (dot (vn, ltDir), 0.)) +\n         0.2 * smoothstep (0.8, 0.9, sh) * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n      else col *= 0.3 + 0.7 * max (dot (rd, normalize (ro)), 0.);\n    } else {\n      col = vec3 (1., 1., 0.6) * (0.3 + 0.7 * max (- dot (rd, normalize (ro)), 0.));\n    }\n  } else {\n    col = vec3 (0., 0., 0.3 * (0.7 + 0.3 * rd.y));\n    rd.yz = Rot2D (rd.yz, 0.03 * tCur);\n    f = FibHole (rd);\n    rd.xy = Rot2D (rd.xy, 0.05 * tCur);\n    f = SmoothMax (f, FibHole (rd), 0.1);\n    col = mix (vec3 (1., 1., 0.5), col, f);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.02 * tCur;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -8.);\n  dstFar = 20.;\n  zmFac = 6.5 / (3. - 2. * sin (0.2 * tCur));\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrSphAnDf (vec3 p, float r, float w)\n{\n  return abs (length (p) - r) - w;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}