{
    "Shader": {
        "info": {
            "date": "1619546911",
            "description": "I am working on a voxel based fps and thought of exporting a simple test level to prototype surface shaders.\nThis is just a basic flyby of a level I made for testing my simple lightmap code https://youtu.be/Qjur3U.\nThe prototyping can start from here. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "7sBSRz",
            "likes": 3,
            "name": "Simple test level flyby",
            "published": 3,
            "tags": [
                "flyby",
                "cga"
            ],
            "usePreview": 1,
            "username": "mzsolt",
            "viewed": 336
        },
        "renderpass": [
            {
                "code": "// Based on Ray-Box intersection, by iq. https://www.shadertoy.com/view/ld23DV\n\n// https://iquilezles.org/articles/boxfunctions\nvec4 iBox( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\tnor = (txi * vec4(nor,0.0)).xyz;\n\n\treturn vec4( tN, nor );\n}\n\n\n// https://iquilezles.org/articles/boxfunctions\nfloat sBox( in vec3 ro, in vec3 rd, in mat4 txx, in vec3 rad ) \n{\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return -1.0;\n\t\n\treturn tN;\n}\n\n\n//-----------------------------------------------------------------------------------------\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n/*\nmat4 inverse( in mat4 m )\n{\n\treturn mat4(\n        m[0][0], m[1][0], m[2][0], 0.0,\n        m[0][1], m[1][1], m[2][1], 0.0,\n        m[0][2], m[1][2], m[2][2], 0.0,\n        -dot(m[0].xyz,m[3].xyz),\n        -dot(m[1].xyz,m[3].xyz),\n        -dot(m[2].xyz,m[3].xyz),\n        1.0 );\n}*/\n\nstruct BoxData\n{\n\tvec3 pos;\n\tvec3 siz;\n\tint ty;\n};\n\nstruct LightData\n{\n\tvec3 pos;\n\tvec3 col;\n\tfloat r;\n};\n\nstruct CamPosData\n{\n\tvec3 pos;\n\tvec3 tgt;\n};\n\nBoxData bd[99] = BoxData[99](\n    BoxData(vec3(5.000000,1.500000,-49.500000), vec3(8.000000,0.500000,10.500000), 3),\n    BoxData(vec3(12.500000,3.000000,-49.500000), vec3(0.500000,1.000000,10.500000), 3),\n    BoxData(vec3(4.500000,3.000000,-59.500000), vec3(7.500000,1.000000,0.500000), 3),\n    BoxData(vec3(8.500000,3.500000,-55.500000), vec3(1.500000,1.500000,0.500000), 4),\n    BoxData(vec3(8.500000,3.500000,-54.500000), vec3(1.500000,1.500000,0.500000), 4),\n    BoxData(vec3(7.500000,2.500000,-49.500000), vec3(1.500000,0.500000,0.500000), 4),\n    BoxData(vec3(8.500000,6.500000,-55.000000), vec3(0.500000,1.500000,1.000000), 4),\n    BoxData(vec3(9.500000,3.000000,-39.500000), vec3(2.500000,1.000000,0.500000), 3),\n    BoxData(vec3(7.500000,2.500000,-50.500000), vec3(0.500000,0.500000,0.500000), 4),\n    BoxData(vec3(7.500000,2.500000,-48.500000), vec3(0.500000,0.500000,0.500000), 4),\n    BoxData(vec3(7.500000,5.500000,-49.500000), vec3(0.500000,2.500000,0.500000), 4),\n    BoxData(vec3(6.500000,7.500000,-55.000000), vec3(1.500000,0.500000,1.000000), 4),\n    BoxData(vec3(3.500000,6.500000,-49.500000), vec3(3.500000,0.500000,0.500000), 4),\n    BoxData(vec3(1.500000,5.500000,-45.500000), vec3(0.500000,3.500000,0.500000), 4),\n    BoxData(vec3(1.000000,2.500000,-44.500000), vec3(1.000000,0.500000,0.500000), 4),\n    BoxData(vec3(0.500000,2.500000,-45.500000), vec3(0.500000,0.500000,0.500000), 4),\n    BoxData(vec3(7.500000,4.500000,-38.500000), vec3(0.500000,3.500000,0.500000), 3),\n    BoxData(vec3(7.500000,6.000000,-39.500000), vec3(0.500000,2.000000,0.500000), 3),\n    BoxData(vec3(4.500000,1.500000,-38.000000), vec3(2.500000,0.500000,1.000000), 3),\n    BoxData(vec3(6.500000,5.000000,-37.500000), vec3(0.500000,3.000000,0.500000), 3),\n    BoxData(vec3(4.500000,7.500000,-39.000000), vec3(2.500000,0.500000,1.000000), 3),\n    BoxData(vec3(5.500000,4.500000,-36.500000), vec3(0.500000,3.500000,0.500000), 3),\n    BoxData(vec3(3.500000,7.500000,-37.500000), vec3(2.500000,0.500000,0.500000), 3),\n    BoxData(vec3(2.500000,1.500000,-36.000000), vec3(2.500000,0.500000,1.000000), 3),\n    BoxData(vec3(4.500000,5.000000,-35.500000), vec3(0.500000,3.000000,0.500000), 3),\n    BoxData(vec3(2.500000,7.500000,-36.500000), vec3(2.500000,0.500000,0.500000), 3),\n    BoxData(vec3(3.500000,4.500000,-34.500000), vec3(0.500000,3.500000,0.500000), 3),\n    BoxData(vec3(1.500000,7.500000,-35.500000), vec3(2.500000,0.500000,0.500000), 3),\n    BoxData(vec3(0.500000,1.500000,-34.000000), vec3(2.500000,0.500000,1.000000), 3),\n    BoxData(vec3(-0.000000,3.000000,-39.500000), vec3(3.000000,1.000000,0.500000), 3),\n    BoxData(vec3(2.500000,4.500000,-38.500000), vec3(0.500000,2.500000,0.500000), 3),\n    BoxData(vec3(2.500000,5.000000,-33.500000), vec3(0.500000,3.000000,0.500000), 3),\n    BoxData(vec3(2.500000,5.500000,-39.500000), vec3(0.500000,1.500000,0.500000), 3),\n    BoxData(vec3(0.500000,7.500000,-34.500000), vec3(2.500000,0.500000,0.500000), 3),\n    BoxData(vec3(1.500000,4.000000,-37.500000), vec3(0.500000,3.000000,0.500000), 3),\n    BoxData(vec3(1.500000,4.500000,-32.500000), vec3(0.500000,3.500000,0.500000), 3),\n    BoxData(vec3(-0.500000,7.500000,-33.500000), vec3(2.500000,0.500000,0.500000), 3),\n    BoxData(vec3(-1.500000,1.500000,-28.000000), vec3(2.500000,0.500000,5.000000), 3),\n    BoxData(vec3(0.500000,4.500000,-36.500000), vec3(0.500000,2.500000,0.500000), 3),\n    BoxData(vec3(-1.500000,7.500000,-28.000000), vec3(2.500000,0.500000,5.000000), 3),\n    BoxData(vec3(0.500000,4.500000,-27.500000), vec3(0.500000,2.500000,4.500000), 3),\n    BoxData(vec3(0.500000,4.500000,-22.500000), vec3(0.500000,3.500000,0.500000), 1),\n    BoxData(vec3(-2.000000,2.500000,-21.500000), vec3(3.000000,0.500000,0.500000), 1),\n    BoxData(vec3(0.500000,5.500000,-21.000000), vec3(0.500000,2.500000,1.000000), 1),\n    BoxData(vec3(-2.000000,4.500000,-19.500000), vec3(3.000000,0.500000,0.500000), 1),\n    BoxData(vec3(0.500000,6.500000,-16.500000), vec3(0.500000,1.500000,3.500000), 1),\n    BoxData(vec3(-0.000000,0.500000,-1.500000), vec3(8.000000,0.500000,9.500000), 3),\n    BoxData(vec3(7.500000,2.500000,-1.500000), vec3(0.500000,1.500000,9.500000), 1),\n    BoxData(vec3(-0.500000,1.500000,-10.500000), vec3(7.500000,0.500000,0.500000), 1),\n    BoxData(vec3(-0.500000,2.500000,-10.500000), vec3(7.500000,0.500000,0.500000), 1),\n    BoxData(vec3(5.500000,3.500000,-10.500000), vec3(1.500000,0.500000,0.500000), 1),\n    BoxData(vec3(4.500000,6.000000,-7.500000), vec3(0.500000,5.000000,2.500000), 1),\n    BoxData(vec3(4.500000,7.500000,-10.500000), vec3(0.500000,3.500000,0.500000), 1),\n    BoxData(vec3(-0.500000,5.500000,-8.000000), vec3(4.500000,0.500000,3.000000), 1),\n    BoxData(vec3(1.500000,7.000000,-10.500000), vec3(2.500000,1.000000,0.500000), 1),\n    BoxData(vec3(0.500000,8.500000,-8.500000), vec3(0.500000,2.500000,1.500000), 1),\n    BoxData(vec3(3.500000,2.500000,-7.500000), vec3(0.500000,0.500000,0.500000), 2),\n    BoxData(vec3(3.500000,7.500000,-7.500000), vec3(0.500000,0.500000,0.500000), 2),\n    BoxData(vec3(-0.000000,3.000000,-0.500000), vec3(1.000000,1.000000,0.500000), 1),\n    BoxData(vec3(-0.000000,4.000000,-1.500000), vec3(1.000000,1.000000,0.500000), 1),\n    BoxData(vec3(-0.000000,5.000000,-2.500000), vec3(1.000000,1.000000,0.500000), 1),\n    BoxData(vec3(-0.000000,5.500000,-4.000000), vec3(1.000000,0.500000,1.000000), 1),\n    BoxData(vec3(3.500000,8.500000,-45.500000), vec3(0.500000,0.500000,1.500000), 4),\n    BoxData(vec3(2.500000,8.500000,-45.500000), vec3(0.500000,0.500000,0.500000), 4),\n    BoxData(vec3(2.500000,10.500000,-8.000000), vec3(1.500000,0.500000,3.000000), 1),\n    BoxData(vec3(0.500000,9.500000,-10.500000), vec3(0.500000,1.500000,0.500000), 1),\n    BoxData(vec3(-2.000000,10.500000,-6.000000), vec3(3.000000,0.500000,1.000000), 1),\n    BoxData(vec3(-0.500000,2.500000,7.500000), vec3(7.500000,1.500000,0.500000), 1),\n    BoxData(vec3(-0.000000,2.000000,0.500000), vec3(1.000000,1.000000,0.500000), 1),\n    BoxData(vec3(-0.000000,1.500000,1.500000), vec3(1.000000,0.500000,0.500000), 1),\n    BoxData(vec3(-2.500000,3.000000,-49.500000), vec3(0.500000,1.000000,9.500000), 3),\n    BoxData(vec3(-0.500000,4.000000,-35.500000), vec3(0.500000,3.000000,0.500000), 3),\n    BoxData(vec3(-1.500000,4.500000,-34.500000), vec3(0.500000,2.500000,0.500000), 3),\n    BoxData(vec3(-2.500000,4.000000,-33.500000), vec3(0.500000,3.000000,0.500000), 3),\n    BoxData(vec3(-3.500000,4.500000,-32.500000), vec3(0.500000,2.500000,0.500000), 3),\n    BoxData(vec3(-4.500000,4.500000,-27.500000), vec3(0.500000,3.500000,4.500000), 3),\n    BoxData(vec3(-2.500000,1.500000,-22.500000), vec3(2.500000,0.500000,0.500000), 1),\n    BoxData(vec3(-2.000000,3.500000,-20.500000), vec3(2.000000,0.500000,0.500000), 1),\n    BoxData(vec3(-2.500000,5.500000,-16.000000), vec3(2.500000,0.500000,3.000000), 1),\n    BoxData(vec3(-4.500000,5.000000,-22.500000), vec3(0.500000,3.000000,0.500000), 1),\n    BoxData(vec3(-4.500000,5.500000,-21.500000), vec3(0.500000,2.500000,0.500000), 1),\n    BoxData(vec3(-4.500000,6.000000,-20.500000), vec3(0.500000,2.000000,0.500000), 1),\n    BoxData(vec3(-4.500000,6.500000,-19.500000), vec3(0.500000,1.500000,0.500000), 1),\n    BoxData(vec3(-4.500000,7.000000,-16.000000), vec3(0.500000,1.000000,3.000000), 1),\n    BoxData(vec3(-0.500000,3.000000,-7.500000), vec3(0.500000,2.000000,2.500000), 1),\n    BoxData(vec3(-0.500000,4.000000,-10.500000), vec3(0.500000,1.000000,0.500000), 1),\n    BoxData(vec3(-2.000000,5.500000,-12.000000), vec3(2.000000,0.500000,1.000000), 1),\n    BoxData(vec3(-0.500000,7.000000,-12.000000), vec3(0.500000,1.000000,1.000000), 1),\n    BoxData(vec3(-3.500000,7.000000,-11.500000), vec3(0.500000,1.000000,1.500000), 1),\n    BoxData(vec3(-4.500000,3.000000,-7.500000), vec3(0.500000,2.000000,2.500000), 1),\n    BoxData(vec3(-6.000000,3.500000,-10.500000), vec3(2.000000,0.500000,0.500000), 1),\n    BoxData(vec3(-4.500000,4.500000,-10.500000), vec3(0.500000,0.500000,0.500000), 1),\n    BoxData(vec3(-4.500000,8.500000,-9.000000), vec3(0.500000,2.500000,2.000000), 1),\n    BoxData(vec3(-7.500000,2.500000,-1.500000), vec3(0.500000,1.500000,8.500000), 1),\n    BoxData(vec3(-3.500000,2.500000,-6.500000), vec3(0.500000,0.500000,0.500000), 2),\n    BoxData(vec3(-3.500000,7.500000,-6.500000), vec3(0.500000,0.500000,0.500000), 2),\n    BoxData(vec3(-4.500000,8.000000,-6.000000), vec3(0.500000,2.000000,1.000000), 1),\n    BoxData(vec3(-2.000000,10.500000,-9.000000), vec3(2.000000,0.500000,2.000000), 1),\n    BoxData(vec3(-7.500000,3.500000,8.500000), vec3(0.500000,0.500000,0.500000), 1)\n);\n\nLightData ld[9] = LightData[9](\n    LightData(vec3(2.500000,3.500000,-7.000000), vec3(1.000000,0.000000,1.000000), 5.000000),\n    LightData(vec3(-3.000000,3.500000,-7.000000), vec3(0.000000,1.000000,1.000000), 5.000000),\n    LightData(vec3(2.500000,8.500000,-7.000000), vec3(0.000000,0.400000,0.900000), 5.000000),\n    LightData(vec3(-3.000000,8.500000,-7.000000), vec3(0.900000,1.000000,0.100000), 5.000000),\n    LightData(vec3(-0.500000,6.000000,-25.000000), vec3(1.000000,1.000000,1.000000), 3.000000),\n    LightData(vec3(-0.500000,6.000000,-31.000000), vec3(1.000000,1.000000,1.000000), 3.000000),\n    LightData(vec3(-3.500000,6.000000,-25.000000), vec3(1.000000,1.000000,1.000000), 3.000000),\n    LightData(vec3(-3.500000,6.000000,-31.000000), vec3(1.000000,1.000000,1.000000), 3.000000),\n    LightData(vec3(-0.500000,6.000000,-34.000000), vec3(1.000000,1.000000,1.000000), 3.000000)\n);\n\nCamPosData cp[] = CamPosData[](\nCamPosData(vec3(-2.000000,1.900000,2.000000), vec3(-2.000000,1.900000,3.000000)),\nCamPosData(vec3(-2.000000,1.900000,2.000000), vec3(-2.009425,1.900000,2.999956)),\nCamPosData(vec3(-1.460000,1.932757,1.234773), vec3(-2.000350,1.986138,2.074519)),\nCamPosData(vec3(-2.892282,2.155061,4.702333), vec3(-3.393976,2.376269,3.866050)),\nCamPosData(vec3(-3.757271,2.518680,3.818990), vec3(-3.446917,2.773451,2.903145)),\nCamPosData(vec3(-2.996557,3.195341,-1.011240), vec3(-2.952601,3.170211,-2.009957)),\nCamPosData(vec3(-2.534242,3.074446,-5.956488), vec3(-2.518534,3.087013,-6.956285)),\nCamPosData(vec3(-2.454909,3.017715,-5.711578), vec3(-2.486197,3.105567,-6.707220)),\nCamPosData(vec3(-4.347242,1.910000,-1.520798), vec3(-3.867121,2.109710,-2.374964)),\nCamPosData(vec3(-2.655343,1.961232,-2.189268), vec3(-1.968674,1.983221,-2.915906)),\nCamPosData(vec3(0.351536,2.797791,-4.540000), vec3(0.495105,3.194939,-5.446455)),\nCamPosData(vec3(0.906096,3.366702,-8.691833), vec3(0.852952,3.272594,-9.685975)),\nCamPosData(vec3(2.417580,3.685781,-9.540000), vec3(2.268314,3.798638,-10.522335)),\nCamPosData(vec3(2.380995,3.726415,-8.059148), vec3(2.349808,3.845512,-9.051540)),\nCamPosData(vec3(1.174739,3.197919,-3.613107), vec3(1.143552,3.317016,-4.605499)),\nCamPosData(vec3(2.711044,2.775738,-1.441660), vec3(2.561009,2.825983,-2.429063)),\nCamPosData(vec3(1.808191,2.400199,2.925321), vec3(1.695948,2.651931,1.964055)),\nCamPosData(vec3(0.940645,2.854847,3.696516), vec3(0.828305,3.550760,2.987231)),\nCamPosData(vec3(0.217461,5.933011,-0.152619), vec3(0.004019,6.387001,-1.017682)),\nCamPosData(vec3(-0.834712,7.419567,-3.998655), vec3(-1.056111,7.579103,-4.960700)),\nCamPosData(vec3(-1.599242,7.553537,-7.580861), vec3(-1.792745,7.575527,-8.561714)),\nCamPosData(vec3(-2.184726,7.374053,-12.525115), vec3(-2.203441,7.254956,-13.517821)),\nCamPosData(vec3(-2.278282,6.910000,-17.487429), vec3(-2.296996,6.790903,-18.480135)),\nCamPosData(vec3(-2.327761,6.111896,-22.359962), vec3(-2.321779,5.805868,-23.311966)),\nCamPosData(vec3(-2.186686,5.035440,-27.222065), vec3(-2.136899,4.900762,-28.211702)),\nCamPosData(vec3(-0.993219,4.904999,-31.978512), vec3(-0.454830,5.005361,-32.815208)),\nCamPosData(vec3(2.171228,4.369769,-35.719467), vec3(2.794889,4.090777,-36.449680)),\nCamPosData(vec3(4.561439,3.589409,-39.984077), vec3(4.797843,3.617679,-40.955322)),\nCamPosData(vec3(4.739790,4.330019,-44.879646), vec3(4.578045,4.548162,-45.842068)),\nCamPosData(vec3(3.364606,4.765773,-49.650120), vec3(3.070709,4.797184,-50.605442)),\nCamPosData(vec3(-0.119510,4.995971,-52.331497), vec3(0.396747,5.444354,-53.061176)),\nCamPosData(vec3(-1.124801,4.916638,-55.486805), vec3(-0.414231,5.038854,-54.793873)),\nCamPosData(vec3(-2.172987,4.906855,-60.018024), vec3(-1.580975,4.960237,-59.213867)),\nCamPosData(vec3(-0.034418,4.800329,-63.079533), vec3(0.182555,4.903816,-62.108856)),\nCamPosData(vec3(3.056928,4.681053,-65.734558), vec3(3.150946,4.725021,-64.739960)),\nCamPosData(vec3(6.506225,4.625015,-66.172165), vec3(6.301536,4.731626,-65.199158)),\nCamPosData(vec3(9.294312,4.989921,-62.307842), vec3(9.105581,5.124599,-61.335091)),\nCamPosData(vec3(11.424669,5.425716,-57.879238), vec3(10.933987,5.516696,-57.012661)),\nCamPosData(vec3(12.199143,5.558903,-53.073444), vec3(11.559353,5.571469,-52.304996)),\nCamPosData(vec3(13.897681,5.578884,-49.589725), vec3(13.257891,5.591450,-48.821278)),\nCamPosData(vec3(14.351370,5.623287,-44.611916), vec3(13.701974,5.635853,-43.851570)),\nCamPosData(vec3(13.949431,5.721174,-39.631672), vec3(13.187083,5.736881,-38.984695)),\nCamPosData(vec3(13.510080,5.776707,-34.652901), vec3(12.741669,5.792414,-34.013138)),\nCamPosData(vec3(13.055349,5.832239,-29.675463), vec3(12.286938,5.847946,-29.035700)),\nCamPosData(vec3(12.600618,5.887772,-24.698084), vec3(11.832207,5.903479,-24.058321)),\nCamPosData(vec3(12.143284,5.943304,-19.720942), vec3(11.370868,5.959011,-19.086020)),\nCamPosData(vec3(10.600552,5.947750,-14.993365), vec3(9.682802,5.944608,-14.596219)),\nCamPosData(vec3(10.544567,5.942755,-11.117718), vec3(9.626818,5.939613,-10.720572)),\nCamPosData(vec3(8.563757,5.958488,-6.788820), vec3(7.572689,5.980478,-6.657287)),\nCamPosData(vec3(8.392307,5.958488,-3.293463), vec3(7.468257,5.911382,-3.672820)),\nCamPosData(vec3(7.676145,6.361337,1.006368), vec3(7.086134,6.137066,0.230746)),\nCamPosData(vec3(6.713125,7.291714,5.701828), vec3(6.391634,6.952976,4.817576)),\nCamPosData(vec3(3.644322,7.491270,7.165835), vec3(3.421862,7.285408,6.212875)),\nCamPosData(vec3(0.176282,7.491270,7.617840), vec3(0.116696,7.538376,6.620729)),\nCamPosData(vec3(-2.730626,7.599838,5.662962), vec3(-2.649177,7.659493,4.668072)),\nCamPosData(vec3(-2.257902,7.898043,0.695593), vec3(-2.160836,7.957697,-0.297896)),\nCamPosData(vec3(-1.983430,8.179771,-4.370270), vec3(-1.942655,8.233153,-5.368011)),\nCamPosData(vec3(-1.915488,8.268711,-6.032763), vec3(-1.874713,8.322093,-7.030504))\n);\n\nvec3 dirLdir = vec3(-0.2, -1.0, 0.8);\nvec3 dirLcol = vec3(0.9, 0.7, 0.5);\n\nvoid boxParams(in int i, out mat4 txx, out mat4 txi, out vec3 boxSize)\n{\n\tvec3 trapos = bd[i].pos;\n\tmat4 tra = translate( trapos.x, trapos.y, trapos.z );\n\ttxi = tra; \n\ttxx = inverse( txi );\n\tboxSize = bd[i].siz;\n}\n\nint iScene(in vec3 ro, in vec3 rd, out float tmin, out vec3 nor)\n{\n\tint oid = -1;\n\ttmin = 10000.0;\n\n\tfor (int i = 0; i < bd.length(); i++)\n\t{\n\t\tmat4 ttxi; \n\t\tmat4 ttxx;\n\t\tvec3 siz;\n\t\tboxParams(i, ttxx, ttxi, siz);\n\n\t\tvec4 res = iBox( ro, rd, ttxx, ttxi, siz);\n\n\t\tif( res.x>0.0 && res.x<tmin )\n\t\t{\n\t\t\ttmin = res.x; \n\t\t\tnor = res.yzw;\n\t\t\toid = i;\n\t\t}\n\t}\n\n\treturn oid;\n}\n\nbool isLightVisible(in vec3 ro, in int id)\n{\n\tfloat dist = length(ld[id].pos - ro);\n\tvec3 rd = normalize(ld[id].pos - ro);\n\tfloat tmin;\n\tvec3 nor;\n\tint oid = iScene(ro, rd, tmin, nor);\n\tif (oid == -1 || tmin > dist)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nfloat attenuation(in vec3 p, in vec3 l, in float radius)\n{\n\tfloat temp1 = 1.0 / (radius * radius);\n\tfloat temp2 = 2.0 / radius;\n\tvec3 ldir = l - p;\n    float r2 = dot(ldir, ldir);\n    float r = sqrt(r2);        \n    float ret = 0.0;\n\tif (r < radius)\n\t{\n\t\tret = clamp( r2 * temp1 * (r * temp2 - 3.0) + 1.0, 0.0, 1.0 );\n\t}\n\treturn ret;\n}\n\nvec3 light(in vec3 pos, in vec3 nor)\n{\n\tvec3 ro = pos + 0.001 * nor;\n\tvec3 ret = vec3(0.0);\n\n\tfor (int i = 0; i < ld.length(); i++)\n\t{\n\t\tif (isLightVisible(ro, i))\n\t\t{\n\t\t\tfloat att = attenuation(pos, ld[i].pos, ld[i].r);\n\t\t\tret = ret + ld[i].col * att;\n\t\t}\n\t}\n\n\treturn ret;\n}\n\nvec3 mainPixel(in vec3 ro, in vec3 rd)\n{\n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tvec3  pos = vec3(0.0);\n\t\n\t// raytrace box\n\tvec3 boxSize = vec3(0.5,0.5,0.5);\n\tmat4 txx = mat4(1.0);\n\tmat4 txi = mat4(1.0);\n\n\tint oid = iScene(ro, rd, tmin, nor);\n\tif (oid != -1)\n\t{\n\t\tboxParams(oid, txx, txi, boxSize);\n\t}\n\n    // shading/lighting\t\n\tvec3 col = vec3(0.6,0.75,0.85) - 0.97*rd.y;\n    \n\tif( oid != -1 )\n\t{\n\t\tpos = ro + tmin*rd;\n\t\t\n        // material\n\t\tvec3  mate = vec3(1.0);\n\t\t// recover box space data (we want to do shading in object space)\t\t\t\n\t\tvec3 opos = (txx*vec4(pos,1.0)).xyz;\n\t\tvec3 onor = (txx*vec4(nor,0.0)).xyz;\n\t\tmate = abs(onor.x)*texture( iChannel0, 0.5*opos.yz ).xyz + \n\t\t\t\tabs(onor.y)*texture( iChannel0, 0.5*opos.zx ).xyz + \n\t\t\t\tabs(onor.z)*texture( iChannel0, 0.5*opos.xy ).xyz;\n\t\t\n        // directional lighting\n\t\tvec3  lig = normalize(dirLdir);\n\n\t\tvec3 dircol = vec3(0.0);\n\n\t\tfloat shaddist;\n\t\tvec3 shadnor;\n\t\tint shadid = iScene(pos+0.001*nor, -lig, shaddist, shadnor);\n\t\tif (shadid == -1)\n\t\t{\n\t\t\tfloat att = dot(nor, -lig);\n\t\t\tatt = clamp(att, 0.0, 1.0);\n\t\t\tdircol = att * dirLcol;\n\t\t}\n\n\t\tvec3 lightcol = light(pos, nor);\n\n\t\tcol = (lightcol + dircol) * mate;\n\t}\n\n\treturn col;\n}\n\n// CGA conversion from https://www.shadertoy.com/view/3tfSDX\n#define RGB(r,g,b) (vec3(r,g,b) / 255.0)\nvec3 CGAPal[4] = vec3[](RGB(0, 0, 0), \n                        RGB(255, 85, 255), \n                        RGB(85,255, 255), \n                        RGB(255, 255, 255));\n#define PAL_SIZE 4.0\n\nvec3 dither8x8(vec2 position, float brightness) {  \n  float idx = clamp(brightness,0.0,1.0)* (PAL_SIZE - 1.0);\n    \n  vec3 c1 = CGAPal[int(idx)];\n  vec3 c2 = CGAPal[int(idx) + 1];\n    \n  float limit = texture(iChannel1, position / iChannelResolution[1].xy).r;\n  float mixAmt = float(fract(idx) > limit);\n\n  return mix(c1,c2,mixAmt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\n\tint idx = int(iTime) % (cp.length() - 1);\n    bool iscga = int(iTime) % ( 2 * (cp.length() - 1) ) >= (cp.length() - 1);\n\n\tfloat step = iTime - floor(iTime);\n\tvec3 roNow = cp[idx].pos;\n\tvec3 tgtNow = cp[idx].tgt;\n\tvec3 roNext = cp[idx+1].pos;\n\tvec3 tgtNext = cp[idx+1].tgt;\n\t\n    // camera origin\n\tvec3 ro = mix(roNow, roNext, step);\n\t// camera target\n\tvec3 ta = mix(tgtNow, tgtNext, step);\n\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\tvec3 col = mainPixel(ro, rd);\n    if (iscga)\n    {\n        float gray = 0.299 * col.x + 0.587 * col.y + 0.114 * col.z;\n        col = dither8x8(fragCoord, gray);\n    }\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}