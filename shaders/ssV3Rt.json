{
    "Shader": {
        "info": {
            "date": "1631988418",
            "description": "A practice shader for polar coordinates.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssV3Rt",
            "likes": 5,
            "name": "Polar Coordinates practice",
            "published": 3,
            "tags": [
                "2d",
                "polarcoordinates",
                "practice"
            ],
            "usePreview": 0,
            "username": "mosan_hoshi",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "// written by mossan-hoshi( https://twitter.com/mossan_hoshi )\n\n#define UPDATE_FREQUENCY 8.\n#define PI 3.1415\n#define RANDOM_SEED 69340.3763\n\nfloat rand_with_time(float co,float freq) { \n  return sin(co*(freq*iTime-fract(freq*iTime))/freq * RANDOM_SEED);\n}\n\nfloat timer(float phase,float freq, float max_val){\n  float normalized_phase = mod(phase / freq, 2. * PI);\n  return mod((normalized_phase - fract(normalized_phase)) * freq, max_val);\n}\n\nfloat calc_value(vec2 uv){\n  float timer = timer(iTime, UPDATE_FREQUENCY, 5.);\n  // circular zone plate\n  float r2 = dot(uv, uv);\n  float radious_offset = 1.5 * iTime -fract(1.5 * iTime);\n  radious_offset = mod(1.3 * mod(radious_offset, 4.),.35);\n  float theta_resolution = 1. + 5. * abs(cos(timer));\n  theta_resolution = 2.0 * (theta_resolution - fract(theta_resolution));\n  float theta = fract(atan(uv.y,uv.x));\n  theta = (theta*theta_resolution - fract(theta*theta_resolution))/theta_resolution;\n  float dist = .1*(rand_with_time(theta,UPDATE_FREQUENCY))+ radious_offset;\n  float value = 1.0 - step(0.01,abs(dist*dist - r2));\n  return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  // normalize position(x,y:.0~1.0)\n  vec2 uv= ((fragCoord.xy - .5 * iResolution.xy)/ min(iResolution.x,iResolution.y));\n\n  float default_val = calc_value(uv);\n  float shifted_val = calc_value(uv+vec2(0.0015*(1.+abs(rand_with_time(0.001,10.))),\n                                    0.0015*(1.+abs(rand_with_time(0.001,10.)))));\n  fragColor=vec4(shifted_val,\n                 default_val,\n                 default_val,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}