{
    "Shader": {
        "info": {
            "date": "1580647986",
            "description": "Image dithering based on ordered dithering algorithm\nThere are only 8 different colors taken from a given palette",
            "flags": 0,
            "hasliked": 0,
            "id": "WttSzM",
            "likes": 3,
            "name": "Dithering RGB",
            "published": 3,
            "tags": [
                "palette",
                "dithering",
                "bayer"
            ],
            "usePreview": 0,
            "username": "Ref",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "#define PALETTE vec3[](vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 1.0), vec3(1.0, 1.0, 0.0))\n#define COUNT 8\n#define FACTOR 1.0\n\nconst int[] dithMatrix = int[]\n(\n\t0,  48, 12, 60, 3,  51, 15, 63,\n    32, 16, 44, 28, 35, 19, 47, 31,\n    8,  56, 4,  52, 11, 59, 7,  55,\n    40, 24, 36, 20, 43, 27, 39, 23,\n    2,  50, 14, 62, 1,  49, 13, 61,\n    34, 18, 46, 30, 33, 17, 45, 29,\n    10, 58, 6,  54, 9,  57, 5,  53,\n    42, 26, 38, 22, 41, 25, 37, 21\n);\n\nvec3 average()\n{\n    vec3 sum = vec3(0);\n    \n    for(int i = 0; i < COUNT; i++)\n\t{\n        sum += PALETTE[i];\n    }\n    \n    return sum / float(COUNT);\n}\n\nvec3 deviation()\n{\n    vec3 sum = vec3(0);\n    vec3 avg = average();\n    \n    for(int i = 0; i < COUNT; i++)\n\t{\n        sum += abs(PALETTE[i] - avg);\n    }\n    \n    return sum / float(COUNT);\n}\n\nfloat squaredDistance(vec3 point1, vec3 point2)\n{\n\tvec3 distanceVector = point2 - point1;\n\treturn dot(distanceVector, distanceVector);\n}\n\nvoid quantize(inout vec3 color)\n{\n\tvec3 closest = vec3(0.0, 0.0, 0.0);\n\tfloat minDist = 9999.9;\n\n\tfor(int i = 0; i < COUNT; i++)\n\t{\n\t\tvec3 plt = PALETTE[i];\n\t\tfloat dist = squaredDistance(color, plt);\n\t\tif(dist < minDist) \n\t\t{\n\t\t\tminDist = dist;\n\t\t\tclosest = plt;\n\t\t}\n\t}\n\n\tcolor = closest;\n}\n\nvoid ditherize(inout vec3 color, vec2 position)\n{\n\tint index = int(mod(position.x, 8.0)) + int(mod(position.y, 8.0)) * 8;\n\tfloat offset = (float(dithMatrix[index]) + 1.0) / 64.0 - 0.5;\n\tcolor += offset * FACTOR * deviation(); \n\tquantize(color);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    ditherize(col, fragCoord);\n    \n    col = pow(col, vec3(1.0 / 2.2));\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}