{
    "Shader": {
        "info": {
            "date": "1665229373",
            "description": "eye",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGfWV",
            "likes": 17,
            "name": "Psycheye",
            "published": 3,
            "tags": [
                "eye"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define PI 3.141593\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(175.1,311.7)),\n             dot(p,vec2(260.5,752.3)));\n    return fract(sin(p+455.)*18.5453);\n}\n\nvec2 hash2( vec2 p ) \n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    float n = 111.0*p.x + 113.0*p.y;\n    return fract(n*fract(k*n));\n}\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = hash2(i).x;\n    float b = hash2(i + vec2(1.0, 0.0)).x;\n    float c = hash2(i + vec2(0.0, 1.0)).x;\n    float d = hash2(i + vec2(1.0, 1.0)).x;\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm( in vec2 x)\n{    \n    float t = 0.0;\n    float amp = 0.;\n    for( int i=1; i<7; i++ )\n    {\n        float f = pow( 2., float(i) );\n        float a = pow( f, -.75 );\n        amp = 10.*step(3., float(i));\n        t += a*noise(f*x+amp);\n    }\n    return t*1.-.4;\n}\nvec2 make_eye(vec2 uv){\n    float area_eye = smoothstep(140./iResolution.y, 0., abs(abs(uv.y) - (.1*cos(iTime)+.9)*sin(uv.x+PI/2.))-.15);\n    return vec2(area_eye, // contour\n              smoothstep(140./iResolution.y, 0., abs(uv.y) - (.1*cos(iTime)+.9)*sin(uv.x+PI/2.))// inside\n            );\n}\n\nvec2 make_pupil(vec2 uv, vec2 center, float radius){\n    return vec2(\n        smoothstep(5./iResolution.y, 0., abs(length(uv+-center)-radius)-.02), // Pupille contour\n        1.-smoothstep(-5./iResolution.y, 0., (length(uv-center)-radius)-.02)); // Pupille inside\n}\n\nvec3 red_pupil(vec2 uv, vec2 center, float radius){\n    return vec3(\n        1.-smoothstep(0., radius/3., length(uv-center)), 0., 0.); // Pupille inside\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( 2.*fragCoord.xy - iResolution.xy ) / iResolution.y;\n    uv *= 1.5;\n    // Time varying pixel color\n    vec2 center = vec2(0., 0.);\n    float radius = .2+.1*cos(iTime*.3);\n    \n    \n    \n    vec2 pupille = make_pupil(uv, center, radius);\n    vec2 eye = make_eye(uv);\n    \n    vec2 st = (uv-center)*(3.);\n    \n    \n    float N = cos(iTime*.8)+ 2.;\n    \n    float length_st = pow( pow(abs(st.x), N) + pow(abs(st.y), N), 1./N);\n    float n = noise(vec2(length_st, length_st) - .2*iTime)*5.+fbm(abs(st)-iTime+fbm(abs(st))) ;\n    \n    // iq's palette\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = 1.-a;\n    vec3 c = vec3(.3, .3, .3);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    vec3 iris = palette(n, a,b,c,d)*eye.y* (1. - pupille.y) + vec3(.3)*pupille.x;\n    \n    /*\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = 1.-a;\n    vec3 c = vec3(.3, .3, .3);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    vec3 iris = palette(n, a,b,c,d)*eye.y* (1. - pupille.y);\n    */    \n    \n    \n    \n    vec3 col = iris;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}