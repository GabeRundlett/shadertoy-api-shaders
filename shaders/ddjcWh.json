{
    "Shader": {
        "info": {
            "date": "1687679270",
            "description": "CC0: Sunday morning random results\nTinkering around on sunday morning\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ddjcWh",
            "likes": 90,
            "name": "Sunday morning random results",
            "published": 3,
            "tags": [
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1062
        },
        "renderpass": [
            {
                "code": "// CC0: Sunday morning random results\n//  Tinkering around on sunday morning\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst int max_iter = 5;\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - pabs(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nfloat shape(vec2 p) {\n  const float amp = 10.0;\n  p += amp*sin(vec2(1.0, sqrt(0.5))*0.026*TIME*TAU/amp);\n  vec2 cp = p;\n  vec2 np = round(p);\n  cp -= np;\n\n  float h0 = hash(np+123.4); \n  if (h0 > 0.5) {\n    cp = vec2(-cp.y, cp.x);\n  }\n\n  vec2 cp0 = cp;\n  cp0 -= -0.5;\n  float d0 = (length(cp0)-0.5);\n  vec2 cp1 = cp;\n  cp1 -= 0.5;\n  float d1 = (length(cp1)-0.5);\n  \n  float d = d0;\n  d = min(d, d1);\n  d = abs(d)-0.125;\n  return d;\n}\n\nvec2 df(vec2 p, out int ii, out bool inside) {\n  float sz = 0.9;\n  float ds = shape(p);\n  vec2 pp = p;\n\n  float r = 0.0;\n\n  ii = max_iter;\n  for (int i=0; i<max_iter; ++i) {\n    pp = p;\n    vec2 nn = mod2(pp, vec2(sz));\n  \n    vec2 cp = nn*sz;\n    float d = shape(cp);\n    \n    r = sz*0.5; \n\n    if (abs(d) > 0.5*sz*sqrt(2.0)) {\n      ii = i;\n      inside = d < 0.0;\n      break;\n    }\n\n    sz /= 3.0;\n  }\n  \n  float aa = 0.25*sz;\n\n  float d0 = box(pp, vec2(r-aa))-aa; \n  float d1 = length(pp);\n  return vec2(d0, d1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 4.0/RESOLUTION.y;\n  vec2 op = p;\n  mat2 rot =ROT(0.0125*TIME); \n  p *= rot;\n  smoothKaleidoscope(p, 0.025, 34.0);\n  p *= ROT(0.25*length(op));\n  p *= transpose(rot);\n\n  int i;\n  bool inside;\n  vec2 d2 = df(p, i, inside);\n  float ii = float(i)/float(max_iter);\n  vec3 col = vec3(0.0);\n  vec3  rgb = 0.5*(1.0+cos(0.5*TIME-0.5*PI*length(p)+vec3(0.0, 1.0, 2.0)+ PI*ii+(inside?(2.0*(dot(p,pp)+1.0)):0.0)));\n  rgb += 0.0025/max(d2.y, 0.005);\n  col = mix(col, rgb, smoothstep(0.0, -aa, d2.x));\n  col -= vec3(0.25)*(length(op)+0.0);\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = sqrt(col);\n\n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}