{
    "Shader": {
        "info": {
            "date": "1566851663",
            "description": "The covert art for Imagine Dragons' Believer! :D\n\nHope you enjoy it! ;)",
            "flags": 32,
            "hasliked": 0,
            "id": "3tBXzd",
            "likes": 37,
            "name": "IMAGINE DRAGONS!!! (BELIEVER)",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "sphere",
                "march",
                "dragons",
                "imagine"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 1319
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   This is a 3D imagining of the cover art for Imagine Dragons' Believer single :]\n   Here's the cover art for reference: http://www.lemonademagazine.net/wp-content/uploads/2017/03/Imagine-Dragons-Believer.jpg\n   Obviously the copyright is owned by Imagine Dragons (or the record label? '\\_o.O_/`)\n   And I recently learned that Beeple is the artist responsible for that cover: https://www.beeple-crap.com/\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n   The rest of the code however is...\n\n   ... covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture (iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/***********************************************************\n\n   This is a 3D imagining of the cover art for Imagine Dragons' Believer single :]\n   Here's the cover art for reference: http://www.lemonademagazine.net/wp-content/uploads/2017/03/Imagine-Dragons-Believer.jpg\n   Obviously the copyright is owned by Imagine Dragons (or the record label? '\\_o.O_/`)\n   And I recently learned that Beeple is the artist responsible for that cover: https://www.beeple-crap.com/\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n   The rest of the code however is...\n\n   ... covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define M_PI 3.1415926535\n#define DRAW_DISTANCE 200.0\n\nfloat sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3  ba = b - a;\n    vec3  pa = p - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat rand2D(vec2 uv)\n{\n\treturn fract(sin(dot(uv ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat starAtPos (vec2 uv)\n{\n    return max (rand2D (floor (uv * 1000.0) * 0.1) - 0.99, 0.0);\n}\n\nvec4 mainCubemap (vec2 uv, vec3 rayDir)\n{\n    vec4 fragColor = vec4 (0.0);\n    \n    for (int i = -1; i != 2; i++)\n\t    for (int j = -1; j != 2; j++)\n\t\t    fragColor.rgb += starAtPos (uv + vec2 (float(i), float(j))*0.0001);\n\tfragColor.rgb /= 9.0;\n    fragColor.rgb *= vec3 (0.5, 0.5, 1.0) * 30.0;\n    fragColor.rgb += starAtPos (uv) * vec3 (0.85, 0.85, 1.0) * 30.0;\n\n    vec2 uvAdj = uv * 30.0;\n    if ( any (lessThan (fract (uvAdj), vec2 (0.03))) )\n    {\n        fragColor.rgb += vec3 (0.1);\n    }\n\n    uvAdj /= 3.0;\n    if ( any (lessThan (fract (uvAdj), vec2 (0.03))) )\n    {\n        fragColor.rgb += vec3 (0.1);\n    }\n    if ( all (lessThan (fract (uvAdj), vec2 (0.03))) )\n    {\n        fragColor.rgb += vec3 (0.2);\n    }\n    if ( abs (fract (uvAdj).x - (1.0 - fract (uvAdj).y)) < 0.01 )\n    {\n        fragColor.rgb += vec3 (0.1);\n    }\n\n    const vec4 cyan = vec4 (0.6, 1.0, 1.0, 1.0) * 0.55;\n    const vec4 blue = vec4 (0.0, 0.0, 1.0, 1.0) * 0.45;\n    const vec4 green = vec4 (0.1, 0.9, 0.4, 1.0) * 0.65;\n    const vec4 orange = vec4 (1.0, 0.3, 0.0, 1.0) * 0.65;\n    \n    fragColor += clamp (1.0 - (abs (uv.x - 0.42) / 0.2), 0.0, 1.0) * blue;\n    fragColor += clamp (1.0 - (abs (uv.x - 0.5) / 0.2), 0.0, 1.0) * green;\n    fragColor += clamp (1.0 - (abs (uv.x - 0.58) / 0.2), 0.0, 1.0) * orange;\n\n    if ( uv.x > 0.39 && uv.x < 0.45 ) fragColor += cyan;\n    if ( uv.x > 0.47 && uv.x < 0.53 ) fragColor += green;\n    if ( uv.x > 0.55 && uv.x < 0.61 ) fragColor += orange;\n\n    // Top and bottom extensions... like a cross!\n    // This gives the correct reflections seen in the EP cover ;]\n    if ( abs (rayDir.y) > 0.65 )\n    {\n        fragColor += clamp (1.0 - (abs (uv.y - 0.58) / 0.2), 0.0, 1.0) * orange;\n        fragColor += clamp (1.0 - (abs (uv.y - 0.5) / 0.2), 0.0, 1.0) * green;\n        fragColor += clamp (1.0 - (abs (uv.y - 0.42) / 0.2), 0.0, 1.0) * blue;\n\n        if ( uv.y > 0.55 && uv.y < 0.61 ) fragColor += orange;\n        if ( uv.y > 0.47 && uv.y < 0.53 ) fragColor += green;\n        if ( uv.y > 0.39 && uv.y < 0.45 ) fragColor += cyan;\n    }\n    \n    return fragColor;\n}\n\nvec4 sampleCube (vec3 ray)\n{\n    ray = normalize (ray);\n    \n    if ( ray.x != 0.0 )\n    {\n        float k = abs (0.5 / ray.x);\n        vec3 p = k * ray;\n        if ( p.zy == clamp (p.zy, vec2 (-0.5), vec2 (0.5)) )\n            return mainCubemap (p.zy + vec2 (0.5), ray);\n    }\n    if ( ray.y != 0.0 )\n    {\n        float k = abs (0.5 / ray.y);\n        vec3 p = k * ray;\n        if ( p.xz == clamp (p.xz, vec2 (-0.5), vec2 (0.5)) )\n            return mainCubemap (p.xz + vec2 (0.5), ray);\n    }\n    if ( ray.z != 0.0 )\n    {\n        float k = abs (0.5 / ray.z);\n        vec3 p = k * ray;\n        if ( p.xy == clamp (p.xy, vec2 (-0.5), vec2 (0.5)) )\n            return mainCubemap (p.xy + vec2 (0.5), ray);\n    }\n    return vec4 (0.0);\n}\n\nfloat scene (vec3 p, mat3 invTran)\n{\n    vec3 c = vec3 (10.0);\n\tvec3 q = mod(p,c)-0.5*c;\n    q.y = p.y + 5.0;\n    float repeat1 = sdCappedCylinder (q, vec3 (0.0, 0.0, -5.0), vec3 (0.0, 0.0, 5.0), 0.1);\n    float repeat2 = sdCappedCylinder (q, vec3 (-5.0, 0.0, 0.0), vec3 (5.0, 0.0, 0.0), 0.1);\n    float groundWithWires = min (min (repeat1, repeat2), p.y + 5.2);\n    \n    vec3 c2 = vec3 (40.0);\n\tvec3 q2 = mod(p,c2)-0.5*c2;\n    q2.y = p.y;\n    q2.x = p.x;\n\tvec3 q3 = mod(p - vec3 (0.0, iTime, 0.0),c2)-0.5*c2;\n    q3.x = p.x;\n    vec3 q31 = invTran * (q3 + vec3 (3.0, -0.8, 2.6));\n    vec3 q32 = invTran * (q3 + vec3 (-2.0, 3.2, 5.4));\n    vec3 q33 = invTran * (q3 + vec3 (7.4, 1.9, -3.1));\n    vec3 q34 = invTran * (q3 + vec3 (-2.6, 2.1, -4.8));\n\n    float pyramid = sdOctahedron (q2 + vec3 (-5.0, 5.2, 4.0), 1.0);\n\tpyramid = min (pyramid, sdOctahedron (q2 + vec3 (-16.0, 5.2, -8.0), 3.0));\n\tpyramid = min (pyramid, sdOctahedron (q2 + vec3 (4.0, 5.2, 3.0), 1.0));\n\tpyramid = min (pyramid, sdOctahedron (q2 + vec3 (15.0, 5.2, 8.0), 2.0));\n\n\tpyramid = min (pyramid, sdOctahedron (q2 + vec3 (-20.0, 5.2, -10.0), 3.0));\n\tpyramid = min (pyramid, sdOctahedron (q2 + vec3 (7.0, 5.2, -7.0), 4.0));\n\tpyramid = min (pyramid, sdOctahedron (q2 + vec3 (-11.0, 5.2, -9.0), 1.0));\n\n    pyramid = min (pyramid, sdOctahedron (q2 + vec3 (-9.0, 5.2, -15.0), 4.5));\n    pyramid = min (pyramid, sdOctahedron (q2 + vec3 (6.0, 5.2, -17.0), 2.0));\n    pyramid = min (pyramid, sdOctahedron (q2 + vec3 (-8.0, 5.2, -14.0), 1.0));\n\n    pyramid = min (pyramid, sdOctahedron (q2 + vec3 (1.0, 5.2, -8.0), 1.5));\n    pyramid = min (pyramid, sdOctahedron (q2 + vec3 (-1.5, 5.2, 8.0), 0.5));\n    pyramid = min (pyramid, sdOctahedron (q2 + vec3 (0.5, 5.2, -7.0), 2.0));\n    \n    // Add debris\n    pyramid = min (pyramid, sdHexPrism (q31, vec2 (0.2, 0.175)));\n    pyramid = min (pyramid, sdHexPrism (q32, vec2 (0.4, 0.15)));\n    pyramid = min (pyramid, sdHexPrism (q33, vec2 (0.15, 0.3)));\n    pyramid = min (pyramid, sdHexPrism (q34, vec2 (0.1, 0.2)));\n    \n    return min (pyramid, groundWithWires);\n}\n\nmat4 rotationMatrix(vec3 axis, float cosA, float sinA) {\n    float s = sinA;\n    float c = cosA;\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float cosA, float sinA) {\n\tmat4 m = rotationMatrix(axis, cosA, sinA);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixelWH = 1.0/iResolution.xy;\n    float pixelLen = length (pixelWH);\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec3 curEye = vec3 (0.0, 0.0, iTime * 10.0);\n    vec3 sampleLook = normalize (vec3 (sin(iTime* 0.5) * 0.2, cos(iTime * 0.5) * 0.2 + 0.1, 1.0));\n    \n    vec3 side = cross (vec3 (0.0, -1.0, 0.0), sampleLook);\n    vec3 up = cross (side, sampleLook);\n    if ( dot (up, vec3 (0.0, 1.0, 0.0)) < 0.0 ) up = -up;\n    \n    float drawDistSq = DRAW_DISTANCE*DRAW_DISTANCE;\n    float distToHitSq = 0.0;\n    vec3 hitPt = vec3 (0.0);\n    vec3 sampleDir = normalize (sampleLook + side * uv.x + up * uv.y);\n    vec3 samplePt = curEye + sampleDir;\n    vec3 colorAccum = vec3 (1.0);\n    int bounceCount = 0;\n    float spread = 0.0;\n    \n    vec3 rotAxis = normalize (vec3 (1.0));\n    float cosA = cos(iTime);\n    float sinA = sin(iTime);\n    mat3 objXForm;\n    objXForm[0] = rotate (vec3 (1.0, 0.0, 0.0), rotAxis, cosA, sinA);\n    objXForm[1] = rotate (vec3 (0.0, 1.0, 0.0), rotAxis, cosA, sinA);\n    objXForm[2] = rotate (vec3 (0.0, 0.0, 1.0), rotAxis, cosA, sinA);\n    objXForm = inverse (objXForm);\n\n    for (float jj = 0.0; jj != 10000.0; jj += 1.0) // Sometimes you just gotta give...\n    {\n        float curDist = scene (samplePt, objXForm);\n        if (abs(curDist) < 0.001)\n        {\n            float gradD = 0.01;\n            float gradX = scene (samplePt + vec3 ( gradD, 0.0, 0.0), objXForm) - scene (samplePt - vec3 ( gradD, 0.0, 0.0), objXForm);\n            float gradY = scene (samplePt + vec3 ( 0.0, gradD, 0.0), objXForm) - scene (samplePt - vec3 ( 0.0, gradD, 0.0), objXForm);\n            float gradZ = scene (samplePt + vec3 ( 0.0, 0.0, gradD), objXForm) - scene (samplePt - vec3 ( 0.0, 0.0, gradD), objXForm);\n\n            vec3 ourNorm = normalize (vec3 (gradX, gradY, gradZ));\n            vec3 toHit = curEye - samplePt;\n            vec3 toEyeNorm = normalize (toHit);\n            // This allows some contact hardening... actual GGX is expensive\n            if ( bounceCount == 0 )\n            {\n                spread = abs (dot (sampleDir, ourNorm));\n                hitPt = samplePt;\n                distToHitSq = dot (toHit, toHit);\n            }\n            sampleDir = reflect (sampleDir, ourNorm);\n            samplePt += ourNorm * 0.1;\n            bounceCount++;\n            if ( bounceCount == 2 )\n            {\n                colorAccum *= sampleCube (sampleDir).rgb * 0.5; // Pretend you've lost some energy...\n                break;\n            }\n\n            continue;\n        }\n        samplePt += curDist*sampleDir;\n        vec3 samplePtToEye = samplePt - curEye;\n        if ( dot (samplePtToEye,samplePtToEye) > drawDistSq )\n        {\n            colorAccum *= sampleCube (sampleDir).rgb;\n            break ;\n        }\n    }\n    \n    float centBrightener = clamp (40.0 / abs (hitPt.x), 0.0, 1.0);\n    centBrightener *= centBrightener;\n    float distDarkener = clamp (2000.0 / distToHitSq, 0.0, 1.0);\n    \n    fragColor = vec4 (colorAccum * max (centBrightener, distDarkener), spread);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/***********************************************************\n\n   This is a 3D imagining of the cover art for Imagine Dragons' Believer single :]\n   Here's the cover art for reference: http://www.lemonademagazine.net/wp-content/uploads/2017/03/Imagine-Dragons-Believer.jpg\n   Obviously the copyright is owned by Imagine Dragons (or the record label? '\\_o.O_/`)\n   And I recently learned that Beeple is the artist responsible for that cover: https://www.beeple-crap.com/\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n   The rest of the code however is...\n\n   ... covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelWH = 1.0/iResolution.xy;\n\n    vec4 midFetch = texture (iChannel0, uv);\n    float spreadSmooth = midFetch.a;\n    int kernelSize = int (spreadSmooth * 30.0);\n    vec3 finalRes = vec3 (0.0);\n    float weightSum = 0.0;\n    for (int i = -kernelSize; i != kernelSize+1; i++)\n    {\n        vec4 neighFetch = texture (iChannel0, uv + vec2 (float(i) * pixelWH.x, 0.0));\n        float neighWeight = clamp (0.001 / abs(neighFetch.a - midFetch.a), 0.0, 1.0);\n        if ( neighWeight < 0.001 ) continue;\n        weightSum += neighWeight;\n        finalRes += neighFetch.rgb * neighWeight;\n    }\n\tfinalRes /= weightSum;\n    \n    fragColor = vec4 (finalRes, midFetch.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/***********************************************************\n\n   This is a 3D imagining of the cover art for Imagine Dragons' Believer single :]\n   Here's the cover art for reference: http://www.lemonademagazine.net/wp-content/uploads/2017/03/Imagine-Dragons-Believer.jpg\n   Obviously the copyright is owned by Imagine Dragons (or the record label? '\\_o.O_/`)\n   And I recently learned that Beeple is the artist responsible for that cover: https://www.beeple-crap.com/\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n   The rest of the code however is...\n\n   ... covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelWH = 1.0/iResolution.xy;\n\n    vec4 midFetch = texture (iChannel0, uv);\n    float spreadSmooth = midFetch.a;\n    int kernelSize = int (spreadSmooth * 30.0);\n    vec3 finalRes = vec3 (0.0);\n    float weightSum = 0.0;\n    for (int i = -kernelSize; i != kernelSize+1; i++)\n    {\n        vec4 neighFetch = texture (iChannel0, uv + vec2 (0.0, float(i) * pixelWH.y));\n        float neighWeight = clamp (0.001 / abs(neighFetch.a - midFetch.a), 0.0, 1.0);\n        if ( neighWeight < 0.001 ) continue;\n        weightSum += neighWeight;\n        finalRes += neighFetch.rgb * neighWeight;\n    }\n\tfinalRes /= weightSum;\n    \n    finalRes = mix (texture (iChannel1, uv).rgb, finalRes, 0.4);\n    \n    fragColor = vec4 (finalRes, midFetch.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}