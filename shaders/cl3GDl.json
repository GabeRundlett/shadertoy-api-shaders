{
    "Shader": {
        "info": {
            "date": "1683294276",
            "description": "simplifying \"Colourful Apollonian III\" by mla. https://shadertoy.com/view/wdsfWX\n\nmouse control. \nclick back to bottom-left corner for demo mode.",
            "flags": 0,
            "hasliked": 0,
            "id": "cl3GDl",
            "likes": 25,
            "name": "Colourful Apollonian III - short",
            "published": 3,
            "tags": [
                "inversion",
                "apollonian",
                "short",
                "golf",
                "gasket"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "// simplifying \"Colourful Apollonian III\" by mla. https://shadertoy.com/view/wdsfWX\n\n\n\n#define inv   z = (z-t) / dot(z-t,z-t) *s + t\n \n\nvoid mainImage(out vec4 O, vec2 u) {\n\n  vec2 R = iResolution.xy,\n       z = ( u+u - R ) / R.y,\n       t = ( 2.*iMouse.xy - R ) / R.y;\n\n  float N = 3.,                       // Any odd N >= 3 will work\n        a = 3.14/N,\n        D = 1./cos(a),                // Centre distance of outer circles\n        T = tan(a),                   // Radius of outer circles\n        K = D - T,                    // Radius squared of centre circle\n        n = 50., i = 0.,j, s = 1.;\n                                      // --- init setup \n  if ( length(iMouse.xy) > 9. )       // interactive mode:\n      t /= s = dot(t,t),              //   set inversion translation & scaling\n      s = 1./s - 1.;\n   // z = inv( z, t/s, (1.-s)/s );    //   invertto(z,t)\n  else                                // demo mode:\n      z += t = vec2( 0, 1.618*sin(.5*iTime) ), // set inversion translation; scaling = 1\n      z /= dot(z,z);\n   // z = inv( z, t, 1.);\n  inv;\n                                      // --- compute Apollonian\n  for (s = T*T ; i < n && length(z) > K ; i++) { // fractal iterations\n    z *= - K / dot(z,z);              // Imaginary radius\n    for ( j = 0.; j++ < N; )\n      t = D * sin( 6.28*j/N + vec2(0,1.57)),                   \n      length(z-t) < T ? inv, j=n : j; // getcircle(j)      \n  }\n\n  O = sqrt( // i == n ? vec4(0) :     // to sRGB\n            ( .6 + .6 * cos( i  + vec4(0,23,21,0)) )  //Â hue\n            * ( 1.-length(z)/K ) );   // pseudo-shading\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}