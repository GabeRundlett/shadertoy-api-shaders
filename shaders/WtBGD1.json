{
    "Shader": {
        "info": {
            "date": "1559279708",
            "description": "an approach to the following puzzle:\n\nyou have a bunch of uniform coins and a long skinny box.\nthe interior of the box is 2 coins wide, 1000 coins long, and 1 coin-thickness tall.\nhow many whole coins can you fit in the box ?\n\nmouse to see one approach.",
            "flags": 32,
            "hasliked": 0,
            "id": "WtBGD1",
            "likes": 13,
            "name": "coins in a box - puzzle",
            "published": 3,
            "tags": [
                "2d",
                "packing",
                "puzzle",
                "grimoire"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 587
        },
        "renderpass": [
            {
                "code": "// orion elenzil 20190528\n//\n// coin-packing puzzle!\n//\n// you have a bunch of uniform coins\n// and a long skinny box.\n// the interior of the box is 2 coins wide,\n// 1000 coins long, and 1 coin-thickness tall.\n// how many whole coins can you fit in the box ?\n//\n// hold down the mouse button to see one solution.\n// i hear there's a better one, tho !\n//\n// puzzle from mike plotz: https://hyponymo.us\n\n\nconst float PI         =  3.14159265359;\nconst float TAU        =  PI * 2.0;\nconst float gViewPort  =  2.25;\nconst float DEG_TO_RAD =  TAU / 360.0;\n\nfloat sf = 1.0;\n\nconst float coinBorderPx = 4.0;\n\nconst vec3  bg           = vec3(0.5, 0.55, 0.4) * 0.6;\nconst vec3  colCoinBody1 = vec3(0.8, 0.8, 0.7);\nconst vec3  colCoinBody2 = vec3(0.8, 0.7, 0.8);\nconst vec3  colCoinBody3 = vec3(0.7, 0.8, 0.8);\nconst vec3  colCoinBody4 = vec3(0.7, 0.7, 0.7);\nconst vec3  colCoinEdge  = vec3(0.2, 0.1, 0.0);\nconst vec3  colBoxBody   = vec3(0.5, 0.6, 0.8);\nconst vec3  colBoxEdge   = vec3(0.0, 0.1, 0.3);\n\n// this analytic solution from Gabe Chang.\n// it comes out to 5.264 degrees, which is very close to my empirical 5.3 degrees.\nconst float thetaMax = asin(1.0/sqrt(3.0)) - 30.0 * DEG_TO_RAD;\n\nfloat t    = 0.0;\nfloat tMax = 7.0;\n\n// 0     to 1   : intro\n// 1     to 2   : move row 2 right 0.5, shifting down.\n// 2     to 3   : pause\n// 3     to 4   : rotate\n// 4     to 4.5 : pause\n// 4.5   to 5   : zoom\n// 5     to 5.5 : pause\n// 5.5   to 6.5 : compact\n// 6.5   to 7\n\n// adapted from iq's exact sdfBox()\n// https://iquilezles.org/articles/distfunctions\nfloat sdfRect(in vec2 p, in vec2 r) {\n    vec2 d = abs(p) - r;\n    return length(max(d, 0.0))\n        + min(max(d.x, d.y), 0.0);\n}\n\n//-----------------------------------------------------------------\n// Digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\n\nfloat SampleDigit(const in float n, const in vec2 vUV)\n{       \n    if(vUV.x  < 0.0) return 0.0;\n    if(vUV.y  < 0.0) return 0.0;\n    if(vUV.x >= 1.0) return 0.0;\n    if(vUV.y >= 1.0) return 0.0;\n    \n    float data = 0.0;\n    \n         if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n    else if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n    else if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n    else if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n    else if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n    else if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n    else if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n    else if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n    else if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n    else if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n    \n    vec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n    float fIndex = vPixel.x + (vPixel.y * 4.0);\n    \n    return mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt(const in vec2 uv, const in float value )\n{\n    float res = 0.0;\n    float maxDigits = 1.0+ceil(log2(value + 0.00001)/log2(10.0));\n    float digitID = floor(uv.x);\n    if( digitID>0.0 && digitID<maxDigits )\n    {\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n    }\n\n    return res; \n}\n// end of number-printing\n///////////////////////////////////////////////\n\n\nfloat theta(float time) {\n    return clamp(time - 3.0, 0.0, 1.0) * thetaMax;\n}\n\nvoid drawBox(inout vec3 rgb, in vec2 p) {\n    vec2 dim = vec2(500.0, 1.0);\n    vec2 cen = vec2(dim.x, 0.0);\n    float rd = sdfRect(p - cen, dim);\n    rgb = mix(rgb, colBoxEdge, smoothstep(0.0, -1.0, rd / sf - coinBorderPx));\n    rgb = mix(rgb, colBoxBody, smoothstep(0.0, -1.0, rd / sf));\n    float grid = 0.0;\n    grid = max(grid, smoothstep(coinBorderPx, coinBorderPx - 1.0, abs((fract(p.x + coinBorderPx * 0.5 * sf))/ sf)));\n    grid = max(grid, smoothstep(coinBorderPx, coinBorderPx - 1.0, abs((fract(p.y + coinBorderPx * 0.5 * sf))/ sf)));\n    grid = max(grid, smoothstep(coinBorderPx, coinBorderPx - 1.0, abs((fract(p.x + 0.5 + coinBorderPx * 0.5 * sf))/ sf)));\n    grid = max(grid, smoothstep(coinBorderPx, coinBorderPx - 1.0, abs((fract(p.y + 0.5 + coinBorderPx * 0.5 * sf))/ sf)));\n    rgb = mix(rgb, vec3(0.0), 0.5 * smoothstep(0.1, -0.1, rd / sf) * grid);\n}\n\nvoid drawC(inout vec3 rgb, in vec2 p, in vec2 c, in vec3 col, in float num) {\n    float d  = length(p - c);\n    float ce = smoothstep( 1.0, -1.0,     (d - 0.5)  / sf);\n    float cb = smoothstep( 1.0, -1.0,     (d - 0.5)  / sf + coinBorderPx);\n    vec3 tmp = mix(colCoinEdge, col * (d * 0.3 + 0.7), cb);\n    rgb      = mix(rgb, tmp, ce * 0.7);\n    rgb *= 1.0 - 0.5 * PrintInt((p - c + vec2(0.47, 0.1)) * 6.0, num);\n}\n\nvoid drawC1(inout vec3 rgb, in vec2 p, in mat2 rot, in float dxMod) {\n    if (p.x < 0.0 || p.x > 1000.0) {\n        return;\n    }\n\n    float step = 2.0 + dxMod;\n    float num = 1.0 + 4.0 * floor(p.x / step);\n\n    p.x = mod(p.x, step);\n    vec2 c = vec2(0.5, -0.5);\n    c -= vec2(0.5, -0.5);\n    c *= rot;\n    c += vec2(0.5, -0.5);\n    drawC(rgb, p, c, colCoinBody1, num);\n}\nvoid drawC2(inout vec3 rgb, in vec2 p, in mat2 rot, in float dxMod) {\n    float dx = clamp(t - 1.0, 0.0, 1.0) * 0.5;\n    if (p.x < 0.0 || p.x > 1000.0) {\n        return;\n    }\n\n    float step = 2.0 + dxMod;\n    float num = 2.0 + 4.0 * floor((p.x - dx) / step);\n\n    p.x = mod(p.x, step);\n    vec2 c = vec2(0.5, 0.5);\n    c.x += dx;\n    float dy = 1.0 - sqrt(1.0 - dx * dx);\n    c.y -= dy;\n    c -= vec2(0.5, -0.5);\n    c *= rot;\n    c += vec2(0.5, -0.5);\n\n    drawC(rgb, p, c, colCoinBody2, num);\n}\nvoid drawC3(inout vec3 rgb, in vec2 p, in mat2 rot, in float dxMod) {\n    if (p.x < 0.0 || p.x > 1000.0) {\n        return;\n    }\n\n    float step = 2.0 + dxMod;\n    float num = 3.0 + 4.0 * floor(p.x / step);\n\n    p.x = mod(p.x + dxMod, step) - dxMod;\n    vec2 c = vec2(1.5, -0.5);\n    c -= vec2(0.5, -0.5);\n    c *= rot;\n    c += vec2(0.5, -0.5);\n\n    drawC(rgb, p, c, colCoinBody3, num);\n}\nvoid drawC4(inout vec3 rgb, in vec2 p, in mat2 rot, in float dxMod) {\n    float dx = clamp(t - 1.0, 0.0, 1.0) * 0.5;\n    if (p.x < 0.5 || p.x > 1000.0) {\n        return;\n    }\n\n    float step = 2.0 + dxMod;\n    float num = 4.0 + 4.0 * floor((p.x - dx) / step);\n\n    p.x = mod(p.x - dx, step) + dx;\n    vec2 c = vec2(1.5, 0.5);\n    c.x += dx;\n    float dy = 1.0 - sqrt(1.0 - dx * dx);\n    c.y -= dy;\n    c -= vec2(0.5, -0.5);\n    c *= rot;\n    c += vec2(0.5, -0.5);\n\n    drawC(rgb, p, c, colCoinBody4, num);\n}\n\nvoid render(out vec4 RGBA, in vec2 XY, bool showLeft) {\n    RGBA.a   = 1.0;\n\n    t = 0.0;\n    float mouseDownTime = texelFetch(iChannel0, ivec2(0, 0), 0).r;\n    if (mouseDownTime > 0.0) {\n        t = (iTime - mouseDownTime) / 2.0 + 1.0;\n    }\n\n    t = abs(mod(t - tMax, tMax * 2.0) - tMax);\n\n    float vign = 1.0;\n\n    vec2 uv;\n    /**/  sf = gViewPort / (iResolution.y * 0.5);\n    if (showLeft) {\n        float tMe = clamp(t - 4.5, 0.0, 0.5);\n     //   tMe=0.5;\n        sf    = mix (sf, sf * 0.1, 2.0 * tMe);\n        uv    = (XY - iResolution.xy * vec2(0.0, 0.25)) * sf;\n        uv.x -= mix(0.25, iResolution.x * sf * 0.5 - 2.0, 2.0 * tMe);\n        uv.y -= mix(0.0 , 0.5, 2.0 * tMe);\n\n        vign  = 1.0 - tMe * 2.0 * (0.8 * smoothstep(0.0, 1.0, 4.0 * length(uv - vec2(2.0, -0.5))));\n    }\n    else {\n        uv    = (XY - iResolution.xy * vec2(0.0, 0.25)) * sf;\n        uv.x += 1000.5 - iResolution.x * sf;\n        vign  = 1.0;\n    }\n\n    vec3 rgb = bg;\n\n    float theta = -theta(t);\n    mat2 rot = mat2(cos(theta), sin(theta), -sin(theta), cos(theta));\n\n    vec2 c3 = vec2(1.0, 0.0);\n    c3 *= rot;\n    const float empiricalFudge = 2.0;    // take into account circularity.\n    float dxMod = (c3.x - 1.0) * empiricalFudge * clamp(t - 5.5, 0.0, 1.0);\n\n    drawBox(rgb, uv);\n    drawC1 (rgb, uv, rot, dxMod);\n    drawC2 (rgb, uv, rot, dxMod);\n    drawC3 (rgb, uv, rot, dxMod);\n    drawC4 (rgb, uv, rot, dxMod);\n\n    rgb *= vign;\n\n    // fade out\n    if (showLeft) {\n        rgb = mix(rgb, bg, smoothstep(-3.0, 3.0, XY.x - iResolution.x + 30.0 - sin(XY.y * 50.0 / iResolution.y + iTime) * 3.0 * iResolution.x / iResolution.y));\n    }\n    else {\n        rgb = mix(rgb, bg, smoothstep(-3.0, 3.0, -XY.x + 20.0 + sin(XY.y * 50.0 / iResolution.y + iTime) * 3.0 * iResolution.x / iResolution.y));\n    }\n\n    RGBA.rgb = pow(rgb, vec3(0.4545));\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    if (XY.y > iResolution.y / 2.0) {\n        render(RGBA, XY + vec2(0.0, -iResolution.y / 2.0), true);\n    }\n    else {\n        render(RGBA, XY, false);\n    }\n}\n\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// orion elenzil 20190528\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    ivec2 IJ = ivec2(XY);\n\n    if (any(greaterThan(IJ, ivec2(1, 1)))) {\n        discard;\n    }\n\n    if (iFrame < 3) {\n        RGBA = vec4(0.0);\n        return;\n    }\n\n\n    RGBA = texelFetch(iChannel0, IJ, 0);\n\n    if (iMouse.z > 0.0) {\n        if (RGBA.r == 0.0) {\n            RGBA.r = iTime;\n        }\n    }\n    else {\n        RGBA.r = 0.0;\n    }\n}\n\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}