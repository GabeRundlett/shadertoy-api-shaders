{
    "Shader": {
        "info": {
            "date": "1665272395",
            "description": "I can't believe I spent all afternoon on this. This song works well too: https://soundcloud.com/nocopyrightsounds/arya-borne-lynzz-need-u-ncs-release",
            "flags": 96,
            "hasliked": 0,
            "id": "ftVfWV",
            "likes": 11,
            "name": "Trap nation style audio visualiz",
            "published": 3,
            "tags": [
                "audio",
                "visualizer",
                "trap",
                "nation"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 613
        },
        "renderpass": [
            {
                "code": "\nfloat renderParticle(vec3 pos, vec2 uv, float aa)\n{\n    return smoothstep(0.05, 0.05 - aa, distance((pos.xy/pos.z), uv) * pos.z) * max(0.0, min(1.0, pos.z) * (10.-pos.z));\n}\n\nfloat getParticles(vec3 startPos, vec3 startPosRandom, vec3 speed, vec3 speedRandom, float startOffset, float lifetime, float time, int count, vec2 uv, float aa)\n{\n    float res = 0.0;\n    for(float i = 0.0; i < float(count); i++)\n    {\n        vec3 cParticlePos = startPos + startPosRandom * (hash13(i)-0.5);\n        float cParticleSelfTime = mod(hash11(i)*startOffset+time, lifetime);\n        cParticlePos += speed + cParticleSelfTime*(hash13(i)-0.5);\n        res += renderParticle(cParticlePos, uv, aa);\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x/iResolution.y;\n    vec2 uv = (fragCoord/iResolution.xy-0.5)*vec2(aspect, 1.0);\n    \n    uv += shake(iTime*25.0, 1.5)*SHAKE*pow(texture(iChannel0, vec2(0.1, 0.0)).r, REACTIVITY);\n    \n    float px = aspect/min(iResolution.x, iResolution.y);\n    \n    float angle = abs(atan(uv.y, abs(uv.x)) - HPI)/PI;\n    float height = pow(getHeight(angle/X_SCALE, SMOOTHNESS*X_SCALE, iChannel0), REACTIVITY)*HEIGHT;\n    float len = length(uv) - BASELINE;\n    \n    vec4 col = vec4(vec3(1.0), smoothstep(0.0, px, height-len)*smoothstep(0.0, px, len+MASK));\n    col += getParticles(vec3(1.0, 0.0, 10.0), vec3(0.9, 1.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 3.0), 100.0, 100.0, (iTime*0.2)+texture(iChannel1, vec2(0.1)).r*20.0, PARTICLES, uv, px)*0.1;\n    \n    col = vec4(mix(texture(iChannel2, fragCoord/iResolution.xy).rgb, col.rgb, col.w), 1.0);\n    \n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define reactivity 0.3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float r = reactivity;\n\n    fragColor = vec4(mix(texture(iChannel1, uv).x, texture(iChannel0, vec2(uv.x, 0.0)).x, clamp(0.0, 1.0, (1.0-uv.x) * r)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32990,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/tennobytemusic/tennobyte-fly-away"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(texture(iChannel1, vec2(0.0)).r + pow(texture(iChannel0, vec2(0.1, 0.0)).r, REACTIVITY)*iTimeDelta,0.0,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926535\n#define HPI 1.57079632679\n#define TAU 6.28318530718\n\n#define BASELINE 0.25\n#define MASK 0.05\n#define HEIGHT 0.15\n#define REACTIVITY 3.0\n#define SHAKE 0.02\n#define X_SCALE 2.0\n#define SMOOTHNESS 10.0\n#define PARTICLES 400 // Set to a lower value if you have a slow computer\n\nfloat erp(float x, float k)\n{\n    return x < 0.5 ? pow(2.0*x, k)*0.5  : 1. - pow(2.0*(1.0-x), k) / 2.;\n}\n\nfloat getHeight(float x, float res, sampler2D tex)\n{\n    return mix(texture(tex, vec2(floor(x*res)/res, 0.0)).r, texture(tex, vec2(floor(x*res + 1.0)/res, 0.0)).r, erp(fract(x*res), 1.9));\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec2 hash12(float p)\n{\n    vec3 p3 = fract(vec3(p,p,p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash13(float p)\n{\n    vec3 p3 = fract(vec3(p,p,p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec2 shake(float time, float s)\n{\n    return mix(hash12(floor(time)), hash12(floor(time) + 1.0), erp(fract(time), s))-0.5;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "ivec3[] colors = ivec3[] (ivec3(39, 55, 71), ivec3(0, 49, 98), ivec3(0, 97, 195), ivec3(0, 211, 255), ivec3(230, 255, 230));\n\nvec2 hash(vec2 p)\n{\n    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat perlinNoise(vec2 p, float s)\n{\n    vec2 tlVal = hash(vec2(floor(p.x),  ceil(p.y)));\n    vec2 blVal = hash(vec2(floor(p.x), floor(p.y)));\n    vec2 trVal = hash(vec2( ceil(p.x),  ceil(p.y)));\n    vec2 brVal = hash(vec2( ceil(p.x), floor(p.y)));\n    \n    vec2 tlOffset = p - vec2(floor(p.x),  ceil(p.y));\n    vec2 blOffset = p - vec2(floor(p.x), floor(p.y));\n    vec2 trOffset = p - vec2( ceil(p.x),  ceil(p.y));\n    vec2 brOffset = p - vec2( ceil(p.x), floor(p.y));\n    \n    float tl = dot(tlOffset, tlVal);\n    float bl = dot(blOffset, blVal);\n    float tr = dot(trOffset, trVal);\n    float br = dot(brOffset, brVal);\n    \n    float a = mix(bl, tl, erp(fract(p.y), s));\n    float b = mix(br, tr, erp(fract(p.y), s));\n    \n    return mix(a, b, erp(fract(p.x), s)) / 2.0 + 0.5;\n}\n\n\n\nfloat fbm(in vec2 x, float s, in float H)\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        t += a*perlinNoise(f*x, s);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}\nvec3 colorMap(float value)\n{\n    int colorCount = colors.length();\n    \n    float v = value * float(colorCount);\n    \n    int a = int(floor(v));\n    int b = a + 1;\n    \n    float fac = fract(v);\n    return mix(vec3(colors[a])*0.00392156862745, vec3(colors[b])*0.00392156862745, vec3(fac));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    uv += shake(iTime*25.0, 1.5)*SHAKE*pow(texture(iChannel0, vec2(0.1, 0.0)).r, REACTIVITY)*0.2;\n        uv *= 0.2;\n\n    uv.x += fbm((uv + iTime*0.01) * 1.0,           1.0, 1.0);\n    uv.y += fbm((uv + iTime*0.01) * 1.0 + 10.0, 1.0, 1.0);\n    uv.x += fbm((uv + iTime*0.01) * 1.0,           1.0, 1.0);\n    uv.y += fbm((uv + iTime*0.01) * 1.0 + 10.0, 1.0, 1.0);\n\n\n    float value = erp(fbm(uv * 20.0, 1.0, 1.0)/2.1, 6.0);\n\n    fragColor = vec4(colorMap(value),1.0);\n    //fragColor = colors[1].xyzx;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}