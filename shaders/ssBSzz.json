{
    "Shader": {
        "info": {
            "date": "1619585737",
            "description": "Simulates the reaction of two different chemicals, A and B. A is added at a given \"feed\" rate, B is removed at a given \"kill\" rate, and two B units reproduce into a third B unit in the presence of an A: 2B + 1A = 3B. The relevant parameters are in Common.",
            "flags": 32,
            "hasliked": 0,
            "id": "ssBSzz",
            "likes": 4,
            "name": "Chemical Reaction-Diffusion",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction",
                "reproduction",
                "chemistry"
            ],
            "usePreview": 0,
            "username": "michionlion",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "#define HIGHLIGHT_MULTIPLIER 2.5\n\nvec2 getAB(ivec2 pos) {\n    return texelFetch(iChannel0, pos, 0).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 AB = getAB(ivec2(fragCoord));\n\n    \n    float A = clamp(AB.x, 0.0, 1.0);\n    float B = clamp(AB.y, 0.0, 1.0);\n    \n    vec3 onlyB = vec3(0.1, 0.2, 1.0) * B;\n    vec3 leadingEdge = vec3(0.7, 0.85, 1.0) * (B - A) * HIGHLIGHT_MULTIPLIER;\n    vec3 straightB = vec3(B) * vec3(0.4, 0.6, 1.0);\n    \n    \n    fragColor = vec4(straightB + onlyB + leadingEdge,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// These can make many different looks and evolving structures\n#define FEED_RATE 0.055\n#define KILL_RATE 0.062\n\n// These also drastically change how the structures evolve;\n// They must be between 0.0 and 1.0 for interesting results\n#define A_DIFFUSION 1.0\n#define B_DIFFUSION 0.5\n\n// This should probably stay 1.0\n#define REACTIVITY 1.0\n// This does weird things when it's greater than 1.0\n#define TIME_SCALE 1.0\n\n#define B_INIT_RADIUS 32.0\n\n// Use the left mouse button to place \"B\"\n#define MOUSE_PLACE_SIZE 8.0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 getAB(vec2 pos) {\n    return texelFetch(iChannel0, ivec2(mod(pos, iResolution.xy)), 0).xy;\n}\n\nvec2 laplacian(vec2 center, vec2 AB) {\n    // center\n    vec2 sum = -AB;\n    \n    // adjacent neighbors\n    sum += 0.2 * getAB(center + vec2(0, 1));\n    sum += 0.2 * getAB(center + vec2(0, -1));\n    sum += 0.2 * getAB(center + vec2(1, 0));\n    sum += 0.2 * getAB(center + vec2(-1, 0));\n    \n    // diagonal neighbors\n    sum += 0.05 * getAB(center + vec2(1, 1));\n    sum += 0.05 * getAB(center + vec2(1, -1));\n    sum += 0.05 * getAB(center + vec2(-1, 1));\n    sum += 0.05 * getAB(center + vec2(-1, -1));\n\n    sum.x = isnan(sum.x) ? 0.0 : sum.x;\n    sum.y = isnan(sum.y) ? 0.0 : sum.y;\n\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 1) {\n        // initialize simulation\n        float A = 1.0;\n        float B = max(0.0, min(1.0, B_INIT_RADIUS - distance(iResolution.xy / 2.0, fragCoord)));\n        \n        fragColor = vec4(A, B, 0.0, 1.0);\n        return;\n    }\n    \n    vec2 previous = getAB(fragCoord);\n    float A = clamp(isnan(previous.x) ? 0.0 : previous.x, 0.0, 1.0);\n    float B = clamp(isnan(previous.y) ? 1.0 : previous.y, 0.0, 1.0);\n    \n    if(iMouse.z > 0.0 && distance(fragCoord, iMouse.xy) < MOUSE_PLACE_SIZE) {\n        B = 0.5;\n    }\n    \n    \n    // conduct chemical diffusion simulation\n    \n    vec2 diffusion = laplacian(fragCoord, previous);\n    float deltaA = TIME_SCALE * (A_DIFFUSION * diffusion.x - (REACTIVITY * A * B * B) + FEED_RATE * (1.0 - A));\n    float deltaB = TIME_SCALE * (B_DIFFUSION * diffusion.y + (REACTIVITY * A * B * B) - B * (FEED_RATE + KILL_RATE));\n    \n    deltaA = isnan(deltaA) ? 0.0 : deltaA;\n    deltaB = isnan(deltaB) ? 0.0 : deltaB;\n    \n    A = clamp(A + deltaA, 0.0, 1.0);\n    B = clamp(B + deltaB, 0.0, 1.0);\n    \n    fragColor = vec4(A, B, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}