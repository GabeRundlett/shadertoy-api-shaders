{
    "Shader": {
        "info": {
            "date": "1449950127",
            "description": "Color temperature",
            "flags": 0,
            "hasliked": 0,
            "id": "4sc3D7",
            "likes": 31,
            "name": "Color temperature (sRGB)",
            "published": 3,
            "tags": [
                "srgb",
                "colortemperature"
            ],
            "usePreview": 1,
            "username": "BeRo",
            "viewed": 4572
        },
        "renderpass": [
            {
                "code": "// Color temperature (sRGB) stuff\n// Copyright (C) 2014 by Benjamin 'BeRo' Rosseaux\n// Because the german law knows no public domain in the usual sense,\n// this code is licensed under the CC0 license \n// http://creativecommons.org/publicdomain/zero/1.0/\n\n#define WithQuickAndDirtyLuminancePreservation        \n\nconst float LuminancePreservationFactor = 1.0;\n\nconst float PI2 = 6.2831853071;\n\n// Valid from 1000 to 40000 K (and additionally 0 for pure full white)\nvec3 colorTemperatureToRGB(const in float temperature){\n  // Values from: http://blenderartists.org/forum/showthread.php?270332-OSL-Goodness&p=2268693&viewfull=1#post2268693   \n  mat3 m = (temperature <= 6500.0) ? mat3(vec3(0.0, -2902.1955373783176, -8257.7997278925690),\n\t                                      vec3(0.0, 1669.5803561666639, 2575.2827530017594),\n\t                                      vec3(1.0, 1.3302673723350029, 1.8993753891711275)) : \n\t \t\t\t\t\t\t\t\t mat3(vec3(1745.0425298314172, 1216.6168361476490, -8257.7997278925690),\n   \t                                      vec3(-2666.3474220535695, -2173.1012343082230, 2575.2827530017594),\n\t                                      vec3(0.55995389139931482, 0.70381203140554553, 1.8993753891711275)); \n  return mix(clamp(vec3(m[0] / (vec3(clamp(temperature, 1000.0, 40000.0)) + m[1]) + m[2]), vec3(0.0), vec3(1.0)), vec3(1.0), smoothstep(1000.0, 0.0, temperature));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float temperature = (iMouse.z > 0.0) ? mix(1000.0, 40000.0, iMouse.x / iResolution.x) : 6550.0; // mix(1000.0, 15000.0, (sin(iTime * (PI2 / 10.0)) * 0.5) + 0.5);\n    float temperatureStrength = (iMouse.z > 0.0) ? (1.0 - clamp((iMouse.y / iResolution.y) * (1.0 / 0.9), 0.0, 1.0)) : 1.0;\n    if(uv.y > 0.1){        \n      vec3 inColor = texture(iChannel0, uv).xyz;    \n      vec3 outColor = mix(inColor, inColor * colorTemperatureToRGB(temperature), temperatureStrength); \n#ifdef WithQuickAndDirtyLuminancePreservation        \n      outColor *= mix(1.0, dot(inColor, vec3(0.2126, 0.7152, 0.0722)) / max(dot(outColor, vec3(0.2126, 0.7152, 0.0722)), 1e-5), LuminancePreservationFactor);  \n#endif\n      fragColor = vec4(outColor, 1.0);\n    }else{\n      vec2 f = vec2(1.5) / iResolution.xy;   \n\t  fragColor = vec4(mix(colorTemperatureToRGB(mix(1000.0, 40000.0, uv.x)), vec3(0.0), min(min(smoothstep(uv.x - f.x, uv.x, (temperature - 1000.0) / 39000.0),\n                                                                                                 smoothstep(uv.x + f.x, uv.x, (temperature - 1000.0) / 39000.0)),\n                                                                                             1.0 - min(smoothstep(0.04 - f.y, 0.04, uv.y),\n                                                                                                       smoothstep(0.06 + f.y, 0.06, uv.y)))),\n                                                                                         1.0);\n    }   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}