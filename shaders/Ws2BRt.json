{
    "Shader": {
        "info": {
            "date": "1590612131",
            "description": "Menger sponge fractal.\nFractal can be rotated with mouse.\nDrawing depth can be changed in the beginning of the code.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws2BRt",
            "likes": 1,
            "name": "Menger sponge fractal",
            "published": 3,
            "tags": [
                "3d",
                "menger",
                "mengersponge",
                "fracta",
                "raymarchinig",
                "mangersponge"
            ],
            "usePreview": 0,
            "username": "kotfind",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "#define DEPTH 5\n\n#define u_resolution iResolution.xy\n#define u_mouse iMouse.xy\n#define u_time iTime\n\n#define inf 1000000.0\n#define M_PI 3.1415926\n\nfloat sdbox(in vec3 p) {\n    vec3 q = abs(p) - 1.0;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdbox2d(in vec2 p) {\n    vec2 d = abs(p)-1.0;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdcross(in vec3 p) {\n    float d1 = sdbox2d(p.xy);\n    float d2 = sdbox2d(p.yz);\n    float d3 = sdbox2d(p.xz);\n    return min(d1, min(d2, d3));\n}\n\nfloat map(in vec3 p) {\n    float d = inf;\n\n    // fractal\n    float d1 = sdbox(p);\n    d = min(d, d1);\n\n    float d2 = inf;\n    float pw = 1.0;\n    for (int i = 0; i < DEPTH; ++i) {\n        vec3 r = mod(p + pw, pw * 2.0) - pw;\n        float d3 = sdcross(r / (pw / 3.0)) * (pw / 3.0);\n        pw /= 3.0;\n        d2 = min(d2, d3);\n    }\n    d = max(d, -d2);\n\n    // floor\n    float d3 = p.y - (-1.5);\n    //d = min(d, d3);\n\n    return d;\n}\n\nfloat cast_ray(in vec3 ro, in vec3 rd) {\n    float t = 0.001;\n    for (int i = 0; i < 100; ++i) {\n        vec3 p = ro + t * rd;\n\n        float h = map(p);\n        if (h < 0.0001) break;\n        if (t > 10.0) break;\n        t += h;\n    }\n    if (t > 10.0) t = inf;\n    return t;\n}\n\nvec3 calc_normal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                          map(p + e.yxy) - map(p - e.yxy),\n                          map(p + e.yyx) - map(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - u_resolution.xy / 2.0) / min(u_resolution.x, u_resolution.y);\n\n    float r     = 5.0;\n    float theta = 2.0*M_PI * (u_mouse.x / u_resolution.x - 0.25);\n    float phi   = 0.5*M_PI * (u_mouse.y / u_resolution.y + 0.000001);\n\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    vec3 ro = ta + r * vec3(sin(phi) * cos(theta), cos(phi), sin(phi) * sin(theta));\n\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n\n    vec3 rd = normalize(vec3(uv.x*uu + uv.y*vv + 1.0*ww));\n\n    vec3 col = vec3(0.0);\n\n    float t = cast_ray(ro, rd);\n    if (t < inf - 1.) {\n        vec3 p = ro + t * rd;\n        vec3 norm = calc_normal(p);\n\n        vec3 c = vec3(1.0);\n\n        vec3  sun1_dir = normalize(vec3(1.0, 2.0, 3.0));\n        float sun1_dif = clamp(dot(norm, sun1_dir), 0.0, 1.0);\n        float sun1_sha = step(inf - 1.0, cast_ray(p, sun1_dir));\n\n        vec3  sun2_dir = normalize(vec3(-1.0, 2.0, -3.0));\n        float sun2_dif = clamp(dot(norm, sun2_dir), 0.0, 1.0);\n        float sun2_sha = step(inf - 1.0, cast_ray(p, sun2_dir));\n\n        col = c * clamp(0.6 * (sun1_sha * sun1_dif + sun2_sha * sun2_dif), 0.05, 0.90);\n    }\n    col = pow(col, vec3(0.4545));\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}