{
    "Shader": {
        "info": {
            "date": "1493322930",
            "description": "Recreation inspired by first visual effect from animation compilation video put together by Synesthetic Technologies:\nhttps://www.facebook.com/synesthetictechnologies/videos/1421075911246820/",
            "flags": 96,
            "hasliked": 0,
            "id": "4d2yRt",
            "likes": 53,
            "name": "SynTech 001",
            "published": 3,
            "tags": [
                "vfx",
                "psy",
                "trance",
                "shadereveryday",
                "syntech",
                "synesthetictechnologies",
                "psytrance",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "KK",
            "viewed": 6851
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = vec2(.02);\n    d.x *= iResolution.y/iResolution.x;\n    \n    vec3 col = texture( iChannel0, p ).xyz*1., sum=vec3(0);\n    for(int i=-20;i<=20;i++)\n    {\n        float s = 1./(1.+float(i*i));\n        float l = 100.;log2(iResolution.y);\n        sum += textureLod( iChannel1, p + d*float(i), l ).xyz*s;\n        sum += textureLod( iChannel1, p + d*vec2(1,-1)*float(i), l ).xyz*s;\n        sum += textureLod( iChannel1, p + d*vec2(1,0)*float(i), l ).xyz*s;\n        sum += textureLod( iChannel1, p + d*vec2(0,1)*float(i), l ).xyz*s;\n    }\n    col += sum/2.5;\n    col = col/(1.+col);\n    col = sqrt(col);\n    col = smoothstep(vec3(0.),vec3(1.),col);\n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 8298,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ajna-goa/ajna-search-of-the-divine"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define add(a,b)\tmin((a),(b))\n#define com(a,b)\tmax((a),(b))\n#define neg(a)\t\t(-(a))\n#define sub(a,b)\tcom((a),neg(b))\n#define inf(a,v)\t((a)+(v))\n\n#define pi2\t\t\t(2.*3.141593)\n#define R(plane,a)\t(plane=vec2(cos((a)*pi2)*plane.x+sin((a)*pi2)*plane.y,cos((a)*pi2)*plane.y-sin((a)*pi2)*plane.x))\n\n#define pmod(a,b)\t( mod(mod((a),(b))+(b),(b)) )\n#define rep(a,r)\t( pmod(((a)+(r)*.5),(r))-(r)*.5 )\n\n#define repx(a,r)\tvec3( rep((a).x,(r)), (a).yz )\n#define repy(a,r)\tvec3( (a).x, rep((a).y,(r)), (a).z )\n#define repz(a,r)\tvec3( (a).xy,rep((a).z,(r)) )\n#define repxy(a,r)\tvec3( rep((a).xy,(r)), (a).z )\n#define repyz(a,r)\tvec3( (a).x, rep((a).yz,(r)) )\n#define repxz(a,r)\tvec3( rep((a).x,(r)), (a).y, rep((a).z,(r)) )\n\n\nvec2 s2v(vec2 s)\n{\n    return s/64.;\n}\n\nvec2 v2s(vec2 v)\n{\n    return v*64.;\n}\n\nfloat rnd(float x)\n{\n    x *= 100.;\n    return cos(x*cos(x*100.));\n}\n\nvec4 getlight(float n)\n{\n    float sund = mod(iTime*30.+60.,120.) - 60. + 120.*n;\n    float fall = smoothstep(0.,1.,(sund+30.)/20.);\n    fall *= clamp((180.-sund)/20.,0.,1.);\n\treturn vec4(sund,-sin(sund/10.)*3.,0.,fall);\n}\n\nfloat trivalue(vec2 p)\n{\n    float d =length(vec2(0,0)-p);\n    d = cos(d*4.+iTime*.5*0.)*.5+.5;\n    d += cos(p.x/1.5)*.5;\n    return d*1.5;\n}\n\nfloat  trilattice(vec2 p)\n{\n    float flip = mod(p.y,2.);\n    p.x -= abs(flip-1.)*.5;\n    \n    flip = (flip<=1.) ? -1. : 1.;\n    \n    vec2 bary = p - floor(p);\n    bary.x = (bary.x-.5)*flip+.5;\n    \n    float side = -.5;\n    if(bary.x+bary.y>1.)\n    {\n        side = .5;\n        bary = 1.-bary.yx;\n    }\n    vec2 ip = floor(p);\n    vec2 t1 = ip + vec2(.5+side*flip,.5+side);\n    vec2 t2 = ip + vec2(.5+.5*flip,0);\n    vec2 t3 = ip + vec2(.5-.5*flip,1);\n    float v1 = trivalue(t1);\n    float v2 = trivalue(t2);\n    float v3 = trivalue(t3);\n    \n    return v1*(1.-bary.x-bary.y) + v2*bary.x + v3*bary.y;\n}\n\nfloat fn(vec3 pos)\n{\n    pos.y += sin(pos.x/10.)*3.;\n    float tt = iTime*148./60.;\n    tt = floor(tt) + pow(mod(tt,1.),4.);\n    float aa = atan(pos.y,pos.z)*(48./2./3.14159265) + tt*.4;\n    float z = 10. - trilattice(vec2(pos.x*1.5,aa)) -length(pos.yz);\n    return z;\n}\n\nfloat lfn(vec3 pos)\n{\n    float d = length(getlight(0.).xyz - pos);\n    d = min(d, length(getlight(1.).xyz - pos));\n    return d - .4;\n}\n\nfloat light(vec3 n,vec3 pos,vec3 eye,vec3 lpos)\n{\n    lpos.y += sin(lpos.x/10.)*3.;\n    vec3 ldir = normalize(lpos - pos);\n    float dd = length(lpos - pos);\n    \n    pos += n*.02;\n    vec3 spos = pos;\n    float d,sh=1.;\t\t\t// stopien zacienienia (1-pelne swiatlo, 0-czarno)\n    float dist = 0.001;\t\t// przebyty dystans\n    for(int i=0;i<30;i++)\n    {\n    \tvec3 tpos = pos + (lpos-pos)*(float(i)/100.);\n        d = fn(tpos);\n        dist += d;\n        sh=min(sh,d*20.);\n    }\n    vec3 eyeref = normalize(reflect(pos-eye,n));\n    float diff = clamp(dot(n,ldir),0.,1.);\n    float spec = pow(clamp(dot(eyeref,ldir),0.,1.),16.)*clamp(diff*20.,0.,1.);\n    float spec2 = pow(clamp(dot(eyeref,ldir),0.,1.),64.)*clamp(diff*20.,0.,1.);\n    float attn = 1./(dd*dd);\n    \n    return (diff*.1 + spec*2. + spec2*15./pow(attn,.15))*sh*attn*100.;\n}\n\nfloat plight(vec3 n,vec3 rpos,vec3 eye,float nl)\n{\n    vec4 ld = getlight(nl);\n\treturn light(n,rpos,eye,ld.xyz)*ld.w;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 mpos = vec2(-.05,0.6);\t//iMouse.xy / iResolution.xy*2. - 1.;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 vpos = uv*2.-1.;\n\tvpos.x *= iResolution.x/iResolution.y;\n\tvpos *= .65;\n\n    float t = iTime;\n//\tvec3 front = normalize(vec3(sin(t),cos(t),0));\n\tvec3 front = normalize(vec3(1.,mpos.x,mpos.y-.5));\n\tvec3 up = vec3(0,0,1);\n\tvec3 right = cross(up,front);\n\tvec3 pos = vec3(0.,0.,-2.)-front*12.0;\n    \n\tvec3 rdir = normalize(front + vpos.x*right + vpos.y*up);\n    \n    vec3 rpos = pos;\n    float d, d1, type;\n    \n    for(int i=0;i<100;i++)\n    {\n        d = fn(rpos)*.5;\n        d1 = lfn(rpos);\n        d = min(d,d1);\n        type = (d<d1) ? 0. : 1.;\n        rpos += d*rdir;\n        if(d<0.02) break;\n    } \n    \n    if( d>0.05 )\n    {\n        // pustkosc\n    \tfragColor = vec4(0);//vec4(.5,.8,.9,0.)*(pow(1.-abs(rdir.z),1.5));\n    }\n    else if(type >= .5 )\n    {\n    \tfragColor = vec4(1.);\n    }\n    else\n    {\n        vec2 e = vec2(0.01,0.);\t// delta (epsilon)\n        \n        vec3 n = normalize(vec3(\n            fn(vec3(rpos.x+e.x, rpos.y, rpos.z)) - fn(vec3(rpos.x-e.x, rpos.y, rpos.z)),\n            fn(vec3(rpos.x, rpos.y+e.x, rpos.z)) - fn(vec3(rpos.x, rpos.y-e.x, rpos.z)),\n            fn(vec3(rpos.x, rpos.y, rpos.z+e.x)) - fn(vec3(rpos.x, rpos.y, rpos.z-e.x))));\n        \n        vec3 col = vec3(0.);\n        col += plight(n,rpos,pos,0.);\n        col += plight(n,rpos,pos,1.);\n        //col += plight(n,rpos,pos,sund+120.);\n        col *= vec3(.1,1.0,.8);\n        //col += (1.-col)*(n.z*.5+.5)*vec3(.1,.4,.6)*.01;\t// sky light; *(1-col) - soft swiatlo\n        \n    \tfragColor = vec4(clamp(col,0.,1.),0.);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = vec2(.003);\n    d.x *= iResolution.y/iResolution.x;\n\n    vec4 sum=vec4(0);\n    for(int i=-10;i<=10;i++)\n    {\n        float s = exp(-0.05*float(i*i));\n        float l = 100.;\n        sum += vec4(textureLod( iChannel0, p + d*vec2(i,0), l ).xyz,1)*s;\n    }\n    fragColor = vec4( sum.xyz/sum.w, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec2 d = vec2(.003);\n    d.x *= iResolution.y/iResolution.x;\n\n    vec4 sum=vec4(0);\n    for(int i=-10;i<=10;i++)\n    {\n        float s = exp(-0.05*float(i*i));\n        float l = 100.;\n        sum += vec4(textureLod( iChannel0, p + d*vec2(0,i), l ).xyz,1)*s;\n    }\n    fragColor = vec4( sum.xyz/sum.w, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}