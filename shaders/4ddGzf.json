{
    "Shader": {
        "info": {
            "date": "1451912281",
            "description": "Simple truchet diagonal pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ddGzf",
            "likes": 10,
            "name": "Truchet Tiles, Diagonal",
            "published": 3,
            "tags": [
                "truchet",
                "diagonal"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 833
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2016\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define EPS  .01\n#define ZOOM 10.\n#define WGHT 9. * EPS\n\nfloat hash(vec2 p)\n{\n    return fract(sin(dot(p,vec2(127.1,311.7))) * 43758.5453123);\n}\n\nfloat df_line(in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nfloat sharpen(in float d, in float w)\n{\n    float e = 1. / min(iResolution.y , iResolution.x);\n    return 1. - smoothstep(-e, e, d - w);\n}\n\nfloat df_pattern(vec2 st, vec2 uv)\n{\n    return sharpen(df_line(uv, vec2(0), vec2(1)), WGHT);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy * 2. - 1.) * ZOOM;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 st = floor(uv);\n    uv = fract(uv);\n \n    if (hash(st * floor(iTime+1.0))>.7) uv.x = 1. - uv.x;    \n    vec3 col = vec3(df_pattern(st, uv));    \n\tfragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}