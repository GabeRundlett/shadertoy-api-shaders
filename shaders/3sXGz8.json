{
    "Shader": {
        "info": {
            "date": "1544817743",
            "description": "Reasonably fast multipass median filter.\nLeft part of the screen shows the original image, right part shows the filtered result.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "3sXGz8",
            "likes": 4,
            "name": "Multipass Median",
            "published": 3,
            "tags": [
                "noise",
                "median"
            ],
            "usePreview": 0,
            "username": "Blokatt",
            "viewed": 932
        },
        "renderpass": [
            {
                "code": "/*\nSimple Multipass Median (3x3) 1.1\nBy Blokatt\n14/12/18\n\n1.1 (17/12/18):\n- Now sorting using a sort network\n- http://pages.ripco.net/~jgamble/nw.html\n*/\n\nvec3 baseImage(in vec2 uv){\n\treturn texture(iChannel1, uv).rgb * (step(NOISE_THRESHOLD, 1. - texture(iChannel2, vec2(uv.x * iResolution.x / iResolution.y + sin(iTime * 7.) * 50., uv.y + cos(iTime * 11.) * 50.) * (iResolution.x / 350.)).rrr));\n}\n\nvec3 median(in vec2 uv){\n\tvec2 pixel = 1. / iResolution.xy;\n    vec4 o = vec4(pixel.x, 0., pixel.y, -pixel.y); \n    vec3 n[9];\n    n[0] = texture(iChannel0, uv - o.xz).rgb;  \n    n[1] = texture(iChannel0, uv - o.yz).rgb;\n    n[2] = texture(iChannel0, uv + o.xw).rgb;\n    n[3] = texture(iChannel0, uv - o.xy).rgb;\n    n[4] = texture(iChannel0, uv + o.xy).rgb;\n    n[5] = texture(iChannel0, uv - o.xw).rgb;\n    n[6] = texture(iChannel0, uv + o.yz).rgb;\n    n[7] = texture(iChannel0, uv + o.xz).rgb;     \n    n[8] = texture(iChannel0, uv).rgb;  \n    return medianSub(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    fragColor = vec4((uv.x < .5) ? baseImage(uv) : median(uv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 baseImage(in vec2 uv){\n\treturn texture(iChannel0, uv).rgb * (step(NOISE_THRESHOLD, 1. - texture(iChannel1, vec2(uv.x * iResolution.x / iResolution.y + sin(iTime * 7.) * 50., uv.y + cos(iTime * 11.) * 50.) * (iResolution.x / 350.)).rrr));\n}\n\nvec3 median(in vec2 uv){\n\tvec2 pixel = 1. / iResolution.xy;\n    vec4 o = vec4(pixel.x, 0., pixel.y, -pixel.y); \n    vec3 n[9];\n    n[0] = baseImage(uv - o.xz);  \n    n[1] = baseImage(uv - o.yz);\n    n[2] = baseImage(uv + o.xw);\n    n[3] = baseImage(uv - o.xy);\n    n[4] = baseImage(uv + o.xy);\n    n[5] = baseImage(uv - o.xw);\n    n[6] = baseImage(uv + o.yz);\n    n[7] = baseImage(uv + o.xz);     \n    n[8] = baseImage(uv);  \n    return medianSub(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    fragColor = vec4(median(uv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 median(in vec2 uv){\n\tvec2 pixel = 1. / iResolution.xy;\n    vec4 o = vec4(pixel.x, 0., pixel.y, -pixel.y); \n    vec3 n[9];\n    n[0] = texture(iChannel0, uv - o.xz).rgb;  \n    n[1] = texture(iChannel0, uv - o.yz).rgb;\n    n[2] = texture(iChannel0, uv + o.xw).rgb;\n    n[3] = texture(iChannel0, uv - o.xy).rgb;\n    n[4] = texture(iChannel0, uv + o.xy).rgb;\n    n[5] = texture(iChannel0, uv - o.xw).rgb;\n    n[6] = texture(iChannel0, uv + o.yz).rgb;\n    n[7] = texture(iChannel0, uv + o.xz).rgb;     \n    n[8] = texture(iChannel0, uv).rgb;  \n    return medianSub(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    fragColor = vec4(median(uv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 median(in vec2 uv){\n\tvec2 pixel = 1. / iResolution.xy;\n    vec4 o = vec4(pixel.x, 0., pixel.y, -pixel.y); \n    vec3 n[9];\n    n[0] = texture(iChannel0, uv - o.xz).rgb;  \n    n[1] = texture(iChannel0, uv - o.yz).rgb;\n    n[2] = texture(iChannel0, uv + o.xw).rgb;\n    n[3] = texture(iChannel0, uv - o.xy).rgb;\n    n[4] = texture(iChannel0, uv + o.xy).rgb;\n    n[5] = texture(iChannel0, uv - o.xw).rgb;\n    n[6] = texture(iChannel0, uv + o.yz).rgb;\n    n[7] = texture(iChannel0, uv + o.xz).rgb;     \n    n[8] = texture(iChannel0, uv).rgb;  \n    return medianSub(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    fragColor = vec4(median(uv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 median(in vec2 uv){\n\tvec2 pixel = 1. / iResolution.xy;\n    vec4 o = vec4(pixel.x, 0., pixel.y, -pixel.y); \n    vec3 n[9];\n    n[0] = texture(iChannel0, uv - o.xz).rgb;  \n    n[1] = texture(iChannel0, uv - o.yz).rgb;\n    n[2] = texture(iChannel0, uv + o.xw).rgb;\n    n[3] = texture(iChannel0, uv - o.xy).rgb;\n    n[4] = texture(iChannel0, uv + o.xy).rgb;\n    n[5] = texture(iChannel0, uv - o.xw).rgb;\n    n[6] = texture(iChannel0, uv + o.yz).rgb;\n    n[7] = texture(iChannel0, uv + o.xz).rgb;     \n    n[8] = texture(iChannel0, uv).rgb;  \n    return medianSub(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    fragColor = vec4(median(uv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define NOISE_THRESHOLD .32\n#define comp(a, b, c) (v[a].c > v[b].c)\n#define swap(a, b, c) temp = v[b].c; v[b].c = v[a].c; v[a].c = temp;\n#define cmpswap(x, y) if (comp(x, y, r)){ swap(x, y, r)}; if (comp(x, y, g)){ swap(x, y, g)}; if (comp(x, y, b)){ swap(x, y, b)};\n\nvec3 medianSub(in vec3[9] v){\n    float temp;  \n        \n    cmpswap(0, 1); \n    cmpswap(3, 4); \n    cmpswap(6, 7); \n    \n    cmpswap(1, 2); \n    cmpswap(4, 5); \n    cmpswap(7, 8); \n    \n    cmpswap(0, 1); \n    cmpswap(3, 4); \n    cmpswap(6, 7); \n    cmpswap(2, 5); \n    \n    cmpswap(0, 3); \n    cmpswap(1, 4); \n    cmpswap(5, 8); \n    \n    cmpswap(3, 6); \n    cmpswap(4, 7); \n    cmpswap(2, 5); \n    \n    cmpswap(0, 3); \n    cmpswap(1, 4); \n    cmpswap(5, 7); \n    cmpswap(2, 6); \n    \n    cmpswap(1, 3); \n    cmpswap(4, 6); \n    \n    cmpswap(2, 4); \n    cmpswap(5, 6); \n    \n    cmpswap(2, 3); \n    \n    return (v[4]);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}