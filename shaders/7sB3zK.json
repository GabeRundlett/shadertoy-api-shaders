{
    "Shader": {
        "info": {
            "date": "1617642202",
            "description": "Forked from @Xor: Recreated @aemkey's \"Tixy Land\" in ShaderToy. Try the original here: https://tixy.land\n\nI've changed only the Tixy-formula to mine: https://tixy.land/?code=%28x-7.5%2Bsin%28t%29*5%29**2%2B%28y-7.5%2Bcos%28t*1.7%29*5%29**2-8\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7sB3zK",
            "likes": 3,
            "name": "Tixy Land - Lissajous",
            "published": 3,
            "tags": [
                "golf",
                "tixyland"
            ],
            "usePreview": 0,
            "username": "ern0",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "// Forked from https://www.shadertoy.com/view/3dtBDN\n//   by https://www.shadertoy.com/user/Xor\n//\n// Formula by ern0\n//   (x-7.5+sin(t)*5)**2+(y-7.5+cos(t*1.7)*5)**2-8\n//   https://tixy.land/?code=%28x-7.5%2Bsin%28t%29*5%29**2%2B%28y-7.5%2Bcos%28t*1.7%29*5%29**2-8\n// \n\n//Recreated @aemkey's \"Tixy Land\" in ShaderToy using shader syntax.\n//Play around with the original here: https://tixy.land\n\n// You can fiddle with dot count here:\n#define count 32.\n// Change ball size:\n#define ballsize 24./count\n// Set border (should be auto):\n#define border count/8.\n\n#define area (count/2.-border)\n#define center ((count-1.)/2.)\n#define tixy(t,i,x,y) \\\n    (x-center+sin(t)*area) \\\n    *(x-center+sin(t)*area) \\\n    /(ballsize) \\\n    + \\\n    (y-center+cos(t*1.7)*area) \\\n    *(y-center+cos(t*1.7)*area) \\\n    /(ballsize) \\\n    - \\\n   (count/2.)\n\n//#define tixy(t,i,x,y) (x-7.5+sin(t)*5.)*(x-7.5+sin(t)*5.)+(y-7.5+cos(t*1.7)*5.)*(y-7.5+cos(t*1.7)*5.)-8.\n\n\n//Render with the result:\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    float s = 1.2/iResolution.y;\n    vec2 u = (coord-.5*iResolution.xy)*s;\n    u.y = -u.y;\n    \n    float square = step(abs(u.x),.5)*step(abs(u.y),.5);\n    vec2 cell = floor((u+.5)*count);\n    float index = cell.x+cell.y*count;\n    float tixel = float(tixy(iTime,index,cell.x,cell.y));\n    \n    float dist = length(fract(u*count)-.5)*count/.5;\n    float radius = count*min(abs(tixel),1.);\n    \n    vec3 col = tixel<0. ? vec3(255,34,68)/255. : vec3(1);\n    col *= clamp((radius-dist)/s/count/count/2.,0.,1.)*square;\n\n    color = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}