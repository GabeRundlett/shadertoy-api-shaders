{
    "Shader": {
        "info": {
            "date": "1679765499",
            "description": "A more expensive version of https://www.shadertoy.com/view/3d3yRj",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds3XD4",
            "likes": 18,
            "name": "Forked Water Caus 2D",
            "published": 3,
            "tags": [
                "noise",
                "water",
                "simplex",
                "simplexnoise",
                "caustic",
                "watercaustic"
            ],
            "usePreview": 0,
            "username": "Arternum",
            "viewed": 661
        },
        "renderpass": [
            {
                "code": "// Based on: https://www.shadertoy.com/view/3d3yRj\n// See also: KdotJPG's https://www.shadertoy.com/view/wlc3zr\n\nfloat water_caustics(vec3 pos) {\n    vec4 n = snoise( pos );\n\n    pos -= 0.07*n.xyz;\n    pos *= 1.62;\n    n = snoise( pos );\n\n    pos -= 0.07*n.xyz;\n    n = snoise( pos );\n\n    pos -= 0.07*n.xyz;\n    n = snoise( pos );\n    return n.w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n    \n    vec2 uv = fragCoord.xy/iResolution.xy*12.;\n    uv *= vec2(1, iResolution.y/iResolution.x);\n\n    float w = mix(water_caustics(vec3(uv, iTime*0.75)), water_caustics(vec3(uv, iTime*0.75) + 1.), 0.5);\n\n    // noise [-1..+1] -> color\n    float intensity = exp(w*3. - 0.5);\n    /*vec3 col = vec3(0.65, 0.72, 0.8);\n    vec3 col = vec3(0.85, 0.9, 1.0);*/\n\tfragColor = vec4(mix(vec3(0.65, 0.74, 0.85), vec3(0.86, 0.94, 1.0), intensity), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 3D simplex noise adapted from https://www.shadertoy.com/view/Ws23RD\n// * Removed gradient normalization\n\nvec4 mod289(vec4 x)\n{\n    return x - floor(x / 289.0) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n    return mod289((x * 34.0 + 1.0) * x);\n}\n\nvec4 snoise(vec3 v)\n{\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, vec3(C.y)));\n    vec3 x0 = v   - i + dot(i, vec3(C.x));\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + C.x;\n    vec3 x2 = x0 - i2 + C.y;\n    vec3 x3 = x0 - 0.5;\n\n    // Permutations\n    vec4 p =\n      permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0))\n                            + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n                            + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    vec4 j = p - 49.0 * floor(p / 49.0);  // mod(p,7*7)\n\n    vec4 x_ = floor(j / 7.0);\n    vec4 y_ = floor(j - 7.0 * x_); \n\n    vec4 x = (x_ * 2.0 + 0.5) / 7.0 - 1.0;\n    vec4 y = (y_ * 2.0 + 0.5) / 7.0 - 1.0;\n\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 g0 = vec3(a0.xy, h.x);\n    vec3 g1 = vec3(a0.zw, h.y);\n    vec3 g2 = vec3(a1.xy, h.z);\n    vec3 g3 = vec3(a1.zw, h.w);\n\n    // Compute noise and gradient at P\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    vec4 m2 = m * m;\n    vec4 m3 = m2 * m;\n    vec4 m4 = m2 * m2;\n    vec3 grad =\n      -6.0 * m3.x * x0 * dot(x0, g0) + m4.x * g0 +\n      -6.0 * m3.y * x1 * dot(x1, g1) + m4.y * g1 +\n      -6.0 * m3.z * x2 * dot(x2, g2) + m4.z * g2 +\n      -6.0 * m3.w * x3 * dot(x3, g3) + m4.w * g3;\n    vec4 px = vec4(dot(x0, g0), dot(x1, g1), dot(x2, g2), dot(x3, g3));\n    return 42.0 * vec4(grad, dot(m4, px));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}