{
    "Shader": {
        "info": {
            "date": "1491869536",
            "description": "discontinuous floored displacements of an sdf. low coefficients can create a nice effect, but naturally creates artifacts.\nbase raymarching code from iq.\npModPolar and fOctahedron from Mercury's hg_sdf library.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdlcWf",
            "likes": 75,
            "name": "position offsetting",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "macbooktall",
            "viewed": 5144
        },
        "renderpass": [
            {
                "code": "//  hg_sdf by MERCURY http://mercury.sexy\n// \tReleased as Creative Commons Attribution-NonCommercial (CC BY-NC)\n\n#define PI 3.14159265\n#define TAU (2*PI)\n#define PHI (1.618033988749895)\n\n#define GDFVector3 normalize(vec3(1, 1, 1 ))\n#define GDFVector4 normalize(vec3(-1, 1, 1))\n#define GDFVector5 normalize(vec3(1, -1, 1))\n#define GDFVector6 normalize(vec3(1, 1, -1))\n\n#define fGDFBegin float d = 0.;\n\n// Version with variable exponent.\n// This is slow and does not produce correct distances, but allows for bulging of objects.\n#define fGDFExp(v) d += pow(abs(dot(p, v)), e);\n\n// Version with without exponent, creates objects with sharp edges and flat faces\n#define fGDF(v) d = max(d, abs(dot(p, v)));\n\n#define fGDFExpEnd return pow(d, 1./e) - r;\n#define fGDFEnd return d - r;\n\nfloat fOctahedron(vec3 p, float r) {\nfGDFBegin\n    fGDF(GDFVector3) fGDF(GDFVector4) fGDF(GDFVector5) fGDF(GDFVector6)\n    fGDFEnd\n}\n\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n    float angle = 2.*PI/repetitions;\n    float a = atan(p.y, p.x) + angle/2.;\n    float r = length(p);\n    float c = floor(a/angle);\n    a = mod(a,angle) - angle/2.;\n    p = vec2(cos(a), sin(a))*r;\n    // For an odd number of repetitions, fix cell index of the cell in -x direction\n    // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n    if (abs(c) >= (repetitions/2.)) c = abs(c);\n    return c;\n}\n\n////////////////////////////////////////////////////////////////\n// The end of HG_SDF library\n////////////////////////////////////////////////////////////////\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d2,d1);\n}\n\nfloat roomWidth = .5;\n\nvec2 map( in vec3 pos ){\n  \tfloat rep = 4.;\n\tvec3 p = pos;\n\n    vec2 idx = floor((abs(pos.xz)) / 0.2)*0.5;\n\n    float clock = iTime*4.;\n    float phase = (idx.y+idx.x);\n\n    float anim = sin(phase + clock);\n\n    float i = pModPolar(pos.xz, rep);\n    pos.x -= .75 + anim*0.1;\n\n    float dist = fOctahedron(pos,roomWidth*.6);\n\n    dist = opU(dist, fOctahedron(p, roomWidth*1.25 + anim*0.05));\n                           \n    vec2 res = vec2(dist, 0.);\n\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.0;\n    float tmax = 60.0;\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<60; i++ )\n    {\n   \t\tvec2 res = map( ro+rd*t );\n        if(  t>tmax ) break;\n        t += res.x;\n    \tm = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    \n    for( int i=0; i<20; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0., 0.1 );\n        if(t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.01, 0.0, 0.0 );\n\tvec3 nor = vec3(\n   map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n   map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n   map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + .15*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= .95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(1.);\n    vec2 res = castRay(ro,rd);\n    const vec3 a = vec3(1., 1., 1.);\n    const vec3 b = vec3(1., .0, .3);\n    const vec3 c = vec3(0.2, 0., 0.5);\n    const vec3 d = vec3(.8,.2,.2);\n        \n    if (res.x > 6.) return palette(.3,a,b,c,d);\n    \n    vec3 pos = ro + res.x*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 ref = reflect( rd, nor );\n\n   \tfloat occ = calcAO( pos, nor );\n    float dom = smoothstep( -0.6, 20.6, ref.y );\n\n    dom *= softshadow( pos, ref, .9, .15 );\n\n    col = palette(3.+res.x*.1,a,b,c,d)*occ*length(ref)*(1.+dom);\n    col = mix( col, vec3(.0), max(1.0-exp( -0.05*res.x ),clamp(res.x*0.1,0.,1.)) );\n\n    return vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n\n\tvec3 ro = vec3(-3., roomWidth*3., 1.5 + cos(iTime*2.)*0.3 );\n  \tvec3 ta = vec3(0.,.0,.0);\n    mat3 ca = setCamera( ro, ta, 0. );\n\tvec3 rd = ca * normalize(vec3(p.xy,2.));\n    vec3 col = render( ro, rd );\n\tcol = pow(col, vec3(1.5));\n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}