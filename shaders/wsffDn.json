{
    "Shader": {
        "info": {
            "date": "1588017438",
            "description": "cospalette03",
            "flags": 0,
            "hasliked": 0,
            "id": "wsffDn",
            "likes": 1,
            "name": "cospalette03",
            "published": 3,
            "tags": [
                "cos"
            ],
            "usePreview": 0,
            "username": "paulobarcelos",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "const int FPS = 60;\nconst float DURATION = 7.5;\nconst int TOTAL_FRAMES = int(float(FPS) * DURATION);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float progress = float(iFrame % TOTAL_FRAMES) / float(TOTAL_FRAMES);\n    float osc1 = cos(progress * PI2);\n    vec2 uv = (fragCoord.xy / iResolution.xy) * (1.0 - osc1 * 0.1) + sin(progress * PI2 )* 0.05;\n    \n    vec3 c = cosPalette((snoise(uv) +  pow(uv.x, 4.0))  * (osc1 + 10.0),\n        vec3(0.6, 0.4, 0.3),\n        vec3(2.0, 0.4, 0.3),\n        vec3(0.2, 0.4, 0.5),\n        vec3(0.2, 0.2, osc1)\n    );\n    fragColor = vec4(pow(c, vec3(10.0,0.9,1.0)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159;\nfloat PI2 = 6.28318;\n\nvec3 black = vec3(0.0);\nvec3 white = vec3(1.0);\nvec3 red = vec3(0.86,0.22,0.27);   \nvec3 orange = vec3(0.92,0.49,0.07);\nvec3 yellow = vec3(0.91,0.89,0.26);\nvec3 green = vec3(0.0,0.71,0.31);\nvec3 blue = vec3(0.05,0.35,0.65);\nvec3 purple = vec3(0.38,0.09,0.64);\nvec3 pink = vec3(.9,0.758,0.798);\nvec3 lime = vec3(0.361,0.969,0.282);\nvec3 teal = vec3(0.396,0.878,0.878);\nvec3 magenta = vec3(1.0, 0.189, 0.745);\nvec3 brown = vec3(0.96, 0.474, 0.227);\n\n\n\nfloat kale(vec2 p, float n) {\n  return abs(mod(atan(p.x, p.y), n) - n * .5);\n}\n\nfloat box(vec2 p,vec2 b,float r,float f) {\n    return smoothstep(f, 0.0, length(max(abs(p)-b,0.0))-r);\n}\n\n\n\nvec2 rotate(vec2 space, vec2 center, float amount){\n    return vec2(cos(amount) * (space.x - center.x) + sin(amount) * (space.y - center.y),\n        cos(amount) * (space.y - center.y) - sin(amount) * (space.x - center.x));\n}\n\nvec2 mod289(vec2 x) { return x - floor(x * (1.0/289.0)) * 289.0; }\nvec3 mod289(vec3 x) { return x - floor(x * (1.0/289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nconst mat2 myt = mat2(.12121212,.13131313,-.13131313,.12121212);\nconst vec2 mys = vec2(1e4, 1e6);\nvec2 rhash(vec2 uv) {\n    uv *= myt;\n    uv *= mys;\n    return  fract(fract(uv/mys)*uv);\n}\nvec3 hash( vec3 p ){\n    return fract(sin(vec3( dot(p,vec3(1.0,57.0,113.0)), \n                           dot(p,vec3(57.0,113.0,1.0)),\n                           dot(p,vec3(113.0,1.0,57.0))))*43758.5453);\n\n}\n\nfloat rand(const in float n){return fract(sin(n) * 1e4);}\nfloat rand(const in vec2 n) { return fract(1e4 * sin(17.0 * n.x + n.y * 0.1) * (0.1 + abs(sin(n.y * 13.0 + n.x))));\n}\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(rand(i), rand(i + 1.0), u);\n}\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( rand(n + dot(step, vec3(0, 0, 0))), rand(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( rand(n + dot(step, vec3(0, 1, 0))), rand(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( rand(n + dot(step, vec3(0, 0, 1))), rand(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( rand(n + dot(step, vec3(0, 1, 1))), rand(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\nconst vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\nfloat snoise(vec2 v){\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m;\n    m = m*m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nconst vec2  CC = vec2(1.0/6.0, 1.0/3.0) ;\nconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\nfloat snoise(vec3 v){ \n\n  vec3 i  = floor(v + dot(v, CC.yyy) );\n  vec3 x0 =   v - i + dot(i, CC.xxx) ;\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + 1.0 * CC.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * CC.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * CC.xxx;\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat voronoi(const in vec2 point )\n{\n    vec2 p = floor( point );\n    vec2 f = fract( point );\n    float res = 0.0;\n    for( int j=-1; j<=1; j++ ) {\n        for( int i=-1; i<=1; i++ ) {\n            vec2 b = vec2( i, j );\n            vec2 r = vec2( b ) - f + rhash( p + b);\n            res += 1./pow(dot(r,r),8.);\n        }\n    }\n    return pow(1./res, 0.0625);\n}\n\nvec3 voronoi( const in vec3 x ) {\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n    float id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ ) {\n        for( int j=-1; j<=1; j++ ) {\n            for( int i=-1; i<=1; i++ ) {\n                vec3 b = vec3( float(i), float(j), float(k) );\n                vec3 r = vec3( b ) - f + hash( p + b );\n                float d = dot( r, r );\n\n                float cond = max(sign(res.x - d), 0.0);\n                float nCond = 1.0 - cond;\n\n                float cond2 = nCond * max(sign(res.y - d), 0.0);\n                float nCond2 = 1.0 - cond2;\n\n                id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n                res = vec2(d, res.x) * cond + res * nCond;\n\n                res.y = cond2 * d + nCond2 * res.y;\n            }\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n//brownian\nfloat fbm(float x, const in int it) {\n    float v = 0.0;\n    float a = 0.5;\n    float shift = float(100);\n    for (int i = 0; i < 32; ++i) {\n        if(i<it) {\n            v += a * noise(x);\n            x = x * 2.0 + shift;\n            a *= 0.5;\n        }\n    }\n    return v;\n}\n\nfloat fbm(vec2 x, const in int it) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n    for (int i = 0; i < 32; ++i) {\n        if(i<it) {\n            v += a * noise(x);\n            x = rot * x * 2.0 + shift;\n            a *= 0.5;\n        }\n    }\n    return v;\n}\n\nfloat fbm(vec3 x, const in int it) {\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100);\n    for (int i = 0; i < 32; ++i) {\n        if(i<it) {\n            v += a * noise(x);\n            x = x * 2.0 + shift;\n            a *= 0.5;\n        }\n    }\n    return v;\n}\n\n//ridged multifractal\nfloat rmf(vec2 uv, const in int it) {\n    float l = 2.;\n    float r = 0.;\n    float a = 0.5;\n    float f = 1.0;\n    for(int i = 0; i < 32; i++) {\n        if(i<it) {\n            uv = uv.yx * l;\n            float n = noise(uv);     \n            n = abs(fract(n-.5)-.5);\n            n *= n * a;\n            a = clamp(0.,1., n*2.);\n            r += n*pow(f, -1.);\n            f *= l;\n        }\n    }\n    return r*2.;\n}\n\n//voronoi fbm\nfloat vfbm(const in vec2 uv, const in int it) {\n    float n = 0.;\n    float a = 0.5;\n    float f = 1.0;\n    for(int i = 0; i < 32; i++) {\n        if(i<it) {\n            n += voronoi(uv*f)*a;\n            f *= 2.;\n            a *= .5;\n        }\n    }\n    return n;\n}\n\n//ridged multifractal\nfloat vrmf(vec2 uv, const in int it) {\n    float l = 2.;\n    float r = 0.;\n    float a = 0.5;\n    float f = 1.0;\n    for(int i = 0; i < 32; i++) {\n        if(i<it) {\n            uv = uv.yx * l;\n            float n = voronoi(uv);     \n            n = abs(fract(n-.5)-.5);\n            n *= n * a;\n            a = clamp(0.,1., n*2.);\n            r += n*pow(f, -1.);\n            f *= l;\n        }\n    }\n    return r*2.;\n}\n\nconst vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// https://iquilezles.org/articles/palettes\n// As t runs from 0 to 1 (our normalized palette index or domain), \n//the cosine oscilates c times with a phase of d. \n//The result is scaled and biased by a and b to meet the desired constrast and brightness.\nvec3 cosPalette( float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}