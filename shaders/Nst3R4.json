{
    "Shader": {
        "info": {
            "date": "1629257212",
            "description": "This shader generates random patterns that resemble Persian rugs.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nst3R4",
            "likes": 5,
            "name": "Persian rug patterns",
            "published": 3,
            "tags": [
                "fractal",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "//change these constants to get different patterns!\n#define c2 0.0\n\n#define c1 vec4(3.0+c2,2.5+c2,1.45,0)\n//#define c1 vec4(2.0+c2,1.5+c2,1.4,0)\n//#define c1 vec4(1.0,1.5,1.4,0)\n//#define c1 vec4(7.0,5.0,1.4,0)\n//#define c1 vec4(7.0,9.0,1.4,0)\n//#define c1 vec4(5.0,5.5,1.4,0)\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n    //from David Hoskin's \"Hash without sine\"\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    \n\n    \n    vec3 col;  \n    float t1 = 3.;\n\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    float t2 = floor((iTime)/10.0+uv.x);\n    vec3 random1 = hash31(t2)*10.;\n    //vec3 random2 = hash31(1.+floor((iTime)/10.0+uv.x));\n    vec3 random3 = (hash31(2.+t2)-vec3(.5))/4.;\n    vec3 random4 = (hash31(3.+t2)-vec3(.5))/4.;\n    \n    float offset = .16+random4.z*.04;\n    float scale2 = 1.16+.04*random4.y;\n    for(int c=0;c<3;c++){\n        float scale = c1.z;\n        float scale1 = 1.0;\n        for(int i=0;i<3;i++)\n        {\n            uv = triangle_wave(uv+offset,scale)+triangle_wave(uv.yx,scale);\n            //uv.x *= -1.0;\n\n            uv = triangle_wave((uv+random1.x)/(random4.y*.0+1.),scale+random3.z);\n            //uv.x /= -1.0;\n            \n            uv = triangle_wave(uv+random1.y,scale+random3.y);\n            //uv.x *= -1.0;\n            \n            uv = triangle_wave((uv+random1.z)*(random4.y*.0+1.),scale+random3.z);\n            //if(uv.x > uv.y) uv /= scale;\n\n            uv.x /= -1.0;\n            \n            \n            //uv.x *= -1.0;\n            //uv = triangle_wave(uv+c1.y,scale);\n            scale /= scale2+col.x;\n            offset *= scale2/(1.+random4.x);\n            \n            //uv = uv.yx;\n            //uv = uv.yx;\n            scale2 += col.x/3.;\n\n        }\n     col[c] = fract((uv.x)-(uv.y));\n\t}\n    \n    fragColor = vec4(vec3(col),1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}