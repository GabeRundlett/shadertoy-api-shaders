{
    "Shader": {
        "info": {
            "date": "1678390388",
            "description": "Idea was to have lots of houses you could see the inside of when entering but I spent an unholy amount of time making a lever instead, I might add more stuff if I revisit this :)\n\nPress:\nWASD to move\nE to interact\nSpace to draw\nR to reset",
            "flags": 112,
            "hasliked": 0,
            "id": "dsG3Dz",
            "likes": 16,
            "name": "Mr Blob's Adventure #1",
            "published": 3,
            "tags": [
                "distancefield",
                "game",
                "interactive",
                "buffer"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "#define ss(a) smoothstep(-1., 1., a)\n\n#define outlineCol vec3(1)\n#define bodyCol vec3(0)\n\nvec3 bg(vec2 px, vec2 n, vec4 txP, vec4 txP3, vec4 txL) {\n    float smoothZ = smoothstep(0., 1., txL.z);\n    vec2 p = mix(0.5 * res, txP.xy, smoothZ);\n    vec2 uv = (px - p) / res.y;\n\n    float zm = mix(0.2, 0.8, 1.-smoothZ);\n    uv /= sqrt(abs(zm - dot(uv,uv)));\n    float xp0 = exp(-0.2*dot(uv,uv));\n    uv += 0.02*t;\n    uv += 0.0025 * txP3.xy * (2.*smoothZ-1.);\n    float sc = 10.;// * txL.x;\n    vec2 fpos = fract(sc * uv) - 0.5;\n    float d = length(fpos.x + 0.25*cos(sc * uv.y));\n    float s = smoothstep(-sc/res.y,sc/res.y, 0.2 -d);\n    float xp = exp(-0.5*d);\n    vec3 col = vec3(.6+.4*s) * xp * xp0 * texture(ch1, uv).rgb;\n    return col;\n}\n\nvoid drawPerson(vec2 px, inout vec3 col, vec4 txP, vec4 txP2) {\n    // Acceleration direction (normalized)\n    vec2 acc = txP2.xy; \n    \n    // Length of acceleration (lerped)\n    float la = 1.-exp(-dot(txP2.zw, txP2.zw));\n    \n    // Positions\n    vec2 pBody = txP.xy;\n    vec2 pHead = pBody + vec2(0, 1.1 * br);\n    vec2 pTarget = pHead + 0.16 * br * acc;\n    vec2 pFoot1 = pBody - vec2(.25*br+ .25*la*br*thc(5., 12.*t), 1.2*br);\n    vec2 pFoot2 = pBody - vec2(-.25*br-.25*la*br*thc(5., 12.*t), 1.2*br);\n    vec2 pHand1 = pBody - vec2(br, -.5*br+.25*la*br*ths(5.,12.*t));\n    vec2 pHand2 = pBody - vec2(-br, -.5*br+.25*la*br*ths(5.,12.*t));\n    \n    // Distances\n    float dBody = length(px - txP.xy) - br; \n    float dHead = length(px - pHead) - 0.64 * br;\n    float dTarget = length(px - pTarget) - 0.32 * br;\n    float dFoot1 = seg(px, pBody-vec2(.25*br,0), pFoot1) - 0.32 * br;\n    float dFoot2 = seg(px, pBody+vec2(.25*br,0), pFoot2) - 0.32 * br;\n    float dHand1 = seg(px, pBody, pHand1) - 0.32 * br;\n    float dHand2 = seg(px, pBody, pHand2) - 0.32 * br;    \n    float d = min(min(dFoot1, dFoot2), min(dBody, dHead));\n    d = min(d, min(dHand1, dHand2));\n    \n    // Smoothstep and color\n    float sOutline = ss(-d);\n    float sBody = ss(-2. - d);\n    float sTarget = ss(-dTarget);\n    col = mix(col, outlineCol, sOutline);\n    col = mix(col, bodyCol, sBody);\n    col = mix(col, outlineCol, sTarget);\n}\n\nvoid drawE(vec2 px, inout vec3 col, vec2 p, float fade) {\n    // Distances\n    vec2 b = vec2(br, 0);\n    p += vec2(0, 2. * br + 0.4 * br * cos(t));\n    float dEBot  = seg(px, p - .4*b, p + .4*b);\n    float dETop  = seg(px, p + b.yx - .4*b, p + b.yx + .4*b);\n    float dELeft = seg(px, p - .4*b, p + b.yx - .4*b);\n    float dEMid  = seg(px, p + .5*b.yx - .4*b, p + .5*b.yx);\n    float d = min(min(dELeft,dEMid), min(dEBot, dETop)) - 0.18 * br;        \n    \n    // Smoothstep and color\n    float sOutline = ss(-d);\n    float sBody = ss(-2. - d);\n    vec3 col2 = col;\n    col2 = mix(col2, outlineCol, sOutline);\n    col2 = mix(col2, bodyCol, sBody);\n    col = mix(col, col2, fade);\n}\n\nvoid drawLever(vec2 px, inout vec3 col, vec2 p, vec4 txL) {\n    float a = pi/4. + pi/2. - pi/2. * smoothstep(0.,1.,txL.z);\n    vec2 pBall = p + 1.5 * br * Dir(a);\n    \n    // Distances\n    float dBase = seg(px, p - vec2(br,0), p + vec2(br,0)) - .32 * br;\n    float dStick = seg(px, p, pBall) - .24 * br;\n    float dBall = length(px - pBall) - .40 * br;\n    float d = min(dBase, min(dStick, dBall)); \n    \n    // Smoothstep and color\n    float sOutline = ss(-d);\n    float sBody = ss(-2. - d);\n    col = mix(col, outlineCol, sOutline);\n    col = mix(col, bodyCol, sBody);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    vec2 uv = (px - 0.5 * res) / res.y;\n\n    vec4 txP  = cell(ch0, ivec2(0,0)); // player motion\n    vec4 txP2 = cell(ch0, ivec2(0,2)); // lerped acceleration\n    vec4 txP3 = cell(ch0, ivec2(0,3)); // distance travelled\n    vec4 txL  = cell(ch0, ivec2(1,0)); // lever state\n    \n    vec4 txB  = cell(ch2, ivec2(px));     // distances at pixel\n    vec4 txBP = cell(ch2, ivec2(txP.xy)); // distances at point txP.xy\n    \n    // vec2 n = norm(ch2, ivec2(txP.xy));\n    \n    // Wall boundaries\n    float sd = ss(2. - abs(txB.r));    \n    vec3 col = vec3(sd);\n    \n    drawLever(px, col, leverPos, txL); \n    drawE(px, col, leverPos, txL.y); \n    drawPerson(px, col, txP, txP2);\n      \n    float showMap = 1./cosh(0.015*length(px - txP.xy));  \n\n    float dark = mix(0.4, 1., txL.z); //messy\n    col = mix(dark*bg(px, txB.gb, txP, txP3, txL), col, showMap);\n    \n    float v = .5 + .5 * txB.a;\n    col *= 2. * mix(v, 1.-v, .5-.25*txBP.a);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 32610,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/sumthinsumthin/sumthinsumthinxplayerdave-narrow?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define spd 0.5\n\n// This buffer stores point info and object states\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    ivec2 ipx = ivec2(px);\n    \n    vec4 txP  = cell(ch0, ivec2(0,0)); // Player motion\n  //vec4 txP1 = cell(ch0, ivec2(0,1)); // Previous player motion\n  //vec4 txP2 = cell(ch0, ivec2(0,2)); // Player lerped acceleration\n  //vec4 txP3 = cell(ch0, ivec2(0,3)); // Total distance travelled\n  //vec4 txL  = cell(ch0, ivec2(1,0)); // Lever state\n    vec4 txIn = cell(ch0, ivec2(2,0)); // Input \n    vec4 txA  = cell(ch0, ipx);        // Current cell     \n    \n    vec4 txB  = cell(ch2, ipx); // Buffer B\n    vec4 txBP = cell(ch2, ivec2(txP.xy));\n    \n    // Initialize data on reset\n    if (iFrame < 1 || key_down(KEY_RESET)) {\n        txA = vec4(0);\n        \n        if (ipx == ivec2(0,0) || ipx == ivec2(0,1))        \n            txA.xy = floor(0.2 * res);        \n    }    \n    \n    // Player motion\n    if (ipx == ivec2(0, 0)) {\n        // Update velocity\n        txA.z += spd * (key_val(KEY_D) - key_val(KEY_A));\n        txA.w += spd * (key_val(KEY_W) - key_val(KEY_S));\n        txA.zw *= 0.92;\n        \n        // Old/New distance to buffer\n        float d0 = cell(ch2, ivec2(txA.xy)).r;          \n        float d1 = cell(ch2, ivec2(txA.xy + txA.zw)).r; \n        \n        // Normal\n        vec2 n = norm(ch2, ivec2(txA.xy));\n        \n        // If crossed boundary then push back\n        if (d0 > br && d1 < br) \n            txA.zw = -n * length(txA.zw);\n        \n        // Update position\n        txA.xy += txA.zw;               \n    } \n    \n    // Save old motion\n    else if (ipx == ivec2(0, 1)) \n        txA = txP;\n        \n    // Lerp acceleration\n    else if (ipx == ivec2(0, 2)) { \n        txA.zw = mix(txA.zw, txP.zw, 0.5);\n        if (dot(txA.zw, txA.zw) > 0.001)\n            txA.xy = normalize(txA.zw);\n    }\n    \n    // Total distance travelled\n    else if (ipx == ivec2(0, 3))\n        txA.xy += txP.zw;\n    \n    // Lever state\n    else if (ipx == ivec2(1, 0)) {    \n        // x stores on/off 0/1\n        // if player in lever box and E pressed, switch lever state\n        if (txBP.g == 1. && key_down(KEY_E) && txIn.x ==0.)\n            txA.x = 1. - txA.x;\n           \n        // y stores fade in/out for E symbol\n        txA.y += 0.02 * (2. * txBP.g - 1.);\n        \n        // z stores fade in/out since lever switched\n        txA.z += 0.02 * (2. * txA.x - 1.);\n        \n        txA.yz = clamp(txA.yz, 0., 1.);\n    }\n    \n    // Input state (E key)\n    else if (ipx == ivec2(2, 0)) {\n        // x: is key down, then reading from buffer gives previous val\n        txA.x = key_val(KEY_E);\n    }\n   \n   fragColor = txA;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 3.14159\n#define Dir(a) vec2(cos(a),sin(a))\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define mlength(a) max(abs((a).x), abs((a).y))\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n\n#define t iTime\n#define res iResolution.xy\n\n// Ball radius\n#define br 20.\n#define leverPos 0.5 * res\n//vec2(100., res.y - 200. + br)\n\n#define key_val(key) texelFetch(KEYBOARD, ivec2(key, 0), 0).x\n#define key_down(key) int(key_val(key)) == 1\n#define KEY_RESET 82\n#define KEY_SPACE 32\n#define KEY_A 65\n#define KEY_W 87\n#define KEY_D 68\n#define KEY_S 83\n#define KEY_E 69\n\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n\nvec4 cell(in sampler2D ch, in ivec2 p) {\n    ivec2 r = ivec2(textureSize(ch, 0));\n    p = (p+r) % r;\n    return texelFetch(ch, p, 0);\n}\n\n// Taken from stb's shader:\n// https://www.shadertoy.com/view/3tfcDM\nvec2 norm(in sampler2D ch, in ivec2 p) {\n    ivec3 e = ivec3(0, -1, 1);\n    return normalize(vec2(cell(ch, p-e.zx).r - cell(ch, p-e.yx).r,\n                          cell(ch, p-e.xz).r - cell(ch, p-e.xy).r));\n}\n\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat box( in vec2 uv, in vec2 b ) {\n    vec2 d = abs(uv)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// c is height of hole from either side\n// th is rotation of box\nvec2 myBox(vec2 uv, vec2 b, vec2 c, float th) {\n    uv *= rot(th);\n    c *= 2.;\n    float d = seg(abs(uv), vec2(-b.x, b.y), b);\n    d = min(d, seg(uv, -b, vec2(-b.x, b.y)));\n    \n    vec2 b2 = vec2(b.x, -b.y);    \n    vec2 p = b2 + vec2(0, c.x * b.y);\n    d = min(d, seg(uv, b2, p));\n    \n    vec2 q = b - vec2(0, c.y * b.y);\n    d = min(d, seg(uv, b, q));\n    \n    return vec2(box(uv, b - 4.), d);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define KEYBOARD iChannel1\n\n// This buffer stores distances and box regions\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    ivec2 ipx = ivec2(px);\n    \n    vec4 txP  = cell(ch0, ivec2(0, 0)); // Player position\n    vec4 txP1 = cell(ch0, ivec2(0, 1)); // Previous position\n    vec4 txB  = cell(ch2, ipx);\n    \n    // Initialize distances on reset\n    if (iFrame < 1 || key_down(KEY_RESET)) {\n        txB = vec4(res.y,0,0,0);   \n        \n        // Room box\n        vec2 dim = vec2(100);\n        vec2 p = vec2(dim.x + 2., res.y - dim.y);\n        vec2 d = myBox(px - p, dim, vec2(0.3, 0.3), 0.);\n        \n        //\n        d.y = min(d.y, abs(box(px - 0.5 * res,0.5*res - 2.)));\n        \n        // r stores distances\n        txB.r = min(txB.r, d.y);\n        \n        // a stores inside / outside vals\n        txB.a = clamp(txB.a + sign(d.x), -1., 1.);\n        \n        // Lever box\n        float dLever = box(px - leverPos - vec2(0,.5*br), vec2(2.25,2.1) *br);\n        txB.g = mix(txB.g, 1., step(dLever, 0.));\n    }   \n    \n    // Draw trail if space pressed\n    if (key_down(KEY_SPACE)) {\n        float d = seg(px, txP.xy, txP1.xy);\n        //d = mix(d, res.y, 0.5 + 0.5 * thc(20., 25. * iTime));\n        txB.r = min(txB.r, d);\n    }\n\n    fragColor = txB;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}