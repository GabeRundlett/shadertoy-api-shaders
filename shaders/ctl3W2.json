{
    "Shader": {
        "info": {
            "date": "1672439849",
            "description": "This code was written in part by ChatGPT with further modifications by me to include better animation.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctl3W2",
            "likes": 5,
            "name": "ChatGPT Mandelbrot Animation",
            "published": 3,
            "tags": [
                "mandelbrot",
                "maths"
            ],
            "usePreview": 0,
            "username": "lloydevans",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "// This is a Shadertoy - a shader that runs on the GPU and can be used to create\n// visual effects. In this case, we're using it to render an animated Mandelbrot set.\n\n// Now we'll define the main function of the shader. This is where the magic happens!\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // First, we'll map the fragment coordinate (the location of the current pixel\n    // being rendered) to a point in the complex plane. The Mandelbrot set is defined\n    // in the complex plane, so this will allow us to calculate which point in the\n    // set the current pixel corresponds to.\n    vec2 uv = (fragCoord.xy / iResolution.xy) - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Now we'll define a few variables that we'll use to calculate the Mandelbrot set.\n    vec2 c = uv;\n    vec2 z = vec2(0.0, 0.0);\n\n    // Next, we'll iterate over the Mandelbrot set, using the complex number z to\n    // represent each point in the set. We'll use the variable \"t\" to animate the\n    // set by adding a small value to the real and imaginary parts of \"c\" on each\n    // iteration.\n    for (int i = 0; i < 64; i++) {\n        if (length(z) > 2.0) {\n            // If the length of \"z\" is greater than 2, it means that the point is\n            // outside the Mandelbrot set, so we can stop iterating.\n            break;\n        }\n\n        // Add a small amount to the real and imaginary parts of \"c\" on each iteration\n        // to animate the set. The value of \"t\" controls the speed and direction of\n        // the animation.\n        float s = 0.3;\n        float t = iTime * s;\n        c.x += sin(t) * s * (sin(iTime) * s * 2.0) + 0.05;\n        c.y += cos(t) * s * (sin(iTime) * s * 2.0) + 0.05;\n\n        z = vec2(z.x * z.x - z.y * z.y + c.x, 2.0 * z.x * z.y + c.y);\n    }\n\n\n    // Finally, we'll use the number of iterations we performed to calculate a color\n    // for the current pixel. We'll use a color gradient to give the set a nice,\n    // psychedelic look.\n    fragColor = vec4(sin(z.x) * 0.5 + 0.5, sin(z.y) * 0.5 + 0.5, sin(length(z)) * 0.5 + 0.5, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}