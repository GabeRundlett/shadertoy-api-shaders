{
    "Shader": {
        "info": {
            "date": "1638562445",
            "description": "RayMarching-FBM",
            "flags": 0,
            "hasliked": 0,
            "id": "flcXRn",
            "likes": 2,
            "name": "RayMarching-FBM",
            "published": 3,
            "tags": [
                "raymarchingfbm"
            ],
            "usePreview": 0,
            "username": "celns",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "\nvec2 Random(vec2 iuv)\n{\n    vec2 point = vec2(dot(iuv,vec2(123.45,678.90)),\n                    dot(iuv,vec2(234.56,345.67)));\n    return -1.0+2.0*fract(sin(point)*45678.7654321);\n}\n\n\n\nfloat PerlinNoise(vec2 uv)\n{\n    vec2 iuv = floor(uv);\n    vec2 cuv = ceil(uv);\n    vec2 fuv = fract(uv);\n    \n    float a = dot(Random(iuv),fuv);\n    float b = dot(Random(iuv + vec2(1.0,0.0)),fuv - vec2(1.0,0.0));\n    float c = dot(Random(iuv + vec2(0.0,1.0)),fuv - vec2(0.0,1.0));\n    float d = dot(Random(cuv),fuv - vec2(1.0,1.0));\n    \n    vec2 interuv = fuv*fuv*(3.0-2.0*fuv);\n    \n    return mix(mix(a,b,interuv.x),mix(c,d,interuv.x),interuv.y) *1.5;\n    \n  \n}\n\nfloat FBM(vec2 uv)\n{\n    float fbm = 0.0;\n    float amp = 0.6;\n    float freq = 0.4;\n    float offset = 1.0;\n    int epoch = 9;\n    \n    for(int i = 0; i < epoch; i++)\n    {\n        fbm += amp * abs(PerlinNoise(uv*freq));\n        fbm = offset - fbm;\n        //fbm = cos(fbm);\n        amp *= 0.5;\n        freq *= 2.0;\n    }\n    \n    return smoothstep(0.,1.1,fbm);\n}\n\n\n\n\nfloat SDFPlane(vec3 point)\n{\n    float PlaneHeight = -FBM(point.xz)-0.1;\n    return  point.y - PlaneHeight ;\n}\n\n\n\nfloat SDFScene(vec3 point)\n{\n    float distPlane = SDFPlane(point);\n    return distPlane;\n}\n\n\nfloat RayMarching(vec3 eye, vec3 raydirection)\n{\n    float depth = 0.1;\n    int epoch = 15;\n    \n    float MaxDist = 5.;\n    float epsilon = 0.01;\n    \n    for (int i=0; i < epoch; i++)\n    {\n        vec3 point = eye + raydirection * depth;\n        float dist = SDFScene(point);\n \n        depth = depth + dist;\n        if(depth > MaxDist || depth < epsilon)\n            return -1.;  \n    }\n    return depth;\n}\n\n\nvec3 GetNormal(vec3 point)\n{\n    float delta = 0.01;\n    return normalize(vec3(\n                        SDFScene(vec3(point.x + delta, point.y, point.z))\n                        -SDFScene(vec3(point.x - delta, point.y, point.z)),\n                        SDFScene(vec3(point.x, point.y + delta, point.z))\n                        -SDFScene(vec3(point.x, point.y - delta, point.z)),\n                        SDFScene(vec3(point.x, point.y, point.z + delta))\n                        -SDFScene(vec3(point.x, point.y, point.z - delta))\n                    ));\n}\n\n\n\nfloat Shading(vec3 LightPos, vec3 point, vec3 eye)\n{\n\n    vec3 L = normalize(LightPos - point);\n    vec3 V = normalize(eye - point);\n    vec3 N = GetNormal(point);\n    vec3 H = normalize(L+V);\n    //vec3 R = normalize(reflect(-L, N));\n    \n    float Ambient = 0.2;\n\n    float result = dot(H,N);\n    return result+Ambient;\n        \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy) /iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 3.;\n    \n    vec3 eye = vec3(0.0,0.0,-iTime);\n    vec3 raydirection = normalize(vec3(uv.x,uv.y,-1.0));\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(0.0);\n    \n    float depth = RayMarching(eye, raydirection);\n    vec3 point =  eye + raydirection * depth;\n   \n    vec3 LightPos = vec3(1.);\n    float value = 0.0;\n    if(depth == -1.)\n    {\n        value = FBM(vec2(FBM(uv+iTime),0.0));\n        vec3 LightColor = vec3(0.1,0.2,0.3);\n        col = value*LightColor;\n               \n    }\n    else\n    {\n        value = Shading(LightPos, point, eye);\n        vec3 LightColor = vec3(0.7,0.3,0.1);\n        col = value*LightColor;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}