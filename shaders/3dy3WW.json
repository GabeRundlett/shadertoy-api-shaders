{
    "Shader": {
        "info": {
            "date": "1574859294",
            "description": "Between slow-nice explicit filtering and fast-ugly MIPmap, you can choose intermediate:  \nexplicit loop (possibly with kernel) relying on some coarse MIPmap level.\n#FILTER = 0: MIPmap    2: explicit sum    1: mix (default)\nmouse.y: filtering level. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3dy3WW",
            "likes": 8,
            "name": "smart filtering",
            "published": 3,
            "tags": [
                "filtering",
                "mipmap",
                "optimization",
                "multiscale",
                "tuto",
                "gpmipmap",
                "angles"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1511
        },
        "renderpass": [
            {
                "code": "// from https://shadertoy.com/view/wsV3Wh\n// oops, I already did something similar 2 years ago ;-p : https://www.shadertoy.com/view/ltScRG\n\n#define FILTER 1   // filtering using:   0: MIPmap   1: mix-MIPmap   2: full-loop\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         T = iChannelResolution[0].xy,\n         M = length(iMouse.xy) > 20. ? iMouse.xy/R.y\n                                     :  vec2(min(mod(iTime,2.),2.-mod(iTime,2.))),\n         U = (u-.5)/R.y;\n    float lod =  M.y*log2(T.y), n, s=0.;\n    \n#if FILTER == 0 // pure MIPmapfiltering\n    \n    O = textureLod(iChannel0, U + .5/T, floor(lod) ); \n    \n#else          // loop filtering\n    \n    int N=32;\n    n = log2(float(N));\n    if (lod<n) n=lod, N=int(exp2(n));\n    O -= O;\n    \n    for (int k=0; k < N*N; k++) {\n        vec2  P = (vec2(k%N,k/N)-float(N-1)/2.),\n             dU = P / ( T / exp2(floor(lod-n)));\n        float w = 1.; // add your kernel(P) here\n        s += w;\n#if FILTER==1  // mix MIPmap + loop filtering\n        \n        O += w* textureLod(iChannel0,  U + dU + .5/T*exp2(floor(lod-n)), floor(lod-n));\n        \n#else          // full loop filtering\n        \n        O += w* texture(iChannel0,  U + dU + .5/T );\n        \n#endif\n    }\n    O /= s;\n#endif\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}