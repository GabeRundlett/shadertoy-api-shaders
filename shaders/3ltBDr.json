{
    "Shader": {
        "info": {
            "date": "1612539272",
            "description": "Arrow keys: up/down to accel, right/left to roll\nMouse button down to steer",
            "flags": 32,
            "hasliked": 0,
            "id": "3ltBDr",
            "likes": 17,
            "name": "Fractal Condos",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// Fractal Condos by eiffie\n#define size iResolution\n\nvec2 rep(vec2 p, vec2 a){return abs(mod(p+a,a*2.0)-a);}\n\nvec4 mcol=vec4(0.0);\nfloat DE(vec3 z0){\n vec3 scol;\n z0.xz=rep(z0.xz,vec2(4.25,4.25)); \n float dB=min(z0.y+1.41,max(min(abs(z0.x-3.16),abs(z0.z-1.46))-0.25,abs(z0.y-0.38)-0.02)); \n vec4 z = vec4(z0,1.0),c=vec4(0.0,1.0,0.66,0.0);//amazing surface/box thnx to kali/tglad \n float dS=1000.0; \n for (int n = 0; n < 3; n++) { \n  z.xz=clamp(z.xz, -1.0, 1.0) *2.0-z.xz; \n  z*=2.0/clamp(dot(z.xyz,z.xyz),0.75,1.37); \n  z+=c; \n  dS=min(dS,(length(max(abs(z.xyz)-vec3(0.82,2.83,0.82),0.0))-0.33)/z.w); \n } \n float dG=dS+0.037;//interior is glass\n if(mcol.z>0.0){//save for coloring\n   c=floor(z*2.5);\n   scol=vec3(0.6+abs(fract(z.x*z.y*0.5)*0.4-0.2));\n } \n z.xyz=abs(mod(z.xyz,0.4)-0.2); \n dS=max(dS,-max(z.y-0.16,min(z.x,z.z)-0.15)/z.w);//cut out windows \n if(mcol.z>0.0){//now the coloring \n  if(dS<dB && dS<dG){ \n   z*=200.0; \n   dS+=sin(z.x+2.4*sin(z.y+2.4*sin(z.z)))*0.00005; \n   mcol+=vec4(scol*vec3(1.0,0.9,0.7),1.0); \n  }else if(dB<dG){ \n   float d=0.1; \n   if(min(abs(z0.x-3.16),abs(z0.z-1.46))-0.24>0.0 && fract((z0.x+z0.z)*10.0)>0.5)d=1.0; \n   mcol+=vec4(d,d,0.2,32.0); \n  }else{ \n   float spec=1.0; \n   if(sin((1.0+iTime*0.01)*(4.0*c.x-c.y+3.0*c.z))<-0.8)spec=-1.0; \n   mcol+=vec4(0.3,0.4+fract((c.x+c.z-c.y)*0.32454213)*0.3,0.5,spec);   \n  }\n } \n dS=(abs(min(dS,dG))-0.002)*0.8; \n return max(0.0,min(dS,dB)); \n} \n \nfloat rnd; \nfloat ShadAO(vec3 ro, vec3 rd){ \n float res=1.0,t=0.0; \n for(int i=0;i<24;i++){ \n  float d=abs(DE(ro+rd*t)); \n  res=min(res,2.0*d/t+t*0.1); \n  t+=d; \n } \n return clamp(res+0.1,0.0,1.0); \n} \nvec3 light_dir,light_col=vec3(1.0,0.9,0.6); \nvec3 Light(vec3 so, vec3 rd, float t, float dist){ \n float px=t*1.66/size.y;\n so+=rd*(dist-px);\n mcol=vec4(0.01); \n float d=DE(so); \n vec2 v=vec2(px,0.0);//px is pixelSize*t \n vec3 dn=vec3(DE(so-v.xyy),DE(so-v.yxy),DE(so-v.yyx)); \n vec3 dp=vec3(DE(so+v.xyy),DE(so+v.yxy),DE(so+v.yyx)); \n vec3 norm=(dp-dn)/(length(dp-vec3(d))+length(vec3(d)-dn));  \n if(norm!=norm)norm=rd; \n vec4 scol=mcol*0.143;mcol=vec4(0.0); \n float shad=ShadAO(so+norm*(0.002+rnd*0.001),light_dir); \n float camLightStrength=exp(-t); \n if(scol.w<-0.75)shad=-4.0*(scol.w+0.75); \n if(scol.w<0.0)scol.w=10.0; \n vec3 R=reflect(rd,norm); \n float dif=max(max(0.0,camLightStrength*dot(norm,-rd)),dot(norm,light_dir)); \n float spec=dot(light_dir,R); \n vec3 diffuse_col=scol.rgb+vec3(0.12,0.05,-0.125)*spec; \n dif=min(dif,shad); \n spec=min(pow(max(0.0,spec),scol.w),shad); \n return diffuse_col*dif*1.5+light_col*spec+vec3(0.5,0.7,0.9)*pow(max(0.0,dot(R,-rd)),10.0)*camLightStrength; \n} \n//mat3 lookat(vec3 fw){ \n// fw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw); \n//} \n//vec3 path(float t){return vec3(t,-1.27,4.3);}\nvec3 getBackGround(vec3 rd){return light_col*max(0.0,rd.y);}\n#define quat vec4 \nquat qid(){return quat(0.0,0.0,0.0,1.0);} \nquat qmulq(quat q1, quat q2){//multiply two quats \n return quat(q1.xyz*q2.w+q2.xyz*q1.w+cross(q1.xyz,q2.xyz),(q1.w*q2.w)-dot(q1.xyz,q2.xyz)); \n} \nquat qinv(quat q){return quat(-q.xyz,q.w)/dot(q,q);}//inverse quaternion \nvec3 qmulv(quat q, vec3 p){quat qi=qinv(q),q2=quat(p*qi.w+cross(p,qi.xyz),-dot(p,qi.xyz));\nreturn q.xyz*q2.w+q2.xyz*q.w+cross(q.xyz,q2.xyz);}\n//vec3 qmulv(quat q, vec3 p){return qmulq(q,qmulq(quat(p,0.0),qinv(q))).xyz;}//rotate a vector \nvec4 load(in int re) { \n return texture(iChannel0, (0.5+vec2(re,0.0)) / iChannelResolution[0].xy, -100.0 ); \n}\nvoid mainImage(out vec4 O, in vec2 U){\n light_dir=normalize(vec3(0.2,0.7,0.25));\n float px=1.66/size.y,ptim=iTime*0.25;  \n //vec3 ro=path(ptim),tg=path(ptim+0.5);\n vec3 rd=normalize(vec3((2.0*U-size.xy)/size.x,1.0)); \n vec3 ro=load(0).xyz; \n quat fw=load(1); \n rd=qmulv(fw,rd);\n vec2 co=gl_FragCoord.xy-17.0*vec2(fract(iTime*0.66)); \n rnd=fract(sin(co.x+cos(co.y))*4317.6219);\n float t=DE(ro)*(0.5+0.5*rnd); \n float d,pd=10.0,step,dm=100.0,tm,de=100.0,te=0.0;  \n for(int i=0;i<128;i++){ \n  d=DE(ro+rd*t); \n  if(de==100.0 && d>pd && pd<px*(t-step)){de=pd;te=t-step;} \n  step=d; \n  if(d<dm){dm=d;tm=t;}//save max occluder  \n  t+=step; \n  pd=d; \n  if(t>100.0 || d<0.000001)break; \n } \n vec3 col=getBackGround(rd); \n if(dm<px*tm)col=mix(Light(ro+rd*tm,rd,tm,dm)*exp(-tm*0.02),col,clamp(dm/(px*tm),0.0,1.0)); \n if(de<px*te)col=mix(Light(ro+rd*te,rd,te,de)*exp(-te*0.02),col,clamp(de/(px*te),0.0,1.0)); \n //fog from marius' boxplorer\n    float fog3 = 0.1;  // higher = thicker \n    float fogFalloff3 = 0.01;  // higher = closer \n    vec3 backgroundColor3 = vec3(0.8, 0.8, 0.8);  \n    col= mix(mix(backgroundColor3,col*0.5,abs(rd.y)), col, clamp(exp(-pow(t * exp(fogFalloff3), 1.0) * fog3),0.0,1.0));  \n O=vec4(col,1.0); \n}  \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//re-usable flight code with stabilizer\n//up/down=thrust right/left=roll\n \n#define THRUST 0.04*iTimeDelta \n#define ROLL 1.0*iTimeDelta \n#define ROTATE 4.0*iTimeDelta \n#define TOO_CLOSE 0.01 \n \n#define LEFT_ARROW 37 \n#define UP_ARROW 38 \n#define RIGHT_ARROW 39 \n#define DOWN_ARROW 40 \n \n//originally from iq but messed up by me \nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); } \n \nvec4 load(in int re) { \n    return texture(iChannel0, (0.5+vec2(re,0.0)) / iChannelResolution[0].xy, -100.0 ); \n} \n \nvoid store( in int re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord) { \n    fragColor = ( isInside(fragCoord,vec2(re,0.0)) > 0.0 ) ? va : fragColor; \n} \n \nbool KeyDown(in int key){return (texture(iChannel1,vec2((float(key)+0.5)/256.0, 0.25)).x>0.0);} \n \n//some quaterion math just to be different \n#define quat vec4 \nquat qid(){return quat(0.0,0.0,0.0,1.0);} \nquat qmulq(quat q1, quat q2){//multiply two quats \n return quat(q1.xyz*q2.w+q2.xyz*q1.w+cross(q1.xyz,q2.xyz),(q1.w*q2.w)-dot(q1.xyz,q2.xyz)); \n} \nquat aa2q(vec3 axis, float angle){return quat(normalize(axis)*sin(angle*0.5),cos(angle*0.5));} \nquat qinv(quat q){return quat(-q.xyz,q.w)/dot(q,q);}//inverse quaternion \nvec3 qmulv(quat q, vec3 p){quat qi=qinv(q),q2=quat(p*qi.w+cross(p,qi.xyz),-dot(p,qi.xyz));\nreturn q.xyz*q2.w+q2.xyz*q.w+cross(q.xyz,q2.xyz);}\n//vec3 qmulv(quat q, vec3 p){return qmulq(q,qmulq(quat(p,0.0),qinv(q))).xyz;}//rotate a vector \nquat qpyr(vec3 o){ o*=0.5; vec3 s=sin(o),c=cos(o); //rotate pitch,yaw,roll in that order \n return quat(s.x*c.y*c.z+s.y*c.x*s.z, s.y*c.x*c.z-s.x*c.y*s.z, s.x*s.y*c.z+s.z*c.x*c.y, c.x*c.y*c.z-s.x*s.y*s.z); \n} \n \n/*//extras \nquat q2aa(quat q){return quat(q.xyz/sqrt(1.0-q.w*q.w),acos(q.w)*2.0);}//assumed q is normalized coverts to axis&angle \nquat qlookat(vec3 v){return aa2q(vec3(-v.y,v.x,0.0),acos(v.z/length(v)));}//point in direction v \nvec3 vmulq(vec3 p, quat q){return qmulq(qinv(q),qmulq(quat(p,0.0),q)).xyz;}//inverse rotation \nquat qslerp(quat q1, quat q2, float f){ \n float d=dot(q1,q2),theta=acos(abs(d)),ost=(1.0/sin(theta));  \n return normalize(q1*sin(theta*(1.0-f))*ost*sign(d)+q2*sin(theta*f)*ost);  \n} \n*/ \n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{ \n if(fragCoord.y>0.5 || fragCoord.x>1.5)discard; \n vec4 pos; \n quat qrot; \n if(iFrame<2){ \n  pos=vec4(0.1,0.0,0.0,0.01); \n  qrot=normalize(vec4(0.1,0.2,0.3,0.8)); \n }else{ \n  pos=load(0); \n  qrot=load(1); \n  vec3 fw=vec3(0.0,0.0,1.0); \n  fw=qmulv(qrot,fw); \n  vec3 newp=pos.xyz+fw*pos.w; \n  if(newp.y>-1.3)pos.xyz=newp; \n  else{ pos.xz=newp.xz;} //keep above ground\n  if(KeyDown(UP_ARROW))pos.w+=THRUST; \n  if(KeyDown(DOWN_ARROW))pos.w-=THRUST; \n  float roll=0.0; \n  if(KeyDown(LEFT_ARROW))roll-=ROLL; \n  if(KeyDown(RIGHT_ARROW))roll+=ROLL; \n  vec2 mous=vec2(0.0); \n  if(iMouse.z>0.0){ \n   //mous.xy=(iMouse.xy-iMouse.zw)/iResolution.xy; mous.xy*=sign(mous.xy)*mous.xy;\n   mous.xy=(iMouse.xy-iResolution.xy*.5)/iResolution.xy; mous.xy*=sign(mous.xy)*mous.xy;\n  }\n  qrot*=vec4(0.99,1.0,0.99,1.0);//nice little trick to stabilize the flight \n  //x and z rotations go to zero and the quaternian is normalized later  \n  quat qp=qpyr(vec3(-mous.y*ROTATE,mous.x*ROTATE,roll));//finally did the math!! \n  qrot=normalize(qmulq(qrot,qp));//normalize before saving \n }\n store(0,pos,fragColor,fragCoord);//position,velocity \n store(1,qrot,fragColor,fragCoord);//rotation \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}