{
    "Shader": {
        "info": {
            "date": "1507342882",
            "description": "based on [url=https://www.shadertoy.com/view/XlfGRj] Star Nest by Kali [/url]. see [url=https://www.shadertoy.com/view/Xd3yWX]here[/url] for realitic lensing.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtByRh",
            "likes": 95,
            "name": "Lensing",
            "published": 3,
            "tags": [
                "3d",
                "blackhole",
                "starfield",
                "lensing"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 11999
        },
        "renderpass": [
            {
                "code": "// Star Nest by Pablo RomÃ¡n Andrioli\n\n// This content is under the MIT License.\n\n#define iterations 12\n#define formuparam 0.57\n\n#define volsteps 10\n#define stepsize 0.2\n\n#define zoom   1.200\n#define tile   1.0\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 1.00\n#define distfading 0.730\n#define saturation 1.0\n\n#define mo (2.0 * iMouse.xy - iResolution.xy) / iResolution.y\n#define blackholeCenter vec3(time*2.,time,-2.)\n#define blackholeRadius 1.2\n#define blackholeIntensity 1.0\n\nfloat iSphere(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n\tvec3 rc = ray-center;\n\tfloat c = dot(rc, rc) - (radius*radius);\n\tfloat b = dot(dir, rc);\n\tfloat d = b*b - c;\n\tfloat t = -b - sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n\treturn mix(-1.0, t, st);\n}\n\nvec3 iPlane(vec3 ro, vec3 rd, vec3 po, vec3 pd){\n    float d = dot(po - ro, pd) / dot(rd, pd);\n    return d * rd + ro;\n}\n\nvec3 r(vec3 v, vec2 r)//incomplete but ultrafast rotation fcn thnx to rodolphito\n{\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n\n\t//mouse rotation\n\tvec3 from=vec3(0.0, 0.0, -15.0);\n    from = r(from, mo / 10.0);\n    dir = r(dir, mo / 10.0);\n\tfrom+=blackholeCenter;\n\t\n    vec3 nml = normalize(blackholeCenter - from);\n    vec3 pos = iPlane(from, dir, blackholeCenter, nml);\n    pos = blackholeCenter - pos;\n    float intensity = dot(pos, pos);\n    if(intensity > blackholeRadius * blackholeRadius){\n        intensity = 1.0 / intensity;\n    \tdir = mix(dir, pos * sqrt(intensity), blackholeIntensity * intensity);\n    \t\n\t\t//volumetric rendering\n\t\tfloat s=0.1,fade=1.;\n\t\tvec3 v=vec3(0.);\n\t\tfor (int r=0; r<volsteps; r++) {\n\t\t\tvec3 p=from+s*dir*.5;\n\t\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\t\tfloat pa,a=pa=0.;\n\t\t\tfor (int i=0; i<iterations; i++) { \n\t\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\t\tpa=length(p);\n\t\t\t}\n\t\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\t\ta*=a*a; // add contrast\n\t\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t\t//v+=vec3(dm,dm*.5,0.);\n\t\t\tv+=fade;\n\t\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\t\tfade*=distfading; // distance fading\n\t\t\ts+=stepsize;\n\t\t}\n\t\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\t\tfragColor = vec4(v*.01,1.);\t\n    }\n    else fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}