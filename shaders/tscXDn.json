{
    "Shader": {
        "info": {
            "date": "1571763534",
            "description": "Experiments with water and clouds - created on Ep. 69 of Codebase Alpha live-coding stream (https://twitch.tv/codebasealpha)",
            "flags": 0,
            "hasliked": 0,
            "id": "tscXDn",
            "likes": 10,
            "name": "CodebaseAlpha5",
            "published": 3,
            "tags": [
                "clouds",
                "water"
            ],
            "usePreview": 0,
            "username": "codebasealpha",
            "viewed": 610
        },
        "renderpass": [
            {
                "code": "const vec3 skyCol1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skyCol2 = vec3(0.4, 0.7, 1.0);\nconst vec3 sunCol  = vec3(8.0,7.0,6.0)/8.0;\nconst vec3 seaCol1 = vec3(0.1,0.2,0.2);\nconst vec3 seaCol2 = vec3(0.8,0.9,0.6);\n\nfloat noise(vec2 p)\n{\n    return 2.0 * (texture(iChannel0, 0.01 *p + 0.5).x - 0.5);\n}\n\nvec4 cloudCol(vec2 p, float off)\n{\n    float n = 0.0;\n    p += 3.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    \n    for (int i = 0; i < 5; i++)\n    {\n        n += amp * noise(freq * p);\n        const float df = 0.1;\n        p += 0.0051 * iTime; // + 1.0 * vec2(cos(df * i*p.x), sin(df * i*p.y));\n        amp *= 0.4;\n        freq *= 3.0;\n    }\n    vec4 col = vec4(1.0, 1.0, 1.0, max(n-off, 0.0));\n    return col;\n}\n\nvec3 sunDirection() {\n  vec3 dir = normalize(vec3(0.0, 0.15, 1.0));\n  return dir;\n}\n\nconst float gravity = 1.0;\n\nfloat gravityWave(in vec2 p, float k, float h) \n{\n  float w = sqrt(gravity*k*tanh(k*h));\n  return sin(p.y*k + w*iTime);\n}\n\nvec3 skyColor(vec3 rd) {\n  vec3 sunDir = sunDirection();\n  float sunDot = max(dot(rd, sunDir), 0.0);\n  vec3 final = vec3(0.0);\n  final += mix(skyCol1, skyCol2, rd.y);\n  final += 0.5*sunCol*pow(sunDot, 40.0);\n  final += 4.0*sunCol*pow(sunDot, 800.0);\n    \n  return final;\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(p.x*c + p.y*s, -p.x*s + p.y*c);\n}\n\nfloat seaHeight(vec2 p)\n{\n  float height = 0.0;\n  float amplitude = 0.17;\n  float freq = 0.3;\n\n  for (int i = 0; i < 3; i++)\n  {  \n    height += amplitude * gravityWave(p, freq, 10.0);\n    amplitude *= 0.5;\n    freq *= 1.3;\n    rot(p, i > 1 ? 1.0 : 0.0);\n  }\n  \n  return height;\n}\n\nvec3 seaNormal(in vec2 p, in float d) \n{\n  vec2 eps = vec2(0.001*pow(d, 1.5), 0.0);\n  vec3 n = vec3(\n    seaHeight(p + eps) - seaHeight(p - eps), 2.0*eps.x,\n    seaHeight(p + eps.yx) - seaHeight(p - eps.yx)\n  );\n  \n  return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 p = fragCoord/iResolution.xy - vec2(0.5, 0.2);\n  p.x *= iResolution.x/iResolution.y;\n\n  vec3 ro = vec3(0.0, 10.0, 0.0);\n  vec3 ww = normalize(vec3(0.0, -0.1, 1.0));\n  vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.5*ww);\n  vec3 col = vec3(0.0);\n  \n  vec3 skyCol = skyColor(rd);\n  \n  float dsea = (0.0 - ro.y)/rd.y;\n  float dsky = (1000.0 - ro.y)/rd.y;\n  \n  if (dsea > 0.0)\n  {\n    vec3 p = ro + dsea * rd;\n    vec3 normal = seaNormal(p.xz, dsea);\n    vec3 reflectedRay = reflect(rd, normal);\n    float dotProduct = max(dot(-normal, rd), 0.0);\n    \n    vec3 reflectedSkyCol = skyColor(reflectedRay);\n    \n    col = mix(reflectedSkyCol, vec3(0.0), pow(dotProduct, 0.75));\n  }\n  else if (dsky > 0.0)\n  {\n    vec3 p = ro + dsky * rd;\n    vec4 clouds = cloudCol(p.xz * 0.0002, 1.0 - 0.75 * tanh(p.z));\n    col = mix(skyCol, clouds.xyz, clouds.w);\n  }\n  else\n  {\n    col = skyCol;\n  }\n\n  float a = atan(rd.z, rd.y);\n  \n  col = mix(skyCol, col, pow(abs(cos(a)), 0.25));\n\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}