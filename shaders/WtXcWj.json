{
    "Shader": {
        "info": {
            "date": "1593015294",
            "description": "A volumetric distorted sphere rotating and mutating.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtXcWj",
            "likes": 36,
            "name": "Volumetric Distorted Sphere",
            "published": 3,
            "tags": [
                "distortion",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "Danguafer",
            "viewed": 1020
        },
        "renderpass": [
            {
                "code": "#define TIME (iTime * 0.25)\nconst float PI = acos(-1.0);\n\n// _ _ _\n//  _ _ \n//\nfloat square(float x) { return sign(sin(x * PI)) * 0.5 + 0.5; }\n//\n// /_/_/\n//\nfloat ramps(float x) { return mod(x,1.0)*square(x); }\n// \n// S_S_S\n//\nfloat smoothed_ramps(float x) { return smoothstep(0.0,1.0,ramps(x)); }\n//      \n//    __\n//  __\n// _\n//\nfloat steps(float x) { return floor(x / 2.0 + 0.5); }\n//\n//    _/\n//  _/\n// /\n//\nfloat ramps_step(float x) { return ramps(x) + steps(x); }\n//\n//    _S\n//  _S\n// S\n//\nfloat smoothed_ramps_step(float x) { return smoothed_ramps(x) + steps(x); }\n\nfloat sphere(vec3 o, float r) { return length(o) - r; }\n\nfloat cylinder(vec3 o, float r) { return length(o.xz) - r; }\n\nmat2 rotate(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nvec3 fetch(vec3 o) {\n    float deform = smoothed_ramps_step(TIME / 0.35);\n    o.yz *= rotate(smoothed_ramps_step(TIME + 1.0) * PI / 4.0);\n    o.xy *= rotate(smoothed_ramps_step(TIME + 0.5) * PI / 4.0);\n    o.zx *= rotate(smoothed_ramps_step(TIME) * PI / 4.0);\n    o.z += 0.1 * sin(o.y * 10.0 + deform);\n    o.x += 0.1 * sin(o.z * 10.0 + deform);\n    o.y += 0.1 * sin(o.x * 10.0 + deform);\n    \n    float object = sphere(o, 0.5);\n    if (object < 0.0) {\n        vec3 color = vec3((sin(o.x * 10.0 + TIME) + 1.0) * 0.02 + 0.01,(sin(o.y * 10.0 + TIME) + 1.0) * 0.01 + 0.02,(sin(o.z * 10.0 + TIME) + 1.0) * 0.01 + 0.01);\n        color /= 4.0;\n        return color;\n    } else {\n\t \treturn vec3(0.0);\n    }\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec3 light = vec3(0.0);\n\n    vec3 o = vec3(0.0,0.0,-1.5);\n    vec3 d = normalize(vec3(p.xy, 2.0));\n    \n    float t = 0.0;\n    for (int i = 0; i < 200; i++) {\n        t += 0.01;\n        light += fetch(d * t + o);\n    }\n\n    fragColor = vec4(light * 1.25,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}