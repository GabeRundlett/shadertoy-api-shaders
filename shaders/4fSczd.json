{
    "Shader": {
        "info": {
            "date": "1722812152",
            "description": "Motion is not as cute as https://www.shadertoy.com/view/lc2yzc\nI copied peices of things I did before. The motion noise function is not quite right but pretty close.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4fSczd",
            "likes": 3,
            "name": "Animated Digits 5x3",
            "published": 3,
            "tags": [
                "digits"
            ],
            "usePreview": 0,
            "username": "dray",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define TAU (2.*PI)\n\nfloat irnd = 0.;\nfloat rnd(float l,float h)\n{\n  irnd = fract(irnd*23454.2263+.5);\n  return irnd*(h-l)+l;\n}\n\n//#define HASH(X,L,H)  (fract((X)*12345.221235)*((H)-(L))+(L))\n#define HASH(X)  fract((X)*1235.22235)\n\nfloat lfn(float t,float l,float h,float f) {\n    float t1 = floor(t*f);\n    float fr = fract(t*f);\n    return mix( HASH(t1), HASH(t1+f), fr ) * (h-l) + l;\n}\n\n/*\nfloat irnd2 = 0.;\nfloat rnd2(float l,float h)\n{\n  irnd = mod(irnd*54.2+.5,12.33);\n  return irnd*(h-l)/(12.33)+l;\n}\n*/\n\n#define F(a,b,c,d,e) (a*1+b*2+c*4+d*8+e*16)\n\nconst int font[] = int[](\nF(1,1,1,1,1), // 0 index\nF(1,0,0,0,1), // 1\nF(0,0,0,0,0), // 2\nF(1,1,1,0,1), // 3\nF(1,0,1,0,1), // 4\nF(1,0,1,1,1), // 5\nF(0,0,1,1,1), // 6\nF(0,0,1,0,0), // 7\nF(0,0,0,0,1), // 8\nF(0,0,1,0,1), // 9\n0\n);\n\nconst int chr[] = int[](\n  0,1,0, // 0 digit\n  2,0,2, // 1\n  3,4,5, // 2\n  4,4,0, // 3\n  6,7,0, // 4\n  5,4,3, // 5\n  0,4,3, // 6\n  8,8,0, // 7\n  0,4,0, // 8\n  6,9,0, // 9\n  0\n);\n\n#define spread .7\n#define diam .3\n\n\nvec3 walkabout(vec3 end,float step) {\n    /*\n    #define W .25\n    vec3 mid = end+vec3(rnd(-W,W),rnd(-W,W),rnd(-W,W));\n    vec3 mid2 = end+vec3(rnd(-W,W),rnd(-W,W),rnd(-W,W));\n    return mix(mix(mid,mid2,cos(step*PI)),end,cos(step*TAU));\n    */\n//    return mix(vec3( lfn(iTime+rnd(0.,10.),-W,W,1.), lfn(iTime+rnd(0.,10.),-W,W,1.), 0), end, cos(step*TAU) );\n/*\n    float pos = end.x/spread + end.y*3./spread;\n    pos = mod( pos + step*15., 15. );\n    float x = mod(pos,3.)*spread;\n    float y = floor(pos/3.)*spread;\n    return vec3( x, y, 0 );\n*/\n    //return mix(vec3( lfn(iTime+rnd(0.,10.),-W,W,1.), lfn(iTime+rnd(0.,10.),-W,W,1.), 0), end, cos(step*TAU) );\n//    return mix(vec3( lfn(iTime+rnd(0.,10.),0.,3.*spread,1.), 0./*lfn(iTime+rnd(0.,10.),0.,0.*spread,1.)*/, 0), end, cos(step*TAU) );\n//    return mix( end, vec3(0,0,0), sin(step*PI) );\n//    return mix( end, vec3( lfn(iTime+rnd(0.,10.),0.,3.*spread,1.), lfn(iTime+rnd(0.,10.),0.,5.*spread,1.), lfn(iTime+rnd(0.,10.),-4.,8.,1.) ), sin(step*PI) );\n    return mix( end, vec3( lfn(iTime+rnd(0.,10.),0.,3.*spread,1.), lfn(iTime+rnd(0.,10.),0.,5.*spread,1.), lfn(iTime+rnd(0.,10.),-4.,2.,1.) ), .5-.5*cos(step*TAU) );\n}\n\n#define step min(mod(iTime/3.,1.5),1.)\n\nint color = 0;\n\nvec2 digit(vec3 pt,int dig) {\n    dig *= 3;\n    vec2 res = vec2( 1e6, -1 ); // distance, color(material)\n    for (int col = 0; col < 3; ++col, ++dig )\n        for (int row = 0; row < 5; ++row ) \n            if ( ((font[chr[dig]] >> row) & 1) > 0 )\n            {\n                vec3 pix = vec3( float(col)*spread, float(row)*spread, 0. );\n                float dist = distance( pt, walkabout(pix,step) ) - diam;\n                ++color;\n                if ( dist < res.x ) res.x = dist, res.y = float(color);\n            }\n    return res;\n}\n\nvec3 light;\n\n#define begcc (int((iTime-.5)/(3.*6.))*7)\n\nvec2 Dist(vec3 pt) { // return distance to closest object and object\n    irnd = 0.;\n    color = 1;\n    vec2 res = vec2(1e6,-1);\n    //for ( float y = -7.; y < 7.; y += 4. )\n    //for ( float x = -10.; x < 10.; x += 3. ) {\n    for ( float y = -6.; y < 7.; y += 5. )\n    for ( float x = -11.; x < 10.; x += 4. ) {\n        if ( pt.x*x < 0. ) continue; // split screen in half\n        vec3 pos= vec3(x,y,8);\n        //if (mod(iTime*5.,1.)>.5)\n        int cc = begcc + 3*int(y+6.1)/5*6 + 3*int(x+11.1)/4;\n        vec2 tmp = digit(pt-pos, cc%10 );   // int(rnd(0.,9.)));\n        if ( tmp.x < res.x ) res = tmp;\n    }\n    return res;\n}\n\nvec3 Normal(vec3 pt) {\n    vec2 d = vec2(.001,0);\n    return normalize(\n        Dist(pt).x - vec3(\n            Dist(pt-d.xyy).x, \n            Dist(pt-d.yxy).x, \n            Dist(pt-d.yyx).x ) );\n}\n\nvec4 March(vec3 beg,vec3 dir) { // return intersection point and object of ray\n    float dist = 0.;\n    vec3 pos;\n    for ( int stps = 0; stps < 300; ++stps ) {\n        pos = beg + dir * dist;\n        vec2 tmp = Dist( pos );\n        dist += tmp.x;\n        if ( tmp.x < .01 ) return vec4( pos, tmp.y );\n        if ( dist > 25. ) break;\n    }\n    return vec4( pos, -2 );\n}\n\nfloat Light(vec3 pt) {\n    vec3 dir = normalize( light - pt );\n    vec3 norm = Normal(pt);\n    float difus = clamp( dot( norm, dir ), 0., 1. );\n    return difus;\n}\n\n/*\nvec2 rot2d(vec2 inp,float ang) {\n    float s = sin(ang);\n    float c = cos(ang);\n    return vec2( inp.x * c + inp.y * s, inp.y * c - inp.x * s ); \n}\n*/\n\nfloat pow2n(float x,int p2) { // power of power of 2\n  while ( p2-- > 0 ) x *= x;\n  return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy/2.) / min(iResolution.x,iResolution.y);\n\n    //uv = rot2d( uv, iTime/4.);\n\n    //vec3 cam = vec3( 0.+sin(iTime*.25)*1., 0.+cos(iTime*.15)*1., -8.+sin(iTime*.3)*4. );\n    vec3 cam = vec3( 0., 0., -8. );\n    vec3 camdir = normalize( vec3( uv.x, uv.y, 1. ) );\n    cam += camdir * 13.;\n\n    vec4 hit = March( cam, camdir );\n    \n    vec3 col = vec3(.05);\n    \n    if ( hit.w >= 0. ) {\n\n        light = vec3( 5., 5., -2. );\n\n        float difu = clamp( Light( hit.xyz ), 0., 1. );\n    \n        difu += pow2n(difu,3);\n  \n        col = cos( vec3(0,21,23) + hit.w*1.1)*.05+vec3(.5) * difu;\n    }\n\n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}