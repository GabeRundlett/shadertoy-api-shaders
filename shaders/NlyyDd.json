{
    "Shader": {
        "info": {
            "date": "1662418032",
            "description": "a few issues but looks nice I think",
            "flags": 0,
            "hasliked": 0,
            "id": "NlyyDd",
            "likes": 13,
            "name": "More Onions 2",
            "published": 3,
            "tags": [
                "fractal",
                "apollonion",
                "onionfans"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// RayMarching code stolen from TheArtOfCode\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;    \n    float a = -0.12 * iTime;\n    float zm = 0.65 + 0.5 * thc(4., 0.25 * iTime);\n    float r = 2.5 + zm;\n    vec3 ro = vec3(r * cos(a), zm, r * sin(a));\n    // ro.yz *= rot(-m.y*3.14+1.);\n    // ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist( vec3 p0 ){\n    float sd = mlength(p0.xz) - 1.5;\n    p0.y += 0.25 + 0.1 * iTime;\n    p0 *= 1.5 - 0.75 * thc(4., 0.1 * iTime);\n    vec4 p = vec4(p0, 1.);\n    \n    // Replace i < 4 with 2, 3, etc.\n    for(int i = 0; i < 4; i++){\n        // Looks good with i < 3\n        // p.xyz = erot(p.xyz, normalize(vec3(1)), float(i) * pi);\n        \n        p.xyz = mod(p.yxz-1., 2.)-1.;\n        // p.yzx *= exp(-0.015 * length(p));\n       \n        // Unsettling motion (best with i < 8 or more)\n        // p.y += 0.1 * cos(2. * iTime - pi * p.y);\n        p*=(1.235/dot(p.xyz, p.xyz));\n    }\n    p/=p.w;\n    float d1 = abs(p.y);\n    float d2 = abs(abs(p.x) - abs(p.z));\n    // Intersect + inflate\n    float d = 0.1 * smax(d1, d2, 0.005) - 0.001;\n    return max(sd, d);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n// (bad: color not in 0-1 range)\nvec3 Bg(vec3 rd) {    \n    float k = rd.y * 4.2; \n    vec3 b = pal(abs(rd.y) * -0.2, vec3(0,1,2) / 3.);\n    return b * (1.-k);\n    //return mix(b, vec3(1.-b),1.-k);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    float zm = 4. - 1. * (0.5 + 0.5 * thc(1., 0.5 * iTime));\n    vec3 rd = GetRayDir(uv, ro, vec3(0), zm);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n    vec3 p = ro + rd * d;\n    vec3 n = GetNormal(p);\n    vec3 r = reflect(rd, n);\n    if(d<MAX_DIST) {   \n        // float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        // dif = 4. * dif * (1.-dif);\n        // col = vec3(-0.4 + dif);\n        \n        float spec = pow(abs(r.y), 16.);\n        col += spec;\n        col += 0.6 * Bg(r); // * cos(0.1 * p.y);\n        col = mix(col, Bg(0.5 * p), 0.8);\n        \n        // could do length(p.xz - getRo().xz)\n        float fog = 1. / cosh(1.5 * length(p.xz));\n        col = mix(Bg(rd), col, fog);\n       \n    }\n    else col = Bg(r);\n        \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// Stolen from iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}\n    \n    \n    ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}