{
    "Shader": {
        "info": {
            "date": "1551760929",
            "description": "experimenting with catmull sounds",
            "flags": 8,
            "hasliked": 0,
            "id": "wsXSRf",
            "likes": 22,
            "name": "Tripping Monk",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 647
        },
        "renderpass": [
            {
                "code": "#define time iTime \n#define rez iResolution.xy\nvec2 tile(vec2 p, float a){return mod(p,vec2(a))-vec2(a/2.0);} \nvec3 mcol;\nfloat irx=1.0; \nfloat DE(vec3 z0){ \n  z0.yz=tile(z0.yz,1.74); \n  vec4 c = vec4(-0.1,0.01,-0.92,0.0),z = vec4(z0,1.0); \n  for(int n=0;n<5;n++){ \n    z.zyx=abs(z.xyz)-0.31; \n    z*=1.68/clamp(dot(z.xyz,z.xyz),0.14,1.08); \n    z+=c; \n  } \n  mcol=vec3(0.45,0.13,0.15)+20.0*abs(sin(z.yxz))/z.w; \n  z=abs(z); \n  return min((z0.x+0.6)*irx,(max(z.x,z.y)-1.1)/z.w); \n} \nvec3 background(vec3 rd){ \n  rd=abs(rd); \n  return vec3(1.0,0.9,0.0)*pow(1.0-min(rd.z,rd.y),6.0); \n} \nfloat rnd; \nvoid randomize(in vec2 p){rnd=fract(time+sin(dot(p,vec2(13.3145,117.7391)))*42317.7654321);} \nvec3 scene(vec3 ro, vec3 rd){\n  vec3 bcol=background(rd); \n  vec4 col=vec4(0.0);//color accumulator \n  irx=1.0/(1.0-abs(rd.x));//to speed up floor in DE \n  float t=DE(ro)*rnd,d,od=1.0,px=8.0/rez.x; \n  for(int i=0;i<199;i++){ \n    d=DE(ro+rd*t); \n    if(d<px){ \n      float dif=clamp(1.0-d/od,0.0,1.0)/(t*t);//cam light \n      float alpha=(1.0-col.w)*clamp(1.0-d/px,0.0,1.0); \n      col+=vec4(clamp(mcol*dif+bcol*exp(-1.0+t*0.05),0.0,1.0),1.0)*alpha; \n      if(col.w>0.99)break; \n    } \n    t+=d;od=d; \n    if(t>20.0)break; \n    mcol=vec3(0.0); \n  } \n  col.rgb+=bcol*(1.0-clamp(col.w,0.0,1.0));\n  return col.rgb;\n}\nmat3 lookat(vec3 fw){\n  fw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(1.0,0.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\nvec2 bx_cos(vec2 a){return clamp(abs(mod(a,8.0)-4.0)-2.0,-1.0,1.0);} \nvec2 bx_cossin(float a){return bx_cos(vec2(a,a-2.0));}\nvec3 path(float t){\n  return vec3(min(-0.2+t*0.03,1.1),bx_cossin(t*0.1)*8.7)+vec3(0.3/(1.0+t*0.1))*sin(sin(vec3(1.0,0.9,0.7)*t));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv=vec2(fragCoord.xy-0.5*rez)/rez.x; \n  randomize(uv);\n  float tim=time*0.5+time*time*0.03;\n  vec3 ro=path(tim),rd=normalize(vec3(uv.xy,1.0));ro.x-=max(0.3-tim*0.03,-0.1);\n  rd=lookat(path(tim+5.0)-ro)*rd;\n  fragColor=vec4(scene(ro,rd),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float catmull(vec4 c, float t){//return interpolated value between c.y & c.z\n  return 0.5*((2.0*c.y)+\n    (-c.x+c.z)*t+\n    (2.0*c.x-5.0*c.y+4.0*c.z-c.w)*t*t+\n    (-c.x+3.0*c.y-3.0*c.z+c.w)*t*t*t);\n}\nfloat rnd(float t){return fract(sin(t*43.21)*654.321);}\nfloat noise(float t){return mix(rnd(floor(t)),rnd(floor(t)+1.0),fract(t));}\nfloat P[16],P1[16],P2[16];\nint mod8(int i){return int(mod(float(i),8.0));}\nfloat voice(float t, float f, float bt){//trying to make a wave that changes\n  vec4 c;\n  t+=0.003*noise(t*5.43);               //randomly every cycle without pops\n  float ts=t*f*8.0;//time x freq and scale to 8 sections\n  int j=int(floor(ts)),j2=mod8(j);//j2=the section of the spline we are on\n  for(int n=0;n<16;n++){//blend oh and mmm sounds\n    float m=0.5+0.5*sin(bt*(10.0+5.0*rnd(float(n+j+103-j2))));//random mix\n    P[n]=mix(P1[n],P2[n],m)+bt*bt*(0.1-0.3*rnd(float(n+j-j2)));\n    if(n>=j2 && n<j2+4)c=vec4(c.yzw,P[n]);  \n  } \n  return catmull(c,fract(ts));\n}\nfloat nofs(float n){return mod(n,3.0);}//the song's \"random\" ring\nfloat sofs(float b){return nofs(b*0.125)+nofs(b*0.25)+nofs(b*0.5)+nofs(b);}//build up random layers\nfloat scale(float note){//throws out dissonant tones \n float n2=mod(note,12.0);//dorian perhaps??  \n if((n2==1.0)||(n2==4.0)||(n2==6.0)||(n2==8.0)||(n2==11.0))note=-100.0; \n return note;\n}\nfloat ntof(float n){return 440.0 * pow(2.0, (n - 67.0) / 12.0);}//note 2 freq\nfloat env(float att, float bt){return (1.0-exp(-bt*att))*(1.0-bt);}//envelope\nfloat inst(float n,float t,float bt){//note, global time and time within note\n float sn=scale(floor(n));if(sn<0.0)return 0.0;\n float f=ntof(sn);\n float a=voice(t+0.02*noise(t*0.7+n),f,bt);\n return a*env(5.0,bt)*60.0/n;\n}\nvec2 mainSound( in int samp,float time){//setup some control points of a spline\n  P1[0]=0.0;P1[1]=0.4;P1[2]=0.4;P1[3]=0.1;P1[4]=0.0;P1[5]=-0.1;P1[6]=-0.4;P1[7]=-0.4;\n  P2[0]=0.0;P2[1]=0.8;P2[2]=0.1;P2[3]=0.3;P2[4]=0.0;P2[5]=0.1;P2[6]=-0.3;P2[7]=0.1;\n  for(int i=0;i<8;i++){P1[8+i]=P1[i];P2[8+i]=P2[i];}//copy\n  \n  float tim=time*(0.5+time*time*0.0005); \n  float b=floor(tim);\n  float t=fract(tim); \n  float n=sofs(b);\n  float a1=inst(n+36.0,time,t)+inst(n+40.0,time,t);\n  tim-=0.25;\n  b=floor(tim);\n  t=fract(tim);\n  n=sofs(b);\n  float a2=inst(n+38.0,time,t)+inst(n+42.0,time,t);\n  tim-=0.25;\n  b=floor(tim);\n  t=fract(tim); \n  n=sofs(b);\n  float a3=inst(n+39.0,time,t)+inst(n+43.0,time,t);\n  return clamp(vec2(a1+a2*0.25+a3*0.5,a1*0.25+a2+a3*0.5),-1.0,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}