{
    "Shader": {
        "info": {
            "date": "1552740694",
            "description": "Inspired by the Endless Space 2 Rift Born intro\nit's a comment from @ollj that motivated me trying.\nThe artefacts and performances are far from optimal.\nI think the main weak point is the way I compute the solids (stacking planes in random directions)",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws2Szz",
            "likes": 27,
            "name": "ShaderDojo 022",
            "published": 3,
            "tags": [
                "raymarch",
                "training",
                "dojo",
                "cookie",
                "riftborn"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 833
        },
        "renderpass": [
            {
                "code": "// Shattered dimention\n// Inspired by the Riftborn intro from ES2\n// https://www.youtube.com/watch?v=h8H8DedCW_I\n//\n// Disclamier: I work at Amplitude at the moment =)\n\n#define time (iTime)\n\n#define PI 3.14159\n#define TAU (PI * 2.)\n\n#define RID(p, r) (floor((p + r/2.) / r))\n#define REP(p, r) (mod(p + r/2., r) - r/2.)\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x ) { // in [0,1]\n\n    float res = (hash(x.x) + hash(x.y + 1523.) + hash(x.z + 423.)) / 3.0;\n    return res;\n}\n\nmat2 rot(float a)\n{\n  float ca = cos(a); float sa = sin(a);\n  return mat2(ca,-sa,sa,ca);\n}\n\nfloat sdPlane(vec3 p, vec4 n)\n{\n  return dot(p,n.xyz) - n.w;\n}\n\nfloat solid(vec3 p, float s)\n{\n  float dist = -1000.;\n  vec3 dir = vec3(0.,1.,0.);\n  float h = 3.;\n  float v = 6.;\n  mat2 hr = rot(TAU / h);\n  mat2 vr = rot(TAU / v);\n\n  for(float j = 0.; j < v; ++j)\n  {\n    for(float i = 0.; i < h; ++i)\n    {\n      float ran = (hash(s + j * i)-.5) ;\n      dist = max(dist,sdPlane(p, vec4(dir,1. + ran)));\n      dir.xz *= hr;\n    }\n\n    dir.yz *= vr;\n  }\n\n  return dist;\n}\n\nfloat map(vec3 p)\n{\n\n  vec3 cp = p;\n\n  vec3 pid = RID(p, 80.);\n  p = REP(p, 80.);\n  p.xy *= rot(pid.z * .5);\n  p.zy *= rot(pid.x * .5);\n  p.xz *= rot(pid.y * .5);\n\n  p.z -= time;\n\n  p.y += 2.;\n  p.xy *= rot(p.z * .1);\n  p.y -= 2.;\n\n  p.xy *= rot(time * .05);\n\n  float dist = 1000.;\n\n  p *= 2.;\n  float r = 6.;\n\n  vec3 id = RID(p, r);\n  p = REP(p , r);\n\n\n  float nois = noise(id);\n  float t = time * (nois + .2); ;\n\n  p.xz *= rot(t);\n  p.xy *= rot(t * .5);\n  p.yz *= rot(t * .25);\n  dist = solid(p, nois) *.25;\n\n  dist = max(dist, length(id.xy) - 2.);\n\n  return dist;\n}\n\nvoid ray(inout vec3 cp,vec3 rd, out float st, out float cd)\n{\n  for(st = 0.; st < 1.; st += 1./200.)\n  {\n    cd = map(cp);\n    if(cd < .01 || cd > 60.)\n      break;\n    cp += rd * cd * st;\n  }\n}  \n\nvec3 normal(vec3 p)\n{\n  vec2 e = vec2(.05,.0);\n  float d = map(p);\n  return normalize(vec3(\n    d - map(p + e.xyy),\n    d - map(p + e.yxy),\n    d - map(p + e.yyx)\n  ));\n}\n\nvec3 lookAt(vec3 eye, vec3 tar, vec2 uv)\n{\n  vec3 fd = normalize(tar - eye);\n  vec3 ri = cross(fd, vec3(0.,1.,0.));\n  vec3 up = cross(ri,fd);\n  return normalize(fd + ri * uv.x + up * uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 eye = vec3(10.,10.,-20.);\n  vec3 tar = vec3(0.);\n  vec3 rd = lookAt(eye, tar, uv);\n  vec3 cp = eye;\n  float st,cd;\n  ray(cp,rd,st,cd);\n\n  float dist = length(eye - cp);\n\n  fragColor = mix(vec4(1.), vec4(.6,.6,.65,1.), pow((fragCoord.x / iResolution.x * .75 + .1), 1.2));\n  if(cd < .01)\n  {\n    vec3 norm = normal(cp);\n    vec3 ld = normalize(vec3(1.,-1.,1.));\n    float li = dot(norm,ld);\n    fragColor = mix(\n        fragColor,\n        mix(vec4(.75,.75,.74999,1.), vec4(.4,.4,.52,1.), li),\n        exp(-distance(cp,eye) * .007));\n  }\n  \n  fragColor = pow(fragColor, vec4(2.2));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}