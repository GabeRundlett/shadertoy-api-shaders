{
    "Shader": {
        "info": {
            "date": "1622729866",
            "description": "2d landscape-v-2",
            "flags": 0,
            "hasliked": 0,
            "id": "slXGDB",
            "likes": 5,
            "name": "2d landscape-v-2",
            "published": 3,
            "tags": [
                "2dlandscapev2"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1...jorge flores p.\n//referencia\n//https://www.shadertoy.com/view/XsG3WR......//Created by Hamneggs in 2016-01-27\n//https://www.shadertoy.com/view/wldcWr  ....//Created by TheNosiriN in 2020-12-25\n//https://www.shadertoy.com/view/ttVfWG .....//Created by Plento in 2021-03-06\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define PI 3.14\n#define roundnes 0.025\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\n#define S2(d,b) smoothstep(antialiasing(0.5),b,d)\n\n// Channel definitions.\n#define DATA_BUFFER iChannel0\n#define NOISE_TEX iChannel1\n\n\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  return colOut;\n}\n\nvec3 ponerBorde2(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S(abs( distObj),0.0));\n  return colOut;\n}\n\n\n\n// Noise stuff\nfloat rand(vec2 n){ \n\treturn fract(sin(dot(n, vec2(17.12037, 5.71713))) * 12345.6789);\n}\nfloat noise(vec2 n){\n\tvec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b + d.xx), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nfloat fbm2(vec2 n, float t){\n\tfloat sum = 0.0, amp = 1.0;\n\tfor (int i = 0; i < 10; i++){\n        n.x += t;\n\t\tsum += noise(n) * amp;\n\t\tn += n;\n\t\tamp *= 0.5;\n\t}\n\treturn sum;\n}\n\n//https://www.shadertoy.com/view/XsG3WR\n//Lunar Lander\n//Created by Hamneggs in 2016-01-27\n/* \n    The FBM that gives rise to the terrain. (literally)\n */\nfloat fbm( in vec2 uv )\n{\n    float result = texture(NOISE_TEX, uv    ).r*1.000;\n    result += texture(NOISE_TEX, uv*2.0).r*.5000;\n    result += texture(NOISE_TEX, uv*4.01).r*.2500;\n    result += texture(NOISE_TEX, uv*8.0).r*.1250;\n    result += texture(NOISE_TEX, uv*16.).r*.0625;\n    return result * .533333; // * (1.0/1.875);\n}\n\n\nfloat distLunarSurface( in vec2 uv )\n{\n    uv.x *= .0125;\n    vec2 q = uv; q.y=0.0;\n    float f = fbm(q);\n    return uv.y - f*f*1.;\n}\n\n\nvec3 Lunar(vec2 p, vec3 col, vec3 colTierraA,vec3 colTierraB)\n{\n     float dl1=distLunarSurface(p);\n     float dl2=distLunarSurface(p-vec2(0.001,0.0125));\n     \n     col= ponerBorde2(colTierraA, col, dl2 );\n     col= ponerBorde2(colTierraB, col, dl1 );\n     \n     \n     return col;\n}\n\n\n\n\nmat2 rotate(float angle)\n{\n\tangle *= PI / 180.0;\n    float s = sin(angle), c = cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nfloat star(vec2 uv, float time, float flare)\n{\n\tfloat d = length(uv);\n    float m = (max(0.2, abs(sin(time))) * 0.02) / d;\n    \n    float rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*flare;\n    uv *= rotate(45.0);\n    rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*0.5*flare;\n    \n    m *= smoothstep(1.0, 0.2, d);\n    \n    return m;\n}\n\n\n\n\nfloat hash21(vec2 p)\n{\n \tp = fract( p*vec2(123.34, 456.21) );\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 hash23( vec2 co )\n{\n   vec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );\n   vec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );\n   vec3 c = mix(a, b, 0.5);\n   return c;\n}\n\n\nfloat starFieldMin(vec2 p)\n{\n    vec3 rnd = hash23(p * iResolution.x);\n    float intensity = pow((1.+sin((iTime+27.0)*rnd.x))*.5, 7.) ;\n    return max(rnd.x * pow(rnd.y,7.) * intensity, 0.);\n\n}\n\n\n//Shader try of StarofBethlehem\nfloat starField(vec2 uv)\n{\n    vec3 col = vec3(0);\n    float colf=0.0;\n    \n    vec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    \n    for (int x=-1; x<=1; x++){\n        for (int y=-1; y<=1; y++)\n        {\n            vec2 offset = vec2(x, y);\n            \n            float n = hash21(id + offset);\n            float size = min(0.25, fract(n*1234.567) + 0.1);\n            float star = star(gv - offset - (vec2(n, fract(n*100.0)) - 0.5), iTime*fract(n*135.246), smoothstep(.9, 1., size)*.6);\n            \n            colf += star * size;\n        }\n    }\n    \n    return colf;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 nv=uv;\n    vec2 p=uv*0.5+vec2(0.0+iTime*0.05,0.125);\n    \n    \n    // Noise for clouds and fuselage\n    float nse = fbm2(5.*vec2(uv.x, uv.y*14.5), 0.)-.5;\n    float nse2 = fbm2(nv*4., iTime*.14)-.5;\n    float nse3= fbm2(p*4., 0.14)-.5;\n    \n    vec3 cloud = vec3(nse2)*0.7;\n    \n    \n    // Bg color\n    vec3 col = mix(vec3(.7, .8, .99), vec3(.8, .8, .8), nv.y) + cloud*cloud*.5;\n     col= mix(vec3(0.125), vec3(.2, .2, .8), nv.y) + col*cloud*.5;\n     col += (starField(uv*50.0)) + starFieldMin(uv)*2.0;\n     \n     col=Lunar(p-vec2(0.0,-0.05),col,vec3(1.0),vec3(0.8,0.5,0.35) *nse3);\n     \n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}