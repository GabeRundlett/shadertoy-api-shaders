{
    "Shader": {
        "info": {
            "date": "1543194558",
            "description": "Fiber glass themed abstraction",
            "flags": 32,
            "hasliked": 0,
            "id": "XlVfzK",
            "likes": 23,
            "name": "Abstract fiber glass rain",
            "published": 3,
            "tags": [
                "light",
                "glass",
                "rain",
                "ice",
                "fiber"
            ],
            "usePreview": 0,
            "username": "Gand",
            "viewed": 1297
        },
        "renderpass": [
            {
                "code": "precision highp  float;\n\nfloat blendScreen (float base, float add)\n{\n\treturn 1.0f - (1.0f - base) * (1.0f - add);\n}\n\nvec3 blendScreen3 (vec3 base, vec3 add)\n{\n\treturn vec3(blendScreen(base.r, add.r),blendScreen(base.g, add.g),blendScreen(base.b, add.b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 normalTex = texture(iChannel0, uv);\n    vec3 normalVec = normalTex.rgb*2.0 - 1.0;\n    float testDot = dot(normalVec, normalize(vec3(0.3,-1.0,0.0)));\n    float testDot2 = (dot(normalVec, (vec3(0.5,0.5,1.0))));\n    vec4 blurred = texture(iChannel1, uv);\n    vec4 notBlurred = texture(iChannel2, uv);\n   \n    vec3 lightDots = vec3(testDot,testDot,testDot)*notBlurred.rgb*2.3;\n    vec3 lightsFill = vec3(testDot2,testDot2,testDot2)*blurred.rgb*2.0;\n    \n    vec3 finalColor = blendScreen3(lightsFill,lightDots);\n\n    fragColor =vec4(finalColor,1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float Speed =0.1;\n\nconst int rowsStage1= 20;\nconst int rowsStage2= 337;\nconst float rowsStage2F= 337.0;\n\nfloat ceiler(float v, int cels)\n{\n  return ceil(v*float(cels))/float(cels);\n}\n\nfloat randomFun1(float coord)\n{\n  return fract(cos(coord*0.13)*31532462.0);\n}\n\nfloat randomFun2(float coord)\n{\n  return fract(sin(coord*1.1)*31462.0);\n}\nfloat biasOffset( float value, float bias, float offset)\n{\n  return value * bias + offset;\n}\n\nfloat gradientBand(float fractedBand)\n{\n   return 1.0 - abs(biasOffset(fractedBand, 2.0, -1.0)); \n}\n\nvec3 HSVToRGB( vec3 c )\n{\n   vec4 K = vec4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );\n   vec3 p = abs( fract( c.xxx + K.xyz ) * 6.0 - K.www );\n   return c.z * mix( K.xxx, clamp( p - K.xxx,0.0, 1.0 ), c.y );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = (fragCoord/iResolution.xy)*2.0;\n\n\tfloat ceciledXStage1 = ceiler(uv.x, rowsStage1);\n     float yStage1 =uv.y - randomFun1(ceciledXStage1) + iTime*randomFun2(ceciledXStage1)*Speed * 2.0;\n     vec2 fractedUvsStage1 = vec2(uv.x,fract(yStage1));\n    \n      float ceciledXStage2 = ceiler(fractedUvsStage1.x, rowsStage2);\n \tfloat yStage2 = fractedUvsStage1.y +randomFun1(ceciledXStage2)+ iTime*randomFun2(ceciledXStage2)*Speed*0.5;\n \tvec2 fractedUvsStage2 = vec2(uv.x, 1.0 -fract(yStage2));\n    \n    float verticalGraddients = gradientBand(fract(fractedUvsStage2.x * rowsStage2F)) ;\n  \n  vec2 finalUvs = fractedUvsStage2 - vec2(0.0,  sqrt(sqrt(verticalGraddients)) * 0.2);\n\n    \n     float bands = verticalGraddients * finalUvs.y;\n \n\tfloat sinTime = sin(iTime * 0.1) * 0.5 + 0.5;\n    \n    \n    \n float clampedHue = biasOffset(finalUvs.y*verticalGraddients, 0.15,sinTime) + biasOffset(uv.y,0.05, 0.025);\n \n float tmp = fract(yStage1);\n \n vec3 coloredBands = HSVToRGB(vec3(clampedHue, 1.0, bands));\n    \n    vec4 testVal = vec4(coloredBands,1.0);\n\n    fragColor = vec4(coloredBands, bands);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// gaussian blur based on https://www.shadertoy.com/view/XdfGDH\n\nfloat blendScreen (float base, float add)\n{\n\treturn 1.0f - (1.0f - base) * (1.0f - add);\n}\n\nvec3 blendScreen3 (vec3 base, vec3 add)\n{\n\treturn vec3(blendScreen(base.r, add.r),blendScreen(base.g, add.g),blendScreen(base.b, add.b));\n}\n\nfloat randomBands( float x)\n{\n\tfloat t = (cos(cos(x*3.14)*9.0*iTime*0.36) + (fract(sin(x*3.14))))*0.5 + 0.5;\n    return sin((t));\n}\n\n// gaussian blur \n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv = fragCoord/iResolution.xy;\n    float band =(randomBands(uv.x));\n    \n    const int mSize = 11;\n\t\tconst int kSize = (mSize-1)/2;\n\t\tfloat kernel[mSize];\n\t\tvec4 final_colour = vec4(0.0);\n\t\t\n\t\t//create the 1-D kernel\n\t\tfloat sigma = 5.0;\n\t\tfloat Z = 0.0;\n\t\tfor (int j = 0; j <= kSize; ++j)\n\t\t{\n\t\t\tkernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n\t\t}\n\t\t\n\t\t//get the normalization factor (as the gaussian has been clamped)\n\t\tfor (int j = 0; j < mSize; ++j)\n\t\t{\n\t\t\tZ += kernel[j];\n\t\t}\n\t\t\n\t\t//read out the texels\n\t\tfor (int i=-kSize; i <= kSize; ++i)\n\t\t{\n\t\t\tfor (int j=-kSize; j <= kSize; ++j)\n\t\t\t{\n\t\t\t\tfinal_colour += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy);\n\t\n\t\t\t}\n\t\t}\n    float height = max(texture(iChannel0, uv).a, final_colour.a) * band ;\n    //vec4 base = texture(iChannel0,uv);\n    fragColor = vec4(final_colour.rgb,height);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// based on normal map filter https://www.shadertoy.com/view/4dsGR8\n\nfloat saturate(float v)\n{\n\treturn clamp(v,0.0, 1.0);\n}\n\n\nvec3 myNormal(sampler2D tex,vec2 fragCoord, vec2 iResolution)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t//uv.y=1.0-uv.y;\n\t\n\tfloat x=0.5;\n\tfloat y=0.5;\n\t\n\tfloat M =abs(texture(tex, uv + vec2(0., 0.)/ iResolution.xy).a); \n\tfloat L =abs(texture(tex, uv + vec2(x, 0.)/ iResolution.xy).a);\n\tfloat R =abs(texture(tex, uv + vec2(-x, 0.)/ iResolution.xy).a);\t\n\tfloat U =abs(texture(tex, uv + vec2(0., y)/ iResolution.xy).a);\n\tfloat D =abs(texture(tex, uv + vec2(0., -y)/ iResolution.xy).a);\n\tfloat X = ((R-M)+(M-L))*.5;\n\tfloat Y = ((D-M)+(M-U))*.5;\n\t\n\tfloat strength =0.03;\n\tvec4 N = vec4(normalize(vec3(X, Y, strength)), 1.0);\n//\tvec4 N = vec4(normalize(vec3(X, Y, .01))-.5, 1.0);\n\n\tvec3 col = vec3(N.xyz * 0.5 + 0.5);\n\n\n\treturn normalize(col);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 nor = myNormal(iChannel0, fragCoord,iResolution.xy);\n    \n    fragColor = vec4(nor.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}