{
    "Shader": {
        "info": {
            "date": "1599887699",
            "description": "Reset time to reset samples. Uses a cube-map, calculates the lighting from the cube-map texture for diffuse, and slightly rough glossy reflection. May be expanded to render cubes too. ",
            "flags": 32,
            "hasliked": 0,
            "id": "WljBWV",
            "likes": 4,
            "name": "Multi-sampled Plane",
            "published": 3,
            "tags": [
                "plane",
                "multisample"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(texture(iChannel0,uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 random2(vec3 pos){\n    float x = fract(sin(dot(pos, vec3(64.25375463, 23.27536534, 86.29678483))) * 59482.7542);\n    float y = fract(sin(dot(pos, vec3(86.28594852, 34.58198637, 25.58228349))) * 95837.9672);\n    return vec2(x, y);\n}\nvec3 random3(vec3 pos){\n    float x = fract(sin(dot(pos, vec3(45.84018476, 94.30285684, 33.52930515))) * 23859.2590);\n    float y = fract(sin(dot(pos, vec3(96.95283515, 23.59403928, 59.59203951))) * 96834.1853);\n    float z = fract(sin(dot(pos, vec3(64.93925685, 75.64903468, 54.86397654))) * 74538.8648);\n    return vec3(x, y, z);\n}\n\nfloat iters = 20.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec3 col = vec3(0.);\n    for(int i=0; i<int(iters); i++){\n        vec2 uv = (fragCoord-iResolution.xy/2.0)/iResolution.y;\n        uv += (random2(vec3(uv.x, uv.y, iTime+float(i)/(60.*iters)))-0.5)/iResolution.xy;\n        vec3 p = vec3(uv.x*(-1.0/uv.y),-1.0,-1.0/uv.y);\n        vec3 inc = vec3(uv.x, uv.y, 1.);\n        vec3 col2 = vec3(1.0);\n        vec3 ambient = vec3(0.0);\n        vec3 dif2 = vec3(1.0);\n        if(uv.y<0.0){\n            if(p.x-floor(p.x)<0.5&&p.z-floor(p.z)<0.5){\n                col2 = vec3(0.0);\n            }\n            if(p.x-floor(p.x)>0.5&&p.z-floor(p.z)>0.5){\n                col2 = vec3(0.0);\n            }\n            dif2 = random3(vec3(uv.x, uv.y, iTime+float(i)/(60.*iters)));\n            dif2.y<0.?-dif2:dif2;\n            ambient += texture(iChannel1, dif2).rgb;\n        }else{\n            ambient = texture(iChannel1, inc).rgb;\n        }\n        vec3 rvec = vec3(inc.x, -inc.y, inc.z);\n        rvec = normalize(rvec*15.0 + random3(vec3(uv.x,uv.y,2.*iTime+1.)));\n        vec3 reflection = texture(iChannel1, rvec).rgb;\n        col2 *= ambient*dif2.y;\n        col2 = col2*0.9 + 0.1*reflection;\n        col2=max(col2*2.-.01,0.);\n        col += col2;\n    }\n    col/=iters;\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(pow(col.x,.45),pow(col.y,.45),pow(col.z,.45),1.0)/float(iFrame+1)+texture(iChannel0, uv)*(1.0-1.0/float(iFrame+1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}