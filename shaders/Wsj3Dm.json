{
    "Shader": {
        "info": {
            "date": "1549047436",
            "description": "Camera code borrowed from Gijs\nWASD to move, QE to rotate the camera, SHIFT/SPACE to move up and down, and mouse to pan.",
            "flags": 48,
            "hasliked": 0,
            "id": "Wsj3Dm",
            "likes": 4,
            "name": "Interactive Mandelbulb Explorer",
            "published": 3,
            "tags": [
                "mandelbulb"
            ],
            "usePreview": 0,
            "username": "levkruglyak",
            "viewed": 536
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 buf = texture(iChannel0,fragCoord.xy / iResolution.xy);\n    \n    vec3 col = buf.xyz/buf.w;\n    col = pow(col,vec3(1./2.2));    \n    \n\tfragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvec3 rotateside(vec3 z, float theta) {\n    vec3 p = z;\n    float c = cos(theta);\n    float s = sin(theta);\n    p.xz = vec2(c*p.x + s*p.z, c*p.z-s*p.x);\n    return p;\n}\n\nvec3 rotatex(vec3 z, float theta) {\n    vec3 p = z;\n    float c = cos(theta);\n    float s = sin(theta);\n    p.yz = vec2(c*p.y + s*p.z, c*p.z-s*p.y);\n    return p;\n}\n\nfloat sensitivity = 100.;\nfloat rot1 =0.;\nfloat rot2 = 0.;\nvec2 GetDist(vec3 p) {\n    vec3 z = rotateside(rotatex(p,rot1),rot2);\n    \n\treturn mandelbulb(z,0.);\n}\n\nvec3 hue(\n    vec3 inp,  // color to transform\n    float H\n)\n{\n  float U = cos(H*3.1415/180.);\n  float W = sin(H*3.1415/180.);\n\n  vec3 ret;\n  ret.x = (.299+.701*U+.168*W)*inp.x\n    + (.587-.587*U+.330*W)*inp.y\n    + (.114-.114*U-.497*W)*inp.z;\n  ret.y = (.299-.299*U-.328*W)*inp.x\n    + (.587+.413*U+.035*W)*inp.y\n    + (.114-.114*U+.292*W)*inp.z;\n  ret.z = (.299-.3*U+1.25*W)*inp.x\n    + (.587-.588*U-1.05*W)*inp.y\n    + (.114+.886*U-.203*W)*inp.z;\n  return ret;\n}\n\nvec3 format(float ot, float color) {\n    if (ot ==0.){\n     \treturn vec3(0);   \n    }\n    float bright = (1.-1.5*pow(ot/float(MAX_STEPS),1.1));\n    return hue(vec3(1,0,0), 70.*color+100.)*bright;\n \treturn bright*hue(vec3(0,1,0), 1.+clamp(color,3.,20.)*80.);   \n}\n\n#define maxSteps 200\nfloat maxDist = 100.;\nfloat surfDist = 0.0001;\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n    surfDist = GetDist(ro).x/1000.;\n    float col = 0.;\n   \tfloat dO=0.;\n    int ot = maxSteps-1;\n    for(int i=0; i<maxSteps; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 dist = GetDist(p);\n        float dS = dist.x;\n        dO += dS;\n        if(dS<surfDist) {ot = i; col = dist.y; break;}\n        if (dO>maxDist) { return vec2(0.0); }\n    }\n    \n    return vec2(ot,col);\n}\n\nvoid mainImage(out vec4 fragcolor, in vec2 fragCoord ){\n    float minResolution = min(iResolution.x,iResolution.y);\n    float eps = 1.*ZOOM/minResolution;\n    \n    //camera\n    vec3 cameraPosition = texture(iChannel1,vec2( 0./iResolution.x,0)).rgb;\n  \tvec3 cameraForward  = texture(iChannel1,vec2(10./iResolution.x,0)).rgb;\n    vec3 cameraRight    = texture(iChannel1,vec2(20./iResolution.x,0)).rgb;\n    vec3 cameraUpward   = texture(iChannel1,vec2(30./iResolution.x,0)).rgb;\n\n    //Seed\n    uvec2 up = uvec2(fragCoord);\n    uint seed =  up.x + 1920U*up.y + (1920U*1080U)*uint(iFrame);\n    \n    //Scaling\n    vec2 p = fragCoord + vec2(hash(seed++),hash(seed++))*2.-1.;//anti-aliasing\n    vec2 sp  = (p*2.-iResolution.xy)/minResolution*ZOOM;\n     \n   \t//Pixel Ray\n\tvec3 direction = normalize(cameraForward+sp.x*cameraRight+sp.y*cameraUpward);\n    \n    //Focal Point \n    vec3 focalPoint = direction*FOCAL_LENGTH;\n    \n    //Pick random point on Aperture\n    float randomAngle       = TAU*hash(seed++);\n    float randomRadius      = hash(seed++)*APERTURE;\n    vec3  randomAperturePos = (cos(randomAngle)*cameraRight+sin(randomAngle)*cameraUpward)*sqrt(randomRadius);\n    \n    //Point on Aperture to Focal Point\n    direction = normalize(focalPoint-randomAperturePos);\n    \n    \n    vec2 ot = RayMarch(\n            cameraPosition+randomAperturePos,\n            direction\n        );\n    //Final\n    vec3 col = format(ot.x, ot.y);\n    fragcolor = vec4(col,1.0);\n    \n    if(!(texture(iChannel1,vec2(1)).w>.0)){//No movement detected so keep previous frames\n    \tfragcolor += texture(iChannel0,fragCoord/iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec3  CameraPosition = texture(iChannel0,vec2( 0./iResolution.x,0)).rgb;\n  \tvec3  CameraForward  = texture(iChannel0,vec2(10./iResolution.x,0)).rgb;\n    vec3  CameraRight    = texture(iChannel0,vec2(20./iResolution.x,0)).rgb;\n    vec3  CameraUpward   = texture(iChannel0,vec2(30./iResolution.x,0)).rgb;\n    \n    if(iFrame==0){\n        CameraPosition = vec3( 0, 0,-2);\n        CameraForward  = vec3( 0, 0, 1);\n    \tCameraRight    = vec3( 1, 0, 0);\n    \tCameraUpward   = vec3( 0, 1, 0);\n    } \t\t\n    \n    bool W     = texture(iChannel1,vec2(87./256.,0)).x>0.;\n    bool A     = texture(iChannel1,vec2(65./256.,0)).x>0.;\n    bool S     = texture(iChannel1,vec2(83./256.,0)).x>0.;\n    bool D     = texture(iChannel1,vec2(68./256.,0)).x>0.;\n    bool Q     = texture(iChannel1,vec2(81./256.,0)).x>0.;\n    bool E     = texture(iChannel1,vec2(69./256.,0)).x>0.;\n    bool Shift = texture(iChannel1,vec2(16./256.,0)).x>0.;\n    bool Space = texture(iChannel1,vec2(32./256.,0)).x>0.;\n    bool mouseLeft = iMouse.z>0.;\n    bool keyPressed = W||A||S||D||Q||E||Shift||Space;\n    \n    \n    float stepSize = clamp(mandelbulb(CameraPosition,0.).x*.1,1e-9,.1);\n      \n    if(W)     CameraPosition += CameraForward*stepSize;\n    if(S)     CameraPosition -= CameraForward*stepSize;\n    if(D)     CameraPosition += CameraRight  *stepSize;\n    if(A)     CameraPosition -= CameraRight  *stepSize;\n    if(Space) CameraPosition += CameraUpward *stepSize;\n    if(Shift) CameraPosition -= CameraUpward *stepSize;\n        \n    if(Q){\n    \tCameraRight  = rotate(CameraRight, 0.01, CameraForward );\n        CameraUpward = rotate(CameraUpward, 0.01, CameraForward );\n    }\n    \n    if(E){\n    \tCameraRight  = rotate(CameraRight, -0.01, CameraForward );\n        CameraUpward = rotate(CameraUpward, -0.01, CameraForward );\n    }\n    \n    \n    if(mouseLeft){\n\t\tvec2 s = (iMouse.xy*2. - iResolution.xy)/iResolution.y;\n\t\t\t\n\t\tCameraForward = rotate(CameraForward, s.x*ZOOM*0.02, CameraUpward );\n        CameraRight  = normalize(cross(CameraUpward, CameraForward ));\n        \n\t\tCameraForward = rotate(CameraForward,-s.y*ZOOM*0.02, CameraRight  );\n\t\tCameraUpward = normalize(cross(CameraForward, CameraRight ));   \n\t\t\n    }\n    \n    vec3 Final = vec3(0);\n    if(abs(fragCoord.x-0.)<5.){\n    \tFinal = CameraPosition;\n    }else if(abs(fragCoord.x-10.)<5.){\n        Final = CameraForward;\n    }else if(abs(fragCoord.x-20.)<5.){\n        Final = CameraRight;\n    }else if(abs(fragCoord.x-30.)<5.){\n        Final = CameraUpward;\n    }\n    \n    fragColor = vec4(Final,float(keyPressed||mouseLeft));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//constants\n    #define PI  3.14159\n    #define TAU 6.28318\n\n//floor\n\t#define FLOOR\n\n//Fractal\n\t#define FRACTAL\n    #define ITERATIONS 3\n    #define SCALE      3.\n    #define OFFSET     vec3(.95,1.1,.5)\n\t#define ANGLE      vec3(0)\n\n//Render\n    #define MAX_STEPS    120\n    #define MAX_DEPTH    0.01\n    #define MAX_MARCH    20.\n\n//Sky&Sun\n    #define SKY_COLOR     vec3(.45,.56,1.)\n    #define SUN_VECTOR    vec3(0.57735026919)\n    #define SUN_COLOR     vec3(1.)\n    #define SUN_SIZE      0.001\n\n//Fog\n\t#define FOG_COLOR     vec3(0.5,0.6,0.7)\n\t#define FOG_INTENSITY 0.05\n\n//Camera\n    #define APERTURE     0.\n    #define FOCAL_LENGTH 3.\n\t#define ZOOM        1.\n\n//Occlusion\n\t#define OCCLUSION_SPREAD    10.\n    #define OCCLUSION_INTENSITY .2\n    #define OCCLUSION_SAMPLES   3\n\n\n//rotates vector around another\nvec3 rotate(vec3 v1,float angle,vec3 v2 ){\n\tfloat c = cos( angle );\n\tfloat s = sin( angle );\n\n\treturn vec3(\n\t\tv1.x * ( c + v2.x * v2.x * ( 1. - c )            ) +\n\t\tv1.y * (     v2.x * v2.y * ( 1. - c ) - v2.z * s ) +\n\t\tv1.z * (     v2.x * v2.z * ( 1. - c ) + v2.y * s ),\n\n\t\tv1.x * (     v2.y * v2.x * ( 1. - c ) + v2.z * s ) +\n\t\tv1.y * ( c + v2.y * v2.y * ( 1. - c )            ) +\n\t\tv1.z * (     v2.y * v2.z * ( 1. - c ) - v2.x * s ),\n\n\t\tv1.x * (     v2.z * v2.x * ( 1. - c ) - v2.y * s ) +\n\t\tv1.y * (     v2.z * v2.y * ( 1. - c ) + v2.x * s ) +\n\t\tv1.z * ( c + v2.z * v2.z * ( 1. - c )            )\n\t);\n}\n\n//Palette Creator\nvec3 getPaletteColor( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(TAU*(c*t+d) );\n}\n\n//hashing noise by IQ\nfloat hash( uint n ) {\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\n//simple sky model\nvec3 getSkyColor(vec3 dir){\n    vec3 d = dir-SUN_VECTOR;\n    return SKY_COLOR + SUN_COLOR*min(SUN_SIZE/dot(d,d),1.);\n}\n\n//simple fog\nvoid applyFog(inout vec3 c, float t){\n    c = mix(FOG_COLOR, c, exp( -t*FOG_INTENSITY ));\n}\n\n//distance to box \nfloat sdBox( vec3 p, vec3 b ){\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n//initializing a const rotation matrix based in ANGLE\nconst vec3 si = sin(ANGLE*TAU);\nconst vec3 co = cos(ANGLE*TAU);   \nconst mat3 xrot = mat3(\n         1   , 0   , 0   ,\n         0   , co.x, si.x,\n         0   ,-si.x, co.x\n    );  \nconst mat3 yrot = mat3(\n         co.y, 0   ,-si.y,\n         0   , 1   , 0   ,\n         si.y, 0   , co.y\n    );\nconst mat3 zrot = mat3(\n         co.z, si.z, 0   ,\n        -si.z, co.z, 0   ,\n         0   , 0   , 1\n    );  \nconst mat3 m = xrot*yrot*zrot;\n\n#define iterations 15\nfloat bailout = 1.5;\nfloat power = 8.;\n\nvec2 mandelbulb(vec3 pos, float rot) { \n\n    pos = mod(pos + vec3(5.0), 10.0) - vec3(5.0);\n   \tvec3 z = pos;\n    float dr = 1.0;\n    float r = 0.0;\n    int orbit = 0;\n    for (int i = 0; i < iterations; i++) {\n     \tr = length(z);\n        orbit = i;\n        if (r > bailout) { break;}\n        float theta = acos(z.z/r)+rot;\n        float phi = atan(z.y,z.x);\n        dr = pow(r,power-1.0)*power*dr + 1.0;\n        \n        float zr = pow(r,power);\n        theta = theta*power;\n        phi = phi*power;\n        \n        z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n        z+= pos;\n    }\n    return vec2(0.5*log(r)*r/dr, orbit);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}