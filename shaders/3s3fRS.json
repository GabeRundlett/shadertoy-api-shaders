{
    "Shader": {
        "info": {
            "date": "1605352103",
            "description": "It's a dragon rawrr",
            "flags": 0,
            "hasliked": 0,
            "id": "3s3fRS",
            "likes": 4,
            "name": "Dragon Tail",
            "published": 3,
            "tags": [
                "dragon",
                "wings",
                "tail"
            ],
            "usePreview": 0,
            "username": "Roninkoi",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAXIT 160\n#define EPSILON 0.005\n \n#define minx4(a, b) ((a.w) < (b.w) ? (a) : (b))\n#define minx2(a, b) ((a.x) < (b.x) ? (a) : (b))\n\n#define TAILCOL 1.0\n#define WINGCOL 2.0\n \nmat3 rotX(float a)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(a), -sin(a),\n        0., sin(a), cos(a)\n    );\n}\n \nmat3 rotY(float a)\n{\n    return mat3(\n        cos(a), 0.0, -sin(a),\n        0., 1., 0.,\n        sin(a), 0.0, cos(a)\n    );\n}\n \nmat3 rotZ(float a)\n{\n    return mat3(\n        cos(a), -sin(a), 0.,\n        sin(a), cos(a), 0.,\n        0., 0., 1.\n    );\n}\n\nfloat t;\n\nfloat sphere(vec3 r, float a)\n{\n    return length(r) - a;\n}\n \nfloat torus(vec3 r, vec2 a)\n{\n    vec2 p = vec2(length(r.xz) - a.x, r.y);\n    return length(p) - a.y;\n}\n \nfloat plane(vec3 r, vec3 o, vec3 n) {\n    return dot(r - o, n);\n}\n\nfloat cylinder(vec3 r, vec2 a)\n{\n\tvec2 p = abs(vec2(length(r.xz), r.y)) - a;\n\t\n\treturn min(max(p.x, p.y), 0.0) + length(max(p, 0.));\n}\n\nfloat hash(vec2 r) {\n    return fract(sin(dot(r, vec2(15.5921, 96.654654))) * 23626.3663);\n}\n\nfloat tail(vec3 r, vec3 a)\n{\n\tfloat s = max(1., r.y*0.05);\n\tr.z += 2.1;\n\tr *= rotY(r.y * 0.1 * sqrt(s));\n\tr.x += sin(r.y * 0.5 - t) * 5. / s;\n\tr *= rotY(r.y * 0.1 + t);\n\ta.xz /= s;\n    vec3 p = (abs(r) - a);\n\tp.xz /= max(1., p.y * 0.4);\n\t\n\tfloat u = 4.;\n\tp.y = mod(p.y + u, u*0.78) - u;\n\tp.y *= 0.4;\n\tp += min(sin(length(p.xz+p.y*1.6)*5.), 0.) * length(a.xz) * 0.5;\n\t\n    return length(max(p, 0.));\n}\n\nfloat wing(vec3 r, vec3 a)\n{\n\tr *= rotZ(r.x * 0.006 * cos(t + 0.7));\n\tr.x = abs(r.x);\n\tr.y -= 5.;\n\tr.z -= 15.;\n\tr.y -= sin(r.x * 0.07 + 0.8 - t*1.) * 2.5 + \n        sin(r.x * 1.55 + 0.5) * abs(sin(t * 4.51) * sin(t*2.21)) * 0.3 - 1.5;\n\tr *= rotX(sin(5.5*t)*0.1 + 0.01 * r.x * sin(3.2*t)*0.2 + r.x * 0.01);\n\t\n    vec3 p = (abs(r) - a);\n\tp.z -= p.x * 0.03;\n\tp.z -= 1. / p.x * 14.0;\n\tp.y -= p.x * 0.02;\n\tp.y -= 0.2 / (sin(p.x*0.02));\n\t\n\tp.z -= (0.5-sign(r.z)) * 0.1 / max(0.1, abs(sin(p.x*0.8))) * (sin(p.x*0.25 + 1.8)*0.6+1.0);\n\tp.y += 2.0/max(1.1, abs(p.z));\n\n    return length(max(p, 0.));\n}\n \nfloat shade(vec3 n, vec3 rd)\n{\n    return clamp(max(dot(n, -rd), 0.) + 1., 0., 1.);\n}\n \nvec3 fog(float z, vec3 col, vec3 fogCol)\n{\n    return mix(fogCol, col, exp(-z));\n}\n\nmat3 obj;\n\nvec2 map(vec3 r)\n{    \n\tobj = mat3(1.6)* rotY(t) * rotX(sin(t)*0.1+1.5);\n\tr.y += 2. + sin(t) * 2. + 4.;\n\tvec3 rb1 = obj * r;\n\trb1.y += 12.;\n\t\n\tfloat s = 15.;\n\tvec2 b1 = vec2(\n\t\ttail(rb1, vec3(1., 4., 1.)), TAILCOL\n\t);\n\tvec3 rb2 = r;\n\tvec2 b2 = vec2(\n\t\twing(rb2, vec3(54., 2.4, 6.)), WINGCOL\n\t);\n\n    return minx2(b1, b2);\n}\n\nvec3 matCol(vec2 o)\n{\n    if (o.y == TAILCOL)\n        return vec3(0.1 + o.x * 40., 0.3, 0.);\n    \n    if (o.y == WINGCOL)\n        return vec3(0.05, 0.15, 0.0);\n    \n    return vec3(0.2, 0.4, 0.);\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    t = iTime;\n   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n   \n    mat3 cam = rotY(-PI) * rotX(0.3);\n       \n    vec3 ro = vec3(0., 2.0, -10.0);\n    vec3 rd = cam * normalize(vec3(uv * 2., -1.));\n    vec3 r = ro;\n   \n    vec3 bcol = vec3(0.2, 0.0, 0.0)*(4.5+sin(t*10.-abs(uv.y*uv.x) * 15.)) / 15.;\n    vec4 col = vec4(0.);\n    col.rgb = bcol;\n   \n    float sh = 1.;\n   \n    float glow = 0.;\n   \n    int ch = 1;\n   \n    for (int i = 0; i < MAXIT; ++i) {\n        vec2 d = map(r);\n        float z = length(r - ro);\n       \n        glow += exp(-d.x);\n    \n        if (d.x < EPSILON) {\n            col.rgb = mix(col.rgb, \n\t\tmatCol(d), \n\t\tshade(normalize(r), rd));\n            col.rgb = fog(z * 0.03, col.rgb, bcol);\n            break;\n        }\n       \n        d.x *= 0.8 - 0.2 * hash(uv);\n\t\tr += rd * d.x * 0.3;\n       \n        sh = (float(i) / float(MAXIT));\n    }\n   \n    if (sh < 0.5)\n\tcol.rgb *= exp(-sh * 2.0 + 1.0);\n   \n    fragColor = vec4(col.rgb, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}