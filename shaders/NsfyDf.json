{
    "Shader": {
        "info": {
            "date": "1642779683",
            "description": "It is just a spin off from https://www.shadertoy.com/view/XsXSWS applying some distortion\n\nNow with simplex noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsfyDf",
            "likes": 2,
            "name": "Fork Fire shade zovox 632",
            "published": 3,
            "tags": [
                "fire"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "// This is just a spin off from https://www.shadertoy.com/view/XsXSWS applying some distortion and minor tweaks\n\n#define timeScale \t\t\tiTime * 1.0\n#define fireMovement \t\tvec2(-0.01, -0.5)\n#define distortionMovement\tvec2(-0.01, -0.3)\n#define normalStrength\t\t40.0\n#define distortionStrength\t0.1\n\n// #define DEBUG_NORMAL\n\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626, // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    // First corner\n    vec2 i = floor(v + dot(v, C.yy) );\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                     + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat fbm ( in vec2 p ) {\n    float f = 0.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*snoise(p); p = m*p;\n    f += 0.2500*snoise(p); p = m*p;\n    f += 0.1250*snoise(p); p = m*p;\n    f += 0.0625*snoise(p); p = m*p;\n    f = 0.5 + 0.5 * f;\n    return f;\n}\n\n/** DISTORTION **/\nvec3 bumpMap(vec2 uv) { \n    vec2 s = 1. / iResolution.xy;\n    float p =  fbm(uv);\n    float h1 = fbm(uv + s * vec2(1., 0));\n    float v1 = fbm(uv + s * vec2(0, 1.));\n       \n   \tvec2 xy = (p - vec2(h1, v1)) * normalStrength;\n    return vec3(xy + .5, 1.);\n}\n\n/** MAIN **/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * timeScale);\n    \n    #ifdef DEBUG_NORMAL\n    \tfragColor = vec4(normal, 1.0);\n    \treturn;\n    #endif\n    \n    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);\n    uv += displacement; \n    \n    vec2 uvT = (uv * vec2(1.0, 0.5)) + timeScale * fireMovement;\n    float n = pow(fbm(8.0 * uvT), 1.0);    \n    \n    float gradient = pow(1.0 - uv.y, 2.0) * 5.;\n    float finalNoise = n * gradient;\n    \n    vec3 color = finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}