{
    "Shader": {
        "info": {
            "date": "1682760255",
            "description": "My entry for SESSIONS 2023",
            "flags": 32,
            "hasliked": 0,
            "id": "ctt3z2",
            "likes": 9,
            "name": "SESSIONS 2023 jam entry",
            "published": 3,
            "tags": [
                "tunnel",
                "jam",
                "sessions"
            ],
            "usePreview": 0,
            "username": "kostik1337",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define INF 1e10\n#define time iTime\n#define rep(p,s) (mod(p,s)-s/2.)\n#define rep2(p,s) (abs(rep(p,2.*s))-s/2.)\n#define PI 3.14159265\n\nfloat hash(float x) {return fract(sin(x)*3458.2551);}\nfloat hash(vec3 x) {return hash(dot(x, vec3(34.67546,65.34135,23.4567457)));}\n\nfloat ffti(float t) {return 0.;}\nfloat ffts(float t) {return 0.;}\nvec4 back(vec2 uv) {return texture(iChannel0, uv);}\n\nvec2 polar(vec2 p, float n) {\n  p = vec2(length(p), atan(p.y,p.x));\n  p.y = rep2(p.y, 2.*PI/n);\n  return p.x*vec2(cos(p.y),sin(p.y));\n}\n\nmat2 mr(float t) {float c=cos(t),s=sin(t); return mat2(c,s,-s,c);}\n\nfloat box(vec3 p, vec3 s) {\n  p = abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\nvec3 ct(vec3 p) {\n  if(p.x<p.y)p.xy=p.yx;\n  if(p.y<p.z)p.yz=p.zy;\n  if(p.x<p.y)p.xy=p.yx;\n  return p;\n}\n\nfloat maxx(vec3 p) {return max(p.x, max(p.y,p.z));}\n\nvec3 glow=vec3(0.);\n\nfloat map(vec3 p, float t) {\n  p.z += .6*t + .6*ffti(.1);\n  vec3 op=p;\n  float m=INF;\n  \n  p.xy=polar(p.xy, 7.);\n  float bound = p.x-.2;\n  \n  vec3 s = vec3(1.2);\n  for(float i=0.;i<3.;++i) {\n    p.x += (.1*time + .3*op.z) * exp2(-i);\n    p = rep2(p, s);\n    \n    s *= .65;\n    s.xy *= mr(.17);\n    s = s.zxy;\n    if(i==1.) p.xy *= mr(PI/4.);\n    \n    p = ct(abs(p));\n    float boxs=maxx(s)/(i==0.?10.:100.);\n    float m1=box(p, vec3(boxs, boxs, INF).zxy);\n    float gpow=pow(sin(length(10.*op.xy)+op.z+5.*t)*.5+.5, 4.);\n    vec3 gcol=vec3(1.4,1.,1.);\n    gcol.xz *= mr(.4*op.z);\n    gcol=abs(gcol);\n    glow += gpow * .001*gcol / (m1+mix(.03,.05, hash(p+time)));\n    m = min(m, m1);\n  }\n  m= max(m,-bound);\n  \n  return m;\n}\n\nvec3 norm(vec3 p) {\n  vec2 E=vec2(.001,.0);\n  return normalize(vec3(\n    map(p+E.xyy,time),map(p+E.yxy,time),map(p+E.yyx,time)\n  )-map(p,time));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 c=vec3(0.);  \n  vec3 O=vec3(0.,0.,-1.), D = vec3(uv,1.);\n  D.z = (1.+.6*length(D.xy));\n  D = normalize(D);\n  D.xz *=mr(.15*sin(.2*time));\n  D.yz *=mr(.15*sin(.22*time));\n  float d = 0.;\n  bool hit = false;\n  for(float i=0.;i<64.;++i) {\n    vec3 p=O+D*d;\n    float m=map(p,time + .1*hash(vec3(uv, time)));\n    d += m;\n    if(m<.001*d) {\n      hit = true;\n      break;\n    }\n  }\n  c += min(vec3(1.),glow)* exp(-d*.1);\n  \n  uv = fragCoord/iResolution.xy;\n  if(hit) {\n    vec3 p=O+D*d;\n    vec3 n=norm(p);\n    float e=.03;\n    vec2 off=n.xy*.4;\n    vec3 prev=vec3(\n      back(uv+off*(1.+e)).r,\n      back(uv+off).g,\n      back(uv+off*(1.-e)).b\n    );\n    c += prev.rgb * mix(.5,1.,min(1.,8.*ffts(.12)));\n  } else {\n    c = mix(c, back(uv).rgb, .8);\n  }\n\n\tfragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}