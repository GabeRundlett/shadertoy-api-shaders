{
    "Shader": {
        "info": {
            "date": "1571810566",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "WddSzM",
            "likes": 5,
            "name": "shadetober #18 (misfit)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "#define HEIGHT 8.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // we want a bunch of little cells, so we're going to\n    // scale uv to some number above 1.0 and then use fract\n    // to work within the familiar [0, 1] space\n    \n    // we also want the cells to be square-ish so to do that\n    // we define how many should fit along y and then scale the\n    // x dimension by the aspect ratio to make the space 1:1.\n    // Finally, take the floor of x so that it's an exact fit and\n    // make peace with the fact that that they're not perfectly square.\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvo = uv; // original uv\n    float asp = iResolution.x / iResolution.y;\n    vec2 gridScaling = vec2(floor(asp * HEIGHT), HEIGHT);\n    uv *= gridScaling;\n    \n    // keep track of where we are in the world grid\n    vec2 gridCoords = floor(uv);\n    \n    // applying fract to uv lets us work within the original little [0,1] window for each cell\n    uv = fract(uv);\n    uv -= .5;\n    \n    // our target cell is the \"misfit\"\n    const vec2 target = vec2(9., 5.);\n    \n    // background color is just the sine of the distance field for each cell\n    // we modulate it by time to make it look all freaky-deaky\n    vec3 col = vec3(sin(length(uv) * 50. - (iTime * 4.))) * .2;\n    \n    float regularCell = sign(abs(length(gridCoords - target))); // 0. if a normal cell, 1. if the misfit\n    float deformation = mix(\n        sin(iTime*13.) / .3, \n        sin((iTime + gridCoords.y)*2. - sin(uvo.x)) / .3,\n        regularCell);\n    uv *= clamp(deformation, 1., 10.);\n    vec3 mixcolor = mix(vec3(1.,1.,0.4), vec3(uvo.xy, 1.), regularCell);\n\tcol = mix(col, mixcolor, smoothstep(.5, .6, 1.-vec3(length(uv))));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}