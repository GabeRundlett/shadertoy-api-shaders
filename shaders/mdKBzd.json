{
    "Shader": {
        "info": {
            "date": "1698546950",
            "description": "somewhere i set metal light map, but in here i said \"turn on the light!\"\ndesigned for the LiJiYong studios ( lijiyong.com )",
            "flags": 0,
            "hasliked": 0,
            "id": "mdKBzd",
            "likes": 11,
            "name": "raymarching tri reps",
            "published": 3,
            "tags": [
                "wave",
                "triangle",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 874
        },
        "renderpass": [
            {
                "code": "#define I iResolution\n#define PI 3.1415926\n#define rot( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n#define T(a) fract(iTime * a) * PI * 4.\n#define v( a ) clamp( a, 0., 1. )\n\n// smax\nfloat sm(float a, float b, float c) {\n  float d = clamp(.5 + .5 * (-b + a) / c, 0., 1.);\n  return -(mix(-b, -a, d) - c * d * (1. - d));\n}\n\nfloat mExp( vec2 p1, vec2 p2, in vec2 uv ){\n    return ( uv.y - p2.y ) * ( p1.x - p2.x ) -( ( uv.x - p2.x ) * ( p1.y - p2.y ) );\n}\n// IQ\nfloat tri( in vec2 p, in float r, int invert )\n{\n    if( invert == 1 )\n        p.y *= -1.;\n        \n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvec2 rep( inout vec2 p, vec2 size)\n{\n\n    vec2 h = size * .5;\n    vec2 cell = floor((p + h) / size);\n    \n    p = mod(p + h, size) - h;\n    \n    return cell;\n}\n\nfloat frame( vec3 p, float h2, int inv ){\n    return sm(\n        max(\n            tri( p.xz, .4, inv ),\n            abs( p.y ) - h2\n        ),\n        -max(\n            tri( p.xz, .3, inv ),\n            abs( p.y ) - h2\n        ),\n        .03\n    );\n}\n\nfloat cu( vec3 p, float h1, float h2, int inv ){\n\n    return min(\n        sm(\n            tri( p.xz, .2, inv ),\n            abs( p.y ) - h1,\n            .05\n        ),\n        frame( p, h2, inv )\n    );\n}\n\nfloat c1( vec3 p ){\n\n    p.y += cos( p.x - T( .125 ) ) * .1;\n    p.y += sin( p.z - T( .125 ) ) * .1;\n    \n    p.xy *= rot( PI * .05 ),\n    p.yz *= rot( PI * -.3 );\n    p.z -= iTime * .3;\n    \n    vec2 cell = rep( p.xz, vec2( .85, 1.05 ) );\n\n    p.y += cos( abs( cell.x ) - T( .125 ) ) * .05;\n    p.y += sin( abs( cell.y ) - T( .125 ) ) * .05;\n\n    bool b = mod( cell.y, 1. ) == 0.;\n\n    return cu( p, b ? .1 : .2,  b ? .2 :.1, 0 );\n}\n\nfloat c2( vec3 p ){\n\n    p.y += cos( p.x - T( .125 ) ) * .1;\n    p.y += sin( p.z - T( .125 ) ) * .1;\n    \n    p.xy *= rot( PI * .05 ),\n    p.yz *= rot( PI * -.3 );\n    \n    p.z -= iTime * .3;\n    \n    vec3 p2 = p;\n    \n    // p2.z *= -1.;\n    p2.x += 0.43;\n    p2.z += .48;\n    \n\n    vec2 row = rep( p2.xz, vec2( .85, 1.05 ) );\n    \n    p2.y += cos( abs( row.x ) - T( .125 ) ) * .05;\n    p2.y += sin( abs( row.y ) - T( .125 ) ) * .05;\n    \n    \n    bool b2 = mod( row.x, 2. ) == 0.;\n    \n    return cu( p2, b2 ? .2 : .1,  b2 ? .1 :.2, 1 );\n}\n\nfloat df( vec3 p ){\n    \n    return min( c1( p ), c2( p ) );\n}\n\n// calcNormal (IQ)\nvec3 nrm(in vec3 b) {\n  vec2 a = vec2(1, -1) * .5773;\n  return normalize(a.xyy * df(b + a.xyy * 5e-4) + a.yyx * df(b + a.yyx * 5e-4) +\n                   a.yxy * df(b + a.yxy * 5e-4) + a.xxx * df(b + a.xxx * 5e-4));\n}\n\nvec3 tex( vec3 p ){\n    p.xy *= rot( PI * -.1 );\n    p.x = mod( p.x, 4. ) - 3.;\n    float a = abs( p.x ) - 2.;\n    return vec3( cos( p.z / 2. + .5 ) * a, cos( a ) * sin( a ), cos( a ) );\n}\n\nfloat S( vec3 p, vec3 ca, vec3 r, float q ){\n    return v( pow( dot( nrm( p ), normalize( normalize( ca ) - r ) ), q ) );\n}\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = ( V * 2. - I.xy ) / min( I.x, I.y );\n    \n    vec3 c, p, o = vec3( 0., 0., -2. ), r = vec3( u * .9, 1. ), ca = vec3( 0., .7, 0. );\n    \n    \n    float t, d, i, g = 1. - smoothstep( 0., 1.2, length( u * vec2( .6, 1. ) ) - .1 );\n    \n    c += vec3( 1, 2, 3 ) * .1 * g;\n    \n    for( ; i < 64.; i++ )\n        p = o + r * t,\n        d = df( p ),\n        //ca.x = sin( p.x + cos( p.y ) ) * .1,\n        t += d * .66667;\n    \n    if( d < 1e-3 ){\n        \n        ca.x += cos( T( .125 ) ) * .5;\n        ca.z += sin( T( .125 ) ) * .5;\n        \n        float dif = max(dot(ca, nrm(p) ), 0.0);\n\n        c += pow( dif, 2. ) * vec3( .1, .3, .4 );\n        \n        // c += tex( reflect( nrm( p * .1 ), vec3( p.z / 2. + .5 ) ) ) * pow( dif, 12. );\n\n        // spot\n        ca.z += .5;\n        float ss = S( p, ca, r, 5. );\n        ss *= g;\n        c += clamp( ss, 0., .3 );\n        \n        vec3 a = vec3( 0., .5, 0. );\n        a.x += cos( T( .125 ) );\n    \n        float sss = S( p, a, r, 17. );\n        sss *= dif;\n        c += clamp( vec3( sin( T( .125 ) ), 1, 3 ) * .555 * sss, 0., .7 );\n        \n    }\n    \n    c = clamp( c, 0., .8 );\n\n    \n    \n    c = mix(\n        c,\n        vec3( 0. ),\n        smoothstep( 0., 1.6, length( u * vec2( .5, 1. ) + vec2( 0., .1 ) ) - .01 ) * cos( iTime * .25 )\n    );\n    \n    // Output to screen\n    U = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}