{
    "Shader": {
        "info": {
            "date": "1614706175",
            "description": "test for integration with the API ",
            "flags": 32,
            "hasliked": 0,
            "id": "MdyfDm",
            "likes": 4,
            "name": "oil",
            "published": 3,
            "tags": [
                "oil"
            ],
            "usePreview": 0,
            "username": "louis_C",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "float sv(vec2 uv){return length(texture(iChannel0, uv).xyz);}    \nvec2 g(vec2 uv,float e){    \nreturn vec2(sv(uv+vec2(e,0.))-sv(uv-vec2(e,0.)),sv(uv+vec2(0.,e))-sv(uv-vec2(0.,e)))/e;}\nvoid mainImage( out vec4 k, vec2 p )\n{\n    vec2 uv = p/iResolution.xy;\n     vec3 n = vec3(g(uv,0.001),200.);\n    n=normalize(n);\n    vec3 li =vec3(0.5,0.5,1.);\n    float sha=clamp(dot(n,li),0.,1.0);\n\tvec3 img = texture(iChannel0, uv).xyz;\n\tk =vec4(img*sha,0.);\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "lowp float RGBToL(lowp vec3 f){lowp float g=min(min(f.r,f.g),f.b),r=max(max(f.r,f.g),f.b);return(r+g)/2.;}lowp vec3 RGBToHSL(lowp vec3 f){lowp vec3 i;lowp float g=min(min(f.r,f.g),f.b),r=max(max(f.r,f.g),f.b),m=r-g;i.b=(r+g)/2.;if(m==0.)i.r=0.,i.g=0.;else{if(i.b<.5)i.g=m/(r+g);else i.g=m/(2.-r-g);lowp float v=((r-f.r)/6.+m/2.)/m,b=((r-f.g)/6.+m/2.)/m,H=((r-f.b)/6.+m/2.)/m;if(f.r==r)i.r=H-b;else if(f.g==r)i.r=1./3.+v-H;else if(f.b==r)i.r=2./3.+b-v;if(i.r<0.)i.r+=1.;else if(i.r>1.)i.r-=1.;}return i;}lowp float HueToRGB(lowp float r,lowp float f,lowp float i){if(i<0.)i+=1.;else if(i>1.)i-=1.;lowp float l;if(6.*i<1.)l=r+(f-r)*6.*i;else if(2.*i<1.)l=f;else if(3.*i<2.)l=r+(f-r)*(2./3.-i)*6.;else l=r;return l;}lowp vec3 HSLToRGB(lowp vec3 f){lowp vec3 i;if(f.g==0.)i=vec3(f.b);else{lowp float l;if(f.b<.5)l=f.b*(1.+f.g);else l=f.b+f.g-f.g*f.b;lowp float r=2.*f.b-l;i.r=HueToRGB(r,l,f.r+1./3.);i.g=HueToRGB(r,l,f.r);i.b=HueToRGB(r,l,f.r-1./3.);}return i;}\n\n    float ov(float base, float blend) {\n    return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));}\nvec3 ov3(vec3 a, vec3 b){\n    return vec3(ov(a.x,b.x),ov(a.y,b.y),ov(a.z,b.z));}\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 u2 = fract(uv*vec2(1.,2.));\n    vec3 diff = vec3(vec2(1.)/iResolution.xy,0.);\n    vec2 fac = vec2(iResolution.x/iResolution.y,1.);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    float mp =smoothstep(0.15,0.,length((mouse-u2)*fac));\n    float mp2 =smoothstep(0.45,0.,length((mouse-uv)*fac));\n    \n    vec2 uv2 = vec2(uv.x,map(u2.y,0.,1.,0.,0.5));\n    vec2 uv3 = vec2(uv.x,map(u2.y,0.,1.,0.5,1.));\n    \n    float center = texture(iChannel0,uv2).a;\n    float top = texture(iChannel0,uv-diff.zy).a;\n    float left = texture(iChannel0,uv-diff.xz).a;\n    float right = texture(iChannel0,uv+diff.xz).a;\n    float bottom = texture(iChannel0,uv+diff.zy).a;\n    \n    float bb = texture(iChannel0,uv3).a;\n    \n    float red = -(bb-0.5)*2.+(top+left+right+bottom-2.);\n    red += mp;red *= 0.995;red *= step(0.1,iTime);red = 0.5 +red*0.5;\n    red = clamp(red,0.,1.);\n    \n    float f = mix( red,center,step(0.5,uv.y));\n    float k2 = mix(0.55,0.9,mix(texture(iChannel0,uv*vec2(1.,0.5)).a,0.5,mp2));\n    vec2 p2 =uv;\t\n\t\t\t\t\t\t\n\tp2 = 5.*p2;\t\n    vec4 k3 = k2 +sin(2.*sin(vec4(k2)*10.)+p2.yxyy-p2.yyxy*.5)/12.;\n    lowp float lightness = RGBToL(k3.rgb);\n    float s1 = 0.144;\n    float s2 = -0.312;\n    float s3 = -0.144;\n    float m1 = 0.232;\n    float m2 = -0.192;\n    float m3 = 0.128;\n    float l1 = -0.136;\n    float l2 = 0.096;\n    float l3 = 0.136;\n    lowp vec3 s = smoothstep(1./1.5,0.,lightness)*(vec3(s1,s2,s3));\n    lowp vec3 m = smoothstep(0.,1./3.,lightness)*smoothstep(1.,2./3.,lightness)*(vec3(m1,m2,m3));\n    lowp vec3 l = smoothstep(2./3.,1.,lightness)*(vec3(l1,l2,l3));\n    lowp vec3 newColor = k3.xyz+s+m+l ;\n        newColor = clamp(newColor, 0.0, 1.0); \n\t\tlowp vec3 newHSL = clamp(RGBToHSL(newColor),0.,1.);\n        lowp float oldLum = RGBToL(k3.xyz);\n        k3.xyz = HSLToRGB(vec3(newHSL.x, newHSL.y, oldLum));\n    vec3 mask = mix(vec3(0.,0.,0.368),vec3(-3.,0.12,0.12),distance((-1.+2.*uv)*0.464,vec2(0.)));\n    vec3 k4 =ov3(clamp(k3.xyz,0.,1.),mask);\n    fragColor = vec4(vec3(k4),f);\n}\n    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}