{
    "Shader": {
        "info": {
            "date": "1462850960",
            "description": "Use UV shifting to make appearance of motion and scale.  Buffer loop~",
            "flags": 32,
            "hasliked": 0,
            "id": "4sVSRh",
            "likes": 19,
            "name": "JCVD Forever",
            "published": 3,
            "tags": [
                "trails"
            ],
            "usePreview": 0,
            "username": "knappador",
            "viewed": 749
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// standard UV\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // change to texture A at bottom to explore buffers\n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // standard UV\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // we use input and A (which is reading from here, B)\n    vec4 aCol = texture(iChannel1, uv);\n\tvec4 vDam = texture(iChannel0, uv);\n    \n    // calculate difference from approximate green color to \n    // give us a concept of distance\n    float bDist = vDam.b - 0.15;\n    float rDist = vDam.r - 0.03;\n    float gDist = vDam.g - 0.67;\n    \n    // squaring each distance makes it positive and accentuates differences\n    // square root of sum of squares is standard distance formulat\n    float dist = sqrt(rDist * rDist + bDist * bDist + gDist * gDist);\n    \n    // amplify a bit, cut noise, and clamp for using as mix factor\n   \tfloat damFactor = clamp(dist * 3.0 - 0.6, 0.0, 1.0);\n    fragColor = mix(aCol, vDam, damFactor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // standard 1:1 UV\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // use blown out coordinates to magnify JCVD\n    vec2 tuv = vec2(uv.x * 0.85 + 0.075, uv.y * 0.85 + 0.075);\n    vec4 bCol = texture(iChannel0, tuv);\n    \n    // generate a good shade for JCVD\n    vec4 gCol = vec4(0.5 + 0.6 * sin(iTime * 2.0), \n                     0.5 + 0.6 * cos(iTime * 3.0),\n                     0.5 + 0.6 * cos(iTime),\n                     1.0);\n    \n    // multiply JCVD by our good shade\n\tfragColor = bCol * gCol;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}