{
    "Shader": {
        "info": {
            "date": "1494832819",
            "description": "using analytical gradient noise of iq [url]https://www.shadertoy.com/view/XdXBRH[/url]\n+ flownoise",
            "flags": 0,
            "hasliked": 0,
            "id": "XdfBzH",
            "likes": 21,
            "name": "norm of gradient noise",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "fbm",
                "gradient",
                "analytic"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1056
        },
        "renderpass": [
            {
                "code": "// --- base gradient noise + derivative from iq https://www.shadertoy.com/view/XdXBRH\n// --- plus flownoise\n// see also \"laplacian\" noise: https://www.shadertoy.com/view/XsXBzH\n\nfloat T = 0.;\nvec2 hash( in vec2 x ) \n{\n    float t = T  * sign(mod(x.x+x.y,2.)-.5), // optional checker swirls\n          c = cos(t), s=sin(t);\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    x =  -1. + 2.*fract( 16. * k*fract( x.x*x.y*(x.x+x.y)) );\n    return x * mat2(c,-s,s,c); // flownoise\n // return vec2(cos(t+3.1416*x.x), s = sin(t+3.1416*x.x)); // iq variant\n}\n\n\n// return gradient noise (in x) and its derivatives (in yz)\nvec3 noised( in vec2 p )\n{\n    vec2 i = floor( p ),\n         f = fract( p );\n\n#if 1 // quintic interpolation\n    vec2 u = f*f*f*(f*(f*6.-15.)+10.),\n        du = 30.*f*f*(f*(f-2.)+1.);\n#else // cubic interpolation\n    vec2 u = f*f*(3.-2.*f),\n        du = 6.*f*(1.-f);\n#endif    \n    \n    vec2 ga = hash( i + vec2(0,0) ),\n         gb = hash( i + vec2(1,0) ),\n         gc = hash( i + vec2(0,1) ),\n         gd = hash( i + vec2(1,1) );\n    \n    float va = dot( ga, f - vec2(0,0) ),\n          vb = dot( gb, f - vec2(1,0) ),\n          vc = dot( gc, f - vec2(0,1) ),\n          vd = dot( gd, f - vec2(1,1) );\n\n    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd),   // value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  // derivatives\n                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));\n}\n\n// -----------------------------------------------\n \n\nvoid mainImage( out vec4 O,  vec2 p )\n{\n    O -= O; \n    float s = 1.; vec4 C = vec4(1.,.9,.8,0);\n    for (int i=0; i<4; i++) {\n        T = iTime; // * s;                            // optional *s\n\n        O +=  .3*length( noised( s*p/64.).yz ) *C; // /s;   // optional /s // strips\n    //  O += noised( s*p/64. ).x * vec4(-1,0,1,0) / s;      // color between strips\n        s *= 2.; C *= C;\n    \n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}