{
    "Shader": {
        "info": {
            "date": "1613924087",
            "description": "sonrisa v2",
            "flags": 0,
            "hasliked": 0,
            "id": "WlGfRW",
            "likes": 6,
            "name": "sonrisa v2",
            "published": 3,
            "tags": [
                "sonrisav2"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "//referencia \n///http://xdpixel.com/page/12/\n//http://xdpixel.com/wp-content/uploads/2019/02/opengl-texture-mapping-example.png\n//por jorge2017a1\n\n\n\n//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n     float planeDist1 = p.y+5.0;  //piso inf\n     float planeDist5 = -p.z+40.0;  //pared frente\n     \n    res =opU3(res, vec3(planeDist1,-1.0,8.)); \n    res =opU3(res, vec3(planeDist5,-1.0,12.)); \n    \n    \n    vec3 prA=p;\n    vec3 prB=p-vec3(2.,0.0,4.0);\n    \n    prA.x= opRep1D( prA.x, 4. );\n    prA.z= opRep1D( prA.z, 8. );\n    prB.x= opRep1D( prB.x, 4. );\n    prB.z= opRep1D( prB.z, 8. );\n    \n    float ds1=sdSphere(  prA, 2.0 );\n    float ds2=sdSphere(  prB, 2.0 );\n    \n    res =opU3(res, vec3(ds1,-1.0,10.)); \n    res =opU3(res, vec3(ds2,-1.0,11.)); \n   \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro) \n{\n    vec3 l = lp - p;\n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = normal;\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    vec3 lin = vec3(0.2);\n    lin += 1.0*dif*vec3(1, .97, .85);\n    lin += 2.5*spe*vec3(1, .97, .85)*dif;\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    \n    \n    return lin*atten;\n}\n\n\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n         \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    float intensity=1.0;\n     vec3 result;\n     result = lightingv3( nor, p, plight_pos,  rd,ro)*colobj*6.0;\n     \n     if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\nvec3 Ojo(vec2 uv, vec3 col )\n{\n    vec2 res=vec2(9999.0,-1.0);\n    \n    float radioOjo=0.15;\n    \n    float d0= sdCircle( uv-vec2(0.05,0.1), 0.07 );\n    \n    float d1= sdCircle( uv, radioOjo );\n    float d2= sdCircle( uv, radioOjo+0.05 );\n    float d3= sdBox( uv-vec2(0.0,-0.02), vec2(0.2,0.02) );\n    float d4= sdBox( uv-vec2(0.0,-0.13), vec2(0.2,0.12) );\n     \n    float dS= opS( d1,d2 );\n    dS= opS( d4,dS );\n    dS= opU( d3, dS );\n    \n    //mitad ojo\n    float dmitad= opS( d4,d1 );\n    dmitad= opU( d3,dmitad );\n    \n    d1= opS( d3,d1 );\n   \n    col = mix(col,vec3(0.0,0.0,0.)*1.2,S(dS,0.0));\n    col = mix(col,vec3(1.0)*1.2,S(dmitad,0.0));\n    col = mix(col,vec3(0.0)*1.2,S(d3,0.0));\n    col = mix(col,vec3(0.0,0.0,0.)*1.2,S(d0,0.0));\n    \n    return col;\n}\n\n\n\nvec3 Boca(vec2 uv, vec3 col )\n{\n    vec2 res=vec2(9999.0,-1.0);\n    \n    float radioOjo=0.4;\n    \n    float d0= sdCircle( uv-vec2(0.07,-0.35), 0.2 );\n    \n    float d1= sdCircle( uv, radioOjo );\n    float d2= sdCircle( uv, radioOjo+0.05 );\n    float d3= sdBox( uv-vec2(0.0,-0.02), vec2(radioOjo,0.02) );\n    float d4= sdBox( uv-vec2(0.0,0.25), vec2(radioOjo+0.1,radioOjo/2.0+radioOjo/8.0) );\n     \n    float dS= opS( d1,d2 );\n    dS= opS( d4,dS );\n    dS= opU( d3, dS );\n    \n    float bocaint=opS( d4,d2 );\n    d1= opS( d3,d1 );\n    d0= opI( d1,d0 );\n    \n    col = mix(col,vec3(1.)*1.2,S(bocaint,0.0));\n    col = mix(col,vec3(0.,.0,0.)*1.2,S(dS,0.0));\n    col = mix(col,vec3(1.0,0.465,0.3)*1.2,S(d0,0.0));\n    \n    \n    return col;\n}\n\n\n\nvec3 Sonrisa2d(vec2 uv )\n{\n    vec3 col =vec3(0.02,0.35,1.20)*1.25;\n    \n    float radio1=0.8;\n    float d1= sdCircle( uv, radio1 );\n    float d2= sdCircle( uv, radio1 +0.05 );\n    \n     \n    float dI= opS( d1,d2 );\n    col = mix(col,vec3(1.0,0.82,0.0)*1.2,S(d1,0.0));\n    col = mix(col,vec3(0.0,0.0,0.)*1.2,S(dI,0.0));\n    col= Ojo(uv-vec2(-0.3,0.2), col);\n    col= Ojo(uv-vec2(0.3,0.2), col);\n    \n    col= Boca( uv-vec2(0.0,-0.2), col );\n   \n    //fragColor = vec4(col,1.0);\n    return col;\n}\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if(id_material== 1.0 )\n    {\n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c;\n    }\n    \n\tif(id_material== 2.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n\tif(id_material== 3.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n\n    if (id_material==4.0)\n    { // nothing hit: background gradient\n     return vec3(0.2, 0.2, 0.2) * (-mObj.uv.y+1.2);\n    }\n    \n    if (id_material==5.0)\n    {\n        float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n\t\t// vary between red (0) and yellow (1)\n\t    return vec3( clamp(d,0.0,1.0) );\n    }\n    \n   \n     if (id_material==6.0)\n    {\n     vec3 pos=pp;\n    \n     vec4 mate = vec4(1.00,0.5,0.20,1.0)*1.25; \n     return mate.xyz;\n    }\n    \n    \n    \n     if (id_material==7.0)\n    {\n        float escala=0.25;\n    \t//float d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n        float d = mod(floor(p.x*escala*0.5)+floor(p.z*escala*1.0),2.0);\n\t\t\n        return vec3( clamp(d,0.0,1.0) );\n    }\n    \n    \n    \n     if (id_material==8.0)\n    {\n    \n\n        vec2 p2 = floor(p.xz*0.5);\n        float s = mod( p2.x + p2.y, 2.0 );\n        return vec3(1.0)*s;\n    }\n    \n    if (id_material==9.0)\n    {\n     vec3 pos=pp;\n    \n     vec4 mate = vec4(0.02,0.35,1.20,1.0)*1.25; \n     return mate.xyz;\n    }\n    \n    if (id_material==10.0)\n    {\n     vec3 pos=pp;\n    \n     vec4 mate = vec4(1.32,0.35,0.20,1.0)*1.25; \n     return mate.xyz;\n    }\n    \n    \n    //para esfera\n    if (id_material==11.0)\n    {\n        \n        vec2 uv=p.xy;\n        \n        uv=rotatev2(uv, radians(75.0));\n        \n        uv.y-=7.0;\n        uv*=0.625;\n        col= Sonrisa2d(uv);\n        \n        return col;\n    }\n    \n    \n    // pared\n    if (id_material==12.0)\n    {\n        \n        vec2 uv=p.xy;\n        uv=rotatev2(uv, radians(45.0));\n        uv.y-=20.0;\n        //uv*=0.065;\n        uv*=0.0325;\n        col= Sonrisa2d(uv);\n        return col;\n    }\n    \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    \n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime,1000.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(10.0, 10.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    vec3 ro=vec3(8.,8.0+6.0*sin(t),0);\n    \n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1) //30\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}