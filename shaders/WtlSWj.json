{
    "Shader": {
        "info": {
            "date": "1564331871",
            "description": "lines",
            "flags": 0,
            "hasliked": 0,
            "id": "WtlSWj",
            "likes": 2,
            "name": "lines-reconst",
            "published": 3,
            "tags": [
                "lines"
            ],
            "usePreview": 0,
            "username": "ap",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "\n\nvec3 addLine(vec2 uv, float t, vec3 col, float speed, float ustart, float ustop)\n{\n    float linepos = (ustart + ustop) * 0.5f + (ustop - ustart) * 0.5 * sin(2.f * 3.14f * speed * t);\n        \n    if (abs(uv.x-linepos) < 0.002f)\n    {\n        return vec3(0.0f, 0.0f, 0.0f);\n    }\n    else\n    {\n        return col;\n    }\n}\n\nvec3 addLines(vec2 uv, float t, vec3 col)\n{\n    int NLINES = 1;\n    for(int i=0; i<NLINES; i++)\n    {\n        col = addLine(uv, t, col,\n                      0.3f + 0.2f * float(i), \n                      float(i)/float(NLINES) + 0.4f/float(NLINES), \n                      float(i)/float(NLINES) + 0.6f/float(NLINES));\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col =vec3(uv.y, uv.y, uv.y);\n    \n    col = addLines(uv, iTime, col);\n    \n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}