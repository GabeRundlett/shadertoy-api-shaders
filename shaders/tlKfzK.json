{
    "Shader": {
        "info": {
            "date": "1614707262",
            "description": "A simple Fractal Clock i coded when i couldn't sleep one night.\n\nBased on \"L System\" by IQ: https://www.shadertoy.com/view/XtyGR1",
            "flags": 0,
            "hasliked": 0,
            "id": "tlKfzK",
            "likes": 9,
            "name": "Fractal Clock",
            "published": 3,
            "tags": [
                "fractal",
                "time",
                "clock",
                "ifs"
            ],
            "usePreview": 0,
            "username": "foxic",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "\n\n#define kDepth 10\n#define kBranches 2\n#define kMaxDepth 1024 // kBranches ^ kDepth\n\n//--------------------------------------------------------------------------\n\nmat3 matRotate(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3( c, s, 0, -s, c, 0, 0, 0, 1);\n}\n\nmat3 matTranslate( float x, float y )\n{\n    return mat3( 1, 0, 0, 0, 1, 0, -x, -y, 1 );\n}\n\nfloat sdBranch( vec2 p, float w1, float w2, float l )\n{\n    float h = clamp( p.y/l, 0.0, 1.0 );\n\tfloat d = length( p - vec2(0.0,l*h) );\n    return d - mix( w1, w2, h );\n}\n\n//--------------------------------------------------------------------------\n\nvec3 map( vec2 pos )\n{\n    const float len = 3.2;\n    const float wid = 0.3;\n    const float lenf = 0.6;\n    const float widf = 0.4;\n    \n    \n    // get time\n    float time = iDate.w;\n    float mils = fract(time);\n\tfloat secs = mod( (time),        60.0 );\n\tfloat mins = mod( (time/60.0),   60.0 );\n\tfloat hors = mod( (time/3600.0), 24.0 );\n    \n    vec3 d = vec3(1.);\n    \n    int c = 0;\n    for( int count=0; count < kMaxDepth; count++ )\n    {\n        int off = kMaxDepth;\n    \tvec2 pt_n = pos;\n        \n        float l = len;\n        float w = wid;\n        \n      \tfor( int i=1; i<=kDepth; i++ )\n      \t{\n            l *= lenf;\n            w *= widf;\n\n            off /= kBranches; \n            int dec = c / off;\n        \tint path = dec - kBranches*(dec/kBranches); //  dec % kBranches\n            \n            mat3 mx;\n\t    \tif( path == 0 )\n           \t{\n\t\t  \t\tmx = matRotate(6.2831*secs/60.0) * matTranslate( 0.0,l/lenf);\n\t    \t}\n\t    \telse if( path == 1 )\n           \t{\n\t\t  \t\tmx = matRotate(6.2831*hors/60.0) * matTranslate( 0.0,l/lenf);\n\t    \t}\n\t    \telse\n            {\n          \t\tmx = matRotate(6.2831*mins/60.0) * matTranslate(0.0,l/lenf);\n\t    \t}\n            pt_n = (mx * vec3(pt_n,1)).xy;\n\n            \n        \n        \t// bounding sphere test\n            float y = length( pt_n - vec2(0.0, l) );\n       \t\tif( y-1.4*l > 0.0 ) { c += off-1; break; }\n\n            float br = sdBranch( pt_n, w, w*widf, l );\n            if( path == 0 ){\n                d.r = min( d.r, br );\n            } else if( path == 1 ){\n                d = min( d, br );\n            } else {\n                d.g = min( d.g, br );\n            }\n     \t}\n        \n    \tc++;\n    \tif( c > kMaxDepth ) break;\n\t}\n    \n   \treturn d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinate system\n    vec2  uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    float px = 2.0/iResolution.y;\n\n    // frame in screen\n    vec2  uv_clock = uv*4.0 + vec2(0.0,3.5);\n   \n    \n    // compute\n    vec3 d = vec3(map( uv_clock ));\n    \n    // shape\n    vec3 cola = 1.-vec3( smoothstep( 0.0, 5.0*px, d ) );\n    fragColor = vec4( cola, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}