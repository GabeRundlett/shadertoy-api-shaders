{
    "Shader": {
        "info": {
            "date": "1392152304",
            "description": "Brute force approach to computing an approximate distance field to the classic IFS fern of Barnsley. This is how you DON'T want rendering IFS fractals.",
            "flags": 0,
            "hasliked": 0,
            "id": "lss3zs",
            "likes": 24,
            "name": "IFS - brute force",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "ifs",
                "barnsley",
                "fern"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 4302
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2014\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n\n// Barnsley's IFS fern. For a time-accumulated version, check\n// https://www.shadertoy.com/view/lst3zf\n\n\n//------------------------------------------------------------------\n// oldschool rand() from Visual Studio\n//------------------------------------------------------------------\nint  seed = 1;\nvoid srand(int s ) { seed = s; }\nint  rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\n//------------------------------------------------------------------\n// hash to initialize the random sequence (copied from Hugo Elias)\n//------------------------------------------------------------------\nint hash( int n )\n{\n\tn = (n << 13) ^ n;\n    return n * (n * n * 15731 + 789221) + 1376312589;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // init randoms\n    ivec2 q = ivec2(fragCoord);\n    srand( hash(q.x+hash(q.y+hash(iFrame))) );\n\n    vec2 uv = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n    uv = 6.0*uv + vec2(0.0,5.0);\n\n\tfloat d = 1000.0;\n\n    vec2 z = vec2( 0.0 );\n    for( int i=0; i<1024; i++ ) \n    {\n        float p = frand();\n             if( p < 0.01 ) z = vec2(  0.0, 0.16*z.y );\n\t\telse if( p < 0.84 ) z = vec2(  0.85*z.x + 0.04*z.y, -0.04*z.x + 0.85*z.y + 1.60 );\n        else if( p < 0.92 ) z = vec2(  0.20*z.x - 0.26*z.y,  0.23*z.x + 0.22*z.y + 1.60 );\n        else                z = vec2( -0.15*z.x + 0.28*z.y,  0.26*z.x + 0.24*z.y + 0.44 );\n\t\td = min( d, dot(uv-z,uv-z) );\n    }\n    d = sqrt(d);\n\t\n    float c = 0.7 + 0.3*smoothstep(-1.0,-0.8,sin(15.0*d) );\n    c *= 1.0 - 1.0/(1.0+32.0*d);\n    c *= smoothstep(0.01,0.02,d);\n\n    vec2 p = fragCoord/iResolution.xy;\n    c *= 0.5 + 0.5*pow( 16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y), 0.15 );\n\n    fragColor = vec4( c, c, c, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}