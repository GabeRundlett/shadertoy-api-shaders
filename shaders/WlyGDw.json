{
    "Shader": {
        "info": {
            "date": "1579038360",
            "description": "cylinder sphere collision",
            "flags": 0,
            "hasliked": 0,
            "id": "WlyGDw",
            "likes": 2,
            "name": "CylinderSphereCollision",
            "published": 3,
            "tags": [
                "collision"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "// Based on: https://bartwronski.com/2017/04/13/cull-that-cone/\n// Has similar fail states as the final solution in the linked site.\n// A more robust test could be implemented by finding the closest\n// point to the sphere on the cylinder and\n// testing the distance from that point to the center of the sphere.\n// http://shader-playground.timjones.io/0c8f28cf32450dcbdc5ffd178b06fb16\nbool cylinderSphereTest_imperfect(vec2 cylinderOrg, vec2 cylinderDir, float cylinderHeight, float cylinderRad, vec2 sphereOrg, float sphereRad)\n{\n    vec2 v = sphereOrg-cylinderOrg;\n    float a = dot(cylinderDir, v);\n    float bSqr = dot(v,v) - a*a;\n    \n    bool frontCull = a > cylinderHeight + sphereRad;\n    bool backCull = a < -sphereRad;\n    bool sideCull = bSqr > (sphereRad + cylinderRad) * (sphereRad + cylinderRad);\n    \n    return !(frontCull || backCull || sideCull);\n}\n\nbool cylinderSphereTest(vec2 cylinderOrg, vec2 cylinderDir, float cylinderHeight, float cylinderRad, vec2 sphereOrg, float sphereRad)\n{\n    vec2 v = sphereOrg-cylinderOrg;\n    \n    float da = dot(cylinderDir,v);\n    vec2 a = cylinderDir * clamp(da,0.0,cylinderHeight);\n    \n    vec2 b = v - (cylinderDir * da);\n    float bl = length(b);\n    b = b/bl * min(bl,cylinderRad);\n    \n    vec2 s = cylinderOrg + a + b;\n    float distSqr = dot(s-sphereOrg,s-sphereOrg);\n    \n    return distSqr < sphereRad * sphereRad;\n}\n\nbool circle(vec2 p, vec2 c, float r)\n{\n    return dot(p-c,p-c)<r*r;\n}\n\nbool cylinder(vec2 p, vec2 o, vec2 d, float h, float r)\n{\n    float a=dot(p-o,d);\n    vec2 pr=clamp(a,0.0,h)*d+o;\n    return (dot(pr-p,pr-p)<(r*r))&&a<h&&a>0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cylinderOrg = vec2(cos(iTime),sin(iTime))*0.5+0.6;\n    vec2 cylinderDir = vec2(-cos(iTime),-sin(iTime));\n    float cylinderHeight = 0.5;\n    float cylinderRad = 0.1;\n    \n    vec2 sphereOrg = vec2(0.1,0.0);\n    float sphereRad = 0.3;\n    \n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n\n    if(cylinder(uv,cylinderOrg,cylinderDir,cylinderHeight,cylinderRad))\n    {\n        fragColor=vec4(1.0);\n    }\n    \n    if(circle(uv,sphereOrg,sphereRad))\n    {\n        bool intersect=cylinderSphereTest(cylinderOrg,cylinderDir,cylinderHeight,cylinderRad,sphereOrg,sphereRad);\n        bool intersect_imperfect=cylinderSphereTest_imperfect(cylinderOrg,cylinderDir,cylinderHeight,cylinderRad,sphereOrg,sphereRad);\n        \n        fragColor = intersect?vec4(0.0,1.0,0.0,1.0):vec4(0.0,0.0,0.0,1.0);\n\t\tfragColor += intersect_imperfect?vec4(1.0,0.0,0.0,1.0):vec4(1.0,1.0,1.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}