{
    "Shader": {
        "info": {
            "date": "1644145591",
            "description": "distortion effect using noise",
            "flags": 0,
            "hasliked": 0,
            "id": "NsByWK",
            "likes": 8,
            "name": "Grid distortion 2d",
            "published": 3,
            "tags": [
                "noise",
                "distortion"
            ],
            "usePreview": 0,
            "username": "MarcoF",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "\n// Some useful functions\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x * 34.0) + 1.0) * x); }\n\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\nfloat snoise(vec2 v) {\n\t// Precompute values for skewed triangular grid\n\tvec4 C = vec4(\n\t\t0.211324865405187, //(3.0-sqrt(3.0))/6.0\n\t\t0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n\t\t-0.577350269189626, // -1.0 + 2.0 * C.x\n\t\t0.024390243902439); // 1.0 / 41.0\n\n\t//C.w += time * 0.0005;\n\n\t// First corner (x0)\n\tvec2 i  = floor(v + dot(v, C.yy));\n\tvec2 x0 = v - i + dot(i, C.xx);\n\n\t// Other two corners (x1, x2)\n\tvec2 i1 = vec2(0.0);\n\ti1 = (x0.x > x0.y) ? vec2(1.0, 0.0):vec2(0.0, 1.0);\n\tvec2 x1 = x0.xy + C.xx - i1;\n\tvec2 x2 = x0.xy + C.zz;\n\n\t// Do some permutations to avoid\n\t// truncation effects in permutation\n\ti = mod289(i);\n\tvec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0 ));\n\n\tvec3 m = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n\tm = m*m;\n\tm = m*m;\n\n\t// Gradients:\n\t//  41 pts uniformly over a line, mapped onto a diamond\n\t//  The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n\tvec3 x = 2.0 * fract(p * C.www) - 1.0;\n\tvec3 h = abs(x) - 0.5;\n\tvec3 ox = floor(x + 0.5);\n\tvec3 a0 = x - ox;\n\n\t// Normalise gradients implicitly by scaling m\n\t// Approximation of: m *= inversesqrt(a0*a0 + h*h);\n\tfloat a = 1.79284291400159;\n\tfloat b = 0.85373472095314;\n\tm *= a - b * (a0*a0 + h*h);\n\n\t// Compute final noise value at P\n\tvec3 g = vec3(0.0);\n\tg.x  = a0.x  * x0.x  + h.x  * x0.y;\n\tg.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n\treturn 130.0 * dot(m, g);\n}\n\nfloat fbm(vec2 uv, int octaves, float amplitude, float frequency, vec2 shift, float lacunarity, float gain) {\n\tfloat value = 0.0;\n    for (int i = 0; i < octaves; ++i) {\n        float sn = snoise(uv * frequency);\n        value += amplitude * sn;\n        uv += shift;\n        frequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}\n\nfloat easySmoothstep(float edge, float smoothness, float x){\n\treturn smoothstep(edge - smoothness, edge + smoothness, x);\n}\n\nfloat line(float uv, float pos, float size) {\n\treturn 1.0 - easySmoothstep(size * 0.5, 0.05, abs(uv - pos));\n}\n\nfloat changeRange(float iValue, float iMin, float iMax, float fMin, float fMax) {\n\tfloat fValue = (iValue-iMin) / (iMax-iMin);\n\tfValue *= fMax - fMin;\n\tfValue += fMin;\n\treturn fValue;\n}\n\nvec2 scale(in vec2 original, in vec2 scale, in vec2 pivot){\n\tscale = 1.0 / scale;\n\tmat2 s = mat2(scale.x, 0.0, 0.0, scale.y);\n\tvec2 final = original;\n\tfinal -= pivot;\n\tfinal *= s;\n\tfinal += pivot;\n\treturn final;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    //uv.x += iTime * 0.1;\n    \n    float n = fbm(uv * 0.3 + vec2(iTime * 0.1, 0.), 1, 1.0, 4.0, vec2(0.), 2.0, 0.5);\n    \n\tvec2 uvR = scale(uv, vec2(1.0) + n*0.05, vec2(0.5));\n    \n    //grid\n    vec2 uvGrid = fract(uvR * 10.);\n    \n    float lx = 1.0-line(uvGrid.x, 0.025, 0.05);\n\tfloat ly = 1.0-line(uvGrid.y, 0.025, 0.05);\n\tcol = vec3(1.0) * min(lx, ly);\n    \n\tfloat shade = changeRange(n, -1.0, 1.0, 0.0, 1.0);\n\tcol *= vec3(1.0) * shade;\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}