{
    "Shader": {
        "info": {
            "date": "1512667619",
            "description": "Captain Francis Drake sailing to meet the Armada",
            "flags": 0,
            "hasliked": 0,
            "id": "ltfBzf",
            "likes": 15,
            "name": "Franky and the Drakettes",
            "published": 3,
            "tags": [
                "sea",
                "clouds",
                "duck",
                "ship"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 900
        },
        "renderpass": [
            {
                "code": "// \"Franky and the Drakettes\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Captain Francis Drake sailing to meet the Armada.\n  Mouseable; god-ray idea from frankenburgh's \"Oceanic\".\n*/\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrEllCylDf (vec3 p, vec2 r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, dukConf, qHit, dispCloud;\nvec2 gId;\nfloat tCur, dstFarO, dstFarW, dstWat, szFac;\nint idObj;\nconst float pi = 3.14159;\nconst float sqrt3 = 1.7320508;\nconst int idBdy = 1, idWng = 2, idHead = 3, idBk = 4, idMast = 5, idSail = 6;\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  q = 0.5 * p - vec2 (0., tCur);\n  h = 0.3 * sin (q.y) + 0.25 * sin (dot (q, vec2 (0.1, 1.2))) +\n     0.2 * sin (dot (q, vec2 (-0.2, 1.4)));\n  q = p;\n  wFreq = 0.5;\n  wAmp = 0.03;\n  tw = 0.1 * tCur * vec2 (1., -1.);\n  for (int j = 0; j < 4; j ++) {\n    q *= qRot;\n    t4 = q.xyxy * wFreq + tw.xxyy;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    t = 1. - sqrt (v4.xz * v4.yw);\n    t *= t;\n    h += wAmp * dot (t, t);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return h;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFarW;\n  for (int j = 0; j < 50; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (6., h);\n    if (s > dstFarW) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.1, 5e-5 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy), WaveHt (p.xz + e.yx)), e.x).xzy);\n}\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 r, cs;\n  float dMin, d, s;\n  p.xz -= HexToPix (gId);\n  p.y -= dukConf.x - 0.02 * szFac;\n  p.yz = Rot2D (p.yz, -3. * dukConf.z);\n  p.xy = Rot2D (p.xy, 10. * dukConf.y);\n  dMin = dstFarO / szFac;\n  p /= szFac;\n  q = p;\n  r = vec2 (0.04, 0.06 + 0.01 * clamp (q.z, -0.4, 0.4));\n  s = (length (q.xz / r) - 1.) * min (r.x, r.y);\n  d = min (max (s, abs (q.y) - 0.1), length (vec2 (s, q.y)) - 0.1);\n  DMINQ (idBdy);\n  q = p;  q.x = abs (q.x);  q -= vec3 (0.1, 0.06, 0.12);\n  cs = vec2 (cos (0.3), sin (0.3));\n  q.yz = Rot2Cs (q.yz, cs);\n  cs.y = - cs.y;\n  q.xy = Rot2Cs (q.xy, cs);\n  q.xz = Rot2Cs (q.xz, cs);\n  q = q.yxz;\n  r = vec2 (0.06, 0.1 + 0.016 * clamp (q.z, -0.4, 0.4));\n  s = (length (q.xz / r) - 1.) * min (r.x, r.y);\n  d = min (max (s, abs (q.y) - 0.014), length (vec2 (s, q.y)) - 0.014);\n  DMINQ (idWng);\n  q = p;  q.yz -= vec2 (0.15, -0.08);\n  d = PrEllipsDf (q, vec3 (0.08, 0.07, 0.1));\n  DMINQ (idHead);\n  q = p;  q.yz -= vec2 (0.14, -0.19);\n  d = PrEllCylDf (q, vec2 (0.03, 0.008), 0.02);\n  DMIN (idBk);\n  q = p;\n  d = min (PrCylDf ((q - vec3 (0., 0.25, 0.06)).xzy, 0.007, 0.25),\n     PrCylDf (vec3 (q.x, abs (q.y - 0.33) - 0.1, q.z - 0.055).yzx, 0.006, 0.155));\n  DMIN (idMast);\n  q = p;  q.y -= 0.33;  q.z -= 3. * q.y * q.y + 0.025;\n  d = max (length (max (abs (q) - vec3 (0.15, 0.1, 0.003), 0.)),\n     0.2 - length (q.xy + vec2 (0., 0.25)));\n  DMINQ (idSail);\n  return 0.9 * dMin * szFac;\n}\n\nvoid EvalDukConf ()\n{\n  vec4 ht;\n  vec2 e, g;\n  float s;\n  s = length (vec3 (gId.xy, gId.x + gId.y));\n  if (s == 0.) szFac = 3.;\n  else if (s <= 2.) szFac = 2.2;\n  else szFac = 1.5;\n  e = vec2 (0.1 * szFac, 0.);\n  g = HexToPix (gId);\n  ht = vec4 (WaveHt (g - e), WaveHt (g + e), WaveHt (g - e.yx), WaveHt (g + e.yx));\n  dukConf = vec3 (0.25 * dot (ht, vec4 (1.)) + 0.1 * (Hashfv2 (17. * gId) - 0.5),\n     vec2 (ht.xz - ht.yw));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = 1. / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = (sqrt3/2.) - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2]));\n  pM = HexToPix (PixToHex (ro.xz));\n  gIdP = vec2 (-99.);\n  eps = 0.0005;\n  dHit = eps;\n  for (int j = 0; j < 150; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = min (hv.x, min (hv.y, hv.z));\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz);\n    if (length (vec3 (gId.xy, gId.x + gId.y)) <= 5.) {\n      if (gId.x != gIdP.x || gId.y != gIdP.y) {\n        EvalDukConf ();\n        gIdP = gId;\n      }\n      d = ObjDf (p);\n    } else d = dstFarO;\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + 0.01;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFarO) break;\n  }\n  if (d >= eps) dHit = dstFarO;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4;\n  vec4 cBdy;\n  float s;\n  s = length (vec3 (gId.xy, gId.x + gId.y));\n  if (s == 0.) cBdy = vec4 (1., 1., 0.1, 0.3);\n  else if (s <= 2.) cBdy = vec4 (0.9, 0.9, 1., 0.3);\n  else cBdy = vec4 (0.8, 0.4, 0.2, 0.3);\n  if (idObj == idBdy) {\n    col4 = cBdy * (1. - smoothstep (0.02, 0.06, qHit.y) *\n       smoothstep (0., 0.14, qHit.z) * 0.1 * SmoothBump (0.3, 0.5, 0.05,\n       mod (50. * qHit.x, 1.)));\n  } else if (idObj == idWng) {\n    col4 = cBdy * (1. - step (0.004, qHit.y) *\n       smoothstep (0., 0.04, qHit.z) * 0.2 * SmoothBump (0.3, 0.5, 0.05,\n       mod (100. * qHit.x, 1.)));\n  } else if (idObj == idHead) {\n    s = length (qHit.yz - vec2 (0.02, -0.05));\n    if (s > 0.02) col4 = cBdy;\n    else col4 = (abs (s - 0.01) < 0.003) ? vec4 (1., 1., 1., 0.3) : vec4 (0.3, 0.3, 1., 0.1);\n  } else if (idObj == idBk) {\n    col4 = vec4 (1., 0.5, 0., 0.2);\n  } else if (idObj == idMast) {\n    col4 = vec4 (0.6, 0.3, 0., 0.);\n  } else if (idObj == idSail) {\n    col4 = vec4 (1.1, 1.1, 1.1, 0.) * (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.03, mod (16. * qHit.x, 1.)));\n  }\n  return col4;\n}\n\nvec3 CloudCol (vec3 ro, vec3 rd)\n{\n  vec4 cSum, c;\n  vec3 s1, s2;\n  float sd, t;\n  s1 = 0.003 * (ro + dispCloud + rd * (300. - ro.y) / rd.y);\n  s2 = 0.003 * (rd * 10. / rd.y);\n  cSum = vec4 (0.);\n  for (float ns = 0.; ns < 100.; ns ++) {\n    c.a = 0.8 * smoothstep (0.5, 1., Fbm3 (s1 + s2 * ns));\n    c = vec4 (1., 0.95, 0.9, c.a) - vec4 (0.7, 0.65, 0.7, cSum.a) * c.a;\n    cSum += vec4 (c.rgb * c.a, c.a);\n    if (cSum.a > 0.99) break;\n  }\n  cSum.rgb /= cSum.a + 0.001;\n  sd = max (dot (rd, sunDir), 0.);\n  cSum.rgb += vec3 (0.5) * mix (pow (sd, 4.), - pow (sd, 16.), smoothstep (0.8, 1., cSum.a));\n  t = pow (1. - 0.7 * rd.y, 16.);\n  return mix (vec3 (0.05, 0.2, 0.5) + t * vec3 (0.45, 0.4, 0.3) +\n     0.3 * vec3 (1., 0.9, 0.8) * (pow (sd, 2.) + 4. * pow (sd, 256.)), cSum.rgb, cSum.a * (1. - t));\n}\n\nfloat CloudDens (vec3 ro, vec3 rd)\n{\n  vec3 s1, s2;\n  float attSum;\n  s1 = 0.003 * (ro + dispCloud + rd * (300. - ro.y) / rd.y);\n  s2 = 0.003 * (rd * 10. / rd.y);\n  attSum = 0.;\n  for (float ns = 0.; ns < 100.; ns += 10.) {\n    attSum += 0.8 * (1. - attSum) * smoothstep (0.5, 1., Fbm3 (s1 + s2 * ns));\n    if (attSum > 0.99) break;\n  }\n  return clamp (1. - attSum, 0., 1.);\n}\n\nfloat GRayDens (vec3 ro, vec3 rd)\n{\n  vec3 p, s1, s2;\n  float d, sd, gDens;\n  sd = 0.08 * max (dot (rd, sunDir), 0.);\n  gDens = 0.;\n  if (sd > 0.01) {\n    s1 = ro + 200. * rd;\n    s2 = 40. * rd;\n    for (float ns = 0.; ns < 32.; ns ++) {\n      p = s1 + s2 * ns;\n      gDens += sd * (1. - gDens) * smoothstep (0.8, 1., CloudDens (p, sunDir));\n      if (p.y > 400. || gDens > 0.95) break;\n    }\n  }\n  return gDens;\n}\n\nvec3 WaveCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd;\n  sd = max (dot (rd, sunDir), 0.);\n  col = vec3 (0.15, 0.2, 0.2) * (0.7 * ro.y + 1.) +\n     CloudDens (ro + 300. * rd, rd) * (mix (vec3 (0., 0.1, 0.2), vec3 (0.2, 0.2, 0.3), rd.y) +\n     (1. - rd.y) * vec3 (0.6, 0.6, 0.5) * (pow (sd, 4.) + 2. * pow (sd, 256.)));\n  col *= 0.7 + 0.3 * pow (max (dot (rd, sunDir), 0.), 2.);\n  col = mix (col, vec3 (0.6, 0.8, 0.9) + vec3 (0.2, 0.2, 0.1) * pow (sd, 4.),\n     1. - exp (- pow (0.005 * dstWat, 1.5)));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, colW, roo, rdo, vn, ltDir;\n  float dstObj, reflFac;\n  ltDir = normalize (vec3 (1., 1., -1.));\n  dispCloud = vec3 (0., 0., -40. * tCur);\n  roo = ro;\n  rdo = rd;\n  reflFac = 1.;\n  col = vec3 (0.);\n  if (rd.y < 0.) dstWat = WaveRay (ro, rd);\n  else dstWat = dstFarW;\n  dstObj = ObjRay (ro, rd);\n  if (dstWat < min (dstObj, dstFarW)) {\n    ro += dstWat * rd;\n    rd = reflect (rd, VaryNf (ro, WaveNf (ro, dstWat), 0.1));\n    dstObj = ObjRay (ro, rd);\n    reflFac = 0.5;\n  }\n  if (dstObj < dstFarO) {\n    ro += dstObj * rd;\n    EvalDukConf ();\n    objCol = ObjCol ();\n    vn = ObjNf (ro);\n    col = objCol.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       objCol.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n  } else if (dstWat < dstFarW) {\n    reflFac = 0.;\n  } else {\n    col = CloudCol (roo, rdo) + 0.9 * vec3 (1., 0.8, 0.6) * GRayDens (roo, rdo);\n  }\n  if (reflFac < 1.) {\n    roo += dstWat * rdo;\n    col = mix (WaveCol (roo, reflect (rdo, VaryNf (32. * roo, WaveNf (roo, dstWat), 0.05))),\n       col, reflFac);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, u;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  ro = vec3 (3., 5., -20.);\n  zmFac = 2.4;\n  if (mPtr.z > 0.) {\n    ro.x += 10. * mPtr.x;\n    zmFac += 1.5 * (mPtr.y + 0.5);\n  }\n  vd = normalize (vec3 (0., 2., 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (0.5, 0.25, 1.));\n  dstFarO = 30.;\n  dstFarW = 300.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrEllCylDf (vec3 p, vec2 r, float h)\n{\n  return max ((length (p.xy / r) - 1.) * min (r.x, r.y), abs (p.z) - h);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}