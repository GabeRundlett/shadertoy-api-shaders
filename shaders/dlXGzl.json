{
    "Shader": {
        "info": {
            "date": "1672222603",
            "description": "He finally brought the army :) Click and drag to move camera",
            "flags": 0,
            "hasliked": 0,
            "id": "dlXGzl",
            "likes": 77,
            "name": "You and what army?",
            "published": 3,
            "tags": [
                "mirror",
                "clone",
                "redgiant",
                "aftereffects",
                "hallofmirrors",
                "plugin",
                "army"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 810
        },
        "renderpass": [
            {
                "code": "// Modification of https://www.shadertoy.com/view/dsSGWm\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Number of images to display\n\tint images = 128;\n\t// Scale factor per image\n\tfloat scale = 0.96;\n\t\n\tvec2 uv = fragCoord / iResolution.xy;\n\tvec2 m = iMouse.xy / iResolution.xy;\n\tfragColor = vec4(0.0);\n\t\n\t// View angle\n\tfloat camAngle = iMouse.z > 0.0 ? 1.5 - 2.0 * m.y : 0.6 - sin(iTime) * 0.5;\n\t\n\tfor (int i = 0; i < images; ++i) {\n\t\t// Different heights for variety\n        float height = cos(float(i) + iTime) * 0.1;\n        \n        // Offset, apply scale, reset offset\n\t\tvec2 offset = vec2(i, 0.5 + 0.5 * camAngle);\n\t\tvec2 pos = uv - offset;\n\t\tpos /= pow(scale, float(i));\n\t\tvec2 camPos = vec2(iMouse.z > 0.0 ? -m.x : iTime * 0.5, camAngle + height);\n\t\tpos += offset + camPos;\n\t\t\n\t\t// Clamp bottom and discard top\n\t\tif (pos.y >= 0.995) continue;\n\t\tpos.y = max(pos.y, 0.005);\n        \n\t\t// Flip every 2nd one for variety\n\t\tif (i % 2 == 1) pos.x *= -1.0;\n        \n        // Below is required if the wrap mode isn't repeat\n        pos.x = fract(pos.x);\n\t\t\n\t\t// Color key (despill from Inigo Quilez)\n\t\tvec4 color = texture(iChannel0, pos);\n\t\tfloat rbMax = max(color.r, color.b);\n        float og = color.g; \n        color.g = min(color.g, rbMax * 0.85); \n        color += og - color.g;\n        color.a = 1.0 - clamp((og - rbMax) * 4.0, 0.0, 1.0);\n\n\t\t// Brightness variation for variety\n\t\tcolor.rgb -= 0.3 - cos(float(i * 4)) * 0.1;\n\t\t\n\t\t// Tint towards white\n\t\tfloat fog = sqrt(float(i) / float(images));\n\t\tcolor.rgb = mix(color.rgb, vec3(1.0), fog);\n\t\t\n\t\t// Premultiply color\n\t\tcolor.rgb *= color.a;\n\t\t// Composite behind\n\t\tfragColor += (1.0 - fragColor.a) * color;\n\t\t\n\t\t// Early exit\n\t\tif (fragColor.a >= 1.0) return;\n\t}\n\t\n\t// Make background white\n\tfragColor += vec4(1.0 - fragColor.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}