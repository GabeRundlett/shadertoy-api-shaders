{
    "Shader": {
        "info": {
            "date": "1698339724",
            "description": "Sliced 4D fractal from the split-quaternions: Hypercomplex numbers identical to a 2 by 2 matrix. System has 1 euclidean part, 2 hyperbolic parts, & 1 imaginary part.\nClick to explore!\n[url=https://www.shadertoy.com/playlist/s3BcD1]FRACTAL PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "DdGyWK",
            "likes": 10,
            "name": "Matrix Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "math",
                "4d",
                "orbit",
                "quaternion",
                "matrix",
                "hyperbolic",
                "split",
                "chaotic"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2023\n\n\nvoid mainImage(out vec4 o, vec2 i) {\n    vec2 t,\n         r = iResolution.xy,\n         m = 2. * iMouse.xy - r;\n\n    // coordinates\n    i += i - r;\n    i *= 3. / r.x;\n    m *= 3. / r.x;\n    \n    // initialize euclidean-imaginary plane with coordinates\n    mat2 z = mat2(i, -i.y, i);\n\n    // controls\n    i = mix(i, m, max(0., sign(iMouse.z)));\n\n    // hyperbolic axes\n    mat2 c = mat2(0., 1., 1., 0.) * i.x\n           + mat2(1., 0., 0., -1.) * i.y\n           // euclidean axis\n           + mat2(1., 0., 0., 1.) * cos(iTime)\n           // imaginary axis\n           + mat2(0., 1., -1., 0.) * sin(iTime);\n    \n    // chaotic map\n    float f, k, e = 9e9;\n    for (; k++ < 9.; f < e ? e = f, t = z[0] : t) {\n        f = abs(determinant(\n            // the split-quaternion basis is isomorphic to the 2x2 matrices.\n            // this means we can use matrix operators like normal.\n            z = (z + c) * (z + c) / (z * z - c * c)\n        ));\n    }\n    \n    // map orbit trap\n    float h = atan(t.y, t.x) + iTime / 4.,\n          d = smoothstep(0., 2., pow(e, -.1));\n    \n    // color wheel\n    vec3 u = vec3(h - 2.1, h, h + 2.1),\n         v = .5 + .5 * cos(u);\n        \n    o = vec4(v * d, 1.);\n}\n\n\n/*\nREFERENCES\n\norbit traps\n\nDeltaT 2023\nhttps://www.shadertoy.com/view/csSyzy\n\nathibaul 2021\nhttps://www.shadertoy.com/view/fdt3zX\n\npiotrekli 2016\nhttps://www.shadertoy.com/view/4lK3Dc\n\nKramin 2015\nhttps://www.shadertoy.com/view/4st3Wn\n\nrefactoring\n\nshadertoyjiang & FabriceNeyret2 2023\nhttps://www.shadertoy.com/view/DdcBWX\n\nSnoopethDuckDuck 2023\nhttps://www.shadertoy.com/view/cs3BRj\n*/\n\n\n/*\nFURTHER READING\n\ngeometry\n\nhttps://en.wikipedia.org/wiki/Color_wheel\nhttps://en.wikipedia.org/wiki/Versine#Definitions\nhttps://en.wikipedia.org/wiki/Argument_(complex_analysis)\nhttps://en.wikipedia.org/wiki/Split-quaternion#Definition\n\nfractals\n\nhttps://en.wikipedia.org/wiki/Julia_set\nhttps://en.wikipedia.org/wiki/Mandelbrot_set\nhttps://en.wikipedia.org/wiki/Bifurcation_diagram\nhttps://en.wikipedia.org/wiki/Orbit_trap#Point_based\n\ncolor mapping\n\nhttps://en.wikipedia.org/wiki/Color_wheel\nhttps://en.wikipedia.org/wiki/Versine#Definitions\nhttps://en.wikipedia.org/wiki/Spectral_sensitivity\nhttps://en.wikipedia.org/wiki/Argument_(complex_analysis)\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}