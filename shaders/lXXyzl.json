{
    "Shader": {
        "info": {
            "date": "1726612572",
            "description": "Game of Snake on a torus\nIt barely works, please someone build upon this to make it better",
            "flags": 48,
            "hasliked": 0,
            "id": "lXXyzl",
            "likes": 1,
            "name": "Torus Snake",
            "published": 3,
            "tags": [
                "game",
                "torus",
                "snake"
            ],
            "usePreview": 0,
            "username": "DarkReaper231",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "// Credits: https://www.shadertoy.com/view/wlSGWV\n\nconst ivec2 ptrSnakeInfo   = ivec2(0,0);\nconst ivec2 ptrFruit       = ivec2(1,0);\nconst ivec2 ptrSnakeBuffer = ivec2(3,0);\n\nconst int gridSize = 24;\nconst vec3 backdropColor = vec3(0.1);\nconst vec3 wireframeColor = vec3(0.5, 0.5, 1.0);\nconst vec3 snakeColor = vec3(0.0, 1.0, 0.0);\nconst vec3 fruitColor = vec3(1.0, 0.0, 0.0);\n\nvec4 loadValue(in ivec2 ptr) {\n    return texelFetch(iChannel0, ptr, 0);\n}\n\nmat3 rotateY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(c, 0, s, 0, 1, 0, -s, 0, c);\n}\n\nmat3 rotateX(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(1, 0, 0, 0, c, -s, 0, s, c);\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nvec2 mapToTorus(vec3 p, float R, float r) {\n    vec2 uv;\n    uv.x = atan(p.z, p.x) / (2.0 * 3.14159) + 0.5;\n    float d = length(p.xz) - R;\n    uv.y = atan(p.y, d) / (2.0 * 3.14159) + 0.5;\n    return uv;\n}\n\nfloat wireframe(vec2 uv, float thickness) {\n    vec2 grid = abs(fract(uv * float(gridSize)) - 0.5);\n    float lines = min(grid.x, grid.y);\n    return smoothstep(0.0, thickness, lines);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float R = 0.7;\n    float r = 0.3;\n\n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n    float rotY = (mouseUV.x - 0.5) * 3.14159 * 2.0;\n    float rotX = (mouseUV.y - 0.5) * 3.14159;\n\n    mat3 rotation = rotateY(rotY) * rotateX(rotX);\n\n    vec3 ro = rotation * vec3(0.0, 0.0, -2.0);\n    vec3 rd = rotation * normalize(vec3(uv, 1.0));\n\n    float t = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = sdTorus(p, vec2(R, r));\n        if (abs(d) < 0.001) break;\n        t += d;\n        if (t > 10.0) break;\n    }\n\n    if (t > 10.0) {\n        fragColor = vec4(backdropColor, 1.0);\n        return;\n    }\n\n    vec3 p = ro + rd * t;\n    vec2 torusUV = mapToTorus(p, R, r);\n\n    float wire = wireframe(torusUV, 0.03);\n    vec3 col = mix(wireframeColor, backdropColor, wire);\n\n    vec4 snakeInfo = loadValue(ptrSnakeInfo);\n    int snakeLength = int(snakeInfo.z);\n    vec2 snakeHead = snakeInfo.xy / float(gridSize);\n\n    for (int i = 0; i < snakeLength; i++) {\n        vec2 segment = i == 0 ? snakeHead : loadValue(ptrSnakeBuffer + ivec2(i,0)).xy / float(gridSize);\n        vec2 snakeUV = abs(torusUV - segment);\n        snakeUV = min(snakeUV, 1.0 - snakeUV);\n\n        if (max(snakeUV.x, snakeUV.y) < 0.5 / float(gridSize)) col = snakeColor;\n    }\n\n    vec2 fruitPos = loadValue(ptrFruit).xy / float(gridSize);\n    vec2 fruitUV = abs(torusUV - fruitPos);\n    fruitUV = min(fruitUV, 1.0 - fruitUV);\n\n    if (max(fruitUV.x, fruitUV.y) < 0.5 / float(gridSize)) col = fruitColor;\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Credits: https://www.shadertoy.com/view/wlSGWV\n\nconst ivec2 ptrSnakeInfo   = ivec2(0,0);\nconst ivec2 ptrFruit       = ivec2(1,0);\nconst ivec2 ptrTimer       = ivec2(2,0);\nconst ivec4 ptrSnakeBuffer = ivec4(3,0,600,0);\n\nconst int gridSize = 24;\n\nconst ivec2 ptrLast = ivec2(600,0);\n\nconst vec2 directions[5] = vec2[5]( vec2(1,0), vec2(0,1), vec2(-1,0), vec2(0,-1), vec2(0,0) );\n\nconst int DIR_RIGHT = 0;\nconst int DIR_UP    = 1;\nconst int DIR_LEFT  = 2;\nconst int DIR_DOWN  = 3;\nconst int DIR_NONE  = 4;\n\nconst int VK_SPACE = 32;\nconst int VK_LEFT  = 37;\nconst int VK_UP    = 38;\nconst int VK_RIGHT = 39;\nconst int VK_DOWN  = 40;\nconst int VK_A     = 87;\nconst int VK_W     = 65;\nconst int VK_D     = 83;\nconst int VK_S     = 68;\nconst int VK_G     = 71;\n\nvec4 loadValue(in ivec2 ptr) {\n    return texelFetch(iChannel0, ptr, 0);\n}\n\nvoid storeValue(in ivec2 ptr, in vec4 value, inout vec4 color, in ivec2 coord) {\n    color = (ptr==coord) ? value : color;\n}\n\nvoid storeValue(in ivec4 ptr, in vec4 value, inout vec4 color, in ivec2 coord) {\n    color = (coord.x>=ptr.x && coord.y>=ptr.y && coord.x<=ptr.z && coord.y<=ptr.w) ? value : color;\n}\n\nfloat hash1(in float n ) { return fract(sin(n)*138.5453123); }\n\nbool isKeyDown(in int key) {\n    return texelFetch( iChannel1, ivec2(key,1), 0 ).x > 0.5;\n}\n\nvec2 NewFruit(in vec2 head, in int len) {\n    vec2 pos;\n    bool success = true;\n    int offset = 0;\n\n    do {\n        pos = vec2(floor(float(gridSize) * hash1(iDate.w + 7.1*float(iFrame+offset))),\n                   floor(float(gridSize) * hash1(iDate.w + 9.3*float(iFrame+3*offset))));   \n\n        success = (pos!=head);\n\n        for(int i=0; (i<len) && success; ++i) success = (pos!=loadValue( ptrSnakeBuffer.xy + ivec2(i,0)).xy);\n\n        offset++;\n    } while(!success);\n\n    return pos;\n}\n\nvoid InitGame(\n    out vec2 snakeHead,\n    out int  snakeLength,\n    out int  snakeDir, \n    out vec2 fruitPos, \n    out vec2 snakeBuffer,\n    out float currentTime) \n{\n    snakeHead = vec2(gridSize/2,gridSize/2);\n    snakeLength = 1;\n    snakeDir = DIR_RIGHT;\n    fruitPos = NewFruit(snakeHead,snakeLength);\n    snakeBuffer = snakeHead;\n    currentTime = 0.;\n}\n\nvec2 wrapPosition(vec2 pos) {\n    return mod(pos + vec2(float(gridSize)), vec2(float(gridSize)));\n}\n\nbool isSamePosition(vec2 a, vec2 b) {\n    return all(equal(a, b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 pixel = ivec2( fragCoord - 0.5 );\n\n    // don't compute gameplay outside of the data area\n    if (pixel.x>ptrLast.x || pixel.y>ptrLast.y) discard;\n\n    vec4 snakeInfo = loadValue( ptrSnakeInfo);\n    vec2 fruitPos = loadValue( ptrFruit ).xy;\n    vec2 timer = loadValue( ptrTimer ).xy;\n    vec2 snakeBuffer = loadValue( pixel ).xy;\n\n    vec2 snakeHead = snakeInfo.xy;\n    int len = int(snakeInfo.z); \n    int dir = int(snakeInfo.w);    \n    float currentTime = timer.x;\n\n    if (iFrame == 0) InitGame(snakeHead, len, dir, fruitPos, snakeBuffer, currentTime);\n\n    if ( dir != DIR_NONE ) {\n        bool moveUp    = (isKeyDown(VK_UP)   || isKeyDown(VK_W)) && dir!=DIR_DOWN;\n        bool moveDown  = (isKeyDown(VK_DOWN) || isKeyDown(VK_S)) && dir!=DIR_UP;\n        bool moveLeft  = (isKeyDown(VK_LEFT) || isKeyDown(VK_A)) && dir!=DIR_RIGHT;\n        bool moveRight = (isKeyDown(VK_RIGHT)|| isKeyDown(VK_D)) && dir!=DIR_LEFT;\n\n        currentTime += iTimeDelta;\n\n        if (currentTime > 0.1 || moveUp || moveDown || moveLeft || moveRight ) {\n            currentTime = 0.;\n\n            if (moveUp)    dir = DIR_UP;\n            if (moveDown)  dir = DIR_DOWN;\n            if (moveLeft)  dir = DIR_LEFT;\n            if (moveRight) dir = DIR_RIGHT;\n\n            vec2 newHead = wrapPosition(snakeHead + directions[dir]);\n\n            if (!isSamePosition(newHead, fruitPos)) {\n                // no food evolution\n                int offset = pixel.x - ptrSnakeBuffer.x;\n\n                if (offset>=0 && offset<len) {\n                    if (offset == len-1) snakeBuffer.xy = snakeHead;\n                    else snakeBuffer = loadValue( pixel + ivec2(1,0) ).xy;\n                }\n            } else {\n                // food evolution\n                if (pixel.x - ptrSnakeBuffer.x == len) snakeBuffer.xy = snakeHead;\n\n                len++;\n                fruitPos = NewFruit(newHead,len);\n            }\n\n            snakeHead = newHead;\n\n            // check head against tail\n            for (int i=0; i<len; ++i) {\n                if (isSamePosition(loadValue(ptrSnakeBuffer.xy + ivec2(i,0)).xy, snakeHead)) {\n                    dir = DIR_NONE; // game over\n                    break;\n                }\n            }\n        }\n    } else if (isKeyDown(VK_SPACE)) InitGame(snakeHead, len, dir, fruitPos, snakeBuffer, currentTime);\n\n    fragColor = vec4(0);\n\n    storeValue( ptrSnakeInfo,   vec4(snakeHead, float(len), float(dir)), fragColor, pixel );\n    storeValue( ptrFruit,       vec4(fruitPos, 0, 0),                    fragColor, pixel );\n    storeValue( ptrTimer,       vec4(currentTime, 0, 0, 0 ),             fragColor, pixel );\n    storeValue( ptrSnakeBuffer, vec4(snakeBuffer, 0, 0),                 fragColor, pixel ); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}