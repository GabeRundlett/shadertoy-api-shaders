{
    "Shader": {
        "info": {
            "date": "1532279877",
            "description": "Original at https://www.shadertoy.com/view/MdGfDc\n\nModified to make star clusters and colors changed.",
            "flags": 32,
            "hasliked": 0,
            "id": "XtdyDr",
            "likes": 10,
            "name": "Re: Gravity Streams",
            "published": 3,
            "tags": [
                "particles",
                "physics",
                "gravity",
                "multipass",
                "streams"
            ],
            "usePreview": 0,
            "username": "emh",
            "viewed": 758
        },
        "renderpass": [
            {
                "code": "// Final Compositing (Deferred Lighting + Bloom)\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID / iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvec3 computeLighting( in vec3 surfaceAlbedo,\n                      in vec3 surfaceNormal,\n                      in float surfaceGloss,\n                      in vec3 lightCol,\n                      in vec3 lightDir,\n                      in float lightSpec,\n                      in float lightAmb )\n{\n    float dot_n  = clamp(dot(surfaceNormal, lightDir), 0.0, 1.0);\n    \n    vec3 diffuse  = lightCol * surfaceAlbedo * clamp(dot_n, lightAmb, 1.0);\n    vec3 specular = lightCol * float(dot_n > 0.0) * pow(clamp(dot(reflect(-lightDir, surfaceNormal), vec3(0.0, 0.0, 1.0)), 0.0, 1.0), surfaceGloss);\n    \n    return diffuse + specular * lightSpec;\n}\n\nvec3 computeSpotLight( in vec3 surfaceAlbedo,\n                       in vec3 surfaceNormal,\n                       in float surfaceGloss,\n                       in vec3 surfacePos,  \n                       in vec3 lightCol,\n                       in vec3 lightPos,\n                       in float lightRadius )\n{\n    vec3 lightVec = lightPos - surfacePos;\n    float contribution = 1.0 / max(dot(lightVec, lightVec) * 0.08 / (lightRadius * lightRadius), 1.0);\n    \n    return computeLighting(surfaceAlbedo, surfaceNormal, surfaceGloss, lightCol, normalize(lightVec), 0.066667 * surfaceGloss, 0.0) * contribution;\n}\n\nvec3 computeLightGlow(in vec3 position, in vec3 lightCol, in vec3 lightPos, in float lightRadius)\n{\n    vec3 glare = spotlightsGlare * lightCol * smoothstep(lightRadius * 10.0, 0.0, length((lightPos.xy - position.xy) * vec2(1.0, 16.0)));\n    vec3 innerGlow = vec3(0.8) * smoothstep(lightRadius, lightRadius * 0.5, distance(lightPos.xy, position.xy));\n    vec3 outerGlow = 0.25 * lightCol * smoothstep(lightRadius * 2.5, 0.0, distance(lightPos.xy, position.xy));\n  \n    return innerGlow + outerGlow + glare;\n}\n\nvec3 computeVignetting(in vec2 fragCoord, in vec3 src) // https://www.shadertoy.com/view/4lSXDm\n{\n\tvec2 coord = ((fragCoord.xy / iResolution.xy) - 0.5) * (iResolution.x / iResolution.y) * 2.0;\n    float rf = sqrt(dot(coord, coord)) * 0.25;\n    float rf2_1 = rf * rf + 1.0;\n    \n\treturn src * pow((1.0 / (rf2_1 * rf2_1)), 2.24);\n}    \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 albedo = texelFetch(iChannel1, ivec2(fragCoord), 0);\n\tvec3 normal = normalize(texelFetch(iChannel2, ivec2(fragCoord), 0).xyz);\n    vec3 position = vec3(fragCoord, -(1.0 - albedo.a) * 384.0 / particlesSize); // fake Z-depth from fade level\n        \n    fragColor = vec4(vec3(0.0), albedo.a); \n    fragColor.rgb += computeLighting(albedo.rgb, normal, streamsGlossExp, ambientLightCol, ambientLightDir, 0.5, 0.175);\n    fragColor.rgb += 0.5 * albedo.rgb;\n    \n    // return;\n    \n    for(int i = 0; i < nParticles; ++i)\n    {\n        vec3 particlePos = vec3(getParticlePosition(i), 0.0);\n        vec3 particleCol = texelFetch(iChannel1, ivec2(particlePos.xy), 0).rgb;\n            \n        fragColor.rgb += computeSpotLight(albedo.rgb, normal, streamsGlossExp, position, particleCol, particlePos, particlesSize);\n    }\n    \n    fragColor.rgb = 1.25 * fragColor.rgb - vec3(0.075);\n    fragColor.rgb = mix(backgroundColor, fragColor.rgb, min(fragColor.a * 1.125, 1.0));\n    fragColor.rgb = computeVignetting(fragCoord, fragColor.rgb);\n    \n    for(int i = 0; i < nParticles; ++i)\n    {\n        vec3 particlePos = vec3(getParticlePosition(i), 0.0);\n        vec3 particleCol = texelFetch(iChannel1, ivec2(particlePos.xy), 0).rgb;\n        \n        fragColor.rgb += computeLightGlow(position, particleCol, particlePos, particlesSize);\n    }\n    \n    fragColor = vec4(pow(fragColor.rgb, vec3(1.0 / 2.24)), 1.0); // gamma correction\n    \n    // fragColor.rgb = abs(fragColor.r - fragColor.b) < 0.01 ? fragColor.rgb - length(fragColor.rgb) : fragColor.rgb;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// #define USE_CINEMATIC_MODE      // Uncomment this line for a more cinematic view (camera will side-scroll)\n// #define USE_BUMPY_STREAMS_MODE  // Uncomment this line to make streams bumpy (sausages-like)\n// #define USE_GENERATION_SEED 123 // Uncomment this line to use a fixed generation seed (then reset the simulation to apply the changes)\n    \n\nconst int nParticles = 180;\nconst int stars = 20;\nconst float particlesSize = 4.0;\nconst float collisionDamping = 0.5;\nconst float streamsFadingExp = 0.0;\nconst float gravityStrength = 1.6 / particlesSize;\n\nconst vec3 ambientLightDir = normalize(vec3(1.0, 2.0, 0.0));\nconst vec3 ambientLightCol = vec3(1.1, 1.0, 0.9);\nconst vec3 backgroundColor = vec3(1.0);\nconst float streamsGlossExp = 120.0;\nconst float spotlightsGlare = 0.0;\n\n#ifdef USE_BUMPY_STREAMS_MODE\n#define particlesSize mix(particlesSize, particlesSize * 0.5, (1.0 + sin(1.85 + iTime * 11.93805208)) * 0.5)\n#endif\n\n#ifdef USE_GENERATION_SEED\n#define generationSeed float(USE_GENERATION_SEED) // a fixed seed will generate the same output (in respect of the viewport size)\n#else\n#define generationSeed iDate.w // if no custom seed is provided, POSIX time is used instead (producing different results every time)\n#endif\n\nconst ivec2 cameraVelocity =\n#ifdef USE_CINEMATIC_MODE\nivec2(1, 0);\n#else\nivec2(0);\n#endif\n\n// Buf A: particles positions and inertia\n// Buf B: scene albedo  (accumulated)\n// Buf C: scene normals (accumulated)\n// Image: final compositing\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Compute Physics (Verlet Integration)\n\nfloat rand(in vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 randVec2(in vec2 co) {\n\treturn vec2(rand(co.xy + generationSeed * 0.0001), rand(-co.yx + generationSeed * 0.0001));\n}\n\nvec2 randNrm2(in vec2 fragCoord)\n{\n\tvec2 n = vec2(-1.0) + randVec2(fragCoord) * 2.0;\n    \n    float l = length(n);   \n    if(l <= 0.0000001) n = vec2(0.0, (l = 1.0));\n    \n    return (n / l);\n}\n\nvoid initParticle(in vec2 fragCoord, inout vec2 particlePrevPosition, inout vec2 particleCurrPosition)\n{\n\tparticleCurrPosition = randVec2(fragCoord) * iResolution.xy;\n    particlePrevPosition = particleCurrPosition - randNrm2(fragCoord) * particlesSize * 0.0625;\n}\n\nvoid initParticle2(in int particleID, in vec2 fragCoord, inout vec2 particlePrevPosition, inout vec2 particleCurrPosition)\n{\n    int start = stars * (particleID / stars);\n    vec2 seed = vec2(float(start), 1.0);\n\tparticleCurrPosition = randVec2(seed) * iResolution.xy;\n    particleCurrPosition += randVec2(fragCoord) * iResolution.xy / 20.0;\n    particlePrevPosition = particleCurrPosition - randNrm2(seed) * particlesSize * 0.0625;\n}\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID / iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvec2 computeGravitation(in int particleID, in vec2 particlePosition)\n{\n    vec2 acceleration = vec2(0.0);\n    \n    int start = stars * (particleID / stars);\n    \n    vec2 av = vec2(0.0);\n    \n    for(int j = 0; j < stars; ++j)\n    {\n        int i = j + start;\n\n        if(i != particleID) {\n            vec2 pos = getParticlePosition(i);\n            vec2 v = (pos - particlePosition);\n            av += v / float(stars);\n            float d = length(v);\n\n            if (d > 0.1) {\n                acceleration += (v / d) * 0.01;\n            }\n\n            if(d > 0.0000001) acceleration += (v / d) / pow(max(d, particlesSize * 2.0) * gravityStrength * float(stars), 2.0);\n        }\n    }\n    \n    for(int j = 0; j < nParticles; j += nParticles / stars)\n    {   \n        // int cluster = stars * (j / stars);\n        int cluster = stars * j;\n\n        if(cluster != start) {\n            vec2 v = vec2(0.0);\n            for(int i = 0; i < stars; ++i) {\n            \t// vec2 v1 = (getParticlePosition(i + cluster) - particlePosition);\n                vec2 v1 = (getParticlePosition(i + cluster) - av);\n            \tv += v1 / float(stars);\n        \t}\n            float d = length(v);\n            \n            float mul = 2.5;\n            float mul2 = 1.0;\n\n            if(d > 0.0000001) acceleration += (v / d) / pow(max(d, particlesSize * 2.0) * gravityStrength * mul, 2.0) * mul2;\n        }\n    }\n    \n    /*\n    for(int j = 0; j < nParticles; ++j)\n    {\n        int i = j;\n        \n        int cluster = stars * (i / stars);\n\n        if(i != particleID && cluster != start) {\n            vec2 v = (getParticlePosition(cluster) - particlePosition);\n            float d = length(v);\n            \n            float mul = 1.0;\n            float mul2 = 1.0 / 20.0;\n\n            if(d > 0.0000001) acceleration += (v / d) / pow(max(d, particlesSize * 2.0) * gravityStrength * mul, 2.0) * mul2;\n        }\n    }\n\t*/\n    \n    return acceleration;\n}\n\nvoid solveCollisions(inout vec2 particlePrevPosition, inout vec2 particleCurrPosition)\n{\n    vec2 particleInertia = (particleCurrPosition - particlePrevPosition);\n    \n\tif(particleCurrPosition.x < particlesSize || particleCurrPosition.x > iResolution.x - particlesSize)\n    {\n    \tparticleCurrPosition.x = clamp(particleCurrPosition.x, particlesSize, iResolution.x - particlesSize);\n        particlePrevPosition.x = particleCurrPosition.x + particleInertia.x * collisionDamping;\n    }\n    \n    if(particleCurrPosition.y < particlesSize || particleCurrPosition.y > iResolution.y - particlesSize)\n    {\n    \tparticleCurrPosition.y = clamp(particleCurrPosition.y, particlesSize, iResolution.y - particlesSize);\n        particlePrevPosition.y = particleCurrPosition.y + particleInertia.y * collisionDamping;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int particleID = int(floor(fragCoord.x) + iResolution.x * floor(fragCoord.y));\n    if(particleID >= nParticles) return;\n    \n    vec4 particleData = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 particlePrevPosition = particleData.zw;\n    vec2 particleCurrPosition = particleData.xy;\n     \n    // if(iFrame == 0) initParticle(fragCoord, particlePrevPosition, particleCurrPosition);\n    if(iFrame % (60 * 60) == 0) initParticle2(particleID, fragCoord, particlePrevPosition, particleCurrPosition);\n   \n    vec2 particleAcceleration = computeGravitation(particleID, particleCurrPosition);\n    vec2 particleInertia = particleCurrPosition - particlePrevPosition;\n    vec2 particleVelocity = particleInertia + particleAcceleration * 1.0;\n    //float vlim = 1.0;\n    //particleVelocity = clamp(particleVelocity, -1.0 * vlim, 1.0 * vlim);\n    //float vulim = 0.4;\n    //if (length(particleVelocity) < vulim) {\n    //    particleVelocity /= (vulim * 2.0);\n    //}\n    \n    particlePrevPosition = particleCurrPosition;\n    particleCurrPosition += particleVelocity;\n    \n    solveCollisions(particlePrevPosition, particleCurrPosition);\n    \n    fragColor = vec4(particleCurrPosition, particlePrevPosition);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Compute Scene Albedo\n\nfloat rand(in vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 randVec2(in vec2 co) {\n\treturn vec2(rand(co.xy + 0.0001), rand(-co.yx + 0.0001));\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID / iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvec2 getParticleVelocity(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID / iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy - texelFetch(iChannel0, particleCoord, 0).zw;\n}\n\nvec3 getParticleColor(in vec2 p) {\n    return normalize(vec3(0.1) + texture(iChannel2, p * 0.0001 + iTime * 0.005).rgb);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{ \n    fragColor = texelFetch(iChannel1, ivec2(fragCoord) + cameraVelocity, 0);\n    fragColor.a *= (1.0 - streamsFadingExp);\n        \n\tfor(int i = 0; i < nParticles; ++i)\n    {\n        vec2 particlePos = getParticlePosition(i);\n        vec2 particleVel = getParticleVelocity(i);\n        vec3 particleCol = getParticleColor(particlePos);\n        float star = float(i / stars + 1);\n        star = star == 1.0 ? float(i) : star;\n        vec2 seed = vec2(star, 1.0);\n        particleCol = hsv2rgb(vec3(rand(seed), length(particleVel), 1.0));\n        //particleCol = vec3(length(particleVel), 0.0, 0.0);\n        \n        // float particlesSize2 = particlesSize + 4.0 * particlesSize * star / float(stars);\n        float d = distance(fragCoord, particlePos);\n        float alpha = smoothstep(particlesSize, particlesSize * 0.5, d);\n        vec2 delta = fragCoord - particlePos;\n        float theta = atan(delta.y, delta.x);\n        d = 1.0 / (1.0 + d);\n        // d *= theta;\n        // d = theta + fract(iTime);\n        \n        // fragColor.rgb += particleCol * alpha * 0.1;\n        // if (rand(particlePos) < 0.5) {\n        // alpha *= clamp(length(particleVel), 0.0, 1.0);\n        //if (length(particleVel) < 10.5) {\n            //if (rand(particlePos) > 0.0 * length(particleVel)) {\n        if (rand(vec2(iTime, 1.0)) > 1.0 * length(particleVel)) {;\n        \td = 0.0;\n            // alpha = 1.0;\n        }\n        \n        fragColor = mix(fragColor, vec4(d * 2.0 * particleCol * pow(alpha, 50.0), 1.0), alpha);\n        \n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Compute Scene Normals\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID / iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{ \n    fragColor = texelFetch(iChannel1, ivec2(fragCoord) + cameraVelocity, 0);\n    \n\tfor(int i = 0; i < nParticles; ++i)\n    {\n        vec2 v = fragCoord - getParticlePosition(i);\n        \n        float l = length(v);\n        float alpha = smoothstep(particlesSize, particlesSize * 0.5, l);\n        \n        float z = sqrt(abs(particlesSize * particlesSize - l * l));\n        vec3 n = normalize(vec3(v, z));\n\n        fragColor = mix(fragColor, vec4(n, 1.0), alpha);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}