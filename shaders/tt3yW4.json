{
    "Shader": {
        "info": {
            "date": "1609077222",
            "description": "Vesica3D",
            "flags": 0,
            "hasliked": 0,
            "id": "tt3yW4",
            "likes": 6,
            "name": "Vesica3D",
            "published": 3,
            "tags": [
                "vesica"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdVesica3D(vec3 p, float r, float h, float d ) {\n    p.x = abs(p.x);\n    p.x+=d;\n    return sdCappedCylinder(p,r,h);\n}\n\nvec4 GetDist(vec3 p) {\n    float t = iTime*1.1;\n    p*=matRotateX(radians(90.0));\n    vec3 prevP = p;\n    float _floor = p.y;\n\n    float y = 1.0;\n    \n    vec3 pos = vec3(0.0,0.0,-y);\n    \n    p+=pos;\n    p*=matRotateY(radians(30.0*t))*matRotateZ(radians(20.0*t));\n    \n    p.xz = DF(vec2(p.x,p.z),4.0);\n    p.xz = abs(p.xz);\n    p.xz -= vec2(0.6);\n    \n    float d = sdVesica3D(p*matRotateY(radians(45.0)),0.3,0.05,0.2);\n\n    p = prevP;\n    p+=pos;\n    p*=matRotateY(radians(20.0*t));\n    p.xz = DF(vec2(p.x,p.z),8.0);\n    p.xz = abs(p.xz);\n    p.xz -= vec2(1.2);\n    \n    float d2 = sdVesica3D(p*matRotateY(radians(45.0)),0.3,0.05,0.2);\n\n    p = prevP;\n    p+=pos;\n    p*=matRotateY(radians(25.0*t));\n    p.xz = DF(vec2(p.x,p.z),16.0);\n    p.xz = abs(p.xz);\n    p.xz -= vec2(1.8);\n    \n    float d3 = sdVesica3D(p*matRotateY(radians(45.0)),0.3,0.05,0.2);\n    \n    p = prevP;\n    p+=pos;\n     p*=matRotateY(radians(30.0*-t));\n    p.xz = DF(vec2(p.x,p.z),12.0);\n    p.xz = abs(p.xz);\n    p.xz -= vec2(1.5);\n    \n    float d4 = length(p)-0.1;\n        \n    p = prevP;\n    p+=pos;\n    p*=matRotateY(radians(30.0*-t))*matRotateZ(radians(40.0*-t));\n    p.xz = DF(vec2(p.x,p.z),6.0);\n    p.xz = abs(p.xz);\n    p.xz -= vec2(0.9);\n    \n    float d5 = length(p)-0.1;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+p.xyz+vec3(0,1,2));\n    vec4 res = vec4(col,min(d,min(d2,min(d3,min(d4,d5)))));\n        \n    vec4 model = res;\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,5,3);\n    \n    lightPos.yz *= Rot(radians(-60.0));\n    lightPos.xz *= Rot(iTime*.3+1.0);\n    \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n    \n    float lambert = max(.0, dot( n, l))*0.6;\n    \n    return vec2((lambert+dif),max(0.9, 1.0)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-60.0));\n    ro.xz *= Rot(iTime*.3+1.0);\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n    \n        vec2 dif = GetLight(p);\n        col = vec3(dif.x)*d.xyz;\n        col *= dif.y;\n        \n    } else {\n        // background\n        col = vec3(1.0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}