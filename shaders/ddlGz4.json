{
    "Shader": {
        "info": {
            "date": "1665772146",
            "description": "Finding the nearest three neighbours on an equilateral triangular grid, with a bit of wobble.\n\nCaveat: for efficiency this only identifies three neighbours on a regular grid, then adds wobble.  Hit space to see how this breaks contour lines.",
            "flags": 16,
            "hasliked": 0,
            "id": "ddlGz4",
            "likes": 8,
            "name": "Voronoi cells on hexagonal grid",
            "published": 3,
            "tags": [
                "hexagons",
                "nearestneighbor"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "const float subdivisions = 6.0;\nconst mat2x2 fwd = subdivisions * mat2x2(.500, .866, -.500,.866);\nconst mat2x2 bwd = inverse(fwd);\n\nvoid neighbours(out vec2 n[3], in vec2 uv) {\n    uv *= fwd;\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    // If we skip the bwd transform then we have\n    // simple integer grid coordinates here.  Though\n    // the transform is still needed for the distance\n    // tests to find the nearest neighbour.\n    n[0] = i * bwd;\n    n[1] = (i + vec2(1.0, 1.0)) * bwd;\n    const vec2 c = vec2(1.0, 0.0);\n    n[2] = (i + (f.x > f.y ? c.xy : c.yx)) * bwd;\n}\n\nfloat nrand(vec2 n) {\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233))) * 43758.5453); }\nvec2 nrand2(vec2 n) { return vec2(nrand(n), nrand(n + 1.2345)); }\nvec2 cs(float t) { return vec2(cos(t), sin(t)); }\n\nvoid noisyneighbours(out vec2 n[3], out vec2 nn[3], in vec2 uv) {\n    float loop_size = (1.0 - cos(iTime * 0.25)) * 0.02;\n    neighbours(n, uv);\n    for (int i = 0; i < 3; ++i) {\n        nn[i] = n[i] - uv + cs(iTime * nrand(n[i]) * 2.0) * loop_size;\n    }\n}\n\nvoid sort(out vec4 sorted[3], in vec2 n[3], in vec2 nn[3]) {\n    float l0 = dot(nn[0], nn[0]);\n    float l1 = dot(nn[1], nn[1]);\n    float l2 = dot(nn[2], nn[2]);\n    vec4 nnn0 = vec4(n[0], nn[0]);\n    vec4 nnn1 = vec4(n[1], nn[1]);\n    vec4 nnn2 = vec4(n[2], nn[2]);\n    bvec2 lo = bvec2(l0 < l1 && l0 < l2,\n                     l1 < l0 && l1 < l2);\n    sorted[0] = lo.x ? nnn0 : lo.y ? nnn1 : nnn2;\n#if 1\n    bvec2 hi = bvec2(!(l0 < l1 || l0 < l2),\n                     !(l1 < l0 || l1 < l2));\n    bvec2 mi = bvec2(!(lo.x || hi.x), !(lo.y || hi.y));\n    sorted[1] = mi.x ? nnn0 : mi.y ? nnn1 : nnn2;\n    sorted[2] = hi.x ? nnn0 : hi.y ? nnn1 : nnn2;\n#endif\n}\n\nvec3 honeycomb(vec2 uv) {\n    vec2 n[3];\n    vec2 nn[3];\n    vec4 overlay = vec4(0.0);\n    noisyneighbours(n, nn, uv);\n    for (int i = 0; i < 3; ++i) {\n        vec3 col = vec3(float(i==0), float(i==1), float(i==2));\n        vec2 d = nn[i];\n        if (length(d) < 0.008) overlay = vec4(col, 1.0);\n    }\n\n    vec4 s[3];\n    sort(s, n, nn);\n    vec3 colour = vec3(nrand2(s[0].xy).xy, 0.5);\n    \n    if (texelFetch(iChannel0, ivec2(32, 2), 0).r > 0.5) {\n        float m1 = dot(0.5 * (s[0].zw + s[1].zw), normalize(s[1].zw - s[0].zw));\n        float m2 = dot(0.5 * (s[0].zw + s[2].zw), normalize(s[2].zw - s[0].zw));\n        float w = 0.25 * (4.0 - cos(min(m1, m2) * 512.0));\n        w += 0.25 * smoothstep(-0.003, 0.0, -abs(m1 - m2));\n        colour *= w;\n    }\n    return colour * (1.0 - overlay.a) + overlay.rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xx;\n    \n    fragColor = vec4(honeycomb(uv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}