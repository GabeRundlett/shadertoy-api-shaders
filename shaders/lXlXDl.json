{
    "Shader": {
        "info": {
            "date": "1710166490",
            "description": "Hexagon Cineshader Test\n\nI do not permit the copying or use of this code to train AI models, publishing it \nwithout my permission, including it in archives (including archive.org) or publishing\nscreenshots of the output. Please respect my wishes.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXlXDl",
            "likes": 12,
            "name": "Hexagon Cineshader Test",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "rubixcom",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "// Colourful hexagon layers.\n\n// Using colour palettes from:\n// https://www.shadertoy.com/view/ll2GD3\n// Copyright Â© 2015 Inigo Quilez\n\n// I reserve the copyright to the rest of the code. You are welcome to use it in your\n// own shader on shadertoy.com. I have learned everything about the amazing stuff \n// you can do with 3D graphics from amazing work of talented individuals on this site \n// and me sharing my work is a way for me to give back to the community. If you can \n// attribute my code back to this shader, it would be nice. If you want to use code \n// in any other way please contact me and I would be happy to chat and am likely to \n// allow it.\n//\n// I do not permit the copying or use of this code to train AI models, publishing it \n// without my permission, including it in archives (including archive.org) or publishing\n// screenshots of the output. Please respect my wishes.\n\n// Thanks to IQ: https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy ) / iResolution.x;\n\n    float height = 4.0 + 3.0 * sin(iTime);//+texture(iChannel0, vec2(0.8,0.)).x);\n    float depthForCineshader = 1.;\n    float transparencyFactor = 1.;\n    vec3 col = vec3(0.);\n    for (float layer = 1.; layer < 6.; layer++) {\n    \n        float rotation = iTime+layer;\n        vec2 uvTransformed = \n            (uv * height * layer*layer // Layer scale\n            + vec2(.7*layer)) // Rotation offset\n            * mat2(cos(rotation),-sin(rotation),sin(rotation),cos(rotation));\n\n        vec2 uvFract = fract(uvTransformed);\n        uvFract.x = mod(uvTransformed.x,2.0) > 1.0 ? 1.0 - uvFract.x : uvFract.x;\n\n        float d1 = (length(uvFract)), d2 = (length(uvFract-vec2(0.,1.))), d3 = (length(uvFract-vec2(1.,.5)));\n\n        float m = min(min(d1,d2),d3);\n        float d = 1.0*(6. - layer)/5.;\n        \n        vec3 col1 = pal( (iTime+floor(uvTransformed.y))/3., vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n        vec3 col2 = pal( (iTime+floor(uvTransformed.y+.5))/6., vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n        \n        depthForCineshader-=.05;\n\n        if (m >.30) {\n            float diff = m == d1 ? abs(m-min(d2,d3)) : (m == d2) ? abs(m-min(d1,d3)) : abs(m-min(d1,d2));\n            float edgeThickness = .025;\n            float thickLine =  m >.33 && (diff > edgeThickness*2. && (uvFract.y < (1.-edgeThickness) && uvFract.y > edgeThickness || uvFract.x < .6)) ? 1.0 : .5;\n            col += transparencyFactor * thickLine * d * (1.-m*m) * ( m == d1 || m == d2 ? col2 : col1);\n            transparencyFactor /= 4.;\n        }\n    }\n\n    fragColor = vec4(col,depthForCineshader);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}