{
    "Shader": {
        "info": {
            "date": "1645133434",
            "description": "has a few grainy artifacts",
            "flags": 0,
            "hasliked": 0,
            "id": "7sXBzX",
            "likes": 6,
            "name": "Little Refracty Torus Thing",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 p) {\n    float r1 = 1.3;\n    float r2 = 0.3;\n    float d1 = length(p.xz) - r1;\n    \n    float a = atan(p.x, p.z);\n    \n    vec2 u = vec2(d1, p.y);    \n    u.xy *= Rot(1.5 * a - 0.5 * atan(u.x, u.y) + iTime);\n    u.x = sabs(u.x) - 0.5;\n    u = sabs(u) - 0.2;\n\n    float d2 = length(u) - r2;\n    \n    return 0.5 * d2;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\t\n    float dO=0.; \n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 0, -5);\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.5);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1. + exp(-0.6 * d); // very specific trick\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n\n        vec3 pIn = p - 30. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.); //rdIn\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n        \n        float fresnel = pow(1.+dot(rdIn, nExit), 2.);\n        col = vec3(fresnel);\n        fresnel = pow(1.+dot(rd, n), 5.);\n        col += vec3(fresnel);\n        \n        float dif = dot(p, normalize(vec3(1,2,3)))*.5+.5;\n        col *= mix(dif, 1., 0.8 + 0.22 * thc(40., d * 20.));\n        \n        float v = 1.-exp(-1. * pow(dIn, 4.));\n        //col = vec3(v);\n        col = smin(col, vec3(v));\n        vec3 e = vec3(dIn);\n        col *= pal(0.02 * dIn, e, e, e, vec3(0,1,2)/3.);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n//crude\nvec3 smin(vec3 a, vec3 b) {\n    return vec3(smin(a.x,b.x), smin(a.y,b.y), smin(a.z,b.z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}