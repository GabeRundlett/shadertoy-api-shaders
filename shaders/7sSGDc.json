{
    "Shader": {
        "info": {
            "date": "1618032473",
            "description": "Arc path between two points with a starting tangent.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sSGDc",
            "likes": 2,
            "name": "Arc Path Segment",
            "published": 3,
            "tags": [
                "curve",
                "segment",
                "path",
                "arc"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "// Drawing utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// SDFs\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdPlane2D(in vec2 p, in vec2 pos, in vec2 nor) {\n    return abs(dot(p - pos, nor));\n}\n\n// p: position\n// d: direction (sin/cos of tangent)\n// t: target\nfloat getRadius(in vec2 p, in vec2 d, in vec2 t) {\n    t -= p;\n    return dot(t, t) / dot(t, d * vec2(-2, 2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 4.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float a = iTime;\n    vec2 d = vec2(sin(a), cos(a));\n    float r = getRadius(vec2(0.0), d, vec2(2.0, 0.0));\n\n    vec2 n = vec2(-d.x, d.y);\n    vec2 o = n * r;\n\n    // Circle\n    drawSDF(abs(sdDisc(uv, o, abs(r))), vec3(0.0, 0.0, 1.0));\n\n    // Draw shortest segment\n    if (0.0 < uv.x && uv.x < 2.0 && uv.y * sign(o.y) < 0.0) {\n        drawSDF(abs(sdDisc(uv, o, abs(r))) - 0.01, vec3(1.0, 0.8, 0.0));\n    }\n\n    // Tangent\n    drawSDF(sdPlane2D(uv, vec2(0.0), n), vec3(1.0, 0.0, 0.0));\n\n    // End points\n    drawSDF(sdDisc(uv, vec2(0.0), 0.05), vec3(1.0));\n    drawSDF(sdDisc(uv, vec2(2.0, 0.0), 0.05), vec3(1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}