{
    "Shader": {
        "info": {
            "date": "1691588502",
            "description": "Calculations @ GeoGebra: https://www.geogebra.org/3d/auzcy3pz\nReference:\nSmalley, R. E. (2001). Carbon Nanotubes: Synthesis, Structure, Properties and Applications (M. S. Dresselhaus, G. Dresselhaus, & P. Avouris, Eds.; 2001st edition). Springer.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "clscWX",
            "likes": 9,
            "name": "nanotube",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "cylinder",
                "nanotube",
                "wythoffconstruction",
                "fundamentaltriangle",
                "euclideanplanetiling",
                "cylindricalcoordinatesystem"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "float scene(vec3 p) {\n    // parameters\n    float n = 1.0 + floor(mod(float(4000 + iFrame) / 240.0, 10.0));\n    float m = 0.0 + floor(mod(float(5000 + iFrame) / 360.0, 10.0));\n    vec4 vecs = nanotube_vectors(n, m, SQRT3);\n    vec3 Ch = vec3(vecs.xy, 0), T = vec3(vecs.zw, 0);\n    float r = length(T) / TAU;\n    float s = max(length(Ch), length(T)) / 1.5; \n    \n    // scale part 1/2\n    p *= s;\n\n    // nanotube\n    vec4 tile = TILES[int(mod(float(iFrame) / 120.0, 14.0))];\n    float d = sdfNanotube(p, n, m, SQRT3, 0.05, tile);\n    \n    // ball\n    p.z += length(Ch) / 2.0 * sin(float(iFrame) / 45.0);\n    d = min(d, sdSphere(p, r / 2.0));\n      \n    // scale part 2/2\n    return d / s;\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float depth = MIN_DIST;\n    float d;\n\n    for (int i = 0; i < MAX_ITER; i++) {\n        vec3 p = ro + depth * rd;\n        d = scene(p);\n        depth += d;\n        if (d < PRECISION || depth > MAX_DIST) {\n            break;\n        }\n    }\n\n    d = depth;\n\n    return d;\n}\n\nvec3 normal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n        e.xyy * scene(p + e.xyy) +\n        e.yyx * scene(p + e.yyx) +\n        e.yxy * scene(p + e.yxy) +\n        e.xxx * scene(p + e.xxx)\n    );\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    if (m == vec2(0.0)) m = vec2(0.5);\n\n    vec3 col = vec3(0);\n    vec3 lp = vec3(0);\n    vec3 ro = vec3(0, 0, 1.5);\n\n    float camRadius = 1.0;\n    ro.yz = ro.yz * camRadius * rotmat2(mix(-PI / 2.0, PI / 2.0, m.y));\n    ro.xz = ro.xz * rotmat2(mix(-PI, PI, m.x)) + vec2(lp.x, lp.z);\n\n    vec3 rd = camera(ro, lp) * normalize(vec3(p, -1));\n\n    float d = march(ro, rd);\n\n    if (d > MAX_DIST) {\n        col = COLOR_BACKGROUND;\n    } else {\n        vec3 p = ro + rd * d;\n        vec3 norm = normal(p);\n\n        vec3 lightPos = vec3(0, 1, 1);\n        vec3 lightDir = normalize(lightPos - p) * 0.65;\n\n        float diff = clamp(dot(norm, lightDir), 0.0, 1.0) * 0.5 + 0.5;\n\n        vec3 rnd = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n        col = vec3(diff) + rnd;    \n    }\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// MIT License\n// \n// Copyright (c) 2023, Daniel Antonio Negr√≥n (@remaindeer)\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n//// ray marching\n#define MAX_ITER 10000\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define PRECISION 0.00001\n#define EPSILON 0.00005\n#define COLOR_BACKGROUND vec3(0, 0, 0)\n#define COLOR_AMBIENT vec3(0.42, 0.20, 0.1);\n\n//// constants\n#define PI 3.1415926535897932384626433\n#define TAU (2.0 * PI)\n#define PHI (1.0 + sqrt(5.0)) / 2.0\n#define INF 999.0\n#define COS30 cos(radians(30.0))\n#define SQRT3 sqrt(3.0)\n\n//// fundamental triangle\n#define ft vec4(0, COS30, 0.5, COS30)\n\n//// generator points\n#define gq vec2(0.25, COS30)\n#define gc (ft.xy + COS30 * ft.zw) / (0.5 + COS30 + 1.0)\n#define gx vec2((3.0 - SQRT3) / 4.0, tan(radians(60.0)) * ((3.0 - SQRT3) / 4.0))\n\n//// Wythoff construction ===========================================================\nconst vec4[14] TILES = vec4[14] (\n    ////// Platonic and Archimedean tilings -----------------------------------------\n    vec4(ft.zw, 1.0, 0.0), // Hexagonal tiling (hextille)\n    vec4(ft.xy, 2.0, 0.0), // Trihexagonal tiling (hexadeltille)\n    vec4(gq   , 3.0, 0.0), // Truncated hexagonal tiling (truncated hextille)\n    vec4(ft.xx, 4.0, 0.0), // Triangular tiling (deltille) \n    vec4(gx   , 5.0, 0.0), // Rhombitrihexagonal tiling (rhombihexadeltille)\n    vec4(gc   , 7.0, 0.0), // Truncated trihexagonal tiling (truncated hexadeltille)\n    vec4(ft.xx, 8.0, 0.0), // Snub trihexagonal tiling (snub hextille)\n    ////// Dual Laves tilings -------------------------------------------------------\n    vec4(ft.xx, 4.0, 0.0), // Triangular tiling (deltille) \n    vec4(ft.xx, 0.0, 2.0), // Rhombille tiling (rhombille)\n    vec4(ft.xx, 0.0, 3.0), // Triakis triangular tiling (kisdeltille)\n    vec4(ft.zw, 1.0, 0.0), // Hexagonal tiling (hextille)\n    vec4(ft.xx, 0.0, 5.0), // Deltoidal trihexagonal tiling (tetrille)\n    vec4(ft.xx, 0.0, 7.0), // Kisrhombille tiling (kisrhombille)\n    vec4(ft.xx, 9.0, 0.0)  // Floret pentagonal tiling (6-fold pentille)\n); // ===============================================================================\n\n//// number theory\n\nint gcd(float x, float y) {\n    int a = int(x);\n    for (int b = int(y), t; b != 0; )\n    {\n     \tt = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\n//// rotations\n\nmat2 rotmat2(float angle) {\n    float c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nmat3 rotmat3(vec3 angle) {\n    float sintht = sin(angle.x), sinpsi = sin(angle.y), sinphi = sin(angle.z);\n    float costht = cos(angle.x), cospsi = cos(angle.y), cosphi = cos(angle.z);\n    return mat3(\n        costht * cospsi, sintht * cospsi, -sinpsi, \n        costht * sinpsi * sinphi - sintht * cosphi, sintht * sinpsi * sinphi + costht * cosphi, cospsi * sinphi,\n        costht * sinpsi * cosphi + sintht * sinphi, sintht * sinpsi * cosphi - costht * sinphi, cospsi * cosphi\n    );\n}\n\n//// intersection\n\nvec2 intersection(vec2 p1, vec2 p2, vec2 p3, vec2 p4) {\n    // http://paulbourke.net/geometry/pointlineplane/\n    float d = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n    float ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / d;\n    // float ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / d;\n    return p1 + ua * (p2 - p1);\n}\n\n//// signed distance functions\n//// ------------------------------------------------\n//// https://iquilezles.org/articles/distfunctions/\n//// https://iquilezles.org/articles/distfunctions2d/\n//// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nfloat opIntersection( float d1, float d2 ) { \n    return max(d1, d2); \n}\n\nfloat opUnion(float d1, float d2) {\n    return min(d1, d2); \n}\n\nfloat opOnion(in float sdf, in float thickness) {\n    return abs(sdf) - thickness;\n}\n\nvec3 opRep(in vec3 p, in vec3 c) {\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\n//// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n//// https://iquilezles.org/articles/distfunctions/\n//// https://iquilezles.org/articles/distfunctions2d/\n//// ------------------------------------------------\n\nfloat sdTube(vec3 p, float h, float r) {\n    float d = length(p.xy) - r;\n    d = opOnion(d, 0.05);\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\n//// Wythoff Construction\n\nvec2 snub632() {\n    // fermat point\n    vec2 pf = intersection(vec2(-0.75, COS30 / 2.0), ft.zw, vec2(1, 0), ft.xy);\n    // reflect over side (y-axis)\n    vec2 q1 = vec2(-1.0 * pf.x, pf.y);\n    // vec2 q2 = vec2(pf.x, pf.y + 2.0 * (COS30 - pf.y));\n    // project to hypotenuse then double to obtain reflection\n    vec2 q3 = dot(pf, ft.zw) / dot(ft.zw, ft.zw) * ft.zw;\n    q3 = pf + 2.0 * (q3 - pf);\n    // snub point is at half the hypotenuse of the new right triangle (Thales's theorem)\n    return q1 + ((q3 - q1) / 2.0);\n}\n\nfloat sdSchwartz632Snub(vec3 p, float t) {\n    // p the uv\n    // t the thickness\n    // take advantage of symmetry\n    float a = atan(p.y, p.x);\n    float M = floor(mod(degrees(a) - 30.0, 360.0) / 60.0) * 60.0;\n    p.xy = rotmat2(radians(M)) * p.xy;\n    // snub point\n    vec3 g = vec3(snub632(), 0);\n    // rotate\n    vec3 G = vec3(rotmat2(radians(180.0)) * (g.xy - ft.xy) + ft.xy, 0);\n    // distance\n    float d = sdCapsule(p, g, G, t);\n    // fix by https://www.shadertoy.com/user/mla\n    d = opUnion(d, sdCapsule(vec3(rotmat2(radians(-60.0)) * p.xy, p.z), g, G, t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(-60.0)) * (G - g).xy + g.xy, 0), t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(+60.0)) * (G - g).xy + g.xy, 0), t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(+120.0)) * (G - g).xy + g.xy, 0), t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(+180.0)) * (G - g).xy + g.xy, 0), t));\n    return d;\n}\n\nfloat sdSchwartz632DualSnub(vec3 p, float t) {\n    // p the uv\n    // t the thickness\n    // snub point\n    vec3 g = vec3(snub632(), 0);\n    // take advantage of symmetry\n    float a = atan(p.y, p.x) - (atan(g.y, g.x) - radians(60.0));\n    float M = floor(mod(degrees(a), 360.0) / 60.0) * 60.0;\n    p.xy = rotmat2(radians(M)) * p.xy;\n    float R3 = SQRT3 / 2.0 * length(g);\n    float r3 = SQRT3 / 6.0 * length(g); \n    vec2 n0 = normalize(rotmat2(radians(+30.0)) * g.xy);\n    vec3 n1 = vec3((R3 + r3) * n0, 0);\n    vec3 n2 = vec3(n1.xy + rotmat2(radians(-60.0)) * (2.0 * r3 * n0), 0);\n    vec3 n3 = vec3(n1.xy + rotmat2(radians(+60.0)) * (2.0 * r3 * n0), 0);\n    // distance\n    float d = sdCapsule(p, vec3(ft.xx, 0), n1, t);\n    d = opUnion(d, sdCapsule(p, n1, n2, t));\n    d = opUnion(d, sdCapsule(p, n1, n3, t));\n    d = opUnion(d, sdCapsule(p, n2, n1 + n2 + -n3, t));\n    d = opUnion(d, sdCapsule(p, n3, n1 + n3 + -n2, t));\n    return d;\n}\n\nfloat sdSchwartz632(vec3 p, vec2 g, float m, float w, float t, bool o) {\n    // snub case\n    if (m == 8.0) {\n        return sdSchwartz632Snub(p, t);\n    }\n    // dual snub case\n    else if (m == 9.0) {\n        return sdSchwartz632DualSnub(p, t);\n    }\n    p = abs(p);\n    if (p.y < 2.0 * COS30 * p.x) {\n        p.xy = rotmat2(radians(-60.0)) * p.xy;\n        p = abs(p);\n    }\n    // distance\n    float d = o ? sdSphere(p, t) : INF;\n    vec3 g3 = vec3(g, 0);\n    d = bool(mod(m, 2.0)) ? opUnion(d, sdCapsule(p, g3, vec3(0, g3.y, 0), t)) : d;\n    vec3 v = vec3(ft.zw, 0);\n    d = bool(mod(floor(m / 2.0), 2.0)) ? opUnion(d, sdCapsule(p, g3, dot(g3, v) / dot(v, v) * v, t)) : d;\n    d = bool(mod(floor(m / 4.0), 2.0)) ? opUnion(d, sdCapsule(p, g3, vec3(g3.x, ft.y, 0), t)) : d;\n    d = bool(mod(w, 2.0)) ? opUnion(d, sdCapsule(p, vec3(ft.xx, 0), vec3(ft.xy, 0), t)) : d;\n    d = bool(mod(floor(w / 2.0), 2.0)) ? opUnion(d, sdCapsule(p, vec3(ft.xx, 0), vec3(ft.zw, 0), t)) : d;\n    d = bool(mod(floor(w / 4.0), 2.0)) ? opUnion(d, sdCapsule(p, vec3(ft.xy, 0), vec3(ft.zw, 0), t)) : d;\n    return d;\n}\n\nfloat sdSchwartz632Plane(vec3 p, vec2 g, float m, float w, float t, bool o) {\n    vec3 v = vec3(3.0, 2.0 * COS30, 0.0);\n    vec3 p1 = opRep(p, v);\n    vec3 p2 = opRep(p + v / 2.0, v);\n    return opUnion(\n        sdSchwartz632(p1, g, m, w, t, o),\n        sdSchwartz632(p2, g, m, w, t, o)\n    );\n}\n\n//// nanotube\n\nvec4 nanotube_vectors(float n, float m, float cc) {\n    mat2 a = cc * mat2(SQRT3 / 2.0, 0.5, SQRT3 / 2.0, -0.5);\n    vec2 Ch = n * a[0] + m * a[1];\n    float dR = float(gcd(2.0 * n + m, 2.0 * m + n));\n    float t1 = (2.0 * m + n) / dR;\n    float t2 = -((2.0 * n + m) / dR);\n    vec2 T = t1 * a[0] + t2 * a[1];\n    return vec4(Ch, T);\n}\n\nfloat sdfNanotube(vec3 p, float n, float m, float cc, float t, vec4 tile) {\n    // p -> the uv\n    // n, m -> the nanotube lattice vector parameters\n    // cc -> the carbon-carbon bond length\n    // t -> the segment thickness\n    // tile -> the wythoff tile parameters\n    vec4 vecs = nanotube_vectors(n, m, cc);\n    // chiral vector (Ch)\n    vec3 C = vec3(vecs.xy, 0);\n    // lattice vector\n    vec3 T = vec3(vecs.zw, 0);\n    // radius\n    float r = length(T) / TAU;\n    // tube\n    float d = sdTube(p, length(C) / 2.0, r);\n    // cylinder -> unrolled cylinder on plane\n    p = vec3(p.z, (mod(atan(p.y, p.x) + TAU, TAU) / TAU) * length(T), 0.0);\n    // shift b/c lattice sheet starts @ (0, 0)\n    p.x += length(C) / 2.0;\n    // align lattice sheet w/ x-axis\n    float dir = sign(determinant(mat2(C.x, 1, C.y, 0)));\n    float alpha = (dir == 0.0 ? 1.0 : dir) * acos(dot(C.xy, vec2(1, 0)) / length(C.xy));\n    p = rotmat3(vec3(-alpha, 0, 0)) * p - vec3(0.5, SQRT3 / 2.0, 0);\n    // intersect tube and lattice\n    d = max(d, sdSchwartz632Plane(p, tile.rg, tile.b, tile.w, t, true));\n    return d;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}