{
    "Shader": {
        "info": {
            "date": "1487867290",
            "description": "Emulate ZX Spectrum attribute clash as an image filter.\n\nTry switching the webcam iChannel0 to one of the built in videos.",
            "flags": 2,
            "hasliked": 0,
            "id": "XsfcD8",
            "likes": 60,
            "name": "ZX Spectrum attribute clash",
            "published": 3,
            "tags": [
                "filter",
                "zxspectrum",
                "attribute",
                "clash"
            ],
            "usePreview": 1,
            "username": "XIX",
            "viewed": 3799
        },
        "renderpass": [
            {
                "code": "\n// adjust input camera gamma\n#define CAMPOW 1.0\n\n// chunky pixel size\n#define LOWREZ 4.0\n\n// color brightnesses\n#define CFULL 1.0\n#define CHALF 0.8431372549\n\n// dither amount, 0 to 1\n#define DITHER 1.0\n\n\nvec4 smap(vec3 c)\n{\n    c=pow(c,vec3(CAMPOW));\n    if( (c.r>CHALF) || (c.g>CHALF) || (c.b>CHALF) ) // bright?\n    {\n\t\treturn vec4( c.rgb , 1.0);\n    }\n    else\n    {\n\t\treturn vec4( min( (c.rgb/CHALF) , vec3(1.0,1.0,1.0) ) , 0.0 );\n    }\n}\n\nvec4 bmap(vec3 c)\n{\n    c=pow(c,vec3(CAMPOW));\n    if( (c.r>CHALF) || (c.g>CHALF) || (c.b>CHALF) ) // bright?\n    {\n\t\treturn vec4( floor(c.rgb+vec3(0.5)) , 1.0);\n    }\n    else\n    {\n\t\treturn vec4( min( floor((c.rgb/CHALF)+vec3(0.5)) , vec3(1.0,1.0,1.0) ) , 0.0 );\n    }\n}\n\nvec3 fmap(vec4 c)\n{\n    if(c.a>=0.5)\n    {\n        return c.rgb*vec3(CFULL,CFULL,CFULL);\n    }\n    else\n    {\n        return c.rgb*vec3(CHALF,CHALF,CHALF);\n    }\n}\n\n\nvoid zxspectrum_clash( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pv = floor(fragCoord.xy/LOWREZ);\n    vec2 bv = floor(pv/8.0)*8.0;\n    vec2 sv = floor(iResolution.xy/LOWREZ);\n    \n    \n    vec4 min_cs=vec4(1.0,1.0,1.0,1.0);\n    vec4 max_cs=vec4(0.0,0.0,0.0,0.0);\n    float bright=0.0;\n\n    \n    for(int py=1;py<8;py++)\n    {\n        for(int px=0;px<8;px++)\n        {\n\t\t    vec4 cs=bmap( (texture(iChannel0,(bv+vec2(px,py))/sv).rgb) );\n            bright+=cs.a;\n        \tmin_cs=min(min_cs,cs);\n        \tmax_cs=max(max_cs,cs);\n        }\n    }\n    \n    vec4 c;\n    \n    if(bright>=24.0)\n    {\n        bright=1.0;\n    }\n    else\n    {\n        bright=0.0;\n    }\n    \n    if( max_cs.rgb==min_cs.rgb )\n    {\n        min_cs.rgb=vec3(0.0,0.0,0.0);\n    }\n\n    if( max_cs.rgb==vec3(0.0,0.0,0.0) )\n    {\n        bright=0.0;\n        max_cs.rgb=vec3(0.0,0.0,1.0);\n        min_cs.rgb=vec3(0.0,0.0,0.0);\n    }\n    \n    vec3 c1=fmap(vec4(max_cs.rgb,bright));\n    vec3 c2=fmap(vec4(min_cs.rgb,bright));\n    \n    vec3 cs=texture(iChannel0,pv/sv).rgb;\n    \n    vec3 d= (cs+cs) - (c1+c2) ;\n    float dd=d.r+d.g+d.b;\n\n    if( mod(pv.x+pv.y,2.0)==1.0)\n    {\n        fragColor=vec4(\n                dd>=-(DITHER*0.5) ? c1.r : c2.r,\n                dd>=-(DITHER*0.5) ? c1.g : c2.g,\n                dd>=-(DITHER*0.5) ? c1.b : c2.b,\n                1.0);\n    }\n    else\n    {\n        fragColor=vec4(\n                dd>=(DITHER*0.5) ? c1.r : c2.r,\n                dd>=(DITHER*0.5) ? c1.g : c2.g,\n                dd>=(DITHER*0.5) ? c1.b : c2.b,\n                1.0);\n    }\n \n//    fragColor.rgb=c1;\n}\n\nvoid zxspectrum_colors( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pv = floor(fragCoord.xy/LOWREZ);\n    vec2 sv = floor(iResolution.xy/LOWREZ);\n                \n    vec4 cs=smap(texture(iChannel0,pv/sv).rgb);\n    \n    if( mod(pv.x+pv.y,2.0)==1.0)\n    {\n\t\tfragColor = vec4(fmap(vec4(floor(cs.rgb+vec3(0.5+(DITHER*0.3))),cs.a)),1.0);\n    }\n    else\n    {  \n\t\tfragColor = vec4(fmap(vec4(floor(cs.rgb+vec3(0.5-(DITHER*0.3))),cs.a)),1.0);\n    }\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//    zxspectrum_colors(fragColor,fragCoord);\n    zxspectrum_clash(fragColor,fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}