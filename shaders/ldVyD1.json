{
    "Shader": {
        "info": {
            "date": "1521919422",
            "description": "Blue ridges form medial axes -- local minima of distance function. Moving in any direction away from blue ridge increases distance. Red ridges are \"watersheds\" -- local maxima of distance function. Convex corners are bluish, concave corners are reddish.",
            "flags": 16,
            "hasliked": 0,
            "id": "ldVyD1",
            "likes": 31,
            "name": "Laplacian of SDF texture",
            "published": 3,
            "tags": [
                "sdf",
                "texture",
                "font",
                "skeleton",
                "divergence",
                "medialaxis"
            ],
            "usePreview": 1,
            "username": "mattz",
            "viewed": 1579
        },
        "renderpass": [
            {
                "code": "/* \"Laplacian of SDF texture\" by mattz\n   License Creative Commons Attribution 3.0 (CC BY 3.0) Unported License.\n\n   Working on SDF texture filtering (see https://www.shadertoy.com/view/4sVyWh)\n   got me thinking about the Laplacian of the SDF font texture.\n\n   Since the SDF texture includes a gradient, I can compute the Laplacian\n   as the divergence of the gradient.\n\n   This might come in handy if I ever decide to improve the behavior\n   of my filtering technique around corners -- it creates bulges where\n   Laplacian > 0 (blue areas) and creases where Laplacian < 0 (red areas).\n\n\n\n*/\n\nconst float TEX_RES = 1024.;\nconst float GLYPHS_PER_UV = 16.;\nconst float TEX_BIAS = 127./255.;\n\n//////////////////////////////////////////////////////////////////////\n// get font UV coords from screen coords\n\nvec2 font_from_screen(vec2 tpos, float font_size, vec2 char_pos) {    \n    return (tpos/font_size + char_pos + 0.5)/GLYPHS_PER_UV;\n}\n\n//////////////////////////////////////////////////////////////////////\n// sample font texture \n\nvec3 sample_grad_dist(vec2 uv, float font_size) {\n    \n    vec3 grad_dist = (textureLod(iChannel0, uv, 0.).yzw - TEX_BIAS) * font_size;\n\n    grad_dist.y = -grad_dist.y;\n    grad_dist.xy = normalize(grad_dist.xy + 1e-5);\n    \n    return grad_dist;\n    \n}\n\n//////////////////////////////////////////////////////////////////////\n// main function\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // size of character block on screen\n    float font_size = 1.15*iResolution.y;\n    \n    // which character to render now\n    int cidx = int(mod(iTime + 64., 256.));\n    if (cidx == 64) { cidx = 29; } else if (cidx == 29) { cidx = 64; }\n    \n    for (int i=32; i<127; ++i) {\n        if (texelFetch(iChannel1, ivec2(i,0), 0).x != 0.) {\n            cidx = i;\n        }\n    }\n    \n    // position within font texture\n    vec2 char_pos = vec2(ivec2(cidx%16, 15-cidx/16));\n    \n    // point relative to screen center \n    vec2 p = (fragCoord - 0.5*iResolution.xy);\n    \n    // get uv (actually texel coords) in font texture\n    vec2 uv = font_from_screen(p, font_size, char_pos);\n    \n    // distance to letter from center of texel cooresponding to this pixel\n    float ctr_dist = textureLod(iChannel0, uv, 0.).w - TEX_BIAS;\n\n    float dsum = 0., wsum = 0.;\n    \n    const float w[3] = float[3](1., 2., 1.);\n    float h = 0.5;\n    \n    // for each texel in a 3x3 neighborhood centered on this one\n    for (int i=0; i<3; ++i) {\n        for (int j=0; j<3; ++j) {\n            \n            // offset to neighbor texel\n            vec2 delta = h*(vec2(float(i),float(j))-1.);\n\n            // fetch gradient & distance at neighbor\n            vec3 grad_dist = sample_grad_dist(uv + delta/TEX_RES, 1.0);\n            \n            float wij = w[i]*w[j];\n            \n            dsum += wij * dot(delta, grad_dist.xy);\n            wsum += wij;     \n               \n        }\n    }\n    \n    float divergence = dsum / (wsum);\n    \n    vec3 bcolor = divergence < 0. ? vec3(1, 0, 0) : vec3(0, 0, 1);\n    \n    vec3 color = mix(vec3(1), bcolor, 1.0 - exp(-15.*abs(divergence)));\n    \n    vec2 q = clamp(uv*TEX_RES - floor(uv*TEX_RES), 0.05, 0.95);\n    color *= pow( 24.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.05 );\n \n    color *= smoothstep(0., 1., abs(ctr_dist*font_size)-0.5);\n    \n    // push to screen\n    fragColor = vec4(color, 1);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}