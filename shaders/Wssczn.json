{
    "Shader": {
        "info": {
            "date": "1584045903",
            "description": "poto",
            "flags": 96,
            "hasliked": 0,
            "id": "Wssczn",
            "likes": 63,
            "name": "Day 84",
            "published": 3,
            "tags": [
                "mdmtjvm"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 2469
        },
        "renderpass": [
            {
                "code": "// radial blur and chromatic abberation in this buffer\n// thx iq for pallette and hg-sdf for polarMod\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 30.;\n    float scale = 0.00 + pow(length(uv - 0.5),4.)*0.5;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.)*3.7;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    float ss = smoothstep(0.,1.,dot(uvn,uvn)*3.);\n    fragColor = radial*1.; \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.4);\n    fragColor *= 18.;\n    fragColor = pow(fragColor, vec4(0.4545));\n    fragColor *= 1. - dot(uvn,uvn)*2.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define iTime (iTime + 3.6)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 att = vec3(1);\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(float t){\n\treturn mix(texture(iChannel0,vec2(floor(t)/256.)),texture(iChannel0,vec2(floor(t) + 1.)/256.), smoothstep(0.,1.,fract(t)));\n}\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n    float modD = 3.;\n    float idz = floor(p.z/modD);\n    p.z = pmod(p.z, modD);\n    \n    \n    vec3 q = p;\n    vec3 b = p;\n    float idb = pModPolar(q.xy, 3.);\n    //b.xy *= rot(idz*0.5);\n    pModPolar(b.xy, 3.);\n    \n    b.x -= 0.8;\n    \n    vec3 u = p;\n    \n    //u.xy *= rot(idz);\n    float o = pModPolar(u.xy, 5.);\n    u.x -= 1.;\n    \n    q.x -= 0.8;\n    \n    float dG = -u.x;\n    d = dmin(d, vec2(dG, 3.));\n    \n    \n    \n    \n    //u -= 0.1;\n    u.y = abs(u.y);\n    u.y -= 0.7;\n    dG = length(u.xy) - 0.02;\n    d = dmin(d, vec2(dG, 8.));\n    \n        //glow += 0.2/(0.01 + dG*dG*2.)*att;\n\t//q = abs(q);\n    //q.xy *= rot(-1.5);\n    //q.x -= 0.2;\n    vec3 z = q;\n    z = abs(z) - vec3(0.01,0.4,0.1);\n    float dC = max(z.z, max(z.y, z.x));\n    d = dmin(d, vec2(dC, 0.));\n    z = q;\n    z.x += 0.02;\n    z = abs(z) ;\n    z -= vec3(0.01,0.3,0.02);\n    float dCb = max(z.z, max(z.y, z.x));\n    d = dmin(d, vec2(dCb, 1.));\n    \n    \n    \n    z = b;\n    z.y -= 0.2;\n    z.x += 0.3;\n    z.z += modD*0.10;\n    z.xy *= rot(0.7 + sin(iTime*0.2 + idz*0.5));\n    z = abs(z);\n    z.zx *= rot(-0.1);\n    z = abs(z) - vec3(0.01,0.5,0.04);\n    float dD = max(z.z,max(z.x, z.y));\n    \n    d = dmin(d, vec2(dD, 5.));\n    \n    \n    z = u;\n    z.y -= 0.2;\n    z.x += 0.3;\n    z.z -= modD*0.25;\n    \n    z = abs(z);\n    z.xz *=rot(0.25*PI);\n    z.x -= 0.4;\n    z.xy *=rot(0.25*PI);\n    \n    //z.x -= 0.08;\n    z = abs(z) - vec3(0.07,0.1,0.04);\n    float dDd = max(z.z,max(z.x, z.y));\n    //d = dmin(d, vec2(dDd, 5.));\n    \n    \n    vec4 a = valueNoise((idb + iTime*3. + idz*3.));\n    \n    //vec3 c = max(pal(0.7,1., vec3(3.7,0.3,0.6), 0.6,4.4 + sin(iTime) + sin(idz * idb)*0.2), 0.);\n    vec3 c = max(pal(0.7,1., vec3(3.,0.3,0.1), 0.6,4.4 + sin(iTime) + idz + sin(idz * idb)*0.2), 0.1);\n    \n    glow += pow(smoothstep(0.,1.,a.z*1.5), 20.)*1.5/(0.005 + dCb*dCb*(90. - a.x*20.))*att*c* pow(smoothstep(1.,0.,length(q.y*1.)), 5.);\n    //glow += pow(smoothstep(0.,1.,a.z*1.5), 20.)*1.5/(0.005 + dCb*dCb*(100. - a.x*20.))*att*c;\n    //glow += pow(smoothstep(0.,1.,a.z*1.5), 20.)*1.5/(0.005 + dCb*dCb*(90. - a.x*20.))*att*c* (smoothstep(1.,0.,length(q.y*1.6)));\n    //glow += pow(smoothstep(0.,1.,a.z*1.5), 20.)*0.01/(0.0004 + dCb*dCb*dCb*dCb*(50. - a.x*20.))*att*c;\n    \n    //glow += pow(smoothstep(0.,1.,a.z*1.5), 20.)*exp(-dCb*30.)*att*c*30.;\n    //glow += pow(smoothstep(0.,1.,a.z*1.5), 20.)*0.6/(0.004 + dCb*dCb*(20. - a.x*20.))*att*c;\n    \n    return d;\n}\nfloat dith;\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = vec2(10e7);\n\n    p = ro; t = 0.; hit = false;\n    for(int i = 0; i < 230 ; i++){\n    \td = map(p);\n        d.x *= dith;\n        \n    \t//glow += exp(-d.x*20.);\n        if(d.x < 0.002){\n        \thit = true;\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //\n\tuv *= 1. - dot(uv,uv)*0.14;\n    \n    uv.xy *= rot((iTime - 3.6)*0.1);\n    \n    vec3 col = vec3(0);\n\n    dith = mix(0.8,1., texture(iChannel0, 20.*uv*256.).x);\n    vec3 ro = vec3(0);\n    \n    ro.z += iTime*1.5;\n    \n    vec3 rd = normalize(vec3(uv,2.));\n    //rd.yz *= rot(iTime);\n    \n    vec3 p; float t; bool hit;\n    float side = 1.;\n    float tA;\n    \n    for(int i = 0; i < 3; i ++){\n    \tvec2 d = march(ro, rd, p, t, hit);\n    \tvec3 n = getNormal(p);\n        \n        vec3 ld = normalize(vec3(1));\n        vec3 h = normalize(ld - rd);\n        \n        float diff = max(dot(n, ld), 0.);\n        float spec = pow(max(dot(n, -h), 0.), 10.);\n        float fres = pow(1. - max(dot(n, -rd), 0.), 5.);\n        \n        if(i == 0){\n        \ttA = t;\n        }    \n        if(d.y == 5.){\n        \t//col += fres*0.1*att*(glow);\n            col += fres*0.06*att*(glow);\n        }\n        if(d.y == 8.){\n        \tcol += fres*0.02*att*(glow);\n            //col += fres*20.*att;\n        }\n        if (d.y == 3.){\n        \trd = reflect(rd, n);\n            att *= vec3(0.6,0.8,0.8)*0.2;\n            col += spec*0.04*att;\n            ro = p + n*0.2;\n        } else {\n        \tbreak;\n        }\n    }\n    \n    \n    col += glow*0.001;\n    \n    col = mix(col, vec3(0.4,0.4,0.7)*0.004, pow(smoothstep(0.,1.,tA*0.013), 1.6));\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 21490,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/the-algorithm/the-algorithm-floating-point"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}