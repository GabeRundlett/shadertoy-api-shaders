{
    "Shader": {
        "info": {
            "date": "1421816467",
            "description": "A simple way to texture map a sphere without singularities/much distortion. Just cubemapping really, but by done hand (and without cross-face filtering).",
            "flags": 0,
            "hasliked": 0,
            "id": "ltl3D8",
            "likes": 54,
            "name": "Cheap Cubemap",
            "published": 3,
            "tags": [
                "3d",
                "cubemap"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 5959
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A simple way to texture map a sphere without singularities\n// or much distortion. Just cubemapping really.\n//\n// This shader does not do proper filtering across faces,\n// although it does compute correct derivatives and mipmap\n// levels, which prevents some artifacts (see define in \n// line 15)\n\n\n// make 0 to disable gradient\n#define COMPUTE_DERIVATIVES 1\n\n\n\n#if COMPUTE_DERIVATIVES==0\nvec4 cubemap( sampler2D sam, in vec3 d )\n{\n    // intersect cube\n    vec3 n = abs(d);\n    vec3 v = (n.x>n.y && n.x>n.z) ? d.xyz: \n             (n.y>n.x && n.y>n.z) ? d.yzx:\n                                    d.zxy;\n    // project into face\n    vec2 q = v.yz/v.x;\n    // undistort in the edges\n    q *= 1.25 - 0.25*q*q;\n    // sample\n    return texture( sam, 0.5+0.5*q );\n}\n\n#else\n    \nvec4 cubemap( sampler2D sam, in vec3 d )\n{\n    vec3 n = abs(d);\n    vec3 s = dFdx(d);\n    vec3 t = dFdy(d);\n    // intersect cube\n         if(n.x>n.y && n.x>n.z) {d=d.xyz;s=s.xyz;t=t.xyz;}\n    else if(n.y>n.x && n.y>n.z) {d=d.yzx;s=s.yzx;t=t.yzx;}\n    else                        {d=d.zxy;s=s.zxy;t=t.zxy;}\n    // project into face\n    vec2 q = d.yz/d.x;\n    // undistort in the edges\n    q *= 1.25 - 0.25*q*q;\n    // sample\n    // TODO: the derivatives below are wrong, apply chain rule thx\n    return textureGrad( sam,  0.5*q + 0.5,\n                              0.5*(s.yz-q*s.x)/d.x,\n                              0.5*(t.yz-q*t.x)/d.x );\n}\n#endif\n    \n//===============================================================================================\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.05*iTime;\n\tvec3 ro = vec3( 2.0*sin(an), 1.0+0.8*cos(1.7*an), 2.0*cos(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n    \n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 of = vec2(i,j)/float(AA);\n\t    vec2 p = (2.0*(fragCoord+of)-iResolution.xy)/iResolution.y;\n\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // sphere center\t\n        vec3 sc = vec3(0.0,1.0,0.0);\n\n        vec3 col = vec3(0.0);\n\n        // raytrace-plane\n        float h = (0.0-ro.y)/rd.y;\n        if( h>0.0 ) \n        { \n            vec3 pos = ro + h*rd;\n            vec3 nor = vec3(0.0,1.0,0.0); \n            vec3 di = sc - pos;\n            float l = length(di);\n            float occ = 1.0 - dot(nor,di/l)*1.0*1.0/(l*l); \n\n            col = texture( iChannel0, 0.5*pos.xz ).xyz;\n            col *= occ*col*1.8;\n            col *= exp(-0.1*h);\n        }\n\n        // raytrace-sphere\n        vec3  ce = ro - sc;\n        float b = dot( rd, ce );\n        float c = dot( ce, ce ) - 1.0;\n        h = b*b - c;\n        if( h>0.0 )\n        {\n            h = -b - sqrt(h);\n            vec3 pos = ro + h*rd;\n            vec3 nor = normalize(ro+h*rd-sc); \n            float occ = 0.5 + 0.5*nor.y;\n\n            col = cubemap( iChannel0, nor ).xyz;\n            col *= occ*col*1.8;\n        }\n\n        // gamma\n        col = pow( col, vec3(0.4545) );\n        \n        tot += col;\n    }\n    tot /= float(AA*AA);\n    \n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}