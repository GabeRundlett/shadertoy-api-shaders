{
    "Shader": {
        "info": {
            "date": "1502551865",
            "description": "Cone tracing cubes to get glossy reflection. Distance function is a bit too expensive so I can't do much, I'll try another scene.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sSBW3",
            "likes": 37,
            "name": "Glossy Cubes",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "conetracing"
            ],
            "usePreview": 0,
            "username": "Klems",
            "viewed": 1768
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159265359\n#define rot(a) mat2(cos(a + PI*0.25*vec4(0,6,2,0)))\n\nvec3 hsv( in vec3 c ) {\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0,4,2),6.0)-3.0)-1.0, 0.0, 1.0);\n\treturn c.z * mix(vec3(1), rgb, c.y);\n}\n\nfloat sdBox( in vec3 p, in vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec2 hash22( in vec2 p ) {\n    #define HASHSCALE3 vec3(.1031, .1030, .0973)\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat perlin( in float x, in float seed ) {\n    float a = floor(x);\n    float b = a + 1.0;\n    float f = x - a;\n    f = f*f*(3.0-2.0*f);\n    return mix(hash22(vec2(seed, a)).x, hash22(vec2(seed, b)).x, f);\n}\n\n// main distance function\nfloat de( in vec3 p, in float r, out vec3 color ) {\n    \n    float d = -p.z;\n    \n    vec2 center = floor(p.xy)+0.5;\n    \n    color = vec3(0);\n    float colorAcc = 0.0;\n    \n    for (int x = -1 ; x <= 1 ; x++) {\n        for (int y = -1 ; y <= 1 ; y++) {\n            \n            vec2 offset = center + vec2(x, y);\n            vec3 inCenter = p - vec3(offset, 0);\n            \n            // get random stuff for the cube\n            vec2 rnd = hash22(offset);\n            float height = 1.0 + perlin( iTime+rnd.x, rnd.y )*0.75;\n            vec3 colorHere = hsv( vec3(-offset.y*0.1 + rnd.y*0.3, 1, 1) );\n            // select the nearest cube\n            float dist = sdBox(inCenter, vec3(vec2(0.45), height))-0.05;\n            d = min(d, dist);\n            // accumulate the color\n            float alpha = max(0.001, smoothstep(r, -r, dist));\n            color += colorHere*alpha;\n            colorAcc += alpha;\n\n        }\n    }\n    \n    color /= colorAcc;\n    \n    return d;\n\n} \n\n// normal function\nvec3 normal( in vec3 p, float here ) {\n\tvec3 e = vec3(0.0, 0.001, 0.0);\n    vec3 dummy = vec3(0);\n\treturn normalize(vec3(\n\t\there-de(p-e.yxx, 0.0, dummy),\n\t\there-de(p-e.xyx, 0.0, dummy),\n\t\there-de(p-e.xxy, 0.0, dummy)));\t\n}\n\n// cone-tracing\nvec4 trace( in vec3 from, in vec3 dir, in float sinTheta ) {\n    \n    float totdist = 0.01;\n    vec4 acc = vec4(0, 0, 0, 1);\n    \n    for (int i = 0 ; i < 10 ; i++) {\n        \n        vec3 p = from + totdist * dir;\n        \n        // find color here, as well as distance\n        float r = totdist*sinTheta;\n        vec3 color = vec3(0);\n        float dist = de(p, r, color);\n        \n        // find opacity here\n        float alpha = clamp(dist / r * -0.5 + 0.5, 0.0, 1.0);\n        acc.rgb += acc.a * alpha * color;\n        acc.a *= 1.0 - alpha;\n        \n        // break early if the accumulated opacity is almost zero\n        if (acc.a < 0.01) break;\n        // otherwise continue forward\n        totdist += abs(dist);\n        \n    }\n    \n    acc.a = 1.0 - acc.a;\n    return acc;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tuv.y *= iResolution.y / iResolution.x;\n\t\n\tvec3 from = vec3(iTime, 0.2*iTime, -5)+vec3(iMouse.xy*0.04, 0);\n\tvec3 dir = normalize(vec3(uv, 0.5));\n    \n\tfloat totdist = 0.0;\n\t\n\tfor (int steps = 0 ; steps < 20 ; steps++) {\n\t\tvec3 p = from + totdist * dir;\n        vec3 dummy = vec3(0);\n\t\tfloat dist = de(p, 0.0, dummy);\n\t\ttotdist += dist;\n\t\tif (dist < 0.001) {\n\t\t\tbreak;\n\t\t}\n\t}\n    \n    vec3 p = from + totdist * dir;\n    vec3 color = vec3(0);\n\tvec3 norm = normal(p, de(p, 0.01, color));\n    \n    // glossy reflection\n    vec3 refl = reflect(dir, norm);\n    vec4 gloss = trace(p, refl, 0.5);\n    gloss.rgb = mix(vec3(1), gloss.rgb, gloss.a);\n    \n    // fresnel\n    float fres = pow(max(0.0, dot(-dir, norm)), 2.0);\n    \n    fragColor.rgb = mix(color, gloss.rgb, fres);\n    fragColor.a = 1.0;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}