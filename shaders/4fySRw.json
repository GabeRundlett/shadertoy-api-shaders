{
    "Shader": {
        "info": {
            "date": "1714920892",
            "description": "reference: https://www.facebook.com/groups/391950357895182/\nSupposed to have a relation with Jordan's Curve ;-)",
            "flags": 0,
            "hasliked": 0,
            "id": "4fySRw",
            "likes": 28,
            "name": "BS-JC curve",
            "published": 3,
            "tags": [
                "2tweets",
                "short",
                "golf",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 5.*( u+u - R ) / R.y;\n    O *= 0.;           // 9/4\n    for (float i,n,d, x = 2.25; i++<4.; U = vec2(-U.y,U) )      // 4 quadrants\n        n = 9.,                                                 // number of isovalues\n        d = 4.* length( U - vec2( x, \n                                    U.x<x && U.y>x ? n=4., x    // \"corner\"\n                                  : U.x>x ? 1. : 0.             // 2 \"spirals\" \n                      )         ),\n        d < n\n          ? O += sqrt(max(0., 1. - R.y/40. / abs(tan(3.14*d)*3.14)) ) // draw isovalues\n          : O;  // ^ to sRGB                \n}\n\n\n\n\n\n\n/** // 257 chars\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 2.5*( u+u - R ) / R.y;\n    O *= 0.;             // 9/8\n    for (float i,n,d ,x = 1.125; i++<4.; U = vec2(-U.y,U) )       // 4 quadrants\n        n = 9.,                                                   // number of isovalues\n        d = 8.* length( U - (\n                              U.x<x && U.y>x ? n=4., vec2(x)      // \"corner\"\n                            : vec2( x, U.x>x ? .5 : 0. )          // 2 \"spirals\" \n                      )     ),\n        d < n\n          ? // d = cos(3.1416*d), O += max(0., 1. - abs(d)/fwidth(d))\n            O += max(0., 1. - R.y/5. / abs(tan(3.14*d)*8.*3.14) ) // draw isovalues\n          : O;\n      \n    O = sqrt(O);                                                  // to sRGB\n}\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}