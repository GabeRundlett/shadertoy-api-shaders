{
    "Shader": {
        "info": {
            "date": "1642051741",
            "description": "yeetus",
            "flags": 0,
            "hasliked": 0,
            "id": "7slyDH",
            "likes": 8,
            "name": "verbose mandelbrot",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "verbose",
                "didactic"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "// Using the name \"ITERATIONS\" anywhere will be replaced with this number.\n// In this case, it controls the maximum number of iterations our mandelbrot can go for.\n#define ITERATIONS 256\n\n// this is Shadertoy's own way of rendering,\n// traditional GLSL has different ways of\n// input/output.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialize fragColor- this is the output pixel color\n    // vec4() constructs a 4-component vector, which in this case is Red, Green, Blue, and Alpha.\n    // Alpha is unused by Shadertoy but it is reccomended it gets set to 1.0.\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    // normalize pixel coordinates- subtracting half of the resolution\n    // moves the point (0, 0) to the center of the canvas. Dividing by\n    // the resolution normalizes the coordinates, so that the bottom left\n    // corner is (-0.5, -0.5) and the top right corner is (0.5, 0.5)\n    /* vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.xy; */\n    // we will divide by the maximum resolution to fix the aspect ratio.\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / max(iResolution.x, iResolution.y);\n\n    // multiply uv by 4, this is just to \"zoom\" out so we can see the full mandelbrot set\n    //uv *= 4.0;\n\n    // Zoom animation, iTime is Shadertoy's time input\n    // repeat after 30 seconds because we reach the limits of floating-point precision\n    uv *= 4.0 / exp( 0.5 * mod(iTime, 30.0) );\n\n    // Center on the desired coordinates to zoom in on\n    uv += vec2(-0.8216345, 0.2000020);\n\n    // define z (our mandelbrot set orbit)\n    // the first iteration will just add c, so we can skip it by setting z to c (uv in our case)\n    vec2 z = uv;\n\n    for(int i = 0; i < ITERATIONS; i++) // for loop that runs ITERATIONS times\n    {\n        //if(length(z) > 2.0) // mandelbrot set bailout condition- check if the orbit \"escaped\"\n        // we will replace length() with dot() (which is length squared) because it's faster on the GPU\n        // since it skips the use of sqrt(), which is expensive. Don't worry too much about it.\n        if(dot(z, z) > 2.0 * 2.0)\n        {\n            // Set the Red, Green, and Blue components of the pixel color to\n            // a color based on how many iterations the mandelbrot set orbit\n            // lasted. vec3() converts a float to a 3-component vector.\n            fragColor.rgb = vec3( float(i) / float(ITERATIONS) );\n\n            return; // exits mainImage()\n        }\n\n        // mandelbrot set formula: z = z^2 + c\n        // vectors aren't complex numbers and so we need to do this ourself.\n        // the real component is represented by X and the imaginary one by Y.\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + uv;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}