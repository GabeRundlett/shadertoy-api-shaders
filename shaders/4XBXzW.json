{
    "Shader": {
        "info": {
            "date": "1710290497",
            "description": "hypno-psychic injection",
            "flags": 0,
            "hasliked": 0,
            "id": "4XBXzW",
            "likes": 2,
            "name": "Invasive MindFlower",
            "published": 3,
            "tags": [
                "rainbow"
            ],
            "usePreview": 0,
            "username": "anthromni",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "vec3 interpolateColor(float interpolationParameter, vec3 colorA, vec3 colorB, vec3 colorC, vec3 colorD) {\n    return colorA + colorB * cos(6.28318 * (colorC * interpolationParameter + colorD));\n}\n\nvoid mainImage(out vec4 fragmentColor, in vec2 fragmentCoordinates) {\n    vec2 normalizedTextureCoordinates = (fragmentCoordinates * 2.16 - iResolution.xy) / iResolution.y;\n    float distanceFromOriginBeforeTransformation = length(normalizedTextureCoordinates);\n    vec3 finalColor = vec3(0.0);\n    float iterator = 0.0;\n    \n    for(iterator = 0.0; iterator < 10.0; iterator++) {\n        float time = iTime * 0.1 + iterator * 0.2;\n        float sinTime = fract(sin(time));\n        float cosTime = cos(time);\n        \n        // Apply a rotating transformation\n        float angle = time * 0.5;\n        float sinAngle = sin(angle);\n        float cosAngle = fract(2.25*cos(angle));\n        mat2 rotationMatrix = mat2(cosAngle, -sinAngle, sinAngle, cosAngle);\n        normalizedTextureCoordinates = rotationMatrix * normalizedTextureCoordinates;\n        \n        // Apply a scaling transformation\n        float scale = 1.0 + sinTime * 0.5;\n        normalizedTextureCoordinates *= scale;\n        \n        // Apply a periodic distortion\n        normalizedTextureCoordinates += vec2(sin(normalizedTextureCoordinates.y * 5.0 + time), \n                                             exp(atan(cos(normalizedTextureCoordinates.x * 5.0 + time)))) * 0.1;\n        \n        float distanceFromOrigin = length(normalizedTextureCoordinates);\n        vec3 interpolatedColors = interpolateColor(distanceFromOriginBeforeTransformation + iterator * 0.1 + iTime * 0.1,\n            vec3(0.364, 0.108, 0.479),\n            vec3(0.630, 0.115, 0.208),\n            vec3(1.703, 1.459, 0.293),\n            vec3(1.974, 2.863, 2.899));\n        \n        // Apply a circular mask\n        float mask = smoothstep(0.5, 0.4, distanceFromOrigin);\n        \n        finalColor += interpolatedColors * mask;\n    }\n    \n    fragmentColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}