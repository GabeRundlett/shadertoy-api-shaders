{
    "Shader": {
        "info": {
            "date": "1678745300",
            "description": "interpolate anything",
            "flags": 0,
            "hasliked": 0,
            "id": "ddK3Ry",
            "likes": 6,
            "name": "interpolate anything",
            "published": 3,
            "tags": [
                "interpolateanything"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\nvec2 f_o_rotdt(vec2 o, float n_radians) {\n  float s = sin(n_radians);\n  float c = cos(n_radians);\n\n  return o * mat2(\n    c, -s,\n    s, c\n  );\n}\nfloat f_n_dist_reg_polygon(vec2 o, float n_vertices) {\n  float n_radians = atan(o.x, o.y);\n  float n_radians_per_corner = n_tau / (n_vertices);\n\n  return cos(floor(.5+n_radians/n_radians_per_corner)*n_radians_per_corner-n_radians)*length(o);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn = (fragCoord.xy - iResolution.xy *.5) / iResolution.y;\n    o_trn*=3.;\n    float n3 = f_n_dist_reg_polygon(\n        f_o_rotdt(o_trn, 0.5),\n        3.\n    );\n    float n9 = f_n_dist_reg_polygon(\n        o_trn,\n        9.\n    );\n    float n_factor = sin(iTime)*.5+.5;\n    float n = (1.-n_factor)*n3 + n_factor*n9;\n\n    n = abs(n-.5);\n    n = pow(n, 1./2.);\n    n *= 1.5;\n    n = 1.-n;\n    fragColor = vec4(n);\n\n    fragColor = vec4(n);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}