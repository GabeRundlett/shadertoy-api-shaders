{
    "Shader": {
        "info": {
            "date": "1677494858",
            "description": "Lots of reflections with a pseudo-pringle mirror",
            "flags": 0,
            "hasliked": 0,
            "id": "ddtGzB",
            "likes": 23,
            "name": "Reflecting Chip",
            "published": 3,
            "tags": [
                "raymarch",
                "reflect",
                "pringle"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "// \"Reflecting Chip\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  1   // optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 qHit, ltPos, vuPos, chipPos, chipRot;\nfloat tCur, dstFar, roomRd, roomHt, chipRad;\nint idObj;\nconst int idFrm = 1, idWl = 2, idFlrCl = 3, idTbl = 4, idLeg = 5, idLit = 6,\n   idRing = 7, idAx = 8, idChip = 9;\nbool isSh;\nconst float pi = 3.1415927;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat SurfDf (inout vec3 q, float r)\n{  // (intersection of torus and cylinder = quasi-pringle)\n  float d, rt;\n  rt = 2. * r;\n  q = q.yzx;\n  q.z += 0.07 * r;\n  d = abs (q.z) - rt;\n  q.z = length (vec2 (length (vec2 (q.y, q.z - rt)) - 3. * rt, q.x)) - 2. * rt;\n  return max (d, SmoothMax (abs (q.z) - 0.01, length (q.xy) - r, 0.01));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, nw;\n  dMin = dstFar;\n  nw = 9.;\n  q = p;\n  q.y -= roomHt;\n  q.xz = Rot2D (q.xz, 2. * pi * floor (nw * atan (q.z, - q.x) / (2. * pi) + 0.5) / nw);\n  q.x += roomRd;\n  d = max (q.x, - PrBox2Df (q.yz, vec2 (roomHt - 0.15, roomRd * tan (pi / nw) - 0.15)));\n  DMIN (idFrm);\n  d = q.x + 0.25;\n  DMIN (idWl);\n  d = roomHt - abs (q.y);\n  DMIN (idFlrCl);\n  q = p;\n  q.y -= 0.9;\n  d = PrCylDf (q.xzy, 0.6, 0.02);\n  DMIN (idTbl);\n  q = p;\n  q.y -= 0.45;\n  q.xz += 0.02 * sin (7. * pi * q.y + vec2 (0.5 * pi, 0.));\n  d = PrCylDf (q.xzy, 0.03, 0.45);\n  DMIN (idLeg);\n  q = p;\n  d = PrCylDf (q.xzy, 0.2, 0.04 * (1. - 0.6 * smoothstep (0.1, 0.2, length (q.xz))));\n  DMIN (idLeg);\n  q = p;\n  q.y -= 0.93;\n  d = PrCylDf (q.xzy, 0.045, 0.025);\n  DMIN (idAx);\n  q = p - chipPos;\n  q.xz = Rot2Cs (q.xz, sin (chipRot.y + vec2 (0.5 * pi, 0.)));\n  d = max (abs (length (q.xy) - chipRad - 0.07) - 0.01, abs (q.z) - 0.02);\n  DMIN (idRing);\n  d = max (length (q.yz) - 0.03, abs (abs (abs (q.x) - chipRad - 0.06)) - 0.02);\n  DMIN (idAx);\n  q.yz = Rot2Cs (q.yz, sin (chipRot.x + vec2 (0.5 * pi, 0.)));\n  d = max (abs (length (q.xz) - chipRad - 0.04) - 0.01, abs (q.y) - 0.018);\n  DMIN (idRing);\n  d = max (length (q.xy) - 0.03, abs (abs (abs (q.z) - chipRad - 0.025)) - 0.015);\n  DMIN (idAx);\n  q.xy = Rot2Cs (q.xy, sin (chipRot.z + vec2 (0.5 * pi, 0.)));\n  d = max (abs (length (q.yz) - chipRad - 0.01) - 0.01, abs (q.x) - 0.016);\n  DMIN (idRing);\n  d = SurfDf (q, chipRad + 0.005);\n  DMINQ (idChip);\n  if (! isSh) {\n    q = p - ltPos;\n    d = PrSphDf (q, 0.1);  \n    DMIN (idLit);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float ltDist)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    p = ro + d * rd;\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.02 * d, h));\n    d += clamp (h, 0.01, 0.2);\n    if (sh < 0.05 || d > ltDist) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, refCol, vn, ltVec, ltDir;\n  float dstObj, ld, sh, nDotL;\n  const int nRef = 8;\n  chipRot = vec3 (0.1, 0.13, 0.16) * pi * tCur;\n  chipRad = 0.58;\n  col = vec3 (0.);\n  refCol = vec3 (1.);\n  isSh = false;\n  for (int n = VAR_ZERO; n < nRef; n ++) {\n    dstObj = ObjRay (ro, rd);\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (n < nRef - 1 && dstObj < dstFar && (idObj == idWl ||\n       idObj == idChip && length (qHit.xy) < 0.95 * chipRad)) {\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      refCol *= 0.85;\n    } else break;\n  }\n  if (dstObj < dstFar) {\n    if (idObj == idChip) {\n      col4 = vec4 (0.9, 0.9, 0.95, 0.2);\n      if (length (qHit.xy) > 0.99 * chipRad && abs (abs (qHit.x) - abs (qHit.y)) < 0.02)\n         col4 *= 0.9;\n    } else if (idObj == idRing) {\n      col4 = vec4 (0.9, 0.95, 0.9, 0.2);\n    } else if (idObj == idAx) {\n      col4 = vec4 (0.9, 0.7, 0.2, 0.2);\n    } else if (idObj == idFrm) {\n      col4 = vec4 (0.5, 0.2, 0., 0.1);\n    } else if (idObj == idWl) {\n      col4 = vec4 (0.1, 0.3, 0., 0.);\n    } else if (idObj == idFlrCl) {\n      col4 = (ro.y < roomHt) ? vec4 (0.45, 0.4, 0.25, 0.) : vec4 (0.8, 0.8, 1., 0.);\n    } else if (idObj == idTbl) {\n      col4 = vec4 (0.95, 0.85, 0.85, 0.2);\n      if (vn.y > 0.99) col4 = mix (vec4 (0.5, 0.4, 0.7, 0.1), col4, \n         smoothstep (0.015, 0.02, abs (Fbm2 (vec2 (4., 1.) * ro.xz) - 0.4)));\n    } else if (idObj == idLeg) {\n      col4 = vec4 (0.5, 0.5, 0.55, 0.2);\n    } else if (idObj == idLit) {\n      col4 = vec4 (1., 1., 0.7, -1.);\n    }\n    if (idObj == idFlrCl || idObj == idFrm) vn = VaryNf (32. * ro, vn, 0.2);\n    if (col4.a >= 0.) {\n      isSh = true;\n      ltVec = ltPos - ro;\n      ld = length (ltVec);\n      ltDir = ltVec / ld;\n      nDotL = max (dot (vn, ltDir), 0.);\n      if (idObj == idRing || idObj == idAx) nDotL *= nDotL;\n      sh = ObjSShadow (ro + 0.01 * vn, ltDir, ld);\n      col = refCol * (col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n         col4.a * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.));\n    } else col = col4.rgb * (0.6 - 0.4 * dot (rd, vn));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, u, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, ltAz, ltEl;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = -0.5 * pi;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 2. * pi * sin (0.005 * pi * tCur);\n  }\n  el = clamp (el, -0.35 * pi, 0.35 * pi);\n  roomRd = 6.;\n  roomHt = 2.;\n  ro = vec3 (0.6 * roomRd * cos (el) * sin (az + vec2 (0.5 * pi, 0.)),\n     0.9 * roomHt * sin (el)).xzy;\n  ro.y += roomHt;\n  chipPos = vec3 (0., 1.6, 0.);\n  vd = normalize (chipPos - ro);\n  u = - vd.y * vd;\n  vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (u.x, 1. + u.y, u.z) / sqrt (1. - vd.y * vd.y), vd);\n  vuPos = ro;\n  zmFac = 2.8;\n  dstFar = 20.;\n  ltAz = -0.1 * pi * tCur;\n  ltEl = 0.15 * pi * sin (2.3 * ltAz);\n  ltPos = vec3 (0.5 * roomRd * cos (ltEl) * sin (ltAz + vec2 (0.5 * pi, 0.)),\n     0.8 * roomHt * sin (ltEl)).xzy;\n  ltPos.y += 1.4 * roomHt;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}