{
    "Shader": {
        "info": {
            "date": "1727471483",
            "description": "Parallax effect\n\ngenerated by ClaudeAI",
            "flags": 0,
            "hasliked": 0,
            "id": "4cscWB",
            "likes": 1,
            "name": "Claude Parallax",
            "published": 3,
            "tags": [
                "claude"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 55
        },
        "renderpass": [
            {
                "code": "#define LAYERS 5\n\n// Pseudo-random function\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n// 2D Noise function\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// Function to generate a layer\nvec4 generateLayer(vec2 uv, float depth, float time) {\n    float speed = mix(0.1, 1.0, depth);\n    float scale = mix(0.5, 2.0, depth);\n    \n    vec2 movement = vec2(time * speed, 0.0);\n    vec2 scaledUV = uv * scale;\n    vec2 movedUV = scaledUV + movement;\n    \n    float n = noise(movedUV * 10.0);\n    \n    vec3 color = mix(vec3(0.5, 0.8, 1.0), vec3(0.2, 0.5, 0.8), depth);\n    float alpha = smoothstep(0.4, 0.6, n);\n    \n    return vec4(color, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;  // Correct for aspect ratio\n    \n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n    float time = iTime * 0.1;\n    \n    vec4 finalColor = vec4(0.0);\n    \n    for (int i = 0; i < LAYERS; i++) {\n        float depth = float(i) / float(LAYERS - 1);\n        float layerTime = time + depth * 10.0;  // Offset time for each layer\n        \n        // Apply parallax offset based on mouse position\n        vec2 offset = (mouseUV - 0.5) * (1.0 - depth) * 0.1;\n        vec2 offsetUV = uv + offset;\n        \n        vec4 layerColor = generateLayer(offsetUV, depth, layerTime);\n        \n        // Blend layer\n        finalColor = mix(finalColor, layerColor, layerColor.a * (1.0 - depth));\n    }\n    \n    // Add a subtle vignette effect\n    float vignette = length(uv - 0.5);\n    vignette = smoothstep(0.5, 1.5, vignette);\n    finalColor.rgb *= 1.0 - vignette * 0.5;\n    \n    fragColor = finalColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}