{
    "Shader": {
        "info": {
            "date": "1677816448",
            "description": " Testing palette dithering using the bayer matrix texture and colors from the Commodore 64's color palette.",
            "flags": 0,
            "hasliked": 0,
            "id": "md33DS",
            "likes": 1,
            "name": "Palette Dithering but different",
            "published": 3,
            "tags": [
                "raymarching",
                "dither",
                "c64",
                "palette"
            ],
            "usePreview": 0,
            "username": "Mik0",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "#define DITHER\n#define AUTO_MODE\n#define DOWN_SCALE 1.0\n\n#define MAX_STEPS 512\n#define MIN_DIST 0.001\n#define NORMAL_SMOOTHNESS 0.001\n#define PI acos(0.0)\n\n#define PALETTE_SIZE 8\n#define SUB_PALETTE_SIZE 8\n\n#define RGB(r,g,b) (vec3(r,g,b) / 255.0)\n\nvec3 palette[PALETTE_SIZE];\nvec3 subPalette[SUB_PALETTE_SIZE];\n\n//Initalizes the color palette.\nvoid InitPalette()\n{\n    //16-Color C64 color palette.\n\tpalette = vec3[](\n        RGB(  0,  0,  30),\n        RGB(10,10,100),\n        RGB(64, 40, 25),\n        RGB(128,128,128),\n        RGB(160, 120, 140),\n        RGB(192, 140, 120),\n        RGB(224, 224, 224),\n        RGB(255, 255, 255)\n\t);\n    \n    //8-Color metalic-like sub palette.\n\tsubPalette = vec3[](\n        palette[0],\n        palette[2],\n        palette[2],\n        palette[5],\n        palette[7],\n        palette[7],\n        palette[7],\n        palette[7]\n\t);\n\t\n}\n\n//Blends the nearest two palette colors with dithering.\nvec3 GetDitheredPalette(float x,vec2 pixel)\n{\n\tfloat idx = clamp(x,0.0,1.0)*float(SUB_PALETTE_SIZE-1);\n\t\n\tvec3 c1 = vec3(0);\n\tvec3 c2 = vec3(0);\n\t\n\tc1 = subPalette[int(idx)];\n    c2 = subPalette[int(idx) + 1];\n    \n    #ifdef DITHER\n    \tfloat dith = texture(iChannel0, pixel / iChannelResolution[0].xy).r;\n    \tfloat mixAmt = float(fract(idx) > dith);\n    #else\n    \tfloat mixAmt = fract(idx);\n    #endif\n    \n\treturn mix(c1,c2,mixAmt);\n}\n\n//Returns a 2D rotation matrix for the given angle.\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));   \n}\n\n//Distance field functions & operations by iq. (https://iquilezles.org/articles/distfunctions)\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return q;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n//Scene definition/distance function.\nfloat Scene(vec3 pos)\n{\n    float map = -sdSphere(pos, 24.0);\n    \n    vec3 rep = opRep(pos - 2.0, vec3(4.0));\n    \n    map = opU(map, opI(sdBox(pos, vec3(5.5)), sdSphere(rep, 1.0)));\n    \n    vec3 gSize = vec3(0, 0, 0.25);\n    \n    float grid = opU(opU(sdCylinder(rep.xyz, gSize), sdCylinder(rep.xzy, gSize)), sdCylinder(rep.zxy, gSize));\n     \n    grid = opI(sdBox(pos,vec3(4.5)),grid);\n    \n    map = opU(map, grid);\n    \n    return map;\n}\n\n//Returns the normal of the surface at the given position.\nvec3 Normal(vec3 pos)\n{\n\tvec3 offset = vec3(NORMAL_SMOOTHNESS, 0, 0);\n    \n    vec3 normal = vec3\n    (\n        Scene(pos - offset.xyz) - Scene(pos + offset.xyz),\n        Scene(pos - offset.zxy) - Scene(pos + offset.zxy),\n        Scene(pos - offset.yzx) - Scene(pos + offset.yzx)\n    );\n    \n    return normalize(normal);\n}\n\n//Marches a ray defined by the origin and direction and returns the hit position.\nvec3 RayMarch(vec3 origin,vec3 direction)\n{\n    float hitDist = 0.0;\n    \n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Scene(origin + direction * hitDist);\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return origin + direction * hitDist;\n}\n\n//Scene shading.\nvec3 Shade(vec3 position, vec3 normal, vec3 rayOrigin,vec3 rayDirection,vec2 pixel)\n{\n    vec3 color = vec3(0);\n    \n    float ang = iTime * 2.0;\n    \n    vec3 lightPos = vec3(0,10,0);  \n    \n    //Normal shading\n\tfloat shade = 0.4 * max(0.0, dot(normal, normalize(-lightPos)));\n    \n    //Specular highlight\n    shade += 0.6 * max(0.0, dot(-reflect(normalize(position - lightPos), normal), rayDirection));\n    \n    //Linear falloff\n    shade *= (128.0-distance(position, lightPos))/128.0,\n    \n    //Apply palette\n    color = GetDitheredPalette(shade, pixel);\n\n    //color = mix(color, vec3(0.1), step(22.0, length(position)));\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitPalette();\n    \n    vec2 aspect = iResolution.xy / iResolution.y;\n    \n    fragCoord = floor(fragCoord / DOWN_SCALE) * DOWN_SCALE;\n    \n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    vec2 mouse = iMouse.xy / iResolution.xy - 0.5;\n    \n    vec2 camAngle = vec2(0);\n    \n    #ifdef AUTO_MODE\n\t\tcamAngle.x = PI * (-1.0 / 8.0) * sin(iTime * 0.5);\n    \tcamAngle.y = -iTime;\n    #else\n        camAngle.x = PI * mouse.y + PI / 2.0;\n        camAngle.x += PI / 3.0;\n\n        camAngle.y = 2.0 * PI * -mouse.x;\n        camAngle.y += PI;\n    #endif\n    \n    vec3 rayOrigin = vec3(0 , 0, -16.0);\n    vec3 rayDirection = normalize(vec3(uv - aspect / 2.0, 1.0));\n    \n    mat2 rotateX = Rotate(camAngle.x);\n    mat2 rotateY = Rotate(camAngle.y);\n    \n    //Transform ray origin and direction\n    rayOrigin.yz *= rotateX;\n    rayOrigin.xz *= rotateY;\n    rayDirection.yz *= rotateX;\n    rayDirection.xz *= rotateY;\n    \n    vec3 scenePosition = RayMarch(rayOrigin, rayDirection);\n    \n    vec3 outColor = Shade(scenePosition,Normal(scenePosition), rayOrigin, rayDirection, fragCoord / DOWN_SCALE);\n    \n    //Palette preview\n    if(uv.x < 0.05) \n    {\n        outColor = GetDitheredPalette(uv.y, fragCoord / DOWN_SCALE);\n    }\n    \n\tfragColor = vec4(outColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}