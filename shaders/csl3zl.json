{
    "Shader": {
        "info": {
            "date": "1666656716",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "csl3zl",
            "likes": 9,
            "name": "Fractal mosaic 30 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 406
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    \n    vec2 a2 = vec2(1.,0.5),\n    \n    a1 =\n        a-a2\n        //a-a2+floor(a.x-.5)\n    ;\n    \n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //abs(abs(fract((a1)*(a2.x+a2.y))-.5)-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    vec3 col = vec3(0.);\n    \n    float t1 = 2.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    \n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n        \n    vec2 t2 = vec2(0.);\n        \n    for(int k = 0; k < 6; k++){\n        \n        //uv += floor(t2.x+t2.y)/2.;\n        //uv.y += 1.;\n        \n        //if(uv.x<0.) uv.x -= 1.;\n        //else uv.y -= 1.;\n        \n        uv =\n            abs(.5*sign(uv.y-uv.x)+uv+t2)\n            //uv + t2\n            //abs(sign(uv.y-uv.x)+uv+t2)\n            //abs(.5*sign(uv.x)+uv+t2)\n            //abs(.5*sign(uv.y)+uv+t2)\n            //abs((.5+uv)+t2*sign(uv.y-uv.x))\n        ;\n        //if(uv.y>uv.x) k += 1;\n\n        \n        //uv += floor(t2.x+t2.y)/2.;\n        //if(uv.y>uv.x) uv = uv.yx; else uv *= -sign(uv.y-uv.x);\n        t2 = -triangle_wave(uv-.5*sign(uv.y-uv.x)) ;\n        \n        uv = t2-triangle_wave(uv.yx);\n\n        float c1 =\n            //length(t2)\n            abs(uv.x-uv.y)\n        ;\n        //if(uv.y>-0.25)\n        col = col.yzx;\n                \n        if(uv.y < uv.x) col = vec3(col.yz,c1);\n        \n        //else uv.x += .5;\n        //if(uv.y<uv.x) {uv=uv.yx;t2=t2.yx;}\n        //if(uv.y < uv.x) uv /= 1.+mod(uv,2.);\n        //if(k%3 == 0 && uv.x>uv.y) {uv = -uv;}\n        //uv = uv+sign(.5-uv.x);\n        \n    }\n    \n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time){\n  float tempo = 1.;\n  time /= tempo;\n  \n  //time += fpow(time*2.,2.)*fpow(time/2.,2.);\n  //time /= pow(2.,fmod(time*2.,3.));\n  float s1 = 8.;\n  \n  //time = time*(1. + fmod(time*s1/2.,2.))/2.;\n  //time = time + floor(time*s1)/s1;\n  //time = time + floor(time/s1)+floor(time);\n  \n  //time = (time + fract(time*2.)/2.)/2.;\n  //time = (time + fract(time/2.)*2.)/2.;\n  \n  float s2 = 8.,\n  m4 =\n      fmod(floor(time)*floor(time),2.)\n      //fmod(floor(time+mod(time,.5))*floor(time-mod(time,.5)),2.)\n  ,\n  t=\n      time/(1.+m4)\n      //time + floor(time*s1)/s1\n  ,\n  m1 =\n      fmod(t+m4,s2)\n  ,\n  m3 =\n      fmod(t*s1/(m1+.5),s2)\n      //fmod(t*s1+m1*s1,s2)\n  ;\n  \n  //t += pow(2.,mod(floor(t/s1/s1),4.));\n\n  //t += m3;\n  //t += fmod(t/8.,8.);\n  t /=\n      (1.+fmod(t,2.))\n  ;\n\n  //t += floor(t*s1)/s1;\n  t *=\n      s1*s1\n  ;\n  \n    float m2 =\n      1. + fmod(t/s1,s1)\n      //1. + fmod(t/s1+mod(t/s1,s1/2.),s1)\n  ;\n  \n  float a=\n      //pow(2.-log(fract(t/s1/s1)),2.)\n      64.*sqrt((1.-sqrt(fract(t/s1/s1))))*.2\n      //(pow(fract(t/s1)/2.,2.)+pow(fract(-t/s1)/2.,2.))/2.\n  ,\n\n  nb = time*pow(2.,(m3+m2)/5.+6.5)*tempo;\n\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      //(abs(a/16.-abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a))\n      //vec2(fract(time*nb*.998/m2*s1)*a,fract(time*nb/m2)*a)\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a),b)*b;\n}\n\nfloat fmod1(float a, float b){\n    //a -= mod(a/4.,4.)-mod(a/4.,2.);\n    \n    //a += fmod2(a/2.,2.);\n    //a += floor(a/8./8.*b);\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = floor(a);\n    \n    /*\n    for(float i = 1.; i < mod(floor(a),64.); i *= 2.){\n        a += mod(floor(a/b),b);\n        //a *= 1.+mod(floor(a)*2.,2.);\n        //i /= 1.+mod(floor(a)*2.,2.);\n    }\n    */\n    \n    //a /= 1. + mod(floor(a1/32.+1.),2.);\n    //a /= 1. + mod(floor(a1/16.+1.),2.);\n    //a /= 1. + mod(floor(a1/8.+1.),2.);\n    //a /= 1. + mod(floor(a1/4.+1.),2.);\n    //a /= 1. + mod(floor(a1/2.+1.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(floor(a)*b/4./4.),b)\n        //mod(mod(floor(a/2.+4.),b),b)\n        //mod(mod(floor(a/2.)+8.,floor(a/8.)+8.),b)\n        //mod(mod(floor(a/2.+8.),floor(a/8.+8.)),b)\n        //max(mod(floor(-a/2.),b),mod(floor(a),b))\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //floor(fmod1(a/2.,b)*fmod1(a,b*2.)/b/2.)\n        //fmod1(a+fmod1(a/2./b,b+fmod1(a/2./b/b,b)),b)\n    ;\n}\n\n//#define fmod(a,b) mod(mod(floor((a)),floor(1.+(a)/5.)),b)\n//#define fmod(x,y) mod(floor(floor(x)+floor((x)/8./8.)/8.),y)\n#define fmod0(x,y) mod(floor(x)+1.5*floor(mod(x,y/2.)),y)\n#define fmod1(x,y) floor(mod(floor(x+floor((x)/y)),y))\n#define fmod3(x,y) mod(floor(x)*floor(x)+floor(x)*floor((x)/y),y)\n#define fmod4(x,y) mod(floor(floor((x)/2.)*2.+x),y)\n#define sqmod(x,y) floor(mod(floor(1.+x/2.)*floor(1.+x*2.),y))\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fpow(x,y) pow(y,fmod(x,y))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}