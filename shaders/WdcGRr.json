{
    "Shader": {
        "info": {
            "date": "1567586023",
            "description": "This shader measures the drift between the theoretical number of frames that should have been displayed and the real number of frames the web browser was able to deliver.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdcGRr",
            "likes": 11,
            "name": "Refresh Rate",
            "published": 3,
            "tags": [
                "2d",
                "refreshrate"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2230
        },
        "renderpass": [
            {
                "code": "// Inigo Quilez 2019\n\n// Inspired by JasonD's shader (https://www.shadertoy.com/view/WlBXWd)\n//\n// This shader measures the drift between the number of frames\n// displayed by the browser (in orange), and the theoretical\n// number of frames that should have been displayed (in purple).\n//\n// Over time, the orange bar might lag behind the pink one,\n// indicating the browser isn't able to render allways at the\n// monitor's refresh rate and it is dropping frames.\n//\n// In my laptop, Microsoft Edge and Firefox are always in synch,\n// but Chrome drops frames like and old car leaks oil.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n\n    // detect the monitor refresh rate by snapping Shadertoy's\n    // reported framerate to the closest standard monitor\n    // refresh rate.\n    const vec4 rate = vec4(240.0,144.0,120.0,60.0);\n    vec4  d = abs(rate-iFrameRate);\n    float refresh = (d.x<d.y && d.x<d.z && d.x<d.w) ? rate.x:\n                               (d.y<d.z && d.y<d.w) ? rate.y:\n                                          (d.z<d.w) ? rate.z:\n                                                      rate.w;\n    \n    // compute how many frames we should have delivered so far\n    float frame = round(iTime*refresh);\n    \n    // compare it to the real number of delivered frames\n    float th = mod( (p.y<0.5)?frame:float(iFrame), iResolution.x);\n\n    // output bars\n    fragColor = (fragCoord.x>th)?vec4(0.0,0.0,0.0,1.0):\n                                 vec4(1.0,0.5,step(p.y,0.5),1.0);\n    \n    // display monutor refresh rate\n    fragColor.xyz += PrintInt( (p-vec2(0.8,0.5))*24.0, refresh );\n        \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\nfloat SampleDigit(in float n, in vec2 vUV)\n{\t\t\n    vUV.y += 0.5;\n\tif(vUV.x  < 0.0) return 0.0;\n\tif(vUV.y  < 0.0) return 0.0;\n\tif(vUV.x >= 1.0) return 0.0;\n\tif(vUV.y >= 1.0) return 0.0;\n\t\n\tfloat data = 0.0;\n\t\n\t     if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n\telse if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n\telse if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\t\n\tvec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n\tfloat fIndex = vPixel.x + (vPixel.y * 4.0);\n\t\n\treturn mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt(in vec2 uv, in float value )\n{\n\tfloat res = 0.0;\n\tfloat maxDigits = 1.0+ceil(log2(value)/log2(10.0));\n\tfloat digitID = floor(uv.x);\n\tif( digitID>0.0 && digitID<maxDigits )\n\t{\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n\t}\n\n\treturn res;\t\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}