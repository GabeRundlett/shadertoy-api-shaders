{
    "Shader": {
        "info": {
            "date": "1589812957",
            "description": "nothing special about this.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsBBWR",
            "likes": 5,
            "name": "TRUMP CARD",
            "published": 3,
            "tags": [
                "trump"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 16.\n#define SURF_DIST .002\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    return (val1.w < val2.w)?val1:val2;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdBox(vec2 p, vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdVesica(vec2 p, float r, float d)\n{\n    p = abs(p);\n    float b = sqrt(r*r-d*d);\n    return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                             : length(p-vec2(-d,0.0))-r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\n\nfloat heart(vec2 p, vec3 col) {\n    vec2 prevP = p;\n    p.y-=0.05;\n    float d = sdVesica(p,0.15,0.05);\n    d = max(p.y,d);\n    p.x = abs(p.x);\n    p.x -=0.05;\n    float d2 = length(p)-0.05;\n    d = min(d,d2);\n    return d;\n}\n\nfloat spades(vec2 p, vec3 col) {\n    vec2 prevP = p;\n\n    float sc = mix(1.5,0.1,smoothstep(-0.2,0.6,p.y));\n    p.x*=sc;\n    p.y*=1.3;\n    float d = sdTriangle(p,vec2(0.1,0.0),vec2(0.0,0.15),vec2(-0.1,0.0));\n  \tp = prevP;\n    p.x = abs(p.x);\n    p.x -=0.05;\n    p.y +=0.02;\n    float d2 = length(p)-0.05;\n    d = opSmoothUnion(d,d2,0.06);\n    \n    p = prevP;\n    float d3 = sdTriangle(p,vec2(0.03,-0.1),vec2(0.0,-0.04),vec2(-0.03,-0.1));\n    d = min(d,d3);\n    \n    return d;\n}\n\nfloat clover(vec2 p, vec3 col) {\n    vec2 prevP = p;\n    \n    float d = length(p-vec2(0.0,0.05))-0.05;\n    p.x = abs(p.x);\n    p.x -=0.047;\n    p.y +=0.02;\n    float d2 = length(p)-0.05;\n    d = min(d,d2);\n    \n    p = prevP;\n    float d3 = sdTriangle(p,vec2(0.03,-0.1),vec2(0.0,-0.04),vec2(-0.03,-0.1));\n    d = min(d,d3);\n    return d;\n}\n\nfloat diamond(vec2 p, vec3 col) {\n    vec2 prevP = p;\n    float d = sdRhombus(p,vec2(0.05,0.1));\n    return d;\n}\n\nfloat trumpIcon(vec2 p, vec3 col, int type) {\n    float d = heart(p,col);\n  if(type == 2){\n        d = spades(p,col);\n    } else if(type == 3){\n        d = clover(p,col);\n    } else if(type == 4){\n        d = diamond(p,col);\n    }\n    return d;\n}\n\nvec3 trumpTex(vec2 p, vec3 col, int num, int type) {\n    vec2 prevP = p;\n    float d = 0.0;\n    if(num == 1) {\n        d = trumpIcon(p,col,type);\n    } else if(num == 2) {\n        p.y = mod(p.y,0.8)-0.4;\n        d = trumpIcon(p,col,type);\n        p = prevP;\n        d = max(p.y-0.8,d);\n        d = max(-p.y-0.8,d);\n    } else if(num == 3) {\n        p.y+=-0.2;\n    p.y = mod(p.y,0.4)-0.2;\n        d = trumpIcon(p,col,type);\n    p = prevP;\n        d = max(p.y-0.6,d);\n        d = max(-p.y-0.6,d);\n    } else if(num == 4) {\n        p.x = abs(p.x);\n        p.x-=0.2;\n    p.y = mod(p.y,0.8)-0.4;\n        d = trumpIcon(p,col,type);\n        p = prevP;\n        d = max(p.y-0.8,d);\n        d = max(-p.y-0.8,d);\n    } else if(num == 5) {\n        float d2 = trumpIcon(p,col,type);\n    p.x = abs(p.x);\n        p.x-=0.2;\n    p.y = mod(p.y,0.8)-0.4;\n        d = trumpIcon(p,col,type);\n        d = min(d,d2);\n        p = prevP;\n        d = max(p.y-0.8,d);\n        d = max(-p.y-0.8,d);\n    } else if(num == 6) {\n        p.x = abs(p.x);\n        p.x-=0.2;\n        p.y+=-0.2;\n    p.y = mod(p.y,0.4)-0.2;\n        d = trumpIcon(p,col,type);\n    p = prevP;\n        d = max(p.y-0.6,d);\n        d = max(-p.y-0.6,d);\n    } else if(num == 7) {\n        float d2 = trumpIcon(p-vec2(0.0,0.2),col,type);\n        p.x = abs(p.x);\n        p.x-=0.2;\n        p.y+=-0.2;\n    p.y = mod(p.y,0.4)-0.2;\n        d = trumpIcon(p,col,type);\n        d = min(d,d2);\n    p = prevP;\n        d = max(p.y-0.6,d);\n        d = max(-p.y-0.6,d);\n    } else if(num == 8) {\n    float d2 = trumpIcon(p-vec2(0.0,0.2),col,type);\n        float d3 = trumpIcon(p-vec2(0.0,-0.2),col,type);\n        p.x = abs(p.x);\n        p.x-=0.2;\n        p.y+=-0.2;\n    p.y = mod(p.y,0.4)-0.2;\n        d = trumpIcon(p,col,type);\n        d = min(d,min(d2,d3));\n    p = prevP;\n        d = max(p.y-0.6,d);\n        d = max(-p.y-0.6,d);\n    } else if(num == 9) {\n        float d2 = trumpIcon(p,col,type);\n    p.x = abs(p.x);\n        p.x-=0.2;\n    p.y = mod(p.y,0.27)-0.135;\n        d = trumpIcon(p,col,type);\n        d = min(d,d2);\n    p = prevP;\n        d = max(p.y-0.55,d);\n        d = max(-p.y-0.55,d);\n    } else if(num == 10) {\n        float d2 = trumpIcon(p-vec2(0.0,0.25),col,type);\n        float d3 = trumpIcon(p-vec2(0.0,-0.25),col,type);\n    p.x = abs(p.x);\n        p.x-=0.2;\n    p.y = mod(p.y,0.27)-0.135;\n        d = trumpIcon(p,col,type);\n        d = min(d,min(d2,d3));\n    p = prevP;\n        d = max(p.y-0.55,d);\n        d = max(-p.y-0.55,d);\n    }\n    p = prevP;\n    p*=1.5;\n    float d2 = trumpIcon(p-vec2(0.6,0.95),col,type);\n    p.y*=-1.0;\n    float d3 = trumpIcon(p-vec2(-0.6,0.95),col,type);\n    d = min(d,min(d2,d3));\n    col = mix(col,vec3(0.7,0.0,0.0),S(d,0.0));\n    return col;\n}\n\n\nvec4 GetDist(vec3 p) {\n    \n    vec3 prevP = p;\n    vec2 uv = p.xy;\n    uv.y-=1.25;\n    uv*=0.5;\n    \n    p.z+=iTime*10.0;\n    p.z = mod(p.z,4.0)-0.2;\n\n    float y = 0.25;\n\n    // card\n    vec3 size = vec3(1.0,1.5,0.001);\n    float edge = 0.02;\n    float card = sdBox(p-vec3(0.0,1.0+y,0.0),size)-edge;\n    vec3 col = trumpTex(uv,vec3(1.0),1,1);\n    vec4 resA = vec4(col,card);\n\t\n    float card2 = sdBox(p-vec3(0.0,1.0+y,1.0),size)-edge;\n    vec3 col2 = trumpTex(uv,vec3(1.0),3,2);\n    vec4 resB = vec4(col2,card2);\n\t\n    float card3 = sdBox(p-vec3(0.0,1.0+y,2.0),size)-edge;\n    vec3 col3 = trumpTex(uv,vec3(1.0),5,3);\n    vec4 resC = vec4(col3,card3);\n\t\n    float card4 = sdBox(p-vec3(0.0,1.0+y,3.0),size)-edge;\n    vec3 col4 = trumpTex(uv,vec3(1.0),7,4);\n    vec4 resD = vec4(col4,card4);\n\t\t\n    float card5 = sdBox(p-vec3(0.0,1.0+y,4.0),size)-edge;\n    vec3 col5 = trumpTex(uv,vec3(1.0),9,2);\n    vec4 resE = vec4(col5,card5);\n    \n    vec4 model = combine(resA,combine(resB,combine(resC,combine(resD,resE))));\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,8,3);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n    \n    float lambert = max(.0, dot( n, l))*0.5;\n    \n    return vec2((lambert+dif),max(0.9, 1.0)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = mod(iTime,8000.0);\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 8, -4.5);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-30.0));\n    ro.xz *= Rot(t*.3+1.0);\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n    \n        vec2 dif = GetLight(p);\n        col = vec3(dif.x)*d.xyz;\n        col *= dif.y;\n        \n    } else {\n        // background\n        col = vec3(0.0,0.6,0.3);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}