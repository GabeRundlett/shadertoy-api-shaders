{
    "Shader": {
        "info": {
            "date": "1615350568",
            "description": "Learning to integrate and also comparing to Euler integration (is completely unfair ;)).",
            "flags": 32,
            "hasliked": 0,
            "id": "fdf3Rn",
            "likes": 8,
            "name": "Analytic vs. Euler Integration",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "learning",
                "analytic",
                "integral",
                "parametric",
                "comparison",
                "euler"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 157
        },
        "renderpass": [
            {
                "code": "/*\nHaving fun figuring out how to integrate!\nTrying out a comparison between numeric (euler) and analytic integration,\nthe winner is pretty obvious. Maybe I'll try some other numeric\nintegration schemes.\n\nDesmos graph:\nhttps://www.desmos.com/calculator/pxji4ovi3x\n*/\n\n#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    uv += c; // Bring into view\n\n    // Draw true path, it has to be brute forced in segments though :(\n    float tStep = TAU / PLOT;\n    vec2 prev = Position(-PI);\n    for (float t=tStep - PI; t < PI + tStep; t += tStep) {\n        vec2 cur = Position(t);\n        draw(sdLine(uv, prev, cur), vec3(1.0));\n        prev = cur;\n    }\n\n    vec2 vel = Velocity(iTime);\n    vec2 dir = normalize(vel);\n\n    // Draw points\n    vec2 pos = Position(iTime);\n    draw(sdLine(uv, pos, pos + dir), vec3(0.0, 0.0, 1.0));\n    draw(length(uv - pos) - 0.05, vec3(0.0, 1.0, 0.0));\n\n    pos = texelFetch(iChannel0, ivec2(0), 0).xy;\n    draw(sdLine(uv, pos, pos + dir), vec3(0.0, 0.0, 1.0));\n    draw(length(uv - pos) - 0.05, vec3(1.0, 0.0, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TAU 6.28\n#define PI 3.14\n\n#define PLOT 50.0 // Plot resolution\n\n#define k 10.0 // Fractal iterations\n#define c vec2(0.0, 4.0 / 3.0) // Constant of integration\n\nvec2 Velocity(in float t) {\n    vec2 p = vec2(0.0);\n    for (float n=0.0; n < k; n++) {\n        float s = pow(2.0, n), ts = t * s;\n        p += vec2(cos(ts), sin(ts)) / s;\n    }\n\n    return p;\n}\n\n// Analytic integral\nvec2 Position(in float t) {\n    vec2 p = vec2(0.0);\n    for (float n=0.0; n < k; n++) {\n        float ts = t * pow(2.0, n);\n        p += vec2(sin(ts), -cos(ts)) / pow(2.0, 2.0 * n);\n    }\n\n    return p + c;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFrame > 0 && iFragCoord == ivec2(0)) {\n        fragColor = texelFetch(iChannel0, ivec2(0), 0);\n        fragColor.xy += Velocity(iTime) * iTimeDelta; // Euler integration\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}