{
    "Shader": {
        "info": {
            "date": "1674791117",
            "description": "A simple shader experimenting with some of the ideas from the first four episodes of The Art of Code's Shadertoy Tutorial YouTube series.",
            "flags": 0,
            "hasliked": 0,
            "id": "dllSW4",
            "likes": 0,
            "name": "The Infinite Tunnel",
            "published": 3,
            "tags": [
                "2d",
                "simple",
                "tutorial",
                "beginner"
            ],
            "usePreview": 0,
            "username": "zero_ou",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "// Following: https://youtu.be/u5HAYVHsasc\n// Shadertoy for absolute beginners tutorials\n\nvec3 circ(vec2 uv, vec2 pos, float r, float blend, vec3 c)\n{\n    uv -= pos;\n    float d = length(uv);\n    float mx = smoothstep(r, r-blend, d);\n    return mx * c;\n}\n\nfloat band(float t, float start, float end, float blur)\n{\n    float step1 = smoothstep(start - blur, start + blur, t);\n    float step2 = smoothstep(end + blur, end - blur, t);\n    return step1*step2;\n}\n\nfloat rect(vec2 uv, vec2 p, float w, float h, float blur)\n{\n    uv -= p;\n    \n    float left = 0.0;\n    float right = w;\n    float bottom = 0.0;\n    float top = h;\n    \n    float lr_band = band(uv.x, left, right, blur);\n    float bt_band = band(uv.y, bottom, top, blur);\n    return lr_band * bt_band;\n}\n\nfloat rect(vec2 uv, float left, float right, float bottom, float top, float blur)\n{\n    float lr_band = band(uv.x, left, right, blur);\n    float bt_band = band(uv.y, bottom, top, blur);\n    return lr_band * bt_band;\n}\n\nfloat remap01(vec2 r, float t)\n{\n    return (t - r.x) / (r.y - r.x);\n}\n\nfloat remap(vec2 r1, vec2 r2, float t) {\n    return remap01(r1, t) * (r2.y - r2.x) + r2.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; // 0  <>  1.\n    \n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 red = vec3(1.0, 0.0, 0.0);\n    vec3 green = vec3(0.0, 1.0, 0.0);\n    vec3 blue = vec3(0.0, 0.0, 1.0);\n    vec3 col = vec3(0.0); \n    //col += circ(uv, vec2(0.5, 0.0), 0.2, 0.05, red);\n    \n    //col += circ(uv, vec2(-0.5, 0.0), 0.2, 0.05, red);\n    \n    \n    float x = uv.x;\n    //float m = (x - 0.5) * (x + 0.5);\n    //m = -m * m * 2.0;\n    float m = -0.5 * sin(2.0 * 3.14159 * (x + iTime));\n    float y = uv.y + m;\n    \n    //x -= y * 0.2;\n    vec2 rect_x = vec2(-2.0, 2.0);\n    float blur = remap(rect_x, vec2(0.01, 0.25), x);\n    blur = pow(blur * 4.6, 3.0);\n    \n    col += blue * rect(vec2(x, y), vec2(rect_x.x, -0.5), rect_x.y - rect_x.x, 1.0, blur);\n    col -= blue * rect(vec2(x, y), -0.5, 0.5, -0.1, 0.1, 0.01);\n    \n    float val = band(uv.x, -0.2, 0.2, 0.01)*band(uv.y, -0.2, 0.2, 0.01);\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}