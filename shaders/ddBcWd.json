{
    "Shader": {
        "info": {
            "date": "1688558250",
            "description": "All year long I'm going to just focus on truchet tiles and the likes! \n",
            "flags": 0,
            "hasliked": 0,
            "id": "ddBcWd",
            "likes": 24,
            "name": "Year of Truchets #047",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "truchet",
                "pattern",
                "maze",
                "tiles"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #047\n    07/05/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n*/\n\n\n#define R           iResolution\n#define M           iMouse\n#define T           iTime\n\n#define HI          1.57079632679\n#define PI          3.14159265358\n#define PI2         6.28318530718\n\n#define MIN_DIST    1e-4\n#define MAX_DIST    55.\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 p){ return fract(sin(dot(p,vec2(26.34,45.32)))*4314.23); }\n\n//@iq sdfs & extrude\nfloat box(vec3 p, vec3 b){vec3 q=abs(p)-b;return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);}\nfloat box(vec2 p, vec2 a){vec2 q=abs(p)-a;return length(max(q,0.))+min(max(q.x,q.y),0.);}\nfloat cap(vec3 p, float h, float r){p.y-=clamp(p.y,0.,h);return length(p)-r;}\nfloat opx(in float sdf, in float pz, in float h){vec2 w=vec2(sdf,abs(pz)-h);return min(max(w.x,w.y),0.)+length(max(w,0.));}\n\nfloat lsp(float b, float e, float t){return clamp((t-b)/(e-b),0.,1.); }\nfloat eoc(float t){return (t = t-1.)*t*t+1.; }\n\nconst float scale = .5;\nconst float tc = .0125;\nconst float amt = 2.;\n\nfloat glow,tmod=0.,ga1=0.,ga2=0.,ga3=0.,ga4=0.,time = 0.,speed = 0.,movement;\nmat2 r45,cam;\nvec3 hit,hp;\nvec2 sid,gid;\n\nvec2 map (vec3 pos, float sg) {\n    vec2 res=vec2(1e5,0.);\n \n    pos.xz-=movement;\n    pos*=scale;\n    \n    vec2 id= floor(pos.xz), q = fract(pos.xz)-.5; \n    float ck = mod(id.x+id.y,2.)*2.-1.;\n    //mod vars to mix things up\n    float m = floor(mod(id.y,3.)+1.);//1.75;//\n    float n = floor(mod(3.+2.5*sin(id.x*.4),5.)+1.);//2.15;//\n    //mod for long slices\n    vec2 cd=vec2(mod(id.x,n),mod(id.y,m))*2.-1.;\n    \n    float rnd = hash21(id);\n    if(rnd>.5) q.y=-q.y;\n\n    float sn = (id.x*.95)+(id.y*1.25);\n    sn = mod(sn,8.);\n    \n    float t1 = lsp(sn,sn+1.,tmod);\n    float t2 = lsp(sn+4.,sn+5.,tmod);\n    t1 = eoc(t1); t1 = t1*t1*t1;\n    t2 = eoc(t2); t2 = t2*t2*t2;\n    if(cd.y<.5 && cd.x<.5) q*=rot((t1+t2)*1.5707);\n    \n    float dir = (ck>.5^^rnd<.5)? 1.:-1.;\n\n    float hs=fract(rnd*32.83);\n    vec3 qp= vec3(q.x,pos.y,q.y);\n    vec2 p = length(q.xy-.5) < length(q.xy+.5) ? q.xy-.5 : q.yx+.5;\n\n    // main pattern\n    float d = abs(length(p)-.5)-tc;\n    if(hs>.85) d = min(length(q.x),length(q.y))-tc;\n    rnd=fract(rnd*32.83);\n    \n    float d1 = length(q)-.465;\n    float d4 = min(length(vec2(q.x,abs(q.y)-.44)),length(vec2(abs(q.x)-.44,q.y)))-.028;\n    float sw = 0.;\n    \n    if(cd.x>.5 ) { d = length(q.y)-tc;d4=length(vec2(abs(q.x)-.44,q.y))-.028;}\n    if(cd.y>.5 ) { d = length(q.x)-tc;d4=length(vec2(q.x,abs(q.y)-.44))-.028;}\n    if(cd.y>.5 && cd.x>.5) { d = 1.; d4 = 1.; sw = (t1-t2)*.25;}\n   \n    \n    d=min(max(d,d1),d4);\n    d= opx(d,qp.y-.1,.5);\n    d1= opx(d1,qp.y-sw+.275,.3);\n    \n    if(rnd>.5&&hs<.85) { qp.xz*=r45;float c1 = box(qp-vec3(0,.35,0),vec3(1,.1,.2));d=max(d,-c1);}\n\n    if(d<res.x) {\n        res = vec2(d/scale,1.);\n        hp = vec3(q.x,pos.y,q.y);\n    }\n    \n    if(d1<res.x) {\n        res = vec2(d1,5.);\n        hp = vec3(q.x,pos.y,q.y);\n    }\n    \n    rnd=fract(rnd*52.71);\n    float lp = rnd>.925 ? length(vec3(q.x,pos.y-1.,q.y))-.1 : 1e5;\n    if(sg==1. && (cd.y>.5 && cd.x>.5)) { glow += .00075/(.00075+lp*lp);}\n    if(lp<res.x&& (cd.y>.5 && cd.x>.5)) {\n        res = vec2(lp,6.);\n        hp = pos;\n    }\n    \n    float f = pos.y;\n    if(f<res.x) {\n        res = vec2(f,2.);\n        hp = pos;\n    }\n\n    return res;\n}\n\n//Tetrahedron technique\n//https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h = vec2(1.,-1.)*.5773;\n    return normalize( h.xyy*map( p + h.xyy*e,0.).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e,0.).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e,0.).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e,0.).x );\n}\n\nvec2 marcher(vec3 ro, vec3 rd) {\n    float d = 0., m = 0.;\n    for(int i=0;i<128;i++){\n        vec2 ray = map(ro + rd * d,1.);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST) break;\n        d += i<64?ray.x*.35:ray.x*.85;\n        m  = ray.y;\n    }\n    return vec2(d,m);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 F){\n\n    r45=rot(.78539816339);\n    speed = T*.4;\n    movement = T*.43;\n    tmod = mod(speed,13.);\n        \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,0,8);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    float x = M.xy==vec2(0) || M.z <0. ? .0 : (M.y/R.y * .1-.05)*PI;\n    float y = M.xy==vec2(0) || M.z <0. ? .0 : (M.x/R.x * 1.-.5)*PI;\n\n    float ff = .3*sin(T*.08);\n    mat2 rx = rot(-.82-ff-x), ry = rot(.88+ff-y);\n    \n    ro.zy *= rx; ro.xz *= ry; \n    rd.zy *= rx; rd.xz *= ry;\n\n    vec3 C = vec3(0),p= vec3(0);\n    \n    vec2 ray = marcher(ro,rd);\n    float d=ray.x, m=ray.y;\n    hit = hp;\n    sid = gid;\n\n    if(d<MAX_DIST)\n    {\n             p = ro + rd * d;\n        vec3 n = normal(p,d);\n        vec3 lpos =vec3(6.,12.,-12.);\n        vec3 l = normalize(lpos-p);\n        \n        float diff = clamp(dot(n,l),.09,.99);\n        float shdw = 1.;\n\n        for( float t=.01; t < 16.; ) {\n            float h = map(p + l*t,0.).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 12.*h/t);\n            t += h*.4;\n            if( shdw<MIN_DIST ) break;\n        }\n\n        diff = mix(diff,diff*shdw,.65);\n        \n        vec3 h = vec3(.1);\n        if(m==1.) {\n            vec2 hp = vec2(abs(hit.x),hit.y);\n            vec3 clx = texture(iChannel0,vec2(abs(hit.x),hit.y)).rgb;\n            vec3 clm = texture(iChannel0,vec2(abs(hit.z),hit.y)).rgb;\n            h = clm*clx;\n        }\n        \n        if(m==2.) h=texture(iChannel1,hit.xz*.5).rgb;\n\n        if(m==5.) h=texture(iChannel0,abs(hit.xz)).rgb;\n\n        if(m==6.) h=vec3(1);\n        \n        C = (diff*h);\n    } \n\n    C = mix(C,vec3(.89),clamp(glow*.5,0.,1.));\n    C = mix(C,vec3(.102,.086,.059),1.-exp(-.0005*d*d*d));\n    C = pow(max(C,0.),vec3(.4545));\n\n    fragColor = vec4(C,1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}