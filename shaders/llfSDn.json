{
    "Shader": {
        "info": {
            "date": "1501158183",
            "description": "ultra-old shader (2015?) I rediscovered hidden in my heap of draft shaders.",
            "flags": 0,
            "hasliked": 0,
            "id": "llfSDn",
            "likes": 6,
            "name": "gyro 4b",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 727
        },
        "renderpass": [
            {
                "code": "// using the base ray-marcher of Trisomie21: https://www.shadertoy.com/view/4tfGRB#\n\n#define T iTime\n#define r(v,t) { float a = (t)*T, c=cos(a),s=sin(a); v*=mat2(c,s,-s,c); }\n#define SQRT3_2  1.26\n#define SQRT2_3  1.732\n#define smin(a,b) (1./(1./(a)+1./(b)))\n\nvoid mainImage( out vec4 f, vec2 w ) {\n    vec4 p = vec4(w,0,1)/iResolution.yyxy-.5, d,c; p.x-=.4; // init ray \n    // r(p.xz,.13); r(p.yz,.2); r(p.xy,.1);   // camera rotations\n    d = p;                                 // ray dir = ray0-vec3(0)\n    p.z -= 5.;// *T;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    float closest = 999.0;\n    f = vec4(0);\n    \n    for (float i=1.; i>0.; i-=.01)  {\n        \n        // vec4 u = floor(p/8.), t = mod(p, 8.)-4., ta; // objects id + local frame\n         vec4 u=floor(p/18.+3.5), t = p, ta,v;\n        // r(t.xy,u.x); r(t.xz,u.y); r(t.yz,1.);    // objects rotations\n        u = sin(78.*(u+u.yzxw));                    // randomize ids\n        // t -= u;                                  // jitter positions\n        c = p/p*1.2;\n \n        float x1,x2,x=1e9;\n        \n        for (float j=3.; j>1.; j-= .3) {\n            r(t.xy,u.x); r(t.xz,u.y); r(t.yz,u.z);\n            // t -= 2.*u;   // try ;-)\n\n            ta = abs(t);\n        \tx1 = abs(mod(atan(t.y,t.x),.1)-.1/2.) ; // +.008;\n        \t// x1 = min(x1, abs(mod(atan(t.z,t.x),.1)-.1/2.));\n        \t// x1 = min(x1, abs(mod(atan(t.z,t.y),.1)-.1/2.));\n#if 0\n        \tx2 = length(t.xyz)-j;\n       \t    x2 = max(length(t.xyz)-j-.03,-x2);\n#else\n            x2 = max(ta.x,max(ta.y,ta.z)) -j/SQRT2_3;\n            x2 = max( max(ta.x,max(ta.y,ta.z)) -j/SQRT2_3-.03, -x2);\n#endif\n            x2 = max(x1,x2);\n            x = min (x,x2);\n            if (x==x2) c = .5+.5*sin(17.*(6.3*(j-1.)/2.)+T+vec4(0,2.1,-2.1,0));  \n        }\n\n        x1 = length(t.xyz) -.6;                      // central sphere\n        closest = min(closest, x1); \n        x = min(x1,x);\n        if (x==x1) c  = vec4(2.,.3,0,0);\n        if (cos(.25*T)>0.) c += vec4(2.,.3,0,0)*pow(abs((x-x1)),.2)*(.5+.5*cos(.5*T));  // thanks squid !\n        \n        // f = i*i*c;      // color texture + black fog \n\n        if(x<.01) // hit !\n            { f = i*i*c; break;  }  // color texture + black fog \n        \n        p -= d*x;           // march ray\n     }\n     f += vec4(1,0,0,0) * exp(-closest)*(.5+.5*cos(.5*T)); // thanks kuvkar ! \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}