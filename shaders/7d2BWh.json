{
    "Shader": {
        "info": {
            "date": "1646165684",
            "description": "ill stop making fratals soon",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2BWh",
            "likes": 9,
            "name": "fractal 284925780141204819",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nmat2 Rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(vec2 id) {\n    int x = FK(id.x), y = FK(id.y);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nfloat tlength(vec2 uv, float m) {\n    return mix(length(uv), mlength(uv), m);\n}\n\nvec2 mabs(vec2 x) {\n    return sqrt(x*x+0.0001)-0.005;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ouv = uv;\n   \n    // radius of inner circle (used for smaller circles too)\n    float r = 0.22 + 0.02 * thc(3., 0.5 * iTime);\n    // line thickness\n    float th = 0.005;\n    float d = 0.02 + tlength(uv, 0.5 + 0.5 * thc(4., 0.5 * iTime));\n    \n    float k = 1. / iResolution.y;    \n    float s = smoothstep(-k, k, -abs(d - r) + th);\n   \n    // y determines if pixel has already been visited\n    float y = 1.;\n    // m scales down radii etc in for loop\n    float m = 1.;\n    \n    vec2 id = vec2(1);\n    \n    vec3 col = vec3(0);\n    vec3 e = vec3(1);\n    \n    float n = 6.;\n    float h = 0.;\n    for (float i = 0.; i < n; i++) {\n        uv *= Rot(0.6 * h + 0.2 * iTime);\n        \n        // set y to 0 if inside previous circle\n        y *= step(m * r, d);\n        \n        id = 0.5 * id + step(uv, vec2(0));\n        \n        // dynamic random number for each id (\"cell\")\n        h = hash(id) - iTime;\n        float h1 = hash(floor(h) + 0.01 * id);\n        float h2 = hash(floor(h) + 1. + 0.01 * id);\n        h = mix(h1, h2, smoothstep(0., 1., fract(h)));\n        //h = smoothstep(-0.05, 0.05, -h + 0.5); // looks cool too\n        \n        uv = mabs(uv) - sqrt(2.) / 2.  * m * r;\n        d = tlength(uv, h);\n     \n        // -= looks cool too\n        s += y * smoothstep(-k, k, -abs(d - 0.5 * m * r) + (n-i)/n * th);\n      \n        col -= 0.08 * m * s;\n        col += 0.35 * m * y * (1.-s) * pal(0.1 * iTime + 0.25 * h, e, e, e, .5 * vec3(0,1,2)/3.);\n\n        m *= 0.55;\n    }\n    \n    col += 0.13;\n\n    float s1 = smoothstep(-k, k, -tlength(ouv, 0.5 + 0.5 * thc(4., 0.5 * iTime)) + 0.465);\n    float s2 = smoothstep(-k, k, -abs(abs(ouv.x + 0.04 * cos(iTime + 2. * ouv.y)) - 0.7) + 0.05);\n    col *= s1 + s2;\n    col = sqrt(col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));//-smin(-abs(uv.x), -abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}