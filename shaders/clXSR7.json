{
    "Shader": {
        "info": {
            "date": "1674474278",
            "description": "All waveforms found in the common tab, feel free to use!\nPhases are aligned and DC offset is 0. Amplitude is maximum without distortion (0 decibels), multiply to reduce volume.",
            "flags": 8,
            "hasliked": 0,
            "id": "clXSR7",
            "likes": 12,
            "name": "Basic Waveforms",
            "published": 3,
            "tags": [
                "2d",
                "pulse",
                "basic",
                "sound",
                "wave",
                "triangle",
                "audio",
                "primitives",
                "square",
                "sine",
                "1d",
                "waveform",
                "shape",
                "saw",
                "tri",
                "sawtooth",
                "gpusound"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "// See \"Common\" tab for all waveform definitions!\n\nvec3 drawWave(float x, float p) {\n\n    const vec3 red = vec3(1.0, 0.0, 0.0);\n    const vec3 yellow = vec3(1.0, 1.0, 0.0);\n    const vec3 green = vec3(0.0, 1.0, 0.0);\n    \n    vec3 color = (x > 0.0 ? green : red) * smoothstep(1.5, 1.0, abs(p));\n    float mask = 0.01 / min(abs(p - 1.0), abs(p + 1.0));\n    float wave = 0.04 / abs(x - p);\n    return color * (min(mask, 1.0) * 0.5 + 0.15) + wave;\n}\n\nfloat timeRange(float start) {\n    return step(fract(iTime * 0.2 - start), 0.2) * 16.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    const float freq = 0.25;\n    vec2 uv = 18.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    fragColor.rgb = drawWave(waveSine(freq, uv.x - timeRange(0.0) * iTime), uv.y - 7.0);\n    fragColor.rgb += drawWave(waveSquare(freq, uv.x - timeRange(0.2) * iTime), uv.y - 3.5);\n    fragColor.rgb += drawWave(waveTriangle(freq, uv.x - timeRange(0.4) * iTime), uv.y);\n    fragColor.rgb += drawWave(waveSaw(freq, uv.x - timeRange(0.6) * iTime), uv.y + 3.5);\n    \n    float duty = sin(iTime * 4.0) * 0.25 + 0.5;\n    fragColor.rgb += drawWave(wavePulse(freq, uv.x - timeRange(0.8) * iTime, duty), uv.y + 7.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Sine wave. The constant here is Tau (2 * PI)\nfloat waveSine(float freq, float time) {\n    return sin(6.28318530 * freq * time);\n}\n\n// Square wave. ceil() has less error than sign().\nfloat waveSquare(float freq, float time) {\n    return ceil(0.5 - fract(freq * time)) * 2.0 - 1.0;\n}\n\n// Triangle wave\nfloat waveTriangle(float freq, float time) {\n    return abs(fract(freq * time - 0.25) - 0.5) * 4.0 - 1.0;\n}\n\n// Sawtooth wave\nfloat waveSaw(float freq, float time) {\n    return fract(freq * time + 0.5) * 2.0 - 1.0;\n}\n\n// Pulse wave. Duty cycle is 0 to 1.\nfloat wavePulse(float freq, float time, float duty) {\n    return step(fract(freq * time), duty) * 2.0 - 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound(int samp, float time) {\n\n    const float freq = 200.0;\n    time = mod(time, 5.0);\n    \n    float result = 0.0;\n    if (time < 1.0) {\n        result = waveSine(freq, time);\n    } else if (time < 2.0) {\n        result = waveSquare(freq, time);\n    } else if (time < 3.0) {\n        result = waveTriangle(freq, time);\n    } else if (time < 4.0) {\n        result = waveSaw(freq, time);\n    } else {\n        float duty = sin(time * 4.0) * 0.25 + 0.5;\n        result = wavePulse(freq, time, duty);\n    }\n    return vec2(result * 0.1);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}