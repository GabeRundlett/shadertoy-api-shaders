{
    "Shader": {
        "info": {
            "date": "1472835085",
            "description": "This is an animated interpretation of Bridget Riley's abstract painting \"Fall,\" created for 62-150 Intro to Media Synthesis and Analysis at Carnegie Mellon University.\n\nSee Painting Here: http://www.tate.org.uk/art/artworks/riley-fall-t00616\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MtV3RR",
            "likes": 4,
            "name": "Fall (Remix)",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "Flafla2",
            "viewed": 1256
        },
        "renderpass": [
            {
                "code": "// \"Fall Remix\"\n// Adrian Biagioli, 2 September 2016\n//\n// This is an animated digital interpretation of Bridget Riley's abstract painting \"Fall,\"\n// created for 62-150 Intro to Media Synthesis and Analysis at Carnegie Mellon University\n//\n// See Painting Here: http://www.tate.org.uk/art/artworks/riley-fall-t00616\n\n// #define SHOW_RAW_SINUSOIDAL\nvec4 map(vec2 coord, float dist) {\n    float offset = sin(pow((1.0-coord.y),3.4)*8.0 - iTime - 2.53) / 25.0; // This is the \"wave\" func\n    #ifdef SHOW_RAW_SINUSOIDAL\n    float col = floor(coord.x+0.5+offset)*0.5+0.25;\n    #else\n    int col = int(mod(coord.x+offset, dist*2.0) / dist);\n    #endif\n    return vec4(col,col,col,1);\n}\n\n// Number of samples per pixel, in each dimension (so the real number of samples is this squared)\n// The higher this is, the less aliasing there is.\n#define NUM_SAMPLES 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    uv -= (iResolution.x - iResolution.y) / 2.0;\n    uv /= iResolution.y;\n    if(uv.x < 0.0 || uv.x > 1.0) {\n        fragColor = vec4(0,0,0,0);\n        return;\n    }\n    \n    // Better support for low resolutions (to avoid grey blob)\n    float thickness = 0.005;\n    if(thickness*iResolution.y < 2.0)\n        thickness = 2.0 / iResolution.y;\n    \n    vec2 tex = vec2((iResolution.x/iResolution.y) / iResolution.y, 1.0 / iResolution.y);\n    vec2 htex = tex/2.0;\n    vec2 sampledist = tex / float(NUM_SAMPLES);\n    \n    vec4 result = vec4(0,0,0,0);\n    \n    // Basic SSAA with uniform sampling\n    for(int x=0;x<NUM_SAMPLES;x++) {\n        for(int y=0;y<NUM_SAMPLES;y++) {\n            result += map(uv-htex+sampledist*vec2(float(x)+0.5,float(y)+0.5), thickness) / float(NUM_SAMPLES * NUM_SAMPLES);\n        }\n    }\n    fragColor = result;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}