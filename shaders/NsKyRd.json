{
    "Shader": {
        "info": {
            "date": "1655545828",
            "description": "Procedural exact bouncing equation ( cf https://www.desmos.com/calculator/ldosgtfifk ).\nLoopless.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsKyRd",
            "likes": 12,
            "name": "infinite bouncing balls",
            "published": 3,
            "tags": [
                "2d",
                "gif",
                "short",
                "loopless"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "// Bouncing equation: cf https://www.desmos.com/calculator/ldosgtfifk\n// I: bounce number.  X(i): bounce start.  p(x,I(x)): bounce trajectory\n#define I(x)    floor( log2( 1. - (1.-k)*((x)/L+.5) ) / log2(k) )\n#define X(i)    L* ( (1.-pow(k,i)) / (1.-k) - .5 )\n#define p(x,i) ( x<X(40.) ? (x-X(i))* ( V*pow(k,i) - g/2.* (x-X(i)) ) : 0.)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float k=.85, H=4., g=20., V = sqrt(2.*g*H), L = 2.*V/g; // physics parameters\n    vec2  R = iResolution.xy,\n          U = 5.*( 2.*u - R ) / R.y;                        // normalize coordinates\n    \n    float t = fract(iTime),\n          x = floor(U.x-t+2.) + t,                          // action domain\n          h = x < 0. ?  2. \n                     : -2. + p(x,I(x));                     // bouncing\n                 //  : -2. + 4.*abs(cos(x)) * exp(-.5*x);   // very fake test\n    O = vec4(1,0,0,1)                                       // draw\n      * smoothstep(15./R.y,0.,length( vec2(fract(U.x-t)-.5, U.y-h) ) -.2 );\n}\n\n\n\n\n\n\n\n\n\n/**  // --- 342 chars version ( from 423 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float k=.85, g=10., L = 2.*sqrt(4./g); // physics parameters g/2 H=4.\n    vec2  R = iResolution.xy,\n          U = 5.*( u+u - R ) / R.y;                          // normalize coordinates\n    \n    float t = fract(iTime),\n          x = ( floor(U.x-t+2.) + t ) / L,                   // action domain\n          i = floor( log2( 1. - (1.-k)*(x+.5) ) / log2(k) ), // bounce number\n          K = pow(k,i),\n          X = x -  (1.-K) / (1.-k) + .5,                     // start of bounce i\n          h = x < 0. ?  2. \n            : x > 1./(1.-k) - .5 ? -2.\n                     : -2. +  L*L*g* X*( K - X );            // bounce trajectory\n    O = vec4(1,0,0,1)                                        // draw\n      * (1.-R.y/15.*(length( vec2(fract(U.x-t)-.5, U.y-h) ) -.2 ));\n}\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}