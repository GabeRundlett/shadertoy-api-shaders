{
    "Shader": {
        "info": {
            "date": "1618117782",
            "description": "The stability is horrible.",
            "flags": 0,
            "hasliked": 0,
            "id": "fd2GWt",
            "likes": 2,
            "name": "Distance to Ellipse",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "quartic",
                "ellipse",
                "unstable"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "/*\nInterestingly, the quartic equation reflects the fact\nthat b*sqrt(1-x^2/a^2) is actually representing an entire\nellipse rather than just the half that appears in the\ngraph (https://www.desmos.com/calculator/548fbp3kdv).\n*/\n\n// Can sometimes increase stability\n//#define REVERSE_COEFFICIENTS\n\nint solveQuartic(in float a, in float b, in float c, in float d, in float e, inout vec4 roots) {\n    b /= a; c /= a; d /= a; e /= a; // Divide by leading coefficient to make it 1\n\n    float bb = b * b;\n    float p = c - 0.375 * bb;\n    float q = d - 0.5 * b * c + 0.125 * bb * b;\n    float r = e - 0.25 * b * d + 0.0625 * bb * c - 0.01171875 * bb * bb;\n    int n = 0;\n\n    // Solve for an arbitary root to x^3 + 2px^2 + (p^2 - 4r)x - q^2\n    float ra = 2.0 * p;\n    float rb = p * p - 4.0 * r;\n    float rc = -q * q;\n\n    float raa = ra * ra;\n    float inflect = ra / 3.0;\n\n    float rp = rb - raa / 3.0;\n    float rq = raa * ra / 13.5 - ra * rb / 3.0 + rc;\n    float rppp = rp * rp * rp, rqq = rq * rq;\n\n    float p2 = abs(rp);\n    float v1 = 1.5 / rp * rq;\n\n    float lambda;\n    if (rqq * 0.25 + rppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2);\n        if (rp < 0.0) lambda = sign(rq) * cosh(acosh(v2 * -sign(rq)) / 3.0);\n        else lambda = sinh(asinh(v2) / 3.0);\n        lambda = -sqrt(p2 / 3.0) * lambda;\n    }\n\n    else lambda = sqrt(-rp / 3.0) * cos(acos(v1 * sqrt(-3.0 / rp)) / 3.0);\n    lambda = 2.0 * lambda - inflect;\n\n    // Solve two quadratic equations (checking for negative sqrts which should be complex)\n    if (lambda < 0.0) return n;\n    float sqrtLambda = sqrt(lambda);\n\n    float pLambda = p + lambda, qLambda = q * inversesqrt(lambda);\n    float offs = 0.25 * b;\n\n    float foo = lambda - 2.0 * (pLambda + qLambda);\n    float bar = lambda - 2.0 * (pLambda - qLambda);\n\n    if (foo >= 0.0) {\n        roots.xy = (vec2(1.0, -1.0) * sqrt(foo) + sqrtLambda) * 0.5 - offs;\n        n += 2;\n    }\n\n    if (bar >= 0.0) {\n        vec2 others = (vec2(1.0, -1.0) * sqrt(bar) - sqrtLambda) * 0.5 - offs;\n        if (n > 0) roots.zw = others;\n        else roots.xy = others;\n        n += 2;\n    }\n\n    return n;\n}\n\n// Reverse coefficients trick increases stability\nint solveQuartic2(in float a, in float b, in float c, in float d, in float e, inout vec4 roots) {\n    int nroots = solveQuartic(e, d, c, b, a, roots);\n    if (nroots == 0) return 0;\n    if (nroots == 2) roots.xy = 1.0 / roots.xy;\n    if (nroots == 4) roots = 1.0 / roots;\n    return nroots;\n}\n\n// Start with parametric form:\n// (a * cos(t), b * sin(t))\n//\n// Change to \"y=\"\n// b * sin(cos^-1(x / a)) --> b * sqrt(1 - x^2 / a^2)\n//\n// Squared distance:\n// (p.x - x)^2 + (p.y - b * sqrt(1 - x^2 / a^2))^2\n//\n// Find roots of derivative of the squared distance to find the minimum\n// Algebraically eliminating the square roots results in a quartic equation\n\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat sdEllipse(in vec2 p, in vec2 ab) {\n    p = abs(p);\n    vec2 qq = ab * ab, pp = p * p;\n\n    float a = 2.0 * qq.y - qq.y * qq.y / qq.x - qq.x;\n    float b = 2.0 * p.x * (qq.x - qq.y);\n    float c = dot(qq - pp, qq) - 2.0 * qq.x * qq.y;\n    float d = 2.0 * p.x * qq.x * (qq.y - qq.x);\n    float e = pp.x * qq.x * qq.x;\n\n    vec4 roots;\n\n    #ifdef REVERSE_COEFFICIENTS\n    int nroots = solveQuartic2(a, b, c, d, e, roots);\n    #else\n    int nroots = solveQuartic(a, b, c, d, e, roots);\n    #endif\n\n    float dist = dot2(p - vec2(roots[0], ab.y * sqrt(1.0 - roots[0] * roots[0] / qq.x)));\n    for (int n=1; n < nroots; n++) {\n        dist = min(dist, dot2(p - vec2(roots[n], ab.y * sqrt(1.0 - roots[n] * roots[n] / qq.x))));\n    }\n\n    return sqrt(dist) * sign(dot2(p / ab) - 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 2.0;\n    vec2 mouse = iMouse.z > 0.0 ? (iMouse.xy - center) / iResolution.y * 2.0 : vec2(1.2, 0.6);\n\n    float d = sdEllipse(uv, abs(mouse));\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}