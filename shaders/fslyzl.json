{
    "Shader": {
        "info": {
            "date": "1642545602",
            "description": "My participation to genuary 2022\nVHS",
            "flags": 32,
            "hasliked": 0,
            "id": "fslyzl",
            "likes": 5,
            "name": "Genuary 2022 - Day18",
            "published": 3,
            "tags": [
                "generative",
                "vhs",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 688
        },
        "renderpass": [
            {
                "code": "vec3 doBloom(vec2 uv, float blur, float threshold)\n{\n    vec3 col;\n    int cnt = 50;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = (fi/fcnt);\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 5.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*(1.)*blur;\n        vec3 smple = texture(iChannel0, p).xyz;\n        if (length(smple) > threshold)\n            col += smple;\n    }\n    \n    return col/float(cnt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    float bloomIntensity = 624./640.;  \n    vec3 bloomSample = doBloom(uv, 2./360., 117./ 640.);\n    bloomSample = pow(bloomSample, vec3(0.5));\n    \n    col = (col + (bloomSample*bloomIntensity))/2.;\n   // col = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sat(a) clamp(a, 0., 1.)\n#define PI 3.141592653\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nvec3 rdr(vec2 uv, vec2 ouv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 orig = texture(iChannel0, ouv).xyz;\n\n    vec3 grey = vec3(1.)*(orig.r+orig.g+orig.b)/3.;\n    \n    col = mix(orig, grey, .5);\n    col += pow(texture(iChannel1, \n    uv+(vec2(rand(), rand())-.5)*.07+.2*vec2(mod(iTime, 2.3*sat(sin(iTime+uv.y*15.)*.5)), 0.))\n    .xyz*.81, vec3(2.))*.85;\n    col *= sat(pow(texture(iChannel1, \n    uv+(vec2(rand(), rand())-.5)*.07+.2*vec2(mod(-iTime, 2.3*sat(sin(-iTime+uv.y*15.)*10.)), 0.))\n    .xyz*.81, vec3(1.))+.5);\n    \n    vec3 noiseA = pow(texture(iChannel2, ouv*vec2(1.,3.)*.2-vec2(iTime, sin(iTime))).x, 3.)*vec3(1.)\n    *pow(texture(iChannel2, ouv*vec2(1.,3.)*.1+vec2(iTime, 0.)).x, 3.);\n    col += noiseA*sat(sin(uv.y*8.))*sat(sin(iTime)*5.)*2.;\n    \n    \n    vec3 noiseB = pow(texture(iChannel2, ouv*vec2(1.,3.)*.2-vec2(iTime, sin(iTime))).x, 3.)*vec3(1.)\n    *pow(texture(iChannel2, ouv*vec2(1.,3.)*.1+vec2(iTime, 0.)).x, 3.);\n    col += noiseB*sat(sin(uv.y*15.+iTime*10.)-.8)*sat(sin(iTime*.33)*5.)*3.;\n\n    vec3 noiseC = pow(texture(iChannel2, ouv*vec2(1.,3.)*.2-vec2(iTime, sin(iTime))).x, 3.)*vec3(1.)\n    *pow(texture(iChannel2, ouv*vec2(1.,3.)*.1+vec2(iTime, 0.)).x, 3.);\n    col += noiseC*sat(sin(uv.y*15.+sin(iTime*2.))-.8)*5.;\n    col *= sat(noiseC+.9+noiseB);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    float stppx = .0015;\n    ouv = floor(ouv/stppx)*stppx;\n    uv = floor(uv/stppx)*stppx;\n    ouv.x += sin(mod(uv.y+iTime, .2)/.2)*.003;\n    ouv.x += sin(mod(uv.x*10.+iTime, 1.)*10.)*.0005;\n    seed=texture(iChannel2,uv).x;\n    seed+=fract(iTime);\n    vec3 col = rdr(uv, ouv);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}