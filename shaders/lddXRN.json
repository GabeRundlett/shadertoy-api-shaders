{
    "Shader": {
        "info": {
            "date": "1458106827",
            "description": "bulding a brush ID voronoi diagram from a seed of brush ids. This can be used to build a 3D distance field for an arbitrary number of implicit primitives. The brush ids can be seeded multiple times, and the seed position can be arbitrary.",
            "flags": 32,
            "hasliked": 0,
            "id": "lddXRN",
            "likes": 6,
            "name": "JFA: ID diagram",
            "published": 3,
            "tags": [
                "sdf",
                "jfa",
                "brushes"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1346
        },
        "renderpass": [
            {
                "code": "// presentation\n\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) +\n         length(max(d,0.0));\n}\n\nstruct Brush {\n    vec2 p;\n    vec2 s;\n    float a;\n};\n    \n#define NUMBRUSHES 5\nBrush brushes[NUMBRUSHES];\nvoid initdata(float t) {\n    brushes[0] = Brush(vec2(0.5), vec2(0.0), 0.0);\n\tbrushes[1] = Brush(vec2(0.0), vec2(1.0,0.1), t);\n    brushes[2] = Brush(vec2(0.5,0.2), vec2(0.05,0.1), 0.5);\n    brushes[3] = Brush(vec2(-0.6,-0.4), vec2(0.01), 0.2);\n    brushes[4] = Brush(vec2(0.1,0.0), vec2(sin(t)*0.5+0.5)*0.3, 0.1);\n}\nBrush getbrush(int i) {\n    if (i == 1) return brushes[1];\n    if (i == 2) return brushes[2];\n    if (i == 3) return brushes[3];\n    if (i == 4) return brushes[4];\n    return brushes[0];\n}\n\nfloat brushdist(Brush brush, vec2 p) {\n    p -= brush.p;\n    vec2 cs = vec2(sin(-brush.a),cos(-brush.a));\n    p = vec2(\n        dot(p, vec2(cs.y, -cs.x)),\n        dot(p, cs)\n        );\n    return sdBox(p, brush.s);\n}\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 load1(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv);\n}\n\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   p *= 3.1459;\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = int(mod(iTime,15.0));\n    initdata(iTime - mod(iTime,15.0));\n    vec2 aspect = vec2(iResolution.x / iResolution.y,1.0); \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = (uv * 2.0 - 1.0) * aspect;    \n    \n    int id = int(load1(ivec2(fragCoord + 0.5)).x);\n    float d = 0.0;\n    if (id != 0) {\n        Brush brush = getbrush(id);\n        d = brushdist(brush, uv);\n    }\n    \n    vec3 col;\n    col = hash31(float(id)) * 0.5;\n    col += 0.5*(sin(d*40.0)*0.5+0.5);\n    if (d < 0.0) {\n        col += 0.5;\n    }\n    /*\n    if (frame < 12) {\n        col = hash31(float(id)) * 0.5;\n    } else {\n        col = hash31(float(id));\n    }\n\t*/\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// channel 1: JFA steps\n\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) +\n         length(max(d,0.0));\n}\n\nstruct Brush {\n    vec2 p;\n    vec2 s;\n    float a;\n};\n    \n#define NUMBRUSHES 5\nBrush brushes[NUMBRUSHES];\nvoid initdata(float t) {\n    brushes[0] = Brush(vec2(0.5), vec2(0.0), 0.0);\n\tbrushes[1] = Brush(vec2(0.0), vec2(1.0,0.1), t);\n    brushes[2] = Brush(vec2(0.5,0.2), vec2(0.05,0.1), 0.5);\n    brushes[3] = Brush(vec2(-0.6,-0.4), vec2(0.01), 0.2);\n    brushes[4] = Brush(vec2(0.1,0.0), vec2(sin(t)*0.5+0.5)*0.3, 0.1);\n}\nBrush getbrush(int i) {\n    if (i == 1) return brushes[1];\n    if (i == 2) return brushes[2];\n    if (i == 3) return brushes[3];\n    if (i == 4) return brushes[4];\n    return brushes[0];\n}\n\nfloat brushdist(Brush brush, vec2 p) {\n    p -= brush.p;\n    vec2 cs = vec2(sin(-brush.a),cos(-brush.a));\n    p = vec2(\n        dot(p, vec2(cs.y, -cs.x)),\n        dot(p, cs)\n        );\n    return sdBox(p, brush.s);\n}\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvoid store(out vec4 t, vec4 v) {\n    t = v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = int(mod(iTime,15.0));\n    initdata(iTime - mod(iTime,15.0));\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = uv*2.0 - 1.0;\n    p.x *= aspect;\n    \n    float iter = mod(float(iFrame),13.0);\n    if (iter < 0.5) {\n        float p = mod(fragCoord.x + fragCoord.y, float(NUMBRUSHES));\n        \n        int id = int(p);\n        store(fragColor, vec4(float(id),0.0,0.0,0.0));        \n        \n    } else {\n        // JFA step (for up to 4096x4096)\n        float level = clamp(iter-1.0,0.0,11.0);\n        int stepwidth = int(exp2(11.0 - level)+0.5);\n        \n        ivec2 tc = ivec2(fragCoord + 0.5);\n        \n        float best_dist = 999999.0;\n        int best_id = 0;\n        vec2 center = vec2(tc);\n        for (int y = -1; y <= 1; ++y) {\n            for (int x = -1; x <= 1; ++x) {\n                ivec2 fc = tc + ivec2(x,y)*stepwidth;\n\t\t        int id = int(load0(fc).x + 0.5);\n                if (id != 0) {\n                    Brush brush = getbrush(id);\n                    float d = brushdist(brush, p);\n\n                    if (d < best_dist) {\n                        best_dist = d;\n                        best_id = id;\n                    }\n                }\n            }\n        }        \n        store(fragColor,vec4(float(best_id),0.0,0.0,0.0));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// channel 2: take snapshot of stage\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 load1(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv);\n}\n\nvoid store(out vec4 t, vec4 v) {\n    t = v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord + 0.5);\n    int iter = int(mod(float(iFrame),13.0));\n    int frame = int(mod(iTime,15.0));\n    //frame = 13;\n    if ((iter == frame) || ((frame > 12) && (iter == 12))) {\n        // snapshot\n        store(fragColor,load0(tc));\n    } else {\n        // copy\n        store(fragColor,load1(tc));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}