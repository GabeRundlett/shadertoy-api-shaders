{
    "Shader": {
        "info": {
            "date": "1522588919",
            "description": "Repurposing the Wardenclyffe Tower to receive rather than transmit energy (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "MdycRK",
            "likes": 9,
            "name": "Tesla's Tower",
            "published": 3,
            "tags": [
                "tower",
                "lightning",
                "frame",
                "structure"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 616
        },
        "renderpass": [
            {
                "code": "// \"Tesla's Tower\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm1 (float p);\nfloat Fbm2p (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define AA   0   // optional antialiasing (0/1 - off/on)\n\nvec4 pth[4];\nvec3 sunDir, qHit;\nfloat illum[4], tCur, dstFar;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat SparkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  dMin *= 2.;\n  for (int k = 0; k < 4; k ++) {\n    if (illum[k] > 0.) {\n      q = p;\n      q.xz = Rot2D (q.xz, (0.5 + float (k)) * 0.5 * pi + 0.1 * tCur);\n      q.y -= 10. + 0.2 * Fbm1 (5. * tCur);\n      q.z += 3.;\n      q.yz = Rot2D (q.yz, -0.25 * pi);\n      q.z += 16.;\n      d = PrCylDf (q, 0.9, 20.);\n      if (d < dMin) {\n        q.xy -= (1. - smoothstep (19., 19.5, q.z)) * (2. * vec2 (Fbm2p (vec2 (0.4 * q.z, 0.) +\n           pth[k].xy), Fbm2p (vec2 (0.3 * q.z, 0.) + pth[k].zw)) - 1.);\n        d = PrCylDf (q, 0.02, 20.);\n        DMINQ (7);\n      }\n    }\n  }\n  return 0.5 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  vec2 b;\n  float dMin, d, r, w, ww;\n  dMin = dstFar;\n  p.y -= 5.36;\n  r = length (p.xz);\n  qq = p;\n  qq.xz = Rot2D (qq.xz, 2. * pi * (floor (16. * ((r > 0.) ?\n     atan (qq.z, - qq.x) / (2. * pi) : 0.) + 0.5) / 16.));\n  q = qq;\n  w = (0.5 - q.y / 10.);\n  ww = (1. + w * w);\n  q.x += 1.6 * ww;\n  q.y = mod (q.y, 1.) - 0.5;\n  d = PrBox2Df (q.xy, vec2 (0.05 * ww, 0.5));\n  b = abs (q.yz) - vec2 (0.45, 0.265 * ww);\n  d = max (max (d, - max (min (max (b.x, b.y), 0.), max (0.1 * (1. + 0.1 * ww) - length (q.yz),\n     0.07 - abs ((1.85 - w) * abs (b.y) - abs (b.x))))), abs (qq.y) - 5.05);\n  DMINQ (1);\n  d = PrCylDf (q.yzx, 0.02, 0.06 * ww);\n  q.yz = abs (q.yz) - vec2 (0.46, 0.27 * ww);\n  d = max (min (d, PrCylDf (q.yzx, 0.02, 0.06 * ww)), abs (qq.y) - 5.05);\n  DMINQ (2);\n  dMin *= 0.6;\n  q = p;\n  q.y -= 5.1;\n  d = PrCylAnDf (q.xzy, 1.7, 0.2, 0.05);\n  q.y = abs (q.y - 0.45) - 0.15;\n  d = min (d, PrTorusDf (q.xzy, 0.03, 1.85));\n  DMINQ (3);\n  q = qq;\n  q.xy -= vec2 (-1.85, 5.4);\n  d = PrCylDf (q.xzy, 0.03, 0.3);\n  DMINQ (3);\n  q = p;\n  q.y -= 7.;\n  d = PrSphDf (q, 1.);\n  DMINQ (4);\n  qq = p;\n  qq.xz = Rot2D (qq.xz, pi / 16.);\n  qq.xz = Rot2D (qq.xz, 2. * pi * (floor (16. * ((r > 0.) ?\n     atan (qq.z, - qq.x) / (2. * pi) : 0.) + 0.5) / 16.));\n  q = qq;\n  q.xy -= vec2 (-3.3, -5.2);\n  d = PrCylDf (q.xzy,  0.25, 0.15);\n  DMINQ (6);\n  q = p;\n  q.y -= 0.65;\n  d = PrCylDf (q.xzy, 0.1 + 0.02 * abs (sin (6. * pi * q.y)), 6.);\n  DMINQ (5);\n  q = qq;\n  q.y -= 7.7;\n  q.xy = Rot2D (q.xy, -0.33 * pi);\n  q.x += 1.5;\n  d = PrCylDf (q.yzx, 0.04 + 0.01 * abs (sin (12. * pi * q.x)), 1.5);\n  DMINQ (5);\n  dMin = SparkDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 CloudNf (vec3 p, float d)\n{\n  vec2 s, e;\n  e = vec2 (0.0005 * d, 0.);\n  s = p.xz + 0.03 * tCur;\n  return normalize (vec3 (0.1 * (Fbm2p (s) - vec2 (Fbm2p (s + e.xy), Fbm2p (s + e.yx))), e.x).xzy);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float d;\n  if (rd.y < 0.) { \n    ro += (- ro.y / rd.y) * rd;\n    col = 0.5 * mix (vec3 (0.35, 0.4, 0.2), vec3 (0.4, 0.45, 0.1),\n       smoothstep (0.3, 0.7, Fbm2p (ro.xz)));\n    vn = VaryNf (ro, vec3 (0., 1., 0.), 2.);\n    col = col * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) * (0.7 + 0.3 * smoothstep (3.5, 4., length (ro.xz)));\n   } else {\n    d = (30. - ro.y) / max (rd.y, 0.001);\n    ro += d * rd;\n    vn = mix (vec3 (0., 1., 0.), CloudNf (0.02 * ro, d), smoothstep (0., 0.3, rd.y));\n    col = vec3 (1.) * (0.3 + 0.7 * Fbm2p (0.01 * ro.zx)) * (0.2 + 0.8 * max (dot (rd, vn), 0.));\n    col += vec3 (0.1, 0.1, 0.05) * Fbm1 (4. * tCur) * smoothstep (0., 0.3, rd.y);\n  }\n  col = mix (vec3 (0.14), col, smoothstep (0., 0.1, abs (rd.y)));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, illTot, f, t, r, c, ae;\n  illTot = 0.;\n  for (int k = 0; k < 4; k ++) {\n    f = 0.1 * float (k);\n    t = 0.2 * tCur;\n    pth[k] = vec4 (4. + f - (10. + 3. * f) * t + (0.8 - f) * sin ((0.1 + 0.1 * f) * t),\n       sin ((0.11 + 0.1 * f) * t) + (0.3 + 0.2 * f) * sin ((0.17 + 0.5 * f) * t),\n       5. + 2. * f - (12. - 2. * f) * t + (0.5 + 0.3 * f) * sin ((0.15 - 0.2 * f) * t),\n       sin ((0.12 - 0.1 * f) * t) + (0.4 - 0.2 * f) * sin ((0.12 + 0.2 * f) * t));\n    illum[k] = step (0.5, Fbm1 (4. * tCur + 100. * f));\n    illTot += 0.25 * illum[k];\n  }\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 7) {\n      col = vec3 (0.9, 0.9, 0.6) * clamp (1.3 - 0.3 * Fbm1 (5. * qHit.z), 0., 1.) *\n         (0.2 + 1.3 * max (0.3 - dot (rd, vn), 0.));\n    } else {\n      r = length (ro.xz);\n      if (idObj == 1) {\n        col = mix (vec3 (0.8, 0.8, 0.9), vec3 (0.9, 0.9, 0.3),\n           step (dot (normalize (vn.xz), normalize (ro.xz)), -0.9)) * (0.8 + 0.2 * Fbm3 (16. * ro));\n      } else if (idObj == 2) {\n        col = vec3 (0.3, 0.7, 0.3);\n      } else if (idObj == 3) {\n        col = vec3 (0.7, 0.5, 0.2) * (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.03, mod (9. * r, 1.)));\n      } else if (idObj == 4) {\n        ae = asin (ro.y / length (ro)) / (0.5 * pi);\n        c = cos (0.5 * pi * ae);\n        col = vec3 (0.2, 0.2, 0.5) * (1. + illTot) * (1. - 0.2 * max (SmoothBump (0.5 - c, 0.5 + c,\n           0.5 * c, mod (6. * ro.y, 1.)), (1. - smoothstep (0.99, 0.995, abs (ae))) *\n           SmoothBump (0.5 - 0.005 / c, 0.5 + 0.005 / c, 0.5 * 0.005 / c,\n           mod (16. * ((r > 0.) ? atan (ro.z, - ro.x) / (2. * pi) : 0.), 1.))));\n      } else if (idObj == 5) {\n         col = vec3 (0.7, 0.4, 0.2) * (0.7 + 0.3 * illTot * step (r, 0.15));\n      } else if (idObj == 6) {\n        col = vec3 (0.4, 0.2, 0.1);\n      }\n      col = col * (0.3 + 0.7 * max (dot (vn, sunDir), 0.)) * (0.8 + 0.2 * illTot) +\n         0.05 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    }\n  } else col = BgCol (ro, rd) * (0.7 + 0.3 * illTot);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvd, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.03 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 0.45 * pi * mPtr.y;\n  } else {\n    az = 2. * pi * (2. * mod (floor (0.01 * tCur), 2.) - 1.) *\n       SmoothBump (0.25, 0.75, 0.24, mod (0.01 * tCur, 1.));\n    el -= 0.17 * pi * sin (0.02 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 6., -40.);\n  if (ro.y < 1.) {\n    ro.y = 1.;\n    ro.xz *= sqrt (1635.) / length (ro.xz);\n  }\n  zmFac = 7. - 3. * cos (2. * az);\n  dstFar = 200.;\n  sunDir = vuMat * normalize (vec3 (0.5, 2., -1.));\n\n  #if ! AA\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  col = ShowScene (ro, rd);\n#else\n  col = vec3 (0.);\n  for (int iy = 0; iy <= 1; iy ++) {\n    for (int ix = 0; ix <= 1; ix ++) {\n      uvd = (0.5 / canvas.y) * (2. * vec2 (float (ix), float (iy)) - 1.);\n      rd = vuMat * normalize (vec3 (uv + uvd, zmFac));\n      col += ShowScene (ro, rd);\n    }\n  }\n  col *= 0.25;\n#endif\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2p (vec2 p)\n{\n  float f, a, s;\n  f = 0.;\n  s = 0.;\n  a = 1.;\n  for (int j = 0; j < 4; j ++) {\n    f += a * Noisefv2 (p);\n    s += a;\n    a *= 1./2.5;\n    p *= 2.5;\n  }\n  return f / s;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}