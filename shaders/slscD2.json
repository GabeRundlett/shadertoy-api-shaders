{
    "Shader": {
        "info": {
            "date": "1648795435",
            "description": "Inspired by Dan Bach on Twitter: [url]https://twitter.com/dansmath/status/1508205090561159172[/url]\n\nMouse sets cubic parameter and parabola spacing. 'x' hides the white cubic line.",
            "flags": 16,
            "hasliked": 0,
            "id": "slscD2",
            "likes": 23,
            "name": "A Cubic, Osculated By Parabolas",
            "published": 3,
            "tags": [
                "cubic",
                "parabola",
                "loopless",
                "osculate"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// A Cubic, Osculated by Parabolas.\n// Inspired by Dan Bach: https://twitter.com/dansmath/status/1508205090561159172\n//\n// Matthew Arcus, mla, 2022.\n//\n// A cubic curve y = x³+kx has a family of osculating\n// parabolas (osculating at x = t):\n//\n// y = 3tx² + (k-3t²)x + t³\n//\n// Regarding this as a cubic equation in t, for given x,y:\n//\n// t³ - 3xt² + 3x²t + kx - y = 0\n// ∴ (t-x)³ + x³ + kx - y = 0\n// ∴ t = x+∛(y - x³ - kx) is single real root\n//\n// So exactly 1 parabola passes through each point in the plane.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat k = -1.0; // Cubic parameter\nfloat N = 20.0; // Parabola spacing\n\nfloat lwidth = 0.002;\nfloat scale = 1.0;\n\nvec3 map(vec2 p) {\n  return vec3(scale*(2.0*p - iResolution.xy) / iResolution.y, 1);\n}\n\nfloat cuberoot(float x) {\n  float s = sign(x);\n  x = pow(abs(x),1.0/3.0);\n  return s*x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec3 p = map(fragCoord.xy);\n  float px = fwidth(p.x);\n  if (iMouse.x != 0.0) {\n    vec2 m = iMouse.xy/iResolution.xy;\n    k = 5.0*(m.x-0.5);\n    N = 40.0*m.y;\n  }\n  vec3 color = vec3(0);\n  float x = p.x, y = p.y;\n  float x2 = x*x, x3 = x*x2;\n  // Cubic curve is x³+kx = 0\n  // Find osculating parabola at (x,y)\n  float t0 = x+cuberoot(y-x*(x2+k));\n  float t = t0;\n  t *= N;\n  t -= iTime;\n  t = round(t);\n  t += iTime;\n  t /= N;\n  float t2 = t*t, t3 = t*t2;\n  float d = 3.0*t*x2 + (k-3.0*t2)*x + t3 - y;\n  float dx = 6.0*t*x+(k-3.0*t2);\n  d /= sqrt(dx*dx+1.0); // dy = 1\n  vec3 lcol = h2rgb(atan(t0)/PI);\n  color = mix(lcol,color,smoothstep(0.0,px,abs(d)-lwidth));\n  if (!key(CHAR_X)) {\n    d = x3 + k*x - y;\n    dx = 3.0*x2+k;\n    d /= sqrt(dx*dx+1.0);\n    color = mix(vec3(1),color,smoothstep(0.0,max(px,3.0*lwidth),abs(d)));\n  }\n  color = pow(color,vec3(0.4545));\n  fragColor = vec4(color,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI =  3.141592654;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n  return rgb;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}