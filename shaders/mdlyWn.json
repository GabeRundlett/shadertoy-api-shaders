{
    "Shader": {
        "info": {
            "date": "1686731549",
            "description": "A line of rotating rectangles is moving along a cubic path.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdlyWn",
            "likes": 3,
            "name": "Cubic squares",
            "published": 3,
            "tags": [
                "sdf",
                "squares",
                "cubicfunction",
                "totation"
            ],
            "usePreview": 0,
            "username": "Starfish",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "vec2 cubic(float x, float a, float b, float c, float d){\n    float y = a * x * x * x + b * x * x + c * x + d;\n    \n    return vec2(x, y);\n}\n\nmat2 rotate(float angle) {\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\n\n//signed distance function for rectangles, credit: inigo quilez\nfloat sdBox( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //move (0., 0.) into middle of screen, scaled coordinates from (-2.,-2.) to (2., 2.)\n    vec2 uv = fragCoord/iResolution.xy * 4.0 - 2.;\n    \n\n    //calculates whether a pixel is within a square or not. To achieve this, all x positions\n    //of the squares are iterated through to check which square is closest, then uv is shifted\n    //so that the coordinates of that square are centered to calculate the signed distance function\n    float squareNum = 16.;\n    \n    //any number bigger than the longest possible distance will do\n    float squareCoordDist = 20.0;\n    float squarePos;\n    \n    for(float n=0.0; n<squareNum; n++){\n        float nearestSquarePos = mod(n * 4. / squareNum + 0.5 * iTime, 4.) - 2.0;\n        \n        if(abs(uv.x - nearestSquarePos) < squareCoordDist){\n            squareCoordDist = abs(uv.x - nearestSquarePos);\n            squarePos = nearestSquarePos;\n        }\n    }       \n     \n    //centering square coordinates is done with the x coord of the selected square and the\n    //correlated y value of its cubic to achieve the wavy movement of the squares\n    uv -= cubic(squarePos, 0.7, 0.0, -2.0, 0.0);\n    \n    //adjusting the aspect ratio, without this the squares will be shown as rectangles\n    uv.x *= iResolution.x/iResolution.y;\n\n    //add some rotation\n    uv = rotate(0.5 * iTime) * uv; \n    \n    //calculates the color from the square sdf, using smoothstep to prevent rough edges\n    float distToCirclePos = smoothstep(0.001, 0.015, sdBox(uv, vec2(0.15, 0.15)));\n\n    \n    vec3 col = vec3(distToCirclePos);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}