{
    "Shader": {
        "info": {
            "date": "1592480705",
            "description": "https://www.nicovideo.jp/series/12303 の支援絵(?)です。\nコードの冒頭にある定数の値を変えることである程度のカスタマイズができるようになっています\nこのサイトの機能で録画も可能ですのでご自由にお使いください\n追加要素の要望は@torumu106へ\n\nCheering shader for https://www.nicovideo.jp/series/12303\nPlease change settings if you want to customize.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lfyRS",
            "likes": 0,
            "name": "LAMB CHOP!!",
            "published": 3,
            "tags": [
                "chop",
                "lamb"
            ],
            "usePreview": 0,
            "username": "Torumu106",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "//ここでカスタマイズが可能です\n//Settings are here.\n\n//color = vec3(R, G, B)\nconst vec3 back_ground_color = vec3(0.1, 0.1, 0.1);\nconst vec3 bone_color = vec3(0.7, 0.7, 0.7);\nconst vec3 fat_color = vec3(1.0, 1.0, 1.0);\nconst vec3 meat_color = vec3(1.0,0.35,0.35);\nconst vec3 ahoge_color = vec3(1.0, 1.0, 0.4);\nconst vec3 tuina_color = vec3(1.0, 0.7, 0.8);\n\n//true or false\nconst bool party_parrot_mode = false;\nconst bool rainbow_mode = false;\nconst bool wave_mode = false;\nconst bool circle_wave_mode = false;\nconst bool ahoge_mode = false;\nconst bool tuina_mode = true;\n\n//以上、設定でした\n//Settings ended.\n\nfloat rectangle(vec2 r, vec2 bottomLeft, vec2 topRight)\n{\n    float ret;\n    float d = 0.005;\n    ret = smoothstep(bottomLeft.x - d, bottomLeft.x + d, r.x);\n    ret *= smoothstep(bottomLeft.y - d, bottomLeft.y + d, r.y);\n    ret *= 1.0 - smoothstep(topRight.y - d, topRight.y + d, r.y);\n    ret *= 1.0 - smoothstep(topRight.x - d, topRight.x + d, r.x);\n    return ret;\n}\nfloat disk(vec2 r, vec2 center, float radius)\n{\n    return 1.0 - smoothstep( radius - 0.005, radius + 0.005, length(r - center));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 r = 2.0 * vec2(uv.x - 0.5, uv.y - 0.5);\n    r.x *= iResolution.x / iResolution.y;\n    vec3 ret = back_ground_color;\n    \n    r /= 0.7;\n    r.y += 0.2;\n    \n    float GlobalTime = mod(iTime * 4.0 * 3.14, 3.14 * 2.0);\n    if(party_parrot_mode){\n    \tfloat parrot = 0.2 * min(1.0, max(r.y + 1.0, 0.0));\n    \tr += vec2(cos(GlobalTime) * parrot , sin(GlobalTime) *  parrot);\n    }\n    if(wave_mode){\n    \tr.x += sin(r.y * 10.0 * 3.14 + GlobalTime) * 0.02;\n    }\n    if(circle_wave_mode){\n    \tr += r * sin(sqrt(r.x * r.x + r.y * r.y) * 20.0 * 3.14 + GlobalTime) * 0.02;\n    }\n    \n    //ahoge\n    if(ahoge_mode){\n    \tfloat sq0 = max(0., max(disk(r, vec2(0.5, 0.8), 0.5) - disk(r, vec2(0.6, 0.7), 0.6) , disk(r, vec2(-0.3, 0.8), 0.4) - disk(r, vec2(-0.4, 0.7), 0.5) ));\n    \tret = ret*(1.0-sq0) + ahoge_color*sq0;\n    }\n    \n    //tuina\n    if(tuina_mode){\n    \tvec2 r_t = r, r_tr = r;\n        r_t *= 4.0;\n        r_tr *= 4.0;\n        \n        r_t.x -= 0.3;\n        r_t.y += 0.5;\n        r_t.x = abs(r_t.x);\n        r_t.x -= 4.0;\n        \n        r_tr.x -= 0.3;\n        r_tr.y += 0.5;\n        r_tr.x = abs(r_tr.x);\n        r_tr.x -= 4.0;\n        \n        float angle = 0.2 * 3.14 * r_t.y * 0.1 + 3.14 * 0.1;\n        r_t.x = cos(angle)*r_t.x + sin(angle)*r_t.y;\n        r_t.y = -sin(angle)*r_t.x + cos(angle)*r_t.y;\n        angle = 0.2 * 3.14 * r_tr.y * 0.1 + 3.14 * 0.1;\n        r_tr.x = cos(angle)*r_tr.x + sin(angle)*r_tr.y;\n        r_tr.y = -sin(angle)*r_tr.x + cos(angle)*r_tr.y;\n        \n        if(r_t.y >= 3.14 || r_t.y <= -3.14){\n        \tr_t.x += 100.0;\n            r_tr.x += 100.0;\n        }\n        \n        r_t.x /= sin(r_t.y * 0.5 + 3.14 * 0.5);\n        r_t.y = mod(r_t.y, 0.4)-0.3;\n        r_t.y += acos(r_t.x) * 0.2 / 3.14;\n        \n        r_tr.x /= sin(r_tr.y * 0.5 + 3.14 * 0.5);\n        r_tr.y =  mod(r_tr.y+0.2, 0.4)-0.3;\n        r_tr.y += acos(-r_tr.x) * 0.2 / 3.14;\n        \n        \n        float sq_t = rectangle(r_tr, vec2(-1.0, -0.1), vec2(1.0, 0.1));\n        ret = ret*(1.0-sq_t) + tuina_color*sq_t * 0.5; \n        sq_t = rectangle(r_t, vec2(-1.0, -0.1), vec2(1.0, 0.1));\n        ret = ret*(1.0-sq_t) + tuina_color*sq_t;\n    }\n    \n    //bone\n    vec2 r1 = r;\n    \n    float the = 3.14 * 0.05* (-r1.y+1.5);\n    r1.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    float sq1 = rectangle(r1, vec2(0.5,-1.0), vec2(0.6, 0.6) );\n    ret = ret*(1.0-sq1) + bone_color*sq1;\n    sq1 = rectangle(r1, vec2(0.5,-.0), vec2(0.6, 0.6) );\n    ret = ret*(1.0-sq1) + fat_color*sq1;\n    \n    \n    //meat\n    vec2 r2 = r;\n    \n    the = -3.14 * 0.02;\n    r2.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    r2.y /= 1.8;\n    \n    vec2 r3 = r2;\n    r3.y *= 1.8;\n    the = 3.14 * 0.1;\n    r3.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    r3.y /= 0.8;\n    \n    if(r1.x>0.5){\n    \tr3.x = (r3.x-0.08) /.8;\n    }\n    \n    float sq2 = max(disk(r2, vec2(0.1,-0.), 0.5 ), disk(r3, vec2(-0.,0.55), 0.65 ) );\n    sq1 = rectangle(r1, vec2(0.5,-1.0), vec2(0.8, 1.0) );\n    \n    vec2 r4 = r;\n    \n    the = 3.14 * 0.05* (-r4.y*0.5-3.5);\n    r4.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    float sq3 = rectangle(r4, vec2(-0.3,-1.0), vec2(-0.2, 0.9) );\n    sq1 = max(sq1, sq3);\n    sq3 = rectangle(r4, vec2(-0.5,-1.0), vec2(-0.37, 0.9) );\n    sq1 = max(sq1, sq3);\n    ret = ret*(1.0-sq2) +( meat_color * (1.0 - sq1) + fat_color * sq1)*sq2;\n    \n    \n    //rainbow\n    if(rainbow_mode){\n    \tfloat maxi = max(ret.x, max(ret.y, ret.z)), mini = min(ret.x, min(ret.y, ret.z));\n        float h = 0.;\n        if(ret.x - 0.005 <= maxi && maxi <= ret.x + 0.005){\n        \th = 60. * (ret.y - ret.z) / (maxi - mini);\n        }else if (ret.y - 0.005 <= maxi && maxi <= ret.y + 0.005){\n        \th = 60. * (ret.z - ret.x) / (maxi - mini) + 120.;\n        }else{\n        \th = 60. * (ret.x - ret.y) / (maxi - mini) + 240.;\n        }\n        h += GlobalTime * 180. / 3.14;\n        h = mod(h, 360.);\n        if(0. <= h && h < 60.){\n        \tret = vec3(maxi, max(h / 60. * (maxi - mini) ,0.)+ mini , mini);\n        }else if(60. <= h && h < 120.){\n        \tret = vec3(max((120. - h) / 60. * (maxi - mini) ,0.)+ mini , maxi, mini);\n        }else if(120. <= h && h < 180.){\n        \tret = vec3(mini, maxi, max((h - 120.) / 60. * (maxi - mini) ,0.)+ mini);\n        }else if(180. <= h && h < 240.){\n        \tret = vec3(mini, max((240. - h) / 60. * (maxi - mini) ,0.)+ mini , maxi);\n        }else if(240. <= h && h < 300.){\n        \tret = vec3(max((h - 240.) / 60. * (maxi - mini) ,0.)+ mini , mini, maxi);\n        }else{\n        \tret = vec3(maxi, mini, max((360. - h) / 60. * (maxi - mini) ,0.)+ mini);\n        }\n    }\n    \n    //finish\n\tfragColor = vec4(ret,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}