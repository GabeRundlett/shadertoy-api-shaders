{
    "Shader": {
        "info": {
            "date": "1717451403",
            "description": "I remember doing this 20+ years ago ;)",
            "flags": 32,
            "hasliked": 0,
            "id": "l3KGzw",
            "likes": 5,
            "name": "msdos fire old school",
            "published": 3,
            "tags": [
                "fire",
                "msdos",
                "dos"
            ],
            "usePreview": 0,
            "username": "zenbooster",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "highp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nbool pal(float k, float c, out float v)\n{\n    bool res;\n\n    float cb = k / 256.;\n    float ce = (k + 64.) / 256.;\n    \n    res = (c >= cb) && (c < ce);\n\n    if(res)\n    {\n        v = (c - cb) * 4.;\n    }\n\n    return res;\n}\n\nvec3 palette(float c)\n{\n    vec3 res = vec3(0);\n   \n    float v;\n    if(pal(0., c, v))\n    {\n        res = vec3(v, 0., 0.);\n    }\n    else\n    if(pal(64., c, v))\n    {\n        res = vec3(1., v, 0.);\n    }\n    else\n    if(pal(128., c, v))\n    {\n        res = vec3(1., 1., v);\n    }\n    else\n    if(pal(192., c, v))\n    {\n        res = vec3(1., 1., v);\n    }\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float px_x = 1. / iResolution.x;\n    float px_y = 1. / iResolution.y;\n    \n    if(uv.y < px_y)\n    {\n        fragColor = vec4(rand(uv*iTime));\n    }\n    else\n    {\n        float col_0 = texture(iChannel0, uv - vec2(px_x, 2.*px_y)).a;\n        float col_1 = texture(iChannel0, uv - vec2(0., 2.*px_y)).a;\n        float col_2 = texture(iChannel0, uv - vec2(-px_x, 2.*px_y)).a;\n        float col_3 = texture(iChannel0, uv - vec2(px_x, px_y)).a;\n        float col_4 = texture(iChannel0, uv - vec2(-px_x, px_y)).a;\n        float col_5 = texture(iChannel0, uv - vec2(px_x, 0.)).a;\n        float col_6 = texture(iChannel0, uv - vec2(0., 0.)).a;\n        float col_7 = texture(iChannel0, uv - vec2(-px_x, 0.)).a;\n        float col = (col_0 + col_1 + col_2 + col_3 + col_4 + col_5 + col_6 + col_7) / 8.;\n       \n        if (col > 0.)\n        {\n            col -= px_y / 1.5;\n        }\n        fragColor = vec4(palette(col), col);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}