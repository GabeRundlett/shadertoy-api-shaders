{
    "Shader": {
        "info": {
            "date": "1714866652",
            "description": "A first experiment with fract.",
            "flags": 0,
            "hasliked": 0,
            "id": "lcyXzD",
            "likes": 4,
            "name": "Onions Have Layers",
            "published": 3,
            "tags": [
                "layersfract"
            ],
            "usePreview": 0,
            "username": "UnchartedSystems",
            "viewed": 108
        },
        "renderpass": [
            {
                "code": "float fractSplit(float x, float y, float t)\n{\n    return fract((x * (sin(t)*10.0)) * (y * (sin(t)*10.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{        \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    float t = iTime;\n    float t50 = (iTime + 150.0) / 50.0;\n    float t45 = (iTime + 100.0) / 45.0;\n    float t40 = (iTime + 50.0) / 40.0;\n\n    float mouseY = iMouse.y/iResolution.y;\n    float mouseX = iMouse.x/iResolution.x;\n\n    float r;\n    float g;\n    float b;\n\n    // Determine which quadrant of the screen we're in to determine fract orientation.\n    if (uv.x > 0.5 && uv.y > 0.5 )\n    {\n        r = fractSplit(1.0-uv.x, 1.0-uv.y, t50);\n        g = fractSplit(1.0-uv.x, 1.0-uv.y, t45);\n        b = fractSplit(1.0-uv.x, 1.0-uv.y, t40);\n    } else if (uv.x <= 0.5 && uv.y > 0.5 )\n    {\n        r = fractSplit(uv.x, 1.0-uv.y, t50);\n        g = fractSplit(uv.x, 1.0-uv.y, t45);\n        b = fractSplit(uv.x, 1.0-uv.y, t40);\n    } else if (uv.x > 0.5 && uv.y <= 0.5 )\n    {\n        r = fractSplit(1.0-uv.x, uv.y, t50);\n        g = fractSplit(1.0-uv.x, uv.y, t45);\n        b = fractSplit(1.0-uv.x, uv.y, t40);    \n    } else\n    {\n        r = fractSplit(uv.x, uv.y, t50);\n        g = fractSplit(uv.x, uv.y, t45);\n        b = fractSplit(uv.x, uv.y, t40);  \n    }\n        \n    fragColor = vec4(r, g, b, 1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}