{
    "Shader": {
        "info": {
            "date": "1580016019",
            "description": "accident while working on voronoi particle tracking",
            "flags": 32,
            "hasliked": 0,
            "id": "WtG3D3",
            "likes": 3,
            "name": "Voronoi Embers",
            "published": 3,
            "tags": [
                "voronoi",
                "abstract",
                "tracking",
                "particle"
            ],
            "usePreview": 0,
            "username": "aethelwhat",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 Q, in vec2 U)\n{\n    vec4 a = A(U);\n    \n    //Q = vec4(a.xy / R + .1, a.z, 1.);\n    \n    float red = smoothstep(0., 1.1, 1.0 - abs((a.x / R.x) -.5));\n\tQ = vec4(red, a.y / R.y, a.z, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// learned voronoi particle tracking from wyatt's ecosystem\nvoid swap (inout vec4 a, vec2 U, vec2 r) {\n    vec4 n = A(U+r);\n    if (length(U-n.xy)<length(U-a.xy)){\n      a = n;\n    }\n}\n\nvoid mainImage( out vec4 Q, in vec2 U)\n{\n    // FIND NEAREST PARTICLE\n    vec4 a = A(U);\n    swap(a,U,vec2(1,0));\n    swap(a,U,vec2(0,1));\n    swap(a,U,vec2(-1,0));\n    swap(a,U,vec2(0,-1));\n    swap(a,U,vec2(1,1));\n    swap(a,U,vec2(-1,-1));\n    swap(a,U,vec2(-1,1));\n    swap(a,U,vec2(1,-1));\n\n    Q = a;\n    Q.y -= 0.35;\n    \n    float randomX = iResolution.x * rand(iTime) * 3.; \n    // the *3. slows down the rate of adding particles (\"slices\") by sending 2/3 out of range\n    float halfY = iResolution.y/2.;\n    if (length(U-vec2(randomX, halfY))<length(U-a.xy)){\n      Q = vec4(randomX, halfY, 0., 1.);\n    }\n    \n    // Click to paint in color\n    if ((iMouse.z>0.&&length(iMouse.xy-U)<1.)) {\n        Q = vec4(U,pow(randomX,2.),1.);\n    }   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n * voronoi tracking of particles\n * a new particle is added randomly at the midway line, creating\n * a 'cutting' effect\n */\n\n//Common\n#define R iResolution.xy\n#define A(U) texture(iChannel0, (U)/R)\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}