{
    "Shader": {
        "info": {
            "date": "1454436108",
            "description": "Sierpinski triangle using tiny iterated function system. Nothing fancy, just the first thing that came to mind while learning about textures and buffers :)\n\nany ideas on how to make it smaller?",
            "flags": 32,
            "hasliked": 0,
            "id": "Xdy3DD",
            "likes": 3,
            "name": "Tiny IFS (Sierpinski)",
            "published": 3,
            "tags": [
                "triangle",
                "ifs",
                "sierpinski",
                "iterated"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 658
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 o, vec2 i )\n{\n\to = texture(iChannel0, i / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 834144373 takes over with 107 chars :D\n\nvoid mainImage( out vec4 o, vec2 i )\n{\n    i /= iResolution.xy;\n    o = i.x < i.y ? texture(iChannel0, fract(i + i)) * 2. : 1e-3 + o - o;\n}\n\n/* thanks, FabriceNeyret2 :)\nvoid mainImage( out vec4 o, vec2 i )\n{\n    i -= .5;             // move the corner to (0,0)\n    i /= iResolution.xy;\n    o -= o;\n    i == vec2(0)     // make the corner white\n        ? o++\n        : i.x + i.y < 1. // put buffer under the diagonal\n            ? o = texture(iChannel0, fract(i + i)) * 2.\n            : o;\n}\n\n\n\n/* my original version:\nvoid mainImage( out vec4 o, vec2 i )\n{\n    i -= .5;             // move the corner to (0,0)\n    i /= iResolution.xy;\n    o = i.x + i.y == 0.  // make the corner white\n        ? vec4(1)\n        : i.x + i.y < 1. // put buffer under the diagonal\n            ? texture(iChannel0, fract(i * 2.)) * 2.\n            : vec4(0);\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}