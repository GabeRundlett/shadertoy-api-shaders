{
    "Shader": {
        "info": {
            "date": "1563895298",
            "description": "This is a box club.The letter you press will be displayed on the stage, and you can press again to cancel it.\ne.g. Press A, then A will be displayed. After that  If you want to press B and show B, you'd better press A again to cancel A first.",
            "flags": 80,
            "hasliked": 0,
            "id": "ttfSRl",
            "likes": 1,
            "name": "BOX CLUB",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 1,
            "username": "SWS3005C125",
            "viewed": 585
        },
        "renderpass": [
            {
                "code": "//============================================================================\n// Constants.\n//============================================================================\nconst float PI = 3.14159265358;\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 10;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 4;\nconst int NUM_BOXS = 29;\n\n// Adjust the bounce frequence to fit the rhythm of backgroundmusic\nconst float time = -0.45;\nconst float freq = 3.45;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Control the Pattern and Color of box\nint modeNum;\n\n// the map of the box pattern\nint map[25];\nint map65[25] = int[](0,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,1); //A\n\nint map66[25] = int[](1,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,0); //B\n\nint map67[25] = int[](0,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  0,1,1,1,0); //C\n\nint map68[25] = int[](1,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,0); //D\n\nint map69[25] = int[](1,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,1,1,1,1); //E\n\nint map70[25] = int[](1,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,0,0,0,0); //F\n\nint map71[25] = int[](0,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,0,1,1,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  0,1,1,1,1); //G\n\nint map72[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1); //H\n\nint map73[25] = int[](1,1,1,1,1,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  1,1,1,1,1); //I\n\nint map74[25] = int[](1,1,1,1,1,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  1,0,1,0,0,\n\t\t\t\t\t  1,1,1,0,0); //J\n\nint map75[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  1,0,0,1,0,\n\t\t\t\t\t  1,1,1,0,0,\n\t\t\t\t\t  1,0,0,1,0,\n\t\t\t\t\t  1,0,0,0,1); //K\n\nint map76[25] = int[](0,1,0,0,0,\n\t\t\t\t\t  0,1,0,0,0,\n\t\t\t\t\t  0,1,0,0,0,\n\t\t\t\t\t  0,1,0,0,0,\n\t\t\t\t\t  0,1,1,1,1); //L\n\nint map77[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  1,1,0,1,1,\n\t\t\t\t\t  1,0,1,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1); //M\n\nint map78[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  1,1,0,0,1,\n\t\t\t\t\t  1,0,1,0,1,\n\t\t\t\t\t  1,0,0,1,1,\n\t\t\t\t\t  1,0,0,0,1); //N\n\nint map79[25] = int[](0,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  0,1,1,1,0); //O\n\nint map80[25] = int[](1,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,0,0,0,0); //P\n\nint map81[25] = int[](1,1,1,1,0,\n\t\t\t\t\t  1,0,0,1,0,\n\t\t\t\t\t  1,0,0,1,0,\n\t\t\t\t\t  1,1,1,1,0,\n\t\t\t\t\t  0,0,1,1,1); //Q\n\nint map82[25] = int[](1,1,1,1,0,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,0,\n\t\t\t\t\t  1,0,0,1,0,\n\t\t\t\t\t  1,0,0,0,1); //R\n\nint map83[25] = int[](1,1,1,1,1,\n\t\t\t\t\t  1,0,0,0,0,\n\t\t\t\t\t  1,1,1,1,1,\n\t\t\t\t\t  0,0,0,0,1,\n\t\t\t\t\t  1,1,1,1,1); //S\n\nint map84[25] = int[](1,1,1,1,1,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0); //T\n\nint map85[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  0,1,1,1,0); //U\n\nint map86[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  0,1,0,1,0,\n\t\t\t\t\t  0,0,1,0,0); //V\n\nint map87[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  1,0,0,0,1,\n\t\t\t\t\t  1,0,1,0,1,\n\t\t\t\t\t  1,1,0,1,1,\n\t\t\t\t\t  1,0,0,0,1); //W\n\nint map88[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  0,1,0,1,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,1,0,1,0,\n\t\t\t\t\t  1,0,0,0,1); //X\n\nint map89[25] = int[](1,0,0,0,1,\n\t\t\t\t\t  0,1,0,1,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,0,1,0,0); //Y\n\nint map90[25] = int[](1,1,1,1,1,\n\t\t\t\t\t  0,0,0,1,0,\n\t\t\t\t\t  0,0,1,0,0,\n\t\t\t\t\t  0,1,0,0,0,\n\t\t\t\t\t  1,1,1,1,1); //Z\n\nint map10[25] = int[](0,0,0,0,0,\n\t\t\t\t\t  0,1,0,1,0,\n\t\t\t\t\t  1,1,1,1,1,\n\t\t\t\t\t  0,1,1,1,0,\n\t\t\t\t\t  0,0,1,0,0);// Heart\n\nint map11[25] = int[](0,0,1,1,0,\n\t\t\t\t\t  0,0,1,0,1,\n\t\t\t\t\t  0,1,1,0,0,\n\t\t\t\t\t  1,1,1,0,0,\n\t\t\t\t\t  1,1,1,0,0);// Musical Note\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Box_t {\n\tvec3 rad;\n    vec3 center;\n\tint materialID;\n\tmat4 M;   // Transform Matrix\n\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n};\n \nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nBox_t Box[NUM_BOXS];\n\n\n\nvoid UpDate()\n{\n\t// Stage box\n\tfor (int i=0; i < 25; i++)\n\t{\n\t\tif (modeNum != 0)\n\t\t{\n\t\t\tif (map[i]==0) \n\t\t\t\tBox[i].rad = vec3(0.4 + abs(sin(freq * iTime-time))/10.0, 0.4+ abs(sin(freq * iTime-time))/10.0 ,0.4+ abs(sin(freq * iTime-time))/10.0);\n\t\t\telse \t\t\t\n\t\t\t\tBox[i].rad = vec3(0.4+ abs(sin(freq * iTime-time))/10.0, 0.4+ abs(sin(freq * iTime-time)),0.4+ abs(sin(freq * iTime-time))/10.0);\n\n\t\t\tif (Box[i].rad.y > 0.6) \n\t\t\t\tBox[i].materialID = modeNum;\n\t\t\telse \n\t\t\t\tBox[i].materialID = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tBox[i].rad = vec3(0.4+ abs(sin(freq * iTime-time))/10.0, 0.4+ abs(sin(freq * iTime-time+10.0*float(i/5)+ 10.0*float(i-(i/5)*5)))/2.0,0.4+ abs(sin(freq * iTime-time))/10.0);\n\t\t\tif (Box[i].rad.y > 0.6) \n\t\t\t\tBox[i].materialID = i/5+2;\n\t\t\telse \n\t\t\t\tBox[i].materialID = 1;\n\t\t}\n\t}\n\t// four Audio\n\tBox[25].rad = vec3(0.8+ abs(sin(freq * iTime-time))/10.0,1.2+ abs(sin(freq * iTime-time))/10.0,1.0+ abs(sin(freq * iTime-time))/10.0);\n\tSphere[0].radius = 0.8+ abs(sin(freq * iTime-time))/8.0;\n\tBox[26].rad = vec3(0.8+ abs(sin(freq * iTime-time))/10.0,1.2+ abs(sin(freq * iTime-time))/10.0,1.0+ abs(sin(freq * iTime-time))/10.0);\n\tSphere[1].radius = 0.8+ abs(sin(freq * iTime-time))/8.0;\n\tBox[27].rad = vec3(0.8+ abs(sin(freq * iTime-time))/10.0,1.2+ abs(sin(freq * iTime-time))/10.0,1.0+ abs(sin(freq * iTime-time))/10.0);\n\tSphere[2].radius = 0.8+ abs(sin(freq * iTime-time))/8.0;\n\tBox[28].rad = vec3(0.8+ abs(sin(freq * iTime-time))/10.0,1.2+ abs(sin(freq * iTime-time))/10.0,1.0+ abs(sin(freq * iTime-time))/10.0);\n\tSphere[3].radius = 0.8+ abs(sin(freq * iTime-time))/8.0;\n\n}\n\n\n\nvoid CheckKeyboard()\n{\n\t\tif (texelFetch( iChannel0, ivec2(65,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=6;\n\t\t\tmap = map65;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(66,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=2;\n\t\t\tmap = map66;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(67,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=3;\n\t\t\tmap = map67;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(68,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=4;\n\t\t\tmap = map68;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(69,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=5;\n\t\t\tmap = map69;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(70,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=6;\n\t\t\tmap = map70;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(71,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=2;\n\t\t\tmap = map71;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(72,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=3;\n\t\t\tmap = map72;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(73,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=4;\n\t\t\tmap = map73;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(74,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=5;\n\t\t\tmap = map74;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(75,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=6;\n\t\t\tmap = map75;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(76,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=2;\n\t\t\tmap = map76;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(77,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=3;\n\t\t\tmap = map77;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(78,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=4;\n\t\t\tmap = map78;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(79,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=5;\n\t\t\tmap = map79;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(80,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=6;\n\t\t\tmap = map80;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(81,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=2;\n\t\t\tmap = map81;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(82,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=3;\n\t\t\tmap = map82;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(83,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=4;\n\t\t\tmap = map83;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(84,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=5;\n\t\t\tmap = map84;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(85,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=6;\n\t\t\tmap = map85;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(86,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=2;\n\t\t\tmap = map86;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(87,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=3;\n\t\t\tmap = map87;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(88,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=4;\n\t\t\tmap = map88;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(89,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=5;\n\t\t\tmap = map89;\n\t\t\treturn;\n\t\t}\n\t\tif (texelFetch( iChannel0, ivec2(90,2), 0 ).x != 0.0) \n\t\t{\n\t\t\tmodeNum=6;\n\t\t\tmap = map90;\n\t\t\treturn;\n\t\t}\n\n\t\tif (mod(floor(iTime),45.0)<7.0)\n\t\t{\n\t\t\tmodeNum = 6;\n\t\t\tmap = map11;\n\t\t\treturn;\n\t\t}\n\t\tif ((mod(floor(iTime),45.0)>= 7.00)&&(mod(floor(iTime),45.0)<14.5))\n\t\t{\n\t\t\tmodeNum = 4;\n\t\t\tmap = map10;\n\t\t\treturn;\n\t\t}\n\t\tif (mod(floor(iTime),45.0)>=14.5)\n\t\t{\n\t\t\tmodeNum = 0;\n\t\t\treturn;\n\t\t}\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n   // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n\t// four walls\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 7.5;\n    Plane[1].materialID = 0;\n    \n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 7.5;\n    Plane[2].materialID = 0;\n    \n    Plane[3].A = -1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D =7.5;\n    Plane[3].materialID = 0;\n    \n    Plane[4].A = 0.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = -1.0;\n    Plane[4].D = 7.5;\n    Plane[4].materialID = 0;\n\n\t// stage box\n\tfor (int i=0; i< 5; i++)\n\t{\n\t\tfor (int j=0;j<5;j++)\n\t\t{\n\t\t\tBox[i*5+j].rad = vec3(0.4, 0.4 ,0.4);\n\t\t\tBox[i*5+j].center = vec3(-2.2 + float(j)* 1.1,0.5,-2.2+1.1 * float(i));\n\t\t\tBox[i*5+j].materialID = 1;\n\t\t\tBox[i*5+j].M =  mat4 (vec4(1,0,0,0),\n\t\t\t\t\tvec4(0,1,0,0),\n\t\t\t\t\tvec4(0,0,1,0),\n\t\t\t\t\tvec4(-Box[i*5+j].center,1));\n\t\t}\n\t}\n\t// four Audio\n\tBox[25].rad = vec3(0.8,1.2,1.0);\n\tBox[25].center = vec3(4.2,1.2,-4.2);\n\tBox[25].materialID = 7;\n\tBox[25].M = mat4 (vec4(cos(45.0 / 180.0 * PI ),0,sin(45.0 / 180.0 * PI ),0),vec4(0,1,0,0),vec4(-sin(45.0 / 180.0 * PI ),0,cos(45.0 / 180.0 * PI ),0),vec4(0,0,0,1))*mat4 (vec4(1,0,0,0),vec4(0,1,0,0),vec4(0,0,1,0),vec4(-Box[25].center,1));\n\n\tSphere[0].center = vec3( 3.9, 1.4, -3.9 );\n    Sphere[0].radius = 0.8;\n    Sphere[0].materialID = 8;\n\n\tBox[26].rad = vec3(0.8,1.2,1.0);\n\tBox[26].center = vec3(4.2,1.2,4.2);\n\tBox[26].materialID = 7;\n\tBox[26].M = mat4 (vec4(cos(135.0 / 180.0 * PI ),0,sin(135.0 / 180.0 * PI ),0),vec4(0,1,0,0),vec4(-sin(135.0 / 180.0 * PI ),0,cos(135.0 / 180.0 * PI ),0),vec4(0,0,0,1))*mat4 (vec4(1,0,0,0),vec4(0,1,0,0),vec4(0,0,1,0),vec4(-Box[26].center,1));\n\n\tSphere[1].center = vec3( 3.9, 1.4, 3.9 );\n    Sphere[1].radius = 0.8;\n    Sphere[1].materialID = 8;\n\n\tBox[27].rad = vec3(0.8,1.2,1.0);\n\tBox[27].center = vec3(-4.2,1.2,4.2);\n\tBox[27].materialID = 7;\n\tBox[27].M = mat4 (vec4(cos(225.0 / 180.0 * PI ),0,sin(225.0 / 180.0 * PI ),0),vec4(0,1,0,0),vec4(-sin(225.0 / 180.0 * PI ),0,cos(225.0 / 180.0 * PI ),0),vec4(0,0,0,1))*mat4 (vec4(1,0,0,0),vec4(0,1,0,0),vec4(0,0,1,0),vec4(-Box[27].center,1));\n\n\tSphere[2].center = vec3( -3.9, 1.4, 3.9 );\n    Sphere[2].radius = 0.8;\n    Sphere[2].materialID = 8;\n\n\tBox[28].rad = vec3(0.8,1.2,1.0);\n\tBox[28].center = vec3(-4.2,1.2,-4.2);\n\tBox[28].materialID = 7;\n\tBox[28].M = mat4 (vec4(cos(315.0 / 180.0 * PI ),0,sin(315.0 / 180.0 * PI ),0),vec4(0,1,0,0),vec4(-sin(315.0 / 180.0 * PI ),0,cos(315.0 / 180.0 * PI ),0),vec4(0,0,0,1))*mat4 (vec4(1,0,0,0),vec4(0,1,0,0),vec4(0,0,1,0),vec4(-Box[28].center,1));\n\n\tSphere[3].center = vec3( -3.9, 1.4, -3.9 );\n    Sphere[3].radius = 0.8;\n    Sphere[3].materialID = 8;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.9 * Material[0].k_d;\n    Material[0].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[0].k_rg = 0.2 * Material[0].k_r;\n    Material[0].n = 128.0;\n\n    // unlight box.\n    Material[1].k_d = vec3( 0.2, 0.2, 0.2 );\n    Material[1].k_a = 0.9 * Material[1].k_d;\n    Material[1].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[1].k_rg = 0.2 * Material[1].k_r;\n    Material[1].n = 128.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.9 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.2 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n\t// Blue plastic material.\n\tMaterial[3].k_d = vec3( 0.1, 0.3, 0.8 );\n    Material[3].k_a = 0.9 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.2 * Material[3].k_r;\n    Material[3].n = 128.0;\n\n\t// Red plastic material.\n\tMaterial[4].k_d = vec3( 0.8, 0.2, 0.1 );\n    Material[4].k_a = 0.9 * Material[4].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.2 * Material[4].k_r;\n    Material[4].n = 128.0;\n\n\t// Pink plastic material.\n    Material[5].k_d = vec3( 0.8, 0.2, 0.8 );\n    Material[5].k_a = 0.9 * Material[5].k_d;\n    Material[5].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[5].k_rg = 0.2 * Material[5].k_r;\n    Material[5].n = 128.0;\n    \n\t// Yellow plastic material.\n    Material[6].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[6].k_a = 0.9 * Material[6].k_d;\n    Material[6].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[6].k_rg = 0.2 * Material[6].k_r;\n    Material[6].n = 128.0;\n\n\t// Audio box\n\tMaterial[7].k_d = vec3( 0.1, 0.1, 0.1 );\n    Material[7].k_a = 0.9 * Material[6].k_d;\n    Material[7].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[7].k_rg = 0.2 * Material[6].k_r;\n    Material[7].n = 128.0;\n\n\t// Audio ball\n\tMaterial[8].k_d = vec3( 0.75, 0.75, 0.75 );\n    Material[8].k_a = 0.9 * Material[6].k_d;\n    Material[8].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[8].k_rg = 0.2 * Material[6].k_r;\n    Material[8].n = 128.0;\n\n\t// Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n       \n\t// change the light color by time\n    if(iTime<4.0){\n        Light[0].I_source = vec3( 0.2, 0.2*abs(sin(iTime)), 0.2 );\n        Light[1].I_source = vec3( 0.0, 0.2*abs(sin(iTime)), 0.2 );\n    }\n    if(iTime>=4.0){\n\t\tLight[0].I_source = vec3( 0.8*abs(sin(0.2*iTime)), 0.8*abs(cos(0.2*iTime)), 0.8*abs(sin(1.2*iTime)) );\n        Light[1].I_source = vec3( 0.5*abs(sin(0.4*iTime)), 0.5*abs(cos(0.1*iTime)), 0.5*abs(sin(1.4*iTime)) );\n    }\n \n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\tmat4 M =  mat4 (vec4(1,0,0,0),\n\t\t\t\t\tvec4(0,1,0,0),\n\t\t\t\t\tvec4(0,0,1,0),\n\t\t\t\t\tvec4(-sph.center,1));\n\tvec3 sco = (M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(M))*vec4(ray.d,1.0)).xyz);\n\tfloat b = dot(scd, sco);\n\tfloat c = dot(sco, sco) - sph.radius * sph.radius;\n\tfloat d = b * b - c;\n\tfloat t0;\n\tif (d >= 0.0) t0 = -b - sqrt(d);\n\n    if ( t0 < tmin || t0 > tmax ) return false;\n\tt = t0;\n\thitPos = (inverse(M) * vec4((sco + t0 * scd),1.0)).xyz;\n\thitNormal = normalize(hitPos - sph.center);\n    return true;\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\t\n\tmat4 M =  mat4 (vec4(1,0,0,0),\n\t\t\t\t\tvec4(0,1,0,0),\n\t\t\t\t\tvec4(0,0,1,0),\n\t\t\t\t\tvec4(-sph.center,1));\n\tvec3 sco = (M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(M))*vec4(ray.d,1.0)).xyz);\n\tfloat b = dot(scd, sco);\n\tfloat c = dot(sco, sco) - sph.radius * sph.radius;\n\tfloat d = b * b - c;\n\tfloat t0;\n\tif (d >= 0.0) t0 = -b - sqrt(d);\n\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;  \n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax, out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n\tvec3 sco = (box.M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(box.M))*vec4(ray.d,1.0)).xyz);\n    vec3 m = 1.0/scd;\n    vec3 n = m * sco;\n    vec3 k = abs(m) * box.rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n    float tN = max( max( t1.y, t1.z ), t1.x );\n    float tF = min( min( t2.y, t2.z ), t2.x );\n\t\n    if( tN>tF || tF<0.0) return false;\n\tif ( tN < tmin || tN > tmax ) return false;\n\tt = tN;\n\thitPos = (inverse(box.M) * vec4((sco + t * scd),1.0)).xyz;\n\thitNormal = (transpose(inverse(box.M)) * vec4((-sign(ray.d)*step(t1.zxy,t1.xyz)*step(t1.yzx,t1.xyz)),1.0)).xyz;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax )\n{\n\n\tvec3 sco = (box.M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(box.M))*vec4(ray.d,1.0)).xyz);\n    vec3 m = 1.0/scd;\n    vec3 n = m * sco;\n    vec3 k = abs(m) * box.rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max( max( t1.y, t1.z ), t1.x );\n    float tF = min( min( t2.y, t2.z ), t2.x );\n\t\n    if( tN>tF || tF<0.0) return false;\n\tif ( tN < tmin || tN > tmax ) return false;\n    return true;\n}\n\n\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // * Try interesecting input ray with all the planes, spheres and box\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n\tfor ( int j = 0; j < NUM_BOXS; j++ )\n\t{\n\t\tif (IntersectBox(Box[j], ray, DEFAULT_TMIN, DEFAULT_TMAX))\n\t\t{\n\t\t\tIntersectBox(Box[j], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\t\t\tif (temp_t < nearest_t)\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\tnearest_hitMatID = Box[j].materialID;\n\t\t\t\thasHitSomething = true;\n\t\t\t}\n\t\t}\n\t}\n    for ( int j = 0; j < NUM_SPHERES; j++ )\n\t{\n\t\tif (IntersectSphere(Sphere[j], ray, DEFAULT_TMIN, DEFAULT_TMAX))\n\t\t{\n\t\t\tIntersectSphere(Sphere[j], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\t\t\tif (temp_t < nearest_t)\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\tnearest_hitMatID = Sphere[j].materialID;\n\t\t\t\thasHitSomething = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor ( int j = 0; j < NUM_PLANES; j++ )\n\t{\n\t\tif (IntersectPlane(Plane[j], ray, DEFAULT_TMIN, DEFAULT_TMAX))\n\t\t{\n\t\t\tIntersectPlane(Plane[j], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\t\t\tif (temp_t < nearest_t)\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\tnearest_hitMatID = Plane[j].materialID;\n\t\t\t\thasHitSomething = true;\n\t\t\t}\n\t\t}\n\t}\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres and boxes) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n\tfor ( int j = 0; j < NUM_LIGHTS; j++ )\n\t{\n\t\tvec3 L = normalize(Light[j].position - nearest_hitPos);\n\t\tvec3 N = nearest_hitNormal;\n\t\tvec3 V = -ray.d;\n\t\tbool inShadow = false;\n\n\t\tRay_t ShadowRay;\n\t\tShadowRay.o = nearest_hitPos;\n\t\tShadowRay.d = L;\n\n\t\tfor ( int i = 0; i < NUM_BOXS; i++ )\n\t\t{\n\t\t\tif (IntersectBox(Box[i], ShadowRay,  DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal))\n                if (dot(temp_hitPos-Light[j].position,ShadowRay.d) <=0.0 )\n\t\t\t\t\tinShadow = true;\n\t\t}\n\t\tfor ( int i = 0; i < NUM_PLANES; i++ )\n\t\t{\n\t\t\tif (IntersectPlane(Plane[i], ShadowRay, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal))\n\t\t\t\tif (dot(temp_hitPos-Light[j].position,ShadowRay.d) <=0.0 )\n\t\t\t\t\tinShadow = true;\n\t\t}\n\t\tfor ( int i = 0; i < NUM_SPHERES; i++ )\n\t\t{\n\t\t\tif (IntersectSphere(Sphere[i], ShadowRay, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal))\n\t\t\t\tif (dot(temp_hitPos-Light[j].position,ShadowRay.d) <=0.0 )\n\t\t\t\t\tinShadow = true;\n\t\t}\n\n\t\tI_local += PhongLighting(L, N, V, inShadow, Material[nearest_hitMatID], Light[j]);\n\t}\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CheckKeyboard();\n    InitScene();\n\tUpDate();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera/\n    vec3 cam_pos = vec3( 0.0+7.0* sin(iTime/7.0)* cos(iTime/3.0), 6.5+sin(iTime/4.0), 0.0+7.0* cos(iTime/2.0) );\n    vec3 cam_lookat = vec3( 0.0, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 19129,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "http://m.soundcloud.com/hinkik/outbreaker"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}