{
    "Shader": {
        "info": {
            "date": "1549669106",
            "description": "Press SPACE to recenter",
            "flags": 48,
            "hasliked": 0,
            "id": "wsB3Rt",
            "likes": 42,
            "name": "focused microorganisms",
            "published": 3,
            "tags": [
                "circles",
                "random",
                "particles",
                "bubbles",
                "brownian",
                "polar",
                "bio"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 3465
        },
        "renderpass": [
            {
                "code": "// Fork of \"focused random bubbles\" by morisil. https://shadertoy.com/view/Wdj3WR\n// 2019-02-08 23:31:55\n\nvoid mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord\n) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int PARTICLE_COUNT = 50;\n\nconst float PARTICLE_SIZE = .01;\n\nconst float MAX_VELOCITY = 0.002;\n\nconst float MAX_VELOCITY_CHANGE = 0.0003;\n\nconst float FOCAL_POINT_TENDENCY = .00005;\n\nconst float PI = 3.1415926535897932384626433832795;\n\nconst int POSITION_ROW = 0;\n\nconst int VELOCITY_ROW = 1;\n\nconst int COLOR_ROW = 2;\n\nconst int LAST_ROW = COLOR_ROW;\n\nconst vec4 COLOR_ZERO = vec4(0);\n\nconst vec2 VEC2_ZERO = vec2(0);\n\nconst vec2 HORIZONTAL_REVERSE = vec2(-1., 1.);\n\nconst vec2 VERTICAL_REVERSE = vec2(1., -1.);\n\n\nfloat randImpl(const vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\n#define tex(ch, x, y) texelFetch(ch, ivec2(x, y), 0)\n\n#define rand(seed) randImpl(seed + mod(iTime, PI)) \n\n#define getParticleRawColor(row, index) tex(iChannel0, index, row) \n\n#define getParticleVector(row, index) getParticleRawColor(row, index)\n\n#define getParticlePosition(index) getParticleVector(POSITION_ROW, index)\n\n#define getParticleVelocity(index) getParticleVector(VELOCITY_ROW, index)\n\n#define getParticleColor(index) getParticleRawColor(COLOR_ROW, index)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// true if the space is pressed\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvec4 getInitialState(\n    const int row,\n    const int particle, // not used here, but might be useful for other shaders\n    vec2 seed\n) {\n    vec4 state;\n    if (row == POSITION_ROW) {\n        state = vec4(0);        \n    } else if (row == VELOCITY_ROW) {\n        state = vec4(0);\n    } else if (row == COLOR_ROW) {\n        state = vec4(\n            rand(seed + .101),\n            rand(seed + .102),\n            rand(seed + .103),\n            1.\n        );\n    } else {\n        state = COLOR_ZERO;\n    }\n    return state;\n}\n\nvec4 calculateNewState(\n    const int row,\n    const int particle,\n    const vec2 seed\n) {\n    vec4 state;\n    if (row == POSITION_ROW) {\n        vec2 position = getParticlePosition(particle).xy\n            + getParticleVelocity(particle).xy;\n        state = vec4(position.x, position.y, 0.0, 0.0);\n    } else if (row == VELOCITY_ROW) {\n        vec2 velocity = getParticleVelocity(particle).xy;\n        vec2 coord  = getParticlePosition(particle).xy;\n        velocity += vec2(\n            rand(seed + .111) * MAX_VELOCITY_CHANGE * 2. - MAX_VELOCITY_CHANGE,\n            rand(seed + .112) * MAX_VELOCITY_CHANGE * 2. - MAX_VELOCITY_CHANGE\n        );\n        vec2 focalPoint = coord; // might be different for other shaders, e.g. mouse\n        velocity -= focalPoint * FOCAL_POINT_TENDENCY;\n        // TODO is there a better way to clamp the vector?\n\t\tvelocity = vec2(\n            clamp(velocity.x, -MAX_VELOCITY, MAX_VELOCITY),\n            clamp(velocity.y, -MAX_VELOCITY, MAX_VELOCITY)\n        );\n        vec2 prediction = coord + velocity;\n        if ((prediction.x < -.5) || (prediction.x > .5)) {\n            velocity *= HORIZONTAL_REVERSE;\n        }\n        if ((prediction.y < -.5) || (prediction.y > .5)) {\n            velocity *= VERTICAL_REVERSE;\n        }\n        state = vec4(velocity.x, velocity.y, 0.0, 0.0);\n    } else if (row == COLOR_ROW) {\n        state = getParticleColor(particle); // will copy over\n    } else { // should never happen\n        state = COLOR_ZERO;\n    }\n    return state;\n}        \n\nvec4 getEncodedState(\n    const int row,\n    const int particle,\n    const vec2 seed\n) {        \n    vec4 state;    \n    if ((iFrame == 0) || reset()) {\n        state = getInitialState(row, particle, seed);\n    } else {\n        state = calculateNewState(row, particle, seed);\n    }\n    return state;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int particle = int(fragCoord.x);\n    int row = int(fragCoord.y);    \n    if ((row <= LAST_ROW) && (particle < PARTICLE_COUNT)) {\n    \tfragColor = getEncodedState(row, particle, fragCoord);        \n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PARTICLE_EDGE_SMOOTHING = .003;\n\nconst float WALL_THINNESS = 10.;\n\nvec3 getColor(\n    float dist,\n    const float angle,\n    const float size\n) { \n\treturn vec3(\n        pow(dist / size, WALL_THINNESS)\n        * smoothstep(size, size - PARTICLE_EDGE_SMOOTHING, dist)        \n    );\n}\n\nvoid mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord\n) {\n    vec2 pixel = (fragCoord - (iResolution.xy / 2.)) / iResolution.y;\n    vec3 mixedColor = texture(iChannel1, fragCoord / iResolution.xy + pixel * 0.0005).rgb;\n    mixedColor *= 0.997;\n    for (int i = 0; i < PARTICLE_COUNT; i++) {\n        vec2 particle = getParticlePosition(i).xy;\n  \t\tfloat dist = distance(particle, pixel);\n        if (dist <= PARTICLE_SIZE) { \n            vec2 delta = particle - pixel;\n            float angle = atan(delta.x, delta.y);\n\t\t\tmixedColor +=\n                getColor(dist, angle, PARTICLE_SIZE) * vec3(.5, .5, 1.);\n        }\n    }\n    fragColor = vec4(mixedColor, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}