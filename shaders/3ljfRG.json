{
    "Shader": {
        "info": {
            "date": "1599227460",
            "description": "Oversample at NxN only the pixels that are ambiguous (blue/red: not oversampled).  \nWorks for anything, in 2D or 3D.\nCommon: function or image or render to be sampled\nBufA: compute at pixel resolution\nImage: oversample NxN only in ambiguous neighborhoods",
            "flags": 32,
            "hasliked": 0,
            "id": "3ljfRG",
            "likes": 19,
            "name": "easy adaptive sampling",
            "published": 3,
            "tags": [
                "antialiasing",
                "sampling",
                "optimization",
                "adaptive"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 846
        },
        "renderpass": [
            {
                "code": "#define DEMO 1   // 1: demo mode: binary function.  0: continuous function.\n#define N 3      // pixel oversampling NxN ( only where necessary )\n#define eps 1e-2 // similarity threshold, is case of continuous mask\n\n//#define T(U,l)   texelFetch(iChannel0, ivec2(U)>>l, l)\n  #define T(U,l)   textureLod(iChannel0, (U)/R, float(l-1) )\n\n\nvoid mainImage(out vec4 O, vec2 U) {\n    O -= O;\n    float n = float(N),\n          m = T( U, 2 ).w;          // check neighborhood. Here: LOD #2 of mask\n\n#if DEMO    // --- f= binary function ( col = mask = binary )\n    \n // if ( m !=0. && m!= 1.) {        // neighborhood does not agree\n    if ( abs(m-T(U,0).w) > eps ) {  // why ? otherwise, inside don't work in fullscreen\n // if ( true ) {                   // for bench: always oversample\n        for (int k=0; k<N*N; k++) { // --- oversampling\n            vec2 D = ( vec2(k%N,k/N) - float(N-1)/2. ) / n; // subpixel\n            O += f( U +  D ).w;\n        }\n        O /= n*n;\n    }\n    else                            // LOD#0 is ok\n        O = T( U, 0 ).w == 1. ? vec4(1,0,0,1) : vec4(0,0,1,1);\n\n#else       // --- f = continous color function ( i.e., image )\n    \n    if ( m !=0. && m!= 1.) {        // neighborhood does not agree (with binary mask)\n  // if ( abs(m-T(U,0).w) > eps ) { // with continuous mask\n        for (int k=0; k<N*N; k++) { // --- oversampling\n            vec2 D = ( vec2(k%N,k/N) - float(N-1)/2. ) / n; // subpixel\n            O += f( U +  D );\n        }\n        O /= n*n;\n    }\n    else                            // LOD#0 is ok\n        O = T( U, 0 ), \n            O.gb -= .3*float(O.w>=1.-eps), O.rg -= .3*float(O.w<=eps);\n#endif\n        \n    O = pow( O, vec4(1./2.2) );     // to sRGB\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- custom function or image or render\n\n#define R  iResolution.xy\n\n// f() should be a function, but fucking Common does not work like #include as anybody would like it to.\n// Here, it's the use of iTime and iResolution that uselessly screw things up for no good reason. \nfloat x,y,v,t;\n#define f(U) (                                           \\\n    x = (U).x / R.y, y = (U).y / R.y, t = iTime,         \\\n    v =   sin(  9.*x + sin(40.*y) -t )                   \\\n        * cos( 14.*y + cos(17.*x) +t ),                  \\\n    vec4( vec3(.5-.5*v),  /* V.rgb = color */            \\\n          step( v , -.5 ) /* V.a = mask. Here, binary */ \\\n        )                                                \\\n)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- evaluate the function everywhere at pixel resolution\n\nvoid mainImage(out vec4 O, vec2 U) {\n    O = f(U);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}