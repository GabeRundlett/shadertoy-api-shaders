{
    "Shader": {
        "info": {
            "date": "1655815907",
            "description": "retro loading screen, with scrolling text and 3D background",
            "flags": 0,
            "hasliked": 0,
            "id": "ssGcWd",
            "likes": 5,
            "name": "Retro loading screen",
            "published": 3,
            "tags": [
                "oldschool",
                "retro",
                "loadingscreen",
                "blockytext"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "vec2 uv;\nvec3 col = vec3(0);\nvec3 fill = vec3(0);\nfloat width = 0.01;\nvec3 color = vec3(0);\nfloat cx = 0.0;\nfloat cy = 0.0;\nfloat cs = 0.0;\n\n#define _ST(x, y, s) cx = x; cy = y; cs = s;\n#define _ADV cx += cs * (3.0 / 5.0) * 1.1;\n#define _LET(let) let(cx, cy, cs); _ADV\n#define _A _LET(A)\n#define _B _LET(B)\n#define _C _LET(C)\n#define _D _LET(D)\n#define _E _LET(E)\n#define _F _LET(F)\n#define _G _LET(G)\n#define _H _LET(H)\n#define _I _LET(I)\n#define _J _LET(J)\n#define _K _LET(K)\n#define _L _LET(L)\n#define _M _LET(M)\n#define _N _LET(N)\n#define _O _LET(O)\n#define _P _LET(P)\n#define _Q _LET(Q)\n#define _R _LET(R)\n#define _S _LET(S)\n#define _T _LET(T)\n#define _U _LET(U)\n#define _V _LET(V)\n#define _W _LET(W)\n#define _X _LET(X)\n#define _Y _LET(Y)\n#define _Z _LET(Z)\n#define _0 _LET(zero)\n#define _1 _LET(one)\n#define _2 _LET(two)\n#define _3 _LET(three)\n#define _4 _LET(four)\n#define _5 _LET(five)\n#define _6 _LET(six)\n#define _7 _LET(seven)\n#define _8 _LET(eight)\n#define _9 _LET(nine)\n#define _SP _ADV\n\nvoid rect(float x, float y, float w, float h)\n{\n    if(uv.x >= x && uv.x <= x + w && uv.y >= y && uv.y <= y + h)\n        if(!(uv.x >= x + width && uv.x <= x + w - width && uv.y >= y + width && uv.y <= y + h - width))\n            color = col;\n        else\n            color = fill;\n}\n\nvoid A(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n}\n\nvoid B(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n}\n\nvoid C(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n}\n\nvoid D(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n}\n\nvoid E(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n}\n\nvoid F(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid G(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n}\n\nvoid H(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid I(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 1.0, y + d * 1.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n}\n\n\nvoid J(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n}\n\nvoid K(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid L(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n}\n\nvoid M(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n}\n\nvoid N(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n}\n\nvoid O(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n}\n\nvoid P(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n}\n\nvoid Q(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n}\n\nvoid R(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid S(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid T(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 1.0, y + d * 1.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid U(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid V(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid W(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid X(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid Y(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid Z(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n}\n\nvoid zero(float x, float y, float s)\n{\n     float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n}\n\nvoid one(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 1.0, y + d * 1.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n}\n\nvoid two(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n}\n\nvoid three(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n}\n\nvoid four(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n}\n\nvoid five(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n}\n\nvoid six(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n}\n\nvoid seven(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n}\n\nvoid eight(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 0.0, y + d * 1.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n}\n\nvoid nine(float x, float y, float s)\n{\n    float size = 5.0;\n    float w = s / size;\n    float d = w - width;\n    rect(x + d * 0.0, y + d * 0.0, w, w);\n    rect(x + d * 1.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 0.0, w, w);\n    rect(x + d * 2.0, y + d * 1.0, w, w);\n    rect(x + d * 0.0, y + d * 2.0, w, w);\n    rect(x + d * 1.0, y + d * 2.0, w, w);\n    rect(x + d * 2.0, y + d * 2.0, w, w);\n    rect(x + d * 0.0, y + d * 3.0, w, w);\n    rect(x + d * 0.0, y + d * 4.0, w, w);\n    rect(x + d * 1.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 4.0, w, w);\n    rect(x + d * 2.0, y + d * 3.0, w, w);\n}\n\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define COLOR1 vec3(0.9, 0.9, 0.9)\n#define COLOR2 vec3(0.03, 0.03, 0.03)\n#define LIGHTCOLOR  vec3(0.94, 0.95, 1.)\n\n#define ARMS 10.\n#define DENSITY 2.\n#define ANGLE_SPEED 2.\n#define ANGLE_TEMPO 3.\n#define SPEED 2.\n#define SMOOTH 0.02\n\nfloat smoothstepCheckerboard(in vec2 uv) \n{\n    uv = fract(uv + 0.25);\n    float sm2 = SMOOTH * 0.5;\n    vec2 p01 =\n        smoothstep(0.25 - sm2, 0.25 + sm2, uv) -\n        smoothstep(0.75 - sm2, 0.75 + sm2, uv);\n    vec2 pn11 = (p01 - 0.5) * 2.;\n    return 0.5 - 0.5 * pn11.x * pn11.y;\n}\n\nvoid checkerboardTunnel()\n{\n    float a = atan(uv.x, uv.y);\n    float r = length(uv);\n    float w = a - sin(1. / r) * r * ANGLE_SPEED * sin((iTime - 1./r) / ANGLE_TEMPO);\n    vec2 polar = vec2(w * ARMS / PI2, 1. / r * DENSITY + iTime * SPEED );\n    vec3 checker = mix(COLOR1, COLOR2,smoothstepCheckerboard(polar));\n    float light = smoothstep(0.7, 0.2, r);\n    color = mix(checker, LIGHTCOLOR, light);\n    color = pow(color, vec3(1./2.2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    uv = vec2(ivec2(uv * iResolution.xy * 0.15)) / (iResolution.xy * 0.15);\n    checkerboardTunnel();\n    uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    col = color * 0.4;\n    fill = mix(color, vec3(1.0, uv.yx),  0.9);\n    width = 0.0125;\n    _ST(-1.0, 0.1 + sin(iTime * 4.0) * 0.03, 0.75)_B _T _C _R\n    \n    float a = iResolution.x/iResolution.y;\n    fill = color * 0.2;\n    width = 0.03;\n    rect(-a * 2.0, -0.8, a * 4.0, 0.35);\n    \n    col = vec3(0);\n    fill = vec3(1);\n    fill = vec3(sin(iTime * 3.0) * 0.5 + 1.2, sin(-iTime * 3.0) * 0.5 + 1.2, cos(iTime * 3.0) * 0.5 + 1.2); //Colorful play text\n    width = 0.0;\n    \n    _ST(a - mod(iTime, a * 2.5), -0.7, 0.15)\n    _P _L _A _Y\n    \n    \n    color = color * (1.0 - pow(length(uv), 3.0) * 0.1);\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}