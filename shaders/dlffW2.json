{
    "Shader": {
        "info": {
            "date": "1693452066",
            "description": "It's a cool thing, you dolt!",
            "flags": 0,
            "hasliked": 0,
            "id": "dlffW2",
            "likes": 0,
            "name": "eindacor_cool_thing",
            "published": 3,
            "tags": [
                "cool"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 23
        },
        "renderpass": [
            {
                "code": "#define AA .002f\n#define TWOPI 6.28318530718f\n\n// from here: https://discord.com/channels/318590007881236480/350444715142938625/1146550299474001960\nfloat de ( vec3 p ) {\n    float s = 3.0f, e;\n    for ( int i = 0; i++ < 8; ) {\n      p = mod( p - 1.0f, 2.0f ) - 1.0f;\n      s *= e = 1.4f / dot( p, p );\n      p *= e;\n    }\n    return length( p.yz ) / s;\n}\n\nfloat getOffsetAngle(vec2 first, vec2 second) {\n    vec2 offsetVec = second - first;\n    float angle = atan(offsetVec.y / offsetVec.x);\n    \n    if (first.x < second.x) {\n        angle = TWOPI / 2.f + angle;\n    } else if (first.y > second.y) {\n        angle = TWOPI + angle;\n    }\n    \n    return angle;\n}\n\nvec3 rotateVec3(vec3 v, float angleX, float angleY, float angleZ) {\n    mat3 rotationX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(angleX), -sin(angleX),\n        0.0, sin(angleX), cos(angleX)\n    );\n\n    mat3 rotationY = mat3(\n        cos(angleY), 0.0, sin(angleY),\n        0.0, 1.0, 0.0,\n        -sin(angleY), 0.0, cos(angleY)\n    );\n\n    mat3 rotationZ = mat3(\n        cos(angleZ), -sin(angleZ), 0.0,\n        sin(angleZ), cos(angleZ), 0.0,\n        0.0, 0.0, 1.0\n    );\n\n    return rotationZ * rotationY * rotationX * v;\n}\n\nfloat getRadialVal(vec2 center, vec2 p) {\n    float offsetAngle = getOffsetAngle(center, p);\n    offsetAngle = mod(TWOPI - offsetAngle + 3.f * TWOPI / 6.f, TWOPI);\n    return offsetAngle / TWOPI;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x += ((.5 / aspectRatio) - .5);\n    uv.x *= aspectRatio;\n    \n    float scale = 3.;\n    uv *= scale;\n    \n    vec3 pos = vec3(uv.x, uv.y, sin(iTime * .02));\n    pos = rotateVec3(pos, .0, iTime * .025, 0.);\n    \n    float deVal = pow(de(pos), 2.);\n    \n    float resultCoeff = .1;\n    \n    float rVal = 1. - pow(deVal, resultCoeff);\n    float gVal = deVal;\n    \n    float rOut = pow(mix(rVal, gVal, (1. + sin(iTime * .25)) / 2.), 2.5);\n    float gOut = pow(mix(gVal, rVal, (1. + sin(iTime * .25))), 2.);\n    float bOut = pow((1. + sin(iTime * .5)) / 2., .5);\n    \n    vec3 colorOut = vec3(mix(.5, 1., rOut), mix(.35, .95, gOut), mix(0.2, .8, bOut));\n    \n    fragColor = vec4(colorOut, 1.);\n    \n    return;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}