{
    "Shader": {
        "info": {
            "date": "1652117181",
            "description": "very messy, playing about with random stuff",
            "flags": 32,
            "hasliked": 0,
            "id": "NljfDz",
            "likes": 5,
            "name": "ray sample test thing",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0. * iResolution.xy) / iResolution.xy;\n\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord.xy), 0).rgb;\n\n    float of = 2.;// + 3. * cos(length(col) * 0. + uv.x * 2. + iTime);\n   // of = mix(2., of, 0.5 + 0.5 * thc(4., iTime));\n\n    vec3 t = texelFetch(iChannel0, ivec2(fragCoord - vec2(0,of)), 0).rgb;\n    vec3 b = texelFetch(iChannel0, ivec2(fragCoord + vec2(0,of)), 0).rgb;\n    vec3 l = texelFetch(iChannel0, ivec2(fragCoord - vec2(of,0)), 0).rgb;\n    vec3 r = texelFetch(iChannel0, ivec2(fragCoord + vec2(of,0)), 0).rgb;\n\n    float k = 2.;\n    vec3 col2 = abs((1.-smoothstep(-k, k, -(abs(l-r) + abs(t-b)) + vec3(0.5))));\n    \n    float k2 = 1.5 / iResolution.x;\n    col = mix(col, col2, smoothstep(-k2, k2, -uv.x + 0.5));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define DIST_SCALE 0.9\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float r = 3.;\n    float t = 0.15 * iTime;\n    vec3 ro = vec3(r * cos(t), 0, r * sin(t));\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n    p.xz += vec2(0.02,0.3) * iTime;\n    \n    float sc = 0.8;\n    vec3 ip = floor(sc * p) + 0.5;\n    vec3 fp = sc * p - ip;   \n\n    float h1 = h21(ip.xz);\n    float h2 = h21(ip.yz);\n       \n    fp.xy *= Rot(0.25 * iTime + 2. * pi * h1);\n    fp.yz *= Rot(0.25 * iTime + 2. * pi * h2);\n    float r1 = 0.35 * h2;\n    float r2 = max(0.02, 0.3 - r1);\n    float d1 = length(fp.xz)-r1;\n    float d2 = length(vec2(d1,fp.y))-r2;\n\n    return DIST_SCALE * d2;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetSample(vec3 p) {\n\tfloat d = GetDist(p);\n    vec3 n = GetNormal(p);\n    \n    float s = 0.;\n    vec2 e = vec2(0.5,0);\n\n    float sc = 0.5;\n    float a = n.x, b = n.y, c = n.z;\n    s += GetDist(p - sc * n.xyz);\n    s += GetDist(p + sc * n.xyz);\n\n    s *= 0.5 / DIST_SCALE;\n   \n   float k = 0.5;\n   // s = smoothstep(-k,k,s);\n    \n    return s - d;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    vec3 p = ro + rd * d;\n    if(d<MAX_DIST) {\n        \n        d += mix(4., GetSample(p), 0.5 + 0.5 * thc(400000., 10. * p.y - 0.5 * iTime));\n        vec3 q = ro + rd * d;\n        vec3 n = GetNormal(q);\n        vec3 r = reflect(rd, n);    \n\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        //col *= 0.5 + 0.5 * n;\n        vec3 e = vec3(0.5);\n        vec3 col2 = pal(d * 0.5 + 0.25 * p.y + 0.15 * iTime, e, e, e, vec3(0,1,2)/3.);\n        col *= col2;\n        \n        float fres = 0.5 * exp(abs(dot(rd,n)));//pow(1. + dot(rd, n), 5.);\n        col = mix(col, col2, fres);\n\n    }\n    \n    float mx = clamp(exp(4.-1. * length(p)),0.,1.);\n    col = mix(vec3(1.,0.75,0.5), col, mx);\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}