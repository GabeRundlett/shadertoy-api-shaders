{
    "Shader": {
        "info": {
            "date": "1708639826",
            "description": "just a practice. You can use this as a VJ clip by replacing the center logo with DJ / artist name",
            "flags": 0,
            "hasliked": 0,
            "id": "MX23Dw",
            "likes": 9,
            "name": "amagi: going down",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "amagitakayosi",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "mat2 rot(float t) {\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q, 0.0)) + min(max(q.x,max(q.y,q.z)), 0.0);\n}\n\n\nfloat sdGrid(vec3 p, vec2 size, float width) {\n    vec2 xy = mod(p.xy, size) - size * .5;\n    vec2 dxy = abs(xy);        \n    return length(vec2(min(dxy.x, dxy.y), p.z)) - width;\n}\n\nvec2 map(vec3 p) {    \n    vec3 p1 = p;    \n    p1.yz *= rot(0.33);\n    p1.y -= 2.;\n    p1.x = abs(p1.x);            \n    p1.xy *= rot(3.141593 / 4.);\n    p1.z -= iTime * 1.8;\n    float d1 = sdGrid(p1.xzy, vec2(1, 2), 0.03);   \n\n\n    vec3 p2 = p;\n    p2.yz *= rot(-0.08);\n    p2.x *= 0.9;    \n    p2.y += .7;\n    p2.x = abs(p2.x);            \n    p2.xy *= rot(3.141593 / 4.);\n    p2.z += iTime * 1.5;\n    float d2 = sdGrid(p2.xzy + vec3(0, 0, 0), vec2(2, 3), 0.03);   \n    float d = min(d1, d2);\n    \n    return vec2(d, 0);\n}\n\nfloat drawFrame(vec2 p, vec2 size, float width) {\n     return smoothstep(width + 0.001, width, abs(sdBox(p.xyy, vec3(size, 1.))));\n}\n\nfloat drawFrames(vec2 p) {\n    float c = 0.0;\n    \n    float a = atan(p.y, p.x);\n        \n    c += drawFrame(p, vec2(1.7, 0.93), 0.001)\n    * smoothstep(-0.3, -0.29, sin(a * 7. + iTime) +sin(a * 11. - iTime * 2.));    \n\n    c += drawFrame(p, vec2(1.665, 0.9), 0.001)\n    * smoothstep(-0.3, -0.29, sin(a * 5. - iTime * 0.7) +sin(a * 13. + iTime * 1.7));    \n\n    return c;\n}\n\nfloat drawTri(vec2 p, float w) {\n    float d = 1.;\n    \n    d *= smoothstep(0., w, p.x + .5);\n    d *= smoothstep(0., w, p.y + .5);\n    d *= smoothstep(0., w, -(p.x + p.y));\n\n    return clamp(d, 0., 1.);\n}\n\n#define wave(x, off) (smoothstep(off, off + 1.0, mod(x, 3.)) + floor(x / 3.))\n\n\nfloat drawChar(float t, vec2 p) {\n    float d = 999.;\n    \n    float num = floor(t * 3.);\n    p *= rot(3.141593 * .5 * mod(num,4.));    \n    d = drawTri(p, 0.002) - drawTri(p * 1.06 + 0.01, 0.002) * 2.;\n\n    float n = sin(t * 2.) * sin(t * 7.);\n    if (n < .4) {    \n        num = floor(t * 7.);        \n        p *= rot(3.141593 * .5 * mod(num, 4.));    \n        d += drawTri(p, 0.002) - drawTri(p * 1.06 + 0.01, 0.002);\n    }\n\n    return smoothstep(0.02, 0.03, d) * 3.;\n}\n\nfloat drawCenter(vec2 p) {\n    float c = 0.0;    \n\n    c += drawChar(wave(iTime, 0.0) + 10., p * 3.7 + vec2(2.4, 0)) * step(0.1, mod(iTime, 3.));\n    c += drawChar(wave(iTime, 0.1) + 20., p * 3.7 + vec2(1.2, 0)) * step(0.2, mod(iTime, 3.));\n    c += drawChar(wave(iTime, 0.2) + 30., p * 3.7)* step(0.3, mod(iTime, 3.));\n    c += drawChar(wave(iTime, 0.3) + 40., p * 3.7 - vec2(1.2, 0))* step(0.4, mod(iTime, 3.));\n    c += drawChar(wave(iTime, 0.4) + 50., p * 3.7 - vec2(2.4, 0))* step(0.5, mod(iTime, 3.));\n            \n\n    if (abs(p.x) < .9 && abs(p.y) < 0.25) {\n        c -= 0.4;\n    }\n    \n    c += drawFrame(p, vec2(0.88, 0.23), 0.001) * 3. * mix(float(iFrame / 3 % 2), 1., step(.4, mod(iTime, 3.)));\n\n    return c;\n}\n\nfloat hash(vec2 p, float t) {\n    return fract(sin(dot(p, vec2(7849, 4789)) + t) * 489.);\n}\nvec2 hash2(vec2 p, float t) {\n    return vec2(hash(p, t), hash(p, t + 10.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv * 2. - 1.;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0, .8, 10);\n    vec3 rt = vec3(0, -.05, 0);\n    \n    vec3 cf = normalize(rt - ro);\n    vec3 cu = vec3(0, 1, 0);\n    vec3 cr = cross(cf, cu);\n    \n    vec2 cp = mix(p, p + hash2(p, iTime) * 0.04, pow(length(p),2.) * 0.5);\n    vec3 rd = normalize(cp.x * cr + cp.y * cu + cf * 3.);\n    vec3 rp;\n       \n    \n    float t = 0.;\n    vec2 hit;\n    \n    \n    vec3 color = vec3(0);\n    for (int i = 0; i < 90; i++) {\n        rp = ro + rd * t;\n        hit = map(rp);\n\n        if (hit.x < 0.001) {\n            color += max(0.9 - 0.025 * float(i), 0.);\n            \n            break;            \n        }\n\n        \n        t += hit.x * 0.9;\n        \n    }\n\n\n    color += drawCenter(p);\n    color += drawFrames(p);\n\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}