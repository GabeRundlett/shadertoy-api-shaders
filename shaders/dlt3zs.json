{
    "Shader": {
        "info": {
            "date": "1682967816",
            "description": "A Simple Colour Cycling grid image...\nhttps://store.steampowered.com/app/1751970/A_Blast_From_The_Past/\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dlt3zs",
            "likes": 1,
            "name": "ColourCycling",
            "published": 3,
            "tags": [
                "grid",
                "colourcycling"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "\n// generate a simple quantized colour cycle grid (12 colour steps)\n// used to generate a character-map grid for the Sega Genesis Version of A Blast From the Past.\n// 320x224 pixels packs down to 96 characters due to flipx/flipy (3072 bytes total)\n// https://store.steampowered.com/app/1751970/A_Blast_From_The_Past/\n// https://www.youtube.com/watch?v=LUbrzg21X9c - The lost art of color cycling - Animating with color\n\nfloat Quant(float cc,float steps)\n{\n    return floor(steps*cc)/steps;           // pure quantization\n}\n\nvec2 CycleGrid(vec2 uv,float colorsteps)\n{\n\tfloat fade = (abs(uv.y)-.1)/.9;\n    fade = 1.0-step(fade,0.085);\n\tvec2 v = vec2(uv.x*abs(1.0/uv.y),abs(1.0/uv.y));\n    vec2 fs =  fract(v+0.5)-0.5;\n    float e = length(vec2(abs(fs.x)-0.5,0.0));\n    \n    float lines = step(e,.05);\n    float fill = fs.y+0.5;\n    if (iMouse.z<0.5)\n        fill+=Quant(fract(iTime*0.5),colorsteps);// Cycle colours\n    fill = Quant(fract(fill),colorsteps);\n    return vec2(lines,(fill+0.1)) * fade;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Pixel coordinates\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec2 dat = CycleGrid(uv , 12.0);  // get grid with 12 colour steps\n    vec3 col = vec3(dat.y,0.0,0.0);\n\tcol.rgb += dat.x;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}