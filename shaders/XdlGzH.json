{
    "Shader": {
        "info": {
            "date": "1362869245",
            "description": "Projecting a 2d texture onto a 3d scene. Click in window to see grid over 3d scene.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XdlGzH",
            "likes": 238,
            "name": "Reprojection",
            "published": 3,
            "tags": [
                "2d",
                "3d"
            ],
            "usePreview": 1,
            "username": "P_Malin",
            "viewed": 16057
        },
        "renderpass": [
            {
                "code": "// Reprojection - @P_Malin\n\n#define kMaxIterations 128\n\n// Turn up iterations if you enable this\n#define ENABLE_SHADOW\n\nconst float kPI = 3.141592654;\n\nstruct C_Ray\n{\n    vec3 vOrigin;\n    vec3 vDir;\n};\n\nvec3 RotateY( const in vec3 vPos, const in float s, const in float c )\n{\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n\n\treturn vResult;\n}\n\n/////////////////////////////////////\n// Scene Description \n\nfloat GetDistanceBox(const in vec3 vPos, const in vec3 vDimension)\n{\n\treturn length(max(abs(vPos)-vDimension,0.0));\n}\n\n// result is x=scene distance y=material or object id; zw are material specific parameters (maybe uv co-ordinates)\nfloat GetDistanceScene( const in vec3 vPos )\n{   \n\tfloat fResult = 1000.0;\n\t\n\tfloat fFloorDist = vPos.y + 3.2;\t\n\tfResult = min(fResult, fFloorDist);\n\t\n\t\n\tvec3 vBuilding1Pos = vec3(58.8, 0.0, 50.0);\n\tconst float fBuilding1Radius = 50.0;\n\tvec3 vBuilding1Offset = vBuilding1Pos - vPos;\n\tfloat fBuilding1Dist = length(vBuilding1Offset.xz) - fBuilding1Radius;\n\t\n\tfResult = min(fResult, fBuilding1Dist);\n\t\n\t\n\t\n\tvec3 vBuilding2Pos = vec3(60.0, 0.0, 55.0);\n\tconst float fBuilding2Radius = 100.0;\n\tvec3 vBuilding2Offset = vBuilding2Pos - vPos;\n\tfloat fBuilding2Dist = length(vBuilding2Offset.xz) - fBuilding2Radius;\n\t\n\tfBuilding2Dist = max(vBuilding2Offset.z - 16.0, -fBuilding2Dist); // back only\n\t\n\tfResult = min(fResult, fBuilding2Dist);\n\n\t\n\tvec3 vBollardDomain = vPos;\n\tvBollardDomain -= vec3(1.0, -2.0, 13.5);\n\tvBollardDomain = RotateY(vBollardDomain, sin(0.6), cos(0.6));\n\tfloat fBollardDist = GetDistanceBox(vBollardDomain, vec3(0.2, 1.3, 0.2));\n\t\t\n\tfResult = min(fResult, fBollardDist);\n\n\t\n\tvec3 vFenceDomain = vPos;\n\tvFenceDomain -= vec3(-5.5, -2.5, 7.0);\n\tvFenceDomain = RotateY(vFenceDomain, sin(1.0), cos(1.0));\n\tfloat fFenceDist = GetDistanceBox(vFenceDomain, vec3(0.5, 1.2, 0.2));\n\t\t\n\tfResult = min(fResult, fFenceDist);\n\t\n\t\n\n\tvec3 vCabDomain = vPos;\n\tvCabDomain -= vec3(-1.4, -1.5,29.5);\n\tvCabDomain = RotateY(vCabDomain, sin(0.01), cos(0.01));\n\tfloat fCabDist = GetDistanceBox(vCabDomain, vec3(1.2, 1.5, 3.0));\n\t\t\n\tfResult = min(fResult, fCabDist);\n\t\n\t\t\n\tvec3 vBusDomain = vPos;\n\tvBusDomain -= vec3(-15.25, -2.0, 30.0);\n\tvBusDomain = RotateY(vBusDomain, sin(0.3), cos(0.3));\n\tfloat fBusDist = GetDistanceBox(vBusDomain, vec3(1.0, 3.0, 3.0));\n\t\t\n\tfResult = min(fResult, fBusDist);\n\t\n\t\t\n\tvec3 vBusShelter = vPos;\n\tvBusShelter -= vec3(7.5, -2.0, 30.0);\n\tvBusShelter = RotateY(vBusShelter, sin(0.3), cos(0.3));\n\tfloat fBusShelterDist = GetDistanceBox(vBusShelter, vec3(1.0, 5.0, 2.0));\n\t\t\n\tfResult = min(fResult, fBusShelterDist);\n\t\n\tvec3 vRailings = vPos;\n\tvRailings -= vec3(12.0, -2.0, 18.0);\n\tvRailings = RotateY(vRailings, sin(0.3), cos(0.3));\n\tfloat fRailings = GetDistanceBox(vRailings, vec3(1.0, 1.0, 2.0));\n\t\t\n\tfResult = min(fResult, fRailings);\n\t\t\n\t\n\tvec3 vCentralPavement = vPos;\n\tvCentralPavement -= vec3(5.3, -3.0, 8.0);\n\tvCentralPavement = RotateY(vCentralPavement, sin(0.6), cos(0.6));\n\tfloat fCentralPavementDist = GetDistanceBox(vCentralPavement, vec3(0.8, 0.2, 8.0));\n\t\t\n\tfResult = min(fResult, fCentralPavementDist);\n\t\n\n\t\n\treturn fResult;\n}\n\n/////////////////////////////////////\n// Raymarching \n\n\n// This is an excellent resource on ray marching -> https://iquilezles.org/articles/distfunctions\nfloat Raymarch( const in C_Ray ray )\n{        \n    float fDistance = 0.1;\n        \n    for(int i=0;i<=kMaxIterations;i++)              \n    {\n        float fSceneDist = GetDistanceScene( ray.vOrigin + ray.vDir * fDistance );\n        \n        if((fSceneDist <= 0.01) || (fDistance >= 1000.0))\n        {\n            break;\n        }                        \n\n        fDistance = fDistance + fSceneDist; \n    }\n\n\tfDistance = min(fDistance, 1000.0);\n\t\n\treturn fDistance;\n}\n               \n\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray)\n{\n    vec2 vUV = ( fragCoord.xy / iResolution.xy );\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\t\n\n\tvViewCoord.y *= -1.0;\n\n    ray.vOrigin = vPos;\n\n    vec3 vRight = normalize(cross(vWorldUp, vForwards));\n    vec3 vUp = cross(vRight, vForwards);\n        \n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);    \n}\n\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray)\n{\n\tvec3 vForwards = normalize(vInterest - vPos);\n\tvec3 vUp = vec3(0.0, 1.0, 0.0);\n\n\tGetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\n}\n\nvec3 GetColor( C_Ray ray )\n{\n    float fHitDist = Raymarch(ray);\n\tvec3 vHitPos = ray.vOrigin + ray.vDir * fHitDist;\n\t\t\n\tvec3 vProjPos = vHitPos;\n    \n\tfloat fProjectionDist = 0.5;\n\tvec2 vUV = vec2(((vProjPos.xy) * fProjectionDist) / vProjPos.z);\n\t\n\tvec2 vProjectionOffset = vec2(-0.5, -0.61);\n\tvUV += vProjectionOffset;\n\t\t\n\tvUV.y = 1.0 - vUV.y;\n\t\t\n\tvec3 vResult = texture(iChannel0, vUV).rgb;\n\t\t\t\n\tif(iMouse.z > 0.0)\n\t{\n\t\tvec3 vGrid =  step(fract(vHitPos / 5.0), vec3(0.9));\n\t\tvResult = mix(vec3(1.0, 1.0, 1.0), vResult, vGrid);\n\t}\n\t\n\t#ifdef ENABLE_SHADOW\n\tC_Ray shadowRay;\n\tshadowRay.vOrigin = vec3(0.0, 0.0, 0.0);\n\tshadowRay.vDir = normalize(vHitPos);\n\n\tfloat fLength = length(vHitPos);\t\n\tfloat fShadowDist = Raymarch(shadowRay);\n    if (fLength>fShadowDist+0.1)\n    {\n        //vResult *= 0.0f;\n        vResult = vResult * vResult;\n        vResult = mix(vResult, vec3(0.5), 0.1);\n        \n        float Luminance = dot(vResult, vec3(0.2126,0.7152,0.0722));\n        vec3 Desaturated = vec3(Luminance) * vec3(1.0, 0.9, 0.85);\n        vResult = mix(vResult, Desaturated, 0.9);\n        vResult = sqrt(vResult);\n    }\n\t\n\t//vResult *= 0.2 + 0.8 * step(fLength, fShadowDist + 0.1);\n\t#endif    \n\n    return vResult;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    C_Ray ray;\n\n    vec3 vCameraPos = vec3(0.0, 0.0, 0.0);\n\t\n\tvCameraPos.x += sin(iTime * 5.0) * 1.5;\n\tvCameraPos.z += (sin(iTime * 3.0) + 1.2) * 3.0;\n\t\n\tvec3 vCameraIntrest = vec3(0.0, 1.0, 20.0);\n\n\tGetCameraRayLookat( vCameraPos, vCameraIntrest, fragCoord, ray);\n\n\tvec3 vResult = GetColor( ray );\n    \n\tfragColor = vec4(vResult,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}