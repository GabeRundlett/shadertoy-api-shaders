{
    "Shader": {
        "info": {
            "date": "1629850332",
            "description": "trying out this iterating deformation of coordinates thing..",
            "flags": 2,
            "hasliked": 0,
            "id": "fsdGD4",
            "likes": 31,
            "name": "smokering doodle",
            "published": 3,
            "tags": [
                "doodle"
            ],
            "usePreview": 1,
            "username": "elenzil",
            "viewed": 1893
        },
        "renderpass": [
            {
                "code": "const float zoom = 0.5;\nconst float pi   = 3.0;\n\nmat2 rot2(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\nvoid mainImage( out vec4 RGBA, in vec2 XY ) {\n    float smallResDim = min(iResolution.x, iResolution.y);\n    vec2 P = (2.0 * XY - iResolution.xy) / smallResDim;\n    P /= zoom;\n    float smoothEpsilon = 10.0 / smallResDim;\n    \n    const int iters = 140;\n    vec2 p = P;\n    vec2 q = P;\n    for (int iter = 0; iter < iters; ++iter) {\n        p.x += sin(p.y * pi * 2.0 + iTime * 0.97) * 0.005;\n        p.y += sin(p.x * pi * 2.0 + iTime * 0.13) * 0.005;\n        \n        p *= rot2(0.01);\n        \n        if (iter % 2 == 0) {\n            q.x += 2.0 * sin(p.y * pi * 2.0 + iTime * 0.97) * 0.005;\n            q.y += 2.0 * sin(p.x * pi * 2.0 + iTime * 0.13) * 0.005;\n\n            q *= rot2(0.02);\n        }\n    }\n    \n    float d = length(p);\n    float e = length(q);\n    float dd = d - (sin(iTime * 0.1) * 0.2 + 1.2);\n    float c = smoothstep(0.0, smoothEpsilon, abs(dd) - 0.2);\n    float h = 1.0 - smoothstep(0.0, 0.4, abs(dd) - 0.01);\n    c = max(c, 1.0 - (h * 0.97));\n    \n    if (dd < 0.0) {\n        vec2 uv = XY/iResolution.xy;\n        uv.x = 1.0 - uv.x;\n        c = mix(c, min(c, pow(1.0 - texture(iChannel0, uv).r, 5.0) + 0.8), sin(iTime * 0.231) * 0.2 + 0.2);\n    }\n \n#if 0\n    float theta = atan(q.y, q.x);\n    float g = sin(theta * 2.0 + iTime * 1.1);\n    c = max(c, smoothstep(0.0, smoothEpsilon, 1.0 - abs(g - 1.992)));\n#endif\n    \n    RGBA = vec4(vec3(c), 1.0);\n    \n    float shadow = 1.0 - 0.4 * (1.0 - smoothstep(0.0, 0.4, abs(e - (sin(iTime * 0.1) * 0.2 + 1.2)) - 0.1));\n    RGBA.rgb = min(RGBA.rgb, mix(vec3(0.3, 0.5, 0.0), vec3(1.0), shadow));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}