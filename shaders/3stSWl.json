{
    "Shader": {
        "info": {
            "date": "1573342456",
            "description": "fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "3stSWl",
            "likes": 2,
            "name": "fractal derp",
            "published": 3,
            "tags": [
                "fratcal"
            ],
            "usePreview": 0,
            "username": "ArthurSango",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "#define t iTime\n\nvec2 transUV2(in vec2 uv, in vec2 uv2, in float val){\n    vec2 uvt = uv;\n    vec2 dir = normalize(uv - uv2);\n    uvt+=dir*max(0.0,1.0-distance(uv,uv2))*val;\n    //uvt.x+=sin(uvt.x*26.0+ani.x)*0.02;\n    //uvt.y+=sin(uvt.y*22.0+ani.y)*0.02;\n    return uvt;\n}\nvec2 transUV(in vec2 uv){\n    vec2 uvt = uv;\n    uvt.x+=sin(uvt.x*26.0+iTime*0.6)*0.2;\n    uvt.y+=sin(uvt.y*22.0+iTime*0.6)*0.2;\n    return uvt;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uvO = fragCoord/iResolution.xy;\nvec2 uvM = iMouse.xy / iResolution.xy;\n    \n    uvM = vec2( sin(iTime) + 1., cos(iTime)+ 1.) * 0.25 + 0.5;\n  //vec2 uv = transUV2(uvO,uvM,0.1+(sin(iTime*3.0)*0.5+0.5)*0.3);\n    vec2 uv = transUV(uvO);\n   // float t = iTime;\n    uv = fract(uv * 3.);\n\tvec3 col = vec3(1.);\n\n    uv = uv * 2. - 1. ;\n    uv = abs(uv);\n    uv *= mat2( cos( t), sin(t), -sin(t), cos(t) );;\n    uv += step( uv.x, 0.5 ) * step(uv.y, 0.5) * 0.2;\n    \n    uv *= mat2( step( uv.x, 0.5 ), 0.,0.,step( uv.x, 0.5 ));\n    uv += step( uv.x, 0.5 ) * step(uv.y, 0.5) * 0.1;\n    uv *= mat2( step( uv.x, 0.5 ), 0.,0.,step( uv.x, 0.5 ));\n    uv += step( uv.x, 0.5 ) * step(uv.y, 0.5) * 0.1;\n     uv *= mat2( step( uv.x, 0.5 ), 0.,0.,step( uv.x, 0.5 ));\n    uv += step( uv.x, 0.5 ) * step(uv.y, 0.5) * 0.1;\n     uv *= mat2( step( uv.x, 0.5 ), 0.,0.,step( uv.x, 0.5 ));\n    uv += step( uv.x, 0.5 ) * step(uv.y, 0.5) * 0.1;\n    \n    uv = fract(uv);\n    \n    col.x = uv.y + 0.2 ;\n    col.y = 0.;\n    col.z = smoothstep( 0.1, 0.3 ,length(uv) ) * uv.x * uv.y + 0.2;\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}