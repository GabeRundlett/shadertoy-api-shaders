{
    "Shader": {
        "info": {
            "date": "1604706553",
            "description": "Study of river hydrology using iq's domain warping technique. Mouse stills the current.",
            "flags": 0,
            "hasliked": 0,
            "id": "wddfzM",
            "likes": 5,
            "name": "diwali on the styx",
            "published": 3,
            "tags": [
                "warp"
            ],
            "usePreview": 0,
            "username": "gurumatcha",
            "viewed": 586
        },
        "renderpass": [
            {
                "code": "    // book of shaders random from fbm chapter\n    float random (in vec2 st) {\n        return fract(sin(dot(st.xy,\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n    }\n    // Quilez's 2D simplex noise https://www.shadertoy.com/view/Msf3WH\n    // originally had issue with tiling, but Mike Bostock's sketch and the book of shaders chapter on noise helped me figure it out\n    // https://observablehq.com/@mbostock/domain-warping\n    vec2 hash( vec2 p ) // replace this by something better\n    {\n        p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n        return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n    }\n    float noise( in vec2 p )\n    {\n        const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n        const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n        vec2  i = floor( p + (p.x+p.y)*K1 );\n        vec2  a = p - i + (i.x+i.y)*K2;\n        float m = step(a.y,a.x);\n        vec2  o = vec2(m,1.0-m);\n        vec2  b = a - o + K2;\n        vec2  c = a - 1.0 + 2.0*K2;\n        vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n        vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n        return dot( n, vec3(70.0) );\n    }\n        #define OCTAVES 6\n    float fbm (in vec2 st) {\n        // Initial values\n        float value = 0.0;\n        float amplitude = .5;\n        float frequency = 0.;\n        //\n        // Loop of octaves\n        for (int i = 0; i < OCTAVES; i++) {\n            value += amplitude * noise(st);\n            st *= 2.;\n            amplitude *= .5;\n        }\n        return value;\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    \tfloat aspect = iResolution.x/iResolution.y;\n        st.x *= iResolution.x/iResolution.y;\n        vec3 color = vec3(0.0);\n        // determines size\n        vec2 p = st*3.;\n        // river flow strength\n        \n    \n    \tvec2 m = iMouse.xy/iResolution.xy;\n        m.x *= aspect;\n        float turbulence = smoothstep(0.,.2,distance(m,st));\n    \tp.x += iTime * 0.01 * turbulence;\n    \n        // quilez does fbm( p + fbm(p)) notated as fbm(q+r), I expand the r to be r = fbm(p + s)\n        // I add terms to modify q,r,s\n        // these are nested functions so the order magnitude needs to be different\n        // t2 modulates the rivers velocity, here it's slightly against the river flow strength, almost 0\n        // originally t values had an additional trig term, but alas performance\n\n        // undercurrent relative velocity\n        float t1 = iTime * -0.05;\n        // river relative velocity\n        float t2 = iTime * 0.01;\n        // pollution relative velocity\n        float t3 = iTime * 0.1;\n        vec2 q = p + t1;\n        float s = fbm(p + t3);\n        float r = fbm(p + t2 + s)* turbulence;\n        // so this is where is ressembles the canonical quilez technique\n        color += fbm(q + r);\n        // bump up brightness a smidgen\n        color += 0.15;\n        color.r +=  s + 0.05;\n        // note that r here isn't red, it's river as modulated by undercurrent\n        color.b += r + 0.3;\n        // pollution as opposite of undercurrent color (couldnt use q without more operations)\n        color.g += s/2.5;\n        fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}