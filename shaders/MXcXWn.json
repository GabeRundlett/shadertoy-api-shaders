{
    "Shader": {
        "info": {
            "date": "1718861636",
            "description": "Here is a zoomed in mandelbrot with the colors depicted by the natural light falloff of wavelengths based on their respective intensity at certain wavelengths. Animated by shifting the z around very slightly.",
            "flags": 0,
            "hasliked": 0,
            "id": "MXcXWn",
            "likes": 6,
            "name": "nm wavelengths mandel zoom",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "zoom",
                "nm",
                "wavelengths"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 100
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 150.0\n\n// Constants for visible light wavelengths in nanometers\nconst float WAVELENGTH_MIN = 380.0;\nconst float WAVELENGTH_MAX = 700.0;\n\n// Converts wavelength (in nm) to RGB color\nvec3 wavelengthToRGB(float wavelength) {\n    float gamma = 0.8;\n    float intensity;\n    float r = 0.0, g = 0.0, b = 0.0;\n\n    if (wavelength >= 380.0 && wavelength < 440.0) {\n        r = -(wavelength - 440.0) / (440.0 - 380.0);\n        b = 1.0;\n    } else if (wavelength >= 440.0 && wavelength < 490.0) {\n        g = (wavelength - 440.0) / (490.0 - 440.0);\n        b = 1.0;\n    } else if (wavelength >= 490.0 && wavelength < 510.0) {\n        g = 1.0;\n        b = -(wavelength - 510.0) / (510.0 - 490.0);\n    } else if (wavelength >= 510.0 && wavelength < 580.0) {\n        r = (wavelength - 510.0) / (580.0 - 510.0);\n        g = 1.0;\n    } else if (wavelength >= 580.0 && wavelength < 645.0) {\n        r = 1.0;\n        g = -(wavelength - 645.0) / (645.0 - 580.0);\n    } else if (wavelength >= 645.0 && wavelength <= 700.0) {\n        r = 1.0;\n    }\n\n    // Let the intensity fall off near the vision limits\n    if (wavelength >= 380.0 && wavelength < 420.0) {\n        intensity = 0.3 + 0.7 * (wavelength - 380.0) / (420.0 - 380.0);\n    } else if (wavelength >= 420.0 && wavelength < 645.0) {\n        intensity = 1.0;\n    } else if (wavelength >= 645.0 && wavelength <= 700.0) {\n        intensity = 0.3 + 0.7 * (700.0 - wavelength) / (700.0 - 645.0);\n    } else {\n        intensity = 0.0;\n    }\n\n    vec3 color = vec3(r, g, b) * intensity;\n    return pow(color, vec3(gamma));\n}\n\nvec3 mandelbrot(vec2 uv, vec2 z, vec3 color) {\n    float iter = 0.0;\n    for (float i = 0.0; i < MAX_ITER; i++) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + uv;\n        if (length(z) > 2.0) {\n            float wavelength = mix(WAVELENGTH_MIN, WAVELENGTH_MAX, i / MAX_ITER);\n            color = wavelengthToRGB(wavelength);\n            break;\n        }\n        iter = i;\n    }\n    return color;\n}\n\n// Main function for rendering\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    uv *= 0.01;\n    uv.x -= 1.29;\n    uv.y -= 0.06;\n    vec3 col = vec3(1.0);\n    vec2 z = vec2(0.0+0.1*sin(iTime*0.1), 0.0+0.1*cos(iTime*0.1));\n    col = mandelbrot(uv, z, col);\n\n    // Simulate light scattering by adjusting brightness based on wavelength\n    float wavelength = mix(WAVELENGTH_MIN, WAVELENGTH_MAX, col.b*col.r);\n    float brightness = 1.0 - (wavelength - WAVELENGTH_MIN) / (WAVELENGTH_MAX - WAVELENGTH_MIN);\n    col *= brightness;\n    col = pow(col, vec3(0.454545));\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}