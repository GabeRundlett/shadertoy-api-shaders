{
    "Shader": {
        "info": {
            "date": "1663639813",
            "description": "Pressure wave through pipes.",
            "flags": 32,
            "hasliked": 0,
            "id": "sltfWS",
            "likes": 8,
            "name": "Acoustic Pipes",
            "published": 3,
            "tags": [
                "wave",
                "simulation",
                "acoustic"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "/*\nThings to try out (need recompile and reset):\n    - Input waveforms (cw-pulse, cw, pulse)\n    - Switch visualized field (v variable in mainImage)\n    - Wavelengths (f variable in _step)\n    - Pipe shapes (initialization in update)\n\nBuffer:\n    .x radius of pipe\n    .y mass density \"m\" contained in this pipe element\n    .z mass flux \"f\" into this pipe element from the left\n\nUsing short notation for derivatives: for fn(a, b)\n    fn_a (a, b) == d  fn(a, b) / d a\n    fn_b (a, b) == d  fn(a, b) / d b\n    fn_ab(a, b) == d² fn(a, b) / d a / d b\n\nModels an acoustic wave in a pipe:\n    x          : L\n    t          : T\n    c          : L/T\n    damping    : 1/T\n    area(x)    : L²\n    mass(x, t) : M/L\n    flux(x, t) : M/T\n\nThis assumes that the sound pressure level and flow velocity is small, so that \"c\" can be considered constant.\n\nProblems:\n    - Stability issues when using more than one buffer. (off by one?, precision?)\n\nCode:\n    mass_t(x, t) : M/L/T =\n        - flux_x(x, t)\n\n    density  (x, t) : M/L³ =\n          (mass  (x, t) : M/L) / (area(x) : L²)\n    density_x(x, t) : M/L⁴ =\n          (mass_x(x, t) : M/L²) / (area(x)  : L²)\n        - (mass  (x, t) : M/L ) / (area(x)² : L⁴) * (area_x(x) : L)\n\n    effective_mass_x(x, t) : M/L²\n        = density_x(x, t) * area(x)\n        = (mass_x (x, t) : M/L²)\n        - (density(x, t) : M/L³) * (area_x(x) : L)\n\n    flux_t(x, t) : M/T² =\n        - (effective_mass_x(x, t) : M/L²) * (c² : L²/T²)\n        - (flux(x, t) : M/T) * (damping : 1/T)\n\nInteresting:\n    For a settled one-way wave without damping, without sources, without sinks and a fixed cross-section:\n        (mass : M/L) is proportional to (-flux : M/T) or (+flux : M/T)\n    Basically, you can measure distances using either length or time with \"c\" as the proportionality constant.\n    This get's really obvious when applying the constraints and multiplying mass with \"c\":\n\n        mass_t(x, t) = -     flux_x(x, t)\n        flux_t(x, t) = -     mass_x(x, t) * c²\n                     = - sym_mass_x(x, t) * c\n\n        sym_mass  (x, t) : M/T  =   mass(x, t) * c\n        sym_flux  (x, t) : M/T  =   flux(x, t)\n\n        -- same unit, same update !!\n        sym_mass_t(x, t) : M/T² = - flux_x(x, t) * c\n        sym_flux_t(x, t) : M/T² = - mass_x(x, t) * c\n\n*/\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    ivec2 I = ivec2(O);\n    int y = int(O.y / iResolution.y * float(npipes));\n    float Oy = O.y - (float(y) + .5) * iResolution.y / float(npipes);\n    \n    vec4 h = texelFetch(iChannel0, ivec2(I.x, y), 0);\n    C = vec4(0);\n    float r = h.x - abs(Oy);\n    float v = h.y; // mass\n    //v = h.z / c; // flux\n    if (r > 0.)\n    {\n        if (true)\n        //if (false)\n        {\n            C = mix(C, vec4(0, .1, 1, 1), clamp(-v, 0., 1.));\n            C = mix(C, vec4(1, .2, 0, 1), clamp(+v, 0., 1.));\n        }\n        else\n            C = mix(C, vec4(0,  1, 0, 1), clamp(abs(v), 0., 1.));\n    }\n    C = mix(C, vec4(1), clamp((1. + .3 * abs(dFdx(r))) - abs(r), 0., 1.));\n    C = sqrt(C);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "buffer(0)",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int   npipes = 5     ;\nconst int   sub    = 80    ; // (step/bufferframe)\nconst float c      = 1./20.; // speed of sound (px/step)\n\nconst float pi = radians(180.);\nconst float tau = pi * 2.;\n\n#define buffer(i) \\\nvoid mainImage(out vec4 C, vec2 O) \\\n{ \\\n    update(C, O, iChannel0, iResolution, iFrame * 1 + i); \\\n} \\\n\nconst int N = 1 + 2 * sub;\nint base;\nvec4 frame[N];\nvec4 dframe[N];\nvec3 resolution;\n\nvec4 fetch(int i)\n{\n    return frame[i];\n}\n\nvec4 _step(float t, int i)\n{\n    vec4 L = fetch(i - 1);\n    vec4 C = fetch(i);\n    vec4 R = fetch(i + 1);\n    \n    // wavelength [px]\n    float f = 10.;\n    //f = 50.;\n    f = resolution.x * .2;\n    \n    // period [step]\n    f /= c;\n\n    // waveforms\n    float z = 0.;\n    z = sin(t*tau/f) * .03 * float(t/f < 2.); // cw-pulse\n    //z = sin(t*tau/f) * .01; // cw\n    //float xt=t*tau/f-3.; z = exp(-xt*xt)*.03; // pulse\n\n    // boundary flux (left/right)\n    float lz = 0., rz = 0.;\n    lz = z, rz = 0.;\n    //lz = 0., rz = z;\n    \n    if (base+i == 0)\n        L.y = C.y, C.z = lz;\n    if (base+i == int(resolution.x)-1)\n        R.z = rz;\n    \n    // change of mass\n    float dm = 0.;\n    dm += C.z - R.z; // through boundary\n    \n    // effective pressure\n    float ep = (L.y-C.y) + 2.*mix(L.y,C.y,.5)*(L.x-C.x)/mix(L.x,C.x,.5);\n\n    // change of flux\n    float df = 0.;\n    df += ep * c * c; // through pressure\n    //if (false)\n        df -= C.z * 3e-5; // through damping\n\n    return vec4(0, dm, df, 0);\n}\n\nfloat constriction(float x, float w, float s)\n{\n    s /= resolution.x;\n    float a = .5-w;\n    float b = .5+w;\n    return mix(1., .1, smoothstep(a-s, a, x) - smoothstep(b, b+s, x));\n}\n\nfloat narrowing(float x, float w, float s)\n{\n    s /= resolution.x;\n    s /= 2.;\n    return mix(1., .4, smoothstep(w-s, w+s, x));\n}\n\nvoid update(out vec4 C, vec2 O, sampler2D iChannel0, vec3 iResolution, int iFrame)\n{\n    resolution = iResolution;\n    ivec2 I = ivec2(O);\n    \n    if (I.y >= npipes)\n    {\n        C = vec4(1,2,3,4);\n        return;\n    }\n\n    const int startFrame = 1;\n    //if (iFrame < startFrame) // preview doesn't work in firefox\n    if (texelFetch(iChannel0, ivec2(0, npipes), 0) != vec4(1,2,3,4))\n    {\n        float x = O.x / resolution.x;\n        float h = resolution.y/2./float(npipes)*.8;\n        if (I.y == 4)\n            h *= constriction(x, .1, 10.);\n        if (I.y == 3)\n            h *= constriction(x, .1, 100.);\n        if (I.y == 1)\n            h *= narrowing(-x, -.4, 10.);\n        if (I.y == 0)\n            h *= narrowing(x, .4, 10.);\n        C = vec4(h, 0, 0, 0);\n        return;\n    }\n    \n    base = I.x - sub;\n    for (int j=0 ; j<N ; ++j)\n        frame[j] = texelFetch(iChannel0, ivec2(base + j, I.y), 0);\n    for (int i=0 ; i<sub ; ++i)\n    {\n        float t = float((iFrame - startFrame) * sub + i);\n        // Leapfrog integration\n        // 1. Update flow\n        for (int j=1+i ; j<N-(1+i) ; ++j)\n            dframe[j] = _step(t, j);\n        for (int j=1+i ; j<N-(1+i) ; ++j)\n            frame[j] += dframe[j] * vec4(0, 0, 1, 0);\n        t += .5;\n        // 2. Update mass\n        for (int j=1+i ; j<N-(1+i) ; ++j)\n            dframe[j] = _step(t, j);\n        for (int j=1+i ; j<N-(1+i) ; ++j)\n            frame[j] += dframe[j] * vec4(0, 1, 0, 0);\n    }\n    C = fetch(I.x - base);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}