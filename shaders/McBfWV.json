{
    "Shader": {
        "info": {
            "date": "1725519231",
            "description": "inspired by: https://www.shadertoy.com/view/4fB3Dd ",
            "flags": 0,
            "hasliked": 0,
            "id": "McBfWV",
            "likes": 0,
            "name": "sep42024[flashwarning]",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // Calculate distance from center\n    float dist = length(uv);\n    \n    // Create anti-aliased circle\n    float circleRadius = 0.43;\n    float edgeSmoothing = 0.0015; // Adjust this value to control the amount of anti-aliasing\n    float circle = smoothstep(circleRadius, circleRadius - edgeSmoothing, dist);\n    \n    // Auto-invert based on time\n    float invert = step(sin(iTime * 50.0), 0.0);\n    \n    // Define colors\n    vec3 gray = vec3(0.16078); // #292929 in RGB\n    vec3 white = vec3(1.0);\n    vec3 black = vec3(0.0);\n    \n    // Choose colors based on inversion state\n    vec3 circleColor = invert == 1.0 ? gray : white;\n    vec3 bgColor = invert == 1.0 ? white : black;\n    \n    // Combine circle and background\n    vec3 finalColor = mix(bgColor, circleColor, circle);\n    \n    // Output color\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}