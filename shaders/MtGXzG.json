{
    "Shader": {
        "info": {
            "date": "1484777524",
            "description": "experimenting with mixing convolutional feedback with last frame's color as texcoord offsets.",
            "flags": 32,
            "hasliked": 0,
            "id": "MtGXzG",
            "likes": 45,
            "name": "worms",
            "published": 3,
            "tags": [
                "convolution",
                "feedback"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 1607
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 offset [9];\nfloat kernel [9];\n\nvec2 rotate(vec2 coords, float angle){\n\tfloat sin_factor = sin(angle );\n    float cos_factor = cos(angle );\n    coords = vec2((coords.x - 0.5) , coords.y - 0.5) * mat2(cos_factor, sin_factor, -sin_factor, cos_factor);\n    coords += 0.5;\n    return coords;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    float t = iTime*0.01;\n    vec2 tc = fragCoord / res;\n    vec2 uv = -1.0 + 2.0 * tc;\n    \n    //zoom \n    uv *= 0.995;\n    uv = uv * 0.5 + 0.5;\n    \n    //rotation\n    uv = rotate(uv, 0.0015);\n    \n    vec2 step = 1.0 / res;\n    \n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    //convolution values\n    float outer = -0.25;\n    float inner = 0.125;\n    \n    kernel[0] = 0.0; kernel[1] = 0.0; kernel[2] = inner;\n    kernel[3] = 0.0; kernel[4] = inner; kernel[5] = 0.0;\n    kernel[6] = outer; kernel[7] = 0.0; kernel[8] = 0.0;\n    \n    vec4 sum = texture(iChannel1, uv);\n    vec4 last = sum;\n    last.gb = -1.0 + 2.0 * last.gb;\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(iChannel1, (uv + offset[i]) - last.gb*0.025);\n        sum += color * kernel[i];\n    }\n    \n    vec4 src = texture(iChannel0, tc);\n    sum.rgb = mix(sum.rgb, src.rgb, src.rgb*0.15);\n    \n    if(iFrame < 10 || iMouse.z > 0.0){\n        fragColor = src;\n    } else {\n    \tfragColor = vec4(clamp(vec3(sum.rgb), vec3(0.0), vec3(1.0)), 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}