{
    "Shader": {
        "info": {
            "date": "1663599880",
            "description": "Showcase of the difference between group velocity and phase velocity\nThe demo superposes several waves around a central wavelength.\nIt shows that the envelop of the superposed waves (the 'bulge') is traveling\nat half the speed of the main wave.",
            "flags": 0,
            "hasliked": 0,
            "id": "stcBDB",
            "likes": 1,
            "name": "group velocity demo",
            "published": 3,
            "tags": [
                "wave",
                "fluid",
                "dispersion",
                "waveequation"
            ],
            "usePreview": 0,
            "username": "skal",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "// The demo superposes several waves of wavelength uniformly\n// distributed in a window around a central wavelength Lambda0.\n//\n// The waves are assumed to be gravity waves at the surface\n// of very deep incompressible fluid (= ocean).\n// The dispersion relation is then 𝛚 = √(gk)\n//\n// The demo shows that the envelop of the superposed waves\n// (the 'bulge') is traveling at *half* the speed of the physical\n// (aka 'phase') speed of the main wave (≃ √(lambda0 * g)).\n//\n// y-mouse controls the number of sampling points (=superposed sources)\n// x-mouse divides the display in 3 regions resp.: \n//   drawing of the amplitude curve, circular wave, planar wave\n//\n// skal/ (Pascal Massimino)\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n//\n//  https://en.wikipedia.org/wiki/Group_velocity\n//  http://www.cbeaume.com/download/MATH3620_chap6.pdf\n//\n\nconst float Lambda0 = 0.20;  // center of the window\nconst float dLambda = 0.02;  // window half-size\nconst vec2 uv0 = vec2(0., .5);   // origin of waves\n\nconst float eps = .05;  // drawn curve size\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy;\n  int draw_type = 0, N = 2 /* number of sources */;\n\n  if (iTime > 0.) {\n    draw_type = int(3. * iMouse.x / iResolution.x);\n    N = 2 + int(iMouse.y / iResolution.y * 10.);\n  }\n  float norm = 1. / float(2 * N - 1);\n  float t = iTime * 10.;\n  float acc0 = 0., acc = 0., dacc = 0.;\n  for (int i = -N + 1; i <= N - 1; ++i) {\n    float lambda = Lambda0 + float(i) * dLambda / float(N);\n    float omega = sqrt(1. / lambda);    // 2.𝛑.g = unity\n    vec2 r = uv - uv0;\n    float d = length(draw_type == 1 ? r : r.xx) * 50.;\n    float phi = d / lambda - omega * t;\n    dacc += -sin(phi) / lambda;  // derivative\n    acc += cos(phi);\n    if (i == 0) acc0 = cos(phi);  // stored for the background\n  }\n  dacc *= norm * 1.5;\n  acc = 0.5 + 0.5 * acc * norm;\n  if (draw_type > 0) {\n    fragColor = vec4(acc, acc, acc, 1.0);\n  } else {\n    float pt = abs(uv.y - acc) / sqrt(1. + dacc * dacc);\n    float d = 1. - clamp(pt, 0., eps) / eps;\n    vec3 background =\n        clamp(acc0 * uv.x * uv.x, 0., 1.) * vec3(.9, .1, .9);\n    vec3 col = mix(background, vec3(1., 1., 1.), d);\n    fragColor = vec4(col,1.0);\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}