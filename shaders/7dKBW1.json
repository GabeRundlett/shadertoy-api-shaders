{
    "Shader": {
        "info": {
            "date": "1658353241",
            "description": "At some point I'd like to have a way to simulate atoms bonding and interacting realistically.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dKBW1",
            "likes": 19,
            "name": "Soft Springs",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "particles",
                "bonding"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 50.0;\n    float unit = 100.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    //uv.x -= 6.0 * iTime;\n\n    for (int i=0; i < PARTICLES; i++) {\n        vec2 pos = texelFetch(iChannel0, ivec2(i, 0), 0).xy;\n        color = mix(color, vec3(1.0), smoothstep(unit, 0.0, length(uv - pos) - 0.1));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 Hash12(in float x) {\n    x += iDate.w;\n\tvec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    ivec2 iFragCoord = ivec2(fragCoord);\n\n    if (iFrame == 0 && iFragCoord.x < PARTICLES && iFragCoord.y == 0) {\n        // Random (100 particles)\n        /**/\n        fragColor.xy = (Hash12(fragCoord.x + 274.937) - 0.5) * 50.0;//(vec2(mod(fragCoord.x, 10.0), floor(fragCoord.x / 10.0)) - 5.0) * 0.8;\n        fragColor.zw = (Hash12(fragCoord.x + 385.583) - 0.5) * 5.0;\n        /**/\n\n        // Newton cradle+ (12 particles)\n        /**\n        fragColor = vec4((fragCoord.x - 5.0) * 3.0, 0.0, 0.0, 0.0);\n        if (iFragCoord.x == 9) fragColor = vec4(20.0, 0.0, -9.0, 0.0);\n        if (iFragCoord.x == 10) fragColor = vec4(20.0, -2.0, -9.0, 0.0);\n        if (iFragCoord.x == 11) fragColor = vec4(20.0, 2.0, -9.0, 0.0);\n        /**/\n\n        // Bond gun (3 particles)\n        /**\n        if (iFragCoord.x == 0) fragColor = vec4(10.0, 0.0, -1.0, 0.0);\n        if (iFragCoord.x == 1) fragColor = vec4(0.0, -2.0, 0.0, 0.0);\n        if (iFragCoord.x == 2) fragColor = vec4(0.0, 2.0, 0.0, 0.0);\n        /**/\n\n        // Double oscillator tunnel (22 particles)\n        /**\n        fragColor = vec4((fragCoord.x - 5.0) * 5.0, 2.5, 0.0, 0.0);\n        if (iFragCoord.x > 9) fragColor = vec4((fragCoord.x - 15.0) * 5.0, -2.5, 0.0, 0.0);\n        if (iFragCoord.x == 20) fragColor = vec4(-35.0, 0.0, 7.0, 0.0);\n        if (iFragCoord.x == 21) fragColor = vec4(35.0, 0.0, -7.0, 0.0);\n        /**/\n\n        // Speed adder (4 particles)\n        /**\n        if (iFragCoord.x == 0) fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        if (iFragCoord.x == 1) fragColor = vec4(-10.0, 0.0, 1.0, 0.0);\n        if (iFragCoord.x == 2) fragColor = vec4(-7.1, 7.1, 0.71, -0.71);\n        if (iFragCoord.x == 3) fragColor = vec4(-7.1, -7.1, 0.71, 0.71);\n        if (iFragCoord.x > 0) fragColor.zw *= 2.0;\n        /**/\n\n        // Quadruple bond/accelerator (16 particles)\n        /**\n        if (iFragCoord.x == 0) fragColor = vec4(-10.0, 10.0, 0.0, 0.0);\n        if (iFragCoord.x == 1) fragColor = vec4(-20.0, 10.0, 2.0, 0.0);\n        if (iFragCoord.x == 2) fragColor = vec4(-17.1, 17.1, 1.42, -1.42);\n        if (iFragCoord.x == 3) fragColor = vec4(-10.0, 20.0, 0.0, -2.0);\n        if (iFragCoord.x == 4) fragColor = vec4(10.0, 10.0, 0.0, 0.0);//\n        if (iFragCoord.x == 5) fragColor = vec4(20.0, 10.0, -2.0, 0.0);//\n        if (iFragCoord.x == 6) fragColor = vec4(17.1, 17.1, -1.42, -1.42);//\n        if (iFragCoord.x == 7) fragColor = vec4(10.0, 20.0, 0.0, -2.0);//\n        if (iFragCoord.x == 8) fragColor = vec4(10.0, -10.0, 0.0, 0.0);\n        if (iFragCoord.x == 9) fragColor = vec4(20.0, -10.0, -2.0, 0.0);\n        if (iFragCoord.x == 10) fragColor = vec4(17.1, -17.1, -1.42, 1.42);\n        if (iFragCoord.x == 11) fragColor = vec4(10.0, -20.0, 0.0, 2.0);\n        if (iFragCoord.x == 12) fragColor = vec4(-10.0, -10.0, 0.0, 0.0);//\n        if (iFragCoord.x == 13) fragColor = vec4(-20.0, -10.0, 2.0, 0.0);//\n        if (iFragCoord.x == 14) fragColor = vec4(-17.1, -17.1, 1.42, 1.42);//\n        if (iFragCoord.x == 15) fragColor = vec4(-10.0, -20.0, 0.0, 2.0);//\n        /**/\n\n        // Orbit (2 particles)\n        /**\n        if (iFragCoord.x == 0) fragColor = vec4(-0.4847908745, 0.0, 0.0, 2.0);\n        if (iFragCoord.x == 1) fragColor = vec4(0.4847908745, 0.0, 0.0, 0.0);\n        /**/\n    }\n\n    else {\n        fragColor = texelFetch(iChannel0, iFragCoord, 0);\n        vec2 force = vec2(0.0);\n        for (int i=0; i < PARTICLES; i++) {\n            if (i != iFragCoord.x) {\n                vec2 particle = texelFetch(iChannel0, ivec2(i, 0), 0).xy;\n\n                vec2 to = particle - fragColor.xy;\n                float dist = length(to);\n                vec2 dir = to / dist;\n\n                //float y = exp(2.55 - 2.63 * dist);\n                float y = exp(2.55 - 2.63 * dist);\n                float strength = 37.4 * (1.0 - y) * y;\n\n                force += dir * strength;\n            }\n        }\n\n        vec2 accel = force;// / mass;\n        fragColor.zw += accel * dt;\n        fragColor.xy += fragColor.zw * dt;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PARTICLES 100\n#define dt 0.01",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}