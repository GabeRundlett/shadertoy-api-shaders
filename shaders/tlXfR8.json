{
    "Shader": {
        "info": {
            "date": "1595953216",
            "description": "as an exercise, recoding the base shape of  dr2's 3904 chars [url]https://www.shadertoy.com/view/3lfBz8[/url] (without shading or shadows).\nHere, with approx of dr2's shading & lighting.\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tlXfR8",
            "likes": 7,
            "name": "Interlocked Tetrahedra - fab2",
            "published": 3,
            "tags": [
                "raymarching",
                "escher",
                "tetrahedron",
                "shape"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 340
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/WtXfzH\n// Here, with approx of dr2's shading & lighting. https://www.shadertoy.com/view/3lfBz8\n\n// pyramid with hole SDF + normal ( Matrix version: too bad we don't have invmax() )\n#define P  T = -q.y - 1.;  N=vec3(0,-1,0);                  \\\n           for(float k=0.; k<3.; k++) {                     \\\n               V = vec3(.94*cos(2.1*k+vec2(0,11)),.33).xzy; \\\n               d = dot(V,q) - 1.;                           \\\n               if ( d > T ) T = d, N = V;                   \\\n           }                                                \\\n           d = 1.5-length(q);                               \\\n           if ( d > T ) T = d, N = -q/length(q)                   \n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                    \n                    \nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t=1.,T, d;\n    vec3  R = iResolution, V, k = vec3(0,2.1,4.2),n,N,\n          D = normalize(vec3( U+U, -10.*R.y ) - R ),     // ray direction\n       // D = normalize(vec3(.1*(U+U-R.xy)/R.y, -1)),    // ray direction\n          p = 30./R, q;                                  // marching point along ray \n    O-=O;\n    for ( O++; O.x > 0. && t > .01 ; O-=.015 ) {\n        q = p; \n        q.yz *= rot(.3),                                 // rotations\n        q.xz *= rot(.3*iTime),\n            \n        q.y += .5;                       P; t = T,n=N,   // bottom pyramid\n        q.y = .5-q.y; q.xz *= rot(1.05); P; t = min(t,T);// top pyramid\n        p += t*D;                                        // step forward = dist to obj\n    }\n    if (t==T) n = N;\n    \n/**/n.xy *= rot(.3*iTime);                               // rotate 3 lights\n    O.rgb *= .8 + .5*n;                                  // pseudo-dr2 shading + color-lighting\n/**/\n/** O *= t==T ? (.5+N.y) * vec4(1,.7,.5,1)               // object shading\n              : (.5+n.y) * vec4(.5,.7,1,1);              // & coloring\n/**/\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}