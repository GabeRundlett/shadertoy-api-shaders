{
    "Shader": {
        "info": {
            "date": "1697181040",
            "description": "test in 3D",
            "flags": 0,
            "hasliked": 0,
            "id": "DsSGDw",
            "likes": 0,
            "name": "tests_in_3D",
            "published": 3,
            "tags": [
                "3d",
                "test"
            ],
            "usePreview": 0,
            "username": "danzabarr",
            "viewed": 112
        },
        "renderpass": [
            {
                "code": "\n#define MAX_STEPS 200\n#define MAX_DIST 200.\n#define SURF_DIST .00001\n\n\nfloat sphere(vec3 p, vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nfloat plane(vec3 p, vec3 n, float d)\n{\n    return dot(p, n) - d;\n}\n\nfloat quad(vec3 p, mat4 transform)\n{\n    return 0.;\n}\n\nfloat metaball(vec3 p, vec3 c, float r)\n{\n \treturn pow(r, 2.0) / (pow(p.x - c.x, 2.0) + pow(p.y - c.y, 2.0) + pow(p.z - c.z, 2.0));\t   \n}\n\n\nfloat aabb(vec3 p, vec3 pos, vec3 size)\n{\n  vec3 q = abs(p - pos) - size;\n  return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat GetDist(vec3 p) \n{\n\n    float d = MAX_DIST;\n\n\n    //for (int sx = -50; sx < 50; sx++)\n    //    for (int sy = -50; sy < 50; sy++)\n    //    {\n    //        vec3 pos = vec3(sx, 0, sy);\n    //        \n    //        d = min(d, sphere(p, pos, 1.));\n    //    }\n    \n    d = min(d, aabb(p, vec3(2., 2., 10.), vec3(3.,1.,5.)));\n    \n    \n    /*\n    for (float i = 0.; i < 100.; i++)\n    {\n        float x = mod(i, 10.);\n        float y = floor(i / 10.);\n        vec3 pos = vec3(x, 0., y + 10.);\n        \n        pos.y += sin(x + iTime);\n        \n        d = min(d, sphere(p, pos, .5));\n\n    }\n    */\n\n    \n    d = min(d, plane(p, vec3(0., 1., 0.), 0.));\n    \n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n\n    float da = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 ri = ro + rd * da;\n        float d = GetDist(ri);\n        da += d;\n        \n        \n        if (da > MAX_DIST || d < SURF_DIST)\n            break;\n    }\n    \n    return da;\n\n}\n\nfloat sdSphere(vec3 p, float r )\n{\n  vec3 offset = vec3(0, 0, -2);\n  return length(p - offset) - r;\n}\n\n\nvec3 GetNormal(vec3 point) \n{\n    float EPSILON = SURF_DIST;\n\n    float a = GetDist(vec3(point.x + EPSILON, point.y, point.z));\n    float b = GetDist(vec3(point.x - EPSILON, point.y, point.z));\n    float c = GetDist(vec3(point.x, point.y + EPSILON, point.z));\n    float d = GetDist(vec3(point.x, point.y - EPSILON, point.z));\n    float e = GetDist(vec3(point.x, point.y, point.z  + EPSILON));\n    float f = GetDist(vec3(point.x, point.y, point.z - EPSILON));\n    return normalize(vec3(a - b, c - d, e - f));\n}\n\nvec3 GetNormalold(vec3 p) {\n\n/*\n    vec2 e = vec2(SURF_DIST, 0);\n    \n    return normalize(\n      e.xyy * GetDist(p + e.xyy) +\n      e.yyx * GetDist(p + e.yyx) +\n      e.yxy * GetDist(p + e.yxy) +\n      e.xxx * GetDist(p + e.xxx));\n\t\n    */\n    float d = GetDist(p);\n    vec2 e = vec2(SURF_DIST, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 15, 2);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    //diffuse\n    float dif = clamp(dot(n, l), 0., 1.);\n\n    //shadows\n    float d = RayMarch(p + n * SURF_DIST * 2., l);\n    if (d < length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nvec2 r;\nbool stored = false;\n\nfloat PI = 3.1415926535;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 5, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n\n    float tilt = PI / 12.; //15 degree tilt\n    float pan = 0.;\n\n    rd *= rotateX(tilt) * rotateY(pan);\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    //col = pow(col, vec3(.4545));\t// gamma correction\n    \n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}