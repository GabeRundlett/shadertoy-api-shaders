{
    "Shader": {
        "info": {
            "date": "1684704022",
            "description": "A guide for working with colors in HSV palette then mixing them using weights.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtKGDV",
            "likes": 1,
            "name": "Color Palette - Simple",
            "published": 3,
            "tags": [
                "color",
                "palette",
                "rgb",
                "hsv",
                "colorwheel",
                "colorscheme"
            ],
            "usePreview": 0,
            "username": "Dirk",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "\n    // Color Pallet Example\n    // by Dirk Stockton\n    \n    v3 hash32( v2 p ){ // noise by IQ\n        v3 q = v3( dot(p,v2(127.1,311.7)), dot(p,vec2(269.5,183.3)), dot(p,v2(419.2,371.9)) );\n        R fract(sin(q)*43758.5453);\n    }\n    \n    v3 color( v3 hsv ){ // HSV->RGB by IQ https://www.shadertoy.com/view/MsS3Wc\n       \n       v3 rgb  = clamp( abs( mod(6.*hsv.x+v3(0.,4.,2.),6.)-3.) -1., 0., 1. ); // Find Hue by IQ\n\n          rgb  = rgb*rgb*(3.0-2.0*rgb);      // Smooth the Hue\n          rgb  = mix( v3(1.0), rgb, hsv.y ); // Mix the Saturation with the Hue\n          rgb *= hsv.z;                      // Scale the the Hue by the Value   \n         \n          R rgb; // Return the RGB color\n           \n    }\n    \n    v3 pallet3( v2 uv, v3 weight, F variance ){  // Tertiary ( Three apposing positions on the color wheel )\n    \n        v2 id = floor(uv); // Cell ID's\n        \n        \n        v3 c  = v3(1.0,0.5,0.5); // Anchor Color ( Painter's term for Base \"Primer-Color\" )\n        \n        F iT = iTime*0.5;\n        v3 t = v3(sin(iT),sin(iT+43.48),sin(iT+453.71));\n        \n        v3 hue = v3(.5+.5*t.x,.5+.5*t.x,.5+.5*t.x); // Hue values of three colors to be used\n        \n        v3 n1 = hash32(id+46.98)*variance*.5+.5*t.x; // Two cell noises with Scalers for mixing and randomness\n        v3 n2 = hash32(id+67.47)*variance*.5+.5*t.z; \n        \n        v3 c1 = mix( c, v3(hue.x,n1.x,n2.x), weight.x ); // Color 1\n        v3 c2 = mix( c, v3(hue.y,n1.y,n2.y), weight.y ); // Color 2\n        v3 c3 = mix( c, v3(hue.z,n1.z,n2.z), weight.z ); // Color 3\n        \n        R color(mix( mix(c1,c2,n1), c3, n2 )); // Mix'em together using our noises - n1 and n2\n        \n    }\n    \n    void loop( out v4 col, in v2 uv ){\n    \n        uv = (2.0*uv-iR.xy)/iR.y; // Center screen UV\n        uv.y += 1.0;              // Stick UV to bottom of screen\n        uv *= 4.0;                // Zoom Out\n        \n        v2 colorID = uv;          // map color ID space \n        colorID.y += iTime;         //and move through time\n        \n        v3 c = pallet3( colorID, v3(0.5,0.5,0.5), 0.5 ); \n        // Change the Pallet using the id( palette space ), and a weight for each color.\n        \n        col = v4( c, 1.0 );\n\n    }\n    \n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n    #define loop mainImage\n    #define iR   iResolution.xy\n    \n    #define F float\n    #define I int\n    #define V void\n    \n    #define v2 vec2\n    #define v3 vec3\n    #define v4 vec4\n    \n    #define R return",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}