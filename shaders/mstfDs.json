{
    "Shader": {
        "info": {
            "date": "1697799479",
            "description": "Experimenting with buffering fractional brownian motion noise in 2D. If extended to 3D, this can result in massive performance gains when e.g., adding noise to SDFs (sampling a pre-computed noise vs recalculating it at every step is a huge deal)",
            "flags": 32,
            "hasliked": 0,
            "id": "mstfDs",
            "likes": 3,
            "name": "Buffered 2D Noise",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "warping",
                "buffers",
                "bufferednoise"
            ],
            "usePreview": 0,
            "username": "virmoesiae",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "/*  \n    Would you like a free, off-line, stand-alone shader \n    editor of the likes of ShaderToy in less than 9 MB?\n    If so, come get your free copy of ShaderThing at:\n    >>> https://github.com/virmodoetiae/shaderthing <<<\n*/\n\n// More info on what this is about in BufferA header description\n\n// Buffered fbm\nfloat bfbm(vec2 x)\n{\n    return texture(iChannel0, x).r;\n}\n\n// Inspired by https://iquilezles.org/articles/warp/\nfloat pattern(vec2 x)\n{\n    // Because of the tiled nature of bfbm, I need to be\n    // carful when it comes to sizing the sampling coordinate\n    // x, if I want to avoid evident non-randomness in the\n    // result due to tiling\n    x*=.25;\n    vec2 a = vec2(bfbm(2.*x+iTime/7.), 2.3*bfbm(.2*x+iTime/8.));\n    float b = bfbm(x+.25*a-.1*iTime);\n    vec2 c = vec2(bfbm(.5*x+2.*b), bfbm(x+.25*a));\n    return pow(bfbm(x+.75*c), 1./1.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 d = 3.*vec2(2.+cos(iTime/10.), 3.+sin(iTime/100.));\n    fragColor = vec4(vec3(pattern(3.*uv-d)), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float random(vec2 x)\n{\n    return fract(138912.*sin(dot(x, vec2(138.9, 191.2))));\n}\n\n// A 2D noise implementation I came up with that requires \n// one less call to the pseudo-random number generator and\n// one less mixing. Should be faster, (albeit more biased?), \n// than the standard Perlin noise. Easily extandable to 3D\nfloat triNoise(vec2 x)\n{\n    vec2 l = floor(x);\n    vec2 r = fract(x);\n    float s = float(int(r.x+r.y > 1.));\n    vec2 e = vec2(1.,0.);\n    float a = random(l+s*e.yx);\n    float b = random(l+s*e.yx+e.xy);\n    float c = random(l+s*e.xy+(1.-s)*e.yx);\n    r.y = s+r.y*(1.-2.*s);\n    r.x = (r.x-s*r.y)/(1.-r.y);\n    r *= r*(3.-2.*r); // Same cubic profile as smoothstep\n    return mix(mix(a, b, r.x), c, r.y);\n}\n\n// Fractional Brownian Motion noise\nfloat fbm(vec2 x)\n{\n    float n = 0.;\n    float A = 0.;\n    vec2 af = vec2(1., 2.);\n    for (int i=0; i<10; i++)\n    {\n        // Rotate each octave\n        float s = sin(float(2*i));\n        float c = cos(float(2*i));\n        mat2 m = mat2(c, s, -s, c);\n        n += af.x*triNoise(af.y*m*x);\n        A += af.x;\n        af *= vec2(.45,2.);\n    }\n    return n/A;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Here, the fbm noise is compute once and once only, and then\n// used by all other applications (e.g., but not done here, an SDF).\n// This can result in massive performance gains, but the main issue\n// is that this pre-computed noise will only be 'random' within a\n// tileable region of the buffer. This introduces some annoying\n// limitations to its usage, but if sampled carefully, it can be\n// a game-changer for very noise-heavy shaders\n\n// Keep in mind that this is buffered 2D noise. For 3D, you would \n// either need to use a Cubemap buffer, or devise a \n// continuous/seamless 3D-to-2D mapping\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Make the noise tileable\n    // If only ShaderToy allowed a mirror & repeat wrap option for\n    // the channel, I wouldn't have to do this, which unfortunately\n    // also reduces the actual size of the 'random' part of the\n    // texture by a factor of 4\n    if (uv.x>.5)\n        uv.x = 1.-uv.x;\n    if (uv.y>.5)\n        uv.y = 1.-uv.y;\n    \n    // Totally not necessary, just a smoothing of uv in [0.,.5]\n    // which by extensions ends up also smoothing the fbm\n    uv*=uv*(3.-4.*uv); \n    \n    // Calc fbm and store\n    float n = fbm(uv+.1); // The .1 is also totally not necessary\n    fragColor = vec4(n,1.,1.,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}