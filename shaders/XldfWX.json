{
    "Shader": {
        "info": {
            "date": "1604499903",
            "description": "Detailed rendering of a [url=https://www.tartanregister.gov.uk/tartanDetails?ref=2686]MacNeil of Barra[/url] tartan.\n\nOther patterns can be rendered by changing the threadcount and color palette in threadColor().",
            "flags": 0,
            "hasliked": 0,
            "id": "XldfWX",
            "likes": 8,
            "name": "MacNeil Tartan",
            "published": 3,
            "tags": [
                "2d",
                "tartan"
            ],
            "usePreview": 0,
            "username": "sheepmaster",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nconst float PI = 3.1415926536;\n\nconst float THREAD_SIZE = 4.;\nconst bool SHADOWS = true;\n\nconst float BASE_SCALE = 2.;\n\nfloat box(float x, float min, float max) {\n    return step(min, x) * step(x, max);\n}\n\nfloat linearstep(float minEdge, float maxEdge, float x) {\n    return clamp((x - minEdge) / (maxEdge - minEdge), 0., 1.);\n}\n\n// Alternates between 0 and 1 with a linear edge in between.\nfloat stripe(float x, float edge) {\n    // Interpolating linearly between the edges \n    // instead of using the Hermite polynomial in smoothstep()\n    // makes the stripe border appear less jagged.\n    return linearstep(-edge, edge, 2. * abs(2. * fract(x / 2.) - 1.) - 1.);\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nvec3 threadColor(float x) {\n    float tileCoord = fract(x / 344.);\n    \n    // Symmetric pattern\n    tileCoord = abs(2. * tileCoord - 1.);\n    \n    float threadNo = tileCoord * 172.;\n\n    // Colors:\n    // K=#101010#BLACK; G=#285800#GREEN; W=#E0E0E0#WHITE; Y=#E8C000#YELLOW; B=#1474B4#BLUE;\n    const vec3 tK = vec3(0x10, 0x10, 0x10) / 255.;\n    const vec3 tG = vec3(0x28, 0x58, 0x00) / 255.;\n    const vec3 tW = vec3(0xe0, 0xe0, 0xe0) / 255.;\n    const vec3 tY = vec3(0xe8, 0xc0, 0x00) / 255.;\n    const vec3 tB = vec3(0x14, 0x74, 0xb4) / 255.;\n\n    // Threadcount over a half sett with full count at the pivots:\n    // W/12 B56 K48 G48 K8 Y/12\n    // See https://www.tartanregister.gov.uk/threadcount for a description of the syntax.\n    return\n        tW * box(threadNo, 0., 6.) +\n        tB * box(threadNo, 6., 62.) +\n        tK * box(threadNo, 62., 110.) +\n        tG * box(threadNo, 110., 158.) +\n        tK * box(threadNo, 158., 166.) +\n        tY * box(threadNo, 166., 172.);\n}\n\n// Piecewise linear interpolation between x (a = 0), min(x, y) (a = 0.5), and y (a = 1).\nfloat saturatedMix(float x, float y, float a) {\n    float m = min(x, y);\n    return max(mix(x, m, 2. * a), mix(m, y, 2. * a - 1.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float theta = -PI + sin(iTime / 20.);\n    mat2 rotation = rotate2d(theta);\n\n    float scale = (1. + sin(iTime / 10.) / 30.) / BASE_SCALE;\n\n    vec2 coords = floor((fragCoord - iResolution.xy / 2.) * rotation * scale) + 0.5;\n\n    // Double the thread counts when adding shadows.\n    vec3 warp = threadColor(SHADOWS ? coords.x / 2. : coords.x);\n    vec3 weft = threadColor(SHADOWS ? coords.y / 2. : coords.y);\n\n    const float threadPeriod = SHADOWS ? THREAD_SIZE + 1. : THREAD_SIZE;\n    float d = (coords.x + coords.y + (THREAD_SIZE + 1.) / 2.);\n    float side = stripe(d / threadPeriod, 1. / threadPeriod * scale);\n\n    vec3 color = mix(warp, weft, side);\n    if (SHADOWS) {\n        color *= saturatedMix(\n            1. - stripe(coords.x - 0.5, scale) / 2.,\n            1. - stripe(coords.y + 0.5, scale) / 2.,\n            side);\n    }\n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}