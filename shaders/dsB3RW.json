{
    "Shader": {
        "info": {
            "date": "1667290152",
            "description": "Mandelbrot Set",
            "flags": 0,
            "hasliked": 0,
            "id": "dsB3RW",
            "likes": 1,
            "name": "Mandelbrot Set(simple 2d)",
            "published": 3,
            "tags": [
                "2d",
                "mandelbrotset"
            ],
            "usePreview": 0,
            "username": "kanayuki",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.y;\n    //float a0 = uv.x * 3. - 2.5;\n    //float b0 = uv.y * 3. -1.5;\n    \n    vec2 uv = (2.*fragCoord-iResolution.y)/iResolution.y;\n    float a0 = uv.x-1.;\n    float b0 = uv.y;\n    \n    \n    float a = a0;\n    float b = b0;\n\n    for(int k=0; k<500; k++){\n\n      float as = a0 + a*a-b*b;\n\n      b = b0 + 2.*a*b;\n\n      a = as;\n\n      if( a*a + b*b > 3. ){\n\n        // colour = factor(k);\n        \n        vec3 col = vec3(255,0,255);\n\n        // plotPointAt( a0, b0 );\n        \n        fragColor = vec4(col,1.0);\n\n        return;\n\n      }\n\n    }\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n\n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}