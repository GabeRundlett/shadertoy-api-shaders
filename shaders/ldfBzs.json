{
    "Shader": {
        "info": {
            "date": "1497529772",
            "description": "contour isolines from Analytical derivatives.\n\ntanh() has its limits in precision, limiting the utility of isolines.\nmost noticable when you hold left mouse button near the top left corner.\ntanh(x) has an upper bound for x,if mouse is close to top border.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldfBzs",
            "likes": 6,
            "name": "limits of analytic isolines",
            "published": 3,
            "tags": [
                "noise",
                "contour",
                "isoline"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 747
        },
        "renderpass": [
            {
                "code": "//grandparent: https://www.shadertoy.com/view/MdfcRS (not analytical derivatives)\n//parent:      https://www.shadertoy.com/view/XdlyzS (    analytical derivatives)\n\n//this just makes things more variable, for mouse input:\n//- iscount, number of isolines\n//- isoblur, thickness of isolines\n\n#define tau acos(-1.)\n\n// --- noise from procedural pseudo-Perlin ( adapted from IQ )\n\nfloat noise3( vec3 x , out vec2 g) {\n    vec3 p = floor(x),f = fract(x),\n        F = f*f*(3.-2.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    float v000 = hash3(p+vec3(0,0,0)), v100 = hash3(p+vec3(1,0,0)),\n          v010 = hash3(p+vec3(0,1,0)), v110 = hash3(p+vec3(1,1,0)),\n          v001 = hash3(p+vec3(0,0,1)), v101 = hash3(p+vec3(1,0,1)),\n          v011 = hash3(p+vec3(0,1,1)), v111 = hash3(p+vec3(1,1,1));\n    g.x = 6.*f.x*(1.-f.x)                        // gradients\n          * mix( mix( v100 - v000, v110 - v010, F.y),\n                 mix( v101 - v001, v111 - v011, F.y), F.z);\n    g.y = 6.*f.y*(1.-f.y)\n          * mix( mix( v010 - v000, v110 - v100, F.x),\n                 mix( v011 - v001, v111 - v101, F.x), F.z);\n    \n    return mix( mix(mix( v000, v100, F.x),       // triilinear interp\n                    mix( v010, v110, F.x),F.y),\n                mix(mix( v001, v101, F.x),       \n                    mix( v011, v111, F.x),F.y), F.z);}\n\n\nfloat noise(vec3 x, out vec2 g) {     // pseudoperlin improvement from foxes idea \n    vec2 g0,g1;\n    float n = (noise3(x,g0)+noise3(x+11.5,g1)) / 2.;\n    g = (g0+g1)/2.;\n    return n;}\n\n//#define camLens 1.\n//#define frame(u) camLens*(u-.5*iResolution.xy)/iResolution.y\n\n\nvoid mainImage( out vec4 O, vec2 U ) // ------------ draw isovalues\n{\n    vec2 m=iMouse.xy/iResolution.xy;\n    float t=iTime*.5;\n    if(iMouse.z<=0.)m=(vec2(sin(t),cos(t*.61))*.5+.5)*.7;//if mouse is not down\n    float isoblur  =(m.y+1./iResolution.y)*9.;\n    float isocount = m.x*90.;\n\n    float tauc=tau*isocount;\n    vec2 R = iResolution.xy;\n    vec2 V=U;\n    U *= 8./R.y;\n    vec2 g;\n    float n = noise(vec3(U,.1*iTime), g);\n    float taun=tauc*n;\n    float v = sin(taun);\n    //if top half\n    if(V.y/iResolution.y>0.5) g*=tauc*cos(taun) * 8./R.y; //analytic derivatives\n    //if bottom half\n      else g*= (fwidth(n)               )*R.y;  //fast derivatives (look much worse here)\n    //else g*= (abs(dFdx(n))+abs(dFdy(n))*R.y); //fast derivatives (look much worse here)\n    //\n    //O = vec4( sin(10.*atan(g.y,g.x)), v, 0,0); return; //optional  debug\n    //\n    //v = tanh(isoblur*abs(v) / (abs(g.x)+abs(g.y))); // better antialiasing than smoothstep\n    v=tanh(min(isoblur*abs(v)/(abs(g.x)+abs(g.y)),isocount)); // some systems dislike tanh(big)\n    n=floor(n*isocount)/isocount;\n\tO=v*(.6+cos(10.*n+vec4(0,2.1,-2.1,0)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}