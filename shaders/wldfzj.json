{
    "Shader": {
        "info": {
            "date": "1613100366",
            "description": "Fast particle rendering using a grid search. I am having trouble keeping the particles from getting lost when I try to change their velocities.",
            "flags": 32,
            "hasliked": 0,
            "id": "wldfzj",
            "likes": 3,
            "name": "Fast Particle Rendering",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "fast",
                "rendering",
                "particle"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    // Start search\n    for (float x=fragCoord.x - SEARCH_SIZE; x < fragCoord.x + SEARCH_SIZE; x++) {\n        for (float y=fragCoord.y - SEARCH_SIZE; y < fragCoord.y + SEARCH_SIZE; y++) {\n            // If the search is within the texture\n            if (x >= 0.0 && x < iChannelResolution[0].x && y >= 0.0 && y < iChannelResolution[0].y) {\n                vec3 particle = texelFetch(iChannel0, ivec2(x, y), 0).xyz;\n                if (particle.z > 0.5) { // There is a particle here\n\n                    // Render the particle\n                    particle.xy *= 5.0;\n                    vec3 color = vec3(sin(particle.x), cos(particle.y * particle.x), cos(particle.y - particle.x));\n                    fragColor.rgb = mix(fragColor.rgb, color, smoothstep(1.0, 0.0, length(fragCoord - vec2(x, y)) - PARTICLE_SIZE * SEARCH_SIZE));\n\n                }\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float Hash21(in vec2 p) {\n    p += iDate.w;\n\tvec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 Hash22(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n\n}\n\n// vec3(initial velocity, particle exists here)\nvec3 getParticle(in vec2 p) {\n    return vec3(Hash22(p) * 4.0 - 1.0, Hash21(p) > 0.8);\n}\n\n// Update particle velocity given its current velocity and position\nvec2 updateVelocity(in vec2 vel, in vec2 pos) {\n    return vel;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame == 0) {\n        fragColor.xyz = getParticle(fragCoord);\n    }\n\n    if (iFrame > 0) {\n        if (iFrame % FPU == 0) {\n            // Start search\n            for (float x=fragCoord.x - SEARCH_SIZE; x < fragCoord.x + SEARCH_SIZE; x++) {\n                for (float y=fragCoord.y - SEARCH_SIZE; y < fragCoord.y + SEARCH_SIZE; y++) {\n                    // If the search is within the texture\n                    if (x >= 0.0 && x < iResolution.x && y >= 0.0 && y < iResolution.y) {\n                        vec3 particle = texelFetch(iChannel0, ivec2(x, y), 0).xyz;\n                        if (particle.z > 0.5) { // There is a particle here\n                            vec2 nextPos = vec2(x, y) + particle.xy;\n                            if (length(fragCoord - nextPos) < EPSILON) { // The particle will land in the texel\n                                fragColor.xyz = particle;\n                                fragColor.xy = updateVelocity(particle.xy, fragCoord);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        else {\n            // If it is not time to update, maintain the particle states\n            fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Particle settings:\n#define PARTICLE_SIZE 0.5\n\n// Area that gets searched for particles\n#define SEARCH_SIZE 5.0\n\n// Small error margin\n#define EPSILON 0.5\n\n// Frames per update\n#define FPU 2",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}