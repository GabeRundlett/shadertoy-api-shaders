{
    "Shader": {
        "info": {
            "date": "1563463702",
            "description": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa",
            "flags": 0,
            "hasliked": 0,
            "id": "3lXSRj",
            "likes": 0,
            "name": "AAAAAAAAAAAAAAAAAAAA",
            "published": 3,
            "tags": [
                "sdf",
                "trippy"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "const float CLOSE_ENOUGH = 0.001;\nconst vec3 COLOR = vec3(1.0,.0,.0);\nconst vec3 BG_COLOR = vec3(.15,.0,.0);\nconst vec3 SHADOW_COLOR = clamp((COLOR+vec3(.0,.1,.1))/4.0, .0, 1.0);\n\nstruct sphere\n{\n\tvec3 c;\n    float r;\n};\n\n\nfloat sphereDist(vec3 p, sphere s)\n{\n\treturn distance(p, s.c) - s.r;\n}\n\n//from iq : https://iquilezles.org/articles/distfunctions\nfloat opSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat sdf(vec3 p)\n{\n    float returnVal = .0;\n    vec3 rep = vec3(1.0)*(1. + abs(sin(iTime*.11) * 10.0));\n\tvec3 pr = mod(p, rep) - .5 * rep; \n    \n    sphere s1 = sphere(vec3(.0, .1, .0), .07);\n    sphere s2 = sphere(vec3(sin(iTime) * .1, cos(iTime)*.2, .1), .1);\n    sphere s3 = sphere(vec3(.1,.1,.1), .04);\n    returnVal = opSmoothUnion(sphereDist(pr, s1), sphereDist(pr,s2), .2);\n    returnVal = opSmoothUnion(returnVal, sphereDist(pr, s3), .15);\n\treturn returnVal; \n}\n\n//from iq https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 p )\n{\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sdf( p + k.xyy*CLOSE_ENOUGH ) + \n                      k.yyx*sdf( p + k.yyx*CLOSE_ENOUGH ) + \n                      k.yxy*sdf( p + k.yxy*CLOSE_ENOUGH ) + \n                      k.xxx*sdf( p + k.xxx*CLOSE_ENOUGH ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv    = fragCoord.xy / iResolution.xy - vec2(0.5);\n         uv.x *= iResolution.x / iResolution.y;\n\tvec3 cameraPos = vec3(.0,.0,-4.);\n    \n    // Time varying pixel color\n    vec3 ro = vec3(cameraPos.x + uv.x, cameraPos.y + uv.y, cameraPos.z);\n\tvec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    vec3 col = BG_COLOR;\n    float dist = .0;\n    \n    vec3 lightDir = normalize(vec3(1.0, 0.0, -1.0));\n    float renderDistance = 300.0 + abs(sin(iTime*5.0))*300.0;\n    while(dist < renderDistance)\n    {\n        float d = sdf(ro + rd * dist);\n        if(d < CLOSE_ENOUGH)\n        {\n            col = COLOR;\n            vec3 hit = ro + rd * dist;\n    \t\tcol *= mix(SHADOW_COLOR, col, max(dot(calcNormal(hit), lightDir), .0));\n        \tbreak;\n        }\n       \tdist += d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0f);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}