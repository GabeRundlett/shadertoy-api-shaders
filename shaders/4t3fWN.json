{
    "Shader": {
        "info": {
            "date": "1539607980",
            "description": "Simple parametric knot curves - updated (should have done it this way originally)",
            "flags": 0,
            "hasliked": 0,
            "id": "4t3fWN",
            "likes": 10,
            "name": "Knot Curves 2",
            "published": 3,
            "tags": [
                "knot"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 536
        },
        "renderpass": [
            {
                "code": "// \"Knot Curves 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 Rot2D (vec2 q, float a);\nmat3 DirToRMatT (vec3 vd, vec3 vu);\nvec3 HsvToRgb (vec3 c);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_KNOT  11\n\nvec3 qnHit, ltDir, knc[N_KNOT], kns[N_KNOT];\nfloat dstFar, tCur, sclFac, qSeg;\nint knType;\nconst float pi = 3.14159;\n\nfloat CapsHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  vec3 s;\n  float dMin, d, a, b, w;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - rad * rad);\n  if (w > 0. && a > 0.) {\n    d = - b - sqrt (w);\n    d /= a;\n    s = ro + d * rd;\n    if (d > 0. && abs (s.z) < len) {\n      dMin = d;\n      qnHit = vec3 (s.xy, 0.);\n    } else {\n      ro.z -= len * sign (s.z);\n      b = dot (rd, ro);\n      w = b * b - (dot (ro, ro) - rad * rad);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0.) {\n          dMin = d;\n          qnHit = ro + d * rd;\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\n// Knot parametrizations from A.K. Trautwein thesis (University of Iowa, 1995) (many more)\n\nvoid KtSetup ()\n{\n  for (int k = 0; k < N_KNOT; k ++) {\n    knc[k] = vec3 (0);  kns[k] = vec3 (0);\n  }\n  if (knType == 1) {  // 3.1 trefoil knot\n     knc[0] = vec3 ( 41,   36,   0);   kns[0] = vec3 (-18,   27,   45);\n     knc[1] = vec3 (-83, -113,  -30);  kns[1] = vec3 (-83,   30,  113);\n     knc[2] = vec3 (-11,   11,  -11);  kns[2] = vec3 ( 27,  -27,   27);\n     sclFac = 0.015;\n  } else if (knType == 2) {  // 4.1 figure 8 knot\n     knc[0] = vec3 (  32,   94,   16);  kns[0] = vec3 (-51,   41,   73);\n     knc[1] = vec3 (-104,  113, -211);  kns[1] = vec3 (-34,    0,  -39);\n     knc[2] = vec3 ( 104,  -68,  -99);  kns[2] = vec3 (-91, -124,  -21);\n     sclFac = 0.008;\n  } else if (knType == 3) {  // 5.1 knot\n     knc[0] = vec3 (  88,   89,   44);  kns[0] = vec3 ( 115,  -32,  -69);\n     knc[1] = vec3 (-475, -172,   34);  kns[1] = vec3 (-127,  294,  223);\n     knc[2] = vec3 ( -87,   76,   16);  kns[2] = vec3 (  36,  102,  120);\n     knc[3] = vec3 (  11,  -61,   42);  kns[3] = vec3 ( -19,  113, -125);\n     sclFac = 0.0045;\n  } else if (knType == 4) {  // 5.2 knot\n     knc[0] = vec3 ( -33,  -57,   34);  kns[0] = vec3 ( 43,   99, -21);\n     knc[1] = vec3 (   0,  -54, -100);  kns[1] = vec3 (214, -159, -93);\n     knc[2] = vec3 (-101, -117,  -27);  kns[2] = vec3 (-47,   -5, -16);\n     knc[3] = vec3 (   0,  -31,   52);  kns[3] = vec3 ( 11,  -45,  84);\n     sclFac = 0.008;\n  } else if (knType == 5) {  // granny knot\n     knc[0] = vec3 (-22,   0,  0);  kns[0] = vec3 (-128,   0,   0);\n     knc[1] = vec3 (  0, -10,  0);  kns[1] = vec3 (   0, -27,   0);\n     knc[2] = vec3 (-44,   0, 70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[3] = vec3 (  0,  38,  0);  kns[3] = vec3 (   0,  38,   0);\n     sclFac = 0.016;\n  } else if (knType == 6) {  // square knot\n     knc[0] = vec3 ( -22,  11,   0);  kns[0] = vec3 (-128,   0,   0);\n     knc[2] = vec3 ( -44, -43,  70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[4] = vec3 (   0,  34,   8);  kns[4] = vec3 (   0, -39,  -9);\n     sclFac = 0.016;\n  } else if (knType == 7) {  // 6.1 knot\n     knc[0] = vec3 (  12,   29,  -30);  kns[0] = vec3 ( 20,  78, -78);\n     knc[1] = vec3 (-163, -180, -111);  kns[1] = vec3 ( 76,  58,  37);\n     knc[2] = vec3 ( -87,   88,  -67);  kns[2] = vec3 (-15,  72, -51);\n     knc[3] = vec3 ( -21,    0,   31);  kns[3] = vec3 ( 14, -14,   8);\n     knc[4] = vec3 (  24,    0,  -11);  kns[4] = vec3 (-50,   0,  65);\n     sclFac = 0.008;\n  } else if (knType == 8) {  // 6.2 knot\n     knc[0] = vec3 (  -6,  -21,  -18);  kns[0] = vec3 (-21,  -24,  -13);\n     knc[1] = vec3 (-195, -207,  113);  kns[1] = vec3 ( 92,  -72, -107);\n     knc[2] = vec3 ( -64,  112,   86);  kns[2] = vec3 (-23,   -7,   -9);\n     knc[3] = vec3 (  -6,  -13,  -26);  kns[3] = vec3 ( 13,  -40,   -7);\n     knc[4] = vec3 (  24,  -27,   24);  kns[4] = vec3 ( 15,   -3,   33);\n     knc[5] = vec3 (   0,  -17,   21);  kns[5] = vec3 ( 41,    0,   31);\n     sclFac = 0.008;\n  } else if (knType == 9) {  // 6.3 knot\n     knc[0] = vec3 (-40,   90,  52);  kns[0] = vec3 ( 32,  89,  64);\n     knc[1] = vec3 ( 69, -142,  53);  kns[1] = vec3 (-12, 147,  35);\n     knc[2] = vec3 (120,   74,  77);  kns[2] = vec3 (-52,  85, -87);\n     knc[3] = vec3 (-56,    0, 101);  kns[3] = vec3 ( 46, -56, -19);\n     knc[4] = vec3 (  0,   23,  -5);  kns[4] = vec3 (-17,   0,   2);\n     knc[5] = vec3 ( 14,   16,   3);  kns[5] = vec3 ( 19,   7,   9);\n     sclFac = 0.008;\n  } else if (knType == 10) {  // 7.2 Knot\n     knc[0] = vec3 (  10, 42, 0);  kns[0] = vec3 (115, -104, 30);\n     knc[1] = vec3 (-184, -252,  20);  kns[1] = vec3 ( 10,  47,  19);\n     knc[2] = vec3 (   0,  -21,   6);  kns[2] = vec3 (101, -65, -31);\n     knc[3] = vec3 (  23,  -23,  -4);  kns[3] = vec3 ( 55, -23, -24);\n     knc[4] = vec3 ( -38,   36, -44);  kns[4] = vec3 ( -6, -10, -50);\n     knc[5] = vec3 ( -14,  -13,  31);  kns[5] = vec3 ( 8,    2,  39);\n     knc[6] = vec3 (  16,  -18, -16);  kns[6] = vec3 ( 14,  -9,  23);\n     sclFac = 0.007;\n  } else if (knType == 11) {  // 7.7 Knot\n     knc[0] = vec3 ( -5,   17, -28);  kns[0] = vec3 (  0,   21,   9);\n     knc[1] = vec3 (  8, -174, 110);  kns[1] = vec3 ( 83,   13,   4);\n     knc[2] = vec3 ( 87,  -15,  11);  kns[2] = vec3 (100,    3,  -6);\n     knc[3] = vec3 ( -5,   -9, -46);  kns[3] = vec3 ( 22,   46, -17);\n     knc[4] = vec3 (-10,   16,  32);  kns[4] = vec3 ( 10,  -25,  -9);\n     knc[5] = vec3 ( -2,  -21, -12);  kns[5] = vec3 (-10,    7,  -9);\n     knc[6] = vec3 (  5,   -9,  -9);  kns[6] = vec3 (  6,   -3,  18);\n     sclFac = 0.01;\n  }\n}\n\nvec3 KtPoint (float a)\n{\n  vec3 r;\n  float f;\n  r = vec3 (0.);\n  for (int k = 0; k < N_KNOT; k ++) {\n    f = float (k + 1) * a;\n    r += knc[k] * cos (f) + kns[k] * sin (f);\n  }\n  return sclFac * r;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  mat3 rMat, rMatS;\n  vec3 r, rp, qnHitS;\n  float dAng, dMin, d;\n  const float ndAng = 160.;\n  dMin = dstFar;\n  dAng = 2. * pi / ndAng;\n  r = KtPoint (2. * pi - dAng);\n  for (float j = 0.; j < ndAng; j ++) {\n    rp = r;\n    r = KtPoint (j * dAng);\n    rMat = DirToRMatT (normalize (r - rp), vec3 (0., 0., 1.));\n    d = CapsHit ((ro - 0.5 * (r + rp)) * rMat, rd * rMat, 0.1, 0.5 * length (r - rp));\n    if (d < dMin) {\n      dMin = d;\n      rMatS = rMat;\n      qnHitS = qnHit;\n      qSeg = j;\n    }\n  }\n  if (dMin < dstFar) {\n    qnHit = rMatS * normalize (qnHitS);\n    qSeg /= ndAng;\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = VaryNf (32. * ro, qnHit, 1.);\n    col = HsvToRgb (vec3 (qSeg, 1., 0.9));\n    col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else col = vec3 (0.2, 0.2, 0.22) * (0.5 + 0.3 * rd.y);\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 rd, ro, col;\n  vec2 canvas, uv, uvv, ca, sa, ori;\n  float az, el, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  knType = 1 + int (mod (floor (0.2 * tCur + 3.), float (N_KNOT)));\n  KtSetup ();\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    t = floor (0.6 * tCur) + smoothstep (0., 0.2, mod (0.6 * tCur, 1.));\n    az = 0.2 * t;\n    el = 0.23 * t;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -20.);\n  dstFar = 50.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.), 0.5 * pi * (a + 0.5));\n    rd = vuMat * normalize (vec3 (uvv, 6.));\n    col += (1. / naa) * ((abs (uvv.x) < 1.) ? ShowScene (ro, rd) :\n       vec3 (0.2, 0.2, 0.22) * (0.5 + 0.3 * rd.y));\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nmat3 DirToRMatT (vec3 vd, vec3 vu)\n{\n  vec3 vc;\n  vc = normalize (cross (vu, vd));\n  return mat3 (vc, cross (vd, vc), vd);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. -\n     3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}