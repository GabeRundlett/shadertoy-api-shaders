{
    "Shader": {
        "info": {
            "date": "1621566419",
            "description": "A fantasy shader inspired by the mermaid scale textures\n",
            "flags": 0,
            "hasliked": 0,
            "id": "stfGzn",
            "likes": 2,
            "name": "Mermaid scales",
            "published": 3,
            "tags": [
                "2d",
                "fish",
                "fantasy",
                "scales",
                "mermaid"
            ],
            "usePreview": 0,
            "username": "stseagle",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "float random (vec2 st) {\n    // Book of Shaders pseudo-random\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// The shadows that give the scales the primary shape\nfloat fishScale (in vec2 _st) {\n    float _radius =1.15;\n    vec2 dist = (_st-vec2(0.5,1.0));\n    dist = vec2(dist.x, dist.y*0.55);\n\tfloat shadow = 1.- smoothstep(_radius-(_radius*0.03),\n                         _radius+(_radius*0.03),\n                         dot(dist,dist)*4.6509) + \n           smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.23),\n                         dot(dist,dist)*4.560);\\\n    \n    \n    return shadow;\n}\n\nfloat highlights (in vec2 _st, in vec2 fragCoord) {\n    float _radius =1.15;\n    vec2 dist = (_st-vec2(0.5,1.0));\n    dist = vec2(dist.x, dist.y*0.55);\n    float highlight = smoothstep(_radius-(_radius*0.1),\n                         _radius+(_radius*0.3),\n                         dot(dist,dist)*6.1960) - \n           smoothstep(_radius-(_radius*0.2),\n                         _radius+(_radius*0.2),\n                         dot(dist,dist)*4.9) ;\n    \n    \n    return 0.7 * highlight * (1. - _st.y);\n}\n\nfloat glitter(in vec2 _st, in vec2 fragCoord) {\n    _st *= 30.;\n    _st.x /= .55;\n    \n    float glitter = random(floor(_st + fragCoord));\n    \n    _st *= 0.95;\n    float drop = random(floor(_st + fragCoord + iTime));\n    \n    return glitter * glitter * glitter * drop;\n}\n\n// Make some of the scales a slightly different color\nvec4 colorMod(in vec2 _st, in vec2 _coords) \n{\n    vec3 forward = vec3(.8,0.65,0.4);\n    vec3 behind = vec3(0.3,0.3,0.6);\n    \n    float _radius =0.8;\n    vec2 dist = (_st-vec2(0.5,1.0));\n    dist = vec2(dist.x, dist.y*0.55);\n    \n    vec3 mod = mix(forward, behind, random(_coords));\n    float cutoff = 1.-step(_radius, dot(dist,dist)*3.3);\n    return vec4(mod, .4 * (1. - _st.y)*cutoff);\n     \n}\n\n\n// Either darken or lighten a channel. Use negative amt to darken\nfloat amp(float inChannel, float amt) {\n    return inChannel + amt*(1.- inChannel);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scaleSize = 150.0;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/max(iResolution.y, iResolution.x);\n    uv.x*=0.55;\n\n    // Time varying pixel color\n    vec3 col = 0.45 + 0.4*cos(0.05*iTime+uv.xyx+vec3(4,2,0));\n    vec3 highlightCol = vec3(amp(col.r, 0.6), amp(col.g, 0.6), amp(col.b, 0.2));\n    \n    \n    // Overlay the fishscales\n    // brick tile formula from the Book of Shaders\n    vec2 st = uv * floor(iResolution.x/scaleSize);\n         st.x += step(1., mod(st.y,2.0)) * 0.5;\n    vec2 coords = floor(st); \n    st = fract(st);\n    \n    float highlightRipple = 0.75+ 0.25*sin(iTime + 6.28*(fragCoord.x + fragCoord.y));\n    \n    \n    col = mix(col,highlightCol, highlightRipple * highlights(st, uv));\n    col = mix(col,highlightCol, highlightRipple * glitter(st, uv));\n    col *= fishScale(st);\n    \n    vec4 cm = colorMod(st, coords);\n    \n    col = mix(col, cm.rgb, cm.a); \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}