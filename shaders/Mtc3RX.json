{
    "Shader": {
        "info": {
            "date": "1470503706",
            "description": "Twisting around each vertex of an icosahedron, a sort of smooth spidroball.",
            "flags": 0,
            "hasliked": 0,
            "id": "Mtc3RX",
            "likes": 159,
            "name": "Icosahedron twist",
            "published": 3,
            "tags": [
                "sdf",
                "icosahedron",
                "twist",
                "spidroball"
            ],
            "usePreview": 0,
            "username": "tdhooper",
            "viewed": 4338
        },
        "renderpass": [
            {
                "code": "// --------------------------------------------------------\n// OPTIONS\n// --------------------------------------------------------\n\n//#define DEBUG\n\n\n#define PI 3.14159265359\n#define PHI (1.618033988749895)\n\nfloat t;\n\n#define saturate(x) clamp(x, 0., 1.)\n\n// --------------------------------------------------------\n// HG_SDF\n// https://www.shadertoy.com/view/Xs3GRB\n// --------------------------------------------------------\n\n#define GDFVector0 vec3(1, 0, 0)\n#define GDFVector1 vec3(0, 1, 0)\n#define GDFVector2 vec3(0, 0, 1)\n\n#define GDFVector3 normalize(vec3(1, 1, 1 ))\n#define GDFVector4 normalize(vec3(-1, 1, 1))\n#define GDFVector5 normalize(vec3(1, -1, 1))\n#define GDFVector6 normalize(vec3(1, 1, -1))\n\n#define GDFVector7 normalize(vec3(0, 1, PHI+1.))\n#define GDFVector8 normalize(vec3(0, -1, PHI+1.))\n#define GDFVector9 normalize(vec3(PHI+1., 0, 1))\n#define GDFVector10 normalize(vec3(-PHI-1., 0, 1))\n#define GDFVector11 normalize(vec3(1, PHI+1., 0))\n#define GDFVector12 normalize(vec3(-1, PHI+1., 0))\n\n#define GDFVector13 normalize(vec3(0, PHI, 1))\n#define GDFVector13b normalize(vec3(0, PHI, -1))\n#define GDFVector14 normalize(vec3(0, -PHI, 1))\n#define GDFVector14b normalize(vec3(0, -PHI, -1))\n#define GDFVector15 normalize(vec3(1, 0, PHI))\n#define GDFVector15b normalize(vec3(1, 0, -PHI))\n#define GDFVector16 normalize(vec3(-1, 0, PHI))\n#define GDFVector16b normalize(vec3(-1, 0, -PHI))\n#define GDFVector17 normalize(vec3(PHI, 1, 0))\n#define GDFVector17b normalize(vec3(PHI, -1, 0))\n#define GDFVector18 normalize(vec3(-PHI, 1, 0))\n#define GDFVector18b normalize(vec3(-PHI, -1, 0))\n\n#define fGDFBegin float d = 0.;\n\n// Version with variable exponent.\n// This is slow and does not produce correct distances, but allows for bulging of objects.\n#define fGDFExp(v) d += pow(abs(dot(p, v)), e);\n\n// Version with without exponent, creates objects with sharp edges and flat faces\n#define fGDF(v) d = max(d, abs(dot(p, v)));\n\n#define fGDFExpEnd return pow(d, 1./e) - r;\n#define fGDFEnd return d - r;\n\n// Primitives follow:\n\nfloat fDodecahedron(vec3 p, float r) {\n    fGDFBegin\n    fGDF(GDFVector13) fGDF(GDFVector14) fGDF(GDFVector15) fGDF(GDFVector16)\n    fGDF(GDFVector17) fGDF(GDFVector18)\n    fGDFEnd\n}\n\nfloat fIcosahedron(vec3 p, float r) {\n    fGDFBegin\n    fGDF(GDFVector3) fGDF(GDFVector4) fGDF(GDFVector5) fGDF(GDFVector6)\n    fGDF(GDFVector7) fGDF(GDFVector8) fGDF(GDFVector9) fGDF(GDFVector10)\n    fGDF(GDFVector11) fGDF(GDFVector12)\n    fGDFEnd\n}\n\nfloat vmax(vec3 v) {\n    return max(max(v.x, v.y), v.z);\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n    return dot(p, n) + distanceFromOrigin;\n}\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// Reflect space at a plane\nfloat pReflect(inout vec3 p, vec3 planeNormal, float offset) {\n    float t = dot(p, planeNormal)+offset;\n    if (t < 0.) {\n        p = p - (2.*t)*planeNormal;\n    }\n    return sign(t);\n}\n\n// --------------------------------------------------------\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\n// --------------------------------------------------------\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(\n        oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n        oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n        oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c\n    );\n}\n\n// --------------------------------------------------------\n// knighty\n// https://www.shadertoy.com/view/MsKGzw\n// --------------------------------------------------------\n\nint Type=5;\nvec3 nc;\nvoid initIcosahedron() {//setup folding planes and vertex\n    float cospin=cos(PI/float(Type)), scospin=sqrt(0.75-cospin*cospin);\n    nc=vec3(-0.5,-cospin,scospin);//3rd folding plane. The two others are xz and yz planes\n}\n\nvoid pModIcosahedron(inout vec3 p) {\n    p = abs(p);\n    pReflect(p, nc, 0.);\n    p.xy = abs(p.xy);\n    pReflect(p, nc, 0.);\n    p.xy = abs(p.xy);\n    pReflect(p, nc, 0.);\n}\n\n// --------------------------------------------------------\n// IQ\n// https://www.shadertoy.com/view/ll2GD3\n// --------------------------------------------------------\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\n// --------------------------------------------------------\n// MAIN\n// --------------------------------------------------------\n\nvec3 vMin(vec3 p, vec3 a, vec3 b, vec3 c) {\n    float la = length(p - a);\n    float lb = length(p - b);\n    float lc = length(p - c);\n    if (la < lb) {\n        if (la < lc) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (lb < lc) {\n            return b;\n        } else {\n            return c;\n        }\n    }\n}\n\n// Nearest icosahedron vertex\nvec3 icosahedronVertex(vec3 p) {\n    if (p.z > 0.) {\n        if (p.x > 0.) {\n            if (p.y > 0.) {\n                return vMin(p, GDFVector13, GDFVector15, GDFVector17);\n            } else {\n                return vMin(p, GDFVector14, GDFVector15, GDFVector17b);\n            }\n        } else {\n            if (p.y > 0.) {\n                return vMin(p, GDFVector13, GDFVector16, GDFVector18);\n            } else {\n                return vMin(p, GDFVector14, GDFVector16, GDFVector18b);\n            }\n        }\n    } else {\n        if (p.x > 0.) {\n            if (p.y > 0.) {\n                return vMin(p, GDFVector13b, GDFVector15b, GDFVector17);\n            } else {\n                return vMin(p, GDFVector14b, GDFVector15b, GDFVector17b);\n            }\n        } else {\n            if (p.y > 0.) {\n                return vMin(p, GDFVector13b, GDFVector16b, GDFVector18);\n            } else {\n                return vMin(p, GDFVector14b, GDFVector16b, GDFVector18b);\n            }\n        }\n    }\n}\n\n// Nearest vertex and distance.\n// Distance is roughly to the boundry between the nearest and next\n// nearest icosahedron vertices, ensuring there is always a smooth\n// join at the edges, and normalised from 0 to 1\nvec4 icosahedronAxisDistance(vec3 p) {\n    vec3 iv = icosahedronVertex(p);\n    vec3 originalIv = iv;\n\n    vec3 pn = normalize(p);\n    pModIcosahedron(pn);\n    pModIcosahedron(iv);\n\n    float boundryDist = dot(pn, vec3(1, 0, 0));\n    float boundryMax = dot(iv, vec3(1, 0, 0));\n    boundryDist /= boundryMax;\n\n    float roundDist = length(iv - pn);\n    float roundMax = length(iv - vec3(0, 0, 1.));\n    roundDist /= roundMax;\n    roundDist = -roundDist + 1.;\n\n    float blend = 1. - boundryDist;\n\tblend = pow(blend, 6.);\n    \n    float dist = mix(roundDist, boundryDist, blend);\n\n    return vec4(originalIv, dist);\n}\n\n// Twists p around the nearest icosahedron vertex\nvoid pTwistIcosahedron(inout vec3 p, float amount) {\n    vec4 a = icosahedronAxisDistance(p);\n    vec3 axis = a.xyz;\n    float dist = a.a;\n    mat3 m = rotationMatrix(axis, dist * amount);\n    p *= m;\n}\n\nfloat model(vec3 p) {\n    # ifndef DEBUG\n    \tfloat wobble = sin(PI/2. * t);\n    \tfloat wobbleX2 = sin(PI/2. * t*2.);\n    \tpR(p.xy, wobbleX2 * .05);\n    \tpR(p.xz, wobbleX2 * .05);\n    \tfloat a = -wobble * 3.;\n        pTwistIcosahedron(p, a);\n    # endif\n    return fIcosahedron(p, 1.);\n}\n\n// Spectrum from 0 - 1\n// Brightens for values over 1\n// Darkens for values below 0\nvec3 debugSpectrum(float n) {\n    vec3 c = spectrum(n);\n    c *= 1. + min(sign(n), .0) * .3;\n    c *= 1. + max(sign(n - 1.), 0.);\n    return c;\n}\n\nvec3 material(vec3 p, vec3 norm, vec3 ref) {\n    # ifdef DEBUG\n        vec4 a = icosahedronAxisDistance(p);\n        float dist = a.a;\n        return debugSpectrum(dist);\n    # else\n        return norm * 0.5 + 0.5;\n    # endif\n}\n\n\n// The MINIMIZED version of https://www.shadertoy.com/view/Xl2XWt\n\n\nconst float MAX_TRACE_DISTANCE = 30.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 100;\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    return (d1.x<d2.x) ? d1 : d2;\n}\n\n\n//--------------------------------\n// Modelling\n//--------------------------------\nvec2 map( vec3 p ){\n    vec2 res = vec2(model(p), 1.);\n    return res;\n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n    float res = -1.0;\n    float id = -1.;\n\n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n\n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n        vec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n\n    return vec2( res , id );\n}\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera(out vec3 camPos, out vec3 camTar, out float camRoll, in float time, in vec2 mouse) {\n\n    float x = mouse.x;\n    float y = mouse.y;\n    \n    x += .68;\n    y += .44;\n    \n    float dist = 3.3;\n    float height = 0.;\n    camPos = vec3(0,0,-dist);\n    vec3 axisY = vec3(0,1,0);\n    vec3 axisX = vec3(1,0,0);\n    mat3 m = rotationMatrix(axisY, -x * PI * 2.);\n    axisX *= m;\n    camPos *= m;\n    m = rotationMatrix(axisX, -(y -.5) * PI*2.);\n    camPos *= m;\n    camPos.y += height;\n    camTar = -camPos + vec3(.0001);\n    camTar.y += height;\n    camRoll = 0.;\n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n        map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n        map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n        map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n    return normalize(nor);\n}\n\n\n\nvec3 render( vec2 res , vec3 ro , vec3 rd ){\n\n    vec3 color = vec3(.04,.045,.05);\n    color = vec3(.7, .8, .8);\n    vec3 pos = ro + rd * res.x;\n\n    if (res.y == 1.){\n        vec3 norm = calcNormal( pos );\n        vec3 ref = reflect(rd, norm);\n        color = material(pos, norm, ref);\n    }\n\n  return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initIcosahedron();\n    t = iTime - .25;\n    t = mod(t, 4.);\n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    vec3 camPos = vec3( 0., 0., 2.);\n    vec3 camTar = vec3( 0. , 0. , 0. );\n    float camRoll = 0.;\n\n    // camera movement\n    doCamera(camPos, camTar, camRoll, iTime, m);\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( camPos, camTar, camRoll );  // 0.0 is the camera roll\n\n    // create view ray\n    vec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    vec2 res = calcIntersection( camPos , rd  );\n\n\n    vec3 color = render( res , camPos , rd );\n\n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}