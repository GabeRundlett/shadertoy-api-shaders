{
    "Shader": {
        "info": {
            "date": "1584565703",
            "description": "poto",
            "flags": 32,
            "hasliked": 0,
            "id": "3dlcWr",
            "likes": 9,
            "name": "Day 90",
            "published": 3,
            "tags": [
                "mdmtjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 1278
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 85\" by jeyko. https://shadertoy.com/view/WdfczH\n// 2020-03-18 17:38:02\n\n// Fork of \"Day 84\" by jeyko. https://shadertoy.com/view/Wssczn\n// 2020-03-13 10:52:05\n\n// radial blur and chromatic abberation in this buffer\n// SNOWFLAKES FROM LSDLIVE \n// hg-sdf library used\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5),4.)*0.7;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),3.)*10.04;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor = radial*26.5; \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.9);\n    //1fragColor *= 18.;\n    fragColor = max(fragColor, 0.);\n    fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*0.4));\n    fragColor *= 1. - dot(uvn,uvn)*0.6;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define mx (iMouse.x/iResolution.y)\n#define iTime (iTime + 3.6 + mx)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 att = vec3(1);\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(float t){\n\treturn mix(texture(iChannel0,vec2(floor(t)/256.)),texture(iChannel0,vec2(floor(t) + 1.)/256.), smoothstep(0.,1.,fract(t)));\n}\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\n\n\nfloat sdRhombus(vec3 p, vec3 s){\n\t\n    \n    p = abs(p) - s;\n    \n    float d = max(p.z, max(p.x, p.y));\n    \n    \n    d = max(d, dot(p.yx + s.yx*0.5, normalize(vec2(1.))));\n    d = max(d, dot(p.yz + s.yz*0.5, normalize(vec2(1.))));\n    //d = max(d - s.x*0., -dot(p.z,p.x));\n    //d \n    \n    \n    return d;\n}\n\n// Similar to fOpUnionRound, but more lipschitz-y at acute angles\n// (and less so at 90 degrees). Useful when fudging around too much\n// by MediaMolecule, from Alex Evans' siggraph slides\nfloat fOpUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\n// The \"Round\" variant uses a quarter-circle to join the two objects smoothly:\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\n\nfloat sdBox( vec3 p, vec3 s )\n{\n    p = abs(p) - s;\n    return max(p.x, max(p.y, p.z));\n}\n\n\n    \nvec3 modD = vec3(4.,3,4);\nfloat iii;\nfloat sdThangiPong(vec3 p){\n    \n    p /= 4.;\n    float mmm = sin(iTime);\n\n    mmm = sign(mmm)*pow(abs(mmm), 5.);\n    \n    \n    float tt = iTime*4.;\n    //p.y -= tt + sin(iii*1.) + sin(tt + sin(iii*1.)*1.);\n    p.y -= tt + sin(iii)*6.;\n    //p.y -= iTime + sin(iTime );\n    p.y = pmod(p.y, modD.y*1.4);\n    \n    \n    p.xz *= rot(mmm*PI); \n    p.xz = abs(p.xz);\n    float d = sdRhombus(p , vec3(0.12));\n    \n    //glow += 0.5/(0.08+ d*d*4.)*vec3(0.1,0.43,0.3)*att;\n    //glow += 0.5/(0.08+ d*d*20.)*vec3(0.4,0.3,0.1)*att;\n    glow += 0.5/(0.08+ d*d*20.)*vec3(0.1,0.2,0.1)*att;\n    \n    p.y -= 0.4;\n    p.xz *= rot(0.25*PI);\n    \n    float n = fOpUnionStairs(d, sdRhombus(p - vec3(0,0.0 + 0.0,0), vec3(0.1)), 0.2,4.);\n    d = min(d, n);\n    //fOpUnionStairs\n    return d*4.;\n}\n\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n\n    vec3 c = vec3(1);\n    \n    \n    p -= modD*0.5;\n    vec3 v = p;\n    \n    vec3 b = v; // thx lsdlive for snow fx\n    p.y = pmod(p.y,4.);\n    \n    \n    pModPolar(p.xz, 6.);\n    p = abs(p);\n    p.x += 1.;\n    p.y -= 0.2;\n    p.yz *= rot(0.);\n    p.xz *= rot(-0.2);\n    \n    /*\n    p.x -= 0.6;\n    p = abs(p);\n    p.xz *= rot(0.3);\n    p.x += 2.5;\n    p = abs(p);\n    p.xz *= rot(-0.3);\n\t*/\n    //pModPolar(p.yz , 5.);\n    \n    vec3 u = p;\n    \n    float sM = 4.;\n    \n    //p.x -= sM;\n    p.x = pmod(p.x, 4.);\n    \n    float dB = sdBox(p, vec3(0.3,0.1,0.1));\n    \n    float mmm = pow(abs(sin(iTime + v.y*0.1)), 9.);\n    \n    v.xz *= rot(0.5 + v.y*0.3);\n    iii = pModPolar(v.xz, 7.);\n    \n    v.x -= mmm*1.5;\n    \n    v.x -= 1.5;\n    \n    float dOa = length(v.xz) - 0.5;\n    \n    vec2 ss = vec2(0.04,0.4);\n    float dOt = max(max(abs(v.x) - ss.x, abs(v.z)- ss.y),-dOa);\n    \n    dOa = abs(dOa) + 0.009;\n    \n    float dT = sdThangiPong(v);\n    \n    v.x -= 10.;\n\n\n\n    d = dmin(d, vec2(dT, 2.));\n    \n    //d = dmin(d, vec2(dOa, 2.));\n    \n    \n    dOt = abs(dOt) + 0.01;\n    d = dmin(d, vec2(dOt, 2.));\n    \n    //glow -= 0.1/(0.1 + dOt*dOt*30.)*vec3(0.,0.2,0.1);\n    glow -= 0.01/(0.1 + dOa*dOa*10.)*vec3(0.6,0.2,0.1);\n    \n    vec3 j = p;\n    vec3 k = p;\n    vec3 q = p;\n\n    j.y = pmod(j.y, modD.y*1.);\n    \n    \n    for(int i = 0; i <4; i++){\n    \tj = abs(j);\n        j.xy *= rot(0.3);\n        j.xz *= rot(0.1);\n        j -= 0.4;\n    }\n    j.y -= 0.2;\n    float dA = sdBox(j, vec3(0.1,0.1,0.5));\n    float dAb = sdBox(k, vec3(0.2,0.2,0.2));\n    dA = max(dA, -u.x + 6.);\n    dAb = max(dAb, -u.x + 6.);\n    \n    dA = abs(dA) + 0.02;\n    dAb = abs(dAb) + 0.02;\n    d = dmin(d, vec2(dA, 2.));    \n    d = dmin(d, vec2(dAb, 2.));    \n    \n    q = abs(q) - vec3(0.15);\n    \n    //float mmmm = pow(abs(sin(b.z*0.5 + sin(b.y + iTime*3.8)*1.+ sin(b.x + iTime*3.5)*4.5 + iTime*4.)), 4.);\n    float mmmm = pow(abs(sin(b.z*0.1 + sin(b.y*0.1 + iTime*0.15)*1.+ sin(b.x*0.1 + iTime*0.12)*4.5 + iTime*0.1)), 8.);\n    //glow += 0.1/(0.1 + dA*dA*(20000. - pow(mmmm, 2000.)*18000.))*vec3(0.4,0.4,0.7);\n    //glow += 0.0004/(0.1 + dA*dA*80.)*vec3(0.2,0.4,0.7);\n    //glow += 0.004/(0.1 + dAb*dAb*(60. - mmm*59.))*vec3(0.2,0.4,0.7)*3.*mmmm;\n    //glow -= 0.004/(0.1 + dAb*dAb*(60. - mmmm*59.))*vec3(0.1,0.3,0.14)*4.*(1. - mmmm);\n    glow -= 0.004/(0.1 + dAb*dAb*(60. - mmmm*59.))*vec3(0.3,0.3,0.14)*4.*(mmmm);\n    \n    \n    float dP = min(\n        \t\t\tmin(\n                        max(q.x, q.y),\n                        max(q.x, q.z)\n                       ),\n                        max(q.y, q.z)\n                  );\n    \n    \n    float dCc = sdBox(q, vec3(0.1));\n    \n    dCc = max(dCc, -u.x + 6.);\n    \n    \n    dP = max(dP, -u.x + 6.);\n    \n    d = dmin(d, vec2(dCc, 2.));\n    \n    d = dmin(d, vec2(dP, 2.));\n    \n    \n    \n    \n  // tochange v\n    \n    \n    b.x += sin(b.z*0.2)*4.;\n    b.y += sin(b.x*0.2 + iTime*0.2)*2.;\n    b.z += sin(b.x*0.25 + iTime*0.1)*2.;\n    \n    b.yx += iTime*25.;\n    \n    b = pmod(b, 5.);\n    \n    float dS = length(b) - 0.01;\n    \n    \n    dS = abs(dS) + 0.01;\n    \n    \n    //glow += 0.9/(0.1 + dS*dS*200.)*vec3(0.6,0.2,0.5);\n    vec3 gg = 0.1/(0.01 + dS*dS*5000.)*vec3(0.6,0.5,0.5);\n    vec3 ggb = 0.3/(0.1 + dS*dS*dS*10000.)*vec3(0.6,0.5,0.5);\n    glow -= ggb*8.7 ;\n    \n    d = dmin(d, vec2(dS, 3.));\n\td.x *= 0.6;\n    return d;\n}\nfloat dith;\nint its = 0;\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = vec2(10e7);\n\n    p = ro; t = 0.; hit = false;\n    for(its = 0; its < 120 + min(0, iFrame)   ; its++){\n    \td = map(p);\n        d.x *= dith;\n        \n    \t//glow += exp(-d.x*20.);\n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir ));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + (right*uv.x + up*uv.y)*0.8);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //\n    \n    vec4 nb = valueNoise(iTime*1./3.);\n\t//uv *= 1. - dot(uv,uv)*0.2;\n    uv *= 1. - dot(uv,uv)*0.1 - nb.x*0.2;\n    \n    \n    \n    uv.xy *= rot(sin((iTime*0.6 - 3.6))*0.4);\n    \n    vec3 col = vec3(0);\n\n    dith = mix(0.86,1., texture(iChannel0, 20.*uv*256.).x);\n    vec3 ro = vec3(0);\n    \n    \n    //float n = pow(valueNoise(iTime*1.).x, 2.);\n    float zoom = 12. ;\n    //ro.xz += vec2(sin(iTime*0.5),cos(iTime*0.5))*zoom;\n    ro.xz += vec2(sin( nb.x*6.14*1.5),cos( nb.x*6.14*1.5))*zoom;\n    \n    ro.y += modD.y*0.5;\n    \n    vec3 lookAt = vec3(0,ro.y + nb.y*1.5,0.);\n    lookAt.y += -0.5 + valueNoise(iTime*1./2.).x;\n    vec3 rd = getRd(ro, lookAt, uv);\n    //rd.yz *= rot(iTime);\n    \n    vec3 p; float t; bool hit;\n    float side = 1.;\n    float tA;\n    \n    for(int i = 0; i < 1; i ++){\n    \tvec2 d = march(ro, rd, p, t, hit);\n    \tvec3 n = getNormal(p);\n        \n        vec3 ld = normalize(vec3(p.x,0.1,p.z));\n        vec3 h = normalize(ld - rd);\n        \n        float diff = max(dot(n, ld), 0.);\n        float spec = pow(max(dot(n, -h), 0.), 20.);\n        float fres = pow(1. - max(dot(n, -rd), 0.), 5.);\n        \n        //col += fres*0.04*vec3(0,0.5,1);\n        //col += diff*fres*0.03*vec3(0.8,0.2,0.7)*0.1;\n        if(hit){\n            #define ao(j) clamp(map(p + n*j).x/j,0.,1.)\n            \n            float aaa = ao(0.1)*ao(0.3);\n        \tcol += pow(fres, 1.)*0.3*vec3(0.3,0.2,0.4)*0.1*aaa;\n        \tcol += diff*pow(fres, 0.4)*0.02*vec3(0.2,0.12,0.1)*0.1*aaa;\n    \t\t//col -= float(its)*0.001;\n        \n        }\n        \n        //col += spec*0.06*vec3(0.3,0.1,0.1)*1.;\n        \n        if (d.y == 6.){\n        \n        }\n        tA = t;\n    }\n        \n    \n    \n    //col = mix(col, vec3(0.04,0.06,0.17)*0.01, pow(smoothstep(0.,1.,tA*0.013), 1.6));\n    //col = mix(col, vec3(0.3,0.06,0.17)*0.01, pow(smoothstep(0.,1.,tA*0.013), 1.6));\n    \n    col = max(col, 0.);\n    col = mix(col, vec3(0.3,0.3,0.17)*0.01, pow(smoothstep(0.,1.,tA*0.013), 1.6));\n    col = mix(col, vec3(0.3,0.2,0.17)*0.04, pow(smoothstep(0.,1.,-p.y*0.113 + 0.0 + pow(nb.x, 2.)), 1.6));\n    col += glow*0.006;\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}