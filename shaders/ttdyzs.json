{
    "Shader": {
        "info": {
            "date": "1609763452",
            "description": "Genuary 4: Small areas of symmet",
            "flags": 32,
            "hasliked": 0,
            "id": "ttdyzs",
            "likes": 9,
            "name": "Genuary 4: Small areas of symmet",
            "published": 3,
            "tags": [
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n        float row = floor(uv.y*RC.y);\n        if (mod(row,2.)==0.){\n            uv.x = fract(uv.x + 1./RC.x/2. + iTime/40.);\n        }\n        else {\n            uv.x = fract(uv.x - iTime/40.);\n        }\n        float col = floor(uv.x*RC.x)/RC.x;\n        uv.x *= RC.x;\n        uv.x = mod(uv.x+.5, 1.);\n        uv.x = abs(uv.x-.5);\n        uv.x /= RC.x;\n        uv.x += col;\n        fragColor = vec4(smoothstep(.3,.6,texture(iChannel0, uv).r));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TIMESTEP 1.\n\n#define GRID (step(.45,length(mod(uv,1./RC)*RC-.5)))\n#define F (0.055 - GRID*.04)\n#define K (0.063 + GRID*.01)\n#define Da (1.0)\n#define Db (.4*smoothstep(0.,5.,iTime))\n#define RADIUS 3.\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat rnd(float x) {return fract(54321.987 * sin(987.12345 * x));}\n\nvoid getVal(vec2 p, out vec2 val, out float diff_a, out float diff_b) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  val = texture(iChannel0, uv).xy;\n  vec2 neigh_val_a = vec2(0.);\n  vec2 neigh_val_b = vec2(0.);\n  vec2 k_anisotropy = abs(normalize(uv-vec2(.5)));\n  if(uv.x<0.5)k_anisotropy = k_anisotropy.yx;\n  float k_sum = 0.;\n  for(float i = -RADIUS; i <= RADIUS; i++){\n      for(float j = -RADIUS; j <= RADIUS; j++){\n          if(i==0. || j==0.) continue;\n          if(length(vec2(i,j))>RADIUS) continue;\n          vec2 k = vec2(1.);\n          k_sum += k.x+k.y;\n          vec2 pij = p+vec2(i,j);\n          \n          neigh_val_a += texture(iChannel0, (pij) / r).x * k;\n          neigh_val_b += texture(iChannel0, (pij) / r).y * k;\n      }\n  }\n  neigh_val_a /= k_sum;\n  neigh_val_b /= k_sum;\n  diff_a = (-val.x+neigh_val_a.x+neigh_val_a.y)/2.;\n  diff_b = (-val.y+neigh_val_b.x+neigh_val_b.y)/2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 colour = vec3(0.0);\n    if (iFrame < 1) {\n        colour = vec3(rnd(uv.x+uv.y*.0001));\n    } else {\n     \tvec2 val;\n        float diff_a, diff_b;\n        getVal(fragCoord.xy, val, diff_a, diff_b);\n        \n        vec2 delta;\n \t\tdelta.x = Da * diff_a - val.x * val.y * val.y + F * (1.0 - val.x);\n  \t\tdelta.y = Db * diff_b + val.x * val.y * val.y - (K + F) * val.y;\n        \n        \n        colour = vec3(val + delta * TIMESTEP, 0.0);\n        colour = clamp(colour, -1., 1.);\n    }\n    \n    fragColor = vec4(colour,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// rows and columns amount\n#define RC vec2(12.,4.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}