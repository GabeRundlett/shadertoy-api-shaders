{
    "Shader": {
        "info": {
            "date": "1604150297",
            "description": "Attempt at making a hash using only floating points which keeps quality at different scales. Quality begins to break down when sampled in steps smaller then 6e-6 or larger then 2e7.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdcBzr",
            "likes": 3,
            "name": "Another bad floating point hash",
            "published": 3,
            "tags": [
                "hash",
                "scale",
                "point",
                "floating",
                "large"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "\n/*returns psuedo random value from 0 to 1\nbased on seed value x\nx must be positive*/\nfloat hash(float x) {\n    float r = max(fract(x*1e-6),fract(x*1e3));\n    for (float i = r; i < 2.; i += .217) {//change i step size for quality/performance ratio\n     \tr += fract((x+i)*fract(r+i));\n    }\n    return fract(r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfloat scale = 1.;\n    fragColor = vec4(hash((fragCoord.x+fragCoord.y*iResolution.x)*scale));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}