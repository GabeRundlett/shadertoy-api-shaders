{
    "Shader": {
        "info": {
            "date": "1613523784",
            "description": "Exact distance to a 3D triangle wave.",
            "flags": 0,
            "hasliked": 0,
            "id": "tldfWj",
            "likes": 9,
            "name": "Distance to Triangle Wave - 3D",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "distance",
                "periodic",
                "trianglewave",
                "exact"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "// f: frequency\n// a: amplitude\n// d: depth\n// t: thickness\nfloat sdTriangleWave(in vec3 p, in float f, in float a, in float d, in float t) {\n    float pw = 1.0 / f, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * a, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p.xy *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec3(p.x, max(abs(p.yz) - vec2(0.25 * l, d), 0.0))) - t;\n}\n\nfloat mapScene(in vec3 p) {\n    float frac = fract(iTime * 0.5);\n    float freq = frac * (1.0 - frac) * 4.0 + 0.1;\n    float amp = 2.1 + 2.0 * cos(iTime);\n    float depth = 0.5 + 0.5 * sin(iTime);\n    float thickness = 0.251 + 0.25 * sin(iTime * 0.5);\n    return sdTriangleWave(p, freq, amp, depth, thickness);\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n\n    vec2 mouse = (iMouse.xy - screenCenter) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    fragColor = vec4(vec2(0.5 + 0.5 * rd.y), 1.0, 1.0);\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            fragColor.rgb = (0.5 + 0.5 * n) * max(0.1, dot(n, l));\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}