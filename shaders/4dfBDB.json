{
    "Shader": {
        "info": {
            "date": "1497751655",
            "description": "Weird",
            "flags": 0,
            "hasliked": 0,
            "id": "4dfBDB",
            "likes": 2,
            "name": "Craziness 2",
            "published": 3,
            "tags": [
                "craziness"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 480
        },
        "renderpass": [
            {
                "code": "const int ITS = 20;\nconst vec4 c1 = vec4(.316227766, .40824829, .57735, 1.);\nconst vec4 c2 = vec4(.316227766,  .40824829, -1.1547, 0.);\nconst vec4 c3 = vec4(.316227766, -1.548, 0., 0.);\nconst vec4 c4 = vec4(.316227766, -.40824829, 0., 0.);\nconst vec4 c5 = vec4(-1.264911, 0., 0., 0.);                \nconst float rad1 = 1.;\nconst float rad2 = 1.;\nconst float rad3 = 1.;\nconst float rad4 = 1.;\nconst float rad5 = 1.;\n\nvec4 qMult(vec4 a, vec4 b){\n    return vec4(a.x * b.x - dot(a.yzw, b.yzw), a.x * b.yzw + b.x * a.yzw + cross(a.yzw, b.yzw));\n}\n\nvec4 sphrInv(vec4 pos, vec4 center, float rad){\n    vec4 d = pos - center;\n    return d * rad * rad / dot(d, d) + center;\n}\n\nvec4 dSphrInv(vec4 pos, vec4 center, float rad, vec4 prev){\n    float rad2 = rad * rad;\n    vec4 d = pos - center;\n    float d2 = dot(d, d);\n    float d3 = d2 * sqrt(d2);\n    return qMult(prev, vec4(rad2 / d2, vec3(0.)) - 2. * d * rad2 / d3);\n}\n\nfloat dist(vec4 pos){\n    vec4 deriv = vec4(0, 0, 0, 1);\n\tfor(int i = 0 ; i < ITS; i++){\n\t\tif(distance(pos, c1) < rad1){\n            deriv = qMult(deriv, dSphrInv(pos, c1, rad1, deriv));\n\t\t\tpos = sphrInv(pos, c1, rad1); \n\t\t}\n        else if(distance(pos, c2) < rad2){\n            deriv = qMult(deriv, dSphrInv(pos, c2, rad2, deriv));\n\t\t\tpos = sphrInv(pos, c2, rad2);\n\t\t}\n        else if(distance(pos, c3) < rad3){\n            deriv = qMult(deriv, dSphrInv(pos, c3, rad3, deriv));\n\t\t\tpos = sphrInv(pos, c3, rad3);\n\t\t}\n        else if(distance(pos, c4) < rad4){\n            deriv = qMult(deriv, dSphrInv(pos, c4, rad4, deriv));\n            pos = sphrInv(pos, c4, rad4);\n        }\n        /*\n        else if(pos.y < 0.){\n            deriv = qMult(deriv, vec4(1, -1, -1, -1));\n\t\t\tpos = vec4(pos.x, -pos.yzw);\n\t\t}\n//*/\n        else {\n        \tfloat t = length(pos);\n    \t\treturn t*log(t)*inversesqrt(dot(deriv, deriv));;\n        }\n\t}\n    float t = dot(pos, pos);\n    return sqrt(t/dot(deriv, deriv)) * log(t) * 0.5;\n}\n\nvec4 normal(vec4 p){\n    vec2 e = vec2(0.01, -0.01);\n    vec2 o = vec2(1., -1.);\n    return normalize(\n        o.xyyy * dist(p + e.xyyy) +\n        o.yxyy * dist(p + e.yxyy) +\n        o.yyxy * dist(p + e.yyxy) +\n        o.yyyx * dist(p + e.yyyx) +\n        o.xxxx * dist(p + e.xxxx));\n}\n\nvec3 encode(vec4 n)//4d to 3d lambert azimuthal projection -rodolphito\n{\n    return n.yzw*inversesqrt(n.x*2.0+2.0);\n}\n\nvec3 r(vec3 v, vec2 r){//rodolphito's rotation\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.y;\n    xy -= iResolution.xy / iResolution.y;\n    vec4 cam = vec4(1., 1.0, -2., 0.);\n    vec4 dir = normalize(vec4(xy, 1., 0.));\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.xy;\n    m *= 4.0;\n    dir.xyz = r(dir.xyz, m);\n    cam.xyz = r(cam.xyz, m);\n    float t = 0.;\n    for(int n = 0; n < 40; n++){\n        float d = dist(t * dir + cam);\n        if(d < .001) break;\n        t += d;\n    }\n    if(t < 5.) fragColor = abs(vec4(encode(normal(t * dir + cam)), 1.));\n    else fragColor = vec4(0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}