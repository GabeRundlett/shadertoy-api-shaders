{
    "Shader": {
        "info": {
            "date": "1515047587",
            "description": "Raytracing textured triangles",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt2BRW",
            "likes": 8,
            "name": "Raytracing textured triangles",
            "published": 3,
            "tags": [
                "raytracing",
                "triangles"
            ],
            "usePreview": 0,
            "username": "doom",
            "viewed": 772
        },
        "renderpass": [
            {
                "code": "\nconst float EPSILON = 0.0000001;\nconst vec4 BG_COLOR = vec4(0.0, 0.0, 0.0, 1.0);\n\nstruct Intersection\n{\n    vec3 intersection;\n    float t;\n    vec2 uv;\n    vec4 color;\n    vec3 normal;\n    vec3 r;\n};\n\nstruct Triangle\n{\n\tvec3 vertex0;\n    vec3 vertex1;\n    vec3 vertex2;\n\tvec2 uv0;\t\n\tvec2 uv1;\t\n\tvec2 uv2;\n    int material;\n};\n\n#define UVA vec2(0.0, 0.0)\n#define UVB vec2(0.0, 1.0)\n#define UVC vec2(1.0, 1.0)\n#define UVD vec2(1.0, 0.0)\n\n#if (__VERSION__ < 300)\n\n#define TRIANGLE_COUNT 4\nTriangle triangleList[TRIANGLE_COUNT];\n\n#else\n\nTriangle triangleList[4] = Triangle[4](\n    Triangle(vec3(-0.5, 0.0, 0.0), vec3(-0.5, 1.0, 0.0), vec3( 0.5, 1.0, 0.0), UVA, UVB, UVC, 0),\n    Triangle(vec3(-0.5, 0.0, 0.0), vec3( 0.5, 1.0, 0.0), vec3( 0.5, 0.0, 0.0), UVA, UVC, UVD, 0),\n    \n    Triangle(vec3(-1.0, 0.0, -1.0), vec3(-1.0, 0.0, 1.0), vec3( 1.0, 0.0,  1.0), UVA, UVB, UVC, 1),\n    Triangle(vec3(-1.0, 0.0, -1.0), vec3( 1.0, 0.0, 1.0), vec3( 1.0, 0.0, -1.0), UVA, UVC, UVD, 1)    \n);\n\n#define TRIANGLE_COUNT triangleList.length()\n\n#endif\n\n    \n// https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\n\nbool RayIntersectsTriangle(in vec3 rayOrigin,\n                           in vec3 rayVector,\n                           in Triangle tri,\n                           out Intersection ip)\n{    \n\tvec3 vertex0 = tri.vertex0;\n\tvec3 vertex1 = tri.vertex1;\n\tvec3 vertex2 = tri.vertex2;\n\n    vec3 edge1, edge2, h, s, q;\n    \n    float a,f,u,v;\n    edge1 = vertex1 - vertex0;\n    edge2 = vertex2 - vertex0;\n    h = cross(rayVector, edge2);\n    a = dot(edge1, h);\n    if (a > -EPSILON && a < EPSILON)\n        return false;\n    \n    f = 1.0 / a;\n    s = rayOrigin - vertex0;\n    u = f * dot(s,h);\n    if (u < 0.0 || u > 1.0)\n        return false;\n    \n    q = cross(s, edge1);\n    v = f * dot(rayVector, q);\n    if (v < 0.0 || u + v > 1.0)\n        return false;\n    \n    // At this stage we can compute t to find out where the intersection point is on the line.\n    float t = f * dot(edge2, q);\n    if (t > EPSILON) // ray intersection\n    {   \n        ip.t = t;\n        ip.normal = normalize(cross(edge1, edge2));\n        ip.intersection = rayOrigin + rayVector * t;\n        ip.uv = vec2(u, v);\n        return true;\n    }\n    else // This means that there is a line intersection but not a ray intersection.\n        return false;\n}\n\n// https://www.shadertoy.com/view/XsB3Rm\n\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\n\n// get ray direction\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\t\n\treturn normalize( vec3( xy, -z ) );\n}\n\n// camera rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nvec4 getColor(Triangle t, Intersection ip)\n{  \n    vec4 color;\n    \n    vec2 uv = ip.uv.x * t.uv1 + ip.uv.y * t.uv2 + (1.0 - ip.uv.x - ip.uv.y) * t.uv0;\n    if (t.material == 0) {\n#if (__VERSION__ < 300)        \n        // don't use video texture\n    \tcolor = texture(iChannel2, uv);\n#else\n        color = texture(iChannel0, uv);\n#endif\n    } else {\n        color = texture(iChannel1, uv);        \n    }\n    ip.color = color;\n    return color;\n}\n\nbool rayTrace(in vec3 ro, in vec3 rd, out vec4 color, out Intersection hitIp, out Triangle hitTri)\n{\n    color = BG_COLOR;\n    \n    float t = 10000.0;\n    bool hit = false;\n    \n    for (int i = 0; i < TRIANGLE_COUNT; i++)\n    {\n        Intersection ip;\n        Triangle tri = triangleList[i];\n\t    if (RayIntersectsTriangle(ro, rd, tri, ip))\n        {\n            if (ip.t < t) {\n                ip.r = normalize(reflect(ip.intersection - ro, ip.normal));\n                color = getColor(tri, ip);\n                t = ip.t;\n                hitIp = ip;\n                hitTri = tri;\n                hit = true;\n            }\n        }\n    }        \n    return hit;\n}\n\nvoid initScene()\n{\n\ttriangleList[0] = Triangle(vec3(-0.5, 0.0, 0.0), vec3(-0.5, 1.0, 0.0), vec3( 0.5, 1.0, 0.0), UVA, UVB, UVC, 0);\n    triangleList[1] = Triangle(vec3(-0.5, 0.0, 0.0), vec3( 0.5, 1.0, 0.0), vec3( 0.5, 0.0, 0.0), UVA, UVC, UVD, 0);\n    \n    triangleList[2] = Triangle(vec3(-1.0, 0.0, -1.0), vec3(-1.0, 0.0, 1.0), vec3( 1.0, 0.0,  1.0), UVA, UVB, UVC, 1);\n    triangleList[3] = Triangle(vec3(-1.0, 0.0, -1.0), vec3( 1.0, 0.0, 1.0), vec3( 1.0, 0.0, -1.0), UVA, UVC, UVD, 1);       \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if (__VERSION__ < 300)\n\tinitScene();\n#endif\n    vec3 dir = ray_dir( 45.0, iResolution.xy, gl_FragCoord.xy );\n    vec3 eye = vec3( 0.0, 0.3, 2.0 );\n\tmat3 rot = rotationXY( vec2( 0.0 ,iTime ) );\n\tvec3 rd = rot * dir;\n    vec3 ro = rot * eye;\n\n    vec4 color = BG_COLOR;\n    Intersection ip;\n    Triangle tri;\n \n    if (rayTrace(ro, rd, color, ip, tri))\n    {\n    \tif (tri.material == 1)\n    \t{            \n            vec4 refcolor = BG_COLOR;\n            rayTrace(ip.intersection + ip.r * 0.000001, ip.r, refcolor, ip, tri);\n            \n        \tcolor = 0.5 * color + 0.5 * refcolor;\n    \t}\n    }\n\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}