{
    "Shader": {
        "info": {
            "date": "1705534178",
            "description": "keys:\nspace - clear board\nleft click - spawn/delete cells\nbackspace - swap between spawning and deleting cells\n+ : increase brush size\n- : decrease brush size",
            "flags": 48,
            "hasliked": 0,
            "id": "lcfXRf",
            "likes": 2,
            "name": "game of life gpu accelerated",
            "published": 3,
            "tags": [
                "game",
                "colors",
                "fast",
                "life",
                "good",
                "gameoflife",
                "variables",
                "gpuaccelerated"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int state = get_state(fragCoord, iChannel0, iResolution.xy);\n    float brushsize = get_value(ivec2(1,1),iChannel0);\n    \n    float t = float(state-1)/float(G_STATE);\n    \n    fragColor = vec4(mix(COLA, COLB, t)/255.,1);\n    if (state == 0) fragColor.rgb = vec3(0);\n    \n    if (abs(length(iMouse.xy-fragCoord.xy)-brushsize)<=2. && iMouse.z > 0.5) fragColor.rgb = vec3(0.6);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 prevMouse = vec2(0,0);\n    prevMouse.x = get_value(ivec2(0,0),iChannel0);\n    prevMouse.y = get_value(ivec2(1,0),iChannel0);\n    \n    int nstate = 0;\n    int cstate = get_state(fragCoord, iChannel0, iResolution.xy);\n    int nbs = get_neighbours(NB_MODE, fragCoord, iChannel0, iResolution.xy);\n    \n    int delstate = int(get_value(ivec2(0,1),iChannel0));\n    int ndelstate = delstate;\n    \n    float brushsize = get_value(ivec2(1,1),iChannel0);\n    float nbrushsize = brushsize;\n    \n    float clearpress = texelFetch(iChannel1, ivec2(32, 0), 0).x; // space\n    float deletepress = texelFetch(iChannel1, ivec2(8, 0), 0).x; // backspace\n    float prevdeletepress = get_value(ivec2(2,0),iChannel0);\n   \n    float scrollup = texelFetch(iChannel1, ivec2(187, 0), 0).x; // +\n    float scrolldown = texelFetch(iChannel1, ivec2(189, 0), 0).x; // -\n    \n    // key presses\n    if (deletepress > 0.5 && prevdeletepress < 0.5) {\n        ndelstate = delstate==1?0:1;\n    }\n    if (scrollup > 0.5) {\n        nbrushsize += 1.;\n        nbrushsize = clamp(nbrushsize, brushsizeclamp.x, brushsizeclamp.y);\n    } else if (scrolldown > 0.5) {\n        nbrushsize -= 1.;\n        nbrushsize = clamp(nbrushsize, brushsizeclamp.x, brushsizeclamp.y);\n    }\n    \n    // calculate next frame\n    if (iFrame>0 && clearpress < 0.5) {\n        if (cstate<=0) {\n            if (is_part_of_num(int(G_RULES.x),nbs,int(G_RULES_LEN.x))) nstate = G_STATE;\n            else nstate=0;\n        } else if (cstate>=G_STATE) {\n            if (is_part_of_num(int(G_RULES.y),nbs,int(G_RULES_LEN.y))) nstate = G_STATE;\n            else nstate = G_STATE-1;\n        } else {\n            nstate = cstate-1;\n        }\n        \n        if (sdLine(fragCoord,iMouse.xy,prevMouse.xy,brushsize) <= 0. && iMouse.z > 0.5 && length(iMouse.xy-iMouse.zw)>25.) {\n            if (delstate == 0) {\n                nstate = 0;\n            } else {\n                nstate = G_STATE;\n            }\n        }\n    } else if (iFrame == 0) {\n        ndelstate = 1;\n        nbrushsize = 10.;\n        nstate = rand(fragCoord/iResolution.xy)-length(fragCoord-iResolution.xy/2.)/500.>=0.5?G_STATE:0;\n    }\n    \n    set_state(fragCoord, nstate, fragColor);\n    \n    set_value(fragCoord, ivec2(0,0), iMouse.x, fragColor);\n    set_value(fragCoord, ivec2(1,0), iMouse.y, fragColor);\n    \n    set_value(fragCoord, ivec2(0,1), float(ndelstate), fragColor);\n    set_value(fragCoord, ivec2(2,0), float(deletepress), fragColor);\n    \n    set_value(fragCoord, ivec2(1,1), nbrushsize, fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define COLA vec3(255, 255, 0)\n#define COLB vec3(255, 0, 0)\n\n#define brushsizeclamp vec2(1,1000)\n\n#define G_RULES vec3(37,3458,4)\n#define NB_MODE true\n\n#define resolution vec2(1200,675)\n\nconst int G_STATE = int(G_RULES.z)-1;\n\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nvoid set_state(vec2 fragCoord, int new_state, out vec4 fragColor) {\n    fragColor.r = float(new_state)/float(G_STATE);\n}\nint get_state(vec2 fragCoord, sampler2D channel, vec2 iResolution) {\n    vec2 uv = mod(fragCoord/iResolution,1.);\n    //if (uv.x>=1.||uv.x<=0.||uv.y<=0.||uv.y>=1.) return 0;\n    return int(floor(texture(channel,uv).r*float(G_STATE)));\n}\n\nvoid set_value(vec2 fragCoord, ivec2 coord, float new_val, out vec4 fragColor) {\n    if (int(fragCoord.x) == coord.x && int(fragCoord.y) == coord.y) fragColor.b = new_val/100000.;\n}\nfloat get_value(ivec2 coord, sampler2D channel) {\n    return texelFetch(channel,coord,0).b*100000.;\n}\n\nint get_neighbours(bool type, vec2 fragCoord, sampler2D channel, vec2 iResolution) {\n    int n=0;\n    if (type) {\n        if (get_state(fragCoord+vec2(1,1), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(0,1), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(-1,1), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(-1,0), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(-1,-1), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(0,-1), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(1,-1), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(1,0), channel, iResolution)==G_STATE) n++;\n    } else {\n        if (get_state(fragCoord+vec2(1,0), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(0,1), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(-1,0), channel, iResolution)==G_STATE) n++;\n        if (get_state(fragCoord+vec2(0,-1), channel, iResolution)==G_STATE) n++;\n    }\n    return n;\n}\n\nconst vec2 G_RULES_LEN =  floor( log( max(abs(G_RULES.xy),1.) ) / 2.3 + 1.);\n\nbool is_part_of_num(int numlist, int num, int len) {\n    for (int i=0, p=1; i<len; i++, p*=10 ) {\n        int digit = ( numlist/p ) % 10;\n        if (num == digit) return true;\n    }\n    return false;\n}\n\nfloat sdLine(vec2 p, vec2 a, vec2 b, float r) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}