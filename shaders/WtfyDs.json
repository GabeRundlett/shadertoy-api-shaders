{
    "Shader": {
        "info": {
            "date": "1593380410",
            "description": "Solving the time-independent Schrodinger equation by using the time rotated time-dependent equation.",
            "flags": 32,
            "hasliked": 0,
            "id": "WtfyDs",
            "likes": 6,
            "name": "DiHydrogen ion ground state",
            "published": 3,
            "tags": [
                "simulation",
                "field"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "vec3 colormap(vec3 x)\n{\n    return 0.5 - 0.5*cos(x);\n}\n\nvoid mainImage( out vec4 col, in vec2 p )\n{\n    vec4 psi = 0.2*texel(ch0, p);\n    \n    //wave function\n    col.xyz = sqrt(      psi.x*psi.x*vec3(1,2,3) \n                   + abs(psi.y*psi.y)*vec3(3,2,1)\n                   + abs(psi.z*psi.z)*vec3(2,3,1));\n\t\n    //electron density\n    //col.xyz = vec3(dot(psi.xyz, psi.xyz));\n    \n    //electric field\n    //col.xyz = 0.1*abs(psi.zzz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define Bf(p) p\n#define Bi(p) ivec2(p)\n#define texel(a, p) texelFetch(a, Bi(p), 0)\n#define pixel(a, p) texture(a, (p)/R)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define PI 3.14159265\n\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 0.8\n\nfloat G(vec2 x, float r)\n{\n    x/=r;\n    return exp(-dot(x,x));\n}\n\nfloat G0(vec2 x, float r)\n{\n    return exp(-length(x/r));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float U(vec2 p, vec2 c)\n{\n    return -1./(1. + distance(c, p));\n}\n\nvoid mainImage( out vec4 Psi, in vec2 p )\n{\n    Psi = texel(ch0, p);\n    \n    //Laplacian operator\n    vec4 L = 0.25*(texel(ch0, p+vec2(1,0)) + texel(ch0, p-vec2(1,0)) +\n                   texel(ch0, p+vec2(0,1)) + texel(ch0, p-vec2(0,1))) - Psi;\n\t\n    //diffusing the wave function, \n    //its the imaginary time schrodinger equation\n    Psi.xyz += dt*(L.xyz - 0.05*Psi.xyz*( U(p, R*vec2(0.47, 0.5)) + //proton 1\n                   U(p, R*vec2(0.53, 0.5)) + //proton 2\n                   0.01*Psi.z) - //electron repulsion\n                   0.01*Psi.xyz*(Psi.yzx + Psi.zxy)); //pauli exclusion principle;\n        \n    //electron electric field, solving the Poisson equation using the Jacobi method\n    Psi.w += 0.9*L.w - 0.001*dot(Psi.xyz,Psi.xyz);\n    \n    \n    //pseudo-renormalization\n    float lvl = 5.;\n    Psi.xyz /= textureLod(ch0, vec2(0.5), lvl).xyz;\n    \n    if(iFrame == 0)\n    {\n        Psi.xyz = vec3(1., 0., 0.)*G(p - R*0.5, 20.) \n                + vec3(0., 1., 0.)*G(p - R*0.45, 100.)\n                + vec3(0., 0., 1.)*G(p - R*0.51, 60.);\n        Psi.w = 0.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}