{
    "Shader": {
        "info": {
            "date": "1522587657",
            "description": "A ShaderToy port of my 4 kilobyte intro for Revision 2018.\nhttp://www.pouet.net/prod.php?which=75724\n\nIt's a raymarched light blob grid with a feedback trail effect and varying parameters.\nSorry about the code quality as it's somewhat obfuscated :)",
            "flags": 96,
            "hasliked": 0,
            "id": "ldycRK",
            "likes": 43,
            "name": "Descent by Macau Exports",
            "published": 3,
            "tags": [
                "fog"
            ],
            "usePreview": 0,
            "username": "cce",
            "viewed": 8812
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = vec2(uv.x, uv.y * (iResolution.y/iResolution.x));\n    \n    vec3 x = texture(iChannel0, uv).rgb;\n    //x = 0.5*x + vec3(0.5);\n    //x = pow(x, vec3(2.0))*4.0;\n    //x = x*2.;\n    fragColor = vec4(x, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 14168,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/seece/descent"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat buildings, buildings2, sea, seabrite, bust, intro, end, struckfinal, startmove, surface, spaceboost;\nfloat zofs;\nconst float PI=3.1415926536;\n\nfloat rand(in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat smootherstep(float a, float b, float r) {\n    r = clamp(r, 0.0, 1.0);\n    return mix(a, b, r * r * r * (r * (6.0 * r - 15.0) + 10.0));\n}\n\n\nfloat sa, sb, sc, sd;\nvec2 su;\n\nfloat snoise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    sa = rand(i);\n    sb = rand(i + vec2(1.0, 0.0));\n    sc = rand(i + vec2(0.0, 1.0));\n    sd = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    su = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 corners\n    return mix(sa, sb, su.x) +\n            (sc - sa)* su.y * (1.0 - su.x) +\n            (sd - sb) * su.x * su.y;\n}\n\nvec3 cc;\n\n// Repeat in three dimensions\n/*vec3 pMod3(inout vec3 p, vec3 size) {\n\tcc = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn cc;\n}*/\n\nvec3 op, small;\nfloat side, thick, bt, ofs;\n\nvec3 space(vec3 p, float t) {\n    op=p;\n    p.y = abs(p.y - buildings*10.0);\n\tp.z += zofs;\n\tside = abs(sin(p.x*0.2)*sin(p.z*0.2));\n\n    thick = -0.00;\n    bt = 0.82*buildings;\n    bt += ( 1.0*snoise(p.xz*(0.4))) ;\n    bt += (p.y*0.02 - 0.2*snoise(p.yy*0.2+p.z));\n    bt += cos(p.x*0.5);\n    bt += 0.5*snoise(p.yz*10.0);\n    \n    thick += buildings*bt;\n    \n\t//thick += -0.2 + 0.4*sea*snoise(p.yy*0.2);\n\t\n\tthick += 0.6*sin(p.y*0.3) *seabrite*abs(sin(t*0.06-1.0)); // TODO fix sync\n    thick += (1.0-buildings) * (snoise(p.xz*(2.0) + vec2(t*0.0,t*0.1))+snoise(p.yy*3.0));\n    thick += 0.3*sea - 0.35*seabrite;\n\tthick += 0.3*sign(-op.y+4.9)*struckfinal;\n    //thick += sin(p.y/(1.0+p.y));\n    \n    //p.x += (sin(p.z+t*.5))*.5 * sea;\n    //p.y += (sin(p.x+t*.4))*.5 * sea;\n    p.xy += 0.5*sin(p.zx*2.0+vec2(t*.5, t*.2))*sea;\n    \n    ofs = pow(thick*1.0 + sin(p.x+t*0.1)*0.1, 2.0);\n\t\n\t/*vec3 pMod3(inout vec3 p, vec3 size) {\n\tcc = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn cc;\n\t}*/\n\t//cc = floor((p + size*0.5)/size);\n\tvec3 size = vec3(0.4);\n\tp = mod(p + size*0.5, size) - size*0.5;\n    //pMod3(p, vec3(0.4));\n\n    vec3 red = vec3(1.0, 0.7, 0.1)*(0.2+spaceboost*0.8);\n    small = mix(\n\t\tmix(red, vec3(0.3, 0.4, 0.6), sea), \n\t\tvec3(0.1, 0.9, 0.9), side )*vec3(3e-3) / (length(p) + ofs);\n    small += max(0.,-sign(op.y))*vec3(0.004)*(1.0-sea);\n    \n    return small;\n}\n\nfloat a, angle, dist, ii;\n\nvec3 face(vec3 p, float t) {\n    p.x -= 0.25 ;\n    p.y -= 5.05;\n    p.z -= 2.0;// - struckfinal*0.6 ;\n    \n    a=0.0;\n    for (ii=0.;ii<1.0;ii+=1./7.0) {\n        angle = (ii)*2.*PI + (t - end)*0.5;\n\t\t//float angle2 =(i)*2.*PI + PI*0.5;\n        dist = 0.24 + sin(t*.5)*(0.05 + struckfinal*0.04) - 0.29*end;\n        vec3 q = p + 1.0*vec3(\n\t\t\tdist*cos(angle*1.0) + 0.0,\n\t\t\tdist*sin(angle*1.0) ,\n\t\t\t0.0\t\t\t\t\t);\n        //vec3 q = p + vec3(0.0, 0.0, 0.0);\n        a += 0.8e-2/pow(length(q) * 7.0, 1.0);\n    }\n\n    return vec3(0.0, 0.5, 1.0)*a;\n}\n\nvec3 field(vec3 p, float t) {\n    //return mix(max(vec3(0.0), space(p, t)), face(p, t), bust);\n    //return space(p, t) + face(p, t) * bust * 0.0;\n    return mix(face(p,t), space(p, t), intro+struckfinal*0.1);\n}\n\nvec3 origin;\nfloat rxy, ryz, rxz, orbit, back;\nvec3 p, accum, d;\nint iii;\n\nvec3 march(vec2 uv, float t) {\n    origin = vec3(uv - vec2(0.5, 0.25), 1.0);\n    origin.xy*=0.7;\n    \n    #define ni(x) smootherstep(0.0, 1.0, max(0.0, min(1.0, x)))\n    \n    orbit = 1.0 - ni((t-50.0)*0.04);\n    sea = ni((t-100.0)*0.05);\n\tseabrite = ni((t-113.0)*0.3);\n    buildings2 = 1.0-orbit; // TODO simplify?\n    buildings = buildings2-sea;\n\tstartmove = ni((t-7.0)*0.045);\n\tsurface = ni((t-140.0)*0.1);\n\tspaceboost = ni((t-31.0)*0.18);\n\t\n    //float back = ni((t-142.0)*0.08);\n    back = ni((t-159.0)*0.1); //147\n    end = ni((t-185.0)*0.2);\n    sea -= back; //ni((t-150.0)*0.1);\n    intro = ni((t-8.0)*0.1);\n    intro -= back;\n\tsurface -= back*0.9;\n\t\n\tstruckfinal = ni((t-175.0)*0.15);\n    \n    bust = ni((t-30.0)*0.2);\n\t\n\tzofs = t*0.5 + t*buildings2*0.5      - pow(0.015*t, 4.0) - startmove*6.0 - buildings*40.0;;\n    \n    //intro\n    ryz = orbit*0.4 - 0.2 + buildings*0.15 + 0.5;\n    rxz = orbit*0.7 + sin(t*0.1)*0.1*sea + sea*0.1;\n    \n    ryz += buildings*(sin(t*0.1)*0.2-0.1) + 0.1 * surface;\n   \n    rxz += buildings*0.8;\n    rxz += cos(t*0.1)*0.3*sea  - 0.2*sea;\n    ryz -= 0.4 + 0.4*sea + cos(t*0.1)*0.4*sea;\n    rxy = -0.2*sea;\n    \n    pR(origin.xy, rxy * intro);\n    pR(origin.yz, ryz * intro);\n    pR(origin.xz, rxz * intro);\n    \n    vec3 dir = normalize(origin);\n    \n    origin.x += 0.25;\n    origin.y += 5.0 - sea*7.0;\n    \n    p = origin;\n    accum = vec3(0.);\n\t//int lim = 40 + int(spaceboost*spaceboost)*40;\n    for (iii=0;iii<80;iii++) {\n\t\t//if (iii > lim) break;\n        d = field(p, t);\n        accum += d;\n\t\t//accum *= mix(0.85, 1.0, spaceboost);\n            \n    \tp += dir * 1.0e-3 * max(0.005, 1.0/length(d));\n    }\n\t\n\tfloat dist = length(p-origin);\n\t//accum *= 6.0 - 5.0*spaceboost;\n    \n    accum *= mix(max(0., 1.0 - 0.1*sqrt(dist)), 1.0, buildings);\n\taccum *= 1.0 + surface*abs(sin(dist * 0.1))*2.0*cos(p.y*0.6);\n\t//accum *= pow(min(1.0, max(0.0, dist*(0.15))), 2.0);\n\t//accum *= min(1.0, max(0.0, pow(dist - 10.0, 1.0)*0.05))*4.0;\n\t//accum = mix(max(vec3(0.0), accum - vec3(1.0) * max(0.0, sqrt(dist)*5e-2))*1.5, accum, spaceboost);\n    accum /= 1.0+buildings*0.4;\n    return accum + vec3(pow(max(accum.x, max(accum.y, accum.z)), 2.0)); // boost the saturated colors to white\n}\n\nfloat t;\nvec2 movement, centr;\nvec3 stars, bg, new;\nfloat noise, feedback;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tt = iTime;\n    // Normalized pixel coordinates (from 0 to 1)\n   vec2 uv = fragCoord/iResolution.xy;\n    vec2 pu = vec2(uv.x, uv.y * (iResolution.y/iResolution.x));\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    movement = 1e-4*vec2(cos(t*.2), sin(t*.2));\n    centr = vec2(0.5) + movement;\n\n    \n    vec3 old = texture(iChannel0, uv ).rgb;\n    old += 1.0/255. * rand(uv+vec2(t)) - 0.1/255.0;\n    vec2 ncoord = pu + vec2(sin(iTime*199.), sin(iTime*238.));\n\tnoise = snoise(8e2*ncoord);\n    \n    stars = pow(march(pu, t), vec3(2.0));\n    feedback = 0.96 - buildings * 0.2 - 0.5 + struckfinal*0.04;\n    \n    new = feedback*(mix(vec3(1.0,0.98,0.99), vec3(0.99, 0.95, 0.95), struckfinal)*old) + (0.2 + buildings*0.3)*stars + 0.0*vec3(noise-0.5);\n\t//vec3 new = back*0.4 + 0.05*stars;\n    new *= 1.0-end-max(0.,3.0-t);\n    new = clamp(new, vec3(0.0), vec3(1.0));\n    //new = new*0.001 + vec3(uv.x, uv.y, 0.0);\n    fragColor = vec4(new*2.0,1.0);\n    //gl_FragColor = vec4(uv.x, uv.y, 0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}