{
    "Shader": {
        "info": {
            "date": "1505344656",
            "description": "distance estimator for cube to plane; mostly useful for frustum testing interior cubes and boxes",
            "flags": 0,
            "hasliked": 0,
            "id": "llsyzS",
            "likes": 3,
            "name": "maxnorm plane distance",
            "published": 3,
            "tags": [
                "distance",
                "plane",
                "maxnorm"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 734
        },
        "renderpass": [
            {
                "code": "float lengthMaxNorm(vec2 p) {\n    return max(abs(p.x), abs(p.y));\n}\n\nfloat distanceMaxNorm(vec2 a, vec2 b) {\n    return lengthMaxNorm(b-a);\n}\n\nfloat sdmSquare(vec2 p, vec2 c, float r)\n{\n    return distanceMaxNorm(p, c) - r;\n}\n\nfloat sdmPlane(vec2 p, vec3 plane) {\n    vec2 ap = abs(plane.xy);\n    return (dot(p,plane.xy) + plane.z) / (ap.x + ap.y);\n}\n\nfloat sdmPlane(vec3 p, vec4 plane) {\n    vec3 ap = abs(plane.xyz);\n    return (dot(p,plane.xyz) + plane.w) \n        / (ap.x + ap.y + ap.z);\n}\n\nfloat getDistance(vec2 p)\n{\n    float a = iTime * 0.2;\n    vec3 plane = vec3(cos(a),sin(a),0.7);\n    return sdmPlane(p, plane);\n}\n\n// from https://www.shadertoy.com/view/MdjyRK\nvec3 draw_line(float d, float thickness) {\n  const float aa = 3.0;\n  return vec3(smoothstep(0.0, aa / iResolution.y, max(0.0, abs(d) - thickness)));\n}\n\nvec3 draw_line(float d) {\n  return draw_line(d, 0.0025);\n}\n\nfloat draw_solid(float d) {\n  return smoothstep(0.0, 3.0 / iResolution.y, max(0.0, d));\n}\n\nvec3 draw_distance(float d) {\n  float t = clamp(d * 0.85, 0.0, 1.0);\n  vec3 grad = mix(vec3(1, 0.8, 0.5), vec3(0.3, 0.8, 1), t);\n\n  float d0 = abs(1.0 - draw_line(mod(d + 0.1, 0.2) - 0.1).x);\n  float d1 = abs(1.0 - draw_line(mod(d + 0.025, 0.05) - 0.025).x);\n  float d2 = abs(1.0 - draw_line(d).x);\n  vec3 rim = vec3(max(d2 * 0.85, max(d0 * 0.25, d1 * 0.06125)));\n\n  grad -= rim;\n  grad -= mix(vec3(0.05, 0.35, 0.35), vec3(0.0), draw_solid(d));\n\n  return grad;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n    vec2 m = (-iResolution.xy + 2.0 * iMouse.xy) / iResolution.y;\n\n    float d = getDistance(p);\n    float o = 0.0;\n    \n    vec2 rp = m;\n    \n    float sd = abs(getDistance(rp));\n    o += 1.0-smoothstep(0.0, 0.005, abs(sdmSquare(p, rp, sd)));\n    \n    fragColor = vec4(o+draw_distance(d), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}