{
    "Shader": {
        "info": {
            "date": "1642080238",
            "description": "Spiraling penguins\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ssfyW4",
            "likes": 17,
            "name": "Penguins Spiraling",
            "published": 3,
            "tags": [
                "spiral",
                "logarithmic",
                "penguin"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "// \"Penguins Spiraling\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar, fAng, spd[2];\nint idObj;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat PengDf (vec3 p, float dMin, float dir, float rScl)\n{  // (\"Sliding Penguins\")\n  vec3 q;\n  float d, dh, szFac;\n  szFac = 0.08;\n  p /= szFac;\n  dMin /= szFac;\n  q = p;\n  q.y -= 0.5;\n  d = PrSphDf (q, 2.5);\n  if (d < 0.1) {\n    p.xz *= dir;\n    q = p;\n    d = PrEllipsDf (q.xzy, vec3 (1.3, 1.2, 1.4));\n    q.y -= 1.5;\n    dh = PrEllipsDf (q.xzy, vec3 (0.8, 0.6, 1.3));\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.3, 2., -0.4);\n    d = SmoothMin (d, max (dh, - PrCylDf (q, 0.15, 0.3)), 0.2);\n    DMINQ (1);\n    q = p;\n    q.yz -= vec2 (1.6, -0.6);\n    d = max (PrEllipsDf (q, vec3 (0.4, 0.2, 0.6)), 0.01 - abs (q.y));\n    DMINQ (2);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.3, 2., -0.4);\n    d = PrSphDf (q, 0.15);\n    DMINQ (3);\n    q = p;\n    q.x = abs (q.x);\n    q.xy -= vec2 (0.6, -1.05);\n    q.yz = Rot2D (q.yz, -0.5 * pi);\n    q.y -= -0.6;\n    d = PrCylDf (q.xzy, 0.12, 0.7);\n    DMINQ (4);\n    q -= vec3 (0.1, -0.67, -0.4);\n    q.xz = Rot2D (q.xz, -0.07 * pi);\n    d = PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05));\n    q.z -= 0.5;\n    q.xz = Rot2D (q.xz, 0.15 * pi);\n    q.z -= -0.5;\n    d = SmoothMin (d, PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05)), 0.05);\n    q.z -= 0.5;\n    q.xz = Rot2D (q.xz, -0.3 * pi);\n    q.z -= -0.5;\n    d = SmoothMin (d, PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05)), 0.05);\n    DMINQ (5);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (1.1, 0.3, -0.2);\n    q.yz = Rot2D (q.yz, -0.25 * pi);\n    q.xy = Rot2D (q.xy, fAng) - vec2 (0.1, -0.4);\n    d = PrEllipsDf (q.xzy, vec3 (0.05, 0.25, 0.9));\n    DMINQ (6);\n  } else dMin = min (dMin, d);\n  return 0.8 * dMin * rScl * szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, a, rScl, dc ;\n  dMin = dstFar;\n  r = length (p.xz);\n  if (r > 0.1) {  // (\"Spiraling In and Out\")\n    q = p;\n    a = (r > 0.) ? atan (q.z, q.x) / pi : 0.;\n    q.xz = mod (vec2 (0.5 * (pi * log (r) - a), -5. * a) + 0.5, 1.) - 0.5;\n    q.y /= sqrt (r);\n    if (r > 1.) q.y /= log (r);\n    q.y -= 0.16;\n    rScl = 0.25 * r;\n    dc = length (vec2 (abs (q.x) - 0.25, q.y)) - 0.16;\n    if (r > 1.) {\n      for (int k = VAR_ZERO; k < 2; k ++) {\n        dMin = PengDf (vec3 (q.x + 0.25 * sign (float (k) - 0.5), q.y + 0.01, mod (q.z +\n           spd[k] * tCur + 0.5, 1.) - 0.5), dMin, sign (spd[k]), rScl);\n      }\n    }\n    d = rScl * SmoothMax (abs (dc) - 0.015, q.y + 0.05, 0.02);\n    DMINQ (7);\n  }\n  q = p;\n  d = max (0., q.y);\n  DMINQ (8);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, grCol4;\n  vec3 col, vn;\n  vec2 q;\n  float dstObj, r, a;\n  spd[0] = 0.2;\n  spd[1] = -0.15;\n  fAng = -0.2 * pi + 0.1 * pi * SmoothBump (0.25, 0.75, 0.1, mod (0.2 * tCur, 1.)) *\n     sin (16. * pi * tCur);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    grCol4 = vec4 (1., 1., 1., 0.1) * (0.85 + 0.15 * Fbm2 (8. * ro.xz));;\n    vn = ObjNf (ro);\n    if (idObj == 7 || idObj == 8) {\n      q = ro.xz;\n      r = length (q);\n      if (r > 0.) {\n        a = atan (q.y, q.x) / pi;\n        q = mod (vec2 (0.5 * (pi * log (r) - a), -5. * a) + 0.5, 1.) - 0.5;\n      }\n    }\n    if (idObj == 1) col4 = (qHit.z < -0.2 || qHit.z > 0.4 && abs (qHit.x) < 0.08 ||\n       qHit.z < 0.4 && length (qHit.xy) < 0.2) ? vec4 (0.9, 0.9, 0.95, 0.1) :\n       vec4 (0.2, 0.2, 0.25, 0.1);\n    else if (idObj == 2) col4 = vec4 (1., 0.8, 0.2, 0.2);\n    else if (idObj == 3) col4 = vec4 (0.2, 0.2, 1., -1.);\n    else if (idObj == 4) col4 = vec4 (0.85, 0.85, 0.2, 0.2);\n    else if (idObj == 5) col4 = vec4 (0.95, 0.95, 0., 0.2);\n    else if (idObj == 6) col4 = vec4 (0.2, 0.2, 0.25, 0.1);\n    else if (idObj == 7) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.05) * (0.93 + 0.07 * cos (64. * pi * qHit.x));\n      if (r > 0.1 && min (length (vec2 (q.x - 0.25, mod (q.y + spd[0] * tCur + 0.5, 1.) - 0.5)),\n         length (vec2 (q.x + 0.25, mod (q.y + spd[1] * tCur + 0.5, 1.) - 0.5))) < 0.12) col4 *= 0.7;\n    } else if (idObj == 8) {\n      col4 = grCol4;\n      if (r > 0.1 && abs (abs (q.x) - 0.25) < 0.15) col4 *= 0.7;\n    }\n    if (col4.a >= 0.) {\n      col = col4.rgb * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) + 0.8 * max (dot (vn, ltDir), 0.)) +\n         col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    } else col = col4.rgb * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n    col = mix (grCol4.rgb, col, smoothstep (1., 1.5, length (ro.xz)));\n  } else {\n    col = vec3 (0.1);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvv;\n  float el, az, zmFac, asp, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += pi * mPtr.x;\n    el += 0.25 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.3 * pi, -0.15 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -20.);\n  zmFac = 2.1;\n  dstFar = 200.;\n  ltDir = vuMat * normalize (vec3 (0.5, 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}