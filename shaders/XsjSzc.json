{
    "Shader": {
        "info": {
            "date": "1414459923",
            "description": "Made after this: . No actual implicit procedural modeling used!",
            "flags": 8,
            "hasliked": 0,
            "id": "XsjSzc",
            "likes": 44,
            "name": "Oscilomushroom",
            "published": 3,
            "tags": [
                "2d",
                "oscilloscope"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3851
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2014\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n\n// This shader is doing the \"right thing\" --> generating two time signals and then lighting the electron\n// beam as it gets moved by then. No actual implicit procedural modeling used!\n\nfloat length2( in vec2 v ) { return dot(v,v); }\n\nfloat ssdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2  pa = p - a;\n\tvec2  ba = b - a;\n    float bam = dot(ba,ba);\n    if( bam>0.1 ) return 10.0;\n\tfloat h = clamp( dot(pa,ba)/bam, 0.0, 1.0 );\n\t\n\treturn length2( pa - ba*h );\n}\n\nconst float freq = 100.0;\n\nfloat saw( float x ) { return -1.0 + 2.0*fract(x); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \n    \n    float r2 = length(p*vec2(1.0));\n    float tt = 1.0 + 0.1*r2;\n    p *= tt;\n    vec2 g = p;\n\n    vec3 col;\n    {\n        p *= 1.25;\n        float f = 1.5;\n        float ox = 0.0;\n        float oy = 0.0;\n        for( int i=0; i<1024; i++ )\n        {\n            float h = float(i)/1024.0;\n\n            float t = iTime + 10.0*h/freq;\n\n            //----------------        \n            float x = 0.6*cos( 5.0*freq*6.2831*t ) * \n                          sin( 1.0*freq*6.2831*t/12.0) *\n                     (0.1+0.9*step(fract(t*freq/12.0),0.25)) - \n                      0.2*sin(t*6.2831*freq/12.0 + t*2.0) * \n                     (1.0-fract(t*freq/12.0));\n            float y = 0.1*sin( 5.0*freq*6.2831*t ) - \n                      1.0*saw( 1.0*freq*t/12.0 );\n            //----------------        \n\n\n            if( i>0 ) \n            {\n                float dis = ssdSegment( p, vec2(x,y), vec2(ox,oy) );\n                f += exp( -5000.0*dis )*1.00 + \n                     exp( - 100.0*dis )*0.04;\n            }\n            ox = x;\n            oy = y;\n        }    \n        float h = clamp( f*0.05, 0.0, 1.0 );\n        col = vec3( h*h, h, h*h*h )*3.0;\n    }\n    \n    {\n    g *= 0.24;\n    g.y *= 1.77;\n    float grid = 1.0;\n    grid *= 1.0-smoothstep( 0.98, 0.99, 2.0*abs(fract( g.x*10.0 )-0.5) );\n    grid *= 1.0-smoothstep( 0.96, 0.98, 2.0*abs(fract( g.y *6.0 )-0.5) );\n    grid *= 1.0-smoothstep( 0.90, 0.92, 2.0*abs(fract( g.x*50.0 )-0.5) )*\n                smoothstep( 0.84, 0.85, 2.0*abs(fract( g.y* 6.0 )-0.5) );\n    grid *= 1.0-smoothstep( 0.91, 0.92, 2.0*abs(fract( g.y*30.0 )-0.5) )*\n                smoothstep( 0.85, 0.86, 2.0*abs(fract( g.x*10.0 )-0.5) );\n    col *= 0.5 + 0.5*grid;\n    }\n    \n    {\n    vec2 q = fragCoord.xy/iResolution.xy;\n    col *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    col += 0.1*smoothstep(0.3,0.6,q.y);\n    }\n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "const float freq = 500.0;\n\nfloat saw( float x ) { return -1.0 + 2.0*fract(x); }\n\nvec2 mainSound( in int samp,float time)\n{\n    float t = time;\n    \n    float x = 0.5*cos( 5.0*freq*6.2831*t ) * \n                  sin( 1.0*freq*6.2831*t/12.0) *\n                 (0.1+0.9*step(fract(t*freq/12.0),0.25)) - \n              0.2*sin(t*6.2831*freq/12.0 + t*2.0) * \n                 (1.0-fract(t*freq/12.0));\n    float y = 0.1*sin( 5.0*freq*6.2831*t ) - \n              1.0*saw( 1.0*freq*t/12.0 );\n    \n    return 0.15*vec2( x, y );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}