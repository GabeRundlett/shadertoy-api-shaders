{
    "Shader": {
        "info": {
            "date": "1458756619",
            "description": "Color according to (p,q), where p/q is a best rational approximation to fragCoord.y/iResolution.y.\n\nThe interesting part is not what it looks like, but implementing a BRA algorithm in GLSL ES.",
            "flags": 0,
            "hasliked": 0,
            "id": "XddXDn",
            "likes": 4,
            "name": "Best rational approximation",
            "published": 3,
            "tags": [
                "math",
                "algorithm",
                "rational"
            ],
            "usePreview": 0,
            "username": "huttarl",
            "viewed": 620
        },
        "renderpass": [
            {
                "code": "/*\nColor according to q, where p/q is a best rational approximation to\nfragCoord.y/iResolution.y. \nThe point is not what the result looks like, but implementing a Best\nRational Approximation algorithm in GLSL ES. */    \n\n// Ported C code from https://rosettacode.org/wiki/Convert_decimal_number_to_rational#C\n// I'm not positive that it works.\n\n/* f : number to convert.\n * num, denom: returned parts of the rational.\n * md: max denominator value.  Note that machine floating point number\n *     has a finite resolution, so specifying\n *     a \"best match with minimal error\" is often wrong, because one can\n *     always just retrieve the significand and return that divided by \n *     2**52, which is in a sense accurate, but generally not very useful:\n *     1.0/7.0 would be \"2573485501354569/18014398509481984\", for example.\n */\nvoid rat_approx(float f, int md, out int num, out int denom)\n{\n\t/*  a: continued fraction coefficients. */\n\tint a, h[3], k[3];\n    h[0] =  0; h[1] = 1; h[2] = 0;\n    k[0] = 1; k[1] = 0; k[2] = 0;\n\tint x, d, n = 1;\n\tint neg = 0;\n    bool done = false;\n \n\tif (md <= 1) { denom = 1; num = int(f); return; }\n \n\tif (f < 0.) { neg = 1; f = -f; }\n \n\t// while (f != floor(f)) { n *= 2; f *= 2.; }\n    for (int i=0; i < 100; i++) {\n        if (f != floor(f)) {\n            n *= 2; f *= 2.;\n        } else {\n            break;\n        }\n    }\n\td = int(f);\n \n\t/* continued fraction and check denominator each step */\n\tfor (int i = 0; i < 64; i++) {\n\t\ta = n > 0 ? d / n : 0;\n\t\tif (i > 0 && a == 0) break;\n \n\t\tx = d; d = n; n = int(mod(float(x), float(n)));\n \n\t\tx = a;\n\t\tif (k[1] * a + k[0] >= md) {\n\t\t\tx = (md - k[0]) / k[1];\n\t\t\tif (x * 2 >= a || k[1] >= md)\n\t\t\t\tdone = true;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n \n\t\th[2] = x * h[1] + h[0]; h[0] = h[1]; h[1] = h[2];\n\t\tk[2] = x * k[1] + k[0]; k[0] = k[1]; k[1] = k[2];\n        if (done) break;\n\t}\n\tdenom = k[1];\n\tnum = neg == 1 ? -h[1] : h[1];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t// fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    int num, denom;\n    rat_approx(uv.y, 100, num, denom);\n  \tfragColor = vec4(float(denom)/100.0, float(num)/100.0, 0.5, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}