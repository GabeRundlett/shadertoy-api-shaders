{
    "Shader": {
        "info": {
            "date": "1471400724",
            "description": "3 different functions for egg shapes;\ndEllipseW()==Cartesian Oval\nlinnEllipseDistortB() is fast and cubic\nSinEgg1() oscillates sinusoidial",
            "flags": 0,
            "hasliked": 0,
            "id": "lld3DS",
            "likes": 4,
            "name": "egg Cartesian Oval ellipse",
            "published": 3,
            "tags": [
                "eggcartesianovalellipse"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1089
        },
        "renderpass": [
            {
                "code": "//3 egg shaped functions:\n//top   ) sinusoidial egg\n//center) Cartesian-Oval/ellipse egg \n//bottom) distorded-ellipse egg\n\n//egg shapes have many approaches.\n//a lot of more general functions or sums have some egg-shaped ranges.\n//and \"egg shape\" is not too prelcisely defined in mathematic.\n//they only agree that eggs are like distorted ellipses..\n//evolutionary important is that eggs are rotated elipses, deformed to be more conic.\n//this prevents eggs to roll too far away while having a good volume/surface ratio.\n\n//via mathematische-basteleien.de ... \"Ovals_and_Egg_Curves.htm\"\n//by @ollj\n\n//uncomment to make [b.z] oscillate over time:\n//#define oscillate\n\nfloat dCircle(vec2 p,float r){return length(p)-r;}\nfloat dEllipse(vec2 p,vec2 a,vec2 b,float r){\n return length(p-a)+length(p-b)-r;}\n//ellipses are that easy per fragment\n//i dont know why so many others use trig functions like sin and atan for this...\n//for complex number space?\n//to make line thickness constant??\n\n//weighted ellipse -> \"Cartesian Oval\" //.z=weight factor\nfloat dEllipseW(vec2 p,vec3 a,vec3 b,float r){\n return length(p-a.xy)*a.z+length(p-b.xy)*b.z-r;}\n\n//linear ellypse distortions:\n\n//fast cubic function that returns some egg-shapes for some [a]\nfloat linnEllipseDistortB(float x){float a=-.3;\n return sqrt(1.-x*x*(1.+a*x));}\n//y*y((1+a*x)=1-x*x;\n\n//sinisoid egg curve 1\nfloat SinEgg1(float x){float a=6.5;\n return sqrt(abs(sin(x)+.1*sin(x+x)));}\n\nvoid mainImage( out vec4 r, in vec2 i){\n vec2 p=i/min(iResolution.x,iResolution.y);// position on the screen\n p-=vec2(iResolution.x/iResolution.y-.9,.5);\n //above coordinate transform makes circles round, independend trom aspect ratio.\n //and it makes sure that (0.0) is centred near the top left screenspace quadrant)\n p*=1.7;//zoom out\n r.rgb=vec3(p,.5+.5*sin(iTime));//tests if it runs\n#ifdef oscillate\n float s=sin(iTime*.2);\n#else\n float s=0.;\n#endif\n vec3 a=vec3( .5,.0,1.);   //1 of 2 points that define the carthesian oval/ellipse\n vec3 b=vec3(-.5,.0,0.5+s);//2 of 2 points that define the carthesian oval/ellipse\n //float de=dEllipse(p,a.xy,b.xy,.5);//non-weighted\n float de=dEllipseW(p,a,b,.5);\n r.rg=1.-vec2(de);\n float e=.007;//shell thickness\n float size=.4;//black shell shape distance.\n if(de<size+e&&de>size-e)r.xyz=vec3(0.3);\n //egg-shell shape\n de=sin(de*29.);\n if(de<.5&&de>-.5)r.r=1.-r.r;\n //end of code that paints most of the screen space in colors.\n \n //bottom black half-egg shape uses linnEllipseDistortB()\n //a fast cubic function.\n float ledb=linnEllipseDistortB(p.x*2.)*.5;\n float pp=length(p-vec2(p.x,ledb));\n if(pp>1.)r.rgb*=.25;\n    \n //top black half eggs use SinEgg1()\n //sin() has its advantages\n float sie1=-SinEgg1(p.x*5.)*.5;\n float pq=length(p-vec2(p.x,sie1));\n if(pq>1.)r.rgb*=.25;\n    \n //white circle and plus_sign marks coordinate systems (0,0) coodinates and stretching\n if(dCircle(p,.5)<-.1)r.rgb+=vec3(.25);\n if(p.x>-.005&&p.x<.005)r.rgb+=vec3(.25);\n if(p.y>-.005&&p.y<.005)r.rgb+=vec3(.25);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}