{
    "Shader": {
        "info": {
            "date": "1657141105",
            "description": "Babby's first raymarcher\n\nKind of an accident",
            "flags": 0,
            "hasliked": 0,
            "id": "wscyD2",
            "likes": 1,
            "name": "Raymarchy Blob Waves",
            "published": 3,
            "tags": [
                "playgroundraymarching"
            ],
            "usePreview": 0,
            "username": "itgaz",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "\nconst int maxs = 1000;\nconst float maxt = 100.0;\nconst float eps = 0.0001;\nconst vec3 gradeps = vec3(0.005, 0.0, 0.0);\nconst float PI = 3.14159265;\nconst float PI_2 = 2.0 * PI;\n\nvec3 eye = vec3(0.0, 0.0, -30.0);\n\nvec3 ambientCol = vec3(1.0, 1.0, 1.0);\nfloat kA = 0.3;\nvec3 lightPos = vec3(0.0, 2.0, -10.0);\nvec3 lightCol = vec3(1.0, 1.0, 1.0);\n\n/////////////////\n\nmat3 rotX(float t) {\n  float c = cos(t);\n  float s = sin(t);\n  return mat3(\n    vec3(1, 0, 0),\n    vec3(0, c, -s),\n    vec3(0, s, c)\n  );\n}\nmat3 rotY(float t) {\n  float c = cos(t);\n  float s = sin(t);\n  return mat3(\n    vec3(c, 0, s),\n    vec3(0, 1, 0),\n    vec3(-s, 0, c)\n  );\n}\nmat3 rotZ(float t) {\n  float c = cos(t);\n  float s = sin(t);\n  return mat3(\n    vec3(c, -s, 0),\n    vec3(s, c, 0),\n    vec3(0, 0, 1)\n  );\n}\nmat3 identity() { return mat3(vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1)); }\nvec4 minSdf(in vec4 a, in vec4 b) {\n  if( a.w < b.w ) return a;\n  else return b;\n}\n\n/////////////////\n\nvec4 sdfSphere(in vec3 p, in vec4 s, in vec3 c) {\n  return vec4(c.xyz,\n    length(p-s.xyz)-s.w );\n}\n\nvec4 sdfFloor(in vec3 p, in float h, in vec3 c) {\n\n  float wobdist = length(p);\n  float wave = sin(wobdist - (iTime * 2.0));\n  float d = p.y - h - wave;\n  vec3 a = vec3(0.8, 0.2, 0.6);\n  vec3 b = vec3(0.0, 0.24, 0.64);\n  vec3 col = mix(a, b, wave);\n\n  return vec4(col, d);\n}\n\nvec4 weirdBall(in vec3 p, in vec4 s, in vec3 c) {\n\n  float fft1 = texture(iChannel0, vec2(0.1, 1.0)).r;\n  float fft2 = texture(iChannel0, vec2(0.2, 1.0)).r;\n  float fft3 = texture(iChannel0, vec2(0.3, 1.0)).r;\n  \n  float f = sin(p.x) * sin(p.y) * sin(p.z) * 1.0;\n  \n  s.y += tan(iTime - 0.5) * 4.0;\n  \n  return sdfSphere(p, s, c) + f;\n}\n\nvec4 sdf(in vec3 p) {\n  vec4 d = vec4(0.0, 0.0, 0.0, maxt);\n  d = minSdf(d, sdfFloor(p, -6.0, vec3(0.2, 0.4, 0.2)));\n  d = minSdf(d, weirdBall(p, vec4(0.0, 0.0, 0.0, 4.0), vec3(0.8 * sin(iTime), 0.8 * cos(iTime), sin(iTime/2.0))));\n  return d;\n}\n\nvec4 shade(vec3 p, vec4 c) {\n  // Calc normal\n  vec3 n = normalize(vec3(\n      sdf(p+gradeps.xyy).w - sdf(p-gradeps.xyy).w,\n      sdf(p+gradeps.yxy).w - sdf(p-gradeps.yxy).w,\n      sdf(p+gradeps.yyx).w - sdf(p-gradeps.yyx).w\n  ));\n  \n  vec3 lightDir = normalize(lightPos - p);\n  float kD = max(0.0, dot(n, lightDir));\n\n  vec3 x = ((kA * ambientCol) + (kD * lightCol)) * c.xyz;\n  return vec4(x, 1.0);\n}\n\nvec4 shadeBG() {\n  return vec4(0.2, 0.2, 0.2, 1.0);\n}\n\nvec4 march(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  vec3 n;\n  for(int s = 0; s < maxs; ++s) {\n    vec3 p = ro + t*rd;\n    vec4 c = sdf(p);\n    \n    if(c.w < eps) {\n      return shade(p, c);\n    }\n    if(t>maxt) {\n      break;\n    }\n    t += c.w;\n  }\n  return shadeBG();\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    mat3 view = identity();\n    view *= rotX(0.5);\n    // view *= rotY(mod(iTime / 10.0, 1.0) * PI_2);\n    \n    float rz = 1.0;\n    vec3 ro = eye * view;\n    vec3 rd = normalize(vec3(uv.xy, rz) * view);\n    fragColor = march(ro, rd);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}