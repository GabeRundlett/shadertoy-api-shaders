{
    "Shader": {
        "info": {
            "date": "1614728496",
            "description": "Animation of a fish swimming.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGBz3",
            "likes": 11,
            "name": "Out for a Swim",
            "published": 3,
            "tags": [
                "deform",
                "animation",
                "25d",
                "fish",
                "swimming",
                "parabolic"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "// Map to coordinates on a circle while preserving arclength\nvec2 circularDeform(in vec2 p, in float r) {\n    float s = sign(r);\n    r *= s, p = vec2(r - p.y * s, p.x);\n    return vec2(atan(p.y, p.x) * r, (r - length(p)) * s);\n}\n\n// 2D SDFs from Inigo Quilez's distance function article (https://iquilezles.org/articles/distfunctions2d)\nfloat sdUnevenCapsule(in vec2 p, in float r1, in float r2, in float h) {\n    p.x = abs(p.x);\n    float b = (r1 - r2) / h;\n    float a = sqrt(1.0 - b * b);\n    float k = dot(p, vec2(-b, a));\n    if (k < 0.0) return length(p) - r1;\n    if (k > a * h) return length(p - vec2(0.0, h)) - r2;\n    return dot(p, vec2(a, b)) - r1;\n}\n\nfloat sdIsosceles(in vec2 p, in vec2 q) {\n    p.x = abs(p.x);\n    vec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0.0, 1.0);\n    vec2 b = p - q * vec2(clamp(p.x / q.x, 0.0, 1.0), 1.0);\n    float s = -sign(q.y);\n    vec2 d = min(vec2(dot(a, a), s * (p.x * q.y - p.y * q.x)),\n                 vec2(dot(b, b), s * (p.y - q.y)));\n\n    return -sqrt(d.x) * sign(d.y);\n}\n\n// Fish texture\nvec3 fishColor(in vec2 uv, in float unit) {\n    vec3 color = vec3(0.0);\n\n    // Red scales\n    vec2 uv2 = mod(uv + vec2(0.035, 0.0175), vec2(0.07, 0.035)) - vec2(0.035, 0.0175);\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, length(uv2) - 0.014));\n\n    // Yellow scales\n    vec2 uv3 = mod(uv + vec2(0.085, 0.0175), vec2(0.07, 0.035)) - vec2(0.035, 0.0175);\n    color = mix(color, vec3(1.0, 0.8, 0.0), smoothstep(unit, 0.0, length(uv3) - 0.014));\n\n    // Eyes\n    float eyes = length(vec2(uv.x + 0.03, abs(uv.y) - 0.035)) - 0.0175;\n    color = mix(color, vec3(0.0), smoothstep(unit, 0.0, eyes));\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(eyes)));\n\n    // Fins\n    float c = cos(0.25), s = sin(0.25);\n    vec2 uv4 = vec2(uv.x, abs(uv.y) - 0.125) * mat2(c, -s, s, c);\n    vec2 uv5 = uv4 * mat2(c, s, -s, c) * mat2(c, s, -s, c);\n    vec3 finColor = vec3(0.35 + 0.35 * sin(uv5.y * 500.0), 0.0, 0.0);\n    color = mix(color, finColor, smoothstep(unit, 0.0, max(uv4.x - 0.2, abs(uv4.y) - 0.04)));\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    // Moving background\n    vec2 uv2 = uv * iResolution.y / iResolution.xy + 0.5;\n    uv2 += vec2(0.0, iTime * 0.4);\n    fragColor = texture(iChannel0, uv2);\n\n    // Deform along circle\n    float bend = sin(iTime * 3.0);\n    float osc = -sin(iTime * 3.0) * 0.05;\n\n    vec2 uv3 = uv.yx * vec2(-1.0, 1.0) - vec2(-0.075, osc);\n    vec2 p = circularDeform(uv3, 0.5 / bend) + vec2(0.1, 0.0);\n\n    vec2 uv4 = uv.yx * vec2(-1.0, 1.0) - vec2(-0.025, 0.08 + osc);\n    vec2 p2 = circularDeform(uv4, 0.5 / bend) + vec2(0.1, 0.0);\n\n    // Fish distance\n    float c = cos(0.15), s = sin(0.15);\n    mat2 rmat = mat2(c, s, -s, c);\n\n    float body = sdUnevenCapsule(p.yx, 0.075, 0.0, 0.35);\n    float d = sdUnevenCapsule(p.yx, 0.075, 0.0, 0.35);\n    d = min(d, sdIsosceles(p.yx - vec2(0.0, 0.325), vec2(0.05, 0.15)));\n    d = min(d, sdIsosceles(vec2(abs(p.y) - 0.06, p.x) * rmat, vec2(0.075, 0.15)));\n\n    float d2 = sdUnevenCapsule(p2.yx, 0.075, 0.0, 0.35);\n    d2 = min(d2, sdIsosceles(p2.yx - vec2(0.0, 0.325), vec2(0.05, 0.15)));\n    d2 = min(d2, sdIsosceles(vec2(abs(p2.y) - 0.06, p2.x) * rmat, vec2(0.075, 0.15)));\n\n    // Fish's shadow\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), smoothstep(unit * 15.0, 0.0, d2 + 0.02));\n\n    // Fish texture (the mapping works so nicely!)\n    fragColor.rgb = mix(fragColor.rgb, fishColor(p, unit), smoothstep(unit, 0.0, d));\n\n    // Lighting\n    fragColor.rgb += 0.075 * exp(-38.0 * body);\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.9));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}