{
    "Shader": {
        "info": {
            "date": "1597115608",
            "description": "Just a gaussian * sine moving around ",
            "flags": 0,
            "hasliked": 0,
            "id": "WlfBzj",
            "likes": 6,
            "name": "I'm a little field of color",
            "published": 3,
            "tags": [
                "particles",
                "gaussian"
            ],
            "usePreview": 0,
            "username": "darknoon",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n#define N 6\n#define duration 13.0\n\nfloat sit(float x, float q) {\n    return cos(3.14159*q*x)*exp2(-0.5*x*x);\n}\n\nfloat sinc(float x, float q) {\n    return cos(3.14159*x)/(3.14159*x);\n}\n\n\nvec4 hash4( vec3 p )\n{\n    vec4 q = vec4( dot(p,vec3(127.1,311.7,256.8)), \n\t\t\t\t   dot(p,vec3(269.5,183.3,012.5)), \n\t\t\t\t   dot(p,vec3(419.2,371.9,167.1)),\n                   dot(p,vec3(269.5,183.3,918.1))\n                 );\n\treturn fract(sin(q)*43758.5453);\n}\n\n\nvec4 noise24(vec2 x) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    \n    vec4 h0 = hash4(p.xyy);\n    vec4 h1 = hash4(p.xyy + vec3(1.,0.,0.));\n    \n    return mix(h0, h1, smoothstep(0., 1., f.x));\n}\n\nvec3 a = vec3(0.5, 0.5, 0.5);\nvec3 b = vec3(0.5, 0.5, 0.5);\nvec3 c = vec3(1.0, 1.0, 1.0);\nvec3 d = vec3(0.00, 0.33, 0.67);\n\n// isquilez color mapper\nvec3 colorMap(float t) {\n\treturn (a + b * cos(2. * 3.141 * (c * t + d)));\n}\n\n\nvoid mainImage(out vec4 color, in vec2 fc)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fc/R.xy;\n    uv -= 0.5;\n    uv.x *= R.x / R.y;\n\n    // Time varying pixel color\n    vec3 col = 0.05 * (colorMap(0.1*iTime) - 0.5);\n    \n    float str = 3. / float(N);\n    \n    for (int i=0; i<N; i++) {\n        float phase = float(i) * 356.4878;\n        vec4 n = noise24(vec2(iTime / duration + phase, float(i)));\n        vec2 p = n.xy - 0.5;\n        float k = sin(8.*n.z);\n        float r = 4.*length(uv - p);\n        vec3 pcolor = colorMap(n.w + 0.8*r);\n    \tcol += k * str * sit(r, 1.5)*pcolor;\n    }\n    \n\n    // Output to screen\n    col = smoothstep(-1.0, 1.0, col);\n    \n    // Blue noise dither\n    vec2 offset = fract(sin(iTime * vec2(1231.25, 53823.0))*43758.5453);\n    vec2 tc = fc / iChannelResolution[0].xy + offset;\n    col += 6. / 256. * (texture(iChannel0, tc).rgb - 0.5);\n\n    color.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}