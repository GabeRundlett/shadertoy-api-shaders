{
    "Shader": {
        "info": {
            "date": "1547767593",
            "description": "Oscillations of a mass-spring surface. Click and hold somewhere in the viewport.\nThe line separates two media (you'll see refraction/reflection at the interface).\nSome extra attenuation on the edges helps remove the border reflections. Lens next!",
            "flags": 32,
            "hasliked": 0,
            "id": "3df3Ds",
            "likes": 18,
            "name": "Interactive water surface",
            "published": 3,
            "tags": [
                "wave",
                "water",
                "physics",
                "oscillation",
                "buffers"
            ],
            "usePreview": 0,
            "username": "hypnothalamus",
            "viewed": 1817
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // normal\n    float dhx = dFdx(c.x);\n    float dhy = dFdy(c.x);\n    vec3  n   = vec3(dhx, dhy, 1.0);\n    n=normalize(n);\n    \n    vec3  light   = normalize(vec3(3,-4,5));\n    float diffuse = dot(light, n);\n    float spec    = pow(max(0.,-reflect(light, n).z),100.);\n    \n    vec3 l = vec3(max(diffuse,0.0) + spec);\n    vec3 hv = vec3((c.xy + 1.0) / 2.0, 0.5);\n    hv = clamp(hv, 0.0, 1.0);\n    l = (abs(fragCoord.x - (iResolution.x*0.4+0.5)) < 1.0)  ? vec3(0.0) : l;\n    fragColor = vec4(mix(hv, l, 0.9), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord);\n    ivec2 sxy = iTime<5.0 ? ivec2(vec2(0.66,0.5)*iResolution.xy) : (iMouse.z > 0.0 ? ivec2(iMouse.xy) : ivec2(100000));\n    \n    // get velocity from buffer\n    vec2 hv = texelFetch(iChannel0, xy, 0).xy;\n    \n    // compute acceleration from buffer\n    float a = acceleration(iChannel0, sxy, xy, float(iFrame) * DT, iResolution.xy);\n\n    hv.y += a * DT;\n    \n    // attenuation\n    hv.y *= ATTENUATION;\n    \n    // position1 = position0 + velocity * delta\n    hv.x += hv.y * DT;\n    \n    // margin attenuation\n    hv.y *= margin(fragCoord, iResolution.xy);\n    \n    fragColor = vec4(hv, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord);\n    ivec2 sxy = iTime<5.0 ? ivec2(vec2(0.66,0.5)*iResolution.xy) : (iMouse.z > 0.0 ? ivec2(iMouse.xy) : ivec2(100000));\n    \n    // get velocity from buffer\n    vec2 hv = texelFetch(iChannel0, xy, 0).xy;\n    \n    // compute acceleration from buffer\n    float a = acceleration(iChannel0, sxy, xy, float(iFrame) * DT, iResolution.xy);\n\n    hv.y += a * DT;\n    \n    // attenuation\n    hv.y *= ATTENUATION;\n    \n    // position1 = position0 + velocity * delta\n    hv.x += hv.y * DT;\n    \n    // margin attenuation\n    hv.y *= margin(fragCoord, iResolution.xy);\n    \n    fragColor = vec4(hv, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//#define LENS\n\nconst float K_OVER_M = 700.0;\n\nconst float ATTENUATION = 0.999;\n\nconst float AMPLITUDE = 5.0;\n\nconst float PULSATION = 40.0;\n\nconst float DT = 0.012;\n\nconst float MARGIN = 50.0;\n\n//--------------------------------------------\n//--------------------------------------------\nfloat elasticity(ivec2 xy, vec2 rxy)\n{\n#ifdef LENS\n    vec2 delta = vec2(xy) - vec2(0.5,0.5)*rxy;\n    float r = rxy.x * 0.2;\n    return dot(delta,delta) > r*r ? 2.0 : 1.0;\n#else\n    return xy.x > int(rxy.x*0.4) ? 3.0 : 1.0;\n#endif\n}\n\n//--------------------------------------------\n//--------------------------------------------\nfloat height(sampler2D HV, ivec2 sxy, ivec2 xy, float t)\n{\n    float s = 1.0 - smoothstep(0.0, 12.0, length(vec2(sxy - xy)));\n    \n    float h = texelFetch(HV, xy, 0).x;\n    h += s * AMPLITUDE * sin(PULSATION * t);\n    return h;\n}\n\n//--------------------------------------------\n//--------------------------------------------\nfloat margin(vec2 xy, vec2 wh)\n{\n    float a0 = smoothstep(0.0, MARGIN, xy.x);\n    float a1 = smoothstep(0.0, MARGIN, xy.y);  a0 = min(a0, a1);\n    a1 = smoothstep(0.0, MARGIN, wh.x - xy.x); a0 = min(a0, a1);\n    a1 = smoothstep(0.0, MARGIN, wh.y - xy.y); a0 = min(a0, a1);\n    return pow(a0, 0.1);\n}\n\n//--------------------------------------------\n//--------------------------------------------\nfloat acceleration(sampler2D HV, ivec2 sxy, ivec2 xy, float t, vec2 rxy)\n{\n\t// get height and velocity from buffer B\n    float h = height(HV, sxy, xy, t);\n    \n    // get heights of neighbours\n    float h0 = height(HV, sxy, xy - ivec2(1,0), t);\n    float h1 = height(HV, sxy, xy + ivec2(1,0), t);\n    float h2 = height(HV, sxy, xy - ivec2(0,1), t);\n    float h3 = height(HV, sxy, xy + ivec2(0,1), t);\n    \n    // sum of (hi - h) is proportional to the elastic force\n    float delta_h = h0 + h1 + h2 + h3 - 4.0 * h;\n    \n    // acceleration = (k / mass) * delta_h    \n    float a = K_OVER_M * delta_h;\n    \n    return elasticity(xy, rxy) * a;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord);\n    ivec2 sxy = iTime<5.0 ? ivec2(vec2(0.66,0.5)*iResolution.xy) : (iMouse.z > 0.0 ? ivec2(iMouse.xy) : ivec2(100000));\n    \n    // get velocity from buffer\n    vec2 hv = texelFetch(iChannel0, xy, 0).xy;\n    \n    // compute acceleration from buffer\n    float a = acceleration(iChannel0, sxy, xy, float(iFrame) * DT, iResolution.xy);\n\n    hv.y += a * DT;\n    \n    // attenuation\n    hv.y *= ATTENUATION;\n    \n    // position1 = position0 + velocity * delta\n    hv.x += hv.y * DT;\n    \n    // margin attenuation\n    hv.y *= margin(fragCoord, iResolution.xy);\n    \n    fragColor = vec4(hv, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord);\n    ivec2 sxy = iTime<5.0 ? ivec2(vec2(0.66,0.5)*iResolution.xy) : (iMouse.z > 0.0 ? ivec2(iMouse.xy) : ivec2(100000));\n    \n    // get velocity from buffer\n    vec2 hv = texelFetch(iChannel0, xy, 0).xy;\n    \n    // compute acceleration from buffer\n    float a = acceleration(iChannel0, sxy, xy, float(iFrame) * DT, iResolution.xy);\n\n    hv.y += a * DT;\n    \n    // attenuation\n    hv.y *= ATTENUATION;\n    \n    // position1 = position0 + velocity * delta\n    hv.x += hv.y * DT;\n    \n    // margin attenuation\n    hv.y *= margin(fragCoord, iResolution.xy);\n    \n    fragColor = vec4(hv, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}