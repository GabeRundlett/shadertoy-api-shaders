{
    "Shader": {
        "info": {
            "date": "1683135827",
            "description": "All of the important code came from the fork, I just played around with it :)",
            "flags": 0,
            "hasliked": 0,
            "id": "Dlt3Dj",
            "likes": 25,
            "name": "Elevated Contours",
            "published": 3,
            "tags": [
                "parallax"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define res iResolution.xy\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nvec4 qMult(vec4 qa, vec4 qb) {\n    vec3 v = cross( qa.xyz, qb.xyz ) + (qa.xyz * qb.w) + (qb.xyz * qa.w);\n    float scalar = qa.w * qb.w - dot(qa.xyz, qb.xyz);\n    return vec4(v, scalar);\n}\n\nvec4 qFromAxisAngle(vec3 axisNorm, float angle) {\n    float halfAngle = angle * 0.5;\n    return vec4(axisNorm * sin(halfAngle), cos(halfAngle));\n}\n    \nvec4 qFromEuler(vec3 rot) {\n    vec4 qx = qFromAxisAngle(vec3(1,0,0), rot.x);\n    vec4 qy = qFromAxisAngle(vec3(0,1,0), rot.y);\n    vec4 qz = qFromAxisAngle(vec3(0,0,1), rot.z);\n    vec4 q = qMult(qx, qy);\n    return qMult(q, qz);\n}\n\nvec3 qRot(vec3 v, vec4 q) {\n\treturn v + 2. * cross(cross(v, q.xyz) + q.w * v, q.xyz);\n}\n\nfloat getSlice(vec2 uv) {\n    float r  = texture(iChannel1, 0.5*uv).r; \n    float r2 = texture(iChannel2, uv).r;\n    float r3 = texture(iChannel3, 0.5*uv).r;\n    float t = mod(0.12 * iTime, 3.);\n    float ft = smoothstep(0.4, 0.6, fract(t));\n    if (t < 1.) r = mix(r, r2, ft);\n    else if (t < 2.) r = mix(r2, r3, ft);\n    else if (t < 3.) r = mix(r3, r, ft);\n    //r = mix(r, r2, 0.5 + 0.5 * thc(20., uv.x+uv.y + 0.2*iTime));\n    return smoothstep(0., 1., r);\n}\n\nvec2 getNormal(vec2 uv) {\n    vec2 e = vec2(1./res.y, 0);\n    vec2 n = vec2(getSlice(uv-e.xy), getSlice(uv-e.yx));\n    return (getSlice(uv) - n);\n}\n\nvoid mainImage( out vec4 O, in vec2 px ) \n{    \n    vec2 uv = (px - 0.5 * res) / res.y;\n    vec2 ouv = uv;\n    vec2 ms = iMouse.xy;  \n    \n    float rotX = ms.y / res.y - 1.;\n    float rotZ = 0.5 - ms.x / res.x;\n    rotX = -0.15 + 0.07 * thc(4., 0.32 * iTime);//0.3 * cos(0.7 * iTime) - 0.5;\n    rotZ = 0.08 * sin(0.4 * iTime) - 0.;\n    vec3 rot = pi * vec3(rotX, 0, rotZ);\n\n    vec4 quat = qFromEuler(rot);  \n   \n    vec3 camScene = vec3(0, 0.15, -1);\n    vec3 dirScene = normalize(vec3(uv, 1.2+0.1*cos(0.32*iTime))); // (uv, zoom)\n    \n    vec3 cam = qRot(camScene, quat);\n   \n    vec3 dir = qRot(dirScene, quat);\n    float aDir = atan(uv.y, uv.x);//atan(dir.y, dir.x);\n    \n    float depth = 0.3;\n  \n    float d = -cam.y / dir.y;\n    uv = (dir.xz * d + cam.xz) + 0.5;\n   \n    vec3 bg = vec3(1,0.96,0.98);\n    vec3 col = vec3(0);\n    \n    if (d > 0.) {\n    \tfloat alphaBudget = 1.4;\n        \n        float n = 36.; // 255.; // Big!!\n        for (float i = 0.; i < n; i++) {            \n\t\t\tfloat io = i / n;\n            \n            vec3 dirNorm = normalize(dir);\n            dirNorm.xz /= dir.y;\n\n\t\t\tvec2 uv2 = uv + dirNorm.xz * io * depth;\n            uv2 = mix(uv, uv2, .5-.5*thc(4.,iTime+2.*pi*io));\n            uv2 +=  vec2(0.5 * thc(2.,0.32 * iTime), .32 * iTime);\n            \n            float slice = getSlice(0.28 * uv2);\n            slice = round(slice * n) / n;\n            \n            // Use normal for lighting\n            vec2 normal = getNormal(0.28 * uv2);\n            float aNorm = atan(normal.y, normal.x);\n            \n            float v = abs(io - slice);\n            //float alpha = step(v, 0.001);           \n            float alpha = smoothstep(0.03, 0., v);\n            alpha = mix(alpha, min(alpha, alphaBudget), 0.75);\n            alpha = max(alpha, 0.); // clamp won't work if alphaBudget < 0.\n\n            vec3 tx = texture(iChannel0, 0.5 * uv2).rgb;            \n            tx *= 5. * bg * tx;\n            tx *= .85-.3*cos(aNorm);\n            col += (0.1 + 0.9 * smoothstep(0.,1.,slice)) * tx * alpha;\n            //col *= 1. / cosh(-0.03 * length(uv2 - 0.5));\n            alphaBudget -= 0.6*alpha;  //alpha;         \n        }    \n        col = mix(bg, col, exp(-0.4*d));\n    } else\n        col = bg;\n    \n    O = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}