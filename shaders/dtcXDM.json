{
    "Shader": {
        "info": {
            "date": "1685462099",
            "description": "A simple vector field display",
            "flags": 0,
            "hasliked": 0,
            "id": "dtcXDM",
            "likes": 15,
            "name": "Vector Field Viewer",
            "published": 3,
            "tags": [
                "2d",
                "visualization",
                "vector",
                "vectorfield"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "const float scale = 40.0;\nconst float colorScale = 0.6;\nconst vec2 viewport = vec2(0,0);\n#define GRID 1\n\nvec2 VectorField(in vec2 p) {\n    return vec2(sin(p.y + iTime), sin(p.x + iTime));\n}\n\n\n\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat line(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\nfloat arrow(in vec2 p) {\n    return min(line(p, 0.6)-0.05, 0.25*sdIsosceles((p-vec2(0, 0.6))*4.0, 1.0, 1.5));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragCoord -= iResolution.xy*0.5;\n    fragCoord -= viewport*scale;\n    #if GRID\n    vec2 gridPos = abs((fract((0.5+fragCoord)/(scale)))-0.5);\n    float grid = 0.25*max((max(gridPos.x, gridPos.y)*scale - scale*0.5+1.0), 0.0);\n    gridPos = abs((fract((0.5+fragCoord)/scale*0.5))-0.5);\n    grid += 0.75*max((max(gridPos.x, gridPos.y)*scale*2.0 - scale+1.0), 0.0);\n    fragColor.xyz = vec3(grid)*vec3(0.3, 0.3, 1.0);\n    float axis = max(max(1.-abs(fragCoord.x+0.5), 1.-abs(fragCoord.y+0.5)), 0.0);\n    fragColor = 0.5*mix(fragColor, vec4(1), axis);\n    #endif\n    vec4 celll = vec4(floor(fragCoord/scale), fract(fragCoord/scale));\n    float d = 1000.;\n    vec3 color = vec3(0);\n    for (int x = -1; x <= 0; x += 1) {\n        for (int y = -1; y <= 0; y += 1) {\n            vec4 cell = vec4(celll.xy-vec2(x, y), celll.zw+vec2(x, y));\n            vec2 v = VectorField(cell.xy);\n            if (!(isnan(v.x) || isnan(v.y))) {\n                vec2 d = normalize(v);\n                float ss = length(v);\n                float s = 0.5*(ss+1.0)/ss;\n                float dd = arrow((cell.zw*2.0)*mat2(d.y, -d.x,d)*s)*scale/(s*2.0);\n                color = mix(color, mix(vec3(0, 1, 0), vec3(1, 0, 0), ss*colorScale), 1.-clamp(dd, 0.0, 1.0));\n                d = min(d, dd);\n            }\n        }\n    }\n    fragColor.xyz += color;//vec4(1.-clamp(d, 0.0, 1.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}