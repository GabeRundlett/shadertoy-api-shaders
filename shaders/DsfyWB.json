{
    "Shader": {
        "info": {
            "date": "1687136040",
            "description": "Just messing around with some noise functions ",
            "flags": 0,
            "hasliked": 0,
            "id": "DsfyWB",
            "likes": 3,
            "name": "Wavy Noise",
            "published": 3,
            "tags": [
                "noisewave"
            ],
            "usePreview": 0,
            "username": "johnCavatelli",
            "viewed": 136
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform vec2 u_resolution;\nuniform float u_time;\n//Thanks for the help @FabriceNeyret2 !\n\nfloat random (in vec2 st) {// 2D Random\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nmat2 rot(float a){//counterCW rotation matrix\n    float ca= cos(a);\n    float sa= sin(a);\n    return mat2(ca,-sa,sa,ca);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;    \n    vec2 pos = uv * 20.;// Scale the coordinate system \n\n    float n2 = noise(pos * rot(0.1*iTime));\n    float n = noise(pos - n2);\n    \n    // Use the noise function\n    //n = noise(pos);//1: basic\n    \n    //n2= noise(pos);//2: more trippy slanted\n    //n = noise(pos + n2 + n2);\n    \n    //pos *= sin(0.1 * iTime);//space tunnel\n    //n2 = noise(pos);\n    //n = noise(pos * n2);\n    \n    //n2 = noise(pos*abs(0.8*cos(0.2*iTime)));//TOTK type beat\n    //n = noise(pos*rot(n2));//rotateUV(pos,n2));\n    \n    n *= 1. + 0.3 * sin(iTime * 0.2);//make it BREATHE\n    vec2 colUV = uv * rot(-1.1*iTime);//rotate colors background\n    vec3 col = vec3(colUV, 0.5);\n    col *= smoothstep(0.5,0., abs((n-.525)/fwidth(n)));\n    //if(n>0.9){col=vec3(1.0,0.,0.);}//red infiltration\n    fragColor = vec4(col, 1.0);  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}