{
    "Shader": {
        "info": {
            "date": "1573670785",
            "description": "interesting raymarched noise function with transparency effects",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVXRm",
            "likes": 5,
            "name": "Ghostly Cavern",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 461
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash1(float k) {\n    int x = FK(k);int y = FK(cos(k));\n    return float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nvec3 hash3(float k) {\n    float r1 = hash1(k);\n    float r2 = hash1(r1);\n    float r3 = hash1(r2);\n    return vec3(r1, r2, r3);\n}\n\n//rotate P around axis AX by angle RO\nvec3 rotate(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax, p, cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nvec3 sphericalCoordinates(vec2 p) {\n    float phi = acos(p.x);\n    float theta = p.y*3.1415;\n    return vec3(cos(phi), sin(phi)*sin(theta), sin(phi)*cos(theta));\n}\n\nvec3 domainRepetition(vec3 p, vec3 scale) {\n    return (fract(p/scale)-0.5)*scale;\n}\n\nvec4 component(vec3 p, vec3 offset, vec3 rotation) {\n    vec3 axis = sphericalCoordinates(rotation.xy);\n    float angle = rotation.z * 3.1415;\n    p = rotate(p, axis, angle);\n    p = domainRepetition(p + offset, vec3(1));\n\n    vec3 normal = rotate(normalize(p), axis, -angle);\n    return vec4(length(p)-0.48, normal);\n}\n\nvec4 scene(vec3 p) {\n    vec4 accum = vec4(0.);\n    float iters = 5.;\n    for (float i = 0.; i < iters; i++) {\n    \tvec3 off = hash3(i);\n    \tvec3 rot = hash3(hash1(i));\n    \taccum += component(p, off, rot);\n    }\n    return accum/sqrt(iters*1.5)-0.1;\n}\n\nfloat phong(vec3 norm, vec3 light) {\n    return abs(dot(norm, light));\n}\n\nvec3 shade(vec3 p, vec3 norm, vec3 cam) {\n    float d1 = length(sin(p)*0.5+0.5)/sqrt(3.);\n    float d2 = length(sin(norm)*0.5+0.5)/sqrt(3.);\n    return sqrt(phong(norm, cam)*( d1*vec3(0.8,0.2,0.1) + (1.-d2)*vec3(0.3,0.6,0.9)  ));\n}\n\nvoid castRay(vec3 cam, inout vec3 p, inout vec4 dist) {\n    float sgn = 1.;\n    for (int i = 0; i < 100; i++) {\n        dist = scene(p);\n        if (i == 0) sgn = sign(dist.x);\n        if (abs(dist.x) < 0.001) return;\n        p += cam*dist.x*sgn;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    fragColor = vec4(0.0);\n    \n    vec3 cam = normalize(vec3(0.5, uv));\n    vec3 init = vec3(iTime,0.,0.);\n    vec3 p = init;\n    vec4 dist; vec3 norm;\n    castRay(cam, p, dist);\n    norm = normalize(dist.yzw);\n    vec3 col1 = shade(p, norm, cam);\n    \n    float pdist = distance(p, init);\n    float transparency = pow(1./(pdist+1.),8.);\n    float fog1 = pow(exp(-pdist*0.5)/exp(0.),0.5);\n    \n    vec3 col2 = col1;\n    if (transparency > 0.02) {\n    \tp+=cam*0.1;\n        init = p;\n    \tcastRay(cam, p, dist);\n    \tnorm = normalize(dist.yzw);\n    \tcol2 = shade(p, norm, cam);\n    }\n\n    float pdist2 = distance(p, init);\n    float fog2 = pow(exp(-pdist2*0.5)/exp(0.),0.5);\n    \n    fragColor.xyz = mix(col1*fog1, col2*fog2, transparency);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}