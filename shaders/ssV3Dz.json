{
    "Shader": {
        "info": {
            "date": "1631409271",
            "description": "Truchet tiling with a simple pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssV3Dz",
            "likes": 6,
            "name": "simple truchet pattern #2",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "tiles"
            ],
            "usePreview": 0,
            "username": "pugbyte",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n#define TAU (2.*PI)\n\nvec3 white = vec3(0.867,0.867,0.867);\nvec3 black = vec3(0.133,0.157,0.192);\nvec3 blue = vec3(0.188,0.278,0.369);\nvec3 red = vec3(0.941,0.329,0.329);\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\n/*\nfloat square(vec2 st, vec2 center, float halfWidth) {\n    vec2 p = st - center;\n    return step(p.x, halfWidth)\n        * step(-halfWidth, p.x)\n        * step(p.y, halfWidth)\n        * step(-halfWidth,p.y);\n}\n*/\n\n// distance field... sooo much easier to work with omg...\nfloat square(vec2 st, vec2 center, float halfWidth) {\n    vec2 p = st - center;\n    vec2 q = abs(p) - vec2(halfWidth);\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\nvec2 circlePolarCoords(vec2 st, vec2 center, float radius) {\n    st = st - center;\n    float angle = atan(st.x, st.y);\n    return vec2(angle/TAU, length(st));\n}\n\nfloat circleOutline(vec2 st, vec2 center, float radius, float thickness) {\n    float distToEdge = abs(radius - length(st - center));\n    //return 1.0 - step(thickness, distToEdge);\n    return 1.0 - smoothstep(thickness, thickness+0.002, distToEdge);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ma = max(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / vec2(ma, ma);\n    \n    // rotate\n    //uv *= rot(-iTime*0.05);\n    // zoom\n    //uv *= mix(0.7, 1.3, 0.5 * 0.5 * sin((iTime+PI)*0.1));\n    uv *= .7;\n    // pan\n    uv += vec2(iTime*0.02,-iTime*0.02);\n    \n    // Repitition\n    uv *= 5.0;\n    vec2 id = floor(uv);\n    vec2 gv = fract(uv);\n    \n    vec3 col = blue;\n    \n    /*\n     * Stripes used to give a bit more texture.\n     */\n    float stripe_str = 0.6;\n    float stripesX = ceil(sin(gv.x*PI*60.));\n    float stripesY = ceil(sin(gv.y*PI*60.));\n    col = mix(col, stripe_str*blue, stripesX);\n    \n    // Recessed vignette\n    vec2 uv0 = fragCoord / iResolution.xy;\n    float d = square(uv0-.5, vec2(0), .5);\n    col = mix(col*0.8, col, smoothstep(0., .07, abs(d)) );\n    \n    /*\n     * Truchet tiles\n     */\n    float n = hash12(id);\n    // Randomly rotate by some multiple of PI/2\n    //float n = hash12(id+iTime*0.00001);\n    \n    n *= TAU;\n    n = floor(n / (PI/2.)) * (PI/2.);\n    \n    gv -= 0.5;\n    gv *= rot(n);\n     \n    vec3 redstripes = mix(red, 0.6*red, stripesY);\n    //col = mix(col, redstripes, circle(gv, vec2(-.5,.5), 0.5));\n    \n    // Shading\n    col = mix(col, col*0.8, circleOutline(gv, vec2(-.5,.5), 0.5, 0.13));\n    col = mix(col, col*0.8, circleOutline(gv, vec2(.5,-.5), 0.5, 0.13));\n    \n    col = mix(col, white, circleOutline(gv, vec2(-.5,.5), 0.5, 0.1));\n    col = mix(col, white, circleOutline(gv, vec2(.5,-.5), 0.5, 0.1));\n    \n    vec3 balackstripes = mix(black, stripe_str*black, stripesY);\n    col = mix(col, balackstripes, circleOutline(gv, vec2(-.5,.5), 0.5, 0.05));\n    col = mix(col, balackstripes, circleOutline(gv, vec2(.5,-.5), 0.5, 0.05));\n    \n    /*\n     * Spinning things\n     */\n    vec2 cid = floor(uv+vec2(.5));\n    vec2 cv = fract(uv+vec2(.5));\n    float cn = hash12(cid);\n    float dir = sign(cn-0.5);\n    \n    if (cn > 0.2 && cn < 0.8) {\n        /*\n         * Spinny circle\n         */\n        vec2 pv = circlePolarCoords(cv, vec2(.5), 0.2);\n        float discAngle = fract(pv.x + dir*iTime * 0.15);\n        float concentric = ceil(sin(pv.y*200.));\n        concentric = mix(1.5, 1.6, step(0., sin(pv.y*200.)));\n        //concentric = 1.3;\n        vec3 disc = white * concentric;\n        disc = mix(disc, red * concentric, smoothstep(discAngle, discAngle+.002, .75));\n        disc = mix(disc, blue * concentric, smoothstep(discAngle, discAngle+.002, .5));\n        disc = mix(disc, black * concentric, smoothstep(discAngle, discAngle+.002, .25));\n\n        // wheel rim\n        col = mix(col, col*0.8, smoothstep(pv.y, pv.y+.002, 0.27));\n        col = mix(col, white, smoothstep(pv.y, pv.y+.002, 0.24));\n        // wheel shading\n        disc = mix(disc, disc*.2, pv.y*4.);\n        // wheel\n        col = mix(col, disc, smoothstep(pv.y, pv.y+.002, 0.2));\n    } else {\n        /*\n         * Spinny square\n         */\n        vec2 center = vec2(.5);\n        vec2 bv = cv - center;\n        bv *= rot(dir*iTime*5.8);\n        \n        float d = square(bv, vec2(0), 0.14);\n        \n        float lines = mix(1.1, 1.2, step(0., sin(abs(d)*TAU * 30.)));\n        vec3 box = white;\n        box = mix(box, black * lines, smoothstep(bv.x, bv.x+.002, abs(bv.y)));\n        box = mix(box, red * lines, smoothstep(abs(bv.x), abs(bv.x)+.002, bv.y));\n        box = mix(box, blue * lines, smoothstep(abs(bv.y), abs(bv.y)+.002, abs(bv.x)));\n        box = mix(box, white * lines, smoothstep(abs(bv.y), abs(bv.y)+.002, bv.x));\n        \n        \n        // square rim\n        col = mix(col, col*0.8, 1.0 - smoothstep(.0, .002, square(bv, vec2(0), 0.21)));\n        col = mix(col, white, 1.0 - smoothstep(0., .002, square(bv, vec2(0), 0.18)));\n        // square shading\n        box = mix(box*.5, box, abs(d*10.));\n        // square\n        col = mix(col, box, smoothstep(d, d+.002, 0.));\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define blur_strength 0.\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}