{
    "Shader": {
        "info": {
            "date": "1718652142",
            "description": "Try raymarching tricks. \nRefer from: https://www.youtube.com/watch?v=Vmb7VGBVZJA&list=PLGmrMu-IwbgtMxMiV3x4IrHPlPmg7FD-P&index=4\n",
            "flags": 0,
            "hasliked": 0,
            "id": "X33SR4",
            "likes": 6,
            "name": "Jellyfishï¼Ÿ",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "refler",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURFACE_DIST 0.01\n#define PI 3.1415926535\n#define SHIFT_TIME 3.9\nmat2 rot2D(in float t)\n{\n    return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat GetDist(vec3 p){\n    vec3 pos = vec3(0.0, 0.0, 0.0); \n    float d = MAX_DIST;\n    p.yz *= rot2D(1.57);\n    p.xz *= rot2D(iTime*0.3);\n    float scale = clamp(sin(p.y*0.5-iTime*2.),0.85,1.0);\n    p.xyz *= scale;//scale\n    for (int i = 0; i < 10; i++) {\n        p.xz *= rot2D(0.2);\n        float ad = sdOctahedron(p-pos, 1.);\n        ad = abs(ad) - 0.05;\n        ad += sin(p.x*7.5+iTime*1.)*0.07;\n        d = opSmoothUnion(ad, d, 0.2);\n    }\n    d = max(d,p.y -0.2);\n    pos.z -= 0.8;\n\n    p.xz *= scale*1.2;//scale\n    p.xz *= rot2D(p.y*0.3); //twist\n    p.xz += p.y*sin(-iTime)*0.1+sin(p.y*5.-iTime*10.)*0.03; \n    for (int i = 0; i < 12; i++) {\n        pos.xz *= rot2D(PI/6.0);\n        \n        float ad = sdVerticalCapsule(p-pos, 6.0, 0.02); \n        ad += sin(p.y*0.5+iTime*2.)*0.005;\n        d = opSmoothUnion(ad*0.8, d, 0.1);\n         \n    }\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + dO * rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if(abs(dS) < SURFACE_DIST || dO > MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, 0.0);\n    vec3 n = d - vec3(GetDist(p - e.xyy), GetDist(p - e.yxy), GetDist(p - e.yyx));\n    return normalize(n);\n}\n\nvec3 Getlight(vec3 p, vec3 ro){\n    vec3 lightPos = vec3(0,2,0);\n    float I = 2.0;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    //Blinn Phong\n    float angle = max(dot(n,l),0.0);\n    vec3 ri = lightPos - p;\n    float Irr = I/(length(ri)*length(ri));\n    float d = RayMarch(p+n*SURFACE_DIST*2.0,l);\n    vec3 col = vec3(0.5,0.5,1.0);\n    vec3 Ld = col * angle * Irr;\n    vec3 La = 0.4 * col * I;\n    vec3 h = normalize(l + ri);\n    angle = max(dot(ro,h),0.0);\n    vec3 Ls = vec3(0.1 * I * angle * Irr);\n    if(d<length(lightPos - p)){\n        La *= .5;\n    } \n    return Ld + La + Ls;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec2 m = (iMouse.xy*2. - iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    vec3 ro = vec3(0.0, 0.0, -3.);\n    vec3 rd = normalize(vec3(uv, 1));\n    if (iMouse.z > 0.) {\n        ro.xz *= rot2D(-m.x*2.);\n        rd.xz *= rot2D(-m.x*2.);\n        ro.yz *= rot2D(m.y*2.);\n        rd.yz *= rot2D(m.y*2.);\n    }\n    else {\n        float shiftTime = iTime*0.1+SHIFT_TIME;\n        ro.xz *= rot2D(shiftTime);\n        rd.xz *= rot2D(shiftTime);\n        ro.yz *= rot2D(shiftTime);\n        rd.yz *= rot2D(shiftTime);\n    }\n    float t = RayMarch(ro,rd);\n    vec3 p = ro + rd*t;\n    if (t < MAX_DIST){\n        col = Getlight(p, rd);\n    }\n    vec3 mask = step(0.0, -col);\n\n    vec3 bottomColor = vec3(0.8, 0.89, 0.99);\n    col =  bottomColor * mask + col * (1.0 - mask);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}