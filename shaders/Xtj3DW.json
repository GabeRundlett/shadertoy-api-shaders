{
    "Shader": {
        "info": {
            "date": "1429548830",
            "description": "Lots of rings reacting and dancing with the music. If you do not have a mic you can select any sound in the iChannel0 and it will also react to it  *** Chrome/Firefox only. Sorry Safari and IE ***",
            "flags": 4,
            "hasliked": 0,
            "id": "Xtj3DW",
            "likes": 58,
            "name": "Twisted Rings",
            "published": 3,
            "tags": [
                "2d",
                "sound",
                "music",
                "mic"
            ],
            "usePreview": 1,
            "username": "poljere",
            "viewed": 8137
        },
        "renderpass": [
            {
                "code": "// Created by Pol Jeremias - pol/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define SOUND_MULTIPLIER 2.0\n\nfloat drawCircle(float r, float polarRadius, float thickness)\n{\n\treturn \tsmoothstep(r, r + thickness, polarRadius) - \n        \tsmoothstep(r + thickness, r + 2.0 * thickness, polarRadius);\n}\n\nfloat sin01(float v)\n{\n\treturn 0.5 + 0.5 * sin(v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float rstandard = SOUND_MULTIPLIER * texture( iChannel0, vec2(0.1, 0.0) ).x;\n    \n    // Center the coordinates and apply the aspect ratio\n    vec2 p = uv - vec2(0.5) + vec2(0.05, 0.05) * rstandard;\n    p.x *= iResolution.x / iResolution.y;\n\n    // Calculate polar coordinates\n    float pr = length(p);\n    float pa = atan(p.y, p.x); // * 3.0 / 3.14;\n    \n    // Retrieve the information from the texture\n    float idx = (pa/3.1415 + 1.0) / 2.0;   // 0 to 1\n    float idx2 = idx * 3.1415;             // 0 to PI\n    \n    // Get the data from the microphone\n    vec2 react = sin(idx2) * SOUND_MULTIPLIER * texture( iChannel0, vec2(idx, 0.0) ).xy;    \n    \n    // Draw the circles\n    float o = 0.0;\n    float inc = 0.0;\n    \n    for( float i = 1.0 ; i < 8.0 ; i += 1.0 )\n    {\n        float baseradius = 0.3 * ( 0.3 + sin01(rstandard + iTime * 0.2) ); \n        float radius = baseradius + inc;\n\n        radius += 0.01 * ( sin01(pa * i + iTime * (i - 1.0) ) );\n        \n    \to += drawCircle(radius, pr, 0.008 * (1.0 + react.x * (i - 1.0)));\n        \n        inc += 0.005;\n    }\n    \n    // Calculate the background color    \n    vec3 bcol = vec3(1.0, 0.22, 0.5 - 0.4*p.y) * (1.0 - 0.6 * pr * react.x);\n    vec3 col = mix(bcol, vec3(1.0,1.0,0.7), o);\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}