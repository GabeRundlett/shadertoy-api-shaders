{
    "Shader": {
        "info": {
            "date": "1711302569",
            "description": "wanted to see if i can recreate flurry with just a dot and a bunch of feedback trails\nended up with something similar but yet very different, could probably be tuned closer by adjusting the noise",
            "flags": 32,
            "hasliked": 0,
            "id": "lX2SDt",
            "likes": 6,
            "name": "mac flurry screensaver",
            "published": 3,
            "tags": [
                "screensaver"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "// Buffers A, B, and C are near identical, each renders one feedback 'tail' in each of its channels\n// Buffer D sums all of those 'tails' together, colorizes them, and adds an extra layer of glowy feedback\n\nvoid mainImage( out vec4 O, in vec2 xy ) {\n    vec2 uv = xy/iResolution.xy;\n    O = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float drawTail(in vec2 uvc, in float offset, in int ch) {\n    vec2 lpuv = uvc;\n    uvc += coffset;\n    float cdist = length(uvc);\n    float circle = SS(csize,csize*.75,cdist);\n    float ang = fbm(vec3(uvc*nsize,offset+iTime*.02+cdist*.1),3)*TAU;\n    float distf = dspace/R.y;\n    float dist = distf + fbm(vec3(uvc*nsize,offset+33.+iTime*.2-cdist*.1),2)*distf/2.;\n    lpuv += vec2(0.,R/200.)*Rot(ang)*dist;\n    lpuv = UVC2UV(lpuv);\n    float lp = texture(iChannel0, lpuv, .5)[ch];\n    lp=contrast(lp,1.0001);\n    return mix(pow(circle,5.)*10.,lp*0.995,1.-circle);\n}\n\nfloat fbDot(in int ch, in vec2 xy, float offset) {\n    offset += float(ch)*20.;\n    vec2 uvc = (xy-R/2.)/R.y;\n    return drawTail(uvc,offset,ch);\n}\n\nvoid mainImage( out vec4 O, in vec2 xy ) {\n    vec2 uvc = (xy-R/2.)/R.y;\n    float cdist = length(uvc);\n    xy += vec2(\n        snoise(vec3(uvc*nsize,99.+iTime*.1)),\n        snoise(vec3(uvc*nsize,77.+iTime*.1))\n    )*(cdist+0.5);\n    O.r = fbDot(0, xy, 1.);\n    O.g = fbDot(1, xy, 1.);\n    O.b = fbDot(2, xy, 1.);\n    O.a = fbDot(3, xy, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = 3.14159;\nconst float TAU = PI*2.;\n#define R (iResolution.xy)\n#define SS(a,b,c) smoothstep(a+b,a-b,c)\n#define UVC2UV(x) ((x * R.y + R/2.0) / R)\n#define UV2UVC(x) ((x * R - R/2.0) / R.y)\n\nconst float csize = 0.012; // circle size\nconst float nsize = 0.15; // noise size\nconst float dspace = .9; // dot spacing factor for each line drawing\nconst vec2 coffset = vec2(-.25,-.12);\n\nmat2 Rot(float a) {return mat2(cos(a), sin(a), -sin(a), cos(a));}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat contrast(in float c, in float k) {\n    return (c-0.5)*k+0.5;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n// demo code:\nfloat color(vec3 xyz) { return snoise(xyz); }\nfloat fbm( in vec3 x, in int oct ){    \n    float G = exp2(-0.5);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i=0; i<oct; i++ )\n    {\n        t += a*snoise(f*x);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float drawTail(in vec2 uvc, in float offset, in int ch) {\n    vec2 lpuv = uvc;\n    uvc += coffset;\n    float cdist = length(uvc);\n    float circle = SS(csize,csize*.75,cdist);\n    float ang = fbm(vec3(uvc*nsize,offset+iTime*.02+cdist*.1),3)*TAU;\n    float distf = dspace/R.y;\n    float dist = distf + fbm(vec3(uvc*nsize,offset+33.+iTime*.2-cdist*.1),2)*distf/2.;\n    lpuv += vec2(0.,R/200.)*Rot(ang)*dist;\n    lpuv = UVC2UV(lpuv);\n    float lp = texture(iChannel0, lpuv, .5)[ch];\n    lp=contrast(lp,1.0001);\n    return mix(pow(circle,5.)*10.,lp*0.995,1.-circle);\n}\n\nfloat fbDot(in int ch, in vec2 xy, float offset) {\n    offset += float(ch)*20.;\n    vec2 uvc = (xy-R/2.)/R.y;\n    return drawTail(uvc,offset,ch);\n}\n\nvoid mainImage( out vec4 O, in vec2 xy ) {\n    vec2 uvc = (xy-R/2.)/R.y;\n    float cdist = length(uvc);\n    xy += vec2(\n        snoise(vec3(uvc*nsize,99.+iTime*.1)),\n        snoise(vec3(uvc*nsize,77.+iTime*.1))\n    )*(cdist+0.5);\n    O.r = fbDot(0, xy, 10.);\n    O.g = fbDot(1, xy, 10.);\n    O.b = fbDot(2, xy, 10.);\n    O.a = fbDot(3, xy, 10.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float drawTail(in vec2 uvc, in float offset, in int ch) {\n    vec2 lpuv = uvc;\n    uvc += coffset;\n    float cdist = length(uvc);\n    float circle = SS(csize,csize*.75,cdist);\n    float ang = fbm(vec3(uvc*nsize,offset+iTime*.02+cdist*.1),3)*TAU;\n    float distf = dspace/R.y;\n    float dist = distf + fbm(vec3(uvc*nsize,offset+33.+iTime*.2-cdist*.1),2)*distf/2.;\n    lpuv += vec2(0.,R/200.)*Rot(ang)*dist;\n    lpuv = UVC2UV(lpuv);\n    float lp = texture(iChannel0, lpuv, .5)[ch];\n    lp=contrast(lp,1.0001);\n    return mix(pow(circle,5.)*10.,lp*0.995,1.-circle);\n}\n\nfloat fbDot(in int ch, in vec2 xy, float offset) {\n    offset += float(ch)*20.;\n    vec2 uvc = (xy-R/2.)/R.y;\n    return drawTail(uvc,offset,ch);\n}\n\nvoid mainImage( out vec4 O, in vec2 xy ) {\n    vec2 uvc = (xy-R/2.)/R.y;\n    float cdist = length(uvc);\n    xy += vec2(\n        snoise(vec3(uvc*nsize,99.+iTime*.1)),\n        snoise(vec3(uvc*nsize,77.+iTime*.1))\n    )*(cdist+0.5);\n    O.r = fbDot(0, xy, 20.);\n    O.g = fbDot(1, xy, 20.);\n    O.b = fbDot(2, xy, 20.);\n    O.a = fbDot(3, xy, 20.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 O, in vec2 xy )\n{\n    vec2 uv = xy/R;\n    vec2 uvc = (xy-R/2.)/R.y;\n    vec4 t[3];\n    t[0] = texture(iChannel0,uv);\n    t[1] = texture(iChannel1,uv),\n    t[2] = texture(iChannel2,uv);\n    O-=O;\n    vec3 rootcol = vec3(\n        snoise(vec3(10.,10.,iTime*.1)),\n        .6+snoise(vec3(1.5,1.5,iTime*.1))*.2,\n        1.\n    );\n    for (int i=0;i<3;i++)\n    for (int j=0;j<4;j++) {\n        vec3 col = rootcol;\n        col.r = mix(rootcol.r,snoise(vec3(float(i)*10.,float(j)*10.,iTime*.1)),0.2);\n        col.r += length(uvc)*.1;\n        col = hsv2rgb(col);\n        O+=t[i][j]*vec4(col,1.);\n    }\n    vec4 lp = texture(iChannel3,uv,0.5);\n    lp.rgb = (lp.rgb - 0.504)*1.001 + 0.5;\n    O = mix(O,lp,0.95);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}