{
    "Shader": {
        "info": {
            "date": "1688516754",
            "description": "License:\n- GPL v3\n\nBased Upon:\n- aleklesovoi CRT TV Shader Shadertoy Example (https://www.shadertoy.com/view/DldXWS)\n- Blender Tracking Brown-Conrady Distortion Model (https://archive.blender.org/developer/D9037)",
            "flags": 0,
            "hasliked": 0,
            "id": "DslfR4",
            "likes": 4,
            "name": "Brown-Conrady Lens Distortion",
            "published": 3,
            "tags": [
                "distortion",
                "lens",
                "opencv"
            ],
            "usePreview": 1,
            "username": "KartaVR",
            "viewed": 536
        },
        "renderpass": [
            {
                "code": "// Brown-Conrady Lens Distortion\n\n// Open-Source License:\n// GPL v3\n\n// Fragment Shader Based Upon:\n// aleklesovoi's \"CRT TV Shader\" Shadertoy Example (https://www.shadertoy.com/view/DldXWS)\n\n// Blender Tracking Brown-Conrady Distortion Model \"ApplyBrownDistortionModel()\" function in \"rna_tracking.c\"\n// https://archive.blender.org/developer/D9037\n\nvec2 BrownConradyDistortion(in vec2 uv)\n{\n    // Radial Distortion\n    float k1 = 0.3;\n    float k2 = 0.1;\n    float k3 = 0.0;\n    float k4 = 0.0;\n\n    // Tangential Distortion\n    float p1 = 0.0;\n    float p2 = 0.0;\n\n    // Brown Conrady uses UV coordinates with a [-1:1] range\n    uv = (uv * 2.0) - 1.0;\n\n    // Compute the distortion\n    float x2 = uv.x * uv.x;\n    float y2 = uv.y * uv.y;\n\n    float xy2 = uv.x * uv.y;\n    float r2 = x2 + y2;\n\n    float r_coeff = 1.0 + (((k4 * r2 + k3) * r2 + k2) * r2 + k1) * r2;\n    float tx = p1 * (r2 + (2.0 * x2)) + (p2 * xy2);\n    float ty = p2 * (r2 + (2.0 * y2)) + (p1 * xy2);\n\n    uv.x *= r_coeff + tx;\n    uv.y *= r_coeff + ty;\n\n    // Transform the UV coordinates back to a [0:1] range\n    uv = (uv * 0.5) + 0.5;\n\n    // Use the distortion parameter as a scaling factor to keep the image resized as close as possible to the actual viewport dimensions\n    float scale = abs(k1) < 1.0 ? 1.0 - abs(k1) : 1.0 / (k1 + 1.0);\n\n    // Scale the image from center\n    uv = (uv * scale) - (scale * 0.5) + 0.5;\n\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Use a \"Screen Space\" UV Coordinate [0;1] range\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Apply the lens distortion\n    uv = BrownConradyDistortion(uv);\n    vec3 result = texture(iChannel0, uv).rgb;\n\n    // Return the final output\n    fragColor = vec4(result, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}