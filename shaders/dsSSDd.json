{
    "Shader": {
        "info": {
            "date": "1671094269",
            "description": "Antialiasing noise contours with fwidth (press 'x' for unantialiased). Mouse rotates section through noise space. Press 'a' for a nice effect.\n\n3D Simplex Noise function from [url]https://github.com/ashima/webgl-noise[/url] by Ian McEwan and @stegu.",
            "flags": 16,
            "hasliked": 0,
            "id": "dsSSDd",
            "likes": 14,
            "name": "3D Simplex Noise Contours",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "simplex",
                "aa",
                "contour",
                "stegu"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "// 3D Simplex Noise Contours, mla, 2022\n\nvec3 colors[] =\n  vec3[](vec3(0.996078,0.152941,0.0705882),\n         vec3(0.988235,0.376471,0.0392157),\n         vec3(0.984314,0.6,0.00784314),\n         vec3(0.988235,0.8,0.101961),\n         vec3(0.996078,0.996078,0.2),\n         vec3(0.698039,0.843137,0.196078),\n\n         vec3(0.4,0.690196,0.196078),\n         vec3(0.203922,0.486275,0.596078),\n         vec3(0.00784314,0.278431,0.996078),\n         vec3(0.266667,0.141176,0.839216),\n         vec3(0.52549,0.00392157,0.686275),\n         vec3(0.760784,0.0784314,0.376471));\n\nvec3 getcol(int i, float shade) {\n  i = clamp(i,0,colors.length()-1);\n  if (key(CHAR_Z) && i == int(iTime)%13-1) return vec3(1);\n  vec3 col = colors[i];\n  col = pow(col,vec3(2.2)); // Linear space color\n  col *= mix(shade,1.0,0.2);\n  return col;;\n}\n\nfloat sstep(float from, float to, float x) {\n  if (key(CHAR_X)) return float(x >= 0.5*(to+from)); // Yuk!\n  // Cubic or linear smoothing both work well.\n  //return smoothstep(from,to,x);\n  return clamp((x-from)/(to-from),0.0,1.0);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec3 uv = vec3((2.0*fragCoord-iResolution.xy)/iResolution.y,1);    \n    uv.xy *= 2.0;\n    if (key(CHAR_A)) uv.yz = rotate(uv.yz,-0.1*iTime);\n    vec3 p = vec3(uv.xy/uv.z,0.1*iTime);\n    vec2 mouse = vec2(0);\n    if (iMouse.x > 0.0) mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.xy;\n    p.yz = rotate(p.yz, PI*mouse.y);\n    p.xz = rotate(p.xz, PI*mouse.x);\n    float shade = 0.5*(1.0+snoise(p));\n    shade *= 12.0;\n    float px = 0.5*length(vec2(dFdx(shade),dFdy(shade))); // fwidth before fract\n    int ix = int(floor(shade));\n    shade = fract(shade);\n    // Find nearest boundary and adjust shade and index.\n    if (shade > 0.5) { shade--; ix++; }\n    vec3 ltcol = getcol(ix-1,shade+1.0); // 'less than' color\n    vec3 gtcol = getcol(ix,shade);       // 'greater than' color\n    vec3 col = mix(ltcol,gtcol,sstep(-px,px,shade));\n    vec3 distcol = vec3(0.8);\n    col = mix(distcol,col,pow(clamp(abs(uv.z),0.0,1.0),0.5)); // Hide aliasing in the distance\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\nconst float PI = 3.14159265;\n\n// Code from: https://github.com/ashima/webgl-noise\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n// mla: return value is in range [-1,1]\nfloat snoise(vec3 v) { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}