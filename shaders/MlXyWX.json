{
    "Shader": {
        "info": {
            "date": "1506624432",
            "description": "Belousov-Zhabotinsk reaction. Based on the NetLogo implementation (1). \n(1) Wilensky, U. (2003). NetLogo B-Z Reaction model. http://ccl.northwestern.edu/netlogo/models/B-ZReaction. Center for Connected Learning and Computer-Based Modeling, Northwestern Un",
            "flags": 32,
            "hasliked": 0,
            "id": "MlXyWX",
            "likes": 7,
            "name": "BZ Reaction",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction",
                "belousov",
                "infection",
                "oscillations",
                "zhabotinsk"
            ],
            "usePreview": 0,
            "username": "dazuma",
            "viewed": 770
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float val = texture(iChannel0, uv).x;\n    fragColor = vec4(val*val,val*val, val*val , 1);   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Cubes: k1=1, k2=6, g=100, max_state=500\n// Spirals: k1=3, k2=3, g=90, max_state=500\n// Spirals with dirt: k1=6, k2=1, g=100, max_state=500\n// Noise: k1=3, k2=4, g=100, max_state=500\n// Oscilatinig patterns: k1=3, k2=3, g=56, max_state=500\n\nconst float k1 = 3.; \nconst float k2 = 3.;\nconst float g = 90.;\nconst float max_state = 500.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 xy = fragCoord.xy / iResolution.xy;\n\tvec2 texel = 1. / iResolution.xy;\n    \n    float delta_x = texel.x;\n    float delta_y = texel.y;\n    \n    vec2 n = vec2(0.0, delta_y);\n    vec2 ne = vec2(delta_x, delta_y);\n    vec2 e = vec2(delta_x, 0.0);\n    vec2 se = vec2(delta_x, -delta_y);\n    vec2 s = vec2(0.0, -delta_y);\n    vec2 sw = vec2(-delta_x, -delta_y);\n    vec2 w = vec2(-delta_x, 0.0);\n    vec2 nw = vec2(-delta_x, delta_y);\n    \n    vec3 uv =    texture(iChannel0, xy).xyz;\n    vec3 uv_n =  texture(iChannel0, xy+n).xyz;\n    vec3 uv_e =  texture(iChannel0, xy+e).xyz;\n    vec3 uv_s =  texture(iChannel0, xy+s).xyz;\n    vec3 uv_w =  texture(iChannel0, xy+w).xyz;\n    vec3 uv_nw = texture(iChannel0, xy+nw).xyz;\n    vec3 uv_sw = texture(iChannel0, xy+sw).xyz;\n    vec3 uv_ne = texture(iChannel0, xy+ne).xyz;\n    vec3 uv_se = texture(iChannel0, xy+se).xyz;\n\n    if (uv.x > 0.99)\n        uv.x = 0.;\n    \n    else{\n        int infected = 0;\n        int sick = 0;\n        \n        if (uv_n.x > 0.99) sick ++;\n        else if (uv_n.x > 0.) infected ++;\n        if (uv_e.x > 0.99) sick ++;\n        else if (uv_e.x > 0.) infected ++;\n        if (uv_s.x > 0.99) sick ++;\n        else if (uv_s.x > 0.) infected ++;\n        if (uv_w.x > 0.99) sick ++;\n        else if (uv_w.x > 0.) infected ++;\n        if (uv_nw.x > 0.99) sick ++;\n        else if (uv_nw.x > 0.) infected ++;\n        if (uv_ne.x > 0.99) sick ++;\n        else if (uv_ne.x > 0.) infected ++;\n        if (uv_sw.x > 0.99) sick ++;\n        else if (uv_sw.x > 0.) infected ++;\n        if (uv_se.x > 0.99) sick ++;\n        else if (uv_se.x > 0.) infected ++;\n    \t\n        if (uv.x == 0.){\n            uv.x = floor(float(infected) / k1) + floor(float(sick) / k2);\n        }\n        else{\n            float sum = (uv_n.x + uv_s.x + uv_e.x + uv_w.x + uv_nw.x + uv_ne.x + uv_sw.x + uv_se.x) * max_state;\n            uv.x = sum / (float(infected + sick) + 1.) + g;\n        }\n        \n        if (uv.x > max_state)\n            uv.x = max_state;\n    }\n    \n\n    if(iFrame<5) {\n        fragColor = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    } else {\n        fragColor = vec4(uv.x / max_state);\n    }\n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}