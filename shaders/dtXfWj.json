{
    "Shader": {
        "info": {
            "date": "1693440853",
            "description": "Just messing with shaders... Added specular light and bump map.",
            "flags": 32,
            "hasliked": 0,
            "id": "dtXfWj",
            "likes": 6,
            "name": "Fork Voronoi fe Blindman67 766",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "Blindman67",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "vec2 inRes;\nconst float PIXEL_SIZE = 3.0;\nconst float HEIGHT_SCALE = 1.0;\nvec3 lightPow = vec3(1000, 1000, 1000);\nvec3 lightPos = vec3(-12.5, 14.5, 12.5);\nvec3 camPos = vec3(0.5, 5, 0.5);\n\nvec4 GetColor(in vec2 fragCoord) {\n    vec2 uv = fragCoord * inRes;\n    vec4 cc = texture(iChannel0, uv);\n    vec2 offset = vec2(cos(cc.a * TAU * 2.0), sin(cc.a * TAU * 2.0)) / iResolution.xy;        \n    vec4 cc1 = texture(iChannel1, cc.xy * offset);\n    vec4 cc2 = texture(iChannel2, cc.xz + cc.yz + offset);\n    return sqrt((cc1 * cc1 + cc2 * cc2) * 0.5) ;\n\n}\n\nfloat GetLevel(vec4 col) {\n    \n    return (col.x + col.y + col.z + col.a) * HEIGHT_SCALE;\n}\n\nvec4 PixelColor(in vec2 fragCoord) {\n    vec2 uv = fragCoord * inRes;\n    vec4 colA = GetColor(fragCoord);\n\n    \n    float A  = GetLevel(colA);\n    float B = GetLevel(GetColor(fragCoord + vec2(PIXEL_SIZE,  0)));\n    float C = GetLevel(GetColor(fragCoord + vec2(0,  PIXEL_SIZE))); \n    vec3 norm = normalize(cross(vec3(1.0, B - A, 0), vec3(0, C - A, 1.0)));\n    vec3 L = vec3(uv.x, A, uv.y) - lightPos;\n    float dist = length(L);\n    L = normalize(L);\n    vec4 l = vec4((lightPow/ (dist * dist)) * clamp(dot(norm, L), 0.0, 1.0), 0) ;\n    vec3 R = reflect(L, norm);\n    float spec = pow(clamp(dot(normalize(camPos), R), 0.0, 1.0), 15.0);\n    return colA * l + vec4(spec) * (1.0 - A * 0.25);\n\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    inRes = 1.0 / iResolution.xy;\n    \n    fragColor = pow(PixelColor(fragCoord), vec4(1.2));  // push up the contrast a bit\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_POINTS 100u\n#define MAX_POINTS_F 100.0\n#define INV_11 (1.0 / 11.0)\n\nconst float PI = 3.14159;\nconst float TAU = PI * 2.0;\nconst float ANG_90 = PI * 0.5;\nconst float INV_PI = 1.0 / PI;\nconst float INV_ANG_90 = 1.0 / ANG_90;\nconst float INV_TAU = 1.0 / TAU;\nconst float INV_60 = 1.0 / 60.0;\nconst float INV_64 = 1.0 / 64.0;\nconst float INV_255 = 1.0 / 255.0;\n\n\n#define MIN_SEED 0x1FFu\nconst float INV_RND_RANGE = 1.0 / float(0xFFFFFFFFu);\nuint seed = MIN_SEED;\nuint Rnd() { seed ^= seed << 13; seed ^= seed >> 17; seed ^= seed << 5; return seed; }\nuint Rnd(in uint range) { return Rnd() % range; }\nfloat RndUnit() { return float(Rnd()) * INV_RND_RANGE; }\nvec2 RndCoord() { return vec2(RndUnit(), RndUnit()); }\nbool Odds(in uint oneIn) { return (Rnd() % oneIn) == 0u; }\nvoid Seed(in uint val) { seed = MIN_SEED + val; }\nmat2 Rot2D(float ang) { return mat2(cos(ang), sin(ang), -sin(ang), cos(ang)); }\n\nvec4 colorRef[11] = vec4[](\n    vec4(0.0,  0.0,  0,  INV_11 * 0.0),\n    vec4(0.1,  0.1,  0,  INV_11 * 1.0),\n    vec4(0.2,  0.2,  0,  INV_11 * 2.0),\n    vec4(0.3,  0.3,  0,  INV_11 * 3.0),\n    vec4(0.4,  0.4,  0,  INV_11 * 4.0),\n    vec4(0.5,  0.5,  0,  INV_11 * 5.0),\n    vec4(0.6,  0.6,  0,  INV_11 * 6.0),\n    vec4(0.7,  0.7,  0,  INV_11 * 7.0),\n    vec4(0.8,  0.8,  0,  INV_11 * 8.0),\n    vec4(0.9,  0.9,  0,  INV_11 * 9.0),\n    vec4(1.0,  1.0,  0,  INV_11 * 10.0)\n);\nvec4 colorSet[11] = vec4[](\n    vec4(1,  0,  0,  1),\n    vec4(1,  0.5,0,  1),\n    vec4(1,  1,  0,  1),\n    vec4(0,  1,  0,  1),\n    vec4(0,  1,  1,  1),\n    vec4(0,  1,  0.5,1),\n    vec4(0,  0.5,1,  1),\n    vec4(0,  0,  1,  1),\n    vec4(0.5,0,  1,  1),\n    vec4(1,  0,  1,  1),\n    vec4(1,  0,  0.5,1)\n);\n\nvec4 color;\nfloat IsNear(uint idx, float mdist, vec2 xy) {\n    float dist = distance(xy, RndCoord());\n    if (dist < mdist) {\n        color = colorRef[idx % uint(colorSet.length())];\n        color.a = float(idx) / MAX_POINTS_F;\n        return dist;\n    }\n    return mdist;\n    \n}\nvec4 Vonoroi(vec2 xy, float dist) {\n    color = vec4(0);\n    uint idx = 0u;\n    while (idx < MAX_POINTS) {\n        dist = IsNear(idx++, dist, xy);\n    }\n    return color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define RESET 1500\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 px = ivec2(fragCoord);\n    if (px.x == 0 && px.y == 0 && (iFrame % RESET) == 0) {\n\n        if (iFrame  % RESET == 0) {\n            fragColor = vec4(0,0,0,1);\n        } else {\n            fragColor = texelFetch(iChannel0, ivec2(0,0), 0);\n        } \n\n    } else if ((iFrame % RESET) == 1) {\n        Seed(uint(iResolution.x * iResolution.y) + uint(iFrame));\n        vec4 dd = texelFetch(iChannel0, ivec2(0,0), 0);\n        float dist = dd.x;\n        fragColor = Vonoroi(fragCoord / iResolution.xy, 1.0);\n    } else {\n        float turn = sin(float(iFrame - 100) / 100.0) * PI;\n        vec4 cc = texelFetch(iChannel0, px, 0);\n        const float d1 = 1.1;\n        const float d2 = 3.2;\n        vec4 cc1 = texture(iChannel0, (fragCoord + vec2(cos((cc.g * 0.5 + cc.a * 0.5) * TAU + turn) * d1, sin((cc.g * 3.0 + cc.a* 7.0) * TAU + turn) * d1)) / iResolution.xy);\n        vec4 cc2 = texture(iChannel0, (fragCoord + vec2(cos((cc.b + cc.a) * TAU + turn) * d2, sin((cc.b + cc.a)  * TAU + turn) * d2)) / iResolution.xy);\n\n        fragColor = vec4(sqrt((\n                cc.rgba  * cc.rgba  + \n                cc1.rgba * cc1.rgba + \n                cc2.rgba * cc2.rgba \n            ) * (1.0 / 3.0)));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}