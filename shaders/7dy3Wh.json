{
    "Shader": {
        "info": {
            "date": "1631458754",
            "description": "a star sdf",
            "flags": 0,
            "hasliked": 0,
            "id": "7dy3Wh",
            "likes": 5,
            "name": "star sdf",
            "published": 3,
            "tags": [
                "sdf",
                "star"
            ],
            "usePreview": 0,
            "username": "mdb",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\n\nfloat star(vec2 p, float radius, float inset, float n){\n    float teta = 2.0 * PI / n;\n    mat2x2 rot1 = mat2x2(cos(teta), sin(teta), -sin(teta), cos(teta));\n    \n    vec2 p1 = vec2(0.0, radius);\n    vec2 p2 = vec2(sin(teta*0.5), cos(teta*0.5))*radius*inset;\n    \n    float tetaP = PI + atan(-p.x, -p.y);\n    tetaP = mod(tetaP + PI / n, 2.0 * PI);\n    \n    for(float i = teta; i < tetaP; i+= teta)\n         p = rot1 *p;\n    \n    p.x = abs(p.x);\n    \n    // sdf segment\n    vec2 ba = p2-p1;\n    vec2 pa = p - p1;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    float d = length(pa-h*ba);\n    d *= sign(dot(p - p1, -vec2(ba.y, -ba.x)));\n    return d;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float t = iTime*0.4;\n    \n    float radius = 0.7;\n    float innerRadiusScale = 0.5 + 0.4 * cos(2.0 * PI * t);\n    float sides = 2.0 + floor(8.0 * fract(t/8.0));\n    \n    float d = star(uv, radius, innerRadiusScale, sides);\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    if( iMouse.z>0.001 )\n    {\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    d = star(m, radius, innerRadiusScale, sides);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(uv-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(uv-m)-0.015));\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}