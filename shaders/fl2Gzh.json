{
    "Shader": {
        "info": {
            "date": "1623354303",
            "description": "A genuine implementation of the gradient noise (aka Perlin noise).\nHere is the most comonly found version of the gradient noise,\nThe octave sum create a gradient fractional brownian motion.\nTo see the raw gradient noise, set nb_octave to 1",
            "flags": 0,
            "hasliked": 0,
            "id": "fl2Gzh",
            "likes": 5,
            "name": "Genuine gradient noise 2D",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "gradient",
                "genuine"
            ],
            "usePreview": 0,
            "username": "GenuineIntelligence",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "/* Copyright © 2021 by Arthur Cavalier, Théo Jonchier, Thibault Tricard\nThis work is free. You can redistribute it and/or modify it under the\nterms of the Do What The Fuck You Want To Public License, Version 2,\nas published by Sam Hocevar. See the COPYING file or http://www.wtfpl.net/ \nfor more details.*/\n\n/** INPUT PARAMETERS */\n\n#define scale 0.2\n#define nb_octaves 5\n\n/** @brief Generates a random 2D vector */\nvec2 random_2_2(vec2 p)\n{\n    p = p*mat2(127.1,311.7,269.5,183.3);\n\tp = -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n\treturn sin(p*6.283);\n}\n\n/** @brief improved version of the smoothstep fucntion which garantees \n    zero 1st and 2nd order derivative at its end points (0 and 1) */\nfloat smootherstep(float t) \n{ \n    return t * t * t * (t * (t * 6. - 15.) + 10.); \n}\n\n/** @brief gradient noise */\nfloat gradientNoise(vec2 pos)\n{\n    vec2 fr = fract(pos);\n    vec2 fl = floor(pos);\n    \n    vec2 AA= fl;\n    vec2 AB= fl  + vec2(1,0);\n    vec2 BA= fl  + vec2(0,1);\n    vec2 BB= fl  + vec2(1,1);\n    \n    // we sample random vectors on a regular grid latices\n    //\n    //  AA-----------AB\n    //   |           |\n    //   |           |\n    //   |    pos    |\n    //   |           |\n    //   |           |\n    //  BA-----------BB\n    vec2 rAA = random_2_2(AA);\n    vec2 rAB = random_2_2(AB);\n    vec2 rBA = random_2_2(BA);\n    vec2 rBB = random_2_2(BB);\n    \n    // we compute de dot product between \n    // the unit vectors\n    // and the vector from the sample \n    // to the po regular grid position\n    float dAA = dot(rAA, fr);\n    float dAB = dot(rAB, fr-vec2(1,0));\n    float dBA = dot(rBA, fr-vec2(0,1));\n    float dBB = dot(rBB, fr-vec2(1,1));\n    \n    // bilinear interpolation of the value to reduce the grid \n    // artifact we smooth the interpolation weight.\n    fr.x = smootherstep(fr.x);\n    fr.y = smootherstep(fr.y);\n    \n    float d_AA_AB = mix(dAA,dAB,fr.x);\n    float d_BA_BB = mix(dBA,dBB,fr.x);\n\n    return mix(d_AA_AB,d_BA_BB,fr.y) +0.5;\n}\n\n/** @brief fractional brownian motion */\nfloat fbm(vec2 uv)\n{\n    float noise = 0.0;\n    float weights = 0.0;\n    \n    // sum of the value octaves\n    for(int i = 0; i< nb_octaves; i++){\n        // octave frequency\n        float freq = 0.0625 *  pow(2.0,float(i+1));\n        // octave weight\n        float weight = pow(2.0,-float(i+1));\n        \n        // sum of the octave times the weight\n        noise += gradientNoise(uv* freq)*weight;\n        // sum of the weight\n        weights += weight;\n    }\n    \n    // return the sum of octaves divided by the sum of the weight\n    return noise /weights;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // we sample the fractional brownian motion at a point\n    // we shift it from the origin to avoid artefacts\n    float value = fbm(fragCoord * scale  + vec2(97,89)) ;\n    \n    fragColor = vec4(value);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}