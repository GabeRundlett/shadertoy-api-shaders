{
    "Shader": {
        "info": {
            "date": "1670879511",
            "description": "CC0: Reflection 4D Julia\nLate to the party experimenting with 4D julias.\nDistance function from IQ's Quaternion 1 : https://www.shadertoy.com/view/MsfGRr\n",
            "flags": 0,
            "hasliked": 0,
            "id": "msBXWK",
            "likes": 17,
            "name": "Reflective 4D Julia",
            "published": 3,
            "tags": [
                "julia",
                "4d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "// CC0: Reflective 4D Julia\n// Late to the party experimenting with 4D julias.\n// Distance function from IQ's Quaternion 1 : https://www.shadertoy.com/view/MsfGRr\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  24.0\n#define MAX_RAY_MARCHES 100\n#define MAX_REF_MARCHES 30\n#define MAX_SHADOW_MARCHES 20\n#define NORM_OFF        0.001\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff      = 0.0;\nconst vec3 skyCol     = HSV2RGB(vec3(hoff+0.57, 0.70, 0.25));\nconst vec3 sunCol1    = HSV2RGB(vec3(hoff+0.60, 0.50, 0.5));\nconst vec3 sunCol2    = HSV2RGB(vec3(hoff+0.05, 0.75, 25.0));\nconst vec3 skylineCol = HSV2RGB(vec3(hoff+0.35, 0.85, 0.0025));\nconst vec3 diffCol    = HSV2RGB(vec3(hoff+0.60, 0.75, 0.2));\nconst vec3 sunDir1    = normalize(vec3(3., 3.0, -7.0));\n\nconst mat2 rot0 = ROT(0.0); \n\nfloat g_zoff = 0.0;\nmat2 g_rot0 = rot0; \nmat2 g_rot1 = rot0; \nmat2 g_rot2 = rot0; \n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  float sd = max(dot(sunDir1, rd), 0.0);\n  float sf = 1.0001-sd;\n\n  col += skylineCol/abs(abs(rd.y));\n  col += 0.5*skyCol*pow((1.0-abs(rd.y)), 8.0);\n  col += sunCol1*pow(sd, 100.0);\n  col += sunCol2*pow(sd, 800.0);\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n    col += 0.25*sqrt(skyCol)*max(-db, 0.0);\n  }\n\n  return clamp(col, 0.0, 10.0);\n}\n\nfloat dot2(vec4 p) {\n  return dot(p, p);\n}\n\nvec4 q2(vec4 a) {\n    return vec4(a.x*a.x - dot(a.yzw,a.yzw), 2.0*a.x*(a.yzw));\n}\n\n// From IQ's - Quaternion 1 : https://www.shadertoy.com/view/MsfGRr\nfloat julia(vec3 p, vec4 c) {\n  vec4 z = vec4(p, g_zoff);\n  z.wz *= g_rot0;\n  z.wx *= g_rot1;\n  z.wy *= g_rot2;\n  float md2 = 1.0;\n  float mz2 = dot2(z);\n\n  for(int i=0; i<8; ++i) {\n    md2 *= 4.0*mz2;\n    z = q2(z) + c;  \n\n    mz2 = dot2(z);\n    if(mz2>40.0) break;\n  }\n    \n  return 0.25*sqrt(mz2/md2)*log(mz2);  // d = 0.5·|z|·log|z|/|z'|\n}\n\n\nfloat df(vec3 p) {\n  const vec4 c = 0.45*cos( vec4(0.5,3.9,1.4,1.1) + 0.9*vec4(1.2,1.7,1.3,2.5) ) - vec4(0.3,0.0,0.0,0.0);\n  float d0 = p.x+3.0;\n  const float z = 3.0;\n  float d1 = julia(p/z, c)*z;\n  float d= d0;\n  d = min(d, d1);\n  return d;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  return t;\n}\n\nfloat shadowMarch(in vec3 ps, in vec3 ld, in float mint, in float k) {\n  float res = 1.0;\n  float t = mint*2.0;\n  for (int i=0; i<MAX_SHADOW_MARCHES; ++i) {\n    vec3 p = ps + ld*t;\n    float d = df(p);\n    res = min(res, k*d/t);\n    if (res < TOLERANCE) break;\n    \n    t += max(d, mint);\n  }\n  return clamp(res, 0.0, 1.0);\n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  float t = rayMarch(ro, rd);\n  vec3 col = vec3(0.0);\n\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  vec3 r = reflect(rd, n);\n  float sd = shadowMarch(p, sunDir1, 0.025, 8.0);\n  float rf = shadowMarch(p, r, 0.025, 4.0);\n  \n  float dif = max(dot(sunDir1, n), 0.0);\n  dif *= dif;\n  dif *= dif;\n  vec3 rcol = render0(p, r);\n  if (t < MAX_RAY_LENGTH) {\n    col = diffCol;\n    col *= mix(0.2, 1.0, dif);\n    col *= mix(0.2, 1.0, abs(sd));\n    col += rcol*rf;\n  }\n\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  const vec3 ro = vec3(5.0, 0.5, 1.2);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  const vec3 ww = normalize(la - ro);\n  const vec3 uu = normalize(cross(up, ww ));\n  const vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n\n  g_zoff = 0.25*sin(0.06*TIME);\n  g_rot0 = ROT(0.1*TIME);\n  g_rot1 = ROT(0.21*TIME);\n  g_rot2 = ROT(0.32*TIME);\n\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n  vec3 col = render1(ro, rd);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p);\n//  col *= smoothstep(1.75, 1.0-0.5, length(pp));\n  col = aces_approx(col); \n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}