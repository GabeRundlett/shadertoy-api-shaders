{
    "Shader": {
        "info": {
            "date": "1584976239",
            "description": "Abstract raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXyRS",
            "likes": 2,
            "name": "Continue to float",
            "published": 3,
            "tags": [
                "abstract"
            ],
            "usePreview": 0,
            "username": "gambhiro",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "#define i_time iTime\n#define i_resolution iResolution\n\nvec2 scene, eps = vec2(.00035, -.00035);\nfloat td; // travel dist\nfloat tt; // global time\nfloat attr;\n\nmat2 rot2(float r) {\n  return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return max(max(q.x, q.y), q.z);\n}\n\nfloat boxes(vec3 p) {\n  vec3 q = p;\n\n  q *= 0.6;\n  q.xz *= rot2(sin(p.y*0.5)*0.4);\n\n  q.x = mod(q.x + tt*.5, 3.0);\n\n  float d = box(abs(q) - vec3(1.5, 10.0, .8), vec3(.3, 10.0, .3));\n  return d;\n}\n\nvec2 map(vec3 p) {\n\n  // reverse sphere\n  attr = max(0.0, (6.0 - (length(p) - 6.0)));\n\n  vec2 res = vec2(boxes(p - vec3(.0, .0, 8.)), 5.0);\n\n  // background sphere\n  vec2 o = vec2(length(p - vec3(.0, .0, 20.))-10.0 + sin((p.x+tt*2.5)*5.0)*.1, 15.0);\n\n  res = (res.x < o.x) ? res : o;\n\n  p += vec3(0, -.5, -2);\n  p *= 0.9;\n\n  // A\n  vec3 q = p;\n\n  float ttt = tt - 1.5;\n  for (int i=0; i<2; i++) {\n    q = abs(q) - vec3(0.3*attr, 0.2, 3);\n    q.xy *= rot2(attr*(0.1+sin(ttt)*.2));\n    q.xz *= rot2(attr*0.2+sin(ttt+1.0)*.2);\n  }\n\n  q.z = mod(q.z, 2.5);\n  o = vec2(box(q - vec3(.0, 4, 0.), vec3(.5, .5, 10)), 10);\n\n  res = (res.x < o.x) ? res : o;\n\n  // B\n\n  q = p;\n  attr = max(0.0, (4.0 - (length(p) - 4.0)));\n\n  ttt += .5;\n  for (int i=0; i<2; i++) {\n    q = abs(q) - vec3(0.3*attr, 0.2, 3);\n    q.xy *= rot2(attr*(0.1+sin(ttt)*.3));\n    q.xz *= rot2(attr*0.2+sin(ttt+1.0)*.3);\n  }\n\n  q.z = mod(q.z, 2.5);\n  o = vec2(box(q - vec3(.0, 3, 0.), vec3(.5, .5, 10)), 10);\n\n  res = (res.x < o.x) ? res : o;\n\n  q *= 0.6;\n  q.y -= 0.2;\n  o = vec2(box(q - vec3(.1, 2.5, .0), vec3(.6, .6, 10)), 10);\n\n  res = (res.x < o.x) ? res : o;\n\n  q *= 0.6;\n  q.y -= 0.2;\n  o = vec2(box(q - vec3(.1, 2, .0), vec3(.7, .7, 10)), 10);\n\n  res = (res.x < o.x) ? res : o;\n\n  return res;\n}\n\nvec2 trace(vec3 ro, vec3 rd) {\n  vec2 h, t = vec2(0.1);\n  for (int i=0; i<128; i++) {\n    h = map(ro+rd*t.x);\n    if (h.x < .0001 || t.x > 100.0) break;\n    t.x += h.x*0.6;\n    t.y = h.y;\n  }\n  if (t.x > 100.0) t.x = 0.0;\n  return t;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n  vec2 uv = vec2(frag_coord.x / i_resolution.x, frag_coord.y / i_resolution.y);\n  uv -= 0.5;\n  uv /= vec2(i_resolution.y / i_resolution.x, 1);\n\n  tt = mod(i_time*.5, 100.0);\n\n  // ===============\n\n  vec3 ro = vec3(0, 2, -10);\n  vec3 rd = normalize(vec3(uv,0.5));\n\n  vec3 ld = normalize(vec3(.3, .5, -.5));\n\n  vec3 fog = vec3(0.9) * (1.0 - (length(uv)-0.2));\n  vec3 col = fog;\n\n  scene = trace(ro, rd);\n\n  td = scene.x;\n  if (td > 0.0) {\n    vec3 pp = ro+rd*td;\n    vec3 nor = normalize(eps.xyy*map(pp+eps.xyy).x +\n                         eps.yyx*map(pp+eps.yyx).x +\n                         eps.xyx*map(pp+eps.xyx).x +\n                         eps.xxx*map(pp+eps.xxx).x);\n\n    vec3 b0 = vec3(.1, .5, .8);\n    vec3 b1 = vec3(0.7, .8, .8);\n    vec3 base = mix(b0, b1, attr);\n\n    float foggy;\n\n    if (scene.y == 5.0) {\n      foggy = -.00001*td*td*td;\n    }\n\n    if (scene.y == 10.0) {\n      foggy = -.0000005*td*td*td;\n    }\n\n    if (scene.y == 15.0) {\n      foggy = -.00005*td*td*td;\n      base = vec3(0, 1, 0);\n    }\n\n    float diff = max(0.0, dot(nor, ld));\n\n    float aor = td/30.;\n    float ao = exp2(-2.*pow(max(0.,1.-map(pp+nor*aor).x/aor),2.));\n\n    float fr = pow(1.+dot(nor,rd),2.);\n\n    vec3 sss = vec3(0.5)*smoothstep(0.,1.,map(pp+ld*0.4).x/0.4);\n\n    col = base*(0.9*ao+0.2)*(diff+sss);\n    col = mix(col, b0, min(fr, 0.2));\n\n    col = mix(col, fog, 1.0-exp(foggy));\n  }\n\n\n  col = pow(col, vec3(1.8)); // stronger colours\n  col = vec3(1.0) - exp(-col * 3.0); // exposure hdr\n  col = pow(col, vec3(.45)); // gamma\n\n  frag_color = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}