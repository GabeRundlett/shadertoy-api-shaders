{
    "Shader": {
        "info": {
            "date": "1649323679",
            "description": "Camera,3D",
            "flags": 0,
            "hasliked": 0,
            "id": "NlByRw",
            "likes": 0,
            "name": "07 Camera",
            "published": 3,
            "tags": [
                "3d",
                "camera"
            ],
            "usePreview": 0,
            "username": "ccc9527",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "struct Ray   //射线结构体\n{\n    vec3 origin;//射线原点origin\n    vec3 direction;//射线方向direction\n};\n//设置摄像机的三个基向量并返回射线\nRay GetRay(vec2 uv,vec3 camPos,vec3 lookat,float zoom)\n{\n    Ray ray;\n    ray.origin = camPos;\n    //摄像机的三个基向量\n    vec3 forward = normalize(lookat-camPos);\n    vec3 right = cross(vec3(0.0,1.0,0.0),forward);\n    vec3 up = cross(forward,right);\n    \n    vec3 center = ray.origin+forward*zoom;\n    vec3 i = center+right*uv.x+up*uv.y;\n    ray.direction = normalize(i-ray.origin);\n    \n    return ray;\n}\n//获得点p到射线ray上最近的点,通过射线原点加上射线方向乘以(p-ro和rd的点乘)\n//点乘表示中的rd是归一化的所以点乘结果就是点p在rd方向上的投影长度\nvec3 GetClosestPoint(Ray ray,vec3 p)\n{\n    return ray.origin+max(0.0,dot(p-ray.origin,ray.direction))*ray.direction;\n}\n//求最近到到p的距离\nfloat GetDistance(Ray ray,vec3 p)\n{\n    return length(p-GetClosestPoint(ray,p));\n}\n//绘制背景虚化效果\nfloat Bokeh(Ray ray,vec3 p,float size,float blur)\n{\n    float d = GetDistance(ray,p);\n    float c = smoothstep(size,size-blur*size,d);\n    c *= mix(0.6,1.0,smoothstep(0.8*size,size,d));\n    \n    return c;\n}\n//获取一个伪随机的(0,1)的数\nfloat Noise(float t)\n{\n    return fract(sin(t*564.0)*3389.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    //虚拟摄像机\n    vec3 camPos = vec3(0.0,0.0,0.0);\n    vec3 lookat = vec3(0.0,0.0,1.0);\n    float zoom = 2.0;\n    Ray ray = GetRay(uv,camPos,lookat,zoom);\n    \n    float z = 50.0-fract(iTime/2.0)*50.0;\n    vec3 p0 = vec3(1.0,1.0,1.2*z);//中间\n    \n    float d = Bokeh(ray,p0,0.3,0.1);\n    float i = Noise(floor(iTime/2.0));\n    for(;i<20.0;i+=1.0)\n    {\n        vec3 offset = vec3(Noise(i)*2.0-1.0,Noise(i+0.5)*2.0-1.0,0.0);\n        vec3 p = p0-offset*10.0;\n        p.z *= i/10.0;\n        d += Bokeh(ray,p,0.3,0.1);\n    }\n    \n    vec3 col = vec3(1.0,0.7,0.3)*d;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}