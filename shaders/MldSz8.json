{
    "Shader": {
        "info": {
            "date": "1478192671",
            "description": " ",
            "flags": 0,
            "hasliked": 0,
            "id": "MldSz8",
            "likes": 45,
            "name": "Voronoi fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "voronoi"
            ],
            "usePreview": 0,
            "username": "_A_",
            "viewed": 4065
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2016 Zhirnov Andrey\n\n#define ANIMATE\t\t0.5\t\t// animation speed\n//#define COLORED\n\n\nvec2 Hash22 (vec2 p)\n{\n    vec2 q = vec2( dot( p, vec2(127.1,311.7) ), \n\t\t\t\t   dot( p, vec2(269.5,183.3) ) );\n    \n\treturn fract( sin(q) * 43758.5453 );\n}\n\nfloat Hash21 (vec2 p)\n{\n    return fract( sin( p.x + p.y * 64.0 ) * 104003.9);\n}\n\nvec2 Hash12 (float f)\n{\n    return fract( cos(f) * vec2(10003.579, 37049.7) );\n}\n\nfloat Hash11 (float a)\n{\n   \treturn Hash21( vec2( fract(a * 2.0), fract(a * 4.0) ) );\n    //return fract( sin(a) * 54833.56 );\n}\n\nvec4 voronoi (in vec2 x)\n{\n    // from https://www.shadertoy.com/view/ldl3W8\n    // The MIT License\n    // Copyright © 2013 Inigo Quilez\n    \n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = Hash22( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime * ANIMATE + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = Hash22( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime * ANIMATE + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        \tmd = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec4( x - (n + mr + f), md, Hash21( mg + n ) );\n}\n\n\nvec3 HSVtoRGB (vec3 hsv)\n{\n    // from http://chilliant.blogspot.ru/2014/04/rgbhsv-in-hlsl-5.html\n\tvec3 col = vec3( abs( hsv.x * 6.0 - 3.0 ) - 1.0,\n\t\t\t\t\t 2.0 - abs( hsv.x * 6.0 - 2.0 ),\n\t\t\t\t\t 2.0 - abs( hsv.x * 6.0 - 4.0 ) );\n\n\treturn (( clamp( col, vec3(0.0), vec3(1.0) ) - 1.0 ) * hsv.y + 1.0 ) * hsv.z;\n}\n\nvec3 Rainbow (float color, float dist)\n{\n    dist = pow( dist, 8.0 );\n    return mix( vec3(1.0), HSVtoRGB( vec3( color, 1.0, 1.0 ) ), 1.0 - dist );\n}\n\n\nvec3 VoronoiFactal (in vec2 coord, float time)\n{\n    const float freq = 4.0;\n    const float freq2 = 6.0;\n    const int iterations = 4;\n    \n    vec2 uv = coord * freq;\n    \n    vec3 color = vec3(0.0);\n    float alpha = 0.0;\n    float value = 0.0;\n    \n    for (int i = 0; i < iterations; ++i)\n    {\n    \tvec4 v = voronoi( uv );\n    \t\n        uv = ( v.xy * 0.5 + 0.5 ) * freq2 + Hash12( v.w );\n        \n        float f = pow( 0.01 * float(iterations - i), 3.0 );\n        float a = 1.0 - smoothstep( 0.0, 0.08 + f, v.z );\n        \n        vec3 c = Rainbow( Hash11( float(i+1) / float(iterations) + value * 1.341 ), i > 1 ? 0.0 : a );\n        \n        color = color * alpha + c * a;\n        alpha = max( alpha, a );\n        value = v.w;\n    }\n    \n    #ifdef COLORED\n    \treturn color;\n    #else\n    \treturn vec3( alpha ) * Rainbow( 0.06, alpha );\n    #endif\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = VoronoiFactal( fragCoord.xy / iResolution.xx, iTime );\n    \n    fragColor = vec4( color, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}