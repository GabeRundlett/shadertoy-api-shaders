{
    "Shader": {
        "info": {
            "date": "1462320054",
            "description": "Some nice shapes. good at fullscreen.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsdSWl",
            "likes": 81,
            "name": "Gilmore Leaves",
            "published": 3,
            "tags": [
                "circles",
                "grid",
                "tiles"
            ],
            "usePreview": 0,
            "username": "airtight",
            "viewed": 3606
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926535;\nconst float flipTime  = 2.;\n\nvec2 tileDims = vec2(3.0,3.0); //number of rows ,columns\n\nfloat random (vec2 st) { \n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat randomRange (in vec2 seed, in float min, in float max) {\n\t\treturn min + random(seed) * (max - min);\n}\n\nvec2 rotate2D(vec2 position, float theta)\n{\n    mat2 m = mat2( cos(theta), -sin(theta), sin(theta), cos(theta) );\n    return m * position;\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//returns 1 for inside circ, 0 for outside\nfloat circle(in vec2 _st, in vec2 pos, in float _radius){\n    \n    float circEdge  =  20.0 / iResolution.x;\n    \n    vec2 dist = _st - pos;    \n\treturn 1. - smoothstep(_radius-(_radius*circEdge),\n                         _radius+(_radius*circEdge),\n                         dot(dist,dist)*4.0);\n}\n\nvec3 gilmoreCol(float x){    \n    //offset hue to put red in middle\n    float hue = fract((1.0 - x) - 0.45);    \n    //saturation is higher for warmer colors\n    float sat = 0.3 + sin(x*PI)*0.5;    \n    //brightness higher in middle\n    float bri = (smoothstep(0.,0.6, x) - smoothstep(0.6,1.0,x))*.6 + 0.3;  \n    return vec3(hue, sat,bri);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n     //0-1 on both axes\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //square aspect ratio, centered\n    vec2 uvs = vec2( fragCoord.xy - 0.5*iResolution.xy ) / min(iResolution.x,iResolution.y);\n    \n    //switch tileDims every 2 seconds\n    float rndTime = randomRange(vec2(floor(iTime/flipTime), 79834.345),3.,16.);\n    //number of rows ,columns\n    tileDims = vec2(floor(rndTime),floor(rndTime));\n    \n    //rotate\n    uvs = rotate2D(uvs,cos(iTime/10.));\n    \n    //warp\n    //uvs.x = uvs.x + sin(uvs.x*4.+iTime*6.)*0.005;\n    \n    //zoomer\n    //uvs *= (cos(iTime/2.) *0.2 + 1.);\n    \n    //slide columns down separately\n    //tile H coord \n    float colId = floor(uvs.x * tileDims.x);   \n    //rand per column\n    float rndColumn = random(vec2(colId, 687.890));\n    uvs.y += iTime * (rndColumn ) /30.;\n    \n    //bounce\n    //uvs.y += cos(iTime*PI * rndColumn)/10.;\n    \n\t//rnd per tile   \n    float rnd = random(floor(uvs.xy * tileDims) +  floor(iTime/flipTime));\n    \n    //mostly green w/ some reds\n    vec3 tileHSV;\n    if(rnd < 0.9){        \n       tileHSV = gilmoreCol(rnd/2.6);       \n    }else{\n        tileHSV = gilmoreCol(rnd - 0.4);      \n    }\n             \n    //get random int 0 - 3 per tile\n    float tileRnd = random(floor(uvs.xy * tileDims ) * 88.89 );\n    tileRnd = floor(tileRnd * 4.);\n    \n    //st is 0-1 coords within tile \n    vec2 st = fract(uvs * tileDims);\n    \n    //flip tiles\n    if (tileRnd == 1.) {\n    \tst.y = 1.0 - st.y;    \n    }else if (tileRnd == 2.) {\n       st.x = 1.0 - st.x;       \n    } else if (tileRnd == 3.) {        \n        st.x = 1.0 - st.x;    \n        st.y = 1.0 - st.y;    \n    }\n    \n    //draw circles\n    float circ = circle(st,vec2(0),4.);\n\ttileHSV.z *= circ;\n  \n    //column shadows\n    float hShadow = smoothstep(0.4, 0., fract(-uvs.x*tileDims.x)) * 0.12;\n   \ttileHSV.z -= hShadow;\n    \n    //slight vertical hue shift\n    float vShift = smoothstep(0.9, 0., st.y) * 0.03;\n   \ttileHSV.x -= vShift;\n    \n    //screen vertical brightness gradient\n    tileHSV.z -= fract( 1.0 - uv.y  ) * 0.3;\n    \n    fragColor = vec4(hsv2rgb(tileHSV),1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}