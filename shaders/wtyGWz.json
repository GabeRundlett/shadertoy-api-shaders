{
    "Shader": {
        "info": {
            "date": "1578663148",
            "description": "Sharpen kernel from https://www.shadertoy.com/view/MtdXW4\nThere are also some parts of @wyatt's framework left in the code.\n\npotato salad is good! ",
            "flags": 32,
            "hasliked": 0,
            "id": "wtyGWz",
            "likes": 16,
            "name": "Day 22 - Reaction Diffusion 2",
            "published": 3,
            "tags": [
                "diffusion",
                "reactiondiffusion",
                "reaction"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 627
        },
        "renderpass": [
            {
                "code": "// Sharpen kernel from https://www.shadertoy.com/view/MtdXW4\n// There are also some parts of wyatt's framework left in the code.\n\n// This is convolutional feedback (blur > sharpen feedback)\n// The only thing I have added is some uv displacement\n\n\n#define pal(x,t) (0.5 + 0.5*sin(x*vec3(0.67,0.2,0.7) + t))\n\nvoid mainImage( out vec4 C, in vec2 U )\n{ \n\t#define grad 0.25*vec2(e.z-w.z,n.z-s.z)\n    vec2 uv = (U-0.5*R)/R.y;\n    \n    vec4 CA = C * 1. - mix(0., 1., pow(length(uv)*1.1, 2.));\n    Neighbors;\n    vec4 a = A(U);\n    C = B (U);\n    vec3 no = normalize(vec3(grad,1.1));\n    vec3 re = reflect(no,vec3(0.,0,1));\n    float density = A(U).z;\n    C = sin(0.2*density+0.2*pal(density*2. + no*3. + length(uv)*5. + iTime*2.,3.4).xyzy*density);\n    \n    //C = clamp(C, 0., 1.);\n    C = pow(C, vec4(0.9,1.1,0.8,0.));\n    C = smoothstep(0.,1.,C);\n    C *= 7.5;\n    \n    \n    C = mix(C, CA*pal(iTime*10. , 20.).xyxz*C.x, CA.x);\n    //C = texture(iChannel1, U/R);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define doUVs \\\n\tvec2 uv = U;\\\n    vec2 suv = U/R;\\\n    vec2 uvM = U/iResolution.y;\\\n    uv -= 0.5*R.xy;\\\n    uv *= 0.998;\\\n    uv.xy *= rot(iTime*0.00001);\\\n    vec2 uvC = uv; \\\n    uv.xy *= rot(0.002*length(uvC)/R.x*sin(iTime*0.04 ) );\\\n    uv += 0.5*R.xy;\\\n\tuv /= R;\n\n \n#define distUVs \\\n\tuv += st*lap*-(0.4 + exp(-length(uvC/R)*20.));\\\n\tuv *= 1. - normalize(uvC)*kick*0.001;\n\t//uv += st*lap*(-0.5 +sin(iTime)*0.1)*2.;\\\n\t//uv += st*lap*(0.5 -sin(iTime)*0.05);\\\n        \n#define onMouse \\\n    if (iMouse.z > 0.) { \\\n        float md = 0.1;\\\n        float d = smoothstep(md,md*0.5,length(uvM - iMouse.xy/iResolution.y))*1.;\\\n\t\tuvM *= rot(iTime*1.); \\\n        C.yz = mix(C.yz, vec4(texture(iChannel1, uvM)).yz,d);\\\n    }\n        \n        \n\n\n#define R (iResolution.xy)\n#define A(U) texture(iChannel0,(U)/R)\t\n#define B(U) texture(iChannel1,(U)/R)\n#define C(U) texture(iChannel2,(U)/R)\n#define D(U) texture(iChannel3,(U)/R)\n#define iTime (iTime + 60.5)\n\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define tempo 174.\n#define hbeat ((60./tempo)/1.)\n#define qnote (hbeat/2.)\n#define beat  (hbeat*2.)\n#define qbeat  (beat/4.)\n#define measure  (hbeat*2.)\n\n#define kick exp(-mod(iTime, beat)*10.)*0.4\n#define halfkick exp(-mod(iTime, hbeat)*20.)\n\n#define Neighbors vec4 n = A(U+vec2(0,1)), e = A(U+vec2(1,0)), s = A(U-vec2(0,1)), w = A(U-vec2(1,0)), m = 0.25*(n+e+s+w);\n\n#define st 1./R.xy\n#define t vec3(1.,0.,-1.)\n#define T(uv) texture(iChannel0, uv)\n#define TA(uv) texture(iChannel0, uv)\n#define TB(uv) texture(iChannel1, uv)\n#define TC(uv) texture(iChannel2, uv)\n#define TD(uv) texture(iChannel3, uv)\n\n\n\n\n#define s_n  vec2(0.0, st.y)\n#define s_ne  vec2(st.x, st.y)\n#define s_e   vec2(st.x, 0.0)\n#define s_se  vec2(st.x, -st.y)\n#define s_s   vec2(0.0, -st.y)\n#define s_sw  vec2(-st.x, -st.y)\n#define s_w   vec2(-st.x, 0.0)\n#define s_nw  vec2(-st.x, st.y)\n\n#define t_ne  T( U + s_ne).xyz\n#define t_nw  T( U + s_nw).xyz\n#define t_sw  T( U - s_sw).xyz\n#define t_se  T( U - s_se).xyz\n#define t_e  T( U + s_e).xyz\n#define t_n  T( U + s_n).xyz\n#define t_s  T( U + s_s).xyz\n#define t_w  T( U + s_w).xyz\n#define t_c  T( U ).xyz\n\n// sharpen \n\nvec4 sharpen(sampler2D channel,vec2 uv,vec2 res){\n    vec2 step = 1.0 / res;\n    float kernel [9];vec2 offset [9];\n\n\n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    kernel[0] = 0.0; kernel[1] = -0.25; kernel[2] = 0.0;\n    kernel[3] = -0.25; kernel[4] = 1.0; kernel[5] = -0.25;\n    kernel[6] = 0.0; kernel[7] = -0.25; kernel[8] = 0.0;\n    \n    vec4 sum = texture(channel, uv);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(channel, uv + offset[i]);\n        sum += color * kernel[i]*2.;\n    }\n    return sum;\n}\n\nvec4 blur(sampler2D channel,vec2 uv,vec2 res){\n    vec2 step = 1.0 / res;\n    float kernel [9];vec2 offset [9];\n\n\n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    kernel[0] = 1.0; kernel[1] = 1.; kernel[2] = 1.0;\n    kernel[3] = 1.; kernel[4] = 1.0; kernel[5] = 1.;\n    kernel[6] = 1.0; kernel[7] = 1.; kernel[8] = 1.0;\n    \n    vec4 sum = vec4(0);\n    \n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(channel, uv + offset[i]);\n        sum += color * kernel[i];\n    }\n    sum /= 9.;\n\t\n    return sum;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 C, in vec2 U )\n{\n    doUVs;\n        \n    #define div 0.25*(n.y-s.y+e.x-w.x)\n    vec2 lap =  vec2(length(T(uv + t.xy*st).xyz) - length(T(uv - t.xy*st).xyz), length(T(uv + t.yx*st).xyz) - length(T(uv - t.yx*st).xyz) );\n    \n    distUVs;\n    C = TA(uv);\n    C = blur(iChannel0, uv, R);\n    \n    C.x -= dot(vec2(A(uv).xz), vec2(1.,-1.))*2.2 * exp(0.1*length(uvC/R.x) - 3.5);\n    onMouse;\n    if (iFrame <3) C = abs(sin(U.xyxy*2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 C, in vec2 U )\n{\n    #define div 0.25*(n.y-s.y+e.x-w.x)\n\tNeighbors\n    doUVs;\n    vec2 lap =  vec2(T(U + t.xy*st).y - T(U - t.xy*st).y, T(U + t.yx*st).y - T(U - t.yx*st).y);\n    distUVs;\n    C = A(uv);\n    C = sharpen(iChannel0, uv, R);\n    C = C - div*0.1*sin(iTime*2. + length(uvC));\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}