{
    "Shader": {
        "info": {
            "date": "1663440213",
            "description": "Simple lightning effect created with segments. Unfortunately has noticable artifacts when paused, or with lesser segments, or high amplitude. Can still look nice at times :)",
            "flags": 0,
            "hasliked": 0,
            "id": "st3fRf",
            "likes": 10,
            "name": "Lightning Shader (v1)",
            "published": 3,
            "tags": [
                "2d",
                "lightning",
                "noise2d"
            ],
            "usePreview": 0,
            "username": "W_Master",
            "viewed": 561
        },
        "renderpass": [
            {
                "code": "// Created by Walter Jansen (2022-09-17)\n\n#define SPEED 0.45\n#define MUTATION_RATE 1.5\n#define SEGMENTS 100.0\n#define AMPLITUDE 0.2\n\nfloat segDist(vec2 a, vec2 b, vec2 p)\n{\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float h = dot(ab,ap)/dot(ab,ab);\n    h = clamp(h,0.0,1.0);\n    return (length(a + ab * h - p));\n}\n\nvec2 height(float v, float amp)\n{\n    float h = noise(vec2(v * 0.2, 1.2 + iTime * (MUTATION_RATE))) * 0.4 * amp;\n    return (vec2(v, h));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float amp = (AMPLITUDE) * smoothstep(0.5, 0.2, abs(uv.x-0.5));\n    uv.x *= iResolution.x/iResolution.y;\n    uv.y -= 0.5;\n    \n    float len = SEGMENTS;\n    uv.x *= len;\n    \n    vec2 pos;\n    float move = iTime * -(SPEED) * len;\n    \n    pos.x = uv.x + move;\n    pos.x = floor(pos.x) + 0.5;\n    pos = height(pos.x, amp);\n    vec2 post = height(pos.x + 1.0, amp);\n    vec2 pre  = height(pos.x - 1.0, amp);\n    \n    pos.x -= move;\n    post.x -= move;\n    pre.x -= move;\n    \n    float c = min(segDist(pos, post, uv), segDist(pos, pre, uv));\n    c = (0.007/c) * smoothstep(0.3,0.0,c);\n    \n    vec3 col = vec3(1.7,0.5, 1.7) * c;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n#if 0\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));\n    \n#else\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;\n#endif                              \n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// -----------------------------------------------",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}