{
    "Shader": {
        "info": {
            "date": "1696197226",
            "description": "Phased array waves generated by placing radial wave emitters together on a line, with same frequency, this technology is used in satellites. I was inspired by Code Parade, who made a laser, but instead of light waves it shot sound waves, it used this.",
            "flags": 8,
            "hasliked": 0,
            "id": "DdVSzd",
            "likes": 10,
            "name": "Phased Array Waves",
            "published": 3,
            "tags": [
                "sound",
                "wave",
                "radar",
                "array",
                "satellite",
                "phased"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 422
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float w = getWave(uv, iTime);\n    \n    vec3 col = vec3(0);\n    col.rg = abs(vec2(w));\n    col.g *= col.g;\n    col.b = col.g * col.g;\n\n    fragColor = vec4(sqrt(col), 1.0);\n    fragColor.rgb = mix(vec3(0.2, 0.7, 1.0), fragColor.rgb, clamp(2048.0 * dot(uv - LISTENER_POS_L, uv - LISTENER_POS_L), 0.0, 1.0));\n    fragColor.rgb = mix(vec3(0.5, 1.0, 0.5), fragColor.rgb, clamp(2048.0 * dot(uv - LISTENER_POS_R, uv - LISTENER_POS_R), 0.0, 1.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n    vec2 w = vec2(getWave(LISTENER_POS_L, time), getWave(LISTENER_POS_R, time));\n    return w * 16.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "const float TWO_PI = 6.28318530718;\nconst vec2 LISTENER_POS_L = vec2(1.0, 0.0);\nconst vec2 LISTENER_POS_R = LISTENER_POS_L;\nconst float SPREAD = 0.4;\nconst float FREQ = 64.0;\nconst float MOVE_AMOUNT = 1.0;\nconst float MOVE_SPEED = 4.0;\nconst int EMITTER_COUNT = int(FREQ * 4.0 * SPREAD); // Set to atleast (FREQ * 4 * SPREAD) to avoid multiple transmitter lines\n\nfloat wave(vec2 uv, vec2 p, float o, float f, float t)\n{\n    float d = distance(uv, p);\n    float w = sin(((d - t) * f - o) * TWO_PI) / (1.0 + 256.0 * d * d);\n    return w;\n}\n\nfloat getWave(vec2 uv, float t)\n{\n    float w = 0.0;\n    // Higher frequency = Further travel (Until it glitches out and everything explodes, don't try at home)\n    // You can change direction by offsetting either frequency or phase (offsetting frequency has side effects, so usually phase is offset)\n    for (float i = 0.0; i <= SPREAD; i += SPREAD / float(EMITTER_COUNT - 1))\n        w += wave(uv, vec2(0, i * 2.0 - SPREAD), i * sin(t * MOVE_SPEED) * MOVE_AMOUNT * FREQ, FREQ, t);\n    w /= float(EMITTER_COUNT) * 0.04;\n    \n    return w;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}