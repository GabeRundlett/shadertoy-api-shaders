{
    "Shader": {
        "info": {
            "date": "1547388165",
            "description": "I just wanted to draw 2d pixel character on the quads. Locally generated 10-bit data by my own tool.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wds3WS",
            "likes": 7,
            "name": "karby 2.5D test",
            "published": 3,
            "tags": [
                "25d",
                "karby"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 670
        },
        "renderpass": [
            {
                "code": "#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define combine(v1,v2) v1.w < v2.w ? v1 : v2\n\nint[] sp0 = int[](8384512,8386558,8388606,8374270,4128892,1966136,2097166,4194305,4194305,4194305,4194305,6316801,2122498,3171074,1073924,549640,524296,262160,131104,98496,32512);\nint[] sp1 = int[](2047,4192255,4194303,4190719,2031742,917564,3670018,4194305,4194305,4194305,4194305,4219651,2122498,2122502,1073924,549640,524296,262160,131104,98496,32512);\n\n\n// 1 row is 24bit max.\nfloat getBit(int num,int bit)\n{\n\treturn float( num>>bit & 1);\n}\n\nfloat SpriteNxN(int sprite,vec2 p)\n{\n\tfloat bounds = float(all(lessThan(p,vec2(23,1))) && all(greaterThanEqual(p,vec2(0,0))));\n\treturn getBit(sprite,int((22.0 - p.x)+p.y)) * bounds;\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udQuad( vec3 p, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 dc = d - c; vec3 pc = p - c;\n    vec3 ad = a - d; vec3 pd = p - d;\n    vec3 nor = cross( ba, ad );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(dc,nor),pc)) +\n     sign(dot(cross(ad,nor),pd))<3.0)\n     ?\n     min( min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ),\n     dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nvec4 map(vec3 p){\n    vec3 op = p;\n    p.x += iTime*2.0;\n    p.x = mod(p.x,3.0)-1.5;\n    \n    vec3 col = vec3(1.0);\n\tvec2 uv = p.xy * vec2(16,12);\n\tvec2 cpos = vec2(-12.0,-10.0);\n    \n    int frame = 0;\n    if(mod(iTime,1.0)>=0.5){\n        frame = 1;\n    }\n\tfloat dc = SpriteNxN(frame == 0 ? sp0[0]:sp1[0],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0 ? sp0[1]:sp1[1],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0 ? sp0[2]:sp1[2],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0 ? sp0[3]:sp1[3],floor(uv-cpos));\n\tcpos.y += 1.0; dc += SpriteNxN(frame == 0 ? sp0[4]:sp1[4],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0 ? sp0[5]:sp1[5],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0 ? sp0[6]:sp1[6],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[7]:sp1[7],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[8]:sp1[8],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[9]:sp1[9],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[10]:sp1[10],floor(uv-cpos));   \n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[11]:sp1[11],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[12]:sp1[12],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[13]:sp1[13],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[14]:sp1[14],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[15]:sp1[15],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[16]:sp1[16],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[17]:sp1[17],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[18]:sp1[18],floor(uv-cpos));\n\tcpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[19]:sp1[19],floor(uv-cpos));\n    cpos.y += 1.0; dc += SpriteNxN(frame == 0? sp0[20]:sp1[20],floor(uv-cpos));\n    \n\tcol = mix(col,vec3(0.0),dc*0.6 );\n    \n    vec4 quad = vec4(col,udQuad(p, vec3(-1.0, 1.0, 1.0), vec3(-1.0, -1.0, 1.0), vec3(1.0, -1.0, 1.0),vec3(1.0, 1.0, 1.0))*0.6);\n    \n    return combine(vec4(vec3(0.8),p.y+3.0),quad);\n}\n\nvec3 normalMap(vec3 p){\n\tfloat d = 0.0001;\n\treturn normalize(vec3(\n\t\tmap(p + vec3(  d, 0.0, 0.0)).w - map(p + vec3( -d, 0.0, 0.0)).w,\n\t\tmap(p + vec3(0.0,   d, 0.0)).w - map(p + vec3(0.0,  -d, 0.0)).w,\n\t\tmap(p + vec3(0.0, 0.0,   d)).w - map(p + vec3(0.0, 0.0,  -d)).w\n\t));\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n\tfloat h = 0.0;\n\tfloat c = 0.001;\n\tfloat r = 1.0;\n\tfloat shadow = 0.5;\n\tfor(float t = 0.0; t < 30.0; t++){\n\t\th = map(ro + rd * c).w;\n\t\tif(h < 0.001){\n\t\t\treturn shadow;\n\t\t}\n\t\tr = min(r, h * 16.0 / c);\n\t\tc += h;\n\t}\n\treturn 1.0 - shadow + r * shadow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    mat3 camRotY = matRotateY(radians(-iTime*10.0))*matRotateX(radians(5.));\n\n\tvec3 ro=vec3(0.,-.1,-8.);\n    vec3 rd=normalize(vec3(p,1.8));\n\t\n    float t, dist;\n\tt = 0.0;\n\tvec3 distPos = vec3(0.0);\n\tvec4 distCl = vec4(0.0);\n\tfor(int i = 0; i < 60; i++){\n\t\tdistCl = map(distPos);\n\t\tdist = distCl.w;\n\t\tif(dist < 1e-4){break;}\n        if(t>13.)break;\n\t\tt += dist;\n\t\tdistPos = (ro+rd*t)*camRotY;\n\t}\n\n\tvec3 color;\n\tfloat shadow = 1.0;\n\t\n\tif(t < 13.){\n\t\t// lighting\n\t\tvec3 lightDir = vec3(1.0, 10.0, 1.0);\n\t\tvec3 light = normalize(lightDir);\n\t\tvec3 normal = normalMap(distPos);\n\n\t\t// difuse color\n\t\tfloat diffuse = clamp(dot(light, normal), 1.0, 1.0);\n\t\tfloat lambert = max(.0, dot( normal, light));\n\t\t\n\t\t// shadow\n\t\tshadow = shadowMap(distPos + normal * 0.001, light);\n\n\t\t// result\n\t\tcolor += vec3(lambert);\n\t\tcolor = diffuse*(distCl.xyz+(.1-length(p.xy)/3.))*vec3(1.0, 1.0, 1.0);\n\t}else{\n        color =.84*max(mix(vec3(1.35,1.35,1.35)+(.1-length(p.xy)/3.),vec3(1),.1),0.);\n\t}\n\n\t// rendering result\n\tfloat brightness = 1.0;\n\tvec3 dst = (color * max(0.5, shadow))*brightness;\n\tfragColor = vec4(dst, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}