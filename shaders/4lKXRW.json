{
    "Shader": {
        "info": {
            "date": "1483294069",
            "description": "You can move the camera with WASD and mouse drag\nby moving the camera you move the big ball",
            "flags": 48,
            "hasliked": 0,
            "id": "4lKXRW",
            "likes": 10,
            "name": "n-body physics",
            "published": 3,
            "tags": [
                "3d",
                "collision",
                "raymarch",
                "balls",
                "physics"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 933
        },
        "renderpass": [
            {
                "code": "#define BALLS 64\n#define RAD 1. //ball radius\nfloat objec(vec3 p, vec3 ballO)\n{\n    float r = length(ballO-p)-4.;\n    for(int i = 0; i < BALLS; ++i)\n    {\n        vec3 p2 = texture(iChannel1, vec2(float(i)+.5,.5)/iResolution.xy).xyz;\n\t\tr = min(length(p2-p)-RAD,r);\n    }\n    return min(r,p.y+33.);\n}\nvoid march(vec3 camPos, vec3 look, vec3 ballO, inout vec3 p)\n{\n    float d = 0.;\n    for (int i = 0; i < 16; ++i)\n    {\n        p = camPos + d*look;\n        d += objec(p,ballO);\n    }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lookO  = texture( iChannel0, vec2(1.5,.5)/iResolution.xy).xyz;\n    vec3 camPos = texture( iChannel0, vec2(2.5,.5)/iResolution.xy).xyz;\n    \n    vec3 ballO = camPos+lookO*16.;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    mat3 mtx;\n    mtx[2] = lookO;\n    mtx[0] = normalize(vec3(mtx[2].z,0.,-mtx[2].x));\n    mtx[1] = cross(mtx[2],mtx[0]);\n    vec3 look = mtx*normalize(vec3(uv,1.));\n \n    vec3 p;\n    float d;\n    march(camPos, look, ballO, p);\n\tfragColor = vec4(4./length(ballO-p));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//camera texture\nvoid rotVec(inout vec4 v, float x, float y)\n{\n    y = asin(v.y) - y;\n    if(-1.56 > y){ y = -1.56; };\n    if( 1.56 < y){ y = 1.56; };\n    float l = cos(y);\n    float xv = v.x, zv = v.z;\n    v.z = zv * cos(x) - xv * sin(x);\n    v.x = zv * sin(x) + xv * cos(x);\n    l /= sqrt(v.x * v.x + v.z * v.z);\n    v.x *= l;\n    v.y = sin(y);\n    v.z *= l;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //improve performance by discarding pixels with no use\n    if(fragCoord.x>3. || fragCoord.y>1.){discard;}\n    \n    float keyW  = texture( iChannel1, vec2(87.5/256.,.25) ).x;\n    float keyS  = texture( iChannel1, vec2(83.5/256.,.25) ).x;\n    float keyA  = texture( iChannel1, vec2(65.5/256.,.25) ).x;\n    float keyD  = texture( iChannel1, vec2(68.5/256.,.25) ).x;\n    vec4 mouse  = texture( iChannel0, vec2(0.5,.5)/iResolution.xy);\n    vec4 look   = texture( iChannel0, vec2(1.5,.5)/iResolution.xy);\n    vec4 camPos = texture( iChannel0, vec2(2.5,.5)/iResolution.xy);\n    vec4 final = vec4(0.);\n    \n    if(iFrame == 0)//give a starting look and camPos\n    {\n        look = vec4(0.,0.,1.,0.);\n        camPos = vec4(0.,-20.,-8.,0.);\n    }\n    \n    if(fragCoord.x == 0.5)//mod mouse texel\n    {\n        if(iMouse.z>0.){ mouse = iMouse; }\n        else           { mouse.z = 0.;   }\n\t\tfinal = mouse;\n    }\n    if(fragCoord.x == 1.5)//mod look texel\n    {\n        if(iMouse.z>0. && mouse.z>0.)\n        {\n            mouse = (iMouse-mouse)*.01;\n            rotVec(look, mouse.x, -mouse.y); \n        }\n        final = look;\n    }\n    if(fragCoord.x == 2.5)//mod camPos texel\n    {\n        final = camPos + look*(keyW-keyS)*.2 +\n                normalize(vec4(look.z,0.,-look.x,0.))*(keyD-keyA)*.2;\n    }\n    fragColor = final;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//balls position texture\n#define FTOV .05 \t\t//force to velocity\n#define VTOP (FTOV*2.)  //velocity to position\n#define BALLS 64\n#define RAD 1. //ball radius\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //improve performance by discarding pixels with no use\n    if(fragCoord.x>float(BALLS) || fragCoord.y>1.){discard;}\n    \n    vec2 uv = vec2(fragCoord.x,.5)/iResolution.xy;\n    vec3 p = texture(iChannel0, uv).xyz;\n    vec3 v = texture(iChannel1, uv).xyz;\n    p += v*VTOP;\n    \n    if(iFrame == 0)//give a starting position\n    {\n        float k = fragCoord.x;\n        p = vec3(sin(k*.5)*8.,k*.5-32.,cos(k*.5)*8.);\n    }\n    fragColor = vec4(p,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//balls velocity texture\n#define FTOV .05 \t\t//force to velocity\n#define VTOP (FTOV*2.)  //velocity to position\n#define BALLS 64\n#define RAD 1. //ball radius\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //improve performance by discarding pixels with no use\n    if(fragCoord.x>float(BALLS) || fragCoord.y>1.){discard;}\n    \n    vec2 uv = vec2(fragCoord.x,.5)/iResolution.xy;\n    vec3 p = texture(iChannel0, uv).xyz;\n    vec3 v = texture(iChannel1, uv).xyz;\n    \n    for(int i = 0; i < BALLS; ++i)//forces between balls\n    {\n        vec3 p2 = texture(iChannel0, vec2(float(i),.5)/iResolution.xy).xyz;\n        vec3 v2 = texture(iChannel1, vec2(float(i),.5)/iResolution.xy).xyz;\n        vec3 d = p2-p;\n        float l = length(d);\n        if(l==0.){continue;}//avoid division by 0\n        vec3 n = d/l;\n        float a = .1;        \t\t\t //atraction force\n        float c = max(RAD*2.-l, 0.)*-32.;//collision force\n        float m = dot(n,v-v2)*float(l<2.);//inelastic collision force\n        v += n*(c+a-m)*FTOV;\n    }\n    //camera controlled ball force\n    vec3 look   = texture( iChannel2, vec2(1.5,.5)/iResolution.xy).xyz;\n    vec3 camPos = texture( iChannel2, vec2(2.5,.5)/iResolution.xy).xyz;\n    vec3 ob = camPos+look*16.;//put ball in front of camera\n    vec3 d = ob-p;\n    float l = length(d);\n    float a = 0.;                //atraction force\n    float c = max(5.-l, 0.)*-32.;//collision force\n    v += (d/l)*(c+a)*FTOV\n         - v*float(c!=0.)*FTOV;  //friction force\n    \n    v+=vec3(0.,-2.,0.)*FTOV;//gravity\n    vec3 wll = abs(p)-vec3(32.,32.,32.);\n    vec3 wst = step(0.,wll);\n    v+=sign(-p)*wll*wst*32.*FTOV;//walls collision\n    if(wst.x!=0.||wst.y!=0.||wst.z!=0.)//walls friction\n    {v-=v*1.*FTOV;}\n    \n    if(iFrame == 0)//give a starting velocity\n    {\n        v = vec3(0.);\n    }\n    fragColor = vec4(v,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}