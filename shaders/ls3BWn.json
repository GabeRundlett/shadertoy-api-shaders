{
    "Shader": {
        "info": {
            "date": "1524659556",
            "description": "blah.",
            "flags": 0,
            "hasliked": 0,
            "id": "ls3BWn",
            "likes": 3,
            "name": "Moving Stereographic Projection",
            "published": 3,
            "tags": [
                "stereographicprojection"
            ],
            "usePreview": 0,
            "username": "qwert33",
            "viewed": 523
        },
        "renderpass": [
            {
                "code": "float scale = 0.5;\nconst float PI = 3.14159265359;\n\n// https://en.wikipedia.org/wiki/Stereographic_projection\nvec3 stereographicPlaneToSphere(vec2 planePos) {\n    float x = planePos.x;\n    float y = planePos.y;\n    float x2 = x*x;\n    float y2 = y*y;\n    return vec3(\n        2.*x / (1. + x2 + y2),\n        2.*y / (1. + x2 + y2),\n        (-1. + x2 + y2) / (1. + x2 + y2)\n    );\n}\nvec2 stereographicSphereToPlane(vec3 spherePos) {\n    return vec2(\n        spherePos.x / (1. - spherePos.z),\n        spherePos.y / (1. - spherePos.z)\n    );\n}\n\nvec3 rotateAngleAxis(vec3 v, float angle, vec3 axis) {\n    axis = normalize(axis);\n    return (\n        v * cos(angle) +\n        cross(axis, v) * sin(angle) +\n        axis * (dot(axis, v) * (1.-cos(angle)))\n    );\n}\n\n\n\nvoid mainImage_( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 pos = uv;\n    \n    pos -= 0.5;  // translate 0,0 in center\n    pos /= scale;\n\n    vec3 spherePos = stereographicPlaneToSphere(pos);\n    spherePos = rotateAngleAxis(spherePos, PI, vec3(0,1,0));\n    \n    pos = stereographicSphereToPlane(spherePos);\n    pos.x -= iTime;\n    pos = fract(pos);\n\n    // Output to screen\n    fragColor = texture(iChannel0, pos);\n}\n    \n\n\n\n/// antialiasing code below\n\n\n\n\n\n// aspect ratio correction\n#define resolution (vec2 (iResolution.x / 2.0, iResolution.x))\n#define g_arcorrection (resolution.x / resolution.y)\n\n\nvec3 GetPixelColor(vec2 pos)\n{\n\tvec4 o;\n    mainImage_(o, pos);\n    return o.xyz;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t   \n    vec3 pixelColor;\n\n    bool xOdd = (floor(mod(fragCoord.x,2.0)) == 1.0);\n    bool yOdd = (floor(mod(fragCoord.y,2.0)) == 1.0);\n\n    vec2 a = vec2(xOdd ? 0.25 : -0.25, yOdd ? -0.5  :  0.5 );\n    vec2 b = vec2(xOdd ? 0.5  : -0.5 , yOdd ?  0.25 : -0.25 );\n    vec2 c = a * vec2(-1);\n    vec2 d = b * vec2(-1);\n\n    pixelColor  = GetPixelColor((fragCoord.xy + a)) / 4.0;\n    pixelColor += GetPixelColor((fragCoord.xy + b)) / 4.0;\n    pixelColor += GetPixelColor((fragCoord.xy + c)) / 4.0;\n    pixelColor += GetPixelColor((fragCoord.xy + d)) / 4.0;\n\n    // write pixel\n\tfragColor = vec4(pixelColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}