{
    "Shader": {
        "info": {
            "date": "1585940481",
            "description": "Basic circle, experimenting with geometry and edges ---> CLICK! \n\nHold mouse down and Y-axis adjusts thickness and X-axis adjusts fuzziness.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsSyzR",
            "likes": 2,
            "name": "Circle with sigmoid falloff",
            "published": 3,
            "tags": [
                "circle",
                "geometry",
                "basics",
                "sigmoid"
            ],
            "usePreview": 0,
            "username": "nickcody",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "const float E = 2.7182818284590452353602875;\n\nfloat sigmoid(float x) {\n    return 1.0/(1.0+pow(E, -x));\n}\n\n// Maps\n// 0 -> 0.5 -> 1 to 0 -> 1.0 -> 0\n//\nfloat sigmoidToFalloff(float s) {\n    return abs(1.0 - (s * 2.0));\n}\n\n//\n// coord - pixel to test\n// center - center of circle\n// radius - radius of circle\n// tolerance - thickness of circle line\n// sharpness - 1.0 blurry, 0.0001 sharp\nfloat test(vec2 coord, vec2 center, float radius, float thickness, float sharpness) {\n    float d = sqrt(pow(coord.x - center.x,2.0) + pow(coord.y - center.y,2.0));\n    float d1 = abs(d-radius);\n\n    if (d1 < thickness)\n        return 0.0;\n    else\n        return sigmoidToFalloff(sigmoid((d1-thickness)*sharpness));\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord) {\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 black = vec3(0.0, 0.0, 0.0);\n    float scale = 1.0;\n    float radius = iResolution.x/5.0;\n\n    vec2 center = (iResolution.xy * scale)/2.0;\n    vec2 st = (fragCoord.xy * scale);\n    \n    float thickness;\n    float sharpness;\n\n    if (iMouse.xy == vec2(0)) {\n        thickness = 1.;\n        sharpness = 2.;\n    } else {\n\t    thickness = iMouse.y/iResolution.y * 30.0 * scale;\n    \tsharpness = iMouse.x/iResolution.x * scale;\n    }\n    \n    \n    float t = test(st, center, radius, thickness, sharpness);\n    out_color = vec4( mix(white, black, t), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}