{
    "Shader": {
        "info": {
            "date": "1671820770",
            "description": "A mod of https://www.shadertoy.com/view/Wt33Wf, which itself is a mod of https://www.shadertoy.com/view/3t3GDB\nEnjoy exploring the synthwave world with your spaceship\nIf the sound is not playing, pause and reset time\nUse arrow keys or mouse click to move",
            "flags": 112,
            "hasliked": 0,
            "id": "Dtf3W7",
            "likes": 4,
            "name": "Synthwave starfox",
            "published": 3,
            "tags": [
                "sun",
                "80s",
                "retro",
                "synthwave",
                "starfox",
                "fuji",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "GetItemFromBlock",
            "viewed": 1163
        },
        "renderpass": [
            {
                "code": "//Music is Koopawave Cove from Badub (https://soundcloud.com/user-746537853/course-8-koopawave-cove)\n\nfloat sun(vec2 uv)\n{\n \tfloat val = smoothstep(0.3, 0.29, length(uv));\n \tfloat bloom = smoothstep(0.7, 0.0, length(uv));\n    float cut = 3.0 * sin((uv.y + iTime * 0.05 * 1.02) * 100.0) \n\t\t\t\t+ clamp(uv.y * 14.0 + 1.0, -6.0, 6.0);\n    cut = clamp(cut, 0.0, 1.0);\n    return clamp(val * cut, 0.0, 1.0) + bloom * 0.6;\n}\n\nfloat grid(vec2 uv)\n{\n    vec2 size = vec2(uv.y, uv.y * uv.y * 0.2) * 0.01;\n    uv += vec2(0.0, iTime * 4.0 * 1.05);\n    uv = abs(fract(uv) - 0.5);\n \tvec2 lines = smoothstep(size, vec2(0.0), uv);\n \tlines += smoothstep(size * 5.0, vec2(0.0), uv) * 0.4;\n    return clamp(lines.x + lines.y, 0.0, 3.0);\n}\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat opSmoothUnion(float d1, float d2, float k){\n\tfloat h = clamp(0.5 + 0.5 * (d2 - d1) /k,0.0,1.0);\n    return mix(d2, d1 , h) - k * h * ( 1.0 - h);\n}\n\nfloat sdCloud(in vec2 p, in vec2 a1, in vec2 b1, in vec2 a2, in vec2 b2, float w)\n{\n\t//float lineVal1 = smoothstep(w - 0.0001, w, sdLine(p, a1, b1));\n    float lineVal1 = sdLine(p, a1, b1);\n    float lineVal2 = sdLine(p, a2, b2);\n    vec2 ww = vec2(w*1.5, 0.0);\n    vec2 left = max(a1 + ww, a2 + ww);\n    vec2 right = min(b1 - ww, b2 - ww);\n    vec2 boxCenter = (left + right) * 0.5;\n    //float boxW = right.x - left.x;\n    float boxH = abs(a2.y - a1.y) * 0.5;\n    //float boxVal = sdBox(p - boxCenter, vec2(boxW, boxH)) + w;\n    float boxVal = sdBox(p - boxCenter, vec2(0.04, boxH)) + w;\n    \n    float uniVal1 = opSmoothUnion(lineVal1, boxVal, 0.05);\n    float uniVal2 = opSmoothUnion(lineVal2, boxVal, 0.05);\n    \n    return min(uniVal1, uniVal2);\n}\n\n#define BarCount 12.\nfloat getMusicLevel(vec2 uv)\n{\n    vec2 delta = (uv/4.+.5) * BarCount;\n    float position = floor(delta.x)/BarCount;\n    float factor = texture(iChannel1, vec2(position, 0)).x + 0.5;\n    if (floor(factor*15.)/15. < delta.y/5.) return 0.;\n    delta.y = delta.y * 3.;\n    vec2 smPos = mod(delta, 1.);\n    smPos = smPos * 2.;\n    if (smPos.x > 1.) smPos.x = 2.-smPos.x;\n    if (smPos.y > 1.) smPos.y = 2.-smPos.y;\n    if (smPos.x < .1 || smPos.y < .2) return 0.;\n    else if (smPos.x > 0.2 && smPos.y > 0.4) return 1.;\n    return pow(clamp(smPos.x*smPos.y,0.,1.),.1);\n}\n\nbool drawShip(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 factor = fragCoord / iResolution.xy * 2. - vec2(1,1);\n    float fov = 70.;\n    vec2 rot = texture(iChannel0, vec2(0.,0.)).xy * -90.;\n    float delta = length(texture(iChannel0, vec2(0.,0.)).zyx);\n    vec3 pos = vec3(-10. - delta * 10., 0., 0.) - texture(iChannel0, vec2(0.,0.)).zyx * 20.;\n    Ray r = Ray(pos, normalize(vec3(1., factor.y * fov / 100., factor.x * fov / 100. * iResolution.x / iResolution.y)) );\n    r.dir = vec3(\n    r.dir.x * cos(radians(rot.y)) - r.dir.y * sin(radians(rot.y)),\n    r.dir.y * cos(radians(rot.y)) + r.dir.x * sin(radians(rot.y)),\n    r.dir.z);\n    r.dir = normalize(vec3(\n    r.dir.x * cos(radians(rot.x)) - r.dir.z * sin(radians(rot.x)),\n    r.dir.y,\n    r.dir.z * cos(radians(rot.x)) + r.dir.x * sin(radians(rot.x))));\n    HitRecord nearest = HitRecord(false, vec2(0,0), r.dir, vec3(0,0,0), vec3(1,1,1), 1e24);\n    vec3 tmpcol = nearest.color;\n    for (int i = 0; i < tris.length(); i++)\n    {\n        HitRecord rec = HitTriangle(r, tris[i], .0, nearest.dist, tmpcol);\n        if (rec.hit && (!nearest.hit || rec.dist < nearest.dist))\n        {\n            nearest = rec;\n        }\n    }\n    if (nearest.hit)\n    {\n        float factor = 0.5 + dot(normalize(vec3(-1,1,.5)),nearest.normal) * 0.5;\n        fragColor = vec4(nearest.color * factor, 1.0);\n        return true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy)/iResolution.y;\n    uv = uv + texture(iChannel0,vec2(0.,0.)).xy;\n    if (!drawShip(fragColor, fragCoord))\n    {\n        // Grid\n        float fog = smoothstep(0.1, -0.02, abs(uv.y + 0.2));\n        vec3 col = vec3(0.0, 0.1, 0.2);\n        if (uv.y < -0.2)\n        {\n            uv.y = 3.0 / (abs(uv.y + 0.2) + 0.05);\n            uv.x *= uv.y * 1.0;\n            float gridVal = grid(uv);\n            col = mix(col, vec3(1.0, 0.5, 1.0), gridVal);\n        }\n        else\n        {\n            float fujiD = min(uv.y * 4.5 - 0.5, 1.0);\n            uv.y -= 1.1 - 0.51;\n            \n            vec2 sunUV = uv;\n            vec2 fujiUV = uv;\n            \n            // Sun\n            sunUV += vec2(0.75, 0.2);\n            //uv.y -= 1.1 - 0.51;\n            col = vec3(1.0, 0.2, 1.0);\n            float sunVal = sun(sunUV);\n            \n            col = mix(col, vec3(1.0, 0.4, 0.1), sunUV.y * 2.0 + 0.2);\n            col = mix(vec3(0.), col, sunVal);\n            \n            // Music bars\n            float level = getMusicLevel(uv);\n            col = mix(col, vec3(1,0,0), level);\n            \n            // fuji\n            float fujiVal = sdTrapezoid( uv  + vec2(-0.75+sunUV.y * 0.0, 0.5), 1.75 + pow(uv.y * uv.y, 2.1), 0.2, 0.5);\n            float waveVal = uv.y + sin(uv.x * 20.0 + iTime * 2.0) * 0.05 + 0.2;\n            float wave_width = smoothstep(0.0,0.01,(waveVal));\n            \n            // fuji color\n            col = mix( col, mix(vec3(0.0, 0.0, 0.25), vec3(1.0, 0.0, 0.5), fujiD), step(fujiVal, 0.0));\n            // fuji top snow\n            col = mix( col, vec3(1.0, 0.5, 1.0), wave_width * step(fujiVal, 0.0));\n            // fuji outline\n            col = mix( col, vec3(1.0, 0.5, 1.0), 1.0-smoothstep(0.0,0.01,abs(fujiVal)) );\n            //col = mix( col, vec3(1.0, 1.0, 1.0), 1.0-smoothstep(0.03,0.04,abs(fujiVal)) );\n            //col = vec3(1.0, 1.0, 1.0) *(1.0-smoothstep(0.03,0.04,abs(fujiVal)));\n            \n            // horizon color\n            col += mix( col, mix(vec3(1.0, 0.12, 0.8), vec3(0.0, 0.0, 0.2), clamp(uv.y * 3.5 + 3.0, 0.0, 1.0)), step(0.0, fujiVal) );\n            \n            // cloud\n            vec2 cloudUV = uv;\n            cloudUV.x = mod(cloudUV.x + iTime * 0.1, 4.0) - 2.0;\n            float cloudTime = iTime * 0.5;\n            float cloudY = -0.5;\n            float cloudVal1 = sdCloud(cloudUV, \n                                     vec2(0.1 + sin(cloudTime + 140.5)*0.1,cloudY), \n                                     vec2(1.05 + cos(cloudTime * 0.9 - 36.56) * 0.1, cloudY), \n                                     vec2(0.2 + cos(cloudTime * 0.867 + 387.165) * 0.1,0.25+cloudY), \n                                     vec2(0.5 + cos(cloudTime * 0.9675 - 15.162) * 0.09, 0.25+cloudY), 0.075);\n            cloudY = -0.6;\n            float cloudVal2 = sdCloud(cloudUV, \n                                     vec2(-0.9 + cos(cloudTime * 1.02 + 541.75) * 0.1,cloudY), \n                                     vec2(-0.5 + sin(cloudTime * 0.9 - 316.56) * 0.1, cloudY), \n                                     vec2(-1.5 + cos(cloudTime * 0.867 + 37.165) * 0.1,0.25+cloudY), \n                                     vec2(-0.6 + sin(cloudTime * 0.9675 + 665.162) * 0.09, 0.25+cloudY), 0.075);\n            \n            float cloudVal = min(cloudVal1, cloudVal2);\n            \n            //col = mix(col, vec3(1.0,1.0,0.0), smoothstep(0.0751, 0.075, cloudVal));\n            col = mix(col, vec3(0.0, 0.0, 0.2), 1.0 - smoothstep(0.075 - 0.0001, 0.075, cloudVal));\n            col += vec3(1.0, 1.0, 1.0)*(1.0 - smoothstep(0.0,0.01,abs(cloudVal - 0.075)));\n        }\n\n        col += fog * fog * fog;\n        col = mix(vec3(col.r, col.r, col.r) * 0.5, col, 0.7);\n\n        fragColor = vec4(col,1.0);\n    }\n    //else fragColor = vec4(0.0);\n\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 31645,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/user-746537853/course-8-koopawave-cove"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tmp = fragCoord / iResolution.xy * iChannelResolution[1].xy;\n    ivec2 position = ivec2(int(tmp.x),int(tmp.y));\n    if (position.x == 0 && position.y == 0)\n    {\n        vec3 mov = vec3(texture(iChannel1, vec2(39./256.,0.)).x*iTimeDelta -\n        texture(iChannel1, vec2(37./256.,0.0)).x*iTimeDelta,\n        texture(iChannel1, vec2(38./256.,0.0)).x*iTimeDelta -\n        texture(iChannel1, vec2(40./256.,0.0)).x*iTimeDelta,\n        0);\n        vec2 mousePos = iMouse.xy / iResolution.xy * 2. - 1.;\n        if ((iMouse.z > .5 && iMouse.w < .5))\n        {\n            mov.x = mousePos.x*iTimeDelta;\n            mov.y = mousePos.y*iTimeDelta;\n        }\n        mov.x = mov.x * 1.5;\n        fragColor = texture(iChannel0, vec2(0.,0.))*0.975 + vec4(mov*0.2,1);\n    }\n    else\n    {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "struct HitRecord\n{\n    bool hit;\n    vec2 UV;\n    vec3 normal;\n    vec3 point;\n    vec3 color;\n    float dist;\n};\n\nstruct Ray\n{\n    vec3 pos;\n    vec3 dir;\n};\n\nstruct Triangle\n{\n    vec3 A, AB, AC;\n    vec3 normal;\n    vec3 color;\n};\n\nHitRecord HitTriangle(Ray r, Triangle tr, float minimum, float maximum, vec3 colorIn)\n{\n\tHitRecord result = HitRecord(false, vec2(0,0), vec3(0,1,0), vec3(0,0,0), vec3(1,1,1), 0.0);\n    vec3 pvec = cross(r.dir, tr.AC);\n    float det = dot(tr.AB, pvec);\n    if (det < 0.00001) return result;\n    vec3 tvec = r.pos - tr.A;\n    result.UV.x = dot(tvec, pvec);\n    if (result.UV.x < .0 || result.UV.x > det) return result;\n    vec3 qvec = cross(tvec, tr.AB);\n    result.UV.y = dot(r.dir, qvec);\n    if (result.UV.y < .0 || result.UV.y + result.UV.x > det) return result;\n    det = 1./det;\n    result.dist = dot(tr.AC, qvec) * det;\n    if (result.dist < minimum || result.dist > maximum) return result;\n    result.UV *= det;\n\tresult.normal = tr.normal;\n\tresult.point = r.pos + r.dir * result.dist;\n    result.color = colorIn * tr.color;\n\tresult.hit = true;\n\treturn result;\n}\n\n// very long, very unoptimized model\nTriangle[] tris = Triangle[] (\nTriangle(vec3(-1.740639,0.263649,-0.447956),vec3(0.064408,-0.592643,0.447956),vec3(0.000000,0.000000,0.895913),vec3(-0.993900,-0.110400,-0.000000),vec3(1.0,0.215861,0.215861)),\nTriangle(vec3(-0.303772,0.664045,-0.000000),vec3(1.570167,-0.593793,0.000000),vec3(-0.456986,-0.394036,-0.300000),vec3(0.173000,0.456100,-0.872900),vec3(0.047274,0.296477,0.800000)),\nTriangle(vec3(-0.760758,0.270010,0.300000),vec3(0.456986,0.394035,-0.300000),vec3(-0.514815,0.212329,-0.300000),vec3(-0.126100,0.693500,0.709300),vec3(0.047274,0.296477,0.800000)),\nTriangle(vec3(-0.303772,0.664045,-0.000000),vec3(-0.456986,-0.394036,-0.300000),vec3(-0.971801,-0.181706,0.000000),vec3(-0.126100,0.693500,-0.709300),vec3(0.047274,0.296477,0.800000)),\nTriangle(vec3(-0.303772,0.664045,-0.000000),vec3(-0.456986,-0.394035,0.300000),vec3(1.570167,-0.593793,0.000000),vec3(0.173000,0.456100,0.872900),vec3(0.047274,0.296477,0.800000)),\nTriangle(vec3(3.168733,-0.300000,-0.000000),vec3(-5.092798,1.098304,0.000000),vec3(-4.168733,0.000000,1.000000),vec3(0.157600,0.732800,0.661900),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.000000,-0.300000,-1.000000),vec3(0.000000,0.000000,2.000000),vec3(-0.924065,1.098304,1.000000),vec3(-0.763700,-0.645600,-0.000000),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.000000,-0.300000,1.000000),vec3(0.000000,0.000000,-2.000000),vec3(4.168733,0.000000,-1.000000),vec3(-0.000000,-1.000000,-0.000000),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.743818,-0.300000,-0.772652),vec3(-0.246623,0.000000,-0.378231),vec3(-0.493364,1.488035,-0.719115),vec3(0.838000,0.015700,-0.545500),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.743818,-0.300000,0.772652),vec3(-0.493364,1.488036,0.719115),vec3(-0.246623,0.000000,0.378231),vec3(0.838000,0.015800,0.545500),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.346018,-0.439340,1.086163),vec3(0.355577,0.139340,0.064720),vec3(0.108836,1.627376,0.405604),vec3(-0.086500,-0.236100,0.967900),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.346019,-0.439340,-1.086163),vec3(0.108837,1.627375,-0.405604),vec3(0.355578,0.139340,-0.064720),vec3(-0.086500,-0.236100,-0.967900),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.237182,1.188035,-1.491767),vec3(-0.108837,-1.627375,0.405604),vec3(0.493364,-1.488035,0.719115),vec3(-0.489500,0.244800,0.836900),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.990441,-0.300000,-1.150883),vec3(0.246623,0.000000,0.378231),vec3(-0.355578,-0.139340,0.064720),vec3(0.323100,-0.922100,-0.212800),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.990441,-0.300000,1.150883),vec3(-0.355577,-0.139340,-0.064720),vec3(0.246623,0.000000,-0.378231),vec3(0.323100,-0.922100,0.212800),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.237182,1.188036,1.491767),vec3(0.493364,-1.488036,-0.719115),vec3(-0.108836,-1.627376,-0.405604),vec3(-0.489500,0.244800,-0.836900),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.582366,-0.288396,-0.530632),vec3(-0.166579,0.139211,0.000000),vec3(-0.000001,-0.527187,-2.703453),vec3(-0.637600,-0.755700,0.149600),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.748945,-0.149185,-0.530632),vec3(1.271236,-0.085085,0.000000),vec3(0.166578,-0.666398,-2.703453),vec3(0.063100,0.969600,-0.236500),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.582366,-0.288396,-0.530632),vec3(-0.000001,-0.527187,-2.703453),vec3(1.104657,0.054126,0.000000),vec3(0.047100,-0.981000,0.188300),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(0.522291,-0.234269,0.530632),vec3(-1.271236,0.085084,0.000000),vec3(-1.104657,-0.581312,2.703453),vec3(0.063100,0.969600,0.236500),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.582366,-0.288396,0.530632),vec3(1.104657,0.054127,0.000000),vec3(0.000000,-0.527185,2.703453),vec3(0.047100,-0.981000,-0.188300),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-0.748945,-0.149185,0.530632),vec3(0.166579,-0.139211,0.000000),vec3(0.166579,-0.666396,2.703453),vec3(-0.637600,-0.755700,-0.149600),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(3.168733,-0.300000,-0.000000),vec3(-4.168733,0.000000,-1.000000),vec3(-5.092798,1.098304,0.000000),vec3(0.157600,0.732800,-0.661900),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.676231,-0.328994,0.000000),vec3(0.360777,0.514515,0.279947),vec3(-0.064408,0.592643,0.447957),vec3(0.205500,-0.577000,0.790500),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.676231,-0.328994,0.000000),vec3(0.596570,0.156257,0.000000),vec3(0.360777,0.514515,0.279947),vec3(0.141200,-0.549100,0.823700),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.315454,0.185521,-0.279947),vec3(-0.360777,-0.514515,0.279947),vec3(-0.425185,0.078128,-0.168009),vec3(0.205500,-0.577100,-0.790400),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.315454,0.185521,-0.279947),vec3(0.235793,-0.358258,0.279947),vec3(-0.360777,-0.514515,0.279947),vec3(0.141200,-0.549100,-0.823700),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.315454,0.185521,0.279947),vec3(-0.425185,0.078128,-0.727903),vec3(-0.425185,0.078128,0.168010),vec3(0.180700,0.983500,-0.000000),vec3(0.494990,0.618285,0.800000)),\nTriangle(vec3(-1.315454,0.185521,0.279947),vec3(0.000000,0.000000,-0.559894),vec3(-0.425185,0.078128,-0.727903),vec3(0.180700,0.983500,-0.000000),vec3(0.494990,0.618285,0.800000)));",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}