{
    "Shader": {
        "info": {
            "date": "1543163064",
            "description": "cbm logo",
            "flags": 0,
            "hasliked": 0,
            "id": "llGfRV",
            "likes": 9,
            "name": "CBM 3D",
            "published": 3,
            "tags": [
                "raymarch",
                "logo",
                "extrude",
                "cbm"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "// yx's commodore shape from here - https://www.shadertoy.com/view/4lGfzK\n//\n// Raymarched by Del 25/11/2018\n\nfloat cbm(vec2 p)\n{\n    const float A = 10.;\n    const float B = 0.034 * A;\n    const float C = 0.166 * A;\n    const float E = 0.364 * A;\n    const float F = 0.52 * A;\n    const float G = 0.53 * A;\n    const float H = 0.636 * A;\n    const float I = 0.97 * A;\n    \n    p.y = abs(p.y);\n    \n    float outerCircle = length(p)-I*.5;\n    float innerCircle = length(p*vec2(F/G,1))-F*.5;\n    float verticalMask = p.x-(H-I*.5);\n    \n    float topMask = p.y-C-B*.5;\n    float bottomMask = p.y-B*.5;\n    float angleMask = ((p.x-p.y)-A+I*.5+E*.5)/sqrt(2.);\n    \n    float vents = max(max(angleMask,max(topMask,-bottomMask)), -verticalMask);\n    \n    float ring = max(max(outerCircle,-innerCircle),verticalMask);\n    \n    return min(vents, ring);\n}\n\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n#define\tTAU 6.28318\n\n\nfloat map(vec3 p)\n{\n    float time = iTime+0.2;\n    p.z -= 13.0+sin(fract(time*0.15)*TAU)*2.0;\n    \n    float twist = 0.5+sin(fract(time*0.25)*TAU)*0.5;\n    twist *= p.y * 0.1;\n    p.xz *= rotate(twist+fract(time*0.26)*TAU);\n    \n    float dist = cbm(p.xy);\n    \n    float dep = 0.5;\n    vec2 e = vec2( dist, abs(p.z) - dep );\n    dist = min(max(e.x,e.y),0.0) + length(max(e,0.0));\n    dist -= 0.07;\n    return dist;\n}\n\n\n// Tetrahedral normal, to save a couple of \"map\" calls. Courtesy of IQ.\nvec3 normal( in vec3 p )\n{\n    // Note the slightly increased sampling distance, to alleviate\n    // artifacts due to hit point inaccuracies.\n    vec2 e = vec2(0.0025, -0.0025); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\nvec3 render(vec2 uv)\n{\n\tvec3 ro = vec3(0.0, 0.0, 0.0);\n\tvec3 rd = normalize(vec3(uv, 1.95));\n\tvec3 p = vec3(0.0);\n\tfloat t = 0.;\n\tfor (int i = 0; i < 100; i++)\n    {\n\t\tp = ro + rd * t;\n\t\tfloat d = map(p);\n\t\tif (d < .001 || t > 100.) break;\n\t\tt += d *0.75;\n\t}\n    \n    vec3 c = vec3(0.35,0.35,0.45);\n    c*= 1.2-abs(uv.y);\n    \n    if (t<100.0)\n    {\n\t   \tvec3 lightDir = normalize(vec3(1.0, 1.0, 0.5));\n        vec3 nor = normal(p);\n\n        float dif = max(dot(nor, lightDir), 0.0);\n        c = vec3(0.5) * dif;\n\n        float tf = 0.02;\n        c += vec3(0.65,0.6,0.25) + reflect(vec3(p.x*tf, p.y*tf,tf), nor);\n\n        vec3 ref = reflect(rd, nor);\n        float spe = max(dot(ref, lightDir), 0.0);\n        c += vec3(2.0) * pow(spe, 32.);\n    }\n\n    c *= 1.0 - 0.3*length(uv);\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = render(uv);\n\tfragColor = vec4(col, 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}