{
    "Shader": {
        "info": {
            "date": "1575689615",
            "description": "today I plugged my computer to the family television and live coded a shader for my family while we all listened to music and my sister's boyfriend put on a fashion show. it was a good night c:",
            "flags": 0,
            "hasliked": 0,
            "id": "3tc3RN",
            "likes": 10,
            "name": "The Family Shader",
            "published": 3,
            "tags": [
                "liveshader",
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat square(vec3 p, vec3 dim) {\n  p = abs(p);\n  p -= dim;\n  return max(p.x,max(p.y,p.z));\n}\n\nfloat bpm = 117.;\n#define beat fract(iTime/60.*bpm)\n#define bar floor(iTime/60.*bpm)\n\nfloat linedist(vec3 p, vec3 a, vec3 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p, mix(a, b, clamp(k,0.,1.)));\n}\n\nfloat cage(vec3 p, float r) {\n  p = abs(p);\n  vec3 t = (mod(bar,2.)==1.) ? vec3(0.,r,r) : vec3(r,0.,0.);\n  float bst = linedist(p, t.xyz, vec3(r,r,r));\n  bst = min(linedist(p, t.zxy, vec3(r,r,r)), bst);\n  bst = min(linedist(p, t.yzx, vec3(r,r,r)), bst);\n  return bst-0.1;\n}\n\nvec2 smin(vec2 a, vec2 b, float k){\n  float h = max(k - abs(a.x-b.x),0.)/k;\n  float fac = mix(a.y,b.y,smoothstep(-k/2., k/2., a.x-b.x));\n  return vec2(min(a.x,b.x)-h*h*h*k/6., fac);\n}\n\nfloat comp(vec3 p, vec3 sc, float sz) {\n  p = (fract(p*sc)-0.5)/sc;\n  return length(p) - sz;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat mat = 0.;\n#define time (iTime*2.)\nfloat scene(vec3 p) {\n  vec3 op = p - vec3(time,0,0);\n  op = erot(op, vec3(0,1,0),iTime);\n  op = erot(op, vec3(0,0,1),iTime*0.5);\n  op = erot(op, vec3(1,0,0),iTime*0.25);\n  \n  vec3 op2 = p - vec3(time,0,0);\n  op2 = erot(op, vec3(0,1,0),-iTime);\n  op2 = erot(op, vec3(0,0,1),iTime*0.25);\n  op2 = erot(op, vec3(1,0,0),-iTime*0.5);\n  float scene =0.2;\n  float sq = square(op, vec3(0.45));\n  vec2 best = vec2(comp(p, vec3(0.2), 1.), 0.);\n  best = smin(best, vec2(comp(p-vec3(0,0,iTime), vec3(0.2,0.2,1.2), 0.2),1.),1.);\n  best = smin(best, vec2(comp(p-vec3(0,iTime,0), vec3(0.2,1.2,0.2), 0.2),1.),1.);\n  best = smin(best, vec2(comp(p-vec3(iTime,0,0), vec3(1.2,0.2,0.2), 0.2),1.),1.); \n  mat = best.y;\n  if (sq < best.x) { \n    mat = 2.;\n    best.x = sq;\n  }\n  float cg = cage(op2, 1.5 + sin(iTime*7.)*0.5);\n  if (cg < best.x) { \n    mat = 3.;\n    best.x = cg;\n  }\n  return best.x;\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p) - mat3(0.01);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  vec3 cam = normalize(vec3(1.+beat*0.1, uv));\n  vec3 init = vec3(-8.+pow(cos(iTime*acos(-1.)/60.*bpm/6.),2.)*2., 0,0);\n  cam = erot(cam, vec3(0,1,0),sin(iTime/2.)*0.3);\n  init = erot(init, vec3(0,1,0),sin(iTime/2.)*0.3);\n  cam = erot(cam, vec3(0,0,1),iTime*0.2);\n  init = erot(init, vec3(0,0,1),iTime*0.2);\n  \n  init += vec3(time,0,0);\n  vec3 p = init + cam;\n  bool hit = false;\n  for (int i =0; i< 28; i++) {\n    float dist = scene(p);\n    if (dist*dist<0.00001) { hit = true; break; }\n    if (distance(p,init)>40.) break;\n    p += cam*dist;\n  }\n  float fog = smoothstep(40.,0.,distance(init,p));\n  vec3 mcol = mix(vec3(1.), vec3(0.0,0.5,0.9), 1.-mat);\n  if (mat == 2.) mcol = vec3(1.,0.,0.8);\n  vec3 n = norm(p);\n  fragColor.xyz = mix(vec3(0.,0.3,0.5),mcol*(pow(dot(n,vec3(0,0,1))*0.5+0.5,2.)),fog);\n  fragColor.xyz = smoothstep(vec3(0), vec3(1), sqrt(fragColor.xyz));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}