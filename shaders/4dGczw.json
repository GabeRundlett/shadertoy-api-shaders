{
    "Shader": {
        "info": {
            "date": "1521363315",
            "description": "Delicious taste not included (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "4dGczw",
            "likes": 10,
            "name": "Iced Cake",
            "published": 3,
            "tags": [
                "raymarch",
                "chocolate",
                "cake"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 623
        },
        "renderpass": [
            {
                "code": "// \"Iced Cake\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Noisefv2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 qHit;\nfloat dstFar, tCur, cakRd, cakHt, cakSlc;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq, qs, qr;\n  vec2 cs, cs2;\n  float dMin, d, r, dw1, dw2, db, c;\n  dMin = dstFar;\n  c = cos (pi / (2. * cakSlc));\n  cs = vec2 (cos (pi / cakSlc), sin (pi / cakSlc));\n  cs2 = vec2 (cos (2. * pi / cakSlc), sin (2. * pi / cakSlc));\n  dw1 = SmoothBump (0.15, 0.6, 0.1, mod (0.1 * tCur, 1.));\n  dw2 = SmoothBump (0.4, 0.85, 0.1, mod (0.1 * tCur, 1.));\n  r = length (p.xz);\n  qs = p;\n  qs.xz = Rot2D (qs.xz, 2. * pi * (floor (cakSlc * ((r > 0.) ? atan (qs.z, - qs.x) / (2. * pi) :\n     0.) + 0.5) / cakSlc));\n  qr = p;\n  qr.xz = Rot2Cs (qr.xz, cs);\n  qr.xz = Rot2D (qr.xz, 2. * pi * (floor (cakSlc * ((r > 0.) ? atan (qr.z, - qr.x) / (2. * pi) :\n     0.) + 0.5) / cakSlc));\n  for (int k = 0; k < 3; k ++) {\n    q = qs;\n    qq = p;\n    if (k == 0) {\n      qq.xz = Rot2D (qq.xz, pi / cakSlc);\n      db = - dot (vec2 (abs (qq.z), qq.x), cs2);\n    } else {\n      qq = p;\n      if (k == 1) {\n        db = max ((dw1 * cs.y - abs (qr.z)) * c, dot (vec2 (abs (qq.z), dw1 + qq.x), cs));\n        q.x += dw1;\n      } else {\n        qq.xz = Rot2D (qq.xz, 2. * pi / cakSlc);\n        db = max ((dw2 * cs.y - abs (qr.z)) * c, dot (vec2 (abs (qq.z), dw2 + qq.x), cs));\n        q.x += dw2;\n      }\n    }\n    d = PrCylDf (q.xzy, cakRd, cakHt);\n    d = SmoothMin (d, length (vec2 (abs (abs (length (q.xz) - 0.47 * cakRd) - 0.33 * cakRd) -\n       0.2 * cakRd + 0.05, q.y - cakHt)) - 0.05, 0.03);\n    d = SmoothMin (d, PrTorusDf ((q + vec3 (0.8 * cakRd, - cakHt, 0.)).xzy, 0.05, 0.15 * cakRd), 0.03);\n    d = SmoothMin (d, PrTorusDf (vec3 (q.xz, abs (q.y) - 0.33 * cakHt), 0.05 * (1. +\n       0.5 * SmoothBump (-0.1, 0.1, 0.02, q.z / cakRd)), cakRd), 0.03);\n    d = max (d, db);\n    DMINQ (1);\n    q.y -= cakHt;\n    d = max (PrSphDf (q, 0.1), db);\n    DMINQ (2);\n    q.x -= -0.8 * cakRd;\n    d = max (PrSphDf (q, 0.1), db);\n    DMINQ (3);\n  }\n  q = p;\n  q.y -= - cakHt - 0.051;\n  d = PrCylDf (q.xzy, cakRd + 1.1, 0.05);\n  DMINQ (4);\n  return dMin;\n}\n     \nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 ltPos[4], ltDir, col, vn;\n  vec2 s;\n  float dstObj, spec, r, a, t, dfSum, spSum, at;\n  bool isRefl;\n  for (int k = 0; k < 3; k ++) {\n    ltPos[k] = 7. * vec3 (0., 1., 1.);\n    ltPos[k].xz = Rot2D (ltPos[k].xz, float (k) * 2. * pi / 3. -0.1 * pi * tCur);\n  }\n  ltPos[3] = 7. * vec3 (1., 1., 0.);\n  ltPos[3].xz = Rot2D (ltPos[3].xz, 0.1 * pi * tCur);\n  cakRd = 2.;\n  cakHt = 0.5;\n  cakSlc = 13.;\n  dstObj = ObjRay (ro, rd);\n  isRefl = false;\n  if (dstObj < dstFar && idObj == 4) {\n    if (length (qHit.xz) < 3.05) {\n      isRefl = true;\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      vn = VaryNf (32. * qHit, vn, 0.5);\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      dstObj = ObjRay (ro, rd);\n    }\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      r = length (qHit.xz);\n      if (abs (qHit.y) < cakHt - 0.05 && r < cakRd - 0.1) {\n        t = 3. * qHit.y / (2. * cakHt) + 0.1 * sin (4. * pi * r);\n        col = mix (((floor (t + 0.5) == 0.) ? vec3 (0.6, 0.3, 0.1) : vec3 (0.9, 0.7, 0.1)),\n           vec3 (0.6, 0., 0.), SmoothBump (-0.05, 0.05, 0.01, mod (t, 1.) - 0.5)) *\n           (1. - 0.1 * Noisefv2 (64. * vec2 (r, qHit.y)));\n        spec = 0.05;\n        vn = VaryNf (64. * vec3 (r, qHit.yz), vn, 1.);\n      } else {\n        a = (r > 0.) ? atan (qHit.z, - qHit.x) / (2. * pi) : 0.;\n        s = vec2 (8. * abs (r - 0.5 * cakRd + 0.05), mod (4. * cakSlc * a, 1.) - 0.5);\n        t = length (s);\n        col = vec3 (0.4, 0.2, 0.);\n        if (qHit.y > cakHt - 0.001 && t < 0.48) {\n          col = mix (vec3 (0.3, 0.1, 0.), col, smoothstep (0.2, 0.25, t));\n          vn.xz = 0.2 * normalize (s) * SmoothBump (0.25, 0.43, 0.05, t);\n          vn.y = sqrt (1. - dot (vn.xz, vn.xz));\n        }\n        col = mix (col, vec3 (0.9, 0.7, 0.5), smoothstep (0.005, 0.015, qHit.y - cakHt));\n        spec = 0.2;\n        if (abs (qHit.y) < cakHt && abs (r - cakRd) < 0.005)\n           vn.xz = Rot2D (vn.xz, -0.2 * sin (pi * (mod (16. * cakSlc * a, 1.) - 0.5)));\n      }\n    } else if (idObj == 2) {\n      col = mix (vec3 (0.9, 0.3, 0.2), vec3 (0.3, 0.9, 0.2), step (length (qHit), 0.07));\n      spec = 0.1;\n    } else if (idObj == 3) {\n      col = vec3 (0.9, 0.9, 0.95);\n      spec = 0.4;\n    } else if (idObj == 4) {\n      col = vec3 (0.9, 0.9, 0.7);\n      spec = 0.2;\n    }\n    dfSum = 0.;\n    spSum = 0.;\n    for (int k = 0; k < 4; k ++) {\n      ltDir = normalize (ltPos[k]);\n      at = smoothstep (0.5, 0.6, dot (normalize (ltPos[k] - ro), ltDir));\n      dfSum += at * max (dot (vn, ltDir), 0.);\n      spSum += at * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    }\n    col = col * (0.1 + 0.35 * dfSum);\n    if (! isRefl) col += 0.6 * spec * spSum;\n    if (isRefl) col = mix (col, vec3 (0.8), 0.05);\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = (15./26.) * pi;\n  el = -0.18 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.12 * pi * sin (0.05 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.05 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -15.);\n  zmFac = 7. - 2. * abs (el); //0.8 * lookU.z;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 30.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}