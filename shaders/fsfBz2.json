{
    "Shader": {
        "info": {
            "date": "1645088707",
            "description": "z = z^2 + c",
            "flags": 0,
            "hasliked": 0,
            "id": "fsfBz2",
            "likes": 0,
            "name": "mandelbrot zoom in",
            "published": 3,
            "tags": [
                "mandelbrotsetfractal"
            ],
            "usePreview": 0,
            "username": "loryruta",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 255\n\n\n#define MAX_OUTWARD_ZOOM 0.7\n#define MAX_INWARD_ZOOM 10000.0\n#define THRESHOLD 1.0\n\nvec3 map_color(float it)\n{\n    return vec3(1.0 - sin(it * 3.14));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 trasl = vec2(-0.7449, 0.1);\n\n    // point on screen between [-1, 1]\n    vec2 frag_p = (fragCoord / iResolution.xy) * 2.0 - 1.0;\n\n    vec2 mb_c = vec2(0) + trasl; // mandelbrot center point\n    vec2 mb_p = frag_p + trasl; // mandelbrot point under analysis \n    \n    float s = (abs(mod(iTime * 0.01, 1.0)) * (MAX_INWARD_ZOOM - MAX_OUTWARD_ZOOM)) + MAX_OUTWARD_ZOOM; // scaling factor\n    vec2 zoomed_p = (mb_p - mb_c) * (1.0 / s) + mb_c; // the zoomed point\n\n    vec2 p0 = zoomed_p;\n    vec2 p = vec2(0);\n    \n    float it = 0.0;\n    while ((p.x * p.x + p.y * p.y) <= 2.0 * 2.0 && it < float(MAX_ITER))\n    {\n        float tmp = p.x * p.x - p.y * p.y + p0.x;\n        p.y = 2.0 * p.x * p.y + p0.y;\n        p.x = tmp;\n        it += 1.0;\n    }\n    \n    \n    fragColor = vec4(map_color(it / float(MAX_ITER)), 1.0);\n \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}