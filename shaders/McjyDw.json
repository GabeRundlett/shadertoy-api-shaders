{
    "Shader": {
        "info": {
            "date": "1722439635",
            "description": "my got ispired by this background of someones website in a video\nhttps://youtu.be/zswyWBtF-7Y?t=91\n\nsupprised it actually got this to work!",
            "flags": 0,
            "hasliked": 0,
            "id": "McjyDw",
            "likes": 0,
            "name": "Chrom Aberration ",
            "published": 3,
            "tags": [
                "chromaticaberration",
                "color"
            ],
            "usePreview": 0,
            "username": "spaceman",
            "viewed": 70
        },
        "renderpass": [
            {
                "code": "vec4 add(vec4 a, vec4 b){\n    /* example\n    vec2 i = rect(vec2(0.280,0.330),vec2(0.340,0.290));\n    vec2 j = rect(vec2(0.510,0.530),vec2(0.430,0.360));\n    vec3 a = vec3(i.x *i.y);\n    vec3 b = vec3(j.x *j.y);\n     color = add(a,b);\n    */\n    return a + b - 2.0 * (a * b);\n}\nfloat constrain(float n, float  low, float  high) {\n    /*\n * Constrains a number between a minimum and maximum value.\n *\n * @method constrain\n * @param  {Number} n    number to constrain.\n * @param  {Number} low  minimum limit.\n * @param  {Number} high maximum limit.\n * @return {Number}      constrained number.\n *\n */\n  return max(min(n, high), low);\n}\nfloat map(float n, float start1, float stop1, float start2, float stop2, bool withinBounds) {\n\n    \n /* @method map\n * @param  {Number} value  the value to be remapped.\n * @param  {Number} start1 lower bound of the value's current range.\n * @param  {Number} stop1  upper bound of the value's current range.\n * @param  {Number} start2 lower bound of the value's target range.\n * @param  {Number} stop2  upper bound of the value's target range.\n * @param  {Boolean} [withinBounds] constrain the value to the newly mapped range.\n * @return {Number}        remapped number.\n */\n  float newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n  if (!withinBounds) {\n    return newval;\n  }\n  if (start2 < stop2) {\n    return constrain(newval, start2, stop2);\n  } else {\n    return constrain(newval, stop2, start2);\n  }\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 scrollUV = uv; \n    float offset = map(sin(iTime*3.),-1.,1.,0.,.008,true);\n    vec2 uv_offset = uv- vec2(0.01+offset,0.0);\n    vec4 tex = texture(iChannel0, uv_offset);\n    tex.g = 0.0;\n    tex.b = 0.0;\n    \n    \n     vec2 uv_offset_blue = uv- vec2(-0.03-+offset,0.0);\n    vec4 tex_blue = texture(iChannel0, uv_offset_blue);\n    tex_blue.g = 0.0;\n    tex_blue.r = 0.0;\n    \n    \n    vec4 tex_normal = texture(iChannel0, uv);\n    \n    tex = add(tex,tex_normal);\n    tex = add(tex, tex_blue); \n\n    fragColor = tex;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}