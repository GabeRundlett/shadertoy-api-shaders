{
    "Shader": {
        "info": {
            "date": "1718469662",
            "description": "Little colorful version of a doudy rabbit, animating the starting position of the c value (so technically just a julia set at that point, but still fun to look at)\nGolfing is appreciate for condensing either function down. I want a mini lch to rgb func",
            "flags": 0,
            "hasliked": 0,
            "id": "X3cXzn",
            "likes": 1,
            "name": "Doudy Rabbit LCH Colors",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "colors",
                "lch",
                "doudyrabbit"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 89
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 150.0\nvec3 lch_to_rgb(float l, float c, float h) {\n    // Convert LCH to LAB\n    float a = c * cos(h * 2.0 * 3.14159);\n    float b = c * sin(h * 2.0 * 3.14159);\n    \n    // Convert LAB to XYZ\n    float y = (l + 16.0) / 116.0;\n    float x = a / 500.0 + y;\n    float z = y - b / 200.0;\n    \n    x = pow(x, 3.0) > 0.008856 ? pow(x, 3.0) : (x - 16.0 / 116.0) / 7.787;\n    y = pow(y, 3.0) > 0.008856 ? pow(y, 3.0) : (y - 16.0 / 116.0) / 7.787;\n    z = pow(z, 3.0) > 0.008856 ? pow(z, 3.0) : (z - 16.0 / 116.0) / 7.787;\n    \n    x *= 95.047;\n    y *= 100.0;\n    z *= 108.883;\n    \n    // Convert XYZ to RGB\n    x /= 100.0;\n    y /= 100.0;\n    z /= 100.0;\n    \n    float ro = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    float go = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    float bo = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    \n    ro = ro > 0.0031308 ? 1.055 * pow(ro, 1.0 / 2.4) - 0.055 : 12.92 * ro;\n    go = go > 0.0031308 ? 1.055 * pow(go, 1.0 / 2.4) - 0.055 : 12.92 * go;\n    bo = bo > 0.0031308 ? 1.055 * pow(bo, 1.0 / 2.4) - 0.055 : 12.92 * bo;\n    \n    return vec3(ro, go, bo);\n}\n\nvoid douady_rabbit(vec2 uv, out vec3 color) {\n    vec2 z = uv;\n    vec2 c = vec2(0.022565+cos(iTime)*0.05, 0.844864+sin(iTime)*0.05);\n    float iter = 0.0;\n    float S = 3.0;  // Scaling factor\n    float N = 120.0;  // # of colors\n\n    for(; iter < MAX_ITER; iter++) {\n        float x = (z.x * z.x - z.y * z.y) + c.x;\n        float y = (2.0 * z.x * z.y) + c.y;\n        if (x * x + y * y > 4.0) {\n            break;\n        }\n        z = vec2(x, y);\n    }\n    \n    // Non-linear scaling and cyclic mapping\n    float v = pow((iter / MAX_ITER) * S * N, 1.5);\n    v = mod(v, N);\n\n    // Map v to LCH color space\n    float l = 75.0;  // Luminance\n    float ch = 70.0;  // Chroma\n    float h = v / N;  // Hue\n\n    color = lch_to_rgb(l, ch, h);\n}\n \nvoid mainImage(out vec4 O, vec2 fc) {\n    vec2 uv = (2.0 * fc.xy - iResolution.xy) / iResolution.y;\n    uv *= 1.5;\n    vec3 col = vec3(0.0);\n    douady_rabbit(uv, col);\n    O = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}