{
    "Shader": {
        "info": {
            "date": "1552863226",
            "description": "Forgot about this for 2 years, to improve by splitting apart dots continuously ",
            "flags": 0,
            "hasliked": 0,
            "id": "4lsczj",
            "likes": 8,
            "name": "Infinite Pinwheel Triangle Zoom",
            "published": 3,
            "tags": [
                "pinwheel"
            ],
            "usePreview": 0,
            "username": "ttoinou",
            "viewed": 479
        },
        "renderpass": [
            {
                "code": "#define SHOW_CENTER 1\n#define SHOW_SEGMENTS 0\n\n#define PI 3.14159265359\n        \nvec2 polar( float k , float t )\n{\n  return k*vec2(cos(t),sin(t));\n}\n\nvec2 cnorm( vec2 z )  { return z/length(z); }\nvec2 cmuli( vec2 z )  { return vec2( -z.y , z.x ); }\nvec2 cconj( vec2 z )  { return vec2( z.x , -z.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cexp( vec2 z ) { return polar(exp(z.x) , z.y ); }\nvec2 clog( vec2 z ) { return vec2( log(length(z)) , atan(z.y , z.x) ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\n\n\n// segment.x is distance to closest point\n// segment.y is barycentric coefficient for closest point\n// segment.z is length of closest point on curve, on the curve, starting from A\n// segment.a is approximate length of curve\nvec4 segment( vec2 p, vec2 a, vec2 b )\n{\n  a -= p;\n  b -= p;\n  vec3 k = vec3( dot(a,a) , dot(b,b) , dot(a,b) );\n  float t = (k.x - k.z)/( k.x + k.y - 2.*k.z );\n  float len = length(b-a);\n    \n  if( t < 0. ){\n      return vec4( sqrt(k.x) , 0. , 0. , len );\n  } else if( t > 1. ){\n      return vec4( sqrt(k.y) , 1. , len , len );\n  } else {\n  \treturn vec4( length(a*(1.-t) + b*t) , t , t*len , len );\n  }\n}\n\n// https://www.shadertoy.com/view/4djSRW\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash3point(vec2 p)\n{\n    //vec3 col = hash32(p);\n    vec3 col = \n            hash32(p*1.25672+vec2(.2,.8))\n          * hash32(vec2(p.y,p.x)/3.42464-vec2(.5,.0))\n          - hash32(vec2(3.0+p.y,1.2))\n    ;\n    \n    return pow(\n        (abs(col)+max(col,0.0))/2.0\n        , vec3(.6,.5,.4)\n    );\n}\n\nfloat smoothFunction(float k)\n{\n    return 1.0 / ( 1.0 + k*k );\n}\n\nvec3 smoothFunction(vec3 k)\n{\n    return 1.0 / ( 1.0 + k*k );\n}\n\n\nfloat coeffDistPoint(vec2 uv,vec2 colPoint,float scale)\n{    \n    //float dist = length(uv - colPoint) * scale;\n    //dist = pow(dist,0.25);\n    //dist = 1.0 - smoothstep(0.0,1.0,dist);\n    \n    vec2 uv_ = (uv - colPoint)*scale*24.0;\n    float dist = dot(uv_,uv_);\n    return  1.0 / ( 1.0 + dist );\n}\n\nvoid mixColorPoint(vec2 uv,inout vec3 col,vec2 colPoint,float scale)\n{\n    col = mix(\n        col , \n        hash3point(colPoint) ,\n        coeffDistPoint(uv,colPoint,scale)\n    );\n}\n\n\nvec3 mixColorLine(vec2 uv,vec3 currentCol,vec3 colLine,vec2 lineA,vec2 lineB,float scale)\n{\n    return mix(\n        currentCol , \n        colLine ,\n        1.0 - smoothstep(0.0,1.0,sqrt(sqrt( segment(uv,lineA,lineB).x * scale )))\n    );\n}\n\nbool pointsOnSameSideOfLine(vec2 pointA,vec2 pointB,vec2 lineA, vec2 lineB)\n{\n    vec2 n = lineB - lineA;\n    n = vec2(n.y,-n.x);\n    return  dot(pointA-lineA,n)\n          * dot(pointB-lineA,n)\n    > 0.0;\n}\n\n\nfloat viewportMagnify = 1.0;\nvec2 screenToViewport(vec2 uv)\n{\n    return (uv - iResolution.xy/2.0 ) / min(iResolution.x,iResolution.y) * viewportMagnify;\n}\n\nvec2 viewportToScreen(vec2 uv,vec2 base)\n{\n    return (uv - base/4.0) / viewportMagnify * min(iResolution.x,iResolution.y) +  iResolution.xy/2.0;\n    //return (uv - iResolution.xy/2.0 ) / min(iResolution.x,iResolution.y) * viewportMagnify;\n}\n\n\nstruct Pinwheel\n{\n    vec2 A; // Right angle, divided into 1 acute and 1 obtuse\n    vec2 B; // Acute angle, stays acute\n    vec2 C; // Obtuse angle, stays obtuse\n    \n    vec2 D; // on GA\n    vec2 E; // on AB\n    vec2 F; // on BC, close to B\n    vec2 G; // on BC, close to C\n    \n    float r;\n    float ID;\n    float ID2;\n};\n\n    \nfloat det22(vec2 a,vec2 b)\n{\n    return a.x*b.y - a.y*b.x;\n}\n\nvec3 barycentricCoordinate(vec2 P,Pinwheel T)\n{\n    vec2 PA = P - T.A;\n    vec2 PB = P - T.B;\n    vec2 PC = P - T.C;\n    \n    vec3 r = vec3(\n        det22(PB,PC),\n        det22(PC,PA),\n        det22(PA,PB)\n    );\n    \n    return r / (r.x + r.y + r.z);\n}\n    \n    \n#define EQUERRE_COPY(T,Q) \\\n    T.A = Q.A; \\\n    T.B = Q.B; \\\n    T.C = Q.C; \\\n    T.ID = Q.ID; \\\n    T.ID2 = Q.ID2; \\\n    T.r = Q.r; \n    \n#define EQUERRE_COMPUTE_DEFG(T) \\\n\tT.E = (T.A + T.B)/2.0; \\\n\tT.F = (3.0 * T.B + 2.0 * T.C)/5.0; \\\n\tT.G = (T.B + 4.0 * T.C)/5.0; \\\n\tT.D = (T.G + T.A)/2.0;\n    \n#define EQUERRE_GET1(T,Q) \\\n\tT.A = Q.F; \\\n    T.B = Q.B; \\\n    T.C = Q.E;\n\n#define EQUERRE_GET2(T,Q) \\\n\tT.A = Q.F; \\\n    T.B = Q.G; \\\n    T.C = Q.E;\n\n#define EQUERRE_GET3(T,Q) \\\n\tT.A = Q.D; \\\n    T.B = Q.E; \\\n    T.C = Q.G;\n\n#define EQUERRE_GET4(T,Q) \\\n\tT.A = Q.D; \\\n    T.B = Q.E; \\\n    T.C = Q.A;\n\n#define EQUERRE_GET5(T,Q) \\\n\tT.A = Q.G; \\\n    T.B = Q.A; \\\n    T.C = Q.C;\n\n#define EQUERRE_COND_12_345(X,T) \\\n\tpointsOnSameSideOfLine(X,T.F,T.E,T.G)\n \n#define EQUERRE_COND_1_2(X,T) \\\n\tpointsOnSameSideOfLine(X,T.B,T.E,T.F)\n\n#define EQUERRE_COND_34_5(X,T) \\\n\tpointsOnSameSideOfLine(X,T.E,T.A,T.G)\n        \n#define EQUERRE_COND_3_4(X,T) \\\n\tpointsOnSameSideOfLine(X,T.G,T.E,T.D)\n        \n#define EQUERRE_CENTER(T) ((T.A+T.B+T.C)/3.0)\n\n        \n\n// Base Triangle\nPinwheel Tri;\n\nfloat TriangleAngle;\n//float k = 1./(1. - sqrt(3.)*.5);\nfloat RadiusCoeff;\nfloat AngleCoeff;\nfloat k;\n\nvec2 A,B,C,D,E,F,G,H;\nbool AB,BC,CD,DA;\n\n\nfloat logZoom = 0.;\nfloat angleShift = 0.;\n\n#define POINT_SPIRAL(n,m) (polar( pow(k,(n + logZoom)/2.) , (n)*AngleCoeff + m*PI/2. - angleShift ))\n// why nPI/3 and not nPI/6 ???????????????????????????\n\nvoid ComputeSpiralPoints(float r)\n{\n    A = POINT_SPIRAL(r,0.);\n    B = POINT_SPIRAL(r,1.);\n    C = POINT_SPIRAL(r,2.);\n    D = POINT_SPIRAL(r,3.);\n    \n    E = POINT_SPIRAL(r+1.,3.);\n    F = POINT_SPIRAL(r+1.,0.);\n    G = POINT_SPIRAL(r+1.,1.);\n    H = POINT_SPIRAL(r+1.,2.);\n}\n\n\nbool FindTriangle(float r,vec2 uv)\n{\n    ComputeSpiralPoints(r);\n    \n    AB = !pointsOnSameSideOfLine(uv,C,A,B);\n    BC = !pointsOnSameSideOfLine(uv,D,B,C);\n    CD = !pointsOnSameSideOfLine(uv,A,C,D);\n    DA = !pointsOnSameSideOfLine(uv,B,D,A);\n    \n    Tri.r = r;\n    bool k = true;\n    \n    if(AB && !BC)\n    {\n        Tri.A = B;\n        Tri.B = E;\n        Tri.C = F;\n        Tri.ID = r*4.+0.;\n    }\n    else if(BC && !CD)\n    {\n        Tri.A = C;\n        Tri.B = F;\n        Tri.C = G;\n        Tri.ID = r*4.+1.;\n    }\n    else if(CD && !DA)\n    {\n        Tri.A = D;\n        Tri.B = G;\n        Tri.C = H;\n        Tri.ID = r*4.+2.;\n    }\n    else if(DA && !AB)\n    {\n        Tri.A = A;\n        Tri.B = H;\n        Tri.C = E;\n        Tri.ID = r*4.+3.;\n    }\n    else\n    {\n        //return AB || BC || CD || DA;\n        k = false;\n    }\n    \n    return k;\n}\n\nvec2 deformation_pole = vec2(.5,.0);\n\nvec2 deformation( vec2 uv )\n{\n    //uv = cdiv( uv + deformation_pole , uv - deformation_pole );\n    //uv = cdiv(vec2(1.,0.),uv);\n    return uv;\n    //return clog( uv + deformation_pole ) - clog( uv - deformation_pole );\n    //return cexp( cdiv( uv + deformation_pole , clog( uv - deformation_pole ) ) );\n}\n\nvec2 deformation_inverse(vec2 def )\n{\n    return cdiv(2.*deformation_pole,def -  vec2(1.,0.)) + deformation_pole;\n}\n\nfloat qLimit;\n\n\n\nvec3 colorTriangle(vec2 uv_s,Pinwheel Tri)\n{\n    \n    vec3 col = hash3point(vec2(\n        // coloring algorithm\n        Tri.ID+cos(Tri.ID2),sin(Tri.ID*3.)-Tri.ID2\n    ));\n    \n    //col = vec3(1.);\n    \n    //vec3 col = hash3point(vec2(Tri.ID,Tri.ID*Tri.ID));\n    \n    /*Tri.A = deformation_inverse(Tri.A);\n    Tri.B = deformation_inverse(Tri.B);\n    Tri.C = deformation_inverse(Tri.C);\n    uv_s = uv;*/\n\n    float scale = 1./viewportMagnify/(1. + dot(uv_s,uv_s)*1.); // LOG correction\n    vec3 EquerreColor = vec3(0.0,0.0,0.0);\n    \n    \n    \n    #if SHOW_SEGMENTS==1\n        #define OPERATION1(x,y) col = mixColorLine(uv_s,col,EquerreColor,x,y,scale);\n    \tOPERATION1(Tri.A,Tri.B);\n    \tOPERATION1(Tri.B,Tri.C);\n    \tOPERATION1(Tri.C,Tri.A);\n    #endif\n    \n    \n    scale *= 12.;\n    vec2 TriCenterMix = (Tri.A + Tri.B + Tri.C)/3.;\n   // TriCenterMix = Tri.B;\n    \n    #if SHOW_CENTER==1\n        //col *= 1.*(.5 + coeffDistPoint(uv_s,TriCenterMix,scale));\n        col = vec3( clamp( sqrt( 1. - coeffDistPoint(uv_s,TriCenterMix,scale) ) , .0 , 1. ) );\n    #endif\n    \n    return col;//*2./(1. + dot(uv_s,uv_s)/1e3 );\n}\n\nvec3 color(vec2 uv_s)\n{\n    float r = floor( log(dot(uv_s,uv_s))/log(k) - logZoom );\n    \n    \n    if( !FindTriangle(r+1.,uv_s) )\n    {\n        // inside circle\n        FindTriangle(r,uv_s);\n    }\n    \n    \n    \n\tint nbIterations = 16;//iMouse.z > .5 ? 3 : 2;\n    \n    Pinwheel Tri_TMP;\n    Tri.ID2 = 0.;\n    \n    bool direction = false;\n    #define ID_DIRECTION(x) (direction ? 4.-x : x)\n      \n    EQUERRE_COPY(Tri_TMP,Tri);\n    float q;\n    qLimit = ( 1. / mix( 1. , 1./.14  , iMouse.x/iResolution.x ) )/5.*viewportMagnify;\n    qLimit = .05;\n    \n    for(int i = 0 ; i < nbIterations ; i++)\n    {\n        Tri_TMP.ID2 *= 5.;\n        EQUERRE_COMPUTE_DEFG(Tri);\n        \n        if( EQUERRE_COND_12_345(uv_s,Tri) )\n        {\n            if( EQUERRE_COND_1_2(uv_s,Tri) )\n            {\n            \tEQUERRE_GET1(Tri_TMP,Tri);\n                Tri_TMP.ID2 += ID_DIRECTION(0.);\n            }\n            else\n            {\n            \tEQUERRE_GET2(Tri_TMP,Tri);\n                Tri_TMP.ID2 += ID_DIRECTION(1.);\n                direction = !direction;\n            }\n        }\n        else if( EQUERRE_COND_34_5(uv_s,Tri) )\n        {\n            if( EQUERRE_COND_3_4(uv_s,Tri) )\n            {\n            \tEQUERRE_GET3(Tri_TMP,Tri);\n                Tri_TMP.ID2 += ID_DIRECTION(2.);\n                direction = !direction;\n            }\n            else\n            {\n            \tEQUERRE_GET4(Tri_TMP,Tri);\n                Tri_TMP.ID2 += ID_DIRECTION(3.);\n            }\n        }\n        else \n        {\n            EQUERRE_GET5(Tri_TMP,Tri);\n            Tri_TMP.ID2 += ID_DIRECTION(4.);\n        }\n        \n        q = length(Tri_TMP.B - Tri_TMP.A)/qLimit;\n        if( q < 1. )\n        {\n            break;\n        }\n        else\n        {\n        \tEQUERRE_COPY(Tri,Tri_TMP);\n        }\n    }\n    \n    \n    \n    \n    q = max( \n        (q-1./sqrt(5.))/(1. - 1./sqrt(5.))\n        // nice effects here\n        //* pow(viewportMagnify/length(uv_s),.75)\n        * 1.\n    , 0. );\n    \n    //return colorTriangle(uv_s,Tri);\n    \n    return mix(\n        colorTriangle(uv_s,Tri),\n        colorTriangle(uv_s,Tri_TMP),\n        smoothstep(0.,1.,(q))\n    );\n    \n    //return colorTriangle(uv_s,Tri);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    TriangleAngle = atan(2.); // Pinwheel\n    //TriangleAngle = PI/3.; // Equerre \n    \n    //PI * ( mix( 1./12. ,  1./4. ,  iMouse.x/iResolution.x ) + .333 );\n    \n    angleShift = -iTime*.3;\n    logZoom = iTime/sqrt(3.);\n    \n    RadiusCoeff = 1. / ( 1./tan(TriangleAngle) - 1. );\n    k = 1. + 2.*(RadiusCoeff * (1. + RadiusCoeff ) );\n    \n    AngleCoeff = asin( - RadiusCoeff / sqrt(k) );\n    \n\tvec2 uv = screenToViewport(fragCoord.xy );\n    //uv *= mat2(cos(iTime/6.+vec4(0.,1.6,-1.6,0.)));\n    \n    vec2 uv_s = deformation(uv);\n    \n    viewportMagnify = 1.;\n    //uv_s *= viewportMagnify;\n    \n    \n    fragColor.rgb = color(uv_s);\n    //fragColor.rgb = tanh(fragColor.rgb * 26. / (.2 + qLimit/viewportMagnify*16.)  ); // LOG correction\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}