{
    "Shader": {
        "info": {
            "date": "1711488957",
            "description": "// Fork of \"lights01\" by kenshin. https://shadertoy.com/view/M3jSDc\n-tmm just added mousable custom color\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lfcGR7",
            "likes": 1,
            "name": "Fork mousable c quantumpha 943",
            "published": 3,
            "tags": [
                "lights"
            ],
            "usePreview": 0,
            "username": "quantumphantom",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "// Fork of \"lights01\" by kenshin. https://shadertoy.com/view/M3jSDc\n// 2024-03-26 14:29:46\n\nfloat hash21(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 hash22(vec2 uv) {\n    uv = vec2(dot(uv, vec2(127.1,311.7)),\n              dot(uv, vec2(269.5,183.3)));\n    return 2.0 * fract(sin(uv) * 43758.5453123) - 1.0;\n}\n\nfloat perlinNoise(vec2 uv)\n{\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    vec2 blur = smoothstep(.0, 1., fuv);\n    vec2 bl = vec2(.0, .0);\n    vec2 br = vec2(1., .0);\n    vec2 tl = vec2(.0, 1.);\n    vec2 tr = vec2(1., 1.);\n    vec2 bln = hash22(iuv + bl);\n    vec2 brn = hash22(iuv + br);\n    vec2 tln = hash22(iuv + tl);\n    vec2 trn = hash22(iuv + tr);\n    float b  = mix(dot(bln, fuv - bl), dot(brn, fuv - br), blur.x);\n    float t  = mix(dot(tln, fuv - tl), dot(trn, fuv - tr), blur.x);\n    float c = mix(b, t, blur.y);\n    return c;\n}\n\nfloat fbm(vec2 uv, int octaves)\n{\n    float value = .0;\n    float ampitude  = .5;\n    float freq = 2.;\n    for(int i = 0; i < octaves; i++)\n    {\n        value += perlinNoise(uv) * ampitude;\n        uv *= freq;\n        ampitude *= .5;\n    }\n    return value;\n}\n\n// customizable color from @WhiteTophat  in https://www.shadertoy.com/view/dlBczW\nvec4 lerp(vec4 a, vec4 b, float t) {\n    return (a * vec4(t)) + (b * vec4(1.0-t));\n}\nvec4 lerp(vec4 a, vec4 b, vec4 t) {\n    return (a * t) + (b * (vec4(1.0) * t));\n}\n\nvec4 hue2rgb(float hue) {\n    hue = fract(hue); //only use fractional part of hue, making it loop\n    float r = abs(hue * 6.0 - 3.0) - 1.0; //red\n    float g = 2.0 - abs(hue * 6.0 - 2.0); //green\n    float b = 2.0 - abs(hue * 6.0 - 4.0); //blue\n    vec4 rgb = vec4(r,g,b, 1.0); //combine components\n    rgb = clamp(rgb, 0.0, 1.0); //clamp between 0 and 1\n    return rgb;\n}\nvec4 hsv2rgb(vec3 hsv) {\n    vec4 rgb = hue2rgb(hsv.x); //apply hue\n    rgb = lerp(vec4(1.0), rgb, 1.0 - hsv.y); //apply saturation\n    rgb = rgb * hsv.z; //apply value\n    return rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    vec3 col = vec3(.0);\n    uv += fbm(uv + iTime * .5, 20);\n    float dist = abs(uv.x);\n    \n    vec3 baseColor = vec3(1.2, .2, .3);//vec3(.3, .2, 1.2);\n    \n    if(iMouse.xy!=vec2(0.)) {\n      vec2 mouseUV = iMouse.xy / iResolution.xy;\n      vec4 mouseColor = hsv2rgb(vec3(mouseUV.x, mouseUV.y, 1.0));\n      baseColor = mouseColor.rgb;\n    }    \n    \n    col = baseColor * mix(.0, .05, hash21(vec2(iTime))) / dist;    \n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}