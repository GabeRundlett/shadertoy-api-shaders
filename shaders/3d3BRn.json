{
    "Shader": {
        "info": {
            "date": "1604098277",
            "description": "A simple checkerboard distorted by sine.",
            "flags": 0,
            "hasliked": 0,
            "id": "3d3BRn",
            "likes": 13,
            "name": "Distorted Checkerboard",
            "published": 3,
            "tags": [
                "2d",
                "checkerboard"
            ],
            "usePreview": 0,
            "username": "tombla",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "#define R                       (iResolution.xy)\n#define MR                      min(R.x, R.y)\n#define VERTICAL_CHECKERS       22.\n#define CHECKERS_DIFF           6.5\n// Suggestion from FabriceNeyret2:\n#define CHECKER_BORDER\t        (1.7 * VERTICAL_CHECKERS / MR)\n#define S(B, v)                 smoothstep(B, 0., min(v.x, v.y))\n#define BORDER_COLOR            vec3(0.1, 0.1, 0.1)\n\n#define ANGULAR_SPEED 0.2\n#define ANGULAR_ADD   0.5\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb(in vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0,4.0,2.0),\n                             6.0) -3.0 ) -1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nmat2 rot(in float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec4 toCheckers(in vec2 p) {\n    // Distort\n    p += 0.05 * sin(p *12.);\n    // Tiles\n    p *= VERTICAL_CHECKERS + CHECKERS_DIFF * sin(iTime);\n    p *= rot(iTime * ANGULAR_SPEED + sin(iTime * ANGULAR_ADD));\n    \n    return vec4(\n        fract(p.x),\n        fract(p.y),\n        floor(p.x),\n        floor(p.y));\n}\n\nvoid mainImage(out vec4 O, in vec2 u) {\n    // Normalize to -0.5 ... 0.5 on the shorter axis.\n    u = (u - 0.5 * R) / MR;\n    vec4 c = toCheckers(u);\n    \n    // Simplification of:\n    //   float lb = smoothstep(CHECKER_BORDER, 0.0, min(c.x, c.y));\n    //   float ur = smoothstep(1.0 - CHECKER_BORDER, 1.0, max(c.x, c.y));\n    //   float borderFactor = max(lb, ur);\n    // Suggestion from FabriceNeyret2:\n    float borderFactor = S(CHECKER_BORDER, min(c.xy, 1. - c.xy));\n    // light or dark?\n    float isLight = mod(c.z + c.w, 2.);\n    // Inner color\n    vec3 innerColor = hsb2rgb(vec3(\n        mod((c.z + c.w + iTime * 4.)/22., 3.),\n        smoothstep(-1.6, 1., sin((c.z + c.w) / 12.1 + iTime * 1.3)),\n        .7 + 0.3 * sin(c.z - c.w + iTime * 3.7)));\n    \n    O = vec4(\n        mix(innerColor, BORDER_COLOR, borderFactor),\n        1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}