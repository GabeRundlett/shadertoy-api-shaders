{
    "Shader": {
        "info": {
            "date": "1547778025",
            "description": "Sierpinski Triangle Fractal - manuals way :)",
            "flags": 0,
            "hasliked": 0,
            "id": "tsXGDl",
            "likes": 2,
            "name": "Latihan 7",
            "published": 3,
            "tags": [
                "triangle",
                "simpletriangle",
                "2dtriangle",
                "cgk3",
                "sierpinskitrianglefractal"
            ],
            "usePreview": 0,
            "username": "dennyraymond",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "float Band (float t, float start, float end, float blur){\n  float step1 = smoothstep(start-blur, start+blur, t);\n    float step2 = smoothstep(end+blur, end-blur, t);\n    float stepFinal = step1 * step2;\n    return stepFinal;\n}\n\nfloat rectangle (vec2 uv, float blur, float left, float right, float bottom, float top) {\n    float r;\n    r = Band (uv.x, left, right, blur);\n    r *= Band (uv.y, bottom, top, blur);\n    return r;\n}\n\nfloat triangle1 (vec2 uv, float blur, float point) {\n    float t = uv.y;\n    // times with 2 to get the isoceles triangle shape\n    return rectangle (uv*2., blur, -point+t, point-t, -point-t, point+t);\n}\n\nfloat triangle2 (vec2 uv, float blur, float point) {\n    float t = uv.y*-1.;\n    return rectangle (uv*2., blur, -point+t, point-t, -point-t, point+t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -=0.5; //move center\n    uv.x*= iResolution.x/iResolution.y;\n    float x = uv.x;\n    float y = uv.y;\n    float try;\n    //vec3 col1, col2, col3;\n    \n    try = triangle1(vec2(x,y+.2), 0.001, .6);\n    float tri1 = triangle2(vec2(x,y+.1), 0.0001, .3);\n    float tri2 = triangle2(vec2(x-.2,y+.25), 0.001, .15);\n    float tri3 = triangle2(vec2(x+.2,y+.25), 0.001, .15);\n    float tri4 = triangle2(vec2(x,y-.15), 0.001, .15);\n    float tri5 = triangle2(vec2(x,y-.275),0.001, .075);\n    float tri6 = triangle2(vec2(x+.1,y-.075), 0.001, .075);\n    float tri7 = triangle2(vec2(x-.1,y-.075), 0.001, .075);\n    float tri8 = triangle2(vec2(x+.2,y+.125), 0.001, .075);\n    float tri9 = triangle2(vec2(x-.2,y+.125), 0.001, .075);\n    float tri10 = triangle2(vec2(x+.3,y+.325), 0.001, .075);\n    float tri11 = triangle2(vec2(x+.1,y+.325), 0.001, .075);\n    float tri12 = triangle2(vec2(x-.1,y+.325), 0.001, .075);\n    float tri13 = triangle2(vec2(x-.3,y+.325), 0.001, .075);\n    float tot = tri1 + tri2 + tri3 + tri4 + tri5 + tri6 + tri7 + tri8 + tri9 + tri10 + tri11 + tri12 + tri13;\n    \n    vec3 col = vec3(1); // bg color\n \n    vec3 col1 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)); // time varying color\n    \n    //col += vec3(1.0,1.0,0)*try;\n    col -= col1*try; // color for big1 triangle\n   // col += vec3(0);\n    col += col1*tot; // color for inside triangle\n    \n\t//col += col1 + col2;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}