{
    "Shader": {
        "info": {
            "date": "1667638741",
            "description": "Use the mouse to change the iteration path.",
            "flags": 0,
            "hasliked": 0,
            "id": "dd23WD",
            "likes": 2,
            "name": "Mandelbrot set & iteration path",
            "published": 3,
            "tags": [
                "mandelbrotset"
            ],
            "usePreview": 0,
            "username": "quantum_rose",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS 256\n\nvec2 f(vec2 z, vec2 c) {\n    return mat2(z, -z.y, z.x) * z + c;\n}\n\nfloat getScale() {\n    return (0.25 * min(iResolution.x, iResolution.y)) / iResolution.x;\n\n}\n\nfloat line(vec2 st, vec2 start, vec2 end, float strokeWidth, float pixelSize) {\n    vec2 a = end - start;\n    vec2 b = st - start;\n    float t = clamp(dot(a, b) / dot(a, a), 0.0, 1.0);\n    float d = length(st - start - a * t);\n    return smoothstep(d - pixelSize, d + pixelSize, strokeWidth * 0.5);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float scale = getScale();\n    float pixelSize = 1.0 / iResolution.x / scale;\n    vec2 st = fragCoord.xy / iResolution.x;\n    vec2 center = vec2(0.5, iResolution.y / iResolution.x * 0.5);\n    vec2 p = (st - center) / scale;\n    vec3 color = vec3(0.0);\n    vec2 c, z;\n\n    c = p;\n    z = vec2(0.0);\n    bool escaped = false;\n    int j;\n    for (int i = 0; i < ITERATIONS; i++) {\n        z = f(z, c);\n        if (length(z) > 2.0) {\n            escaped = true;\n            j = i;\n            break;\n        }\n    }\n    float depth = float(j) / float(ITERATIONS);\n    color = escaped ? vec3(pow(depth, 0.5)) : vec3(1.0);\n\n    vec3 strokeColor = vec3(1.0, 0.0, 0.0);\n    if (iMouse.x == 0.0 && iMouse.y == 0.0) {\n        c = vec2(0.035, 0.068) / scale;\n    } else {\n        c = ((iMouse.xy / iResolution.x) - center) / scale;\n    }\n    z = vec2(0.0);\n    for (int i = 0; i < ITERATIONS; i++) {\n        vec2 newZ = f(z, c);\n        color = mix(color, strokeColor, line(p, z, newZ, pixelSize, pixelSize));\n        z = newZ;\n        if (length(z) > 2.0) {\n            break;\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}