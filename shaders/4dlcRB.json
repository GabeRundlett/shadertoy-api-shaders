{
    "Shader": {
        "info": {
            "date": "1488751134",
            "description": "A small fanart for some friends ;)\n\nput \n[url]https://soundcloud.com/alterlab/anticlockwise-1[/url]\nin channel1 of buffA\nfor some music reaction",
            "flags": 32,
            "hasliked": 0,
            "id": "4dlcRB",
            "likes": 5,
            "name": "Alterlab Logo",
            "published": 3,
            "tags": [
                "2d",
                "fanart"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 810
        },
        "renderpass": [
            {
                "code": "// By Anton Roy\n// For AlterLab \n// https://www.facebook.com/AlterLabOfficial/\n\nvec4 logoColor =     vec4(190., 189., 185., 255.) / 255.;\nvec4 reactionVolor = vec4(160., 159., 155., 255.) / 255.;\nvec4 outterColor =   vec4(036., 036., 034., 255.) / 255.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  fragCoord.xy / iResolution.xy;\n    \n    vec4 result = texture(iChannel0,uv);\n    float f = (1. - result.r) * 1.4;\n    \n    \n    fragColor = mix(outterColor,reactionVolor,f);\n    fragColor = mix(fragColor,logoColor,result.b);\n    \n    float tex = texture(iChannel1,fragCoord.xy/iResolution.xy * 5.).r;\n    fragColor *= vec4(tex*.5+.7); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define _SmoothFactor 1. / iResolution.y\n#define _Smooth(p,r,s) smoothstep(-s, s, p-(r))\n#define _Smooths(p,r) _Smooth(p,r,_SmoothFactor)\n\n// by : Maarten\n// from : https://www.shadertoy.com/view/4dfXDn\nfloat lineDist(vec2 p, vec2 start, vec2 end)\n{\n\tvec2 dir = start - end;\n\tfloat lngth = length(dir);\n\tdir /= lngth;\n\tvec2 proj = max(0.0, min(lngth, dot((start - p), dir))) * dir;\n\treturn length( (start - p) - proj );\n}\n\nvec2 alterLabDistance(in vec2 uv)\n{\n    float dist = length(uv); \n    \n    float circle = _Smooths(dist,.41) - 1. + _Smooths(.45,dist);\n\t\n    float sigil = _Smooths(lineDist(uv, vec2(-.268,-.114), vec2(-.031,.231)),.02);\n    \n    sigil = min(sigil, _Smooths(lineDist(uv, vec2(-.031, .231), vec2(-.141,-.214) ),.02));\n    sigil = min(sigil, _Smooths(lineDist(uv, vec2(-.258, .010), vec2( .125, .127) ),.02));\n    sigil = min(sigil, _Smooths(lineDist(uv, vec2( .174, .238), vec2(-.007,-.170) ),.02));\n    sigil = min(sigil,( _Smooths(lineDist(uv, vec2(-.022,-.201), vec2( .287,-.119) ),.02)\n    \t+  _Smooths(lineDist(uv, vec2( .199,-.177), vec2(-.001,-.253) ),.02) * -1. + 1.\n    ));\n    \n    return vec2(circle , 1. - sigil);\n}\n\n//DIFFUSION\n\n#define sample(x,y) texture(iChannel0, (uv + vec2(x,y) / iResolution.xy))\n\nvec2 difRate = vec2(1.,.25);\n\n#define FEED .0367;\n#define KILL .0649;\n\nfloat zoom = .9997;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv =( uv - vec2(.5)) * zoom + vec2(.5);\n    \n    \n    vec2 centered_uv = (fragCoord / iResolution.y) -  vec2(iResolution.x /iResolution.y * .5,.5);\n    vec4 current = sample(0.,0.);\n    \n    vec4 cumul = current * -1.;\n    \n    cumul += (   sample( 1., 0.) \n               + sample(-1., 0.) \n               + sample( 0., 1.) \n               + sample( 0.,-1.)\n             ) * .2;\n\n    cumul += (\n        sample( 1, 1) +\n        sample( 1,-1) +\n        sample(-1, 1) +\n        sample(-1,-1) \n       )*.05;\n    \n    \n    float feed = FEED;\n    float kill = KILL;\n    \n    float dist = length(centered_uv) - .3;\n    float sound = texture(iChannel1,vec2(.85,.5)).r;\n    sound *= .2;\n    \n    kill = kill  + step(0.,dist) * dist*.25 ;\n    feed += sound;\n    \n    vec4 lap =  cumul;\n    float newR = current.r + (difRate.r * lap.r - current.r * current.g * current.g + feed * (1. - current.r));\n    float newG = current.g + (difRate.g * lap.g + current.r * current.g * current.g - (kill + feed) * current.g);\n    \n    newR = clamp(newR,0.,1.);\n    newG = clamp(newG,0.,1.);\n    \n    current = vec4(newR,newG,0.,1.);\n    \n    \n    vec2 logo = alterLabDistance(centered_uv*2.);\n    float draw = logo.x + logo.y;\n    draw *=  .25 + fract(atan(centered_uv.y,centered_uv.x)*.5 + iTime*.5) * .05 ;\n    current = max(current, vec4(0.,1.,0.,1.) * draw);\n  \tcurrent.b = logo.y;\n    \n    fragColor = current;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}