{
    "Shader": {
        "info": {
            "date": "1602548821",
            "description": "Contour plot of Hill's Spherical Vortex (smoke ring). Cross sectional cut is along z-plane as a function of time.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsGyWz",
            "likes": 6,
            "name": "Hills' Spherical Vortex Contours",
            "published": 3,
            "tags": [
                "fluiddynamics",
                "smokering",
                "vortexring",
                "hillssphericalvortex"
            ],
            "usePreview": 0,
            "username": "t420babe",
            "viewed": 458
        },
        "renderpass": [
            {
                "code": "/* t420babe - Hill's Spherical Vortex Countours */\n\n// Loop time\nfloat loop_time(float u_time, float limit) {\n  float mod_time = mod(u_time, limit);\n  if (mod_time < limit / 2.0) {\n    return mod_time;\n  } else {\n    return limit - mod_time;\n  }\n}\n\n// Crisp lines\nfloat sharp(float f) {\n  return smoothstep(-0.75, 0.75, (f - 0.1) / fwidth(f));\n}\n\n// Equation for vortex ring\nvec2 vortex_ring(vec2 pos, float u_time, out vec3 color) {\n  float a = 1.0;\n  float u_0 = 10.0;\n  float A = 15.0 / 2.0 * u_0 * 1.0 / pow(a, 2.0);\n\n  float u_int = 1.0 / 5.0 * A * pos.y * (pow(a, 2.0) - pow(pos.x, 2.0) - 2.0 * pow(pos.y, 2.0));\n  float v_int = 1.0 / 5.0 * A * pos.x * pos.y;\n\n  return vec2(u_int, v_int);\n}\n\n// Create contour lines\nvoid vortex_contour(vec2 pos, float u_time, out vec3 color) {\n  pos.x += 0.5;\n  float loop = loop_time(u_time, 30.0);\n    \n  vec2 uv_int = vortex_ring(pos, u_time, color);\n  float z = (uv_int.x + uv_int.y) / 5.0 + 2.0;\n  z *= 4.0 * (loop / 5.0);\n    \n  float d = fract(z);\n    if(mod(z, 2.0) > 1.0) {\n      d = 1.0 - d;\n    }\n\n  // Slightly thinner lines for slightly different vibe\n  // d = d / fwidth(z);\n  \n  d = sharp(d);\n  color = vec3(d);\n    \n  // Invert colors\n  // color = 1.0 - color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n  vec3 color = vec3(1.0);\n  vortex_contour(pos, iTime, color);\n \n  fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}