{
    "Shader": {
        "info": {
            "date": "1590969629",
            "description": "Bored and experimenting with rendering",
            "flags": 0,
            "hasliked": 0,
            "id": "tdSBWc",
            "likes": 11,
            "name": "Two Suns",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "mountain"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "// Fork of \"Two Suns\" by Plento. https://shadertoy.com/view/tdSBWc\n// 2020-06-01 01:08:54\n\n// Plento\n\nfloat map(vec3 rp){\n    rp.y-=1.;\n    rp.y += octnse(rp.xz*.06, 2)*12.;\n    return rp.y;\n}\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nfloat march(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0.;   \n    for(int i = 0; i < 68; i++){\n    \td = map(ro + rd*t); \t   \n        \n        if(abs(d) < .0025 || t > 64.)break;\n        t += d * .65;\n    }\n    return t;\n}\n\nvec3 color(vec3 p, vec3 rd, vec3 n, vec2 u, float t){\n    vec3 lp = p+vec3(0.5, 16.0, -4.0);\n    vec3 ld = normalize(lp-p);\n   \t\n    float lgd = length(lp - p);\n    float faloff = exp(-lgd*.09);\n    \n    float fres = smoothstep(-.5, .5, dot(rd, n));\n    float dif = max(dot(n, ld), .0);\n    \n    vec3 col = vec3(ss(.2, .27, abs(fract(p.z*.75)-.5)));\n    \n    vec3 lights = 2.5*fres*vec3(1., 0.55, 0.);\n    lights += 6.6*dif*vec3(1., 1., 1.) * faloff;\n    \n    col *= lights;\n    \n    vec2 bgc = vec2(atan(rd.x, rd.z), max(rd.y, 0.));\n    float nse = octnse(vec2(0.47, 0.)+bgc.xy*2., 3);\n    float stamp = ss(0.005, 0.01, (rd.y + nse*.26 - .05));\n    vec3 bg2D = vec3(.99, 0., 0.)*stamp;\n    vec3 sun = vec3(.99, .75, .0)*exp(-6.*(length(vec2(0., 0.0)-rd.xy)-.1));\n    bg2D += sun*stamp;\n    \n    col = mix(vec3(0.96, 0.7, 0.5), col, exp(-t*t*t*0.00003));\n    col += sun*.6*vec3(1., 0.6, 1.);\n    col = mix(bg2D, col, .5);\n    \n\treturn col;   \n}\n\nconst float rad = 25.;\nconst float spd = .2;\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec3 rd = normalize(vec3(uv, .5));\n    vec3 ro = vec3(0., 3.5, rad);\n    \n    rd.xz *= rot(iTime*spd+m.y*12.+2.);\n    rd.xy *= rot(cos(iTime*1.3)*.07);\n    \n    ro.x += cos(iTime*spd+m.y*12.+2.) * rad;\n    ro.z += sin(iTime*spd+m.y*12.+2.) * rad;\n    \n    float t = march(rd, ro);\n    \n    vec3 n = normal(ro + rd*t);\n    vec3 col = color(ro + rd*t, rd, n, u, t);\n    \n    col *= ss(0.54, 0.15, abs(uv.y));\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n    \n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define ss(a, b, t) smoothstep(a, b, t)\n\nvec2 hash22( vec2 x ){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat ridges(vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = ss(0., 1., f);\n    \n    vec2 a = hash22(i);\n    vec2 b = hash22( i + vec2(1.,0.));\n    vec2 c = hash22( i + vec2(.0,1.));\n    vec2 d = hash22( i + vec2(1));\n    \n    \n    float nse = mix( mix( dot( a, f ), \n                     dot( b, f - vec2(1.0,0.0) ), u.x),\n                mix( dot( c, f - vec2(0.0,1.0) ), \n                     dot( d, f - vec2(1) ), u.x), u.y);\n    nse = abs(nse);\n    return nse;\n}\n\n\n\nfloat octnse(vec2 p, int oct){\n    float a = 1.;\n    float n = 0.;\n    \n    for(int i = 0; i < oct; i++){\n        n += ridges(p) * a;\t\t\n        \n        p*=2.;\n        a *= .5;\n    }\n    \n    return n;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}