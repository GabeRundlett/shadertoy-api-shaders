{
    "Shader": {
        "info": {
            "date": "1589795161",
            "description": "Dynamic version of Escher's \"Waterval\" - a source of perpetual energy.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sBfDR",
            "likes": 36,
            "name": "Water Falling",
            "published": 3,
            "tags": [
                "illusion",
                "escher",
                "penrose",
                "paradox"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 724
        },
        "renderpass": [
            {
                "code": "// \"Water Falling\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Started from the simplified image in NuSan's \"Waterfall\" and borrowed the main \n  geometrical features; new version includes motion, color and transparency, and\n  other visual changes (cf. original).\n  \n  Use the mouse to see how the scene is built; however, there is only one correct\n  view; note the parallel projection, and the shifting / duplication / truncation\n  of certain elements. Click in corners for alternative images.\n*/\n\n#define AA  0    // optional antialiasing (slow)\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrRoundFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h, float rc);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 qHit, sunDir, vuDir, vuPln;\nfloat dstFar, tCur, flDir;\nbool isMono, isPoly;\nint idObj;\nconst int idWChan = 1, idWWhl = 2, idMBldg = 3, idRBldg = 4, idFBldg = 5, idLBldg = 6,\n   idStair = 7, idFenc = 8, idUBldg = 9, idUBldgX = 10, idRoof = 11, idPilr = 12,\n   idPlat = 13, idTop = 14, idArch = 15, idWater = 16;\nfloat pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat UBldgDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, rc, rs;\n  rs = sin (4. * pi * p.x);\n  q = p - vec3 (-8., 3., -3.);\n  d = PrBoxDf (q, vec3 (5., 8., 3.));\n  d = max (d, - PrBoxDf (q - vec3 (-5.4, 2.2, -1.8), vec3 (1., 1.5, 0.7)));\n  d = max (d, - PrBoxDf (q - vec3 (-5.5, 2.8, 1.), vec3 (1., 0.8, 1.2)));\n  d = max (d, - PrBoxDf (q - vec3 (-3., 5.3, -3.5), vec3 (1.2, 0.5, 1.)));\n  q.z = - abs (q.z);\n  rc = dot (vec2 (q.y - 8. - 0.02 * rs, q.z), vec2 (-0.4, 0.2));\n  d = max (d, - rc);\n  DMINQ (idUBldg);\n  d = max (abs (rc) - 0.04, PrBox2Df (q.xz, vec2 (5.5, 3.5)));\n  DMINQ (idRoof);\n  q = p - vec3 (-12., 11.7, -4.3);\n  d = 0.7 * PrBoxDf (q, vec3 (vec2 (0.6 - 0.15 * smoothstep (-0.2, 0.2, q.y)), 1.5).xzy);\n  DMINQ (idUBldgX);\n  q.z = - abs (q.z);\n  d = max (abs (dot (vec2 (q.y - 1.95 - 0.02 * rs, q.z), vec2 (-0.7, 0.7))) - 0.04,\n     PrBox2Df (q.xz, vec2 (0.7)));\n  DMINQ (idRoof);\n  return dMin;\n}\n\nfloat SpltBldgDf (vec3 p, float zHi, float dMin)\n{\n  vec3 q;\n  vec2 s1, s2, b1, b2;\n  float d;\n  s1 = vec2 (-9., -6.);\n  s2 = vec2 (-13.5, -4.);\n  b1 = vec2 (5.5, 8.5);\n  b2 = vec2 (3., 6.5);\n  q = p;\n  d = min (PrBoxDf (q - vec3 (s1, -0.5).xzy, vec3 (b1, 4.2).xzy),\n     PrBoxDf (q - vec3 (s2, 2.8).xzy, vec3 (b2, 0.9).xzy));\n  d = max (d, - PrFlatCylDf ((q - vec3 (-6.7, -1.5, -13.3)).yxz, 2., 1.7, 2.));\n  q.x -= -16.5;\n  d = max (d, - min (PrBox2Df (q.xy, vec2 (2., 3.3 - 0.8 * q.x)),\n     max (PrBox2Df (q.xy, vec2 (2., 3.4)), 0.2 - abs (mod (q.z + 1., 2.) - 1.))));\n  d = max (d, zHi);\n  DMINQ (idMBldg);\n  q = p - vec3 (-19.5, -5., -4.);\n  d = min (d, max (PrBoxDf (q, vec3 (5., 4., 5.)),\n     - PrBoxDf (q - vec3 (0., 4.2, 0.), vec3 (4.5, 0.8, 4.5))));\n  q.y -= 3.1;\n  q.xz = abs (q.xz) - 2.1;\n  d = min (d, PrRoundBoxDf (q, vec3 (0.8, 0., 0.8), 1.));\n  d = max (d, zHi);\n  DMIN (idLBldg);\n  q = p;\n  d = min (PrCylDf (vec3 (mod (q.xz + 0.5, 1.) - 0.5, q.y - 4.5), 0.14, 0.8),\n     max (abs (mod (q.y - 0.55, 0.7) - 0.35) - 0.05, abs (q.y - 4.7) - 0.8));\n  d = max (d, abs (min (PrBox2Df (q.xz - s1, b1 - 0.5),\n     PrBox2Df (q.xz - s2, b2 - 0.5))) - 0.15);\n  d = max (d, - PrBox2Df (q.xz - vec2 (-2., -10.), vec2 (4., 1.4)));\n  d = max (d, zHi);\n  DMIN (idFenc);\n  return dMin;\n}\n\nfloat StairDf (vec3 p, float st, float w, float h)\n{\n  return 0.7 * max ((st + p.y - p.z - abs (mod (p.y + p.z, 2. * st) - st) / sqrt(2.)),\n     max (abs (p.x) - w, max (abs (p.y) - h, abs (p.z) - h)));\n}\n\nfloat FBldgDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p - vec3 (3.4, 0.5, -15.);\n  d = max (PrBoxDf (q, vec3 (3.4, 3.2, 4.)),\n     - PrBoxDf (q - vec3 (0., 4.7, 0.), vec3 (2.9, 2., 3.5)));\n  d = min (d, PrRoundBoxDf (q - vec3 (0., 2.4, 0.), vec3 (0.9, 0., 1.5), 1.));\n  d = max (d, - PrBoxDf (q - vec3 (-3.4, 1.3, -1.6), vec3 (0.5, 0.7, 0.5)));\n  d = max (d, - PrFlatCylDf ((q - vec3 (-2., -0.8, 2.2)).yzx, 1.7, 1., 2.));\n  DMIN (idRBldg);\n  q = p - vec3 (3., 0.7, -22.);\n  d = max (PrBoxDf (q, vec3 (3.5, 6.2, 3.5)),\n     - PrBoxDf (q - vec3 (0., 7.2, 0.), vec3 (3, 1.5, 3)));\n  d = max (d, - PrBoxDf (q - vec3 (-3.4, 3.8, 0.5), vec3 (0.5, 1., 1.)));\n  DMIN (idRBldg);\n  q = p - vec3 (-10., -5., -26.);\n  d = max (PrBoxDf (q, vec3 (20., 4., 15.)),\n     - min (PrBoxDf (q - vec3 (-4., 5.5, 10.5), vec3 (10., 2.5, 4.)),\n     PrBoxDf (q - vec3 (1.5, 6., -3.), vec3 (7., 5., 9.))));\n  DMIN (idFBldg);\n  q = p - vec3 (-2.5, -2.6, -22.2);\n  d = min (StairDf (q, 0.35, 0.8, 2.), StairDf (q - vec3 (-2., 1.3, 7.), 0.35, 0.4, 2.));\n  DMIN (idStair);\n  return dMin;\n}\n\nfloat IcoDodDf (vec3 p, float typ)\n{\n  vec3 q, dv, vc;\n  float cp, sp, scl;\n  scl = 1.2;\n  p /= scl;\n  cp = cos (pi / 5.);\n  sp = sqrt (0.75 - cp * cp);\n  vc = vec3 (-0.5, - cp, sp);\n  for (int j = 0; j < 5; j ++) {\n    p.xy = abs (p.xy);\n    p -= 2. * min (0., dot (p, vc)) * vc;\n  }\n  q = p - ((typ < 0.) ? normalize (vec3 (sp, 0., 0.5)) : normalize (vec3 (0., sp, cp)));\n  dv = vec3 (length (q - min (0., q.x) * vec3 (1., 0., 0.)), \n     length (q - min (0., q.y) * vec3 (0., 1., 0.)),\n     length (q - min (0., dot (q, vc)) * vc));\n  return scl * (Minv3 (dv) - 0.15);\n}\n\nfloat WatChanDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  vec2 b;\n  float d, dw, s;\n  b = vec2 (-5.);\n  q = p - vec3 (0., 3., -10.);\n  qq = q;\n  for (float j = 0.; j <= 3.; j ++) {\n    if (j > 0.) qq.xz = b + qq.zx ;\n    q = vec3 (abs (vec2 (abs (qq.x) - 5., qq.z)) - 1., qq.y - 1.).xzy;\n    d = max (PrBoxDf (q, vec3 (0.2, 5., 0.2)), dot (qq, vuPln) - 1.);\n    DMINQ (idPilr);\n  }\n  dw = min (PrBoxDf (p - vec3 (-7.5, 4., -9.9), vec3 (2.9, 0.3, 1.1)),\n     PrBoxDf (qq - vec3 (5., 0.23, -2.), vec3 (0.82, 0.3, 1.9)));\n  s = - qq.x;\n  q = vec3 (abs (vec2 (abs (qq.x) - 5., qq.z)) - 1., qq.y).xzy;\n  d = PrBoxDf (q, vec3 (0.2, 5., 0.2));\n  DMINQ (idPilr);\n  qq.x = - qq.x;\n  qq.xz = vec2 (15., 0.) - qq.xz;\n  qq.xz = mix (qq.xz, qq.zx, step (qq.x, qq.z));\n  qq.xy -= vec2 (10., 1.);\n  qq.xz = mix (qq.xz, qq.zx, step (qq.x, qq.z));\n  qq.x = - qq.x;\n  dw = min (dw, PrBoxDf (qq, vec3 (10.8, max (0., 0.95 - 0.03 * s), 0.65)));\n  q = p - vec3 (0., 3., -10.);\n  d = max (PrBoxDf (q - vec3 (-7.4, 0.95, 0.1), vec3 (3.5, 0.25, 1.7)), - dw);\n  DMINQ (idWChan);\n  for (float j = 0.; j <= 3.; j ++) {\n    if (j > 0.) q.xz = b + q.zx;\n    s = 0.1 * step (1., q.x);\n    d = max (PrBoxDf (q - vec3 (0., - s, 0.), vec3 (6., 1.2 - 0.2 * j - s, 1.)), - dw);\n    DMINQ (idWChan);\n  }\n  d = max (PrBoxDf (q - vec3 (5., -0.15, -2.2), vec3 (1., 0.4, 1.2)), - dw);\n  DMINQ (idWChan);\n  s = sign (q.x);\n  q.x = abs (q.x) - 5.;\n  d = isPoly ? IcoDodDf (q - vec3 (0., 6.4, 0.), s) : PrSphDf (q - vec3 (0., 6.2, 0.), 1.);\n  DMIN (idTop);\n  d = PrBoxDf (q - vec3 (0., 5.1, 0.), vec3 (1.5, 0.1, 1.5));\n  DMIN (idPlat);\n  d = 6. - abs (q.y);\n  q.y = mod (q.y - 2.1, 5.6) - 1.7;\n  d = max (max (PrBoxDf (q - vec3 (0., 0.5, 0.), vec3 (1.15, 0.7, 1.15)),\n     0.85 - min (length (q.xy), length (q.zy))), - d);\n  q = p - vec3 (5., 1., 0.);\n  d = min (d, max (PrBoxDf (q - vec3 (0., 0.5, 0.), vec3 (1.15, 0.7, 1.15)),\n     0.85 - min (length (q.xy), length (q.zy))));\n  DMIN (idArch);\n  return dMin;\n}\n\nfloat WWheelDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p - vec3 (-7.8, 5.2, -6.2);\n  d = PrCylDf (q, 1., 0.2);\n  DMIN (idUBldgX);\n  q.z -= -2.3;\n  d = PrCylDf (q, 0.5, 2.2);\n  q.z -= -1.5;\n  d = min (d, PrCylAnDf (q, 1.1, 0.15, 0.7));\n  DMIN (idWWhl);\n  q.xy = Rot2D (q.xy, -0.8 * tCur * flDir);\n  q.xy = Rot2D (q.xy, 2. * pi * floor (14. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 14.);\n  q.x -= -1.3;\n  d = PrBoxDf (q, vec3 (0.7, 0.07, 0.6));\n  DMIN (idWWhl);\n  return dMin;\n}\n\nfloat WatSurfDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 b;\n  float d;\n  b = vec2 (-5.);\n  q = p - vec3 (0., 3., -10.);\n  d = PrBoxDf (q - vec3 (-7.5 , 0.1, 0.1), vec3 (3., 0.8, 1.1));\n  DMINQ (idWater);\n  for (int j = 0; j <= 3; j ++) {\n    if (j > 0) q.xz = b + q.zx;\n    d = PrBoxDf (q, vec3 (6., 0.8 - 0.2 * float (j) - 0.02 * q.x, 0.75));\n    DMINQ (idWater);\n  }\n  q.xz = - q.zx;\n  q -= vec3 (2.1, -0.05, -5.);\n  d = max (PrBoxDf (q, vec3 (1.3, 0.15, 0.75)), q.x + 4. * q.y - 1.5);\n  DMINQ (idWater);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = UBldgDf (p - vuDir * 35., dMin);\n  dMin = SpltBldgDf (p - vuDir * 35., p.z - 99., dMin);\n  dMin = SpltBldgDf (p, p.z + 8.7, dMin);  \n  dMin = FBldgDf (p, dMin);\n  dMin = WWheelDf (p, dMin);\n  dMin = WatChanDf (p, dMin);\n  dMin = WatSurfDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.002, -0.002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  q = p - vec3 (-8., 7.6, -9.8);\n  return max (PrRoundFlatCylAnDf (q.yxz, 5.6, 1.5, 0.1, 0.5, 0.1),  q.x - 0.1);\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.002, -0.002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat BCylHit (vec3 ro, vec3 rd, float rad)\n{\n  float a, b;\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  return (- b + sqrt (b * b - a * (dot (ro.xz, ro.xz) - rad * rad))) / a;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colW, roo, vn, q;\n  vec2 vf, c;\n  float dstObj, dstFWat, sh, a, s, spec;\n  dstObj = ObjRay (ro, rd);\n  roo = ro;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    spec = 0.1;\n    if (idObj <= idRBldg) {\n      if (idObj == idWChan) col = mix (vec3 (0.9, 0.4, 0.2), vec3 (0.7, 0.3, 0.4),\n         step (qHit.y, -0.4)) * (1. - 0.3 * step (0.95, sin (8. * pi * qHit.y)));\n      else if (idObj == idWWhl) col = vec3 (0.8, 0.5, 0.1);\n      else if (idObj == idMBldg) col = (qHit.y > 3.69) ? vec3 (0.7, 0.7, 0.8) : \n         ((qHit.y < 3.35 && qHit.x < 1.9) ? vec3 (0.8, 0.7, 0.5) : vec3 (0.6, 1., 1.));\n      else /*if (idObj == idRBldg)*/ col = vec3 (0.7, 0.5, 0.3);\n    } else if (idObj <= idFenc) {\n      if (idObj == idFBldg) col = vec3 (0.75, 0.45, 0.3);\n      else if (idObj == idLBldg) col = vec3 (0.7, 0.5, 0.35);\n      else if (idObj == idStair) col = (vn.x > -0.01) ? vec3 (0.8, 0.8, 0.5) :\n         vec3 (0.75, 0.45, 0.3);\n      else /*if (idObj == idFenc)*/ col = vec3 (1., 0.9, 0.4);\n    } else if (idObj <= idPilr) {\n      if (idObj == idUBldg) col = (max (abs (qHit.x) - 4.7, abs (qHit.z) - 2.7) < 0.) ?\n         vec3 (0.2, 0.5, 0.3) : vec3 (0.9, 0.8, 0.5);\n      else if (idObj == idUBldgX) col = vec3 (0.9, 0.8, 0.5);\n      else if (idObj == idRoof) col = vec3 (0.8, 0.1, 0.2) * (1. - 0.2 * step (0.5,\n         sin (16. * pi * qHit.y)));\n      else /*if (idObj == idPilr)*/ col = vec3 (0.9, 0.8, 0.7) * (1. -\n         0.1 * step (0.7, sin (4. * pi * qHit.y)));\n    } else /*if (idObj <= idWater)*/ {\n      if (idObj == idPlat) col = vec3 (0.7, 0.6, 0.5);\n      else if (idObj == idTop) col = vec3 (0.5, 0.6, 1.);\n      else if (idObj == idArch) {\n        c = (1. - 0.2 * step (0.8, cos (4. * pi * qHit.xz)));\n        col = vec3 (0.9, 0.8, 0.7) * c.x * c.y;\n      } else /*if (idObj == idWater)*/ {\n        q = qHit;\n        s = 1. - smoothstep (0., 2., abs (q.x) - 3.);\n        q.x -= tCur * flDir;\n        col = vec3 (0.7, 0.8, 1.) * (0.96 - 0.04 * s * sin (2. * pi * q.x));\n      }\n    }\n    if (idObj != idWWhl && idObj != idFenc) {\n      if (idObj == idWater) {\n        vf = vec2 (0.);\n        if (vn.y > 0.5) {\n          vf = vec2 (4., 2.);\n          spec = 0.2;\n        }\n      } else {\n        vf = vec2 (16., 0.5);\n        q = ro;\n      }\n      if (vf.x > 0.) vn = VaryNf (vf.x * q, vn, vf.y);\n    }\n    sh = (idObj != idPilr && idObj != idWater) ? ObjSShadow (ro, sunDir) : 1.;\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       spec * step (0.95, sh) * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else {\n    ro += BCylHit (ro + vec3 (-20., 0., 10.), rd, 100.) * rd;\n    a = (atan (ro.z, - ro.x) + 0.3 * floor (0.5 * ro.y)) / (2. * pi);\n    col = (1. + 0.2 * ro.y / 100.) * mix (vec3 (0.3, 0.5, 0.2) * (1. -\n       0.1 * smoothstep (0.25, 0.3, mod (360. * a + 0.5, 1.) - 0.5)), vec3 (0.4, 0.6, 0.3) *\n       (1. - 0.1 * Noisefv2 (256. * vec2 (4. * a, ro.y))), step (0.65, mod (0.5 * ro.y, 1.)));\n  }\n  ro = roo;\n  dstFWat = TrObjRay (ro, rd);\n  if (dstFWat < min (dstObj, dstFar)) {\n    ro += dstFWat * rd;\n    vn = TrObjNf (ro);\n    q = ro;\n    q.y += 2. * tCur * flDir;\n    vn = VaryNf (8. * q, vn, 4.);\n    colW = mix (vec3 (0.8, 0.9, 1.), 0.9 * vec3 (0.7, 0.8, 1.),\n       smoothstep (0., 1., ro.y - 13.5)) * (0.6 + 0.4 * max (dot (vn, sunDir), 0.)) +\n       0.2 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    col = mix (col, colW, sqrt (Maxv3 (colW)) * (1. - 0.3 * step (0., sin (16. * pi * ro.z)) *\n       (1. - 0.4 * step (0., sin (2. * pi * q.y)))));\n  }\n  if (isMono) col = vec3 (1., 0.7, 0.3) * Maxv3 (col);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col, vx, vy;\n  vec2 canvas, uv, ut, uvv;\n  float el, az, zmFac, asp, sr;\n  bool inCorn, flipVu;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  flDir = 1.;\n  isMono = false;\n  flipVu = false;\n  isPoly = false;\n  ut = vec2 (abs (mPtr.x), abs (mPtr.y)) + 0.05 * vec2 (1. / asp, 1.) - 0.5;\n  inCorn = (mPtr.z > 0. && min (ut.x, ut.y) > 0.);\n  if (inCorn) {\n    if (mPtr.x > 0. && mPtr.y > 0.) isPoly = true;\n    if (mPtr.x > 0. && mPtr.y < 0.) flDir = -1.;\n    if (mPtr.x < 0. && mPtr.y > 0.) flipVu = true;\n    if (mPtr.x < 0. && mPtr.y < 0.) isMono = true;\n  }\n  az = 0.2501 * pi;\n  el = -0.143 * pi;\n  if (mPtr.z > 0. && ! inCorn) {\n    az += 2. * pi * smoothstep (0.05, 0.2, abs (mPtr.x)) * mPtr.x;\n    el += 0.5 * pi * smoothstep (0.05, 0.2, abs (mPtr.y)) * mPtr.y;\n  }\n  ro = vec3 (0., 0., -70.);\n  ro.yz = Rot2D (ro.yz, - el);\n  ro.xz = Rot2D (ro.xz, - az);\n  rd = normalize (vec3 (0., 4., 0.) - ro);\n  vuDir = rd;\n  vx = normalize (vec3 (vuDir.z, 0., - vuDir.x));\n  if (flipVu) vx *= -1.;\n  vy = vec3 (0., 1., 0.) - vuDir.y * vuDir;\n  vuPln = vy;\n  zmFac = 0.065;\n  dstFar = 200.;\n  sunDir = normalize (vec3 (-2., 3., -1.));\n  if (max (abs (uv.x), abs (uv.y)) < 0.97) {\n#if ! AA\n    const float naa = 1.;\n#else\n    const float naa = 3.;\n#endif  \n    col = vec3 (0.);\n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = float (VAR_ZERO); a < naa; a ++) {\n      uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi);\n      col += (1. / naa) * ShowScene (ro + vec3 (uvv.x * vx + uvv.y * vy) / zmFac, rd);\n    }\n  } else if (abs (uv.x) < 1.) {\n    col = vec3 (0.2, 0.4, 0.6);\n  } else {\n    col = vec3 (0.75);\n  }\n  if (mPtr.z > 0. && min (abs (uv.x) - asp, abs (uv.y) - 1.) > -0.1)\n     col = mix (col, vec3 (1., 1., 0.), 0.3);\n  fragColor = vec4 (col, 1);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrRoundFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h, float rc)\n{\n  vec2 q;\n  q = abs (vec2 (length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo, p.z)) - vec2 (w, h);\n  return length (vec2 (max (q, 0.))) - rc;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}