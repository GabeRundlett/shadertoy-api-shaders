{
    "Shader": {
        "info": {
            "date": "1571483315",
            "description": "let follows the trajectory of N*N balls starting from the same location.\n\nvariant: delete normalize for varying speed.  Or try vec2(iMouse.xy/R)  instead of vec(.5).\n[ wow, twice faster *with* the normalize ! same for with/without - float(N-1)/2.  WTF ? ]",
            "flags": 0,
            "hasliked": 0,
            "id": "wstXz8",
            "likes": 2,
            "name": "probabilist rect. billiard ",
            "published": 3,
            "tags": [
                "simulation",
                "random",
                "billiard"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "#define N 17\n\n#define shash(p) ( 2.* fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) - 1. )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, \n          U = u / R.y,\n          S = R / R.y, P, K;\n    \n    float t = (R.y<250.) ? iTime - 9. : iTime,\n        l = 1e9;\n    for ( int k=0; k < N*N; k++) {\n        K = shash( vec2(k%N,k/N) - float(N-1)/2. );\n     // P = vec2(.5+ .1*K) + t*vec2(1);          // random start position\n        P = vec2(.5) + t * normalize(K);         // random start direction\n        P = mod( P/S, 2.); P = min( P, 2.-P )*S; // wrap virtual P(t) in recursive border \"mirrors\"\n\n        l = min(l, dot(P-=U,P));                 // min distance\n    }\n    \n    O = vec4( smoothstep( 2./R.y,0., sqrt(l) )); // draw dot\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}