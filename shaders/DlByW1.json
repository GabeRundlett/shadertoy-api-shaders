{
    "Shader": {
        "info": {
            "date": "1692985306",
            "description": "Evolution of my old shader, that on right top, but we in 2023 now.\n\n\n[b]P.S. Fabrice please dont waste your time on this my horrible code... [/b]",
            "flags": 0,
            "hasliked": 0,
            "id": "DlByW1",
            "likes": 32,
            "name": "Screensaver 2023",
            "published": 3,
            "tags": [
                "2d",
                "animation",
                "console"
            ],
            "usePreview": 0,
            "username": "morimea",
            "viewed": 750
        },
        "renderpass": [
            {
                "code": "\n// Created by Danil (2023+) https://cohost.org/arugl\n\n// License - CC0 or use as you wish\n\n// self https://www.shadertoy.com/view/DlByW1\n\n\n#define iTime (iTime+78.)\n\n\n// using FabriceNeyret2 runes (simplified version) \n// https://www.shadertoy.com/view/4ltyDM\n\n//--------------------------------------\n\n// --- glyphs simplified from \"runes\" by otaviogood. \n// https://shadertoy.com/view/MsXSRn - original is CC0\n\nfloat line(vec2 p, vec2 a,vec2 b) {\n    p -= a, b -= a;\n\tfloat h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n\treturn length(p - b * h);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Rune(vec2 U, vec2 seed, float px)\n{\n\tfloat d = 1e5;\n    float h = hash12(seed.xy*33.);\n    int rn = int(h*h*h*6.);\n    for (int i = 0; i < 1+rn; i++)\n    {\n        vec4 pos = vec4(hash22(seed).xy,hash22(seed+1.).xy );\n        seed += 2.;\n        pos = fract(pos * 128.);\n        if (i == 0) pos.y = .0;\n        if (i == 1) pos.x = .999;\n        if (i == 2) pos.x = .0;\n        if (i == 3) pos.y = .999;\n        vec4 snaps = vec4(2, 3, 2, 3);\n        pos = ( floor(pos * snaps) + .5) / snaps;\t\n        d = min(d, line(U, pos.xy, pos.zw + .001) );\n    }\n\treturn 1.-smoothstep(40./360.-px,40./360.,d);\n}\n//--------------------------------------\n\n\n\n\n\n\n\n// right top\n\n//--------------------------------------\n// from my old shader https://www.shadertoy.com/view/4lKyDd\n// updated Fabrice version\n\nvoid mainImage_rt(out vec4 O,vec2 u){\n    O=vec4(0.);\n    vec2 T =  1./vec2(62.5,31.),\n         R = iResolution.xy,\n         U = (u -.5*R) / R.y,\n         p = mod( U-T/2., T) - T/2.,\n         r = R / R.y, c=r/T;\n    float t = iTime*4.+14.;\n    int x = int(c),\n        i = int( t*8. + 3.5*( cos(t/1.5) - cos(t) ) ) % ( x*int(c.y) );\n    r = vec2( i%x, i/x ) - ceil( (r/2. + vec2(U.x,-U.y) ) / T );\n    r.y>0. || r.y==0. && r.x>0.\n       ? O += 1. - ( .98 < fract(1e4*sin(dot(ceil(U/T-.5),vec2(591,154))))\n                        ? p = abs(p), max( max(p.x,p.y)-.0051, min(p.x,p.y) )\n                        : length(p+T*vec2(0.,.25)) - .001\n                   ) / .003\n       : O;\n}\n//--------------------------------------\n\n\n\n\n\n// left bot\n\n//--------------------------------------\n\nvoid mainImage_lb( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 res=iResolution.xy/iResolution.y;\n    vec2 uv=fragCoord/iResolution.y-0.5*res;\n    \n    float px = 1.5/iResolution.y;\n    vec4 c=vec4(0.);\n    \n    float sc = 25.;\n    vec2 tuv = (uv+res*0.5)*sc;\n    vec2 lid = floor(tuv);\n    vec2 alid = floor(res*sc);\n    vec2 olid = lid;\n    tuv = fract(tuv)-0.5;\n    \n    float t = iTime*0.1+22.51;\n    float x = step(tuv.y+0.35,0.)*step(0.,abs(tuv.x+0.5)-0.15);\n    x*=step(fract(t*9.85+(lid.x-lid.y+alid.y*2.)*0.33),(olid.y<0.5?0.65:0.25)-0.15*sin(lid.x*5.35));\n    float ttl = t + .4*(cos(t/1.5) - cos(t));\n    lid.y=-lid.y+2.*alid.y;\n    lid.y+=floor(ttl);\n    ttl = fract(ttl);\n    float s = 0.;\n    float r = smoothstep(0.,px*sc,length(tuv)-0.35);\n    float vid = mod(lid.y,12.);\n    if(vid>0.5){\n        vec2 lp = tuv;\n        s = 1.-max(smoothstep(0.,px*sc,min(abs(lp.y)*1.75, abs(-abs(lp.y)+abs(lp.x*1.5)))-0.065),r);\n        bool ra = cos(lid.x*0.15)>-0.75;\n        bool rb = !ra&&cos(lid.x*1.5)>-0.95&&floor(mod(lid.y,4.))!=0.;\n        bool rc = ra&&cos(lid.x*0.22)<-0.05&&cos(lid.x*4.80)>-0.0&&sin(lid.y*0.57+lid.x*0.33)<-0.05;\n        float h = hash12(lid.xy*33.);\n        ra=ra&&(vid>=mod(lid.x+1.,15.)*4.||mod(lid.x-15.,30.)>4.)&&floor(mod(lid.y,4.))==1.+floor(mod(lid.y,12.)/4.);\n        vec2 tid = lid;\n        if(rb){\n            tid.y = floor(mod(tid.y/1.65,3.))+10.*floor((tid.y/3.));\n            bool rb1 = cos(lid.x*1.5)>0.75;\n            if(rb1){\n                tid.y += 33.*(1.-abs(sign(floor(mod(lid.y,4.))-2.)));\n            }\n        }\n        bool rg = ra||rb||rc;\n        s = (lid.x>1.&&lid.x<13.)?s*step(lid.x-1.,vid):((lid.x>0.&&lid.x<14.)?\n            (1.-r)*step(abs(lp.x)-0.065,0.)+step(sign(lid.x-5.)*lp.x-0.065,0.)*step(abs(lp.x)-0.065*3.,0.)*step(abs(abs(lp.y)-0.5+0.065*2.)-0.065,0.):\n            (rg?Rune(lp+0.5, tid, 1./200.*sc):0.));\n        if(olid.y==1.&&lid.x>13.&&rg){float tdx=(alid.x+13.)*smoothstep(0.,.8,ttl);s=mix(x*(step(olid.x-3.,max(13.,tdx))),s,step(olid.x,tdx));}\n        else if(olid.y==0.){float tx=floor(14.*smoothstep(.4+0.15*sin(lid.y*2.33),.6,ttl*ttl));s=lid.x==tx?x:(lid.x<14.?s*step(lid.x,tx):0.);}\n    }else{\n        s = 1.-max(smoothstep(0.,px*sc,abs(abs(tuv.y)+tuv.x)-0.065),r);\n        if(olid.y<0.5)s*=step(0.55,ttl);\n        vec2 tid = lid;\n        tid.y=tid.y*step((sin(tid.x*0.15)+2.*cos(tid.x*0.75)),0.);\n        bool ra = step(tid.x,8.)>0.5;\n        bool rb = step(10.,tid.x)*step(tid.x,12.+mod(lid.y,7.))>0.5;\n        bool rg = ra||rb;\n        s=lid.x>0.5?(rg?Rune(tuv+0.5, tid, 1./200.*sc):0.):s;\n        if(olid.y<0.5){float ttl=rg||ttl<0.65?smoothstep(.3,.65,ttl*ttl):((alid.x-2.)/alid.x);float ts=step(olid.x,alid.x*ttl);s=(s*ts+step(0.01,ttl)*x*(1.-ts)*step(olid.x-1.,alid.x*ttl));}\n    }\n    s*=step(72.,lid.y);\n    c=vec4(clamp(s,0.,0.88));\n    \n    fragColor = vec4(c.rgb,1.0);\n}\n//--------------------------------------\n\n\n\n\n//left top\n\n//--------------------------------------\n// Rune reused from above\n\nvoid mainImage_lt( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 res=iResolution.xy/iResolution.y;\n    vec2 uv=fragCoord/iResolution.y-0.5*res;\n    \n    float px = 1.5/iResolution.y;\n    vec4 c=vec4(0.);\n    \n    float sc = 25.;\n    vec2 tuv = (uv+res*0.5)*sc;\n    vec2 lid = floor(tuv);\n    vec2 alid = floor(res*sc);\n    vec2 olid = lid;\n    tuv = fract(tuv)-0.5;\n    \n    float s = 0.;\n    float r = smoothstep(0.,px*sc,length(tuv)-0.35);\n    \n    float t = iTime*0.075+0.005;\n    float x = step(tuv.y+0.35,0.)*step(0.,abs(tuv.x+0.5)-0.15);\n    float l = step(abs(tuv.x)-0.075,0.)*(1.-r);\n    x*=step(fract(t*17.85+(lid.x-lid.y+alid.y*2.)*0.33),(olid.y<0.5?0.65:0.25)-0.15*sin(lid.x*5.35));\n    \n    float ttl = t + .4*(cos(t/1.5) - cos(t));\n    lid.y=-lid.y+2.*alid.y;\n    lid.y+=25.+26.*floor(ttl/5.);\n    ttl = fract(ttl/5.);\n    \n    vec2 lp = tuv;\n    float ra = step(lid.x,0.)*step(25.,mod(lid.y,26.));\n    s = ra*(1.-max(smoothstep(0.,px*sc,abs(abs(lp.y)+lp.x)-0.065),r));\n    float a = cos(lid.x*2.25+lid.y*11.33);\n    float b = sin((lid.x*.025+16.*sin(lid.y*.33)));\n    float rb = (1.-ra)*step(0.5,0.5+(0.5*a+0.5*b)+b*3.*sin(lid.y*.33));\n    b = sin(lid.x*.25+0.6);\n    ra=(1.-ra)*step(0.5,0.5+0.5*a+0.6*b)*step(lid.x,18.)*step(25.,mod(lid.y,26.));\n    \n    float rc=step(mod(lid.y,26.),4.)*(1.-step(4.,mod(lid.y,26.))*step(9./alid.x,abs(lid.x/alid.x-0.5)));\n    rb*=(1.-rc)*step(mod(lid.y,26.),17.);\n    \n    rc*=step(abs(lid.x/alid.x-0.5),7./alid.x);\n    \n    float rd = (1.-rc)*step(abs(lid.x/alid.x-0.5),8./alid.x)*step(mod(lid.y,26.),4.);\n    rc*=1.-step(abs(lid.x-alid.x*0.5)-2.*abs(mod(lid.y+6.,26.)-8.),0.);\n    \n    vec2 tid = lid;\n    \n    lp.x=mix(lp.x,-lp.x,step(tid.x-alid.x*0.5,0.));\n    tid=mix(tid,vec2(abs(tid.x-alid.x*0.5),floor(tid.y/6.)),rc);\n    s += mix(Rune(lp+0.5, tid, 1./200.*sc)*(rb+ra+rc),l,rd);\n    \n    \n    ra = step(lid.x,2.);\n    rb = (1.-ra)*step(lid.x,3.)+step(lid.x,25.)*step(25.,lid.x);\n    rc = step(26.,lid.x);\n    rd = (1.-step(mod(lid.y,26.),17.))*step(mod(lid.y,26.),24.);\n\n    float trb = rb;\n    float trd = rd;\n    float tra = ra;\n    float xs = step(abs(lp.x),0.45)*step(abs(lp.y),0.45)*(1.-(step(lid.x,3.)+step(25.,lid.x)));\n    \n    ra = step(0.03,ttl);\n    float tlp = 0.4*smoothstep(0.3,0.35,ttl)+0.3*smoothstep(0.05,0.056,ttl)+0.2*smoothstep(0.1,0.13,ttl)+0.1*smoothstep(0.2,0.27,ttl);\n    float tlx = smoothstep(0.37,0.995,ttl);\n    s*=step(mod(lid.y+1.,26.),floor(tlp*18.));\n    \n    rb = step(ttl,0.03);\n    rc = step(mod(lid.y,26.),23.);\n    s*=max(rc,step(lid.x,floor(smoothstep(0.,0.03,ttl)*16.)));\n    s+=(1.-rc)*rb*x*step(lid.x-1.,floor(smoothstep(0.,0.03,ttl)*16.))*step(floor(smoothstep(0.,0.03,ttl)*16.),lid.x-1.);\n    \n    rd = step(mod(lid.y+1.,26.),floor(tlp*18.)+floor(tlx*6.));\n    rc = step(mod(lid.y+2.,26.),floor(tlp*18.)+floor(tlx*6.));\n    \n    tid = lid;\n    tid.y = mix(tid.y,mix(min(4.,floor(fract(tlx*6.)*11.))/4.,1.,rc),tra);\n    float os = mix(Rune(lp+0.5, tid, 1./200.*sc)*(tra+step(27.,lid.x)*step(-0.5,sin(lid.x*1.25)))*trd,l*trd,trb);\n    s+=os*rd;\n    s+=xs*step(lid.x-3.,mix(fract(tlx*6.)*50.,50.,rc))*rd*step(19.,mod(lid.y+1.,26.));\n    s*=1.-step(mod(lid.y,26.),24.)*step(23.,mod(lid.y,26.));\n    s+=ra*x*step(lid.x,0.)*step(mod(lid.y,26.),floor(tlp*18.)+floor(tlx*6.))*step(floor(tlp*18.)+floor(tlx*6.),mod(lid.y,26.));\n    \n    c=vec4(clamp(s,0.,0.88));\n    \n    fragColor = vec4(c.rgb,1.0);\n}\n//--------------------------------------\n\n\n\n\n//right bot\n\n//--------------------------------------\n// Rune reused from above\n\n\nvoid mainImage_rb( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 res=iResolution.xy/iResolution.y;\n    vec2 uv=fragCoord/iResolution.y-0.5*res;\n    \n    float px = 1.5/iResolution.y;\n    vec4 c=vec4(0.);\n    \n    float sc = 25.;\n    vec2 tuv = (uv+res*0.5)*sc;\n    vec2 lid = floor(tuv);\n    vec2 alid = floor(res*sc);\n    vec2 olid = lid;\n    tuv = fract(tuv)-0.5;\n    \n    float s = 0.;\n    float r = smoothstep(0.,px*sc,length(tuv)-0.35);\n    \n    float t = iTime*0.24+22.51;\n    float x = step(tuv.y+0.35,0.)*step(0.,abs(tuv.x+0.5)-0.15);\n    x*=step(fract(t*4.85+(lid.x-lid.y+alid.y*2.)*0.33),(olid.y<0.5?0.65:0.25)-0.15*sin(lid.x*5.35));\n    float ttl = t + .4*(cos(t/1.5) - cos(t));\n    lid.y=-lid.y+2.*alid.y;\n    lid.y+=floor(ttl);\n    ttl = fract(ttl);\n    \n    float l = (1.-r)*step(abs(tuv.x)-0.065,0.)+step(sign(lid.x-1.)*tuv.x-0.065,0.)*step(abs(tuv.x)-0.065*3.,0.)*step(abs(abs(tuv.y)-0.5+0.065*2.)-0.065,0.);\n    \n    float ra = (step(lid.x,0.)+step(3.,lid.x)*step(lid.x,3.));\n    float rb = (step(1.,lid.x)*step(lid.x,3.));\n    float rc = step(1.,olid.y);\n    \n    s=l*ra;\n    \n    vec2 tid = lid;\n    tid.y = mix(tid.y,mod(tid.y*5.,20.),rb);\n    s+=Rune(tuv+0.5, tid, 1./200.*sc)*(1.-ra)*step((tid.x+30.*(0.5+0.5*sin(tid.y*2.33))),alid.x);\n    \n    s*=step(72.,lid.y)*rc*max(step(2.,olid.y),step(lid.x,3.+alid.x*step(0.015,ttl*ttl)));\n    s+=x*step(lid.x,0.)*(1.-rc);\n    \n    c=vec4(clamp(s,0.,0.88));\n    \n    fragColor = vec4(c.rgb,1.0);\n}\n\n\n//--------------------------------------\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 tid = ivec2(uv*2.);\n    \n    float m = 2.;\n    if(iMouse.z>0.){\n        m=1.;\n        tid = ivec2(iMouse.xy/iResolution.xy*2.);\n    }\n    \n    if(tid==ivec2(0,0)){mainImage_lb(fragColor, fract(uv*m)*iResolution.xy);}\n    \n    else{if(tid==ivec2(0,1)){mainImage_lt(fragColor, fract(uv*m)*iResolution.xy);}\n    else{if(tid==ivec2(1,0)){mainImage_rb(fragColor, fract(uv*m)*iResolution.xy);}\n    else mainImage_rt(fragColor, fract(uv*m)*iResolution.xy);}\n    }\n    \n    fragColor.a = 1.;\n    \n}\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}