{
    "Shader": {
        "info": {
            "date": "1547072928",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/361407647[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Wds3zf",
            "likes": 38,
            "name": "[twitch] Braid",
            "published": 3,
            "tags": [
                "twitch",
                "braid"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1106
        },
        "renderpass": [
            {
                "code": "/*\n\tThis shader was created live on stream!\n\tYou can watch the VOD here: https://www.twitch.tv/videos/361407647\n\t\n\tI use the Bonzomatic tool by Gargaj/Conspiracy:\n\thttps://github.com/Gargaj/Bonzomatic\n\n\tWednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\n\tCome and watch a show!\n\n\t~yx\n*/\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x*c - a.y*s,\n        a.x*s + a.y*c\n    );\n}\n\nfloat sdbox2d(vec2 p, float r)\n{\n    p=abs(p);\n    return max(p.x,p.y)-r;\n}\n\nvec2 boffset(vec2 p, float t)\n{\n    t*=pi*2.;\n    return rotate(p+vec2(\n        cos(t)*2.,\n        -sin(t*3.)\n    )*.15, sin(t)*(pi*2./3.));\n}\n\nfloat tick(float t)\n{\n    t = smoothstep(0.,1.,t);\n    t = smoothstep(0.,1.,t);\n    t = smoothstep(0.,1.,t);\n    t = smoothstep(0.,1.,t);\n    return t;\n}\n\nfloat pattern(float t)\n{\n    t=fract(t);\n    return clamp(abs(t-.5)*-16.+7.5,-1.,1.)+1.;\n    return tick(abs(t-.5)*2.);\n}\n\nfloat scene2(vec2 p, float angle)\n{\n    float time = ((angle/tau)/5.)*4.+iTime*.25;\n\n    float q = iTime+angle;\n\n    float r = .02 + pattern((angle/tau)*30.)*.02;\n\n    float a = sdbox2d(boffset(p,time),r);\n    float b = sdbox2d(boffset(p,time+1./5.),r);\n    float c = sdbox2d(boffset(p,time+2./5.),r);\n    float d = sdbox2d(boffset(p,time+3./5.),r);\n    float e = sdbox2d(boffset(p,time+4./5.),r);\n    return min(min(min(a,b),min(c,d)),e);\n}\n\nfloat scene(vec3 p)\n{\n    p.xz = mod(p.xz+8.,16.)-8.;\n\n    float angle = atan(p.x,p.z);\n\n    float q = .75;\n\n    p.y += (angle/tau)*(q+q);\n\n    p.y = mod(p.y+q,(q+q))-q;\n\n    vec2 a = vec2(length(p.xz)-1., p.y);\n\n    return scene2(a, angle);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    uv *= 1.+length(uv)*.3;\n\n    vec3 cam = vec3(0,0,-5);\n    vec3 dir = normalize(vec3(uv, 2.5));\n\n    cam.yz = rotate(cam.yz, pi/5.);\n    dir.yz = rotate(dir.yz, pi/5.);\n\n    cam.xz = rotate(cam.xz, pi/4.);\n    dir.xz = rotate(dir.xz, pi/4.);\n\n    cam.y += iTime;\n\n    float t =0.;\n    float k = 0.;\n    int iter=0;\n    for(int i=0;i<100;++i)\n    {\n        k = scene(cam+dir*t)*.7;\n        t+=k;\n        iter=i;\n        if (k < .001)break;\n    }\n    vec3 h = cam+dir*t;\n    vec2 o = vec2(.002,0);\n    vec3 n = normalize(vec3(\n        scene(h+o.xyy)-scene(h-o.xyy),\n        scene(h+o.yxy)-scene(h-o.yxy),\n        scene(h+o.yyx)-scene(h-o.yyx)\n    ));\n\n    if (k < .001)\n    {\n        float iterFog = 1.-float(iter)/100.;\n        iterFog = pow(iterFog, 3.);\n        float light = max(n.y,0.);\n        out_color.rgb += mix(vec3(.01,.01,.1), vec3(.1,.5,.5), iterFog);\n        out_color.rgb += mix(vec3(0.), vec3(sin(iTime),sin(iTime+2.),sin(iTime+4.))+1., light*iterFog);\n    }\n    else\n    {\n        out_color *= 0.;\n    }\n\n    out_color.rgb = mix(out_color.rgb, vec3(out_color.r+out_color.g+out_color.b)/3., .5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}