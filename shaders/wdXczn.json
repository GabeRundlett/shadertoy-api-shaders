{
    "Shader": {
        "info": {
            "date": "1583969847",
            "description": "theres some z fighting",
            "flags": 32,
            "hasliked": 0,
            "id": "wdXczn",
            "likes": 10,
            "name": "Day 83",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 1130
        },
        "renderpass": [
            {
                "code": "// theres some z fighting\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 60.;\n    float scale = 0.00 + pow(dot(uvn,uvn),1.8)*0.7;\n    float chromAb = dot(uvn,uvn)*5.;\n    vec2 offs = vec2(0) + texture(iChannel1, uv + iTime*4.).xz*0.;\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.99 ;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.x += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.y += texture(iChannel0, target).y;\n    \tradial.z += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    \n    \n    \n    radial /= steps;\n    \n    float ss = smoothstep(0.,1.,dot(uvn,uvn)*3.);\n    \n    fragColor = texture(iChannel0, uv)*0. + radial*1.4; \n    fragColor *= 0.23;\n    \n    fragColor = mix(fragColor, smoothstep(0.,1.,fragColor), 1.);\n    \n    \n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.);\n    //fragColor *= 1.;\n    //fragColor = pow(fragColor, vec4(0.45));\n\t\n    float duvuv = dot(uvn,uvn);\n    \n    //fragColor = pow(fragColor, vec4(0.49 - clamp(duvuv*0.4, 0., 0.50)));\n    \n    //fragColor = smoothstep(0.,1.,fragColor);\n    //fragColor = pow(fragColor, vec4(0.5,0.65,0.52,1.));\n    fragColor = max(fragColor, 0.);\n    fragColor *= 3.;\n    fragColor.xyz = pow(fragColor.xyz, vec3(0.4545 + dot(uvn,uvn)*0.5));\n    //fragColor *= 1. - duvuv*1.;\n\t//fragColor *= vec4(0.9,1.05,0.9,1.);\n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    //fragColor *= 1. - dot(uvn,uvn)*2.;\n    \n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),sin(x),sin(x),cos(x))\n\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 path(float z){\n    z *= 0.3;\n\treturn vec3(cos(\n        z*0.7\n    \t+ cos(z*0.6)*0.2\n    \t- sin(z*0.7 + 2.)*0.2\n    ), sin(\n        z\n    \t+ cos(z*0.6)*0.2\n    \t- sin(z*0.7 + 2.)*0.2\n    ), 0.)*0.5;\n}\n\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec2 map(vec3 p){\n\tvec2 d= vec2(10e7);\n\n    \n    p -= path(p.z);\n    \n    float modD = 4.;\n    vec3 q = p;\n    q.z = pmod(q.z, modD);\n    float i = pModPolar(q.xy, 5.);\n    \n    q.x -= 0.5;\n    vec3 z = q;\n    \n    z = abs(z);\n    \n    z -= 0.5;\n    \n    z.y -= 0.04;\n    z.x += 0.05;\n    z = abs(z);\n    z.x -= 0.02;\n    z = abs(z);\n    z.x -= 0.07;\n    z.xy *= rot(2.5);\n    //z += 0.01;\n    //float dP = length(q.xy - vec2(0.2,0.)) - 0.04;\n    //float dP = max(abs(q.x) - 0.1,abs(q.y)- 0.1);\n    \n    \n    vec3 u = z;\n    u.x += 0.1;\n    u.z -= modD*0.25;\n    u.xz *= rot(-0.6);\n    //u.y += 0.02;\n    u = abs(u)- vec3(0.01,0.22,0.95);\n    //u.y += 0.08;\n    float dPb = max((u.x),max((u.y), (u.z)));\n    \n    \n    \n    u = abs(z) - vec3(0.01,0.22,0.15);\n    u.x += 0.002;\n    float dPa = max((u.x),max((u.y), (u.z)));\n    \n    u = abs(z) - vec3(0.006,0.12,0.95);\n    float dP = max((u.x),max((u.y), (u.z)));\n    \n    \n    u = z;\n    z.x -= 0.03;\n    u = abs(z);\n    u -= vec3(0.01,0.12,0.95);\n    float dPc = max((u.x),max((u.y), (u.z)));\n    \n    glow +=  0.5/(0.01+dPc*dPc*4000.)*8.*pal(0.6,0.3,vec3(3.6,1.,.6),.9,3.9);\n\n    d = dmin(d, vec2(dP, 0.));\n    d = dmin(d, vec2(dPa, 2.));\n    d = dmin(d, vec2(dPb, 3.));\n    d = dmin(d, vec2(dPc, 4.));\n    \n    //glow +=  0.005/(0.1+dP*dP*20.)*8.*pal(0.6,0.3,vec3(3.6,1.,.6),.9,2.9);\n    \n    z = q;\n    z.x -= 0.1;\n    z = abs(z) - vec3(0.01,0.02,0.);\n    z.y -= 0.05;\n    float dPipe = length(z.xy)- 0.01;\n    d = dmin(d, vec2((dPipe) , 1.));\n    \n    glow += 0.4/(0.02+dPipe*dPipe*120.)*pal(0.6,0.3,vec3(3.6,4.,2.6),0.9,0.9);\n    \n    d.x *= 0.64;\n    return d;\n}\nfloat N;\n\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d;\n\n    \n    p = ro; t = 0.; hit = false;\n    for(int i = 0; i < 280 ; i++){\n    \td = map(p);\n        d.x *= N;\n        //glow += exp(-d.x);\n        if(d.x < 0.0006){\n        \thit = true;\n            break;\n        }\n        \n    \tt += d.x;\n        p = ro + rd*t;\n    }\n    \n\t\n    return d;\n}\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir ));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + right*uv.x + up*uv.y);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.001,0);\n    return normalize(map(p).x - vec3(\n    \tmap(p-t.xyy).x,\n    \tmap(p-t.yxy).x,\n    \tmap(p-t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    N = mix(0.6,1., texture(iChannel0,20.*uv*256.).x);\n\tuv *= 1. + dot(uv,uv)*0.1;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0);\n    \n    ro.z += iTime*4.;\n    \n    ro += path(ro.z);\n    \n    //vec3 rd = normalize(vec3(uv,1));\n    \n    vec3 lookAt = ro + vec3(0,0,4);\n    lookAt += path(lookAt.z);\n    vec3 rd = getRd( ro, lookAt,  uv);\n    \n    vec3 p; float t; bool hit;\n    vec2 d = march(ro, rd, p, t, hit);\n    \n    col += pow(glow*0.4, vec3(1.))*0.01;\n    if(hit){\n        vec3 n = getNormal(p);\n        vec3 ld = normalize(vec3(1));\n        vec3 h = normalize(ld - rd);\n        \n        float diff = max(dot(n, ld), 0.);\n        float spec = pow(max(dot(n, -h), 0.), 10.);\n        float fres = pow(1. - max(dot(n, -rd), 0.), 5.);\n        \n        \n        if(d.y == 0.){\n        \tcol *= 0.5 + fres*0.5;\n        } if(d.y == 1.){\n        \tcol *=0.5 + fres*1.;\n            \n        \t//col += 4.4;\n        } else if(d.y == 2.){\n        \tcol *= 0.6 + diff*fres*1.;\n            \n        \t//col += 4.4;\n        } else if(d.y == 3.){\n        \tcol *= (0.6 + diff*fres + spec*2.6);\n            \n        \t//col += 0.7;\n        } else{\n        \tcol *= fres*1.;\n        \n        }\n        \n        //col += diff*0.006;\n        //col += 0.75 + n;\n        \n    } else {\n    \n    }\n    \n    \n    \n    //col = mix(col, vec3(0.01), smoothstep(0.,1.,(p.z - ro.z)*0.04));\n    //col = mix(col, vec3(0.04,0.05,0.08)*0.1, smoothstep(0.,1.,(t)*0.1));\n    //col = mix(col, vec3(0.04,0.05,0.08)*0.3, smoothstep(0.,1.,(p.z - ro.z)*0.08));\n    col = mix(col, vec3(0.03,0.03,0.08)*1.3, smoothstep(0.,1.,(p.z - ro.z)*0.06));\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}