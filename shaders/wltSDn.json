{
    "Shader": {
        "info": {
            "date": "1580780429",
            "description": "Cheap, ALU-only blue noise based on the 2d Roberts sequence.\nNoise function in Buffer A.\n( http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/ )",
            "flags": 32,
            "hasliked": 0,
            "id": "wltSDn",
            "likes": 24,
            "name": "Phi Noise",
            "published": 3,
            "tags": [
                "noise",
                "dither",
                "blue",
                "dithering"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 1479
        },
        "renderpass": [
            {
                "code": "// Cheap, ALU-only blue noise based on the 2d Roberts sequence.\n// Noise function in Buffer A.\n// The basic idea is to use low-frequency white noise to blur out the spiky spectrum of high-frequency dither noise.\n// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n\n\n//2D Signal Inspector\n//by nimitz 2018 (twitter: @stormoid)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n#ifdef SHOW_FOURIER\n    if (q.x > 0.5)\n    {\n        vec2 dft = textureLod(iChannel1, q-vec2(0.5,0.0), 0.).xy;\n        float amp = length(dft) / SIZE; \n        col = vec3(amp);\n    }\t\n    else\n#endif\n    {\n        float n = textureLod(iChannel0, q, 0.).r;\n        col = pow(vec3(n), vec3(1.0/2.2));\n        \n        #ifdef SHOW_1BITGRADIENT\n        if(q.y < 0.25)\n        col = vec3(n < q.x * 2.0 ? 0.0 : 1.0);\n        #endif\n    }\n    \n    //Distribution plot\n    float tot = 0.;\n    if (fragCoord.y> SIZE && fragCoord.x < SIZE)\n    {\n        const float bands = 60.;\n        float bt = floor(fragCoord.x*bands/SIZE);\n        float pt = (floor((fragCoord.x)*bands/SIZE)+0.5)/bands;\n        const float width = 6.;\n        for (float j = 0.; j<=width; j++)\n        for (float i = 0.; i<SIZE; i++)\n        {\n            float v = texelFetch(iChannel0, ivec2(bt+j, i + 0.5), 0).x;\n            if (abs(v-pt) < .5/bands)\n            \ttot += 1.;\n        }\n        tot /= SIZE*width;\n        col.rgb = vec3(smoothstep(0.00,1.,tot*SIZE-fragCoord.y + SIZE + 1.))*vec3(.4,.4,.5);\n        col.rgb += vec3(smoothstep(1.,0.,abs(tot*SIZE-fragCoord.y + SIZE + 0.5)))*vec3(.8,.8,.8);\n        if(fragCoord.y < (SIZE+50.))\n        {\n        \tcol.rgb = max(col.rgb, vec3(0.9,0.6,0.1)*vec3(smoothstep(1.4,0.,abs(fragCoord.x - SIZE/2.))));\n        \tcol.rgb = max(col.rgb, vec3(0.55,0.5,0.4)*vec3(smoothstep(1.4,0.,abs(abs(fragCoord.x - SIZE/2.)-SIZE/4.))));\n        }\n    }\n    \n    \n    col *= smoothstep(0.,1.7,abs(fragCoord.y-SIZE+1.));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//2D Signal Inspector\n//by nimitz 2018 (twitter: @stormoid)\n\n//Horizontal + Vertical Discrete Fourier Transform of the input \n//adapted from FabriceNeyret2's https://www.shadertoy.com/view/XtScWt\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord )\n{\n   \tfragColor = vec4(0);\n    \n#ifdef SHOW_FOURIER\n    if(fragCoord.x > SIZE || fragCoord.y > SIZE) return;\n    \n    for(float i = 0.; i < SIZE; i++)  \n\t{\n\t\tvec2 xn = texelFetch(iChannel0, ivec2(i, fragCoord.y), 0).rr;\n        vec2 yn = texelFetch(iChannel1, ivec2(fragCoord.x, i), 0).ba;\n\t\tvec2 ang = - 6.2831853 * (fragCoord-.5 -SIZE/2.) * i/SIZE;\n\t\tfragColor.zw += cmul(xn, ang.x);\n\t\tfragColor.xy += cmul(yn, ang.y);\n    }\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n\n#define ANIMATE_NOISE\n\n// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/#dither\nfloat PhiNoise(uvec2 uv)\n{\n    // flip every other tile to reduce anisotropy\n    if(((uv.x ^ uv.y) & 4u) == 0u) uv = uv.yx;\n\t//if(((uv.x       ) & 4u) == 0u) uv.x = -uv.x;// more iso but also more low-freq content\n    \n    // constants of 2d Roberts sequence rounded to nearest primes\n    const uint r0 = 3242174893u;// prime[(2^32-1) / phi_2  ]\n    const uint r1 = 2447445397u;// prime[(2^32-1) / phi_2^2]\n    \n    // h = high-freq dither noise\n    uint h = (uv.x * r0) + (uv.y * r1);\n    \n    // l = low-freq white noise\n    uv = uv >> 2u;// 3u works equally well (I think)\n    uint l = ((uv.x * r0) ^ (uv.y * r1)) * r1;\n    \n    // combine low and high\n    return float(l + h) * (1.0 / 4294967296.0);\n}\n\nfloat PhiNoise2(uvec2 uv)\n{\n    uvec2 uv0 = uv;\n    // flip every other tile to reduce anisotropy\n    if(((uv.x ^ uv.y) & 4u) == 0u) uv = uv.yx;\n\tif(((uv.x       ) & 4u) == 0u) uv.x = -uv.x;// more iso but also more low-freq content\n    \n    // constants of 2d Roberts sequence rounded to nearest primes\n    const uint r0 = 3242174893u;// prime[(2^32-1) / phi_2  ]\n    const uint r1 = 2447445397u;// prime[(2^32-1) / phi_2^2]\n    \n    // h = high-freq dither noise\n    uint h = (uv.x * r0) + (uv.y * r1);\n    \n    uint l;\n    {\n        uv = uv0 >> 2u;\n        //uv.x = -uv.x;\n        \n        if(((uv.x ^ uv.y) & 4u) == 0u) uv = uv.yx;\n        if(((uv.x       ) & 4u) == 0u) uv.x = -uv.x;\n\n        uint h = (uv.x * r0) + (uv.y * r1);\n\t\t\t h = h ^ 0xE2E17FDCu;\n        \n        l = h;\n        \n        {\n            uv = uv0 >> 4u;\n            if(((uv.x ^ uv.y) & 4u) == 0u) uv = uv.yx;\n            if(((uv.x       ) & 4u) == 0u) uv.x = -uv.x;\n\n            uint h = (uv.x * r0) + (uv.y * r1);\n                 h = h ^ 0x1B98264Du;\n\n            l += h;\n    \t}\n    }\n    \n    // combine low and high\n    return float(l + h*1u) * (1.0 / 4294967296.0);\n}\n\nfloat PhiNoise(uvec3 uvw)\n{\n    // flip every other tile to reduce anisotropy\n    if(((uvw.x ^ uvw.y ^ uvw.z) & 4u) == 0u) uvw = uvw.yzx;\n    \n    // constants of 3d Roberts sequence rounded to nearest primes\n    const uint r0 = 3518319149u;// prime[(2^32-1) / phi_3  ]\n    const uint r1 = 2882110339u;// prime[(2^32-1) / phi_3^2]\n    const uint r2 = 2360945581u;// prime[(2^32-1) / phi_3^3]\n    \n    // h = high-freq dither noise\n    uint h = (uvw.x * r0) + (uvw.y * r1) + (uvw.z * r2);\n    \n    // l = low-freq white noise\n    uvw = uvw >> 2u;// 3u works equally well (I think)\n    uint l = ((uvw.x * r0) ^ (uvw.y * r1) ^ (uvw.z * r2)) * r1;\n    \n    // combine low and high\n    return float(l + h) * (1.0 / 4294967296.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef SHOW_FOURIER\n    if(fragCoord.x > SIZE)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n#endif\n    \n    uvec2 uv = uvec2(fragCoord);\n    \n    #ifdef ANIMATE_NOISE\n\tuv += uint(iFrame) * uvec2(2447445397u, 3242174893u);\n    #endif\n    \n    fragColor = vec4(vec3(PhiNoise(uv)), 1.0);\n    //fragColor = vec4(vec3(PhiNoise(uvec3(uv, iFrame).xzy)), 1.0);\n    \n   #if 0\n    {\n        vec2 uv0 = fragCoord - 0.5;\n        float ign = fract(52.9829189*fract(0.06711056*uv0.x + 0.00583715*uv0.y));\n        ign = fract((uv0.x*0.7548776662 + uv0.y*0.56984029));\n        ign = fract((uv0.x*0.7548776662 + uv0.y*0.56984029)*mix(0.8, 1.2, (iMouse.x/iResolution.x)));\n        ign = fract(uv0.x*0.6180339 + uv0.y*((iMouse.x/iResolution.x)*0.125*0.5+0.75));\n        ign = fract(uv0.x*0.6180339 + uv0.y*0.813333*0.125);\n        \n        ign = fract((uv0.x*0.798127 + uv0.y*0.602489)*0.945811);\n        \n        float ga = 3.14159265*(3.0-sqrt(5.0));\n        ign = fract((uv0.x*cos(ga) + uv0.y*sin(ga))*mix(0.9, 1.2,iMouse.x/iResolution.x));\n        \n        fragColor = vec4(vec3(ign), 1.0);\n    }\n   #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//2D Signal Inspector\n//by nimitz 2018 (twitter: @stormoid)\n\n  #define SHOW_1BITGRADIENT\n  #define SHOW_FOURIER\n\n  #define SIZE (floor(iResolution.y/2.25)*2.)\n\n\nconst float globalScale = 1.;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}