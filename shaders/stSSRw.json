{
    "Shader": {
        "info": {
            "date": "1627295449",
            "description": "NUS sws3005 last assignment ",
            "flags": 16,
            "hasliked": 0,
            "id": "stSSRw",
            "likes": 10,
            "name": "NUS sws3005-Ray tracing demo",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "uestcwzyyyyy",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "const int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 6;\nconst int NUM_PLANES = 3;\nconst int NUM_SPHERES = 3;\n\n\nconst float initPosx=2.5;\nconst float initPosy=1.0;\nconst float initPosz=2.5;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvec3 pos=vec3(initPosx,initPosy,initPosz);\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Cube_t\n{\n    vec3 leftBottom;\n    vec3 rightTop;\n    int materialID;\n};\n\n\nstruct Cone_t {\n\tfloat cosa;\n\tfloat h;\n\tvec3 c;\n\tvec3 v;\n\tint materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nCube_t cube;\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 3;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = -1.0;\n    Plane[1].C = 5.0;\n    Plane[1].D = 30.0;\n    Plane[1].materialID = 4;\n    \n    Plane[2].A = 5.0;\n    Plane[2].B = -1.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 30.0;\n    Plane[2].materialID = 5;\n\n    cube.leftBottom=vec3(-1.0,0,0);\n    cube.rightTop=vec3(-2,2.0,1.0);\n    cube.materialID=0;\n\n    // Center bouncing sphere.\n    Sphere[0].center = vec3( 1.0, abs(sin(2.0 * iTime)) + 0.7, -1.0 );\n    Sphere[0].radius = 0.7;\n    Sphere[0].materialID = 1;\n\n    // Circling sphere.\n    Sphere[1].center = vec3( -1.5 + 1.0 * cos(iTime), 1.0 + 0.6 * sin(3.0 * iTime), 0.5 + 1.0 * sin(iTime) );\n    Sphere[1].radius = 0.2;\n    Sphere[1].materialID = 2;\n    \n    Sphere[2].center = vec3( 1.0 + cos(2.0 * iTime) , 1.7 + sin(2.0 * iTime), -1.0);\n    Sphere[2].radius = 0.1;\n    Sphere[2].materialID = 4;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.9, 0.5, 0.3 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.5, 0.8, 0.3 );\n    Material[2].k_a = 0.4 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.3 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    Material[3].k_d = vec3( 0.3, 0.2, 0.2 );\n    Material[3].k_a = 0.4 * Material[3].k_d;\n    Material[3].k_r = 3.0 * Material[3].k_d;\n    Material[3].k_rg = 0.2 * Material[3].k_r;\n    Material[3].n = 64.0;\n\n    Material[4].k_d = vec3( 0.7, 0.9, 0.8 );\n    Material[4].k_a = 0.2 * Material[4].k_d;\n    Material[4].k_r = 2.0 * Material[4].k_d;\n    Material[4].k_rg = 0.5 * Material[4].k_r;\n    Material[4].n = 64.0;\n    \n    Material[5].k_d = vec3( 0.4, 0.4, 0.4);\n    Material[5].k_a = 0.2 * Material[5].k_d;\n    Material[5].k_r = 2.0 * Material[5].k_d;\n    Material[5].k_rg = 0.6 * Material[5].k_r;\n    Material[5].n = 128.0;\n    \n    // Light 0.\n    Light[0].position = vec3( 8.0* cos(iTime), 5.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( 1.0* cos(iTime)+5.0, 16.0, 1.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 V = ray.o - sph.center;\n    float a0 = dot(V,V) - sph.radius * sph.radius;\n    float DdotV = dot(ray.d, V);\n\n    if (DdotV <= 0.0) {\n    \t// When the ray shoots towards the sphere\n    \tfloat discr = DdotV * DdotV - a0;\n    \tif (discr >= 0.0) {\n    \t\t// Smaller intersection point\n    \t\tt = -DdotV - sqrt(discr);\n    \t\thitPos = ray.o + t * ray.d;\n    \t\thitNormal = normalize(hitPos - sph.center);\n    \t\treturn (t >= tmin && t<= tmax);\n    \t}\n    }\n\treturn false;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 V = ray.o - sph.center;\n    float a0 = dot(V,V) - sph.radius * sph.radius;\n    float DdotV = dot(ray.d, V);\n\n    if (DdotV <= 0.0) {\n    \t// When the ray shoots towards the sphere\n    \tfloat discr = DdotV * DdotV - a0;\n    \tif (discr >= 0.0) {\n    \t\t// Need to compare both intersection points\n    \t\tfloat t1 = -DdotV - sqrt(discr);\n    \t\tfloat t2 = -DdotV + sqrt(discr);\n    \t\treturn ((t1 >= tmin && t1<= tmax) || (t2 >= tmin && t2 <= tmax));\n    \t}\n    }\n\treturn false;\n}\n\n\nbool inPlane(vec3 pos,vec3 leftBottom,vec3 rightTop)\n{\n    bool x1=(pos.x<=leftBottom.x+DEFAULT_TMIN)&&(pos.x>=rightTop.x-DEFAULT_TMIN);\n    bool x2=(pos.y>=leftBottom.y-DEFAULT_TMIN)&&(pos.y<=rightTop.y+DEFAULT_TMIN);\n    bool x3=(pos.z>=leftBottom.z-DEFAULT_TMIN)&&(pos.z<=rightTop.z+DEFAULT_TMIN);\n    return x1&&x2&&x3;\n}\n\n\nbool IntersectCube_t( in Cube_t cubic, in Ray_t ray, in float tmin, in float tmax)\n{\n\n    vec3 leftBottom=cubic.leftBottom;\n    vec3 rightTop=cubic.rightTop;\n    Plane_t p;\n    float t1;\n    float tNow=tmax;\n    vec3 hitPos1;\n    vec3 hitNormal1;\n    vec3 hitNormalNow;\n    //compute X plane intersection\n    p.A=1.0;\n    p.B=0.0;\n    p.C=0.0;\n    p.D=-cubic.leftBottom.x;\n    \n    bool i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow &&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    p.A=1.0;\n    p.B=0.0;\n    p.C=0.0;\n    p.D=-cubic.rightTop.x;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    //compute Y plane intersection\n    p.A=0.0;\n    p.B=1.0;\n    p.C=0.0;\n    p.D=-cubic.leftBottom.y;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    p.A=0.0;\n    p.B=1.0;\n    p.C=0.0;\n    p.D=-cubic.rightTop.y;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    //compute Z plane intersection\n    p.A=0.0;\n    p.B=0.0;\n    p.C=1.0;\n    p.D=-cubic.leftBottom.z;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n\n    p.A=0.0;\n    p.B=0.0;\n    p.C=1.0;\n    p.D=-cubic.rightTop.z;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    if(tNow!=tmax&& tNow>tmin)\n    {\n        return true;\n    }\n    return false;\n}\n\n\n\n\nbool IntersectCube_t( in Cube_t cubic, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 leftBottom=cubic.leftBottom;\n    vec3 rightTop=cubic.rightTop;\n    Plane_t p;\n    float t1;\n    float tNow=tmax; //the min t in six planes\n    vec3 hitPos1;\n    vec3 hitNormal1;\n    vec3 hitNormalNow;\n    //compute X plane intersection\n    p.A=1.0;\n    p.B=0.0;\n    p.C=0.0;\n    p.D=-leftBottom.x;\n    \n    bool i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow &&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    p.A=1.0;\n    p.B=0.0;\n    p.C=0.0;\n    p.D=-rightTop.x;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    //compute Y plane intersection\n    p.A=0.0;\n    p.B=1.0;\n    p.C=0.0;\n    p.D=-cubic.leftBottom.y;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    p.A=0.0;\n    p.B=1.0;\n    p.C=0.0;\n    p.D=-cubic.rightTop.y;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    //compute Z plane intersection\n    p.A=0.0;\n    p.B=0.0;\n    p.C=1.0;\n    p.D=-cubic.leftBottom.z;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n\n    p.A=0.0;\n    p.B=0.0;\n    p.C=1.0;\n    p.D=-cubic.rightTop.z;\n    \n    i =IntersectPlane(p,ray,tmin,tmax,t1,hitPos1,hitNormal1);\n    if(i&&inPlane(hitPos1,leftBottom,rightTop))\n    {\n        if(t1<tNow&&t1>tmin)\n            {\n                tNow=t1;\n                hitNormalNow=hitNormal1;\n            }\n    }\n\n    if(tNow!=tmax&& tNow>tmin)\n    {\n        t=tNow;\n        hitPos = ray.o + t * ray.d;\n        hitNormal=hitNormalNow;\n        return true;\n    }\n    return false;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n\n    for (int i = 0; i < NUM_SPHERES; i++ ) {\n    \ttemp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal);\n\n    \tif (temp_hasHit && temp_t < nearest_t) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Sphere[i].materialID;\n    \t}\n    \t\n    }\n\n        temp_hasHit=IntersectCube_t(cube,ray,DEFAULT_TMIN,DEFAULT_TMAX,temp_t, temp_hitPos, temp_hitNormal);\n        \tif (temp_hasHit && temp_t < nearest_t) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = cube.materialID;\n    \t}\n\n\n    for (int i = 0; i < NUM_PLANES; i++ ) {\n    \ttemp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\n    \tif (temp_hasHit && temp_t < nearest_t ) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Plane[i].materialID;\n    \t}\n    \t\n    }\n    \n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    // Compute lighting for each lights\n    Ray_t ShadowRay[NUM_LIGHTS];\n    bool L_shadow[NUM_LIGHTS];\n    for (int i = 0; i < NUM_LIGHTS; i++ ) {\n    \tShadowRay[i].o = nearest_hitPos;\n    \tShadowRay[i].d = normalize(Light[i].position - ShadowRay[i].o);\n\n    \tfor (int j = 0; j < NUM_SPHERES; j++ )\n    \t\tif(!L_shadow[i])\n    \t\tL_shadow[i] = IntersectSphere(Sphere[j], ShadowRay[i], DEFAULT_TMIN, distance(nearest_hitPos, Light[i].position));\n\n    \tif (!L_shadow[i])\n    \t\tfor(int j = 0; j < NUM_PLANES; j++ )\n    \t\t\tif(!L_shadow[i])\n    \t\t\t\tL_shadow[i] = IntersectPlane(Plane[j], ShadowRay[i], DEFAULT_TMIN, distance(nearest_hitPos, Light[i].position));\n\n        if(!L_shadow[i])\n    \t    L_shadow[i] = IntersectCube_t(cube, ShadowRay[i], DEFAULT_TMIN, distance(nearest_hitPos, Light[i].position));\n\n    \tI_local += PhongLighting( ShadowRay[i].d, nearest_hitNormal, - ray.d, L_shadow[i], Material[nearest_hitMatID], Light[i] );\n    }\n\n    \n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\nvec2 getKeyBoard()\n{\n\n    float x1=texelFetch( iChannel0, ivec2(KEY_LEFT,0), 0 ).x;\n    float x2=texelFetch( iChannel0, ivec2(KEY_RIGHT,0), 0 ).x;\n    float y1=texelFetch( iChannel0, ivec2(KEY_UP,0), 0 ).x;\n    float y2=texelFetch( iChannel0, ivec2(KEY_DOWN,0), 0 ).x;\n    return 5.0*vec2(x2-x1,y1-y2);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n\n    pos+=vec3(getKeyBoard(),0);\n    \n    \n    // Position the camera.\n    vec3 cam_pos = pos + vec3( 4.0 * cos(iTime / 1.5) + 1., 0.2 + 1.0 * sin(iTime / 3.0), 1.0 * sin(iTime / 2.0));\n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}