{
    "Shader": {
        "info": {
            "date": "1671362315",
            "description": "https://en.wikipedia.org/wiki/Temari_(toy)",
            "flags": 0,
            "hasliked": 0,
            "id": "DtX3zN",
            "likes": 18,
            "name": "Temari",
            "published": 3,
            "tags": [
                "cineshader",
                "temari"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2575
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(kw*antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n\nvec3 RotAnim(vec3 p){\n    p.xz*=Rot(radians(5.*iTime));\n    p.xy*=Rot(radians(5.*iTime));\n    return p;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    p = RotAnim(p);\n    float d = length(p)-0.5;\n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*occ;\n    diffCol += col*vec3(1.0,1.0,0.95)*skyDiff*occ;\n    diffCol += col*vec3(1.)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nfloat SimpleVesicaDistance(vec2 p, float r, float d) {\n    p.x = abs(p.x);\n    p.x+=d;\n    return length(p)-r;\n}\n\nfloat smallTex(vec2 p){\n    float d = abs(B(p,vec2(0.01)))-0.001;\n    return d;\n}\n\nvec3 topBottomTex(vec3 p, float kw){\n    vec2 uv = p.xz;\n    uv*=1.2;\n    vec2 prevUV2 = uv;\n    uv*=Rot(radians(iTime*-8.));\n    vec2 prevUV = uv;\n    \n    \n    vec3 col = vec3(0.);\n    \n    uv = DF(uv,3.0);\n    uv -= vec2(0.18);\n    uv*=Rot(radians(45.));\n    uv.x*=3.;\n    uv*=Rot(radians(45.));\n    \n    float d = abs(B(uv,vec2(0.1)))-0.005;\n    float d2 = abs(B(uv,vec2(0.05)))-0.005;\n    d = min(d,d2);\n    col = mix(col,vec3(1.),S(d,0.));\n    \n    uv = prevUV;\n    uv*=Rot(radians(15.5));\n    uv = DF(uv,3.0);\n    uv -= vec2(0.28);\n    uv*=Rot(radians(45.));\n    uv.x*=3.;\n    uv*=Rot(radians(45.));\n    d = abs(B(uv,vec2(0.1)))-0.005;\n    d2 = abs(B(uv,vec2(0.05)))-0.005;\n    d = min(d,d2);\n    col = mix(col,vec3(1.),S(d,0.));\n\n    uv = prevUV;\n    uv = DF(uv,3.0);\n    uv -= vec2(0.35);\n    uv*=Rot(radians(45.));\n    uv.x*=0.8;\n    uv*=Rot(radians(45.));\n    d = abs(B(uv,vec2(0.05)))-0.001;\n    d2 = abs(B(uv,vec2(0.02)))-0.001;\n    d = min(d,d2);\n    col = mix(col,vec3(1.),S(d,0.));\n\n    uv = prevUV;\n    uv*=Rot(radians(21.));\n    uv = DF(uv,3.0);\n    uv -= vec2(0.385);\n    d = smallTex(uv);\n    d = min(d,d2);\n    col = mix(col,vec3(1.),S(d,0.));\n\n    uv = prevUV;\n    uv*=Rot(radians(9.));\n    uv = DF(uv,3.0);\n    uv -= vec2(0.385);\n    d = smallTex(uv);\n    d = min(d,d2);\n    col = mix(col,vec3(1.),S(d,0.));\n    \n    uv = prevUV2;\n    uv*=Rot(radians(10.*iTime));\n    uv = DF(uv,2.0);\n    uv -= vec2(0.04);\n    d = abs(B(uv,vec2(0.025)))-0.002;\n    col = mix(col,vec3(1.),S(d,0.));    \n    \n    return col;\n}\n\nvec3 centerTex(vec3 p, float kw){\n    vec2 uv = vec2(1.572*atan(p.x,p.z)/6.2832,p.y/3.);\n    vec2 prevUV = uv;\n    float size = 2.;\n    uv*=size;\n    \n    uv.y+=sin(uv.x*20.)*0.05;\n    float d = abs(uv.y)-0.001;\n    uv = prevUV;\n    uv*=size;\n    uv.x+=0.16;\n    uv.y+=sin(uv.x*20.)*0.05;\n    float d2 = abs(uv.y)-0.001;\n    d = min(d,d2);\n    \n    uv = prevUV;\n    uv*=5.;\n    uv.y*=1.2;\n    uv.x = mod(uv.x,0.392)-0.191;\n    uv*=Rot(radians(sin(iTime*2.)*100.));\n    d2 = abs(length(uv)-0.06)-0.005;\n    d2 = max(-(abs(uv.x)-0.03),d2);\n    d = min(d,d2);\n    \n    uv = prevUV;\n    uv*=5.;\n    uv.y*=1.2;\n    uv.x = mod(uv.x,0.392)-0.191;\n    uv*=Rot(radians(20.*iTime));\n    uv = DF(uv,2.0);\n    uv -= vec2(0.08);\n    uv*=Rot(radians(45.));\n    d2 = abs(Tri(uv,vec2(0.026),radians(45.)))-0.003;\n    d = min(d,d2);\n    \n    uv = prevUV;\n    uv*=5.;\n    uv.y*=1.2;\n    uv.x = mod(uv.x,0.392)-0.191;\n    d2 = abs(length(uv)-0.035)-0.003;\n    d = min(d,d2);    \n    \n    uv = prevUV;\n    uv*=5.;\n    uv.y*=1.2;\n    uv.x+=0.2;\n    uv.x = mod(uv.x,0.393)-0.1965;\n    uv.y = abs(uv.y)-0.15;\n    d2 = abs(length(uv)-0.035)-0.003;\n    d = min(d,d2);    \n    \n    uv = prevUV;\n    uv*=5.;\n    uv.y*=1.2;\n    uv.x = mod(uv.x,0.392)-0.191;\n    uv.y = abs(uv.y)-0.32;\n    d2 = Tri(uv,vec2(0.12),radians(45.));\n    float d3 =Tri(uv-vec2(0.0,-0.06),vec2(0.12),radians(45.));\n    d2 = max(-d3,d2);\n    d = min(d,abs(d2)-0.003);        \n    \n    \n    uv = prevUV;\n    uv*=5.;\n    uv.y*=1.2;\n    uv.x+=0.2;\n    uv.x = mod(uv.x,0.393)-0.1965;\n    uv.y = abs(uv.y)-0.25;\n    uv.y*=-1.;\n    d2 = abs(Tri(uv,vec2(0.035),radians(45.)))-0.003;\n    d = min(d,d2);        \n    \n    return mix(vec3(0.0),vec3(1.8),S(d,0.0));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col, float w){\n    col = diffuseMaterial(n,rd,p,vec3(0.01));\n    p = RotAnim(p);\n    col += centerTex(p,w);\n    col += topBottomTex(p,w);\n    \n    return col;\n}\n\nfloat bgItem1(vec2 p){\n    p*=Rot(radians(20.*iTime));\n    vec2 prevP = p;\n    p = DF(p,1.25);\n    p -= vec2(0.04);\n    float d = abs(length(p)-0.055)-0.002;\n    p = prevP;\n    d = max(-(length(p)-0.02),d);\n    p = DF(p,1.25);\n    p -= vec2(0.027);\n    float d2 = abs(length(p)-0.011)-0.001;\n    d = min(d,d2);\n    p = prevP;\n    d2 = abs(length(p)-0.015)-0.001;\n    d = min(d,d2);\n    return d;\n}\n\nfloat bgItem2(vec2 p){\n    p*=Rot(radians(-20.*iTime));\n    vec2 prevP = p;\n    p = DF(p,3.);\n    p -= vec2(0.04);\n    p*=Rot(radians(45.));\n    float d = abs(SimpleVesicaDistance(p,0.095,0.083))-0.001;\n    p = prevP;\n    d = max(-(length(p)-0.02),d);\n    float d2 = abs(length(p)-0.02)-0.001;\n    d = min(d,d2);\n    return d;\n}\n\nfloat background(vec2 p){\n    p*=1.5;\n    p.y-=iTime*0.1;\n    vec2 prevP = p;\n    p.x-=iTime*0.1;\n    p.x = mod(p.x,0.3)-0.15;\n    p.y = mod(p.y,0.5)-0.25;\n    float d = bgItem1(p);\n    \n    p = prevP;\n    p.x+=iTime*0.1;\n    p.x+=0.45;\n    p.y+=0.25;\n    p.x = mod(p.x,0.3)-0.15;\n    p.y = mod(p.y,0.5)-0.25;\n    \n    float d2 = bgItem2(p);\n    \n    return min(d,d2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(-5.0));\n        ro.xz *= Rot(radians(iTime*10.0));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col,0.5/abs(dot(rd,p)) );\n    } else {\n        float d = background(uv);\n        float kw = 1.0;\n        col = mix(col,vec3(0.3),S(d,0.));\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.4545) );    \n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}