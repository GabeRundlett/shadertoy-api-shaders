{
    "Shader": {
        "info": {
            "date": "1485102996",
            "description": "Combines Abelian sand reaction system with a realistic 2D water shader. Mouse clicks add more sand, holding space while clicking creates holes instead.",
            "flags": 48,
            "hasliked": 0,
            "id": "llVSRK",
            "likes": 28,
            "name": "Abelian Beachfront",
            "published": 3,
            "tags": [
                "waves",
                "interactive",
                "water",
                "draw",
                "sand"
            ],
            "usePreview": 1,
            "username": "TimoKinnunen",
            "viewed": 3291
        },
        "renderpass": [
            {
                "code": "//\n// Abelian Beachfront\n// or\n// The Futility of Artificial Islands\n//\n// Use mouse clicks to add more sand. \n// To remove sand, dig a hole by holding down space bar while clicking with mouse.\n//\n// Created by Timo Kinnunen 2017\n//\n// Based on Waterworld by frankenburgh\n// @ https://www.shadertoy.com/view/lsBSWm\n//\n// And based on Basic : Sandpiles by Gijs\n// @ https://www.shadertoy.com/view/llySRK\n//\n// Plasma colormap from accelerated ray marching by nshelton \n// @ https://www.shadertoy.com/view/llySW1\n//\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define iTime (float(iFrame)/60.)\n\n\nfloat coast2water_fadedepth = 0.10;\nfloat large_waveheight      = .750; // change to adjust the \"heavy\" waves\nfloat large_wavesize        = 3.4;  // factor to adjust the large wave size\nfloat small_waveheight      = 0.6;  // change to adjust the small random waves\nfloat small_wavesize        = 0.5;   // factor to ajust the small wave size\nfloat water_softlight_fact  = 15.;  // range [1..200] (should be << smaller than glossy-fact)\nfloat water_glossylight_fact= 120.; // range [1..200]\nfloat particle_amount       = 70.;\nvec3 watercolor             = vec3(0.43, 0.60, 0.66); // 'transparent' low-water color (RGB)\nvec3 watercolor2            = vec3(0.06, 0.07, 0.11); // deep-water color (RGB, should be darker than the low-water color)\nvec3 water_specularcolor    = vec3(1.3, 1.3, 0.9);    // specular Color (RGB) of the water-highlights\n#define light                 vec3(-0., sin(iTime*0.5)*.5 + .35, 2.8) // position of the sun\n\n\n// calculate random value\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n// 2d noise function\nfloat noise1( in vec2 x )\n{\n  vec2 p  = floor(x);\n  vec2 f  = smoothstep(0.0, 1.0, fract(x));\n  float n = p.x + p.y*57.0;\n  return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\n\nfloat noise(vec2 p)\n{\n  return texture(iChannel1,p*vec2(1./256.)).x;\n}\nvec4 highness(vec2 p)\n{\n    vec4 t = texture(iChannel0,fract(p));\n    float clipped = -2.0-smoothstep(3.,10.,t.a)*6.9-smoothstep(10.,100.,t.a)*89.9-smoothstep(0.,10000.,t.a)*10000.0;\n  return clamp(t, 0.0,3.0)+clamp(t/3.0-1.0, 0.0,1.0)+clamp(t/16.0-1.0, 0.0,1.0);\n}\n\nfloat height_map( vec2 p )\n{\n    vec4 height=highness(p);\n    /*\n    height = -0.5+\n        0.5*smoothstep(-100.,0.,-height)+\n        2.75*smoothstep(0.,2.,height)+\n        1.75*smoothstep(2.,4.,height)+\n        2.75*smoothstep(4.,16.,height)+\n        1.5*smoothstep(16.,1000.,height);\n*/\n\n  mat2 m = mat2( 0.9563*1.4,  -0.2924*1.4,  0.2924*1.4,  0.9563*1.4 );\n  //p = p*6.;\n  float f = 0.6000*noise1( p ); p = m*p*1.1*6.;\n  f += 0.2500*noise( p ); p = m*p*1.32;\n  f += 0.1666*noise( p ); p = m*p*1.11;\n  f += 0.0834*noise( p ); p = m*p*1.12;\n  f += 0.0634*noise( p ); p = m*p*1.13;\n  f += 0.0444*noise( p ); p = m*p*1.14;\n  f += 0.0274*noise( p ); p = m*p*1.15;\n  f += 0.0134*noise( p ); p = m*p*1.16;\n  f += 0.0104*noise( p ); p = m*p*1.17;\n  f += 0.0084*noise( p );\nf = .25*f+dot(height,vec4(-.03125,-.125,.25,.25))*.5;\n    const float FLAT_LEVEL = 0.92525;\n    //f = f*0.25+height*0.75;\n  if (f<FLAT_LEVEL)\n      f = f;\n  else\n      f = pow((f-FLAT_LEVEL)/(1.-FLAT_LEVEL), 2.)*(1.-FLAT_LEVEL)*2.0+FLAT_LEVEL; // makes a smooth coast-increase\n  return clamp(f, 0., 10.);\n}\nvec3 plasma_quintic( float x )\n{\n\tx = clamp( x, 0.0, 1.0);\n\tvec4 x1 = vec4( 1.0, x, x * x, x * x * x ); // 1 x x2 x3\n\tvec4 x2 = x1 * x1.w * x; // x4 x5 x6 x7\n\treturn vec3(\n\t\tdot( x1.xyzw, vec4( +0.063861086, +1.992659096, -1.023901152, -0.490832805 ) ) + dot( x2.xy, vec2( +1.308442123, -0.914547012 ) ),\n\t\tdot( x1.xyzw, vec4( +0.049718590, -0.791144343, +2.892305078, +0.811726816 ) ) + dot( x2.xy, vec2( -4.686502417, +2.717794514 ) ),\n\t\tdot( x1.xyzw, vec4( +0.513275779, +1.580255060, -5.164414457, +4.559573646 ) ) + dot( x2.xy, vec2( -1.916810682, +0.570638854 ) ) );\n}\nvec4 color(vec2 p){\n    vec4 c1 = vec4(1.7,1.6,.9,1);\n    vec4 c2 = vec4(.2,.94,.1,1);\n    vec4 c3 = vec4(.3,.2,.0,1);\n    vec4 c4 = vec4(.99,.99,1.6,1);\n    vec4 v = highness(p);\n    float los = smoothstep(0.1,1.1,v.b);\n    float his = smoothstep(3.5,6.5,v.b);\n    float ces = smoothstep(1.,5.,v.a);\n    vec4 lo = mix(c1,c2,los);\n    vec4 hi = mix(c3,c4,his);\n    vec4 ce = mix(lo,hi,ces);\n\n    return vec4(plasma_quintic(ces),1).ragb;\n}\nvec4 color2(vec2 fragCoord){\n    vec4 fragColor = vec4(0);\n    fragColor += color(fragCoord);\n    fragColor += color(fragCoord+vec2( .5, 0)/iResolution.xy);\n    fragColor += color(fragCoord+vec2(-.5, 0)/iResolution.xy);\n    fragColor += color(fragCoord+vec2( 0, .5)/iResolution.xy);\n    fragColor += color(fragCoord+vec2( 0,-.5)/iResolution.xy);\n    fragColor *= .2;\n    return fragColor;\n}\n\nvec3 terrain_map( vec2 p )\n{\n  return color(p).rgb*0.75+0.25*vec3(0.7, .55, .4)+texture(iChannel2, fract(p*5.)).rgb*.5; // test-terrain is simply 'sandstone'\n}\n\nconst mat2 m = mat2( 0.72, -1.60,  1.60,  0.72 );\n\nfloat water_map( vec2 p, float height )\n{\n  vec2 p2 = p*large_wavesize;\n  vec2 shift1 = 0.001*vec2( iTime*160.0*2.0, iTime*120.0*2.0 );\n  vec2 shift2 = 0.001*vec2( iTime*190.0*2.0, -iTime*130.0*2.0 );\n\n  // coarse crossing 'ocean' waves...\n  float f = 0.6000*noise( p );\n  f += 0.2500*noise( p*m );\n  f += 0.1666*noise( p*m*m );\n  float wave = sin(p2.x*0.622+p2.y*0.622+shift2.x*4.269)*large_waveheight*f*height*height ;\n\n  p *= small_wavesize;\n  f = 0.;\n  float amp = 1.0, s = .5;\n  for (int i=0; i<9; i++)\n  { p = m*p*.947; f -= amp*abs(sin((noise( p+shift1*s )-.5)*2.)); amp = amp*.59; s*=-1.329; }\n \n  return wave+f*small_waveheight;\n}\n\nfloat nautic(vec2 p)\n{\n  p *= 18.;\n  float f = 0.;\n  float amp = 1.0, s = .5;\n  for (int i=0; i<3; i++)\n  { p = m*p*1.2; f += amp*abs(smoothstep(0., 1., noise( p+iTime*s ))-.5); amp = amp*.5; s*=-1.227; }\n  return pow(1.-f, 5.);\n}\n\nfloat particles(vec2 p)\n{\n  p *= 200.;\n  float f = 0.;\n  float amp = 1.0, s = 1.5;\n  for (int i=0; i<3; i++)\n  { p = m*p*1.2; f += amp*noise( p+iTime*s ); amp = amp*.5; s*=-1.227; }\n  return pow(f*.35, 7.)*particle_amount;\n}\n\n\nfloat test_shadow( vec2 xy, float height)\n{\n    vec3 r0 = vec3(xy, height);\n    vec3 rd = normalize( light - r0 );\n    \n    float hit = 1.0;\n    float t   = 0.001;\n    for (int j=1; j<25; j++)\n    {\n        vec3 p = r0 + t*rd;\n        float h = height_map( p.xy );\n        float height_diff = p.z - h;\n        if (height_diff<0.0)\n        {\n            return 0.0;\n        }\n        t += 0.01+height_diff*.02;\n        hit = min(hit, 2.*height_diff/t); // soft shaddow   \n    }\n    return hit;\n}\n\nvec3 CalcTerrain(vec2 uv, float height)\n{\n  vec3 col = terrain_map( uv );\n  float h1 = height_map(uv-vec2(0., 0.5)/ iResolution.xy);\n  float h2 = height_map(uv+vec2(0., 0.5)/ iResolution.xy);\n  float h3 = height_map(uv-vec2(0.5, 0.)/ iResolution.xy);\n  float h4 = height_map(uv+vec2(0.5, 0.)/ iResolution.xy);\n  vec3 norm = normalize(vec3(h3-h4, h1-h2, 1.));\n  vec3 r0 = vec3(uv, height);\n  vec3 rd = normalize( light - r0 );\n  float grad = dot(norm, rd);\n  col *= grad+pow(grad, 8.);\n  float terrainshade = test_shadow( uv, height );\n  col = mix(col*.25, col, terrainshade);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;// - vec2(-0.12, +0.25);\n\n    float WATER_LEVEL = 0.84; // Water level (range: 0.0 - 2.0)\n    //if (iMouse.z>0.)\n\t//\tWATER_LEVEL = iMouse.x*.003; \n    float deepwater_fadedepth   = 0.4 + coast2water_fadedepth;\n    //if (iMouse.z>0.)\n\t//  deepwater_fadedepth = iMouse.y*0.003 + coast2water_fadedepth;\n    \n    float height = height_map( uv );\n    vec3 col;\n    \n    float waveheight = clamp(WATER_LEVEL*3.-1.5, 0., 1.);\n    float level = WATER_LEVEL + .2*water_map(uv*15. + vec2(iTime*.1), waveheight);\n    if (height > level)\n    {\n        col = CalcTerrain(uv, height);\n    }\n    if (height <= level)\n    {\n        vec2 dif = vec2(.0, .01);\n        vec2 pos = uv*15. + vec2(iTime*.01);\n        float h1 = water_map(pos-dif,waveheight);\n        float h2 = water_map(pos+dif,waveheight);\n        float h3 = water_map(pos-dif.yx,waveheight);\n        float h4 = water_map(pos+dif.yx,waveheight);\n        vec3 normwater = normalize(vec3(h3-h4, h1-h2, .125)); // norm-vector of the 'bumpy' water-plane\n        uv += normwater.xy*.002*(level-height);\n        \n        col = CalcTerrain(uv, height);\n\n        float coastfade = clamp((level-height)/coast2water_fadedepth, 0., 1.);\n        float coastfade2= clamp((level-height)/deepwater_fadedepth, 0., 1.);\n        float intensity = col.r*.2126+col.g*.7152+col.b*.0722;\n        watercolor = mix(watercolor*intensity, watercolor2, smoothstep(0., 1., coastfade2));\n\n        vec3 r0 = vec3(uv, WATER_LEVEL);\n        vec3 rd = normalize( light - r0 ); // ray-direction to the light from water-position\n        float grad     = dot(normwater, rd); // dot-product of norm-vector and light-direction\n        float specular = pow(grad, water_softlight_fact);  // used for soft highlights                          \n        float specular2= pow(grad, water_glossylight_fact); // used for glossy highlights\n        float gradpos  = dot(vec3(0., 0., 1.), rd);\n        float specular1= smoothstep(0., 1., pow(gradpos, 5.));  // used for diffusity (some darker corona around light's specular reflections...)                          \n        float watershade  = test_shadow( uv, level );\n        watercolor *= 2.2+watershade;\n   \t\twatercolor += (.2+.8*watershade) * ((grad-1.0)*.5+specular) * .25;\n   \t\twatercolor /= (1.+specular1*1.25);\n   \t\twatercolor += watershade*specular2*water_specularcolor;\n        watercolor += watershade*coastfade*(1.-coastfade2)*(vec3(.5, .6, .7)*nautic(uv)+vec3(1., 1., 1.)*particles(uv));\n        \n        col = mix(col, watercolor, coastfade);\n    }\n    \n\tfragColor = vec4(col , 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    if(iMouse.z>0. && distance(fragCoord,iMouse.xy)<1.) {\n        fragColor.r = texture(iChannel1,vec2(32.5/ 256.0,0.25)).x> 0.5 ? -2000.0:1000.0;\n        return;\n    }\n    if(iFrame<10) {\n        if(distance(fragCoord,iResolution.xy/2.)<1.) {\n            fragColor = vec4(80000,0,0,0);\n        } else {\n            fragColor = vec4(0,0,0,0);\n        }\n        return;\n    }\n\n    vec4 s = texture(iChannel0,fragCoord/iResolution.xy);\n\tvec4 d = texture(iChannel0,fract((fragCoord+vec2( 0.0,-1.0))/iResolution.xy));\n  \tvec4 l = texture(iChannel0,fract((fragCoord+vec2(-1.0, 0.0))/iResolution.xy));\n  \tvec4 r = texture(iChannel0,fract((fragCoord+vec2( 1.0, 0.0))/iResolution.xy));\n    vec4 u = texture(iChannel0,fract((fragCoord+vec2( 0.0, 1.0))/iResolution.xy));\n    fragColor = vec4(s.r,s.gba*.984375)+vec4(dot(vec4(1),step(3.5,vec4(d.r,l.r,r.r,u.r))-step(3.5,s.r)),.0078125*(s.rgb+(d.rgb+d.gba+l.rgb+l.gba+r.rgb+r.gba+u.rgb+u.gba)/8.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 s = texture(iChannel0,fragCoord/iResolution.xy);\n\tvec4 d = texture(iChannel0,fract((fragCoord+vec2( 0.0,-1.0))/iResolution.xy));\n  \tvec4 l = texture(iChannel0,fract((fragCoord+vec2(-1.0, 0.0))/iResolution.xy));\n  \tvec4 r = texture(iChannel0,fract((fragCoord+vec2( 1.0, 0.0))/iResolution.xy));\n    vec4 u = texture(iChannel0,fract((fragCoord+vec2( 0.0, 1.0))/iResolution.xy));\n    fragColor = vec4(s.r,s.gba*.984375)+vec4(dot(vec4(1),step(3.5,vec4(d.r,l.r,r.r,u.r))-step(3.5,s.r)),.0078125*(s.rgb+(d.rgb+d.gba+l.rgb+l.gba+r.rgb+r.gba+u.rgb+u.gba)/8.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 s = texture(iChannel0,fragCoord/iResolution.xy);\n\tvec4 d = texture(iChannel0,fract((fragCoord+vec2( 0.0,-1.0))/iResolution.xy));\n  \tvec4 l = texture(iChannel0,fract((fragCoord+vec2(-1.0, 0.0))/iResolution.xy));\n  \tvec4 r = texture(iChannel0,fract((fragCoord+vec2( 1.0, 0.0))/iResolution.xy));\n    vec4 u = texture(iChannel0,fract((fragCoord+vec2( 0.0, 1.0))/iResolution.xy));\n    fragColor = vec4(s.r,s.gba*.984375)+vec4(dot(vec4(1),step(3.5,vec4(d.r,l.r,r.r,u.r))-step(3.5,s.r)),.0078125*(s.rgb+(d.rgb+d.gba+l.rgb+l.gba+r.rgb+r.gba+u.rgb+u.gba)/8.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 s = texture(iChannel0,fragCoord/iResolution.xy);\n\tvec4 d = texture(iChannel0,fract((fragCoord+vec2( 0.0,-1.0))/iResolution.xy));\n  \tvec4 l = texture(iChannel0,fract((fragCoord+vec2(-1.0, 0.0))/iResolution.xy));\n  \tvec4 r = texture(iChannel0,fract((fragCoord+vec2( 1.0, 0.0))/iResolution.xy));\n    vec4 u = texture(iChannel0,fract((fragCoord+vec2( 0.0, 1.0))/iResolution.xy));\n    fragColor = vec4(s.r,s.gba*.984375)+vec4(dot(vec4(1),step(3.5,vec4(d.r,l.r,r.r,u.r))-step(3.5,s.r)),.0078125*(s.rgb+(d.rgb+d.gba+l.rgb+l.gba+r.rgb+r.gba+u.rgb+u.gba)/8.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}