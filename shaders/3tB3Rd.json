{
    "Shader": {
        "info": {
            "date": "1560643900",
            "description": "Renders a version where the second and from then on every fourth iteration is a burning ship iteration instead of a mandelbrot iteration.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tB3Rd",
            "likes": 3,
            "name": "Mandelbrot Burning Ship Hybrid",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "burningship"
            ],
            "usePreview": 0,
            "username": "rycvheldir",
            "viewed": 494
        },
        "renderpass": [
            {
                "code": "// Original Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// See here for more information on smooth iteration count:\n//\n// https://iquilezles.org/articles/msetsmooth\n\n// Modified to change the iteration formula\n\n// increase this if you have a very fast GPU\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))/float(AA)))/iResolution.y;\n        float w = float(AA*m+n);\n        float time = iTime + 0.5*(1.0/24.0)*w/float(AA*AA);\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n        float time = iTime;\n#endif\n    \n        float magnification = 16000. ;\n        float x_center = -0.706370390374415 ;\n        float y_center = 0.48035040536878 ;\n\n        \n        magnification = pow(magnification, 1./8.) ;\n        float zoom = 1./magnification+(1.-1./magnification)*(0.5+0.5*cos(.07*time));\n        zoom = pow( zoom,8.0);\n        \n        vec2 c = p ; // fragCoord.xy / iResolution.xy;\n        c=c*zoom;\n        c.y+= y_center;\n        c.x+=1.+x_center;\n\n        const float B = 256.0;\n        float l = 0.0;\n\t    vec2 z  = vec2(0.0);\n        \n        int k = 0 ;\n        for( int i=0; i<1200; i++ )\n        {\n            if (i%4 == 1 && k < 55) {\n                // z = z*z + c\t\t\n                z = vec2( z.x*z.x - z.y*z.y, 2.0*abs(z.x*z.y) ) + c; \n                k += 1;\n                }\n            else {\n                // z = z*z + c\t\t\n                z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n                }\n\t\t\n    \t\tif( dot(z,z)>(B*B) ) break;\n\n    \t\tl += 1.0;\n        }\n\n    \t// ------------------------------------------------------\n        // smooth interation count\n    \t//float sl = l - log(log(length(z))/log(B))/log(2.0);\n        \n        // equivalent optimized smooth interation count\n    \tfloat sl = l - log2(log2(dot(z,z))) + 4.0; \n    \t// ------------------------------------------------------\n\t\n        float al = smoothstep( -0.1, 0.0, sin(0.5*6.2831*iTime ) );\n        l = sl ; // mix( l, sl, al );\n\n        col += 0.5 + 0.5*cos( 3.0 + l*0.15 + vec3(0.0,0.6,1.0));\n#if AA>1\n    }\n    col /= float(AA*AA);\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}