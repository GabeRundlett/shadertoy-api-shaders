{
    "Shader": {
        "info": {
            "date": "1723665297",
            "description": "This shader is intended to smooth high contrast transitions as an accessibility feature for people like me who can have migraines (or seizures) triggered by flashing lights. This is a first draft proof of concept for the idea, so it needs improvement.",
            "flags": 32,
            "hasliked": 0,
            "id": "McXBD8",
            "likes": 1,
            "name": "Flicker reduction test",
            "published": 3,
            "tags": [
                "accessibility",
                "antiflicker"
            ],
            "usePreview": 0,
            "username": "yonibr",
            "viewed": 72
        },
        "renderpass": [
            {
                "code": "vec3 sample_image(vec2 uv)\n{\n    if (int(iTime * time_mult) % 2 == 0)\n        return texture(iChannel2, uv).rgb;\n    return texture(iChannel3, uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 curr = sample_image(uv);\n    vec3 buffer = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(mix(curr, buffer, 0.85), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 sample_image(vec2 uv)\n{\n    if (int(iTime * time_mult) % 2 == 0)\n        return texture(iChannel2, uv).rgb;\n    return texture(iChannel3, uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(sample_image(fragCoord / iResolution.xy), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 sample_image(vec2 uv)\n{\n    if (int(iTime * time_mult) % 2 == 0)\n        return texture(iChannel2, uv).rgb;\n    return texture(iChannel3, uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(sample_image(fragCoord / iResolution.xy), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float time_mult = 1.5;\n\n\nfloat random(vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n// Converts a color from sRGB gamma to linear light gamma\nvec3 to_linear(vec3 sRGB)\n{\n    bvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n    vec3 higher = pow((sRGB + vec3(0.055)) / vec3(1.055), vec3(2.4));\n    vec3 lower = sRGB / vec3(12.92);\n\n    return mix(higher, lower, cutoff);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define USE_CONTRAST_RATIO_APPROACH\n\nvec3 sample_image(vec2 uv)\n{\n    if (int(iTime * time_mult) % 2 == 0)\n        return texture(iChannel2, uv).rgb;\n    return texture(iChannel3, uv).rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 curr = sample_image(uv);\n    vec3 buffer1 = texture(iChannel0, uv).rgb;\n    vec3 buffer2 = texture(iChannel1, uv).rgb;\n    \n    float time_factor = 1.0 - (iTime * time_mult - floor(iTime * time_mult));\n\n#ifdef USE_CONTRAST_RATIO_APPROACH\n    vec3 linearized_curr = to_linear(curr);\n    vec3 linearized_buffer1 = to_linear(buffer1);\n    //vec3 linearized_buffer2 = to_linear(buffer2);\n    \n    float luminance_curr = dot(linearized_curr, vec3(0.2126, 0.7152, 0.0722));\n    float luminance_buffer1 = dot(linearized_buffer1, vec3(0.2126, 0.7152, 0.0722));\n    //float luminance_buffer2 = dot(linearized_buffer2, vec3(0.2126, 0.7152, 0.0722));\n    \n    float curr_contrast_ratio = (max(luminance_curr, luminance_buffer1) + 0.05) / (min(luminance_curr, luminance_buffer1) + 0.05);\n    //float prev_contrast_ratio = (max(luminance_buffer1, luminance_buffer2) + 0.05) / (min(luminance_buffer1, luminance_buffer2) + 0.05);\n    \n    float curr_diff = clamp(curr_contrast_ratio * time_factor / 1.2, 0.02, 1.0);\n    float prev_diff = 0.0;//clamp(prev_contrast_ratio * time_factor / 12.0, 0.0, 0.35);\n#else\n    float curr_diff = clamp((length(curr - buffer2) + 0.1) * time_factor / 1.5, 0.02, 1.0);\n    float prev_diff = clamp((length(buffer1 - buffer2) + 0.1) * time_factor / 7.0, 0.0, 0.35);\n#endif\n\n    vec3 color = mix(curr, buffer2, curr_diff);\n    color = mix(color, buffer1, prev_diff);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}