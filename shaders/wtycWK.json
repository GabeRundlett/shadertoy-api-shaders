{
    "Shader": {
        "info": {
            "date": "1611765936",
            "description": "flowing paint with a cellular noise function",
            "flags": 0,
            "hasliked": 0,
            "id": "wtycWK",
            "likes": 0,
            "name": "Flowing Paint",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "simple",
                "fbm",
                "perlin",
                "gradient",
                "template",
                "function",
                "value",
                "cellular"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "// noise functions from youtube https://www.youtube.com/watch?v=ybbJz6C9YYA\n// git code https://github.com/Gonkee/Gonkees-Shaders/blob/master/noise%20textures.shader\n\n// making paint flowing effect with cellular noise function \n\n#define PI 3.141592653\n\n\nvec2 rand2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat rand(vec2 coord){\n    coord = mod(coord,10000.);\n    return fract(sin(dot(coord, vec2(12.9898,78.233)))*43758.5453);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nfloat cellular_noise(vec2 coord){\n   vec2 i = floor(coord);\n    vec2 f = fract(coord);\n    \n    float min_dist=9999.;\n   for(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n        vec2 node = rand2(i+vec2(x,y))+vec2(x,y);\n        float dist = sqrt((f-node).x*(f-node).x+(f-node).y*(f-node).y);\n        min_dist = min(min_dist,dist);\n       }\n    }\n    return min_dist;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(.0);\n\n    // Scale\n    st *= 3.;\n\n    float noise;\n    noise = rand(st);\n    noise=cellular_noise(st);\n\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    // Assign a color using the closest point position\n   //  color += dot(f_st,vec2(-0.060,-0.460)*PI/2.*sin(iTime));\n\n    st-=st/2.;\n    st*=rotate2d(noise+PI/cos(iTime*0.005));\n    st*=scale(vec2(rand(st*0.000075)*(atan(fract(iTime/100.)))));\n    st+=st*2.;\n        \n    st*=1.-noise;\n\n   // Add distance field to closest point center\n    color.r =rand(noise*st*0.5)*iTime/100.;\n    color.g =1.-rand(noise*st*0.02)*(abs(cos(iTime/10.)));\n    color.b =0.4-rand(st*noise/sin(iTime));\n\n\n    fragColor = vec4(1.-color,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}