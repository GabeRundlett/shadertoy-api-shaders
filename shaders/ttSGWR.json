{
    "Shader": {
        "info": {
            "date": "1559042604",
            "description": "discrete quaternion transform? may need to restart shader if its black",
            "flags": 32,
            "hasliked": 0,
            "id": "ttSGWR",
            "likes": 1,
            "name": "discrete quaternion transform?",
            "published": 3,
            "tags": [
                "discretequaterniontransform"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    vec2 uv = (u*2.-R)/R.y;\n    if (max(abs(uv.x),abs(uv.y)) > 1.) {\n        o = vec4(0);\n        return;\n    }\n    uv = (uv*.5+.5)*(SIZE/R);\n    o = textureLod(iChannel1,uv,0.);\n    //o = vec4(abs(textureLod(iChannel0,uv,0.).x-textureLod(iChannel1,uv,0.).x)*10.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define R iResolution.xy\n#define SIZE 256.\n#define PI 3.14159265358979",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (max(u.x,u.y)-SIZE >= 0.) return;\n    o = vec4(texelFetch(iChannel0,ivec2(u),0).xyz,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define qidentity vec4(0,0,0,1)\nvec4 qfromEuler(vec3 eu) {//yaw(x)-pitch(y)-roll(z)\n    vec3 sn = sin(eu.yxz*.5),\n        cs = cos(eu.yxz*.5);\n    return vec4(cs.z*cs.y*sn.x-sn.z*sn.y*cs.x,\n                cs.z*sn.y*cs.x+sn.z*cs.y*sn.x,\n                sn.z*cs.y*cs.x-cs.z*sn.y*sn.x,\n                cs.z*cs.y*cs.x+sn.z*sn.y*sn.x);\n}\nvec4 qconjugate(vec4 q) {\n \treturn vec4(-q.xyz,q.w);   \n}\nvec4 qmult(vec4 a, vec4 b) {\n    return vec4(a.y*b.z-a.z*b.y+a.x*b.w+a.w*b.x,\n                a.z*b.x-a.x*b.z+a.y*b.w+a.w*b.y,\n                a.x*b.y-a.y*b.x+a.z*b.w+a.w*b.z,\n                a.w*b.w-a.x*b.x-a.y*b.y-a.z*b.z);\n}\n\nvoid mainImage( out vec4 o, in vec2 u)\n{    \n    if (iFrame == 0) {\n        o = texelFetch(iChannel1,ivec2(u),0);\n        return;\n    }\n    if (iFrame > 2) {\n        o = texelFetch(iChannel0,ivec2(u),0);\n        return;\n    }\n    if (max(u.x,u.y)-SIZE >= 0.) return;\n    \n    float t = 0., st = floor(u.x)*PI/SIZE;\n    vec4 v = vec4(0);\n    for (int x = 0; x < int(SIZE); x++) {\n        vec4 s = texelFetch(iChannel0,ivec2(x,u.y),0);\n     \tv += qmult(s,qfromEuler(vec3(t,0,0)))+qmult(s,qfromEuler(vec3(0,t,0)))+qmult(s,qfromEuler(vec3(0,0,t)));\n        t += st;\n    }\n    if (iFrame == 1) v /= SIZE*12.;\n    o = v;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}