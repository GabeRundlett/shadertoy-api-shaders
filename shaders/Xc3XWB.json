{
    "Shader": {
        "info": {
            "date": "1714360212",
            "description": "Inspired by \"A cube for the cube enjoyers\" by mrange https://www.shadertoy.com/view/clVXWt\n& \"Glitch transform\" by tdhooper https://www.shadertoy.com/view/XtyXzW",
            "flags": 0,
            "hasliked": 0,
            "id": "Xc3XWB",
            "likes": 19,
            "name": "Glass for the glass enjoyers 2",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "abstract",
                "glass",
                "dispersion",
                "diffraction"
            ],
            "usePreview": 0,
            "username": "Nguyen2007",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "/*\nThe sequel of “Glass for the glass enjoyers” :))\nThe new features include:\n\t•\tEnhanced performance: less noise, faster speed, and streamlined code\n\t•\tA new (kinda) spectral path tracer for improved realism\n\t•\tAdded tone mapping for better image quality\n*/\n\nint AA = 20;\n\n#define S smoothstep\n#define N normalize\n\n#define sqr(x) (x) * (x)\n\n#define F(i, x) for(int i = min(-1, iFrame); ++i < x;)\n\n#define t (T + .4 * (1. + p.y) * (1. - sin(T)) - .7)\n\n#define sabs(p) sqrt(sqr(p) + 1e-5)\n\n#define ref(n) d = (d + sabs(dot(p, n)) + sabs(d - sabs(dot(p, n)))) * .5;\n\n#define sym(x) vec3 n = N(vec3(1.62 + x, 1, 0)); float d = 0.; p = sabs(p); ref(n) ref(n.yzx) ref(n.zxy)\n\nuvec2 seed;\n\nvec2 PCG(inout uvec2 v)\n{\n    uint k = 1664525u;\n    \n    v = v * k + 1013904223u;\n    \n    F(i, 2) v.x += v.y * k,\n            v.y += v.x * k,\n            v   ^= v >> 16u;\n\n    return vec2(v) / 4294967296.;\n}\n\n#define rand PCG(seed).x\n\nfloat dod(vec3 p)\n{\n    sym(0.)\n    \n\treturn d;\n}\n\nfloat ico(vec3 p)\n{\n    sym(1.)\n    \n    ref(N(vec3(1)))\n    \n    return d;\n}\n\nfloat map(vec3 p, float T)\n{\n    float a = t + .7 * cos(t) - .7;\n    \n    p.xz *= mat2(cos(a), -sin(a), sin(a), cos(a));\n    \n    //return length(p) - 1.; // debuging\n    \n    return mix(dod(p), ico(p), S(0., 1., S(-1., 1., cos(.5 * t - .785)))) - .8; // PHI / sqrt(9. - 3. * PHI)\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec3 R = iResolution;\n    \n    O = vec4(0);\n    \n    if(abs(I.x / R.x - .5) > .375) return;\n    \n    seed = uvec2(I.x + R.x * I.y, iFrame);\n    \n    F(i, AA)\n    {\n        float T   = mod(iTime + rand * .02, 4.) * 3.14, glow = 0.,\n              ran = fract((float(i) + 2. * rand) / float(AA)), d, dt,\n              IOR = 2. + ran;\n        \n        vec3 p   = vec3(0, 0, -2.6), q, n,\n             rd  = N(vec3((I + PCG(seed) - .5 - .5 * R.xy) / R.y, 1)),\n             col = vec3(1);\n        \n        float s = 1.;\n        \n        F(j, 3)\n        {\n            d = .03;\n            \n            F(k, 50)\n            {\n                if (d > 3. || abs(dt = map(p + rd * d, T)) < .01) break;\n                \n                if (j < 1) glow += .1, dt *= rand;\n                \n                d += dt * s;\n            }\n            \n            s = -s;\n                  \n            if(d > 3.)\n            {\n                if(j > 0) col *= 4. * S(1., 0., abs(4. * ran - vec3(1, 2, 3)));\n                break;\n            }\n            else\n            {\n                p += d * rd;\n                \n                F(k, 3) q = p, q[k] += .01, n[k] = map(q, T);\n                \n                n = N(n - map(p, T));\n                \n                if (s > 0.) n = -n;\n                else IOR = 1. / IOR;\n\n                if (rand < exp(6. * dot(rd, n))) rd = reflect(rd, n);\n                \n                else rd = refract(rd, n, IOR),\n                     col *= mod(t / 3.14 + .5, 4.) < 2. ? vec3(1, .5, .5) : vec3(.5, .5, 1);\n            }\n        }\n        \n        O.xyz += vec3(4, 2, 1) * (col / (.01 + abs(cos(16. * rd.y + 3.5 * T + 2.2 * cos(T)))) + glow) * .05 / vec3(AA);\n    }\n    \n    O /= O + .3;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}