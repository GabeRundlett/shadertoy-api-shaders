{
    "Shader": {
        "info": {
            "date": "1675437580",
            "description": "c'est l'essentiel",
            "flags": 0,
            "hasliked": 0,
            "id": "mllSWX",
            "likes": 0,
            "name": "Diamond_champignon",
            "published": 3,
            "tags": [
                "abouge"
            ],
            "usePreview": 0,
            "username": "S_h",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "//SOULEYMA\n//PARTIEL APREM\nvec2 rot(vec2 st, float a)\n{\n    return st * mat2(cos(a), -sin(a),\n                    sin(a), cos(a));\n}\n\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n\nfloat sdSolidAngle(vec3 p, vec2 c, float ra)\n{\n  // c is the sin/cos of the angle\n  vec2 q = vec2( length(p.xz), p.y );\n  float l = length(q) - ra;\n  float m = length(q - c*clamp(dot(q,c),0.0,ra) );\n  return max(l,m*sign(c.y*q.x-c.x*q.y));\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q= abs(p)-b;\n    return length(max(q,0.0))+min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\nfloat map(vec3 pos) {\n    float v = 0.0;\n\n    vec3 sp1 = pos + vec3(3.0, 0.0, 0.0);\n    vec3 sp2 = pos + vec3(-3.0, 0.0, 0.0);\n    \n    v = sdSphere(sp1, 2.0);\n    v = mix(sdBox(pos, vec3(3.0)), sdSolidAngle(pos, vec2(1.0), 1.0),sin(iTime));\n    \n    //v = opSmoothUnion(v, sdSphere(sp2, 3.0), 1.0);\n    \n    return v;\n}\n\nfloat CastRay(vec3 ro, vec3 rd){\n    float contact = 0.0;\n    for(int i=0; i<64; i++)\n    {\n        float ray= map(ro+rd*contact);\n        if(ray < (0.0001*contact))\n        {\n            return float(i)/32.;\n        }\n        contact +=ray;\n    }\n    return -1.0;\n}\n\nvec3 GetNormal (vec3 pos)\n{\n    float v = map(pos);\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(pos+e.xyy),\n        map(pos+e.yxy),\n        map(pos+e.yyx)\n        ) - v);\n}\n\n\nvec3  render(vec3 ro, vec3 rd){\n    float contact = CastRay(ro, rd);\n    vec3 col = vec3(0.0);\n\n\n    if(contact == -1.0){\n        col = vec3(0.0);}\n    else {\n        col = vec3(1.0-contact);}\n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 cameraPos = vec3(0.0, 9.0, -15.0);\n    vec3 cameraTar = vec3(0.0, 0.0, 0.0);\n    //cameraPos.xy = rot(cameraPos.xz, iTime)*1.0;\n    \n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + 2.0 * forward);\n    \n\n    vec3 col = render(cameraPos, viewDir);\n    col*= (vec3(1.0)* vec3(1.1, 1.0, 1.5) -0.3 + 0.2*cos(iTime));\n    col+= vec3(0.4,sin(iTime),1.4)/3.0;\n\n    fragColor = vec4(col,1.0);\n}\n\n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}