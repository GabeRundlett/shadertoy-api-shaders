{
    "Shader": {
        "info": {
            "date": "1727850191",
            "description": " an atmosphere renderer it is not finished but it looks nice anyways",
            "flags": 0,
            "hasliked": 0,
            "id": "X3ScWc",
            "likes": 0,
            "name": "atmosphere renderer",
            "published": 3,
            "tags": [
                "cgi"
            ],
            "usePreview": 0,
            "username": "simplexqwe",
            "viewed": 53
        },
        "renderpass": [
            {
                "code": "mat3 getcam(vec3 ro,vec3 rg){\n    vec3 camf = normalize(rg-ro);\n    vec3 camr = normalize(cross(vec3(0,1,0),camf));\n    vec3 camu = cross(camf,camr);\n    return mat3(camr,camu,camf);\n}\n\nvoid mousecontrol(inout vec3 ro){\n    vec2 m = iMouse.xy/iResolution.xy;\n    pR(ro.yz,m.y/2.);\n    pR(ro.xz,m.x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    vec3 ro = vec3(0.,1.,0.);\n    vec3 rg = vec3(0.,2.,0.);\n    mousecontrol(rg);\n    vec3 rd = getcam(ro,rg)*normalize(vec3(uv,FOV));\n    \n    vec3 light=vec3(10.,10.,5.);\n\n\n    vec3 co=vec3(0.);\n    co.x=raySphere(vec3(0.,-40.,0.),50.,ro,rd).y/100.;\n    co.y=raySphere(vec3(0.,-40.,0.),40.,ro,rd).x/1.;\n    co.z=raySphere(light,.1,ro,rd).x/1.;\n    \n    vec3 skyboxhit = vec3(ro+(rd*raySphere(vec3(0.,-40.,0.),50.,ro,rd).y));\n    \n    co+=col(S(3.,dot(normalize(ro-skyboxhit),normalize(skyboxhit-light))))/4.;\n    \n\n    \n\n    fragColor = vec4(co,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FOV 1.\n#define PI radians(180.)\n#define TAU PI*2.\n\nvec3 Geoffrey(float t)\n{\n    vec3 r = t * 2.1 - vec3(1.8, 1.14, 0.3);\n    return 0.99 - r * r;\n}\n\nvec3 col(float uv){\n    vec3 col1 = Geoffrey(uv * 2.0 - 0.5);\n    vec3 col = vec3(0.0);\n    col = col1;\n    return col;\n\n}\n\nfloat S(float lambda, float theta){\n    return lambda*(2.+theta*theta*2.)/(3.*TAU);\n}\n\n\n\n\nvec2 raySphere (vec3 sphereCentre, float sphereRadius, vec3 rayOrigin, vec3 rayDir) {\n        vec3 offset = rayOrigin - sphereCentre;\n        const float a = 1.; // set to dot(rayDir, rayDir) if rayDir might be unnormalized\n        float b = 2. *(dot (offset, rayDir));\n        float c = dot (offset, offset) - sphereRadius * sphereRadius;\n\n        float discriminant = b * b - 4. * a * c;\n\n        // No intersections: discriminant < 0\n        // 1 intersection: discriminant == 0\n        // 2 intersections: discriminant > 0\n        if (discriminant > 0.) {\n            float s = sqrt (discriminant);\n            float dstToSphereNear = max (0., (-b - s) / (2. * a));\n            float dstToSphereFar = (-b + s) / (2. * a);\n\n            if (dstToSphereFar >= 0.) {\n                return vec2 (dstToSphereNear, dstToSphereFar - dstToSphereNear);\n            }\n        }\n        return vec2(0.);\n    }\n    \nvoid pR(inout vec2 p, float a) {\n    a*=TAU;\n    p*=mat2(\n    cos(a),-sin(a),\n    sin(a),cos(a)\n    );\n    \n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}