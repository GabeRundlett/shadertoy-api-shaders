{
    "Shader": {
        "info": {
            "date": "1654485953",
            "description": "xd\nDrag to move camera :>",
            "flags": 0,
            "hasliked": 0,
            "id": "fsyyRD",
            "likes": 2,
            "name": "Poorly optimized fractal",
            "published": 3,
            "tags": [
                "poorlyoptimizedfractal"
            ],
            "usePreview": 0,
            "username": "ganerCodes",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793238\n\nmat2 rotMatrix(vec2 p, float r) { vec2 s = vec2(cos(r), sin(r)); return mat2(s.x, -s.y, s.y,  s.x); }\nvec3 rot_XY(vec3 p, float r){ vec2 m = p.xy * rotMatrix(p.xy, r); return vec3(m, p.z); }\nvec3 rot_XZ(vec3 p, float r){ vec2 m = p.xz * rotMatrix(p.xz, r); return vec3(m.x, p.y, m.y); }\nvec3 rot_YZ(vec3 p, float r){ vec2 m = p.yz * rotMatrix(p.yz, r); return vec3(p.x, m); }\nvec3 rot_XZ_YZ(vec3 p, float r1, float r2) { return rot_XZ(rot_YZ(p, r1), r2); }\n\nfloat func(vec3 o) {\n    vec3 l = vec3(0.0);\n    float i = 0.0;\n    float m = 125.0;\n    while(i < m) {\n        float r = length(l);\n        float t = atan(length(l.xy), l.z);\n        float p = atan(l.y, l.x);\n        float n = 6.0;\n        l = pow(r, n) * vec3(\n            sin(t*n)*cos(p*n),\n            sin(t*n)*sin(p*n),\n            cos(t*n)\n        ) + o;\n        if(length(l) >= 4.0) {\n            return i / m;\n        }\n        i += 1.0;\n    }\n    return 1.0;\n}\n\nvec3 rot(vec3 p, vec3 r) {\n    p = rot_XY(p, r.x);\n    p = rot_XZ(p, r.y);\n    p = rot_YZ(p, r.z);\n    return p;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pos = fragCoord / iResolution.xy;\n    \n    float t = 0.1 * iTime;\n    \n    vec3 vp_loc = vec3(2.0, 0.0, 0.0);\n    vec2 vp_ang = iMouse.xy==vec2(0.0) ? vec2(0.5*PI, PI) : (PI -  2.0 * PI * ((iMouse.xy / iResolution.xy) - 0.5));\n    float FOV = 130.0;\n    float cam_dist = 140.0;\n    \n    float hFOV = FOV * tan(PI * FOV / 360.0);\n    vec3 p_e = vec3(\n        hFOV * (pos - 0.5) * (iResolution.xy / iResolution.x),\n        -cam_dist);\n    \n    vec3 p_cast_s = vp_loc;\n    vec3 p_cast_e = vp_loc + rot_XZ_YZ(p_e, -vp_ang.y, vp_ang.x);\n    \n    vec3 rots = vec3(t, 0.75 * t, -1.25 * t);\n    p_cast_s = rot(p_cast_s, rots);\n    p_cast_e = rot(p_cast_e, rots);\n    \n    vec3 loc = p_cast_s;\n    vec3 delt = 0.001 * normalize(p_cast_e - p_cast_s);\n    vec3 col = vec3(0.0);\n    float i = -1.0;\n    while(i <= 300.0) {\n        i += 1.0;\n        float q = func(loc);\n        loc += max(1.0, 10.0 * (1.0 - q)) * delt;\n        if(q < 0.1) {\n            continue;\n        }else{\n            col = clamp(\n                2.0 * (0.1 * q + 1.0 - 0.1 * length(p_cast_s - loc)) * vec3(\n                mod(0.5 * abs(sin(loc.x - loc.y)), 1.0),\n                mod(0.5 * abs(sin(loc.y - loc.z)), 1.0),\n                mod(0.5 * abs(sin(loc.z - loc.x)), 1.0)\n            ), 0.0, 1.0);\n            break;\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}