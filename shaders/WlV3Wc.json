{
    "Shader": {
        "info": {
            "date": "1580080909",
            "description": "I've tried to make a  voronoi noise where a pixel/fragment only has to check three neighbours instead of 9.\n\nit kinda works, but its very uniform due to the limited area for the random points",
            "flags": 0,
            "hasliked": 0,
            "id": "WlV3Wc",
            "likes": 6,
            "name": "4-point voronoi",
            "published": 3,
            "tags": [
                "voronoi",
                "test",
                "experiment"
            ],
            "usePreview": 0,
            "username": "Wasserwecken",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "vec2 r( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat v(vec2 n)\n{\n\tfloat d = 2.0;\n\tvec2 nfl = floor(n);\n\tvec2 nfr = fract(n);\n\n\tvec2 p;\n\tvec2 ns = sign(nfr - vec2(0.5));\n\tfor(float x = 0.0; x < 2.0; x++)\n\t{\n\t \tfor(float y = 0.0; y < 2.0; y++)\n\t \t{\n\t \t    vec2 ne = vec2(x,y) * ns;\n\t \t   \n\t \t    p = r(nfl + ne) * 0.7 + 0.15 + ne;\n            //p = r(nfl + ne) + ne; //This will create artefacts\n\t \t    d = min(distance(p, nfr), d);\n\t \t}\n\t }\n\n\t return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv *= 10.0;\n    uv += iTime * 0.3;\n\n    // Output to screen\n    fragColor = vec4(vec3(v(uv)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}