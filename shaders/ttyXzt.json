{
    "Shader": {
        "info": {
            "date": "1583351815",
            "description": "A shadertoy port of my Grafiikka entry at Instanssi 2020. Placed 2nd out of 16 entries.\n\nDownload the original executable version here: [url]https://www.pouet.net/prod.php?which=84949[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "ttyXzt",
            "likes": 24,
            "name": "Kuu",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "pathtraced"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1055
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 tex = texture(iChannel0,uv);\n    \n    // divide by sample-count\n\tvec3 color = tex.rgb/tex.a;\n    \n    #if !GRADING\n    fragColor.rgb=color;return;\n    #endif\n    \n\t// vignette to darken the corners\n\tuv-=.5;\n\tcolor *= 1.-dot(uv,uv)*.8;\n\n    // exposure and tonemap\n    color *= .3;\n    color = 1.-exp(color*-2.);\n\n\t// gamma correction\n\tcolor = pow(color, vec3(.45));\n\n    // make it pop\n    color = smoothstep(.44,.98,color);\n\t    \n\tfragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi acos(-1.)\n#define tau (pi*2.)\n\nmat2 rotate(float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return mat2(c,-s,s,c);\n}\n\nvec2 hash2( const float n ) {\n\treturn fract(sin(vec2(n,n+1.))*vec2(43758.5453123));\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec3 project(vec2 p)\n{\n    return vec3(\n        (2.*p.x) / (1.+dot(p,p)),\n        (-1.+dot(p,p)) / (1.+dot(p,p)),\n        (2.*p.y) / (1.+dot(p,p))\n    );\n}\n\nvec2 uvfromp(vec3 p)\n{\n    p.y+=2.;\n    return vec2(atan(p.y,p.z)/tau,p.x*.01).yx;\n}\n\nfloat getTex(vec2 uv) {\n\treturn texture(iChannel1,vec2(pow(uv.x+uv.y+.01,2.)*2.,0)*2.).r;\n}\n\nfloat scene(vec3 p)\n{\n    p.xz*=rotate(.4);\n    \n    float d = 1e9;\n    float ground = p.y;\n    d=min(d,abs(length((p-vec3(0,5,0)).xyz)-5.)-.01);\n\n    vec3 orbiterPos = vec3(-6,7,-6.3);\n    d=min(d,abs(length((p-orbiterPos).xyz)-.7)-.01);\n\n    vec2 tuv = uvfromp(p);\n    \n    // vent pattern\n    float a = (getTex(tuv)-.4)*.2;\n    d=max(d,a);\n\t\n    tuv = uvfromp(project(p.xz/10.)*5.+vec3(0,5,0));\n\tfloat b = smoothstep(0.,1.,getTex(tuv));\n    ground-=b*.025;\n\t\n\t// ring\n\tp.y-=5.;\n\tp.xy*=rotate(.29);\n\tp.x/=1.1;\n\td=min(d,sdTorus(p,vec2(8.6,.02)));\n\n    return min(d,ground);\n}\n\nvec2 rv2;\n\nvec3 ortho(vec3 a){\n    vec3 b=cross(vec3(-1,-1,-1),a);\n    // assume b is nonzero\n    return (b);\n}\n\n// various bits of lighting code \"borrowed\" from \n// http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/\nvec3 getSampleBiased(vec3  dir, float power) {\n\tdir = normalize(dir);\n\tvec3 o1 = normalize(ortho(dir));\n\tvec3 o2 = normalize(cross(dir, o1));\n\tvec2 r = rv2;\n\tr.x=r.x*2.*pi;\n\tr.y=pow(r.y,1.0/(power+1.0));\n\tfloat oneminus = sqrt(1.0-r.y*r.y);\n\treturn cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;\n}\n\nvec3 getConeSample(vec3 dir, float extent) {\n\tdir = normalize(dir);\n\tvec3 o1 = normalize(ortho(dir));\n\tvec3 o2 = normalize(cross(dir, o1));\n\tvec2 r =  rv2;\n\tr.x=r.x*2.*pi;\n\tr.y=1.0-r.y*extent;\n\tfloat oneminus = sqrt(1.0-r.y*r.y);\n\treturn cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;\n}\n\nfloat sky(vec3 sunDir, vec3 viewDir) {\n    return max(0.,dot(sunDir,viewDir)+.2)*.8;\n}    \n\nbool trace5(vec3 cam, vec3 dir, out vec3 h, out vec3 n, out float k) {\n\tfloat t=0.;\n    for(int i=0;i<164;++i)\n    {\n        k = scene(cam+dir*t);\n        t += k;\n        if (abs(k) < .001)\n            break;\n    }\n\n    h = cam+dir*t;\n\t\n    // if we hit something\n    if(abs(k)<.001)\n    {\n        vec2 o = vec2(.001, 0);\n        k=scene(h);\n        n = normalize(vec3(\n            scene(h+o.xyy) - k,\n            scene(h+o.yxy) - k,\n            scene(h+o.yyx) - k \n        ));\n        return true;\n    }\n    return false;\n}\n\nfloat trace2(vec3 cam, vec3 dir)\n{\n    vec3 sunDirection = normalize(vec3(-.3,.7,-1.));\n    const float sunSize = 1e-4;\n    float sunColor = 2.;\n    \n    float accum = 1.;\n    float direct = 0.;\n    for(int ibounce=0;ibounce<5;++ibounce)\n    {\n        vec3 h,n;\n        float k;\n        if (trace5(cam,dir,h,n,k))\n        {\n            #if !SHADING\n            \treturn dot(-dir,n);\n            #endif\n            \n            cam = h+n*.002;\n            dir=getSampleBiased(n,1.);\n             \n            vec3 sunSampleDir = getConeSample(sunDirection,sunSize);\n            float sunLight = dot(n, sunSampleDir);\n            vec3 dummy0,dummy1;\n            float dummy2;\n            if (sunLight>0.0 && !trace5(h + n*.002,sunSampleDir,dummy0,dummy1,dummy2)) {\n                direct += accum*sunLight*sunColor;\n            }\n            rv2=hash2(rv2.y);\n        }\n        else if (abs(k) > .1) {\n            return direct + sky(sunDirection, dir) * accum;\n        } else {\n            break;\n        }\n    }\n    \n    // deliberately fail the pixel\n    return -1.;\n}\n\nvec2 bokeh(){\n\tvec2 a=rv2;\n    if(a.y>a.x)\n        a=1.-a;\n    a.y*=pi*2./a.x;\n    return a.x*vec2(cos(a.y),sin(a.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // recover previous frame for iterative rendering\n   \tfragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\t\n    \n    // get UVs\n    vec2 uv = fragCoord.xy/iResolution.xy-.5;\n    \n    // seed per-pixel\n\trv2 = hash2( iTime+(uv.x+iResolution.x*uv.y)*1.51269341231 );\n  \n    // jitter for antialiasing\n    uv += (rv2-.5)/iResolution.xy;\n    \n    // correct UVs for aspect ratio\n    uv.x*=iResolution.x/iResolution.y;\n\t\n\tconst float cameraFisheye = .2;\n    uv = normalize(uv) * tan(asin(length(uv) * cameraFisheye)) / cameraFisheye;\n\n    // camera params\n    const vec3 camPos = vec3(100,105,-100);\n    const vec3 lookAt = vec3(0,5,0);\n    const float focusDistance=distance(camPos,lookAt);\n    const vec2 apertureRadius=vec2(1,2)*.1;\n   \n    // make a camera\n    vec3 cam = vec3(0);\n    vec3 dir = normalize(vec3(uv,10.));\n    \n    // slight bokeh\n    vec2 bokehJitter=bokeh();\n    cam.xy+=bokehJitter*apertureRadius;\n    dir.xy-=bokehJitter*apertureRadius*dir.z/focusDistance;\n\n    // rotate/move the camera\n    vec3 lookDir = lookAt-camPos;\n    float pitch = -atan(lookDir.y,length(lookDir.xz));\n    float yaw = -atan(lookDir.x,lookDir.z);\n    cam.yz *= rotate(pitch);\n    dir.yz *= rotate(pitch);\n    cam.xz *= rotate(yaw);\n    dir.xz *= rotate(yaw);\n    cam += camPos;\n    \n    // compute the pixel color\n\tfloat pixel = trace2(cam,dir);\n        \n    if (iMouse.z > 0.) {\n        fragColor = vec4(0);\n    }\n\n    fragColor += (!isnan(pixel) && pixel >= 0.) ? vec4(vec3(pixel),1) : vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SHADING 1\n#define BOKEH (SHADING && 1)\n#define GRADING (SHADING && 1)\n\n/*\n\n~ Kuu\n  by yx/Polarity\n\n~ 2.4kb executable graphics\n  released at Instanssi 2020\n\n~ should take no longer than 15 seconds to render\n\n~ tools:\n  crinkler 2.1a by loonies & tbc\n  shader minifier by llb\n\n~ greetings:\n  alkama\n  blackle\n  cpdt\n  evvvvil\n  fizzer\n  flopine\n  noby\n  nusan\n  slerpy\n  tdhooper\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}