{
    "Shader": {
        "info": {
            "date": "1515742819",
            "description": "just some fun",
            "flags": 64,
            "hasliked": 0,
            "id": "XlBBDD",
            "likes": 3,
            "name": "Open box fractal",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 636
        },
        "renderpass": [
            {
                "code": "#define mouse iMouse\n#define resolution iResolution\n#define time iTime\n#define PI 3.1415926\n\nfloat id;\n\nfloat fftsmooth(float a, sampler2D s)\n{\n    //from nick shelton\n    //FFT_smooth_n = FFTRaw_n * alpha + FFT_smooth_n-1 * (1 - alpha)\n    float audio = texture(s, vec2(.5)).r;\n    return audio * a + audio-1. * (1.-a);\n    \n}\n\nvec3 hue(vec3 color, float shift) {\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI     = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ     = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR   = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG   = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB   = vec3 (1.0, -1.107, 1.704);\n\n    // Convert to YIQ\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n\n    // Calculate the hue and chroma\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    // Make the user's adjustments\n    hue += shift;\n\n    // Convert back to YIQ\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    // Convert back to RGB\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n\n    return color;\n}\n\nmat2 r(float a)\n{\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat box(vec3 p, float s)\n{\n    p = abs(p);\n    float d = max(p.x, max(p.y, p.z)) - s;\n    d = max(d, -(max(\n        min(p.x, p.y), max(\n            min(p.x, p.z), min(p.y, p.z))\n        ) - s*.8));\n    return d;\n}\n\nfloat map(vec3 p)\n{\n    //p.z -= time;\n    p = mod(p+3., 6.)-3.;\n    float A = fftsmooth(.3, iChannel0);\n    p.z += 1.;\n    float d = 1e5, s = .8;\n    id = 0.;\n    for (int i = 0; i < 7; i++)\n    {       \n        p = abs(p);\n        p.xz *= r(A*.5);\n        p.yz *= r(A*.5);\n        p.xy *= r(A*.5);\n        p.x -= s*.5 + A*.1;\n        p.y -= s*.5 + A*.1;\n        s *= .8 + .5*sin(float(i) + time);\n        d =  min(d, box(p, s));\n        id = float(i);\n    }\n    return d;\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    for (int i = 0; i < 50; i++)\n    {\n        vec3 p = ro + rd * t;\n        float h = map(p);\n        t += h;\n        if (h < 1e-2 || t > 40.) break;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy-resolution.xy) / resolution.y;\n    vec3 ro = vec3(0, 0, 1), rd = normalize(vec3(uv, -1));\n    float t = trace(ro, rd);\n    vec3 p = ro + rd * t;\n    fragColor += t*.4;\n    fragColor.g = 0.;\n    fragColor.xyz = hue(fragColor.xyz, sin(id+t + time));\n    fragColor = mix(fragColor, vec4(0.), smoothstep(20., 20.5, t));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 13113,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/randyachtz/trustme"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}