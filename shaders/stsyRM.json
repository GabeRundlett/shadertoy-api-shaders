{
    "Shader": {
        "info": {
            "date": "1647703400",
            "description": "basic feedback demo",
            "flags": 34,
            "hasliked": 0,
            "id": "stsyRM",
            "likes": 6,
            "name": "ccb feedback test",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nhttps://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n\nvec2 R = iResolution.xy,\n  // U = fragCoord / R.y;                     // [0,1] vertically\n     U = ( 2.*fragCoord - R ) / R.y;          // [-1,1] vertically\n  // U = ( fragCoord - .5*R ) / R.y;          // [-1/2,1/2] vertically\n  // U = ( 2.*fragCoord - R ) / min(R.x,R.y); // [-1,1] along the shortest side\n*/  \n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 st =  (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 offsetInput = texture(iChannel0, uv).rgb;\n\n    vec2 feedbackOffset = vec2(sin(st.x * 40.), cos(st.y * 40. + iTime)) * .0005;\n    //vec2 feedbackOffset = (offsetInput.xy * 2. - 1.) * .001;\n    //vec2 feedbackOffset = st * .001;\n    vec3 prevFrame = texture(iChannel0, uv - feedbackOffset).rgb;\n    vec3 cameraFrame = texture(iChannel1, uv).rgb;\n    vec3 color = prevFrame * .99 + cameraFrame * .01;\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}