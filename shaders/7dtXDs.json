{
    "Shader": {
        "info": {
            "date": "1634351565",
            "description": "Subtractive blending of coloured cells of a tesseract. Use the mouse to rotate. Slight pause in movement is on the B4 Coxeter plane projection.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dtXDs",
            "likes": 14,
            "name": "Glass Tesseract",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "4d",
                "tesseract",
                "hypercube",
                "polytope"
            ],
            "usePreview": 1,
            "username": "davidar",
            "viewed": 552
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926536\n\nmat4 rot(float wx, float wy, float wz, float xy, float xz, float yz) {\n    mat4 result = mat4(cos(wx), 0, 0, -sin(wx),\n                       0, 1, 0, 0,\n                       0, 0, 1, 0,\n                       sin(wx), 0, 0, cos(wx)\n                       );\n    result *= mat4(1, 0, 0, 0,\n                   0, cos(wy), 0, -sin(wy),\n                   0, 0, 1, 0,\n                   0, sin(wy), 0, cos(wy)\n                   );\n    result *= mat4(1, 0, 0, 0,\n                   0, 1, 0, 0,\n                   0, 0, cos(wz), -sin(wz),\n                   0, 0, sin(wz), cos(wz)\n                   );\n    result *= mat4(cos(xy), -sin(xy), 0, 0,\n                   sin(xy), cos(xy), 0, 0,\n                   0, 0, 1, 0,\n                   0, 0, 0, 1\n                   );\n    result *= mat4(cos(xz), 0, -sin(xz), 0,\n                   0, 1, 0, 0,\n                   sin(xz), 0, cos(xz), 0,\n                   0, 0, 0, 1\n                   );\n    result *= mat4(1, 0, 0, 0,\n                   0, cos(yz), -sin(yz), 0,\n                   0, sin(yz), cos(yz), 0,\n                   0, 0, 0, 1\n                   );\n    return result;\n}\n\nfloat inQuad(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return smoothstep(2e-3, -2e-3, sdQuad(p, a, b, c, d)) +\n           smoothstep(2e-3, -2e-3, sdQuad(p, d, c, b, a));\n}\n\nvec3 colCell(vec2 p) {\n    return hsv2rgb(vec3(atan(p.y,p.x) / (2.*PI), 1, 0.3));\n}\n    \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 xy = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 m = 2.0*(2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    if (iMouse.z <= 0.) m = vec2(0);\n\n    float t = 0.5 * smoothstep(0., 1., fract(0.1 * iTime));\n    mat4 R = rot(1.75*PI + m.x, 1.5*PI + m.y, PI*(1.25 + 2.*t), PI*(0.5 + 3.*t), PI*(1.75 + 5.*t), PI*(1. + 7.*t));\n    vec3 col = vec3(0);\n\n    #define H vec3(0.5, -0.5, 0)\n    #define FACE(i0,i1,i2,i3) mask += inQuad(xy, (R*H.i0).xy, (R*H.i1).xy, (R*H.i2).xy, (R*H.i3).xy);\n    #define FACExx(idx) FACE(xxxx.idx, xxxy.idx, xxyy.idx, xxyx.idx)\n    #define FACExy(idx) FACE(xyxx.idx, xyxy.idx, xyyy.idx, xyyx.idx)\n    #define FACEyx(idx) FACE(yxxx.idx, yxxy.idx, yxyy.idx, yxyx.idx)\n    #define FACEyy(idx) FACE(yyxx.idx, yyxy.idx, yyyy.idx, yyyx.idx)\n\n    #define CELLx(idx) { \\\n        float mask = 0.; \\\n        FACExx(xyzw.idx); FACExx(xzyw.idx); FACExx(xzwy.idx); \\\n        FACExy(xyzw.idx); FACExy(xzyw.idx); FACExy(xzwy.idx); \\\n        col += clamp(mask, 0., 1.) * colCell((R*H.xzzz.idx).xy); \\\n    }\n    #define CELLy(idx) { \\\n        float mask = 0.; \\\n        FACEyx(xyzw.idx); FACEyx(xzyw.idx); FACEyx(xzwy.idx); \\\n        FACEyy(xyzw.idx); FACEyy(xzyw.idx); FACEyy(xzwy.idx); \\\n        col += clamp(mask, 0., 1.) * colCell((R*H.yzzz.idx).xy); \\\n    }\n\n    CELLx(xyzw);\n    CELLy(xyzw);\n    CELLx(yxzw);\n    CELLy(yxzw);\n    CELLx(yzxw);\n    CELLy(yzxw);\n    CELLx(yzwx);\n    CELLy(yzwx);\n\n    fragColor = vec4(sqrt(1. - col), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright © 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a quad.\n//\n// List of other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n//\n// Gradient of a quad here: https://www.shadertoy.com/view/WtVcD1\n\n\n// signed distance to a 2D quad\nfloat sdQuad( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3 )\n{\n\tvec2 e0 = p1 - p0; vec2 v0 = p - p0;\n\tvec2 e1 = p2 - p1; vec2 v1 = p - p1;\n\tvec2 e2 = p3 - p2; vec2 v2 = p - p2;\n\tvec2 e3 = p0 - p3; vec2 v3 = p - p3;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    vec2 pq3 = v3 - e3*clamp( dot(v3,e3)/dot(e3,e3), 0.0, 1.0 );\n    \n    vec2 ds = min( min( vec2( dot( pq0, pq0 ), v0.x*e0.y-v0.y*e0.x ),\n                        vec2( dot( pq1, pq1 ), v1.x*e1.y-v1.y*e1.x )),\n                   min( vec2( dot( pq2, pq2 ), v2.x*e2.y-v2.y*e2.x ),\n                        vec2( dot( pq3, pq3 ), v3.x*e3.y-v3.y*e3.x ) ));\n\n    float d = sqrt(ds.x);\n\n\treturn (ds.y>0.0) ? -d : d;\n}\n\n\n// The MIT License\n// Copyright © 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Somehow optimized HSV and HSL to RGB conversion functions. \n\n//========================================================================\n\nconst float eps = 0.0000001;\n\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + eps)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              // H\n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + eps),  // S\n                 (minc+maxc)*0.5 );                           // L\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}