{
    "Shader": {
        "info": {
            "date": "1725655932",
            "description": "a rather complex way to visualize the binary face panel for the Chippy Mod PC (from Intel Mod workshop).\n\nThe Image pass essentially doing the mock display\nthe Buffer A is rendering the face, no matter what buffer resolution it should work.",
            "flags": 32,
            "hasliked": 0,
            "id": "4cBBRy",
            "likes": 1,
            "name": "Chippy Case Mod faces [WIP]",
            "published": 3,
            "tags": [
                "display",
                "leds"
            ],
            "usePreview": 0,
            "username": "jakel101",
            "viewed": 66
        },
        "renderpass": [
            {
                "code": "// Apache 2.0 for this shader, but the original images might be copyrighted by Intel.\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float short_edge = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/short_edge;\n    uv *= 1.1; // lazy scale/camera\n    uv += vec2(sin(iTime), cos(iTime))*0.034;\n        \n    \n    // base background (LED is on?)\n    vec3 col = vec3(0.01, 0.8, 0.23);\n    \n    // 1 pixel is 4 LEDs\n    // IDs from\n    vec2 pixelID = floor(uv*float(PIXELS/2));\n    // every single LED from 0 to 1 in x and y\n    vec2 LED_space = fract(uv*float(LEDs/2));\n    \n    // -1.0 outside the area, otherwise from (0 to 1 in 32 steps)\n    vec2 pixel_space = (pixelID + float(PIXELS/2)) / float(PIXELS);\n    \n    // enforce the outer edge, needs a refactor\n    if (pixel_space.x >=1.0) {\n        pixel_space.x = -1.0;\n    }\n    if (pixel_space.y >=1.0) {\n        pixel_space.y = -1.0;\n    }\n    \n     \n    if (pixel_space.x < 0.0 || pixel_space.y < 0.0) {\n        // the outside area is just bluish for now.\n        col = vec3(0.2, 0.4, 0.6);\n        if ((abs(uv.x) > 1.3) && (abs(uv.y) < 0.4)) {\n            // gold parts for the SMDs?\n            col = vec3(0.7, 0.8, 0.1);\n        }\n    }\n    else {\n        \n        // temporal LED visualizer\n        col.rgb *= 1.4 - length(LED_space-vec2(0.5));\n        // sample from the Buffer A (in iChannel0). With half a pixel offset to sample the center of those pixels.\n        float half_pixel = (1.0/float(PIXELS*2));\n        vec4 c0 = texture(iChannel0, (pixel_space + half_pixel));\n        float on_pixels = step(0.5, c0.r); // quickly ensure binary output using threshold\n        \n        // always on outer border (2 LEDs, 1 pixel)\n        float border_width = (1.0/(float(PIXELS)-1.0));\n        if ((pixel_space.x > (1.0 - border_width)) ||\n            (pixel_space.y > (1.0 - border_width)) ||\n            (pixel_space.x < 0.5 * (border_width)) ||\n            (pixel_space.y < 0.5 * (border_width)) ){\n            on_pixels = 1.0;\n        }\n        \n        // simulate on/off LEDs\n        col = mix(col, 0.1*col, 1.0-on_pixels);\n        \n\n    }\n    \n    fragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv *= 2.0;\n    vec2 m = iMouse.xy/iResolution.xy;\n    m -= .5;\n    m *= 2.0;\n    \n    // eyes follow the mouse a bit \n    float eyes = length(vec2(abs(uv.x - 0.1*m.x) -0.4, (uv.y - 0.1*m.y) -0.2)) - 0.15; // last part is size\n    // TODO pupil\n    eyes = smoothstep(0.0, 0.02, eyes);\n    \n    \n    // todo wavy or something\n    float edges = 1.0 - smoothstep(0.0, 0.02, length(uv) - 1.);\n    \n    //todo freckles\n    \n    float mouth = 0.0;\n    \n    //TODO: webcam?\n    vec4 c0 = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    float face = 1.0;\n    face *= eyes;\n    face *= edges;\n    fragColor = vec4(vec3(face),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// global constants (might not actually change. so redundant)\n\n// the original has 64x64 LEDs but 32x32 effective pixels. The outer border being unused.\n\nint LEDs = 64;\nint PIXELS = 32;\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}