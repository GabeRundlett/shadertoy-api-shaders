{
    "Shader": {
        "info": {
            "date": "1547544546",
            "description": "Basket",
            "flags": 0,
            "hasliked": 0,
            "id": "tsl3Wj",
            "likes": 10,
            "name": "Woven Basket",
            "published": 3,
            "tags": [
                "reflection",
                "weave"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "// \"Woven Basket\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltPos;\nfloat dstFar, tCur;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, rt, rc, s, h;\n  dMin = dstFar;\n  rt = 0.1;\n  rc = 20. / pi;\n  h = 5.;\n  p.y -= h + 2. * rt;\n  p.xz *= 1.4 - 0.4 * (p.y + h) / h;\n  q = p;\n  q.xz = vec2 (rc * atan (q.z, - q.x), length (q.xz) - rc);\n  d = length (vec2 (abs (q.y) - h, q.z)) - 2. * rt;\n  DMIN (2);\n  q.xy = mod (q.xy + 0.5, 1.) - 0.5;\n  s = rt * cos (2. * pi * q.x);\n  d = max (min (length (vec2 ((mod ((q.x - q.y) + 0.5, 1.) - 0.5) / sqrt (2.), q.z + s)),\n     length (vec2 ((mod ((q.x + q.y) + 0.5, 1.) - 0.5) / sqrt (2.), q.z - s))) - rt, abs (p.y) - h);\n  DMIN (1);\n  q = p;\n  q.y -= - h;\n  d = PrCylDf (q.xzy, rc, 0.5 * rt);\n  DMIN (3);\n  return 0.4 * dMin;\n}\n\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.1, h);\n    if (sh < 0.05 || d > dMax) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 ltDir, col, colR, vn, roo, rdo;\n  float dstObj, vDotL, a, sh, att;\n  bool isRefl;\n  isRefl = false;\n  ltDir = normalize (ltPos);\n  col = vec3 (0.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj >= dstFar && rd.y < 0.) {\n    ro += (- ro.y / rd.y) * rd;\n    roo = ro;\n    rdo = rd;\n    rd = reflect (rd, VaryNf (64. * ro, vec3 (0., 1., 0.), 0.05));\n    isRefl = true;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = mix (vec4 (1., 1., 0.2, 0.3), vec4 (1., 0.9, 0.1, 0.3), - dot (vn, rd));\n    if (idObj != 1) {\n      a = atan (ro.z, - ro.x);\n      col4 *= 0.95 + 0.05 * cos ((idObj == 2) ? 256. * a : 8. * pi * length (ro.xz) + a);\n    }\n    sh = ObjSShadow (ro, ltDir, length (ltPos - ro));\n    vDotL = max (dot (vn, ltDir), 0.);\n    col = col4.rgb * (0.2 + 0.8 * sh * vDotL * vDotL) +\n       col4.a * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n  }\n  if (isRefl) {\n    col4 = vec4 (0.4, 0.1, 0., 0.2) * (0.3 + 0.7 * Fbm2 (vec2 (0.25, 1.) * roo.xz));\n    att = smoothstep (0.7, 0.95, dot (normalize (ltPos - roo), ltDir));\n    sh = min (ObjSShadow (roo, ltDir, length (ltPos - roo)), att);\n    colR = col4.rgb * (0.2 * att + 0.8 * sh * max (ltDir.y, 0.)) +\n       col4.a * sh * pow (max (normalize (ltDir - rdo).y, 0.), 32.);\n    col = mix (colR, col, 0.2);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.13 * pi * sin (0.033 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, 0.);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 4., -50.);\n  ro.y = max (ro.y, 0.1);\n  dstFar = 100.;\n  ltPos = vec3 (0., 0., 100.);\n  ltPos.yz = Rot2D (ltPos.yz, -0.35 * pi * (1. + 0.1 * sin (0.2 * pi * tCur)));\n  ltPos.xz = Rot2D (ltPos.xz, 0.5 * pi * cos (0.3 * pi * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 3.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}