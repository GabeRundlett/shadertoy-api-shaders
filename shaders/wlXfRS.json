{
    "Shader": {
        "info": {
            "date": "1596997728",
            "description": "\nOriginated from playing with functions from chapter 6, 7, and 8 of The Book of Shaders \nhttps://thebookofshaders.com/06/\nhttps://thebookofshaders.com/07/\nhttps://thebookofshaders.com/08/\nhttp://thebookofshaders.com/edit.php?log=200809180254\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wlXfRS",
            "likes": 0,
            "name": "Twisted Distance Fields",
            "published": 3,
            "tags": [
                "pulse",
                "distancefield",
                "colors",
                "shapes"
            ],
            "usePreview": 0,
            "username": "t420babe",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n// Inspiration from http://thebookofshaders.com/edit.php?log=200809173941\nvec3 twisted_hsb2rgb(in vec3 color) {\n\tfloat color_multiplier = mod(iTime, 10.0) / 10.0 + 5.0;\n\tvec3 c = vec3(5.0, 8.0, 6.0) * color_multiplier;\n\tvec3 abs_rgb = abs(mod(color.x * 15.0 + c, 8.0) - 1.0) - 1.0;\n\tvec3 rgb = clamp(abs_rgb, 0.0, 1.0);\n\trgb = rgb * rgb * (3.0 - 2.0 * rgb);\n\treturn c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n// https://thebookofshaders.com/08/\nfloat random(vec2 pos) {\n\treturn fract(sin(dot(pos.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// Inspiration from http://thebookofshaders.com/edit.php?log=200809180254\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// [0, 1]\n\tvec2 pos = (2.0 * fragCoord - iResolution.xy) /iResolution.y;\n\n\tpos *= iResolution.x / iResolution.y;\n\tvec3 color = vec3(0.0);\n\tfloat d = 0.0;\n\tfloat rate = 1.0;\n\tvec2 dim_bounds = vec2(1.0, 400.0);\n\tfloat test = random(dim_bounds);\n\tfloat dim = 1.0;\n\tfloat switch_inc = 3.0 * PI;\n\n\n\t// Distance field\n\tfloat current_time = abs(sin(iTime * rate));\n\tif (mod(iTime, switch_inc) < PI) {\n\t\td = length(abs(pos) - 0.3) * current_time;\n\t} else if (mod(iTime, switch_inc) > PI && mod(iTime, switch_inc) < 2.0 * PI) {\n\t\td = length( min(abs(pos)- 0.5, 0.2) ) * current_time;\n\t} else {\n\t\td = length(max(abs(pos) - 0.0001, 0.3)) * current_time;\n\t}\n\n\tcolor = twisted_hsb2rgb(vec3(smoothstep(0.3, 0.4, d) * smoothstep(0.6, 0.5, d)) );\n\n\t// Output to screen\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}