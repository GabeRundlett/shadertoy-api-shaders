{
    "Shader": {
        "info": {
            "date": "1580398973",
            "description": "reflecting on the past",
            "flags": 0,
            "hasliked": 0,
            "id": "WdKSRc",
            "likes": 2,
            "name": "Codevember #24 - Reflex",
            "published": 3,
            "tags": [
                "reflections"
            ],
            "usePreview": 0,
            "username": "desertsky",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "float smoothMin(float distA, float distB, float k){\n\tfloat h = max(k-abs(distA - distB),0.0)/k;\n    return min(distA, distB) - h*h*h*k*1.0/6.0;\n}\n\nmat2 m2 = mat2(0.8,  0.6, -0.6,  0.8);\nmat2 im2 = mat2(0.8,  -0.6, 0.6,  0.8);\n\n\nfloat noise(in vec2 p){\n\n    float res=0.;\n    float f=1.;\n\tfor( int i=0; i< 3; i++ ) \n\t{\t\t\n        p=m2*p*f+.6;     \n        f*=1.2;\n        res+=sin(p.x+sin(2.*p.y));\n\t}        \t\n\treturn res/3.;\n}\n\nfloat fbmabs( vec2 p ) {\n\t\n\tfloat f=1.;   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<8;i++){\t\n\t\tr += abs(noise( p*f )+.5)/f;       \n\t    f *=2.;\n        p=im2*p;    \n\t}\n\treturn 1.-r*.5;\n}\n//courtesy of https://www.shadertoy.com/view/4l23Rh\nvec3 sky(in vec2 p)\n{\t\nreturn sin(vec3(1.7,1.5,1)+ .7+ .9*fbmabs(p*4.-.02*iTime))+.25;\n}\n\nvec2 r(vec2 ax, float a) {return mat2(cos(a),-sin(a),sin(a),cos(a))*ax;}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat checkers( in vec2 p )\n{\n    vec2 q = floor(p);\n    return mod(q.x+q.y,2.);\n}\n\nvec2 map(vec3 pos)\n{\n    vec3 boxpos = pos;\n    boxpos/=1.25;\n    boxpos.xy = r(boxpos.xy,1.); \n    boxpos.xz -=.025*sin(pos.x*20.*(mod(sin(iTime/8.)*1.2,2.4)-1.2)*1.25);\n    boxpos*=2.;\n    float sphere2 = float(length(vec3(sin(iTime)*1.25,-.90-sin(iTime),cos(iTime)*1.25)-pos)-.35);\n    float sphere3 = float(length(vec3(cos(iTime+1.43)*1.25,-.90-cos(iTime),sin(iTime)*1.25)-pos)-.35);\n    float box = length(boxpos)-1.25;\n    float plane = float(pos.y+1.5);\n    \n    vec2 scene = vec2(10.);\n\n    //SDF+materials\n    scene = vec2(smoothMin(scene.x,sphere2,0.4), scene.x<sphere2 ? scene.y:2.);\n    scene = vec2(smoothMin(scene.x,box,0.4), scene.x<box ? scene.y:3.);\n    scene = vec2(smoothMin(scene.x,sphere3,0.4), scene.x<sphere3 ? scene.y:4.);\n    scene = vec2(smoothMin(scene.x,plane,.4),scene.x<plane ? scene.y:1.);\n    return scene;\n}\n\nvec2 rm(vec3 ro, vec3 rd)\n{\n    vec2 dO = vec2(0.);\n    \n    for (int i = 0; i < 128; i++)\n    {\n    \tvec2 t = map(ro + dO.x * rd);\n        dO.x += t.x;\n        dO.y = t.y;\n        if(t.x < .01 || dO.x > 50.) break;\n    }\n    return dO;\n}\n\nvec3 n(vec3 pos)\n{\n    float d = map(pos).x;\n    vec2 e = vec2(.001,.0);\n    vec3 pn = d - vec3(\n        map(pos-e.xyy).x,\n        map(pos-e.yxy).x,\n        map(pos-e.yyx).x\n        );\n\treturn normalize(pn);\n}\n\nvec3 l(vec3 pos)\n{\n    vec3 total = vec3(0.);\n    vec3 nor = n(pos);\n    vec3 sundir = normalize(vec3(6.0,5.,0.)); \n    vec3 sundif = clamp(dot(nor,sundir),.0,1.)*vec3(.67);  \n    vec3 skydif = clamp(dot(nor,vec3(.0,1.,.0)),.0,1.)*vec3(.5,.0,.5);\n    vec3 bounce = clamp(dot(nor,-sundir),.0,1.)*vec3(.15);  \n    total+=sundif+bounce+skydif;  \n    return total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;   \n    \n    //bg\n    vec3 col = vec3(.5,-.5+uv.y,uv.y+.75)*sky(vec2(uv.x/3.+iTime/14.,uv.y/3.));\n    \n    vec3 ro = vec3(3.*sin(10.*iMouse.x/iResolution.x+0.),-1.,3.*cos(10.*iMouse.x/iResolution.x));\n    vec3 ta = vec3(.0,.0,.0);\n    \n    vec3 ww = normalize(ta-ro);\n    vec3 uu = normalize(cross(ww,vec3(.0,1.,.0)));\n    vec3 vv = normalize(cross(uu,ww));\n    \n    vec3 rd = normalize(uv.x*uu+uv.y*vv+ww*1.5);\n    vec2 r = rm(ro,rd);\n    vec3 pos = ro+rd*r.x;\n    \n    if(r.x < 50.)\n    {\n        //floor\n        if(r.y == 1.) \n        {            \n            vec3 ro = pos+n(pos)*.02;\n            vec3 rd = normalize(reflect(rd,n(pos)));\n            vec2 r = rm(ro,rd);\n            vec3 prf = ro+rd*r.x;\n\t\t\tfloat f = checkers(pos.xz);\n            if(r.y == 2.) {\n            col = l(pos)*vec3(.2)+fbmabs(pos.xy*10.)*vec3(.1,.1,2.9);   \n                } \n            else if(r.y == 4.) {\n            col = l(pos)*vec3(.2)+fbmabs(pos.xy*10.)*vec3(2.1,.1,.6);   \n            } else {\n\t\t\t\tcol=l(prf*vec3(f))*sky(vec2(iTime/4.+uv.x,uv.y))*vec3(.5,.0+uv.y,.5);\n               }\n        }\n        \n        //ballz\n        if(r.y == 2.) {  \n            col = l(pos)*vec3(.2)+fbmabs(pos.xy*10.)*vec3(.1,.1,2.9);   \n        }\n        if(r.y == 4.) {  \n            col = l(pos)*vec3(.2)+fbmabs(pos.xy*10.)*vec3(2.1,.1,.6);   \n        }\n\n        //glass sphere\n        if(r.y == 3.) \n        {\n            col = vec3(.05,.06,.02);\n            vec3 ro = pos+n(pos)*.02;\n            vec3 rd = normalize(reflect(rd,n(pos)));\n            vec2 r = rm(ro,rd);\n            vec3 prf = ro+rd*r.x;  \n               if(r.y == 2.) {\n            col = l(pos)*vec3(2)+fbmabs(pos.xy*10.)*vec3(.1,.1,2.9);   \n               } else if(r.y == 4.) {\n\t            col = l(pos)*vec3(.2)+fbmabs(pos.xy*10.)*vec3(2.1,.1,.6);   \n               } else if(r.y ==1.) {\n                   float f = checkers(prf.xz);\n                   col+=l(prf*vec3(f))*sky(-iTime/4.+prf.xz)*(vec3(.5+uv.y))*vec3(.75,.50+uv.y,.75);\n               }  \n               else\n               {\n                col+=l(prf)*vec3(.5,.5,uv.y+.75)/1.+sky(vec2(uv.x+-iTime/8.,uv.y))/2.*vec3(.5,.0+uv.y,.5);\n               }\n        }      \n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}