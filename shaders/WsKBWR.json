{
    "Shader": {
        "info": {
            "date": "1606918123",
            "description": "Using color(direction) to visualise a tangent. The color is generated by a the formula which highlights the region which all formules flow to and a formula from https://www.shadertoy.com/view/Mscyzr, which shows the direction in color.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsKBWR",
            "likes": 4,
            "name": "Tangents",
            "published": 3,
            "tags": [
                "formulas"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "//Color Selection Wheel https://www.shadertoy.com/view/Mscyzr\nvec3 TangentVisualiser(in float Angle) {\n  Angle = atan(Angle);\n  vec3 rgb = clamp(abs(mod(Angle*6.0*PI*0.05+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return max(mix( vec3(1.0), rgb, 1.0), 2.*vec3\n    (\n        min(smoothstep(-PI, -PI + D3PI, Angle), smoothstep(-PI + D3PI, -PI, Angle)),\n    \tmin(smoothstep(-PI + D3PI, -PI + D3PI + D3PI, Angle),smoothstep(-PI + D3PI + D3PI, -PI + D3PI, Angle)),\n    \tmin(smoothstep(-PI + D3PI + D3PI, -PI + D3PI + D3PI + D3PI, Angle),smoothstep(-PI + D3PI + D3PI + D3PI, -PI + D3PI + D3PI, Angle))\n    ));\n}\n\n\n//vec3 TangentVisualiser(in float tangentValue)\n//{\n//    float Angle = atan(tangentValue);\n//    \n//    return vec3\n//    (\n//        min(smoothstep(-PI, -PI + D3PI, Angle), smoothstep(-PI + D3PI, -PI, Angle)),\n//    \tmin(smoothstep(-PI + D3PI, -PI + D3PI + D3PI, Angle),smoothstep(-PI + D3PI + D3PI, -PI + D3PI, Angle)),\n//    \tmin(smoothstep(-PI + D3PI + D3PI, -PI + D3PI + D3PI + D3PI, Angle),smoothstep(-PI + D3PI + D3PI + D3PI, -PI + D3PI + D3PI, Angle))\n//    );\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Creates xy values https://www.shadertoy.com/view/Mscyzr\n    vec2 xy = (fragCoord/min(iResolution.x,iResolution.y)-vec2(0.5*iResolution.x/iResolution.y, 0.5))*Scale;\n\n    // Output to screen\n    fragColor = vec4(TangentVisualiser(TangentFunction(xy.x, xy.y, iTime)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Values\n#define Scale 10.\n#define PI 3.14159265359\n#define D3PI 3.14159265359/1.5\n\n//Functions\nfloat TangentFunction(in float x, in float y, in float Time)\n{\n    return x*x - y*y - sin(Time*0.5)*Scale;\n    //return y*y - x*x - sin(iTime)*Scale;//Get error if you use this\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}