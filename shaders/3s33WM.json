{
    "Shader": {
        "info": {
            "date": "1568737591",
            "description": "Yet another beeple cover: INFINITE LOOP! :D\n\nHope you enjoy it!\n\nI tried doing normal mapping using tangent space normal (comp. via luma height field) and bringing it into worldspace.\nEnded up noisier without much visible contribution so I scrapped it.",
            "flags": 32,
            "hasliked": 0,
            "id": "3s33WM",
            "likes": 34,
            "name": "BEEPLE COVER: INFINITE LOOP!",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "fbm",
                "loop",
                "inifinite",
                "spheremarching",
                "beeple"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 1300
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   Yet another beeple cover: INFINITE LOOP!\n   Reference: https://mir-s3-cdn-cf.behance.net/projects/404/e493c376164551.Y3JvcCwxMjAwLDkzOCwwLDI3OQ.jpg\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n    \n    const vec4 lightColor = vec4 (0.263, 0.296, 0.973, 1.0) * 3.0;\n    \n    fragColor = texture (iChannel0, uv) + texture (iChannel1, uv) * lightColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/***********************************************************\n\n   Yet another beeple cover: INFINITE LOOP!\n   Reference: https://mir-s3-cdn-cf.behance.net/projects/404/e493c376164551.Y3JvcCwxMjAwLDkzOCwwLDI3OQ.jpg\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define M_PI 3.1415926535\n#define DRAW_DISTANCE 100.0\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat apartment (vec3 p, float lowerCeilingOffset)\n{\n    const vec3 floorSpace = vec3 (6.0, 0.4, 6.0);\n    const vec3 sideWallSpace = vec3 (0.95, 6.0, 6.0);\n\n    vec3 q = mod(p,floorSpace)-floorSpace * 0.5;\n    float floorPlank = sdBox (q, vec3 (3.0, 0.1, 3.0));\n    float floorslice1 = max (max (floorPlank, -p.x), -3.0+p.x);\n    float floorslice2 = max (max (floorslice1, -p.z), -3.0+p.z);\n    float floorslice3 = max (max (floorslice2, -5.0-p.y), -5.0+p.y+lowerCeilingOffset);\n    \n    vec3 q2 = mod(p,sideWallSpace)-sideWallSpace * 0.5;\n    float sideWall = sdBox (q2, vec3 (0.05, 3.0, 3.0));\n    float sideWallslice1 = max (max (sideWall, -p.x), -3.0+p.x);\n    float sideWallslice2 = max (max (sideWallslice1, -p.z), -3.0+p.z);\n    float sideWallslice3 = max (max (sideWallslice2, -5.0-p.y), -5.5+p.y);\n\n    return min (floorslice3, sideWallslice3);\n}\n\nfloat sideRoad(vec3 p, float pushOut, float lowerCeilingOffset)\n{\n    p.x += pushOut;\n    const vec3 aptSpace = vec3 (20.0);\n    vec3 q = mod(p,aptSpace)-aptSpace * 0.5;\n\n    float apartmentEval = apartment (q, lowerCeilingOffset);\n    float aptSlicer1 = max (max (apartmentEval, -12.0-p.x), 6.0+p.x);\n    float aptSlicer2 = max (max (aptSlicer1, -14.0-p.y), 6.0+p.y);\n\n    return aptSlicer2;\n}\n\nmat4 rotationMatrix(vec3 axis, float cosA, float sinA) {\n    float s = sinA;\n    float c = cosA;\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float cosA, float sinA) {\n\tmat4 m = rotationMatrix(axis, cosA, sinA);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nfloat aptSet(vec3 p, float ang, float pushOut, float lowerCeilingOffset)\n{\n    float c1 = cos (-ang);\n    float s1 = sin (-ang);\n    float c2 = cos (-ang * 2.0);\n    float s2 = sin (-ang * 2.0);\n    \n    mat3 m1, m2;\n    m1[0] = rotate (vec3 (1.0, 0.0, 0.0), vec3 (0.0, 0.0, 1.0), c1, s1);\n    m1[1] = rotate (vec3 (0.0, 1.0, 0.0), vec3 (0.0, 0.0, 1.0), c1, s1);\n\n    m2[0] = rotate (vec3 (1.0, 0.0, 0.0), vec3 (0.0, 0.0, 1.0), c2, s2);\n    m2[1] = rotate (vec3 (0.0, 1.0, 0.0), vec3 (0.0, 0.0, 1.0), c2, s2);\n\n    m2[2] = m1[2] = vec3 (0.0, 0.0, 1.0);\n    \n    p *= m1;\n\n    p += vec3 (3.0, -11.0, 0.0);\n    vec3 q = p;\n    q.x = -q.x;\n    q *= m2;\n    return min (sideRoad(p, pushOut, lowerCeilingOffset), sideRoad(q, pushOut, lowerCeilingOffset));\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat powerLine (vec3 p)\n{\n    const vec3 wireSpace = vec3 (6.0, 1.0, 6.0);\n    \n    p.y += abs (sin (p.z / M_PI));\n    vec3 q = mod(p,wireSpace)-wireSpace * 0.5;\n    float wire = sdCapsule (q, vec3 (0.0, 0.0, 3.0), vec3 (0.0, 0.0, -3.0), 0.01);\n    float wireSlice1 = max (max (wire, -10.0-p.x), 6.0+p.x);\n    float wireSlice2 = max (max (wireSlice1, -0.2-p.y), -0.5+p.y);\n    return wireSlice2;\n}\n\nfloat powerLines (vec3 p)\n{\n    float c1 = cos(-0.1);\n    float s1 = sin(-0.1);\n    mat3 m1;\n    m1[0] = rotate (vec3 (1.0, 0.0, 0.0), vec3 (0.0, 0.0, 1.0), c1, s1);\n    m1[1] = rotate (vec3 (0.0, 1.0, 0.0), vec3 (0.0, 0.0, 1.0), c1, s1);\n    m1[2] = vec3 (0.0, 0.0, 1.0);\n    p *= m1;\n    p.y -= 1.5;\n\n    const vec3 woodenStruct = vec3 (6.0, 12.0,  31.00625 / M_PI);\n    vec3 q0 = mod(p + vec3 (0.5, -6.4, 15.0),woodenStruct)-woodenStruct * 0.5;\n    vec3 q1 = mod(p + vec3 (0.5, -5.4, 15.0),woodenStruct)-woodenStruct * 0.5;\n    float wireHanger = min (sdBox (q1, vec3 (0.05, 4.0, 0.05)), sdBox (q0, vec3 (0.7, 0.05, 0.05)));\n    vec3 q2 = q1;\n    q2.x = abs(q2.x);\n    float wireSupporter = sdCapsule (q2, vec3 (0.4, 1.0, 0.0), vec3 (0.0, 0.3, 0.0), 0.04);\n    wireHanger = min (wireHanger, wireSupporter);\n    float wireHangerSlice1 = max (max (wireHanger, -12.0-p.x), 6.0+p.x);\n    float wireHangerSlice2 = max (max (wireHangerSlice1, -7.0-p.y), -1.0+p.y);\n    \n    float pline1 = powerLine (p);\n    float pline2 = powerLine (p + vec3 (0.25, 0.0, 0.0));\n    float pline3 = powerLine (p + vec3 (0.75, 0.0, 0.0));\n    float pline4 = powerLine (p + vec3 (1.0 , 0.0, 0.0));\n    float powerlines = min (min(pline1, pline2), min(pline3, pline4));\n    return min (powerlines, wireHangerSlice2);\n}\n\nfloat scene(vec3 p, vec3 curEye, inout bool isRectLight)\n{\n    float aptSet1 = aptSet(p, 0.1, 4.0, 1.5);\n    float aptSet2 = aptSet(p + vec3 (0.0, 2.0, 15.0), 0.0, 5.0, 1.0);\n    float aptSet3 = aptSet(p*vec3 (0.5,1.0,1.0) + vec3 (0.0, 0.0, 10.0), 0.1, 6.0, 2.0);\n    float aptSet4 = aptSet(p + vec3 (0.0, -3.0, 25.0), 0.2, 15.0, 0.0);\n    float allApt = min (min (aptSet1, aptSet2), min (aptSet3, aptSet4));\n    float bigOrb = length (p - (curEye + vec3 (0.0, 35.0, 20.0))) - 30.0;\n    float allTheThings = min (min (allApt, powerLines (p)), bigOrb);\n    \n    float rectLight = sdBox (p - curEye - vec3 (0.0, 1.0, 10.0), vec3 (1.0, 2.0, 0.05));\n    float rectLightInside = sdBox (p - curEye - vec3 (0.0, 1.0, 10.0), vec3 (0.75, 1.75, 0.1));\n    rectLight = max (rectLight, -rectLightInside);\n    \n    if ( allTheThings < rectLight )\n    {\n        isRectLight = false;\n        return allTheThings;\n    }\n    else\n    {\n        isRectLight = true;\n        return rectLight;\n    }\n}\n\nfloat sineField (vec2 p)\n{\n    return (sin(p.x) + sin(p.y));\n}\n\nfloat fBm (in vec3 p)\n{\n    p.xz *= 0.25;\n    mat2 rot = mat2 (0.54030230586, 0.8414709848, -0.8414709848, 0.54030230586);\n    float res = 0.0;\n\tres += abs (sineField(p.xz)) * 0.5;\n    p.xz = rot * p.xz;\n\tres += abs (sineField(p.xz * 2.0)) * 0.25;\n    p.xz = rot * p.xz;\n\tres += abs (sineField(p.xz * 4.0)) * 0.125;\n    p.xz = rot * p.xz;\n\tres += abs (sineField(p.xz * 8.0)) * 0.0625;\n    p.xz = rot * p.xz;\n\tres += abs (sineField(p.xz * 16.0)) * 0.03125;\n    return res;\n}\n\nfloat groundFbm(vec3 p)\n{\n    if ( p.y > -1.0 ) return 0.0;\n    if ( p.y < fBm (p) + abs(p.x + 4.0) * 0.2 - 5.0 ) return 1.0;\n    return 0.0;\n}\n\nvec3 groundFbmNorm(vec3 p)\n{\n\tconst float gradD = 0.0000001;\n\tfloat gradX = groundFbm (p + vec3 ( gradD, 0.0, 0.0)) - groundFbm (p - vec3 ( gradD, 0.0, 0.0));\n\tfloat gradZ = groundFbm (p + vec3 ( 0.0, 0.0, gradD)) - groundFbm (p - vec3 ( 0.0, 0.0, gradD));\n    \n    vec3 ourNorm = normalize (cross (vec3 (gradD * 2.0, gradX, 0.0), vec3 (0.0, gradZ, gradD * 2.0)));\n    if ( ourNorm.y < 0.0 ) ourNorm = -ourNorm;\n\n    return ourNorm;\n}\n\nfloat luminance(vec3 rgb)\n{\n\treturn dot(rgb, vec3(0.2125, 0.7154, 0.0721));\n}\n\nfloat groundMat (vec3 p)\n{\n\tfloat retMat = luminance (texture(iChannel1, p.xz * 2.0).rgb + texture(iChannel2, p.xz * 0.1).rgb);\n    return retMat * retMat * retMat * retMat;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec3 curEye = vec3 (-4.0, -2.5, iTime * 5.0);\n    vec3 sampleLook = normalize (vec3 (0.0, 0.0, 1.0));\n    \n    vec3 side = cross (vec3 (0.0, -1.0, 0.0), sampleLook);\n    vec3 up = cross (side, sampleLook);\n    if ( dot (up, vec3 (0.0, 1.0, 0.0)) < 0.0 ) up = -up;\n    \n    const float drawDistSq = DRAW_DISTANCE*DRAW_DISTANCE;\n    float distToHitSq = 0.0;\n    vec3 hitPtGround = vec3 (10000000.0);\n    vec3 sampleDir = normalize (sampleLook + side * uv.x + up * uv.y);\n    vec3 rayMarchDir = sampleDir * 0.1 * (texture (iChannel0, uv).r * 0.3 + 0.7);\n    vec3 samplePt = curEye + sampleDir;\n    vec3 colorAccum = vec3 (1.0);\n    bool groundHit = false;\n    \n    if ( sampleDir.y < 0.1 )\n    {\n        for (float jj = 0.0; jj != 10000.0; jj += 1.0)\n        {\n            vec3 diffToSamplePt = samplePt - curEye;\n            float distToSamplePtSq = dot (diffToSamplePt, diffToSamplePt);\n\n            if ( distToSamplePtSq > drawDistSq )\n            {\n                hitPtGround = samplePt;\n                break;\n            }\n\n            if ( groundFbm(samplePt) == 1.0 )\n            {\n                hitPtGround = samplePt;\n                groundHit = true;\n                break ;\n            }\n            samplePt += rayMarchDir;\n        }\n    }\n    \n    samplePt = curEye + sampleDir;\n    bool hitRectLight = false;\n\n    for (float jj = 0.0; jj != 10000.0; jj += 1.0) // Sometimes you just gotta give...\n    {\n        vec3 samplePtToEye0 = samplePt - curEye;\n        float distToSamplePtSq0 = dot (samplePtToEye0,samplePtToEye0);\n        float curDist = scene (samplePt, curEye, hitRectLight);\n        if (abs(curDist) < 0.001 )\n        {\n            break;\n        }\n        samplePt += curDist*sampleDir;\n        vec3 samplePtToEye = samplePt - curEye;\n        if ( dot (samplePtToEye,samplePtToEye) > drawDistSq )\n        {\n            break ;\n        }\n    }\n\n\tvec3 hitPtGroundToEye = hitPtGround - curEye;\n    vec3 samplePtToEye = samplePt - curEye;\n\tfloat distToHitPtGroundSq = dot (hitPtGroundToEye,hitPtGroundToEye);\n\tfloat distToEyeSq = dot (samplePtToEye,samplePtToEye);\n    float fader;\n    vec3 lightAdd = vec3 (0.0);\n\tconst vec3 lightColor = vec3 (0.563, 0.496, 0.973) * 3.0;\n    if ( distToHitPtGroundSq < distToEyeSq )\n    {\n        fader = clamp (5.0 / sqrt (distToHitPtGroundSq), 0.0, 0.8);\n        if ( groundHit )\n        {\n            vec3 material = vec3 (groundMat (hitPtGround));\n            \n            vec3 lightPos = curEye + vec3 (0.0, 0.0, 7.0);\n            vec3 toLight = lightPos - hitPtGround;\n            float toLightLen = length (toLight);\n            vec3 N = groundFbmNorm (hitPtGround);\n            vec3 L = toLight / toLightLen;\n            float att = max(1.0 - toLightLen * 0.2, 0.0);\n            lightAdd += max (dot (N,L), 0.0) * material * lightColor * att;\n        }\n    }\n    else\n    {\n        fader = clamp (5.0 / sqrt (distToEyeSq), 0.0, 0.8);\n        if ( hitRectLight ) lightAdd += lightColor;\n    }\n\n\tcolorAccum = mix (vec3 (0.765, 0.31, 0.22), vec3 (0.0), fader);\n    colorAccum += lightAdd;\n\n    fragColor = vec4 (colorAccum, hitRectLight ? 1.0 : 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/***********************************************************\n\n   Yet another beeple cover: INFINITE LOOP!\n   Reference: https://mir-s3-cdn-cf.behance.net/projects/404/e493c376164551.Y3JvcCwxMjAwLDkzOCwwLDI3OQ.jpg\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelWH = 1.0/iResolution.xy;\n    \n    if ( uv.x < 0.41 || uv.x > 0.59 || uv.y < 0.36 || uv.y > 0.9 )\n    {\n        fragColor = vec4 (0.0);\n        return;\n    }\n\n    float finalRes = 0.0;\n    float totalW = 0.0;\n    for (int i = -50; i != 51; i++)\n    {\n        vec4 neighFetch = texture (iChannel0, uv + vec2 (float(i) * pixelWH.x, 0.0));\n        float x_b = abs (float(i) * 0.02);\n        float curWeight = exp (x_b*x_b * -10.0);\n        finalRes += neighFetch.a * curWeight;\n        totalW += curWeight;\n    }\n\tfinalRes /= totalW;\n    \n    fragColor = vec4 (finalRes);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/***********************************************************\n\n   Yet another beeple cover: INFINITE LOOP!\n   Reference: https://mir-s3-cdn-cf.behance.net/projects/404/e493c376164551.Y3JvcCwxMjAwLDkzOCwwLDI3OQ.jpg\n   And all your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelWH = 1.0/iResolution.xy;\n    \n    if ( uv.x < 0.41 || uv.x > 0.59 || uv.y < 0.36 || uv.y > 0.9 )\n    {\n        fragColor = vec4 (0.0);\n        return;\n    }\n\n    float finalRes = 0.0;\n    float totalW = 0.0;\n    for (int i = -50; i != 51; i++)\n    {\n        vec4 neighFetch = texture (iChannel0, uv + vec2 (0.0, float(i) * pixelWH.y));\n        float x_b = abs (float(i) * 0.02);\n        float curWeight = exp (x_b*x_b * -10.0);\n        finalRes += neighFetch.a * curWeight;\n        totalW += curWeight;\n    }\n\tfinalRes /= totalW;\n    \n    fragColor = vec4 (finalRes);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}