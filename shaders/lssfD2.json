{
    "Shader": {
        "info": {
            "date": "1498341251",
            "description": "Just laying some groundwork for future tests. Click to reset.",
            "flags": 32,
            "hasliked": 0,
            "id": "lssfD2",
            "likes": 5,
            "name": "drl0014 (Reaction Diffusion)",
            "published": 3,
            "tags": [
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "DrLuke",
            "viewed": 709
        },
        "renderpass": [
            {
                "code": "// drl0014 by DrLuke // Copyright 2017\n//\n// This work is licensed under a Creative Commons Attribution 4.0 International License.\n// https://creativecommons.org/licenses/by/4.0/\n\n//#define grayscale\n//#define edge\n#define palette\n\nconst float scale[5] = float[5](0.2, 0.7, 1.1, 0.7, 0.2);\n\n\nvec4 laplace(vec2 fragCoord)\n{\n    vec4 outVal = texture(iChannel0, fragCoord / iResolution.xy) * 9.;\n\tfor(int i = -2; i <= 2; i++)\n    {\n        for(int j = -2; j <= 2; j++)\n        {\n            vec2 uv = (fragCoord + vec2(i, j)*1.) / iResolution.xy;\n            outVal -= texture(iChannel0, uv) * scale[i + 2] * scale[j + 2];\n        }\n    }\n    return outVal * 0.8;\n}\n\n// The following license only applies to the \"pal\" function. Thank you IQ for being such a huge contributor!\n// https://www.shadertoy.com/view/ll2GD3\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(0);\n\t\n    fragColor = texture(iChannel0, uv);\t// Default output if nothing else is defined\n    \n    #ifdef grayscale\n    // Normal grayscale output with slight brownish tint\n    fragColor = vec4(pow(texture(iChannel0, uv).g, 1.6));\n    fragColor.r += pow(texture(iChannel0, uv).r, 1.6)*0.1;\n    fragColor.g += pow(texture(iChannel0, uv).r, 1.6)*0.05;\n    #endif\n    \n    #ifdef edge\n    // Using edge highlighting, improves contrast a little bit\n    vec4 lapres = laplace(fragCoord);\n    fragColor = vec4(smoothstep(0., 0.3, pow(lapres.g, 1.5)));\n   \t\n    // Some colors\n    fragColor.b += pow(texture(iChannel0, uv).g, 0.7)*0.1;\n    fragColor.g += smoothstep(0.2, 0.3, lapres.r) * smoothstep(0.4, 0.3, lapres.r)*0.1;\n    fragColor.b += smoothstep(0.2, 0.3, lapres.r) * smoothstep(0.4, 0.3, lapres.r)*0.05;\n    fragColor.r += smoothstep(0.0, 0.1, lapres.r) * smoothstep(0.2, 0.1, lapres.r)*0.03;\n    fragColor.b += smoothstep(0.0, 0.1, lapres.r) * smoothstep(0.2, 0.1, lapres.r)*0.01;\n\t#endif\n    \n    // Same as grayscale, but with a fancy palette\n    #ifdef palette\n    vec3 col = pal( texture(iChannel0, uv).g - 0.2, vec3(0.5,0.5,0.1),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.3) );\n    fragColor = vec4(col,1);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// drl0014 by DrLuke // Copyright 2017\n//\n// This work is licensed under a Creative Commons Attribution 4.0 International License.\n// https://creativecommons.org/licenses/by/4.0/\n\nconst float scale[5] = float[5](0.2, 0.8, 1.0, 0.8, 0.2);\n\nvec4 laplace(vec2 fragCoord)\n{\n    //vec4 outVal = texture(tex, fragCoord / iResolution.xy) * 25.;\n    vec4 outVal = texture(iChannel0, fragCoord / iResolution.xy) * 9.;\n\tfor(int i = -2; i <= 2; i++)\n    {\n        for(int j = -2; j <= 2; j++)\n        {\n            vec2 uv = (fragCoord + vec2(i, j)*1.) / iResolution.xy;\n            outVal -= texture(iChannel0, uv) * scale[i + 2] * scale[j + 2];\n        }\n    }\n    //return clamp(outVal*0.25, -0.5, 0.5);\n    return clamp(outVal *0.25, -1., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvc = uv - vec2(0.5);\n    \n    // Previous concentration\n    float prevA = texture(iChannel0, uv).r;\n    float prevB = texture(iChannel0, uv).g;\n    \n    // Laplacian operator of previous concentration\n    vec4 lap = laplace(fragCoord);\n    float lapA = -lap.r;\n    float lapB = -lap.g;\n\n    \n    // CONSTANT FOR REACTION\n    #define Da (2.2 - abs(uv.x - 0.5)*0.2 )\n    #define Db (.2 + abs(uv.x - 0.5)*0.2 ) \n    #define uvf (uv - vec2(0.5))\n    #define f (.0167 + sin(iTime + length(uvc)*12.) *0.02)\n    #define k 0.03\n    #define powfac 2.0\n    \n    vec2 newCon = vec2(prevA, prevB) + vec2(\n        Da * lapA - prevA * pow(prevB, powfac) + f * clamp(1.0 - prevA, 0., 1.),\n        Db * lapB + prevA * pow(prevB, powfac) - clamp(k + f, 0., 1.) * prevB\n        ) * .3;\n    newCon.r = clamp(newCon.r, 0., 1.);\n    newCon.g = clamp(newCon.g, 0., 1.);\n    \n\t\n    fragColor = vec4(newCon, lapB*50., 0);\n    \n    if (iFrame < 1 || iMouse.w > 100.)\n    {\n        fragColor.g = step(length(uvc * iMouse.xy / iResolution.xy * 2.), 0.1);\n        fragColor.r = 0.;\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}