{
    "Shader": {
        "info": {
            "date": "1651076336",
            "description": "I'm quite happy with this, have a play with the values :)\n\nBased on this shader and forked shader:\nhttps://www.shadertoy.com/view/NtXBRH\n\nIssues:\nOver-engineered +  laggy when n is high\nNeed large n for medium shapes because random walk overlaps a lot",
            "flags": 32,
            "hasliked": 0,
            "id": "7tsfRB",
            "likes": 24,
            "name": "Pixel Art Generator",
            "published": 3,
            "tags": [
                "procedural",
                "generative",
                "pixelart",
                "procgen"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 1154
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scale factor to enlarge image by\n    float sf = dim.y / (iResolution.y - dim.y);\n    sf *= 0.75;\n\n    // Scale and centre image to screen\n    vec2 coord = round(sf * fragCoord) ;\n    coord -= round(sf * 0.5 * iResolution.xy - 0.5 * dim);\n\n    vec3 col = texelFetch(iChannel0, ivec2(coord), 0).rgb;\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float d = length(uv);\n    float m = mlength(uv);\n    \n    float s = step(m, 0.44);\n\n    vec3 col2 = mix(vec3(0.5,0.75,1.), vec3(1), 1.-s);\n    if (col == vec3(0))\n        col += 0.42 * exp(-1. * d) * col2;\n    else\n        col = sqrt(col) + 0.08;\n\n        \n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\n#define lineCol(x) ( .5 + .5 * thc(4., x+2. * pi / 3.*vec3(-1,0,1)) )\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat side(vec2 f, float a) {\n    f *= rot(a + pi/2.);    \n    return step(f.y, 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center fragCoord + mirror x axis\n    fragCoord -= 0.5 * dim;\n    fragCoord.x = abs(fragCoord.x);\n    vec3 col = vec3(0);    \n    \n    // Use this to flick through patterns\n    float fl = 0.001 * iDate[1] + floor(-fragCoord.x/dim.x + iTime);\n\n    vec2 p = vec2(0);\n    \n    float a0 = 0.;\n    \n    float n = 120.;\n    for (float i = 0.; i < n; i++) {\n        // Random values for line positions\n        float h = h21(vec2(i + fl + 11., 0.131 * i - 103.));\n\n        // 0.5 and 2./3. work well\n        float m = (2./3.);//mix(0.5, 2./3., mod(i, 2.));\n        a0 += pi * (m * floor(5. * h) - 1.);\n        \n        // p + 2. * () works well too\n        // (probably worth replacing cos,sin with orthogonal vectors)\n        vec2 q = p + 1. * vec2(cos(a0), sin(a0));\n        q = round(q);\n        \n        // Center coords at p (side() cuts the plane through 0,0)\n        vec2 f = abs((0.5 + 0.5 * mod(fl, 2.)) * fragCoord - p);\n        // f = fragCoord - p;\n        vec2 pq = p - q;\n        float a = atan(pq.x, pq.y);\n        \n        // Center half (draw everything under the line)\n        float c = side(f, a);\n             \n        // Shifted halves for 1 pixel line\n        float t = side(f - vec2(0,1), a);\n        float b = side(f + vec2(0,1), a);\n        float l = side(f - vec2(1,0), a);\n        float r = side(f + vec2(1,0), a);\n        float mx = max(max(t,b), max(l,r));\n        float mn = min(min(t,b), min(l,r));\n        \n        // Line (not a line segment yet)\n        vec3 col2 = c * (mx - mn) * vec3(1);\n        \n        // Cut line into a line segment\n        float d = length(pq);\n        f *= rot(a + pi / 2.);\n        col2 *= step(abs(f.x - 0.5 * d), 0.5 * d);      \n       \n        // Darken\n        //col2 *= smoothstep(0., 1., 1.-i/n);\n       \n        // Color\n        vec3 e = vec3(0.5);\n        col2 *= pal(4. * i/n + 0.25 * fl, e, e, e, (i/n) * vec3(0,1,2)/3.);\n        //col2 *= lineCol(20. * i/n + 0.1 * fl);\n        \n        if (col == vec3(0))\n            col = col2;\n        //col = clamp(col + col2, 0., 1.);\n\n        p = clamp(q, vec2(0, -0.5 * dim.y), 0.5 * dim);\n    }\n   \n    // Restrict to bounds\n    //col *= step(fragCoord.x, 0.5 * dim.x) * step(fragCoord.y, 0.5 * dim.y);\n    \n   \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// dimensions of sprite - has to be less than screen dimensions\nconst vec2 dim = vec2(61);\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}