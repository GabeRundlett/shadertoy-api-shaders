{
    "Shader": {
        "info": {
            "date": "1686214658",
            "description": "Simple screen-shader with shifting circles spectrum. Playaround with global params for different results.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtySWh",
            "likes": 16,
            "name": "Shifting Spectrum",
            "published": 3,
            "tags": [
                "circles",
                "spectrum",
                "colors",
                "screenshader"
            ],
            "usePreview": 0,
            "username": "propagant",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "// Simple shifting circles spectrum written by Matej Vanco just for fun, June 2023.\n\n// Shader global params\n\nconst float particleCount = 124.;\nconst float speed = .5;\nconst float size = 20.;\nconst float brightness = 0.001;\nconst vec2 smoothness = vec2(0.1,0.5);\nconst vec2 sway = vec2(4.5,2.);\nconst float alpha = .8;\n\n// Hash methods\n\nvec3 Hash13(in float t)\n{\n\tvec3 xyz;\n\txyz.x = fract(sin(t * 782.287) * 248.842);\n\txyz.y = fract(sin((t+xyz.x) * 782.287) * 248.842);\n\txyz.z = fract(sin((t+xyz.y) * 1024.768) * 64.32);\n\treturn xyz;\n}\n\nfloat Hash1(in float t)\n{\n\tfloat x = fract(cos(t * 782.287) * 248.842);\n\treturn x;\n}\n\n\n\nvec3 Run(in vec2 uv, in float t)\n{\n\tvec3 res = vec3(0.);\n\t\n\tfor(float i = 0.; i < particleCount; i++)\n\t{\n        // Current time\n\t\tfloat ct = t + (i+1.) / particleCount;\n        // Current seed\n\t\tvec3 cseed = Hash13((i+1.) * (ct - t ))-.5;\n        // Current pos\n\t\tvec2 cp = uv - cseed.xy + vec2(sin(ct*sway.x*cseed.x), cos(ct*sway.y*cseed.y))*.1;\n\t\t// Current brightness\n\t\tfloat b = size+(sin(ct));\n        // Current alpha\n\t\tfloat a = clamp(abs(cos(ct*2.)), 0., 1.);\n        // Current circle\n\t\tfloat r = smoothstep(smoothness.x,smoothness.y,(brightness/length(cp))*b);\n        \n\t\tres += abs(cseed)*r*a;\n\t}\n\t\n\treturn res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord.xy - (.5 * iResolution.xy)) / iResolution.x; // Switch to iResolution.y for aspect ratio correction\n    fragColor = vec4( Run(uv, (iTime+100.) * speed) * alpha, 1 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}