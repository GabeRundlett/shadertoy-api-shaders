{
    "Shader": {
        "info": {
            "date": "1668821541",
            "description": "A raymarcher. Some aspects based on Art Of Code on YT. Some references were used from Inigo Quilez's website. Drag your mouse to look around.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfSzM",
            "likes": 0,
            "name": "Realistic Raymarcher",
            "published": 3,
            "tags": [
                "raymarching",
                "realistic",
                "cabin"
            ],
            "usePreview": 0,
            "username": "raymarchingenthusiast",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 250\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define SSK 8.\n#define PI 3.14159265\n#define FOV 90.\n#define OFFSET SURF_DIST*1.05\n#define bounces 1\n#define GI vec3(1.,.9,.75)*.1\n#define LP vec3(1.25*sin(iTime*2./PI),22.5,1.25*cos(iTime*2./PI));\n#define LC vec4(1.,.95,.85,fract(356.*sin(floor(iTime*230.)/230.))/.99 > 1. ? .4 : 2.)\n\n//////\nvec4 texture2(sampler2D s,vec2 p) {\n    return pow(texture(s,p),vec4(2.2));\n}\n\nvec3 skybox(vec3 rd) {\n    vec3 skybox = pow(texture(iChannel0,rd).xyz,vec3(2.2));\n    //vec3 skybox = vec3(.5,.75,.95);  //blue sky\n    return skybox;\n}\n\nvec2 rot(vec2 p,float a) {\n    return vec2(p.x*cos(a)+p.y*sin(a),p.x*sin(a)-p.y*cos(a));\n}\n\n/////SDFs\n\nfloat sdSphere(vec3 p, vec4 sphere) {\n    return length(p-sphere.xyz)-sphere.w;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdBox(vec3 p, vec3 a, vec4 b) {\n    vec3 q = abs(p-a)-b.xyz;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.)-b.w;\n}\n\n\n/////World\nfloat map(in vec3 p, bool il){\n    vec3 lp = LP;\n    float d0 = sdBox(p,vec3(0.,0.,0.),vec4(10.5,0.,10.5,.5));\n    float d1 = sdBox(p,vec3(0.,-1.,0.),vec4(25.,1.,25.,0.));\n    float d2 = sdBox(p,vec3(0.,10.,0.),vec4(25.,20.,25.,.1));\n    float d3 = sdSphere(p,vec4(25.,11.,3.,5.));\n    float d4 = sdBox(p,vec3(6.,8.5,25.),vec4(4.,8.,.4,0.));\n    float d5 = max(sdBox(p,vec3(6.,8.5,25.),vec4(4.5,8.5,.5,0.)),-sdBox(p,vec3(6.,8.5,25.),vec4(4.,8.,.55,0.)));\n    float d6 = il ? sdSphere(p,vec4(lp,.5)) : MAX_DIST;\n    vec3 cp = lp+normalize(vec3(0.,30.,0.)-lp)*.1;\n    float d7 = il ? sdCapsule(p,vec3(0.,30.,0.),cp,.1) : MAX_DIST;\n    float d = min(d7,min(d6,min(min(min(d0,min(d1,max(abs(d2)-.4,-d3))),d4),d5)));\n    return d;\n}\n\nvec3 getNormal(vec3 p) {\n    float d0 = map(p,true);\n    vec2 e = vec2(.01,0.);\n    vec3 n = d0-vec3(\n    map(p-e.xyy,true),\n    map(p-e.yxy,true),\n    map(p-e.yyx,true));\n    \n    return normalize(n);\n}\n\nvec3 trimap(vec3 p, sampler2D s, float k, float rk) {\n    vec3 n = pow(getNormal(p),vec3(k));\n    vec3 tx = texture2(s, p.yz/rk).xyz;\n    vec3 ty = texture2(s, p.xz/rk).xyz;\n    vec3 tz = texture2(s, p.xy/rk).xyz;\n    return (tx*n.x + ty*n.y+tz*n.z)/(n.x+n.y+n.z);\n}\n\n\nvoid getMat(in vec3 p, out vec3 objc, out vec3 objld, out vec2 objrd, out bool frneliz) {\n    vec3 lp = LP;\n    float d0 = sdBox(p,vec3(0.,0.,0.),vec4(10.5,0.,10.5,.5));\n    float d1 = sdBox(p,vec3(0.,-1.,0.),vec4(25.,1.,25.,0.));\n    float d2 = sdBox(p,vec3(0.,10.,0.),vec4(25.,20.,25.,.1));\n    float d3 = sdSphere(p,vec4(25.,11.,3.,5.));\n    float d4 = sdBox(p,vec3(6.,8.5,25.),vec4(4.,8.,.4,0.));\n    float d5 = max(sdBox(p,vec3(6.,8.5,25.),vec4(4.5,8.5,.5,0.)),-sdBox(p,vec3(6.,8.5,25.),vec4(4.,8.,.55,0.)));\n    float d6 = sdSphere(p,vec4(lp,.5));\n    vec3 cp = lp+normalize(vec3(0.,30.,0.)-lp)*.1;\n    float d7 = sdCapsule(p,vec3(0.,30.,0.),cp,.1);\n    float d = min(d7,min(d6,min(min(min(d0,min(d1,max(abs(d2)-.4,-d3))),d4),d5)));\n    \n    if(d==d1){\n        objc = vec3(.8,.95,1.)*texture2(iChannel2,p.xz/14.).xyz;\n        objld = vec3(1.,.3,60.);\n        objrd = vec2(.1,.1);\n        frneliz = true;\n    } else if(d==d0) {\n        objc = vec3(.8,.3,.25)*texture2(iChannel1,p.xz/14.).xyz;\n        objld = vec3(1.,.0,0.);\n        objrd = vec2(.0,1.);\n        frneliz = false;\n    } else if(d==max(abs(d2)-.4,-d3)) {\n        objc = vec3(.8,.95,1.)*trimap(p,iChannel2,10.,14.);\n        objld = vec3(1.,.3,60.);\n        objrd = vec2(.1,.1);\n        frneliz = true;\n    } else if(d==d4) {\n        objc = ((1.-vec3(1.,.9,.75))+vec3(.75))/1.75;\n        objld = vec3(.7,.2,60.);\n        objrd = vec2(.7,1.);\n        frneliz = false;\n    } else if(d==d5) {\n        objc = vec3(.9,.8,.6);\n        objld = vec3(1.,.1,120.);\n        objrd = vec2(.1,.3);\n        frneliz = true;\n    } else if(d==d6) {\n        objc = vec3(LC.xyz*LC.w/1.5);\n        objld = vec3(1.,1.,5.);\n        objrd = vec2(.1,1.);\n        frneliz = false;\n    } else if(d==d7) {\n        objc = vec3(0.,0.,0.);\n        objld = vec3(0.,0.,0.);\n        objrd = vec2(.0,1.);\n        frneliz = false;\n    }\n    \n}\n\n\nfloat raymarch(in vec3 rd, in vec3 ro, out bool hit,float maxd) {  \n    float h = 0.;                                                         \n    hit = false;\n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*h;\n        float d = map(p,true);\n        if (d < SURF_DIST) {\n            hit = true;\n            break;\n        }\n        if (h > maxd) break;\n        h += d;\n    }\n    return h;\n}\n\nfloat shadow(vec3 p, vec3 rd, float len) {\n    float ss = 1.;\n    float h = 0.;\n    for(int t = 0; t < MAX_STEPS && h < len; t++) {\n       vec3 cp = p+rd*h;\n       float d = map(cp,false);\n       if(d < SURF_DIST) return 0.;\n       h += d;\n       ss = min(ss,SSK*d/h);\n    }\n    return ss;\n}\n\nvec3 diffuse(vec3 p,vec3 lp0, vec4 lc, vec3 objc) {\n    vec3 n = getNormal(p);\n    vec3 l = normalize(lp0);\n    \n    float ss = shadow(p+n*OFFSET,l,length(lp0));\n    float dif = dot(l,n);\n    return dif*lc.xyz*ss*objc*lc.w;\n}\n\nvec3 specular(vec3 p,vec3 ev, vec3 lv, vec4 lc, float ld) {\n    vec3 n = getNormal(p);\n    vec3 r = reflect(ev,n);\n    float spec = pow(max(dot(lv,r),0.),ld);\n    return lc.xyz*spec*lc.w;\n}\n\n\n//////Drawing\nvoid castAndCol(inout vec3 rd, inout vec3 ro, inout vec3 col, float refPow, out float refPowMult) {\n    vec3 lp1 = LP;\n    vec4 lc1 = LC;\n\n    bool hit = false;\n    \n    float d = raymarch(rd,ro,hit,MAX_DIST);\n\n    if (hit == true) {\n        vec3 objc = vec3(.8,.85,1.);\n        vec3 objld = vec3(1.,1.,10.);\n        vec2 objrd = vec2(.5);\n        bool frneliz = true;\n    \n        vec3 p = ro+rd*d;\n        vec3 n = getNormal(p);\n        vec3 r = reflect(rd,n);\n        getMat(p,objc,objld,objrd,frneliz);\n        \n        float refAmt = 1.;\n        if(frneliz == true) {\n            refAmt = clamp(pow(1.-dot(-rd,n),8.),0.,1.)/objrd.y;\n        }\n        \n        vec3 dif = diffuse(p,lp1-p,lc1,objc);\n        vec3 bdif = diffuse(p,p-.1*normalize(lp1-p),lc1,objc);\n        vec3 spec = specular(p,rd,normalize(lp1-p),lc1,objld.z);\n        col += dif*objld.x*refPow;\n        col += bdif*objld.x*refPow/2.;\n        col += spec*objld.y*refPow;\n        \n        refPowMult = refAmt*objrd.x;\n\n        ro = p+n*OFFSET;\n        rd = r;\n    } else {\n        vec3 sky = skybox(rd);\n        col += sky*refPow;\n        refPowMult = 0.;\n        \n    }\n}\n\nvec3 crd(vec3 ro, vec2 fragCoord) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = PI*((vec2(iMouse.x*2.,iMouse.y)/iResolution.xy)-.5);\n    if(iMouse.xy == vec2(0.)) mouse.xy = vec2(PI/8.,-PI*.025);\n    \n    vec3 rd = normalize(vec3(uv.xy,1./tan(FOV*PI/360.)));\n    \n    vec2 rotAmt = vec2(atan(ro.x,-ro.z),mouse.y-PI);\n    rd = vec3(rd.x,rot(rd.yz,rotAmt.y));\n    rd.y = -rd.y;\n    vec2 rotRd = rot(rd.zx,rotAmt.x);\n    rd = vec3(-rotRd.y,rd.y,rotRd.x);\n    return rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 mouse = PI*((vec2(iMouse.x*2.,iMouse.y)/iResolution.xy)-.5);\n    vec3 ro = vec3(20.*sin(-mouse.x),10.,-20.*cos(-mouse.x));\n    vec3 rd = crd(ro,fragCoord);\n    vec3 rdOrig = rd;\n    \n    vec3 col = vec3(0.);\n    float refPow = 1.;\n    float refPowMult = 1.;\n    castAndCol(rd,ro,col,refPow,refPowMult);\n    \n    for(int i = 0; i < bounces; i++) {\n        refPow *= refPowMult;\n        castAndCol(rd,ro,col,refPow,refPowMult);\n    }\n    \n    col += GI;\n\n    fragColor = vec4(clamp(pow(col,vec3(1./2.2)),0.,1.),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}