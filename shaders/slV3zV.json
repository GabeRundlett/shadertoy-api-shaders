{
    "Shader": {
        "info": {
            "date": "1638047353",
            "description": "Interface:\n- Click to change color scheme\n- Drag to rotate and zoom\n\nSadly, it seems that shadertoy does not support mouse interaction on moblie",
            "flags": 32,
            "hasliked": 0,
            "id": "slV3zV",
            "likes": 7,
            "name": "Breathing...",
            "published": 3,
            "tags": [
                "2d",
                "interactive",
                "animation"
            ],
            "usePreview": 0,
            "username": "kmaork",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "const float PI         = 3.1415926538;\nconst float COLOR_FREQ = 0.08;\nconst float RAD_FREQ   = 0.14;\nconst float ROT_FREQ   = 0.10;\nconst float RRR_FREQ   = 0.09;\n\nfloat wave(in float x) {\n    return cos(2. * PI * x);\n}\n\nfloat cycle(in float x) {\n    return 0.5 * (wave(x) + 1.);\n}\n\nfloat powerCycle(in float x, in float deg) {\n    float w = wave(x);\n    float mag = pow(abs(w), 1. / deg);\n    return 0.5 * ((w > 0. ? mag : -mag) + 1.);\n}\n\nfloat oscillator(in float freq) {\n    return cycle(freq * iTime);\n}\n\nvec4 hue0(in float x) {\n    float base = 16. / 255.;\n    float range = 1. - base;\n    float c = cycle(x);\n    float r = base + c * range;\n    float g = sin(c * PI * 7.) * 140. / 255.;\n    float b = base + (1. - c) * range;\n    return vec4(r, g, b, 1);\n}\n\nvec4 hue1(in float x) {\n    float r = 0.05;\n    float g = powerCycle(x * 3.6, 9.) * 0.7;\n    float b = 0.08;\n    return vec4(r, g, b, 1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float rp = 3.;\n    float rs = 0.11;\n    \n    float sm = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / sm * fetchData(ZOOM_ADDR).x;\n    float dist = length(uv);\n    float x = uv.x;\n    float y = uv.y;\n    \n    float rad = oscillator(RAD_FREQ) * 0.7 + 0.75;\n    float a = fetchData(ANGLE_ADDR).x + atan(x, y) + (pow(dist * rs, rp) - pow(rad * rs, rp)) * (oscillator(ROT_FREQ) - 0.5) * 1.5;\n    x = sin(a) * dist;\n    y = cos(a) * dist;\n    float rrr = oscillator(RRR_FREQ) * 0.24 + 1.88;\n    float s = abs(atan(dist * dist - pow(rad, 3.)));\n    float c = COLOR_FREQ * iTime + (s * cos(pow(abs(x), rrr) * y) * cos(pow(abs(y), rrr) * x)) / pow(dist + 1., 1.4) * 1.25;\n    switch (int(fetchData(HUE_ADDR)) % 2) {\n    case 0:\n        fragColor = hue0(c);\n        break;\n    case 1:\n        fragColor = hue1(c);\n        break;\n    }\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Method inspired from https://www.shadertoy.com/view/tdGBDG\n\n// x=current zoom\n// y=zoom when clicked\nconst int ZOOM_ADDR = 0;\n\n// x=current angle\n// y=angle when clicked\nconst int ANGLE_ADDR = 1;\n\nconst int MOUSE_WAS_DOWN_ADDR = 2;\n\nconst int HUE_ADDR = 3;\n\n#define fetchData(addr) texelFetch(iChannel0, ivec2(float(addr), 0.), 0)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const float ZOOM_INIT = 5.5;\nconst float ANGLE_INIT = 0.;\nconst float HUE_INIT = 0.;\n\nbool mouseDown() {\n    return iMouse.z > 0.;\n}\n\nbool mouseClicked() {\n    return iMouse.w > 0.;\n}\n\nbool mouseReleased() {\n    return !mouseDown() && fetchData(MOUSE_WAS_DOWN_ADDR).x == 1.;\n}\n\nbool click() {\n    return mouseReleased() && iMouse.xy == abs(iMouse.zw);\n}\n\nfloat vatan(in vec2 xy) {\n    return atan(xy.x, xy.y);\n}\n\nvec2 toCenter(in vec2 uv) {\n    return uv - iResolution.xy / 2.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    switch (int(fragCoord.x)) {\n    case ZOOM_ADDR:\n        if (iFrame == 0) {\n            fragColor.x = ZOOM_INIT;\n            break;\n        }\n        fragColor = fetchData(ZOOM_ADDR);\n        if (mouseClicked()) {\n            fragColor.y = fragColor.x;\n        } else if (mouseDown()) {\n            fragColor.x = length(toCenter(abs(iMouse.zw))) / length(toCenter(iMouse.xy)) * fragColor.y;\n        }\n        break;\n    case ANGLE_ADDR:\n        if (iFrame == 0) {\n            fragColor.x = ANGLE_INIT;\n            break;\n        }\n        fragColor = fetchData(ANGLE_ADDR);\n        if (mouseClicked()) {\n            fragColor.y = fragColor.x;\n        } else if (mouseDown()) {\n            fragColor.x = vatan(toCenter(abs(iMouse.zw))) - vatan(toCenter(iMouse.xy)) + fragColor.y;\n        }\n        break;\n    case MOUSE_WAS_DOWN_ADDR:\n        fragColor.x = mouseDown() ? 1. : 0.;\n        break;\n    case HUE_ADDR:\n        if (iFrame == 0) {\n            fragColor.x = HUE_INIT;\n            break;\n        }\n        fragColor = fetchData(HUE_ADDR);\n        if (click()) {\n            fragColor.x += 1.;\n        }\n        break;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}