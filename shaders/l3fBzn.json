{
    "Shader": {
        "info": {
            "date": "1727932497",
            "description": "Cyclic Splitting Fields Test By Rik Riesmeijer (CC0). Working towards making a bunch of FFT like tooling for fun.",
            "flags": 0,
            "hasliked": 0,
            "id": "l3fBzn",
            "likes": 2,
            "name": "Cyclic Splitting Fields Test",
            "published": 3,
            "tags": [
                "testing",
                "complex",
                "interpolation",
                "fields",
                "polynomials",
                "cyclotomic",
                "splitting",
                "singularities"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 43
        },
        "renderpass": [
            {
                "code": "// Complex Cyclic Polynomials For Interpolation Testing,\n// Made By Rik Riesmeijer, 2024 - No rights reserved (CC0).\nmat2 C(vec2 v) { return mat2(v.x, -v.y, v.y, v.x); }   // Correspondence Of GL2 Group To R[i].\nmat2 C(float x, float y) { return mat2(x, -y, y, x); } // Correspondence Of GL2 Group To R[i].\nvec2  R2 (mat2 z) { return z[1].yx; }                  // Reverse of above from GL2 to R^2\nfloat Re (mat2 z) { return z[0][0]; }                  // Real part of complex number.\nfloat Im (mat2 z) { return z[1][0]; }                  // Imaginary part of complex number.\nfloat Mod(mat2 z) { return length(z[1]); }             // Modulus of complex number.\nfloat Arg(mat2 z) { return atan(Im(z), Re(z)); }       // Argument of complex number.\nmat2  rot(float a) { return C(cos(a), sin(a)); }       // Gives a complex unit at angle a.\nmat2  Ccon(mat2 z) { return transpose(z); }            // Complex conjugate.\nmat2  Cinv(mat2 z) { return inverse(z); }              // Get 1 / z In GL2 Group Terms.\nmat2  Cdiv(mat2 d, mat2 n) { return Cinv(n) * d; }     // Implement d / n For Our C Field.\nmat2  Crpow(mat2 z, float x) {                         // Real power exponentiation.\n    return pow(length(z[1]), x) * rot(x * Arg(z));     // Polar form formula is most robust.\n}                                                      // End complex utility functions.\n\nvec4 dis(mat2 z) { return vec4(smoothstep(1.0, 0.9, Mod(z))); } // Complex modulus visual.\n\nmat2 Csqrt(mat2 z) {                           // Exact complex square root.\n    float m = Mod(z), c = Re(z), d = Im(z);    // Here determinant is modulus.\n    z = C(sqrt(m + c) * sign(d), sqrt(m - c)); // Get one root of the quadratic equation.\n    return z * 0.707106781;                    // Fix scaling.\n}                                              // Made by Rik Riesmeijer. (CC0)\n\nmat2 Cidn(mat2 z) { return (z = (z  = (z  = z)    )    )    ; } // z ^  1 (Trivial, but it can help -\nmat2 Csqr(mat2 z) { return (z = (z  = (z *= z)    )    )    ; } // z ^  2  - to see the pattern for me..)\nmat2 Ccub(mat2 z) { return (z = (z *= (z *= z)    )    )    ; } // z ^  3, cubic\nmat2 Cqrt(mat2 z) { return (z = (z  = (z *= z) * z)    )    ; } // z ^  4, quartic\nmat2 Cqui(mat2 z) { return (z = (z *= (z *= z) * z)    )    ; } // z ^  5, quintic\nmat2 Chex(mat2 z) { return (z = (z  = (z *= z) * z) * z)    ; } // z ^  6, hexic\nmat2 Csep(mat2 z) { return (z =  z *= (z *= z  * z) * z)    ; } // z ^  7, septic\nmat2 Coct(mat2 z) { return (z = (z  = (z *= z) * z) * z)    ; } // z ^  8, octic\nmat2 Cnon(mat2 z) { return (z * (z  = (z *= z) * z) * z)    ; } // z ^  9, nonic\nmat2 Cdec(mat2 z) { return (z = (z *= (z *= z) * z) * z)    ; } // z ^ 10, decic\nmat2 Cund(mat2 z) { return (z * (z *= (z *= z) * z) * z)    ; } // z ^ 11, undecic\nmat2 Cdod(mat2 z) { return (z = (z *=  z *= z) * z) * z     ; } // z ^ 12, dodecic\nmat2 Ctre(mat2 z) { return (z * (z  = (z *= z) * z) * z) * z; } // z ^ 13, treiskadecic\nmat2 Ctdc(mat2 z) { return (z =  z *= (z *= z) * z  * z) * z; } // z ^ 14, tetradecic\nmat2 Cpdc(mat2 z) { return (z =  z *= (z *= z) * z) * z  * z; } // z ^ 15, pentadecic\nmat2 Chdc(mat2 z) { return (z = (z  = (z *= z) * z) * z) * z; } // z ^ 16, hexadecic\n\nmat2 Cz32th(mat2 z) {                                  // Now that we got up to degree 15 we take z^32;\n    return (z = (z = (z = (z *= z) * z) * z) * z) * z; // we can get 16K max res polynomial.\n}                                                      // Since 16K res is 1920 * 8 = 32 * 32 * 15.\nmat2 Cz1024(mat2 z) {                                  // Combine 32 version for 16K res.\n    z = (z = (z = (z  = (z *= z) * z) * z) * z) * z;   //   +  First :  z ^ 32;\n    z = (z = (z = (z  = (z *= z) * z) * z) * z) * z;   //   +  Second: (z ^ 32) ^ 32;\n    return z;                                          // Finally this yields z ^ 1024.\n}\n\nmat2 C15360(mat2 z) {                                // Now combine the full result here.\n    z = (z = (z =  z *= (z *= z) * z) * z  * z);     // Get z^15 for 1080p dimensions up to 2^k, for some k.\n    z = (z = (z = (z  = (z *= z) * z) * z) * z) * z; // With z^15 as basis we now compose.\n    z = (z = (z = (z  = (z *= z) * z) * z) * z) * z; // We do this just like the method given above.\n    return z;                                        // Yield the full z^15360 evaluation.\n}                                                    // This should then fit around the unit circle.\n\nvoid mainImage(out vec4 c, vec2 v) {               // Visualize above in demo.\n    v += v - iResolution.xy;                       // Center UVs at origin.\n    v *= 1.5 / min(iResolution.x, iResolution.y);  // Normalize scale.\n    mat2 z = mat2(v.y, -v.x, v.x, v.y);            // Make UV into complex number.\n    c = dis(Crpow(z, mod(iTime, 2e2)) - mat2(1));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}