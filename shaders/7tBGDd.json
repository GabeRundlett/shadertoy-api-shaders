{
    "Shader": {
        "info": {
            "date": "1624984419",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "7tBGDd",
            "likes": 17,
            "name": "Day 558",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "// wonky parametric 3d surface, projected perspectively to 2d\n// rendered with 2d line sdf \n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pi acos(-1.)\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n// from iq\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 transformPt(vec3 p){\n    p.xz *= rot(0. + sin(iTime*0.2)*0.4);\n    p.xy *= rot(0. + sin(iTime*0.6)*0.4 + 2. + iTime*0.2);\n    p.z += 1.5 + sin(iTime + sin(iTime))*0.5;\n    \n    p.xy /= p.z*3.;\n    \n    return p;\n}\n\nconst float itersi = 40.;\nconst float itersj = 40.;\n\nconst float mul = pi*1.;\nconst vec2 stepSz = 1./vec2(itersi,itersj)*mul;\n\nvec3 getP(vec2 idx){\n    //idx.x += iTime*3.4;\n    //idx.y += iTime*0.001;\n    idx.y += idx.x*stepSz.x*(74. + sin(iTime*0.5)*50.) + iTime*2.;\n    vec3 p = vec3(sin(idx.x*sin(idx.y*0.5)) + cos(idx.y )*0.5,cos(idx.y)*1. + cos(idx.x*1. )*1.,sin(idx.y));            \n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(1.,1.1,1.);\n    float minZ = 10e4;\n    for(float i = 0.; i < itersi; i++){\n        for(float j = 0.; j < itersi; j++){\n            vec2 idx = vec2(i/itersi,j/itersj)*mul;\n            vec3 p = getP(idx);\n            vec3 pNi = getP(idx + vec2(1,0.)*stepSz);\n            //vec3 pNj = getP(idx + vec2(0,1.)*stepSz);\n            \n            //points[int(j + i*itersj)] = p;\n            vec3 op = p;\n            p = transformPt(p);\n            pNi = transformPt(pNi);\n            //pNj = transformPt(pNj);\n            //vec3 n = cross(pNi - p,pNj - p);\n            \n            float li = sdSegment( uv, p.xy, pNi.xy );\n            //float lj = sdSegment( uv, p.xy, pNj.xy );\n\n            //float d = dot(p.xy - uv.xy,p.xy - uv.xy);\n            float d = 10e5;\n            d = min(d,li);\n            //d = min(d,lj);\n            //bool normalCond = n.z > -0.000;\n            bool normalCond = true;\n            \n            \n            float dfac = smoothstep(fwidth(uv.y),0.,d - 0.00);\n            if(p.z > 0.)\n            col = mix(col,vec3(0),dfac*1.*smoothstep(0.2,1.,abs(op.z)));\n            //if (d < fwidth(uv.y)*0.5 && normalCond)col -= 1.;\n            \n            if(p.z < minZ && dfac > 0.1)\n                minZ = p.z;\n                //minZ = mix(minZ,p.z,dfac);\n            \n        \n        }\n    }\n                    \n    {\n        float iters = 7.;\n        for(float i = 0.; i < iters; i++){\n            for(float j = 0.; j < iters; j++){\n                for(float k = 0.; k < iters; k++){\n                    vec3 p = vec3(i/iters - 0.5 + sin(i + cos(k*20. +iTime)+ iTime)*0.0,k/iters - 0.5,j/iters - 0.5)*4.;\n                    vec3 op = p;\n                    p = transformPt(p);\n                    \n                    vec2 np = p.xy - uv.xy;\n                    np.xy *= rot(0.25*pi);\n                    np *= rot((p.x*2. + sin(p.z+iTime*1.) + iTime));\n                    //float d = length(p.xy - uv.xy) - 0.00;\n                    float d = max(min(abs(np.x),abs(np.y)) - 0.0004,length(np) - 0.01*sin(k/iters +cos(i/iters*6.)+ iTime));\n                    //if (d < fwidth(uv.y)*0.5 && normalCond)col -= 1.;\n                    if(\n                        (p.z > 0. && !(minZ < 10e4 && p.z > minZ )))\n                        col = mix(col,vec3(1.+ sin(p.x*4. + iTime*3.)*0.,0.,0.4 ) - col*1.,smoothstep(fwidth(uv.y),0.,d - 0.00));\n\n                }\n            }\n        }\n    }\n    vec2 ouv = uv;\n    float md = 0.025;\n    vec3 p = vec3(uv*1.,0);\n    //p = transformPt(p);\n            \n    p = pmod(p,md);\n    float d = min(abs(p.x),abs(p.y));\n    //d = max(d,-length(p.xy) + md*0.5);\n    //d = min(d,-abs(uv.x + uv.y) );\n    d -= 0.02*md;\n    float pxSz = fwidth(uv.y);\n    col = mix(col,vec3(0.,0.7,0.1) - col*1.,smoothstep(pxSz,0.,d - 0.00)*smoothstep(md*0.02,0.,d)*0.2);\n    \n    if(mod(iTime,3.) < 0.5 && fract(iTime/0.01) < 0.5){\n        //col = vec3(1,1.,0.7) - col;\n    }\n    \n    \n    col = pow(col,vec3(0.4545));\n\n    fragColor = vec4(col,1.0);\n} \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}