{
    "Shader": {
        "info": {
            "date": "1634302803",
            "description": "re-coding https://www.shadertoy.com/view/sstXDs a different way for native antialiasing.\nUse smoothstep AA + depth chose blending above vs below.\nMissing:\n- acute corners (not round)\n- z-fight near center\n- end should go above/below ( need 1 extra blend )",
            "flags": 0,
            "hasliked": 0,
            "id": "fdGXzz",
            "likes": 14,
            "name": "Alhambra Captive Tower Ros√°cea 2",
            "published": 3,
            "tags": [
                "star",
                "tilings",
                "islamic",
                "reproduction",
                "alhambra",
                "rosacea"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "#define S(v)   smoothstep( 3./R.y, 0., v ) \n\n// --- draw line with round ends\nfloat line(vec2 p, vec3 A,vec3 B, out float z) {      // z return interpolated 3rd coord\n    p -= A.xy; vec2 b = B.xy - A.xy;                  // 2D line drawing\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    z = mix(A.z, B.z, h);                             // interpol z values\n    return length(p - b * h);                         // distance to segment\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2   R = iResolution.xy,\n           U =  1.04*(2.*u - R ) / R.y, V;\n    vec3   P;\n    float PI = 3.14159265359, a,_a, d=9.,d2,z,z2,_z, v=0., \n           h = .077, w = .016,    // height of horiz ribbon ;  ribbon width\n           l = length(U);\n    mat2   M = mat2(cos( -PI/8.+vec4(0,-.5,.5,0)*PI));         // rot matrix\n\n    U = l * sin( mod( atan(U.y,U.x) +PI/16., PI/8. ) - PI/16. + vec2(PI/2.,0) ); // 16-fold rotation symmetry\n\n#define L(B) d2 = line(U,P,B,z2); P = B; if (d2<d) d=d2, z=z2; // get dist and z of closest point on ribbon\n\n#define T                                  \\\n    P = vec3(.11,h,-1),        /* horiz */ \\\n    L( vec3( .3 ,h, 1) );                  \\\n    L( vec3(.685-.4*h, h,-1) );/*  X    */ \\\n    L( vec3(.685+.4*h,-h,-1) );/* horiz */ \\\n    L( vec3(.9 ,-h, 1) );                  \\\n    L( vec3(.96,-h,-5) );                  \\\n    P = vec3(.77, .15, 1),     /* crown */ \\\n    L( vec3(.95,-h/2.,-1) );               \\\n    L( vec3(.95,-.2,5) );\n           // crown should be drawn and blended separatly to not merge with ribbon ends \n#define D    v = mix( v, S(d-w+2./R.y), a= S(d-w) )            // draw ribbon\n\n    T                                                          // draw main\n    V=U; U *= M; T; U=V;                                       // and its rot version\n    D;\n    _z=z, d = 9.,\n    \n    U.y=-U.y;  T;                                              // same in mirror\n    V=U; U *= M; T;  U=V;\n    U.y=-U.y; z = -z;  \n    \n    if ( z > _z )  _a=a, D;                                    // draw above \n    else _a = S(d-w), v += (1.-a) *  S(d-w+2./R.y) * _a;       // draw below\n    a += (1.-a) * _a;\n    v += (1.-a) * ( l<.15 ? .2 : .3 - (U.y>0.?0.:.07)*(1.-.55*l) ); // draw background\n   \n    O = vec4(v); O.b += .04;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}