{
    "Shader": {
        "info": {
            "date": "1617838826",
            "description": "Finding the incident point given a light position, a point, reflector position, and reflector direction (for line reflectors). Set the light and point by dragging the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdj3zt",
            "likes": 7,
            "name": "Inverse Reflection - Plane I",
            "published": 3,
            "tags": [
                "reflection",
                "ray",
                "math",
                "light",
                "plane",
                "physics",
                "optics",
                "incidence"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "// \"Inverse Reflection\" by oneshade\n// Original: https://www.desmos.com/calculator/dvs5kyylbm\n// Improvement 1: https://www.desmos.com/calculator/kvouvidoku\n// Improvement 2 (based on @mla's comment): https://www.desmos.com/calculator/li9pg9x5rj\n\n// Drawing utilities\n#define drawSDF(dist, transp, col) color = mix(color, col, smoothstep(unit, 0.0, dist) * transp)\n\n// SDFs\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdPlane2D(in vec2 p, in vec2 pos, in vec2 nor) {\n    return abs(dot(p - pos, nor));\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdVerticalLine(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\n\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat sdVectorArrow(in vec2 p, in vec2 v) {\n    float m = length(v); vec2 n = v / m;\n    p = vec2(dot(p, n.yx * vec2(1.0, -1.0)), dot(p, n));\n    return min(sdVerticalLine(p, m) - 0.025, sdIsosceles(p - vec2(0.0, m), 0.1, 0.15));\n}\n\n// Computes the incident point between a point and light\n// The line from the light to the reflection of the point over\n// the plane intersects the plane at the point of incidence\n// l: light position, p: point position\n// o: reflector position, n: reflector direction\nvec2 getIncidence(in vec2 l, in vec2 p, in vec2 o, in vec2 n) {\n    l -= o; p -= o;\n    vec2 d = p - 2.0 * n * dot(p, n) - l;\n    return l - dot(l, n) / dot(d, n) * d + o;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 4.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    float unit = 8.0 / iResolution.y;\n\n    // Default if mouse is not set\n    if (ivec2(iMouse.xy) == ivec2(0)) {\n        mouse = vec4(-1.0, 1.0, 1.0, 1.0);\n    }\n\n    vec2 light = mouse.zw;\n    vec2 point = mouse.xy;\n\n    vec2 reflectorPos = vec2(0.0, -1.0);\n    vec2 reflectorDir = vec2(0.0, 1.0);\n\n    float tilt = sin(iTime) * 0.5;\n    float c = cos(tilt), s = sin(tilt);\n    reflectorDir *= mat2(c, s, -s, c);\n\n    // Draw the reflector\n    drawSDF(sdPlane2D(uv, reflectorPos, reflectorDir) - 0.01, 1.0, vec3(0.0, 0.0, 1.0));\n    drawSDF(sdVectorArrow(uv - reflectorPos, reflectorDir * 0.5), 1.0, vec3(1.0));\n\n    // Draw light path\n    vec2 i = getIncidence(light, point, reflectorPos, reflectorDir);\n    vec2 fromLight = i - light;\n    vec2 toPoint = point - i;\n    drawSDF(sdVectorArrow(uv - light, fromLight - normalize(fromLight) * 0.2) + 0.01, 1.0, vec3(1.0));\n    drawSDF(sdVectorArrow(uv - i, toPoint - normalize(toPoint) * 0.2) + 0.01, 1.0, vec3(1.0));\n\n    // Draw light, point, and incident point\n    drawSDF(sdDisc(uv, light, 0.05), 1.0, vec3(0.0, 1.0, 0.0));\n    drawSDF(sdDisc(uv, point, 0.05), 1.0, vec3(1.0, 0.0, 0.0));\n    drawSDF(sdDisc(uv, i, 0.05), 1.0, vec3(1.0, 0.8, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}