{
    "Shader": {
        "info": {
            "date": "1616574988",
            "description": "Learning Shader Magic",
            "flags": 0,
            "hasliked": 0,
            "id": "fslGD2",
            "likes": 1,
            "name": "9. Raymarching 1",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "learning"
            ],
            "usePreview": 0,
            "username": "Sp3cim4n",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0., 1., 6., 1.);\n    \n    float sphere_dist = length(p - s.xyz) - s.w;\n    float plane_dist = p.y;\n    \n    float d = min(sphere_dist, plane_dist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.;\n    \n    for(int i = 0; i <= MAX_STEPS; i++)\n    {\n        vec3 p = ro + dO * rd;\n        float ds = GetDist(p);\n        dO += ds;\n        if(dO>MAX_DIST || ds < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d - vec3(\n             GetDist(p - e.xyy),\n             GetDist(p - e.yxy),\n             GetDist(p - e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos =  vec3(0, 4, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime) * 3.);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n\n    float dif = clamp(dot(l, n), 0., 1.);\n        \n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    if(d < length(lightPos - p))\n        dif *= .1;\n\n    return dif;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2. *fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(.0, 1., .0);\n    vec3 rd = vec3(uv.x, uv.y, 1.);\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p /*Surface Position*/ = ro + rd * d;\n    \n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}