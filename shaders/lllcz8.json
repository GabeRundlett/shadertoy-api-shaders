{
    "Shader": {
        "info": {
            "date": "1503518870",
            "description": "wanted to make a simple leaf, ended up in a generalized YingYang\nthis is not the shape i wanted, but that i wanted had too many discontinuities in the gradient.\nand then i lost the code.",
            "flags": 0,
            "hasliked": 0,
            "id": "lllcz8",
            "likes": 2,
            "name": "simple ideal leaf",
            "published": 3,
            "tags": [
                "snake",
                "leaf",
                "yingyang",
                "claw",
                "superprim",
                "bisymmetry",
                "generalization",
                "taijitu"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 793
        },
        "renderpass": [
            {
                "code": "/*\n4-circle suprtprim.\n\nwanted to make a simple leaf, ended up in a generalized YingYang\nthis is not the shape i wanted, but that i wanted had too many discontinuities in the gradient.\nand then i lost the code.\n\nnow i am tired, time to rethink this reneralization\n*/\n\n/*\ntiny framework 2017-08 : https://www.shadertoy.com/view/MdSBDd\nI use \"bisymmetry\" as shorthand for \"gradient from symmetry to assymmetry\"\n*/\n\n/* end__.Head\n   start.Parameters\n*/\n\n//zoom of view Frame\n#define ViewZoom 2.\n\n//one extra step to round the gradient of a box.\n#define RoundBox\n/*note how hg_sdf differnetiates this with 2 functions:\n//non-rounded border, underestimates distance\n  float fBoxCheap(vec3 p,vec3 b){vec3 q=(abs(p)-b);return max(max(q.x,q.y),q.z);}\n//rounded border exact distance  \nfloat fBox(vec3 p,vec3 b){vec3 q,d=abs(p)-b;q=min(d,0.);return length(max(d,0.))+max(max(q.x,q.y),q.z);}\n//where RoundBox uses;\nc.g=fBoxCheap();\n//...and an additional function that modifies fBoxCheap() into fBox();\nc.g+=.5*(sign(c.g)+1.)*(length(mStretchP(u,m.xy))-c.g)\n//yes, above line adds the EXACT amount of underestimated distance.\n// (which is neglible for most cases)\n// (for a  main-axis-aligned box)\n//and i got this via the \"bisymmetry principle\".\n*/\n\n/* end__.Parameters\n   start.Static\n*/\n//set viewFrame for 2d modelling\n#define fra(u) (u-.5*iResolution.xy)*ViewZoom/iResolution.y\n#define v0 float\n#define v1 vec2\n#define v2 vec3\n#define v3 vec4\n#define dd(a) dot(a,a)\n#define u2(a) (a*2.-1.)\n#define u5(a) (a*.5+.5)\nv0 miv(v1 a){return min(a.y,a.x);}//return max domain of vector.\nv0 miv(v2 a){return min(a.z,miv(a.xy));}\nv0 miv(v3 a){return min(miv(a.zw),miv(a.xy));}\n#define mav(a) -miv(-a)\nfloat circleY(vec2 u){return u.y-sqrt(1.-(u.x*u.x));}//i keep forgetting this one\n//making a triangle wave;\n#define fr(a) fract(a)\n//above is seesaw, below is \"seesaw to triangle\" wave\n#define ss2t(a) a=abs((a))\n//return matrix that mirrors p at axis,rotated by r*.5 radians== cheap SINGLE 2d rotation.\n#define rs(r) mat2(sin(r+vec4(1,0,0,-1)*asin(1.)))\n//return paintble distance to carthesian grid.\n#define grid(u) mav(abs(u2(fr(u))))\n//#define mStretch(c,m) v=mix(v-m,mix(0.,v,step(v,0.)),step(v,m));\n//stretch      ; centric, most commonly used, therefore atomic\n#define mStretch(u,m) .5*(sign(u)*m-u)*((sign(abs(u)-m))+1.)\n//stretch nimus; positive values do not change\n#define mStretchM(u,m) mStretch((u*2.+m),m)*.5\n//vec2  mStretchM(vec2  u,vec2  m){m*=.5;u= u+m;return  mStretch(u,m);}\n//stretch plus ; negative values do not change\n#define mStretchP(u,m) mStretch((u*2.-m),m)*.5\n//based on #define analstretching(u,m) mix(u-m,mix(vec2(0.),u,step(u,vec2(0.))),step(u,m))\n//above is special case that can include the sat() generalization below +u.x;\n\n//these branchless comparators compare [c] with [0.0] to return [a]==true or [b]==false;\n//based on \n//  https://www.reddit.com/r/askmath/comments/6aag2g/simplifying_stepa00step00a/\n//(c> 0)?a:b\n#define greater(a,b,c)   mix(a,b,step(c,0.))\n//(c< 0)?a:b\n#define less(a,b,c)      mix(a,b,step(0.,c))\n//(c==0)?a:b\n#define equals(a,b,c)    mix(b,a,step(c,0.)+step(0.,c)-1.)\n//----------- mirror symmetry mirror == swap outputs--------------------\n//(c!=0)?a:b\n#define unequal(a,b,c)   mix(a,b,step(c,0.)+step(0.,c)-1.)\n//(a>=0)?a:b   \"unless   \"=not less   ==greater OR equal\n#define unless(a,b,c)    mix(b,a,step(0.,c))\n//(c<=0)?a:b   \"ungreater\"=not greater==less    OR equal\n#define ungreater(a,b,c) mix(b,a,step(c,0.))\n\n/* end__.Static\n   start.Implicit\n*/\n//a generalization of clamp(a,0.,1.); for m=vec2(1)\nv0 sat(v0 a,v1 m){    \n a=.5*(sign(a)+m.x)*a+m.y;\n a=(sign(2.-a)+1.)*(a-2.)+2.; \n return a*.5;}\nv0 sat(v0 a){return sat(a,v1(1));}//return clamp(a,0.,1.); \n\n//fast good monochrome distance field visualization.\n//blue is grid, red and green are distance fields\nv2 rg(v2 c,v1 u){v0 fsaa=1./min(iResolution.x,iResolution.y);\n return vec3(c.rg=mix(fract(c.rg*4.),smoothstep(fsaa,-fsaa,c.rg),\n  .5+(atan(c.rg))/acos(-1.)),grid(u));}\n/*\nfloat yingyang(vec2 u,vec4 m){\n u.x-=m.x;//optional alignment shift of u.\n     //m=abs(m);//enforce positive volumes\n float r;\n vec2 v=-vec2(m.y+m.x,0);\n vec2 w=u+v;\n vec2 t=u;\n if(u.y>0.)t=t;\n else      t=w;//wave\n r=length(t);\n if(u.y>0.)r=r-m.x;\n     else r=m.y-r;\n \n u.x+=m.x;\n float center=length(u+v)-m.y-m.x;\n r=max(r,center);//center\n float right=length(u+2.*v)-r;//right tip-r\n r=r+.5*right*(1.-sign(right)); \n return r;\n}\n\n\n/**/\n/* end__.Implicit\n   start.Main\n*/\nv2 c(v1 U){\n /*I*/\n v1 u=fra(U);\n v2 c=v2(0);\n v3 m=v3(fra(iMouse.xy),fra(iMouse.zw));\n m.x+=.5;\n u.x+=.5; \n /*main*/ \n           c.r=0.;\n if(u.y>0.)c.r=length(u-vec2(m.y*.5,0))-m.y*.5;\n           c.g=.5*(1.-m.y)-length(u-vec2(m.y+1.,0)*.5);\n if(u.y>0.)c.g=0.;\n c.g+=c.r;\n c.g=max(c.g,length(vec2(u.x-.5,u.y))-.5);\n c.g=min(c.g,length(vec2(u.x-1.,u.y)));\n \n float g=(m.y);\n vec2 v=u;   \n float x=m.x;\n x=(x-m.y*.5);\n x=x*2./m.y;\n float y=sqrt(1.-x*x);\n y*=m.y*.5;\n vec2 p=vec2(m.x,y);\n \n if(m.x>m.y){\n   x=m.x;\n   //m.y=1.-m.y;\n   x=(x-(1.-m.y)*.5)-m.y;\n   x=x*2./(1.-m.y);\n   y=-sqrt(1.-x*x);\n   y*=(1.-m.y)*.5;\n   p=vec2(m.x,y);\n }\n \n c.r=miv(abs(u-p))-.01;\n     \n   \n //c.r=yingyang(u,m);  \n \n \n /*O*/\n v0 fsaa=1./min(iResolution.x,iResolution.y);\n c=mix(fract(c*8.),smoothstep(fsaa,-fsaa,c),.5+(atan(c))/acos(-1.));\n //c=rg(c,u);\n //c.b=c.b*4.-3.;\n return c;}\n#define mainImage(O,U)O=vec4(c(U),1);\n/* end__.Main\n   start.Tail\n*/\n\n\n/*\nthe BISYMETRY PRINCIPLE: v3\n- In a quest to increase symmetry for performance and modular shaders. (in contextual biases)\n- - utilize  https://en.wikipedia.org/wiki/List_of_planar_symmetry_groups\n- - utilize linear-algebra-deformed mirror borders that define branches.\n- - Only write atomic special cases and transformations, \n- - ...to construct general functions from.\n- - Instead of writing a general function, \n- - ...to be fed with a lot of parameters set to 0 or 1 to turn them into \"special cases\"\n- - this way general functions can be made into special \"shortcut\" functions more easily.\n- - this way special functions can more easily be extended, generalized.\n...\n- it appears the \"ideal bisymmetrically optimized function looks something like this:\nfloat demo(vec2 u,vec4 m){//u= uv fragment position; m=iMouse.xyzw both likely transformed\n u.x=abs(u.x-1.); u.y=-u.y*.5; //symmetry modifiers are likely \"outsourced\"\n float a=sign(m.x-1.)+1.;\n float b=sign(m.y+1.)+u.x;\n float c=sign(m.z+m.x)-m.y;\n float c=-sign(m.z-u.x);\n //above are all sign-factors, below is the final binomial, both rarely are shared subroutines.\n return u.x*(a+b)*(c+2.)*d*0.5-u.y//the *.5 and -u-y can likely be \"outsourced\"\n}\n- how you transform binomials and branches depends on the bias from your context.\n- in general, it makes sense to delay sqrt() or length() as much as possible.\n- ... while also keeping brnches that are shortcuts \n- ... eg: usually abs(length()) begs to be a shortcut.\n...\n- this whole PRINCIPLE screams FRACTAL and SUPERPRIM ! \n- - https://www.shadertoy.com/results?query=superprim\n- this PRINCIPLE more easily delays sqrt() or length() till the end of a function, \"outsource\"able\n\nHOW TO\n- rearrange your branches so that sqrt() or length() is delayed as much as possible.\n- abs(length()) can not be delayed, therefore it may as well be treated as a shortcut.\n- ... meaning, if(your shape contains abs(length())) that branch stays as if() branch!\n- all other brahcnes usually end up being equally omplex trees of equally complex branches.\n- in that case, an openCL coders eyes open to reveal how to make long pipelines:\n- Substitute functions with identities to reveal their underlying bisymmetries.\n- - substitute max() to if()then() to mix(step)) to mix(sign()) to sums of sign()\n- - - for details on identities see - https://www.shadertoy.com/view/ldBfzc\n- - because there is often a lot of symmetry performance \"lost\" in if-branches, or max()=-min(-)\n- End up precalculating the specifics of a function, \n- Get a sum that you can easily modify \n- transform the sum into binominals of precalculated variabls, that make sense in the context.\n- - this is \"ultimate code golf\", as the best soluion depends on the functions context.\n- Modify underliing partial simple bisymmetries of the functions \"specifics\"\n- Bisymmetry turns out to be mostly about (mutually exclusive matrices of) Binimials.\n...\n- Using only fullRotation*N/24 , makes it more likely that terms cancel each other out.\n- if (symmetry) 2 symmetric subroutine-values tend to cancel factors out, \n- ... down to sign(a)*sign(a)=1.\n- Your function(s) turns into a \"family of bisymmetrical functions\" \n- ... that are more easily generalized or specialized.\n- ... that are more easily made work-save against undefineds like: \n- ... a=atan(0.,0.)*tan(acos(.0))*log2(0.)*pow(0,0)*a/0.\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}