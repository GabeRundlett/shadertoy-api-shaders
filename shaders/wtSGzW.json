{
    "Shader": {
        "info": {
            "date": "1558622555",
            "description": "Camera Test :thinking:",
            "flags": 0,
            "hasliked": 0,
            "id": "wtSGzW",
            "likes": 1,
            "name": "[liliilli] Camera Test",
            "published": 3,
            "tags": [
                "liliilli"
            ],
            "usePreview": 0,
            "username": "liliilli",
            "viewed": 484
        },
        "renderpass": [
            {
                "code": "\nstruct DPoint\n{\n    vec3 mPos;\n    vec3 mCol;\n};\n\nfloat DistLineToPoint(vec3 ro, vec3 rd, vec3 pos)\n{\n    vec3 ap = pos - ro;\n    return length(cross(ap, rd)) / length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 pos)\n{\n    float dist = DistLineToPoint(ro, rd, pos);\n    return smoothstep(0.1, 0.09, dist);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y);\n    uv.x -= (iResolution.x - iResolution.y) / \n        (2.0 * min(iResolution.x, iResolution.y)); \n    uv -= 0.5;\n    \n    vec3 camera = vec3(0, 3, 5);\n    camera = vec3(\n        cos(iTime) * camera.x + sin(iTime) * camera.z, \n        camera.y,\n        -sin(iTime) * camera.x + cos(iTime) * camera.z);\n    vec3 view   = vec3(0, 0, 0);\n    vec3 up     = vec3(0, 1, 0);\n    \n    // Setting up View matrix (don't make view matrix itself, We just need v,s,u element).\n    vec3 forward = normalize(view - camera);\n    vec3 side    = cross(forward, up);\n    vec3 camUp   = cross(side, forward);\n\n    float zoom = 2.0f;\n\n    // Setting up virtual screen, and lay direction of virtual screen pixel.\n    vec3 scrOrg = camera + zoom * forward;\n    vec3 pxlPos = scrOrg + (side * uv.x) + (camUp * uv.y);\n    vec3 rayDir = normalize(pxlPos - camera);\n    \n    vec3 result = vec3(0);\n    \n    DPoint point;\n    point.mPos = vec3(1, 0, 0); point.mCol = vec3(1, 1, 0);\n    {\n        float v = DrawPoint(camera, rayDir, point.mPos);\n        result += point.mCol * v;\n    }\n    point.mPos = vec3(0, 0, 1); point.mCol = vec3(0, .5, 1);\n    {\n        float v = DrawPoint(camera, rayDir, point.mPos);\n        result += point.mCol * v;\n    }\n    point.mPos = vec3(0, 0, -1); point.mCol = vec3(0, 1, 0);\n    {\n        float v = DrawPoint(camera, rayDir, point.mPos);\n        result += point.mCol * v;\n    }\n    point.mPos = vec3(-1, 0, 0); point.mCol = vec3(1, .5, 0);\n    {\n        float v = DrawPoint(camera, rayDir, point.mPos);\n        result += point.mCol * v;\n    }\n    \n    fragColor = vec4(result, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}