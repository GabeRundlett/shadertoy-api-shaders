{
    "Shader": {
        "info": {
            "date": "1501845984",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "4sBBWy",
            "likes": 0,
            "name": "array OpenGL bug 2",
            "published": 3,
            "tags": [
                "bug",
                "opengl"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 661
        },
        "renderpass": [
            {
                "code": "// Testing compilation errors for large arrays.\n\n// step 1: see https://www.shadertoy.com/view/XdSfWy\n// step 2: bilinear dynamic indexing.\n\n// - On Angle (Windows default), behave as for step 1 (max = 4094)\n// - On openGL,\n//      - Compiler refuse more than 1024 instead of 4096 !\n//      - Compiler freeze for minutes if length is exactly 4095 or 4096\n//        plus ultra long error message.\n//        -> to test, try uncommenting line #77 or #78\n\nconst int data[] = int[]( 0, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          1, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          2, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          3, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          4, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          5, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          6, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          7, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          8, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          9, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         10, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         11, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         12, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         13, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         14, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         15, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          0, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          1, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          2, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          3, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          4, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          5, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          6, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          7, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          8, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          9, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         10, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         11, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         12, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         13, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         14, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         15, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          0, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          1, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          2, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          3, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          4, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          5, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          6, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          7, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          8, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          9, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         10, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         11, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         12, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         13, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         14, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         15, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          0, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          1, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          2, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          3, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          4, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          5, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          6, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          7, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          8, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                          9, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         10, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         11, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         12, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         13, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         14, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n                         15, 1,2,3,4,5,6,7,8,9,10,11,12,13,14         // 1023 values\n                                                          // ,15      // 1024\n                                                          // ,15, 0   // 1025\n                        );\n\n#define data(i)  float ( data[int(i)] )\nfloat data_(float x) {\n    float f = fract(x);\n    int i = int(x);\n  //return  mix( data(i), data(i+1), f);\n    return  mix( mix( data(i), data(i+1), f),\n                 mix( data(i+2), data(i+3), f), f);\n}\n\n void mainImage( out vec4 O, vec2 U )\n{\n\tU /= iResolution.xy;\n    float l = float( data.length() );\n\tO = vec4(data_(U.x*l) ) / 16.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}