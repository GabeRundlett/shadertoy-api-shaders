{
    "Shader": {
        "info": {
            "date": "1668172132",
            "description": "write your function to visualize in tab [Common] \nprevious shader is horrible for [title]\nthis is the way\nI need to train brain on [title] to do next thing",
            "flags": 32,
            "hasliked": 0,
            "id": "ms2GWV",
            "likes": 20,
            "name": "3D vector field visualizer",
            "published": 3,
            "tags": [
                "animation",
                "graph",
                "plot",
                "realtime",
                "visual"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 rd = 1./iResolution.xy;\n\n    vec2 u =     (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = 1.5*(2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec3 camPos = vec3(cos(m.x),m.y,sin(m.x))*2.*cD;\n    vec3 camDir = -normalize(camPos);\n    \n    mat3 mtx;\n    mtx[0] = normalize(vec3(camDir.z,0.,-camDir.x));\n    mtx[1] = cross(camDir,mtx[0]);\n    mtx[2] = camDir;\n    vec3 ray = mtx*normalize(vec3(u,2.));//direction of ray from camera\n    \n    float d = 9999.; \n    for(float i=.5; i<bM; ++i){\n    for(float j=.5; j<bT; ++j){\n        vec4  t = texture(iChannel0, vec2(i,j*6.)*rd);\n        vec3  a = t.xyz;\n        float e = dot(a-camPos,ray);\n              a = a - (camPos+ray*e);\n        if(e>=0. && dot(a,a)<.0002*t.w*cD*bZ)\n        {\n            d = min(d,e);\n        }\n    }}\n    fragColor = (cos(d*2./cD+vec4(1,2,3,4))*.5+.5)\n                *step(d,9998.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec2  u2 = vec2(0,u.y!=.5);\n    vec4  t = texture(iChannel0, (u-u2)/iResolution.xy);\n    vec3  a = vectorField3D(t.xyz);\n    vec3  b = t.xyz-a;\n    float z = t.w;\n    if(dot(b,b)<.000001||dot(a,a)>cD*cD){z-= iTimeDelta*2.;}\n    else                                {z+= iTimeDelta*2.;}\n                                         z = min(z,1.);\n    if(iFrame==0 || z<0.)\n    {\n         a = fract(cos(dot(u,vec2(1.111,9.999))+iTime+7.777)\n                   *vec3(5567.1234, 8765.2345, 7654.3456));\n         a = (a*2.-1.)*cD;\n         z = .0;\n    }\n                fragColor = vec4(a,z);\n    if(u.y!=.5){fragColor = t;}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define bM 300.  //max balls on screen\n#define bT 3.    //ball tail length\n#define bZ 1.    //ball size\n#define cD 1.    //camera distance from center of world\n                 //balls die if position outside -cD to cD\n                 //balls born  position   inside -cD to cD\n\nfloat sdTorus(vec3 p)//distance field of torus\n{\n    return length(vec2(length(p.xz)-.5,p.y));\n}\nvec3 vectorField3D(vec3 p)\n{\n    float s = 1./512.;\n    vec3  n = normalize(vec3(sdTorus(p+s*vec3(1,0,0)) - sdTorus(p-s*vec3(1,0,0)),\n                             sdTorus(p+s*vec3(0,1,0)) - sdTorus(p-s*vec3(0,1,0)),\n                             sdTorus(p+s*vec3(0,0,1)) - sdTorus(p-s*vec3(0,0,1))));\n          n = cross(n,normalize(p.zyx*vec3(-1,0,1)));\n    return p-n*sdTorus(p)*.02;\n    //return p+vec3(0,.005,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}