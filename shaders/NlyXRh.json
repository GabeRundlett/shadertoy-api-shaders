{
    "Shader": {
        "info": {
            "date": "1640120139",
            "description": "basic climb ladder",
            "flags": 0,
            "hasliked": 0,
            "id": "NlyXRh",
            "likes": 6,
            "name": "basic climb ladder",
            "published": 3,
            "tags": [
                "basic",
                "ladder",
                "climb"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "///------------image\n//por jorge2017a1-\n\n//referencia \n///https://www.shadertoy.com/view/ssdGWl...plento\n//https://www.shadertoy.com/view/MtffWs....iq\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nvec3 EscaleraTorre(vec3 p)\n{   vec3 res= vec3(9999.0, -1.0,-1.0);\n    float d1, d=99999.0;\n    int y;\n    float AnchoTot=2.5;\n    float AltoTot=10.0;\n    float NumEs=5.0;\n    float AnchoEs=AnchoTot/NumEs;\n    float AltoEs=AltoTot/NumEs;\n    float AltoEsNew;\n    \n    for(int i=1;i<=int(NumEs);i++ )\n     {   \n      float posx=float(i)*AnchoEs*2.0;\n      float posy=-float(i)*AltoEs*2.0;\n      AltoEsNew=AltoTot-( float(i)- 1.0)*AltoEs ;\n      float d1=sdBox(p-vec3(posx,posy/2.0-AltoEsNew,0.0), vec3(AnchoEs,AltoEs+AltoEsNew,2.0) );\n      d=min(d,d1);\n     }   \n    res =opU3(res, vec3(d,16,-1.0)); //inf\n    return res;\n}\n\nvec2 stairpos(float x)\n{ return vec2(x-0.6, -x*0.6 + .2);  }\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\tvec3 res= vec3(9999.0, -1.0,-1.0);  vec3 pp=p;\n    \n\tfloat planeDist1 = p.y+5.0;  //piso inf\n    res =opU3(res, vec3(planeDist1,1.0,-1.0)); //inf\n    \n   vec3 et= EscaleraTorre(p.yxz-vec3(-5.5,6.0,0.0));\n   res =opU3(res, et);\n    \n    float t=mod(iTime,6.0);\n    float posyfl=floor(t);\n    float posyfr=fract(t);\n    \n   \n    float movy=posyfl;\n    float movx=-posyfl*2.0;\n    float sd1= sdSphere(p-vec3(7.0+movx,-4.5+abs(movy),-1.0),0.5 );\n    res =opU3(res, vec3(sd1,1.0,-1.0)); \n    //------\n    float mult=0.5;\n    t=mod(iTime*mult,5.0);\n    float x=t;\n    \n    float h = fract(x)-0.5;\n    float s = -sign(h);\n    float th = 1.0- 2.0*abs(h);          // also 1.0 + 2.0*h*s\n    float pxht = x + h*th;\n   \n    float movy2=pxht;\n    float movx2=-x*2.0;\n    float sd2= sdSphere(p-vec3(7.0+movx2,-4.5+movy2,-0.5),0.5 );\n    res =opU3(res, vec3(sd2,2.0,-1.0)); \n    \n    //------------\n    \n    mult=1.0;\n    t=mod(iTime*mult,8.0);\n     x=-t;\n     vec2 cb = stairpos(x - 1.);\n     cb.y += 0.5*abs(cos(t*2.0));\n     float sd3= sdSphere(p-vec3(8.5+cb.x,-5.5+cb.y,0.5),0.5 );\n     res =opU3(res, vec3(sd3,3.0,-1.0)); \n     \n     \n     /*\n     //por  pyBlob\n     for (t=0.;t<8.;t+=0.1) // shows everything at once\n    {\n        float x=-t;\n        vec2 cb = stairpos(x - 1.);\n        cb.y += 0.5 * abs(cos(t*2.0));\n        float sd3 = sdSphere(p - vec3(8.5 + cb.x, -5.5 + cb.y, 0.5), 0.4);\n        res = opU3(res, vec3(sd3,3.0,-1.0)); \n    }\n     */\n    //----------\n     \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 nor = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    nor= normalize(nor);\n    return nor;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   float t = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    \n    #define DISTANCE_BIAS 0.75\n    float minDist = 9999.0; \n    \n    for(int i=0; i <= PMaxSteps; i++) \n    {  \tp = ro + rd*t;\n        dS = GetDist(p);\n        if ( abs(dS.x)<MIN_DIST  || i == PMaxSteps)\n        {mObj.hitbln = true; minDist = abs(t); break;}\n        \n        if(t>MAX_DIST)\n            {mObj.hitbln = false;    minDist = t;    break; } \n        \n        t += dS.x;\n        marchCount++;\n    }\n        \n    mObj.dist = minDist;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    mObj.phit=p;\n    return t;\n}\n\n\nfloat FakeSoftShadow(float result, vec3 LightPos,vec3 point,vec3 normal)\n{\n    vec3 shadowOffset = normal * 0.2 ;\n    \n    int epoch = 5;\n    \n    float delta = result/float(epoch);\n    float lightOffset = 0.2;\n    \n    for(int i = 0; i<epoch; i++)\n    {\n        vec3 tmp = LightPos +vec3(0,0,i)*lightOffset;\n        //if(RayMarching(point + shadowOffset,normalize(tmp-point)) < length(tmp-point))\n        float dis=RayMarch(point + shadowOffset,normalize(tmp-point), int( MAX_DIST));\n        if (dis< length(tmp-point))\n        {\n            result -= delta;\n        }\n    }\n    return result;\n}\n\nfloat specularBRDF(float roughness, vec3 n, vec3 v, vec3 l)\n{\n    vec3 h = normalize(v + l);\n    float NoV = abs(dot(n, v)) + .1;\n    float NoL = clamp(dot(n, l), 0., 1.);\n    float NoH = clamp(dot(n, h), 0., 1.);\n    float D = (2. + 1. / roughness) * pow(max(1. - NoH * NoH, .0078125), 1. / roughness * .5) / (2. * PI);\n    return D / (4. * (NoL + NoV - NoL * NoV));\n}\n\n\n//----------------------------------------------------\n//https://www.shadertoy.com/view/ft3SRr\nvec3 Shading(vec3 LightPos, vec3 pos, vec3 ro,vec3 baseCol)\n{\n    //ro=eye\n    vec3 L = normalize(LightPos - pos);\n    vec3 V = normalize(ro - pos);\n    vec3 N = GetNormal(pos);\n    vec3 H = normalize(L+V);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float Ambient = 0.1;\n       \n    float result = max(dot(L,N),0.0)*0.5 + pow(max(dot(H,N),0.0),20.)*0.9;\n    result = FakeSoftShadow(result, LightPos,pos,N);\n    \n    float roughness=4.25;\n    vec3 specol=specularBRDF(roughness, N, V, L)*baseCol;\n    \n    Material mate;\n    mate.baseCol = vec3(.38, .02, .02);\n    mate.specularCol = vec3(0.56 ,.64, .64);\n    \n    return ((result+Ambient)*baseCol+specol*mate.specularCol)/2.0;\n        \n}\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{  float intensity=1.0;\n     vec3 result;\n    vec3 sha= Shading(plight_pos,p,ro,colobj);\n    result =  sha;\n    return result;\n}\n\nvec3 render_sky_color(vec3 rd)\n{ float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{  \tvec3 colobj; \n    \n    if( mObj.hitbln==false) return  render_sky_color(rd);\n    \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    return colobj;\n}\n\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n   TObj Obj;\n   mObj.rd=rd;\n   mObj.ro=ro;\n   vec3 p;\n\n   float d=RayMarch(ro,rd, MAX_STEPS);\n   \n    Obj=mObj;\n    if(mObj.hitbln) \n    {   p = (ro + rd * d );  \n        vec3 nor=mObj.normal;\n        vec3 colobj;\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1)*light_color1;\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2)*light_color2;\n        col= result;\n    }\n    else if(d>MAX_DIST)\n    col= render_sky_color(rd);\n    \n   return col;\n}\n\n\n// Tone mapping\n// See: http://filmicgames.com/archives/75\nvec3 Uncharted2ToneMapping(vec3 color)\n{   float gamma = 2.2;\n\tfloat A = 0.15;\n\tfloat B = 0.50;\n\tfloat C = 0.10;\n\tfloat D = 0.20;\n\tfloat E = 0.02;\n\tfloat F = 0.30;\n\tfloat W = 11.2;\n\tfloat exposure = 0.012;\n\tcolor *= exposure;\n\tcolor = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;\n\tfloat white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;\n\tcolor /= white;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n\n    light_pos1= vec3(10.0, 10.0, -10.0 );    light_color1=vec3(1.0);\n \tlight_pos2= vec3(-10.0, 30.0, -10.0 ); light_color2 = vec3(1.0); \n\n   float posz=0.0;\n   vec3 ro=vec3(-1.0,1.0,-16.5+posz);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n    vec3 col= Render( ro,  rd);\n    col+=Uncharted2ToneMapping(col);   \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//--------------common\nstruct Material\n{\n    vec3 baseCol;\n    vec3 specularCol;\n    float roughness;\n};\n\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 phit; //22-mar-2021\n    vec3 rf;\n    float marchCount;\n    bool blnShadow;\n    bool hitbln;\n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n#define COLORSKY vec3(0.1, 0.1, 0.6)\n\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n///Gracias a SHane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9) \n);\n\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}