{
    "Shader": {
        "info": {
            "date": "1683542385",
            "description": "A library of cycling SDFs\n\nAll SDF code from the amazing Inigo Quilez https://iquilezles.org/articles/distfunctions2d/",
            "flags": 0,
            "hasliked": 0,
            "id": "dlG3zh",
            "likes": 3,
            "name": "SDF cycle",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "motus_art",
            "viewed": 120
        },
        "renderpass": [
            {
                "code": "//\n// SDFs\n//\nfloat dot2( in vec2 v ) {\n  return dot(v,v);\n}\n\nfloat inverseLerp(float v, float minValue, float maxValue) {\n  return (v - minValue) / (maxValue - minValue);\n}\n\nfloat remap(float v, float inMin, float inMax, float outMin, float outMax) {\n  float t = inverseLerp(v, inMin, inMax);\n  return mix(outMin, outMax, t);\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nmat2 rotate2D(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c);\n}\n\n\n// All SDF code from the amazing Inigo Quilez\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\n\nfloat sdEquilateralTriangle( in vec2 p, in float size ) {\n  const float k = sqrt(3.0);\n  p.x = abs(p.x) - size;\n  p.y = p.y + 1.0/k;\n  if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n  p.x -= clamp( p.x, -2.0, 0.0 );\n  return -length(p)*sign(p.y);\n}\n\nfloat sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{\n    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n  // Position\n  // Move\n  //vec2 pos = p - vec2(cos(iTime * 0.5) * 0.9, sin(iTime * 0.5) * 0.5);\n  \n  // Rotate\n  //pos *= rotate2D(iTime * 0.25);  \n  \n  // scale\n  //float d = sdEquilateralTriangle(pos, remap(sin(iTime * 0.5), -1.0, 1.0, 0.2, 0.9));\n  \n  // SDFs\n  float d = 0.0;\n  int shape = int(mod(iTime, 9.0));\n  switch (shape) {\n    case 0:\n      d += sdCircle(p, 0.5);\n      break;\n      \n    case 1:\n      d += sdBox(p, vec2(1.0, 0.5));\n      break;\n      \n    case 2:\n      d += sdRhombus(p, vec2(1.0, 0.5));\n      break;\n      \n    case 3:\n      d += sdEquilateralTriangle(p, 0.5);\n      break;\n      \n    case 4:\n      d += sdPentagon(p, 0.6);\n      break;\n      \n    case 5:\n      d += sdHexagon(p, 0.6);\n      break;\n      \n    case 6:\n      d += sdStar5(p, 0.75, 0.5);\n      break;\n      \n    case 7:\n      d += sdHeart(vec2(p.x, p.y + 0.5));\n      break;\n      \n    case 8:\n      d += sdRoundedX(p, 0.75, 0.2);\n      break;\n  }\n\n  // coloring\n  vec3 col;\n  if (d>0.0) {\n    col = vec3(0.15);\n    col *= 0.8 + 0.937 * cos(50.0 * d + iTime * -10.0);\n  } else {\n    col = vec3(0.937);\n  }\n    \n  col *= 2.0 - exp(-6.0*abs(d));\n\t\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}