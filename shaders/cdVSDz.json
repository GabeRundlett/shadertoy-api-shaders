{
    "Shader": {
        "info": {
            "date": "1681295877",
            "description": "My participation to the 4K executable graphics @revision 2023",
            "flags": 32,
            "hasliked": 0,
            "id": "cdVSDz",
            "likes": 18,
            "name": "cucube - 4K GFX@Revision2023",
            "published": 3,
            "tags": [
                "cube",
                "revision",
                "cucube"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 rgb = texture(iChannel0, uv).xyz;\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456789)*123.456,1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.35;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\nfloat _grid(vec3 p, vec3 sp, float sz)\n{\n    p = mod(p+sp*.5,sp)-sp*.5;\n    return min(length(p.xy)-sz, min(length(p.xz)-sz, length(p.yz)-sz));\n}\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    vec3 pp = p;\n    vec3 repp = vec3(.5);\n    vec3 idp = floor((pp+repp*.5)/repp);\n    pp = mod(pp+repp*.5,repp)-repp*.5;\n    pp += sin(idp)*.2;\n    float hide = (sin(idp.x+idp.z+idp.y)*.5+.5)*.1;\n    acc = _min(acc, vec2(length(pp)-.01+hide, -2.));\n    acc = _min(acc, vec2(length(p)-1., 0.));\n\n    vec3 pc= p;\n    vec3 rep = vec3(1.);\n    vec3 maxRep = 5.*rep;\n    pc = max(-maxRep*.5, pc);\n    pc = min(maxRep*.5, pc);\n    vec3 id =floor((pc+rep*.5)/rep);\n    pc = mod(pc+rep*.5,rep)-rep*.5;\n    vec3 offcir = vec3(.5)*sign(sin(id*vec3(2.,3.,4.)));\n    float shapeSel = mod(id.x+11.*id.y+id.z*2.,2.);\n    float shape = mix(\n    _cube(pc, vec3(.5)), \n    length(pc+offcir)-1., \n    shapeSel);\n    float glob = _cube(p, maxRep-maxRep*.5);\n    \n    shape = max(shape, _cube(pc, vec3(.485)));\n    shape = mix(shape, 100., mod(id.y+mod(id.x+id.z,2.),2.));\n    shape = max(shape, glob);\n    if (shapeSel == 1.)\n    {\n        shapeSel += mod(id.x, 2.);\n    }\n    acc = _min(acc, vec2(shape, shapeSel));\n    \n    float wires = _cucube(pc, vec3(.5), vec3(.001))+.007;\n    wires = max(wires, glob);\n    acc = _min(acc, vec2(wires, -2.));\n    \n    float ground = -p.y+maxRep.y*.5+.007;\n    \n    acc = _min(acc, vec2(ground, -1.));\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 30.; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x*.4;\n    }\n    return vec3(-1.);\n}\n\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res)\n{\n    vec3 col = n*.5+.5;\n    vec3 ldir = normalize(vec3(1.,-1.,1.));\n    float ldotn = sat(dot(ldir, n));\n    if (res.z == -1.)\n        col = vec3(.1)*ldotn;\n    if (res.z == -2.)\n      col = vec3(1.);\n    if (res.z == 0.)\n        col = vec3(.2)*ldotn;\n    if (res.z > 0.)\n        col = mix(vec3(1.), vec3(1.,0.,0.), res.z-1.);\n    col = col.xxx;\n    col = mix(col, col*vec3(0.988,0.290,0.325), 1.-sat((abs(p.z)-1.)*100.));\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    float d = 6.;\n    vec3 ro = vec3(d,1,-d);\n    vec3 ta = vec3(0.,1.5,0.);\n    vec3 rd = normalize(ta-ro);\n    vec2 dof = (vec2(rand(), rand())-.5)*.1;\n    ro.xy+= dof*3.;\n    rd.xy -= dof*.45;\n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 256);\n    float depth = 100.;\n    if (res.y > 0.)\n    {\n        depth = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(p, n, rd, res);\n        vec3 refl = normalize(reflect(rd, n)\n        +(vec3(rand(), rand(), rand())-.5)*.05);\n        vec3 resrefl = trace(p+n*0.01, refl, 128);\n        if (resrefl.y > 0.)\n        {\n            vec3 prefl = p+n*0.01+refl*resrefl.y;\n            vec3 nrefl = getNorm(prefl, resrefl.x);\n            col += getMat(prefl, nrefl, refl, resrefl)*vec3(0.439,0.459,1.000);\n        }\n    }\n    vec3 red = vec3(0.604,0.071,0.710);\n    col = mix(col, 2.*mix(red.xxx, red,.5)*(1.-sat(abs(uv.x*2.))), 1.-exp(-depth*0.017));\n    return col;\n}\n\nvec3 rdr2(vec2 uv)\n{\n    vec2 off = normalize(vec2(1.))*.01*sat(length(uv));\n    vec3 col = vec3(0.);\n    float alea = mod(float(iFrame),3.);\n        col.x = rdr(uv+off).x;\n        col.y = rdr(uv).y;\n        col.z = rdr(uv-off).z;\n    return col;\n}\n/*\nvoid main()\n{\n    vec2 ouv = (fragCoord)/iResolution.xy;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    // taken frm luna // \t// seed the RNG (again taken from Devour)\n    _seed = float(((iFrame*73856093)^int(gl_FragCoord.x)*19349663^int(gl_FragCoord.y)*83492791)%38069);\n    vec3 col = pow(rdr2(uv), vec3(1.5))*1.5;\n    col += pow(rdr(uv+(vec2(rand(), rand())-.5)*.1), vec3(2.));\n    col = sat(col);\n    vec2 off = vec2(1., -1.)/(iResolution.x*1.5);\n    \n\n    col = sat(col);\n    //if (iFrame != 0)\n    //col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .9);\n    fragColor = vec4(col,1.0);\n}*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = (fragCoord)/iResolution.xy;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    // taken frm luna's blossom // seed the RNG (again taken from Devour)\n    _seed = float(((iFrame*73856093)^int(gl_FragCoord.x)*19349663^int(gl_FragCoord.y)*83492791)%38069);\n    vec3 col = pow(rdr2(uv), vec3(1.5))*1.5;\n    col += pow(rdr(uv+(vec2(rand(), rand())-.5)*.1), vec3(2.));\n    col = sat(col);\n    vec2 off = vec2(1., -1.)/(iResolution.x*1.5);\n    \n\n    col = sat(col);\n    if (iFrame != 0)\n        col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .9);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}