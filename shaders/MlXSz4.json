{
    "Shader": {
        "info": {
            "date": "1434824780",
            "description": "This shader was hacked together from quite a few different sources, because I can't render any 3d object besides a sphere. kinda... oh and credit to flight404 as this all started with me tweaking his code: https://www.shadertoy.com/view/4dXGR4",
            "flags": 4,
            "hasliked": 0,
            "id": "MlXSz4",
            "likes": 10,
            "name": "I dont even know",
            "published": 3,
            "tags": [
                "3dnoise",
                "rainbow",
                "rock"
            ],
            "usePreview": 1,
            "username": "Cieric",
            "viewed": 1742
        },
        "renderpass": [
            {
                "code": "vec4 blurSample(sampler2D s, vec2 p, float a)\n{\n    vec2 u = vec2(+0.0, +0.1)*a;\n    vec2 d = vec2(+0.0, -0.1)*a;\n    vec2 l = vec2(+0.1, +0.0)*a;\n    vec2 r = vec2(-0.1, +0.0)*a;\n    vec4 v = texture(s, p);\n\tv+= texture(s, p+u+l)+texture(s, p+u)+texture(s, p+u+r)+\n        texture(s, p+l)+texture(s, p)+texture(s, p+r)+\n        texture(s, p+d+l)+texture(s, p+d)+texture(s, p+d+r);\n    return v/10.0;\n}\n\nvec4 perm(vec4 x){return mod(34.0*x*x+x, 289.0);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat freqs[4];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfreqs[0] = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;\n\n\tfloat brightness\t= freqs[1] * 0.25 + freqs[2] * 0.25;\n\tfloat radius\t\t= 0.23 + brightness * 0.2;\n\tfloat invRadius \t= 1.0/radius;\n    \n\tfloat time\t\t= iTime * 0.1;\n\tfloat aspect\t= iResolution.x/iResolution.y;\n\tvec2 uv\t\t\t= fragCoord.xy / iResolution.xy;\n\tvec2 p \t\t\t= -0.5 + uv;\n\tp.x *= aspect;\n\t\n\tfloat angle\t\t= atan( p.x, p.y );\n\tfloat dist\t\t= length(p);\n\tvec3 coord\t\t= vec3( angle, dist, time * 0.1 );\n    \n\tvec2 sp = -1.0 + 2.0 * uv;\n\tsp.x *= aspect;\n\tsp *= ( 2.0 - brightness );\n  \tfloat r = dot(sp,sp);\n\tfloat f = (1.0-sqrt(abs(1.0-r)))/(r) + brightness * 0.5;\n    \n    vec3 sphereNormal \t= vec3( 0.0, 0.0, 1.0 );\n\tvec3 dir \t\t\t= vec3( 0.0 );\n\tvec3 center\t\t\t= vec3( 0.5, 0.5, 1.0 );\n\tvec3 starSphere\t\t= vec3( 0.0 );\n    \n    if( dist < radius ){\n  \t\tvec2 newUv;\n \t\tnewUv.xy = sp.xy * f / (brightness+1.2)  + vec2(time*2.0, 0.0);\n    \tfloat h = angle/6.2832;\n    \tfloat s = clamp(dist*4.0, 0.0, 1.0);\n    \tfloat v = clamp(distance(dist, radius)*10.0, 0.0, 1.0);\n        //float v = 1.0-clamp(distance(dist, radius)*10.0-noise(vec3(sin(angle)*10.0,cos(angle)*10.0,time*10.0))/2.0, 0.0, 1.0);\n        //v*=texture( iChannel1, vec2( v, 1.0 ) ).x;\n        vec3 rgb = hsv2rgb(vec3(h, s, v));\n        starSphere\t\t= (blurSample( iChannel0, newUv, 0.02).rrr+blurSample( iChannel0, newUv, 0.01).rrr)*rgb;\n\t}\n    else\n    {\n        \n        float h = angle/6.2832;\n    \tfloat s = 1.0;//clamp(dist*4.0, 0.0, 1.0);\n        float v = 1.0-clamp(distance(dist, radius)*10.0-noise(vec3(sin(angle)*10.0,cos(angle)*10.0,time*10.0))/2.0, 0.0, 1.0);\n        v*=texture( iChannel1, vec2( v, 1.0 ) ).x;\n        vec3 rgb = hsv2rgb(vec3(h, s, v));\n        starSphere = rgb;\n    }\n\tfragColor.rgb\t= starSphere;\n\tfragColor.a\t\t= 0.1;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}