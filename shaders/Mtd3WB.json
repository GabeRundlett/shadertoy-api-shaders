{
    "Shader": {
        "info": {
            "date": "1471436302",
            "description": "using smoothstep() to shapen gradients to blur-able borders.\n\nmixing a smoothstepped circle with 3 smoothstepped seesaw sdf already looks like a textured metaball\n\n basic memo to myself. make letters by mixing gradients and sharpening them.",
            "flags": 0,
            "hasliked": 0,
            "id": "Mtd3WB",
            "likes": 11,
            "name": "smoothstep blurable borders",
            "published": 3,
            "tags": [
                "circle",
                "smoothstep",
                "checkers",
                "smooth"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1872
        },
        "renderpass": [
            {
                "code": "//using smoothstep to turn gratients into blur-able sharp borders.\n//todo: mix gratients for glyphs/letters that can be blurred.\n\n//cursor to bottom left for initial SHARP values. \n//top right is more blurry\n\n//short special case of smoothstep(), turn gratient to sharpened border.\nfloat ssf(float a,float d){return smoothstep(-a,a,d);}\n\n//triangle-function.\n//x includes phase and x*n has n adjust \"range\" \nfloat waveTri(float x,float d){d*=2.;\n return min(mod(x,d),mod(-x,d));\n} //return abs((x)/w);//waveSaw saw-function\n\n//define 2 mods that toggle 2 checker patterns:\n#define do_checkers\n//do_checkers_SKY has no effect without do_checkers\n//#define do_checkers_SKY\n\nvoid mainImage(out vec4 r,in vec2 c){\n vec2 res=iResolution.xy;\n vec2 p=c/min(res.x,res.y);\n float dx=res.x/res.y;\n vec2 mr=iMouse.xy/res.xy;//relative mouse position on the screen\n float blur=mr.x+ mr.y*(sin(iTime*5.)*.5+.5);\n blur/=18.;//lessen blur\n //distance to centered circle\n float d=length(p*2.-vec2(res.x/res.y,1.))-1.;\n    \n //horizontal splitting and inverting line\n d*=.5-waveTri(p.y*1.,1.);\n //if(c.y>res.y*.5)d=-d; //blur-imune variant\n \n //tricolor:                                    \n float rr=ssf(blur,d*1.5);\n float rg=ssf(blur,d);\n float rb=ssf(blur,d*.75);\n r.rgb=vec3(rr,rg,rb);\n    \n#ifdef do_checkers\n //checker tiling that smoothens poorly\n float tx=0.5-waveTri(p.x*9.,1.);\n float ty=0.5-waveTri(p.y*9.,1.);\n //the checkers tiling blurs 8* as much as it it only 1/8th as intense\n tx=ssf(blur*8.,tx);\n ty=ssf(blur*8.,ty);//bluring x and y independend, not the best way.\n float checkers=max(tx-ty,ty-tx)/8.;\n#ifdef do_checkers_SKY\n r.b=.5-checkers;\n#endif\n r.rb-=vec2(checkers);\n#endif\n}\n //monochrome:\n //r.rgb=vec3(ssf(blur,d));}               \n //mixing 2 textures:\n //r.rgb=mix(vec3(0.),vec3(1.),ssf(blur,d));}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}