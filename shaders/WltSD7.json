{
    "Shader": {
        "info": {
            "date": "1581120618",
            "description": "Computes cos(acos(x)/3), which shows up in the solution to cubic equations. I am getting 1.6x performance at equivalent accuracy than the direct GPU implementation. Details: [url]http://iquilezles.org/articles/trisect/trisect.htm[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WltSD7",
            "likes": 19,
            "name": "cos(acos(x)/3)",
            "published": 3,
            "tags": [
                "2d",
                "acos",
                "cubic",
                "third"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1545
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computing cos(acos(x)/3) to equivalent accuracy to the\n// direct GLSL implementation, but faster. cos(acos(x)/3)\n// shows up in cubic equations with three real roots.\n//\n// Details: https://iquilezles.org/articles/trisect\n\n\n// 0: graph and difference (blue<1e-7, green<1e-6, yellow<1e-5, red<1e-4)\n// 1: performance measure\n#define MODE 0\n\n// 0: speed of light : Err n/a       MSE n/a       Perf 3.1\n// 1: 1 SQRT + 3 FMA : Err 1.03e-03  MSE 5.40e-07  Perf 2.2\n// 2: 1 SQRT + 4 FMA : Err 9.65e-05  MSE 4.73e-09  Perf 1.8\n// 3: 1 SQRT + 5 FMA : Err 1.65e-05  MSE 3.86e-11  Perf 1.6\n// 4: 1 SQRT + 5 FMA : Err 1.10e-05  MSE 5.72e-11  Perf 1.6\n// 5: rational polynomials, found in https://www.shadertoy.com/view/Md3XD4\n// 6: pow based      : Err \n// 7: GLSL 4.5 refer : Err 1.15e-05  MSE 3.25e-11  Perf 1.0\n#define APPROX 4\n        \n        \nfloat f( in float x ) { return cos(acos(x)/3.0); }\nfloat g( in float x )\n{\n    #if APPROX==0\n    return sqrt(x);\n\t#endif    \n    \n    #if APPROX==1\n\tx = sqrt(0.5+0.5*x);\n    return x*(-0.064916*x+0.564916)+0.5;\n    #endif\n    \n    #if APPROX==2\n\tx = sqrt(0.5+0.5*x);\n    return x*(x*(x*0.021340-0.096564)+0.575224)+0.5;\n    #endif\n\n    #if APPROX==3\n\tx = sqrt(0.5+0.5*x);\n    return x*(x*(x*(x*-0.008590+0.038236)-0.106509)+0.576869)+0.5; \n    #endif\n    \n    #if APPROX==4\n\tx = sqrt(0.5+0.5*x);\n    return x*(x*(x*(x*-0.008972+0.039071)-0.107074)+0.576975)+0.5; \n    #endif\n    \n    #if APPROX==5\n    return (0.866017+1.25203*x+0.431996*x*x+0.0161423*x*x*x) / (1.0+1.25325*x+0.312933*x*x);\n    #endif\n\n    #if APPROX==6\n    x = 0.5+0.5*x;\n    x = pow(x,0.455);\n    x = 0.5+0.5*x;\n    return x;\n    #endif\n\n    #if APPROX==7\n\treturn f(x);\n    #endif\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n// display    \n#if MODE==0\n    float dx = 1.0/iResolution.y;\n\tvec2  p = fragCoord/iResolution.xy;\n\n    p.x = 2.0*p.x-1.0;\n    p.y = 0.5+0.5*p.y;\n    \n    vec3 col = vec3( 0.2 + 0.02*mod(floor(p.x*10.0)+floor(p.y*10.0),2.0) );\n     \n    float a = f(p.x);\n    float b = g(p.x);\n\n\n    { // yellow: reference\n        float y = a;\n        float dy = dFdx(y);\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);\n        col = mix( col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 1.0, di ) );\n    }\n\n    { // blue: approximation\n        float y = b;\n        float dy = dFdx(y);\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 1.0, di ) );\n    }\n    \n    if( p.y<0.51)\n    {\n        float d = abs(a-b);\n             if( d<1e-7) col=vec3(0.0,0.0,1.0);\n        else if( d<1e-6) col=vec3(0.0,1.0,0.0);\n        else if( d<1e-5) col=vec3(1.0,1.0,0.0);\n        else if( d<1e-4) col=vec3(1.0,0.5,0.0);\n        else             col=vec3(1.0,0.0,0.0);\n    }\n    \n#else\n\t// measure performance\n    float x = 0.9*fragCoord.x/iResolution.x + min(iTime,0.1);\n    vec3 col = vec3(0.0);\n    float f = 0.0;\n    uint num = 20000u+min(uint(iFrame),0u);\n    for( uint i=0u; i<num; i++ )\n    {\n        float y = x+f*0.0000001;\n        f += g(y);\n        f += g(y+f*0.001);\n    }\n    col.x = f/float(num);\n#endif\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}