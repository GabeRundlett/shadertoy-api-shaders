{
    "Shader": {
        "info": {
            "date": "1482595710",
            "description": "a simple sdf open sign with glow",
            "flags": 32,
            "hasliked": 0,
            "id": "4tVSzz",
            "likes": 9,
            "name": "Open Sign",
            "published": 3,
            "tags": [
                "sdf",
                "glow",
                "multipass"
            ],
            "usePreview": 0,
            "username": "AxleMike",
            "viewed": 910
        },
        "renderpass": [
            {
                "code": "// Combine\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 signColor = texture(iChannel0, uv).rgb;\n    vec3 blurredSamples = texture(iChannel1, uv).rgb * 5.0;\n\tfragColor = vec4(signColor + blurredSamples, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Alexander Lemke, 2016\n// Scene\n\n//////////////////////////////////////////////////\n// Settings\n#define     NUMBER_OF_STEPS         32\n\n//////////////////////////////////////////////////\n// Constants\nconst float     MAX_DISTANCE    = 20.0;\nconst float     EPSILON         = 0.001;\nconst float     PI              = 3.14159265359;\n\nconst float \tRED_DIM\t\t= 4.0;\nconst float \tRED_LIT\t\t= 3.0;\nconst float \tBLUE_LIT \t= 2.0;\nconst float \tBLUE_DIM \t= 1.0;\n\n//////////////////////////////////////////////////\n// Helpers\nfloat Saturate(in float f)\n{\n    return clamp(f, 0.0, 1.0);\n}\n\nvec3 Saturate(in vec3 v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\nmat3 Create3x3RotationMatrix(in vec3 axis, in float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,          oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c,          oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c);\n}\n    \n//////////////////////////////////////////////////////\n// Intersection Helpers\nstruct IntersectionData\n{\n    float       mT;\n    float       mMaterialIndex;\n};\n    \nIntersectionData GetClosestIntersection(in IntersectionData a, in IntersectionData b)\n{\n    if(a.mT < b.mT)\n    {\n        return a;\n    }\n    return b;\n}\n\nstruct Ray\n{\n    vec3    mPosition;\n    vec3    mDirection;\n}; \n\n//////////////////////////////////////////////////////\n// Basic Distance Field Tests\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox(in vec3 p, in vec3 boxSize)\n{\n  \tvec3 d = abs(p) - boxSize;\n  \treturn min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdTorus(in vec3 p, in vec2 torusDimensions)\n{\n    vec2 q = vec2(length(p.xy) - torusDimensions.x, p.z);\n    return length(q) - torusDimensions.y;\n}\n\nfloat sdfCapsule(in vec3 p, in vec3 pointA, in vec3 pointB, in float radius)\n{\n    vec3 lineBA = pointB - pointA;\n    vec3 linePA = p - pointA;\n    float rate = min(max(dot(lineBA, linePA), 0.0) / dot(lineBA, lineBA), 1.0);\n    return length(p - (pointA + rate * lineBA)) - radius; \n}\n\n//////////////////////////////////////////////////////\n// Scene Elements\nIntersectionData CheckSceneForIntersection(in vec3 p)\n{\n    float lightTimer = mod(iTime, 6.0);\n    \n    IntersectionData oIntersectionData = IntersectionData(MAX_DISTANCE, (lightTimer < 1.0) ? RED_DIM : RED_LIT);\n    oIntersectionData.mT = sdTorus(p - vec3(-2.1, 0.0, 0.0), vec2(1.0, 0.1));\n    \n\tIntersectionData pIntersectionData = IntersectionData(MAX_DISTANCE, (lightTimer < 2.0) ? RED_DIM : RED_LIT);\n    pIntersectionData.mT = sdfCapsule(p, vec3(-0.6, -1.0, 0.0), vec3(-0.6, 1.0, 0.0), 0.1);\n    pIntersectionData.mT = min(pIntersectionData.mT, sdfCapsule(p, vec3(-0.6, 0.0, 0.0), vec3(0.0, 0.0, 0.0), 0.1));\n    pIntersectionData.mT = min(pIntersectionData.mT, sdfCapsule(p, vec3(-0.6, 1.0, 0.0), vec3(0.0, 1.0, 0.0), 0.1));\n    float halfLoop = sdTorus(p - vec3(0.0, 0.5, 0.0), vec2(0.5, 0.1));\n    pIntersectionData.mT = min(pIntersectionData.mT, (p.x < 0.0) ?  MAX_DISTANCE : halfLoop);\n    \n    IntersectionData eIntersectionData = IntersectionData(MAX_DISTANCE, (lightTimer < 3.0) ? RED_DIM : RED_LIT);\n    eIntersectionData.mT = sdfCapsule(p, vec3(1.0, -1.0, 0.0), vec3(1.0, 1.0, 0.0), 0.1);\n    eIntersectionData.mT = min(eIntersectionData.mT, sdfCapsule(p, vec3(1.0, 0.0, 0.0), vec3(1.8, 0.0, 0.0), 0.1));\n    eIntersectionData.mT = min(eIntersectionData.mT, sdfCapsule(p, vec3(1.0, 1.0, 0.0), vec3(1.8, 1.0, 0.0), 0.1));\n    eIntersectionData.mT = min(eIntersectionData.mT, sdfCapsule(p, vec3(1.0, -1.0, 0.0), vec3(1.8, -1.0, 0.0), 0.1));\n       \n    IntersectionData nIntersectionData = IntersectionData(MAX_DISTANCE, (lightTimer < 4.0) ? RED_DIM : RED_LIT);\n    nIntersectionData.mT = sdfCapsule(p, vec3(2.3, -1.0, 0.0), vec3(2.3, 1.0, 0.0), 0.1);\n    nIntersectionData.mT = min(nIntersectionData.mT, sdfCapsule(p, vec3(3.4, -1.0, 0.0), vec3(2.3, 1.0, 0.0), 0.1));\n    nIntersectionData.mT = min(nIntersectionData.mT, sdfCapsule(p, vec3(3.4, -1.0, 0.0), vec3(3.4, 1.0, 0.0), 0.1));\n    \n    oIntersectionData = GetClosestIntersection(oIntersectionData, pIntersectionData);\n    eIntersectionData = GetClosestIntersection(eIntersectionData, nIntersectionData);\n    oIntersectionData = GetClosestIntersection(oIntersectionData, eIntersectionData);\n    \n    IntersectionData edgeIntersectionData = IntersectionData(MAX_DISTANCE, (lightTimer < 0.5) ? BLUE_DIM : BLUE_LIT);\n    edgeIntersectionData.mT = sdfCapsule(p, vec3(4.0, -1.5, 0.0), vec3(4.0, 1.5, 0.0), 0.1);\n    edgeIntersectionData.mT = min(edgeIntersectionData.mT, sdfCapsule(p, vec3(-3.7, -1.5, 0.0), vec3(-3.7, 1.5, 0.0), 0.1));\n    edgeIntersectionData.mT = min(edgeIntersectionData.mT, sdfCapsule(p, vec3(4.0, -1.5, 0.0), vec3(-3.7, -1.5, 0.0), 0.1));\n    edgeIntersectionData.mT = min(edgeIntersectionData.mT, sdfCapsule(p, vec3(4.0, 1.5, 0.0), vec3(-3.7, 1.5, 0.0), 0.1));\n    \n    oIntersectionData = GetClosestIntersection(oIntersectionData, edgeIntersectionData);\n    \n    return oIntersectionData;\n}\n\nIntersectionData Intersect(in Ray initialRay)\n{    \n    IntersectionData sceneIntersection = IntersectionData(MAX_DISTANCE, -1.0);\n    \n    float t = 0.0;   \n    for(int i = 0; i < NUMBER_OF_STEPS; ++i)\n    {\n        // Break out if our step size is too small or we've gone out of range\n        if(sceneIntersection.mT < EPSILON || t > MAX_DISTANCE) break;\n        \n        Ray currentRay = Ray(initialRay.mPosition + initialRay.mDirection * t, initialRay.mDirection); // Update our ray     \n        sceneIntersection = CheckSceneForIntersection(currentRay.mPosition); // Check the scene for an intersection     \n        t += sceneIntersection.mT; // Step forward\n    }    \n    sceneIntersection.mT = t;\n    \n    return sceneIntersection;\n}\n\n//////////////////////////////////////////////////////\n// Lighting Helpers\nvec3 GetNormal(in vec3 point) \n{\n    IntersectionData d0 = CheckSceneForIntersection(point);\n    IntersectionData dX = CheckSceneForIntersection(point - vec3(EPSILON, 0.0, 0.0));\n    IntersectionData dY = CheckSceneForIntersection(point - vec3(0.0, EPSILON, 0.0));\n    IntersectionData dZ = CheckSceneForIntersection(point - vec3(0.0, 0.0, EPSILON));\n    return normalize(vec3(dX.mT - d0.mT, dY.mT - d0.mT, dZ.mT - d0.mT));\n}\n\n//////////////////////////////////////////////////////\n// Lighting\nvec3 CalculateLighting(in vec3 normal, in vec3 albedo, in float ambient)\n{       \n    vec3 n = normalize(normal);\n    vec3 l = normalize(vec3(0.0, 0.0, -1.0));\n    return (albedo * ambient) + albedo * Saturate(dot(n, l));\n}\n\n//////////////////////////////////////////////////////\n// Implementation\nvec4 DisplayScene(in vec3 cameraPosition, in vec3 cameraDirection, in float glowThreshold)\n{\n    // Determine our camera info\n    Ray cameraRay = Ray(cameraPosition, cameraDirection);\n    \n    // Gets the intersection point from the camera ray to camera facing plane that the core is on\n    vec3 finalColor = vec3(0.0);\n\n    IntersectionData intersection = Intersect(cameraRay);        \n    if(intersection.mT < MAX_DISTANCE)\n    {   \n        vec3 intersectionPoint = (cameraRay.mPosition + cameraRay.mDirection * intersection.mT);\n        vec3 normal = GetNormal(intersectionPoint);\n\n        vec3 diffuse = vec3(1.0);\n        float ambient = 0.2;\n        \n        if(intersection.mMaterialIndex == RED_LIT)\n        {\n\t\t\tdiffuse = vec3(1.0, 0.2, 0.2);\n        }\n        else if(intersection.mMaterialIndex == RED_DIM)\n        {\n            diffuse = vec3(0.125, 0.05, 0.05);\n        }\n        else if(intersection.mMaterialIndex == BLUE_LIT)\n        {\n\t\t\tdiffuse = vec3(0.2, 0.2, 1.0);\n        }\n        else if(intersection.mMaterialIndex == BLUE_DIM)\n        {\n            diffuse = vec3(0.05, 0.05, 0.125);\n        }\n        finalColor += CalculateLighting(normal, diffuse, ambient);         \n    }\n    return vec4(finalColor, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Adjust UVs for for the resolution so our world goes from [-1,-1] to [1,1]\n    vec2 screenCoord = (fragCoord.xy / iResolution.xy);\n    vec2 aspectRatioAdjustedUVs = vec2((screenCoord.x * 2.0 - 1.0) * (iResolution.x / iResolution.y), (screenCoord.y * 2.0 - 1.0));\n    \n    float xRotationValue = (iMouse.z > 0.0) ? (iMouse.y / iResolution.y - 0.5) * (PI * 0.3) : 0.0;\n    mat3 xRotationMatrix = Create3x3RotationMatrix(vec3(1.0, 0.0, 0.0), xRotationValue);\n    float yRotationValue = (iMouse.z > 0.0) ? (iMouse.x / iResolution.x * 0.5 - 0.25) * (PI * 1.0) : 0.0; // Multiply by 0.1 to slow down the rotation ;   \n    mat3 yRotationMatrix = Create3x3RotationMatrix(vec3(0.0, -1.0, 0.0), yRotationValue);\n\n    // Determine our camera info\n    const float distanceFromOrigin = 4.0;\n    vec3 cameraPosition = vec3(distanceFromOrigin * sin(yRotationValue) * cos(xRotationValue), distanceFromOrigin * sin(xRotationValue), distanceFromOrigin * cos(yRotationValue) * cos(xRotationValue));\n    vec3 cameraDirection = normalize(yRotationMatrix * xRotationMatrix * normalize(vec3(aspectRatioAdjustedUVs, -1.0)));\n\n    fragColor = DisplayScene(cameraPosition, cameraDirection, 0.4);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Alexander Lemke, 2016\n// Horizontal blur with limit\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelOffset = vec2(1.0, 0.0) / iResolution.xy;\n    \n    float weight = 8.0;\n    vec3 horizontalSamples = texture(iChannel0, uv).rgb * weight;\n    \n    const int horizontalHalfSampleCount = 16;\n    for(int i = 1; i < horizontalHalfSampleCount; ++i)\n    {\n        float currentWeight = float(horizontalHalfSampleCount - i);\n        \n        vec3 sampleA = texture(iChannel0, uv + pixelOffset * float(i)).rgb;\n    \thorizontalSamples += (length(sampleA) > 0.6) ? sampleA * currentWeight : vec3(0.0);\n        weight += currentWeight;\n        \n    \tvec3 sampleB = texture(iChannel0, uv - pixelOffset * float(i)).rgb;\n        horizontalSamples += (length(sampleB) > 0.6) ? sampleB * currentWeight: vec3(0.0);\n        weight += currentWeight;\n    }\n    horizontalSamples *= (1.0 / weight);\n\n\tfragColor = vec4(horizontalSamples, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Alexander Lemke, 2016\n// Vertical blur\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelOffset = vec2(0.0, 1.0) / iResolution.xy;\n    \n    float weight = 0.0;\n    vec3 verticalSamples = vec3(0.0);\n    \n    const int verticalHalfSampleCount = 16;\n    for(int i = 1; i < verticalHalfSampleCount; ++i)\n    {\n        float currentWeight = float(verticalHalfSampleCount - i);\n        \n    \tverticalSamples += texture(iChannel0, uv + pixelOffset * float(i)).rgb * currentWeight;\n        weight += currentWeight;\n    \tverticalSamples += texture(iChannel0, uv - pixelOffset * float(i)).rgb * currentWeight;\n        weight += currentWeight;\n    }\n    verticalSamples *= (1.0 / weight);\n    \n\tfragColor = vec4(verticalSamples, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}