{
    "Shader": {
        "info": {
            "date": "1523116960",
            "description": "Zeros in the amplitude as a function of time and frequency correspond to transitions in frequency.\n\nMouse Y controls window length:\nbottom: high frequency resolution\ntop: high time resolution",
            "flags": 0,
            "hasliked": 0,
            "id": "MsGyDG",
            "likes": 8,
            "name": "Spectrogram Zeros",
            "published": 3,
            "tags": [
                "spectrogram"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 755
        },
        "renderpass": [
            {
                "code": "/*\nCopyright 2018 Theron Tarigo\n*/\n\nconst float timescale = 2./1.;\nconst float freqscale = 200.;\nconst float samplerate = 4000.; // Reduce if too slow\nconst float sgr_pi = 3.141592653589793;\n\nfloat signal ( int isamp ) {\n  // simple noise (by lookup from texture)\n  ivec2 res = ivec2(256);\n  int samp = isamp % (256*256);\n  ivec2 pix = ivec2(samp%res.x, (samp/res.x));\n  return dot(vec2(1),texelFetch(iChannel1, pix, 0).xy*2.-1.)*sqrt(samplerate/10000.);\n}\n\nvec2 spectrogram ( float windowtime, int isamp, float freq ) {\n  vec2 sum = vec2(0.);\n  int iwindow = int(windowtime*samplerate);\n  float window = float(iwindow)/samplerate;\n  for (int irel = -iwindow; irel <= iwindow; irel+=1) {\n    // Hann window\n    float w = (0.5+0.5*cos(float(irel)/float(iwindow)*sgr_pi));\n    float samp = signal(isamp+irel);\n    float a = fract(float(irel)*freq/samplerate)*2.*sgr_pi;\n    sum += w*vec2(cos(a),sin(a))*samp;\n  }\n  return sum/samplerate/window;\n}\n\nfloat timeratiofn ( float freq ) {\n  if (iMouse.x<10.) return 16.;\n  return 8.*exp(iMouse.y/iResolution.y*2.);\n}\n\nvoid mainImage ( out vec4 f, in vec2 df ) {\n  ivec2 d = ivec2(df);\n  vec2 fsf = iResolution.xy;\n  ivec2 fs = ivec2(fsf);\n  float time = float(d.x)/timescale/fsf.x;\n  int isamp = int(time*samplerate);\n  float y = df.y;\n  float freq = freqscale * y / iResolution.y;\n  float windowfreq = timeratiofn(freq);\n  vec2 s = spectrogram(1./windowfreq, isamp, freq)/sqrt(windowfreq)*5.;\n  f = vec4(0.);\n  f.rg = 0.5+0.5*s*20.;\n  // f.rg = s*s*200.; // alternative shading\n  float ss = dot(s,s);\n  //f.rgb = vec3(10.,3.2,1.)*ss*40.;  // uncomment: show power only\n  f += exp(-ss*40000.); // highlight zeros in amplitude (power)\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}