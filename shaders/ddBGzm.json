{
    "Shader": {
        "info": {
            "date": "1667393145",
            "description": "Inspire by: https://www.shadertoy.com/view/cs23zR",
            "flags": 0,
            "hasliked": 0,
            "id": "ddBGzm",
            "likes": 11,
            "name": "Pinguin Sketchy Contour",
            "published": 3,
            "tags": [
                "pinguinsketchycontour"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 250;\nconst float MIN_DIST = 5.;\nconst float MAX_DIST = 30.0;\nconst float PRECISION = 0.01;\n#define AA 0\n#define PI 3.14159\n#define TAU 6.28318\n\nconst uint k = 1103515245U;  // GLIB C\n\nvec3 hash33( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n// Some iq's function\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nvec2 hash22(vec2 p)\n{\n    p *= 100.;\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract(sin(p3.xy+p3.yz)*p3.zy);\n}\n\nfloat sdSphere(vec3 p, float r, vec3 offset)\n{\n  return length(p - offset) - r;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  // sampling independent computations (only depend on shape)\n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n\n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  float k = dot(q,vec2(-b,a));\n  if( k<0.0 ) return length(q) - r1;\n  if( k>a*h ) return length(q-vec2(0.0,h)) - r2;\n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat Tux(vec3 p, out vec3 col, out float obj, vec3 q, vec3 ro){\n    \n    float d = 1e10;\n    \n    // CORE\n    vec3 tmp = vec3(0. ,cos(iTime)*.1, 0.05-.03*cos(iTime));\n    vec3 tmp2 = vec3(cos(iTime)*.1, 0., 0.);\n    p += tmp;\n    vec3 b = vec3(.25,.8,.3);\n    vec3 pt = p;\n    pt.y -= .2;\n    float d2 = min(d, sdRoundBox(pt, b, .4));\n    if (d2<d){\n        d = d2;\n        col = vec3(.2);\n        obj = 1.;\n    }\n        \n    pt = p;\n    pt.y += .1;\n    pt *= 1.1;\n    d2 = sdSphere(pt, 1., vec3(0.));\n    if (d2<d){\n        col = mix(col, vec3(1.), smoothstep(0. ,0.01, abs(d2-d)-.02));\n        obj = smoothstep(0. ,0.01, abs(d2-d)-.03);\n    }\n    d = opSmoothUnion(d, d2, .5);\n    \n\n    pt = p+tmp2;\n    pt.y -= 1.;\n    pt *= 2.;\n    d2 = sdSphere(pt, 1.2, vec3(0.));   \n    if (d2<d){\n        col = vec3(.2);\n\n    }\n    d = opSmoothUnion(d, d2, .5);\n\n    // NOSE\n    pt = p+tmp2;\n    pt += vec3(0.,-.7, -.5);\n    pt *= 2.;\n    d2 = sdOctahedron(pt, 1.);\n    if (d2<d){\n        col = mix(col, vec3(.7, .7, 0.), smoothstep(0. ,0.01, abs(d2-d)-.02));\n        obj = smoothstep(0. ,0.01, abs(d2-d)-.03);\n    }\n    d = opSmoothUnion(d, d2, .05);\n    \n    \n    \n    // EYES\n    pt = p+tmp2;\n    pt.x = abs(pt.x);\n    pt += vec3(-.35, -1., -.55);\n    pt *= 3.5;\n    d2 = sdSphere(pt, 1., vec3(0.));   \n    if (d2<d){\n        col = mix(col, vec3(1.), smoothstep(0. ,0.01, abs(d2-d)-.02));\n        obj = smoothstep(0. ,0.01, abs(d2-d)-.03);\n    }\n    d = opSmoothUnion(d, d2, .05);\n    \n    pt = p+tmp2;\n    pt.x = abs(pt.x);\n    pt += vec3(-.35, -1., -.7);\n    pt *= 5.5;\n    d2 = sdSphere(pt, 1., vec3(0.));   \n    if (d2<d){\n        col = mix(col, vec3(0.), smoothstep(0. ,0.01, abs(d2-d)-.02));\n        obj = smoothstep(0. ,0.01, abs(d2-d)-.03);\n    }\n    d = opSmoothUnion(d, d2, .05);\n  \n  \n    // NAGEOIRE\n    pt = p;\n    pt.x = -abs(pt.x);\n    pt.y -= .3;\n    mat3 rot = rotateX(.25+sign(p.x)*.7*cos(iTime*4.));\n    pt *= rot;\n    pt.y += .3;\n\n    pt += vec3(1., 0., 0.);\n    rot = rotateZ(-.5);\n    pt = rot*pt;\n    vec3 r = vec3(1.,2.,1.)/3.;\n    d2 = sdEllipsoid(pt, r);   \n    if (d2<d){\n        col = mix(col, vec3(.1), smoothstep(0. ,0.01, abs(d2-d)-.02));\n        obj = smoothstep(0. ,0.01, abs(d2-d)-.03);\n    }\n    d = opSmoothUnion(d, d2, .01);\n    \n    \n    // PALME\n    pt = p;\n    pt.x = abs(pt.x);\n    pt += vec3(-.4, 1., -.3);\n    pt *= 3.5;\n    rot = rotateX(.3+sign(p.x)*.5*sin(iTime/2.));\n    pt *= rot;\n    r = vec3(1.3,1.,2.);\n    d2 = sdEllipsoid(pt, r);\n    if (d2<d){\n        col = mix(col, vec3(.7, .7, 0.), smoothstep(0. ,0.01, abs(d2-d)-.02));\n        obj = smoothstep(0. ,0.01, abs(d2-d)-.03);\n\n    }\n    d = opSmoothUnion(d, d2, .05);\n    \n\n    // Queue\n    pt = p;\n    pt += vec3(0., .9, 1.1);\n    pt.z -= .9;\n    rot = rotateY(.3*sin(iTime*4.));\n    pt *= rot;\n    pt.z += .9;    \n    \n    rot = rotateX(-PI/2.+.7);\n    pt *= rot;\n    d2 = sdRoundCone(pt, .2, .5, .7);\n    if (d2<d){\n        col = mix(col, vec3(.1), smoothstep(0. ,0.01, abs(d2-d)-.02));\n        obj = smoothstep(0. ,0.01, abs(d2-d)-.03);\n\n    }\n    d = opSmoothUnion(d, d2, .05);\n\n    return d;\n}\n\n\nfloat map(vec3 p, out vec3 col, out float obj, vec3 ro){\n    \n    float d = 1e10;    \n    vec3 c = vec3(3.)*2.;\n    vec3 q = mod(p+.5*c, c)-.5*c;\n    q = p; // Comment for a multitude of pinguin !!!!\n    d = min(d, Tux(q, col, obj, p, ro));\n    \n    return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end, out vec3 col, out float L, out float obj) {\n  float depth = start;\n  float id = 0.;\n  float depth2 = 1e10;\n  float dit = fract(sin(dot(rd, vec3(123.4588, 789.457, 0.))))*0.0001;\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = map(p, col, obj, ro);\n    depth += d;\n    if (d < PRECISION){\n        depth2 = depth;\n        L = 1.;\n        break;\n        }\n    if(d < PRECISION*10.){\n        if (id != 1.){\n            col *= 0.;\n            depth2 = depth+dit;\n            L *= 0.;\n            \n        }\n      }\n    }\n  return depth2;\n}\n\nvec3 calcNormal(vec3 p, vec3 ro) {\n    vec2 e = vec2(1.0, -1.0) * 0.005; // epsilon\n    float r = 1.; // radius of sphere\n    vec3 c;\n    float obj;\n    \n    return normalize(\n      e.xyy * map(p + e.xyy, c, obj, ro) +\n      e.yyx * map(p + e.yyx, c, obj, ro) +\n      e.yxy * map(p + e.yxy, c, obj, ro) +\n      e.xxx * map(p + e.xxx, c, obj, ro));\n}\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n\tvec3 cu = normalize(cross(cd, cr)); // camera up\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvec3 phong(vec3 lightDir, vec3 normal, vec3 rd, vec3 col) {\n  // ambient\n  vec3 ambient = col*(.5);\n\n  // diffuse\n  float dotLN = smoothstep(.45, .5, dot(lightDir, normal))/4.;\n  vec3 diffuse = col * dotLN;\n\n  // specular\n  float dotRV = smoothstep(.85, .9, (dot(reflect(lightDir, normal), -rd)));\n  vec3 specular = 2.*col * pow(dotRV, 5.);\n\n  return ambient + diffuse; + specular;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.1, .1, .1)*4.;\n  \n  vec3 col = vec3(0);\n  vec3 col_tot = vec3(0.);\n  vec3 ro = vec3(4., 4., 4.);\n  vec2 m = iMouse.xy/iResolution.xy;\n  if (m.xy == vec2(0.)){\n      m.x = .6;\n      m.y = .5;\n  }\n    vec3 tmp = vec3(0.,cos(iTime)*.1, 0.05-.03*cos(iTime));\n    tmp.z -= .8;\n    tmp.y -= 1.;\n    tmp.x -= .35;\n  vec3 lookat = tmp;// ray origin that represents camera position\n  ro.yz = ro.yz * 1. * rot(mix(PI/2., 0., m.y));\n  ro.xz = ro.xz * rot(mix(-PI, PI, m.x)) + vec2(lookat.x, lookat.z); // remap mouseUV.x to <-pi, pi> range  \n  \n  vec3 rd = camera(ro, lookat)*normalize(vec3(uv, -1)); // ray direction\n  \n  float w;\n  float obj = 1.;\n  for (int i = 0; i<AA+1; i++){\n      for (int j = 0; j<AA+1; j++){\n          \n          vec3 rd2 = rd + vec3(float(i), float(j), 0.)*(cos(iTime)*.0005);\n          float L = 1.;\n          float d = rayMarch(ro, rd2, MIN_DIST, MAX_DIST, col, L, obj); // distance to sphere\n\n          if (d > MAX_DIST) {\n            col_tot += backgroundColor/float(2*(AA+1)); // ray didn't hit anything\n          } else {\n            vec3 p = ro + rd * d; // point on sphere we discovered from ray marching\n            vec3 normal = calcNormal(p, ro);\n            vec3 lightPosition = vec3(1, 1, 2);\n            vec3 lightDirection = normalize(lightPosition - p);\n            float lint = 1.2;\n            \n            // Multiply the diffuse reflection value by an orange color and add a bit\n            // of the background color to the sphere to blend it more with the background.\n            if (L != 0.) col_tot += obj*lint*phong(lightDirection, normal, rd, col)/float((AA+1));\n            else col_tot *= 0.;\n          }\n    }\n  }  \n  \n  //vec3 tmp = fwidth(col_tot);\n  \n  // Output to screen\n  fragColor = vec4(col_tot, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nmat3 rotate(vec3 theta) {\n    return rotateX(theta.x)*rotateY(theta.y)*rotateZ(theta.z);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}