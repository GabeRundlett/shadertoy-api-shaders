{
    "Shader": {
        "info": {
            "date": "1686040183",
            "description": "With perpetual calendar and moon phase; mechanical design not trivial.",
            "flags": 0,
            "hasliked": 0,
            "id": "clVSWR",
            "likes": 21,
            "name": "Watch With Complications",
            "published": 3,
            "tags": [
                "clock",
                "calendar",
                "complication",
                "lunarphase"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "// \"Watch With Complications\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  1   // optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nvoid DTimeSet (vec4 d);\nfloat GetTxYear (vec2 p, float sz);\nfloat GetTxMon (vec2 p, float sz);\nfloat GetTxDate (vec2 p, float sz);\nfloat GetTxDay (vec2 p, float sz);\nfloat GetTxNum (vec2 p, float sz, int nc, float v);\nfloat GetLunPhs ();\nfloat Fbm2 (vec2 p);\n\nvec4 dateCur;\nvec3 ltDir, qHit;\nvec2 fntSize, qnFnt, qnTxt;\nvec4 frm[4];\nvec2 aaCs[3], wRotCs;\nfloat dstFar, tCur, lunPhs;\nint nFrame, idObj;\nint idTxt;\nconst int idFace = 1, idHandS = 2, idHand = 3, idAx = 4, idHub = 5,\n   idCase = 6, idFrm = 7, idWnd = 8, idClsp = 9;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 cs;\n  float dMin, d, r, a;\n  cs = sin (0.2 * pi + vec2 (0.5 * pi, 0.));\n  cs.y *= -1.;\n  dMin = dstFar;\n  p.xz = Rot2Cs (p.xz, wRotCs);\n  p.yz = p.zy * vec2 (-1., 1.);\n  q = p;\n  r = length (q.xz);\n  a = (r > 0.) ? atan (- q.z, q.x) / (2. * pi) + 0.5 : 0.;\n  d = 0.9 * max (length (vec2 (r - 1.05, q.y)) - 0.08 - 0.003 * abs (sin (256. * pi * a)),\n     1.01 - r);\n  DMINQ (idCase);\n  d = PrCylDf (q.xzy, 1.05, 0.05);\n  d = max (d, - max (min (max (max (abs (length (vec2 (q.x, q.z - 0.3)) - 0.17) - 0.125,\n     0.14 - length (vec2 (abs (q.x) - 0.18, q.z - 0.28))), 0.3 - q.z),\n     length (vec2 (q.x, q.z + 0.55)) - 0.202), 0.03 - q.y));\n  DMINQ (idFace);\n  d = dstFar;\n  for (int k = 0; k < 4; k ++)\n     d = min (d, PrTorusBxDf (q.xzy - vec3 (frm[k].xy, 0.05), vec3 (frm[k].zw, 0.01), 0.007));\n  DMINQ (idFrm);\n  q = p;\n  q.z -= 1.16;\n  d = PrCylDf (q, 0.03, 0.06);\n  DMINQ (idClsp);\n  q.z -= 0.14;\n  d = PrSphDf (q, 0.1);\n  DMINQ (idWnd);\n  d = PrTorusDf (q.xzy, 0.015, 0.13);\n  DMINQ (idClsp);\n  q = p;\n  q.y -= 0.06;\n  d = PrCylDf (q.xzy, 0.02, 0.04);\n  DMINQ (idAx);\n  q = p;\n  q.yz -= vec2 (0.04, -0.55);\n  d = PrCylDf (q.xzy, 0.015, 0.02);\n  DMINQ (idAx);\n  q = p;\n  q.yz -= vec2 (0.045, -0.55);\n  d = PrCylDf (q.xzy, 0.04, 0.008);\n  DMINQ (idHub);\n  q.xz = Rot2Cs (q.xz, aaCs[0]);\n  d = max (PrBox2Df (q.xy, vec2 (0.011, 0.005)), max (q.z, dot (vec2 (abs (q.x), q.z), cs) - 0.1));\n  DMINQ (idHandS);\n  q = p;\n  q.y -= 0.07;\n  d = PrCylDf (q.xzy, 0.05, 0.007);\n  DMINQ (idHub);\n  q.xz = Rot2Cs (q.xz, aaCs[1]);\n  d = max (PrBox2Df (q.xy, vec2 (0.02, 0.005)), max (q.z, dot (vec2 (abs (q.x), q.z), cs) - 0.53));\n  DMINQ (idHand);\n  q = p;\n  q.y -= 0.09;\n  d = PrCylDf (q.xzy, 0.05, 0.007);\n  DMINQ (idHub);\n  q.xz = Rot2Cs (q.xz, aaCs[2]);\n  d = max (PrBox2Df (q.xy, vec2 (0.02, 0.005)), max (q.z, dot (vec2 (abs (q.x), q.z), cs) - 0.37));\n  DMINQ (idHand);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  p.xz = Rot2Cs (p.xz, wRotCs);\n  p.yz = p.zy * vec2 (-1., 1.);\n  q = p;\n  d = max (PrSphDf (q - vec3 (0., -7.35, 0.), 7.5), max (length (q.xz) - 1.05, - q.y));\n  return d;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  vec3 col, skCol;\n  vec2 u;\n  float el, f;\n  skCol = vec3 (0.1, 0.15, 0.6);\n  el = asin (rd.y);\n  rd.xz = Rot2D (rd.xz, 0.01 * tCur);\n  u = vec2 (atan (rd.z, - rd.x) + pi, tan (2. * atan (0.5 * el))) / (2. * pi);\n  f = 64.;\n  col = mix (skCol, vec3 (0.8, 0.75, 0.75), mix (Fbm2 (f * u),\n     Fbm2 (f * (u - vec2 (1., 0.))), u.x));\n  col = mix (col, skCol, smoothstep (0.95, 0.98, abs (el) / (0.5 * pi)));\n  return col;\n}\n\nfloat LabSym (vec2 p)\n{  // (from \"Booze Cruise\")\n  vec2 q;\n  float d, r;\n  r = length (p);\n  d = max (min (0.06 - abs (0.1 - abs (r - 0.8)), p.y), min (0.06 - abs (p.y), 1.1 - abs (p.x)));\n  q = Rot2D (p, 2. * pi * floor (16. * ((r > 0.) ? atan (p.y, - p.x) / (2. * pi) : 0.) + 0.5) / 16.);\n  d = max (d, min (min (0.06 - abs (q.y), 0.2 - abs (q.x + 1.1)), p.y + 0.1));\n  q.x += 1.5;\n  d = max (d, min (0.1 - length (q), p.y + 0.1));\n  return d;\n}\n\nfloat StarSym (vec2 p, vec4 st)\n{ // (from \"Flag From Down Under\")\n  vec2 q;\n  float d;\n  d = 1.;\n  q = p - st.xy;\n  if (length (q) < 2. * st.z + 0.02) {\n    q = Rot2D (q, ((st.w == 7.) ? pi : 0.) + 0.5 * pi / st.w);\n    q = Rot2D (q, 2. * pi * (floor (st.w * ((length (q) > 0.) ?\n       atan (q.y, - q.x) : 0.) / (2. * pi) + 0.5) / st.w));\n    d = smoothstep (0., 0.01, dot (vec2 (abs (q.y), - q.x - 2. * st.z),\n       sin (0.11 * pi + vec2 (0.5 * pi, 0.))));\n  }\n  return d;\n}\n\nvec4 DialCol (vec2 p)\n{\n  vec4 col4;\n  vec3 col, c, scCol;\n  vec2 q, w;\n  float a, s;\n  col4.a = 0.;\n  c = vec3 (0.2, 0.2, 0.4);\n  q = p;\n  s = length (q);\n  a = (s > 0.) ? atan (q.y, - q.x) / (2. * pi) : 0.;\n  scCol = vec3 (1.) * (0.95 + 0.05 * smoothstep (-0.9, -0.8, sin (32. * pi * s)));\n  col = scCol;\n  if (abs (fract (12. * a + 0.5) - 0.5) < 0.03 && abs (s - 0.96) < 0.04 ||\n     abs (fract (60. * a + 0.5) - 0.5) < 0.07 && abs (s - 0.97) < 0.03 ||\n     abs (12. * (a - 0.25)) < 0.03 && abs (s - 0.94) < 0.06) col = c;\n  col = mix (col, c, SmoothBump (0.98, 1., 0.005, s));\n  q = Rot2D (q, 2. * pi * floor (12. * a + 0.5) / 12.);\n  s = StarSym (q, vec4 (-0.96, 0., 0.01, 7.));\n  col = mix (vec3 (1., 1., 0.7), col, s);\n  if (s == 0.) col4.a = -1.;\n  q = (p - vec2 (0., -0.55)) / 0.2;\n  s = length (q);\n  if (s < 1.) {\n    col = vec3 (0.9) * (0.95 + 0.05 * smoothstep (-0.9, -0.8, sin (16. * pi * s)));\n    a = atan (q.y, - q.x) / (2. * pi);\n    if (abs (fract (12. * a + 0.5) - 0.5) < 0.03 && abs (s - 0.93) < 0.07 ||\n       abs (12. * (a - 0.25)) < 0.03 && abs (s - 0.85) < 0.15) col = c;\n    col = mix (col, c, SmoothBump (0.96, 1., 0.01, s));\n  }\n  s = min (min (min (\n     GetTxNum (p - vec2 (-0.14, 0.7), 0.2, 2, 12.),\n     GetTxNum (p - vec2 (0.79, -0.08), 0.15, 1, 3.)),\n     GetTxNum (p - vec2 (-0.07, -0.93), 0.15, 1, 6.)),\n     GetTxNum (p - vec2 (-0.93, -0.08), 0.15, 1, 9.));\n  col = mix (c, col, s);\n  for (int k = 0; k < 4; k ++) {\n    if (PrRoundBox2Df (p - frm[k].xy, frm[k].zw, 0.01) < 0.) col = vec3 (0.8);\n  }\n  s = min (min (min (\n     GetTxDate (p - frm[0].xy - vec2 (-0.075, -0.053), 0.1),\n     GetTxMon  (p - frm[1].xy - vec2 (-0.11, -0.053), 0.1)),\n     GetTxDay  (p - frm[2].xy - vec2 (-0.11, -0.053), 0.1)),\n     GetTxYear (p - frm[3].xy - vec2 (-0.12, -0.044), 0.085));\n  col = mix (vec3 (0., 0., 1.), col, s);\n  if (s < 1.) col4.a = -1.;\n  q = p - vec2 (0., 0.3);\n  if (q.y > 0.) {\n    col = mix (col, vec3 (0., 0., 0.7), 1. - smoothstep (0., 0.01,\n       abs (length (q) - 0.17) - 0.118));\n    w = abs (Rot2D (q, pi * lunPhs));\n    s = min (abs (length (w - vec2 (0.2, 0.04)) - 0.02),\n       min (max (abs (length (w - vec2 (0.15, 0.)) - 0.05), w.x - 0.12),\n       max (abs (w.x - 0.13) - 0.025, w.y))) - 0.005;\n    col = mix (col, vec3 (1., 0.8, 0.) * (0.8 + 0.2 * step (0., s)),\n       1. - smoothstep (0., 0.01, length (w - vec2 (0.17, 0.)) - 0.11));\n    col = mix (vec3 (1., 0.8, 0.), col, StarSym (w, vec4 (0.12, 0.2, 0.015, 5.)));\n    col = mix (col, scCol, 1. - smoothstep (0., 0.01, length (vec2 (abs (q.x) - 0.18,\n       q.y + 0.01)) - 0.13));\n  }\n  if (col == vec3 (1., 0.8, 0.)) col4.a = -1.;\n  s = LabSym (16. * (p - vec2 (0., -0.25)));\n  col = mix (mix (col, vec3 (0., 0.7, 0.), smoothstep (-0.05, -0.01, s)),\n     vec3 (1., 1., 0.2), smoothstep (0.01, 0.05, s));\n  if (s > 0.01) col4.a = -1.;\n  s = StarSym (abs (Rot2D (p - vec2 (0.5, -0.5), pi * 0.25)), vec4 (0.05, 0.05, 0.005, 7.));\n  col = mix (vec3 (1., 0.3, 0.), col, s);\n  if (s == 0.) col4.a = -1.;\n  col4.rgb = col;\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, cCase;\n  vec3 col, vn, roo;\n  float dstObj, dstTrObj, gRot, sh, rFac, nDotL;\n  wRotCs = CosSin (0.2 * pi * sin (0.1 * pi * tCur));\n  gRot = dateCur.w * 720. / (12. * 3600.);\n  aaCs[0] = CosSin (2. * pi * (floor (60. * gRot) + smoothstep (0.7, 1.,\n     fract (60. * gRot))) / 60. - pi);\n  aaCs[1] = CosSin (2. * pi * gRot / 60. - pi);\n  aaCs[2] = CosSin (2. * pi * gRot / 720. - pi);\n  frm[0] = vec4 (0.7, -0.14, 0.07, 0.04);\n  frm[1] = vec4 (0.45, -0.14, 0.1, 0.04);\n  frm[2] = vec4 (-0.65, -0.14, 0.1, 0.04);\n  frm[3] = vec4 (0., 0.2, 0.1, 0.035);\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    rFac = 0.;\n    cCase = vec4 (0.1, 0.2, 0.8, 0.2);\n    if (idObj == idFace) {\n      if (qHit.y > 0.) {\n        col4 = DialCol (qHit.xz);\n      } else {\n        col4 = cCase;\n        col4.rgb *= (1. - 0.3 * step (abs (length (Rot2D (qHit.xz,\n           2. * pi * floor (12. * ((length (qHit.xz) > 0.) ? atan (qHit.z, - qHit.x) /\n           (2. * pi) : 0.) + 0.5) / 12.) + vec2 (0.95, 0.)) - 0.03), 0.01)) *\n           (1. - 0.3 * smoothstep (-0.02, 0., LabSym (8. * qHit.xz)));\n        rFac = 0.2;\n      }\n    } else if (idObj == idFrm) {\n      col4 = vec4 (1., 1., 1., 0.);\n    } else if (idObj == idHandS) {\n      col4 = (abs (qHit.x) < 0.003 && qHit.y > 0.) ? vec4 (0.3, 0.8, 0.3, -1.) :\n         vec4 (0.3, 0.3, 0.3, 0.);\n    } else if (idObj == idHand) {\n      col4 = (abs (qHit.x) < 0.005 && qHit.y > 0.) ? vec4 (0.3, 0.8, 0.3, -1.) :\n         vec4 (0.3, 0.3, 0.3, 0.);\n    } else if (idObj == idAx) {\n      col4 = cCase;\n    } else if (idObj == idHub) {\n      col4 = vec4 (0.3, 0.3, 0.3, 0.);\n    } else if (idObj == idCase) {\n      col4 = cCase;\n      rFac = 0.2;\n    } else if (idObj == idWnd) {\n      col4 = cCase;\n      if (abs (qHit.z) < 0.08) col4 *= 0.5 +\n         0.5 * smoothstep (0.4, 0.5, fract (16. * (atan (qHit.x, qHit.y) / (2. * pi) + 0.5)));\n      rFac = 0.2;\n    } else if (idObj == idClsp) {\n      col4 = cCase;\n      rFac = 0.4;\n    }\n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, ltDir), 0.);\n      if (idObj == idCase || idObj == idClsp || idObj == idWnd) nDotL *= nDotL;\n      sh = ObjSShadow (ro + 0.01 * vn, ltDir);\n      col = col4.rgb * (0.3 + 0.2 * max (dot (vn, ltDir * vec3 (-1., 1., -1.)), 0.) +\n         0.7 * sh * nDotL) + col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    } else col = col4.rgb * (0.4 + 0.6 * max (- dot (rd, vn), 0.));\n    col = mix (col, 0.8 * BgCol (reflect (rd, vn)), rFac);\n  } else {\n    col = BgCol (rd);\n  }\n  ro = roo;\n  dstTrObj = TrObjRay (ro, rd);\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro += dstTrObj * rd;\n    vn = TrObjNf (ro);\n    col = mix (col, 0.8 * BgCol (reflect (rd, vn)), 0.03 + 0.9 * pow (1. - abs (dot (vn, rd)), 4.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0.2, -8.5);\n  zmFac = 6.;\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (0.3, 1., -1.));\n  DTimeSet (dateCur);\n  lunPhs = GetLunPhs ();\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n// (from \"Font Clock\")\n\n#define C(c) c\n\n#define _SP    C(0x20)\n#define _EXCL  C(0x21)\n#define _QUOT  C(0x22)\n#define _NUM   C(0x23)\n#define _DOLLR C(0x24)\n#define _PCENT C(0x25)\n#define _AMP   C(0x26)\n#define _SQUOT C(0x27)\n#define _LPAR  C(0x28)\n#define _RPAR  C(0x29)\n#define _AST   C(0x2A)\n#define _PLUS  C(0x2B)\n#define _COMMA C(0x2C)\n#define _MINUS C(0x2D)\n#define _PER   C(0x2E)\n#define _SLASH C(0x2F)\n#define _0     C(0x30)\n#define _1     C(0x31)\n#define _2     C(0x32)\n#define _3     C(0x33)\n#define _4     C(0x34)\n#define _5     C(0x35)\n#define _6     C(0x36)\n#define _7     C(0x37)\n#define _8     C(0x38)\n#define _9     C(0x39)\n#define _COLON C(0x3A)\n#define _SEMI  C(0x3B)\n#define _LT    C(0x3C)\n#define _EQUAL C(0x3D)\n#define _GT    C(0x3E)\n#define _QUEST C(0x3F)\n#define _AT    C(0x40)\n#define _A     C(0x41)\n#define _B     C(0x42)\n#define _C     C(0x43)\n#define _D     C(0x44)\n#define _E     C(0x45)\n#define _F     C(0x46)\n#define _G     C(0x47)\n#define _H     C(0x48)\n#define _I     C(0x49)\n#define _J     C(0x4A)\n#define _K     C(0x4B)\n#define _L     C(0x4C)\n#define _M     C(0x4D)\n#define _N     C(0x4E)\n#define _O     C(0x4F)\n#define _P     C(0x50)\n#define _Q     C(0x51)\n#define _R     C(0x52)\n#define _S     C(0x53)\n#define _T     C(0x54)\n#define _U     C(0x55)\n#define _V     C(0x56)\n#define _W     C(0x57)\n#define _X     C(0x58)\n#define _Y     C(0x59)\n#define _Z     C(0x5A)\n#define _LSQB  C(0x5B)\n#define _BSLSH C(0x5C)\n#define _RSQB  C(0x5D)\n#define _CARET C(0x5E)\n#define _USCOR C(0x5F)\n#define _GRAVE C(0x60)\n#define _a     C(0x61)\n#define _b     C(0x62)\n#define _c     C(0x63)\n#define _d     C(0x64)\n#define _e     C(0x65)\n#define _f     C(0x66)\n#define _g     C(0x67)\n#define _h     C(0x68)\n#define _i     C(0x69)\n#define _j     C(0x6A)\n#define _k     C(0x6B)\n#define _l     C(0x6C)\n#define _m     C(0x6D)\n#define _n     C(0x6E)\n#define _o     C(0x6F)\n#define _p     C(0x70)\n#define _q     C(0x71)\n#define _r     C(0x72)\n#define _s     C(0x73)\n#define _t     C(0x74)\n#define _u     C(0x75)\n#define _v     C(0x76)\n#define _w     C(0x77)\n#define _x     C(0x78)\n#define _y     C(0x79)\n#define _z     C(0x7A)\n#define _LBRC  C(0x7B)\n#define _VBAR  C(0x7C)\n#define _RBRC  C(0x7D)\n#define _TILDE C(0x7E)\n\nivec3 MName (int i)\n{\n  ivec3 m;\n  if      (i == 0)  m = ivec3 (_J, _a, _n);\n  else if (i == 1)  m = ivec3 (_F, _e, _b);\n  else if (i == 2)  m = ivec3 (_M, _a, _r);\n  else if (i == 3)  m = ivec3 (_A, _p, _r);\n  else if (i == 4)  m = ivec3 (_M, _a, _y);\n  else if (i == 5)  m = ivec3 (_J, _u, _n);\n  else if (i == 6)  m = ivec3 (_J, _u, _l);\n  else if (i == 7)  m = ivec3 (_A, _u, _g);\n  else if (i == 8)  m = ivec3 (_S, _e, _p);\n  else if (i == 9)  m = ivec3 (_O, _c, _t);\n  else if (i == 10) m = ivec3 (_N, _o, _v);\n  else if (i == 11) m = ivec3 (_D, _e, _c);\n  return m;\n}\n\nivec3 DName (int i)\n{\n  ivec3 d;\n  if      (i == 0)  d = ivec3 (_S, _u, _n);\n  else if (i == 1)  d = ivec3 (_M, _o, _n);\n  else if (i == 2)  d = ivec3 (_T, _u, _e);\n  else if (i == 3)  d = ivec3 (_W, _e, _d);\n  else if (i == 4)  d = ivec3 (_T, _h, _u);\n  else if (i == 5)  d = ivec3 (_F, _r, _i);\n  else if (i == 6)  d = ivec3 (_S, _a, _t);\n  return d;\n}\n\nint DWk (ivec3 ymd) // \"Zeller's congruence\"\n{\n  ivec2 cy;\n  int s;\n  ymd.y += 1;\n  if (ymd.y <= 2) {\n    ymd.x -= 1;\n    ymd.y += 12;\n  }\n  cy.x = ymd.x / 100;\n  cy.y = ymd.x - 100 * cy.x;\n  s = ymd.z + 13 * (ymd.y + 1) / 5 + cy.y + cy.y / 4 + cy.x / 4 + 5 * cy.x;\n  s -= 7 * (s / 7) - 6;\n  s -= 7 * (s / 7);\n  return s;\n}\n\nint DaysFromYmd (ivec3 ymd)\n{ // Days from 1970-01-01 (http://howardhinnant.github.io/date_algorithms.html)\n  int era, yoe, doy, doe;\n  if (ymd[1] <= 2) -- ymd[0];\n  era = (ymd[1] >= 0 ? ymd[0] : ymd[0] - 399) / 400;\n  yoe = ymd[0] - era * 400;\n  doy = 153 * (ymd[1] + ((ymd[1] > 2) ? -3 : 9) + 2) / 5 + ymd[2] - 1;\n  doe = yoe * 365 + yoe / 4 - yoe / 100 + doy;\n  return era * 146097 + doe - 719468;\n}\n\nivec3 YmdFromDays (int n)\n{ // Date from days ...\n  ivec3 ymd;\n  int era, yoe, doy, doe, mp;\n  n += 719468;\n  era = ((n >= 0) ? n : n - 146096) / 146097;\n  doe = n - era * 146097;\n  yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365;\n  doy = doe - (365 * yoe + yoe / 4 - yoe / 100);\n  mp = (5 * doy + 2) / 153;\n  ymd[2] = doy - (153 * mp + 2) / 5 + 1;\n  ymd[1] = (mp < 10) ? mp + 3 : mp - 9;\n  ymd[0] = yoe + era * 400;\n  if (ymd[1] <= 2) ++ ymd[0];\n  return ymd;\n}\n\nfloat GetLunPhs ()\n{ // (1st new moon after 1970-01-01)\n  return mod ((float (DaysFromYmd (ivec3 (dateCur.xyz))) - 7.) / 29.53059, 1.);\n}\n\n#define DIG1(v) _0 + int (v)\n#define DIG2(v) _0 + ivec2 (vec2 (floor ((v) / 10.), mod ((v), 10.)))\n\nivec3 inm[2];\nivec2 idt[6], icn[2];\n\nvoid DTimeSet (vec4 d)\n{\n  float nd;\n  int yr, mo, da;\n  idt[0] = DIG2 (floor (d.x / 100.));\n  idt[1] = DIG2 (mod (d.x, 100.));\n  idt[2] = DIG2 (d.z);\n  idt[3] = DIG2 (floor (d.w / 3600.));\n  idt[4] = DIG2 (floor (mod (d.w, 3600.) / 60.));\n  idt[5] = DIG2 (floor (mod (d.w, 60.)));\n  inm[0] = MName (int (d.y));\n  inm[1] = DName (DWk (ivec3 (d.xyz)));\n  nd = mod (float (DaysFromYmd (ivec3 (d.x, d.y + 1., d.z)) - DaysFromYmd (ivec3 (2020, 1, 30))), 1e4);\n  icn[0] = DIG2 (floor (nd / 100.));\n  icn[1] = DIG2 (mod (nd, 100.));\n}\n\n#define txFnt iChannel0\n\nvec3 GlyphTxChar (vec2 p, int ic)\n{\n  float c;\n  c = float (ic) / 16.;\n  return texture (txFnt, fract ((vec2 (16. * fract (c), 15. - floor (c)) + fract (p)) / 16.)).gba - 0.5;\n}\n\nfloat SmoothGlyph (vec2 q, int ic)\n{\n  return smoothstep (-0.001, 0.001, GlyphTxChar (q, ic).b + 1. / 256.);\n}\n\nfloat GetTxYear (vec2 p, float sz)\n{\n  float w;\n  int ic;\n  p /= sz;\n  w = 1.;\n  for (int j = 0; j < 4; j ++) {\n    ic = (floor (p) == vec2 (0.)) ? ((j < 2) ? idt[0][j] : idt[1][j - 2]) : 0;\n    if (ic != 0) w = min (w, SmoothGlyph (p, ic));\n    p.x -= 0.6;\n  }\n  return w;\n}\n\nfloat GetTxMon (vec2 p, float sz)\n{\n  float w;\n  int ic;\n  p /= sz;\n  w = 1.;\n  for (int j = 0; j < 3; j ++) {\n    ic = (floor (p) == vec2 (0.)) ? inm[0][j] : 0;\n    if (ic != 0) w = min (w, SmoothGlyph (p, ic));\n    p.x -= 0.6;\n  }\n  return w;\n}\n\nfloat GetTxDate (vec2 p, float sz)\n{\n  float w;\n  int ic;\n  p /= sz;\n  w = 1.;\n  for (int j = 0; j < 2; j ++) {\n    ic = (floor (p) == vec2 (0.)) ? idt[2][j] : 0;\n    if (ic != 0) w = min (w, SmoothGlyph (p, ic));\n    p.x -= 0.6;\n  }\n  return w;\n}\n\nfloat GetTxDay (vec2 p, float sz)\n{\n  float w;\n  int ic;\n  p /= sz;\n  w = 1.;\n  for (int j = 0; j < 3; j ++) {\n    ic = (floor (p) == vec2 (0.)) ? inm[1][j] : 0;\n    if (ic != 0) w = min (w, SmoothGlyph (p, ic));\n    p.x -= 0.6;\n  }\n  return w;\n}\n\nfloat GetTxNum (vec2 p, float sz, int nc, float v)\n{\n  float w;\n  int ic;\n  p /= sz;\n  w = 1.;\n  for (int j = 0; j < nc; j ++) {\n    ic = (floor (p) == vec2 (0.)) ? ((nc == 2) ? DIG2 (v)[j] : DIG1 (v)) : 0;\n    if (ic != 0) w = min (w, SmoothGlyph (p, ic));\n    p.x -= 0.4;\n  }\n  return w;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}