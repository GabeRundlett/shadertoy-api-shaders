{
    "Shader": {
        "info": {
            "date": "1528316358",
            "description": "Shadertoy has a blue noise texture now, yay!\n\nLeft to right: source, quantized, blue noise, white noise.\n\nThis one based on paniq's shadertoy: https://www.shadertoy.com/view/MsGfDz",
            "flags": 0,
            "hasliked": 0,
            "id": "4sKBWR",
            "likes": 15,
            "name": "Blue Noise Dither",
            "published": 3,
            "tags": [
                "dithering",
                "stochastic"
            ],
            "usePreview": 1,
            "username": "demofox",
            "viewed": 4493
        },
        "renderpass": [
            {
                "code": "#define ANIMATE_NOISE 1\n#define TARGET_BITS 4  // dithered to this many bits\n#define DITHER_IN_LINEAR_SPACE 0\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    const float c_goldenRatioConjugate = 0.61803398875;\n        \n    // texture color\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 fg = texture( iChannel0, uv ).rgb;\n    \n    vec3 col;\n    // right of the screen is dithered using white noise to a fewer number of bits per color channel\n    if (uv.x > 3.0 / 4.0)\n    {\n        // get white noise \"random\" number\n        #if ANIMATE_NOISE\n\t\tvec3 whiteNoise = hash33(vec3(uv, float(iFrame%256) / 256.0));\n\t\t#else\n\t\tvec3 whiteNoise = hash33(vec3(uv, 0.0));\n        #endif\n        \n        // dither to the specified number of bits, using sRGB conversions if desired\n        #if DITHER_IN_LINEAR_SPACE\n        \tfg = pow(fg, vec3(2.2));\n        #endif\n        \n        float scale = exp2(float(TARGET_BITS)) - 1.0;\n        col = floor(fg*scale + whiteNoise)/scale;\n        \n        #if DITHER_IN_LINEAR_SPACE\n        \tcol = pow(col, 1.0/vec3(2.2));\n        #endif        \n    }\n    // middle right of the screen is dithered using blue noise to a fewer number of bits per color channel\n    else if (uv.x > 2.0 / 4.0)\n    {\n        // get blue noise \"random\" number\n        vec2 blueNoiseUV = fragCoord / vec2(1024.0);\n        vec3 blueNoise = texture(iChannel1, blueNoiseUV).rgb;\n        #if ANIMATE_NOISE\n            blueNoise = fract(blueNoise + float(iFrame%256) * c_goldenRatioConjugate);\n        #endif\n        \n        // dither to the specified number of bits, using sRGB conversions if desired\n        #if DITHER_IN_LINEAR_SPACE\n        \tfg = pow(fg, vec3(2.2));\n        #endif\n        \n        float scale = exp2(float(TARGET_BITS)) - 1.0;\n        col = floor(fg*scale + blueNoise)/scale;\n        \n        #if DITHER_IN_LINEAR_SPACE\n        \tcol = pow(col, 1.0/vec3(2.2));\n        #endif\n    }\n    // middle left of the screen is quantized but not dithered\n    else if (uv.x > 1.0 / 4.0)\n    {\n        // dither to the specified number of bits, using sRGB conversions if desired\n        #if DITHER_IN_LINEAR_SPACE\n        \tfg = pow(fg, vec3(2.2));\n        #endif\n        \n        float scale = exp2(float(TARGET_BITS)) - 1.0;\n        col = floor(fg*scale + 0.5f)/scale;\n        \n        #if DITHER_IN_LINEAR_SPACE\n        \tcol = pow(col, 1.0/vec3(2.2));\n        #endif\n    }\n    // left side of screen is left alone for comparison\n    else\n    {\n        col = fg;\n    }\n    \n    if (abs(uv.x - 1.0 / 4.0) < 0.001 || abs(uv.x - 2.0 / 4.0) < 0.001 || abs(uv.x - 3.0 / 4.0) < 0.001)\n\t\tcol = vec3(0.0, 1.0, 0.0);    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n/*\n\nThis shadertoy was adapted from paniq's at https://www.shadertoy.com/view/MsGfDz\nHe is on twitter at: https://twitter.com/paniq\n\nPaniq is truly a king among men.\n\nHe totally didn't demand i put that here when i credited him, I promise (;\n\n\n\nItems of note!\n\n* The blue noise texture sampling should be set to \"nearest\" (not mip map!) and repeat\n\n* you should calculate the uv to use based on the pixel coordinate and the size of the blue noise texture.\n * aka you should tile the blue noise texture across the screen.\n * blue nois actually tiles really well unlike white noise.\n\n* A blue noise texture is \"low discrepancy over space\" which means there are fewer visible patterns than white noise\n * it also gives more even coverage vs white noise. no clumps or voids.\n\n* In an attempt to make it also blue noise over time, you can add the golden ratio and frac it.\n * that makes it lower discrepancy over time, but makes it less good over space.\n * thanks to r4unit for that tip! https://twitter.com/R4_Unit\n\n* Animating the noise in this demo makes the noise basically disappear imo, it's really nice!\n\nFor more information:\n\nWhat the heck is blue nois:\nhttps://blog.demofox.org/2018/01/30/what-the-heck-is-blue-noise/\n\nLow discrepancy sequences:\nhttps://blog.demofox.org/2017/05/29/when-random-numbers-are-too-random-low-discrepancy-sequences/\n\nYou can get your own blue noise textures here:\nhttp://momentsingraphics.de/?p=127\n\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}