{
    "Shader": {
        "info": {
            "date": "1579444238",
            "description": "click this to make it faster: [url]JAVASCRIPT:H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<16;i++)E.P.apply(this,A);};if(!H)close();[/url]\nclick the bottom-left corner to clear the screen.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tyGRc",
            "likes": 6,
            "name": "abelian sandpile model",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "automata"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 420
        },
        "renderpass": [
            {
                "code": "vec3 palette[4] = vec3[4](\n    vec3(0,0,1),\n    vec3(.5,.7,1),\n    vec3(1,1,0),\n    vec3(.5,0,0)\n);\n\nvoid mainImage(out vec4 col, in vec2 pos) {\n    int state = int(texture(iChannel0, pos/res).x);\n    col = state >= 4 ? vec4(1) : palette[state].xyzz;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 col, in vec2 pos) {\n    #define fetch(a,b) int(texelFetch(iChannel0, ipos+ivec2(a,b), 0).x)\n    ivec2 ipos = ivec2(pos);\n    int state = fetch(0,0);\n    state -= int(state >= 4) * 4;\n    state += int(fetch( 1,  0) >= 4);\n    state += int(fetch( 0,  1) >= 4);\n    state += int(fetch(-1,  0) >= 4);\n    state += int(fetch( 0, -1) >= 4);\n    if(floor(pos) == round(res/2.)) state = 4;\n    if(iMouse.z > .5 && round(iMouse.xy) == floor(pos)) state = 256;\n    if(iMouse.z > .5 && iMouse.x < 30. && iMouse.y < 30.) state = 0;\n    col = vec4(state);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define res iResolution.xy\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 col, in vec2 pos) {\n    #define fetch(a,b) int(texelFetch(iChannel0, ipos+ivec2(a,b), 0).x)\n    ivec2 ipos = ivec2(pos);\n    int state = fetch(0,0);\n    state -= int(state >= 4) * 4;\n    state += int(fetch( 1,  0) >= 4);\n    state += int(fetch( 0,  1) >= 4);\n    state += int(fetch(-1,  0) >= 4);\n    state += int(fetch( 0, -1) >= 4);\n    if(floor(pos) == round(res/2.)) state = 4;\n    \n    \n    col = vec4(state);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 col, in vec2 pos) {\n    #define fetch(a,b) int(texelFetch(iChannel0, ipos+ivec2(a,b), 0).x)\n    ivec2 ipos = ivec2(pos);\n    int state = fetch(0,0);\n    state -= int(state >= 4) * 4;\n    state += int(fetch( 1,  0) >= 4);\n    state += int(fetch( 0,  1) >= 4);\n    state += int(fetch(-1,  0) >= 4);\n    state += int(fetch( 0, -1) >= 4);\n    if(floor(pos) == round(res/2.)) state = 4;\n    \n    \n    col = vec4(state);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 col, in vec2 pos) {\n    #define fetch(a,b) int(texelFetch(iChannel0, ipos+ivec2(a,b), 0).x)\n    ivec2 ipos = ivec2(pos);\n    int state = fetch(0,0);\n    state -= int(state >= 4) * 4;\n    state += int(fetch( 1,  0) >= 4);\n    state += int(fetch( 0,  1) >= 4);\n    state += int(fetch(-1,  0) >= 4);\n    state += int(fetch( 0, -1) >= 4);\n    if(floor(pos) == round(res/2.)) state = 4;\n    \n    \n    col = vec4(state);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}