{
    "Shader": {
        "info": {
            "date": "1450108021",
            "description": "Study.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsdGW7",
            "likes": 3,
            "name": "tet2cube",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "gyabo",
            "viewed": 16989
        },
        "renderpass": [
            {
                "code": "//https://www.google.co.jp/search?q=TGM2&num=50&espv=2&biw=1920&bih=921&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjdgvid2NvJAhUBkpQKHcnvCo0Q_AUIBygB\n\nvec2 rot(vec2 p, float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn vec2(c * p.x + -s * p.y, s * p.x + c * p.y);\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*475458.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return max(res * 1.2, 0.6);\n}\n\nvec4 map(vec3 p) {\n\tvec3 sz = vec3(0.9);\n\tfloat ph = 0.0;\n\tfloat id = mod(p.z * 0.5, 2.0);\n\tfloat id2 = mod(p.x * 0.5, 2.0);\n\tif(id > 1.0) ph += 1.3;\n\tif(id2 > 1.0) ph += 1.3;\n\tp.y += sin(ph + iTime * 4.0) * 0.2;\n\tfloat lift = 0.2 - float(int(mod(p.z * 0.5, 3.0))) * 0.3;\n\tlift += 0.2 - float(int(mod(p.x * 0.5, 4.0))) * 0.4;\n\tp.y += lift;\n\t\n\tp.xz = mod(p.xz, 2.0) - 1.0;\n\tvec3 ret = p;\n\tret.xz = rot(ret.xz, 1.3);\n\tfloat t = length(max(abs(p) - vec3(sz), 0.0)) - 0.1;\n\treturn vec4(p, t);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n  vec3 eps = vec3( 0.001, 0.0, 0.0 );\n  vec3 nor = vec3(\n  map(pos+eps.xyy).w - map(pos-eps.xyy).w, \n  map(pos+eps.yxy).w - map(pos-eps.yxy).w, \n  map(pos+eps.yyx).w - map(pos-eps.yyx).w );\n  return normalize(nor);\n}\n\n\n#define MAX_ITE 256\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = ( fragCoord.xy / iResolution.xy ) * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tvec3 pos = vec3(0.0, 10.5, 0.5);\n\tvec3 dir = normalize(vec3(uv, 1.0));\n\n\tdir.yz = rot(dir.yz, 1.4);\n\tdir.xz = rot(dir.xz, -0.5 + iTime * 0.1);\n\t\n\tfloat t = 0.0;\n\tvec4 temp = vec4(0.0);\n\tint count = 0;\n\tfor(int i = 0 ; i < MAX_ITE; i++) {\n\t\ttemp = map(t * dir + pos);\n        if(abs(temp.w) < 0.01) break;\n\t\tt += temp.w * 0.1;\n        count++;\n\t}\n\n\tvec3 ip = t * dir + pos;\n\tfloat col = ((1.0 - (t * 0.01))) - temp.w;\n\tvec3 N = calcNormal(ip);\n\tvec3 L = normalize(vec3(3,2,3));\n\tfloat D = max(0.3, dot(L, N));\n    {\n        vec3 dir = L;\n        float t = 0.0;\n        int count = 1;\n        for(int i = 0 ; i < 32; i++) {\n            vec4 temp = map(t * dir + ip);\n            if(temp.w < 0.001) break;\n            t += temp.w * 0.75;\n            count++;\n        }\n        D *= clamp(length(t * dir + ip - ip), 0.05, 1.0);\n    }\n\tfloat gz = noise((temp.xyz) * 45.0) * noise(temp.xyz * 15.0) * noise(temp.xyz * 10.0);\n    gz = smoothstep(0.0, 0.9, gz);\n\tfragColor = vec4(vec3(col) * D * vec3(3.5, 1.2, 1.0).zyx * gz, 1.0);\n    fragColor.xyz = pow(fragColor.xyz, vec3(1.0 / 2.2));\n    //fragColor = vec4(vec3(col) + map(ip + 0.333).w, 1.0);\n    fragColor.a = 1.0 / t;\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}