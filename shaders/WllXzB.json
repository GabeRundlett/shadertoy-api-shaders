{
    "Shader": {
        "info": {
            "date": "1563597713",
            "description": "Raymarched volumetric fire. Rotate the view with mouse.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WllXzB",
            "likes": 30,
            "name": "Brady's Volumetric Fire",
            "published": 3,
            "tags": [
                "fire",
                "volumetric",
                "raymarcher"
            ],
            "usePreview": 0,
            "username": "BradyInstead",
            "viewed": 1963
        },
        "renderpass": [
            {
                "code": "/////////////////////////////\n// BRADY'S VOLUMETRIC FIRE //\n/////////////////////////////\n\n// CREDITS\n// Thanks to @shnitzelkiller & @iq for inspiration and help\n// noise: https://github.com/BrianSharpe/Wombat/blob/master/Value3D.glsl\n// saturation: https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Shaders/Builtin/Functions/saturation.glsl\n// fnoise: https://www.shadertoy.com/view/Xsd3R2\n\nfloat noise( vec3 P )\n{\n    vec3 Pi = floor(P);\n    vec3 Pf = P - Pi;\n    vec3 Pf_min1 = Pf - 1.0;\n    Pi.xyz = Pi.xyz - floor(Pi.xyz * ( 1.0 / 69.0 )) * 69.0;\n    vec3 Pi_inc1 = step( Pi, vec3( 69.0 - 1.5 ) ) * ( Pi + 1.0 );\n    vec4 Pt = vec4( Pi.xy, Pi_inc1.xy ) + vec2( 50.0, 161.0 ).xyxy;\n    Pt *= Pt;\n    Pt = Pt.xzxz * Pt.yyww;\n    vec2 hash_mod = vec2( 1.0 / ( 635.298681 + vec2( Pi.z, Pi_inc1.z ) * 48.500388 ) );\n    vec4 hash_lowz = fract( Pt * hash_mod.xxxx );\n    vec4 hash_highz = fract( Pt * hash_mod.yyyy );\n    vec3 blend = Pf * Pf * Pf * (Pf * (Pf * 6.0 - 15.0) + 10.0);\n    vec4 res0 = mix( hash_lowz, hash_highz, blend.z );\n    vec4 blend2 = vec4( blend.xy, vec2( 1.0 - blend.xy ) );\n    return dot( res0, blend2.zxzx * blend2.wwyy );\n}\n\nfloat fnoise(vec3 p, float time)\n{\n    float f = 0.0;\n    p = p - vec3(0.0, 1.0, 0.0) * .5 * time;\n    p = p * 3.0;\n    f += 0.50000 * noise(p); p = 2.0 * p;\n\tf += 0.25000 * noise(p); p = 2.0 * p;\n\tf += 0.12500 * noise(p); p = 2.0 * p;\n\tf += 0.06250 * noise(p); p = 2.0 * p;\n    f += 0.03125 * noise(p);\n    return f;\n}\n\nfloat model( in vec3 p )\n{\n    p.y *= .7;\n    float sphere = length(p)-.8;\n    float res = sphere + fnoise(p*1.5, iTime*3.)* .4;\n    return res*.8;\n}\n\nfloat raymarch(in vec3 ro, in vec3 rd)\n{\n    float dist = 0.;\n    for(int i = 0; i < 30; i++)\n    {\n\t\tfloat m = model(ro+rd*dist);\n        dist += m;\n        \n        if(m < .01) return dist;\n        else if(dist > 2.) break;\n    }\n    return -1.;\n}\n\nvec3 hueShift( vec3 color, float hueAdjust ){\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);\n\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I       = dot (color, kRGBToI);\n    float   Q       = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    hue += hueAdjust;\n\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n\n    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );\n\n}\n\nvec3 saturation(vec3 rgb, float adjustment)\n{\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    vec3 intensity = vec3(dot(rgb, W));\n    return mix(intensity, rgb, adjustment);\n}\n\nvec3 background(in vec2 p)\n{\n\treturn vec3(0.);\n}\n\nvec3 volume(in vec3 p, in vec3 rd, in vec3 ld, in vec2 sp)\n{\n    vec3 op = p;\n    float trans = 1.0;\n    float td = 0.0;\n    float dif = 0.0;\n    float emit = 0.0;\n    float steps = 30.; // increase to smooth\n    \n    // march\n    for(float i = 0.; i < steps; i++)\n    {\n        float m = model(p);\n        p += rd*.03;\n        \n        float dens = 1.-smoothstep(0., .35, -m);\n        td += dens;\n        trans *= dens;\n        \n        if(td > 1.0 && dif <= 0.)\n        {\n            td = 1.;\n        \tdif = clamp(1. - model(p - .1*ld), 0., 1.);\n            emit = pow(smoothstep(-.3, 0., model(p)), 4.);\n        }\n    }\n    \n    trans = (1.-pow(td/steps, 4.5));\n    trans = smoothstep(0., 1., trans);\n    float emitmod = (emit*trans)*.8+.2;\n    \n    // light\n    vec3 lin = vec3(.3, .2, .9);\n    lin = hueShift(lin, 4.2 + -trans*.6 + dif*.5);\n    lin *= emitmod;\n    \n    // bright/sat/contrast\n    lin = saturation(lin, pow(trans, .5)*.4);\n    lin *= 5.;\n    lin -= vec3(.4);\n    \n    return mix(background(sp), lin, pow(trans, 1.25));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    \n    float rs = .5;\n    vec3 ro = vec3(cos(iMouse.x/100.), 1., sin(iMouse.x/100.))*1.35;\n    vec3 ta = vec3(0., 0.1, .0);\t\t\t\t\n    \n    vec3 w = normalize (ta-ro);\n    vec3 u = normalize (cross (w, vec3(0., 1., 0.)));\n    vec3 v = normalize (cross (u, w));\n    mat3 mat = mat3(u, v, w);\n    vec3 rd = normalize (mat*vec3(p.xy,1.));\n    \n    float dist = raymarch(ro, rd);\n    vec3 ld = vec3(-1., 1., 0.);\n    vec3 col = dist > 0. ? volume(ro+rd*dist, rd, ld, p) : background(p);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}