{
    "Shader": {
        "info": {
            "date": "1597608794",
            "description": "Amplifies color of the input video from buffer C.\n\nParameters are in Common.\n\nInspired by http://people.csail.mit.edu/mrub/PhDThesis/",
            "flags": 34,
            "hasliked": 0,
            "id": "ttffDB",
            "likes": 4,
            "name": "Color Amplification",
            "published": 3,
            "tags": [
                "color",
                "amplification"
            ],
            "usePreview": 0,
            "username": "laube",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 smoothed = texture(iChannel0, fragCoord / iResolution.xy).xyz;\n\tvec3 raw = texture(iChannel1, fragCoord / iResolution.xy).xyz;\n    \n    vec3 diff = hsv_sub(raw, smoothed);\n    vec3 gain = GAIN;\n    \n    fragColor = vec4(1.);\n    fragColor.xyz = hsv2rgb(hsv_add(raw, diff * gain));\n    //fragColor.xyz = vec3(.5) + diff * gain;\n    //fragColor.xyz = hsv2rgb(raw);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Smoothing (slow)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 previous = texture(iChannel1, fragCoord / iResolution.xy).xyz;\n    vec3 next = texture(iChannel0, fragCoord / iResolution.xy).xyz;\n    \n    // a = previous, b = next\n    // r = a * (1 - m) + b * m \n    //   = a + b * m - a * m \n    //   = a + (b - a) * m\n    // d = (b - a)\n    // r = a + d * m\n    \n    vec3 d = hsv_sub(next, previous);\n    fragColor.xyz = hsv_add(previous, d * vec3(SMOOTH_BASELINE));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Smoothing (fast)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 previous = texture(iChannel1, fragCoord / iResolution.xy).xyz;\n    vec3 next = texture(iChannel0, fragCoord / iResolution.xy).xyz;\n    \n    // a = previous, b = next\n    // r = a * (1 - m) + b * m \n    //   = a + b * m - a * m \n    //   = a + (b - a) * m\n    // d = (b - a)\n    // r = a + d * m\n    \n    vec3 d = hsv_sub(next, previous);\n    fragColor.xyz = hsv_add(previous, d * vec3(SMOOTH_RAW));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Sampling and RGB to HSV\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n = 0.;\n    vec3 rgb = vec3(0.);\n    \n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    float taspect = iChannelResolution[0].y / iChannelResolution[0].x;\n    \n    for (int x = -BLUR_INPUT_RADIUS; x < BLUR_INPUT_RADIUS + 1; x++) {\n        for (int y = -BLUR_INPUT_RADIUS; y < BLUR_INPUT_RADIUS + 1; y++) {\n            float f = 1. / (1. + length(vec2(x, y)) / 2.);\n    \t\tvec2 chOfs = vec2(x, y);\n            rgb += texture(\n                iChannel0, \n                vec2(\n                    .5 + uv.x * taspect + chOfs.x / iChannelResolution[0].x,\n                    .5 + uv.y +           chOfs.y / iChannelResolution[0].y\n                )\n            ).xyz * f;\n            n += f;\n        }\n    }\n    \n    fragColor.xyz = rgb2hsv(rgb / n);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BLUR_INPUT_RADIUS 3         // Blurring of input to reduce noise\n#define SMOOTH_RAW .2\t\t\t\t// Exponential color smoothing constant for raw footage to reduce color noise. 1 -> no smoothing\n#define SMOOTH_BASELINE .1\t\t\t// Exponential color smoothing constant for baseline image. 1 -> no smoothing\n#define GAIN vec3(30., 20., 10.)\t// Hue, Saturation, Value amplification\n\nvec3 hsv_sub(vec3 a, vec3 b)\n{\n    vec3 res = vec3(0.);\n    res.yz = a.yz - b.yz;\n    \n    // h1 - h0 = 0\n    // h0.5 - h0.4 = 0.1\n  \t// h0.9 - h0.1 = -0.2\n  \t// h0.1 - h0.9 = 0.2\n    // h0.4 - h0.5 = -0.1\n    \n    float d1 = a.x - b.x;\n    \n    if (d1 < -0.5) {\n        res.x = d1 + 1.;\n    } else if (d1 > 0.5) {\n        res.x = d1 - 1.;\n    } else {\n        res.x = d1;\n    }\n    \n    return res;\n}\n\n\nvec3 hsv_add(vec3 a, vec3 b)\n{\n    vec3 res = a + b;\n    res.x = mod(res.x, 1.0);\n    return res;\n}\n\n// Taken from https://stackoverflow.com/a/17897228\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}