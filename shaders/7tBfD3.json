{
    "Shader": {
        "info": {
            "date": "1652818950",
            "description": "The standard [url=https://en.m.wikipedia.org/wiki/Cantor_function]Devil's Stairs[/url] climbs around the y=x line, but it can be generalize to any monotonic function for which we can compute its inverse; in this case I'm using a smoothstep.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tBfD3",
            "likes": 36,
            "name": "Generalized Devil's Stairs",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "stairs",
                "devil",
                "cantor",
                "generalized",
                "generalization"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 895
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// The Devil's Stairs (https://en.m.wikipedia.org/wiki/Cantor_function) climbs around f(x)=x\n// but can be generalize to any monotonic function for which we can compute the inverse.\n\nfloat fun_smt( float x, float k ) { return pow(x,k)/(pow(x,k)+pow(1.0-x,k)); }\nfloat inv_smt( float x, float k ) { return fun_smt(x,1.0/k); }\nfloat fun_pow( float x, float k ) { return pow(x,k); }\nfloat inv_pow( float x, float k ) { return fun_pow(x,1.0/k); }\n\nfloat function( float x, float t )\n{\n    float k = exp2(3.0*(0.5-0.5*cos(t*6.283185/3.0)));\n    return (t<3.0) ? fun_smt(x,k) : fun_pow(x,k);\n}\nfloat inverse_function( float x, float t )\n{\n    float k = exp2(3.0*(0.5-0.5*cos(t*6.283185/3.0)));\n    return (t<3.0) ? inv_smt(x,k) : inv_pow(x,k);\n}\n\n// generalization of Devil's Staircase\nfloat cantor( float x, float t )\n{\n    float y = 0.0;\n    float sc = 0.5;\n    float bi = 0.0;\n    float xa = 0.0;\n    float xb = 1.0;\n    for( int i=0; i<9; i++ )\n    {\n        // choose subdivision intervals\n        float ya = function(xa,t);\n        float yb = function(xb,t);\n        float wa = inverse_function(ya+(yb-ya)/3.0,t);\n        float wb = inverse_function(yb-(yb-ya)/3.0,t);\n        // recurse\n             if( x<wa ) { bi+=0.0*sc; y=bi+sc*(x-xa)/(wa-xa); xb=wa; }\n        else if( x>wb ) { bi+=1.0*sc; y=bi+sc*(x-wb)/(xb-wb); xa=wb; }\n        else            { bi+=0.0*sc; y=bi+sc;                break; }\n        sc *= 0.5;\n    }\n    return y;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\treturn length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    // pixel coords\n    float px = 1.0/iResolution.y;\n    vec2  p = (vec2((iResolution.y-iResolution.x)/2.0,0.0)+fragCoord)*px;\n    \n    // animation loop\n    float t = mod(iTime,6.0);\n\n    // render\n    vec3 col = vec3(0.0);\n    if( p.x>0.0 && p.x<1.0 )\n    {\n        // background\n        col = vec3( 0.04 + 0.008*mod(floor(p.x*10.0)+floor(p.y*10.0),2.0) );\n\n        // plot\n        vec2 d = vec2(1e20);\n        for( int i=-2; i<2; i++ )\n        {\n            float x0 = p.x + px*float(i+0);\n            float x1 = p.x + px*float(i+1);\n            d.x = min( d.x, sdLine(p, vec2(x0, function(x0,t)), \n                                      vec2(x1, function(x1,t))));\n            d.y = min( d.y, sdLine(p, vec2(x0, cantor(  x0,t)), \n                                      vec2(x1, cantor(  x1,t))));\n        }\n        col = mix( col, vec3(0.25,0.25,0.25), 1.0-smoothstep(0.0007,0.0007+px,d.x) );\n        col = mix( col, vec3(1.00,0.36,0.04), 1.0-smoothstep(0.0007,0.0007+px,d.y) );\n    }\n    \n    // gamma\n    col = sqrt(col);\n \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}