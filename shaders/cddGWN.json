{
    "Shader": {
        "info": {
            "date": "1677271217",
            "description": "I have this cool sweatshirt I based it off of  ( https://www.ebay.com/itm/354433376225    )",
            "flags": 0,
            "hasliked": 0,
            "id": "cddGWN",
            "likes": 1,
            "name": "Checkered Confusion",
            "published": 3,
            "tags": [
                "checker"
            ],
            "usePreview": 0,
            "username": "johnCavatelli",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "//Based on a cool shirt that I have. \n//hash2 function is much smoother, but the semi-shitty noise produced\n//by first function produces much cooler result\n\n//https://www.shadertoy.com/view/lsf3WH\nfloat hash(vec2 p)\n{\n    p  = 50.0*fract( p*0.7183098 + vec2(0.71,0.1413));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\n// The Below Function\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\nfloat hash2( vec2 w )\n{\n    uvec2 x = uvec2(w);\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;\n    uv.x = uv.x / aspect;//divide aspect ration to make the grid square not rectangle\n    \n    //shader variables\n    float spaceWarpScale = 1.;\n    float scrollSpeed = 0.2;\n    float noiseInputScale = 1.5;//how much the uv cordinates are multiplied by going in\n    float noiseOutputScale = 0.5;//how much the noise warps the grid\n    float zoom = 5.;\n    float gridStep = 0.5;//0-1, the cuttof for the step function\n    //default: 1.0, 0.2, 1.5, 0.5, 5, 0.5\n    //cool   : 0.6, 0.2, 2.0, 0.7, 6, 0.1 \n    //trippy : 0.2, 0.02, 10, 0.5, 0.7, 0.5\n    \n    //scale the space\n    uv.x = uv.x * (0.5 * sin(spaceWarpScale * iTime) + 1.);//scale uv cords to make it 'breathe'\n    uv.y = uv.y * (0.5 * cos(spaceWarpScale * iTime) + 1.);\n    //scroll the space to avoid same loop\n    uv.x = uv.x + scrollSpeed * iTime;\n    uv.y = uv.y - scrollSpeed * iTime;\n    //warp via noise, bending the grid\n    uv.x = uv.x + noise(uv*noiseInputScale)*noiseOutputScale;\n    uv.y = uv.y + noise(uv*noiseInputScale)*noiseOutputScale;\n    \n    \n    uv = uv * vec2(zoom);//scale again after transformations to zoom in/out\n    vec3 col = vec3(step(gridStep,fract(uv.x)),step(gridStep,fract(uv.y)),0);\n    col = vec3((col.r + col.g) == 1.);   \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}