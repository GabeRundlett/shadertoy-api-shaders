{
    "Shader": {
        "info": {
            "date": "1469618150",
            "description": "based on [url=https://www.shadertoy.com/view/4scGWf]Maze 4 (90c)[/url]\n\nclick for fullscreen",
            "flags": 0,
            "hasliked": 0,
            "id": "Mlc3D7",
            "likes": 16,
            "name": "Another Maze",
            "published": 3,
            "tags": [
                "maze",
                "onetweet"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1034
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//#define t iDate.w/1e3\n#define t 1e3\n\nconst vec2 gridSize = vec2(5.,4.);//grid size (columns, rows)\n    \nvec2 si;\nfloat ti;\nvec3 m;\n\n// framework ////////////////////////////////////////////\nfloat EncID(vec2 s, vec2 h, vec2 sz) // encode id from coord // s:screenSize / h:pixelCoord / sz=gridSize\n{\n    vec2 c = floor(h/s*sz);\n    return c.y*sz.x+c.x;\n}\nvec3 getCell(vec2 s, vec2 h, vec2 sz) // return id / uv\n{\n    vec2 si = s/sz;\n    vec2 c = floor(h/si);\n    float id = c.y*sz.x+c.x;\n    vec2 uv = (h+h-c-c-si)/si.y-0.2;\n    return vec3(id, uv);\n}\n\n//// versions /// same func prototype as mainImage //////\nvoid partImage0( out vec4 f, vec2 g ) // FabriceNeyret2 version\n{\n\tg /= 25.;\n\tf = 1. - vec4(.34,1,1,1)/25.\n                  / abs( fract( g.y + g.x * sign( cos( t * length(floor(g)) )   )\n                              ) - .5);\n}\n\nvoid partImage1( out vec4 f, vec2 g ) // FabriceNeyret2 version\n{\n\tg /= 25.;\n\tg *= mat2(1,-1,1,1)/1.99;\n\tf = 1. - vec4(.34,1,1,1)/25.\n                  / ( fract( cos( t * length(floor(g)) ) <0. ? g.x : g.y\n                              ) - .5);\n}\n\nvoid partImage2( out vec4 f, vec2 g ) // FabriceNeyret2 version\n{\n\tg /= 25.;\n\tfloat s = sign( cos( t * length(floor(g)) ) );\n\tf = 1. - vec4(.34,1,1,1)/25. / cos(3.14*(g.y + g.x * s )) \n                   * (1. - .9 / cos(5.*3.14*(g.x - g.y * s )));\n}\n\nvoid partImage3( out vec4 f, vec2 g ) // FabriceNeyret2 version\n{\n\tg /= 25.;\n\tf = 1. - vec4(.34,1,1,1)/25.\n              / cos(3.14*( g.y + g.x * sign( cos( t * length(floor(g)) ))));\n}\n\nvoid partImage4( out vec4 f, vec2 g ) // FabriceNeyret2 version\n{\n\tg /= 25.;\n\tf = 1. - vec4(.34,1,1,1)/25.\n                  / ( fract( g.y + g.x * sign( cos( t * length(floor(g)) )   )\n                              ) - .5);\n}\n\nvoid partImage5( out vec4 f, vec2 g ) \n{\n\tvec2 h = (g+g-si.xy)/si.y;\n\tg /= 35.;\n    f = cos(h.x)*cos(h.y)*.8 - vec4(.34,1,1,1)/25.\n              / cos(3.14*( g.y + g.x * sign( cos( t * length(floor(g)) ))));\n}\n\nvoid partImage6( out vec4 f, vec2 g ) \n{\n\tg /= 25.;\n    float rep = cos(3.14*( g.y + g.x * sign( cos( t * length(floor(g)) ))));\n    f = vec4(rep) * float(abs(rep)>0.1);\n}\n\nvoid partImage7( out vec4 f, vec2 g ) \n{\n\tvec2 h = (g+g-si.xy)/si.y * 0.6;\n\tg /= 25.;\n\tfloat r = cos(h.x)*cos(h.y)*.9;\n\tvec4 col = vec4(.34,1,1,1)/25.;\n\tfloat hash = cos( t * length(floor(g)));\n\tfloat branch = g.y + g.x * sign(  hash );\n\tfloat rep = cos(3.14 * (branch + 1.));\n\tfloat rep_ero =  step(-1., rep);\n\tfloat rep_ero2 =  step(0.01, rep);\n\tvec4 maze = col + r - rep - rep_ero + rep_ero2;\n\tf = maze;\n}\n\nvoid partImage8( out vec4 f, vec2 g ) \n{\n\tvec2 h = (g+g-si.xy)/si.y * 0.6;\n\tvec4 tex = texture(iChannel0, g/si);\n\tg /= 25.;\n\tfloat r = cos(h.x)*cos(h.y)*.7;\n\tvec4 col = vec4(.34,1,1,1)/25.;\n\tfloat hash =cos( t * length(floor(g)));\n\tfloat branch = g.y + g.x * sign(  hash );\n\tfloat rep = cos(3.14 * branch);\n\tfloat tt = sin(ti)*.5 +.5;\n    f = (r - col / rep) * 0.9 + (r - col / step(tex, vec4(rep + tt*2.16))) * 0.1;\n}\n\nvoid partImage9( out vec4 f, vec2 g ) \n{\n\tvec2 h = (g+g-si.xy)/si.y * 0.6;\n\tg /= 25.;\n\tfloat r = cos(h.x)*cos(h.y)*.7;\n\tvec4 col = vec4(.34,1,1,1)/25.;\n\tfloat hash = cos( t * length(floor(g)));\n\tfloat branch = g.y + g.x * sign(  hash );\n\tfloat rep = cos(3.14 * (branch + floor(0.956))) *0.35;\n    f = r - col / rep;\n}\n\nvoid partImage10( out vec4 f, vec2 g ) \n{\n\tvec2 h = (g+g-si.xy)/si.y * 0.6;\n    g /= 25.;\n    float rep = cos(3.14 *( g.y + g.x* sign(cos( t * length(floor(g)))) ));\n\tf.r = abs(rep) - 0.1;\n\tf.g = abs(rep + 0.2) - 0.2;\n\tf.b = abs(rep - 0.1) - 0.4;\n}\n\nvoid partImage11( out vec4 f, vec2 g ) // nice correction by FabriceNeyret2\n{\n\tvec2 h = cos((g+g-si.xy)/si.y * 0.6 - .3*cos(iTime+vec2(0,1.6)));\n    g /= 25.;\n    float rep = cos(3.14 *( g.y + g.x* sign(cos( t * length(floor(g)))) ));\n    float x = abs(rep) - h.x*h.y*0.9;\n\tf = 1.-vec4(.34,1,1,1)/25./x*smoothstep(0.,.07,x);\n}\n\nvoid partImage12(out vec4 f, vec2 g ) \n{\n\tvec2 uv = 4.*(2. * g - iResolution.xy)/iResolution.y;\n    g /= 25.;\n    float rep = cos(3.14 *( g.y + g.x* sign(cos( t * length(floor(g)))) ));\n\tfloat a = atan(uv.x, uv.y) / 3.14159 * 1.5;\n\tfloat r = length(uv) - iTime*0.5;\n\ta+=r+rep;\n\tuv = abs(fract(vec2(a+r,a-r))-0.5);\n\tfloat x = uv.x*1.248;\n\tfloat y = uv.y*6.;\n\tfloat z = uv.y*1.8;\n\tfloat hex = abs(max(x+y,x) - 1.386);\n\tvec3 col = hex * 0.6 * vec3(0.15,0.24,0.37)/length(uv);\n    f.rgb =  col;\n    if (abs(rep) > 0.9)\n        f.rgb = col+.5-vec3(.34,1,1)/25./rep;\n}\n\nvoid partImage13( out vec4 f, vec2 g ) \n{\n\tvec2 uv = 4.*(2. * g - iResolution.xy)/iResolution.y;\n    g /= 25.;\n    float rep = cos(3.14 *( g.y + g.x* sign(cos( t * length(floor(g)))) ));\n\tfloat a = atan(uv.x, uv.y) / 3.14159 * 1.5;\n\tfloat r = length(uv) - iTime*0.5 + rep;\n\ta+=r * 1.1 ;\n\tuv = abs(fract(vec2(a+r,a-r))-0.5);\n\tfloat x = uv.x*1.248;\n\tfloat y = uv.y*6.;\n\tfloat z = uv.y*1.8;\n\tfloat hex = abs(max(x+y,x) - 1.386);\n\tvec3 col = hex * 0.6 * vec3(0.15,0.24,0.37)/length(uv);\n    f.rgb =  col;\n    if (abs(rep) > 0.9)\n        f.rgb = col+.5-vec3(.34,1,1)/25./rep;\n}\n\nvoid partImage14( out vec4 f, vec2 g ) \n{\n    g /= 25.;\n\tfloat rep = cos(3.14 *( g.y + g.x* sign(cos( t * length(floor(g)))) ))*.6;\n    g*=1.3;\n    rep += cos(3.14 *( g.x* sign(cos( t * length(floor(g)))) ))*.2;\n    g*=1.3;\n    rep += cos(3.14 *( g.y* sign(cos( t * length(floor(g)))) ))*.2;\n    f = 0.5-vec4(.34,1,1,1)/25./rep;\n}\n\nvoid partImage15( out vec4 f, vec2 g ) \n{\n\tg /= 25.;\n\tfloat rep = \n        cos(g.x)*sin(g.y)*0.4 + \n        cos(3.14 *( g.y + g.x* sign(cos( t * length(floor(g)))) ))*.6;\n    f = 0.5-vec4(.34,1,1,1)/25./(abs(rep)*1.3-(sin(iTime)*.25+.5));\n}\n\n\nvoid partImage16( out vec4 f, vec2 g ) \n{\n\tg /= 25.;\n\tfloat rep = cos(3.14 *( g.y + g.x* sign(cos( t * length(floor(g)))) ))*.6;\n\tf = rep-vec4(.34,1,1,1)/25./(abs(rep)-0.5);\n}\n\n\nvoid partImage17( out vec4 f, vec2 g ) \n{\n\tg /= 25.;\n\tfloat rep = \n        cos(g.y) * cos(g.y) * tan(sin(ti)*1.1) * 0.4 + \n        cos(3.14 *( g.y + g.x * sign(cos( t * length(floor(g)))) ))*.6;\n\tf = abs(rep)*1.5-vec4(.34,1,1,1)/25./(abs(rep)-0.5);\n}\n\nvoid partImage18( out vec4 f, vec2 g ) \n{\n\tg /= 25.;\n\tfloat rep = \n        cos(3.14 *(g.x + g.y * sign(sin( t * length(floor(g))))))*.4 + \n        cos(3.14 *(g.y + g.x * sign(cos( t * length(floor(g))))))*.6;\n\tf = 0.5-vec4(.34,1,1,1)/25./(rep+sin(ti)*0.5);\n}\n\nvoid partImage19( out vec4 f, vec2 g ) \n{\n\tg /= 25.;\n\tfloat rep = \n        mix(cos(g.x), cos(g.y), sin(ti)*.5+.5) * 0.4 + \n        cos(3.14 *( g.y + g.x * sign(cos( t * length(floor(g)))) ))*.6;\n\tf = abs(rep)*1.5-vec4(.34,1,1,1)/25./(abs(rep)-0.5);\n}\n\n//// main ///////////////////////////////////////////////\nvoid mainImage( out vec4 f, vec2 l )\n{\n    si = iResolution.xy;\n    ti = iTime;\n    m = iMouse.xyz;\n    \n    vec2 \n        h = l,\n        g = (h+h-si)/si.y;\n    \n    vec3 cell = getCell(si,h,gridSize);\n    \n    if(m.z>0.) \n        cell = vec3(EncID(si,m.xy,gridSize), g); // cell.x => cell id, cell.yz => central uv of the cell\n    \n    l += vec2(cos(ti*0.2), sin(ti*0.2))*200.;; // circular cell slding\n    \n    if (cell.x == 0.) partImage0(f, l);\n    else if (cell.x == 1.) partImage1(f, l);\n   \telse if (cell.x == 2.) partImage2(f, l);\n   \telse if (cell.x == 3.) partImage3(f, l);\n    else if (cell.x == 4.) partImage4(f, l);\n    else if (cell.x == 5.) partImage5(f, l);\n\telse if (cell.x == 6.) partImage6(f, l);\n\telse if (cell.x == 7.) partImage7(f, l);\n\telse if (cell.x == 8.) partImage8(f, l);\n\telse if (cell.x == 9.) partImage9(f, l);\n\telse if (cell.x == 10.) partImage10(f, l);\n\telse if (cell.x == 11.) partImage11(f, l);\n    else if (cell.x == 12.) partImage12(f, l);\n    else if (cell.x == 13.) partImage13(f, l);\n    else if (cell.x == 14.) partImage14(f, l);\n    else if (cell.x == 15.) partImage15(f, l);\n    else if (cell.x == 16.) partImage16(f, l);\n    else if (cell.x == 17.) partImage17(f, l);\n    else if (cell.x == 18.) partImage18(f, l);\n    else if (cell.x == 19.) partImage19(f, l);\n}\n\n/* original\nvoid mainImage( out vec4 f, vec2 g )\n{\n\tg /= 35.;\n\tf = 1. - vec4(.34,1,1,1)/25.\n                  / abs( fract( g.y + g.x * sign( cos( iDate.w/1e3 * length(floor(g)) )   )\n                              ) - .5);\n}/**/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}