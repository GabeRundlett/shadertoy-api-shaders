{
    "Shader": {
        "info": {
            "date": "1488460462",
            "description": "I'm not good at math... I just tried to make a cubic version of smallpt (from Zavie)",
            "flags": 32,
            "hasliked": 0,
            "id": "ldXcD7",
            "likes": 1,
            "name": "Very old TV",
            "published": 3,
            "tags": [
                "ray",
                "cube",
                "tracing",
                "hdr",
                "smallpt"
            ],
            "usePreview": 0,
            "username": "0xAA55",
            "viewed": 1247
        },
        "renderpass": [
            {
                "code": "\n#define HDR_MINLUM 1.\n#define HDR_MAXLUM 20.\n\n#define LBLUR_V 20\n#define LBLUR_DIFFUSION 40.\n#define BLUR_V 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 bright = vec4(0);\n    vec4 avrlum = texture(iChannel1,fragCoord / iResolution.xy);\n    float rgblum = avrlum.r + avrlum.g + avrlum.b;\n    rgblum = min(HDR_MAXLUM, max(HDR_MINLUM, rgblum));\n    for(int i = -LBLUR_V; i <= LBLUR_V; i++)\n    {\n        vec4 samp = texture(iChannel2, (fragCoord - vec2(0, i) * LBLUR_DIFFUSION / vec2(LBLUR_V)) / iResolution.xy);\n        bright += samp;\n    }\n    bright = bright / vec4(LBLUR_V * 2 + 1);\n    \n    vec4 color = vec4(0);\n    for(int i = -BLUR_V; i <= BLUR_V; i++)\n    {\n        color += texture(iChannel3, (fragCoord - vec2(0, i)) / iResolution.xy) ;\n    }\n    color = color / vec4(BLUR_V * 2 + 1);\n    color = color / (rgblum * 2./ 3.);\n    \n    fragColor = color + bright;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat PI = 3.1415926535897932384626;\nvec3 eyepos = vec3(0.0, 2.0, -4.0);\nvec2 yawpitch = vec2(0, 0);\n\n#define FLT_MAX 99999999999.\n\n#define DEPTH 4\n#define SAMPLES 16\n#define ROOM_SIZE 9.\n#define WALL_THICKNESS .1\n#define POV (1./5.)\n\n#define PREDICT_NEXT_MOVEMENT 1\n\nfloat seed = 0.;\nfloat rand() { return fract(sin(seed++)*43758.5453123); }\n\nstruct box_t\n{\n    vec3 p, d;\n    mat3 r;\n};\n\nmat3 RotXAxis(float ang)\n{\n    float sang = sin(ang);\n    float cang = cos(ang);\n    return mat3\n    (\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, cang,-sang),\n        vec3(0.0, sang, cang)\n    );\n}\n\nmat3 RotYAxis(float ang)\n{\n    float sang = sin(ang);\n    float cang = cos(ang);\n    return mat3\n    (\n        vec3( cang, 0.0, sang),\n        vec3(  0.0, 1.0, 0.0),\n        vec3(-sang, 0.0, cang)\n    );\n}\n\nmat3 RotZAxis(float ang)\n{\n    float sang = sin(ang);\n    float cang = cos(ang);\n    return mat3\n    (\n        vec3( cang, sang, 0.0),\n        vec3(-sang, cang, 0.0),\n        vec3(0.0, 0.0, 1.0)\n    );\n}\n\nmat3 RotAxis(vec3 v, float ang)\n{\n    float sang = sin(ang);\n    float cang = cos(ang);\n    return mat3\n    (\n        vec3\n        (\n            (1.0 - cang) * v.x * v.x + cang,\n            (1.0 - cang) * v.x * v.y - sang * v.z,\n            (1.0 - cang) * v.x * v.z + sang * v.y\n        ),\n        vec3\n        (\n            (1.0 - cang) * v.y * v.x + sang * v.z,\n            (1.0 - cang) * v.y * v.y + cang,\n            (1.0 - cang) * v.y * v.z - sang * v.x\n        ),\n        vec3\n        (\n            (1.0 - cang) * v.z * v.x - sang * v.y,\n            (1.0 - cang) * v.z * v.y + sang * v.x,\n            (1.0 - cang) * v.z * v.z + cang\n        )\n    );\n}\n    \nmat3 EulerRotation(vec3 ypr)\n{\n    return RotZAxis(ypr.z) * RotXAxis(ypr.y) * RotYAxis(ypr.x);\n}\n\nbool Box_Raycast(box_t box, vec3 start, vec3 n_ray, bool ignore_from_inside, out bool is_from_inside, out vec3 castpoint, out vec3 normal, out vec2 uv, out float castdist)\n{\n    mat4 box_mat = mat4\n    (\n        vec4(box.r[0], 0.),\n        vec4(box.r[1], 0.),\n        vec4(box.r[2], 0.),\n        vec4(box.p, 1.)\n    );\n    \n    mat4 box_mat_inv = inverse(box_mat);\n    \n    vec3 start_local = (box_mat_inv * vec4(start, 1.)).xyz;\n    vec3 ray_local = (box_mat_inv * vec4(n_ray, 0.)).xyz;\n    \n    vec3 sv = step(abs(start_local), box.d);\n    if(sv.x + sv.y + sv.z > 2.)\n    {\n        is_from_inside = true;\n        if(ignore_from_inside) return false;\n        start_local = -start_local;\n    }\n    is_from_inside = false;\n    \n    vec3 rat = 1.0 / ray_local;\n    vec3 trp = rat * start_local;\n    vec3 dim = box.d * abs(rat);\n    \n    vec3 t1 = -trp - dim;\n    vec3 t2 = -trp + dim;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n    \n\tif( tN > tF || tF < 0.0) return false;\n    \n    vec3 nor = -sign(ray_local)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    \n    castpoint = start + n_ray * tN;\n    normal = (box_mat * vec4(nor,0.)).xyz;\n    castdist = abs(tN);\n    \n    vec3 cp_local = (box_mat_inv * vec4(castpoint, 1.)).xyz;\n    \n    uv = (nor.x * cp_local.yz + nor.y * cp_local.zx + nor.z * cp_local.xy) *.5 + .5;\n    \n    return true;\n}\n\nstruct object_t\n{\n    box_t shape;\n    vec3 color;\n    float specular;\n    vec3 emissive;\n};\n\n#define num_Objects 8\nobject_t g_Objects[num_Objects];\nfloat total_lum;\n\nvoid Scene_Init()\n{\n\tg_Objects[0] = object_t\n    (\n        box_t(vec3(0,0,0),\n              vec3(ROOM_SIZE*.5,WALL_THICKNESS,ROOM_SIZE*.5),\n              mat3(vec3(1,0,0),\n                   vec3(0,1,0),\n                   vec3(0,0,1))),\n        vec3(.75),\n        0.,\n        vec3(0)\n    );\n\tg_Objects[1] = object_t\n    (\n        box_t(vec3(-ROOM_SIZE*.5,ROOM_SIZE*.5,0),\n              vec3(WALL_THICKNESS,ROOM_SIZE*.5,ROOM_SIZE*.5),\n              mat3(vec3(1,0,0),\n                   vec3(0,1,0),\n                   vec3(0,0,1))),\n        vec3(.75,.25,.25),\n        0.,\n        vec3(0)\n    );\n\tg_Objects[2] = object_t\n    (\n        box_t(vec3(ROOM_SIZE*.5,ROOM_SIZE*.5,0),\n              vec3(WALL_THICKNESS,ROOM_SIZE*.5,ROOM_SIZE*.5),\n              mat3(vec3(1,0,0),\n                   vec3(0,1,0),\n                   vec3(0,0,1))),\n        vec3(.25, .25, .75),\n        0.,\n        vec3(0)\n    );\n\tg_Objects[3] = object_t\n    (\n        box_t(vec3(0,ROOM_SIZE,0),\n              vec3(ROOM_SIZE*.5,WALL_THICKNESS,ROOM_SIZE*.5),\n              mat3(vec3(1,0,0),\n                   vec3(0,1,0),\n                   vec3(0,0,1))),\n        vec3(.75),\n        0.,\n        vec3(0)\n    );\n\tg_Objects[4] = object_t\n    (\n        box_t(vec3(0,ROOM_SIZE*.5,ROOM_SIZE*.5),\n              vec3(ROOM_SIZE*.5,ROOM_SIZE*.5,WALL_THICKNESS),\n              mat3(vec3(1,0,0),\n                   vec3(0,1,0),\n                   vec3(0,0,1))),\n        vec3(.75),\n        0.,\n        vec3(0)\n    );\n\tg_Objects[5] = object_t\n    (\n        box_t(vec3(0,ROOM_SIZE*.5,-ROOM_SIZE*.5),\n              vec3(ROOM_SIZE*.5,ROOM_SIZE*.5,WALL_THICKNESS),\n              mat3(vec3(1,0,0),\n                   vec3(0,1,0),\n                   vec3(0,0,1))),\n        vec3(1),\n        0.,\n        vec3(0)\n    );\n\tg_Objects[6] = object_t\n    (\n        box_t(vec3(0,WALL_THICKNESS + sqrt(2.) * .4,0),\n              vec3(.4),\n              RotYAxis(iTime * .8) *\n              RotZAxis(iTime * .5) *\n              RotXAxis(iTime * .2)),\n        vec3(1),\n        1.,\n        vec3(0)\n    );\n\tg_Objects[7] = object_t\n    (\n        box_t(vec3(0,ROOM_SIZE * .5,0),\n              vec3(.5,.5,.5),\n              mat3(vec3(1,0,0),\n                   vec3(0,1,0),\n                   vec3(0,0,1))),\n        vec3(1),\n        0.,\n        vec3(10,9,8)\n    );\n    total_lum = 0.;\n    for(int i = 0; i < num_Objects; i++)\n    {\n        total_lum += g_Objects[i].emissive.r +\n                     g_Objects[i].emissive.g +\n                     g_Objects[i].emissive.b;\n    }\n}\n\nbool pick_object\n(\n    vec3 start,\n    vec3 n_ray,\n    bool ignore_from_inside,\n    out bool is_from_inside,\n    out int objindex,\n    out vec3 castpoint,\n    out vec3 castnormal,\n    out vec2 castuv,\n    out float castdist\n)\n{\n    vec3 cp, cn;\n    vec2 cuv;\n    float cd;\n    bool have_cast = false;\n    bool isin = false;\n    \n    float min_dist = FLT_MAX;\n    for(int i = 0; i < num_Objects; i++)\n    {\n        if(Box_Raycast(g_Objects[i].shape, start, n_ray, ignore_from_inside, isin, cp, cn, cuv, cd))\n        {\n            if(cd <= min_dist)\n            {\n            \thave_cast = true;\n                min_dist = cd;\n                objindex = i;\n                \n                is_from_inside = isin;\n                castpoint = cp;\n                castnormal = cn;\n                castuv = cuv;\n                castdist = cd;\n            }\n        }\n    }\n    return have_cast;\n}\n\nint select_lightsource()\n{\n    float val = rand() * total_lum;\n    for(int i = 0; i < num_Objects; i++)\n    {\n        float curlum =\tg_Objects[i].emissive.r +\n                        g_Objects[i].emissive.g +\n                        g_Objects[i].emissive.b;\n        if(curlum > val)\n            return i;\n        else\n            val -= curlum;\n    }\n}\n\nvec3 random_vector()\n{\n    float ang = (rand() - rand()) * PI;\n    float pitch = rand() * PI * 2.;\n    return normalize(vec3(sin(ang) * cos(pitch), sin(pitch), cos(ang) * cos(pitch)));\n}\n\nvec3 diffuse_vector(vec3 normal)\n{\n    vec3 rv = random_vector();\n    if(dot(rv, normal) <= 0.)\n        rv = reflect(rv, normal);\n    return rv;\n}\n\nvec4 sky_color(vec3 ray)\n{\n    return vec4(0);\n}\n\nbool radiance(vec3 eyepos, vec3 n_ray, out vec3 color)\n{\n    vec3 start = eyepos;\n    vec3 dir = n_ray;\n    \n    bool is_from_inside;\n    int objindex;\n    vec3 castpoint;\n    vec3 castnormal;\n    vec2 castuv;\n    float castdist;\n    \n    if(pick_object(start, dir, true,\n\t\tis_from_inside, objindex, castpoint, castnormal, castuv, castdist) == false)\n    \treturn false;\n    \n    vec3 color_mask = g_Objects[objindex].color;\n    vec3 color_emissive = g_Objects[objindex].emissive;\n    \n    for(int i = 0; i < DEPTH; i++)\n    {\n        start = castpoint;\n        color_emissive += g_Objects[objindex].emissive * color_mask;\n        color_mask *= g_Objects[objindex].color;\n        \n        if(rand() >= g_Objects[objindex].specular)\n        {\n#if PREDICT_NEXT_MOVEMENT\n            if(i == DEPTH-1)\n            {\n                int ls = select_lightsource();\n                dir = g_Objects[ls].shape.p - castpoint;\n                if(dot(dir, castnormal) >= 0.)\n                    dir = normalize(dir);\n                else\n                    dir = diffuse_vector(castnormal);\n            }\n            else\n#endif\n            dir = diffuse_vector(castnormal);\n        }\n        else\n            dir = reflect(dir, castnormal);\n        \n        if(pick_object(start, dir, true,\n\t\t\tis_from_inside, objindex, castpoint, castnormal, castuv, castdist) == false)\n    \t\tbreak;\n    }\n    \n    color = sky_color(dir).rgb * color_mask + color_emissive;\n\n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tseed = iTime + iResolution.y * fragCoord.x / iResolution.x + fragCoord.y / iResolution.y;\n    Scene_Init();\n    \n\tvec2 xy = (fragCoord.xy - iResolution.xy * .5) / iResolution.y;\n    \n    vec2 mouse_rotation = ((iMouse.xy - iResolution.xy / 2.) / iResolution.y) * PI;\n    if(length(iMouse) < 0.000001) mouse_rotation = vec2(0);\n    \n    mat3 RotMat = RotXAxis(-mouse_rotation.y)\n        * RotYAxis(mouse_rotation.x);\n    \n    vec3 ray = normalize(vec3(xy, 1) * RotMat);\n    \n    vec4 color = vec4(0,0,0,1);\n    bool hit = false;\n    for(int i = 0; i < SAMPLES; i++)\n    {\n        vec3 c;\n    \thit = radiance(eyepos, ray, c);\n        color.xyz += c;\n    }\n    if(hit)\n\t    color.xyz /= vec3(SAMPLES);\n    else\n        color = sky_color(ray);\n    \n    color = vec4\n    (\n        color.r + (((color.r + color.g + color.b) / 3.)-.5) * .01,\n        color.g + (((color.r + color.g + color.b) / 3.)-.5) * .01,\n        color.b + (((color.r + color.g + color.b) / 3.)-.5) * .01,\n        color.a\n    );\n    \n    if(iTimeDelta < POV)\n    {\n        float ratio = iTimeDelta / POV;\n        color = color * ratio + texture(iChannel0,fragCoord / iResolution.xy) * (1. - ratio);\n    }\n    \n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define POV (1./1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 avrlum = vec4(0);\n    float num_points = 0.;\n    for(float y = 0.5; y < iResolution.y; y += iResolution.y / 10.)\n    {\n        for(float x = 0.5; x < iResolution.x; x += iResolution.x / 10.)\n        {\n            avrlum += texture(iChannel0, (vec2(x,y) + fragCoord * 10./ iResolution.xy) / iResolution.xy);\n            num_points ++;\n        }\n    }\n\n    avrlum /= num_points;\n\n    if(iTimeDelta < POV)\n    {\n        float ratio = iTimeDelta / POV;\n        avrlum = avrlum * ratio + texture(iChannel1,vec2(0)).r * (1. - ratio);\n    }\n    fragColor = avrlum;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define HDR_MINLUM 1.\n#define HDR_MAXLUM 20.\n\n#define LBLUR_H 20\n#define LBLUR_DIFFUSION 40.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    vec4 avrlum = texture(iChannel1,fragCoord / iResolution.xy);\n    float rgblum = avrlum.r + avrlum.g + avrlum.b;\n    for(int i = -LBLUR_H; i <= LBLUR_H; i++)\n    {\n        vec4 samp = texture(iChannel0, (fragCoord - vec2(i, 0) * LBLUR_DIFFUSION / vec2(LBLUR_H)) / iResolution.xy);\n        color += samp;\n    }\n    rgblum = min(HDR_MAXLUM, max(HDR_MINLUM, rgblum));\n    fragColor = color / vec4(LBLUR_H * 2 + 1) / (rgblum * 8. / 3.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define HDR_MINLUM 1.\n#define HDR_MAXLUM 20.\n\n#define BLUR_H 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    vec4 avrlum = texture(iChannel1,fragCoord / iResolution.xy);\n    float rgblum = avrlum.r + avrlum.g + avrlum.b;\n    for(int i = -BLUR_H; i <= BLUR_H; i++)\n    {\n        color += texture(iChannel0, (fragCoord - vec2(i, 0)) / iResolution.xy);\n    }\n    rgblum = min(HDR_MAXLUM, max(HDR_MINLUM, rgblum));\n    color = color / vec4(BLUR_H * 2 + 1);\n    color = color / (rgblum * 2./ 3.);\n    \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}