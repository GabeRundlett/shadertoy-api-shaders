{
    "Shader": {
        "info": {
            "date": "1482760790",
            "description": "A simple mix between a iteration-coloured julia fractal and a orbit-trapped coloured julia.\nGlitch effect is from Eethe : https://www.shadertoy.com/view/4t23Rc",
            "flags": 32,
            "hasliked": 0,
            "id": "llyXRh",
            "likes": 12,
            "name": "Mixed coloured Julia",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia",
                "orbittrapped"
            ],
            "usePreview": 1,
            "username": "maeln",
            "viewed": 1006
        },
        "renderpass": [
            {
                "code": "#define AMPLITUDE 0.2\n#define SPEED 0.05\n\nvec4 rgbShift( in vec2 p , in vec4 shift) {\n    shift *= 2.0*shift.w - 1.0;\n    vec2 rs = vec2(shift.x,-shift.y);\n    vec2 gs = vec2(shift.y,-shift.z);\n    vec2 bs = vec2(shift.z,-shift.x);\n    \n    float r = texture(iChannel0, p+rs, 0.0).x;\n    float g = texture(iChannel0, p+gs, 0.0).y;\n    float b = texture(iChannel0, p+bs, 0.0).z;\n    \n    return vec4(r,g,b,1.0);\n}\n\nvec4 noise( in vec2 p ) {\n    return texture(iChannel1, p, 0.0);\n}\n\nvec4 vec4pow( in vec4 v, in float p ) {\n    // Don't touch alpha (w), we use it to choose the direction of the shift\n    // and we don't want it to go in one direction more often than the other\n    return vec4(pow(v.x,p),pow(v.y,p),pow(v.z,p),v.w); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec4 c = vec4(0.0,0.0,0.0,1.0);\n    \n    // Elevating shift values to some high power (between 8 and 16 looks good)\n    // helps make the stuttering look more sudden\n    vec4 shift = vec4pow(noise(vec2(SPEED*iTime,2.0*SPEED*iTime/25.0 )),8.0)\n        \t\t*vec4(AMPLITUDE,AMPLITUDE,AMPLITUDE,1.0);\n    \n    c += rgbShift(p, shift);\n    \n\tfragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAXITER 64\n\n// * op for complex number.\nvec2 cmul(vec2 i1, vec2 i2) \n{\n    return vec2(i1.x*i2.x - i1.y*i2.y, i1.y*i2.x + i1.x*i2.y);\n}\n\nint julia(vec2 z, vec2 c)\n{\n    int i = 0;\n    vec2 zi = z;\n    \n    for(int n=0; n < MAXITER; ++n)\n    {\n        if(dot(zi,zi) > 4.0)\n            break;\n        i++;\n        zi = cmul(zi,zi) + c;\n        \n    }\n    \n    return i;\n}\n\nvec4 gen_color(int iter)\n{\n    vec3 c1 = vec3(1.0,1.0,1.0);\n    vec3 c3 = vec3(0.0,0.3,0.6);\n    vec3 c2 = vec3(0.0,0.6,0.3);\n    vec3 m = vec3(float(iter)/float(MAXITER));\n    vec3 base = mix(c1,mix(c2,c3,m),m);\n    return vec4(base,1.0);\n}\n\nvec3 julia2(vec2 z, vec2 c)\n{\n    int i = 0;\n    vec2 zi = z;\n    \n    float trap1 = 10e5;\n    float trap2 = 10e5;\n    \n    for(int n=0; n < MAXITER; ++n)\n    {\n        if(dot(zi,zi) > 4.0)\n            break;\n        i++;\n        zi = cmul(zi,zi) + c;\n\t\t\n        // Orbit trap\n        trap1 = min(trap1, sqrt(zi.x*zi.y));\n        trap2 = max(trap2, sqrt(zi.y*zi.y));\n    }\n    \n    return vec3(i,trap1,trap2);\n}\n\nvec4 gen_color2(vec3 iter)\n{\n    float t1 = 1.0+log(iter.y)/4.0;\n    float t2 = 1.0+log(iter.z)/8.0;\n    float t3 = t1/t2;\n    \n    //vec3 comp = vec3(t1,t1,t1);\n    vec3 red = vec3(0.9,0.2,0.1);\n    vec3 black = vec3(1.0,1.0,1.0);\n    vec3 blue = vec3(0.1,0.2,0.9);\n    vec3 comp = mix(blue,black,vec3(t2));\n    comp = mix(-red, comp,vec3(t1));\n    \n    return vec4(comp, 1.0);\n}\n\n// Remap the OpenGL space to the space where the julia set is defined ( [(-2;-2),(2;2)] ).\nvec2 space(vec2 res, vec2 coord)\n{   \n    // Center the coordinate so that (0,0) is in the center of the screen.\n    vec2 base = (2.*coord.xy - res.xy) / res.x;\n    \n    float zoom = texture(iChannel0, vec2(0,0) ).y;\n    \n    // base*2 so that the range is [-2;2] (the julia set is defined on this range)\n    return base*2.*(1.25-zoom/4.0);\n}\n\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = space(iResolution.xy, fragCoord.xy);\n    \n    int iter1 = julia(z, vec2(cos(iTime/5.0), mix(0.0, 0.3, sin(iTime))));\n    vec3 iter2 = julia2(z, vec2(cos(iTime/5.0), mix(0.0, 0.3, sin(iTime))));\n\tvec4 col1 = gen_color(iter1);\n    vec4 col2 = gen_color2(iter2);\n    \n    vec2 base = (2.*fragCoord.xy - iResolution.xy) / iResolution.x;\n    float st = texture(iChannel0, vec2(0,0) ).y;\n    \n    float time = sin(iTime/10.0);\n    fragColor = mix(col1, col2, map(time, 0.3, 0.7, 0.0, 1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}