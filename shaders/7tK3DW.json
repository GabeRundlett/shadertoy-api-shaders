{
    "Shader": {
        "info": {
            "date": "1637758941",
            "description": "wanted to make a grid of arrows, then got distracted",
            "flags": 0,
            "hasliked": 0,
            "id": "7tK3DW",
            "likes": 33,
            "name": "Colored Spiral",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 626
        },
        "renderpass": [
            {
                "code": "float thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nfloat arrow(vec2 uv) {\n    float h = 0.1;\n    h += 0.2 * thc(4.,-40. * length(uv) + 3. * atan(uv.y,uv.x) + iTime);\n    h += 0.5 * (0.5 + 0.5 * thc(2., length(uv)*3. - iTime));\n    float d = sdEquilateralTriangle(uv-vec2(0.,0.25 - h));\n    float s = 1.-smoothstep(-0.4,0.4,d+0.5);\n\n    float d2 = sdBox(uv - vec2(0.,-h), vec2(0.05,0.2));\n    float s2 = 1.-smoothstep(-0.4,0.4,d2);\n    \n    s += s2;\n    return s;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 rot(vec2 uv, float a) {\n    mat2 mat = mat2(cos(a), -sin(a), \n                    sin(a), cos(a));\n    return mat * uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    float a = atan(uv.y, uv.x);\n    float r = log(length(uv));\n    \n    float l = min(1., tanh(0.2 * iTime)/0.95);\n    // 30000000. * a\n    r *= 0.6 + 0.25 * l * thc(1., 3. * a + 2. * length(uv) - iTime);\n\n    //float h = floor(8. * fract(0.1 * iTime)); // do h * a\n    uv = rot(uv, iTime +  7. * a + 3.1415 * cos(9. * r + a - iTime));\n\n    float s = arrow(uv);\n    s *= 1. + 0.3 * s;\n\n    vec3 col = 0.5 * s + s * pal(thc(2., s + 9. * r + a- iTime)  - 0.5 * iTime, vec3(1.), vec3(1.), vec3(1.), cos(s + iTime) * vec3(0.,1.,2.)/3.);\n    //col *= smoothstep(0.,0.1,0.5-length(uv));\n    col = mix(col, vec3(1, .97, .92)*2., smoothstep(0., 3.5, -r));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}