{
    "Shader": {
        "info": {
            "date": "1474995719",
            "description": "Finally fixed transformations.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlKGDm",
            "likes": 2,
            "name": "Wicked",
            "published": 3,
            "tags": [
                "wicked"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "//-----------------SETTINGS-----------------\n\n//#define TIMES_DETAILED (sin(time*32.0)+1.0)\n#define TIMES_DETAILED (1.0+.1*sin(time*PI*1.0))\n#define SPIRAL_BLUR_SCALAR (1.0+.1*sin(time*PI*1.0))\n\n//-----------------USEFUL-----------------\n\n#define MOUSE_X (iMouse.x/iResolution.x)\n#define MOUSE_Y (iMouse.y/iResolution.y)\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS .001\n\n#define circle(x) (vec2(cos(x),sin(time)))\n#define time ((saw(float(__LINE__))+1.0)*(iTime+12345.12345)/PI/2.0)\n#define sphereN(uv) (normalize(vec3((uv).xy, sqrt(clamp(1.0-length((uv)), 0.0, 1.0)))))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\nfloat seedling;\n\nfloat saw(float x)\n{\n    x/= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nfloat cross( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n//-----------------IMAGINARY-----------------\n\nvec2 cmul(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);\n}\n\n//-----------------RENDERING-----------------\nfloat stretch;\nfloat zoom;\n\n\nvec2 mobius(vec2 uv)\n{\n    \n    vec2 quotient = vec2(1.0);\n    const int bends = 4;\n    for(int i = 0; i < bends; i++)\n    {\n       \tfloat iteration = float(i)/float(bends)+seedling;\n        vec2 multa = circle(iteration+time);\n        vec2 offa = circle(iteration*12.0+time)/2.0;\n        vec2 multb = circle(iteration*123.0+time)/3.0;\n        vec2 offb = circle(iteration*1234.0+time)/4.0;\n        vec2 numerator = cmul(uv, multa) + offa;\n        vec2 denominator = cmul(uv, multb) + offb;\n        quotient *= (cdiv(numerator, denominator));\n    }\n    \n    \n\treturn quotient;\n}\nvec2 map(vec2 uv)\n{\n    uv = mobius((uv*2.0-1.0));\n    return vec2(saw(uv.xy));\n}\n\nvec2 iterate(vec2 uv, vec2 dxdy, out float magnification)\n{\n    vec2 a = uv+vec2(0.0, \t\t0.0);\n    vec2 b = uv+vec2(dxdy.x, \t0.0);\n    vec2 c = uv+vec2(dxdy.x, \tdxdy.y);\n\n    vec2 ma = map(a);\n    vec2 mb = map(b);\n    vec2 mc = map(c);\n    \n    magnification = abs(cross(b-a, c-a)/cross(mb-ma, mc-ma));\n    \n    return map(uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y/iResolution.x;\n   \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    zoom = (1.5+1.0*sin(time));\n    \n   \tconst int max_i = 4;\n    float stretch = 1.0;\n    float ifs = 1.0;\n    float depth = 0.0;\n    float magnification;\n    \n    for(int i = 0; i < max_i; i++)\n    {\n        seedling += fract(float(i)*123456.123456);\n        vec2 next = iterate(uv, .5/iResolution.xy, magnification);\n        float weight = pow(ifs, 1.0/float(i+1));\n        ifs *= log(magnification+1.0);//smoothstep(0.0, 1.0/TIMES_DETAILED, sqrt(1.0/(1.0+magnification)));\n        uv = next*weight+uv*(1.0-weight);\n        depth += log(E+weight);\n    }\n    \n    \n    fragColor = vec4(uv, 0.0, 1.0);\n    \n    //depth /= float(max_i);\n    float shift = time;\n\n    float weight = pow(ifs, 1.0/float(max_i));\n    \n    float stripes = (depth)*(15.0+10.0*sin(time));\n    float black = smoothstep(0.0, .75, saw(stripes));\n    float white = smoothstep(0.75, 1.0, saw(stripes));\n        \n    \n    vec3 final = (\n        \t\t\t\tvec3(cos(depth*PI*2.0+shift),\n                \t  \t\tcos(4.0*PI/3.0+depth*PI*2.0+shift),\n                \t  \t\tcos(2.0*PI/3.0+depth*PI*2.0+shift)\n                 \t\t)*.5+.5\n        \t\t )*black\n        \t\t +white;\n    \n    fragColor = vec4(saw((depth)));\n    \tfragColor = vec4(final, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}