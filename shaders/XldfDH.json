{
    "Shader": {
        "info": {
            "date": "1539471865",
            "description": "Click the screen to see how the particles are oriented in a region.\nuses Golden ratio spiral sampling!\nhttps://www.advancedsciencenews.com/new-liquid-crystal-properties-could-boost-self-healing-materials/\n",
            "flags": 32,
            "hasliked": 0,
            "id": "XldfDH",
            "likes": 11,
            "name": "Liquid Crystal II",
            "published": 3,
            "tags": [
                "simulation",
                "physics"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 988
        },
        "renderpass": [
            {
                "code": "vec2 R;\nvec2 hash(vec2 p) // Dave H\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nfloat intersect (vec2 coes) {\n    float det = coes.x*coes.x-4.*coes.y;\n    if (det < 0.) return 1e4;\n    return 0.5*(-coes.x-sqrt(det));\n}\nfloat ellipse (vec3 p, vec3 d, vec3 a, vec3 b, float r) {\n\ta = p-a;b = p-b;\n    float \n        rr = r*r,\n        ad = dot(a,d),\n        bd = dot(b,d),\n        aa = dot(a,a),\n        bb = dot(b,b);\n    return intersect(vec2(\n    \tad*aa-ad*bb+bd*bb-bd*aa-rr*(ad+bd),\n        -aa*bb+0.25*(aa*aa+bb*bb+rr*rr)+0.5*(aa*bb-rr*(aa+bb))\n    )/(ad*ad+bd*bd-rr-2.*ad*bd));\n}\nvec3 norEllipse (vec3 p, vec3 a, vec3 b) {\n    return normalize(normalize(p-a)+normalize(p-b));\n}\nfloat plane (vec3 p, vec3 d) {\n\treturn  dot(-p,vec3(0,0,1))/dot(d,vec3(0,0,1));\n}\nvec3 O (vec2 U) {return normalize(texture(iChannel0,U/R).xyz);}\nvec3 col (vec3 o) {\n\treturn ( 0.7+0.3*o.z ) *(0.6+0.4*cos(1.+4.*o.yxz))*(0.9+0.3*texture(iChannel2,o).xyz);\n}\nfloat D (vec3 p, vec3 d, vec2 v, float e, inout vec4 color) {\n    \n    vec2 U = floor(p.xy+0.5+v);\n    vec2 h = hash(U)*2.-1.;\n    vec3 o = O(U);\n    U+=.5*h;\n    vec3 q = vec3(U,0),\n         a = q + o,\n         b = q - o;\n    float f = ellipse(p,d,a,b,2.1);\n    if (f < e) {\n    \te = f;\n        p += d*e;\n        vec3 n = norEllipse(p,a,b);\n        float m = dot(n,o);\n        color = dot(n,vec3(0,0,-1))*vec4(col(o),1);\n    }\n    return e;\n}\nvec4 X (vec3 p, vec3 d) {\n\tp += d*plane(p, d);\n\tvec4 color = vec4(0);\n    float e = 1e3;\n    for (int x = -1; x<=1; x++)\n    for (int y = -1; y<=1; y++)\n        e = D (p, d, vec2(x,y), e, color);\n    return color;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n \tU = 2.*(U-0.5*R)/R.y;\n \tvec3 p = vec3(iMouse.xy+19.*U,-1),\n         d = normalize(vec3(U*0.1,1));\n \tC = X(p,d);\n \tvec3 o = O(gl_FragCoord.xy);\n \tif (iMouse.z <1.) C.xyz = col(o);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Orientation\nvec2 R;\nvec2 hash(vec2 p) // Dave H\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 rot (vec3 p, vec3 d) {\n    float t = length(d);\n    if (t==0.)return p;\n    d = normalize(d);\n    vec3 q = p-d*dot(d,p);\n   \treturn p+(q)*(cos(t)-1.) + cross(d,q)*sin(t);\n}\nvec3 O (vec2 U) {return texture(iChannel0,U/R).xyz;}\nvec3 W (vec2 U) {return texture(iChannel1,U/R).zyz;}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n    C.xyz = rot(O(U),W(U));\n \tif (length(C.xyz)==0.) C.xyz = vec3(0,0,1);\n \tvec3 ne = .25*(\n        O(U+vec2(0, 1))+\n        O(U+vec2(0,-1))+\n        O(U+vec2( 1,0))+\n        O(U+vec2(-1,0))\n        \n    );\n \tC.xyz = mix(C.xyz,ne,0.1);\n \tfloat w = 0.005;\n \tC.xyz = normalize(C.xyz)*w;\n \n if (iFrame < 1) {\n     C = vec4(0,0,1,0);\n \tif (sin(0.03*U.x)*cos(0.03*U.y)>.99) C.xyz = vec3(-cos(U.y),sin(U.x),-1);\n }\n \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Angular momentum\nvec2 R;\nvec2 hash(vec2 p) // Dave H\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 F (vec3 A, vec3 B) {\n    A = A-B;\n\treturn A/dot(A,A)/length(A);\n}\nvec3 T (vec3 a, vec3 b, vec3 A, vec3 B) {\n\tvec3\n        ap = a+A,\n        an = a-A,\n        bp = b+B,\n        bn = b-B,\n        Fp = F(ap,bp)-F(ap,bn),\n        Fn = F(an,bn)-F(an,bp);\n    return cross(A,Fp)-cross(A,Fn);\n}\nvec3 O (vec2 U) {return texture(iChannel0,U/R).xyz;}\nvec3 W (vec2 U) {return texture(iChannel1,U/R).zyz;}\nvec3 S (vec2 U) {\n\tvec3 \n        t = vec3(0),\n        o = O(U);\n    float ra = hash(U+iTime).x;\n    for (float i = 0.; i < 20.; i++)\n    {\n        vec2 u = vec2(10.3 - 0.05*i, 10.*(i+ra)*1.61803398875);\n        u = u.x*vec2(cos(u.y),sin(u.y));\n     \tu+=U;\n    \tt += T(vec3(U,0),vec3(u,0),o,O(u));\n    }\n\treturn W(U) + 100.*t;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n    C.xyz = S(U);\n \tvec3 ne = 0.25*(\n        W(U+vec2(0, 1))+\n        W(U+vec2(0,-1))+\n        W(U+vec2( 1,0))+\n        W(U+vec2(-1,0))\n    );\n \tC.xyz = mix(C.xyz,ne,.5);\n \tif (length(C.xyz)>.2)C.xyz=normalize(C.xyz)*0.2;\n \tif (iFrame < 1) C = vec4(0,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Orientation\nvec2 R;\nvec2 hash(vec2 p) // Dave H\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 rot (vec3 p, vec3 d) {\n    float t = length(d);\n    if (t==0.)return p;\n    d = normalize(d);\n    vec3 q = p-d*dot(d,p);\n   \treturn p+(q)*(cos(t)-1.) + cross(d,q)*sin(t);\n}\nvec3 O (vec2 U) {return texture(iChannel0,U/R).xyz;}\nvec3 W (vec2 U) {return texture(iChannel1,U/R).zyz;}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n    C.xyz = rot(O(U),W(U));\n \tif (length(C.xyz)==0.) C.xyz = vec3(0,0,1);\n \tvec3 ne = .25*(\n        O(U+vec2(0, 1))+\n        O(U+vec2(0,-1))+\n        O(U+vec2( 1,0))+\n        O(U+vec2(-1,0))\n        \n    );\n \tC.xyz = mix(C.xyz,ne,0.1);\n \tfloat w = 0.005;\n \tC.xyz = normalize(C.xyz)*w;\n \n if (iFrame < 1) {\n     C = vec4(0,0,1,0);\n \tif (sin(0.03*U.x)*cos(0.03*U.y)>.99) C.xyz = vec3(-cos(U.y),sin(U.x),-1);\n }\n \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Angular momentum\nvec2 R;\nvec2 hash(vec2 p) // Dave H\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec3 F (vec3 A, vec3 B) {\n    A = A-B;\n\treturn A/dot(A,A)/length(A);\n}\nvec3 T (vec3 a, vec3 b, vec3 A, vec3 B) {\n\tvec3\n        ap = a+A,\n        an = a-A,\n        bp = b+B,\n        bn = b-B,\n        Fp = F(ap,bp)-F(ap,bn),\n        Fn = F(an,bn)-F(an,bp);\n    return cross(A,Fp)-cross(A,Fn);\n}\nvec3 O (vec2 U) {return texture(iChannel0,U/R).xyz;}\nvec3 W (vec2 U) {return texture(iChannel1,U/R).zyz;}\nvec3 S (vec2 U) {\n\tvec3 \n        t = vec3(0),\n        o = O(U);\n    float ra = hash(U+iTime).x;\n    for (float i = 0.; i < 20.; i++)\n    {\n        vec2 u = vec2(8.7 - 0.05*i, 10.*(i+ra)*1.61803398875);\n        u = u.x*vec2(cos(u.y),sin(u.y));\n     \tu+=U;\n    \tt += T(vec3(U,0),vec3(u,0),o,O(u));\n    }\n\treturn W(U) + 100.*t;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n    C.xyz = S(U);\n \tvec3 ne = 0.25*(\n        W(U+vec2(0, 1))+\n        W(U+vec2(0,-1))+\n        W(U+vec2( 1,0))+\n        W(U+vec2(-1,0))\n    );\n \tC.xyz = mix(C.xyz,ne,.5);\n \tif (length(C.xyz)>.2)C.xyz=normalize(C.xyz)*0.2;\n \tif (iFrame < 1) C = vec4(0,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}