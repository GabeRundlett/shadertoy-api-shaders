{
    "Shader": {
        "info": {
            "date": "1591550116",
            "description": "Updated, with a more appropriate color scheme",
            "flags": 0,
            "hasliked": 0,
            "id": "WtlyR4",
            "likes": 11,
            "name": "March of the Androids 2",
            "published": 3,
            "tags": [
                "robot",
                "order"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// \"March of the Androids 2\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec3 sunDir, qHit;\nfloat tCur, dstFar, rAngH, rAngL, rAngA, gDisp;\nint idObj;\nbool walk;\nconst float pi = 3.1415927;\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  vec2 tr;\n  float ti[5], rPath, a, r, tC, tL, tWf, tWb, rDir;\n  bool rotStep;\n  rPath = 34.;\n  tC = pi * rPath / 8.;\n  tL = 2. * rPath / 5.;\n  tWf = 4.;\n  tWb = 2.;\n  rotStep = false;\n  ti[0] = 0.;\n  ti[1] = ti[0] + tWf;\n  ti[2] = ti[1] + tL;\n  ti[3] = ti[2] + tWb;\n  ti[4] = ti[3] + tC;\n  p.y = 1.;\n  rDir = 2. * floor (mod (t / ti[4], 2.)) - 1.;\n  t = mod (t, ti[4]);\n  tr = vec2 (0.);\n  if (t < ti[1]) {\n    tr.y = rPath;\n  } else if (t < ti[2]) {\n    tr.y = rPath - 2. * rPath * (t - ti[1]) / (ti[2] - ti[1]);\n  } else if (t < ti[3]) {\n    tr.y = - rPath;\n  } else {\n    rotStep = true;\n    a = 1.5 - rDir * (t - ti[3]) / (ti[4] - ti[3]);\n    r = rPath;\n  }\n  if (rotStep) {\n    a *= pi;\n    p.xz = r * vec2 (cos (a), sin (a));\n  } else {\n    p.xz = tr;\n  }\n  p.xz -= 2.5;\n  return p;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, pp;\n  vec2 ip;\n  float dMin, d, bf, hGap, bFac, ah;\n  int objType;\n  hGap = 2.5;\n  bf = PrBoxDf (p, vec3 (9. * hGap, 6., 9. * hGap));\n  pp = p;\n  ip = floor ((pp.xz + hGap) / (2. * hGap));\n  pp.xz = pp.xz - 2. * hGap * ip;\n  objType = (ip.x == 0. && ip.y == 4.) ? 20 : 10;\n  bFac = (objType == 20) ? 1.6 : 1.;\n  ah = rAngH * (walk ? sign (1.1 - bFac) : - step (1.1, bFac));\n  dMin = dstFar;\n  q = p;\n  d = q.y + 1.;\n  DMINQ (1);\n  q = pp;\n  q.y -= 1.2;\n  d = max (PrSphDf (q, 0.85), - q.y);\n  d = max (d, bf);\n  DMINQ (objType + 1);\n  q = pp;\n  q.y -= 0.55;\n  d = PrRoundCylDf (q.xzy, 0.9, 0.28, 0.7);\n  d = max (d, bf);\n  DMINQ (objType + 1);\n  q = pp;\n  q.x = abs (q.x) - 0.4;\n  q.yz = Rot2D (q.yz, - rAngL * sign (pp.x));\n  q.y -= -0.525;\n  d = PrRoundCylDf (q.xzy, 0.25, 0.15, 0.55);\n  d = max (d, bf);\n  DMINQ (objType + 1);\n  q = pp;\n  q.xz = Rot2D (q.xz, ah);\n  if (bFac > 1.) {\n    q.xz = Rot2D (q.xz, 2. * pi * floor (6. * atan (q.z, - q.x) / (2. * pi) + 0.5) / 6.);\n    q.x += 0.4;\n  } else {\n    q.x = abs (q.x) - 0.4;\n  }\n  q.y -= 2.;\n  q.xy = Rot2D (q.xy, -0.2 * pi * sign (bFac - 1.1));\n  q.y -= 0.2 * (2. * bFac - 1.);\n  d = PrRoundCylDf (q.xzy, 0.06, 0.04, 0.4 * (2. * bFac - 1.));\n  d = max (d, bf);\n  DMINQ (objType + 2);\n  q = pp;\n  q.x = abs (q.x) - 1.05;\n  q.y -= 1.1;\n  q.yz = Rot2D (q.yz, rAngA * (walk ? sign (pp.x) : 1.));\n  q.y -= -0.6;\n  d = PrRoundCylDf (q.xzy, 0.2, 0.15, 0.6);\n  d = max (d, bf);\n  DMINQ (objType + 3);\n  q = pp;\n  q.xz = Rot2D (q.xz, ah);\n  q.x = abs (q.x) - 0.4;\n  q -= vec3 (0., 1.6 + 0.3 * (bFac - 1.), 0.7 - 0.3 * (bFac - 1.));\n  d = PrSphDf (q, 0.15 * bFac);\n  d = max (d, bf);\n  DMINQ (objType + 4);\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ChqPat (vec3 p, float dHit)\n{\n  vec2 q, iq;\n  float f, s;\n  p.z += gDisp;\n  q = p.xz + vec2 (0.5, 0.25);\n  iq = floor (q);\n  s = 0.5 + 0.5 * Noisefv2 (q * 107.);\n  if (2. * floor (iq.x / 2.) != iq.x) q.y += 0.5;\n  q = smoothstep (0., 0.02, abs (fract (q + 0.5) - 0.5));\n  f = dHit / dstFar;\n  return s * (1. - 0.9 * exp (-2. * f * f) * (1. - q.x * q.y));\n}\n\nvec3 ObjCol (vec3 rd, vec3 vn, float dHit)\n{\n  vec3 col;\n  int idObjP;\n  idObjP = idObj;\n  if (idObjP == 1) {\n    col = mix (vec3 (0.2, 0.3, 0.2), vec3 (0.3, 0.3, 0.35),\n       (0.5 + 0.5 * ChqPat (qHit / 5., dHit)));\n  } else if (idObjP > 20) {\n    idObjP -= 20;\n    if (idObjP == 1 || idObjP == 2 || idObjP == 3) col = vec3 (1., 0.7, 0.1);\n    else if (idObjP == 4) col = vec3 (0.3, 1., 0.1);\n  } else if (idObjP > 10) {\n    idObjP -= 10;\n    if (idObjP == 1) col = vec3 (0.05);\n    else if (idObjP == 2) col = (qHit.y > 0.) ? vec3 (1.) : vec3 (0.05);\n    else if (idObjP == 3) col = (qHit.y < 0.) ? vec3 (1.) : vec3 (0.05);\n    else if (idObjP == 4) col = vec3 (1., 0.1, 0.1);\n  }\n  return col * (0.3 + 0.7 * max (dot (vn, sunDir), 0.)) +\n     0.3 * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    col = vec3 (0.1) + 0.2 * pow (1. - max (rd.y, 0.), 8.);\n    col = mix (col, vec3 (1.), clamp (0.1 + 1.5 * Fbm2 (0.05 * (ro.xz +\n       rd.xz * (50. - ro.y) / rd.y)) * rd.y, 0., 1.));\n  } else {\n    col = mix (vec3 (0.6, 0.5, 0.3), 0.9 * (vec3 (0.1) + 0.2) + 0.1, pow (1. + rd.y, 5.));\n  }\n  col *= vec3 (1., 0.7, 0.7);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, c;\n  float dstHit, tCyc, refl, spd;\n  spd = 0.7;\n  tCyc = mod (spd * tCur, 7.);\n  if (tCyc < 4.) {\n    walk = true;\n    tCyc = mod (tCyc, 1.);\n    gDisp = mod (spd * tCur, 1.);\n    rAngH = -0.7 * sin (2. * pi * tCyc);\n    rAngA = 1.1 * sin (2. * pi * tCyc);\n    rAngL = 0.6 * sin (2. * pi * tCyc);\n  } else {\n    walk = false;\n    tCyc = mod (tCyc, 1.);\n    gDisp = 0.;\n    rAngH = 0.4 * sin (2. * pi * tCyc);\n    rAngA = 2. * pi * (0.5 - abs (tCyc - 0.5)); \n    rAngL = 0.;\n  }\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    col = ObjCol (rd, vn, dstHit);\n    if (idObj != 1) {\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      refl = 0.2 + 0.3 * pow (1. - dot (vn, rd), 4.);\n      dstHit = ObjRay (ro, rd);\n      if (dstHit < dstFar) {\n        ro += rd * dstHit;\n        c = ObjCol (rd, ObjNf (ro), dstHit);\n      } else {\n        c = BgCol (ro, rd);\n      }\n      col = mix (col, c, refl);\n    }\n    col *= ObjSShadow (ro, sunDir);\n  } else {\n    col = BgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 col, ro, rd, vd, u;\n  vec2 canvas, uv;\n  float f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  ro = TrackPath (tCur);\n  vd = normalize (vec3 (0., 2., 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, 2.2));\n  dstFar = 150.;\n  sunDir = normalize (vec3 (1., 2., 1.));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float s, hz;\n  s = length (p.xy) - r;\n  hz = abs (p.z) - h;\n  return min (min (max (s + rt, hz), max (s, hz + rt)), length (vec2 (s, hz) + rt) - rt);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}