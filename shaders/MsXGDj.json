{
    "Shader": {
        "info": {
            "date": "1379355206",
            "description": "Just some basic curve fitting algorithms. If I've got anything wrong, or you'll like to add some other splines, please comment below. :)  I think Catmull-Rom wins the best curve so far.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsXGDj",
            "likes": 115,
            "name": "Curve fitting",
            "published": 3,
            "tags": [
                "curvefitting"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 14432
        },
        "renderpass": [
            {
                "code": "//#define Use_Linear\n//#define Use_Cosine\n//#define Use_Smoothstep\n//#define Use_Smoothstep2\n//#define Use_Cubic\n//#define Use_Hermite\n//#define Use_ThirdOrderSpline\n#define Use_Catmull_Rom\n//#define Centripetal_Catmull_Rom\n\n// Most of these functions use the following format:\n\n// v0----v1--x--v2----v3\n\n// Where 'x' is the fractional diff between v1 and v2.\n\n//--------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat Hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//--------------------------------------------------------------------------------\nfloat Cubic(float x, float v0,float v1, float v2,float v3) \n{\n\tfloat p = (v3 - v2) - (v0 - v1);\n\treturn p*(x*x*x) + ((v0 - v1) - p)*(x*x) + (v2 - v0)*x + v1;\n}\n\n//--------------------------------------------------------------------------------\nfloat Catmull_Rom(float x, float v0,float v1, float v2,float v3) \n{\n\tfloat c2 = -.5 * v0\t+ 0.5*v2;\n\tfloat c3 = v0\t\t+ -2.5*v1 + 2.0*v2 + -.5*v3;\n\tfloat c4 = -.5 * v0\t+ 1.5*v1 + -1.5*v2 + 0.5*v3;\n\treturn(((c4 * x + c3) * x + c2) * x + v1);\n\t\n//\tOr, the same result with...\n//\tfloat x2 = x  * x;\n//\tfloat x3 = x2 * x;\n//\treturn 0.5 * ( ( 2.0 * v1) + (-v0 + v2) * x +\n//                  (2.0 * v0 - 5.0 *v1 + 4.0 * v2 - v3) * x2 +\n//                  (-v0 + 3.0*v1 - 3.0 *v2 + v3) * x3);\n}\n\nfloat Centripetal_Catmull_Rom_Coefficient(float x, float p0,float p1, float p2,float p3) \n{\n\tfloat a = p1;\n\tfloat b = 0.5 * (p2 - p0);\n\tfloat c = p0 - 2.5 * p1 + 2.0 * p2 - 0.5 * p3;\n        float d = 1.5 * (p1 - p2) + 0.5 * (p3 - p0);\n\treturn(a + x*(b + x*(c + x*d)));\n}\n\n\n//--------------------------------------------------------------------------------\nfloat ThirdOrderSpline(float x, float L1,float L0, float H0,float H1) \n{\n\treturn \t\t  L0 +.5 *\n\t\t\tx * ( H0-L1 +\n\t\t\tx * ( H0 + L0 * -2.0 +  L1 +\n\t\t\tx * ((H0 - L0)* 9.0\t + (L1 - H1)*3.0 +\n\t\t\tx * ((L0 - H0)* 15.0 + (H1 - L1)*5.0 +\n\t\t\tx * ((H0 - L0)* 6.0\t + (L1 - H1)*2.0 )))));\n}\n\n//--------------------------------------------------------------------------------\nfloat Cosine(float x, float v0, float v1) \n{\n\tx = (1.0-cos(x*3.1415927)) * .5;\n\treturn (v1-v0)*x + v0;\n}\n\n//--------------------------------------------------------------------------------\nfloat Linear(float x, float v0, float v1) \n{\n\treturn (v1-v0)*x + v0;\n}\n\n//--------------------------------------------------------------------------------\nfloat Smoothstep(float x, float v0, float v1) \n{\n\tx = x*x*(3.0-2.0*x);\n\treturn (v1-v0)*x + v0;\n}\n\n//--------------------------------------------------------------------------------\nfloat Smoothstep2(float x, float v0, float v1) \n{\n    x = x*x*x*(x*(x*6.0-15.0)+10.0);\n    return (v1-v0)*x + v0;\n}\n\n//--------------------------------------------------------------------------------\nfloat Hermite(float x, float a, float b, float c, float d)\n{\n    float e = c-b;\n    float f = a-d;\n    return(b+.5*x*(e+b-a+x*(a-b+e+x*3.*(e*3.+f+x*5./3.*(-e*3.-f+x*.4*(e*3.+f))))));\n}\n\n//================================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n\t\n\tfloat pos = (iTime*.5 +uv.x) * 6.0;\n\tfloat x  = fract(pos);\n\tfloat v0 = Hash(floor(pos));\n\tfloat v1 = Hash(floor(pos)+1.0);\n\tfloat v2 = Hash(floor(pos)+2.0);\n\tfloat v3 = Hash(floor(pos)+3.0);\n\tfloat f;\n\t\n#ifdef Use_Linear\n\tf = Linear(x, v1, v2);\n#elif defined Use_Cosine\n\tf = Cosine(x, v1, v2);\n#elif defined Use_Smoothstep\n\tf = Smoothstep(x, v1, v2);\n#elif defined Use_Smoothstep2\n\tf = Smoothstep2(x, v1, v2);\n#elif defined Use_Cubic\n\tf = Cubic(x, v0, v1, v2, v3);\n#elif defined Use_Catmull_Rom\n\tf = Catmull_Rom(x, v0, v1, v2, v3);\n#elif defined  Centripetal_Catmull_Rom\nf = Centripetal_Catmull_Rom_Coefficient(x, v0, v1, v2, v3);\n#elif defined Use_ThirdOrderSpline\n\tf = ThirdOrderSpline(x, v0, v1, v2, v3);\n#elif defined Use_Hermite\n\tf = Hermite(x, v0, v1, v2, v3);\n    \n#endif\n//--------------------------------------------------------------------------------\n\n\t// Blobs...\n\tf = .02 / abs(f-uv.y);\n\tfloat d = .03/length((vec2(((uv.x)/9.0*.25), uv.y)-vec2(x+.03, v1)) * vec2(.25,1.0));\n\tf = max(f, d*d);\n\td = .03/length((vec2(((uv.x)/9.0*.25), uv.y)-vec2(x-.97, v2)) * vec2(.25,1.0));\n\tf = max(f, d*d);\n\n\tfragColor = vec4(vec3(1.0,.2, .05) * f, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}