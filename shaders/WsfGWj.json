{
    "Shader": {
        "info": {
            "date": "1547462984",
            "description": "Loading Screen for terra metaphysics\n\nHeavily based off of a shader created by xjorma\nhttps://www.shadertoy.com/view/tslGWr",
            "flags": 1,
            "hasliked": 0,
            "id": "WsfGWj",
            "likes": 24,
            "name": "Terra Loading Screen",
            "published": 3,
            "tags": [
                "trippy"
            ],
            "usePreview": 0,
            "username": "kdinev",
            "viewed": 6425
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define Radius1 28.0\n#define Radius2 3.0\n#define AA\n#define Speed1\t1.0/50.0\n#define Speed2\t5.0\n#define Speed3\t0.0\n\n// Include code borrowed from IQ\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\nfloat map(in vec3 pos)\n{\n    vec3 q = pos;\n    float d = -sdTorus( q.xzy, vec2(Radius1,Radius2) ) ;\n    \n    return d;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n\n\n\nvec3 applyFog( in vec3  rgb, in float distance, in float strength )\n{\n    float fogAmount = 1.0 - exp( -distance*strength );\n    vec3  fogColor  = vec3(0.0);\n    return mix( rgb, fogColor, fogAmount );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    ro += vec3(0.0,Radius1,0);\n    rd = rd.zxy;\n    \n\n    float t = 0.5;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 p = ro + t*rd;\n        float h = map(p);\n        if( abs(h)<0.001 ) break;\n        t += h;\n    }\n\n    vec3 p = ro + t*rd;\n    float theta = (atan(p.x,p.y)/PI + 1.0)*150.0 - iTime*Speed2;\n    int tata = int(theta);\n    //float incPhi = (tata&1)==0?iTime*Speed3:-iTime*Speed3;\n    float phi   = (atan(length(p.xy)-Radius1,p.z)/PI + 1.0)*30.0; // + incPhi;\n    float itheta = floor(theta);\n    float iphi\t = floor(phi);\n    float ftheta = theta - itheta;\n    float fphi\t = phi - iphi;\n    ftheta = clamp(ftheta * 0.6 + 0.2,0.0,1.0);\n    fphi = clamp(fphi * 0.8 + 0.1,0.0,1.0);\n    vec4  rand = texture( iChannel1,vec2(iphi,itheta)*0.386557);\n    float digit = floor(rand.r * 10.0);\n    float freq = texture( iChannel2,vec2(rand.g,0.25)*0.386557).r;\n\n\n    digit = mod(digit + (freq > 0.2?1.0:0.0),10.0);\n\n    vec3 color = vec3(smoothstep( 0.51,0.49,texture( iChannel0,vec2((1.0-ftheta+digit)/8.0,(fphi+12.0)/16.0),-3.).a));\n    color *= vec3(0,2,0);\n    vec3 norm = calcNormal(p);\n    color = applyFog(color,t,0.2*((norm.z*norm.z)/3.0 + 0.1 + clamp(norm.y*0.4,0.0,1.0))); // Hack to dim pixels with lots of aliasing\n    fragColor = vec4(color,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0);\n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; n++ )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif // AA\n \n        vec3 ro = vec3(0);\n        vec3 rd = normalize(vec3(p,-1.0));\n        \n        vec4 color;\n        mainVR( color,fragCoord,ro,rd );\n        tot += color.xyz;\n        \n\n#ifdef AA\n    }\n    tot /= 4.;\n#endif //AA\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}