{
    "Shader": {
        "info": {
            "date": "1658995351",
            "description": "Seems I can't stop doing truchets at the moment. \nAn evolution from: https://www.shadertoy.com/view/NdKfW3\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ssyBWt",
            "likes": 5,
            "name": "Another doubled ended truchet",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "// CC0: Another doubled ended truchet\n// Seems I can't stop doing truchets at the moment. \n// An evolution from: https://www.shadertoy.com/view/NdKfW3\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b, float r) {\n  vec2 d = abs(p)-(b-r);\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0)-r;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat cell0(vec2 p, float off, float linew, float dist) {\n  float r = 0.5+off;\n  float b = (1.0-0.2*dist)*r;\n  float d0 = box(p-0.5, vec2(r), b); \n  float d1 = box(p+0.5, vec2(r), b);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - linew;\n  return d;\n}\n\nfloat cell1(vec2 p, float off, float linew, float dist) {\n  float d0 = abs(p.y-off*-sign(p.x));\n  float d1 = abs(p.x-off*-sign(p.y));\n  float d2 = length(p)-(sqrt(2.0)*2.0)*abs(off);\n  \n  float d = d0;\n  d = min(d, d1);\n  d = pmin(d, d2, 0.2*dist+0.001);\n  d = abs(d) - linew;\n  return d;\n}\n\nfloat truchet_var(float h, float cs, vec2 cp, float off, float linew, float dist) {\n  float hs = h >= 0.5 ? 1.0 : -1.0;\n  cp = hs > 0.0 ? cp : vec2(cp.x, -cp.y);\n\n  float h1 = fract(3677.0*h);\n  if (h1 > 0.1) {\n    return cell0(cp, off*hs*cs, linew, dist);\n  } else {\n    return cell1(cp, off*hs*cs, linew, dist);\n  }\n\n}\n\nvec3 effect(vec2 p) {\n  float hoff0 = 0.5+0.5*sin(0.5*p.x)*sin(0.5*p.y);\n  float hoff1 = 0.5+0.5*cos(0.33*p.x)*cos(0.66*p.y);\n  float dist = 0.0;\n  \n  const float z = 2.5;\n  p *= z;\n\n  vec2 cp = p-0.5;\n  vec2 cn = round(cp);\n  cp -= cn;\n\n  float h0 = hash(cn);\n  float h1 = fract(1667.0*h0);\n  float h2 = fract(8677.0*h0);\n  float cs = mod(cn.x+cn.y, 2.0) >= 1.0 ? -1.0 : 1.0; \n\n  const float off   = 0.1;\n  const float linew = 0.01;\n  const float shade = 10.0;\n  \n  float d0 = truchet_var(h1, cs, cp, off, linew*mix(1.0, 2.0, hoff0), hoff1);\n  float d1 = truchet_var(h2, cs, cp, -off, linew*mix(1.0, 2.0, hoff1), hoff0);\n\n  vec3 col = vec3(0.0);\n  \n  vec3 bcol0 = hsv2rgb(vec3(0.1*TIME+hoff1, 0.9, 1.0));\n  vec3 bcol1 = hsv2rgb(vec3(0.123*TIME+hoff0, 0.9, 1.0));\n  \n  vec3 gcol0 = bcol0*0.0125/max(d0, 0.001); \n  vec3 gcol1 = bcol1*0.0125/max(d1, 0.001); \n\n  float shd0 = smoothstep(0.0, linew*shade, z*d0);\n  float shd1 = smoothstep(0.0, linew*shade, z*d1);\n  \n  if (h0 > 0.5) {\n    col += gcol0; \n    col *= shd1;\n    col += gcol1;\n  } else {\n    col += gcol1;\n    col *= shd0;\n    col += gcol0;\n  }\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  const float r   = 10.0;\n  const float spd = 0.25;\n  p += r*sin(vec2(sqrt(0.5), 1.0)*TIME*spd/r);\n   \n  vec3 col = effect(p);\n  col = aces_approx(col);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}