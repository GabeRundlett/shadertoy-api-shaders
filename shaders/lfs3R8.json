{
    "Shader": {
        "info": {
            "date": "1702763828",
            "description": "Mixed Together  ",
            "flags": 0,
            "hasliked": 0,
            "id": "lfs3R8",
            "likes": 3,
            "name": "Mixed Together ",
            "published": 3,
            "tags": [
                "mixedtogether"
            ],
            "usePreview": 0,
            "username": "kilika",
            "viewed": 175
        },
        "renderpass": [
            {
                "code": "\n\nfloat grayscale(float x) {\n    // Apply a non-linear transformation to x to increase contrast\n    // This example uses a simple quadratic curve for the contrast effect\n    x = clamp(x, 0.0, 1.0); // ensure x is in the range [0, 1]\n    float contrastFactor = 3.5; // adjust this value to increase or decrease contrast\n    x = 0.5 - contrastFactor * (x - 1.5) * (x - 0.5);\n\n    return clamp(x, 0.0, 1.0); // re-clamp x to the range [0, 1]\n}\n\nvec4 colormap(float x) {\n    float gray = grayscale(x);\n    return vec4(gray, gray, gray, 1.0);\n}\n// https://iquilezles.org/articles/warp\n/*float noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float a = textureLod(iChannel0,(p+vec2(0.5,0.5))/256.0,0.0).x;\n\tfloat b = textureLod(iChannel0,(p+vec2(1.5,0.5))/256.0,0.0).x;\n\tfloat c = textureLod(iChannel0,(p+vec2(0.5,1.5))/256.0,0.0).x;\n\tfloat d = textureLod(iChannel0,(p+vec2(1.5,1.5))/256.0,0.0).x;\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}*/\n\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\nconst mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.500000*noise( p + iTime  ); p = mtx*p*2.02;\n    f += 0.031250*noise( p ); p = mtx*p*2.01;\n    f += 0.250000*noise( p ); p = mtx*p*2.03;\n    f += 0.125000*noise( p ); p = mtx*p*2.01;\n    f += 0.062500*noise( p ); p = mtx*p*2.04;\n    f += 0.015625*noise( p + sin(iTime) );\n\n    return f/0.96875;\n}\n\nfloat pattern( in vec2 p )\n{\n\treturn fbm( p + fbm( p + fbm( p ) ) );\n}\n\nfloat glow(vec3 color, float baseRadius, float time, float alpha) {\n    // Calculate the brightness of the color\n    float brightness = dot(color, vec3(0.299, 0.587, 0.114));\n\n    // Sinusoidal variation of the radius\n    float radius = baseRadius + sin(time) * 0.5; // Adjust 0.5 to change the amplitude of the radius variation\n\n    // Adjust glow based on the alpha value from color3\n    float adjustedGlow = brightness * max(radius, 0.0) * alpha;\n\n    return adjustedGlow; // Return the adjusted glow intensity\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Get texture colors\n    vec4 color1 = texture(iChannel0, uv);\n    vec4 color2 = texture(iChannel1, uv);\n    vec4 color3 = texture(iChannel2, uv);\n\tfloat shade = pattern(uv);\n    fragColor = vec4(colormap(shade).rgb, shade);\n/*\n    vec2 uv2 =  (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    for(float i = 1.0; i < 10.0; i++){\n        uv2.x += 0.6 / i * cos(i * 2.5* uv2.y + iTime);\n        uv2.y += 0.6 / i * cos(i * 1.5 * uv2.x + iTime);\n    }\n    \n    vec4 fragColor2 = vec4(vec3(0.1)/abs(sin(iTime-uv2.y-uv2.x)),1.0);\n*/\n    // Mix the two colors based on noise alpha\n    vec4 mixedColor = mix(color1, color2, fragColor);\n\n    // Output the final color\n    // fragColor = mixedColor;\n    vec4 color = vec4(colormap(shade).rgb, shade);\n\n\n    // Calculate glow\n    // Apply the glow effect with sinusoidal radius\n    float glowStrength = glow(mixedColor.rgb, 0.5, iTime, shade ); // Using color3's alpha\n    float glowStrength2 = glow(mixedColor.rgb, 1.5, iTime*2.0, shade ); // Using color3's alpha\n\n    // Apply glow effect\n    vec3 glowColor = mixedColor.rgb + glowStrength *glowStrength2;\n\n    // Final color output\n    fragColor = vec4(glowColor, 1.0);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}