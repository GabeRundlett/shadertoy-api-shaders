{
    "Shader": {
        "info": {
            "date": "1567973465",
            "description": "2D Weird stuff I did for the essenbee guest stream of writing shaders in GLSL: https://www.twitch.tv/essenbee.\n\nIntended as a 2D example of distance functions, domain repetition and other common techniques before moving on to 3D raymarchers.",
            "flags": 0,
            "hasliked": 0,
            "id": "wstGR4",
            "likes": 40,
            "name": "2D Weird stuff for Twitch",
            "published": 3,
            "tags": [
                "2dmandala"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1222
        },
        "renderpass": [
            {
                "code": "#define PI  3.141592654\n#define TAU (2.0*PI)\n\nvec3 saturate(vec3 col) {\n  return clamp(col, 0.0, 1.0);\n}\n\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nvec2 mod2(inout vec2 p, vec2 size)  {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvec2 modMirror2(inout vec2 p, vec2 size) {\n  vec2 halfsize = size*0.5;\n  vec2 c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  p *= mod(c,vec2(2.0))*2.0 - vec2(1.0);\n  return c;\n}\n\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n\n\nfloat mandala_df(float localTime, vec2 p) {\n  vec2 pp = toPolar(p);\n  float a = TAU/64.0;\n  float np = pp.y/a;\n  pp.y = mod(pp.y, a);\n  float m2 = mod(np, 2.0);\n  if (m2 > 1.0) {\n    pp.y = a - pp.y;\n  }\n  pp.y += localTime/40.0;\n  p = toRect(pp);\n  p = abs(p);\n  p -= vec2(0.5);\n  \n  float d = 10000.0;\n  \n  for (int i = 0; i < 4; ++i) {\n    mod2(p, vec2(1.0));\n    float da = -0.2 * cos(localTime*0.25);\n    float sb = box(p, vec2(0.35)) + da ;\n    float cb = circle(p + vec2(0.2), 0.25) + da;\n    \n    float dd = max(sb, -cb);\n    d = min(dd, d);\n    \n    p *= 1.5 + 1.0*(0.5 + 0.5*sin(0.5*localTime));\n    rot(p, 1.0);\n  }\n\n  \n  return d;\n}\n\nvec3 mandala_postProcess(float localTime, vec3 col, vec2 uv) \n{\n  float r = length(uv);\n  float a = atan(uv.y, uv.x);\n  col = clamp(col, 0.0, 1.0);   \n  col=pow(col,mix(vec3(0.5, 0.75, 1.5), vec3(0.45), r)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=sqrt(1.0 - sin(-localTime + (50.0 - 25.0*sqrt(r))*r))*(1.0 - sin(0.5*r));\n  col = clamp(col, 0.0, 1.0);\n  float ff = pow(1.0-0.75*sin(20.0*(0.5*a + r + -0.1*localTime)), 0.75);\n  col = pow(col, vec3(ff*0.9, 0.8*ff, 0.7*ff));\n  col *= 0.5*sqrt(max(4.0 - r*r, 0.0));\n  return clamp(col, 0.0, 1.0);\n}\n\nvec2 mandala_distort(float localTime, vec2 uv) {\n  float lt = 0.1*localTime;\n  vec2 suv = toSmith(uv);\n  suv += 1.0*vec2(cos(lt), sin(sqrt(2.0)*lt));\n//  suv *= vec2(1.5 + 1.0*sin(sqrt(2.0)*time), 1.5 + 1.0*sin(time));\n  uv = fromSmith(suv);\n  modMirror2(uv, vec2(2.0+sin(lt)));\n  return uv;\n}\n\nvec3 mandala_sample(float localTime, vec2 p)\n{\n  float lt = 0.1*localTime;\n  vec2 uv = p;\n  uv *=8.0;\n  rot(uv, lt);\n  //uv *= 0.2 + 1.1 - 1.1*cos(0.1*iTime);\n\n  vec2 nuv = mandala_distort(localTime, uv);\n  vec2 nuv2 = mandala_distort(localTime, uv + vec2(0.0001));\n\n  float nl = length(nuv - nuv2);\n  float nf = 1.0 - smoothstep(0.0, 0.002, nl);\n\n  uv = nuv;\n  \n  float d = mandala_df(localTime, uv);\n\n  vec3 col = vec3(0.0);\n \n  const float r = 0.065;\n\n  float nd = d / r;\n  float md = mod(d, r);\n  \n  if (abs(md) < 0.025) {\n    col = (d > 0.0 ? vec3(0.25, 0.65, 0.25) : vec3(0.65, 0.25, 0.65) )/abs(nd);\n  }\n\n  if (abs(d) < 0.0125) {\n    col = vec3(1.0);\n  }\n\n  col += 1.0 - pow(nf, 5.0);\n  \n  col = mandala_postProcess(localTime, col, uv);;\n  \n  col += 1.0 - pow(nf, 1.0);\n\n  return saturate(col);\n}\n\nvec3 mandala_main(vec2 p) {\n\n  float localTime = iTime + 30.0;\n  vec3 col  = vec3(0.0);\n  vec2 unit = 1.0/iResolution.xy;\n  const int aa = 2;\n  for(int y = 0; y < aa; ++y)\n  {\n    for(int x = 0; x < aa; ++x)\n    {\n      col += mandala_sample(localTime, p - 0.5*unit + unit*vec2(x, y));\n    }\n  }\n\n  col /= float(aa*aa);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = 0.1*iTime;\n  vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n  uv.x *= iResolution.x/iResolution.y;\n\n  vec3 col = mandala_main(uv);\n    \n  fragColor = vec4(col, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}