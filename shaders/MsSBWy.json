{
    "Shader": {
        "info": {
            "date": "1501916861",
            "description": "grey box constrains mouse\nmouse.x sets left    green radius\nmouse.y sets right  green radius (gets pushed)\n\nc.b=blue distance.y , connects (0,0) and (1.1), is smoothstep()-like.\nred circles show where tangent touches circles.\nParametric Lipschitz !!!",
            "flags": 0,
            "hasliked": 0,
            "id": "MsSBWy",
            "likes": 7,
            "name": "lerpSnake() tangent",
            "published": 3,
            "tags": [
                "smoothstep",
                "sawcos",
                "bisymmetry",
                "lerpsnake"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 753
        },
        "renderpass": [
            {
                "code": "/*\nmouse.x sets left  green radius\nmouse.y sets right green radius (gets pushed by mous.x)\n\nc.b=blue distance.y , connects (0,0) and (1.1), is smoothstep()-like.\n\nred circles show where tangent touches circles.\nmax derivative ==lipschitz constant IS A PARAMETER\nc.b=blue distance.y , connects (0,0) and (1.1), is smoothstep()-like.\n\nred circles show where tangent touches circles.\n\nthis is a general case of snake-shaped curves (there the circles always touch,no tangent)\nhttps://www.shadertoy.com/view/ldSBR3\nand \nhttps://www.shadertoy.com/view/lsSfRc\nwhile here a parameter ensures that there is always a tangent.\nthe inverse of that parameter is its max first derivative\n... == its lipschits constant:\n*/\n//maximum derivative should be range [2...1000],\n//sets an upper minimum distance.xy between the 2 red dots.\n#define LipschitzConstant 500.\nconst float inverseLipschitz=1./LipschitzConstant;//used for multiple calculations\n//smallet radius that both circles can have, to avoid a discontinuity at x=0 otr x=1.;\n#define smallestR 0.1\n\n#define ViewZoom 3.\n\n/*\nI think lerpSnake() is smoother than sawCos()\nhttps://www.shadertoy.com/results?query=sawcos\nbut lerpSnake has a few more length()\nbut i have no comparison done yet.\n*/\n\n\n//I ran out of time to optimize this, functions may be a bit messy, not too user friendly.\nfloat Plane(vec2 u, vec3 plane){float d=abs(dot(plane,vec3(u, 1.0))); \n //return fract(d);\n return 1.2 * smoothstep(0.01, .1, d);}\n\n//return Outer tangent lines for two circles , return format is \"tricky\" .z is scalar.\n//inner tangent lines are gotten by negating ONE of the radii.\nvec3 CircleOuterTangents(vec2 pix, vec3 C1, vec3 C2){\n vec3 dx=(C1 - C2)/length(C1.xy-C2.xy);   \n const float s=1.;//sign switches between 2 tangents.\n float r=sqrt(1.-dx.z*dx.z),\n       d=dx.z*dx.x+s*dx.y*r,\n       e=dx.z*dx.y-s*dx.x*r;return vec3(d,e,C1.z-(d*C1.x+e*C1.y));}\n\n#define plot( d) smoothstep(5./iResolution.y,0.,abs(d))\n/*\n//common line segment, always handy to debug\nfloat segment(vec2 p, vec2 a, vec2 b){\n if(a==b)return length(p-a);\n vec2 c=b-a,d=p-a;float e=dot(c,d)/dot(c,c);\n //e=min(e,1.);//makes it an ils.\n //e=max(e,0.);//ils other way around\n e=clamp(e,0.,1.);//makes it a line segment\n return length(d-c*e);}*/\n\n//return distance.y of [u] to line with derivative [d] you do the offset around this function.\nfloat lineY(vec2 u,float d){return u.x*d-u.y;}\n//return distance.y of [u] to unit circle.\nfloat circleY(vec2 u){return sqrt(1.-(u.x*u.x))-u.y-1.;}\n\n\n#define frame(u) (u-.5*iResolution.xy)*ViewZoom/iResolution.y\nvoid mainImage( out vec4 O, in vec2 U ) {\nvec2 u=frame(U),m=frame(iMouse.xy),n=frame(iMouse.zw);\n if(iMouse.z<=0.){m=vec2(.5)+.4*vec2(sin(iTime),sin(iTime)+cos(iTime*.61));}//idle mouse override\n vec3 c=vec3(1);//color accumulator\n vec2 v=abs(u-.5);\n u.x=fract(u.x);\n //2 circle parameters  .z=radius; .xy=centerPos. set by m:\n vec3 c1=vec3(0,0,m.x);//.xy must be ==0., so the whole thing must be shoifted. otherwise too complex?\n vec3 c2=vec3(1,1,1.-m.y);//cicle.xyz .z=radius\n\n //constraining circles so they are smoothstep-like\n const float maxT=inverseLipschitz;//this also sets the max lipschitz constant.   \n c1.z=clamp(c1.z,smallestR,1.-smallestR-maxT);//enforce a minimum radius so the left  border is continuous\n c2.z=clamp(c2.z,maxT,1.-c1.z-maxT);//right circle gets pushed small by left circle\n  //...with derivative==lipschitzConstant=1./maxT\n \n  float grid=(min(fract(u.x),fract(u.y))*.1);//lazy grid\n\n vec2 o1=vec2(0,c1.z);//an offset for the whole thing\n vec2 o2=vec2(0,c2.z);//an offset for the whole thing\n   \n \n //if(c1.z+c2.z<1.){//if there is a tangent to calculate\n  u.x=clamp(u.x,0.,c2.x);//this clamp makes the error cathhing branches obsolete.\n    \n  c.g=min(length(u-c1.xy-o1)-c1.z,length(u-c2.xy+o2)-c2.z);\n  float dd=length(c1.xy-c2.xy);\n  float x=(dd*dd-c1.z*c1.z+c2.z*c2.z)*.5/dd;\n  c.b=length(u)-c1.z+c2.z;\n  c2.z=-c2.z;//toggle to inner crossing tancents by negating second radius.\n  c2.xy-=o1+o2;\n  vec3 ccc=   CircleOuterTangents(u,c1,c2);\n    \n  //2 tangentToCircle Intersections. (tangents only touch, duh!)\n  vec2 i1=-vec2(ccc.x,ccc.y)*ccc.z;                //left  tangent point\n  vec2 i2=-vec2(ccc.x,ccc.y)*ccc.z*c2.z/c1.z+c2.xy;//right tangent point\n //show the 2 points where tangent touches 2 circles in red:\n  c.r=        length(u-i1-o1)-.03;\n  c.r=min(c.r,length(u-i2-o1)-.03);\n  vec2 d=i2-i1;//derivative of tangent\n  c.b=-lineY(u-vec2(i1),d.y/d.x);//distance.y to tangent\n       if(u.x<i1.x)c.b=circleY(-vec2(u.x,u.y)/c1.z)*c1.z+c1.z;  //left of left red circle\n  else if(u.x>i2.x)c.b=circleY(vec2(u.x-c2.x,-u.y+c2.y)/c2.z)*c2.z+c2.z;//right of right red ciecle\n// }\n c.b-=o1.y;\n //if(c.b!=0.)c.b=fract(c.b)/(abs(floor(c.b)-fract(c.b)));\n c.b=fract(c.b);\n //here c.b is a smooth alternative to smoothste(), smoothCos() or sawCos()   \n c.rg=plot(c.rg);\n c.b*=.9;\n u=fract(u);\n float box=smoothstep(.1,-.1,abs(max(v.x,v.y)-.5)); \n c.rg+=vec2(box)*.5;\n c+=vec3(grid)*.1;\n O=vec4(c,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}