{
    "Shader": {
        "info": {
            "date": "1648911189",
            "description": "Wave interference but no diffraction,\nThis is my first experiment with shaders here, not a glsl expert tbh",
            "flags": 0,
            "hasliked": 0,
            "id": "flscWl",
            "likes": 1,
            "name": "Waves displacement",
            "published": 3,
            "tags": [
                "2d",
                "waves",
                "wave",
                "displacement",
                "distortion"
            ],
            "usePreview": 0,
            "username": "henryco",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592654\n\nprecision highp float;\n\n// wave frequency, not Hz\nconst float freq = 30.;\n\n// speed of wave propagation\nconst float speed = 5.;\n\n// power of wave suppresion over distance\nconst float diming = 5.;\n\n// maximum thickness of wave \nconst float window = .25;\n\n// maximum texture displacement value\nconst float maximum = .1;\n\n// add more wave sources here\nconst vec2[] points = vec2[](\n    vec2(.1, .1),\n    vec2(.9, .2),\n    vec2(.3, .4)\n);\n\n// just for visualization purpose, remove it later\nfloat deubgColor(float x) {\n    return .5 * (x + 1.);\n}\n\nfloat suppresion(float len, float power) {\n    return 1. / pow(abs(len) + 1., power);\n}\n\nfloat delta(float duration) {\n    if (sin(duration * iTime) <= 0.)\n        return 0.;\n    return fract(duration * iTime / PI);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float delta = delta(.5);\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.);\n\n    float dAmplitude = 0.;\n    for (int i = 0; i < points.length(); i++) {\n        vec2 center = points[i];\n        vec2 uv = (fragCoord.xy / iResolution.xy) - center;\n        float r = length(uv * ratio);\n\n        float phase = delta * speed;\n        float amplitude = suppresion(r, diming) * cos(freq * (r - phase));        \n        \n        float sx = phase - window;\n        float ex = sx - window;\n\n        if (r > sx || r < ex) {\n            float dist = min(abs(sx - r), abs(ex - r));\n            float sp = 1. - smoothstep(0., window, dist);\n            amplitude *= sp;\n        }\n        dAmplitude += amplitude;\n    }\n\n    \n    float displace_k  = dAmplitude * maximum;\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    vec2 displaced_uv = vec2(uv.xy + displace_k);\n\n    fragColor = texture(iChannel0, displaced_uv);\n    \n    // just for visualization purpose, remove it later\n    if (uv.x < 0.5) fragColor = vec4(vec3(deubgColor(dAmplitude)), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}