{
    "Shader": {
        "info": {
            "date": "1595529967",
            "description": "a cellular automata I made a long time ago\ni don't remember the idea behind it !",
            "flags": 32,
            "hasliked": 0,
            "id": "wlScWc",
            "likes": 19,
            "name": "Electric beams",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float val = texelFetch( iChannel0, ivec2(fragCoord), 0 ).r;\n    \n    float val2 = abs(val-0.5)*2.0;\n    \n    fragColor = vec4( vec3(val2), 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// cell and hash functions by iq\n// https://www.shadertoy.com/view/XstGRf#\n\nfloat hash1( float n ) {\n    return fract(sin(n)*138.5453123);\n}\n\nfloat Cell( in ivec2 p ) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;    \n    return texelFetch(iChannel0, p ,0).r;\n}\n\nfloat myLerp( float p1, float p2 ) {\n\tfloat a = fract(p2 - p1);\n\treturn fract(p1 + (fract(2.0*a) - a)*0.5);\n}\n\nfloat prox2(in float n, in float n2) {\n\tfloat p = min(n,n2);\n\tfloat g = max(n,n2);\n\treturn max(g-p,p-(g-1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    ivec2 px = ivec2( fragCoord );\n\n\tfloat pixel = Cell(px);\n    vec4 n = vec4(Cell(px-ivec2(1,0)),\n\t\t\t\t  Cell(px+ivec2(1,0)),\n\t\t\t\t  Cell(px-ivec2(0,1)),\n\t\t\t\t  Cell(px+ivec2(0,1)));\n\n\tfloat truc = myLerp(myLerp(n[0],n[1]),myLerp(n[2],n[3]));\n\tfloat truc2 = prox2(truc,pixel)*1.39 - 0.36;\n   \n    float f = fract(truc*truc2);\n\n\tfragColor = vec4(fract(truc*truc2),0,0,1);\n\n    if( iFrame==0 ) fragColor = vec4(hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)),0.,0.,1.);\n    \n    if(iMouse.z>0.5 && length(iMouse.xy-vec2(px))<30.) fragColor = vec4(1.);\n\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}