{
    "Shader": {
        "info": {
            "date": "1576691120",
            "description": "Long floppy tube closeup (as in \"Elevating Platter\")",
            "flags": 0,
            "hasliked": 0,
            "id": "tlcGRB",
            "likes": 12,
            "name": "Multisegment Floppy Tube",
            "published": 3,
            "tags": [
                "geometry",
                "helix",
                "kinematics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "// \"Multisegment Floppy Tube\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrSphDf (vec3 p, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\n\nvec4 hxHit;\nvec3 ltDir;\nfloat tCur, dstFar, aMin, dLoop, aLoop, hLen, rCyl;\nconst float pi = 3.14159, sqrt3 = 1.73205;\nconst float nSeg = 5.;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 b, c;\n  float dMin, d, lb, dr, rSph;\n  dMin = dstFar;\n  rSph = 0.9 *rCyl;\n  p.x -= - 0.5 * hLen;\n  p.xy = Rot2D (p.xy, 0.5 * pi - aLoop);\n  for (float k = 0.; k < nSeg; k ++) {\n    q = p;\n    q.xy = Rot2D (q.xy, 0.5 * pi);\n    q.xy = Rot2D (vec2 (q.x, q.y - dLoop), aLoop - 0.5 * pi);\n    b = vec2 (length (q.xy) - dLoop, q.z);\n    lb = length (b);\n    c = atan (vec2 (q.y, b.x), vec2 (- q.x, b.y)) * vec2 (4. * dLoop / pi, 1.) / pi;\n    dr = SmoothBump (0.15, 0.85, 0.1, mod (2. * c.x +\n       2. * c.y * (mod (float (k), 2.) - 0.5), 1.)) - 0.5;\n    d = max (min (abs (lb - 0.95 * rCyl) + 0.05 * dr * rCyl, lb - 0.7 * rCyl),\n       dot (vec2 (q.x, abs (q.y)), sin (aLoop + vec2 (0., 0.5 * pi))));\n    if (k == 0.) d = min (d, PrSphDf (p, rSph));\n    p.xy = Rot2D (q.xy, aLoop) + vec2 (dLoop, 0.);\n    p.x *= -1.;\n    if (k == nSeg - 1.) d = min (d, PrSphDf (p, rSph));\n    if (d < dMin) {\n      dMin = d;\n      hxHit = vec4 (c, lb, k);\n    }\n  }\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col;\n  vec2 p, ip;\n  float dstObj, tCyc, sLoop, vDotL, sh, c;\n  tCyc = 10.;\n  aMin = 0.6;\n  sLoop = aMin + 20. * pow (1. - SmoothBump (0.25, 0.75, 0.24, mod (tCur / tCyc, 1.)), 4.);\n  aLoop = 0.25 * pi / sLoop;\n  dLoop = 6. * 0.25 * pi * sLoop;\n  hLen = 2. * nSeg * dLoop * sin (aLoop);\n  rCyl = 2.;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (hxHit.z < 0.2 * rCyl) {\n      col4 = (hxHit.x < 0.) ? vec4 (1., 0., 0., -1.) : vec4 (0., 1., 0., -1.);\n    } else if (hxHit.z < 0.91 * rCyl) {\n      hxHit.x -= 1.5 * hxHit.y * (mod (hxHit.w, 2.) - 0.5);\n      p = hxHit.xy * vec2 (2. * sqrt3, 3.);\n      ip = PixToHex (p);\n      c = mod (dot (mod (2. * ip + ip.yx, 3.), vec2 (1., 2.)), 3.);\n      col4 = (c == 0.) ? vec4 (0.7, 0.6, 0., 0.2) : ((c == 1.) ? vec4 (0.8, 0.8, 0.4, 0.2) :\n         vec4 (0.4, 0.2, 0., 0.2));\n      col4 *= 0.3 + 0.7 * smoothstep (0.05, 0.07, HexEdgeDist (p - HexToPix (ip)));\n    } else {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.2);\n    }\n    if (col4.a >= 0.) {\n      sh = ObjSShadow (ro, ltDir);\n      vDotL = max (dot (vn, ltDir), 0.);\n      col = col4.rgb * (0.2 + 0.8 * sh * vDotL * vDotL) +\n         0.2 * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    } else col = col4.rgb * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n  } else {\n    col = vec3 (0.2);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  el = 0.;\n  az = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 2. * pi * mPtr.y;\n  } else {\n    az += 0.01 * 2. * pi * tCur;\n  }\n  zmFac = 3.5;\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -50.);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}