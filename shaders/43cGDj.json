{
    "Shader": {
        "info": {
            "date": "1716993222",
            "description": "15 grids font experiment 1",
            "flags": 0,
            "hasliked": 0,
            "id": "43cGDj",
            "likes": 11,
            "name": "15 grids font experiment 1",
            "published": 3,
            "tags": [
                "fonts",
                "graphicdesign",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.5),-antialiasing(1.5),d - b)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define BASE_FONT_SIZE 0.083\n\nint cA[15] = int[](1,1,1,0,0,1,1,1,1,1,0,1,1,1,1);\nint cB[15] = int[](1,1,1,1,0,1,1,1,0,1,0,1,1,1,1);\nint cC[15] = int[](1,1,1,1,0,0,1,0,0,1,0,0,1,1,1);\nint cD[15] = int[](1,1,0,1,0,1,1,0,1,1,0,1,1,1,0);\nint cE[15] = int[](1,1,1,1,0,0,1,1,0,1,0,0,1,1,1);\nint cF[15] = int[](1,1,1,1,0,0,1,1,0,1,0,0,1,0,0);\nint cG[15] = int[](1,1,1,1,0,0,1,0,1,1,0,1,1,1,1);\nint cH[15] = int[](1,0,1,1,0,1,1,1,1,1,0,1,1,0,1);\nint cI[15] = int[](0,1,0,0,0,0,0,1,0,0,1,0,0,1,0);\nint cJ[15] = int[](0,1,1,0,0,1,0,0,1,0,0,1,1,1,1);\nint cK[15] = int[](1,0,1,1,0,1,1,1,0,1,0,1,1,0,1);\nint cL[15] = int[](1,0,0,1,0,0,1,0,0,1,0,0,1,1,1);\nint cM[15] = int[](1,0,1,1,1,1,1,0,1,1,0,1,1,0,1);\nint cN[15] = int[](1,1,1,1,0,1,1,0,1,1,0,1,1,0,1);\nint cO[15] = int[](1,1,1,1,0,1,1,0,1,1,0,1,1,1,1);\nint cP[15] = int[](1,1,1,1,0,1,1,1,1,1,0,0,1,0,0);\nint cQ[15] = int[](1,1,1,1,0,1,1,0,1,1,1,1,0,0,1);\nint cR[15] = int[](1,1,1,1,0,1,1,1,0,1,0,1,1,0,1);\nint cS[15] = int[](1,1,1,1,0,0,1,1,1,0,0,1,1,1,1);\nint cT[15] = int[](1,1,1,0,1,0,0,1,0,0,1,0,0,1,0);\nint cU[15] = int[](1,0,1,1,0,1,1,0,1,1,0,1,1,1,1);\nint cV[15] = int[](1,0,1,1,0,1,1,0,1,1,1,0,1,0,0);\nint cW[15] = int[](1,0,1,1,0,1,1,0,1,1,1,1,1,0,1);\nint cX[15] = int[](1,0,1,1,0,1,0,1,0,1,0,1,1,0,1);\nint cY[15] = int[](1,0,1,1,0,1,1,1,1,0,1,0,0,1,0);\nint cZ[15] = int[](1,1,1,0,0,1,0,1,0,1,0,0,1,1,1);\nint c0[15] = int[](1,1,1,1,0,1,1,0,1,1,0,1,1,1,1);\nint c1[15] = int[](0,1,0,0,1,0,0,1,0,0,1,0,0,1,0);\nint c2[15] = int[](1,1,1,0,0,1,1,1,1,1,0,0,1,1,1);\nint c3[15] = int[](1,1,1,0,0,1,1,1,1,0,0,1,1,1,1);\nint c4[15] = int[](1,0,0,1,0,0,1,1,0,1,1,1,0,1,0);\nint c5[15] = int[](1,1,1,1,0,0,1,1,1,0,0,1,1,1,1);\nint c6[15] = int[](1,1,1,1,0,0,1,1,1,1,0,1,1,1,1);\nint c7[15] = int[](1,1,1,0,0,1,0,0,1,0,0,1,0,0,1);\nint c8[15] = int[](1,1,1,1,0,1,1,1,1,1,0,1,1,1,1);\nint c9[15] = int[](1,1,1,1,0,1,1,1,1,0,0,1,1,1,1);\n\nfloat baseFontShape(vec2 p){\n    float size = BASE_FONT_SIZE;\n    float d = B(p,vec2(size));\n    return d;\n}\n\nfloat chars(vec2 p, int[15] data){\n    vec2 prevP  = p;\n    float size = BASE_FONT_SIZE;\n    float d = 10.;\n    for(int i = 0; i<data.length(); i++){\n        p = prevP;\n        p.x-=(float(i%3)*(size*2.))-(size*2.);\n        p.y+=(float(i/3)*(size*2.))-(size*4.);\n        \n        if(data[i] == 1){\n            float d2 = baseFontShape(p);\n            d = min(d,d2);\n        }\n    }\n    return d;\n}\n\nfloat drawFont(vec2 p, int char){\n    float d = 10.;\n    if(char == 0) {\n        d = chars(p,c0);\n    } else if(char == 1) {\n        d = chars(p,c1);\n    } else if(char == 2) {\n        d = chars(p,c2);\n    } else if(char == 3) {\n        d = chars(p,c3);\n    } else if(char == 4) {\n        d = chars(p,c4);\n    } else if(char == 5) {\n        d = chars(p,c5);\n    } else if(char == 6) {\n        d = chars(p,c6);\n    } else if(char == 7) {\n        d = chars(p,c7);\n    } else if(char == 8) {\n        d = chars(p,c8);\n    } else if(char == 9) {\n        d = chars(p,c9);\n    } else if(char == 10) {\n        d = chars(p,cA);\n    } else if(char == 11) {\n        d = chars(p,cB);\n    } else if(char == 12) {\n        d = chars(p,cC);\n    } else if(char == 13) {\n        d = chars(p,cD);\n    } else if(char == 14) {\n        d = chars(p,cE);\n    } else if(char == 15) {\n        d = chars(p,cF);\n    } else if(char == 16) {\n        d = chars(p,cG);\n    } else if(char == 17) {\n        d = chars(p,cH);\n    } else if(char == 18) {\n        d = chars(p,cI);\n    } else if(char == 19) {\n        d = chars(p,cJ);\n    } else if(char == 20) {\n        d = chars(p,cK);\n    } else if(char == 21) {\n        d = chars(p,cL);\n    } else if(char == 22) {\n        d = chars(p,cM);\n    } else if(char == 23) {\n        d = chars(p,cN);\n    } else if(char == 24) {\n        d = chars(p,cO);\n    } else if(char == 25) {\n        d = chars(p,cP);\n    } else if(char == 26) {\n        d = chars(p,cQ);\n    } else if(char == 27) {\n        d = chars(p,cR);\n    } else if(char == 28) {\n        d = chars(p,cS);\n    } else if(char == 29) {\n        d = chars(p,cT);\n    } else if(char == 30) {\n        d = chars(p,cU);\n    } else if(char == 31) {\n        d = chars(p,cV);\n    } else if(char == 32) {\n       d = chars(p,cW);\n    } else if(char == 33) {\n       d = chars(p,cX);\n    } else if(char == 34) {\n       d = chars(p,cY);\n    } else if(char == 35) {\n       d = chars(p,cZ);\n    }\n    \n    return d;\n}\n\n\n// principal value of logarithm of z\n// https://gist.github.com/ikr7/d31b0ead87c73e6378e6911e85661b93\nvec2 clog (vec2 z) {\n\treturn vec2(log(length(z)), atan(z.y, z.x));\n}\n\n// The following code will return the Droste Zoom UV.\n// by roywig https://www.shadertoy.com/view/Ml33R7\nvec2 drosteUV(vec2 p){\n    float speed = 0.25;\n    float animate = mod(iTime*speed,2.07);\n    float rate = sin(iTime*0.5);\n    //p = clog(p)*mat2(1,.11,rate*0.5,1);\n    p = clog(p);\n    p = exp(p.x-animate) * vec2( cos(p.y), sin(p.y));\n    vec2 c = abs(p);\n    vec2 duv = .5+p*exp2(ceil(-log2(max(c.y,c.x))-2.));\n    return duv;\n}\n\nvec2 pmod(vec2 p, float s, float space){\n    float modVal = s*(2.0+space);\n    p = mod(p,modVal)-(modVal*0.5);\n    return p;\n}\n\nfloat maskPattern1(vec2 p, float s, float space){\n    p = drosteUV(p);\n    p = pmod(p,s,space);\n    float d = length(p)-s;\n    return d;\n}\n\nfloat maskPattern2(vec2 p, float s, float space){\n    p*=Rot(radians(30.*iTime));\n    p = drosteUV(p);\n    p = pmod(p,s,space);\n    p*=Rot(radians(45.));\n    float d = B(p,vec2(s));\n    return d;\n}\n\nfloat maskPattern3(vec2 p, float s, float space){\n    p.x-=iTime*0.1;\n    p = pmod(p,s,space);\n    float d = B(p,vec2(s));\n    float a = radians(45.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    return d;\n}\n\nfloat maskPattern4(vec2 p, float s, float space){\n    p.y-=iTime*0.1;\n    p = pmod(p,s,space);\n    float d = B(p,vec2(s));\n    p.x = abs(p.x)-(s*0.5);\n    float a = radians(28.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    return d;\n}\n\nfloat maskPattern5(vec2 p,float s, float space){\n    vec2 prevP = p;\n    p*=Rot(radians(-45.));\n    p.x+=iTime*0.1;\n    p.x = mod(p.x,space)-(space*0.5);\n    float d = B(p,vec2(s,1.));\n    return d;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n\nfloat drawRandomPattern(vec2 p,float n, float start){\n    float frame = mod(start+iTime*2.+n,5.);\n    float d = 10.;\n    if(frame<1.0){\n        d = maskPattern1(p,0.1,0.5);\n    } else if(frame>=1. && frame<2.){\n        d = maskPattern2(p,0.08,1.1);\n    } else if(frame>=2. && frame<3.){\n        d = maskPattern3(p,0.14,0.5);\n    } else if(frame>=3. && frame<4.){\n        d = maskPattern4(p,0.13,0.5);\n    } else if(frame>=4. && frame<5.){\n        d = maskPattern5(p,0.1,0.3);\n    }\n    return d;\n}\n\nfloat draw(vec2 p){\n    p*=1.1;\n    p.x-=BASE_FONT_SIZE*0.5;\n    p.y-=iTime*0.3;\n    vec2 prevP = p;\n    p*=12.;\n    \n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n    float n = Hash21(id)*5.0;\n    float d = 10.;\n    if(n<1.0){\n        d = drawRandomPattern(gv,n,0.);\n    } else if(n>=1. && n<2.){\n        d = drawRandomPattern(gv,n,1.);\n    } else if(n>=2. && n<3.){\n        d = drawRandomPattern(gv,n,2.);\n    } else if(n>=3. && n<4.){\n        d = drawRandomPattern(gv,n,3.);\n    } else if(n>=4. && n<5.){\n        d =  drawRandomPattern(gv,n,4.);\n    }\n    \n    p = prevP;\n    \n    p*=2.;\n    gv = fract(p)-0.5;\n    id = floor(p);\n    n = Hash21(id)*35.0;\n    int char = int(n);\n    gv+=BASE_FONT_SIZE;\n    float d2 = 10.;\n    if(char < 10){\n         int num = int(mod(0.5*iTime*float(n),10.0));\n        d2 = drawFont(gv,num);\n    } else {\n        d2 = drawFont(gv,char);\n    }\n    \n    d = max(d,d2);\n    \n    p = prevP;\n    p*=2.;\n    gv = fract(p)-0.5;\n    gv+=BASE_FONT_SIZE;\n    \n    vec2 prevGV = gv;\n    gv*=Rot(radians(45.));\n    d2 = B(gv,vec2(0.0005,0.6));\n    d = min(d,d2);\n    gv*=Rot(radians(-90.));\n    d2 = B(gv,vec2(0.0005,0.65));\n    d = min(d,d2);\n    \n    gv = prevGV;\n    gv = abs(gv)-0.5;\n    gv*=Rot(radians(45.));\n    d2 = B(gv,vec2(0.015));\n    d = min(d,d2);\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    float d = draw(p);\n    col = mix(col,vec3(1.),S(d,0.0));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}