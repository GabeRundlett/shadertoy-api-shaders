{
    "Shader": {
        "info": {
            "date": "1620667492",
            "description": "test of normal and specular textures on a metal box",
            "flags": 32,
            "hasliked": 0,
            "id": "NsjSRy",
            "likes": 5,
            "name": "metal test",
            "published": 3,
            "tags": [
                "raytracing",
                "box"
            ],
            "usePreview": 0,
            "username": "mdb",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "vec3 rotate(vec3 p, vec3 u, float teta){\n    float cost = cos(teta);\n    float sint = sin(teta);\n    mat3x3 R = mat3x3(cost + u.x*u.x*(1.0-cost),      u.x*u.y*(1.0-cost) - u.z*sint,  u.x*u.z*(1.0-cost) + u.y*sint,\n                      u.y*u.x*(1.0-cost) + u.z*sint,  cost + u.y*u.y*(1.0-cost),      u.y*u.z*(1.0-cost) - u.x*sint,\n                      u.z*u.x*(1.0-cost) - u.y*sint,  u.z*u.y*(1.0-cost) + u.x*sint,  cost + u.z*u.z*(1.0-cost)   );\n    return R * p;\n}\n\nvec2 box(vec3 ro, vec3 rd){\n        \n        vec3 dirfrac = 1.0 / rd;\n        float t1 = (-1.0- ro.x)*dirfrac.x;\n        float t2 = (1.0 - ro.x)*dirfrac.x;\n        float t3 = (-1.0 - ro.y)*dirfrac.y;\n        float t4 = (1.0 - ro.y)*dirfrac.y;\n        float t5 = (-1.0 - ro.z)*dirfrac.z;\n        float t6 = (1.0 - ro.z)*dirfrac.z;\n\n        float tmin = max(max(min(t1, t2), min(t3, t4)), min(t5, t6));\n        float tmax = min(min(max(t1, t2), max(t3, t4)), max(t5, t6));\n\n        // if tmax < 0, ray (line) is intersecting AABB, but the whole AABB is behind us\n        if (tmax < 0.0) return vec2(-1.0);\n\n        // if tmin > tmax, ray doesn't intersect AABB\n        if (tmin > tmax) return vec2(-1.0);\n\n        return vec2(tmin, tmax);\n}\n\nvec3 transform(vec3 p){\n    p = rotate(p, vec3(0.0, 0.0, 1.0), -iTime);\n    p = rotate(p, vec3(0.0, 1.0, 0.0), iTime*0.3);\n    return p;\n}\n\nvec3 getScene(vec3 ro, vec3 rd){\n    //rotate the box\n    ro = transform(ro);\n    rd = transform(rd);\n    \n    float t = box(ro, rd).x;\n    if (t < 0.0) return vec3(0.0);\n    vec3 p = ro + rd*t;\n    vec3 n = vec3(0.0);\n    vec2 uv;\n    if(abs(p.x)>0.99){n.x = p.x; uv = p.yz;}\n    if(abs(p.y)>0.99){n.y = p.y; uv = p.xz;}\n    if(abs(p.z)>0.99){n.z = p.z; uv = p.xy;}\n    n = normalize(n);\n    uv = 0.5 + 0.5*uv;\n    \n    //get to shading\n    vec3 lightDir = normalize(vec3(1.0, 2.0, -3.0));\n    lightDir = transform(lightDir);\n    vec3 tex = texture(iChannel0, uv).xyz;\n    vec4 prop = texture(iChannel1, uv);\n    \n    vec3 bump = prop.xyz*2.0-1.0;\n    float teta = acos(dot(bump, vec3(0.0, 0.0, 1.0)));\n    if (teta>0.000001){\n        n = rotate(n, normalize(cross(bump, vec3(0.0, 0.0, 1.0))), teta);\n    }\n    \n    vec3 col = tex;\n    col *= max(0.2, dot(n, lightDir));\n    col += 0.8*prop.w*pow(max(0.0, dot(n, lightDir)), 20.0);\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel1, uv).xyz;\n    \n    //get ray\n    uv = uv*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 camPos = vec3(0.0, 0.0, -3.0);\n    vec3 dir0 = normalize(-camPos);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = normalize(cross(up, dir0));\n    up = cross(dir0, right);\n    //vec2 off = vec2(random(),random()) / iResolution.y;\n    vec3 rd = normalize(dir0 + right*uv.x + up*uv.y);\n    \n    col = getScene(camPos, rd);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// .rgb = normal map, .a = specular mask\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    vec3 metal = texture(iChannel0, uv).xyz;\n    \n    //shiness\n    float mask = 1.0;\n    //if (metal.r-dot(metal, vec3(0.3)) > 0.05) mask = 0.0;\n    mask = 1.0 - smoothstep(0.035, 0.065, metal.r-dot(metal, vec3(0.3)));\n    \n    //bump normal map\n    float a = metal.r-dot(metal, vec3(0.3));\n    vec2 bumpStr = vec2(4.0);\n    bumpStr *= iResolution.xy * 0.01;\n    vec3 normal = vec3(dFdx(a)*bumpStr.x, dFdy(a)*bumpStr.y, 1.0);\n    normal = normalize(normal);\n    normal = 0.5 + 0.5*normal;\n    \n    \n    // Output to screen\n    fragColor = vec4(normal,mask);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}