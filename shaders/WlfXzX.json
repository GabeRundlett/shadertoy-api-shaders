{
    "Shader": {
        "info": {
            "date": "1564152166",
            "description": "My first try with volumetric raymarching.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlfXzX",
            "likes": 29,
            "name": "basic smoke",
            "published": 3,
            "tags": [
                "raymarching",
                "volumetric"
            ],
            "usePreview": 1,
            "username": "Eseris",
            "viewed": 3663
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\n// iq's noise function\nfloat noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0. ).yx;\n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nfloat smoke(vec3 p) {\n    //return clamp(1. - length(p), 0., 1.);\n    vec3 q = 1.2 * p;\n    float f = 0., a = .5;\n    for(int i = 0; i < 5; ++i, a *= .4, q *= 2.1) { // fbm\n        q += iTime * vec3(.17, -.5, 0);\n        f += a * noise(q);\n    }\n    float noiseShape = .5 + .7 * max(p.y, 0.) - .15 * length(p.xz);\n    return clamp(1. +  noiseShape * f - length(p), 0., 1.);\n}\n\nvec3 shading(vec3 ro, vec3 rd) {\n    vec3 ld = normalize(vec3(.5, 1, -.7));\n    \n    const float nbStep = 30., diam = 3., rayLength = diam / nbStep;\n    float start = length(ro) - diam / 2., end = start + diam;\n    float sumDen = 0., sumDif = 0.;\n    \n    for(float d = end; d > start; d -= rayLength) { // raymarching\n        vec3 p = ro + d * rd;\n    \tif(dot(p,p) > diam * diam) break;\n        float den = smoke(p);\n        sumDen += den;\n        if(den > .02) sumDif += max(0., den - smoke(p + ld * .17));\n    }\n\n    const vec3 lightCol = vec3(.95, .75, .3);\n    float light = 10. * pow(max(0., dot(rd, ld)), 10.);\n    vec3 col = .01 * light * lightCol;\n    col +=  .4 * sumDen * rayLength * vec3(.8, .9, 1.); // ambient\n    col += 1.3 * sumDif * rayLength * lightCol;         // diffuse\n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / iResolution.yy;\n    vec3 rd = normalize(vec3(uv, -1.07));\n\n    vec2 ang = iMouse.xy / iResolution.xy;\n    float yaw = 7. * ang.x;\n    float pitch = + (ang.y);\n\n    vec3 camPos = vec3(0., .3, 3.5);\n    camPos.yz *= rot(pitch); camPos.zx *= rot(yaw);\n    rd.yz     *= rot(pitch);     rd.zx *= rot(yaw);\n\n\tfragColor = vec4(pow(shading(camPos, rd), vec3(1. / 2.2)), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}