{
    "Shader": {
        "info": {
            "date": "1571599252",
            "description": "for cookie demoparty zine",
            "flags": 0,
            "hasliked": 0,
            "id": "wstXR4",
            "likes": 11,
            "name": "Cookie 19 fanzine submission",
            "published": 3,
            "tags": [
                "kifs"
            ],
            "usePreview": 0,
            "username": "macbooktall",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "// Submission to Cookie demo party fan zine -- by @connrbell\n#define ANIMATE 1\nfloat time;\n\n// pR from mercury.sexy/hg_sdf\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// smin and sdBox by iq - https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k ){\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat sdBox( vec3 p, vec3 b ) {\n\tvec3 q = abs(p) - b;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n// --\n\nfloat hollowBox(vec3 p, vec3 b, float edge) {\n\tfloat res = sdBox(p,b);\n\tfloat edgeLow = (1.0 - edge * 0.5);\n    float edgeHigh = (1.0 + edge * 0.5);\n    vec3 size = vec3(b.x*edgeLow, b.y*edgeLow, b.z*edgeHigh);\n\n    res = max(res, -sdBox(p, size));\n    res = max(res, -sdBox(p, size.xzy));\n    res = max(res, -sdBox(p, size.zyx));\n\treturn res;\n}\n\nfloat map(vec3 p) {\n    float scale = .55, distFromCam = length(p)*3., res = 1e20;\n\tvec3 boxPos = p + vec3(0.,1.,-3.);\n\n    p.xyz = mod(p.xyz, vec3(2.)) - vec3(1.);\n\n    for (int i = 0; i < 7; i++) {\n        p = abs(p) + vec3(-.5, -.5, -.5) * scale;\n\n        pR(p.xz, 3.4 + 6.*iMouse.x/iResolution.x + cos( time + distFromCam + float(i)*0.333)*0.15);\n        pR(p.xy, .35 + 6.*iMouse.y/iResolution.y + sin( time + distFromCam + float(i)*0.333)*0.15); \n   \n\t\tscale *= 0.6;\n        \n        res = min(res,sdBox(p,vec3(scale)));    \n    }\n    pR(boxPos.xz,1.570795*0.65+time);\n    pR(boxPos.xy,1.570795*0.5+sin(time)*0.35);\n    res = smin(res, hollowBox(boxPos,vec3(.2), 0.075), 0.125);\n\treturn min(res, sdBox(boxPos,vec3(.1)));\n}\n\nvoid getColor (out vec4 fragColor, in vec2 fragCoord, vec3 ro) {\n    \n    time = 4.65 + iTime * float(ANIMATE);\n    vec2 p = -1.0+2.0*fragCoord.xy/iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    vec3 rd = normalize(vec3(p.x, p.y-0.5, 4.));\n \tfloat dist = 0.;   \n    \n    for (int i = 0; i < 65; i++) {\n   \t\tdist += map(ro + rd * dist);\n   \t}\n\n    vec3 pos = ro + rd * dist;\n\tvec3 col = vec3(map(pos + normalize(vec3(0., .1, -3.)) * 0.0025 )) / 0.0015;\n    \n    col = mix(col, vec3(0.), clamp((dist)/5., 0., 1.));\n    \n    fragColor = mix(vec4(.0), vec4(pow(col,vec3(0.5)), 1.), 1.-smoothstep(0.,1.,length(p)*0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    float divergence = 0.01;\n    vec4 red = vec4(0);\n    vec3 ro = vec3(0.-divergence, -.75, 0.75);\n    getColor(red, fragCoord, ro);\n    vec4 cyan = vec4(0);\n    ro = vec3(0.+divergence, -.75, 0.75);\n    getColor(cyan, fragCoord, ro);\n    fragColor = vec4(red.r, cyan.gb, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}