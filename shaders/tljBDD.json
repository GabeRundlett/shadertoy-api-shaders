{
    "Shader": {
        "info": {
            "date": "1600168060",
            "description": "first shader i made",
            "flags": 2,
            "hasliked": 0,
            "id": "tljBDD",
            "likes": 5,
            "name": "Wobbly Webcam",
            "published": 3,
            "tags": [
                "sine",
                "webcam"
            ],
            "usePreview": 0,
            "username": "jh0ker",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "\n// Source: https://www.geeks3d.com/hacklab/20190225/demo-checkerboard-in-glsl/\nfloat checker(vec2 uv, float repeats) \n{\n  float cx = floor(repeats * uv.x);\n  float cy = floor(repeats * uv.y); \n  float result = mod(cx + cy, 2.0);\n  return sign(result);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 center = vec2(.5, .5);\n    \n    // Config options\n    \n    // Overall strength\n    float effectStrength = 15.;\n    // Exponent to focus the effect on the center\n    float effectPower = 1.3;\n    // Is subtracted afterwards, makes it weaker and cuts off effect on the edges\n    float effectLocal = .4;\n    // Width of the sine waves used for deformation\n    float sineWidth = 20.;\n    \n    // Calculate sine scale factor\n    float scale = effectStrength * max(\n        pow(1. - distance(uv, center), effectPower) - effectLocal, \n    0.);\n    \n    // Normalize for resolution\n    float resolutionScaleFactor = (iResolution.x + iResolution.y) / 1000.;\n    \n    scale *= resolutionScaleFactor;\n    sineWidth *= resolutionScaleFactor;\n    \n    // Wobble\n    vec2 uvWobbly = vec2(\n        fragCoord.x + scale * sin(fragCoord.x / sineWidth + iTime), \n        fragCoord.y + scale * sin(fragCoord.y / sineWidth + iTime * 1.2)\n    ) / iResolution.xy;\n    \n    \n    fragColor = texture(iChannel0, uvWobbly);\n    \n    return;\n    \n    // Test effect with generated checkerboard texture\n    uvWobbly.x *= iResolution.x / iResolution.y;\n    float c = mix(1.0, 0.0, checker(uvWobbly, 10.));\n    fragColor = vec4(c, c, c, 1.0);\n    //fragColor = vec4(scale / 20. * uv.x);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}