{
    "Shader": {
        "info": {
            "date": "1514200951",
            "description": "Barque sailing through fine and foul weather",
            "flags": 0,
            "hasliked": 0,
            "id": "MtBBRR",
            "likes": 15,
            "name": "Sailing",
            "published": 3,
            "tags": [
                "waves",
                "sea",
                "fog",
                "lightning",
                "ship"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 996
        },
        "renderpass": [
            {
                "code": "// \"Sailing\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEECapsDf (vec3 p, vec3 v1, vec3 v2, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nvec3 RgbToHsv (vec3 c);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, shipConf, bDeck, qHit, cloudDisp, fogDisp;\nfloat tCur, dstFar, tWav, szFac, cloudDens, fogDens;\nint idObj;\nconst int idHull = 1, idRud = 2, idStruc = 3, idMast = 4, idSparT = 5, idSparL = 6, idSailT = 7,\n   idSailA = 8, idSailF = 9, idFlag = 10, idRig = 11;\nconst float pi = 3.14159;\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  q = 0.25 * p + vec2 (0., tCur);\n  h = 0.2 * sin (q.y) + 0.15 * sin (dot (q, vec2 (0.1, 1.2))) +\n     0.1 * sin (dot (q, vec2 (-0.2, 1.4)));\n  h *= 1.5 * (1. - smoothstep (0.8 * dstFar, dstFar, length (p)));\n  q = p;\n  wFreq = 0.5;\n  wAmp = 0.07;\n  tw = tWav * vec2 (1., -1.);\n  for (int j = 0; j < 4; j ++) {\n    q *= qRot;\n    t4 = q.xyxy * wFreq + tw.xxyy;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    t = 1. - sqrt (v4.xz * v4.yw);\n    t *= t;\n    h += wAmp * dot (t, t);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return h;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 50; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (6., h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.1, 5e-5 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy), WaveHt (p.xz + e.yx)), e.x).xzy);\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq, w;\n  float dMin, d, fy, fz, gz, s, rRig, rSpar, yLim, zLim;\n  rRig = 0.02;\n  rSpar = 0.05;\n  p.yz = Rot2D (p.yz, -0.4 * shipConf.z);\n  p.xy = Rot2D (p.xy, 6. * shipConf.y);\n  p.y -= shipConf.x + 4.1 * szFac;\n  p /= szFac;\n  dMin = dstFar / szFac;\n  fy = 1. - 0.07 * p.y;\n  fz = 1. - 0.14 * step (1., abs (p.z));\n  zLim = abs (p.z) - 4.5;\n  q = p;\n  d = zLim;\n  q.z = mod (q.z + 1.4, 2.8) - 1.2;\n  d = max (d, PrCapsDf ((q - vec3 (0., 3.7 * (fz - 1.), 0.)).xzy, 0.1 * fy, 3.7 * fz));\n  DMINQ (idMast);\n  q = p;\n  yLim = abs (q.y - 0.2 * fz) - 3. * fz;\n  qq = q;\n  qq.y = mod (qq.y - 3.3 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.1 * fz;\n  d = max (max (min (d, PrCylDf (vec3 (qq - vec3 (0., 0.05 * fy * fz, 0.1 * fz - 0.23)).xzy,\n     0.15 * fy, 0.11 * fy * fz)), yLim), zLim);\n  DMINQ (idMast);\n  d = max (max (PrCapsDf (qq.yzx, 0.05, 1.23 * fy * fz), yLim), zLim);\n  DMINQ (idSparT);\n  q = p;\n  d = min (d, min (PrEECapsDf (q, vec3 (0., -3.5, 4.3), vec3 (0., -2.6, 6.7), rSpar),\n     PrEECapsDf (q, vec3 (0., -4., 4.1), vec3 (0., -2.9, 6.), rSpar)));\n  d = min (d, min (PrEECapsDf (q, vec3 (0., -1.2, -3.), vec3 (0., -0.5, -4.5), rSpar),\n     PrEECapsDf (q, vec3 (0., -2.7, -3.), vec3 (0., -2.7, -4.5), rSpar)));\n  DMINQ (idSparL);\n  q = p;\n  qq = q;\n  qq.y = mod (qq.y - 3.1 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.2 * (fz - abs (qq.y)) * (fz - abs (qq.y)) - 0.1 * fz;\n  d = max (max (max (PrBoxDf (qq, vec3 ((1.2 - 0.07 * q.y) * fz, fz, 0.01)),\n     min (qq.y, 1.5 * fy * fz - length (vec2 (qq.x, qq.y + 0.9 * fy * fz)))),\n     abs (q.y - 3. * (fz - 1.)) - 2.95 * fz), - PrBox2Df (qq.yz, vec2 (0.01 * fz)));\n  d = max (d, zLim);\n  DMINQ (idSailT);\n  q = p;\n  q.z -= -3.8;  q.y -= -1.75 - 0.2 * q.z;\n  d = PrBoxDf (q, vec3 (0.01, 0.9 - 0.2 * q.z, 0.6));\n  DMINQ (idSailA);\n  q = p;\n  q.yz -= vec2 (-1., 4.5);\n  w = vec3 (1., q.yz);\n  d = max (max (max (abs (q.x) - 0.01, - dot (w, vec3 (2.3, 1., -0.35))),\n     - dot (w, vec3 (0.68, -0.74, -1.))), - dot (w, vec3 (0.41, 0.4, 1.)));\n  DMINQ (idSailF);\n  q = p;\n  d = zLim;  \n  gz = (q.z - 0.5) / 5. + 0.3;\n  gz *= gz;\n  gz = 1.05 * (1. - 0.45 * gz * gz);\n  q.x = abs (q.x);\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  d = max (d, min (PrEECapsDf (q, vec3 (1.05 * gz, -3.25, -0.5), vec3 (1.4 * fz, -2.95, -0.05), 0.7 * rRig),\n     PrEECapsDf (vec3 (q.xy, abs (q.z + 0.2) - 0.01 * (0.3 - 2. * q.y)), vec3 (gz, -3.2, 0.),\n     vec3 (0.05, -0.9 + 2. * (fz - 1.), 0.), rRig)));\n  q = p;\n  d = min (d, PrEECapsDf (q, vec3 (0., -3., -4.45), vec3 (0., -2.7, -4.5), 0.8 * rRig));\n  d = min (min (d, min (PrEECapsDf (q, vec3 (0., 2.45, 2.65), vec3 (0., -2.7, 6.5), rRig),\n     PrEECapsDf (q, vec3 (0., 2.5, 2.65), vec3 (0., -3.2, 4.9), rRig))),\n     PrEECapsDf (q, vec3 (0., 2.6, -3.), vec3 (0., -0.5, -4.5), rRig));\n  q.x = abs (q.x);\n  d = min (d, PrEECapsDf (q, vec3 (0.65, -3.5, 3.5), vec3 (0.05, -2.7, 6.4), rRig));\n  s = step (1.8, q.y) - step (q.y, -0.2);\n  d = min (min (d, min (PrEECapsDf (q, vec3 (0.95, 0.4, 2.7) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 1.1, -0.15) + vec3 (0., 2., 0.) * s, rRig),\n     PrEECapsDf (q, vec3 (1.05, 1., -0.1) + vec3 (-0.1, 2., 0.) * s,\n     vec3 (0.05, 0.5, -2.95) + vec3 (0., 1.7, 0.) * s, rRig))),\n     PrEECapsDf (q, vec3 (0.95, 0.4, -2.9) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 0.9, -0.25) + vec3 (0., 2., 0.) * s, rRig));\n  DMINQ (idRig);\n  q = p;\n  q.yz -= vec2 (3.4, 0.18);\n  d = PrBoxDf (q, vec3 (0.01, 0.2, 0.3));\n  DMINQ (idFlag);\n  q = p;\n  d = zLim;\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  q.yz -= vec2 (-3.4, -0.4);\n  d = max (d, PrBoxDf (q, vec3 (0.3, 0.1, 0.5)));\n  DMINQ (idStruc);\n  q = p;\n  q.x = abs (q.x);\n  q.yz -= vec2 (-3.8, 0.5);\n  fz = q.z / 5. + 0.3;\n  fz *= fz;\n  fy = 1. - smoothstep (-1.3, -0.1, q.y);\n  gz = smoothstep (2., 5., q.z);\n  bDeck = vec3 ((1. - 0.45 * fz * fz) * (1.1 - 0.5 * fy * fy) *\n     (1. - 0.5 * smoothstep (-5., -2., q.y) * smoothstep (2., 5., q.z)),\n     0.78 - 0.8 * gz * gz - 0.2 * (1. - smoothstep (-5.2, -4., q.z)), 5. * (1. + 0. * 0.02 * q.y));\n  d = min (PrBoxDf (vec3 (q.x, q.y + bDeck.y - 0.6, q.z), bDeck),\n     max (PrBoxDf (q - vec3 (0., 0.72, -4.6), vec3 (bDeck.x, 0.12, 0.4)),\n     - PrBox2Df (vec2 (abs (q.x) - 0.4, q.y - 0.65), vec2 (0.2, 0.08))));\n  d = max (d, - PrBoxDf (vec3 (q.x, q.y - 0.58 - 0.1 * fz, q.z), vec3 (bDeck.x - 0.07, 0.3, bDeck.z - 0.1)));\n  q = p;\n  d = max (d, - max (PrBox2Df (vec2 (q.y + 3.35, mod (q.z + 0.25, 0.5) - 0.25), vec2 (0.08, 0.1)),\n     abs (q.z + 0.5) - 3.75));\n  DMINQ (idHull);\n  q = p;\n  d = PrBoxDf (q + vec3 (0., 4.4, 4.05), vec3 (0.03, 0.35, 0.5));\n  DMINQ (idRud);\n  return 0.7 * dMin * szFac;\n}\n\nvoid EvalShipConf ()\n{\n  vec4 h;\n  vec2 e;\n  e = vec2 (2. * szFac, 0.);\n  h = vec4 (WaveHt (- e), WaveHt (e), WaveHt (- e.yx), WaveHt (e.yx));\n  shipConf = vec3 (0.25 * dot (h, vec4 (1.)), vec2 (h.xz - h.yw) / (2. * e.x));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvoid ShipCol (out vec4 col4, out vec2 vf)\n{\n  vec2 cg;\n  vf = vec2 (0.);\n  if (idObj == idHull) {\n    if (abs (qHit.x) < bDeck.x - 0.08 && qHit.y > -3.6 && qHit.z > - bDeck.z + 0.62) {\n      col4 = vec4 (0.5, 0.3, 0., 0.1) * (0.5 + 0.5 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.x, 1.)));\n    } else if (qHit.y > -4.) {\n      col4 = vec4 (0.7, 0.5, 0.1, 0.1);\n      if (abs (qHit.z - 4.) < 0.25 && abs (qHit.y + 3.55) < 0.05) col4 *= 1.2;\n      else if (qHit.z < -4. && abs (qHit.x) < 0.84 && abs (qHit.y + 3.62) < 0.125) {\n        cg = step (0.1, abs (fract (vec2 (6. * qHit.x, 8. * (qHit.y + 3.62)) + 0.5) - 0.5));\n        if (cg.x * cg.y == 1.) col4 = vec4 (0.8, 0.8, 0.2, -1.);\n        else col4 *= 0.8;\n      } else {\n        col4 *= 0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.y, 1.));\n        vf = vec2 (64., 0.3);\n      } \n    } else if (qHit.y > -4.05) {\n      col4 = vec4 (0.8, 0.8, 0.8, 0.1);\n    } else {\n      col4 = vec4 (0.3, 0.2, 0.1, 0.);\n      vf = vec2 (64., 2.);\n    }\n  } else if (idObj == idRud) {\n    col4 = vec4 (0.5, 0.3, 0., 0.);\n  } else if (idObj == idStruc) {\n    col4 = vec4 (0.4, 0.3, 0.1, 0.1);\n    if (max (abs (qHit.x), abs (qHit.z + 0.22)) < 0.2) {\n      cg = step (0.1, abs (fract (vec2 (10. * vec2 (qHit.x, qHit.z + 0.22)) + 0.5) - 0.5));\n      if (cg.x * cg.y == 1.) col4 = vec4 (0.8, 0.8, 0.2, -1.);\n    }\n  } else if (idObj == idSailT) {\n    qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (4. * qHit.x, 1.)));\n    if (abs (qHit.z) < 0.2 && abs (abs (length (qHit.xy - vec2 (0., 0.3)) - 0.35) - 0.15) < 0.07)\n       col4 *= vec4 (1., 0.2, 0.2, 1.);\n  } else if (idObj == idSailA) {\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (5. * qHit.z, 1.)));\n  } else if (idObj == idSailF) {\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02,\n       mod (2.95 * qHit.y + 4. * qHit.z - 0.5, 1.)));\n  } else if (idObj == idFlag) {\n    col4 = vec4 (1., 1., 0.5, 0.1);\n    if (abs (abs (length (qHit.yz) - 0.1) - 0.04) < 0.02) col4 *= vec4 (1., 0.2, 0.2, 1.);\n  } else if (idObj == idMast) {\n    col4 = vec4 (0.7, 0.4, 0., 0.1);\n    if (length (qHit.xz) < 0.16 * (1. - 0.07 * qHit.y)) col4 *= 0.6 + 0.4 *\n       SmoothBump (0.03, 0.97, 0.01, mod (2. * qHit.y / (1. + 0.14 * step (1., abs (qHit.z))), 1.));\n    if (qHit.y > 3.65) col4 = vec4 (1., 0., 0., -1.);\n  } else if (idObj == idSparT) {\n    qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n    col4 = vec4 (0.7, 0.4, 0., 0.1) *  (0.6 + 0.4 * SmoothBump (0.08, 0.92, 0.01, mod (4. * qHit.x, 1.)));\n  } else if (idObj == idSparL) {\n    col4 = vec4 (0.7, 0.4, 0., 0.1);\n    if (qHit.z > 6.65) col4 = vec4 (1., 1., 0.3, -1.);\n  } else if (idObj == idRig) {\n    col4 = vec4 (0.2, 0.15, 0.1, 0.);\n    vf = vec2 (32., 0.5);\n  }\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.45, 0.45, 0.6), vec3 (0.2, 0.2, 0.9), rd.y);\n}\n\nvec3 SkyHrzCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, dp, col;\n  vec2 cSum;\n  float cloudLo, cloudRngI, att, a, sd;\n  const float nLay = 30.;\n  cloudLo = 300.;  \n  cloudRngI = 1./200.;  \n  a = atan (rd.z, rd.x) / pi;\n  if (rd.y < 0.02 * Fbm1 (64. * a + 1.) + 0.005) col = mix (vec3 (0.12, 0.14, 0.12),\n     vec3 (0.2, 0.2, 0.23), 0.5 + 0.5 * dot (normalize (rd.xz), - normalize (sunDir.xz))) *\n     (1. - 0.2 * Fbm2 (64. * vec2 (a, rd.y)));\n  else {\n    sd = max (dot (rd, sunDir), 0.);\n    ro += cloudDisp;\n    p = ro;\n    p.xz += (cloudLo - p.y) * rd.xz / rd.y;\n    p.y = cloudLo;\n    dp = rd / (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    cSum = vec2 (0.);  \n    att = 0.;\n    for (float s = 0.; s < nLay; s ++) {\n      q = p + s * dp;\n      att += 0.04 * max (cloudDens - Fbm3 (0.0035 * q), 0.);\n      cSum += att * (1. - cSum.y) * vec2 ((q.y - cloudLo) * cloudRngI, 1.);\n      if (cSum.y > 1.) break;\n    }\n    cSum.x += 0.5 * min ((1. - cSum.y) * pow (sd, 3.), 1.) + 0.05;\n    col = clamp (mix (SkyBg (rd) + vec3 (1., 1., 0.9) * (pow (sd, 8.) + pow (sd, 1024.)),\n       vec3 (1.) * 2.8 * cSum.x, cSum.y), 0., 1.);\n    col = mix (col, SkyBg (rd), pow (1. - rd.y, 32.));\n  }\n  return col;\n}\n\nvec3 FogCol (vec3 col, vec3 ro, vec3 rd, float dLim)\n{\n  float d, fFac, f, fn;\n  fFac = 1.;\n  ro += fogDisp;\n  d = 1.;\n  fn = fogDens * Fbm3 (0.5 * (ro + d * rd));\n  for (int j = 0; j < 8; j ++) {\n    d += 0.5 + 0.5 * d;\n    f = fn;\n    fn = fogDens * Fbm3 (0.5 * (ro + d * rd));\n    col = mix (col, vec3 (0.8, 0.8, 0.75) * (1. - clamp (f - fn, 0., 1.)),\n       clamp (fFac * f * smoothstep (0.9 * d, 2.3 * d, dLim), 0., 1.));\n    fFac *= 1.25;\n    if (d > dLim) break;\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo, rdo, row, vnw;\n  vec2 vf;\n  float dstObj, dstWat, dstFog, s, tCyc;\n  bool watRefl, doLtn;\n  tWav = 0.5 * tCur;\n  tCyc = mod (0.02 * tCur, 1.);\n  cloudDens = 0.4 + 0.4 * SmoothBump (0.2, 0.8, 0.15, tCyc);\n  cloudDisp = tCur * vec3 (-15., 0., 5.);\n  fogDisp = tCur * vec3 (0.2, 0., 0.2);\n  fogDens = 0.25 * SmoothBump (0.35, 0.65, 0.15, tCyc);\n  doLtn = (abs (tCyc - 0.65) < 0.1);\n  watRefl = false;\n  col4 = vec4 (0.);\n  if (rd.y < 0.) dstWat = WaveRay (ro, rd);\n  else dstWat = dstFar;\n  szFac = 1.;\n  EvalShipConf ();\n  dstObj = ObjRay (ro, rd);\n  roo = ro;\n  rdo = rd;\n  dstFog = min (min (dstObj, dstWat), dstFar);\n  col = vec3 (0.);\n  if (dstWat < min (dstObj, dstFar)) {\n    ro += dstWat * rd;\n    row = ro;\n    vnw = VaryNf (row, WaveNf (row, dstWat), 0.1);\n    rd = reflect (rd, vnw);\n    dstObj = ObjRay (ro, rd);\n    watRefl = true;\n  }\n  col = vec3 (0.22, 0.25, 0.33);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    ShipCol (col4, vf);\n    if (vf.x > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.2 * max (vn.y + 0.1, 0.) + \n       0.2 * max (dot (vec3 (- sunDir.x, 0., - sunDir.z), vn), 0.) +\n       0.6 * max (dot (vn, sunDir), 0.)) +\n       col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 128.);\n    else col = col4.rgb * (0.5 - 0.5 * dot (vn, rd));\n  } else if (dstWat < dstFar) {\n    s = WaveHt (row.xz);\n    col *= mix (1. + 0.1 * s, 1.5, step (0.75, s + 0.4 * (Fbm2 (128. * row.xz) - 0.5)));\n    vnw = VaryNf (4. * row, WaveNf (row, dstWat), 0.2);\n  } else if (rdo.y < 0.) {\n    row = roo - (roo.y / rdo.y) * rdo + vec3 (0.1 * tCur, 0., 0.);\n    vnw = VaryNf (4. * row, vec3 (0., 1., 0.), 0.2);\n    watRefl = true;\n  } else {\n    col = SkyHrzCol (roo, rdo);\n  }\n  if (watRefl) col = mix (0.8 * col, 0.25 * vec3 (1., 1., 0.8) * SkyHrzCol (row, reflect (rdo, vnw)),\n     smoothstep (0.5, 1., 1. + rdo.y));\n  if (fogDens > 0. && (col4.a >= 0. || watRefl)) col = FogCol (col, roo, rdo, dstFog);\n  if (doLtn && col4.a >= 0.) {\n    s = SmoothBump (0.6, 0.8, 0.05, Fbm1 (8. * tCur));\n    col = HsvToRgb (RgbToHsv (col) * vec3 (1., 1. - 0.6 * s, (watRefl ? 0.4 + 0.6 * s : 0.4 + 1.1 * s)));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd;\n  vec2 canvas, uv;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 4. * pi * (2. * mod (floor (0.004 * tCur), 2.) - 1.) *\n     SmoothBump (0.25, 0.75, 0.25, mod (0.004 * tCur, 1.));\n  el = 0.17 * pi - 0.12 * pi * cos (0.07 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n    el = clamp (el, 0.05 * pi, 0.45 * pi);\n  }\n  zmFac = 5.2 - 2. * el;\n  ro = 30. * vec3 (cos (el) * cos (az), sin (el), cos (el) * sin (az));\n  vd = normalize (vec3 (0., 3.5, 2.) - ro);\n  vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (1., 1., 1.));\n  dstFar = 200.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrEECapsDf (vec3 p, vec3 v1, vec3 v2, float r)\n{\n  vec3 s, t;\n  s = p - v1;\n  t = v2 - v1;\n  return length (s - clamp (dot (s, t) / dot (t, t), 0., 1.) * t) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec3 RgbToHsv (vec3 c)\n{\n  vec4 p, q;\n  float d;\n  const float e = 1.e-10;\n  p = mix (vec4 (c.bg, vec2 (-1., 2./3.)), vec4 (c.gb, vec2 (0., -1./3.)), step (c.b, c.g));\n  q = mix (vec4 (p.xyw, c.r), vec4 (c.r, p.yzx), step (p.x, c.r));\n  d = q.x - min (q.w, q.y);\n  return vec3 (abs (q.z + (q.w - q.y) / (6. * d + e)), d / (q.x + e), q.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}