{
    "Shader": {
        "info": {
            "date": "1583305973",
            "description": "Knotted chain; click in ring to cycle through a set of simple knots (else auto)",
            "flags": 32,
            "hasliked": 0,
            "id": "ttKXzc",
            "likes": 12,
            "name": "Knot Dynamics",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "chain",
                "topology",
                "polymer"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 508
        },
        "renderpass": [
            {
                "code": "// \"Knot Dynamics\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nmat3 DirToRMatT (vec3 vd, vec3 vu);\nvec3 HsvToRgb (vec3 c);\nvec4 Loadv4 (int idVar);\n\nconst int lenChain = 256;\nvec3 vnObj, ltDir;\nvec2 qBlk;\nfloat dstFar, tCur, spRad;\nint idBall;\nconst float pi = 3.14159;\n\n#define AA  1     // optional antialiasing\n#define TUBE 1    // = 0/1, show balls/tubes\n\n#if TUBE\n\nfloat CapsHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  vec3 s;\n  float dMin, d, a, b, w;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - rad * rad);\n  if (w > 0. && a > 0.) {\n    d = - b - sqrt (w);\n    d /= a;\n    s = ro + d * rd;\n    if (d > 0. && abs (s.z) < len) {\n      dMin = d;\n      vnObj = vec3 (s.xy, 0.);\n    } else {\n      ro.z -= len * sign (s.z);\n      b = dot (rd, ro);\n      w = b * b - (dot (ro, ro) - rad * rad);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0.) {\n          dMin = d;\n          vnObj = ro + d * rd;\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat PolyHit (vec3 ro, vec3 rd)\n{\n  mat3 rMat, rMatS;\n  vec3 r, rp, vnObjS;\n  float dMin, d, sz;\n  sz = 0.45;\n  dMin = dstFar;\n  idBall = -1;\n  for (int n = 0; n < lenChain + 1; n ++) {\n    if (n == 0) r = Loadv4 (0).xyz;\n    else {\n      rp = r;\n      r = (n < lenChain) ? Loadv4 (2 * n).xyz : Loadv4 (0).xyz;\n      rMat = DirToRMatT (normalize (r - rp), vec3 (0., 0., 1.));\n      d = CapsHit ((ro - 0.5 * (r + rp)) * rMat, rd * rMat, sz, 0.5 * length (r - rp));\n      if (d < dMin) {\n        dMin = d;\n        rMatS = rMat;\n        vnObjS = vnObj;\n        idBall = n;\n      }\n    }\n  }\n  if (idBall >= 0) vnObj = rMatS * normalize (vnObjS);\n  return dMin;\n}\n\n#else\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec3 v;\n  float b, d, w, dMin, sz;\n  dMin = dstFar;\n  sz = 0.55;\n  idBall = -1;\n  for (int n = 0; n < lenChain; n ++) {\n    v = ro - Loadv4 (2 * n).xyz;\n    b = dot (rd, v);\n    w = b * b + sz * sz - dot (v, v);\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        idBall = n;\n      }\n    }\n  }\n  if (idBall >= 0) vnObj = (ro - Loadv4 (2 * idBall).xyz + dMin * rd) / sz;\n  return dMin;\n}\n\n#endif\n\nvec4 SphHit (vec3 ro, vec3 rd)\n{\n  vec3 vn;\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + spRad * spRad - dot (ro, ro);\n  d = dstFar;\n  if (w >= 0.) {\n    d = - b - sqrt (w);\n    vn = (ro + d * rd) / spRad;\n  }\n  return vec4 (d, vn);\n}\n\nvoid BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, qnBlk;\n  float dn, df, bSize;\n  bSize = 10. * dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk)) / bSize;\n  }\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  return vec3 (0.5, 0.5, 0.7) * (0.3 + 0.1 * rd.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 d4;\n  vec3 col, vnSph;\n  float dstObj, dstExtSph, h;\n  d4 = SphHit (ro, rd);\n  dstExtSph = d4.x;\n  col = BgCol (ro, rd);\n  if (dstExtSph < dstFar) {\n#if TUBE\n    dstObj = PolyHit (ro, rd);\n#else   \n    dstObj = BallHit (ro, rd);\n#endif\n    if (dstObj < dstFar) {\n      h = mod (float (idBall) / float (lenChain) + 0.1 * tCur, 1.);\n      col = HsvToRgb (vec3 (h, 1., 0.8)) * (0.3 + 0.7 * max (dot (vnObj, ltDir), 0.)) +\n         0.2 * pow (max (dot (normalize (ltDir - rd), vnObj), 0.), 16.);\n    }\n    vnSph = d4.yzw;\n    col += 0.05 + 0.05 * max (dot (vnSph, ltDir), 0.) +\n       0.15 * pow (max (dot (normalize (ltDir - rd), vnSph), 0.), 32.);\n    rd = reflect (rd, vnSph);\n    ro += dstExtSph * rd;\n    BlkHit (ro, rd);\n    qBlk = step (0.1, mod (8. * qBlk + 0.1/2., 1.));\n    col = mix (col, BgCol (ro, rd) * (0.8 + 0.2 * qBlk.x * qBlk.y),\n       pow (1. - abs (dot (rd, vnSph)), 3.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 rd, ro, col, wgBxC, c;\n  vec2 canvas, uv, uvv;\n  float asp, el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  wgBxC = vec3 (0.48 * asp, -0.46, 0.02);\n  mPtr.xyz =  Loadv4 (2 * lenChain + 1).xyz;\n  spRad = Loadv4 (2 * lenChain).y;\n  dstFar = 20. * spRad;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0. && length (mPtr.xy * vec2 (asp, 1.) - wgBxC.xy) > wgBxC.z) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -5. * spRad);\n  ltDir = vuMat * normalize (vec3 (-2., 3., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi);\n    rd = vuMat * normalize (vec3 (uvv, 4.5));\n    c = ShowScene (ro, rd);\n    if (abs (length (0.5 * uvv - wgBxC.xy) - wgBxC.z) * canvas.y < 2.) c = vec3 (0.5, 0.8, 0.8);\n    col += c / naa;\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nmat3 DirToRMatT (vec3 vd, vec3 vu)\n{\n  vec3 vc;\n  vc = normalize (cross (vu, vd));\n  return mat3 (vc, cross (vd, vc), vd);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) *\n     6. - 3.) - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Knot Dynamics\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define N_KNOT  11\nvec3 knc[N_KNOT], kns[N_KNOT];\nfloat sclFac;\nint knType;\n\nconst int lenChain = 256;\nfloat spRad;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\n// Knot parametrizations from A.K. Trautwein thesis (University of Iowa, 1995) (many more)\n\nvoid KtSetup ()\n{\n  for (int k = 0; k < N_KNOT; k ++) {\n    knc[k] = vec3 (0);  kns[k] = vec3 (0);\n  }\n  if (knType == 1) {  // 3.1 trefoil knot\n     knc[0] = vec3 ( 41,   36,   0);   kns[0] = vec3 (-18,   27,   45);\n     knc[1] = vec3 (-83, -113,  -30);  kns[1] = vec3 (-83,   30,  113);\n     knc[2] = vec3 (-11,   11,  -11);  kns[2] = vec3 ( 27,  -27,   27);\n     sclFac = 0.015;\n  } else if (knType == 2) {  // 4.1 figure 8 knot\n     knc[0] = vec3 (  32,   94,   16);  kns[0] = vec3 (-51,   41,   73);\n     knc[1] = vec3 (-104,  113, -211);  kns[1] = vec3 (-34,    0,  -39);\n     knc[2] = vec3 ( 104,  -68,  -99);  kns[2] = vec3 (-91, -124,  -21);\n     sclFac = 0.008;\n  } else if (knType == 3) {  // 5.1 knot\n     knc[0] = vec3 (  88,   89,   44);  kns[0] = vec3 ( 115,  -32,  -69);\n     knc[1] = vec3 (-475, -172,   34);  kns[1] = vec3 (-127,  294,  223);\n     knc[2] = vec3 ( -87,   76,   16);  kns[2] = vec3 (  36,  102,  120);\n     knc[3] = vec3 (  11,  -61,   42);  kns[3] = vec3 ( -19,  113, -125);\n     sclFac = 0.0045;\n  } else if (knType == 4) {  // 5.2 knot\n     knc[0] = vec3 ( -33,  -57,   34);  kns[0] = vec3 ( 43,   99, -21);\n     knc[1] = vec3 (   0,  -54, -100);  kns[1] = vec3 (214, -159, -93);\n     knc[2] = vec3 (-101, -117,  -27);  kns[2] = vec3 (-47,   -5, -16);\n     knc[3] = vec3 (   0,  -31,   52);  kns[3] = vec3 ( 11,  -45,  84);\n     sclFac = 0.008;\n  } else if (knType == 5) {  // granny knot\n     knc[0] = vec3 (-22,   0,  0);  kns[0] = vec3 (-128,   0,   0);\n     knc[1] = vec3 (  0, -10,  0);  kns[1] = vec3 (   0, -27,   0);\n     knc[2] = vec3 (-44,   0, 70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[3] = vec3 (  0,  38,  0);  kns[3] = vec3 (   0,  38,   0);\n     sclFac = 0.016;\n  } else if (knType == 6) {  // square knot\n     knc[0] = vec3 ( -22,  11,   0);  kns[0] = vec3 (-128,   0,   0);\n     knc[2] = vec3 ( -44, -43,  70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[4] = vec3 (   0,  34,   8);  kns[4] = vec3 (   0, -39,  -9);\n     sclFac = 0.016;\n  } else if (knType == 7) {  // 6.1 knot\n     knc[0] = vec3 (  12,   29,  -30);  kns[0] = vec3 ( 20,  78, -78);\n     knc[1] = vec3 (-163, -180, -111);  kns[1] = vec3 ( 76,  58,  37);\n     knc[2] = vec3 ( -87,   88,  -67);  kns[2] = vec3 (-15,  72, -51);\n     knc[3] = vec3 ( -21,    0,   31);  kns[3] = vec3 ( 14, -14,   8);\n     knc[4] = vec3 (  24,    0,  -11);  kns[4] = vec3 (-50,   0,  65);\n     sclFac = 0.008;\n  } else if (knType == 8) {  // 6.2 knot\n     knc[0] = vec3 (  -6,  -21,  -18);  kns[0] = vec3 (-21,  -24,  -13);\n     knc[1] = vec3 (-195, -207,  113);  kns[1] = vec3 ( 92,  -72, -107);\n     knc[2] = vec3 ( -64,  112,   86);  kns[2] = vec3 (-23,   -7,   -9);\n     knc[3] = vec3 (  -6,  -13,  -26);  kns[3] = vec3 ( 13,  -40,   -7);\n     knc[4] = vec3 (  24,  -27,   24);  kns[4] = vec3 ( 15,   -3,   33);\n     knc[5] = vec3 (   0,  -17,   21);  kns[5] = vec3 ( 41,    0,   31);\n     sclFac = 0.008;\n  } else if (knType == 9) {  // 6.3 knot\n     knc[0] = vec3 (-40,   90,  52);  kns[0] = vec3 ( 32,  89,  64);\n     knc[1] = vec3 ( 69, -142,  53);  kns[1] = vec3 (-12, 147,  35);\n     knc[2] = vec3 (120,   74,  77);  kns[2] = vec3 (-52,  85, -87);\n     knc[3] = vec3 (-56,    0, 101);  kns[3] = vec3 ( 46, -56, -19);\n     knc[4] = vec3 (  0,   23,  -5);  kns[4] = vec3 (-17,   0,   2);\n     knc[5] = vec3 ( 14,   16,   3);  kns[5] = vec3 ( 19,   7,   9);\n     sclFac = 0.008;\n  } else if (knType == 10) {  // 7.2 Knot\n     knc[0] = vec3 (  10, 42, 0);  kns[0] = vec3 (115, -104, 30);\n     knc[1] = vec3 (-184, -252,  20);  kns[1] = vec3 ( 10,  47,  19);\n     knc[2] = vec3 (   0,  -21,   6);  kns[2] = vec3 (101, -65, -31);\n     knc[3] = vec3 (  23,  -23,  -4);  kns[3] = vec3 ( 55, -23, -24);\n     knc[4] = vec3 ( -38,   36, -44);  kns[4] = vec3 ( -6, -10, -50);\n     knc[5] = vec3 ( -14,  -13,  31);  kns[5] = vec3 ( 8,    2,  39);\n     knc[6] = vec3 (  16,  -18, -16);  kns[6] = vec3 ( 14,  -9,  23);\n     sclFac = 0.007;\n  } else if (knType == 11) {  // 7.7 Knot\n     knc[0] = vec3 ( -5,   17, -28);  kns[0] = vec3 (  0,   21,   9);\n     knc[1] = vec3 (  8, -174, 110);  kns[1] = vec3 ( 83,   13,   4);\n     knc[2] = vec3 ( 87,  -15,  11);  kns[2] = vec3 (100,    3,  -6);\n     knc[3] = vec3 ( -5,   -9, -46);  kns[3] = vec3 ( 22,   46, -17);\n     knc[4] = vec3 (-10,   16,  32);  kns[4] = vec3 ( 10,  -25,  -9);\n     knc[5] = vec3 ( -2,  -21, -12);  kns[5] = vec3 (-10,    7,  -9);\n     knc[6] = vec3 (  5,   -9,  -9);  kns[6] = vec3 (  6,   -3,  18);\n     sclFac = 0.01;\n  }\n}\n\nvec3 KtPoint (float a)\n{\n  vec3 r;\n  float f;\n  r = vec3 (0.);\n  for (int k = 0; k < N_KNOT; k ++) {\n    f = float (k + 1) * a;\n    r += knc[k] * cos (f) + kns[k] * sin (f);\n  }\n  return sclFac * r;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 rmN, rmN1, rmN2, dr, dr1, dr2, am;\n  float fOvlap, fBend, rSep, c11, c22, c12, cd, c, dt;\n  int k1, k2;\n  fOvlap = 50.;\n  fBend = 1000.;\n  rm = Loadv4 (2 * mId).xyz;\n  vm = Loadv4 (2 * mId + 1).xyz;\n  am = vec3 (0.);\n  for (int n = 0; n < lenChain; n ++) {\n    if (n != mId) {\n      rmN = Loadv4 (2 * n).xyz;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || n == mId + 1 || n == mId - 1 ||\n         mId == 0 && n == lenChain - 1 || mId == lenChain - 1 && n == 0)\n         am += fOvlap * (1. - rSep) * normalize (dr);\n    }\n  }\n  for (int m = 0; m < 4; m ++) {\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      if (k1 < 0) k1 += lenChain;\n      k2 -= 2;\n      if (k2 < 0) k2 += lenChain;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      if (k1 < 0) k1 += lenChain;\n      k2 += 1;\n      if (k2 > lenChain - 1) k2 -= lenChain;\n    } else if (m == 3) {\n      k1 += 1;\n      if (k1 > lenChain - 1) k1 -= lenChain;\n      k2 += 2;\n      if (k2 > lenChain - 1) k2 -= lenChain;\n    }\n    rmN1 = Loadv4 (2 * k1).xyz;\n    rmN2 = Loadv4 (2 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  rm = 8. * KtPoint (2. * pi * mIdf / float (lenChain));\n  vm = 0.5 * normalize (vec3 (Hashff (mIdf), Hashff (mIdf), Hashff (mIdf)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 rm, vm, wgBxC;\n  vec2 canvas, iFrag;\n  float nStep, asp;\n  int mId, pxId;\n  bool doInit;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * lenChain + 2) discard;\n  asp = canvas.x / canvas.y;\n  wgBxC = vec3 (0.48 * asp, -0.46, 0.02);\n  if (iFrame <= 5) {\n    doInit = true;\n    spRad = float (lenChain) / 9.;\n    knType = N_KNOT;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (2 * lenChain);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    knType = int (stDat.z);\n    ++ nStep;\n  }\n  mPtrP.z = Loadv4 (2 * lenChain + 1).z;\n  if (mPtr.z > 0.) {\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBxC.xy) < wgBxC.z) {\n      if (mPtrP.z <= 0.) doInit = true;\n    }\n  }\n  if (nStep > 10000.) doInit = true;\n  if (doInit) {\n    if (++ knType > N_KNOT) knType = 1;\n    KtSetup ();\n    nStep = 0.;\n  }\n  if (pxId < 2 * lenChain) {\n    mId = pxId / 2;\n    if (doInit) Init (mId, rm, vm);\n    else Step (mId, rm, vm);\n    if      (pxId == 2 * mId) stDat = vec4 (rm, 0.);\n    else if (pxId == 2 * mId + 1) stDat = vec4 (vm, 0.);\n  } else {\n    if (pxId == 2 * lenChain) stDat = vec4 (nStep, spRad, float (knType), 0.);\n    else if (pxId == 2 * lenChain + 1) stDat = vec4 (mPtr.xyz, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Knot Dynamics\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define N_KNOT  11\nvec3 knc[N_KNOT], kns[N_KNOT];\nfloat sclFac;\nint knType;\n\nconst int lenChain = 256;\nfloat spRad;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\n// Knot parametrizations from A.K. Trautwein thesis (University of Iowa, 1995) (many more)\n\nvoid KtSetup ()\n{\n  for (int k = 0; k < N_KNOT; k ++) {\n    knc[k] = vec3 (0);  kns[k] = vec3 (0);\n  }\n  if (knType == 1) {  // 3.1 trefoil knot\n     knc[0] = vec3 ( 41,   36,   0);   kns[0] = vec3 (-18,   27,   45);\n     knc[1] = vec3 (-83, -113,  -30);  kns[1] = vec3 (-83,   30,  113);\n     knc[2] = vec3 (-11,   11,  -11);  kns[2] = vec3 ( 27,  -27,   27);\n     sclFac = 0.015;\n  } else if (knType == 2) {  // 4.1 figure 8 knot\n     knc[0] = vec3 (  32,   94,   16);  kns[0] = vec3 (-51,   41,   73);\n     knc[1] = vec3 (-104,  113, -211);  kns[1] = vec3 (-34,    0,  -39);\n     knc[2] = vec3 ( 104,  -68,  -99);  kns[2] = vec3 (-91, -124,  -21);\n     sclFac = 0.008;\n  } else if (knType == 3) {  // 5.1 knot\n     knc[0] = vec3 (  88,   89,   44);  kns[0] = vec3 ( 115,  -32,  -69);\n     knc[1] = vec3 (-475, -172,   34);  kns[1] = vec3 (-127,  294,  223);\n     knc[2] = vec3 ( -87,   76,   16);  kns[2] = vec3 (  36,  102,  120);\n     knc[3] = vec3 (  11,  -61,   42);  kns[3] = vec3 ( -19,  113, -125);\n     sclFac = 0.0045;\n  } else if (knType == 4) {  // 5.2 knot\n     knc[0] = vec3 ( -33,  -57,   34);  kns[0] = vec3 ( 43,   99, -21);\n     knc[1] = vec3 (   0,  -54, -100);  kns[1] = vec3 (214, -159, -93);\n     knc[2] = vec3 (-101, -117,  -27);  kns[2] = vec3 (-47,   -5, -16);\n     knc[3] = vec3 (   0,  -31,   52);  kns[3] = vec3 ( 11,  -45,  84);\n     sclFac = 0.008;\n  } else if (knType == 5) {  // granny knot\n     knc[0] = vec3 (-22,   0,  0);  kns[0] = vec3 (-128,   0,   0);\n     knc[1] = vec3 (  0, -10,  0);  kns[1] = vec3 (   0, -27,   0);\n     knc[2] = vec3 (-44,   0, 70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[3] = vec3 (  0,  38,  0);  kns[3] = vec3 (   0,  38,   0);\n     sclFac = 0.016;\n  } else if (knType == 6) {  // square knot\n     knc[0] = vec3 ( -22,  11,   0);  kns[0] = vec3 (-128,   0,   0);\n     knc[2] = vec3 ( -44, -43,  70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[4] = vec3 (   0,  34,   8);  kns[4] = vec3 (   0, -39,  -9);\n     sclFac = 0.016;\n  } else if (knType == 7) {  // 6.1 knot\n     knc[0] = vec3 (  12,   29,  -30);  kns[0] = vec3 ( 20,  78, -78);\n     knc[1] = vec3 (-163, -180, -111);  kns[1] = vec3 ( 76,  58,  37);\n     knc[2] = vec3 ( -87,   88,  -67);  kns[2] = vec3 (-15,  72, -51);\n     knc[3] = vec3 ( -21,    0,   31);  kns[3] = vec3 ( 14, -14,   8);\n     knc[4] = vec3 (  24,    0,  -11);  kns[4] = vec3 (-50,   0,  65);\n     sclFac = 0.008;\n  } else if (knType == 8) {  // 6.2 knot\n     knc[0] = vec3 (  -6,  -21,  -18);  kns[0] = vec3 (-21,  -24,  -13);\n     knc[1] = vec3 (-195, -207,  113);  kns[1] = vec3 ( 92,  -72, -107);\n     knc[2] = vec3 ( -64,  112,   86);  kns[2] = vec3 (-23,   -7,   -9);\n     knc[3] = vec3 (  -6,  -13,  -26);  kns[3] = vec3 ( 13,  -40,   -7);\n     knc[4] = vec3 (  24,  -27,   24);  kns[4] = vec3 ( 15,   -3,   33);\n     knc[5] = vec3 (   0,  -17,   21);  kns[5] = vec3 ( 41,    0,   31);\n     sclFac = 0.008;\n  } else if (knType == 9) {  // 6.3 knot\n     knc[0] = vec3 (-40,   90,  52);  kns[0] = vec3 ( 32,  89,  64);\n     knc[1] = vec3 ( 69, -142,  53);  kns[1] = vec3 (-12, 147,  35);\n     knc[2] = vec3 (120,   74,  77);  kns[2] = vec3 (-52,  85, -87);\n     knc[3] = vec3 (-56,    0, 101);  kns[3] = vec3 ( 46, -56, -19);\n     knc[4] = vec3 (  0,   23,  -5);  kns[4] = vec3 (-17,   0,   2);\n     knc[5] = vec3 ( 14,   16,   3);  kns[5] = vec3 ( 19,   7,   9);\n     sclFac = 0.008;\n  } else if (knType == 10) {  // 7.2 Knot\n     knc[0] = vec3 (  10, 42, 0);  kns[0] = vec3 (115, -104, 30);\n     knc[1] = vec3 (-184, -252,  20);  kns[1] = vec3 ( 10,  47,  19);\n     knc[2] = vec3 (   0,  -21,   6);  kns[2] = vec3 (101, -65, -31);\n     knc[3] = vec3 (  23,  -23,  -4);  kns[3] = vec3 ( 55, -23, -24);\n     knc[4] = vec3 ( -38,   36, -44);  kns[4] = vec3 ( -6, -10, -50);\n     knc[5] = vec3 ( -14,  -13,  31);  kns[5] = vec3 ( 8,    2,  39);\n     knc[6] = vec3 (  16,  -18, -16);  kns[6] = vec3 ( 14,  -9,  23);\n     sclFac = 0.007;\n  } else if (knType == 11) {  // 7.7 Knot\n     knc[0] = vec3 ( -5,   17, -28);  kns[0] = vec3 (  0,   21,   9);\n     knc[1] = vec3 (  8, -174, 110);  kns[1] = vec3 ( 83,   13,   4);\n     knc[2] = vec3 ( 87,  -15,  11);  kns[2] = vec3 (100,    3,  -6);\n     knc[3] = vec3 ( -5,   -9, -46);  kns[3] = vec3 ( 22,   46, -17);\n     knc[4] = vec3 (-10,   16,  32);  kns[4] = vec3 ( 10,  -25,  -9);\n     knc[5] = vec3 ( -2,  -21, -12);  kns[5] = vec3 (-10,    7,  -9);\n     knc[6] = vec3 (  5,   -9,  -9);  kns[6] = vec3 (  6,   -3,  18);\n     sclFac = 0.01;\n  }\n}\n\nvec3 KtPoint (float a)\n{\n  vec3 r;\n  float f;\n  r = vec3 (0.);\n  for (int k = 0; k < N_KNOT; k ++) {\n    f = float (k + 1) * a;\n    r += knc[k] * cos (f) + kns[k] * sin (f);\n  }\n  return sclFac * r;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 rmN, rmN1, rmN2, dr, dr1, dr2, am;\n  float fOvlap, fBend, rSep, c11, c22, c12, cd, c, dt;\n  int k1, k2;\n  fOvlap = 50.;\n  fBend = 1000.;\n  rm = Loadv4 (2 * mId).xyz;\n  vm = Loadv4 (2 * mId + 1).xyz;\n  am = vec3 (0.);\n  for (int n = 0; n < lenChain; n ++) {\n    if (n != mId) {\n      rmN = Loadv4 (2 * n).xyz;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || n == mId + 1 || n == mId - 1 ||\n         mId == 0 && n == lenChain - 1 || mId == lenChain - 1 && n == 0)\n         am += fOvlap * (1. - rSep) * normalize (dr);\n    }\n  }\n  for (int m = 0; m < 4; m ++) {\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      if (k1 < 0) k1 += lenChain;\n      k2 -= 2;\n      if (k2 < 0) k2 += lenChain;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      if (k1 < 0) k1 += lenChain;\n      k2 += 1;\n      if (k2 > lenChain - 1) k2 -= lenChain;\n    } else if (m == 3) {\n      k1 += 1;\n      if (k1 > lenChain - 1) k1 -= lenChain;\n      k2 += 2;\n      if (k2 > lenChain - 1) k2 -= lenChain;\n    }\n    rmN1 = Loadv4 (2 * k1).xyz;\n    rmN2 = Loadv4 (2 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  rm = 8. * KtPoint (2. * pi * mIdf / float (lenChain));\n  vm = 0.5 * normalize (vec3 (Hashff (mIdf), Hashff (mIdf), Hashff (mIdf)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 rm, vm, wgBxC;\n  vec2 canvas, iFrag;\n  float nStep, asp;\n  int mId, pxId;\n  bool doInit;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * lenChain + 2) discard;\n  asp = canvas.x / canvas.y;\n  wgBxC = vec3 (0.48 * asp, -0.46, 0.02);\n  if (iFrame <= 5) {\n    doInit = true;\n    spRad = float (lenChain) / 9.;\n    knType = N_KNOT;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (2 * lenChain);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    knType = int (stDat.z);\n    ++ nStep;\n  }\n  mPtrP.z = Loadv4 (2 * lenChain + 1).z;\n  if (mPtr.z > 0.) {\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBxC.xy) < wgBxC.z) {\n      if (mPtrP.z <= 0.) doInit = true;\n    }\n  }\n  if (nStep > 10000.) doInit = true;\n  if (doInit) {\n    if (++ knType > N_KNOT) knType = 1;\n    KtSetup ();\n    nStep = 0.;\n  }\n  if (pxId < 2 * lenChain) {\n    mId = pxId / 2;\n    if (doInit) Init (mId, rm, vm);\n    else Step (mId, rm, vm);\n    if      (pxId == 2 * mId) stDat = vec4 (rm, 0.);\n    else if (pxId == 2 * mId + 1) stDat = vec4 (vm, 0.);\n  } else {\n    if (pxId == 2 * lenChain) stDat = vec4 (nStep, spRad, float (knType), 0.);\n    else if (pxId == 2 * lenChain + 1) stDat = vec4 (mPtr.xyz, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Knot Dynamics\"  by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define N_KNOT  11\nvec3 knc[N_KNOT], kns[N_KNOT];\nfloat sclFac;\nint knType;\n\nconst int lenChain = 256;\nfloat spRad;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\n// Knot parametrizations from A.K. Trautwein thesis (University of Iowa, 1995) (many more)\n\nvoid KtSetup ()\n{\n  for (int k = 0; k < N_KNOT; k ++) {\n    knc[k] = vec3 (0);  kns[k] = vec3 (0);\n  }\n  if (knType == 1) {  // 3.1 trefoil knot\n     knc[0] = vec3 ( 41,   36,   0);   kns[0] = vec3 (-18,   27,   45);\n     knc[1] = vec3 (-83, -113,  -30);  kns[1] = vec3 (-83,   30,  113);\n     knc[2] = vec3 (-11,   11,  -11);  kns[2] = vec3 ( 27,  -27,   27);\n     sclFac = 0.015;\n  } else if (knType == 2) {  // 4.1 figure 8 knot\n     knc[0] = vec3 (  32,   94,   16);  kns[0] = vec3 (-51,   41,   73);\n     knc[1] = vec3 (-104,  113, -211);  kns[1] = vec3 (-34,    0,  -39);\n     knc[2] = vec3 ( 104,  -68,  -99);  kns[2] = vec3 (-91, -124,  -21);\n     sclFac = 0.008;\n  } else if (knType == 3) {  // 5.1 knot\n     knc[0] = vec3 (  88,   89,   44);  kns[0] = vec3 ( 115,  -32,  -69);\n     knc[1] = vec3 (-475, -172,   34);  kns[1] = vec3 (-127,  294,  223);\n     knc[2] = vec3 ( -87,   76,   16);  kns[2] = vec3 (  36,  102,  120);\n     knc[3] = vec3 (  11,  -61,   42);  kns[3] = vec3 ( -19,  113, -125);\n     sclFac = 0.0045;\n  } else if (knType == 4) {  // 5.2 knot\n     knc[0] = vec3 ( -33,  -57,   34);  kns[0] = vec3 ( 43,   99, -21);\n     knc[1] = vec3 (   0,  -54, -100);  kns[1] = vec3 (214, -159, -93);\n     knc[2] = vec3 (-101, -117,  -27);  kns[2] = vec3 (-47,   -5, -16);\n     knc[3] = vec3 (   0,  -31,   52);  kns[3] = vec3 ( 11,  -45,  84);\n     sclFac = 0.008;\n  } else if (knType == 5) {  // granny knot\n     knc[0] = vec3 (-22,   0,  0);  kns[0] = vec3 (-128,   0,   0);\n     knc[1] = vec3 (  0, -10,  0);  kns[1] = vec3 (   0, -27,   0);\n     knc[2] = vec3 (-44,   0, 70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[3] = vec3 (  0,  38,  0);  kns[3] = vec3 (   0,  38,   0);\n     sclFac = 0.016;\n  } else if (knType == 6) {  // square knot\n     knc[0] = vec3 ( -22,  11,   0);  kns[0] = vec3 (-128,   0,   0);\n     knc[2] = vec3 ( -44, -43,  70);  kns[2] = vec3 ( -78,   0, -40);\n     knc[4] = vec3 (   0,  34,   8);  kns[4] = vec3 (   0, -39,  -9);\n     sclFac = 0.016;\n  } else if (knType == 7) {  // 6.1 knot\n     knc[0] = vec3 (  12,   29,  -30);  kns[0] = vec3 ( 20,  78, -78);\n     knc[1] = vec3 (-163, -180, -111);  kns[1] = vec3 ( 76,  58,  37);\n     knc[2] = vec3 ( -87,   88,  -67);  kns[2] = vec3 (-15,  72, -51);\n     knc[3] = vec3 ( -21,    0,   31);  kns[3] = vec3 ( 14, -14,   8);\n     knc[4] = vec3 (  24,    0,  -11);  kns[4] = vec3 (-50,   0,  65);\n     sclFac = 0.008;\n  } else if (knType == 8) {  // 6.2 knot\n     knc[0] = vec3 (  -6,  -21,  -18);  kns[0] = vec3 (-21,  -24,  -13);\n     knc[1] = vec3 (-195, -207,  113);  kns[1] = vec3 ( 92,  -72, -107);\n     knc[2] = vec3 ( -64,  112,   86);  kns[2] = vec3 (-23,   -7,   -9);\n     knc[3] = vec3 (  -6,  -13,  -26);  kns[3] = vec3 ( 13,  -40,   -7);\n     knc[4] = vec3 (  24,  -27,   24);  kns[4] = vec3 ( 15,   -3,   33);\n     knc[5] = vec3 (   0,  -17,   21);  kns[5] = vec3 ( 41,    0,   31);\n     sclFac = 0.008;\n  } else if (knType == 9) {  // 6.3 knot\n     knc[0] = vec3 (-40,   90,  52);  kns[0] = vec3 ( 32,  89,  64);\n     knc[1] = vec3 ( 69, -142,  53);  kns[1] = vec3 (-12, 147,  35);\n     knc[2] = vec3 (120,   74,  77);  kns[2] = vec3 (-52,  85, -87);\n     knc[3] = vec3 (-56,    0, 101);  kns[3] = vec3 ( 46, -56, -19);\n     knc[4] = vec3 (  0,   23,  -5);  kns[4] = vec3 (-17,   0,   2);\n     knc[5] = vec3 ( 14,   16,   3);  kns[5] = vec3 ( 19,   7,   9);\n     sclFac = 0.008;\n  } else if (knType == 10) {  // 7.2 Knot\n     knc[0] = vec3 (  10, 42, 0);  kns[0] = vec3 (115, -104, 30);\n     knc[1] = vec3 (-184, -252,  20);  kns[1] = vec3 ( 10,  47,  19);\n     knc[2] = vec3 (   0,  -21,   6);  kns[2] = vec3 (101, -65, -31);\n     knc[3] = vec3 (  23,  -23,  -4);  kns[3] = vec3 ( 55, -23, -24);\n     knc[4] = vec3 ( -38,   36, -44);  kns[4] = vec3 ( -6, -10, -50);\n     knc[5] = vec3 ( -14,  -13,  31);  kns[5] = vec3 ( 8,    2,  39);\n     knc[6] = vec3 (  16,  -18, -16);  kns[6] = vec3 ( 14,  -9,  23);\n     sclFac = 0.007;\n  } else if (knType == 11) {  // 7.7 Knot\n     knc[0] = vec3 ( -5,   17, -28);  kns[0] = vec3 (  0,   21,   9);\n     knc[1] = vec3 (  8, -174, 110);  kns[1] = vec3 ( 83,   13,   4);\n     knc[2] = vec3 ( 87,  -15,  11);  kns[2] = vec3 (100,    3,  -6);\n     knc[3] = vec3 ( -5,   -9, -46);  kns[3] = vec3 ( 22,   46, -17);\n     knc[4] = vec3 (-10,   16,  32);  kns[4] = vec3 ( 10,  -25,  -9);\n     knc[5] = vec3 ( -2,  -21, -12);  kns[5] = vec3 (-10,    7,  -9);\n     knc[6] = vec3 (  5,   -9,  -9);  kns[6] = vec3 (  6,   -3,  18);\n     sclFac = 0.01;\n  }\n}\n\nvec3 KtPoint (float a)\n{\n  vec3 r;\n  float f;\n  r = vec3 (0.);\n  for (int k = 0; k < N_KNOT; k ++) {\n    f = float (k + 1) * a;\n    r += knc[k] * cos (f) + kns[k] * sin (f);\n  }\n  return sclFac * r;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm)\n{\n  vec3 rmN, rmN1, rmN2, dr, dr1, dr2, am;\n  float fOvlap, fBend, rSep, c11, c22, c12, cd, c, dt;\n  int k1, k2;\n  fOvlap = 50.;\n  fBend = 1000.;\n  rm = Loadv4 (2 * mId).xyz;\n  vm = Loadv4 (2 * mId + 1).xyz;\n  am = vec3 (0.);\n  for (int n = 0; n < lenChain; n ++) {\n    if (n != mId) {\n      rmN = Loadv4 (2 * n).xyz;\n      dr = rm - rmN;\n      rSep = length (dr);\n      if (rSep < 1. || n == mId + 1 || n == mId - 1 ||\n         mId == 0 && n == lenChain - 1 || mId == lenChain - 1 && n == 0)\n         am += fOvlap * (1. - rSep) * normalize (dr);\n    }\n  }\n  for (int m = 0; m < 4; m ++) {\n    k1 = mId;\n    k2 = mId;\n    if (m == 0) {\n      k1 -= 1;\n      if (k1 < 0) k1 += lenChain;\n      k2 -= 2;\n      if (k2 < 0) k2 += lenChain;\n    } else if (m == 1 || m == 2) {\n      k1 -= 1;\n      if (k1 < 0) k1 += lenChain;\n      k2 += 1;\n      if (k2 > lenChain - 1) k2 -= lenChain;\n    } else if (m == 3) {\n      k1 += 1;\n      if (k1 > lenChain - 1) k1 -= lenChain;\n      k2 += 2;\n      if (k2 > lenChain - 1) k2 -= lenChain;\n    }\n    rmN1 = Loadv4 (2 * k1).xyz;\n    rmN2 = Loadv4 (2 * k2).xyz;\n    if (m == 0) {\n      dr1 = rmN1 - rmN2;\n      dr2 = rm - rmN1;\n    } else if (m == 1 || m == 2) {\n      dr1 = rm - rmN1;\n      dr2 = rmN2 - rm;\n    } else if (m == 3) {\n      dr1 = rmN1 - rm;\n      dr2 = rmN2 - rmN1;\n    }\n    c11 = dot (dr1, dr1);\n    c12 = dot (dr1, dr2);\n    c22 = dot (dr2, dr2);\n    cd = sqrt (c11 * c22);\n    c = c12 / cd - 1.;\n    if (m == 0 || m == 3) c = - c;\n    am += fBend * (c / cd) * ((m <= 1) ? dr1 - (c12 / c22) * dr2 : (c12 / c11) * dr1 - dr2);\n  }  \n  dr = rm - spRad * normalize (rm);\n  rSep = length (dr);\n  if (rSep < 1.) am += fOvlap * (1. - rSep) * normalize (dr);\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  rm = 8. * KtPoint (2. * pi * mIdf / float (lenChain));\n  vm = 0.5 * normalize (vec3 (Hashff (mIdf), Hashff (mIdf), Hashff (mIdf)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 rm, vm, wgBxC;\n  vec2 canvas, iFrag;\n  float nStep, asp;\n  int mId, pxId;\n  bool doInit;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2 * lenChain + 2) discard;\n  asp = canvas.x / canvas.y;\n  wgBxC = vec3 (0.48 * asp, -0.46, 0.02);\n  if (iFrame <= 5) {\n    doInit = true;\n    spRad = float (lenChain) / 9.;\n    knType = N_KNOT;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (2 * lenChain);\n    nStep = stDat.x;\n    spRad = stDat.y;\n    knType = int (stDat.z);\n    ++ nStep;\n  }\n  mPtrP.z = Loadv4 (2 * lenChain + 1).z;\n  if (mPtr.z > 0.) {\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBxC.xy) < wgBxC.z) {\n      if (mPtrP.z <= 0.) doInit = true;\n    }\n  }\n  if (nStep > 10000.) doInit = true;\n  if (doInit) {\n    if (++ knType > N_KNOT) knType = 1;\n    KtSetup ();\n    nStep = 0.;\n  }\n  if (pxId < 2 * lenChain) {\n    mId = pxId / 2;\n    if (doInit) Init (mId, rm, vm);\n    else Step (mId, rm, vm);\n    if      (pxId == 2 * mId) stDat = vec4 (rm, 0.);\n    else if (pxId == 2 * mId + 1) stDat = vec4 (vm, 0.);\n  } else {\n    if (pxId == 2 * lenChain) stDat = vec4 (nStep, spRad, float (knType), 0.);\n    else if (pxId == 2 * lenChain + 1) stDat = vec4 (mPtr.xyz, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}