{
    "Shader": {
        "info": {
            "date": "1567435756",
            "description": "based on [url=Bumped Sinusoidal Warp]https://www.shadertoy.com/view/4l2XWK[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "3tSSDt",
            "likes": 27,
            "name": "Warped Flower",
            "published": 3,
            "tags": [
                "flower",
                "warped"
            ],
            "usePreview": 1,
            "username": "aiekick",
            "viewed": 868
        },
        "renderpass": [
            {
                "code": "#define AA 2\n#define COUNT_PETALS \t5.\n#define TIME_SPEED \t\t0.5\n#define BUMP_FACTOR     0.05\n#define MOVE_SPEED\t\t0.0\n\nvec3 sdf(vec2 p, float t)\n{\n    p = vec2(atan(p.x+sin(t * MOVE_SPEED)*0.5,p.y), length(p * 3.5)); \t// cart to polar\n    for (int i=0; i<3; i++)\n\t{\n\t\tp.y += cos(p.x * COUNT_PETALS - t)/3.; \t// l warping \n\t\tp.x += sin(p.y * 4. - t*2.)/3.;\t\t\t// a warping\n    }\n\tp = vec2(cos(p.x), sin(p.x)) * p.y; \t\t// polar to cart\n\tp = abs(fract(p)-0.5);\t\t\t\t\t\t// domain repeat\n\treturn vec3(length(p), p);\n}\n\nvec4 render(in vec2 v, in vec2 o)\n{\n    float t = iTime * TIME_SPEED; \n\t\n    vec2 uv = (v + o - iResolution.xy*0.5)/iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.));\n\n\t// light point\n    vec3 lp = vec3(cos(iTime)*0.5, sin(iTime)*0.2, -1.);\n\t\n\t// bump mapping\n\tvec2 eps = vec2(5./iResolution.y, 0.);\n    vec3 f = sdf(uv, t);\n    float fx = (sdf(uv-eps.xy, t).x-f.x)/eps.x;\n    float fy = (sdf(uv-eps.yx, t).x-f.x)/eps.x;\n\tvec3 n = normalize( vec3(0., 0., -1) + vec3(fx, fy, -1.) * BUMP_FACTOR );           \n\t\n\t// distance to light point\n\tvec3 ld = lp - vec3(uv,0);\n\tfloat lDist = max(length(ld), 0.001);\n\tld /= lDist;\n    float atten = (f.x*0.9+0.1)/(1.0 + lDist*lDist*0.15);\n\t\n\t// diffuse\n\tfloat diff = max(dot(n, ld), 0.);  \n    diff = pow(diff, 4.)*0.7 + pow(diff, 8.)*0.3; \n\t\n\t// specular\n    float spec = pow(max(dot( reflect(-ld, n), -rd), 0.), 12.); \n    \n\t// texture\n\tvec3 col = texture(iChannel0, uv + f.yz).xyz; \n    col = smoothstep(0.05, .75, pow(col*col, vec3(.75, .8, .85)));    \n    \n\t// final light\n\tcol = (col * (diff*vec3(0.496, 0.853, 1.0)*2. + 0.5) + vec3(1)*spec*2.)*atten;\n\treturn vec4(sqrt(clamp(col, 0., 1.)), 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    int _AA = max(AA,1); // avoid div by 0 at line 69\n    \n\tfor(int i=0;i<_AA;i++)\n    for(int j=0;j<_AA;j++)\n        fragColor += render(fragCoord, vec2(i,j) / float(_AA));\n    \n    fragColor /= float(_AA * _AA);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}