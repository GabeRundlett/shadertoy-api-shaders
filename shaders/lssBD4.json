{
    "Shader": {
        "info": {
            "date": "1496269342",
            "description": "...",
            "flags": 0,
            "hasliked": 0,
            "id": "lssBD4",
            "likes": 5,
            "name": "RGB Tunnel 2",
            "published": 3,
            "tags": [
                "tunnel",
                "rgb",
                "rotation",
                "morph"
            ],
            "usePreview": 0,
            "username": "kekwizard",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "float time = 0.1;\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat mixV(float a, float b, float d) {\n\treturn (d * a)+(1.0 - d)*b;\n}\n\nfloat map(vec3 p)\n{\n\n    vec3 q = p;\n\n    vec3 c = vec3(0.175);\n    p.z = mod(p.z,c.z)-0.5*c.z; // p.z -0.05 - 0.05\n\n    \n    vec3 p_s;\n    \n    p = p * rotationMatrix(vec3(0.0, 0.0, 1.0), (time * 0.14) + sin(time * 0.17));\n    \n    float bars = 1000.0;\n    \n    \n    const int sides = 16;//int(sin(iTime /6.0) * 5.0) + 5;\n    float angle = 3.1415 * 2.0 / float(sides);\n    \n    for ( int i = 0; i < sides; i ++)\n    {\n        \n        p_s = p * rotationMatrix(vec3(0.0, 0.0, 1.0), angle * float(i));\n        \n       \tp_s += vec3(sin(q.z) * cos(q.z * 1.2) * 2.0, sin(q.z) + 1.0, 0.0);\n        p_s += vec3(0.4 + .25 * sin(time * 0.2), 0.4 + .2 * sin(time * 0.3), 0.0);\n\n     \tvec3 boxdim = vec3(\n            0.075 + 0.02 *  sin(iTime / 5.7) , //* sin(length(p.xy * 20.0))* 0.2, \n            0.1, \n            0.05  + 0.05 * sin(iTime / 3.2));\n        \n        float boxValue = sdBox(p_s, boxdim);\n        //float torusValue = sdTorus(p_s, vec2(.1)) * 0.01;\n        \n        bars = min(bars, boxValue);  \n    }\n\n        \n    \n    float result = bars;   \n    return result;\n}\n\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = time;\n    // ro.y -= sin(iTime) * .5;\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   \n    time = iTime * 1.5;\n    vec2 _p = (iResolution.xy - 2.0 * fragCoord.xy) / iResolution.y;\n    vec3 ray = normalize(vec3(_p, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);  \n    \n        \n    float depth = 0.0, d = 0.0, iter = 0.0;\n    vec3 p;\n    \n    for( int i = 0; i < 80; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d < 0.0001) {\n\t\t\thit = true;\n            break;\n        }\n                   \n\t\tdepth += d * 0.25;\n\t\titer++;\n                   \n    }\n    \n    vec3 col = vec3(1.0 - iter / 80.0);\n    \n    const vec3 a = vec3(0.5, 0.5, 0.5);\n    const vec3 b = vec3(0.5, 0.5, 0.5);\n    const vec3 c = vec3(2., 1., 0.);\n    const vec3 da = vec3(0.5, 0.2, 0.25);\n\n    /*\n    const vec3 a = vec3(0.5, 0.5, 0.5);\n    const vec3 b = vec3(0.5, 0.5, 0.5);\n    const vec3 c = vec3(1., 1., 0.5);\n    const vec3 da = vec3(0.8, 0.9, 0.3);\n\t*/\n    \n    \n    vec3 sq = sqrt(col);\n    \n    vec3 gg = palette(sq.x * sq.y * sq.z, a, b, c, da);\n\n    fragColor = vec4(gg, 0.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}