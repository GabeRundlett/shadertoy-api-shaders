{
    "Shader": {
        "info": {
            "date": "1569479053",
            "description": "Free Lines",
            "flags": 32,
            "hasliked": 0,
            "id": "wd3GDs",
            "likes": 5,
            "name": "Free Lines",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "shackle",
            "viewed": 431
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col =texture(iChannel0,uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592654\n\n#define P_NUMS 15U\n#define Radius 0.005\nfloat RadicalInverse(uint Base, uint i)\n{\n    float Digit, Radical, Inverse;\n    Digit = Radical = 1.0 / float(Base);\n    Inverse = 0.0;\n    while (i > 0U) {\n        Inverse += Digit * float(i % Base);\n        Digit *= Radical;\n\n        i /= Base;\n    }\n    return Inverse;\n}\nvec2 GetPoint(uint i)\n{\n    float a = RadicalInverse(3U, i) * 2.0 * PI;\n    float b = RadicalInverse(5U, i);\n    return vec2(b * sin(a), b * cos(a));\n}\nvec3 DrawPoint(vec2 center, vec2 coord)\n{\n    float l = distance(center, coord);\n    vec3 color = vec3(0.3, 1.0, 0.0);\n\n    float f = 1.0 - smoothstep(0.0, Radius * (1.0 + length(coord)), l);\n    return color * f;\n}\nvec3 DrawLine(vec2 pos0,vec2 pos1,vec2 coord)\n{\n    vec3 color = vec3(0.3, 1.0, 0.0);\n    float d0=distance(pos0,pos1);\n    float d1=distance(pos0,coord);\n    float d2=distance(pos1,coord);\n    float f=d1+d2-d0;\n\n    return color*smoothstep(Radius,0.0,f);\n}\nvec2 NoisePos(vec2 inPos, float fre, float bias)\n{\n    inPos*=2.0*PI;\n    float p = (iTime-bias) * fre*1.0;\n    float f0 = sin(p + inPos.x) *  PI;\n    float f1 = cos(p + inPos.y) *  PI;\n    float f3 = sin(p*0.7 + f1*inPos.x + f0 * inPos.y) *  PI;\n    float f4 = cos(p*0.7 + f0*inPos.y - f1 * inPos.x);\n    return vec2(f4 * sin(f3), f4 * cos(f3));\n}\nvec3 track(vec2 inPos, vec2 coord)\n{\n    vec3 color = vec3(0.0);\n    float fre=0.08;\n    vec2  pos0 = NoisePos(inPos, fre, 0.0);\n    vec2  pos1 = NoisePos(inPos, fre, 0.05);\n    color += DrawLine(pos0,pos1,coord);\n    return color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float f = iResolution.x / iResolution.y;\n    vec2 coord = uv * 2.0 - vec2(1.0);\n    coord.x *= f;\n    vec3 color = vec3(0.0);\n\n    for (uint i = 0U; i < P_NUMS; i++) {\n        vec2 pos = GetPoint(i);\n        vec3 tpColor = track(pos, coord);\n        float fc = smoothstep(-0.7, 0.7, sin(iTime+PI*float(i)));\n        color += mix(tpColor, tpColor.zxy, fc);\n    }\n    color += texture(iChannel0, uv).xyz * 0.99;\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}