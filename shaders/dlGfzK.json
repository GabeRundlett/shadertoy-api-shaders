{
    "Shader": {
        "info": {
            "date": "1706996262",
            "description": "Tryin' to do a marcy/bubblegum thing.",
            "flags": 0,
            "hasliked": 0,
            "id": "dlGfzK",
            "likes": 1,
            "name": "Marceline-1",
            "published": 3,
            "tags": [
                "vampire"
            ],
            "usePreview": 0,
            "username": "redaphid",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "// Function to render the beam at specified coordinates with given colors\nvec3 adventure(vec3 hairColor, vec3 bodyColor, vec3 legsColor, vec2 uv) {\n    // Time-based transformation for the twisting, looping beam\n    float time = iTime;\n    float twist = sin(uv.y * 10.0 + time) * 0.1;\n    uv.x += twist;\n\n    // Directly use beamWidth to determine the width of the beam\n    float beamWidth = iMouse.x/100. + 0.08; // Adjust this value to change the beam width\n    float beam = smoothstep(beamWidth, 0.0, abs(uv.x));\n    #ifdef PAPER_CRANES\n        beamWidth = energy        \n    #endif\n    // Vertical color bands\n    float third = 1.0 / 3.0; // One third of the height\n    vec3 color;\n    if (uv.y > 1.7 * third) {\n        color = hairColor; // Top section: hair\n    } else if (uv.y > third) {\n        color = bodyColor; // Middle section: body\n    } else {\n        color = legsColor; // Bottom section: legs\n    }\n\n    // Apply the color to the beam\n    if (beam > 0.01) {\n        return color * beam; // Use beam as intensity mask\n    } else {\n        return vec3(0.0); // Transparent where beam is not present\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv.x *= iResolution.x / iResolution.y; // Aspect ratio correction\n    uv.y = (uv.y + 1.0) * 0.5; // Normalize uv.y to range from 0 to 1\n\n    // marcy color variables\n    vec3 hairColor = vec3(0.07451, 0.043137, 0.168627); // dark purple for hair\n    vec3 bodyColor = vec3(0.45098, 0.458824, 0.486275); // gray skin\n    vec3 legsColor = vec3(0.180392, 0.109804, 0.113725); // boots\n\n    // Background color\n    vec3 backgroundColor = vec3(1.0, 1.0, 0.8); // Light yellow\n\n    // Render the beam using the adventure function\n    vec3 beamColor = adventure(hairColor, bodyColor, legsColor, uv);\n    vec3 beam2Color = adventure(bodyColor, hairColor, legsColor, vec2(uv.x/2., uv.y));\n\n    // Decide whether to show beam color or background color\n    vec3 finalColor = (beamColor == vec3(0.0)) ? backgroundColor : beamColor;\n    finalColor = mix(finalColor, beam2Color, 2.);\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}