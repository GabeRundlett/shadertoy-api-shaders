{
    "Shader": {
        "info": {
            "date": "1437788127",
            "description": "Simple Text Example\n\nInitial implementation was based on https://www.shadertoy.com/view/XsBGRt\n\nI may take another pass at this and try to make it a bit more flexible.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XlfSzj",
            "likes": 2,
            "name": "Simple Text Example",
            "published": 3,
            "tags": [
                "text"
            ],
            "usePreview": 0,
            "username": "AxleMike",
            "viewed": 570
        },
        "renderpass": [
            {
                "code": "/**\n * References:\n *\n * - https://www.shadertoy.com/view/XsBGRt\n*/\n\n#define LETTER_A(position) BitCheck(0x3F, 0x48, 0x48, 0x48, 0x3F, position); position.x -= 7.0 \n#define LETTER_B(position) BitCheck(0x7F, 0x49, 0x49, 0x49, 0x36, position); position.x -= 7.0 \n#define LETTER_C(position) BitCheck(0x3E, 0x41, 0x41, 0x41, 0x41, position); position.x -= 7.0 \n#define LETTER_D(position) BitCheck(0x7F, 0x41, 0x41, 0x41, 0x3E, position); position.x -= 7.0 \n#define LETTER_E(position) BitCheck(0x7F, 0x49, 0x49, 0x49, 0x49, position); position.x -= 7.0 \n#define LETTER_F(position) BitCheck(0x7F, 0x48, 0x48, 0x48, 0x48, position); position.x -= 7.0 \n#define LETTER_G(position) BitCheck(0x3E, 0x41, 0x41, 0x49, 0x49, 0x2E, position); position.x -= 8.0 \n#define LETTER_H(position) BitCheck(0x7F, 0x8, 0x8, 0x8, 0x7F, position); position.x -= 7.0 \n#define LETTER_I(position) BitCheck(0x41, 0x41, 0x7F, 0x41, 0x41, position); position.x -= 7.0 \n#define LETTER_J(position) BitCheck(0x42, 0x41, 0x41, 0x7E, 0x40, 0x40, position); position.x -= 8.0 \n#define LETTER_K(position) BitCheck(0x7F, 0x8, 0x8, 0x14, 0x22, 0x41, position); position.x -= 8.0 \n#define LETTER_L(position) BitCheck(0x7F, 0x1, 0x1, 0x1, 0x1, position); position.x -= 7.0 \n#define LETTER_M(position) BitCheck(0x7F, 0x40, 0x20, 0x1F, 0x20, 0x40, 0x7F, position); position.x -= 9.0 \n#define LETTER_N(position) BitCheck(0x7F, 0x20, 0x18, 0x6, 0x1, 0x7F, position); position.x -= 8.0 \n#define LETTER_O(position) BitCheck(0x3E, 0x41, 0x41, 0x41, 0x41, 0x3E, position); position.x -= 8.0 \n#define LETTER_P(position) BitCheck(0x7F, 0x48, 0x48, 0x48, 0x30, position); position.x -= 7.0 \n#define LETTER_Q(position) BitCheck(0x3E, 0x41, 0x41, 0x45, 0x42, 0x3D, position); position.x -= 8.0 \n#define LETTER_R(position) BitCheck(0x7F, 0x48, 0x4C, 0x4A, 0x31, position); position.x -= 7.0 \n#define LETTER_S(position) BitCheck(0x31, 0x49, 0x49, 0x49, 0x46, position); position.x -= 7.0 \n#define LETTER_T(position) BitCheck(0x40, 0x40, 0x7F, 0x40, 0x40, position); position.x -= 7.0 \n#define LETTER_U(position) BitCheck(0x7E, 0x1, 0x1, 0x1, 0x7E, position); position.x -= 7.0 \n#define LETTER_V(position) BitCheck(0x70, 0xE, 0x1, 0xE, 0x70, position); position.x -= 7.0 \n#define LETTER_W(position) BitCheck(0x7C, 0x2, 0x1, 0x7E, 0x1, 0x2, 0x7C, position); position.x -= 9.0 \n#define LETTER_X(position) BitCheck(0x63, 0x14, 0x8, 0x14, 0x63, position); position.x -= 7.0 \n#define LETTER_Y(position) BitCheck(0x60, 0x10, 0xF, 0x10, 0x60, position); position.x -= 7.0 \n#define LETTER_Z(position) BitCheck(0x41, 0x43, 0x45, 0x49, 0x51, 0x61, position); position.x -= 8.0 \n\n#define SPACE(position) position.x -= 8.0 \n#define NEGATIVE(position) BitCheck(0x8, 0x8, 0x8, position); position.x -= 5.0 \n\n#define NUMBER_1(position) BitCheck(0x21, 0x21, 0x7F, 0x1, 0x1, position); position.x -= 7.0 \n#define NUMBER_2(position) BitCheck(0x23, 0x45, 0x49, 0x49, 0x31, position); position.x -= 7.0 \n#define NUMBER_3(position) BitCheck(0x49, 0x49, 0x49, 0x49, 0x36, position); position.x -= 7.0 \n#define NUMBER_4(position) BitCheck(0x78, 0x8, 0x8, 0x7F, 0x8, position); position.x -= 7.0 \n#define NUMBER_5(position) BitCheck(0x72, 0x49, 0x49, 0x49, 0x46, position); position.x -= 7.0 \n#define NUMBER_6(position) BitCheck(0x3E, 0x49, 0x49, 0x49, 0x26, position); position.x -= 7.0  \n#define NUMBER_7(position) BitCheck(0x41, 0x42, 0x44, 0x48, 0x50, 0x60, position); position.x -= 8.0  \n#define NUMBER_8(position) BitCheck(0x36, 0x49, 0x49, 0x49, 0x36, position); position.x -= 7.0 \n#define NUMBER_9(position) BitCheck(0x32, 0x49, 0x49, 0x49, 0x3E, position); position.x -= 7.0 \n#define NUMBER_0(position) BitCheck(0x3E, 0x41, 0x41, 0x41, 0x3E, position); position.x -= 7.0 \n\nfloat BitCheck(in int c1, in int c2, in int c3, in int c4, in int c5, in int c6, in int c7, in vec2 textPos) \n{\n    float columnBits = 0.0;\n    \n    int textColumn = int(textPos.x);\n    \n    if (textColumn == 1) { columnBits = float(c1); }\n    else if (textColumn == 2) { columnBits = float(c2); }\n    else if (textColumn == 3) { columnBits = float(c3); }\n    else if (textColumn == 4) { columnBits = float(c4); }\n    else if (textColumn == 5) { columnBits = float(c5); }\n    else if (textColumn == 6) { columnBits = float(c6); }\n    else if (textColumn == 7) { columnBits = float(c7); }\n       \n    return floor(fract(columnBits / pow(2.0, floor(textPos.y))) * 2.0);\n}\n\nfloat BitCheck(in int c1, in int c2, in int c3, in int c4, in int c5, in int c6, in vec2 textPos) \n{\n    return BitCheck(c1, c2, c3, c4, c5, c6, 0, textPos);\n}\n\nfloat BitCheck(in int c1, in int c2, in int c3, in int c4, in int c5, in vec2 textPos) \n{\n    return BitCheck(c1, c2, c3, c4, c5, 0, textPos);\n}\n\nfloat BitCheck(in int c1, in int c2, in int c3, in int c4, in vec2 textPos) \n{\n    return BitCheck(c1, c2, c3, c4, 0, textPos);\n}\n\nfloat BitCheck(in int c1, in int c2, in int c3, in vec2 textPos) \n{\n    return BitCheck(c1, c2, c3, 0, textPos);\n}\n\nfloat WriteString(in vec2 textCursor, in vec2 fragCoord, in float scale)\n{\n    textCursor *= iResolution.xy;\n        \n    fragCoord = (fragCoord.xy * iResolution.xy) / scale;\n    vec2 textPos = floor(fragCoord.xy - (textCursor.xy  / scale) + 1.0);\n    \n    if (textPos.y < 1.0 || textPos.y > 8.0)\n    {\n        return 0.0;\n    }\n    \n    float bitVal = 0.0;\n\n    bitVal += LETTER_A(textPos);\n    bitVal += LETTER_B(textPos);\n    bitVal += LETTER_C(textPos);\n    bitVal += LETTER_D(textPos);\n    bitVal += LETTER_E(textPos);\n    bitVal += LETTER_F(textPos);\n    bitVal += LETTER_G(textPos);\n    bitVal += LETTER_H(textPos);\n    bitVal += LETTER_I(textPos);\n    bitVal += LETTER_J(textPos);\n    bitVal += LETTER_K(textPos);\n    bitVal += LETTER_L(textPos);\n    bitVal += LETTER_M(textPos);\n    bitVal += LETTER_N(textPos);\n    bitVal += LETTER_O(textPos);\n    bitVal += LETTER_P(textPos);   \n    bitVal += LETTER_Q(textPos);\n    bitVal += LETTER_R(textPos);\n    bitVal += LETTER_S(textPos);    \n    bitVal += LETTER_T(textPos);  \n    bitVal += LETTER_U(textPos);  \n    bitVal += LETTER_V(textPos);    \n    bitVal += LETTER_W(textPos);\n    bitVal += LETTER_X(textPos);\n    bitVal += LETTER_Y(textPos);\n    bitVal += LETTER_Z(textPos);\n    \n    SPACE(textPos);\n    \n    bitVal += NEGATIVE(textPos);\n    bitVal += NUMBER_1(textPos);\n    bitVal += NUMBER_2(textPos);\n    bitVal += NUMBER_3(textPos);\n    bitVal += NUMBER_4(textPos);\n    bitVal += NUMBER_5(textPos);\n    bitVal += NUMBER_6(textPos);\n    bitVal += NUMBER_7(textPos);\n    bitVal += NUMBER_8(textPos);\n    bitVal += NUMBER_9(textPos);\n    bitVal += NUMBER_0(textPos);\n\n    return bitVal;\n}\n\nfloat DisplayDigit(in int digit, out vec2 textPos)\n{\n    float bitVal = 0.0;\n    \n    if(digit == 0)      { bitVal += NUMBER_0(textPos); }\n    else if(digit == 1) { bitVal += NUMBER_1(textPos); }\n    else if(digit == 2) { bitVal += NUMBER_2(textPos); }\n    else if(digit == 3) { bitVal += NUMBER_3(textPos); }\n    else if(digit == 4) { bitVal += NUMBER_4(textPos); }\n    else if(digit == 5) { bitVal += NUMBER_5(textPos); }\n    else if(digit == 6) { bitVal += NUMBER_6(textPos); }\n    else if(digit == 7) { bitVal += NUMBER_7(textPos); }\n    else if(digit == 8) { bitVal += NUMBER_8(textPos); }\n    else if(digit == 9) { bitVal += NUMBER_9(textPos); }\n    \n    return bitVal;\n}\n\nfloat WriteInteger(in vec2 textCursor, in vec2 fragCoord, in float scale, in int number)\n{\n    const int MAX_NUMBER_OF_DIGITS = 8;\n    \n    textCursor *= iResolution.xy;\n\n    fragCoord = (fragCoord.xy * iResolution.xy) / scale;\n    vec2 textPos = floor(fragCoord.xy - (textCursor.xy / scale) + 1.0);   \n    \n    if (textPos.y < 1.0 || textPos.y > 8.0)\n    {\n        return 0.0;\n\t}\n      \n    float bitVal = 0.0;\n    \n    if(number < 0)\n    {\n     \tnumber = -number;\n        bitVal += NEGATIVE(textPos);\n    }\n    \n    bool foundNonZero = false;\n    for(int i = 1; i <= MAX_NUMBER_OF_DIGITS; ++i)\n    {         \n        int digit = int(mod(float(number) / pow(10.0, float(MAX_NUMBER_OF_DIGITS - i)), 10.0));\n        foundNonZero = (digit != 0) ? true : foundNonZero;\n        \n        if(digit == 0)\n        {\n            if(foundNonZero)\n            {\n                bitVal += DisplayDigit(digit, textPos);\n            }\n        }\n        else\n        {\n            bitVal += DisplayDigit(digit, textPos);\n        }\n    }\n    return bitVal;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 textPosition = vec2(0.1, 0.1);\n\n    float textBit = WriteString(textPosition, uv, 2.0);\n    \n    textPosition = vec2(0.1, 0.3);\n    textBit += WriteInteger(textPosition, uv, 2.0, int(iTime));\n    \n    vec3 fontColor = vec3(1.0);\n    fragColor = vec4(fontColor * textBit, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}