{
    "Shader": {
        "info": {
            "date": "1694210684",
            "description": "This shader has been generated using Material Maker (and cleaned up manually).\nIt shows a modified Voronoi node that accepts inputs for density and randomness (the density is shown as BW background, and randomness is a checkerboard).",
            "flags": 0,
            "hasliked": 0,
            "id": "DtBBRK",
            "likes": 5,
            "name": "Fork Varonoi PauloFalca 388",
            "published": 3,
            "tags": [
                "materialmaker"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "// Made an example that uses an input image using the original RodzLabs Code\n// Original code by RodzLabs here - https://www.shadertoy.com/view/mt2fRy\n\nconst float density = 10.000000000;\nconst float randomness = 1.000000000;\n\nfloat in_density(vec2 uv){\n    vec4 c=texture(iChannel0,uv);\n    return (c.x+c.y+c.z)/3.0;\n}\n\nfloat in_randomness(vec2 uv){\n    vec4 c=texture(iChannel1,uv);\n    return (c.x+c.y+c.z)/3.0;\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t      dot(x, vec2(3.4562, 17.398))), vec2(3.14, 3.14))) * 43758.5);\n}\n\n// Based on https://www.shadertoy.com/view/ldl3W8\n// The MIT License\n// Copyright  2013 Inigo Quilez\nvec2 voronoi_cell_offset(int i, int np, vec2 seed, vec2 offset, vec2 size) {\n\tfloat rows = round(sqrt(float(np)));\n\tfloat rowsize = float(np)/rows;\n\tfloat row = floor(float(i)/rowsize);\n\tfloat firstcol = ceil(row*float(np)/rows);\n\tfloat cols = ceil((row+1.0)*float(np)/rows) - firstcol;\n\tvec2 c1 = vec2((float(i) - firstcol)/cols, float(row)/float(rows));\n\tvec2 c2 = vec2(((float(i+1) - firstcol))/cols, (row+1.0)/rows);\n\treturn c1+(randomness*in_randomness(offset+0.5*(c1+c2)*size)*(seed-vec2(0.5))+vec2(0.5))*(c2-c1);\n}\n\n\nvec4 variable_voronoi(vec2 x, vec2 size, vec2 stretch, vec2 seed) {\n\tx *= size;\n\tvec2 n = floor(x);\n\tvec2 f = fract(x);\n\n\tvec2 mg, mr, mc;\n\tfloat md = 8.0;\n\tfor (int j=-1; j<=1; j++)\n\tfor (int i=-1; i<=1; i++) {\n\t\tvec2 g = vec2(float(i),float(j));\n\t\tvec2 s = seed + mod(n + g + size, size);\n\t\tint np = max(1, int(in_density(fract((n + g + vec2(0.5)) / size))*density));\n\t\tfor (int p = 0; p < np; ++p) {\n\t\t\ts = rand2(s);\n\t\t\tvec2 o = voronoi_cell_offset(p, np, s, fract((n + g)/size), vec2(1.0)/size);\n\t\t\tvec2 c = g + o;\n\t\t\tvec2 r = c - f;\n\t\t\tvec2 rr = r*stretch;\n\t\t\tfloat d = dot(rr,rr);\n\n\t\t\tif (d<md) {\n\t\t\t\tmc = c;\n\t\t\t\tmd = d;\n\t\t\t\tmr = r;\n\t\t\t\tmg = g;\n\t\t\t}\n\t\t}\n\t}\n\n\tmd = 8.0;\n\tfor (int j=-2; j<=2; j++)\n\tfor (int i=-2; i<=2; i++) {\n\t\tvec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 s = seed + mod(n + g + size, size);\n\t\tint np = max(1, int(in_density(fract((n + g + vec2(0.5)) / size))*density));\n\t\tfor (int p = 0; p < np; ++p) {\n\t\t\ts = rand2(s);\n\t\t\tvec2 o = voronoi_cell_offset(p, np, s, fract((n + g)/size), vec2(1.0)/size);\n\t\t\tvec2 r = g + o - f;\n\t\t\tvec2 rr = (mr-r)*stretch;\n\t\t\tif (dot(rr,rr)>0.00001)\n\t\t\t\tmd = min(md, dot(0.5*(mr+r)*stretch, normalize((r-mr)*stretch)));\n\t\t}\n\t}\n\treturn vec4(mc+n, length((x-(mc+n))*stretch), md);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv=fragCoord/iResolution.xy;\n\n    fragColor = vec4(vec3(variable_voronoi(uv,vec2(32.0,32.0),vec2(1.0,1.0),vec2(0.190681249)).z),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}