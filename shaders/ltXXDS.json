{
    "Shader": {
        "info": {
            "date": "1439323129",
            "description": "Concept to demonstrate an alpha map to a friend.\nContents of Buf A copied from https://www.shadertoy.com/view/Md3XWn, according to @FabriceNeyret2's suggestion. Change the main buffer's iChannel0 for something else to disable it.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltXXDS",
            "likes": 3,
            "name": "Car Swiper alpha map",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "alpha"
            ],
            "usePreview": 1,
            "username": "kroltan",
            "viewed": 1294
        },
        "renderpass": [
            {
                "code": "#define tau 6.283185307179586476925286766559\n\n#define rainfall vec2(0.1, 1.0)\n#define center vec2(0.5, 0.0)\n#define radius 0.5\n#define speed .5\n\nfloat timed_angle(vec2 pos, float rawtime) {\n    float anglePercent = atan(pos.y, pos.x) / tau + 0.5;\n    float time = mod(rawtime, 3.0) - 1.0;\n    return mod(anglePercent + time, 1.0);\n}\n\nvec4 swiper(vec2 uv) {\n    vec2 pos = uv - center;\n    \n    if (length(pos) < radius && pos.y > 0.0) {\n        float t = iTime * speed;\n        float angle = timed_angle(pos, t);\n        float antiangle = 1.0 -timed_angle(pos, -t);\n        return vec4(1,1,1,1.0) * angle * antiangle;\n    } else {\n        return vec4(1,1,1,1);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    \n    vec2 offsetN = rainfall * iTime * speed;\n    vec4 texN = texture(iChannel1, uv + offsetN);\n    \n    float ratio = iResolution.x / iResolution.y;\n    fragColor = mix(tex, texN,swiper(uv).w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SCALE 2.\n#define SWIRL 1\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O -= O;\n    float s=0., s2=0., t=iTime; \n\tU = U/iResolution.xy -.5;\n    U.x += .03*sin(3.14*t);\n    float sc = pow(SCALE,-mod(t,2.)-.8);\n    U *= sc;\n    \n    for (int i=0; i<10; i++) {\n        vec2 V = abs(U+U); \n        if (max(V.x,V.y)>1.) break;\n        V = smoothstep(1.,.5,V);\n        float m = V.x*V.y;\n\t    O = mix(O,texture(iChannel0,U+.5),m);\n      //O = mix(O,texture(iChannel0,U+.5,(sc *= 2.)*.15),m);  // Andre's blurred version\n      //O = mix(O,texture(iChannel0,U+.5,sqrt((sc *= 2.)*.3)),m); //   ...\n        s = mix(s,1.,m); s2 = s2*(1.-m)*(1.-m) + m*m;\n        U*=SCALE; \n#if SWIRL\n        U.x=-U.x;\n#endif\n    }\n    \n    vec4 mean = texture(iChannel0,U,10.);\n    O = mean + (O-s*mean)/sqrt(s2); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}