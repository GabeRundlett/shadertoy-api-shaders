{
    "Shader": {
        "info": {
            "date": "1615394009",
            "description": "Uses distance to measure the third to second point length and the second to first length. Thus getting clear if it diverges to infinite or stays constant or to a point. This uses the equation f(z) = z*z + 1.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndl3zn",
            "likes": 1,
            "name": "Fractal Direct",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "float FractalPoint(in vec2 point)\n{\n    float x = point.x;\n    float y = point.y;\n\n    vec2 B = vec2(x, y);\n    vec2 BA = vec2(x*x + y*y + 1., 2.*x*y);\n    vec2 BAA = vec2(x*x*x*x + y*y*y*y + 2.*x*x - 2.*y*y - x*x*y*y + 2., x*y*4.*(1. - y*y + x*x));\n    return length(B - BA) - length(BA - BAA);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Position Point in Center screen\n    vec2 uv = (fragCoord - iResolution.xy*0.5)*0.015;\n\n    // Output to screen\n    fragColor = FractalPoint(uv) * vec4(1.,1.,1.,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}