{
    "Shader": {
        "info": {
            "date": "1726169956",
            "description": "sooth",
            "flags": 0,
            "hasliked": 0,
            "id": "lXfcD4",
            "likes": 1,
            "name": "sep122024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "// Fork of \"sep122024[flashwarning]\" by brendanluu. https://shadertoy.com/view/M3fcD4\n// 2024-09-12 19:36:42\n\n// Fork of \"sep112024\" by None. https://shadertoy.com/view/-1\n// 2024-09-12 19:36:10\n\n#define NUM_RECTANGLES 40 // Number of cards in a deck\n#define NUM_STACKS 7 // Number of stacks\n#define SPAWN_INTERVAL 0.1 // Longer interval between stack spawns\n#define RECT_WIDTH .96\n#define RECT_HEIGHT 0.98\n#define GRAVITY 0.1 // Further reduced gravity for even longer fall\n#define BOUNCE_FACTOR 0.9\n#define TRAIL_FADE_RATE 0.2 // How quickly the trail fades\n\n// Cosine based palette, 4 vec3 params\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 getRectPosition(float id, float time) {\n    float stackId = floor(id / float(NUM_RECTANGLES / NUM_STACKS));\n    float cardInStackId = mod(id, float(NUM_RECTANGLES / NUM_STACKS));\n    float spawnTime = stackId * SPAWN_INTERVAL + cardInStackId * .1;\n    \n    if (time < spawnTime) return vec2(-1.0);\n    \n    time -= spawnTime;\n    \n    vec2 spawnPos = vec2(\n        rand(vec2(stackId, 0.0)) * 0.8 + 0.1,\n        1.1 + rand(vec2(stackId, 1.0)) * 0.2\n    );\n    \n    float fallTime = 5.3;\n    float t = mod(time, fallTime * 2.0);\n    float y = t < fallTime \n        ? spawnPos.y - 0.5 * GRAVITY * t * t\n        : max(0.0, RECT_HEIGHT/2.0 + BOUNCE_FACTOR * sin((t - fallTime) * 3.14159 / fallTime) * (1.0 - (t - fallTime) / fallTime));\n    \n    return vec2(spawnPos.x + cardInStackId * 0.005, y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Color palette parameters\n    const vec3 a = vec3(1.698, 0.500, 0.500);\n    const vec3 b = vec3(-3.142, 0.500, 0.500);\n    const vec3 c = vec3(0.335, 0.990, 0.990);\n    const vec3 d = vec3(-1.012, 0.333, 0.667);\n    \n    // Generate background color using the palette\n    float bgT = iTime * 0.1; // Slow background color change\n    vec3 bgColor = palette(bgT + uv.x * 0.2 + uv.y * 0.3, a, b, c, d);\n    vec4 col = vec4(bgColor, 1.0);\n    \n    // Single loop for all rectangles\n    for (int i = 0; i < NUM_RECTANGLES; i++) {\n        vec2 rectPos = getRectPosition(float(i), iTime);\n        \n        if (rectPos.x >= 0.0) { // Check if the rectangle is active\n            float distX = abs(uv.x - rectPos.x);\n            float distY = abs(uv.y - rectPos.y);\n            \n            if (distX < RECT_WIDTH * 0.5 && distY < RECT_HEIGHT * 0.5) {\n                float t = float(i) / float(NUM_RECTANGLES) + iTime * 0.1;\n                vec3 cardColor = palette(t, a, b, c, d);\n                \n                // Calculate opacity based on distance from center\n                float centerDist = max(distX / (RECT_WIDTH * 0.5), distY / (RECT_HEIGHT * 0.5));\n                float opacity = 1.0 - pow(centerDist, 0.5); // Soften the edges\n                \n                // Apply trail effect\n                float trailFade = 1.0 - (1.0 - rectPos.y) * TRAIL_FADE_RATE;\n                opacity *= trailFade;\n                \n                opacity = clamp(opacity, 0.0, 1.0);\n                \n                vec4 color = vec4(cardColor, opacity);\n                col = color * color.a + col * (1.0 - color.a);\n            }\n        }\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}