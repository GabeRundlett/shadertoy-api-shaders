{
    "Shader": {
        "info": {
            "date": "1578382853",
            "description": "Use your mouse to control the track of particles. ",
            "flags": 32,
            "hasliked": 0,
            "id": "wtGGRD",
            "likes": 6,
            "name": "Particles (SK)",
            "published": 3,
            "tags": [
                "mouse",
                "particle",
                "swarm"
            ],
            "usePreview": 0,
            "username": "shackle",
            "viewed": 489
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0,uv).xyz,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592654\n\nuint GetIndex(vec2 fragCoord)\n{\n    return uint(fragCoord.y * iResolution.x + fragCoord.x);\n}\nvec2 Rot(vec2 v, float angle)\n{\n    return vec2(v.x * cos(angle) + v.y * sin(angle),\n        v.y * cos(angle) - v.x * sin(angle));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uint index = GetIndex(fragCoord-0.5);\n    if (index > 1000U) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    if (iFrame < 2) {\n        //float y = RadicalInverse(3U, index);\n        vec2 p = vec2(0.0,0.5);\n        fragColor = vec4(p, normalize((0.5-p)));\n        return;\n    }\n\n    vec4 data = texture(iChannel0, uv);\n    vec2 pos = data.xy;\n    vec2 dir = data.zw;\n\n    pos = pos + dir * 0.003;\n    dir = Rot(dir, 0.003 * length(dir) * cos(0.1399 * float(index)));\n\n    if (pos.x < 0.0 || pos.x > 1.0) {\n        pos.x = fract(2.0 - pos.x);\n        dir.x = -dir.x;\n    }\n    if (pos.y < 0.0 || pos.y > 1.0) {\n        pos.y = fract(2.0 - pos.y);\n        dir.y = -dir.y;\n    }\n    if (iMouse.w > 0.1) {\n        vec2 pd = iMouse.xy / iResolution.xy - pos;\n        vec2 fa = cos(length(pd)) * normalize(pd);\n        dir += 0.03 * fa;\n    } else {\n        float kt=iTime*1.0;\n        vec2 pd = 0.5+0.3*vec2(cos(kt),sin(kt)) - pos;\n        vec2 fa = cos(length(pd)) * normalize(pd);\n        dir += 0.01 * fa*(1.0+sin(kt*0.3-PI));\n    }\n\n    if (length(dir) > 1.0) {\n        dir *= 0.99;\n    }else\n    {\n        dir*=1.01;\n    }\n    fragColor = vec4(pos, dir);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 GetUV(uint index)\n{\n    float y=floor(float(index)/iResolution.x);\n    float x=float(index)-y*iResolution.x;\n    return vec2(x,y)/iResolution.xy;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy;\n\n    vec2 coord=uv*2.0-1.0;\n    coord.x*=iResolution.x/iResolution.y;\n    vec2 w=1.0/iResolution.xy;\n\n    vec3 f=vec3(0.0);\n    for(uint i=0U;i<500U;i++)\n    {\n        vec4 data=texture(iChannel0,GetUV(i));\n        vec2 pos=data.xy;\n        vec2 dir=data.zw;\n        vec2 pos2=pos+dir*0.003;\n        float fi=float(i);\n        vec3 color=abs(vec3(sin(fi),cos(0.7+2.0*fi),cos(2.7+3.0*fi)));\n        f=max(f,color*smoothstep(0.01,0.0,distance(uv,pos)+distance(uv,pos2)-0.003*length(dir)));\n    }\n    vec4 preColor=texture(iChannel1,uv);\n    fragColor=mix(preColor,5.0*vec4(vec3(f),1.0),0.05);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}