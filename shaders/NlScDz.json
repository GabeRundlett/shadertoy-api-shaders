{
    "Shader": {
        "info": {
            "date": "1649685801",
            "description": "[b]Very Slow effect, look at least for 1 min.[/b]\nThis shader just move particles on position, thats all.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "NlScDz",
            "likes": 13,
            "name": "Space particles",
            "published": 3,
            "tags": [
                "space",
                "particles",
                "art"
            ],
            "usePreview": 0,
            "username": "morimea",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "\n// Created by Danil (2022+) https://cohost.org/arugl\n\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Particles, art shader\n// self https://www.shadertoy.com/view/NlScDz\n\n\n// particle logic from https://www.shadertoy.com/view/tstSz7\n// if you need particle logic look linked above shader (and read comments there)\n// this is just \"art shader\", there just few comments\n\n\n// BufA - particles (particle movement logic in particle_data() function)\n// BufB - particles render + motion blur\n// BufC - TAA + motion blur\n\n\nvec3 ACESFitted(vec3 color);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(texture(iChannel2, fragCoord.xy/iResolution.xy).rgb, 1.0);\n    //fragColor=(fragColor*fragColor*01.6+sqrt(fragColor)*0.8);\n    \n    //fragColor=clamp(fragColor,0.,1.)*1.905;\n    fragColor=0.55*fragColor*fragColor+vec4(pow(ACESFitted(clamp(fragColor.rgb*0.65,0.,1.)),vec3(0.45)),1.)*1.32;\n    \n    \n    vec2 res = iResolution.xy/iResolution.y;\n    vec2 uv = (fragCoord.xy) / iResolution.xy - 0.5;\n    vec2 tp = pow(abs(uv*2.), vec2(3.0));\n    float d = 1.-dot(tp,tp);\n    \n    fragColor*=d;\n    fragColor.a=1.;\n    \n}\n\n\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n    color = RRTAndODTFit(color);\n    color = color * ACESOutputMat;\n    color = clamp(color, 0.0, 1.0);\n    return color;\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n// data\n// in [x,y,z,w]\n\n// (remember that 32 bit float may be 31 bit float on some GPUs)\n// x pos 0xfffff data 0xfff (uint)\n// y pos 0xfffff data 0xfff (uint)\n// z speed 0xfffff f data 0xff (uint)\n// w speed 0xfffff f data 0xff (uint)\n\n// data 0xf color id 0xfffff id \n// 0xffff timer (unused, used only to fade start particles)\n\n\n//particle movement logic in particle_data() function\n\n\nint max_lines;\nint max_particles; // per line because id 0xfffff max\n\nbool is_reset();\nvec4 particle_data(ivec2 ipx);\nfloat noise3( in vec3 x );\nfloat noise2( in vec2 p);\nvec4 loadval(ivec2 io) {return loadvalg(io, iResolution.xy);}\n\nvec4 getV(in vec2 p,float max_pos,float max_posy){\n    if (p.x < 0.001 || p.y < 0.001) return vec4(0);\n    if(ivec2(p)==ivec2(iResolution.xy)-1) return vec4(0);\n    vec4 tval=texelFetch( iChannel0, ivec2(p), 0 );\n    float p1=decodeval_pos(floatBitsToUint(tval.x))*max_pos;\n    float p2=decodeval_pos(floatBitsToUint(tval.y))*max_posy;\n    float v1=decodeval_vel(floatBitsToUint(tval.z));\n    float v2=decodeval_vel(floatBitsToUint(tval.w));\n    return vec4(p1,p2,v1,v2);\n}\n\nuvec2 extra_dat_pos(vec2 p){\n    vec4 tval=texelFetch( iChannel0, ivec2(p), 0 );\n    return uvec2(floatBitsToUint(tval.x)&0xfffu,floatBitsToUint(tval.y)&0xfffu);\n}\n\nuvec2 extra_dat_vel(vec2 p){\n    vec4 tval=texelFetch( iChannel0, ivec2(p), 0 );\n    return uvec2(floatBitsToUint(tval.z)&0xffu,floatBitsToUint(tval.w)&0xffu);\n}\n\n// get saved unique ID\nuvec2 get_id(vec2 p){\n    uvec2 v1=extra_dat_pos(p);\n    uint iret=(v1[0]<<12)|(v1[1]<<0);\n    return uvec2(iret&0xfffffu,iret>>20);\n}\n\nuint get_timer(vec2 p){\n    uvec2 v1=extra_dat_vel(p);\n    uint iret=(v1[0]<<8)|(v1[1]<<0);\n    return iret;\n}\n\nuvec2 save_id(uint id, uint color_id){\n    id=id&0xfffffu;\n    id+=color_id<<20;\n    uint a=(id>>12)&0xfffu;\n    uint b=(id>>0)&0xfffu;\n    return uvec2(a,b);\n}\n\nuvec2 save_timer(uint timer){\n    uint a=(timer>>8)&0xffu;\n    uint b=(timer>>0)&0xffu;\n    return uvec2(a,b);\n}\n\nbool destr(int id, int max_pos){\n    int sx=id%max_pos;\n    int sy=id/max_pos;\n    return particle_data(ivec2(sx,sy)).w<-0.5;\n}\n\nvec2 pack_pos(vec2 pos,uvec2 extra_val, float max_pos, float max_posy){\n    uint p1=uint((pos.x/max_pos)*float(0xfffff));\n    uint p2=uint((pos.y/max_posy)*float(0xfffff));\n    float px=uintBitsToFloat(encodeval_pos(uvec2(p1,extra_val.x)));\n    float py=uintBitsToFloat(encodeval_pos(uvec2(p2,extra_val.y)));\n    return vec2(px,py);\n}\n\nvec2 pack_vel(vec2 vel,uvec2 extra_val){\n    float vx=uintBitsToFloat(encodeval_vel(vel.x,extra_val.x));\n    float vy=uintBitsToFloat(encodeval_vel(vel.y,extra_val.y));\n    return vec2(vx,vy);\n}\n\n// save everything to pixel color\nvec4 save_all(vec2 pos, vec2 vel, uint id, uint timer, uint color_id){\n    uvec2 extra_data_pos_tid=save_id(id, color_id);\n    uvec2 extra_data_vel_tid=save_timer(timer);\n    float max_pos=iResolution.x;\n    float max_posy=iResolution.y;\n    vec2 pos_ret=pack_pos(pos,extra_data_pos_tid,max_pos,max_posy);\n    vec2 vel_ret=pack_vel(vel,extra_data_vel_tid);\n    return vec4(pos_ret,vel_ret);\n}\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nbool is_reset(){\n    ivec2 tres = ivec2(texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).xy);\n    if(tres==ivec2(iResolution.xy))return false;\n    return true;\n}\n\nvec2 get_target_pos(int id, int rsz){\n    int sx=id%rsz;\n    int sy=id/rsz;\n    return particle_data(ivec2(sx,sy)).xy;\n}\n\nvoid sim_step( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    vec2 middle = fragCoord;\n    uint self_id=0u;\n    uint color_id=0u;\n    uint timer=0u;\n    int fade_frame = max(iFrame-abs(int(texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).w))-fade_time/100,0);\n    int timer_spn_l = timer_spn+max((fade_time*4-fade_frame)*100,0);\n    float max_pos=iResolution.x;\n    float max_posy=iResolution.y;\n    int sz = int(min(max_posy,max_pos)*0.25); // use 0.25 of screen square size\n    int rsz = min(sz,max_particles); // limit max id of texture because 0xfffff max id\n    if (iFrame < 1 || is_reset()) \n    {\n        ivec2 ipx = ivec2(fragCoord);\n        if ((ipx.x + ipx.y) %2 == 0 && ipx.y % 2 == 0){\n            \n            //init\n            \n            ivec2 mid = (ipx-ivec2(iResolution.xy/2.)+ivec2(iResolution.xy/2.)%2)/2;\n            int ix = 0;int iy = 0;\n            if(mid.x<0&&mid.y>0){\n                ix=1;iy=(((max_lines))%2);\n                mid.x=abs(mid.x);\n                mid.y=(max_lines/2+0)-mid.y-iy+(((max_lines))%2);\n            }\n            \n            if(mid.x>=0&&mid.y>=0&&mid.x<rsz&&mid.y<max_lines/2+(((max_lines))%2)){\n                mid.y+=ix*(max_lines/2)+iy;\n                uint id=uint(mid.x+mid.y*rsz);\n                ivec2 tidp=ivec2(int(id)%rsz,int(id)/rsz);\n                vec2 pos=middle;\n                vec2 vel=vec2(0.);\n                timer=uint(particle_data(tidp).z);\n                color_id=0x0u;\n                fragColor = save_all(pos,vel,id,timer,color_id);\n                return;\n            }\n        }\n    } else {\n        vec4 v = vec4(0.); \n        vec2 lp=vec2(-10.);\n        bool br=false;\n        for (int x=-1; x<=1; x++) {\n            if(br)break;\n            for (int y=-1; y<=1; y++) {\n                vec2 np = fragCoord + vec2(x,y);\n                vec4 p = getV(np,max_pos,max_posy);\n                //found ball for transition\n                if(trunc(middle) == trunc(p.xy)){\n                    v = p;\n                    lp=np;\n                    br=true;\n                    break;\n                }\n            }\n        }\n        \n        \n        // movement calculations\n        if (br){\n            uvec2 tmpid = get_id(trunc(lp.xy));\n            self_id=tmpid.x;\n            color_id=tmpid.y;\n            if(destr(int(self_id),rsz)){fragColor = vec4(0.);return;}\n            \n            timer=get_timer(trunc(lp.xy));\n            //if(timer>=uint(fade_time)){fragColor=vec4(0.);return;}\n            timer+=1u;\n            vec2 dr = vec2(0);\n\n            // collision checks\n            float stress = 0.0;\n            for (int x=-2; x<=2; x++) {\n                for (int y=-2; y<=2; y++) {\n                    if (x !=0 || y != 0) \n                    {\n                        vec4 p = getV(fragCoord + vec2(x,y),max_pos,max_posy);\n                        if (p.x > 0.0) {\n                            vec2 d2 = v.xy - p.xy;\n                            float l = length(d2);\n                            float f = BALL_D - l;\n                            if (l >= 0.001* BALL_SIZE &&  f > 0.0) {\n                                float f2 = f / (BALL_D);\n                                f2 *= BALL_D;\n                                vec2 force_part = E_FORCE * normalize(d2)*f2;\n                                stress += abs(force_part.x)+abs(force_part.y);\n                                dr += force_part;\n                            }\n                        }\n                    }\n                }\n            }\n\n            dr += M *max(stress, 1.0) * vec2(0.008) * VEL_LIMIT; // bad fix for jittering\n            \n            // movement calculation\n            vec2 pos = v.xy;\n            float damp_k = length(dr)>0.001? DAMP_K : 1.0; // don't apply damping to freely flying balls\n            vec2 gravity = loadval(ivec2(0,1)).xy*maxG;\n            dr += gravity * M; // gravity\n            \n            vec2 tdir = -pos+get_target_pos(int(self_id),rsz)*loadval(ivec2(1,0)).xy;\n            tdir = tdir/loadval(ivec2(1,0)).xy;\n            if(length(tdir)>0.0001)tdir=normalize(tdir);else tdir=vec2(0.);\n            vec2 dr2 = clamp(length(tdir),0.,1.)*tdir * maxPf * M; // target pos\n            \n            \n            vec2 vel = damp_k * v.zw + dr / M + dr2 / M ;\n            vel = clamp(vel, vec2(-1.0), vec2(1.0));\n            \n            vec2 dpos = vel * VEL_LIMIT;\n            pos += dpos;\n            v.xy = pos;\n            v.xy = clamp(v.xy,vec2(BALL_SIZE *(1.0 + sin(pos.y)*0.1),BALL_SIZE),iResolution.xy-vec2(BALL_SIZE));\n            \n            if(iFrame%timer_spn_l==0){self_id+=1u;}\n            if((self_id%uint(rsz))==0u){fragColor = vec4(0.);return;}\n            \n            v=save_all(v.xy,vel,self_id,timer,color_id);\n            fragColor = v; \n        } else {\n        ivec2 ipx = ivec2(fragCoord);\n        if ((iFrame%(timer_spn_l/1)==0)&&(ipx.x + ipx.y) %2 == 0 && ipx.y % 2 == 0){\n        \n            ivec2 mid = (ipx-ivec2(iResolution.xy/2.)+ivec2(iResolution.xy/2.)%2)/2;\n            if(max_lines>11){mid.x+=(ipx.y%3)*((iFrame%2));mid.y+=max_lines/4;}\n            int ix = 0;int iy = 0;\n            if(mid.x<0&&mid.y>0){\n                ix=1;iy=(((max_lines))%2);\n                mid.x=abs(mid.x);\n                mid.y=(max_lines/2+0)-mid.y-iy+(((max_lines))%2);\n            }\n            if(max_lines>11){mid.y+=(iFrame%4);}\n            mid.x+=-int(0.25*radius*min(iResolution.y,iResolution.x));\n            \n            if(mid.x==1&&mid.y>=0&&mid.x<rsz&&mid.y<max_lines/2+(((max_lines))%2)){\n                mid.y+=ix*(max_lines/2)+iy;\n                uint id=uint(mid.x+mid.y*rsz);\n                ivec2 tidp=ivec2(int(id)%rsz,int(id)/rsz);\n                vec2 pos=middle;\n                vec2 vel=vec2(0.);\n                timer=uint(fade_time);\n                color_id = uint((iFrame/(timer_spn_l*20))%0xf);\n                fragColor = save_all(pos,vel,id,timer,color_id);\n                return;\n            }\n        } else fragColor = vec4(0.);\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef set_max_lines\n    max_lines = set_max_lines;\n#else\n    max_lines = int(2.+sqrt(min(iResolution.x,iResolution.y)));\n#endif\n    max_particles= 0xfffff/max_lines;\n    ivec2 ipx = ivec2(fragCoord);\n    if(ipx==ivec2(iResolution.xy)-1){\n        float lc = texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).z;\n        float imz=iMouse.z;\n        //imz=-1.;\n        float c=is_reset()?iTime:(imz>0.?(lc>=0.?-iTime:lc):abs(lc));\n        float ld = abs(texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).w);\n        float d=is_reset()?float(iFrame):min(-1.*ld,-1.);\n        fragColor=vec4(iResolution.xy,c,d);\n        return;\n    }\n    sim_step(fragColor, fragCoord);\n}\n\n\n// return vec4(a,b,c,d)\n// a b - target pos\n// c - init timer (max 0xffff)\n// d - destroy -1 (to fix real time ID resize)\n\n// in ivec2 ipx is particle id in vec2(column,row)\n\nvec4 particle_data(ivec2 ipx){\n\n    float max_pos=iResolution.x;\n    float max_posy=iResolution.y;\n    int sz1 = int(min(max_posy,max_pos)*0.25);\n    int rsz = min(sz1,max_particles);\n    \n    \n    if(ipx.x>=rsz||ipx.y>=rsz)return vec4(-1.);\n    \n    int self_id = ipx.x+ipx.y*rsz;\n    vec2 pos = vec2(0.);\n    float timer_save = 0.; //used only on init particles\n    \n    vec2 tuv = vec2(ipx)/float(rsz)-0.5;\n    \n    self_id = (ipx.x+ipx.y*rsz);\n    \n    \n    vec2 ttuv = toPolar(tuv*2.);\n    ivec2 ipfx = ivec2((ttuv+vec2(0.5,0.))*float(rsz));\n    \n    float d=float(self_id);\n    \n    float amount = float(max_lines);\n    float len = float(rsz);\n    float fsize = float((len)*(amount));\n    \n    float res = iResolution.x/iResolution.y;\n    \n    float segt = floor(float(self_id)/len);\n    if(segt<amount){\n    float ts = 0.1285*len;\n    \n    //float segId = ts+mod(mod(float(self_id),len)+float(iFrame/30),len);\n    float segId = ts+mod(float(self_id),len);//self_id+iFrame/30\n    \n    float dlen = mod(float(self_id),len)/len;\n    \n    // do not multiply timers in code, change here (because fract)\n    float timer2 = fract(max(iTime-15.,0.)*0.018);\n    //timer2=0.6;\n    float timer0 = fract(iTime*0.02);\n    float timer01 = fract(iTime*0.0435);\n    //timer0=0.0;\n    //timer01=0.0;\n    float timer3 = fract(iTime*0.01);\n    float timer4 = fract(iTime*0.007);\n    float timer5 = fract(iTime*0.015);\n    //timer3=0.0;\n    //timer4=0.0;\n    //timer5=0.0;\n    \n    float s = (0.1+0.33*pow( 4.0*timer2*(1.0-timer2), 100.))*noise2(vec2(1., 12.*(1.+segId)/len));\n    vec3 p = vec3(40.*float(self_id)/fsize , 1.,  2.*segId/len);\n    float tfl = mix((2.*dlen),1.*noise3(p),0.5*pow(4.0*timer5*(1.0-timer5),2.));\n    vec2 tpos = vec2(cos(float(self_id)/fsize * PI * 2.)*(radius+(0.5665-0.13*pow(dlen,2.))*dlen),\n                     sin(float(self_id)/fsize * PI * 2.)*(radius+(0.5665-0.13*pow(dlen,2.))*1./res*dlen)*res);\n    \n    float mouse_timer = texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).z;\n    if(mouse_timer<0.)\n    {\n        mouse_timer=iTime-abs(mouse_timer);\n        float mouse_timer2=smoothstep(7.,10.,mouse_timer);\n        mouse_timer=1.-smoothstep(0.,1.,mouse_timer);\n        float ttmr = clamp((dlen-(radius*4.))*1000.,0.,1.);\n        tpos*=0.135+(0.865*ttmr)*mouse_timer+(0.865*(1.-ttmr));\n        vec2 iml =(iMouse.xy/iResolution.xy-0.5);\n        float lim = length(iml);\n        iml+=0.0001*(1.-abs(sign(iml)));\n        tpos+=ttmr*mouse_timer2*(1.-mouse_timer)*min(lim,0.45)*normalize(iml);\n    }\n    \n    tpos += vec2(cos((tfl+timer01) * PI*4.) * (1.-0.7313*pow(dlen,2.)) , sin((tfl+timer01) * PI*4.) * (1.-0.7313*pow(dlen,2.)) *res) * segId/len * s;\n    \n    \n    float tt = pow( 4.0*timer3*(1.0-timer3), 3.);\n    tpos += 0.09*(max(pow( 4.0*timer4*(1.0-timer4), 2.)-tt*10.,0.))*vec2(cos((float(self_id)/fsize+timer0) * PI*4.) * (1.-0.87313*pow(dlen,2.)) , sin((float(self_id)/fsize+timer0) * PI*4.) * (1.-0.87313*pow(dlen,2.)) *res)*(-0.062+segId/len);\n\n    \n    tpos += tt*.5*tpos*vec2(cos(5.*PI*segId/len),sin(5.*PI*segId/len));\n    pos=(vec2(tpos)+0.5);\n    \n    }\n    if(segt>=amount)d=-1.;\n    \n    vec4 ret=vec4(pos,timer_save,d);\n    return ret;\n}\n\nfloat hash3(vec3 p)\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat hash2(vec2 p)\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return -1.+2.*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise3( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash3(i+vec3(0,0,0)), \n                        hash3(i+vec3(1,0,0)),f.x),\n                   mix( hash3(i+vec3(0,1,0)), \n                        hash3(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash3(i+vec3(0,0,1)), \n                        hash3(i+vec3(1,0,1)),f.x),\n                   mix( hash3(i+vec3(0,1,1)), \n                        hash3(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\nfloat noise2( in vec2 p)\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash2( i + vec2(0.0,0.0) ), \n                     hash2( i + vec2(1.0,0.0) ), u.x),\n                mix( hash2( i + vec2(0.0,1.0) ), \n                     hash2( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n// render particles and motion blur\n\n\n//2 channel motion blur\n\n#define SAMPLES_LOCK 14\n\nvoid mainImage2( out vec4 fragColor, in vec2 fragCoord , vec4 newc)\n{\n    //vec4 newc = texture(iChannel2, fragCoord.xy / iResolution.xy);\n    vec4 xsample = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    newc*=1.65;\n    \n    float next = xsample.w + float(1.f);\n    float prev = xsample.w;\n    float divisor = prev / next;\n    xsample.xyz = xsample.xyz * vec3(divisor) + newc.xyz * (1.0f - divisor);\n    xsample.w = min(next, float(SAMPLES_LOCK-1));\n    \n    fragColor = xsample;\n}\n\n\nint max_lines;\nint max_particles; // per line because id 0xfffff max\n\nvec4 loadval(ivec2 io) {return loadvalg(io, iResolution.xy);}\n\n\nvec4 ballD(in vec2 ipos, in vec2 ballp)\n{\n    float d = distance(ipos, ballp)/BALL_SIZE;\n    return vec4(clamp(sign(1.0-d), 0.0, 1.0)*(1.-d) * float(ballp.x > 0.0)) ;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nvec4 getV(in ivec2 p,float max_pos,float max_posy){\n    vec4 tval=texelFetch( iChannel0, ivec2(p), 0 );\n    if(p==ivec2(iResolution.xy)-1) return vec4(0);\n    float p1=decodeval_pos(floatBitsToUint(tval.x))*max_pos;\n    float p2=decodeval_pos(floatBitsToUint(tval.y))*max_posy;\n    float v1=decodeval_vel(floatBitsToUint(tval.z));\n    float v2=decodeval_vel(floatBitsToUint(tval.w));\n    return vec4(p1,p2,v1,v2);\n}\nuvec2 extra_dat_pos(ivec2 p){\n    vec4 tval=texelFetch( iChannel0, ivec2(p), 0 );\n    return uvec2(floatBitsToUint(tval.x)&0xfffu,floatBitsToUint(tval.y)&0xfffu);\n}\n\nuvec2 extra_dat_vel(ivec2 p){\n    vec4 tval=texelFetch( iChannel0, ivec2(p), 0 );\n    return uvec2(floatBitsToUint(tval.z)&0xffu,floatBitsToUint(tval.w)&0xffu);\n}\n\nuvec2 get_id(ivec2 p){\n    uvec2 v1=extra_dat_pos(p);\n    uint iret=(v1[0]<<12)|(v1[1]<<0);\n    return uvec2(iret&0xfffffu,iret>>20);\n}\n\nuint get_timer(ivec2 p){\n    uvec2 v1=extra_dat_vel(p);\n    uint iret=(v1[0]<<8)|(v1[1]<<0);\n    return iret;\n}\n\nbool is_reset(){\n    if(texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).w<-.05)return false;\n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef set_max_lines\n        max_lines = set_max_lines;\n#else\n        max_lines = int(2.+sqrt(min(iResolution.x,iResolution.y)));\n#endif\n        max_particles= 0xfffff/max_lines;\n        float max_pos=iResolution.x;\n        float max_posy=iResolution.y;\n        int sz = int(min(max_posy,max_pos)*0.25);\n        int rsz = min(sz,max_particles);\n        int fade_frame = max(iFrame-abs(int(texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).w))-fade_time/100,0);\n        if(is_reset()){fragColor=vec4(0.);return;}\n        float scpx=loadval(ivec2(0,0)).z-0.015;\n        float scpy=loadval(ivec2(0,0)).w-0.015;\n        float mn=1.;\n        if(loadval(ivec2(0,0)).x>0.95)mn=0.;\n        vec2 fc=fragCoord;\n        fc+=mn*iResolution.y*vec2(scpx,scpy); //real scale\n\n\n\n        ivec2 cellIndex = ivec2(fc );\n\n        vec4 res = vec4(0.0, 0.0, 0.0, 1.0);\n        vec2 worldPos = fc ;\n        for (int x=-1; x<=1; x++) {\n            for (int y=-1; y<=1; y++) {\n\n                ivec2 tp = max(cellIndex+ivec2(x,y), ivec2(0));\t\t\t\n\n                vec4 ball  = getV(tp,max_pos,max_posy);\n                vec2 p = ball.xy;\n                vec2 vel = ball.zw;\n\n                float d=sdBox((worldPos-p.xy),vec2(BALL_SIZE)*.799);\n                d=1.-smoothstep(0.15,0.95,d);\n                //d=1.-smoothstep(-0.5,0.5,d);\n                d=d * float(ball.x > 0.0) ;\n                \n                \n                uvec2 tmpid = get_id(tp);\n                int self_id=int(tmpid.x);\n                int color_id=int(tmpid.y);\n                int self_timer=int(get_timer(tp));\n                \n                vec4 shade=vec4(0.,0.,0.,1.);\n                shade.rgb=get_pal(color_id);\n                shade*=d;\n                \n                //to make loop gif\n/*\n                float ttimer = mod(iTime+6.,44.)-6.;\n                shade*=float(clamp((self_id%rsz)+1-int((ttimer-19.)*10.),0,1));\n                shade*=float(clamp(rsz-(self_id%rsz)-int((9.-ttimer)*10.),0,1));\n*/\n                shade*=clamp((float(fade_frame)-float(fade_time)*float(self_id%rsz)/float(rsz))/float(fade_time),0.,1.);\n                //res=max(res, shade);\n                //res=res+ shade;\n                if(length(shade)>0.1)res=res*shade + shade+res*0.5;\n\n            }\n        }\n    fragColor = res;\n    //fragColor=clamp(fragColor,0.,1.);\n    mainImage2(fragColor, fragCoord , fragColor);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n// Mix of two\n// mainImage TAA\n// mainImage2 motion blur\n\n\n\nbool is_reset(){\n    if(texelFetch(iChannel0,ivec2(iResolution.xy)-1,0).w<-.5)return false;\n    return true;\n}\n\n//2 channel motion blur\n\n#define SAMPLES_LOCK 17\n\nvoid mainImage2( out vec4 fragColor, in vec2 fragCoord, vec4 newc)\n{\n    if(is_reset()){fragColor=vec4(0.);return;}\n    //vec4 newc = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    vec4 xsample = texture(iChannel2, fragCoord.xy / iResolution.xy);\n    newc*=1.15;\n\n    float next = xsample.w + float(1.f);\n    float prev = xsample.w;\n    float divisor = prev / next;\n    xsample.xyz = xsample.xyz * vec3(divisor) + newc.xyz * (1.0f - divisor);\n    xsample.w = min(next, float(SAMPLES_LOCK-1));\n    \n    fragColor = xsample;\n}\n\n\n\n\n\n\n/**\n* Creative Commons CC0 1.0 Universal (CC-0)\n*\n* A basic TAA implementation based on the variance clipping technique by Marco Salvi (Nvidia).\n*\n*/\n\n#define TEXTURE_CURRENT iChannel1\n#define TEXTURE_PREV iChannel2\n\nconst ivec2 offsets[8u] = ivec2[]\n(\n    ivec2(-1,-1), ivec2(-1, 1), \n\tivec2(1, -1), ivec2(1, 1), \n\tivec2(1, 0),  ivec2(0, -1), \n\tivec2(0, 1),  ivec2(-1, 0)\n);\n\nconst float gaussian[8u] = float[]\n(\n    .0625, .0625,\n    .0625, .0625,\n    .125,  .125,\n    .125,  .125\n);\n\nvec3 RGBToYCoCg(vec3 RGB)\n{\n    float Y = dot(RGB, vec3(1, 2,  1))  * .25;\n    float Co= dot(RGB, vec3(2, 0, -2))  * .25 + (.5 * 256./255.);\n    float Cg= dot(RGB, vec3(-1, 2, -1)) * .25 + (.5 * 256./255.);\n    return vec3(Y, Co, Cg) * (1. / (1. + Y)); // tonemap\n}\n\nvec3 YCoCgToRGB(vec3 YCoCg)\n{\n    YCoCg *= 1. / (1. - YCoCg.x); // tonemap\n\tfloat Y= YCoCg.x;\n\tfloat Co= YCoCg.y - (.5 * 256. / 255.);\n\tfloat Cg= YCoCg.z - (.5 * 256. / 255.);\n\tfloat R= Y + Co - Cg;\n\tfloat G= Y + Cg;\n\tfloat B= Y - Co - Cg;\n\treturn vec3(R, G, B);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 currentBuffer = RGBToYCoCg(textureLod(TEXTURE_CURRENT, uv, 0.).rgb);\n    vec3 historyBuffer = RGBToYCoCg(textureLod(TEXTURE_PREV, uv, 0.).rgb);\n\n    vec3 mean = currentBuffer;\n    vec3 variance = currentBuffer * currentBuffer;\n    vec3 filtered = currentBuffer * .25;\n    \n    // Marco Salvi's Implementation (by Chris Wyman)\n    for(int i = 0; i < 8; i++)\n    {\n        vec3 neighborTexel = RGBToYCoCg(texelFetch(TEXTURE_CURRENT, ivec2(fragCoord.xy) + offsets[i], 0).rgb);\n        mean += neighborTexel;\n        variance += neighborTexel * neighborTexel;\n        filtered += neighborTexel * gaussian[i];\n    }\n    \n    mean /= 9.;\n    variance /= 9.;\n    const float stDevMultiplier = 1.5;\n\tvec3 sigma = sqrt(abs(variance - mean * mean));\n\tvec3 colorMin = min(filtered, mean - stDevMultiplier * sigma);\n\tvec3 colorMax = max(filtered, mean + stDevMultiplier * sigma);\n    \n    historyBuffer = clamp(historyBuffer, colorMin, colorMax);\n    \n    vec3 outColor = mix(historyBuffer, filtered, .05);\n\n\tfragColor = vec4(YCoCgToRGB(outColor), 1.);\n    \n    mainImage2(fragColor, fragCoord , fragColor);\n}\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n\n// Configurable (Edit this)\n\n// max particle lines, uncomment to use, else it depends of iResolution\n//#define set_max_lines 7\n\nconst float radius = 0.027; //middle radius\n\n\nconst int timer_spn = 23; //timer to respawn particles (frames, each X frames)\n\n\nconst int fade_time = 350; // frames>0 (1 min)\n\n\n// particle config, change VEL_LIMIT for speedup and M to make jutter less\n// example VEL_LIMIT = 0.7 * BALL_SIZE; M = 0.8 * BALL_SIZE;\n// (will speedup but particle wil destroe ach other oncollision way too oftern)\n// particles jitter because I use uint as pos and speed so there huge precision loss\n\nconst float BALL_SIZE = 0.9; // should be between sqrt(2)/2 and 1\nconst float BALL_D = 2. * BALL_SIZE; \nconst float VEL_LIMIT = 0.453 * BALL_SIZE;\nconst float maxG = 0.004; // max gravity\nconst float maxPf = 0.0604; // max pos mov \nconst float E_FORCE = 1.9;\nconst float M = 0.54 * BALL_SIZE;\nconst float DAMP_K = 0.98;\nconst float MOUSE_F = 5.38;\n\nfloat decodeval_pos(uint varz) {\n    varz=varz>>12;\n    return float(varz)/float(0xfffff);\n}\n\nuint encodeval_pos(uvec2 colz) {\n    return uint(((colz[0]&0xfffffu)<< 12)|((colz[1]&0xfffu)<< 0));\n}\n\n\nfloat decodeval_vel(uint varz) {\n    varz=varz>>8;\n    int s=int(varz&0xfu);\n    float si=s>0?-1.:1.;\n    varz=varz>>4;\n    return si*float(varz)/float(0xfffff);\n}\n\nuint encodeval_vel(float vel, uint ev) {\n    uint v = uint(clamp(abs(vel),0.,1.)*float(0xfffff))<<4u;\n    if(vel<0.)v+=0xfu;\n    return uint((v<< 8)|((ev&0xffu)<< 0));\n}\n\nvec4 loadvalg(ivec2 io, vec2 ires) {\n        if(io==ivec2(0,0)){\n        float z=1.; //0.5\n        float s=.864;\n        float px=((ires.xy/ires.y)*0.5).x/2.;\n        float py=0.01;\n        return vec4(z,s,px,py);\n    }\n    if(io==ivec2(1,0)){\n        float irx=ires.x; //size of board //bug float\n        float iry=ires.y; //only for init/reset\n        float a=-1.;\n        float b=-1.;\n        return vec4(irx,iry,a,b);\n    }\n    if(io==ivec2(1,1)){\n        float fpx=0.;\n        float fpy=0.;\n        float a=-1.;\n        float b=0.;\n        return vec4(fpx,fpy,a,b);\n    }\n    if(io==ivec2(0,1)){\n        float gx=0.0;\n        float gy=-0.0; //grav dir y\n        float a=0.;\n        float b=0.;\n        return vec4(gx,gy,a,b);\n    }\t\n    return vec4(0.);\n}\n\n// https://www.shadertoy.com/view/ll2GD3\n// The MIT License\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Copyright © 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 get_pal(int cid){\n    //return vec3(1.);\n    float ix = fract(float(cid)/float(0xf)+1./16.);\n    vec3 ret = vec3(0.051);\n    //vec3 tpal=pal( ix, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    vec3 tpal=pal( ix, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    tpal=clamp(tpal,0.,1.);\n    vec3 s = sign(max(tpal-0.1,vec3(0.)));\n    ret+=tpal+vec3(0.127)*s+vec3(0.127)*(1.-s);\n    return 1.85*ret;\n}\n\n#define PI 3.141592653589793\nvec2 toPolar(vec2 v)\n{\n    v.y+=0.001*(1.-abs(sign(v.y)));\n    return vec2(atan(v.y, v.x)/PI, length(v));\n}\n\nmat2 MD(float a){float s = sin( a );float c = cos( a );return mat2(vec2(c, -s), vec2(s, c));}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}