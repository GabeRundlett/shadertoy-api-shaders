{
    "Shader": {
        "info": {
            "date": "1724745599",
            "description": "Consolidate the understanding of Ray Marching  through practice",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2BRh",
            "likes": 5,
            "name": "Travel in the paint",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "voronoi",
                "paint"
            ],
            "usePreview": 0,
            "username": "Delincoter",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 30\n#define MAX_DIST 10.\n#define SURF_DIST .01\n#define t iTime\n\nconst float travleSpeed = .25;\nconst float paintSpeed = .5;\nconst vec3 paintCol = vec3(0.,1.,1.);\nconst vec3 backgroundCol = vec3(1., 0., 1.);\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n}\n\nvec3 hash33(vec3 p)\n{ \n    float offset = t * paintSpeed;\n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    vec3 UV = fract(vec3(2152, 244, 378)*n); \n    return vec3(sin(UV.y*(offset+128.13))*0.5+0.5, cos(UV.x*(offset+578.57))*0.5+0.5, sin(UV.z*(offset+398.12))*0.5+0.5);\n}\n\nfloat voronoi(vec3 p)\n{\n    float s = length(p);\n    s = smoothstep(1., -1., s);\n\n    p.y += cos(t * travleSpeed);\n    p.z += t * travleSpeed;\n    \n\tvec3 b, r, g = floor(p);\n\tp = fract(p);\n\n\tfloat d = 1.; \n  \n\tfor(int j = -1; j <= 1; j++) {\n\t    for(int i = -1; i <= 1; i++) {\n    \t\t\n\t\t    b = vec3(i, j, -1);\n\t\t    r = b - p + hash33(g+b);\n\t\t   // d = min(d, dot(r,r));\n            d = opSmoothUnion( d, dot(r,r), .8);\n    \t\t\n\t\t    b.z = 0.0;\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = opSmoothUnion( d, dot(r,r), .8);\n    \t\t\n\t\t    b.z = 1.;\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = opSmoothUnion( d, dot(r,r), .8);\n            \n            d = max(d,s);\t\t\t\n\t    }\n\t}\n\t\n\treturn d-0.1;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = voronoi(p);\n        dO += dS;\n        //if(dO>MAX_DIST || abs(dS)<SURF_DIST) continue;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) \n{\n    vec2 e = vec2(.1, 0);\n    vec3 n = voronoi(p) - \n        vec3(voronoi(p-e.xyy), voronoi(p-e.yxy),voronoi(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0., 0., -0.5);\n    vec3 rd = normalize(vec3(uv, 0.) - ro);\n    \n    float d;\n    vec3 col;\n    \n    d = RayMarch(ro, rd);\n    if(d < MAX_DIST)\n    {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float spec = pow(max(dot(normalize(vec3(.5)), r), 0.0), 128.);  \n        float fre = dot(n, -rd)*.5+.5;\n        \n        d = 1.- pow(d, 2.)*.05;\n        \n        col = paintCol * (fre + spec*.5);\n        col += textureLod(iChannel0, r, 1.).rgb*.1;\n        col = mix(backgroundCol, col, clamp(d, 0., 1.));\n    }\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}