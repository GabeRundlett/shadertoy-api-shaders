{
    "Shader": {
        "info": {
            "date": "1651249252",
            "description": "Display the average and std-dev in x (green) and y (red) of a curve.\nRed: right: on all data.  left: only on defined (i.e. non-zero) data.\n\nMouse-draw the curve (take care of releasing the mouse before quitting the window).\nSPACE to erase.  Presets: 1,2,3",
            "flags": 48,
            "hasliked": 0,
            "id": "stsfRX",
            "likes": 9,
            "name": "compute stat moments",
            "published": 3,
            "tags": [
                "statistics",
                "moments"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    O = vec4( U.y < T(vec2(U.x,0)).x );                    // draw curve\n    vec4 M = T(2);                                         // load all stats\n    if ( abs(M.z-U.x) < M.w ) O = mix(O,vec4(0,1,0,1),.4); // trace std-dev(x)\n    if ( abs(M.z-U.x) < .5  ) O =       vec4(0,1,0,1);     // trace average(x)\n  if (U.x>M.z) {\n    if ( abs(M.x-U.y) < M.y ) O = mix(O,vec4(1,0,0,1),.5); // trace std-dev(y)\n    if ( abs(M.x-U.y) < .5  ) O =       vec4(1,0,0,1);     // trace average(y)\n }else{\n    M = T(3);                                              // stats on defined part only\n    if ( abs(M.x-U.y) < M.y ) O = mix(O,vec4(1,0,0,1),.5); // trace std-dev(y)\n    if ( abs(M.x-U.y) < .5  ) O =       vec4(1,0,0,1);     // trace average(y)\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keyClick(a)   ( texelFetch(iChannel3,ivec2(a,1),0).x > 0.)\n#define keyDown(a)    ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (U==vec2(1.5)) O.xy = iMouse.xy; // memorize last mouse position\n    \n    float t, n = 0., v = 0.;\n    if (U==vec2(2.5)||U==vec2(3.5)) {   // computes moments 1,2 in x and y\n        O = vec4(0);                    // (not normalized yet)\n        for (float x = 0.; x < R.x; x++ )\n            t = T(vec2(x,0)).x,\n            O += vec4( t, t*t, t*x, t*x*x),\n            n++,                        // counts all values\n            v += step(1e-6,t);          // counts non-zero values\n    }\n    if (U==vec2(2.5)) {                 // computes stats in x and y    \n        O /= n; O.zw /= O.x;            // order-1 and order-2 moments in x and y\n     // O.x                             // average y\n        O.y = sqrt(O.y - O.x*O.x);      // std-dev y\n     // O.z                             // average x\n        O.w = sqrt(O.w - O.z*O.z);      // std-dev x\n    }\n    if (U==vec2(3.5)) {                 // computes stats for defined values\n        O /= v;                         // order-1 and order-2 moments in y\n     // O.x                             // average y\n        O.y = sqrt(O.y - O.x*O.x);      // std-dev y\n    }\n    if (U.y>1.) return;\n   \n    O = T(U);                           // draw curve between prev-mouse and mouse\n    vec2 M = T(1).xy;\n    float a = min(M.x,iMouse.x), b = max(M.x,iMouse.x);\n    if (iMouse.z>0. && iMouse.w<0. && U.x >= a && U.x <= b )\n        O.x = keyDown(32) ? 0.                   // SPACE : erase area\n              : mix( M.y, iMouse.y,(U.x-M.x)/(iMouse.x-M.x) );\n        \n    if ( keyClick(32) &&iMouse.z<0.)  O=vec4(0); // SPACE : erase all\n    \n    if (iFrame==0 ||                    // default value and presets 1,2,3\n        keyClick(49)) U = 2.*U/R.x-1., O.x = R.y*exp(-.5*U.x*U.x*16.);\n    if (keyClick(50)) U = abs(2.*U/R.x-1.)-.5, O.x = R.y*exp(-.5*U.x*U.x*64.); \n    if (keyClick(51)) U = U/R.x, O.x = R.y*U.x*exp(-10.*U.x)/.037;      // / f(1/5)\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch(iChannel0,ivec2(U), 0)\n#define R    iResolution.xy",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}