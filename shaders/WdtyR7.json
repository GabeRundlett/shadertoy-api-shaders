{
    "Shader": {
        "info": {
            "date": "1600679249",
            "description": "Originally created by Romain Guy: https://www.shadertoy.com/view/llXyWr\n\n- Orange: GT\n- Blue: ACES\n- Green: Unreal 3 matched to ACES\n- Pink: GT with different parameters\n- Yellow: AMD matched to ACES\n- Purple: XC tonemap",
            "flags": 0,
            "hasliked": 0,
            "id": "WdtyR7",
            "likes": 1,
            "name": "Tonemap operators + Chen",
            "published": 3,
            "tags": [
                "hdr",
                "tonemapping",
                "sdr"
            ],
            "usePreview": 0,
            "username": "hypernewbie",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "float Tonemap_ACES(float x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\nfloat Tonemap_Unreal(float x) {\n    // Unreal 3, Documentation: \"Color Grading\"\n    // Adapted to be close to Tonemap_ACES, with similar range\n    // Gamma 2.2 correction is baked in, don't use with sRGB conversion!\n    return x / (x + 0.155) * 1.019;\n}\n\nfloat Tonemap_Uchimura(float x, float P, float a, float m, float l, float c, float b) {\n    // Uchimura 2017, \"HDR theory and practice\"\n    // Math: https://www.desmos.com/calculator/gslcdxvipg\n    // Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp\n    float l0 = ((P - m) * l) / a;\n    float L0 = m - m / a;\n    float L1 = m + (1.0 - m) / a;\n    float S0 = m + l0;\n    float S1 = m + a * l0;\n    float C2 = (a * P) / (P - S1);\n    float CP = -C2 / P;\n\n    float w0 = 1.0 - smoothstep(0.0, m, x);\n    float w2 = step(m + l0, x);\n    float w1 = 1.0 - w0 - w2;\n\n    float T = m * pow(x / m, c) + b;\n    float S = P - (P - S1) * exp(CP * (x - S0));\n    float L = m + a * (x - m);\n\n    return T * w0 + L * w1 + S * w2;\n}\n\nfloat Tonemap_Uchimura(float x) {\n    const float P = 1.0;  // max display brightness\n    const float a = 1.0;  // contrast\n    const float m = 0.22; // linear section start\n    const float l = 0.4;  // linear section length\n    const float c = 1.33; // black\n    const float b = 0.0;  // pedestal\n    return Tonemap_Uchimura(x, P, a, m, l, c, b);\n}\n\nfloat Tonemap_Lottes(float x) {\n    // Lottes 2016, \"Advanced Techniques and Optimization of HDR Color Pipelines\"\n    const float a = 1.6;\n    const float d = 0.977;\n    const float hdrMax = 8.0;\n    const float midIn = 0.18;\n    const float midOut = 0.267;\n\n    // Can be precomputed\n    const float b =\n        (-pow(midIn, a) + pow(hdrMax, a) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n    const float c =\n        (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n\n    return pow(x, a) / (pow(x, a * d) * b + c);\n}\n\nfloat Tonemap_Chen(float x) {\n    // Cs = soft toe position\n    // Ct = soft toe strength\n    // Cl = soft shoulder position\n    // Ce = hard shoulder position\n    const float Cs = 5.9;\n    const float Ct = 0.37;\n    const float Cl = 0.517;\n    const float Ce = 0.8;\n    \n    // Soft smoothstep toe\n    float ts = x * smoothstep( 0.0, 1.0, x * Cs );\n    float x1 = mix( x, ts, Ct );\n    \n    // Piecewise linear + reinhard soft shoulder.\n    if ( x > Cl ) {\n        x1 -= Cl;\n        x1 = x1 / ( 1.0 + x1 ) + Cl;\n    }\n    \n    // Linear + exponential hard shoulder for SDR.\n    if ( x1 > Ce ) {\n        float y = ( x1 - Ce ) / ( 1.0 - Ce );\n        x1 = Ce + ( 1.0 - exp( -y ) ) * ( 1.0 - Ce );\n    }\n    \n    return x1;\n}\n\n\nfloat Tonemap_UC2( float x )\n{\n\tfloat A = 0.15;\n\tfloat B = 0.50;\n\tfloat C = 0.10;\n\tfloat D = 0.20;\n\tfloat E = 0.02;\n\tfloat F = 0.30;\n\treturn ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;\n}\n\nfloat Tonemap_UC2_W( float x )\n{\n\tfloat W = 11.2;\n    x = Tonemap_UC2( 2.4f * x );\n\tx *= 1.0f / Tonemap_UC2( 11.2f );\n    return x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float zoom = mix( 2.8, 0.2, iMouse.y / iResolution.y );\n    vec2 uv = fragCoord.xy / (iResolution.y * zoom);\n    //uv.x += iMouse.x / iResolution.x * 3.0;\n\n    float p = 1.0 / (iResolution.y * 0.8);\n    float y = 0.0;\n\n    // Show LDR range (thanks iq)\n    fragColor.rgb = vec3(0.02) * step(uv.x, 1.0);\n    \n    y = 1.0;\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 1.0, 1.0), 1.0 - smoothstep(0.0, 1.0 * p, abs(uv.y - y)));\n    y = 0.25;\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.12, 0.12, 0.12), 1.0 - smoothstep(0.0, 1.0 * p, abs(uv.y - y)));\n\n    y = Tonemap_Uchimura(uv.x);\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.5, 0.0), 1.0 - smoothstep(0.0, 1.0 * p, abs(uv.y - y)));\n\n    //y = Tonemap_Uchimura(uv.x, 1.0, 1.7, 0.1, 0.0, 1.33, 0.0);\n    //fragColor.rgb = mix(fragColor.rgb, vec3(0.8, 0.2, 0.6), 1.0 - smoothstep(0.0, 2.0 * p, abs(uv.y - y)));\n\n    y = pow( Tonemap_ACES(uv.x), 1.0 );\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.8, 0.8, 0.0), 1.0 - smoothstep(0.0, 1.0 * p, abs(uv.y - y)));\n\n   // y = pow(Tonemap_Unreal(uv.x), 2.2);\n    //fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.6, 0.1), 1.0 - smoothstep(0.0, 2.0 * p, abs(uv.y - y)));\n\n    y = Tonemap_UC2_W(uv.x);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 0.6, 0.8), 1.0 - smoothstep(0.0, 1.0 * p, abs(uv.y - y)));\n    \n    y = Tonemap_Chen(uv.x);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.3, 0.1, 0.8), 1.0 - smoothstep(0.0, 1.0 * p, abs(uv.y - y)));\n    \n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}