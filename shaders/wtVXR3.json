{
    "Shader": {
        "info": {
            "date": "1585428327",
            "description": "GCD",
            "flags": 0,
            "hasliked": 0,
            "id": "wtVXR3",
            "likes": 2,
            "name": "GCD as random",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "// \"ShaderToy Tutorial - Value Noise\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/zXsWftRdsvU\n\nfloat gcd(vec2 p){\n    p = abs(p);\n    float eps = 1.;\n    for (float i = 0.; i < 1000. && p.x > eps; i++){\n        p.y = mod(p.y, p.x);\n        p.xy = p.yx;\n    }\n    return p.x / eps;\n}\n\nfloat N21(vec2 p) {\n    //return fract(sin(p.x*100.+p.y*6574.)*5647.);\n    return gcd(p);\n}\n\nfloat SmoothNoise(vec2 uv) {\n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    lv = lv*lv*(3.-2.*lv);\n    \n    float bl = N21(id);\n    float br = N21(id+vec2(1,0));\n    float b = mix(bl, br, lv.x);\n    \n    float tl = N21(id+vec2(0,1));\n    float tr = N21(id+vec2(1,1));\n    float t = mix(tl, tr, lv.x);\n    \n    return mix(b, t, lv.y);\n}\n\nfloat SmoothNoise2(vec2 uv) {\n    float c = SmoothNoise(uv*4.);\n    \n    // don't make octaves exactly twice as small\n    // this way the pattern will look more random and repeat less\n    c += SmoothNoise(uv*8.2)*.5;\n    c += SmoothNoise(uv*16.7)*.25;\n    c += SmoothNoise(uv*32.4)*.125;\n    c += SmoothNoise(uv*64.5)*.0625;\n    \n    c /= 2.;\n    \n    return c;\n}\n\nvec2 N22(vec2 p){\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x*a.y, a.y * a.z));\n}\n\nfloat slow_voronoi(vec2 uv, float t){\n    float m = 0.;\n    float minDist = 100.;\n    for (float i = 0.; i < 50.; i++){\n        vec2 n = N22(vec2(i + 1.));\n        vec2 p = sin(n * t);\n\n        float d = length(uv - p);\n        m += smoothstep(.02, .01, d);\n\n        if (d < minDist){\n            minDist = d;\n        }\n    }\n    return minDist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy)/iResolution.y * 2.;\n\n    //uv += iTime*.1;\n    \n    float t = iTime * 0.2 + 10.;\n    \n    vec3 col = vec3(0);\n    \n    col = vec3(SmoothNoise2(uv * 5.));\n    \n    //col = vec3(polargreed(uv));\n    \n    //col = vec3(minDist);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}