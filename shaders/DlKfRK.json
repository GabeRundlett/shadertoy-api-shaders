{
    "Shader": {
        "info": {
            "date": "1702280295",
            "description": "A fractal rug pattern with an ornate design.",
            "flags": 8,
            "hasliked": 0,
            "id": "DlKfRK",
            "likes": 23,
            "name": "Blue and white rug 2",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 9; k++){\n    \n        uv.y -= 1./4.;\n        \n        uv = (uv+t2)/scale;\n        \n        uv = ((vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        \n        t2 = triangle_wave(uv-.5);\n        uv =\n            t2*1.5-triangle_wave(uv.yx)\n            \n            //looks better with more iterations\n            //t2-triangle_wave(uv.yx)-fract(t2/2.)\n        ;\n        \n        c1 =\n            //max(abs(uv.y-uv.x*sign(uv.x-uv.y))/2.,c1)\n            max(abs(uv.y-uv.x)/2.,c1)\n        ;\n        c1 =\n            max(abs(2.*c1-1.),c1/4.)\n            \n            //more colorful\n            //abs(2.*c1-1.)\n            \n            //Spooky!\n            //max(abs(2.*c1-2.),c1/4.)/2.\n        ;\n        col.x =\n            max(max(length(uv-t2-c1),abs(uv.y-uv.x))/3.,col.x)\n            //max(max(length(uv-t2-c1),abs(uv.y-uv.x)),col.x)/3.\n           \n            //c1\n           \n            //blue and gold\n            //2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n            //black and white\n            //col.x\n        ;\n        //if(uv.x<-.25)\n        col =\n            abs(col-(1.-(c1*col.x)))\n            //abs(col*c1-(1.-(col.x)))\n        ;\n        col1 =\n            abs(col1*c1-col-1.).yzx\n            //abs(col1-col*c1-1.).yzx\n        ;\n        //k -= int(sign(t2.y-t2.x));\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 6.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1/2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float mod1(float a, float b){\n    return\n        mod(a,b)\n        //mod(a+mod(a,b+3.),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    //the modulus should be a prime number\n    //this makes some interesting rhythms\n    float modulus =\n        //3.\n        5.\n        //7.\n    ;\n    for(float i = 1.; i < mod(floor(a/b),modulus); i++){\n        //a /= 2.0;\n        //a /= 1.0+mod(floor(a),2.);\n        a += mod1(floor(a/2.),b)*i;\n    }\n    float a1 = a;\n    return\n        mod(floor(a),b)\n    ;\n}\n\n#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 banjo(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,6./4.));\n}\n\nvec2 harp(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,2.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.));\n}\n\nvec2 synth_drum(vec2 a, vec2 nb,float m2){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./m2)\n  + synth(1./8.,a,1./4.,1.,nb*2.,m2/4.));\n}\n\nvec2 oud(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 steel_drum(vec2 a, vec2 nb){\nreturn a/16./4.*abs(synth(1./2.,a,1./8.,1.,nb*4.,1.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n;\n}\n\nvec2 gamelan(vec2 a, vec2 nb){\nreturn\na/16./4.*abs(synth(1./4.,.5*a,1./8.,1.,nb*4.,1./2.)\n  +.5*synth(1./4.,a,1./4.,1.,nb*2.,1./2.)) \n;\n}\n\nvec2 sitar1(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./4.+a*(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,float duration){\n  float tempo = .25;\n  time /= tempo;\n  float s1 =\n      8.;\n  vec3\n  rhythm =\n      vec3(1.)\n      \n      //more rhythms here!\n      //vec3(2.)\n      //vec3(2.,2.,1.)\n      //vec3(2.,1.,1.)\n  ;\n  for(float i = 1.; i < mod(floor(time),5.); i++){\n      time += mod(floor(time*2./rhythm.x),s1)*i;\n      time /= 1.+fmod(floor(time/rhythm.y)*2.,2.);\n      tempo *= 1.+fmod(floor(time/rhythm.z)*2.,2.);\n  }\n  float s2 = 8.,\n  t=\n      time,\n  m1 =\n      fmod(t,s2)\n      //fmod(t+fmod(floor(t/2.)/2.,s2*2.)/2.,s2)\n  ,m4 = fmod(t/8.,2.)\n  ,m3 =\n      fmod(t,1.+m1)+m4;\n  t /=\n      (1.+fmod(t/s1,2.))*4./s1/s1\n  ;\n  float m2 =\n      1. + fmod(t/s1,s1)\n      //1. + fmod(t/s1+fmod(floor(t/s1/8.)/2.,s2*2.)/2.,s1)\n  ,note=\n      floor((m3+m2)/2.)/5.\n      //floor((m3+m2+m4*4.)/2.)/5.\n  ,attack=1./64./4.;\n  vec2 a=\n      //vec2((1.-sqrt(fract(t/s1)/1.25))*.2)\n      -vec2((log(attack+fract1(t/s1)/8./duration)))\n\n      //pow(1.-log(1./16./2.+fract(t/s1)/4.),2.)\n  ,\n  nb =\n      vec2(time*tempo*pow(2.,note+scale))\n      \n      //scratching\n      //vec2(time*tempo*pow(2.,note+scale-a.x/128./2.))\n  ;\n  vec2 \n  sitar = log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y*2.)))/2.)),\n  \n  gamelan = gamelan(a,nb)\n  \n  \n  \n  ,steel_drum = steel_drum(a,nb)\n  ,oud = \n      a/16./2.*abs(\n      synth(1./2.,a,0.,1.,nb*2.,1./2.)\n      +.5*synth(1./8.,a,1./8.,1.,nb,1./2.))/2.\n  ,synth_drum = a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n  ,synth_drum1 = a/16./4.*synth(1./4.,a,1./8.,1.,nb*4.,m2/4.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,m2/4.)\n  ,banjo = a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,6./4.))\n  \n\n\n\n  ;\n  return\n      abs(gamelan-steel_drum/2.)\n      \n      //sitar1(a,nb)\n      \n      //abs(oud-steel_drum/8.)\n      \n      //abs(gamelan-steel_drum/4.)\n      \n      \n      //oud\n      //abs(.5-vec2(fract(nb.x*.998*2.),fract(nb.y)))*a\n      \n      \n      //log(abs(a/4.-2.*abs(.5-vec2(fract(nb*.998*2.),fract(nb*2.)))*a))\n\n      //log(abs(a/8.-abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a))\n  ;\n}\n\nvec2 mainSound(int samp, float time){\n    return\n        mainSound1(samp,time,6.5,1.)\n        \n        //flute\n        //abs(mainSound1(samp,time,7.25,1.)-mainSound1(samp,time,7.25,1./2.)/2.-mainSound1(samp,time,7.25,1./4.)/4.)\n        \n        //abs(mainSound1(samp,time,7.25,1.)-mainSound1(samp,time,7.25,2.)/2.-mainSound1(samp,time,7.25,4.)/4.)\n\n        \n        //metal remix\n        //abs(mainSound1(samp,time,6.,1./2.)-mainSound1(samp,time,6.5,1./2.))\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}