{
    "Shader": {
        "info": {
            "date": "1658394898",
            "description": "3D version of https://www.shadertoy.com/view/NsKBDw\nand https://twitter.com/KomaTebe/status/1549001155338018818\n\nmouse controls camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdyfRy",
            "likes": 35,
            "name": "spider crawler 3D",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "// 3D version of https://www.shadertoy.com/view/NsKBDw\n\n#define rot(a)       mat2(cos(a+vec4(0,11,33,0)))         // rotation                  \n\nfloat line(vec3 p, vec3 a,vec3 b) {                       // line SDFÂ²\n    p -= a, b -= a;\n    p -= b * clamp(dot(p, b) / dot(b, b), 0., 1.); \n    return dot(p,p); \n}\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., d; \n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -4.*R.y) - R),          // ray direction\n          p = 30./R, q,                                   // marching point along ray \n          M = iMouse.z > 0. ? .5*(iMouse.xyz/R -.5)\n               :  vec3( 10,4,0)/1e2*cos(.5*iTime+vec3(0,11,0)); // auto demo\n          \n    vec2 P =  3.*cos(iTime+vec2(0,11)) + sin(2.1*iTime+vec2(0,12)), I; // spider location\n\n    for (O=vec4(1); O.x > 0. && t > .01; O-=.01) {        // march scene\n        q = p; t=1e2;\n        q.yz *= rot(-1. -6.*M.y),                         // rotations\n        q.xy *= rot(6.*M.x); \n        if (length(vec3(P,.5)-q) < 6. )                   // sphere box\n        for( int k=0; k<25; k++) {                        // get spider legs\n            d = dot( I = vec2(k%5,k/5)-2. - fract(P), I);\n            d > 1. && d < 4. ? t = min(t, line(q, vec3(I+P,0),vec3(P,1) ) ) : t;\n         }\n        t = sqrt(t)-.05;                                  // convert to line SDF\n        q.xy = fract(q.xy+.5)-.5;                         // grid of points\n        t = min(t, length(q)-.02);\n        p += .5*t*D;                                      // step forward = dist to obj          \n     }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}