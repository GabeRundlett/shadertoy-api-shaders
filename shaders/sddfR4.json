{
    "Shader": {
        "info": {
            "date": "1656159151",
            "description": "License CC0: More Complex Atanh\nInspired by: Complex Atanh  - https://www.shadertoy.com/view/sl3XW7 \nI always thought Complex Atanh by mla was very cool\nI tinkered a bit with it on saturday morning and got something \nI think is differen",
            "flags": 0,
            "hasliked": 0,
            "id": "sddfR4",
            "likes": 12,
            "name": "More Complex Atanh",
            "published": 3,
            "tags": [
                "complex",
                "atanh",
                "domainmapping"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "// License CC0: More Complex Atanh\n//  Inspired by: Complex Atanh  - https://www.shadertoy.com/view/tsBXRW\n//  I always thought Complex Atanh by mla was very cool\n//  I tinkered a bit with it on saturday morning and got something \n//  I think is different enough to share\n\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat circle8(vec2 p, float r) {\n  p *= p;\n  p *= p;\n  return pow(dot(p, p),1.0/8.0)-r;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// Complex trig functions found at: Complex Atanh  - https://www.shadertoy.com/view/sl3XW7\n//  A very cool shader\nvec2 cmul(vec2 z, vec2 w) {\n  return mat2(z,-z.y,z.x)*w;\n}\n\nvec2 cinv(vec2 z) {\n  float t = dot(z,z);\n  return vec2(z.x,-z.y)/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 clog(vec2 z) {\n  float r = length(z);\n  return vec2(log(r),atan(z.y,z.x));\n}\n\nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n}\n\n// My own attempt at a ctanh\nvec2 cexp(vec2 z) {\n  float r = exp(z.x);\n  return r*vec2(cos(z.y), sin(z.y));\n}\n\nvec2 ctanh(vec2 z) {\n  z = cexp(2.0*z);\n  return cdiv(vec2(1,0)-z,vec2(1,0)+z);\n}\n\nvec2 transform(vec2 p) {\n  float a = 0.5*TIME;\n  p *= mix(2.0, 0.5, smoothstep(-0.85, 0.85, cos(0.5*a)));\n  p = ctanh(p);\n  p *= ROT(0.2*a);\n  p += 1.5*vec2(cos(0.3*a), sin(0.4*a));\n  p = catanh(p);\n  p.x -= 0.2*a;\n  return p;\n}\n\nvec3 effect(vec3 col, vec2 p_) {\n  const float scale = 1.0/PI;\n  const float cellw = 0.05;\n  p_ *= ROT(0.05*TIME);\n\n  float aaa = 2.0/RESOLUTION.y;\n  vec2 np_ = p_+aaa;\n  vec2 p   = transform(p_);\n  vec2 np  = transform(np_);\n  float aa = distance(p, np)*sqrt(0.5);\n\n  p *= scale;\n  aa *= scale;\n\n  vec2 n = floor(p/cellw);\n  p = mod(p, cellw);\n  p -= 0.5*cellw;\n  float fo = tanh_approx(aaa/(aa));\n  float d = circle8(p, 0.45*cellw);\n  col = mix(col, hsv2rgb(vec3(fract(0.1*n.y+0.05*n.x+0.05*TIME), mix(0., 0.95, fo), mix(0.9, 0.85, fo*fo))), smoothstep(aa, -aa, d)*step(aa, 0.7));\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p  = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  vec3 col = vec3(1.0);\n  col = effect(col, p);\n  col = mix(col, vec3(1.0), smoothstep(4.0, 0.0, TIME)),\n  col = clamp(col, 0.0, 1.0);\n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}