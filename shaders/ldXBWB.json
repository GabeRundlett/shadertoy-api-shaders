{
    "Shader": {
        "info": {
            "date": "1497812823",
            "description": "Try to destroy the green ball.\nClick on your mouse to aim.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldXBWB",
            "likes": 5,
            "name": "Ballistic Game",
            "published": 3,
            "tags": [
                "game",
                "ballistic"
            ],
            "usePreview": 0,
            "username": "Himred",
            "viewed": 787
        },
        "renderpass": [
            {
                "code": "//\n// A small ballistic game\n//\n\n#define G 9.80665\n#define RADIUS 0.02\n#define STATE vec2(1)\n#define MOUSE vec2(2)\n#define ALPHA vec2(3)\n#define SPEED vec2(4)\n#define TIME vec2(5)\n#define TARGET vec2(6)\n\nvec4 mouse;\nfloat state;\nfloat alpha;\nfloat speed;\nfloat time;\nvec2 target;\n\nvec4 LoadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy );\n}\n\n//----------------------------------------------------------------------------------------------\nvoid LoadData(void)\n{\n\tmouse = LoadValue(MOUSE);\n    state = LoadValue(STATE).x;\n    alpha = LoadValue(ALPHA).x;\n    speed = LoadValue(SPEED).x;\n    time = LoadValue(TIME).x;\n    target = LoadValue(TARGET).xy;\n}\n\n//----------------------------------------------------------------------------------------------\nfloat Parabola(float x,float angle,float speed)\n{\n    float c=cos(angle);\n    return x*tan(angle)-(G/(2.*speed*speed*c*c))*x*x;\n}\n\n//----------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n\tfragColor = vec4(uv/2.,0.7+0.4*sin(iTime),1.0);\n    vec2 obj=vec2(0.2,0.31);\n    \n    LoadData();\n   \n    // Sun\n    if(distance(vec2(1.,0.1),uv)<0.2) fragColor=vec4(1,1,0,1);\n    \n    // Ball\n    if(distance(uv,obj)<RADIUS) fragColor=vec4(1);\n    \n    // Target\n    if(distance(uv,target)<RADIUS) fragColor=vec4(0,1,0,1);\n       \n    // terrain\n    float h=0.2+0.12*cos(uv.x*4.);\n    if(uv.y<h) fragColor=vec4(0,0.5,0,1);\n    if(abs(uv.y-h)<0.01) fragColor=vec4(0,0.2,0,1);  \n    \n    // targeting\n    if(state==1.)\n    {\n        vec2 nm=vec2(iMouse.x,iMouse.y)/iResolution.y;\n        float alpha=atan(obj.y-nm.y,obj.x-nm.x);        \n        if(uv.y<nm.y && uv.x<nm.x && abs(atan(obj.y-uv.y,obj.x-uv.x)-alpha)<0.02 && mod(fract(uv.x)*40.,2.)>0.1) fragColor=vec4(1);\n    }\n    \n    // fly mode\n    if(state>1.)\n    {\n       float y=Parabola(uv.x-obj.x,alpha,speed)+obj.y;\n       if(distance(uv,vec2(uv.x,y))<0.01 && y>h)\n       { \n           float dt=(iTime-time)/1.;\n           if(abs(uv.x-dt)<RADIUS)\n           {\n               fragColor=vec4(0,0,0,1);\n               if(distance(uv,target)<RADIUS) fragColor=vec4(1);      \n           }\n       }\n    }\n    \n// win state\nif(state==3. && iTime-time>2.) fragColor=vec4(1,0,0,1);  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define STATE vec2(1)\n#define MOUSE vec2(2)\n#define ALPHA vec2(3)\n#define SPEED vec2(4)\n#define TIME vec2(5)\n#define TARGET vec2(6)\n#define G 9.80665\n#define RADIUS 0.02\n\nvec4 mouse;\nfloat state;\nfloat alpha;\nfloat speed;\nfloat time;\n\nvec2 obj=vec2(0.2,0.31);\nvec2 target=vec2(1.7,0.33);\n\n//----------------------------------------------------------------------------------------------\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\n\nvec4 LoadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy );\n}\n\n//----------------------------------------------------------------------------------------------\nvoid StoreValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\n//----------------------------------------------------------------------------------------------\nvoid LoadData(void)\n{\n\tmouse = LoadValue(MOUSE);\n    state = LoadValue(STATE).x;\n    alpha = LoadValue(ALPHA).x;\n    speed = LoadValue(SPEED).x;\n    time = LoadValue(TIME).x;\n    target = LoadValue(TARGET).xy;\n}\n\n//----------------------------------------------------------------------------------------------\nvoid InitData(void)\n{\n\tmouse=vec4(0.);\n    state=0.;\n    alpha=0.9;\n    speed=4.;\n    time=0.;\n    float x=min(1.4+fract(iTime)/2.,1.6);\n    float y=0.21+0.12*cos(x*4.);\n    target.x=x;\n    target.y=y+RADIUS;\n}\n\n//----------------------------------------------------------------------------------------------\nfloat Parabola(float x,float angle,float speed)\n{\n    float c=cos(angle);\n    return x*tan(angle)-(G/(2.*speed*speed*c*c))*x*x;\n}\n\n\n//----------------------------------------------------------------------------------------------\nint Game()\n{\n    LoadData();\n    \n    if(state==3. && iTime-time>3.)\n    {\n        InitData();\n        return 0;\n    }\n    \n    if(iMouse.z>0.)\n    {\n        state=1.;\n        vec2 nm=vec2(iMouse.x,iMouse.y)/iResolution.y;\n        alpha=atan(obj.y-nm.y,obj.x-nm.x);\n        speed=distance(obj,nm)*10.;\n        time=iTime;\n    }\n    \n    if(state==1. && alpha>-2.) state=0.;\n    if(state==1. && alpha<-3.) state=0.;\n    \n    \n    if(iMouse.z<=0. && mouse.z>0. && state==1.)\n    {\n        \tstate=2.;\n        \tfloat y=Parabola(target.x-obj.x,alpha,speed)+obj.y;\n        \tif(abs(y-target.y)<0.022) state=3.;\n    }\n    \n    \n\treturn 0;   \n}\n//----------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    if( fragCoord.x > 14.0 || fragCoord.y>14.0 ) discard;\n \n \tif(iFrame==0) InitData(); else Game();\n    \t\n    // Saving vars\n    StoreValue(ALPHA,vec4(alpha),fragColor,fragCoord );\n    StoreValue(SPEED,vec4(speed),fragColor,fragCoord );\n    StoreValue(MOUSE,iMouse,fragColor,fragCoord );\n    StoreValue(STATE,vec4(state),fragColor,fragCoord );                         \n    StoreValue(TIME,vec4(time),fragColor,fragCoord ); \n    StoreValue(TARGET,vec4(target,0,0),fragColor,fragCoord ); \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}