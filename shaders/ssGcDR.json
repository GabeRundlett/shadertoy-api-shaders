{
    "Shader": {
        "info": {
            "date": "1654693125",
            "description": "try to render Multiple objects\nand apply soft shadow & AO to render",
            "flags": 0,
            "hasliked": 0,
            "id": "ssGcDR",
            "likes": 5,
            "name": "more objects and shadow",
            "published": 3,
            "tags": [
                "sdf",
                "shadow",
                "geometry"
            ],
            "usePreview": 0,
            "username": "fl0a1e",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "// \n// Created by fl0a1e 06/08/2022\n// \n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// sdf from shaders by inigo quilez, https://iquilezles.org/articles/distfunctions/\n\n#define PI 3.14159265359\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define PRECISION  0.001\n\n\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y + 0.3;\n}\n\nfloat sdSphere( vec3 p, float r, vec3 offset)\n{\n    return length(p - offset)-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n// min\nfloat opU( float a, float b )\n{\n    return (a < b) ? a : b;\n}\n\nfloat sdSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat map( vec3 p )\n{\n    float d = sdSphere(p, .3, vec3(2.*sin(iTime),0.,0.));\n    d = sdSmoothUnion( d, sdTorus(p + vec3(0., .1, 0. ), vec2(0.8,0.2)), 0.2);\n    d = sdSmoothUnion(d, sdSphere(p, .3, vec3(0. , 0., 2.*cos(iTime))), 0.2);\n    \n    d = sdSmoothUnion(d, sdBoxFrame(p - vec3(2., 0., 0.), vec3(0.3,0.3,0.3), 0.03), .1);\n    d = sdSmoothUnion(d, sdBoxFrame(p - vec3(0., 0., -2.), vec3(0.3,0.3,0.3), 0.03), .1);\n    d = sdSmoothUnion(d, sdBoxFrame(p - vec3(-2., 0., 0.), vec3(0.3,0.3,0.3), 0.03), .1);\n    d = sdSmoothUnion(d, sdBoxFrame(p - vec3(0., 0., 2.), vec3(0.3,0.3,0.3), 0.03), .1);\n    d = opU(d, sdPlane(p));\n    return d;\n}\n\n\nvec3 calcNormal( in vec3 pos )\n{\n\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nfloat raymarch( vec3 ro, vec3 rd)\n{\n    float dist = 0.0;\n\n    for(int i = 0; i < MAX_MARCHING_STEPS; i++)\n    {\n        vec3 p = ro + rd * dist;\n        float d = map(p);\n        if(d < 0.001 || d > MAX_DIST) break;\n        dist += d;\n    }\n\n\n    return dist;\n}\n\n\nfloat calcAO( vec3 pos, vec3 nor)\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for(int i = 0; i < 5; i++)\n    {\n        float h = .01 + 0.015 * float(i);\n        float d = map(pos + nor * h);\n        occ = (h - d) * sca;\n        sca *= .95;\n        if( occ > 0.35 ) break;\n    }\n    \n    return clamp( 1.0 - 5.0*occ, 0.1, 1.0 );\n}\n\n\nfloat calcSoftshadow( vec3 ro, vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = .02;\n    for( int i = 0; i < 24; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        float s = smoothstep(0.0, 1.0, clamp(k*h/t,0.0,1.0));\n        res = min( res, s );\n        t += clamp( h, 0.02, 0.2 );\n        if( res < 0.004 || t > 2.5 ) break;\n    }\n    return clamp( res, 0.2, 1.0 );\n}\n\n\nmat3 camera(vec3 campos, vec3 camtar)\n{\n    float roll = 0.0;\n    vec3 cw = normalize(camtar - campos); // camera watch\n    vec3 cr = normalize(cross(cw, vec3(sin(roll), cos(roll), 0.0))); // camera right\n    vec3 cu = normalize(cross(cr, cw));   // camera up\n    \n    return mat3(cr, cu, -cw);\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    // background\n    vec3 col;\n    \n    // raymarch\n    float d = raymarch(ro, rd);\n    \n    if(d > MAX_DIST)\n    {\n        col = vec3(.4, .5, .9);\n    }\n    else // if hit something\n    {\n        vec3 pos = ro + rd * d;\n        vec3 nor = calcNormal(pos);\n        \n        float ao = calcAO(pos, nor);\n        \n        // sun\n        {\n            vec3 sunPos = vec3(13., 7., 5.);\n            vec3 ld = normalize(sunPos - pos);\n            float dif = clamp( dot( nor, ld ), 0.0, 1.0 );\n            // shadow\n            pos += nor * PRECISION * 2.0; // add offset\n            dif *= calcSoftshadow(pos, ld, 8.0);\n            \n            \n            float spe = pow( clamp( dot( nor, ld ), 0.0, 1.0 ),16.0);\n            spe *= dif;\n            spe *= 0.04+0.96*pow(clamp(1.0-dot(ld, sunPos),0.0,1.0),5.0);\n            \n            col += dif * vec3(.6, .6, 1.);\n        }\n        \n        \n        col *= ao;\n        \n        \n    }\n    \n    // fog\n    col = mix(col, vec3(.4, .5, .9), 1.0 - exp(-0.0001 * d * d * d));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.x;\n    \n    float time = iTime*.2;\n    vec3 ro = vec3(0.0, 2.0, 10.0);\n    vec3 camtar = vec3(0.0, 0.0, 0.0);\n    float cameraRadius = 10.;\n    ro.x = cameraRadius * cos(time) + camtar.x; // convert x-component to polar and add offset\n    // camera\n    ro.z = cameraRadius * sin(time) + camtar.z; // convert z-component to polar and add offset\n    mat3 cam = camera(ro, camtar);\n    vec3 rd = normalize(cam*vec3(uv, -1.5)); // ray directionvec3 ro = vec3(0.0, 2.0, 10.0);\n    \n\n\n    vec3 col = render(ro, rd);\n    \n    // gamma\n    col = pow(col, vec3(1.0/2.2));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}