{
    "Shader": {
        "info": {
            "date": "1674910694",
            "description": "New hash, based on XQO primitive (https://github.com/skeeto/hash-prospector/issues/23), which seems better than murmur3-style two-rounders. Somewhat weaker than triple32.",
            "flags": 0,
            "hasliked": 0,
            "id": "dllSW7",
            "likes": 6,
            "name": "new integer hash",
            "published": 3,
            "tags": [
                "random",
                "hash"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// See https://github.com/skeeto/hash-prospector/issues/23\n// for the description of the XQO primitive.\nuint hash(uint x)\n{\n    x ^= x >> 15;\n    x ^= (x * x) | 1u;\n    x ^= x >> 17;\n    x *= 0x9E3779B9u;\n    x ^= x >> 13;\n    return x;\n}\n\n/*\nComparison:\n\nFunction     | Linf        | RMS         | PractRand\n-------------|-------------|-------------|-------------------------------------------------\nxxHash       |     8658392 |   1195645.4 | Fails at  16KB\nMurmurHash3  |     4044016 |    566904.4 | Fails at  16KB\npcg_hash     |   331871348 |  16645540.6 | Fails at   4MB\nlowbias32    |     2023971 |    372660.4 | Fails at  32KB\nlowbias32_tib|     1211488 |    231074.2 | Fails at  64KB\n ->this<-    |      836260 |    121867.6 | Fails at   1GB\ntriple32     |      167788 |     44857.8 | Fails at   1GB ('mildly suspicious' at 8KB)\n\nNotes:\n1. Avalanche scores are measured similarly to\n     http://marc-b-reynolds.github.io/math/2019/08/10/Avalanche.html\n     with abs(counts[i][j]-(1ul<<31)) as data. Linf is infinity norm,\n     RMS is root mean square.\n2. PractRand is the result of `while(1) output(hash(i++));` piped to\n     RNG_test stdin32 -tlmin 1K -te 0 -tf 2\n     Using `-te 1` might be better.\n3. See https://www.shadertoy.com/view/XlGcRh for pcg_hash.\n4. See https://github.com/skeeto/hash-prospector for lowbias32 and\n     triple32. lowbias32_tib is the version by https://github.com/TheIronBorn.\n     See https://www.shadertoy.com/view/WttXWX.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    // Thanks to \"hash: visualising bitplanes\" by hornet https://www.shadertoy.com/view/lt2yDm\n    vec2 seed=mod(fragCoord,vec2(iResolution.x/8.0,iResolution.y/4.0));\n    uint bit=uint(int(floor(8.0*uv.x)+8.0*floor(4.0 * uv.y)));\n    uvec2 icoord=uvec2(ivec2(floor(seed+10.0*iTime)));\n    uint idx=1024u*icoord.y+icoord.x;\n    \n    float c=float((hash(idx)>>bit)&1u);\n\n    fragColor=vec4(c,c,c,1.0);\n    // Grid.\n    fragColor*=step(10.0/iResolution.x,1.0-abs(2.0*fract(8.0*uv.x)-1.0));\n    fragColor*=step(10.0/iResolution.y,1.0-abs(2.0*fract(4.0*uv.y)-1.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}