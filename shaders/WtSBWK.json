{
    "Shader": {
        "info": {
            "date": "1599874448",
            "description": "Minimal, efficient and robust hexagonal grid traversal. Each cell is visited only once, in the right order. Works great as an alternative to regular 2D grids for raytracing worlds.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtSBWK",
            "likes": 50,
            "name": "Hexagonal Grid Traversal - 2D",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "raycasting",
                "hexagon",
                "traversal"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1491
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Minimal, efficient and robust hexagonal grid traversal. Each cell\n// is visited only once, in the right order. The implementation boils\n// down to 7 fmad, 3 comparisons and 2 integer additions per iteration,\n// see lines 113 to 119.\n\n// This traversal can be applied to 3D too: https://www.shadertoy.com/view/WtSfWK\n\n\n#define AA 1\n\nfloat sdSegment( vec2 p, vec2 a, vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat sdDisk( vec2 p, vec2 a, float r )\n{\n\treturn length(p-a)-r;\n}\n\nint mod3( int n )\n{\n    return (n<0) ? 2-((2-n)%3) : n%3;\n    \n    // Other methods of computing mod3:           // PC-WebGL  Native-OpenGL  Android WebGL\n    //\n    // 1.  return (n<0) ? 2-((2-n)%3) : n%3;      //    Ok        Ok            Ok \n    // 2.  return int((uint(n)+0x80000001U)%3u);  //    Ok        Ok            Broken\n    // 3.  n %= 3; return (n<0)?n+3:n;            //    Ok        Broken        Ok\n    // 4.  n %= 3; n+=((n>>31)&3); return n;      //    Ok        Broken        Ok\n    // 5.  return ((n%3)+3)%3;                    //    Ok        Broken        Ok\n    // 6.  return int[](1,2,0,1,2)[n%3+2];        //    Ok        Broken        Ok\n}\n\n//=============================================================\n\n// return the hexagon that p belongs to\nivec2 hexagonGetID( in vec2 p ) \n{\n\tvec2  q = vec2( p.x, p.x*0.5+p.y*0.8660254037 );\n\n    ivec2 i = ivec2(floor(q));\n\tvec2  f =       fract(q);\n    \n\tint v = mod3(i.x+i.y);\n    ivec2 id = i + v;\n    if( v==2 ) id -= (f.x>f.y)?ivec2(1,2):ivec2(2,1);\n    \n    return ivec2( id.x, (2*id.y-id.x)/3 );\n}\n\n// return the center of an hexagon\nvec2 hexagonCenFromID( in ivec2 id )\n{\n    return vec2(float(id.x),float(id.y)*1.732050807);\n}\n\n//=============================================================\n\nvec3 render( in vec2 pos, in float px )\n{\n\tconst float kPtRa = 0.1;\n\n    // scale image\n    pos *= 8.0;\n    px  *= 8.0;\n\n    // ray\n    vec2 ro = vec2(9.0,2.0)*cos(0.11*iTime+vec2(0.0,1.0));\n    vec2 rd = normalize(cos(0.1*iTime*vec2(1.3,1.1)+vec2(3.0,2.0)-1.0));\n\n    // draw barckground\n    ivec2 oid = hexagonGetID(pos);\n    vec3  col = vec3(0.3+0.2*sin(float(15*oid.x)+cos(float(33*oid.y))));\n\n    // draw ray\n    float d = sdSegment( pos, ro, ro+rd*30.0 );\n    col = mix(col,vec3(1,1,0),1.0-smoothstep(-px*0.5,px*0.5,d-kPtRa*0.3));\n\n    // prepare for hex-traverse\n    const vec2 n1 = vec2( 1.0,0.0);\n    const vec2 n2 = vec2( 0.5,0.866025);\n    const vec2 n3 = vec2(-0.5,0.866025);\n    ivec2 i1 = ivec2( 2,0);\n    ivec2 i2 = ivec2( 1,1);\n    ivec2 i3 = ivec2(-1,1);\n    float d1 = 1.0/dot(rd,n1);\n    float d2 = 1.0/dot(rd,n2);\n    float d3 = 1.0/dot(rd,n3);\n    float s1 = 1.0; if(d1<0.0) {s1=-1.0;i1=-i1;} s1=(s1-dot(ro,n1))*d1;\n    float s2 = 1.0; if(d2<0.0) {s2=-1.0;i2=-i2;} s2=(s2-dot(ro,n2))*d2;\n    float s3 = 1.0; if(d3<0.0) {s3=-1.0;i3=-i3;} s3=(s3-dot(ro,n3))*d3;\n\n    // hex-traverse\n    ivec2 hid = hexagonGetID(ro);\n    float hdi = 0.0;\n    for( int i=0; i<32; i++ )\n    {\n        //-----------------------\n        // render current hexagon\n        //-----------------------\n        if( hid==oid ) col = mix(col,vec3(1.0,0.0,0.0),0.3);\n        col = mix(col,vec3(1,0,0),1.0-smoothstep(-px*0.5,px*0.5,sdDisk(pos,hexagonCenFromID(hid),kPtRa)));\n        col = mix(col,vec3(1,1,0),1.0-smoothstep(-px*0.5,px*0.5,sdDisk(pos,ro+rd*hdi,kPtRa)));\n\n        //------------------\n        // find next hexagon\n        //------------------\n        float t1 = s1+(                 float(hid.x)    )*d1;\n        float t2 = s2+(float(hid.y)*1.5+float(hid.x)*0.5)*d2;\n        float t3 = s3+(float(hid.y)*1.5-float(hid.x)*0.5)*d3;\n        \n             if( t1<t2 && t1<t3 ) { hid += i1; hdi=t1; }\n        else if( t2<t3          ) { hid += i2; hdi=t2; }\n        else                      { hid += i3; hdi=t3; }\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int mm=0; mm<AA; mm++ )\n    for( int nn=0; nn<AA; nn++ )\n    {\n        vec2 off = vec2(mm,nn)/float(AA);\n        vec2 uv = (fragCoord+off)/iResolution.xy;\n        vec2 pos = (2.0*(fragCoord+off)-iResolution.xy)/iResolution.y;\n    #else    \n    {\n        vec2 uv = fragCoord/iResolution.xy;\n        vec2 pos = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    #endif\n\t\tfloat px = 2.0/iResolution.y;\n        \n\t\tvec3 col = render(pos,px);\n        \n        tot += col;\n\t}\t\n \t#if AA>1\n    tot /= float(AA*AA);\n    #endif\n        \n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}