{
    "Shader": {
        "info": {
            "date": "1508967820",
            "description": "Stars Bonus",
            "flags": 0,
            "hasliked": 0,
            "id": "XlByzG",
            "likes": 5,
            "name": "Stars Bonus",
            "published": 3,
            "tags": [
                "stars",
                "bonus"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 627
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n#define countTubes 6.\n\nconst vec3 ld = vec3(0.,1., .5);\n\nfloat t = 0.;\n\nvec2 m;\n\nfloat fullAtan(vec2 p)\n{\n    return step(0.0,-p.x)*3.1415926535 + sign(p.x) * atan(p.x, sign(p.x) * p.y);\n}\n\nvec2 minObj(vec2 a, vec2 b)\n{\n\tif (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec4 df(vec3 p)\n{\n    float fa = fullAtan(p.xy) + 3.14159/10.;\n    float pathXY = length(p.xy) - 1.5 - (sin(fa*5.)*.5+.5)*.5;\n    vec2 rev = vec2(pathXY, p.z);\n    float a = iTime*2.;\n    float st = 3.14159*1.5 / countTubes;\n    vec2 tu = vec2(length(rev + vec2(cos(a), sin(a)) * 0.5) - 0.2,1);\n    for (float i=2.;i<countTubes;i++)\n    {\n    \ta += st;\n    \ttu = minObj(tu,vec2(length(rev - vec2(cos(a), sin(a)) * 0.5) - 0.2,i));;\n    }\n    \n\treturn vec4(tu,rev); \n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy).x - df(p-e.xyy).x,\n\t\tdf(p+e.yxy).x - df(p-e.yxy).x,\n\t\tdf(p+e.yyx).x - df(p-e.yyx).x );\n    return normalize(n);\n}\n\n// from iq code\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<1; i++ )\n    {\n\t\tfloat h = df( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0., 1. );\n}\n\n// from iq code\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<10; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = df( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n//--------------------------------------------------------------------------\n// Grab all sky information for a given ray from camera\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(.32, .32, .32), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    m = iMouse.xy/iResolution.xy;\n    if (m.x == 0.) m.x = .1;\n    \n\tfragColor = vec4(1);\n\t\n\tvec2 g = fragCoord.xy;\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (2.*g-si)/min(si.x, si.y);\n\t\n    float a = iTime*.5;\n\tvec3 rayOrg = vec3(0.5 * cos(a),0.5 * sin(a),1) * 5.6;\n\tvec3 camUp = vec3(0,1,0);\n\tvec3 camOrg = vec3(0,0,0);\n\t\n\tfloat fov = 0.5;\n\tvec3 axisZ = normalize(camOrg - rayOrg);\n\tvec3 axisX = normalize(cross(camUp, axisZ));\n\tvec3 axisY = normalize(cross(axisZ, axisX));\n\tvec3 rayDir = normalize(axisZ + fov * uv.x * axisX + fov * uv.y * axisY);\n\t\n\tfloat s = 0.;\n    float d = 0.;\n\tfloat dMax = 20.;\n\tfloat count = 0.;\n\tfor (float i=0.; i<500.; i++)\n\t{\n\t\tif (d*d/s>1e6 || d>dMax) break;\n        s = df(rayOrg + rayDir * d).x;\n\t\td += s * 0.2;\n\t\tcount+=1.;\n\t}\n\t\n    vec3 sky = GetSky(rayDir, ld, vec3(1.5));\n    \n   \tif (d<dMax)\n\t{\n        \n\t\tvec3 p = rayOrg + rayDir * d;\n        vec3 n = nor(p, 0.001);\n\t\tvec4 mat = df(p);\n        \n        vec3 tex = texture(iChannel0, mat.zw).rgb; // wood\n        \n        float m = mat.y;\n        vec3 colSSS = vec3(m*.2,m*.4,m*.2);\n        \n        \n\t\t// iq lighting\n\t\tfloat occ = calcAO( p, n );\n        float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, ld ), 0.0, 1.0 ) * (df(p+n*1.16).x);\n        float spe = pow(clamp( dot( rayDir, ld ), 0.0, 1.0 ),16.0);\n        float sss = df(p - n*0.001).x/0.01;\n\t\n        dif *= softshadow( p, ld, 0.1, 2. );\n        \n        vec3 brdf = vec3(-0.5) * tex;\n        brdf += 0.5*dif*vec3(1.00,0.90,0.60);\n        brdf += 0.4*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.3*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.5*(1.-sss)*colSSS;//vec3(0.2,0.7,0.2);\n        fragColor.rgb *= brdf;\n\n        fragColor.rgb = mix( fragColor.rgb, sky, 1.0-exp( -0.01*d*d*count/150. ) ); \n\t}\n\telse\n\t{\n\t\tfragColor.rgb = sky;\n\t}\n    \n    fragColor.rgb = sqrt(fragColor.rgb * fragColor.rgb * 0.8);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}