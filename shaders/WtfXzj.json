{
    "Shader": {
        "info": {
            "date": "1563481155",
            "description": "I stole a distance function from fb39ca4, now it's my background.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtfXzj",
            "likes": 4,
            "name": "M E N G E R S P O N G E",
            "published": 3,
            "tags": [
                "raymarcher"
            ],
            "usePreview": 0,
            "username": "vlams1",
            "viewed": 1043
        },
        "renderpass": [
            {
                "code": "//Rewritten as of 27-09-2019\n\n#define it 1024.\n#define pr .00001\n#define md 200.\n\nmat2 rotate(float a) {\n    float s = sin(radians(a));\n    float c = cos(radians(a));\n    return mat2(c,-s,s,c);\n}\n\n//Menger sponge SDF by fb39ca4\n//https://www.shadertoy.com/user/fb39ca4\n\nfloat sdCross(vec3 p) {\n\tp = abs(p);\n\tvec3 d = vec3(max(p.x, p.y),\n\t\t\t\t  max(p.y, p.z),\n\t\t\t\t  max(p.z, p.x));\n\treturn min(d.x, min(d.y, d.z)) - (1.0 / 3.0);\n}\n\nfloat sdCrossRep(vec3 p) {\n\tvec3 q = mod(p + 1.0, 2.0) - 1.0;\n\treturn sdCross(q);\n}\n\nfloat sdCrossRepScale(vec3 p, float s) {\n\treturn sdCrossRep(p * s) / s;\t\n}\n\nfloat sdScene(vec3 p) {\n    float s = 1.0;\n\tfloat d = 0.0;\n\tfor (int i = 0; i < 5; i++) {\n\t\td = max(d, -sdCrossRepScale(p, s));\n\t\ts *= 3.0;\n\t}\n\treturn d;\n}\n\nvec4 raymarch(vec3 ro, vec3 rd) {\n    vec3 p = ro;\n    float d;\n    float i;\n    for (i=0.; i < it; i++) {\n        d = sdScene(p);\n        p += rd*d;\n        if (d < pr) break;\n    }\n    return vec4(p,i);\n}\n\nvec3 normals(vec3 p) {\n    vec2 o = vec2(pr,0.0);\n    return normalize(vec3(\n        sdScene(p+o.xyy)-sdScene(p-o.xyy),\n        sdScene(p+o.yxy)-sdScene(p-o.yxy),\n        sdScene(p+o.yyx)-sdScene(p-o.yyx)));\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n, float s, float iterations, float intensity) {\n    float ao = 0.0;\n    for (float i = 1.0; i <= iterations; i++) {\n        float d = s * i;\n        ao += max((d - sdScene(p + n * d)) / d, 0.0);\n    }\n    return 1.0 - ao * intensity;\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec4 mouse = vec4(iMouse.xy / iResolution.xy * 2.0 - 1.0,iMouse.zw); //Mouse input\n    \n    vec3 ro = vec3(0.0,0.0,mod(iTime,2.0));\n    vec3 rd = normalize(vec3(uv,0.6));\n    rd.xy *= rotate(iTime*15.);\n        \n    vec3 col = vec3(1.);\n    \n    vec4 rm = raymarch(ro,rd);\n    vec3 p = rm.xyz;\n    vec3 n = normals(p);\n    col = mix(vec3(ambientOcclusion(p, n, 0.4, 5.0, 0.2)), vec3(0.6,0.2,0.8), length(p-ro)/5.0) + rm.w / it;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}