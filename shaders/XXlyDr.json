{
    "Shader": {
        "info": {
            "date": "1726062467",
            "description": "originals https://www.shadertoy.com/view/MdXSzS and other",
            "flags": 0,
            "hasliked": 0,
            "id": "XXlyDr",
            "likes": 0,
            "name": "warp gate to galaxy",
            "published": 3,
            "tags": [
                "fractal",
                "stars",
                "universe"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "#define NUM_LAYERS 8.\n#define TAU 6.28318\n#define PI 3.141592\n#define Velocity .025 //modified value to increse or decrease speed, negative value travel backwards\n#define StarGlow 0.025\n#define StarSize 02.\n#define CanvasView 20.\n\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);\n  float m = sin(StarGlow*1.2)/d;  \n    float rays = max(0., .5-abs(uv.x*uv.y*1000.));\n    m += (rays*flare)*2.;\n    m *= smoothstep(1., .1, d);\n    return m;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nvec2 spherize(in vec2 uv, vec2 center, float strength)\n{\n    vec2 delta = uv - center;\n    float delta2 = dot(delta.xy, delta.xy);\n    float delta4 = delta2 * delta2;\n    float delta_offset = delta4 * strength;\n    return center + delta * (1.+delta_offset)/(1.+0.2*strength);\n}\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    vec2 gv = fract(uv);\n    vec2 id = floor(uv);\n    for(int y=-1;y<=1;y++){\n        for(int x=-1; x<=1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            float size = fract(n);\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.1,.9,size)*.46);\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*2345.2)*TAU)*.25+.75;\n            color = color*vec3(.9,.59,.9+size);\n            star *= sin(iTime*.6+n*TAU)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n#define pi (acos(-1.))\n#define tau (pi*2.)\n\nmat2 rotate(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox( vec3 p, vec3 b, float r )\n{\n    vec3 d = abs(p) - (b-r);\n    return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0)-r;\n}\n\nfloat sdRect( vec2 p, vec2 b, float r )\n{\n    vec2 d = abs(p) - (b-r);\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0)-r;\n}\n\nfloat scene(vec3 p)\n{\n    float flip = step(gl_FragCoord.x,iResolution.x*.5)*2.-1.;\n    float time = flip*iTime;\n   \n    p.yz *= rotate(pi*.25*flip);\n   \n    vec3 a = vec3(\nlength(p.xz),\n        p.y,\n        atan(p.x,p.z)\n);\n   \n    a.z = fract((a.z/tau)*00.21*iTime)-.5;\n    a.x -= 1.;\n    a.xy = abs(a.xy)-.25;\n   \n    float r = .02;\n    float d = min(\n        sdBox(a.xzy,vec3(.2,.2,.4),r),\n        sdRect(a.xz,vec2(.15),r)\n    );\n    return d;\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\nvec3 color = vec3(.2,.1,.9);\n\n    float t=0.;\n    float k=0.;\n    for(int i=0;i<100;++i)\n    {\n        k = scene(cam+dir*t);\n        t += k;\n        if (abs(k) < .001)\n            break;\n    }\n\n    if (abs(k) < .001)\n    {\n        vec3 h = cam+dir*t;\n        vec2 o = vec2(.001, 0);\n        vec3 n = normalize(vec3(\n            scene(h+o.xyy)-scene(h-o.xyy),\n            scene(h+o.yxy)-scene(h-o.yxy),\n            scene(h+o.yyx)-scene(h-o.yyx)\n        ));\n\n        float A = .1;\n        float B = scene(h+n*A);\n        float fakeAO = clamp(B/A,0.,1.);\n        fakeAO = pow(fakeAO,.6)*.5+.5;\n\n        float light = 0.;\n        vec3 lightDir = normalize(vec3(1,4,-4));\n       \n        // wrap diffuse\n        light += dot(n,lightDir)*.7+.3;\n\n        // specular\n        vec3 H = normalize(lightDir+dir);\nfloat NdotH = dot(n, H);\nlight += pow(max(NdotH,0.), 3.)*30.;\n\n        return light * fakeAO * color;\n    }\n   \n    float gradient = pow(.8,dot(cam.xy,cam.xy));\n    return mix(color,vec3(1),gradient);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord/iResolution.xy-0.5;\nvec2 M = vec2(0);\n    vec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n   \n    vec3 cam = vec3(uv*3.,-5.);\n    vec3 dir = vec3(0,0,1);\n vec4 out_color;\n    out_color.xyz= pow(trace(cam,dir),vec3(.45));\n    // distance of current pixel from center\nfloat cLength = length(cPos);\n\n\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\nuv+=(cPos/cLength)*cos(cLength*12.0-iTime*4.0) * 0.03;\n   \nfloat v1, v2, v3;\nv1 = v2 = v3 = 0.0;\n\nfloat s = 0.0;\nfor (int i = 0; i < 40; i++)\n{\nvec3 p = s * vec3(uv, 0.0);\np.xy*=ma;\np += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)+out_color.xyz;\nfor (int i = 0; i < 8; i++) p = abs(p) / dot(p,p) - 0.659;\nv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\nv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\nv3 += length(p.xy*10.) * .0003;\ns  += .035;\n}\n\nfloat len = length(uv);\nv1 *= smoothstep(.7, .0, len);\nv2 *= smoothstep(.5, .0, len);\nv3 *= smoothstep(.9, .0, len);\n\nvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n(v1 + v3) * .3,\nv2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\nfragColor=vec4(min(pow(abs(col), vec3(1.2)), 1.0), 1.0);\n    M -= vec2(M.x+sin(iTime*0.22), M.y-cos(iTime*0.22));\n    M +=(iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    float t2 = iTime*Velocity;\n    vec3 col2 = vec3(0);  \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS){\n        float depth = fract(i+t);\n        float scale = mix(CanvasView, .5, depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col += StarLayer(uv*scale+i*453.2-iTime*.05+M)*fade;}  \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}