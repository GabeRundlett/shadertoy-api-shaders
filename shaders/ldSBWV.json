{
    "Shader": {
        "info": {
            "date": "1505398679",
            "description": "just a test;\nuse three closest point to ensure two border and fix corner;\nreference:\nhttps://iquilezles.org/articles/voronoilines/voronoilines.htm\nhttps://www.shadertoy.com/view/MslGD8",
            "flags": 0,
            "hasliked": 0,
            "id": "ldSBWV",
            "likes": 5,
            "name": "Voronoi Trial",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "WingStone",
            "viewed": 563
        },
        "renderpass": [
            {
                "code": "//#define GRAY\n\nvec2 Hash(vec2 p )\n{\n    mat2 mat = mat2(vec2(131.31, 313.13), vec2(13.13, 31.31));\n    p = mat  * p;\n    return fract(sin(p)*18.5453);\n}\n\nvec2 GetCenter(vec2 vpo1, vec2 vpo2, vec2 vpo3)\n{\n    \n    float d1 = dot(vpo3 - vpo1, vpo2 - vpo1);\n    float d2 = dot(vpo3 - vpo2, vpo1 - vpo2);\n    float d3 = dot(vpo1 - vpo3, vpo2 - vpo3);\n    \n    float c1 = d2 * d3;\n    float c2 = d1 * d3;\n    float c3 = d2 * d1;\n    \n    float c = c1 + c2 + c3;\n    \n    vec2 center = ((c2 + c3)*vpo1 + (c3 + c1)*vpo2 + (c1 + c2)*vpo3) / 2.0 / c;\n\n    return center;\n}\n\n//=============\n//return vec2( diatance, id)\nvec2 Veronoi(vec2 po, out vec2 vpo, out vec2 vpo1, out vec2 vpo2, out vec2 vpo3)\n{\n    po = 4.0 * po;\n    vec2 flo = floor(po);\n    vpo = fract(po);\n    vec3 mi1 = vec3(10.0);\n    float dist2, dist3;\n    \n    for(int i = -1; i <= 1; i++)\n    \tfor(int j = -1; j <= 1; j++)\n        {\n            vec2 po1 = vec2(float(i), float(j));\n            vec2 o = Hash(flo + po1);\n            vec2 v = po1 - vpo + (0.5 + 0.5 * sin(6.2831 * o + iTime));\n            float d = length(v);\n            \n            //use one closest point to ensure part;\n            //use two closest point to ensure one border;\n            //use three closest point to ensure two border and fix corner;\n            if(d < mi1.x)\n            {\n                dist3 = dist2;\n                vpo3 = vpo2;\n                \n              \tdist2 = mi1.x;\n                vpo2 = vpo1;\n                \n                mi1 = vec3(d, o);\n                vpo1 = v;\n            }\n            else if(d < dist2)\n            {\n                dist3 = dist2;\n                vpo3 = vpo2;\n                \n                dist2 = d;\n                vpo2 = v;\n            }\n            else if(d < dist3)\n            {\n                dist3 = d;\n                vpo3 = v;\n            }\n        }\n    return vec2(mi1.x, mi1.y + mi1.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vpo, vpo1, vpo2, vpo3;\n\tvec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    vec2 cell = Veronoi(uv, vpo, vpo1, vpo2, vpo3);\n    \n//gray, no center and no border    \n#ifdef GRAY\t\n    float col = (0.5 + 0.5 * cos(cell.y * 6.0 + iTime));\n\n    col *= smoothstep(0.0, 0.15, cell.x);\t\t//black center\n\n    fragColor = vec4(col,col, col, 1.0);\n    \n#else\n    vec3 col = fract(vec3(sin(cell.y + iTime)) + vec3(0.8, 0.5, 0.1));\n    \n    float wi = 0.06;\n    \n    col *= smoothstep(0.0, 0.15, cell.x);\t\t//black center\n    \n    //border\n    float len1 = dot(0.5 * (vpo1 + vpo2), normalize(vpo2 - vpo1));\n    float len2 = dot(0.5 * (vpo1 + vpo3), normalize(vpo3 - vpo1));\n    float factor1 = smoothstep(0., wi, len1);\n    float factor2 = smoothstep(0., wi, len2);\n    col *=factor1*factor2;\n    \n    //corner\n    float c = 0.25;\n    float factor3 = smoothstep(0., wi, pow(len1,c)+pow(len2,c)-0.97);\n    col *= factor3;\n    \n\n            \n    fragColor = vec4(col, 1.0);\n    \n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}