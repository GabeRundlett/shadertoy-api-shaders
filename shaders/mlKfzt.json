{
    "Shader": {
        "info": {
            "date": "1702405064",
            "description": "overlapping circles)))",
            "flags": 0,
            "hasliked": 0,
            "id": "mlKfzt",
            "likes": 5,
            "name": "behind kaleidoscope",
            "published": 3,
            "tags": [
                "dummytag"
            ],
            "usePreview": 0,
            "username": "vortmax",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "vec2 screen2uv(vec2 glCoord, vec2 glRes);\nvec2 angle2vec(float angle);\nvec2 angle2vec(float angle, float cx, float cy);\nvec3 rgb(int r, int g, int b);\n\nvec2 screen2uv(vec2 glCoord, vec2 glRes)\n{\n    return (glCoord.xy * 2.0 - glRes.xy) / glRes.y; \n}\n\nvec2 angle2vec(float angle, float cx, float cy)\n{\n    return vec2(cos(cx * angle), sin(cy * angle));\n}\n\nvec2 angle2vec(float angle)\n{\n    return angle2vec(angle, 1.0, 1.0);\n}\n\n\nvec3 rgb(int r, int g, int b)\n{\n    return vec3(r, g, b) / 255.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = screen2uv(fragCoord.xy, iResolution.xy); \n    vec2 uvM = screen2uv(iMouse.xy, iResolution.xy);\n    float t = iTime * 0.4;\n     \n    vec3 finalColor = vec3(0.0);\n    vec2 uv = uv0 - uvM;    \n    \n    \n    float count = 25.0;\n    vec3 col = rgb(200, 100, 150);\n    float radius = 1.9;\n    \n    \n    for(float i = 1.0; i <= count; ++i)\n    {\n        float shift = radians(360.0 / count * i);\n        vec2 pos = angle2vec(t + shift) * radius;\n        float d = length(uv + pos);\n        \n        d = sin(d + t * 2.5) * 2.5;\n        d = abs(d);\n        d = pow(0.01 / d * 2.5, 1.2);\n        \n        finalColor += d * col;\n    }\n   \n    vec2 laser1 = uv * angle2vec(-t);\n    vec2 laser2 = uv * angle2vec(-t + radians(90.0));\n\n    \n    float laser = max(\n        pow(0.02 / abs(laser1.x + laser1.y), 1.4), \n        pow(0.02 / abs(laser2.x + laser2.y), 1.4)\n    ) * abs(sin(t));\n        \n    finalColor.r *= laser;\n    finalColor.g += laser;\n\n    \n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}