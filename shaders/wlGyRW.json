{
    "Shader": {
        "info": {
            "date": "1610552258",
            "description": "Total rewrite of an older shader made for realtime. Testing out fork feature.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlGyRW",
            "likes": 4,
            "name": "Realtime Nebula Rewrite",
            "published": 3,
            "tags": [
                "raymarch",
                "volumetric",
                "nebula",
                "fork",
                "realtime",
                "volumetrics"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 343
        },
        "renderpass": [
            {
                "code": "// ^^^ Switch Between Common and Image ^^^\n// Commons are for commmon values and settings.\n// Image is for rendering the nebula.\n\n// Warning: These volumetrics are not accurate and do not take into account transmittance and stuff!\n// They are just meant to be fast.\n\n// Zi7ar21's In Progress Nebula Ray Marcher --- January 13th, 2020\n// I Deem You Allowed to Use My Code even Commercially and Even Modify it as Long as:\n// You keep this disclaimer.\n// You do not modify the terms\n\n// You do not have to keep my credits, however I urge you to leave them here in the source.\n\n// If this Code is Being Reused Entirely,\n// Then the Original and Possibly Updated Version Can be Found Here:\n// https://www.shadertoy.com/view/wlGyRW\n// Fork of \"Another Non-Realtime Nebula\" by Zi7ar21. https://www.shadertoy.com/view/tsKyRD\n\n// Learn the Basics of Raymarching Like I Did Here:\n// https://youtu.be/PGtv-dBi2wE\n\n// Oof ugly mess below watch out lol\n\n// Cyclic Noise from https://www.shadertoy.com/view/wl3czN\nconst mat3 m3 = mat3(0.33338, 0.56034, -0.71817, -0.87887, 0.32651, -0.15323, 0.15162, 0.69596, 0.61339)*2.1;\nvoid cyclicOctave(inout vec3 p, inout float rz, inout float z, inout float trk, inout float dspAmp){\n    p += sin(p.yzx*0.25*trk-trk*6.1+cos(p*0.1+0.5)*1.0)*dspAmp;\n    float ofst = 4.0;\n    vec3 s = sin(p*1.5);\n    rz += smoothstep(-1.1, 0.5, dot(s, cos(p.yzx*0.95+s.xyz+ofst)))*z;\n    dspAmp *= 0.65;\n    z *= 0.5;\n    trk *= 1.45;\n    p *= m3;}\nfloat cyclic3D(vec3 p){\n    vec3 bp = p;\n    float rz = 0.0;\n    vec3 drv = vec3(0.0);  \n    float z = 1.5;\n    float trk= 1.0;\n    float dspAmp = 1.0;\n    for (int i = 0; i<=octaves; i++){\n        cyclicOctave(p, rz, z, trk, dspAmp);}\n    rz -= 1.1;\n    return rz;}\n\n// Colors\n/*vec3 rgb2hsv(vec3 c){\n    vec4 K = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x-min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)), d/(q.x+e), q.x);\n}*/\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx+K.xyz)*6.0-K.www);\n    return c.z*mix(K.xxx, clamp(p-K.xxx, 0.0, 1.0), c.y);\n}\n\n// Nebula Noise\nvec3 nebulanoise(vec3 raypos){\n    float density = cyclic3D(raypos)-distance(raypos, vec3(0.0, 0.0, 0.0));\n    float densitysubtract = cyclic3D(raypos*2.0+vec3(2.0, 2.0, 4.0))*0.5;\n    vec3 rgb = hsv2rgb(clamp(vec3((density/8.0)+0.6, 1.0, density-densitysubtract), vec3(0.0), vec3(1.0)));\n    return rgb;\n}\n\nvec4 rand4blue(){\n    return texelFetch(iChannel0, shift2(), 0);\n}\n\n// Compute/March the Ray\nvec3 raymarch(vec3 raydir, vec3 camerapos){\n    vec3 density = vec3(0.0);\n    vec3 raypos = camerapos+(raydir*(rand4blue().r-0.5)*2.0);\n    for(int i=0; i < maxmarches; i++){\n        raypos += raydir*stepsize;\n        density += nebulanoise(raypos)*DENSITY;}\n    return density;}\n\n// Render the Image\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    //INIT_RNG;\n    rng_initialize(fragCoord, 0);\n    // Undistorted Normalized Pixel Coordinates (From 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    // Camera Orientation\n    mat3 rotationmatrix = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n    vec3 camerapos = vec3(sin(iTime*pi)/4.0, cos(iTime*pi)/4.0, -4.0);\n    vec3 raydir = normalize(camerafov*(uv.x*rotationmatrix[0]+uv.y*rotationmatrix[1])+rotationmatrix[2]);\n    vec3 raymarched = raymarch(raydir, camerapos);\n    fragColor = vec4(pow(raymarched, vec3(1.0/2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ^^^ Switch Between Common and Image ^^^\n// This is for commmon values and settings.\n\n// Change these Parameters to Your Liking!\n\n// Field of View for the Virtual Camera\n#define camerafov 1.0\n\n// Maximum Number of Marches,\n// You want it to limit the raymarcher before the max distance parameter or it will look bad.\n#define maxmarches 8\n\n// fBm Number of Octaves (Detail)\n#define octaves 4\n\n// Size of Steps, smaller means more sampling over depth but also means more computation.\n// Increase max marches if the scene goes invisible.\n#define stepsize 1.0\n\n// If you march less rays, the nebula will appear darker. Bump this up to make it brighter again.\n#define DENSITY 1.0\n\n// Settings not meant to be changed.\n// Pi is used for doing math with Radians where the Trigonometric functions are used, there is no point\n// in changing this. Full precsion floating point numbers can represent pi as 3.14159265, but it can't hurt\n// to add a few more digits in the case Shadertoy supports double precision in the future.\n#define pi 3.141592653589793\n#define twopi 3.141592653589793*2.0\n\n// High-Quality Random Numbers from Michael0884, proper demo: https://www.shadertoy.com/view/wltcRS\n/*uint ns;\n#define INIT_RNG ns = 185730U*uint(iFrame)+uint(fragCoord.x+fragCoord.y*iResolution.x);\n// https://www.pcg-random.org/\nvoid pcg(){\n    uint state = ns*747796405u+2891336453u;\n    uint word = ((state >> ((state >> 28u)+4u))^state)*277803737u;\n    ns = (word >> 22u)^word;\n}\nfloat rand(){pcg(); return float(ns)/float(0xffffffffu);}*/\n\n// Blue Noise for Real-Time dithering (Renders must be viewed 1:1 scale!)\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\nvoid rng_initialize(vec2 p, int frame){\n    pixel = ivec2(p);\n    // White noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x)+uint(p.y));\n    // Blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31+4566, frame*2345+58585);\n}\n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v){\n\tv = v * 1664525u+1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n}\n// Random blue noise sampling pos\nivec2 shift2(){\n    pcg4d(s1);\n    return (pixel + ivec2(s1.xy%0x0fffffffu))%1024;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}