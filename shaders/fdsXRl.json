{
    "Shader": {
        "info": {
            "date": "1619056452",
            "description": "dangerous curves v3",
            "flags": 8,
            "hasliked": 0,
            "id": "fdsXRl",
            "likes": 7,
            "name": "dangerous curves v3",
            "published": 3,
            "tags": [
                "dangerouscurvesv3"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n// referencia \n//----------------- pjkarlik \n///----------------Shane-------------- Voxel Corridor\n//https://www.shadertoy.com/view/tdVyzV\n//https://www.shadertoy.com/view/MdVSDh\n//https://www.shadertoy.com/view/4dfBWH   ...Road Raster Color\n\n#define MAX_STEPS 100\n#define MAX_DIST 110.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define REFLECT 2\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\n\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n// path functions \nvec2 path(in float z)\n{ \n    vec2 p1 =vec2(2.13*sin(z * .15), 1.74*cos(z * .085));\n    vec2 p2 =vec2(2.97*sin(z * .079), 1.23*sin(z * .127));\n    return p1 - p2;\n}\n// Repeat space along one axis.\nfloat pMod(inout float p, float size) {\n    float halfsize = size*0.5;\n    float c = floor((p + halfsize)/size);\n    p = mod(p + halfsize, size) - halfsize;\n    return c;\n}\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\tvec3 res= vec3(9999.0, -1.0,-1.0);\n    vec3 pp=p;\n   \n   ///https://www.shadertoy.com/view/tdVyzV\n   p.y=p.y-5.0;\n   vec2 qath = p.xy - path(p.z);\n   vec3 q = vec3(qath,p.z);\n   vec3 dq = q;\n   \n    vec3 r = dq;\n    pMod(r.z,3.);\n    vec3 r2=r;\n    vec3 r3=r;\n    \n   \n    r = vec3((r.x)-10.0,r.y-3.5,r.z);\n    r2 = vec3(abs(r2.x)-10.0,r2.y-1.0,r2.z);\n    r3 = vec3(r3.x,r3.y+1.0,r.z);\n    \n  \n   float banqueta= sdBox(r2, vec3(1.0,1.0,10.0) );\n   float calle= sdBox(r3, vec3(10.0,1.0,10.0) );\n   \n   dq.x=abs(dq.x)- 11.0;\n   dq.y-=5.0;\n   dq.z= opRep1D( dq.z, 10.0 );\n   float poste= sdBox( dq, vec3(1.0,10.0,1.0) );\n  \n   res =opU3(res, vec3(poste,8.0,-1.0));\n  \n   res =opU3(res, vec3(banqueta,6.0,-1.0));\n   res =opU3(res, vec3(calle,-1.0,7.0));\n   \n    //return (dist, id_color, id_material)\n    return res;\n}\n///------------------------------------\n//Shane --------https://www.shadertoy.com/view/MdVSDh\n// The brick groove pattern. Thrown together too quickly.\n// Needs some tidy up, but it's quick enough for now.\n//\nconst float w2h = 2.; // Width to height ratio.\nconst float mortW = 0.05; // Morter width.\n\nfloat brickMorter(vec2 p)\n{\n    p.x -= step(1., p.y)*.5;\n    p = abs(fract(p + vec2(0, .5)) - .5)*2.;\n    // Smooth grooves. Better for bump mapping.\n    return smoothstep(0., mortW, p.x)*smoothstep(0., mortW*w2h, p.y);\n}\n\nfloat brick(vec2 p)\n{   p = fract(p*vec2(0.5/w2h, 0.5))*2.;\n    return brickMorter(p);//*(brickShade(p)*.25 + .75);\n}\n\n/*\n// Surface bump function. Cheap, but with decent visual impact.\nfloat bumpSurf3D( in vec3 p, in vec3 n)\n{\n    n = abs(n);\n    if (n.x>0.5) p.xy = p.zy;\n    else if (n.y>0.5) p.xy = p.zx;\n    return brick(p.xy);\n}\n*/\n// correcion por Shane ..dia 24/abril/2021\n// Surface bump function. Cheap, but with decent visual impact.\nfloat bumpSurf3D( in vec3 p, in vec3 n)\n{\n   p.xy -= path(p.z);\n    n = abs(n);\n    if (n.x>0.5) p.xy = p.zy;\n    else if (n.y>0.5) p.xy = p.zx;\n    return brick(p.xy);\n}\n\n\n// Standard function-based bump mapping function.\n\nvec3 doBumpMap(in vec3 p, in vec3 nor, float bumpfactor)\n{   const vec2 e = vec2(0.01, 0);\n    float ref = bumpSurf3D(p, nor);                 \n    vec3 grad = (vec3(bumpSurf3D(p - e.xyy, nor),\n                      bumpSurf3D(p - e.yxy, nor),\n                      bumpSurf3D(p - e.yyx, nor) )-ref)/e.x;                     \n    grad -= nor*dot(nor, grad);          \n    return normalize( nor + grad*bumpfactor );\n}\n\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p, bool sombra)\n{ \n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    vec3 nor= normalize(n);\n    \n    if (sombra==true) return nor;\n    \n    if (mObj.id_material==7.0)\n     return nor;\n    else\n     return doBumpMap( p, nor,10.0);\n    \n}\n\nfloat RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    float minDist = 9999.0; \n    \n    for(int i=0; i <= PMaxSteps; i++) \n    {  \tp = ro + rd*dO;\n        dS = GetDist(p);\n        if ( abs(dS.x)<MIN_DIST  || i == PMaxSteps)\n        {   mObj.hitbln = true; minDist = abs(dO); break; }\n        \n        if(dO>MAX_DIST)\n        { mObj.hitbln = false;    minDist = dO;    break; } \n        dO += dS.x;\n        marchCount++;\n    }\n    mObj.dist = minDist;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p, false);\n    mObj.phit=p;\n    return dO;\n}\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p, true);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l , MAX_STEPS/2);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n///============================================================\nvec3 amb(vec3 c, float k)\n{  return c * k; }\n\nfloat diff(vec3 p,vec3 lp,vec3 n )\n{   vec3 l = normalize(lp - p);\n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    return dif;\n}\n\nfloat spec( vec3 p, vec3 lp,vec3 rd,vec3 n )\n{   vec3 l = normalize(lp - p);\n    vec3 r = reflect(-l, n);\n    float spe =pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    return spe;\n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 col) \n{\n    vec3 l = lp - p;\n    vec3 ldir = normalize(p-rd);\n    \n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = normal;\n   \tvec3 r = reflect(-l, n);\n    \n    vec3 amb=amb(col, 0.5);\n    float dif = diff( p, lp, n );\n    float diff=max(0.,dot(ldir,-n));\n    vec3 ln=normalize(lp);\n    \n    float spe= spec(  p,  lp, rd, n );\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n     float bac=clamp(dot(n,-l),0.0,1.0);\n    float rim=pow(1.0+dot(n,rd),3.0);\n    float dn=.15*max(0.,dot(normalize(rd),-n));\n    \n    float fshadow;\n    float sh = clamp(dot(n,normalize(lp)),0.0,1.0);\n    \n    \n    if (mObj.blnShadow==true)\n    { fshadow=GetShadow(p,lp);}\n    else\n    {   fshadow=0.5; }\n\n    \n    vec3 lin = amb;\n    lin += 1.0*(dif+diff)*sh;\n    lin += 2.5*spe;\n    lin += 2.5*fre*vec3(1.);\n    lin += 0.5*dom*vec3(1.);\n    lin += 0.35*bac*vec3(1.);\n    lin += 0.35*rim*vec3(1.);\n    lin += 0.35*rim*dn*vec3(1.);\n    \n    lin *= atten*0.8*col*fshadow;\n    lin = pow(lin,vec3(0.4545));\n  return lin;\n    \n}\n///============================================================\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    float intensity=1.0;\n     vec3 result;\n     \n    result = lightingv3( nor, p, plight_pos,  rd,ro, colobj);\n    return result;\n}\n///-------------------------------------\nvec3 montana(  in vec3 puv  )\n{\n\t\n    vec2 uv=puv.xy*5.5;\n    uv.x-=2.0;\n    vec3 rd=puv;\n    \n    uv.y+=1.0;\n    vec2 turn = uv;\n    float ti=iTime*2.0;\n    turn.x+=cos(ti*1.5+uv.y*10.0)*0.15+cos(ti+uv.y*10.0)*0.15;\n    float turntime=cos(ti*1.5+2.0)*0.15+cos(ti+2.0)*0.15;\n    \n    float ground=abs((turn.x-0.5)/(-turn.y*1.15+0.6));\n    ground=round(pow(3.0*ground,2.0));\n        \n    vec3  groundcolor=vec3(0.3,0.3,0.3);;\n    \n    if(uv.y<0.5)\n    {\n    \n        if(ground==0.0){groundcolor=vec3(0.3,0.3,0.3);}\n        if(ground==1.0){groundcolor=vec3(0.2,0.2,0.2);}\n        if(ground==2.0){groundcolor=vec3(1.0,0.6,0.2);}\n        if(ground==3.0){groundcolor=vec3(0.0,0.6,0.2);}\n        if(ground>=4.0){groundcolor=vec3(0.0,0.4,0.2);}\n        groundcolor*=clamp(round((sin((5.0/(0.55-uv.y*0.90))+(iTime*18.0+sin(iTime)*8.0))+1.0)*0.5)+0.8,0.0,1.0);\n    }else{\n        \n        float mountain=round((cos((uv.x*0.5+turntime+0.7)*7.0)+cos((uv.x+turntime))+cos((uv.x+turntime)*13.0)+2.0)-(uv.y*3.0));\n        groundcolor=vec3(0.0,mountain*0.3,mountain*0.15); \n        \n        if(groundcolor.y<=0.0)\n        { //groundcolor=vec3(0.0,0.6,1.0);   \n            float t = (rd.x + 1.0) / 2.0;\n            vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n            vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n            groundcolor=sky;\n        }\n    }\n\treturn groundcolor;\n}\n\n\nvec3 render_sky_color(vec3 rd)\n{ \n     vec3 m1= montana(rd );\n    return m1;\n}\n\n///-------------------------------------------\n\nfloat c = 0.5;\nfloat s = 0.5*sqrt(3.0);\n\nconst int lkup[16] = int[16](\n\t0, 1, 2, 3,\n\t3, 1, 2, 0,\n\t0, 2, 1, 3,\n\t3, 2, 1, 0 );\n\nvec3 cairo( in vec2 puv )\n{ \n    vec4 col; \n    vec2 wpos=puv*0.5;\n    //\n    \n\tvec2 r = mod(wpos, 2.0);\n\tvec2 r2 = mat2(c,-s,s,c) * (min(r, 2.0-r) - 0.5);\n\n    int cell = ((r2.x>0.0) ?2:0);\n    cell=cell+ ((r2.y>0.0)? 1: 0);\n    \n\tint cidx = ((r.y>1.0)?8:0) + ((r.x>1.0)?4:0) + cell;\n\tint c = lkup[cidx];\n\n    if( c == 0 ) {\n\t\tcol = vec4( 88.0 / 255.0, 140.0 / 255.0, 94.0 / 255.0, 1.0 );\n\t} else if( c == 1 ) {\n\t\tcol = vec4( 191.0 / 255.0, 67.0 / 255.0, 105.0 / 255.0, 1.0 );\n\t} else if( c == 2 ) {\n\t\tcol = vec4( 128.0 / 255.0, 38.0 / 255.0, 64.0 / 255.0, 1.0 );\n\t} else {\n\t\tcol = vec4( 163.0 / 255.0, 204.0 / 255.0, 153.0 / 255.0, 1.0 );\n\t}\n    \n     col = .5 + .45*cos(6.2831*float(c)/10. + vec4(0, 1, 2, 0)); \n     vec3 col3=col.xyz;\n    return  col3*col3;\n}\n\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n  vec3 l1;\n    \n    if (id_material==5.0)\n    {\n        float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n\t    return vec3( clamp(d,0.0,1.0) );\n    }\n    \n    \n    if (id_material==6.0)\n    {\n        float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n\t    vec3 col= vec3( clamp(d,0.0,1.0) );\n              l1= amb(col, 0.5) + col*diff( p,light_pos1, mObj.normal) + col*spec( p, light_pos1,mObj.rd, mObj.normal);\n        return l1;\n    }\n    \n    if (id_material==7.0)\n    {\n        vec3 col= cairo(p.xz );\n    return col;\n    }\n    \n }\n//-------------------------------------------------\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n     if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n \n\n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n///---------------------------------------------\nvec3 linear2srgb(vec3 c) {\n    return mix(\n        12.92 * c,\n        1.055 * pow(c, vec3(1.0/2.4)) - 0.055,\n        step(vec3(0.0031308), c)\n    );\n}\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{    return vec3(1.0) - exp(-hdrColor * exposure);  }\n\nvec3 Render(vec3 ro, vec3 rd)\n{\n  vec3 col = vec3(0);\n   TObj Obj;\n   mObj.rd=rd;\n   mObj.ro=ro;\n   vec3 p ;\n\n   float d=RayMarch(ro,rd, MAX_STEPS);\n   \n    Obj=mObj;\n    if(mObj.hitbln) \n    {\n        p = (ro + rd * d );  \n         \n         \n        vec3 nor=mObj.normal;\n\n        vec3 colobj;\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n        col= result;\n        col=linear2srgb(col);\n    }\n    else if(d>MAX_DIST)\n    col= render_sky_color(rd);\n   \n   return col;\n}\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*8.0,1000.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(5.0, 10.0, -10.0 ); light_color1=vec3( 1.0 );\n \tlight_pos2= vec3( 0.0, 10.0, 10.0 ); light_color2 =vec3( 1.0 ); \n \n   \n   vec3 ro=vec3(0.0,10.0,-25.0+t);\n   ro.xy += path(ro.z);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n      \n   \n    light_pos1+=ro;\n    light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 phit; //22-mar-2021\n    vec3 rf;\n    float marchCount;\n    bool blnShadow;\n    bool hitbln;\n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n#define COLORSKY vec3(0.1, 0.1, 0.6)\n\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9) \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//por jorgefloresp\n//referencia \n//https://www.shadertoy.com/view/ssfSzs  //khlorghaal\n\nvec2 mainSound( int samp, float time )\n{\n    float t= time;\n    float a1= sin(6.2831*440.0*t+sin(t*411.))*(.44*sin(t*210.));\n    float a2= sin(6.2831*450.0*t+sin(t*450.))*(.44*sin(t*110.0));\n    float a3= sin(6.2831*150.0*t+sin(t*650.))*(.044*sin(t*10.0));\n    float a4= 3.0*cos(a1-a2)*sin(a3);\n    return vec2(a1+a2+a3+a4);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}