{
    "Shader": {
        "info": {
            "date": "1640576480",
            "description": "The individual sources are placed in the for loop",
            "flags": 0,
            "hasliked": 0,
            "id": "ftyXD1",
            "likes": 5,
            "name": "Wave interference simulation",
            "published": 3,
            "tags": [
                "simulation",
                "mathematics",
                "physics"
            ],
            "usePreview": 0,
            "username": "x44203",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159265358979323846264338327950288419716939937510582097494459230781640\n#define tau pi * 2.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float wavelength = 1.0 / 25.0;\n    float c = 0.1;\n    \n    \n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.x * 2.0;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    int sources = 64;\n    \n    float value = 0.0;\n    for (int i = 0; i < sources; i++)\n    {\n        float percentage = float(i) / float(sources);\n        \n        /* // Uncomment this for spiral waves and put the block below into comments\n        float x = sin(percentage * tau) * wavelength * 0.25;\n        float y = cos(percentage * tau) * wavelength * 0.25;\n        float phase = percentage * tau;\n        */\n        \n        /* // Uncomment this for linear waves to the right and put the block below into comments\n        float x = percentage * wavelength * 4. - 0.5;\n        float y = 0.0;\n        float phase = percentage * tau * 4.;;\n        */\n        \n        // Adjust these to make different arrangements\n        float fs = float(sources);\n        float sfs = sqrt(fs);\n        float sfs1 = 1. / sfs;\n        float x = (mod(percentage + 0.0001, sfs1) - 0.5 / sfs + 0.5 / fs) * sfs * wavelength * 2.;\n        float y = ((percentage - mod(percentage + 0.0001, sfs1)) * sfs1 - 0.5 / sfs + 0.5 / fs) * sfs * wavelength * 2.;\n        float phase = percentage * tau * 4.;\n        phase = -length(vec2(x, y) + 1. * vec2(sin(iTime), cos(iTime))) * tau / wavelength;\n        \n    \n        vec2 pos = vec2(x, y);\n        \n        value += sin(length(uv.xy - pos) / wavelength * tau - iTime * c * 3. / wavelength * tau + phase);\n        \n        // Green dots indicate source positions\n        col.y += exp(-100000. * pow(length(uv.xy - pos), 2.));\n    }\n    \n    col.x = +value / float(sources);\n    col.z = -value / float(sources);\n    \n    if (length(uv) < 0.005)\n    col.xyz = vec3(1., 1., 1.);\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}