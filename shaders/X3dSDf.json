{
    "Shader": {
        "info": {
            "date": "1719707830",
            "description": "simple algorithm",
            "flags": 32,
            "hasliked": 0,
            "id": "X3dSDf",
            "likes": 11,
            "name": "iterative shadows",
            "published": 3,
            "tags": [
                "shadow"
            ],
            "usePreview": 0,
            "username": "andylovescode",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec4 c_empty = vec4(0.);\n    vec4 c_wall = vec4(1.);\n    vec4 c_origin = vec4(1., 0., 0., 0.);\n    vec4 c_light = vec4(0., 0., 1., 0.);\n\n    vec2 fixed_pos = (iResolution.xy * vec2(0.5));\n    vec2 fixed_ofst = fragCoord - fixed_pos;\n\n    vec2 origin = (iResolution.xy * vec2(0.5)) + sin(iTime * 1.0) * vec2(0.0, 250.0);\n    \n    origin = iMouse.xy;\n    \n    vec2 ofst = fragCoord - origin;\n    float dist = distance(ofst, vec2(0.));\n    vec2 dir = normalize(ofst);\n   \n    vec2 stepped = (fragCoord - (dir * 5.0)) / iResolution.xy;\n\n    if (dist < 25.0) {\n        fragColor = c_origin;\n    } else if (sin(fixed_ofst.x / 25.0) * sin(fixed_ofst.y / 25.0) > 0.9) {\n        fragColor = c_wall;\n    } else if (texture(iChannel0, stepped) == c_light || texture(iChannel0, stepped) == c_origin) {\n        fragColor = c_light;\n    } else {\n        fragColor = vec4(stepped / 518.0, 0., 1.);\n        fragColor = c_empty;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}