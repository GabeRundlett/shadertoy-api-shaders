{
    "Shader": {
        "info": {
            "date": "1673972357",
            "description": "Raymarched Montecarlo path-tracer adapted from my other raymarchers, iq's article \"Path-Tracing in One Hour\" and the examples inside of it.",
            "flags": 32,
            "hasliked": 0,
            "id": "clSGDV",
            "likes": 0,
            "name": "Path Tracer v1.2",
            "published": 3,
            "tags": [
                "raymarching",
                "clouds",
                "pathtracer"
            ],
            "usePreview": 0,
            "username": "raymarchingenthusiast",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 C, in vec2 P) {\n    vec4 c = texelFetch(iChannel0,ivec2(P),0);\n    C = vec4(c.xyz/c.w,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n#define FOV 60.\n#define sat(d) clamp(d,0.,1.)\n\nstruct Light {\n    float ai;\n    vec3 pos;\n    vec3 col;\n    float str;\n};\n\nstruct Mat {\n    int lt;\n    vec3 col;\n    float di;\n    float si;\n    float sa;\n};\n\nvec2 rot(vec2 p,float a) {\n    return vec2(p.x*cos(a)+p.y*sin(a),p.x*sin(a)-p.y*cos(a));\n}\n\nvec3 crd(vec2 fragCoord, vec3 iResolution, bool sideways) {\n    vec2 mouse = PI*((vec2(iResolution.x*3.,.4*iResolution.y*1.1)/iResolution.xy)-.5);\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    if(.5*iResolution.xy == vec2(0.)) mouse.xy = vec2(PI/2.,0.);\n    \n    vec3 rd = normalize(vec3(uv.xy,1./tan(FOV*PI/360.)));\n    \n    vec2 rotAmt = vec2(sideways?-1.5*PI-mouse.x:PI-mouse.x,mouse.y-PI);\n    rd = vec3(rd.x,rot(rd.yz,rotAmt.y));\n    rd.y = -rd.y;\n    vec2 rotRd = rot(rd.zx,rotAmt.x);\n    rd = vec3(-rotRd.y,rd.y,rotRd.x);\n    return rd;\n}\n\nfloat maxabs3(vec3 p) {\n    float o = abs(p.x)>abs(p.y) ? p.x : p.y;\n    return abs(o)>abs(p.z) ? o : p.z;\n}\n\nvec3 v(float f) {return vec3(f);}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define MAX_STEPS 1000\n#define MAX_DIST 1000.\n#define SURF_DIST .01\n#define OFFSET SURF_DIST*1.05\n#define LIGHT Light(.0,vec3(0.,120.,-50.),vec3(1.,.95,.85),2.)\n\n#define _randsettings vec3(48973.,3942067.,539.)\n#define _fogB .01\n#define _fogA .01\n\n#define maxcomp(a) max(a.x,a.y)\n\nfloat seed = 0.;\nfloat rand1(void) {\n    seed += _randsettings.z;\n    return mod(_randsettings.y*(seed-_randsettings.z) + _randsettings.z,_randsettings.x)/_randsettings.x;\n}\nvec2 rand2(void) {return vec2(rand1(),rand1());}\nvoid initRand(float time,vec2 c) {\n    seed = time+sin(time-c.x)*c.x-iResolution.y*(cos(c.y-time)*.5+.5);\n    //seed = abs((seed/rand1())-(179.*rand1()));\n}\n\n\n//////\nvec3 skybox(in vec3 rd, vec3 cam,float time) {\n    //vec3 skybox = texture(iChannel1,rd).xxx;\n    vec3 skybox = vec3(.5,.8,.95);  //blue sky\n    float sun = pow(dot(normalize(LIGHT.pos),rd)*.5+.5,100.)*2.;\n    vec2 cloudMove = time/15.*vec2(.1,.3);\n    vec3 cloud = texture(iChannel1,vec3(rd.xz/(rd.y*.5)-cloudMove+cam.xz/25.,time/96.)).xxx;\n    cloud += texture(iChannel1,vec3(rd.xz/(rd.y*1.5)-cloudMove+cam.xz/75.,time/96.)).xxx*3.;\n    cloud += texture(iChannel1,vec3(rd.xz/(rd.y*4.5)-cloudMove+cam.xz/225.,time/96.)).xxx*9.;\n    cloud += texture(iChannel1,vec3(rd.xz/(rd.y*13.5)-cloudMove+cam.xz/675.,time/96.)).xxx*27.;\n    cloud /= 40.;\n    //cloud = vec3(0.);  //remove clouds if not commented out\n    cloud = 3.*pow(cloud,vec3(3.));\n    if(rd.y>.03) {skybox = mix(skybox,vec3(1.,.8,.4),clamp(sun,0.,1.));skybox = mix(skybox,vec3(1.),cloud);}\n    else {\n    }\n    return skybox;\n}\n//maxabs3(rd)==rd.y&&\n//rd.y*\n//if(rd.y>0.) \n/////SDFs\n\nfloat sdSphere(vec3 p, vec4 sphere) {\n    return length(p-sphere.xyz)-sphere.w;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = sat(dot(pa,ba)/dot(ba,ba));\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdBox(vec3 p, vec3 a, vec4 b) {\n    vec3 q = abs(p-a)-b.xyz;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.)-b.w;\n}\n\nfloat sdBox(vec2 p, vec2 b) {\n    vec2 q = abs(p)-b;\n    return length(max(q,0.))+min(max(q.x,q.y),0.);\n}\n\nfloat sdCross( vec3 p ) {\n  float da = maxcomp(abs(p.xy));\n  float db = maxcomp(abs(p.yz));\n  float dc = maxcomp(abs(p.zx));\n  return min(da,min(db,dc))-1.;\n}\n\n\n\n/////World\nvec2 map(in vec3 p,float ctime) {\n   vec3 q = (p-vec3(0.,.5,15.))/9.; // vec3(0.,.5,15.) // v(0.)\n   float d0 = sdBox(p,v(0.),vec4(1.,1.,1.,0.));\n\n   float s = 1.0;\n   for( int m=0; m<3; m++ )\n   {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 3.0;\n      vec3 r = abs(1.0 - 3.0*abs(a));\n\n      float da = max(r.x,r.y);\n      float db = max(r.y,r.z);\n      float dc = max(r.z,r.x);\n      float c = (min(da,min(db,dc))-1.0)/s;\n\n      d0 = max(d0,c);\n   }\n   \n   float d1 = sdSphere(p,vec4(0.,0.,6.,2.));\n   float d2 = sdSphere(p,vec4(-1.5,3.,6.,1.5));\n   float d3 = sdSphere(p,vec4(1.5,3.,6.,1.5));\n   \n   float d = min(d0,min(d1,min(d2,d3)));\n   d = d0;\n   \n   float mat;\n   mat = 0.;\n   if(d==d1) mat=1.;\n   if(d==d2||d==d3) mat=2.;\n   \n   return vec2(d,mat);\n}\n\nvec3 getNormal(vec3 p,float ctime) {\n    float d0 = map(p,ctime).x;\n    vec2 e = vec2(.01,0.);\n    vec3 n = d0-vec3(\n    map(p-e.xyy,ctime).x,\n    map(p-e.yxy,ctime).x,\n    map(p-e.yyx,ctime).x);\n    \n    return normalize(n);\n}\n\nvec3 trimap(vec3 p, in vec3 n, sampler2D s, float k, float rk) {\n    n = pow(n,vec3(k));\n    vec3 tx = texture(s, p.yz/rk).xyz;\n    vec3 ty = texture(s, p.xz/rk).xyz;\n    vec3 tz = texture(s, p.xy/rk).xyz;\n    return (tx*n.x + ty*n.y+tz*n.z)/(n.x+n.y+n.z);\n}\n\n\nvec2 raymarch(in vec3 rd, in vec3 ro, out bool hit,float ctime) {  \n    float h = 0.;  \n    hit = false;\n    float m = -1.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*h;\n        vec2 q = map(p,ctime);\n        float d = q.x;\n        \n        if (d < SURF_DIST) {\n            hit = true;\n            m = q.y;\n            break;\n        }\n        if (h > MAX_DIST) break;\n        h += d;\n    }\n    \n    return vec2(h,m);\n}\n\nfloat shadow(vec3 p, vec3 rd, float len, float ctime) {\n    float ss = 1.;\n    float h = 0.;\n    for(int t = 0; t < MAX_STEPS && h < len; t++) {\n       vec3 cp = p+rd*h;\n       float d = map(cp,ctime).x;\n       if(d < SURF_DIST) return 0.;\n       h += d;\n    }\n    return 1.;\n}\n\nfloat diffuse(vec3 p,vec3 lp0,vec3 n, float ctime) {\n    vec3 l = normalize(lp0);\n    \n    float ss = shadow(p+n*OFFSET,l,length(lp0),ctime);\n    float dif = dot(l,n);\n    return max(dif,0.)*ss;\n}\n\nvec3 randCone(void) { // uniformVector from iq's \"Basic Montecarlo\" \n    float phi = rand1()*6.283185;\n    float x = rand1()*2.-1.;\n    float z = rand1();\n\treturn pow(z,1./3.)*vec3(sqrt(1.-x*x)*vec2(sin(phi),cos(phi)),x);\n}\n\nvec3 cosDir(vec3 nor) {\n    vec2 uv = rand2();\n    \n    float a = 6.283185*uv.y; float b = 2.*uv.x-1.;\n    vec3 dir = vec3(sqrt(1.-b*b)*vec2(cos(a),sin(a)),b);\n    return normalize(nor+dir);\n}\n\nvoid setMat(vec3 color, float fp, float  g, float drr, out vec3 scol, out vec3 sdat) {\n    scol = color;\n    sdat = vec3(fp,g,drr);\n}\n\nvoid worldGetMat(float id, vec3 n, out vec3 col, out vec3 dat) {\n    if(id==0.) setMat(v(.2),4.,.9,.7,col,dat);\n    if(id==1.) setMat(vec3(.2,.15,.05),2.,.6,.8,col,dat);\n    if(id==2.) setMat(v(.03),7.,1.,.9,col,dat);\n}\n\nvec3 applyFog(in vec3 col, float dist, vec3 rd, vec3 ro, vec3 ld) {\n    float fa = (_fogA/_fogB) * exp(-ro.y*_fogB) * (1.-exp(-dist*rd.y*_fogB))/rd.y;\n    float sa = max(dot(rd,ld),0.);\n    vec3 fc = mix(vec3(.5,.6,.7),vec3(1.,.9,.7),pow(sa,8.));\n    return mix(col,fc,fa);\n}\n\nvoid getBRDFRay(inout vec3 ro, inout vec3 rd, vec3 p, vec3 n, vec3 m) {\n    ro = p+n*OFFSET;\n    if(rand1() < m.z) {\n        rd = cosDir(n);\n    } else {\n        vec3 rc = randCone();\n       // vec3 a = rc.x*uu+rc.y*vv+rc.z*ww;\n        float f = m.y*sat(pow(1.-dot(-rd,n),m.x));\n        rd = normalize(reflect(rd,n)+rc*f);\n    }\n}\n\nvoid getCam(in float time, out vec3 ro,out vec3 uu, out vec3 vv, out vec3 ww) {\n    time += 1.;\n    ro = vec3(cos(time*2.)*4.,sin(time)*2.+2.,sin(time*2.5)*4.);\n    //ro = v(0.);\n    uu = vec3(1.,0.,0.);\n    vv = vec3(0.,1.,0.);\n    ww = vec3(0.,0.,1.);\n}\n\nvec3 rendererCalculateCol(vec3 ro, vec3 rd,float ctime,vec3 uu, vec3 vv, vec3 ww) {\n    vec3 tcol = v(0.);\n    vec3 fcol = v(1.);\n    float td = 0.;\n    for(float i = 0.; i < 4.; i++) {\n        bool hit = false;\n        vec2 q = raymarch(rd,ro,hit,ctime);\n        float d = q.x;\n        vec3 p = ro+rd*d;\n        float  mat;\n        mat = q.y;\n        \n        vec3 dcol;\n        vec3 scol;\n        td += d;\n        if (hit == true) {\n            float tdReq = 10.;\n            tdReq += tdReq/(i+1.);\n            if(td > tdReq) break;\n            \n            vec3 n = getNormal(p,ctime);\n            vec3 ld = LIGHT.pos-p;\n            float dif = diffuse(p,ld,n,ctime);\n            ld = normalize(ld);\n            //float spec = specular(n,-rd,normalize(LIGHT.pos-p),mat.sa);\n            vec3 sdat;\n            worldGetMat(mat,n,scol,sdat);\n            \n            vec3 diffuse = (dif*.5+.5)*LIGHT.str*LIGHT.col;\n            dcol = diffuse;\n            \n            fcol *= scol;\n            tcol += applyFog(fcol * dcol,d,rd,ro,ld);\n            \n            \n            getBRDFRay(ro,rd,p,n,sdat);\n        } else {\n            vec3 sky = skybox(rd,ro,ctime);\n            scol = sky;\n            tcol += scol * fcol;\n            break;\n        }\n    }\n    return tcol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    if(iFrame==0) fragColor=vec4(0.);\n    initRand(float(iFrame),fragCoord);\n    \n    float frameTime = float(iFrame)*(1./30.);\n    frameTime = 3.;\n    \n    float spp     = 1.;\n    float shutAp  = .6;\n    float blurAmt = .0015;\n    float fcsDist = 1.3;\n    bool  perfect = false; //Removes all blurring if true;\n    \n    if(perfect) {shutAp=.0;blurAmt=.0;fcsDist=100.;}\n    \n    vec3 qcol = v(0.);\n    for(float i = 0.; i < spp; i++) {\n        vec2 of = -.5 + fract(rand2());\n        if(perfect) of = vec2(0.);\n        vec2 p = (2.0*(fragCoord+of)-iResolution.xy)/iResolution.y;\n        vec3 ro; vec3 uu; vec3 vv; vec3 ww;\n        \n        float ctime = (frameTime*1.)-3. + shutAp*(1./24.)*rand1();\n        getCam(ctime,ro,uu,vv,ww); \n        vec3 er = normalize(vec3(p,1./tan(FOV*PI/360.)));\n        vec3 rd = uu*er.x+vv*er.y+ww*er.z;\n        \n        vec3 go = blurAmt*vec3(2.*rand2()-1.,0.);\n        vec3 gd = normalize(er*fcsDist-go);\n        ro += go.x*uu+go.y*vv;\n        rd += gd.x*uu+gd.y*vv;\n        \n        //vec3 rdOrig = rd;\n        vec3 col = sat(rendererCalculateCol(ro,normalize(rd),ctime,uu,vv,ww));\n        \n        qcol += col;\n        //qcol += ro;\n    }\n    qcol /= spp;\n    qcol = pow(qcol,v(1./2.2));\n    fragColor += vec4(qcol,1.);\n    //fragColor = vec4(rand2(),rand1(),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}