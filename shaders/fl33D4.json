{
    "Shader": {
        "info": {
            "date": "1636108322",
            "description": "Carousel (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "fl33D4",
            "likes": 11,
            "name": "Merry-Go-Round",
            "published": 3,
            "tags": [
                "raymarch",
                "carousel",
                "complexityreduction"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "// \"Merry-Go-Round\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Maxv2 (vec2 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashff (float p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar, gAng, nSec, aRot;\nint idObj;\nconst int idSup = 1, idTube = 2, idSeat = 3, idGrip = 4, idLitS = 5, idCmid = 6, idFlr = 7,\n   idSpk = 8, idTop = 9, idPole = 10, idLit = 11, idBase = 12, idRail = 13;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, a, h, s, sx;\n  dMin = dstFar;\n  p.xz = Rot2D (p.xz, 2. * pi * gAng);\n  q = p;\n  s = Hashff (11.1 * gAng);\n  q.x += 5. + 0.7 * s;\n  sx = sign (q.x);\n  q.x = abs (q.x) - 0.8 + 0.4 * (s - 0.5);\n  a = cos (2. * pi * gAng + 0.3 * pi * tCur) + 0.5 * cos (5. * pi * gAng - 0.7 * pi * tCur);\n  h = 0.5 + 0.2 * a;\n  q.y -= 0.2;\n  d = PrCylDf (q.xzy, 0.14, 0.1);\n  DMINQ (idSup);\n  q.y -= 2. * h;\n  d = PrCylDf (vec3 (q - vec3 (0., - h, 0.)).xzy, 0.06, h);\n  DMINQ (idTube);\n  q.xz = Rot2D (q.xz, 0.1 * pi * a * sx);\n  d = PrRoundBoxDf (q, vec3 (0.05, 0.05, 0.16), 0.1);\n  DMINQ (idSeat);\n  d = PrSphDf (vec3 (q.xy, abs (q.z) - 0.24), 0.05);\n  DMINQ (idLitS);\n  q.yz = Rot2D (q.yz - vec2 (0.2, -0.2), 0.07 * pi);\n  d = min (PrCylDf (q.xzy, 0.04, 0.3), PrCylDf ((q - vec3 (0., 0.3, 0.)).yzx, 0.03, 0.25));\n  DMINQ (idGrip);\n  return dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{  // (raymarching with axial grid reduces scene complexity when symmetry absent)\n  vec3 p;\n  vec2 cs;\n  float dHit, d, eps, rgOut;\n  rgOut = 10.;\n  eps = 0.001;\n  cs = sin (pi / nSec + vec2 (0., 0.5 * pi));\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    p.xz = Rot2D (p.xz, aRot);\n    gAng = (floor (nSec * atan (p.z, - p.x) / (2. * pi)) + 0.5) / nSec;\n    d = GObjDf (p);\n    p.xz = Rot2D (p.xz, 2. * pi * gAng);\n    d = min (d, 0.1 + max (- p.x - rgOut, abs (dot (vec2 (p.x, abs (p.z)), cs))));\n    dHit += d;\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, a, s;\n  dMin = dstFar;\n  q = p;\n  q.y -= 0.05;\n  d = PrCylDf (q.xzy, 9.3, 0.05);\n  DMINQ (idBase);\n  d = PrTorusDf (vec3 (q.xz, abs (abs (q.y - 1.) - 0.3) - 0.3), 0.03, 9.);\n  q.xz = Rot2D (q.xz, 2. * pi * floor (32. * atan (q.z, - q.x) / (2. * pi) + 0.5) / 32.);\n  q.xy -= vec2 (-9., 0.8);\n  d = min (d, PrCylDf (q.xzy, 0.03, 0.8));\n  DMINQ (idRail);\n  p.xz = Rot2D (p.xz, aRot);\n  q = p;\n  q.y -= 0.3;\n  d = PrCylDf (q.xzy, 1., 0.5);\n  DMINQ (idCmid);\n  q.y -= 0.6;\n  d = PrSphDf (q, 0.12);\n  DMINQ (idLit);\n  a = (floor (0.5 * nSec * atan (p.z, - p.x) / (2. * pi)) + 0.5) / (0.5 * nSec);\n  q = p;\n  q.y -= 0.1;\n  q.xz = Rot2D (q.xz, 2. * pi * a);\n  d = PrCaps2Df (vec2 (q.y - 0.1, q.x + 5.), 0.06, 2.5);\n  DMINQ (idFlr);\n  d = PrCylDf ((q - vec3 (-1.25, 0.1, 0.)).yzx, 0.07, 1.25);\n  DMINQ (idSpk);\n  d = Maxv2 (abs (Rot2D (q.xy, -0.05 * pi) - vec2 (-3.6, 5.2)) - vec2 (3.2, 0.04));\n  d = min (d, min (Maxv2 (abs (vec2 (q.x + 7.3, q.y - 3.95)) - vec2 (0.02, 0.15)),\n     Maxv2 (abs (vec2 (q.x + 1.2, q.y - 5.1)) - vec2 (0.02, 0.15))));\n  DMINQ (idTop);\n  s = sign (q.z);\n  q.z = abs (q.z);\n  q -= vec3 (7.2 * vec2 (-1., tan (pi / (0.5 * nSec))), 2.1).xzy;\n  d = PrCylDf (q.xzy, 0.07, 2.);\n  q.z *= s;\n  DMINQ (idPole);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 GrndNf (vec2 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return vec3 (normalize (vec3 (Fbm2 (p) - vec2 (Fbm2 (p + e.xy),\n     Fbm2 (p + e.yx)), 4. * e.x)).xzy);\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * ltDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    col = mix (vec3 (0.3, 0.4, 0.8), clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4;\n  vec3 c1, c2;\n  float a;\n  c1 = HsvToRgb (vec3 (gAng, 0.8, 1.));\n  c2 = HsvToRgb (vec3 (fract (gAng + 0.5), 0.8, 1.));\n  if (idObj == idPole || idObj == idBase || idObj == idCmid) a = atan (qHit.z, - qHit.x);\n  if (idObj == idBase) col4 = vec4 (0.4, 0.2, 0., 0.) * (1. - 0.3 * step (5., length (qHit.xz)) * \n     (1. - smoothstep (0., 0.1, sin (128. * a) + 0.5)));\n  else if (idObj == idTop) col4 = mix (vec4 (1., 0., 0., 0.1), vec4 (1., 1., 0., 0.1),\n     smoothstep (0., 0.02, fract (1.1 * qHit.z + 0.5) - 0.5));\n  else if (idObj == idFlr) col4 = (abs (qHit.x + 5.) < 2.45) ? vec4 (0.7, 0.4, 0.3, 0.1) *\n     (0.8 + 0.2 * smoothstep (0., 0.03, fract (2. * qHit.x) - 0.1)) * (1. -\n     0.4 * Fbm2 (64. * qHit.xz)) : vec4 (0.2, 0.7, 0.2, -1.);\n  else if (idObj == idSpk) col4 = vec4 (0.2, 0.3, 0.2, 0.1);\n  else if (idObj == idSup) col4 = vec4 (c1, -1.);\n  else if (idObj == idTube) col4 = vec4 (0.8, 0.8, 0.85, 0.2) * (0.6 +\n     0.4 * smoothstep (0., 0.02, fract (16. * qHit.y + 0.5) - 0.5));\n  else if (idObj == idSeat) col4 = mix (vec4 (c1, 0.1), vec4 (c2, 0.1),\n     step (0.5, fract (8. * qHit.z)));\n  else if (idObj == idGrip) col4 = vec4 (c1, 0.1);\n  else if (idObj == idCmid) col4 = vec4 (0.5, 0.5, 1., 0.1) *\n     (0.7 + 0.3 * smoothstep (0., 0.1, cos (0.5 * nSec * a) + 0.5));\n  else if (idObj == idPole) col4 = mix (vec4 (1., 0., 0., -1.), vec4 (1., 1., 1., 0.2),\n     smoothstep (0., 0.03, fract (8. * qHit.y + a / (2. * pi)) - 0.1));\n  else if (idObj == idRail) col4 = vec4 (0.8, 0.9, 0.9, 0.2);\n  else if (idObj == idLitS) col4 = vec4 (((qHit.z < 0.) ? c1 : c2), -1.);\n  else if (idObj == idLit) col4 = vec4 (1., 1., 0.7, -1.);\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 qHitG, col, vn;\n  float dstObjG, dstObj;\n  nSec = 36.;\n  aRot = -0.05 * pi * tCur;\n  dstObjG = GObjRay (ro, rd);\n  qHitG = qHit;\n  dstObj = ObjRay (ro, rd);\n  if (min (dstObj, dstObjG) < dstFar) {\n    if (dstObj < dstObjG) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n    } else {\n      ro += dstObjG * rd;\n      ro.xz = Rot2D (ro.xz, aRot);\n      qHit = qHitG;\n      vn = GObjNf (ro);\n      vn.xz = Rot2D (vn.xz, - aRot);\n    }\n    col4 = ObjCol ();\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) +\n       0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    else col = col4.rgb * (0.6 - 0.4 * dot (rd, vn));\n  } else if (rd.y < 0.) {\n    ro += (- ro.y / rd.y) * rd;\n    vn = GrndNf (ro.xz);\n    col = (0.4 * mix (vec3 (0.8, 1., 0.5), vec3 (0.7, 0.9, 0.5), 0.2 +\n       0.8 * smoothstep (0.3, 0.7, Fbm2 (8. * ro.xz)))) *\n       (0.2 + 0.8 * max (dot (vn, ltDir), 0.));\n    col *= 0.7 + 0.3 * smoothstep (0., 0.5, length (ro.xz) - 9.3);\n    col = mix (col, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.06 * pi;\n  if (mPtr.z > 0.) {\n    az -= 1.5 * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.3 * pi, -0.02 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0.4, -30.);\n  zmFac = 4.3 / (1. - 0.8 * abs (mod (az + pi, 2. * pi) - pi) / pi);\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  uv.x *= canvas.y / canvas.x;\n  col = mix (vec3 (0.85), col, sqrt (sqrt (max (0., 0.95 - length (pow (abs (uv), vec2 (12.)))))));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (p - vec2 (0., clamp (p.y, - h, h))) - r;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}