{
    "Shader": {
        "info": {
            "date": "1717783416",
            "description": "Live-coding session for a recent gig.",
            "flags": 32,
            "hasliked": 0,
            "id": "l3GGRG",
            "likes": 18,
            "name": "Radio(-laria)",
            "published": 3,
            "tags": [
                "raymarching",
                "folding",
                "dodecahedron"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nRadio(-laria).\n\nLive-coding session for a recent gig.\n\nGeometries are generated with sphere-tracing algorithm:\nhttp://www.michaelwalczyk.com/blog/2017/5/25/ray-marching\nhttps://iquilezles.org/articles/distfunctions\nhttp://mercury.sexy/hg_sdf/\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(texture(iChannel0, fragCoord/iResolution.xy).rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nRadio(-laria).\n\nLive-coding session for a recent gig.\n\nGeometries are generated with sphere-tracing algorithm:\nhttp://www.michaelwalczyk.com/blog/2017/5/25/ray-marching\nhttps://iquilezles.org/articles/distfunctions\nhttp://mercury.sexy/hg_sdf/\n\n*/\n\n#define pi 3.141592653\n#define tau (pi*2.)\n\n#define time iTime\n\n#define bpm 113.\n#define bpm_feedback (bpm*2.)\n#define tb (time*(bpm/9.55414012739))\n#define tb_feedback (time*(bpm_feedback/9.55414012739))\n#define sb (.77+2.5*(tb*.4+sin(tb)*.4))\n\n// https://lospec.com/palette-list/1bit-monitor-glow\nvec3 black = vec3(.133, .137, .137);\nvec3 white = vec3(.941, .965, .941);\n\n// Dodecahedron folding\n// checkout: https://www.shadertoy.com/view/wtsGzl\nvec3 fold(vec3 p) {\n    vec3 nc = vec3(-.5, -.809017, .309017);\n    for (int i = 0; i < 5; i++) {\n        p.xy = abs(p.xy);\n        p -= 2. * min(0., dot(p, nc)) * nc;\n    }\n    return p - vec3(0, 0, 1.275);\n}\n\nfloat re(float p, float d) {\n    return mod(p - d * .5, d) - d * .5;\n}\n\nvoid amod(inout vec2 p, float d) {\n    float a = re(atan(p.x, p.y), d);\n    p = vec2(cos(a), sin(a)) * length(p);\n}\n\nfloat glow = 0.;\nfloat de(vec3 p) {    \n    float scale = 5.;\n    p *= scale;\n\n    p = fold(p) - vec3(2.8, .2, .68);\n    p = fold(p) - vec3(.8, -1.5, .13);;\n    //p = fold(p) - vec3(.1, -.84, .2);;\n    p = fold(p) - vec3(.7, .02, .1);;\n\n    amod(p.xz, tau / 8.);\n    p.x = abs(p.x) - .2;\n\n    float d = dot(p, normalize(sign(p))) - .3;\n\n    glow += .013 / (.03 + d * d);\n\n    return d / scale;\n}\n\nvec3 camera(vec3 ro, vec3 ta, vec2 uv) {\n    vec3 fwd = normalize(ta - ro);\n    vec3 left = normalize(cross(vec3(0, 1, 0), fwd));\n    vec3 up = normalize(cross(fwd, left));\n    return normalize(fwd + uv.x * left + up * uv.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    float camera_distance = 3.5;\n    vec3 ray_origin = vec3(\n        cos(sb * .125) * camera_distance,\n        sin(tb * .125) * 4.,\n        sin(sb * .25) * cos(sb * .125) * camera_distance\n    );\n    vec3 camera_target = vec3(0, 0, 0);\n    vec3 ray_direction = camera(ray_origin, camera_target, uv);\n\n    vec3 pos;\n\n    float iterations = 0.;\n    float tdist = 0.; // total distance from the ray origin to the point\n    // Sphere-tracing\n    for (float i = 0.; i < 1.; i += .01) {// 100 iterations\n        iterations = i;\n        pos = ray_origin + ray_direction * tdist;\n        float dist = de(pos); // signed distance field\n        dist = max(abs(dist), .002);\n        tdist += dist * .3;\n    }\n\n    vec3 color = white * glow * .03;\n    color = pow(color, vec3(2.45));\n    color = mix(color, black, 1. - exp(.001 * tdist * tdist));\n    color = clamp(color, 0., 1.);\n    \n    color = mix(color, texture(iChannel0, fragCoord/iResolution.xy).rgb, sin(tb_feedback)*.5+.5);\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}