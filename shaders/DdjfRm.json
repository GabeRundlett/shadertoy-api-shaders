{
    "Shader": {
        "info": {
            "date": "1689592910",
            "description": "Fullscreen is a *must*  (as lower resolutions tend to die out)\n\nKeys:  m=see automata, space=regenerate, mouse x zooms\n\nMouse x zooms",
            "flags": 112,
            "hasliked": 0,
            "id": "DdjfRm",
            "likes": 6,
            "name": "Ghost in the Circuit",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "automata",
                "life",
                "conway",
                "gameoflife",
                "multipass"
            ],
            "usePreview": 0,
            "username": "misol101",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mid = iResolution.xy / 2.;\n    float mmul = 1. - (iMouse.x / iResolution.x);\n    fragCoord = mid - (mid*mmul-fragCoord*mmul);\n\n    vec4 val = vec4(0.);\n    for (int j = 0; j <= 1; j++)\n        for (int i = 0; i <= 1; i++)\n            val += texelFetch( iChannel0, ivec2(int(fragCoord.x)+i,int(fragCoord.y)+j), 0 );\n    val /= 2.;\n        \n    if (!readKeyToggle(KEY_M)) {\n        fragColor = val;\n    } else {\n        float v=(1./liveval)*val.w;\n        fragColor = vec4( v*0.9, v*0.95, v, 1.0 );\n    }    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 33995,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/velvetacidchrist/ghost-in-the-circuit"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Cellular automata buffer\n\nvec4 cellval(ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\nint cell(ivec2 p) { return (cellval(p).w == liveval ) ? 1 : 0; }\n\nfloat restart(vec2 fragCoord, float rradius) {\n    vec2 mid = iResolution.xy * 0.5; \n    float xmul=1.; if (iResolution.y < 1000.) xmul=1.75;\n    if (fragCoord.x > mid.x - rradius*xmul && fragCoord.x < mid.x + rradius*xmul+1. && fragCoord.y > mid.y - rradius && fragCoord.y < mid.y + rradius +1.)\n        return liveval;\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 col = vec3(-3.5*sin((iTime-10.)*0.012), 3.5*sin(iTime*0.0105), 3.5*sin(iTime*0.02));\n    setRules(col);\n    ivec2 px = ivec2(fragCoord);\n    vec4 curr = cellval(px);\n    float xres = texelFetch(iChannel2, ivec2(0,1), 0 ).x;\n\n    if( iFrame<2 || readKey(KEY_SPACE) || int(xres) != int(iResolution.x) || (iResolution.y < 800. && mod(iTime, 69.) < 0.2)   ) {\n        fragColor = vec4( 0.0, 0.0, 0.0, restart(fragCoord, 25.));\n        return;\n    }\n    int k = cell(px+ivec2(0,-2)) + cell(px+ivec2(-1,-1)) + cell(px+ivec2(1,-1))\n          + cell(px+ivec2(-2, 0))                        + cell(px+ivec2(2, 0))\n          + cell(px+ivec2(-1, 1)) + cell(px+ivec2(1, 1)) + cell(px+ivec2(0, 2));\n    \n    float ff = 0.;\n    if (curr.w > 0.5) {\n        if ((stayset & (1<<(k-1))) > 0 ) { ff = float(k); }\n    }\n    else {\n        ff = (bornset & (1<<(k-1))) > 0 ? liveval : 0.;\n    }\n    if (ff >= 1.0) {\n        int st = int(ff);\n        if ((st & ra) > 0) curr.x += cstep*rp;\n        if ((st & ga) > 0) curr.y += cstep*gp;\n        if ((st & ba) > 0) curr.z += cstep*bp;\n    } else {\n        curr.x -= cstep*rm; curr.y -= cstep*gm; curr.z -= cstep*bm;\n    }\n\tfragColor = vec4( clamp(curr.xyz,0.,1.), ff );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float cstep=1./256.;\n\nfloat liveval, rp,gp,bp, rm,gm,bm;\nint stayset, bornset, ra,ga,ba;\n\nvoid setRules(vec3 col) {\n    stayset = 23; bornset = 86;\n    liveval=5., rp=10., gp=7., bp=20., rm=2., gm=2.,bm=2.,  ra=1,ga=2,ba=4;\n    rp=rp+col.x; gp=gp+col.y; bp=bp+col.z;\n}\n\nconst int KEY_SPACE = 32;\nconst int KEY_M     = 77;\n#define readKey(key) (texelFetch( iChannel3, ivec2(key, 0), 0).x > .5)\n#define readKeyToggle(key) (texelFetch( iChannel3, ivec2(key, 2), 0).x > .5)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Resolution\nvoid mainImage( out vec4 O, in vec2 U ) { O = vec4(iResolution.x); }",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}