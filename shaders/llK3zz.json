{
    "Shader": {
        "info": {
            "date": "1472925837",
            "description": "There is a Russian Internet meme related to the song \"3rd of September\" by Shufutinsky.\nEvery year the Russian Internet brings it up on the 3rd of September. :)\nIt's a lyrical song about a broken relationship https://www.youtube.com/watch?v=Kv-tbdVOuOA",
            "flags": 8,
            "hasliked": 0,
            "id": "llK3zz",
            "likes": 2,
            "name": "3rd of September",
            "published": 3,
            "tags": [
                "music",
                "russian",
                "shufutinsky",
                "september"
            ],
            "usePreview": 0,
            "username": "alexpolt",
            "viewed": 942
        },
        "renderpass": [
            {
                "code": "vec4 test_sphere( vec4 sphere, vec3 ray, out float k ) {\n    \n\tvec3 r2s = ray * dot( sphere.xyz, ray );\n    vec3 near2s = r2s - sphere.xyz;\n    \n    vec4 rgbz = vec4( 0, 0, 0, 0 );\n    \n    if( length( near2s ) < sphere.w ) {\n        vec3 r0s = r2s - ray * sqrt(  pow( sphere.w, 2. ) - pow( length( near2s ), 2. )  );\n        float l1 = 0.2-0.8*dot( ray, normalize( r0s - sphere.xyz ) );\n        k = pow( l1, 1. );\n        rgbz = vec4( k, k, k, length( r0s ) );\n    }\n    \n\treturn rgbz;\n}\n\nvec3 test_star( float t, vec2 uv ) {\n    mat2 rot  = mat2( cos(t), sin(t), sin(t), -cos(t) );\n    uv = abs( rot * uv ) * 2.;\n    uv = uv.x < uv.y ? vec2( uv.y, uv.x ) : uv;\n    vec3 color = vec3( 255., 230., 255. ) / 255.;\n    float s = uv.y + .25 * uv.x - .25;\n    if( s < 0. ) color = vec3( 255., 179., 204. ) / 255.;\n    return color;\n}\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ar = vec2( 1, iResolution.y / iResolution.x );\n    \n\tvec3 pos = vec3( 0, 0, -180 );\n    vec3 ray = normalize( vec3( ( uv - .5 ) * ar, 1 ) );\n    \n    vec3 v = normalize( vec3( cos( 0.8*t ), sin ( 1.2*t ), cos( 1.3*t ) ) );\n    float t2 = t + 0.1;\n    vec3 dv = normalize( ( normalize( vec3( cos( 0.8*t2 ), sin ( 1.2*t2 ), cos( 1.3*t2 ) ) ) - v ) / 0.1 );\n    mat3 obj2cam = mat3( v, dv, cross( v, dv ) );\n\n    int text[5];\n    text[0] = 0xE777;\n    text[1] = 0x2445;\n    text[2] = 0xE777;\n    text[3] = 0x2144;\n    text[4] = 0xE774;\n    \n    vec3 colors[4];\n    colors[0] = vec3( 0,  1,  0 );\n    colors[1] = vec3( 0,  0,  1 );\n    colors[2] = vec3( 0, .5, .5 );\n    colors[3] = vec3( 1,  0,  0 );\n    \n    const float dist_max = 10000.0;\n    \n    vec3 bg = test_star( t * .5, fract( uv * ar * 8. ) - .5 );\n\tvec4 rgbz = vec4( bg, dist_max  );\n    \n    for( int i = 0; i < 5; i++ ) {\n    \tfor( int u = 0; u < 16; u++ ) {\n           \n            float a = floor( float( text[i] ) / pow( 2., float(u) ) );\n            float b = fract( a / 2.0 );\n            \n            if( b > 0. ) {\n                \n            \tvec3 sphere = vec3( 7 - u,  3 - i, 0 );\n                float tmod4 = floor( mod( t, 4. ) );\n                \n                vec4 color;\n                \n                for( float c = 0.; c < 4.; c++ )\n                \tif( tmod4 == c)\n                \t\tcolor = vec4( colors[ int( mod( c + float(u) / 4., 4. ) ) ], 1. );\n                    \n                float k;\n        \t\tvec4 rgbz2 = test_sphere( vec4( 6. * sphere * obj2cam - pos, 3.5 ), ray, k );\n                \n                if( length(rgbz2) > 0. ) {\n                    \n                \tif( rgbz2.w < rgbz.w ) {\n                  \t\trgbz = color * rgbz2 + vec4( rgbz.xyz * pow( 1. - k, 3.5 ), 0. );\n                \t}\n                }\n                \n            }\n            \n        }\n    }\n    \n    \n    fragColor = vec4( rgbz.xyz, 1 );\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( in int samp, float time )\n{\n    \n    float m[10];\n    m[0] = 138.6;\n    m[1] = 156.8;\n    m[2] = 220.;\n    m[3] = 0.;\n    m[4] = 0.;\n    m[5] = 554.4;\n    m[6] = 587.3;\n    m[7] = 880.;\n    m[8] = 0.;\n    m[9] = 0.;\n    \n    time = mod( time, 10. );\n    float t = mod( time * 3., 10. );\n    float s;\n    for( int i = 0; i < 10; i++ ) {\n        if( float( i ) == floor( t ) )\n    \t\ts = .125 * sin(6.2831*m[i]*time)*exp(-2.*fract(t));\n    }\n        \n    return vec2( s );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}