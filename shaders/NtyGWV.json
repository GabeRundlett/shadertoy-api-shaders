{
    "Shader": {
        "info": {
            "date": "1638306386",
            "description": "2d bezier test",
            "flags": 0,
            "hasliked": 0,
            "id": "NtyGWV",
            "likes": 6,
            "name": "2d bezier test",
            "published": 3,
            "tags": [
                "2dbeziertest"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(0.85),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{   p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat ellipse(vec2 p, vec2 focus0, vec2 focus1, float radius) \n{  return distance(p, focus0) + distance(p, focus1) - distance(focus0, focus1) * radius;}\n\nfloat ondas(vec2 p)\n{  float si = (sin(iTime + 1.0 * 1.05))/0.3;\n\tfloat co = acos(cos(iTime + 1.0 * 0.5))*0.2;\n    float res=abs(length(p+vec2(si*0.5,co))- 0.2);\n    return res;\n}\n\nfloat diente(vec2 p, vec2 pbx)\n{ float d1= sdCircle(p-vec2(0.0,0.0), 0.5 );\n    float d2= sdCircle(p-vec2(0.2,-0.35),0.5 );\n    float d3=sdBox(p-pbx, vec2(0.65,0.5) );    \n    float dif1= differenceSDF(d1, d2);\n    dif1= differenceSDF(dif1, d3);\n    return dif1;\n}\n\nvec3 MarOnda(vec2 uv,vec3 colOut, vec3 colIn, float t )\n{   float d1=uv.y + sin(uv.x*5.+t)*0.1;\n    colOut= DrawFig(colIn, colOut,d1);\n    return colOut;\n}\n\nvec3 Montana(vec2 uv,vec3 colOut, vec3 colIn )\n{   float d1=-0.2+uv.y + sin(uv.x*6.+10.5*cos(uv.y*1.5+0.25*fract(iTime)))*0.32;\n    colOut= DrawFigBorde(colIn, colOut,d1);\n    return colOut;\n}\n\nvec3 fantasma(vec2 p, vec3 col)\n{  float r1=1.0;\n    float r2=0.8;\n    float h=1.2;\n     \n    float d1= sdUnevenCapsule( p,r1,r2,h);\n    float d2=sdBox(p-vec2(0.0,-0.6),vec2(1.2,0.5) );\n    d1= differenceSDF(d1, d2);\n    \n    float sn=0.5*sin(iTime*2.0);\n    //ojo derecho\n    float radiusA=1.3;\n    float radiusB=1.2;\n    vec2 focus0A=vec2(-0.3,0.0);\n    vec2 focus1A=vec2(0.0,0.3);\n    float d3a= ellipse(p-vec2(0.5+sn*0.15,1.0),focus0A,focus1A,radiusA);\n    float d3b= ellipse(p-vec2(0.5,1.0),focus0A,focus1A,radiusB);\n    \n    //ojo izq\n    vec2 focus0B=vec2(0.3,0.0);\n    vec2 focus1B=vec2(0.0,0.3);\n    float d4a= ellipse(p-vec2(-0.5+sn*0.15,1.0),focus0B,focus1B,radiusA);\n    float d4b= ellipse(p-vec2(-0.5,1.0),focus0B,focus1B,radiusB);\n    \n    //iris\n    float d5a= sdCircle(p-vec2(0.4+sn*0.15,1.1), 0.02 );\n    float d5b= sdCircle(p-vec2(-0.4+sn*0.15,1.1), 0.02 );\n    \n    //dientes\n    vec2 p0=p;\n    p*=0.8;\n    p.x=abs(p.x)-0.1;\n    p.y*=0.55;\n    float d6a=diente( vec2(-p.x,p.y)-vec2(0.0,0.425+abs(sn)*0.125), vec2(0.0,0.3));\n    p=p0;\n    float d6b=diente(p-vec2(0.0,0.87), vec2(0.0,0.3));\n    float d6c=diente(p-vec2(0.2,0.87), vec2(0.0,0.3));\n    float d6d=diente(vec2(-p.x,p.y)-vec2(0.0,0.87), vec2(0.0,0.3));\n    float d6e=diente(vec2(-p.x,p.y)-vec2(0.2,0.87), vec2(0.0,0.3));\n    \n    //boca\n    float d7= sdCircle(p*vec2(0.3,1.2)-vec2(0.0,0.65), 0.2 );\n    \n    \n    //brazo izq\n    vec2 v0A = vec2(-0.8,0.9);\n    vec2 v1A = vec2(-1.3,0.9);\n    vec2 v2A = vec2(-0.5*sn-1.0,-0.3);\n    float b1 =abs( sdBezier( p, v0A,v1A,v2A ))-0.08; \n    \n    //brazo der\n    vec2 v0B = vec2(0.5,0.9);\n    vec2 v1B = vec2(1.3,0.5);\n    vec2 v2B = vec2(1.4+0.5*sn,1.8);\n    float b2 =abs( sdBezier( p-vec2(0.3,0.2), v0B,v1B,v2B ))-0.08; \n    ///zapato\n    float d8a= sdCircle(p.yx*vec2(0.5,-1.2)-vec2(0.0,-0.65), 0.25 );\n    float d8b= sdCircle(p.yx*vec2(0.5,-1.2)-vec2(0.0,0.65), 0.25 );\n    \n    //cuernos\n    p*=0.8;\n    p.x=abs(p.x)+0.2;\n    p.y*=0.55;\n    float d9a=diente( vec2(-p.x,-p.y)*0.5-vec2(0.0,-0.2), vec2(0.0,0.3));\n    \n    col= DrawFigBordeCol(vec3(0.0,0.0,0.0), col, d9a,vec3(1.0));\n    col= DrawFigBordeCol(vec3(0.0,0.0,0.0), col, d8a,vec3(1.0));\n    col= DrawFigBordeCol(vec3(0.0,0.0,0.0), col, d8b, vec3(1.0) );\n    col= DrawFigBorde(vec3(0.95,0.6,0.0), col, d1 );\n    col= DrawFig(vec3(0.0,0.0,0.0), col, d3a );\n    col= DrawFig(vec3(1.0,0.2,0.0), col, d3b );\n    col= DrawFig(vec3(0.0,0.0,0.0), col, d4a );\n    col= DrawFig(vec3(1.0,0.2,0.0), col, d4b );\n    col= DrawFig(vec3(1.0)*sin(iTime), col, d5a ); //iris\n    col= DrawFig(vec3(1.0)*sin(iTime), col, d5b ); //iris\n    col= DrawFigBorde(vec3(0.0,0.0,0.0), col, d7 );\n    //dientes\n    col= DrawFigBorde(vec3(1.0), col, d6a );\n    col= DrawFigBorde(vec3(1.0), col, d6b );\n    col= DrawFigBorde(vec3(1.0), col, d6c );\n    col= DrawFigBorde(vec3(1.0), col, d6d );\n    col= DrawFigBorde(vec3(1.0), col, d6e );\n    col= DrawFigBorde(vec3(0.5,1.0,0.0), col, b1 );\n    col= DrawFigBorde(vec3(0.5,1.0,0.0), col, b2 );\n\n    return col;\n}\n\nfloat Anillo(vec2 p)\n{  float si = (sin(iTime + 1.0 * 1.05))/0.3;\n\tfloat co = acos(cos(iTime + 1.0 * 0.5))*0.2;\n    float res=abs(length(p+vec2(si*0.5,co))- 0.2);\n    return res;\n}\n\n// Tone mapping\n\n// See: http://filmicgames.com/archives/75\nvec3 Uncharted2ToneMapping(vec3 color)\n{   float gamma = 2.2;\n\tfloat A = 0.15;\n\tfloat B = 0.50;\n\tfloat C = 0.10;\n\tfloat D = 0.20;\n\tfloat E = 0.02;\n\tfloat F = 0.30;\n\tfloat W = 11.2;\n\tfloat exposure = 0.012;\n\tcolor *= exposure;\n\tcolor = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;\n\tfloat white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;\n\tcolor /= white;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=2.0;\n    uv*=esc;\n    float t=iTime;\n\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.5/esc;\n    col= Montana(uv-vec2(0.0,0.5),col, vec3(0.8,0.3,0.0));\n    col= MarOnda(uv,col, vec3(0.0,0.0,0.75), t*3.0);\n    \n    col= fantasma(uv,col);\n    float d1= Anillo(uv);\n    col= DrawFig(vec3(1.0,0.2,0.0), col,d1);\n    col+=1.2*Uncharted2ToneMapping(col);\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://www.shadertoy.com/view/MlKcDD\n//referencia Iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n\n// signed distance to a quadratic bezier\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n\n        #if 0\n        // When p≈0 and p<0, h-q has catastrophic cancelation. So, we do\n        // h=√(q²+4p³)=q·√(1+4p³/q²)=q·√(1+w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1+½w) so that the q's\n        // cancel each other in h-q. Expanding and simplifying further we\n        // get x=vec2(p³/q,-p³/q-q). And using a second degree Taylor\n        // expansion instead: x=vec2(k,-k-q) with k=(1-p³/q²)·p³/q\n        if( abs(p)<0.001 )\n        {\n            float k = p3/q;              // linear approx\n          //float k = (1.0-p3/q2)*p3/q;  // quadratic approx \n            x = vec2(k,-k-q);  \n        }\n        #endif\n\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        res = dot2(q);\n    \tsgn = cross2(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cross2(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cross2(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n    }\n    \n    return sqrt( res )*sign(sgn);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}