{
    "Shader": {
        "info": {
            "date": "1589878945",
            "description": "Apollonian gasket from [url]https://www.shadertoy.com/view/tsXBRf[/url] by sl2c\n\nMouse + various key controls, see code header. Using mouse stops animation (restart with 'm' key).",
            "flags": 48,
            "hasliked": 0,
            "id": "wdsfWX",
            "likes": 15,
            "name": "Colourful Apollonian III",
            "published": 3,
            "tags": [
                "inversion",
                "apollonian",
                "gasket"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 646
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Colourful Apollonian III, mla, 2020\n//\n// Another Apollonian Gasket - this is the same as the one in\n// https://www.shadertoy.com/view/tsXBRf by sl2c, but constructed in a\n// slightly different way that brings out the 3-fold symmetry. A\n// notable feature is inversion in a circle of imaginary radius.\n//\n// <mouse>: apply inversion\n// <up>/<down>: zoom in/out\n// a,b,c,d,r,s,t: various controls for colouring\n// m: mouse action\n// x: show inversion circles\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.1415927;\n\nconst int N = 3; // Any odd N >= 3 will work\nconst float D = 1.0/cos(PI/float(N)); // Centre distance of outer circles\nconst float R = D*sin(PI/float(N));   // Radius of outer circles\nconst float K = D-R;                  // Radius squared of centre circle.\n\nvec3 getcircle(int i) {\n  float t = 2.0*PI*float(i)/float(N);\n  return vec3(D*vec2(sin(t),cos(t)),R*R);\n}\n\nvec3 pcolor(vec2 z) {\n  int nsteps = 50;\n  int step = 0;\n  for (step = 0; step < nsteps; step++) {\n    if (length(z) < K) break;\n    float k = K/dot(z,z);\n    z *= -k; // Imaginary radius\n    for (int i = 0; i < N; i++) {\n      vec3 c = getcircle(i);\n      if (dot(z-c.xy,z-c.xy) < c.z) {\n        z -= c.xy;\n        z *= c.z/dot(z,z);\n        z += c.xy;\n        break;\n      }\n    }\n  }\n  if (step == nsteps) return vec3(0);\n  vec3 col = vec3(1);\n  if (key(CHAR_A)) col *= vec3(step%2);\n  if (key(CHAR_B)) col *= vec3(1-step%2);\n  if (!key(CHAR_C)) col *= hsv2rgb(vec3(float(step)/6.0,1,1));\n  if (key(CHAR_D)) col *= (step%2==0) ? vec3(0,0,1): vec3(1,0,0);\n  if (key(CHAR_R)) col = 1.0-col;\n  if (key(CHAR_S)) col = mix(vec3(1),col,0.5);\n  if (!key(CHAR_T)) col *= 1.0-length(z)/K;\n  return col;\n}\n\nvec3 getcolor(vec2 z, vec2 w) {\n  if (!key(CHAR_M) && iMouse.x > 0.0) {\n    z = invertto(z,w);\n  } else if (true) {\n    float k = 1.618*sin(0.5*iTime);\n    z.y += k;\n    z = invert(z,vec3(0,0,1.0));\n    z = invert(z,vec3(0,k,1));\n  }\n  vec3 color = pcolor(z);\n  if (key(CHAR_X)) {\n    float lwidth = 0.01;\n    float pwidth = 2.0*fwidth(z.x);\n    vec3 ccolor = 0.8*vec3(1,1,0);\n    color = mix(ccolor,color,smoothstep(0.5*lwidth,lwidth,abs(length(z)- sqrt(abs(K)))));\n    for (int i = 0; i < N; i++) {\n      vec3 c = getcircle(i);\n      color = mix(ccolor,color,smoothstep(0.5*lwidth,lwidth,abs(length(z-c.xy)-sqrt(c.z))));\n    }\n  }\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  float AA = 2.0;\n  vec3 color = vec3(0);\n  float scale = 1.0;\n  scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 z = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec2 w = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      z *= scale; //w *= scale;\n      color += getcolor(z,w);\n    }\n  }\n  color /= AA*AA;\n  color = pow(color,vec3(0.4545));\n  fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 invert(vec2 z, vec3 c) {\n  z -= c.xy;\n  z *= c.z/dot(z,z);\n  z += c.xy;\n  return z;\n}\n\nvec2 invertto(vec2 z, vec2 m) {\n  float X = dot(m,m);\n  m /= X;\n  return invert(z,vec3(m,(1.0-X)/X));\n}\n\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n#define key(code) (texelFetch(iChannel3, ivec2(code,2),0).x != 0.0)\n\n#define store(i,j) (texelFetch(iChannel2, ivec2(i,j),0))\n\n#define keycount(key) (int(store(0,key).x))\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_H = 72;\nconst int CHAR_J = 74;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}