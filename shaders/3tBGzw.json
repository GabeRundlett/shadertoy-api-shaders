{
    "Shader": {
        "info": {
            "date": "1558777075",
            "description": "This is neither a fixed pattern nor a temporal noise/grain shader. I tried a new approach, so that the noise pattern is only changing when the color of the position is changing.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tBGzw",
            "likes": 4,
            "name": "SmartNoise Demo (v3)",
            "published": 3,
            "tags": [
                "noise",
                "goldenratio",
                "grain",
                "golden",
                "goldennoise"
            ],
            "usePreview": 1,
            "username": "Bapho",
            "viewed": 995
        },
        "renderpass": [
            {
                "code": "//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// SmartNoise Demo by Bapho\n// https://github.com/Bapho/reshade-shaders/blob/master/Shaders/SmartNoise.fx\n//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nfloat noise = 2.0;\n\n//----------------------------------------------------------------------\nprecision lowp float;\nfloat PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   \nfloat PI  = 3.14159265358979323846264 * 00000.1; // PI\nfloat SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two\n\n\nfloat gold_noise(in vec2 coordinate, in float seed){\n    return fract(tan(distance(coordinate*(seed+PHI), vec2(PHI, PI)))*SQ2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mouse;\n    if (iMouse.x <= 0.0 || iMouse.x >= iResolution.x){\n\t\tmouse = iResolution.x / 2.0;\n    } else {\n        mouse = iMouse.x;\n    }\n                             \n    if (mouse > fragCoord.x - 4.0 && mouse < fragCoord.x + 4.0){\n        fragColor = vec4(0.4, 0.0, 0.0, 1.0);\n    } else {\n\n        vec2 uv = fragCoord/iResolution.xy;\n\n        vec3 color;\n        if (fragCoord.x < iResolution.x * 0.05\n            || fragCoord.x > iResolution.x * 0.95){\n            color = vec3(0.0);\n            \n        } else if (fragCoord.y < iResolution.y * 0.15){\n        \tcolor = texture(iChannel1, uv).rgb;\n            \n        } else if (fragCoord.y < iResolution.y * 0.85){\n            color = texture(iChannel0, uv).rgb;\n            \n        } else {\n            color = 0.5 + 0.25*cos(iTime*0.5+uv.xyx+vec3(0,4,8));\n            //color = vec3(0.0, 0.8, 0.2);\n        }\n\n        if ((mouse <= 0.0 && fragCoord.x < iResolution.x / 2.0) \n\t\t\t\t|| mouse > fragCoord.x){\n            \n            float luminance = (0.2126 * color.r) \n                + (0.7152 * color.g) + (0.0722 * color.b);\n            \n            float uniquePos = (iResolution.x * fragCoord.y) + fragCoord.x;\n\n            float amount = noise * 0.08;\n            \n            // adjusting \"noise contrast\"\n            if (luminance < 0.5){\n                amount *= (luminance / 0.5);\n            } else {\n                amount *= ((1.0 - luminance) / 0.5);\n            }\n            \n            // reddish pixels will get less noise\n            float redDiff = color.r - ((color.g + color.b) / 2.0);\n            if (redDiff > 0.0){\n                amount *= (1.0 - (redDiff * 0.5));\n            }\n\n            // a very low unique seed will lead to slow noise\n            // pattern changes on slow moving color gradients\n            float uniqueSeed = ((luminance * iResolution.y) + uniquePos) * 0.00000001;\n            \n            // using a fictive coordinate as a workaround to fix a pattern bug\n\t\t\tvec2 coordinate = vec2(fragCoord.x, fragCoord.y * 1.001253543);\n            \n            // average noise luminance to subtract\n            float sub = (0.5 * amount);\n\n            // \"noise clipping\"\n            if (luminance - sub < 0.0){\n                amount *= (luminance / sub);\n                sub *= (luminance / sub);\n            } else if (luminance + sub > 1.0){\n                if (luminance > sub){\n                    amount *= (sub / luminance);\n                    sub *= (sub / luminance);\n                } else {\n                    amount *= (luminance / sub);\n                    sub *= (luminance / sub);\n                }\n            }\n\n            // calculating and adding/subtracting the golden noise\n            float ran = gold_noise(coordinate, uniqueSeed);\n            float add = clamp(ran * amount, 0.0, 1.0);\n            color += (add - sub);\n        }\n\n        fragColor = vec4(color, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}