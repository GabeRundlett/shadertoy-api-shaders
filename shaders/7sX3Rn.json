{
    "Shader": {
        "info": {
            "date": "1615367967",
            "description": "This preview for guide to creation tiled texture in photosop using cloud filter. You can build it use \"Cloud\" and \"Difference Cloud\", mix them with defaul \"Emboss\", \"Pin Light\", \"Difference\" filters. And come up with your own effects by changing the param",
            "flags": 0,
            "hasliked": 0,
            "id": "7sX3Rn",
            "likes": 16,
            "name": "Photoshop Texture Guide",
            "published": 3,
            "tags": [
                "noise",
                "texture",
                "2dfilter",
                "generation"
            ],
            "usePreview": 0,
            "username": "foxes",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "//\n// Panteleymonov A K 2021\n//\n\n//****************** if there are problems with the image change the hash ***********\n\n//#define hash(n) fract(mod(n*n*34.+n,289.)/289.)\n#define hash(n) fract(abs(sin(n))*1399763.5453123)\n\nvec4 hash4( vec4 n ) { return hash(n); }\nvec2 NC0=vec2(1.0,136.0);\n\nfloat nouse2d(vec2 uv)\n{\n    vec2 f = fract(uv);\n    f=f*f*(3.0-2.0*f);\n    uv = floor(uv);\n    vec4 p = vec4(dot(uv,NC0),dot(uv+vec2(1.,0.),NC0),dot(uv+vec2(0.,1.),NC0),dot(uv+vec2(1.,1.),NC0));\n    vec4 h = hash4(p);\n    h.xy =  mix(h.xy,h.zw,f.yy);\n    return mix(h.x,h.y,f.x);\n}\n\nfloat cloud(vec2 uv)\n{\n    float f = 0.0;\n    float m = 1.0;\n    float s = 0.32;\n    for (int i=0;i<20;i++) {\n        f += nouse2d(uv*m)*s;\n        m = m * 1.5;\n        s = s * 0.72;\n    }\n    f = f;\n    return clamp(f,0.,1.);\n}\n\nfloat differenceCloud(float x,float f,float s)\n{\n    return clamp(abs(f-x)*s,0.,1.);\n}\n\nfloat emboss(float x1,float x2,float f)\n{\n    return clamp((x1-x2)*f+0.5,0.,1.);\n}\n\nfloat difference(float x1,float x2)\n{\n    return abs(x1-x2);\n}\n\nvec3 difference(float x1,vec3 x2)\n{\n    return abs(vec3(x1)-x2);\n}\n\nfloat substract(float x1,float x2)\n{\n    return clamp(x1-x2,0.,1.);\n}\n\nfloat invert(float x)\n{\n    return 1.-x;\n}\n\nfloat hardLight(float x1,float x2)\n{\n    x1 = (x1*x2*2.0 - 0.5)*2.0;\n    x1 = (x1<0.0) ? -x1*x1 : x1*x1;\n    x1 = x1*0.5+0.5;\n    return clamp(x1,0.,1.);\n}\n\nfloat linearLight(float x1,float x2)\n{\n    return clamp(x1*(x2*2.0),0.,1.);\n}\n\nfloat pinLight(float x1,float x2)\n{\n    return x2<0.5 ? min(x1,x2*2.0) : max(x1,x2*2.0-1.0);\n}\n\nvec3 pinLight(vec3 x1,float x2)\n{\n    return x2<0.5 ? min(x1,vec3(x2)*2.0) : max(x1,vec3(x2)*2.0-1.0);\n}\n\nfloat exclusion(float x1,float x2)\n{\n    return clamp(x2<0.5 ? mix(x1,0.5,x2*2.0) : mix(0.5,abs(x1-x2),x2*2.-1.),0.,1.);\n}\n\nfloat divColor(float x, float d)\n{\n    float f = fract(x*d)-0.5;\n    return (floor(x*d)+f*f*f+0.5)/d;\n}\n\nvec3 colorNorm(vec3 c)\n{\n    float v = max(max(c.x,c.y),c.z);\n    return c/v;\n}\n\nvec3 color(float x,vec3 col)\n{\n    return colorNorm(col)*x;\n}\n\nvec3 screen(float x,vec3 col)\n{\n    return mix(colorNorm(col),vec3(1.),x)*x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float xsel = fragCoord.x/iResolution.x;\n    float xcol = fragCoord.y/iResolution.y*1.2-0.2;\n    vec2 uv = fragCoord/iResolution.y;\n\tif (iMouse.z>0.0) xsel=iMouse.x/iResolution.x;\n    if (iMouse.z>0.0) xcol=iMouse.y/iResolution.y*1.2-0.2;\n  \n    float zoom = 15.0;\n    // create bottom layer 1 with \"Cloud\" filter\n    float l1 = cloud(uv*zoom+100.0);\n    // used for emboss layer 1\n    float el1 = cloud(uv*zoom+100.0+vec2(0.,0.2));\n    // create layer 2 from copy layer 1 and apply \"Difference Cloud\" filter\n    float l2 = differenceCloud(l1,0.5,2.0);\n    // used for emboss layer 2\n    float el2 = differenceCloud(el1,0.5,2.0);\n    \n    float light = fract(xsel*4.0);\n    vec3 co11 = clamp((1.0-abs(vec3(xcol*2.0,xcol*2.0-1.0,xcol*2.0-2.0)))*2.0,vec3(0.,0.,0.),vec3(1.,1.,1.));\n    co11 = mix(co11,vec3(1.,1.,1.),light);\n    vec3 co12 = clamp((1.0-abs(vec3(xcol*2.0-1.0,xcol*2.0-2.0,xcol*2.0)))*2.0,vec3(0.,0.,0.),vec3(1.,1.,1.));\n    co12 = mix(vec3(1.,1.,1.),co12,light);\n    \n    // create new layer from copy layer 1, and \"Emboss\" him with default parameters\n    float v = 0.;\n    if (xsel<0.25)\n        // use \"Pin Light\" or \"Difference\" mode to embossed layer\n        v = pinLight(difference(l2,l1),emboss(el1,l1,2.5));\n    else if (xsel<0.5)\n        v = difference(difference(l2,l1),emboss(el1,l1,2.5));\n    // additional copied layer 1 and mixed with \"Difference\" mode on top\n    else if (xsel<0.75)\n        v = difference(l1,pinLight(difference(l2,l1),emboss(el1,l1,2.5)));\n    else if (xsel<1.0)\n        v = difference(l1,difference(difference(l2,l1),emboss(el1,l1,2.5)));\n\n    vec3 col = mix(vec3(v),color(v,co11),clamp(l1*6.-2.2,0.,1.));\n    col = mix(col,color(v,co12),clamp((1.0-l1)*6.-3.1,0.,1.));\n    \n    // and more\n    if (xcol<0.) {\n    if (xsel<0.125) {\n        v = linearLight(l2,emboss(l2,el2,2.0));\n        v = v+(clamp(0.5-abs(0.4-v),0.,1.));\n        col = mix(mix(vec3(0.8,0.33,0.0),vec3(0.2,0.6,0.6),v)*v,vec3(1.),v);\n    } else if (xsel<0.25) {\n        v = invert(divColor(l2,40.));\n        v = linearLight(invert(l2),emboss(invert(l2),divColor(invert(el2),4.),1.0));\n        col = vec3(screen(v*v,vec3(0.,0.34,0.9)));\n    } else if (xsel<0.375) {\n        col = pinLight(vec3(difference(l2,vec3(0.29,0.25,0.19)*1.4)),emboss(l2,el2,1.4));\n    } else if (xsel<0.5) {\n        v = linearLight(exclusion(l1,l2),emboss(exclusion(l1,l2),exclusion(el1,el2),1.5));\n        col = screen(v+l2,vec3(0.,0.34,0.9));\n    } else if (xsel<0.625) {\n        col = pinLight(screen(l1,vec3(0.1,0.4,1.0)),emboss(l1,el1,2.0));\n    } else if (xsel<0.75) {\n        col = vec3(l1);\n    } else if (xsel<0.875) {\n        col = vec3(l2);\n    }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}