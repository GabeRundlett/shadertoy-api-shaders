{
    "Shader": {
        "info": {
            "date": "1567121857",
            "description": "Another discrete Fourier transform experimentation.\nhttps://cookie.paris/",
            "flags": 32,
            "hasliked": 0,
            "id": "3ljXWK",
            "likes": 41,
            "name": "Sparkling Cookie",
            "published": 3,
            "tags": [
                "cookie"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 936
        },
        "renderpass": [
            {
                "code": "// Sparkling Cookie\n// https://cookie.paris/\n// Leon Denise (ponk) 2019.08.30\n// Licensed under hippie love conspiracy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Sparkling Cookie\n// https://cookie.paris/\n// Leon Denise (ponk) 2019.08.30\n// Licensed under hippie love conspiracy\n\n// tweak zone\nconst float count = 15.;\nfloat scale = .9;\nfloat thin = 0.002;\nfloat ditherRange = .5;\nfloat radiusVariation = .005;\nfloat variationFrequecy = 16.;\n\n// tool box\n#define TAU 6.283\n#define repeat(p,r) (mod(p,r)-r/2.)\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\n// generated with discrete Fourier transform\nvec2 cookie(float t) {\n\treturn vec2(0.08+cos(t-1.58)*0.23+cos(t*2.-1.24)*0.14+cos(t*3.-1.12)*0.09+cos(t*4.-0.76)*0.06+cos(t*5.-0.59)*0.05+cos(t*6.+0.56)*0.03+cos(t*7.-2.73)*0.03+cos(t*8.-1.26)*0.02+cos(t*9.-1.44)*0.02+cos(t*10.-2.09)*0.03+cos(t*11.-2.18)*0.01+cos(t*12.-1.91)*0.02,cos(3.14)*0.05+cos(t+0.35)*0.06+cos(t*2.+0.54)*0.09+cos(t*3.+0.44)*0.03+cos(t*4.+1.02)*0.07+cos(t*6.+0.39)*0.03+cos(t*7.-1.48)*0.02+cos(t*8.-3.06)*0.02+cos(t*9.-0.39)*0.07+cos(t*10.-0.39)*0.03+cos(t*11.-0.03)*0.04+cos(t*12.-2.08)*0.02);\n}\n\nvec2 camera2D (vec2 uv) {\n    vec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n    vec3 p = vec3(uv,0);\n    if (iMouse.z > 0.5) {\n        p.yz *= rot(mouse.y*3.1415/2.);\n        p.xz *= rot(mouse.x*3.1415/2.);\n    }\n    return p.xy/(1.+p.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    vec2 uv = .6*(fragCoord-.5*iResolution.xy)/iResolution.y+vec2(.05,.05);\n    float dither = random(uv+fract(iTime))/count*TAU*scale*ditherRange;\n    for (float index = count; index > 0.; --index) {\n   \t\tfloat time = dither + index/count*TAU*scale - iTime;\n        vec2 pos = camera2D(cookie(time));\n        float dist = max(0.,length(uv-pos)-radiusVariation*sin(time*variationFrequecy));\n        fragColor += vec4(thin/dist);\n    }\n    \n    vec4 frame = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = max(frame*(1.-iTimeDelta*2.), clamp(fragColor,0.,1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}