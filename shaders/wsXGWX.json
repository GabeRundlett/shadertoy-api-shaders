{
    "Shader": {
        "info": {
            "date": "1547611757",
            "description": "code from https://www.youtube.com/watch?v=Ff0jJyyiVyw",
            "flags": 0,
            "hasliked": 0,
            "id": "wsXGWX",
            "likes": 1,
            "name": "Ray Marching - 002",
            "published": 3,
            "tags": [
                "raymarching",
                "shader"
            ],
            "usePreview": 0,
            "username": "catafest",
            "viewed": 730
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat add_Capsule(vec3 p,vec3 a,vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot( ab, ap ) / dot( ab, ab);\n    t = clamp (t,0.,1.);\n    vec3 c = a +t*ab;\n    float d = length(p -c) - r ;\n    return d;\n\n}\n\nfloat add_Torus(vec3 p,vec2 r){\n\tfloat x = length (p.xz) -r.x;\n    return length(vec2(x, p.y)) - r.y;\n\n}\n\nfloat add_Box(vec3 p, vec3 s){\n\n\treturn length(max(abs(p)-s,0.));\n}\n\n\nfloat add_Cylinder(vec3 p,vec3 a,vec3 b, float r){\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot( ab, ap ) / dot( ab, ab);\n    //t = clamp (t,0.,1.);\n    vec3 c = a +t*ab;\n    float x = length(p -c) - r ;\n    float y = (abs(t - 0.5) - 0.5)*length(ab);\n    float e = length(max(vec2 (x,y), 0.0));\n    // fix the shape with interior smooth\n    float i = min(max(x,y), 0.0);\n    return e+i;\n}\n\nfloat GetDist(vec3 p){\n\tvec4 s = vec4(0, 1, 6, 1);\n    float sphereDist = length (p - s.xyz)-s.w;\n    float planeDist = p.y;\n    // capsule distance\n    float cd = add_Capsule (p, vec3(0,1,3), vec3(0,2,3), 0.2);\n    float td = add_Torus(p - vec3(0,0.5,4), vec2(1, 0.2));\n    float bd = add_Box(p - vec3(-2,.5,6), vec3(.5));\n    float cyld = add_Cylinder (p, vec3(1.5,0.3,3), vec3(3,0.3,5), 0.2);\n    // add capsule object \n    float d = min (cd, planeDist);\n    // add torus object \n    d = min(d, td);\n    // add box object \n    d = min(d, bd);\n    // add cylinder object\n    d = min(d, cyld);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for (int i=0; i< MAX_STEPS; i++){\n        vec3 p = ro +rd*dO;\n        float ds = GetDist(p);\n        dO += ds;\n        if (dO>MAX_DIST || ds<SURF_DIST) break;\n        }\n    return dO; \n}\n\nvec3 GetNormal(vec3 p){\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    //\n    vec3 n = d - vec3(\n       //p -vec3(.01,0,0) GLSL is that the properties can be combined in any order you want,\n       //which makes it easy to cast and mix values and is called swizzle.\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3 (0, 5, 6);\n    lightPos.xz += vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l = normalize (lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n,l),0.,1.);\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    if (d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates to 0 with a resolution of 5 \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t// Set color to black\n    vec3 col = vec3(0);\n    // position of camera 1.4\n    vec3 ro = vec3(0, 1.7, 0);\n    // position of camera uv.y - .18\n    vec3 rd = normalize(vec3 (uv.x, uv.y - .18, 1));\n\n    float d = RayMarch(ro,rd);\n    // set point light long d \n    vec3 p = ro + rd * d;\n    // dif is difuse\n    float dif = GetLight(p);\n        \n    //d/=6.;\n    //col = vec3(d);\n    col = vec3 (dif);\n    \n    // Send output to color named col to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}