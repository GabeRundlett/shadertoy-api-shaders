{
    "Shader": {
        "info": {
            "date": "1723365483",
            "description": "originals  https://www.shadertoy.com/view/4f2cRK and other ",
            "flags": 0,
            "hasliked": 0,
            "id": "XclfRH",
            "likes": 1,
            "name": "fbm colorful noise",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "color"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 108
        },
        "renderpass": [
            {
                "code": "\n\n\nuniform float time;\nuniform vec2 resolution;\n#define time iTime\n#define resolution iResolution.xy\n#define iterations 15\n\n\n#define formuparam 0.330\n\n#define volsteps 12\n#define stepsize 0.10\n\n#define zoom   2.0\n#define tile   0.40\n#define speed  .01\n\n#define brightness 0.0019\n#define darkmatter 0.40\n#define distfading 0.99\n#define saturation 1.60\nvec2 rotate( vec2 matrix, float angle ) {\n\treturn vec2( matrix.x*cos(radians(angle)), matrix.x*sin(radians(angle)) ) + vec2( matrix.y*-sin(radians(angle)), matrix.y*cos(radians(angle)) );\n}\n\nfloat T;\n\n#define pi 3.1415926\n\n// iq's hash function from https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\nfloat simplegridnoise(vec2 v)\n{\n    float s = 1. / 256.;\n    vec2 fl = floor(v), fr = fract(v);\n    float mindist = 1e9;\n    for(int y = -1; y <= 1; y++)\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 offset = vec2(x, y);\n            vec2 pos = .5 + .5 * cos(2. * pi * (T*.1 + hash(fl+offset)) + vec2(0,1.6));\n            mindist = min(mindist, length(pos+offset -fr));\n        }\n    \n    return mindist;\n}\n\nfloat blobnoise(vec2 v, float s)\n{\n    return pow(.5 + .5 * cos(pi * clamp(simplegridnoise(v)*2., 0., 1.)), s);\n}\n\nvec3 blobnoisenrm(vec2 v, float s)\n{\n    vec2 e = vec2(.01,0);\n    return normalize(\n           vec3(blobnoise(v + e.xy, s) - blobnoise(v -e.xy, s),\n                blobnoise(v + e.yx, s) - blobnoise(v -e.yx, s),\n                1.0));\n}\n\nfloat blobnoises(vec2 uv, float s)\n{\n    float h = 0.0;\n    const float n = 3.0;\n    for(float i = 0.0; i < n; i++)\n    {\n        vec2 p = vec2(0.0, 1.0 * iTime *0.0331* (i + 1.0) / n) + 1.55 * uv;\n    \th += pow(0.5 + 0.5 * cos(pi * clamp(simplegridnoise(p * (i + 1.0)) * 2.0, 0.0, 1.0)), s);\n    }\n    \n    return h / n;\n}\n\nvec3 blobnoisenrms(vec2 uv, float s)\n{\n    float d = 1.21;\n    return normalize(\n           vec3(blobnoises(uv + vec2(  d, 0.0), s) - blobnoises(uv + vec2( -d, 0.0), s),\n                blobnoises(uv + vec2(0.0,   d), s) - blobnoises(uv + vec2(0.0,  -d), s),\n                d));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=gl_FragCoord.xy/resolution.xy-.5;\n\tuv.y*=resolution.y/resolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\t\n\tfloat a2=time*speed+.5;\n\tfloat a1=5.0;\n\tmat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n\tmat2 rot2=rot1;//mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tdir.xy*=rot2;\n\tvec3 rColor = vec3(0.7, 0.1, 0.3)* ((sin(time*50.0)*0.5 + 3.14) * 0.066);\n\tvec3 gColor = vec3(0.0, 0.5, 0.5);\n\tvec3 bColor = vec3(0.7, 0.5, 0.1) * ((cos(time)+1.125) * 2.0);\n\tvec3 yColor = vec3(0.1, 0.0, 0.0);\n\n\tvec2 position = ( gl_FragCoord.xy / resolution.xy ) / 4.0;\n\tposition = gl_FragCoord.xy * 2.0 - resolution;\n\tposition /= min(resolution.x, resolution.y);\n\t T = iTime;\n\n    vec2 r = vec2(1.0, iResolution.y / iResolution.x);\n\tvec2 uv2 = fragCoord.xy / iResolution.xy;\n    vec3 n = blobnoisenrms(25.0 * uv2 * r, 1.);\n\t\n\tfloat a = sin(position.y * 2.3 - time * 0.0) / 1.0;\n\tfloat b = cos(position.y * 0.4 - time * 0.0) / 1.0;\n\tfloat c = sin(position.x * 1.5 - time * 0.0 + 3.14) / 2.0;\n\tfloat d = cos(position.y * 1.6 - time * 0.0 + 3.14) / 2.0;\n\t\n\tfloat e = 0.251 / abs(position.x + a);\n\tfloat f = 0.151 / abs(position.x + b);\n\tfloat g = 0.151 / abs(position.y + c);\n\tfloat h = 0.151 / abs(position.x + d);\n\t\n\tvec3 color = rColor * e * gColor * f + bColor * g * h * f * 0.051;\n\tvec3 from=vec3(0.,0.,0.);\n\tfrom+=vec3(.0*time,.1, 0);\n\t\t\n  vec3 col3 = 1.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec2 texCoords = uv + vec2(0.0) + vec2(iTime * 0.12, 0.34);\n    \n    texCoords += texture(iChannel1, uv).xy * 0.03 ;\n\n    \n    vec2 texCoords1 = uv + vec2(iTime * 0.12, 0.34);\n    \n  \n\n    vec2 texCoords2 = uv - vec2(iTime * 0.13, 0.26);\n    \n   \n   \n   \n   \n    \n     texCoords = uv + (texCoords1 + texCoords2) * 0.31;\n\t\n\t\tfloat time = -time * .1 + ((.25+.05*sin(time*.1))/(length(uv.xy)+.07))* 3.2;\n\t\tfloat si = sin(time);\n\t\tfloat co = cos(time);\n\t\tmat2 ma = mat2(co, si, -si, co);\n;\n\t\tfloat c3 = 0.0;\n\t\tfloat v1 = 0.0;\n\t\tfloat v2 = 0.0;\n\t\t\n\t\tfor (int i = 0; i < 70; i++)\n\t\t{\n\t\t\tfloat s = float(i) * .015;\n\t\t\tvec3 p = s * vec3(uv, 1.);\n\t\t\n\t\t\tp += vec3(.22,.3, s-1.5-sin(time*.13)*.1);\n\t\t\tfor (int i = 0; i < 15; i++)\n\t\t\t{\n\t\t\t\tp = abs(p) / dot(p,p) - 0.659;\n\t\t\t}\n\t\t\tv1 += dot(p,p)*.0015 * (1.8+sin(length(uv.xy*13.0)+.5-time*.2));\n\t\t\tv2 += dot(p,p)*.0015 * (1.5+sin(length(uv.xy*13.5)+2.2-time*.3));\n\t\t\tc3 = length(p.xz*.15) * .35;\n\t\t}\n\t\t\n\t\tfloat len = length(uv*ma);\n\t\tv1 *= smoothstep(.7, .0, len);\n\t\tv2 *= smoothstep(.6, .0, len);\n\t\t\n\t\tfloat re = clamp(c, 0.0, 1.0);\n\t\tfloat gr = clamp((v1+c)*.25, 0.0, 1.0);\n\t\tfloat bl = clamp(v2, 0.0, 1.0);\n\t\tvec3 col = vec3(re, gr, bl) + smoothstep(0.15, .0, len) * .9;\n\t//volumetric rendering\n\tfloat s=.1,fade=.05;\n\tvec3 v=vec3(.05);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*1.5;\n        \tp.xy+=texCoords*n.xy*ma ;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tp.x+=float(r*r)*0.01;\n\t\tp.y+=float(r)*0.02;\n\t\tfloat pa,a=pa=0.;\n\t\t//Creates the Particles\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa*0.2); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.1,darkmatter-a*a*.9); //dark matter\n\t\ta*=a*a*2.; // add contrast\n\t\tif (r>3) fade*=1.2-dm; // dark matter, don't render near\n\t\tv+=vec3(dm,dm*.20,0.6);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.13*col,1.);\t\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}