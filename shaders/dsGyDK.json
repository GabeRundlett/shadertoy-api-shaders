{
    "Shader": {
        "info": {
            "date": "1696602396",
            "description": "animated pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "dsGyDK",
            "likes": 0,
            "name": "animated pattern",
            "published": 3,
            "tags": [
                "animatedpattern"
            ],
            "usePreview": 0,
            "username": "punpun",
            "viewed": 119
        },
        "renderpass": [
            {
                "code": "// Author @patriciogv - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5);\n    return (1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0));\n}\n\nfloat triangle(in vec2 st, float num){\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n\n  // Number of sides of your shape\n  float N = num;\n\n  // Angle and radius from the current pixel\n  float a = atan(st.x,st.y)+PI;\n  float r = TWO_PI/float(N);\n\n  // Shaping function that modulate the distance\n  float d = cos(floor(.5+a/r)*r-a)*length(st);\n\n  return (1.0-smoothstep(.4,.41,d));\n\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\n\nvec2 tile(in vec2 st, float space){\n    return vec2(fract(st.x*space), fract(st.y*space));\n    // return vec2(fract(st.x*space), st.y);\n    // return vec2(st.x, fract(st.y*space));\n    // return vec2(st.x,st.y);\n}\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(0.0);\n\n    st = rotate2D(st, PI*.25*iTime*.2);\n    st = tile(st, 4.0);\n    st = rotate2D(st, PI*.25*iTime*.5);\n\n\n    // color = vec3(st,0.0);\n    // color = vec3(circle(st,0.5));\n    // color = vec3(circle(tile(st, 9.0),0.5));\n    // color = vec3(triangle(st));\n    // if(mod(st.x, 2.0) == 1.0) {\n    //     color = vec3(box(st, vec2(.7), .1), mod(fract(u_time)*.5, 2.), sin(u_time));\n    // }else if(st.y >= .2) {\n    //     color = vec3(triangle(st), mod(fract(u_time)*.5, 2.), sin(u_time));\n    // }\n\n    // 001\n    // color = vec3(triangle(st, sin(u_time+3.)*10.), mod(fract(u_time)*.5, 2.), sin(u_time));\n\n    // 002\n    // if(st.x <= .5 && st.y <= .5) color = vec3(triangle(st, sin(u_time+3.)*10.), mod(fract(u_time)*.5, 2.), sin(u_time));\n    // if(st.x > .5 && st.y > .5) color = vec3(triangle(st, sin(u_time+3.)*10.), mod(fract(u_time)*.5, 2.), sin(u_time));\n\n    // 003\n    if(st.x > .5 && st.y > .5) color = vec3(box(st, vec2(.7), .1), mod(fract(iTime)*.5, 2.), sin(iTime));\n    if(st.x <= .5 && st.y <= .5) color = vec3(box(st, vec2(.7), .1), mod(fract(iTime)*.5, 2.), sin(iTime));\n\n\tfragColor = vec4(color.x, color.y, abs(sin(iTime)), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}