{
    "Shader": {
        "info": {
            "date": "1633666257",
            "description": "A ray/sphere intersection function.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdtXRf",
            "likes": 5,
            "name": "ray/sphere intersection",
            "published": 3,
            "tags": [
                "ray",
                "sphere",
                "intersection"
            ],
            "usePreview": 0,
            "username": "aeva",
            "viewed": 810
        },
        "renderpass": [
            {
                "code": "//\n// Written in 2021 by Aeva Palecek\n//\n// To the extent possible under law, the author has dedicated all copyright\n// and related and neighboring rights to this software to the public domain\n// worldwide.  This software is distributed without any warranty.\n//\n// See http://creativecommons.org/publicdomain/zero/1.0/ for more information.\n//\n\n//\n// The TraceSphere function below was produced by substituting the parametric\n// ray equation into the implicit sphere equation on an ancient calculator,\n// and then solving for t like so:\n//\n//         solve((ox+t*dx)^2+(oy+t*dy)^2+(oz+t*dz)^2-r^2=0, t)\n//\n// ...and then waiting several minutes for it to finish thinking before\n// translating the result into GLSL and cleaning it up a little.\n//\n\n\n#define DOT2(V) dot(V, V)\n\n\n// The Origin and Dir parameters describe the ray.\n// The sphere is assumed to be centered at (0, 0, 0).\nfloat TraceSphere(vec3 Origin, vec3 Dir, float Radius)\n{\n    float VoV = DOT2(Dir);\n    \n    float Acc = VoV * Radius * Radius;\n    Acc += 2.0 * Origin.x * dot(Origin.yz, Dir.yz) * Dir.x;\n    Acc += 2.0 * Origin.y * Origin.z * Dir.y * Dir.z;\n    Acc -= dot(Origin * Origin, vec3(DOT2(Dir.yz), DOT2(Dir.xz), DOT2(Dir.xy)));\n    \n    if (Acc < 0.0)\n    {\n        return -1.0;\n    }\n    \n    Acc = sqrt(Acc);\n    \n    float Dist1 = (Acc - dot(Origin, Dir)) / VoV;\n    float Dist2 = -(Acc + dot(Origin, Dir)) / VoV;\n\n    if (Dist1 >= 0.0 && Dist2 >= 0.0)\n    {\n        return min(Dist1, Dist2);\n    }\n    else\n    {\n        return max(Dist1, Dist2);\n    }\n}\n\n\nvec3 GetRayDir(vec2 FragCoord, vec2 Resolution, float FOV)\n{\n    float Aspect = Resolution.y / Resolution.x;\n    vec2 NDC = FragCoord / Resolution.xy * 2.0 - 1.0;\n    vec2 Angle = NDC * vec2(FOV, FOV * Aspect) * 0.5;\n    vec3 RayDir = vec3(sin(radians(Angle)), 0.0).xzy;\n    RayDir.y = sqrt(1.0 - (RayDir.x * RayDir.x) - (RayDir.z * RayDir.z));\n    return RayDir;\n}\n\n\nvoid mainImage( out vec4 FragColor, in vec2 FragCoord )\n{\n    vec3 Origin = vec3(0.0, -10.0, 0.0);\n    vec3 Dir = GetRayDir(FragCoord.xy, iResolution.xy, 45.0);\n    float T = TraceSphere(Origin, Dir, 2.0);\n    if (T >= 0.0)\n    {\n        vec3 Hit = Dir * T + Origin;\n        FragColor = vec4(normalize(Hit) * 0.5 + 0.5, 1.0);\n    }\n    else\n    {\n        FragColor = vec4(vec3(0.6), 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}