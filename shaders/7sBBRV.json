{
    "Shader": {
        "info": {
            "date": "1646648814",
            "description": "Just a fun shader to raise our spirits in these difficult times.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sBBRV",
            "likes": 18,
            "name": "Glory to Ukraine!",
            "published": 3,
            "tags": [
                "flag",
                "standwithukraine"
            ],
            "usePreview": 1,
            "username": "quizcanners",
            "viewed": 1545
        },
        "renderpass": [
            {
                "code": "float hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord/iResolution.xy;\n\n    uv = (uv-0.5) *(1.2 - uv.x*0.05) + vec2(0.5, 0.5);\n\n   vec3 windSeed =  vec3(uv.x * 5.,uv.y * 7., iTime);\n   \n   float BORDER = 0.1;\n   \n   float pole = smoothstep(BORDER, .4, uv.x);\n   \n   pole = 1. - pow(1.-pole,6.);\n   \n     float tension = \n     pow(\n     abs(uv.y-0.5) * 0.3\n     ,2.) \n     * (1. - uv.x)// * ( uv.y) \n   * 50.\n   \n  ;\n   \n   vec3 gyrPos = vec3(uv.x * (5. + uv.y*5. + tension * 15.) - iTime*5., uv.y*4., iTime * 0.2);\n   \n   float windForce = 0.3 + abs(cos(iTime * 0.2 + pole)  * cos(iTime * 0.345));\n   \n   float flagUp = 1.-windForce;\n   \n   uv.x -= pole * flagUp * 0.025; // fabric stretching -> flag length\n   \n   \n   float gyr = smoothstep(1.,0., \n   abs(dot(sin(gyrPos), cos(gyrPos.zxy)))\n   )\n   ;\n   \n  vec2 shadowUv = (uv-0.5)*1.3 + vec2(-0.15, 0.15);\n  \n   float wind = \n        sin(iTime * (2.45) \n        -  tension * 3. // curve of the vawe\n        + gyr * smoothstep(0.,1.,1.2-tension*2.) //* 0.5 \n        - uv.x * (3. + tension * 10. ) \n       ) * 0.6\n        *  windForce \n         \n        // Wind phases \n       + cos(iTime * 0.23 - uv.y * 3. + uv.x * 3.) * 0.5 // perspective waving\n       \n       ;\n       \n      wind *= pole;\n       \n   uv += wind*0.03 \n   * max(0., 1.5-tension)\n   ;\n   \n \n   \n   float w = length(vec2(dFdx(uv.x), dFdy(uv.y)));\n   float isFlag = smoothstep(BORDER,BORDER + dFdx(uv.x)*2., 0.5- abs(uv.x-0.5)) * smoothstep(BORDER,BORDER + dFdy(uv.y) * 2., 0.5- abs(uv.y-0.5));\n   \n  \n\n   float shadowThickness = 0.3; // 0.3 * (1. + wind*0.15);\n\n   float shadow = \n   smoothstep(BORDER - shadowThickness, BORDER, 0.5 - abs(shadowUv.x)) \n   * smoothstep(BORDER - shadowThickness, BORDER, 0.5 - abs(shadowUv.y)) ;\n\n\n float isBlue = smoothstep(0.5,0.5 + w*2., uv.y);\n   vec3 col = mix(vec3(1., 0.84, 0.) , vec3(0.,0.34,0.71), isBlue); vec3(isBlue); // Yelow Blue\n\n#ifdef AT_WAR\n    vec3 UPAcolor = mix( vec3(0.15,0.15,0.15), vec3(1.,0.1,0.1) ,isBlue);\n    float upaEdge = cos(iTime);// 0.2;\n    float isRed = smoothstep(upaEdge,upaEdge - w*2., 1.-uv.x);\n   col = mix(col*col, UPAcolor*UPAcolor , isRed);\n   col = sqrt(col);\n#endif\n\n   col.rgb *= (0.8 + wind * 0.3 * pole); // shadow\n   \n   vec3 tex = texture(iChannel0, uv*23.).rgb;\n   \n   col.rgb *= 0.9 + tex * 0.2; // fabric\n   \n  \n   col.rgb += 0.05 * pow(max(0., wind),7. + tex.r * 10.) * vec3(0.3, 0.3, 0.6);  // blick\n   \n   float bg = 0.3;\n   \n   col.rgb = mix(vec3(bg) * (2. - shadow), col.rgb, isFlag);\n   \n     \n   float noise =  hash13(vec3(fragCoord * 15., iTime));\n   \n   col.rgb += vec3(noise) * 0.03; // hide color range limit on shadows\n   \n   col.rgb += col.gbr*col.brg * 0.3; // Bloom\n   \n   fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}