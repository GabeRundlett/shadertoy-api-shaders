{
    "Shader": {
        "info": {
            "date": "1712663872",
            "description": "HexShadows by rcargou\nHeavily inspired by shane's amazing work : https://www.shadertoy.com/view/MsVfz1\nThere is a loot of idea I wanted to add to this shaders, \nbut I want to keep it about real time, so I am stopping there",
            "flags": 0,
            "hasliked": 0,
            "id": "McKGWR",
            "likes": 20,
            "name": "HexShadows",
            "published": 3,
            "tags": [
                "sdf",
                "texture",
                "lighting",
                "hexagons"
            ],
            "usePreview": 0,
            "username": "rcargou",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// HexShadows by rcargou\n// Heavily inspired by shane's amazing work : https://www.shadertoy.com/view/MsVfz1\n// There is a loot of idea I wanted to add to this shaders, \n// but I want to keep it about real time, so I am stopping there\nconst vec2 s = vec2(.866025, 1);\n#define ZERO (min(iFrame,0))\n\n\nfloat sdHexagon(vec2 p, float h, vec3 b, float id) {\n    //h +=  texture(iChannel2, p.xy / 12.).r / 5. * id;\n    p = abs(p);\n    p = vec2(p.x*.866025 + p.y*.5, p.y);\n    float d1 = length(max(abs( vec3( p.x, h, p.y )) - b + .015, 0.)) - .0025;\n    b.xz/=1.5;\n    h -=.01;\n    \n    //b.y += sin(4. * iTime + id * 12.) * id / 3.;\n    float d2 = length(max(abs( vec3( p.x, h, p.y )) - b + .015, 0.)) - .0025;\n    b.xz/=1.5;\n    h -=.01;\n   // b.y += 1.;\n   \n    float d3 = length(max(abs( vec3( p.x, h, p.y )) - b + .015, 0.)) - .0025;\n    //return d1;\n    d1 =  min(d1, d2);\n    return d1;\n    return min(d1, d3);\n}\n\nfloat sdHexagonS(vec2 p, float h, vec3 b, float id) {\n    //h +=  texture(iChannel2, p.xy / 12.).r / 5. * id;\n    p = abs(p);\n    p = vec2(p.x*.866025 + p.y*.5, p.y);\n    float d1 = length(max(abs( vec3( p.x, h, p.y )) - b + .015, 0.)) - .0025;\n    b.xz/=1.5;\n    h -=.1;\n    return d1;\n}\n\n\nvec4 getCellData(vec2 cellID, float y,  float fall) {\n    float h;\n    \n    h = noise3D( vec3(cellID.xy + vec2(iTime / 2., 0.), 0.*(iTime / 1.)) ) * .8;\n    float k = 0.;\n    if (length(cellID/12.) > .3) {\n     ;//   k = 1e10;\n    }\n\n    return vec4(-(h*h), hash21(cellID), cellID.x, k);\n}\n\nvec4 mapC(vec3 p) {\n\n    float s = .1;\n    float r = 1.5;\n    float sdr = .2;\n    vec3 b = vec3(sdr, .1, sdr);\n    vec4 ret;\n//    ret.y = p.z/12.;\n    p.y -= 1.;\n    p.xz *= rotate2d(-.7);\n    float id = floor(p.x / r);\n  \n    p.x = mod(p.x, r) - r/2.;\n    float r2 = 1.;\n      vec3 p2 = p;\n    p2.z += id / 5.;\n    p2.z = mod(p2.z, r2) - r2 / 2.;\n   \n    float d2 = sdHexagonS(p2.xy, p2.z, b, 0.);\n    p.xy += sin(p.z * 150.) / 301.;\n    ret.x =  min(d2, length(p.xy) - s);\n    ret.w = 1.;\n    if (d2 < length(p.xy) - s) {\n        ret.w = 3.;\n    }\n    //ret.x = min(ret.x, sdHexagonS(p.xz, p.y, b + vec3(-.1, 5., -.1), 0. ));\n    return ret;\n}\n\nvec4 mapHexagons(vec3 p, float fall) {\n   // p.z=iTime;\n    float r = .25;\n    vec3 b = vec3(r, .5, r);\n    p.xz*=2.;\n    //p.y -= 2.5;\n    vec4 hC = floor(vec4(p.xz, p.xz - vec2(0, .5))/s.xyxy) + vec4(0, 0, 0, .5);\n    vec4 hC2 = floor(vec4(p.xz - vec2(.5, .25), p.xz - vec2(.5, .75))/s.xyxy) + vec4(.5, .25, .5, .75);\n\n    // Centering the coordinates with the hexagon centers above.\n    vec4 h = vec4(p.xz - (hC.xy + .5)*s, p.xz - (hC.zw + .5)*s);\n    vec4 h2 = vec4(p.xz - (hC2.xy + .5)*s, p.xz - (hC2.zw + .5)*s);\n    vec4 cellData1 = getCellData(hC.xy, p.y, fall);\n    vec4 cellData2 = getCellData(hC.zw, p.y, fall);\n    vec4 cellData3 = getCellData(hC2.xy, p.y, fall);\n    vec4 cellData4 = getCellData(hC2.zw, p.y, fall);\n    \n    vec4 dist = vec4(cellData1.w+sdHexagon(h.xy, p.y + cellData1.x, b, hash21(hC.xy) ), cellData2.w+sdHexagon(h.zw, p.y + cellData2.x, b, hash21(hC.zw) ),\n    cellData3.w+sdHexagon(h2.xy, p.y + cellData3.x, b, hash21(hC2.xy) ),cellData4.w+sdHexagon(h2.zw, p.y + cellData4.x, b, hash21(hC2.zw) ));\n\n    //vec4 dd = vec4(cellData1.w,cellData2.w,cellData3.w,cellData4.w);\n    //dist = max(dd, dist);\n    h = dist.x<dist.y ? vec4(h.xy, hC.xy) : vec4(h.zw, hC.zw);\n    h2 = dist.z<dist.w ? vec4(h2.xy, hC2.xy) : vec4(h2.zw, hC2.zw);\n\n    vec2 oH = dist.x<dist.y ? vec2(dist.x, 0.) : vec2(dist.y, 0.);\n    vec2 oH2 = dist.z<dist.w ? vec2(dist.z, 0.) : vec2(dist.w, 0.);\n    vec3 dataRet;\n    vec4 DistdataRet;\n    \n    DistdataRet = dist.x<dist.y ? vec4(dist.x, cellData1.yzw) : vec4(dist.y, cellData2.yzw);\n    DistdataRet = dist.z<DistdataRet.x ? vec4(dist.z, cellData3.yzw) : DistdataRet;\n    DistdataRet = dist.w < DistdataRet.x ? vec4(dist.w, cellData4.yzw) : DistdataRet;\n    dataRet = DistdataRet.yzw;\n    //return oH<oH2 ? vec4(h.xy, hC.xy) : vec4(h2.xy, hC2.xy);\n    //return oH.x<oH2.x ? vec4(oH,  h.zw) : vec4(oH2, h2.zw);\n\n    vec4 ret =  vec4(min ( min(dist.x, dist.z), min(dist.w, dist.y)) );\n    ret.yzw = dataRet;\n    return ret;\n}\n\nvec4 mapL(vec3 p) {\n//\n   // p.xz *= rotate2d(p.z / 29.);\n    float r = 3.;\n    \n    p.z+=cos(p.x / 12.) * +12.;\n    \n    p.x=abs(p.x);\n    p.x+= iTime * -6.;\n  //  p.x = mod(p.x, r) -r/2.;\n    return mapHexagons(p.xzy, 0.);\n}\nvec4 map( in vec3 pos )\n{\n    pos.xy*=rotate2d(pos.z / 12.);\n    vec4 res = vec4(1e10, 0.0, 0., 0. );\n    vec3 pf = pos;\n    //pf.y = -abs(pf.y);\n    vec4 r2 = mapHexagons(pf + vec3(.0, +2., .0), 0.);\n    if (r2.x < res.x) {\n        res = r2;\n    }\n    \n    float hole= length( pos - vec3( .4, 0., 5. )) - 2.5;\n    vec3 pw = pos;\n    pw.z = -pw.z;\n    pw.yz *=rotate2d(.5);\n    vec4 r3 = mapHexagons(pw.xzy - vec3(0., -2, .0), 0.);\n    //r3.x = min(r3.x, hole);\n    //r3.x = max(r3.x, - mapC(pos / 2.).x);\n    if (r3.x < res.x) {\n       res = r3;\n    }\n    vec3 ps = pos;\n    ps.x = -abs(ps.x);\n     ps.xy *= rotate2d(-.9);\n    vec4 r4 = mapHexagons(ps.zxy - vec3(0., -3., .0), 0.);\n    if (r4.x < res.x) {\n        res = r4;\n    } \n    /*\n    vec4 r4 = mapL(pos + vec3(0., 0., -42. + -iTime * 4.));\n    \n    if (r4.x < res.x)\n           res = r4;\n           */\n    vec4 r5 = mapC(pos);\n    if (r5.x < res.x)\n        res = r5;\n    vec4 r6 = mapC(pos + vec3(0.5, -1., 0.));\n    if (r6.x < res.x)\n        res = r6;\n        \n    return res;\n}\n\nconst float maxHei = 0.8;\n\nvec4 castRay( in vec3 ro, in vec3 rd )\n{\n    vec4 res = vec4(-1.0,-1.0, 0., 0.);\n    vec4 outlineres = vec4(-1.0,-1.0, 0., 0.);\n    float tmin = 0.0;\n    float tmax = 50.0;\n\n    // raymarch primitives   \n    {\n    \n        float t = tmin;\n        for( int i=0; i<100 && t<tmax; i++ )\n        {\n            vec4 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                 res = vec4(t,h.yzw); \n                 break;\n            }\n            t += h.x;\n        }\n    }\n\n  \n    return res;\n}\n\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n  \n    n = max((abs(n) - .2)*7., .001); // n = max(abs(n), .001), etc.\n    n /= (n.x + n.y + n.z );  \n    \n\tvec3 tx = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    \n    return tx*tx;\n}\nvec3 texBump( sampler2D tx, in vec3 p, in vec3 n, float bf){\n   \n    const vec2 e = vec2(.001, 0);\n    \n    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n    mat3 m = mat3(tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    \n    vec3 g = vec3(.299, .587, .114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(.299, .587, .114)))/e.x; \n    \n    // Adjusting the tangent vector so that it's perpendicular to the normal -- Thanks to\n    // EvilRyu for reminding me why we perform this step. It's been a while, but I vaguely\n    // recall that it's some kind of orthogonal space fix using the Gram-Schmidt process. \n    // However, all you need to know is that it works. :)\n    g -= n*dot(n, g);\n                      \n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n\t\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (maxHei-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n    \n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n \n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nvec3 bumpMap(vec3 n, vec3 tex) {\n       return normalize( n );\n}\n\nfloat calcOutline(vec3 pos, vec3 nor) {\n    vec4 cellData = map(pos);\n    if ( mod( cellData.z, 2.) == 0.)\n        return 0.;\n    return 1.;\n}\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(.0f);\n    vec4 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    vec3 p = ro + rd * res.x;\n    \n\n    vec3 n = calcNormal(p);\n    vec3 tex = tex3D(iChannel0, p * 2.,n).xyz;\n    n = texBump(iChannel0, p * 2., n , .05);\n\n//    n = n + normalize( ( tex3D(iChannel0, p * 1112., n) - .5) * 1.);\n    //vec4 ref = castRay(p, reflect(normalize(p-ro) , n) );\n    vec3 distCol = pal( res.x / 12., vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    vec3 idcol = pal( res.y /4. + 62.3 / 4., vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    vec3 posxcol = pal( (p.x /10. + iTime / 2.), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    vec3 posycol = pal( (p.y /10. + iTime / 2.), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    \n    float lt = iTime / 2.;\n    \n    vec3 lightPos = fhash13(floor( lt  )) *vec3(3.,3., 1.5);\n    vec3 plightPos = fhash13(floor( lt  - 1.)) *vec3(3.,3., 1.5);\n    lightPos = mix(plightPos, lightPos, fract(lt) );\n    vec3 lightCol = 2.*pal( hash11(floor(lt)), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    vec3 plightCol = 2.*pal( hash11(floor(lt - 1.)), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    lightCol = mix(plightCol, lightCol, fract(lt) );\n    float spec = max(0., dot(normalize(p-lightPos), reflect(normalize(ro - p), n )));\n    spec = pow(spec, 5.);\n    //lightPos = vec3( .4, 0., 2. );\n    vec3 albedo = posxcol*posycol + idcol + distCol;//distCol  + idcol + posxcol * posycol;\n    if (res.w == 3.) {\n        albedo += 1.8*vec3(.7, .3, .1);\n    }\n    float s = calcSoftshadow(p, normalize(lightPos - p), 0.01, 20. );\n    float ao = calcAO(p, n);\n    float ndotl = max(0.1, dot(n, normalize(lightPos - p)) );\n    albedo = albedo * tex;\n    if (res.x > .0f) {\n     \tcol =  albedo* ao * 0.01 + s*albedo*spec+ idcol.xxx*albedo * (ndotl) * lightCol * s;// *(.2 +  calcAO(p,n));\n    }else {\n       vec3 c = texture(iChannel1, rd.xy /1.+ vec2(iTime / -9., 0.)).xyz;\n       col = pow(c.rrr, vec3( 3. ) );\n    }\n    \n   \treturn vec3(col);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = vec2(0);//iMouse.xy/iResolution.xy;\n\tfloat time = .0f; //iTime;\n\n    // camera\t\n    vec3 ro = vec3(.0f, .0f, -4.0f);//vec3( 4.6*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 4.6*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3( 0.0, -0.4, 0.0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n   \n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,2.) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n    // gamma\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvec3 hash13(float p) {\n    float d = dot(        vec3( p*231.4213,\n        p*76.123,\n        p*998.872 )\n, vec3(12.23, 321.2, 321.98));\n\n\nreturn fract(sin(vec3(\n            d/3.312,\n            d/7.321,\n            d/9.321\n        )\n    ) );\n}\n\n// More concise, self contained version of IQ's original 3D noise function.\nfloat noise3D(in vec3 p){\n    \n    // Just some random figures, analogous to stride. You can change this, if you want.\n\tconst vec3 s = vec3(113, 157, 1);\n\t\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    \n    // Setting up the stride vector for randomization and interpolation, kind of. \n    // All kinds of shortcuts are taken here. Refer to IQ's original formula.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    \n\tp -= ip; // Cell's fractional component.\n\t\n    // A bit of cubic smoothing, to give the noise that rounded look.\n    p = p*p*(3. - 2.*p);\n    \n    // Standard 3D noise stuff. Retrieving 8 random scalar values for each cube corner,\n    // then interpolating along X. There are countless ways to randomize, but this is\n    // the way most are familar with: fract(sin(x)*largeNumber).\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n\t\n    // Interpolating along Y.\n    h.xy = mix(h.xz, h.yw, p.y);\n    \n    // Interpolating along Z, and returning the 3D noise value.\n    float n = mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n    return n;//abs(n - .5)*2.;\n}\n\nvec3 hash23(vec2 p) {\n    return fract(sin(vec3(p.x * 123.2, p.y * 1323.31, p.x*p.y * 211.99)) );\n}\n\nfloat hash21(vec2 p){\n   \n    float n = dot(p, vec2(7.163, 157.247)); \n    return fract(sin(n)*43758.5453);\n}\n\nfloat hash11(float p) {\n    return hash21(vec2(p));\n}\n\nvec3 fhash13(float p) {\n    return hash23(vec2(p));\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n    \n}\n\nfloat sdRoundBox( in vec3 p, in vec3 b, in float r ) \n{\n    vec3 q = abs(p) - b;\n    return min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0)) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat dot2(in vec3 v ) {return dot(v,v);}\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = 1.73205;//sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n#if 0\n// bound, not exact\nfloat sdOctahedron(vec3 p, float s ) \n{\n    p = abs(p);\n    return (p.x + p.y + p.z - s)*0.57735027;\n}\n#else\n// exacy distance\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    \n    float m = p.x + p.y + p.z - s;\n    \n\tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    \n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n#endif\n\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}