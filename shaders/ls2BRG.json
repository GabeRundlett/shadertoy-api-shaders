{
    "Shader": {
        "info": {
            "date": "1500983979",
            "description": "Equilibrium 4k intro\n",
            "flags": 96,
            "hasliked": 0,
            "id": "ls2BRG",
            "likes": 63,
            "name": "Alcatraz - Equilibrium",
            "published": 3,
            "tags": [
                "noise",
                "intro",
                "4k",
                "refraction",
                "demoscene",
                "fog",
                "spheretracing",
                "glow",
                "feedback",
                "colorsplit"
            ],
            "usePreview": 1,
            "username": "Virgill",
            "viewed": 2664
        },
        "renderpass": [
            {
                "code": "// **************************************************************************\n// Alcatraz - Equilibrium - 4K intro \n// by Jochen \"Virgill\" Feldkötter (jochen.feldkoetter{a}osnanet.de)\n//\n// 4kb executable: \thttp://www.pouet.net/prod.php?which=71136\n// Youtube: \t\thttps://www.youtube.com/watch?v=T6ulp8b8eHw\n// Soundtrack:\t\thttps://soundcloud.com/virgill/virgill-4klang-equilibrium\n// **************************************************************************\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy ;\n    vec3 tex= texture(iChannel0,uv).xyz;\n\tfragColor = vec4(tex,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 11534,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/virgill-4klang-equilibrium"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// **************************************************************************\n// Alcatraz - Equilibrium - 4K intro \n// by Jochen \"Virgill\" Feldkötter (jochen.feldkoetter{a}outlook.de)\n//\n// 4kb executable: \thttp://www.pouet.net/prod.php?which=71136\n// Youtube: \t\thttps://www.youtube.com/watch?v=T6ulp8b8eHw\n// Soundtrack:\t\thttps://soundcloud.com/virgill/virgill-4klang-equilibrium\n// **************************************************************************\n\n\nint scene_idx =0;\t\t// scene  0      1     2     3       4     5        6     7      8     9         10    11   12   13      14\nfloat scenes_x[15] = float[15] (-0.35,  5.9, -3.2, -1.0 ,  8.0,   0.0,    -1.2, -0.3,  -1.3,  -0.4,     -4.2,  0.0, 1.8, 0.0,     2. );\nfloat scenes_y[15] = float[15] (-0.61,  0.7, -3.0,  0.1,   2.6,   4.5,    -0.5, -3.0,  -0.5,   0.1,      2.5,  3.0, 1.0, 3.0,    -3. );\nfloat duration = 15.; \nfloat time=0.;\n\n// cubemap (IQ)\nvec4 boxmap(sampler2D sam,vec3 p,vec3 n)\n{\n    vec3 m = pow(abs(n), vec3(32.) );\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn (x*m.x + y*m.y + z*m.z)/(m.x+m.y+m.z);\n}\n\n// noise\nfloat rnd(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.98,78.23))) * 43758.54);\n}\n\n// signed box\nfloat sdBox(vec3 p,vec3 b)\n{\n  vec3 d = abs(p)-b;\n  return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\n// rotation\nvoid pR(inout vec2 p,float a) \n{\n\tp = cos(a)*p+sin(a)*vec2(p.y,-p.x);\n}\n\n// 3D noise function (shane)\nfloat noise(vec3 p)\n{\n\tvec3 ip = floor(p);\n    p -= ip; \n    vec3 s = vec3(7,157,113);\n    vec4 h = vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p = p*p*(3.-2.*p); \n    h = mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy = mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nfloat map(vec3 p)\n{\t\n\tif (scene_idx>9&&scene_idx<14) \n    {\n\t\tfloat a = sdBox(p,vec3(1.2,1.5,2.))-0.1;\n    \tpR(p.yz,0.2*time);\n    \treturn max(a,-sdBox(p,vec3(0.9,0.5,.1))+0.04);\n    }\n    float displace = 0.001*noise(15.*p+time); \n    if (scene_idx == 8 || scene_idx == 9) displace = 0.005*noise(10.*p+time)+0.005*sin(10.*p.x+3.*time)+0.002*sin(14.*p.y+4.*time); //!!!!!!!!!!!!!!!\n    if (scene_idx < 4 || (scene_idx > 5 && scene_idx < 10)) return sdBox(p,vec3(1.,1.,1.))-0.4+displace; // box ///////////// vec3 1.1.1\n    return length(p)-2.0+0.5*noise(1.5*p-0.02*time);     \n}\n\n// normal calculation\nvec3 calcNormal(vec3 pos)\n{\n    float eps = 0.0001;\n\tfloat d = map(pos);\n\treturn normalize(vec3(map(pos+vec3(eps,0,0))-d,map(pos+vec3(0,eps,0))-d,map(pos+vec3(0,0,eps))-d));\n}\n\n\n// sphere tracing inside\nfloat castRayx(vec3 ro,vec3 rd) \n{\n    float precis = .0001;\n    float h = precis*2.;\n    float t = 0.;\n\tfor(int i=0;i<100;i++) \n\t{\n        if(abs(h)<precis||t>12.)break;\n\t\th = -map(ro+rd*t); \n        t += h;\n\t}\n    return t;\n}\n\n// refraction\nfloat refr(vec3 pos,vec3 lig,vec3 dir,vec3 nor,float angle,out float t2, out vec3 nor2)\n{\n    float h = 0.;\n    t2 = 2.;\n\tvec3 dir2 = refract(dir,nor,angle);  \n \tfor(int i=0;i<50;i++) \n\t{\n\t\tif(abs(h)>3.) break;\n\t\th = map(pos+dir2*t2);\n\t\tt2 -= h;\n\t}\n    nor2 = calcNormal(pos+dir2*t2);\n    return(.5*clamp(dot(-lig,nor2),0.,1.)+pow(max(dot(reflect(dir2,nor2),lig),0.),8.));\n}\n\n// softshadow \nfloat softshadow(vec3 ro,vec3 rd) \n{\n    float sh = 1.;\n    float t = .02;\n    float h = .0;\n    for(int i=0;i<12;i++)  \n\t{\n        if(t>20.)continue;\n        h = map(ro+rd*t);\n        sh = min(sh,4.*h/t);\n        t += h;\n    }\n    return sh;\n}\n\n// *********************************************************************************************************\n\n// main function\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{    \n \n// time handling    \n\ttime=iTime*1.;\n\tif (iTime>150.&&iTime<=165.) time=(iTime-150.)*4.+150.;\n\tif (iTime>165.) time=iTime+60.;\n// scene handling   \n    scene_idx = int(floor(time/duration));\n    vec2 scene=vec2(scenes_x[scene_idx],scenes_y[scene_idx]); \n    \n// camera    \n    vec3 dir = normalize(vec3(2.*gl_FragCoord.xy -iResolution.xy, iResolution.y)),org = vec3(0,0,1.);  \n    if (scene_idx==10||scene_idx==12||scene_idx>=14) dir+=0.01*rnd(vec2(time,time)); //stutter\n\n    \n// try this :P\n   //scene = iMouse.yx*0.02;\n\n    pR(dir.zy,scene.x+.8*sin(.02*time));\n    pR(dir.xz,scene.y+.8*cos(.05*time-1.));\n    \n// standard sphere tracing inside an object\n    vec3 color,color2 =  vec3(0.);\n    float t = castRayx(org,dir);\n\tvec3 pos = org+dir*t;\n\tvec3 nor = calcNormal(pos);\n\n// lighting:\n    vec3 lig = normalize(vec3(-.2,-6.,.5));\n\n// scene depth    \n    float depth = clamp((1.-0.09*t),0.,1.);\n     \n    vec3 pos2,nor2 = vec3(0.);\n    \tcolor2 = vec3(max(dot(lig,nor),0.)  +  pow(max(dot(reflect(dir,nor),lig),0.),16.))*clamp(softshadow(pos,lig),0.,1.);\n    \tfloat t2;\n\t\tcolor2.b += refr(pos,lig,dir,nor,0.92, t2, nor2)*depth;\n    \tcolor2.g += refr(pos,lig,dir,nor,0.90, t2, nor2)*depth;\n    \tcolor2.r += refr(pos,lig,dir,nor,0.88, t2, nor2)*depth;\n  \t\tcolor2 -= clamp(.1*t2,0.,1.);\t\t\n\t    \n// texture\n        color2 += 0.7*boxmap(iChannel0,0.25*pos+0.5,nor).xyz; \n        color2 *= depth; \n  \n// glow intensity    \n    float tmp = 0., T = 1.;\n    float intensity = 0.1*-sin(.5*time)-0.05; \n\tfor(int i=0; i<32; i++)\n\t{\n        float nebula = noise(org);\n        float density = intensity-map(org+.5*nor2)*nebula;\n\t\tif(density>0.)\n\t\t{\n\t\t\ttmp = density / 128.;\n            T *= 1. -tmp * 100.;\n\t\t}\n\t\torg += dir*0.078;\n    }    \n\tvec3 basecol = vec3(1.,.35,1./16.);\t\n  \n    T = clamp(T,0.,1.5); \n    color += basecol* exp(4.*(0.5-T) - 0.8);\n    color -= vec3(1.1,.015,.06);\n  \n\n    vec3 object = vec3(0.1*color+0.8*color2)*1.3;    \n    \n    vec2 uv = 0.5-fragCoord.xy/iResolution.xy ; \n\n    // feedbak noise  \n    uv*=0.996;\n  \tuv=0.5-uv; \n   \tuv.x-=0.005*noise(uv.yxx*32.-time)-0.0025;\n   \tuv.y+=0.005*noise(uv.yxx*32.+time)-0.0025; \n  \n    vec3 bufa= texture(iChannel0,uv).xyz;\n\n    float saw = mod(time/duration,1.);\n    float powsaw = pow(saw,32.); \t\t\t\t\t\n \tfloat fade0 =  clamp(mod(1.*time,1.*duration),0.,1.); \t// fade in\n    float fade1 =  exp(32.* -powsaw)*fade0; \t\t\t\t// fade out      \n    float parabola = 0.75;\n    if (scene_idx == 1 || (scene_idx >= 4 && scene_idx<=7) || scene_idx>=9) parabola = 0.8-pow(4.*saw*(1.-saw),2.)*0.6;\n    if (scene_idx >13)  parabola=clamp(saw+0.3,0.,0.99);\n       \n    \n // noise   \n\tobject += 0.25*(0.5-rnd(uv.xy*time))*parabola;\t\t\t//noise  \n    if (scene_idx>3) object -= 0.04*rnd(vec2(time,time));   //flutter    \n    \n    if (iTime>180.) {object = vec3(0); bufa=vec3(0);}\n\n    fragColor = clamp(vec4(mix(object,bufa,parabola)*fade1,0.),0.,1.0);   \n\n \n    \n    \n\n}\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}