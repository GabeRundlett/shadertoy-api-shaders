{
    "Shader": {
        "info": {
            "date": "1509688920",
            "description": "a sunset",
            "flags": 0,
            "hasliked": 0,
            "id": "Xt2yDw",
            "likes": 2,
            "name": "Z3 10/24/17  SunSetter",
            "published": 3,
            "tags": [
                "graprog"
            ],
            "usePreview": 0,
            "username": "L1tang",
            "viewed": 120
        },
        "renderpass": [
            {
                "code": "vec3 redColor = vec3(1,.5,0);\nvec3 blueColor = vec3(0,0,1);\n\nvec3 box(vec2 uv, vec2 pos, vec2 dimension, vec3 fill, \n         vec3 bColor, vec2 bThicc, bool bSmooth, bool borderOnly)\n{\n    if (borderOnly == true)\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, vec3(0.), box);\n        return finalBox;\n    }\n    \n    else\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, fill, box);\n        return finalBox;\n    }\n}\n\n\nvec3 circle(float radius, float ratio, float edge, vec2 uv, vec3 color)\n{\n    uv.x *= ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, -sin(iTime));\n    \n    float dist = distance(shapePos, uv);\n    \n    /*eclipse replace if the second value is a constant it will fill the circle and the background\n\tsmoothstep(dist, aConstant, radius);*/\n    \n    float value = smoothstep(dist, dist + edge, radius);\n    \n    vec3 finalColor = vec3(value);\n    finalColor = mix(finalColor, color, value);\n    \n    \n    return finalColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    vec3 sun = vec3(sin(uv.y), smoothstep(.0, .9, uv.y), pow(uv.y, .5));\n    vec3 set = vec3(1, smoothstep(.0, .9, uv.y), 0.);\n    //vec3 set = vec3(sin(uv.y), smoothstep(.0, .9, uv.y), smoothstep(.0, .9, -uv.y));\n    vec3 orb = circle(.3, ratio, 0.01, uv, vec3(1,1,1));\n    vec3 ground = box(uv, vec2(0, 0), vec2(1., .2), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.01,.01), false, false);\n    \n    vec3 color = mix(redColor, blueColor, sin(iTime)+sun);\n    vec3 final = mix(color, -sin(iTime+.1)+set, orb);\n    //final = mix(final, -sin(iTime)+sun,ground);\n\tfragColor = vec4(final,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}