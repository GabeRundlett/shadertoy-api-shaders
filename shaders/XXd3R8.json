{
    "Shader": {
        "info": {
            "date": "1716084545",
            "description": "the most interesting part of a movie",
            "flags": 0,
            "hasliked": 0,
            "id": "XXd3R8",
            "likes": 1,
            "name": "OS 1",
            "published": 3,
            "tags": [
                "loading"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 89
        },
        "renderpass": [
            {
                "code": "const float pi = 3.14159265;\n\nmat2 rot(float t){\n    return mat2(\n        cos(t), sin(t),\n        -sin(t), cos(t)\n    );\n}\n\nfloat width = 4.;\nvec4 df(vec3 p){\n    vec3 op = p;\n    if (abs(p.x) <= width){\n        p.x = 0.;\n    } else {\n        p.x -= width * sign(p.x);\n    }\n    float twist = mod(iTime*10. + op.x*.6, 2.*pi);\n    bool flip = false;\n    if (twist > pi/2.){\n        twist -= pi;\n        flip = true;\n    }\n    p.zy *= rot(twist);\n    vec3 rp = p;\n    \n    float a = atan(p.y, p.x);\n    \n    p.xy *= rot(a);\n    if (abs(op.x) <= width){\n        a -= (op.x+width)*sign(rp.y);\n    }\n\n    if (op.x > width){\n        a += width*2.;\n    } else if (rp.y > 0.){\n        a += width*2. + pi*width*.64; // Why .64?????\n    }\n    \n    a += pi;\n    a /= 2.*pi + width*4.;\n    if (flip) a = 1.-a;\n\n    //This function is incredibly convoluted and I hate it\n    \n    float r = 1.-pow(sin(a*2.*pi - iTime*10.)*.35 + .6, 3.);\n    //float r = abs(a-mod(iTime*.5, 1.)) < .01?1.:.5;\n    //float r = a*5.;\n    \n    vec3 v = p - vec3(1,0,0);\n    return vec4(\n        length(v)-.15*r,\n        //max(abs(v.x), abs(v.z*.2))-.02*r,\n        v\n    );\n}\n\nvec3 norm(vec3 p, float e){\n    return normalize(\n        vec3(\n            df(p + vec3(e, 0, 0)).x - df(p - vec3(e, 0, 0)).x,\n            df(p + vec3(0, e, 0)).x - df(p - vec3(0, e, 0)).x,\n            df(p + vec3(0, 0, e)).x - df(p - vec3(0, 0, e)).x\n        )\n    );\n}\n\n\n\nvoid mainImage( out vec4 O, vec2 U ){\n\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    vec2 muv = (2.*iMouse.xy-r)/r.y;\n    \n    O = vec4(sin(1.4 + vec4(0,2,4,0))*.5+.5)*.7;\n    \n    cuv *= 10.;\n    vec3 o = vec3(cuv, 2);\n    vec3 dir = vec3(0,0,-1);\n    \n    if (abs(cuv.x) > 6. || abs(cuv.y) > 2.) return; // Skip any 3D stuff if out of bounds\n    //O = vec4(0); return; // Debug above line\n    \n    vec3 p = o;\n    float d,t=0.;\n    int i = 0;\n    for (; i<128; i++){\n        p = o + dir*t;\n        d = df(p).x;\n        t += d;\n    }\n    //dot(norm(p, 1e-2), vec3(0,0,1))\n    //if (d < .1) O = vec4(1.5-t/2.);\n    if (d < .1) O = mix(O, vec4(1), dot(norm(p, 1e-2), vec3(0,0,1)));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}