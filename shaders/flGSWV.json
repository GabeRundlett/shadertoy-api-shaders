{
    "Shader": {
        "info": {
            "date": "1641346262",
            "description": "Generalized cantor set. These share a lot of the properties of the cantor set\n(compact, nowhere dense, cardinality equal to the reals, etc)\nbut don't have measure zero except for p_0=1/3 (which is the usual cantor set)\n\nChange p_0 with mouse",
            "flags": 0,
            "hasliked": 0,
            "id": "flGSWV",
            "likes": 3,
            "name": "Generalized Cantor set",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "cantor",
                "smith",
                "volterra"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "//#define DISTANCE\n#define FILTER 2 //0: box, 1: tent, 2: lanczos\n\nconst int max_iterations=9;\n#ifndef DISTANCE\nconst int aa=32;\n#else\nconst int aa=1;\n#endif\n\nconst float pi=3.1415926535;\nconst float filter_radius=2.;\n\nfloat sinc(float x0){\n    if(x0==0.){\n        return 1.;\n    }\n    else{\n        return sin(pi*x0)/(pi*x0);\n    }\n}\n\nfloat lanczos(float x0, float a0){\n    if(abs(x0)<a0){\n        return sinc(x0)*sinc(x0/a0);\n    }\n    else{\n        return 0.;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec2 mouse=iMouse.xy/iResolution.xy;\n    \n    float dis=1e38;\n    float border=1./iResolution.x;\n    \n    float col_sum=0.;\n    float weight_sum=0.;\n    for(int x=0;x<aa;x++){\n        float offset=float(x)/(float(aa)-1.)*2.*filter_radius-filter_radius;\n        \n        float aa_offset=offset/iResolution.x;\n        vec2 p1=uv+vec2(aa_offset,0);\n\n        int num_iterations=int((1.-p1.y)*float(max_iterations));\n\n        float col=0.;\n\n        float p_0=mix(1./3.,0.,mouse.x);\n        //float p_0=1./3.;\n        float q_0=(1.-p_0)/2.;\n\n        float p_n=p_0;\n        float q_n=q_0;\n        float m_n=.5;\n        for(int i=0;i<num_iterations;i++){\n            p1.x=abs(p1.x-m_n);\n            #ifdef DISTANCE\n            dis=min(dis,p1.x-p_n/2.);\n            #else\n            if(p1.x<p_n/2.){\n                col=1.;\n            }\n            #endif\n            m_n=(p_n+q_n)/2.;\n            p_n=q_n*p_0;\n            q_n=q_n*q_0;\n        }\n        #ifndef DISTANCE\n        #if FILTER == 0\n        col_sum+=col/float(aa);\n        weight_sum+=1./float(aa);\n        #elif FILTER == 1\n        col_sum+=col*(filter_radius-offset);\n        weight_sum+=(filter_radius-offset);\n        #else\n        col_sum+=col*lanczos(offset,filter_radius);\n        weight_sum+=lanczos(offset,filter_radius);\n        #endif\n        #endif\n    }\n    #ifdef DISTANCE\n    fragColor=vec4(1.-smoothstep(0.,border,dis));\n    #else\n    fragColor=vec4(pow(col_sum/weight_sum,1.0/2.2));\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}