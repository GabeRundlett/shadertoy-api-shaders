{
    "Shader": {
        "info": {
            "date": "1461884763",
            "description": "slice with metal material",
            "flags": 1,
            "hasliked": 0,
            "id": "lstXDX",
            "likes": 3,
            "name": "Terrarium slice metal",
            "published": 3,
            "tags": [
                "raymarch",
                "luna"
            ],
            "usePreview": 0,
            "username": "Impossible",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "#define EPS 0.02\n#define PI 3.14159265359\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nmat3 rotateY(float angle)\n{\n    float cs = cos(angle);\n    float sn = sin(angle);\n    \n    mat3 m;\n    \n    m[0] = vec3(cs,0.,-sn);\n    m[1] = vec3(0.,1.,0.);\n    m[2] = vec3(sn,0.,cs);\n\n    \n    return m;\n}\n\nmat3 rotateZ(float angle)\n{\n    float cs = cos(angle);\n    float sn = sin(angle);\n    \n    mat3 m;\n    \n    m[0] = vec3(cs,-sn,0.);\n    m[1] = vec3(sn,cs,0.);\n    m[2] = vec3(0.,0.,1);\n\n    \n    return m;\n}\n\nmat3 rotateX(float angle)\n{\n    float cs = cos(angle);\n    float sn = sin(angle);\n    \n    mat3 m;\n    \n    m[0] = vec3(1.,0.,0.);\n    m[1] = vec3(0.,cs,-sn);\n    m[2] = vec3(0.,sn,cs);\n\n    \n    return m;\n}\n\n\nfloat G1V(float dotNV, float k)\n{\n    return 1.0/(dotNV*(1.0-k)+k);\n}\n\n\nfloat GGXSpec( vec3 n, vec3 v, vec3 l, float roughness, float F0 )\n{\n\tfloat alpha = roughness*roughness;\n\n    vec3 h = normalize( n + l );\n    \n    float dotNL = max(0.,dot(n,l));\n    float dotNV = max(0.,dot(n,v));\n    float dotNH = max(0.,dot(n,h));\n    float dotLH = max(0.,dot(l,h));\n    \n    float F, D, vis;\n    \n    float alphaSqr = alpha * alpha;\n    float denom = dotNH * dotNH * (alphaSqr-1.0) + 1.0;\n    D = alphaSqr/(PI * denom*denom);\n    \n    float dotLH5 = pow(1.0-dotLH,5.);\n    F = F0 + (1.0-F0)*(dotLH5);\n    \n    float k = alpha/2.;\n    vis = G1V(dotNL,k)*G1V(dotNV,k);\n    \n    float specular = dotNL * D *F *vis;\n    \n    return specular;\n    \n}\n\nfloat map(vec3 p)\n{        \n    float res = max(sdSphere(p, 4.0),sdPlane(p,vec4(0.0,1.0,0.0,0.0)));\n    \n    \n    float shift = iTime + iMouse.x + rand(vec2(floor(p.z* 1.0),0.0)) * iMouse.y;\n    \n    float res2 = smin(sdSphere(p-vec3(mod(2.0 + shift + 4.0,8.0) - 4.0,0.0,0.0),0.7),res,0.75); \n    res2 = smin(sdSphere(p-vec3(mod(-1.0 + shift + 4.0,8.0) - 4.0,0.0,2.0),1.0),res2,0.75);\n    res2 = smin(sdSphere(p-vec3(mod(-0.5 + shift + 4.0,8.0) - 4.0,0.0,-2.5),1.25),res2,0.9);\n    \n    res2 = max(sdSphere(p,4.0), res2);\n    \n    res = min(res,res2);\n    \n    //res = min(sdCone(p * 1000.0,vec2(0.0,1.0)),res);\n    return res;\n}\n\nfloat tintmap(vec3 p)\n{        \n    float res = max(sdSphere(p,4.0),sdPlane(p,vec4(0.0,-1.0,0.0,0.0)));\n    return res;\n}\n\nvec3 normal(vec3 p)\n{\n    vec3 n;\n    \n    n.x = map(p + vec3(EPS,0.,0.)) - map(p-vec3(EPS,0.,0.));\n    n.y = map(p + vec3(0.,EPS,0.)) - map(p-vec3(0.,EPS,0.));\n    n.z = map(p + vec3(0.,0.,EPS)) - map(p-vec3(0.,0.,EPS));   \n    \n    return normalize(n);\n}\n\nvec3 tintnormal(vec3 p)\n{\n    vec3 n;\n    \n    n.x = tintmap(p + vec3(EPS,0.,0.)) - tintmap(p-vec3(EPS,0.,0.));\n    n.y = tintmap(p + vec3(0.,EPS,0.)) - tintmap(p-vec3(0.,EPS,0.));\n    n.z = tintmap(p + vec3(0.,0.,EPS)) - tintmap(p-vec3(0.,0.,EPS));   \n    \n    return normalize(n);\n}\n\nfloat shadow( vec3 ro, vec3 rd )\n{\n    bool hit = false;\n    vec3 p = ro + rd;\n    float t = 0.;\n    float k = 16.;\n    float res = 1.;\n    \n    for( int i=0;i<16;i++)\n    {\n       float d = map(p);\n        \n        t+=d;\n        res = min( res, k*d/t );\n        \n        if(d<EPS)\n        {\n            hit = true;\n            res = 0.;\n            break;\n        }\n        else if(t>15.)\n        {\n            hit = false;\n            break;\n        }\n      \n        p = ro + rd * t;\n    }\n    \n    return res;\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{    \n    \n    float cs = cos(mod(0.3 * iTime,2.*PI));\n    float sn = sin(mod(0.3 * iTime,2.*PI));\n    \n    ro += vec3(cs*7.,2.,7.*sn);\n    \n    mat3 m = rotateX(15./180.*PI);\n    mat3 m2 = rotateY(-mod(0.3 * iTime,2.*PI)+PI*0.5);\n    rd = m2*m*rd; \n    \n    bool hit = false;\n    \n    vec3 p = ro + rd;\n    \n    float t = 0.;\n    \n    for( int i=0;i<256;i++)\n    {\n       float d = map(p);\n        \n        t+=d;\n        if(d<EPS)\n        {\n            hit = true;\n            break;\n        }\n        else if(t>200.)\n        {\n            hit = false;\n            break;\n        }\n        p = ro + rd * t * 0.1;\n    }\n    \n    bool tinthit = false;\n    \n    vec3 tintp = ro + rd;\n    \n    float tintt = 0.;\n    \n    for( int i=0;i<16;i++)\n    {\n       float d = tintmap(tintp);\n        \n        tintt+=d;\n        if(d<EPS)\n        {\n            tinthit = true;\n            break;\n        }\n        else if(tintt>200.)\n        {\n            tinthit = false;\n            break;\n        }\n        tintp = ro + rd * tintt;\n    }\n    \n    float vignette =  pow(1.-dot( fragCoord.xy / iResolution.xy - vec2(0.5,0.5), fragCoord.xy / iResolution.xy - vec2(0.5,0.5) ),3.);\n    \n    vec4 tintcol = tinthit?vec4(0.9,0.75,0.95,1.0):vec4(1.0,1.0,1.0,1.0);\n    \n    if(tinthit)\n    {\n        vec3 n = tintnormal(tintp);\n        float ndv = dot(n,-rd);\n        float f0 = 0.1;\n        float fresnel = f0 + (1.-f0)*pow(1.-ndv,5.); \n        vec3 l = m2*m*normalize(vec3(0.0,2.0,2.0));\n        float ndl = max(0.,dot(n,l));\n        \n        vec4 spec = vec4(GGXSpec(n,rd,l,1.0,f0)) * vec4(0.5,0.5,1.0,1.0);     \n        \n        tintcol += spec + fresnel*texture(iChannel1,reflect(rd,n));\n    }\n    \n    if (hit )\n    {\n        vec3 n = normal(p);\n        float ndv = dot(n,-rd);\n        float f0 = 0.1;\n        float fresnel = f0 + (1.-f0)*pow(1.-ndv,5.); \n        vec3 l = m2*m*normalize(vec3(1.0,2.0,2.0));\n        float ndl = max(0.,dot(n,l));\n        \n        vec3 col = vec3(0.);\n        \n        vec4 spec = vec4(GGXSpec(n,rd,l,0.02,f0)) * vec4(0.05,0.2,0.05,1.0);\n        \n\t\tfragColor = pow(((spec+vec4( ndl * col.r, ndl * col.g, ndl * col.b,1.0))*shadow(p,l) + fresnel*texture(iChannel1,reflect(rd,n)))*vignette * tintcol,vec4(1.0/2.2));\n    }\n    else\n        fragColor = pow(texture(iChannel1,rd)*vignette,vec4(1./2.2)) * tintcol;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 rd = vec3( ( fragCoord.xy / iResolution.xy  * 2.0) - 1.0, -1.0);\n    rd.x *= iResolution.x/iResolution.y;\n    \n    rd = normalize(rd); \n    \n\tmainVR( fragColor, fragCoord, vec3(0,0,0), rd);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}