{
    "Shader": {
        "info": {
            "date": "1474281239",
            "description": "\"And they journeyed on, into the land of music and color\"\n",
            "flags": 96,
            "hasliked": 0,
            "id": "4lyGR1",
            "likes": 39,
            "name": "Light Home",
            "published": 3,
            "tags": [
                "reflection",
                "raymarch",
                "torus",
                "music",
                "colors",
                "colorful",
                "visualizer",
                "milkhoney"
            ],
            "usePreview": 0,
            "username": "tehsauce",
            "viewed": 4880
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 col = texture( iChannel0, uv );\n    \n\tfragColor = col;\n    \n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct Ray \n{\n\tvec3 position;\n    vec3 direction;\n    float totalDist;\n};\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n    \nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)) - r;\n}\n\nfloat sdFlippedBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return -(min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)));\n}\n\nfloat sdStrangeBox( vec3 p, vec3 b )\n{\n    vec3 b2 = abs( b );\n    vec3 p2 = abs( p );\n\treturn b2.x + b2.y + b2.z - p2.x - p2.y - p2.z; \n}\n\nfloat opU( float a, float b)\n{\n    return min( a, b );\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 rot2D(vec2 p, float angle) \n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return p * mat2(c,s,-s,c);\n}\n\nfloat map( vec3 p )\n{\n    return opU( opU( smin( sdTorus( p + vec3( 0.0, -9.0*texture(iChannel0, vec2( 0.0, 0.0)).x+6.0/*2.0*sin(iTime)*/, 0.0 ), vec2( 2.0, 1.0 ) ), \n                sdRoundBox( p + vec3( 0.0, 4.7, 0.0 ), vec3( 3.0, 3.0, 3.0 ), 0.2 ), 1.8 ),\n        \t\t\tsdFlippedBox( p, vec3( 10.0 ) ) ), sdSphere( p + vec3( 0.0, 0.0, -7.0 ), 1.0 ) ) ;\n\t//return sdSphere( p + vec3( 0.0, 0.0, -4.0 ), 2.0 );\n}\n\nfloat intersect( Ray r, float t )\n{\n    const float maxDist = 8.0;\n    const float epsilon = 0.005;\n    float totalD = 0.0;\n    for ( int i = 0; i < 48; i++ )\n    {\n   \t\tfloat dist = map( r.position + r.direction * totalD * 0.995 );\n        totalD += dist;\n        if ( dist < epsilon || mod(t, 80.0) < float(i) ) break;\n    //    r.position += dist* 0.995 * r.direction;\n    }\n    return totalD;//length( r.position );\n}\n\nfloat norm( float n) {\n \treturn n/2.0+0.5;   \n}\n\n\nvec3 calcNormal( vec3 p )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(p+eps.xyy) - map(p-eps.xyy),\n           map(p+eps.yxy) - map(p-eps.yxy),\n           map(p+eps.yyx) - map(p-eps.yyx) ) );  \n}\n\nfloat nrand( float n )\n{\n\treturn fract(sin( n * 43758.5453 ) );\n}\n\nvec3 vecRand( vec3 v )\n{\n    return vec3( nrand( v.x ), nrand( v.y ), nrand( v.z ) );   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    \n    if (iFrame < 3) t = 12.0;\n    \n    vec3 light = normalize(vec3( 0.7, 0.3, -0.5));\n    \n    vec3 pLight = vec3( 0.0, 0.0, 7.0 );\n    \n    vec2 uv = ( fragCoord / iResolution.xy ) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; \n    \n    float amp = texture(iChannel1, vec2( 0.01, 0.0)).x;\n    if (iFrame < 3) amp = 1.0;\n    float soft = texture(iChannel0, vec2( 0.0, 0.0)).x;\n    if (iFrame < 3) soft = 5.1;\n   \n    vec3 color = vec3( 0.0 );\n    \n    Ray ray = Ray( vec3( 0.0, 0.0, -5.0 ), normalize( vec3( uv, 1.2 ) ), 0.0 );\n    ray.position.xz = rot2D( ray.position.xz, iMouse.z > 0.0 ? iMouse.x/50.0 : t/4.0 );\n    ray.direction.xz = rot2D( ray.direction.xz, iMouse.z > 0.0 ? iMouse.x/50.0 : t/4.0 );\n    \n    ray.position.yz = rot2D( ray.position.yz, iMouse.z > 0.0 ? iMouse.y/50.0 + iResolution.y/2.0 : 0.0 );\n    ray.direction.yz = rot2D( ray.direction.yz, iMouse.z > 0.0 ? iMouse.y/50.0 + iResolution.y/2.0 : 0.0 );\n    \n    for (int bounce = 0; bounce < 8; bounce++) \n    {\n    \t\n        float d = intersect( ray, t );\n   \t\tray.position += ray.direction * d;\n        ray.totalDist += d;\n        \n        if ( distance( ray.position, pLight ) < 1.05 || soft * soft * soft * 8.0 < float(bounce) ) {\n            color += 0.8;\n            break;\n      \t}\n    \n //   if ( length( ray.position ) < 25.0 ) {\n        vec3 normal = calcNormal( ray.position );\n        \n        vec3 rand = vec3(0.0);\n        \n        rand = vecRand( ray.direction * ray.position + iTime) - 0.5;\n        \n        ray.direction = reflect( ray.direction, normal );\n        ray.direction = normalize( ray.direction + 0.0*rand );\n        ray.position += 0.15 * ray.direction;\n        t += float(bounce);\n         color = mix( color, vec3( norm(sin(t)), norm(sin(t*0.4832)), norm(sin(0.83625*t))) * dot( normal, light ), 0.7 );\n         color += 0.05;\n//    }\n        \n    } \n        \n       \n    vec3 val = vec3(((color.r + color.g + color.b) / 3.0));\n\n    if (fragCoord.x < 3.0) {\n        fragColor = vec4(mix( amp, texture( iChannel0, vec2(0.0)).x, 0.8));\n    } else {\n\t\tfragColor = mix( vec4( val, 1.0 ), vec4( color, 1.0 ), pow(amp, 3.0)*3.0) ;\n    }\n//    fragColor = vec4( color, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 4636,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/caravan-palace-official/aftermath"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}