{
    "Shader": {
        "info": {
            "date": "1491439335",
            "description": "Playing with a torus",
            "flags": 4,
            "hasliked": 0,
            "id": "MdjyRm",
            "likes": 74,
            "name": "Shaderlamp",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 1,
            "username": "lherm",
            "viewed": 39161
        },
        "renderpass": [
            {
                "code": "#define eps 0.005\n#define far 40.\n#define time iTime*.25\n#define PI 3.1415926\n\n#define PSD pow(abs(textureLod(iChannel0, vec2(.5), 0.).r), 2.)\n\n// Variants\n//#define rings\n//#define polar\n//#define warp\n\n//#define audio\n\nvec2 rotate(vec2 p, float a)\n{\n    float t = atan(p.y, p.x)+a;\n    float l = length(p);\n    return vec2(l*cos(t), l*sin(t));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec3 tri(in vec3 x){return abs(x-floor(x)-.5);} // Triangle function.\n\nfloat distort(vec3 p)\n{\n    //return sin(p.x + sin(p.y + time * .1) + sin(p.z)*p.z + p.x + p.y + time);\n    return dot(tri(p+time) + sin(tri(p+time)), vec3(.666));\n}\n\nfloat trap;\n\nfloat map(vec3 p)\n{\n    p.z += .2;\n    p += distort(p*distort(p))*.1;\n    #ifdef audio\n    trap = dot(sin(p), 1.-abs(p-PSD))*1.2;\n    #else\n    trap = dot(sin(p), 1.-abs(p))*1.2;\n    #endif\n    float d = -sdTorus(p, vec2(1., .7)) + distort(p)*.05;\n    \n    #ifdef rings\n    p.y -= .2;\n    for(int i = 0; i < 3; i++)\n    {\n        p.y += float(i)*.1;\n        \n    \td = min(d, sdTorus(p, vec2(.75, .01))-distort(p*float(i))*.01);\n    }\n    #endif\n    \n    return d;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(eps, 0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        ));\n}\n\nfloat trace(vec3 r, vec3 d, float start)\n{\n    float m, t=start;\n    for (int i = 0; i < 100; i++)\n    {\n        m = map(r + d * t);\n        t += m;\n        if (m < eps || t > far) break;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 R=iResolution.xy, u = (g+g-R)/R.y;\n    \n    #ifdef audio\n    u *= sin(PSD*5.);\n    #endif\n    \n    #ifdef polar\n    u = rotate(u, 2.*atan(u.y, u.x) + time);\n    #endif\n    \n    #ifdef warp\n    u = abs(u)/dot(u, u) - vec2(step(1., time));\n    #endif\n    \n    vec3 r = vec3(0, 0, 1), d = normalize(vec3(u, -1)), p, n, col;\n    col = vec3(0.);\n    float t = trace(r, d, 0.);\n    p = r + d * t;\n    \n    n = calcNormal(p);\n    \n    if (t < far)\n    {\n        vec3 objcol = vec3(trap/abs(1.-trap), trap*trap, 1.-trap);\n        vec3 lp = vec3(1, 3, 3);\n        vec3 ld = lp - p;\n        float len = length(ld);\n        float atten = max(0., 1./(len*len));\n        ld /= len;\n        float amb = .25;\n        float diff = max(0., dot(ld, n));\n        float spec = pow(max(0., dot(reflect(-ld, n), r)), 8.);\n        float ref = trace(r, reflect(d, n), eps*5.);\n        col = objcol * (((diff*.8+amb*.8)+.1*spec)+atten*.1)*ref;\n    }\n    \n    f = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}