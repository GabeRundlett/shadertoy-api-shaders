{
    "Shader": {
        "info": {
            "date": "1627323655",
            "description": "FUXX TOKYO SHXX\nOnly the win/mac can see this demo.\nIt seems not working on ubuntu.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl2SRw",
            "likes": 21,
            "name": "SCI-Fi Tokyo Navi Demo",
            "published": 3,
            "tags": [
                "scifi",
                "tokyo"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 550
        },
        "renderpass": [
            {
                "code": "// raymarching based on: https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define Slice(p,a) dot(p,vec2(sin(a),cos(a)))\n#define SliceB(p,a,b,s) max(-dot(p-a,vec2(cos(b),sin(b))),max(abs(p).x-s,abs(p).y-s))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\n#define MATERIAL_TOWER0 0\n#define MATERIAL_BUILDINGS 1\n#define MATERIAL_FLOOR 2\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\nvec2 combine(vec2 val1, vec2 val2){\n    vec2 res1 = val1;\n    vec2 res2 = val2;\n    return (val1.x < val2.x)?res1:res2;\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec3 repLim( in vec3 p, in float c, in vec3 l)\n{\n    vec3 q = p-c*clamp(round(p/c),-l,l);\n    q.y = p.y;\n    return q;\n}\n\n// https://www.shadertoy.com/view/wdjSDG\nfloat BevelMax( float a, float b, float bevelSize )\n{\n    return max(max(a,b), dot(vec2(a,b),normalize(vec2(.5,1))) + bevelSize );\n}\n\n// 2D\nfloat customTri(vec2 p, vec2 a, vec2 b, vec2 c){\n    float s = 1.0;\n    float d = max(SliceB(p,b,-atan(b.x-a.x,b.y-a.y),s),SliceB(p,b,-atan(c.x-b.x,c.y-b.y),s));\n    return max(SliceB(p,c,-atan(a.x-c.x,a.y-c.y),s),d);\n}\n\nfloat dTri(vec2 p, vec2 s){\n    p*=-1.0;\n    return Tri(p,s,radians(30.0));\n}\n\n// 3D\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n// 3D taper box\nfloat dTaperBox(vec3 p, vec3 b, float angle, float bottomDist) {\n    vec3 prevP = p;\n    float d = sdBox(p,b);\n    float a = radians(angle);\n    p.x = abs(p.x);\n    p.x-=bottomDist;    \n    d = max(Slice(p.xy,a),d);\n\n    p = prevP;\n    a = radians(angle);\n    p.z = abs(p.z);\n    p.z-=bottomDist;\n    d = max(Slice(p.zy,a),d);\n\n    return d;\n}\n\nfloat dWire(vec3 p){\n    float r = 0.02;\n    float size = 0.15;\n    p.xy = mod(p.xy,size*2.0)-size;\n    float d = sdCapsule(p,vec3(size,size,0.0),vec3(-size,-size,0.0),r);\n    float d2 = sdCapsule(p,vec3(size,-size,0.0),vec3(-size,size,0.0),r);\n    d = min(d,d2);\n    d2 = sdCapsule(p,vec3(0.0,size,0.0),vec3(0.0,-size,0.0),r);\n    d = min(d,d2);\n    return d;\n}\n\nfloat dTowerTaper(vec3 p, vec3 size, float angle, float bottomDist){\n    float d = dWire(p);\n    d = max(dTaperBox(p,size,angle,bottomDist),d);\n    return d;\n}\n\nfloat dTower(vec3 p){\n    vec3 size = vec3(0.82,3.,0.1);\n    float angle = 86.0;\n    float bottomDist = 0.57;\n    \n    float deg = 4.0;\n    float dist = 0.57;\n    vec3 prevP = p;\n    \n    p.z = abs(p.z);\n    p.z -= dist;\n    float d = dTowerTaper(p*matRotateX(radians(deg)),size,angle,bottomDist);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x -= dist;\n    float d2 = dTowerTaper(p*matRotateY(radians(-90.0))*matRotateX(radians(-deg)),size,angle,bottomDist);\n    d = min(d,d2);    \n\n    return d;\n}\n\nfloat dTowerBottom(vec3 p){\n    vec3 size = vec3(3.0,1.15,0.1);\n    float angle = 58.0;\n    float bottomDist = 1.5;\n    \n    float deg = 39.5;\n    float dist = 1.5;\n    vec3 prevP = p;\n    \n    p.z = abs(p.z);\n    p.z-=dist;\n    float d = dTowerTaper(p*matRotateX(radians(deg)),size,angle,bottomDist);\n    p.x*=0.65;\n    d = max(-(length(p+vec3(0.0,0.85,-0.5))-1.0),d);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x-=dist;\n    float d2 = dTowerTaper(p*matRotateY(radians(-90.0))*matRotateX(radians(-deg)),size,angle,bottomDist);\n    p.z*=0.65;\n    d = min(d,max(-(length(p+vec3(-0.5,0.85,0.0))-1.0),d2));\n    \n    return d;\n}\n\nfloat dTowerLegs(vec3 p){\n    p.xz = abs(p.xz);\n    p.xz-=1.9;\n    float d = sdBox(p,vec3(0.5,0.15,0.5));\n    return d;\n}\n\nfloat dTowerBuilding(vec3 p){\n    vec3 prevP = p;\n    vec3 size = vec3(1.0,0.3,1.0);\n    float angle = 75.0;\n    float bottomDist = 0.99;\n    p.y*=-1.0;\n    float d = dTaperBox(p,size,angle,bottomDist);\n    float maskD = sdBox(p*matRotateY(radians(45.0)),vec3(1.2,0.4,1.2));\n    d = max(maskD,d);\n    \n    p = prevP;\n    p*=1.1;\n    p = mod(p,0.3)-0.15;\n   \n    float d2 = sdBox(p,vec3(0.1,0.12,0.1));\n    d = max(-d2,d);\n    \n    return d;\n}\n\nfloat dTowerTop(vec3 p){\n    vec3 size = vec3(0.4,0.2,0.4);\n    float angle = 75.0;\n    float bottomDist = 0.38;\n    float d = dTaperBox(p,size,angle,bottomDist);\n    size = vec3(0.3,0.3,0.3);\n    angle = 80.0;\n    bottomDist = 0.25;\n    float d2 = dTaperBox(p+vec3(0.0,-0.3,0.0),size,angle,bottomDist);\n    d = min(d,d2);\n    size = vec3(0.1,0.8,0.1);\n    angle = 85.0;\n    bottomDist = 0.09;\n    d2 = dTaperBox(p+vec3(0.0,-1.0,0.0),size,angle,bottomDist);\n    d = min(d,d2);\n    return d;\n}\n\nfloat dTokyoTower(vec3 p){\n    float d = dTower(p+vec3(0.0,-0.085,0.0));\n    float d2 = dTowerBottom(p+vec3(0.0,3.8,0.0));\n    d = min(d,d2);\n    d2 = dTowerLegs(p+vec3(0.0,4.8,0.0));\n    d = min(d,d2);\n    d2 = dTowerBuilding(p+vec3(0.0,1.2,0.0));\n    d = min(d,d2);\n    d2 = dTowerTop(p+vec3(0.0,-3.2,0.0));\n    d = min(d,d2);\n    return d;\n}\n\nfloat dBuilding(vec3 p, int type){\n    float additionalH = 0.0;\n    if(type == 2){\n        additionalH = 3.0;\n    }\n    \n    float d = sdBox(p,vec3(2.0,1.5+additionalH,1.5));\n    float d2 = sdBox(p+vec3(0.0,-1.8,0.0),vec3(1.8,0.8,0.8));\n    d = BevelMax(d,sdBox(p,vec3(2.5,2.8+additionalH,1.8)),0.9);\n    \n    if(type == 1){\n        d2 = sdBox(p+vec3(0.0,-1.5,3.5),vec3(1.3,4.0,1.3));\n        d2 = BevelMax(d2,sdBox((p+vec3(0.0,-1.5,3.5)),vec3(3.5,4.6,2.5)),1.6);\n        d = min(d,d2);\n    }\n    return d;\n}\n\nfloat dBuildings(vec3 p){\n    vec3 prevP = p;\n    \n    p.xz*=Rot(radians(30.0));\n    p = repLim(p,15.0,vec3(1.0,1.0,1.0));\n    float d = dBuilding(p+vec3(0.0,4.0,0.0),1);\n    \n    p = prevP;\n    d = max(-sdBox(p+vec3(0.0,4.0,0.0),vec3(4.5,5.0,4.5)),d);\n    \n    p = prevP;\n    p.xz*=Rot(radians(-120.0));\n    p = repLim(p,20.0,vec3(1.0,1.0,1.0));\n    float d2 = dBuilding(p+vec3(0.0,4.0,0.0),2);\n    \n    p = prevP;\n    d2 = max(-sdBox(p+vec3(0.0,4.0,0.0),vec3(4.5,5.0,4.5)),d2);\n    \n    d = min(d,d2);\n    return d;\n}\n\nvec2 GetDist(vec3 p) { \n    vec3 prevP = p;\n\n    float d = dTokyoTower(p);\n    vec2 res = vec2(d, MATERIAL_TOWER0);\n       \n    d = dBuildings(p);   \n    vec2 res2 = vec2(d*0.5, MATERIAL_BUILDINGS);\n    \n    d = p.y+4.9;\n    d = max(sdBox(p+vec3(0.0,4.9,0.0),vec3(40.0,0.1,40.0)),d);\n    vec2 res3 = vec2(d, MATERIAL_FLOOR);\n    \n    vec2 model = combine(res,combine(res2,res3));\n    return model;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side) {\n    vec2 dO = vec2(0.0);\n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n   \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n   \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n   \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 col) {\n    float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n    return vec3(dif)*col;\n}\n\nvec3 floorTex(vec3 p){\n    vec2 uv = p.xz;\n    vec2 prevUV = uv;\n    \n    vec3 col = vec3(0.0);\n    \n    uv*=0.2;\n    \n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    \n    float n = Hash21(id);\n    \n    float d = B(gv+vec2(0.5,0.0),vec2(0.04,0.5));\n    float d2 = B(gv+vec2(0.0,0.5),vec2(0.5,0.04));\n    \n    if(n>.2 && n<.4) {\n        d = min(d,d2);\n        gv.y+=iTime*0.7;\n        gv.y=mod(gv.y,0.4)-0.2;\n        float d3 = B(gv+vec2(0.43,0.0),vec2(0.01,0.02));\n        d = min(d,d3);\n    } else if(n>=.7 && n<.9) {\n        d = d2;\n        gv.x+=iTime*0.7;\n        gv.x=mod(gv.x,0.4)-0.2;\n        float d3 = B(gv+vec2(0.0,0.43),vec2(0.02,0.01));\n        d = min(d,d3);\n    }\n    \n    col = mix(col,vec3(0.8),S(d,0.0));\n    \n    return col;\n}\n\nvec3 stripeTex(vec2 uv, float size)\n{\n    float stripeSize = size;\n    float t = 0.0;\n    return vec3(tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize);\n}\n\nvec3 bg(vec2 p, vec3 col){\n    p.x+=iTime*0.5;\n    p = mod(p,0.3)-0.15;\n    float d = B(p,vec2(0.001,0.015));\n    d = min(B(p,vec2(0.015,0.0015)),d);\n    col = mix(col,vec3(0.3),S(d,0.0));\n    \n    return col;\n}\n\n// distance 2d digital alarm font\nconst float cDefault[7] = float[](0.,0.,0.,0.,0.,0.,0.);\nconst float c1[7] = float[](10.,0.,0.,10.,10.,10.,10.);\nconst float c2[7] = float[](0.,0.,10.,0.,0.,10.,0.);\nconst float c3[7] = float[](0.,0.,0.,0.,10.,10.,0.);\nconst float c4[7] = float[](10.,0.,0.,10.,10.,0.,0.);\nconst float c5[7] = float[](0.,10.,0.,0.,10.,0.,0.);\nconst float c6[7] = float[](0.,10.,0.,0.,0.,0.,0.);\nconst float c7[7] = float[](0.,0.,0.,10.,10.,10.,10.);\nconst float c8[7] = float[](0.,0.,0.,0.,0.,0.,0.);\nconst float c9[7] = float[](0.,0.,0.,0.,10.,0.,0.);\nconst float c0[7] = float[](0.,0.,0.,0.,0.,0.,10.);\nconst float cTBase[7] = float[](0.,10.,10.,10.,10.,10.,10.);\nconst float cKBase[7] = float[](10.,10.,0.,10.,0.,0.,0.);\nconst float cYBase[7] = float[](10.,0.,0.,0.,10.,0.,0.);\n\nconst vec2 digitVPos = vec2(0.08,0.073);\nconst vec2 digitHPos = vec2(0.0,0.15);\n\nfloat dDigitV(vec2 p){\n    float d = B(p,vec2(0.02,0.1));\n    p = abs(p);\n    p-=vec2(0.02,0.05);\n    d = max(Slice(p,44.775),d);\n    return d;\n}\n\nfloat dDigitH(vec2 p){\n    p*=Rot(radians(90.0));\n    float d = dDigitV(p);\n    return d;\n}\n\nfloat dDigitBase(vec2 p, float[7] char){\n    vec2 prevP = p;\n    float d = 10.0;\n    float d2 = 10.0;\n    // 1\n    d = (char[0])+dDigitH(p-digitHPos);\n    // 2\n    d2 = (char[1])+dDigitV(p-digitVPos);\n    d = min(d,d2);\n    // 3\n    d2 = (char[2])+dDigitV(p+vec2(-digitVPos.x,digitVPos.y));\n    d = min(d,d2);\n    // 4\n    d2 = (char[3])+dDigitH(p+digitHPos);\n    d = min(d,d2);\n    // 5\n    d2 = (char[4])+dDigitV(p+digitVPos);\n    d = min(d,d2);\n    // 6\n    d2 = (char[5])+dDigitV(p+vec2(digitVPos.x,-digitVPos.y));\n    d = min(d,d2);\n    // 7\n    d2 = (char[6])+dDigitH(p);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat dDot(vec2 p){\n    p.y = abs(p.y);\n    p.y-=0.073;\n    float d = B(p,vec2(0.02));\n    return d;\n}\n\nfloat dDigitT(vec2 p){\n    vec2 prevP = p;\n    p.x*=0.7;\n    float d = dDigitBase(p,cTBase);\n    p = prevP;\n    p.y+=0.02;\n    p.y = abs(p.y);\n    p.y-= digitVPos.y;\n    \n    float d2 = dDigitV(p);\n    return min(d,d2);\n}\n\nfloat dDigitK(vec2 p){\n    vec2 prevP = p;\n    float d = dDigitBase(p,cKBase);\n    p = prevP;\n    \n    p.x-=0.025;\n    p.y-=0.09;\n    p*=Rot(radians(52.0));\n    p.y*=0.74;\n    float d2 = dDigitV(p);\n    return min(d,d2);\n}\n\nfloat dDigitY(vec2 p){\n    float d = dDigitBase(p,cYBase);\n    return d;\n}\n\n// HUD\nvec3 drawDigitNumber(vec2 p, vec3 col, int num){\n    float d = dDigitBase(p,cDefault);\n    col = mix(col,vec3(0.2),S(d,0.0));\n    \n    if(num == 0){\n        d = dDigitBase(p,c0);\n    } else if(num == 1){\n        d = dDigitBase(p,c1);\n    } else if(num == 2){\n        d = dDigitBase(p,c2);\n    } else if(num == 3){\n        d = dDigitBase(p,c3);\n    } else if(num == 4){\n        d = dDigitBase(p,c4);\n    } else if(num == 5){\n        d = dDigitBase(p,c5);\n    } else if(num == 6){\n        d = dDigitBase(p,c6);\n    } else if(num == 7){\n        d = dDigitBase(p,c7);\n    } else if(num == 8){\n        d = dDigitBase(p,c8);\n    } else if(num == 9){\n        d = dDigitBase(p,c9);\n    }\n    \n    col = mix(col,vec3(1.0),S(d,0.0));\n    return col;\n}\n\nvec3 drawDigitTypo(vec2 p, vec3 col, int num){\n    float d = dDigitBase(p,cDefault);\n    col = mix(col,vec3(0.2),S(d,0.0));\n    \n    if(num == 0){\n        d = dDigitT(p);\n    } else if(num == 1){\n        d = dDigitK(p);\n    } else if(num == 2){\n        d = dDigitY(p);\n    } else if(num == 3){\n        d = dDigitBase(p,c0);\n    }\n    \n    col = mix(col,vec3(1.0),S(d,0.0));\n    return col;\n}\n\nvec3 drawNumbers(vec2 p, vec3 col){\n    float t = iTime;\n    float d = dDot(p+vec2(0.285,0.0));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    d = dDot(p+vec2(-0.29,0.0));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    col = drawDigitNumber(p+vec2(0.7,0.0),col,0);\n    col = drawDigitNumber(p+vec2(0.45,0.0),col,0);\n    \n    col = drawDigitNumber(p+vec2(0.125,0.0),col,int(mod(t*0.5,10.0)));\n    col = drawDigitNumber(p+vec2(-0.125,0.0),col,int(mod(t,10.0)));\n    \n    col = drawDigitNumber(p+vec2(-0.45,0.0),col,int(mod(t*5.0,10.0)));\n    col = drawDigitNumber(p+vec2(-0.7,0.0),col,int(mod(t*20.0,10.0)));\n    return col;\n}\n\nvec3 drawTokyo(vec2 p, vec3 col){\n    col = drawDigitTypo(p+vec2(0.5,0.0),col,0);\n    col = drawDigitTypo(p+vec2(0.25,0.0),col,3);\n    col = drawDigitTypo(p,col,1);\n    col = drawDigitTypo(p+vec2(-0.25,0.0),col,2);\n    col = drawDigitTypo(p+vec2(-0.5,0.0),col,3);\n    return col;\n}\n\nvec3 drawHUDItem1(vec2 p, vec3 col){\n    vec2 prevP = p;\n    float d = customTri( p, vec2(-0.35,0.46), vec2(0.2,0.4), vec2(-0.1,-0.46) );\n    p*=Rot(radians(20.0));\n    d = max(-B(p,vec2(0.5,0.18)),abs(d)-0.0001);\n    col = mix(col,vec3(1.0),S(d,0.0));\n    p = prevP;\n    d = customTri( p, vec2(0.13,0.408), vec2(0.2,0.4), vec2(0.177,0.335) );\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    float deg = 10.0;\n    float xPos = 0.05;\n    float yPos = -0.05;\n    \n    p*=Rot(radians(deg));\n    p.x += xPos;\n    p.y += yPos;\n    p.y -= iTime*0.05;\n    p.y = mod(p.y,0.02)-0.01;\n    d = B(p,vec2(0.01,0.001));\n    \n    p = prevP;\n    p*=Rot(radians(deg));\n    p.x += xPos;\n    p.y += yPos;\n    p.y = mod(p.y,0.1)-0.05;\n    float d2 = B(p,vec2(0.03,0.001));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(deg));\n    p.x += xPos;\n    p.y += yPos;\n    p.y+=0.05;\n    p.y = mod(p.y,0.1)-0.05;\n    d2 = B(p,vec2(0.02,0.001));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(deg));\n    p.x += xPos;\n    p.y += yPos;\n    d = max(B(p,vec2(0.1,0.33)),d);\n    \n    col = mix(col,vec3(1.0),S(d,-0.001));\n    \n    p = prevP;\n    p*=2.5;\n    p.x+=0.35;\n    p.y-=0.8;\n    p*=Rot(radians(deg));\n    col = drawDigitNumber(p+vec2(-0.12,0.0),col,0);\n    col = drawDigitNumber(p+vec2(0.12,0.0),col,0);\n    \n    p = prevP;\n    p*=17.0;\n    p.x-=iTime*2.0;\n    p.y+=0.3;\n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n    \n    float n = Hash21(id);\n    d = B(gv,vec2(0.25*(n*2.0),0.02));\n    p = prevP;\n    p+=vec2(-0.15,0.45);\n    col = mix(col,vec3(1.0),S(max(B(p,vec2(0.18,0.04)),d),0.0));\n    d = B(p+vec2(0.0,0.02),vec2(0.18,0.0008));\n    col = mix(col,vec3(1.0),S(d,0.0));    \n    \n    return col;\n}\n\nvec3 drawHUDItem2(vec2 p, vec3 col){\n    vec2 prevP = p;\n    float d = customTri( p, vec2(-0.4,0.4), vec2(0.4,0.4), vec2(0.0,-0.43) );\n    float maskD = customTri( p, vec2(-0.6,-0.35), vec2(0.0,1.2), vec2(0.6,-0.35) );\n    d = max(-maskD,abs(d)-0.0001);\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p.y -= 0.393;\n    p.x+=iTime*0.1;\n    p.x = mod(p.x,0.04)-0.02;\n    d = B(p,vec2(0.001,0.007));\n    \n    p = prevP;\n    p.y -= 0.39;\n    p.x = mod(p.x,0.1)-0.05;\n    float d2 = B(p,vec2(0.001,0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y -= 0.4;\n    d = max(B(p,vec2(0.3,0.1)),d);\n    \n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p.y -= 0.41;\n    p.x-=iTime*0.05;\n    p.x = mod(p.x,0.15)-0.075;\n    d = dTri(p,vec2(0.015));\n    p = prevP;\n    p.y -= 0.4;\n    d = max(B(p,vec2(0.3,0.2)),d);\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p.x = abs(p.x);\n    p.x -=0.35;\n    p.y -= 0.42;\n    d = dTri(p+vec2(-0.01,0.01),vec2(0.015));\n    p.y*=-1.0;\n    d2 = dTri(p+vec2(0.01,0.005),vec2(0.015));\n    col = mix(col,vec3(1.0),S(min(d,d2),0.0));\n    \n    p = prevP;\n    \n    p.y += 0.4;\n    p.x = abs(p.x);\n    p.x-=0.43;\n    p.y+=sin(-iTime*3.5)*0.01;\n    d = length(dTri((p),vec2(0.165)));\n    p.x-=sin(iTime*5.0)*0.01;\n    d2 = length(dTri((p)+vec2(-0.03,-0.02),vec2(0.17)));\n    col = mix(col,vec3(1.0),S(min(d,d2),0.0));\n    \n    return col;\n}\n\nvec3 drawHUDItem3(vec2 p, vec3 col){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(-iTime*10.0));\n    p = DF(p,16.0);\n    p = abs(p);\n    p -= vec2(0.215);\n    p*=Rot(radians(45.0));\n    float d = B(p,vec2(0.001,0.005));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(-iTime*10.0));\n    p = DF(p,4.0);\n    p = abs(p);\n    p -= vec2(0.21);\n    p*=Rot(radians(45.0));    \n    d = B(p,vec2(0.001,0.015));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(iTime*20.0));\n    d = abs(length(p)-0.32)-0.005;\n    d = max(-B(p,vec2(1.0,0.15)),d);\n    col = mix(col,stripeTex(p,300.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(-iTime*30.0));\n    d = abs(length(p)-0.22)-0.007;\n    d = max(-B(p+vec2(0.0,0.1),vec2(1.0,0.2)),d);\n    float d2 = abs(length(p)-0.225)-0.002;\n    col = mix(col,stripeTex(p,300.0),S(min(d,d2),0.0));\n    \n    p = prevP;\n    p*=Rot(radians(sin(iTime*1.0)*45.0));\n    p = DF(p,2.0);\n    p = abs(p);\n    p -= vec2(0.24);\n    p*=Rot(radians(45.0));   \n    d = dTri(p,vec2(0.015));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p.y+=1.17;\n    p*=Rot(radians(-iTime*10.0));\n    p = DF(p,32.0);\n    p = abs(p);\n    p -= vec2(0.5);\n    p*=Rot(radians(45.0)); \n    d = B(p,vec2(0.001,0.005));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    return col;\n}\n\nvec3 drawHUD(vec2 p, vec3 col){\n    vec2 prevP = p;\n    p.x = abs(p.x);\n    p.x -=0.625;\n    p.x*=-1.0;\n    col = drawHUDItem1(p,col);\n    p = prevP;\n    \n    col = drawHUDItem2(p,col);\n    col = drawHUDItem3(p,col);\n    \n    p*=4.0;\n    p.y-=1.3;\n    col = drawNumbers(p,col);\n    \n    p = prevP;\n    p*=4.0;\n    p.y+=1.15;\n    col = drawTokyo(p,col);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n   \n    float rz = -7.0;\n    float rotYZ = -10.0;\n    float rdY = -1.0;\n    #if USE_MOUSE != 1\n    float endFrame = 30.0;\n    float scene = mod(iTime,endFrame);\n    if(scene>10.0 && scene<20.0){\n        rz = -6.0;\n        rotYZ = -50.0;\n        rdY = -3.0;\n    } else if(scene>=20.0){\n        rdY = -3.0;\n        \n        float diff = endFrame-20.0;\n        float now = endFrame-scene;\n        rdY+=((diff-now)/diff)*2.0;\n    }\n    #endif\n    \n    vec3 ro = vec3(0, 0, rz);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(rotYZ));\n    ro.xz *= Rot(-iTime*.3+1.0);\n    #endif\n   \n    vec3 rd = R(uv, ro, vec3(0,rdY,0), 0.5);\n    vec2 d = RayMarch(ro, rd, 1.);\n    vec3 col = vec3(0.0);\n    col = bg(uv,col);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n       \n        int mat = int(d.y);\n        if(mat == MATERIAL_TOWER0){\n            col = diffuseMaterial(n,vec3(1.0,0.0,0.0));\n        } else if(mat == MATERIAL_FLOOR) {\n            col = diffuseMaterial(n,floorTex(p));\n        } else if(mat == MATERIAL_BUILDINGS) {\n            col = diffuseMaterial(n,vec3(0.5));\n        }\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );\n    \n    float dt = dot(uv, vec2(12.9898, 78.233));\n    float noise = fract(sin(dt) * 43758.5453 + iTime*10.0);\n    vec3 grain = vec3(noise) * (1.0 - col);\n    col+=grain*0.15;\n    \n    // HUD\n    col = drawHUD(uv,col);\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}