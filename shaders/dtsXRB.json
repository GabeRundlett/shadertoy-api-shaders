{
    "Shader": {
        "info": {
            "date": "1675005351",
            "description": "[url]https://twitter.com/zozuar/status/1618281672008675330[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dtsXRB",
            "likes": 5,
            "name": "Fuzzy Fractal Fern Fork",
            "published": 3,
            "tags": [
                "short",
                "fractale",
                "golf",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "drliquidglitch",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "// Remix of FabriceNeyret2's Fractale Fern\n\n\nvoid mainImage( out vec4 o, vec2 u )\n{\n    float k = fract(iTime*.5), i=0., y = i, f;\n    vec2  R = iResolution.xy;\n          u.x += sin(iTime*u.y*0.01)*0.1;\n          u.y += cos(iTime*u.x*0.01)*R.x*sin(iTime*0.1)*0.01;\n    vec2  p = ( u+u - R ) / R.y / exp(k+2.);                // normalization & zoom\n          \n    for(o *= i ; i++ < 6. && y < .5; p -= round(p) )        // fractal loop ( try without y<.5 ;-) )\n        o += smoothstep( f = fwidth(p.y), -f , p.y+.26 )    // antialias outer spiral arm\n           * smoothstep( 0., min(.1,f+f) , .5 - abs(p.y) ), // antialias inner spiral arm\n        p = vec2( y = atan(p.x,p.y)/1.05 + k + (2.0*sin(iTime)),          // spiral transform\n                  y = log(length(p)*2.7) - k/6.28 + y/6. );\n     o.r += u.x/R.x*.02;\n     o.g += u.y/R.y;\n     o.b += sin(iTime*0.1);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}