{
    "Shader": {
        "info": {
            "date": "1645134143",
            "description": "Animation of Mandelbrot's spacefilling \"snowflake sweep\" curve filling the koch snowflake. I used to draw this one for for hours on paper back in high school, now I got a shader doing it for me...",
            "flags": 0,
            "hasliked": 0,
            "id": "ssXBRX",
            "likes": 13,
            "name": "snowflake sweep",
            "published": 3,
            "tags": [
                "fractal",
                "animation",
                "spacefillingcurve",
                "kochsnowflake"
            ],
            "usePreview": 0,
            "username": "peabrainiac",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "const float PI = 2.0*acos(0.0);\nconst float SQRT3 = sqrt(3.0);\nconst mat2 ROT1 = mat2(cos(PI/1.5),sin(PI/1.5),-sin(PI/1.5),cos(PI/1.5));\nconst mat2 ROT2 = mat2(cos(PI/6.0),sin(PI/6.0),-sin(PI/6.0),cos(PI/6.0));\n\nfloat fractal(vec2 x, float param);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord-iResolution.xy/2.0)/length(iResolution);\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float a = mod((iTime/3.0),1.0);\n    mat2 rot = pow(SQRT3,-a)*mat2(cos(a*PI/6.0),-sin(a*PI/6.0),sin(a*PI/6.0),cos(a*PI/6.0));\n    \n    float temp = fractal((0.7+0.2*sin(iTime/2.0))*rot*uv+vec2(0,0.5/SQRT3),(a-0.25*a*a)/0.75);\n    temp = mod((iTime/3.0),2.0)<1.0?temp:1.0-temp;\n\n    fragColor = vec4(temp<0.0?col:vec3(0.15+0.2*temp),1.0);\n}\n\nfloat fractal(vec2 x, float param){\n    if (x.y<-0.0||x.y/(0.25*SQRT3)+abs(x.x)*4.0/3.0>2.0){\n        return -1.0;\n    }\n    float t = 1.0;\n    for (int i=0;i<6;i++){\n        if (x.y/(0.25*SQRT3)+abs(x.x)*4.0<2.0){\n            if (x.y>1.0/SQRT3){\n                x = x*3.0-vec2(0.0,SQRT3);\n            }else if(x.x+x.y/SQRT3<-1.0/6.0){\n                x = x*3.0+vec2(1.0,0.0);\n            }else if(-x.x+x.y/SQRT3<-1.0/6.0){\n                x = ROT1*ROT1*(x*3.0-vec2(1.0,0.0))+vec2(-0.25,0.25*SQRT3);\n                t = 1.0-t;\n            }else if(x.x<1.0/6.0&&x.x+min(x.y,1.0/SQRT3-x.y)*SQRT3>1.0/6.0){\n                x = mat2(1.5,0.5*SQRT3,-0.5*SQRT3,1.5)*(x-vec2(0.0,0.5/SQRT3))+vec2(0.0,0.5/SQRT3);\n                t = 1.0-t;\n            }else{\n                if (x.x<1.0/6.0){\n                    if (x.y>0.5/SQRT3){\n                        x = ROT1*ROT1*(x-vec2(0.0,0.5/SQRT3))+vec2(0.0,0.5/SQRT3);\n                    }else{\n                        x = ROT1*(x-vec2(0.0,0.5/SQRT3))+vec2(0.0,0.5/SQRT3);\n                        t = 1.0-t;\n                    }\n                }\n                x = mat2(0.0,SQRT3,-SQRT3,0.0)*(x-vec2(0.0,0.5/SQRT3))+vec2(0.0,0.5/SQRT3);\n                t = 1.0-t;\n            }\n        }else{\n            if (x.x<0.0){\n                x = ROT1*ROT2*(x+vec2(0.5,0.0))*SQRT3+vec2(0.0,0.5*SQRT3);\n            }else{\n                x = ROT2*ROT2*ROT1*ROT2*(x-vec2(0.5,0.0))*SQRT3+vec2(0.0,0.5*SQRT3);\n            }\n            if (x.y/(0.25*SQRT3)+abs(x.x)*4.0>2.0){\n                if (x.x<0.0){\n                    x = ROT1*ROT2*(x+vec2(0.5,0.0))*SQRT3+vec2(0.0,0.5*SQRT3);\n                }else{\n                    x = ROT2*ROT2*ROT1*ROT2*(x-vec2(0.5,0.0))*SQRT3+vec2(0.0,0.5*SQRT3);\n                }\n            }\n        }\n    }\n    x = (param*mat2(1.0,0.0,0.0,1.0)+(1.0-param)*mat2(0.5,-0.5*SQRT3,0.5/SQRT3,1.5))*(x-vec2(0.5,0.0))+vec2(0.5,0.0);\n    return ((x.y>1.0/SQRT3||x.x+x.y*SQRT3<1.0/6.0||x.y/(0.25*SQRT3)+abs(x.x)*4.0>2.0)?t:1.0-t);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}