{
    "Shader": {
        "info": {
            "date": "1572817860",
            "description": ":)",
            "flags": 32,
            "hasliked": 0,
            "id": "wdtXWS",
            "likes": 3,
            "name": "Full Raytracing.",
            "published": 3,
            "tags": [
                "raytracing",
                "reflection",
                "triangles",
                "refraction",
                "light",
                "sphere",
                "color",
                "glass",
                "metal",
                "material",
                "beer",
                "absortion",
                "fresnell",
                "beerlambert"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor=texture(iChannel0,uv);\n    fragColor.rgb=clamp(pow(fragColor.rgb/fragColor.w,vec3(1./gamma)),0.,1.);\n    fragColor.w=1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int SAMPLES=28; //let this be as high as your computer can handle (48)\nconst int BOUNCES=8;\n\n\n\nconst float n_air=1.0002;\n#define AA\n#define RAND 0\n#define REFINE\n#define SHAPECOLORS\n#define WALLS\n#define WHITE\n\n//air beer lambda\n#ifdef WHITE\nvec3 air_absorb=vec3(0.);\n#else\nvec3 air_absorb=vec3(0.1);\n#endif\n//exp(-d*air_absorb)\n\nstruct sph{\n    vec3 c;\n\tfloat r;\n    float n;\n    vec3 inte;\n    vec3 absorb;\n    float ref;\n};\nstruct ray{\n    vec3 ro,rd;\n    int which,inside;\n};\n\nray[1<<BOUNCES] list;\nfloat[1<<BOUNCES] weights;\n\nstruct triangle{\n    vec3 p0,p1,p2,bounce,inte;\n};\nconst float pi=4.*atan(1.);\n\n#ifdef WALLS\nconst int N=10;\n#else\nconst int N=6;\n#endif\n\nconst int N_l=6;\nconst vec3 p[9]=vec3[9](\n    vec3(0,1,-1),\t\t//0\n    vec3(1,0,0),\t\t//1\n    vec3(-1,0,0),\t\t//2\n    vec3(0,1,1),\t\t//3\n    \n    vec3(10,-1,10),\t\t//4\n    vec3(10,-1,-10),\t//5\n    vec3(-10,-1,-10),\t//6\n    vec3(-10,-1,10),\t//7\n    vec3(0,10,0)\t\t//8\n);\n//calcular area que ocupa las lamparas desde el punto de vista de cada punto\ntriangle triangles[N]=triangle[N](\n    #ifdef SHAPECOLORS\n\ttriangle(p[0],p[1],p[2],vec3(.2,.5,1),vec3(0)),\n    triangle(p[1],p[3],p[0],vec3(.5,.2,1),vec3(0)),\n    triangle(p[2],p[3],p[0],vec3(.2,1,.5),vec3(0)),\n    triangle(p[1],p[2],p[3],vec3(1,.5,.2),vec3(0)),\n    #else\n    triangle(p[0],p[1],p[2],vec3(1),vec3(0)),\n    triangle(p[1],p[3],p[0],vec3(1),vec3(0)),\n    triangle(p[2],p[3],p[0],vec3(1),vec3(0)),\n    triangle(p[1],p[2],p[3],vec3(1),vec3(0)),\n    #endif\n    \n    triangle(p[4],p[5],p[6],vec3(1),vec3(0)),\n    triangle(p[4],p[6],p[7],vec3(1),vec3(0))\n    #ifdef WALLS\n    ,\n    triangle(p[4],p[5],p[8],vec3(1,.2,.2),vec3(0)),\n    triangle(p[4],p[7],p[8],vec3(.2,1,.2),vec3(0)),\n    triangle(p[6],p[7],p[8],vec3(.2,.2,1),vec3(0)),\n    triangle(p[6],p[5],p[8],vec3(1,0.0,1),vec3(0))\n    #endif\n);\nsph spheres[N_l]=sph[N_l](\n\n    sph(vec3(0,2.5,0),0.5,1.,vec3(10,0,0)/1.5,vec3(0),1.),\n    sph(vec3(4,3.5,1),0.9,1.,vec3(0,6,0)/1.5,vec3(0),1.),\n    sph(vec3(2,2.5,4),0.3,1.,vec3(0,0,17)/1.5,vec3(0),1.),\n\n    sph(vec3(0,0.5,2),0.9,1.5,vec3(0,0,0),vec3(0),0.),\n    sph(vec3(0,0.5,-2),0.9,1.5,vec3(0,0,0),vec3(0,1,0),0.),\n    sph(vec3(-2,0.,-4),0.9,1.5,vec3(0,0,0),vec3(0,0,0),1.)\n);\nfloat sphere(ray r, sph s, float n){\n\tvec3 rc = r.ro-s.c;\n\tfloat c = dot(rc, rc) - (s.r*s.r);\n\tfloat b = dot(r.rd, rc);\n\tfloat d = b*b - c;\n\tfloat t = -b - n*sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n\treturn max(0.,mix(-1., t, st));\n}\nfloat intersect(ray r,triangle t,out vec3 normal){\n\tvec3 e0 = t.p1 - t.p0;\n\tvec3 e1 = t.p2 - t.p0;\n\n\tvec3 n = cross(e0, e1);\n\tfloat d2 = dot(n, n);\n\tvec3 m = n * (1.0 / d2);\n\tn = m * sqrt(d2);\n\tnormal=n*sign(-dot(r.rd,n));\n    \n\tfloat dot_nd = dot(n, r.rd);\n\tfloat d = dot(t.p0 - r.ro, n) / dot_nd;\n\tvec3 p = r.ro + d * r.rd;\n            \n\tvec3 b;\n\tb.y = dot(cross(p - t.p2, e1), m);\n\tb.z = dot(cross(e0, p - t.p0), m);\n\tb.x = 1.0 - (b.y + b.z);\n    if(b.x >= 0.0 && b.y >= 0.0 && b.z >= 0.0)return max(0.,d);\n    return 0.;\n}\n\nvec3 back(vec3 rd){\n    return texture(iChannel0,rd).rgb;\n}\nconst uint k = 1103515245U;\nvec3 hash33( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\nvec3 Randn(uvec3 seed) {\n    vec2 uv = hash33(seed).xz;\n    float theta = pi * uv.x;\n    float psi = acos(2.0 * uv.y - 1.0);\n    float x = cos(theta) * sin(psi);\n    float y = sin(theta) * sin(psi);\n    float z = cos(psi);\n    return vec3(x, y, z);\n}\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat fresnel(float n1, float n2, vec3 normal, vec3 incident,float ref){\n        float r0 = (n1-n2) / (n1+n2);\n        r0 *= r0;\n        float cosX = -dot(normal, incident);\n        if (n1 > n2){\n            float n = n1/n2;\n            float sinT2 = n*n*(1.0-cosX*cosX);\n            if (sinT2 > 1.0)\n                return 1.0;\n            cosX = sqrt(1.0-sinT2);\n        }\n        float x = 1.0-cosX;\n        float ret = r0+(1.0-r0)*x*x*x*x*x;\n        ret = (ref + (1.0-ref) * ret);\n        return ret;\n}\nbool next(ray r,out ray r_out,vec3 rand,float randf,out float d,out vec3 l,out vec3 ab){\n    float di;\n    vec3 n;\n    vec3 normal;\n    bool tsph=false;\n    int spn;\n\td=0.;\n    if(r.inside==-1){\n    \tfor(int i=0;i<N;i++){\n\t\t\tif(i==r.which)continue;\n\t\t\tdi=intersect(r,triangles[i],n);\n\t\t\tif((di!=0.&&di<d)||d==0.){\n\t\t\t\td=di;\n    \t        normal=n;\n\t\t\t\tspn=i;\n    \t\t}\n\t\t}\n    \tfor(int i=0;i<N_l;i++){\n\t\t\tdi=sphere(r,spheres[i],1.);\n\t\t\tif((di!=0.&&di<d)||d==0.){\n\t\t\t\td=di;\n\t\t\t\tspn=i;\n    \t        tsph=true;\n    \t\t}\n\t\t}\n    \tl=vec3(0);\n    \tif(d==0.)return true;\n    \t\n    \tif(tsph){\n    \t    l=spheres[spn].inte;\n            vec3 surf=r.ro+r.rd*d;\n        \n        \tr_out.ro=surf;\n        \tnormal=(surf-spheres[spn].c)/spheres[spn].r;\n        \tfloat prob=fresnel(n_air,spheres[spn].n,normal,r.rd,spheres[spn].ref);\n        \tif(randf<prob){\n        \t\tr_out.rd=normalize(reflect(r.rd,normal));\n        \t    r_out.inside=-1;\n                r_out.which=-1;\n        \t}else{\n        \t\tr_out.rd=normalize(refract(r.rd,normal,n_air/spheres[spn].n));\n        \t\tr_out.inside=spn;\n                r_out.which=-1;\n        \t}\n    \t}else{\n    \t\tl=triangles[spn].inte;\n    \t\tr_out.ro=r.ro+d*r.rd;\n   \t\n    \t\tif(dot(normal,rand)<0.)rand=-rand;\n    \t\n    \t\tr_out.rd=rand;\n            r_out.inside=-1;\n    \t\tr_out.which=spn;\n    \t}\n    }else{\n    \tfloat d=sphere(r,spheres[r.inside],-1.);\n        vec3 surf=r.ro+r.rd*d;\n        ab*=exp(-d*spheres[r.inside].absorb);\n        \n        r_out.ro=surf;\n        normal=(spheres[r.inside].c-surf)/spheres[r.inside].r;\n        float prob=fresnel(spheres[r.inside].n,n_air,normal,r.rd,spheres[r.inside].ref);\n        if(randf<prob){\n        \tr_out.rd=normalize(reflect(r.rd,normal));\n            r_out.inside=r.inside;\n        }else{\n        \tr_out.rd=normalize(refract(r.rd,normal,spheres[r.inside].n/n_air));\n        \tr_out.inside=-1;\n        }\n\t\tr_out.which=-1;\n    }\n    return false;\n}\nvec3 render(ray r,uvec3 uv,float pix){\n  \tuv.z*=uint(SAMPLES);\n    ray\tr_out;\n    ray k=r;\n    vec3 l;\n    float u=1.;\n    vec3 col=vec3(0);\n    vec3 rand=vec3(0);\n    float lastdist;\n    float randf;\n    vec3 ab;\n    for(int s=0;s<SAMPLES;s++){\n        ab=vec3(1.);\n        r=k;\n        #ifdef AA\n        r.rd+=(hash33(uv+uvec3(s*71,0,s))*2.-1.)*pix;\n    \tr.rd=normalize(r.rd);\n        #endif\n\t\trand=Randn(uv+uvec3(abs(rand)*4231.342));\n        vec3 c;\n        randf=hash33(uv+uvec3(0,abs(randf)*442.32,s)).x;\n        if(next(r,r_out,rand,randf,lastdist,c,ab)){\n        \t\tcol+=pow(back(r.rd),vec3(gamma));\n        }else{\n            col+=c;\n            vec3 bouncel;\n            //if(r.inside==-1)ab*=exp(-air_absorb*lastdist);\n            for(int i=0;i<BOUNCES;i++){\n                randf=hash33(uv+uvec3(s*71,abs(randf)*442.32,s)).x;\n            \trand=Randn(uv+uvec3(abs(rand)*4323.321));\n                \n                if(r.inside==-1)ab*=exp(-air_absorb*lastdist);\n                r=r_out;\n                \n                if(r.which!=-1){\n                    bouncel=triangles[r.which].bounce;\n                    if(dot(bouncel,bouncel)==0.)break;\n                    ab*=bouncel;\n                }\n                \n                \n                if(next(r,r_out,rand,randf,lastdist,c,ab))break;\n                \n                if(dot(c,c)!=0.){\n                \tcol+=pow(c*ab,vec3(gamma));\n                }\n            }\n        }\n    }\n\treturn col/float(SAMPLES);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //ray origin and dir\n    vec3 uv = vec3((fragCoord*2.-iResolution.xy)/iResolution.y,-3);\n    fragColor.w=texture(iChannel1,vec2(.5,.5)).w+1.;\n    vec2 m=(iMouse.xy*2.-iResolution.xy)/iResolution.xy;\n    #ifdef REFINE\n    vec3 backpixel=texture(iChannel1,fragCoord/iResolution.xy).rgb;\n    if(iMouse.x==0.&&iMouse.y==0.)m=vec2(.25,.25);\n    if(iMouse.z>0.){\n        backpixel=vec3(0);\n        fragColor.w=1.;\n    }\n    #else\n    if(iMouse.z<=0.)m=vec2(-iTime/3.,0.05);\n    #endif\n    m*=vec2(1,0.5)*pi;\n    \n    #ifdef eyes\n    vec3 ro=vec3(-0.2,0,-4);\n    if(uv.x<0.)ro.x=0.2;\n    uv.xy+=ro.xy*5.;\n    #else\n    vec3 ro=vec3(0,0,-4);\n    #endif\n    \n    \n    ro.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    ro.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    uv.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    uv.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    \n    vec3 rd=normalize(uv-ro);\n   \t\n    ray r=ray(ro,rd,-1,-1);\n    uvec3 seed=uvec3(fragCoord,iFrame);\n    \n    \n    #ifdef REFINE\n\n    fragColor.xyz=render(r,seed,1./iResolution.y)+backpixel;\n    #else\n    fragColor.w=1.;\n    fragColor.xyz=mix(\n        render(r,seed,1./iResolution.y),\n        texture(iChannel1,fragCoord/iResolution.xy).xyz,\n        0.6\n    );\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float gamma=2.2;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}