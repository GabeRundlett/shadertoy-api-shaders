{
    "Shader": {
        "info": {
            "date": "1562293784",
            "description": "can u figure out... the SPECIAL COLOR? (perhaps SIMON'S FAVORITE COLOR?) i bet you CAN!!",
            "flags": 32,
            "hasliked": 0,
            "id": "tlsXR4",
            "likes": 1,
            "name": "Simon Doesn't Say",
            "published": 3,
            "tags": [
                "color",
                "hair",
                "accident",
                "notagame"
            ],
            "usePreview": 0,
            "username": "1j01",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // some sort of hair effect\n    /*vec4 noiseVal = texture(iChannel1, fragCoord / iResolution.xy);\n    vec2 xyFromCenter = fragCoord.xy / iResolution.xy - 0.5;\n    vec2 p = xyFromCenter * (1.0 + ((noiseVal.x - 1.0) / 2.0) * 0.06) + 0.5;\n    fragColor = texture(iChannel0, p);*/\n\n    // some sort of hair effect\n    /*vec2 hairCenter = vec2(0.5, 0.5);\n    vec2 xyFromCenter = fragCoord.xy / iResolution.xy - hairCenter;\n    float angle = atan2(xyFromCenter.y, xyFromCenter.x);\n    float dist = length(xyFromCenter);\n    vec4 noiseVal = texture(iChannel1, vec2(angle / PI * 5.0, floor(dist)));\n    vec2 p = xyFromCenter * (1.0 + ((noiseVal.x - 1.0) / 2.0) * 0.06) + hairCenter;\n    fragColor = texture(iChannel0, p);*/\n\n    // some sort of...\n    vec2 hairCenter = vec2(0.5, 0.5);\n    vec2 xyFromCenter = fragCoord.xy / iResolution.xy - hairCenter;\n    float angle = atan2(xyFromCenter.y, xyFromCenter.x);\n    float dist = length(xyFromCenter);\n    //float hairLength = 0.1 * dist;\n    float hairDivisions = 50.0 / pow(dist, 122.5);\n    vec4 noiseVal = texture(iChannel1, vec2(angle / PI * 5.0, floor(dist))); // dont' thinhfkgnldfkgndfg\n    vec2 hairRootPos =\n        vec2(cos(angle), sin(angle)) *\n        floor(length(xyFromCenter) * hairDivisions)/ hairDivisions * \n        (1.0 + noiseVal.xy)\n        +\n        hairCenter;\n    vec2 p = hairRootPos;//xyFromCenter * (1.0 + ((noiseVal.x - 1.0) / 2.0) * 0.06) + hairCenter;\n    fragColor = texture(iChannel0, p);\n    \n    vec3 hsv = rgb2hsv(fragColor.xyz);\n    hsv.x = angle / PI / 2.0;\n    hsv.y = 1.0 * dist * 2.0;\n    fragColor = vec4(hsv2rgb(hsv), 1.0);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fadeTime 50.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(distance(iMouse.xy, fragCoord) < 10.0 && iMouse.z > 0.0) * 1.4;\n    fragColor = vec4(\n        distance(iMouse.xy, fragCoord) < 100.0 + 10.0 * sin(iTime) &&\n        iMouse.z > 0.0 ||\n        iFrame == 0 && distance(vec2(0.5, 0.5), fragCoord / iResolution.xy) > 0.5\n    ) * 100.4;\n    fragColor += texture(iChannel0, fragCoord.xy / iResolution.xy) * 1.;\n    fragColor -= texture(iChannel0, fragCoord.xy / iResolution.xy * 0.9) / fadeTime;\n    /*fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) * 0.5) + 0.5)\n    )*(1.0/fadeTime);*/\n    fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) * 0.9) + 0.5)\n    )*(1.0/fadeTime);\n    fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) / 0.9) + 0.5)\n    )*(1.0/fadeTime);\n    /*fragColor -= texture(iChannel0,\n    \t(((fragCoord.xy / iResolution.xy - 0.5) * 1.9) + 0.5)\n    )*(1.0/fadeTime);*/\n    /*vec2 xyFromCenter = fragCoord.xy / iResolution.xy - 0.5;\n    float angle = atan2(xyFromCenter.y, xyFromCenter.x);\n    angle += 0.1 * iTime;// * sign(xyFromCenter.x);\n    vec2 rotatedFromCenter = vec2(sin(angle), cos(angle)) * length(xyFromCenter);\n    fragColor -= texture(iChannel0,\n    \t((rotatedFromCenter) + 0.5)\n    ) / 20.0;*/\n    //fragColor = clamp(fragColor, 0.0, 1.0);\n    //fragColor = clamp(fragColor, -0.3, 1.0);\n    fragColor = clamp(fragColor, -0.1, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nconst float PI = 3.1415;\n\nfloat atan2(in float y, in float x)\n{\n    return x == 0.0 ? sign(y)*PI/2.0 : atan(y, x);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}