{
    "Shader": {
        "info": {
            "date": "1621822928",
            "description": "sad face",
            "flags": 0,
            "hasliked": 0,
            "id": "stsGR7",
            "likes": 3,
            "name": "sad face",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1 ----jorgeFloresP---23/may/2021\n// referencia \n//sad face\n\n////-------------------\n/// IQ funciones....librerias\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.5),b,d)\n#define Sv(d,b,v) smoothstep(antialiasing(v),b,d)\n\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  return colOut;\n}\n\n\nconst vec3 colNegro= vec3(0.0);\nconst vec3 colBlanco= vec3(1.0);\nconst vec3 colRojo= vec3(1.0,0.0,0.0);\nconst vec3 col0= vec3(0.49,0.93,0.29);\nconst vec3 col1= vec3(1.00,0.67,0.31);\nconst vec3 col2= vec3(1.00,0.72,0.67);\nconst vec3 col3= vec3(0.47,0.54,0.00);\nconst vec3 col4= vec3(0.71,0.65,1.00);\nconst vec3 col5= vec3(0.49,0.93,0.29);\nconst vec3 col6= vec3(1.00,0.69,0.34);\nconst vec3 col7= vec3(1.00,0.70,0.47);\nconst vec3 col8= vec3(0.47,0.53,0.00);\nconst vec3 col9= vec3(0.73,0.61,0.15);\nconst vec3 col10= vec3(1.00,0.67,0.31);\nconst vec3 col11= vec3(1.00,0.1,0.1);\nconst vec3 col12= vec3(0.2,0.82,0.42);\n\nfloat opU(float d1, float d2) {return min(d1, d2); }\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n//Uneven Capsule - exact   (https://www.shadertoy.com/view/4lcBWn)\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n//***------------****-----------****------------******-------\nvec3 Rostro2d(in vec2 pp, vec3 col) \n{\n  vec2 p=pp;\n   float r1=0.6;float r2=0.8;float h=0.9; \n  float sdcabeza= sdUnevenCapsule( p, r1,  r2,  h );\n \n  \n  r1=0.15;r2=0.15;h=0.2;\n  float sdOjoIzq= sdUnevenCapsule( p-vec2(-0.25,0.7), r1,  r2,  h );\n  float sdOjoDer= sdUnevenCapsule( p-vec2(0.25,0.7), r1,  r2,  h );\n  \n  float sdOjoIzqR= sdUnevenCapsule( p-vec2(-0.25,0.7), r1,  r2,  h );\n  float sdOjoDerR= sdUnevenCapsule( p-vec2(0.25,0.7), r1,  r2,  h );\n  \n  \n  r1=0.05;r2=0.05;h=0.1;\n  float sdPupilaIzq= sdUnevenCapsule( p-vec2(-0.25,0.7), r1,  r2,  h );\n  float sdPupilaDer= sdUnevenCapsule( p-vec2(0.25,0.7), r1,  r2,  h );\n  \n  float sube=0.1*sin(iTime);\n  float sParpadoOjoIzq=sdOrientedBox(p,vec2(-0.3,0.8+sube), vec2(-0.2,0.4), 0.5 );\n  float sParpadoOjoDer=sdOrientedBox(p,vec2(0.3,0.85+sube), vec2(0.2,0.4), 0.5 );\n  \n  //parpado\n  sdOjoIzq =differenceSDF(sdOjoIzq,sParpadoOjoIzq);\n  sdOjoDer =differenceSDF(sdOjoDer,sParpadoOjoDer);\n  col=ponerBorde(col8,col,sdcabeza);\n  \n  //ojo  real\n  col=ponerBorde(colBlanco,col,sdOjoIzqR);\n  col=ponerBorde(colBlanco,col,sdOjoDerR);\n  //parpado\n  col=ponerBorde(col1,col,sdOjoIzq);\n  col=ponerBorde(col1,col,sdOjoDer);\n  \n  sdPupilaDer= differenceSDF(sdPupilaDer,  sdOjoDer);\n  sdPupilaIzq= differenceSDF(sdPupilaIzq,  sdOjoIzq);\n  \n  col=ponerBorde(colNegro,col,sdPupilaIzq);\n  col=ponerBorde(colNegro,col,sdPupilaDer);\n  \n  \n  //nariz\n  r1=0.12; r2=0.05; h=0.2; \n  float  snariz= sdUnevenCapsule(  p-vec2(0.0,0.2),  r1,  r2,  h );\n  col=ponerBorde(colRojo,col,snariz);\n  \n  \n  //Boca\n  r1=0.25; r2=0.05; h=0.3; \n  \n  float  sboca= sdCircle( p-vec2(0.0,0.0+sube), 0.3 );\n  float  sbocab= sdBox(p-vec2(0.0,0.2), vec2(0.32,0.3) );\n  sboca= differenceSDF(sboca,  sbocab);\n  \n  //dientes\n  float r1t=0.006; float r2t=0.05; float he=0.1;\n  float  sdienteA= sdTrapezoid( p-vec2(-0.1,-0.2), r1t, r2t, he );\n  sboca= differenceSDF(sboca,  sdienteA);\n  \n  col=ponerBorde(colBlanco,col,sdienteA);\n  col=ponerBorde(colNegro,col,sboca);\n  \n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec2 p=uv*1.5;\n    vec3 col=colBlanco;\n     \n    col= Rostro2d(p-vec2(0.0,-0.3), col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}