{
    "Shader": {
        "info": {
            "date": "1457671642",
            "description": "Paniq shared this technique. Drag Mouse. Green = true vector, Blue = approximated vector.  The line looks completely aqua to me except for a very slight tinge of blue on one side and green on the other.  Wow.  Useful for converting an angle to a vector.",
            "flags": 0,
            "hasliked": 0,
            "id": "XddSzH",
            "likes": 12,
            "name": "Bhaskara Cos Sin Approximation",
            "published": 3,
            "tags": [
                "2d",
                "sin",
                "approximation",
                "cos"
            ],
            "usePreview": 0,
            "username": "demofox",
            "viewed": 1634
        },
        "renderpass": [
            {
                "code": "#define AA_AMOUNT 2.0 / iResolution.x\n\nconst float c_pi = 3.14159265359;\nconst float c_twoPi = 2.0 * c_pi;\n\nconst float c_gamma = 2.2;\n\nconst float c_vectorLength = 0.25;\nconst float c_lineWidth = 0.005;\n\n//============================================================\n// Signed Distance Functions taken/adapted/inspired by from:\n// https://iquilezles.org/articles/distfunctions\nfloat UDFatLineSegment (in vec2 coords, in vec2 A, in vec2 B, in float height)\n{    \n    // calculate x and y axis of box\n    vec2 xAxis = normalize(B-A);\n    vec2 yAxis = vec2(xAxis.y, -xAxis.x);\n    float width = length(B-A);\n    \n\t// make coords relative to A\n    coords -= A;\n    \n    vec2 relCoords;\n    relCoords.x = dot(coords, xAxis);\n    relCoords.y = dot(coords, yAxis);\n    \n    // calculate closest point\n    vec2 closestPoint;\n    closestPoint.x = clamp(relCoords.x, 0.0, width);\n    closestPoint.y = clamp(relCoords.y, -height * 0.5, height * 0.5);\n    \n    return length(relCoords - closestPoint);\n}\n\n//============================================================\n// x is 0..1 corresponding to 0..360 degrees\n// https://en.wikipedia.org/wiki/Bhaskara_I%27s_sine_approximation_formula\n// https://gist.github.com/paniq/375fdbd76656b4709192\nvec2 CosSin(float x) {\n    vec2 si = fract(vec2(0.5,1.0) - x*2.0)*2.0 - 1.0;\n   \tvec2 so = sign(0.5-fract(vec2(0.25,0.5) - x));    \n    return (20.0 / (si*si + 4.0) - 4.0) * so;\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // set up our camera\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = (fragCoord / iResolution.xy) - vec2(0.5);\n    uv.x *= aspectRatio;\n    uv *= 0.5;\n    \n    // calculate the angle we are aproximating\n    float angle = 0.0;\n    if (iMouse.x > 0.0)\n    {\n    \tvec2 mouseuv = (iMouse.xy / iResolution.xy) - vec2(0.5);\n    \tmouseuv.x *= aspectRatio;     \n        angle = mod(atan(mouseuv.y, mouseuv.x)+c_twoPi, c_twoPi);\n    }    \n    \n    // background color\n    vec3 pixelColor = vec3(0.0);  \n    \n\t// the approximated vector in blue\n    float dist = UDFatLineSegment(uv, vec2(0.0), CosSin(angle / c_twoPi) * c_vectorLength, c_lineWidth);\n    pixelColor.b = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    \n    // the true vector in green\n    dist = UDFatLineSegment(uv, vec2(0.0), vec2(cos(angle), sin(angle)) * c_vectorLength, c_lineWidth);\n    pixelColor.g = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);     \n    \n    // gamma correct colors\n\tpixelColor = pow(pixelColor, vec3(1.0/c_gamma));\n    fragColor = vec4(pixelColor, 1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}