{
    "Shader": {
        "info": {
            "date": "1697914547",
            "description": "tile animation\n\nArt shader.Cineshader support\n[url] https://cineshader.com/view/cstBDs",
            "flags": 0,
            "hasliked": 0,
            "id": "cstBDs",
            "likes": 8,
            "name": "tile animation",
            "published": 3,
            "tags": [
                "pattern",
                "tile",
                "cineshader",
                "tileanimation"
            ],
            "usePreview": 0,
            "username": "kojdj0811",
            "viewed": 635
        },
        "renderpass": [
            {
                "code": "#define tileScale 4.0\n#define localOrigin vec2(0.5)\n#define worldOrigin vec2(0.0)\n\n#define random(p)        fract(sin(dot(p, vec2(123.456, 456.789))) * 789123.123)\n#define pingpong(x)      fract( mod(x,2.0) < 1.0 ? x : -(x) )\n#define dot2(v)          return dot(v,v);\n\n// https://easings.net/\n#define easeOutExpo(x) ( x == 1.0 ? 1.0 : 1.0 - exp2(-(x)/0.1) )\nfloat easeOutBack(float x) {\n    float c1 = 1.70158 * 5.0;\n    float c3 = c1 + 1.1;\n    float c4 = abs(x - 1.0);\n    float c5 = x - 1.0;\n\n    return 1.0 + c3 * c5*c5*c5 + c1 * c4*c4;\n}\n\nfloat easeInOutCirc(float x) {\n    float c1 = 2.0 * x;\n    float c2 = abs(-2.0 * x + 2.0);\n\n    return x < 0.5\n        ? (1.0 - sqrt(abs(1.0 - c1*c1))) / 2.0\n        : (sqrt(abs(1.0 - c2*c2)) + 1.0) / 2.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n\tuv = tileScale*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n\n    // reference for other projects\n    vec2 scaledUv = uv * tileScale;\n    vec2 tileUv = fract(scaledUv);\n    vec2 tileIndexXY = floor(scaledUv);\n    float tileIdex = tileIndexXY.x + tileIndexXY.y*tileScale;\n    float distToTile = distance(worldOrigin, tileIndexXY) / tileScale;\n\n    float checkPattern = (mod(tileIndexXY.x, 2.0) == 0.0 ? 1.0 : 0.0) == (mod(tileIndexXY.y, 2.0) <= 0.0 ? 1.0 : 0.0) ? 1.0 : 0.0;\n\n    float beat = 1.35;\n    float animationSpeed_circleScale = (floor(iTime*beat) + easeOutBack(fract(iTime*beat))) * 0.8;\n\n    float randomViaTileXYandDistToTile = mix(random(tileIndexXY), distToTile, 0.3);\n    float circleRadius = 0.5 * easeOutExpo(pingpong(animationSpeed_circleScale + (randomViaTileXYandDistToTile*2.0-1.0)));\n    circleRadius = pow(circleRadius, 1.1);\n\n    float circle = mix(0.0, 1.0, smoothstep(tileScale*7.5/iResolution.y, 0.0, distance(tileUv, localOrigin) - circleRadius));\n\n    vec4 normal = vec4(vec3(circle), 1.0);\n    vec4 check = vec4( mix( checkPattern, 1.0-checkPattern, smoothstep(tileScale*7.5/iResolution.y, 0.0, distance(tileUv, localOrigin)-circleRadius) ) );\n\n\tvec3 col = mix(normal, check, easeInOutCirc(pingpong(iTime*beat*2.0))).xyz;\n    fragColor = vec4(col, 0.2+length(col)*0.05);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}