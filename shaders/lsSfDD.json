{
    "Shader": {
        "info": {
            "date": "1500428839",
            "description": "Only the part of the spectrogram exposed with each new frame is rendered, giving a significant speedup.\nThis does not contain any improvements to the spectrogram itself over [url]https://www.shadertoy.com/view/MdjfzW[/url]",
            "flags": 40,
            "hasliked": 0,
            "id": "lsSfDD",
            "likes": 7,
            "name": "Streaming Spectrogram",
            "published": 3,
            "tags": [
                "sound",
                "spectrogram"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 1022
        },
        "renderpass": [
            {
                "code": "// Passthrough to Buf A\n\nvoid mainImage( out vec4 f, in vec2 d ) { f = texelFetch(iChannel0, ivec2(d), 0); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth(float freq, float freq2, float time) {\n\n    float freq3 = freq2 + 0.25;\n\n    float v = 0.;\n\n    for (float n=1.; n<5.; n+=1.00+0.002) {\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n    }\n    return v;\n}\n\nvec2 mainSound( float time )\n{\n\n    float c = 261.63;\n    \n    vec2 v = vec2(0.);\n    \n    v.x += synth(c*2., c*2./8., time);\n    v.y += synth(c*2., c*2./8., time+1.2);\n\n    v *= max(1.-exp(-time+0.5),0.);\n\n    return vec2(v);\n}\n\n/*******************************/\n/*\nStreaming Spectrogram\nCopyright 2017 Theron Tarigo\n*/\n\nvec2 spectrogram(float windowmax, float time, float freq) {\n    vec2 sum = vec2(0.);\n    float window = windowmax;\n    float samplerate = iSampleRate/6.;\n    for (float trel = -window; trel <= window; trel+=1./samplerate) {\n        // Cosine window\n        float w = (0.5+0.5*cos(trel/window*pi))/samplerate/window;\n        float samp = dot(vec2(1.),mainSound(time+trel));\n        sum += w*vec2(cos(trel*freq*2.*pi),sin(trel*2.*pi))*samp;\n    }\n    return sum;\n}\n\nvoid panImage( out vec4 f, float time, float y ) {\n    float freq = 4000. * y / iResolution.y;\n    f.rgb = 5.*vec3(10.,3.2,1.)*\n    length(spectrogram(0.1*sqrt(freq/4000.), time, freq));\n}\n\nconst float timescale = 1./4.; // Screens per second\n\n//#define FRAMEDEBUGVIS\nvoid mainImage( out vec4 f, in vec2 df )\n{\n    ivec2 d = ivec2(df);\n    vec2 fsf = iResolution.xy;\n    ivec2 fs = ivec2(fsf);\n    int shift = int(fsf.x*timescale*(iTime));\n    int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n    int delta = shift - shiftlast;\n    if ((fs.x-d.x) <= delta) {\n        #ifdef FRAMEDEBUGVIS\n        if (d.y<10) { f = vec4(0,iFrame%2,0,0); return; }\n        #endif\n        float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n        panImage(f, time, df.y);\n    } else {\n        f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth(float freq, float freq2, float time) {\n\n    float freq3 = freq2 + 0.25;\n\n    float v = 0.;\n\n    for (float n=1.; n<5.; n+=1.00+0.002) {\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n    }\n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n\n    float c = 261.63;\n    \n    vec2 v = vec2(0.);\n    \n    v.x += synth(c*2., c*2./8., time);\n    v.y += synth(c*2., c*2./8., time+1.2);\n\n    v *= max(1.-exp(-time+0.5),0.);\n\n    return vec2(v);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}