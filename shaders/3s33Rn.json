{
    "Shader": {
        "info": {
            "date": "1567902231",
            "description": "Yet another Beeple cover... cover...! :D\nI'm also putting my own twist on these now.\n\nThings you might find interesting:\n* The mountains are coming from a warped space and their normals are accurate\n* fractalTreePart6(...)\n\nLet me know what you think :)",
            "flags": 32,
            "hasliked": 0,
            "id": "3s33Rn",
            "likes": 16,
            "name": "BEEPLE COVER: PREMULTIPLY!",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "noise",
                "raymarch",
                "fbm",
                "space",
                "warp",
                "geometry",
                "dragons",
                "beeple",
                "imagine"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 1060
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   Yet another Beeple cover art in Shadertoy: PREMULTIPLY! :D\n   Here's the reference: https://cdna.artstation.com/p/assets/images/images/008/827/996/large/beeple-01-09-18.jpg?1515549977\n   The mountains are actually warped fBms with accurate normals.\n   Also I created fractalTreePart6(...) specifically for this piece :). You might find its patterns interesting in texture work.\n   3D simplex noise is by nikat: https://www.shadertoy.com/view/XsX3zB\n\n   This rendition is covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 midFetch = texture (iChannel0, uv);\n    if ( midFetch.a != 0.0 ) midFetch *= midFetch.a;\n\n    fragColor = midFetch;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/***********************************************************\n\n   Yet another Beeple cover art in Shadertoy: PREMULTIPLY! :D\n   Here's the reference: https://cdna.artstation.com/p/assets/images/images/008/827/996/large/beeple-01-09-18.jpg?1515549977\n   The mountains are actually warped fBms with accurate normals.\n   Also I created fractalTreePart6(...) specifically for this piece :). You might find its patterns interesting in texture work.\n   3D simplex noise is by nikat: https://www.shadertoy.com/view/XsX3zB\n\n   This rendition is covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define M_PI 3.1415926535\n#define M_HPI 1.57079632675\n#define DRAW_DISTANCE 1000.0\n#define ROAD_X 3.0\n#define MOUNTAIN_X 20.0\n\n#define HI_Q\n\n#ifdef HI_Q\n    #define MARCH_SIZE 0.05\n    #define NUM_PARTICLES 100\n#elif defined MED_Q\n    #define MARCH_SIZE 0.275\n    #define NUM_PARTICLES 50\n#else\n    #define MARCH_SIZE 0.5\n    #define NUM_PARTICLES 10\n#endif\n\nfloat blueNoise (vec2 forPos)\n{\n\tfloat noiseVal = texture (iChannel0, forPos * 0.5).r;\n    return noiseVal * 0.5 + 0.5;\n}\n\nfloat whiteNoise(vec3 n) { \n\treturn fract(sin(dot(n, vec3(12.9898, 4.1414, -31.43425))) * 43758.5453);\n}\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat sineHeightField (vec2 xz)\n{\n    return sin(xz.x) + cos (xz.y);\n}\n\nfloat heightFieldfBm (in vec2 uv)\n{\n    float cosA = 0.95533648912;\n    float sinA = 0.29552020666;\n    mat2 rot = mat2 (cosA, -sinA, sinA, cosA);\n    float amp = 0.5;\n    float res = 0.0;\n    for (int i = 0; i < 5; ++i) {\n        res += amp * sineHeightField(uv);\n        uv *= 2.0;\n        amp *= 0.5;\n        uv = rot * uv;\n    }\n    return res;\n}\n\nfloat simplexfBm (in vec3 uvw)\n{\n    float cosA = 0.95533648912;\n    float sinA = 0.29552020666;\n    mat3 rot = mat3 (cosA, 0.0, -sinA, \n                     0.0,  1.0,  0.0,\n                     sinA, 0.0,  cosA);\n    float amp = 0.5;\n    float res = 0.0;\n    for (int i = 0; i < 5; ++i) {\n        res += amp * simplex3d(uvw);\n        uvw *= 2.0;\n        amp *= 0.5;\n        uvw = rot * uvw;\n    }\n    return res;\n}\n\nmat4 rotationMatrix(vec3 axis, float cosA, float sinA)\n{\n    float s = sinA;\n    float c = cosA;\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float cosA, float sinA)\n{\n\tmat4 m = rotationMatrix(axis, cosA, sinA);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nfloat warpAmount (vec3 samplePt, float direction)\n{\n    // the 0.07 factor is so that we don't bend the space too much...\n    // sign(samplePt.x) makes the rotation symmetric around the road\n    return sign (direction) * length (samplePt.xy * 0.07) * sign(samplePt.x);\n}\n\nvec3 warpPoint (vec3 samplePt, float direction)\n{\n    float rotAmount = warpAmount (samplePt, direction);\n    float cosA = cos(rotAmount);\n    float sinA = sin(rotAmount);\n    return rotate (samplePt, vec3 (0.0, 0.0, 1.0), cosA, sinA);\n}\n\nvec3 warpPointWithAmount (vec3 samplePt, float rotAmount)\n{\n    float cosA = cos(rotAmount);\n    float sinA = sin(rotAmount);\n    return rotate (samplePt, vec3 (0.0, 0.0, 1.0), cosA, sinA);\n}\n\nfloat mountainHeight (vec3 samplePt, float absOrigX)\n{\n    float scaler = clamp ((absOrigX - ROAD_X) * 0.1, 0.0, 1.0); // Scale up...\n    scaler *= clamp ((MOUNTAIN_X - absOrigX) * 0.1, 0.0, 1.0); // ... then scale down\n    \n    float regularfBm = abs (heightFieldfBm (samplePt.xz)) * 30.0;\n\n    return regularfBm * scaler;\n}\n\nvec3 warpedMountainNorm (vec3 samplePt)\n{\n    float rotAmount = warpAmount (samplePt, 1.0);\n    \n    vec3 samplePtInWarpSpace = warpPointWithAmount (samplePt, rotAmount);\n\n    float heightXM1 = mountainHeight (samplePtInWarpSpace - vec3 (0.005, 0.0, 0.0   ), abs(samplePt.x - 0.005));\n    float heightXP1 = mountainHeight (samplePtInWarpSpace + vec3 (0.005, 0.0, 0.0   ), abs(samplePt.x + 0.005));\n    float heightZM1 = mountainHeight (samplePtInWarpSpace - vec3 (0.0  , 0.0, 0.005 ), abs(samplePt.x));\n    float heightZP1 = mountainHeight (samplePtInWarpSpace + vec3 (0.0  , 0.0, 0.005 ), abs(samplePt.x));\n    \n    vec3 _tan =   vec3 (0.01, heightXP1 - heightXM1, 0.0 );\n    vec3 _bitan = vec3 (0.0 , heightZP1 - heightZM1, 0.01);\n    \n    vec3 ourNorm = normalize (cross (_tan, _bitan));\n    if ( ourNorm.y < 0.0 ) ourNorm = -ourNorm;\n    \n    vec3 tipInWarpedSpace = ourNorm + samplePtInWarpSpace;\n    vec3 tipInWorldSpace = warpPointWithAmount (tipInWarpedSpace, -rotAmount);\n    \n    return tipInWorldSpace - samplePt;\n}\n\nfloat roadHeight (vec3 samplePt)\n{\n    if ( samplePt.y > 0.3 ) return 0.3; // Early exit\n    return max (abs (heightFieldfBm (samplePt.xz * 3.0)) - 0.99, 0.0) * 0.3;\n}\n\nvec3 roadNorm (vec3 samplePt)\n{\n    float heightXM1 = roadHeight (samplePt - vec3 (0.005, 0.0, 0.0   ));\n    float heightXP1 = roadHeight (samplePt + vec3 (0.005, 0.0, 0.0   ));\n    float heightZM1 = roadHeight (samplePt - vec3 (0.0  , 0.0, 0.005 ));\n    float heightZP1 = roadHeight (samplePt + vec3 (0.0  , 0.0, 0.005 ));\n    \n    vec3 _tan =   vec3 (0.01, heightXP1 - heightXM1, 0.0 );\n    vec3 _bitan = vec3 (0.0 , heightZP1 - heightZM1, 0.01);\n    \n    vec3 ourNorm = normalize (cross (_tan, _bitan));\n    if ( ourNorm.y < 0.0 ) ourNorm = -ourNorm;\n\n    return ourNorm;\n}\n\nfloat scene (vec3 samplePt, float samplePtFromMiddle)\n{\n    if ( samplePtFromMiddle < ROAD_X || samplePtFromMiddle > MOUNTAIN_X ) return roadHeight (samplePt); // We need mountains only on a strip...\n    \n    return mountainHeight (warpPoint (samplePt, 1.0), samplePtFromMiddle);\n}\n\nvec3 sceneNormal (vec3 samplePt, float samplePtFromMiddle)\n{\n    if ( samplePtFromMiddle < ROAD_X || samplePtFromMiddle > MOUNTAIN_X ) return roadNorm (samplePt);\n    \n    return warpedMountainNorm (samplePt);\n}\n\nfloat luminance(vec3 rgb)\n{\n\treturn dot(rgb, vec3(0.2125, 0.7154, 0.0721));\n}\n\nfloat fractalTreePart (vec2 uv)\n{\n    if (uv.y < 0.0 || uv.y > M_HPI) return 0.0;\n    \n    float retVal = 0.0;\n    for (int i = 0; i != 2; i++)\n    {\n        float signFlipper = (i % 2 == 0 ? -1.0 : 1.0);\n        float swivelX = sin (clamp (uv.y, 0.0, M_HPI)) * signFlipper;\n        \n        retVal = max (retVal, clamp (1.0 - abs (swivelX - uv.x), 0.0, 1.0));\n    }\n    return retVal;\n}\n\nfloat fractalTreePart2 (vec2 uv)\n{\n    float retVal = 0.0;\n    retVal = max (fractalTreePart (uv), retVal);\n    uv.y -= M_HPI;\n    uv.x += 1.0;\n    retVal = max (fractalTreePart (uv), retVal);\n    uv.x -= 2.0;\n    retVal = max (fractalTreePart (uv), retVal);\n    return retVal;\n}\n\nfloat fractalTreePart4 (vec2 uv)\n{\n    float retVal = 0.0;\n    retVal = max (fractalTreePart2 (uv), retVal);\n    uv.y -= M_HPI * 2.0;\n    uv.x += 2.0;\n    retVal = max (fractalTreePart2 (uv), retVal);\n    uv.x -= 2.0;\n    retVal = max (fractalTreePart2 (uv), retVal);\n    uv.x -= 2.0;\n    retVal = max (fractalTreePart2 (uv), retVal);\n    return retVal;\n}\n\n// Put this in a separate shadertoy and enjoy ;)\nfloat fractalTreePart6 (vec2 uv)\n{\n    float yRamp = 1.0 - uv.y;\n    yRamp *= yRamp * yRamp;\n    \n    uv = uv * 10.0 - vec2 (5.0);\n    uv.y = (uv.y + 7.0) * 0.4;\n\n    float retVal = 0.0;\n    retVal = max (fractalTreePart4 (uv), retVal);\n    uv.x += 2.0;\n    retVal = max (fractalTreePart4 (uv), retVal);\n    uv.x -= 4.0;\n    retVal = max (fractalTreePart4 (uv), retVal);\n    \n    return pow (retVal, 6.0) * yRamp + yRamp;\n}\n\nvec4 rockTexture (vec3 pt)\n{\n    /*vec2 patternUV = fract (pt.zy * vec2 (1.0, 0.0625));\n    float val = fractalTreePart6(patternUV);\n    vec2 wapUV = warpPoint (pt, 1.0).xz;*/\n    vec4 texRGB1 = vec4 (luminance (pow(texture (iChannel1, pt.xz).rgb,vec3 (2.2))));\n    /*vec4 texRGB2 = vec4 (1.0 - luminance (texture (iChannel2, wapUV).rgb)); // Skipping this for now in the interest\n    return mix (texRGB1, texRGB2, val);*/                                     // of performance...\n    return texRGB1;\n}\n\nvec4 sceneTexture (vec3 samplePt, float samplePtFromMiddle, vec3 sampleNorm)\n{\n    if ( samplePtFromMiddle < ROAD_X || samplePtFromMiddle > MOUNTAIN_X )\n    {\n        float resLum = 1.0 - luminance (texture (iChannel2, samplePt.xz * 0.1).rgb);\n        vec2 guideWireUV = fract (samplePt.xz);\n        if ( samplePt.y > 0.0001 ) return vec4 (vec3 (resLum), 0.0);\n        else if ( any(lessThan(guideWireUV, vec2 (0.02))) ) return vec4 (0.0);\n        return vec4 (resLum);\n    }\n    \n    return vec4 (rockTexture (samplePt).rgb, 0.0);\n}\n\nfloat starAtPos (vec3 uvw)\n{\n    return max (whiteNoise (floor (uvw * 500.0) * 0.02) - 0.996, 0.0);\n}\n\nvoid intersectBox(vec3 rayOrigin, vec3 rayDir, vec3 boxMin, vec3 boxMax, inout float finalK) {\n    vec3 maxODiff = boxMax - rayOrigin;\n    vec3 minODiff = boxMin - rayOrigin;\n    vec3 invDir = vec3 (1.0) / rayDir;\n    if ( rayDir.x != 0.0 )\n    {\n        float k1 = maxODiff.x * invDir.x;\n        float k2 = minODiff.x * invDir.x;\n        if ( k1 < finalK && k1 == clamp (k1, 0.0, 1.0) )\n        {\n            vec3 hitPt = rayOrigin + rayDir * k1;\n            if ( clamp (hitPt.yz, boxMin.yz, boxMax.yz) == hitPt.yz )\n            {\n\t\t        finalK = k1;\n            }\n        }\n        if ( k2 < finalK && k2 == clamp (k2, 0.0, 1.0) )\n        {\n            vec3 hitPt = rayOrigin + rayDir * k2;\n            if ( clamp (hitPt.yz, boxMin.yz, boxMax.yz) == hitPt.yz )\n            {\n\t\t        finalK = k2;\n            }\n        }\n    }\n    if ( rayDir.y != 0.0 )\n    {\n        float k1 = maxODiff.y * invDir.y;\n        float k2 = minODiff.y * invDir.y;\n        if ( k1 < finalK && k1 == clamp (k1, 0.0, 1.0) )\n        {\n            vec3 hitPt = rayOrigin + rayDir * k1;\n            if ( clamp (hitPt.xz, boxMin.xz, boxMax.xz) == hitPt.xz )\n            {\n\t\t        finalK = k1;\n            }\n        }\n        if ( k2 < finalK && k2 == clamp (k2, 0.0, 1.0) )\n        {\n            vec3 hitPt = rayOrigin + rayDir * k2;\n            if ( clamp (hitPt.xz, boxMin.xz, boxMax.xz) == hitPt.xz )\n            {\n\t\t        finalK = k2;\n            }\n        }\n    }\n    if ( rayDir.z != 0.0 )\n    {\n        float k1 = maxODiff.z * invDir.z;\n        float k2 = minODiff.z * invDir.z;\n        if ( k1 < finalK && k1 == clamp (k1, 0.0, 1.0) )\n        {\n            vec3 hitPt = rayOrigin + rayDir * k1;\n            if ( clamp (hitPt.xy, boxMin.xy, boxMax.xy) == hitPt.xy )\n            {\n\t\t        finalK = k1;\n            }\n        }\n        if ( k2 < finalK && k2 == clamp (k2, 0.0, 1.0) )\n        {\n            vec3 hitPt = rayOrigin + rayDir * k2;\n            if ( clamp (hitPt.xy, boxMin.xy, boxMax.xy) == hitPt.xy )\n            {\n\t\t        finalK = k2;\n            }\n        }\n    }\n}\n\n\nvec4 mainCubemap (vec3 rayDir)\n{\n    vec4 fragColor = vec4 (0.0);\n    \n    for (int i = -1; i != 2; i++)\n\t    for (int j = -1; j != 2; j++)\n\t\t    for (int k = -1; k != 2; k++)\n\t\t\t    fragColor.rgb += starAtPos (rayDir + vec3 (float(i), float(j), float(k))*0.0001);\n        \n\tfragColor.rgb *= 0.037037037;\n    fragColor.rgb *= vec3 (0.5, 0.5, 1.0) * 130.0;\n    fragColor.rgb += starAtPos (rayDir) * vec3 (0.85, 0.85, 1.0) * 130.0;\n    \n    vec3 nebulaSampleDir1 = rayDir * vec3 (-1.1, 1.5, 1.1);\n    vec3 nebulaSampleDir2 = nebulaSampleDir1 + vec3 (1.5);\n    \n    fragColor.rgb += max (simplexfBm (nebulaSampleDir1), 0.0) * vec3 (1.0, 0.0, 0.7);\n    fragColor.rgb += max (simplexfBm (nebulaSampleDir2), 0.0) * vec3 (0.0, 0.5, 1.0);\n    \n    if ( rayDir.z > 0.0 )\n    {\n        vec3 circlePlaneNorm = normalize (vec3 (0.0, 0.12, 1.0));\n        float mDotN = dot(circlePlaneNorm, rayDir);\n        if ( mDotN > 0.983 && mDotN < 0.997 ) // Narrowing in on the ring for performance savings...\n        {\n            vec3 circlePlaneTan = normalize (cross (circlePlaneNorm, vec3 (0.0, 1.0, 0.0)));\n            vec3 circlePlaneBiTan = cross (circlePlaneTan, circlePlaneNorm);\n            float circlePlaneDistToSphereCent = 0.75;\n            vec3 circlePlaneOrigin = circlePlaneDistToSphereCent * circlePlaneNorm;\n            vec3 ptOnPlane = rayDir * (circlePlaneDistToSphereCent / mDotN);\n            float ring = abs(0.1 - min (abs(length (ptOnPlane - circlePlaneOrigin) - 0.1), 0.1)) * 10.0;\n            fragColor.rgb += vec3 (1.0, 0.3, 0.7) * pow (ring, 50.0);\n            \n            float ringStars = 0.0;\n            for (int i = 0; i != NUM_PARTICLES; i++)\n            {\n                float randAng1 = whiteNoise (vec3(float(i) + 1.0)) * (iTime + M_PI * 3.0);\n                vec3 randPt = circlePlaneOrigin + (cos(randAng1) * circlePlaneTan + sin(randAng1) * circlePlaneBiTan) * 0.1;\n                float ring2 = clamp (0.1 - length (ptOnPlane - randPt), 0.0, 0.1) * 10.0;\n                ringStars += pow (ring2, 15.0);\n            }\n            \n            fragColor.rgb += vec3 (ringStars * 0.5, ringStars * 0.3, ringStars * 0.3);\n        }\n    }\n\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec4 finalColor = vec4 (0.0);\n    vec3 curEye = vec3 (0.0, 2.0, iTime);\n    vec3 curLook = normalize (vec3 (cos(iTime * 0.25) * 0.3, sin(iTime * 0.25) * 0.3, 1.0));\n    vec3 curUp = vec3 (0.0, 1.0, 0.0);\n    vec3 curSide = normalize (cross (curLook, curUp));\n    curUp = cross (curSide, curLook);\n    if ( curUp.y < 0.0 ) curUp = -curUp;\n    vec3 sampleDirNorm = normalize (curLook + curSide * uv.x + curUp * uv.y);\n    vec3 sampleDir = sampleDirNorm  * MARCH_SIZE * blueNoise (uv);\n    vec3 samplePt = curEye + sampleDir;\n\n    for (;;)\n    {\n        vec3 diffToSamplePt = samplePt - curEye;\n        float distToSamplePtSq = dot (diffToSamplePt, diffToSamplePt);\n        \n        if ( distToSamplePtSq > DRAW_DISTANCE )\n        {\n            finalColor.rgb = mainCubemap (sampleDirNorm).rgb;\n            break;\n        }\n        \n        vec3 samplePtStretchedABit = samplePt;\n        samplePtStretchedABit.xz /= 1.75;\n        float samplePtFromMiddle = abs (samplePtStretchedABit.x);\n        if ( samplePt.y < scene(samplePtStretchedABit, samplePtFromMiddle) )\n        {\n            vec3 sampleNorm = sceneNormal (samplePtStretchedABit, samplePtFromMiddle);\n            vec4 sceneTex = sceneTexture (samplePtStretchedABit, samplePtFromMiddle, sampleNorm);\n            \n            vec3 reflectionVec = reflect (sampleDirNorm, sampleNorm); // Box adjustment for cubemap\n            finalColor.a = sceneTex.a;\n            float lineSegK = 2.0;\n            vec3 lineSegStart = samplePt - curEye;\n            vec3 lineSegDir = reflectionVec * 100.0;\n            float drawDistActual = ceil (sqrt(DRAW_DISTANCE));\n            intersectBox (lineSegStart, lineSegDir, vec3 (-drawDistActual), vec3 (drawDistActual), lineSegK);\n            reflectionVec = normalize (lineSegStart + lineSegDir * lineSegK);\n            \n            finalColor.rgb = mainCubemap (reflectionVec).rgb * sceneTex.rgb;\n            break;\n        }\n        samplePt += sampleDir;\n    }\n    \n    finalColor = clamp (finalColor, vec4 (0.0), vec4 (1.0));\n    \n    // Output to screen\n    fragColor = vec4 (pow (finalColor.rgb, vec3 (1.0/2.2)), finalColor.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/***********************************************************\n\n   Yet another Beeple cover art in Shadertoy: PREMULTIPLY! :D\n   Here's the reference: https://cdna.artstation.com/p/assets/images/images/008/827/996/large/beeple-01-09-18.jpg?1515549977\n   The mountains are actually warped fBms with accurate normals.\n   Also I created fractalTreePart6(...) specifically for this piece :). You might find its patterns interesting in texture work.\n   3D simplex noise is by nikat: https://www.shadertoy.com/view/XsX3zB\n\n   This rendition is covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelWH = 1.0/iResolution.xy;\n\n    vec4 midFetch = texture (iChannel0, uv);\n    int kernelSize = 1;\n    if ( midFetch.a == 0.0 ) kernelSize = 0;\n    \n    vec3 finalRes = vec3 (0.0);\n    float weightSum = 0.0;\n    for (int i = -kernelSize; i != kernelSize+1; i++)\n    {\n        vec4 neighFetch = textureLod (iChannel0, uv + vec2 (float(i) * pixelWH.x, 0.0), 0.0);\n        float neighWeight = 1.0;\n        weightSum += neighWeight;\n        finalRes += neighFetch.rgb * neighWeight;\n    }\n\tfinalRes /= weightSum;\n    \n    fragColor = vec4 (finalRes, midFetch.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/***********************************************************\n\n   Yet another Beeple cover art in Shadertoy: PREMULTIPLY! :D\n   Here's the reference: https://cdna.artstation.com/p/assets/images/images/008/827/996/large/beeple-01-09-18.jpg?1515549977\n   The mountains are actually warped fBms with accurate normals.\n   Also I created fractalTreePart6(...) specifically for this piece :). You might find its patterns interesting in texture work.\n   3D simplex noise is by nikat: https://www.shadertoy.com/view/XsX3zB\n\n   This rendition is covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelWH = 1.0/iResolution.xy;\n\n    vec4 midFetch = texture (iChannel0, uv);\n    int kernelSize = 1;\n    if ( midFetch.a == 0.0 ) kernelSize = 0;\n    \n    vec3 finalRes = vec3 (0.0);\n    float weightSum = 0.0;\n    for (int i = -kernelSize; i != kernelSize+1; i++)\n    {\n        vec4 neighFetch = textureLod (iChannel0, uv + vec2 (0.0, float(i) * pixelWH.y), 0.0);\n        float neighWeight = 1.0;\n        weightSum += neighWeight;\n        finalRes += neighFetch.rgb * neighWeight;\n    }\n\tfinalRes /= weightSum;\n    \n    finalRes = mix (texture (iChannel1, uv).rgb, finalRes, 0.4);\n    \n    fragColor = vec4 (finalRes, midFetch.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}