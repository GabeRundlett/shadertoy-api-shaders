{
    "Shader": {
        "info": {
            "date": "1519871563",
            "description": "Noise",
            "flags": 0,
            "hasliked": 0,
            "id": "4sdczl",
            "likes": 0,
            "name": "Sea of Crazy",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "sdf",
                "fbm"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "#define FAR 100.0\n#define STEPS 1028\n#define EPS 0.01\n#define PI acos( -1.0 )\n\nfloat trig( float dist, float decay, float frequency, float amplitude, float speed )\n{\n\n\treturn exp(-decay * dist) *  \n    sin(dist * frequency + ((iTime) * speed)) * amplitude;\n    \n}\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat hashO( float x )\n{\n\n    return fract( sin( x ) * 4567.97 );\n    \n}\n\nfloat noiseO( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) )*5.0, \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hashO( n );\n    float b = hashO( n + 1.0 );\n    float c = hashO( n + 57.0 );\n    float d = hashO( n + 58.0 );\n    \n    float e = hashO( n + 113.0 );\n    float f = hashO( n + 114.0 );\n    float g = hashO( n + 170.0 );\n    float h = hashO( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\nfloat fbm( in vec3 p )\n{\n\n    float wave = texture( iChannel0, vec2( 0.0, 0.25 ) ).x;\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02; p -= wave;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nfloat map( vec3 p )\n{\n\n    vec4 mou = iMouse / iResolution.xyxy;\n    float dist = distance( vec3( 2.0 ), p );\n    float tri = trig( dist, 0.001, 20.0, 1.9, 0.2 );\n    //float pla = p.y;\n    float wave = texture( iChannel0, vec2( 0.0, 0.25 ) ).x;\n    //return p.y + ( 2.0 * noiseO( p.xz + wave + ( iTime * 2.0 ) ) * fbm( p + wave + ( iTime * 2.0 )) );\n\treturn p.y + noise( p * noise( p * wave ) ) * fbm( p * fbm( p * fbm( p + iTime * 0.2 ) ) );\n    \n}\n\nvec3 grad( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    vec3 n = vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                   map( p + e.yxy ) - map( p - e.yxy ),\n                   map( p + e.yyx ) - map( p - e.yyx )\n                   );\n    return n;\n\n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t );\n        if( h < EPS ) return 0.0;\n        res = min( res, 8.0 * h / t );\n        t += h;\n        \n    }\n    \n    return res;\n    \n}\n\nvec3 shade( vec3 ro, vec3 rd, float t )\n{\n\n    vec3 pos = ro + rd * t;\n    vec3 n = normalize( grad( pos ) );\n    \n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 ref = reflect( rd, n );\n     \n    float dif = max( 0.0, dot( n, lig ) );\n    float bac = max( 0.0, 0.2 + 0.8 * dot( n, blig ) );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 ); \n    float con = 1.0;\n    float sha = softShadows( pos, lig );\n    float amb = 0.5 + 0.5 * n.y;\n    \n    vec3 col = con * vec3( 0.1, 0.15, 0.2 );\n    col += amb * vec3( 0.1, 0.15, 0.2 );\n    col += dif * vec3( 1.0, 0.97, 0.85 ) * sha;\n    col += bac * vec3( 1.0, 0.97, 0.85 );\n    \n    col = sqrt( col );\n    col *= 0.6;\n    col += 1.0 * spe;\n    \n    float wave = texture( iChannel0, vec2( 0.0, 0.75 ) ).x;\n    vec3 tex = texture( iChannel1, reflect( rd, n ) ).rgb;\n    \n    col *= mix( vec3( 1.0, 0.0, 0 ), vec3( 0.0, 0.0, 1.0 ), fbm( pos + wave ) );\n    col += 0.3 * tex;\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = 4.0 * vec3( sin( mou.x * 2.0 * PI ), 0.5, cos( -mou.x * 2.0 * PI ) );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = vec3( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    float t = 0.0; float d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t );\n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n        \n    }\n\n    // Time varying pixel color\n    vec3 col = d < EPS ? shade( ro, rd, t ) : mix( vec3( 0.3, 0.2, 0.4 ), vec3( 0.0, 0.1, 0.2 ), uv.y );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}