{
    "Shader": {
        "info": {
            "date": "1686300697",
            "description": "hexagons are good",
            "flags": 0,
            "hasliked": 0,
            "id": "DlKXzd",
            "likes": 29,
            "name": "neon-psychedelic-3",
            "published": 3,
            "tags": [
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 646
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/Xljczw\nvec4 getHex(vec2 p)\n{\n    const vec2 s = vec2(1, ROOT_3);\n    vec4 hC = floor(vec4(p, p - vec2(.5, 1))/s.xyxy) + .5;\n    vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    return dot(h.xy, h.xy) < dot(h.zw, h.zw) \n        ? vec4(h.xy, hC.xy) \n        : vec4(h.zw, hC.zw + .5);\n}\n\nfloat hexDist(in vec2 p)\n{    \n    const vec2 s = vec2(1, ROOT_3);\n    p = abs(p);\n    return max(dot(p, s*.5), p.x);\n}\n\nvec3 mainPass(in vec2 fragCoord)\n{\n    const float r = PI / 6.0;\n    const mat2 rot = mat2(cos(r), sin(r), -sin(r), cos(r));\n\n    vec2 uv0 = 2.0 * (fragCoord / iResolution.xy) - 1.0;\n    uv0.x *= iResolution.x / iResolution.y;\n    vec2 uv = uv0;\n    \n    vec2 h0 = getHex(0.5 * uv).xy;\n    vec2 h = h0;\n    \n    float d0 = length(uv0);\n    vec3 color = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.0; i++)\n    {\n        h = getHex(1.1 * ROOT_3 * h * rot).xy;\n        \n        float d = hexDist(h);\n        d = 2.0 * d * pow(0.2, d0);\n        d = 0.5 * sin(4.0 * d - 0.5 * iTime + i * 2.0 * PI / 7.0);\n        d = 0.04 / d;\n        d = pow(d, 2.0);\n        \n        vec3 c = d * palette(length(h0) + 0.3 * i);\n        color += c;\n    }\n    return color;\n}\n\n/*\nvec3 antialias(in vec2 fragCoord)\n{\n    const float AA_STAGES = 0.0;\n    const float AA_TOTAL_PASSES = AA_STAGES * AA_STAGES + 1.0;\n    const float AA_JITTER = 0.5;\n    \n    vec3 color = mainPass(fragCoord);\n    for (float x = 0.0; x < AA_STAGES; x++)\n    {\n        for (float y = 0.0; y < AA_STAGES; y++)\n        {\n            vec2 offset = AA_JITTER * (2.0 * hash22(vec2(x, y)) - 1.0);\n            color += mainPass(fragCoord + offset);\n        }\n    }\n    return color / AA_TOTAL_PASSES;\n}\n*/\n\nvec3 gamma(in vec3 color)\n{\n    return pow(color, vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = mainPass(fragCoord);\n    color = gamma(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415927;\nconst float ROOT_3 = 1.7320508;\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.7);\n    vec3 b = vec3(0.8, 0.2, 0.7);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.2, 0.6);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}