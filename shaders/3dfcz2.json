{
    "Shader": {
        "info": {
            "date": "1585128214",
            "description": "Thanks to evvvvil_ and alkama",
            "flags": 0,
            "hasliked": 0,
            "id": "3dfcz2",
            "likes": 2,
            "name": "French Kif",
            "published": 3,
            "tags": [
                "raymarching",
                "kif"
            ],
            "usePreview": 0,
            "username": "haptix",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "float pi = acos(-1.);\nfloat glo = 0.;\n\nmat2 rot(float rad)\n{\n    return mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n}\n\nvec2 hexPris(vec3 p, vec2 h, float matId)\n{\n\tconst vec3 k = vec3(-.8660254, .5, .57735);\n    p = abs(p);\n    p.xy -= 2.*min(dot(k.xy, p.xy), 0.)*k.xy;\n    vec2 d = vec2(length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x), p.z - h.y);\n    return vec2(min(max(d.x,d.y), 0.) + length(max(d, 0.)), matId);\n}\n\nvec3 kif(vec3 p)\n{\n    for(int i = 0; i < 6; i++)\n    {\n        p = abs(p) - vec3(.05*cos((iTime + 76.)*.21) + .31,\n                          -.05*sin((iTime + 287.)*.23) + .35,\n                          .05*sin((iTime + 150.)*.25) + .37);\n        p.xz *= rot(.031*(iTime + 483.));\n        p.zy *= rot(.043*(iTime + 985.));\n        p.xy *= rot(.053*(iTime + 115.));\n    }\n    \n    return p;\n}\n\nvec2 map(vec3 p)\n{   \n    p = kif(p);\n    \n    float len = 20.;\n    p.z -= len/2.;\n    vec2 m1 = hexPris(p, vec2(.025, len), 1.);\n    p.x -= .03;\n    vec2 m2 = hexPris(p, vec2(.01, len), 2.);\n    vec2 m = m1.x < m2.x ? m1 : m2;\n    glo += .1 / (.1 + m.x*m.x*m.x*2500.);\n    return m;\n}\n\nvec2 tr(vec3 ro, vec3 rd)\n{\n    float far = 40.;\n\tvec2 h,t= vec2(.001);\n\tfor(int i = 0; i < 384; i++)\n\t{\n\t\th = map(ro + rd*t.x);\n\t\tif(h.x < .00001 || t.x > far)\n\t\t\tbreak;\n\t\tt.x += h.x;\n        t.y = h.y;\n  \t}\n    if(t.x > far)\n        t.y = 0.;\n\treturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ro = vec3(1.5*cos(-.2*iTime),\n                   1.5*sin(-.2*iTime),\n                   -3.5);\n\tvec3 camTarget = vec3(0.);\n\tvec3 up = vec3(0., 1., 0.);\n\tvec3 camDir = normalize(camTarget - ro);\n\tvec3 camRight = normalize(cross(up, ro));\n\tvec3 camUp = normalize(cross(camDir, camRight));\n    vec3 lightPos = vec3(.5, 1.5, -15.);\n  \n\tvec2 screenPos = -1. + 2. * gl_FragCoord.xy / iResolution.xy;\n\tscreenPos.x *= iResolution.x / iResolution.y;\n\n\tvec2 eps = vec2(0., .01);\n\tvec3 rd = normalize(camRight*screenPos.x + camUp*screenPos.y + camDir);\n  \n\tvec2 t = tr(ro, rd);\n\n    vec3 colRot = vec3(sin(.317*(iTime + 44.)),\n                       sin(.151*(iTime + 55.)),\n                       sin(.227*(iTime + 79.))) + 1.25;\n\n    if (t.y > 0.)\n    {\n        vec3 hit = ro + rd*t.x;\n        vec3 lightDir = normalize(lightPos - hit);\n        \n        vec3 norm = normalize(map(hit).x - vec3(map(hit - eps.yxx).x,\n                              \t\t\t\t\tmap(hit - eps.xyx).x,\n                              \t\t\t\t\tmap(hit - eps.xxy).x));\n        \n        float diff = max(0., dot(lightDir, norm));\n        float spec = pow(max(dot(rd, reflect(norm, lightDir)), 0.), 85.);\n        float ao = clamp(map(t.x + norm*.5).x / .5, 0., 1.);\n\n        vec3 col = .23 * colRot;\n        col *= .1 * ao;\n        col += .5 * diff * colRot.yzx;\n        col += .8 * spec * vec3(1., 1., 1.);\n        \n        col += glo*.008*colRot;\n        \n        if(t.y == 2.)\n            col = col.zxy;\n        \n        fragColor = vec4(col, 1.);\n    }\n    else\n    \tfragColor = vec4(glo*.008*colRot.zyx, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}