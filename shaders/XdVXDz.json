{
    "Shader": {
        "info": {
            "date": "1463847319",
            "description": "Mix 2 colors via a radial mask. Thanks LaBodilsen for suggesting using mouse coords",
            "flags": 0,
            "hasliked": 0,
            "id": "XdVXDz",
            "likes": 3,
            "name": "Radial mask mix 2 Colors",
            "published": 3,
            "tags": [
                "example",
                "radial",
                "mask"
            ],
            "usePreview": 0,
            "username": "Ippokratis",
            "viewed": 876
        },
        "renderpass": [
            {
                "code": "vec4 rgb (vec4 inCol)       // Use rgb values for defining colors\n{\n\treturn inCol/vec4(255.0); // rgb/255 = 0-1 range glsl colors\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / vec2(100.0);// iResolution.xy makes the circle elipse, so I use a \"virtual\" \n    \t\t\t\t\t\t\t\t\t//\tresolution of 100:100\n    normalize(uv);\n   \tfloat r_in = 0.0;         // inner limit of the mask \n   \tfloat r_out = 3.0;       // outer limit of the mask \n    \t\t\t\t\t\t\t\n    \t\t\t\t\t\t // inner<outer = transition colA->colB\n\t\t\t\t\t\t\t// if inner>outer, the transition inverses from colA->colB to colB->colA   \n    \n\tvec2 pos = vec2( iMouse.xy/vec2(100.0) );  // Click / click'n'drag on the screen to define new position\n    \t\t\t\t\t\t\t\t\t\t  // Thanks LaBodilsen for the suggestion\n                                             // https://www.shadertoy.com/user/LaBodilsen\n    \t\t\t\t\t\t\t\t\t\t// vec2(100) used as above \t\t\n    float radius = length( uv-pos );\n\n \tfloat mask = ( radius-r_in ) / ( r_out-r_in );\n    \n    vec4 colA = rgb( vec4( 125.0, 91.0, 95.0, 255.0 ) ); //turn rgb values to glsl float 0-1 values\n    vec4 colB = rgb( vec4( 222.0, 131.0, 112.0, 255.0 ) );\n    \n    vec4 col = mix( colA, colB, mask);\n\tcol = min( col, colB);    // Make sure that the color will be colB, not white\n\tcol = max( col, colA);   // Make sure that the color will be colA, not black\n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}