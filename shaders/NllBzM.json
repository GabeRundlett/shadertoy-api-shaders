{
    "Shader": {
        "info": {
            "date": "1650655637",
            "description": "An aquatic mess",
            "flags": 0,
            "hasliked": 0,
            "id": "NllBzM",
            "likes": 8,
            "name": "School's out",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sea",
                "underwater"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "// School's out by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat thing(vec3 p)\n{\n    float t = iTime * 3.141592;\n    \n    p.xy *= rot(p.z * .01);\n    p.xz *= rot(t * -.1);\n    \n    \n    vec3 i = floor(p / 16. + .5);\n    p.xz += i.y * t;\n    p = fract(p / 16. + .5) * 16. - 8.;\n    \n    float s = sin(t + dot(i, vec3(1)));\n    float ns = s * -.5 + .5;\n    \n    p.xz *= rot(t * .3 + i.x - i.z);\n    p.xz *= rot(p.y + t * .2);\n    p.yx *= rot(p.z * .5);\n    p.x -= clamp(p.x + .2, -.5,.5);\n    p.z -= clamp(p.z - .4, -.5,.5);\n    p = abs(p) - 1.7 - s * .55;\n\n    return (length(p) - .6) * (.4 - s * .125);\n}\n\nfloat scene(vec3 p)\n{\n    return min(thing(p), thing(-p + 8.)) - .05;\n}\n\nvec3 normal(vec3 p, float d)\n{\n    vec2 e = vec2(.001, 0);\n\n    return normalize(\n        d - vec3(\n            scene(p - e.xyy),\n            scene(p - e.yxy),\n            scene(p - e.yyx)\n        )\n    );\n}\n\nfloat shadow(vec3 o, vec3 ld)\n{\n    float d = 0.;\n    float t = .1;\n    vec3 p;\n    for(int i = 0; i < 250; ++i)\n    {\n        p = o + t * ld;\n        d = scene(p);\n        if(abs(d)<.01 || t > 32.) return clamp((t - 24.) / 8., 0., 1.);\n        t += d;\n    }\n    return 1.;\n}\n\nfloat lum(vec3 c)\n{\n    return dot(c, vec3(.2126,.7152,.0722));\n}\n\nvec3 reinhard(vec3 c)\n{\n    float l = lum(c);\n    float n = l * (1. + l / 9.) / (1. + l);\n    return c * n / l;\n}\n\nfloat vignette(vec2 fc)\n{\n    vec2 uv = fc / iResolution.xy * 2. - 1.;\n    float v = length(uv);\n    return 1. - v * v * v * .25;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;;\n\n    vec3 ro = vec3(0,0,-12);\n    vec3 rd = normalize(vec3(uv, 2));\n    vec3 p;\n    float d, t = 0., i = 0.;\n    \n    for(;i < 1. && t < 120.;i += 1./256.)\n    {\n        p = ro + rd * t;\n        d = scene(p);\n        if(abs(d) < .0001 * t) break;\n        t += d;\n    }\n    vec3 ld = normalize(vec3(1));\n    vec3 n = normal(p, d);\n\n    float l = dot(ld, n) * .5 + .5;\n    float s = shadow(p + n * .01, ld);\n    l *= s;\n    float spec = pow(clamp(dot(reflect(rd, n), ld), 0., 1.), 32.) * s;\n    float e = exp(-t * .05 + .3);\n    vec3 fog = mix(vec3(.025,.1,.15), vec3(2.,1.55,1.22), clamp(l * e + clamp(dot(rd, ld) * 2. - 1.,0.,1.) * .1, 0., 1.));\n    vec3 col = mix(vec3(l) + spec * 3., fog, 1. - e);\n   \n    col = mix(vec3(lum(col)), col, 1.5);\n    col = reinhard(col);\n    col = pow(col, vec3(1./2.2));\n    col *= vignette(fragCoord);\n    //col = vec3(i);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}