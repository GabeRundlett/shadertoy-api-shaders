{
    "Shader": {
        "info": {
            "date": "1591826510",
            "description": "Random number thingy\nBased on my LED clock https://www.shadertoy.com/view/tllyz7",
            "flags": 0,
            "hasliked": 0,
            "id": "tlXcDr",
            "likes": 12,
            "name": "Random Number Towers",
            "published": 3,
            "tags": [
                "random"
            ],
            "usePreview": 0,
            "username": "Oggbog",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "//   Segment numbers\n//   ===============\n//\n//\t\t 0\n//\t\t###\n//\t   #   #\n//\t  1#   #2\n//\t   # 3 #\n//\t\t###\n//\t   #   #\n//\t  4#   #5\n//\t   #   #\n//\t\t###\n//\t\t 6\n\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(233.34, 851.74));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n\n\nfloat segment(vec2 uv,int o){\n    \n    \n    float d = o==1 ? abs(uv.x):abs(uv.y);\n   \n    d = smoothstep(0.11,0.101,d);\n    d *= smoothstep(0.49,0.488,abs(uv.x+uv.y));\n    d *= smoothstep(0.49,0.488,abs(uv.x-uv.y));\n    \n    return d;\n}\n\nfloat digit(vec2 uv,int n){\n    float d = 0.0;\n    float b = 0.2; // brightness\n    uv *= 2.4;\n    // segment 0\n    if(n!=1 && n!=4){\n    \td += segment(uv-vec2(0.0,1.0),0);\n    } else {\n        d += segment(uv-vec2(0.0,1.0),0)*b;\n    }\n    // segment 1\n    if (n!=1 && n!=2 && n!=3 && n!=7){\n    \td += segment(uv-vec2(-0.5,0.5),1);\n    } else {\n        d += segment(uv-vec2(-0.5,0.5),1)*b;\n    }\n    // segment 2\n    if (n!=5 && n!=6){ \n    \td += segment(uv-vec2(0.5),1);\n    } else {\n        d += segment(uv-vec2(0.5),1)*b;\n    }\n    // segment 3\n    if (n!=0 && n!=1 && n!=7){\n    \td += segment(uv,0);\n    } else {\n        d += segment(uv,0)*b;\n    }\n    // segment 4\n    if(n==0 || n==2 || n==6 || n==8){\n    \td += segment(uv-vec2(-0.5),1);\n    } else {\n        d += segment(uv-vec2(-0.5),1)*b;\n    }\n    // segment 5\n    if(n!=2){\n    \td += segment(uv-vec2(0.5,-0.5),1);\n    } else {\n        d += segment(uv-vec2(0.5,-0.5),1)*b;\n    }\n    // segment 6\n    if(n!=1 && n!=4 && n!=7){\n    \td += segment(uv-vec2(0.0,-1.0),0);\n    } else {\n        d += segment(uv-vec2(0.0,-1.0),0)*b;\n    }\n    return d;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates and adjust aspect ratio\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 lv = uv;\n    //uv.y -= iTime/2.;\n    uv.x -= sin(iTime/3.);\n    uv *= 2.; \n    vec2 gv = fract(uv * 5.0)-0.5;\n    vec2 id = floor(uv * 5.0);\n    \n    vec2 id2 = floor(lv * 200.0);\n    \n    float rd = mod(iTime*0.2+hash21(id2),10.0);\n    float d = digit(gv,int(mod(hash21(id)*10.+iTime,10.0)));\n    float e = digit(lv,int(rd));\n    \n    d *= abs(sin(uv.x*1.9)*0.8);\n    \n    vec3 col = vec3(d,0.,d/3.0);\n   \tcol = mix(col,vec3(e,e,e),e);\n\t\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}