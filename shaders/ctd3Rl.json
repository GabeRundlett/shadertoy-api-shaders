{
    "Shader": {
        "info": {
            "date": "1682944354",
            "description": "CC0: AI not included\nTinkering around with old shaders.\nNo AI and very little human intelligence used ;)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ctd3Rl",
            "likes": 163,
            "name": "AI not included",
            "published": 3,
            "tags": [
                "2d",
                "heart"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 6589
        },
        "renderpass": [
            {
                "code": "// CC0: AI not included\n// Tinkering around with old shaders.\n// No AI and very little human intelligence used ;)\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff = 0.58;\nconst vec3 dbcol = HSV2RGB(vec3(hoff+0.96, 0.8, 0.75));\nconst vec3 sbcol = HSV2RGB(vec3(hoff+0.95, 0.4, 1.0));\nconst vec3 gbcol = HSV2RGB(vec3(hoff+0.98, 0.9, 0.001));\nconst vec3 fbcol = HSV2RGB(vec3(hoff+0.95, 0.7, 2.0));\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\nfloat dot2(vec2 p) {\n  return dot(p, p);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat heart(vec2 p) {\n  p.x = pabs(p.x, 0.05);\n\n  if( p.y+p.x>1.0 )\n      return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n  return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                  dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nfloat df(vec2 p) {\n  vec2 hp = p;\n  const float hz = 1.0;\n  hp /= hz;\n  hp.y -= -0.6;\n  float d = heart(hp)*hz;\n  return d;\n}\n\nfloat hf(vec2 p) {\n  float d = df(p);\n  float h = (-20.0*d);\n  h = tanh_approx(h);\n  h -= 3.0*length(p);\n  h = pmin(h, 0.0, 1.);\n  h *= 0.25;\n  return h;\n}\n\nvec3 nf(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = hf(p + e.xy) - hf(p - e.xy);\n  n.y = hf(p + e.yx) - hf(p - e.yx);\n  n.z = 2.0*e.x;\n  \n  return normalize(n);\n}\n\nvec2 hash(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\nfloat noise(vec2 p) {\n  const float K1 = .366025404;\n  const float K2 = .211324865;\n\n  vec2 i = floor (p + (p.x + p.y)*K1);\n    \n  vec2 a = p - i + (i.x + i.y)*K2;\n  vec2 o = step (a.yx, a.xy);    \n  vec2 b = a - o + K2;\n  vec2 c = a - 1. + 2.*K2;\n\n  vec3 h = max (.5 - vec3 (dot (a, a), dot (b, b), dot (c, c) ), .0);\n\n  vec3 n = h*h*h*h*vec3 (dot (a, hash (i + .0)),dot (b, hash (i + o)), dot (c, hash (i + 1.)));\n\n  return dot (n, vec3 (70.));\n}\n\nfloat fbm(vec2 pos, float tm) {\n  vec2 offset = vec2(cos(tm), sin(tm*sqrt(0.5)));\n  float aggr = 0.0;\n    \n  aggr += noise(pos);\n  aggr += noise(pos + offset) * 0.5;\n  aggr += noise(pos + offset.yx) * 0.25;\n  aggr += noise(pos - offset) * 0.125;\n  aggr += noise(pos - offset.yx) * 0.0625;\n    \n  aggr /= 1.0 + 0.5 + 0.25 + 0.125 + 0.0625;\n    \n  float f = (aggr * 0.5) + 0.5;\n  \n  return f;\n}\n\nfloat divf(float offset, float f) {\n  const float goff = 0.2;\n  const float gfloor = 0.001;\n  float r = abs(goff + offset - f);\n  r = max(r, gfloor);\n  return r;\n}\n\n// This way of computing \"lightning\" I found at shadertoy. Unfortunately I don't remember where.\nvec3 lightning(vec2 pos, vec2 pp, float offset) {\n  vec3 sub = 0.03*vec3(0.0, 1.0, 2.0).zyx*length(pp);\n\n  float time = TIME+123.4;\n  float stime = time/200.0;\n  vec3 col = vec3(0.0);\n  vec2 f = 10.0*cos(vec2(sqrt(0.5), 1.0)*stime)+vec2(0.0, -11.0)*stime;\n  const float glow = 0.0125;\n  const float goff = 0.2;\n  const float gfloor = 0.001;\n  for (float i = 0.0; i < 3.0; ++i) {\n    vec3 gcol0 = (1.0+cos(0.50*vec3(0.0, 1.0, 2.0) +time+3.0*pos.x-0.33*i));\n    vec3 gcol1 = (1.0+cos(1.25*vec3(0.0, 1.0, 2.0) +2.*time+pos.y+0.25*i));\n    float btime = stime*85.0 + (i);\n    float rtime = stime*75.0 + (i);\n    float div1 = divf(offset, fbm((pos + f) * 3.0, rtime));\n    float div2 = divf(offset, fbm((pos + f) * 2.0, btime));\n    float d1 = offset * glow / div1;\n    float d2 = offset * glow / div2;\n    col += (d1 * gcol0)-sub;\n    col += (d2 * gcol1)-sub;\n  }\n    \n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float aa = 4.0/RESOLUTION.y;\n  float d = df(p);\n  float h = hf(p);\n  vec3 n = nf(p);\n  const vec3 lp = vec3(-4.0, -5.0, 3.0);\n  const vec3 ro = vec3(0.0, 0.0, 10.0);\n  vec3 p3 = vec3(p, h); \n  vec3 rd = normalize(p3-ro);\n  vec3 ld = normalize(lp-p3);\n  vec3 r = reflect(rd, n);\n  float diff = max(dot(ld, n), 0.0);\n  vec3 dcol = dbcol*mix(vec3(0.15), vec3(1.0), diff);\n  float spe = pow(max(dot(ld, r), 0.0), 3.0);\n  vec3 scol = spe*sbcol;\n  float gd = d+0.0;\n  vec2 gp = p;\n  vec3 gcol = lightning(gp, pp, gd);\n  vec3 hcol = dcol;\n  hcol += scol;\n  vec3 col = vec3(0.0);\n  col += gbcol/max(0.01*(dot2(p)-0.15), 0.0001);\n  col += gcol;\n  col = mix(col, hcol, smoothstep(0.0, -aa, d));\n  col = mix(col, fbcol, smoothstep(0.0, -aa, abs(d+0.01)-0.01));\n  col *= smoothstep(1.75, 0.5, length(pp));\n\n  col = aces_approx(col); \n  col = sqrt(col); \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp); \n  fragColor = vec4(col.xyz, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}