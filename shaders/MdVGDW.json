{
    "Shader": {
        "info": {
            "date": "1454588023",
            "description": "Example of sphere grid by Cubemap. For view rezul of calculation level detail.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdVGDW",
            "likes": 22,
            "name": "Sphere grid by Cubemap",
            "published": 3,
            "tags": [
                "grid",
                "cubemap",
                "quadtree",
                "shere"
            ],
            "usePreview": 0,
            "username": "foxes",
            "viewed": 2440
        },
        "renderpass": [
            {
                "code": "float res;\n\nfloat snoise(vec3 x)\n{\n    //float n=dot(x,vec3(1.0,23.0,244.0));\n    //return fract(sin(n)*1399763.5453123);\n    return fract((x.x+x.y)*0.5);\n}\n\nfloat sphereLeveled(vec3 ray,vec3 pos,float r)\n{\n    float level=1.;\n  \tfloat b = dot(ray,pos);\n  \tfloat c = dot(pos,pos) - b*b;\n\tfloat rq=r*r;\n    float s=0.0;\n    if(c <rq) {\n        int z=0;\n        float l1=sqrt(r-c);\n        vec3 r1= ray*(b-l1)-pos;\n        vec3 r2=abs(r1);\n        float m=max(max(r2.x,r2.y),r2.z);\n        vec3 r3=r1/abs(m);\n        vec3 p;\n        if ((r2.y<=r2.z) || (r2.y<=r2.x)) {\n\t\t\tp.x=r3.x;\n\t\t\tif (r3.z<0.) z=2;\n\t\t\tif (r3.z>0.) z=0;\n\t\t\tif (r2.x>r2.z) {\n\t\t\t\tp.x=r3.z;\n\t\t\t\tif (r3.x>0.) z=1;\n\t\t\t\tif (r3.x<0.) z=3;\n\t\t\t}\n\t\t\tp.y=r3.y;\n        } else {\n\t\t\tp.x=r3.x;\n\t\t\tp.y=r3.z;\n\t\t\tif (r3.y>0.) z=4;\n\t\t\tif (r3.y<0.) z=5;\n        }\n        //vec2 si=vec2(1.0);\n        //if (p.x<0.0) si.x=-si.x;\n        //if (p.y<0.0) si.y=-si.y;\n        //p.xy=abs(p.xy);\n        //p.x=pow(p.x,0.9);\n        //p.y=pow(p.y,0.9);\n        //p.xy*=si;\n        \n        float l=0.8;//max(0.1,abs(dot(ray,normalize(r1))));\n        //l=min(l,0.9);\n               \n        float d=16.0;\n        vec2 rs;        \n        \n        //for (float i=0.0;(i<17.0);i+=1.0) {\n        \tvec3 rp=p;\n        \n        \t//vec3 posp;\n\t\t\t//if (rp.z==0.) posp=vec3(rp.x-0.5,rp.y-0.5,0.5);\n\t\t\t//if (rp.z==1.) posp=vec3(0.5,rp.y-0.5,0.5-rp.x);\n\t\t\t//if (rp.z==2.) posp=vec3(0.5-rp.x,rp.y-0.5,-0.5);\n\t\t\t//if (rp.z==3.) posp=vec3(-0.5,rp.y-0.5,rp.x-0.5);\n\t\t\t//if (rp.z==4.) posp=vec3(rp.x-0.5,0.5,0.5-rp.y);\n\t\t\t//if (rp.z==5.) posp=vec3(0.5-rp.x,-0.5,0.5-rp.y);\n        \t//posp=normalize(posp);\n\n        \td=max(0.0,log(iResolution.y*0.04/length(pos+r1))*1.4); //1.6609640474436811 3.321928094887362347870\n        \tlevel=d-fract(d)+1.0;\n        \n        \tfloat scale=pow(2.0,level);\n        \tfloat iscale=1.0/scale;\n        \trs=fract(rp.xy*scale)-0.5;\n        \tvec2 rpd=(rp.xy-(rs)*iscale)*0.5;\n        \n        \tvec3 posp=r1;\n\t\t\tif (z==0) posp=vec3(rpd.x,rpd.y,0.5);\n\t\t\tif (z==1) posp=vec3(0.5,rpd.y,rpd.x);\n\t\t\tif (z==2) posp=vec3(rpd.x,rpd.y,-0.5);\n\t\t\tif (z==3) posp=vec3(-0.5,rpd.y,rpd.x);\n\t\t\tif (z==4) posp=vec3(rpd.x,0.5,rpd.y);\n\t\t\tif (z==5) posp=vec3(rpd.x,-0.5,rpd.y);\n        \tposp=normalize(posp);\n        \n        \td=max(0.0,log(iResolution.y*0.04/length(pos+posp))*1.4);\n        \tlevel=d-fract(d);\n        \n        \tscale=pow(2.0,level);\n        \tiscale=1.0/scale;\n        \trs=fract(rp.xy*scale)-0.5;\n\n        \t//if (level<d) level+=1.0;\n        //}\n        vec2 rs2=abs(rs)*2.0;\n        rs2=(max(rs2,0.1+l*0.8)-0.1-l*0.8)/(1.0-0.1-l*0.8);\n        //rp.xy=rp.xy*scale-fract(rp.xy*scale);\n        \n        //s=snoise(rp);\n        s=fract(rs2.x)+fract(rs2.y);//min(fract(rp.x)+fract(rp.y),1.0);\n    }\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    res = 1.0 / iResolution.y;\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) *res;\n    \n    vec3 ray = normalize(vec3(p,2.0));\n    \n\tfloat mx = iMouse.x>0.0?iMouse.x/iResolution.x*5.0:0.5;\n    float my = iMouse.y>0.0?iMouse.y/iResolution.y*2.0-1.0:0.0;\n    \n    float dist=(1.0+sin(iTime*0.25))*0.5;\n    dist=pow(dist,5.0);\n    \n    vec4 rotate = vec4(mx,my,-1.115*(1.0-dist),1.115*(1.0-dist));\n\n    vec4 sins=sin(rotate);\n    vec4 coss=cos(rotate);\n    mat3 mr=mat3(vec3(coss.x,0.0,sins.x),vec3(0.0,1.0,0.0),vec3(-sins.x,0.0,coss.x));\n    mr=mat3(vec3(1.0,0.0,0.0),vec3(0.0,coss.y,sins.y),vec3(0.0,-sins.y,coss.y))*mr; \n    \n    mat3 mr2=mat3(vec3(1.0,0.0,0.0),vec3(0.0,coss.z,sins.z),vec3(0.0,-sins.z,coss.z));\n    mat3 mr3=mat3(vec3(1.0,0.0,0.0),vec3(0.0,coss.w,sins.w),vec3(0.0,-sins.w,coss.w));\n\n    float s1=sphereLeveled(ray*mr3*mr,vec3(0.0,0.0,1.00005+2.0*dist)*mr3*mr2*mr,1.0);\n    \n    fragColor=vec4(s1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}