{
    "Shader": {
        "info": {
            "date": "1717961922",
            "description": "Trying out circular smooth minimum function from Inigo Quilez ",
            "flags": 0,
            "hasliked": 0,
            "id": "4XG3Rc",
            "likes": 0,
            "name": "Raymarching Free Fractals V2",
            "published": 3,
            "tags": [
                "raymarching",
                "map",
                "fractals"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 89
        },
        "renderpass": [
            {
                "code": "// Fork of \"Raymarching Free Fractals V1\" by spenceryonce. https://shadertoy.com/view/4XyGz3\n// 2024-06-09 19:36:08\n\nprecision highp float;\n\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define EPSILON 0.001\n\n\n// SDF functions\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat boxSDF(vec3 p, vec3 size) {\n    vec3 d = abs(p) - size;\n    float outsideDist = length(max(d, 0.0));\n    float insideDist = min(max(d.x, max(d.y, d.z)), 0.0);\n    return outsideDist + insideDist;\n}\n\n// CSG operations\nfloat unionSDF(float d1, float d2) {\n    return min(d1, d2);\n}\n\nfloat intersectSDF(float d1, float d2) {\n    return max(d1, d2);\n}\n\nfloat differenceSDF(float d1, float d2) {\n    return max(d1, -d2);\n}\n\n// circular\nfloat smin( float a, float b, float k )\n{\n    k *= 1.0/(1.0-sqrt(0.5));\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min(a,b) - k*0.5*(1.0+h-sqrt(1.0-h*(h-2.0)));\n}\n\nvec3 repeat(vec3 p, vec3 c) {\n    return mod(p, c) - 0.5 * c;\n}\n\nfloat map(vec3 p) {\n    p = repeat(p, vec3(2.3, 2., 8.0));\n    // Define the positions and sizes of the objects\n    vec3 spherePos = vec3(0., -0.5+0.2*cos(iTime), 0.0);\n    vec3 spherePos2 = vec3(0., 0.5+0.2*sin(iTime), 0.0);\n    vec3 boxPos = vec3(0.0, 0.0, 0.0);\n    float sphereRadius = 1.0;\n    vec3 boxSize = vec3(0.3, 1.0, 1.0);\n\n    // Compute the SDFs\n    float sphereDist2 = sphereSDF(p - spherePos2, sphereRadius);\n    float sphereDist = sphereSDF(p - spherePos, sphereRadius);\n    float boxDist = boxSDF(p - boxPos, boxSize);\n\n    // Combine them using a union operation\n    return smin(intersectSDF(sphereDist, sphereDist2), boxDist,0.1);\n}\n\n// Ray marching\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = map(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n            return depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n// Lighting\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord.xy);\n    vec3 eye = vec3(0.0, 0.0, 5.0); // Camera position\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.1, 0.1, 0.1); // Ambient color\n    vec3 K_d = vec3(0.192,0.278,0.706); // Diffuse color\n    vec3 K_s = vec3(1.0, 1.0, 1.0); // Specular color\n    float shininess = 10.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}