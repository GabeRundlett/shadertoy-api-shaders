{
    "Shader": {
        "info": {
            "date": "1510082979",
            "description": "mouse does things:\n\nTo smoother curvature on a mirror axis (here a heart shape) (and for better performance), use;\nx=abs(p)\nx=almostIdentity(s,a,a*.5);",
            "flags": 0,
            "hasliked": 0,
            "id": "4lByWK",
            "likes": 6,
            "name": "smooth curvature on mirror",
            "published": 3,
            "tags": [
                "heart",
                "smooth",
                "curvature",
                "cherry",
                "continuity",
                "almostidentity"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 819
        },
        "renderpass": [
            {
                "code": "//sign 3d almost identity smooth heart curvature\n//self: https://www.shadertoy.com/new\n\n/*\nto smoother curvature on a mirror axis (here a heart shape) (and better performance) just use;\nx=abs(p)\nx=almostIdentity(s,a,a*.5);\n x is a mirrored domain, assumed to have an L1 discontinuity (a sharp corner) , unless x is orthogonal to the mirror)\n a is \"smoothing delta\" == \"smoothing area\"\n\nthis is VERY useful for \"superprim\" generalizations.\nthis is a game changer for all typefaces \n and symbols and architecture with mirror symmetry.\nthis can solve all the continuity issues that you get with teleporters.\n as such, it even evades uncertainty of double-slit scenarios.\n by asserting that the double slit experiment is just a\n  special case of 2 linked-list-portals.\n\nparent shader had the solution to smoothing curvature along a mirror \n 1 day after i asked for it\n and 1 year before I noticed that it had it\n  and han I made this fork for it.\n*/\n\n//parent: https://www.shadertoy.com/view/4lK3Rc\n// Created by inigo quilez - iq/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Code for the making of this video: https://www.youtube.com/watch?v=aNR4n0i2ZlM\n\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n\nconst float PI = 3.1415926535897932384626433832795;\nconst float PHI = 1.6180339887498948482045868343656;\n\nvec3 forwardSF( float i, float n) \n{\n    float phi = 2.0*PI*fract(i/PHI);\n    float zi = 1.0 - (2.0*i+1.0)/n;\n    float sinTheta = sqrt( 1.0 - zi*zi);\n    return vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, zi);\n}\n\nfloat almostIdentity( float x, float m, float n )\n{\n    if( x>m ) return x;\n    float a = 2.0*n - m;\n    float b = 2.0*m - 3.0*n;\n    float t = x/m;\n    return (a*t + b)*t*t + n;\n}\n//below is special case of above; n=m*.5;\nfloat almostIdentity( float x, float m){\n    //x is asserted to be x=abs(x);\n    if(x>=m) return x;//sadly essential to also catch /0 case!\n    float t = x/m;\n    return (t*t+1.)*(.5*m);\n}\n\n\nvec2 map( vec3 q )\n{\n    q *= 100.0;\n\n    vec2 res = vec2( q.y, 2.0 );\n\n\n    float r = 15.0;\n    q.y -= r;\n    float ani = pow( 0.5+0.5*sin(6.28318*iTime + q.y/25.0), 4.0 );\n    q *= 1.0 - 0.2*vec3(1.0,0.5,1.0)*ani;\n    q.y -= 1.5*ani;\n    float x = abs(q.x);\n    \n    float m=iMouse.y*20./iResolution.y;\n   // x = (almostIdentity((x), m, m*.5)); // remove discontinuity (https://iquilezles.org/articles/functions)\n    x = almostIdentity(x, m); // remove discontinuity (https://iquilezles.org/articles/functions)\n\n        \n    float y = q.y;\n    float z = q.z;\n    y = 4.0 + y*1.2 - x*sqrt(max((20.0-x)/15.0,0.0));\n    z *= 2.0 - y/15.0;\n    float d = sqrt(x*x+y*y+z*z) - r;\n    d = d/3.0;\n    if( d<res.x ) res = vec2( d, 1.0 );\n    \n    res.x /= 100.0;\n    return res;\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 1.0;\n\n    vec2 res = vec2(0.0);\n    float t = 0.2;\n    for( int i=0; i<300; i++ )\n    {\n\t    vec2 h = map( ro+rd*t );\n        if( (h.x<0.0) || (t>maxd) ) break;\n        t += h.x;\n        res = vec2( t, h.y );\n    }\n\n    if( t>maxd ) res=vec2(-1.0);\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.005,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 kk;\n        vec3 ap = forwardSF( float(i), 64.0 );\n\t\tap *= sign( dot(ap,nor) ) * hash1(float(i));\n        ao += clamp( map( pos + nor*0.01 + ap*0.2 ).x*20.0, 0.0, 1.0 );\n    }\n\tao /= 64.0;\n\t\n    return clamp( ao, 0.0, 1.0 );\n}\n\nvec3 render( in vec2 p )\n{\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = 0.2*(iMouse.x*40./iResolution.x+2.);\n\n\tvec3 ro = vec3(0.4*sin(an),0.25,0.4*cos(an));\n    vec3 ta = vec3(0.0,0.15,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.7*ww );\n\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n    \n\tvec3 col = vec3(1.0,0.82,0.9);\n\n\t// raymarch\n    vec3 uvw;\n    vec2 res = intersect(ro,rd);\n    float t = res.x;\n\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n        float fre = clamp( 1.0 + dot(nor,rd), 0.0, 1.0 );\n        \n        float occ = calcAO( pos, nor ); occ = occ*occ;\n\n        if( res.y<1.5 ) // heart\n        {\n            col = vec3(0.9,0.02,0.01);\n            col = col*0.72 + 0.2*fre*vec3(1.0,0.8,0.2);\n            \n            vec3 lin  = 4.0*vec3(0.7,0.80,1.00)*(0.5+0.5*nor.y)*occ;\n                 lin += 0.5*fre*vec3(1.0,1.0,1.00)*(0.6+0.4*occ);\n            col = col * lin;\n            col += 4.0*vec3(0.7,0.8,1.00)*smoothstep(0.0,0.4,ref.y)*(0.06+0.94*pow(fre,5.0))*occ;\n\n            col = pow(col,vec3(0.4545));\n        }\n        else // ground\n        {\n            col *= clamp(sqrt(occ*1.8),0.0,1.0);\n        }\n    }\n\n    col = clamp(col,0.0,1.0);\n\treturn col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 p = (-iResolution.xy+2.0*fragCoord)/iResolution.y;\n\n    vec3 col = render( p );\n   \n    vec2 q = fragCoord/iResolution.xy;\n   // col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}