{
    "Shader": {
        "info": {
            "date": "1637914636",
            "description": "A weird mix, imported from https://github.com/Oncorporation/obs-shaderfilter/",
            "flags": 0,
            "hasliked": 0,
            "id": "ftK3zy",
            "likes": 2,
            "name": "Weird mix",
            "published": 3,
            "tags": [
                "burn",
                "effect"
            ],
            "usePreview": 0,
            "username": "turboplay",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "\n\nvec4 mod289(vec4 x)\n{\n\treturn x - floor(x / 289.0) * 289.0;\n}\nvec4 permute(vec4 x)\n{\n\treturn mod289(((x * 34.0) + 1.0) * x);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n\treturn vec4(1.79284291400159 - r * 0.85373472095314);\n}\nvec2 fade(vec2 t) {\n\treturn t * t* t* (t * (t * 6.0 - 15.0) + 10.0);\n}\n\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n\tvec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n\tvec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n\tPi = mod289(Pi); // To avoid truncation effects in permutation\n\tvec4 ix = Pi.xzxz;\n\tvec4 iy = Pi.yyww;\n\tvec4 fx = Pf.xzxz;\n\tvec4 fy = Pf.yyww;\n\tvec4 i = permute(permute(ix) + iy);\n\tvec4 gx = fract(i / 41.0) * 2.0 - 1.0;\n\tvec4 gy = abs(gx) - 0.5;\n\tvec4 tx = floor(gx + 0.5);\n\tgx = gx - tx;\n\tvec2 g00 = vec2(gx.x, gy.x);\n\tvec2 g10 = vec2(gx.y, gy.y);\n\tvec2 g01 = vec2(gx.z, gy.z);\n\tvec2 g11 = vec2(gx.w, gy.w);\n\tvec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n\tg00 *= norm.x;\n\tg01 *= norm.y;\n\tg10 *= norm.z;\n\tg11 *= norm.w;\n\tfloat n00 = dot(g00, vec2(fx.x, fy.x));\n\tfloat n10 = dot(g10, vec2(fx.y, fy.y));\n\tfloat n01 = dot(g01, vec2(fx.z, fy.z));\n\tfloat n11 = dot(g11, vec2(fx.w, fy.w));\n\tvec2 fade_xy = fade(Pf.xy);\n\tvec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n\tfloat n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n\treturn 2.3 * n_xy;\n}\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec2 P, vec2 rep)\n{\n\tvec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n\tvec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n\tPi = mod(Pi, rep.xyxy); // To create noise with explicit period\n\tPi = mod289(Pi);        // To avoid truncation effects in permutation\n\tvec4 ix = Pi.xzxz;\n\tvec4 iy = Pi.yyww;\n\tvec4 fx = Pf.xzxz;\n\tvec4 fy = Pf.yyww;\n\tvec4 i = permute(permute(ix) + iy);\n\tvec4 gx = fract(i / 41.0) * 2.0 - 1.0;\n\tvec4 gy = abs(gx) - 0.5;\n\tvec4 tx = floor(gx + 0.5);\n\tgx = gx - tx;\n\tvec2 g00 = vec2(gx.x, gy.x);\n\tvec2 g10 = vec2(gx.y, gy.y);\n\tvec2 g01 = vec2(gx.z, gy.z);\n\tvec2 g11 = vec2(gx.w, gy.w);\n\tvec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n\tg00 *= norm.x;\n\tg01 *= norm.y;\n\tg10 *= norm.z;\n\tg11 *= norm.w;\n\tfloat n00 = dot(g00, vec2(fx.x, fy.x));\n\tfloat n10 = dot(g10, vec2(fx.y, fy.y));\n\tfloat n01 = dot(g01, vec2(fx.z, fy.z));\n\tfloat n11 = dot(g11, vec2(fx.w, fy.w));\n\tvec2 fade_xy = fade(Pf.xy);\n\tvec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n\tfloat n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n\treturn 2.3 * n_xy;\n}\n\n\n\n float Speed = 0.33;\n float Gradient_Adjust = 0.85;\n float Dissolve_Value = 1.43;\n bool Animated;\n bool Apply_to_Channel;\n bool Apply_Smoke = true;\n float Smoke_Horizonal_Speed = 0.3;\n float Smoke_Vertical_Speed = 0.17;\n int Iterations = 4;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n    \n    vec4 color = fragColor;//image.Sample(textureSampler, v_in.uv);\n\tvec4 smoke = vec4(1.0,1.0,1.0,1.0);\n\tvec4 result = smoke;\n\tfloat t = iTime * Speed;\n\tfloat cycle = 1. - max((sin(t) * 2.) - 1., 0.); //create a negative cycle time as a delay\n\tvec2 dir = vec2(Smoke_Horizonal_Speed, Smoke_Vertical_Speed);\n\t//float largestDistance = sqrt(pow(uv_size.x, 2) + pow(uv_size.y, 2));\n\n\tfloat perlin = 0.5;\n\tfloat smoke_perlin = 0.;\n\tfloat scale = 1.;\n\tfloat w = 0.5;\t\n\n\tfor (int i = 0; i < Iterations; i++) {\n\t\t//vec2 coord = v_in.uv * scale;// (v_in.uv + t * dir)* scale;\n\t\tvec2 coord = (uv + t * (dir * .1)) * scale;\n\t\tvec2 period = scale * dir;\n\t\tperlin += pnoise(coord, period) * w;\n\t\tif (Apply_Smoke)\n\t\t\tsmoke_perlin += cnoise((uv + t * dir) * scale) * w * .5;\n\n\t\tscale *= 2.0;\n\t\tw *= 0.5;\n\t}\n\n\t//float toPoint = abs(length(v_in.uv - (v_in.uv * .5)) / ((1.0001 - t) * largestDistance));\n\tif (!Animated)\n\t\tcycle = 1.;\n\tfloat d = clamp(((Dissolve_Value * cycle + perlin) ) - 1.0, -.01, 0.99);\n\tfloat overOne = clamp(d * Gradient_Adjust,0.,1.);\n\tvec4 burn = texture(iChannel1, vec2(overOne, 0.5));\n\n\tif (Apply_to_Channel) {\n\t\tresult =  color * burn;\n\t}\n\telse {\n\t\tresult = vec4(perlin, perlin, perlin, 1.0) * burn;\n\t}\t\n\n\tif (smoke_perlin > 0.) {\n\t\tsmoke *= smoke_perlin;\n\t\tif (result.a <= 0.04)\n\t\t\tresult = vec4(smoke.rgb, smoke_perlin);\n\t\tresult += smoke;\n\t}\n\n\tfragColor= result;\n    \n    \n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}