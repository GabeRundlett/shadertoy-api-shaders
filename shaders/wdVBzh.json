{
    "Shader": {
        "info": {
            "date": "1606599994",
            "description": "Nothing moves...\n\n(Click to stop the animation; press the space bar to change colors.)",
            "flags": 48,
            "hasliked": 0,
            "id": "wdVBzh",
            "likes": 12,
            "name": "Runner illusion (buffered)",
            "published": 3,
            "tags": [
                "optical",
                "illusion"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 447
        },
        "renderpass": [
            {
                "code": "// Inspired by: https://twitter.com/jagarikin/status/1329610899976437765\n\n#define COLOR_SPEED\t2.4\n#define COLOR_DELAY\t0.06\n#define KEY_SPACE\t(vec2 (32.5, 0.5) / 256.0)\n\nvec4 color (in float t) {\n\treturn vec4 (vec3 (abs (2.0 * fract (t * COLOR_SPEED) - 1.0)), 1.0);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\tfloat run = step (iMouse.z, 0.5);\n\tmat4 m;\n\tif (texture (iChannel1, KEY_SPACE).r < 0.5) {\n\t\tvec4 background = vec4 (0.5, 0.5, 0.5, 1.0);\n\t\tm = mat4 (\n\t\t\tbackground,\n\t\t\tmix (background, color (iTime - COLOR_DELAY), run),\n\t\t\tcolor (iTime),\n\t\t\tmix (background, color (iTime + COLOR_DELAY), run)\n\t\t);\n\t} else {\n\t\tvec4 character = vec4 (0.8, 0.3, 0.3, 1.0);\n\t\tm = mat4 (\n\t\t\tcolor (iTime),\n\t\t\tcolor (iTime + COLOR_DELAY * run),\n\t\t\tcharacter,\n\t\t\tcolor (iTime - COLOR_DELAY * run)\n\t\t);\n\t}\n\tfragColor = m * texture (iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI\t\t\t3.14159265358979\n#define REPEAT\t\t0.3\n#define HEIGHT\t\t2.2\n#define THICKNESS\t0.025\n#define OUTLINE\t\t2.0\n#define DELTA\t\t0.0001\n\nfloat segDist (in vec2 p, in vec2 a, in vec2 b) {\n\tp -= a;\n\tb -= a;\n\treturn length (p - b * clamp (dot (p, b) / dot (b, b), 0.0, 1.0));\n}\n\nfloat charDist (in vec2 p, in float jump) {\n\tp.y -= 0.25;\n\tfloat d = length (p - vec2 (0.0, 0.1)) - 0.04;\n\td = min (d, segDist (p, vec2 (0.0, 0.1), vec2 (-0.02, -0.1)));\n\tif (jump < 0.5) {\n\t\td = min (d, segDist (p, vec2 (-0.02, -0.1), vec2 (0.04, -0.15)));\n\t\td = min (d, segDist (p, vec2 (0.04, -0.15), vec2 (0.08, -0.22)));\n\t\td = min (d, segDist (p, vec2 (-0.02, -0.1), vec2 (-0.05, -0.16)));\n\t\td = min (d, segDist (p, vec2 (-0.05, -0.16), vec2 (-0.1, -0.2)));\n\t\td = min (d, segDist (p, vec2 (0.0, 0.04), vec2 (0.06, -0.03)));\n\t\td = min (d, segDist (p, vec2 (0.06, -0.03), vec2 (0.1, -0.05)));\n\t\td = min (d, segDist (p, vec2 (0.0, 0.04), vec2 (-0.08, -0.01)));\n\t\td = min (d, segDist (p, vec2 (-0.08, -0.01), vec2 (-0.09, -0.05)));\n\t} else {\n\t\td = min (d, segDist (p, vec2 (-0.02, -0.1), vec2 (0.06, -0.1)));\n\t\td = min (d, segDist (p, vec2 (0.06, -0.1), vec2 (0.04, -0.2)));\n\t\td = min (d, segDist (p, vec2 (-0.02, -0.1), vec2 (-0.02, -0.18)));\n\t\td = min (d, segDist (p, vec2 (-0.02, -0.18), vec2 (-0.06, -0.24)));\n\t\td = min (d, segDist (p, vec2 (0.0, 0.04), vec2 (0.07, 0.15)));\n\t\td = min (d, segDist (p, vec2 (0.0, 0.04), vec2 (0.05, 0.02)));\n\t\td = min (d, segDist (p, vec2 (0.05, 0.02), vec2 (0.11, 0.06)));\n\t}\n\treturn d - THICKNESS;\n}\n\nfloat charY (in float x) {\n\tx = floor (x / REPEAT) * REPEAT;\n\treturn max (0.0, HEIGHT - mix (-x, x * x * 0.8, step (0.0, x)));\n}\n\nfloat frameDist (in vec2 p) {\n\n\t// Vertical position of the character\n\tfloat dy = charY (p.x);\n\n\t// Distance to the stairs\n\tfloat d = p.y;\n\tif (p.x < -REPEAT * 0.5) {\n\t\tfloat dx = ceil ((p.y - HEIGHT) / REPEAT) * REPEAT;\n\t\tvec2 q = vec2 (dx - p.x, p.y - dy);\n\t\td = min (d, max (min (q.x, q.y), min (max (q.x, q.y), 0.0)));\n\t}\n\n\t// Check whether the character is in the air\n\tfloat jump = step (-REPEAT, p.x) * step (DELTA, dy);\n\n\t// Distance to the character\n\tp.x = (fract (p.x / (2.0 * REPEAT)) - 0.75) * REPEAT * 2.0;\n\tp.y -= dy;\n\treturn min (d, charDist (p, jump));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 p) {\n\n\t// Don't waste time (but beware of a possible change of resolution!)\n\tfragColor = texture (iChannel0, vec2 (0.5) / iResolution.xy);\n\tif (fragColor.xy != iResolution.xy) {\n\t\tfragColor.xyz = vec3 (iResolution.xy, float (iFrame));\n\t} else if (fragColor.z < float (iFrame) - 1.5) {\n\t\tdiscard;\n\t}\n\tif (p == vec2 (0.5)) {\n\t\treturn;\n\t}\n\n\t// Normalization of the fragment coordinates\n\tp = (2.0 * p - iResolution.xy) / iResolution.y;\n\tp = 1.6 * p - vec2 (0.15, -1.2);\n\n\tfloat halfPixel = 0.5 * dFdy (p.y);\n\n\t// Background color\n\tfragColor = vec4 (1.0, 0.0, 0.0, 0.0);\n\n\t// Display\n\tvec4 c = vec4 (0.0, 0.0, 1.0, 0.0);\n\tfloat d = frameDist (p);\n\tfragColor = mix (fragColor, c, smoothstep (halfPixel, -halfPixel, d));\n\n\tvec2 n = normalize (vec2 (frameDist (p - vec2 (DELTA, 0.0)), frameDist (p - vec2 (0.0, DELTA))) - d);\n\tvec2 v = normalize (vec2 (REPEAT, (charY (p.x) - charY (p.x - REPEAT)))) * step (2.0 * halfPixel * OUTLINE, p.y);\n\tfloat f = dot (n, v);\n\n\tc = vec4 (0.0, step (f, 0.0), 0.0, step (0.0, f));\n\td = abs (d - halfPixel * OUTLINE) - halfPixel * OUTLINE;\n\tfragColor = mix (fragColor, c, abs (f) * smoothstep (halfPixel, -halfPixel, d));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}