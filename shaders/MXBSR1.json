{
    "Shader": {
        "info": {
            "date": "1710428623",
            "description": "A remake of the No Man's Sky galaxy map\nThis uses some evil trickery to render stars at an extremely high performance (no raymarching or raster functions used!)",
            "flags": 64,
            "hasliked": 0,
            "id": "MXBSR1",
            "likes": 7,
            "name": "NMS Starfield",
            "published": 3,
            "tags": [
                "starfield",
                "points",
                "nomanssky"
            ],
            "usePreview": 0,
            "username": "aerowave",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "//#define MUSIC_SYNC\n\nconst float STEPS = 12.0;\nconst float PI = asin(1.0) * 2.0;\n\n// Permutation polynomial: (34x^2 + x) mod 289\nvec4 permute(vec4 x) {\n  return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\n// Cellular noise, from https://thebookofshaders.com/edit.php#12/2d-cnoise-2x2.frag\n// Speeded up by using 2x2 search window instead of 3x3,\n// at the expense of some strong pattern artifacts.\nfloat cellular2x2(vec2 P) {\n\t#define K 0.142857142857 // 1/7\n\t#define K2 0.0714285714285 // K/2\n\t#define jitter 0.8 // jitter 1.0 makes F1 wrong more often\n\tvec2 Pi = mod(floor(P), 289.0);\n \tvec2 Pf = fract(P);\n\tvec4 Pfx = Pf.x + vec4(-0.5, -1.5, -0.5, -1.5);\n\tvec4 Pfy = Pf.y + vec4(-0.5, -0.5, -1.5, -1.5);\n\tvec4 p = permute(Pi.x + vec4(0.0, 1.0, 0.0, 1.0));\n\tp = permute(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0));\n\tvec4 ox = mod(p, 7.0)*K+K2;\n\tvec4 oy = mod(floor(p*K),7.0)*K+K2;\n\tvec4 dx = Pfx + jitter*ox;\n\tvec4 dy = Pfy + jitter*oy;\n\tvec4 d = dx * dx + dy * dy; // d11, d12, d21 and d22, squared\n\t// Sort out the two smallest distances\n\n\t// Cheat and pick only F1\n\td.xy = min(d.xy, d.zw);\n\td.x = min(d.x, d.y);\n\treturn d.x;\n}\n\n// custom hue function for star colors\nvec3 hue(float p) {\n    p = mod(p, 1.0);\n    vec3 col = vec3(\n        6.0 * abs(p - 0.5) - 1.0,\n        2.0 - 6.0 * abs(p - 0.333333333),\n        2.0 - 6.0 * abs(p - 0.666666667)\n    );\n    return clamp(col, vec3(0), vec3(1));\n}\n\n// Main code execution\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // centered screen coords\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n    \n    vec3 color = vec3(0.0); \n    float minDist = 0.0;\n    \n    for (float i = 0.0; i < STEPS; i++) {\n        float z = mod(i - iDate.w * 1.05, STEPS);\n        vec2 p = uv * 1.1 * z + 100.0 * i;\n        \n        float dist = cellular2x2(p);\n        \n        float brightness = clamp(0.01 / sqrt(dist) - 0.1, 0.0, 1.0);\n        \n        minDist = min(minDist, dist);\n        \n        // distance fade\n        brightness *= 1.0 - z / STEPS;\n        \n        // final star color\n        color += brightness * (hue(i * PI + p.x + p.y) + 1.0);\n    }\n    \n    color.r += mod(minDist, 1.0);\n    \n    #ifdef MUSIC_SYNC\n    if (iChannelTime[1] < 51.2) { // before high pitched violin starts\n        color *= 0.8;\n    }\n    if (iChannelTime[1] > 98.2 && iChannelTime[1] < 121.8) { // after main rhythm starts\n        color += mod(1.0-iChannelTime[1] * 2.1, 1.0) * 0.1;\n    }\n    if (iChannelTime[1] > 121.8 &&  // after bass starts\n    (iChannelTime[1] < 322.3 || iChannelTime[1] > 326.8)) {  // \n            float t = mod(2.1 - iChannelTime[1] * 2.1, 3.0);\n            if (t < 2.0)\n                color *= mod(t * 1.5, 1.0) * 1.2 + 1.0;\n    }\n    if (iChannelTime[1] > 201.5) // chorus starts\n        color;\n    #endif\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 36674,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/debbie-clare/debutante"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}