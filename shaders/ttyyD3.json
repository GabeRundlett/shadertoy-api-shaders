{
    "Shader": {
        "info": {
            "date": "1611856135",
            "description": "re-up. Monkeys can't write Shakespeare if their lives depended on it. I already did the research. Trust me you don't want to repeat it. I think I'll have better luck randomly reconstituting his DNA.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttyyD3",
            "likes": 14,
            "name": "Shakespeare Quest",
            "published": 3,
            "tags": [
                "finger"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "// Shakespeare Quest by eiffie (solving for 2 joints)\n\n#define size iResolution\n#define SHADOWS\n\nfloat time;\n/* //\"solves\" for two joints (there is a better way I'm sure)\nvoid djsolve( vec3 a, vec3 b, vec3 l, vec3 rt, out vec3 j1, out vec3 j2 )//mod from iq's\n{//the vec \"l\" has the segment lengths, rt is axis of bend\n float l2=(l.y+l.z)*sqrt(length(a-b))/sqrt(l.x+l.y+l.z);\n vec3 p=b-a,q=p*(0.5+0.5*(l.x*l.x-l2*l2)/dot(p,p));\n j1=a+q+sqrt(max(0.0,l.x*l.x-dot(q,q)))*normalize(cross(p,rt));\n p=b-j1;q=p*(0.5+0.5*(l.y*l.y-l.z*l.z)/dot(p,p));\n j2=j1+q+sqrt(max(0.0,l.y*l.y-dot(q,q)))*normalize(cross(p,rt));\n}\n*/\n\nvec4 djsolve( vec2 p )//mod from fizzer's mod of iq's\n{//the segment lengths are precalculated as 0.5,0.4,0.3 and starts at point 0,0\n float l2=0.639*pow(dot(p,p),0.25);\n vec2 q=p*(0.5+0.5*(0.25-l2*l2)/dot(p,p));\n vec2 j1=q+sqrt(max(0.0,0.25/dot(q,q)-1.0))*q.yx*vec2(-1.0,1.0);\n p=p-j1;\n q=p*(0.5+0.035/dot(p,p));\n vec2 j2=j1+q+sqrt(max(0.0,0.16/dot(q,q)-1.0))*q.yx*vec2(-1.0,1.0);\n return vec4(j1,j2);\n}\nmat3 lookat(vec3 fw,vec3 up){\n fw=normalize(fw);vec3 rt=normalize(cross(fw,up));return mat3(rt,cross(rt,fw),fw);\n}\nfloat Tube(vec3 pa, vec3 ba, float r){//mod from iq's\n float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n return length(pa - ba*h)-r+h*0.015;\n //return length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0))-r;\n}\n\nfloat finger(vec3 p, float z){\n vec3 j4=vec3(0.7+sin(z+time+sin(z*1.3))*0.25,abs(sin(z+time))*0.6,0.0);\n vec4 j=djsolve(j4.xy);\n vec3 j2=vec3(j.xy,0.0),j3=vec3(j.zw,0.0);\n float d=Tube(p,j2,0.145);\n d=min(d,Tube(p-j2,j3-j2,0.13));\n return min(d,Tube(p-j3,j4-j3,0.115));\n}\nfloat DE(vec3 p0){\n vec3 p=p0;\n p.x=mod(p.x,2.0)-1.0;\n float d3=length(max(abs(p.xy+vec2(0.0,0.27))-vec2(0.47,0.2),0.0))-0.03;\n float d2=min(length(p.xy-vec2(0.75,0.0)),length(p.xy+vec2(0.75,0.0)));\n float za=0.0;\n if(abs(fract(p.z)-0.5)>0.25){\n  p.x=-p.x;\n  p.z+=0.5;\n  za=5.0;\n }\n p.x+=0.75;\n float z=floor(p.z)+floor(p0.x*0.5)*10.0+za;\n p.z=fract(p.z)-0.5;\n float d=finger(p,z);\n return min(0.16,min(d,min(d2-0.075,d3)));\n}\n\nfloat G(vec2 p){return smoothstep(0.0,0.05,min(max(abs(p.x-0.6)-0.15,abs(p.y-0.5)),max(min(p.x-p.y,p.y-0.5),abs(length(p-vec2(0.5))-0.25))));}\nfloat A(vec2 p){return smoothstep(0.0,0.05,min(max(0.25-p.y,abs(abs(p.x-0.5)+p.y*0.5-0.4)),max(abs(p.x-0.5)-0.1,abs(p.y-0.5))));}\nfloat C(vec2 p){return smoothstep(0.0,0.05,max(abs(length(p-vec2(0.5))-0.25),p.x-0.6));}\nfloat T(vec2 p){return smoothstep(0.0,0.05,min(max(abs(p.x-0.5),abs(p.y-0.5)-0.25),max(abs(p.x-0.5)-0.25,abs(p.y-0.75))));}\n\nvec3 getColor(vec3 p0){\n float tim=time-0.2;\n vec3 col;\n vec3 p=p0;\n p.x=mod(p.x,2.0)-1.0;\n float d3=length(max(abs(p.xy+vec2(0.0,0.27))-vec2(0.47,0.2),0.0))-0.03;\n float d2=min(length(p.xy-vec2(0.75,0.0)),length(p.xy+vec2(0.75,0.0)));\n float ftz=0.625,za=0.0;\n if(abs(fract(p.z)-0.5)>0.25){\n  p.x=-p.x;\n  p.z+=0.5;\n  ftz=0.125;\n  za=5.0;\n }\n p.x+=0.75;\n float z=floor(p.z)+floor(p0.x*0.5)*10.0+za;\n p.z=fract(p.z)-0.5;\n float d=finger(p,z);\n vec4 ft=vec4(0.7+sin(z+tim+sin(z*1.3))*0.25,abs(sin(z+tim))*0.6,p0.z+ftz,p.x);\n if(d2<d && d2<d3){col=vec3(0.7,0.65,0.4);}\n else if(d3<d){\n  p0.z+=0.125;\n  vec2 xz=abs(mod(p0.xz,0.25)-0.125);\n  col=(1.0-20.0*dot(xz,xz))*vec3(0.5,0.4,0.3);\n  xz=floor(p0.xz*4.0);\n  if(ft.y<0.1){//fat fingering :)\n   if(mod(floor(ft.w*4.0),4.0)==mod(floor(ft.x*4.0),4.0) && fract(ft.z)<0.25)\n    col*=vec3(4.0,3.0,2.0);\n  }\n  float i=mod(xz.x-xz.y,4.0);\n  xz=p0.xz*4.0-xz;\n  if(i<1.0)col*=G(xz);\n  else if(i<2.0)col*=A(xz);\n  else if(i<3.0)col*=C(xz);\n  else col*=T(xz);\n }else col=vec3(0.2,0.3,0.4);\n return col;\n}\n#ifdef SHADOWS\nfloat linstep(float a, float b, float t){return clamp((t-a)/(b-a),0.,1.);}//from knighty\n//random seed and generator\nfloat randSeed,GoldenAngle;\nfloat randStep(){//crappy random number generator\n randSeed=fract(randSeed+GoldenAngle);\n return  (0.8+0.2*randSeed);\n}\nfloat FuzzyShadow(vec3 ro, vec3 rd, float coneGrad){\n float t=0.01,d,s=1.0,r;\n ro+=rd*t;\n for(int i=0;i<8;i++){\n  r=t*coneGrad;\n  d=DE(ro+rd*t)+r*0.5;\n  s*=linstep(-r,r,d);\n  t+=d*randStep();\n }\n return clamp(s,0.2,1.0);\n}\n#endif\n\nvec3 Light(vec3 p, vec3 rd, vec3 L){\n vec2 v=vec2(0.001,0.0);\n vec3 mcol=getColor(p);\n vec3 N=normalize(vec3(DE(p+v.xyy)-DE(p-v.xyy),DE(p+v.yxy)-DE(p-v.yxy),DE(p+v.yyx)-DE(p-v.yyx)));\n vec3 col=mix(mcol.yzx,mcol,abs(dot(rd,N)))*max(0.0,dot(N,L));\n col+=vec3(1.0,0.5,0.7)*pow(max(0.0,dot(reflect(rd,N),L)),16.0);\n#ifdef SHADOWS\n col*=FuzzyShadow(p,L,0.5);\n#endif\n return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n time=iTime*2.5;\n#ifdef SHADOWS\n GoldenAngle=2.0-0.5*(1.0+sqrt(5.0));\n randSeed=fract(sin(dot(fragCoord.xy,vec2(13.434,77.2378))+time*0.1)*4132.34526);\n#endif\n vec3 ro=vec3(2.0*sin(time*0.1),1.5+sin(time*0.03)*0.6,time*0.6+cos(time*0.135));\n mat3 rotCam=lookat(vec3(0.0,0.3-0.5*ro.y,1.0),vec3(0.0,1.0,0.0));\n vec3 rd=rotCam*normalize(vec3((2.0*fragCoord.xy-size.xy)/size.y,1.5));\n rd.x=-rd.x;\n float t=max(0.0,(0.875-ro.y)/rd.y),d=1.0,dm=d,tm=t;\n for(int i=0;i<24;i++){\n  t+=d=DE(ro+rd*t);\n  if(d<dm){dm=d;tm=t;}\n }\n vec3 col=vec3(rd.y*rd.y);\n vec3 L=normalize(vec3(0.2,0.6,-0.3));\n bool secondMarch=(dm>0.0002*tm);\n if(secondMarch){//unless we got really close speed up the march\n  for(int i=0;i<16;i++){\n   t+=d=DE(ro+rd*t)*1.5;//just experimenting\n   t+=0.01;\n  }\n  if(d<0.02*t){\n   vec3 p=ro+rd*t;\n   vec3 scol=Light(p,rd,L);\n   col=mix(scol,col,smoothstep(0.0,0.02*t,d));\n   col*=exp(-t*0.1);\n  }\n }\n if(dm<0.002*tm){\n  vec3 p=ro+rd*tm;\n  vec3 scol=Light(p,rd,L);\n  col=mix(scol,col,smoothstep(0.0,0.002*tm,dm));\n  col*=exp(-tm*0.1);\n }\n \n \n fragColor = vec4(clamp(col*2.0,0.0,1.0),1.0);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}