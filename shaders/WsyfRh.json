{
    "Shader": {
        "info": {
            "date": "1606498796",
            "description": "I've always been mesmerized by the screensaver on my dad's iMac and I thought it was the perfect thing to create with a shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsyfRh",
            "likes": 5,
            "name": "Tentacles of Light",
            "published": 3,
            "tags": [
                "hsv",
                "screensaver",
                "tentacles",
                "apple",
                "imac"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "float Hash11(in float x) {\n    return fract(sin(x * 1254.5763) * 57465.57);\n}\n\nvec3 hue2rgb(in float hue) {\n    hue *= 6.0;\n    float x = 1.0 - abs(mod(hue, 2.0) - 1.0);\n\n    vec3 rgb = vec3(1.0, x, 0.0);\n    if (hue < 2.0 && hue >= 1.0) {\n        rgb = vec3(x, 1.0, 0.0);\n    }\n\n    if (hue < 3.0 && hue >= 2.0) {\n        rgb = vec3(0.0, 1.0, x);\n    }\n\n    if (hue < 4.0 && hue >= 3.0) {\n        rgb = vec3(0.0, x, 1.0);\n    }\n\n    if (hue < 5.0 && hue >= 4.0) {\n        rgb = vec3(x, 0.0, 1.0);\n    }\n\n    if (hue < 6.0 && hue >= 5.0) {\n        rgb = vec3(1.0, 0.0, x);\n    }\n\n    return rgb;\n}\n\nfloat line(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float t = iTime * 0.25;\n    float c = cos(t), s = sin(t);\n    uv -= vec2(cos(t), sin(t)) * 0.15;\n\n    for (float tentacleID=0.0; tentacleID < 8.0; tentacleID++) {\n        float distFromOrigin = length(uv);\n        float tentacleHash = Hash11(tentacleID + 1.0);\n        float angle = tentacleID / 4.0 * 3.14 + iTime * (tentacleHash - 0.5);\n\n        vec3 tentacleColor = hue2rgb(fract(0.5 * (distFromOrigin - 0.1 * iTime)));\n        float fadeOut = 1.0 - pow(distFromOrigin, sin(tentacleHash * iTime) + 1.5);\n\n        vec2 offsetVector = uv.yx * vec2(-1.0, 1.0);\n        vec2 offset = offsetVector * sin(tentacleHash * (distFromOrigin + tentacleHash * iTime)) * (1.0 - distFromOrigin);\n\n        color += smoothstep(0.03, 0.0, line(uv + offset, vec2(0.0, 0.0), vec2(cos(angle), sin(angle)) * 1000.0)) * fadeOut * tentacleColor;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}