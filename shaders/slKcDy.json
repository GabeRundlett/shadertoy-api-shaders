{
    "Shader": {
        "info": {
            "date": "1662499958",
            "description": "stars using voronoi and white noise to scatter them, does not scale up sadly",
            "flags": 32,
            "hasliked": 0,
            "id": "slKcDy",
            "likes": 2,
            "name": "basic stars with bloom",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 grad = vec4(mix(vec3(0,0,0.02),vec3(0.1,0.1,0.15),pow(1.0-uv.y,3.0)),0.0);\n    vec4 base = max(texture(iChannel0,uv,0.0),0.0);\n    //upscale\n    vec4 bloom = max(texture(iChannel1,uv*bloomSize,0.0)*bloomStrength,0.0);\n    \n    fragColor = base + bloom + grad;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//precomputed density map\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0 || iResolution.xy != texture(iChannel0,uv,0.0).xy) {\n        float scale = (\n            voronoi3d(vec3(uv.x,0,uv.y))*0.5 +\n            voronoi3d(vec3(uv.x/4.0,0,uv.y/4.0))*0.25 +\n            voronoi3d(vec3(uv.x*8.0,0,uv.y*8.0))\n        )/(0.5+0.25+1.0);\n        fragColor = vec4(iResolution.xy,0,1.0-scale);\n    } else {\n        fragColor = vec4(iResolution.xy,0,texture(iChannel0,uv,0.0).a);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float bloomStrength = 1.0;\nconst float bloomSize = 0.4; //0-1\nconst float twinkleDimming = 0.5;\n\nvec3 hsvToRgb(vec3 hsv){ //hsv.x = hue, hsv.y = saturation, hsv.z = value\n    vec3 col = vec3(hsv.x, hsv.x + 2.0/3.0, hsv.x + 4.0/3.0); //inputs for r, g, and b\n    col = clamp(abs(mod(col*2.0, 2.0)-1.0)*3.0 - 1.0, 0.0, 1.0)*hsv.z*hsv.y + hsv.z - hsv.z*hsv.y; //hue function (graph it on desmos)\n    return col;\n}\n\n///  3 out, 3 in...\nvec3 hash33(vec3 p3) //https://www.shadertoy.com/view/4djSRW\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//  1 out, 2 in...\nfloat hash12(vec2 p) //https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat voronoi3d(vec3 uv){\n    //assume uv is on a 0-1 scale\n    float n = 999.0;\n    for (int x = -1; x < 2; x++){\n        for (int y = -1; y < 2; y++){\n            for (int z = -1; z < 2; z++){\n                n = min(n,distance(floor(uv) + vec3(x,y,z) + hash33(floor(uv) + vec3(x,y,z)),uv));\n            }\n        }\n    }\n    return n;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//main star drawing\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float noise = hash12(uv*100.0);\n    float density = texture(iChannel0,fragCoord/iResolution.xy,0.0).a;\n    float twinkle = 1.0-voronoi3d(vec3(uv+iTime*4.0,0.0))*twinkleDimming;\n    float brightness = pow(hash12(uv*10.0),2.0);\n    float color = smoothstep(0.0,0.7,1.0-hash12(uv*1000.0));\n        \n    vec3 col = vec3(0);\n    if (noise >= 1.0-density*density/20.0) {\n        col = hsvToRgb(vec3(color/2.0,1.0-brightness-color/2.0,brightness));\n    } else {\n        col = vec3(0,0,0.02);\n    }\n\n    fragColor = vec4(col,brightness + twinkle);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//get light pixels for bloom\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0,uv,0.0);\n    if (col.r+col.g+col.b > 0.1) {\n        fragColor = col*col.a;\n    } else {\n        fragColor = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//downscale for bloom\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy/bloomSize;\n    fragColor = texture(iChannel0,uv,0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}