{
    "Shader": {
        "info": {
            "date": "1641087298",
            "description": "A solution to the 2D wave equation.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlySz3",
            "likes": 24,
            "name": "2D Wave Equation",
            "published": 3,
            "tags": [
                "2d",
                "waves",
                "sinusoidal",
                "boundaries",
                "pde"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 548
        },
        "renderpass": [
            {
                "code": "// https://www.desmos.com/calculator/nl0ncpf8aw\n\n#define PI 3.14159265359\n#define RHO 1.57079632679\n\n#define wavelet(k, p, t) k.x * sin(k.y * p.x) * sin(k.z * p.y) * cos(length(k.yz) * t)\nfloat mapScene(in vec3 p, out vec3 color) {\n    float tilt = -0.5;\n    float co = cos(tilt), si = sin(tilt);\n    p.yz *= mat2(co, -si, si, co);\n\n    float turn = 0.25 * iTime;\n    co = cos(turn), si = sin(turn);\n    p.xz *= mat2(co, -si, si, co);\n\n    p.xz += RHO;\n    p.y += 0.5;\n\n    float time = iTime;\n    float height = wavelet(vec3(1.0, 1.0, 2.0), p.xz, time);\n    height += wavelet(vec3(0.4, 2.0, 3.0), p.xz, time);\n    height += wavelet(vec3(0.1, 5.0, 2.0), p.xz, time);\n    float liquid = p.y - height;\n\n    float cutout = max(abs(p.x - RHO), abs(p.z - RHO)) - RHO;\n    cutout = max(cutout, -p.y - 1.25);\n    float box = max(abs(cutout - 0.05) - 0.05, p.y - 0.25);\n    liquid = max(liquid, cutout);\n\n    float ground = p.y + 1.5;\n\n    float dist = box;\n    color = vec3(0.8, 0.2, 0.0) * (1.0 - pow(0.5 + 0.5 * sin(3.0 * PI * (p.y + 0.05)), 25.0));\n    if (liquid < dist) { color = vec3(0.0, 0.25, 1.0); dist = liquid; }\n    if (ground < dist) { color = vec3(1.2); dist = ground; }\n\n    return dist * 0.25;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 color = vec3(0.0);\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy, color) - mapScene(p - e.xyy, color),\n                          mapScene(p + e.yxy, color) - mapScene(p - e.yxy, color),\n                          mapScene(p + e.yyx, color) - mapScene(p - e.yyx, color)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 6.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    vec3 light = vec3(-0.58, 0.58, 0.58);\n    vec3 sky = mix(vec3(1.0), vec3(0.25, 0.25, 1.0), 0.5 + 0.5 * rd.y);\n    vec3 shade = vec3(0.0);\n\n    float t = 0.0;\n    for (int i=0; i < 300; i++) {\n        vec3 p = ro + rd * t;\n        vec3 color = vec3(0.0);\n        float dist = mapScene(p, color);\n        if (dist < 0.001) {\n            vec3 nor = getNormal(p);\n            shade = color * max(0.2, dot(nor, light));\n            break;\n        }\n\n        if (t > 20.0) {\n            break;\n        }\n\n        t += dist;\n    }\n\n    shade = mix(shade, sky, smoothstep(0.7, 0.99, t / 20.0));\n    fragColor.rgb = pow(max(shade, 0.0), vec3(0.4545));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}