{
    "Shader": {
        "info": {
            "date": "1699493128",
            "description": "inifinity nope this band anytime.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctdyRf",
            "likes": 11,
            "name": "gapz lan",
            "published": 3,
            "tags": [
                "band",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 1436
        },
        "renderpass": [
            {
                "code": "#define I iResolution\n#define PI 3.1415\n#define TAU PI * 2.\n#define rot( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n#define v( a ) clamp( a, 0., 1. )\n\n\nfloat signHex( vec2 u, float s ){\n    /*\n        \n     |----------|\n     |  /    \\  |\n     | /   1  \\ |\n     | \\   0  / |\n     |  \\  1 /  |\n     |   \\  /   |\n     ------------\n       \n       max( abs(u.x), abs(u.y) ) - r;\n       weight = r / cos( 30deg ) = r / 0.866025403784 \n       and linear map from abs(u.y)\n\n    */\n    \n    u = abs(u);\n    \n    return max(\n        u.x - ( s * 1.1547005383793 ) * ( 1.- u.y / s / 2. ),\n        u.y - s\n    );\n    \n}\n\nfloat cc( vec2 u ){\n    // ships\n    float py = u.y;\n    \n    py = abs( pow( py, 2. ) );\n    py -= .1;\n    py *= 6. * ( u.y / 2. + .5 );\n    py = abs( py ) - .01;\n\n    return min(\n        max(\n            abs( u.x ) - .7 * py,\n            abs( u.y ) - .3\n        ),\n        length( u + vec2( 0., -.1 ) ) - .19\n    );\n}\n\nfloat texp( vec2 u ){\n    float p;\n    \n    p = length( u ) - .4;\n    \n    p = max(\n        p,\n        -( length( u ) - .35 )\n    );\n    \n    p = max(\n        p,\n        -( abs( u.y - .03 ) - .14 )\n    );\n    return p;\n}\n\nfloat texw( vec2 u ){\n    float w = max(\n        sin( atan( u.x, u.y + .29 ) * 3.5 - PI * .5 ),\n        ( length( u ) - .28 )\n    );\n    \n    vec2 cu = u * 4.;\n    \n    cu.y -= .3;\n    cu.x = abs( cu.x ) - .5 * ( u.y / 2. + .5 );\n    cu.y = abs( cu.y ) - .35;\n    cu *= rot( PI * .1 );\n    \n    \n    float cr = cc( cu * 1.1 );\n    \n    w = max(\n        w,\n        -cr\n    );\n    \n    return w;\n}\n\nvoid updatePos( inout vec3 p ){\n    p.xz *= rot( iTime );\n    p.zy *= rot( iTime );\n}\n\nfloat hx( vec3 p ){\n\n    updatePos( p );\n    float py = p.y;\n    \n    py = abs( py ) - .5;\n    py = clamp( py, -.27 , 1. );\n    py = abs( py ) - .01;\n\n    return max(\n        signHex( p.xz, 1.44 * py ),\n        abs( p.y ) - .5\n    );\n}\n\nfloat fcs( vec3 p ){\n    updatePos( p );\n    \n    p.xz *= rot( PI * .34 );\n    p.z += .18;\n    \n    return max(\n        max( \n            abs( p.x ) - .21,\n            abs( p.y ) - .21\n        ),\n        abs( p.z ) - .21\n    );\n}\n\n\nfloat slavers( vec3 p ){\n    \n    p.xy *= rot( p.z * .8 );\n    p.z += iTime * .5;\n    p = mod( p, 1. ) - .5;\n    p.xz *= rot( iTime );\n    \n\n    return max(\n        signHex( p.xy, .2 ),\n        abs( p.z ) - .01\n    );\n}\n\n\nvec3 lc( vec3 p ){\n    p.xz *= rot( .5 );\n    \n    for( float i = 0.; i < 3.; i++ ){\n        p.yz *= rot(  i );\n        p.xy *= rot(  i );\n        p.x = abs( p.x ) - i * .07;\n        p.xz *= rot( i );\n        p.z = abs( p.z ) - i * .07;\n    }\n    \n    p.y -= .05;\n    return p;\n}\n\n\nfloat df( vec3 p ){\n\n    float d = 1.;\n\n    d = min(\n        d,\n        slavers( p )\n    );\n\n    d = min(\n        d,\n        hx( p )\n    );\n    \n    d = min(\n        d,\n        fcs( p )\n    );\n    \n    return d;\n}\n\nvec3 l(in vec3 b) {\n  vec2 a = vec2(1, -1) * .5773;\n  return normalize(a.xyy * df(b + a.xyy * 5e-4) + a.yyx * df(b + a.yyx * 5e-4) +\n                   a.yxy * df(b + a.yxy * 5e-4) + a.xxx * df(b + a.xxx * 5e-4));\n}\n\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = ( V * 2. - I.xy ) / I.y;\n    \n    \n    vec3 c, p, o = vec3( 0., 0., -3. ), r = vec3( u * .25, 1. );\n    float t, d, i, dp, e = sqrt( 1e-4 );\n    \n    for( ; i < 64.; i++ ){\n        p = o + r * t,\n        d = df( p ),\n        dp = ( 1. - abs( d ) / e ),\n        c += ( dp > 0. && df( p ) == hx(p) ) ? .01 * 64. / i * dp / t : 0.;\n        \n        if( dp > 0. && df( p ) == hx(p) ){\n           c += lc( reflect( ( p ) , r ) ) * .3 * (2. - cos( vec3( .7, sin( p.x ), abs(r.z) ) ))\n           * .35 * 64. / i * dp / t;\n           c += vec3( 0.17, 0.78, 0.98 ) * .1 * 64. / i * dp / t;\n        }\n        \n        \n        if( dp > 0. && ( df( p ) == fcs( p ) ) ){\n            vec3 pp = p;\n            // yes the same as stereo yes\n            updatePos( pp );\n            \n            pp.xz *= rot( PI * .34 );\n            p.z += .18;\n            \n            float x = (mod( round(iTime* .5), 2. ) == 0. ) ? round( fract( iTime * 7. + 123.456 ) ) : 1.;\n            \n            c += max( -l( pp ).z, 0. ) * step( max( abs( pp.x ) - .2, abs( pp.y ) - .2 ), 0. ) * vec3( 0.16, 0.79, 0.97 ) * .01;\n            c += vec3( max( -l( pp ).z, 0. ) * step( texw( pp.xy * 3. ), 0. ) ) * vec3( 0.97, 0.17, 0.31 ) * x;\n            c += vec3( max( -l( pp ).z, 0. ) * step( texp( pp.xy * 3. ), 0. ) ) * vec3( 0.17, 0.97, 0.86 ) * x;\n        }\n        \n        c += (  dp > 0. && ( df( p ) == slavers( p ) ) ) ? vec3( 0.17, 0.78, 0.98 ) * .05 * 64. / i * dp / t : vec3(0);\n            \n        \n        \n        t += max( abs( d )  * .66667, e );\n    }\n    \n\n\n    \n    // Output to screen\n    U = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}