{
    "Shader": {
        "info": {
            "date": "1449363244",
            "description": "I already optimized it a bit but I'm looking to a way to optimize it more, anyone have idea ?\ncheers!\n\nOptimized 3d Ashima : https://www.shadertoy.com/view/Xd3GRf",
            "flags": 0,
            "hasliked": 0,
            "id": "4sdGD8",
            "likes": 17,
            "name": "Optimized Ashima SimplexNoise2D",
            "published": 3,
            "tags": [
                "noise",
                "simplexnoise",
                "optimization",
                "noise2d",
                "ashima"
            ],
            "usePreview": 0,
            "username": "Makio64",
            "viewed": 2252
        },
        "renderpass": [
            {
                "code": "// Optimized Ashima Simplex noise2D by @makio64 https://www.shadertoy.com/view/4sdGD8\n// Original shader : https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n// snoise return a value between 0 & 1\n// 3D Version : https://www.shadertoy.com/view/Xd3GRf\n\n\n// v5.3 better permute ordering operation\n// v5.2 remove lowp : bug on low Android devices\nvec3 permute(in vec3 x) { return mod(((x*34.)+1.)*x, 289.); }\nfloat snoise(in vec2 v) {\n  vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n       x0= (i.x+i.y)*.211324865405187 + v - i;\n  float s = step(x0.x,x0.y);\n  vec2 j = vec2(1.0-s,s),\n       x1= x0 - j + .211324865405187, \n       x3= x0 - .577350269189626; \n  i = mod(i,289.);\n  vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = fract(p * .024390243902439) * 2. - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5);\n  return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}\n\n// v5.1 chat gpt optimization test\n// Changelog :\n// - Expanded and reformatted code for enhanced readability.\n// - Introduced explicit squaring for distance calculation with mSq variable.\n// - Simplified the return statement, breaking down the calculations for clarity.\n/*\nvec3 permute(in vec3 x) { return mod(x*x*34.0+x, 289.0); }\nfloat snoise(in vec2 v) {\n    vec2 i = floor((v.x + v.y) * 0.36602540378443 + v);\n    vec2 x0 = v + (i.x + i.y) * 0.211324865405187 - i;\n    float s = step(x0.x, x0.y);\n    vec2 j = vec2(1.0 - s, s);\n    vec2 x1 = x0 - j + 0.211324865405187; \n    vec2 x3 = x0 - 0.577350269189626;\n    i = mod(i, 289.0);\n    vec3 p = permute(permute(i.y + vec3(0.0, j.y, 1.0)) + i.x + vec3(0.0, j.x, 1.0));\n    vec3 x = 2.0 * fract(p * 0.024390243902439) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 a0 = x - floor(x + 0.5);\n    vec3 mSq = vec3(x0.x*x0.x + x0.y*x0.y, x1.x*x1.x + x1.y*x1.y, x3.x*x3.x + x3.y*x3.y);\n    vec3 m = max(0.5 - mSq, 0.0);\n    return 0.5 + 65.0 * dot(m*m*m*m * (-0.85373472095314 * (a0*a0 + h*h) + 1.79284291400159), a0 * vec3(x0.x, x1.x, x3.x) + h * vec3(x0.y, x1.y, x3.y));\n}\n*/\n\n\n// v5 fixed diagonal from abje comment\n/*\nlowp vec3 permute(in lowp vec3 x) { return mod( x*x*34.+x, 289.); }\nlowp float snoise(in lowp vec2 v) {\n  lowp vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n      x0 = (i.x+i.y)*.211324865405187 + v - i;\n  lowp float s = step(x0.x,x0.y);\n  lowp vec2 j = vec2(1.0-s,s),\n      x1 = x0 - j + .211324865405187, \n      x3 = x0 - .577350269189626; \n  i = mod(i,289.);\n  lowp vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = fract(p * .024390243902439) * 2. - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5);\n  return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}\n*/\n\nvoid mainImage(out vec4 o, in vec2 u) {\n    o = vec4(snoise(5.0 * u / iResolution.y + iTime));\n}\n\n// v4 \n// - add lowp precision qualifiers\n// - reorganize operation to use MAD operation where possible : https://www.opengl.org/wiki/GLSL_Optimizations#Assignment_with_MAD\n// - remove intermediate variable where its not needed\n\n\n// v3 \n// - from FabriceNeyret2 comment\n/*\nvec3 permute(vec3 x) { return mod( x*x*34.+x, 289.); }\n\nfloat snoise(vec2 v) {\n  float X=.211324865405187, Y=.366025403784439, Z=-.577350269189626, W=.024390243902439;\n  vec2 i = floor(v + (v.x+v.y)*Y),\n      x0 = v -   i + (i.x+i.y)*X,\n       j = step(x0.yx, x0),\n      x1 = x0+X-j, \n      x3 = x0+Z; \n\n  i = mod(i,289.);\n  vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))\n                           + i.x + vec3(0, j.x, 1 )   ),\n\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = 2. * fract(p * W) - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5),\n       g = a0 * vec3(x0.x,x1.x,x3.x) \n          + h * vec3(x0.y,x1.y,x3.y); \n\n  m = m*m*m*m* ( 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ) );  \n  return 130. * dot(m, g);\n}\n\nvoid mainImage( out vec4 o,  vec2 u )\n{\n \to = vec4( .5+.5*snoise( 5.*u/iResolution.y + iTime) );\n}\n\n//*/\n// v2 inspired by this thread\n// http://forum.unity3d.com/threads/2d-3d-4d-optimised-perlin-noise-cg-hlsl-library-cginc.218372/\n/*\n\nvec3 permute(vec3 x) { return mod( x*x*34.+x, 289.); }\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);\n  vec2 i = floor(v + dot(v, C.yy) );\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i,289.);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  vec3 x = 2. * fract(p * C.www) - 1.;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m = m*m*m*m*(1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ));\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130. * dot(m, g);\n}\n\n\nvoid mainImage( out vec4 o,  vec2 u )\n{\n \to = vec4( .5+.5*snoise( 5.*u/iResolution.y + iTime) );\n}\n\n\n//*/\n// v1 original version\n// https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n/*\n\n\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 o,  vec2 u )\n{\n \to = vec4( .5+.5*snoise( 5.*u/iResolution.y + iTime) );\n}\n//*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}