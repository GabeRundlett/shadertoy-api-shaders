{
    "Shader": {
        "info": {
            "date": "1657500485",
            "description": "Goop using domain warping + phong shading... I love shaders.",
            "flags": 32,
            "hasliked": 0,
            "id": "NsGBRR",
            "likes": 7,
            "name": "Shiny Goop",
            "published": 3,
            "tags": [
                "noise",
                "phong",
                "fbm",
                "warping",
                "domain",
                "specular",
                "goop"
            ],
            "usePreview": 0,
            "username": "N8Shader",
            "viewed": 343
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    //vec3 objectNormal = normalize(vec3(\n        //1.0,//length(texture(iChannel0, uv + vec2(texelSize.x, 0.0)).rgb) - length(texture(iChannel0, uv - vec2(texelSize.x, 0.0)).rgb),\n       // 1.0,\n       // 1.0,//length(texture(iChannel0, uv + vec2(0.0, texelSize.y)).rgb) - length(texture(iChannel0, uv - vec2(0.0, texelSize.y)).rgb),\n   // ));\n    vec3 objectNormal = normalize(vec3(\n        33.33 * (length(texture(iChannel0, uv + vec2(texelSize.x, 0.0)).a) - length(texture(iChannel0, uv - vec2(texelSize.x, 0.0)).a)),\n        1.0,\n        33.33 * (length(texture(iChannel0, uv + vec2(0.0, texelSize.y)).a) - length(texture(iChannel0, uv - vec2(0.0, texelSize.y)).a))\n    ));\n    vec4 texInfo = texture(iChannel0, uv);\n    vec3 diffuse = mix(texInfo.rgb, texInfo.rgb * vec3(max(dot(objectNormal, vec3(0.0, 1.0, 0.0)), 0.0)), max(2.0 * max(texInfo.a - 0.2, 0.0), 0.25));\n    vec3 spec = vec3(pow(max(dot(vec3(0.0, 1.0, 0.0), reflect(vec3(0.0, -1.0, 0.0), objectNormal)), 0.0), 32.0));\n    fragColor = vec4(diffuse + spec * (2.0 * max(texInfo.a - 0.45, 0.0) + 2.0 * max(-texInfo.a + 0.5, 0.0)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 grad4(float j, vec4 ip){\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n\nfloat snoise(vec4 v){\n  const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\n// First corner\n  vec4 i  = floor(v + dot(v, C.yyyy) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n// Permutations\n  i = mod(i, 289.0); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n// Gradients\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\nfloat fbm(vec4 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec4 shift = vec4(100.0);\n\tfor (int i = 0; i < 6; ++i) {\n\t\tv += a * snoise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\nfloat fbm2(vec2 uv, float s) {\n    return fbm(vec4(\n    fbm(vec4(uv, iTime * 0.1, s + 0.0)),\n    fbm(vec4(uv, iTime * 0.1, s + 10.0)),\n    fbm(vec4(uv, iTime * 0.1, s + 20.0)),\n    fbm(vec4(uv, iTime * 0.1, s + 30.0))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    float inerpFactor = smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, 0.5 + 0.5*\n    fbm2(uv, 0.0 + iTime * 0.1)));\n    fragColor = vec4(mix(vec3(0.0, 0.75, 0.0), vec3(1.0, 0.0, 1.0), inerpFactor),inerpFactor);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}