{
    "Shader": {
        "info": {
            "date": "1670770293",
            "description": "cassette wall",
            "flags": 0,
            "hasliked": 0,
            "id": "ds2Xzd",
            "likes": 25,
            "name": "cassette wall",
            "published": 3,
            "tags": [
                "cineshader",
                "cassette"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2375
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n#define FS 0.05 // font size\n#define FGS FS/5. // font grid size\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinderZ( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat baseBox(vec3 p, vec3 s, vec4 r){\n    float d = sdRoundedBox(p.xy,vec2(s.x,s.y),r);\n    d = max(abs(p.z)-s.z,d);\n    return d;\n}\n\nfloat charA(vec3 p){\n    vec2 prevP = p.xy;\n    float d = B(p.xy-vec2(0.0,FGS*4.),vec2(FS,FGS));\n    float d2 = B(p,vec2(FS,FGS));\n    d = min(d,d2);\n    p.x = abs(p.x);\n    d2 = B(p.xy-vec2(FGS*4.,0.),vec2(FGS,FS));\n    d = min(d,d2);\n    d = max(abs(p.z)-0.01,d);\n    return d;\n}\n\nfloat charB(vec3 p) {\n    vec2 prevP = p.xy;\n    p.y = abs(p.y);\n    float d = B(p.xy-vec2(0.0,FGS*4.),vec2(FS,FGS));\n    p.xy= prevP;\n    float d2 = B(p.xy-vec2(-FGS,0.0),vec2(FGS*3.,FGS));\n    d = min(d,d2);\n    \n    d2 = B(p.xy-vec2(-FGS*4.,0.),vec2(FGS,FS));\n    d = min(d,d2);\n    \n    p.y = abs(p.y);\n    p.xy-=vec2(FGS*2.,FGS*2.);\n    p.xy*=Rot(radians(45.));\n    d2 = B(p,vec2(FGS,FGS*3.));\n    d = min(d,d2);\n    d = max(abs(p.z)-0.01,d);\n    return d;\n}\n\nfloat tapeGear(vec3 p){\n    p.xy*=Rot(radians(20.*iTime*2.));\n    p.xy = DF(p.xy,2.);\n    p.xy -= vec2(0.042);\n    float d = B(p.xy*Rot(radians(45.0)),vec2(0.008,0.01));\n    d = max(abs(p.z)-0.01,d);\n    \n    return d;\n}\n\nfloat cassette(vec3 p){\n    vec3 prevP = p;\n    float d = baseBox(p,vec3(0.49,0.28,0.03),vec4(0.03));\n    p.z = abs(p.z)-0.05;\n    p.y-=0.06;\n    float d2 = baseBox(p,vec3(0.47,0.2,0.03),vec4(0.03));\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.y+=0.23;\n    d2 = sdBox(p,vec3(0.37,0.06,0.03));\n    float a = radians(15.);\n    p.x = abs(p.x)-0.35;\n    d2 = max(dot(p,vec3(cos(a),sin(a),0.0)),d2);\n    d = smin(d,d2,0.03);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    d2 = sdCappedCylinderZ(p-vec3(0.18,-0.23,0.0),0.1,0.02);\n    d = max(-d2,d);\n    d2 = sdCappedCylinderZ(p-vec3(0.27,-0.25,0.0),0.1,0.02);\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.z = abs(p.z)-0.04;\n    p.y-=0.04;\n    d2 = baseBox(p,vec3(0.25,0.07,0.03),vec4(0.07));\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    d2 = sdCappedCylinderZ(p-vec3(0.18,0.04,0.0),0.1,0.06);\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.z = abs(p.z)-0.03;\n    p.y-=0.04;\n    d2 = baseBox(p,vec3(0.1,0.04,0.03),vec4(0.01));\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.x = abs(p.x);\n    d2 = tapeGear((p-vec3(0.18,0.04,0.0)) * vec3(sign(prevP.x),1,1));\n    d = min(d,d2);\n    \n    p = prevP;\n    d2 = charA(p-vec3(-0.36,0.15,-0.03));\n    d = min(d,d2);\n    \n    p.x*=-1.;\n    d2 = charB(p-vec3(0.36,0.15,0.03));\n    d = min(d,d2);\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    p.y-=iTime*0.3;\n    vec3 prevP = p;\n    p.x-=iTime*0.2;\n    p.x = mod(p.x,1.0)-0.5;\n    p.y = mod(p.y,1.2)-0.6;\n    float d = cassette(p);\n    \n    p = prevP;\n    \n    p.x+=iTime*0.2;\n    p.x+=0.5;\n    p.y += 1.8;\n    p.x = mod(p.x,1.0)-0.5;\n    p.y = mod(p.y,1.2)-0.6;\n    \n    p.xz*=Rot(radians(180.));\n    float d2 = cassette(p);\n    d = min(d,d2);\n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*occ;\n    diffCol += col*vec3(1.0,1.0,0.95)*skyDiff*occ;\n    diffCol += col*vec3(1.)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.3));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0., -2.);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        float scene = mod(iTime,15.);\n        float rotY = 0.;\n        float rotX = 0.;\n        if(scene>=5. && scene<10.){\n            rotY = -20.;\n            rotX = -30.;\n        } else if(scene>=10.){\n            rotY = -20.;\n            rotX = 30.;\n        }\n        \n        ro.yz *= Rot(radians(rotY));\n        ro.xz *= Rot(radians(rotX));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}