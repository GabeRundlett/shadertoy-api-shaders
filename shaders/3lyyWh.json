{
    "Shader": {
        "info": {
            "date": "1610868114",
            "description": "A test of fork.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lyyWh",
            "likes": 4,
            "name": "Fork fractal di IWBTShyGuy 913",
            "published": 3,
            "tags": [
                "fractaldirecto"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "//referencia\n//http://glslsandbox.com/e#70359.0\n//modificado por jorge2017a1\n\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\nfloat scale;\n\n\nfloat map(vec3 p) \n{\n    vec3 pp=p;\n\tp.z -= -iTime * 2.5;\n\tp.xy = abs(p.xy) - 1.0;\n\tif (p.x < p.y) p.xy = p.yx;\n\tp.z = mod(p.z, 4.0) - 2.0;\n\n\tp.x -= 3.2;\n\tp = abs(p);\n\tfloat s = 2.0;\n\tvec3 offset =p*1.5;\n    \n    float r;\n    \n    float aa = 7.6 + 1.1 * sin(iTime);\n\tfor (float i = 0.0; i < 5.0; i++)\n    {\n\t\tp = 1.0 - abs(p - 1.0);\n\t\t r = -aa * clamp(0.38 * max(1.2 / dot(p, p), 1.), 0.0, 1.0);\n\t\ts *= r;\n\t\tp *= r;\n        p += offset;\n\t}\n\ts = abs(s);\n\tscale = s;\n\tfloat a = 100.0;\n\tp -= clamp(p, -a, a);\n\treturn (length(p)) /( s);\n}\n\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = map(p);\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\tvec3 rd = normalize(vec3(uv, 1.0));\n    vec3 ro=vec3(0, 0.5, -3);\n\tvec3 p = ro;\n    scale=1.0;\n     float d;\n     \n     //vec3 light_color1 = vec3( 1.0 );\n     vec3 light_pos1= vec3(2.0, 3.0, 10.0 );\n     vec3 final;\n     float shininess=1.0;\n     \n\tfor (int i = 1; i < 100; i++) {\n\t\tfloat d = map(p);\n\t\tp += rd * d;\n\t\tif (d < 0.001) \n        {\n\t       \n            vec3 color=mix(vec3(0.85), cos(vec3(2.0, 9., 3.) + log2(scale)) * 0.5 + 0.5, 0.5) * 10.0 / float(i);\n            \n            vec3 normal=GetNormal(p);\n            vec3 v = normalize( p-ro);\n              float diff = dot(normal, light_pos1);\n    \n            vec3 vl = normalize( light_pos1 - p );\n            vec3 ref_v = reflect( v, normal );\n            float diffuse  = max( 0.0, dot( vl, normal ) );\n            float specular = max( 0.0, dot( vl, ref_v ) );\n    \n            specular = pow( specular, shininess );\n            \n            final += color * ( diffuse + specular);\n            \n\t\t\tbreak;\n\t\t}\n        \n        \n\t}\n    \n    \n    fragColor =vec4( final,1.0);\n    \n    fragColor *= 1.0 - pow(d /(100.0) , 3.5);    \n    fragColor = pow(fragColor, vec4(0.5545));  \n\n    \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}