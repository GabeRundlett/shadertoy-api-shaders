{
    "Shader": {
        "info": {
            "date": "1654060806",
            "description": ":)\nTimelapse:\nhttps://twitter.com/Scrygl/status/1531868744883941376",
            "flags": 32,
            "hasliked": 0,
            "id": "7d3yW2",
            "likes": 4,
            "name": "30 Minutes 5/31",
            "published": 3,
            "tags": [
                "3d",
                "rings",
                "shadow"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0,uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//////////////////////////////////////////////////////////////\n#define time iTime*1.\n#define pi 3.14159265\n#define deg pi/180.\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat sdBox(vec3 p ,vec3 s) {\n    return max(abs(p.z)-s.z,max(abs(p.y)-s.y,abs(p.x)-s.x));\n}\n\nvec3 lpos(void) {\n    vec3 l = vec3(0.,1.5,5.);\n    l.x += sin(time/5.)*1.2;\n    l.z += cos(time/5.)*1.2;\n    return l;\n}\n\nfloat sdTorus(vec3 p, vec2 s) {\n    return length(vec2(length(p.xy),p.z+s.x)-s.x)-s.y;\n}\n\nvec4 map(vec3 p) {\n    vec3 o = p;\n    p.z -= 5.;\n    p.yz *= r2d(sin(time/5.)*0.1);\n    vec3 tp = p;\n    float tpf = 2.;\n    vec3 tpb = tp;\n    tp.y = (fract(tp.y*tpf)-0.5)/tpf;\n    tp.xz *= r2d(time);\n    tp.yz *= r2d(deg*60.*(abs(fract(floor(tpb.y*tpf)/tpf)-1.)*2.));\n    float d = sdTorus(p,vec2(0.1,0.01));\n    d = min(d,sdTorus(tp,vec2(0.48,0.01)));\n    d = min(d,p.y+1.);\n    return vec4(p,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd,float s) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<99;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w*s;\n        dO += dS*0.5;\n        ii += 0.01;\n        if (dO > 100. || dS< 0.001) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec3 calcNorm(vec3 p) {\n    vec2 h = vec2(0.001,0.);\n    return normalize(vec3(\n        map(p-h.xyy).w-map(p+h.xyy).w,\n        map(p-h.yxy).w-map(p+h.yxy).w,\n        map(p-h.yyx).w-map(p+h.yyx).w\n    ));\n}\n\nvec3 sh(vec3 p, vec3 n) {\n    vec3 l = lpos();\n    vec3 rd = normalize(l-p);\n    vec2 d = RM(p-n*0.003,rd,1.);\n    float s = 0.;\n    float dif = clamp(dot(rd,n),0.,1.);\n    if (length(l-p) > d.x) {\n        s = 1.;\n    }\n    return vec3(s,dif,d.x);\n}\n\nvec3 colo(vec3 p , vec3 n ,vec2 d, vec3 rd) {\n    vec3 col = 1.-d.xxx*0.1;\n    vec3 s = sh(p,n);\n    col *= 0.5;\n    col.rg += n.yz*r2d(0.2)*0.2;\n    col.b += n.x;\n    col -= s.x*0.5;\n    col += (1.-s.y*1.)*0.4;\n    vec3 l = lpos();\n    float l1 = clamp(length(l-p),0.,1.);\n    float l2 = pow(1.-length(l.xy-rd.xy*l.z),3.);\n    col = clamp(col,0.,1.);\n    col += clamp((l1*l2),0.,1.);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,2.));\n    vec2 d = RM(ro,rd,1.);\n    vec3 p = ro+rd*d.x;\n    vec3 n = calcNorm(p);\n    col += colo(p,n,d,rd);\n    float rl = 1.;\n    for (int i=0;i<3;i++) {\n        ro = p-n*0.003;\n        rd = reflect(rd,n);\n        d = RM(ro,rd,1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d,rd)*rl*0.2;\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}