{
    "Shader": {
        "info": {
            "date": "1572171838",
            "description": "Parametric coordinates provide an elegant way to draw a heart-shaped 2d curve",
            "flags": 0,
            "hasliked": 0,
            "id": "WsdXW7",
            "likes": 1,
            "name": "Pulsing heart",
            "published": 3,
            "tags": [
                "heart",
                "curve",
                "polar",
                "coordinates"
            ],
            "usePreview": 0,
            "username": "adrenoide",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "const float pi = 4. * atan(1.);\n\nfloat phi(float x) {\n\tfloat s = sin(pi * x);\n    return s*s;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 p = U / iResolution.x;\n    \n    p -= vec2 (0.5, 0.3);\n    p *= 8.;\n    \n    vec2 pm = iMouse.xy / iResolution.x;\n    \n    // heart-shaped polar curve :\n    // x = sin^3(t)\n    // y = cos(t) - cos^4(t)\n\n    float sc = 2.;\n    int nb_pts = 50;\n    float dt = 2. * pi / float (nb_pts);\n    \n    O = vec4(0.);\n    \n    for (int k=0; k < nb_pts; k++) {\n        float t = sc * (iTime + float(k) * dt);\n        float c = cos(t), s = sin(t);\n        vec2 m = (1. + phi(0.7 * iTime) / 2.) * vec2(1.5 * s*s*s, 0.5 + c - c*c*c*c);\n        float e = smoothstep (.1, .0, length(p-m));\n\n        // blending between red and blue suggests that\n        // blood's color depends on whether it enters or\n        // exits the heart.\n        \n        O += vec4(mix (vec3(e, 0., 0.), vec3(0., 0., e), (1. + s) / 2.), 1.);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}