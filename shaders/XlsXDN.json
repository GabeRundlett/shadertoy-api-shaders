{
    "Shader": {
        "info": {
            "date": "1437359966",
            "description": "Money filter based on \"Free Engraved Illustration Effect Action for Photoshop\" - http://snip.ly/j0gq\nMy website: http://kyrie.pe",
            "flags": 0,
            "hasliked": 0,
            "id": "XlsXDN",
            "likes": 66,
            "name": "Money filter",
            "published": 3,
            "tags": [
                "filter",
                "effect",
                "money",
                "engraved"
            ],
            "usePreview": 0,
            "username": "giacomo",
            "viewed": 4956
        },
        "renderpass": [
            {
                "code": "\n// Money filter by Giacomo Preciado\n// Based on: \"Free Engraved Illustration Effect Action for Photoshop\" - http://snip.ly/j0gq\n// e-mail: giacomo@kyrie.pe\n// website: http://kyrie.pe\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.yy;\n    \n    float amplitud = 0.03;\n    float frecuencia = 10.0;\n    float gris = 1.0;\n    float divisor = 4.8 / iResolution.y;\n    float grosorInicial = divisor * 0.2;\n    \n    const int kNumPatrones = 6;\n    \n    // x: seno del 치ngulo, y: coseno del 치ngulo, z: factor de suavizado\n\tvec3 datosPatron[kNumPatrones];\n    datosPatron[0] = vec3(-0.7071, 0.7071, 3.0); // -45\n    datosPatron[1] = vec3(0.0, 1.0, 0.6); // 0\n    datosPatron[2] = vec3(0.0, 1.0, 0.5); // 0\n    datosPatron[3] = vec3(1.0, 0.0, 0.4); // 90\n    datosPatron[4] = vec3(1.0, 0.0, 0.3); // 90\n    datosPatron[5] = vec3(0.0, 1.0, 0.2); // 0\n\n    vec4 color = texture(iChannel0, vec2(fragCoord.x / iResolution.x, xy.y));\n    fragColor = color;\n    \n    for(int i = 0; i < kNumPatrones; i++)\n    {\n        float coseno = datosPatron[i].x;\n        float seno = datosPatron[i].y;\n        \n        // Rotaci칩n del patr칩n\n        vec2 punto = vec2(\n            xy.x * coseno - xy.y * seno,\n            xy.x * seno + xy.y * coseno\n        );\n\n        float grosor = grosorInicial * float(i + 1);\n        float dist = mod(punto.y + grosor * 0.5 - sin(punto.x * frecuencia) * amplitud, divisor);\n        float brillo = 0.3 * color.r + 0.4 * color.g + 0.3 * color.b;\n\n        if(dist < grosor && brillo < 0.75 - 0.12 * float(i))\n        {\n            // Suavizado\n            float k = datosPatron[i].z;\n            float x = (grosor - dist) / grosor;\n            float fx = abs((x - 0.5) / k) - (0.5 - k) / k; \n            gris = min(fx, gris);\n        }\n    }\n    \n    \n    float mx = iMouse.x;\n    if(iMouse.z < 1.0) mx = iResolution.x * 0.5;\n    if(fragCoord.x < mx) fragColor = vec4(gris, gris, gris, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}