{
    "Shader": {
        "info": {
            "date": "1569999341",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "tsyGDz",
            "likes": 3,
            "name": "shadetober #01 (ring)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "float ring(vec2 uv, vec2 pos, float outer, float inner) {\n    pos *= vec2(sin(iTime * 3.), cos(iTime));\n    pos.x += 0.5;\n    outer *= cos(iTime);\n    inner *= sin(iTime);\n    \n    // calculate distance from ring\n    float d = distance(uv, pos);\n    float imul = step(inner, d);\n    float omul = 1.0 - step(outer, d);\n    \n    return imul * omul;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // is it inside a ring\n    float draw = ring(uv, vec2(0.5, 0.5), 0.5, 0.4);\n    draw += ring(uv, vec2(1.5, 0.5), 0.5, 0.4);\n    draw += ring(uv, vec2(1.5, 1.5), 0.5, 0.2);\n    draw += ring(uv, vec2(2.0, 0.2), 0.5, 0.4);\n    \n    // Output to screen\n    fragColor = draw * vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}