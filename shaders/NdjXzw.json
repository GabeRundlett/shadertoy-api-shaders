{
    "Shader": {
        "info": {
            "date": "1619938337",
            "description": "@oneshade's recent parabola stuff made me wonder if a working MiraScope was possible.\nThis was previously done by @benburrill [url]https://www.shadertoy.com/view/wtKGzd[/url] , that I could find.\nUL: Cross-eyed stereo.\nLL: Cut-Away.\nR: Matte interior.",
            "flags": 32,
            "hasliked": 0,
            "id": "NdjXzw",
            "likes": 10,
            "name": "mirascope",
            "published": 3,
            "tags": [
                "illusion",
                "mirror",
                "parabolic",
                "mirascope"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "// @oneshade's recent parabola stuff made me wonder if a working MiraScope was possible.\n// This was previously done by @benburrill [url]https://www.shadertoy.com/view/wtKGzd[/url] , that I could find.\n// UL: Cross-eyed stereo.\n// LL: Cut-Away.\n// R: Matte interior.\n\n\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\nbool gDemoView  = false;\nbool gDebugView = false;\nmat2 gSceneRot  = mat2(1.0, 0.0, 0.0, 1.0);\nconst float gutter = 0.175;\nconst float gutterInv = 1.0 - gutter;\n\n// positive for cross-eyed, make negative for wall-eyed viewing.\nconst float stereoSeparation = 0.4;\n\nstruct pol3 {\n    float rho;\n    float tht;\n    float phi;\n};\n\npol3 sphericalFromCartesian(in vec3 cartesian) {\n    pol3 ret;\n\n    ret.tht = atan(cartesian.z, cartesian.x);\n    ret.phi = acos(dot(normalize(cartesian), vec3(0.0, 1.0, 0.0))) - PI/2.0;\n    ret.rho = length(cartesian);\n\n    return ret;\n}\n\nfloat maxPart(vec3 v) {\n    return max(v.x, max(v.y, v.z));\n}\n\n//--------------------------------------------------------------------------------\n\n// I forget the location, but this pattern is from IQ.\n\nvec2 opUnion(in vec2 q1, in vec2 q2) {\n    return q1.x < q2.x ? q1 : q2;\n}\n\nvec2 opSubtraction(in vec2 q1, in vec2 q2) {\n    return -q1.x > q2.x ? vec2(-q1.x, q1.y) : q2;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\n//--------------------------------------------------------------------------------\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCylinder( vec3 p, float r )\n{\n  return length(p.xz) - r;\n}\n\nfloat sdCappedCylinderPrecomputedQ(vec2 q, float h, float r)\n{\n  vec2 d = abs(q) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCrateBox( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdParabola( in vec2 pos, in float k )\n{\n    pos.x = abs(pos.x);\n    \n    float ik = 1.0/k;\n    float p = ik*(pos.y - 0.5*ik)/3.0;\n    float q = 0.25*ik*ik*pos.x;\n    \n    float h = q*q - p*p*p;\n    float r = sqrt(abs(h));\n\n    float x = (h>0.0) ? \n        // 1 root\n        pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :\n        // 3 roots\n        2.0*cos(atan(r,q)/3.0)*sqrt(p);\n    \n    return length(pos-vec2(x,k*x*x)) * sign(pos.x-x);\n}\n\nfloat sdSphere( in vec3 pos, in float r ) {\n    return length(pos) - r;\n}\n\n\nfloat sdMiraScope(in vec3 pos, in float separation, in float thickness, in float holeRadius) {\n    // convert pos to 2D by revolving it around Y\n    vec2 p = vec2(length(pos.xz), pos.y);\n\n    // an up and down facing parabola, a little apart\n    float sdTop = sdParabola(vec2(p.x, p.y + separation),  0.5);\n    float sdBot = sdParabola(vec2(p.x, p.y - separation), -0.5);\n\n    // intersected\n    float sdMira = max(sdTop, sdBot);\n\n    // onioned\n    sdMira = abs(sdMira) - thickness;\n\n    // slice off the top so we can see inside!\n    // sdMira = max(sdMira, p.y - separation * 0.9);\n    \n    // cut a hole in the top so we can see inside!\n    // this has somewhat less visibility into the interior compared to slicing,\n    // but avoids long thin wedges.\n    sdMira = opSubtraction(sdCappedCylinderPrecomputedQ(vec2(p.x, p.y - separation + thickness), holeRadius, separation * 0.2 + thickness * 3.0), sdMira);\n\n    return sdMira;\n}\n\n//-----------------------------------------------------------------------\n\n\n// set up scene position of stuff once per pixel\nconst float gMiraThickness = 0.01;\nconst float gMiraSep       = 0.3;\n      float gMiraHole      = 0.3;\nconst float gTableThick    = 0.01;\n\n\nvec3 gPosMira;\nvec3 gPosColumn;\nvec3 gPosCrate;\nvec3 gCrateSize;\nvec3 gPosTable;\n\nvoid configMap() {\n    const float columnDist = 0.565;\n    const float crateSize = 0.07;\n    const float crateLift = 0.014;\n \n    gPosMira   = vec3(0.0);\n    gPosColumn = vec3(columnDist, -0.22, columnDist);\n    gPosCrate  = vec3(0.0, -gMiraSep + crateSize + gMiraThickness + crateLift, 0.0);\n    gCrateSize = vec3(crateSize);\n    \n    gPosTable  = vec3(0.0, - gMiraSep - gMiraThickness - gTableThick - 0.1, 0.0);\n}\n\n// return.x = distance\n// return.y = material\nvec2 map(in vec3 p) {\n\n    p.xz *= gSceneRot;\n\n    vec2 Q = vec2(1e9, 0.0);\n\n    // mirascope\n    Q = opUnion(Q, vec2(sdMiraScope(p - gPosMira, gMiraSep, gMiraThickness, gMiraHole), 1.0)) ;\n\n    // 4 colums\n    vec3 pAbs = vec3(abs(p.xz), p.y).xzy;\n    Q = opUnion(Q, vec2(sdCappedCylinder(pAbs - gPosColumn, 0.03, 0.4), 3.0));\n    \n    if (gDebugView) {\n        // slice off half the mirascope + columns\n        Q = opSubtraction(vec2(p.z, 2), Q);\n    }\n\n    Q = opUnion(Q, vec2(sdCrateBox(p - gPosCrate, vec3(gCrateSize), 0.0) - 0.01, 4.0));\n    Q = opUnion(Q, vec2(sdCappedCylinder(p    -       gPosTable, 0.9, gTableThick), 3.0));    \n\n    return Q;\n}\n\nconst float closeEps = 0.001;\n\nvec2 march(in vec3 ro, in vec3 rd) {\n    const int maxSteps = 100;\n\n    vec2 Q = vec2(1e9);\n\n    vec3 p = ro;\n    float t = 0.0;\n    for (int n = 1; n <= maxSteps; ++n) {\n        Q = map(ro + rd * t);\n        float closeEnoughEps = (n == maxSteps ? 0.2 : closeEps);\n        if (Q.x < closeEnoughEps) {\n            return vec2(t, Q.y);\n        }\n        t += Q.x;\n        if (t > 200.0) {\n            return vec2(t, Q.y);\n        }\n    }\n    return vec2(t, Q.y);\n}\n\n\n// IQ: https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.002;      // replace by an appropriate value\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e * map(p + e*h).x;\n    }\n    return normalize(n);\n}\n\nvec3 lightDirection = normalize(vec3(1.0, -4.0, -0.5));\n\nfloat calcDiffuseAmount(in vec3 p, in vec3 n) {\n    return clamp(dot(n, -lightDirection), 0.0, 1.0);\n}\n\nconst float AOFactorMin = 0.5;\nconst float AOFactorMax = 1.0;\nfloat calcAOFactor(in vec3 p, in vec3 n) {\n    const float sampleDist = 0.03;\n    float dist = smoothstep(0.0, sampleDist, map(p + n * sampleDist).x);\n    return mix(AOFactorMin, AOFactorMax, (dist));\n}\n\nfloat calcShadowLight(in vec3 p) {\n    float t = march(p - lightDirection * 0.01, -lightDirection).x;\n    return t > 40.0 ? 1.0 : 0.0;\n}\n\nconst vec3 albedo1 = vec3(0.0, 0.6, 1.0);\nconst vec3 albedo2 = vec3(0.7, 0.2, 0.3);\nconst vec3 albedo3 = vec3(0.5, 0.1, 0.2);\nconst vec3 albedo4 = vec3(1.0, 1.0, 0.2);\nconst vec3 albedo5 = vec3(1.0, 0.2, 0.2);\n\nvec3 dirToRGB(in vec3 rd) {\n    float tht = atan(rd.z, rd.x);\n    float phi = acos(dot(normalize(rd), vec3(0.0, 1.0, 0.0)));\n    vec3 col = rd * 0.5 + 0.5;\n    col *= smoothstep(0.002, -0.002, sin(tht       * 4.0)) * -0.3 + 1.0;\n    col *= smoothstep(0.002, -0.002, sin(phi * 2.0 * 4.0)) * -0.3 + 1.0;\n    col = mix(col, col / max(col.r, max(col.g, col.b)), 0.2);\n    return col;\n}\n\nvec3 sky(in vec3 rd) {\n    vec3 col = normalize(dirToRGB(rd));\n    col *= rd.y < 0.0 ? 0.5 : 1.0;\n    col = col * 0.1 + 0.1;\n    return col;\n}\n\nvec3 getAlbedo(in int material, in vec3 pCrt, in pol3 pPol) {\n    if (material == 1 || material == 2) {\n        float th = mod((pPol.tht + 0.5 + pPol.rho * 7.0 * sign(pCrt.y)) * 5.0, PI * 2.0) / 5.0 - 0.5;\n        float rh = mod((pPol.rho * 5.0 + 1.15), 1.0) - 0.5;\n        float x = length(vec2(th, rh) * 5.0) - 2.0;\n        float c = smoothstep(0.17, 0.0, x);\n        c = c * 0.2 + 0.1;\n\n        vec3 rgb1 = vec3(0.2);\n        vec3 rgb2 = vec3(1.0, 0.9, 0.8) * c;\n        \n        if (material == 2) {\n            return rgb2;\n        }\n        else {\n            if (gDemoView) {\n                return mix(rgb1, rgb2, smoothstep(-0.4, 0.4, sin(gTime * 2.0)));\n            }\n            else {\n                return rgb2;\n            }\n        }\n    }\n    else if (material == 3) {\n        return vec3(0.2);\n    }\n    else if (material == 4) {\n        vec3 rgb = dirToRGB(normalize(pCrt - gPosCrate));\n        rgb /= length(rgb);\n        return rgb;\n    }\n    else {\n        return vec3(1e9, 0.0, 1e9);\n    }\n}\n\nvec3 getReflectivity(in int material, in vec3 pCrt, in pol3 pPol) {\n    if (material == 1) {\n        vec3 rgb = vec3(0.9);\n        if (gDemoView) {\n            return mix(rgb, vec3(0.0), smoothstep(-0.4, 0.4, sin(gTime)));\n        }\n        else {\n            return rgb;\n        }\n    }\n    else if (material == 2) {\n        return vec3(0.0);\n    }\n    else if (material == 3) {\n        return vec3(0.2);\n    }\n    else if (material == 4) {\n        return vec3(0.2);\n    }\n    else {\n        return vec3(0.0, 1e9, 0.0);\n    }\n}\n\nvec3 getEmissive(in int material, in vec3 pCrt, in pol3 pPol) {\n    return vec3(0.0);\n}\n\n\n//------------------------------------------------------------------------------\n\nvec3 render(in vec3 ro, in vec3 rd) {\n    vec3 rgb = vec3(0.0);\n\n    int bouncesLeft = 20;\n\n    vec3 contributionLeft = vec3(1.0);\n\n    while (bouncesLeft >= 0 && maxPart(contributionLeft) > 0.001) {\n        bouncesLeft -= 1;\n        vec2 q = march(ro, rd);\n        vec3 p = ro + q.x * rd;\n        if (length(p) > 150.0) {\n            rgb += sky(rd) * contributionLeft;\n            break;\n        }\n\n        vec3 normal = calcNormal(p);\n\n        vec3 ptCrt = p;\n        ptCrt.xz *= gSceneRot;\n        pol3 ptSph = sphericalFromCartesian(ptCrt);\n\n        int material = int(q.y);\n\n        // distinguish inside and outside of mirascope\n        if (material == 1) {\n            if (dot(p, normal) > 0.0 || abs(normal.y) < 0.7) {\n                material = 2;\n            }\n        }\n\n        float incomingLight = 1.0;\n        incomingLight = min(incomingLight, calcDiffuseAmount(p, normal));\n        if (incomingLight > 0.0) {\n            incomingLight = min(incomingLight, calcShadowLight(p));\n        }\n        float ambient = 0.2 * calcAOFactor(p, normal);\n        incomingLight += ambient;\n\n        float fres = 0.4 + 0.8 * clamp(pow(1.0 - abs(dot(rd, normal) - 0.1), 2.0), 0.0, 1.0);\n        \n        fres = 1.0;\n\n        vec3 reflectivity = fres * getReflectivity(material, ptCrt, ptSph);\n        vec3 diffuse = incomingLight * getAlbedo(material, ptCrt, ptSph);\n        vec3 emissive = getEmissive(material, ptCrt, ptSph);\n        \n        rgb += diffuse * (1.0 - reflectivity) * contributionLeft;\n        rgb += emissive * contributionLeft;\n        contributionLeft *= reflectivity;\n          \n        ro = p + normal * 0.05;\n        rd = reflect(rd, normal);\n    }\n\n    return rgb;\n}\n\n\nvoid mainImage( out vec4 RGBA, in vec2 XY ) {\n    vec4 persistedInfo = texelFetch(iChannel0, ivec2(0, 0), 0);\n    \n    bool stereo = iMouse.x < iResolution.x * gutter && iMouse.y > iResolution.y * gutterInv;\n    bool leftEye = XY.x > iResolution.x / 2.0;\n    \n    vec2 Res = iResolution.xy;\n    Res.x   *= stereo ? 0.5 : 1.0;\n    XY.x    -= (stereo && leftEye) ? iResolution.x / 2.0 : 0.0;\n\n    setupCoords(Res, 4.2);\n    setupTime(persistedInfo[2]);\n    vec2  uv        = worldFromScreen(XY);\n    vec2  ms        = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n    float smoothEps = gWorldFromScreenFac * 2.0;\n\n    // look-from and look-to points\n    // right-handed system where x is right, y is up, z is forward.\n    float t = gTime * 0.23;\n    vec3 trgPt = vec3(0.0, -0.2, 0.0);\n    \n    float camTheta = -ms.x * PI * 1.25;\n    float camAlttd = sin(t * 0.32) * 0.2 - (ms.y - 0.9) * 3.0;\n    \n    bool defaultView = stereo || length(iMouse.xy) < 1.0;\n    gDebugView      = !defaultView && (length(iMouse.xy) < iResolution.x * gutter);\n    if (gDebugView) {\n        camTheta = sin(iTime * 0.10) * 0.1;\n        camAlttd = sin(iTime * 0.12) * 0.1;\n    }\n    else if (defaultView) {\n        camAlttd = mix(10.0, 0.9, smoothstep(0.0, 8.0, gTime));\n    }\n    \n    gDemoView = gDebugView || iMouse.x > iResolution.x * gutterInv;\n    \n    vec3 camPt = vec3(sin(camTheta), camAlttd, cos(camTheta)) * (gDebugView ? 1.7 : 4.0);\n    \n    // camera's forward, right, and up vectors. right-handed.\n    vec3 camFw = normalize(trgPt - camPt);\n    vec3 camRt = cross(camFw, vec3(0.0, 1.0, 0.0));\n    vec3 camUp = cross(camRt, camFw);\n    \n    bool AA = !false;\n    int AAM = AA ? 3 : 1;\n    float AAdelt[3] = float[3](0.0, -0.3, 0.3);\n    float aaAccum = 0.0;\n\n    if (stereo) {\n        camPt += camRt * (leftEye ? -1.0 : 1.0) * stereoSeparation / 2.0;\n        camFw = normalize(trgPt - camPt);\n        camRt = cross(camFw, vec3(0.0, 1.0, 0.0));\n        camUp = cross(camRt, camFw);\n    }\n    \n    gSceneRot = rot2(gTime * PI * 2.0 / 30.0);\n    configMap();\n    \n    vec3 rgb = vec3(0.0);\n    \n    for (int aaN = 0; aaN < AAM; ++aaN) {\n    for (int aaM = 0; aaM < AAM; ++aaM) {\n\n        // ray origin and direction\n        float uvx  = uv.x - AAdelt[aaN] * gWorldFromScreenFac;\n        float uvy  = uv.y - AAdelt[aaM] * gWorldFromScreenFac;\n        vec3 ro    = camPt;\n        vec3 rd    = normalize(camFw + uvx * camRt + uvy * camUp);\n\n        rgb += render(ro, rd);\n        aaAccum += 1.0;\n    }}\n    \n    rgb /= aaAccum;\n\n\n    // Vignette from Ippokratis https://www.shadertoy.com/view/lsKSWR\n\tvec2 pq = XY / Res;   \n    pq *=  1.0 - pq.yx;    \n    float vig = pq.x*pq.y * 200.0;    \n    vig = pow(vig, 0.15);\n    rgb *= vig;\n\n    rgb = sqrt(rgb);\n\n    RGBA = vec4(rgb, 1.0);\n}\n\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\n// This buffer just does mouse filtering\n\n// 0, 0:\n// [0] = is mouse down\n// [1] = is time frozen\n// [2] = current time\n// [3] = timescale\n\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    ivec2 IJ = ivec2(XY);\n\n    RGBA = texelFetch(iChannel0, IJ, 0);\n\n    if (iFrame == 0 || IJ.x != 0 || IJ.y != 0) {\n        RGBA = vec4(0.0, 0.0, iTime, 1.0);\n        return;\n    }\n\n    bool  mouseWasDown = RGBA[0] == 1.0;\n    bool  timeIsFrozen = RGBA[1] == 1.0;\n    float time         = RGBA[2];\n    float timeScale    = RGBA[3];\n\n    bool mouseIsDown = iMouse.z > 0.0;\n\n    timeIsFrozen = timeIsFrozen ^^ (!mouseIsDown && mouseWasDown);\n    \n    timeIsFrozen = mouseIsDown;\n\n    timeScale = clamp(timeScale + (timeIsFrozen ? -0.01 : 0.01) * 60.0 / iFrameRate, 0.0, 1.0);\n    time += iTimeDelta * timeScale;\n\n    RGBA[0] = mouseIsDown  ? 1.0 : 0.0;\n    RGBA[1] = timeIsFrozen ? 1.0 : 0.0;\n    RGBA[2] = time;\n    RGBA[3] = timeScale;\n\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Fork of \"boilerplate stuff\" by elenzil. https://shadertoy.com/view/7dX3R2\n// 2021-04-05 18:18:15\n\nconst float PI  = 3.14159265359;\nconst float TAO = PI * 2.0;\n\n// global time parameter\nfloat gTime;\n\nvec2  gCanvasRes;\nfloat gCanvasSmallRes;\nfloat gZoom;\nfloat gScreenFromWorldFac;\nfloat gWorldFromScreenFac;\n\n\n// to prevent loop-unrolling\n#define ZERO (min(0, int(iFrame)))\n\n\n// set up world coordinates where a unit circle fits\n// in the smallest dimension of the canvas, plus a zoom factor.\nvoid setupCoords(in vec2 canvasResolution, in float zoom) {\n\n    gCanvasRes = canvasResolution;\n\n    // the smallest dimension of the canvas\n    gCanvasSmallRes = min(canvasResolution.x, canvasResolution.y);\n    \n    // small = shrink\n    gZoom = zoom;\n    \n    // factor to get from world scale to screen scale\n    gScreenFromWorldFac = gZoom * gCanvasSmallRes / 2.0;\n    \n    // factor to get from screen scale to world scale\n    gWorldFromScreenFac = 1.0 / gScreenFromWorldFac;\n}\n\nvec2 worldFromScreen(in vec2 screenPt) {\n    return (screenPt - gCanvasRes / 2.0) * gWorldFromScreenFac;;\n    \n}\n\n// in case we want to speed or slow down things from iTime.\n// this needs to be called in each pass.\nvoid setupTime(in float time) {\n    gTime = time;\n}\n\nmat2 rot2(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}