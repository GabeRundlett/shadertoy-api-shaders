{
    "Shader": {
        "info": {
            "date": "1685774359",
            "description": "bouncing time, mouse effects time and palette mixing",
            "flags": 0,
            "hasliked": 0,
            "id": "mt3XWj",
            "likes": 2,
            "name": "bouncing time üêÅ-able",
            "published": 3,
            "tags": [
                "fractal",
                "stars",
                "shiny"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 157
        },
        "renderpass": [
            {
                "code": "// Fork of \"my second shader! -voidbyte\" by Voidbyte. https://shadertoy.com/view/cl3SDj\n// (which was forked from https://www.shadertoy.com/view/mlcSWj by facundopri)\n// 2023-06-03 06:21:20\n\n//#define palettea vec3(0.500, 0.500, 0.500)\n//#define paletteb vec3(0.666, 0.666, 0.666)\n//#define palettec vec3(1.000, 1.000, 1.000)\n//#define paletted vec3(0.000, 0.333, 0.667)\n\n//#define palettea vec3(0.086,0.506,0.851)\n//#define paletteb vec3(0.906,0.651,0.064)\n//#define palettec vec3(0.391,0.929,0.882)\n//#define paletted vec3(4.608,3.265,1.026)\n\n#define palettea  vec3(0.5, 0.5, 0.5)\n#define paletteb vec3(0.5, 0.5, 0.5)\n#define palettec vec3(1.0, 1.0, 1.0)\n#define paletted vec3(0.263, 0.416, 0.557)\n\nfloat bouncedTime;\nvec2 mouse;\n\nvec3 palette(float t) {\n    return palettea + paletteb*cos(6.28318*((1.0+fract(iTime))*(mouse.x+0.5)/(mouse.y+0.5))*(palettec*t*paletted));\n}\n\n#define PERIOD   3.5\n#define SCALE    (2.0*(mouse.y/mouse.x))\n\nfloat bounceTime() {\n    float cycle = float(int(iTime*SCALE/PERIOD*SCALE));\n    float div2 = float(int(cycle/2.0));\n    if(div2*2.0==cycle) { //even\n        // go backwards\n        float m2 = mod(iTime*SCALE,PERIOD*SCALE);\n        return (PERIOD - m2)/SCALE;\n    } else {\n        // go forawrds\n        float m2 = mod(iTime*SCALE,PERIOD*SCALE);\n        return m2/SCALE;\n    }\n}\n\n#define iTime  bouncedTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n \n    mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0,0.5) : iMouse.xy/iResolution.xy;\n    bouncedTime = bounceTime();\n \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n        \n        float d = length(uv) * exp(-length(uv0));\n        vec3 col = palette(length(uv0) + i*0.1 + iTime);\n\n        d = sin(d*8.0 + iTime)/8.0;\n        d = abs(d);\n        //d = pow(0.01 / d, 2.0);\n        d = pow(0.01 / d, .99+mouse.x);\n\n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}