{
    "Shader": {
        "info": {
            "date": "1521047088",
            "description": "The paternoster is a continuous elevator - fun to ride but hazardous",
            "flags": 0,
            "hasliked": 0,
            "id": "XsVyz1",
            "likes": 16,
            "name": "Paternoster",
            "published": 3,
            "tags": [
                "architecture",
                "android",
                "elevator"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1779
        },
        "renderpass": [
            {
                "code": "// \"Paternoster\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nfloat dstFar, tCur, flHt, spd, rAngA;\nint idObj;\nconst int idFlCl = 1, idFrm = 2, idPat = 3, idLt = 4, idWl = 5, idRob = 6, idEye = 7;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat RobDf (vec3 p, float dMin, float szFac)\n{\n  vec3 q;\n  float d;\n  p /= szFac;\n  dMin /= szFac;\n  p.xz = - p.xz;\n  q = p;  q.y -= 2.3;\n  d = max (PrSphDf (q, 0.85), - q.y - 0.2);\n  q = p;  q.y -= 1.55;\n  d = min (d, PrRoundCylDf (q.xzy, 0.9, 0.28, 0.7));\n  q = p;  q.x = abs (q.x) - 0.3;  q.y -= 3.1;\n  q.xy = Rot2D (q.xy, 0.2 * pi);\n  q.y -= 0.25;\n  d = min (d, PrRoundCylDf (q.xzy, 0.06, 0.04, 0.3));\n  q = p;  q.x = abs (q.x) - 1.05;  q.y -= 2.1;\n  q.yz = Rot2D (q.yz, rAngA);\n  q.y -= -0.5;\n  d = min (d, PrRoundCylDf (q.xzy, 0.2, 0.15, 0.6));\n  q = p;  q.x = abs (q.x) - 0.4;  q.y -= 0.475;\n  d = min (d, PrRoundCylDf (q.xzy, 0.25, 0.15, 0.55));\n  DMIN (idRob);\n  q = p;  q.x = abs (q.x) - 0.4;  q.yz -= vec2 (2.7, 0.7);\n  d = PrSphDf (q, 0.15);\n  DMIN (idEye);\n  dMin *= szFac;\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, sy;\n  dMin = dstFar;\n  sy = p.y - sign (p.x) * (spd + 32. * flHt) + flHt;\n  q = p;  q.y = mod (q.y - 0.2, 2. * flHt) - flHt;\n  d = PrBoxDf (q, vec3 (20., 0.3, 5.));\n  q.x = abs (q.x) - 0.8;\n  d = max (d, - PrBox2Df (q.xz, vec2 (0.41, 0.51)));\n  DMIN (idFlCl);\n  q = p;  q.z = abs (q.z) - 5.;\n  d = max (abs (q.z) - 0.1, 0.);\n  DMIN (idWl);\n  qq = p;  qq.y = mod (qq.y + flHt, 2. * flHt) - flHt;\n  q = qq;  q.x = abs (abs (q.x) - 0.8) - 0.44;  q.z -= -0.5;\n  d = PrCylDf (q.xzy, 0.04, flHt);\n  DMIN (idFrm);\n  q = qq;  q.x = abs (q.x) - 0.8;  q.yz -= vec2 (1.1, -0.5);\n  d = max (PrCylDf (q.yzx, 0.04, 0.42), q.z);\n  DMIN (idFrm);\n  q = qq;  q.x = abs (q.x) - 0.8;  q.y -= 1.3;\n  d = PrBoxDf (q - vec3 (0., 0., -0.51), vec3 (0.42, 0.2, 0.01));\n  DMIN (idFrm);\n  q = qq;  q.x = mod (q.x, 2.) - 1.;  q.y -= 1.4;  q.z = abs (q.z) - 2.;\n  d = PrCylDf (q.xzy, 0.2, 0.05);\n  DMIN (idLt);\n  q = qq;\n  d = PrBoxDf (q, vec3 (2., flHt, 0.5));\n  qq = p;  qq.x = abs (qq.x) - 0.8;  qq.y = mod (sy, 2. * flHt) - flHt;\n  q = qq;\n  d = max (d, - PrBoxDf (q + vec3 (0., 0., 0.02), vec3 (0.4, 1., 0.5)));\n  DMIN (idPat);\n  q = qq;  q.y -= 0.97;\n  d = PrCylDf (q.xzy, 0.15, 0.03);\n  DMIN (idLt);\n  if (Hashff (77.7 * floor (sy / (2. * flHt))) > 0.2) {\n    q = qq;  q.y -= -0.97;\n    dMin = RobDf (q, dMin, 0.15 + 0.15 * Hashff (37.7 * floor (sy / (2. * flHt))));\n  }\n  dMin = max (dMin, max (abs (p.y) - 3. * flHt, abs (p.x) - 20.));\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = 0.1 + float (j) / 16.;\n    ao += max (0., d - 3. * ObjDf (ro + d * rd));\n  }\n  return 0.7 + 0.3 * clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nvec3 ShStagGrid (vec2 p, vec2 g)\n{\n  vec2 q, sq, ss;\n  q = p * g;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.03, 0.06, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.2 * smoothstep (0.35, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ltDir, ltPos[3], rg;\n  vec2 vf;\n  float dstObj, spec, wdPos, s, h, dfSum, spSum, at, ao;\n  ltPos[0] = vec3 (1.5, 1., -2.);\n  ltPos[1] = vec3 (-1.5, 1., -2.);\n  ltPos[2] = vec3 (0., 1., 2.);\n  flHt = 1.5;\n  spd = 0.3 * tCur;\n  rAngA = 2. * pi * (0.5 - abs (mod (0.3 * tCur, 1.) - 0.5));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar && idObj == idPat) {\n    vec3 ror;\n    ror = ro + dstObj * rd;\n    vn = ObjNf (ror);\n    if (vn.z < 0. && abs (abs (ror.x) - 0.8) < 0.3 && \n       abs (mod (ror.y - sign (ror.x) * spd + flHt, 2. * flHt) - flHt - 0.2) < 0.6) {\n      ro = ror;\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      dstObj = ObjRay (ro, rd);\n    }\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj == idFlCl) {\n      if (abs (vn.y) < 0.001) col4 = vec4 (0.2, 0.2, 0.2, 0.);\n      else if (abs (ro.z + 0.5) < 0.1 && vn.y > 0.001 && abs (abs (ro.x) - 0.8) < 0.4)\n         col4 = vec4 (0.8, 0.8, 0.85, -1.);\n      else {\n        s = length (vec2 (mod (ro.x, 2.) - 1., abs (ro.z) - 2.));\n        if (vn.y > 0.001) col4 = mix (vec4 (0.3, 0.2, 0.1, -1.), vec4 (0.27, 0.15, 0., -1.),\n           smoothstep (0.4, 0.5, Fbm2 (vec2 (2., 16.) * ro.xz))) * (1. - 0.2 *\n           SmoothBump (0.03, 0.07, 0.01, mod (2. * ro.z, 1.))) * (1. - 0.2 * smoothstep (0.4, 1., s));\n        else col4 = vec4 (0.3, 0.3, 0.25, -1.) * (1. - 0.1 * smoothstep (0.4, 0.9, s));\n      }\n    } else if (idObj == idWl) {\n      s = mod (ro.x + 2., 4.) - 2.;\n      if (abs (s) < 0.4 && ro.y < 0.8) {\n        if (abs (s) < 0.35 && abs (ro.y - 0.4) < 0.15) col4 = vec4 (0.8, 0.6, 0.2, -1.) *\n           (1. - 0.1 * SmoothBump (0.3, 0.7, 0.1, mod (32. * length (vec2 (0.5 * s, ro.y - 0.4)), 1.)));\n        else if (length (vec2 (s, ro.y) - vec2 (0.28, -0.2)) < 0.06) col4 = vec4 (0.3, 0.1, 0., 0.1);\n        else col4 = vec4 (0.4, 0.2, 0., 0.1);\n      } else if (ro.z < 0. && (step (abs (abs (abs (ro.x) - 1.2) - 0.1), 0.03) *\n         step (abs (ro.y - 0.3), 0.2) > 0. || abs (length (vec2 (abs (ro.x) - 1.2, ro.y - 0.3)) -\n         0.35) < 0.03)) {\n        col4 = vec4 (1., 0.4, 0., 0.2);\n      } else {\n        col4 = vec4 (0.5, 0.6, 0.4, 0.2);\n        rg = ShStagGrid (ro.xy, (3./1.2) * vec2 (1., 2.));\n        col4 *= rg.y;\n        rg.xz *= sign (vn.z);\n        if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n        else vn.zx = Rot2D (vn.zx, rg.x);\n      }\n    } else if (idObj == idFrm) {\n      if (vn.z < 0. && abs (abs (ro.x) - 0.8) < 0.4 &&\n         abs (mod (ro.y + flHt, 2. * flHt) - flHt) > 1.13) {\n        col4 = vec4 (0.8, 0.8, 0.9, 0.3);\n        vn.yz = Rot2D (vn.yz, -0.1 * pi * (1. + sin (2. * pi * mod (32. * ro.y, 1.))));\n      } else {\n        col4 = vec4 (0.5, 0.3, 0., 0.3);\n      }\n    } else if (idObj == idPat) {\n      wdPos = -99.;\n      s = mod (ro.y - sign (ro.x) * spd + flHt, 2. * flHt) - flHt;\n      h = 17.1 * Hashff (33.3 * floor ((ro.y - sign (ro.x) *\n         (spd + 32. * flHt) + flHt) / (2. * flHt)));\n      if (abs (abs (ro.x) - 0.8) > 0.4 || ro.z > 0.5) {\n        if (abs (ro.y) < 0.01) {\n          col4 = vec4 (0.8, 0.8, 0.8, 0.3);\n          if (vn.z < 0.) vn.yz = Rot2D (vn.yz, 0.1 * pi * (1. + sin (8. * pi * ro.y)));\n        } else if (ro.y > 0.) {\n          col4 = vec4 (0.7, 0.5, 0.2, 0.1);\n          if (step (abs (abs (ro.x) - 0.04), 0.02) * step (abs (ro.y - 0.7), 0.1) > 0. ||\n             abs (length (vec2 (ro.x, ro.y - 0.7)) - 0.15) < 0.02) col4 *= 0.5;\n          else vf = vec2 (32, 0.5);\n        } else {\n          col4 = vec4 (0.2, 0.4, 0.3, 0.1) * (1. - 0.1 * Noisefv2 (64. * ((abs (vn.x) > 0.1) ?\n             ro.yz : ro.yx)));\n        }\n      } else if (abs (vn.y) > 0.9) {\n        if (vn.y > 0.) {\n          col4 = vec4 (0., 0.3, 0., 0.);\n          vf = vec2 (64., 0.5);\n        } else {\n          col4 = vec4 (0.7, 0.7, 0.75, -1.) * (1. - 0.2 * smoothstep (0.2, 0.4,\n             length (vec2 (abs (ro.x) - 0.8, ro.z))));\n        }\n      } else if (abs (vn.x) > 0.01) {\n        wdPos = ro.z;\n      } else if (ro.z < 0.) {\n        if (abs (s) > flHt - 0.46) {\n          col4 = vec4 (0.6, 0.3, 0.2, 0.1);\n          vn.xz = Rot2D (vn.xz, 0.1 * pi * (1. + sin (2. * pi * mod (32. * ro.x, 1.))));\n        } else col4 = mix (vec4 (1., 0., 0., 0.1), vec4 (0.1, 0., 0., 0.1),\n           step (0.6, mod (16. * (abs (ro.x) - 0.8), 1.)));\n      } else if (ro.z < 0.5) {\n        wdPos = ro.x;\n      }\n      if (wdPos != -99.) col4 = mix (vec4 (0.4, 0.1, 0., 0.1), vec4 (0.3, 0.1, 0., 0.1),\n         smoothstep (0.4, 0.5, Fbm2 (h + 2. * vec2 (16., 4.) * vec2 (wdPos, s))));\n    } else if (idObj == idLt) {\n      col4 = vec4 (0.9, 0.9, 0.5, -2.);\n    } else if (idObj == idRob) {\n      col4 = vec4 (HsvToRgb (vec3 (Hashff (33.3 * floor ((ro.y - sign (ro.x) *\n         (spd + 32. * flHt) + flHt) / (2. * flHt))), 0.8, 0.8)), 0.2);\n    } else if (idObj == idEye) {\n      col4 = mix (vec4 (0., 1., 0., -2.), vec4 (0.7, 0., 0.3, -2.),\n         smoothstep (0.9, 0.95, - dot (vn, rd)));\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    col = col4.rgb;\n    if (col4.a >= 0.) {\n      ao = ObjAO (ro, vn);\n      dfSum = 0.;\n      spSum = 0.;\n      for (int k = 0; k < 3; k ++) {\n        ltDir = normalize (ltPos[k]);\n        at = smoothstep (0.3, 0.5, dot (normalize (ltPos[k] - ro), ltDir));\n        dfSum += at * max (dot (vn, ltDir), 0.);\n        spSum += at * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n      }\n      col = ao * (col * (0.1 + 0.4 * dfSum) + col4.a * step (dot (vn, rd), -0.05) * spSum);\n    } else if (col4.a == -2.) col *= 0.7 - 0.3 * dot (vn, rd);\n  } else col = vec3 (0.1);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd;\n  vec2 canvas, uv;\n  float az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = -0.5 * pi;\n  if (mPtr.z > 0.) az -= 0.4 * pi * mPtr.x;\n  az = clamp (az + 0.5 * pi, - 0.15 * pi, 0.15 * pi) - 0.5 * pi;\n  ro = vec3 (4.8 * cos (az), 0.4, 4.8 * sin (az));\n  vd = normalize (vec3 (0., 0.2, 0.) - ro);\n  ro.x += 0.8 * SmoothBump (0.25, 0.75, 0.1, mod (0.1 * tCur, 1.)) *\n     (2. *  floor (mod (0.1 * tCur, 2.)) - 1.);\n  vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  rd = vuMat * normalize (vec3 (uv, 2.7));\n  dstFar = 30.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}