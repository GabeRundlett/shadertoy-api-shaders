{
    "Shader": {
        "info": {
            "date": "1681601113",
            "description": "A bit of art, inspired by the music video to \"Repetition\" by Max Cooper (https://youtu.be/nO9aot9RgQc)",
            "flags": 0,
            "hasliked": 0,
            "id": "dsyXDK",
            "likes": 14,
            "name": "Endless Highway",
            "published": 3,
            "tags": [
                "road",
                "car"
            ],
            "usePreview": 0,
            "username": "storyxx",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat atan2(in float y, in float x)\n{\n    return x == 0.0 ? sign(y)*PI/2.0 : atan(y, x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 coords = uv*2.0 - 1.0;\n    coords.y *= iResolution.y / iResolution.x;\n    \n    \n    vec3 clr = vec3(0);\n    int iter = 100;\n    for (int i=0; i<iter; i++) {\n        float t = rand(vec2(i, 1.0));\n        \n        float scale = rand(vec2(t, 1.0)) + 1.0;\n        float x = rand(vec2(scale, 1.0))*2.0 - 1.0;\n        float y = rand(vec2(x, 1.0))*2.0 - 1.0;\n\n        float d = sdBox(coords+vec2(x,y), vec2(0.1, 0.1));\n        \n        if (abs(d-scale) < 0.05) {\n            float r1 = rand(vec2(y, 1.0));\n            float g1 = rand(vec2(r1, 1.0));\n            float b1 = rand(vec2(g1, 1.0));\n            \n            float r2 = rand(vec2(b1, 1.0));\n            float g2 = rand(vec2(r2, 1.0));\n            float b2 = rand(vec2(g2, 1.0));\n            \n            float rx = coords.x + x;\n            float ry = coords.y + y;\n            float angle = abs(atan2(ry, rx)+PI);\n        \n            clr = vec3(float(i)/float(iter));\n            clr *= float((abs(d-scale) > 0.005 || sin(angle*100.0) > 0.0) && abs(d-scale) < 0.045);\n            \n            float s1 = 1.0+rand(vec2(b2, 1.0));\n            float r_angle = fract(iTime*0.1*s1 + rand(vec2(s1, 1.0)))*2.0*PI;\n            float angle_sdf = min(abs(angle-r_angle), min(abs(angle+2.0*PI-r_angle), abs(angle-2.0*PI-r_angle)));\n            if (angle_sdf < 0.02 && d-scale > 0.01 && d-scale < 0.04) {\n                clr *= vec3(r1,g1,b1);\n            }\n            \n            float s2 = 1.0+rand(vec2(s1, 1.0));\n            r_angle = (1.0-fract(iTime*0.1*s2 + rand(vec2(s2, 1.0))))*2.0*PI;\n            angle_sdf = min(abs(angle-r_angle), min(abs(angle+2.0*PI-r_angle), abs(angle-2.0*PI-r_angle)));\n            if (angle_sdf < 0.02 && d-scale < -0.01 && d-scale > -0.04) {\n                clr *= vec3(r2,g2,b2);\n            }\n        }\n    }    \n    \n    fragColor = vec4(clr,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}