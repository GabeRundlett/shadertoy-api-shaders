{
    "Shader": {
        "info": {
            "date": "1669587920",
            "description": " A compilation of useful things. I made a keyboard (references used) and variable systems. Vignette, mouse glow, et.c. Thanks to FabriceNeyret2. Frame independence.",
            "flags": 48,
            "hasliked": 0,
            "id": "cdlSW2",
            "likes": 3,
            "name": "Keyboard, Variables, QOL",
            "published": 3,
            "tags": [
                "key",
                "keyboard",
                "variable",
                "variables",
                "qol"
            ],
            "usePreview": 0,
            "username": "raymarchingenthusiast",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "#define s__VP 3.\n#define s_VA 3.\n\nint currKeyPressed() {\n    int CKP = -1;         //Thanks FabriceNeyret2 for this.\n    bool b = false;       //(I made some edits so that it works outside of their demo)\n    for (int i=0; i<256; i++) if (bool(key(i)) )  CKP = i, b=true;\n    return CKP;\n}\n\n#define CKP currKeyPressed()\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = UV(fragCoord,iResolution.xy);\n    vec2 muv = UV(iMouse.xy,iResolution.xy);\n    vec4 vars = getVars(fragCoord);\n    \n    vec3 col = texture(iChannel0,(vars.zw/100.+UV(fragCoord,iResolution.xy))*2.).xyz;\n    \n    col *= 1.-pow(s__VP*length(uv-.75),s_VA);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nint currKeyPressed() {\n    int CKP = -1;         //Thanks FabriceNeyret2 for this.\n    bool b = false;       //(I made some edits so that it works outside of their demo)\n    for (int i=0; i<256; i++) if (bool(key(i)) )  CKP = i, b=true;\n    return CKP;\n}\n\n#define CKP currKeyPressed()\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 last = getVars(fragCoord);\n    if(iFrame<2) last = vec4(0.);\n    \n    vec4 new = last;\n    new.xy *= .8;\n    new.x += .2*(key(68)-key(65))*iTimeDelta*60.;  //*iTimeDelta*60. makes it\n    new.y += .2*(key(87)-key(83))*iTimeDelta*60.;  //frame rate independent\n    \n    \n    fragColor = vec4(new.xy,last.zw+new.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define getVars(texturePos) texture(iChannel3,texturePos)\n#define key(code) float(texelFetch(iChannel0,ivec2(code,0),0).x>0.)\n#define PI 3.141592653589793\n#define lerp(a,b,t) a*(1.-t)+b*t\n#define UV(p,r) .5+.5*p/r\n#define unUV(p,r) (p-.5)*2.*r\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}