{
    "Shader": {
        "info": {
            "date": "1629455642",
            "description": "2D  Log Spherical Map Test - link in comments, pretty good explanation and examples. I tried this once before but didn't understand tiling and the basics - so taking a second look at uses and examples to put in the toolbox.",
            "flags": 0,
            "hasliked": 0,
            "id": "7d3GRM",
            "likes": 15,
            "name": "Log Spherical Map Test",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "spherical",
                "log"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "/**\n\n    Log Spherical Mapping / Log Polar Coords\n    @byt3_m3chanic 08/20/21\n    \n    2D Version used to create the 3D ray marched\n    tile system. \n    \n    https://www.osar.fr/notes/logspherical/\n*/\n\n\n#define R\t\t\tiResolution\n#define T\t\t\tiTime\n#define M\t\t\tiMouse\n\n#define PI2\t\t\t6.28318530718\n#define PI\t\t\t3.14159265358\n\nfloat hash21(vec2 a){ return fract(sin(dot(a, vec2(27.609, 57.583)))*43758.5453); }\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nvec2 logPolar(vec2 p) {\n\tp = vec2(log(length(p)), atan(p.y, p.x));\n\treturn p;\n}\n//@iq https://iquilezles.org/articles/palettes\nvec3 hue(float t){ \n    vec3 d = vec3(1.000,0.792,0.220);\n    return .45+.4*cos( PI2*t*vec3(.95,.97,.98)*d ); \n}\nvec3 truchet(vec2 p) {\n\n    float px = fwidth(length(p)-1.);\n    p.x+=T*.5;\n    vec2 grid = fract(p.xy)-.5;\n    vec2 id   = floor(p.xy);\n    \n    float hs = hash21(id);\n    if(hs>.5) grid.x*=-1.;\n    \n    vec3 bc = vec3(.05);\n    vec3 h = hue(length(p.x+50.)*.12); \n    h=clamp(h+.45,vec3(0),vec3(1));\n    float chk = mod(id.y + id.x,2.) * 2. - 1.;\n\n    vec2 d2 = vec2(length(grid-.5), length(grid+.5));\n    vec2 gx = d2.x<d2.y? vec2(grid-.5) : vec2(grid+.5);\n\n    float circle = length(gx)-.5;\n    float l1 = .025+.065*cos(p.x*3.25);\n    float l2 = .085+.065*sin(p.x*3.25);\n    float l3 = .085+.065*sin(T+p.x*2.25);\n    float circle2 = abs(abs(circle)-l1)-(l2);\n    circle2=smoothstep(-px,px,circle2);\n    // color flip for every other one and then ones \n    // thats are flipped by the hash\n    circle=(chk>0.^^ hs>.5) ? smoothstep(-px,px,circle) : smoothstep(px,-px,circle);\n    \n    vec2 sx = abs(grid)-.5;\n    float cbx = length(sx)-.1;\n    cbx=abs(cbx)-(l3*.75);\n    cbx=smoothstep(px,-px,cbx);\n\n    h = mix(h, bc,min(circle2,circle));\n    h = mix(h, bc,cbx);\n    return h;\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    // make uvs - line up colors etc\n    vec2 p  =  uv-vec2(.375,0);\n    vec2 pv = (uv-vec2(0,.5))*vec2(-8,8.);\n    \n    p.xy*=rot(T*5.*PI/180.);\n    \n    //why 3.5 here?\n    p=logPolar(p)*3.5;\n    \n    vec3 col = vec3(0);\n    \n    if(uv.x>-.25) {\n        col=truchet(p);\n    } else {\n        col=truchet(pv.yx);\n    }\n    if(uv.x<-.25&&uv.x>-.26) col = vec3(.05);\n    // Output to screen\n    O  = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}