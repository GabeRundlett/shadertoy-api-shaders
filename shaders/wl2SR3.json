{
    "Shader": {
        "info": {
            "date": "1566654788",
            "description": "A simple fog sphere.\nHeavily based on https://www.shadertoy.com/view/3d23RG",
            "flags": 0,
            "hasliked": 0,
            "id": "wl2SR3",
            "likes": 3,
            "name": "Foggy sphere",
            "published": 3,
            "tags": [
                "fog",
                "scattering"
            ],
            "usePreview": 0,
            "username": "skythedragon",
            "viewed": 754
        },
        "renderpass": [
            {
                "code": "// constants\n#define PI 3.14159265359\n\n// fog color\n#define COLOR vec3(0.3, 0.7, 1.0)\n\n// function to get the direction of the camera\nvec3 CameraVectorWS(vec2 fragCoord, vec3 iResolution) {\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\treturn normalize(vec3(uv*0.5, 1.0));\n}\n\n// function to get the camera position\nvec3 CameraPositionWS() {\n    \n\treturn vec3(0.0, 0.0, -5.0);\n    \n}\n\n// function to get the depth for the fog effect\nfloat PixelDepth() {\n\treturn 10.0;\n}\n\n// approximation of the error function\n// https://github.com/libretro/glsl-shaders/blob/master/blurs/blur9fast-vertical.glsl\nfloat erf( float x ) {\n\tfloat sign_x = sign(x);\n\tfloat t = 1.0/(1.0 + 0.47047*abs(x));\n\tfloat result = 1.0 - t*(0.3480242 + t*(-0.0958798 + t*0.7478556))*exp(-(x*x));\n\treturn result * sign_x;\n}\n\n\n// function to render the fog\nfloat Fog( vec3 start, vec3 dir, float dist ) {\n    \n    // you can change these to make the fog look different\n    const float fog_exp = 7.0; // fog exponent\n\tconst float sphere_radius = 1.0; // sphere radius\n    const float fog_density = 500.0; // fog strength\n    \n    float k = start.x;\n    float l = dir.x;\n    float m = start.y;\n    float n = dir.y;\n    float o = start.z;\n    float p = dir.z;\n    float d = dot(start, dir);\n\n    float res = exp(sphere_radius-fog_exp*(+k*k*(n*n+p*p)\n                         -m*m*(-1.0+n*n)\n                         -o*o*(-1.0+p*p)\n                         -2.0*k*l*o*p\n                         -2.0*m*n*(k*l+o*p) ));\n    res *= erf( sqrt(fog_exp)*(d+dist) ) - erf( sqrt(fog_exp)*d );\n    res *= (0.5/sqrt(fog_exp)) * sqrt(PI) * fog_density;\n    \n    // d = 1.0 - exp(-d);\n    return res;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // get the camera vector and position\n    vec3 dir = CameraVectorWS(fragCoord, iResolution);\n    vec3 start = CameraPositionWS();\n    float dist = PixelDepth();\n    // calculate the strength of the fog effect\n    float fog = Fog(start, dir, dist);\n    // prevents the center of the fog from reaching a high value, you can remove this\n    fog = 1.0 - exp(-fog);\n    // get the color based on the fog effect\n    vec3 col = mix(vec3(0.0), COLOR, fog);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}