{
    "Shader": {
        "info": {
            "date": "1701455612",
            "description": "infinite-state CA inspired by laserbat's series: https://www.shadertoy.com/view/DsVBDw",
            "flags": 32,
            "hasliked": 0,
            "id": "cl3fzl",
            "likes": 2,
            "name": "laserbat-CA-variation",
            "published": 3,
            "tags": [
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float val = texelFetch(iChannel0, ivec2(fragCoord / ZOOM), 0).x;\n    vec3 color = ihash3(floatBitsToUint(val));\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define GET(d) texelFetch(iChannel0, ivec2(mod(fragCoord + d, bounds)), 0).x\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // bounds check\n    vec2 bounds = iResolution.xy / ZOOM;\n    if (fragCoord.x > bounds.x || fragCoord.y > bounds.y) return;\n    // noise seed\n    if (iFrame <= 0 || iMouse.w > 0.0) {\n        fragColor.x = hash13(vec3(fragCoord.xy, iDate.w));\n        return;\n    }\n    // main CA computation\n    uint vals[9];\n    uint hash = 0u;\n    int i = 0;\n    for(float y = -1.0; y <= 1.0; y++) {\n        for(float x = -1.0; x <= 1.0; x++) {\n            uint v = floatBitsToUint(GET(vec2(x,y)));\n            vals[i] = v;\n            hash += v % 9u;\n            i++;\n        }\n    }\n    uint next = vals[hash % 9u];\n    fragColor.x = uintBitsToFloat(next);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define ZOOM 2.0\n\nuint ihash(uint n) {\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return n & uint(0x7fffffffU);\n}\n\nvec3 ihash3(uint n) {\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n, n * 16807U, n * 48271U);\n    return vec3(k & uvec3(0x7fffffffU)) / float(0x7fffffff);\n}\n\nfloat hash13(vec3 p3) {\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}