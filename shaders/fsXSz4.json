{
    "Shader": {
        "info": {
            "date": "1618303215",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "fsXSz4",
            "likes": 2,
            "name": "test1111111",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "wei",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// Author @patriciogv - 2015\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nfloat plot(vec2 uv, float sinOffX, float len) { \n        if(uv.y >0.5) {\n            return 0.0;\n        }\n        \n        if(uv.y <len+abs(sin(iTime))*noise(uv)) {\n            return 0.;\n        }\n    \n    \tif(uv.x >0.1) {\n            return 0.;\n        }\n        if(uv.x <-0.060) {\n            return 0.;\n        }\n        float t = abs(1. / (1000.456* uv.x + sin(uv.y * sinOffX+iTime) * (20.00)));\n    return smoothstep(0., 0.150, t);\n}\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5)+noise(_st+iTime)/20.;\n    if(_st.y<0.5){\n        return 0.;\n    }\n    return 1.-smoothstep(_radius-(_radius*0.050),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nfloat circle2(in vec2 _st, in float _radius){\n     _st.y = _st.y*2.;\n    vec2 l = _st-vec2(0.5)+noise(_st+iTime)/20.;\n    return 1.-smoothstep(_radius-(_radius*0.050),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nfloat circle3(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5)+noise(_st+iTime)/20.;\n    return 1.-smoothstep(_radius-(_radius*0.050),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 st = (fragCoord-.025*iResolution.xy)/iResolution.y;\n    vec4 color = vec4(0.0);\n    \n\tfloat moveY = sin(noise(st+iTime))*0.02;\n    vec4 bodyColor = vec4(1.000,0.859,0.965,1.);\n    vec4 eyeColor = vec4(0.257,0.252,0.285,1.000);\n    \n    color = vec4(0.182,0.187,0.860, 1.)*st.y*0.9;\n    \n    float f = 0.;\n\n     for(float i=0.;i<1.;i+=1./10.) {\n        f+=plot(st-vec2(0.432+0.6*i,noise(st)*0.080),noise(st*10.)*12., abs(0.5-i)*0.4);\n    }\n    //+plot(st-vec2(0.430,-0.050),  0.5)+plot(st-vec2(0.620,-0.050), 0.960)+plot(st-vec2(0.780,0.060), 1.);\n    \n    vec4 b1 = bodyColor*f;\n    color = mix(color, b1, b1.a);\n    \n    \n    float color1f = circle2(st-vec2(.20,0.310+moveY),0.492);\n    float color2f = circle(st-vec2(.20,0.070+moveY),0.476);\n    vec4 head = bodyColor*(color1f+color2f-(color1f*color2f));\n    color = mix(color, head, head.a);\n    \n    vec4 eye = eyeColor*circle3(st-vec2(0.032,0.174+moveY),0.004+abs(sin(iTime))*0.001);\n\tcolor =  mix(color, eye, eye.a);\n    \n    eye = eyeColor*circle3(st-vec2(0.368,0.174+moveY),0.004+abs(sin(iTime))*0.001);\n\tcolor =  mix(color, eye, eye.a);\n\n\tfragColor = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}