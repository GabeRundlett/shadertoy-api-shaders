{
    "Shader": {
        "info": {
            "date": "1643894785",
            "description": "My participation to genuary 2022\nSelf portrait.",
            "flags": 32,
            "hasliked": 0,
            "id": "7sjczG",
            "likes": 6,
            "name": "Genuary 2022 - Day28",
            "published": 3,
            "tags": [
                "generative",
                "portrait",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    //rgb *= 1.-sat(length(cuv*2.)-.5);\n    //rgb += vec3(.5)*(1.-sat((abs(cuv.x)-.115)*400.));\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nvec2 _size = vec2(.01,.001);\n\nfloat _sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}\nvec2 _uv;\nvec3 drawPixel(vec2 uv, vec3 col, vec3 prev)\n{\n    return mix(prev, col, 1.-sat(_sqr(uv, _size+vec2(0.,.01*(sin(iTime+_uv.x*15.+_uv.y*5.)*.5+.5)))*iResolution.x*.15));\n}\n\nvec3 rdr(vec2 uv, vec2 ouv)\n{\n    vec3 col = vec3(0.);\n    vec2 stp = vec2(.02)*iResolution.xx/iResolution.xy;\n    ouv = floor(ouv/stp)*stp;\n    col = texture(iChannel0, ouv).xyz;\n    \n    col = drawPixel(uv-vec2(-0.2,-0.2), vec3(0.007843138,0.007843138,0.01568628), col);\ncol = drawPixel(uv-vec2(-0.2,-0.15), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.2,-0.1), vec3(0,0,0.007843138), col);\ncol = drawPixel(uv-vec2(-0.2,-0.05), vec3(0.1568628,0.1568628,0.1490196), col);\ncol = drawPixel(uv-vec2(-0.2,0), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.2,0.05), vec3(0.1098039,0.2156863,0.2588235), col);\ncol = drawPixel(uv-vec2(-0.2,0.1), vec3(0.5607843,0.8470588,1), col);\ncol = drawPixel(uv-vec2(-0.2,0.15), vec3(1,0.9921569,1), col);\ncol = drawPixel(uv-vec2(-0.175,-0.2), vec3(0,0,0.01568628), col);\ncol = drawPixel(uv-vec2(-0.175,-0.15), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.175,-0.1), vec3(0,0,0.007843138), col);\ncol = drawPixel(uv-vec2(-0.175,-0.05), vec3(0.172549,0.1568628,0.1607843), col);\ncol = drawPixel(uv-vec2(-0.175,0), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.175,0.05), vec3(0.9803922,0.9843137,0.9921569), col);\ncol = drawPixel(uv-vec2(-0.175,0.1), vec3(1,0.9960784,1), col);\ncol = drawPixel(uv-vec2(-0.175,0.15), vec3(0.1411765,0.2,0.3607843), col);\ncol = drawPixel(uv-vec2(-0.15,-0.2), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.15,-0.15), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.15,-0.1), vec3(0,0.007843138,0.003921569), col);\ncol = drawPixel(uv-vec2(-0.15,-0.05), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.15,0), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.15,0.05), vec3(0.9294118,0.9411765,0.9058824), col);\ncol = drawPixel(uv-vec2(-0.15,0.1), vec3(0.7607843,0.8470588,0.8352941), col);\ncol = drawPixel(uv-vec2(-0.15,0.15), vec3(0,0.003921569,0.007843138), col);\ncol = drawPixel(uv-vec2(-0.125,-0.2), vec3(0.2901961,0.3960784,0.5137255), col);\ncol = drawPixel(uv-vec2(-0.125,-0.15), vec3(0.3529412,0.4078431,0.4431373), col);\ncol = drawPixel(uv-vec2(-0.125,-0.1), vec3(0.02352941,0.06666667,0.07450981), col);\ncol = drawPixel(uv-vec2(-0.125,-0.05), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.125,0), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.125,0.05), vec3(0.1960784,0.2588235,0.2588235), col);\ncol = drawPixel(uv-vec2(-0.125,0.1), vec3(0.05098039,0.05490196,0.07058824), col);\ncol = drawPixel(uv-vec2(-0.125,0.15), vec3(0.08235294,0.09411765,0.1215686), col);\ncol = drawPixel(uv-vec2(-0.1,-0.2), vec3(0.2313726,0.4078431,0.5294118), col);\ncol = drawPixel(uv-vec2(-0.1,-0.15), vec3(0.282353,0.3607843,0.4588235), col);\ncol = drawPixel(uv-vec2(-0.1,-0.1), vec3(0.6039216,0.4431373,0.08235294), col);\ncol = drawPixel(uv-vec2(-0.1,-0.05), vec3(0.1294118,0.1215686,0.1254902), col);\ncol = drawPixel(uv-vec2(-0.1,0), vec3(0.2627451,0.2509804,0.2235294), col);\ncol = drawPixel(uv-vec2(-0.1,0.05), vec3(0.5490196,0.5254902,0.4784314), col);\ncol = drawPixel(uv-vec2(-0.1,0.1), vec3(0.5764706,0.5607843,0.5137255), col);\ncol = drawPixel(uv-vec2(-0.1,0.15), vec3(0.7294118,0.7294118,0.7372549), col);\ncol = drawPixel(uv-vec2(-0.075,-0.2), vec3(0.08235294,0.1568628,0.2235294), col);\ncol = drawPixel(uv-vec2(-0.075,-0.15), vec3(0.3176471,0.4352941,0.5686275), col);\ncol = drawPixel(uv-vec2(-0.075,-0.1), vec3(0.6862745,0.6666667,0.6431373), col);\ncol = drawPixel(uv-vec2(-0.075,-0.05), vec3(0.6509804,0.5372549,0.3803922), col);\ncol = drawPixel(uv-vec2(-0.075,0), vec3(0.2627451,0.2509804,0.2156863), col);\ncol = drawPixel(uv-vec2(-0.075,0.05), vec3(0.6980392,0.6941177,0.6745098), col);\ncol = drawPixel(uv-vec2(-0.075,0.1), vec3(0.654902,0.6431373,0.6156863), col);\ncol = drawPixel(uv-vec2(-0.075,0.15), vec3(0.7058824,0.7019608,0.6941177), col);\ncol = drawPixel(uv-vec2(-0.05,-0.2), vec3(0.2509804,0.372549,0.4823529), col);\ncol = drawPixel(uv-vec2(-0.05,-0.15), vec3(0.1803922,0.2588235,0.3568628), col);\ncol = drawPixel(uv-vec2(-0.05,-0.1), vec3(0.1254902,0.2,0.2666667), col);\ncol = drawPixel(uv-vec2(-0.05,-0.05), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(-0.05,0), vec3(0.02352941,0.07450981,0.1098039), col);\ncol = drawPixel(uv-vec2(-0.05,0.05), vec3(0.9882353,0.9882353,0.9568627), col);\ncol = drawPixel(uv-vec2(-0.05,0.1), vec3(0.06666667,0.08627451,0.1098039), col);\ncol = drawPixel(uv-vec2(-0.05,0.15), vec3(0.6784314,0.6862745,0.6352941), col);\ncol = drawPixel(uv-vec2(-0.025,-0.2), vec3(0.01960784,0.09803922,0.227451), col);\ncol = drawPixel(uv-vec2(-0.025,-0.15), vec3(0,0,0.03921569), col);\ncol = drawPixel(uv-vec2(-0.025,-0.1), vec3(0,0.1333333,0.4627451), col);\ncol = drawPixel(uv-vec2(-0.025,-0.05), vec3(0.7490196,0.5058824,0.509804), col);\ncol = drawPixel(uv-vec2(-0.025,0), vec3(0.7843137,0.6313726,0.6117647), col);\ncol = drawPixel(uv-vec2(-0.025,0.05), vec3(0.7882353,0.5921569,0.5960785), col);\ncol = drawPixel(uv-vec2(-0.025,0.1), vec3(0.3490196,0.227451,0.1568628), col);\ncol = drawPixel(uv-vec2(-0.025,0.15), vec3(0.7490196,0.7568628,0.7137255), col);\ncol = drawPixel(uv-vec2(0,-0.2), vec3(0,0.003921569,0.05098039), col);\ncol = drawPixel(uv-vec2(0,-0.15), vec3(0.4941176,0.3647059,0.3921569), col);\ncol = drawPixel(uv-vec2(0,-0.1), vec3(0.7019608,0.4627451,0.4588235), col);\ncol = drawPixel(uv-vec2(0,-0.05), vec3(0.6941177,0.4,0.3882353), col);\ncol = drawPixel(uv-vec2(0,0), vec3(0.5411765,0.3215686,0.3333333), col);\ncol = drawPixel(uv-vec2(0,0.05), vec3(0.7882353,0.5568628,0.572549), col);\ncol = drawPixel(uv-vec2(0,0.1), vec3(0.2470588,0.1568628,0.1254902), col);\ncol = drawPixel(uv-vec2(0,0.15), vec3(0.003921569,0,0), col);\ncol = drawPixel(uv-vec2(0.025,-0.2), vec3(0.2352941,0.3176471,0.4235294), col);\ncol = drawPixel(uv-vec2(0.025,-0.15), vec3(0.1019608,0.1215686,0.1960784), col);\ncol = drawPixel(uv-vec2(0.025,-0.1), vec3(0.6901961,0.4313726,0.3843137), col);\ncol = drawPixel(uv-vec2(0.025,-0.05), vec3(0.4784314,0.2470588,0.2156863), col);\ncol = drawPixel(uv-vec2(0.025,0), vec3(0.5215687,0.3019608,0.3058824), col);\ncol = drawPixel(uv-vec2(0.025,0.05), vec3(0.8196079,0.5450981,0.5137255), col);\ncol = drawPixel(uv-vec2(0.025,0.1), vec3(0.3764706,0.2470588,0.172549), col);\ncol = drawPixel(uv-vec2(0.025,0.15), vec3(0.2941177,0.3098039,0.3137255), col);\ncol = drawPixel(uv-vec2(0.05,-0.2), vec3(0.1843137,0.2392157,0.2745098), col);\ncol = drawPixel(uv-vec2(0.05,-0.15), vec3(0.1254902,0.1411765,0.1764706), col);\ncol = drawPixel(uv-vec2(0.05,-0.1), vec3(0.01568628,0,0), col);\ncol = drawPixel(uv-vec2(0.05,-0.05), vec3(0.4901961,0.282353,0.2588235), col);\ncol = drawPixel(uv-vec2(0.05,0), vec3(0.5411765,0.2901961,0.282353), col);\ncol = drawPixel(uv-vec2(0.05,0.05), vec3(0.8941177,0.6666667,0.572549), col);\ncol = drawPixel(uv-vec2(0.05,0.1), vec3(0.5411765,0.372549,0.2392157), col);\ncol = drawPixel(uv-vec2(0.05,0.15), vec3(0.6862745,0.6392157,0.5843138), col);\ncol = drawPixel(uv-vec2(0.075,-0.2), vec3(0.3058824,0.3215686,0.3333333), col);\ncol = drawPixel(uv-vec2(0.075,-0.15), vec3(0.2941177,0.3921569,0.5137255), col);\ncol = drawPixel(uv-vec2(0.075,-0.1), vec3(0.7529412,0.7019608,0.6784314), col);\ncol = drawPixel(uv-vec2(0.075,-0.05), vec3(0.5490196,0.5803922,0.5921569), col);\ncol = drawPixel(uv-vec2(0.075,0), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(0.075,0.05), vec3(0.7529412,0.7490196,0.7686275), col);\ncol = drawPixel(uv-vec2(0.075,0.1), vec3(0.654902,0.6235294,0.5490196), col);\ncol = drawPixel(uv-vec2(0.075,0.15), vec3(0.6705883,0.6352941,0.5764706), col);\ncol = drawPixel(uv-vec2(0.1,-0.2), vec3(0.3176471,0.3137255,0.345098), col);\ncol = drawPixel(uv-vec2(0.1,-0.15), vec3(0.1960784,0.1921569,0.2156863), col);\ncol = drawPixel(uv-vec2(0.1,-0.1), vec3(0.003921569,0.01960784,0.06666667), col);\ncol = drawPixel(uv-vec2(0.1,-0.05), vec3(0.4745098,0.4705882,0.4901961), col);\ncol = drawPixel(uv-vec2(0.1,0), vec3(0.7019608,0.6588235,0.5333334), col);\ncol = drawPixel(uv-vec2(0.1,0.05), vec3(0.627451,0.5882353,0.4901961), col);\ncol = drawPixel(uv-vec2(0.1,0.1), vec3(0.6235294,0.5803922,0.509804), col);\ncol = drawPixel(uv-vec2(0.1,0.15), vec3(0.6627451,0.6156863,0.5529412), col);\ncol = drawPixel(uv-vec2(0.125,-0.2), vec3(0.2666667,0.2666667,0.2588235), col);\ncol = drawPixel(uv-vec2(0.125,-0.15), vec3(0.372549,0.4941176,0.6039216), col);\ncol = drawPixel(uv-vec2(0.125,-0.1), vec3(0.02352941,0,0), col);\ncol = drawPixel(uv-vec2(0.125,-0.05), vec3(1,1,0.9843137), col);\ncol = drawPixel(uv-vec2(0.125,0), vec3(0.7333333,0.654902,0.5254902), col);\ncol = drawPixel(uv-vec2(0.125,0.05), vec3(0.572549,0.5254902,0.4392157), col);\ncol = drawPixel(uv-vec2(0.125,0.1), vec3(0.5960785,0.5607843,0.4941176), col);\ncol = drawPixel(uv-vec2(0.125,0.15), vec3(0.6313726,0.5960785,0.5372549), col);\ncol = drawPixel(uv-vec2(0.15,-0.2), vec3(0.4235294,0.4941176,0.509804), col);\ncol = drawPixel(uv-vec2(0.15,-0.15), vec3(0.05490196,0.09803922,0.1215686), col);\ncol = drawPixel(uv-vec2(0.15,-0.1), vec3(0.8823529,0.8862745,0.9019608), col);\ncol = drawPixel(uv-vec2(0.15,-0.05), vec3(0.1607843,0.1529412,0.1647059), col);\ncol = drawPixel(uv-vec2(0.15,0), vec3(0.2392157,0.2235294,0.1803922), col);\ncol = drawPixel(uv-vec2(0.15,0.05), vec3(0.5294118,0.4862745,0.4156863), col);\ncol = drawPixel(uv-vec2(0.15,0.1), vec3(0.5529412,0.5215687,0.4705882), col);\ncol = drawPixel(uv-vec2(0.15,0.15), vec3(0.6078432,0.5686275,0.5215687), col);\ncol = drawPixel(uv-vec2(0.175,-0.2), vec3(0,0,0), col);\ncol = drawPixel(uv-vec2(0.175,-0.15), vec3(0.007843138,0,0.01176471), col);\ncol = drawPixel(uv-vec2(0.175,-0.1), vec3(0.172549,0.1647059,0.2470588), col);\ncol = drawPixel(uv-vec2(0.175,-0.05), vec3(0.5686275,0.6509804,0.6705883), col);\ncol = drawPixel(uv-vec2(0.175,0), vec3(0.1215686,0.1176471,0.1098039), col);\ncol = drawPixel(uv-vec2(0.175,0.05), vec3(0.0627451,0.04313726,0.05882353), col);\ncol = drawPixel(uv-vec2(0.175,0.1), vec3(0.5176471,0.4862745,0.4431373), col);\ncol = drawPixel(uv-vec2(0.175,0.15), vec3(0.5843138,0.5607843,0.5137255), col);\n\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    vec2 ouv = fragCoord/iResolution.xy;\n    _uv = uv;\n    vec3 col = rdr(uv-vec2(0.,.03), ouv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.2\n#define GLOW_POW .5\n#define GLOW_OPACITY .86\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}