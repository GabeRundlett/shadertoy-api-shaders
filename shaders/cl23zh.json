{
    "Shader": {
        "info": {
            "date": "1672857435",
            "description": "Shows Nyquist sampling theorem, which states that a band limited signal (yellow) con be discretized and after than fully reconstructed again if the sampling frequency is at least twice the maximum frequency in the original signal (blue).",
            "flags": 0,
            "hasliked": 0,
            "id": "cl23zh",
            "likes": 21,
            "name": "Nyquist Sampling Theorem",
            "published": 3,
            "tags": [
                "1d",
                "sampling",
                "nyquist",
                "dsp"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 958
        },
        "renderpass": [
            {
                "code": "//--------------------------------------------------------\n// Shows Nyquist sampling theorem which states that a band \n// limited analog signal can be discretized and then fully\n// reconstructed perfectly again if the sampling frequency\n// is at least twice the maximum frequency in the original\n// signal (ie, the width of its spectrum).\n//\n// In this case the yellow signal is the original, and the\n// blue one is its reconstruction after sampling it merely\n// 0.5% above the Nyquist frequency.\n//\n// Made after https://www.shadertoy.com/view/DtjGRh\n//\n// Our analog signal is made with an AM modulation, with a\n// carrier at 11Hz (kFreqBase), and a modulating signal of\n// 1Hz (kFreqAM), so the bandwidth of the analog signal is\n// 12Hz (kFreqSignal). So, according to Nyquest, we should\n// sample it at least at 2*12Hz = 24Hz (kFreqSample). Here\n// I'm sampling it at 25.2HZ (0.5% more than Nyquist) to\n// make sure all works well.\n//\n#define ANIMATE 1\n//\nconst float kFreqBase   = 11.0;\nconst float kFreqAM     = 1.0;\nconst float kFreqSignal = kFreqBase + kFreqAM;\n#if ANIMATE==0\nconst float kFreqSample = kFreqSignal*2.0*1.005;\nconst int   kNumSincs   = 100; // larger for better reconstruction\n#else\n      float kFreqSample;\nconst int   kNumSincs   = 900; \n#endif\n\n//\n//--------------------------------------------------------\n\n                          \n// utils\nconst float kPi  = 3.1415927;\nconst float kTau = 6.2831853;\nfloat sinc(float x) { return abs(x)>0.0?sin(kPi*x)/(kPi*x):1.0; }\n\n\n// some (band limited) signal\nfloat signal( in float t )\n{\n    //t += fract(iTime/10.0);\n\n    float f = 0.0;\n    f += 1.0*(0.5-0.5*cos(kTau*t))*sin(kTau*kFreqBase*t);\n    t -= 0.5;\n    f += 0.5*(0.5-0.5*cos(kTau*t))*sin(kTau*kFreqBase*t);\n    return f;\n}\n\n// https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem\nfloat reconstruct( in float tc )\n{\n    //int   kNumSincs  = 1 + int(iTime*iTime*60.0);\n\n    float y = 0.0;\n    int   c = int(floor(tc*kFreqSample));\n    for( int n=c-kNumSincs; n<=c+kNumSincs; n++ )\n    {       \n        float t = float(n)/kFreqSample;\n        y += signal( t ) * sinc( kFreqSample*(t-tc) );\n    }\n    return y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //kFreqSample = kFreqSignal*0.5*pow(1.1,iTime);\n    \n    #if ANIMATE==1\n    float time = mod(iTime,15.0);\n    kFreqSample = kFreqSignal*mix(0.5,2.0*1.005,smoothstep(0.0,10.0,time));\n    #endif\n    \n    // background\n    float u = fragCoord.x/iResolution.x;\n    vec3 col = vec3(0.15)*(0.75+u*(1.0-u));\n\n\n    vec2  uv = fragCoord/iResolution.y;\n    float px = 1.0/iResolution.y;\n    float sc = 1.1;               // scale\n    float am = 0.4;               // amplitude\n    float t  = uv.x*sc;\n\n    // plot signals\n    {\n    float x = signal(t);          // true signal\n    float y = reconstruct(t);     // reconstructed signal\n    float dx = am*dFdx(x)/(sc*px);\n    float dy = am*dFdx(y)/(sc*px);\n    x = abs(am*x-(uv.y-0.5))/sqrt(1.0+dx*dx); // https://iquilezles.org/articles/distance/)\n    y = abs(am*y-(uv.y-0.5))/sqrt(1.0+dy*dy);\n    x = smoothstep( px*2.0/sc, 0.0, x );\n    y = smoothstep( px*2.0/sc, 0.0, y );\n    col = mix( col, vec3(1.0,0.7,0.0), x );\n    col = mix( col, vec3(0.0,0.7,1.0), y );\n    }\n    \n    #if ANIMATE==1\n    {\n    float a = smoothstep(12.0,10.0,time);\n    float x = round(t*kFreqSample)/kFreqSample;\n    float y = signal(x);\n    vec2  p = vec2( t - x,  am*y-(uv.y-0.5) );\n    float f = smoothstep( px*1.5, 0.0, length(p)-0.01 );\n    col = mix( col, vec3(1.0,1.0,1.0), a*f );\n    }\n    #endif\n    \n    // dither to remove banding in the background\n    col += fract(sin(fragCoord.x*vec3(13,17,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}