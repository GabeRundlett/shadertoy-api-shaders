{
    "Shader": {
        "info": {
            "date": "1569422176",
            "description": "30 seconds Clock",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3GWX",
            "likes": 4,
            "name": "Clock Colors",
            "published": 3,
            "tags": [
                "clock"
            ],
            "usePreview": 0,
            "username": "jpkitano",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "#define TIME_MULTIPLIER 1.0\n#define TIME_DIVISOR 30.0\n\nfloat createCircle(vec2 xy, vec2 center, float radius){\n    vec2 dist = xy-center;   \n    float p = 3./(iResolution.x);\n    return 1.-smoothstep(radius-p, radius+p, dot(dist,dist));\n}\n\nfloat dVectorDegree(vec2 origin, vec2 u, vec2 v, float degree){\n    float degreeUV = mod(angleBetweenVectors(u, v),360.0);\n    degree = mod(degree, 360.);\n    float d = (3./iResolution.y)*360.;\n    return smoothstep(degreeUV-d, degreeUV+d, degree);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -=0.5;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0);\n    vec2 circle = vec2(0,0);\n    float radius = 0.1;\n    \n    vec3 insideColor = 1. + 0.5 * sin(iTime+uv.xyx+vec3(0,2,4));\n    insideColor *= createCircle(uv, circle, radius);\n    \n    float time = iTime*TIME_MULTIPLIER/TIME_DIVISOR;\n    float inverseTime = mod(iTime*TIME_MULTIPLIER,TIME_DIVISOR/2.0)/TIME_DIVISOR;\n    \n    float degree = secondsToDegrees(time);\n    float inverseDegree = secondsToDegrees(inverseTime);\n    \n    if(checkQuadrant(uv, 0) || checkQuadrant(uv,1) ){\n        insideColor*= dVectorDegree(circle, vec2(0,1), uv, degree);\n    }else if(checkQuadrant(uv, 2) && degree >=180.){\n    \tinsideColor*= dVectorDegree(circle, vec2(0,-1), uv, inverseDegree);\n    }else if (checkQuadrant(uv, 3) && degree >=270.){\n    \tinsideColor*= dVectorDegree(circle, vec2(0,-1), uv, inverseDegree);\n    }else insideColor = vec3(0);\n    \n    col = insideColor;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926535897;\n\n//Converts seconds to degrees | 1 second = 360ยบ\nfloat secondsToDegrees(float seconds){\n    float aux = mod(seconds,60.0) * 360.0;\n    return mod(aux,360.0);\n}\n\n//Returns the angle between 2 vectors\nfloat angleBetweenVectors(vec2 u, vec2 v){\n    float cosa = dot(u,v)/(length(u)*length(v));\n    float angle = acos(cosa)*180./PI;    \n    return angle;\n}\n\n//Check if the coordinates xy are inside the quandrant\nbool checkQuadrant(vec2 xy, int quadrant){\n    if(quadrant == 0 ){\n        return (xy.x >= 0. && xy.y >=0.);\n    }\n    if(quadrant == 1){\n    \treturn (xy.x>=0. && xy.y < 0.);\n    }\n    \n    if(quadrant == 2){\n    \treturn (xy.x <0. && xy.y <0.);\n    }\n    if(quadrant == 3){\n        return (xy.x <0. && xy.y >0.);\n\t}\n    return false;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}