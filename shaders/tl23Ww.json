{
    "Shader": {
        "info": {
            "date": "1559853869",
            "description": "after a GIF dave posted on Twitter: https://twitter.com/beesandbombs/status/1136416601165746176",
            "flags": 0,
            "hasliked": 0,
            "id": "tl23Ww",
            "likes": 7,
            "name": "nothing shape",
            "published": 3,
            "tags": [
                "shapes",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "movAX13h",
            "viewed": 515
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926535897932384626433832795;\nconst float PI2 = 6.283185307179586476925286766559;\nconst float PI05 = 1.5707963267948966192313216916398;\nconst float PI025 = 0.78539816339744830961566084581988;\n\nvec2 rotate(vec2 v, float a)\n{\n    return vec2(v.x * cos(a) - v.y * sin(a), v.x * sin(a) + v.y * cos(a));\n}\n\n\nfloat dir(vec2 a, vec2 b, vec2 c)\n{\n\treturn (a.x - c.x) * (b.y - c.y) - (b.x - c.x) * (a.y - c.y);\n}\n\nbool insideTri(vec2 p, vec2 a, vec2 b, vec2 c)\n{\n\tbool b1 = dir(p, a, b) < 0.0;\n\tbool b2 = dir(p, b, c) < 0.0;\n\tbool b3 = dir(p, c, a) < 0.0;\n  \treturn ((b1 == b2) && (b2 == b3));\n}\n\nbool insideQuad(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d)\n{\n\tbool b1 = dir(p, a, b) < 0.0;\n\tbool b2 = dir(p, b, c) < 0.0;\n\tbool b3 = dir(p, c, d) < 0.0;\n\tbool b4 = dir(p, d, a) < 0.0;\n  \treturn ((b1 == b2) && (b2 == b3) && (b3 == b4));\n}\n\nbool insideTriStar(vec2 p, float s, float r)\n{\n    float d = s * 0.70710678118654752440084436210485;\n    vec2 a = vec2(-d, -s - d);\n    vec2 b = vec2(-d, d);\n    vec2 c = vec2(s + d, d);\n    \n    for(int i = 0; i < 4; i++)\n    {\n        float r = float(i) * PI05 + r;\n    \tif (insideTri(p, rotate(a, r), rotate(b, r), rotate(c, r))) return true;\n    }\n    \n    return false;\n}\n\nbool insideSquare(vec2 p, vec2 pos, float size, float rot)\n{\n    vec2 _ = vec2(-0.5*size, 0.5*size);\n    vec2 a = rotate(_.xx, rot) + pos;\n    vec2 b = rotate(_.yx, rot) + pos;\n    vec2 c = rotate(_.yy, rot) + pos;\n    vec2 d = rotate(_.xy, rot) + pos;\n    return insideQuad(p, a, b, c, d);    \n}\n\n\nvec3 scene(vec2 p)\n{\n    vec3 col = vec3(1.0);\n    \n    float rot = - iTime;\n    float r = 0.64;\n\n    if (int(floor(iTime / PI025)) % 2 == 0) \n    {\n        for(int i = 0; i < 8; i++)\n        {\n            float a = rot + float(i) * PI025;\n            vec2 pos = vec2(r * cos(a), r * sin(a));        \n            if (insideSquare(p, pos, 0.38, iTime + float((i + 1) % 2) * PI025)) col = vec3(0.);    \n        }\n    }\n    else\n    {\n    \tif (insideSquare(p, vec2(0.), 1.285, 0.)) col = vec3(0.);\n    \tif (insideSquare(p, vec2(0.), 1.285, PI025)) col = vec3(0.);\n    \tif (insideTriStar(p, 0.38, rot)) col = vec3(1.);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    fragColor = vec4(scene(p), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}