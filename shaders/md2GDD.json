{
    "Shader": {
        "info": {
            "date": "1667643719",
            "description": "Bouncing for the Inercia Shader Royale 2022",
            "flags": 64,
            "hasliked": 0,
            "id": "md2GDD",
            "likes": 104,
            "name": "Inercia Royaliptic",
            "published": 3,
            "tags": [
                "inercia"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 2242
        },
        "renderpass": [
            {
                "code": "\n// Some bouncing made for Inercia Shader Royale 2022\n// https://2022.inercia.pt/\n// music by Diffty https://soundcloud.com/diffty\n\n// globals\nfloat fft, material, rnd;\n\n// toolbox\n#define time iTime\n#define ss(a,b,t) smoothstep(a,b,t)\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,s,-s,c); }\nfloat gyroid (vec3 p) { return dot(sin(p), cos(p.yzx)); }\nfloat random (vec2 p) { return fract(sin(dot(p,vec2(10.1324,5.654)))*46501.654); } \nfloat fbm (vec3 p) {\n  float result = 0., a = .5;\n  for (float i = 0.; i < 3.; ++i) {\n    result += abs(gyroid(p/a)*a);\n    a /= 2.;\n  }\n  return result;\n}\nfloat box (vec3 p, vec3 s) {\n  vec3 b = abs(p)-s;\n  return max(b.x,max(b.y,b.z));\n}\n\nfloat map(vec3 p)\n{\n  float dist = 100.;\n  \n  // rotation angle\n  float t = time*1.+p.z*.5;\n  t = pow(fract(t), 10.) + floor(t);\n  t += rnd;\n  \n  // translate offset\n  float tt = time + p.z;\n  tt = pow(fract(tt), 10.) + floor(tt);\n  float r = .0*fft+.2+.1*sin(length(p)*3.-tt+p.z*5.);\n  \n  // kaleido\n  float a = 1.;\n  const float count = 12.;\n  for (float i = 0.; i < count; ++i) {\n    p.xz *= rot(t/a);\n    p.yz *= rot(sin(t)/a);\n    p.x = abs(p.x)-r*a;\n    float shape = length(p)-.1*a;\n    //if (mod(i, 2.) < .5) shape = box(p,vec3(1,1,.01)*.15*a);\n    material = shape < dist ? i : material;\n    dist = min(dist, shape);\n    a /= 1.2;\n  }\n  \n  // extra details surface\n  float noise = fbm(p*60.);\n  dist -= noise*.002;\n  \n  return dist*.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec3 pos = vec3(0,0,2);\n    vec3 ray = normalize(vec3(uv, -3));\n    \n    // noise\n    float rng = random(uv);\n    vec2 jitter = vec2(random(uv+.196),random(uv+4.1));\n    \n    // audio\n    fft = texture(iChannel0, vec2(0.)).r;\n    fft = pow(fft, .8);\n    float aa = abs(atan(uv.y, uv.x))/10.+fft*3.;\n    float lod = 100.;\n    aa = floor(aa*lod)/lod;\n    float fft2 = texture(iChannel0, vec2(fract(aa),0)).r;\n    \n    // timeline random (used in map to add extra rotation)\n    float t = time*2.;\n    float index = floor(t);\n    float anim = fract(t);\n    rnd = mix(random(vec2(index)), random(vec2(index+1.)), anim);\n    \n    // blur edge\n    float luv = length(uv);\n    ray.xy += jitter * smoothstep(.5, 2., luv)*.1;\n    \n    // glitch blur\n    vec2 llod = 10.*vec2(random(vec2(floor(time*4.+.5))), random(vec2(floor(time*2.))));\n    float blur = random(floor(uv*llod)+floor(time*4.));\n    ray.xy += jitter*step(.95, blur)*.1;\n    \n    // raymarch\n    const float count = 100.;\n    float shade = 0.;\n    float total = 0.;\n    for (float index = count; index > 0.; --index) {\n        float dist = map(pos);\n        if (dist < .0001 * total || total > 10.) {\n            shade = index/count;\n            break;\n        }\n        // blur in distance\n        ray.xy += jitter*total*.0005;\n        dist *= .9+.1*rng;\n        total += dist;\n        pos += ray * dist;\n    }\n    \n    // background\n    vec3 color = vec3(0);\n    color += ss(4.,.5, luv)*.5;\n    \n    // circle fft\n    luv = length(uv);\n    color += ss(.01,.0,abs(abs(luv-fft))-fft2*.2);\n    \n    // shading\n    if (total < 10. && shade > .0) {\n        color = vec3(0.2);\n        vec2 unit = vec2(.001,0);\n        vec3 normal = normalize(vec3(map(pos+unit.xyy)-map(pos-unit.xyy), map(pos+unit.yxy)-map(pos-unit.yxy), map(pos+unit.yyx)-map(pos-unit.yyx)));\n        vec3 rf = reflect(ray, normal);\n        color += .5+.5*cos(vec3(1,2,3)*5.+pos.z+blur);\n        color *= mod(material, 2.);\n        color += pow(dot(ray, normal)*.5+.5, 1.) * 2.;\n        color += pow(dot(rf, vec3(0,1,0))*.5+.5, 10.);\n        color *= shade;\n    }\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 30082,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/diffty/dj-set-dnb-footwork-eclipse-sur-la-canopee-2017-06-03"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}