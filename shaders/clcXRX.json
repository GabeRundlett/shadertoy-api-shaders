{
    "Shader": {
        "info": {
            "date": "1685620306",
            "description": "random raymarching 1\n0.8 part smoothing and 32 loop",
            "flags": 0,
            "hasliked": 0,
            "id": "clcXRX",
            "likes": 4,
            "name": "random raymarching 1",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 1617
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define TAU 6.2831852\n#define T(s) fract(iTime * s) * PI * 4.\n#define T2(s) fract(iTime * s) * 5.\n\nfloat smin(float a, float b, float r)\n{\n  float h = clamp(.5 + .5 * (b - a) / r, 0., 1.);\n  return mix(b, a, h) - r * h * (1. - h);\n}\n\nmat2 rotation(float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c, s, -s, c);\n}\n\nfloat deg2Rad(float deg) {\n  // return deg * PI / 180.;\n  return radians(deg);\n}\n\nfloat calcSquare(vec3 pos) {\n  vec2 uv = pos.xy;\n\n  uv *= rotation(T(.05));\n\n  uv.x += cos(pos.z) * .3;\n  uv.y += sin(pos.z) * .3;\n\n  float p = abs(uv.x) - .05;\n\n  p = min(-p, -(abs(uv.y) - .05));\n\n  p *= -1.;\n\n  uv *= 1.5;\n\n  float s2 = abs(uv.x) - .05;\n  s2 = min(-s2, -(abs(uv.y) - .05));\n  s2 *= -1.;\n\n  p = max(p, -s2);\n\n  return max(p, abs(pos.z) - 11.5);\n}\n\n/*\n  tunnel map2\n  \n  p.xy *= rotation( p.z * -.75 );\n  \n  p.z += fract( iTime * .25 );\n  \n  p = mod( p, vec3( .5, .5, .1 ) ) - vec3( .25, .25, .05 );\n  \n  //p.xz *= rotation( T( .125  )  );\n  //p.yz *= -rotation( T( .125 ) );\n  \n\n  d = max(\n      max( abs( p.x ) - .1, abs( p.z ) - .1 ),\n      abs( p.y ) - .1\n  );\n*/\n\nfloat map(vec3 p)\n{\n  float d = 5.0;\n\n  p.yz *= rotation(PI * .05);\n  p.z += T2(.05);\n\n  p.z = p.z - 5. * clamp(round(p.z / 5.), -1., 1.);\n\n  float count = 10.;\n\n  for (float i = 0.; i < count; i++) {\n    vec3 pp = p;\n\n    pp.xy *= rotation(deg2Rad((360. / count) * i) + PI * .5);\n\n    d = smin(d, calcSquare(pp), .12);\n  }\n\n  return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n  vec2 e = vec2(1.0, -1.0) * 0.5773;\n  const float eps = 0.0005;\n  return normalize(e.xyy * map(pos + e.xyy * eps) +\n    e.yyx * map(pos + e.yyx * eps) +\n    e.yxy * map(pos + e.yxy * eps) +\n    e.xxx * map(pos + e.xxx * eps));\n}\n\nvec3 raymarching(vec3 ro, vec3 rd) {\n  float t = 0.,\n    dist = 0.;\n\n  vec3 lig = normalize(vec3(.57703));\n  lig.xz *= rotation(T(.05));\n  vec3 hal = normalize(lig - rd);\n\n  vec3 pos = vec3(0.);\n\n  for (int i = 0; i < 32; i++) {\n    pos = ro + rd * t;\n    dist = map(pos);\n\n    if (t > 1e3) {\n      break;\n    }\n\n    t += dist * .777778;\n  }\n\n  if (dist < 1e-3) {\n    vec3 nor = calcNormal(pos);\n\n    float dif = clamp(dot(nor, vec3(.4, 1., -.5)), 0.0, 1.0);\n\n    float spe = pow(clamp(dot(nor, hal), 0.0, 1.0), 50.0) * .6;\n    spe *= dif;\n\n    float amb = dot(nor, vec3( 0., -0.3, 0. ) );\n\n    return sqrt(spe + vec3(.9) * amb + vec3(.9) * dif - vec3(.2));\n  }\n\n  return vec3(0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = fragCoord / iResolution.xy;\n\n  uv = (uv - .5) * 2.;\n\n  uv.x *= iResolution.x / -iResolution.y; // \n\n  // Time varying pixel color\n  vec3 col = vec3(0.);\n\n  vec3 ro = vec3(0., 0., -0.5);\n  vec3 rd = vec3(uv, 2.);\n\n  col = raymarching(ro, rd);\n\n  col = mix(\n    col,\n    vec3(0.),\n    1. - smoothstep(0., .3, length(uv - vec2(0., -.25)) - .1)\n  );\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"My Shader 0\",\n\t\"description\": \"Lorem ipsum dolor\",\n\t\"model\": \"person\"\n}\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}