{
    "Shader": {
        "info": {
            "date": "1513692184",
            "description": "Doodling. A fork from: https://www.shadertoy.com/view/XlSczc. I just wanted to see how it looks like if the point contribution is varied over distance.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtlfDj",
            "likes": 6,
            "name": "Festive doodle",
            "published": 3,
            "tags": [
                "colors",
                "weighing"
            ],
            "usePreview": 0,
            "username": "grinist",
            "viewed": 691
        },
        "renderpass": [
            {
                "code": "#define POINTS 31 // try between 3 and 511, gets slow fast\n#define PI 3.1415926536\n#define TAU (2.0 * PI)\n\n// A fork from: https://www.shadertoy.com/view/XlSczc.\n// I just wanted to see how it looks like if the point contribution is varied over distance.\n// Tried to remove trigonometric functions from the loops with incremental functions\n// for some speedup.\n\n// ----- Incremental trigonometry\nstruct Trig2\n{\n\tvec2 tsin;\n\tvec2 tcos;\n\tvec2 tcosd;\n\tvec2 tsind;\n};\nTrig2 trig2;\n\nvoid trig2Init(vec2 startAngle, vec2 increment)\n{\n\ttrig2.tsin = sin(startAngle);\n\ttrig2.tcos = cos(startAngle);\n\ttrig2.tsind = sin(increment);\n\ttrig2.tcosd = cos(increment);\n}\n\nvoid trig2Inc()\n{\n\tvec2 sinn = trig2.tsin * trig2.tcosd + trig2.tcos * trig2.tsind;\n\tvec2 cosn = trig2.tcos * trig2.tcosd - trig2.tsin * trig2.tsind;\n\ttrig2.tsin = sinn;\n\ttrig2.tcos = cosn;\n}\n\nstruct Trig3\n{\n\tvec3 tsin;\n\tvec3 tcos;\n\tvec3 tcosd;\n\tvec3 tsind;\n};\nTrig3 trig3;\n\nvoid trig3Init(vec3 startAngle, vec3 increment)\n{\n\ttrig3.tsin = sin(startAngle);\n\ttrig3.tcos = cos(startAngle);\n\ttrig3.tsind = sin(increment);\n\ttrig3.tcosd = cos(increment);\n}\n\nvoid trig3Inc()\n{\n\tvec3 sinn = trig3.tsin * trig3.tcosd + trig3.tcos * trig3.tsind;\n\tvec3 cosn = trig3.tcos * trig3.tcosd - trig3.tsin * trig3.tsind;\n\ttrig3.tsin = sinn;\n\ttrig3.tcos = cosn;\n}\n// -----\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.8 + 10.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = (iResolution.x / iResolution.y);\n    uv.x *= aspect;\n    vec2 size = vec2(aspect, 1.0);\n\n    // array used to store contributions in first loop\n    float contribution[POINTS];\n    float cN = 0.0; // total contribution\n    float st = 0.4 + 0.4 * sin(time * 1.4);\n    float inc = 1.0 / float(POINTS) * TAU;\n    trig2Init(vec2(time * 0.15, time * 0.8), vec2(inc, inc * 3.0));\n    for (int i = 0; i < POINTS; i++)\n    {\n\t    vec2 pos = 0.5 * size + 0.4 * size * trig2.tsin;\n\t\tpos = (uv - pos) * 10.0;\n        float sqrDist = dot(pos, pos);\n        // point contribution\n    \tfloat c = 1.0 / (sqrDist + 0.001);\n        float id = 1.0 / (sqrDist + 1.0);\n        c = c - c * st * id * sin(60.0 * id + time * 10.0);\n        contribution[i] = c;\n        // sum total contribution\n        cN += c;\n        trig2Inc();\n    }\n    \n    // normalize contributions and weigh colors\n    vec3 col = vec3(0, 0, 0);\n    cN = 1.0 / cN;\n    inc = 1.0 / float(POINTS) * TAU * 2.0;\n    trig3Init(vec3(time + 2.0, time * 2.0 + 3.0, time * 3.0 + 4.0), vec3(inc, inc * 2.0, inc * 1.0));\n    for (int i = 0; i < POINTS; i++)\n    {\n\t    vec3 pcol = vec3(0.6, 0.5, 0.7) + vec3(0.4, 0.4, 0.3) * trig3.tcos;\n        col += contribution[i] * cN * pcol;\n      \ttrig3Inc();\n    }\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}