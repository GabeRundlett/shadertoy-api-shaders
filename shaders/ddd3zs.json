{
    "Shader": {
        "info": {
            "date": "1677732726",
            "description": "Closest point on a cone segment. See more primitives here: [url]https://www.shadertoy.com/playlist/wXsSzB[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ddd3zs",
            "likes": 30,
            "name": "Capped Cone - closest 3D",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "cone",
                "closest"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 710
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Closest point on a capped cone. For closest points on other primitives, check\n//\n//    https://www.shadertoy.com/playlist/wXsSzB\n\n\n// .x   distance to the cone\n// .yzw closest point\nvec4 sdcCappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    //--------------------------------------\n    // 3D to 2D : p.xyz -> (u,v)\n    //--------------------------------------\n    vec3 pa = p-a;\n    vec3 ba = b-a;\n    \n    float baba = dot(ba,ba);\n    float bale = sqrt(baba);\n    \n    vec3  w = ba/bale;\n    float v = dot(pa,w);\n\n    vec3  q = a + w*v;\n    vec3  pq = p-q;\n    float pqpq = dot(pq,pq);\n    float u = sqrt(pqpq);\n    \n    //--------------------------------------\n    // distance and closest in 2D, in (u,v)\n    // from https://www.shadertoy.com/view/ddt3Rs\n    //--------------------------------------\n\n    float he = 0.5*bale;\n    v -= he;\n\n\n    float sy = (v<0.0)?-1.0:1.0;\n    \n    vec4 res;\n\n    // top and bottom edges\n    {\n    float h = min(u,(v<0.0)?ra:rb);\n    vec2  c = vec2(h,sy*he);\n    vec2  q = vec2(u,v) - c;\n    float d = dot(q,q);\n    float s = abs(v)-he;\n    res = vec4(d,c.x,c.y,s);\n    }\n    \n    // side edge\n    {\n    vec2  k = vec2(rb-ra,2.0*he);\n    vec2  w = vec2(u,v)-vec2(ra,-he);\n    float h = clamp(dot(w,k)/dot(k,k),0.0,1.0);\n    vec2  c = vec2(ra,-he) + h*k;\n    vec2  q = vec2(u,v) - c;\n    float d = dot(q,q);\n    float s = w.x*k.y - w.y*k.x;\n    res = vec4( (d<res.x) ? vec3(d,c.x,c.y) : res.xyz,\n                (s>res.w) ?      s          : res.w );\n    }\n   \n    // distance and sign\n    res.x = sqrt(res.x)*sign(res.w);\n    // closest is in res.yz\n\n    //--------------------------------------\n    // 2D to 3D : res.yz -> xyz\n    //--------------------------------------\n\n    float d = res.x;\n    vec2 cl = vec2(res.y,res.z+he);\n    \n    return vec4( d, a + w*cl.y + (p-q)*cl.x/u );\n}\n\n//------------------------------------------------------------\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, vec3 cen, float rad )\n{\n    return length(p-cen)-rad;\n}\n\n//------------------------------------------------------------\nconst vec3 pa = vec3(0.4, 0.6, 0.0);\nconst vec3 pb = vec3(0.0,-0.4, 0.0);\nconst float ra = 0.2;\nconst float rb = 0.8;\n    \nvec2 map( in vec3 pos, bool showSurface, vec3 samplePoint )\n{\n\n\n    // compute closest point to gPoint on the surace of the capsule\n    vec3 closestPoint = sdcCappedCone(samplePoint, pa, pb, ra, rb ).yzw;\n    \n    // point\n    vec2 res = vec2( sdSphere( pos, samplePoint, 0.06 ), 1.0 );\n    \n    // closest point\n    {\n    float d = sdSphere( pos, closestPoint, 0.06 );\n    if( d<res.x ) res = vec2( d, 4.0 );\n    }\n    \n    // object\n    if( showSurface )\n    {\n    float d = sdcCappedCone( pos, pa, pb, ra, rb ).x;\n    if( d<res.x ) res =  vec2( d, 5.0 );\n    }\n\n    // segment\n    {\n    float d = sdCapsule( pos, samplePoint, closestPoint, 0.015 );\n    if( d<res.x ) res =  vec2( d, 4.0 );\n    }\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos, in bool showSurface, vec3 samplePoint )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps, showSurface, samplePoint ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps, showSurface, samplePoint ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps, showSurface, samplePoint ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps, showSurface, samplePoint ).x );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftShadow( vec3 ro, vec3 rd, in bool showSurface, vec3 samplePoint )\n{\n    float res = 1.0;\n    const float tmax = 2.0;\n    float t = 0.001;\n    for( int i=0; i<64; i++ )\n    {\n     \tfloat h = map(ro + t*rd, showSurface, samplePoint).x;\n        res = min( res, 64.0*h/t );\n    \tt += clamp(h, 0.01,0.5);\n        if( res<-1.0 || t>tmax ) break;\n        \n    }\n    res = max(res,-1.0);\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res); // smoothstep, in [-1,1]\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        // pixel sample\n        ivec2 samp = ivec2(fragCoord)*AA + ivec2(m,n);\n        // time sample\n        float td = 0.5+0.5*sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1);\n        float time = iTime - 0.0*0.5*(1.0/60.0)*(td+float(m*AA+n))/float(AA*AA-1);\n        #else    \n        // pixel coordinates\n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        // pixel sample\n        ivec2 samp = ivec2(fragCoord);\n        // time sample\n        float time = iTime;\n        #endif\n\n        // make shape transparent\n      //bool showSurface = ((samp.x+samp.y)&1)==0;     // 50% opaque\n        bool showSurface = ((samp.x&1)+(samp.y&1))!=0; // 75% opaque\n\n\n        // animate camera\n        float an = 0.25*time + 6.283185*iMouse.x/iResolution.x;\n        vec3 ro = vec3( 2.0*cos(an), 0.8, 2.0*sin(an) );\n        vec3 ta = vec3( 0.0, 0.0, 0.0 );\n\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.2,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n\n        // animate point\n        vec3 samplePoint = sin(time*0.9*vec3(1.0,1.1,1.2)+vec3(0.0,4.0,5.0));\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raycast\n        const float tmax = 5.0;\n        float t = 0.0;\n        float m = -1.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            vec2 hm = map(pos,showSurface,samplePoint);\n            m = hm.y;\n            if( hm.x<0.0001 || t>tmax ) break;\n            t += hm.x;\n        }\n    \n        // shade background\n        vec3 col = vec3(0.05)*(1.0-0.2*length(p));\n        \n        // shade objects\n        if( t<tmax )\n        {\n            // geometry\n            vec3  pos = ro + t*rd;\n            vec3  nor = calcNormal(pos,showSurface,samplePoint);\n\n            // color\n            vec3  mate = 0.55 + 0.45*cos( m + vec3(0.0,1.0,1.5) );\n            \n            // show distance isolines\n            if( abs(m-5.0)<0.5 )\n            {\n                float dref = sdcCappedCone( samplePoint, pa, pb, ra, rb ).x;\n                float dsam = length(pos-samplePoint);\n                mate += 0.25*smoothstep(0.8,0.9,sin((dsam-dref)*100.0))*exp2(-12.0*(dsam-dref)*(dsam-dref));\n            }\n            \n            // lighting\t\n            col = vec3(0.0);\n            {\n              // key light\n              vec3  lig = normalize(vec3(0.3,0.7,0.2));\n              float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n              if( dif>0.001 ) dif *= calcSoftShadow(pos+nor*0.001,lig,showSurface,samplePoint);\n              col += 1.5*mate*vec3(1.0,0.9,0.8)*dif;\n            }\n            {\n              // dome light\n              float dif = 0.5 + 0.5*nor.y;\n              col += 0.5*mate*vec3(0.2,0.3,0.4)*dif;\n            }\n        }\n\n        // gamma        \n        col = pow( col, vec3(0.4545) );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}