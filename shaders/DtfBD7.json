{
    "Shader": {
        "info": {
            "date": "1692988182",
            "description": "The name \"Harmonic Distortions\" gets to the heart of the code, in which audio harmonics and fractal distortions work together to make a world that looks both harmonious and messed up.",
            "flags": 64,
            "hasliked": 0,
            "id": "DtfBD7",
            "likes": 4,
            "name": "Distorsi Harmoni",
            "published": 3,
            "tags": [
                "glsl",
                "zhonk",
                "zhonkvision",
                "vjloop"
            ],
            "usePreview": 0,
            "username": "zhonkvision",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "// original code by shadertoyjiang\n// edited by Zhonk Vision\n// Simplex 2D noise function\nvec3 permute(vec3 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\n// Hash function\nfloat s(vec2 v) {\n    const vec4 C = vec4(0.511324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n    vec2 i = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(8.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m * m;\n    m = m * m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n// Rotation function with audio interaction\nvec2 rotate(vec2 p, float a, float audioAmplitude) {\n    float c = cos(a + audioAmplitude * 0.1); // Adjust the multiplier as needed\n    float s = sin(a + audioAmplitude * 0.1); // Adjust the multiplier as needed\n    return p * mat2(c, s, -s, c);\n}\n\n\n// Fractal shape function\nfloat fractalShape(vec2 u, float t, float audioAmplitude, float rotationSpeed) {\n    float n = sin(u.x) * cos(u.y);\n    float b;\n    \n    u = abs(u * 2.0);\n    b = u.x;\n    \n    vec2 a = vec2(2.0 - u);\n    \n    float param1 = 0.25 + audioAmplitude * 0.9; // Adjust the multiplier as needed\n    float param2 = 0.62 + audioAmplitude * 0.9; // Adjust the multiplier as needed\n    \n    for (int i = 0; i < 15; i++) {\n        a += u + cos(length(u));\n        u.y += sin(a.x - b - 0.5 * t) * param1;\n        u.x += sin(a.y + t) * param2;\n        u -= (u.x + u.y) - n;\n        a.x += u.x;\n    }\n    \n    return length(u) * 0.1;\n}\n\nvoid mainImage(out vec4 O, in vec2 fragCoord) {\n    vec2 R = iResolution.xy;\n    vec2 u = (fragCoord * 2.0 - R) / R.y * 2.0 - vec2(0.0, 1.3);\n    u = u.yx;\n    \n    float t = 1.93 + iTime * 0.5;\n    \n    // Get the audio amplitude from the input texture\n    float audioAmplitude = texture(iChannel0, vec2(0.1)).r;\n    \n    // Calculate the fractal shape value\n    float fractalValue = fractalShape(u, t, audioAmplitude, 0.5);\n    \n    // Calculate the rotation angle based on the audio amplitude for medium frequency\n    float rotationAngle = audioAmplitude * 0.5; // Adjust the multiplier as needed\n    \n    // Apply rotation to the point\n    u = rotate(u, rotationAngle, audioAmplitude);\n    \n    // Define parameters to control color change with audio interaction\n    vec3 lowFrequencyColor = vec3(0.2, 0.0, 1.0); // Purple color for low frequency\n    vec3 highFrequencyColor = vec3(1.0, 0.2, 0.8); // Pink color for high frequency\n    \n    // Calculate the color gradient based on the audio amplitude\n    vec3 color = mix(lowFrequencyColor, highFrequencyColor, audioAmplitude);\n    \n    // Mix color gradient with black based on the fractal value\n    vec3 finalColor = mix(vec3(0.0), color, fractalValue);\n    \n    O = vec4(finalColor, 1.0);\n}\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34539,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/sentimony/psydewise-crystalized-mind?si=ed6c3028d9ec4d03a3a86315bc2cb162&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}