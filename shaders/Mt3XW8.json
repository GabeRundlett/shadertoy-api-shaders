{
    "Shader": {
        "info": {
            "date": "1479405937",
            "description": "some pixel tile experiment (slightly inspired by fabrice's polka dots)\nbuffer a records the video histroy,\nimage shader flips pixels",
            "flags": 32,
            "hasliked": 0,
            "id": "Mt3XW8",
            "likes": 71,
            "name": "polka pixels",
            "published": 3,
            "tags": [
                "video",
                "effect",
                "tile"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 2626
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// flip pixels randomly from old frame to new frame\n\n// tiles of the video history (as in BufA)\n#define Xnum 10\n#define Ynum 10\n\n// tile size in pixels (proportional sqrt(Res), otherwise pixels get too small in preview)\n#define TileSize (20.*sqrt(iResolution.y/1080.))\n// take every DFrame'th frame\n#define DFrame 30\n\n\n#define Res1 iChannelResolution[1].xy\n\nfloat rectMask(float b, float w, vec2 uv)\n{\n\tvec4 e=smoothstep(vec4(-b-.5*w),vec4(-b+.5*w),vec4(uv,vec2(1)-uv));\n    return e.x*e.y*e.z*e.w;\n}\n\nvec2 frameUV(int frame, vec2 uv)\n{\n    frame = int(mod(float(frame+Xnum*Ynum),float(Xnum*Ynum)));\n    return (uv+vec2(mod(float(frame),float(Xnum)),frame/Xnum))/vec2(Xnum,Ynum);\n}\n\nvec4 getColor(float frame, vec2 uv)\n{\n    vec4 c1=texture(iChannel0,frameUV(int(floor(frame)),uv));\n    return c1;\n    vec4 c2=texture(iChannel0,frameUV(int(ceil(frame)),uv));\n    return mix(c1,c2,fract(frame));\n}\n\nfloat getFrameSpec(vec2 duv, vec2 fragCoord)\n{\n    vec2 uvS=.85*duv*pow(abs(.85*duv),vec2(20.))*530.;\n    vec3 n=normalize(vec3(uvS,1.1));\n    vec3 v=normalize(vec3((fragCoord-iResolution.xy*.5)/iResolution.x*.25,-1));\n    vec3 light=vec3(3.5,2.3,-2.6);\n    vec3 halfVec=normalize(normalize(-v)+normalize(light));\n    return pow(clamp(dot(n,halfVec),0.,1.),10.);\n}\n\nfloat getVign(vec2 fragCoord)\n{\n\tfloat rs=length(fragCoord-iResolution.xy*.5)/iResolution.x;\n    return 1.-rs*rs*rs;\n}\n\nfloat circle(vec2 uv, float r)\n{\n    float l=length(uv-.5);\n    return 1.-smoothstep(r-.05,r+.05,l);\n}\n\nfloat circleMask(vec2 uv,float y, float i1, float i2)\n{\n    float r1=.45;\n    float r2=.45;\n    r1*=i1;\n    r2*=i2;\n    return circle(uv+vec2(0,y-1.),r1)+circle(uv+vec2(0,y),r2);\n}\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int actFrame=(iFrame/DFrame)*DFrame;\n    int prevFrame=(iFrame/DFrame-1)*DFrame;\n    vec4 rand = texture(iChannel1,(floor(fragCoord/TileSize+float(iFrame/DFrame)*1.*13.)+.5)/Res1);\n    \n    vec2 uvQ = (floor(fragCoord/TileSize)*TileSize)/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 duv = (uv-uvQ)*iResolution.xy/TileSize;\n    \n    vec4 c1=getColor(float(actFrame),uvQ);\n    vec4 c2=getColor(float(prevFrame),uvQ);\n    \n    // let the pixels flip at a randomly\n    float y=-rand.x*2.+3.*float(iFrame-actFrame)/float(DFrame);\n    y=clamp(y,0.,1.);\n    y*=y;\n    float r = fract(rand.y+float(actFrame/DFrame)*.25);\n    float thr=1.-duv.y;\n    \n    // some tests flipping in different directions\n    //if (r>.25) thr=1.-duv.x;\n    //if (r>.50) thr=duv.x;\n    //if (r>.75) thr=duv.y;\n    \n    // some tests playing with different circle sizes prop to color intensity\n    //float i1=dot(vec3(.333),c1.xyz);\n    //float i2=dot(vec3(.333),c2.xyz);    \n    float i1=1.;\n    float i2=1.;\n    \n\tfragColor = mix(c1,c2,smoothstep(y-.1,y+.1,thr));\n    fragColor = mix(fragColor,vec4(.2,.3,.4,1),.15-.15*circleMask(duv,y,i1,i2));\n    \n    // some rectangular ambient around every macro-pixel\n    fragColor *= .5+.5*rectMask(.2*(dot(fragColor.xyz,vec3(.333))),.7,duv);\n    \n    float spec = 0.0\n        //+getFrameSpec(duv,fragCoord)\n        //+getFrameSpec(fract(duv+vec2(0,y)),fragCoord)\n        //+getCricleSpec(fract(duv+vec2(0,y)),fragCoord)\n        +clamp((circleMask(duv-.02,y,i1,i2)-circleMask(duv+.02,y,i1,i2)),-.4,1.)\n        ;\n    \n    fragColor.xyz += .5*spec;\n    fragColor *= 1.2*getVign(fragCoord);\n    //fragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// record video histroy in Xnum*Ynum grid\n\n#define Xnum 10\n#define Ynum 10\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0=fragCoord/iResolution.xy;\n    int fr=int(uv0.x*float(Xnum))+int(uv0.y*float(Xnum))*Ynum;\n    if(fr!=int(mod(float(iFrame),float(Xnum*Ynum)))) \n        fragColor = texture(iChannel1,uv0);\n    else\n        fragColor = texture(iChannel0,fract(uv0*vec2(Xnum,Ynum)));\n    if(iFrame<5)\n        fragColor = texture(iChannel0,fract(uv0*vec2(Xnum,Ynum)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}