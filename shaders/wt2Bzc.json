{
    "Shader": {
        "info": {
            "date": "1599550684",
            "description": "Riding the thermals",
            "flags": 0,
            "hasliked": 0,
            "id": "wt2Bzc",
            "likes": 7,
            "name": "Misty Flight",
            "published": 3,
            "tags": [
                "cloud",
                "landscape",
                "fog",
                "aircraft",
                "fly"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 772
        },
        "renderpass": [
            {
                "code": "// \"Misty Flight\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv3 (vec3 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define VAR_ZERO min (iFrame, 0)\n\nmat3 flyerMat[2], flMat;\nvec3 qHit, flyerPos[2], flPos, trkA, trkF, sunDir, noiseDisp;\nfloat dstFar, tCur, fogFac;\nint idObj;\nbool loRes;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrndHt (vec2 p)\n{\n  mat2 qRot;\n  vec2 q;\n  float f, a, s;\n  q = 0.1 * p;\n  qRot = 2. * mat2 (0.8, -0.6, 0.6, 0.8);\n  a = 1.;\n  f = 0.;\n  s = 0.;\n  for (int j = 0; j < 6; j ++) {\n    f += a * Noisefv2 (q);\n    s += a;\n    a *= 0.5;\n    q *= qRot;\n    if (loRes && j == 3) break;\n  }\n  return 8. * f / s;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.2, 0.8 * h);\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy),\n     GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, szFac;\n  szFac = 0.25;\n  dMin = dstFar / szFac;\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    q = flyerMat[k] * (p - flyerPos[k]) / szFac;\n    q.xy = Rot2Cs (vec2 (abs (q.x) + 0.2, q.y), sin (- pi / 6. + vec2 (0.5 * pi, 0.)));\n    d = max (PrRoundBoxDf (vec3 (Rot2Cs (q.xz, sin (- pi / 6. + vec2 (0.5 * pi, 0.))),\n       q.y).xzy, vec3 (0.8, 0., 1.), 0.015), -0.8 - q.z);\n    DMINQ (1 + k);\n  }\n  return szFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat FrAbsf (float p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nvec3 FrAbsv3 (vec3 p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nfloat TriNoise3d (vec3 p)\n{   // adapted from nimitz's \"Oblivion\"\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += FrAbsv3 (q + FrAbsv3 (q).yzx);\n    p *= 1.2;\n    f += a * (FrAbsf (p.x + FrAbsf (p.y + FrAbsf (p.z))));\n    q = 2. * q + 0.2;\n    a *= 0.7;\n  }\n  return f;\n}\n\nfloat FogDens (vec3 p)\n{\n  return 0.3 * fogFac * TriNoise3d (0.1 * (p + noiseDisp)) * (1. - smoothstep (8., 15., p.y));\n}\n\nvec3 FogCol (vec3 col, vec3 ro, vec3 rd, float dHit)\n{  // adapted from \"Sailing Home\"\n  float s, ds, f, fn;\n  s = 2.;\n  ds = 0.5;\n  fn = FogDens (ro + s * rd);\n  for (int j = VAR_ZERO; j < 20; j ++) {\n    s += ds;\n    f = fn;\n    fn = FogDens (ro + (s + 0.5 * ds * Hashfv3 (16. * rd)) * rd);\n    col = mix (col, vec3 (0.9, 0.9, 0.85) * (1. - clamp (f - fn, 0., 1.)),\n       min (f * smoothstep (0.9 * s, 2. * s, dHit), 1.));\n    if (s > dHit) break;\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, roo, skyCol;\n  float dstGrnd, dstObj;\n  noiseDisp = 0.02 * tCur * vec3 (-1., 0., 1.) + 0.5 * sin (vec3 (0.2, 0.1, 0.3) * pi * tCur);\n  fogFac = 0.2 + 0.8 * smoothstep (0.1, 0.4, 0.5 - abs (mod (0.05 * tCur, 1.) - 0.5));\n  roo = ro;\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  skyCol = vec3 (0.5, 0.6, 0.9) - rd.y * 0.2 * vec3 (1., 0.5, 1.) +\n     0.2 * vec3 (1., 0.6, 0.1) * pow (clamp (dot (sunDir, rd), 0., 1.), 32.);\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      col = mix (((idObj == 1) ? vec3 (1., 0., 0.) : vec3 (0., 0., 1.)), vec3 (1.),\n         step (0.02, abs (abs (qHit.x) - 0.65)));\n      col = mix (col, vec3 (1., 1., 0.), step (0.8, qHit.z));\n      vn = ObjNf (ro);\n      col = col * (0.2 + 0.2 * max (- dot (vn, sunDir), 0.) + 0.8 * max (dot (vn, sunDir), 0.)) +\n         0.2 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    } else if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      vn = GrndNf (ro);\n      vn = VaryNf (16. * ro, vn, 1.);\n      col = mix (vec3 (0.5, 0.8, 0.4), vec3 (0.6, 0.6, 0.65), smoothstep (2., 6., ro.y)) *\n         (0.7 + 0.3 * Fbm2 (2. * ro.xz));\n      col *= 0.4 + 0.6 * max (dot (vn, sunDir), 0.);\n    }\n    col = mix (vec3 (0.5, 0.6, 0.9), col,\n       exp (- 2. * clamp (5. * (min (dstGrnd, dstObj) / dstFar - 0.8), 0., 1.)));\n  } else col = skyCol;\n  col = FogCol (col, roo, rd, min (dstGrnd, dstObj));\n  return col;\n}\n\nvec3 TrkPath (float t)\n{\n  return vec3 (dot (trkA, sin (trkF * t)), 0., t);\n}\n\nvec3 TrkVel (float t)\n{\n  return vec3 (dot (trkF * trkA, cos (trkF * t)), 0., 1.);\n}\n\nvec3 TrkAcc (float t)\n{\n  return vec3 (dot (trkF * trkF * trkA, - sin (trkF * t)), 0., 0.);\n}\n\nvoid FlyerPM (float t)\n{\n  vec3 vel, va, flVd;\n  vec2 cs;\n  float oRl;\n  flPos = TrkPath (t);\n  vel = TrkVel (t);\n  va = cross (TrkAcc (t), vel) / length (vel);\n  flVd = normalize (vel);\n  oRl = 2. * length (va) * sign (va.y);\n  cs = sin (oRl + vec2 (0.5 * pi, 0.));\n  flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) *\n     mat3 (flVd.z, 0., flVd.x, 0., 1., 0., - flVd.x, 0., flVd.z);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, flyVel, vDir, hSum, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.45 * pi * mPtr.y;\n  }\n  flyVel = 1.;\n  trkA = vec3 (1.9, 2.9, 4.3);\n  trkF = vec3 (0.23, 0.17, 0.13);\n  vDir = sign (0.5 * pi - abs (az));\n  loRes = true;\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    t = flyVel * tCur + vDir * (2. + 3. * float (k));\n    FlyerPM (t);\n    flyerMat[k] = flMat;\n    flyerPos[k] = flPos;\n    hSum = 0.;\n    for (float j = 0.; j < 5.; j ++) hSum += GrndHt (TrkPath (t + 0.5 * vDir * (j - 1.)).xz);\n    flyerPos[k].y = 6. + hSum / 5.;\n  }\n  t = flyVel * tCur;\n  FlyerPM (t);\n  ro = flPos;\n  hSum = 0.;\n  for (float j = 0.; j < 5.; j ++) hSum += GrndHt (TrkPath (t + 0.5 * (j - 1.)).xz);\n  ro.y = 6. + hSum / 5.;\n  loRes = false;\n  vuMat = StdVuMat (el, az);\n  zmFac = 3.;\n  dstFar = 100.;\n  sunDir = normalize (vec3 (1., 1.5, -1.));\n  rd = vuMat * (normalize (vec3 (uv, zmFac)) * flMat);\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}