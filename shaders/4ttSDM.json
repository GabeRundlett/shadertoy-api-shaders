{
    "Shader": {
        "info": {
            "date": "1479978388",
            "description": "I really like the overwatch spinner when searching for a game. the combination of motions is so smooth yet complex.\nSurely the code can be simplified and optimized but I'm too tired for this :)",
            "flags": 0,
            "hasliked": 0,
            "id": "4ttSDM",
            "likes": 45,
            "name": "Overwatch Spinner",
            "published": 3,
            "tags": [
                "2d",
                "spinner",
                "fanart",
                "overwatch"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 2093
        },
        "renderpass": [
            {
                "code": "#define _Smooth(p,r,s) smoothstep(-s, s, p-(r))\n#define PI 3.141592\n#define TPI 6.2831\n#define HPI 1.570796\n\nfloat GetBias(float x,float bias)\n{\n  return (x / ((((1.0/bias) - 2.0)*(1.0 - x))+1.0));\n}\nfloat GetGain(float x,float gain)\n{\n  if(x < 0.5)\n    return GetBias(x * 2.0,gain)/2.0;\n  else\n    return GetBias(x * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;\n}\n\n// from https://iquilezles.org/articles/smin\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return (-smin(-a,-b,k));\n}\n\nfloat sclamp(float f,float k)\n{\n    return smin(1.,smax(0.,f,k),k);\n}\n\n\n\nfloat hex(vec2 pos)\n{\n    const float corner = .015;\n    vec2 q = abs(pos);\n\treturn smax(\n        smax((q.x * 0.866025 +pos.y*0.5),q.y,corner),\n        smax((q.x * 0.866025 -pos.y*0.5),q.y,corner),corner);\n}\n\nfloat hexRadiusFactor(float time)\n{\n    time *= 2.;\n    float s = sclamp(sin(time )+.65,.25);\n\t\n    return s;\n}\n\nvoid hexFest(inout vec3 col,in vec2 uv, in float time)\n{\n    vec3 hexColor = vec3(0.294,0.360,0.478);\n    \n    float a =- PI / 3.;\n    float sa = sin(a);\n    float ca = cos(a);\n    uv = mat2(sa,ca,ca,-sa) * uv;\n    \n     //hexagones\n    float deltaTime = 1./8. * 1.2;\n    float baseHexRadius = .1;\n    vec2 hexDelta = vec2(.195,.21);\n    \n    float timeAccu = 1.;\n    \n    float rf,radius,f = 0.;\n    \n    \n    \n    //hex1\n    timeAccu += 1.;\n    rf = hexRadiusFactor(time + deltaTime * timeAccu);\n    radius = baseHexRadius * rf;\n    \n    f = hex(uv);\n    f = _Smooth(radius,f,.0025);\n\n    col = mix(col,hexColor,f * rf);\n    \n    //hex2\n    timeAccu += 1.;\n    rf = hexRadiusFactor(time + deltaTime * timeAccu);\n    radius = baseHexRadius * rf;\n    \n    f = hex(uv - hexDelta * vec2(1.,.5));\n    f = _Smooth(radius,f,.0025);\n\n    col = mix(col,hexColor,f * rf);\n    \n    //hex3\n    timeAccu += 1.;\n    rf = hexRadiusFactor(time + deltaTime * timeAccu);\n    radius = baseHexRadius * rf;\n    \n    f = hex(uv - hexDelta * vec2(1.,-.5));\n    f = _Smooth(radius,f,.0025);\n\n    col = mix(col,hexColor,f * rf);\n    \n    //hex4\n    timeAccu += 1.;\n    rf = hexRadiusFactor(time + deltaTime * timeAccu);\n    radius = baseHexRadius * rf;\n    \n    f = hex(uv - hexDelta * vec2(.0,-1.));\n    f = _Smooth(radius,f,.0025);\n\n    col = mix(col,hexColor,f * rf);\n    \n    //hex5\n    timeAccu += 1.;\n    rf = hexRadiusFactor(time + deltaTime * timeAccu);\n    radius = baseHexRadius * rf;\n    \n    f = hex(uv - hexDelta * vec2(-1.,-.5));\n    f = _Smooth(radius,f,.0025);\n\n    col = mix(col,hexColor,f * rf);\n    \n    //hex6\n    timeAccu += 1.;\n    rf = hexRadiusFactor(time + deltaTime * timeAccu);\n    radius = baseHexRadius * rf;\n    \n    f = hex(uv - hexDelta * vec2(-1.,.5));\n    f = _Smooth(radius,f,.0025);\n\n    col = mix(col,hexColor,f * rf);\n    \n    \n    //hex7\n    timeAccu += 1.;\n    rf = hexRadiusFactor(time + deltaTime * timeAccu);\n    radius = baseHexRadius * rf;\n    \n    f = hex(uv - hexDelta * vec2(0.,1.));\n    f = _Smooth(radius,f,.0025);\n\n    col = mix(col,hexColor,f * rf);\n}\n\n\n#define _Circle(l,r,ht,s) _Smooth(len,r-ht,s) - _Smooth(len,r+ht,s) \n\nvoid circleFest(inout vec3 col,in vec2 uv, in float time)\n{\n\tfloat len = length(uv);\n    float ang = atan(uv.y,uv.x);\n    \n    vec3 circleCol = vec3(0.);\n    \n    float f = (_Circle(len,.45,.003,.013)) * .15;\n    col = mix(col,circleCol,f);\n    \n    time = -1.485 + time*2.;// * 2. + 1.4;\n    \n    float a = (ang + time) / TPI;\n    a = (a - floor(a));\n    \n    f = (_Circle(len,.45,.006,.013)) *.05;\n    \n    float startTime = max(mod(time + HPI,TPI),PI) + HPI;\n    \n    float start = sin(startTime) * .5 + .5;\n    \n    float endTime = min(mod(time + HPI,TPI),PI) + HPI;\n    \n    float end = sin(endTime)*.5+.5;\n    \n    f *= step(a,1.-start) - step(a,end);\n    col = mix(col,circleCol,f*3.5);\n    \n    f = (_Circle(len,.45,.003,.013)) ;\n    f *= step(a,.04 + sin(time) * .01) - step(a,0.);\n   \n    col = mix(col,circleCol,f);\n   \n    f = (_Circle(len,.62,.003,.013)) ;\n    col = mix(col,circleCol,f*.25);\n    \n    f = (_Circle(len,.62,.003,.013)) ;\n    \n    time += 1.;\n    time = GetGain(fract(time/TPI),.25) * TPI;\n    a = (ang - time - 1.5) / TPI;\n    a += sin(time) * .15;\n    a = (a - floor(a)) ;\n    //a = GetBias(a,.65);\n    f *= step(a,.03 ) - step(a,0.);\n    col = mix(col,circleCol,f);\n    \n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.y) - vec2(iResolution.x / iResolution.y * .5,.5);\n    uv *= 1.6;\n    vec3 col = vec3(.1,.0,.4) + vec3(pow(1.-length(uv*.25),.4));\n    \n    float time = iTime + 1.1;\n    \n    hexFest(col,uv,time);\n    circleFest(col,uv,time);\n   \n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}