{
    "Shader": {
        "info": {
            "date": "1556308436",
            "description": "Used in DepthLab: Real-Time 3D Interaction With Depth Maps for Mobile Augmented Reality https://augmentedperception.github.io/depthlab/",
            "flags": 0,
            "hasliked": 0,
            "id": "tllGR7",
            "likes": 2,
            "name": "Turbo Colormap",
            "published": 3,
            "tags": [
                "color"
            ],
            "usePreview": 0,
            "username": "starea",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "#define BLACK_BANDS\n\nfloat saturate(float x) {\n  return clamp( x, 0.0, 1.0 );\n}\n\nvec3 GetPolynomialColor(in float x, in vec4 kRedVec4, in vec4 kGreenVec4, in vec4 kBlueVec4,\n                       in vec2 kRedVec2, in vec2 kGreenVec2, in vec2 kBlueVec2) {\n  x = saturate(x);\n  vec4 v4 = vec4( 1.0, x, x * x, x * x * x);\n  vec2 v2 = v4.zw * v4.z;\n  return vec3(\n    dot(v4, kRedVec4) + dot(v2, kRedVec2),\n\tdot(v4, kGreenVec4) + dot(v2, kGreenVec2),\n\tdot(v4, kBlueVec4) + dot(v2, kBlueVec2)\n  );\n}\n\nvec3 Turbo(in float x) {\n  const vec4 kRedVec4 = vec4(0.13572138, 4.61539260, -42.66032258, 132.13108234);\n  const vec4 kGreenVec4 = vec4(0.09140261, 2.19418839, 4.84296658, -14.18503333);\n  const vec4 kBlueVec4 = vec4(0.10667330, 12.64194608, -60.58204836, 110.36276771);\n  const vec2 kRedVec2 = vec2(-152.94239396, 59.28637943);\n  const vec2 kGreenVec2 = vec2(4.27729857, 2.82956604);\n  const vec2 kBlueVec2 = vec2(-89.90310912, 27.34824973);\n  return GetPolynomialColor(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 Inferno(in float x) {\n  const vec4 kRedVec4 = vec4(-0.027780558, 1.228188385, 0.278906882, 3.892783760);\n  const vec4 kGreenVec4 = vec4(0.014065206, 0.015360518, 1.605395918, -4.821108251);\n  const vec4 kBlueVec4 = vec4(-0.019628385, 3.122510347, -5.893222355, 2.798380308);\n  const vec2 kRedVec2 = vec2(-8.490712758, 4.069046086);\n  const vec2 kGreenVec2 = vec2(8.389314011, -4.193858954);\n  const vec2 kBlueVec2 = vec2(-3.608884658, 4.324996022);\n  return GetPolynomialColor(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 Magma(in float x) {\n  const vec4 kRedVec4 = vec4(-0.023226960, +1.087154378, -0.109964741, +6.3336657630);\n  const vec4 kGreenVec4 = vec4(+0.010680993, +0.176613780, +1.638227448, -6.743522237);\n  const vec4 kBlueVec4 = vec4(-0.008260782, +2.244286052, +3.005587601, -24.279769818);\n  const vec2 kRedVec2 = vec2(-11.640596589, +5.337625354);\n  const vec2 kGreenVec2 = vec2(+11.426396979, -5.523236379);\n  const vec2 kBlueVec2 = vec2(+32.484310068, -12.6882);\n  return GetPolynomialColor(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nvec3 Plasma(in float x) {\n  const vec4 kRedVec4 = vec4(+0.063861086, +1.992659096, -1.023901152, -0.490832805);\n  const vec4 kGreenVec4 = vec4(+0.049718590, -0.791144343, +2.892305078, +0.811726816);\n  const vec4 kBlueVec4 = vec4(+0.513275779, +1.580255060, -5.164414457, +4.559573646);\n  const vec2 kRedVec2 = vec2(+1.308442123, -0.914547012);\n  const vec2 kGreenVec2 = vec2(-4.686502417, +2.717794514);\n  const vec2 kBlueVec2 = vec2(-1.916810682, +0.570638854);\n  return GetPolynomialColor(x, kRedVec4, kGreenVec4, kBlueVec4, kRedVec2, kGreenVec2, kBlueVec2);\n}\n\nfloat tri( float x ) { return 1.0 - abs( fract( x * 0.5 ) - 0.5 ) * 2.0; }\nvec3 smoothstep_unchecked( vec3 x ) { return ( x * x ) * ( 3.0 - x * 2.0 ); }\nvec3 smoothbump( vec3 a, vec3 r, vec3 x ) { return 1.0 - smoothstep_unchecked( min( abs( x - a ), r ) / r ); }\nfloat greyScale(in vec3 col) \n{\n    return dot(col, vec3(0.3, 0.59, 0.11));\n    //return dot(col, vec3(0.2126, 0.7152, 0.0722)); //sRGB\n}\n#ifdef SHADERTOY_STANDALONE\nvoid main()\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n#endif\n{\n\tfragColor.a = 1.0;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tif ( uv.y > 0.75 ) fragColor.xyz = Turbo( uv.x );\n\telse if ( uv.y > 0.5 ) fragColor.xyz = vec3(greyScale(Turbo( uv.x )));\n\telse if ( uv.y > 0.25 ) fragColor.xyz = Inferno( uv.x );\n\telse if ( uv.y > 0.0 ) fragColor.xyz = vec3(greyScale(Inferno( uv.x )));\n\t\n\t#ifdef BLACK_BANDS\n\tfloat r = 32.0 / iResolution.y;\n\tfragColor.xyz *= step( r, tri( uv.y / 0.125 ) );\n\t#endif\n\n\t#ifdef PLOT_CURVES\n\tfloat y = fract( uv.y / 0.25 );\n\tfloat r = 6.0 / iResolution.y;\n\tfragColor.xyz += smoothbump( vec3( 0.0 ), vec3( r ), vec3( y ) - fragColor.xyz );\n\t#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}