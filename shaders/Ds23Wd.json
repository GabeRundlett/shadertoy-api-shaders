{
    "Shader": {
        "info": {
            "date": "1668378007",
            "description": "pie\nthe smallest distance to 3 points is calculated that way the pieces of pie look like circle segments",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds23Wd",
            "likes": 2,
            "name": "a pie chart",
            "published": 3,
            "tags": [
                "chart"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n       \n       vec2 o_pix_coo_nor = (fragCoord.xy-(iResolution.xy/2.0)) / iResolution.y; \n       vec2 o_mou_coo_nor = (iMouse.xy-(iResolution.xy/2.0)) / iResolution.y; \n\n\n       \n       float[] a_n_value =  float[](\n        300.0,\n        200.0,\n        150.0,\n        400.0,\n        200.0,\n        350.0,\n        150.0,\n        250.0,\n        50.0\n        );\n        \n        float n_val_sum = 0.0;\n        for(float n_i = 0.0; n_i < float(a_n_value.length()); n_i+=1.){\n            n_val_sum+=a_n_value[int(n_i)];\n        }\n\n        float n_tau = 6.283185;\n        float n_val_nor_start = 0.0;\n        float n_val_nor_end = 0.0;\n        vec2 o_delta = vec2(0.0,0.0)-o_pix_coo_nor;\n        for(float n_i = 0.0; n_i < float(a_n_value.length()); n_i+=1.){\n            float n_val_nor = a_n_value[int(n_i)] / n_val_sum;\n            n_val_nor_end += n_val_nor; \n            float n_tau = 6.2831;\n            float n_angle = atan(o_delta.y , o_delta.x)+(n_tau/2.0);\n            float n_angle_norm = n_angle / n_tau;\n\n            if(\n                n_angle_norm > n_val_nor_start\n                &&\n                n_angle_norm < n_val_nor_end\n            ){\n            \n                float n_radius = length(vec2(0.0,0.0)-o_pix_coo_nor);\n                float n_radius_max = 0.5;\n                \n                vec2 o_p1 = vec2(\n                    cos((n_val_nor_start)*n_tau)*n_radius, \n                    sin((n_val_nor_start)*n_tau)*n_radius\n                );\n                float n_dist1 = length(o_p1 - o_pix_coo_nor);\n                \n                vec2 o_p2 = vec2(\n                    cos((n_val_nor_end)*n_tau)*n_radius, \n                    sin((n_val_nor_end)*n_tau)*n_radius\n                );\n                float n_dist2 = length(o_p2 - o_pix_coo_nor);\n                \n                vec2 o_p3 = vec2(\n                    cos((n_angle_norm)*n_tau)*n_radius_max, \n                    sin((n_angle_norm)*n_tau)*n_radius_max\n                );\n                float n_dist3 = length(o_p3 - o_pix_coo_nor);\n                float n_dist_min = min(n_dist1, n_dist2);\n                n_dist_min = min(n_dist_min, n_dist3);\n                \n                fragColor = vec4((mod(n_dist_min+iTime*0.1,0.1)/0.1));\n            }\n            n_val_nor_start = n_val_nor_end;\n\n        }\n\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}