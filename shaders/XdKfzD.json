{
    "Shader": {
        "info": {
            "date": "1527829344",
            "description": "Some blur",
            "flags": 34,
            "hasliked": 0,
            "id": "XdKfzD",
            "likes": 2,
            "name": "TwoPassBlur",
            "published": 3,
            "tags": [
                "blur"
            ],
            "usePreview": 0,
            "username": "MaxDeadOriginal",
            "viewed": 649
        },
        "renderpass": [
            {
                "code": "//uniform sampler2D iChannel;\nuniform sampler2D source_image;\n\nvec3 texel_radius;\n\nvoid mainImage( out vec4 FragColor, in vec2 texCoord )\n{\n    vec2 TexCoord = texCoord / iResolution.xy;\n    texel_radius = vec3(\n        1.0 / iResolution.x, \n        1.0 / iResolution.y, \n        20.0\n    );\n    \n \n //vec4 outClr = blur(TexCoord, vec2(0.0, texel_radius.y));\n //outClr = mix(outClr, blur(TexCoord, vec2(texel_radius.x, 0.0)), 0.5);\n    \n vec4 outColor = blur(source_image, TexCoord, vec2(0.0, texel_radius.y));\n float light = 0.7;\n float alpha = 0.3;\n vec4 mx = vec4(light,light,light, 0.5);\n mx = mix(outColor, mx, alpha);\n     \n FragColor = mx;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nuniform sampler2D source_image;\n\nvec3 texel_radius;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 TexCoord = fragCoord / iResolution.xy;\n    texel_radius = vec3(\n        1.0 / iResolution.x, \n        1.0 / iResolution.y, \n        20.0\n    );\n    fragColor = blur(source_image, TexCoord, vec2(texel_radius.x, 0.0));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define RADIUS 150.0\n#define INV_SQRT_2PI_X3 1.1968268412042980338198381798031\nvec4 blur(sampler2D sampler, vec2 uv, vec2 texel){\n    float r = RADIUS;\n\n    float exp_value = -4.5 / r / r;\n    float sqrt_value = INV_SQRT_2PI_X3 / r;\n\n    float sum = 0.0;\n    vec4 value = vec4(0.0);\n\n    float x = 1.0;\n    while (x <= r)\n    {\n        float currentScale = exp(exp_value * x * x);\n        sum += currentScale;\n        \n        vec2 dudv = texel * x;\n        value += currentScale * (\n            texture(sampler, uv - dudv) + \n            texture(sampler, uv + dudv)\n            );\n        x += 1.0;\n    }\n\n\n    float correction = 1.0 / sqrt_value - 2.0 * sum;\n    value += texture(sampler, uv) * correction;   \n    return value * sqrt_value;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}