{
    "Shader": {
        "info": {
            "date": "1646376305",
            "description": "Animated recreation of this tweet by Albert Chern: [url]https://twitter.com/theAlbertChern/status/1499096653684371456[/url]. The graph shows that the orthocenter of a triangle that has vertices laying in the y=1/x graph, is also sitting on that graph.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsBBWW",
            "likes": 79,
            "name": "Orthocenter at y(x)=1/x",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "orthocenter",
                "1x"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2196
        },
        "renderpass": [
            {
                "code": "//\n// Inigo Quilez - 2022\n//\n// An animated recreation of this tweet by Albert Chern:\n// https://twitter.com/theAlbertChern/status/1499096653684371456\n// Meaning, the art is his, not mine.\n//\n// The graph shows that the orthocenter of a triangle that has vertices\n// laying in the y=1/x graph, is also sitting on that graph.\n//\n\n//-------------------------------------------------------------------\n// noise functions\n//-------------------------------------------------------------------\n\nvec2 grad( ivec2 z )\n{\n    // 2D to 1D (feel free to replace by some other)\n    int n = z.x*1 + z.y*113;\n    \n    // hash by Hugo Elias (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n    // Perlin style vectors (feel free to replace by another one)\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                      gr;\n}\n\n// gradient noise\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// https://iquilezles.org/articles/fbm\nfloat fbm( in vec2 p )\n{\n    const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    float f = 0.0;\n    float s = 0.5;\n    for( int i=0; i<6; i++ )\n    {\n        f += s*noise( p );\n        p = m*p;\n        s = 0.5*s;\n    }\n    return f;\n}\n\n//-------------------------------------------------------------------\n// math functions\n//-------------------------------------------------------------------\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a; vec2 ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa-h*ba );\n}\n\n// compute the point where the altitude for vertex c intersects its base (a,b)\nvec2 altitude( vec2 c, vec2 a, vec2 b )\n{\n    vec2  w = b-a; \n    return a + w*dot(c-a,w)/dot(w,w);\n}    \n\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n// intersect lines (a1,b1) with line (a2,b2)\nvec2 intersect( vec2 a1, vec2 b1, vec2 a2, vec2 b2 )\n{\n    float h = cro(a1-a2,b1-a1)/cro(b2-a2,b1-a1);\n    return a2 + (b2-a2)*h;\n}\n    \n//-------------------------------------------------------------------\n// painting funtions\n//-------------------------------------------------------------------\n\nvec3 blackboard( in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 q = fragCoord/iResolution.xy;\n    \n    // ------\n    \n    float v = sqrt(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y));\n    vec3 col = vec3(0.1 + 0.05*v);\n\n    // ------\n        \n    col += 0.05*fbm(p*1.25*vec2(1.0,4.0));\n    col += 0.02*fbm(p*20.0);\n    \n    // ------\n\n    {\n    vec2 ce = vec2(2.0,-10.0);\n    vec2 w = 2.5*p-ce;\n    w = vec2(atan(w.y,w.x),length(w));\n    float ff = fbm(w*2.0*vec2(1.0,1.0));\n    float fa = smoothstep(1.5,1.0,abs(w.y+ce.y-0.7));\n    fa *= smoothstep(0.4,0.2,abs(w.x-1.8+0.5*ff));\n    col += v*0.06*smoothstep(-0.5,0.5,ff)*fa;\n    }\n\n    // ------\n    \n    float m = 0.0;\n    float m2 = 0.0;\n    for( int i=0; i<20; i++ )\n    {\n        vec2 p1 = vec2(3.0,2.0)*sin(float(i)*1.3+vec2(0,1) );\n        vec2 p2 = p1 + vec2(0.5,2.0)*sin(float(i)*11.1+vec2(2,4) );\n        float d = sdLine( 2.5*p+0.5*sin(2.5*p+float(i)*vec2(1.7,2.3)), p1, p2 );\n        d += 0.1*fbm(1.25*p);\n        float ww = fbm(1.75*p);\n        m = max( m, smoothstep(0.05,0.0,d) );\n        m2 = max( m2, smoothstep(0.2,-0.2,d-abs(ww)) );\n    }\n    col += v*0.01*m;\n    col += v*0.025*m2;\n\n    col += col.x*col.x*0.75*smoothstep(-0.2,0.2,fbm(p*82.0));\n\n    return col;\n}\n\nvec3 chalk( in vec3 col, in vec2 fragCoord )\n{\n    // vertices\n    vec2 p1 = vec2(2.25+0.70*sin(1.3*iTime),0.0); p1.y=1.0/p1.x;\n    vec2 p2 = vec2(-1.4+0.40*sin(1.1*iTime),0.0); p2.y=1.0/p2.x;\n    vec2 p3 = vec2(0.35+0.02*sin(1.9*iTime),0.0); p3.y=1.0/p3.x;\n\n    // start drawing\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    p *= 3.0;\n    p -= vec2(-0.3,-0.7);\n    \n    float gf = 0.6;\n    gf *= 0.9+0.2*smoothstep( -0.2,0.2,fbm(p.yx*10.0));\n\n    float d = 0.0;\n    \n    // draw graph\n    if( abs(p.x)>0.1 )\n    {\n    float x = p.x;\n    float y = 1.0/x;\n    float dy = -1.0/(x*x);\n    d = abs(p.y-y)/sqrt(1.0+dy*dy);\n    d += 0.03*fbm(p*2.5);\n    col = mix( col, 1.2*1.3*vec3(160,140,80)/255.0, gf*(1.0-smoothstep(0.01,0.03,d)) );\n    }\n\n    // draw axis\n    d = sdLine( p, vec2(0.0,-10.0), vec2(0.0,3.4) );\n    d = min( d, sdLine( p, vec2(-10.0,0.0), vec2(5.2,0.0) ) );\n    // draw arrow heads\n    d = min( d, sdLine( vec2(abs(p.x),p.y), vec2(0.07,3.2), vec2(0.0,3.4) ) );\n    d = min( d, sdLine( vec2(p.x,abs(p.y)), vec2(5.0,0.07), vec2(5.2,0.0) ) );\n    d += 0.02*fbm(p*2.5);\n    col = mix( col, 1.2*1.1*vec3(120,90,64)/255.0, gf*(1.0-smoothstep(0.01,0.03,d)) );\n\n    // draw edges\n    d = sdLine( p, p1, p2 );\n    d = min( d, sdLine( p, p2, p3 ) );\n    d = min( d, sdLine( p, p3, p1 ) );\n    d += 0.03*fbm(p*2.5);\n    col = mix( col, 1.2*1.4*vec3(110,150,65)/255.0, gf*(1.0-smoothstep(0.01,0.03,d)) );\n\n    // draw altitudes\n    vec2 q1 = altitude( p1, p2, p3 );\n    vec2 q2 = altitude( p2, p3, p1 );\n    vec2 q3 = altitude( p3, p1, p2 );\n    d = sdLine( p, p1, q1 );\n    d = min( d, sdLine( p, p2, q2 ) );\n    d = min( d, sdLine( p, p3, q3 ) );\n\n    // draw angles\n    vec2 o1 = normalize(p1-q1)*0.18;\n    vec2 o2 = normalize(p2-q2)*0.18;\n    vec2 o3 = normalize(p3-q3)*0.18;\n    d = min( d, sdLine( p, q1+vec2(o1.x+o1.y,o1.y-o1.x), q1+vec2(o1.x, o1.y)) );\n    d = min( d, sdLine( p, q1+vec2(o1.x+o1.y,o1.y-o1.x), q1+vec2(o1.y,-o1.x)) );\n    d = min( d, sdLine( p, q2+vec2(o2.x+o2.y,o2.y-o2.x), q2+vec2(o2.x, o2.y)) );\n    d = min( d, sdLine( p, q2+vec2(o2.x+o2.y,o2.y-o2.x), q2+vec2(o2.y,-o2.x)) );\n    d = min( d, sdLine( p, q3+vec2(o3.x+o3.y,o3.y-o3.x), q3+vec2(o3.x, o3.y)) );\n    d = min( d, sdLine( p, q3+vec2(o3.x+o3.y,o3.y-o3.x), q3+vec2(o3.y,-o3.x)) );\n    \n    d += 0.03*fbm(p*2.5);\n    col = mix( col, 1.2*1.25*vec3(70,100,70)/255.0, gf*(1.0-smoothstep(0.01,0.03,d)) );\n\n    // draw ortho center\n    vec2 pc = intersect(p1,q1,p2,q2);\n    d = length(p-pc) - 0.08;\n    d += 0.05*fbm((p-pc)*8.0);\n    col = mix( col, 1.1*vec3(140,200,60)/255.0, (1.0-smoothstep(0.01,0.03,d)) );\n    \n    // draw vertices\n    d = min( min( length(p-p1), length(p-p2) ), length(p-p3) ) - 0.06;\n    d += 0.07*fbm(p*4.0);\n    col = mix( col, 1.1*vec3(255,240,8)/255.0, (1.0-smoothstep(0.01,0.03,d)) );\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = blackboard(fragCoord);\n    \n    col = chalk( col, fragCoord);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}