{
    "Shader": {
        "info": {
            "date": "1669749095",
            "description": "CC0: A weird torus\nBack to experimenting with 2D and psychedelic colors",
            "flags": 0,
            "hasliked": 0,
            "id": "dslXDl",
            "likes": 20,
            "name": "The Metamorphosis",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "// CC0: The Metamorphosis\n//  Back to experimenting with 2D and psychedelic colors\n//  Perhaps just to my damaged mind but it looks a bit like a scarab transforming to an ethereal alien being\n\n// #define ORIGINAL\n\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define PI_2            (0.5*PI)\n#define TAU             (2.0*PI)\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\nfloat starN(vec2 p, float r) {\n  const float n = 6.0;\n  const float m = 4.0;\n\n  // next 4 lines can be precomputed for a given shape\n  const float an = 3.141593/float(n);\n  const float en = 3.141593/m;  // m is between 2 and n\n  const vec2  acs = vec2(cos(an),sin(an));\n  const vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) for regular polygon\n\n    float bn = mod(atan_approx(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),pabs(sin(bn), 0.5));\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nfloat weirdTorus(vec3 p, vec3 d) {\n  vec2 q = vec2(length(p.xz) - d.x, p.y);\n  float a = atan_approx(p.x, p.z);\n  const float off = PI*0.875;\n  a = abs(a);\n  float b = a;\n  b -= off;\n  b = -pabs(b, 1.0);\n  b += off;\n  a *= b;\n  mat2 r = ROT(-4.0*a/6.0);\n  return starN(r*q, d.y)-d.z;\n}\n\nfloat dd(vec3 p) {\n  const float z = 0.25;\n  return weirdTorus(p/z, vec3(2.0, 0.65, 0.025))*z;\n}\n\nvec3 nn(vec3 pos, float aa) {\n  vec2  eps = vec2(aa,0.0);\n  vec3 nor;\n  nor.x = dd(pos+eps.xyy) - dd(pos-eps.xyy);\n  nor.y = dd(pos+eps.yxy) - dd(pos-eps.yxy);\n  nor.z = dd(pos+eps.yyx) - dd(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 effect2(vec2 p) {\n#ifdef ORIGINAL\n  const vec3 gcol0 = HSV2RGB(vec3(0.8, 0.95, 1.0));\n  const vec3 gcol1 = HSV2RGB(vec3(0.2, 0.95, 1.0));\n  const vec3 gcol2 = HSV2RGB(vec3(0.5, 0.95, 1.0));\n  const vec3 gcol3 = HSV2RGB(vec3(0.95, 0.9, 0.01));\n  const vec3 scol0 = HSV2RGB(vec3(0.95, 0.9, 1.0));\n  const vec3 scol1 = HSV2RGB(vec3(0.55, 0.8, 0.1));\n  const vec3 white = vec3(1.0);\n  \n  float aa = 2.0/RESOLUTION.y;\n  vec3 p3 = vec3(p.x, -0.15*cos(0.1*TIME), p.y);\n  float d = dd(p3);\n  vec3 n = nn(p3, aa);\n#else\n  float hoff = fract(0.05*p.y+0.1*p.x+0.02*TIME);\n  vec3 gcol0 = hsv2rgb(vec3(hoff+0.8, 0.95, 1.0));\n  vec3 gcol1 = hsv2rgb(vec3(hoff+0.2, 0.95, 1.0));\n  vec3 gcol2 = hsv2rgb(vec3(hoff+0.5, 0.95, 1.0));\n  vec3 gcol3 = hsv2rgb(vec3(hoff+0.95, 0.9, 0.01));\n  vec3 scol0 = hsv2rgb(vec3(0.95, 0.9, 1.0));\n  vec3 scol1 = hsv2rgb(vec3(0.55, 0.8, 0.1));\n  const vec3 white = vec3(1.0);\n  \n  \n  float aa = 2.0/RESOLUTION.y;\n  vec3 p3 = vec3(p.x, -0.15*cos(0.1*TIME), p.y);\n  float d = dd(p3);\n  p3.y = -0.15*cos(0.1*TIME-PI*smoothstep(0.55, 1.5, length(p)));\n  vec3 n = nn(p3, aa);\n#endif\n\n  d /= length(n.xz);\n  \n  vec3 col = vec3(0.05);\n  \n  vec3 gcol = vec3(0.0);\n  gcol += gcol0*abs(n.x);\n  gcol += gcol1*(n.y);\n  gcol += gcol2*(n.z);\n  \n  col += gcol;\n  vec3 bcol = col;\n  col *= mix(white, scol0, exp(-8.0*max(d-0.025, 0.0)));\n  col = mix(col, white, smoothstep(aa, -aa, d-0.01));\n  col = mix(col, scol1*bcol, smoothstep(aa, -aa, d));\n  col = max(col, 0.0);\n  col += gcol3*mix(1.0, 2.0, smoothstep(0.0, 1.0, sin((0.5*125.0/60.0)*TAU*TIME)))/dot(p, p);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect2(p);\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}