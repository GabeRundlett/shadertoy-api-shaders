{
    "Shader": {
        "info": {
            "date": "1647365914",
            "description": "basically the same as fork, but overlayed 3 different thresholds + used different colors. \n\nbit of a mess, really like this pattern :)",
            "flags": 0,
            "hasliked": 0,
            "id": "NdjBWt",
            "likes": 16,
            "name": "Checkerboard Truchet 2",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "float h21 (vec2 uv, float sc) {\n    uv = mod(uv, sc);\n    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat line(vec2 uv, float width) {\n    return max(-uv.y + width, abs(uv.x));\n}\n\nfloat curve(vec2 uv) {\n    return abs(length(uv-0.5) - 0.5);\n}\n\nfloat shape(vec2 uv, vec4 h, float width) {\n    if (h.x + h.y + h.z + h.w == 0.)\n        return 0.;\n         \n    // center circle to round off line segments\n    float d = length(uv);     \n         \n    // draw line segment from center to edge (-width offset for center circle)\n    d = mix(d, min(d, line(uv,     width)), h.x);\n    d = mix(d, min(d, line(uv.yx,  width)), h.y);\n    d = mix(d, min(d, line(-uv,    width)), h.z);\n    d = mix(d, min(d, line(-uv.yx, width)), h.w);\n    \n    // draw quarter circle between 2 edges\n    d = mix(d, min(d, curve(vec2(uv.x, uv.y))),   h.x * h.y);\n    d = mix(d, min(d, curve(vec2(uv.x, -uv.y))),  h.y * h.z);\n    d = mix(d, min(d, curve(vec2(-uv.x, -uv.y))), h.z * h.w);\n    d = mix(d, min(d, curve(vec2(-uv.x, uv.y))),  h.w * h.x);\n    \n    float k = 6./iResolution.y;\n    return smoothstep(-k, k, -d + width);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ouv = uv;\n    uv.x += 10. + 0.08 * iTime;          \n    uv.y += 0.005 * thc(10., 3. * uv.x + 0.28 * iTime);\n    \n    float sc = 13.;         \n    vec2 ipos = floor(sc * uv) + 0.;\n    vec2 fpos = fract(sc * uv) - 0.5;\n    \n    float width = 0.3 + 0.15 * cc(0.5, 0.5 * h21(ipos) + .5 * uv.x + 0.8 * iTime);\n\n    // arbitrary values - hash repetition, offset\n    float rep = 302.; \n    float val = 0.01;   \n    \n    // Checkerboard pattern:\n    // black cells choose edges for themselves + white cells\n    // white cells look at black cells to find edges\n    // construct pattern for cell based on edge configuration\n    float s = 0.;\n    vec4 r;\n    vec4 h, h2, h3;\n    if (mod(ipos.x + ipos.y, 2.) == 0.) {\n        r = vec4(h21(ipos,            rep),  // up\n                 h21(ipos + val,      rep),  // right\n                 h21(ipos + 2. * val, rep),  // down\n                 h21(ipos + 3. * val, rep)); // left ( I think* )\n        \n        h3 = step(r, vec4(0.6)), h2 = step(r, vec4(0.4)), h = step(r, vec4(0.2));   \n        s = shape(fpos, h, width);\n        s += 0.5 * (1.-s) * shape(fpos, h2, width);\n        s += 0.25 * (1.-s) * shape(fpos, h3, width);\n    } else {\n        r = vec4(h21(ipos + vec2(0,1) + 2. * val, rep),  // up's down\n                 h21(ipos + vec2(1,0) + 3. * val, rep),  // right's left\n                 h21(ipos - vec2(0,1),            rep),  // down's up\n                 h21(ipos - vec2(1,0) + val,      rep)); // left's right\n        \n        h3 = step(r, vec4(0.6)), h2 = step(r, vec4(0.4)), h = step(r, vec4(0.2));\n        s = shape(fpos, h, width);\n        s += 0.5 * (1.-s) * shape(fpos, h2, width);  \n        s += 0.25 * (1.-s) * shape(fpos, h3, width);\n    }\n    \n    vec3 e = vec3(1);\n    // was using floor(h21() + iTime), width is a messy stand-in\n    vec3 col = s * pal(-0.08 * floor(width * 4.) + 0.19 + 0.05 * (r.x + r.y + r.z + r.w), e, e, e, 0.42 * vec3(0,1,2)/3.);\n    //col += (1.-s) * pal(0.5 + 0.23 * uv.y, e, e, e, 0.15 * vec3(0,1,2)/3.);\n    //col *= 10. *(1.-s) * exp(-8. * length(ouv));\n    col += (1.-s) * vec3(s,0,0.22) * (uv.y+0.5);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}