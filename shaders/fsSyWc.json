{
    "Shader": {
        "info": {
            "date": "1644277495",
            "description": "Many dots moving, computationally efficient. Original idea was to have dots move around in many directions and use jfa to find nearest seed, but I found this on the way.\n\nClick & move to show the effect of not overwriting the previous state.",
            "flags": 32,
            "hasliked": 0,
            "id": "fsSyWc",
            "likes": 3,
            "name": "Sunrise showers",
            "published": 3,
            "tags": [
                "simple",
                "accident",
                "jfa"
            ],
            "usePreview": 0,
            "username": "electric_boogie",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\n#define BLACK vec3(0.)\n#define WHITE vec3(1.)\n#define RED   vec3(1., 0., 0.)\n#define BLUE  vec3(0.,0.,1.)\n#define GREEN vec3(0., 0., 1.)\n#define CYAN  vec3(0., 1., 1.)\n#define MAGENTA vec3(1., 0., 1.)\n#define YELLOW vec3(1., 1., 0.)\n#define COL(X) vec4(X, 0.)\n\n//=================================================\n// Hash without sine, from Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\n//=================================================\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//=================================================\n// Rand / RandColor\n// From https://www.shadertoy.com/view/Mdy3DK\n//=================================================\nfloat Rand(vec2 co)\n{\n    co.x += fract(iDate.w * 5.342);\n    co.y += fract(iDate.w * 11.214);\n    return hash12(co);\n}\n\n// Modified to return vec4\nvec4 RandColor (vec2 co)\n{\n    return vec4\n    (\n        Rand(co),\n        Rand(co*2.143),\n        Rand(co*3.163),\n        0.\n\t);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define NOISE 0.999\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / R;\n\n    vec4 me = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    float angle = me.z;\n\n\n    // Neighbours\n    vec4 n = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0., -1.), 0);\n    vec4 e = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1., 0.), 0);\n    vec4 s = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0., 1.), 0);\n    vec4 w = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1., 0.), 0);\n\n    vec4 ne = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1., -1.), 0);\n    vec4 nw = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1., -1.), 0);\n    vec4 se = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1., 1.), 0);\n    vec4 sw = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1., 1.), 0);\n\n\n    vec4 m = (n + e + s + w) / 4. + ((ne + nw + se + sw) / 4. * 0.3);\n\n    fragColor = me;\n\n    vec2  p_loc = (uv - 0.5);\n    float p = smoothstep(0.05, 0., length(p_loc) - 0.2);\n    fragColor += vec4(p, 0. , 0., 0.);\n\n    // Figure out if we have a moving pixel as neighbour\n    vec4 next = vec4(0.);\n    if (ne.w > 0.) next = ne;\n    if (nw.w > 0.) next = nw;\n    if (se.w > 0.) next = se;\n    if (sw.w > 0.) next = sw;\n    if (n.w > 0.) next = n;\n    if (e.w > 0.) next = e;\n    if (s.w > 0.) next = s;\n    if (w.w > 0.) next = w;    \n\n    if (me.w == 1.0){\n        // We are a seed\n        float angle = hash12(uv * 100.);\n        vec4 col = vec4(fragCoord.x + 1. , fragCoord.y,angle, 1.0);\n        fragColor = col;\n        \n    } else if (next.xy == fragCoord.xy){\n        // We are the neighbour of a moving pixel. Compute next and store here.\n        float seed = -hash12(fragCoord * iTime);\n\n        next.x += round(cos(seed));\n        next.y += round(sin(seed));\n        next.w += 0.1; \n    \n        fragColor = next;\n\n        \n    } else {\n        if (fragCoord.x > iMouse.x) {\n\n            fragColor = vec4(1.5 - uv.y + sin(iTime/3.14), \n                             -uv.y * 0.2 + sin(iTime/3.14) * 0.3, \n                             uv.y * 0.2 + cos(iTime/3.14) * 0.2, 0.0);\n        }\n        \n    }\n\n//=================================================\n// Init. Create randomly placed dots from noise\n//=================================================\n    if (iFrame <= 1){\n        float t = texture(iChannel1, uv).x;\n        float v = Rand(uv * t);\n        if (v > NOISE){\n            float angle = hash12(uv);\n            vec4 col = vec4(fragCoord.x + 0. , fragCoord.y,angle, 1.0);\n            fragColor = col;\n        } else {\n            fragColor = COL(BLACK);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}