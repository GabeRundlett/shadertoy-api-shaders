{
    "Shader": {
        "info": {
            "date": "1677520804",
            "description": "R to reset, click to see 2D\n\nBuffer A draws a distance field, particles traverse that field and change it every frame.\nThe field is used as a height map to extrude from a plane.\n\nRough 2D visual using different rule:\nhttps://www.shadertoy.com/view/ds33Rj",
            "flags": 48,
            "hasliked": 0,
            "id": "md3GR2",
            "likes": 17,
            "name": "Particle Terrain Gen",
            "published": 3,
            "tags": [
                "terrain",
                "particles",
                "mountain"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nvec3 ori() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float r = 20.;\n    float a = 0.2 * iTime;\n    float y = mix(3.5,14.,.5+.5*thc(4., 0.65 * iTime));\n    vec3 ro = vec3(r*sin(a), y, r*cos(a));\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nvec3 map(vec3 p) {  \n    float sd = p.y;\n    \n    // Distance field scaled to (0,1)\n    vec4 txB = texture(ch2, 0.05 * p.xz*res.y/res+0.5) / res.x;\n    sd += -4. + 30. * txB.x;\n    \n    // Sharper peaks\n    // sd += 1. - 7. *exp(-0.015*txB.x); \n    \n    // Restrict to box (bad)\n    // sd = max(sd, mlength(p.xz) - 10.);\n    \n    return vec3(0.4 * sd, txB.bg); \n}\n\nvec4 march(vec3 ro, vec3 rd, float z) {\t\n    float d = 0.;\n    float s = sign(z);\n    int steps = 0;\n    vec2 mat = vec2(0);\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec3 m = map(p);\n        //m.x *= 0.8 + 0.2 * hash(hash(p.x,p.z), p.y); // for glow\n        if (s != sign(m.x)) { z *= 0.5; s = sign(m.x); }\n        if (abs(m.x) < SURF_DIST || d > MAX_DIST) {\n            steps = i + 1;\n            mat = m.yz;\n            break;\n        }\n        d += m.x * z; \n    }   \n    return vec4(min(d, MAX_DIST), steps, mat);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = ori();\n    \n    vec3 rd = dir(uv, ro, vec3(0,0.5,0), 1.4);\n    vec3 col = vec3(0);\n   \n    vec4 m = march(ro, rd, 1.);  \n    float d = m.x;    \n    vec3 p = ro + rd * d;\n    \n    if (d<MAX_DIST) {        \n        vec3 n = norm(p);\n        vec3 r = reflect(rd, n);        \n\n        vec3 ld = normalize(vec3(1,2,3));\n        float dif  = dot(abs(n),  ld)*.5+.5;\n        float spec = pow(dif, 16.);\n        float fres = pow(1. + dot(rd, n),  1.);\n     \n        col = vec3(1.-dif);  \n        col = max(col, floor(4.*abs(n))/4.);\n        col *= vec3(length(col) * fres);\n    } else\n        col = vec3(0.15) * (1.-exp(-0.015 * m.y));\n   \n    col = tanh(vec3(2.2,1.2, 0.1*length(p.xz)) * col);\n    col = pow(col, vec3(1./2.2));\t// gamma correction\n    \n    if (iMouse.z > 0.) {\n        col = cell(ch2, ivec2(fragCoord)).rgb;\n        col.r = 1. - 16.*pow(col.r/res.y, 2.); //exp(-6.*col.r/res.y);\n        if (iMouse.x > 0.75 * res.x)\n            col = vec3(0, .5+.5*col.gb);\n        else\n            col.gb *= 0.;\n    }\n    \n    fragColor = vec4(col,1.0);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n\n// This buffer stores point information\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    ivec2 ipx = ivec2(px);\n    \n    vec4 txA = cell(ch0, ipx);         \n    \n    for (int i = 0; i < numPoints; i++) {  \n        // Initialize point on reset\n        if (iFrame < 1 || key_down(KEY_RESET)) \n        if (ipx == ivec2(i,0) || ipx == ivec2(i,1))        \n            txA = vec4(floor(0.5 * res), 0, 0);             \n\n        float spd = 0.5;\n        if (ipx == ivec2(i, 0)) {\n            // Distance value\n            float d = cell(ch2, ivec2(txA.xy)).r;          \n            \n            // Normal\n            vec2 n = norm(ch2, ivec2(txA.xy));\n\n            // Update position\n            float io = float(i) / float(numPoints);\n            txA.xy += 0.25 * d * n;\n            txA.xy -= 0.2 * (io - 0.25) * d * vec2(-n.y, n.x);\n            \n            //txA.xy += 0.15 * d * n;\n            //txA.xy -= 0.25 * d * vec2(-n.y, n.x);\n            \n            //txA.xy += (io-0.5) * d * n;\n    \n            //txA.xy += 20.;\n            \n            // Reset to a random position every few frames\n            if ((iFrame+i) % 20 == 0) {\n                vec2 h = vec2(hash(txA.x + iTime, float(i) + txA.y), \n                              hash(float(i) + txA.x, txA.y + iTime));\n                txA.xy = .5*res + .4 * res * h;\n                \n                // Symmetric version\n                // txA.xy = .5*res + .4 * res.y * h;\n            }\n        }         \n        else if (ipx == ivec2(i, 1)) // Save old position\n            txA = cell(ch0, ivec2(i, 0));\n   }\n   fragColor = txA;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define KEYBOARD iChannel1\n\n// This buffer stores distances\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    ivec2 ipx = ivec2(px);\n    vec4 txB  = cell(ch2, ipx);\n    \n    for (int i = 0; i < numPoints; i++) {\n        vec4 txP  = cell(ch0, ivec2(i, 0)); // Point\n        vec4 txP0 = cell(ch0, ivec2(i, 1)); // Previous point\n\n        // Initialize distances on reset\n        if (iFrame < 1 || key_down(KEY_RESET)) { \n            float d = res.x;//length(px - .5 * res);\n            //d = res.x;\n            //d = res.x + 0.2 * hash(px.x,px.y) * res.x;\n            txB = vec4(d,0,0,0);  \n        }\n        else {\n            float io = float(i) / float(numPoints);\n        \n            float d0 = cell(ch2, ivec2(txP.xy)).r;          \n            float d = length(px - txP.xy) - 0.;\n            //float d = seg(px, txP.xy, txP0.xy);\n        \n            // idk what this does exactly, I wanted the new\n            // distance to vary depending on the point's position\n            // in the distance field\n            d *= 0.5 * res.x / d0;\n            \n            // Soften new distance\n            d = mix(txB.r, d, 0.015);\n            \n            // Include new distance\n            txB.r = min(txB.r, d);\n           \n            // Terrain shrinking ideas,\n            // mostly leads to lots of isolated peaks\n            // txB.r += 0.002; \n            // txB.r = mix(txB.r, res.y, 0.00001);\n               \n            txB.r = clamp(txB.r, 0., res.x);\n            \n            vec2 n = norm(ch2, ivec2(px));\n            txB.gb = n;\n        }\n    }\n    \n    fragColor = txB;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define res iResolution.xy\n#define tau 6.2831853071\n#define pi 3.1415926535\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define numPoints 40\n\n#define key_val(key) texelFetch(KEYBOARD, ivec2(key, 0), 0).x\n#define key_down(key) int(key_val(key)) == 1\n#define KEY_RESET 82\n#define KEY_SPACE 32\n#define KEY_A 65\n#define KEY_W 87\n#define KEY_D 68\n#define KEY_S 83\n\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n\nvec4 cell(in sampler2D ch, in ivec2 p) {\n    ivec2 r = ivec2(textureSize(ch, 0));\n    p = (p+r) % r;\n    return texelFetch(ch, p, 0);\n}\n\n// Taken from stb's shader:\n// https://www.shadertoy.com/view/3tfcDM\nvec2 norm(in sampler2D ch, in ivec2 p) {\n    ivec3 e = ivec3(0, -1, 1);\n    return normalize(vec2(cell(ch, p-e.zx).r - cell(ch, p-e.yx).r,\n                          cell(ch, p-e.xz).r - cell(ch, p-e.xy).r));\n}\n\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// From blacklemori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}