{
    "Shader": {
        "info": {
            "date": "1698722735",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "cdKfD3",
            "likes": 3,
            "name": "spqr domain trick: chiaroscuro",
            "published": 3,
            "tags": [
                "a"
            ],
            "usePreview": 0,
            "username": "spqr",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\n\n\nfloat hash11(float t) {\n  return fract( sin(t * 7361.994) * 4518.442);\n}\n\nvec3 lattice (float t ) {\n\n \n\n  float m = t;\n  float mx = floor((m-2.)/3.);\n  float my = floor((m-1.)/3.);\n  float mz = floor((m-0.)/3.);\n  \n  float n= m+1.;\n  float nx = floor((n-2.)/3.);\n  float ny = floor((n-1.)/3.);\n  float nz = floor((n-0.)/3.);\n  \n\n  vec3 a =  \n  mix(\n      vec3(\n          hash11(mx)-.5,\n          hash11(my)-.5,\n          hash11(mz)-.5\n      ),\n      vec3(\n          hash11(nx)-.5,\n          hash11(ny)-.5,\n          hash11(nz)-.5\n      ) , \n      fract(t)\n  );\n  return a;\n}\n\n\n\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash21(vec2 p2)\n{\n\tp2  = fract(p2 * .1031);\n    p2 += dot(p2, p2.xy + 33.33);\n    return fract((p2.x + p2.y));\n}\n\nfloat closestWall(vec3 p) {\n    vec3 d = min(fract(p), 1.0 - fract(p));\n    return min(min(d.x, d.y), d.z);\n}\n\nfloat box (vec3 p, vec3 s) {\n    vec3 q = abs(p) - s;\n   // return max(max(q.x,q.y),q.z);\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat hash( vec2 p )\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\n\n\nfloat field (vec3 p, float scale) {\n  \n   p *= scale;\n   vec3 id = floor(p)-.5; \n   p = fract(p) -.5;\n   \n   float f1 = hash31(id);\n \n  \n   float ball = box(p, vec3(f1 * .4));\n\n   \n   // important detail\n   float bound = closestWall(p+.5);\n   \n   return min(bound + .1, ball)/scale;\n}\nfloat map (vec3 p){\n    // geo\n    float pos = p.y+1.;\n\n    for (float i = 1.; i < 8.; i++) {\n        pos = max(pos, -field(p,pow(2.,i)/16.));\n    }\n    \n    return pos;\n}\n\nvec3 norm(vec3 p) {\n  vec2 off=vec2(0.0001,0.0);\n  return normalize(map(p)-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n\n  float tt = iTime;\n \n  // nav\n\n\n\n  vec3 s = vec3(0.,3.,-6);\n  vec3 t = vec3(0,-1,0);\n  \n  vec3 fwd = vec3(0,0,3) * iTime;\n  \n  s += fwd;\n  t += fwd;\n \n  s += lattice(tt)*7.;\n  t += lattice(tt+3.9)*7.;\n \n\n  \n  \n  \n  vec3 cz=normalize(t-s);\n  vec3 cx=normalize(cross(cz,vec3(0,1,0)));\n  vec3 cy=-normalize(cross(cz,cx));\n  vec3 r=normalize(cx*uv.x+cy*uv.y+cz);\n  \n\n  vec3 p=s;\n  float i=0.;\n  float dd = 0.;\n  float d;\n  \n  // march\n  \n  bool hit = false;\n  for(float z=0.; z <100.; ++z) {\n    i = z;\n    d=abs(map(p));\n    if(d<.01) {\n      hit = true;\n      break;\n    }\n    if ( dd > 100.) break;\n    dd += d;\n    p+=r*d;\n  }\n  \n\n  // color\n \n  vec3 n = norm(p);\n\n\n  r = reflect(n,r);\n  float factor = length(sin(r*3.))/sqrt(3.);\n  vec3 col = pow(factor,11.) * vec3(4);\n  \n\n  fragColor = vec4(col, 1);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}