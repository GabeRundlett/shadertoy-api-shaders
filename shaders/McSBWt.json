{
    "Shader": {
        "info": {
            "date": "1725630934",
            "description": "originals  https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/wsfXz4 and fractal 62",
            "flags": 0,
            "hasliked": 0,
            "id": "McSBWt",
            "likes": 6,
            "name": "tunnel fractal vision",
            "published": 3,
            "tags": [
                "fractal",
                "tunnel"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\n\nconst int MAXITER = 52;\n\nvec3 field(vec3 p) {\n\tp *= .1;\n\tfloat f = .1;\n\tfor (int i = 0; i < 5; i++) {\n\t\tp = p.yzx*mat3(.8,.6,0,-.6,.8,0,0,0,1);\n\t\tp += vec3(.123*cos(iTime*0.021)*float(i),.456*sin(iTime*0.021)*float(i),.789)*float(i);\n\t\tp = abs(fract(p)-.5);\n\t\tp *= 2.0;\n\t\tf *= 2.0;\n\t}\n\tp *= p;\n\treturn sqrt(p+p.yzx)/f-.002;\n}\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\n#define time iTime*0.1\n#define resolution iResolution.xy\n\nfloat sdBox(vec3 p, vec3 r)\n{\n    p=abs(p)-r;\n    return max(max(p.x*p.y,p.y),p.z);\n}\n\nfloat sdXor(float a, float b)\n{\n    return min(max(a,-b),max(-a,b));\n}\n\nfloat scene2(vec3 p)\n{\n    p=abs(p)-0.6*.1;\n\n\n    return max(p.x,p.y)-.05;\n\n    return sdBox(p,vec3(.3));\n}\n#define pi acos(-1.)\n#define tau (pi*2.)\nconst float REP = 9.;\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nfloat scene3(vec3 p)\n{\n p.y-=iTime*10.;\n    vec3 cell = floor((p-REP)/(REP*2.));\n    p = mod(p+REP,REP*2.)-REP;\n   \n    p.xz= rotate(p.xz, iTime*0.0+cell.x+cell.y/2./4.);\n    vec3 a=vec3(\n        length(p.xz)-3.,\n        p.z,\n        atan(p.x,p.z)/tau\n    );\n\n    return max(sdXor(p.x,p.z),scene2(a));\n}\n\nfloat scene4(vec3 p)\n{\n    return min(\n        scene3(p),\n        scene3(p+vec3(REP))\n    );\n}\n\nfloat scene(vec3 p)\n{\n    // experimental mirroring thing\n    //p = abs(mod(p,REP*4.)-REP*2.);\n\n    return min(\n        scene4(p.xyz),\n        min(\n            scene4(p.yzx+vec3(0,0,REP)),\n            scene4(p.zxy+vec3(REP,0,0))\n        )\n    );\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n     vec2 uv = C / iResolution.xy-.5;\n    vec3 dir = normalize(vec3((gl_FragCoord.xy-resolution*.5)/resolution.x,1.));\n\tvec3 pos = vec3(1.,1.,-time);\n\tvec3 color = vec3(0);\n\tfor (int i = 0; i < MAXITER; i++) {\n\t\tvec3 f2 = field(pos);\n\t\tfloat f = min(min(f2.x,f2.y),f2.z);\n\t\t\n\t\tpos += dir*f;\n\t\tcolor += float(MAXITER-i)/(f2+.001);\n\t}\n\tvec3 color3 = vec3(1.-1./(1.+color*(.09/float(MAXITER*MAXITER))));\n\t\n    vec3 cam = vec3(0,0,-9);\n    vec3 dir2 = normalize(vec3(uv, 1));\n\n\n\n\n    float t = 0.;\n    float k = 0.;\n    for (int i=0;i<100;++i) {\n        k=scene(cam+dir2*t);\n        t+=k;\n        if(abs(k)<.001)\n        {\n            break;\n        }\n    }\n\n    vec3 h = cam+dir*t;\n    vec2 o = vec2(.001, 0);\n    vec3 n = normalize(vec3(\n        scene(h+o.xyy)-scene(h-o.xyy),\n        scene(h+o.yxy)-scene(h-o.yxy),\n        scene(h+o.yyx)-scene(h-o.yyx)\n    ));\n    vec3 n1,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0.,1.,10.),H(g*.1),.8)*10./e/8e3\n    )\n    {\n        n1=g*d+n;\n          n1.z+=iTime;\n        a=30.;\n        n1=mod(n1-a,a*2.)-a;\n        s=1.;\n    \n        for(int i=0;i++<8;){\n        \n            n1=.5-abs(n1);\n            \n            n1.x<n1.z?n1=n1.zxy:n1;\n           n1.z<n1.y?n1=n1.xzy:n1;\n                  n1.y<n1.x?n1=n1.xyz:n1;\n            s*=e=1.7+sin(iTime*.0011)*.1;\n            n1=abs(n1)*e-\n                vec3(\n                    10.*3.,\n                    120,\n                    5.*5.\n                 )+n;\n         }\n         g+=e=length(n1.yz)/s;\n    }\n     \n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n   O*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.25)*0.3, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}