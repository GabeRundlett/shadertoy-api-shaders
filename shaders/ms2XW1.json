{
    "Shader": {
        "info": {
            "date": "1670282325",
            "description": "An experiment with fifths and transposition :) I haven't slept for 7 hours",
            "flags": 8,
            "hasliked": 0,
            "id": "ms2XW1",
            "likes": 19,
            "name": "Circle of Fifths (Sound)",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "circle",
                "audio",
                "piano",
                "piano",
                "kick",
                "jazz",
                "gpusound",
                "drum",
                "epiano",
                "fifths"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 423
        },
        "renderpass": [
            {
                "code": "// From https://www.shadertoy.com/view/ltfSRr\nfloat message(vec2 uv) {\n\tuv -= vec2(1.0, 10.0);\n\tif ((uv.x < 0.0) || (uv.x >= 32.0) || (uv.y < 0.0) || (uv.y >= 3.0)) return -1.0;\n\tint i = 1, bit = int(exp2(floor(32.0 - uv.x)));\n\tif (int(uv.y) == 2) i = 928473456 / bit;\n\tif (int(uv.y) == 1) i = 626348112 / bit;\n\tif (int(uv.y) == 0) i = 1735745872 / bit;\n\treturn float(i - 2 * (i / 2));\n}\n\n// From https://www.shadertoy.com/view/4sBfRd\nvec4 char(vec2 p, int c) {\n    if (p.x < 0.0 || p.x > 1.0 || p.y < 0.0 || p.y > 1.0) {\n        return vec4(0.0);\n    }\n    vec2 scaled = p / 16.0;\n\treturn textureGrad(iChannel0, scaled + fract(vec2(c, 15 - c / 16) / 16.0), dFdx(scaled), dFdy(scaled));\n}\n\n// Modified from https://iquilezles.org/articles/distfunctions2d/\nfloat line(vec2 p, vec2 dir) {\n    return length(p - dir * max(dot(p, dir) / dot(dir, dir), 0.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iResolution.y < 2000.0) {\n\t\tfloat c = message(fragCoord / 8.0);\n\t\tif (c >= 0.0){\n\t\t\tfragColor = vec4(c);\n\t\t\treturn;\n\t\t}\n\t}\n    \n    // Center UV coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // Start with white background\n    fragColor = vec4(1.0);\n    float id = floor(iTime / SPB / 4.0);\n    \n    // Draw each note\n    for (int i = 0; i < 12; i++) {\n        float phase = float(i) / 12.0 * TAU;\n        float radius = 5.0 - sin(PI_4 * (float(i % 2) + iTime) / SPB) * 0.25;\n        if (id >= 16.0) {\n            radius -= mod(iTime, SPB * 2.0);\n        }\n        vec2 offset = vec2(cos(phase), sin(phase)) * radius;\n        \n        // Draw lines around circle\n        vec2 dir = vec2(cos(phase + PI_4), sin(phase + PI_4));\n        fragColor *= mix(smoothstep(0.0, length(uv) * 0.03, line(uv, dir)), 1.0, 0.7);\n        \n        // Draw note letters\n        int charIndex = 65 + (5 + i) * 3 % 7;\n        fragColor -= char(0.5 + uv * 14.0 + offset, charIndex).r;\n        \n        // Draw sharp symbols\n        if (i <= 6) {\n            fragColor -= char(uv * 14.0 + offset, 15).r;\n        }\n    }\n    \n    // Draw vignette\n    fragColor *= smoothstep(0.0, 0.1, 0.5 - length(uv));\n    \n    // Draw red highlight\n    vec4 red = vec4(1.0, 0.5 * length(uv), 0.0, 1.0);\n    float phase = id * PI / 6.0;\n    vec2 angle = vec2(sin(phase), cos(phase));\n    float factor = smoothstep(0.0, 0.01, line(uv, angle) - length(uv) * 0.25);\n    fragColor += red * (1.0 - factor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define msin(x,m) sin(TAU * (x) + (m))\n\n// MIDI note to frequency formula\nfloat noteFreq(float note) {\n\treturn 440.0 * exp2((note - 69.0) / 12.0);\n}\n\n// 1D hash, from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tp = fract(p * 0.1031);\n\tp *= p + 33.33;\n\tp *= p + p;\n\treturn fract(p);\n}\n\n// From https://www.shadertoy.com/view/3scfD2\nvec2 epiano(float freq, float t, float nuance) {\n    vec2 f0 = vec2(freq * 0.998, freq * 1.002);\n    vec2 glass = msin((f0 + 3.0) * t, msin(14.0 * f0 * t, 0.0) * exp(-30.0 * t) * nuance) * exp(-4.0 * t) * nuance;\n    glass = sin(glass);\n    vec2 body = msin(f0 * t, msin(f0 * t, 0.0) * exp(-0.5 * t) * nuance * pow(440.0 / f0.x, 0.5)) * exp(-t) * nuance;\n    return (glass + body) * smoothstep(0.0, 0.001, t) * 0.1;\n}\n\n// From https://www.shadertoy.com/view/tttfRj\nfloat noise(float s) {\n    int si = int(floor(s));\n    float sf = fract(s);\n    sf = smoothstep(0.0, 1.0, sf);\n    return mix(hash(float(si)), hash(float(si + 1)), sf) * 2.0 - 1.0;\n}\n\n// From https://www.shadertoy.com/view/sls3WM\nfloat coloredNoise(float time, float freq, float Q) {\n    return sin(TAU * freq * fract(time)) * noise(time * Q);\n}\n\n// From https://www.shadertoy.com/view/sls3WM\nfloat kick(float time) {\n    const float df = 512.0, dftime = 0.01, freq = 60.0;\n    float phase = TAU * (freq * time - df * dftime * exp(-time / dftime));\n    float body = sin(phase) * smoothstep(0.3, 0.0, time) * 1.5;\n    float click = coloredNoise(time, 8000.0, 2000.0) * smoothstep(0.007, 0.0, time);\n    return body + click;\n}\n\nvec2 noiseHit(float time, float fade) {\n\treturn (vec2(hash(time * 2048.0), hash(time * 1024.0)) * 2.0 - 1.0) * exp(-fade * time);\n}\n\n// Notes are auto-transposed using modulo, so they wrap to the same octave\nvec2 chord(float time, float offset, float minor, float funk, float hats) {\n\n    // Bass\n    const float bass = 57.0;\n    vec2 result = epiano(noteFreq(bass + mod(offset, 12.0) - 24.0), time, 2.0);\n    \n    // Root (bass plus 2 octaves)\n    result += epiano(noteFreq(bass + mod(offset, 12.0)), time - SPB * 0.5, 1.25);\n    // Third\n    result += epiano(noteFreq(bass + mod(offset + 4.0 - minor, 12.0)), time - SPB * funk, 1.5);\n    // Fifth\n    result += epiano(noteFreq(bass + mod(offset + 7.0, 12.0)), time - SPB * 0.5, 1.25);\n    // Seventh\n    result += epiano(noteFreq(bass + mod(offset + 11.0 - minor, 12.0)), time - SPB * funk, 1.5);\n    // Ninth\n    result += epiano(noteFreq(bass + mod(offset + 14.0, 12.0)), time - SPB * funk, 1.5);\n    \n    // Hi-hats\n    result += noiseHit(mod(time, SPB), 30.0) * hats;\n    return result;\n}\n\nvec2 mainSound(int samp, float time) {\n\n    // Unique identifier for current beat\n    float id = floor(time / SPB / 4.0);\n    // Circle of fifths, move up a fifth each step (7 MIDI notes)\n    float offset = id * 7.0;\n    // Play a minor chord for every 3 major chords\n    float minor = mod(id, 4.0) >= 3.0 ? 1.0 : 0.0;\n    // Funkier timing every 4 chords\n    float funk = mod(id, 8.0) >= 4.0 ? 1.5 : 1.0;\n    // Add hi-hats after a bit\n    float hats = id >= 8.0 ? 0.08 : 0.0;\n    \n    float t = mod(time, SPB * 4.0);\n    vec2 result = chord(t, offset, minor, funk, hats);\n    // Two tap ping-pong delay\n    result += vec2(0.5, 0.2) * chord(t - SPB * 0.5, offset, minor, funk, hats);\n    result += vec2(0.05, 0.1) * chord(t - SPB, offset, minor, funk, hats);\n    \n    // Kick drum\n    if (id >= 16.0) {\n        result += kick(mod(time, SPB * 2.0)) * 0.45;\n    }\n    return result;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "const float PI = 3.1415926;\nconst float PI_4 = PI * 0.25;\nconst float TAU = 6.28318530;\n\nconst float BPM = 200.0;\nconst float SPB = 60.0 / BPM; // Seconds per beat",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}