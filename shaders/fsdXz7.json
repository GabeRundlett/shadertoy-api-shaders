{
    "Shader": {
        "info": {
            "date": "1632870349",
            "description": "I wrote a simple MLP regression to estimate SDF for suzanne from blender. Just calculated distances for all triangles and converted them into a single function. It didn't catch some details like eyes or nose, but I'm happy with the result :) 60 fps on m1.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsdXz7",
            "likes": 4,
            "name": "Deep Suzanne",
            "published": 3,
            "tags": [
                "experiment",
                "nn"
            ],
            "usePreview": 0,
            "username": "kosmaks",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "const vec3 Up = vec3(0., 1., 0.);\nconst int MaxSteps = 200;\nconst float MinDist = 0.001;\nconst float MaxDist = 10.;\n\n\nfloat sdScene(vec3 p) {\n    return sdNN(p) - 0.1;\n}\n\n\nfloat intersect(vec3 ro, vec3 rd) {\n    float total = 0.;\n    for (int i = 0; i < MaxSteps; ++i) {\n        float d = sdScene(ro + total * rd);\n        total += d;\n        if (abs(d) < MinDist) return total;\n        if (total > MaxDist) break;\n    }\n    return MaxDist + 0.1;\n}\n\nvec3 getNormal(vec3 p) {\n    int id;\n    float dist = sdScene(p);\n    vec2 e = vec2(MinDist, 0.);\n    vec3 n = dist - vec3(\n        sdScene(p - e.xyy),\n        sdScene(p - e.yxy),\n        sdScene(p - e.yyx));\n    return normalize(n);\n}\n\nvec3 fresnel(in vec3 f0, in float cosTheta) {\n    return f0 + (1. - f0) * pow(1. - cosTheta, 5.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.y;\n    float vpWindow = 2. / iResolution.y;\n    vec2 vpShift = vec2(iResolution.x / iResolution.y, 1.);\n    vec2 vp = fragCoord * vpWindow - vpShift;\n    \n    float time = 0.5 * iTime + .7;\n    vec3 ld = normalize(vec3(1., 1., -1.));\n    vec3 co = vec3(3.5, 0.5, -3.5) * vec3(sin(time), 1., cos(time));\n    vec3 ct = vec3(0., 0., 0.);\n    vec3 cf = normalize(ct - co);\n    vec3 cr = normalize(cross(Up, cf));\n    vec3 cu = cross(cf, cr);\n\n    vec3 ro = co;\n    vec3 rd = normalize(cf * 2. + vp.x * cr + vp.y * cu);\n    \n    vec3 radiance = vec3(0.);\n    \n    float d = intersect(ro, rd);\n    \n    if (d < MaxDist) {\n        vec3 p = ro + d * rd;\n        vec3 n = getNormal(p);\n        vec3 ld = normalize(vec3(1., 1., 0.));\n        float s = intersect(p + n * MinDist * 2., ld) < MaxDist ? 0.7 : 1.;\n        vec3 color = vec3(1., 0.2, 0.3);\n        vec3 f = fresnel(vec3(0.04), max(0., dot(-rd, n)));\n        vec3 diffuse = color * textureLod(iChannel1, n, 9.).rgb * 1.;\n        vec3 refl = texture(iChannel0, reflect(rd, n)).rgb * 3.;\n        radiance += s * (f * refl + (1. - f) * diffuse);\n    } else {\n        radiance += texture(iChannel0, rd).rgb * 0.5;\n    }\n    \n    vec3 color = radiance;\n    color = color / (color + vec3(2.0));\n    color = pow(color, vec3(1.0/2.2));  \n   \n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdNNLocal(vec3 inp) {\n    float l0_0 = inp.x;\n    float l0_1 = inp.y;\n    float l0_2 = inp.z;\n    float l1_0 = tanh(-1.05968614 + 0.10086252 * l0_0 + -0.00363408 * l0_1 + -1.46499568 * l0_2);\n    float l1_1 = tanh(-0.19910900 + 1.09375853 * l0_0 + -1.04089161 * l0_1 + 1.04958421 * l0_2);\n    float l1_2 = tanh(0.59265323 + 0.33114441 * l0_0 + -0.20480392 * l0_1 + 0.29771640 * l0_2);\n    float l1_3 = tanh(0.25942873 + -2.79827385 * l0_0 + 0.17930557 * l0_1 + -0.50899781 * l0_2);\n    float l1_4 = tanh(0.04888931 + 1.45414972 * l0_0 + -0.53668653 * l0_1 + -1.15699645 * l0_2);\n    float l1_5 = tanh(0.25540761 + 0.09917475 * l0_0 + 1.71854845 * l0_1 + 1.87242381 * l0_2);\n    float l1_6 = tanh(-0.57603477 + -0.63626333 * l0_0 + -1.53200790 * l0_1 + 0.47518993 * l0_2);\n    float l1_7 = tanh(-0.67267692 + -0.16971515 * l0_0 + 1.20986021 * l0_1 + 0.67363124 * l0_2);\n    float l1_8 = tanh(1.50482769 + -1.78249681 * l0_0 + 0.71629440 * l0_1 + 4.89436948 * l0_2);\n    float l1_9 = tanh(0.59250436 + -2.00723484 * l0_0 + 0.68503942 * l0_1 + 0.17260082 * l0_2);\n    float l1_10 = tanh(0.64515362 + -1.27056397 * l0_0 + -0.47569248 * l0_1 + 0.30472384 * l0_2);\n    float l1_11 = tanh(1.58468193 + 1.38778136 * l0_0 + -3.61809939 * l0_1 + 0.73566802 * l0_2);\n    float l1_12 = tanh(0.39026344 + -0.08600417 * l0_0 + 4.49238873 * l0_1 + -0.03671114 * l0_2);\n    float l1_13 = tanh(-1.40808806 + 0.84253802 * l0_0 + -0.63565532 * l0_1 + 3.45004986 * l0_2);\n    float l1_14 = tanh(-0.47354127 + -2.62811253 * l0_0 + 0.93422023 * l0_1 + -0.19195709 * l0_2);\n    float l1_15 = tanh(0.61334098 + 0.95888106 * l0_0 + 0.78649512 * l0_1 + 0.30386589 * l0_2);\n    float l1_16 = tanh(-0.91396224 + 0.78537385 * l0_0 + -0.23577916 * l0_1 + 1.02103661 * l0_2);\n    float l1_17 = tanh(-1.10234184 + -1.26506055 * l0_0 + 0.05283757 * l0_1 + 0.13229078 * l0_2);\n    float l1_18 = tanh(-1.47711034 + 2.53668668 * l0_0 + 2.29539525 * l0_1 + 1.42687046 * l0_2);\n    float l1_19 = tanh(-1.34192705 + -3.92170645 * l0_0 + 0.31931545 * l0_1 + 1.35454175 * l0_2);\n    float l2_0 = tanh(-0.61739108 + -1.34373050 * l1_0 + 0.49696195 * l1_1 + 0.13238358 * l1_2 + 0.42055655 * l1_3 + 0.45070058 * l1_4 + -0.06000904 * l1_5 + -1.18145825 * l1_6 + -0.17818012 * l1_7 + -0.50664858 * l1_8 + -1.18172930 * l1_9 + -0.01681928 * l1_10 + -1.00511220 * l1_11 + -0.12931473 * l1_12 + 0.68301580 * l1_13 + -0.22582444 * l1_14 + -0.43164002 * l1_15 + -1.08386522 * l1_16 + 0.50918389 * l1_17 + 0.44221231 * l1_18 + -0.68723546 * l1_19);\n    float l2_1 = tanh(0.13191584 + 0.16548979 * l1_0 + -0.23317622 * l1_1 + -0.18063491 * l1_2 + -1.38259631 * l1_3 + -0.70917867 * l1_4 + -0.43593393 * l1_5 + -0.13959971 * l1_6 + 1.63834404 * l1_7 + -0.72622761 * l1_8 + 0.38269789 * l1_9 + -0.29077177 * l1_10 + -0.26381171 * l1_11 + -0.06639727 * l1_12 + -0.29195364 * l1_13 + 1.54929066 * l1_14 + 0.29474441 * l1_15 + 0.25717831 * l1_16 + 0.36299691 * l1_17 + -0.16285121 * l1_18 + 0.17394618 * l1_19);\n    float l2_2 = tanh(-0.86450900 + -0.75588470 * l1_0 + 1.13726874 * l1_1 + -0.68704473 * l1_2 + -0.66838438 * l1_3 + -0.19898747 * l1_4 + 0.17461368 * l1_5 + -0.54165617 * l1_6 + 0.18888749 * l1_7 + -0.17260755 * l1_8 + 0.33620217 * l1_9 + 1.27265267 * l1_10 + 0.05619054 * l1_11 + -0.10073513 * l1_12 + 0.32230783 * l1_13 + -0.11614486 * l1_14 + 0.27517933 * l1_15 + -0.21495326 * l1_16 + -0.14406267 * l1_17 + 0.66854204 * l1_18 + -0.07207757 * l1_19);\n    float l2_3 = tanh(0.98458332 + 1.11681420 * l1_0 + -0.25101834 * l1_1 + 0.15317615 * l1_2 + -0.11055457 * l1_3 + 0.07843758 * l1_4 + 0.33808385 * l1_5 + 0.55491298 * l1_6 + 0.00245950 * l1_7 + 0.40981668 * l1_8 + 0.80024901 * l1_9 + -0.46144057 * l1_10 + 0.45273973 * l1_11 + 0.61137086 * l1_12 + -0.18340323 * l1_13 + -0.11232976 * l1_14 + -0.59149385 * l1_15 + 0.94586448 * l1_16 + 0.79071600 * l1_17 + 0.52905499 * l1_18 + -0.00424649 * l1_19);\n    float l2_4 = tanh(0.86794310 + -0.10695838 * l1_0 + -0.17713764 * l1_1 + 0.91072823 * l1_2 + -0.75498619 * l1_3 + -1.21617857 * l1_4 + 1.05910956 * l1_5 + 3.10818245 * l1_6 + 0.83725712 * l1_7 + 0.41799648 * l1_8 + -0.27311111 * l1_9 + -0.40455060 * l1_10 + 0.66599605 * l1_11 + 1.36331570 * l1_12 + 0.10352090 * l1_13 + -0.49205825 * l1_14 + 0.68336630 * l1_15 + -0.64432826 * l1_16 + -0.61849964 * l1_17 + -0.15540055 * l1_18 + -0.90638281 * l1_19);\n    float l2_5 = tanh(-0.50691827 + -0.99411854 * l1_0 + 0.85113469 * l1_1 + -0.33535885 * l1_2 + -1.31384939 * l1_3 + 0.32254332 * l1_4 + 0.38445726 * l1_5 + 0.17581650 * l1_6 + -0.90495995 * l1_7 + -1.27039095 * l1_8 + 1.16242020 * l1_9 + 1.05385823 * l1_10 + -0.25714992 * l1_11 + -0.61252238 * l1_12 + 0.14120999 * l1_13 + -0.52680920 * l1_14 + 0.25374725 * l1_15 + -0.21367343 * l1_16 + -0.20572567 * l1_17 + 0.23809343 * l1_18 + 0.54754426 * l1_19);\n    float l2_6 = tanh(-0.10387458 + 0.55746335 * l1_0 + 0.92796991 * l1_1 + 0.33688731 * l1_2 + 1.40536338 * l1_3 + 0.04527336 * l1_4 + 0.47678304 * l1_5 + 0.02825633 * l1_6 + -0.95984300 * l1_7 + -0.37275236 * l1_8 + -0.56841685 * l1_9 + 0.21955018 * l1_10 + 0.48738392 * l1_11 + 0.61343990 * l1_12 + -0.54341024 * l1_13 + -0.37609137 * l1_14 + -1.00334254 * l1_15 + 0.13269811 * l1_16 + 0.60921184 * l1_17 + -0.41500727 * l1_18 + -0.71645809 * l1_19);\n    float l2_7 = tanh(-0.48356982 + -1.15068037 * l1_0 + -0.10408659 * l1_1 + -0.16902433 * l1_2 + 0.81789139 * l1_3 + -0.03231258 * l1_4 + -0.18396344 * l1_5 + -0.18083732 * l1_6 + 0.00105547 * l1_7 + -0.14472333 * l1_8 + 0.54967887 * l1_9 + 0.34992278 * l1_10 + 1.04041843 * l1_11 + 0.77095793 * l1_12 + -0.13638862 * l1_13 + -0.96838452 * l1_14 + -0.97465031 * l1_15 + -0.95758288 * l1_16 + -0.39317178 * l1_17 + 0.19589301 * l1_18 + -0.69101652 * l1_19);\n    float l2_8 = tanh(-0.20340957 + -0.10523241 * l1_0 + -0.79286395 * l1_1 + -0.37303614 * l1_2 + -0.21135740 * l1_3 + -0.15679715 * l1_4 + -0.15351668 * l1_5 + -0.73253109 * l1_6 + 0.78106056 * l1_7 + 0.29866634 * l1_8 + 0.70054896 * l1_9 + -0.29818400 * l1_10 + 0.25517799 * l1_11 + 0.39319163 * l1_12 + -0.04720556 * l1_13 + 0.32885870 * l1_14 + 1.01180143 * l1_15 + -0.16900014 * l1_16 + 0.27743662 * l1_17 + -0.17914667 * l1_18 + -0.34840769 * l1_19);\n    float l2_9 = tanh(1.38211053 + -0.39970690 * l1_0 + 1.23715340 * l1_1 + 0.53142890 * l1_2 + -0.64971723 * l1_3 + 0.22951680 * l1_4 + -0.77769203 * l1_5 + 1.63594078 * l1_6 + 0.38203114 * l1_7 + -0.50579149 * l1_8 + -0.95128774 * l1_9 + -0.38146705 * l1_10 + -0.18185546 * l1_11 + 0.90799610 * l1_12 + -0.15213404 * l1_13 + -0.03378455 * l1_14 + 0.03488177 * l1_15 + -0.20106873 * l1_16 + 0.05678864 * l1_17 + 0.32278917 * l1_18 + 0.13262530 * l1_19);\n    float l2_10 = tanh(-0.00728130 + -0.07738917 * l1_0 + 0.01823718 * l1_1 + 0.51459238 * l1_2 + -0.46021221 * l1_3 + 0.95901254 * l1_4 + 0.26132676 * l1_5 + 0.69092823 * l1_6 + 0.58166444 * l1_7 + 0.51377654 * l1_8 + -0.27526548 * l1_9 + -0.62938462 * l1_10 + 0.73330329 * l1_11 + 1.39103928 * l1_12 + -2.12166472 * l1_13 + 0.37687477 * l1_14 + 0.23640083 * l1_15 + 1.77389135 * l1_16 + -0.76496419 * l1_17 + 0.47892735 * l1_18 + -0.42751755 * l1_19);\n    float l2_11 = tanh(0.31305721 + 0.14246434 * l1_0 + 0.66575295 * l1_1 + -0.03159984 * l1_2 + -0.41688820 * l1_3 + -0.19897675 * l1_4 + -0.50336478 * l1_5 + 0.45720336 * l1_6 + 0.02866392 * l1_7 + -0.31412121 * l1_8 + 0.75175364 * l1_9 + 0.67424120 * l1_10 + -0.11242531 * l1_11 + -0.32992379 * l1_12 + 0.06185201 * l1_13 + 0.79912374 * l1_14 + -0.86638477 * l1_15 + 0.28154115 * l1_16 + -1.05670309 * l1_17 + -0.33261284 * l1_18 + 0.61936259 * l1_19);\n    float l2_12 = tanh(-0.55575429 + 0.98279365 * l1_0 + 0.00646069 * l1_1 + -0.11073757 * l1_2 + -0.02097271 * l1_3 + 0.04909127 * l1_4 + -0.48759520 * l1_5 + -0.48193010 * l1_6 + -1.82404828 * l1_7 + 0.49796277 * l1_8 + 1.14268094 * l1_9 + -0.33930802 * l1_10 + -0.08294819 * l1_11 + 1.12138419 * l1_12 + -0.89385139 * l1_13 + -0.21537274 * l1_14 + -0.61823003 * l1_15 + -0.31108578 * l1_16 + 0.03561240 * l1_17 + -0.48311330 * l1_18 + -1.15240437 * l1_19);\n    float l2_13 = tanh(-0.55448017 + -0.28351512 * l1_0 + 0.62828656 * l1_1 + 0.20001055 * l1_2 + -0.08851308 * l1_3 + -0.34377574 * l1_4 + 0.24578000 * l1_5 + 0.01977611 * l1_6 + -1.03357245 * l1_7 + 0.08781663 * l1_8 + -0.54281265 * l1_9 + 0.74301693 * l1_10 + 0.41893503 * l1_11 + 0.00871656 * l1_12 + -0.16368603 * l1_13 + 0.40150323 * l1_14 + 0.14615813 * l1_15 + -0.03964546 * l1_16 + -1.20799840 * l1_17 + -0.65370825 * l1_18 + 0.57782678 * l1_19);\n    float l2_14 = tanh(1.33424613 + 0.01778773 * l1_0 + 0.04830881 * l1_1 + 1.02726137 * l1_2 + 1.71352835 * l1_3 + -0.79581247 * l1_4 + 0.22026223 * l1_5 + 2.18769908 * l1_6 + 1.16338829 * l1_7 + -0.04570771 * l1_8 + -0.30064321 * l1_9 + 0.67986016 * l1_10 + 1.23786694 * l1_11 + 0.07858945 * l1_12 + 1.32958042 * l1_13 + -1.27339743 * l1_14 + 0.22133412 * l1_15 + 0.42110241 * l1_16 + 0.13415449 * l1_17 + -1.03149481 * l1_18 + -0.43592383 * l1_19);\n    float l2_15 = tanh(1.28011033 + 0.02129508 * l1_0 + 1.41508632 * l1_1 + 0.95154005 * l1_2 + 0.10460259 * l1_3 + -0.44452167 * l1_4 + -0.28579510 * l1_5 + -0.22482967 * l1_6 + 0.55859606 * l1_7 + -0.63505475 * l1_8 + 0.46461704 * l1_9 + 0.63028867 * l1_10 + -0.80983685 * l1_11 + -1.00766641 * l1_12 + -0.58521395 * l1_13 + -0.17862537 * l1_14 + 0.66563832 * l1_15 + -0.36786809 * l1_16 + -0.19007922 * l1_17 + -0.06093303 * l1_18 + 0.43624941 * l1_19);\n    float l2_16 = tanh(0.22086035 + 0.10201244 * l1_0 + -0.10601162 * l1_1 + -0.36064925 * l1_2 + 0.47011188 * l1_3 + 0.09976796 * l1_4 + 0.05407430 * l1_5 + -0.93099515 * l1_6 + 0.13881436 * l1_7 + 0.22178932 * l1_8 + 0.87647113 * l1_9 + 0.71136681 * l1_10 + -0.50326672 * l1_11 + -0.91280985 * l1_12 + -0.02022056 * l1_13 + 0.10274351 * l1_14 + 1.52781256 * l1_15 + -0.09933025 * l1_16 + -0.26914537 * l1_17 + -0.08453344 * l1_18 + -0.10147086 * l1_19);\n    float l2_17 = tanh(0.33098066 + 1.37623655 * l1_0 + -0.05797965 * l1_1 + 0.03204574 * l1_2 + 0.54332070 * l1_3 + 1.75930183 * l1_4 + -0.25939938 * l1_5 + 1.83010762 * l1_6 + -0.02233724 * l1_7 + 0.34263332 * l1_8 + -1.46880016 * l1_9 + 0.33103506 * l1_10 + 0.20888477 * l1_11 + 0.39221319 * l1_12 + -0.22924733 * l1_13 + 0.73340696 * l1_14 + 0.16850124 * l1_15 + -0.08913723 * l1_16 + -0.17692687 * l1_17 + -0.73441168 * l1_18 + -0.08177275 * l1_19);\n    float l2_18 = tanh(-1.50578925 + 0.03442867 * l1_0 + 0.06911640 * l1_1 + -0.84314633 * l1_2 + 0.95481853 * l1_3 + -1.40815348 * l1_4 + 0.36194608 * l1_5 + 0.97452918 * l1_6 + 0.30218573 * l1_7 + 0.11624426 * l1_8 + -0.34175201 * l1_9 + -0.94378934 * l1_10 + -1.28866666 * l1_11 + -0.82564698 * l1_12 + -1.57051479 * l1_13 + 0.06438064 * l1_14 + 0.54578617 * l1_15 + 0.04607956 * l1_16 + -0.62338873 * l1_17 + -1.15510806 * l1_18 + 0.14640975 * l1_19);\n    float l2_19 = tanh(-0.99963019 + -0.52417468 * l1_0 + -0.41982108 * l1_1 + -0.56806874 * l1_2 + -0.25280424 * l1_3 + -0.02468746 * l1_4 + 0.37141243 * l1_5 + -0.28011022 * l1_6 + -0.33573328 * l1_7 + -1.07472457 * l1_8 + -1.00379002 * l1_9 + 0.79569266 * l1_10 + 0.98110080 * l1_11 + 0.66542894 * l1_12 + 0.33263255 * l1_13 + 0.11598955 * l1_14 + -1.02350169 * l1_15 + -0.11062187 * l1_16 + 0.85643567 * l1_17 + 0.60022052 * l1_18 + -0.00776241 * l1_19);\n    float l3_0 = 0.92313957 + -0.60431151 * l2_0 + 0.33725815 * l2_1 + -0.43434061 * l2_2 + 0.57690528 * l2_3 + -0.27627629 * l2_4 + -0.22562560 * l2_5 + 0.34499122 * l2_6 + -0.59788412 * l2_7 + -0.55552794 * l2_8 + 0.38620787 * l2_9 + -0.27057965 * l2_10 + -0.69706163 * l2_11 + -0.17523293 * l2_12 + -0.54956773 * l2_13 + 0.13276041 * l2_14 + 0.57384402 * l2_15 + -0.87525821 * l2_16 + -0.26747914 * l2_17 + -0.11611546 * l2_18 + -0.41926703 * l2_19;\n    return l3_0;\n}\nfloat sdNN(vec3 p) {\n    float box = length(max(abs(p) - 1., 0.0));\n    vec3 boxp = min(abs(p), 1.) * sign(p);\n    return box + sdNNLocal(boxp) * 0.5 + 0.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}