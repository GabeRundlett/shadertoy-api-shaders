{
    "Shader": {
        "info": {
            "date": "1567265705",
            "description": "Rendering of rotational motions with delicate softness",
            "flags": 32,
            "hasliked": 0,
            "id": "wtSSD3",
            "likes": 8,
            "name": "Soft Dynamics",
            "published": 3,
            "tags": [
                "painting",
                "soft"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 684
        },
        "renderpass": [
            {
                "code": "// Soft Dynamics\n// Leon Denise 2019.08.31\n// Licensed under hippie love conspiracy\n\n// Using code from\n// Inigo Quilez\n// Morgan McGuire\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Soft Dynamics\n// Leon Denise 2019.08.31\n// Licensed under hippie love conspiracy\n\n// Using code from\n// Inigo Quilez\n// Morgan McGuire\n\nconst float delay = 10.;\nconst float speed = .4;\nconst float range = 1.;\nconst float radius = .005;\nconst float blend = .8;\nconst float balance = 15.;\nconst float falloff = 1.9;\nconst float grain = .05;\nconst int count = 6;\n\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nvec3 look (vec3 eye, vec3 target, vec2 anchor, float fov) {\n    vec3 forward = normalize(target-eye);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward * fov + right * anchor.x + up * anchor.y);\n}\n\nfloat geometry (vec3 pos, float time) {\n    float a = 1.0;\n    float scene = 1.;\n    float d = length(pos);\n    float w = sin(d);\n    float t = time;\n    for (int i = count; i > 0; --i) {\n        pos.zy *= rot(sin(t)*balance/a+a*2.);\n        pos.xy *= rot(cos(t)*balance/a+a*2.);\n        pos.zx = abs(pos.zx)-(range)*a;\n        a /= falloff;\n    }\n    scene = length(pos)-radius;\n    return scene;\n}\n\nvec3 getNormal (vec3 pos, float time) {\n \tvec2 e = vec2(.001,0);\n    vec3 p = vec3(0);\n \treturn normalize(vec3(geometry(pos,time)\n                          -vec3(geometry(pos-e.xyy,time),\n                                geometry(pos-e.yxy,time),\n                                geometry(pos-e.yyx,time))));\n}\n\nfloat raymarch ( vec3 eye, vec3 ray, float time, out float total ) {\n    float dither = random(ray.xy+fract(iTime));\n    total = 0.0;\n    const int count = 20;\n    for (int index = count; index > 0; --index) {\n        float dist = geometry(eye+ray*total,time);\n        dist *= 0.9+.1*dither;\n        total += dist;\n        if (dist < 0.0001 * total)\n            return float(index)/float(count);\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 eye = (vec3(0,0,2.5));\n    vec3 ray = look(eye, vec3(0), uv, 1.);\n    float total = 0.;\n    float dither = random(uv+fract(iTime));\n    float time = floor(iTime/delay)*delay*speed + dither*grain;\n    float shade = raymarch(eye, ray, time, total);\n    vec3 pos = eye + ray*total;\n    vec3 normal = getNormal(pos, time);\n    vec3 color = vec3(1);\n    color += vec3(.9,.3,.1)*(dot(normalize(pos), normal)*.5+.5);\n    fragColor = vec4(color*shade, 1);\n    \n    vec4 frame = texture(iChannel0, fragCoord/iResolution.xy);\n    float fade = (1.-iTimeDelta*1.);\n    fade = step(.01, fract(iTime/delay));\n    fragColor = max(fragColor, frame*fade);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}