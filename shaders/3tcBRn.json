{
    "Shader": {
        "info": {
            "date": "1612026063",
            "description": "psychedelic flower clock moving as time goes by. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3tcBRn",
            "likes": 1,
            "name": "flower clock ",
            "published": 3,
            "tags": [
                "noise",
                "time",
                "time",
                "clock",
                "flower",
                "random",
                "rotate",
                "psychedelic",
                "shape",
                "thickness",
                "changingcolor",
                "shapeborder"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "//psychedelic flower clock moving as time goes by. \n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat shape(vec2 st, float radius) {\n\tst = vec2(0.5)-st;\n    float r = length(st)*2.0;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*2.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    m += noise(st+iTime*0.1)*0.972;\n     a *= 1.0+abs(atan(iTime*-0.376))*0.1;\n    // a *= 1.+noise(st+u_time*0.1)*0.1;\n    f += sin(a*10.)*noise(st+iTime*.2)*.1;\n    f += (sin(a*19.312)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.007,r);\n}\n\nfloat shapeBorder(vec2 st, float radius, float width) {\n    return shape(st,radius)-shape(st,radius-width);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n\tvec2 st = fragCoord.xy/iResolution.xy;\n    vec3 changingCol = vec3(random(st),noise(st),abs(cos(sin(iTime))));\n    changingCol*=abs(sin(iTime));\n    vec3 color = vec3(changingCol) * shapeBorder(st,1.,abs(tan(iTime*.05)));\n    st-=0.5;\n\n    st*=rotate2d(iTime*3.1415/2.);\n        color/=st.y+st.x*sin(iTime*0.5)*1e1;\n        color/=st.x+st.x*sin(iTime*0.05)*1e1;\n    color-=random(st);\n\n    st+=0.5;\n\n    color += vec3(changingCol*random(st)) * shapeBorder(st,0.8,abs(tan(iTime*.05*0.2)));\n\t color += vec3(changingCol-noise(st)) * shapeBorder(st,0.6,abs(tan(iTime*.05)*0.4));\n\t color += vec3(changingCol+noise(st)) * shapeBorder(st,0.4,abs(tan(iTime*.05)*0.6));\n\t color += vec3(changingCol/random(st)*random(st*0.5)) * shapeBorder(st,0.2,abs(tan(iTime*.05)*0.8));\n\n\tfragColor = vec4( abs(sin(iTime))/color-noise(st), 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}