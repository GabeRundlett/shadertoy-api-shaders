{
    "Shader": {
        "info": {
            "date": "1659057098",
            "description": "Where to even start. I just emerged generative art deco. Something I've been dreaming of for a while, but wouldn't even know where to start. And it just popped up when I broke The Mathematics of Perception with non-euclidean geometry.",
            "flags": 64,
            "hasliked": 0,
            "id": "7sKfDd",
            "likes": 19,
            "name": "generative art deco",
            "published": 3,
            "tags": [
                "chromaticaberration",
                "study",
                "depthoffield",
                "focus"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 783
        },
        "renderpass": [
            {
                "code": "// Copyright Kazimierz Pogoda, 2022 - https://xemantic.com/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n// copyright statement borrowed from Inigo Quilez\n\n// Music by Giovanni Sollima, L'invenzione del nero:\n// https://soundcloud.com/giovanni-sollima/linvenzione-del-nero\n\n// See also The Mathematics of Perception to check the ideas behind:\n// https://www.shadertoy.com/view/7sVBzK\n\nconst float SHAPE_SIZE = .618;\nconst float CHROMATIC_ABBERATION = .02;\nconst float ITERATIONS = 10.;\nconst float INITIAL_LUMA = .4;\n\nconst float PI = 3.14159265359;\nconst float TWO_PI = 6.28318530718;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat sdPolygon(in float angle, in float distance) {\n  float segment = TWO_PI / 4.0;\n  return cos(floor(.5 + angle / segment) * segment - angle) * distance;\n}\n\nfloat getColorComponent(in vec2 st, in float modScale, in float blur) {\n    vec2 modSt = mod(st, 1. / modScale) * modScale * 2. - 1.;\n    float dist = length(modSt);\n    float angle = atan(modSt.x, modSt.y);\n    dist = sdPolygon(angle, dist);\n    float shapeMap = smoothstep(SHAPE_SIZE + blur, SHAPE_SIZE - blur, dist);\n    return shapeMap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st =\n        (2.* fragCoord - iResolution.xy)\n        / min(iResolution.x, iResolution.y);\n    st *= rotate2d(sin(iTime * .14) * .3);\n    st *= (sin(iTime * .15) + 2.) * .3;\n    st *= log(length(st * .3)) * .4;\n\n    float modScale = 1.;\n\n    vec3 color = vec3(0);\n    float luma = INITIAL_LUMA;\n    float blur = .5 + sin(iTime * .5) * .3;\n    for (float i = 0.; i < ITERATIONS; i++) {\n        vec2 center = st + vec2(sin(iTime * .12), cos(iTime * .13));\n        //center += pow(length(center), 1.);\n        vec3 shapeColor = vec3(\n            getColorComponent(center - st * CHROMATIC_ABBERATION, modScale, blur),\n            getColorComponent(center, modScale, blur),\n            getColorComponent(center + st * CHROMATIC_ABBERATION, modScale, blur)        \n        ) * luma;\n        st *= 1.1 + getColorComponent(center, modScale, .04) * 1.;\n        st *= rotate2d(sin(iTime  * .05) * .3);\n        color += shapeColor;\n        color = clamp(color, 0., 1.);\n        if (color == vec3(1)) break;\n        luma *= .6;\n        blur *= .63;\n    }\n    const float GRADING_INTENSITY = .4;\n    vec3 topGrading = vec3(\n        1. - sin(iTime * 1.1 * .3) * GRADING_INTENSITY,\n        1. - sin(iTime * 1.2 * .3) * GRADING_INTENSITY,\n        1. - sin(iTime * 1.3 * .3) * GRADING_INTENSITY\n    );\n    vec3 bottomGrading = vec3(\n        1. + cos(iTime * 1.4 * .3) * GRADING_INTENSITY,\n        1. - cos(iTime * 1.5 * .3) * GRADING_INTENSITY,\n        1. - cos(iTime * 1.6 * .3) * GRADING_INTENSITY\n    );\n    vec3 colorGrading = mix(topGrading, bottomGrading, fragCoord.y / iResolution.y);\n    fragColor = vec4(pow(color.rgb, colorGrading), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29472,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/giovanni-sollima/linvenzione-del-nero"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}