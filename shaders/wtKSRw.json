{
    "Shader": {
        "info": {
            "date": "1582456020",
            "description": "experiment with buffers",
            "flags": 32,
            "hasliked": 0,
            "id": "wtKSRw",
            "likes": 20,
            "name": "Inflating bubbles",
            "published": 3,
            "tags": [
                "2d",
                "circles",
                "vector",
                "buffers"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 744
        },
        "renderpass": [
            {
                "code": "#define COL1 vec3(32, 43, 51) / 255.0\n#define COL2 vec3(235, 241, 245) / 255.0\n\n#define SF 2./min(iResolution.x, iResolution.y)\n#define SS(l, s) smoothstep(SF, -SF, l - s)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    float m = 0.;\n    vec3 col = COL1;\n    for (float i = 0.; i < float(SIZE); i += 1.) {\n        vec4 point = texelFetch(iChannel0, ivec2(i, 0.), 0);\n        vec4 color = texelFetch(iChannel0, ivec2(i, 1.), 0);\n        vec2 pos = point.xy;\n        float radius = point.z;\n\n        float ll = 0.005; // + radius*.1;\n        float g = SS(abs(length(uv - pos) - radius + ll * .5) * 2., ll);\n\n        if (g > m) {\n            col += color.rgb * g;\n            m = g;\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if(fragCoord.y > 2. || fragCoord.x > SIZE){\n    \tdiscard;\n    }\n    \n    if (mod(fragCoord.y, 2.) > 0.5) {\n        fragColor = hue(hash12(fragCoord * 3.));\n    } else {\n        float factor = texelFetch(iChannel0, ivec2(fragCoord.x, 0.), 0).w;\n\n        vec2 pos = vec2(hash12(fragCoord + factor) - .5, hash12(fragCoord * 100. + factor) - .5);\n        pos *= vec2(iResolution.x / iResolution.y, 1.);\n        float radius = texelFetch(iChannel0, ivec2(fragCoord.x, 0.), 0).z;\n\n        float isOk = 0.;\n\n        for (float i = 0.; i < float(SIZE); i += 1.) {            \n            vec4 point = texelFetch(iChannel0, ivec2(i, 0.), 0);\n\n            if (point.z > 0.) {\n                if (distance(point.xy, pos) < (point.z + radius)) {\n                    isOk += 1.;\n                }\n            }\n        }\n\n        if (isOk < 2.) {\n            radius += .0005;\n        } else {\n            radius = 0.;\n            factor += .01;\n        }\n\n        fragColor = vec4(pos, radius, factor);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SIZE 50.\n\n#define hue(v) ( .6 + .6 * cos( 6.3*(v) + vec4(0,23,21,0) ) )\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}