{
    "Shader": {
        "info": {
            "date": "1650594856",
            "description": "Using a signed distance field. ",
            "flags": 0,
            "hasliked": 0,
            "id": "stlfR4",
            "likes": 0,
            "name": "Rotating a shape.",
            "published": 3,
            "tags": [
                "sdf",
                "tutorial",
                "box"
            ],
            "usePreview": 0,
            "username": "bzm3r",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926538\n\nmat2 rotate(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    // 2D rotation matrix: https://en.wikipedia.org/wiki/Rotation_matrix\n    return mat2(c, -s, s, c);\n}\n\nfloat sdfBox(in vec2 p, in vec2 center, in vec2 half_wh, mat2 rotor) {\n    // vec2 p: the point for which to calculate sdf\n    // vec2 center: the center of the box\n    // vec2 half_wh: the half-width and half-height of the box\n    // based on IQ's Box SDF tutorial: https://www.youtube.com/watch?v=62-pRVZuS5c\n    // which is a \"mandatory\" watch\n    \n    // put p in the \"right hand quadrant\" relative to box center\n    vec2 symm_p = abs((p - center) * rotor);\n    vec2 delta = symm_p - half_wh;\n    // when the point is outside the box, outside will be positive, inside = 0\n    vec2 outside = max(delta, vec2(0.0));\n    // when the point is inside the box, inside will be negative, outside = 0\n    float inside = min(max(delta.x, delta.y), 0.0);\n    \n    return length(outside) + inside;\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set the default background to white\n    vec3 col = vec3(1.0, 1.0, 1.0);\n    \n    // the position of the pixel that will be painted is stored in fragCoord\n    vec2 p = fragCoord;\n    \n    // the center of the box\n    vec2 center = vec2(0.25 * iResolution.x, 0.75 * iResolution.y);\n    vec2 half_wh = 0.5 * vec2(0.1 * iResolution.x, 0.3 * iResolution.y);\n    \n    // play around with this to get a feel for how it controls anti-aliasing\n    float smooth_cutoff = 0.01;\n    mat2 rotor = rotate(-0.25 * PI);\n    col *= smoothstep(0.0, 1.0 + smooth_cutoff, sdfBox(p, center, half_wh, rotor));\n\n    // set the colour of pixels in the fragment to be col, with alpha 1.0\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}