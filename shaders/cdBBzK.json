{
    "Shader": {
        "info": {
            "date": "1689867967",
            "description": "basic",
            "flags": 0,
            "hasliked": 0,
            "id": "cdBBzK",
            "likes": 0,
            "name": "ovo ono",
            "published": 3,
            "tags": [
                "basic"
            ],
            "usePreview": 0,
            "username": "Andrija385",
            "viewed": 86
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 10000.\n#define MAX_STEPS 100\n#define SURF_DIST .1\nfloat smoothMax(float a,float b, float k)\n{\n    return log(exp(k*a)+exp(k*b))/k;\n}\nfloat smoothMin(float a,float b,float k)\n{\n    return -smoothMax(-a,-b,k);\n}\nfloat mixuj(float a,float b,float c)\n{\n    //return smoothMin(a,b,.1);\n    //return (a+b+c)/2.;\n    //return max(a,b);\n    //return smoothMin(smoothMin(a,b,.1),c,.1);\n    return min(min(a,b),c);\n}\nfloat GetDist(vec3 p)\n{\n    vec4 s1 = vec4(40.*sin(iTime),30.,0.,36.);\n    vec4 s2 = vec4(-40.*sin(iTime),30.,0.,36.);\n    \n    float sphereDist1 = length(p-s1.xyz)-s1.w;\n    float sphereDist2 = length(p-s2.xyz)-s2.w;\n    float planeDist = p.y;\n    float d = mixuj(sphereDist1,sphereDist2,planeDist);\n    return d;\n}\nfloat GetDist(vec3 p,vec4 s1)\n{\n    return length(p-s1.xyz)-s1.w;\n}\nfloat RayMarch(vec3 ro,vec3 rd)\n{\n    float dist=0.0;\n    for(int i=0;i<MAX_STEPS;++i)\n    {\n        vec3 p =ro+dist*rd;\n        float cur=GetDist(p);\n        dist=dist+cur;\n        if(dist>MAX_DIST||cur<SURF_DIST)break;\n    }\n    return dist;\n}\nvec3 GetNormal(vec3 p)\n{\n    vec2 e = vec2(.01,0.);\n    return normalize(vec3(GetDist(p+e.xyy),GetDist(p+e.yxy),GetDist(p+e.yyx))-vec3(GetDist(p-e.xyy),GetDist(p-e.yxy),GetDist(p-e.yyx)));\n}\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0,500,500);\n    vec3 normal = GetNormal(p);\n    vec3 lightVec = normalize(lightPos-p);\n    float dist = RayMarch(p+20.*SURF_DIST*normal,lightVec);\n    if(dist<MAX_DIST)return 0.;\n    return clamp(dot(lightVec,normal),0.0,1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 s1 = vec4(40.*sin(iTime),30.,0.,36.);\n    vec4 s2 = vec4(-40.*sin(iTime),30.,0.,36.);\n    //-1. to 1.\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro=vec3(0.,30.,70.);\n    vec3 rd=vec3(uv.xy,-1);\n    float dist=RayMarch(ro,rd);\n    vec3 p = ro+dist*rd;\n    vec3 col = vec3(0.0);\n    //col=GetNormal(ro+dist*rd);\n    //col=vec3(dist)/6.;\n    float dif = GetLight(ro+dist*rd);\n    col=vec3(.7,.0,.0);\n    if(dist>100.)col=vec3(135, 206, 235)/255.;\n    else\n    {\n        if(GetDist(p,s1)-RayMarch(p,rd)<0.1)col=vec3(0,1,0);\n        if(GetDist(p,s2)-RayMarch(p,rd)<0.1)col=vec3(0,0,1);\n        col *= dif;\n        col = pow(col, vec3(1.0/2.2));\n    }\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}