{
    "Shader": {
        "info": {
            "date": "1713621484",
            "description": "With more params. Demo:\n- https://youtu.be/qrnLYEljrCI",
            "flags": 0,
            "hasliked": 0,
            "id": "MfK3Wt",
            "likes": 3,
            "name": "AF - Chanel Final",
            "published": 3,
            "tags": [
                "raymarching",
                "animationfractal"
            ],
            "usePreview": 0,
            "username": "tristanC",
            "viewed": 188
        },
        "renderpass": [
            {
                "code": "// Forked from https://www.shadertoy.com/view/ll3BDN\n// Created by Flopine in 2018-10-15\n// Default licence: CC-BY-NC-SA-3.0\n\n// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui and Coyhot for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Cookie Collective rulz\n\n// The shader has been adapted^Wbutchered to support new parameters\n// to be controlled from midi/audio inputs with animation-fractal.\n#ifndef ANIMATION_FRACTAL\n#define STEP1(x) ((x) - sin(x))\n#define STEP(x, offset, amp) (STEP1(STEP1(offset + x * amp)) * .15)\n#define is (iTime)\nfloat pitches[10];\nvoid genPitches() {\n  pitches[0] = STEP(is, 1., 1.);\n  pitches[1] = STEP(is, 2., 3.);\n  pitches[2] = STEP(is, 3., 2.);\n  pitches[3] = STEP(is, 4., 4.);\n  pitches[4] = STEP(is, 9., 1.);\n  pitches[5] = STEP(is, 3., 2.);\n  pitches[6] = STEP(is, 4., 2.);\n  pitches[7] = STEP(is, 9., 2.);\n  pitches[8] = STEP(is, 4., 2.);\n  pitches[9] = STEP(is, 9., 2.);\n}\n#define ipitch_1 pitches[0]\n#define ipitch_2 pitches[1]\n#define ipitch_3 pitches[2]\n#define ipitch_4 pitches[3]\n#define ipitch_5 pitches[4]\n#define ipitch_6 pitches[5]\n#define ipitch_7 pitches[6]\n#define ipitch_8 pitches[7]\n#define ipitch_9 pitches[8]\n#define ipitch_10 pitches[9]\n\n#define icolor (iTime*.1)\n#define imoveFWD (iTime*.1)\n#endif\n\n#define imove (im)\n\n#define ITER 64.\n#define PI 3.141592\n#define time iTime\n#define BPM 25./2.\n#define tempo 1.\n\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{return a+b*cos(2.*PI*(c*t+d));}\n\nfloat random (vec2 st)\n{return fract(sin(dot(st.xy, vec2(12.2544, 35.1571)))*5418.548416);}\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y, p.x);\n    float l = length(p);\n    a = mod(a-per/2., per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\nvec2 mo(vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y > p.x) p.xy = p.yx;\n    return p;\n}\n\nfloat stmin(float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5 * (u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 );\n    return min( a, b ) - h*h*0.25/k;\n}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvec2 path (float t)\n{\n    float a = sin(t*0.2 + 1.5), b = sin(t*0.2);\n    return vec2(a, a*b);\n}\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat od (vec3 p, float d)\n{return dot(p, normalize(sign(p)))-d;}\n\nfloat cyl (vec2 p, float r)\n{return length(p)-r;}\n\nfloat box( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p.xyz, p.yzx);\n    return min(p.x, min(p.y,p.z)) - d;\n}\n\nfloat prim1 (vec3 p)\n{\n    float c = cyl(p.xz, 0.1);\n    float per = 2.;\n    p.y += ipitch_5;\n    p.y = mod (p.y-per/2., per)-per/2.;\n    return smin(sphe(p, 0.3), c, 0.5);\n\n}\n\nfloat prim2 (vec3 p)\n{\n    float s = sphe(p,.9);\n    float o = od(p,.9);\n    p.xz *= rot(ipitch_4 + p.y*0.7);\n    p.xz = moda(p.xz, 2.*PI/5.);\n    p.x -= 1.;\n    return smin(prim1(p), max(-o,s), 0.1);\n}\n\nfloat prim3 (vec3 p)\n{\n    p.xz *= rot(sin(ipitch_6*.5)*.7 + p.x*0.1);\n    p.xy = mo(p.xy, vec2(2.));\n    p.yz *= rot(sin(ipitch_10)*.3 + p.x*0.1);\n    p.xz *= rot(ipitch_7 + p.y*0.7);\n    p *= 1.2 + (.1+.1*sin(ipitch_6));\n    return prim2(p);\n}\n\nfloat prim4 (vec3 p)\n{\n    p.yz *= rot(sin(ipitch_3*.5)*.7 + p.x*0.1);\n    p.xy = moda(p.xy, 2.*PI/4.);\n    p.x -= 4.;\n    return prim3(p);\n}\n\nfloat prim5 (vec3 p)\n{\n    float per = 17.;\n    p.xy *= rot(p.z*0.2);\n    p.z += ipitch_8;\n    p.z = mod(p.z-per/2., per) -per/2.;\n    return prim4(p);\n}\n\n#define moveScale 20.\nfloat primCenter (vec3 p)\n{\n    p.z -= imoveFWD*moveScale;\n    p.xz *= rot(ipitch_1*tempo);\n    p.xy *= rot(ipitch_2*tempo);\n    p *= 1.4;\n    return stmin(od(p, 1.), sphe(p,1.), 0.5, 6. + 2.*sin(ipitch_9));\n}\n\n\n\nfloat g = 0.;\nfloat SDF(vec3 p)\n{\n  float d = prim5(p);\n  d = smin(d, primCenter(p), 0.5);\n  g+=0.1/(0.1+d*d);\n  return d;\n}\n\n// The MIT License\n// See https://iquilezles.org/articles/palettes for more information\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 palette ( float t ) {\n // return pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n return pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n // return pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n}\n\n\n#ifdef ANIMATION_FRACTAL\nvoid main() {\n    vec2 uv = -.5 + inUV;\n    uv.y *= scene.screenRatio;\n    uv *= 1.4;\n#else\nvoid mainImage( out vec4 oColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    genPitches();\n#endif\n    vec3 ro = vec3(0.0,0.0,-10. + imoveFWD*moveScale); vec3 p = ro;\n    vec3 rd = normalize(vec3(uv,1.));\n\n    float shad = 0.;\n    float dither = random(uv);\n\n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.9 + dither*0.1;\n        p += d*rd * .5;\n    }\n\n    float t = length(ro-p);\n\n    vec3 pal = palette(icolor + length(uv));\n\n    vec3 c = vec3(shad) * pal;\n    c = mix(c, vec3(0.,0.,0.2), 1.-exp(-0.001 *t *t));\n    c += g* 0.025 * (1.-length(uv));\n\n#ifdef ANIMATION_FRACTAL\n    c = pow(c, vec3(1.2, .9, .9) * 1.7);\n#endif\n    oColor = vec4(c,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}