{
    "Shader": {
        "info": {
            "date": "1698077196",
            "description": "Just a tiling voronoi function I can use as a basis for other things.",
            "flags": 0,
            "hasliked": 0,
            "id": "dsKfRw",
            "likes": 0,
            "name": "Tiling Voronoi",
            "published": 3,
            "tags": [
                "voronoi",
                "tiling"
            ],
            "usePreview": 0,
            "username": "junithebuncat",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "\n/////////////////////\n\nvec2 hash2(vec2 uv){\n    vec2 p = vec2(dot(uv,vec2(123.123,456.456)),dot(uv,vec2(1337.1337,0613.0713)));\n    return fract(sin(p)*1234.1234);\n}\n\nvec4 voronoi(vec2 uv, float scale, float seed){\n    vec2 tv= fract(uv) * scale;\n    vec2 ti = floor(tv);\n    vec2 tf = fract(tv);\n    float m_dist = 2.;\n    vec2 m_point;\n    for(int x = -1; x <= 1; x++){\n        for(int y = -1; y<=1; y++){\n            vec2 off = vec2(float(x),float(y));\n            vec2 p = hash2(mod(ti + off,scale)+seed);\n            vec2 diff = off + p - tf;\n            float dist = length(diff);\n            if(dist < m_dist) {\n            m_dist = dist;\n            m_point = p;\n            }\n        }\n    }\n    return vec4(fract(m_point.r*seed));\n}\n\n////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv *= abs(sin(iTime/10.))+1.;\n    // Output to screen\n    fragColor = voronoi(uv, 10., 123.457);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}