{
    "Shader": {
        "info": {
            "date": "1658945512",
            "description": "A simple path tracer written for educational purposes.\nExercise 5: Uniform sampling of a unit hemisphere.\nhttps://www.intel.com/content/www/us/en/developer/videos/path-tracing-workshop-part-2.html",
            "flags": 0,
            "hasliked": 0,
            "id": "7sKBD3",
            "likes": 0,
            "name": "PT workshop 5: Hemisphere sampl.",
            "published": 3,
            "tags": [
                "educational",
                "pathtracing",
                "exercises"
            ],
            "usePreview": 0,
            "username": "christoph_peters",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "#define SAMPLE_COUNT 512\n#define M_PI 3.141592653589793238462643\n\n\n// Computes the direction vector of a primary ray\n// \\param x, y Coordinates between 0 and 1 for the pixel that the ray\n//      passes through (x, y)\n// \\param camera_position Position vector for the camera (o)\n// \\param left_bottom Position vector for the left bottom corner of\n//      the image plane (c)\n// \\param right, up Direction vectors towards the right and top end\n//      of the image plane (r, u)\n// \\return A direction vector of length 1 for a ray through the\n//      specified pixel (d)\nvec3 get_primary_ray_direction(float x, float y, vec3 camera_position, vec3 left_bottom, vec3 right, vec3 up) {\n                                                                                                                                                                                                                                                    vec3 image_plane_pos = left_bottom + x * right + y * up;     return normalize(image_plane_pos - camera_position);\n}\n\n\n// A pseudo-random number generator\n// \\param seed Numbers that are different for each invocation. Gets updated so\n//             that it can be reused.\n// \\return Two independent, uniform, pseudo-random numbers in [0,1) (u_0, u_1)\nvec2 get_random_numbers(inout uvec2 seed) {\n    // This is PCG2D: https://jcgt.org/published/0009/03/02/\n    seed = 1664525u * seed + 1013904223u;\n    seed.x += 1664525u * seed.y;\n    seed.y += 1664525u * seed.x;\n    seed ^= (seed >> 16u);\n    seed.x += 1664525u * seed.y;\n    seed.y += 1664525u * seed.x;\n    seed ^= (seed >> 16u);\n    // Convert to float. The constant here is 2^-32.\n    return vec2(seed) * 2.32830643654e-10;\n}\n\n\n// Given uniform random numbers u_0, u_1 in [0,1)^2, this function returns a\n// uniformly distributed point on the unit sphere (i.e. a random direction)\n// (omega)\nvec3 sample_sphere(vec2 random_numbers) {\n                                                                                                                                                                                                                                                    float z = 2.0 * random_numbers[1] - 1.0;     float phi = 2.0 * M_PI * random_numbers[0];     float x = cos(phi) * sqrt(1.0 - z * z);     float y = sin(phi) * sqrt(1.0 - z * z);     return vec3(x, y, z);\n}\n\n\n// Like sample_sphere() but only samples the hemisphere where the dot product\n// with the given normal (n) is >= 0\nvec3 sample_hemisphere(vec2 random_numbers, vec3 normal) {\n    // TODO\n    return vec3(0.0, 0.0, 1.0);\n}\n\n\nvoid mainImage(out vec4 out_color, in vec2 pixel_coord) {\n    // Define the camera position and the view plane\n    vec3 camera_position = vec3(0.278, 0.8, 0.2744);\n    vec3 middle = camera_position - vec3(0.0, 0.8, 0.0);\n    vec3 up = vec3(0.0, 0.0, 0.56);\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    vec3 right = aspect * vec3(-0.56, 0.0, 0.0);\n    vec3 left_bottom = middle - 0.5 * right - 0.5 * up;\n    // Compute the camera ray\n    vec2 tex_coord = pixel_coord / iResolution.xy;\n    vec3 ray_direction = get_primary_ray_direction(\n        tex_coord.x, tex_coord.y, camera_position, left_bottom, right, up);\n    // Splat spherical samples as Gaussians\n    out_color.rgb = vec3(0.0);\n    vec3 sphere_camera_position = vec3(0.0, 3.2, 0.0);\n    uvec2 seed = uvec2(0xdeadbeef, 0xc0ffee);\n    for (int i = 0; i != SAMPLE_COUNT; ++i) {\n        vec3 normal = normalize(vec3(1.0, 2.0, 3.0));\n        vec3 dir = sample_hemisphere(get_random_numbers(seed), normal);\n        float gaussian = exp(-100000.0 * (1.0 - dot(ray_direction, normalize(dir - sphere_camera_position))));\n        out_color.rgb += 0.5 * vec3(gaussian);\n    }\n    out_color.a = 1.0;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}