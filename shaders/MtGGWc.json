{
    "Shader": {
        "info": {
            "date": "1477075387",
            "description": "I accidentally found something looks like worm when I was studying about simplex noise.\nThen, I added some code so that it looks like real worm.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtGGWc",
            "likes": 62,
            "name": "10 years old nattou",
            "published": 3,
            "tags": [
                "2d",
                "simplexnoise"
            ],
            "usePreview": 0,
            "username": "tomohiro",
            "viewed": 1743
        },
        "renderpass": [
            {
                "code": "//Number of layers.\n//Higher value shows more layers of effects.\n//Lower value higher FPS.\nconst int numLayers = 16;\n\n//Length of worm\nconst int wormLength = 8;\n\n//Write output color from anywhere to see value of temporary variable.\nvec3 cout;\n\nfloat rand(vec3 pos)\n{\n  vec3 p = pos + vec3(2.);\n  vec3 fp = fract(p*p.yzx*222.)+vec3(2.);\n  p.y *= p.z * fp.x;\n  p.x *= p.y * fp.y;\n  return\n    fract\n    (\n\t\tp.x*p.x\n    );\n}\n\nfloat skewF(float n)\n{\n/*\nn∈N\nX∈R^n\nX'∈R^n\nA∈R^n ∧ |A| = 1\ns∈R\nf is a non-uniform scaling along direction A and s is the scaling factor.\nf:R^n → R^n\nX' = f(X)\n   = X・A*s*A - X・A*A + X\n   = X・A*(s-1)*A + X\n\n∀B(B∈R^n ∧ B・A = 0 ⇒ f(X)・B = X)\n\nX' = f^-1(X)\n   = X・A*(1/s-1)*A + X\n\nf^-1(f(X)) = X\nX' = X・A*(s-1)*A + X\nX = X'・A*(1/s-1)*A + X'\n  = (X・A*(s-1)*A + X)・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = X・A*(s-1)*(A・A)*(1/s-1)*A + X・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = X・A*(1-s-1/s+1)*A          + X・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = -X・A*(s-1)*A - X・A*(1/s-1)*A + X・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = X\n\nWhen creating simplex noise, A is a unit vector parallel to a unit hypercube's longest diagonal.\nA = (1/√(n), 1/√(n), ...)\n  = 1/√(n)(1, 1, ...)\n\nX' = f(X) = (s-1)/n*X・(1, 1, ...)*(1, 1, ...) + X\n\nIn skewed coordinate system, basis is not orthogonal.\nAny points P in skewed coordinate system such that P∈Z^n become a vertex of a simplex.\nIn the Cartesian coordinate, all edge of a simplex should have a same length.\nBut it is not possible in 3D and higher dimension.\nEquilateral triangle alone can fill space, but regular tetrahedra alone do not.\nFind 's' such that |f^-1((1, 0, 0, ...))| = |f^-1((1, 1, 1, ...))|\n|(1/s-1)/n*(1, 0, 0, ...)・(1, 1, ...)*(1, 1, ...) + (1, 0, 0, ...)| = |(1/s-1)/n*(1, 1, ...)・(1, 1, ...)*(1, 1, ...) + (1, 1, 1)|\n|(1/s-1)/n*(1, 1, ...) + (1, 0, 0, ...)| = |(1/s-1)*(1, 1, ...) + (1, 1, 1)|\n((1/s-1)/n+1)^2 + (((1/s-1)/n)^2)*(n-1) = ((1/s)^2)*n\n(1/s-1)*(1/s-1)/(n*n)+ 2*(1/s-1)/n + 1 + (1/s-1)*(1/s-1)*(n-1)/(n*n) = n/(s*s)\n2*(1/s-1)/n + 1 + (1/s-1)*(1/s-1)*n/(n*n) = n/(s*s)\n2*(1/s-1)/n + 1 + (1/s-1)*(1/s-1)/n = n/(s*s)\n(1/s-1)/n*(2 + (1/s-1)) + 1 = n/(s*s)\n(1/s-1)/n*(1 + 1/s) + 1 = n/(s*s)\n(1-s)/n*(s + 1) + s*s = n\n(1-s)*(s + 1) + s*s*n = n*n\n(n-1)*s*s + 1 = n*n\ns*s = (n*n - 1)/(n-1) = (n+1)(n-1)/(n-1) = n+1\ns = sqrt(n+1)\n\nX' = f(X) = (√(n+1)-1)/n*X・(1, 1, ...)*(1, 1, ...) + X\nf^-1(X) = (1/√(n+1)-1)/n*X・(1, 1, ...)*(1, 1, ...) + X\n\nLength of edge of a simplex in Cartesian coordinate system:\n f^-1((1, 0, 0, ...))  = (1/√(n+1)-1)/n*(1, 0, 0, ...)・(1, 1, ...)*(1, 1, ...) + (1, 0, 0, ...)\n                       = (1/√(n+1)-1)/n*(1, 1, ...) + (1, 0, 0, ...)\n|f^-1((1, 0, 0, ...))| = √( ((1/√(n+1)-1)/n+1)^2 + (((1/√(n+1)-1)/n)^2)*(n-1) )\n                       = √( ((1/√(n+1)-1)/n)^2 + 2*(1/√(n+1)-1)/n + 1 + (((1/√(n+1)-1)/n)^2)*(n-1) )\n                       = √( (((1/√(n+1)-1)/n)^2)*n + 2*(1/√(n+1)-1)/n + 1 )\n                       = √( (1/√(n+1)-1)/n*(1/√(n+1)-1 + 2) + 1 )\n                       = √( (1/(n+1) - 1)/n + 1 )\n                       = √( -n/(n+1)/n + 1 )\n                       = √( -1/(n+1) + 1 )\n                       = √( n/(n+1) )\nhttps://www.wolframalpha.com/input/?i=sqrt(+((1%2Fsqrt(n%2B1)-1)%2Fn%2B1)^2+%2B+(((1%2Fsqrt(n%2B1)-1)%2Fn)^2)*(n-1)+)\n\nLength of edges of a simplex in Cartesian coordinate system in 3 or higher dimension are not equal.\nY∈{0,1}^n\nm = Y・(1, 1, ...)\nf^-1(Y) = m*(1/√(n+1)-1)/n*(1, 1, ...) + Y\n|f^-1(Y)| = √( ((m*(1/√(n+1)-1)/n+1)^2)*m + ((m*(1/√(n+1)-1)/n)^2)*(n-m) )\n          = √( ((m*(1/√(n+1)-1)/n)^2)*m + 2*m*m*(1/√(n+1)-1)/n + m + ((m*(1/√(n+1)-1)/n)^2)*(n-m) )\n          = √( ((m*(1/√(n+1)-1)/n)^2)*n + 2*m*m*(1/√(n+1)-1)/n + m )\n          = √( (m*(1/√(n+1)-1)/n)*( (m*(1/√(n+1)-1)) + 2*m ) + m )\n          = √( (m*(1/√(n+1)-1)/n)*m*( 1/√(n+1)+1 ) + m )\n          = √( m*m*(1/(n+1)-1)/n + m )\n          = √( m*m*(-n)/(n+1)/n + m )\n          = √( -m*m/(n+1) + m )\nd/dm(|f^-1(Y)|) = 0.5*(1 - 2*m/(n+1))/√( -m*m/(n+1) + m )\nd/dm(|f^-1(Y)|) = 0 when m = 0.5*(n+1)\nd/dm(|f^-1(Y)|) = 0.5*(1 - 2/(n+1))/√( n/(n+1) )\n                = 0.5*(n-1)/√( n*(n+1) ) > 0 when m = 1\nd/dm(|f^-1(Y)|) = 0.5*(1 - 2*n/(n+1))/√( n/(n+1) )\n                = 0.5*(1-n)/√( n*(n+1) ) < 0 when m = n\n\nSo length of edge is shortest when m = 1 or m = n and other edge is longer than them.\n\nShortest distance between a vertex on simplex and the opposite edge:\nL = √( n/(n+1) )*√(3)/2\n\nReferences:\nhttps://en.wikipedia.org/wiki/Simplex_noise\nhttp://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n*/\n    return (sqrt(n + 1.0) - 1.0)/n;\n}\n\nfloat unskewG(float n)\n{\n    return (1.0/sqrt(n + 1.0) - 1.0)/n;\n}\n\nvec2 smplxNoise2DDeriv(vec2 x, float m, vec2 g)\n{\n    vec2 dmdxy = min(dot(x, x) - vec2(0.5), 0.0);\n\tdmdxy = 8.*x*dmdxy*dmdxy*dmdxy;\n\treturn dmdxy*dot(x, g) + m*g;\n}\n\nfloat smplxNoise2D(vec2 p, out vec2 deriv, float randKey, float roffset)\n{\n    //i is a skewed coordinate of a bottom vertex of a simplex where p is in.\n    vec2 i0 = floor(p + vec2( (p.x + p.y)*skewF(2.0) ));\n    //x0, x1, x2 are unskewed displacement vectors.\n    float unskew = unskewG(2.0);\n    vec2 x0 = p - (i0 + vec2((i0.x + i0.y)*unskew));\n\n    vec2 ii1 = x0.x > x0.y ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec2 ii2 = vec2(1.0);\n\n//  vec2 i1 = i0 + ii1;\n//  vec2 x1 = p - (i1 + vec2((i1.x + i1.y)*unskew));\n//          = p - (i0 + ii1 + vec2((i0.x + i0.y + 1.0)*unskew));\n//          = p - (i0 + vec2((i0.x + i0.y)*unskew)) - ii1 - vec2(1.0)*unskew;\n    vec2 x1 = x0 - ii1 - vec2(unskew);\n//  vec2 i2 = i0 + ii2;\n//  vec2 x2 = p - (i2 + vec2((i2.x + i2.y)*unskew));\n//          = p - (i0 + ii2 + vec2((i0.x + i0.y + 2.0)*unskew));\n//          = p - (i0 + vec2((i0.x + i0.y)*unskew)) - ii2 - vec2(2.0)*unskew;\n    vec2 x2 = x0 - ii2 - vec2(2.0*unskew);\n\n    vec3 m = max(vec3(0.5) - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n    m = m*m;\n    m = m*m;\n\n    float r0 = 3.1416*2.0*rand(vec3(mod(i0, 16.0)/16.0, randKey));\n    float r1 = 3.1416*2.0*rand(vec3(mod(i0 + ii1, 16.0)/16.0, randKey));\n    float r2 = 3.1416*2.0*rand(vec3(mod(i0 + ii2, 16.0)/16.0, randKey));\n\n    float randKey2 = randKey + 0.01;\n    float spmin = 0.5;\n    float sps = 2.0;\n    float sp0 = spmin + sps*rand(vec3(mod(i0, 16.0)/16.0, randKey2));\n    float sp1 = spmin + sps*rand(vec3(mod(i0 + ii1, 16.0)/16.0, randKey2));\n    float sp2 = spmin + sps*rand(vec3(mod(i0 + ii2, 16.0)/16.0, randKey2));\n\n    r0 += iTime*sp0 + roffset;\n    r1 += iTime*sp1 + roffset;\n    r2 += iTime*sp2 + roffset;\n    //Gradients;\n    vec2 g0 = vec2(cos(r0), sin(r0));\n    vec2 g1 = vec2(cos(r1), sin(r1));\n    vec2 g2 = vec2(cos(r2), sin(r2));\n\n    deriv = smplxNoise2DDeriv(x0, m.x, g0) + smplxNoise2DDeriv(x1, m.y, g1) + smplxNoise2DDeriv(x2, m.z, g2);\n    return dot(m*vec3(dot(x0, g0), dot(x1, g1), dot(x2, g2)), vec3(1.0));\n//    return dot(m*vec3(length(x0), length(x1), length(x2)), vec3(1.0));\n}\n\nvec3 norm(vec2 deriv)\n{\n    deriv *= 2000.0;\n\tvec3 tx = vec3(1.0, 0.0, deriv.x);\n\tvec3 ty = vec3(0.0, 1.0, deriv.y);\n\treturn normalize(cross(tx, ty));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy*2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 color = vec3(0.0);\n    float s = 1.0;\n    for(int i=0; i<numLayers; ++i)\n    {\n        float sn = 0.0;\n        float y = 0.0;\n        \n        vec2 deriv;\n        float nx = smplxNoise2D(uv*s*4.0, deriv, 0.1+1./s, 0.0);\n        float ny = smplxNoise2D(uv*s*4.0, deriv, 0.11+1./s, 0.0);\n        for(int j=0; j<wormLength; ++j)\n        {\n        \tvec2 deriv;\n\n\t\t\tsn += smplxNoise2D(uv*s+vec2(1./s, 0.)+vec2(nx,ny)*4., deriv, 0.2+1./s, y);\n        \tcolor += vec3(norm(deriv).z)/s;\n            y += 0.1;\n        }\n        s *= 1.1;\n    }\n    color /= 4.;\n\n    vec2 deriv;\n    float delay = smplxNoise2D(uv*s*1.0, deriv, 0.111, 0.0);\n    color = mix(color, vec3(1.0) - color, clamp(sin(iTime*0.25+uv.x*0.5+delay*32.)*32., 0.0, 1.0));\n\n    cout = color;\n\n\tfragColor = vec4(cout, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}