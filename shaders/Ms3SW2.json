{
    "Shader": {
        "info": {
            "date": "1461494760",
            "description": "Click and drag to adjust focal depth and aperture",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms3SW2",
            "likes": 25,
            "name": "Bokehlicious",
            "published": 3,
            "tags": [
                "blur",
                "bokeh",
                "camera",
                "particles",
                "focus"
            ],
            "usePreview": 1,
            "username": "finalman",
            "viewed": 1592
        },
        "renderpass": [
            {
                "code": "const int NUM_PARTICLES = 128;\nconst float PI = 3.1415926535897932384626433832795;\nconst float TAU = 2.0 * PI;\n\nfloat bokeh(vec2 p, vec2 a, float r)\n{\n    float l = length(p - a);\n    \n    if (l > r + 0.1)\n    {\n        return 0.0;\n    }\n    \n    float s = 0.01;\n    float d = l * exp(sin(9.0 * atan(p.y - a.y, p.x - a.x)) * 0.02);\n    float g = mix(0.9, 0.6, texture(iChannel0, 4.0 * p - a * 1.9).x);\n    float t = smoothstep(r + s, r - s, d);\n    \n    return 0.001 * mix(0.0, mix(g, t, clamp(l / r, 0.0, 1.0)), t) / (r * r);\n}\n    \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\t\n    float aperture = 0.5;\n    float focus = 3.5;\n    \n    if (iMouse.z > 0.0)\n    {\n        aperture = iMouse.x / iResolution.x;\n        focus = 7.0 * iMouse.y / iResolution.y;\n    }\n\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 c = vec3(0);\n    \n    for (int i = 0; i < NUM_PARTICLES; i++)\n    {\n        vec3 color;\n        vec3 pos;\n        float radius;\n\n        float t = float(i) / float(NUM_PARTICLES);\n        float p = t + iTime * 0.03;\n        color = normalize(vec3(sin(t * TAU * 1.0) + 5.1, cos(t * TAU * 2.0) + 1.1, cos(t * TAU * 3.0) + 1.1));\n        pos = vec3(2.0 * sin(t * TAU * 5.0 + p * 0.7),\n                                abs(sin(p * 3.0 * TAU)) - 0.5,\n                                4.0 * cos(t * TAU + p * 0.8));\n        float d = pos.z + 2.5;\n        \n        if (d > 0.0)\n        {\n            pos.xy /= d;\n            radius = max(abs(1.0 / d - 1.0 / focus) * aperture, 0.0001);\n            c += color * bokeh(uv, pos.xy, radius);\n        }\n    }\n    \n\tc = pow(c, vec3(1.0 / 2.2));\n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}