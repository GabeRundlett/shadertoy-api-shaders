{
    "Shader": {
        "info": {
            "date": "1516321334",
            "description": "Inspired by the excellent Desert Golfing.\nDrag down on the ball to set power, release to hit the ball. Drag elsewhere to move the camera.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xl2fRw",
            "likes": 12,
            "name": "Endless Golf",
            "published": 3,
            "tags": [
                "game"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 859
        },
        "renderpass": [
            {
                "code": "// Endless Golf\n// by Hazel Quantock 2018\n// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. http://creativecommons.org/licenses/by-nc-sa/4.0/\n\n// ----------- shared -----------\n\nconst float ballRad = .025;\nconst float bounce = .5; // [0,1)\nconst float collisionThreshold = .001;\nconst float holeRad = .08;\n    \nvec3 ballPos, holePos;\n\n// - cut -\n\n\n// Final stage: add HUD\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n\tfragColour = texelFetch(iChannel1,ivec2(fragCoord),0);\n\n\t// HUD\n    vec4 hud = vec4(0); // premultiplied alpha, so can do additive or blended\n    \n    ballPos = texelFetch(iChannel0,ivec2(0),0).xyz;\n    vec3 ballDPos = texelFetch(iChannel0,ivec2(1,0),0).xyz;\n\tvec4 dat = texelFetch(iChannel0,ivec2(2,0),0);\n\tvec2 mouseDragStart = dat.xy;\n    vec2 mouseDrag = dat.zw;\n    dat = texelFetch(iChannel0,ivec2(3,0),0);\n    vec3 camPos = dat.xyz;\n    float taa = dat.w;\n    holePos = texelFetch(iChannel0,ivec2(4,0),0).xyz;\n\n    bool stationary = (length(ballDPos) == 0.);\n\n    vec2 jitter = vec2(0);\n    \n    // this should be moved into shared\n\tvec3 ray;\n    ray.xy = (jitter + fragCoord - iResolution.xy*.5)/iResolution.y;\n    ray.z = 1.;\n    ray = normalize(ray);\n    \n    // turn camera toward ball\n    vec3 camk = normalize(normalize(ballPos-camPos)+vec3(0,.2,0));\n    vec3 cami = normalize(cross(vec3(0,1,0),camk));\n    vec3 camj = cross(camk,cami);\n    \n    ray = ray.x*cami + ray.y*camj + ray.z*camk;\n\n    \n    // HUD\n    \n    // Flag\n    float flagH = .3; // to centre of triangle\n    float flagW = .1;\n    vec3 tohole = holePos+vec3(0,holeRad,0)-camPos;\n    tohole = normalize(tohole); // don't do perspective\n    float dk = dot(tohole,camk);\n    if ( dk > .0 )\n    {\n        tohole /= dk;\n\t    ray /= dot(ray,camk);\n        vec2 flagUV = vec2( dot(ray-tohole,cami), dot(ray-tohole,camj) );\n        if ( ( flagUV.x > .0 && flagUV.x < flagW - 1.5*abs(flagUV.y-flagH) )\n            || ( abs(flagUV.x) < .005 && flagUV.y > 0. && flagUV.y < flagH+flagW/1.5 ) )\n            hud = vec4(.7,0,0,.2); // premultiplied alpha, mostly additive\n    }\n    \n\n    // golf swing\n    vec2 swingPos = iResolution.xy*vec2(.499,.299);\n    float swingRad = iResolution.y*.03;\n\n    float strength = 0.;\n    if ( length( mouseDragStart - swingPos ) < swingRad )\n    {\n    \tstrength = clamp((-mouseDrag.y)/(.25*iResolution.y),0.,1.);\n    }\n\n    //if ( mouseDragStart.x != -1. )\n    if ( stationary )\n    {\n        // show strength as a line from a circle, with the circle tracked horizontally to ignore camera move, and greyed out when power is below cut-off\n        vec2 hitUV = fragCoord - swingPos;//vec2(mouseDragStart.x + mouseDrag.x,mouseDragStart.y);\n\n        float ungreyed = stationary?1.:0.;\n        \n        vec4 hitCol = mix( vec4(0,0,0,.3), vec4(1,1,0,1), smoothstep(.0,.1,strength)*ungreyed );\n\n        // dotted line from finger to circle to make arrow-is-reflection clearer\n        float strengthY = strength*iResolution.y*.25;\n\t\tfloat f = max(max(max( abs(hitUV.x), -hitUV.y-strengthY ), hitUV.y+swingRad ), sin(-iTime*10.+hitUV.y/4.)*4. );\n        hud = mix( hud, vec4(0,0,0,.3), smoothstep(1.5,0.,f) );\n\n        // arrow showing force (opposite side to drag)\n\t\tf = max(max( abs(hitUV.x), hitUV.y-strengthY ), -hitUV.y+swingRad );\n        hud = mix( hud, hitCol, smoothstep(1.5,0.,f) );\n        \n        // circle showing contact\n        hud = mix( hud, hitCol, smoothstep(1.5,0.,abs(length(hitUV)-swingRad)) );\n    }\n\n    \n    fragColour.rgb = hud.rgb + fragColour.rgb*(1.-hud.w);\n    \n    fragColour.rgb = hud.rgb + fragColour.rgb*(1.-hud.w);\n    \n    fragColour.rgb = pow(fragColour.rgb,vec3(1./2.2))\n        +vec3(1.,0.,2.)/(3.*255.); // break up grey gradients so we get more than 255 steps\n}\n\n\n/*\nmaybe preview ball trajectory - e.g. in hud show dots for where ball will be in .1,.2,.3 seconds\n^ enough to emphasize putt->hit, and give a sense of relative power\n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ----------- shared -----------\n\nconst float ballRad = .025;\nconst float bounce = .5; // [0,1)\nconst float collisionThreshold = .001;\nconst float holeRad = .08;\n    \nvec3 ballPos, holePos;\n\n// SDF for dynamic objects\nfloat BallSDF( vec3 pos )\n{\n    return length(pos-ballPos)-ballRad;\n}\n\nuvec4 Hash( uint seed ) \n{\n    // integer hash from Hugo Elias\n\tseed = (seed << 13U) ^ seed;\n    seed = seed * (seed * seed * 15731U + 789221U) + 1376312589U;\n    return seed * uvec4(seed,seed*16807U,seed*48271U,seed*31713U);\n}\n\nvec3 vrand( uint seed )\n{\n    return vec3(Hash(seed).xyz&0x7fffffffU)/float(0x7fffffffU);\n}\n\n/*float Noise2D( vec2 uv )\n{\n    // maximum gradient of smoothstep = d(3x^2-2x^3)/dx = 6x-6x^2 @.5 = 1.5\n    uv /= 1.5;\n    \n}*/\n\nfloat HoleSDF( vec3 pos )\n{\n    vec3 dhole = pos-holePos;\n    dhole.y = min(dhole.y,0.); // sphere bottom with cylinder above\n    return holeRad-length(dhole);\n}\n\n\nfloat GetNoise( vec3 pos )\n{\n    float noise = (sin(pos.x/3.)+sin(pos.z/3.))*3./2.;\n    float noise2 = (sin(pos.z/6.283)+sin((-pos.x*sqrt(.75)+pos.z*sqrt(.25))/6.283))/2.;\n    float noise3 = (sin(pos.x/28.)+sin((pos.z*sqrt(.75)-pos.x*sqrt(.25))/28.))/2.;\n    float noise4 = (sin(pos.x/100.+sin((pos.x+pos.z)/61.8))+sin(pos.z/100.+sin((pos.x-pos.z)/77.7))+2.)/4.;\n    \n    return mix(noise*(.5-noise2),noise2*6.283 + noise3*28.,.5)\n        *(1.-pow(noise4,2.)); // flatter spots\n}\n\n// scenery\nfloat SDF( vec3 pos, bool includeDynamic )\n{\n    const float maxgrad = 1.; // steepest gradient the noise can output (not sure this is still true)\n\n    // flatten a green around the hole\n    float noise = GetNoise(pos);\n    noise = mix( noise, GetNoise(holePos), pow( smoothstep(8.,2.,length(pos-holePos) ), 2. ) );\n    \n    float f = (pos.y + noise)/sqrt(1.+maxgrad*maxgrad); // normalize so 3D gradient is <= 1.0 at all points\n    \n    if ( includeDynamic )\n    {\n        f = min(f,BallSDF(pos));\n    }\n\n    // add hole to the SDF:\n    f = max(f,HoleSDF(pos));\n    \n    return f;\n}\n\nvec3 GetNormal( vec3 pos, float eps, bool i )\n{\n    vec2 d = vec2(-1,1)*eps;\n    return normalize(\n\t\t\t\tSDF(pos+d.xxx,i)/d.xxx +\n\t\t\t\tSDF(pos+d.xyy,i)/d.xyy +\n\t\t\t\tSDF(pos+d.yxy,i)/d.yxy +\n\t\t\t\tSDF(pos+d.yyx,i)/d.yyx\n            );\n}\n\n// ----------- end of shared -----------\n\n\n// collision detection\n// take position and destination for linear move, and a collision radius\n// update position to destination, or intersection if collided\n// return distance along ray to collision, or 1.0 if no collision\nfloat Collide( in vec3 pos, in vec3 destination, in float radius )\n{\n    radius -= collisionThreshold;\n    \n    float d = length(destination-pos);\n    vec3 r = (destination-pos)/d;\n    \n\t// DON'T do SDF+radius - SDF's gradient is <= 1.0 so ball will hover!\n    // instead, sample at the front of the ball\n    // this means it won't collide properly in tight nooks\n//    pos += r*radius;\n//AARGH! that ruins rolling!\n// => maybe we need a correct, analytical gradient\n// or maybe we can correct it because we have more time\n    vec3 n = GetNormal(pos,.001,false);\n    pos -= n*radius; // aha! displace it toward closest surface\n    \n    float h = SDF(pos,false);\n    \n    // early out\n    if ( h >= d\n       || ( h < collisionThreshold && dot(r,n) > 0. ) ) // hack, don't collide if we're below the ground & moving outward\n    {\n        return 1.0;\n    }\n    \n    float t = 0.;\n    for ( int i=0; i < 20; i++ )\n    {\n        t += h;\n        h = SDF(pos+r*t,false);\n        if ( t > d || h < collisionThreshold )\n            break;\n    }\n    \n    t /= d;\n    return min(t,1.0);\n}\n\n\n// drop a point onto the ground\nvec3 Place( vec2 xz )\n{\n\tconst float minY = -100., maxY = 100.;\n\t// if we're using strict heightfields we can solve this, but let's collide so it can handle anything\n\tfloat h = Collide( vec3(xz.x,maxY,xz.y), vec3(xz.x,minY,xz.y), ballRad );\n\treturn vec3(xz.x,mix(maxY,minY,h),xz.y); // this syntax is ugly\n}\n\n\nvoid mainImage( out vec4 outData, in vec2 uv )\n{\n    // update position & velocity\n    ballPos = texelFetch(iChannel0,ivec2(0),0).xyz;\n    vec3 ballDPos = texelFetch(iChannel0,ivec2(1,0),0).xyz;\n\tvec4 dat = texelFetch(iChannel0,ivec2(2,0),0);\n\tvec2 mouseDragStart = dat.xy;\n    vec2 mouseDrag = dat.zw;\n    dat = texelFetch(iChannel0,ivec2(3,0),0);\n    vec3 camPos = dat.xyz;\n    float taa = dat.w;\n    holePos = texelFetch(iChannel0,ivec2(4,0),0).xyz;\n    \n    bool stationary = (length(ballDPos) == 0.);\n    \n    vec3 lastCamPos = camPos;\n    vec3 lastBallPos = ballPos;\n    \n    if ( iFrame == 0 )\n    {\n        ballPos = Place(vec2(0))+vec3(0,ballRad,0);\n//        holePos = Place(vec2(0,10))+vec3(0,-holeRad,0);\n        ballDPos = vec3(0);\n        mouseDragStart = vec2(-1,0);\n        mouseDrag = vec2(0);\n        camPos = ballPos + vec3(0,1,-3);\n    }\n    \n    \n    // hole placement\n    // place one hole at a time, each time ball lands in hole spawn new hole (& perhaps randomise terrain)\n    if ( ( stationary && length(ballPos-holePos) < holeRad ) || iFrame == 0 )\n    {\n        const vec2 courseDirection = vec2(0,1);\n        // place new hole\n        holePos = Place( ballPos.xz + (courseDirection+vrand(0U).xz*.5)*70. );\n        holePos.y -= holeRad; // hole position is centre of sphere, with cylindrical hole cut above it\n\n        // move ball up onto ground (I should probably add a tee to flatten this - or just an \"on tee\" state)\n        ballPos = Place( ballPos.xz );\n    }\n\n    // detect mouse drag\n    vec2 lastDragStart = mouseDragStart;\n    vec2 dragged = vec2(0,0);\n    if ( iMouse.x > 0. && iMouse.z > .0 ) // mouse is dragging\n    {\n        if ( mouseDragStart.x == -1. ) mouseDragStart = iMouse.xy;\n        mouseDrag = iMouse.xy - mouseDragStart;\n    }\n    else if ( mouseDragStart.x != -1. ) // mouse isn't dragging, but it was on previous frame\n    {\n        mouseDrag = iMouse.xy - mouseDragStart; // remember the last drag, in case we need it (e.g. for a later buffer step)\n        dragged = mouseDrag;\n        // reset drag data\n        mouseDragStart = vec2(-1,0);\n    }\n\n    // track camera with ball\n    vec3 camTarget = ballPos+vec3(0,.3,0) + normalize( (camPos-ballPos)*vec3(1,0,1) )*2.;\n    camTarget -= camPos;\n    camPos += normalize(camTarget)* max((length(camTarget))*.1,0.);\n    \n\t// keep the camera out of the ground\n    camPos.y += max( -1.5*SDF(camPos-vec3(0,.3,0),false), 0. );\n\n    \n// debug: hit the ball in random directions\n/*if ( stationary && (iFrame&0xff) == 128 )\n{\n    float a = iTime*1.618;\n    ballDPos = vec3(.707*cos(a),.707,.707*sin(a)) * (15.*exp2(sin(iTime*77.7)))/60.; // metres/second\n}*/\n\n    // golf swing\n    vec2 swingPos = iResolution.xy*vec2(.499,.299);\n    float swingRad = iResolution.y*.03;\n\n    if ( length( lastDragStart - swingPos ) < swingRad ) // we're dragging on the ball\n    {\n        // controls\n        if ( stationary )\n        {\n            float strength = 0.;\n            strength = clamp((-dragged.y)/(.25*iResolution.y),0.,1.);\n\n            // hit ball with force proportional to mouse y\n    // this is getting a thwack even when dragged up!?\n    //        float thwack = clamp(-dragged.y/(.25*iResolution.y),0.,1.);\n    //        thwack = max((thwack-.1)/.9,.0);\n            if ( strength > 0. )\n            {\n    //aaargh why isn't this working?\n    //This is hitting with almost constant force, not a range from 1 to 255 (where 7/8 should be half)\n                float force = exp2(strength*3.)*3./60.;\n                ballDPos += force*normalize((ballPos-camPos)*vec3(1,0,1))*.7071 + vec3(0,max(0.,force-6./60.),0); // low-speed hits don't get any vertical hit, powerful hits approach 45 degrees\n    //ballPos += ballDPos; // stop it getting stuck in the ground\n            }\n        }\n\t}\n    else\n    {\n        if ( mouseDragStart.x != -1. )\n        {\n            // rotate camera by mouseDrag\n            float a = mouseDrag.x*.0001; // rotation speed\n\n            camPos -= ballPos;\n            camPos.xz = camPos.xz*cos(a)+sin(a)*vec2(1,-1)*camPos.zx;\n            camPos += ballPos;\n            camPos.y += mouseDrag.y*.001;\n        }\n    }    \n\n\tfloat t = 1.;\n\n// this is allowing the ball to drift downhill whilst \"stationary\"\n// but turning off gravity would be bad. Hmm...\n    {\n        // gravity\n        ballDPos.y -= 9.81/3600.;\n\n        // air resistance\n        ballDPos -= .01*ballDPos*length(ballDPos);\n    }\n        \n    t = Collide( ballPos, ballPos+ballDPos, ballRad );\n    \n    ballPos += t*ballDPos;\n    \n    if ( t < 1.0 )\n    {\n        // collision, bounce ball off surface\n    \tvec3 n = GetNormal(ballPos,ballRad,false);\n\n        float perp = dot(ballDPos,n);\n        \n        ballDPos -= perp*n;\n        \n        // friction\n        ballDPos -= min(length(ballDPos),.0007)*normalize(ballDPos); // more realistic\n        \t//.0007 = fairway, .0003 = green, roughly.\n        \n        float rebound = max( -bounce*perp-.01, .0 );\n        \n        ballDPos += rebound*n;\n        \n        // complete the move after the collision, otherwise the ball won't roll\n        ballPos += (1.-t)*ballDPos;\n\n        // we only compute one collision per frame, so force it out of the ground in case it's fallen through\n        ballPos += n*max(-(SDF(ballPos-n*ballRad,false)),0.); // can't rely on SDF-ballRad, because gradient is <= 1\n    }\n    \n    // stop almost-stationary balls\n    if ( length(ballDPos) < .0001 )\n        ballDPos = vec3(0);\n\n    // fade in TAA when camera is slow\n    // this should factor in perspective & camera rotation (or do depth reprojection)\n    taa = pow( smoothstep( 1., .0,\n// these aren't working because the camera & ball are moved in buf a => store taa value in campos.w\n\t\t\t\t\t\tlength(camPos-lastCamPos)/1. +\n                        length(normalize(ballPos-camPos)-normalize(lastBallPos-lastCamPos))/.01 // rotation\n\t\t\t\t),2.);\n    \n    // store results\n    \n    outData = vec4(0,0,0,1);\n    \n    ivec2 iuv = ivec2(uv);\n    if ( iuv.y == 0 )\n    {\n        if ( iuv.x == 0 ) outData.xyz = ballPos;\n        else if ( iuv.x == 1 ) outData.xyz = ballDPos;\n        else if ( iuv.x == 2 ) outData = vec4(mouseDragStart,mouseDrag);\n        else if ( iuv.x == 3 ) outData = vec4(camPos,taa);\n        else if ( iuv.x == 4 ) outData.xyz = holePos;\n    }\n}\n\n/*\nBall is getting stuck because the collisions don't handle rolling at all\nShould rolling be a state? - could push it up onto the surface in normal direction (perp to velocity so shouldn't impact speed)\nCould flag it in dpos.w\nBut I'd like it if it were simpler - if rolling was just special falling\n\nAha!\n\n=> Collision shouldn't truncate position - we should simulate movement after collision too!\ni.e. compute bounce and launch a new ray\n^ can we fudge it so we never handle a double-collision in a frame?\ni.e. complete the movement in whatever bounce direction is,\nthen push the ball out of the surface in normal direction (to handle rolling/bad situations)\n[^ can iterate this in case it's wedged - or just let wedged balls get sticky because wedged]\n\nIt worked! Wooh! Not sticking now!\n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ----------- shared -----------\n\nconst float ballRad = .025;\nconst float bounce = .5; // [0,1)\nconst float collisionThreshold = .001;\nconst float holeRad = .08;\n    \nvec3 ballPos, holePos;\n\n// SDF for dynamic objects\nfloat BallSDF( vec3 pos )\n{\n    return length(pos-ballPos)-ballRad;\n}\n\nuvec4 Hash( uint seed ) \n{\n    // integer hash from Hugo Elias\n\tseed = (seed << 13U) ^ seed;\n    seed = seed * (seed * seed * 15731U + 789221U) + 1376312589U;\n    return seed * uvec4(seed,seed*16807U,seed*48271U,seed*31713U);\n}\n\nvec3 vrand( uint seed )\n{\n    return vec3(Hash(seed).xyz&0x7fffffffU)/float(0x7fffffffU);\n}\n\n/*float Noise2D( vec2 uv )\n{\n    // maximum gradient of smoothstep = d(3x^2-2x^3)/dx = 6x-6x^2 @.5 = 1.5\n    uv /= 1.5;\n    \n}*/\n\nfloat HoleSDF( vec3 pos )\n{\n    vec3 dhole = pos-holePos;\n    dhole.y = min(dhole.y,0.); // sphere bottom with cylinder above\n    return holeRad-length(dhole);\n}\n\n\nfloat GetNoise( vec3 pos )\n{\n    float noise = (sin(pos.x/3.)+sin(pos.z/3.))*3./2.;\n    float noise2 = (sin(pos.z/6.283)+sin((-pos.x*sqrt(.75)+pos.z*sqrt(.25))/6.283))/2.;\n    float noise3 = (sin(pos.x/28.)+sin((pos.z*sqrt(.75)-pos.x*sqrt(.25))/28.))/2.;\n    float noise4 = (sin(pos.x/100.+sin((pos.x+pos.z)/61.8))+sin(pos.z/100.+sin((pos.x-pos.z)/77.7))+2.)/4.;\n    \n    return mix(noise*(.5-noise2),noise2*6.283 + noise3*28.,.5)\n        *(1.-pow(noise4,2.)); // flatter spots\n}\n\n// scenery\nfloat SDF( vec3 pos, bool includeDynamic )\n{\n    const float maxgrad = 1.; // steepest gradient the noise can output (not sure this is still true)\n\n    // flatten a green around the hole\n    float noise = GetNoise(pos);\n    noise = mix( noise, GetNoise(holePos), pow( smoothstep(8.,2.,length(pos-holePos) ), 2. ) );\n    \n    float f = (pos.y + noise)/sqrt(1.+maxgrad*maxgrad); // normalize so 3D gradient is <= 1.0 at all points\n    \n    if ( includeDynamic )\n    {\n        f = min(f,BallSDF(pos));\n    }\n\n    // add hole to the SDF:\n    f = max(f,HoleSDF(pos));\n    \n    return f;\n}\n\nvec3 GetNormal( vec3 pos, float eps, bool i )\n{\n    vec2 d = vec2(-1,1)*eps;\n    return normalize(\n\t\t\t\tSDF(pos+d.xxx,i)/d.xxx +\n\t\t\t\tSDF(pos+d.xyy,i)/d.xyy +\n\t\t\t\tSDF(pos+d.yxy,i)/d.yxy +\n\t\t\t\tSDF(pos+d.yyx,i)/d.yyx\n            );\n}\n\n// ----------- end of shared -----------\n\nvoid mainImage( out vec4 o_col, in vec2 fragCoord )\n{\n    ballPos = texelFetch(iChannel0,ivec2(0),0).xyz;\n    vec3 ballDPos = texelFetch(iChannel0,ivec2(1,0),0).xyz;\n\tvec4 dat = texelFetch(iChannel0,ivec2(2,0),0);\n\tvec2 mouseDragStart = dat.xy;\n    vec2 mouseDrag = dat.zw;\n    dat = texelFetch(iChannel0,ivec2(3,0),0);\n    vec3 camPos = dat.xyz;\n    float taa = dat.w;\n    holePos = texelFetch(iChannel0,ivec2(4,0),0).xyz;\n\n    bool stationary = (length(ballDPos) == 0.);\n    \n    vec2 jitter = vec2((uint(iFrame)*uvec2(0x61c992U,0x9e3853U))&0xffffffU)/float(0xffffffU+1U); // approximately 1/phi, 1/(phi*phi)\n    \n    // break up the jitter so it doesn't feel like camera jiggle\n    jitter = fract(jitter+fragCoord.yx/32.);// /32. no visible dither, /1.618 random dither, /2. checker dither\n    \n\tvec3 ray;\n    ray.xy = (jitter + fragCoord - iResolution.xy*.5)/iResolution.y;\n    ray.z = 1.;\n    //ray.z -= dot(ray.xy,ray.xy)*2.5; // fisheye lens for lols\n    ray = normalize(ray);\n    \n    // turn camera toward ball\n    vec3 camk = normalize(normalize(ballPos-camPos)+vec3(0,.2,0));\n    vec3 cami = normalize(cross(vec3(0,1,0),camk));\n    vec3 camj = cross(camk,cami);\n    \n    ray = ray.x*cami + ray.y*camj + ray.z*camk;\n    \n    vec3 pos = camPos;\n    \n    float epsilon = .001;\n    float h = 1.;\n    for ( int i=0; i < 200; i++ )\n    {\n        h = SDF(pos,true);\n        if ( h < epsilon )\n            break;\n        pos += h*ray;\n    }\n    \n    o_col = vec4(0,0,0,0);\n    if ( h < 7. ) // this can be (much) larger, to hide artefacts with best guess\n    {\n        vec3 n = GetNormal(pos,.001,true);\n        \n        vec3 sunCol = vec3(.8);\n        vec3 sunDir = normalize(vec3(3,2,1));\n        \n        float l = max(.0,dot(n,sunDir));\n        \n        // shadow for the ball\n        vec3 dball = ballPos-pos;\n        float ds = dot(dball,sunDir);\n        if ( ds > .0 )\n        {\n            float p = length(dball-sunDir*ds);\n            float s = .01*length(dball);\n            l *= 1.-pow(1.-clamp(.5+.5*(p-ballRad)/s,0.,1.),2.);\n        }\n        \n        // measure how much occlusion there is here\n        float occD = max(h,.02); // ball-scale\n        vec3 occPos = pos + n * occD;\n        float vis = (SDF(occPos,true)-h)/occD;\n        \n        float occD2 = max(h,1.); // scenery-scale\n        vec3 occPos2 = pos + n * occD2;\n        float vis2 = (SDF(occPos2,true)-h)/occD2;\n        if ( vis2 < vis )\n        {\n            vis = vis2;\n            occD = occD2;\n            occPos = occPos2;\n        }\n\n        // approximate some radiance transfer\n        // compute approximate light on the occluder\n        vec3 occNorm = GetNormal(occPos,occD,true);\n        vec3 occLight = sunCol*mix(.2,1.,smoothstep(-.1,1.,dot(occNorm,sunDir)));\n\n        // find occluder's colour\n        vec3 occAlbedo = vec3(0,1,0);//GetColour(occPos,softness);\n\n        vec3 ao = mix( occAlbedo*occLight*.3, vec3(.3,.5,1)*.3, vis );\n\n\n        vec3 light = ao+sunCol*l;\n        \n        float v = (sin(pos.x*80.)+sin(pos.z*80.))/2.;\n//        vec3 albedo = vec3(max(0.,v)*v*.1,1,max(0.,-v)*(-v)*.1);\n        vec3 albedo = vec3(0,1.+.02*v,0);\n        if ( BallSDF(pos) < epsilon ) albedo = vec3(1);\n        if ( HoleSDF(pos) > -epsilon ) albedo = vec3(.05);\n        \n        o_col.rgb = albedo*light;\n\n//o_col.rgb = fract(vec3(1./16.,1./256.,1.)*length(camPos2-pos));\n        // fog\n        o_col.a = exp2(-length(pos-camPos)/500.);\n    }\n    \n    // sky\n    vec3 skyCol = exp2(-max(.0,ray.y)/vec3(.1,.3,.6));\n    \n    // composite sky\n    o_col.rgb = mix( skyCol, o_col.rgb, o_col.a );\n\n    // temporal anti-aliasing\n    \n\n    o_col = mix ( o_col, texelFetch(iChannel1,ivec2(fragCoord),0), taa*.8 );\n            \n/*    vec3 pos = ballPos+vec3(4.*((fragCoord-.5*iResolution.xy)/iResolution.y),0);\n\to_col = vec4(fract(pos),1);\n    \n    float s = SDFB(pos,ballPos);\n    o_col.xyz *= .5+.5*s/(.01+abs(s));*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}