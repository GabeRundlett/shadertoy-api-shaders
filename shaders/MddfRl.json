{
    "Shader": {
        "info": {
            "date": "1526504995",
            "description": "A tunnel made of cubes",
            "flags": 0,
            "hasliked": 0,
            "id": "MddfRl",
            "likes": 63,
            "name": "Voxel Bridge 3",
            "published": 3,
            "tags": [
                "3d",
                "tunnel"
            ],
            "usePreview": 1,
            "username": "shau",
            "viewed": 2940
        },
        "renderpass": [
            {
                "code": "// Created by SHAU - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n#define PI 3.141592\n#define T iTime\n#define FAR 50.0\n\n//Dave Hoskins\nfloat hash13(vec3 p3) {\n\tp3 = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//Shane\nvec3 path(float t) {\n    float a = sin(t * PI / 24.0 + 1.7);\n    float b = cos(t * PI / 24.0);\n    return vec3(a * 2.0, b * a, t);    \n}   \n\n//wireframe edges\nfloat tex(vec3 rp) {\n    float bs = 0.95;\n    if (abs(rp.x) < bs && abs(rp.y) < bs) return 0.0;\n    return 1.0;   \n}        \n\n// Cube mapping routine from Fizzer\nfloat fizz(vec3 rp) {\n    vec3 f = abs(rp);\n    f = step(f.zxy, f) * step(f.yzx, f); \n    f.xy = f.x > .5 ? rp.yz / rp.x : f.y > .5 ? rp.xz / rp.y : rp.xy / rp.z; \n    return tex(f);\n}\n\nmat2 rot(float x) {return mat2(cos(x), sin(x), -sin(x), cos(x));}\n\n//sphere and box functions from IQ\n//https://iquilezles.org/www/index.htm\nvec2 boxIntersection(vec3 ro, vec3 rd, vec3 b, inout vec3 on, float r1, float r2) {\n    \n    float la = 0.0;\n    \n    ro.zy *= rot(r1);\n    rd.zy *= rot(r1);\n    ro.xz *= rot(r2);\n    rd.xz *= rot(r2);\n\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * b;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    on = -sign(rd) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz);\n    \n    la = fizz(ro + rd * tN);\n    \n    on.zy *= rot(-r1); \n    on.zy *= rot(-r1); \n    on.xz *= rot(-r2); \n    on.xz *= rot(-r2); \n    \n    return (tN > tF || tF < 0.0) ? vec2(0.0) : vec2(tN, la);\n}\n\nvec2 sphIntersect(vec3 ro, vec3 rd, vec4 sph) {\n    vec3 oc = ro - sph.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - sph.w * sph.w;\n    float h = b * b - c;\n    if (h < 0.0) return vec2(0.0);\n    h = sqrt(h);\n    float tN = -b - h;\n    float tF = -b + h;\n    return vec2(tN, tF);\n}\n\nfloat sphDensity(vec3 ro, vec3 rd, vec4 sph, float dbuffer) {\n\n    float ndbuffer = dbuffer / sph.w;\n    vec3  rc = (ro - sph.xyz) / sph.w;\n\n    float b = dot(rd, rc);\n    float c = dot(rc, rc) - 1.0;\n    float h = b * b - c;\n    if (h < 0.0) return 0.0;\n    h = sqrt(h);\n    float t1 = -b - h;\n    float t2 = -b + h;\n\n    if (t2 < 0.0 || t1 > ndbuffer) return 0.0;\n    t1 = max(t1, 0.0);\n    t2 = min(t2, ndbuffer);\n\n    float i1 = -(c * t1 + b * t1 * t1 + t1 * t1 * t1 / 3.0);\n    float i2 = -(c * t2 + b * t2 * t2 + t2 * t2 * t2 / 3.0);\n    return (i2 - i1) * (3.0 / 4.0);\n}\n\n//modified logic from IQ\n//https://www.shadertoy.com/view/4dfGzs\nstruct Scene {\n    float t;\n    vec3 n;\n    float l;\n};\nScene voxelMarch(vec3 ro, vec3 rd) {\n \n    float t = 0.0;\n    vec3 n = vec3(0.0), mm = n, p = floor(ro), ri = 1.0 / rd, rs = sign(rd);\n    float l = 0.0;\n    \n    vec3 d = (p - ro + 0.5 + rs * 0.5) * ri;\n\n    for (int i = 0; i < 128; i++) {\n        \n        if (length(p.xy - path(p.z).xy) > 3.0) {\n        \n            float r = hash13(p);\n        \tfloat r1 = r + T + p.z;\n        \tfloat r2 = r1 * 2.0 + p.y;\n\n            vec2 bi = boxIntersection(ro - (p + vec3(0.5)), \n                                       rd, \n                                       vec3(clamp(r * 0.5, 0.1, 0.3)), \n                                       n,\n                                       r1,\n                                       r2);\n            \n            if (bi.x > 0.0) {\n                t = bi.x;\n                l = bi.y;\n                break;\n            }\n        }\n        \n        mm = step(d.xyz, d.yxy) * step(d.xyz, d.zzx);\n        d += mm * rs * ri;\n        p += mm * rs;\n    }\n    \n    return Scene(t, n, l);\n}\n\nvoid setupCamera(vec2 fragCoord, inout vec3 ro, inout vec3 rd, inout vec3 lp) {\n\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n\n    vec3 lookAt = vec3(0.0, 0.0, T * 6.0);\n    ro = lookAt + vec3(0.0, 0.0, -1.0);\n    lp = lookAt + vec3(0.0, 0.0, 16.0 + sin(T * 0.2) * 6.0);\n\n    lookAt = path(lookAt.z);\n    ro = path(ro.z);\n\tlp = path(lp.z);\n      \n    float FOV = PI / 3.0;\n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = normalize(vec3(forward.z, 0.0, -forward.x)); \n    vec3 up = cross(forward, right);\n\n    rd = normalize(forward + FOV * uv.x * right + FOV * uv.y * up);\n    rd.xy *= rot(sin(-ro.x  * 0.5) * 0.4);//isdive\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    float mint = FAR;\n    vec3 pc = vec3(0.0), ro, rd, lp;\n    setupCamera(fragCoord, ro, rd, lp);\n    \n    Scene scene = voxelMarch(ro, rd);\n    \n    if (scene.t > 0.0) {\n        \n        mint = scene.t;\n        vec3 rp = ro + rd * scene.t;\n        \n        //camera light\n        vec3 ld = normalize(vec3(4.0, 5.0, -4.0));\n        float atten = 1.0 / (1.0 + scene.t * scene.t * 0.05);\n        float spec = pow(max(dot(reflect(-ld, scene.n), -rd), 0.0), 64.0);\n        vec3 ac = vec3(1.0) * max(dot(ld, scene.n), 0.05) * 0.2;\n        ac += vec3(0.1, 0.0, 0.9) * max(0.0, scene.n.y) * 0.1;\n        ac += vec3(1.0) * spec * atten;\n        \n        //glowball light\n        ld = normalize(lp - rp);\n        float lt = length(lp - rp);\n        atten = 1.0 / (1.0 + lt * lt * 0.03);\n        spec = pow(max(dot(reflect(-ld, scene.n), -rd), 0.0), 64.0);\n        //shadow\n        Scene shadowScene = voxelMarch(rp - rd * 0.01, ld);\n        float sh = shadowScene.t > 0.0 && shadowScene.t < lt ? 0.0 : 1.0;\n        vec3 gc = vec3(1.0, 0.5, 0.0) * max(dot(ld, scene.n), 0.05) * atten * sh;\n        atten = 1.0 / (1.0 + lt * lt * 0.08);\n        gc += vec3(1.0, 0.8, 0.0) * max(dot(ld, scene.n), 0.05) * atten * sh;\n        gc += vec3(1.0, 1.0, 0.3) * spec * atten * sh;\n        \n        pc = ac + gc;\n        \n        float la = mod(rp.z + T * 8.0, 30.0);\n        pc += vec3(1.0, 0.5, 0.0) * scene.l * step(la, 5.0) / (1.0 + mint * 0.001);\n    }\n    \n    pc = mix(pc, vec3(0.4, 0.2, 0.0), mint / FAR);\n    \n    vec2 si = sphIntersect(ro, rd, vec4(lp, 1.0));\n    if (si.x > 0.0 && si.x < mint) {\n        float w = sphDensity(ro, rd, vec4(lp, 1.0), FAR);\n        if (w > 0.0) {\n        \tpc += vec3(1.0, 0.2, 0.0) * w * w;    \n        \tpc += vec3(1.0, 0.5, 0.0) * w * w * w;    \n        \tpc += vec3(1.0, 1.0, 0.0) * w * w * w * w * w;    \n        }\n    }\n    \n    fragColor = vec4(pc, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}