{
    "Shader": {
        "info": {
            "date": "1720273252",
            "description": "Voronoi Animation With Radom Graphics",
            "flags": 0,
            "hasliked": 0,
            "id": "lXGXzc",
            "likes": 18,
            "name": "Voronoi With Radom Graphics",
            "published": 3,
            "tags": [
                "voronoi",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.5),-antialiasing(1.5),d - b)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define LEAF_THICK 0.006\n\nvec2  hash2( vec2  p ) { p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) ); return fract(sin(p)*43758.5453); }\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/ \nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat grids(vec2 p, float s, float lineSize){\n    p = mod(p,s)-(s*0.5);\n    float d = abs(p.x)-lineSize;\n    float d2 = abs(p.y)-lineSize;\n    d = min(d,d2);\n    return d;\n}\n\nfloat graphics1(vec2 p){\n    p.x-=iTime*0.5;\n    vec2 prevP = p;\n    float s = 0.2;\n    float d = grids(p,s,0.005);\n    \n    p+=vec2(s*0.5);\n    p = mod(p,s)-(s*0.5);\n    float d2 = min(B(p,vec2(0.005,0.03)),B(p,vec2(0.03,0.005)));\n    \n    return min(d,d2);\n}\n\nfloat g2Rect(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.15,0.5));\n    p.y = abs(p.y)-0.253;\n    float d2 = B(p,vec2(0.05));\n    d = max(-d2,d);\n    p = prevP;\n    d2 = B(p,vec2(0.02,0.15));\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.15;\n    d2 = B(p,vec2(0.05,0.15));\n    float a = radians(-45.);\n    \n    p.y = abs(p.y)-0.15;\n    d2 = max(-dot(p,vec2(cos(a),sin(a))),d2);\n    d = max(-d2,d);\n    \n    return d;\n}\n\nfloat graphics2(vec2 p){\n    p.y+=iTime*0.5;\n    vec2 prevP = p;\n    p*=2.5;\n    vec2 id = floor(p);\n    vec2 gr = fract(p)-0.5;\n    vec2 n = hash2(id);\n    vec2 prevGr = gr;\n    \n    if(n.x<0.5){\n        gr*=Rot(radians(90.));\n        prevGr*=Rot(radians(90.));\n    }\n    \n    gr+=vec2(0.25,0.25);\n    gr*=Rot(radians(-45.));\n    float d = g2Rect(gr);\n    gr = prevGr;\n    gr-=vec2(0.25,0.25);\n    gr*=Rot(radians(-45.));\n    float d2 = g2Rect(gr);\n    \n    d = min(d,d2);\n    return d;\n}\n\nfloat graphics3(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.05,0.2));\n    float d2 = B(p,vec2(0.2,0.05));\n    d = min(d,d2);\n    return d;\n}\n\nfloat graphics4(vec2 p){\n    vec2 prevP = p;\n    float d = length(p)-0.3;\n    return abs(d)-0.05;\n}\n\nfloat graphics5(vec2 p){\n    vec2 prevP = p;\n    p*=Rot(radians(45.));\n    p.x+=iTime*0.5;\n    p.x = mod(p.x,0.1)-0.05;\n    \n    float d = B(p,vec2(0.02,1.));\n    return d;\n}\n\nfloat leaf(vec2 p,vec2 b,vec2 b2){\n    vec2 prevP = p;\n    float d = sdRhombus(p,b);\n    float d2 = B(p,b2);\n    d = min(abs(d)-LEAF_THICK,d2);\n    return d;\n}\n\nfloat hempLeaf(vec2 p){\n    p*=Rot(radians(iTime*20.));\n    vec2 prevP = p;\n    p.y = abs(p.y)-0.095;\n    float d = leaf(p,vec2(0.067,0.1),vec2(LEAF_THICK,0.1));\n    p = prevP;\n    p.x = abs(p.x)-0.09;\n    p.y = abs(p.y)-0.045;\n    p*=Rot(radians(-27.));\n    float d2 = leaf(p,vec2(0.1,0.05),vec2(0.1,LEAF_THICK));\n    d = min(d,d2);\n    return d;\n}\n\nfloat fractal(vec2 p){\n    p*=0.6;\n    vec2 prevP = p;\n    float d = 10.;\n    for(float i = 1.; i<3.; i++){\n        p*=Rot(radians(i*30.0+sin(i)*10.*-iTime));\n        p = abs(p)-0.15;\n        p.y+=0.05;\n        d = hempLeaf(p);\n    }\n    \n    return d;\n}\n\n// thx iq! https://iquilezles.org/articles/smoothvoronoi/\nfloat voronoi(vec2 p)\n{\n    p.y-=iTime*0.8;\n    vec2 id = floor( p );\n    vec2 f = fract( p );\n\n    float d = 1.; \n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            vec2 n = vec2(float(x),float(y));\n\n            vec2 r = hash2( id+n);\n\n            r = 0.5 + 0.5*sin(iTime + 6.2831*r);\n\n            vec2 diff = n + r - f;\n\n            float dist = length(diff);\n            float mask = length(diff)-0.5+(r.y*0.1);\n            if(r.x <0.2){\n                float d2 = max(mask,graphics1(diff));\n                d2 = min(d2,abs(mask)-0.02);\n                dist = min(dist,d2);\n            } else if(r.x >= 0.2 && r.x < 0.4){\n                float d2 = max(mask,graphics2(diff));\n                dist = min(dist,d2);\n            } else if(r.x >= 0.4 && r.x < 0.5){\n                float d2 = graphics3(diff);\n                dist = min(dist,d2);\n            } else if(r.x >= 0.5 && r.x < 0.7){\n                float d2 = graphics4(diff);\n                dist = min(dist,d2);\n            } else if(r.x >= 0.7 && r.x < 0.9){\n                float d2 = max(mask,graphics5(diff));\n                dist = min(dist,d2);\n            } else if(r.x >= 0.9){\n                mask = length(diff)-0.7+(r.y*0.1);\n                float d2 = max(mask,fractal(diff));\n                dist = min(dist,d2);\n            }\n\n            d = min(d, dist);\n        }\n    }\n    \n    float d2 = 1.;\n    vec2 prevDiff = vec2(0.);\n    for (int y= -2; y <= 2; y++) {\n        for (int x= -2; x <= 2; x++) {\n            vec2 n = vec2(float(x),float(y));\n\n            vec2 r = hash2( id+n);\n\n            r = 0.5 + 0.5*sin(iTime + 3.1415*r);\n\n            vec2 diff = n + r - f;\n\n            float dist = length(diff);\n            float d3= B(diff,vec2(0.005,0.05));\n            float d4 = B(diff,vec2(0.05,0.005));\n            d3 = min(d3,d4);\n            dist = min(dist,d3);\n                \n            d2 = min(d2, dist);\n        }\n    }\n    \n\treturn min(d,d2);\n}\n\nfloat bg(vec2 p){\n    p.y-=iTime*0.1;\n    vec2 prevP = p;\n    p = mod(p,0.22)-0.11;\n    p = abs(p)-0.1;\n    p*=Rot(radians(45.));\n    float d = Tri(p,vec2(0.01));\n    p = prevP;\n    \n    p = mod(p,0.22)-0.11;\n    p*=Rot(radians(45.));\n    float d2 = B(p,vec2(0.001,0.1));\n    d = min(d,d2);\n    d2 = B(p,vec2(0.1,0.001));\n    d = min(d,d2);\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\t\n    float v = voronoi( 3.*p);\n    vec3 col = vec3(0.);\n    col=mix(col,vec3(0.7),S(bg(p),0.));\n    col=mix(col,vec3(1.),S(v,0.));\n\t\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}