{
    "Shader": {
        "info": {
            "date": "1591972999",
            "description": "Not as cool as Shanes, but still pretty neat ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "3tlcW8",
            "likes": 32,
            "name": "Mandelbrot Thingy",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 1,
            "username": "BigWIngs",
            "viewed": 1067
        },
        "renderpass": [
            {
                "code": "// \"Mandelbrot thingy\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n//\n// Since Shane posted a mandelbrot experiment he had lying around here:\n// https://www.shadertoy.com/view/ttscWn\n//\n// I figured I'd do the same. This is a super quick and dirty mandelbrot \n// port from this tutorial: https://youtu.be/zmWkhlocBRY\n\nvec4 _Area;\nfloat _Angle=0., _Color=0., _Repeat, _Speed, _Symmetry, _Time;\n#define T iTime\n#define MAX_ITER 100.\n#define AA 3\n\nvec2 rot(vec2 p, vec2 pivot, float a) {\n    float s = sin(a);\n    float c = cos(a);\n\n    p -= pivot;\n    p = vec2(p.x*c-p.y*s, p.x*s+p.y*c);\n    p += pivot;\n\n    return p;\n}\n\nvec3 Gradient(vec2 p) {\n    // IQ palette idea\n    \n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 0.5);\n    vec3 d = vec3(0.8, 0.9, 0.3);\n    \n\treturn a + b*cos(6.2832*(c*p.x+d));\n}\n\nvec4 Mandelbrot(vec2 uv) {\n    \n    vec2 c = _Area.xy + uv*_Area.zw;\n    c = rot(c, _Area.xy, _Angle);\n\n    float r = 20.; // escape radius\n    float r2 = r * r;\n\n    vec2 z=vec2(0), zPrevious;\n    float iter;\n    for (iter = 0.; iter < MAX_ITER; iter++) {\n        zPrevious = rot(z, vec2(0), T);\n        z = vec2(z.x*z.x-z.y*z.y, 2.*z.x*z.y) + c;\n\n        if (dot(z, zPrevious) > r2) break;\n    }\n    if (iter > MAX_ITER) return vec4(0);\n\n    float dist = length(z); // distance from origin\n    float fracIter = (dist - r) / (r2 - r); // linear interpolation\n    fracIter = log2( log(dist) / log(r) ); // double exponential interpolation\n\n    float m = sqrt(iter / MAX_ITER);\n    vec4 col = sin(vec4(.3, .45, .65, 1)*m*20.)*.5+.5; // procedural colors\n    col = Gradient(vec2(m*_Repeat + T*_Speed, _Color+T*.03)).rgbb;\n\n    float angle = atan(z.x, z.y); // -pi and pi\n    //if(i.uv.x>.5)\n    col *= smoothstep(3., 0., fracIter);\n\n    col *= 1.+sin(angle * 2.+T*4.)*.2;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _Time = iTime;\n    _Repeat = 5.;\n    _Speed = -.2;\n    \n    float scale = 5.581448e-4;\n    _Area = vec4(.3177064,.03223879,scale,scale);\n    \n    vec3 col = vec3(0);\n    for(int x=0;x<AA; x++) {\n        for(int y=0;y<AA; y++) {\n            vec2 offs = vec2(x, y)/float(AA);\n            \n            vec2 uv = (fragCoord+offs)/iResolution.xy;\n\n            col += Mandelbrot(uv).rgb;\n        }}\n    col /= float(AA*AA);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}