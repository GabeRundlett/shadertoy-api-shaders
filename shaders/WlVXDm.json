{
    "Shader": {
        "info": {
            "date": "1582929010",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "WlVXDm",
            "likes": 27,
            "name": "Day 71",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 716
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 48\" by jeyko. https://shadertoy.com/view/WtcSW4\n// 2020-02-28 11:33:26\n\n// HEX FUNCTION FROM BigWIngs !! he has a tutorial on this kind of tiling\n\n// There's too much noise on fullscreen\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 100.;\n    float scale = 0.00 + dot(uvn,uvn)*0.5;\n    float chromAb = dot(uvn,uvn)*13.;\n    vec2 offs = vec2(0) + texture(iChannel1, uv + iTime*4.).xz*0.001;\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.99;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.x += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.y += texture(iChannel0, target).y;\n    \tradial.z += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    \n    \n    \n    radial /= steps;\n    \n    fragColor = texture(iChannel0, uv)*0.1 + radial*1.5;\n    fragColor *= 0.7;\n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    //fragColor *= 1. - dot(uvn,uvn)*2.;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\nvec3 glowF = vec3(0);\n    \n#define iTime (iTime + 10.)\n#define mx (iTime*4.9 + 20.*iMouse.x/iResolution.x)\n#define my (20.*iMouse.y/iResolution.x)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n    \n#define dmin(a, b) a.x < b.x ? a : b\n#define pmod(a,x) mod(a,x) - x*0.5\n\n#define pi acos(-1.)\n\n\nvec2 NOISE = vec2(0.);\nvec2 valueNoise(float p){\n\tvec2 a = texture(iChannel0, vec2(floor(p))/256.).xy;\n\tvec2 b = texture(iChannel0, vec2(floor(p) + 1.)/256.).xy;\n    return mix(a,b,smoothstep(0.,1.,fract(p)));\n}\n\nvec3 path(float z){\n    z *= 0.44;\n\treturn vec3(\n    \tsin(z + cos(z)*0.6),\n    \tcos(z + sin(z*0.8)*0.5),\n    \t0.\n    )*0.4;\n}\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1)/k,0.,1.);\n    return mix(d2, d1, h) - k*h*(1. - h);  \n}\n// Hex code from BigWings! He has a tutorial on them.\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    return c;\n}\n\n\nvec4 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r*.5;\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    float x = atan(gv.x, gv.y);\n    float y = .5-HexDist(gv);\n    vec2 id = uv-gv;\n    return vec4(x, y, id.x,id.y);\n}\n\n\n\nfloat modu;\nfloat moduB;\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\tp -= path(p.z);\n    vec2 n = normalize(p.xy);\n    #define modDist 1.\n    #define tunnW 0.7\n    #define pipeW 0.04\n    \n    vec3 k = p;\n    float id = floor(p.z/modDist);\n    vec3 g = p;\n    p.z = pmod(p.z, modDist);\n    \n    vec3 o = p;\n    //p.xy *= rot(0.4 + p.z*(0.1 + sin(iTime*0.1) )+ iTime*0.3);\n    vec2 pC = vec2(atan(p.y,p.x), length(p.xy));\n    \n    vec3 q = vec3(pC, p.z);\n\n    vec4 hc = HexCoords(vec2(4.*pC.x/pi, p.z*2.)*1.);\n    \n    float dHex = hc.y - 0.02 + sin(o.z*100.)*0.01;\n    dHex = max(dHex, -length(o.xy*1.) + tunnW*0.8);\n    //dHex = max(dHex, length(o.xy*1.) - tunnW*0.97);\n    //d = dmin(d, vec2(dHex, 2.));    \n    \n    k = pmod(k, modDist*10.);\n    \n    float hcy = pmod(hc.y, 0.5);\n    float dThings = max(hcy - 0.06,  -hcy - 0.1);\n    dThings = max(dThings, -length(o.xy*1.1) + tunnW*0.8);\n    \n    dThings = max(dThings, -k.z - 0.25*modDist);\n    dThings = max(dThings, k.z - 0.25*modDist);\n    \n    //dThings = max(pmod());\n    if(mod(floor(4.*pC.x/ pi ), 2.) != 1.)\n    \td = dmin(d, vec2(dThings, 2.)); \n    \n    //hc.y += 0.03;\n    float dThingsB = max(hc.y - 0.03,  -hc.y - 0.1);\n    dThingsB = max(dThingsB, -length(o.xy*1.1) + tunnW*0.8);\n        \n        \n    pC.x += 0.25*pi;\n    if(mod(floor(4.*pC.x/ pi ), 2.) != 1.)\n    \td = dmin(d, vec2(dThingsB, 2.)); \n    \n    \n    // dots\n    \n    \n    // mod\n    float mm = sin(iTime*0.5 + g.z*0.5 + p.z);\n    modu = (mm/sqrt(0.02 + mm*mm ))*0.5 + 0.5;\n    float mmB = sin(iTime*1.25 + g.z*0.25 + p.z*0.8 + p.y);\n    moduB = (mmB/sqrt(0.01 + mmB*mmB ))*0.5 + 0.5;\n    \n    d = dmin(d, vec2(dHex, 2.));\n    glow += exp(-d.x*100.)*pal(1.3,0.7,vec3(1.8+modu*0.5,0.4,0.8), 3.9 +modu*0.2 + sin(p.z)*0.5,2.)*2.;\n    // tunnel\n    float dTunn = -length(o.xy*1.) + tunnW;\n    dTunn = max(length(o.xy*1.) - tunnW - 0.02, dTunn);\n    d = dmin(d, vec2(dTunn, 10.));\n    \n    \n    glowF += exp(-d.x*(10. + NOISE.x*200.9))*pal(1.39,0.7+ exp(-dThingsB*20.)*0.6,vec3(1.1+modu*0.5 ,0.4,0.8), 3.9 +modu*0.1 + sin(p.z)*0.5,2.)*2.;\n    \n    \n    \n    \n    pC.x += pi/3.5;\n    pC.x = pmod(pC.x, pi/1.);\n    pC.y -= 0.6;\n    pC = abs(pC) - vec2(0.05,0.15);\n    //d = dmin(d, vec2( max(pC.x, pC.y), 2.));\n    d.x *= 0.5;\n\treturn d;\n}\n\nvec2 march(vec3 ro,vec3 rd,inout vec3 p,inout float t,inout bool hit){\n\thit = false;\n    p = ro;\n    t = 0.;\n    vec2 d;\n    for(int i = 0; i < 180 ; i++){\n    \td = map(p);\n                    \n        \n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        t += d.x;;\n    \tp = ro + rd*t;\n    }\n\treturn d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = cross(vec3(0,1,0), dir);\n\tvec3 up = cross(dir, right);\n    float fov = 0.9;\n\treturn normalize(dir + right*uv.x*fov + up*uv.y*fov);\n}\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.001, 0.);\n    return normalize(map(p).x - vec3(\n    \tmap(p-t.xyy).x,\n    \tmap(p-t.yxy).x,\n    \tmap(p-t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. - dot(uv,uv)*0.3;\n    \n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    ro.z += mx*1. ;\n    ro += path(ro.z);\n    vec3 lookAt = ro + vec3(0,0,4);\n    lookAt += path(lookAt.z);\n    \n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    ro.xyz += rd * texture(iChannel0, (uv+ iTime)*20.).xyz*0.7;\n    \n    NOISE = valueNoise(iTime*10.);\n    ro.xy += NOISE*0.025;\n    float t; bool hit;\n    vec3 p;\n    \n    vec2 d = march(ro, rd, p, t, hit);\n    \n    if(hit){\n        vec3 n = getNormal(p);\n        float fres = pow(1.0 - max(dot(n, -rd), 0.), 4.);\n        \n        col += fres*1.;\n        \n        \n    \tcol *= glow*(0.021 + sin(iTime*2. + t*0.6)*0.01);\n    }\n    \n    \n    col += glowF*0.1*smoothstep(0.,1., t*0.01);\n        \n    col *= 0.5;\n    //col = mix(col, vec3(0.1,0.4,0.3),pow(smoothstep(0.,1.,t*0.05), 2.)*0.56);\n    col = max(col, 0.);\n    col = pow(col,vec3(0.45));\n    \n    uv *= 0.8;\n    col *= 1. - dot(uv,uv);\n    //col *= 1. - t*0.2;    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}