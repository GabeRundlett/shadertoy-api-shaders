{
    "Shader": {
        "info": {
            "date": "1716082210",
            "description": "Control with WASD (or arrow keys), fly up with SPACE and down with SHIFT, look around by dragging the mouse.",
            "flags": 48,
            "hasliked": 0,
            "id": "X3dGRr",
            "likes": 12,
            "name": "First-person voxel thing",
            "published": 3,
            "tags": [
                "raytracing",
                "voxels",
                "interactive",
                "rays",
                "voxel",
                "tracing",
                "firstperson",
                "fps"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n\nvoid mainImage(out vec4 o, in vec2 fc)\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc.xy/R.xy;\n    \n    col = texture(iChannel0, uv).xyz;\n    \n    o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n\nbool keypress(int key) {\n    return texelFetch(iChannel0, ivec2(key, 0), 0).x > 0.0;\n}\n\nvoid intersect(vec3 vel, vec3 offset, vec3 n, inout vec3 p) {\n    n = normalize(n);\n    vec3 vix = floor(p - offset);// + vec3(0.5);\n    ivec3 idx = ivec3(vix);\n    Voxel vox1 = get_voxel(iChannel2, idx);\n\n    if (vox1.type != BLOCK_TYPE_AIR) {\n        float dp = max(0.0, dot(vel, n));\n        p -= n*dp;\n    }\n    \n}\n\nvec4 keyboard(in vec2 fc) {\n    vec4 p4 = texelFetch(iChannel1, ivec2(0), 0);\n    vec3 p = p4.xyz;\n    vec3 m = texelFetch(iChannel1, ivec2(1, 0), 0).xyz;\n\n    float W = float(keypress(87) || keypress(38));\n    float A = float(keypress(65) || keypress(37));\n    float S = float(keypress(83) || keypress(40));\n    float D = float(keypress(68) || keypress(39));\n    float SPACE = float(keypress(32));\n    float SHIFT = float(keypress(16));\n    float X = 1.0;//float(texelFetch(iChannel0, ivec2(88, 0), 0).x > 0.0);\n    \n    float dt = iTimeDelta;\n    float k = 6.0;\n    \n    vec3 dir = vec3(0.0);\n    dir += vec3(0, 0, 1)  * k * dt * W;\n    \n    \n    dir += vec3(-1, 0, 0) * k * dt * A;\n    \n    \n    dir += vec3(0, 0, -1) * k * dt * S;\n    \n    \n    dir += vec3(1, 0,  0) * k * dt * D;\n    \n    \n    dir += vec3(0, 1, 0)  * k * dt * (SPACE - SHIFT);\n    dir += vec3(0, -1, 0) * k * dt * 0.9 * float(SPACE <= 0.0);\n     \n     \n    if (iFrame <= 0) {\n        p = vec3(39.5, MAP_HEIGHT-10., 19.5);\n    }\n    \n    dir.xz *= rot(m.x);\n    p += dir;\n\n  //  intersect(dir, vec3(0, 1, 0), vec3(0, 1, 0), p);\n    \n    \n    float oo = 0.5;\n    float ks = 1.;\n    \n    intersect(dir, vec3(0, 1, 0), vec3(0, -1, 0), p);\n    intersect(dir, ks*vec3(-0.5, 1, 0), vec3(1, 0, 0), p);\n    intersect(dir, ks*vec3(0.5, 1, 0), vec3(-1, 0, 0), p);\n    intersect(dir, ks*vec3(0.0, 1, -0.5), vec3(0, 0, 1), p);\n    intersect(dir, ks*vec3(0, 1, 0.5), vec3(0, 0, -1), p);\n  \n    return vec4(p, max(X, p4.w));\n}\n\n\nvec3 mouse(in vec2 fc) {\n    vec4 p4 = texelFetch(iChannel1, ivec2(0), 0);\n    vec4 m = vec4((iMouse.xy - 0.5 * R.xy) / R.y, iMouse.zw);\n    vec3 p = texelFetch(iChannel1, ivec2(1, 0), 0).xyz;\n\n    float k = float(iMouse.z > 0.001) * 4.0;\n    float dt = iTimeDelta;\n    \n    if (iFrame <= 1) {\n        k = 1.0;\n        m.x = 0.8;\n        m.y = -0.8;\n        dt = 1.0;\n    }\n    \n    if (p4.w < 0.001) {\n      //  p.y = -0.55+(0.11*sin(iTime));\n        k = 1.0;\n        m = vec4(0.0);\n    }\n    \n    p += m.xyy * k * dt;\n    \n    return p;\n}\n\n\nvoid mainImage( out vec4 o, in vec2 fc )\n{\n\n    ivec2 iv = ivec2(fc);\n\n    if (iv.x <= 0 && iv.y <= 0) {\n        o = keyboard(fc);\n    } else if (iv.x == 1 && iv.y == 0) {\n        o = vec4(mouse(fc), 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAP_HEIGHT 64.0\n#define WATER_LEVEL 20\n#define MAP_BOUNDS 300\n\n// render distance\n#define MAX_LOOP 100\n\n#ifndef HW_PERFORMANCE\n#define iFrame 0\n#define iResolution vec2(640)\n#endif\n\nstruct AABB {\n  vec3 min;\n  vec3 max;\n};\n\nmat2 rot(float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c, s, -s, c);\n}\n\nvec3 cubenormal(vec3 v) {\n  vec3 s = sign(v);\n  vec3 a = abs(v);\n\n  return mix(mix(vec3(0.0, 0.0, s.z), vec3(s.x, 0.0, 0.0), step(a.z, a.x)),\n               mix(vec3(0.0, s.y, 0.0), vec3(s.x, 0.0, 0.0), step(a.y, a.x)),\n               step(a.z, a.y));\n}\n\nbool AABBIntersection(vec3 ro, vec3 rd, AABB aabb, out vec3 point,\n                      out vec3 normal) {\n  vec3 boxMin = min(aabb.min, aabb.max);\n  vec3 boxMax = max(aabb.min, aabb.max);\n  vec3 tMin = (boxMin - ro) / rd;\n  vec3 tMax = (boxMax - ro) / rd;\n  vec3 t1 = min(tMin, tMax);\n  vec3 t2 = max(tMin, tMax);\n  float tNear = max(max(t1.x, t1.y), t1.z);\n  float tFar = min(min(t2.x, t2.y), t2.z);\n  point = ro + rd * tNear;\n  vec3 center = (aabb.min + aabb.max) / 2.;\n  vec3 halfextent = aabb.max - center;\n  vec3 relpos = point - center;\n  normal = cubenormal(relpos / halfextent);\n  return (!(tNear > tFar));\n}\n\n#define MAX_VALUE 9999.0\n#define INF MAX_VALUE\n\n\n#define BLOCK_TYPE_AIR 0\n#define BLOCK_TYPE_STONE 1\n#define BLOCK_TYPE_WATER 2\n\nstruct Voxel {\n  int type;\n  vec3 data;\n};\n\n#define NEW_VOXEL Voxel(0, vec3(0.0))\n\nstruct Data {\n  vec3 p;\n  vec3 n;\n  float d;\n  ivec3 voxel_index;\n  int skip;\n  Voxel vox;\n};\n\n#define NEW_DATA Data(vec3(0.0), vec3(0.0), INF, ivec3(-1), -1, NEW_VOXEL)\n\n\n\nVoxel get_voxel(sampler2D sampler, ivec3 voxel_index) {\n  Voxel v = Voxel(BLOCK_TYPE_STONE, vec3(0.0));\n  vec3 data = textureLod(sampler, vec2(voxel_index.xz) / iResolution.y, 0.).xyz;\n  \n  if (voxel_index.y <= WATER_LEVEL) { v.type = BLOCK_TYPE_WATER; }\n  else if (voxel_index.y >= int(round(data.x * MAP_HEIGHT))) { v.type = BLOCK_TYPE_AIR; }\n  v.data = data;\n  return v;\n}\n\nbool grid_traverse(sampler2D sampler, vec3 ro, vec3 rd, float cell_size,\n                   ivec3 boundz, inout Data data) {\n                   \n  vec3 ray_end = ro+rd*0.5*float(boundz.z);\n  \n  ivec3 final_voxel =\n      ivec3(int(floor(ray_end[0] / cell_size)), int(floor(ray_end[1] / cell_size)),\n            int(floor(ray_end[2] / cell_size)));\n  ivec3 current_voxel =\n      ivec3(int(floor(ro[0] / cell_size)), int(floor(ro[1] / cell_size)),\n            int(floor(ro[2] / cell_size)));\n\n  vec3 stp = vec3(\n    float((rd[0] >= 0.) ? 1.0 : -1.0),\n    float((rd[1] >= 0.) ? 1.0 : -1.0),\n    float((rd[2] >= 0.) ? 1.0 : -1.0)\n  );\n\n  float next_bound_x =\n      float((float(current_voxel[0]) + stp.x) * cell_size);\n  float next_bound_y =\n      float((float(current_voxel[1]) + stp.y) * cell_size);\n  float next_bound_z =\n      float((float(current_voxel[2]) + stp.z) * cell_size);\n\n  if (stp.x < 0.)\n    next_bound_x += cell_size;\n  if (stp.y < 0.)\n    next_bound_y += cell_size;\n  if (stp.z < 0.)\n    next_bound_z += cell_size;\n\n  float tMaxX =\n      (rd[0] != 0.) ? (next_bound_x - ro[0]) / rd[0] : MAX_VALUE;\n  float tMaxY =\n      (rd[1] != 0.) ? (next_bound_y - ro[1]) / rd[1] : MAX_VALUE;\n  float tMaxZ =\n      (rd[2] != 0.) ? (next_bound_z - ro[2]) / rd[2] : MAX_VALUE;\n\n  float tDeltaX = (rd[0] != 0.) ? cell_size / rd[0] * stp.x : MAX_VALUE;\n  float tDeltaY = (rd[1] != 0.) ? cell_size / rd[1] * stp.y : MAX_VALUE;\n  float tDeltaZ = (rd[2] != 0.) ? cell_size / rd[2] * stp.z : MAX_VALUE;\n\n  for (int i = min(iFrame, 0); i < MAX_LOOP; i++) {\n    if (tMaxX < tMaxY) {\n      if (tMaxX < tMaxZ) {\n        current_voxel[0] += int(ceil(stp.x));\n        tMaxX += tDeltaX;\n      } else {\n        current_voxel[2] += int(ceil(stp.z));\n        tMaxZ += tDeltaZ;\n      }\n    } else {\n      if (tMaxY < tMaxZ) {\n        current_voxel[1] += int(ceil(stp.y));\n        tMaxY += tDeltaY;\n      } else {\n        current_voxel[2] += int(ceil(stp.z));\n        tMaxZ += tDeltaZ;\n      }\n    }\n\n    ivec3 voxel_index = abs(current_voxel) % boundz;\n    Voxel vox = get_voxel(sampler, voxel_index);\n    AABB bounds = AABB(vec3(0.0), vec3(0.0));\n    bounds.min = vec3(voxel_index.x, voxel_index.y, voxel_index.z);\n    bounds.max = bounds.min + (vec3(cell_size, cell_size, cell_size));\n\n    vec3 nextPoint = vec3(0.0);\n    vec3 nextNormal = vec3(0.0);\n    float nextDist = INF;\n    float tnear = 0.0;\n    float tfar = 9999.;\n\n    if (vox.type != data.skip && vox.type != BLOCK_TYPE_AIR && current_voxel.z < boundz.z && current_voxel.x < boundz.x &&\n        current_voxel.y < boundz.y && current_voxel.z >= 0 &&\n        current_voxel.x >= 0 && current_voxel.y >= 0 &&\n        AABBIntersection(ro, rd, bounds, nextPoint, nextNormal)) {\n      data.p = nextPoint;\n      data.n = nextNormal;\n      data.d = nextDist;\n      data.voxel_index = voxel_index;\n      data.vox = vox;\n      return true;\n    }\n    \n    if (current_voxel == final_voxel || voxel_index == final_voxel) return false;\n  }\n  return false;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define R iResolution\n\n\nvec3 thash(vec2 p, float seed) {\n    return textureLod(iChannel0, ((p  + seed) / 256.0), 0.0).xyz;\n}\n\nvec3 tnoise(vec2 p, float s) {\n  p += 3.3828714;\n  vec2 id = floor(p); vec2 lv = fract(p);lv = lv*lv*(3.0-2.0*lv);\n  return mix(mix(thash(id+vec2(0,0),s),thash(id+vec2(1,0),s),lv.x),\n             mix(thash(id+vec2(0,1),s),thash(id+vec2(1,1),s),lv.x),lv.y);\n}\n\nvec3 tnoise(vec2 p, float s, float freq, float warp, const in int oct) {\n  vec3 n = vec3(0.0);\n  float div = 0.0;\n  float amp = 1.0;\n  vec2 tx = vec2(0.0);\n  for (int i = min(iFrame, 0); i < oct; i++) {\n    n += amp*tnoise((p+tx)*freq,s);\n    div += amp;\n    amp *= 0.5;\n    freq *= 2.0;\n    tx += warp * vec2(sin(n.x*6.28), cos(n.y*6.28));\n\n  }\n  return n / div;\n}\n\n\nvoid mainImage(out vec4 o, in vec2 fc)\n{\n    vec3 col = texelFetch(iChannel1, ivec2(fc), 0).xyz;\n    vec2 uv = fc.xy / R.xy;\n    \n    if (iFrame <= 0) {\n        col = tnoise(uv, 1.300412341, 16., 0.005, 2);\n    }\n    \n    o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 aces(vec3 x) { return clamp((x*(2.51*x+0.03))/(x*(2.43*x+0.59)+0.14),0.0,1.0); }\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\nfloat smin(float a, float b, float k) {float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0); return mix(a, b, h) - k*h*(1.0-h); }\nfloat smax(float a, float b, float k) {return smin(a, b, -k); }\nfloat sabs(in float v, in float k) {return smax(-v, v, k);}\nfloat sclamp(in float v, in float mi, in float ma, in float k) {return smin(smax(v, mi, k), ma, k);}\nfloat sgt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (a - b) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\nfloat slt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (b - a) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\nfloat ssign(float x, float k) { float s = smoothstep(-k, k, x); return mix(s, sign(x), 0.5*clamp(max(0.0, 1.0-(abs(s)*2.5))*max(0.0, 1.0-k), 0.0, 1.0));}\nvec3 ssign(vec3 p, float k) { return vec3(ssign(p.x, k), ssign(p.y, k), ssign(p.z, k)); }\n\n\n#define R iResolution\n#define T (iTime)\n#define ZERO min(iFrame, 0)\n#define M_PI 3.1415\n#define TAU (M_PI*2.0)\n#define AMBIENT 0.05\n\n\nvoid mainImage(out vec4 o, in vec2 fc)\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc.xy - 0.5 * R.xy) / R.y;\n    vec4 m = vec4((iMouse.xy - 0.5 * R.xy) / R.y, iMouse.zw);\n    \n    vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv, 0.5));\n    \n    vec3 move = texelFetch(iChannel2, ivec2(0), 0).xyz;\n    vec3 mouse = texelFetch(iChannel2, ivec2(1, 0), 0).xyz;\n    \n    rd.yz *= rot(mouse.y);\n    rd.xz *= rot(mouse.x);\n    ro = move;\n    \n    vec3 L = normalize(vec3(3, 1.5, -3));\n    vec3 LC = vec3(0.97, 0.89, 0.79);\n    \n    Data data = NEW_DATA;\n    if (grid_traverse(iChannel3, ro, rd, 1.0, ivec3(MAP_BOUNDS), data)) {\n        vec3 n = data.n;\n        vec3 p = data.p;\n        vec2 c = mix(mix(p.xz, p.yz, abs(dot(n, vec3(1, 0, 0)))), p.xy, abs(dot(n, vec3(0, 0, 1))));\n        vec3 diffuse = vec3(0.0);\n        float specf = 0.0;\n        \n        switch (data.vox.type) {\n            case BLOCK_TYPE_WATER: {\n              specf = 1.0;\n              vec2 coord = (c+vec2(sin(0.5*iTime+0.5*p.x+0.5*cos(0.5*p.z)), cos(0.5*iTime+0.5*p.z+0.5*sin(0.5*p.x))))*0.166666666;\n              diffuse = vec3(0.02, 0.39, 0.89) * \n                  (texture(iChannel0, coord).xyz/M_PI+0.5);\n            } break;\n            case BLOCK_TYPE_STONE: diffuse = texture(iChannel1, c).xyz; break; \n        }\n        vec3 ref = reflect(n, L);\n        float VdotR = max(0.0, dot(normalize(rd+0.5*n), ref));\n        float spec = pow(VdotR, 6.)*2.*specf;\n        float NdotL = dot(n, L);\n        col += LC*max(AMBIENT, NdotL)*(diffuse + spec);\n        Data shadowData = NEW_DATA;\n        if (NdotL > 0.0 && grid_traverse(iChannel3, p, normalize(0.5*data.n+L), 1.0, ivec3(MAP_BOUNDS), shadowData)) {\n            float sd = clamp(distance(data.p, shadowData.p), AMBIENT, 1.0);\n            col *= max(0.45 * sd, AMBIENT*3.);\n        }\n\n    } else {\n        vec3 blue = vec3(0.02, 0.34, 0.79);\n        float dotup = max(0.0, dot(rd, vec3(0, 1, 0)));\n        \n        col += pow(blue, vec3(1.0 + 2.0*dotup));\n    }\n    float depth = distance(ro+rd, data.p)/float(MAX_LOOP);\n  //  col += depth;\n    float VdotL = max(0.0, dot(rd, L));\n    col += LC*pow(VdotL, 6.)*smoothstep(0.0, 0.25, depth);\n    col += col*luma(col);\n    col = aces(col);\n    col = pow(col, vec3(1.0/2.2));\n    \n    o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}