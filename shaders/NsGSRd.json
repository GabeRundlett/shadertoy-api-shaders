{
    "Shader": {
        "info": {
            "date": "1635085450",
            "description": "slide moc EVA",
            "flags": 0,
            "hasliked": 0,
            "id": "NsGSRd",
            "likes": 11,
            "name": "Footwear Design 001",
            "published": 3,
            "tags": [
                "footwear"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define Slice(p,a) dot(p,vec2(cos(a),sin(a)))\n#define S(p,d,b) smoothstep(fwidth(p.y),0.0,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define MATERIAL_OUTSOLE 0\n#define MATERIAL_MIDSOLE1 1\n#define MATERIAL_MIDSOLE2 2\n#define MATERIAL_UPPER 3\n\n#define ZERO (min(iFrame,0))\n\n// IQ's 3D noise function. It's faster than the FBM and enough for me to design.\n// The compile is also faster.\nfloat noise3d( vec3 p )\n{\n\tconst vec3 s = vec3(27, 111, 57);\n\tvec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); \n    //p *= p*p*(p*(p*6. - 15.) + 10.); // option\n    h = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.yz),p.x)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat baseOutsole(vec3 p, float h){\n    vec3 prevP = p;\n    \n    p.xy*=Rot(radians(90.0));\n    p.yz*=Rot(radians(15.0));\n    p.y*=1.5;\n    float d = sdCappedCylinder(p-vec3(0.0,0.0,0.25),h,0.3);\n    \n    p = prevP;\n    p.xy*=Rot(radians(90.0));\n    p.y*=1.5;\n    p.z*=1.2;\n    float d2 = sdCappedCylinder(p-vec3(0.0,0.0,-0.25),h,0.23);\n    d = min(d, d2);\n    \n    p = prevP;\n    d2 = sdBox(p-vec3(0,0.0,0.0),vec3(0.145,h,0.18));\n    d = min(d, d2);\n    \n    p = prevP;\n    p.xy*=Rot(radians(90.0));\n    p.yz*=Rot(radians(15.0));\n    p.y*=1.3;\n    d2 = sdCappedCylinder(p-vec3(-0.03,0.3,-0.01),0.2,0.125);\n    d = max(-d2,d);\n\n    return (d)*0.6;\n}\n\nfloat outsole(vec3 p){\n    vec3 prevP = p;\n    float d = baseOutsole(p,0.02);\n    \n    p.z = mod(p.z,0.04)-0.02;\n    p.y*=0.5;\n    p.xz*=Rot(radians(90.0));\n    p.xy*=Rot(radians(30.0));\n    float d2 = sdTriPrism(p-vec3(0.0,0.01,0.0),vec2(0.03,0.3));\n    \n    d = max(d,d2);\n    p = prevP;\n    d2 = baseOutsole(p-vec3(0.0,0.02,0.0),0.01);\n    d = min(d,d2);\n    \n    return d;\n}\n\nvec2 midsole(vec3 p){\n    float d = baseOutsole(p-vec3(0.0,0.03,0.0),0.01);\n    float d2 = baseOutsole(p-vec3(0.0,0.06,0.0),0.02);\n    \n    p.yz*=Rot(radians(-3.0));\n    float mask = p.y-0.07;\n    d2 = max(mask,d2);\n    \n    vec2 model = vec2(d,MATERIAL_MIDSOLE1);\n    vec2 model2 = vec2(d2,MATERIAL_MIDSOLE2);\n    \n    return combine(model,model2);\n}\n\nfloat upperBase(vec3 p){\n    vec3 prevP = p;\n    p.xz*=1.03;\n   \n    float d2 = baseOutsole(p-vec3(0,0.19,0),0.15);\n   \n    p.z-=0.06;\n    p.yz*=Rot(radians(40.0));\n    \n    float mask = p.y-0.2;\n    d2 = max(mask,d2);\n   \n    p = prevP;\n    p.yz*=Rot(radians(-10.0));\n    p.xz*=Rot(radians(15.0));\n    float d = sdEllipsoid(p-vec3(0.0,0.095,0.0),vec3(0.23,0.24,0.53));\n   \n    d = max(d,d2);\n    return d;\n}\n\nfloat upper(vec3 p){\n    vec3 prevP = p;\n    float d = upperBase(p);\n    p.x*=1.3;\n    \n    float d2 = upperBase(p-vec3(0.0,-0.02,-0.03));\n    d = max(-d2,d);\n    \n    float prevD = d;\n    \n    p = prevP;\n    p.yz*=Rot(radians(-10.0));\n    p.xz*=Rot(radians(15.0));\n    p.z*=0.6;\n    p = mod(p,0.11)-0.055;\n    d2 = length(p)-0.05;\n    \n    d = max(-d2,d);\n    \n    p = prevP;\n    p.z-=0.1;\n    p.yz*=Rot(radians(40.0));\n    \n    float mask = p.y-0.2;\n    d2 = max(-mask,prevD);    \n\n    return min(d,d2);\n}\n\nvec2 GetDist(vec3 p) {\n    p+=noise3d(p*300.0)*0.001;\n    vec3 prevP = p;\n    \n    p.y+=0.1;\n    p.z+=0.1;\n    float d = outsole(p);\n    \n    vec2 model = vec2(d,MATERIAL_OUTSOLE);\n    vec2 model2 = midsole(p);\n    \n    d = upper(p);\n    \n    vec2 model3 =vec2(d,MATERIAL_UPPER);\n    \n    return combine(model,combine(model2,model3));\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,2,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    float nn = noise3d(p*80.0)*0.12;\n    if(mat == MATERIAL_OUTSOLE){\n        col = diffuseMaterial(n,rd,p,vec3(1.0,1.0,0.9)+nn);\n    } else if(mat == MATERIAL_MIDSOLE1){\n        col = diffuseMaterial(n,rd,p,vec3(1.0,0.6,0.0)+nn);\n    } else if(mat == MATERIAL_MIDSOLE2){\n        col = diffuseMaterial(n,rd,p,vec3(0.6,0.6,0.6))+nn;\n    } else if(mat == MATERIAL_UPPER){\n        \n        col = diffuseMaterial(n,rd,p,vec3(0.7,0.2, 0.3)+nn+nn);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy -.3;\n    \n    vec3 ro = vec3(0, 0, 1.0);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-30.0));\n    if(iMouse.z>0.){\n        ro.yz *= Rot(-m.y*3.14+1.);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.xz *= Rot(radians(-15.0+iTime*20.0));\n        \n        //ro.xz *= Rot(radians(45.0));\n    }\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        col *= exp( -0.038*d.x*d.x*d.x );//fog\n    } else {\n        //col = vec3(1.0,1.0,0.2);\n        //col = vec3(0.95);\n    }\n    \n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}