{
    "Shader": {
        "info": {
            "date": "1627829993",
            "description": "bruh",
            "flags": 32,
            "hasliked": 0,
            "id": "7t2SDR",
            "likes": 1,
            "name": "Floled's Pathtracing 2.0",
            "published": 3,
            "tags": [
                "bruh"
            ],
            "usePreview": 0,
            "username": "Floled",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0, uv);\n    vec3 col = data.xyz / data.w; \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define INFINITY 1e9\n#define PI 3.1415926\n#define NUM_SAMPLES 16\n#define NUM_BOUNCES 8\n#define EPSILON 1e-8\nvec2 _Pixel;\nfloat _Seed = 0.0;\nfloat rand() {\n    float result = sin(_Seed / 100.0 * dot(_Pixel * cos(iTime * 53.35342), vec2(12.9898f, 78.233f))) * 43758.5453;\n    _Seed += 1.0;\n    return fract(result);\n}\nfloat rand2(vec2 v) {\n    float result = fract(sin(fract(iTime + v.x + v.y) * 54538.4375 * dot(v, vec2(12.9898, 78.233))) * 43758.5453);\n    return result;\n}\nfloat sdot(vec3 x, vec3 y) {\n    return clamp(dot(x, y), 0.0, 1.0);\n}\nvec3 randPointOnSphere(vec2 seed) {\n    vec2 uv = vec2(fract(rand2(seed)), fract(rand2(seed * 59.24234)));\n    float theta = 2.0 * PI * uv.x;\n    float psi = acos(2.0 * uv.y - 1.0);\n    float x = cos(theta) * sin(psi);\n    float y = sin(theta) * sin(psi);\n    float z = cos(psi);\n    return vec3(x, y, z);\n}\nfloat smoothnessToPhongAlpha(float s)\n{\n    return pow(1000.0, s * s);\n}\nfloat energy(vec3 color)\n{\n    return (color.x + color.y + color.z) / 3.0;\n}\n\nstruct Material {\n    vec3 color;\n    float smoothness;\n    bool metallic;\n    bool emission;\n    float intensity;\n    float ior;\n};\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n    vec3 energy;\n};\nstruct HitInfo {\n    vec3 pos;\n    vec3 direction;\n    vec3 normal;\n    float distance;\n    int materialID;\n};\nstruct Triangle {\n    vec3 vertex0;\n    vec3 vertex1;\n    vec3 vertex2;\n    int materialID;\n};\nconst int numTriangles = 14;\nTriangle triangles[numTriangles] = Triangle[numTriangles](\n    Triangle(\n        vec3(-10.0, 0.0, 10.0),\n        vec3(10.0, 0.0, 10.0),\n        vec3(10.0, 0.0, -10.0),\n        0\n    ),\n    Triangle(\n        vec3(-10.0, 0.0, 10.0),\n        vec3(10.0, 0.0, -10.0),\n        vec3(-10.0, 0.0, -10.0),\n        0\n    ),\n    Triangle(\n        vec3(10.0, 20.0, 10.0),\n        vec3(-10.0, 20.0, 10.0),\n        vec3(10.0, 20.0, -10.0),\n        0\n    ),\n    Triangle(\n        vec3(-10.0, 20.0, -10.0),\n        vec3(10.0, 20.0, -10.0),\n        vec3(-10.0, 20.0, 10.0),\n        0\n    ),\n    Triangle(\n        vec3(-10.0, 20.0, -10.0),\n        vec3(10.0, 0.0, -10.0),\n        vec3(10.0, 20.0, -10.0),\n        2\n    ),\n    Triangle(\n        vec3(10.0, 0.0, -10.0),\n        vec3(-10.0, 20.0, -10.0),\n        vec3(-10.0, 0.0, -10.0),\n        2\n    ),\n    Triangle(\n        vec3(-10.0, 20.0, 10.0),\n        vec3(10.0, 20.0, 10.0),\n        vec3(10.0, 0.0, 10.0),\n        1\n    ),\n    Triangle(\n        vec3(10.0, 0.0, 10.0),\n        vec3(-10.0, 0.0, 10.0),\n        vec3(-10.0, 20.0, 10.0),\n        1\n    ),\n    Triangle(\n        vec3(10.0, 20.0, 10.0),\n        vec3(10.0, 20.0, -10.0),\n        vec3(10.0, 0.0, 10.0),\n        0\n    ),\n    Triangle(\n        vec3(10.0, 0.0, 10.0),\n        vec3(10.0, 20.0, -10.0),\n        vec3(10.0, 0.0, -10.0),\n        0\n    ),\n    Triangle(\n        vec3(-10.0, 20.0, 10.0),\n        vec3(-10.0, 0.0, 10.0),\n        vec3(-10.0, 20.0, -10.0),\n        0\n    ),\n    Triangle(\n        vec3(-10.0, 0.0, 10.0),\n        vec3(-10.0, 0.0, -10.0),\n        vec3(-10.0, 20.0, -10.0),\n        0\n    ),\n    Triangle(\n        vec3(5.0, 19.5, 5.0),\n        vec3(-5.0, 19.5, 5.0),\n        vec3(5.0, 19.5, -5.0),\n        3\n    ),\n    Triangle(\n        vec3(-5.0, 19.5, -5.0),\n        vec3(5.0, 19.5, -5.0),\n        vec3(-5.0, 19.5, 5.0),\n        3\n    )\n);\nMaterial materials[4] = Material[4](\n    Material(vec3(1.0, 1.0, 1.0), 0.0, false, false, 0., 1.45),\n    Material(vec3(0.0, 1.0, 0.0), 0.0, false, false, 0., 1.45),\n    Material(vec3(1.0, 0.0, 0.0), 0.0, false, false, 0., 1.45),\n    Material(vec3(1.0, 1.0, 1.0), 0.0, false, true, 20., 1.45)\n);\nbool intersectTriangle(Ray ray, int triangleID, inout float t, inout float u, inout float v) {\n    Triangle triangle = triangles[triangleID];\n    vec3 edge1 = triangle.vertex1 - triangle.vertex0;\n    vec3 edge2 = triangle.vertex2 - triangle.vertex0;\n    vec3 pvec = cross(ray.direction, edge2);\n    float det = dot(edge1, pvec);\n    if (det < EPSILON)\n        return false;\n    float inv_det = 1.0 / det;\n    vec3 tvec = ray.origin - triangle.vertex0;\n    u = dot(tvec, pvec) * inv_det;\n    if (u < 0.0 || u > 1.0)\n        return false;\n    vec3 qvec = cross(tvec, edge1);\n    v = dot(ray.direction, qvec) * inv_det;\n    if (v < 0.0 || u + v > 1.0)\n        return false;\n    t = dot(edge2, qvec) * inv_det;\n    return true;\n}\nHitInfo trace(Ray ray) {\n    HitInfo rayHit = HitInfo(vec3(0.), ray.direction, vec3(0.), INFINITY, 0);\n    for (int i = 0; i < numTriangles; i++) {\n        float t, u, v;\n        if (intersectTriangle(ray, i, t, u, v)) {\n            if (t > 0.0 && t < rayHit.distance) {\n                rayHit.pos = ray.origin + ray.direction * t;\n                rayHit.normal = normalize(cross(triangles[i].vertex1 - triangles[i].vertex0, triangles[i].vertex2 - triangles[i].vertex0));\n                rayHit.distance = t;\n                rayHit.materialID = triangles[i].materialID;\n            }\n        }\n    }\n    return rayHit;\n}\nvec3 shade(inout Ray ray, HitInfo hitInfo) {\n    vec3 pos = hitInfo.pos;\n    vec3 dir = normalize(hitInfo.direction);\n    vec3 normal = normalize(hitInfo.normal);\n    if (hitInfo.distance < INFINITY) {\n        Material material = materials[hitInfo.materialID];\n        float ior = material.ior;\n        float f0 = pow((ior - 1.0), 2.0) / pow((ior + 1.0), 2.0);\n        float fresnel = f0 + (1.0 - f0) * pow((1.0 - dot(-dir, normal)), 5.0);\n        \n        vec3 diffuse = material.color;\n        ray.origin = pos + normal * 0.001;\n        vec3 reflectionAngle = reflect(ray.direction, normal);\n        float alpha = smoothnessToPhongAlpha(material.smoothness);\n        vec3 rand = randPointOnSphere(dir.xy / iResolution.xy);\n        ray.direction = rand * sign(dot(normal, rand));\n        vec3 specular = vec3(1.0) * (alpha + 2.0) * pow(sdot(ray.direction, reflectionAngle), alpha);\n        if (material.emission) {\n            ray.energy *= material.intensity;\n            return material.color;\n        }\n        if (material.metallic) {\n            ray.energy *= specular;\n            return vec3(0.0);\n        }\n        ray.energy *= mix(diffuse, specular, fresnel);\n        return vec3(0.0);\n    } else {\n        ray.energy *= 0.0;\n        return vec3(0.0);\n    }\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    _Pixel = fragCoord;\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 translatedUV = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    translatedUV /= 1.2;\n    \n    vec4 data = texture(iChannel0, uv);\n    if (iMouse.z > 0.0) data = vec4(0.0);\n    \n    vec3 camUp = vec3(0, 1, 0);\n\tvec3 camLookat = vec3(0, 10, 0);\n\n    float mx = -iMouse.x / iResolution.x * PI * 2.0 - 0.7;\n\tfloat my = -iMouse.y / iResolution.y * 1.45 + 1.55;\n\tvec3 camPos = vec3(cos(my) * cos(mx), sin(my), cos(my) * sin(mx)) * (35.0);\n\n    if ((dot(iMouse.xy, vec2(1.0)) <= 8.0)) camPos = vec3(12.0, 5.0, 6.0);\n\n\tvec3 camVec=normalize(camLookat - camPos);\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\n\tvec3 upNorm=cross(camVec, sideNorm);\n\tvec3 worldFacing=(camPos + camVec);\n\tvec3 worldPix = worldFacing + translatedUV.x * sideNorm * (iResolution.x/iResolution.y) + translatedUV.y * upNorm;\n\tvec3 rayVec = normalize(worldPix - camPos);\n    \n    float aspectRatio = iResolution.y / iResolution.x;\n    for (int i = 0; i < NUM_SAMPLES; i++) {\n        float offset = rand2(vec2(float(i) + iTime, float(i) * iTime)) / iResolution.x;\n        vec3 rayDirection = rayVec + offset;\n        rayDirection = normalize(rayDirection);\n        vec3 color;\n        Ray ray = Ray(camPos, rayDirection, vec3(1.0, 1.0, 1.0));\n        for (int j = 0; j < NUM_BOUNCES; j++) {\n            HitInfo tracedRay = trace(ray);\n            color += ray.energy * shade(ray, tracedRay);\n            if (ray.energy == vec3(0.0))\n                break;\n        }\n        data += vec4(color, 1.0);\n    }\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}