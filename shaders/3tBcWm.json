{
    "Shader": {
        "info": {
            "date": "1594478575",
            "description": "my qualifier round for the live code compo at solskogen 2020, ported to shadertoy. coded in 15 minutes live <:\nwatch the replay here: https://www.youtube.com/watch?v=5rjNcG7ioaU",
            "flags": 64,
            "hasliked": 0,
            "id": "3tBcWm",
            "likes": 30,
            "name": "Music Cave",
            "published": 3,
            "tags": [
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 710
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax,p)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat edges;\nfloat comp(vec3 p) {\n  vec3 s = sin(p)*sin(p);\n  edges = max(max(edges,s.x),max(s.z,s.y));\n  p = asin(sin(p));\n  return dot(p,normalize(vec3(1)));\n}\n\nfloat stage;\nfloat cave;\nfloat pillars;\nfloat scene(vec3 p) {\n  edges = 0.;\n  float d1 = comp(erot(p,normalize(vec3(3,2,1)),0.5)+1.);\n  float d2 = comp(erot(p,normalize(vec3(2,1,3)),0.6)+2.);\n  float d3 = comp(erot(p,normalize(vec3(1,3,2)),0.7)+3.+iTime*mod(stage,2.));\n  cave = (d1+d2+d3)/3. - length(p.zy*vec2(1,.2))/3. + 2.;\n  pillars = length(asin(sin(p.xy/3.+2.))*3.)-.2 - pow(texture(iChannel0,vec2(abs(p.z)/400.,0)).r,4.)/2. - p.z*p.z/100.;\n  return min(cave,pillars);\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.01);\n  return normalize(scene(p) - vec3( scene(k[0]),scene(k[1]),scene(k[2]) ));\n}\n\n//hello world\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\n  float t = iTime/60.*125.;\n  stage = floor(t/4.);\n  t += mod(stage,100.)*34.23;\n  vec3 cam = normalize(vec3(1.2+sin(stage),uv));\n  vec3 init= vec3(-4,0,0);\n  cam = erot(cam,vec3(1,0,0),t/6.*sign(cos(stage*32.3)));\n  if(cos(stage*7.)<0.)cam=cam.zxy;\n  init.x += mod(t,100.)*3.*sign(cos(stage*10.3));\n  vec3 p =init;\n  bool hit = false;\n  float dist;\n  float glow = 0.;\n  for (int i = 0; i < 150 && !hit ; i ++) {\n    dist = scene(p);\n    hit = dist*dist < 1e-6;\n    glow += smoothstep(.99,1.,edges)/(1.+abs(cave)*200.)*pow(abs(sin(p.x/40.+iTime)),20.)/2.;\n    glow += pow(texture(iChannel0,vec2(abs(p.z)/20.,0)).r,4.)/(1.+abs(pillars)*100.)/2.;\n    p+=cam*dist;\n  }\n  bool pl = pillars==dist;\n  float ms = step(0.999,edges);\n  float fog = smoothstep(80.,0.,distance(p,init));\n#define AO(p,n,t) smoothstep(-t,t,scene(p+n*t))\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  float ao = AO(p,n,1.)*AO(p,n,.5)*AO(p,n,.1);\n  float sss = AO(p,vec3(0.7),1.);\n  float spec = length(sin(r.xy*3.)*.4+.6)/sqrt(2.);\n  vec3 matcol = pl ? vec3 (0.9,0.1,0.05) : vec3(0.8);\n  vec3 col = mix(spec,sss,.5)*matcol;\n  if(!pl)col *= 1.-ms;\n  col += pow(spec,10.);\n  fragColor.xyz = sqrt((hit ? col*fog*ao : vec3(0.03)) + glow*glow + glow*vec3(0.5,0.7,1));\n  fragColor *= 1.-dot(uv,uv)*.7;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23306,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/anamanaguchi/kei-feat-pochi"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}