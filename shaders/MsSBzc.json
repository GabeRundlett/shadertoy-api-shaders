{
    "Shader": {
        "info": {
            "date": "1501435994",
            "description": "The color output of the default shader is packed into 32 bits in an imitation of R11F_G11F_B10F format and then unpacked.  Columns marked in red are passed from a single channel of Buf A in compressed form.  This does not work on some systems.",
            "flags": 32,
            "hasliked": 0,
            "id": "MsSBzc",
            "likes": 5,
            "name": "Color packing/unpacking test",
            "published": 3,
            "tags": [
                "colorformat"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 644
        },
        "renderpass": [
            {
                "code": "vec3 f32_to_r11g11b10 (float enc) {\n  const uvec3 shifts = uvec3( 0,11,22);\n  const uvec3 bits   = uvec3(11,11,10);\n  const uvec3 masks = ((uvec3(1u)<<bits)-1u);\n  return vec3( (uvec3(floatBitsToUint(enc)) >> shifts) & masks ) / vec3(masks);\n}\n\nfloat r11g11b10_to_f32 (vec3 col) {\n  col = clamp(col, 0., 1.);\n  const uvec3 shifts = uvec3( 0,11,22);\n  const uvec3 bits   = uvec3(11,11,10);\n  const uvec3 masks = ((uvec3(1u)<<bits)-1u);\n  uvec3 uints = uvec3( col * vec3(masks) );\n  uvec3 s = ( uints & masks ) << shifts;\n  return uintBitsToFloat( s.r | s.g | s.b );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.);\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 color = vec3(uv,0.5+0.5*sin(iTime));\n\n    float packed = r11g11b10_to_f32(color);\n    if (fract(fragCoord.x/64.)<0.5) {\n        if (fragCoord.y < 16.) {\n            fragColor.rgb = vec3(1.,0.,0.);\n            return;\n        }\n        packed = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n    }\n    fragColor.rgb = f32_to_r11g11b10(packed);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 f32_to_r11g11b10 (float enc) {\n  const uvec3 shifts = uvec3( 0,11,22);\n  const uvec3 bits   = uvec3(11,11,10);\n  const uvec3 masks = ((uvec3(1u)<<bits)-1u);\n  return vec3( (uvec3(floatBitsToUint(enc)) >> shifts) & masks ) / vec3(masks);\n}\n\nfloat r11g11b10_to_f32 (vec3 col) {\n  col = clamp(col, 0., 1.);\n  const uvec3 shifts = uvec3( 0,11,22);\n  const uvec3 bits   = uvec3(11,11,10);\n  const uvec3 masks = ((uvec3(1u)<<bits)-1u);\n  uvec3 uints = uvec3( col * vec3(masks) );\n  uvec3 s = ( uints & masks ) << shifts;\n  return uintBitsToFloat( s.r | s.g | s.b );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  fragColor = vec4(0.);\n    \n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec3 color = vec3(uv,0.5+0.5*sin(iTime));\n    \n  float packed = r11g11b10_to_f32(color);\n  fragColor.x = packed;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}