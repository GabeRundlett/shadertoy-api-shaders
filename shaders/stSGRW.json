{
    "Shader": {
        "info": {
            "date": "1623435600",
            "description": "potatesteraa",
            "flags": 32,
            "hasliked": 0,
            "id": "stSGRW",
            "likes": 47,
            "name": "Day 540",
            "published": 3,
            "tags": [
                "design",
                "poster",
                "mdtmjvm",
                "acidgraphics"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 688
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 539\" by jeyko. https://shadertoy.com/view/slSGz1\n// 2021-06-11 08:12:26\n\nfloat sdBox(vec2 c, vec2 s){\n    c = abs(c) - s; return max(c.x,c.y);\n}\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\nfloat noise(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    p.xy *= rot(1.4);\n    p.x *= 3.;\n    for(float i = 0.; i < 6.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.7;\n        p *= 1.5;\n    }\n    \n    n = sin(n*2.);\n    return n;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    fragCoord += 650.*noise(vec3(uv*0.5,5.))/iResolution.xy;\n    col = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    float no = noise(vec3(uv*2.,35.));\n    col = mix(col,vec3(0),smoothstep(0.,0.5,max(noise(vec3(uv*2.2 + 0.1,35.)) - 0.5,0.))*0.4);\n    \n    col = mix(col,vec3(1),smoothstep(0.,5.,max(no - 0.5,0.))*.05);\n    \n    //col += min(no - 0.5,0.)*0.02;\n    \n    float n1d = texelFetch(iChannel2,ivec2(mod(fragCoord + vec2(float(iFrame)*0.,0.),256.)),0).x*0.5;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(fragCoord + n1d*200. ,256.)),0).xyz*0.6;\n    \n    \n    //C = smoothstep(0.,1.,C);z\n    \n    //col.xyz = pow(max(col.xyz,0.), vec3(0.55) + n*0.1);\n    \n    \n    \n    col = pow(max(col,0.),vec3(0.4545));\n\n    col.xyz += smoothstep(1.,0.,length(col))*n*0.15;\n    \n    col.xyz -= smoothstep(0.,1.,length(col))*n*0.05;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi acos(-1.)\n\n        #define xor(a,b,c) min(max(a,-(b) + c),max(b,-(a)))\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdBox(vec2 c, vec2 s){\n    c = abs(c) - s; return max(c.x,c.y);\n}\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n\nvec4 n14(float f){ return texture(iChannel0,vec2(mod(floor(f),256.),floor(f/256.))/256.); }\n\n\nfloat eass(float p, float g) {\n    float s = p*0.45;\n    for(float i = 0.; i < g; i++){\n    \ts = smoothstep(0.,1.,s);\n    }\n    return s;\n}\n\nfloat text(vec2 p, float[9] chars, float spacing, float s, bool isAbs, float absWidth, float opacity, bool scrobble, float offs) {\n\tp *= s;  \n    \n    p.x *= 1. - spacing;\n    vec2 id = floor(p*8.*2.);\n    p = mod(p,1./16.);\n    p.x = p.x/(1. - spacing) + 1./16./8.;\n    float char = chars[int(id.x) ];\n    char -= 32. ;\n    if(scrobble)\n        char += floor(15. * n14(id.x + (iTime + sin(id.x))*24.).y*pow(abs(sin(iTime + id.x*0.2)),14.) ) ;\n    \n    if(scrobble)\n        char += 0.*floor(15. * n14(id.x + (iTime + sin(id.x))*24.).y * (2. - 1.)* (1. - eass((iTime - + id.x*1./16. - 3.)*1.,3.)) ) ;\n    \n    float t;\n    if(abs(id.y) < 1. && id.x >= 0. && id.x < 9.  && char < 200.){\n        vec4 letter = texture(iChannel3,p + vec2(mod(char,16.),-floor(char/16.) )/16.);\n        t = letter.w - opacity;\n        if(abs(p.x-1./16./2.)>1./16./2.)\n            t = 10e4;\n    \n        t /= s*10.1;\n    } else {\n        t = 10e5;\n    \n\t }\n    if (isAbs)\n        t = abs(t) - absWidth;\n    return t;\n}\n\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\nfloat noise(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,-(iTime + sin(iTime))*0.2);\n    for(float i = 0.; i < 6.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.+iTime*1.5) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.7;\n        p *= 1.5;\n    }\n    \n    //n = sin(n*1.);\n    return n;\n}\n\n\nfloat noiseGrid(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    for(float i = 0.; i <2.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.5;\n        p *= 1.5;\n    }\n    \n    //n = sin(n*1.);\n    return n;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.8,0.5,0.4)*0.;\n    vec3 baseCol = col;\n    vec3 c = vec3(0.,0.511,0.2)*0.7;\n    \n\n    uv.x -= 0.725 + 0.04;\n\n    \n    {\n        // grid\n        vec2 p = uv;\n        \n        p.y -= 0.08;\n        p.x += 0.35;\n        \n        float bdb = sdBox(p,vec2(0.35));\n        \n        p *= rot(sin(length(p)*15. + iTime)*0.2*smoothstep(0.,-0.4,bdb));\n        \n        float w = 0.001;\n        float d = 10e5;\n        \n        //bd = bd + smoothstep(0.001,0.,bd)*smoothstep(-0.2,0.2,p.x)*texture(iChannel0,p).x;\n        \n        \n        float biters = 10. + floor(10.*( 1.*max(sin(iTime*1.),-0.5)));\n        float lastb;\n        for (float i = 0.; i < biters; i ++){\n            float b = sdBox(p,vec2(mod(exp(-i/10.),1.)*0.35));\n            if(i == biters - 1.)\n                lastb = b;\n            d = min( d,abs(b));\n        }\n        \n        float itersLines = 10.;\n        for (float i = 0.; i < itersLines; i ++){\n            vec2 q = p*rot(i/itersLines*pi + 1./itersLines*pi/2.);\n            d = min( d,abs(q.x));\n        }\n        \n        \n        \n        float outBox = smoothstep(fwidth(uv.y),0.,bdb);\n        float inBox = smoothstep(fwidth(uv.y),0.,-lastb);\n        \n        col = mix(col,c,inBox*outBox*smoothstep(fwidth(uv.y),0.,d - w));\n        \n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,abs(bdb) - w));\n            \n        \n        //d =  abs(bd);\n        \n        //col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n        \n    \n    }\n    \n    {\n        // MEATBALLS\n        float d = 10e5;\n        vec2 p = uv;\n        \n        p.y -= 0.08;\n        p.x += 0.35;\n        for(float i = 0.; i <6.; i++){\n            float m = i + iTime;\n            d = opSmoothUnion( d, length(p - vec2(cos(m*cos(i)),sin(m))*0.2) - 0.05*(1. + 0.5*sin(m*1.5)), 0.1);\n        \n        }\n        float ballFill = smoothstep(fwidth(d),0.,d);\n        col = mix(col,baseCol,ballFill);\n        col = mix(col,c,smoothstep(fwidth(d),0.,abs(d)));\n        col = mix(col,c,ballFill*smoothstep(-0.03,0.,d)*texture(iChannel0,p*0.3).x*2.*smoothstep(0.0,0.01,dot(vec2(-1),vec2(dFdx(d),dFdy(d)))));\n        \n        \n    }\n    \n    \n    \n    {\n        // GRAD LINE\n        vec2 p = uv;\n        \n        p.y += 0.38;\n        p.x += 0.35;\n        \n        float bd = sdBox(p - vec2(0,0.06),vec2(0.35,0.02));\n        float bdb = sdBox(p - vec2(0.0,-0.001),vec2(0.35,0.005));\n        \n        \n        float d = abs(bd);\n        \n        //bd = bd + smoothstep(0.001,0.,bd)*smoothstep(-0.2,0.2,p.x)*texture(iChannel0,p).x;\n        \n        d = bd;\n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,d)*smoothstep(0.0,0.24 + sin(iTime)*0.1,smoothstep(-0.3,2.,p.x)*texture(iChannel0,p*0.3).x*2.));\n        d =  abs(bd);\n        \n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,bdb));\n        \n        \n        \n        // botline\n    \n    }\n    uv.x += 0.725 + 0.85;\n\n    \n    {\n        // swirly\n        \n        vec2 p = uv;\n        float sc = 2.5;\n        \n        p.x -= 0.66;\n        p.y -= 0.35;\n        p *= sc;\n        float cd = length(p) - 0.2;\n        cd = sdBox(p,vec2(0.4,0.2));\n        p *= rot(sin((length(p)*1.)*6. + iTime + sin(iTime))*2.);\n        p = vec2(atan(p.x,p.y)/pi,length(p));\n        float fw = fwidth(p.x)/2.;\n        if(cd > 0.0)\n            fw = 0.00;\n        p.x = pmod(p.x,1./3.);\n        \n        float d = cd;\n        d = max(d,-abs(p.x) + 0.1);\n        d /= sc;\n       \n        //float fw = mix(fwidth(d),fwidth(uv.y)*2.,1.);\n        \n        //d = min(d,abs(cd - 0.006 ));\n        col = mix(col,c,smoothstep(fw,0.,(d)));\n        col = mix(col,c,smoothstep(fwidth(cd),0.,abs(cd) - 0.00));\n    \n    }\n    \n    {\n        // SINES\n        float w = 0.001;\n        vec2 p = uv;\n        p -= vec2(0.25,0.23);\n        \n        float bd = sdBox(p,vec2(0.2));\n        bd = mix(bd,length(p) - 0.2,0.5 + 0.5*sin((iTime*pi+sin(iTime*pi))/pi));\n        float outBox = smoothstep(fwidth(uv.y),0.,bd);\n        \n        float d = 10e5;\n        \n        float iters = 20.;\n        for(float i = 0.; i < iters; i++){\n            vec2 q = p + vec2(0.,i/iters*0.45 -0.2);\n            q.y += sin(q.x*4.2 + i*0.2 + iTime + sin(iTime))*0.04*cos(q.x*20. + sin(i + iTime + sin(iTime))*0.7 );\n            d = q.y - w;\n            \n            col = mix(col,c,outBox*smoothstep(fwidth(d),0.,abs(d)-w));\n        \n        }\n        \n        \n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,abs(bd) - w));\n            \n        \n    }\n    {\n        // lines\n        float md = 0.05;\n        vec2 p = uv;\n        p += vec2(-0.76,0.15);\n        \n        p *= rot(0.5*pi);\n        p.x -= p.y*0.;\n        \n        float id = floor(p.x/md);\n        \n        p.x = pmod(p.x,md);\n        \n        float d = abs(p.x) - md*0.4*(sin(id + iTime)*0.5 + 0.5);\n        d = max(d,abs(p.y) -0.02);\n        \n        if(abs(id) < 0.)\n            col = mix(col,c,smoothstep(fwidth(uv.y),0.,abs(d)));\n    }\n    {\n        // CIRCS\n        vec2 p = uv;\n        p.x -= 0.15;\n        p.y += 0.05;\n        float d = 10e5;\n        for(float i = 8.; i>  0.; i--){\n            vec2 q = p + vec2(0.,i/5./5.);\n            q.y *= 3.;\n            d = min(d,(length(q) - 0.2*i/25.*(0.5 + 0.5*sin(iTime + i*1.))) - 0.042);\n            \n        }\n        //col = mix(col,c,smoothstep(fwidth(d),0.,(d) - 0.001));\n        \n        \n    }\n    {\n        // smiley\n        vec2 p = uv;\n        p -= vec2(0.7 + sin(iTime)*0.04,-0.24);\n        p *= 1.5 + sin(iTime + sin(iTime))*0.1;\n        p *= rot(sin(iTime + sin(iTime))*0.2);\n        p -= noiseGrid(vec3(p*12.,1. + iTime*1.))*0.01;\n        \n        float d = length(p) - 0.2;\n        \n        \n        \n        d = max(d, -length(vec2(abs(p.x),p.y)*vec2(1. ,0.4) - vec2(0.05,0.01)) + 0.03);\n        p *= rot(1.*pi);\n        \n        float smile = abs(length(p) - 0.16) - 0.014;\n        vec2 pp = vec2(atan(p.x,p.y)/pi,length(p));\n        \n        float smw = 0.4 + sin(iTime)*0.05;\n        smile = max(smile,abs(pp.x) - smw);\n        \n        smile = min(smile,sdBox(abs(pp) - vec2(smw,0.15 + 0.0125),vec2(0.03,0.02)));\n        d = max(d, - smile);\n        \n        col = mix(col,c,smoothstep(fwidth(d),0.,(d)));\n    }\n    {\n        // TEXT\n        \n        float sc = 2.25;\n        vec2 p = uv - vec2(0.12,-0.2);\n        \n        float b = sdBox(p - vec2(0.21,-0.03),vec2(0.20,0.07));\n        p.x *= 1.;\n        p.y *= 0.95;\n        p *= sc;\n        \n        //float iters = 5.*(sin(iTime*4.)*0.5 + 0.5);\n        float iters = 6.;\n        float lt = 10e5;\n        for(float i = 0.; i < iters; i ++){\n            p.y -= 0.04;\n            float t;\n            \n            //t = text(p, float[8](135.,130.,121.,119.,120.,132.,117.,130.), -0.5 , 0.4 , true, 0., 0.5 , false, i);\n            t = text(p, float[9](131.,120.,113.,116.,117.,130.,114.,127.,121.), -0.5 , 0.4 , true, 0., 0.5 + i/iters*0.1 , false, i);\n            if(i==0.)\n                t = text(p, float[9](131.,120.,113.,116.,117.,130.,114.,127.,121.), -0.5 , 0.4 , false, 0., 0.5 , false, i);\n            \n            t -= 0.004;\n            t /= sc*1.;\n            \n            lt = min(lt,t);\n            \n        }\n        //lt = max(b,-lt);\n        \n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,lt));\n    }\n    {\n        // TEXTB\n        \n        float sc = 3.5;\n        vec2 p = uv - vec2(0.51,0.198);\n        \n        float b = sdBox(p - vec2(0.1675,-0.11),vec2(0.16));\n        p *= sc;\n        float t = 10e5;\n        float iters = 7.;\n        for(float i = 0.; i < iters; i ++){\n            vec2 a = vec2(0.,0.);\n            //if(sin(i))\n            a.x += max(sin(i + 2.6) - 0.5,0.)*1.;\n            vec2 b = vec2(a.x + 0.4 + sin(i + cos(i))*0.1,a.y + 0.);\n            t = min(t, sdSegment(p,a,b) - 0.04);\n            \n            p.y += 0.12;\n            \n        }\n        //lt = max(b,-lt);\n        \n        col = mix(col,c,smoothstep(fwidth(t),0.,t));\n    }\n    {\n        // dots\n        \n        \n        float sc = 1.9;\n        vec2 p = uv - vec2(0.03,-0.33);\n        \n        p *= sc;\n        float t = 10e5;\n        float iters = 7.;\n        for(float i = 0.; i < iters; i ++){\n            vec2 a = vec2(0.,0.6);\n            //if(sin(i))\n            a.y += max(sin(i + 2.6 + iTime) - 0.5,0.)*0.1;\n            vec2 b = vec2(a.x,a.y + 0.);\n            t = xor(t, abs(sdSegment(p,a,b) - 0.01*max(sin(i + iTime*2.),0.4)),0.05*(0.5 + 0.5*sin(i + iTime*5. + sin(iTime + i))) );\n            \n            p.y += 0.12;\n            \n        }\n        //t = xor(-t,-abs(p.x) - 0.02,-0.01);\n        //lt = max(b,-lt);\n        t /= sc;\n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,t));\n    }\n     {\n        // function\n        \n        vec2 p = uv;\n        float sc = 1.;\n        \n        p.x -= 0.33;\n        p.y += 0.3;\n        p *= sc;\n        float cd = length(p) - 0.2;\n        cd = sdBox(p,vec2(0.2,0.1));\n        vec2 q = p;\n        \n        q.x += iTime*0.1;\n        p = q;\n        q = pmod(q + 0.1/6.,0.1/3.);\n        \n        float d = abs(q.x);\n        d = min(d,abs(q.y));\n        \n        \n        //float fn = (p.y+ sin(p.x*10. + asin(sin(p.x*4. + cos(p.x)))*5.)*0.1) ;\n        //float fn = (p.y+ asin(sin(p.x*35. + asin(sin(p.x*10.)*cos(p.x)*2.)))*0.05) ;\n        float fn = (p.y+ asin(sin(p.x*35. + asin(sin(p.x*45.))))*0.05) ;\n        \n        col = mix(col,c,smoothstep(0.001,0.00,cd)*smoothstep(fwidth(fn),0.,abs(fn)-0.004));\n        \n        \n        d = max(d,cd);\n        d /= sc;\n       \n        //float fw = mix(fwidth(d),fwidth(uv.y)*2.,1.);\n        \n        //d = min(d,abs(cd - 0.006 ));\n        d = min(d,abs(cd));\n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,(d)));\n        \n    }\n\n\n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}