{
    "Shader": {
        "info": {
            "date": "1669134948",
            "description": "kinda looks like a forcefield (fork is just an earlier version)",
            "flags": 0,
            "hasliked": 0,
            "id": "DslSRS",
            "likes": 10,
            "name": "Copperfield",
            "published": 3,
            "tags": [
                "fractal",
                "stuff",
                "outline",
                "cool",
                "thing"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define piston(p) min(length(p.xy), min(mlength(p.xz), length(p.yz)))\n\n//nabbed from here: (i dont get it but it looks cool)\n//https://www.shadertoy.com/view/7stGWj\n//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x){\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvec3 rayOri() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(0, 6. * cos(0.25 * iTime), 10);\n    ro.xz *= rot(pi/12. * thc(2., 0.5 * iTime));\n    return ro;\n}\n\nfloat dist(vec3 p) {\n    // rotate space + camera \n    // (rotating space changes reflections, rotating camera doesn't)\n    p.xz *= rot(pi/12. * thc(2., 0.5 * iTime));\n    \n    // distance to 2 planes\n    float pd = 2.5 * p.z + 7. + 0.5 - abs(p.x);  \n    \n    // fractal (i dont want to comment this =])\n    float d = MAX_DIST;  \n    float osc = 0.5 + 0.25 * cos(pi * exp(-length(p)) - iTime);\n    float m = 1. - osc;\n    float th = tanh(0.04 * iTime);\n    for (float i = 0.; i < 4.; i++) {\n        float io = pi * i / 4.;\n        p = sabs(p) - sqrt(2.) * m;\n        p.xy *= rot(io + 0.5 * iTime);\n        p.yz *= rot(io + 0.25 * iTime);\n        d = smin(d, \n                 smax(piston(p),\n                      length(p) - (1. + th * ths(2., io + iTime)) * m, \n                      0.02) - 0.75 * m, \n                 0.1);\n        m *= osc;\n    }\n    return min(pd, d);\n}\n\nfloat march(vec3 ro, vec3 rd, float z) {\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = dist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }    \n    return min(dO, MAX_DIST);\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = dist(p);\n    vec2 e = vec2(.001, 0);    \n    vec3 n = d - vec3(\n        dist(p-e.xyy),\n        dist(p-e.yxy),\n        dist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 rayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\t \n    vec3  ro = rayOri();  \n    float th = tanh(0.1 * iTime);\n    vec3  rd = rayDir(uv, ro, vec3(0), 0.75 + 1.25 * th);\n    \n    vec3 col = vec3(0);\n      \n    float d = march(ro, rd, 1.);\n    vec3  p = ro + rd * d;\n    \n    if(d<MAX_DIST) {        \n        vec3 n = normal(p);\n        vec3 r = reflect(rd, n);\n\n        vec3    ld = normalize(vec3(1,3,3));\n        float  dif = 0.5 + 0.5 * dot(n,  ld);\n        float spec = pow(dif, 32.);\n        \n        // specular and shadows (I think)\n        vec3   q = p + 2. * SURF_DIST * n;\n        float d2 = march(q, ld, 1.);\n             col = spec * vec3(clamp(0.15 * d2, 0., 1.));\n        \n        // 50.->150. determines thickness of blue outline (sort of)       \n        vec3  q2 = p + mix(50., 150., th) * SURF_DIST * r;\n        float d3 = march(q2, rd, 1.);\n        vec3  p2 = q2 + rd * d3;\n        \n        // triplanar texture map (makes it darker and redder)\n        vec3 c1 = texture(iChannel0, p2.xy).rgb;\n        vec3 c2 = texture(iChannel0, p2.yz).rgb;\n        vec3 c3 = texture(iChannel0, p2.zx).rgb;\n              n = abs(n);\n        vec3  c = n.z * c1 + n.x * c2 + n.y * c3;\n            col *= c;\n        \n        // cubemap reflections (looks okay without)\n        vec3 tx3 = texture(iChannel1, r).rgb;\n             col *= 2. * (1. + thc(4., pi * 1.1 + 4. * tx3)) * tx3;\n             col = clamp(col, 0., 1.);\n\n        // blue outline\n        col = mix(col, vec3(1.-c), clamp(0.25 * d3, 0., 1.));\n  \n        // fog\n        vec3 fogCol = mix(vec3(0), vec3(234,201,103)/255., 1.-th);\n        col = mix(col, fogCol, 1.-1./cosh(.06*length(p.xy)));\n        \n        // tonemapping (probably)\n        col = ACESFilm(col);\n    }\n\n    col = pow(col, vec3(1./2.6));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh2(a*cos(b))/tanh2(a)\n#define ths(a,b) tanh2(a*sin(b))/tanh2(a)\n#define sabs(x) sqrt(x*x+1e-3)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n// tanh approximation\n#define tanh2(a) clamp(a*(27.+a*a)/(27.+9.*a*a),-1.,1.) \n                 \n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}