{
    "Shader": {
        "info": {
            "date": "1485372129",
            "description": "Toying with my diffusion shader.\nI wanted to make something pretty and I'm not too displeased with what I got.\nThe system is very sensitive though and it is hard to tweak. For instance it does not diffuse in full screen on my machine.",
            "flags": 32,
            "hasliked": 0,
            "id": "XlySzt",
            "likes": 12,
            "name": "Radiant determination",
            "published": 3,
            "tags": [
                "2d",
                "noob",
                "diffusion"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 701
        },
        "renderpass": [
            {
                "code": "// Buf A is the outer diffusion\n// Buf B is the Heart\n// Buf C is a naive blur of A\n// Buf D is a naive blur of B\n//\n// Buf A and B could be fused to reduce the number of texture call\n//\n// the shader missbehave when in fullscreen (and in preview mode), \n// I think this is because the diffusion rate should be relative to iResolution\n\n\n// funtion by iq\n// https://iquilezles.org/articles/palettes\n// cosine based palette, 4 vec3 params\nvec3 Palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 buffA = texture(iChannel0,uv);\n\tvec4 buffB = texture(iChannel1,uv);\n    \n    float fromA = buffA.g/buffA.r;\n    float fromB = buffB.g/buffB.r;\n    \n    vec3 compB = Palette(1.- fromB, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n    vec3 compA = Palette(1.- fromA,  vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20));\n    \n    vec3 result = (compA * fromA+compB * fromB) *2.;\n\tfragColor =  vec4(result,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sample(x,y) texture(iChannel0, (uv + vec2(x,y) / iResolution.xy))\n\nvec2 difRate = vec2(1.,.25);\n\n#define FEED .0367;\n#define KILL .0649;\n\nfloat zoom = .9997;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv =( uv - vec2(.5)) * zoom + vec2(.5);\n    vec4 current = sample(0.,0.);\n    \n    vec4 cumul = current * -1.;\n    \n    cumul += (   sample( 1., 0.) \n               + sample(-1., 0.) \n               + sample( 0., 1.) \n               + sample( 0.,-1.)\n             ) * .2;\n\n    cumul += (\n        sample( 1, 1) +\n        sample( 1,-1) +\n        sample(-1, 1) +\n        sample(-1,-1) \n       )*.05;\n    \n    \n    float feed = FEED;\n    float kill = KILL;\n    \n    float dist = distance(uv,vec2(.5)) - .34;\n    kill = kill + step(0.,dist) * dist*.25;\n    \n    vec4 lap =  cumul;\n    float newR = current.r + (difRate.r * lap.r - current.r * current.g * current.g + feed * (1. - current.r));\n    float newG = current.g + (difRate.g * lap.g + current.r * current.g * current.g - (kill + feed) * current.g);\n    \n    newR = clamp(newR,0.,1.);\n    newG = clamp(newG,0.,1.);\n    \n    current = vec4(newR,newG,0.,1.);\n    \n    \n    uv = (fragCoord / iResolution.y) -  vec2(iResolution.x /iResolution.y * .5,.5);\n    float f = step(length(uv),.23) - step(length(uv),.22);\n    f *=  .25 + fract(atan(uv.y,uv.x)*.5 + iTime*.5) * .25 * sin(iTime*.1);\n    current = max(current, vec4(0.,1.,0.,1.) * f);\n  \n    fragColor = current;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define sample(x,y) texture(iChannel0, (uv + vec2(x,y) / iResolution.xy))\n\nvec2 difRate = vec2(1.,.25);\n\n#define FEED .0377;\n#define KILL .0609;\n\n\nfloat zoom = 1.0008;\n\nfloat Heart(vec2 pos)\n{\n    pos.y += .04;\n    pos *= 1.5;\n    \n    pos.x = abs(pos.x);\n    pos.y *= -.99;\n    pos.y += pos.x * .75;\n    return length(pos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv =( uv - vec2(.5)) * zoom + vec2(.5);\n    vec4 current = sample(0.,0.);\n    \n    vec4 cumul = current * -1.;\n    \n    cumul += (   sample( 1., 0.) \n               + sample(-1., 0.) \n               + sample( 0., 1.) \n               + sample( 0.,-1.)\n             ) * .2;\n\n    cumul += (\n        sample( 1, 1) +\n        sample( 1,-1) +\n        sample(-1, 1) +\n        sample(-1,-1) \n       )*.05;\n    \n    \n    float feed = FEED;\n    float kill = KILL;\n    \n    \n    vec4 lap =  cumul;\n    float newR = current.r + (difRate.r * lap.r - current.r * current.g * current.g + feed * (1. - current.r));\n    float newG = current.g + (difRate.g * lap.g + current.r * current.g * current.g - (kill + feed) * current.g);\n    \n    newR = clamp(newR,0.,1.);\n    newG = clamp(newG,0.,1.);\n    \n    current = vec4(newR,newG,0.,1.);\n    \n    \n    \n    uv = vec2(fragCoord.x - iResolution.x / 2.,fragCoord.y) / iResolution.y;\n    uv.y -=.5;\n    \n    float base = Heart(uv);\n    base = step(base,.25) * 1.- step(base,.23);\n    float heart = base * .25;\n    \n    base *= step( fract(atan(uv.y,abs(uv.x)) + iTime * .35) ,.5);\n    //base *= sin(iTime ) * .5 + .5;\n    heart += base * .75;\n    \n    heart *= .25;\n    \n    current = max(current,vec4(heart));\n    \n    \n    \n    fragColor = current;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define Sample(pos) texture(iChannel0,pos / iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord.xy;\n    \n    vec4 c = Sample(pos) * 2.;\n    c +=  Sample(pos + vec2( 1., 0.))\n        + Sample(pos + vec2(-1., 0.))\n        + Sample(pos + vec2( 0., 1.))\n        + Sample(pos + vec2( 0.,-1.))\n        ;\n    \n    fragColor = c / 6.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define Sample(pos) texture(iChannel0,pos / iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord.xy;\n    \n    vec4 c = Sample(pos) * 2.;\n    c +=  Sample(pos + vec2( 1., 0.))\n        + Sample(pos + vec2(-1., 0.))\n        + Sample(pos + vec2( 0., 1.))\n        + Sample(pos + vec2( 0.,-1.))\n        ;\n    \n    fragColor = c / 6.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}