{
    "Shader": {
        "info": {
            "date": "1552145019",
            "description": "4D hipercube projected into a 3D space and then projected into a plane.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXXDj",
            "likes": 10,
            "name": "4D Rotating Hipercube.",
            "published": 3,
            "tags": [
                "cube",
                "4d",
                "proyection",
                "hipercube"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "#define showpoints\n//#define sampleRotation\n\nvec2 project(vec3 point,vec3 focus){\n    return point.xy-point.z*(point.xy-focus.xy)/(point.z-focus.z)-focus.xy;\n}\nvec3 project(vec4 point,vec4 focus){\n    return point.xyz-point.w*(point.xyz-focus.xyz)/(point.w-focus.w)-focus.xyz;\n}\n\nfloat point(vec4 p,vec4 focus,vec2 uv){\n    vec2 w=project(project(p,focus),focus.xyz);\n\treturn 0.03/dot(uv-w,uv-w);\n}\nfloat line(vec4 p_,vec4 p2_,vec4 focus,vec2 uv){\n    vec2 p=project(project(p_,focus),focus.xyz);\n    vec2 p2=project(project(p2_,focus),focus.xyz);\n    vec2 n=uv-p;\n\tvec2 w=p2-p;\n\treturn smoothstep(30./iResolution.y,0.0,length(n-w*clamp(dot(n,w)/dot(w,w),0.,1.)));\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord ){\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y*10.;\n\to=vec4(0);\n    \n    vec4 eye=vec4(0,0,-30,-10);\n    \n    vec4 points[16];\n    points[0]=vec4(10,10,5,5);\n    points[1]=vec4(10,-10,5,5);\n    points[2]=vec4(-10,10,5,5);\n    points[3]=vec4(-10,-10,5,5);\n    points[4]=vec4(10,10,5,25);\n    points[5]=vec4(10,-10,5,25);\n    points[6]=vec4(-10,10,5,25);\n    points[7]=vec4(-10,-10,5,25);\n    \n    points[8]=vec4(10,10,25,5);\n    points[9]=vec4(10,-10,25,5);\n    points[10]=vec4(-10,10,25,5);\n    points[11]=vec4(-10,-10,25,5);\n    points[12]=vec4(10,10,25,25);\n    points[13]=vec4(10,-10,25,25);\n    points[14]=vec4(-10,10,25,25);\n    points[15]=vec4(-10,-10,25,25);\n    \n    vec4 center=vec4(0,0,15,15);\n    vec4 move=vec4(0,0,0,0);\n    for(int i=0;i<16;i++){\n        points[i]-=center;\n        #ifdef sampleRotation\n        points[i].wx*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        points[i].zx*=mat2(cos(0.6),sin(0.6),-sin(0.6),cos(0.6));\n        points[i].yz*=mat2(cos(0.35),sin(0.35),-sin(0.35),cos(0.35));\n        #else\n\t\tpoints[i].xy*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        points[i].xz*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        points[i].xw*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        points[i].yz*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        points[i].yw*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        points[i].zw*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        #endif\n        \n        points[i]+=center+move;\n    }\n    \n    for(int i=0;i<16;i++){\n        for(int u=0;u<16;u++){\n            if(i<=u)continue;\n        \tif(distance(points[i],points[u])<21.)o+=line(points[u],points[i],eye,uv);\n        }\n    }\n    \n    #ifdef showpoints\n    for(int u=0;u<16;u++){\n        o+=point(points[u],eye,uv);\n    }\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}