{
    "Shader": {
        "info": {
            "date": "1606913648",
            "description": "A repost of a previous shader to test anaglyph effect.\nA simple demoscenish styled twisted cube inspired by this wonderful demo \"Ion Traxx\" by MFX and Kewlers.\nhttps://www.youtube.com/watch?v=LOWZmOhz8wI",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyfDz",
            "likes": 8,
            "name": "Twist3000 anaglyph test",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "checkerboard",
                "twist"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n// Fork of \"Twist3000\" by z0rg. https://shadertoy.com/view/tddczf\n// 2020-12-02 12:26:20\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\n\nfloat lenny(vec2 p) { return abs(p.x)+abs(p.y); }\n\nvec3 getDir(vec3 fwd, vec2 uv)\n{\n    vec3 r = normalize(cross(normalize(fwd), vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(r, normalize(fwd)));\n    float fov = .8;\n    return uv.x*r+uv.y*u+fov*fwd;\n}\n\nvec2 add(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n    \treturn a;\n    return b;\n}\n\n// Credits to IQ\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 map(vec3 p)\n{\n    vec3 p2 = p-vec3(0.,1.,0.);\n    p2.xz *= r2d(sin(p.y+iTime));\n    vec2 box = vec2(sdBox(p2, vec3(1., 3., 1.)), 1.);\n\tvec2 ground = vec2(p.y, 0.); \n    return add(box, ground);\n}\n\n// Credits to IQ\nvec3 calcNormal( in vec3 p, in float t )\n{\n    float e = 0.001*t;\n\n    vec2 h = vec2(1.0,-1.0)*0.5773;\n    return normalize( h.xyy*map( p + h.xyy*e ).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e ).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e ).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e ).x );\n}\nvec3 rdr2(vec2 uv, vec3 ro, vec3 rd)\n{\n    vec3 grad = (1.-sat(abs(uv.x*1.)))*vec3(0.6, 0.87,1.).zxy;\n    vec3 col = grad*.5*(sin(iTime*.5)*.5+.5);\n    col += (1.-pow(sat(lenny(uv)-.2), .5))*.5;\n    \n    float bps = 1./2.2;\n    float beat = mod(iTime, bps)/bps;\n    \n    float beat2 = mod(iTime+1., bps)/bps;\n    \n\n    \n    float d = 0.01;\n    for (int i = 0; i < 128; ++i)\n    {\n        vec3 p = ro + rd * d;\n        vec2 res = map(p);\n        if (res.y > 0.5)\n        col += pow((1.-sat(res.x*.05)), 5.5)*.03*vec3(0.4,.57,1.);\n        if (res.x < 0.01 && d < 100.)\n        {\n            vec3 norm = calcNormal(p, d);\n            vec3 diff = vec3(0.);\n            vec3 spec = vec3(0.);//0.3, 0.7,1.);\n            if (res.y < 0.5)\n            {\n                float chkSz = 2.5;\n                float sharp = 50.;\n                float checkerBoard = mod(p.x*1., chkSz) - .5*chkSz;\n                checkerBoard = clamp(checkerBoard*sharp, -1.0, 1.0);\n                checkerBoard *= clamp((mod(p.z*1., chkSz) - .5*chkSz)*sharp, -1., 1.);\n                \n                diff = mix(vec3(0.),vec3(0.7,1.,0.), sat(checkerBoard*1.));\n                spec = vec3(1.,.1,0.1).zxy;\n            }\n            \n            spec = spec.zyx;\n            \n            \n            float lSpd = .5;\n            vec3 lPos = vec3(0.,1.,0.);\n            vec3 lDir = normalize(lPos-p);\n            col += vec3(.1); // Ambient\n            vec3 h = normalize(lDir+rd);\n            col += diff*sat(dot(norm, lDir)); // diffuse\n            col += spec*pow(sat(dot(norm,h)), 2.9); // spec\n            break;\n        }\n    \td += res.x*.5;\n    }\n    \n    \n    col += grad*.2;\n    col *= 1.-pow(sat(length(uv*.5)), .5);\n    \n    col += (1.-pow(sat(lenny(uv*.5)), .5))*.1*sat(d-10.);\n    col *= (1.-sat(beat2-.7))*vec3(1.)*(pow(sat(d/100.), .1));\n\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    float dist = 12.;// +1.5*beat;\n    float camT = iTime*.5;\n    \n    vec3 ro = vec3(dist*sin(camT),4.+sin(camT),dist*cos(camT));//vec3(sin(iTime*.5+1.), 1., -5.+mod(iTime, 30.));\n    vec3 target = vec3(0., 2.,0.);\n    vec3 rd = getDir(normalize(target-ro),uv); \n    \n    vec2 dir = normalize(uv);\n    float strength = length(uv)*0.05;\n    \n    vec3 col;\n\n    \n    float deye = 0.3;\n    \n    ro -= deye*normalize(cross(normalize(target-ro), vec3(0.,1.,0.)));\n    float left = rdr2(uv, ro, rd).x;\n    \n    ro += deye*2.0*normalize(cross(normalize(target-ro), vec3(0.,1.,0.)));\n\tvec2 right = rdr2(uv, ro, rd).yz;\n\n    col += vec3(left,0.,0.) +vec3(0.,right.xy);\n\treturn col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n\n    vec3 col;\n    \n    col = rdr(uv);\n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}