{
    "Shader": {
        "info": {
            "date": "1416039866",
            "description": "Testing collisions. Too slow if made this way.",
            "flags": 1,
            "hasliked": 0,
            "id": "XdjXWK",
            "likes": 155,
            "name": "Repelling",
            "published": 3,
            "tags": [
                "3d",
                "spheres",
                "repelling"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 22125
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2014 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n#define NUMPASES 2\n\n\n//-------------------------------------------------------------------------------------------\n// sphere related functions\n//-------------------------------------------------------------------------------------------\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\n// https://iquilezles.org/articles/sphereshadow\nfloat sphShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    return step( min( -b, min( c, b*b - c ) ), 0.0 );\n}\n            \nvec2 sphDistances( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    float d = sqrt( max(0.0,sph.w*sph.w-h)) - sph.w;\n    return vec2( d, -b-sqrt(max(h,0.0)) );\n}\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    float s = 1.0;\n    vec2 r = sphDistances( ro, rd, sph );\n    if( r.y>0.0 )\n        s = max(r.x,0.0)/r.y;\n    return s;\n}    \n            \nfloat sphOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )\n{\n    vec3  r = sph.xyz - pos;\n    float l = length(r);\n    float d = dot(nor,r);\n    float res = d;\n\n    if( d<sph.w ) res = pow(clamp((d+sph.w)/(2.0*sph.w),0.0,1.0),1.5)*sph.w;\n    \n    return clamp( res*(sph.w*sph.w)/(l*l*l), 0.0, 1.0 );\n}\n\n//-------------------------------------------------------------------------------------------\n// rendering functions\n//-------------------------------------------------------------------------------------------\n\n#define NUMSPHEREES 15\n\nvec4 sphere[NUMSPHEREES];\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n        res = min( res, 8.0*sphSoftShadow(ro,rd,sphere[i]) );\n    return res;\t\t\t\t\t  \n}\n\nfloat occlusion( in vec3 pos, in vec3 nor )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t    res *= 1.0 - sphOcclusion( pos, nor, sphere[i] ); \n    return res;\t\t\t\t\t  \n}\n\n//-------------------------------------------------------------------------------------------\n// utlity functions\n//-------------------------------------------------------------------------------------------\n\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\nvec3 textureBox( sampler2D sam, in vec3 pos, in vec3 nor )\n{\n    vec3 w = abs(nor);\n    return (w.x*texture( sam, pos.yz ).xyz + \n            w.y*texture( sam, pos.zx ).xyz + \n            w.z*texture( sam, pos.xy ).xyz ) / (w.x+w.y+w.z);\n}\n\n//-------------------------------------------------------------------------------------------\n// SCENE\n//-------------------------------------------------------------------------------------------\n\nvec3 lig = normalize( vec3( -0.8, 0.3, -0.5 ) );\n\nvec3 shade( in vec3 rd, in vec3 pos, in vec3 nor, in float id, in vec3 uvw, in float dis )\n{\n    vec3 ref = reflect(rd,nor);\n    float occ = occlusion( pos, nor );\n    float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n    \n    occ = occ*0.5 + 0.5*occ*occ;\n    \n    vec3 lin = vec3(0.0);\n    lin += 1.0*vec3(0.6,0.6,0.6)*occ;\n    lin += 0.5*vec3(0.3,0.3,0.3)*(0.2+0.8*occ);\n    lin += 0.3*vec3(0.5,0.4,0.3)*pow( fre, 2.0 )*occ;\n    lin += 0.1*nor.y + 0.1*nor;\n\n    float dif = clamp( nor.y, 0.0, 1.0 ) * shadow( pos, vec3(0.0,1.0,0.0) );\n\n    lin = lin*0.7 + 0.8*dif;\n    \n    vec3 mate = 0.6 + 0.4*cos( 10.0*sin(id) + vec3(0.0,0.5,1.0) + 2. );\n    vec3 te = textureBox( iChannel0, 0.25*uvw, nor );\n    vec3 qe = te;\n    te = 0.1 + 0.9*te;\n    mate *= te*1.7;\n    \n    float h = id / float(NUMSPHEREES);\n    mate *= 1.0-smoothstep(0.5,0.6,sin(50.0*uvw.x*(1.0-0.95*h))*\n                                   sin(50.0*uvw.y*(1.0-0.95*h))*\n                                   sin(50.0*uvw.z*(1.0-0.95*h)) );\n\n    vec3 col = mate*lin;\n\n    float r = clamp(qe.x,0.0,1.0);\n    col += 0.2 * r * pow( clamp(dot(-rd,nor), 0.0, 1.0 ), 4.0 ) * occ;\n    col += 0.4 * r * pow( clamp(reflect(rd,nor).y, 0.0, 1.0 ), 8.0 ) * dif;\n\n    \n    //col *= 1.5*exp( -0.05*dis*dis );\n    \n    return col*0.8;\n}    \n\n\nvec3 trace( in vec3 ro, in vec3 rd, vec3 col, in float px )\n{\n    float tmin = 1e20;\n    \n\tfloat t = tmin;\n\tfloat id  = -1.0;\n    vec4  obj = vec4(0.0);\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n\t    float h = sphIntersect( ro, rd, sph ); \n\t\tif( h>0.0 && h<t ) \n\t\t{\n\t\t\tt = h;\n            obj = sph;\n\t\t\tid = float(i);\n\t\t}\n\t}\n\t\t\t\t\t\t  \n    if( id>-0.5 )\n    {\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = sphNormal( pos, obj );\n        col = shade( rd, pos, nor, float(NUMSPHEREES-1)-id, pos-obj.xyz, t );\n    }\n\n    return col;\n}\n\n\nvec3 animate( float time )\n{\n\t\n    // animate\n    vec3 cen = vec3(0.0);\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tfloat id  = float(NUMSPHEREES-1-i);\n        float ra = pow(id/float(NUMSPHEREES-1),3.0);\n        vec3  pos = 1.0*cos( 6.2831*hash3(id*16.0+2.0*0.0) + 1.5*(1.0-0.7*ra)*sin(id)*time*2.0 );\n        ra = 0.2 + 0.8*ra;\n\n        // repell\n        #if NUMPASES>0\n        #if NUMPASES>1\n        for( int k=min(0,iFrame); k<NUMPASES; k++ )\n        #endif\n        for( int j=min(0,iFrame); j<i; j++ )\n        {\n            vec3  di = pos.xyz - sphere[j].xyz;\n            float rr = ra + sphere[j].w;\n            float di2 = dot(di,di);\n            if( di2 < rr*rr )\n            {\n                float l = sqrt(di2);\n                pos += di*(rr-l)/l;\n            }\n        }\n        #endif\n        \n\t\tsphere[i] = vec4( pos, ra );\n        cen += pos;\n    }\n    \n    cen /= float(NUMSPHEREES);\n    return cen;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 m = step(0.0001,iMouse.z) * iMouse.xy/iResolution.xy;\n\n  \tfloat time = iTime*0.5;\n    vec3 cen = animate( time );\n\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n  \tfloat an = 0.3*time - 7.0*m.x - 3.5;\n\n    float le = 2.5;\n\tvec3 ro = cen + vec3(4.0*sin(an),1.0,4.0*cos(an));\n    vec3 ta = cen;\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + le*ww );\n\n    float px = 1.0*(2.0/iResolution.y)*(1.0/le);\n\n\tvec3 col = vec3(0.2)*clamp(1.0-0.3*length(p),0.0,1.0);\n    \n    col = trace( ro, rd, col, px );\n\n    //-----------------------------------------------------\n\t// postprocess\n    //-----------------------------------------------------\n\n    // gama\n    col = pow( col, vec3(0.44,0.5,0.55) );\n    \n    // contrast    \n    col = mix( col, smoothstep( 0.0, 1.0, col ), 0.5 );\n    \n    // saturate\n    //col = mix( col, vec3(dot(col,vec3(0.333))), -0.2 );\n    \n\t// vigneting\n    col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n\n    // dithering\n    col += (1.0/255.0)*hash3(q.x+13.0*q.y);\n\n    fragColor = vec4( col, 1.0 );\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n  \tfloat time = iTime*0.5;\n    vec3 cen = animate( time );\n\n    vec3 ro = fragRayOri + vec3( 0.0, 1.0, 3.0 );\n    vec3 rd = fragRayDir;\n\n    vec3 col = trace( ro, rd, vec3(0.2), 0.01 );\n\n    // gama\n    col = pow( col, vec3(0.45,0.5,0.55) );\n    \n    // contrast    \n    col = mix( col, smoothstep( 0.0, 1.0, col ), 0.5 );\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}