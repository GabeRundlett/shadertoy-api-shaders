{
    "Shader": {
        "info": {
            "date": "1643781350",
            "description": "Oaxaca is beautiful.",
            "flags": 32,
            "hasliked": 0,
            "id": "Nsc3DM",
            "likes": 28,
            "name": "Oaxaca Countryside",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "mountains",
                "oaxaca"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 610
        },
        "renderpass": [
            {
                "code": "// Cole Peterson (Plento)\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec4 blur = texture(iChannel0, u/R, 6.);\n    \n    f = texelFetch(iChannel0, ivec2(u), 0)\n      + .3*pow(blur, vec4(4)).z                  // bloom the sky\n      - .18*clamp(hsh(u + iTime), .5, .9);       // noise grain\n    f *= .94 * (1.-step(.43, abs(u.y/R.y - .5))); // cinemascope borders\n} // The Fabrice simplification",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define KEY(v,m) texelFetch(iChannel1, ivec2(v, m), 0).x\n#define ss(a, b, t) smoothstep(a, b, t)\n#define ch(chan, p) texelFetch(chan,  ivec2(p), 0)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n\nvec2 hash22( vec2 x ){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat hsh(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat perlin(vec2 p){\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float a = hsh(i);\n    float b = hsh(i+vec2(1., .0));\n    float c = hsh(i+vec2(0. ,1 ));\n    float d = hsh(i+vec2(1., 1. ));\n    \n    vec2 u = smoothstep(0., 1., f);\n    \n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat octnse(vec2 p, int oct, float t){\n    float a = 1.;\n    float n = 0.;\n    \n    for(int i = 0; i < oct; i++){\n        p.x += t;\n     \tn += perlin(p) * a;\t\n        p*=2.;\n        a *= .5;\n    }\n    \n    return n;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// https://iquilezles.org/articles/distfunctions\nfloat smoothmin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat line( vec3 p, vec3 a, vec3 b, float r ){\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\nfloat gh(vec2 rp){\n    float h = 0.;\n    \n    float t = rp.x + rp.y*1.2;\n    h += cos(rp.y) + .5*cos(t*4.) + .3*sin(rp.y*3.);\n    h += cos(rp.x) + .4*sin(rp.x*2.) + .3*cos(t*3.);\n    h *= .3;\n    \n    return h;\n}\n\n#define rad .016\n#define it 4.\n#define b vec3(1., 0., 1.)\n\n\nfloat trees_kinda(vec3 p){\n    float scl = 0.33, d = 999., ts = 1.;\n       \n    for(float i = 0.; i < it; i++){\n        p.xz = -abs(p.xz);\n        float a = 2.9;\n        \n        a -= cos(i)*.15;\n        p.y -= scl*2.;   \n        \n        p.y += scl;\n        p.xy *= rot(a);\n        p.yz *= rot(a);\n        p.y -= scl;\n       \n        scl *= .8;\n    }\n    \n    d = smoothmin(d, length(p-vec3(0., ts, 0.))-0.23, .7);\n    return d;\n}\n\nfloat map(vec3 rp){\n    rp.z += iTime;\n\n    float h = gh(rp.xz);\n    \n    h -= .1*octnse(rp.xz * 3.8, 3, 0.);\n    h -= cos(rp.z*2.) * .13;\n\n    float d = rp.y + h;\n    \n    rp.xz*=rot(3.14/4.);\n    d = smoothmin(trees_kinda(mod(rp - vec3(1., -3.4 + h, 0.), b)-b*.5), d, .9);\n    \n    return d;\n}\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 m = (iMouse.xy - .5*R) / R.y;\n    \n    vec3 rd = normalize(vec3(uv,2.4));\n    vec3 ro = vec3(0., 2.15 + .1*cos(iTime*.4), 0.);\n    \n    \n    \n    rd.yz *= rot(.1);\n    rd.xz *= rot(.1);\n    \n    float d = 0.0, t = 0.0, ns = 0.;\n    \n    for(int i = 0; i < 61; i++){\n        d = map(ro+rd*t);\n        if(d < 0.0025 || t > 30.) break;\n        t += d * .7;\n        ns++;\n    }\n    \n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    \n    p.z += iTime;\n    \n    vec3 ld = normalize(vec3(-0.8, 0.5, -2.));\n    float dif = max(dot(n, ld), .1);\n    float ao = ss(7., 2., ns *.3);\n      \n    float rnd = perlin(p.xz * 2.5); \n    vec3 grass = mix(vec3(0), .23*vec3(.1, .2, .1), rnd);\n   \n    float cloud = (1. - .17*octnse(rd.xy*10., 4, -iTime*.12));\n    cloud = mix(cloud, 1., ss(19., 11., t));\n    vec3 sky = cloud * vec3(.6, .7, .95);\n    \n    vec3 col = grass * dif * ao;\n\n    float fd = 22.;\n    float fog = ss(fd, fd - 16.4, t);\n    \n    col = mix(sky, col, fog);\n    col = pow(col*1.1, vec3(1.4));\n    \n    f = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}