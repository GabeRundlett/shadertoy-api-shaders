{
    "Shader": {
        "info": {
            "date": "1676672073",
            "description": "redo of an old shader of mine with more interesting swirly motion",
            "flags": 0,
            "hasliked": 0,
            "id": "mtBSWc",
            "likes": 26,
            "name": "swirly eyes",
            "published": 3,
            "tags": [
                "raymarch",
                "fbm"
            ],
            "usePreview": 0,
            "username": "pb",
            "viewed": 522
        },
        "renderpass": [
            {
                "code": "//philip.bertani@gmail.com\n\nfloat numOct  = 5. ;  //number of fbm octaves\nfloat focus = 0.;\nfloat focus2 = 0.;\n#define pi  3.14159265\n\nfloat random(vec2 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec2(12., 90.)))* 5e5 );\n}\n\nmat2 rot2(float an){float cc=cos(an),ss=sin(an); return mat2(cc,-ss,ss,cc);}\n\n//this is taken from Visions of Chaos shader \"Sample Noise 2D 4.glsl\"\nfloat noise(vec3 p) {\n    vec2 i = floor(p.yz);\n    vec2 f = fract(p.yz);\n    float a = random(i + vec2(0.,0.));\n    float b = random(i + vec2(1.,0.));\n    float c = random(i + vec2(0.,1.));\n    float d = random(i + vec2(1.,1.));\n    vec2 u = f*f*(3.-2.*f); \n    \n    return mix( mix(a,b,u.x), mix(c,d,u.x), u.y);\n}\n\nfloat fbm3d(vec3 p) {\n    float v = 0.;\n    float a = .5;\n    vec3 shift = vec3(focus - focus2);     //play with this\n    \n    float angle = pi/1.3 + .03*focus;      //play with this\n\n    for (float i=0.; i<numOct; i++) {\n        v += a * noise(p);\n        p.xz = rot2(-angle)*p.xz ;\n        p = 2.*p + shift;\n        a *= .22*(1.+focus+focus2);  //this is the main modification that makes the fbm more interesting\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y * 2.5;\n\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    vec3 rd = normalize( vec3(uv, -1.2) );  \n    vec3 ro = vec3(0); \n    \n    float delta = iTime / 1.3 ; \n        \n    rd.yz *= rot2(-delta );\n    rd.xz *= rot2(delta*3.);\n    vec3 p = ro + rd;\n\n    float bass = 1.8 + .8 * sin(iTime);  //used to be connected to audioContext.analyser\n    \n    vec2 nudge = vec2( aspectRatio, 0.);\n\n    focus = length(uv + nudge);\n    focus = 1.8/(1.+focus) * bass;\n\n    focus2 = length(uv - nudge);\n    focus2 = 4.5/(1.+focus2*focus2) / bass;\n\n    vec3 q = vec3( fbm3d(p), fbm3d(p.yzx), fbm3d(p.zxy) ) ;\n\n    float f = fbm3d(p + q);\n    \n    vec3 cc = q;\n    cc *= 20.*f;   \n\n    cc.r += 4.5*focus; cc.g+= 2.*focus; \n    cc.b += 7.*focus2; cc.r-=3.5*focus2;    \n    cc /= 20.;\n \n\n    fragColor = vec4( cc,1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}