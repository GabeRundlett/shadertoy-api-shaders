{
    "Shader": {
        "info": {
            "date": "1590099409",
            "description": "A simple raymarcher, with a distance estimation function for the Mandelbulb fractal. I wish I could fix the artifacts though, any tips on that?",
            "flags": 0,
            "hasliked": 0,
            "id": "wd2fWD",
            "likes": 1,
            "name": "Devil's Egg",
            "published": 3,
            "tags": [
                "raymarching",
                "mandelbulb"
            ],
            "usePreview": 0,
            "username": "workingclasshacker",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define MAX_STEPS 100\n#define SURFACE_DIST .001\n#define MAX_DIST 30.0\n#define MANDEL_ITERATIONS 5\n#define MANDEL_BAIL_DIST 16.\n#define MANDEL_POWER 8.0\n\nmat2 Rot2d(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, - s, s, c);\n}\n\nfloat sdMandelBulb(vec3 p){\n  vec3 z = p;\n  float dr = 1.;\n  float r = 0.;\n  for(int i = 0; i<MANDEL_ITERATIONS;i++){\n    r = length(z);\n    if(r>MANDEL_BAIL_DIST) break;\n\n    // spherical coordinates\n    float theta = acos(z.z/r);\n    float phi = atan(z.y, z.x);\n    dr = pow(r, MANDEL_POWER)*MANDEL_POWER*dr +1.0;\n\n    float zr = pow(r, MANDEL_POWER);\n    theta = theta*MANDEL_POWER;\n    phi = phi*MANDEL_POWER;\n\n    z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta))+p;\n    \n  }\n  return 0.5*log2(r)*r/dr;\n}\n\nfloat sdSphere(vec3 p, vec4 sphere) {\n  return length(p - sphere.xyz) - sphere.w;\n}\n\nfloat sdBox(vec3 p, vec3 box) {\n  p = abs(p) - box;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n  p *= scale;\n  return abs(dot(sin(p), cos(p.zxy)) + bias) / scale - thickness;\n}\n\nfloat sdAAPlane(vec3 p){\n  return p.y;\n}\n//\nvec3 Transform(vec3 p) {\n  return p;\n}\n\nfloat GetDist(vec3 p){\n  // replace with your scene\n  float d = sdMandelBulb(p);\n    \n  return d;\n}\n\nvec3 GetNormal(vec3 p) {\n  vec2 e = vec2(0.00001, 0.);\n  float d = GetDist(p);\n  vec3 n = d-vec3(GetDist(p - e.xyy), GetDist(p - e.yxy), GetDist(p - e.yyx));\n  return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n  vec3 f = normalize(l - p),\n  r = normalize(cross(vec3(0, 1, 0), f)),\n  u = cross(f, r),\n  c = p+f * z,\n  i = c+uv.x * r+uv.y * u,\n  d = normalize(i - p);\n  return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n  for(int i = 0; i < MAX_STEPS; i ++ ) {\n    vec3 p = ro + dO * rd;\n    float ds = GetDist(p);\n    dO += ds;\n    if (dO < SURFACE_DIST||dO > MAX_DIST) {\n      break;\n    }\n  }\n  return dO;\n}\n\nvec3 render(vec2 uv){\n  float t = iTime / 5.0;\n  vec3 color = vec3(0);\n  \n  // camera\n  vec3 camO = vec3(0, 0, -3);\n  vec3 lookAt = vec3(0, 0, 0);\n\n  camO.xz *= Rot2d(t/1.);\n  camO.yz *= Rot2d(t/1.);\n  vec3 rd = GetRayDir(uv, camO, lookAt, 6.*(sin(t)*.5+.5));\n  \n  // trace scene\n  float d = RayMarch(camO, rd);\n    \n  // material\n  if (d < MAX_DIST) {\n    vec3 p = camO + rd * d;\n    vec3 n = GetNormal(p);\n    float height = p.y;\n    float dif = n.y * 0.5 + 0.5+n.x*.5;    \n    //color.r = n.x;\n    //color += vec3(.0,0,0.);\n    //color += .2*n*dif*dif+dif*.5;\n    color += vec3(d*.2);\n    \n    color *= vec3(n.x*.4,0,n.y/2.);\n    color *= dif;\n  } else {\n   \tcolor = vec3(.2,0,0);\n    color *= 1.-dot(uv, uv);\n  }\n  return color*=1.7;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n  \n  vec3 color = render(uv);\n  \n  fragColor=vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}