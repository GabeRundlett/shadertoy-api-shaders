{
    "Shader": {
        "info": {
            "date": "1641472277",
            "description": "The gradients mostly line up, but often come from the wrong direction.\n\n(change ichannel0 to buffer A in Image, to see simpler version)",
            "flags": 48,
            "hasliked": 0,
            "id": "7tVXDc",
            "likes": 6,
            "name": "Failed Spline Idea",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n\n    vec3 e = vec3(1.);\n    vec3 col2 = 2.5 * x * pal(mix(0.3, 0.35, 0.5 + 0.5 * thc(2., iTime)), e, e, e, vec3(0., 0.33, 0.66));\n    fragColor = vec4(col2, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;   \n\n    // Get random value with time\n    float time = 0.5 * cos(iTime) - 1. * iTime;\n    // Offset y values from x values\n    float o = 0.1;\n    float sc = 0.8;// + 0.5 * cos(iTime);\n    \n    // Next 4 points in sequence\n    // (bad approach - has a bottom-left bias)\n    vec2 p0 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time))),      h21(vec2(o + floor(time))) );\n    vec2 p1 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 1.))), h21(vec2(o + floor(time + 1.))) );\n    vec2 p2 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 2.))), h21(vec2(o + floor(time + 2.))) );\n    vec2 p3 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 3.))), h21(vec2(o + floor(time + 3.))) );\n\n    //float l12 = length(p2 - p1);\n    //float l23 = length(p3 - p2);\n\n    vec2 d12 = normalize(p2 - p1);\n    vec2 d23 = normalize(p3 - p2);\n    \n    float k = 1.; // idk what value is good here\n    \n    // x0 lies on p2 -> p1 line, x1 lies on p3 -> p2 line\n    vec2 x0 = p1 - k * d12;\n    vec2 x1 = p2 - k * d23;\n    \n    // p0 -> x0 line\n    float m0 = (x0.y - p0.y) / (x0.x - p0.x);\n    float c0 = p0.y - m0 * p0.x;\n    \n    // p1 -> x1 line\n    float m1 = (x1.y - p1.y) / (x1.x - p1.x);\n    float c1 = p1.y - m1 * p1.x;\n    \n    // Intersect x1 -> p1 line with p0 -> x0 line to get A,\n    // Lerp (p0 -> A) -> (A -> p1)   \n    float Ax = -(c1 - c0) / (m1 - m0);\n    float Ay = m1 * Ax + c1;\n    vec2 A = vec2(Ax, Ay); \n    // (I think nearly parallel lines mess up A, make it go beyond bounds)\n    A = clamp(A, -0.5, 0.5);\n    \n    float f = fract(time);\n    //f = smoothstep(0., 1., f);\n    //f = 16. * f * f * (1.-f) * (1.-f); // <- useful to visualise how it fails\n    vec2 q0 = mix(p0, A, f);\n    vec2 qA = mix(A, p1, f);\n    vec2 q = mix(q0, qA, f);\n   \n    // Distance from point + strength to smoothstep away from it\n    float d = length(uv-q);\n    float k2 = 0.06 + d;\n\n    // Draw stuff\n    float s = smoothstep(-k2, k2, -d + 0.);\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    x = 0.98 * clamp(x, 0., 1.);\n    \n    fragColor = vec4(max(x, 2. * s));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Collection of functions I use a lot:\n\n#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Get \"point\" from Buffer A\n    vec2 p = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xy;\n    \n    // Distance from point + strength to smoothstep away from it\n    float d = length(uv-p);\n    d = pow(4. * d * (1.-d), 2.);\n    float k = 0.2 + d;\n\n    // Draw stuff\n    float s = smoothstep(-k, k, -d + 0.);\n    float x = texelFetch( iChannel1, ivec2(fragCoord), 0 ).x;\n    x = 0.98 * clamp(x, 0., 1.);\n    \n    fragColor = vec4(max(x, 2. * s));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}