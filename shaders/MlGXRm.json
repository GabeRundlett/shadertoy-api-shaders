{
    "Shader": {
        "info": {
            "date": "1483554179",
            "description": "visualization of the de broglie-bohm guiding field and other quantities of schrodinger equation.\nbased on davidar's [url]https://www.shadertoy.com/view/lsKGRW[/url]\nuse mouse to switch from guiding fileld to other wavefunc visualizations\n",
            "flags": 32,
            "hasliked": 0,
            "id": "MlGXRm",
            "likes": 39,
            "name": "debroglie-bohm 2D-atom",
            "published": 3,
            "tags": [
                "physics",
                "quantum",
                "schrodinger",
                "bohm",
                "debroglie",
                "guidingfield"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 1540
        },
        "renderpass": [
            {
                "code": "// schroedinger equation test in 2D\n// hypothetical 2D atom (2D coulomb potential)\n//\n// we see a slightly unstable p-orbit radiating part of its energy.\n// i used an unstable orbit because it has more dynamics (and the guiding field then \n// looks like a galaxy ;-)\n// if you want a stable orbit, change factor \"1.2\" in Buf A line 86 to \"1.0\"\n//\n// interresting, that we see some sort of breathing in the p-state due to this instability\n// (Guiding field sometimes flows in and sometimes out)\n//\n// simualtion is in BufA-BufD based on davidar's https://www.shadertoy.com/view/lsKGRW\n//\n// potential and initial wavefunction are defined in BufA\n//\n// there is also a double slit setup:\n// you'd have to uncomment DOUBLE_SLIT and comment ATOM2D in BufA\n\nfloat PI2=6.28318530718;\n\n// physical constants\nfloat e=-1.;\nfloat eps0=.2;\nfloat hq=1.;\nfloat m=1.;\nfloat posScale=1.;\n\nfloat getVal(vec2 uv)\n{\n    return texture(iChannel0,uv).x;\n}\n    \nfloat getValI(vec2 uv)\n{\n    return texture(iChannel0,uv).y;\n}\n    \nvec2 getValC(vec2 pos)\n{\n    return texture(iChannel0,pos/iResolution.xy).xy;\n}\n    \n// gradient of real part\nvec2 getGradR(vec2 uv,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        getVal(uv+d.xy)-getVal(uv-d.xy),\n        getVal(uv+d.yx)-getVal(uv-d.yx)\n    )/delta;\n}\n\n// gradient of imaginary part\nvec2 getGradI(vec2 uv,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        getValI(uv+d.xy)-getValI(uv-d.xy),\n        getValI(uv+d.yx)-getValI(uv-d.yx)\n    )/delta;\n}\n\n// complex gradient\nvec4 getGradC(vec2 pos,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec4(\n        getValC(pos+d.xy)-getValC(pos-d.xy),\n        getValC(pos+d.yx)-getValC(pos-d.yx)\n    )/delta;\n}\n\n// debroglie-bohm guiding field\nvec2 getBohm_dQdt(vec2 pos)\n{\n    // dQ/dt = Im[(nabla*psi)/psi]\n    \n    vec2 psi=getValC(pos);\n    vec4 nabla_psi=getGradC(pos,1.);\n    if(dot(psi,psi)==0.) return vec2(0.);\n    return hq/m*(nabla_psi.yw*psi.x-nabla_psi.xz*psi.y)/dot(psi,psi);\n    //vec2 psi_cc=getValC(uv)*vec2(1,-1);\n    //return vec2(dot(nabla_psi.yx,psi_cc),dot(nabla_psi.wz,psi_cc))/dot(psi_cc,psi_cc);\n}\n\nvec4 fieldTex(vec2 texc)\n{\n    //texc*=300.;\n    //return vec4(clamp(cos(texc.x)*cos(texc.y),0.,1.));\n    return clamp(texture(iChannel1,texc)*1.5-.5,0.,1.);\n}\n\nvec4 dirTile(vec2 pos)\n{\n    float tileSize=5.;\n    vec2 qpos=floor(pos/tileSize)*tileSize+tileSize*.5;\n    vec2 qrand=texture(iChannel1,qpos/iChannelResolution[1].xy).xy*tileSize*.707;\n    vec2 v=getBohm_dQdt(qpos);\n    vec2 vn=v.yx*vec2(1,-1);\n    vec2 dir=normalize(vn);\n    //dir=vec2(1,0);\n    float b=sin(1.5*dot(pos-qpos+qrand,1.*dir));\n    return vec4(b*b);\n}\n\n#define alpha_ 128.\n#define beta_ 129.\n#define gamma_ 130.\n#define psi_ 142.\n#define bo_ 40.\n#define bc_ 41.\n#define ebo_ 91.\n#define ebc_ 93.\n#define cbo_ 123.\n#define cbc_ 125.\n#define or_ 124.\n#define squared_ 178.\n#define space_ 32.\n#define div_ 47.\n#define A_ 65.\n#define B_ 66.\n#define C_ 67.\n#define D_ 68.\n#define E_ 69.\n#define F_ 70.\n#define G_ 71.\n#define H_ 72.\n#define I_ 73.\n#define J_ 74.\n#define K_ 75.\n#define L_ 76.\n#define M_ 77.\n#define N_ 78.\n#define O_ 79.\n#define P_ 80.\n#define Q_ 81.\n#define R_ 82.\n#define S_ 83.\n#define T_ 84.\n#define U_ 85.\n#define V_ 86.\n#define W_ 87.\n#define X_ 88.\n#define Y_ 89.\n#define Z_ 90.\n#define a_ (A_+32.)\n#define b_ (B_+32.)\n#define c_ (C_+32.)\n#define d_ (D_+32.)\n#define e_ (E_+32.)\n#define f_ (F_+32.)\n#define g_ (G_+32.)\n#define h_ (H_+32.)\n#define i_ (I_+32.)\n#define j_ (J_+32.)\n#define k_ (K_+32.)\n#define l_ (L_+32.)\n#define m_ (M_+32.)\n#define n_ (N_+32.)\n#define o_ (O_+32.)\n#define p_ (P_+32.)\n#define q_ (Q_+32.)\n#define r_ (R_+32.)\n#define s_ (S_+32.)\n#define t_ (T_+32.)\n#define u_ (U_+32.)\n#define v_ (V_+32.)\n#define w_ (W_+32.)\n#define x_ (X_+32.)\n#define y_ (Y_+32.)\n#define z_ (Z_+32.)\n\nvoid writeChar(float x, float y, float s, vec3 color, float c, inout vec4 col, vec2 coord)\n{\n    vec2 res2=iChannelResolution[2].xy;\n    //float dist=texture(iChannel2,vec2(c/16.,mod(c,16.)/16.)).x;\n    //col=mix(vec4(1,1,0,1),col,clamp(dist*dist*dist,0.,1.));\n    if( coord.x>x && coord.y>y && coord.x<x+s && coord.y<y+s )\n    {\n        vec2 dc = coord-vec2(x,y);\n        dc.y=s-dc.y;\n        vec2 uv=\n            vec2(floor(mod(c,16.))/16.,floor(c/16.)/16.)\n            +dc/s/16.;\n        uv.y=1.-uv.y/*+1./16.*/;\n        col=mix(col,1.*vec4(color,1),texture(iChannel2,uv).x);\n        //col+=vec4(0,1,0,1);\n    }\n}\n\nvoid write(float x, float y, float s, vec3 color, mat4 txt,inout vec4 col, vec2 coord)\n{\n    for(int i=0;i<4;i++)\n    {\n    \tfor(int j=0;j<4;j++)\n    \t{\n            float c=txt[i][j];\n            if(c==0.) return;\n    \t\twriteChar(x,y,s,color,c,col,coord); x+=s*.5;\n        }\n    }\n}\n\nvec2 cis(float theta) {\n    return vec2(cos(theta),sin(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 b0 = texture(iChannel0,uv)*3.;\n    \n    /////////////\n    ////  real part with diffuse and specular shading and height lines (red/green=+/-)\n    /////////////\n    vec3 n = vec3(getGradR(uv,1.0/iResolution.y),15.);    \n    n=normalize(n);\n    vec3 light = normalize(vec3(1,1,2.5));\n    float diff=clamp(dot(n,light),0.0,1.0)*.4+.6;\n    float spec=clamp(dot(reflect(light,n),vec3(0,0,-1)),0.0,1.0);\n    spec=pow(spec,24.0)*1.;\n    vec4 c=vec4(0)+texture(iChannel0,uv).x*200.;\n    // add some logarithmic height lines\n    float s=sin(log(abs(c.x))*4.);\n    s=1.-.3*exp(-s*s/.03);\n    c=(c.x<0.)?s*vec4(0,1,0,0):s*vec4(1,0,0,0);\n\tvec4 colRealWithSpec = clamp(c,vec4(0),vec4(1))*vec4(diff)+vec4(spec);\n    \n    /////////////\n    ////  calculate guiding field\n    ////  (multiplied by psi^2 because of otherwise noisy low-amplitude areas\n    /////////////\n    c=vec4(0);\n    vec2 coord=fragCoord;\n    vec2 v0=getBohm_dQdt(coord);\n    float rsc=1./256.;\n    float sum=0.;\n    float time = iTime*.5;\n    for(int i=0;i<24;i++)\n    {\n        vec2 v=getBohm_dQdt(coord);\n        float fact1=fract(float(i)/15.-time*2.);\n        float fact2=fract(float(i)/15.-time*2.+.5);\n        fact1=fact1*fact2;\n    \tc+=fact1*fieldTex(coord*rsc)*length(v0)*10.;\n        sum+=fact1;\n        //coord+=v*1.5*iResolution.y/300.;\n        coord+=normalize(v)*1.;\n    }\n    c/=sum*1.;\n    vec4 colGuidingField=c*clamp(.5*length(b0.xy),0.,1.);\n        \n    /////////////\n    ////  psi red=real, geen=imaginary\n    /////////////\n    vec4 colPsiRealImaginary=vec4(b0.xy,0,0);\n    \n    /////////////////////////////////////////////\n    \n    vec2 mouse=iMouse.xy;\n    if(mouse.x==0. && mouse.y==0.) \n        mouse=vec2(iResolution.x*.5,iResolution.y*.5);\n    \n    // lower left screen region\n    fragColor=colPsiRealImaginary;\n    write(.1*res.x-40.,.1*res.y+16.,18.,vec3(0,0,1),mat4(V_,bo_,r_,bc_, 0,0,0,0, 0,0,0,0, 0,0,0,0),fragColor,fragCoord);\n    write(.1*res.x-40.,.1*res.y,18.,vec3(1,0,0),mat4(R_,e_,bo_,psi_, bc_,0,0,0, 0,0,0,0, 0,0,0,0),fragColor,fragCoord);\n    write(.1*res.x-40.,.1*res.y-16.,18.,vec3(0,1,0),mat4(I_,m_,bo_,psi_, bc_,0,0,0, 0,0,0,0, 0,0,0,0),fragColor,fragCoord);\n\n    // lower right screen region\n    if(uv.x*iResolution.x>mouse.x) \n    {\n        fragColor = vec4(0)+(dot(colPsiRealImaginary.xy,colPsiRealImaginary.xy));\n        write(.9*res.x-16.,.1*res.y-16.,18.,vec3(1,1,0),mat4(or_,psi_,or_,squared_, 0,0,0,0, 0,0,0,0, 0,0,0,0),fragColor,fragCoord);\n    }\n    \n   \tif ( uv.y*iResolution.y>mouse.y) \n    {\n        // upper left screen region\n        fragColor = colGuidingField;\n        write(.1*res.x-40.,.9*res.y-16.,18.,vec3(0,0,1),mat4(d_,Q_,div_,d_, t_,0,0,0, 0,0,0,0, 0,0,0,0),fragColor,fragCoord);\n        write(.1*res.x-40.,.9*res.y,18.,vec3(0,0,1),\n              mat4(G_,u_,i_,d_, i_,n_,g_,space_, f_,i_,e_,l_, d_,0,0,0),fragColor,fragCoord);\n        \n        // upper right screen region\n\t    if(uv.x*iResolution.x>mouse.x) \n        {\n            fragColor=colRealWithSpec;\n            write(.9*res.x-16.,.9*res.y,18.,vec3(0,0,1),mat4(R_,e_,bo_,psi_, bc_,0,0,0, 0,0,0,0, 0,0,0,0),fragColor,fragCoord);\n        }\n    }\n    \n    // show potantial in blue channel\n    fragColor.z+=abs(b0.z*30.);    \n    //fragColor = vec4(texture(iChannel2,uv).x);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define WAVELEN .02\n\n// choose between hypothetical 2D atom (2D coulomb potential) or double slit setup\n#define ATOM2D\n//#define DOUBLE_SLIT\n\nfloat PI2=6.28318530718;\n\n// physical constants\nfloat e=-1.;\nfloat eps0=.2;\nfloat hq=1.;\nfloat m=1.;\n\nfloat beta(float n)\n{\n    return 2.*(1./2./PI2/eps0)*e*e*m/hq/hq/(n-.5);\n}\n\nvec2 cis(float theta) {\n    return vec2(cos(theta),sin(theta));\n}\n\nfloat box(float boxpos, float boxw, float edgew, float x)\n{\n    return   smoothstep(boxpos-boxw*.5-edgew*.5,boxpos-boxw*.5+edgew*.5,x)\n        *(1.-smoothstep(boxpos+boxw*.5-edgew*.5,boxpos+boxw*.5+edgew*.5,x));\n}\n\nfloat sq(float x) { return x*x; }\n\nvoid initWaveDoubleSlit(inout vec4 col, vec2 pos)\n{\n    vec2 p = pos.xy / iResolution.xy - 0.5;\n    p.x *= iResolution.x / iResolution.y;\n    \n   \t//vec2 wavedir=normalize(vec2(1,1));\n    //vec2  wavepos = vec2(-0.5,-0.225);\n    vec2  wavepos = vec2(-0.35,0.0);\n    vec2  wavedir=normalize(vec2(1,0));\n    float wavelen = WAVELEN;\n    float wavesize = .2;\n    vec2 K = PI2/wavelen*wavedir;\n    col.xy = .5*exp(-sq(length(p-wavepos)/wavesize)) * cis(dot(K,p));\n}\n\nfloat getPotentialDoubleSlit(vec2 pos)\n{\n    float W=iResolution.x;\n    float H=iResolution.y;\n    float p = 0.;\n    //p += clamp(20. + pos.y - iResolution.y, 0., 2.);\n    //p += clamp(20. - pos.y, 0., 2.);\n    //if(pos.x < iResolution.x/2.)\n        p += clamp(3. - abs(pos.y - iResolution.y/2.), 0., 1.);\n    //p = clamp(p, 0., 2.);\n    p  = box(W*.5,H*.015,H*.01,pos.x);\n    float slitD= .08*H*WAVELEN/.018;\n    float slitW= .015*H*WAVELEN/.018;\n    p *= 1.-box(H*.5+.5*slitD,slitW,H*.001,pos.y);\n    p *= 1.-box(H*.5-.5*slitD,slitW,H*.001,pos.y);\n    return p*2.4;\n}\n\nfloat getSmoothRand(vec2 pos)\n{\n    return(\n         \t sin(.3245*pos.x)*sin(.3245*pos.y)\n         \t+.3*sin(pos.x)*sin(pos.y)\n        \t+.1*sin(3.234*pos.x)*sin(3.234*pos.y)\n        \t//+sin(13.234*pos.x)*sin(13.234*pos.y)\n        )*.333;\n}\n\nvec2 getSmoothRand2(vec2 pos)\n{\n    return vec2(getSmoothRand(pos),getSmoothRand(pos+vec2(12.3432,17.34245)));\n}\n\nvoid initWaveAtom2D(inout vec4 col, vec2 pos)\n{\n    pos=(pos-vec2(iResolution.xy)*.5);\n    \n    pos*=.5; // there must be still some mistake somewhere - this should be 1\n    \n    pos*=1.2; // lets make it a bit smaller than the exact solution\n              // so it radiates part of its energy into the sourrounding\n              // before it equilibrates\n    \n    col.xy=vec2(0);\n    // lets add some quantum fluctuation\n\t//col.xy += .5*getSmoothRand2(pos*.2);\n    \n    float r=length(pos);\n    float phi=atan(pos.y,pos.x);\n\t\n    // analytic solutions below to test the simulation were taken from\n    // https://www.researchgate.net/publication/13384275_Analytic_solution_of_a_two-dimensional_hydrogen_atom_I_Nonrelativistic_theory    \n    \n    // psi(n=2,l=1)\n    float beta2 = beta(2.);\n    col.xy+=50.*beta2*beta2/sqrt(6.)*r*exp(-beta2*r/2.)*vec2(cos(phi),sin(phi));\n        \n    // psi(n=3,l=1)\n    //float beta3 = beta(3.);\n    //col.xy+=50.*beta3*beta3/sqrt(30.)*r*(3.-beta3*r)*exp(-beta3*r/2.)*vec2(cos(phi),sin(phi));\n        \n    // psi(n=3,l=2)\n    //float beta3 = beta(3.);\n    //col.xy+=50.*beta3*beta3*beta3/sqrt(120.)*r*r*exp(-beta3*r/2.)*vec2(cos(2.*phi),sin(2.*phi));    \n}\n\nfloat getPotentialAtom2D(vec2 pos)\n{\n    // coulomb potential of 2D atom\n    float W=iResolution.x;\n    float H=iResolution.y;\n    pos=(pos-vec2(iResolution.xy)*.5);\n    return -e*e/2./PI2/eps0/sqrt(dot(pos,pos)+.001);\n}\n\nvoid initWave(inout vec4 col, vec2 pos)\n{\n#if defined   DOUBLE_SLIT\n\tinitWaveDoubleSlit(col,pos);\n#elif defined ATOM2D\n\tinitWaveAtom2D(col,pos);\n#endif\n}\n\nfloat getPotential(vec2 pos)\n{\n#if defined   DOUBLE_SLIT\n\treturn getPotentialDoubleSlit(pos);\n#elif defined ATOM2D\n\treturn getPotentialAtom2D(pos);\n#endif\n}\n\n//from here on same as davidar's (https://www.shadertoy.com/view/lsKGRW)\n\nvec2 psi(vec2 xy) {\n    return texture(iChannel0, xy / iResolution.xy).xy;\n}\nvec2 k1(vec2 xy) {\n    return texture(iChannel1, xy / iResolution.xy).xy;\n}\nvec2 k2(vec2 xy) {\n    return texture(iChannel2, xy / iResolution.xy).xy;\n}\nvec2 k3(vec2 xy) {\n    return texture(iChannel3, xy / iResolution.xy).xy;\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dt = .25;\n    vec2 u = vec2(1,0);\n    vec2 v = vec2(0,1);\n    \n    vec2 c = psi(fragCoord)     + dt * k3(fragCoord);\n    vec2 n = psi(fragCoord + v) + dt * k3(fragCoord + v);\n    vec2 e = psi(fragCoord + u) + dt * k3(fragCoord + u);\n    vec2 s = psi(fragCoord - v) + dt * k3(fragCoord - v);\n    vec2 w = psi(fragCoord - u) + dt * k3(fragCoord - u);\n    \n    vec2 laplacian = n + e + s + w - 4.*c;\n    float potential = getPotential(fragCoord);\n    vec2 k4 = divi(-laplacian + potential*c);\n    \n    /***/\n\n    fragColor.xy = psi(fragCoord);\n    //fragColor.xy += dt * k1(fragCoord);\n    fragColor.xy += dt * (k1(fragCoord) + 2.*k2(fragCoord) + 2.*k3(fragCoord) + k4)/6.;\n\n    if(iFrame < 60) {\n        initWave(fragColor,fragCoord);\n    }\n\t\n    fragColor.z=potential;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// directly taken from davidar's https://www.shadertoy.com/view/lsKGRW\n\nvec2 psi(vec2 xy) {\n    return texture(iChannel0, xy / iResolution.xy).xy;\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\nfloat getPotential(vec2 pos)\n{\n    return texture(iChannel0,pos/iResolution.xy).z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u = vec2(1,0);\n    vec2 v = vec2(0,1);\n    \n    vec2 c = psi(fragCoord);\n    vec2 n = psi(fragCoord + v);\n    vec2 e = psi(fragCoord + u);\n    vec2 s = psi(fragCoord - v);\n    vec2 w = psi(fragCoord - u);\n    \n    vec2 laplacian = n + e + s + w - 4.*c;\n\n    float potential = getPotential(fragCoord);\n    \n    fragColor.xy = divi(-laplacian + potential*c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// directly taken from davidar's https://www.shadertoy.com/view/lsKGRW\n\nvec2 psi(vec2 xy) {\n    return texture(iChannel0, xy / iResolution.xy).xy;\n}\nvec2 k(vec2 xy) {\n    return texture(iChannel1, xy / iResolution.xy).xy;\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\nfloat getPotential(vec2 pos)\n{\n    return texture(iChannel0,pos/iResolution.xy).z;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dt = .25;\n    vec2 u = vec2(1,0);\n    vec2 v = vec2(0,1);\n    \n    vec2 c = psi(fragCoord)     + dt * 0.5*k(fragCoord);\n    vec2 n = psi(fragCoord + v) + dt * 0.5*k(fragCoord + v);\n    vec2 e = psi(fragCoord + u) + dt * 0.5*k(fragCoord + u);\n    vec2 s = psi(fragCoord - v) + dt * 0.5*k(fragCoord - v);\n    vec2 w = psi(fragCoord - u) + dt * 0.5*k(fragCoord - u);\n    \n    vec2 laplacian = n + e + s + w - 4.*c;\n\n    float potential = getPotential(fragCoord);\n    \n    fragColor.xy = divi(-laplacian + potential*c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// directly taken from davidar's https://www.shadertoy.com/view/lsKGRW\n\nvec2 psi(vec2 xy) {\n    return texture(iChannel0, xy / iResolution.xy).xy;\n}\nvec2 k(vec2 xy) {\n    return texture(iChannel1, xy / iResolution.xy).xy;\n}\n\nvec2 divi(vec2 c) { /* divide by sqrt(-1), ie. rotate 270 deg */\n    return vec2(c.y, -c.x);\n}\n\nfloat getPotential(vec2 pos)\n{\n    return texture(iChannel0,pos/iResolution.xy).z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dt = .25;\n    vec2 u = vec2(1,0);\n    vec2 v = vec2(0,1);\n    \n    vec2 c = psi(fragCoord)     + dt * 0.5*k(fragCoord);\n    vec2 n = psi(fragCoord + v) + dt * 0.5*k(fragCoord + v);\n    vec2 e = psi(fragCoord + u) + dt * 0.5*k(fragCoord + u);\n    vec2 s = psi(fragCoord - v) + dt * 0.5*k(fragCoord - v);\n    vec2 w = psi(fragCoord - u) + dt * 0.5*k(fragCoord - u);\n    \n    vec2 laplacian = n + e + s + w - 4.*c;\n\n    vec2 potential = vec2(getPotential(fragCoord),0);\n    \n    fragColor.xy = divi(-laplacian + potential.x*c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}