{
    "Shader": {
        "info": {
            "date": "1611364534",
            "description": "Horribly brute force bezier curve parametric plot.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttKczV",
            "likes": 4,
            "name": "Bezier Curve Parametric Plot",
            "published": 3,
            "tags": [
                "bezier",
                "curve",
                "plot",
                "parametric"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "#define PLOT_RES 100.0\n\n// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0))\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nvec2 Bezier(in vec2 a, in vec2 b, in vec2 c, in vec2 d, in float t) {\n    float tInv = 1.0 - t;\n    return a * tInv * tInv * tInv +\n           b * 3.0 * t * tInv * tInv +\n           c * 3.0 * tInv * t * t +\n           d * t * t * t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float t1 = 0.5 * iTime, t2 = iTime, t3 = 1.25 * iTime;\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 a = vec2(c1 * 3.0, s2 * 2.0);\n    vec2 b = vec2(s3 * 3.0, c2 * 2.0);\n    vec2 c = vec2(c3 * 3.0, s2 * 2.0);\n    vec2 d = vec2(c2 * 3.0, s1 * 2.0);\n\n    vec2 prevPos = a;\n    float tStep = 1.0 / PLOT_RES;\n    for (float t=tStep; t < 1.0 + tStep; t += tStep) {\n        vec2 curPos = Bezier(a, b, c, d, t);\n        color = mix(color, hue2rgb(t + iTime), smoothstep(unit, 0.0, sdLine(uv, prevPos, curPos)));\n        prevPos = curPos;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}