{
    "Shader": {
        "info": {
            "date": "1607839104",
            "description": "Short tutorial on how to store and update variables in ShaderToy. See comments for details. If you have a question, you can ask below. I'll do my best to help. Click the screen to fade from blue to red.",
            "flags": 32,
            "hasliked": 0,
            "id": "tdGBDG",
            "likes": 35,
            "name": "Variables with ShaderToy Buffers",
            "published": 3,
            "tags": [
                "tutorial",
                "shadertoy",
                "buffers",
                "variables"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 4264
        },
        "renderpass": [
            {
                "code": "// Example of using buffers to carry states between frames.\n// Important note: colors are not clamped so you have a pretty broad range to store data in.\n\n// Common - code available to all tabs (it is quite literally inserted into each)\n// Buffer A - code for variable management\n// Image - main shader that outputs to the display\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = fetchData(iChannel0, SCREEN_COLOR_ADDR).rgb;\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Addresses:\n// These should be ivec2s containing the pixel coordinates of where certain data\n// should go. The coordinates are not normalize but can range from (0, 0) to\n// (iResolution.x, iResolution.y).\nconst ivec2 SCREEN_COLOR_ADDR = ivec2(0, 0);\n\n// Unfortunately, the only way to define functions that sample iChannels in Common\n// is with #define :(\n\n// buf - iChannel to read from\n// addr - the data address in the form of an ivec2 (vector containing two integers)\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\n\n// buf_pos - fragment position (fragCoord)\n// addr - the data address in the form of an ivec2\n// storeData() just evaluates if the data address matches the fragment position\n// in which case the data should be stored in fragColor.\n#define storeData(buf_pos, addr) ivec2(buf_pos) == addr",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (storeData(fragCoord, SCREEN_COLOR_ADDR)) {\n        fragColor = vec4(0.0, 0.0, 1.0, 1.0); // Initial value\n    }\n\n    if (iFrame > 0) { // After initialization\n        if (storeData(fragCoord, SCREEN_COLOR_ADDR)) {\n            fragColor = fetchData(iChannel0, SCREEN_COLOR_ADDR); // Load value from previous frame\n\n            // Update:\n            if (iMouse.z > 0.0) {\n                // When the mouse is pressed fade into red\n                fragColor.b -= 0.05;\n                fragColor.r += 0.05;\n                fragColor = clamp(fragColor, 0.0, 1.0); // Clamp to prevent color from changing to slowly the opposite way\n            }\n\n            else {\n                // Otherwise fade back to blue\n                fragColor.b += 0.05;\n                fragColor.r -= 0.05;\n                fragColor = clamp(fragColor, 0.0, 1.0); // Clamp to prevent color from changing to slowly the opposite way\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}