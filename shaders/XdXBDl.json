{
    "Shader": {
        "info": {
            "date": "1498676978",
            "description": "This is an explorer of a certain type of complex power function:\n\nz(b) = (a + bi) ^ (c + di)\n\nControls:\nMinimap left and right: controls a, slide between -4 and 4\nUp down left right on main image: control c and d, in the natural way",
            "flags": 32,
            "hasliked": 0,
            "id": "XdXBDl",
            "likes": 3,
            "name": "Complex Power of Complex #s",
            "published": 3,
            "tags": [
                "2d",
                "complex",
                "ui",
                "sliders",
                "exponents"
            ],
            "usePreview": 0,
            "username": "culdevu",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "/* \n    Author: Daniel Taylor\n\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\tI had a bunch of witty remarks and insights in here, but then Shadertoy went and ate\n\tthis entire comment block. But that's life I guess...\n\n\tThis shader is heavily based on a previous one of mine. There's nothing interesting going\n\ton in the code here.\n\n\tThis shader is inspired by the math.stackexchange question:\n\thttps://math.stackexchange.com/questions/2339552/what-does-varying-the-imaginary-part-of-a-complex-base-do-graphically\n\n\tThe Too-Much-Effort-To-Click explanation is this:\n\t\n\tLet z(b) be a complex function defined by:\n\n\t                    (c + di)\n\t  z(b)  =  (a + bi)                                         (ascii type-setting ftw)\n\n\tIf you hold a, c, and d constant, what does the graph of z(b) look like? Another way of\n\tsaying this is 'What is b responsible for doing in the above exponential?'\n\n\tWell, apparently this. Kinda cool I guess. Eh.\n\n\tIf you play around with it though you mind find something neat. Like, apparently there's\n\ta whole family of solutions to w^z = z in the complex #s, something that isn't true for\n\tthe reals.\n\n\tAnyways, I hope you enjoy!\n*/\n\nvec2 screenToWorld(vec2 coord)\n{\n    return 2.5 * (2.0 * coord / iResolution.y - vec2(iResolution.x / iResolution.y - 1., 1.0));\n}\n\nbool xor(bool a, bool b)\n{\n    return (a || b) && (a != b);\n}\n\n// complex math stuffs\nvec2 toPolar(vec2 z)\n{\n    return vec2(length(z), atan(z.y, z.x));\n}\nvec2 complexExp(vec2 z)\n{\n    return exp(z.x) * vec2(cos(z.y), sin(z.y));\n}\nvec2 complexLog(vec2 z)\n{\n    vec2 p = toPolar(z);\n    return vec2(log(z.x), z.y);\n}\nvec2 complexDivide(vec2 top, vec2 bottom)\n{\n    /*vec2 p1 = toPolar(top);\n    vec2 p2 = toPolar(bottom);\n    \n    vec2 ret = complexExp(vec2(0, p1.y - p2.y));\n    ret *= p1.x / p2.x;\n    return ret;*/\n    \n    // I forgot my high school algebra for a moment...\n    return vec2(top.x*bottom.x + top.y*bottom.y, top.y*bottom.x - top.x*bottom.y) / (bottom.x*bottom.x + bottom.y*bottom.y);\n}\n\n// shoutouts to the amazing tool at\n//   http://dev.thi.ng/gradients/\n// for generating these color palettes\nvec3 color(float t)\n{\n    vec3 a = vec3(0.660, 0.560, 0.680);\n    vec3 b = vec3(0.718, 0.438, 0.720);\n    vec3 c = vec3(0.520, 0.800, 0.520);\n    vec3 d = vec3(-0.430, -0.397, -0.083);\n    \n    vec3 ret = a + b * cos(2.0 * 3.14159 * (c * t + d));\n    return clamp(ret, 0.0, 1.0);\n}\n\nfloat absCircular(float t)\n{\n    float a = floor(t + 0.5);\n    return mod(abs(a - t), 1.0);\n}\n\nfloat func(float x, float y)\n{\n    float a = 8.0 * texture(iChannel0, vec2(0.25,0)).x - 4.0;\n    float c = texture(iChannel0, vec2(0.75,0)).x;\n    float d = texture(iChannel0, vec2(0.75,0)).y;\n    vec2 base = vec2(a, 0);\n    vec2 exponent = screenToWorld(vec2(c*iResolution.x, d*iResolution.y));\n    \n    vec2 ret = complexExp(complexDivide(complexLog(vec2(x,y)), exponent));\n    \n    // The 'I don't want to think right now' distance function\n    // I'm going to hell for this\n    return abs(base.x - ret.x) / length(vec2(dFdx(ret.x), dFdy(ret.y))) / 50.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = screenToWorld(fragCoord);\n    \n    vec3 final = vec3(0,0,0);\n    \n    // colorful grid\n    if (xor(mod(p.x, 2.0) < 1.0, mod(p.y, 2.0) < 1.0))\n        final = color(0.4);\n    else\n        final = color(0.3);\n    \n    // dark blue lines between to denote the units\n    final = mix(color(0.1), final, smoothstep(0.0, 0.03, absCircular(p.x)));\n    final = mix(color(0.1), final, smoothstep(0.0, 0.03, absCircular(p.y)));\n    \n    // main axes\n    final = mix(color(0.0), final, pow(smoothstep(0.0, 0.05, abs(p.x)), 3.0));\n    final = mix(color(0.0), final, pow(smoothstep(0.0, 0.05, abs(p.y)), 3.0));\n    \n    // draw the equation\n    float z = func(p.x, p.y);\n    final = mix(color(0.99), final, pow(smoothstep(0.0, 0.12, abs(z)), 1.0));\n    \n    // UI\n    p = fragCoord / (iResolution.y/4.);\n    p.y -= 3.;\n    if (0. < p.x && p.x < 1. &&\n        0. < p.y && p.y < 1.)\n    {\n        final = mix(color(0.5), final, 0.2);\n        \n        if (p.x > 0.98 || p.y < 0.02)\n            final = vec3(color(0.7));\n        \n        vec2 q = texture(iChannel0, vec2(0.25)).xy;\n        if (abs(q.x - p.x) < 0.01)\n            final = vec3(color(0.7));\n    }\n    \n    // Buffer A debug\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //final = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4(final,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 final = texture(iChannel0, fragCoord.xy/iResolution.xy).xyz;\n    \n    if (iMouse.xy == vec2(0))\n    {\n        if (fragCoord.x < iResolution.x/2.)\n        {\n            fragColor = vec4(0.51, 0.0, 0, 1);\n            return;\n        }\n        else\n        {\n            fragColor = vec4(0.24, 0.53, 0, 1);\n            return;\n        }   \n    }\n    \n    if (0. <= iMouse.x && iMouse.x < iResolution.y/4. &&\n        iResolution.y*0.75 < iMouse.y && iMouse.y <= iResolution.y)\n    {\n        if (fragCoord.x < iResolution.x/2.)\n        {\n            final.x = iMouse.x / (iResolution.y/4.);\n        }\n    }\n    else if (fragCoord.x >= iResolution.x/2.)\n    {\n        final.x = iMouse.x / iResolution.x;\n        final.y = iMouse.y / iResolution.y;\n    }\n    \n    fragColor = vec4(final, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}