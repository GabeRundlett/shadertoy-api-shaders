{
    "Shader": {
        "info": {
            "date": "1710101501",
            "description": "Not quite sure what I wanted to do here. Looks sorta like propeller is sucking in the smoke.",
            "flags": 0,
            "hasliked": 0,
            "id": "M3B3WK",
            "likes": 1,
            "name": "Propeller sucking smoke",
            "published": 3,
            "tags": [
                "sdf",
                "smoke",
                "bernoulli",
                "propeller"
            ],
            "usePreview": 0,
            "username": "Mermersk",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "/*\n    Author: Mermersk (ic4ruz39@gmail.com)\n*/\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define a 2.0\n//#define lightPosition vec3(cos(iTime)*5.0, 0.0, sin(iTime)*5.0)\n#define lightPosition vec3(10.0, 12.0, -14.0)\n#define propRotSpeed 6.0\n\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nmat2 Rot(float angle) {\n    float s=sin(angle), c=cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n//returns the distance for each angle to the lemniscate line-position. a controls the size of it.\nfloat basicLemniscate(float angle) {\n    float lemniR = a*a*cos(2.0*angle);\n    return lemniR;\n}\n\n//Polar distance formula, between 2 points:\nfloat polarDist(vec2 p1, vec2 p2) {\n    return sqrt(p1.x*p1.x + p2.x*p2.x - 2.0*p1.x*p2.x*cos(abs(p2.y - p1.y)));\n}\n\nfloat lemniD5(vec2 puv) {\n   \n   float bracket1 = 0.0;\n   //Its enough to check from 0 to 0.785. (We are only calculating for 1 quadrant(where x and y is +) all other quadrants are mirror of this)\n   float bracket2 = PI*0.25;\n   float midPoint = (bracket1 + bracket2) / 2.0;\n   \n   //Bisection method\n   for (int i = 0; i < 16; i++) {\n        //This is the derivative of polar distance formula where lemniscate equation is injected in for angle2. Found derivative via WolframAlpha.\n        float midPointVal = a*a*puv.x*(sin(puv.y + midPoint) - 3.0*sin(puv.y - 3.0*midPoint)) - 2.0*a*a*a*a*sin(4.0*midPoint);\n        \n        int gsign = midPointVal > 0.0 ? 1 : -1;\n        \n        if (gsign == 1) {\n            bracket2 = midPoint;\n        } else {\n            bracket1 = midPoint;\n        }\n        \n        midPoint = (bracket1 + bracket2) / 2.0;\n   }\n   \n   vec2 posOnLmeniscateClosest = vec2(basicLemniscate(midPoint), midPoint);\n   \n   float d = polarDist(posOnLmeniscateClosest, puv);\n   \n   //Give distance field the right sign, - inside and + outside.\n   vec2 puvCart = vec2(puv.x * cos(puv.y), puv.x * sin(puv.y));\n   vec2 polcCart = vec2(posOnLmeniscateClosest.x * cos(posOnLmeniscateClosest.y), posOnLmeniscateClosest.x * sin(posOnLmeniscateClosest.y));\n   \n   vec2 lemniscateToPos = puvCart - polcCart;\n   d = sign(lemniscateToPos.y) * d;\n   \n   return d;\n\n}\n\n//From IQ\nfloat opExtrusion( in vec3 p, in float sdf, in float h )\n{\n    vec2 w = vec2( sdf, abs(p.z) - h);\n    //Original return value: //min(max(w.x,w.y),0.0) + length(max(w,0.0));\n  \treturn length(max(w, 0.0));\n}\n\n\nfloat gyroid (vec3 p) { return dot(sin(p),cos(p.yzx)); }\n\n//Gyroid nosie found here: https://www.shadertoy.com/view/cl23Wt\nfloat gnoise (vec3 p)\n{   \n    float result = 0.0, b = 0.5;\n    float count = 6.0;\n   \n    for (float i = 0.; i < count; i++)\n    {\n        p.y -= iTime*0.06 + 16.0 + result*0.5;\n        p.x += iTime*(0.12) + 16.0 + result*0.5;\n       \n        result += gyroid(p/b)*b;\n        b = b / 2.0;\n    }\n    return max(result+0.2, 0.0);\n}\n\n\nfloat GetDist(vec3 p) {\n    float d = sdBox(p - lightPosition, vec3(0.2));\n    \n    p.xy = Rot(iTime*propRotSpeed) * p.xy;\n    \n    vec2 sp = p.xy;\n    \n    sp = abs(vec2(sp.x, sp.y));\n    \n    float prop = lemniD5(vec2(length(sp.xy), atan(sp.y, sp.x)));\n    \n    float propellerD = opExtrusion(p, prop, 0.0375);\n    \n    float tubeD = length(p.xy) - 0.2;\n    \n    tubeD = max(tubeD, -p.z - 0.2);\n    \n    return min(propellerD, tubeD);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\nmat3 getViewMatrix(vec3 cameraPos, vec3 cameraTarget, vec3 cameraUp)\n{\n    // Calculate the view direction vector\n    vec3 viewDir = normalize(cameraTarget - cameraPos);\n\n    // Calculate the right and up direction vectors\n    vec3 rightDir = normalize(cross(cameraUp, viewDir));\n    vec3 upDir = cross(viewDir, rightDir);\n\n    // Create the view matrix\n    mat3 viewMatrix = mat3(rightDir, upDir, viewDir);\n\n    return viewMatrix;\n}\n\n\nfloat specularLightning(vec3 normals, vec3 lightDir, vec3 viewDir) {\n    //Controls strength of specular light, but doesnt really effect its range\n    float specularStrength = 0.15;\n    //Reflect light-direction over the normal vector\n    vec3 rlon = reflect(lightDir, normals);\n    \n    float g = max(0.0, dot(viewDir, rlon));\n    \n    //The power effects its range, lower numbers = greater area but lower intensity, higher number = less area but more intense\n    float spec = pow(g, 12.0);\n    \n    return max(0.0, spec * specularStrength); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = (uv * 2.0) - 1.0;\n\t\n    float ar = iResolution.x/iResolution.y;\n    \n    uv.x *= ar;\n\n    vec3 ro = vec3(-3.0, 1.0, -5.0);\n    \n    vec3 rd = getViewMatrix(ro, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0)) * normalize(vec3(uv, 1.0));\n    \n    vec3 col = vec3(0.0, 0.0, 0.0);\n   \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    vec3 tex = texture(iChannel0, (Rot(iTime*propRotSpeed) * p.xy)*0.25).rgb;\n    \n    vec3 propBaseColor = vec3(0.45, 0.45, 0.45)*0.5;\n    \n    //Gyroid noise\n    float gn = gnoise(vec3(uv, length(uv*0.5)));\n    \n    float gnCapped = gn * (1.0-smoothstep(0.3, 1.4, length(uv)));\n    \n    vec3 smokeColor = vec3(0.33, 0.43, 0.63);\n    \n    vec3 smokeCol = gn * mix(smokeColor, vec3(0.0, 0.2, 1.0), gn-0.75);\n    \n    vec3 n = GetNormal(p);\n    //DFisturb normals slightly to get more glistening effect\n    n += vec3(tex.x, tex.y, 0.0)*0.5;\n    vec3 lightPos = lightPosition;\n    vec3 lightDir = normalize(lightPos - p);\n    float dif = max(dot(n, lightDir), 0.0); //*.5+.5;\n    float specular = specularLightning(n, lightDir, rd);\n    \n    if(d<MAX_DIST) {\n        col = (tex*propBaseColor) * (dif + specular);\n    }\n    \n    col = mix(col, smokeCol, clamp(gnCapped + uv.x - 0.25, 0.0, 1.0));\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}