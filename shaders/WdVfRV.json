{
    "Shader": {
        "info": {
            "date": "1607538262",
            "description": "The equation should be z = z^n + c where n is the 3rd axis. Thanks to Michael0884 and others on the Marble Marcher Discord!",
            "flags": 32,
            "hasliked": 0,
            "id": "WdVfRV",
            "likes": 3,
            "name": "Volumetric Mandelbrot Thing",
            "published": 3,
            "tags": [
                "procedural",
                "fractal",
                "raymarch",
                "dither",
                "volumetric",
                "raymarcher",
                "mandebrot"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "// Fork of \"Better Volumetric Dithering\" by Zi7ar21. https://shadertoy.com/view/wt2fDD\n// 2020-12-09 17:47:14\n\n// ^^^ Everthing is up here in Buffer A ^^^\n// It is seperate so you can press the button on the bottom of the editor to export a 32-Bit Float OpenEXR!\n\n// Zi7ar21's Adaptive Step Volumetric Raymarcher --- September 1st, 2020\n// I Deem You Allowed to Use My Code even Commercially and Even Modify it as Long as:\n// You keep this disclaimer.\n// You do not modify the terms\n\n// You do not have to keep my credits, however I urge you to leave them here in the source.\n\n// If this Code is Being Reused Entirely,\n// Then the Original and Possibly Updated Version Can be Found Here:\n// https://www.shadertoy.com/view/ttfBDN\n// Fork of \"My Nebula\" by Zi7ar21. https://shadertoy.com/view/ttfBDN [August 2nd 2020 00:53:15]\n\n// Learn the Basics of Raymarching Like I Did Here:\n// https://youtu.be/PGtv-dBi2wE\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ##### COMMON VALUES #####\n\n// Oof ugly mess below watch out lol\n\n// ##### Fractal #####\n\nfloat fractal(vec3 pos){\n    // Iterate\n    vec2 z2 = vec2(0.0);\n    vec2 c = vec2(pos.xy*2.0);\n\tfor (int i=1; i<=iterations; i++){\n        z2 = vec2(z2.x*z2.x - z2.y *z2.y, tan((clamp(pos.z*4.0, -pi/2.0, pi/2.0))) * z2.x*z2.y);\n        z2 += z2+c;\n\t}\n    // Compute Density\n    float escape = clamp((-(log(length(z2))/float(iterations)))-pow(pos.z, 2.0), 0.0, 1.0);\n    return escape;\n}\n\n// ##### RAYMARCHING #####\nvec3 directLight(vec3 raypos){\n    vec3 LightColor = vec3(1.0);\n    vec3 LightDirection = normalize(vec3(-1.0, -1.0, 1.0));\n    float distorigin = 0.0;\n    vec3 density = vec3(0.0);\n    vec3 raydirmod = LightDirection*STEP_SIZE*rand();\n    vec3 attenuation = vec3(1.0);\n    for(int i=0; i<64; i++){\n        raypos = raypos+raydirmod;\n        density = vec3(fractal(raypos)*DENSITY);\n        vec3 absorbance = exp(-density);\n        attenuation *= absorbance;\n    }\n    return LightColor*attenuation;\n}\n\n// Compute/March the Ray\nvec3 raymarch(vec3 camerapos, vec3 raydir, vec2 coord){\n    float distorigin = 0.0;\n    //vec3 densityadd = vec3(0.0);\n    //vec3 density = vec3(0.0);\n    vec3 raypos = camerapos;\n    vec3 raydirmod = raydir*rand()*STEP_SIZE*2.0;\n    vec3 outCol = vec3(0.0);\n    vec3 attenuation = vec3(1.0);\n    for(int i=0; i<MAX_MARCHES; i++){\n        raypos = raypos + raydirmod;\n        // LoicVDB: don't use this, the density doesn't accumulate, its\n        // only purpose is to compute absorbance and transmittance\n        //densityadd = vec3(fractal(raypos)*DENSITY);\n        //density = vec3(density+densityadd);\n\n        // LoicVDB: just use this for density instead:\n        vec3 density = vec3(fractal(raypos)*DENSITY);\n        vec3 absorbance = exp(-density*STEP_SIZE);\n        vec3 transmittance = 1.0-absorbance;\n        vec3 directlighting = attenuation*transmittance;\n        if((density.r+density.g+density.b) > 0.0){\n            directlighting = directlighting*directLight(raypos);\n        }\n        outCol += directlighting;\n        attenuation *= absorbance;\n        distorigin = raypos.z-camerapos.z;\n        if(distorigin>MAX_DISTANCE) break;\n    }\n    return outCol;//*attenuation;\n}\n\n// ##### RENDERING #####\n// Render the Image\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // LoicVDB: I store the number of samples in the alpha channel\n    // LoicVDB: take the previous color and sample count (black and 0 if on first frame)\n    vec4 oldFragColor = vec4(0.0);\n    if(iFrame != 0) oldFragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    // LoicVDB:I put it in the fragColor var because I want to keep it even if it's not in a tile\n    fragColor = oldFragColor;\n\n    // LoicVDB's Hyper Epic Tiles Function\n    int index = int(fragCoord.x/iResolution.x*float(TILES))\n              + int(fragCoord.y/iResolution.y*float(TILES))*TILES;\n    if(iFrame-(TILES*TILES*(iFrame/(TILES*TILES))) != index) return;\n\n    // Start RNG\n    INIT_RNG;\n    #ifdef ROTATION_MATRIX\n        // Camera Orientation\n        vec3 camerapos = vec3(1.0, -1.0, 1.0);\n\t    // Dumb rotation matrix hecking Michael made me make\n\t    float xrot = atan(sqrt(2.0));\n\t    float yrot = pi;\n\t    float zrot = -pi/4.0;\n\t    // Camera Orientation (Cursed)\n        mat3 dir;\n\t    dir[0] = vec3(cos(yrot)*cos(zrot),-cos(yrot)*sin(zrot),sin(yrot));\n\t    dir[1] = vec3(cos(xrot)*sin(zrot)+sin(xrot)*sin(yrot)*cos(zrot),cos(xrot)*cos(zrot)-sin(xrot)*sin(yrot)*sin(zrot),-sin(xrot)*cos(yrot));\n\t    dir[2] = vec3(sin(xrot)*sin(zrot)-cos(xrot)*sin(yrot)*cos(zrot),sin(xrot)*cos(zrot)+cos(xrot)*sin(yrot)*sin(zrot),cos(xrot)*cos(yrot));\n    #endif\n    #ifndef ROTATION_MATRIX\n        // Camera Orientation\n        vec3 camerapos = vec3(0.0,0.0,-1.0);\n        vec3 xdir = vec3(1.0,0.0,0.0);\n        vec3 ydir = vec3(0.0,1.0,0.0);\n        vec3 zdir = vec3(0.0,0.0,1.0);\n    #endif\n\n    // Undistorted Normalized Pixel Coordinates (From 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    vec2 uvd = fragCoord/iResolution.xy;\n    #ifdef ROTATION_MATRIX\n    \tvec3 raydir = normalize(FOV*(uv.x*dir[0]+uv.y*dir[1])+dir[2]);\n    #endif\n    #ifndef ROTATION_MATRIX\n        vec3 raydir = normalize(FOV*(uv.x*xdir+uv.y*ydir)+zdir);\n    #endif\n\n    // Raymarch\n\tvec3 raymarched = raymarch(camerapos, raydir, fragCoord);\n\n    // Output to Screen\n    fragColor += vec4(pow(raymarched, vec3(1.0/2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ^^^ Switch Between Common, Buffer A, and Buffer B ^^^\n// This is for Settings and Global Functions\n\n// ##### COMMON VALUES #####\n\n// Change these Parameters to Your Liking!\n// Maximum Number of Marches,\n// You want it to limit the raymarcher before the max distance parameter or it will look bad.\n#define MAX_MARCHES 32\n\n// Redundant for this idk if the max marches are large and you see ugly stuff then increase this\n#define MAX_DISTANCE 6.0\n\n// Size of Steps, smaller means more sampling over depth but also means more computation.\n// Increase max marches if the scene goes invisible.\n#define STEP_SIZE 0.125\n\n// Camera's FOV\n#define FOV 1.0\n\n// Uncomment to enable rotation matrix for rotating camera, currently too slow\n#define ROTATION_MATRIX\n\n// Density of the volume. Changes how much light it scatters.\n#define DENSITY 32.0\n\n// Mandelbrot Set Iterations, more means more detail.\n#define iterations 32\n\n// Tiles, more means easier on the Hardware\n#define TILES 4 // Set to 1 if you have a computer that can handle it so it will render faster\n// So kindly made by LoicVDB uwu\n\n// Yummy, Pi! 32-Bit Floating Point Precision limits us to 3.14159265, but hey one day Shadertoy\n// may support double precision so why not throw in 3589793.\n#define pi 3.141592653589793\n\n// High-Quality Noise from https://www.shadertoy.com/view/tdGfWc\nuint ns;\n#define INIT_RNG ns = uint(iFrame*24676)+uint(fragCoord.x*5557.0)+uint(fragCoord.y*8482.0);\nvoid RNGupdate(){\n    // Integer hash copied from Hugo Elias\n\tns = (ns<<13U)^ns;\n    ns = ns*(ns*ns*15731U+789221U)+1376312589U;\n}\nfloat rand(){\n    RNGupdate();\n    return float((ns*ns)&uvec2(0x7fffffffU))/float(0x7fffffff);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// ^^^ Switch Between Common, Buffer A, and Buffer B ^^^\n// This is for Exporting a 32-Bit Float OpenEXR using the Button on the Bottom of the Editor\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // LoicVDB: take the color from the A buffer\n    vec4 texel = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // LoicVDB: divide it by the sample count (the alpha channel)\n    vec3 color = (texel.a == 0.0 ? vec3(0.0) : texel.rgb / texel.a);\n    \n    // Output to screen\n    fragColor = vec4(pow(color, vec3(1.0/2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}