{
    "Shader": {
        "info": {
            "date": "1712596981",
            "description": "\n",
            "flags": 0,
            "hasliked": 0,
            "id": "McG3DR",
            "likes": 8,
            "name": "2d sdf soft shadow",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "shadow",
                "light"
            ],
            "usePreview": 0,
            "username": "breeze028",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "float circleDist(vec2 p, float radius)\n{\n    return length(p) - radius;\n}\n\nfloat boxDist(vec2 p, vec2 size, float radius)\n{\n\tsize -= vec2(radius);\n\tvec2 d = abs(p) - size;\n  \treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n}\n\nfloat starDist(in vec2 p, in float r, in float m)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x, k1.y);\n    \n    p.x = abs(p.x);\n    p -= 2.0 * max(dot(k1, p), 0.0) * k1;\n    p -= 2.0 * max(dot(k2, p), 0.0) * k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ab = m * vec2(-k1.y, k1.x) - vec2(0, r); \n    float h = clamp(dot(p, ab) / dot(ab, ab), 0.0, 1.0 );\n    return length(p - ab * h) * sign(p.y * ab.x - p.x * ab.y);\n}\n\nfloat sceneDist(vec2 p)\n{\n    float dist = 100.0;\n\n    // circle\n    vec2 p1 = p;\n    float dist1 = circleDist(p1, 0.15);\n    dist = min(dist, dist1);\n\n    // rectangle\n    vec2 p2 = p + vec2(-0.5, -0.5);\n    float dist2 = boxDist(p2, vec2(0.10, 0.18), 0.01);\n    dist = min(dist, dist2);\n\n    // star\n    vec2 p3 = p + vec2(0.2, 0.55);\n    float dist3 = starDist(p3, 0.2, 0.08);\n    dist = min(dist, dist3);\n\n    return dist;\n}\n\nfloat shadow(vec2 p, vec2 lightPos)\n{\n    float res = 1.0;\n    vec2  dir = normalize(lightPos - p);\n    float t   = 0.0;                      // travel distance\n\n    for (int i = 0; i < 64; i++)\n    {\n        float h = sceneDist(p + t * dir);\n\n        if (t > distance(p, lightPos))\n            break;\n\n        if (h < 0.001)\n            return 0.0;\n\n        res = min(res, 32.0 * h / t);\n        t += h;\n    }\n\n    return res;\n}\n\nvec3 drawLight(vec2 p, vec2 lightPos, vec3 lightColor, float range)\n{\n    // distance to light\n\tfloat ld = length(p - lightPos);\n\t\n\t// out of range\n\tif (ld > range) return vec3(0.0);\n\t\n\t// shadow and falloff\n\tfloat shad = shadow(p, lightPos);\n\tfloat fall = (range - ld)/range;\n\tfall *= fall;\n\tfloat source = clamp(-circleDist(p - lightPos, 0.05), 0.0, 1.0);\n\treturn (shad * fall + source) * lightColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // x: -aspectRatio ~ aspectRatio, y: -1 ~ 1\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // lightPos set-up\n    vec2 light1Pos = 1.0 * vec2(cos(iTime), sin(iTime));\n    vec2 light2Pos = 0.3 * vec2(cos(2.0 * iTime), sin(-2.0 * iTime));\n    \n    // light & shadow\n    vec3 color = vec3(0.0);\n    color += drawLight(uv, light1Pos, vec3(0.5, 0.75, 1.0), 2.0);\n    color += drawLight(uv, light2Pos, vec3(1.0, 0.75, 0.5), 1.5);\n\n    // fill\n    color = mix(vec3(1.0, 0.4, 0.0), color, smoothstep(-0.001, 0.001, sceneDist(uv)));\n    // border\n    color = mix(vec3(0.0, 0.0, 0.0), color, smoothstep(0.000, 0.003, abs(sceneDist(uv))));\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}