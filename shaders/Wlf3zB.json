{
    "Shader": {
        "info": {
            "date": "1556646564",
            "description": "There you go psonice, they are different heights now. And i made it a bit synthwavey as well lmao.",
            "flags": 32,
            "hasliked": 0,
            "id": "Wlf3zB",
            "likes": 11,
            "name": "Voronoi Tron Towers",
            "published": 3,
            "tags": [
                "voronoi",
                "hdr"
            ],
            "usePreview": 0,
            "username": "MrsBeanbag",
            "viewed": 716
        },
        "renderpass": [
            {
                "code": "// HDR Bloom borrowed from https://www.shadertoy.com/view/XdG3zd\n\n#define KERNEL_SIZE 4\n#define KERNEL_SIZE_F float(KERNEL_SIZE)\nconst float PI = 3.14159265359;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec3 vResult = vec3(0.0);\n    \n    float fTot = 0.0;\n    float fY = -KERNEL_SIZE_F;\n    for( int y=-KERNEL_SIZE; y<=KERNEL_SIZE; y++ )\n    {      \n        vec2 vOffset = vec2( 0.0, fY );\n        vec2 vTapUV =  (fragCoord.xy + vOffset) / iResolution.xy;\n\n        vec3 vTapSample = texture( iChannel0, vTapUV ).rgb;\n        vTapSample -= vec3(1.0);\n        vTapSample = max(vTapSample.rgb, vec3(0.0));\n            \n        float f = fY / KERNEL_SIZE_F;\n            \n        float fWeight = cos(f*PI) + 1.0;\n        vResult += vTapSample * fWeight;\n        fTot += fWeight;\n        fY += 1.0;\n    }\n    vResult *= (2.0) / fTot;\n        \n    vec2 vTapUV = fragCoord.xy / iResolution.xy;\n\tvResult += texture( iChannel0, vTapUV ).rgb;\n    vec3 overbright = max(vResult - vec3(1.0), 0.0);\n    vResult += length(overbright * vec3(0.5, 1.0, 0.3)) * 0.25;\n\n\tfragColor = vec4(vResult, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//uncomment this line to get mouse control rofl\n//#define MOUSE_CONTROL\n\n// ray marching\nconst int max_iterations = 128;\nconst float grad_step = 0.0001;\nconst float min_dist = 0.005;\nconst float clip_far = 1000.0;\n\n// math\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\n\nvec3 diffuse_colour = vec3(0.0);\nvec3 glow_colour = vec3(0.0);\nvec3 final_diff_colour = vec3(0.0);\nvec3 final_glow_colour = vec3(0.0);\n\nconst vec3 sky_colour = vec3(0.2, 0.1, 0.4);\nconst vec3 clouds_colour = vec3(1.0);\nconst vec3 sun_colour = 32.0 * vec3(1.0, 1.0, 0.0);\nconst vec3 sun_pos = normalize(vec3( 20.0, 30.0, 30.0 ));\n\n//get a scalar random value from a 3d value\nfloat rand2dTo1d(vec2 value, vec2 dotDir) {\n    //make value smaller to avoid artefacts\n    vec2 smallValue = sin(value);\n    //get scalar value from 3d vector\n    float random = dot(smallValue, dotDir);\n    //make value more random by making it bigger and then taking the factional part\n    random = fract(sin(random) * 143758.5453);\n    return random;\n}\n\nvec3 rand2dTo3d(vec2 value){\n    return vec3(\n        rand2dTo1d(value, vec2(12.989, 78.233)),\n        rand2dTo1d(value, vec2(39.346, 11.135)),\n        rand2dTo1d(value, vec2(73.156, 52.235))\n    );\n}\n\n/*vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}*/\n\n// this isn't very random but it's a good deal quicker than the above\nvec2 random2( vec2 p ) {\n    return fract(p * vec2(9.61, 3.28) - p.yx * vec2(5.85, 7.11));\n}\n\n// https://iquilezles.org/articles/smin\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nfloat smax( float a, float b, float k ) {\n    return -smin(-a, -b, k);\n}\n\nvec2 cell_position(vec2 cell) {\n    vec2 point = random2(cell);\n    point = 0.5 - 0.4*sin(6.2831*point);\n    return cell + point;\n}\n\nfloat dist_field(vec3 p) {\n    float md = 1000.0;\n    vec2 mcell = vec2(0.0);\n    vec2 mpos = vec2(0.0);\n    vec2 fuv = floor(p.xz);\n    for (int i = -1; i <= 1; ++i) {\n\t    for (int j = -1; j <= 1; ++j) {\n            vec2 ij = vec2(float(i), float(j));\n            vec2 cell = ij + fuv;\n            vec2 pos = cell_position(cell);\n    \t\tvec2 mid = p.xz - pos;\n            float d = dot(mid, mid);\n            if (d < md) {\n                md = d;\n                mcell = cell;\n                mpos = pos;\n            }\n        }\n    }\n    \n    float plane = p.y;\n    float outer = 100.0;\n    for (int i = -1; i <= 1; ++i) {\n\t    for (int j = -1; j <= 1; ++j) {\n            vec2 ij = vec2(float(i), float(j));\n   \t        vec2 cell = ij + fuv;\n            if (cell != mcell) {\n\t            vec2 pos = cell_position(cell);\n\t\t\t    vec2 n = normalize(mpos - pos);\n\t\t\t    vec2 pt = (mpos + pos) * 0.5;\n                float boundary = dot(n, p.xz - pt);\n                outer = min(outer, 0.2 + boundary);\n\t\t\t    plane = max(plane, 0.2 - boundary);\n            }\n        }\n    }\n    if (outer >= 0.0) {\n        plane = smax(plane,\n                    p.y + 1.0*rand2dTo1d(mcell, vec2(52.235, 09.151)),\n                    0.1);\n        plane = min(plane, outer);\n    }\n\n    float floor = p.y + 1.1;\n    if (floor < plane) {\n        float lines = smoothstep(0.5, 0.6, 5.0*plane);\n        lines *= 1.0-smoothstep(0.7, 0.8, 5.0*plane);\n        lines = max(0.0, lines);\n        glow_colour = 4.0*lines*rand2dTo3d(mcell);\n        plane = min(plane, floor);\n\t    diffuse_colour = (1.0-lines)*vec3(0.5);\n    } else {\n        glow_colour = vec3(0.0);\n\t    diffuse_colour = vec3(0.2);\n    }\n    return plane;\n}\n\nvec3 skybox(vec3 dir) {\n    float horizon = smoothstep(0.0, 0.25, dir.y);\n    float cloud = mix(0.8, 0.0, horizon);\n    return mix(sky_colour, clouds_colour, cloud);\n}\n\n// get gradient in the world\nvec3 gradient( vec3 p ) {\n    const vec2 k = vec2(1,-1);\n    const vec2 kg = vec2(grad_step,-grad_step);\n    return vec3( k.xyy*dist_field( p + kg.xyy) +\n                 k.yyx*dist_field( p + kg.yyx) +\n                 k.yxy*dist_field( p + kg.yxy) +\n                 k.xxx*dist_field( p + kg.xxx) );\n}\n\n// parallel light source\nvec3 shading( vec3 v, vec3 n, vec3 dir, vec3 eye ) {\n\tfloat diffuse  = max( 0.0, dot( sun_pos, n ) );\n\tfloat shininess = 80.0;\n\t\n\tvec3 ref = reflect( dir, n );\n\tfloat specular = max( 0.0, dot( sun_pos, ref ) );\n\t\t\n\tspecular = pow( specular, shininess );\n\t\t\n\treturn final_diff_colour * diffuse + vec3(specular);\n}\n\n// ray marching\nvec3 ray_marching(vec3 o, vec3 dir) {\n    vec3 colour = vec3(0.0);\n    vec3 acc_refl = vec3(1.0);\n\n    // give the ray a bit of a head start by jumping\n    // straight to the upper bounding plane!\n    float t = 0.0;\n    if (dir.y < 0.0) {\n        t = -o.y/dir.y;\n    } else {\n        return skybox(dir);\n    }\n\tt = max(t, min_dist*2.0);\n\n    vec3 v;\n    for (int i = 0; i < max_iterations; i++) {\n       \tfloat d = dist_field(v = o + dir * t);\n\n        if (d <= min_dist) {\n            break;\n        }\n\t\tif ((t+=d) >= clip_far) {\n            return skybox(dir);\n\t    }\n    }\n\tfinal_diff_colour = diffuse_colour;\n\tfinal_glow_colour = glow_colour;\n\n    vec3 n = normalize( gradient(v) );\n\n    colour += shading( v, n, dir, o );\n    colour += glow_colour;\n\n    return colour;\n}\n\n// get ray direction\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\n\treturn normalize( vec3( xy, -z ) );\n}\n\n// camera rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nconst vec2 spin = vec2(0.005, 0.0041);\nconst float radius = 120.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// rotate camera\n#ifdef MOUSE_CONTROL\n\tmat3 rot = rotationXY( vec2(PI, -PI) * ((iMouse.xy - iResolution.xy * 0.5)/iResolution.xy).yx );\n#else\n\tmat3 rot = rotationXY( vec2( -0.7, iTime * 0.2 ) );\n#endif\n\n\t// default ray origin\n\tvec3 eye = vec3( 0.0, 0.0, 0.0 );\n\teye = rot * eye;\n    \n    // move in a sinusoidal path so we don't end up in floating point hell!\n    vec2 camera = radius * cos(iTime * spin);\n    \n    eye += vec3(camera, 1.0).xzy;\n\n    // default ray dir\n\tvec3 dir = rot * ray_dir( 60.0, iResolution.xy, fragCoord.xy);\n\tvec3 color = ray_marching(eye, dir);\n\n    fragColor = vec4(color, 1.0);\n    return;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// HDR Bloom borrowed from https://www.shadertoy.com/view/XdG3zd\n\n#define KERNEL_SIZE 4\n#define KERNEL_SIZE_F float(KERNEL_SIZE)\nconst float PI = 3.14159265359;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec3 vResult = vec3(0.0);\n    \n    float fTot = 0.0;\n    float fX = -KERNEL_SIZE_F;\n\tfor( int x=-KERNEL_SIZE; x<=KERNEL_SIZE; x++ )\n    {            \n        vec2 vOffset = vec2( fX, 0.0 );\n        vec2 vTapUV =  (fragCoord.xy + vOffset) / iResolution.xy;\n\n        vec3 vTapSample = texture( iChannel0, vTapUV ).rgb;\n        vTapSample -= vec3(1.0);\n        vTapSample = max(vTapSample.rgb, vec3(0.0));\n            \n        float f = fX / KERNEL_SIZE_F;\n            \n        float fWeight = cos(f*PI) + 1.0;\n        vResult += vTapSample * fWeight;\n        fTot += fWeight;\n\t    fX += 1.0;\n    }\n    vResult *= (2.0) / fTot;\n        \n    vec2 vTapUV = fragCoord.xy / iResolution.xy;\n\tvResult += texture( iChannel0, vTapUV ).rgb;\n\n\tfragColor = vec4(vResult, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}