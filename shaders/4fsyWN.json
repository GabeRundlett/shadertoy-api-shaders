{
    "Shader": {
        "info": {
            "date": "1721144923",
            "description": "Particle fireworks over the sea.\n\nGenerated by ClaudeAI",
            "flags": 0,
            "hasliked": 0,
            "id": "4fsyWN",
            "likes": 0,
            "name": "New Year's Eve at Sea",
            "published": 3,
            "tags": [
                "claude"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define NUM_FIREWORKS 8\n#define NUM_PARTICLES 80\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nstruct Firework {\n    vec3 pos;\n    float time;\n    vec3 color;\n    float type;\n};\n\nFirework fireworks[NUM_FIREWORKS];\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid initFireworks() {\n    for (int i = 0; i < NUM_FIREWORKS; i++) {\n        float x = mix(-15.0, 15.0, hash(float(i) * 12.345));\n        float z = mix(-15.0, 15.0, hash(float(i) * 45.678));\n        float y = mix(5.0, 20.0, hash(float(i) * 78.901));\n        vec3 color = palette(hash(float(i) * 23.456));\n        float type = floor(hash(float(i) * 34.567) * 3.0);\n        fireworks[i] = Firework(vec3(x, y, z), mod(iTime + hash(float(i)), 4.0), color, type);\n    }\n}\n\nvec3 particleEffect(vec3 ro, vec3 rd, Firework fw) {\n    vec3 color = vec3(0);\n    float t = fw.time;\n    \n    for (int i = 0; i < NUM_PARTICLES; i++) {\n        float angle = hash(float(i)) * 6.283;\n        float speed = mix(2.0, 6.0, hash(float(i) * 123.456));\n        vec3 dir;\n        \n        if (fw.type < 1.0) {\n            dir = normalize(vec3(cos(angle), hash(float(i) * 789.012) * 2.0 - 1.0, sin(angle)));\n        } else if (fw.type < 2.0) {\n            dir = normalize(vec3(cos(angle), 0.1 * (hash(float(i) * 789.012) * 2.0 - 1.0), sin(angle)));\n        } else {\n            float spiral = 2.0 * 3.14159 * hash(float(i) * 345.678);\n            dir = normalize(vec3(cos(angle + spiral * t), 0.5 * (hash(float(i) * 789.012) * 2.0 - 1.0), sin(angle + spiral * t)));\n        }\n        \n        vec3 pos = fw.pos + dir * speed * t;\n        \n        float size = mix(0.05, 0.15, hash(float(i) * 345.678));\n        float fade = 1.0 - smoothstep(1.0, 2.5, t);\n        \n        vec3 closestPoint = ro + max(0.0, dot(pos - ro, rd)) * rd;\n        float dist = length(closestPoint - pos);\n        \n        if (dist < size) {\n            float intensity = smoothstep(size, 0.0, dist) * fade;\n            vec3 particleColor = mix(fw.color, palette(hash(float(i) * 56.789)), 0.5);\n            color += particleColor * intensity * (1.0 + 0.5 * sin(20.0 * t));\n        }\n    }\n    \n    return color;\n}\n\nfloat sdWater(vec3 p) {\n    float wave1 = sin(p.x * 0.5 + iTime) * 0.5;\n    float wave2 = sin(p.z * 0.3 - iTime * 0.5) * 0.3;\n    return p.y + 2.0 + wave1 + wave2;\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat getDist(vec3 p) {\n    float water = sdWater(p);\n    \n    // Add moon\n    vec3 moonPos = vec3(20.0, 15.0, 10.0);\n    float moonDist = sdSphere(p - moonPos, 3.0);\n    \n    return min(water, moonDist);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx)\n    );\n    return normalize(n);\n}\n\nvec3 getWaterColor(vec3 p, vec3 rd, vec3 n) {\n    vec3 baseColor = vec3(0.0, 0.1, 0.2);\n    vec3 reflectDir = reflect(rd, n);\n    float fresnel = pow(1.0 - max(0.0, dot(-rd, n)), 5.0);\n    vec3 skyReflection = mix(vec3(0.0), vec3(0.1, 0.2, 0.3), reflectDir.y * 0.5 + 0.5);\n    return mix(baseColor, skyReflection, fresnel);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 2, -15);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    vec3 col = vec3(0);\n    \n    float d = rayMarch(ro, rd);\n    \n    if (d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = getNormal(p);\n        \n        if (p.y < -1.0) {\n            // Water surface\n            col = getWaterColor(p, rd, n);\n            // Add some specular highlight\n            vec3 lightDir = normalize(vec3(0.5, 0.8, 0.2));\n            vec3 reflectDir = reflect(-lightDir, n);\n            float spec = pow(max(dot(reflectDir, -rd), 0.0), 32.0);\n            col += vec3(1.0) * spec * 0.5;\n        } else {\n            // Moon\n            col = vec3(0.9, 0.9, 0.8);  // Moon color\n            col *= max(0.2, dot(n, normalize(vec3(-0.5, 0.8, -0.2))));  // Moon lighting\n        }\n    } else {\n        // Black background\n        col = vec3(0.0, 0.0, 0.0);\n    }\n    \n    initFireworks();\n    for (int i = 0; i < NUM_FIREWORKS; i++) {\n        col += particleEffect(ro, rd, fireworks[i]);\n    }\n    \n    // Bloom effect\n    col += max(vec3(0), col - 0.7) * 0.5;\n    \n    // Tone mapping and gamma correction\n    col = col / (1.0 + col);\n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}