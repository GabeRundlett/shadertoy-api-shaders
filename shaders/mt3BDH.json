{
    "Shader": {
        "info": {
            "date": "1701179542",
            "description": "My Cubic Interpolation",
            "flags": 0,
            "hasliked": 0,
            "id": "mt3BDH",
            "likes": 0,
            "name": "My Cubic Interpolation",
            "published": 3,
            "tags": [
                "effects"
            ],
            "usePreview": 0,
            "username": "Timmyswdswd",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "float Lerp(float x, float q1, float q2)\n{\n    float q = q1 + x*(q2-q1);\n    return q;\n}\n\nvec3 Rainbow(float h)\n{\n    const float PI = 3.14159265359;\n    h *= PI;\n    \n    float r = (sin(h+PI/2.0+PI)+1.0)/2.0;\n    float g = (sin(clamp(h, 0.5*PI, PI)+PI/2.0)+1.0)/2.0;\n    float b = (sin(clamp(h, 0.0, 0.5*PI)+PI/2.0)+1.0)/2.0;\n    \n    vec3 col = round(vec3(r, g, b)*20.0)/20.0;\n    \n    return col;\n}\n\nfloat Cubp(float q0, float q1, float q2, float q3, float x) {\n    float P = (q3 - q2) - (q0 - q1);\n    float Q = (q0 - q1) - P;\n    float R = q2 - q0;\n    float S = q1;\n\n    return P * x * x * x + Q * x * x + R * x + S;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    col = Rainbow(Cubp(-9.0, 0.0, 0.0, 9.0, uv.x));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}