{
    "Shader": {
        "info": {
            "date": "1527616116",
            "description": "This is the golfed version of Dave_Hoskins' gorgeous shader.\n[url]https://www.shadertoy.com/view/MdBGDK[/url]\nTry moving the mouse in full-screen!\nA BIG thanks to Fabrice Neyret for his brilliant help in reducing this.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVBR1",
            "likes": 12,
            "name": "Golfing Ribbon Assault - 277c",
            "published": 3,
            "tags": [
                "ribbon",
                "twotweets",
                "ribbonassault",
                "short",
                "golf"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 940
        },
        "renderpass": [
            {
                "code": "// 277 chars - Reduced by Greg Rostami and Fabrice Neyret (AKA Yoda).  ;-)\n\nvoid mainImage(out vec4 o, vec2 U) {                                                    \\\n    float T = iTime*.2, i=0.;\n\tfor( vec2 f = vec2(-3,3), r = iResolution.xy, u = (U+U-r) / r.y,\n        p = ( iMouse.z < .5\n               ? r*cos(T)\n               : iMouse.xy -r)/r.y;\n         i++ < 20. ;\n         o = abs( log(f*f)/vec2(16,7)).xxyy )\n             u = vec2( u.x, -u.y ) / dot(u,u) + p,\n             u.x =  abs(u.x),\n             f = max( f, vec2( -sin(dot(u+p,u+p))-1., dot(u-p,u-p) ));\n\n         o.g *= o.a;} /*      \n\n        \n// 565 chars - Original Shader by Dave Hoskins\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float gTime = iTime+11.0;\n\n    float f = 3., g = 3.;\n\tvec2 res = iResolution.xy;\n\tvec2 mou = iMouse.xy;\n\tif (iMouse.z < 0.5)\n\t{\n\t\tmou = vec2(sin(gTime * .3)*sin(gTime * .17) * 1. + sin(gTime * .3),(1.0-cos(gTime * .632))*sin(gTime * .131)*1.0+cos(gTime * .3));\n\t\tmou = (mou+1.0) * res;\n\t}\n\tvec2 z = ((-res+2.0 * fragCoord.xy) / res.y);\n\tvec2 p = ((-res+2.0+mou) / res.y);\n\tfor( int i = 0; i < 20; i++) \n\t{\n\t\tfloat d = dot(z,z);\n\t\tz = (vec2( z.x, -z.y ) / d) + p; \n\t\tz.x =  abs(z.x);\n\t\tf = max( f, (dot(z-p,z-p) ));\n\t\tg = min( g, sin(dot(z+p,z+p))+1.0);\n\t}\n\tf = abs(-log(f) / 3.5);\n\tg = abs(-log(g) / 8.0);\n\tfragColor = vec4(min(vec3(g, g*f, f), 1.0),1.0);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}