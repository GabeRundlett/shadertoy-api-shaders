{
    "Shader": {
        "info": {
            "date": "1473856490",
            "description": "The idea is to paint top to bottom, preserving the coarser histograms.\n- Top: added details for each lower scale.\n- Bottom: huge blur, to verify.\n\n( NB: we should verify we don't create negative colors. > 1 may be allowed if lighting is included ).",
            "flags": 32,
            "hasliked": 0,
            "id": "4lV3Rw",
            "likes": 7,
            "name": "top-down paint",
            "published": 3,
            "tags": [
                "texture",
                "paint",
                "wavelets"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1441
        },
        "renderpass": [
            {
                "code": "// bufA: create the paint\n// buf B+C: blur for verification\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    U /= iResolution.xy;\n    O =  U.y > .5 ? texture(iChannel1, U) : texture(iChannel0, U);\n  //O =  texture(U.y > .5 ? iChannel1 : iChannel0, U);  // doesn't compile on some systems\n\n    U = mod(U,vec2(.2,.5)); // draw black frame\n    if ( min(U.x,U.y) < .004) O-=O;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// top-to bottom texture paint (details preserving top appearance)\n\n#define noise(U) ( (texture(iChannel0,U) - moy) / moy ) // ~ centered unitary noise.\n\nvec4 Ccontrast1 = vec4(1,-.5,-.5,0), // color contrast created at each scale\n     Ccontrast2 = vec4(-.5,1,-.5,0),\n     Ccontrast3 = vec4(-.5,-.5,1,0),\n     Ccontrast4 = vec4(1,-.5,-.5,0);\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O = vec4(1,.7,.8,1);\n    \n    vec4 moy = texture(iChannel0,vec2(.5),99.);\n    float t = iTime, W=iResolution.x;\n\n    if (mod(t,4.)<2.)  Ccontrast4 = Ccontrast3 = Ccontrast2 = Ccontrast1; // 2 sets of colors\n    if (mod(t,2.)<1.)                                                     // 2 sets of weights\n              Ccontrast1/=2., Ccontrast2/=4., Ccontrast3/=8., Ccontrast4/=16.;   \n        else  Ccontrast1/=4., Ccontrast2/=4., Ccontrast3/=4., Ccontrast4/=4.;\n\n    float x = U.x/W;\n    U.x = mod(U.x, W/5.);  // comment if you prefer peeling rather than copies\n    U /= 400.;\n    if (x > .2) O += Ccontrast1 * noise(U   );\n    if (x > .4) O += Ccontrast2 * noise(U*2.);\n    if (x > .6) O += Ccontrast3 * noise(U*4.);\n    if (x > .8) O += Ccontrast4 * noise(U*8.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// blur - x direction\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U /= R;\n    \n    O -= O;\n    for (float i = -128.; i<128.; i++) \n        O += texture(iChannel0, fract( U + vec2(i,0)/R ) );\n    \n    O /= 256.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// blur - y direction\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U /= R;\n    \n    O -= O;\n    for (float j = -128.; j<128.; j++) \n        O += texture(iChannel0, fract( U + vec2(0,j)/R ) );\n    \n    O /= 256.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}