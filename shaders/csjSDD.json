{
    "Shader": {
        "info": {
            "date": "1670330318",
            "description": "this is the fundament of how game of life works,\nit looks what is the sum of the pixel values  \n",
            "flags": 32,
            "hasliked": 0,
            "id": "csjSDD",
            "likes": 7,
            "name": "neighbour pixels buffer: firebal",
            "published": 3,
            "tags": [
                "template"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n    fragColor = texture(iChannel0, o_trpino_nooffset);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float f_n_rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n    \n    vec4 o_col_last = texture(iChannel0, o_trpino_nooffset);\n    \n    float n_resrat = iResolution.x /iResolution.y;\n    vec2 o_scale_kernel = vec2(\n        3., \n        10.\n    );\n\n\n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    if(iMouse.w == 0.0){\n        o_trmono = vec2(sin(iTime*0.1)*0.5, 0.0);\n        if(mod(float(iFrame), 500.) > 250.){\n            o_trmono = vec2(sin(iTime*5.)*0.2, cos(iTime*10.)*0.2);\n        }\n    }\n    vec2 o_scale = vec2(0.5);\n    vec2 o_fragCoord_scaled = ((fragCoord.xy)*o_scale);\n    vec2 o_iResolution_scaled = (iResolution.xy * o_scale);\n\n    vec2 o_fragCoord_scaled_floor = floor(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_floor = floor(o_iResolution_scaled);\n    vec2 o_fragCoord_scaled_fract = fract(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_fract = fract(o_iResolution_scaled);\n    \n    vec2 o_trpino_scldfloor = (o_fragCoord_scaled_floor.xy - o_iResolution_scaled_floor.xy*0.5)/ o_iResolution_scaled_floor.y;\n    \n    vec4 o_kernel_sum = vec4(0.0);\n    for(float n_y = 0.0; n_y < (o_scale_kernel.y); n_y+=1.){\n        for(float n_x = 0.0; n_x < (o_scale_kernel.x); n_x+=1.){\n\n            //vec2 o_speed = vec2(f_n_rand(iTime)*20.-10.,f_n_rand(iTime)*10.-5., );\n            vec2 o_speed = vec2(0.,-3.);\n            vec2 o_off1 = vec2(\n                (n_x - floor(o_scale_kernel.x/2.)),\n                (n_y - floor(o_scale_kernel.y/2.))\n            )+ o_speed;\n            vec2 o_off = vec2(\n                o_off1.x * (1./o_iResolution_scaled_floor.x),\n                o_off1.y * (1./o_iResolution_scaled_floor.y)\n            );\n            vec4 o_col_last_kernel = texture(iChannel0, o_trpino_nooffset+o_off);\n            o_kernel_sum += o_col_last_kernel;\n        }\n    }\n    vec4 o_kernel_sum_nor = o_kernel_sum / (o_scale_kernel.x*o_scale_kernel.y);\n\n    float n_index = floor(o_fragCoord_scaled_floor.y * o_iResolution_scaled_floor.x + o_fragCoord_scaled_floor.x);\n    float n_index_nor = n_index / (o_iResolution_scaled_floor.x * o_iResolution_scaled_floor.y);\n    \n    if(iFrame == 0){\n        if(\n            mod(n_index, 2.) == mod(o_fragCoord_scaled_floor.y,2.)\n        ){\n            fragColor = vec4(1.);\n        }else{\n            fragColor = vec4(0.);\n        }\n    }else{\n        if(mod(float(iFrame), 2.) > 0.){\n            fragColor = o_col_last;\n        }else{\n            fragColor = vec4(0.);\n\n            if(o_kernel_sum_nor.x > 0.5){//f_n_rand(iTime)){\n                fragColor = vec4(o_kernel_sum_nor.x+0.1);\n            }else{\n                fragColor = vec4(0.0);\n            }\n            \n            float n = 0.1;\n            if(o_kernel_sum_nor.x > (1.-n)){\n             fragColor = vec4(f_n_rand(iTime)*(1.-n));\n            }\n            if(o_kernel_sum_nor.x < n){\n                fragColor = vec4(f_n_rand(iTime)*(n));\n            }\n        }\n\n        //fragColor = o_col_last;\n        //fragColor += (o_kernel_sum_nor*0.001);\n    \n    }\n    \n    float n_thresh = 0.1;\n    float n_dist = length(o_trpino-o_trmono);\n    if(n_dist< n_thresh){\n        fragColor = vec4(sin(n_dist*6.2831*20.)*0.5+0.5);\n        fragColor = mix(o_col_last, fragColor,n_dist);\n        fragColor = mix(fragColor, vec4(f_n_rand(n_dist)), 0.9);\n        fragColor = vec4(f_n_rand(n_dist*2.));\n    }\n    \n    //fragColor = sqrt(fragColor);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}