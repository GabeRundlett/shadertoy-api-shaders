{
    "Shader": {
        "info": {
            "date": "1553364130",
            "description": "zooming infinitely into cylinders with logarithmic radius.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dSXDz",
            "likes": 5,
            "name": "hypnocircles",
            "published": 3,
            "tags": [
                "circles",
                "logarithmic"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define pi acos(-1.0)\n#define FAR 200.0\n#define STEPS 20\n\nfloat map(float c) {\n    \n    return (sin(c+5.0)-1.0)*4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0,0,-20.1);\n    vec3 rd = normalize(vec3(uv,1));\n\n    if (length(iMouse.xy) > 40.0) {\n        rd.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n        rd.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n        ro.yz *= rot(iMouse.y/iResolution.y*3.14-3.14*0.5);\n        ro.xz *= rot(iMouse.x/iResolution.x*3.14*2.0-3.14);\n    } else {\n        rd.yz *= rot(-0.5);\n        ro.yz *= rot(-0.5);\n        \n    }\n\n    float r = 1.0;\n\n    float e = 1.0/dot(rd.xz,rd.xz);\n\n    float a = dot(-ro.xz,rd.xz)*e;\n    vec2 p = ro.xz+rd.xz*a;\n    float b = dot(p,p);\n\n    float offset = iTime;\n    float freq = (0.03*iTime+1.0);\n    float limit = 0.2;\n    float cell = floor(log(max(length(ro.xz),limit))*freq-offset)+offset;\n    float dir = -1.0;\n    \n    float h = map(cell);\n    ro.y = max(ro.y,h+0.1);\n\n    vec3 n = vec3(0);\n    float d = 0.0;\n    for (int i = 0; i < STEPS; i++) {\n        \n        float h = map(cell);\n        \n        if ( ro.y+rd.y*d < h) {\n            n = vec3(-normalize(ro.xz+rd.xz*d)*dir,0).xzy;\n            break;\n        }\n        \n        float pln = 10000.0;\n        if (rd.y < 0.0) pln = -(ro.y-h)/rd.y;\n        \n        float cell2 = max(exp((cell+dir*0.5+0.5)/freq),0.0);\n        \n        float l = 0.0;\n        \n        if (max(b,limit*limit) <= cell2*cell2 || dir == 1.0) {\n            float c = sqrt((cell2*cell2-b)*e);\n            if (c+a > 0.0) {\n                d = a+c*dir;\n                \n                cell += dir;\n            } else {\n                dir = 1.0;\n            }\n        } else {\n            dir = 1.0;\n        }\n        \n        \n        if (pln < d) {\n            d = pln;\n            n = vec3(0,1,0);\n            cell -= dir;\n            break;\n        }\n        \n        if ( d > FAR ) break;\n        \n\n    }\n\n    /*if (b <= r*r) {\n        float c = sqrt((r*r-b)*e);\n        float len = a-c;\n        if (len > 0.0 && len < l) {\n            n = vec3((ro.xz+rd.xz*len)/r,0).xzy;\n            l = len;\n        }\n    }*/\n\n    vec3 col;\n    vec3 background = 0.2 + 0.1*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    if (d < FAR) {\n        vec3 p = ro+rd*d;\n        \n        cell -= offset;\n\n        col = sin(cell*vec3(5.3,0.3,6.7)+vec3(1.4,3.2,0.3))*0.5+0.5;\n        \n        float diff = max(0.1,dot(n,normalize(vec3(1))));\n        \n        col *= diff;\n        \n        col = mix(col,background,d/FAR);\n        //col = fract(p);\n    } else {\n        col = background;\n    }\n\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}