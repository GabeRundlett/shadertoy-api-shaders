{
    "Shader": {
        "info": {
            "date": "1718036026",
            "description": "Color code floats and integers for transmission to companion app for display",
            "flags": 16,
            "hasliked": 0,
            "id": "4XVGR3",
            "likes": 1,
            "name": "ConsoleTransmit",
            "published": 3,
            "tags": [
                "debug",
                "console"
            ],
            "usePreview": 0,
            "username": "kosalos",
            "viewed": 67
        },
        "renderpass": [
            {
                "code": "/*\n\n0. copy the \"COLOR CODED CONSOLE\" portion of this source code to your shader.\n   implement a method to call the console() function on demand, as I do here via the 'Q' key.   \n1. update console() function to display your floats and integers of interest.\n2. run your shader to the desired data capture time.\n3. Press and hold 'Q' to display color code at bottom of image\n4. Pause the shader so you can screen grab the color code.\n\non Windows 10:\n5. Run Paint3D application.\n6. With Shadertoy window on top, press <Alt><PrtScn>\n7. In Paint3D, press <Paste> titlebar button to load Shadertoy window for drawing.\n8. With <Select> selected, click/drag a rectangle around the color code region.\n9. Press <Crop>.\n10. Zoom way in (mouse wheel can be used)\n11. Use scroll bars to position the image so you can see the upper left corner.\n12. Press <Ctrl><A> to select all of image, then use mouse to drag it so that the \n    color code is aligned with the upper left corner.\n13. Save the image as .png or .bmp\n\non Mac:\n5. Press <shift><command><4> to launch the screen grab utility, and click/drag the mouse to \n   capture the bottom region of your image with the color code. It is saved to the clipboard.\n6. Run \"Preview\" app, and select <File><New from Clipboard> menu option.\n7. Zoom in for a better look, then press <command><A> to select whole of image.\n8. Adjust the left & top edges of the selection rectangle so the color code begins in the upper left corner of the selection.\n9. Press <Tools><Crop> menu option.\n10. Save the image as .png or .bmp\n\nRun the companion ConsoleReceive app to decode the color code, \nand display the data values as text on a console:\nhttps://openprocessing.org/sketch/2295017\n\n*/\n\n// COLOR CODED CONSOLE =============================================================\n#define _MINUS   10\n#define _DECIMAL 11\n#define _COMMA   12\n#define _CR      13\n#define _SPC     14\n#define _END     15\n#define DP_MAXLENGTH 500\n\nstruct Chars {\n    int[DP_MAXLENGTH+1] data;\n    int index;\n}; \n\nbool printFloat2(inout Chars c,float val,int fCount) {\n    if(c.index >= DP_MAXLENGTH - 15) return false; // nearing buffer overflow\n    if(val < 0.) {\n        c.data[c.index++] =_MINUS;\n        val = -val;\n    }\n    \n    int[8] digits;\n    int count = 0;\n    \n    int iVal = int(val);\n    val -= float(iVal);\n    \n    for(;;) {\n        digits[count++] = iVal % 10;\n        if(count >= 8) break;\n        iVal /= 10;\n        if(iVal == 0) break;\n    }    \n    for(int i = count-1; i >= 0; i--)\n        c.data[c.index++] = digits[i];\n        \n    if(fCount == 0) return true;\n    \n    c.data[c.index++] = _DECIMAL;\n        \n    for(int i = 0; i < fCount;++i) {\n        val *= 10.0;\n        int digit = int(val);\n        c.data[c.index++] = digit;\n        val -= float(digit);\n        if(val <= 0.0) break;\n    }\n    \n    return true; \n}\n\nbool printFloat(inout Chars c,float val) { return printFloat2(c,val,4); }\nbool printInt(  inout Chars c,int val)   { return printFloat2(c,float(val),0); }\n\nvoid console(inout vec4 fragColor, vec2 fragCoord) {\n    Chars chr;\n    chr.index = 0;\n\n    // encode your data in the buffer ----------\n    float t = 1.234;\n    \n    for(int i=0;i<30;++i) {\n        if(!printFloat(chr,t)) break;\n        t += 0.345;\n        chr.data[chr.index++] = _COMMA;\n        chr.data[chr.index++] = _SPC;\n        \n        if((i % 10) == 9) chr.data[chr.index++] = _CR;  // 10 values per line on console\n    }\n\n    for(int i=0;i<3;++i) \n        chr.data[chr.index++] = _END;  // signal console to stop parsing the pixels\n\n    // ------------------------------------------\n    // all data is encoded in the buffer.\n    // now grab the value assigned to the current pixel \n    fragColor = vec4(0.,0.,0.,1.);\n\n    int index = int(fragCoord.x) / 3;       // each character cell is drawn 3 pixel wide\n\n    if(index < chr.index) {                \n        int v = chr.data[index];            // 0 ... 15\n        fragColor.z = float(v & 3) * 0.25;  // low 2 bits\n        v >>= 2;\n        fragColor.y = float(v & 3) * 0.25;  // high 2 bits        \n    }\n}\n\n// COLOR CODED CONSOLE =============================================================\n\nbool getKeyState(int keyCode){\n    return bool(texelFetch(iChannel0, ivec2(keyCode,0), 0).x != 0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    fragColor = vec4(col,1.0);\n    \n    if(getKeyState(81) && fragCoord.y < 10.) console(fragColor,fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}