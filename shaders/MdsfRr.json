{
    "Shader": {
        "info": {
            "date": "1494697037",
            "description": "-",
            "flags": 0,
            "hasliked": 0,
            "id": "MdsfRr",
            "likes": 5,
            "name": "xem test raymarching golfed",
            "published": 3,
            "tags": [
                "raymarching",
                "distance",
                "estimation"
            ],
            "usePreview": 0,
            "username": "xem",
            "viewed": 1162
        },
        "renderpass": [
            {
                "code": "float DE(vec3 p);\n\n// 135b Raymarcher with fog (r=fragColor, d=fragCoord)\n// It calls DE(p), which can be any Distande Estimation function.\n// See example below or on https://iquilezles.org/articles/distfunctions\n// Thanks to the Codegolf Team and coyote <3\n\nvoid mainImage(out vec4 r,vec2 d){vec3 D=normalize(vec3(d+d-(r.xy=iResolution.xy),r.y));r-=r;for(int i=0;i<50;i++)r+=DE(D*r.x);r=1./r;}\n\n\n// Distance Estimation function example\n// You can uncomment commented code to toggle infinity and test other shapes\nfloat DE(vec3 p){\n\n    // Move camera back (only useful if the scene is not infinite)\n    //p+=vec3(0.,0.,-2.);\n    \n    // Animate camera (only useful if the scene is infinite)\n    p+=vec3(0.,iTime*2.,iTime);\n    \n    // Infinite\n    p=mod(p,2.)-.5*2.;\n\n    // Sphere\n    //return length(p)-.7;\n\n    // Box\n    //return length(max(abs(p)-.5,.0));\n\n    // Torus\n    return length(vec2(length(p.xy)-.6,p.z))-.2;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}