{
    "Shader": {
        "info": {
            "date": "1520012876",
            "description": "Menger",
            "flags": 0,
            "hasliked": 0,
            "id": "ld3cDB",
            "likes": 2,
            "name": "Recursive Primitives",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "menger",
                "sponge"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 612
        },
        "renderpass": [
            {
                "code": "#define EPS 0.0001\n#define FAR 1000.0\n#define STEPS 1028\n#define PI acos( -1.0 )\n#define TWOPI PI * 2.0\n\n// Some little hacks but basiclly based on https://iquilezles.org/articles/menger\n\n\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  float t = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n  float sph = length( p ) - 1.0;\n  p.y -= 0.8;\n  float tim = sin( ( iTime * 0.2 ) + sin( iTime * 0.2 ) * 0.5 );\n  float f = mix( t, sph, max( 0.2, min( 0.5, tim ) ) );\n  return f;\n}\n\nfloat sdCross( in vec3 p )\n{\n  float da = sdBox(p.xyz,vec3((iTime * 0.2 ),1.0,1.0));\n  float db = sdBox(p.yzx,vec3(1.0,(iTime * 0.2 ),1.0));\n  float dc = sdBox(p.zxy,vec3(1.0,1.0,(iTime * 0.2 )));\n  return min(da,min(db,dc));\n}\n\nvec3 map( in vec3 p )\n{\n   vec2 d = vec2( sdBox(p,vec3(1.0)), 0.0 );\n   vec2 pla = vec2( p.y + 1.0, 1.0 );\n\n   float s = 1.0;\n   for( int m=0; m<5; m++ )\n   {\n       vec3 a = mod( p*s, 2.0 ) - 1.0;\n       s *= 3.0;\n       \n       vec3 r = max( 1.0, sin( iTime ) ) - 3.0*abs(a);\n\n       vec2 c = vec2( sdCross(r)/s, 0.0 );\n       d = max( d, c );\n       \n   }\n    \n   if( d.x < pla.x ) pla = d;\n\n   return vec3( pla, 0.0 );\n}\n\n/*vec3 map( in vec3 p )\n{\n   float d = sdBox(p,vec3(1.0));\n   vec3 res = vec3( d, 1.0, 0.0 );\n\n   float s = 1.0;\n   for( int m=0; m<4; m++ )\n   {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 3.0;\n      vec3 r = abs(1.0 - 3.0*abs(a));\n\n      float da = max(r.x,r.y);\n      float db = max(r.y,r.z);\n      float dc = max(r.z,r.x);\n      float c = (min(da,min(db,dc))-1.0)/s;\n\n      if( c>d )\n      {\n          d = c;\n          res = vec3( d, 0.2*da*db*dc, (1.0+float(m))/4.0 );\n       }\n   }\n\n   return res;\n}*/\n\n\nvec3 grad( vec3 p )\n{\n\n    vec2 e = vec2( 0.0, EPS );\n    vec3 n = vec3( map( p + e.xyy ).x - map( p -  e.xyy ).x,\n                   map( p + e.yxy ).x - map( p -  e.yxy ).x,\n                   map( p + e.yyx ).x - map( p -  e.yyx ).x\n                 );\n    return n;\n\n        \n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t ).x;\n        if( h < EPS ) return 0.0;\n        res = min( res, 8.0 * h / t );\n        t += h;\n        \n        \n    }\n    \n    return res;\n\n}\n\n// https://www.shadertoy.com/view/4lSSRW\n\nfloat calcOcc( in vec3 pos, in vec3 nor )\n{\n    const float h = 0.2;\n\tfloat ao = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        vec3 dir = sin( float(i)*vec3(1.0,7.13,13.71)+vec3(0.0,2.0,4.0) );\n        //dir = normalize(nor + dir);\n        dir *= sign(dot(dir,nor));\n        float d = map( pos + h*dir ).x;\n        ao += max(0.0,h-d*2.0);\n    }\n    return clamp( 4.0 - 2.5*ao, 0.0, 1.0 )*(0.5+0.5*nor.y);\n}\n\nvec3 shade( vec3 ro , vec3 rd, float t )\n{\n\n    vec3 p = ro + rd * t;\n    vec3 n = normalize( grad( p ) );\n    vec3 lig = normalize( vec3( 1.0, 4.0, 0.6 ) );\n    vec3 col;\n    vec3 ref = reflect( ro, n );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( n, lig ) );\n    float sha = softShadows( p, lig );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 );\n    float rim = pow( 1.0 + dot(n, rd), 2.0 );\n    float occ = calcOcc( p, n ); occ *= occ * occ;\n    \n    col += vec3( 1.0, 0.98, 0.8 ) * amb;\n    col += dif * vec3( 1.0, 0.98, 0.8 ) * sha;\n    col += 1.0 * spe;\n    col += 0.1 * rim;\n    col += 1.0 * occ;\n   \n    map( p ).y == 0.0 ? col *= mix( vec3( 0.0, 1.0, 0.0 ), vec3( 0.0, 0.0, 1.0 ), fbm( p + fbm( p + fbm ( p ) ) ) ) : vec3( 0.0 );\n    map( p ).y == 1.0 ? col *= vec3( 1.0 ) : vec3( 0.0 );\n    \n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = 2.5 * vec3( sin( sin( iTime * 0.2 ) ), 0.0, cos( iTime * 0.2 ) );\n    \n    if( mou.x == 0.0 ) ro = 2.5 * vec3( sin( sin( iTime * 0.2 ) ), 0.0, cos( iTime * 0.2 ) );\n    \n    if( mou.x != 0.0 ) ro = mou.y * vec3( sin( mou.x * TWOPI ), 0.0, cos( -mou.x * TWOPI ) );\n  \n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    //vec3 ro = vec3( 2.0, 0.0, 2.0 );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    \n    float t = 0.0, d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        t += d;\n    \n    }\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? shade( ro, rd, t ) : mix( vec3( 0.5 ), vec3( 0.0 ), uv.y  );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}