{
    "Shader": {
        "info": {
            "date": "1675888468",
            "description": "Shamelessly stolen from https://shadertoy.com/view/DlSXzm\n\nOriginal description: 8 rank convolution. WASD QE and mouse to move. Press R to stop movement.",
            "flags": 48,
            "hasliked": 0,
            "id": "DlSXWz",
            "likes": 4,
            "name": "CatThink diffraction kernel",
            "published": 3,
            "tags": [
                "camera",
                "cat",
                "funny",
                "svd",
                "catthink"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "// Fork of \"JWST diffraction kernel smaller\" by michael0884. https://shadertoy.com/view/DlSXzm\n// 2023-02-08 20:23:40\n\n// Fork of \"JWST diffraction kernel\" by michael0884. https://shadertoy.com/view/clBSzm\n// 2023-02-07 22:12:08\n\n#define exposure 1.0\n#define sqrexposure 0.5\n#define gamma 1.3\n#define bloom 200.0\n\nvec3 expose(vec3 c) {\n    return 1.0 - exp(-exposure * (1.0 + sqrexposure * c) * c);\n}\n\nvec3 saturate(vec3 c) {\n    return pow(expose(c), vec3(1.0/gamma));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 acc = texture(iChannel0, fragCoord / iResolution.xy);\n    vec4 convol = texture(iChannel1, 0.5 * fragCoord / iResolution.xy);\n    \n    vec3 col = (1.0*acc.xyz/acc.w) + (bloom * convol.xyz);\n\n    fragColor = vec4(saturate(col), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//controller\n\n//Keyboard constants\nconst int keyLe = 37, keyUp = 38, keyRi = 39, keyDn = 40, keyA = 65, keyB = 66, keyC = 67, keyD = 68, keyE = 69, keyF = 70, keyG = 71, keyH = 72, keyI = 73, keyJ = 74, keyK = 75, keyL = 76, keyM = 77, keyN = 78, keyO = 79, keyP = 80, keyQ = 81, keyR = 82, keyS = 83, keyT = 84, keyU = 85, keyV = 86, keyW = 87, keyX = 88, keyY = 89, keyZ = 90;\n\nbool pressed(int k) \n{\n    return texelFetch(iChannel3, ivec2(k, 0), 0).x > 0.5;\n}\n\nconst float force = 2.0;\nconst float mouse_sens = 100.0;\nconst float roll_speed = 0.5;\n\nvoid mainImage( out vec4 o, in vec2 p )\n{\n    p = floor(p);\n    if(p.x > NAddr && p.y > 0.) discard;\n    \n    //get camera data\n    vec3 cp = get(CamP).xyz;\n    vec4 ca = get(CamA);\n    \n    float mode = get(CamP).w;\n    if(pressed(keyR)) mode = 1.0 - mode;\n    \n    //initialization\n    if(iFrame == 0)\n    {\n        mode = 1.0;\n        cp =  vec3(6,6,5);\n        ca = aa2q( normalize(vec3(0.0,1,0.)), -1.15);\n    }\n    vec4 oldca = ca;\n    if(p.x == PrevCamP) o = vec4(cp, 0);\n    if(p.x == PrevCamA) o = ca;\n    \n    mat3 cam = getCam(ca);\n    \n    //get velocities\n    vec3 cv = get(CamV).xyz;\n    vec4 cav = get(CamAV);\n    \n    float dt = 1./60.0;\n    //update position\n    if(pressed(keyW)) cv += force*dt*cam*vec3(0,0,1);\n    if(pressed(keyS)) cv += force*dt*cam*vec3(0,0,-1);\n    if(pressed(keyA)) cv += force*dt*cam*vec3(-1,0,0);\n    if(pressed(keyD)) cv += force*dt*cam*vec3(1,0,0);\n    \n    cp += dt*cv + 5.0*iTimeDelta*vec3(1,0,0)*mode;\n    cv += -cv*tanh(10.0*dt);\n    \n    //update camera orientation\n    vec2 dmouse = dt*mouse_sens*(iMouse.xy - get(PrevMouse).xy)/iResolution.x;\n    \n    if(length(dmouse) < 0.1)\n    {\n        //rotate around y ax\n        ca = qq2q(ca, aa2q(cam*vec3(0,1,0), -dmouse.x)); \n        //rotate around x ax\n        ca = qq2q(ca, aa2q(cam*vec3(1,0,0), dmouse.y));\n    }\n    \n    //roll camera\n    if(pressed(keyQ)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), -roll_speed*dt)); \n    if(pressed(keyE)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), roll_speed*dt)); \n    \n    if(p.x == CamP) o = vec4(cp, mode);\n    if(p.x == CamA) o = ca;\n    if(p.x == CamV) o = vec4(cv, 0.0);\n    if(p.x == CamAV) o = vec4(0.0);\n    if(p.x == PrevMouse) o = vec4(iMouse.xy, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n#define FOV 0.8\n#define MAX_STEPS 256\n#define MIN_DIST 1e-5\n#define MAX_DIST 60.0\n\n//(reused some of @ollj's code, made it more readible)\n\nfloat CAM_ANGLE = 0.003;\n\n// basic parameters\nfloat R = 2.1;\t\t\t\t\t\t\t\t// planet radius\nfloat H = 0.1;\t\t\t\t\t\t\t// density scale-height of atmosphere (not pressure scale height)\n\nvec3 light = normalize(vec3(1,0.8,-0.6));\nconst float light_bright =1.0;\nconst float light_ang = 0.1;\n\n//specific controller buffer Addresses\nconst float CamP = 0.,     //camera position \n            CamA = 1.,     //camera rotation quaternion    \n            CamV = 2.,     //camera velocity\n            CamAV = 3.,    //camera rotation velocity\n            PrevCamP = 4., //previous frame camera position\n            PrevCamA = 5., //previous frame camera rotation quaternion\n            PrevMouse = 6.,//previous mouse pos\n            NAddr = 7.;    //max address count\n            \n#define get(i) texelFetch(iChannel2,ivec2(i,0),0)\n\nvec4 project(mat3 cam_mat, vec3 cam_pos, vec2 iRes, vec3 p)\n{\n    float td = distance(cam_pos, p);\n    vec3 dir = (p - cam_pos)/td;\n    vec3 screen = dir*cam_mat;\n    return vec4(screen.xy*iRes.y/(FOV*screen.z) + 0.5*iRes.xy, screen.z, td);\n}\n\n//ollj quaternionRotation math\n//\n//ANY rotations in 3d are non-commutative!\n//\n//matrix rotations are just bulky, memory wasting\n//EulerRotations almost certainly fail to rotate over the SHORTEST path.\n//EulerRotations almost certainly will gimbalLock and get stuck along one axis\n//QuaternionRotations are superior here.\n//-> we only use EulerRorations for simple input devices (keyboard input)\n//-> we convert to quaternions, buffered as vec4.\n\n//quaternion Identity\nvec4 qid() \n{\n    return vec4(0, 0, 0, 1);\n}\n\n//return quaternion from axis and angle\nvec4 aa2q(vec3 axis, float ang) \n{\n    vec2 g = vec2(sin(ang), cos(ang)) * 0.5;\n    return normalize(vec4(axis * g.x, g.y));\n}\n\n//return AxisAngle of NORMALIZED quaternion input\nvec4 q2aa(vec4 q) \n{\n    return vec4(q.xyz / sqrt(1.0 - q.w * q.w), acos(q.w) * 2.);\n}\n\n//return q2, rotated by q1, order matters (is non commutative) : (aka quaternion multiplication == AxisAngleRotation)\nvec4 qq2q(vec4 q1, vec4 q2) \n{\n    return vec4(q1.xyz * q2.w + q2.xyz * q1.w + cross(q1.xyz, q2.xyz), (q1.w * q2.w) - dot(q1.xyz, q2.xyz));\n}\n\n//extension to qq2q(), scaled by sensitivity [f] (==quaternion ANGULAR equivalent to slerp() )\nvec4 qq2qLerp(vec4 a, vec4 b, float f) \n{\n    float d = dot(a, b), t = acos(abs(d)), o = (1. / sin(t));\n    return normalize(a * sin(t * (1.0 - f)) * o * sign(d) + b * sin(t * f) * o);\n}\n\n//doing qq2q() multiple times, you need to normalize() the quaternion, to fix rounding errors.\n//how often you do this is up to you.\n\n//normalize q (assuming length(q) is already close to 1, we can skip whe sqrt()\nvec4 qn(vec4 q) \n{\n    return q / dot(q,q);\n}\n\n//return quaternion, that is the shortest rotation, between looking to [a before], and looking to [b after] the rotation.\n//http://wiki.secondlife.com/wiki/LlRotBetween\nvec4 qBetween(vec3 a, vec3 b) \n{\n    float v = sqrt(dot(a,a) * dot(a,a));\n\n    if(v == 0.) return qid();\n    \n    v = dot(a, b) / v;\n    vec3 c = a.yzx * b.zxy - a.zxy * b.yzx / v;\n    float d = dot(c,c);\n    \n    if(d != 0.) \n    {\n        float s = (v > - 0.707107) ? 1. + v : d / (1. + sqrt(1. - d));\n        return vec4(c, s) / sqrt(d + s * s);\n    }\n    \n    if(v > 0.) return qid();\n    \n    float m = length(a.xy);\n    \n    return (m != 0.) ? vec4(a.y, - a.x, 0, 0) / m : vec4(1, 0, 0, 0);\n}\n\n//return inverse of quaternion\nvec4 qinv(vec4 q) \n{\n    return vec4(- q.xyz, q.w) / dot(q,q);\n}\n\n//return VECTOR p, rotated by quaterion q;\nvec3 qv2v(vec4 q, vec3 p) \n{\n    return qq2q(q, qq2q(vec4(p, .0), qinv(q))).xyz;\n}\n\n//qv2v()  with swapped inputs\n//return quaterion P (as vector), as if it is rotated by VECTOR p (as if it is a quaternion)\nvec3 vq2v(vec3 p, vec4 q) \n{\n    return qq2q(qinv(q), qq2q(vec4(p, 0.0), q)).xyz;\n}\n\nvec3 vq2v(vec4 a, vec3 b) \n{\n    return qv2v(a, b);\n}\n\n//in case of namespace confuction\nvec3 qv2v(vec3 a, vec4 b) \n{\n    return vq2v(a, b);\n}\n\n//return mat3 of quaternion (rotation matrix without translation)\n//https://www.shadertoy.com/view/WsGfWm\nmat3 q2m(vec4 q) \n{\n    vec3 a = vec3(-1, 1, 1);\n    vec3 u = q.zyz * a, v = q.xyx * a.xxy;\n    mat3 m = mat3(0.5) + mat3(0, u.x,u.y,u.z, 0, v.x,v.y,v.z, 0) * q.w + matrixCompMult(outerProduct(q.xyz, q.xyz), 1. - mat3(1));\n    q *= q; \n    m -= mat3(q.y + q.z, 0, 0, 0, q.x + q.z, 0, 0, 0, q.x + q.y);\n    return m * 2.0;\n}\n\n//return quaternion of orthogonal matrix (with determinant==1., or else quaternionm will not be normalized)\nvec4 m2q(mat3 m) \n{\n#define m2f(a,b) m[a][b]-m[b][a]\n    //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n    float q = 2. * sqrt(abs(1. + m[0][0] + m[1][1] + m[2][2]));\n    return vec4(vec3(m2f(2, 1), m2f(0, 1), m2f(1, 0)) / q / 4., q);\n#undef m2f\n}\n\nfloat at2e(vec2 a) \n{\n    a *= 2.;\n    return atan(a.x, 1. - a.y);\n}\n\n//return quaternion of Euler[yaw,pitch,roll]     \nvec4 eYPR2q(vec3 o) \n{\n    o *= .5;\n    vec3 s = sin(o);\n    //https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Source_code\n    o = cos(o);\n    vec4 a = vec4(s.xz, o.xz);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(-1, 1, -1, 1);\n}\n\nvec4 eYPR2q(vec2 o) \n{\n    o *= .5;\n    vec2 s = sin(o);\n    o = cos(o);\n    vec4 a = vec4(s.x, 0., o.x, 0.);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(- 1, 1, - 1, 1);\n}\n\nmat3 getCam(vec4 q) \n{\n    return q2m(q);\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n\n//uniformly spherically distributed\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\n//The first 8 columns of the U matrix: \nfloat U[1016] = float[](-4.2491E-02, -4.5468E-02, -4.7422E-02, -4.9283E-02, -5.1429E-02, -5.3374E-02, -5.6075E-02, -5.8603E-02, -6.1223E-02, -6.4278E-02, -6.6885E-02, -6.7691E-02, -6.9739E-02, -7.0434E-02, -7.2187E-02, -7.5000E-02, -7.7263E-02, -7.8294E-02, -7.9480E-02, -8.0702E-02, -8.1855E-02, -8.3811E-02, -8.6175E-02, -8.6893E-02, -8.6646E-02, -8.3490E-02, -7.9265E-02, -7.6857E-02, -7.4902E-02, -7.4748E-02, -7.2759E-02, -6.7564E-02, -6.3035E-02, -6.0704E-02, -5.9201E-02, -5.7877E-02, -5.7078E-02, -5.7172E-02, -5.6413E-02, -5.6159E-02, -5.7885E-02, -6.0500E-02, -6.4115E-02, -6.7074E-02, -7.2689E-02, -7.9942E-02, -8.8715E-02, -9.3352E-02, -9.7819E-02, -1.0289E-01, -1.0490E-01, -1.0719E-01, -1.0960E-01, -1.1173E-01, -1.1309E-01, -1.1456E-01, -1.1362E-01, -1.1265E-01, -1.1234E-01, -1.1217E-01, -1.1085E-01, -1.1074E-01, -1.0984E-01, -1.0853E-01, -1.0757E-01, -1.0666E-01, -1.0492E-01, -1.0289E-01, -1.0189E-01, -1.0111E-01, -1.0050E-01, -9.7895E-02, -9.6467E-02, -9.6851E-02, -9.8377E-02, -9.8181E-02, -9.7227E-02, -9.5512E-02, -9.3827E-02, -9.2759E-02, -9.3722E-02, -9.1554E-02, -8.9152E-02, -8.6195E-02, -8.4127E-02, -8.4358E-02, -8.4621E-02, -8.4020E-02, -8.3691E-02, -8.4114E-02, -8.4894E-02, -8.5224E-02, -8.5777E-02, -8.6720E-02, -8.8257E-02, -8.9713E-02, -9.1100E-02, -9.2593E-02, -9.4009E-02, -9.5793E-02, -9.7352E-02, -9.8097E-02, -9.8373E-02, -9.8282E-02, -9.8006E-02, -9.7696E-02, -9.7581E-02, -9.7574E-02, -9.8101E-02, -9.8657E-02, -9.9032E-02, -9.9339E-02, -9.9719E-02, -9.9858E-02, -9.9803E-02, -9.9816E-02, -9.9596E-02, -9.9400E-02, -9.9292E-02, -9.8978E-02, -9.8910E-02, -9.8853E-02, -9.8825E-02, -9.8896E-02, -9.8879E-02, -9.8494E-02, -9.7247E-02, 2.6349E-02, 4.3425E-02, 5.9081E-02, 7.4628E-02, 8.8003E-02, 1.0114E-01, 1.1035E-01, 1.2033E-01, 1.3126E-01, 1.3977E-01, 1.4603E-01, 1.5153E-01, 1.4916E-01, 1.5007E-01, 1.4963E-01, 1.4194E-01, 1.3642E-01, 1.3360E-01, 1.2983E-01, 1.2313E-01, 1.1965E-01, 1.0972E-01, 9.8730E-02, 9.1697E-02, 8.8371E-02, 9.3862E-02, 9.7531E-02, 9.8162E-02, 1.0360E-01, 9.9283E-02, 1.0610E-01, 1.2444E-01, 1.3897E-01, 1.4316E-01, 1.4620E-01, 1.4631E-01, 1.4886E-01, 1.4711E-01, 1.5044E-01, 1.5354E-01, 1.5233E-01, 1.4398E-01, 1.3590E-01, 1.2605E-01, 1.0928E-01, 8.7372E-02, 5.8953E-02, 5.0246E-02, 3.8928E-02, 2.8012E-02, 3.0031E-02, 1.9568E-02, 9.6937E-03, 3.1386E-03, -3.3766E-03, -1.5832E-02, -1.0054E-02, -6.3103E-03, -1.0513E-02, -1.4952E-02, -1.3206E-02, -1.3619E-02, -1.4627E-02, -1.2344E-02, -1.2748E-02, -1.4526E-02, -2.1873E-02, -2.8282E-02, -3.6430E-02, -4.5241E-02, -5.5615E-02, -7.0678E-02, -8.4733E-02, -7.6156E-02, -7.1208E-02, -6.4824E-02, -7.0275E-02, -8.2384E-02, -8.6274E-02, -8.2113E-02, -8.3646E-02, -8.3543E-02, -8.8512E-02, -9.5632E-02, -9.6399E-02, -9.7801E-02, -1.0138E-01, -1.0349E-01, -1.0509E-01, -1.0553E-01, -1.0538E-01, -1.0522E-01, -1.0239E-01, -9.6942E-02, -8.9490E-02, -8.0481E-02, -7.1719E-02, -6.2557E-02, -5.5103E-02, -4.8869E-02, -4.3620E-02, -4.0636E-02, -3.9502E-02, -4.0275E-02, -4.1497E-02, -4.2330E-02, -4.2228E-02, -4.1212E-02, -4.0978E-02, -4.3385E-02, -4.6027E-02, -5.0140E-02, -5.4764E-02, -5.9573E-02, -6.2359E-02, -6.4479E-02, -6.6063E-02, -6.5204E-02, -6.2971E-02, -6.0934E-02, -5.8451E-02, -5.6759E-02, -5.3769E-02, -5.3670E-02, -5.2141E-02, -4.8423E-02, -4.5824E-02, -4.1127E-02, -3.6086E-02, -3.5897E-02, -3.6304E-02, -3.6651E-02, -3.7232E-02, -3.5848E-02, -3.8733E-02, -3.3499E-02, -2.8520E-02, -3.1750E-02, -2.8685E-02, -3.1819E-02, -3.1644E-02, -3.7661E-02, -4.5139E-02, -5.0774E-02, -5.5694E-02, -5.4445E-02, -5.3887E-02, -5.2854E-02, -5.2039E-02, -5.5522E-02, -4.1953E-02, -3.6832E-02, -2.3701E-02, 1.3705E-02, 6.4980E-02, 7.0340E-02, 6.3731E-02, 6.8505E-02, 1.0313E-01, 1.3410E-01, 1.4071E-01, 1.4069E-01, 1.4513E-01, 1.4951E-01, 1.3552E-01, 1.2838E-01, 1.2872E-01, 1.2157E-01, 1.1237E-01, 8.3232E-02, 5.8310E-02, 2.3202E-02, -2.0685E-02, -5.2857E-02, -7.8504E-02, -8.4932E-02, -7.2756E-02, -7.2937E-02, -6.2727E-02, -6.6899E-02, -5.6899E-02, -3.8184E-02, -1.6339E-02, -5.2754E-02, -5.4752E-02, -3.3234E-02, 5.8761E-03, 6.7213E-03, 7.4328E-03, 2.8581E-02, 2.4487E-02, 2.6487E-02, 3.2593E-02, 5.1733E-02, 5.3198E-02, 6.2030E-02, 7.2299E-02, 8.1437E-02, 9.0773E-02, 1.1888E-01, 1.3806E-01, 1.4580E-01, 1.5075E-01, 1.4226E-01, 1.2726E-01, 1.2562E-01, 1.4380E-01, 1.6342E-01, 1.7999E-01, 1.7224E-01, 1.6186E-01, 1.5083E-01, 1.5943E-01, 1.5678E-01, 1.3981E-01, 1.1495E-01, 8.9443E-02, 6.4055E-02, 3.9769E-02, 2.0216E-02, 9.8781E-03, 2.2423E-03, -1.1430E-02, -2.5182E-02, -3.8704E-02, -5.3874E-02, -6.9025E-02, -8.2159E-02, -9.4753E-02, -1.0536E-01, -1.1641E-01, -1.2495E-01, -1.3143E-01, -1.3777E-01, -1.4027E-01, -1.4066E-01, -1.3753E-01, -1.3446E-01, -1.2390E-01, -1.0865E-01, -9.7945E-02, -8.7974E-02, -7.5613E-02, -6.4531E-02, -5.8655E-02, -6.0271E-02, -6.7571E-02, -6.6695E-02, -6.5167E-02, -6.8606E-02, -5.0512E-02, -4.4752E-02, -6.2190E-02, -7.0482E-02, 3.3595E-02, 2.6573E-02, 1.5397E-02, 2.0656E-02, 1.5998E-02, 2.0673E-02, 5.5164E-03, -3.3796E-03, -1.3936E-02, -1.0597E-02, -8.8379E-03, -6.9423E-03, 1.2550E-02, 3.0145E-02, 2.8476E-02, 1.3631E-02, -1.4890E-02, -4.7102E-02, -4.5672E-02, -4.5108E-02, -3.5459E-02, -3.7229E-02, -4.9688E-02, -5.3906E-02, -7.0103E-02, -8.3562E-02, -1.1007E-01, -1.1046E-01, -9.8333E-02, -9.7753E-02, -6.0756E-02, 1.6644E-03, 8.7957E-02, 1.3008E-01, 1.4382E-01, 1.7567E-01, 1.5042E-01, 1.3650E-01, 1.4088E-01, 1.3355E-01, 1.3110E-01, 1.3108E-01, 1.2033E-01, 1.0406E-01, 1.0058E-01, 5.5950E-02, 1.6297E-02, -5.0722E-02, -9.1740E-02, -1.5567E-01, -2.1172E-01, -2.0228E-01, -1.8596E-01, -1.6737E-01, -1.5392E-01, -1.2881E-01, -1.2992E-01, -1.3365E-01, -1.2639E-01, -1.1838E-01, -1.2128E-01, -1.0917E-01, -1.0737E-01, -9.9927E-02, -1.0094E-01, -8.1716E-02, -6.8994E-02, -6.1719E-02, -6.2183E-02, -4.2092E-02, -3.0772E-02, -3.5257E-02, -4.2129E-02, -8.5399E-02, -8.6506E-02, -6.4756E-02, -4.2959E-02, -4.3015E-02, -3.7750E-02, -3.0967E-02, -3.7713E-02, -4.0160E-02, -3.2562E-02, -2.4482E-02, 5.2493E-03, 2.7544E-03, -4.7009E-04, 2.0604E-02, 5.4331E-02, 7.9676E-02, 9.3681E-02, 1.0230E-01, 1.0929E-01, 1.0908E-01, 9.8033E-02, 8.7238E-02, 8.3179E-02, 8.9189E-02, 9.3005E-02, 9.1106E-02, 8.4476E-02, 8.1387E-02, 7.6555E-02, 7.0991E-02, 6.2659E-02, 5.4054E-02, 4.5659E-02, 4.0106E-02, 3.8960E-02, 4.1717E-02, 5.0024E-02, 6.3723E-02, 7.9503E-02, 9.1709E-02, 9.8175E-02, 1.0438E-01, 1.0526E-01, 1.0464E-01, 1.0377E-01, 1.0360E-01, 1.0399E-01, 1.0381E-01, 9.9315E-02, 9.3744E-02, 9.2907E-02, 9.2775E-02, 8.6910E-02, 1.7872E-01, 1.6131E-01, 1.4784E-01, 1.3506E-01, 1.1336E-01, 1.0287E-01, 7.9680E-02, 6.4413E-02, 3.2535E-02, 1.7253E-02, 2.4220E-02, 9.9160E-03, 9.1936E-03, 6.0185E-04, 2.3575E-03, -1.3967E-02, -3.3120E-02, -5.4841E-02, -6.3014E-02, -7.2966E-02, -6.7991E-02, -6.9739E-02, -6.6421E-02, -8.1988E-02, -8.8540E-02, -1.4960E-01, -2.4732E-01, -2.8309E-01, -2.7414E-01, -2.6442E-01, -2.2237E-01, -1.6820E-01, -1.0318E-01, -6.5947E-02, -3.0025E-02, -1.5140E-02, 2.1590E-02, 9.5945E-03, 2.1707E-02, 4.3638E-02, 5.5710E-02, 7.6403E-02, 1.2004E-01, 1.5811E-01, 2.0282E-01, 2.2843E-01, 2.3639E-01, 2.1106E-01, 1.6749E-01, 1.2190E-01, 9.7647E-02, 6.6071E-02, 6.0165E-02, 5.2608E-02, 5.0058E-02, 2.6061E-02, 2.3372E-02, 2.8035E-02, 2.1727E-02, 3.1492E-02, 3.4607E-02, 3.8085E-02, 3.1588E-02, 3.4438E-02, 3.4553E-02, 2.5274E-02, 1.7106E-02, 6.6460E-03, 1.0944E-02, 9.0160E-03, 1.0168E-02, 2.6690E-02, 5.1067E-02, 6.1069E-02, 2.2162E-02, 2.1056E-02, 3.6434E-02, 2.5227E-02, 2.0859E-02, 8.1860E-03, -7.5531E-03, 2.2782E-03, 1.3643E-02, 2.8270E-02, 2.4433E-02, 2.3286E-02, 1.4885E-02, 1.4683E-02, 1.5321E-02, -3.3704E-03, -2.7417E-02, -3.9507E-02, -4.4338E-02, -4.7127E-02, -5.3899E-02, -5.6095E-02, -6.1133E-02, -7.1416E-02, -8.4805E-02, -9.2659E-02, -9.4583E-02, -8.9015E-02, -8.3642E-02, -7.8177E-02, -7.0626E-02, -6.4089E-02, -5.3404E-02, -4.2357E-02, -3.6242E-02, -3.2839E-02, -2.7683E-02, -2.2977E-02, -2.2019E-02, -1.9192E-02, -9.4065E-03, -1.4701E-03, 4.3168E-03, 8.6627E-03, 8.6637E-03, 7.8359E-03, 9.2444E-03, 8.1310E-03, 7.3327E-03, 1.5146E-02, 1.2688E-02, 4.2541E-03, -2.4448E-03, 2.4788E-01, 2.6992E-01, 2.7592E-01, 2.8362E-01, 2.6898E-01, 2.4038E-01, 2.0051E-01, 1.6990E-01, 1.4739E-01, 1.3150E-01, 1.2797E-01, 1.1462E-01, 9.7509E-02, 8.3836E-02, 7.5472E-02, 5.8973E-02, 3.9537E-02, 2.4819E-02, 8.0381E-03, 5.9907E-05, 1.6631E-02, 1.3854E-02, 1.2806E-02, 1.0898E-03, 6.7113E-03, 1.3455E-02, 1.2832E-03, 1.1929E-02, -1.6934E-03, -2.5050E-04, -1.1371E-02, -1.2964E-02, -2.4054E-02, -2.2541E-02, -2.2897E-02, -2.7291E-02, -6.0239E-02, -7.6961E-02, -9.0935E-02, -1.4960E-01, -1.5376E-01, -1.5899E-01, -1.3928E-01, -1.5990E-01, -1.5054E-01, -1.2249E-01, -1.2203E-01, -1.3078E-01, -1.5315E-01, -1.3410E-01, -1.2480E-01, -1.4299E-01, -1.2343E-01, -8.4372E-02, -9.0411E-02, -8.5402E-02, -5.7741E-02, -3.4169E-02, -3.8898E-02, -3.7473E-02, -4.3327E-02, -3.4314E-02, -2.4932E-02, -2.1244E-02, -2.2717E-02, 1.6098E-03, -5.3373E-04, 1.9761E-02, 2.2892E-02, 3.9973E-02, 5.2182E-02, 7.6627E-02, 1.1427E-01, 9.0965E-02, 7.7530E-02, 8.6847E-02, 7.6867E-02, 6.6663E-02, 5.0833E-02, 5.2314E-02, 5.2349E-02, 3.9194E-02, 2.1419E-02, -4.2013E-03, 1.3618E-02, 2.2691E-02, 2.5515E-02, 1.4107E-02, 9.6749E-03, -2.3843E-03, 2.3689E-04, 1.7173E-02, 3.1864E-02, 2.6256E-02, 2.7847E-02, 2.7019E-02, 1.8110E-02, -4.5888E-03, -2.4125E-02, -2.4967E-02, -1.4374E-02, -1.0569E-03, 6.5190E-03, 4.0289E-03, 2.8105E-03, 3.2398E-03, 5.5700E-03, 3.1706E-03, 2.4287E-03, 1.6461E-03, -1.9989E-03, -4.1095E-03, -7.5505E-03, -8.3730E-03, -1.1166E-02, -1.6232E-02, -2.0063E-02, -2.0743E-02, -1.8582E-02, -1.7125E-02, -1.7401E-02, -1.7549E-02, -1.5950E-02, -2.5165E-02, -2.6131E-02, -2.3956E-02, -2.1353E-02, 8.5104E-02, 6.7568E-02, 2.5684E-02, 1.4038E-02, 1.7334E-02, 2.1337E-02, 3.1487E-02, 3.6184E-02, 4.1799E-02, 4.7087E-02, 2.5597E-02, 1.4525E-02, -3.4697E-03, -1.7907E-02, -4.3141E-02, -4.6190E-02, -3.7592E-02, -5.2472E-02, -8.6513E-02, -1.4517E-01, -1.4070E-01, -1.3627E-01, -1.3825E-01, -1.3622E-01, -1.5208E-01, -1.0464E-01, -2.6580E-02, -7.4584E-03, 2.3635E-02, 6.2161E-02, 7.5332E-02, 8.1387E-03, -1.4134E-02, -1.9753E-02, -6.8396E-03, 3.8127E-03, 4.0510E-02, 4.4396E-02, 1.8095E-03, -7.8453E-04, 3.1790E-02, 7.5441E-02, 1.1566E-01, 9.6532E-02, 8.6490E-02, 4.2071E-02, -5.3753E-03, -4.2827E-02, -6.6039E-02, -5.8387E-02, -8.1456E-02, -1.2424E-01, -3.8532E-02, 3.5237E-02, 7.8191E-02, 2.8349E-02, 9.9199E-02, 1.3491E-01, 1.0699E-01, 9.4344E-02, 1.1191E-01, 1.1769E-01, 9.5657E-02, 9.1459E-02, 1.2173E-01, 1.1910E-01, 7.1304E-02, 3.6958E-02, 1.7681E-02, -5.6660E-03, -3.8472E-02, -7.2935E-02, -1.2952E-01, -7.4668E-02, -6.5490E-02, -6.4160E-02, -7.5010E-02, -6.6591E-02, -5.8061E-02, -2.5572E-02, 2.3457E-02, 1.6004E-02, -1.1629E-02, -1.0354E-02, -2.3101E-02, -5.8318E-03, 2.4226E-03, 1.4488E-02, 4.0321E-02, 4.4821E-02, 4.5397E-02, 4.4631E-02, 4.5292E-02, 4.3400E-02, 4.6590E-02, 5.9489E-02, 8.3147E-02, 1.1092E-01, 1.2666E-01, 1.2183E-01, 1.1462E-01, 1.1421E-01, 1.1672E-01, 1.1938E-01, 1.2338E-01, 1.2416E-01, 1.2772E-01, 1.2457E-01, 1.1772E-01, 9.9348E-02, 7.9961E-02, 4.7621E-02, -2.6586E-03, -4.5810E-02, -7.2016E-02, -1.0226E-01, -1.2794E-01, -1.4348E-01, -1.5711E-01, -1.5947E-01, -1.6418E-01, -1.7374E-01, -1.7417E-01, -1.8374E-01, -1.9941E-01, -1.9759E-01, -1.8531E-01, -5.8092E-02, -6.1691E-02, -5.0704E-02, -6.4452E-02, -9.5844E-02, -1.0872E-01, -1.2187E-01, -1.3167E-01, -1.1003E-01, -6.8929E-02, -1.9162E-02, 3.2682E-02, 1.0308E-01, 1.6098E-01, 1.9124E-01, 2.0035E-01, 1.6992E-01, 1.3279E-01, 1.4305E-01, 1.4554E-01, 1.4480E-01, 8.1202E-02, 5.5000E-02, 3.9342E-03, -7.8086E-02, -5.8691E-02, -1.0670E-01, -1.5167E-01, -1.8790E-01, -2.4511E-01, -2.8558E-01, -2.0352E-01, -7.9464E-02, -1.0107E-02, 6.3177E-02, 1.4796E-01, 1.4331E-01, 1.4035E-01, 8.9840E-02, 5.2046E-02, 2.1436E-02, -2.2735E-02, -4.7379E-02, -7.7192E-02, -1.3424E-01, -1.8913E-01, -1.7931E-01, -1.5077E-01, -9.0544E-02, -4.5661E-02, -5.0060E-02, -6.8021E-02, -1.0967E-04, 3.8309E-02, 9.2581E-02, 2.1229E-02, 6.7666E-02, 8.5789E-02, 3.7083E-02, 8.4465E-03, 4.3838E-03, 1.5536E-02, 4.2162E-03, 3.0001E-02, 5.9735E-03, 2.6366E-02, 3.0350E-02, 5.9113E-02, 7.8086E-02, 8.7923E-02, 1.3296E-01, 1.0674E-01, 5.0414E-02, 6.9585E-02, 2.8368E-02, -6.6046E-03, 2.1861E-02, 9.1075E-03, -2.2754E-02, -1.5811E-02, -1.2232E-02, 3.5348E-02, 4.0023E-02, 3.3950E-02, 1.1339E-02, 1.3410E-02, 5.1790E-03, -1.1536E-02, -3.4503E-02, -3.2020E-02, -3.9085E-02, -6.3915E-02, -7.0004E-02, -8.2224E-02, -6.2865E-02, -4.4074E-02, -1.0653E-02, 2.0233E-02, 2.6680E-02, 5.3318E-03, -9.3843E-03, -6.3713E-03, 7.6304E-03, 2.7847E-02, 4.8079E-02, 7.1583E-02, 8.7916E-02, 9.0540E-02, 9.0213E-02, 8.0460E-02, 6.7736E-02, 3.9942E-02, -4.1840E-03, -4.0432E-02, -6.3992E-02, -8.6513E-02, -9.2154E-02, -8.7104E-02, -7.9565E-02, -5.6641E-02, -4.2611E-02, -3.4434E-02, -1.9606E-02, -9.4571E-03, -1.2463E-02, -5.9629E-03, 1.2468E-02); \n//The first 8 rows of the V matrix: \nfloat V[1016] = float[](-1.2549E-04, -1.5666E-04, -1.8989E-04, -2.2463E-04, -2.5064E-04, -2.6632E-04, -2.8839E-04, -3.2241E-04, -3.6463E-04, -4.0969E-04, -4.5423E-04, -4.9841E-04, -5.4126E-04, -5.7030E-04, -5.8662E-04, -6.0188E-04, -6.1601E-04, -6.3077E-04, -6.4092E-04, -6.4688E-04, -6.5422E-04, -6.5786E-04, -6.6397E-04, -6.7279E-04, -6.9850E-04, -7.2309E-04, -7.3535E-04, -7.4311E-04, -7.4752E-04, -7.5184E-04, -7.5604E-04, -7.6151E-04, -7.7467E-04, -7.7950E-04, -7.8335E-04, -7.8850E-04, -7.9428E-04, -7.8972E-04, -7.7685E-04, -7.7035E-04, -7.7073E-04, -7.7241E-04, -7.7918E-04, -7.8896E-04, -8.0170E-04, -8.0648E-04, -8.0597E-04, -8.0510E-04, -8.0998E-04, -8.1100E-04, -8.2967E-04, -8.5076E-04, -8.5907E-04, -8.6823E-04, -8.7374E-04, -8.8137E-04, -8.8540E-04, -8.9210E-04, -8.8867E-04, -8.8947E-04, -8.9059E-04, -8.9918E-04, -9.0917E-04, -9.1179E-04, -9.1112E-04, -9.1333E-04, -9.1486E-04, -9.1109E-04, -9.1084E-04, -9.1278E-04, -9.0695E-04, -9.0104E-04, -8.9206E-04, -8.8061E-04, -8.6629E-04, -8.5349E-04, -8.5050E-04, -8.5238E-04, -8.4676E-04, -8.3938E-04, -8.3530E-04, -8.2562E-04, -8.1690E-04, -8.0192E-04, -7.8314E-04, -7.5086E-04, -7.5072E-04, -7.3206E-04, -7.3119E-04, -7.3808E-04, -7.4091E-04, -7.3157E-04, -7.1574E-04, -6.9622E-04, -6.9128E-04, -6.8473E-04, -6.6998E-04, -6.6453E-04, -6.7203E-04, -6.7894E-04, -6.7495E-04, -6.7625E-04, -6.8365E-04, -6.8362E-04, -6.9063E-04, -6.9661E-04, -7.0143E-04, -7.0877E-04, -6.9973E-04, -6.9775E-04, -7.0055E-04, -6.9753E-04, -7.0148E-04, -6.9881E-04, -6.9645E-04, -6.9322E-04, -6.8795E-04, -6.8071E-04, -6.8062E-04, -6.7562E-04, -6.7615E-04, -6.7422E-04, -6.7107E-04, -6.6219E-04, -6.5961E-04, -6.5797E-04, -6.5103E-04, 1.0232E-05, 1.6698E-05, 8.5319E-06, -1.2359E-05, -3.2217E-05, -4.9852E-05, -7.0070E-05, -9.4774E-05, -1.2001E-04, -1.4539E-04, -1.7262E-04, -1.9580E-04, -2.1025E-04, -2.1522E-04, -2.1406E-04, -2.0951E-04, -2.0096E-04, -1.8028E-04, -1.6050E-04, -1.4380E-04, -1.2603E-04, -1.1750E-04, -1.0968E-04, -1.0192E-04, -7.3146E-05, -4.5408E-05, -3.5866E-05, -3.1623E-05, -3.5983E-05, -4.4150E-05, -6.0908E-05, -6.9559E-05, -5.7362E-05, -5.3933E-05, -5.4771E-05, -5.3507E-05, -5.2086E-05, -6.8745E-05, -1.0332E-04, -1.2087E-04, -1.2712E-04, -1.2898E-04, -1.2086E-04, -1.0300E-04, -8.1348E-05, -7.1677E-05, -6.0762E-05, -4.5204E-05, -1.4076E-05, 4.0821E-06, 5.5788E-05, 1.0439E-04, 1.2090E-04, 1.4362E-04, 1.6600E-04, 1.8882E-04, 1.9714E-04, 2.1146E-04, 2.1567E-04, 2.2361E-04, 2.2548E-04, 2.4061E-04, 2.5149E-04, 2.5827E-04, 2.5690E-04, 2.5571E-04, 2.5014E-04, 2.4383E-04, 2.3817E-04, 2.3964E-04, 2.3744E-04, 2.3634E-04, 2.3484E-04, 2.3286E-04, 2.3593E-04, 2.3340E-04, 2.2858E-04, 2.1769E-04, 2.0399E-04, 1.8904E-04, 1.7273E-04, 1.4039E-04, 1.1904E-04, 8.8848E-05, 5.4032E-05, -1.1921E-05, -1.1182E-05, -4.1779E-05, -4.2105E-05, -2.5106E-05, -1.7941E-05, -4.3730E-05, -7.7928E-05, -1.0747E-04, -1.0940E-04, -1.1151E-04, -1.3267E-04, -1.4716E-04, -1.4082E-04, -1.2825E-04, -1.4347E-04, -1.4659E-04, -1.4182E-04, -1.4555E-04, -1.3663E-04, -1.2215E-04, -1.1046E-04, -9.9343E-05, -1.1784E-04, -1.2199E-04, -1.1388E-04, -1.1357E-04, -1.0108E-04, -1.0828E-04, -1.0816E-04, -1.1092E-04, -1.1998E-04, -1.2908E-04, -1.2675E-04, -1.3838E-04, -1.4326E-04, -1.4439E-04, -1.4654E-04, -1.5819E-04, -1.6027E-04, -1.5840E-04, -1.5786E-04, 2.3770E-05, 4.3984E-05, 9.4181E-05, 1.6225E-04, 2.1673E-04, 2.4594E-04, 2.5413E-04, 2.4504E-04, 2.2316E-04, 1.9450E-04, 1.5773E-04, 1.1392E-04, 6.8139E-05, 3.8051E-05, 2.1001E-05, 1.1640E-05, 8.9453E-06, 1.1420E-05, 1.8008E-05, 2.7351E-05, 3.2798E-05, 2.9949E-05, 2.7783E-05, 2.2485E-05, 1.1974E-05, -6.2580E-07, -5.1754E-06, -7.5297E-06, -1.4894E-05, -3.1200E-05, -5.0963E-05, -5.4823E-05, -4.1175E-05, -3.5398E-05, -3.7901E-05, -4.2093E-05, -5.0065E-05, -6.8000E-05, -9.6656E-05, -1.0906E-04, -1.1509E-04, -1.1703E-04, -1.2199E-04, -1.2613E-04, -1.2866E-04, -1.2703E-04, -1.0997E-04, -9.8875E-05, -9.5545E-05, -7.7496E-05, -6.5153E-05, -4.8574E-05, -4.7675E-05, -5.5401E-05, -6.1704E-05, -7.1502E-05, -6.8279E-05, -6.2824E-05, -5.3099E-05, -4.4663E-05, -3.0458E-05, -2.6065E-05, -1.7763E-05, -9.8773E-06, -1.1214E-06, 5.9738E-06, 1.5327E-05, 2.0796E-05, 2.6373E-05, 2.8808E-05, 3.4840E-05, 4.3155E-05, 5.3607E-05, 6.1268E-05, 6.8060E-05, 7.4851E-05, 7.7334E-05, 7.4646E-05, 7.5068E-05, 7.4363E-05, 7.2537E-05, 7.1620E-05, 6.4683E-05, 5.9990E-05, 5.4993E-05, 4.8231E-05, 5.0505E-05, 6.6367E-05, 6.3074E-05, 5.2355E-05, 4.2357E-05, 2.3845E-05, -4.1428E-06, -1.3531E-05, -2.2148E-05, -2.9171E-05, -2.9523E-05, -3.0069E-05, -2.5930E-05, -2.7825E-05, -4.0317E-05, -4.4400E-05, -5.0764E-05, -4.4715E-05, -3.2759E-05, -9.5195E-06, 1.2232E-06, -2.8518E-06, -6.5821E-06, -1.1782E-05, -4.5197E-06, 9.2826E-06, 1.6017E-05, 1.9707E-05, 2.1341E-05, 2.2797E-05, 2.3127E-05, 2.4812E-05, 2.3036E-05, 2.4244E-05, 2.1882E-05, 2.8063E-05, 3.0053E-05, 3.1958E-05, 3.4146E-05, 3.5396E-05, 3.9517E-05, -8.8762E-05, -9.5501E-05, -9.1839E-05, -8.1511E-05, -6.5024E-05, -5.1718E-05, -3.3034E-05, -7.9820E-06, 1.9406E-05, 4.2266E-05, 6.2581E-05, 7.6586E-05, 8.5816E-05, 8.9916E-05, 8.8503E-05, 7.9019E-05, 7.1457E-05, 7.0443E-05, 7.4791E-05, 8.3669E-05, 9.1120E-05, 8.7990E-05, 7.9293E-05, 7.3696E-05, 7.2200E-05, 6.2566E-05, 5.7802E-05, 5.5776E-05, 5.3934E-05, 4.5912E-05, 3.2030E-05, 3.2444E-05, 4.2762E-05, 3.9005E-05, 3.4871E-05, 3.1570E-05, 2.2943E-05, 4.2512E-06, -2.8162E-05, -4.0461E-05, -4.9227E-05, -5.8465E-05, -6.2648E-05, -6.7444E-05, -7.1310E-05, -7.4876E-05, -6.4195E-05, -5.6906E-05, -4.3334E-05, -1.5235E-05, 1.6762E-05, 5.2844E-05, 6.1292E-05, 6.2161E-05, 6.4520E-05, 6.5293E-05, 6.3953E-05, 6.5709E-05, 6.2165E-05, 6.1098E-05, 5.4758E-05, 5.2170E-05, 4.8856E-05, 4.2931E-05, 3.5873E-05, 3.0107E-05, 2.5677E-05, 1.9840E-05, 1.4978E-05, 1.2989E-05, 8.2278E-06, 1.3145E-06, -8.3695E-06, -1.4549E-05, -2.5447E-05, -3.6678E-05, -4.0586E-05, -4.0178E-05, -4.3514E-05, -4.9051E-05, -5.2376E-05, -5.8612E-05, -7.1626E-05, -8.5131E-05, -9.5076E-05, -1.1123E-04, -1.0225E-04, -9.2598E-05, -8.0459E-05, -7.4221E-05, -7.3774E-05, -8.6996E-05, -1.1132E-04, -1.1733E-04, -1.1297E-04, -1.0628E-04, -1.0445E-04, -1.0007E-04, -9.0216E-05, -8.5239E-05, -8.9784E-05, -8.3890E-05, -7.9444E-05, -7.1675E-05, -5.5052E-05, -2.8536E-05, -1.4790E-05, -1.1572E-05, -1.4259E-05, -1.7812E-05, -5.7514E-06, 1.0002E-05, 2.2466E-05, 3.1103E-05, 4.3237E-05, 5.1001E-05, 5.1865E-05, 5.3334E-05, 5.4662E-05, 5.3816E-05, 4.8814E-05, 5.0761E-05, 5.0944E-05, 5.5946E-05, 5.6543E-05, 5.6857E-05, 6.4689E-05, 8.5734E-05, 1.0862E-04, 1.1591E-04, 1.1375E-04, 1.0515E-04, 8.7385E-05, 6.3872E-05, 3.6171E-05, 4.0707E-06, -2.5173E-05, -4.4123E-05, -5.3442E-05, -5.8764E-05, -5.4173E-05, -4.7700E-05, -3.6270E-05, -2.6646E-05, -2.9622E-05, -3.2859E-05, -3.4514E-05, -3.1981E-05, -3.0089E-05, -2.6409E-05, -1.1153E-05, 2.3842E-05, 3.8202E-05, 4.5241E-05, 5.1605E-05, 6.4706E-05, 8.5537E-05, 1.0456E-04, 1.1964E-04, 1.2078E-04, 1.1110E-04, 1.0538E-04, 1.0518E-04, 1.0339E-04, 1.0304E-04, 1.0104E-04, 9.9462E-05, 8.5648E-05, 6.5409E-05, 5.3811E-05, 3.7476E-05, 2.6580E-05, 1.4635E-05, -3.9863E-06, -3.2775E-05, -4.9687E-05, -6.3396E-05, -5.4520E-05, -3.6959E-05, -3.6495E-05, -3.5740E-05, -3.7292E-05, -2.7539E-05, -3.3710E-05, -2.8283E-05, -4.2548E-05, -3.9884E-05, -4.9619E-05, -3.5852E-05, -1.6031E-05, -3.5995E-06, -4.6868E-06, 3.7399E-06, 4.1691E-06, 4.3085E-06, 6.9752E-06, 2.3510E-05, 2.9165E-05, 3.9003E-05, 4.2150E-05, 3.7207E-05, 2.9831E-05, 1.8748E-05, 2.0924E-05, 2.3495E-05, 9.5509E-06, -3.1536E-06, -1.6328E-05, -3.4366E-05, -5.3333E-05, -7.3979E-05, -8.3343E-05, -9.9590E-05, -8.7285E-05, -7.7728E-05, -5.5494E-05, -3.9386E-05, -2.8077E-05, -2.5614E-05, -3.0618E-05, -4.4803E-05, -4.4717E-05, -4.0526E-05, -5.2012E-05, -5.4878E-05, -5.5698E-05, -5.1744E-05, -4.1269E-05, -3.2845E-05, -1.2783E-05, -6.1475E-06, 5.8815E-06, 1.4436E-05, 1.3536E-05, 1.4426E-05, 1.2505E-05, 5.4358E-06, 4.4803E-06, 6.1271E-06, 4.2531E-06, 4.5979E-06, 1.1140E-05, 1.1995E-05, 9.1280E-06, 3.4149E-06, 6.9174E-06, 2.9093E-06, -5.2503E-06, -1.0704E-05, -1.4025E-05, -1.4358E-05, -2.5745E-05, -3.6966E-05, -3.6826E-05, -7.5100E-05, -9.4373E-05, -9.2692E-05, -7.3293E-05, -5.1530E-05, -3.2779E-05, -2.0927E-05, -1.4825E-05, -1.0509E-05, -6.7722E-06, -4.1418E-06, -6.4259E-06, -1.2288E-05, -2.0800E-05, -2.7092E-05, -3.6974E-05, -4.4485E-05, -4.3333E-05, -3.9630E-05, -4.0077E-05, -3.7829E-05, -3.6223E-05, -3.9940E-05, -2.2595E-05, 2.8992E-05, 5.7653E-05, 4.6807E-05, 2.9700E-05, 1.2782E-05, 3.9828E-06, 2.2913E-06, -5.1765E-06, -1.3176E-05, -2.4845E-05, -2.7903E-05, -2.6992E-05, -1.8869E-05, -1.0177E-05, 1.4850E-06, 5.8937E-06, 2.2577E-06, -3.2323E-07, 1.2951E-05, 1.9623E-05, 3.6358E-05, 3.8155E-05, 2.4342E-05, 5.0123E-06, 9.9661E-06, -5.9365E-06, -1.2932E-05, -5.8577E-05, -8.3797E-05, -7.7561E-05, -7.5599E-05, -5.2294E-05, -5.6439E-05, -4.1603E-05, -6.8830E-05, -6.8319E-05, -8.3390E-05, -5.0563E-05, -1.1850E-05, 1.5394E-05, 1.8087E-05, 3.3193E-05, 3.3836E-05, 3.2357E-05, 3.5506E-05, 5.9239E-05, 6.5713E-05, 7.3615E-05, 6.8987E-05, 5.8102E-05, 4.9585E-05, 2.9111E-05, 3.8162E-05, 4.4345E-05, 2.6356E-05, 1.2831E-05, 5.0763E-06, -9.2887E-06, -1.1836E-05, -1.8954E-05, -1.6213E-05, -3.7549E-05, -1.4118E-05, -3.3496E-05, -3.0339E-05, -1.9475E-05, -3.1834E-06, 6.6622E-06, 3.8146E-05, 3.3132E-05, 4.5698E-05, 5.4921E-05, 2.9343E-05, 1.0387E-05, -7.0493E-06, -1.1628E-05, -7.1669E-06, -1.4938E-05, -6.7201E-06, -2.6530E-05, -4.1901E-05, -5.3204E-05, -6.2047E-05, -4.9605E-05, -3.9148E-05, -2.4543E-05, -2.0304E-05, -2.6742E-05, -1.6493E-05, -1.4115E-05, 1.6880E-06, 1.4700E-05, 2.3634E-05, 2.9618E-05, 5.4718E-05, 6.4898E-05, 6.4320E-05, 6.8184E-05, 7.6091E-05, 8.5625E-05, 9.2564E-05, 1.0160E-04, 1.0593E-04, 4.0886E-05, 5.0293E-05, 5.2034E-05, 4.1968E-05, 2.5599E-05, 8.4140E-06, -1.0871E-05, -3.4236E-05, -6.2434E-05, -9.0587E-05, -1.0018E-04, -8.6793E-05, -6.1464E-05, -4.1750E-05, -3.4987E-05, -3.0455E-05, -2.0387E-05, -1.9977E-05, -1.6075E-05, -1.0121E-05, -4.2559E-06, -1.0561E-06, -2.6781E-07, 1.8310E-06, 4.8180E-06, -7.3548E-07, -7.9972E-06, -1.3966E-05, -1.8812E-05, -2.3312E-05, -3.1683E-05, -3.5243E-05, -3.1804E-05, -3.2015E-05, -3.2881E-05, -3.0978E-05, -3.0975E-05, -3.2316E-05, -3.4967E-05, -3.6156E-05, -4.0504E-05, -4.3087E-05, -4.3270E-05, -4.0846E-05, -3.5073E-05, -2.9950E-05, -2.4593E-05, -2.6412E-05, -3.2254E-05, -3.2981E-05, -1.2781E-05, 1.4585E-06, 6.6730E-06, 8.1689E-06, 1.1398E-05, 1.6960E-05, 1.8269E-05, 2.1884E-05, 1.7208E-05, 1.9130E-05, 1.2816E-05, 1.1496E-05, 1.0654E-05, 7.0268E-06, 1.2052E-06, -2.0854E-06, -6.7494E-06, -1.2303E-05, -1.2708E-05, -9.9634E-06, -1.2670E-05, -1.5476E-05, -1.7705E-05, -1.4371E-05, -4.2306E-06, 6.2604E-06, 1.3903E-05, 1.5802E-05, 1.0674E-05, 2.4068E-06, -4.7576E-06, -1.6700E-05, -2.3556E-05, -3.1419E-05, -2.8593E-05, -3.3501E-05, -2.6819E-05, -6.7895E-06, -4.3516E-06, -5.7084E-06, -4.9060E-07, -1.6526E-06, -2.7875E-06, -8.6558E-06, -4.7482E-06, 8.7710E-06, 1.2654E-05, 1.4022E-05, 1.2409E-05, 1.4653E-05, 1.8855E-05, 1.7123E-05, 2.2891E-05, 3.0774E-05, 3.9618E-05, 4.8114E-05, 4.8643E-05, 4.7149E-05, 5.1595E-05, 5.2610E-05, 5.3096E-05, 5.6387E-05, 5.7744E-05, 5.6058E-05, 5.7233E-05, 5.7631E-05, 5.7966E-05, 5.9079E-05, 5.9279E-05, 5.9927E-05, 5.2385E-05, 5.4372E-05, 5.1814E-05, 5.0123E-05, 4.0588E-05, 3.6612E-05, 3.5425E-05, -5.0948E-06, -8.5964E-06, 2.7349E-06, 2.4357E-05, 3.8632E-05, 3.2419E-05, 9.3989E-06, -2.2673E-05, -5.5647E-05, -7.5237E-05, -7.7035E-05, -6.2865E-05, -3.5008E-05, -8.6805E-06, 4.6731E-06, 9.2431E-06, 8.6234E-06, 3.1127E-05, 5.2416E-05, 6.3155E-05, 6.7318E-05, 6.9407E-05, 6.7006E-05, 6.4891E-05, 4.6303E-05, 1.6890E-05, 8.5833E-06, 9.1464E-06, 1.6434E-06, -4.3037E-06, -7.3471E-06, 2.6533E-06, -7.1016E-07, -4.2591E-06, -1.4075E-06, 2.9190E-06, 3.2326E-06, 5.1936E-06, 4.7645E-06, 1.7003E-05, 2.5819E-05, 2.6554E-05, 2.9577E-05, 3.3219E-05, 1.8322E-05, -3.9202E-06, -3.1277E-05, -5.2592E-05, -5.0410E-05, -2.4994E-05, -1.5547E-05, -2.4627E-06, 1.3211E-05, 1.8066E-05, 1.5882E-05, 6.0339E-06, 2.4306E-06, -4.3485E-06, 6.6921E-07, -2.8512E-06, -2.7442E-06, -1.4619E-05, -2.1220E-05, -2.6780E-05, -2.7676E-05, -2.7561E-05, -2.4935E-05, -1.8656E-05, -1.6708E-05, -1.8170E-05, -1.6726E-05, -1.8201E-05, -1.8497E-05, -1.4028E-05, -8.0851E-06, 3.8902E-06, 8.9034E-06, 1.1379E-05, 2.4988E-05, 3.4637E-05, 4.0514E-05, 5.0565E-05, 4.9724E-05, 5.0987E-05, 3.3909E-05, 2.2630E-05, 1.0617E-05, -2.1408E-05, -5.4630E-06, 1.6175E-05, 1.2247E-05, 9.3816E-06, -5.6549E-06, 2.7361E-06, 1.7048E-05, 1.6795E-05, 6.2091E-06, 4.8969E-06, 5.5749E-06, 9.8741E-06, -1.3963E-05, -1.5325E-05, -2.7245E-05, -3.5892E-05, -4.9450E-05, -5.4804E-05, -4.5521E-05, -3.7583E-05, -5.2153E-05, -5.3014E-05, -4.2527E-05, -3.2768E-05, -1.7527E-05, -2.0934E-05, -1.6442E-05, -6.4906E-06, -1.0048E-05, -5.4097E-06, -5.0290E-07, 3.8525E-07, 3.5365E-06, 1.2103E-06, 8.3594E-07, 9.1004E-06, 1.9179E-05, 2.4737E-05, 3.3673E-05); \n//center of the convolution \nint Nc = 63; \n//number of ranks \nint Nr = 8; \n//convolution size \nint N = 127; \n\nvec3 pack2vec3(vec3 a, vec3 b) \n{\n    uvec3 packed = uvec3(packHalf2x16(vec2(a.x,b.x)), packHalf2x16(vec2(a.y,b.y)), packHalf2x16(vec2(a.z,b.z)));\n    return vec3(uintBitsToFloat(packed.x), uintBitsToFloat(packed.y), uintBitsToFloat(packed.z));\n}\n\nvoid unpack2vec3(vec3 packed, out vec3 a, out vec3 b) \n{\n    uvec3 unpacked = uvec3(floatBitsToUint(packed.x), floatBitsToUint(packed.y), floatBitsToUint(packed.z));\n    vec2 unpackedA = unpackHalf2x16(unpacked.x);\n    vec2 unpackedB = unpackHalf2x16(unpacked.y);\n    vec2 unpackedC = unpackHalf2x16(unpacked.z);\n    a = vec3(unpackedA.x, unpackedB.x, unpackedC.x);\n    b = vec3(unpackedA.y, unpackedB.y, unpackedC.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SLICES 50.0\n\nvec2 pixPos;\nmat3 cammat;\nvec3 campos;\n\nfloat k1(vec2 dx) //quadratic kernel\n{\n    vec2 f = max(1.5 - abs(dx), 0.0);\n    vec2 k = min(max(0.75 - dx*dx, 0.5), 0.5*f*f);\n    return k.x*k.y;\n}\n\nfloat minimum_distance(vec3 v, vec3 w, vec3 p) \n{\n  vec3 dx = w - v;\n  float l2 = dot(dx, dx);  \n  if (l2 == 0.0) return distance(p, v);   \n  float t = max(0.0, min(1.0, dot(p - v, w - v) / l2));\n  vec3 projection = v + t * (w - v);\n  return distance(p, projection);\n}\n\nvec3 blackBody(float T)\n{\n    vec3 O = vec3(0.0);\n    for (float i=0.; i<3.; i++) \n    { \n        float f = 1.+.5*i; \n        O[int(i)] += 10. * (f*f*f) / (exp((19E3*f/T)) - 1.);  // Planck law\n    }\n    return O;\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat region(vec3 pos)\n{\n    return texture(iChannel1, pos/200.0).x;\n}\n\n//vec3 sampleVoxel(vec3 ro, vec3 rd, vec3 pos)\n//{\n//    float r = region(pos);\n//    if(r < 0.5) return vec3(0.0);\n//    float temp = hash13(pos);\n//    vec3 heat = pow(blackBody(temp*temp*temp*20000.), vec3(1.0));\n//    vec3 spos = hash33(pos) + pos;\n//    vec4 screenPos = project(cammat, campos, iResolution.xy, spos);\n//    if(screenPos.z < 0.0) return vec3(0.0);\n//    float distr = k1(screenPos.xy - pixPos);\n//    return 100.0*heat * distr / (screenPos.w*screenPos.w);\n//}\n//\n\nvec3 sampleVoxel(vec3 ro, vec3 rd, vec3 pos)\n{\n    float r = region(pos);\n    if(r < 0.5) return vec3(0.0);\n    float temp = hash13(pos);\n    vec3 heat = pow(blackBody(temp*temp*temp*20000.), vec3(1.0));\n    vec3 spos = hash33(pos) + pos;\n    float mdist = minimum_distance(ro, ro + rd*100.0, spos);\n    float camdist = distance(ro, spos);\n    float mindist = 1.25*CAM_ANGLE*camdist;\n    float dec = smoothstep(SLICES, SLICES*0.8, camdist);\n    float bright = min(1000.0, 20.0 * dec * pow(camdist, -2.25));\n    return bright * smoothstep(mindist, 0.0, mdist) * heat;\n}\n\nvec3 VoxelRaycast(vec3 ro, vec3 rd, float maxt)\n{\n\tvec3 voxelPos = floor(ro);\n\t\n    vec3 rayInv = 1.0/rd;\n    vec3 rayMask = vec3(greaterThan(rd, vec3(0.0)));\n\tvec3 rayStep = rayMask * 2.0 - 1.0;          \n\tvec3 offset = (rayMask - ro) * rayInv;\n\n\tvec3 mask = vec3(0.0);\n    vec3 sideLength = vec3(0.0);\n    \n    float traveled = 0.0;\n    vec3 col = vec3(0.0);\n\tfor(int i = 0; i < MAX_STEPS; i++) \n\t{\n        col += sampleVoxel(ro, rd, voxelPos);\n        \n        sideLength = voxelPos * rayInv + offset;\n        mask = vec3(lessThanEqual(sideLength.xyz, min(sideLength.yzx, sideLength.zxy)));\n        voxelPos += mask * rayStep;\n        traveled = dot(sideLength, mask);\n        \n        if(traveled > maxt) break;\n\t}\n    \n    ro = ro + rd*traveled;\n\treturn col;\n}\n\nbool getRay(vec2 uv, out vec3 ro, out vec3 rd)\n{\n    mat3 cam = getCam(get(CamA));\n    cammat = cam;\n    \n    ro = get(CamP).xyz;\n    campos = ro;\n   \n    rd = normalize(cam*vec3(FOV*uv, 1.0));\n    \n    return true;\n}\n\nvec4 render(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 cp, rd;\n    if(!getRay(uv, cp, rd)) return vec4(0,0,0,1);\n   \n    return vec4(VoxelRaycast(cp, rd, SLICES), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CAM_ANGLE = 1.5 * FOV / iResolution.y;\n    fragColor = vec4(0.0);   \n    pixPos = floor(fragCoord);\n\n    fragColor += render(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//first pass of separable convolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    //do a convolution in the x direction on iChannel0\n    //since we have 6 ranks and we can only store 2 in a vec3 we need to do the partial sums in 1/2 resolution chunks in a single buffer(which means max 8 ranks)\n    ivec2 coord = ivec2(fragCoord.xy) % ivec2(iResolution.xy/2.0);\n    ivec2 block = ivec2(fragCoord.xy) / ivec2(iResolution.xy/2.0);\n    int rank_offset = 2 * (block.x + block.y * 2);\n\n    if(rank_offset >= Nr)\n        discard;\n\n    vec3 sum0 = vec3(0.0);\n    vec3 sum1 = vec3(0.0);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        //since we are doing it at 1/2 resolution we need to use 1 mip level higher\n        vec4 pixel = texelFetch(iChannel0, coord + ivec2(0, i), 1);\n        vec3 pcolor = min(pow(pixel.xyz/(pixel.w+1e-6),vec3(2.3)), 5.0);\n        \n        //get the rank index\n        int offset = i + Nc;\n        sum0 += pcolor * U[offset + rank_offset * N];\n        sum1 += pcolor * U[offset + (rank_offset + 1) * N];\n    }\n\n    //write the sum packed to the output\n    fragColor = vec4(pack2vec3(sum0, sum1), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//second pass: do the convolution in the y direction\n//and write the result to the output    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //do a convolution in the y direction on iChannel0\n    ivec2 resol = ivec2(iResolution.xy/2.0);\n    ivec2 coord = ivec2(fragCoord.xy) % resol;\n    ivec2 block = ivec2(fragCoord.xy) / resol;\n\n    //we only need 1 block, since we can sum all the ranks here\n    if(block.x + block.y * 2 >= 1)\n        discard;\n\n    vec3 sum = vec3(0.0);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        ivec2 pos = ivec2(coord.x + i, coord.y);\n\n        //skip if the coordinate is outside the image\n        if(pos.x < 0 || pos.x >= resol.x || pos.y < 0 || pos.y >= resol.y)\n            continue;\n        \n        //loop over pairs of ranks\n        for(int j = 0; j < Nr; j += 2)\n        {\n            int block_id = j / 2;\n            ivec2 block_offset = ivec2(block_id % 2, block_id / 2);\n            vec4 pixel = texelFetch(iChannel0, pos + block_offset * resol, 0);\n\n            //unpack the values\n            vec3 val1, val2;\n            unpack2vec3(pixel.xyz, val1, val2);\n\n            //add the values to the sum\n            sum += val1 * V[i + Nc + j * N];\n            sum += val2 * V[i + Nc + (j + 1) * N];\n        }\n    }\n\n    //return the sum\n    fragColor = vec4(sum, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}