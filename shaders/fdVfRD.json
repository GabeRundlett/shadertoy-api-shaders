{
    "Shader": {
        "info": {
            "date": "1666483544",
            "description": "My latest phone wallpaper.",
            "flags": 40,
            "hasliked": 0,
            "id": "fdVfRD",
            "likes": 20,
            "name": "Snowflake Dreams",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia",
                "mouse",
                "sound",
                "triangle",
                "fm",
                "orbit",
                "snowflake"
            ],
            "usePreview": 0,
            "username": "amhall",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "/*\n\n    Snowflake Dreams\n    Headphones or subwoofer recommended.\n    Created by Anthony Hall, 2022\n\n    I wanted a phone background with randomized Julia sets. I decided it would\n    be cool if it had sound to go with it.\n\n    The movement speed of C corresponds to the modulating wave amplutide for a\n    simple FM bass. Each iteration of triangles corresponds to one \"harmonic\"\n    of an additive synth. The \"brightness\" corresponds to a flanger on the\n    additive synth. There are a couple small details that polish up the sound\n    nicely.\n\n    Most of the animation parameters are in the common tab.\n\n*/\n\n\n// This is the total number of samples (radial around the pixel center) rather\n// than the size of a grid. Even a 2x2 grid is unnecessary for decent quality\nconst int SAMPLES = 3;\n\n// This biases later iterations to have more influence on the orbit trap, so\n// the smaller triangles are a bit bigger/brighter. I find that this looks much\n// better and reduces aliasing quite a bit. It's slightly more expensive though.\n#define ITERBIAS 0.9\n\n// Color banding is pretty noticeable on this one.\n#define DITHER\n\n// \"Globals\" populated in mainImage()\nvec2 C;\nfloat currentMaxIters, brightness;\n\nconst float phi = 2.0 / (1.0 + sqrt(5.0));\n\n\nvec2 cSquare(vec2 z)\n{\n    return vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y);\n}\n\n// Story time: some of my backgrounds use a generalized polygon \"distance\"\n// function in order to morph between different polygons. It was based on\n// radial domain repetition so it used 2 trig functions among other things.\n// The problem was I always copy+pasted that function even when my polygons\n// had a fixed number of sides, so a handful of my projects have been running\n// really inefficiently for who knows how long. Including projects I posted\n// on Shadertoy :(\nfloat orbitTrap(vec2 point)\n{\n    point.y = abs(point.y);\n    return max(point.x, dot(point, vec2(-0.5, 0.5 * sqrt(3.0))));\n}\n\nvec3 image(vec2 fragCoord)\n{\n    vec2 z = 1.3 * (2.0 * fragCoord - iResolution.xy)\n        / min(iResolution.x, iResolution.y);\n\n    // Main Julia loop\n    float minOrbitDist = 1e5;\n    float iter;\n    for (iter = 0.0; iter < floor(currentMaxIters); iter += 1.0)\n    {\n        z = cSquare(z) + C;\n        float orbitDist = orbitTrap(z);\n        \n        // This might break too early for high aspect ratios\n        if (orbitDist > 10.0)\n            break;\n\n        #ifdef ITERBIAS\n            orbitDist *= pow(ITERBIAS, iter);\n        #endif\n        \n        minOrbitDist = min(minOrbitDist, orbitDist);\n    }\n    \n    // Mix in the partial last iteration\n    if (fract(currentMaxIters) > 0.0)\n    {\n        z = cSquare(z) + C;\n        float orbitDist = orbitTrap(z);\n        \n        #ifdef ITERBIAS\n            orbitDist *= pow(ITERBIAS, iter);\n        #endif\n        \n        minOrbitDist = mix(minOrbitDist, min(minOrbitDist, orbitDist),\n            fract(currentMaxIters));\n    }\n\n    float intensity = 1.0 / (minOrbitDist + 1.0);\n    \n    // Enabling the bias makes the brightness and exponents require some\n    // compensation to get everything looking nice\n    #ifdef ITERBIAS\n        brightness *= ITERBIAS;\n    #endif\n    \n    intensity = mix(intensity, \n        intensity * intensity * (3.0 - 2.0 * intensity), brightness);\n    \n    vec3 exponents = \n        vec3(8.0, 4.0, 1.0); // Ice blue\n        //vec3(15.0, 5.0, 1.0); // Slightly more saturated blue\n        //vec3(1.0, 5.0, 20.0); // Flame red\n        //vec3(3.5, 12.0, 1.2); // Purple\n        \n    #ifdef ITERBIAS\n        exponents /= ITERBIAS;      \n    #endif\n\n    return pow(vec3(intensity), exponents);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Calculate all the globals first\n    float cycle = animCycleFreq * iTime;\n\n    float oscillate = 0.5 - 0.5 * cos(cycle * tau);\n    oscillate = pow(oscillate, iterOscillateExponent);\n    currentMaxIters = 1.0 + (maxIters - 1.0) * (oscillate);\n    \n    brightness = 0.5 - 0.5 * cos(brightnessFreq * iTime * tau);\n\n    // Concentrate the movment within each cycle toward the beginning/end\n    // Skip first half of first cycle\n    float movement = 2.0 * fract(max(cycle, 0.5)) - 1.0; \n    movement = 0.5 * sign(movement) * pow(abs(movement), cMovementExponent);\n\n    // Add slight constant movement and a randomized value to the angle\n    float theta = 4.0 * phi * (floor(cycle) + movement) + 0.01 * iTime\n        + texelFetch(iChannel0, RANDTEXEL, 0).x * tau;\n    \n    // Normally, C will move slowest near the cusp. Because C doesn't\n    // travel exactly on the cardioid border, I don't know the optimal way\n    // to even out the movement speed. This basically stretches a sine\n    // wave's x axis toward x = 0 and adds that to theta, so theta moves\n    // faster near the cusp. I can't find a combination of an exponent and\n    // sine multiplier that doesn't look at least a little awkward going\n    // around the cusp.\n    float sinPhase = mod(theta / pi + 1.0, 2.0) - 1.0;\n    sinPhase = sign(sinPhase) * pow(abs(sinPhase), 0.7);\n    theta += 0.7 * sin(pi * sinPhase);\n    \n    // Move C around the main cardioid + mouse offset\n    float r = 0.6 - 0.5 * cos(theta);\n    C = r * vec2(cos(theta), sin(theta));\n    C.x += 0.25;\n    C += texelFetch(iChannel0, MOUSETEXEL, 0).xy;\n\n    // Radial supersample logic\n    vec3 color = vec3(0);\n    if (SAMPLES > 1 && abs(fragCoord.x - 0.5 * iResolution.x) / iResolution.x < 0.375)\n    {\n        for (int i = 0; i < SAMPLES; i++)\n        {\n            float theta = float(i) / float(SAMPLES) * tau;\n            vec2 offset = 0.25 * vec2(cos(theta), sin(theta));\n            color += image(fragCoord + offset);\n        }\n        color /= float(SAMPLES);\n    }\n    else\n    {\n        color = image(fragCoord);\n    }\n    \n    #ifdef DITHER\n        // Convert to (steps + 1) discrete values and dither\n        const float steps = 255.0;\n        vec3 substep = fract(color * steps);\n        color = floor(color * steps) / steps;\n        \n        ivec2 noiseTexel = ivec2(mod(fragCoord, iChannelResolution[1].xy));\n        vec3 threshold = texelFetch(iChannel1, noiseTexel, 0).rrr;\n        \n        color += vec3(greaterThan(substep, threshold)) / steps;\n    #endif\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// *** Changing these changes both the animation and sound ***\n\nconst float maxIters = 30.0;\n\n// Frequency of the entire animation in seconds\nconst float animCycleFreq = 0.07;\n\n// Higher value -> More of C's movement happens when the iter count is low\nconst float cMovementExponent = 8.0; // MUST be > 1.0, recommended >= 2.0\n\n// Higher value -> iter count spends more time low than high\nconst float iterOscillateExponent = 1.4;\n\n// Frequency of brightness oscillation\nconst float brightnessFreq = 0.24;\n\nconst float pi = radians(180.0);\nconst float tau = radians(360.0);\nconst ivec2 RANDTEXEL = ivec2(0);\nconst ivec2 MOUSETEXEL = ivec2(32, 0);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// The movement speed of C corresponds to the modulating wave amplutide for a\n// simple FM bass. Each iteration of triangles corresponds to one \"harmonic\"\n// of an additive synth. The \"brightness\" corresponds to a flanger on the\n// additive synth.\n\n\n// This is the FM bass's frequency; the additive synth's is 3x this\nconst float baseFreq = 55.0 * exp2(-2.0/12.0); // G0\n\n// 32 bit floats can represent any integer sample value in the allotted 180\n// seconds, whereas using the time value for a sample immediately introduces\n// some rounding error. This pretty quickly becomes an audible buzzing. Getting\n// the phase with the actual sample value makes rounding less of a problem.\nfloat getPhase(float freq, float samp)\n{\n    float samplesPerCycle = iSampleRate / freq;\n    return mod(samp, samplesPerCycle) / samplesPerCycle;\n}\n\n// Sub/FM bass that goes with C's movement. The pitch of the modulating wave\n// is stereo, but the carrier is mono. This way there's stereo width except\n// for when it's just the sub, so there's no phase cancellation on a subwoofer.\nfloat getMovementSound(float animCycle, float samp, float time, float channel)\n{\n    float channelOffset = 2.0 * channel - 1.0;\n\n    // The modulator amplitude is proportional to C's movement speed\n    float modulatorAmp = 2.0 * fract(max(animCycle, 0.5)) - 1.0;\n    modulatorAmp = 7.5 * pow(abs(modulatorAmp), cMovementExponent - 1.0);\n    \n    float carrierFreq = baseFreq; \n    float carrierPhase = getPhase(carrierFreq, samp);\n    \n    float modulatorFreq = carrierFreq * exp2(0.02/12.0 * channelOffset); // 2 cent detune\n    float modulatorPhase = getPhase(modulatorFreq, samp);\n    \n    float sinPhase = carrierPhase + carrierFreq\n        * modulatorAmp * sin(modulatorPhase * tau) / (modulatorFreq * tau);\n    \n    return sin(sinPhase * tau);\n}\n\n// Triangle wave, odd rather than even so there's no DC offset when multiple\n// harmonics are added together\nfloat triangle(float phase)\n{\n    return 2.0 * abs(2.0 * fract(phase - 0.25) - 1.0) - 1.0;\n}\n\n// A harmonic series of triangle waves, where each harmonic corresponds to\n// one iteration of the Julia set. The fundamental is a triangle instead of\n// a sine so that 1) each harmonic is more audibly distinguishable and 2) the\n// final result doesn't end up sounding almost exactly like a saw wave.\n\n// The magic here is making the waveform dynamic. This is easily accomplished\n// by shifting the frequency of each harmonic a little bit so there's some\n// movement. By differing the frequency shifts per channel, you get effortless\n// stereo width. I find it sounds cleaner with no movement nor stereo width in\n// the first 2 harmonics.\n\nfloat getHarmonic(float harmonic, inout float totalAmp, float ampScale,\n                  float samp, float channel)\n{\n    // Quiet down the higher harmonics, but not aggressively\n    float amp = ampScale * pow(harmonic, -0.65);\n    totalAmp += amp;\n    \n    // Because of how the phase is fixed for the first 2 harmonics, this will\n    // retain maximum possible amplitude\n    totalAmp -= ampScale * 0.5 * float(harmonic == 2.0);\n    \n    // Because of the irrational frequency shift amounts, the peaks/valleys\n    // of the rest of the harmonics should never all align to reach peak\n    // amplitude (I think), i.e. in theory there's some guaranteed headroom\n    // and I could boost the volume some more. Not worth it in my opinion.\n    float freq = harmonic * 3.0 * baseFreq;\n    freq += 0.5 * fract(harmonic * sqrt(2.1 + channel)) * float(harmonic >= 3.0);\n    \n    float phase = getPhase(freq, samp);\n    return amp * triangle(phase);\n    \n}\n\nfloat getIterSound(float animCycle, float samp, float time, float channel)\n{\n    float iterOscillate = 0.5 - 0.5 * cos(animCycle * tau);\n    float harmonics = 1.0 + (maxIters - 1.0) * pow(iterOscillate, iterOscillateExponent);\n    \n    float totalAmp = 0.0;\n    float result = 0.0;\n    float harmonic = 1.0;\n    while (harmonic <= floor(harmonics))\n    {\n        result += getHarmonic(harmonic, totalAmp, 1.0, samp, channel);\n        harmonic += 1.0;\n    }\n    \n    // Mix in the partial last iteration\n    result += getHarmonic(harmonic, totalAmp, fract(harmonics), samp, channel);\n    \n    result /= totalAmp;  \n    return result;\n}\n\nvec2 mainSound( int isamp, float time )\n{\n    float samp = float(isamp);\n    float animCycle = animCycleFreq * time;\n    \n    vec2 movementSound = vec2(\n        getMovementSound(animCycle, samp, time, 0.0),\n        getMovementSound(animCycle, samp, time, 1.0));\n\n    // All a flanger does is mix a signal with a slightly delayed copy of\n    // itself. What results is frequencies near integer multiples of the delay\n    // frequency constructively interfere, and frequencies halfway between\n    // integer multiples of the delay frequency destructively interfere. The\n    // result is a comb filter with peaks at harmonics of the delay frequency,\n    // which is why a flanger sounds like a tone.\n    \n    float flangerMix = 0.5 - 0.5 * cos(brightnessFreq * time * tau);\n    flangerMix = pow(flangerMix, 0.7); // Bias toward more flange\n    \n    float flanger = 0.5 + 0.5 * cos(1.1111 * time);\n    float delayTime = 0.0003 + 0.003 * flanger;\n    float delaySamples = delayTime * iSampleRate;\n    \n    // The comb filtering from the flanger brings the average amplitude\n    // down to 2 / pi. This compensation accounts keeps the volume sounding\n    // pretty consistent for flanger vs no flanger.\n    const float combAverage = 2.2 / pi;\n    float ampCompensate = mix(combAverage, 1.0, flangerMix);\n    \n    vec2 iterSound = ampCompensate * mix(\n        vec2(\n            getIterSound(animCycle, samp, time, 0.0),\n            getIterSound(animCycle, samp, time, 1.0)),\n        vec2(\n            getIterSound(animCycle, samp - delaySamples, time, 0.0),\n            getIterSound(animCycle, samp - delaySamples, time, 1.0)),\n        0.5 * flangerMix);\n       \n    vec2 result = mix(movementSound, iterSound, 0.6);\n    \n    // Any time you're creating stereo width, always test in mono!\n    // At the last minute I caught some terrible phase cancellation in the\n    // additive synth.\n    // result = vec2(0.5 * (result.x + result.y));\n\n    // Leave a little headroom, fade in and out\n    return 0.8 * result * smoothstep(0.0, 1.0, time) * smoothstep(180.0, 170.0, time);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// Randomized scalar at initialization, smooth mouse movement\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash14(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    ivec2 ifrag = ivec2(fragCoord);\n    if (ifrag == RANDTEXEL)\n    {\n        if (iFrame == 0)\n        {\n            fragColor.x = hash14(iDate);\n        }\n        else\n        {\n            fragColor.x = texelFetch(iChannel0, RANDTEXEL, 0).x;\n        }\n    }\n    else if (ifrag == MOUSETEXEL)\n    {\n        // Geometric series from current value towards goal\n        vec2 goal = vec2(0.0);\n        if (iMouse.z > 0.0)\n        {\n            goal = 0.2 * (2.0 * iMouse.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n        }\n        vec2 prev = texelFetch(iChannel0, MOUSETEXEL, 0).xy;\n        vec2 data = mix(prev, goal, 0.15);\n        fragColor.xy = data;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}