{
    "Shader": {
        "info": {
            "date": "1700145223",
            "description": "colorful blur",
            "flags": 32,
            "hasliked": 0,
            "id": "DtKyzh",
            "likes": 8,
            "name": "colorful blur",
            "published": 3,
            "tags": [
                "blur"
            ],
            "usePreview": 0,
            "username": "zyc",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define blurIntensity 8.0\n#define numIntensity 0.8\n#define colorIntensity 0.8\n#define lightIns 0.05*5.0\n#define horzR 0.2\n#define vertR 0.2\n\nfloat getProgress(float t)\n{\n    return fract(0.3*t);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvec4 neighborColor(int i, vec2 uv, float timeIntensity){\n    // float horzR = 20.;\n    vec2 screenParams = iResolution.xy * 0.5;\n\tfloat blurSize=horzR * timeIntensity * numIntensity;\n\tvec2 unit= blurSize / screenParams.xy;\n\tvec2 uv1 = uv + unit * vec2(i, 0.);\n\tvec2 uv2 = uv - unit * vec2(i, 0.);\n\tvec4 result = texture(iChannel0, uv1)\n\t\t\t\t+ texture(iChannel0, uv2);\n\tif (i < 2) {\n\t\tresult *= .19;\n\t}\n\telse if (i < 3) {\n\t\tresult *= .17;\n\t}\n\telse if (i < 4) {\n\t\tresult *= .15;\n\t}\n\telse if (i < 5) {\n\t\tresult *= .13;\n\t}\n\telse if (i < 6) {\n\t\tresult *= .11;\n\t}\n\telse if (i < 7) {\n\t\tresult *= .08;\n\t}\n\telse if (i < 8) {\n\t\tresult *= .05;\n\t}\n\telse if (i < 9) {\n\t\tresult *= .02;\n\t}\n\treturn result;\n}\n\nfloat neighborWeight(int i) {\n\tfloat result = 0.;\n\tif (i < 2) {\n\t\tresult = .19 * 2.;\n\t}\n\telse if (i < 3) {\n\t\tresult = .17 * 2.;\n\t}\n\telse if (i < 4) {\n\t\tresult = .15 * 2.;\n\t}\n\telse if (i < 5) {\n\t\tresult = .13 * 2.;\n\t}\n\telse if (i < 6) {\n\t\tresult = .11 * 2.;\n\t}\n\telse if (i < 7) {\n\t\tresult = .08 * 2.;\n\t}\n\telse if (i < 8) {\n\t\tresult = .05 * 2.;\n\t}\n\telse if (i < 9) {\n\t\tresult = .02 * 2.;\n\t}\n\treturn result * 10.;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float timeIntensity = 1.0 - getProgress(iTime);\n    \n    float half_gaussian_weight[9];\n\thalf_gaussian_weight[0]=.2;//0.137401;\n\thalf_gaussian_weight[1]=.19;//0.125794;\n\thalf_gaussian_weight[2]=.17;//0.106483;\n\thalf_gaussian_weight[3]=.15;//0.080657;\n\thalf_gaussian_weight[4]=.13;//0.054670;\n\thalf_gaussian_weight[5]=.11;//0.033159;\n\thalf_gaussian_weight[6]=.08;//0.017997;\n\thalf_gaussian_weight[7]=.05;//0.008741;\n\thalf_gaussian_weight[8]=.02;//0.003799;\n\tvec4 curColor=texture(iChannel0,uv);\n\tvec4 resultColor=vec4(0.);\n    \n    vec4 centerPixel=curColor*half_gaussian_weight[0];\n\tresultColor += centerPixel;\n\tfloat weight=half_gaussian_weight[0] * mix(10., 1., timeIntensity * numIntensity);\n\tfloat i = 1.;\n\tfloat blurSize=horzR;\n\tfor(int i=1;i<=8;i++){\n\n\t\tresultColor += neighborColor(i, uv, timeIntensity);\n\t\tweight += neighborWeight(i);\n\t}\n    resultColor /= weight / 10.; \n    \n    fragColor = resultColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvec4 neighborColor(int i, vec2 uv, float timeIntensity){\n    // float vertR = 20.;\n\tfloat blurSize=vertR * timeIntensity * numIntensity;\n    vec2 screenParams = iResolution.xy * 0.5;\n\tvec2 unit= blurSize / screenParams.xy;\n\tvec2 uv1 = uv + unit * vec2(0., i);\n\tvec2 uv2 = uv - unit * vec2(0., i);\n\tvec4 result = texture(iChannel0, uv1)\n\t\t\t\t+ texture(iChannel0, uv2);\n\tif (i < 2) {\n\t\tresult *= .19;\n\t}\n\telse if (i < 3) {\n\t\tresult *= .17;\n\t}\n\telse if (i < 4) {\n\t\tresult *= .15;\n\t}\n\telse if (i < 5) {\n\t\tresult *= .13;\n\t}\n\telse if (i < 6) {\n\t\tresult *= .11;\n\t}\n\telse if (i < 7) {\n\t\tresult *= .08;\n\t}\n\telse if (i < 8) {\n\t\tresult *= .05;\n\t}\n\telse if (i < 9) {\n\t\tresult *= .02;\n\t}\n\treturn result;\n}\n\nfloat neighborWeight(int i) {\n\tfloat result = 0.;\n\tif (i < 2) {\n\t\tresult = .19 * 2.;\n\t}\n\telse if (i < 3) {\n\t\tresult = .17 * 2.;\n\t}\n\telse if (i < 4) {\n\t\tresult = .15 * 2.;\n\t}\n\telse if (i < 5) {\n\t\tresult = .13 * 2.;\n\t}\n\telse if (i < 6) {\n\t\tresult = .11 * 2.;\n\t}\n\telse if (i < 7) {\n\t\tresult = .08 * 2.;\n\t}\n\telse if (i < 8) {\n\t\tresult = .05 * 2.;\n\t}\n\telse if (i < 9) {\n\t\tresult = .02 * 2.;\n\t}\n\treturn result * 10.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        \n    vec2 uv = fragCoord / iResolution.xy;\n    float timeIntensity = 1.0 - getProgress(iTime);\n    \n    float half_gaussian_weight[9];\n\thalf_gaussian_weight[0]=.2;//0.137401;\n\thalf_gaussian_weight[1]=.19;//0.125794;\n\thalf_gaussian_weight[2]=.17;//0.106483;\n\thalf_gaussian_weight[3]=.15;//0.080657;\n\thalf_gaussian_weight[4]=.13;//0.054670;\n\thalf_gaussian_weight[5]=.11;//0.033159;\n\thalf_gaussian_weight[6]=.08;//0.017997;\n\thalf_gaussian_weight[7]=.05;//0.008741;\n\thalf_gaussian_weight[8]=.02;//0.003799;\n\tvec4 curColor=texture(iChannel0,uv);\n\tvec4 resultColor=vec4(0.);\n    \n    \n    vec4 centerPixel=curColor*half_gaussian_weight[0];\n\tresultColor += centerPixel;\n\tfloat weight=half_gaussian_weight[0] * mix(10., 1., timeIntensity * numIntensity);\n\tfloat i = 1.;\n\tfloat blurSize=vertR;\n\tfor(int i=1;i<=8;i++){\n\n\t\tresultColor += neighborColor(i, uv, timeIntensity);\n\t\tweight += neighborWeight(i);\n\t}\n\tresultColor /= weight / 10.; \n    \n    fragColor = resultColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926\n\n\nvec2 rot(float angle, vec2 uv)\n{\n    float theta = angle * PI / 180.;\n    mat2 r = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n    return uv * r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float timeIntensity = max(0.0, 1.0 - getProgress(iTime));\n    \n    \n    float amount = 40.0;\n    amount += 0.9987*500.0;\n    vec4 curColor = texture(iChannel0, uv);\n\tvec2 screenSize = iResolution.xy;\n\tfloat rescale = max(screenSize.x, screenSize.y) / 1280.;\n\tscreenSize /= rescale;\n\tvec2 unit = 1. / screenSize * .5;\n    vec4 resultColor=curColor; \n\tvec3 maxColor = vec3(0.);//curColor.rgb;\n\tvec3 sumWeight = vec3(0.);//pow(curColor.rgb, vec3(9.));\n\tvec3 sumColor = resultColor.rgb * sumWeight;\n    for (float i = -9.; i <= 9.; i += .75) {\n\t\tfor (float j = -9.; j <= 9.; j += .75) {\n\t\t\tvec2 tempVec = vec2(i, j);\n            \n            if (dot(tempVec, tempVec) >= 50.) continue;\n            vec3 factor = vec3(1.);\n            vec2 newUv = vec2(i + 9., j + 9.) / 18.;\n            float alpha = 1.;\n            vec2 tempUv = uv + blurIntensity * timeIntensity * vec2(i, j) * unit;\n            vec2 tempUv1 = uv + blurIntensity * timeIntensity * vec2(i, j) * unit * 1.7;\n            vec4 blingColor = texture(iChannel1, tempUv1);\n            factor = mix(vec3(1.), blingColor.rgb, pow(blurIntensity / 10., 1.) * colorIntensity * (1. - pow(1. - timeIntensity, 3.)));\n\t\t\tvec3 tempColor = texture(iChannel0, tempUv).rgb;\n\t\t\tmaxColor = max(maxColor, tempColor * factor);\n\t\t\tsumColor += tempColor * (pow(tempColor * factor, vec3(9.)) * amount + .4);\n\t\t\tsumWeight+= pow(tempColor * factor, vec3(9.)) * amount + .4;\n       }\n    }\n    \n    \n    for (float i = 0.; i <= 360.; i += 1.) {\n        vec2 tempVec = rot(i, vec2(7., 0.));\n        vec3 factor = vec3(1.);\n        float alpha = 1.;\n        vec2 tempUv = uv + blurIntensity * timeIntensity * tempVec * unit;\n        vec2 tempUv1 = uv + blurIntensity * timeIntensity * tempVec * unit * 1.7;\n        vec4 blingColor = texture(iChannel1, tempUv1);\n        factor = mix(vec3(1.), blingColor.rgb, pow(blurIntensity / 10., 1.) * colorIntensity * (1. - pow(1. - timeIntensity, 3.)));\n        vec3 tempColor = texture(iChannel0, tempUv).rgb;\n        maxColor = max(maxColor, tempColor * factor);\n        sumColor += tempColor * (pow(tempColor * factor, vec3(9.)) * amount + .4);\n\t\tsumWeight+= pow(tempColor * factor, vec3(9.)) * amount + .4;\n    }\n    \n    \n    resultColor.rgb = clamp(sumColor / sumWeight, 0., 1.);\n\tresultColor.rgb = mix(resultColor.rgb, maxColor, clamp(resultColor.rgb * lightIns, 0., 1.));\n    fragColor = resultColor;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}