{
    "Shader": {
        "info": {
            "date": "1669624064",
            "description": "Drawing fairly lightly processed SVG data, using 16-bit fixed point data packed into a single array. Each path includes a bounding box to help speed things up. Inspiration & image idea from @alro: [url]https://www.shadertoy.com/view/DdsXRl[/url]",
            "flags": 48,
            "hasliked": 0,
            "id": "mdfXDj",
            "likes": 28,
            "name": "SVG Interpreter",
            "published": 3,
            "tags": [
                "svg",
                "interpreter"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// SVG Interpreter, mla, 2022\n//\n// Drawing fairly lightly processed SVG data, using 16-bit fixed \n// point data packed into a single array. Each path includes a \n// bounding box to help speed things up.\n//\n// Only L, C and M command are handled - relative commands are made\n// absolute and H,V and z commands replaced by L. Dimensions are\n// centered and rescaled to [0,1].\n//\n// Compile time on Windows/Nvidia GTX 1650 is a reasonable 1.4 seconds,\n// much less on Linux/Intel/Mesa and Linux/Nvidia. 60fps at HD\n// resolution for Nvidia, 40 fps at 512x288 for Intel.\n//\n// Data array generated by a little C++ program you can see in Buffer B\n// (this is for information only and is entirely unsupported).\n//\n// <mouse>: pan and zoom\n// 'r': autorotation\n// 'x': recalculate buffer data each frame (only useful with USETEXTURE)\n//\n// See also:\n//\n// https://www.shadertoy.com/view/DdsXRl by @alro\n// https://www.shadertoy.com/view/Wtt3Wl by @NinjaKoala\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Uncomment this to read data from Buffer A rather than directly from memory.\n#define USETEXTURE\n\nuvec4 fetchdata(int i) {\n#if !defined USETEXTURE\n  return data[i];\n#else\n  return floatBitsToUint(texelFetch(iChannel0,ivec2(i%64,i/64),0));\n#endif\n}\n\n// 16-bit data packed in pairs into a uvec4\nuint getdata0(int i) {\n  uvec4 v = fetchdata(i>>3);\n  i &= 7;\n  uint t = v[i>>1];\n  if ((i&1) == 0) t >>= 16;\n  return t & 0xffffu;\n}\n\nuint getdata(int i) {\n  // This version might be faster on some platforms\n  uvec4 v = fetchdata(i/8);\n  i %= 8;\n  uint t = v[i/2];\n  if (i%2 == 0) t >>= 16;\n  return t & 0xffffu;\n}\n\nvec2 getpos(int i) {\n  float x = float(getdata(i))/65535.0;\n  float y = float(getdata(i+1))/65535.0;\n  return vec2(x,y);\n}\n\nvoid polywind(vec2 p, vec2 q, vec2 r);\nfloat segment(vec2 p, vec2 a, vec2 b);\nfloat bezier(vec2 p, mat4x2 m);\n\nfloat draw(vec2 pos) {\n  float eps = fwidth(length(pos)); // Bounding box border\n  int i = 0;\n  float d = 1e8;\n  vec2 p;\n  while (true) {\n    int instr = int(getdata(i++)); // Increment i for command\n    // Instruction format is:\n    // <drawtype:3> <nargs:2> <count:11>\n    if (instr == 0) break;\n    int drawtype = instr>>13;\n    int nargs = (instr>>11)&3;\n    int count = instr&((1<<11)-1);\n    vec2 p0, p1, p2;\n    if (nargs > 0) p0 = getpos(i);\n    if (nargs > 1) p1 = getpos(i+2);\n    if (nargs > 2) p2 = getpos(i+4);\n    i += 2*nargs; // Increment i for arguments\n    if (drawtype == 1) {\n      // Cubic Bezier, drawn as line segments\n      vec2 minbox = min(min(p,p0),min(p1,p2))-eps;\n      vec2 maxbox = max(max(p,p0),max(p1,p2))+eps;\n      if (any(lessThan(pos,minbox)) || any(greaterThan(pos,maxbox))) {\n        polywind(pos,p,p2);\n      } else if (dot(p-p2,p-p2) < 10.0*eps*eps) {\n        d = min(d,segment(pos,p,p2));\n      } else {\n        d = min(d,bezier(pos,mat4x2(p,p0,p1,p2)));\n      }\n      p = p2;\n    } else if (drawtype == 2) {\n      // A plain old line segment\n      vec2 minbox = min(p,p0)-eps;\n      vec2 maxbox = max(p,p0)+eps;\n      if (any(lessThan(pos,minbox)) || any(greaterThan(pos,maxbox))) {\n        polywind(pos,p,p0);\n      } else {\n        d = min(d,segment(pos,p,p0));\n      }\n      p = p0;\n    } else if (drawtype == 3) {\n      // Move\n      p = p0;\n    } else if (drawtype == 4) {\n      // Start of path, skip if out of bounding box\n      p = vec2(0);\n      vec2 minbox = p0-eps, maxbox = p1+eps;\n      // If outside path bounding box, skip entire path.\n      if (any(lessThan(pos,minbox)) || any(greaterThan(pos,maxbox))) i += count;\n    }\n  }\n  return d;\n}\n\n\nint wind = 0; // Compute winding number here\nvoid polywind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.y <= 0.0) {\n    if (r.y > 0.0 && t > 0.0) wind++;\n  } else {\n    if (r.y <= 0.0 && t < 0.0) wind--;\n  }\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  polywind(p,a,b);\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nconst int nbeziercoeffs = 16;\nvec4 beziercoeff(int i) {\n  // Matrix formulation due to Shane.\n  const int N = nbeziercoeffs;\n  float t = float(i)/float(N);\n  float u = 1.0-t, t2 = t*t, u2 = u*u;\n  return vec4(u*u2,3.0*t*u2,3.0*u*t2,t*t2);\n}\n\n// Distance to Cubic Bezier.\n// Split the path into N subsegments.\nfloat bezier(vec2 p, mat4x2 m) {\n  // Since we spend most of the time deciding not to draw\n  // curves, the value of N doesn't seem to be time critical.\n  const int N = nbeziercoeffs;\n  vec2 q = m[0];\n  float d = 1e8;\n  for (int i = 1; i <= N; i++) {\n    vec2 r = m*beziercoeff(i);\n    d = min(d,segment(p,q,r));\n    q = r;\n  }\n  return d;\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\nvoid mainImage( out vec4 fragcolor, in vec2 fragcoord ) {\n  vec3 col = vec3(0.5);\n  float theta = 0.0;\n  if (!key(CHAR_R)) theta = 0.5*iTime;\n  float scale = 1.0/cos(theta);\n  // SVG is resized to have largest dimension 1 and centred about\n  // 0.5 in the other dimension. Here x is largest, so scale by that.\n  vec2 uv = (fragcoord-0.5*iResolution.xy)/iResolution.x;\n  if (iMouse.z > 0.0) {\n    uv -= 4.0*(iMouse.xy - 0.5*iResolution.xy)/iResolution.x;\n    scale /= 4.0;\n  }\n  float px = abs(scale/iResolution.x);\n  uv *= scale;\n  uv.y = -uv.y; // Keep SVG y direction\n  uv = rotate(uv,theta);\n  if (all(lessThanEqual(abs(uv),0.5*datadims+2.0*px))) { \n    float d = draw(uv+0.5); //// SVG is in [0,1] box\n    if ((wind&1) != 0) col = vec3(1,0,0);\n    col *= smoothstep(0.0,px,d);\n  };\n  if (alert) col.b = 1.0;\n  fragcolor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\n// const int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\n/////////////////////////////////////////////////////////////////////\n\nconst vec2 datadims = vec2(1,0.279799);\nconst uvec4 data[] = uvec4[](\n  uvec4(0x91220000u,0x66242941u,0x95096800u,0x2938858cu),\n  uvec4(0x38002941u,0x890b27cbu,0x8c662539u,0x8eca3800u),\n  uvec4(0x230b90e5u,0x20279289u,0x1c8393a5u,0x380019c4u),\n  uvec4(0x948916e9u,0x9509140eu,0x95093800u,0x11a19509u),\n  uvec4(0x0f3494dbu,0x0ccf9480u,0x38000a22u,0x94240763u),\n  uvec4(0x93c90491u,0x936e3800u,0x043f936eu,0x03ec9377u),\n  uvec4(0x039a9380u,0x38000348u,0x938902ffu,0x93ae02b6u),\n  uvec4(0x93e53800u,0x0264941bu,0x0208945bu,0x01bf9492u),\n  uvec4(0x48000000u,0x823a4800u,0x019b820cu,0x380001d1u),\n  uvec4(0x834c022du,0x848302b6u,0x85b03800u,0x03638767u),\n  uvec4(0x045a8902u,0x059a8a66u,0x380008b5u,0x8d9d0cf4u),\n  uvec4(0x8f781173u,0x8f933800u,0x137c8fa5u,0x15728f1cu),\n  uvec4(0x17328e1cu,0x380018bbu,0x8d3819cdu,0x8bb81a1fu),\n  uvec4(0x8a023800u,0x1a3289a6u,0x1a3b8942u,0x1a3b88e7u),\n  uvec4(0x38001a44u,0x87de19e8u,0x86de1944u,0x860c3800u),\n  uvec4(0x18a08530u,0x17bb8495u,0x16b28443u,0x48000b07u),\n  uvec4(0x80713800u,0x08357f84u,0x06087e28u,0x04767c57u),\n  uvec4(0x380002bfu,0x7a5701d1u,0x77c501e4u,0x752a3800u),\n  uvec4(0x01e4714fu,0x03636dfeu,0x06636b50u,0x38000910u),\n  uvec4(0x68ec0c99u,0x675110fcu,0x666d3800u,0x12186636u),\n  uvec4(0x133c6624u,0x14576624u,0x3800160eu,0x662d17cdu),\n  uvec4(0x665b197bu,0x66b63800u,0x1b5f671au,0x1d4c677fu),\n  uvec4(0x1f5567dau,0x38001f83u,0x67da1fa7u,0x67da1fd5u),\n  uvec4(0x67d13800u,0x208c67a3u,0x2139675au,0x21de6708u),\n  uvec4(0x38002267u,0x66b622cbu,0x6676231eu,0x66514800u),\n  uvec4(0x249d74bcu,0x48002302u,0x753c3800u,0x22cb7486u),\n  uvec4(0x228273d8u,0x221e7334u,0x380020f0u,0x70fd1fb1u),\n  uvec4(0x6f6b1e43u,0x6e743800u,0x1d0c6dabu,0x1bc46d07u),\n  uvec4(0x1a686c99u,0x3800190du,0x6c2317a9u,0x6bec1645u),\n  uvec4(0x6be33800u,0x153c6be3u,0x14336c10u,0x13456c6cu),\n  uvec4(0x38001273u,0x6cbe11cfu,0x6d591161u,0x6e223800u),\n  uvec4(0x112a6e87u,0x10f36ef4u,0x10c66f62u,0x3800108fu),\n  uvec4(0x6ffd107cu,0x7099107cu,0x713d3800u,0x107c7234u),\n  uvec4(0x10e1732au,0x118f73d8u,0x38001273u,0x74c613ceu),\n  uvec4(0x758f15a9u,0x76214800u,0x204c798eu,0x3800231eu),\n  uvec4(0x7a7b254bu,0x7bf226ddu,0x7e043800u,0x2866800du),\n  uvec4(0x29388283u,0x2938858cu,0x48002938u,0x858c90b3u),\n  uvec4(0x25ef6636u,0x3ebd8143u,0x68003ebdu,0x6f624800u),\n  uvec4(0x3df46f99u,0x38003dabu,0x6e873d22u,0x6d903c6bu),\n  uvec4(0x6cb53800u,0x3bb56bc7u,0x3ac76b11u,0x39be6a91u),\n  uvec4(0x380038b5u,0x6a1a3791u,0x69da366cu,0x69e34800u),\n  uvec4(0x36767bc4u,0x48003676u,0x7c4d3800u,0x36767ce0u),\n  uvec4(0x367f7d69u,0x369a7dfbu,0x380036b6u,0x7e7236e3u),\n  uvec4(0x7ee8372cu,0x7f4d3800u,0x376c7fa8u,0x37c87ff1u),\n  uvec4(0x382c8016u,0x380038a3u,0x803a391au,0x804d3990u),\n  uvec4(0x80444800u,0x39908143u,0x48002b2eu,0x81434800u),\n  uvec4(0x2b2e8044u,0x38002b4au,0x803a2b6eu,0x803a2b8au),\n  uvec4(0x803a3800u,0x2c418031u,0x2cf77fe8u,0x2d777f5fu),\n  uvec4(0x38002dc9u,0x7f162e00u,0x7ebb2e1cu,0x7e4d3800u),\n  uvec4(0x2e2e7dc4u,0x2e377d32u,0x2e377ca0u,0x48002e37u),\n  uvec4(0x69e33800u,0x2d4a69dau,0x2c5c69feu,0x2b816a51u),\n  uvec4(0x38002a9cu,0x6aac29cau,0x6b2c290au,0x6bc73800u),\n  uvec4(0x288a6c3eu,0x28146cc7u,0x27b86d62u,0x38002741u),\n  uvec4(0x6e1026efu,0x6ec726b8u,0x6f874800u,0x25ef6f59u),\n  uvec4(0x480027ddu,0x66363800u,0x281d666du,0x286f66a4u),\n  uvec4(0x28c166c8u,0x380028efu,0x66da2926u,0x66e42953u),\n  uvec4(0x66e43800u,0x297866edu,0x299c66edu,0x29c166edu),\n  uvec4(0x48003afeu,0x66ed3800u,0x3b4766e4u,0x3b9966dau),\n  uvec4(0x3be266bfu,0x38003c47u,0x66a43ca2u,0x667f3cf4u),\n  uvec4(0x663f4800u,0x3ebd6f62u,0x48003ebdu,0x6f629131u),\n  uvec4(0x402266d1u,0x5d2e813au,0x68005d13u,0x813a4800u),\n  uvec4(0x4fd6813au,0x48004fd6u,0x80443800u,0x504c803au),\n  uvec4(0x50ba8016u,0x511e7fd6u,0x38005155u,0x7fa8517au),\n  uvec4(0x7f685171u,0x7f1f3800u,0x515e7e68u,0x51317dbbu),\n  uvec4(0x50de7d20u,0x3800509fu,0x7c8d4fe8u,0x7b324eb1u),\n  uvec4(0x79053800u,0x4e4d784eu,0x4dd677a1u,0x4d5676fcu),\n  uvec4(0x38004ccdu,0x76454c44u,0x75854bbbu,0x74cf4800u),\n  uvec4(0x4a577573u,0x48004a57u,0x7ce03800u,0x4a577d56u),\n  uvec4(0x4a607dcdu,0x4a7b7e44u,0x38004a8du,0x7e9f4ab2u),\n  uvec4(0x7ef14ae9u,0x7f313800u,0x4b207f7bu,0x4b697fbau),\n  uvec4(0x4bbb7fe8u,0x38004c04u,0x80044c56u,0x80164ca8u),\n  uvec4(0x801f4800u,0x4ca8811fu,0x48004022u,0x811f4800u),\n  uvec4(0x4022801fu,0x38004061u,0x801f40a1u,0x801640d8u),\n  uvec4(0x7ffa3800u,0x410f7fdfu,0x414f7fbau,0x417d7f8du),\n  uvec4(0x380041cfu,0x7f4d420fu,0x7efb422au,0x7e8d3800u),\n  uvec4(0x42467e16u,0x42587d96u,0x42587d20u,0x4800426au),\n  uvec4(0x6bec3800u,0x426a6b7eu,0x426a6b11u,0x42616aa3u),\n  uvec4(0x38004261u,0x69f5423du,0x695141fdu,0x68b63800u),\n  uvec4(0x41d8686cu,0x4198682cu,0x414f67ffu,0x38004106u),\n  uvec4(0x67da40b4u,0x67c84061u,0x67d14800u,0x406166d1u),\n  uvec4(0x480052d5u,0x66d13800u,0x54e766d1u,0x56706724u),\n  uvec4(0x578267c8u,0x3800588bu,0x68515938u,0x695a595du),\n  uvec4(0x6a7e3800u,0x59666ad1u,0x596f6b11u,0x596f6b2cu),\n  uvec4(0x38005966u,0x6c8758ddu,0x6dd957efu,0x6ed03800u),\n  uvec4(0x571d6fb4u,0x56277074u,0x551e7106u,0x38005439u),\n  uvec4(0x718f53b9u,0x71c65395u,0x71c63800u,0x548272f4u),\n  uvec4(0x55557406u,0x5602750fu,0x48005826u,0x78733800u),\n  uvec4(0x58e679e9u,0x59947b72u,0x5a2f7cfbu,0x38005addu),\n  uvec4(0x7eb25b78u,0x7fa85befu,0x7fd63800u,0x5c537ffau),\n  uvec4(0x5cc18016u,0x5d2e8028u,0x48005d13u,0x813a4800u),\n  uvec4(0x5d13813au,0x48005d13u,0x813a6800u,0x50de6c99u),\n  uvec4(0x380050deu,0x6bbe5071u,0x6aec4fbau,0x6a753800u),\n  uvec4(0x4efa69f5u,0x4e1f69beu,0x4d3b69c8u,0x38004c96u),\n  uvec4(0x69c84be9u,0x69e34b4du,0x6a233800u,0x4afb6a3eu),\n  uvec4(0x4abb6a7eu,0x4aa06ad1u,0x38004a7bu,0x6b2c4a69u),\n  uvec4(0x6b904a69u,0x6bf54800u,0x4a69728fu,0x48004b56u),\n  uvec4(0x72463800u,0x4c9f71d8u,0x4dd6712bu,0x4edf7046u),\n  uvec4(0x3800503au,0x6f2250deu,0x6de250deu,0x6c994800u),\n  uvec4(0x50de6c99u,0x480050deu,0x6c999119u,0x5e7766f6u),\n  uvec4(0x7c848156u,0x68007c84u,0x813a4800u,0x6eeb813au),\n  uvec4(0x48006eebu,0x803a3800u,0x6f478028u,0x6f99800du),\n  uvec4(0x6feb7fe8u,0x380070a2u,0x7f7b7106u,0x7ea870f4u),\n  uvec4(0x7dd63800u,0x70f47d96u,0x70eb7d5fu,0x70e27d20u),\n  uvec4(0x380070bdu,0x7c4d703du,0x7b606f59u,0x7a603800u),\n  uvec4(0x6e747957u,0x6d50787cu,0x6c1077eau,0x38006b63u),\n  uvec4(0x77aa6aacu,0x777c69f5u,0x77573800u,0x69357733u),\n  uvec4(0x686c7717u,0x67ad7717u,0x480065d1u,0x7c693800u),\n  uvec4(0x65927d0du,0x65767dc4u,0x65767e7bu,0x3800656du),\n  uvec4(0x7ebb657fu,0x7efb659bu,0x7f3b3800u,0x65c87f84u),\n  uvec4(0x66087fc4u,0x66517fe8u,0x3800669au,0x801666e4u),\n  uvec4(0x80286736u,0x80314800u,0x67368131u,0x48005e77u),\n  uvec4(0x81314800u,0x5e778031u,0x38005ec0u,0x801f5f00u),\n  uvec4(0x80045f40u,0x7fdf3800u,0x5f897fb1u,0x5fc97f7bu),\n  uvec4(0x60097f44u,0x3800606eu,0x7efb60c0u,0x7e9f6109u),\n  uvec4(0x7e3b3800u,0x61527dcdu,0x61897d5fu,0x61ae7ce0u),\n  uvec4(0x480068f5u,0x6a353800u,0x691169feu,0x692369d1u),\n  uvec4(0x692c699au,0x3800693fu,0x696c6948u,0x69356948u),\n  uvec4(0x69083800u,0x694868d1u,0x6935689au,0x691a686cu),\n  uvec4(0x38006908u,0x684868ecu,0x682c68c8u,0x681a3800u),\n  uvec4(0x68ac6808u,0x689167ffu,0x686c67f6u,0x4800686cu),\n  uvec4(0x66f64800u,0x740f66f6u,0x4800740fu,0x681a3800u),\n  uvec4(0x73b46811u,0x7358683fu,0x732a6891u,0x38007318u),\n  uvec4(0x68b6730fu,0x68da730fu,0x68ff3800u,0x730f6923u),\n  uvec4(0x73186951u,0x73216975u,0x38007334u,0x69a37346u),\n  uvec4(0x69d1734fu,0x69fe4800u,0x7a207e7bu,0x38007a45u),\n  uvec4(0x7ea87a57u,0x7edf7a69u,0x7efb3800u,0x7a977f44u),\n  uvec4(0x7ace7f8du,0x7b0e7fc4u,0x38007b3bu,0x7fe87b69u),\n  uvec4(0x80047ba0u,0x80163800u,0x7bd78028u,0x7c17803au),\n  uvec4(0x7c4d8044u,0x48007c4du,0x81564800u,0x7c84813au),\n  uvec4(0x48007c84u,0x813a6800u,0x6e8775a1u,0x48006b9au),\n  uvec4(0x6c594800u,0x691a73bdu,0x3800695au,0x73bd69a3u),\n  uvec4(0x73bd69e3u,0x73c63800u,0x6a5a73cfu,0x6ad173eau),\n  uvec4(0x6b3e740fu,0x38006becu,0x74466c99u,0x74866d3eu),\n  uvec4(0x74e13800u,0x6dab7518u,0x6e197558u,0x6e8775a1u),\n  uvec4(0x48006e87u,0x75a1911bu,0x7de966ffu,0x97a4813au),\n  uvec4(0x680097a4u,0x67f64800u,0x97096811u,0x380096adu),\n  uvec4(0x682c9664u,0x68639624u,0x68ac3800u,0x95d2691au),\n  uvec4(0x959b699au,0x95926a23u,0x38009580u,0x6aac9577u),\n  uvec4(0x6b35956du,0x6bbe4800u,0x956d7d3bu,0x3800956du),\n  uvec4(0x7d849577u,0x7dd69580u,0x7e323800u,0x95897e8du),\n  uvec4(0x95a47edfu,0x95d27f31u,0x38009600u,0x7f7b9640u),\n  uvec4(0x7fba9689u,0x7fd63800u,0x96db8004u,0x972d801fu),\n  uvec4(0x9788801fu,0x48009788u,0x811f4800u,0x8f93811fu),\n  uvec4(0x48008f93u,0x801f3800u,0x8fd3801fu,0x900a8016u),\n  uvec4(0x90418004u,0x3800911cu,0x7fba918au,0x7f0d918au),\n  uvec4(0x7ddf3800u,0x918a7d20u,0x915c7c57u,0x90f77bb2u),\n  uvec4(0x38009093u,0x7b04901cu,0x7a608f93u,0x79c54800u),\n  uvec4(0x838c6bacu,0x48008383u,0x7d443800u,0x83837d9fu),\n  uvec4(0x838c7e04u,0x839e7e5fu,0x380083b1u,0x7eb283ccu),\n  uvec4(0x7efb83f1u,0x7f443800u,0x84157f8du,0x844c7fc4u),\n  uvec4(0x848c7fe8u,0x380084deu,0x80168530u,0x8031858cu),\n  uvec4(0x803a4800u,0x858c813au,0x48007de9u,0x813a4800u),\n  uvec4(0x7de9803au,0x38007e1fu,0x803a7e5fu,0x80317e96u),\n  uvec4(0x801f3800u,0x7ec48016u,0x7ef17ffau,0x7f167fe8u),\n  uvec4(0x38007f71u,0x7fb17fb1u,0x7f3b7fdfu,0x7e843800u),\n  uvec4(0x800d7dbbu,0x801f7cf2u,0x80167c20u,0x48008016u),\n  uvec4(0x6b5a3800u,0x80166ad1u,0x800d6a48u,0x7ffa69beu),\n  uvec4(0x38007ff1u,0x695a7fd6u,0x68ff7f9fu,0x68b63800u),\n  uvec4(0x7f3b6848u,0x7ea86808u,0x7e1667ffu,0x48007e16u),\n  uvec4(0x66ff4800u,0x8d1d66ffu,0x48008d1du,0x67ff3800u),\n  uvec4(0x8cef67ffu,0x8cca6808u,0x8ca66823u,0x38008c81u),\n  uvec4(0x683f8c5du,0x68638c41u,0x68883800u,0x8c1d68acu),\n  uvec4(0x8c1468dau,0x8c146911u,0x38008c14u,0x695a8c26u),\n  uvec4(0x69a38c4au,0x69e33800u,0x8c666a11u,0x8c816a48u),\n  uvec4(0x8ca66a75u,0x480091eeu,0x710f4800u,0x91ee6ac7u),\n  uvec4(0x380091eeu,0x6a6c91e5u,0x6a1191dcu,0x69b53800u),\n  uvec4(0x91c0696cu,0x91a56923u,0x917768e3u,0x3800914au),\n  uvec4(0x689a9100u,0x686390b7u,0x68483800u,0x905c6823u),\n  uvec4(0x90016808u,0x8fa56808u,0x48008fa5u,0x67084800u),\n  uvec4(0x979b6708u,0x4800979bu,0x68084800u,0x97a467f6u),\n  uvec4(0x480097a4u,0x67f6910au,0x98da6624u,0xb755813au),\n  uvec4(0x6800b755u,0x72463800u,0xb69e7246u,0xb5f17298u),\n  uvec4(0xb57a732au,0x3800b531u,0x736ab503u,0x73c6b4f1u),\n  uvec4(0x742a3800u,0xb4de7498u,0xb4cc750fu,0xb4cc7585u),\n  uvec4(0x4800b4ccu,0x7e4d3800u,0xb4d57e9fu,0xb4f17ef1u),\n  uvec4(0xb51e7f3bu,0x3800b53au,0x7f84b571u,0x7fbab5bau),\n  uvec4(0x7fdf3800u,0xb603800du,0xb6558028u,0xb6b0803au),\n  uvec4(0x4800b6b0u,0x813a4800u,0xa98e813au,0x3800a66au),\n  uvec4(0x813aa3ebu,0x80e8a1fdu,0x80443800u,0x9fa27f7bu),\n  uvec4(0x9d907dfbu,0x9c117c04u,0x38009b08u,0x7ab29a36u),\n  uvec4(0x793c99b6u,0x77a13800u,0x992d760fu,0x98e47461u),\n  uvec4(0x98e472b4u,0x380098dau,0x70f49936u,0x6f3d99e3u),\n  uvec4(0x6da23800u,0x9a916c07u,0x9b9a6a9au,0x9cec697fu),\n  uvec4(0x38009e47u,0x685a9fd0u,0x6788a17du,0x67083800u),\n  uvec4(0xa359667fu,0xa53d6636u,0xa72a663fu,0x3800a833u),\n  uvec4(0x663fa945u,0x6651aa4eu,0x666d3800u,0xab736691u),\n  uvec4(0xac8e66bfu,0xada966ffu,0x3800ae3bu,0x671aaed6u),\n  uvec4(0x672daf72u,0x672d3800u,0xaffb6736u,0xb07b671au),\n  uvec4(0xb0f266dau,0x3800b13bu,0x66a4b184u,0x665bb1dfu),\n  uvec4(0x66244800u,0xb2f16f2bu,0x4800b24du,0x6f7d3800u),\n  uvec4(0xb2046ea2u,0xb1566dabu,0xb05f6c7eu,0x3800afc4u),\n  uvec4(0x6bb5aefbu,0x6b11ae20u,0x6aa33800u,0xac4569c8u),\n  uvec4(0xaa976951u,0xa9216951u,0x3800a6eau,0x6948a4d8u),\n  uvec4(0x6a63a3b4u,0x6c3e3800u,0xa2996de2u,0xa1f46ffdu),\n  uvec4(0xa1ab728fu,0x3800a1a2u,0x72b4a1a2u,0x72e1a1a2u),\n  uvec4(0x73064800u,0xa1a2738fu,0x3800a199u,0x7621a250u),\n  uvec4(0x78a0a3abu,0x7ac53800u,0xa53d7d4du,0xa74f7e96u),\n  uvec4(0xa9e17e96u,0x3800ab05u,0x7e96abe0u,0x7e3bac60u),\n  uvec4(0x7d843800u,0xace07ccdu,0xad177bf2u,0xad0e7b0eu),\n  uvec4(0x4800ad0eu,0x74e13800u,0xad177473u,0xad057406u),\n  uvec4(0xace973a1u,0x3800acd7u,0x7361acb2u,0x732aac7bu),\n  uvec4(0x72fd3800u,0xac207298u,0xaba0726bu,0xab207261u),\n  uvec4(0x4800aab3u,0x72614800u,0xaab3716bu,0x4800b74cu),\n  uvec4(0x716b4800u,0xb7557246u,0x4800b755u,0x72464800u),\n  uvec4(0xb7557246u,0x912ab88cu,0x666dd222u,0x81c36800u),\n  uvec4(0xd22277aau,0x4800cebeu,0x81c34800u,0xcdda8183u),\n  uvec4(0x3800cd88u,0x8168cd2cu,0x8156ccdau,0x81563800u),\n  uvec4(0xcc7f814cu,0xcc1a8143u,0xcbb68143u,0x4800b88cu),\n  uvec4(0x81434800u,0xb88c8044u,0x3800b8e7u,0x803ab939u),\n  uvec4(0x801fb98bu,0x80043800u,0xb9c27fe8u,0xb9f07fc4u),\n  uvec4(0xba147f8du,0x3800ba54u,0x7f44ba8bu,0x7ee8ba9du),\n  uvec4(0x7e8d3800u,0xbab97e1fu,0xbac27da9u,0xbac27d32u),\n  uvec4(0x4800bac2u,0x6a3e3800u,0xbac269e3u,0xbab96988u),\n  uvec4(0xbab06935u,0x3800ba9du,0x68ecba82u,0x68acba4bu),\n  uvec4(0x687f3800u,0xba1e6848u,0xb9e76823u,0xb9b06808u),\n  uvec4(0x3800b967u,0x67f6b91eu,0x67edb8cbu,0x67ed4800u),\n  uvec4(0xb8cb66edu,0x4800ca91u,0x66ed3800u,0xcb5166edu),\n  uvec4(0xcc1166dau,0xccc866bfu,0x3800cd35u,0x66adcd75u),\n  uvec4(0x66a4cd7fu,0x66a43800u,0xcdbf669au,0xcdfe667fu),\n  uvec4(0xce35666du,0x4800d023u,0x6f504800u,0xcf3e6ff4u),\n  uvec4(0x3800cedau,0x6e3ecdecu,0x6cb5cc9au,0x6b873800u),\n  uvec4(0xcbc86ad1u,0xcad16a48u,0xc9c869feu,0x3800c8bfu),\n  uvec4(0x69a3c7adu,0x6975c692u,0x69753800u,0xc5656975u),\n  uvec4(0xc48969a3u,0xc3f76a11u,0x3800c39cu,0x6a51c35cu),\n  uvec4(0x6aacc32eu,0x6b113800u,0xc3006b87u,0xc2ee6bfeu),\n  uvec4(0xc2f76c75u,0x4800c2f7u,0x6f594800u,0xc6a46f59u),\n  uvec4(0x3800c700u,0x6f59c752u,0x6f50c7a4u,0x6f343800u),\n  uvec4(0xc8006f19u,0xc8496eebu,0xc8926eabu,0x3800c924u),\n  uvec4(0x6e35c976u,0x6d7ec976u,0x6cbe4800u,0xc9766c59u),\n  uvec4(0x4800ca3fu,0x6c234800u,0xcc087621u,0x4800cb08u),\n  uvec4(0x764e3800u,0xcaed75d8u,0xcabf7561u,0xca7f74f3u),\n  uvec4(0x3800ca2du,0x7461c9c8u,0x73d8c952u,0x73613800u),\n  uvec4(0xc8db72fdu,0xc85b72abu,0xc7d27274u,0x3800c764u),\n  uvec4(0x723dc6e4u,0x7222c66eu,0x72184800u,0xc3137218u),\n  uvec4(0x4800c313u,0x7aa93800u,0xc3137b29u,0xc31c7ba9u),\n  uvec4(0xc3377c20u,0x3800c35cu,0x7c96c38au,0x7d04c3d3u),\n  uvec4(0x7d693800u,0xc42e7ddfu,0xc4a57e32u,0xc52e7e68u),\n  uvec4(0x3800c5d2u,0x7ea8c680u,0x7ec4c72du,0x7ebb3800u),\n  uvec4(0xc8097ebbu,0xc8e47e96u,0xc9bf7e5fu,0x3800ca91u),\n  uvec4(0x7e28cb64u,0x7dd6cc23u,0x7d5f3800u,0xcd517cb2u),\n  uvec4(0xce5a7bcdu,0xcf357ac5u,0x3800d02cu,0x79c5d0e3u),\n  uvec4(0x7885d150u,0x772a4800u,0xd22277aau,0x4800d222u),\n  uvec4(0x77aa9132u,0xd04766edu,0xffff925cu,0x6800ffffu),\n  uvec4(0x92494800u,0xea279249u,0x4800ea27u,0x90b73800u),\n  uvec4(0xeae790a5u,0xeb9e9065u,0xec4b900au,0x3800eca7u),\n  uvec4(0x8fdcecd4u,0x8f78ecd4u,0x8edc3800u,0xecd48e13u),\n  uvec4(0xec828d01u,0xebde8b94u,0x3800eb70u,0x8a9dea39u),\n  uvec4(0x885de843u,0x84de3800u,0xe79583bau,0xe6df829fu),\n  uvec4(0xe616818cu,0x3800e531u,0x8056e44du,0x7f1fe37bu),\n  uvec4(0x7df24800u,0xe1327f04u,0x4800e132u,0x8b423800u),\n  uvec4(0xe1328c01u,0xe13b8ccau,0xe1608d8au,0x3800e17bu),\n  uvec4(0x8e1ce1bbu,0x8ea5e216u,0x8f133800u,0xe2728f93u),\n  uvec4(0xe2e88ff8u,0xe3719041u,0x3800e3f1u,0x906ee471u),\n  uvec4(0x9093e4f1u,0x90a54800u,0xe4f1925cu,0x4800d047u),\n  uvec4(0x925c4800u,0xd04790a5u,0x3800d0acu,0x90a5d110u),\n  uvec4(0x909cd175u,0x90773800u,0xd1d9904au,0xd23e900au),\n  uvec4(0xd2908fc1u,0x3800d319u,0x8f5cd37du,0x8ecad3abu),\n  uvec4(0x8e263800u,0xd3d98d5du,0xd3f48c94u,0xd3eb8bc1u),\n  uvec4(0x4800d407u,0x6f6b3800u,0xd4076e87u,0xd4076dd0u),\n  uvec4(0xd3fd6d50u,0x3800d3d9u,0x6bc7d3abu,0x6abed350u),\n  uvec4(0x6a233800u,0xd31069a3u,0xd2ab6935u,0xd22b68f5u),\n  uvec4(0x3800d1acu,0x68b6d122u,0x689ad099u,0x68a34800u),\n  uvec4(0xd09966edu,0x4800eee6u,0x66ed3800u,0xf24166edu),\n  uvec4(0xf4dc6776u,0xf69c687fu,0x3800f849u,0x696cf96du),\n  uvec4(0x6b1af9a4u,0x6cfe3800u,0xf9ad6d59u,0xf9b66dbeu),\n  uvec4(0xf9c06e19u,0x3800f9c0u,0x703df8edu,0x723df740u),\n  uvec4(0x74213800u,0xf5ee7598u,0xf45c76d8u,0xf29c77ceu),\n  uvec4(0x3800f12fu,0x78a9f054u,0x790ef01du,0x790e3800u),\n  uvec4(0xf1a67afbu,0xf3017cc4u,0xf4257e72u,0x3800f54au),\n  uvec4(0x801ff677u,0x81faf7b7u,0x840c3800u,0xf85b8527u),\n  uvec4(0xf98087b0u,0xfb098b8bu,0x3800fc2du,0x8e5cfd24u),\n  uvec4(0x8ff8fde3u,0x90413800u,0xfe889081u,0xff3590aeu),\n  uvec4(0xffec90d3u,0x4800ffecu,0x925c4800u,0xffff9249u),\n  uvec4(0x4800ffffu,0x92496800u,0xebde703du,0x3800ebe7u),\n  uvec4(0x6ed0eb30u,0x6d7eea03u,0x6cb53800u,0xe8f06bf5u),\n  uvec4(0xe7956b9au,0xe5e86b9au,0x3800e4d6u,0x6b9ae3bbu),\n  uvec4(0x6bd0e2bbu,0x6c353800u,0xe2326c6cu,0xe1cd6cd0u),\n  uvec4(0xe1966d59u,0x3800e156u,0x6df5e13bu,0x6e99e144u),\n  uvec4(0x6f3d4800u,0xe1447a20u,0x4800e2c4u,0x79a03800u),\n  uvec4(0xe4df78e9u,0xe6df77c5u,0xe88c764eu,0x3800eaccu),\n  uvec4(0x7473ebdeu,0x726bebdeu,0x703d4800u,0xebde703du),\n  uvec4(0x90b32f77u,0x88024845u,0xa30f6800u,0x4845912eu),\n  uvec4(0x4800477cu,0x91653800u,0x47339053u,0x46a98f5cu),\n  uvec4(0x45f38e81u,0x3800453cu,0x8d9d444eu,0x8cdd4346u),\n  uvec4(0x8c5d3800u,0x423d8be6u,0x41188ba6u,0x3ff48bafu),\n  uvec4(0x48003ffdu,0x9d904800u,0x3ffd9e1au,0x38003ffdu),\n  uvec4(0x9eac4006u,0x9f354022u,0x9fc73800u,0x403da03eu),\n  uvec4(0x406ba0b4u,0x40b4a119u,0x380040f4u,0xa174414fu),\n  uvec4(0xa1bd41b4u,0xa1e23800u,0x422aa207u,0x42a1a219u),\n  uvec4(0x4318a210u,0x48004318u,0xa30f4800u,0x34b6a30fu),\n  uvec4(0x480034b6u,0xa2103800u,0x34d1a207u,0x34f6a207u),\n  uvec4(0x3511a207u,0x380035c8u,0xa1fd367fu,0xa1b436ffu),\n  uvec4(0xa12b3800u,0x3751a0e2u,0x3788a087u,0x37a3a019u),\n  uvec4(0x380037b5u,0x9f9037beu,0x9efe37beu,0x9e6c4800u),\n  uvec4(0x37be8bafu,0x380036d1u,0x8ba635edu,0x8bcb3508u),\n  uvec4(0x8c1d3800u,0x34248c78u,0x33528cf8u,0x32928d93u),\n  uvec4(0x38003212u,0x8e0a319bu,0x8e933140u,0x8f2f3800u),\n  uvec4(0x30c98fdcu,0x30779093u,0x30409153u,0x48002f77u),\n  uvec4(0x91254800u,0x315b8802u,0x3800319bu,0x883931edu),\n  uvec4(0x8870323fu,0x88943800u,0x326d88a7u,0x32a488b0u),\n  uvec4(0x32d288b0u,0x380032f6u,0x88b9331bu,0x88b9333fu),\n  uvec4(0x88b94800u,0x447c88b9u,0x380044c5u,0x88b04517u),\n  uvec4(0x88a74561u,0x888b3800u,0x45c58870u,0x4620884bu),\n  uvec4(0x4673880bu,0x48004845u,0x912e4800u,0x4845912eu),\n  uvec4(0x910c498eu,0x88c26624u,0xa2f46800u,0x662489c2u),\n  uvec4(0x380065e4u,0x89d465adu,0x89dd656du,0x89e63800u),\n  uvec4(0x65088a02u,0x64b68a42u,0x64768a94u,0x38006436u),\n  uvec4(0x8aef6412u,0x8b4b63f6u,0x8bb83800u,0x63e48c38u),\n  uvec4(0x63d28cb8u,0x63d28d38u,0x480063e4u,0x9f103800u),\n  uvec4(0x63e49f87u,0x63ed9ffeu,0x6409a075u,0x3800641bu),\n  uvec4(0xa0d0643fu,0xa1226476u,0xa1623800u,0x64e4a1c7u),\n  uvec4(0x6576a1fdu,0x6608a1f4u,0x48006608u,0xa2f44800u),\n  uvec4(0x594ba2f4u,0x4800594bu,0xa1fd3800u,0x59f8a207u),\n  uvec4(0x5a9da1b4u,0x5b0aa134u,0x38005b41u,0xa0f45b66u),\n  uvec4(0xa0a25b78u,0xa0503800u,0x5b8a9ff5u,0x5b9c9f90u),\n  uvec4(0x5b9c9f35u,0x48005b9cu,0x92774800u,0x53cc9277u),\n  uvec4(0x480053ccu,0x9f223800u,0x53cc9f87u,0x53d59febu),\n  uvec4(0x53e7a047u,0x380053f9u,0xa0995427u,0xa0e2545eu),\n  uvec4(0xa1223800u,0x54cba1abu,0x5579a1f4u,0x5627a1f4u),\n  uvec4(0x48005627u,0xa2f44800u,0x49a0a2f4u,0x480049a0u),\n  uvec4(0xa1fd3800u,0x49e0a1f4u,0x4a20a1e2u,0x4a57a1d0u),\n  uvec4(0x38004a96u,0xa1ab4acdu,0xa17d4b04u,0xa1473800u),\n  uvec4(0x4b4da0ebu,0x4b7ba07eu,0x4b8da010u,0x38004bbbu),\n  uvec4(0x9f754bcdu,0x9ed94bcdu,0x9e3e4800u,0x4bbb8d13u),\n  uvec4(0x48004bbbu,0x8cb83800u,0x4bbb8c4au,0x4bbb8bddu),\n  uvec4(0x4ba98b6fu,0x38004b96u,0x8b1d4b72u,0x8ad44b44u),\n  uvec4(0x8a943800u,0x4b168a54u,0x4ad68a1du,0x4a8d8a02u),\n  uvec4(0x38004a3bu,0x89e649e0u,0x89cb498eu,0x89c24800u),\n  uvec4(0x498e88c2u,0x48005630u,0x88c24800u,0x563089c2u),\n  uvec4(0x380055e7u,0x89c255a7u,0x89cb555eu,0x89e63800u),\n  uvec4(0x550b89f9u,0x54cb8a2fu,0x54958a6fu,0x38005402u),\n  uvec4(0x8b2653c2u,0x8c1d53c2u,0x8d534800u,0x53c28fd3u),\n  uvec4(0x48005b9cu,0x8fd34800u,0x5b9c8d66u,0x38005ba6u),\n  uvec4(0x8cc15b9cu,0x8c145b78u,0x8b6f3800u,0x5b5d8b14u),\n  uvec4(0x5b388ab8u,0x5af88a6fu,0x38005ab8u,0x8a2f5a6fu),\n  uvec4(0x8a025a14u,0x89ef3800u,0x59e689e6u,0x59af89ddu),\n  uvec4(0x595d89cbu,0x4800595du,0x88cb4800u,0x660888cbu),\n  uvec4(0x48006608u,0x89d44800u,0x662489c2u,0x48006624u),\n  uvec4(0x89c2908au,0x675188c2u,0x742aa2fdu,0x6800742au),\n  uvec4(0x89c23800u,0x73c689d4u,0x736a89efu,0x730f8a14u),\n  uvec4(0x380072d8u,0x8a3972a1u,0x8a66727du,0x8a9d3800u),\n  uvec4(0x723d8aefu,0x72188b54u,0x72068bb8u,0x380071f4u),\n  uvec4(0x8c4171ebu,0x8cca71ebu,0x8d534800u,0x71eb9efeu),\n  uvec4(0x380071ebu,0x9f7571f4u,0x9feb720fu,0xa0623800u),\n  uvec4(0x7218a0beu,0x723da110u,0x727da150u,0x380072b4u),\n  uvec4(0xa18772ebu,0xa1ab732au,0xa1d03800u,0x7374a1f4u),\n  uvec4(0x73bda207u,0x740fa1fdu,0x4800740fu,0xa2fd4800u),\n  uvec4(0x6751a2fdu,0x48006751u,0xa1fd3800u,0x67ffa1fdu),\n  uvec4(0x68a3a1abu,0x691aa122u,0x38006951u,0xa0e2697fu),\n  uvec4(0xa0996991u,0xa0473800u,0x69a39fe2u,0x69b59f87u),\n  uvec4(0x69b59f22u,0x480069b5u,0x8d663800u,0x69b58ccau),\n  uvec4(0x69ac8c38u,0x699a8b9du,0x38006988u,0x8b2f695au),\n  uvec4(0x8acb691au,0x8a6f3800u,0x68f58a39u,0x68bf8a14u),\n  uvec4(0x68888a02u,0x38006823u,0x89e667c8u,0x89cb6763u),\n  uvec4(0x89c24800u,0x676388c2u,0x4800742au,0x88c24800u),\n  uvec4(0x742a89c2u,0x4800742au,0x89c24800u,0x742a89c2u),\n  uvec4(0x911b756au,0x88cb8f1cu,0xa2f46800u,0x8f1c89c2u),\n  uvec4(0x48008e81u,0x89dd3800u,0x8e2689f9u,0x8ddc8a2fu),\n  uvec4(0x8d9d8a79u,0x38008d4au,0x8ae68d13u,0x8b668d0au),\n  uvec4(0x8bef3800u,0x8cf88c78u,0x8cef8d01u,0x8ce68d8au),\n  uvec4(0x48008ce6u,0x9f073800u,0x8ce69f50u,0x8cef9fa2u),\n  uvec4(0x8cf8a007u,0x38008d01u,0xa0628d1du,0xa0b48d4au),\n  uvec4(0xa0fe3800u,0x8d78a147u,0x8db8a187u,0x8e01a1a2u),\n  uvec4(0x38008e53u,0xa1d08ea5u,0xa1e28f01u,0xa1eb4800u),\n  uvec4(0x8f01a2ebu,0x48008715u,0xa2eb4800u,0x8715a1ebu),\n  uvec4(0x3800874bu,0xa1eb878bu,0xa1e287c2u,0xa1d03800u),\n  uvec4(0x889da187u,0x890ba0d0u,0x890b9facu,0x3800890bu),\n  uvec4(0x9eec88ddu,0x9e238879u,0x9d7e3800u,0x88149cd1u),\n  uvec4(0x879e9c2cu,0x87159b91u,0x48007b04u,0x8d664800u),\n  uvec4(0x7afb9efeu,0x38007afbu,0x9f597b04u,0x9fbe7b17u),\n  uvec4(0xa0193800u,0x7b29a06bu,0x7b44a0b4u,0x7b69a0feu),\n  uvec4(0x38007b8eu,0xa1477bc4u,0xa17d7c0du,0xa1a23800u),\n  uvec4(0x7c60a1d0u,0x7cb2a1ebu,0x7d0da1f4u,0x48007d0du),\n  uvec4(0xa2f44800u,0x756aa2f4u,0x4800756au,0xa1fd3800u),\n  uvec4(0x75a1a1fdu,0x75e1a1f4u,0x7618a1e2u,0x38007645u),\n  uvec4(0xa1d97673u,0xa1bd7698u,0xa1ab3800u,0x76f3a174u),\n  uvec4(0x7733a0feu,0x7761a047u,0x3800778eu,0x9f7e77a1u),\n  uvec4(0x9eb57797u,0x9de34800u,0x77978d26u,0x38007797u),\n  uvec4(0x8c9d778eu,0x8c14777cu,0x8b8b3800u,0x77738b26u),\n  uvec4(0x77578acbu,0x77218a82u,0x380076bcu,0x8a14762au),\n  uvec4(0x89d47598u,0x89cb4800u,0x759888cbu,0x4800849eu),\n  uvec4(0x88cb4800u,0x849e89cbu,0x38008470u,0x89cb844cu),\n  uvec4(0x89d48427u,0x89ef3800u,0x84038a0bu,0x83de8a2fu),\n  uvec4(0x83c38a54u,0x3800839eu,0x8a798395u,0x8aa68395u),\n  uvec4(0x8add3800u,0x83958b26u,0x83a78b6fu,0x83cc8bafu),\n  uvec4(0x380083e7u,0x8bdd8403u,0x8c148427u,0x8c414800u),\n  uvec4(0x897092dcu,0x48008970u,0x8c943800u,0x89708c38u),\n  uvec4(0x89668bddu,0x895d8b81u,0x38008942u,0x8b388926u),\n  uvec4(0x8aef88f9u,0x8aaf3800u,0x88cb8a66u,0x888b8a2fu),\n  uvec4(0x88398a0bu,0x380087deu,0x89e68782u,0x89cb8727u),\n  uvec4(0x89cb4800u,0x872788cbu,0x48008f1cu,0x88cb4800u),\n  uvec4(0x8f1c89c2u,0x48008f1cu,0x89c24800u,0x8f1c89c2u),\n  uvec4(0x91069053u,0x87f9aecdu,0xa3066800u,0xaecd9412u),\n  uvec4(0x3800ae17u,0x9412ad69u,0x9464acf2u,0x94f73800u),\n  uvec4(0xaca99537u,0xac7b9592u,0xac6995edu,0x3800ac57u),\n  uvec4(0x965bac45u,0x96d2ac45u,0x97484800u,0xac45a019u),\n  uvec4(0x3800ac4eu,0xa06bac69u,0xa0beac97u,0xa1073800u),\n  uvec4(0xacb2a150u,0xace9a187u,0xad29a1abu,0x3800ad72u),\n  uvec4(0xa1d9adc4u,0xa1f4ae20u,0xa2074800u,0xae20a306u),\n  uvec4(0x4800a0feu,0xa3063800u,0x9ddaa306u,0x9b5aa2b4u),\n  uvec4(0x996da219u,0x38009712u,0xa1479509u,0x9fd09380u),\n  uvec4(0x9dda3800u,0x92779c88u,0x91a59b11u,0x91259976u),\n  uvec4(0x3800909cu,0x97e49053u,0x96369053u,0x94893800u),\n  uvec4(0x905392c9u,0x90a59113u,0x91538f78u,0x38009200u),\n  uvec4(0x8ddc9309u,0x8c6f945bu,0x8b543800u,0x95b68a2fu),\n  uvec4(0x973f895du,0x98ed88ddu,0x38009ac8u,0x88549cacu),\n  uvec4(0x88149e99u,0x88143800u,0x9fb58814u,0xa0be8827u),\n  uvec4(0xa1bd8842u,0x4800a518u,0x88d43800u,0xa5aa88f0u),\n  uvec4(0xa6468902u,0xa6e18902u,0x3800a76au,0x890ba7eau),\n  uvec4(0x88f0a861u,0x88b03800u,0xa8aa8879u,0xa8f38830u),\n  uvec4(0xa94e87f9u,0x4800aa60u,0x91004800u,0xa9bc9153u),\n  uvec4(0x3800a973u,0x9077a8ceu,0x8f81a7cfu,0x8e533800u),\n  uvec4(0xa7338d8au,0xa66a8ce6u,0xa58f8c78u,0x3800a3b4u),\n  uvec4(0x8b9da206u,0x8b26a090u,0x8b263800u,0x9e598b1du),\n  uvec4(0x9c488c38u,0x9b238e13u,0x38009a08u,0x8fb8995au),\n  uvec4(0x91c9991au,0x94643800u,0x99119489u,0x991194b7u),\n  uvec4(0x991194dbu,0x48009911u,0x95643800u,0x990897f6u),\n  uvec4(0x99bf9a76u,0x9b1a9ca3u,0x38009cacu,0x9f2c9ebeu),\n  uvec4(0xa075a150u,0xa0753800u,0xa274a075u,0xa34fa019u),\n  uvec4(0xa3cf9f62u,0x3800a44fu,0x9eaca486u,0x9dd0a47du),\n  uvec4(0x9cec4800u,0xa47d96a4u,0x3800a486u,0x9636a47du),\n  uvec4(0x95d2a458u,0x95643800u,0xa4469524u,0xa42294edu),\n  uvec4(0xa3eb94c0u,0x3800a38fu,0x945ba30fu,0x9424a290u),\n  uvec4(0x942e4800u,0xa222942eu,0x4800a222u,0x932e4800u),\n  uvec4(0xaebb932eu,0x4800aecdu,0x94124800u,0xaecd9412u),\n  uvec4(0x4800aecdu,0x94129121u,0xb04d87deu,0xc8bfa3cfu),\n  uvec4(0x6800c8adu,0x9a913800u,0xc8ad9ca3u,0xc7d29ea3u),\n  uvec4(0xc652a010u,0x3800c4dcu,0xa162c31cu,0xa262c12fu),\n  uvec4(0xa2f43800u,0xbf93a37du,0xbde6a3c6u,0xbc2fa3cfu),\n  uvec4(0x3800bac2u,0xa3cfb94bu,0xa3b4b7deu,0xa37d3800u),\n  uvec4(0xb643a34fu,0xb49fa30fu,0xb2faa2e2u,0x3800b2cdu),\n  uvec4(0xa2e2b29fu,0xa2e2b271u,0xa2eb3800u,0xb244a2f4u),\n  uvec4(0xb216a306u,0xb1e8a322u,0x4800b14du,0xa3864800u),\n  uvec4(0xb04d98a4u,0x4800b144u,0x98883800u,0xb15f9948u),\n  uvec4(0xb19f99ffu,0xb1e89aacu,0x3800b24du,0x9bb5b2dfu),\n  uvec4(0x9ca3b39fu,0x9d753800u,0xb48c9e75u,0xb5a79f35u),\n  uvec4(0xb6e79fb5u,0x3800b815u,0xa035b95eu,0xa07ebaa7u),\n  uvec4(0xa07e3800u,0xbbd4a087u,0xbd0ba03eu,0xbe0b9f99u),\n  uvec4(0x3800bef8u,0x9f10bf93u,0x9e2cbfcau,0x9d233800u),\n  uvec4(0xbfd39cecu,0xbfdc9cb5u,0xbfdc9c7eu,0x3800bfdcu),\n  uvec4(0x9be3bfafu,0x9b48bf4au,0x9ac83800u,0xbee69a48u),\n  uvec4(0xbe5d99edu,0xbdcb99bfu,0x4800b6deu,0x97763800u),\n  uvec4(0xb53196e4u,0xb3e8961bu,0xb2fa9509u,0x3800b1f1u),\n  uvec4(0x93dbb168u,0x925cb171u,0x90ca3800u,0xb1688e8au),\n  uvec4(0xb2688c66u,0xb41f8af8u,0x3800b5bau,0x8994b7ccu),\n  uvec4(0x8894ba67u,0x880b3800u,0xbb0b87e7u,0xbbb987deu),\n  uvec4(0xbc6687deu,0x3800bd6fu,0x87debe6fu,0x87f9bf6fu),\n  uvec4(0x88303800u,0xc08a8867u,0xc1b888a7u,0xc2e588ddu),\n  uvec4(0x3800c300u,0x88ddc31cu,0x88ddc32eu,0x88d43800u),\n  uvec4(0xc39c88b9u,0xc4008894u,0xc465885du,0x4800c51cu),\n  uvec4(0x87f04800u,0xc6009077u,0x4800c509u,0x90c13800u),\n  uvec4(0xc4e59053u,0xc4b78feeu,0xc4808f8au,0x3800c3f7u),\n  uvec4(0x8e6fc32eu,0x8d78c237u,0x8cb83800u,0xc1818c41u),\n  uvec4(0xc0c18bddu,0xbfef8b9du,0x3800bf26u,0x8b54be4au),\n  uvec4(0x8b2fbd6fu,0x8b2f3800u,0xbcd48b2fu,0xbc398b4bu),\n  uvec4(0xbba68b81u,0x3800bb26u,0x8bb8bac2u,0x8c14ba82u),\n  uvec4(0x8c813800u,0xba5d8cc1u,0xba428d01u,0xba308d41u),\n  uvec4(0x3800ba0bu,0x8d9dba02u,0x8e01ba02u,0x8e5c3800u),\n  uvec4(0xba028eefu,0xba398f81u,0xba9d8fe5u,0x3800bb4bu),\n  uvec4(0x908abc26u,0x910abd14u,0x914a4800u,0xc3659352u),\n  uvec4(0x3800c4eeu,0x93c9c649u,0x94aec749u,0x95ed3800u),\n  uvec4(0xc8409752u,0xc8bf98edu,0xc8ad9a91u,0x4800c8adu),\n  uvec4(0x9a91900fu,0x00095c2fu,0xffff5f40u,0x68000009u),\n  uvec4(0x5c2f4800u,0xffff5c2fu,0x4800ffffu,0x5f404800u),\n  uvec4(0x00095f40u,0x48000009u,0x5c2f900fu,0x00099a36u),\n  uvec4(0x2ca59d47u,0x68000009u,0x9a364800u,0x2ca59a36u),\n  uvec4(0x48002ca5u,0x9d474800u,0x00099d47u,0x48000009u),\n  uvec4(0x9a36900fu,0xce3e9a36u,0xffff9d47u,0x6800ce3eu),\n  uvec4(0x9a364800u,0xffff9a36u,0x4800ffffu,0x9d474800u),\n  uvec4(0xce3e9d47u,0x4800ce3eu,0x9a360000u,0x00000000u)\n);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   ivec2 ix = ivec2(fragCoord);\n   fragColor = texelFetch(iChannel0,ix,0);\n   if (iFrame > 0 && !key(CHAR_X)) return;\n   if (ix.x > 64) return;\n   int i = 64*ix.y+ix.x;\n   if (i >= data.length()) return;\n   fragColor = uintBitsToFloat(data[i]);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}\n\n// This is the C++ program used to generate the data in Common  (datadims and data).\n//\n// Uses glm header-only library, modify #include to suit your local setup.\n//\n// Should compile & run just with:\n//\n// $ g++ -Wall stranger.cpp -o stranger\n// $ ./stranger > stranger.data\n//\n// Path data manually extracted from SVG but otherwise unmodified.\n// Not all path commands are handled. s and S are just treated as\n// lines.\n\n#if 0\n#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <math.h>\n#include <assert.h>\n#include <iostream>\n#include <vector>\n\n#define GLM_ENABLE_EXPERIMENTAL\n#include \"cpp/glm/glm/glm.hpp\"\n#include \"cpp/glm/glm/ext.hpp\"\n\nusing namespace glm;\n\nstd::ostream& operator<<(std::ostream& out, const glm::vec2& g) {\n    return out << glm::to_string(g);\n}\n\nstd::ostream& operator<<(std::ostream& out, const glm::vec3& g) {\n    return out << glm::to_string(g);\n}\n\nstd::ostream& operator<<(std::ostream& out, const glm::vec4& g) {\n    return out << glm::to_string(g);\n}\n\nstd::ostream& operator<<(std::ostream& out, const glm::uvec4& g) {\n    return out << glm::to_string(g);\n}\n\nconst char *pathstrings[] = {\n   \"M173.2,306.3c0.1,9.8-4,19.2-11.2,25.9 c -6.1,5.9-14.2,10.5-24.4,13.6c-7.7,2.5-15.7,3.9-23.7,3.9\"\n   \"c-6.8,0-13.6-0.5-20.3-1.5c-7.5-1-15.2-2-23.1-3c-0.9,0-1.8,0.1-2.7,0.2c-0.9,0.1-1.7,0.5-2.5,1.1c-0.9,0.6-1.9,1.3-2.7,1.9\"\n   \"l-4.9-51.4l4.5-0.5c0.6,3.5,1.6,6.9,3.1,10.2c1.9,4.8,4.6,9.3,8.1,13.2c8.7,9,20.6,14.2,33.2,14.5c5.7,0.2,11.2-1.3,16.1-4.1\"\n   \"c4.3-2.5,7.3-6.7,8.2-11.5c0.2-1,0.3-2.1,0.3-3.1c0.1-2.9-0.9-5.7-2.7-8c-1.8-2.4-4.3-4.1-7.2-5L88.6,292c-7.9-2.6-14-6.4-18.4-11.5\"\n   \"c-4.8-5.6-7.4-12.8-7.2-20.1c0-10.8,4.2-20.1,12.6-27.6c7.5-6.7,17.4-11.2,29.7-13.7c3.1-0.6,6.3-0.8,9.4-0.8\"\n   \"c4.8,0.1,9.7,0.6,14.4,1.6c5.3,1.1,10.7,2.2,16.4,3.2c0.5,0,0.9,0,1.4-0.1c2-0.5,3.9-1.3,5.7-2.2c1.5-0.9,2.6-1.6,3.5-2l4.2,40.4\"\n   \"l-4.5,1.4c-0.6-2-1.4-3.9-2.5-5.7c-3.3-6.2-6.8-10.6-10.8-13.3c-3.4-2.2-7-4-10.8-5.2c-3.8-1.3-7.7-1.9-11.6-2\"\n   \"c-2.9,0-5.8,0.5-8.4,1.5c-2.3,0.9-4.1,2.6-5.3,4.8c-0.6,1.1-1.2,2.3-1.7,3.5c-0.6,1.7-0.8,3.4-0.8,5.2c0,2.7,1.1,5.4,3,7.3\"\n   \"c2.5,2.6,6.3,4.8,11.5,6.4l29.8,9.6c7.9,2.6,14,6.7,18.4,12.5C170.9,290.9,173.2,297.8,173.2,306.3z\",\n   \"M233.5,244.2l-2.2,0.6c-0.8-3-2.3-5.7-4.3-8.1c-2-2.6-4.6-4.6-7.5-6c-2.9-1.3-6.1-2-9.3-1.9l0.1,50.1v1.5\"\n   \"c0,1.6,0.1,3.1,0.4,4.7c0.3,1.3,0.8,2.6,1.6,3.7c0.7,1,1.7,1.8,2.8,2.2c1.3,0.4,2.6,0.6,3.9,0.5v2.8h-40.3v-2.8\"\n   \"c0.3-0.1,0.7-0.1,1-0.1c2-0.1,4-0.9,5.4-2.4c0.9-0.8,1.5-1.8,1.8-3c0.2-1.5,0.3-3.1,0.3-4.7v-52.5c-2.6-0.1-5.2,0.3-7.6,1.2\"\n   \"c-2.5,1-4.8,2.4-6.9,4.1c-1.4,1.3-2.7,2.8-3.7,4.5c-1.3,1.9-2.2,3.9-2.8,6l-2.2-0.5l5.4-25.6c0.7,0.6,1.6,1.2,2.5,1.6\"\n   \"c0.5,0.2,1.1,0.3,1.6,0.3c0.4,0.1,0.8,0.1,1.2,0.1H223c0.8-0.1,1.7-0.2,2.5-0.5c1.1-0.3,2.1-0.7,3-1.4L233.5,244.2z\",\n   \"M318.5,294.2h-37.1v-2.7c1.3-0.1,2.5-0.5,3.6-1.2c0.6-0.5,1-1.2,0.9-2c-0.2-2-0.7-3.9-1.6-5.6\"\n   \"c-0.7-1.6-2.7-5.4-6.1-11.5c-1.1-2-2.4-3.9-3.8-5.7c-1.5-2-3-4.1-4.5-6.1l-3.9,1.8v20.8c0,1.3,0.1,2.6,0.4,3.9\"\n   \"c0.2,1,0.6,1.9,1.2,2.6c0.6,0.8,1.4,1.5,2.3,2c0.8,0.3,1.7,0.5,2.6,0.6v2.8h-35.1v-2.8c0.7,0,1.4-0.1,2-0.4c0.6-0.3,1.3-0.7,1.8-1.2\"\n   \"c0.9-0.7,1.6-1.6,1.9-2.8c0.3-1.3,0.5-2.7,0.5-4l0.2-48.2c0-1.2,0-2.4-0.1-3.6c0-1.9-0.4-3.7-1.1-5.4c-0.4-0.8-1.1-1.5-1.9-2\"\n   \"c-0.8-0.4-1.7-0.6-2.6-0.5v-2.8h51.7c5.8,0,10.1,0.9,13.1,2.7c2.9,1.5,4.8,4.4,5.2,7.6c0.1,0.9,0.2,1.6,0.2,1.9\"\n   \"c-0.1,3.8-1.6,7.5-4.2,10.2c-2.3,2.5-5,4.6-7.9,6.2c-2.5,1.5-3.9,2.1-4.3,2.1c2.6,3.3,4.9,6.3,6.8,9.2s3.9,6,6,9.5\"\n   \"c2.1,4.1,4,8.4,5.7,12.7c1.9,4.8,3.6,7.5,4.9,8c1.1,0.4,2.3,0.7,3.5,0.9L318.5,294.2L318.5,294.2z M284.3,236.4c0-2.4-1.2-4.7-3.2-6\"\n   \"c-2.1-1.4-4.5-2-7-1.9c-1.8,0-3.7,0.3-5.4,1c-0.9,0.3-1.6,1-1.9,1.9c-0.4,1-0.6,2.1-0.6,3.2v18.5l2.6-0.8c3.6-1.2,7-3.1,9.9-5.6\"\n   \"C282.5,243.5,284.3,240,284.3,236.4L284.3,236.4z\",\n   \"M406.6,294.2h-38.1v-2.8c1-0.2,1.9-0.5,2.8-0.9c2-1.2,3.1-3.5,2.9-5.8c0-0.7-0.1-1.3-0.2-2\"\n   \"c-0.4-2.3-1.8-4.9-4.3-7.7c-2.5-2.9-5.7-5.3-9.2-6.9c-1.9-0.7-3.9-1.2-5.9-1.6c-2.1-0.4-4.3-0.7-6.4-0.7l-5.2,14.9\"\n   \"c-0.7,1.8-1,3.8-1,5.8c-0.1,0.7,0.1,1.4,0.4,2.1c0.5,0.8,1.2,1.5,2,1.9c0.8,0.5,1.6,0.7,2.5,0.8v2.8h-24.5v-2.8\"\n   \"c0.8-0.2,1.5-0.5,2.2-0.9c0.8-0.5,1.5-1.1,2.2-1.7c1.1-0.8,2-1.8,2.8-2.9c0.8-1.2,1.4-2.4,1.8-3.8l20.4-52.3\"\n   \"c0.3-0.6,0.5-1.1,0.6-1.7c0.2-0.5,0.3-1.1,0.3-1.6c0-0.6-0.2-1.2-0.5-1.7c-0.2-0.4-0.5-0.7-0.9-0.9c-0.3-0.2-0.6-0.3-1-0.4v-2.8\"\n   \"h32.6v3.2c-1-0.1-2,0.4-2.5,1.3c-0.2,0.4-0.3,0.8-0.3,1.2c0,0.4,0.1,0.9,0.2,1.3c0.2,0.5,0.4,1,0.5,1.5l19.1,57.4\"\n   \"c0.4,0.5,0.6,1.1,0.8,1.4c0.5,0.8,1.1,1.6,1.8,2.2c0.5,0.4,1,0.7,1.6,0.9c0.6,0.2,1.3,0.4,1.9,0.5v3L406.6,294.2z M367.4,261.7\"\n   \"l-8.2-26l-7,20.7c0.7,0,1.5,0,2.2,0.1c1.3,0.1,2.6,0.4,3.8,0.8c1.9,0.6,3.8,1.3,5.6,2.3C365,260.2,366.2,260.9,367.4,261.7z\",\n   \"M482.6,223.4l-1.7,0.3c-1,0.3-1.8,0.9-2.5,1.7c-0.9,1.2-1.5,2.6-1.6,4.1c-0.2,1.5-0.3,3-0.4,4.5v49\"\n   \"c0,0.8,0.1,1.7,0.2,2.7c0.1,1,0.4,1.9,0.9,2.8c0.5,0.8,1.2,1.5,2,1.8c0.9,0.5,1.8,0.8,2.8,0.8v2.8h-22.3v-2.8c0.7,0,1.3-0.1,1.9-0.3\"\n   \"c2.4-0.8,3.6-2.7,3.6-6c0-2.1-0.5-4.3-1.6-6.1c-1.1-1.9-2.4-3.7-3.9-5.4l-33.7-39.5l-0.1,49.3c0,1,0.1,2.1,0.3,3.1\"\n   \"c0.2,0.9,0.5,1.7,0.9,2.5c0.4,0.8,1,1.4,1.7,1.8c0.9,0.5,1.8,0.8,2.8,0.9v2.8h-21.4v-2.8c0.6,0,1.3-0.1,1.9-0.3\"\n   \"c0.5-0.1,1-0.4,1.4-0.6c1-0.6,1.7-1.9,2.2-3.9c0.5-2.2,0.7-4.4,0.6-6.7v-47c0-1.5-0.1-3-0.3-4.5c-0.1-1.1-0.4-2.1-1-2.9\"\n   \"c-1.1-1.2-2.7-1.9-4.3-2v-2.8h42.1v2.8c-0.5,0-0.9,0.1-1.3,0.4c-0.4,0.3-0.8,0.7-1.1,1.1c-0.4,0.4-0.5,0.9-0.5,1.5\"\n   \"c0,0.8,0.2,1.6,0.6,2.3c0.3,0.5,0.6,1.1,1,1.6l14.8,18.5v-17.6c0-1-0.1-2-0.2-3c-0.3-0.8-0.6-1.6-1.1-2.3c-0.5-0.8-1.3-1.4-2.1-1.7\"\n   \"c-1-0.4-2-0.7-3-0.7v-2.8h22.3v2.8L482.6,223.4z\",\n   \"M571.4,252.3c-2,0-3.9,0.9-5.2,2.5c-0.8,0.7-1.3,1.7-1.5,2.8c-0.2,1.2-0.4,2.5-0.4,3.8v24.6\"\n   \"c0.1,0.9,0.4,1.8,0.9,2.6c0.3,0.8,0.9,1.4,1.7,1.8c0.8,0.5,1.7,0.8,2.7,1v2.8h-36.8c-8.8,0-15.8-0.9-21.2-2.7\"\n   \"c-6.6-2.2-12.4-6.4-16.6-11.9c-2.9-3.7-5.2-7.8-6.6-12.3c-1.5-4.4-2.3-9.1-2.3-13.8c-0.1-4.9,0.9-9.7,2.8-14.2\"\n   \"c1.9-4.5,4.8-8.5,8.5-11.6c3.8-3.2,8.1-5.5,12.8-6.9c5.2-1.5,10.5-2.3,15.9-2.2c2.9,0,5.9,0.2,8.8,0.5c3.2,0.4,6.3,0.9,9.4,1.6\"\n   \"c1.6,0.3,3.3,0.5,5,0.5c1.5,0.1,2.9-0.2,4.2-0.9c0.8-0.6,1.6-1.4,2.6-2l3,25.3l-1.8,0.9c-0.8-2.4-2.7-5.1-5.4-8.4\"\n   \"c-1.7-2.2-3.9-4-6.3-5.2c-5.2-2.4-9.9-3.7-14-3.7c-6.2-0.1-12,3-15.2,8.2c-3.1,4.6-4.9,10.5-5.7,17.7c-0.1,0.4-0.1,0.9-0.1,1.3v1.5\"\n   \"c-0.1,7.2,1.9,14.2,5.7,20.2c4.4,7.1,10.2,10.7,17.4,10.7c3.2,0,5.6-1,7-3c1.4-2,2-4.4,1.9-6.9v-17.3c0.1-1.2-0.1-2.4-0.4-3.5\"\n   \"c-0.2-0.7-0.6-1.3-1.2-1.8c-1-1.1-2.4-1.6-3.8-1.7h-1.2v-2.7h35.3L571.4,252.3L571.4,252.3z\",\n   \"M646.5,267.4l-9.5,28.3l-2.5-0.7c-0.9-0.3-1.9-0.5-2.8-0.5c-1-0.1-2.1-0.2-3.2-0.2h-53.7v-2.8\"\n   \"c1-0.1,1.9-0.4,2.8-0.7c0.6-0.3,1.1-0.7,1.5-1.3c0.7-0.8,1.3-1.8,1.5-2.8c0.3-1.2,0.4-2.5,0.4-3.8v-53.1c0-1-0.1-2-0.2-2.9\"\n   \"c-0.2-0.8-0.5-1.5-1.1-2c-0.5-0.6-1.1-1-1.7-1.3c-0.8-0.2-1.6-0.3-2.5-0.3v-2.8h49.8c2.1,0,4.2-0.2,6.2-0.5c1.2-0.2,1.9-0.3,2-0.3\"\n   \"c0.7-0.1,1.4-0.4,2-0.6l5.4,24.9l-2.5,1.8c-1.1-4.8-3.7-9.1-7.4-12.4c-2.3-2-5-3.5-7.9-4.3c-2.9-1-5.9-1.5-9-1.5\"\n   \"c-3.3,0-5.7,0.5-7.3,1.7c-1,0.7-1.7,1.7-2.2,2.8c-0.5,1.3-0.7,2.6-0.6,3.9v8.1h10.3c1,0,1.9-0.1,2.8-0.4c1-0.3,1.8-0.8,2.6-1.5\"\n   \"c1.6-1.3,2.5-3.3,2.5-5.4v-1.1l2.2-0.6l5,28l-2.8,0.5c-0.3-1.3-0.8-2.6-1.5-3.8c-0.9-1.6-2-3.1-3.3-4.4c-1.3-1.1-2.7-2-4.2-2.6\"\n   \"c-1.2-0.6-2.6-0.9-3.9-1h-9.4v24c0,1.4,0.1,2.8,0.4,4.1c0.4,1.3,0.9,2.5,1.7,3.6c1,1.3,2.3,2.2,3.8,2.8c1.8,0.7,3.7,1,5.6,0.9\"\n   \"c2.4,0,4.8-0.4,7.2-1c2.3-0.6,4.6-1.5,6.7-2.8c3.3-1.9,6.2-4.4,8.6-7.3c2.7-2.8,4.7-6.3,5.9-10.1L646.5,267.4z\",\n   \"M775,342h-61.2v-4.4c2.1-0.2,4.1-0.9,6-1.9c1-0.5,1.5-1.6,1.5-3.3c0-2.2-0.9-5.2-2.7-9.2\"\n   \"c-1.2-2.7-4.6-9-10.1-18.8c-1.9-3.2-3.9-6.3-6.1-9.3c-2.5-3.4-5-6.8-7.3-10.1l-6.4,3v34.3c0,2.1,0.1,4.3,0.5,6.4\"\n   \"c0.3,1.6,1,3.1,2,4.3c1,1.4,2.3,2.5,3.8,3.3c1.4,0.5,2.8,0.9,4.2,1.1v4.8h-57.9v-4.8c1.1,0,2.2-0.1,3.3-0.5c1.1-0.5,2.2-1.2,3.1-2\"\n   \"c1.5-1.1,2.6-2.7,3.1-4.5c0.5-2.2,0.8-4.4,0.7-6.7l0.3-79.4c0-2.5,0-4.5-0.1-5.9c-0.4-4.3-0.9-7.2-1.9-8.9c-0.7-1.4-1.8-2.6-3.2-3.3\"\n   \"c-1.4-0.7-2.9-1-4.4-0.9v-4.8h84.9c9.4,0,16.7,1.5,21.6,4.4c4.7,2.6,7.9,7.3,8.5,12.6c0.1,1,0.2,2.1,0.3,3.1c0,6-2.3,11.6-7,16.9\"\n   \"c-3.7,4.1-8.1,7.6-13,10.3c-4,2.4-6.4,3.5-7,3.5c4.3,5.4,8.1,10.4,11.3,15.1c3.2,4.7,6.5,9.9,10,15.7c1.8,3.1,5,10.2,9.3,21\"\n   \"c3.2,7.9,5.9,12.4,8,13.2c1.8,0.7,3.7,1.2,5.7,1.6v4.3L775,342z M718.6,246.6c0.1-4-1.9-7.7-5.2-9.9c-3-2.1-6.8-3.1-11.5-3.1\"\n   \"c-3,0-6.1,0.6-8.9,1.7c-1.5,0.6-2.6,1.7-3.2,3.2c-0.7,1.7-1,3.5-0.9,5.3v30.5l4.2-1.4c5.9-2,11.5-5.2,16.2-9.3\"\n   \"C715.6,258.4,718.6,252.7,718.6,246.6z\",\n   \"M260.2,338.9l-2.2,0.6c-0.8-3-2.3-5.7-4.3-8.1c-2-2.5-4.6-4.6-7.5-6c-2.9-1.3-6.1-2-9.3-1.9l0.1,50.1v1.5\"\n   \"c0,1.6,0.1,3.1,0.4,4.7c0.3,1.3,0.8,2.6,1.6,3.7c0.7,1,1.7,1.8,2.8,2.2c1.3,0.4,2.6,0.6,3.9,0.5v2.8h-40.3v-2.8\"\n   \"c0.3-0.1,0.7-0.1,1-0.1c2-0.1,4-0.9,5.4-2.4c0.9-0.8,1.5-1.8,1.8-3c0.2-1.5,0.3-3.1,0.3-4.7v-52.5c-2.6-0.1-5.1,0.3-7.6,1.2\"\n   \"c-2.5,1-4.8,2.4-6.9,4.1c-1.4,1.3-2.7,2.8-3.7,4.5c-1.3,1.9-2.2,3.9-2.8,6l-2.2-0.5l5.3-25.6c0.7,0.6,1.6,1.2,2.5,1.6\"\n   \"c0.5,0.2,1.1,0.3,1.6,0.3c0.4,0.1,0.8,0.1,1.2,0.1h48.3c0.8-0.1,1.7-0.2,2.5-0.5c1.1-0.3,2.1-0.7,3-1.4L260.2,338.9z\",\n   \"M343.9,318.1c-0.7,0.2-1.3,0.3-2,0.4c-1.1,0.3-2,1-2.7,1.9c-0.7,1-1.1,2-1.4,3.2c-0.2,1.4-0.4,2.8-0.4,4.2\"\n   \"l0.2,50c0,1.3,0.1,2.6,0.4,3.9c0.2,1,0.6,1.9,1.2,2.6c1.2,1.1,2.8,1.7,4.4,1.6v2.8h-35.7V386c1.9,0.1,3.7-0.8,4.9-2.2\"\n   \"c0.6-0.7,1-1.6,1.2-2.5c0.2-1,0.4-2.1,0.4-3.1v-35.7h-21.9v35.5c0,1.1,0.1,2.2,0.3,3.2c0.2,0.9,0.7,1.7,1.3,2.4\"\n   \"c1.2,1.5,3.1,2.3,5,2.3v2.8h-35.1V386c0.7-0.1,1.4-0.3,2-0.5c0.7-0.4,1.3-0.9,1.9-1.5c0.8-1,1.3-2.2,1.5-3.4\"\n   \"c0.5-1.7,0.7-3.4,0.7-5.1l-0.2-48.1v-1c0-1.2,0-2.4-0.2-3.6c-0.2-0.9-0.6-1.7-1.1-2.4c-0.5-0.7-1.2-1.3-2-1.6\"\n   \"c-0.9-0.3-1.9-0.6-2.8-0.7v-2.8h35.4v2.8c-0.8,0-1.5,0.1-2.3,0.4c-0.9,0.2-1.6,0.8-2.2,1.5c-1.6,2-2.3,4.7-2.3,8.1v7h22v-6.8\"\n   \"c0.1-1.8,0-3.7-0.4-5.5c-0.3-1-0.7-2-1.4-2.8c-0.7-0.7-1.5-1.2-2.5-1.4c-0.5-0.1-1.1-0.2-2-0.4v-2.8h35.5v2.9L343.9,318.1z\",\n   \"M383.2,318.1c-1.1,0.2-2.1,0.5-3.1,0.9c-0.6,0.4-1.2,0.9-1.6,1.5c-0.7,0.9-1.1,2-1.3,3.1\"\n   \"c-0.2,1.5-0.3,3-0.3,4.5v49.5c0,1.3,0.1,2.6,0.4,3.9c0.1,1,0.5,1.9,1.2,2.6c0.6,0.6,1.2,1,1.9,1.4c0.8,0.4,1.6,0.6,2.5,0.5v2.8\"\n   \"h-35.7V386c1.9,0,3.7-0.9,5-2.4c0.6-0.7,1.1-1.5,1.3-2.4c0.2-1.1,0.4-2.1,0.4-3.2v-49.7c0-1.7-0.1-3.3-0.3-5\"\n   \"c-0.2-1.2-0.7-2.3-1.4-3.3c-0.4-0.6-1-1-1.6-1.2c-1.1-0.3-2.1-0.6-3.2-0.7v-2.8h35.8L383.2,318.1L383.2,318.1z\",\n   \"M458.7,318.1l-1.7,0.3c-1,0.3-1.8,0.9-2.5,1.7c-0.9,1.2-1.5,2.6-1.6,4.1c-0.2,1.5-0.3,3-0.4,4.5v49\"\n   \"c0,0.8,0.1,1.7,0.2,2.8c0.1,1,0.4,1.9,0.9,2.7c0.5,0.8,1.2,1.5,2,1.8c0.9,0.5,1.8,0.7,2.8,0.8v2.8h-22.2v-2.8c0.6,0,1.3-0.1,1.9-0.3\"\n   \"c2.4-0.8,3.6-2.8,3.6-6c0-2.1-0.5-4.3-1.6-6.1c-1.1-1.9-2.4-3.7-3.9-5.4l-33.8-39.7l-0.1,49.3c0,1,0.1,2.1,0.3,3.1\"\n   \"c0.2,0.9,0.5,1.7,0.9,2.5c0.4,0.8,1,1.4,1.8,1.8c0.9,0.5,1.8,0.8,2.8,0.9v2.8h-21.4V386c0.6,0,1.3-0.1,1.9-0.3\"\n   \"c0.5-0.1,1-0.4,1.4-0.6c1-0.6,1.7-1.9,2.2-3.9c0.5-2.2,0.7-4.4,0.6-6.7v-46.9c0-1.5-0.1-3-0.3-4.5c-0.1-1.1-0.4-2.1-1-2.9\"\n   \"c-1.1-1.2-2.7-1.9-4.3-2v-2.8h42.1v2.8c-0.5,0-0.9,0.1-1.3,0.4c-0.4,0.3-0.8,0.7-1.1,1.1c-0.4,0.4-0.5,0.9-0.5,1.5\"\n   \"c0,0.8,0.2,1.6,0.6,2.3c0.3,0.5,0.6,1.1,1,1.6l14.8,18.5v-17.6c0-1-0.1-2-0.2-3c-0.3-0.8-0.6-1.6-1.1-2.3c-0.5-0.8-1.2-1.4-2.1-1.8\"\n   \"c-1-0.4-2-0.7-3-0.7v-2.8h22.3L458.7,318.1L458.7,318.1z\",\n   \"M547.5,347c-2,0-3.9,0.9-5.2,2.5c-0.8,0.7-1.3,1.7-1.5,2.7c-0.2,1.2-0.4,2.5-0.4,3.8v24.7\"\n   \"c0.1,0.9,0.4,1.8,0.9,2.6c0.3,0.8,0.9,1.4,1.6,1.8c0.8,0.5,1.7,0.8,2.7,1v2.8h-36.8c-8.8,0-15.8-0.9-21.2-2.6\"\n   \"c-6.6-2.3-12.3-6.4-16.6-11.9c-2.9-3.7-5.2-7.8-6.6-12.3c-1.5-4.4-2.3-9.1-2.3-13.8c0-4.9,0.9-9.7,2.8-14.2\"\n   \"c1.9-4.5,4.8-8.5,8.5-11.6c3.8-3.2,8.1-5.5,12.8-6.9c5.2-1.5,10.5-2.2,15.9-2.2c3.1,0,6,0.2,8.8,0.5s5.9,0.8,9.4,1.6\"\n   \"c1.6,0.3,3.3,0.5,5,0.5c1.5,0.1,2.9-0.2,4.2-0.9c0.8-0.6,1.6-1.4,2.6-2l3,25.3l-1.8,0.9c-0.8-2.4-2.6-5.1-5.4-8.4\"\n   \"c-1.7-2.2-3.9-4-6.3-5.2c-5.2-2.4-9.9-3.7-14-3.7c-6.2-0.1-12,3-15.2,8.2c-3.1,4.6-5,10.4-5.7,17.7c-0.1,0.4-0.1,0.9-0.1,1.3v1.5\"\n   \"c-0.1,7.2,1.9,14.2,5.7,20.3c4.4,7.1,10.2,10.7,17.4,10.7c3.2,0,5.6-1,7-3c1.4-2,2-4.4,1.9-6.9v-17.6c0.1-1.2,0-2.3-0.4-3.5\"\n   \"c-0.2-0.7-0.6-1.3-1.2-1.8c-1-1.1-2.4-1.7-3.8-1.6h-1.2v-2.8h35.3L547.5,347L547.5,347z\",\n   \"M620,365.2c0,5.8-2.4,11.4-6.6,15.4c-4.1,3.7-9,6.5-14.4,8.1c-4.5,1.5-9.2,2.3-14,2.4c-4,0-8.1-0.3-12.1-0.9\"\n   \"c-4.5-0.5-9.1-1.2-13.7-1.7c-0.5,0-1,0-1.5,0.1c-0.5,0.1-1,0.3-1.5,0.6l-1.7,1.1l-2.8-30.5l2.7-0.3c0.3,2.1,1,4.1,1.8,6\"\n   \"c1.1,2.9,2.7,5.5,4.8,7.8c2.6,2.8,5.7,4.9,9.2,6.3c3.3,1.4,6.9,2.2,10.5,2.2c3.3,0.1,6.7-0.7,9.5-2.5c2.6-1.5,4.3-4,4.9-6.9\"\n   \"c0.1-0.6,0.2-1.2,0.2-1.8c0-1.7-0.5-3.4-1.6-4.8c-1.1-1.4-2.6-2.4-4.2-2.9l-19.4-6.4c-4.7-1.6-8.3-3.8-10.9-6.8\"\n   \"c-2.9-3.3-4.4-7.5-4.3-11.9c-0.1-6.3,2.7-12.3,7.5-16.3c4.5-3.9,10.3-6.7,17.6-8.2c1.8-0.4,3.7-0.5,5.6-0.5c2.9,0,5.7,0.3,8.5,0.9\"\n   \"c3.1,0.6,6.4,1.3,9.7,1.9c0.3,0,0.6,0,0.8-0.1c1.2-0.3,2.3-0.7,3.4-1.3l2-1.2l2.5,23.9l-2.7,0.8c-0.4-1.2-0.9-2.3-1.5-3.4\"\n   \"c-1.5-3.1-3.7-5.8-6.4-7.9c-2-1.3-4.1-2.4-6.4-3.1c-2.2-0.8-4.6-1.2-7-1.2c-1.7,0-3.4,0.3-5,0.9c-1.4,0.6-2.5,1.6-3.2,2.8\"\n   \"c-0.4,0.7-0.7,1.4-0.9,2.1c-0.4,1-0.5,2.1-0.5,3.1c0,1.6,0.6,3.2,1.7,4.3c1.9,1.8,4.3,3.2,6.9,3.9l17.7,5.7\"\n   \"c4.3,1.3,8.1,3.8,10.9,7.3C618.8,356.1,620.2,360.6,620,365.2z\",\n};\n\n// Original bounding box, not needed as we recalculate\n// vec2(57.700008, 218.299988) vec2(775.000000, 391.100006)\n\n// These need to added in by hand\n//rect x=\"57.8\" y=\"190.4\" class=\"st0\" width=\"717.2\" height=\"8.6\"\n//rect x=\"57.8\" y=\"364.2\" class=\"st0\" width=\"125\" height=\"8.6\"\n//rect x=\"635.6\" y=\"364.2\" class=\"st0\" width=\"139.4\" height=\"8.6\"\n\ntypedef unsigned int uint;\n\nvec2 poffset;\nfloat pscale;\nuvec2 fixed(vec2 p) {\n  vec2 p0 = p;\n  p -= poffset;\n  p /= pscale;\n  p *= 65535.0;\n  uvec2 n = uvec2(p);\n  if (n.x >= 65536 || n.y >= 65536) fprintf(stderr,\"%u %u %g %g\\n\",n.x,n.y,p0.x,p0.y);\n  assert(n.x < 65536);\n  assert(n.y < 65536);\n  return n;\n}\n\nvoid dopath(const char *s, std::vector<float> &pathdata) {\n  while (*s != 0) {\n    if (*s == '-' || isdigit(*s)) {\n      char *t = 0;\n      float x = strtod(s,&t);\n      pathdata.push_back(x);\n      s = t;\n    } else {\n      if (isalpha(*s)) {\n        pathdata.push_back(float(*s));\n      }\n      s++;\n    }\n  }\n}\n\nuint encode(uint a, uint b) {\n  assert(a < (1<<16));\n  assert(b < (1<<16));\n  return (a<<16) | b;\n}\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\nconst int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\nconst int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\nconst int CHAR_P = 80;\n// const int CHAR_Q = 81;\n// const int CHAR_R = 82;\nconst int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\nconst int CHAR_V = 86;\n// const int CHAR_W = 87;\n// const int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nconst int CHAR_c = CHAR_C + 32;\nconst int CHAR_l = CHAR_L + 32;\nconst int CHAR_h = CHAR_H + 32;\nconst int CHAR_p = CHAR_P + 32;\nconst int CHAR_s = CHAR_S + 32;\nconst int CHAR_v = CHAR_V + 32;\nconst int CHAR_z = CHAR_Z + 32;\n\n// Inverse function, useful for debugging\nuint getdata(int i, const std::vector<uvec4> &data) {\n  uvec4 v = data[i/8];\n  i %= 8;\n  uint t = v[i/2];\n  i %= 2;\n  return (t >> (1-i)*16) & 0xffffu;\n}\n\nvec2 getpos(const std::vector<float> &pathdata,int i) {\n  return vec2(pathdata[i],pathdata[i+1]);\n}\n\n// Encode \"instruction\"\nuint instr(int drawtype, int nargs, int count = 0) {\n  assert(drawtype >= 0 && drawtype < 8);\n  assert(nargs >= 0 && nargs < 4);\n  assert(count >= 0 && count < (1<<11));\n  uint i = (drawtype << 13)|(nargs << 11)|count;\n  //fprintf(stderr,\"%d %d %d: %04x\\n\", drawtype, nargs, count, i);\n  //fprintf(stderr,\"%d %d %d\\n\", i>>13, (i>>11)&3,i&((1<<11)-1));\n  return i;\n}\n\nvoid append(std::vector<uint> &data,vec2 p) {\n  uvec2 n = fixed(p);\n  data.push_back(n.x);\n  data.push_back(n.y);\n}\n\nvoid docubic(std::vector<uint> &data, vec2 &minbox, vec2 &maxbox, vec2 p0, vec2 p1, vec2 p2) {\n  minbox = min(minbox,p0);\n  maxbox = max(maxbox,p0);\n  minbox = min(minbox,p1);\n  maxbox = max(maxbox,p1);\n  minbox = min(minbox,p2);\n  maxbox = max(maxbox,p2);\n  data.push_back(instr(1,3,0));\n  append(data,p0);\n  append(data,p1);\n  append(data,p2);\n}\n\nvoid doline(std::vector<uint> &data, vec2 &minbox, vec2 &maxbox, vec2 p0) {\n  minbox = min(minbox,p0);\n  maxbox = max(maxbox,p0);\n  data.push_back(instr(2,1,0));\n  append(data,p0);\n}\n\nvoid domove(std::vector<uint> &data, vec2 &minbox, vec2 &maxbox, vec2 p0) {\n  minbox = min(minbox,p0);\n  maxbox = max(maxbox,p0);\n  data.push_back(instr(3,1,0));\n  append(data,p0);\n}\n\nvec2 tminbox = vec2(1e8), tmaxbox = vec2(-1e8); // Total bounding box\nint tsegcount = 0;\nvoid analyse(const std::vector<float> &pathdata, std::vector<uint> &data) {\n  int pathstart = data.size();\n  for (int i = 0; i < 5; i++) data.push_back(0); // Placeholder for instr + bounding box\n  vec2 p = vec2(0), p0,p1,p2,pstart;\n  vec2 minbox = vec2(1e8), maxbox = vec2(-1e8); // Path bounding box\n  int segcount = 0;\n  for (int i = 0; i < int(pathdata.size()); ) {\n    segcount++; tsegcount++;\n    uint c = uint(pathdata[i++]);\n    assert(c > 0 && c < 256);\n    switch(int(c)) {\n    case CHAR_M:\n      p = getpos(pathdata,i);\n      pstart = p;\n      domove(data,minbox,maxbox,p);\n      i += 2;\n      break;\n    case CHAR_c:\n      p0 = p+getpos(pathdata,i);\n      p1 = p+getpos(pathdata,i+2);\n      p2 = p+getpos(pathdata,i+4);\n      docubic(data,minbox,maxbox,p0,p1,p2);\n      p = p2;\n      i += 6;\n      break;\n    case CHAR_C:\n      p0 = getpos(pathdata,i);\n      p1 = getpos(pathdata,i+2);\n      p2 = getpos(pathdata,i+4);\n      docubic(data,minbox,maxbox,p0,p1,p2);\n      p = p2;\n      i += 6;\n      break;\n    case CHAR_l:\n      p0 = p+getpos(pathdata,i);\n      doline(data,minbox,maxbox,p0);\n      p = p0;\n      i += 2;\n      break;\n    case CHAR_L:\n      p0 = getpos(pathdata,i);\n      doline(data,minbox,maxbox,p0);\n      p = p0;\n      i += 2;\n      break;\n    case CHAR_s:\n      // Do this properly!\n      p1 = p+getpos(pathdata,i);\n      p2 = p+getpos(pathdata,i+2);\n      //docubic(p0,p1,p2);\n      doline(data,minbox,maxbox,p2);\n      p = p2;\n      i += 4;\n      break;\n    case CHAR_S:\n      assert(false);\n      break;\n    case CHAR_h:\n      p0 = p+vec2(pathdata[i],0);\n      doline(data,minbox,maxbox,p0);\n      p = p0;\n      i += 1;\n      break;\n    case CHAR_H:\n      p0 = vec2(pathdata[i],p.y);\n      doline(data,minbox,maxbox,p0);\n      p = p0;\n      i += 1;\n      break;\n    case CHAR_v:\n      p0 = p+vec2(0,pathdata[i]);\n      doline(data,minbox,maxbox,p0);\n      p = p0;\n      i += 1;\n      break;\n    case CHAR_V:\n      p0 = vec2(p.x,pathdata[i]);\n      doline(data,minbox,maxbox,p0);\n      p = p0;\n      i += 1;\n      break;\n    case CHAR_z:\n      p0 = pstart;\n      doline(data,minbox,maxbox,p0);\n      p = p0;\n      break;\n    default:\n      assert(c == 0u);\n      break;\n    }\n  }\n  tminbox = min(tminbox,minbox);\n  tmaxbox = max(tmaxbox,maxbox);\n  int nitems = data.size()-pathstart-5;\n  std::cerr << nitems << \" \" << segcount << \" \" << minbox << \" \" << maxbox << \"\\n\";\n  data[pathstart+0] = instr(4,2,nitems);\n  uvec2 umin = fixed(minbox);\n  uvec2 umax = fixed(maxbox);\n  data[pathstart+1] = umin.x;\n  data[pathstart+2] = umin.y;\n  data[pathstart+3] = umax.x;\n  data[pathstart+4] = umax.y;\n}\n\nvoid dorect(std::vector<uint> &data, float x, float y, float w, float h) {\n  vec2 minbox = vec2(x,y);\n  vec2 maxbox = vec2(x+w,y+h);\n  tminbox = min(tminbox,minbox);\n  tmaxbox = max(tmaxbox,maxbox);\n  int pathstart = data.size();\n  data.push_back(0);\n  append(data,minbox);\n  append(data,maxbox);\n  data.push_back(instr(3,1,0));\n  append(data,vec2(x,y));\n  data.push_back(instr(2,1,0));\n  append(data,vec2(x+w,y));\n  data.push_back(instr(2,1,0));\n  append(data,vec2(x+w,y+h));\n  data.push_back(instr(2,1,0));\n  append(data,vec2(x,y+h));\n  data.push_back(instr(2,1,0));\n  append(data,vec2(x,y));\n  data[pathstart] = instr(4,2,data.size()-pathstart-5);\n}\n\nint main() {\n  std::vector<uint> data;\n  std::vector<float> pathdata;\n  int N = sizeof(pathstrings)/sizeof(pathstrings[0]);\n  for (int j = 0; j < 2; j++) {\n    // Do this twice, the first time gets the correct bounding box\n    // for the second time.\n    std::cerr << tminbox << \" \" << tmaxbox << \"\\n\";\n    data.clear();\n    for (int i = 0; i < N; i++) {\n      dopath(pathstrings[i],pathdata);\n      analyse(pathdata, data);\n      pathdata.clear();\n    }\n    dorect(data,57.8,190.4,717.2,8.6);\n    dorect(data,57.8,364.2,125,8.6);\n    dorect(data,635.6,364.2,139.4,8.6);\n\n    data.push_back(0); // Zero terminate commands\n    while (data.size()%8 != 0) data.push_back(0); // And pad\n\n    // Now pack into uvec4 format\n    vec2 dims  = tmaxbox - tminbox;\n    pscale = max(dims.x,dims.y);\n    poffset = tminbox;\n    if (dims.x > dims.y) poffset.y -= 0.5*(dims.x-dims.y);\n    else poffset.x -= 0.5*(dims.y-dims.x);\n  }\n  int datasize = data.size();\n\n  std::vector<uvec4> vdata;\n  for (int i = 0; i < datasize; i += 8) {\n    vdata.push_back(uvec4(encode(data[i+0],data[i+1]),\n                          encode(data[i+2],data[i+3]),\n                          encode(data[i+4],data[i+5]),\n                          encode(data[i+6],data[i+7])));\n  }\n  int vdatasize = vdata.size();\n  vec2 tdims = (tmaxbox-tminbox)/pscale;\n  printf(\"const vec2 datadims = vec2(%g,%g);\\n\",tdims.x,tdims.y);\n  printf(\"const uvec4 data[] = uvec4[](\\n\");\n  for (int i = 0; i < vdatasize; i++) {\n    printf(\"  uvec4(0x%08xu,0x%08xu,0x%08xu,0x%08xu)%s\\n\",\n           vdata[i][0],vdata[i][1],vdata[i][2],vdata[i][3],\n           i == vdatasize-1 ? \"\" : \",\");\n  }\n  printf(\");\\n\");\n  fprintf(stderr,\"vdatasize: %d segments: %d\\n\", vdatasize, tsegcount);\n}\n#endif\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}