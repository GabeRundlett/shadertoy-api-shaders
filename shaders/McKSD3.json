{
    "Shader": {
        "info": {
            "date": "1718084097",
            "description": "Use the mouse\n\ngears ball 3 :[url=https://www.shadertoy.com/view/l3tGzn]https://www.shadertoy.com/view/l3tGzn[/url]\n\nMouse up and down to adjust the angle,\nleft and right to adjust different types of\n\n上下调整经度，左右类型",
            "flags": 0,
            "hasliked": 0,
            "id": "McKSD3",
            "likes": 47,
            "name": "gears ball  2 mouse",
            "published": 3,
            "tags": [
                "mouse",
                "gears",
                "ball",
                "icosahedron",
                "dodecahedron",
                "face",
                "gear",
                "20",
                "12"
            ],
            "usePreview": 0,
            "username": "shadertoyjiang",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "\n// 2024年05月16日 \n// 齿球\n\n\nbool reflectingScene = true;\n\n\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI    3.14159265358979\n#define PI2   6.28318530717957\nfloat mclr, rshl=.9;\nint obj;\n\nmat3 rot3(vec3 n, float a)\n{\n        n = normalize(n);\n        float s = sin(a), c=cos(a), e=1.-c,\n              x = n.x, y = n.y, z = n.z;\n        return mat3( e*x*x+c,   e*y*x-z*s, e*z*x+y*s,\n                     e*x*y+z*s, e*y*y+c,   e*z*y-x*s,\n                     e*x*z-y*s, e*y*z+x*s, e*z*z+c );\n}\n\n// 光滑\nfloat smin(float a, float b, float k){float h = clamp(.5+.5*(a-b)/k, 0., 1.);return mix(a, b, h) - k * h*(1.-h);}\nfloat smax(float a, float b, float k){return smin(a, b, -k);}\n\nfloat d12g(vec3 p, vec3 a)\n{\n        vec3 q = p, e = vec3(1), n = normalize(cross(e,a));\n        float mx,vnu,x,y,d1,d2,d3;\n        for(int i;i++<3;q=q.yzx)\n        {\n                vnu = dot(q, a);\n                if(vnu>mx)mx=vnu, p = q;\n        }\n        y = dot(p,n);\n        x = length(p-y*n)-rshl;\n        vec2 rct = vec2(x,y), f = vec2(.052,.03);\n        d1 = length(max(abs(rct)-f, 0.))-.01;\n        e=normalize(e);\n        y = dot(p,e);\n        x = length(p-y*e)-.1;\n        d3=abs(length(p)-rshl-.02)-.05;\n        d2=smax(x, d3,.01);\n        return smin(d1,d2,.05);\n}\n\n\nfloat chi(vec3 p)\n{\n        mclr=0.;\n        if(length(p)>1.15)return length(p)-1.1;\n        int num, num2;\n        \n        obj=0;\n        \n        \n        float av, af,\n              df = sqrt(5.)*.5+.5,\n              xf = sqrt(5.)*.5-.5;\n        vec3 e = vec3(1),\n             a = vec3(0, xf, df),\n             b = vec3(xf, df, 0),\n             nv = normalize(e),\n             ne = normalize(a+e),\n             nf = normalize(cross(e-b,e-a)),\n             n = normalize(e-a);\n        \n        vec3 vx = nf-nv, \n             vz = normalize(cross(vx, nv)),\n             fx = nv-nf,\n             fz = normalize(cross(fx, nf));\n             vx = normalize(cross(nv, vz));\n             fx = normalize(cross(nf, fz));\n     \n        float dpz=dot(p, vec3(nv.xy,nv.z)  );\n        vec3 tq=p;\n        for(int i;i++<9;n=n.yzx){\n                if(dot(p, n)<0.)p=reflect(p, n),num++;}\n                \n        float shl = d12g(p,a);\n        \n        vec3 tv = vec3(dot(p, vx), dot(p, nv), dot(p, vz)),tf;\n        av =  atan(tv.z, tv.x);\n        \n        float mi=-1e8,md,mv,mf=-1e8; vec3 mp;\n        \n        for(float i;i<3.;i++)\n        {\n                md = dot(p, nf);\n                if(mf<md)\n                {\n                        mf=md;\n                        mi=i;\n                        mp = p;\n                }\n                p=p.zxy;\n        }\n        p = mp;\n        tf = vec3(dot(p, fx), dot(p, nf), dot(p, fz));\n        af = -atan(tf.z, tf.x);\n        float nu = float(num%2); \n        if(nu>.5)\n        {\n              av=PI2/3.*0.-av, \n              af=PI2/5.*0.-af;\n        }\n        else\n        {\n              //av-=0.*PI2/3.;\n        }\n        \n        av-=(float(num))* PI2/3.;\n        af+=float(num)*PI2/5. ;\n        \n        // 求解齿轮半径\n        float rp = 1., avf, r;\n        avf = acos(dot(nv, nf));\n        r = rp * tan(avf/2.);\n        \n        vec2 rvf = vec2(length(tv.xz), length(tf.xz))-r+.08;  \n        vec2 hvf = vec2(tv.y, tf.y)-rp;\n        vec2 mvf = vec2(length(vec2(rvf.x,hvf.x)),length(vec2(rvf.y,hvf.y))) -.05;\n        mvf -= .05*(.5-.5*sin(30.*(vec2(av,af)+iTime*.9))*vec2(1,-1));// 15 30 45 60 75 90\n        \n        mvf = max(mvf, abs(hvf)-.02); // 压扁\n        mvf = max(mvf, max(-rvf, 0.)-.03); // 挖轮心\n        mvf = min(mvf, max( //轴套\n                  abs(hvf)-.04 ,\n                  rvf +.2\n              ));\n               \n        vec2 dgan=max(rvf+r-.12,   length(p)-rp-.05);\n        if(dgan.y<mvf.y || dgan.x<mvf.x)obj=4;\n        mvf = min(mvf, dgan);\n        // 不连心\n        mvf.x=max(mvf.x, (rshl+.0-length(p))+.0);\n                             \n        // 球\n        float knr = smin(  max(rvf.y+r-.15,   length(p)-.6) , length(p)-.3,.3);\n        if(knr<mvf.y)obj=2;\n        mvf.y = min(mvf.y,  knr );\n        \n        float aa = 5.*(af+iTime*.9); // 5 10 15 20\n        \n        float r1=length(tf.xz)-r+.08;\n        float d1=length(vec2(tf.y-rp, (.5+.5*sin(aa))*(.2+rvf.y)))-.0315; // 1736  .1 .05\n        \n        float lf = max(r1,d1); // 五辐条\n        \n        float ab = 6.*(av+iTime*.9);  // 设置成15不会碎裂，角度折叠规律还没理解  3 6 9 12 15         .2+rvf.x   -.003\n        \n        float r2=length(tv.xz)-r+.08;\n        float d2=length(vec2(tv.y-rp, .0+(.5+.5*cos(ab))*(.1-abs(rvf.x))))-.008; // 1736  .1 .05\n        float lv= max(d2,r2); // 六福条\n               \n        float ln = min(lf,lv);\n        \n        ln = smin( min(mvf.x, mvf.y) , ln, .01);\n        ln=max(ln,length(p)-rp-.06);// 倒角\n        if(shl<ln)obj=1;\n        return min(ln,shl);\n}\n\nfloat map(vec3 p)\n{\n        float t ; \n        float d=   p.y+1.3,d2;\n        obj=0;\n        if(length(iMouse)<10. || mod(iMouse.x/iResolution.x*4.,2.)<1. )t=iTime;\n        d= 99.3-length(p-vec3(0, 98,8));\n        \n        p=rot3(vec3(1,0,0),(length(iMouse)>2.?iMouse.y/iResolution.y-.5:0.)*3.5)*p;\n        p=rot3(vec3(0,1,0), t*.2)*p;\n        p=rot3(vec3(1,0,0),PI/4.)*p;\n        p=rot3(vec3(0,1,0),-PI/4.)*p;\n        \n        d2=chi(p);\n        \n        if(d<d2)obj=3;\n        return min(d2, d);\n}\n\nfloat softshadow(vec3 ro, vec3 rd)\n{\n   float res = 1., k= 8.;\n   float t;\n   for(int i =0;i<256 && t<2.;i++)\n   {\n               float h = map(ro + rd * t);\n               if(h<.001)return 0.;\n               res = min(res, k*h/t);\n               t += h;\n   }\n   return res +.5;\n}\n\n\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n        O = vec4(.5);\n        vec2 R = iResolution.xy,\n             u = (U+U - R) / R.y;\n        vec3 eye = vec3(0, 0, -2),\n             dir = normalize(vec3(u, 1.5)),\n             sun = 5. * ( .2*cos(iTime*0.+12.6+vec3(7,11,13)) + vec3(-1,2,-3)/3.74 ),\n             eps = vec3(0, .0001, 0),\n             nor, p;\n        float d , t;\n        for(int i; i++<228 && t< 12.;)\n        {\n                p = eye + dir * t;\n                d = map(p);\n                if( d<.003 )\n                {       // phong 光照模型\n                        float shd = .05+.95*softshadow(p-dir*.1, normalize(sun-p));\n                        nor = normalize(vec3(map(p+eps.yxx), map(p+eps), map(p+eps.xxy))-d); \n                        vec3  sp = normalize(sun-p), ep=normalize(eye-p);\n                        float ln = max(0., dot(nor,sp)),               // light norm\n                              er = max(0., dot(ep, reflect(-sp,nor))); // eye ray\n                        float ambt=.3, difu=.6, spec=88.;\n                        vec4  Clr=vec4(1);\n                        if(iMouse.x < iResolution.x/2.)\n                        {\n                                if(iMouse.y<iResolution.y/2.){\n                                Clr = vec4(2,.5,0,1)* .8;//,.6,.5,1);\n                                if(obj==1)Clr=vec4(0,.5,1,1);\n                                if(obj==2)Clr=vec4(.15,.6,.1,1);\n                                if(obj==4)Clr = vec4(2);\n                                if(obj==3)Clr = vec4(4,6,9,0)*.1+shd*.4;//地面  .03 .4\n                                }else{\n                                Clr =(iMouse.y/iResolution.y>1.-.1 ? 6.*p.xyyy:O*0.)+ .3/vec4(.15, .1, 1.8, 1)* .8;//,.6,.5,1);\n                                if(obj==1)Clr=vec4(0,.5,1,1);\n                                if(obj==2)Clr=vec4(5.15,.6,.1,1);\n                                if(obj==4)Clr = vec4(2);\n                                if(obj==3)Clr = vec4(.4,6,9,0).zxxx*.1+shd*.8;//地面\n                                }\n                        \n                        \n                        }\n                        O = Clr * (ambt*.05 + difu*ln*.3 +pow(er, 4.) + pow(er, spec));\n                        // 大绿\n                        O += vec4(-mclr, mclr*.0002, 0, 0);\n                        \n                        \n                        \n                        \n  if(reflectingScene==true && iMouse.x/R.x> -.05     && iMouse.y/R.y<.25){                    \n      if(obj!=1)O = O * .4 -.0+ 2. *pow(texture(iChannel0, reflect(-ep, nor))  *  pow(max(dot((ep+normalize(sun-p))/2.,nor) ,0.), 1.) ,vec4(4.))       +.01,                    \n      O*=clamp(3. +.8* Clr,0.,2.);         \n      \n      //O = O*.4+texture(iChannel0,    reflect(-ep, nor))* dot((ep+normalize(sun-p))/2.,nor) ;           \n      //if(obj==3)O= sqrt(O.wxxw)-.01; // xxx green\n      O*=O+.2;\n      if(obj==3)O= sqrt(O);\n  }                      \n                        O *= shd;//+pow(1.-shd,2.);               \n                        \n                        O=sqrt(O);       \n                        break;\n                }\n                t += d * .6 ;\n        }\n        if(length(U-iMouse.xy)/iResolution.y<.1){\n        if(abs(U.y-iMouse.y)<2.)O=vec4(0,0,1,1);\n        if(abs(U.x-iMouse.x)<2.)O=vec4(0,0,1,1);}\n        if(obj==3)  O.rgb *= exp( .2 *  length(eye-p)),O=min(O ,1.)*.5;// * .8;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}