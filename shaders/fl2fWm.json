{
    "Shader": {
        "info": {
            "date": "1727888602",
            "description": "More colorful bubbles",
            "flags": 0,
            "hasliked": 0,
            "id": "fl2fWm",
            "likes": 2,
            "name": "CoLOR DOTS",
            "published": 3,
            "tags": [
                "circles",
                "color",
                "bubbles"
            ],
            "usePreview": 0,
            "username": "rogo1965",
            "viewed": 91
        },
        "renderpass": [
            {
                "code": "\n#define SMOOTH_BOORDER 0.01\n#define PI   3.1415926\n#define PId2 1.5707963\n#define PI2  6.2831853\nint NUMCIRCLES = 206 ;\nfloat  TIME_SCALE = 1.0 ;\nfloat RADIUS = 0.2 ;\n\n\nvec2 random( float x, float y )\n{\n    vec2 K1 = vec2(\n        23.14069263277926, // e^pi (Gelfond's constant)\n         2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)\n    );\n    return abs(fract( vec2(cos( x * K1.x), sin( y * K1.y + 166.6))));\n}\n\nvec2 generateRandomShift(float xSeed, float ySeed, float time, vec2 ratio)\n{\n    return (2.0 *random(ceil(time/PI2) + xSeed, ceil(time/PI2) + ySeed) - 1.0) * ratio;\n}\n\nfloat sinWave01(float time)\n{\n    return 0.5 + 0.5 * sin(time - PId2);\n}\n\nfloat calculateCircle(vec2 uv, float r, float blur)\n{\n    float dist = length(uv);\n    return smoothstep(r + blur, r, dist); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy)/ iResolution.y;\n    \n    vec2 ratio = iResolution.xy/ iResolution.y;\n        \n    float col;\n    for(int i = 0; i < NUMCIRCLES; ++i)\n    {\n        float timeShift = 2.0*float(i);\n        float time = TIME_SCALE*(iTime + timeShift);\n        vec2 shift =  generateRandomShift(2.0*float(i), float(i + 56), time, ratio);\n        col += calculateCircle(uv - shift, RADIUS * sinWave01(time), SMOOTH_BOORDER) * \n                              (1.0 - sinWave01(time)); \n    }\n    \n    vec3 sincol = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //fragColor = vec4(uv, 0.0, 1.0);\n    fragColor = vec4(sincol * (clamp(col, 0.0, 1.0)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}