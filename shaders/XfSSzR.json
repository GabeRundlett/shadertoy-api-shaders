{
    "Shader": {
        "info": {
            "date": "1707246119",
            "description": "cubes are rotating",
            "flags": 0,
            "hasliked": 0,
            "id": "XfSSzR",
            "likes": 3,
            "name": "Cube Rotation Thing",
            "published": 3,
            "tags": [
                "cubesrotating"
            ],
            "usePreview": 0,
            "username": "bnog434",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "//constants\nvec3 CAMERA = vec3(0., 0., 100.);\nfloat MAX_DEPTH = 2000.;\nint MAX_STEPS = 255;\nvec3 LIGHT_SOURCE = vec3(0., 100., 100.);\nfloat PRECISION = 0.001;\nfloat LIGHT_SIZE = 1. / 384.;\n\n//creates Surface class\nstruct Surface{\n    float sd;\n    vec3 col;\n};\n\n//universal rotation\nmat3 rot3D(float x, float y, float z){\n    return mat3(\n        vec3(\n            cos(y) * cos(z),\n            sin(x) * sin(y) * cos(z) - cos(x) * sin(z),\n            cos(x) * sin(y) * cos(z) + sin(x) * sin(z)\n        ),\n        vec3(\n            cos(y) * sin(z),\n            sin(x) * sin(y) * sin(z) + cos(x) * cos(z),\n            cos(x) * sin(y) * sin(z) - sin(x) * cos(z)\n        ),\n        vec3(\n            -sin(y),\n            sin(x) * cos(y),\n            cos(x) * cos(y)\n        )\n    );\n}\n\n//normal union\nSurface Union(Surface a, Surface b){\n    if(a.sd < b.sd){\n        return a;\n    }\n    return b;\n}\n\n//normal intersect\nSurface Intersect(Surface a, Surface b){\n    a.sd = -a.sd;\n    if(a.sd > b.sd){\n        return a;\n    }\n    return b;\n}\n\n//normal subtract\nSurface Subtract(Surface a, Surface b){\n    if(a.sd > b.sd){\n        return a;\n    }\n    return b;\n}\n\n//maps box\nSurface sdfBox(vec3 p, vec3 b, vec3 offset, mat3 trans, vec3 col){\n    p = (p - offset) * trans;\n    vec3 q = abs(p) - b;\n    float d = length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n    return Surface(d, col);\n}\n\n//maps sphere\nSurface sdfSphere(vec3 p, float r, vec3 offset, vec3 col){\n    p = p - offset;\n    float d = length(p) - r;\n    return Surface(d, col);\n}\n\n//maps world\nSurface map(vec3 p){\n    Surface cube1 = sdfBox(p, vec3(25., 25., 25.), vec3(50. * sin(iTime), 0., 0.), rot3D(0., sin(iTime), 0.), vec3(1., 0., 0.));\n    Surface floorBox = sdfBox(p, vec3(1500., 15., 1500.), vec3(0., -200., 0.), rot3D(0., 0., 0.), vec3(0., 1., 1.));\n    Surface sphere1 = sdfSphere(p, 33., vec3(50. * sin(iTime), 0., 0.), vec3(1., 0., 0.));\n    \n    Surface cube2 = sdfBox(p, vec3(25., 25., 25.), vec3(50. * cos(iTime), 0., 0.), rot3D(0., cos(iTime), 0.), vec3(1., 0., 0.));\n    Surface sphere2 = sdfSphere(p, 33., vec3(50. * cos(iTime), 0., 0.), vec3(1., 0., 0.));\n    \n    Surface cube3 = sdfBox(p, vec3(25., 25., 25.), vec3(50. * -sin(iTime), 0., 0.), rot3D(0., -sin(iTime), 0.), vec3(1., 0., 0.));\n    Surface sphere3 = sdfSphere(p, 33., vec3(50. * -sin(iTime), 0., 0.), vec3(1., 0., 0.));\n    \n    Surface cube4 = sdfBox(p, vec3(25., 25., 25.), vec3(50. * -cos(iTime), 0., 0.), rot3D(0., -cos(iTime), 0.), vec3(1., 0., 0.));\n    Surface sphere4 = sdfSphere(p, 33., vec3(50. * -cos(iTime), 0., 0.), vec3(1., 0., 0.));\n    \n    Surface cubeThing1 = Intersect(sphere1, cube1);\n    Surface cubeThing2 = Intersect(sphere2, cube2);\n    Surface cubeThing3 = Intersect(sphere3, cube3);\n    Surface cubeThing4 = Intersect(sphere4, cube4);\n    Surface cubeThing = Union(cubeThing1, Union(cubeThing2, Union(cubeThing3, cubeThing4)));\n    \n    return Union(cubeThing, floorBox);\n}\n\n//calculates a normal vector\nvec3 calcNormal(vec3 p){\n    vec2 e = vec2(1., -1.) * 0.0005;\n    float r = 1.;\n    return normalize(\n        e.xyy * map(p + e.xyy).sd +\n        e.yyx * map(p + e.yyx).sd +\n        e.yxy * map(p + e.yxy).sd +\n        e.xxx * map(p + e.xxx).sd);\n}\n\n//shadow function\nfloat shadow(vec3 ro, vec3 rd){\n    float res = 1.;\n    float ph = 1e20;\n    float depth = 0.;\n    \n    for(int i = 0; i < MAX_STEPS && depth < MAX_DEPTH; i++){\n        float h = map(ro + rd * depth).sd;\n        if(h < PRECISION){\n            return 0.;\n        }\n        float y = h * h / (2. * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, d / (LIGHT_SIZE * max(0., depth - y)));\n        ph = h;\n        depth += h;\n    }\n    return res;\n}\n\n//ray marching function\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = 0.;\n  Surface co;\n\n  for (int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = map(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DEPTH) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //coordinates (adjusted)\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.);\n    \n    //ray origin\n    vec3 ro = CAMERA;\n    \n    //ray direction\n    vec3 rd = vec3(uv, -1.);\n    rd = normalize(rd);\n    \n    //ray marching\n    Surface co = rayMarch(ro, rd);\n    \n    //makes light\n    if(co.sd < MAX_DEPTH){\n        vec3 p = ro + rd * co.sd;\n        vec3 normal = calcNormal(p);\n        vec3 lightDirection = normalize(LIGHT_SOURCE - p);\n        float dif = clamp(dot(normal, lightDirection), 0., 1.);\n        \n        vec3 shadowRO = p + normal * PRECISION * 2.;\n        float shadowRayLength = shadow(shadowRO, lightDirection);\n        if(shadowRayLength < length(LIGHT_SOURCE - shadowRO)) dif *= shadowRayLength;\n        \n        col = co.col * vec3(dif);\n    }\n    else{\n        col = vec3(0.3);\n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}