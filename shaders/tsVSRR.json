{
    "Shader": {
        "info": {
            "date": "1573268800",
            "description": "All possible cubic equations can be mapped to volume of a finite box. Blue: complex solutions. Yellow: real solutions Isolines indicate discriminant.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsVSRR",
            "likes": 8,
            "name": "All possible cubics",
            "published": 3,
            "tags": [
                "3d",
                "mapping",
                "cubic",
                "polynomial"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 885
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//-------------------------------------------------------\n\n// For a point p in the unit box, return a color\n// based on the solutions of the associated cubic\n// polynomial. The point p is interprested as the \n// 3 polar angles of a 4D point in a unit sphere,\n// and that 4D point maps to a unique cubic\n// polynomials a,b,c,d coefficients.\nvec3 getColor( in vec3 pb ) // p is in -1..1\n{\n    vec3 col = vec3(0.0);\n    float m = 0.0;\n\n    \n    //-------------------------------------------------------\n    \n    // convert from box space to cannoincal 0..1\n    pb = 0.5 + 0.498*pb/vec3(1.0,1.0,2.0); \n    \n    pb += vec3(0.5,0.5,0.5);\n    \n    // convert to 4D polar coordinates with radius=1\n    pb *= vec3(3.141593,3.141593,6.283185);\n    \n    // convert to cartesian 4D\n    vec4 ps = vec4( cos(pb.x),\n                    sin(pb.x)*cos(pb.y),\n                    sin(pb.x)*sin(pb.y)*cos(pb.z),\n                    sin(pb.x)*sin(pb.y)*sin(pb.z) );\n    \n    //-----------------------------\n    // make lead coefficient=1\n    ps /= ps.x;\n    \n#if 1\n    //-----------------------------\n    // compute depressed cubic t^3 + pt + q = 0\n    float p = (3.0*ps.z - ps.y*ps.y)/3.0;\n    float q = (2.0*ps.y*ps.y*ps.y - 9.0*ps.y*ps.z + 27.0*ps.w)/27.0;\n    \n    // discriminant\n    float h = -4.0*p*p*p - 27.0*q*q;\n#else    \n    // discriminant\n    float h = 18.0*ps.y*ps.z*ps.w - 4.0*ps.y*ps.y*ps.y*ps.w + ps.y*ps.y*ps.z*ps.z - 4.0*ps.z*ps.z*ps.z - 27.0*ps.w*ps.w;\n#endif    \n    \n    if( h<0.0 )\n    {\n        // 1 real, 2 complex roots. Make it blue, and shade it\n        // based on modulo of the roots\n        m = -h;//length(vec2(-p.y,sqrt(-h)))*0.5/abs(p.x);\n        col = vec3(0.0,0.5,1.0);\n    }\n    else\n    {\n        // 3 real roots. Make it yellow if possitive and\n        // purple is negative, and shader it based on size\n        // of the first root\n        m = h;//1.0;//(-p.y-sqrt(h))*0.5/p.x;\n        col = vec3(1.0,0.5,0.0);// : vec3(1.0,0.0,0.5);\n\t}\n    \n    // discriminant --> geometric mean of root differences\n    h = pow(abs(h),1.0/6.0);\n    col *= 0.7 + 0.3*smoothstep(-0.1,0.1,sin(abs(12.0*h))); // discriminant isolines\n    //col *= h;\n    return col;\n}\n\n//-------------------------------------------------------\n\n// https://iquilezles.org/articles/boxfunctions\nvec4 boxIntersect( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad ) \n{\n    ro -= cen;\n    \n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n\n\treturn vec4( tN, nor );\n}\n\n\n// https://iquilezles.org/articles/boxfunctions\nfloat boxShadow( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad ) \n{\n    ro -= cen;\n\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return -1.0;\n\t\n\treturn tN;\n}\n\nfloat sdBox( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (0.0 - ro.y)/rd.y;\n}\n\n//=====================================================\n\nvec3 plot3D( in vec2 px )\n{\n    vec2 p = (-iResolution.xy + 2.0*px)/iResolution.y;\n\n    // camera\n     // camera movement\t\n\tfloat an = 0.2*iTime;\n\tvec3 ro = vec3( 4.0*cos(an), 4.0, 4.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.5, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    // create view ray\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.2*ww );\n    \n    // sphere\n    //vec3 box = vec3( 1.0 );\n    \n    float h = 0.5+0.49995*sin(1.0*iTime);\n    //h = 1.0;\n    vec3 box_cen = vec3(0.0,h,0.0);\n    vec3 box_rad = vec3(1.0,h,2.0);\n       \n\n    vec3 col = vec3(0.0);\n\n    // intersect geometry\n    float tmin = 1e10;\n    vec3 nor;\n    float occ = 1.0;\n    vec3 mate = vec3(1.0);\n\n    // plane/floor\n    float t1 = iPlane( ro, rd );\n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + t1*rd;\n        nor = vec3(0.0,1.0,0.0);\n        occ = 1.0;//-sphOcclusion( pos, nor, sph );\n        float d = sdBox( pos.xz, box_rad.xz );\n        occ = 0.2 + 0.8*clamp(1.0 - 1.0/(1.0+d*d),0.0,1.0);\n            \n        mate = vec3(0.2);\n    }\n\n    // box\n    vec4 t2 = boxIntersect( ro, rd, box_cen, box_rad );\n    if( t2.x>0.0 && t2.x<tmin )\n    {\n        tmin = t2.x;\n        vec3 pos = ro + t2.x*rd;\n        nor = t2.yzw;\n        occ = 0.2+0.8*clamp(pos.y/2.0,0.0,1.0);\n        mate = getColor(pos);\n\n        // wireframe\n        mate *= 1.0 - (1.0-abs(nor.x))*smoothstep( box_rad.x-0.04, box_rad.x-0.02, abs(pos.x-box_cen.x) );\n        mate *= 1.0 - (1.0-abs(nor.y))*smoothstep( box_rad.y-0.04, box_rad.y-0.02, abs(pos.y-box_cen.y) );\n        mate *= 1.0 - (1.0-abs(nor.z))*smoothstep( box_rad.z-0.04, box_rad.z-0.02, abs(pos.z-box_cen.z) );\n    }\n\n    // apply color and lighting\n    if( tmin<1000.0 )\n    {\n        vec3 pos = ro + tmin*rd;\n\n        vec3 lig = normalize( vec3(0.6,0.2,0.4) );\n\n        float sha = step( boxShadow( pos+0.01*nor, lig, box_cen, box_rad ), 0.0 );\n\n        vec3 lin = vec3(0.0);\n        lin += vec3(1.5)*clamp(dot(nor,lig),0.0,1.0)*sha;\n        lin += 0.5*occ;\n        //lin += 0.5*occ*pow(clamp(1.0+dot(nor,rd),0.0,1.0),3.0);\n\n        col = mate*lin;\n        //col = vec3(occ);\n        //col = mate;\n        // fog\n        col *= exp( -0.05*tmin );\n    }\n    return col;\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   // make this 2 or 3 for antialiasing\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 p = fragCoord + vec2(float(m),float(n))/float(AA)-0.5;\n        #else    \n        vec2 p = fragCoord;\n        #endif\n \n        vec3 col = plot3D(p);\n\n        // gamma correction\n        col = pow(col,vec3(0.4545));\n        \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}