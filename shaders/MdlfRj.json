{
    "Shader": {
        "info": {
            "date": "1517372964",
            "description": "Some 2D city made mostly from sine waves.\n\nMade some months ago, I made it public now, there may be some bugs on some GPUs.\n\nYou should see a train, buildings, stars.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdlfRj",
            "likes": 20,
            "name": "buildings + train",
            "published": 3,
            "tags": [
                "2d",
                "city",
                "train",
                "buildings"
            ],
            "usePreview": 0,
            "username": "antoineMoPa",
            "viewed": 1220
        },
        "renderpass": [
            {
                "code": "uniform float time;\n\n\n#define PI 3.14159265359\n#define PI2 6.28318530718\n\n#define shadertoy 1\n\n#ifdef shadertoy\n#define time iTime\n#endif\n#ifndef shadertoy\nuniform float iTime;\nvarying vec2 UV;\nuniform vec3 iResolution;\n#endif\n\nvec4 buildings(vec2 pos){\n\tvec4 col = vec4(0.0);\n    \n    float roof = 0.1;\n    float bx = pos.x * 20.0;\n    float x = 0.05 * floor(bx - 4.0);\n    // BX = Position relative to building left\n    bx = mod(bx,1.0);\n  \n    // Build pseudorandom rooftop line\n    roof += 0.06 * cos(x * 2.0);\n\troof += 0.1 * cos(x * 23.0);\n\troof += 0.02 * cos(x * 722.0 );\n\troof += 0.03 * cos(x * 1233.0 );\n\t\n    roof += 0.06;\n    \n    if(pos.y < roof && pos.y > 0.0 && bx > 0.1 * cos(20.0 * pos.x)){\n    \tcol.b += 0.4;\n        \n        // Draw windows\n        float window = abs(sin(200.0 * pos.y));\n        window *= abs(sin(20.0 * bx));\n        \n        // type 1 window\n        if(mod(2023.0 * x,2.0) < 0.5){\n          \twindow = floor(1.3 * window);\n        \tcol.rgb += 1.5 * window * vec3(0.9,0.9,0.9);\n        }\n        // type 2 window\n        else if(mod(2983.0 * x,2.0) < 1.3){\n        \tcol.rb += window;\n        }\n        else {\n            if(window > 0.5){\n            \tcol.rg += 0.8;\n           \t}\n        }\n      \tcol.a = 1.0;\n    }\n\n    return col;\n}\n\nvec4 train(vec2 pos){\n\tvec4 col = vec4(0.0);\n    \n    float base = 0.01 * cos(pos.x * 7.0 + time * PI2) + 0.02;\n    \n\n    col.r += base;\n   \t\n    if(pos.y > 0.0){\n        pos.y -= base;\n        // track\n        if(pos.y < 0.01){\n            // Actual track\n            if(pos.y > -0.005){\n                col.rg += 0.1;\n                col.a = 1.0;\n            }\n            // supports\n            else if(cos(4.0 * (pos.x * 7.0 + time * PI2)) < -0.8){\n            \tcol.rg += 0.1;\n                col.a = 1.0;\n            }\n            \n        }\n        // train\n        else if(pos.y < 0.04 && pos.x < 0.3){\n            bool in_y_range = pos.y < 0.02 || pos.y > 0.03;\n              \t\n            if(pos.x < -0.01){\n                // Delimit wagons\n                if(pos.x > -0.02 || cos(pos.x * 100.0) < 0.9){\n\n                    if(pos.y < 0.018 && pos.y > 0.014 && pos.x < -0.02){\n                        col.r += 1.0;\t\n                        col.a = 1.0;\n                    }\n\n                    // windows\n                    else if(!in_y_range && pos.x > 0.01){\n                        col.a = 0.0;\n                    } else if(in_y_range || (cos(pos.x * 400.0) < 0.0) ){\n                        col.rgb += 0.5;\n                        col.a = 1.0;\n                    }\n                }\n            } else if (pos.x < 0.01) {\n                // Front of the train\n                // function: 1-x^3\n                // Make a suitable x and y axis to plot the function\n                float xx = (pos.x + 0.01)/ 0.02;\n                float yy = (pos.y - 0.02) / 0.02;\n                float func = 1.0 - pow(xx, 3.0);\n                \n                if(yy < func){\n                \tcol.rgb += 0.5;\n                    col.a = 1.0;\n                }\n            }\n        }\n    }\n    \n    return col;\n}\n\nvec4 stars(vec2 pos){\n\tvec4 col = vec4(0.0);\n  \tfloat threshold = -0.999;\n\tpos *= 1.0;\n  \tif(1.0 * cos(pos.x * 1000.0) + 1.0 * cos(30000.0 * pos.x + cos(10000.0 * pos.y)) < threshold){\n      \tif(cos(pos.y * 100.0 + 10000.0 * cos(pos.x * 10.0)) < threshold){\n      \t\tcol += 1.0;\n          \tcol.a = 1.0;\n        }\n    }\n  \treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n\tvec4 col = vec4(0.0);\n    \n    vec2 pos = uv - vec2(0.5);\n    \n    pos.y += 0.3;\n    \n    vec2 water = vec2(0.0);\n    \n    // Offset for water waves\n    water.x += 0.003 * cos(pos.y * 150.0 + time * PI2);\n    water.x += 0.001 * cos(pos.y * 250.0 +  time * PI2);\n    water.x += 0.001 * cos(pos.y * 4050.0 + time * PI2);\n    \n    col += 0.6 * buildings(pos + vec2(time * 0.2, 0.0)); // Buildings\n    col += 0.3 * buildings(pos * vec2(1.0, -1.0) + vec2(time * 0.2, 0.0) + water); // Reflection of buildings\n    \n    vec4 t = train(pos);\n    col = t.a * t + (1.0 - t.a) * col; // Train\n    t = train(pos * vec2(1.0, -1.0) + water); // Reflection of train\n    t.a *= 0.3;\n    col = t.a * t + (1.0 - t.a) * col;\n    \n    \n    // Sky + water color\n  \tif(col.a < 0.1){\n        if(pos.y < 0.0){\n            col.b += 0.2;\n        } else {\n            col.rgb += vec3(0.1,0.1,0.3);\n            col += stars(pos);\n        }\n    }\n  \n    // Plane\n    if(pos.x < -0.1 && pos.y > 0.6 && pos.y < 0.602){\n    \tcol.rgb += 0.22 +\n            0.1 * cos(pos.x + iTime) + \n            0.03 * cos(pos.x * 200.0 + 10.0 * iTime);\n    }\n    \n    float d = distance(pos,vec2(-0.1, 0.6));\n    \n    if(d < 0.005){\n    \tcol.r += (1.0 - d/0.01) * (pow(cos(time * PI),30.0)  + 0.5);\n    \tcol.b += (1.0 - d/0.01) * (pow(cos(time * PI + 1.0),30.0)  + 0.5);\n    }\n    \n    col.a = 1.0;\n    \n\tfragColor = col;\n}\n\n#ifndef shadertoy\nvoid main(){\n    vec2 uv = UV * iResolution.xy;\n    vec4 col;\n\n    mainImage(col, uv);\n\n    gl_FragColor = col;\n}\n#endif",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}