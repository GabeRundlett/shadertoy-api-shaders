{
    "Shader": {
        "info": {
            "date": "1582041717",
            "description": "mandelbrot with zoom and AA",
            "flags": 0,
            "hasliked": 0,
            "id": "tldSWl",
            "likes": 0,
            "name": "Mandelbrot Zoom + AA",
            "published": 3,
            "tags": [
                "2d",
                "mandelbrot",
                "animated"
            ],
            "usePreview": 0,
            "username": "draradech",
            "viewed": 54
        },
        "renderpass": [
            {
                "code": "#define ITER 4000.\n#define ESCA 1000.\n#define LOCA vec2(-.74587, .10071)\n\nvoid mandelbrot(out vec4 fragColor, in vec2 fragCoord)\n{\n    // small side is -1.5 to 1.5\n    vec2 uv = 1.5 * (2. * fragCoord - iResolution.xy) / min(iResolution.yy, iResolution.xx);\n    \n    // zoom in x1,000,000 over 60s\n    float fTime = mod(iTime, 60.) / 60.;\n    vec2 c = uv / pow(10., 6. * fTime) + LOCA;\n    \n    // skip M1 and M2 bulb\n    float c2 = dot(c, c);\n    if (  (256. * c2 * c2 - 96. * c2 + 32. * c.x - 3. < 0.)\n       || (16. * c2 + 32. * c.x + 15. < 0.)\n       )\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    // main loop\n    vec2 z = c;\n    vec2 zz;\n    float n;\n    for(n = 0.; n < ITER; n++)\n    {\n        zz = vec2(z.x * z.x, z.y * z.y);\n        if(zz.x + zz.y > ESCA) break;\n        z = vec2(zz.x - zz.y, 2. * z.x * z.y) + c;\n    }\n    \n    // coloration\n    if(n >= ITER)\n    {\n        fragColor = vec4(0);\n    }\n    else\n    {\n        float lzn = log(zz.x + zz.y) / 2.;\n        n -= log(lzn / log(2.)) / log(2.) - 1.;\n        n -= mix(0., 200., pow(fTime, 3.));\n    \tn /= mix(100., 3000., fTime);\n\t    fragColor = min(vec4(pow(n, 1.5), pow(n, .4), pow(n, .2), 1.), 1.);\n    }\n}\n\n#define AA 2.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0);\n    for (float dx = 0.; dx < AA; dx++)\n    {\n        for (float dy = 0.; dy < AA; dy++)\n        {\n            vec2 p = fragCoord + vec2(dx, dy) / AA;\n            vec4 col;\n            mandelbrot(col, p);\n            fragColor += col / AA / AA;\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}