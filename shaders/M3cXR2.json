{
    "Shader": {
        "info": {
            "date": "1724469689",
            "description": "Lattice potential",
            "flags": 0,
            "hasliked": 0,
            "id": "M3cXR2",
            "likes": 0,
            "name": "Lattice Simple",
            "published": 3,
            "tags": [
                "raymarching",
                "diffuse"
            ],
            "usePreview": 0,
            "username": "willwombell",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "// Fork of \"Modular Raymarching Spheres\" by vamoss. https://shadertoy.com/view/ltSSzw\n// 2023-11-28 10:44:42\n\nconst float VERY_LARGE_DISTANCE = 10000.;\nconst int MAX_STEPS = 300;\n\n#define TWO_PI 6.2831852\n#define PHI 1.618033988\n\n#define USHIFT(x) (0.5 + (0.5 * x))\n\n//=====================================================\n//raymarching\n\n#define pMod(a, b) (mod(a,b)-0.5*b)\n\n\n\nfloat fSphere(in vec3 p, in float r) {\n    return length(p)-r;\n}\n\n//=====================================================\n//custom\n\nfloat map1( in vec3 p )\n{\n    return fSphere(pMod(p.xyz, 3.5), 0.0);\n}\n\nfloat map( in vec3 p )\n{\n    return fSphere(pMod(p.xyz, 3.5), 0.0);\n}\n\nfloat intersect( in vec3 ro, in vec3 rd, in vec2 ms )\n{\n\tconst float maxd = VERY_LARGE_DISTANCE;\n\tfloat h = 0.0;\n    float t = 0.0;\n    float c = 0.0;\n    for( int i=0; i<MAX_STEPS; i++ )\n    {\n\t    h = map( ro+rd*t );\n        t += 1.;\n        //c += pow(ms.y, h)/log(1.+pow(t*h, ms.x));\n        c += exp(-h*ms.x);\n    }\n\n    if( t>maxd ) t=-1.0;\n\t\n    return c;\n}\n\nvec3 vintersect( in vec3 ro, in vec3 rd, in vec2 ms )\n{\n\tconst float maxd = VERY_LARGE_DISTANCE;\n\tfloat h = 0.0;\n    float t = 0.0;\n    vec3 c = vec3(0.0);\n    for( int i=0; i<MAX_STEPS; i++ )\n    {\n\t    h = map( ro+rd*t );\n        t += h;\n        c += vec3(1./(ms.y*log(1.+h*pow(t, ms.x))))/cos(1.+abs(ro+rd*t));\n        if (i > int(1000.)) break; \n    }\n\n    if( t>maxd ) t=-1.0;\n\t\n    return c;\n}\n\nvec3 getPosition( float time ) {\n    return vec3(2.5*sin(1.0*time), 0.0, 1.0*cos(1.0*time) );\n}\n\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    \n    vec2 ms = exp(3.*(iMouse.xy)/iResolution.y);//-0.5*iResolution.xy\n    if (iMouse.xy == vec2(0)) ms = vec2(3.,1.);\n    float t = iTime/5.;\n    \n    //camera target\n    vec3 ta = vec3( 45.0, 45.0, 45.0 )*vec3(cos(t),cos(t/PHI),cos(t*PHI));\n    \n    //camera rotation\n    float rotVel = iTime/50.0;//*iMouse.x/iResolution.x;\n    float rotRadius = 30.0;\n    //vec3 ro = vec3( rotRadius*sin(rotVel), 0.5*rotRadius*sin(rotVel), rotRadius*cos(rotVel)) + vec3(0.3);\n    vec3 ro = vec3( rotRadius*sin(rotVel), PHI*rotRadius*sin(rotVel), rotRadius*cos(rotVel)/PHI) + vec3(0.3);\n    \n\t// camera-to-world transformation\n    mat3 ca = setCamera(ro, ta, 0.0);\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n    \n    vec3 col = vec3(1.0);\n    vec3 c = vec3(intersect(ro,rd,2.*ms));\n    //vec3 mods = 2.*vec3(PHI*(ms.x-ms.y), PHI*ms.x, PHI*ms.y);\n    vec3 mods = 2.*vec3(PHI*(ms.x*ms.y), PHI*ms.x, PHI*ms.y);\n    //vec3 mods = 2.*vec3(2.*(ms.x*ms.y), 3.*ms.x, 5.*ms.y);\n    \n    col = USHIFT(sin(c*mods));\n\tfragColor = vec4( col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}