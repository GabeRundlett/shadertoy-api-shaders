{
    "Shader": {
        "info": {
            "date": "1607442378",
            "description": "Learning from art of code videos https://www.youtube.com/watch?v=3CycKKJiwis\n\nMain code is in Buffer A\n\nCommon, Buffer B, Image stages are fork of https://www.shadertoy.com/view/ts2yWm",
            "flags": 96,
            "hasliked": 0,
            "id": "WsKBzG",
            "likes": 38,
            "name": "Plexus 2 (universe within)",
            "published": 3,
            "tags": [
                "plexus"
            ],
            "usePreview": 0,
            "username": "curiouspers",
            "viewed": 2845
        },
        "renderpass": [
            {
                "code": "// Please Enable music on Buffer A iChannel0 (press pause and press play again), idk why it's not playing sometimes\n// If someone knows how to fix this soundcloud issue, please let me know\n// Main code is in Buffer A based on \"Plexus (universe within)\" by BIgWings. https://www.youtube.com/watch?v=3CycKKJiwis\n// Based on this look https://gist.github.com/ylegall/ce09fad5dfea15a46abbe8cf3f47e613\n// Common, Buffer B, Image stages are fork of https://www.shadertoy.com/view/ts2yWm\n// 2020-12-08 21:04:39\n\n// stage 2: \"post\"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // [debugging code]\n    \n    #if 0\n    //  ^ set this to 1 to skip the shader stage\n    fragColor=pow(texelFetch(D,ivec2(fragCoord),0),vec4(1.2));\n    return;\n    #endif\n    \n    // [shadertoy fix-up]\n    \n    P=acos(-1.),T=2.*P;    // calculate pi and tau\n    c=.0*R,m=c;            // init c and m as vec4(0)\n    \n    // ^ Both of these steps are done outside\n    //   the main function in the actual intro.\n\n    // [common code across all stages]\n    \n    vec2 v=gl_FragCoord.xy;  // get short mutable pixel coord\n    r=vec4(v,R.yz);          // init random vector using pixel coord + time\n    S();S();S();S();         //   and hash it 8 times\n    S();S();S();S();         // *shuffle*, *shuffle*, *shuffle*\n\n    float tt=R.z*7./48.,     // current chord playing in the soundtrack\n    w=floor(tt)*step(2.,tt), // camera movement offset\n    z=1.-.3*smoothstep(-.7,.0,-abs(tt-2.1))   // zoom around 00:14\n        +.2*smoothstep(-1.,0.,-abs(tt-20.));  // zoom around 02:17\n    if(tt<8.)z-=pow(tt/8.,48.);               // camera plunge at 00:54\n    \n    // ^ None of these camera specific vars are needed\n    //   in this stage and they are only here for completeness.\n\n    // [stage specific code]\n\n    // get uv\n    v/=R.xy;\n    \n    // calculate bloom\n    for(float a=.0;a<T;a+=.63)\n        c+=max(textureLod(D,v+7.8*pl(a)/R.xy/*+.011*R.xy/R.x*/,5.5)-.06,0.);\n    \n    // ^ The bloom is a simple mipmap blur with circular sampling to make it less blocky.\n    //   The code commented out above is needed in the intro to offset the texel centers\n\t//   from 'lower left corner' (default in OpenGL) to 'center' (used in Shadertoy).\n    //   The constant used for the offset is calculated like this:\n    //   offset = texel_size/2 = pow(2,-mipmap)/2 = 1/(2^6.5) = ~0.0110485\n    \n    // final color\n    c=pow(texture(D,v)+.03*c,vec4(1.1))+.01*(r.x-.5);\n\t//      ^color      ^bloom  ^gamma    ^film noise\n    \n    // [common code across all stages]\n    \n    fragColor=c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Please Enable music on Buffer A iChannel0 (press pause and press play again), idk why it's not playing sometimes\n// If someone knows how to fix this soundcloud issue, please let me know\n// Main code is in Buffer A based on \"Plexus (universe within)\" by BIgWings. https://www.youtube.com/watch?v=3CycKKJiwis\n// Based on this look https://gist.github.com/ylegall/ce09fad5dfea15a46abbe8cf3f47e613\n// Common, Buffer B, Image stages are fork of https://www.shadertoy.com/view/ts2yWm\n// 2020-12-08 21:04:39\n\n//https://www.shadertoy.com/embed/WsKBzG?gui=true&t=1&paused=false&muted=false\n\n#define S(a,b,t) smoothstep(a,b,t)\n#define START_TIME  10. \n\nfloat DistLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length(pa-ba*t);\n}\nfloat N21(vec2 p) {\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.456);\n    return fract(p.x*p.y);\n}\nvec2 N22(vec2 p) {\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\nvec2 GetPos(vec2 id, vec2 offs) {\n    /*\n    vec2 n = N22(id);\n    float x = sin(iTime*n.x);\n    float y = cos(iTime*n.y);    \n    return vec2(x,y)*.4;\n    */\n    // same as above\n    \n    /*vec2 n = N22(id+offs)*(iTime+START_TIME);\n    return offs+sin(n)*.4;*/\n    vec2 n = N22(id+offs)*(iTime+START_TIME);\n    return offs+sin(n)*.4;\n}\nvec2 GetPosNew(vec2 id, vec2 offs) {\n\n    vec2 n = N22(id+offs)*(sin((iTime+START_TIME))*0.5+2.2); // 0.5+1.5 regulates randomness of movements\n    float radial = sin(length(id+offs)-(iTime+START_TIME/2.))*2.;\n    return offs+sin((n*1.2)+vec2(radial,radial))*.4;//+offs+sin(n)*.4; \n\n}\nvec4 Line(vec2 p, vec2 a, vec2 b){\n    float d = DistLine(p,a,b);\n    float m = S(.05, .01, d);\n    float d2 = length(a-b);\n    m *= S(1.5, .8, d2)*.5;\n    vec3 col = mix(vec3(0.38,0.87,1.0), vec3(0.945,0.161,1.000), d2*d2*d2*d2-0.2);\n    \n    return vec4(col,m*1.3);\n}\n\nvec3 Layer(vec2 uv, float fft) {\n    vec3 m = vec3(0.);\n    \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n        \n    // points\n    vec2 p[9];\n    int i = 0;\n    for(float y=-1.; y<=1.; y++) {\n        for(float x=-1.; x<=1.; x++) {\n            p[i++] = GetPosNew(id, vec2(x,y));\n        }        \n    }\n    \n    // light waves\n    float radial = abs( (sin(length(uv)-(iTime+START_TIME/2.))));\n    float depth = fract((uv.y/22.-0.19))*1.5;\n    float r = radial * (1.0-length(uv/20.))*0.5;\n    r = r*r + depth*depth;\n    //m+= r*r;\n    r = radial*0.1*r;//*(uv.y+5.5);;\n    m += r *vec3(1.000,0.561,0.965) *  (fft);\n    \n    // main part\n    float t = iTime*10.;\n    for(int i=0; i<9; i++){\n        vec4 l = Line(gv, p[4], p[i]);\n        m += l.w*l.rgb;\n            \n        vec2 j = (p[i]-gv) * (15. -fft*6.);\n        float sparkle = 1./dot(j,j);\n        \n\n        m += clamp(sparkle*vec3(0.137,0.416,0.482), 0., 1.);// *(sin(t+fract(p[i].x)*10.)*.2+.8)\n    }\n\n    vec4 l = Line(gv, p[1], p[3]);\n    m += l.w*l.rgb;\n    l = Line(gv, p[1], p[5]);\n    m += l.w*l.rgb;\n    l = Line(gv, p[7], p[3]);\n    m += l.w*l.rgb;\n    l = Line(gv, p[7], p[5]);\n    m += l.w*l.rgb;\n    \n    return vec3(m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 gridUv = uv*21.-7.;\n    vec2 mouse = (iMouse.xy/iResolution.xy)-.5;\n    \n\tfloat fft = texture( iChannel0, vec2(0.02,0.25) ).x; \n    fft = (fft == 0.0) ? 0.3 : fft; // dirty hack when music is not playing\n    \n\tvec3 col = Layer(gridUv-mouse, fft)*1.; \n    \n    float gradient = uv.y;\n    vec3 fftcol = normalize(vec3( 4.0*fft*(1.0-fft), 1.0-fft, fft )) ;\n    gradient = gradient*.8- .1;\n    gradient *= fft*1.3;\n    col -= gradient*fftcol*0.2;\n    \n    \n    // test uvs\n    //vec2 gv = fract(gridUv-mouse)-.5;\n    //if (gv.x>0.4||gv.y>0.4) col = vec3(0.122,0.000,0.000);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 24850,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/proswell/103-kschzt-esem-ikiryo"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Please Enable music on Buffer A iChannel0 (press pause and press play again), idk why it's not playing sometimes\n// If someone knows how to fix this soundcloud issue, please let me know\n// Main code is in Buffer A based on \"Plexus (universe within)\" by BIgWings. https://www.youtube.com/watch?v=3CycKKJiwis\n// Based on this look https://gist.github.com/ylegall/ce09fad5dfea15a46abbe8cf3f47e613\n// Common, Buffer B, Image stages are fork of https://www.shadertoy.com/view/ts2yWm\n// 2020-12-08 21:04:39\n\n// shader uniforms \n#define R vec4(iResolution.xy, mod(iTime, 600.), 0)\n#define D iChannel0\n\n// ^ R.w is the shader stage in the actual intro,\n//   so intead of having 3 different shaders (one for each stage),\n//   I only have a single shader which I run in a loop.\n//   This approach makes the framework more compact\n//   and allowes for a lot of minification in the shader.\n\n// global variables\nfloat P,T;   // pi, tau\nvec4 r,c,m;  // random vector, color, mask\n\n// shuffle function\nvoid S()\n{\n    // hash global \"random vector\" variable\n    r=fract(1e4*sin(r)+r.wxyz);\n}\n\n// polar function\nvec2 pl(float a)\n{\n    // angle -> point on unit circle\n    return vec2(cos(a),sin(a));\n}\n\n// rotation functions\nmat3 rx(float a){return mat3(1,0,0,0,cos(a),sin(a),0,-sin(a),cos(a));}\nmat3 ry(float a){return mat3(cos(a),0,sin(a),0,1,0,-sin(a),0,cos(a));}\n\n// 2D hash function\nvec2 H(vec2 p)\n{\n    vec3 r=vec3(p,1);\n    \n    for(int i=0;i<4;i++)\n        r=fract(1e4*sin(r)+r.yzx);\n    \n    return r.xy;\n}\n\n// 2D continuous noise function\nvec2 N(vec2 p)\n{\n    vec2 i=floor(p),f=p-i,o=vec2(0,1);\n    \n    return mix(mix(H(i),\n                   H(i+o),f.y),\n               mix(H(i+o.yx),\n                   H(i+o.y),f.y),f.x);\n}\n\n// 2D continuous perlin noise function\nvec2 pr(vec2 u)\n{\n    vec2 y=.0*u,n=y+2.;\n    \n    for(int i=0;i<8;i++)\n        y+=N(u*n)/n,n*=2.;\n    \n    return y;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Please Enable music on Buffer A iChannel0 (press pause and press play again), idk why it's not playing sometimes\n// If someone knows how to fix this soundcloud issue, please let me know\n// Main code is in Buffer A based on \"Plexus (universe within)\" by BIgWings. https://www.youtube.com/watch?v=3CycKKJiwis\n// Based on this look https://gist.github.com/ylegall/ce09fad5dfea15a46abbe8cf3f47e613\n// Common, Buffer B, Image stages are fork of https://www.shadertoy.com/view/ts2yWm\n// 2020-12-08 21:04:39\n\n// stage 1: \"tracer\"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // [debugging code]\n    \n    #if 0\n    //  ^ set this to 1 to skip the shader stage\n    fragColor=2.*texelFetch(D,ivec2(fragCoord),0);\n    return;\n    #endif\n    \n    #define CUSTOM_SAMPLE_COUNT 20\n    \n    // [shadertoy fix-up]\n    \n    P=acos(-1.),T=2.*P;    // calculate pi and tau\n    c=.0*R,m=c;            // init c and m as vec4(0)\n    \n    // ^ Both of these steps are done outside\n    //   the main function in the actual intro.\n\n    // [common code across all stages]\n    \n    vec2 v=gl_FragCoord.xy;  // get short mutable pixel coord\n    r=vec4(v,R.yz);          // init random vector using pixel coord + time\n    S();S();S();S();         //   and hash it 8 times\n    S();S();S();S();         // *shuffle*, *shuffle*, *shuffle*\n\n    float tt=R.z*7./48.,     // current chord playing in the soundtrack\n    w=1.,//floor(tt)*step(2.,tt), // camera movement offset\n    z=1.;\n\n    // [stage specific code]\n    \n    // sample loop\n    #ifdef CUSTOM_SAMPLE_COUNT\n    for(int i=0;i<CUSTOM_SAMPLE_COUNT;i++)\n    #else\n    for(int i=0;i<200;i++)\n    #endif\n    {\n        // update random vector to keep it random\n        S();\n        \n        \n        \n        // camera movement\n\t\tfloat h=(sin(tt*2.)*0.5+0.5)*0.50,\n              s=-0.5*pow(1.-h,5.5);\n        \n        \n        vec2  f=.02*sqrt(r.z+0.2)*pl(10.0*r.w),             // depth of field\n              u=(v+r.xy+0.5-.74*R.xy)/R.y,            \t\t // pixel uv\n             rv=vec2(-3.6,0.)+pl(R.z/2.).xy/5.; \t\t\t // rotation vector\n        \n        // camera setup\n        mat3 rm=rx(.3*rv.x)*ry(.6*rv.y);        // calculate rotation matrix\n        vec3 o=rm*vec3(z*(.45+0.3*s)*f,-s-1.),           // get camera origin\n             d=rm*normalize(vec3(z*u-f,s+2.) );  // get camera direction\n        \n        // get color from screen\n        c+=texelFetch(D,ivec2(R.y*(o.xy-d.xy*o.z/d.z)+.5*R.xy),0) // intersect ray with screen and fetch texture\n           \t+.01*pow(.5+.5*d.y,3.);                               // add super simple skybox\n        \n        // ^ Because I can be sure that it's always going to hit the same geometry,\n        //   I can directly calculate the texture coordinate from camera direction and orientation.\n        //   This shortcut is not only great for size, but also performance.\n    }\n    \n    // brightness correction\n    #ifdef CUSTOM_SAMPLE_COUNT\n    c*=1.6/float(CUSTOM_SAMPLE_COUNT);\n    #else\n    c/=125.;\n    #endif\n\n    // [common code across all stages]\n    \n    fragColor=c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}