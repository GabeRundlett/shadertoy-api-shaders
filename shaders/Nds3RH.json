{
    "Shader": {
        "info": {
            "date": "1620600960",
            "description": "pompkin\n\nvrchat",
            "flags": 0,
            "hasliked": 0,
            "id": "Nds3RH",
            "likes": 1,
            "name": "pumpkin for the man and epic",
            "published": 3,
            "tags": [
                "raymarching",
                "halloween",
                "pumpkin"
            ],
            "usePreview": 0,
            "username": "pema99",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 80\n#define MAX_DIST 5.\n#define SURF_DIST .001\n\nmat2 rot(float a)\n{\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat pumpkinBody(vec3 p)\n{\n    p.y *= 1.5-abs(pow(length(p.xz),0.3))*0.5;\n    p.xz *= 1.0 + sin(10.0 * atan(p.z, p.x))*0.05;\n    return length(p)-0.8;\n}\n\nfloat pumpkinStem(vec3 p)\n{\n    p.yz *= rot(p.y*0.15);\n    p.xz *= 1.0 + sin(10.0 * atan(p.z, p.x))*0.05;\n    return sdCappedCylinder(p-vec3(0, 0.6, 0.05), 0.25, 0.13);\n}\n\nint id = 0;\nfloat map(vec3 p)\n{\n    float height = max(p.y, 0.);\n\n    float c = 1.6;\n    p.y = mod(p.y + 0.5*c, c) - 0.5*c;\n    p.y += 0.1;\n    \n    p *= height;\n\n    float d0 = pumpkinBody(p);\n    d0 = max(d0, -d0-0.2);\n    float d1 = pumpkinStem(p);\n    id = d0 < d1 ? 0 : 1;\n    return opSmoothUnion(d0, d1, 0.1) / height;\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    int i = 0;\n    for(; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = map(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, float(i));\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat d = map(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z)\n{\n    vec3 f = normalize(l-p),\n         r = normalize(cross(vec3(0,1,0), f)),\n         u = cross(f,r),\n         c = f*z,\n         i = c + uv.x*r + uv.y*u,\n         d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 3, -3)*.6;\n    ro.yz *= rot(-m.y*3.14+1.);\n    ro.xz *= rot(-m.x*6.2831);\n    \n    vec3 rd = getRayDir(uv, ro, vec3(0,0,0), 1.);\n    vec3 bg = pow(texture(iChannel0, rd).rgb, vec3(4.0))*0.7;\n    vec3 col = bg;\n    vec3 newCol = vec3(0);\n    \n    vec2 res = rayMarch(ro, rd);\n    float d = res.x;\n    float ao = res.y / float(MAX_STEPS);\n\n    if(d>MAX_DIST) { \n        newCol = bg;\n    } else {\n        int mat = id;\n        vec3 p = ro + rd * d;\n        vec3 n = getNormal(p);\n\n        if (mat == 1) col = vec3(0.4, 0.4, 0.1);\n        else col = vec3(1.0, 0.3, 0.0);\n        \n        col *= max(dot(n, vec3(1.)), 0.1); //ndotl go brrr\n        \n        col -= max(vec3(ao), 0.05)*0.6;\n    }\n\n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}