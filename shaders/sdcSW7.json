{
    "Shader": {
        "info": {
            "date": "1633322862",
            "description": "basic monte carlo path tracer",
            "flags": 32,
            "hasliked": 0,
            "id": "sdcSW7",
            "likes": 29,
            "name": "basic path tracer",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "pathtracer",
                "srgb",
                "multipass"
            ],
            "usePreview": 0,
            "username": "icantcomeupwithausername",
            "viewed": 624
        },
        "renderpass": [
            {
                "code": "vec4 tosRGB(vec4 rgb){\n    bvec4 c = lessThan(rgb, vec4(0.0031308));\n    vec4 h = vec4(1.055)*pow(rgb, vec4(1.0/2.4)) - vec4(0.055);\n    vec4 l = rgb * vec4(12.92);\n    return mix(h,l,c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = tosRGB(texture(iChannel0,uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define clearColor vec3(0.051)\n#define bounces 32\n#define samples 4\n#define far 9e20\n#define pi acos(-1.0)\n#define tau pi*2.0\n#define MATERIALTYPE_DIFFUSE 1\n#define MATERIALTYPE_GLASS 2\n#define GLASS_IOR 2.5\n\nfloat seed;\n\n/*\n * structs\n */\n\nstruct Ray{\n    vec3 origin, direction;\n};\n\nstruct Material{\n    int type;\n    float roughness, reflectance;\n    vec3 color, emmision;\n};\n\nstruct Raycastresult{\n    bool hit;\n    vec3 normal, position;\n    Material material;\n};\n\nstruct Box{\n    vec3 position, size, rotation;\n    Material material;\n};\n\nstruct Sphere{\n    float diameter;\n    vec3 position;\n    Material material;\n};\n\n//for point moving\nvec3 mp(Ray ray,float d){\n\treturn ray.origin+ray.direction*d;\n}\n\n/*\n * fresnel approximation\n */\n \nfloat fresnel(float na,float nb,vec3 incidence,vec3 normal,float min,float max){\n    float r = pow((na-nb)/(na+nb),2.0);\n    float cx = -dot(normal,incidence);\n\t\t\t\t\n    if(na>nb){\n        float q = na/nb;\n        float s2 = pow(q,2.0)*(1.0-pow(cx,2.0));\n        if(s2>1.0) return max;\n        cx = sqrt(1.0-s2);\n    }\n\t\t\t\t\n\tfloat x = 1.0-cx;\n\tfloat ret = r+(1.0-r)*pow(x,5.0);\n\treturn mix(min,max,ret);\n}\n\n/*\n * rotation matrix functions\n */\n\nmat4 rotateY(float rotation){\n    rotation = radians(rotation);\n\tfloat ys = sin(rotation);\n\tfloat yc = cos(rotation);\n\tfloat yoc = 1.0-yc;\n\treturn mat4(yc,0.0,ys,0.0,\n\t\t\t\t0.0,yoc+yc,0.0,0.0,\n\t\t\t\t-ys,0.0,yc,0.0,\n\t\t\t\t0.0,0.0,0.0,1.0);\n}\n\nmat4 rotateX(float rotation){\n    rotation = radians(rotation);\n\tfloat xs = sin(rotation);\n\tfloat xc = cos(rotation);\n\tfloat xoc = 1.0-xc;\n\treturn mat4(xoc+xc,0.0,0.0,0.0,\n\t\t\t    0.0,xc,-xs,0.0,\n\t\t\t\t0.0,xs,xc,0.0,\n\t\t\t\t0.0,0.0,0.0,1.0);\n}\n\nmat4 rotateZ(float rotation){\n    rotation = radians(rotation);\n    float zs = sin(rotation);\n    float zc = cos(rotation);\n    float zoc = 1.0-zc;\n\treturn mat4(zc,zs,0.0,0.0,\n\t\t\t    -zs,zc,0.0,0.0,\n\t\t\t\t0.0,0.0,zoc+zc,0.0,\n\t\t\t\t0.0,0.0,0.0,1.0);\n}\n\n/*\n * intersection functions\n * https://iquilezles.org/articles/intersectors\n */\n \nvec4 box(Ray ray,Box box) {\n    mat4 translate = mat4(1.0,0.0,0.0,0.0,\n                          0.0,1.0,0.0,0.0,\n                          0.0,0.0,1.0,0.0,\n                          box.position,1.0)*rotateX(box.rotation.x)*rotateY(box.rotation.y)*rotateZ(box.rotation.z);\n\n    vec3 q = (inverse(translate)*vec4(ray.origin,1.0)).xyz;\n    vec3 m = 1.0/(inverse(translate)*vec4(ray.direction,0.0)).xyz; \n    vec3 n = m*q;  \n    vec3 k = abs(m)*box.size;\n    vec3 t1 = -n-k;\n    vec3 t2 = -n+k;\n    float tn = max(max(t1.x,t1.y),t1.z);\n    float tf = min(min(t2.x,t2.y),t2.z);\n    if(tn>tf||tf<0.0) return vec4(-1.0); //ray missed\n    vec3 normal = sign(q)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    return vec4(normal,tn);\n}\n\nfloat sphere(Ray ray,Sphere sphere){\n\tvec3 rc = ray.origin-(sphere.position/2.0);\n\tfloat b = dot(rc,ray.direction);\n\tfloat c = dot(rc,rc)-pow(sphere.diameter/2.0,2.0);\n\tfloat t = pow(b,2.0)-c;\n\tif(t>0.0) return -b-sqrt(t);\n\treturn t;\n}\n\n/*\n * hashes\n */\n \nvec3 h3() {\n    return fract(sin(vec3(seed+=0.1,seed+=0.1,seed+=0.1))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n \nvec2 h2(){\n\treturn fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n\t\t\t\nfloat h(){\n\treturn fract(sin(seed+=0.1)*43758.5453123);\n}\n\n/*\n * sampling \n */\n \nvec3 cosineWeightedSample(vec3 normal){\n\tvec2 random = h2();\n\tvec3 u = normalize(cross(normal,vec3(1.0,1.0,1.0)));\n\tvec3 v = cross(u,normal);\n\tfloat a = sqrt(random.y);\n\tfloat x = a*cos(tau*random.x); \n\tfloat y = a*sin(tau*random.x);\n\tfloat z = sqrt(1.0-random.y);\n\treturn normalize(vec3(x*u+y*v+z*normal));\n}\n\n//crude ray offset\nvec3 offset(vec3 direction,vec3 multiplier){\n    vec3 random = h3()*multiplier-multiplier/2.0;\n    return normalize(direction+random);\n}\n\n/*\n * scene definition of objects\n */\n \n                                  //material: type, roughness, reflectance, color, emmision\nSphere balls[5] = Sphere[5](\n    Sphere(1.68748,vec3(1.8502,1.68748,-0.10162),Material(MATERIALTYPE_DIFFUSE,0.0,40.0,vec3(0.8),vec3(0.0))),\n    Sphere(1.0,vec3(-0.95827,1.0,-2.8441),Material(MATERIALTYPE_DIFFUSE,0.0,0.0,vec3(0.8),vec3(0.0))),\n    Sphere(0.6,vec3(-1.7301,0.6,0.0),Material(MATERIALTYPE_DIFFUSE,0.4,40.0,vec3(0.051,0.296,1.0),vec3(0.0))),\n    Sphere(0.680,vec3(0.0,0.680,1.3341),Material(MATERIALTYPE_GLASS,0.0,0.0,vec3(0.8),vec3(0.0))),\n    Sphere(0.616,vec3(2.1417,0.616,2.9726),Material(MATERIALTYPE_DIFFUSE,0.4,40.0,vec3(1.0,1.0,0.0),vec3(0.0)))\n);\n\n        //box: position, size, rotation, material\nBox boxes[3] = Box[3](\n    Box(vec3(0.0),vec3(3.5,0.0,3.0),vec3(0.0,0.0,0.0),Material(MATERIALTYPE_DIFFUSE,0.0,0.0,vec3(0.8),vec3(0.0))),\n    Box(vec3(0.0,2.1,-3.0),vec3(3.5,2.1,0.0),vec3(0.0,0.0,0.0),Material(MATERIALTYPE_DIFFUSE,0.0,0.0,vec3(0.8),vec3(0.0))),\n    Box(vec3(-4.171,2.15,0.0),vec3(1.874,0.0,1.874),vec3(0.0,0.0,79.2),Material(MATERIALTYPE_DIFFUSE,0.0,0.0,vec3(1.0),vec3(4.1)))\n);\n\n/*\n * raycast function to test intersection with each object\n */\n\nRaycastresult raycast(Ray ray){\n    //will be used for depth testing\n    float depth = far;\n    Raycastresult hit;\n    \n    //test spheres\n    for(int i=0;i<balls.length();i++){\n\t\tSphere ball = balls[i];\n\t\tfloat bd = sphere(ray,ball);\n\t\tif(bd>0.0&&bd<depth){\n\t\t\tdepth = bd;\n\t\t\tvec3 position = mp(ray,bd);\n\t\t\tvec3 normal = normalize(position-(ball.position/2.0));\n\t\t\thit = Raycastresult(true,normal,position,ball.material);\n\t\t}\n\t}\n    \n    //test boxes\n    for(int i=0;i<boxes.length();i++){\n\t\tBox block = boxes[i];\n\t\tvec4 bd = box(ray,block);\n\t\tif(bd.w>0.0&&bd.w<depth){\n\t\t\tdepth = bd.w;\n\t\t\tvec3 position = mp(ray,bd.w);\n\t\t\tvec3 normal = bd.xyz;\n\t\t\thit = Raycastresult(true,normal,position,block.material);\n\t\t}\n\t}\n    \n    //if ray missed then return a empty raycast result\n    if(depth==far){\n        hit = Raycastresult(false,vec3(0.0),vec3(0.0),Material(MATERIALTYPE_DIFFUSE,0.0,0.0,vec3(0.0),clearColor));\n    }\n    \n    return hit;\n}\n\n/*\n * main pathtracing function\n */\n \nvec3 trace(Ray ray){\n    vec3 accumulator;\n    vec3 mask = vec3(1.0);\n    \n    //pathtracing loop\n    for(int i=0;i<bounces;i++){\n        //raycast\n        Raycastresult result = raycast(ray);\n        \n        //accumulate color\n        accumulator+=mask*result.material.emmision;\n\t\tmask*=result.material.color;\n        \n        //if ray hit a light or missed then stop\n        if(result.hit==false||length(result.material.emmision)>0.0) break;\n        \n        //create ray direction based on material\n        switch(result.material.type){\n            case MATERIALTYPE_DIFFUSE:\n                //randomly reflect if material has any reflectance value\n                if(fresnel(1.0,GLASS_IOR,ray.direction,result.normal,0.0,1.0)*result.material.reflectance>h()){\n                    ray.origin = result.position+result.normal*1e-4;\n                    ray.direction = reflect(ray.direction,result.normal);\n                    \n                    //offset ray direction based on roughness\n                    ray.direction = offset(ray.direction,vec3(result.material.roughness));\n                }else{\n                    ray.origin = result.position+result.normal*1e-4;\n\t\t\t\t\tray.direction = cosineWeightedSample(result.normal);\n                }\n            break;\n            case MATERIALTYPE_GLASS:\n                //randomly reflect for fresnel\n                if(fresnel(1.0,GLASS_IOR,ray.direction,result.normal,0.0,1.0)-0.07>h()){\n                    ray.origin = result.position+result.normal*1e-4;\n                    ray.direction = reflect(ray.direction,result.normal);\n                }else{\n                    ray.origin = result.position+ray.direction*1e-4;\n                    ray.direction = refract(ray.direction,result.normal,1.0/GLASS_IOR);\t\n                }\n\t\t\tbreak;\n        }\n    }\n    \n    return accumulator;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    //variable to store color\n    vec3 col;\n    \n    //start seed\n    seed = uv.x+uv.y*3.43121412313+fract(1.12345314312*iTime);\n    \n    vec3 cpos = vec3(0.0,1.3,14.0);\n    \n    //accumulate samples\n    for(int i=0;i<samples;i++){\n        //jitter ray for anti ailiasing\n        vec3 rdir = normalize(vec3(uv,-5.8)+vec3(h2()*2.0/iResolution.y,h2()*2.0/iResolution.x));\n    \n        Ray ray = Ray(cpos,rdir);\n        \n        //trace\n        col += trace(ray);\n        \n        seed = mod(seed*1.1234567893490423,13.0);\n    }\n    \n    //get color average\n    col/=float(samples);\n    \n    if(iMouse.z<0.5){\n        vec3 pcol = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n        fragColor = vec4(mix(pcol,col,1.0/float(iFrame+1)),1.0);\n    }else{\n        fragColor = vec4(col,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}