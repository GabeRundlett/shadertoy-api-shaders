{
    "Shader": {
        "info": {
            "date": "1626771581",
            "description": "I saw this video by Code Parade and had to try it for myself. Mousable.\n[url]https://www.youtube.com/watch?v=Pv26QAOcb6Q[/url]\n\nThe code is fairly easy to change, if you make something cool please leave a comment :D",
            "flags": 32,
            "hasliked": 0,
            "id": "NlXSWs",
            "likes": 7,
            "name": "Analog Fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mouse",
                "feedback"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Processed by 'GLSL Shader Shrinker' (for reformating)\n// (https://github.com/deanthecoder/GLSLShaderShrinker)\n\n#define rot(a)\tmat2(cos(a), sin(a), -sin(a), cos(a))\n#define sat(a, b)\tclamp(a, -b, b)\n#define undo(uv)\t(((uv * iResolution.y) + 0.5 * iResolution.xy) / iResolution.xy)\n\n//Change this to see the projected screens that create the fractal;\n#define viewScreens\tfalse\n\n//iq palette\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) { return a + b * cos(6.28318 * (c * t + d)); }\n\nvec3 texCam(vec2 uv, vec2 p, float rot, float scale) {\n\tuv -= p;\n\tuv *= rot(rot);\n\tuv /= scale;\n\tuv = undo(uv);\n\tfloat m = 1.0;\n\tif (viewScreens) m = 0.0;\n\treturn mix(texture(iChannel1, uv).rgb, texture(iChannel0, uv).rgb, m) * step(uv.x, 1.0) * step(uv.y, 1.0) * step(0.0, uv.x) * step(0.0, uv.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\tvec3 col = vec3(0.0);\n\tfloat t = iTime;\n\n\t//3 Copies of the current screen with some animation\n\tcol += texCam(uv, vec2(-0.1 + sin(t * 0.2 + 1.0) * 0.4, 0.1 + sin(t * 0.1 + 4.0) * 0.2), 0.4 + t * 0.4, 0.6);\n\tcol += texCam(uv, vec2(0.1 + sin(t * 0.4 + 2.0) * 0.4, -0.1 + sin(t * 0.3 + 5.0) * 0.2), 2.7 + t * 0.6, 0.8);\n\tcol += texCam(uv, vec2(0.0 + sin(t * 0.6 + 3.0) * 0.4, 0.0 + sin(t * 0.8 + 6.0) * 0.2), 0.3 + t, 0.3);\n\n\t//Something on screen to get it going\n\tvec3 ballcol = pal(floor(t * 0.5) * 0.25, vec3(0.5), vec3(0.5), vec3(1), vec3(0, 0.33, 0.66));\n\tvec2 ballpos = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n\tif (iMouse.z > 0.0) col += ballcol * step(length(vec2(uv - ballpos)), 0.1);\n\telse col += ballcol * step(length(vec2(uv.x + sin(t) * 0.2, uv.y + cos(t) * 0.2)), 0.1);\n\n\t//Reduce the color to prevent it from getting too bright\n\tcol *= 0.85;\n\tcol = clamp(col, 0.0, 1.0);\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}