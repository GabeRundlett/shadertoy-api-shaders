{
    "Shader": {
        "info": {
            "date": "1503209172",
            "description": "Experiments with custom sprites (loaded from vec4 arrays) and usage of buffers for data holding. Hope you like it.\n\nNOTE: hold down left mouse button and move the mouse to control the paddles.",
            "flags": 96,
            "hasliked": 0,
            "id": "ldBfWt",
            "likes": 5,
            "name": "Break-in (Breakout clone)",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "game",
                "sound",
                "breakout",
                "customtextures"
            ],
            "usePreview": 0,
            "username": "ingagard",
            "viewed": 924
        },
        "renderpass": [
            {
                "code": "vec2 ballTexture_Adress = vec2(0.0, 0.0);\nvec2 paddleTexture_Adress = vec2(40.0, 20.0);\nvec2 blockTexture_Adress = vec2(0.0, 35.0);\nvec2 blockTexture2_Adress = vec2(0.0, 50.0);\nvec2 blockTexture3_Adress = vec2(0.0, 65.0);\nvec2 bgTexture_Adress = vec2(0.0, 80.0);\n\nfloat blockWidth = 50.0;\nfloat blockHeight = 15.0;\nvec2 block_Adress = vec2(3.0, 50.0);\nvec4[50] block_Data;\n\nvec2 ball_Adress = vec2(1.0, 0);\nvec4 ballData;\n\nvec2 trail_Adress = vec2(8.0, 50);\nvec4[90] trail_Data;\n\nfloat ballRadius = 10.0;\nfloat paddleWidth = 80.0;\nfloat paddleHeight = 15.0;\n\n\n\nvoid DrawBallSprite(vec2 screenCoord, vec2 pos, inout vec4 pixel)\n{\n  if (screenCoord.x >=pos.x && screenCoord.x <=pos.x+20.0 && screenCoord.y >=pos.y && screenCoord.y <=pos.y+20.0)\n  {\n    vec2 dist = (screenCoord-pos)/iResolution.xy;\n    vec2 loc = ballTexture_Adress/iResolution.xy;    \n    vec4 c =texture(iChannel3, loc+dist);\n\n    pixel=mix(pixel, c, c.w);\n  }\n}\n\n\nvoid DrawTrailBallSprite(vec2 screenCoord, vec2 pos, vec4 tint, inout vec4 pixel)\n{\n  if (screenCoord.x >=pos.x && screenCoord.x <=pos.x+20.0 && screenCoord.y >=pos.y && screenCoord.y <=pos.y+20.0)\n  {\n    vec2 dist = (screenCoord-pos)/iResolution.xy;\n    vec2 loc = ballTexture_Adress/iResolution.xy;    \n    vec4 c =texture(iChannel3, loc+dist);\n\n    pixel=mix(pixel, c*tint, c.w*tint.w);\n  }\n}\n\nvoid DrawPaddleSprite(vec2 screenCoord, vec2 pos, inout vec4 pixel)\n{\n  if (screenCoord.x >=pos.x && screenCoord.x <=pos.x+80.0 && screenCoord.y >=pos.y && screenCoord.y <=pos.y+15.0)\n  {\n    vec2 dist = (screenCoord-pos)/iResolution.xy;\n    vec2 loc = paddleTexture_Adress/iResolution.xy;    \n    vec4 c =texture(iChannel0, loc+dist);\n\n    pixel=mix(pixel, c, c.w);\n  }\n}\n\nvoid DrawBlockSprite(vec2 screenCoord, float health, vec2 pos, vec4 tint, inout vec4 pixel)\n{\n  if (screenCoord.x >=pos.x && screenCoord.x <=pos.x+50.0 && screenCoord.y >=pos.y && screenCoord.y <=pos.y+15.0)\n  {\n    vec2 dist = (screenCoord-pos)/iResolution.xy;\n\n    vec2 loc;\n    if (health>2.0)\n    {\n      loc = blockTexture_Adress/iResolution.xy;\n    } else  if (health>1.0)\n    {\n      loc = blockTexture2_Adress/iResolution.xy;\n    } else\n    {\n      loc = blockTexture3_Adress/iResolution.xy;\n    }\n    pixel=texture(iChannel3, loc+dist)*tint;\n  }\n}\n\n\n\n\nvec4 read(in sampler2D buffer, in vec2 memPos, vec2 resolution)\n{\n  return texture(buffer, (memPos+0.5)/resolution, -100.);\n}\n\n\nfloat modulo(float a, float b)\n{\n  return a - (b * floor(a/b));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\n  float frame = float(iTime)*60.0;\n\n  vec2 uv = (fragCoord.xy / iResolution.xy);\n  vec4 music = texture(iChannel2, uv*0.1);  \n  float musicVol = length(music);\n\n  vec2 screenCoord = vec2(fragCoord.x, iResolution.y-fragCoord.y);\n\n  vec2 texCoord = (bgTexture_Adress+vec2(modulo(screenCoord.x*0.5-float(iTime)*15.0, 23.0), modulo(screenCoord.y*(uv.y*musicVol), 23.0)))/ iResolution.xy;\n  vec4 color=texture(iChannel3, texCoord)* (1.5-(distance(vec2(0.5), uv)));\n\n  for (int i=0; i<50; i++)\n  {       \n    trail_Data[i] =  read(iChannel0, vec2(trail_Adress.x, trail_Adress.y-float(i)), iChannelResolution[0].xy);\n    float trailMix=(trail_Data[i].z*0.0111);\n\n    DrawTrailBallSprite(screenCoord, trail_Data[i].xy-vec2(ballRadius), vec4(1.0, 1.0, 1.0, (trailMix)*.4), color);\n  }\n\n  // ball\n  ballData = read(iChannel0, ball_Adress, iChannelResolution[0].xy); \n\n  color *=0.6+(3.0/max(1.0, (distance(ballData.xy, screenCoord)*0.07)));\n\n  DrawBallSprite(screenCoord, ballData.xy-vec2(ballRadius), color);\n\n  // paddle\n  vec2 lowerPaddlePos = vec2(max(0.0, min(iResolution.x-paddleWidth, iMouse.x)), iResolution.y-20.0-paddleHeight);     \n  vec2 upperPaddlePos = vec2(max(0.0, min(iResolution.x-paddleWidth, iMouse.x)), 20.0);\n\n  float paddleRight=  lowerPaddlePos.x +paddleWidth;\n  float paddleBottom=  lowerPaddlePos.y +paddleHeight;\n\n  DrawPaddleSprite(screenCoord, lowerPaddlePos, color);\n  DrawPaddleSprite(screenCoord, upperPaddlePos, color);\n\n  float rumbleAmount = -40.0+ (40.0*musicVol);\n\n  // blocks\n  for (int i=0; i<50; i++)\n  {\n    block_Data[i] =  read(iChannel0, vec2(block_Adress.x, block_Adress.y-float(i)), iChannelResolution[0].xy);\n    if (block_Data[i].w>=1.0)\n    {         \n      block_Data[i].y +=rumbleAmount;\n\n\n      vec4 tint = vec4(0.5+(0.25*block_Data[i].w)+(5.0*block_Data[i].z));\n\n      DrawBlockSprite(screenCoord, block_Data[i].w, block_Data[i].xy, tint, color);\n    }\n  }\n\n  fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 11714,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/retrovgm/shinobi-mission-4-bgm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 read(in sampler2D buffer, in vec2 memPos, vec2 resolution)\n{\n  return texture(buffer, (memPos+0.5)/resolution, -100.);\n}\n\n// Writes a single component of a pixel in a buffer.\nvoid write( inout vec4 buffer, in vec4 val, in vec2 memPos, in vec2 screenCoord)\n{\n  if (distance(screenCoord, memPos)<=1.0) buffer = val;\n}\n\nvec4 UnpackColors(int packedValue)\n{\n    return vec4(float((packedValue >> 16) & 0x000000FF)/255.0,float((packedValue >>8 ) & 0x000000FF)/255.0,float( packedValue & 0x000000FF)/255.0,float((packedValue >> 24) & 0x000000FF)/255.0);\n}\n\n\nfloat blockWidth = 50.0;\nfloat blockHeight = 20.0;\nvec2 block_Adress = vec2(3.0, 50.0);\nvec4[50] block_Data;\nvec2 ball_Adress = vec2(1.0, 0);\n\nvec2 paddleTexture_Adress = vec2(40.0, 20.0);\n\nvec4 ballData;\nvec2 trail_Adress = vec2(8.0, 50);\nvec4[50] trail_Data;\nfloat ballRadius = 10.0;\nfloat paddleWidth = 80.0;\nfloat paddleHeight = 15.0;\n\n\nbool RectInsideRect(vec4 rect1, vec4 rect2)\n{\n  if (rect1.z>rect2.x && rect1.x<rect2.z)\n  {\n    return (rect1.w>rect2.y && rect1.y<rect2.w);\n  }\n  return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec2 screenCoord = vec2(fragCoord.x, iResolution.y-fragCoord.y);\n  vec4 buff = texture(iChannel0, uv);\n\n  if (fragCoord.x<120.0 && fragCoord.y<=110.0)\n  {\n\n    // check if variables has been initialized (init adress == 0);\n    if (iFrame==0)\n    {\n      // load paddle texture and save to buffer\n      if (fragCoord.x>=paddleTexture_Adress.x && fragCoord.x<=paddleTexture_Adress.x+80.0 && \n      fragCoord.y>=paddleTexture_Adress.y && fragCoord.y<=paddleTexture_Adress.y+15.0)\n      {      \n      int[1200] paddleTexture = int[](0,0,0,-150994944,-150994944,-13303550,-16646143,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16646143,-16580351,-150994944,-150994944,0,0,0,0,0,-146323641,-9695968,-9630432,-9630432,-12908265,-16514044,-7303024,-7303024,-7303024,-7303024,-7303024,-11776948,-7303024,-7303024,-7303024,-7303024,-11776948,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-12303292,-12303292,-12303292,-7303024,-7303024,-7303024,-7303024,-12303292,-12303292,-12303292,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-7303024,-11776948,-7303024,-7303024,-7303024,-7303024,-11776948,-7303024,-7303024,-7303024,-7303024,-7303024,-16514044,-9630432,-9630432,-12908265,-12974057,-146323641,0,0,0,-16497442,-9695968,-2214292,-2214292,-2214292,-9104851,-16185079,-4473925,-4473925,-4473925,-4473925,-4473925,-7303024,-4473925,-4473925,-4473925,-4473925,-7303024,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-8092540,-8092540,-8092540,-4473925,-4473925,-4473925,-4473925,-8092540,-8092540,-8092540,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-4473925,-7303024,-4473925,-4473925,-4473925,-4473925,-7303024,-4473925,-4473925,-4473925,-4473925,-4473925,-16185079,-2214292,-2214292,-2214292,-5891265,-12974057,-146323641,0,-16497442,-15943178,-1160556,-197380,-197380,-197380,-6284995,-15987700,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-4802890,-4802890,-4802890,-197380,-197380,-197380,-197380,-4802890,-4802890,-4802890,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-197380,-15987700,-197380,-197380,-197380,-1160556,-6284995,-15943178,-146323641,-15733762,-15733762,-106820,-106820,-106820,-106820,-3399858,-15790321,-131587,-131587,-131587,-131587,-131587,-263173,-131587,-131587,-131587,-131587,-263173,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-1579033,-1579033,-1579033,-131587,-131587,-131587,-131587,-1579033,-1579033,-1579033,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-131587,-263173,-131587,-131587,-131587,-131587,-263173,-131587,-131587,-131587,-131587,-131587,-15790321,-106820,-106820,-106820,-106820,-3399858,-15733762,-15733762,-197380,-15943435,-1226349,-1226349,-1226349,-1226349,-6350787,-15987700,-2302756,-2302756,-2302756,-2302756,-2302756,-3750202,-2302756,-2302756,-2302756,-2302756,-3750202,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-4868683,-4868683,-4868683,-2302756,-2302756,-2302756,-2302756,-4868683,-4868683,-4868683,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-2302756,-3750202,-2302756,-2302756,-2302756,-2302756,-3750202,-2302756,-2302756,-2302756,-2302756,-2302756,-15987700,-1226349,-1226349,-1226349,-1226349,-6350787,-15943435,-2302756,-394759,-16218389,-2280085,-2280085,-2280085,-2280085,-9170644,-16250872,-4539718,-4539718,-4539718,-4539718,-4539718,-7303024,-4539718,-4539718,-4539718,-4539718,-7303024,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-8158333,-8158333,-8158333,-4539718,-4539718,-4539718,-4539718,-8158333,-8158333,-8158333,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-4539718,-7303024,-4539718,-4539718,-4539718,-4539718,-7303024,-4539718,-4539718,-4539718,-4539718,-4539718,-16250872,-2280085,-2280085,-2280085,-2280085,-9170644,-16218389,-4539718,-16289561,-16289561,-7137740,-7137740,-7137740,-7137740,-10416347,-16316665,-10855846,-10855846,-8750470,-8750470,-8750470,-10855846,-8750470,-8750470,-8750470,-8750470,-10855846,-8750470,-8750470,-8750470,-8750470,-8750470,-8750470,-8750470,-8750470,-10855846,-10855846,-10855846,-10855846,-8750470,-8750470,-8750470,-8750470,-11908534,-11908534,-11908534,-10855846,-10855846,-10855846,-10855846,-11908534,-11908534,-11908534,-8750470,-8750470,-8750470,-8750470,-8750470,-8750470,-10855846,-10855846,-10855846,-10855846,-8750470,-8750470,-8750470,-8750470,-8750470,-8750470,-10855846,-8750470,-8750470,-8750470,-8750470,-10855846,-8750470,-8750470,-8750470,-10855846,-10855846,-16316665,-7137740,-7137740,-7137740,-7137740,-10416347,-16289561,-16289561,-526345,-16360221,-3136438,-3136438,-3136438,-3136438,-11531234,-16382458,-6250336,-6250336,-6250336,-6250336,-6250336,-10132123,-6250336,-6250336,-6250336,-6250336,-10132123,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-10790053,-10790053,-10790053,-6250336,-6250336,-6250336,-6250336,-10790053,-10790053,-10790053,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-6250336,-10132123,-6250336,-6250336,-6250336,-6250336,-10132123,-6250336,-6250336,-6250336,-6250336,-6250336,-16382458,-3136438,-3136438,-3136438,-3136438,-11531234,-16360221,-6250336,-16360221,-16360221,-8252886,-8252886,-8252886,-8252886,-11531234,-16382458,-11908534,-11908534,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-11908534,-11908534,-11908534,-11908534,-10132123,-10132123,-10132123,-10132123,-12763843,-12763843,-12763843,-11908534,-11908534,-11908534,-11908534,-12763843,-12763843,-12763843,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-11908534,-11908534,-11908534,-11908534,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-11908534,-11908534,-16382458,-8252886,-8252886,-8252886,-8252886,-11531234,-16360221,-16360221,-16360221,-16360221,-8252886,-8252886,-8252886,-8252886,-11531234,-16382458,-11908534,-11908534,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-11908534,-11908534,-11908534,-11908534,-10132123,-10132123,-10132123,-10132123,-12763843,-12763843,-12763843,-11908534,-11908534,-11908534,-11908534,-12763843,-12763843,-12763843,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-11908534,-11908534,-11908534,-11908534,-10132123,-10132123,-10132123,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-10132123,-11908534,-10132123,-10132123,-10132123,-11908534,-11908534,-16382458,-8252886,-8252886,-8252886,-8252886,-11531234,-16360221,-16360221,-97965783,-16289561,-7137740,-7137740,-7137740,-7137740,-10416347,-16316665,-10855846,-12829636,-10855846,-10855846,-10855846,-12829636,-10855846,-10855846,-10855846,-10855846,-12829636,-10855846,-10855846,-10855846,-10855846,-10855846,-10855846,-10855846,-10855846,-12829636,-10855846,-10855846,-12829636,-10855846,-10855846,-10855846,-10855846,-11908534,-11908534,-11908534,-12829636,-10855846,-10855846,-12829636,-11908534,-11908534,-11908534,-10855846,-10855846,-10855846,-10855846,-10855846,-10855846,-12829636,-10855846,-10855846,-12829636,-10855846,-10855846,-10855846,-10855846,-10855846,-10855846,-12829636,-10855846,-10855846,-10855846,-10855846,-12829636,-10855846,-10855846,-10855846,-12829636,-10855846,-16316665,-7137740,-7137740,-7137740,-7137740,-10416347,-16289561,-97965783,-97965783,-97965783,-9170644,-9170644,-9170644,-9170644,-12122086,-16250872,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12895429,-12895429,-12895429,-12105913,-12105913,-12105913,-12105913,-12895429,-12895429,-12895429,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-12105913,-16250872,-9170644,-9170644,-9170644,-9170644,-12122086,-97965783,-97965783,0,-97965783,-97965783,-14416883,-14416883,-14416883,-14416883,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-15724528,-15724528,-15724528,-15724528,-15724528,-15724528,-15724528,-15724528,-15724528,-15724528,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-16514044,-14416883,-14416883,-14416883,-14416883,-97965783,-97965783,0,0,0,1795162112,1795162112,-100663296,-16646143,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-100663296,1795162112,1795162112,0,0);\n\n      vec2 texPos = fragCoord-paddleTexture_Adress;\n      buff = UnpackColors(paddleTexture[ int(texPos.y)*80+int(texPos.x)]);\n      }\n        \n        \n      ballData = vec4(max(0.0, min(iResolution.x-paddleWidth, iMouse.x+(paddleWidth*0.5))), iResolution.y-20.0-paddleHeight-ballRadius, 3, -5);\n      for (int i=0; i<50; i++)\n      {\n        // posX,posY,trailFade,energy\n        trail_Data[i] = vec4(-100.0, -100.0, float(i), 0.0);\n      }\n\n      for (int i=0; i<5; i++)\n      {\n        float blockPosY = 160.0+((blockHeight+5.0)*float(i));\n        for (int x=0; x<10; x++)\n        {\n          if (x==0||x==9) block_Data[i*10+x] = vec4(120.0+((blockWidth+5.0)*float(x)), blockPosY, 0, 2.0);\n          else block_Data[i*10+x] = vec4(120.0+((blockWidth+5.0)*float(x)), blockPosY, 0, 3.0);\n        }\n      }\n    } \n    // variables has been initialized. Main game loop and collision checks\n    else\n    {\n      ballData = read(iChannel0, ball_Adress, iChannelResolution[0].xy);\n\n      for (int i=0; i<50; i++)\n      {\n        block_Data[i] =  read(iChannel0, vec2(block_Adress.x, block_Adress.y-float(i)), iChannelResolution[0].xy);\n      }    \n\n      for (int i=0; i<90; i++)\n      {\n        trail_Data[i] =  read(iChannel0, vec2(trail_Adress.x, trail_Adress.y-float(i)), iChannelResolution[0].xy);\n      }\n\n      vec2 lowerPaddlePos = vec2(max(0.0, min(iResolution.x-paddleWidth, iMouse.x)), iResolution.y-20.0-paddleHeight);     \n      vec2 upperPaddlePos = vec2(lowerPaddlePos.x, 20.0);\n\n      vec2 lowerPaddlePos2 = lowerPaddlePos +vec2(paddleWidth, paddleHeight);\n      vec2 upperPaddlePos2 = upperPaddlePos+vec2(paddleWidth, paddleHeight);\n      vec4 lowerPaddleBB = vec4(lowerPaddlePos.x, lowerPaddlePos.y, lowerPaddlePos2.x, lowerPaddlePos2.y); \n      vec4 upperPaddleBB = vec4(upperPaddlePos.x, upperPaddlePos.y, upperPaddlePos2.x, upperPaddlePos2.y); \n\n      float oldX = ballData.x;\n      float oldY = ballData.y;\n      ballData.x += ballData.z;\n      ballData.y += ballData.w;\n\n      // screen border collisions\n      if (ballData.x+ballRadius>iResolution.x)\n      {\n        ballData.x = iResolution.x-ballRadius;\n        ballData.z = -ballData.z;\n      }\n      if (ballData.x-ballRadius<0.0)\n      {\n        ballData.x = ballRadius;\n        ballData.z = -ballData.z;\n      }\n      if (ballData.y+ballRadius>iResolution.y)\n      {\n        ballData.y = iResolution.y-ballRadius;\n        ballData.w = -ballData.w;\n      }\n      if (ballData.y-ballRadius<0.0)\n      {\n        ballData.y = ballRadius;\n        ballData.w = -ballData.w;\n      }\n      ///////////////////////////////////////\n\n      vec4 ballBB = vec4(ballData.x-ballRadius, ballData.y-ballRadius, ballData.x+ballRadius, ballData.y+ballRadius);\n\n      // lower paddle collision\n      if (RectInsideRect(ballBB, lowerPaddleBB))\n      {\n        ballData.w = -ballData.w;\n        ballData.z = -10.0- (20.0 * ((lowerPaddlePos.x - ballData.x) / paddleWidth));\n\n        ballData.x = oldX;\n        ballData.y = oldY;\n      }\n      // upper paddle collision       \n      else if (RectInsideRect(ballBB, upperPaddleBB))\n      {\n        ballData.w = -ballData.w;\n        ballData.z = -10.0- (20.0 * ((upperPaddlePos.x - ballData.x) / paddleWidth));\n\n        ballData.x = oldX;\n        ballData.y = oldY;\n      }\n\n      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      // ball vs block collisions (stop after a single collision occurs. Only one block can be hit at a time....\n      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      for (int i=0; i<50; i++)\n      {\n        // if block is \"dead\" skip collision check of this block\n        if (block_Data[i].w<1.0) continue;\n\n        if (block_Data[i].z>0.0) block_Data[i].z-=0.03;\n\n        vec4 blockBB = vec4(block_Data[i].x, block_Data[i].y, block_Data[i].x+blockWidth, block_Data[i].y+blockHeight); \n\n        if (RectInsideRect(ballBB, blockBB))\n        {\n          block_Data[i].w-=1.0;\n          block_Data[i].z=1.0; \n\n          // skip ball bounce if block gets \"killed\"\n          if (block_Data[i].w<1.0) continue;\n\n          if ((oldX+ballRadius)>block_Data[i].x && (oldX-ballRadius)<(block_Data[i].x+blockWidth))\n          {\n\n            ballData.w = -ballData.w;\n          } else if ((oldY+ballRadius)>block_Data[i].y && (oldY-ballRadius)<(block_Data[i].y+blockHeight))\n          {\n\n            ballData.z = -ballData.z;\n          } else\n          {\n            ballData.w = -ballData.w;\n            ballData.z = -ballData.z;\n          }\n          break;\n        }\n      }\n\n\n      // create ball trails (fade out over 50 frames recreate trail at ball position)\n      for (int i=0; i<50; i++)\n      {\n        trail_Data[i].z-=1.0;\n        if (trail_Data[i].z<0.0) \n        {\n          trail_Data[i].xy =ballData.xy;\n          trail_Data[i].z=50.0;\n        }\n      }\n    }\n\n    write(buff, ballData, ball_Adress, fragCoord);\n\n    for (int i=0; i<50; i++)\n    {\n      write(buff, block_Data[i], vec2(block_Adress.x, block_Adress.y-float(i)), fragCoord);\n    }  \n    for (int i=0; i<50; i++)\n    {\n      write(buff, trail_Data[i], vec2(trail_Adress.x, trail_Adress.y-float(i)), fragCoord);\n    }\n\n  }\n  fragColor = buff;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 ballTexture_Adress = vec2(0.0, 0.0);\nvec2 blockTexture_Adress = vec2(0.0, 35.0);\nvec2 blockTexture2_Adress = vec2(0.0, 50.0);\nvec2 blockTexture3_Adress = vec2(0.0, 65.0);\nvec2 bgTexture_Adress = vec2(0.0, 80.0);\n\nvec4 UnpackColors(int packedValue)\n{\n    return vec4(float((packedValue >> 16) & 0x000000FF)/255.0,float((packedValue >>8 ) & 0x000000FF)/255.0,float( packedValue & 0x000000FF)/255.0,float((packedValue >> 24) & 0x000000FF)/255.0);\n}\n\n\nvec4 read(in sampler2D buffer, in vec2 memPos, vec2 resolution)\n{\n  return texture(buffer, (memPos+0.5)/resolution, -100.);\n}\n\nvoid write( inout vec4 buffer, in vec4 val, in vec2 memPos, in vec2 screenCoord)\n{\n  if (distance(screenCoord, memPos)<=1.0) buffer = val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec4 buff = texture(iChannel0, uv);   \n\n\n  // check if variables has been initialized (init adress == 0);\n  if (iFrame==0 && fragCoord.x<120.0 && fragCoord.y<=110.0)\n  {\n    int[750] blockTexture;\n\n    // load ball texture and save to buffer\n    if (fragCoord.x>=ballTexture_Adress.x && fragCoord.x<=ballTexture_Adress.x+20.0 && \n      fragCoord.y>=ballTexture_Adress.y && fragCoord.y<=ballTexture_Adress.y+20.0)\n    {\n      int[400] ballTexture = int[](16777215,16777215,16777215,16777215,16514814,15002088,462789272,1902342519,-950372211,-531595613,-531528786,-951749477,1899060352,457728375,11581886,15987954,16777212,16777215,16777215,16777215,16777215,16777215,16777215,16514043,316135640,1703251600,-980244046,-223493426,-8478021,-11368277,-11828825,-11959896,-230259019,-983587892,1701090484,312781744,15592682,16645629,16777215,16777215,16777215,16777215,16579836,617006790,-1353295265,-95457141,-9661779,-12099213,-14074291,-15195085,-15657438,-15853784,-15718076,-13935752,-96042581,-1354537334,612664970,15066597,16711422,16777215,16777215,16711421,618059478,-917812405,-15196379,-14998221,-13944512,-12496814,-13485768,-14276051,-14999256,-15460322,-15724525,-15988463,-16119009,-15985369,-919588042,612993417,15527404,16711422,16777215,318043378,-1350467199,-15197407,-14933466,-14143694,-12629170,-10654353,-8812922,-10062989,-12431793,-13748936,-14868700,-15789803,-15987698,-16250612,-13881808,-1353229734,313307053,15988211,16711422,1708249551,-96452028,-14407119,-13682112,-12692907,-10390152,-4471097,-1576720,-2300700,-7892333,-12628657,-14406865,-15131872,-15592681,-15855853,-13749966,-95135656,1701737071,12961988,469038324,-978736472,-13881037,-14932950,-13945283,-12625829,-7034708,-919560,-197379,-262916,-3418153,-10982545,-13681598,-14670292,-15461349,-15658472,-14736860,-11644591,-983669920,462130826,1910299864,-225011820,-14671319,-14934489,-14276303,-12628398,-6245965,-721925,-132100,-394500,-4272688,-11047309,-13351089,-14274248,-15460577,-15658216,-15855596,-13881295,-229089700,1903985280,-943471425,-6579048,-14013906,-14935004,-14539734,-13287100,-9799814,-3812909,-2102035,-3943722,-8745582,-12561575,-13878461,-14406090,-15394271,-15723753,-15855596,-15197153,-12104116,-947746169,-356334658,-4934224,-11381933,-14934750,-14802650,-14340558,-13617604,-11182494,-9667200,-11179923,-12431017,-13155511,-14077126,-14998998,-15196892,-15855338,-15592680,-14933982,-10525084,-358964320,-356005693,-4013122,-7170926,-13750479,-14934751,-15131615,-14276819,-14342100,-13682887,-14012107,-14210000,-14144207,-14736345,-15460837,-15526630,-15921388,-15526371,-12763069,-7564657,-358043736,-942484530,-3881280,-4276036,-8684165,-14605789,-15592681,-15132130,-14737115,-14802907,-14934236,-15066338,-15724527,-15921906,-15921647,-15855854,-15855853,-13487308,-8223357,-5722969,-944391503,1910892256,-221656125,-3618109,-4078656,-7631477,-12500415,-14737120,-14869216,-14803678,-15132642,-15461612,-15659251,-15724787,-15856115,-15263721,-11908279,-7170931,-5197142,-222643019,1908589759,469367544,-975578154,-3486522,-3815486,-3947071,-5197138,-7763322,-10592678,-12632262,-13816792,-14277344,-13685207,-12698312,-10526886,-7697531,-5394777,-4473422,-4407370,-976894017,465815244,16711422,1709960425,-87306808,-3486521,-3552314,-3815486,-3881279,-4210503,-4868434,-5460570,-5855328,-5592157,-5197399,-4605262,-4210504,-4276297,-4013639,-87439167,1707132608,9082791,16777215,318504185,-1344545320,-3354935,-3354935,-3420728,-3420728,-3749438,-3749183,-3749440,-3749440,-4012355,-4012612,-3881282,-3881539,-4078918,-3881026,-1345729336,311073189,5207201,16777215,16711678,620099572,-908600362,-3223352,-3223351,-3156528,-2762283,-3091507,-3288886,-3223093,-3420472,-3552058,-3683901,-3749698,-3486266,-909587774,613654177,5272473,4617385,16777215,16711679,16383742,618456808,-1344872999,-86582830,-2762285,-1907232,-1973282,-2499626,-2697005,-2960177,-3486521,-3420988,-87437632,-1346780743,612668055,5337741,4878489,4812699,16777215,16777214,16646143,15003378,314295493,1707461317,-975973171,-220735278,-2499626,-2565419,-2894384,-2894385,-221524536,-977223493,1704960668,308703602,4678267,4746900,5075351,5600665,16777215,16777214,16777215,16251900,13555157,10002074,463314841,1908523965,-942681653,-522987824,-523382840,-943668805,1907010469,461209210,4869709,4345174,4413804,4744841,5534873,6719140);\n\n      vec2 texPos = fragCoord-ballTexture_Adress;\n      buff = UnpackColors(ballTexture[ int(texPos.y)*20+int(texPos.x)]);\n    }\n\n\n    // load block texture and save to buffer\n    else if (fragCoord.x>=blockTexture_Adress.x && fragCoord.x<=blockTexture_Adress.x+50.0 && \n      fragCoord.y>=blockTexture_Adress.y && fragCoord.y<=blockTexture_Adress.y+15.0)\n    {      \n\n      blockTexture = int[](-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-8091252,-16777216,-16777216,-4597268,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-8209955,-12024402,-16777216,-16777216,-2232842,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-4071954,-5979177,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-2298634,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-4137746,-6044970,-16777216,-16777216,-4597268,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-12155731,-16777216,-16777216,-6044198,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-14128490,-16777216,-16777216,-8019534,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-14657669,-16777216,-16777216,-8019534,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-14657669,-16777216,-16777216,-8019534,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-11237980,-14657669,-16777216,-16777216,-6044198,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-9985079,-14128490,-16777216,-16777216,-4597268,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8275492,-8341284,-12155731,-16777216,-16777216,-15253671,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15651778,-15983577,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216);\n\n      vec2 texPos = fragCoord-blockTexture_Adress;\n      buff =  UnpackColors(blockTexture[ int(texPos.y)*50+int(texPos.x)]);\n    }\n    // load block texture 2 and save to buffer\n    else if (fragCoord.x>=blockTexture2_Adress.x && fragCoord.x<=blockTexture2_Adress.x+50.0 && \n      fragCoord.y>=blockTexture2_Adress.y && fragCoord.y<=blockTexture2_Adress.y+15.0)\n    {      \n\n      blockTexture = intn\n      vec2 texPos = fragCoord-blockTexture2_Adress;\n      buff =  UnpackColors(blockTexture[ int(texPos.y)*50+int(texPos.x)]);\n    }\n    // load block texture 3 and save to buffer\n    else if (fragCoord.x>=blockTexture3_Adress.x && fragCoord.x<=blockTexture3_Adress.x+50.0 && \n      fragCoord.y>=blockTexture3_Adress.y && fragCoord.y<=blockTexture3_Adress.y+15.0)\n    {      \n\n      blockTexture = intn\n      vec2 texPos = fragCoord-blockTexture3_Adress;\n      buff =  UnpackColors(blockTexture[ int(texPos.y)*50+int(texPos.x)]);\n    }\n    // load background texture and save to buffer\n    else if (fragCoord.x>=bgTexture_Adress.x && fragCoord.x<=bgTexture_Adress.x+24.0 && \n      fragCoord.y>=bgTexture_Adress.y && fragCoord.y<=bgTexture_Adress.y+24.0)\n    {      \n\n      int[576] bgTexture = int[](-16777073,-16777073,-16777118,-16777117,-16777041,-16777041,-16777041,-16777041,-16777041,-16777041,-16777041,-16777041,-16777072,-16777072,-16777058,-16777058,-16777058,-16777058,-16777058,-16777058,-16777072,-16777072,-16777072,-16777072,-16777100,-16777100,-16777118,-16777051,-16777042,-16777041,-16777041,-16777041,-16777041,-16777041,-16777041,-16777040,-16777063,-16777072,-16777067,-16777067,-16777057,-16777057,-16777058,-16777058,-16777072,-16777072,-16777070,-16777070,-16777123,-16777123,-16777123,-16777022,-16777037,-16777041,-16777041,-16777041,-16777041,-16777041,-16777040,-16777045,-16777057,-16777072,-16777073,-16777073,-16777061,-16777061,-16777057,-16777057,-16777071,-16777071,-16777083,-16777083,-16777118,-16777118,-16777120,-16777027,-16777027,-16777041,-16777041,-16777041,-16777041,-16777041,-16777040,-16777057,-16777058,-16777072,-16777072,-16777072,-16777072,-16777072,-16777058,-16777057,-16777071,-16777072,-16777117,-16777117,-16777118,-16777118,-16777052,-16777027,-16777026,-16777032,-16777042,-16777041,-16777041,-16777040,-16777051,-16777059,-16777058,-16777063,-16777072,-16777072,-16777073,-16777073,-16777065,-16777085,-16777091,-16777100,-16777121,-16777121,-16777118,-16777122,-16777022,-16777027,-16777027,-16777026,-16777037,-16777040,-16777040,-16777044,-16777059,-16777058,-16777058,-16777057,-16777072,-16777072,-16777072,-16777071,-16777080,-16777108,-16777107,-16777119,-16777119,-16777118,-16777118,-16777123,-16777027,-16777027,-16777027,-16777027,-16777026,-16777040,-16777040,-16777056,-16777058,-16777058,-16777058,-16777058,-16777072,-16777072,-16777072,-16777072,-16777102,-16777104,-16777104,-16777105,-16777119,-16777118,-16777118,-16777057,-16777027,-16777027,-16777025,-16777025,-16777043,-16777050,-16777058,-16777067,-16777057,-16777057,-16777058,-16777058,-16777064,-16777072,-16777071,-16777090,-16777106,-16777104,-16777104,-16777103,-16777110,-16777119,-16777121,-16777023,-16777026,-16777026,-16777032,-16777032,-16777060,-16777059,-16777074,-16777073,-16777060,-16777060,-16777058,-16777058,-16777057,-16777072,-16777078,-16777107,-16777104,-16777104,-16777104,-16777104,-16777103,-16777116,-16777125,-16777026,-16777025,-16777025,-16777055,-16777055,-16777058,-16777058,-16777072,-16777072,-16777071,-16777071,-16777057,-16777057,-16777058,-16777073,-16777101,-16777104,-16777104,-16777104,-16777104,-16777104,-16777104,-16777105,-16777059,-16777024,-16777042,-16777042,-16777060,-16777060,-16777058,-16777058,-16777072,-16777072,-16777073,-16777073,-16777065,-16777065,-16777055,-16777062,-16777112,-16777109,-16777109,-16777109,-16777109,-16777109,-16777109,-16777108,-16777029,-16777032,-16777060,-16777060,-16777058,-16777058,-16777058,-16777058,-16777072,-16777072,-16777072,-16777072,-16777072,-16777072,-16777065,-16777065,-16777093,-16777093,-16777093,-16777093,-16777093,-16777093,-16777093,-16777093,-16777065,-16777065,-16777058,-16777058,-16777058,-16777058,-16777058,-16777058,-16777072,-16777072,-16777072,-16777072,-16777071,-16777071,-16777108,-16777115,-16777047,-16777047,-16777047,-16777047,-16777047,-16777047,-16777047,-16777047,-16777068,-16777076,-16777064,-16777064,-16777057,-16777057,-16777058,-16777058,-16777072,-16777072,-16777070,-16777070,-16777092,-16777092,-16777124,-16777069,-16777039,-16777038,-16777038,-16777038,-16777038,-16777038,-16777038,-16777037,-16777057,-16777072,-16777073,-16777073,-16777059,-16777059,-16777058,-16777058,-16777072,-16777072,-16777076,-16777076,-16777121,-16777121,-16777119,-16777024,-16777040,-16777041,-16777041,-16777041,-16777041,-16777041,-16777041,-16777042,-16777058,-16777073,-16777072,-16777072,-16777069,-16777069,-16777057,-16777055,-16777070,-16777070,-16777109,-16777109,-16777119,-16777119,-16777128,-16777026,-16777029,-16777042,-16777041,-16777041,-16777041,-16777041,-16777040,-16777055,-16777058,-16777066,-16777072,-16777072,-16777073,-16777073,-16777063,-16777075,-16777084,-16777090,-16777122,-16777122,-16777118,-16777118,-16777070,-16777027,-16777026,-16777035,-16777042,-16777041,-16777041,-16777040,-16777048,-16777059,-16777058,-16777057,-16777072,-16777072,-16777072,-16777072,-16777075,-16777106,-16777105,-16777119,-16777118,-16777118,-16777118,-16777119,-16777024,-16777027,-16777027,-16777026,-16777040,-16777041,-16777041,-16777042,-16777059,-16777058,-16777058,-16777058,-16777073,-16777072,-16777072,-16777071,-16777097,-16777106,-16777105,-16777108,-16777119,-16777118,-16777118,-16777128,-16777025,-16777027,-16777027,-16777026,-16777028,-16777040,-16777039,-16777053,-16777058,-16777058,-16777058,-16777058,-16777067,-16777072,-16777071,-16777083,-16777107,-16777104,-16777104,-16777103,-16777113,-16777119,-16777118,-16777075,-16777027,-16777027,-16777025,-16777025,-16777036,-16777047,-16777051,-16777064,-16777057,-16777057,-16777058,-16777058,-16777058,-16777072,-16777074,-16777105,-16777104,-16777104,-16777104,-16777104,-16777104,-16777118,-16777118,-16777025,-16777027,-16777027,-16777027,-16777027,-16777059,-16777058,-16777073,-16777072,-16777058,-16777058,-16777057,-16777057,-16777057,-16777073,-16777095,-16777105,-16777104,-16777104,-16777104,-16777104,-16777104,-16777108,-16777129,-16777025,-16777025,-16777025,-16777049,-16777049,-16777059,-16777058,-16777073,-16777072,-16777068,-16777068,-16777063,-16777063,-16777058,-16777067,-16777106,-16777104,-16777104,-16777104,-16777104,-16777104,-16777104,-16777103,-16777077,-16777027,-16777037,-16777037,-16777061,-16777061,-16777058,-16777058,-16777072,-16777072,-16777073,-16777073,-16777072,-16777072,-16777059,-16777059,-16777103,-16777103,-16777103,-16777103,-16777103,-16777103,-16777103,-16777103,-16777028,-16777027,-16777058,-16777058,-16777058,-16777058,-16777058,-16777058,-16777072,-16777072,-16777072,-16777072);\n\n      vec2 texPos = fragCoord-bgTexture_Adress;\n      buff = UnpackColors(bgTexture[ int(texPos.y)*24+int(texPos.x)]);\n    }  \n\n  }\n\n\n  fragColor = buff;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}