{
    "Shader": {
        "info": {
            "date": "1676747689",
            "description": "Fork from https://www.shadertoy.com/view/4s3SRN",
            "flags": 32,
            "hasliked": 0,
            "id": "dt2Xzt",
            "likes": 13,
            "name": "Banger sponge",
            "published": 3,
            "tags": [
                "fractal",
                "camera",
                "spline",
                "menger",
                "curve",
                "catmullrom"
            ],
            "usePreview": 0,
            "username": "rcargou",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "vec3 saturate(vec3 x)\n{\n    return clamp(x, vec3(0.0), vec3(1.0));\n}\n\nvec4 cubic(float x)\n{\n    float x2 = x * x;\n    float x3 = x2 * x;\n    vec4 w;\n    w.x =   -x3 + 3.0*x2 - 3.0*x + 1.0;\n    w.y =  3.0*x3 - 6.0*x2       + 4.0;\n    w.z = -3.0*x3 + 3.0*x2 + 3.0*x + 1.0;\n    w.w =  x3;\n    return w / 6.0;\n}\n\nvec4 BicubicTexture(in sampler2D tex, in vec2 coord)\n{\n\tvec2 resolution = iResolution.xy;\n\n\tcoord *= resolution;\n\n\tfloat fx = fract(coord.x);\n    float fy = fract(coord.y);\n    coord.x -= fx;\n    coord.y -= fy;\n\n    fx -= 0.5;\n    fy -= 0.5;\n\n    vec4 xcubic = cubic(fx);\n    vec4 ycubic = cubic(fy);\n\n    vec4 c = vec4(coord.x - 0.5, coord.x + 1.5, coord.y - 0.5, coord.y + 1.5);\n    vec4 s = vec4(xcubic.x + xcubic.y, xcubic.z + xcubic.w, ycubic.x + ycubic.y, ycubic.z + ycubic.w);\n    vec4 offset = c + vec4(xcubic.y, xcubic.w, ycubic.y, ycubic.w) / s;\n\n    vec4 sample0 = texture(tex, vec2(offset.x, offset.z) / resolution);\n    vec4 sample1 = texture(tex, vec2(offset.y, offset.z) / resolution);\n    vec4 sample2 = texture(tex, vec2(offset.x, offset.w) / resolution);\n    vec4 sample3 = texture(tex, vec2(offset.y, offset.w) / resolution);\n\n    float sx = s.x / (s.x + s.y);\n    float sy = s.z / (s.z + s.w);\n\n    return mix( mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);\n}\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel1, coord).rgb;   \n}\n\nvec3 BloomFetch(vec2 coord)\n{\n \treturn BicubicTexture(iChannel2, coord).rgb;   \n}\n\nvec3 Grab(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord /= scale;\n    coord -= offset;\n\n    return BloomFetch(coord);\n}\n\nvec2 CalcOffset(float octave)\n{\n    vec2 offset = vec2(0.0);\n    \n    vec2 padding = vec2(10.0) / iResolution.xy;\n    \n    offset.x = -min(1.0, floor(octave / 3.0)) * (0.25 + padding.x);\n    \n    offset.y = -(1.0 - (1.0 / exp2(octave))) - padding.y * octave;\n\n\toffset.y += min(1.0, floor(octave / 3.0)) * 0.35;\n    \n \treturn offset;   \n}\n\nvec3 GetBloom(vec2 coord)\n{\n \tvec3 bloom = vec3(0.0);\n    \n    //Reconstruct bloom from multiple blurred images\n    bloom += Grab(coord, 1.0, vec2(CalcOffset(0.0))) * 1.0;\n    bloom += Grab(coord, 2.0, vec2(CalcOffset(1.0))) * 1.5;\n\tbloom += Grab(coord, 3.0, vec2(CalcOffset(2.0))) * 1.0;\n    bloom += Grab(coord, 4.0, vec2(CalcOffset(3.0))) * 1.5;\n    bloom += Grab(coord, 5.0, vec2(CalcOffset(4.0))) * 1.8;\n    bloom += Grab(coord, 6.0, vec2(CalcOffset(5.0))) * 1.0;\n    bloom += Grab(coord, 7.0, vec2(CalcOffset(6.0))) * 1.0;\n    bloom += Grab(coord, 8.0, vec2(CalcOffset(7.0))) * 1.0;\n\n\treturn bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = ColorFetch(uv);\n\n    color += GetBloom(uv) * 0.12;\n    \n    //color *= 2.0;\n    \n\n    //Tonemapping and color grading\n    color = pow(color, vec3(1.5));\n    color = color / (1.0 + color);\n    color = pow(color, vec3(1.0 / 1.5));\n\n    \n    color = mix(color, color * color * (3.0 - 2.0 * color), vec3(1.0));\n    color = pow(color, vec3(1.3, 1.20, 1.0));    \n\n\tcolor = saturate(color * 1.01);\n    \n    color = pow(color, vec3(0.7 / 2.2));\n    \n    fragColor = vec4(color, 1.0);\n    \n //   fragColor = texture(iChannel1, uv);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\nfloat hash11( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat hash31(vec3 p) {\n   \tfloat h = dot(p,vec3(127.1,311.7, 21.));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat hash21( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nvec3 hash13(float n) {\n    float n1 = n;\n    float n2 = hash11(n);\n    float n3 = hash11(n2);\n    return vec3(hash11(n1),hash11(n2),hash11(n3));\n}\nvec3 hash33(vec3 p){ \n    \n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n); \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Fork of \"Fractal Flythrough\" by Shane. https://shadertoy.com/view/4s3SRN\n// 2023-02-13 22:36:13\n// Sorry I got rid of the comment because it helps me navigate the code,\n// but go see the original from Shane for amazing explaination\n// Smooth minimum function. There are countless articles, but IQ explains it best here:\n// https://iquilezles.org/articles/smin\nfloat sminP( float a, float b, float s ){\n\n    float h = clamp( 0.5+0.5*(b-a)/s, 0.0, 1.0 );\n    return mix( b, a, h ) - s*h*(1.0-h);\n}\nvec3 stripCols(float t, float z) {\n    vec3 cols[3];\n    cols[0] = vec3(0.506,0.780,0.255) ;\n    cols[1] = vec3(.106,0.280,0.255) ;\n    cols[2] = vec3(0.906,0.30,1.255) ;\n    \n    int id = int( floor(mod(t / 12., 3.)) );\n    id += int(z / 10.);\n    id = id % 3;\n    return cols[id];\n}\nvec2 getPhase() {\n//    return vec2( 0., 0. );\n    float t = iTime * 2.;\n    float i = smoothstep(0.75, 1.28, abs ( mod(t / 16. - t / 8., 2.) - 1.) );\n    return vec2( floor( mod(t / 16., 2.) ),  i );\n}\n\nconst float FAR = 50.0; // Far plane.\n\nfloat objID = 0.; // Wood = 1., Metal = 2., Gold = 3..\nfloat hash( float n ){ return fract(cos(n)*45758.5453); }\n\nfloat pulseHalf() {\n    return 1.;\n}\n\nfloat pulse() {\n\n    return pow( ( sin(iTime * 5.) + 1. ) * .5, 2.) * .75 + .25;\n}\n\nfloat pulseFast() {\n    return pow( ( sin(iTime * 10.) + 1. ) * .5, 4.) * .75 + .25;\n}\n\nfloat backStars(vec2 uv) {\n\n    uv.y+=cos(uv.x * 1. +0.) / 4.;\n    float ret = 0.;\n    uv.x -= iTime / 4.;\n    \n    for (int i = 0; i < 2; ++i) {\n        uv *= 3.;\n        float rep = .2;\n\n        vec2 m_uv = mod(uv, rep) - rep / 2.;\n        vec2 m_id = floor( uv / rep);\n        \n        float id1 = hash21(m_id / 123.321);\n     //   float id2 = hash22(m_id / 123.321); \n        float star = smoothstep(0.02, 0.01, length(m_uv) );\n        if (id1 > 0.98)\n            ret = star + ret;\n    }\n    return ret;\n}\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html\nvec3 tex3D(sampler2D t, in vec3 p, in vec3 n ){\n    \n    n = max(abs(n), 0.001);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(t, p.yz).xyz;\n    vec3 ty = texture(t, p.zx).xyz;\n    vec3 tz = texture(t, p.xy).xyz;\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. :)\n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return (tx*tx*n.x + ty*ty*n.y + tz*tz*n.z);\n    \n}\n\n\nfloat map(in vec3 q){\n    q.z/=.5;\n\n    // benef\n    if (getPhase().x == 1.) {\n        q*= rotateZ(iTime);\n        q.xy+=sin(q.z / 8. + sin(iTime / 512.)) * 2.;\n      }\n\n   if (length(max(abs(q.x), abs(q.y))) >11. && getPhase().x==0.) {\n      //     return 1.;\n   }\n\n   if (length(max(abs(q.x), abs(q.y))) <8.) {\n\n    // q*=2.;\n      // q.z+=iTime *32.;\n   }\n\n    vec3 p = abs(fract(q/4.)*4. - 2.);\n \tfloat tube = min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) -4./3. - .015;// + .05;\n    vec3 qq = abs(q);\n    float amp =  2. ;//+ sin(iTime) /2.;\n    \n    for (int i = 0; i < 3 ; ++i) {\n        // Layer two.\n        qq *=rotateZ( ( -iTime /8.) * float(getPhase().x == 1.) );\n        p = abs(fract(qq)*amp - amp/2.);\n        //d = max(d, min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) - s/3.);// + .025\n        tube = .15*(pulse()-.25)+max(tube, sminP(max(p.x, p.y), sminP(max(p.y, p.z), max(p.x, p.z), .05), .05) - 2./3.);// + .025\n        qq/=4.;\n        amp *= 1.5;\n     }\n     \n    float strip = step(p.x, .75)*step(p.y, .75)*step(p.z, .75);\n    tube -= (strip)*.025;     \n    \n    float repxy = 20.;// - 5.*pulse();\n    float s = .2*(pulse());\n    float repz = .051;//.2-pulse()/10.;\n    vec3 si = sign(q);\n    //q *= rotateY(si.x / 2.);\n   // q *= rotateX(-si.y/4.);\n   q.z/=2.;\n   \n   q.y +=mix( 1.5*sin(q.z * 1. + iTime * 16.) * sin(iTime * 4.), abs(fract(q.z * 2. + iTime * 8.) - .5) * 2., pulse() - .25);\n  // q.y += ;\n   q *= rotateZ(3.1415/4.);\n   q.xy +=5.*sign(q.xy);\n   vec3 qball = abs(fract(q/( vec3(repxy, repxy, repz) ))*vec3(repxy, repxy, repz) - vec3(repxy/2., repxy/2., repz/2.));\n      \n   float d = length(qball) - s;\n   // return d;\n    objID = strip;\n    \n    objID += step(d, tube) * 3.;\n    return min(tube, d);\n   return (tube);\n}\n\nfloat trace(in vec3 ro, in vec3 rd){\n\n    float t = 0., h;\n    for(int i = 0; i < 50; i++){\n    \n        h = map(ro+rd*t);\n        // Note the \"t*b + a\" addition. Basically, we're putting less emphasis on accuracy, as\n        // \"t\" increases. It's a cheap trick that works in most situations... Not all, though.\n        if(abs(h)<.001*(t*.25 + 1.) || t>FAR) break; // Alternative: 0.001*max(t*.25, 1.)\n        t += h*1.;\n        \n    }\n\n    return t;\n}\n\nvec3 calcNormal(in vec3 p) {\n\tconst vec2 e = vec2(0.005, 0);\n\treturn normalize(vec3(map(p + e.xyy) - map(p - e.xyy), map(p + e.yxy) - map(p - e.yxy),\tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \n    \n\tvec2 u = (fragCoord - iResolution.xy*0.5)/iResolution.y;\n    \n    \n    vec3  ro = vec3(0., 0., 1. + iTime *8.);\n    vec3 lk = vec3(0., 0., 2. + iTime*8.);\n    vec3 lp = lk;\n    // Using the above to produce the unit ray-direction vector.\n    float FOV =6.57 + pulse(); // FOV - Field of view.\n    vec3 fwd = normalize(lk-ro);\n    vec3 rgt = normalize(vec3(fwd.z, 0, -fwd.x));\n    vec3 up = (cross(fwd, rgt));\n    \n        // Unit direction ray.\n    vec3 rd = normalize(fwd + FOV*(u.x*rgt + u.y*up));\n    \n    \n    // Raymarch the scene.\n    float t = trace(ro, rd);\n    \n    // Initialize the scene color.\n    vec3 col = vec3(0);\n    \n\n    float lum = 0.;\n    // Scene hit, so color the pixel. Technically, the object should always be hit, so it's tempting to\n    // remove this entire branch... but I'll leave it, for now.\n    if(t<FAR){\n        \n        // This looks a little messy and haphazard, but it's really just some basic lighting, and application\n        // of the following material properties: Wood = 1., Metal = 2., Gold = 3..\n    \n        float ts = 1.;  // Texture scale.\n        \n        // Global object ID. It needs to be saved just after the raymarching equation, since other \"map\" calls,\n        // like normal calculations will give incorrect results. Found that out the hard way. :)\n        float saveObjID = objID; \n        \n        \n        vec3 pos = ro + rd*t; // Scene postion.\n        vec3 nor = calcNormal(pos); // Normal.\n        vec3 sNor = nor;\n\n        // Reflected ray. Note that the normal is only half bumped. It's fake, but it helps\n        // taking some of the warping effect off of the reflections.\n        vec3 ref = reflect(rd, normalize(sNor*.5 + nor*.5)); \n         \n        \n\t\tcol = tex3D(iChannel0, pos*ts, nor)* vec3(0.925,0.388,0.067); // Texture pixel at the scene postion.\n        \n        \n        vec3  li = lp - pos; // Point light.\n        float lDist = max(length(li), .001); // Surface to light distance.\n        float atten = 1./(1.0 + lDist*0.125 + lDist*lDist*.05); // Light attenuation.\n        li /= lDist; // Normalizing the point light vector.\n        \n        float occ = 1.;//calcAO( pos, nor ); // Occlusion.\n\t\t\n        float dif = clamp(dot(nor, li), 0.0, 1.0); // Diffuse.\n        dif = pow(dif, 4.)*2.;\n        float spe = pow(max(dot(reflect(-li, nor), -rd), 0.), 8.); // Object specular.\n        float spe2 = spe*spe; // Global specular.\n        \n        float refl = .35; // Reflection coefficient. Different for different materials.\n\n            \n\n        // Reflection color. Mostly fake.\n        // Cheap reflection: Not entirely accurate, but the reflections are pretty subtle, so not much \n        // effort is being put in.\n        float rt = 0.;//refTrace(pos + ref*0.1, ref); // Raymarch from \"sp\" in the reflected direction.\n        float rSaveObjID = objID; // IDs change with reflection. Learned that the hard way. :)\n        vec3 rsp = pos + ref*rt; // Reflected surface hit point.\n        vec3 rsn = calcNormal(rsp); // Normal at the reflected surface. Too costly to bump reflections.\n        vec3 rCol = tex3D(iChannel0, rsp*ts, rsn); // Texel at \"rsp.\"\n        vec3 rLi = lp-rsp;\n        float rlDist = max(length(rLi), 0.001);\n        rLi /= rlDist;\n        float rDiff = max(dot(rsn, rLi), 0.); // Diffuse light at \"rsp.\"\n        rDiff = pow(rDiff, 4.)*2.;\n        float rAtten = 1./(1. + rlDist*0.125 + rlDist*rlDist*.05);\n        \n        if(rSaveObjID <  1.){\n         //   lum = 2.;\n         lum = 0.;\n            col *= 1.*vec3(0.549,0.475,0.557);\n        } else if (rSaveObjID < 1.5){\n            col = stripCols(iTime, pos.z) * pulseFast();\n            lum = 5.*pulseFast();\n        } else {\n            col = vec3(0.169,0.745,0.867);\n            lum = 10. * (pulse()-.25) * (1.+sin(pos.z * 5.) / 2.);\n        }\n        col += 1.3*vec3(0.169,0.745,0.867) * ( pulse() - .25);\n        col +=1.1*stripCols(iTime, pos.z) * ( pulseFast() - .25);\n//        if (nor.z < 0.)\n        rCol *= (rDiff + .35)*rAtten; // Reflected color. Not accurate, but close enough.         \n        \n\n         if(length(pos.xy) > 20.)\n            col *=2.;\n        // Combining everything together to produce the scene color.\n        col = col*(dif + .35  + vec3(.35, .45, .5)*spe*2.) + vec3(.7, .9, 1)*spe2 * 2. + rCol*refl;\n  //      col *= occ* ( atten + pulse() - .25); // Applying occlusion.\n            col *= occ* ( atten); // Applying occlusion.\n        \n    }    else{ col=vec3( backStars(u * 4.)); lum = col.r*20.; }\n    // Applying some very slight fog in the distance. This is technically an inside scene...\n    // Or is it underground... Who cares, it's just a shader. :)\n    //col = mix(min(col, 1.), vec3(0), 1.-exp(-t*t/FAR/FAR*20.));//smoothstep(0., FAR-20., t)\n   // col = mix(min(col, 1.), vec3(0), smoothstep(0., FAR-35., t));//smoothstep(0., FAR-20., t)\n    \n//        col.xyz = helix(vec2(u)).xyz;\n    \n        \n    // Done.\n    fragColor = vec4(pow( (max(col, 0.)), vec3( .9 ) ), lum);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//First bloom pass, mipmap tree thing\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel0, coord).rgb * texture(iChannel0, coord).w;   \n}\n\nvec3 Grab1(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = ColorFetch(coord);\n\n    return color;\n}\n\nvec3 Grab4(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = vec3(0.0);\n    float weights = 0.0;\n    \n    const int oversampling = 4;\n    \n    for (int i = 0; i < oversampling; i++)\n    {    \t    \n        for (int j = 0; j < oversampling; j++)\n        {\n\t\t\tvec2 off = (vec2(i, j) / iResolution.xy + vec2(0.0) / iResolution.xy) * scale / float(oversampling);\n            color += ColorFetch(coord + off);\n            \n\n            weights += 1.0;\n        }\n    }\n    \n    color /= weights;\n    \n    return color;\n}\n\nvec3 Grab8(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = vec3(0.0);\n    float weights = 0.0;\n    \n    const int oversampling = 8;\n    \n    for (int i = 0; i < oversampling; i++)\n    {    \t    \n        for (int j = 0; j < oversampling; j++)\n        {\n\t\t\tvec2 off = (vec2(i, j) / iResolution.xy + vec2(0.0) / iResolution.xy) * scale / float(oversampling);\n            color += ColorFetch(coord + off);\n            \n\n            weights += 1.0;\n        }\n    }\n    \n    color /= weights;\n    \n    return color;\n}\n\nvec3 Grab16(vec2 coord, const float octave, const vec2 offset)\n{\n \tfloat scale = exp2(octave);\n    \n    coord += offset;\n    coord *= scale;\n\n   \tif (coord.x < 0.0 || coord.x > 1.0 || coord.y < 0.0 || coord.y > 1.0)\n    {\n     \treturn vec3(0.0);   \n    }\n    \n    vec3 color = vec3(0.0);\n    float weights = 0.0;\n    \n    const int oversampling = 16;\n    \n    for (int i = 0; i < oversampling; i++)\n    {    \t    \n        for (int j = 0; j < oversampling; j++)\n        {\n\t\t\tvec2 off = (vec2(i, j) / iResolution.xy + vec2(0.0) / iResolution.xy) * scale / float(oversampling);\n            color += ColorFetch(coord + off);\n            \n\n            weights += 1.0;\n        }\n    }\n    \n    color /= weights;\n    \n    return color;\n}\n\nvec2 CalcOffset(float octave)\n{\n    vec2 offset = vec2(0.0);\n    \n    vec2 padding = vec2(10.0) / iResolution.xy;\n    \n    offset.x = -min(1.0, floor(octave / 3.0)) * (0.25 + padding.x);\n    \n    offset.y = -(1.0 - (1.0 / exp2(octave))) - padding.y * octave;\n\n\toffset.y += min(1.0, floor(octave / 3.0)) * 0.35;\n    \n \treturn offset;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    vec3 color = vec3(0.0);\n    \n    /*\n    Create a mipmap tree thingy with padding to prevent leaking bloom\n   \t\n\tSince there's no mipmaps for the previous buffer and the reduction process has to be done in one pass,\n    oversampling is required for a proper result\n\t*/\n    color += Grab1(uv, 1.0, vec2(0.0,  0.0)   );\n    color += Grab4(uv, 2.0, vec2(CalcOffset(1.0))   );\n    color += Grab8(uv, 3.0, vec2(CalcOffset(2.0))   );\n    color += Grab16(uv, 4.0, vec2(CalcOffset(3.0))   );\n    color += Grab16(uv, 5.0, vec2(CalcOffset(4.0))   );\n    color += Grab16(uv, 6.0, vec2(CalcOffset(5.0))   );\n    color += Grab16(uv, 7.0, vec2(CalcOffset(6.0))   );\n    color += Grab16(uv, 8.0, vec2(CalcOffset(7.0))   );\n\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Horizontal gaussian blur leveraging hardware filtering for fewer texture lookups.\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel0, coord).rgb;   \n}\n\nfloat weights[5];\nfloat offsets[5];\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    weights[0] = 0.19638062;\n    weights[1] = 0.29675293;\n    weights[2] = 0.09442139;\n    weights[3] = 0.01037598;\n    weights[4] = 0.00025940;\n    \n    offsets[0] = 0.00000000;\n    offsets[1] = 1.41176471;\n    offsets[2] = 3.29411765;\n    offsets[3] = 5.17647059;\n    offsets[4] = 7.05882353;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    float weightSum = 0.0;\n    \n    if (uv.x < 1.12)\n    {\n        color += ColorFetch(uv) * weights[0];\n        weightSum += weights[0];\n\n        for(int i = 1; i < 5; i++)\n        {\n            vec2 offset = vec2(offsets[i]) / iResolution.xy;\n            color += ColorFetch(uv + offset * vec2(0.5, 0.0)) * weights[i];\n            color += ColorFetch(uv - offset * vec2(0.5, 0.0)) * weights[i];\n            weightSum += weights[i] * 2.0;\n        }\n\n        color /= weightSum;\n    }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Vertical gaussian blur leveraging hardware filtering for fewer texture lookups.\n\nvec3 ColorFetch(vec2 coord)\n{\n \treturn texture(iChannel0, coord).rgb;   \n}\n\nfloat weights[5];\nfloat offsets[5];\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    weights[0] = 0.19638062;\n    weights[1] = 0.29675293;\n    weights[2] = 0.09442139;\n    weights[3] = 0.01037598;\n    weights[4] = 0.00025940;\n    \n    offsets[0] = 0.00000000;\n    offsets[1] = 1.41176471;\n    offsets[2] = 3.29411765;\n    offsets[3] = 5.17647059;\n    offsets[4] = 7.05882353;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    float weightSum = 0.0;\n    \n    if (uv.x < 0.52)\n    {\n        color += ColorFetch(uv) * weights[0];\n        weightSum += weights[0];\n\n        for(int i = 1; i < 5; i++)\n        {\n            vec2 offset = vec2(offsets[i]) / iResolution.xy;\n            color += ColorFetch(uv + offset * vec2(0.0, 0.5)) * weights[i];\n            color += ColorFetch(uv - offset * vec2(0.0, 0.5)) * weights[i];\n            weightSum += weights[i] * 2.0;\n        }\n\n        color /= weightSum;\n    }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}