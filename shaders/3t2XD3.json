{
    "Shader": {
        "info": {
            "date": "1567330405",
            "description": "Base system for values-in-grid  games ( sudoku, suguru/tectonic, crosswords, ... )\nClick or arrow key: change current cell. Type key to enter value.Space/Del:  erase.\nFreehand notes allowed.\nSet grid size and valid range of numbers/letters/case in Common.",
            "flags": 48,
            "hasliked": 0,
            "id": "3t2XD3",
            "likes": 11,
            "name": "editable grid of values",
            "published": 3,
            "tags": [
                "game",
                "grid",
                "interaction",
                "utils",
                "tectonic",
                "sudoku",
                "suguru",
                "crosswords"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 819
        },
        "renderpass": [
            {
                "code": "// generic workflow for values-in-grid  games ( sudoku, suguru/tectonic, crosswords, ... ) self: https://www.shadertoy.com/view/3t2XD3\n\nvoid mainImage( out vec4 O, vec2 u ) // === manage display\n{\n    float s = cellsize;\n    vec2 U = u - offset,\n         C = mod(U,s), G = ceil(U /= s);    // G: cell ID   C: pixel in cell\n    vec4 data = T(G);                       // .x: value  .y: type (block ID)\n    \n                                            // --- draw grid\n    if (   C.x < border+thick && data.y != T(G-vec2(1,0)).y // thick borders at block transitions\n        || C.y < border+thick && data.y != T(G-vec2(0,1)).y ) border+=thick, U+=thick/2./s; \n    O = vec4( min(C.x,C.y) > border && U.x > border/s && U.x < N+border/s );\n  //O = vec4( smoothstep(-.5,.5,min(d - border, s*min (U.x,N+border/s-U.x))) ); // AA version\n    \n    if ( data.y >= 0.)                      // display cell type\n        O *= mix(vec4(1),hue(data.y/10.),.1);   // option: id -> bg = hue\n    else if (data.y == -2.) O -= O;         // black cell (e.g. crosswords)\n        \n    if ( T(0).zw==G && fract(3.*iTime)<.7 ) // --- flash current cell      \n        O.gb *= .8;\n                                            // --- display cell value\n    float v = char( fract(U)-border/2./s, \n                    int( minKey+ (data.x<-1. ? -2.-data.x:data.x) ) ).x;\n    if (data.x >= 0. )  if ( data.z > 0. ) O -= v; else O.rg -= v;\n    if (data.x < -1. )  O.gb -= v;\n\n    if (U.x>N) O += pInt(1.4*R.x/offset.x*(u-vec2(R.x-offset.x,0))/R.y, iTime).x; // --- timer\n\n    O = clamp(O,0.,1.);    \n    if (O==vec4(0)) O.g = Tb(u).x; else O.rb -= Tb(u).x;  // --- add draft layer  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === manage grid and interactions\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    \n    if (iFrame==0) {                 // --- init grid and controls\n        O = vec4(-1);                // O.x = value  O.y = cell type\n        // init values: for demo, random\n#define set(X,Y,v) if (U==vec2(X,Y)) O.x = v, O.z = 1. // O.z > 0 : not erasable\n        if (hash(U+.5)<.1) O.x = floor(mix(0.,10.,hash(U))), O.z = 1.;\n        // draw your blocks id here:\n        if ( abs( length(U-.5-N/2.)-N/4. ) < .5 ) O.y=1.; // mark a circle\n        if ( abs( length(U-.5-N/4.)-N/7. ) < .5 ) O.y=3.; // mark a small circle\n        if ( max(abs(U.x-2.),abs(U.y-9.))<1.5 )   O.y=5.; // mark a box\n        if ( ceil(U) == vec2(9,9) )               O.y=7.; // mark a cell\n        if ( ceil(U) == vec2(9,2) )               O.y=-2.;// black cell\n        // for demo, init cur cell:\n        if (U==vec2(0)) O.zw = vec2(6,5);\n        return;\n    }\n    \n    O = T(U);                        // recover prev state -----------------\n    \n    if (U==vec2(0)) {                // --- control active cell\n        if keyDown(37) if (--O.z < 1.) O.z += N;        //  with arrow keys\n        if keyDown(39) if (++O.z > N ) O.z -= N;\n        if keyDown(38) if (++O.w > N ) O.w -= N;\n        if keyDown(40) if (--O.w < 1.) O.w += N;\n        if ( iMouse.z>0. ) O.zw = ceil((iMouse.xy-offset)/cellsize); // or mouse\n    }\n        \n    if ( U == T(0).zw ) {            // --- write keyboard value in cell\n        if ( O.z > 0. ) return;      // can't edit initial values \n        for( float i = minKey; i <= maxKey; i++)\n            if keyDown(i) {\n                i = i-minKey +(maxKey>96. && i>64. && keyClick(16)?32.:0.); \n                // optional: entry validation.       \\ special case for shift (16) on letters :\n                O.x = i;\n                return; \n            }\n        if (keyDown(32) || keyDown(8) || keyDown(46)) O.x = -1.;  // erase cell\n    }        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define N 10.           // grid = NxN\nfloat border = 2.;      // line thickness in pixels\n#define thick  2.       // extra thickness for block borders\n#define minKey 48.      // digits: 48 -> 57  letters: 65 -> 90\n#define maxKey 122.     //                                 +32 to allow lowcase\n\n#define T(U)             texelFetch( iChannel0, ivec2(U), 0)\n#define Tb(U)            texelFetch( iChannel1, ivec2(U), 0)\n#define R               (iResolution.xy)\n#define cellsize        ( (R.y-border) / N )\n#define offset           vec2( (R.x-R.y)/2. , 0 )\n\n// === utils\n\n#define hash(p) fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\n// --- fonts & keyboard from https://www.shadertoy.com/view/llySRh\n\n#define keyToggle(ascii)  ( texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel3,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\nvec2 _p; int _c;  // draw character. NB: super-annoying iChan forbidden in Common -> macro compulsory\n#define char(p,c) (  _p=p, _c=c,                                            \\\n    _p.x<.0|| _p.x>1. || _p.y<0.|| _p.y>1. ? vec4(0,0,0,1e5)                \\\n\t: textureGrad( iChannel3, (_p/=16.) + fract( vec2(_c, 15-_c/16) / 16. ),\\\n                        dFdx(_p), dFdy(_p) ) )\nfloat _n; int _i; // draw numbers\n#define digit(p)   char(p - .5*vec2(_i--,0), 48+ int(fract(_n/=9.999999)*10.) )\n#define pInt(p,n) ( _n=n,_i=3, digit(p)+digit(p)+digit(p)+digit(p) )\n\n// --- hue from https://www.shadertoy.com/view/ll2cDc\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// === free draw notepad superimposed to grid ( user draft notes )\n\nfloat line(vec2 p, vec2 a,vec2 b) { // draw line segment. From  https://www.shadertoy.com/view/4dcfW8\n    float h = dot(p-=a, b-=a) / dot(b, b);                  // proj coord on line\n    return h==clamp(h, 0., 1.) ? max(0., 1.-length(p - b * h)) : 0.; // length = dist to line\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);\n    if (iFrame==0) { O = vec4(0); if (U==vec2(.5)) O.zw = vec2(-1); }\n    \n    if (U==vec2(.5)) O.zw = iMouse.z>0. ? iMouse.xy : vec2(-1);    // last curve pos or -1\n    if (iMouse.z>0. && T(0).z>0. ) O += line(U,T(0).zw,iMouse.xy); // draw from prev mouse pos\n\n    vec2 G = ceil( (U-offset)/cellsize ), C = Tb(0).zw;            // erase cell or margin\n    if (   ( G == C || (G.x<1. && C.x<1.)  || ( G.x>N && C.x>N ) )\n        && ( keyDown(32) || keyDown(8) || keyDown(46)) ) O -= O; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}