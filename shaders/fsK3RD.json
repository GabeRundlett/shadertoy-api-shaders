{
    "Shader": {
        "info": {
            "date": "1631200117",
            "description": "Visualizing something meant to be heard",
            "flags": 0,
            "hasliked": 0,
            "id": "fsK3RD",
            "likes": 8,
            "name": "Halo Music Visualizer",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "visualizer",
                "halo"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 527
        },
        "renderpass": [
            {
                "code": "//Math constants\n#define PI 3.14159\n#define TWO_PI 6.28318\n\n//Frequency range to which the halo reacts currently set to 0-520hz\n#define FREQ 512.0\n\n//Grabs frequency from the music texture\nfloat frequency(float x)\n{\n    return texture(iChannel0, vec2(x, 0)).r;\n}\n\n//Grabs smooth frequency from the music texture by averaging multiple neighboring frequency texels\nfloat smoothFrequency(float x, float smoothness)\n{\n    float f = frequency(x);\n    int accumulated = 1;\n    for(float i = 1.0 / FREQ; i <= smoothness; i += 1.0 / FREQ)\n    {\n        f += frequency(x + i);\n        f += frequency(x - i);\n        accumulated += 2;\n    }\n    return f / float(accumulated);\n}\n \n//Converts HSV to RGB (values of both goes from 0 to 1)\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Converts RGB to Grayscale (using the NTSC formula)\nfloat luma(vec3 color) \n{\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Calculate normalized uv coordinates (normalized meaning going from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvn = uv * 2.0 - 1.0;\n    uvn.x *= iResolution.x / iResolution.y;\n    \n    //Calculating angle from normalized uv coordinate using atan\n    float angle = atan(normalize(uvn).x, normalize(uvn).y);\n    float angleNormalized = angle / PI; //Angle from 0 to 1 instead of 0 to two pi\n\n    //Using multiple techniques to draw shapes using normalized uv coordinates (halo shape in this case)\n    float inner_halo = max(pow(1.0 - abs(length(uvn) - 0.6), 8.0), 0.0) * 2.0;\n    inner_halo *= inner_halo;\n    \n    //Adding outer halo to the original middle one\n\tfloat outer_halo = max(pow(abs(length(uvn)), 4.0), 0.0) * 0.25;\n    float halo = inner_halo + outer_halo;\n    \n    //Grabs smooth frequnecy from texture using normalized angle as a texture coordinate\n    float freq = smoothFrequency(abs(angleNormalized), 0.05);\n    \n    //Getting final color by multiplying two halos by their colors \n    //which we grab as RGB using angle + time as hue parameter and other SV parameters set to 1\n    //Then we multiply result by frequency to get dynamicly changing brightness depending on frequency\n    vec3 col = halo * hsv2rgb(vec3(angleNormalized * 0.5 + 0.5 - iTime * 0.1, 1.0, 1.0)) * freq;\n    \n    //Some color tweaking for more vibrant colors\n    col = pow(col, vec3(2)); //This makes colors more contrasty\n    col += max(length(col) / sqrt(3.0) - 1.0, 0.0); //This increases brightness\n    //col = sqrt(col); //Slightly brighter and blended colors, uncomment if you prefer this\n    \n    fragColor = vec4(col,1.0); //Final result\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}