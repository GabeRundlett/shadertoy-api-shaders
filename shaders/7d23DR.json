{
    "Shader": {
        "info": {
            "date": "1617269072",
            "description": "License CC0: 2D Amoebas\nWhile messing around I stumbled on a simple \"amoeba\" lika effect.\nNothing complicated but nice IMHO so I shared\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7d23DR",
            "likes": 13,
            "name": "2D amoebas",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "// License CC0: 2D Amoebas\n//  While messing around I stumbled on a simple \"amoeba\" lika effect.\n//  Nothing complicated but nice IMHO so I shared\n\n#define RESOLUTION iResolution\n#define TIME       iTime\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n// IQ's polynominal min\nfloat pmin(float a, float b, float k) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// http://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n\nfloat df(vec2 p) {\n  // Generates a grid of dots\n  vec2 dp = p;\n  vec2 dn = mod2(dp, vec2(0.25));\n  float ddots = length(dp);\n  \n  // Blobs\n  float dblobs = 1E6;\n  for (int i = 0; i < 5; ++i) {\n    float dd = circle(p-1.0*vec2(sin(TIME+float(i)), sin(float(i*i)+TIME*sqrt(0.5))), 0.1);\n    dblobs = pmin(dblobs, dd, 0.35);\n  }\n\n  float d = 1E6;\n  d = min(d, ddots);\n  // Smooth min between blobs and dots makes it look somewhat amoeba like\n  d = pmin(d, dblobs, 0.35);\n  return d;\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(1.0/2.2)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n \n  const float z = 1.4;\n  float d = df(p/z)*z; \n  \n  vec3 col = vec3(0.33);\n  col = mix(col, vec3(.0), smoothstep(-aa, aa, -d));\n\n  col = postProcess(col, q);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}