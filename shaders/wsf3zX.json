{
    "Shader": {
        "info": {
            "date": "1547016401",
            "description": "Airfoil accelerates to supersonic speeds.\nYou can set the Mach number to whatever you want in the common tab. \nIn order to accommodate super sonic flow, the simulation is quite viscous. \nAdvection is computed separately\nMouse to reset.",
            "flags": 32,
            "hasliked": 0,
            "id": "wsf3zX",
            "likes": 25,
            "name": "Super Sonic",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 1243
        },
        "renderpass": [
            {
                "code": "vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    R = iResolution.xy;\n    vec4 \n        o = T(U),\n        a = T(U+vec2(1,0)),\n        b = T(U-vec2(1,0)),\n        c = T(U+vec2(0,1)),\n        d = T(U-vec2(0,1));\n        \n    vec4 g = vec4(a.zw-b.zw,c.zw-d.zw);\n    vec2 dz = g.xz;\n    vec2 dw = g.yw;\n    vec3 n = normalize(vec3(dz,.05));\n    vec4 tx = texture(iChannel2,reflect(vec3(0,0,1),n));\n    C = abs(cos(o.w*vec4(140,162,175,20)))*(0.7+0.3*tx);\n    vec2 u = U;\n    for (int i = 0; i < 50; i++) {\n        U -= T(U).xy;\n    }\n    U.x-= float(iFrame)*Mach_Number;\n    U = sin(U*.2);\n    vec2 w=fwidth(U)*1.2;\n    C *= smoothstep(-w.x,w.x,abs(U.x))*smoothstep(-w.y,w.y,abs(U.y));\n    U = u;\n   float t = 0.5+0.3*sin(iTime);\n   if (iMouse.z > 0.) t = 0.5+0.3*(iMouse.y/R.y*2.-1.);\n   float si = sin(t), co = cos(t);\n   mat2 ro = mat2(co,-si,si,co);\n   U = (U-vec2(0.25,0.5)*R)*ro;\n   U.x *= 0.1;\n   U.y -= 20.*exp(-3e-2*U.x*U.x);\n   if (length(U) < 6.) {\n    \tC = abs(sin(10.*o.w+o.z*vec4(1,2,5,4)));\n   }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fluid\nvec2 R;\nvec4 T (vec2 U) { return texture(iChannel0,U/R);}\nvec4 X (vec2 U, in vec4 C, vec2 r) {\n\tvec4 n = T(U+r); // neighbor\n    vec2 rp = vec2(-r.y,r.x); // perpiduclar to r\n    return vec4(\n        \t r *(n.z-C.z) + // pressure term\n             rp*(n.w*C.w) + // spin term \n        \t mix(C.xy,n.xy,0.3),//viscous term\n        dot(r ,n.xy-C.xy)+n.z, // pressure calculation\n    \tdot(rp,n.xy-C.xy)-(n.w));// spin calculation\n    \n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n   C = T(U);\n   float r2 = sqrt(2.)*0.5; // without renormalization, the neighborhood needs to be equidistant to the cell\n   // calculate the sum of all neighbor interactions\n   C = X(U,C,vec2( 1, 0)) + \n       X(U,C,vec2( 0, 1))+\n       X(U,C,vec2(-1, 0))+\n       X(U,C,vec2( 0,-1))+\n       X(U,C,vec2( r2, r2))+\n       X(U,C,vec2(-r2, r2))+\n       X(U,C,vec2(-r2,-r2))+\n       X(U,C,vec2( r2,-r2));\n   C /= 8.; // divide by the neighborhood size\n  \t\n    \n    \n   if (iFrame < 1||U.x < 4.||R.x-U.x < 4.)\n       C = vec4(Mach_Number,0,0,0);\n   if (U.y < 4.||R.y-U.y < 4.) C.w = 0.;\n   if (iFrame < 1) C.x = 0.;\n   float t = 0.5+0.3*sin(iTime);\n   if (iMouse.z > 0.) t = 0.5+0.3*(iMouse.y/R.y*2.-1.);\n   float si = sin(t), co = cos(t);\n   mat2 ro = mat2(co,-si,si,co);\n   U = (U-vec2(0.25,0.5)*R)*ro;\n   U.x *= 0.1;\n   U.y -= 20.*exp(-3e-2*U.x*U.x);\n   if (length(U) < 6.) C.xy *= 0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Advection Step\nvec2 R;\nvec4 T (vec2 U) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n   #define N 16.\n   for (float i = 0.; i < N; i++)\n       U -= T(U).xy/N;\n   C = T(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fluid\nvec2 R;\nvec4 T (vec2 U) { return texture(iChannel0,U/R);}\nvec4 X (vec2 U, in vec4 C, vec2 r) {\n\tvec4 n = T(U+r); // neighbor\n    vec2 rp = vec2(-r.y,r.x); // perpiduclar to r\n    return vec4(\n        \t r *(n.z-C.z) + // pressure term\n             rp*(n.w*C.w) + // spin term \n        \t mix(C.xy,n.xy,0.3),//viscous term\n        dot(r ,n.xy-C.xy)+n.z, // pressure calculation\n    \tdot(rp,n.xy-C.xy)-(n.w));// spin calculation\n    \n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n   C = T(U);\n   float r2 = sqrt(2.)*0.5; // without renormalization, the neighborhood needs to be equidistant to the cell\n   // calculate the sum of all neighbor interactions\n   C = X(U,C,vec2( 1, 0)) + \n       X(U,C,vec2( 0, 1))+\n       X(U,C,vec2(-1, 0))+\n       X(U,C,vec2( 0,-1))+\n       X(U,C,vec2( r2, r2))+\n       X(U,C,vec2(-r2, r2))+\n       X(U,C,vec2(-r2,-r2))+\n       X(U,C,vec2( r2,-r2));\n   C /= 8.; // divide by the neighborhood size\n  \t\n    \n    \n   if (iFrame < 1||U.x < 4.||R.x-U.x < 4.)\n       C = vec4(Mach_Number,0,0,0);\n   if (U.y < 4.||R.y-U.y < 4.) C.w = 0.;\n   if (iFrame < 1) C.x = 0.;\n   float t = 0.5+0.3*sin(iTime);\n   if (iMouse.z > 0.) t = 0.5+0.3*(iMouse.y/R.y*2.-1.);\n   float si = sin(t), co = cos(t);\n   mat2 ro = mat2(co,-si,si,co);\n   U = (U-vec2(0.25,0.5)*R)*ro;\n   U.x *= 0.1;\n   U.y -= 20.*exp(-3e-2*U.x*U.x);\n   if (length(U) < 6.) C.xy *= 0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Advection Step\nvec2 R;\nvec4 T (vec2 U) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n   #define N 16.\n   for (float i = 0.; i < N; i++)\n       U -= T(U).xy/N;\n   C = T(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define Mach_Number 1.\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}