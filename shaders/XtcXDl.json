{
    "Shader": {
        "info": {
            "date": "1482105362",
            "description": " Classic unlimited bobs/infinite sprites effect.",
            "flags": 48,
            "hasliked": 0,
            "id": "XtcXDl",
            "likes": 10,
            "name": "Unlimited Bobs",
            "published": 3,
            "tags": [
                "fake",
                "oldskool",
                "infinite",
                "sprites",
                "bobs"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 854
        },
        "renderpass": [
            {
                "code": "#define get(v,i) (i==0)?v[0]:(i==1)?v[1]:(i==2)?v[2]:(i==3)?v[3]:0.0\n#define unpack(c) (mod(vec3(c) / vec3(0x10000,0x100,0x1),vec3(256))/256.0)\n\n#define CH_GRID 16.0\n#define CH_SIZE vec2(0.04,0.08)\n#define NUM_PAGES 4\n#define INIT_FRAMES 8\n\nfloat dfChar(float id, vec2 uv)\n{\n    id = floor(id);\n    vec2 chSize = iChannelResolution[1].xy / CH_GRID;\n    vec2 chUV = vec2(mod(id, CH_GRID), CH_GRID - 1.0 - floor(id / CH_GRID)) * chSize;\n    \n    return texture(iChannel1, (chUV + uv*chSize)/iChannelResolution[1].xy,-99.0).a;\n}\n\nvec4 Number(float n, vec2 uv)\n{\n    float mag = floor(log(n)/log(10.0)+0.001);\n    float df = 0.0;\n    \n    vec2 chIdx = floor(uv/CH_SIZE);\n    if(chIdx.x >= 0.0 && chIdx.x <= mag && chIdx.y == 0.0)\n    {\n    \tuv = mod(uv, CH_SIZE)/CH_SIZE.y + vec2(0.25,0);\n    \n    \tfloat d = mod(n / pow(10.0, mag - chIdx.x), 10.0);\n        \n        float df = dfChar(48.0 + d, uv)-0.5;\n        float mask = smoothstep(0.05 ,0.04, df);\n        vec3 col = vec3(smoothstep(0.01, 0.00, df));\n        \n        return vec4(col, mask);\n    }\n    return vec4(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    int curFrame = iFrame - INIT_FRAMES;\n    curFrame = (curFrame < 0) ? 0 : curFrame;\n    \n    int pId = curFrame - NUM_PAGES * (curFrame / NUM_PAGES);\n    \n    vec4 pages = texture(iChannel0, uv / res);\n    \n    float frame = get(pages,pId);\n    \n    vec4 color = vec4(unpack(frame),1);\n    vec4 count = Number(float(curFrame / NUM_PAGES), uv);\n    \n    color.rgb = mix(color.rgb, count.rgb, count.a);\n    \n\tfragColor = color;  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//== Helpers ==\n//Get/Set a vector component by its index.\n#define get(v,i) (i==0)?v[0]:(i==1)?v[1]:(i==2)?v[2]:(i==3)?v[3]:0.0\n#define set(v,i,n) if(i==0){v[0] = n;}if(i==1){v[1] = n;}if(i==2){v[2] = n;}if(i==3){v[3] = n;}\n\n//Saturate (clamp 0-1)\n#define sat(x) clamp(x,0.0,1.0)\n\n//Pack/Unpack 24-bit colors into a float.\n#define pack(c) dot(clamp(floor(256.0*c),0.0,255.0)*vec3(0x10000,0x100,0x1),vec3(1))\n#define unpack(c) (mod(vec3(c) / vec3(0x10000,0x100,0x1),vec3(256))/256.0)\n\n//Checks whether the specified key is pressed.\n#define keydown(k) (texture(iChannel1,vec2(k,0)/256.0).r != 0.0)\n\n//== Settings ==\n//Prevents glitches caused by dropped frames. (calculates time using iFrame).\n#define FIXED_FRAME_TIME 1 //Prevents glitches caused by dropped frames\n#define FRAME_RATE 60.0\n\n//Number of movement frames (Max = 4 using RGBA components as buffers).\n#define NUM_PAGES 4\n#define INIT_FRAMES 8\n\nfloat tau = atan(1.0)*8.0;\n\nvec2 res = vec2(0);\nfloat ps = 0.0;\nfloat time = 0.0;\n\nvec3 rainbow(float x)\n{\n    vec3 col = vec3(0);\n    col.r = cos(x * tau - (0.0/3.0)*tau);\n    col.g = cos(x * tau - (1.0/3.0)*tau);\n    col.b = cos(x * tau - (2.0/3.0)*tau);\n    \n    return col * 0.5 + 0.5;\n}\n\nfloat sqr(float x)\n{\n    return x*x;\n}\n\nvec3 sphere(vec2 uv, float r)\n{\n    float h = sqrt(sat(1.0 - sqr(length(uv)/r)));\n\treturn normalize(vec3(uv / r, h));\n}\n\nvec4 sprite(vec3 color, vec2 pos, vec2 uv)\n{\n    float s = 0.02;\n    float mask = smoothstep(s, s-ps, length(uv));\n    \n    vec3 spos = vec3(pos, -1.0);\n    vec3 cpos = vec3(0);\n    vec3 ldir = normalize(cpos - spos);\n    vec3 cdir = normalize(cpos - spos + vec3(uv.xy,0));\n    \n    vec3 n = sphere(uv, s);\n    vec3 r = -reflect(cdir, n);\n    \n    float diff = dot(n, ldir);\n    float spec = dot(r, ldir);\n    \n    vec3 c = color * (diff * 0.6 + 0.1);\n    c += pow(max(0.0, spec), 8.0) * 0.8;\n    \n\treturn vec4(c, mask);\n}\n\nvec2 path(float x)\n{\n    vec2 p = vec2(0);\n    \n    x *= 0.5;\n    \n    p.x = cos(x*tau*0.405 + 1.57);\n    p.y = sin(x*tau*0.200);\n    \n\treturn p * res * 0.45;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    res = iResolution.xy / iResolution.y;\n\tps = 1.0/iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.y;\n    \n    #if(FIXED_FRAME_TIME == 0)\n    time = iTime;\n    #else\n    time = float(iFrame) / FRAME_RATE;\n    #endif\n    \n    int sId = iFrame;\n    int pId = iFrame - NUM_PAGES * (iFrame / NUM_PAGES);\n    \n    //Get the previous state of the pages.\n    vec4 pages = texture(iChannel0, uv / res);\n    \n    //Get the current page and unpack its RGB components.\n    float frame = get(pages, pId);\n    vec3 col = unpack(frame);\n    \n    //Render the current page\n    uv -= res/2.0;\n      \n    vec2 sprPos = path(time);\n    vec3 sprCol = rainbow(time);\n        \n\tvec4 spr = sprite(sprCol, sprPos, uv - sprPos);\n        \n    col = mix(col, spr.rgb, spr.a);\n    \n    //Pack the RGB components and update the current page.\n    frame = pack(col);\n    set(pages, pId, frame);\n\n    fragColor = pages;\n     \n    if(iFrame <= INIT_FRAMES || keydown(0x20))\n    {\n        vec3 bg = vec3((1.-length(uv))*0.1+0.15);\n        fragColor = vec4(pack(bg));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}