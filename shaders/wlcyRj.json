{
    "Shader": {
        "info": {
            "date": "1609462054",
            "description": "I modified this shader by polyrhythm\nhttps://www.shadertoy.com/view/MssyDf",
            "flags": 32,
            "hasliked": 0,
            "id": "wlcyRj",
            "likes": 1,
            "name": "z Reaction diffusion",
            "published": 3,
            "tags": [
                "cellular"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "#define COLOR_MIN 0.0\n#define COLOR_MAX 0.9\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).gr, 1., 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TIMESTEP 1.3\n//#define SPEED 1.\n\n//#define F (0.0345 * (2.-length(uv)*length(uv)))\n//#define F .009*smoothstep(20.,1.,length(uv))\n#define F (0.06+uv.x*.01)\n//#define K (0.055+uv.y*.0)\n#define K (0.06)\n//#define K (0.055+.04*smoothstep(.1, .99, length(uv)))\n//#define K 0.03+.05*smoothstep(.0,.5,length(uv))\n//#define K (0.1)\n//#define K .5*smoothstep(0.,2.,length(uv))\n#define Da (1.+uv.x*.0)\n#define Db (.2+uv.y*.0)\n#define RADIUS 5.\n\nvoid getVal(vec2 p, out vec2 val, out vec2 laplacian) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n\n  val = texture(iChannel0, uv).xy;\n  laplacian = vec2(0.);\n  float k_sum = 0.;\n  for(float i = -RADIUS; i <= RADIUS; i++){\n      for(float j = -RADIUS; j <= RADIUS; j++){\n          if(i==0. && j==0.) continue;\n          float k = 1./pow(length(vec2(i,j)), 1.);\n          //k *= abs(normalize(j)-normalize(i));\n          k *= abs(dot(normalize(uv), normalize(vec2(i,j))));\n          k_sum += k;\n          laplacian += texture(iChannel0, (p+vec2(i,j)) / r).xy * k;\n      }\n  }\n  laplacian /= k_sum;\n  laplacian += -1.0 * val;\n  laplacian *= 1.1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy) / iResolution.y;\n    \n    vec3 colour = vec3(0.0);\n    if (iFrame < 1) {\n        //if (length(fract(uv*5.)-.9)<.1) {\n        if (length(uv)<.1) {\n            colour = vec3(1.);\n        }\n    } else {\n     \tvec2 val, laplacian;\n        getVal(fragCoord.xy, val, laplacian);\n        \n        vec2 delta;\n \t\tdelta.x = Da * laplacian.x - val.x * val.y * val.y + F * (1.0 - val.x);\n  \t\tdelta.y = Db * laplacian.y + val.x * val.y * val.y - (K + F) * val.y;\n        \n        \n        colour = vec3(val + delta * TIMESTEP, 0.0);\n        colour = clamp(colour, -1., 1.);\n    }\n    \n    fragColor = vec4(colour,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}