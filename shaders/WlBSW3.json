{
    "Shader": {
        "info": {
            "date": "1567205126",
            "description": "A very rough approximation of a giraffe skin pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "WlBSW3",
            "likes": 6,
            "name": "Giraffe Skin",
            "published": 3,
            "tags": [
                "2d",
                "giraffe",
                "animalprint"
            ],
            "usePreview": 0,
            "username": "stseagle",
            "viewed": 585
        },
        "renderpass": [
            {
                "code": "// From Inigo Quilez\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n\n// https://www.shadertoy.com/view/XdXGW8 \nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.y;\n    vec2 untile_st = fragCoord.xy/iResolution.xy;\n\n    // Scale\n    st *= 4.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    float nse = 0.9 + .55 * noise(st);\n\n    float m_dist = 8.;  // minimum distance\n    vec2 m_point, m_grid, mr;        // minimum position\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(i_st + neighbor);\n\n\t\t\t// Animate the point\n            point = 0.5 * nse + 0.5*sin(iTime*0.5 + 6.2831*point);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            if (dist < m_dist) {\n\n                m_dist = dist;\n                m_point = point;\n                mr = diff;\n                m_grid = neighbor;\n            }\n\n        }\n    }\n    \n    // Now get the distance to the borders, adapted from\n    // https://thebookofshaders.com/edit.php#12/2d-voronoi.frag\n\n    m_dist = 8.;\n    for (int y = -2; y <= 2; y++) {\n        for (int x = -2; x <= 2; x++) {\n            vec2 neighbor = m_grid + vec2(float(x), float(y));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.5 * nse + 0.5*sin(iTime*0.5 + 6.2831*point);\n\n            vec2 r = neighbor + point - f_st;\n            if (dot(mr - r, mr - r) > 0.0001) {\n                m_dist = min(m_dist, dot(0.1 * (mr + r), normalize(r - mr)));\n            }\n        }\n    }\n    \n    float pxw = 1./iResolution.y;\n    \n    vec3 color = mix( vec3(0.983,1.000,0.848), vec3(0.595,0.213,0.075), \n                 smoothstep( 0.02 - pxw, 0.02 + pxw, m_dist) );\n    \n\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}