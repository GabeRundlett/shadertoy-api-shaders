{
    "Shader": {
        "info": {
            "date": "1520325926",
            "description": "Metallic flower with spiral disk (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "4sccWX",
            "likes": 1,
            "name": "Pseudo-Helianthus",
            "published": 3,
            "tags": [
                "spiral",
                "flower"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 569
        },
        "renderpass": [
            {
                "code": "// \"Pseudo-Helianthus\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nfloat tCur, dstFar;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, r, a, aa, s, ss, szFac;\n  dMin = dstFar;\n  szFac = 0.5;\n  dMin /= szFac;\n  q = p / szFac;\n  r = length (q.xz);\n  aa = (r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  a = aa;\n  d = dMin;\n  s = r - 0.7 * q.y + 0.6;\n  for (float c = 0.; c < 12.; c ++) d = min (d, abs (s - 0.3 * (a + c)) - 0.13);\n  d = SmoothMin (d, abs (s) - 0.13, 0.03);\n  d = max (d, abs (s - 1.5) - 1.5);\n  d = SmoothMin (d, abs (s - 3.) - 0.13, 0.03);\n  ss = 5. - length (q - vec3 (0., -3.2, 0.));\n  d = - SmoothMin (- d, ss, 0.05);\n  q.xz = Rot2D (q.xz, 0.03 * 2. * pi * r);\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (64. * ((r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.) + 0.5)) / 64.));\n  d = - SmoothMin (- d, 0.04  * r - abs (q.z), 0.05);\n  d = SmoothMin (d, - min (- s - 0.05, ss), 0.05);\n  d = max (d, 0.57 - q.y);\n  DMINQ (1);\n  d = length (q - vec3 (0., -3.2, 0.)) - 4.75;\n  d = max (d, 0.56 - q.y);\n  DMINQ (2);\n  dMin *= szFac;\n  szFac = 4.;\n  dMin /= szFac;\n  qq = p / szFac;\n  for (float k = 0.; k < 2.; k ++) {\n    q = qq;\n    if (k > 0.) q.xz = Rot2D (q.xz, pi / 6.);\n    a = (length (q.xz) > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * a + 0.5) / 6.));\n    q.x += 0.2;\n    q.y -= 0.05 + 0.005 * (1. - 2. * k) + 0.4 * dot (q.xz, q.xz);\n    q.z *= 2.5;\n    d = 0.5 * max (max (length (q.xz + vec2 (0.4, 0.)) - 0.5,\n       abs (q.y) - 0.01 * (1.2 - 1.2 * length (q.xz))), 2.8 - length (r));\n    DMINQ (3);\n  }\n  dMin *= szFac;\n  q = p;\n  d = max (length (q - vec3 (0., 1., 0.)) - 1.7, q.y - 0.22);\n  q.y -= -2.;\n  d = SmoothMin (d, PrCylDf (q.xzy, 0.1, 2.), 0.1);\n  DMINQ (4);\n  q = p;\n  q.y -= 1.5;\n  a = aa;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (12. * a + 0.5) / 12.));\n  s = 0.5 * (q.y / 1.5 + 1.);\n  d = PrCylDf (vec3 (q.x + 0.12 + s * s, q.y, q.z).xzy, 0.03 * (1. - 0.7 * s), 1.5);\n  DMINQ (5);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.05, 3. * h);\n    if (sh < 0.001) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat BgVal (vec3 rd)\n{\n  return 0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, spec, sh, r;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    spec = 0.1;\n    if (idObj == 1) {\n      col = vec3 (0.1, 0.3, 0.9);\n      r = length (ro.xz);\n      if (r < 0.3) col *= 1. - 0.5 * smoothstep (0.15, 0.2, r) * step (0.007, qHit.z);\n      spec = 0.05;\n      vf = vec2 (128., 0.5);\n    } else if (idObj == 2) {\n      col = vec3 (0.1, 0.2, 0.5);\n    } else if (idObj == 3) {\n      r = length (qHit.xz + vec2 (0.4, 0.)) * (0.9 + 0.1 * SmoothBump (0.25, 0.75, 0.15,\n         mod (32. * atan (qHit.z, - qHit.x) / (2. * pi), 1.)));\n      col = mix (vec3 (1., 1., 0.2), vec3 (0.7, 0.7, 0.4), \n         SmoothBump (0.3, 0.7, 0.1, mod (8. * r + 0.5, 1.)));\n      spec = 0.3;\n      if (vn.y < 0.) col = mix (col, vec3 (Maxv3 (col)), 0.5);\n      vf = vec2 (128., 0.5);\n    } else if (idObj == 4) {\n      col = mix (vec3 (0.4, 0.2, 0.1), vec3 (0.2, 0.7, 0.2), smoothstep (-0.2, 0.2, qHit.y));\n      if (qHit.y > 1.3) col *= 1. - 0.3 * SmoothBump (0.45, 0.55, 0.02,\n         mod (24. * atan (ro.z, - ro.x) / (2. * pi), 1.));\n      vf = vec2 (64., 3. - 2. * smoothstep (-0.2, 0.2, qHit.y));\n    } else if (idObj == 5) {\n      col = mix (vec3 (0.5, 1., 0.5) * (0.5 + 0.5 * SmoothBump (0.2, 0.8, 0.05,\n         mod (16. * qHit.y, 1.))), vec3 (1., 0., 0.), step (1.4, qHit.y));\n      spec = 0.;\n    }\n    if (idObj == 1 || idObj == 3 && vn.y > 0.01) col *= BgVal (reflect (rd, vn));\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    sh = ObjSShadow (ro, sunDir);\n    col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       spec * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n  } else {\n    col = vec3 (0.6, 0.6, 0.5) * BgVal (rd);\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az -= 0.02 * pi * tCur;\n    el -= 0.15 * pi * cos (0.05 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -20.);\n  ro.y += 0.5;\n  zmFac = 5.4 - 0.9 * abs (el);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 30.;\n  sunDir = vuMat * normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col *= mix (0.8, 1., pow (1. - 0.5 * length (uvs * uvs), 4.));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}