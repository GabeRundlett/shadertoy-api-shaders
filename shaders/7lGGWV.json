{
    "Shader": {
        "info": {
            "date": "1638329023",
            "description": "2d smiling",
            "flags": 0,
            "hasliked": 0,
            "id": "7lGGWV",
            "likes": 8,
            "name": "2d smiling",
            "published": 3,
            "tags": [
                "2dsmiling"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0));\nreturn colOut;\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\nvec2 RotatePOA(in vec2 p, in vec2 o, in float a) {\n    float c = cos(a), s = sin(a);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{   p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nvec3 HacerOjos(vec2 p, vec3 col)\n{   vec2 p0=p; \n    float t=radians(37.71);\n    float sn=sin(t);float cs=cos(t);\n    \n    p= RotatePOA(p,vec2(0.0,0.0), radians(90.0));\n    float d1= sdPie(p, vec2(sn,cs), 0.5 );\n    p=p0;\n    float d2=sdCircle(p-vec2(0.3,0.1), 0.05 );\n    \n    col= DrawFigBorde(vec3(1.0,0.8,0.8), col,d1);\n    col= DrawFigBorde(vec3(0.0), col,d2);\n    return col;\n}\n\nvec3 HacerBoca(vec2 p, vec3 col)\n{   vec2 p0=p;\n    float d1= sdCircle(p-vec2(0.0,0.0), 0.8 );\n    float d2= sdCircle(p-vec2(0.2,0.6), 1.2 );\n    float diff=differenceSDF(d1, d2);\n    col= DrawFigBorde(vec3(0.4), col,diff);    \n    return col;\n}\n\nvec3 hacerPelo(vec2 p, vec3 col)\n{   vec2 p0=p;\n    vec2 v0A = vec2(0.0,0.0);\n    vec2 v1A = vec2(-0.5,0.9);\n    vec2 v2A = vec2(-1.0,1.0);\n    float b1 = abs(sdBezier( p-vec2(-0.5,0.6), v0A,v1A,v2A )-0.01); \n    col= DrawFig(vec3(0.), col,b1);\n    return col;\n}\n\nvec3 HacerRostro2d(vec2 p, vec3 col)\n{   vec2 p0=p; \n    //pelo\n    col= hacerPelo(p-vec2(0.0), col);\n    col= hacerPelo(p-vec2(0.2,0.2), col);\n    col= hacerPelo(p-vec2(0.4,0.4), col);\n\n    //Cuello\n    float d3=sdBox(p-vec2(0.0,-0.5), vec2(0.2,1.0) );\n    col= DrawFigBorde(vec3(0.4,0.54,0.87), col,d3);\n\n    //cabeza\n    float d1a= sdCircle(p-vec2(0.0,0.0),1.0 );\n    float d1b= sdCircle(p*vec2(0.5,1.0)-vec2(0.2,-0.3),0.5 );\n    float duni= unionSDF(d1a, d1b);\n    col= DrawFigBorde(vec3(0.4,0.54,0.87), col,duni);\n    //boca\n    col= HacerBoca(p-vec2(0.0), col);\n    \n    //ojos\n     float t=iTime;\n    float sn=0.15*sin(t);\n    p.y+=sn;\n    col= HacerOjos(p-vec2(0.0,0.5), col);\n    col= HacerOjos(p-vec2(-0.5,0.5), col);\n    p=p0;\n    //hacer nariz\n    float d2a=sdCircle(p-vec2(1.0,-0.4),0.0001 );\n    float d2b=sdCircle(p-vec2(1.2,-0.4),0.0001 );\n    col= DrawFig(vec3(0.), col,d2a);\n    col= DrawFig(vec3(0.), col,d2b);\n    return col;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=2.0;\n    uv*=esc;\n\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.5/esc;\n    col= HacerRostro2d(uv-vec2(0.0,0.5),col);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n\n// signed distance to a quadratic bezier\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n\n        #if 0\n        // When p≈0 and p<0, h-q has catastrophic cancelation. So, we do\n        // h=√(q²+4p³)=q·√(1+4p³/q²)=q·√(1+w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1+½w) so that the q's\n        // cancel each other in h-q. Expanding and simplifying further we\n        // get x=vec2(p³/q,-p³/q-q). And using a second degree Taylor\n        // expansion instead: x=vec2(k,-k-q) with k=(1-p³/q²)·p³/q\n        if( abs(p)<0.001 )\n        {\n            float k = p3/q;              // linear approx\n          //float k = (1.0-p3/q2)*p3/q;  // quadratic approx \n            x = vec2(k,-k-q);  \n        }\n        #endif\n\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        res = dot2(q);\n    \tsgn = cross2(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cross2(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cross2(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n    }\n    \n    return sqrt( res )*sign(sgn);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}