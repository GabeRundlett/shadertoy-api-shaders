{
    "Shader": {
        "info": {
            "date": "1611242529",
            "description": "moving colorful barcodes. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3lVcRG",
            "likes": 0,
            "name": "colorful barcodes",
            "published": 3,
            "tags": [
                "mouse",
                "grid",
                "interactive",
                "color",
                "moving",
                "smoothstep",
                "velocity",
                "step",
                "barcode",
                "resolution"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// Inspiration from @patriciogv - 2015 - Title: DeFrag - https://thebookofshaders.com/edit.php#10/ikeda-04.frag\n// I created a series of colorful barcodes while manipulating the numbers and trying to understand the original code \n\nfloat random (in float x) { return fract(sin(x)*1e4); }\nfloat random (in vec2 _st) { return fract(sin(dot(_st.xy, vec2(12.9898,78.233)))* 43758.5453123);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    // Grid\n    vec2 grid = vec2(100.0,10.);\n    st *= grid;\n\n    vec2 ipos = floor(st);  // integer\n\n    vec2 vel = floor(vec2(iTime*10.)); // time\n    vel *= vec2(0.8,0.); // direction\n\n    vel *= (step(1., mod(ipos.y,2.0))-0.5)*2.; // Oposite directions\n    vel *= random(ipos.y)*random(vel.y); // random speed\n\n    // 100%\n    float totalCells = grid.x*grid.y;\n\n    float t = mod(iTime*max(grid.x,grid.y)+floor(1.0+iTime),totalCells);//find out the remainder devided by totalCells \n    vec2 head = vec2(mod(t,grid.x), floor(t/grid.x));// vector of remainder and closet integer \n\n    vec2 offset = vec2(0.5+random((sin(iTime))),max(0.5,random(abs(sin(iTime)))));// randomize the offset of the colors for each bar \n\n    vec3 color = vec3(1.0);\n    color *= step(grid.y-head.y,ipos.y);                                // Y // determine the speed based on the remainder \n    color /= (1.0-step(head.x,ipos.x))*step(grid.y-head.y,ipos.y+1.);   // X // \n    color = clamp(color,vec3(0.),vec3(1.));\n\n    // Assign a random value base on the integer coord\n    color.r *= random(floor(st+vel+offset));\n    color.g *= random(floor(st+vel));\n    color.b *= random(floor(st+vel-offset));\n\n    color = smoothstep(0.,.5+iMouse.x/iResolution.x*.5,color*color); // smooth\n    color = step(0.5+iMouse.x/iResolution.x*0.5,color); // threshold - so no gray just black and white \n\n    //  Margin\n   color *= step(.1,fract(st.x+vel.x))*step(.1,fract(st.y+vel.y));\n      \n\n    fragColor = vec4(1.0-color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}