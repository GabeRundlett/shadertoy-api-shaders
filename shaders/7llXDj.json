{
    "Shader": {
        "info": {
            "date": "1635338007",
            "description": "Sounds from the mandelbrot set!",
            "flags": 8,
            "hasliked": 0,
            "id": "7llXDj",
            "likes": 3,
            "name": "Mandelbrot Sounds",
            "published": 3,
            "tags": [
                "fractal",
                "sound",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "incription",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "\nfloat fractal(vec2 uv) {\n    vec2 c = uv;\n    vec2 z = vec2(0);\n    float i;\n    \n    float x2, y2 = 0.;\n    for(i = 0.; i < MAX_ITER; i++) {\n        if( x2 + y2 > 16. ) break;\n        \n        x2 = z.x * z.x;\n        y2 = z.y * z.y;\n        \n        z = vec2(x2 - y2, 2. * z.x * z.y) + c;\n    }\n    \n    return i;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = T(uv, iTime);\n    float i = fractal(uv);\n    \n    vec3 col = vec3(i/MAX_ITER);\n    \n    float d = length(uv - point(iTime));\n    if(d<0.01)col=vec3(1,0,0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nfloat fractal(vec2 c, float t) {\n    vec2 z = vec2(c);\n    float i;\n    \n    float x2, y2 = 0.;\n    float f = 0.;\n    for(i = 0.; i < MAX_ITER; i++) {\n        if( x2 + y2 > 16. ) break;\n        \n        f += sin(6.28*pow(2., length(z))*440.0*t);\n        \n        x2 = z.x * z.x;\n        y2 = z.y * z.y;\n        \n        z = vec2(x2 - y2, 2. * z.x * z.y) + c;\n    }\n    \n    return f / i;\n}\n\nfloat ao(vec2 c, float t, vec2 dt) {\n    float f = fractal(c, t);\n    \n    f += fractal(c-dt.x, t);\n    f += fractal(c+dt.x, t);\n    f += fractal(c-dt.y, t);\n    f += fractal(c+dt.y, t);\n    \n    f += fractal(c-dt.xx, t) * .5;\n    f += fractal(c+dt.xx, t) * .5;\n    f += fractal(c-dt.yy, t) * .5;\n    f += fractal(c+dt.yy, t) * .5;\n    \n    return f / 7.;\n}\n\n\n\nvec2 mainSound( int samp, float time )\n{\n    vec2 p = point(time);\n    \n    float f = ao(p, time, vec2(1)/100000.);\n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2( f ) * 0.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define pcenter vec2(0.3, 0.5)\n#define MAX_ITER 150.\n\nvec2 T(vec2 uv, float t) {\n    return uv * vec2(3, 2) - vec2(2, 1);\n}\n\nvec2 point(float time) {\n    time *= 2.;\n    return vec2(sin(time)*0.2, cos(time)*0.2) - vec2(1,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}