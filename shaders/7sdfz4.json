{
    "Shader": {
        "info": {
            "date": "1656167031",
            "description": "An implementation of the Pythagoras tree fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "7sdfz4",
            "likes": 8,
            "name": "Pythagoras tree (simple version)",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "afdw",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "float cross2(vec2 a, vec2 b) {\n    return a.x * b.y - a.y * b.x;\n}\n\nconst int n = 5;\n\nvec2 pts[n] = vec2[n](\n    vec2(-1.0, 1.0),\n    vec2(0.0, 2.0),\n    vec2(1.0, 1.0),\n    vec2(1.0, -1.0),\n    vec2(-1.0, -1.0)\n);\n\nconst int l = 8;\n\nvec2 trans(vec2 a1, vec2 a2, vec2 b1, vec2 b2, vec2 c) {\n    vec2 t = a2 - a1;\n    t /= dot(t, t);\n    vec2 s = b2 - b1;\n    return mat2(\n        -s.x, -s.y,\n        s.y, -s.x\n    ) * mat2(\n        t.x, -t.y,\n        t.y, t.x\n    ) * (c - a1) + b2;\n}\n\nbool checkIn(vec2 c) {\n    bool a = true;\n    for (int i = 0; i < n; i++) {\n        if (cross2(c - pts[i], pts[(i + 1) % n] - pts[i]) <= -0.000001) {\n            a = false;\n        }\n    }\n    return a;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float x = iTime;\n    pts = vec2[n](\n        vec2(-1.0, 1.0),\n        vec2(cos(x), 1.0 + abs(sin(x))),\n        vec2(1.0, 1.0),\n        vec2(1.0, -1.0),\n        vec2(-1.0, -1.0)\n    );\n\n    vec2 uv = (fragCoord / iResolution.xy - 0.5) * 2.0 * vec2(iResolution.x / iResolution.y, 1.0);\n\n    vec2 c = uv * 4.0 + vec2(0.0, 3.0);\n\n    vec4 o = vec4(0.0);\n    for (int j = 0; j < l; j++) {\n        for (int k = 0; k < (1 << j); k++) {\n            vec2 d = c;\n            for (int i = 0; i < j; i++) {\n                if ((k & (1 << i)) == 0) {\n                    d = trans(pts[0], pts[1], pts[3], pts[4], d);\n                } else {\n                    d = trans(pts[1], pts[2], pts[3], pts[4], d);\n                }\n            }\n            if (checkIn(d)) {\n                o += (0.3 + 0.7 * float(l - j - 1) / float(l - 1)) *\n                    vec4(1.0, (float(k) + 0.5) / float(1 << j), 0.4, 0.0);\n            }\n        }\n    }\n\n    fragColor = o;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}