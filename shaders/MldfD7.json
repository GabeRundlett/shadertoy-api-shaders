{
    "Shader": {
        "info": {
            "date": "1539929693",
            "description": "mouse on right end side approaches noise IFF pi is poorly estimated 3.14\nelse (pi=acos(-1.)) would look ideal, wich it never will\nand so i found a strange (only strange for mouse all the way to the right) thesis more confirmed, while 3 domains oscillate.",
            "flags": 0,
            "hasliked": 0,
            "id": "MldfD7",
            "likes": 9,
            "name": "laplace kernel asymptote Isoline",
            "published": 3,
            "tags": [
                "noise",
                "sobel",
                "filter",
                "pi",
                "precision",
                "matrix",
                "contour",
                "fwidth",
                "fwidth",
                "isoline",
                "laplace",
                "planck",
                "calculus",
                "epslon",
                "irrational"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1066
        },
        "renderpass": [
            {
                "code": "//self: https://www.shadertoy.com/view/MldfD7\n//parents:\n//https://www.shadertoy.com/view/lltBWM\n//https://www.shadertoy.com/view/ldfBzs\n//https://www.shadertoy.com/view/XdlyzS\n\n//modulation==number of lines== linedensity\n#define linedensity ((1.-(iMouse.x+1.)/iResolution.x))\n\n/*\n\nassuming we have infinite precision, then:\nred-green=blue\nred-green=blue\nred-green=blue\nbut we do not have infinite precision, but still inherit irrational pi, so the difference is \"noise\"\nThat difference is tiny, and amplified by smoothstep() to a point where \"yellow\" ceases to be noticable.\n(best iff paused on time==0)\n\ncalculus with short intervals and short wavelengths in general are funny in this asymptotic way.\nto a point where you forget that [blue] is a crude neighborhood-loop , while [red-green] is analysis.\n\nblue layer is a laplachian filter; 3 2d neighborhoods (a lot like a common voronoi, but for filtering)\nred and green are fwidth() estimates (isoline and zebra scaling)\n, to normalize an isoline by dividinf by an estimated first derivative\n\n\nthis allows you to use                fwidth(cos(gradient/pi))   (==Zebra) \n                      or TriangleWave(fwidth(cos(gradient/pi)))  (==Isoline contour)\nto approach the asymptotic case of a laplachian \n  (slide mouse to the right to approach asymptote of a [minimal interval of 1px]==[maximum linedensity of 1Line/pixel])\n  (that makes the asymptotic case a space-filling case\n , which by definition should appear like a fractal z-order curve, but defined by a (distorting) gradient.\n\n, but the asymptote is approached via calculus+TaylorPolynomials (inherent in fwidth())\nfor a better understnding of a good hash just being about a low precision epsilon, close to an asymptote.\n\n//this is done on a trigonometric wave; cos(gradient/pi)\n, and the precision of pi makes a HUGE difference between the red green layer\n, and the difference between red and green fits to the degenerated case of blue.\n\nmouse on right end side approaches noise IFF pi is poorly estimated 3.14\nelse (pi=acos(-1.)) would look ideal, wich it never will\nand so i found a strange (only strange for mouse all the way to the right) thesis more confirmed, while 3 domains oscillate.\n*/\n\nconst mat3 laplace=mat3\n (0, 1,0\n ,1,-4,1\n ,0,1,0);//laplache filter matrix\n\n\nconst mat3 sobel=mat3\n (1,0,-1\n ,2,0,-2\n ,1,0,-1);//sovel filter matrix\n\n    \n\nfloat wave(float x, float y){return //noisy epcircles\n  sin(10.*x+10.*y)/5. \n +sin(20.*x+15.*y)/3. \n -sin( 4.*x+10.*y)/4. \n +sin(y)          /2.\n +sin(x*x*y*20.)\n +sin(x*20.+ 4.)  /5.\n +sin(y*30.    )  /5.\n +sin(x        )  /4.\n ;}\n\n#define MousePi mix(acos(-.1),3.14,(iMouse.y-1.)/iResolution.y)\n//mix(acos(-.1),3.14,(iMouse.y-1.)/iResolution.y)\n\n\n\nfloat fwidCosZebra(vec2 u,float p){\n ;float s= (wave(u.x, u.y))\n ;s= (-cos(s/linedensity*p*2.))\n ;s=smoothstep(.1*linedensity,.0,.1*((s/8.)/fwidth((s))))\n ;return s;}\nfloat fwidCosIso(vec2 u,float p){\n ;float sum = (wave(u.x, u.y))\n ;sum= (sin(sum/linedensity*p))\n ;sum=1.-abs((smoothstep(.025*linedensity,-.025*linedensity,.1*linedensity*((((sum/8.))/fwidth((sum))))))*2.-1.)\n ;return sum;}\n//above 2 are tinted green for p=3.14     ,which makes for a decent hash\n//above 2 are tinted red   for p=acos(-1.),which also shows the pattern of \"blue\" below in it\n//below is always tinted blue, it appears to be a red afterglow, but thats not an opticall illusion!\nfloat neighbor33laplace(vec2 u\n){float sum=0.\n ;for(int i = 0; i < 3; i++\n ){for(int j = 0; j < 3; j++\n  ){vec2 point = u +(vec2(i, j) -  1.) / iResolution.xy\n   ;float color=wave(point.x, point.y)\n   ;color=fract(color/linedensity)  // make it edgy\n   ;sum+=color*laplace[i][j]//acc+\n   ;}}return sum;}\n\nvoid mainImage(out vec4 o,vec2 u\n){u=u/iResolution.xy\n ;vec2 m=iMouse.xy/iResolution.xy\n ;vec4 c=vec4(0)\n //u.y looks less like noise and morelike seeing a precision error.\n //needs base-pi arithmetic ;)\n //u.x has less precision, appears \"better\", as it hides in its onw noise.\n ;     if(u.x<.5)c.x=  fwidCosIso(u-m,acos(-1.))//red left         half\n ;else if(u.y<.5)c.x=fwidCosZebra(u-m,acos(-1.))//red lower  right quadrant\n ;     if(u.x<.5)c.y=  fwidCosIso(u-m,3.14)     //gren left        half\n ;else if(u.y<.5)c.y=fwidCosZebra(u-m,3.14)     //gren lower right quadrant\n ;c.z=neighbor33laplace(u-m)                    //blue all         quadrants\n ;//c.x=mix(0.,c.x,cos(iTime*1.16)*.5+.5)//oscillate brightness of red   over time\n ;//c.y=mix(0.,c.x,cos(iTime*2.16)*.5+.5)//oscillate brightness of green over time\n ;//c.z=mix(0.,c.z,cos(iTime     )*.5+.5)//oscillate brightness of blue  over time\n ;c.xyz=mix(vec3(0),c.xyz,cos(iTime*vec3(1,1.62,2.61))*.5+.5)//3 above lines in one\n \n //while red and green only differ in the precision of Pi=3.14 OR pi=acos(-1.)\n //note how ONLY the (nearly) [degenerate case] of [mouse all the way to the right] lacks yellow\n //, because then green and red differ too much.\n //the strangest thing here is that there is a smooth transition towards that asymptote.\n // AND that even the asymptotic case is a very common laplachian (==the blue layer)\n ;o=vec4(c.xyz,1)\n ;}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}