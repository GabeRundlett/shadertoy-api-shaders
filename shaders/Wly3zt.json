{
    "Shader": {
        "info": {
            "date": "1579576664",
            "description": "Bored ",
            "flags": 32,
            "hasliked": 0,
            "id": "Wly3zt",
            "likes": 10,
            "name": "Meandering",
            "published": 3,
            "tags": [
                "3d",
                "blur",
                "bump"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "// Plento\n\nvec2 R;\n\n\nfloat hash( vec2 p ){ return fract(sin(dot(p, vec2(41, 289)))*45758.5453); }\n\nconst int SAMPLES = 25;\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 m = iMouse.xy / R.xy-.5; \n    m.x *= R.x/R.y;\n    \n    vec2 uv2 = u/R;\n    \n    vec3 col = texture(iChannel0, uv2).xyz;\n    \n    float w = .1; \n    vec2 tuv = vec2(uv2.x, uv2.y)-.5;\n    vec2 dTuv = -tuv*.5/float(SAMPLES);\n    \n    uv2 += dTuv*(hash(uv.xy + fract(iTime))*2.0 )*2.;\n    \n    vec3 blur = vec3(0);\n    \n    \n    for(int i = 0;i < SAMPLES; i++){\n        uv2 -= dTuv;\n        vec3 samp = texture(iChannel0, uv2).xyz * w;\n       \n        blur += samp;\n        \n        w *= 0.96;\n    }\n    \n    col = mix(col, blur, smoothstep(0., 0.7, length(uv)));\n    \n    \n    f = vec4(col, 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Plento\nvec2 R;\n\n#define ss(a, b, t) smoothstep(a, b, t)\n#define movement(a) sin(a*1.3 + iTime)*.6  \nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\nvec3 tex(vec2 p){return texture(iChannel0, p).xyz;   }\nvec2 m(){\n    vec2 m = iMouse.xy / iResolution.xy-.5; \n    m.x *= iResolution.x/iResolution.y;\n\treturn m;\n}\nfloat map(vec3 rp){\n    rp.y += movement(rp.z);\n    rp.xz *= rot(rp.y*.3);\n    return .8-length(rp.xy);\n}\n\nvec3 normal( in vec3 pos ){vec2 e = vec2(0.002, -0.002);return normalize(e.xyy * map(pos + e.xyy) + e.yyx * map(pos + e.yyx) + e.yxy * map(pos + e.yxy) + e.xxx * map(pos + e.xxx));}\nfloat march(vec3 rd, vec3 ro){float t = 0., d = 0.;for(int i = 0; i < 60; i++){d = map(ro + rd*t);if(abs(d) < .002 || t > 64.){break;}t += d * .7;}return t;}\n\nfloat height(vec2 p){return tex(p).r;}\n\nvec3 TextureBump(vec2 uv, float strength){\n    float h = 0.002;\n    \n    vec3 p = tex(uv); \n    float dx = height(uv) - height(uv + vec2(h, .0));\n    float dy = height(uv) - height(uv + vec2(0., h));\n    \n    return normalize( vec3(0., 0., -1.) + vec3(dx, dy, 0.)*strength);\n}\n\nvec3 color(vec3 p, vec3 rd, vec3 n, vec2 u, float t){\n    vec3 ld = normalize(-p);\n   \t\n    p.y += movement(p.z);\n    p.z += iTime * 1.4;\n    p.x = abs(p.x);\n    \n    vec3 bn = TextureBump(p.xz*.3, 120.0);\n    vec3 col = mix(vec3(1., 0., 1.)*.25, vec3(.6), tex(p.xz*.3).r);\n    \n    n = normalize(n + bn);\n    \n    float spec = pow(max(dot(normalize(reflect(ld, n)), rd), 0.), 12.);\n    float dif = max(dot(n, ld), .02);\n    \n    col *= 2.8*dif*vec3(1);\n    col += vec3(.8, .4, .2) * spec * 1.25;\n    \n    col = mix(vec3(0.), col, exp(-t*t*t*.062));\n    \n\treturn 1.-exp(-col * .7);   \n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 m = iMouse.xy / R.xy-.5; \n    m.x *= R.x/R.y;\n    \n    vec3 rd = normalize(vec3(uv, 0.6));\n    rd = normalize(vec3(uv, 1.0 - dot(uv, uv) * -0.2));\n    vec3 ro = vec3(0., 0., 0.);\n    \n    rd.xy*=rot(iTime*.2);\n    \n    float t = march(rd, ro);\n    \n    vec3 n = normal(ro + rd*t);\n    vec3 col = color(ro + rd*t, rd, n, u, t);\n    \n    col *= ss(1.05, 0., length(uv));\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n    \n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}