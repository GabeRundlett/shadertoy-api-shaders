{
    "Shader": {
        "info": {
            "date": "1570799513",
            "description": "Truchet-like hexagon pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "tsV3Rd",
            "likes": 23,
            "name": "Shadertober 10 - Pattern",
            "published": 3,
            "tags": [
                "pattern",
                "inktober",
                "shadertober",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 725
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415927\nvec2 s = vec2(1,1.73);\n\nvec2 rot(vec2 a, float t)\n{\n    float s = sin(t);\n    float c = cos(t);\n    return vec2(a.x*c-a.y*s,\n                a.x*s+a.y*c);\n}\n\n//thanks to BigWIngs/The Art Of Code's videos on hex tiling and truchet patterns\nvec4 hexCoords(vec2 p)\n{\n    vec2 hs = s*.5,\n         c1 = mod(p,s)-hs,\n         c2 = mod(p-hs,s)-hs;\n    vec2 hc= dot(c1, c1)<dot(c2,c2)?c1:c2;\n    return vec4(hc, p-hc);\n    \n}\n\nfloat li(float px, float lt, float d, vec2 hc)\n{\n    return smoothstep(0.,px,length(hc.x+d)-lt);\n}\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n    vec2 p = ((2.*f-iResolution.xy)/iResolution.y)*4.+vec2(0,iTime);\n    vec4 hc = hexCoords(p+10.);\n    float id = hc.z*hc.w*2.1238712;\n    if(mod(id,3.)<=1.)hc.xy=rot(hc.xy,PI/3.);\n    else if(mod(id,4.)<=2.)hc.xy=rot(hc.xy,-PI/3.);\n    float px = 18./iResolution.y, d = 0.25, lt = .075, \n        t =li(px,lt,d, hc.xy)*li(px,lt,-d, hc.xy);\n\n    c.rgb=vec3(1.-t);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}