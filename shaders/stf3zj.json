{
    "Shader": {
        "info": {
            "date": "1622409209",
            "description": "atmosphere",
            "flags": 0,
            "hasliked": 0,
            "id": "stf3zj",
            "likes": 28,
            "name": "Atmosphere I guess",
            "published": 3,
            "tags": [
                "atmosphere"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 764
        },
        "renderpass": [
            {
                "code": "//CAMERA stuff\n#define FOV 1.0\n#define ANG 0.001\n\nvec4 rand4blue()\n{\n    return texelFetch(iChannel0, shift2(), 0);\n}\n\n\nvec3 light = normalize(vec3(0,1,0));\nconst float light_bright =1.0;\nconst float light_ang = 0.1;\nconst float samp = 16.0;\n\n\n//atmosphere illuminated by a sun\nvec3 atmo2(vec3 r, vec3 rd)\n{\n    vec2 si0 = sphIntersect(r, rd, vec3(0), R + H*10.0);\n    vec2 si1 = sphIntersect(r, rd, vec3(0), R);\n    \n    //range between the start of the atmosphere and end/surface\n    vec2 range = max(vec2(si0.x, si1.x>0.0?min(si1.x, si0.y):si0.y),0.0);\n    float dr = range.y - range.x;\n    vec3 L = vec3(0.0);\n    float dx = 1.0/samp;\n    vec4 dither = rand4blue();\n    for(float t = dx*dither.x; t <= 1.0; t+=dx)\n    {\n        float td = mix(range.x, range.y, t);\n        vec3 p = r + rd*td;\n        vec4 shadow = atmo(p, light, 1e10);\n        vec4 cam = atmo(r, rd, td);\n        vec3 incoming = shadow.xyz*shadow.w;\n        vec3 scattering = scatter(p, rd, light)*incoming;\n        vec3 visibility = cam.xyz;\n        L += visibility*scattering*dx;\n    }\n    \n    return light_bright*L*dr;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nmat3 get_cam(float phi, float theta)\n{\n    vec3 z_dir = vec3(cos(phi)*sin(theta),  cos(theta), sin(phi)*sin(theta));\n    vec3 x_dir = normalize(cross(z_dir, vec3(0,1,0)));\n    vec3 y_dir = normalize(cross(x_dir, z_dir));\n    return mat3(x_dir, y_dir, z_dir);\n}\n\nvec3 saturate(vec3 c)\n{\n    return tanh(pow(c,vec3(0.65)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    rng_initialize(fragCoord, iFrame);\n    init();\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 m = PI*iMouse.xy/iResolution.xy + 1e-3;\n    \n    mat3 cam = get_cam(-PI*0.5,PI*0.05);\n    mat3 cam1 = get_cam(2.0*m.x, PI - m.y);\n    \n    light = cam1*light;\n  \n    vec3 ro = vec3(0,0,1.01+0.007*sin(iTime));\n    vec3 rd = normalize(cam*vec3(FOV*uv, 1.0));\n    \n    vec3 c = atmo2(ro, rd);\n    // Output to screen\n    fragColor = vec4(saturate(c), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n\n// basic parameters\nfloat R = 1.;\t\t\t\t\t\t\t\t// planet radius\nfloat H = 0.003;\t\t\t\t\t\t\t// density scale-height of atmosphere (not pressure scale height)\n\n// Rayleigh extinction coefficients, \n// calculated for a nitrogen gas (polarizability 1.82e-30)\n// with temp 290 K, press 101300 Pa, wavelengths 655 (R), 540 (G) and 425 (B) nm,\n// and a scale of 1 unit = 6400 km (earth radius).\nvec3 beta = vec3( 38.05, 82.36, 214.65 );\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n// a small absobtion in the orange band is added\n// to simulate the effect of ozone\nvec3 absorb = vec3( 0.75, 0.85, 1. );\t\t\t\n\n// devrived values\nfloat LN2 = 0.693147181;\nfloat H50;\nvec3 beta50;\nfloat invH50;\nfloat X50;\n\nvoid init()\n{\n   H50 = H * LN2;\n   beta50 = beta * LN2;\n   invH50 = 1. / H50;\n   X50 = R / H50;\n}\n// --------------------------------------------------------\n\n// sphere of size ra centered at point ce\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(1e10); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\n// --------------------------------------------------------\n\nfloat chapman( float X, float h, float coschi )\n{\n\t// this is the approximate Chapman function,\n\t// corrected for transitive consistency \n\n\tfloat c = sqrt( X + h );    \n    \n\tif( coschi >= 0. )\n\t{\t\n \t\treturn c / ( c * coschi + 1. ) * exp2( -h );\n\t}\n\telse\n\t{\n\t\tfloat x0 = sqrt( 1. - coschi * coschi ) * ( X + h );\n\t\tfloat c0 = sqrt( x0 );    \n\t\treturn 2. * c0 * exp2( X - x0 ) - c / ( 1. - c * coschi ) * exp2( -h );\n\t}\n}\n\n// --------------------------------------------------------\n\nvec3 transmittance( vec3 r, vec3 viewdir )\n{\n\t// a quick function to get the transmittance\n\t// looking from point r into infinity\n\n\tfloat rsq = dot(r,r);\n\tfloat invrl = inversesqrt( rsq );\n\tfloat len = rsq * invrl;\n\tfloat x = len * invH50;\n\tfloat h = x - X50;\n\tfloat coschi = dot( r, viewdir ) * invrl;\n\t\n\treturn beta50 * H50 * chapman( X50, h, coschi ) ;\n}\n\nfloat density(vec3 r)\n{\n\tfloat rsq = dot(r,r);\n\tfloat invrl = inversesqrt( rsq );\n\tfloat len = rsq * invrl;\n\tfloat x = len * invH50;\n\tfloat h = x - X50;\n    return exp2(-h);\n}\n\nfloat HenyeyGreenstein(float g, float costh)\n{\n    return (1.0 - g * g) / (4.0 * PI * pow(1.0 + g * g - 2.0 * g * costh, 3.0/2.0));\n}\n\nfloat scatterAnisotropy(vec3 ri, vec3 ro)\n{\n    return mix(1.0, 4.*PI*HenyeyGreenstein(0.5, dot(ri, ro)), 0.33) + HenyeyGreenstein(0.9995, dot(ri, ro));\n}\n\nvec3 scatter(vec3 r, vec3 rd, vec3 ld)\n{\n    return beta50*scatterAnisotropy(rd, ld)*density(r);\n}\n\nvec4 atmo(vec3 r, vec3 rd, float td)\n{\n    vec2 si = sphIntersect(r, rd, vec3(0), R);\n    \n    float inv = sign(dot(rd,r));\n    float hit = 1.0;\n    if(si.x < 1e10 && si.x > 0.0) \n    {\n        td = min(si.x, td);\n        hit = 0.0;\n    }\n    else inv = 1.0;\n    \n    vec3 depth = inv*(transmittance(r, rd*inv) - transmittance(r + rd*td, rd*inv));\n    \n    return vec4(exp2(-depth), hit);\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n//random blue noise sampling pos\nivec2 shift2()\n{\n    pcg4d(s1); \n    return (pixel + ivec2(s1.xy%0x0fffffffu))%1024;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}