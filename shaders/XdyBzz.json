{
    "Shader": {
        "info": {
            "date": "1527370315",
            "description": "I noticed when you increase the size of the dots in the yin yang to half the radius, it begins to look like something else entirely. After adding an infinite zoom and random rotation it looks kind of like a wave or a flame.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdyBzz",
            "likes": 18,
            "name": "Infinite Yin Yangs 4",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "zoom",
                "recursion"
            ],
            "usePreview": 0,
            "username": "KilledByAPixel",
            "viewed": 748
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////////////////////////////////////\n// Infinite Yin Yang Zoom - Copyright 2017 Frank Force\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//////////////////////////////////////////////////////////////////////////////////\n\nconst float zoomSpeed\t\t\t= 0.6;\t// how fast to zoom (negative to zoom out)\nconst float zoomScale\t\t\t= 0.01;\t// how much to multiply overall zoom (closer to zero zooms in)\nconst float saturation\t\t\t= 0.0;\t// how much to scale saturation (0 == black and white)\nconst float turnSpeed\t\t\t= 0.6;\t// how fast to rotate (0 = no rotation)\nconst float dotSize \t\t\t= 1.0;\t// how much to scale recursion at each step\nconst int   recursionCount\t\t= 18;\t// how deep to recurse\nconst float blur\t\t\t\t= 4.0;\t// how much blur\nconst float outline\t\t\t\t= 0.0; \t// how thick is the outline\n\n//////////////////////////////////////////////////////////////////////////////////\n    \nconst float pi = 3.14159265359;\nconst float e = 2.718281828459;\nfloat RandFloat(int i) { return (fract(sin(float(i)) * 43758.5453)); }\nvec2 Rotate(vec2 p, float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return vec2((p.x*c - p.y*s), (p.x*s + p.y*c));\n}\nvec4 HsvToRgb(vec4 c) \n{\n    float s = c.y * c.z;\n    float s_n = c.z - s * .5;\n    return vec4(s_n) + vec4(s) * cos(2.0 * pi * (c.x + vec4(1.0, 0.6666, .3333, 1.0)));\n}\n\nfloat rlerp( float a, float b, float x )\n{\n    float p = (a - x) / (a - b);\n    return clamp( p, 0.0, 1.0 );\n}\n\nfloat GetFocusRotation(int i) \n{\n    float theta = 2.0*pi*RandFloat(i);\n    return theta + turnSpeed*mix(-1.0, 1.0, RandFloat(30+i))*iTime; \n}\n\nbool GetFocusSide(int i)\n{\n    return (RandFloat(50+i) < 0.5);\n}\n\nvec2 GetFocusPos(int i )\n{ \n    bool side = GetFocusSide(i);\n    vec2 p = vec2(0.0, side? -0.5 : 0.5); \n    return Rotate(p, GetFocusRotation(i));\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n\nfloat YinYang( float co, vec2 p, out float dotDistance, float scale, float dotSize)\n{\n   \tfloat b = blur*scale/min(iResolution.y,iResolution.x);\n    float d = dotSize;\n    \n    float c = co;\n    float r;\n    \n    float f =  rlerp( 200.0, 400.0, scale);\n\n    // shrink blur at small scales\n    b *=  mix(1.0, 0.0, f);\n    \n    // bottom\n    r = length(2.0*p + vec2(0, 1));\n    if (p.x < 0.0)\n\t   c = mix(1.0, 0.0, smoothstep(1.0-b, 1.0+b, r));\n    //c = mix(0.0, c, smoothstep(d-b, d+b, r));\n    dotDistance = r;\n    \n    // top\n    r = length(2.0*p - vec2(0, 1));\n    if (p.x >= 0.0)\n\t\tc = mix(0.0, 1.0, smoothstep(1.0-b, 1.0+b, r));\n    //c = mix(1.0, c, smoothstep(d-b, d+b, r));\n    if (p.y >= 0.0)\n         dotDistance = r;\n    \n    // fade to grey at small scales\n    c = mix(c, 0.5, f);\n    \n    // outside\n    r = length(p);\n    c = mix(c, co, smoothstep(1.0, 1.0+b, r));\n    \n    return c;\n}\n\nvec4 RecursiveYinYang(vec2 p, int iterations, float scale, float dotSize)\n{\n  \tfloat theta = GetFocusRotation(iterations);\n    float co = 1.0;\n    \n    // recursive iteration\n    for (int r = 0; r < recursionCount; ++r)\n    {\n        // apply rotation\n  \t\tfloat theta = -GetFocusRotation(iterations + r);\n        p = Rotate(p, theta);\n        \n        float dotDistance = 0.0;\n        co = YinYang(co, p, dotDistance, scale, dotSize);\n        \n        if (dotDistance > dotSize * 1.1  || r == recursionCount)\n        {\n            float hue = 0.233*float(iterations + r);\n            return vec4(hue, saturation*co, co, 1.0); // stop if outside or reached limit\n\t\t\t\n        }\n        \n\t\t// check if top or bottom\n        bool side = (p.y > 0.0);\n        p.y += side? -0.5 : 0.5;\n        \n        scale *= 2.0/dotSize;\n        p *= 2.0/dotSize;\t\t// apply recursion scale\n        p = Rotate(p, -theta);\t// cancel out rotation\n    }\n    \n    return vec4(0.0); // stop if outside or reached limit\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 color, in vec2 uv )\n{\n    // fixed aspect ratio\n    \n\tuv = (2.0*uv-iResolution.xy)/min(iResolution.y,iResolution.x);\n    \n\tvec2 p = uv;\n    vec2 p2 = p;\n    \n    // wander center\n\tp.x += 0.3*sin(0.234*iTime);\n\tp.y += 0.3*sin(0.2*iTime);\n    \n\t// get time \n\tfloat timePercent = iTime*zoomSpeed;\n\tint iterations = int(timePercent);\n\ttimePercent -= floor(timePercent);\n    \n\t// update zoom, apply pow to make rate constant\n    float recursionSize = 2.0 / dotSize;\n\tfloat zoom = pow(e, -log(recursionSize)*timePercent);\n\tzoom *= zoomScale;\n    \n\t// get focus offset\n\tvec2 offset = GetFocusPos(iterations);\n\tfor (int i = 0; i < 20; ++i)\n        offset += (GetFocusPos(iterations+i+1) / recursionSize) * pow(1.0 / recursionSize, float(i));\n    \n    // apply zoom and offset\n\tp = p*zoom + offset;\n    \n    // make the yin yang\n    color = RecursiveYinYang(p, iterations, zoom, dotSize);\n    \n    //vec4 color1 = vec4(0.0,0.0,0.4,1.0);\n    //vec4 color2 = mix(vec4(0.0,1.0,1.0,1.0), vec4(1.0,1.0,1.0,1.0), uv.y);\n    //color = mix(color1, color2, color.z);\n    \n    //color.x = 0.0;\n    //color.y = 0.1;\n    \n    // wander hue\n    //color.x += (0.1*p2.y + 0.1*p2.x + 0.05*iTime);\n    \n    // map to rgp space\n    color = HsvToRgb(color);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}