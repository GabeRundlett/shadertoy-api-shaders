{
    "Shader": {
        "info": {
            "date": "1677928336",
            "description": "Bleep",
            "flags": 96,
            "hasliked": 0,
            "id": "dstGWS",
            "likes": 22,
            "name": "Enchanted Castle Corridor",
            "published": 3,
            "tags": [
                "raymarching",
                "castle",
                "corridor",
                "enchanted"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    // Trial to flare with mipmap\n    /*\n    rgb = vec3(0.);\n    float cnt =7.;\n    float acc = 0.;\n    for (float j = 0.; j < cnt; ++j)\n    {\n        float f = sat(j/cnt);\n        f = f*f*f;\n        acc += f;\n      rgb += texture(iChannel1, uv, j).xyz*f;\n    }\n    rgb /= acc;\n    */\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 32567,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/elektronika-60/6am?si=e6255f1764f041d1a990bc1db0f41c56&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n// Comment for better performances\n#define GOD_RAY\n//#define ANTI_ALIASING\n\n#define GLOW_SAMPLES 40\n#define GLOW_DISTANCE 0.1\n#define GLOW_POW 1.1\n#define GLOW_OPACITY 1.76\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456789)*123.456,1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 2.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\nvec3 lpos = vec3(-20.,10.,-10.);\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n\n    //acc = _min(acc, vec2(length(p)-1., 0.));\n    float rep = 3.;\n    p.z += iTime;\n    vec3 op = p;\np.xy *= r2d(sin(p.z)*.1);\n    vec3 pw = p-vec3(0.,-3.,-.2);\n    pw.z = mod(p.z+rep*.5,rep)-rep*.5;\n    float win = length(pw.yz)-1.;\n    win = min(win, _sqr(pw.yz-vec2(1., 0.), vec2(1.,1.)));\n    float sc = 7.;\n    float off = .7;\n    float repy = 1.5;\n    pw.y = mod(pw.y+repy*.5,repy)-repy*.5;\n    win = max(win, -(abs(pw.y)-.1));\n    win = max(win, -(abs(pw.z)-.1));\n\n    float wall = abs(-p.x)-.05;\n    wall = max(wall, -win);\n    acc = _min(acc, vec2(wall, 0.));\n\n    float ground = max(-op.y, op.x);\n    acc = _min(acc, vec2(ground, 1.));\n\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 traceshadow(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 15.; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 30.; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        #ifdef GOD_RAY\n        if (p.x > -6.)\n        {\n            vec3 ldir = normalize(p-lpos);\n            accCol += (1.-sat(-p.x*.25))*.04*vec3(0.890,0.365,0.996)*float(traceshadow(p+(vec3(rand(), rand(), rand())-.5)*.1, ldir, 32).y < 0.);\n        }\n        #endif\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\n\n\nvec3 getEnv(vec3 rd)\n{\n    return mix(\n    vec3(0.945,0.541,1.000),\n    vec3(0.078,0.157,0.565), \n    1.-texture(iChannel3, rd*vec3(1.,-1.,1.)).x)*2.;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-3.,-2.,-7.);\n    vec3 ta = vec3(-.5+sin(iTime)+sin(iTime*2.3)*.25,-1.5+sin(iTime*3.3)*.1+sin(iTime*2.2-.2)*.15,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n    float depth = 100.;\n    float side = 1.;\n    vec3 acc = accCol;\n    if (res.y > 0.)\n    {\n        side = 0.;\n        depth = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        \n        if (res.z == 1.)\n        {\n        vec3 ldir = normalize(p-lpos);\n        vec3 resshadow = traceshadow(p+n*0.01, ldir, 32);\n        vec3 rgb = mix(vec3(0.341,0.090,0.812), 2.*vec3(0.812,0.090,0.620),\n        texture(iChannel0, p.xz*.01+iTime*0.001).x)*2.;\n        col = float(resshadow.y < 0. && p.x > -6.)\n        *rgb*sat(dot(ldir, n));\n        col = sat(col);\n        }\n        else\n            col = vec3(0.);\n    }\n    else\n        col = getEnv(rd);\n    vec3 backCol = mix(vec3(0.), getEnv(rd), sat((rd.x-.1)*100.)*side);\n    col = mix(col, backCol, 1.-exp(-depth*0.06));\n    col += acc;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = (fragCoord)/iResolution.xy;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    _seed = iTime+texture(iChannel0, uv).x;\n    vec3 col = rdr(uv);\n    \n    col = sat(col);\n    vec2 off = vec2(1., -1.)/(iResolution.x*1.5);\n\n    // Not so cheap antialiasing\n    #ifdef ANTI_ALIASING\n    {\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n    }\n    #endif\n\n    col = sat(col);\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .7);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}