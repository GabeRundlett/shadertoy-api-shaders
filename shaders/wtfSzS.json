{
    "Shader": {
        "info": {
            "date": "1563343403",
            "description": "Kuwahara filter",
            "flags": 32,
            "hasliked": 0,
            "id": "wtfSzS",
            "likes": 4,
            "name": "Kuwahara Filter???",
            "published": 3,
            "tags": [
                "filter",
                "kuwahara",
                "convo"
            ],
            "usePreview": 0,
            "username": "boysx",
            "viewed": 951
        },
        "renderpass": [
            {
                "code": "#define FLOAT_MAX 3.402823e+38\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv1 = uv * iResolution.xy;\n    vec2 invres = 1. / iResolution.xy;\n\tvec2 base0 = vec2(0.);\n    vec2 base1 = vec2(0.);\n    float offset = float((FILTER_SIZE-1) / 2);\n    \n    vec3 m = vec3(FLOAT_MAX);\n    vec3 o;\n    vec3 var;\n    \n    // TODO: NEED A PROPER OPTIMIZATION\n    \n    // Red\n    base0 = uv1;\n    var.r = texture(iChannel1, base0 * invres).r;\n    if(var.r < m.r) { m.r = var.r; base1 = base0; }\n    base0.x = uv1.x + offset;\n    var.r = texture(iChannel1, base0 * invres).r;\n    if(var.r < m.r) { m.r = var.r; base1 = base0; }\n    base0.y = uv1.y + offset;\n    var.r = texture(iChannel1, base0 * invres).r;\n    if(var.r < m.r) { m.r = var.r; base1 = base0; }\n    base0 = uv1;\n    var.r = texture(iChannel1, base0 * invres).r;\n    if(var.r < m.r) { m.r = var.r; base1 = base0; }\n    o.r = texture(iChannel0, (base1 + 0.5) * invres).r;\n    \n    // Green\n    base0 = uv1;\n    var.g = texture(iChannel1, base0 * invres).g;\n    if(var.g < m.g) { m.g = var.g; base1 = base0; }\n    base0.x = uv1.x + offset;\n    var.g = texture(iChannel1, base0 * invres).g;\n    if(var.g < m.g) { m.g = var.g; base1 = base0; }\n    base0.y = uv1.y + offset;\n    var.g = texture(iChannel1, base0 * invres).g;\n    if(var.g < m.g) { m.g = var.g; base1 = base0; }\n    base0 = uv1;\n    var.g = texture(iChannel1, base0 * invres).g;\n    if(var.g < m.g) { m.g = var.g; base1 = base0; }\n    o.g = texture(iChannel0, (base1 + 0.5) * invres).g;\n    \n    // Blue\n    base0 = uv1;\n    var.b = texture(iChannel1, base0 * invres).b;\n    if(var.b < m.b) { m.b = var.b; base1 = base0; }\n    base0.x = uv1.x + offset;\n    var.b = texture(iChannel1, base0 * invres).b;\n    if(var.b < m.b) { m.b = var.b; base1 = base0; }\n    base0.y = uv1.y + offset;\n    var.b = texture(iChannel1, base0 * invres).b;\n    if(var.b < m.b) { m.b = var.b; base1 = base0; }\n    base0 = uv1;\n    var.b = texture(iChannel1, base0 * invres).b;\n    if(var.b < m.b) { m.b = var.b; base1 = base0; }\n    o.b = texture(iChannel0, (base1 + 0.5) * invres).b;\n    \n#if EDGE == 1\n    vec3 border = texture(iChannel1, uv).rgb;\n    fragColor = vec4(o, 1.0) - vec4(length(border));\n    //fragColor = vec4(b);\n#else\n    fragColor = vec4(o, 1.0);\n#endif\n    \n    fragColor.a = 1.0;\n    \n    // Output to screen\n    //fragColor = vec4(m,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    ivec2 iuv = ivec2(uv * iResolution.xy);\n   \tint offset = (FILTER_SIZE-1) / 2;\n    vec3 sum0 = vec3(0.);\n    vec3 v;\n    float n = 0.;\n    \n    for(int x = iuv.x; x < iuv.x + FILTER_SIZE; x++)\n    {\n        for(int y = iuv.y; y < iuv.y + FILTER_SIZE; y++)\n        {\n            v = texture(iChannel0, vec2(float(x - offset), float(y - offset)) / iResolution.xy).rgb;\n            sum0 += v;\n            n += 1.;\n        }\n    }\n    \n    \n    fragColor = vec4(sum0 / n, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    ivec2 iuv = ivec2(uv * iResolution.xy);\n    int offset = (FILTER_SIZE-1) / 2;\n    vec3 sum0 = vec3(0.), sum1 = vec3(0.);\n    vec3 v;\n    float n = 0.;\n    \n    for(int x = iuv.x; x < iuv.x + FILTER_SIZE; x++)\n    {\n        for(int y = iuv.y; y < iuv.y + FILTER_SIZE; y++)\n        {\n            v = texture(iChannel0, vec2(float(x - offset), float(y - offset)) / iResolution.xy).rgb;\n            sum0 += v;\n            sum1 += v * v;\n            n += 1.;\n        }\n    }\n    \n    fragColor = vec4(sum1 - sum0 * sum0 / n, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Kuwahara Filter\n// Adapted from https://imagej.nih.gov/ij/plugins/kuwahara.html\n// This shader is quite heavy and unoptimized, please choose filter size between 1-10\n\n#define FILTER_SIZE 7\n#define EDGE 0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}