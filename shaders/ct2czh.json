{
    "Shader": {
        "info": {
            "date": "1691475531",
            "description": "Aka Cucube took some weird M&M's on the disco floor.\nMediocre result, but the wave effect of color works not that bad which was the primary experiment for this jam.",
            "flags": 96,
            "hasliked": 0,
            "id": "ct2czh",
            "likes": 9,
            "name": "大龙猫 - Shader ByteJam 2023-08-07 ",
            "published": 3,
            "tags": [
                "cube"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "// HELLO !\n//  ###########################################################\n//  >> ASK  FOR MORE SHADER SHOWDOWN TO YOUR LOCAL DEMOPARTY <<\n// //  #######################################################\n\n// Music on BUFFER A\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// HELLO !\n//  ###########################################################\n//  >> ASK  FOR MORE SHADER SHOWDOWN TO YOUR LOCAL DEMOPARTY <<\n// //  #######################################################\n#define fGlobalTime iTime\nfloat bpm;\nfloat rnd;\nvec3 edges(vec3 p){\n      vec3 ap=abs(p);\n      if(ap.x>ap.z) return vec3(ap.x/p.x,0,0);\n     return vec3(0,0,ap.z/p.z);\n  }\n\nvec3 erot(vec3 p,vec3 ax,float t){return mix(dot(ax,p)*ax,p,cos(t))+cross(ax,p)*sin(t);}\nfloat box(vec3 p,vec3 b){p=abs(p)-b; return length(max(vec3(0.),p))+min(0.,max(p.x,max(p.y,p.z)));}\nvec2 sdf(vec3 p){\n      vec2 h;\n      vec3 hp=p;\n       hp.z -=bpm;\n      float jump = -bpm;\n      hp.y -=sqrt(2.)*abs(sin(bpm*3.14));\n      hp = erot(hp,vec3(1,0,0),jump*3.14);\n      h.x = box(hp,vec3(1.));\n      h.y = 1.;\n  \n    vec2 t;\n    vec3 tp=p;\n    \n    tp.y+=1.5;\n    vec3 id = floor(tp)+.5;\n    id.y=0.;\n  \n    vec3 nid  = id + edges(hp-id);\n    nid .y= 0.;\n     float diff = sin(dot(cos(id*.4),sin(id.zyx*.3)))/2.;\n  diff= dot(cos(id*.4),sin(id.zyx*.3));\n     tp.y+=diff/2.;\n    t.x = box(tp-id,vec3(.49,max(0.1,diff/2.),.49));\n    t.x = min(t.x,box(tp-nid,vec3(.493,1.,.493)));\n    \n    // t.x = max(abs(tp.x)-5.,t.x);\n    t.y=3.+dot(sin(id*.4),cos(id.yzx*.23));\n  h= t.x < h.x ? t:h;\n      return h;\n}\n#define q(s) s*sdf(p+s).x\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(0,.1,.2)));}\nvec3 norm(vec3 p,float ee){vec2 e= vec2(-ee,ee);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\n\n#define FBI(x,y) (floatBitsToInt(x)^floatBitsToInt(y))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   bpm = fGlobalTime;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  uv*=1.+abs(tanh(sin(-fGlobalTime+length(uv))*10.));\n    rnd =  fract(54.845*sin(dot(uv,vec2(353.35,676.35))));\n  bpm+=rnd*.1*length(uv);\n  bpm = floor(bpm) + smoothstep(0.,1.,pow(fract(bpm),.75));\n vec3 col =vec3(0.);\n  float zoomzoomzeum=sin(fGlobalTime);\n  vec3 ro=vec3(5.,2.,-5.),rt=vec3(0.);\n  ro = erot(ro,vec3(0.,1.,0.),bpm);\n  ro.x +=zoomzoomzeum;\n  ro.z +=bpm;\n  rt.z +=bpm;\n  vec3 z= normalize(rt-ro),x=normalize(cross(z,vec3(0.,-1.,0.))),y=cross(z,x);\n  vec3 rd=mat3(x,y,z)*normalize(vec3(uv,(1.-zoomzoomzeum*.5+.5)));\n  vec3 rp=ro;\n  vec3 light = vec3(1.,2.,-3.);\n  vec3 acc = vec3(0.);\n  for(float i=0.;i++<128.;){\n    \n       vec2 d =sdf(rp);\n       float effectSwitch = mod(fGlobalTime,20.)<5. ? d.y:0.;\n       float wave= exp(-7.*fract(effectSwitch+bpm*.5+rp.y*.1-.05*length(rp.xz-vec2(0,bpm))));\n       if(d.x<.1 &&d.y==1.)acc +=mix(vec3(.1),pal(d.y),tanh(wave))*exp(-abs(d.x))/(60.-wave*50.);\n       if(d.y==1.)d.x = max(.001,abs(d.x));\n       rp+=rd*d.x;\n       if(d.x<.001){\n            vec3 n = norm(rp,.001);\n           float dif = max(0.,dot(normalize(light),n));\n         \n           col =mix(vec3(.001),pal(d.y),tanh(wave))*dif;\n           \n           break;\n       }\n    }\n    ivec2 gl = ivec2(gl_FragCoord.xy);\n    ivec2 off= ivec2(5.);\n    float vr = texelFetch(iChannel0,gl+off,0).a;\n    float vg = texelFetch(iChannel0,gl-off,0).a;\n    float vb = texelFetch(iChannel0,gl-off,0).a;\n\tfragColor = vec4(mix(vec3(vr,vg,vb)*.1,sqrt(col+acc),sin(bpm)+1.5+2.*texture(iChannel1,vec2(.1)).r),length(col+acc));\n\n  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 34382,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ahi_jp/ahiep12-architect-sketches"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}