{
    "Shader": {
        "info": {
            "date": "1586203072",
            "description": "Visualization of the Polar curve of an elliptic curve with respect to the mouse point",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws2cRW",
            "likes": 6,
            "name": "Polar of elliptic curve",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "ellipticcurve"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "/*\nVisualization of the Polar Curve of an elliptic curve\nwith respect to the mouse point.\n\nThe Polar of a Curve (degree n) with respect to a point p\nis a curve with degree n-1 which goes through all\nsingularities (none for an elliptic curve)\nand all points on the curve whose tangents pass through p.\n\nFor a projective curve given by a homogenous equation\nits homogenous equation can be calculated by computing the dot product of\nthe projective coordinates of a point with the curve's gradient.\n\nThe blue curve is the elliptic curve\nThe green dot is the mouse point\nThe cyan curve is the Polar of the elliptic curve with respect to the mouse point\nThe red dots are the intersection points of the elliptic curve and its Polar\nThe green lines are the tangents at the intersection points of the elliptic curve and its Polar\n\nFor some mouse positions the iterative computation of the\nintersection points fail.\n\nsee https://en.wikipedia.org/wiki/Polar_curve\n*/\n\n//#define SHOW_BASINS\n//#define SHOW_INITAL_POINTS\n//#define ANIMATE_CURVE\n\nconst int grad_descent_iterations=12;\n\nfloat border;\n\nconst float eps = .005;\n\nconst float pi=3.14159265358979;\n\nfloat spectral(float x){\n        return clamp(abs(mod((x/pi+1.)*4.,8.)-4.)-2.,-.75,.75)*.5/.75+.5;\n}\n\nvec3 to_col(vec2 z){\n\tfloat direction =atan(z.x,z.y);\n\treturn vec3(spectral(direction),spectral(direction+pi/2.),spectral(direction-pi));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tfloat aspect_ratio = iResolution.x / iResolution.y;\n\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n\tuv-=.5;\n\tuv.x *= aspect_ratio;\n\n\tvec2 mouse = (iMouse.xy+1.) / iResolution.xy;\n\tmouse-=.5;\n\tmouse.x *= aspect_ratio;\n\n\tconst float line_width = .001;\n\tconst float curve_width = .001;\n\tconst float dot_size = .01;\n\n\tconst float axis_width = .005;\n\n\tconst vec3 bg_col = vec3(1,1,1);\n\tconst vec3 axis_col = vec3(0,0,0);\n\tconst vec3 line_col = vec3(0,1,0);\n\tconst vec3 curve_col = vec3(0,0,1);\n\tconst vec3 polar_curve_col = vec3(0,1,1);\n\tconst vec3 dot_col = vec3(1,0,0);\n\tconst vec3 initial_dot_col = vec3(0,0,0);\n\tconst vec3 mouse_dot_col = vec3(0,1,0);\n\n    border = 2./iResolution.y;\n\n\tfloat curve_dis = 1e38;\n\tfloat polar_curve_dis = 1e38;\n\tfloat dot_dis = 1e38;\n\tfloat initial_dot_dis = 1e38;\n\tfloat mouse_dot_dis = 1e38;\n\tfloat axis_dis = 1e38;\n\tfloat line_dis = 1e38;\n\n\t//elliptic curve parameters (weierstrass normal form)\n\n\t#ifdef ANIMATE_CURVE\n\tfloat anim=sin(mod(iTime*.1,2.*pi));\n\n\tfloat g_2 = .3 + .2*anim;\n\tfloat g_3 = -.05 + .05*anim;\n\t#else\n\tfloat g_2 = .3;\n\tfloat g_3 = -.05;\n\t#endif\n\n\tvec2 p0=mouse;\n\n\t//initial approximations of the intersection points\n\tvec2[6] int_pnts=vec2[](vec2(.0,.25),vec2(.0,-.25),\n\t                        vec2(-.25*aspect_ratio,.25),vec2(-.25*aspect_ratio,-.25),\n\t                        vec2(.25*aspect_ratio,.25),vec2(.25*aspect_ratio,-.25));\n\n\t//compute intersection points by alternately gradient descenting to curve and polar of curve\n\tfloat int_p_val, polar_int_p_val, p1_val, polar_p1_val;\n\tvec2 int_p_grad, polar_int_p_grad, p1_grad, polar_p1_grad;\n\n\t#ifdef SHOW_BASINS\n\tvec2 p1=uv;\n\t#endif\n\n\t#ifdef SHOW_INITAL_POINTS\n\tfor(int i=0;i<6;i++){\n\t\tinitial_dot_dis=min(initial_dot_dis,distance(int_pnts[i],uv)-dot_size);\n\t}\n\t#endif\n\n\tfor(int i=0;i<grad_descent_iterations;i++){\n\t\tfor(int j=0;j<6;j++){\n\t\t\tint_p_val = int_pnts[j].y*int_pnts[j].y - (( 4.*int_pnts[j].x*int_pnts[j].x - g_2 ) * int_pnts[j].x - g_3);\n\t\t\tint_p_grad = vec2(-12.*int_pnts[j].x*int_pnts[j].x+g_2,2.*int_pnts[j].y);\n\t\t\tint_pnts[j]-=(int_p_grad*int_p_val)/dot(int_p_grad,int_p_grad);\n\n\t\t\tpolar_int_p_val=p0.x*(12.*int_pnts[j].x*int_pnts[j].x-g_2)+p0.y*(-2.*int_pnts[j].y)+(-2.*g_2*int_pnts[j].x-int_pnts[j].y*int_pnts[j].y-3.*g_3);\n\t\t\tpolar_int_p_grad=vec2(p0.x*24.*int_pnts[j].x-2.*g_2,-2.*p0.y-2.*int_pnts[j].y);\n\t\t\tint_pnts[j]-=(polar_int_p_grad*polar_int_p_val)/dot(polar_int_p_grad,polar_int_p_grad);\n\t\t}\n\n\t\t#ifdef SHOW_BASINS\n\t\tp1_val = p1.y*p1.y - (( 4.*p1.x*p1.x - g_2 ) * p1.x - g_3);\n\t\tp1_grad = vec2(-12.*p1.x*p1.x+g_2,2.*p1.y);\n\t\tp1-=(p1_grad*p1_val)/dot(p1_grad,p1_grad);\n\n\t\tpolar_p1_val=p0.x*(12.*p1.x*p1.x-g_2)+p0.y*(-2.*p1.y)+(-2.*g_2*p1.x-p1.y*p1.y-3.*g_3);\n\t\tpolar_p1_grad=vec2(p0.x*24.*p1.x-2.*g_2,-2.*p0.y-2.*p1.y);\n\t\tp1-=.1*(polar_p1_grad*polar_p1_val)/dot(polar_p1_grad,polar_p1_grad);\n\t\t#endif\n\t}\n\n\tmouse_dot_dis=min(mouse_dot_dis,distance(p0,uv)-dot_size);\n\n\tfor(int i=0;i<6;i++){\n\t\tint_p_val = int_pnts[i].y*int_pnts[i].y - (( 4.*int_pnts[i].x*int_pnts[i].x - g_2 ) * int_pnts[i].x - g_3);\n\t\tif(abs(int_p_val)<eps){\n\t\t\tdot_dis=min(dot_dis,distance(int_pnts[i],uv)-dot_size);\n\t\t\tint_p_grad = vec2(-12.*int_pnts[i].x*int_pnts[i].x+g_2,2.*int_pnts[i].y);\n\t\t\tvec3 tangent=vec3(normalize(int_p_grad),0);\n\t\t\ttangent.z=-dot(int_pnts[i],tangent.xy);\n\n\t\t\tline_dis=min(line_dis,abs(dot(vec3(uv,1),tangent)));\n\t\t}\n\t}\n\n\tfloat uv_val = uv.y*uv.y - (( 4.*uv.x*uv.x - g_2 ) * uv.x - g_3);\n\tvec2 uv_grad = vec2(-12.*uv.x*uv.x+g_2,2.*uv.y);\n\n\tcurve_dis=min(curve_dis, abs(uv_val)/length(uv_grad)-curve_width);\n\n\tfloat polar_uv_val=p0.x*(12.*uv.x*uv.x-g_2)+p0.y*(-2.*uv.y)+(-2.*g_2*uv.x-uv.y*uv.y-3.*g_3);\n\tvec2 polar_uv_grad=vec2(p0.x*24.*uv.x-2.*g_2,-2.*p0.y-2.*uv.y);\n\n\tpolar_curve_dis=min(polar_curve_dis, abs(polar_uv_val)/length(polar_uv_grad)-curve_width);\n\n\taxis_dis=min(axis_dis, abs(uv.x));\n\taxis_dis=min(axis_dis, abs(uv.y));\n\n\tvec3 color = bg_col;\n\n\t#ifdef SHOW_BASINS\n\tcolor=to_col(p1)*.5;\n\t#endif\n\n\tcolor=vec3(mix(axis_col,color,smoothstep(0., border, axis_dis)));\n\tcolor=vec3(mix(line_col,color,smoothstep(0., border, line_dis)));\n\tcolor=vec3(mix(polar_curve_col,color,smoothstep(0., border, polar_curve_dis)));\n\tcolor=vec3(mix(curve_col,color,smoothstep(0., border, curve_dis)));\n\tcolor=vec3(mix(dot_col,color,smoothstep(0., border, dot_dis)));\n\tcolor=vec3(mix(initial_dot_col,color,smoothstep(0., border, initial_dot_dis)));\n\tcolor=vec3(mix(mouse_dot_col,color,smoothstep(0., border, mouse_dot_dis)));\n\n\tfragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}