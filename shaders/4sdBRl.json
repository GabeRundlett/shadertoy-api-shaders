{
    "Shader": {
        "info": {
            "date": "1526461522",
            "description": "simple and fast Gaussian blur.\nupdated in 2020.",
            "flags": 32,
            "hasliked": 0,
            "id": "4sdBRl",
            "likes": 4,
            "name": "Basic Gaussian Blur",
            "published": 3,
            "tags": [
                "blur"
            ],
            "usePreview": 1,
            "username": "Neyco",
            "viewed": 1667
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float lod = ceil(4. * (iMouse.x > 0.0 ? iMouse.x / iResolution.x : 1.));\n\n    fragColor = gaussBlur(iChannel0, fragCoord/iResolution.xy,\n        vec2(0., exp2(lod)/iChannelResolution[0].y), lod);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float lod = ceil(4. * (iMouse.x > 0.0 ? iMouse.x / iResolution.x : 1.));\n    \n    fragColor = gaussBlur(iChannel0, fragCoord/iResolution.xy,\n        vec2(exp2(lod)/iChannelResolution[0].x, 0.), lod);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float sigma = 3.;\nconst float r = sigma * 2.;\nconst float invTwoSigmaSqr = 1. / (2. * sigma * sigma);\n\nvec4 gaussBlur( sampler2D tex, vec2 uv, vec2 d, float lod )\n{\n    vec4 c = textureLod(tex, uv, lod);\n    \n    for (float i = 1.; i < r; ++i) c += (\n        textureLod(tex, uv + d * i, lod) +\n        textureLod(tex, uv - d * i, lod)\n        ) * exp(- i * i * invTwoSigmaSqr);\n    \n    return c / c.a;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}