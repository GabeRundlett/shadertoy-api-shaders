{
    "Shader": {
        "info": {
            "date": "1680378692",
            "description": "ChatGPT 4 generated breathing, psychedelic closed eye visuals",
            "flags": 0,
            "hasliked": 0,
            "id": "ddtSWB",
            "likes": 3,
            "name": "ShaderBot Psychedelic",
            "published": 3,
            "tags": [
                "psychedelic",
                "breathing"
            ],
            "usePreview": 0,
            "username": "whimsy0000",
            "viewed": 189
        },
        "renderpass": [
            {
                "code": "// Permutation for the noise function\nconst vec3[4] c_permutation = vec3[](\n    vec3(151,160,137), vec3(161,107, 47), vec3(202, 95, 33), vec3(217, 60, 44)\n);\n\nfloat fade(float t) {\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat grad(int hash, float x, float y) {\n    int h = hash & 15;\n    float u = h < 8 ? x : y;\n    float v = h < 4 ? y : (h == 12 || h == 14 ? x : 0.0);\n    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n}\n\nfloat perlinNoise(vec2 p) {\n    vec2 P = floor(p);\n    vec2 f = fract(p);\n\n    float A = dot(c_permutation[int(P.x) & 3], c_permutation[int(P.y) & 3]);\n    float B = dot(c_permutation[int(P.x) & 3], c_permutation[int(P.y + 1.0) & 3]);\n    float C = dot(c_permutation[int(P.x + 1.0) & 3], c_permutation[int(P.y) & 3]);\n    float D = dot(c_permutation[int(P.x + 1.0) & 3], c_permutation[int(P.y + 1.0) & 3]);\n\n    vec2 u = vec2(fade(f.x), fade(f.y));\n\n    return mix(mix(grad(int(A), f.x, f.y),\n                   grad(int(B), f.x, f.y - 1.0),\n                   u.y),\n               mix(grad(int(C), f.x - 1.0, f.y),\n                   grad(int(D), f.x - 1.0, f.y - 1.0),\n                   u.y),\n               u.x) * 0.5 + 0.5;\n}\n\n// Shader code for shadertoy.com\n\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime * 0.1;\n    \n    vec2 p = uv * 10.0 + t;\n    float noise = perlinNoise(p);\n    \n    float breathe = sin(iTime * .2) * 0.5 + 1.0;\n    float scale =  6.0 * noise * breathe;\n    vec2 st = uv * scale;\n    \n    float angle = 2.0 * 3.14159 * noise * breathe;\n    vec2 rotateUv;\n    rotateUv.x = st.x * cos(angle) - st.y * sin(angle);\n    rotateUv.y = st.x * sin(angle) + st.y * cos(angle);\n    \n    float fractal = perlinNoise(rotateUv);\n    \n    vec3 color;\n    color.r = fractal;\n    color.g = fractal * 0.8;\n    color.b = fractal * 0.5;\n    \n    vec3 hsvColor = vec3(fractal + t * 0.1, 1.0, fractal);\n    vec3 rgbColor = hsv2rgb(hsvColor);\n    \n    fragColor = vec4(rgbColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}