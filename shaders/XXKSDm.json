{
    "Shader": {
        "info": {
            "date": "1720108567",
            "description": "An small, pixelated, planet with granular pixel resolution control. (Very much in a learning process)",
            "flags": 0,
            "hasliked": 0,
            "id": "XXKSDm",
            "likes": 0,
            "name": "Small Pixelated Planet",
            "published": 3,
            "tags": [
                "noise",
                "pixel",
                "planet",
                "pixelated"
            ],
            "usePreview": 0,
            "username": "Unfiddler",
            "viewed": 23
        },
        "renderpass": [
            {
                "code": "#define PPX 48.\n\nfloat _fLightIntensity = 1.225;\nvec3 _vLightDir = vec3(-1., 1., 1.);\nvec3 _vLightCol = vec3(1., 1., 1.);\nvec3 _vShadowCol = vec3(20./255., 28./255., 41./255.);\n\nconst float bayer[64] = float[64](\n     -0.500000,  0.250000, -0.312500,  0.437500, -0.453125,  0.296875, -0.265625,  0.484375,\n      0.000000, -0.250000,  0.187500, -0.062500,  0.046875, -0.203125,  0.234375, -0.015625,\n     -0.375000,  0.375000, -0.437500,  0.312500, -0.328125,  0.421875, -0.390625,  0.359375,\n      0.125000, -0.125000,  0.062500, -0.187500,  0.171875, -0.078125,  0.109375, -0.140625,\n     -0.468750,  0.281250, -0.281250,  0.468750, -0.484375,  0.265625, -0.296875,  0.453125,\n      0.031250, -0.218750,  0.218750, -0.031250,  0.015625, -0.234375,  0.203125, -0.046875,\n     -0.343750,  0.406250, -0.406250,  0.343750, -0.359375,  0.390625, -0.421875,  0.328125,\n      0.156250, -0.093750,  0.093750, -0.156250,  0.140625, -0.109375,  0.078125, -0.171875\n);\n\n/**\n * Construction of a ray-traced sphere, implementation derived from:\n * https://raytracing.github.io/books/RayTracingInOneWeekend.html\n */\nfloat sphere(\n    vec2 uv,\n    vec3 center,\n    float radius,\n    out vec3 p,\n    out vec3 normal\n)\n{\n    vec3 ro = vec3(0., 0., -5.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    \n    vec3 oc = ro - center;\n    float a = dot(rd, rd);\n    float b = 2.0 * dot(oc, rd);\n    float c = dot(oc,oc) - radius*radius;\n    float discriminant = b*b - 4.*a*c;\n    \n    if(discriminant < 0.)\n        return 0.;\n    else\n    {\n        float t = (-b - sqrt(discriminant)) / (2.0*a);\n        p = rd * t;\n        normal = normalize(p - center);\n        return t;\n    }\n}\n\nvec3 region(vec2 uv)\n{\n    int octaves = 5;\n    float amplitude = .8, frequency = .8, lacunarity = 2., gain = .2;\n    \n    float fx = uv.x*8.;\n    float fy = uv.y*8.;\n    \n    float n = .0;\n    for(int i = 0; i < octaves; i++)\n    {\n        n += noise(vec2(fx, fy) * frequency) * amplitude;\n        fx += .8;\n        fy += .8;\n        \n        frequency *= lacunarity;\n        amplitude *= gain;\n    };\n        \n    if(n >= .8)\n        return vec3(1., 1., 1.);\n    else if(n >= .68)\n        return vec3(.4, .3, 0.);\n    else if(n >= .5)\n        return vec3(.3, .2, 0.);\n    else if(n >= .36)\n        return vec3(0.2, 0.8,  0.);\n    else if(n >= .215)\n        return vec3(0.4, 1., 0.);\n    else if(n >= .1)\n        return vec3(0.1, 0.4, 1.);\n    else\n        return vec3(0.08, 0., 0.9);\n}\n\nfloat dither(vec2 p, float brightness)\n{\n    int x = int(mod(p.x, 8.));\n    int y = int(mod(p.y, 8.));\n    \n    float l = bayer[x+y*8];\n    return brightness < l ? 0. : 1.;\n}\n\nvec3 bands(vec3 col, float e0, float e1)\n{\n    float B = floor(PPX) / 8.;\n    return clamp(round(col * B) / B, e0, e1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord / iResolution.xy) - .5) * 2.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 ouv = fragCoord / iResolution.xy;\n    ouv.x *= iResolution.x / iResolution.y;\n    \n    uv *= PPX;\n    uv = (floor(uv) / PPX);\n    \n    vec3 p, normal;\n    float d = clamp(sphere(uv, vec3(0., 0., 0.), 3.2, p, normal), 0., 1.); \n    float ndotl = dot(normal, normalize(_vLightDir));\n    \n    float m = dither(uv*PPX, ndotl*1.8);\n    vec3 col = vec3(1.) * _vLightCol * (.1+ndotl) * _fLightIntensity;\n    col *= d * (bands(col, .08, 1.));\n    \n    vec3 dith = clamp(d*vec3(1.-m), 0., 1.);\n    col += (dith-.7) * (bands(col, .06, 1.) * dith);\n    \n    vec2 ruv = uv;\n    ruv.x += iTime * .2;\n    ruv.y -= iTime * .08;\n    col *= region(ruv);\n    \n    \n    #if 0\n    fragColor = vec4(vec3(region(ruv)), 1.0);\n    #else\n    fragColor = vec4(vec3(col), 1.0);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float random (float x) {\n\tfloat f = 43758.5453123;\n\treturn fract(sin(x) * f);\n}\n\nfloat random (vec2 x) {\n\tvec2 r = vec2(12.9898, 78.233);\n\treturn random(dot(x, r));\n}\n\n//\n// Basic noise functions.\n//\n\nfloat noise(float x) {\n\tfloat i = floor(x);\n\tfloat fr = fract(x);\n\treturn mix(random(i), random(i + 1.0), fr);\n}\n\nfloat noise(vec2 x){\n\tvec2 i = floor(x);\n\tvec2 fr = fract(x);\n\tfr = fr*fr*(3.0-2.0*fr);\n\tfloat res = mix(\n\t\tmix(random(i), random(i+vec2(1.0,0.0)), fr.x),\n\t\tmix(random(i + vec2(0.0,1.0)), random(i + vec2(1.0,1.0)), fr.x),\n\t\tfr.y);\n\treturn res*res;\n}\n\n//\tSimplex 3D Noise by Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat noise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n//\n// FBM functions.\n//\n\nfloat fbm (float x, int octaves, float amplitude, float frequency, float lacunarity, float gain) {\n\tfloat value = 0.0;\n\tfor (int i = 0; i < octaves; ++i) {\n\t\tvalue += amplitude * noise(x * frequency);\n\t\tfrequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}\n\nfloat fbm (vec2 x, int octaves, float amplitude, float frequency, float lacunarity, float gain) {\n\tfloat value = 0.0;\n\t// Rotate to reduce axial bias\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < octaves; ++i) {\n\t\tvalue += amplitude * noise(x * frequency);\n\t\tx *= rot;\n\t\tfrequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}\n\nfloat fbm(vec3 x, int octaves, float amplitude, float frequency, vec3 shift, float lacunarity, float gain) {\n\tfloat value = 0.0;\n    for (int i = 0; i < octaves; ++i) {\n        float sn = noise(x * frequency);\n        value += amplitude * sn;\n        x += shift;\n        frequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}