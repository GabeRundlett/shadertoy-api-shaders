{
    "Shader": {
        "info": {
            "date": "1718524417",
            "description": "post",
            "flags": 0,
            "hasliked": 0,
            "id": "43dXzn",
            "likes": 2,
            "name": "sierpinsky and menger",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "/*menger originals https://www.shadertoy.com/view/NsSSWm and https://www.shadertoy.com/view/flGfWy and other*/\n\n\n#define time iTime\n#define resolution iResolution.xy\n#define PI 3.1415926538\n\nconst float pi = 3.14;\nconst float pi2 = pi*2.;\n\nmat2 rot(float a){\n  return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 pmod(vec2 p, float r){\n  float a = atan(p.x,p.y) + pi/r;\n  float n = pi2/r;\n  a = floor(a*0.1*n)+n;\n\n  return p ;\n}\n\nfloat box(vec2 p, vec2 b){\n  vec2 q = abs(p) - b;\n  return length(max(q,0.)) + min(max(q.x,q.y),0.);\n}\n\nfloat length2( in vec2 p ) { return dot(p,p); }\n\nconst vec2 va = vec2(  0.0, 0.53-0.85 );\nconst vec2 vb = vec2(  0.5, 0.00-0.85 );\nconst vec2 vc = vec2( -0.5, 0.00-0.85 );\n\n// return distance and address\nvec2 map( vec2 p )\n{\n\tfloat a = 0.0;\n\tvec2 c;\n\tfloat dist, d, t;\n\tfor( int i=0; i<10; i++ )\n\t{\n\t\td = length2(p-va);                 c = va; dist=d; t=0.0;\n        d = length2(p-vb); if (d < dist) { c = vb; dist=d; t=0.25; }\n        d = length2(p-vc); if (d < dist) { c = vc; dist=d; t=0.5; }\n\t\tp = c + 2.0*(p - c);\n\t\t\n\t}\n\t\n\treturn vec2( length(p)/pow(2.0, 7.0), a/pow(3.0,7.0) );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\n\nfloat fractal1(in vec2 p, in vec2 size)\n{\n    return max(sdBox(p,size),-sdBox(p,size/3.0));\n}\n\n\nfloat fractal2(in vec2 p, in vec2 size)\n{\n    size = size/3.0;\n    float minimum = min(  fractal1(vec2(p.x-2.0*size.x,p.y), size),\n                          fractal1(vec2(p.x+2.0*size.x,p.y), size));\n    minimum = min(minimum,fractal1(vec2(p.x,p.y+2.0*size.y), size));\n    minimum = min(minimum,fractal1(vec2(p.x,p.y-2.0*size.y), size));\n    \n    minimum = min(minimum,fractal1(vec2(p.x-2.0*size.x,p.y+2.0*size.y), size));\n    minimum = min(minimum,fractal1(vec2(p.x+2.0*size.x,p.y-2.0*size.y), size));\n    \n    minimum = min(minimum,fractal1(p+2.0*size, size));\n    minimum = min(minimum,fractal1(p-2.0*size, size));\n    return minimum;\n\n}\n\nfloat fractal3(in vec2 p, in vec2 size)\n{\n    size = size/3.0;\n    float minimum = min(  fractal2(vec2(p.x-2.0*size.x,p.y), size),\n                          fractal2(vec2(p.x+2.0*size.x,p.y), size));\n    minimum = min(minimum,fractal2(vec2(p.x,p.y+2.0*size.y), size));\n    minimum = min(minimum,fractal2(vec2(p.x,p.y-2.0*size.y), size));\n    \n    minimum = min(minimum,fractal2(vec2(p.x-2.0*size.x,p.y+2.0*size.y), size));\n    minimum = min(minimum,fractal2(vec2(p.x+2.0*size.x,p.y-2.0*size.y), size));\n    \n    minimum = min(minimum,fractal2(p+2.0*size, size));\n    minimum = min(minimum,fractal2(p-2.0*size, size));\n    return minimum;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\t vec2 p = (gl_FragCoord.xy*2.-resolution)/min(resolution.x,resolution.y);\n  vec2 uv = p;\n  uv.y-=0.7;\n\tvec2 r = map( uv );\n\t  vec2 uv2 = fragCoord/iResolution.yy;\n\tvec3 col2 = 0.5 + 0.5*sin( 3.1416*r.y + vec3(0.0,5.0,5.0) );\n\tcol2 *= 1.0 - smoothstep( 0.0, 0.02, r.x );\n\t\n  vec3 col = vec3(0.);\nvec4 fragColor2;\n   float dis = fractal3(uv2-vec2(0.9,0.5), vec2(0.5,0.5));\n    if (dis<0.0)\n    {\n    vec4 fragColor2 = vec4(0.50,5.0,0.0,1.0);\n    }\n    else\n    {\n    fragColor2 = vec4(0.0,.0,5.0,1.0);\n    }\n\n  uv = pmod(uv, abs(10.));\n  for(int i=0; i<18; i++){\n    uv = abs(uv)-.055;\n \n    float box = box(uv, vec2(2.5-uv));\n    \n\n    vec3 x = vec3(0.,0.1,0.) * (.05)/length(box+cos(iTime));\n    vec3 xc = vec3(1.,.5,1.1) * (.001)/length(uv.x+cos(iTime)) + vec3(1.,.1,1.1) * (.001)/length(uv.y) + vec3(0.,1.,.1) * (.0015)/length(uv);\n    col +=  x +xc+col2;\n  }\n\n  fragColor = vec4(col+fragColor2.xyz,1.);\n\t\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}