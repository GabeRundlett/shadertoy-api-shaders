{
    "Shader": {
        "info": {
            "date": "1481723170",
            "description": "Purpose: cheap scanning of a moderate displacement on a flat surface.\nPrinciple: project this on the surface with a videoproj at 45° (from far). take the photo from (far) above. \nIn the image, compute (1+R-G)/(2B), which represent fract(N.(x + z(x,y) ))",
            "flags": 0,
            "hasliked": 0,
            "id": "lltXD2",
            "likes": 7,
            "name": "z-capture with structured light",
            "published": 3,
            "tags": [
                "scanner",
                "zcapture"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1066
        },
        "renderpass": [
            {
                "code": "// Purpose: cheap scanning of a moderate displacement on a flat surface.\n\n// Principle: project this on the surface with a videoproj at 45° (from far). \n//            take the photo from (far) above. \n//            In the image, compute (R-G)/(2B), which represent I = fract(N.(x + z(x,y) ))\n//            From geometry of projection (or from photo without displ), \n//            you already know x and I0 = fract(Nx)\n//            z = unwrap(I-I0)/N      a simple unwrap(x): fract(x)\n//            (algo: see demo code below).\n\n// if band artifact: regularise, or mix 2 scans with bands offseted by 1/2 \n\n#define N 10.\n#define Hmax .1  // for demo: max height (length unit = image size).\n\n#define TEST true\n\n#define unwrap(y)  fract( y +1./256.)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    U /= iResolution.xy;\n    float y = U.y;\n    if (!TEST) U.x--;\n    \n    if (U.x > .33) y += Hmax*texture(iChannel0,U).x;      // for demo: simulate projection\n    \n\ty = fract(N * y );\n\tO = pow( vec4(y,1.-y,1,1), vec4(1./2.2) );              // structured image to project on geometry\n    \n    if (U.x > .67) {                                        // for demo: reconstruct z\n\t    O = floor(O*256.)/256.;                             // captured image\n        O = pow(O, vec4(2.2));                              // gamma\n        y = (1.+O.r-O.g) / (2.*O.b);\n        O = vec4( unwrap( ( y - fract(N*U.y) ) /N/Hmax ) ); // reconstructed displ\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}