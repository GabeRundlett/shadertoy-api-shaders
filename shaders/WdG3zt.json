{
    "Shader": {
        "info": {
            "date": "1570733520",
            "description": "raymarching noob. Procedural audio needs sequencing for the rave",
            "flags": 8,
            "hasliked": 0,
            "id": "WdG3zt",
            "likes": 1,
            "name": "MiRayMarching Bounce",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "milolouis",
            "viewed": 336
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100;\n#define MAX_DIST 100.;\n#define SURFACE_DIST .01;\n\nfloat RayMarch(vec3 ro, vec3 rd);\nfloat GetDist(vec3 p);\nfloat GetLight(vec3 p);\nvec3 GetNormal(vec3 p);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //ray origin\n    vec3 ro = vec3(0,1,0);\n    //ray direction\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float diffuse = GetLight(p);\n    col = vec3(diffuse);\n       \n    fragColor = vec4(col,1.0);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    int i;\n    \n    for (i=0;i<100; i++)\n    {\n        \n        vec3 p = ro + rd*dO;\n        \n        float dS = GetDist(p);\n        dO += dS;\n        \n        if(dS<.01 || dO>100.) break;\n    }\n    return dO;\n}\n\nfloat GetDist(vec3 p) {\n    \n    vec4 sphere = vec4(0,abs(sin(iTime)) + 1.,6,1);\n    float dPlane = p.y;\n    float dSphere = length(p - sphere.xyz) - sphere.w;\n    \n    float dist = min(dPlane, dSphere);\n\n    \n    for(int i = 0; i < 4; i++)\n    {\n        sphere = vec4((float(i) -16.) * .2,abs(sin(iTime * float(i))) + 1.,6,1);\n        float temp = length(p - sphere.xyz) - sphere.w;\n\t\tdist = min(dist, temp);\n    }\n    \n    return dist;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n\tvec3 sunPos = vec3(0, 5. + 4.2, 6);\n    vec3 l = normalize(sunPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = dot(n, l);\n    return dif;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( in int samp, float time )\n{\n    vec2 snda = vec2( sin(6.2831*240.0*time)*tan(4.0*time) ) * 0.2;\n    vec2 sndb = vec2( sin(6.2831*160.0*time)*tan(16.0*time) ) * 0.2;\n    vec2 sndc = vec2( sin(6.2831*141.0*time)*cos(16.0*time) ) * 0.5;\n   \n    // A 440 Hz wave that attenuates quickly overt time\n    return snda + sndb + sndc;\n    \n        // A 440 Hz wave that attenuates quickly overt time\n    vec2 a = sin(6.2831*440.0*time)*exp(-2.0*(time)) * vec2(1,1);\n    vec2 b = sin(6.2831*554.0*time)*exp(-1.0*time) * vec2(1,1);\n    vec2 c = sin(6.2831*220.0*time)*exp(-0.2*time) * vec2(1,1);\n    \n    vec2 f = sin(6.2831*437.80*mod(time, 16383.))*clamp(tan(mod(time, 16383.)), 0. , 1.) * vec2(1,1);\n    \n    vec2 g = sin(6.2831*554.0*mod(time, 16383.))*clamp(tan(mod(time, 16383.) * 10.), 0. , 1.) * vec2(1,1);\n    \n    vec2 d = sin(6.2831*365.0*mod(time, 16383.) + sin(mod(time, 16383.) * 35.))*abs(sin(mod(time, 16383.) * 8.)) * vec2(.7,.7);\n    vec2 e = sin(6.2831*277.18*mod(time, 16383.))*abs(sin(mod(time, 16383.) * 2.666)) * vec2(1.,1.);\n    \n    \n    //a *= 0.;\n    //b *= 0.;\n    //c *= 0.;\n    //d *= 0.;\n    //e *= 0.;\n    //f *= 0.;\n    //g *= 0.;\n\n    return (a + b + c + d + e + f + g) / 7.;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}