{
    "Shader": {
        "info": {
            "date": "1536696927",
            "description": "ref video: [url]https://www.youtube.com/watch?v=E1Vc9pVPVoo[/url]\n\nlooking more conform :-) ",
            "flags": 0,
            "hasliked": 0,
            "id": "XlyyRy",
            "likes": 19,
            "name": "Mobile sculpture 2",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1669
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/llKcDm\n\nfloat l = 5., e = .05, s = .2;  // mobiles maxsize, thickness, offset  \n\nfloat bars( vec3 q, float l) {\n    vec3  a  = abs( q - vec3(l,l,0) ) - e,         // dist to +x and +y sides\n          a1 = abs( q + vec3(l,l,0) ) - e,         // dist to -x and -y sides\n          a2 = abs( q - vec3(l-s,l-s,0) ) - s,     // dist to small part\n          a0 = abs(q) - vec3(l,l,0)   - e;         // dist to full square frame\n    float dx = max(max(a.x,a0.y),a0.z),            // side +x\n          dy = max(max(a0.x,a.y),a0.z),            // side +y\n          t  = min(dx,dy);                         // union\n    dx = max(max(a1.x,a2.y),a0.z);\n    dy = max(max(a2.x,a1.y),a0.z);\n    return min(t,min(dx,dy));\n    \n}\n\n#define rot(a) mat2( cos(a+vec4(0,33,11,0)) )      // https://www.shadertoy.com/view/XlsyWX\n#define rot45 q.xy = vec2(q.x+q.y,q.x-q.y) / sqrt(2.)\n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t = iTime*.1, t0; if (iResolution.y<200.) t-=.92; // icon\n    mat2  R = rot(t);      \n    vec3  q = iResolution,\n          D = normalize(vec3(.3*(U+U-q.xy)/q.y, -1)), // ray direction\n          p = 25./q, a,a0;                            // marching point along ray\n\n    O-=O; t = 1e9;\n    for ( O++; O.x > .0 && t > .01 ; O-=.03 ) {    // ray-marching (indeed, sphere-marching)\n        \n        q  = p;\n        t = t0 = q.z+7.;                           // background (optimization)\n      //q.yz *= rot(-.2);                          // slant \n        q.xz *= R;                                 // global rotation\n        rot45;                                     // make diag vertical\n        \n        for (float i=0.; i<l-s; i+=s) {   \n            t = min(t, bars(q,l-i));               // branche i\n            \n            q += vec3(s,s,0);                      // offset to next part\n            rot45;                                 // to diag axis\n            q.xz *= R;                             // rot\n            rot45;                                 // undo diag (here, equivalent)\n        }\n            \n        p += t*D;                                  // step forward = dist to obj\n    }\n    if (t==t0) O-=O, O.b+=.2;                      // background\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}