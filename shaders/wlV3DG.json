{
    "Shader": {
        "info": {
            "date": "1579810694",
            "description": "A basic game of life simulation where the colors mix over time\nClick to add more agents of a random color\nPress Space to see behind the curtain\nPress R to restart the simulation\nPress C to clear the simulation, provides a blank slate for drawing",
            "flags": 48,
            "hasliked": 0,
            "id": "wlV3DG",
            "likes": 12,
            "name": "Game of Colors",
            "published": 3,
            "tags": [
                "life",
                "life",
                "conway",
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 623
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 c, in vec2 f )\n{\n    vec2 uv = f/iResolution.xy;\n    vec4 t = S1(uv), s = S0(uv);\n    c = texelFetch( iChannel2, ivec2(32,0),0).x>0. ? s : (pow(t,vec4(.15)))*pow(normalize(t)*1.3,vec4(7.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 c, in vec2 f )\n{\n    vec2 uv = f/iResolution.xy;\n    \n    float s = S0(uv).r;\n    \n    //inspired by https://www.shadertoy.com/view/ld3Sz7\n    //reset on frame 0/when the user presses R\n    if(iFrame < 1 || texelFetch( iChannel1, ivec2(82,0),0).x>0.)\n    {\n        c = sign(vec4(rand(uv))-.5);\n    }\n    else if(texelFetch( iChannel1, ivec2(67,0),0).x>0.)\n    {\n        c=vec4(0);\n    }\n    else\n    {\n        if(iMouse.z>0.&&distance(iMouse.xy,f)<15.&&rand(f)>.75 ) c=vec4(1.);\n        else\n        {\n            //sample how many neighbors we have\n            float n =  N(-1, -1) + N(-1, 0) + N(-1, 1) +\n                       N(0,-1)   +            N(0, 1) +\n                       N(1,-1)   + N(1, 0)  + N(1, 1);\n\n            //if we are dead and have 3 neighbors we resurrect\n            if(s<=0.&&n==3.0)s=1.0;\n\n            //kill if we don't have 3 or 2 neighbors\n            if(n!=2.0&&n!=3.0)s*=0.;\n\n            //fade as it ages\n            if(s>0.2)s-=0.01;\n\n            //set the current pixel\n            c = vec4(vec3(s), 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 c, in vec2 f )\n{\n    vec2 uv = f/iResolution.xy;\n    \n    vec4 s = S1(uv);\n    \n    if(iFrame < 1 || texelFetch( iChannel2, ivec2(82,0),0).x>0.)\n    {\n        c = pow(randColor(uv),vec4(10.));\n    }\n    else\n    {        \n        //sample around our pixel to figure out what color we will become\n        vec3[] samp = vec3[](C(-1,0), C(1,0), C(0,1), C(0,-1),\n                             C(-1,1), C(1,1), C(1,-1), C(-1,-1));\n        vec3 a = vec3(0), m = S0(uv).rgb;\n        \n        if(iMouse.z>0.&&distance(iMouse.xy,f)<15.&&rand(f)>.75 ) a=randColor(uv).rgb;\n        \n        float d = 0.;\n        \n        for(int i=0;i<8;i++)\n        {\n            d++;\n            a+= samp[i];\n        }\n\n        a/=d;\n        \n        if(s.r>0.&&length(m)<3.)\n        {\n            a+=m;\n        }\n        \n        c = length(m)<99999. ? vec4(a*(s.rgb+.755), 1.0) : vec4(a,1.0);\n    \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//change i,j into thhe corresponding movement in our coordinate space\n#define R(i,j) vec2(i,j)*vec2(1.0/iResolution.xy)\n//sample in the direction i,j from our current uv position\n#define T(i,j) S0((uv + R(i,j))).r\n//retrieve color from neighboring pixel\n#define C(i,j) S0((uv + R(i,j))).rgb\n//checks if the neighbor is alive\n#define N(i,j) float( T(i,j) > 0.)\n//sample a texture\n#define S0(i) texture(iChannel0, fract(i))\n#define S1(i) texture(iChannel1, fract(i))\n\nfloat rand (vec2 p)\n{\n    return fract(sin(dot(p.xy,vec2(12389.1283,8941.1283)))*(12893.128933+iDate.w));\n}\n\nvec4 randColor(vec2 p)\n{\n    float c = rand(p);\n    float r = float(.5 < rand(p+vec2(-.5,-.5)));\n    float g = float(.5 < rand(p+vec2(.5,.5)));\n    float b = float(.5 > rand(p+vec2(-1.,1.)));\n    \n    return vec4(c*r, c*g, c*b, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}