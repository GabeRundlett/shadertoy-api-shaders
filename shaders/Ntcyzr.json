{
    "Shader": {
        "info": {
            "date": "1661587760",
            "description": "A radial color Hue Picker",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntcyzr",
            "likes": 2,
            "name": "UI - 2D SDF Radial Hue Picker",
            "published": 3,
            "tags": [
                "ui"
            ],
            "usePreview": 0,
            "username": "shmoich",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "// Official HSV to RGB conversion \nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat sdCircle( in vec2 p, in float r )\n{\n    return length(p) - r;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 toPolar(vec2 cartesian)\n{\n    return vec2(length(cartesian), atan(cartesian.x, cartesian.y));\n}\n\nvec3 radialHueFromPoint(vec2 point)\n{\n    float theta = toPolar(point).y;\n    float hue = theta / (2.0 * 3.14);\n    vec3 col = vec3(hue, 1.0, 1.0);\n    col = hsv2rgb(col);\n    return col;\n}\n\n\nvec2 dir(vec2 to, vec2 from)\n{\n    return normalize(from - to);\n}\n\n\n\nvec3 hueColorFromOrginToMouse(vec2 origin, vec2 mouse)\n{\n    float radius = 0.4;\n    vec2 dirvec = dir(mouse, origin);\n    float theta = toPolar(dirvec).y;\n    float hue = map(theta, 0.0, 2.0 * 3.14, 0.0, 1.0);\n    vec3 col = vec3(hue, 1.0, 1.0);\n    col = hsv2rgb(col);\n    return col;\n}\n\n\n\nvec3 colorSDFWithRadialHue(float sdf, vec2 radialOrigin, vec3 inputCol)\n{\n    vec3 col = inputCol;\n    // sdf outline\n    if (sdf < 0.0)\n    {\n        col = radialHueFromPoint(radialOrigin);\n    }\n    if (sdf > 0.0 && sdf < 0.01)\n    {\n        col = mix(inputCol, radialHueFromPoint(radialOrigin), 1.0-smoothstep(0.0, 0.01,abs(sdf)));\n    }\n    \n    return col;\n}\n\nvec3 colorSDFHueFromMouse(float sdf, vec2 origin, vec2 mouse, vec3 inputCol)\n{\n    vec3 col = inputCol;\n    \n    if (sdf < 0.0)\n    {\n        col = hueColorFromOrginToMouse(origin, mouse);\n    }\n    if (sdf > 0.0 && sdf < 0.01)\n    {\n        col = mix(inputCol, hueColorFromOrginToMouse(origin, mouse), 1.0-smoothstep(0.0, 0.01,abs(sdf)));\n    }\n    \n    return col;\n}\n\nfloat hueRingSDF(vec2 p, vec2 m, float roundness)\n{\n    \n    float sdf = sdCircle(p, 0.4);\n    sdf = opSubtraction(sdCircle(p, 0.35), sdf);\n    return sdf;\n}\n\nfloat pickerLineSDF(vec2 origin, vec2 mouse, float roundness)\n{\n    float sdf = sdCircle(origin, 0.05);\n    if (iMouse.z > 0.01) sdf = opUnion(sdSegment(origin, vec2(0), mouse), sdf);\n    return sdf  - roundness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p = (2.0 * fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0 * iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    vec2 pickerPosition = center - vec2(0.0, 0.0);\n    \n    float hueRing = hueRingSDF(pickerPosition, m, 0.1);\n    float picker = pickerLineSDF(pickerPosition, m, 0.1);\n    \n    vec3 background = vec3(0.3, 0.3, 0.3);\n    vec3 col = colorSDFWithRadialHue(hueRing, pickerPosition, background);\n    col = colorSDFHueFromMouse(picker, vec2(0.0, 0.0), m, col);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}