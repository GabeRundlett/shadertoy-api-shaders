{
    "Shader": {
        "info": {
            "date": "1704553787",
            "description": "Second-order discontinuous Galerkin fluid sim. Outperforms MUSCL in linear advection tests. See Common for a more detailed description.",
            "flags": 32,
            "hasliked": 0,
            "id": "4fBGRt",
            "likes": 6,
            "name": "DG fluid sim",
            "published": 3,
            "tags": [
                "simulation",
                "fluid",
                "physics"
            ],
            "usePreview": 0,
            "username": "thepinkpanzer",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "vec4 jet(float x) // from 0 to 1\n{\n    return pow(vec4(x*x*(1.-x)/0.148, pow(x*(1.-x)*4.,2.), x*(1.-x)*(1.-x)/0.148, 0), vec4(1.6));\n}\nvec4 twilight(float x) // from -1 to 1\n{\n    float s  = sign(x);\n    x *= s;\n    \n    float r  = mix(1., (s > 0. ? x*x : x*x*x*x*x), 0.8);\n    float b  = mix(1., (s < 0. ? x*x : x*x*x*x*x), 0.8);\n    float g  = mix(1., x*x*x*x, 0.95);\n    return pow(vec4(r, g, b, 0), vec4(1.4));\n}\nvec4 recolor(float x)\n{\n    x = tanh(x);\n    return jet(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 Q   = texture(iChannel0, uv);\n    \n    vec4 q   = Q/Q.r;\n    \n    float ek = 0.5*(q.g*q.g+q.b*q.b);\n    float t  = q.a-ek;\n    float s  = (GAMMA-1.)*t*pow(Q.r, -GAMMA);\n    \n    // Top shows radial velocity and density, middle shows temperature and density.\n    // Bottom is psychedelic! (Direction and magnitude of momentum density)\n    //fragColor = tanh(twilight(0.8*tanh(dot(q.gb, normalize(fragCoord-iResolution.xy/2.))))*pow(Q.r*0.5, 0.65));\n    fragColor = tanh(normalize(recolor(pow(t/14., 1.1)))*pow(Q.r*0.5, 0.65));\n    //fragColor = tanh((0.5+0.5*cos(vec4(0,3.1415*0.667,3.1415*1.333,0)+atan(Q.b, Q.g)))*pow(length(Q.gb)*0.2, 0.8));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 Q1, in vec2 fc )\n{\n    vec4 Q00  =  T(fc + vec2( 0, 0));\n    vec4 Qp0  =  T(fc + vec2( 1, 0));\n    vec4 Qm0  =  T(fc + vec2(-1, 0));\n    vec4 Q0p  =  T(fc + vec2( 0, 1));\n    vec4 Q0m  =  T(fc + vec2( 0,-1));\n    \n    vec4 Qx00 = Tx(fc + vec2( 0, 0));\n    vec4 Qxp0 = Tx(fc + vec2( 1, 0));\n    vec4 Qxm0 = Tx(fc + vec2(-1, 0));\n    //vec4 Qx0p = Tx(fc + vec2( 0, 1));\n    //vec4 Qx0m = Tx(fc + vec2( 0,-1));\n    \n    vec4 Qy00 = Ty(fc + vec2( 0, 0));\n    //vec4 Qyp0 = Ty(fc + vec2( 1, 0));\n    //vec4 Qym0 = Ty(fc + vec2(-1, 0));\n    vec4 Qy0p = Ty(fc + vec2( 0, 1));\n    vec4 Qy0m = Ty(fc + vec2( 0,-1));\n    \n    \n    Q1 = Q00;\n    Q1-= DT*(Flux((Q00+Qx00)     , (Qp0-Qxp0)     )\n            -Flux((Qm0+Qxm0)     , (Q00-Qx00)     )\n           +(Flux((Q00+Qy00).xzyw, (Q0p-Qy0p).xzyw)\n            -Flux((Q0m+Qy0m).xzyw, (Q00-Qy00).xzyw)).xzyw);\n    \n    // Useful if it breaks; just replaces the breaking pixels with smooth outputs\n    Q1 = Q1 != Q1 ? vec4(1,0,0,5) : Q1;\n    \n    if (iFrame == 0)\n    {\n        Q1 = InitialConditions((fc-iResolution.xy*0.5)/iResolution.yy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Timestep and adiabatic constant\n#define DT 0.01\n#define GAMMA 1.667\n\n// Initial conditions. (0,0) is the centre of the screen, and (0.5,0) is the top; \n//the x and y coordinates are scaled equally. \n// Derivatives are assumed 0 initially.\nvec4 InitialConditions(vec2 coord)\n{\n    if (length(coord + 0.003*sin(coord.yx*sin(coord*1423.45434)*1332.13424)) < 0.4)\n    {\n        if (length(coord) > 0.35)\n        {\n            return vec4(10,0,0,1);\n        }\n        else\n        {\n            return vec4(1,0,0,1);\n        }\n    }\n    else\n    {\n        return vec4(1,0,0,50);\n    }\n}\n\n/*\nSo how does this work?\nFluids are governed by an equation that looks like\ndQ/dt + div F(Q) = 0\nwhere div is the divergence operator, Q is our quantities (in this case, \nQ = vec4(density, vec2(momentum density), energy density)) and F is our flux,\nbasically where the various components of Q are flowing at any one time.\nIn short, what this equation tells us is that the components of Q are conserved:\nif they are increasing in a particular region, they have to be flowing into\nthat region.\n\nA very nice way to solve this equation is to say that since the amount of Q in a \nregion only changes by the amount flowing in or out, if we split our system up \ninto small sub-regions and say the amount of Q is constant over each sub-region,\nwe only need to calculate F(Q) at the boundaries between these regions, sum that\nup, and then we can march forwards in time. This results in the finite-volume \nmethods, specifically Godunov's method, which is first-order accurate in space.        [https://www.shadertoy.com/view/NtGBDR]\n\nBut we can do better! A couple decades after Godunov, Bram van Leer came along and\nsuggested, what if we estimate the gradients within each cell? Then we can improve\nto second-order accuracy! By using finite difference approximations with the neigh-    [https://www.shadertoy.com/view/mlBcz3]\nbouring cells, you can get better estimates of Q at each face of the cell, and thus\nget more accurate fluxes. But there's a catch.\n\nGodunov's theorem states that any second-order (or higher) scheme for this equation \nis unstable; it will create oscillations and blow up. The solution is to add a\nsystem that reduces the scheme to first-order in areas of instability, called a\n\"limiter\".\n\nThe scheme here is a little better than van Leer's. Instead of having just one cell\nfor each point in space, we have three. One of them is the standard finite-volume\ncell where its Q is equal to the average value of Q over the volume. But the other \ntwo are more interesting. They multiply Q in the integral by x and y, resulting\nin estimates for the derivatives of Q within the cell. We can get perfectly sensible\nevolution equations for these values, so rather than recalculating the derivatives on\nthe fly, we can self-consistently evolve them alongside the cell averages! This is \ncalled a \"discontinuous Galerkin\" method (discontinuous since the cells don't blend \nsmoothly into one another) and in this case yields a second-order scheme which is \nslightly more accurate than van Leer's MUSCL.\n*/\n\n// mu is related to the integral of (x*x) from -1 to 1; orthogonal polynomial stuff. \n#define mu 1.5\n#define T(p)  texture(iChannel0, r(p)/iResolution.xy)\n#define Tx(p) texture(iChannel1, r(p)/iResolution.xy)\n#define Ty(p) texture(iChannel2, r(p)/iResolution.xy)\n#define r(c)  mod(c, iResolution.xy)\n\n// 0 is HLLC, 1 is Roe\n#define SOLVER 1\n\n// Get pressure\nfloat P(vec4 Q)\n{\n    float ek = (dot(Q.gb, Q.gb))/(2.*Q.r);\n    float T  = Q.a-ek;\n    float P  = T*(GAMMA-1.);\n    return P;\n}\n// Flux in continuous areas\nvec4 Flux(vec4 Q)\n{\n    float P = P(Q);\n    return vec4(Q.g, (Q.g*Q.g/Q.r + P), Q.g*Q.b/Q.r, Q.g/Q.r*(Q.a + P));\n}\n#if SOLVER == 0\n// Flux at discontinuities (using HLLC Riemann solver)\nvec4 Flux(vec4 QL, vec4 QR)\n{\n    float PL = P(QL);\n    float PR = P(QR);\n    float uL = QL.g/QL.r;\n    float uR = QR.g/QR.r;\n    float aL = sqrt(GAMMA*PL/QL.r);\n    float aR = sqrt(GAMMA*PR/QR.r);\n    \n    float z  = (GAMMA-1.)/(2.*GAMMA);\n    float Ps = pow(((aL + aR) - (GAMMA-1.)/2.*(uR - uL))/(aL/pow(PL, z) + aR/pow(PR, z)), 1./z);\n    \n    float qL = Ps > PL ? sqrt(1. + (GAMMA+1.)/(2.*GAMMA)*(Ps/PL - 1.)) : 1.;\n    float qR = Ps > PR ? sqrt(1. + (GAMMA+1.)/(2.*GAMMA)*(Ps/PR - 1.)) : 1.;\n    \n    float SL = uL - aL*qL;\n    float SR = uR + aR*qR;\n    float Ss = ((PR - PL) + QL.r*uL*(SL-uL) - QR.r*uR*(SR-uR))/(QL.r*(SL-uL)-QR.r*(SR-uR));\n    \n    vec4 QLs = QL.r*((SL-uL)/(SL-Ss))*vec4(1,Ss,QL.b/QL.r,QL.a/QL.r + (Ss-uL)*(Ss+PL/(QL.r*(SL-uL))));\n    vec4 QRs = QR.r*((SR-uR)/(SR-Ss))*vec4(1,Ss,QR.b/QR.r,QR.a/QR.r + (Ss-uR)*(Ss+PR/(QR.r*(SR-uR))));\n    \n    vec4 flux;\n    if (Ss > 0.)\n    {\n        flux = Flux(QL);\n        if (SL < 0.)\n        {\n            flux += SL*(QLs - QL);\n        }\n    }\n    else\n    {\n        flux = Flux(QR);\n        if (SR > 0.)\n        {\n            flux += SR*(QRs - QR);\n        }\n    }\n    return flux;\n}\n#elif SOLVER == 1\nvec4 Flux(vec4 QL, vec4 QR)\n{\n    vec4 Pn0 = vec4(QL.r, QL.gb/QL.r, P(QL));\n    vec4 Pnp = vec4(QR.r, QR.gb/QR.r, P(QR));\n    // Momenta inside here are rotated so the outwards-facing normal is along +x\n    // Have to rotate to and from outside of here.\n        \n    // Enthalpy on sides:\n    float H0 = GAMMA*Pn0.a/Pn0.r/(GAMMA-1.) + 0.5*(Pn0.g*Pn0.g + Pn0.b*Pn0.b);\n    float Hp = GAMMA*Pnp.a/Pnp.r/(GAMMA-1.) + 0.5*(Pnp.g*Pnp.g + Pnp.b*Pnp.b);\n    // Sqrt densities:\n    float s0 = sqrt(Pn0.r);\n    float sp = sqrt(Pnp.r);\n    // Roe averages:\n    float H  = (s0* H0   + sp* Hp  )/(s0 + sp);\n    float u  = (s0*Pn0.g + sp*Pnp.g)/(s0 + sp);\n    float v  = (s0*Pn0.b + sp*Pnp.b)/(s0 + sp);\n    \n    float ek = 0.5*(u*u+v*v);\n    float a  = sqrt((GAMMA-1.)*(H - ek));\n    \n    // Small CFL number approximation (no gradients)\n    mat4 L   = mat4(vec4(((GAMMA-1.)*ek+a*u)/(2.*a*a), ((1.-GAMMA)*ek+a*a)/(a*a), ((GAMMA-1.)*ek-a*u)/(2.*a*a),  v),\n                    vec4(((1.-GAMMA)*u -a  )/(2.*a*a), ((GAMMA-1.)*u     )/(a*a), ((1.-GAMMA)*u +a  )/(2.*a*a),  0),\n                    vec4(((1.-GAMMA)*v     )/(2.*a*a), ((GAMMA-1.)*v     )/(a*a), ((1.-GAMMA)*v     )/(2.*a*a), -1),\n                    vec4(((GAMMA-1.)       )/(2.*a*a), ((1.-GAMMA)       )/(a*a), ((GAMMA-1.)       )/(2.*a*a),  0.));\n    vec4 eigenvalues = vec4( u-a,  u ,  u+a ,  u);\n    mat4 R   = mat4(vec4(1., u-a, v, H-a*u),\n                    vec4(1., u  , v, ek   ),\n                    vec4(1., u+a, v, H+a*u),\n                    vec4(0., 0., -1., 0.));\n    \n    vec4 w0 = L*QL;\n    vec4 wp = L*QR;\n    \n    vec4 flux = 0.5*R*(eigenvalues*(wp+w0) - abs(eigenvalues)*(wp-w0));\n    return flux;\n}\n#endif\n// Linear component of flux (using Roe solver)\nvec4 LinFlux(vec4 QL, vec4 QR, vec4 QLx, vec4 QRx)\n{\n    vec4 Pn0 = vec4(QL.r, QL.gb/QL.r, P(QL));\n    vec4 Pnp = vec4(QR.r, QR.gb/QR.r, P(QR));\n    // Momenta inside here are rotated so the outwards-facing normal is along +x\n    // Have to rotate to and from outside of here.\n        \n    // Enthalpy on sides:\n    float H0 = GAMMA*Pn0.a/Pn0.r/(GAMMA-1.) + 0.5*(Pn0.g*Pn0.g + Pn0.b*Pn0.b);\n    float Hp = GAMMA*Pnp.a/Pnp.r/(GAMMA-1.) + 0.5*(Pnp.g*Pnp.g + Pnp.b*Pnp.b);\n    // Sqrt densities:\n    float s0 = sqrt(Pn0.r);\n    float sp = sqrt(Pnp.r);\n    // Roe averages:\n    float H  = (s0* H0   + sp* Hp  )/(s0 + sp);\n    float u  = (s0*Pn0.g + sp*Pnp.g)/(s0 + sp);\n    float v  = (s0*Pn0.b + sp*Pnp.b)/(s0 + sp);\n    \n    float ek = 0.5*(u*u+v*v);\n    float a  = sqrt((GAMMA-1.)*(H - ek));\n    \n    // Small CFL number approximation (no gradients)\n    mat4 L   = mat4(vec4(((GAMMA-1.)*ek+a*u)/(2.*a*a), ((1.-GAMMA)*ek+a*a)/(a*a), ((GAMMA-1.)*ek-a*u)/(2.*a*a),  v),\n                    vec4(((1.-GAMMA)*u -a  )/(2.*a*a), ((GAMMA-1.)*u     )/(a*a), ((1.-GAMMA)*u +a  )/(2.*a*a),  0),\n                    vec4(((1.-GAMMA)*v     )/(2.*a*a), ((GAMMA-1.)*v     )/(a*a), ((1.-GAMMA)*v     )/(2.*a*a), -1),\n                    vec4(((GAMMA-1.)       )/(2.*a*a), ((1.-GAMMA)       )/(a*a), ((GAMMA-1.)       )/(2.*a*a),  0.));\n    vec4 eigenvalues = vec4( u-a,  u ,  u+a ,  u);\n    mat4 R   = mat4(vec4(1., u-a, v, H-a*u),\n                    vec4(1., u  , v, ek   ),\n                    vec4(1., u+a, v, H+a*u),\n                    vec4(0., 0., -1., 0.));\n    \n    vec4 w0 = L*QLx;\n    vec4 wp = L*QRx;\n    \n    vec4 flux = 0.5*R*(eigenvalues*(wp+w0) - abs(eigenvalues)*(wp-w0));\n    return flux;\n}\n\n/*\nBall hitting a Whipple shield :)\nvec4 InitialConditions(vec2 coord)\n{\n    bool IsSolid, IsMoving = false;\n    if (abs(coord.x+0.4) < 0.02)\n    {\n        IsSolid = true;\n    }\n    if (abs(coord.x-0.3) < 0.3)\n    {\n        IsSolid = true;\n    }\n    if (length((coord+vec2(0.5,0))*vec2(0.8,1.2)) < 0.05)\n    {\n        IsSolid  = true;\n        IsMoving = true;\n    }\n    \n    vec4 Q = vec4(0.01,0,0,0.1);\n    if (IsSolid)\n    {\n        Q = vec4(10,0,0,0.1);\n    }\n    if (IsMoving)\n    {\n        Q += vec4(0,1,0,0.5)*Q.r;\n    }\n    return Q;\n}\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Here we evolve the x derivatives\nvoid mainImage( out vec4 Q1, in vec2 fc )\n{\n    vec4 Q00  =  T(fc + vec2( 0, 0));\n    vec4 Qp0  =  T(fc + vec2( 1, 0));\n    vec4 Qm0  =  T(fc + vec2(-1, 0));\n    vec4 Q0p  =  T(fc + vec2( 0, 1));\n    vec4 Q0m  =  T(fc + vec2( 0,-1));\n    \n    vec4 Qx00 = Tx(fc + vec2( 0, 0));\n    vec4 Qxp0 = Tx(fc + vec2( 1, 0));\n    vec4 Qxm0 = Tx(fc + vec2(-1, 0));\n    vec4 Qx0p = Tx(fc + vec2( 0, 1));\n    vec4 Qx0m = Tx(fc + vec2( 0,-1));\n    \n    vec4 Qy00 = Ty(fc + vec2( 0, 0));\n    vec4 Qyp0 = Ty(fc + vec2( 1, 0));\n    vec4 Qym0 = Ty(fc + vec2(-1, 0));\n    vec4 Qy0p = Ty(fc + vec2( 0, 1));\n    vec4 Qy0m = Ty(fc + vec2( 0,-1));\n    \n    Q1 = DT*(Flux( Q00     )     )*2.*mu\n       - DT*(Flux((Q00+Qx00)     , (Qp0-Qxp0)     )\n            +Flux((Qm0+Qxm0)     , (Q00-Qx00)     ))*mu\n       - DT*(LinFlux((Q00+Qy00).xzyw, (Q0p-Qy0p).xzyw, Qx00.xzyw, Qx0p.xzyw).xzyw\n            -LinFlux((Q0m+Qy0m).xzyw, (Q00-Qy00).xzyw, Qx0m.xzyw, Qx00.xzyw).xzyw)\n       + Qx00;\n    \n    vec4 dm = (Q00 - Qm0);\n    vec4 dp = (Qp0 - Q00);\n    \n    // Limiting (required for stability)\n    Q1 = step(vec4(0),sign(dm*Q1))*step(vec4(0),sign(dp*Q1))*sign(Q1)*min(min(abs(dp),abs(dm)),abs(Q1));\n    // Extra limiting, useful where it's breaking down (should retain second-order accuracy in general)\n    //Q1 = sign(Q1)*min(abs(0.2*Q00), abs(Q1));\n    Q1 = Q1 != Q1 ? vec4(0) : Q1;\n    \n    if (iFrame == 0)\n    {\n        Q1 = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Here we evolve the y derivatives\nvoid mainImage( out vec4 Q1, in vec2 fc )\n{\n    vec4 Q00  =  T(fc + vec2( 0, 0));\n    vec4 Qp0  =  T(fc + vec2( 1, 0));\n    vec4 Qm0  =  T(fc + vec2(-1, 0));\n    vec4 Q0p  =  T(fc + vec2( 0, 1));\n    vec4 Q0m  =  T(fc + vec2( 0,-1));\n    \n    vec4 Qx00 = Tx(fc + vec2( 0, 0));\n    vec4 Qxp0 = Tx(fc + vec2( 1, 0));\n    vec4 Qxm0 = Tx(fc + vec2(-1, 0));\n    vec4 Qx0p = Tx(fc + vec2( 0, 1));\n    vec4 Qx0m = Tx(fc + vec2( 0,-1));\n    \n    vec4 Qy00 = Ty(fc + vec2( 0, 0));\n    vec4 Qyp0 = Ty(fc + vec2( 1, 0));\n    vec4 Qym0 = Ty(fc + vec2(-1, 0));\n    vec4 Qy0p = Ty(fc + vec2( 0, 1));\n    vec4 Qy0m = Ty(fc + vec2( 0,-1));\n    \n    Q1 = DT*(Flux( Q00.xzyw).xzyw)*2.*mu\n       - DT*(Flux((Q00+Qy00).xzyw, (Q0p-Qy0p).xzyw)\n            +Flux((Q0m+Qy0m).xzyw, (Q00-Qy00).xzyw)).xzyw*mu\n       - DT*(LinFlux((Q00+Qx00)     , (Qp0-Qxp0)     , Qy00     , Qyp0     )     \n            -LinFlux((Qm0+Qxm0)     , (Q00-Qx00)     , Qym0     , Qy00     )     )\n       + Qy00;\n    \n    vec4 dm = (Q00 - Q0m);\n    vec4 dp = (Q0p - Q00);\n    \n    // Limiting (required for stability)\n    Q1 = step(vec4(0),sign(dm*Q1))*step(vec4(0),sign(dp*Q1))*sign(Q1)*min(min(abs(dp),abs(dm)),abs(Q1));\n    // Extra limiting, useful where it's breaking down (should retain second-order accuracy in general)\n    //Q1 = sign(Q1)*min(abs(0.2*Q00), abs(Q1));\n    Q1 = Q1 != Q1 ? vec4(0) : Q1;\n    \n    if (iFrame == 0)\n    {\n        Q1 = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}