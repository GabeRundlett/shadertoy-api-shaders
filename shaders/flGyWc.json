{
    "Shader": {
        "info": {
            "date": "1662316919",
            "description": "you shouldn't be alone",
            "flags": 8,
            "hasliked": 0,
            "id": "flGyWc",
            "likes": 10,
            "name": "lunchbreak",
            "published": 3,
            "tags": [
                "sound",
                "minkowski",
                "fdn",
                "combfiltering"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "#define dmin(a, b)\t((a.x < b.x) ? a : b)\n#define minkowski(v, m)\tpow(dot(pow(v, v * 0. + m), v * 0. + 1.), 1. / m)\n#define char(p,C)(((p.x<0.||p.x>1.||p.y<0.||p.y>1.))?vec4(0,0,0,1e5):textureGrad(iChannel3,p/16.+fract(vec2(C,15-C/16)/16.),dFdx(p/16.),dFdy(p/16.)))\n\t\nvec2 pR(in vec2 p, float a) \n{\n\tp = cos(a) * p + sin(a) * vec2(p.y, -p.x);\n\treturn vec2(p.xy);\n}\nvec3 crt( in vec3 p )\n{\n     float r =  .5 * 6.2831 / 6.;\n     float pa = r - atan(p.x, p.y);\n           pa += mod( pa,  -2. * r );\n    return vec3(pR(p.xy, pa ), p.z);\n}\nvec2 f(vec3 p) \n{\n\tvec3 v_bb = p;\n\tv_bb.xz = pR(v_bb.xz, iTime);\n\treturn dmin(vec2(minkowski(abs(abs(crt(abs(p) - vec3(1, .1, 3. + mod(floor(2. * iTime), 3.)))) - vec3(.7 + mod(floor(iTime), 3.), 4.2, 1.3)), 1.55) - 1.25, 3.), vec2(minkowski(abs(v_bb), 3.05) - (.9 + fract(.2 * floor(iTime))), 5));\n}\n\nvec3 N(in vec3 pos) \n{\n\tconst vec3 eps = vec3(.001, 0, 0);\n\treturn normalize(vec3(f(pos + eps.xyy).x - f(pos - eps.xyy).x, f(pos + eps.yxy).x - f(pos - eps.yxy).x, f(pos + eps.yyx).x - f(pos - eps.yyx).x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n\tvec2 d,\n\t     R = iResolution.xy,\n\t     st = -1. + 2. * fragCoord.xy / R, U = st;\n         U.x*=R.x/R.y;\n    float y = 0.;\n    for(int i = 0;i<10;i++){\n    y += (char(12.*vec2(U.x+1.75 , U.y+.85), int[](115,111,117, 110, 100, 32, 100, 101, 109, 111)[int(i)]).x);\n    U.x-=.0549;\n    }\n     \n    float h,aspct = max(R.x / R.y, R.y / R.x);\n\tvec3 rd, p, c,\n\t     ro = vec3(fract(iTime) , fract(iTime) , 7.),\n\t     gc = normalize( - ro),\n\t     u = normalize(cross(gc, vec3(0, 1, 0))),\n\t     v = normalize(cross(u, gc));\n\tu *= tan(1.2);\n\tv *= tan(1.2) / aspct;\n\trd = normalize(gc + st.x * u + st.y * v);\n\tp = ro;\n\tc = (1.-y)*vec3(1);\n\th = 1.;\n\td = vec2(0., 0.);\n\tfor (int i = 0; i < 32; ++i) \n    {\n\t\tp = ro + rd * h;\n\t\td = f(p);\n\t\tif (abs(d.x) < .001) \n        {\n\t\t\tfloat fr = 1e-3;\n\t\t\tvec3 n = N(p);\n\t\t\tif (d.y == 3.) \n            {\n\t\t\t\tfr = sqrt(1. - dot(-rd, n));\n\t\t\t\tc *= fr;\n\t\t\t\tro = p + n * .01;\n\t\t\t\trd = reflect(rd, n);\n\t\t\t\th = 0.;\n\t\t\t}\n\n\t\t\tif (d.y == 5.) \n            {\n\t\t\t\tfr = 1. - dot(-rd, n);\n\t\t\t\tc *= fr;\n\t\t\t\tro = p + n * .001;\n\t\t\t\trd = reflect(rd, n);\n\t\t\t\th = 0.;\n\t\t\t}\n\t\t}\n\t\th += d.x;\n\t}\n\n   fragColor = vec4(c, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// phase shift and rotation experiments\n\n\n#define f fract\n#define tau\t(acos(-1.) * 2.)\n\n\n//base drum\nfloat bd(float t) \n{\n  if (t > 1.) \n  {\n    t *= 2.;\n    float o, x = 1. - f(t), k1 = 1.052502, k2 = 1.1230614;\n    x = pow(x, 8.);\n    x *= sin(60. * x);\n    o = cos(tanh(k2 * acos(x) / (k1 + x)) * 2. - 1.);\n    o *= min(1., 1e2 * f(t)) * max(0., 1. - f(t));\n    return 1. * o;\n  }\n\n  return 0.;\n}\n\n//hihat\nfloat hh(float t, float rt) \n{\n  float y = 0.;\n  y = f(f(t * 1005.3096) * t * 8000.3934);\n  y *= exp(-5. * f(t)) / (1.927 - log(y));\n  y *= min(1., 20. * f(2. * rt)) * max(0., 1. - f(2. * rt));\n  return clamp(y, -1., 1.);\n}\n\n//siren effect\nfloat fx(float t, float rt) \n{\n  #define dk(k,t,rt)((1.-exp(-k * f(t))) * exp(-k * f(rt > 12.5 || rt < 8.5 ? t : .124)))\n  float y = exp2(-vec2(1, .25)[int(1. / 7.5 * rt) % 2] * (1. - f(t)));\n  y *= sin(y * tau * 2489.6);\n  return .4 * y * dk(max(6., 4. + mod(floor(t), 15.)), y, rt);\n}\n\n//main synth\nfloat arp(float t, float rt) \n{\n  float a, y = 0., o = 0., x = 0., p[] = float[](0., 0., 0., 0., 0.);\n\n  switch (int(1. / 12. * rt) % 3) \n  {\n  case 0:\n    p = float[](54., 58., 61., 65., 54.);\n    break;\n  case 1:\n    p = float[](51., 54., 58., 61., 51.);\n    break;\n  case 2:\n    p = float[](53., 57., 60., 64., 53.);\n    break;\n  }\n\n  x = tau * t * \n  mix(.4 * 8.175799 * exp2(p[int(8. * t) % 4] / 12.), .125, vec4(5, 3.09, 2.35, 2)[int(1. / 4. * rt) % 4]);\n  \n  y = abs(.143056 - sin(.5 * x) + .7 * cos(x));\n  \n  a = .91 + sin(mod(3. * rt, 6.28));\n  o = tanh(.006069 / (.4 * sin(x) * sin(a)) + cos(a - 1.48622 * x));\n  o = cos(o * 2. - 1.);\n  \n  y *= min(1., 5. * f(8. * t)) * max(0., 1. - f(8. * t));\n  \n  return (.7 * y + .25 * o * min(1., rt / 6.)) * min(1., 50. * f(1. * t)) * max(0., 1. - f(1. * t));\n}\n\n// matrix\nvec4 mfd(inout vec4 s, const in mat4 M, in uint i) \n{\n  i = i % 4u;\n  s += (s[0] * M[i][0] + s[1] * M[(i + 1u) % 4u][1] + s[2] * M[(i + 2u) % 4u][2] + s[3] * M[(i + 3u) % 4u][3]);\n  return s;\n}\n\nvec2 mainSound(int s, float t) \n{\n  vec4 r = vec4(1e-6), y = vec4(1e-6), dt = vec4(577, 601, 641, 661) / 441e2;\n  float dlt = t, tfx = 5.076;\n\n  for (uint j = 0u; j < 2u; ++j)\n    for (uint i = 0u; i < 8u; ++i) \n    {\n    \n      y[i % 4u] = arp(dlt, t)\n                + 1.7 * fx(tfx + dlt, t) \n                + .7 * bd(dlt) \n                + .8 * hh(dlt, 4. * t);\n\n      (i % 2u == 0u) ? (r.x += y[i % 4u]) : (r.y += y[i % 4u]);//true stereo\n      (r.z += y[i % 4u]);\n      (r.w += y[i % 4u]);\n      \n      float g = .363425;\n      dt += g * mfd(dt, mat4(((i & i / 2u) == 0u) ? -1. : 1.) * 1. / sqrt(2.), i);\n      dlt += g * (dt.x + dt.y + dt.z + dt.w);\n\n    }\n\n  return.7 * (.55 * bd(t) \n            + .1 * hh(4. * t, 4. * t) \n            + .1 * fx(tfx + mod(1.001 * t, 8.), t) \n            + .2 * arp(t, t) \n            + 1. / float(16u) * mix(r.xy, r.wz, sin(t) * .5 + .5));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}