{
    "Shader": {
        "info": {
            "date": "1660192343",
            "description": "made something similar in unity and someone told me to check out shadertoy, so i did ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "7tdyW7",
            "likes": 11,
            "name": "these cubes move a lot",
            "published": 3,
            "tags": [
                "voxels",
                "cubes",
                "planes"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define cubes 100\n\nvec3 get_ro(void)\n{\n    return vec3(0.5+sin(iTime*0.02)*30.0,sin(iTime*0.24)*10.0-4.0,iTime);\n}\n\nfloat get_height(vec2 p)\n{\n    float s = sin(p.x)*2.0;\n    float c = cos(p.y+iTime)*sin(iTime)*3.5;\n    \n    float h = s+c;\n    \n    vec3 ro = get_ro();\n    \n    vec2 p2 = p-ro.xz;\n    \n    float l = clamp(length(p2)*0.2-0.2, 0.0, 1.0);\n    \n    return mix(min(h,ro.y-2.0), h, l);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n    vec4 muv = (iMouse.xyzw*2.0-iResolution.xyxy)/iResolution.y;\n    \n    vec3 ro = get_ro();\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    rd.zy *= rot(-muv.y);\n    rd.xz *= rot(muv.x);\n    \n    vec3 ird = 1.0/rd;\n    vec3 srd = sign(ird);\n    vec2 fro = floor(ro.xz);\n    vec2 lro = ro.xz-fro;\n    \n    vec2 dists = (step(0.0,ird.xz)-lro)*ird.xz;\n    \n    float oldl = 0.0;\n    \n    float height = 0.0;\n    \n    vec3 normal = vec3(0);\n    \n    int i = 0;\n    for (int j = 0; j < cubes; j++)\n    {\n        j++;\n        vec2 mask = vec2(1, 0);\n        if (dists.y < dists.x)\n            mask = vec2(0, 1);\n        \n        float l = dot(dists, mask);\n        \n        vec3 p = ro+rd*oldl;\n        \n        height = get_height(fro);\n    \n        float hit1 = ird.y*(height-ro.y-0.5*srd.y);\n        \n        if ((hit1 > oldl && hit1 < l) || abs(p.y-height) < 0.5) break;\n        \n        fro += mask*srd.xz;\n        dists += mask*ird.xz*srd.xz;\n        \n        oldl = l;\n        normal.xz = mask;\n    }\n    \n    float hit1 = ird.y*(height-ro.y-0.5*srd.y);\n    \n    if (hit1 < oldl)\n    {\n        normal *= -srd;\n    }\n    else\n    {\n        normal = vec3(0,-srd.y,0);\n    }\n    \n    float d = max(hit1,oldl);\n    \n    vec3 p = ro+rd*d;\n    \n    // Time varying pixel color\n    \n    float sun1 = dot(normal, normalize(vec3(1.0, 0.5, 0.8)));\n    float sun2 = dot(normal, normalize(vec3(-1.4, -0.7, -0.8)));\n    \n    vec3 suncol1 = sun1*vec3(0.8,1.0,0.7);\n    vec3 suncol2 = sun2*vec3(0.5,0.3,0.2);\n    \n    vec3 col = max(suncol1, suncol2);\n    \n    vec3 heightcol = vec3(max(0.0, -height), max(0.0, height), 1.0);\n    \n    col *= heightcol;\n\n    // Output to screen\n    if (i < cubes)\n        fragColor = vec4(col,1.0);\n    else\n    {\n        fragColor = vec4(normalize(rd)*0.5+0.5,1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}