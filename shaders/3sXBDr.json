{
    "Shader": {
        "info": {
            "date": "1587997721",
            "description": "  More physics-based dynamics (use mouse to halt/change box rotation; \n  click upper-right to restart).\n",
            "flags": 32,
            "hasliked": 0,
            "id": "3sXBDr",
            "likes": 11,
            "name": "Floppy Clock With Dice",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "physics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 420
        },
        "renderpass": [
            {
                "code": "// \"Floppy Clock With Dice\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  More physics-based dynamics (use mouse to halt/change box rotation; \n  click upper-right to restart).\n  (With bits from \"Stonewashed Flag\", \"Dice Leaping\", \"Tempus Fugit\", etc.)\n*/\n\n#define AA  1  // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nmat3 QtToRMat (vec4 q);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 GetR (vec2 v);\nvec3 GetRC (vec2 v);\nvec3 GetRB (int n);\nvec4 GetQB (int n);\nvec4 Loadv4 (vec2 vId);\n\nconst int nBallE = 33, nBlk = 8;\n\nvec3 ltDir, vnBall, rdSign, vnBox, vnBlk, fcBlk;\nvec2 qgHit, qBlk;\nfloat dstFar, boxSize, boxSizeS, blkSize, bGrid, todCur;\nint idObj, idBlk;\nconst float pi = 3.14159;\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  for (int n = 0; n < nBlk; n ++) {\n    rm = GetRB (n);\n    m = QtToRMat (GetQB (n));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = blkSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = Maxv3 (tm);\n    df = Minv3 (tp);\n    if (df > 0. && dn < min (df, dMin)) {\n      dMin = dn;\n      fcBlk = - sign (rdm) * step (tm.zxy, tm) * step (tm.yzx, tm);\n      idBlk = n;\n      u = (v + dn) * rdm;\n    }\n  }\n  if (dMin < dstFar) {\n    qBlk = vec2 (dot (u.zxy, fcBlk), dot (u.yzx, fcBlk));\n    vnBlk = QtToRMat (GetQB (idBlk)) * fcBlk;\n  }\n  return dMin;\n}\n\nfloat BlkHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp;\n  float dMin, dn, df;\n  dMin = dstFar;\n  for (int n = 0; n < nBlk; n ++) {\n    rm = GetRB (n);\n    m = QtToRMat (GetQB (n));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = blkSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = Maxv3 (tm);\n    df = Minv3 (tp);\n    if (df > 0. && dn < min (df, dMin)) dMin = dn;\n  }\n  return smoothstep (0.3 * rng, rng, dMin);\n}\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 sLen, rsLen;\n  vec3 eWid;\n  float dMin, d;\n  dMin = dstFar;\n  sLen = vec4 (vec3 (boxSizeS), 0.);\n  rsLen = vec4 (sLen.xyz * rdSign, 0.);\n  eWid = vec3 (0.1);\n  d = min (min (\n     PrBoxDf (p - rsLen.xww, eWid + sLen.wyz),\n     PrBoxDf (p - rsLen.wyw, eWid + sLen.xwz)),\n     PrBoxDf (p - rsLen.wwz, eWid + sLen.xyw));\n  DMIN (1);\n  p = abs (p);\n  d = min (min (\n     PrBoxDf (p - sLen.wyz, eWid + sLen.xww),\n     PrBoxDf (p - sLen.xwz, eWid + sLen.wyw)),\n     PrBoxDf (p - sLen.xyw, eWid + sLen.wwz));\n  DMIN (2);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 50; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat SheetHit (vec3 ro, vec3 rd)\n{\n  vec3 r, q;\n  vec2 g;\n  float d, dMin, sz, szMax, szMin;\n  bvec2 ilt;\n  bool bkTrak;\n  const int nsMax = 3000;\n  dMin = dstFar;\n  szMax = bGrid;\n  szMin = 1./16.;\n  g = vec2 (0.);\n  bkTrak = false;\n  sz = szMax;\n  for (int ns = 0; ns < nsMax; ns ++) {\n    if (sz == szMin) {\n      r = GetR (g) - ro;\n      q = cross (r, rd);\n      if (dot (q, q) < sz * sz) {\n        d = dot (r, rd);\n        if (d < dMin) {\n          dMin = d;\n          qgHit = g;\n        }\n      }\n      bkTrak = true;\n    }\n    q = cross (GetR (g + 0.5 * sz) - ro, rd);\n    bkTrak = bkTrak || (dot (q, q) > sz * sz);\n    if (bkTrak) {\n      bkTrak = false;\n      ilt = lessThan (fract (g / (2. * sz)), vec2 (0.5));\n      g.x += ilt.x ? sz : - sz;\n      if (! ilt.x) {\n        g.y += ilt.y ? sz : - sz;\n        if (! ilt.y) {\n          sz *= 2.;\n          if (sz == szMax) break;\n          bkTrak = true;\n        }\n      }\n    } else if (sz > szMin) sz *= 0.5;\n  }\n  return dMin;\n}\n\nvec3 SheetNf () \n{\n  vec2 e;\n  e = vec2 (1., 0.);\n  return normalize (cross (GetRC (qgHit + e.yx) - GetRC (qgHit - e.yx),\n     GetRC (qgHit + e.xy) - GetRC (qgHit - e.xy)));\n}\n\nvec3 SheetCol (float s)\n{\n  vec3 col;\n  vec2 b, g, c;\n  float rad, a, f, gRot;\n  col = vec3 (0.9, 0.9, 1.);\n  c = vec2 (1., 0.4);\n  rad = 0.5 * float (nBallE - 1);\n  b = (qgHit / rad - 1.);\n  b = Rot2D (b, pi);\n  if (s > 0.) b.y *= -1.;\n  a = atan (b.y, - b.x) / pi;\n  if (abs (mod (6. * (a + 1.) + 0.5, 1.) - 0.5) < 0.03 &&\n     abs (length (b) - 0.95) < 0.05 || abs (6. * a) < 0.03 &&\n     abs (length (b) - 0.9) < 0.1) col = c.yyx;\n  col = mix (c.yyx, col, \n     0.8 + 0.2 * SmoothBump (0.15, 0.85, 0.02, mod (rad * length (b), 1.)));\n  col = mix (col, c.yyx, smoothstep (0.96, 0.97, length (b)));\n  gRot = todCur * 2. * pi / (12. * 3600.);\n  g = Rot2D (b, gRot - pi);\n  g.x -= 0.25;\n  f = length (max (abs (g) - vec2 (0.3, 0.027 * (0.6 - 0.4 * g.x / 0.3)), 0.));\n  col = mix (col, c.xxy * (1. - 0.4 * step (0.01, f)), step (f, 0.02));\n  gRot *= 12.;\n  g = Rot2D (b, gRot - pi);\n  g.x -= 0.35;\n  f = length (max (abs (g) - vec2 (0.4, 0.013 * (0.6 - 0.4 * g.x / 0.4)), 0.));\n  col = mix (col, c.yxy * (1. - 0.4 * step (0.01, f)), step (f, 0.02));\n  gRot *= 60.;\n  g = Rot2D (b, gRot - pi);\n  g.x -= 0.4;\n  f = length (max (abs (g) - vec2 (0.46, 0.007 * (0.6 - 0.4 * g.x / 0.46)), 0.));\n  col = mix (col, c.xyy * (1. - 0.4 * step (0.01, f)), step (f, 0.02));\n  col = mix (vec3 (0.1, 0.1, 0.2), col, smoothstep (0.007, 0.013, length (b)));\n  return col;\n}\n\nfloat BoxHit (vec3 ro, vec3 rd, vec3 sz)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  dMin = dstFar;\n  v = ro / rd;\n  tp = sz / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vnBox = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return dMin;\n}\n\nfloat BoxHitSh (vec3 ro, vec3 rd, vec3 sz, float rng)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  v = ro / rd;\n  tp = sz / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  return smoothstep (0.3 * rng, rng, (df > 0. && dn < df) ? dn : dstFar);\n}\n\nfloat BoxHitSil (vec3 ro, vec3 rd, vec3 sz)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  v = ro / rd;\n  tp = sz / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, w;\n  float dstBlk, dstBox, dstSheet, s, sh, nDotL;\n  bool isWall, isBlk;\n  isWall = false;\n  isBlk = false;\n  dstBlk = BlkHit (ro, rd);\n  dstSheet = SheetHit (ro, rd);\n  rdSign = sign (rd);\n  dstBox = ObjRay (ro, rd);\n  if (min (min (dstBlk, dstBox), dstSheet) < dstFar) {\n    if (dstSheet < min (dstBlk, dstBox)) {\n      ro += dstSheet * rd;\n      vn = SheetNf ();\n      s = sign (dot (rd, vn));\n      if (s > 0.) vn = - vn;\n      col4 = vec4 (SheetCol (s), 0.1);\n    } else if (dstBlk < dstBox) {\n      ro += dstBlk * rd;\n      vn = vnBlk;\n      col4 = (idBlk < nBlk / 2) ? vec4 (1., 0.7, 0.3, 0.2) : vec4 (0.7, 1., 0.3, 0.2);\n      s = -1.;\n      if (fcBlk.x == -1. || fcBlk.y == 1.) qBlk = Rot2D (qBlk, 0.25 * pi);\n      if (abs (fcBlk.x) == 1.) s = (fcBlk.x > 0.) ? length (qBlk) :\n         length (abs (qBlk) - vec2 (0.35 * blkSize, 0.));\n      else if (abs (fcBlk.y) == 1.) s = (fcBlk.y > 0.) ?\n         length (vec2 (mod (qBlk.x + 0.4 * blkSize, 0.8 * blkSize) - 0.4 * blkSize, qBlk.y)) :\n         length (abs (qBlk) - 0.4 * blkSize);\n      else if (abs (fcBlk.z) == 1.) s = (fcBlk.z > 0.) ?\n         min (length (abs (qBlk) - 0.4 * blkSize), length (qBlk)) :\n         length (vec2 (mod (qBlk.x + 0.3 * blkSize, 0.6 * blkSize) - 0.3 * blkSize,\n         abs (qBlk.y) - 0.4 * blkSize));\n      s -= 0.2 * blkSize;\n      if (s < 0.) col4 = vec4 (vec3 (1.2) * (1. - 0.7 * smoothstep (-0.1, 0., s)), 0.5);\n      isBlk = true;\n    } else if (dstBox < dstFar) {\n      ro += dstBox * rd;\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        w = smoothstep (0., 0.1, abs (fract (5. * ro / boxSize + 0.5) - 0.5));\n        col4 = vec4 (vec3 (mix (vec3 (0.6, 0.55, 0.55), vec3 (0.5, 0.5, 0.55), \n           dot (abs (vn) * w.yzx * w.zxy, vec3 (1.)))), 0.1);\n      } else if (idObj == 2) col4 = vec4 (vec3 (0.6), 0.1);\n      isWall = true;\n    }\n    sh = (isWall || isBlk && (idBlk < nBlk / 2 && ltDir.z > 0. || \n       idBlk >= nBlk / 2 && ltDir.z < 0.)) ?\n       BoxHitSh (ro + 0.01 * ltDir, ltDir, vec3 (boxSizeS, boxSizeS, 0.1), 3. * boxSize) : 1.;\n    sh = 0.6 + 0.4 * min (sh, BlkHitSh (ro + 0.01 * ltDir, ltDir, boxSize));\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (! isWall) nDotL *= nDotL;\n    col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n    if (BoxHit (ro, rd, vec3 (boxSizeS)) < dstFar) col = mix (col,\n       vec3 (0.7, 0.7, 0.75) * (0.2 + 0.8 * max (dot (vnBox, ltDir), 0.)) +\n       0.1 * pow (max (0., dot (ltDir, reflect (rd, vnBox))), 64.),\n       pow (1. - abs (dot (rd, vnBox)), 4.));\n  } else col = vec3 (0.05);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 qtVu, stDat, mPtr;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  float vuEl, zmFac, asp, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  todCur = iDate.w;\n  bGrid = float (nBallE - 1);\n  stDat = Loadv4 (vec2 (4 * nBlk + 0, nBallE));\n  boxSize = stDat.y;\n  boxSizeS = boxSize - 1.;\n  dstFar = 11. * boxSize;\n  blkSize = 1.3;\n  qtVu = Loadv4 (vec2 (4 * nBlk + 1, nBallE));\n  vuMat = QtToRMat (qtVu);\n  vuEl = 0.1 * pi;\n  ro = vec3 (0., 0., -6. * boxSize);\n  ro.yz = Rot2D (ro.yz, vuEl);\n  ro = ro * vuMat;\n  ltDir = normalize (vec3 (-1., 1., -1.)) * vuMat;\n  zmFac = 4.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    rd.yz = Rot2D (rd.yz, vuEl);\n    rd = rd * vuMat;\n    if (BoxHitSil (ro, rd, vec3 (boxSizeS)) < dstFar) col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (length (col) == 0.) col = vec3 (0.1, 0.1, 0.) * (1. - 0.8 * smoothstep (1.1, 1.3, length (uv)));\n  mPtr = Loadv4 (vec2 (4 * nBlk + 2, nBallE));\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0. && min (uv.x - asp, uv.y - 1.) > -0.1) col = mix (col, vec3 (1., 1., 0.), 0.3);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRC (vec2 v)\n{\n  return GetR (clamp (v, 0., bGrid - 1.));\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 0, nBallE)).xyz;\n}\n\nvec4 GetQB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 2, nBallE));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Floppy Clock With Dice\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nvec4 RMatToQt (mat3 m);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nvec3 QtToEul (vec4 q);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec3 GetR (vec2 v);\nvec3 GetV (vec2 v);\nvec3 GetRB (int n);\nvec3 GetVB (int n);\nvec4 GetQB (int n);\nvec3 GetWB (int n);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBallE = 33, nBlk = 8;\nconst vec3 blkSph = vec3 (3.), blkGap = vec3 (0.9);\nconst int nSiteBlk = 27;\n\nvec3 gravVec;\nivec2 idNeb[4], idNebD[4];\nfloat boxSize, spLen, bMass, farSep, fOvlap, fricN, fricT, fricS, fvDamp;\nconst float pi = 3.14159;\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec2 (1, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec2 (0, 1);\n  idNeb[3] = - idNeb[2];\n  idNebD[0] = ivec2 (1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec2 (1, -1);\n  idNebD[3] = - idNebD[2];\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nvoid ShSpringForce (ivec2 iv, vec3 r, vec3 v, inout vec3 a)\n{\n  vec3 dr;\n  ivec2 ivn;\n  float spLenD, fSpring, fDamp;\n  fSpring = 200.;\n  fDamp = 0.05;\n  for (int n = 0; n < 4; n ++) {\n    ivn = iv + idNeb[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      a += fSpring * (spLen / length (dr) - 1.) * dr - fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  spLenD = spLen * sqrt (2.);\n  for (int n = 0; n < 4; n ++) {\n    ivn = iv + idNebD[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      a += 5. * fSpring * (spLenD / length (dr) - 1.) * dr - fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n}\n\n#define InLatt2(t, k) (k == 0 && t > 1 || k == 2 && t < nBallE - 2 || k == 1 && (t > 0 && t < nBallE - 1))\n\nvoid ShBendForce (ivec2 iv, vec3 r, inout vec3 a)\n{\n  vec3 dr1, dr2, rt;\n  ivec2 ivd;\n  float s, c11, c22, c12, cd, fBend;\n  fBend = 500.;\n  for (int nd = 0; nd < 2; nd ++) {\n    ivd = (nd == 0) ? ivec2 (1, 0) : ivec2 (0, 1);\n    for (int k = 0; k < 3; k ++) {\n      if (nd == 0 && InLatt2 (iv.x, k) || nd == 1 && InLatt2 (iv.y, k)) {\n        if (k == 0) {\n          rt = GetR (vec2 (iv - ivd));\n          dr1 = rt - GetR (vec2 (iv - 2 * ivd));\n          dr2 = r - rt;\n          s = -1.;\n        } else if (k == 2) {\n          rt = GetR (vec2 (iv + ivd));\n          dr1 = rt - r;\n          dr2 = GetR (vec2 (iv + 2 * ivd)) - rt;\n          s = -1.;\n        } else {\n          dr1 = r - GetR (vec2 (iv - ivd));\n          dr2 = GetR (vec2 (iv + ivd)) - r;\n          s = 1.;\n        }\n        c11 = 1. / dot (dr1, dr1);\n        c12 = dot (dr1, dr2);\n        c22 = 1. / dot (dr2, dr2);\n        cd = sqrt (c11 * c22);\n        s *= fBend * cd * (c12 * cd - 1.);\n        if (k <= 1) a += s * (dr1 - c12 * c22 * dr2);\n        if (k >= 1) a += s * (c12 * c11 * dr1 - dr2);\n      }\n    }\n  }\n}\n\nvec4 RSite (int sId)\n{\n  vec3 s;\n  s = floor (mod (vec3 (sId), blkSph.x * vec3 (1., blkSph.y, blkSph.y * blkSph.z)) /\n     vec3 (1., blkSph.x, blkSph.x * blkSph.y)) - 0.5 * (blkSph - 1.);\n  return vec4 (blkGap * s, dot (step (0.45 * (blkSph - 1.), abs (s)), vec3 (1.)));\n}\n\nvoid ShBForce (vec3 r, inout vec3 a)\n{\n  mat3 mRot;\n  vec4 rts;\n  vec3 rm, dr;\n  float rSep;\n  for (int n = 0; n < nBlk; n ++) {\n    rm = GetRB (n);\n    mRot = QtToRMat (GetQB (n));\n    for (int j = 0; j < nSiteBlk; j ++) {\n      rts = RSite (j);\n      if (rts.w >= 2.) {\n        dr = r - (rm + mRot * rts.xyz);\n        rSep = length (dr);\n        if (rSep < 1.) a += fOvlap * (1. / rSep - 1.) * dr;\n      }\n    }\n  }\n}\n\nvec3 FcFun (vec3 dr, vec3 dv)\n{\n  vec3 f;\n  float rSep, vRel, fo, drv;\n  f = vec3 (0.);\n  rSep = length (dr);\n  if (rSep < 1.) {\n    fo = fOvlap * (1. / rSep - 1.);\n    drv = dot (dr, dv) / (rSep * rSep);\n    dv -= drv * dr;\n    vRel = length (dv);\n    fo = max (fo - fricN * drv, 0.);\n    f = fo * dr;\n    if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  }\n  return f;\n}\n\nvoid BBPairForce (vec3 rm, vec3 vm, mat3 mRot, vec3 wm, inout vec3 am, inout vec3 wam)\n{\n  mat3 mRotN;\n  vec4 rts, rtsN;\n  vec3 rmN, vmN, wmN, dr, dv, f;\n  float bSep;\n  for (int n = 0; n < nBlk; n ++) {\n    rmN = GetRB (n);\n    bSep = length (rm - rmN);\n    if (bSep > 0.01 && bSep < farSep) {\n      vmN = GetVB (n);\n      mRotN = QtToRMat (GetQB (n));\n      wmN = GetWB (n);\n      for (int j = 0; j < nSiteBlk; j ++) {\n        rts = RSite (j);\n        if (rts.w >= 1.) {\n          rts.xyz = mRot * rts.xyz;\n          dv = vm + cross (wm, rts.xyz) - vmN;\n          f = vec3 (0.);\n          for (int jN = 0; jN < nSiteBlk; jN ++) {\n            rtsN = RSite (jN);\n            if (max (rts.w, rtsN.w) >= 2.) {\n              rtsN.xyz = mRotN * rtsN.xyz;\n              dr = rm + rts.xyz - (rmN + rtsN.xyz);\n              f += FcFun (dr, dv - cross (wmN, rtsN.xyz));\n            }\n          }\n        }\n        am += f;\n        wam += cross (rts.xyz, f);\n      }\n    }\n  }\n}\n\nvoid BWallForce (vec3 rm, vec3 vm, mat3 mRot, vec3 wm, inout vec3 am, inout vec3 wam)\n{\n  vec4 rts, drw;\n  vec3 r, dr, dv, f;\n  for (int j = 0; j < nSiteBlk; j ++) {\n    rts = RSite (j);\n    if (rts.w >= 2.) {\n      rts.xyz = mRot * rts.xyz;\n      r = rm + rts.xyz;\n      dv = vm + cross (wm, rts.xyz);\n      f = vec3 (0.);\n      drw = vec4 ((boxSize - 1. - abs (r)) * (1. - 2. * step (0., r)), 0.);\n      for (int nf = 0; nf < 3; nf ++) {\n        dr = (nf == 0) ? drw.xww : ((nf == 1) ? drw.wyw : drw.wwz);\n        f += FcFun (dr, dv);\n      }\n      am += f;\n      wam += cross (rts.xyz, f);\n    }\n  }\n}\n\nvoid BShForce (vec3 rm, vec3 vm, mat3 mRot, vec3 wm, inout vec3 am, inout vec3 wam)\n{\n  vec4 rts;\n  vec3 dr, dv, f;\n  vec2 g;\n  for (int j = 0; j < nSiteBlk; j ++) {\n    rts = RSite (j);\n    if (rts.w >= 2.) {\n      rts.xyz = mRot * rts.xyz;\n      f = vec3 (0.);\n      g = vec2 (0.);\n      for (int n = 0; n < nBallE * nBallE; n ++) {\n        dr = rm + rts.xyz - GetR (g);\n        dv = vm + cross (wm, rts.xyz) - GetV (g);\n        f += FcFun (dr, dv);\n        if (++ g.x == float (nBallE)) {\n          g.x = 0.;\n          ++ g.y;\n        }  \n      }\n      am += f;\n      wam += cross (rts.xyz, f);\n    }\n  }\n}\n\nvoid Step (ivec2 iv, out vec3 rm, out vec3 vm)\n{\n  vec3 am;\n  float dt;\n  IdNebs ();\n  rm = GetR (vec2 (iv));\n  vm = GetV (vec2 (iv));\n  am = vec3 (0.);\n  if (iv.x > 0 && iv.x < nBallE - 1 && iv.y > 0 && iv.y < nBallE - 1) {\n    ShSpringForce (iv, rm, vm, am);\n    ShBendForce (iv, rm, am);\n    ShBForce (rm, am);\n    am -= fvDamp * vm;\n    dt = 0.02;\n    vm += dt * am;\n    rm += dt * vm;\n  }\n}\n\nvoid StepB (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot;\n  vec3 am, wam, dSp;\n  float dt;\n  rm = GetRB (mId);\n  vm = GetVB (mId);\n  qm = GetQB (mId);\n  wm = GetWB (mId);\n  mRot = QtToRMat (qm);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  BBPairForce (rm, vm, mRot, wm, am, wam);\n  BWallForce (rm, vm, mRot, wm, am, wam);\n  BShForce (rm, vm, mRot, wm, am, wam);\n  am -= fvDamp * vm;\n  am /= bMass;\n  am -= 2. * gravVec;\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.25 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  wm += dt * wam / bMass;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = EulToQt (vec3 (0.1, 0.4, 0.3) * pi);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (ivec2 iv, out vec3 r, out vec3 v)\n{\n  for (int iy = 0; iy < nBallE; iy ++) {\n    for (int ix = 0; ix < nBallE; ix ++) {\n      if (iv.x == ix && iv.y == iy) {\n        r = 0.97 * spLen * (vec3 (ix, iy, 0.) - vec3 (vec2 (0.5 * float (nBallE - 1)), 0.));\n      }\n    }\n  }\n  v = vec3 (0.);\n}\n\nvoid InitB (int mId, out vec3 r, out vec3 v, out vec4 qm, out vec3 wm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  r = 0.4 * boxSize * (2. * vec3 (mod (mIdf, 2.), floor (mod (mIdf, 4.) / 2.),\n     floor (mIdf / 4.)) - 1.);\n  v = vec3 (0.);\n  qm = EulToQt (normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6))));\n  wm = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, qtVu, qm;\n  vec3 r, v, wm;\n  vec2 canvas;\n  ivec2 pxIv, iv;\n  float tCur, nStep, asp;\n  int mId, pxId, kp;\n  bool doInit;\n  pxIv = ivec2 (fragCoord);\n  pxId = pxIv.x + 2 * nBallE * pxIv.y;\n  if (pxIv.x >= 2 * nBallE || pxId > 2 * nBallE * nBallE + 4 * nBlk + 2) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  qtVu = Loadv4 (vec2 (4 * nBlk + 1, nBallE));\n  mPtrP = Loadv4 (vec2 (4 * nBlk + 2, nBallE));\n  iv = pxIv;\n  if (iv.x >= nBallE) iv.x -= nBallE;\n  mId = iv.y * nBallE + iv.x;\n  if (iFrame <= 5) {\n    doInit = true;\n    spLen = 1.1;\n    boxSize = 0.52 * spLen * float (nBallE - 1);\n    nStep = 0.;\n    OrientVu (qtVu, mPtr, mPtrP, false);\n  } else {\n    doInit = false;\n    stDat = Loadv4 (vec2 (4 * nBlk + 0, nBallE));\n    spLen = stDat.x;\n    boxSize = stDat.y;\n    nStep = stDat.w;\n    ++ nStep;\n    if (mPtrP.z < 0.) qtVu = EulToQt (QtToEul (qtVu) + 0.003 * pi * vec3 (0.41, 0., 0.27));\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    gravVec = vec3 (0., 1., 0.) * QtToRMat (qtVu);\n    if (nStep > 100. && mPtr.z > 0. && mPtr.x > 0.5 - 0.05 / asp &&\n       mPtr.y > 0.5 - 0.05) doInit = true;\n  }\n  if (doInit) nStep = 0.;\n  bMass = 8.;\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  fOvlap = 1000.;\n  fricN = 1.;\n  fricT = 1.;\n  fricS = 2.;\n  fvDamp = 0.03;\n  if (mId < nBallE * nBallE) {\n    if (doInit) Init (iv, r, v);\n    else Step (iv, r, v);\n    stDat = vec4 (((pxIv.x < nBallE) ? r : v), 0.);\n  } else if (pxId >= 2 * nBallE * nBallE && pxId < 2 * nBallE * nBallE + 4 * nBlk) {\n    mId = (pxId - 2 * nBallE * nBallE) / 4;\n    if (doInit) InitB (mId, r, v, qm, wm);\n    else StepB (mId, r, v, qm, wm);\n    kp = pxId - 2 * nBallE * nBallE - 4 * mId;\n    if      (kp == 0) stDat = vec4 (r, 0.);\n    else if (kp == 1) stDat = vec4 (v, 0.);\n    else if (kp == 2) stDat = qm;\n    else if (kp == 3) stDat = vec4 (wm, 0.);\n  } else {\n    kp = pxId - 2 * nBallE * nBallE - 4 * nBlk;\n    if      (kp == 0) stDat = stDat = vec4 (spLen, boxSize, tCur, nStep);\n    else if (kp == 1) stDat = qtVu;\n    else if (kp == 2) stDat = mPtrP;\n  }\n  Savev4 (vec2 (pxIv), stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (dot (vec4 (q1.w, - q1.z, q1.yx), q2), dot (vec4 (q1.zw, - q1.x, q1.y), q2),\n     dot (vec4 (- q1.y, q1.xwz), q2), dot (vec4 (- q1.xyz, q1.w), q2));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec3 QtToEul (vec4 q)\n{\n  vec3 e;\n  float s, t;\n  t = dot (q.xy, q.xy);\n  s = 2. * sqrt (max (t * (1. - t), 0.));\n  e.y = atan (s, 1. - 2. * t);\n  if (s != 0.) e.xz = \n     vec2 (atan (q.x * q.z + q.y * q.w, q.x * q.w - q.y * q.z),\n           atan (q.x * q.z - q.y * q.w, q.x * q.w + q.y * q.z));\n  else e.xz = vec2 (2. * atan (q.z, q.w), 0.);\n  return e;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetV (vec2 v)\n{\n  v.x += float (nBallE);\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 0, nBallE)).xyz;\n}\n\nvec3 GetVB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 1, nBallE)).xyz;\n}\n\nvec4 GetQB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 2, nBallE));\n}\n\nvec3 GetWB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 3, nBallE)).xyz;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Floppy Clock With Dice\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nvec4 RMatToQt (mat3 m);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nvec3 QtToEul (vec4 q);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec3 GetR (vec2 v);\nvec3 GetV (vec2 v);\nvec3 GetRB (int n);\nvec3 GetVB (int n);\nvec4 GetQB (int n);\nvec3 GetWB (int n);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBallE = 33, nBlk = 8;\nconst vec3 blkSph = vec3 (3.), blkGap = vec3 (0.9);\nconst int nSiteBlk = 27;\n\nvec3 gravVec;\nivec2 idNeb[4], idNebD[4];\nfloat boxSize, spLen, bMass, farSep, fOvlap, fricN, fricT, fricS, fvDamp;\nconst float pi = 3.14159;\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec2 (1, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec2 (0, 1);\n  idNeb[3] = - idNeb[2];\n  idNebD[0] = ivec2 (1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec2 (1, -1);\n  idNebD[3] = - idNebD[2];\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nvoid ShSpringForce (ivec2 iv, vec3 r, vec3 v, inout vec3 a)\n{\n  vec3 dr;\n  ivec2 ivn;\n  float spLenD, fSpring, fDamp;\n  fSpring = 200.;\n  fDamp = 0.05;\n  for (int n = 0; n < 4; n ++) {\n    ivn = iv + idNeb[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      a += fSpring * (spLen / length (dr) - 1.) * dr - fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  spLenD = spLen * sqrt (2.);\n  for (int n = 0; n < 4; n ++) {\n    ivn = iv + idNebD[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      a += 5. * fSpring * (spLenD / length (dr) - 1.) * dr - fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n}\n\n#define InLatt2(t, k) (k == 0 && t > 1 || k == 2 && t < nBallE - 2 || k == 1 && (t > 0 && t < nBallE - 1))\n\nvoid ShBendForce (ivec2 iv, vec3 r, inout vec3 a)\n{\n  vec3 dr1, dr2, rt;\n  ivec2 ivd;\n  float s, c11, c22, c12, cd, fBend;\n  fBend = 500.;\n  for (int nd = 0; nd < 2; nd ++) {\n    ivd = (nd == 0) ? ivec2 (1, 0) : ivec2 (0, 1);\n    for (int k = 0; k < 3; k ++) {\n      if (nd == 0 && InLatt2 (iv.x, k) || nd == 1 && InLatt2 (iv.y, k)) {\n        if (k == 0) {\n          rt = GetR (vec2 (iv - ivd));\n          dr1 = rt - GetR (vec2 (iv - 2 * ivd));\n          dr2 = r - rt;\n          s = -1.;\n        } else if (k == 2) {\n          rt = GetR (vec2 (iv + ivd));\n          dr1 = rt - r;\n          dr2 = GetR (vec2 (iv + 2 * ivd)) - rt;\n          s = -1.;\n        } else {\n          dr1 = r - GetR (vec2 (iv - ivd));\n          dr2 = GetR (vec2 (iv + ivd)) - r;\n          s = 1.;\n        }\n        c11 = 1. / dot (dr1, dr1);\n        c12 = dot (dr1, dr2);\n        c22 = 1. / dot (dr2, dr2);\n        cd = sqrt (c11 * c22);\n        s *= fBend * cd * (c12 * cd - 1.);\n        if (k <= 1) a += s * (dr1 - c12 * c22 * dr2);\n        if (k >= 1) a += s * (c12 * c11 * dr1 - dr2);\n      }\n    }\n  }\n}\n\nvec4 RSite (int sId)\n{\n  vec3 s;\n  s = floor (mod (vec3 (sId), blkSph.x * vec3 (1., blkSph.y, blkSph.y * blkSph.z)) /\n     vec3 (1., blkSph.x, blkSph.x * blkSph.y)) - 0.5 * (blkSph - 1.);\n  return vec4 (blkGap * s, dot (step (0.45 * (blkSph - 1.), abs (s)), vec3 (1.)));\n}\n\nvoid ShBForce (vec3 r, inout vec3 a)\n{\n  mat3 mRot;\n  vec4 rts;\n  vec3 rm, dr;\n  float rSep;\n  for (int n = 0; n < nBlk; n ++) {\n    rm = GetRB (n);\n    mRot = QtToRMat (GetQB (n));\n    for (int j = 0; j < nSiteBlk; j ++) {\n      rts = RSite (j);\n      if (rts.w >= 2.) {\n        dr = r - (rm + mRot * rts.xyz);\n        rSep = length (dr);\n        if (rSep < 1.) a += fOvlap * (1. / rSep - 1.) * dr;\n      }\n    }\n  }\n}\n\nvec3 FcFun (vec3 dr, vec3 dv)\n{\n  vec3 f;\n  float rSep, vRel, fo, drv;\n  f = vec3 (0.);\n  rSep = length (dr);\n  if (rSep < 1.) {\n    fo = fOvlap * (1. / rSep - 1.);\n    drv = dot (dr, dv) / (rSep * rSep);\n    dv -= drv * dr;\n    vRel = length (dv);\n    fo = max (fo - fricN * drv, 0.);\n    f = fo * dr;\n    if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  }\n  return f;\n}\n\nvoid BBPairForce (vec3 rm, vec3 vm, mat3 mRot, vec3 wm, inout vec3 am, inout vec3 wam)\n{\n  mat3 mRotN;\n  vec4 rts, rtsN;\n  vec3 rmN, vmN, wmN, dr, dv, f;\n  float bSep;\n  for (int n = 0; n < nBlk; n ++) {\n    rmN = GetRB (n);\n    bSep = length (rm - rmN);\n    if (bSep > 0.01 && bSep < farSep) {\n      vmN = GetVB (n);\n      mRotN = QtToRMat (GetQB (n));\n      wmN = GetWB (n);\n      for (int j = 0; j < nSiteBlk; j ++) {\n        rts = RSite (j);\n        if (rts.w >= 1.) {\n          rts.xyz = mRot * rts.xyz;\n          dv = vm + cross (wm, rts.xyz) - vmN;\n          f = vec3 (0.);\n          for (int jN = 0; jN < nSiteBlk; jN ++) {\n            rtsN = RSite (jN);\n            if (max (rts.w, rtsN.w) >= 2.) {\n              rtsN.xyz = mRotN * rtsN.xyz;\n              dr = rm + rts.xyz - (rmN + rtsN.xyz);\n              f += FcFun (dr, dv - cross (wmN, rtsN.xyz));\n            }\n          }\n        }\n        am += f;\n        wam += cross (rts.xyz, f);\n      }\n    }\n  }\n}\n\nvoid BWallForce (vec3 rm, vec3 vm, mat3 mRot, vec3 wm, inout vec3 am, inout vec3 wam)\n{\n  vec4 rts, drw;\n  vec3 r, dr, dv, f;\n  for (int j = 0; j < nSiteBlk; j ++) {\n    rts = RSite (j);\n    if (rts.w >= 2.) {\n      rts.xyz = mRot * rts.xyz;\n      r = rm + rts.xyz;\n      dv = vm + cross (wm, rts.xyz);\n      f = vec3 (0.);\n      drw = vec4 ((boxSize - 1. - abs (r)) * (1. - 2. * step (0., r)), 0.);\n      for (int nf = 0; nf < 3; nf ++) {\n        dr = (nf == 0) ? drw.xww : ((nf == 1) ? drw.wyw : drw.wwz);\n        f += FcFun (dr, dv);\n      }\n      am += f;\n      wam += cross (rts.xyz, f);\n    }\n  }\n}\n\nvoid BShForce (vec3 rm, vec3 vm, mat3 mRot, vec3 wm, inout vec3 am, inout vec3 wam)\n{\n  vec4 rts;\n  vec3 dr, dv, f;\n  vec2 g;\n  for (int j = 0; j < nSiteBlk; j ++) {\n    rts = RSite (j);\n    if (rts.w >= 2.) {\n      rts.xyz = mRot * rts.xyz;\n      f = vec3 (0.);\n      g = vec2 (0.);\n      for (int n = 0; n < nBallE * nBallE; n ++) {\n        dr = rm + rts.xyz - GetR (g);\n        dv = vm + cross (wm, rts.xyz) - GetV (g);\n        f += FcFun (dr, dv);\n        if (++ g.x == float (nBallE)) {\n          g.x = 0.;\n          ++ g.y;\n        }  \n      }\n      am += f;\n      wam += cross (rts.xyz, f);\n    }\n  }\n}\n\nvoid Step (ivec2 iv, out vec3 rm, out vec3 vm)\n{\n  vec3 am;\n  float dt;\n  IdNebs ();\n  rm = GetR (vec2 (iv));\n  vm = GetV (vec2 (iv));\n  am = vec3 (0.);\n  if (iv.x > 0 && iv.x < nBallE - 1 && iv.y > 0 && iv.y < nBallE - 1) {\n    ShSpringForce (iv, rm, vm, am);\n    ShBendForce (iv, rm, am);\n    ShBForce (rm, am);\n    am -= fvDamp * vm;\n    dt = 0.02;\n    vm += dt * am;\n    rm += dt * vm;\n  }\n}\n\nvoid StepB (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot;\n  vec3 am, wam, dSp;\n  float dt;\n  rm = GetRB (mId);\n  vm = GetVB (mId);\n  qm = GetQB (mId);\n  wm = GetWB (mId);\n  mRot = QtToRMat (qm);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  BBPairForce (rm, vm, mRot, wm, am, wam);\n  BWallForce (rm, vm, mRot, wm, am, wam);\n  BShForce (rm, vm, mRot, wm, am, wam);\n  am -= fvDamp * vm;\n  am /= bMass;\n  am -= 2. * gravVec;\n  dt = 0.02;\n  vm += dt * am;\n  rm += dt * vm;\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.25 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  wm += dt * wam / bMass;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = EulToQt (vec3 (0.1, 0.4, 0.3) * pi);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (ivec2 iv, out vec3 r, out vec3 v)\n{\n  for (int iy = 0; iy < nBallE; iy ++) {\n    for (int ix = 0; ix < nBallE; ix ++) {\n      if (iv.x == ix && iv.y == iy) {\n        r = 0.97 * spLen * (vec3 (ix, iy, 0.) - vec3 (vec2 (0.5 * float (nBallE - 1)), 0.));\n      }\n    }\n  }\n  v = vec3 (0.);\n}\n\nvoid InitB (int mId, out vec3 r, out vec3 v, out vec4 qm, out vec3 wm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  r = 0.4 * boxSize * (2. * vec3 (mod (mIdf, 2.), floor (mod (mIdf, 4.) / 2.),\n     floor (mIdf / 4.)) - 1.);\n  v = vec3 (0.);\n  qm = EulToQt (normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6))));\n  wm = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, qtVu, qm;\n  vec3 r, v, wm;\n  vec2 canvas;\n  ivec2 pxIv, iv;\n  float tCur, nStep, asp;\n  int mId, pxId, kp;\n  bool doInit;\n  pxIv = ivec2 (fragCoord);\n  pxId = pxIv.x + 2 * nBallE * pxIv.y;\n  if (pxIv.x >= 2 * nBallE || pxId > 2 * nBallE * nBallE + 4 * nBlk + 2) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  qtVu = Loadv4 (vec2 (4 * nBlk + 1, nBallE));\n  mPtrP = Loadv4 (vec2 (4 * nBlk + 2, nBallE));\n  iv = pxIv;\n  if (iv.x >= nBallE) iv.x -= nBallE;\n  mId = iv.y * nBallE + iv.x;\n  if (iFrame <= 5) {\n    doInit = true;\n    spLen = 1.1;\n    boxSize = 0.52 * spLen * float (nBallE - 1);\n    nStep = 0.;\n    OrientVu (qtVu, mPtr, mPtrP, false);\n  } else {\n    doInit = false;\n    stDat = Loadv4 (vec2 (4 * nBlk + 0, nBallE));\n    spLen = stDat.x;\n    boxSize = stDat.y;\n    nStep = stDat.w;\n    ++ nStep;\n    if (mPtrP.z < 0.) qtVu = EulToQt (QtToEul (qtVu) + 0.003 * pi * vec3 (0.41, 0., 0.27));\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    gravVec = vec3 (0., 1., 0.) * QtToRMat (qtVu);\n    if (nStep > 100. && mPtr.z > 0. && mPtr.x > 0.5 - 0.05 / asp &&\n       mPtr.y > 0.5 - 0.05) doInit = true;\n  }\n  if (doInit) nStep = 0.;\n  bMass = 8.;\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  fOvlap = 1000.;\n  fricN = 1.;\n  fricT = 1.;\n  fricS = 2.;\n  fvDamp = 0.03;\n  if (mId < nBallE * nBallE) {\n    if (doInit) Init (iv, r, v);\n    else Step (iv, r, v);\n    stDat = vec4 (((pxIv.x < nBallE) ? r : v), 0.);\n  } else if (pxId >= 2 * nBallE * nBallE && pxId < 2 * nBallE * nBallE + 4 * nBlk) {\n    mId = (pxId - 2 * nBallE * nBallE) / 4;\n    if (doInit) InitB (mId, r, v, qm, wm);\n    else StepB (mId, r, v, qm, wm);\n    kp = pxId - 2 * nBallE * nBallE - 4 * mId;\n    if      (kp == 0) stDat = vec4 (r, 0.);\n    else if (kp == 1) stDat = vec4 (v, 0.);\n    else if (kp == 2) stDat = qm;\n    else if (kp == 3) stDat = vec4 (wm, 0.);\n  } else {\n    kp = pxId - 2 * nBallE * nBallE - 4 * nBlk;\n    if      (kp == 0) stDat = stDat = vec4 (spLen, boxSize, tCur, nStep);\n    else if (kp == 1) stDat = qtVu;\n    else if (kp == 2) stDat = mPtrP;\n  }\n  Savev4 (vec2 (pxIv), stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (dot (vec4 (q1.w, - q1.z, q1.yx), q2), dot (vec4 (q1.zw, - q1.x, q1.y), q2),\n     dot (vec4 (- q1.y, q1.xwz), q2), dot (vec4 (- q1.xyz, q1.w), q2));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec3 QtToEul (vec4 q)\n{\n  vec3 e;\n  float s, t;\n  t = dot (q.xy, q.xy);\n  s = 2. * sqrt (max (t * (1. - t), 0.));\n  e.y = atan (s, 1. - 2. * t);\n  if (s != 0.) e.xz = \n     vec2 (atan (q.x * q.z + q.y * q.w, q.x * q.w - q.y * q.z),\n           atan (q.x * q.z - q.y * q.w, q.x * q.w + q.y * q.z));\n  else e.xz = vec2 (2. * atan (q.z, q.w), 0.);\n  return e;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetV (vec2 v)\n{\n  v.x += float (nBallE);\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 0, nBallE)).xyz;\n}\n\nvec3 GetVB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 1, nBallE)).xyz;\n}\n\nvec4 GetQB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 2, nBallE));\n}\n\nvec3 GetWB (int n)\n{\n  return Loadv4 (vec2 (4 * n + 3, nBallE)).xyz;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}