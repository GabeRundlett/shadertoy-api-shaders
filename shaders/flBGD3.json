{
    "Shader": {
        "info": {
            "date": "1627081098",
            "description": "feel free to use  as texture or copy code\nset LIGHTING to true or false to  toggle lighting\nset COL to change tint of metal\nset SMUDGES to change intensity of imperfections\nset BRUSH to make the brushed finnish stand out more\nset OFFSET to change sample",
            "flags": 0,
            "hasliked": 0,
            "id": "flBGD3",
            "likes": 4,
            "name": "Procedural Metal Texture",
            "published": 3,
            "tags": [
                "noise",
                "metal"
            ],
            "usePreview": 0,
            "username": "arthehaxxor",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "// tint of metal\n#define COL vec3(1, 0.85, 0.8)\n//whether or not to apply lighting\n#define LIGHTING false\n//intensity of smudges\n#define SMUDGES 0.05 \n//intensity of the brush\n#define BRUSH 0.2\n// offset of noise\n#define OFFSET 10.0\n\nvec4 gammaRamp(vec4 c) {\n    c.x=pow(c.x,2.2);\n    c.y=pow(c.y,2.2);\n    c.z=pow(c.z,2.2);\n    return c;\n}\n\n// copy from https://www.shadertoy.com/view/4l2GzW\nfloat r(float n)\n{\n \treturn fract(cos(n*89.42)*343.42);\n}\nvec2 r(vec2 n)\n{\n \treturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \n}\nfloat worley(vec2 n,float s)\n{\n    float dis = 2.0;\n    for(int x = -1;x<=1;x++)\n    {\n        for(int y = -1;y<=1;y++)\n        {\n            vec2 p = floor(n/s)+vec2(x,y);\n            float d = length(r(p)+vec2(x,y)-fract(n/s));\n            if (dis>d)\n            {\n             \tdis = d;   \n            }\n        }\n    }\n    return 1.0 - dis;\n\t\n}\n\n// copy from https://www.shadertoy.com/view/4sc3z2\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    p += OFFSET;\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat mixNoise (vec3 uv) {\n    float dis = (1.0+perlin_noise(vec3(uv.x, uv.y + perlin_noise(vec3(uv.x*10.0, 0, 0))*2.0,  uv.z)*8.0)) \n        * (1.0+(worley(uv.xy, 32.0)+\n        0.5*worley(2.0*uv.xy,32.0) +\n        0.25*worley(4.0*uv.xy,32.0) ));\n\n        return dis/4.0;\n}\n\nfloat mag (vec3 v) {\n    return sqrt((v*v).x + (v*v).y +(v*v).z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.xy;\n    float dis = mixNoise(vec3(vec2(p.x*100.0, p.y) ,0));\n    \n    float light = mixNoise(vec3(0, (p.x + p.y)*0.5 + iTime, 0))* 2.3;\n    if(!LIGHTING) light = 1.0;\n    vec3 col = vec3(dis*BRUSH+(1.0-BRUSH)) * COL;\n    float smudges = perlin_noise(vec3(p*20.0 + \n                    perlin_noise(vec3(p*30.0 +\n                    perlin_noise(vec3(p*40.0 + \n                    perlin_noise(vec3(p*50.0, 0)) , 0)), 0)) , 0))* SMUDGES;\n    fragColor = gammaRamp(vec4(mix(col, vec3(1.0 - mag(col) * light), smudges) * light,1.0));\n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}