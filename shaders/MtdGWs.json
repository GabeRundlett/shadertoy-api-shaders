{
    "Shader": {
        "info": {
            "date": "1472538399",
            "description": ".....",
            "flags": 32,
            "hasliked": 0,
            "id": "MtdGWs",
            "likes": 5,
            "name": "RayMarchingDemo123",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "MrASL",
            "viewed": 648
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ol = 1.0-length(uv-0.5);\n    float of = pow(uv.x-0.5,2.0);\n    float g = texture(iChannel0,uv).g;\n    float b = texture(iChannel0,uv+vec2(of*0.1,0.0)).b;\n    float r = texture(iChannel0,uv-vec2(of*0.1,0.0)).r;\n    vec3 addC = mix(vec3(0.03,0.0,0.07),vec3(0.1,0.04,0.0),uv.y);\n    vec3 mulC = vec3(ol,ol,ol);\n    fragColor = vec4(r,g,b,1.0);\n    fragColor.rgb*=mulC;\n    fragColor.rgb+=addC;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TRACE_STEP 64\n#define LIGHTCOLOR vec3(1,1,1)\n#define SPECCOLOR vec3(0.8,0.8,0.8)\n#define AMBIENT vec3(0.3,0.3,0.3)\n#define SPECULER 165.0\n#define GLOSS 0.9\n#define PI 3.14159265358\n\nstruct MatProp{\n \tfloat ds;\n    float texid;\n    float fresnel;\n    vec3 difCol;\n    vec3 specCol;\n    float spec;\n    float gloss;\n};\n\nvoid FillProp(inout MatProp i, float tex,vec3 difC,vec3 specC,float spec,float gloss,float f){\n    i.texid = tex;\n    i.difCol = difC;\n    i.specCol = specC;\n    i.spec = spec;\n    i.gloss = gloss;\n    i.fresnel = f;\n}\n\nMatProp Sphere(vec3 pos,float r,float tex,vec3 difC,vec3 specC,float spec,float gloss,float f){\n    MatProp i;\n    i.ds = length(pos)-r;\n    FillProp(i,tex,difC,specC,spec,gloss,f);\n \treturn i;   \n}\n\nMatProp Cube( vec3 p, vec3 b,float tex,vec3 difC,vec3 specC,float spec,float gloss,float f)\n{\n    MatProp i;\n    i.ds = length(max(abs(p)-b,0.0));\n    FillProp(i,tex,difC,specC,spec,gloss,f);\n \treturn i;   \n}\n\nMatProp Plane( vec3 p,float tex,vec3 difC,vec3 specC,float spec,float gloss,float f)\n{\n    MatProp i;\n    i.ds = p.y;\n    FillProp(i,tex,difC,specC,spec,gloss,f);\n \treturn i;   \n}\n\nMatProp siSphere( vec3 pos,vec3 t,float tex,vec3 difC,vec3 specC,float spec,float gloss,float f)\n{\n    MatProp i;\n    i.ds = length(pos)-sin(pos.y*t.x)*t.y-t.z;\n    FillProp(i,tex,difC,specC,spec,gloss,f);\n \treturn i;   \n}\n\nMatProp OpU(MatProp a, MatProp b){\n \tif(a.ds<b.ds)\n        return a;\n    return b;\n}\n\nMatProp Scene(vec3 pos){\n \tMatProp t = Sphere(pos+vec3(3.5,0.0,1.0),3.0,0.0,vec3(1,1,1),vec3(1,1,1),165.0,0.9,2.0);\n    t = OpU(t,Sphere(pos+vec3(-6.3,0.0,1.8),2.0,0.0,vec3(0.0,1,0.2),vec3(1,1,1),5.0,0.3,1.));\n    t = OpU(t,Sphere(pos+vec3(5.3,0.0,7.8),2.0,0.0,vec3(0.0,0.4,1),vec3(1,1,1),165.0,0.1,1.));\n    t = OpU(t,Cube(pos+vec3(0.0,5.9,0.0),vec3(30,1.3,30),0.0,texture(iChannel2,pos.xz*0.1).rgb,vec3(1,1,1),0.1,0.0,1.));\n    //t = OpU(t,Plane(pos+vec3(0.0,5.9,0.0),0.0,texture(iChannel2,pos.xz*0.1).rgb,vec3(1,1,1),0.1,0.0,1.));\n    return t;\n}\n\nvec3 RotXY(vec3 p, float x, float y){\n    mat3 mat = mat3(vec3(cos(y),0,-sin(y)),\n\t\t\t vec3(sin(x)*sin(y),cos(x),sin(x)*cos(y)),\n\t\t\tvec3(sin(y)*cos(x),-sin(x),cos(x)*cos(y)));\n    return mat*p;\n}\n\nMatProp Trace(vec3 o, vec3 d, out vec3 pos){\n \tMatProp res;\n    for(int i=0;i<TRACE_STEP;i++){\n     \tpos = o+d*res.ds;\n        float t = res.ds;\n        res = Scene(pos);\n        if(res.ds<0.001)\n            break;\n         res.ds+=t;\n        if(res.ds>10000.0){\n         \tres.ds=0.0;\n            break;\n        }\n    }\n    return res;\n}\n        \nvec3 GetNormal(vec3 sur){\n \tvec3 d = vec3(0.001,0.0,0.0);\n    float dx = Scene(sur + d.xyy).ds-Scene(sur-d.xyy).ds;\n    float dy = Scene(sur + d.yxy).ds-Scene(sur-d.yxy).ds;\n    float dz = Scene(sur + d.yyx).ds-Scene(sur-d.yyx).ds;\n    return normalize(vec3(dx,dy,dz));\n}\n\nfloat Shadow(vec3 pos, vec3 dir, float mint, float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = Scene( pos + dir*t ).ds;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 Light(vec3 dif,vec3 refc, vec3 p, vec3 n, vec4 litp, vec3 vdir, MatProp prop){\n    vec3 ldir = litp.xyz;\n    if(litp.w==0.0)\n        ldir = normalize(ldir);\n    else\n        ldir = normalize(ldir-p);\n    \n    vec3 h = normalize(vdir+ldir);\n    \n    float ndl = max(0.0,dot(n,ldir));\n    float ndh = max(0.0,dot(n,h));\n    float ndv = 1.0-max(0.0,dot(n,vdir));\n    \n    float spec = pow(ndh,prop.spec)*prop.gloss;\n    \n    dif = mix(refc, dif,pow(1.0-ndv,prop.fresnel));\n    \n    float shadow = Shadow(p,ldir,3.0,9.0);\n    vec3 c = dif*(ndl*shadow*LIGHTCOLOR+AMBIENT) + spec*shadow * prop.specCol*LIGHTCOLOR;\n    \n    return c;\n}\n\nvec3 Render(vec3 p, vec4 litp, vec3 camp, MatProp prop){\n    vec3 n = GetNormal(p);\n    \n    vec3 vdir = normalize(camp-p);\n   \n    vec3 dif = vec3(0.0,0.0,0.0);\n    \n    vec3 refp = p;\n    vec3 refn = n;\n    vec3 refd = vdir;\n    for(int i=0;i<1;i++){\n     \tvec3 tp = refp+refn*0.004;\n        vec3 ref = reflect(refd,refn);\n        MatProp refds = Trace(tp+ref*0.003,-ref,refp);\n        if(refds.ds>0.0){\n            refn = GetNormal(refp);\n        \tdif =Light(dif,refds.difCol,refp,refn,litp,-ref,refds);\n    \t}else{\n\t\t\tdif = texture(iChannel0,ref).rgb;\n            break;\n    \t}\n        \n    }\n    \n    vec3 c = Light(prop.difCol,dif,p,n,litp,vdir,prop);\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 tuv = fragCoord.xy / iResolution.xy;\n    vec2 uv=tuv*2.0-1.0;\n    uv.x*=iResolution.x/iResolution.y;\n\t\n    vec3 camForward = RotXY(normalize(vec3(0,0,1.0)),0.7,iTime*0.4);\n    vec3 camDir = RotXY(normalize(vec3(uv.x,uv.y,1.0)),0.7,iTime*0.4);\n    vec3 camPos = vec3(0,0,0)-camForward*10.0;\n    \n    vec3 p;\n    MatProp d = Trace(camPos,camDir,p);\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    if(d.ds>0.0){\n        fragColor.rgb =Render(p,vec4(2.6,9.0,-9.7,1.0),camPos,d);\n    }else{\n\t\tfragColor.rgb = texture(iChannel0,-camDir).rgb;\n    }\n    fragColor = fragColor*0.45+texture(iChannel1,tuv)*0.55;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}