{
    "Shader": {
        "info": {
            "date": "1668895112",
            "description": "A circuit in wireworld.",
            "flags": 32,
            "hasliked": 0,
            "id": "cdsSW4",
            "likes": 27,
            "name": "Wireworld Cellular Automaton",
            "published": 3,
            "tags": [
                "automata",
                "ca",
                "wireworld",
                "circuits"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "#define BLANK 0\n#define COPPER 1\n#define HEAD 2\n#define TAIL 3\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Cells\n    fragCoord *= 40.0 / iResolution.y;\n    int state = int(texelFetch(iChannel0, ivec2(fragCoord), 0).x);\n    if (state == COPPER) color = vec3(1.0, 0.75, 0.0);\n    if (state == HEAD) color = vec3(0.0, 0.0, 1.0);\n    if (state == TAIL) color = vec3(1.0, 0.0, 0.0);\n\n    // Grid\n    color = mix(color, vec3(0.5), smoothstep(50.0 / iResolution.y, 0.0, abs(fract(fragCoord.x + 0.5) - 0.5)));\n    color = mix(color, vec3(0.5), smoothstep(50.0 / iResolution.y, 0.0, abs(fract(fragCoord.y + 0.5) - 0.5)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BLANK 0\n#define COPPER 1\n#define HEAD 2\n#define TAIL 3\n\nbool point(in ivec2 cell, in int x, in int y) {\n    return cell.x == x && cell.y == y;\n}\n\nbool wire(in ivec2 cell, in int y, in int x0, in int x1) {\n    return cell.y == y && cell.x >= x0 && cell.x <= x1;\n}\n\nbool clock(in ivec2 cell, in int y, in int x0, in int x1) {\n    bool etch = cell.y == y && (cell.x == x0 || cell.x == x1);\n    etch = etch || (abs(cell.y - y) == 1 && cell.x >= x0 + 1 && cell.x <= x1 - 1);\n    return etch;\n}\n\nbool diode(in ivec2 cell, in int x, in int y, in int dir) {\n    cell.x *= dir, x *= dir;\n    bool etch = abs(cell.y - y) == 1 && cell.x >= x - 1 && cell.x <= x;\n    etch = etch || (cell.y == y && cell.x == x - 1);\n    return etch;\n}\n\nbool and(in ivec2 cell, in int x, in int y, in int dir) {\n    cell.x *= dir, x *= dir;\n    cell -= ivec2(5, -3);\n    bool etch = cell.y == y + 3 && cell.x >= x - 4 && cell.x <= x + 2;\n    etch = etch || (abs(cell.x - x + 3) == 1 && cell.y >= y - 3 && cell.y <= y - 1);\n    etch = etch || (cell.x == x - 3 && cell.y == y - 4);\n    etch = etch || (cell.x == x && abs(cell.y - y) < 2);\n    etch = etch || (cell.y == y && abs(cell.x - x) == 1);\n    etch = etch || (cell.x == x + 2 && abs(cell.y - y) == 1);\n    etch = etch || (cell.x == x + 4 && abs(cell.y - y + 2) < 2);\n    etch = etch || (cell.y == y - 2 && abs(cell.x - x - 4) == 1);\n    etch = etch || (cell.y == y + 2 && cell.x >= x + 3 && cell.x <= x + 5);\n    etch = etch || (cell.x == x + 6 && cell.y >= y - 1 && cell.y <= y + 1);\n    etch = etch || (cell.y == y - 3 && cell.x >= x + 6 && cell.x <= x + 7);\n    etch = etch || (cell.x == x + 8 && cell.y == y - 2);\n    etch = etch || (cell.y == y - 1 && cell.x >= x + 9 && cell.x <= x + 10);\n    return etch;\n}\n\nbool or(in ivec2 cell, in int x, in int y, in int dir) {\n    cell.x *= dir, x *= dir;\n    cell -= ivec2(1, -2);\n    bool etch = cell.x == x && abs(cell.y - y) < 2;\n    etch = etch || (abs(cell.x - x) < 2 && cell.y == y);\n    return etch;\n}\n\nbool xor(in ivec2 cell, in int x, in int y, in int dir) {\n    cell.x *= dir, x *= dir;\n    cell -= ivec2(1, -3);\n    bool etch = cell.x == x - 1 && abs(cell.y - y) < 2;\n    etch = etch || (abs(cell.y - y) == 1 && cell.x >= x - 1 && cell.x <= x + 2);\n    etch = etch || (cell.y == y && cell.x >= x + 2 && cell.x <= x + 3);\n    etch = etch || (cell.x == x && abs(cell.y - y) == 2);\n    return etch;\n}\n\nbool flipflop(in ivec2 cell, in int x, in int y, in int dir) {\n    cell.x *= dir, x *= dir;\n    bool etch = cell.x == x + 1 && cell.y == y;\n    etch = etch || (cell.x == x + 2 && abs(cell.y - y + 2) < 2);\n    etch = etch || (abs(cell.x - x - 2) == 1 && cell.y == y - 2);\n    etch = etch || (cell.x == x + 1 && cell.y >= y - 7 && cell.y <= y - 4);\n    etch = etch || (abs(cell.x - x - 1) == 1 && cell.y == y - 6);\n    etch = etch || (cell.x == x + 3 && cell.y >= y - 5 && cell.y <= y - 4);\n    return etch;\n}\n\n#define Etch(copper) etch = etch || (copper)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(BLANK);\n    ivec2 cell = ivec2(fragCoord - 0.5);\n    if (iFrame == 0) {\n        // Fast clock (1/6)cycles/frame\n        bool etch = clock(cell, 2, 1, 4);\n        Etch(wire(cell, 2, 5, 11));\n        Etch(wire(cell, 6 - 3, 12, 16));\n        Etch(wire(cell.yx, 17, 4, 19));\n        Etch(wire(cell, 20, 18, 20));\n\n        // 3x slower than first clock\n        Etch(clock(cell, 6, 1, 10));\n        Etch(wire(cell, 6, 11, 14));\n        Etch(wire(cell.yx, 15, 7, 22));\n        Etch(wire(cell, 23, 16, 20));\n\n        Etch(and(cell, 20, 23, 1));\n\n        // Slooow clock (1/124)cycles/frame\n        Etch(wire(cell, 13, 20, 33));\n        Etch(point(cell, 19, 12));\n        Etch(wire(cell, 11, 20, 31));\n        Etch(point(cell, 32, 10));\n        Etch(point(cell, 19, 8));\n        Etch(wire(cell, 9, 20, 31));\n        Etch(wire(cell, 7, 20, 40));\n        Etch(point(cell, 41, 6));\n        Etch(wire(cell, 5, 20, 40));\n        Etch(point(cell, 19, 4));\n        Etch(wire(cell, 3, 20, 42));\n        Etch(wire(cell.yx, 43, 4, 8));\n        Etch(wire(cell, 9, 35, 42));\n        Etch(wire(cell.yx, 34, 10, 12));\n\n        // Flipflop\n        Etch(flipflop(cell, 35, 19, 1));\n        Etch(wire(cell, 15, 39, 45));\n\n        // Display\n        Etch(wire(cell.yx, 46, 16, 36));\n        Etch(point(cell, 47, 37));\n        Etch(wire(cell.yx, 48, 16, 36));\n        Etch(point(cell, 49, 15));\n        Etch(wire(cell.yx, 50, 16, 36));\n        Etch(point(cell, 51, 37));\n        Etch(wire(cell.yx, 52, 16, 36));\n        Etch(point(cell, 53, 15));\n        Etch(wire(cell.yx, 54, 16, 36));\n\n        if (etch) fragColor = vec4(COPPER);\n\n        if (point(cell, 4, 2)) fragColor = vec4(HEAD);\n        if (point(cell, 3, 1)) fragColor = vec4(TAIL);\n\n        if (point(cell, 10, 6)) fragColor = vec4(HEAD);\n        if (point(cell, 9, 5)) fragColor = vec4(TAIL);\n\n        if (point(cell, 34, 12)) fragColor = vec4(HEAD);\n        if (point(cell, 33, 13)) fragColor = vec4(TAIL);\n    }\n\n    else {\n        fragColor = texelFetch(iChannel0, cell, 0);\n        if (iFrame % 5 == 0) {\n            int state = int(texelFetch(iChannel0, cell, 0).x);\n\n            int heads = 0;\n            for (int i=-1; i <= 1; i++) {\n                for (int j=-1; j <= 1; j++) {\n                    if (!(i == 0 && j == 0)) {\n                        int neighbor = int(texelFetch(iChannel0, cell + ivec2(i, j), 0).x);\n                        if (neighbor == HEAD) heads++;\n                    }\n                }\n            }\n\n            if (state == COPPER && (heads == 1 || heads == 2)) state = HEAD;\n            else if (state == HEAD) state = TAIL;\n            else if (state == TAIL) state = COPPER;\n\n            fragColor = vec4(state);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}