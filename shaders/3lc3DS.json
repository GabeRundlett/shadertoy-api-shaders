{
    "Shader": {
        "info": {
            "date": "1577701839",
            "description": "sound spectrogram",
            "flags": 32,
            "hasliked": 0,
            "id": "3lc3DS",
            "likes": 3,
            "name": "spectre road",
            "published": 3,
            "tags": [
                "soundspectrogram"
            ],
            "usePreview": 0,
            "username": "0shape",
            "viewed": 475
        },
        "renderpass": [
            {
                "code": "// goto Buffer A and start iChannel0\n// Spectrum road by 0shape 2019\n// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. http://creativecommons.org/licenses/by-nc-sa/4.0/\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pixelSize 1. / iResolution.xy\n#define pi2 3.14159265359 / 2.0\n#define wider 0.3\n#define speed 0.5 \n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n// https://thebookofshaders.com/edit.php#05/expstep.frag\nfloat expStep( float x, float k, float n ){\n    return exp( -k*pow(x,n) );\n}\n\n\nvec3 color(float x){\n    float xpi = pi2 * x;       \n\treturn vec3(pow(sin(xpi),3.)   // red\n                ,pow(sin(xpi+pi2/2.),4.) * .9\n                ,pow(sin(0.1+pi2 - xpi),3.))\n        *(1.-expStep(x,7.,1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    float pct = plot(vec2(uv.x,uv.y),0.5);\n   \n\tvec2 ch1 = vec2(uv.x*2.-1.,0.); // scaling coords to be 0-1 in 0.5 - 1.0\n    vec2 ch2 = vec2(abs(uv.x*2.-1.),0); // scaling coords to by 0-1 in 0.0 - 0.5\n\n   \n    if (uv.y> 1.- pixelSize.y) {    \n  \t\tfragColor = vec4(color(texture(iChannel0, ch1).x)*abs(step(uv.x,0.5)-1.),1.);\n    \tfragColor += vec4(color(texture(iChannel0, ch2).x)*step(uv.x,0.5),1.);\n        //    fragColor *= 1.-step(uv.y,0.95);\n    } else {    \n        // flat copy\n\t    //vec2 copy = vec2(uv.x, uv.y + iTimeDelta);\n        vec2 copy = vec2(uv.x-(uv.x-0.5)*(1.-expStep(1.-uv.y,wider,3.0))*0.1\n                         , uv.y + iTimeDelta * speed);\n        \n\t    fragColor = texture(iChannel1, copy);\n    \n    }\n\n\n    // debug color func\n    //fragColor = mix(vec4(color(uv.x) * plot(uv,0.03),1.),fragColor,step(plot(uv,0.03),0.1));\n\n      \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}