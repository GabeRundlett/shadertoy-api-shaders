{
    "Shader": {
        "info": {
            "date": "1454186444",
            "description": "Apply a kernel",
            "flags": 0,
            "hasliked": 0,
            "id": "lsGGWh",
            "likes": 0,
            "name": "Apply kernel",
            "published": 3,
            "tags": [
                "applyakernel"
            ],
            "usePreview": 0,
            "username": "Coldberg",
            "viewed": 62
        },
        "renderpass": [
            {
                "code": "mat3 Gx = mat3(-1.0, 0.0, 1.0,\n               -2.0, 0.0, 2.0,\n               -1.0, 0.0, 1.0);\n\nmat3 Gy = mat3(-1.0, -2.0, -1.0,\n               0.0, 0.0, 0.0,\n               1.0, 2.0, 1.0);\n\n\nfloat applyKernel(mat3 gx, mat3 gy, sampler2D sampler, vec2 uv) {\n    float final = 0.0;\n    \n    mat3 pixels;\n    \n    for (int i = -1; i < 2; i++) {        \n        for (int j = -1; j < 2; j++) {\n            // we will sample around the pixel\n            vec2 d = vec2(float(i), float(j));\n            // normalize\n            d /= iResolution.xy;\n            \n            vec4 color = texture(sampler, uv+d);\n            pixels[i+1][j+1] = (color.r + color.g + color.b ) / 3.0;\n        }\n    }\n    \n    float horizontal = 0.0;\n    float vertical = 0.0;\n    \n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n          horizontal += pixels[i][j] * gx[i][j];\n          vertical += pixels[i][j] * gy[i][j];            \n        }\n    }\n    \n    final = sqrt(horizontal * horizontal + vertical * vertical);\n    return final;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 color = texture(iChannel0, uv);\n    float edgeIntensity = applyKernel(Gx, Gy, iChannel0, uv);\n    \n    \n    vec3 hsvColor = rgb2hsv(color.rgb);\n    hsvColor.g = floor (hsvColor.g*8.0 + 0.5)/8.0;\n    hsvColor.b = floor (hsvColor.b*2.0 + 0.5)/2.0;\n    vec4 newColor = vec4 (hsv2rgb (hsvColor), 1);\n    \n    vec4 edgeColor = mix(        \n        vec4(0.0, 0.0, 0.0, 1.0),\n        newColor,\n        1.0-edgeIntensity);\n    \n    color = mix(\n        color,\n        edgeColor,\n        step(0.25, uv.x));\n    \n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}