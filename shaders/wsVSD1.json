{
    "Shader": {
        "info": {
            "date": "1573982998",
            "description": "sdf",
            "flags": 0,
            "hasliked": 0,
            "id": "wsVSD1",
            "likes": 1,
            "name": "SDF box",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "artemis",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\nfloat sRGB(float x) {\n    if (x <= 0.00031308)\n        return 12.92 * x;\n    else\n        return 1.055*pow(x,(1.0 / 2.4) ) - 0.055;\n}\n\nvec3 sRGB3(vec3 x) {\n    return vec3(sRGB(x.r), sRGB(x.g), sRGB(x.b));\n}\n\nfloat circle(vec2 p, float radius) {\n\treturn length(p) - radius;\n}\n\nfloat rect(vec2 p, vec2 size) {\n    vec2 d = abs(p) - size;    \n\treturn length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nfloat scene(vec2 p) {\n    return rect(p, vec2(0.5, 0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = (uv - 0.5) * 2.0;\n    \n    float s = scene(uv);\n    \n    float v = 1.0 - smoothstep(-0.001, 0.001, s);\n    \n    vec3 col = vec3(0.02, sin(s * 100.0 + iTime * 2.0) / 4.0 + 0.025, sin(s * 100.0 - iTime) + 0.05);\n    \n    \n    col += (1.0/255.0)*hash3(uv.x+13.0*uv.y);\n    \n    // Output to screen\n    fragColor = vec4(sRGB3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}