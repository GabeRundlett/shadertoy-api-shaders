{
    "Shader": {
        "info": {
            "date": "1581792581",
            "description": "Typical filter you see in videos with vertical aspect ratio, simplified.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tcXDX",
            "likes": 7,
            "name": "Different aspect ratio blur",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "filter",
                "gaussian",
                "aspect",
                "ratio"
            ],
            "usePreview": 0,
            "username": "luluco250",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "//============//\n// Parameters //\n//============//\n\n// Amount of blur samples.\nconst int BlurSamples = 13;\nconst int BlurHalfSamples = BlurSamples / 2;\nconst float BlurInvSamples = 1.0 / float(BlurSamples);\n\n// Extra cropping of the video area, in percentage of the screen.\nconst vec2 ExtraCrop = vec2(0.1, 0.0);\n\n// Tint applied to the blurred area.\nconst vec3 Tint = vec3(1.0);\n\n//===========//\n// Functions //\n//===========//\n\n// Scale a coordinate while keeping it anchored to a point.\nvec2 scale_uv(vec2 uv, vec2 scale, vec2 center) {\n    return (uv - center) * scale + center;\n}\n\n// Apply a simple 1D blur, dir should specify pixel size.\nvec3 simple_blur(sampler2D sp, vec2 uv, vec2 dir) {\n    vec3 color = vec3(0.0);\n    \n    // Initial offset so that the result is later centered.\n    uv -= dir * vec2(BlurHalfSamples);\n    \n    // Explanation:\n    //  A: Starting pixel.\n    //  B: Ending pixel.\n    //  C: Center of the blur kernel.\n    //\n    // Before offset:\n    //               v~~~ The initial coordinate is here.\n    // | - | - | - | A | x | x | C | x | x | B |\n    //                           ^~~~ The center gets shifted all the way here.\n    //\n    // After offset:\n    //   v~~~ We offset backwards...\n    // | A | x | x | C | x | x | B | - | - | - |\n    //               ^~~~ ...so that the center remains where it was before the blur.\n    \n    for (int i = 0; i < BlurSamples; ++i)\n        color += texture(sp, uv + dir * float(i)).rgb;\n    \n    color *= BlurInvSamples;\n    return color;\n}\n\n// Correct the aspect ratio of a coordinate relative to a source\n// and destination resolution.\nvec2 correct_aspect(vec2 uv, vec2 source_res, vec2 dest_res) {\n    float ar_source = source_res.x / source_res.y;\n    float ar_dest = dest_res.x / dest_res.y;\n    float ar = ar_dest / ar_source;\n    \n    // Choose to adjust either the horizontal or vertical scale\n    // depending on whether the source ratio is vertical to the dest.\n    vec2 scale = mix(vec2(ar, 1.0), vec2(1.0, ar), step(ar, 1.0)); \n    return scale_uv(uv, scale, vec2(0.5));\n}\n\n// Check whether a point is inside a given area (xStart, yStart, xEnd, yEnd).\nfloat is_visible(vec2 uv, vec4 area) {\n    return\n        step(area.x, uv.x) *\n        step(uv.x, area.z) *\n        step(area.y, uv.y) *\n        step(uv.y, area.w);\n}\n\n//========//\n// Shader //\n//========//\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    vec2 mouse = iMouse.xy * ps;\n    mouse.y = 1.0 - mouse.y;\n    \n    // Draw blurred background.\n    color.rgb = simple_blur(iChannel0, uv, vec2(ps.x * float(BlurHalfSamples), 0.0));\n    color.rgb *= Tint;\n    color.a = 1.0;\n    \n    // Draw actual video.\n    vec2 video_uv = correct_aspect(uv, iChannelResolution[0].xy, iResolution.xy);\n    vec3 video = texture(iChannel0, video_uv).rgb;\n    \n    // Cut-off pixels outside the video aspect ratio.\n    vec2 extraCrop = mix(ExtraCrop, mouse, step(0.1, iMouse.z)) * 0.5;\n    vec4 visible_area = vec4(extraCrop, 1.0 - extraCrop);\n    color.rgb = mix(color.rgb, video, is_visible(video_uv, visible_area));\n    \n    // Expand contrast range.\n    color.rgb = smoothstep(0.15, 1.0, color.rgb);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}