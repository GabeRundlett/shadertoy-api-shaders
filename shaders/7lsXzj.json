{
    "Shader": {
        "info": {
            "date": "1626112307",
            "description": "The kaleidoscope distorsion build with math functions sine and cosine changed by mouse position",
            "flags": 0,
            "hasliked": 0,
            "id": "7lsXzj",
            "likes": 1,
            "name": "iChannel texture - 005",
            "published": 3,
            "tags": [
                "math",
                "kaleidoscope",
                "sine",
                "cosine",
                "distorsion"
            ],
            "usePreview": 0,
            "username": "catafest",
            "viewed": 575
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979\n\n#define distance 0.6 \n\n//#define amplitude 7.0\n\n#define angular_frequency 7.0\n\n//affects the distorsion speed\n#define TIME_FACTOR 1.0\n\n//vec2 for mouse position \nvec2 mp;\n\n// simple sine and cosine functions used with uv for wave effect\nfloat sine_wave(float t, float amplitude)\n{\n    return amplitude*(sin(angular_frequency * PI*t));\n}\n\nfloat cosine_wave(float t, float amplitude)\n{\n    return amplitude*(cos(angular_frequency * PI*t));\n}\n\n//main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// get the uv \n    vec2 uv = fragCoord.xy/ iResolution.xy;\n    // center of the uv\n    vec2 CENTER = uv/2.0; \n    // get the mouse position \n    mp = iMouse.xy / iResolution.xy;\n    // vec2 for build uv \n    vec2 mp_uv=vec2(0,0);\n    // the mouse position let you to see the distorsion versus \n    if (mp.x > CENTER.x)\n    {\n    //this basic kaleidoscope distorsion is build with parts from uv.x and uv.y and mouse position\n       \n        // if you use angular_frequency 0.5 you will see the full image \n        // 1.0-uv.x is inverse image only to uv.x\n        // the number of square = screen size / angular_frequency\n        // default is 7 squares\n        float xx = sine_wave  (1.0-uv.x, mp.x);\n        float yy = cosine_wave(1.0-uv.y, mp.y);\n        \n        mp_uv = vec2(xx,yy);  \n    }\n    else \n    {\n    // this move the uv by mouse position\n    mp_uv = vec2(uv.x + mp.x ,uv.y + mp.y);\n    }\n\n    // the output on screen is fragColor and is a iChannel0 input with the build mp_uv\n    fragColor = texture(iChannel0, mp_uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}