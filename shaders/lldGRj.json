{
    "Shader": {
        "info": {
            "date": "1470521710",
            "description": "Stratospheric Aerosol Injection",
            "flags": 32,
            "hasliked": 0,
            "id": "lldGRj",
            "likes": 46,
            "name": "Chemtrails",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "sky",
                "airplane",
                "trails",
                "conspiracy"
            ],
            "usePreview": 1,
            "username": "knarkowicz",
            "viewed": 2305
        },
        "renderpass": [
            {
                "code": "const float MATH_PI \t\t= float( 3.14159265359 );\nconst float AIRPLANE_NUM\t= 12.0;\n\nfloat Rand( float a, float b )\n{\n    vec3 p3 = fract( vec3( a, b, a ) * 0.1031 );\n    p3 += dot( p3, p3.yzx + 19.19 );\n    return fract( ( p3.x + p3.y ) * p3.z );\n}\n\nfloat saturate( float x )\n{\n    return clamp( x, 0.0, 1.0 );\n}\n\nfloat Rectangle( vec2 p, vec2 b )\n{\n    vec2 d = abs( p ) - b;\n    return min( max( d.x, d.y ), 0.0 ) + length( max( d, 0.0 ) );\n}\n\nfloat Ellipsoid( vec2 p, vec2 r )\n{\n    return ( length( p / r ) - 1.0 ) * min(r.x, r.y );\n}\n\nfloat Triangle( vec2 p, float width, float height )\n{\n\tvec2 n = normalize( vec2( height, width / 2.0 ) );\n\treturn max(\tabs( p ).x * n.x + p.y * n.y - height * n.y, -p.y );\n}\n\nfloat Line( vec2 p, float height, float width )\n{\n\tvec2 proj = vec2( 0.0, -max( 0.0, min( height, p.y ) ) );\n\treturn length( -p - proj ) - ( width * 0.5 );\n}\n\nfloat Union( float a, float b )\n{\n    return min( a, b );\n}\n\nfloat Substract( float a, float b )\n{\n    return max( a, -b );\n}\n\nfloat AirplaneSDF( vec2 p, vec2 airplanePos, vec2 airplaneDir, float airplaneScale )\n{    \n\tp -= airplanePos;\n    airplaneDir *= airplaneScale;\n    p = vec2( dot( p, vec2( airplaneDir.y, -airplaneDir.x ) ), dot( p, airplaneDir ) );\n    \n    float body = Rectangle( p + vec2( 0.0, -40.0 ), vec2( 6.0, 10.0 ) );\n\tbody = Union( body, Ellipsoid( p + vec2( 0.0, -70.0 ), vec2( 6.0, 25.0 ) ) );\n    body = Union( body, Ellipsoid( p + vec2( 0.0, -20.0 ), vec2( 6.0, 25.0 ) ) );\n    \n    vec2 t = p;\n    t.x = abs( t.x );\n\tt += vec2( -20.0, -45.0 );\n    float engine = Line( t, 15.0, 5.0 );\n    t += vec2( -15.0, 10.0 );\n    engine = Union( engine, Line( t, 15.0, 5.0 ) );\n    \n    t = p;\n    t.x = abs( t.x );\n    t.y -= 0.0;\n    float wing = dot( t, normalize( vec2( 0.1, 0.12 ) ) ) - 55.0;\n    wing = Substract( wing, dot( t, normalize( vec2( 0.1, 0.2 ) ) ) - 42.0 );\n\twing = Substract( wing, -t.x + 50.0 );\n    \n    t = p;\n    t.x = abs( t.x );\n    t.y += 44.0;    \n    float tail = dot( t + vec2( 0.0, 6.0 ), normalize( vec2( 0.1, 0.12 ) ) ) - 50.0;\n    tail = Substract( tail, dot( t, normalize( vec2( 0.1, 0.5 ) ) ) - 40.0 );\n\ttail = Substract( tail, -t.x + 20.0 );\n    \n    float ret = Union( Union( Union( body, engine ), wing ), tail );\n    return ret;\n}\n\nvoid Airplane( float id, out vec2 pos, out vec2 dir, out float scale )\n{\n    float cell = floor( iTime * 0.1 + fract( ( id * 2.0 ) / AIRPLANE_NUM ) );\n    float time = iTime * 0.1 + fract( ( id * 2.0 ) / AIRPLANE_NUM ) - cell;\n    cell += id * 1.13;\n    \n    vec2 start  = vec2( Rand( cell, id ) * 1000.0, Rand( cell + 1.0, id + 2.0 ) * 1000.0 );\n    float edge = Rand( cell + 7.0, id + 3.0 );\n    if ( edge < 0.25 )\n    {\n    \tstart.x = 0.0;\n\t}\n    else if ( edge < 0.5 )\n    {\n        start.x = 1000.0;\n    }\n    else if ( edge < 0.75 )\n    {\n        start.y = 0.0;\n    }\n    else\n    {\n        start.y = 1000.0;\n    }    \n    \n    vec2 target = vec2( 300.0 + Rand( cell, id ) * 400.0, 150.0 + Rand( cell + 1.0, id + 2.0 ) * 300.0 );\n    \n    dir\t\t= normalize( target - start );\n    scale \t= floor( id / 3.0 ) + 2.0;\n    pos \t= start + time * dir * ( 6000.0 / scale );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    vec2 p;\n    p.x = ( fragCoord.x / iResolution.x ) * 1000.0;\n    p.y = ( fragCoord.y / iResolution.y ) * 1000.0 * ( iResolution.y / iResolution.x );\n\n    vec3 sky = mix( vec3( 0.58, 0.76, 0.85 ), vec3( 0.27, 0.45, 0.62 ), uv.y );\n    vec3 color = sky;\n        \n    vec4 trails = texture( iChannel0, uv );\n    color = mix( color, vec3( 1.0 ), saturate( trails.x ) );\n    \n    float airplaneSDF = 1000.0;\n    float airplaneScale = 1.0;\n    for ( float iAirplane = 0.0; iAirplane < AIRPLANE_NUM; ++iAirplane )\n    {\n        vec2 pos;\n        vec2 dir;\n        float scale;\n        Airplane( iAirplane, pos, dir, scale );\n        \n        float sdf = AirplaneSDF( p, pos, dir, scale );\n        if ( sdf < airplaneSDF )\n        {\n            airplaneScale \t= scale;            \n            airplaneSDF \t= sdf;\n        }\n    }\n    \n    airplaneSDF = saturate( exp( -airplaneSDF * 1.0 ) );\n    color = mix( color, sky * ( 0.1 + airplaneScale * 0.08 ), airplaneSDF );\n    \n\tfragColor = vec4( color, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Trails\n\nconst float AIRPLANE_NUM\t= 12.0;\n\nfloat Rand( float a, float b )\n{\n    vec3 p3 = fract( vec3( a, b, a ) * 0.1031 );\n    p3 += dot( p3, p3.yzx + 19.19 );\n    return fract( ( p3.x + p3.y ) * p3.z );\n}\n\nfloat saturate( float x )\n{\n    return clamp( x, 0.0, 1.0 );\n}\n\nfloat FBM( vec2 uv )\n{\n    float ret = 0.0;\n    \n    uv *= 0.2;\n    float w = 0.5;\n    float s = 2.0;\n    ret += w * \t\t\ttexture( iChannel1, uv ).x;\n    ret += w * w * \t\ttexture( iChannel1, uv * s ).x;\n    ret += w * w * w * \ttexture( iChannel1, uv * s * s ).x;\n    return ret;\n}\n\nvoid Airplane( float id, out vec2 pos, out vec2 dir, out float scale )\n{\n    float cell = floor( iTime * 0.1 + fract( ( id * 2.0 ) / AIRPLANE_NUM ) );\n    float time = iTime * 0.1 + fract( ( id * 2.0 ) / AIRPLANE_NUM ) - cell;\n    cell += id * 1.13;\n    \n    vec2 start  = vec2( Rand( cell, id ) * 1000.0, Rand( cell + 1.0, id + 2.0 ) * 1000.0 );\n    float edge = Rand( cell + 7.0, id + 3.0 );\n    if ( edge < 0.25 )\n    {\n    \tstart.x = 0.0;\n\t}\n    else if ( edge < 0.5 )\n    {\n        start.x = 1000.0;\n    }\n    else if ( edge < 0.75 )\n    {\n        start.y = 0.0;\n    }\n    else\n    {\n        start.y = 1000.0;\n    }    \n    \n    vec2 target = vec2( 300.0 + Rand( cell, id ) * 400.0, 150.0 + Rand( cell + 1.0, id + 2.0 ) * 300.0 );\n    \n    dir\t\t= normalize( target - start );\n    scale \t= floor( id / 3.0 ) + 2.0;\n    pos \t= start + time * dir * ( 6000.0 / scale );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p;\n    p.x = ( fragCoord.x / iResolution.x ) * 1000.0;\n    p.y = ( fragCoord.y / iResolution.y ) * 1000.0 * ( iResolution.y / iResolution.x );    \n    \n    vec4 color = texture( iChannel0, uv );\n    if ( iFrame == 0 )\n    {\n        color = vec4( 0.0 );      \n    }\n\n    for ( float iAirplane = 0.0; iAirplane < AIRPLANE_NUM; ++iAirplane )\n    {\n        vec2 pos;\n        vec2 dir;\n        float scale;\n        Airplane( iAirplane, pos, dir, scale );        \n        \n        float dist = length( p - pos + 10.0 * cos( iTime * 8.0 ) * normalize( vec2( dir.y, -dir.x ) ) / scale );\n \t\tcolor += vec4( FBM( uv + iAirplane / AIRPLANE_NUM ) * saturate( ( 50.0 - dist * scale ) * 0.01 ) ) * 0.12;\n    }\n    \n    // dissolve\n    color.x *= pow( 0.99, iTimeDelta * 10.0 );\n    \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}