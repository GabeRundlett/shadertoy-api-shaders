{
    "Shader": {
        "info": {
            "date": "1437848807",
            "description": "Example of http://patriciogonzalezvivo.com/2015/thebookofshaders/10/",
            "flags": 0,
            "hasliked": 0,
            "id": "XlXSz2",
            "likes": 24,
            "name": "Digits",
            "published": 3,
            "tags": [
                "random",
                "numbers",
                "serial"
            ],
            "usePreview": 0,
            "username": "patriciogv",
            "viewed": 1774
        },
        "renderpass": [
            {
                "code": "// Copyright Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/\n// I am the sole copyright owner of this Work.\n//\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n\nfloat random(in float x){ return fract(sin(x)*43758.5453); }\nfloat random(in vec2 st){ return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nfloat bin(vec2 ipos, float n){\n    float remain = mod(n,33554432.);\n    for(float i = 0.0; i < 25.0; i++){\n        if ( floor(i/3.) == ipos.y && mod(i,3.) == ipos.x ) {\n            return step(1.0,mod(remain,2.));\n        }\n        remain = ceil(remain/2.);\n    }\n    return 0.0;\n}\n\nfloat char(vec2 st, float n){\n    st.x = st.x*2.-0.5;\n    st.y = st.y*1.2-0.1;\n\n    vec2 grid = vec2(3.,5.);\n\n    vec2 ipos = floor(st*grid);\n    vec2 fpos = fract(st*grid);\n\n    n = floor(mod(n,10.));\n    float digit = 0.0;\n    if (n < 1. ) { digit = 31600.; } \n    else if (n < 2. ) { digit = 9363.0; } \n    else if (n < 3. ) { digit = 31184.0; } \n    else if (n < 4. ) { digit = 31208.0; } \n    else if (n < 5. ) { digit = 23525.0; } \n    else if (n < 6. ) { digit = 29672.0; } \n    else if (n < 7. ) { digit = 29680.0; } \n    else if (n < 8. ) { digit = 31013.0; } \n    else if (n < 9. ) { digit = 31728.0; } \n    else if (n < 10. ) { digit = 31717.0; }\n    float pct = bin(ipos, digit);\n\n    vec2 borders = vec2(1.);\n    // borders *= step(0.01,fpos.x) * step(0.01,fpos.y);   // inner\n    borders *= step(0.0,st)*step(0.0,1.-st);            // outer\n\n    return step(.5,1.0-pct) * borders.x * borders.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 st = fragCoord.xy / iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    float rows = 24.0;\n    vec2 ipos = floor(st*rows);\n    vec2 fpos = fract(st*rows);\n\n    ipos += vec2(0.,floor(iTime*20.*random(ipos.x+1.)));\n    float pct = random(ipos);\n    vec3 color = vec3(char(fpos,321.*pct));\n    color = mix(color,vec3(color.r,0.,0.),step(.99,pct));\n\n    fragColor = vec4( color , 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}