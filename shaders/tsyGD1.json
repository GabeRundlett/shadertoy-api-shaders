{
    "Shader": {
        "info": {
            "date": "1570127583",
            "description": "Inktober shader #2\nUse the mouse to draw.",
            "flags": 32,
            "hasliked": 0,
            "id": "tsyGD1",
            "likes": 11,
            "name": "Rainbow Watercolor Pad",
            "published": 3,
            "tags": [
                "ink",
                "watercolor",
                "inktober"
            ],
            "usePreview": 0,
            "username": "ivansafrin",
            "viewed": 938
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor =  1.0-texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BRUSH_SIZE 30.0\n#define STROKE_LENGTH 800.0\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture(image, uv) * 0.1964825501511404;\n  color += texture(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord/iResolution.xy;   \n\n    float brushStrength = texture(iChannel0, vec2(0.5, 0.0)).a;\n    \n    vec4 col = texture(iChannel0, uv); \n    \n    vec4 blurCol = (blur13(iChannel0, uv, iResolution.xy, vec2(5.0, 0.0))\n       +  blur13(iChannel0, uv, iResolution.xy, vec2(0.0, 5.0))) / 2.0;\n    \n    col.xyz = mix(col.xyz, blurCol.xyz, 0.01);\n    \n\tvec2 oldBrushPos = vec2(texture(iChannel0, vec2(0.0, 0.5)).a,\n                                texture(iChannel0, vec2(0.9999, 0.5)).a);\n    \n\tvec2 dirVec = normalize(iMouse.xy -  oldBrushPos);\n\tdirVec = vec2(dirVec.y, -dirVec.x);\n\tfloat vd = dot(fragCoord, dirVec);\n    \n    vec4 brushColor = vec4(vec3((hsv2rgb(vec3(brushStrength, 1.0, 1.0)))), 1.0);    \n\tfloat brushStregthRamp = clamp(sin(brushStrength*3.1415926), 0.0, 1.0);\n    \n    for(int i=0; i < 20; i++) {\n        vec2 mPos = mix(iMouse.xy, oldBrushPos, float(i)/20.0);\n    \tfloat d = 1.0 - smoothstep(0.0, 1.0, distance(fragCoord, mPos) / BRUSH_SIZE / brushStregthRamp);\n        d *= smoothstep(0.2, 1.0, (noise(fragCoord-mPos)+0.75)/5.0) * 10.0;               \n        float bd = 1.0 - smoothstep(0.0, 1.0, distance(fragCoord, mPos) / BRUSH_SIZE / brushStregthRamp / 1.5);\n        bd *= smoothstep(0.1, 1.0, (noise(vec2(brushStrength * 20.0, 0.0) + (fragCoord-mPos)/2.0)+0.0)/5.0) * 10.0;               \n        col = mix(col, brushColor, d + bd);\n    }\n    \n    brushStrength -= distance(iMouse.xy, oldBrushPos) / STROKE_LENGTH;\n    float oldMouseClick = texture(iChannel0, vec2(0.5, 0.9999)).a;\n    if(iMouse.z != oldMouseClick) {\n        if(oldMouseClick > 0.0) {\n    \t\tbrushStrength = 1.0;\n        } else {\n            brushStrength = 0.0;\n        }\n    }\n    brushStrength = clamp(brushStrength, 0.0, 1.0);\n    \n   vec4 oldMouseXCol = vec4(col.xyz, iMouse.x);\n    vec4 oldMouseYCol = vec4(col.xyz, iMouse.y);\n    vec4 brushStrengthCol = vec4(col.xyz, brushStrength);\n    vec4 mouseClickCol = vec4(col.xyz, iMouse.z);\n    \n    col = mix(oldMouseXCol, col, smoothstep(1.0, 2.0, fragCoord.x));\n    col = mix(col, oldMouseYCol, smoothstep(iResolution.x-2.0, iResolution.x, fragCoord.x));\n\tcol = mix(brushStrengthCol, col, smoothstep(1.0, 2.0, fragCoord.y));\n    col = mix(col, mouseClickCol, smoothstep(iResolution.y-2.0, iResolution.y, fragCoord.y));\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}