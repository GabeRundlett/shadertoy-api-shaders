{
    "Shader": {
        "info": {
            "date": "1661874837",
            "description": "do you see something else than plain white ?\nIf yes, please tell your GPU and OS ! \n\nSee code header for problem description.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlGyz3",
            "likes": 0,
            "name": "roundEven",
            "published": 3,
            "tags": [
                "test",
                "glsl"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// Indeed, the page https://registry.khronos.org/OpenGL-Refpages/gl4/html/roundEven.xhtml\n// is confusing, or even wrong.\n// A way clearer definition is there: https://blogs.sas.com/content/iml/2019/11/11/round-to-even.html\n// In short: roundEven = round  BUT for integer+0.5 . Then, parity decide. Purpose: avoid statistical bias.\n\n// still, at least on OpenGL+nVIDIA roundEven doesn't seem to work. [EDIT]: wrong: it's round that always do roundEven !\n// But it is indeed let implementation choice: https://registry.khronos.org/OpenGL-Refpages/gl4/html/round.xhtml\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (U.y > iResolution.y/2.) U = floor(U);   // then, roundEven(U) == round(U) is expected.\n                                                // but not in the other case ( bottom window ).\n    O = vec4( roundEven(U) == round(U) );\n // O = vec4( round(U) == floor(U+.5) );        // indeed, the anomaly is round, not roundEven\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}