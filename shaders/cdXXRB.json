{
    "Shader": {
        "info": {
            "date": "1669092666",
            "description": "A mosaic pattern made of square tiles.",
            "flags": 8,
            "hasliked": 0,
            "id": "cdXXRB",
            "likes": 7,
            "name": "Square tile mosaic",
            "published": 3,
            "tags": [
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec2 uv = (fragCoord)/iResolution.y*4.;\n    uv.y += iTime;\n    vec3 col = vec3(0);\n    vec2 offset = vec2(0.),\n    uv1 = uv;\n    for(int k = 0; k < 4; k++){\n        uv =\n            abs(fract(uv.yx+floor(uv1.y+floor(uv.y))/8.)-.5)\n            //abs(fract(uv.yx+floor(uv1.y+floor(uv.y*8.)/8.)/8.)-.5)\n            //abs(fract(uv.yx+sign(uv.y-uv.x)*floor(uv1.y+floor(uv.y))/8.)-.5)\n        ;\n        if(uv.y < uv.x) col =\n            //vec3(col.yz,abs(min(uv.x,uv.y)))\n            vec3(col.yz,abs(max(uv.x,uv.y)))\n        ;\n    }\n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvec2 mainSound(int samp, float time){\n //time /= 1.5;\n float s1 =\n      8.;\n  \n  time += floor(time*s1)/s1;\n  \n  float s2 = 8.,\n  m4 =\n      sqmod(floor(time*s1)/s1,2.)\n  ,\n  t=\n      time/(1.+m4)\n  ,\n  m1 =\n      sqmod(floor(t*s1)/s1,s2)\n      //fmod(floor(t/(1.+m4))*floor(t*s1),s2)\n      //fmod(floor(t/s1)*(floor(t*s1)+floor(t)),s2)\n  ,\n  m3 =\n      sqmod(floor(t*s1+m1),s2);\n      //sqmod(floor(t*s1*abs(5.-floor(m4))*2.+m1),s2);\n  t /=\n      (1.+sqmod(t/s1,2.))\n      //(1.+fmod(t/(1.+m1),2.))\n  ;\n  t *=\n      s1*s1\n  ;\n\n    float m2 =\n      1. + sqmod(t/s1,s1)\n  ;\n  \n  float a = 64.*sqrt((1.-sqrt(max(fract(t/s1/s1),fract(t/s1)))))*.2,\n\n  nb = time*pow(2.,(m3+m2)/5.+6.5);\n\n  return\n      abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)/4.,y*y)/y)\n//#define sqmod(a, b) mod(mod(floor((a)),floor(1.+(a)/5.)),b)\n#define floor1(x) floor(x)*floor(mod((x)/4.,2.))\n#define floor2(x) floor(x)*pow(floor(mod((x)/4.,3.)),2.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}