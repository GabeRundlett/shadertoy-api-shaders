{
    "Shader": {
        "info": {
            "date": "1702333826",
            "description": "another basic ui element for whatever you want\n",
            "flags": 32,
            "hasliked": 0,
            "id": "DtVBz3",
            "likes": 4,
            "name": "simple toggle",
            "published": 3,
            "tags": [
                "mouse",
                "sdf",
                "input"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //make sure your mouse coordinates in buffer A are in uv coords\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/iResolution.y;\n    float pxunit = 1.0/iResolution.y; //the size of a pixel for blending\n\n    //position of handle\n    bool toggled = texelFetch(iChannel0, ivec2(0,0), 0).x > 0.0;\n    vec2 p = toggled ? vec2(-toggleRadius,0) : vec2(toggleRadius,0);\n    \n    vec3 col = mix(vec3(0.8),vec3(1),float(abs(mod(uv.x,0.1) - mod(uv.y,0.1)) > 0.05));\n    float innerdist = toggleRadius - sdLine(vec2(-toggleRadius,0), vec2(toggleRadius,0), uv);\n    float handledist = toggleRadius - distance(uv,p);\n    col = mix(col, toggled ? vec3(0.7) : vec3(0.9), smoothstep(0.0, pxunit, innerdist)); //slider background\n    col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(innerdist))); //slider border\n    col = mix(col, vec3(1), smoothstep(0.0, pxunit, handledist)); //handle\n    col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(handledist))); //handle border\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = vec4(0);\n    if (floor(fragCoord) == vec2(0,0)){\n        bool toggled = texelFetch(iChannel0,ivec2(0,0),0).x > 0.0;\n        vec2 mc = uv_transform(abs(iMouse.zw),iResolution.xy);\n        if (iMouse.w >= 0.0 && sdLine(vec2(-toggleRadius,0), vec2(toggleRadius,0), mc) < toggleRadius){\n            toggled = !toggled;\n        }\n        \n        data = vec4(toggled,0,0,0);\n    }\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float toggleRadius = 0.1;\n\nvec2 uv_transform(vec2 uv, vec2 res){\n    return (uv - res/2.0)/res.y;\n}\n\nvec2 pointOnLine(vec2 a, vec2 b, vec2 p){\n    vec2 ab = b - a;\n    return a + clamp(dot(p - a, ab)/dot(ab, ab),0.0,1.0)*ab;\n}\n\nfloat sdLine(vec2 a, vec2 b, vec2 p){\n    return distance(p,pointOnLine(a,b,p));\n}\n\n#define PI 3.14159",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}