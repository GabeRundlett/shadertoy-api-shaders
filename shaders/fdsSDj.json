{
    "Shader": {
        "info": {
            "date": "1619297161",
            "description": "Cool effect.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdsSDj",
            "likes": 8,
            "name": "Diamond Bokeh",
            "published": 3,
            "tags": [
                "imageprocessing",
                "bokeh",
                "effect",
                "diamond"
            ],
            "usePreview": 1,
            "username": "oneshade",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "vec4 fetch(in sampler2D channel, in vec2 xy) {\n    return texture(channel, xy / iResolution.xy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = fetch(iChannel0, fragCoord);\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if (i == 0 && j == 0) continue;\n            vec3 neighbor = fetch(iChannel0, fragCoord + vec2(i, j)).rgb / length(vec2(i, j));\n            if (length(neighbor) > length(fragColor.rgb)) fragColor.rgb = neighbor;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 fetch(in sampler2D channel, in vec2 xy) {\n    return texture(channel, xy / iResolution.xy);\n}\n\nvec2 Hash12(in float t) {\n\tvec3 p3 = fract(t * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n// vec4(position, orientation)\nvec4 getCamera(in float t) {\n    float id = floor(t), local = fract(t);\n    vec2 a = Hash12(id), b = Hash12(id + 1.0), c = Hash12(id + 2.0);\n    vec2 mid1 = 0.5 * (a + b), mid2 = 0.5 * (b + c);\n\n    float tInv = 1.0 - local;\n    vec2 pos = mid1 * tInv * tInv + 2.0 * b * tInv * local + mid2 * local * local;\n    vec2 dir = normalize(mid1 * (local - 1.0) + (1.0 - 2.0 * local) * b + mid2 * local);\n\n    return vec4(pos, dir);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec2 oUv = uv;\n\n    vec4 camera = getCamera(iTime * 0.25);\n\n    vec2 pos = camera.xy * 5.0 - 2.5;\n    uv -= pos;\n\n    vec2 face = camera.zw;\n    uv *= mat2(face.yx, -face.x, face.y);\n\n    fragColor = fetch(iChannel0, uv * iResolution.y + center);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 fetch(in sampler2D channel, in vec2 xy) {\n    return texture(channel, xy / iResolution.xy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = fetch(iChannel0, fragCoord);\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if (i == 0 && j == 0) continue;\n            vec3 neighbor = fetch(iChannel0, fragCoord + vec2(i, j)).rgb / length(vec2(i, j));\n            if (length(neighbor) > length(fragColor.rgb)) fragColor.rgb = neighbor;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 fetch(in sampler2D channel, in vec2 xy) {\n    return texture(channel, xy / iResolution.xy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = fetch(iChannel0, fragCoord);\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if (i == 0 && j == 0) continue;\n            vec3 neighbor = fetch(iChannel0, fragCoord + vec2(i, j)).rgb / length(vec2(i, j));\n            if (length(neighbor) > length(fragColor.rgb)) fragColor.rgb = neighbor;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 fetch(in sampler2D channel, in vec2 xy) {\n    return texture(channel, xy / iResolution.xy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = fetch(iChannel0, fragCoord);\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if (i == 0 && j == 0) continue;\n            vec3 neighbor = fetch(iChannel0, fragCoord + vec2(i, j)).rgb / length(vec2(i, j));\n            if (length(neighbor) > length(fragColor.rgb)) fragColor.rgb = neighbor;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}