{
    "Shader": {
        "info": {
            "date": "1507533079",
            "description": "fork of \nhttps://www.shadertoy.com/view/Xdf3zB\nimproved intersectSphere()",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml2cR1",
            "likes": 5,
            "name": "Equi-Angular Samples",
            "published": 3,
            "tags": [
                "raymarching",
                "media",
                "homogenous",
                "equiangular"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 876
        },
        "renderpass": [
            {
                "code": "//ad 3d crepuscular brdf equiangular sampling\n//self  : https://www.shadertoy.com/view/Ml2cR1\n//parent: https://www.shadertoy.com/view/Xdf3zB\n\n// Implementation of equi-angular sampling for raymarching through homogenous media\n// 2013 @sjb3d\n\n#define pi\t\t\t\tacos(-1.)\n#define SIGMA\t\t\t.3\n//this does not count as mutable for loops in old opengl versions?:\n#define iterOcclusion\t(16.*iMouse.y/iResolution.y)\n//todo, try less iterations in peripheral_screenspace fragments.\n//#define iterOcclusion\t(16.)\n#define DIST_MAX\t\t10.\n#define LIGHT_POWER\t\t12.\n#define SURFACE_ALBEDO\t.7\n#define EPS\t\t\t\t.01\n\nfloat hash(float n){return fract(sin(n)*43758.5453123);}\nvoid sampleCamera(vec2 U, vec2 u, out vec3 o, out vec3 t){\n;vec2 filmUv=(U.xy+u)/iResolution.xy\n;float tx=(2.*filmUv.x - 1.0)*(iResolution.x/iResolution.y)\n;float ty=(1.-2.*filmUv.y)\n;float tz=.0\n;o=vec3(0,0,5)\n;t=normalize(vec3(tx,ty,tz)-o);\n}\n\n#define dd(a) dot(a,a)\n\n//return shortest ray-sphere intersection distance and normal.\n//[u]=rayOrigin-sphereCenter\n//[t]=rayDirection\n//[r]=sphereRadius\n//[d]=distance of intersection\n//[n]=normal   of intersection\nvoid intersectSphere(vec3 u,vec3 t,float r,inout float d,inout vec3 n){\n;float a=dd(t),b=2.*dot(u,t),e=dd(u)-r*r,q=b*b-4.*a*e\n;if(q>.0){\n ;float e=.5/a,p=d*.5;vec2 k=vec2(-1,1)*abs(sqrt(q)*e)-b*e\n ;bvec2 a=lessThan(abs(k-p),vec2(p))\n ;     if(a.x)d=k.x\n ;else if(a.y)d=t.y//there are 3 different cases here!!!\n ;if(a.x)n=normalize(u+t*d)\n;}}\n\nvoid intersectScene(vec3 o,vec3 t,inout float r,inout vec3 n){    \n;intersectSphere(o-vec3( .5, .5,.3),t,.3,r,n)\n;intersectSphere(o-vec3( .5,-.5,.3),t,.2,r,n)\n;intersectSphere(o-vec3(-.5, .5,.3),t,.2,r,n)\n;intersectSphere(o-vec3(-.5,-.5,.3),t,.3,r,n)\n;}\n\n\n//[j](i+offset)/iterOcclusion\n//[m]maxDistance\n//[d]accumulator distance \n//[p]accumulator pdf\nvoid sampleScattering(float j,float m,out float d,out float p){\n;float minU=exp(-SIGMA*m) //exp remap u for finite max distance\n;float a=j*(1.-minU)+minU\n;d=-log(a)/SIGMA// sample with pdf proportional to exp(-sig*d)\n;p=SIGMA*a/(1.-minU);}//https://www.shadertoy.com/view/Xdf3zB\n\n//[j](i+offset)/iterOcclusion\n//[m]maxDistance\n//[d]accumulator distance\n//[p]accumulator pdf\n//[u]RayOrigin\n//[t]RayDir\n//[s]LightPos\nvoid sampleEquiAngular(float j,float m,out float d,out float p,vec3 u,vec3 t,vec3 s){\n;float c=dot(s-u,t)//get \"closest point to light along ray\"\n,g=length(u+c*t-s)//distance of [c] to light\n;vec2 h=(vec2(atan(-c/g),atan((m-c)/g)))//get angles of endpoints\n;float e=g*tan(mix(h.x,h.y,j))// get sample\n//looks like slerp(), could be simpler?\n// mixes 2 angles, doing tan(atan()), this must be simpler!\n//looks like a bad coordinate system to do this.\n// possibly convert to polar with vec3(0) at light source!\n;d=c+e\n;p=g/((h.y-h.x)*(g*g+e*e));\n}//https://www.shadertoy.com/view/Xdf3zB\n//[point light case of \"Importance Sampling Techniques for Path Tracing in Participating Media\" by Kulla and Fajardo.]\n\nvoid mainImage( out vec4 o, in vec2 u ){\n;vec3 lightPos=vec3(.8*sin(iTime*7./4.),.8*sin(iTime*5./4.),0)\n;vec3 lightIntensity=vec3(LIGHT_POWER)\n;vec3 surfIntensity =vec3(SURFACE_ALBEDO/pi)\n;vec3 particleIntensity=vec3(1./(4.*pi))\n;vec3 rayOrigin, rayDir\n;sampleCamera(u,vec2(.5),rayOrigin,rayDir)\n;float splitCoord=(iMouse.x==.0)?iResolution.x*.5:iMouse.x;\n;float a=DIST_MAX//diminishing accumulator\n;vec3 n\n;intersectScene(rayOrigin,rayDir,a,n)\n;vec3 surfPos = rayOrigin+a*rayDir\n;vec3 lightVec=lightPos-surfPos\n;vec3 lightDir=normalize(lightVec)\n;vec3 cameraDir=-rayDir    \n    //todo, make subroutine here, must be more optional:\n    //to make it easier to add more lights    \n//BRDF starts around here:\n;float nDotL=dot(n,lightDir)\n;float nDotC=dot(n,cameraDir)\n;if (nDotL*nDotC >.0){;//if(entry and exit are same hemisphere)BRDF\n ;float d=length(lightVec)\n ;float d2=d\n ;vec3 n2\n ;vec3 rayDir = normalize(lightVec)\n ;intersectScene(surfPos + EPS*rayDir, rayDir, d2, n2)\n ;if(d2==d){;//if (not occluded) specularity\n  ;float t=exp(-SIGMA*(d+a))/dot(lightVec,lightVec)\n  ;o.xyz = surfIntensity*lightIntensity*t*abs(nDotL)\n;}}\n;float offset = hash(u.y*iResolution.x + u.x + iTime)\n;for(float i=.0;i<iterOcclusion;++i){;\n ;float v=(i+offset)/iterOcclusion\n ;float x,pdf\n ;if(u.x < splitCoord)sampleScattering (v,a,x,pdf)\n ;else                sampleEquiAngular(v,a,x,pdf,rayOrigin,rayDir,lightPos)\n ;pdf *=iterOcclusion;// adjust for number of ray samples\n // connect to light and check shadow ray\n ;vec3 particlePos=rayOrigin+x*rayDir,lightVec=lightPos-particlePos\n ;float d = length(lightVec),d2=d\n ;vec3 dummy//todo intersectScene without dummy, barely worth it.\n ;intersectScene(particlePos, normalize(lightVec),d2,dummy)\n;if (d2==d){//if (not occluded) crepuscularity\n  ;float t=exp(-SIGMA*(d+x))/dot(lightVec,lightVec)\n  ;o.xyz+=SIGMA*particleIntensity*lightIntensity*t/pdf\n ;}\n;}\n;if (abs(u.x - splitCoord)<1.)o.x = 1.0;// show slider position\n//i improved this one, than reverted it due to an error elsewere\n;o.xyz=pow(o.xyz, vec3(.45));//gamma\n; o.w=1.;\n}\n\n//u,maxDistance,dist,pdf\n//void sampleUniform(float u,float m,out float d,out float p\n//){d=u*m;p=1./m;}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}