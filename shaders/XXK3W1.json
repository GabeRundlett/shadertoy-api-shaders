{
    "Shader": {
        "info": {
            "date": "1717602403",
            "description": "we have explosives!",
            "flags": 0,
            "hasliked": 0,
            "id": "XXK3W1",
            "likes": 4,
            "name": "Demomaking never dies",
            "published": 3,
            "tags": [
                "demomakingsdf"
            ],
            "usePreview": 0,
            "username": "skal",
            "viewed": 111
        },
        "renderpass": [
            {
                "code": "//\n// Continuous inversions in the complex plane\n//\n////////////////////////////////////////////////////////////////////////\n\n// see https://www.shadertoy.com/view/4djSRW\nvec2 hash2(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * vec3(.1021, .1013, .0977));\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec2 fbm(vec2 p) {\n  float amp = .5;\n  vec2 v = vec2(0.);\n  for (float i = 0.; i < 3.; ++i) {\n    v += hash2(p) * amp;\n    p *= 2.;\n    amp /= 2.;\n  }\n  return v;\n}\n\nvec2 noise2(vec2 p) {\n  vec2 u = vec2(1., 0);\n  vec2 e = fract(p);\n  p = floor(p);\n  e = e * e * (3. - 2. * e);\n  vec2 a = fbm(p       ), b = fbm(p + u.xy);\n  vec2 c = fbm(p + u.yx), d = fbm(p + u.xx);\n  vec2 A = mix(a, b, e.x);\n  vec2 B = mix(c, d, e.x);\n  return mix(A, B, e.y);\n}\n\n\n////////////////////////////////////////////////////////////////////////\n\nfloat radian(float d) { return 3.1415926535 * d / 180.; }\nfloat grad(vec2 uv, float a) {\n  uv = normalize(uv);\n  vec2 dir = vec2(cos(a), sin(a));\n  float d = uv.x * dir.y - uv.y * dir.x;\n  return smoothstep(.1, .0, d);\n}\n\nfloat plateau(float t) {\n  float duration = 2.;\n  t = mod(t, 3. * duration);\n  return clamp(t, 0., 1.) - clamp(t - duration, 0., 1.);\n}\nfloat grid(vec2 uv) {\n  float t = iTime * 0.8;\n  uv = fract(abs(uv * vec2(8., 5.)));\n  vec2 uv2 = 2. * uv - 1.;\n  float a = smoothstep(.05, .00, min(uv.x, uv.y));\n  float b = smoothstep(.95, 1.00, length(uv2));\n  float d_angle = 10. * abs(fract(t / 6.));\n  float c = grad(abs(uv2), radian(43. - d_angle)) + grad(-abs(uv2), radian(47. + d_angle)) - 1.;\n  float ta = plateau(t - 0.);\n  float tb = plateau(t - 2.);\n  float tc = plateau(t - 4.);\n  return ta * a + tb * b + tc * c;\n}\n  \n// z' = C + A / (z - C) in complex plane\nvec2 inversion(vec2 xy, vec2 C, float A) {\n  xy -= C;\n  float d = A / (1e-1 + dot(xy, xy));\n  return C + vec2(xy.x, -xy.y) * d;\n}\n\n////////////////////////////////////////////////////////////////////////\n\nfloat box2d(vec2 p, vec2 d, float e) {\n  p = abs(p) - d + e;\n  return length(max(p, 0.)) + min(max(p.x, p.y), 0.) - e;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat rounded_box2d(vec2 p, vec2 b, vec4 r) {\n  r.xy = (p.x > 0.0) ? r.xy : r.zw;\n  r.x  = (p.y > 0.0) ? r.x  : r.y;\n  vec2 q = abs(p) - b + r.x;\n  return min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - r.x;\n}\n\nmat2x2 rot(float a) { return mat2x2(cos(a), sin(a), -sin(a), cos(a)); }\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec3 p, vec3 b) {\n  p = abs(p) - b;\n  return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat boxf(vec3 p, vec3 b, float e) {  // iq's Frame Box, https://www.shadertoy.com/view/3ljcRh\n       p = abs(p  ) - b;\n  vec3 q = abs(p+e) - e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0)) + min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0)) + min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0)) + min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n// by IQ. https://www.shadertoy.com/view/3tSGDy\n// signed distance to a n-star polygon with external angle en\nfloat star_2d(vec2 p, float r, float n, float m /*[0,1]*/) {\n  // these 4 lines can be precomputed for a given shape\n  float an = 3.1415926 / n;\n  float en = 3.1415926 / (2. + m * n);\n  vec2  acs = vec2(cos(an), sin(an));\n  vec2  ecs = vec2(cos(en), sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n  p.x = abs(p.x);\n    \n  // reduce to first sector\n  float bn = mod(atan(p.x,p.y), 2.0 * an) - an;\n  p = length(p) * vec2(cos(bn), abs(sin(bn)));\n\n  // line sdf\n  p -= r * acs;\n  p += ecs * clamp(-dot(p,ecs), 0.0, r * acs.y / ecs.y);\n  return length(p) * sign(p.x);\n}\n\n// inspired from mrange's https://www.shadertoy.com/view/mtVSDy\nfloat min_d = 1e3;\nfloat Cube(vec3 pos) {\n  float d0 = box( pos, vec3(3.0));\n  float d1 = boxf(pos, vec3(3.01), 0.0) - 0.01;\n\n//  float d = max(d0, -(d1-0.03));\n  float d = min(d0, d1);\n  min_d = min(min_d, d1);\n  return d;\n}\n\nconst float MAX_DIST = 1e3;\nconst float MAX_ITER = 100.;\nconst float EPS = 1e-3;\n\nfloat RayMarch(vec3 ro, vec3 dir) {\n  float d = 0.;\n  min_d = 1E3;\n  for (float i = 0.; i < MAX_ITER; i += 1.) {\n    float t = Cube(ro + d * dir);\n    if (t < EPS) break;\n    d += t;\n    if (d > MAX_DIST) { return MAX_DIST; }\n  }\n  return d;\n}\n\nvec3 Normal(vec3 p) {\n  const vec2 e = vec2(1., -1.) * EPS;\n  return normalize(e.xyy * Cube(p + e.xyy) \n                 + e.yxy * Cube(p + e.yxy)\n                 + e.yyx * Cube(p + e.yyx)\n                 + e.xxx * Cube(p + e.xxx));\n}\n\nvec4 Title(vec2 uv) {\n  vec4 col = vec4(0.);\n  float d = -box2d(uv, vec2(.7, .25), .08);\n  if (d >= 0.) {\n    col = mix(col, vec4(.0, .0, .0, 1.), step(.01, d));\n    col = mix(col, vec4(.1, .5, .6, .8), step(.03, d));\n    col = mix(col, vec4(.5, .5, .6, .8), step(.05, abs(uv.y/5.)));\n  }\n  return col;\n}\n\nfloat LetterB(vec2 P0) {\n  float B0 = max(rounded_box2d(P0 - vec2(-.02,  .14), vec2(.20, .12), vec4(.13, .08, .02, .01)),\n                -rounded_box2d(P0 - vec2(-.02,  .14), vec2(.09, .04), vec4(.05, .03, .005, .005)));\n  float B1 = max(rounded_box2d(P0 - vec2( .03, -.08), vec2(.25, .15), vec4(.15, .1, .02, .01)),\n                -rounded_box2d(P0 - vec2( .01, -.03), vec2(.11, .05), vec4(.05, .03, .005, .005)));\n  return min(B0, B1);\n}\n\nvec4 Logo(vec2 uv) {\n  vec2 P0 = mat2x2(1., -.1, 0., 0.9) * uv - vec2(-0.65, 0.2 + .02 * sin(iTime * 1.3));\n  vec4 col = vec4(0.);\n  float B = LetterB(P0);\n\n  vec2 P1 = uv - vec2(-0.2, 0.1 + .04 * sin(iTime * 1.3 + .32));\n  float B2 = max(rounded_box2d(P1, vec2(.2, .2), vec4(.2, .2, .2, .2)),\n                -rounded_box2d(P1, vec2(.1, .1), vec4(.1, .1, .1, .1)));\n  B = min(B, B2);\n\n  vec2 P2 = uv - vec2(0.1, 0.1 + .04 * sin(iTime * 1.3 + 1.52));\n  vec2 P3 = P2 - vec2(0.12, 0.); \n  float B3 = max(rounded_box2d(P2,                   vec2(.15, .2),  vec4(.1, .2, .1, .1)),\n                -rounded_box2d(P2 + vec2(-.05, .05), vec2(.02, .15), vec4(.05, .0, .0, .1)));\n  float B4 = max(rounded_box2d(P3,                 vec2(.15, .2),  vec4(.1, .2, .2, .2)),\n                -rounded_box2d(P3 + vec2(0., .05), vec2(.1, .15), vec4(.1, .15, 0., .1)));\n  B = min(B, min(B3, B4));\n\n  if (B < .0) {\n    col = mix(vec4(0., 0., 0., 0.9), vec4(.3, .7, .9, 1.), smoothstep(0.0, 0.02, -B));\n    col = mix(col, vec4(.3, .4, .7, 1.), smoothstep(0.01, 0.06, -B));\n  }\n  return col;\n}\n\nvec3 Camera(vec2 uv, vec3 pos, float fov_angle) {\n  vec3 up = vec3(0., 1., 0.);\n  vec3 target = vec3(0., 0., 0.);\n  vec3 fr = normalize(target - pos);\n  vec3 lr = normalize(cross(up, fr));\n  up = cross(fr, lr);\n  float fov = tan(radian(fov_angle));\n  vec3 dir = normalize(vec3(-uv.x * lr + uv.y * up + fov * fr));\n  return dir;\n}\n\nvec4 Star(vec2 uv) {\n  uv = (uv - vec2(-.6, -.2)) * vec2(1.5, 3.);\n  if (abs(uv.x) > 1. || abs(uv.y) > 1.) { return vec4(0.); }\n  float R = 7. + 5. * sin(iTime * .8);\n  float theta = iTime * .3, phi = radian(-40.);\n  vec3 pos = vec3(R, 15., 0.);\n  //pos.yz *= rot(phi);\n  pos.xz *= rot(theta);\n\n  vec3 dir = Camera(uv, pos, 35.);\n  float d = -pos.y / dir.y;\n  if (d < 0.) return vec4(0.);\n  vec2 UV = (pos + d * dir).xz / 12.;\n  float l = length(UV);\n  if (l > 1.) return vec4(0.);\n\n  float g = grid(.3 * UV);\n  vec4 col = vec4(.8, .7, .2, 1. - .5 * g);\n  col = mix(col, vec4(0.0, 0.1, 0.0, 2.), step(.9, l));\n\n  float star_d = star_2d(UV * 3., 2.3, 5., .25);\n  col = mix(vec4(.8, .9, .3, 1.), col, step(star_d, .1));\n  col = mix(vec4(.0, .0, .0, 1.), col, step(star_d, .3));\n  col = mix(vec4(.3, .3, .1, .4), col, step(star_d, .5));\n  col = mix(vec4(.0, .0, .0, 1.), col, step(l, .93));\n\n  return col;\n}\n\nvec4 DoCube(vec2 uv) {\n  uv = 2. * uv - 1.;\n  uv *= vec2(1., iResolution.y / iResolution.x);\n\n  vec2 uv2 = (uv - vec2(.6, 0.15)) * 2.3;\n  float R = 12., theta = iTime * .3, phi = radian(30.);\n  vec3 pos = vec3(R, 0., 0.);\n  pos.xz *= rot(theta);\n  pos.yz *= rot(phi);\n  vec3 dir = Camera(uv2, pos, 55.);\n\n  vec4 col = Title(uv);\n  vec4 star = Star(uv);\n  if (star.a > 0.) col = star;\n  vec4 logo = Logo(uv);\n  col = mix(col, logo, logo.a);\n  float d = RayMarch(pos, dir);\n  vec3 glow = vec3(.3, .5, .9) * pow(max(100. * min_d, 1e-6), -0.2);\n  glow = min(glow, 1. + 0.9 * sin(iTime * 1.2));\n\n  if (d < MAX_DIST) {\n    vec3 I = pos + d * dir;\n    vec3 n = Normal(I);\n    vec3 l = normalize(vec3(7., -6., -7.) - I);\n    vec3 diff = 1.5 * vec3(.2, .4, .9) * abs(dot(l, n));\n    col = vec4(diff, 1.);\n    col += vec4(glow, 0.);\n    float Bscale = .12;\n    float B = LetterB(Bscale * vec2(sign(I.z) * I.x, I.y));\n    B = min(LetterB(Bscale * vec2(sign(-I.x) * I.z, I.y)), B);\n    col = mix(col, vec4(.5, .7, .8, 1.), smoothstep(.02, -.02, B));\n    col = mix(col, vec4(.3, .5, .7, .7), smoothstep(-.02, -.05, B));\n\n  }\n  \n  return col;\n}\n\n////////////////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy;\n  float theta = iTime * 1.2;\n  vec2 offset = .5 + vec2(.3 * cos(theta), .2 * sin(theta));\n  vec2 C = noise2(uv * 3. + offset);\n  float A = length(noise2(3. * (uv - offset)));\n  float d = grid(inversion(uv, C, A));\n  vec3 col = vec3(d, d, d);\n  vec4 cube = DoCube(uv);\n  fragColor = vec4(mix(col, cube.rgb, cube.a), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}