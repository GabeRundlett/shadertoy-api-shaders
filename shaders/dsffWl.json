{
    "Shader": {
        "info": {
            "date": "1689272291",
            "description": "psychedelic raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "dsffWl",
            "likes": 29,
            "name": "Chromatic Descent [384 chars]",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "colorful",
                "space",
                "repetition",
                "psychedelic",
                "rgb",
                "code",
                "short",
                "golf",
                "golfing"
            ],
            "usePreview": 0,
            "username": "kishimisu",
            "viewed": 867
        },
        "renderpass": [
            {
                "code": "/* \"Chromatic Descent\" by @kishimisu (2023) - https://www.shadertoy.com/view/dsffWl\n   [404 => 384 chars with the help of @SnoopethDuckDuck & @coyote]\n   \n   Inspired from my upcoming youtube tutorial about raymarching\n   (probably available in september)\n   \n   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)\n*/\n\n#define r mat2(cos(.05*a + vec4(0,33,11,0))), p\n\nvoid mainImage( out vec4 O, vec2 u ) {\n    float i, t, k = iTime, \n                d = k, \n                a = k*3.;\n    vec3  f,    p = iResolution, \n                U = vec3((u + u - p.xy) * r.y);\n    \n    for ( f++, f.z = .2; i++ < 6e1 && d > t/2e2;\n        p = t * U / length(U),\n        p.zy *= r.xz *= r.z += k*.5,\n        O = .7 * (.8 + cos(length(floor(p*5.))/3. + k + .7*vec4(0,1,2,0)))/exp(t/7.)            \n    )\n        a = sin(t += d = length(max( p = abs(mod(p, f)-f*.5)-cos(t)*.04-.06 , 0.)) \n                 + min(max(p, max(p, p.z).y).x, 0.));\n}\n\n/* Original version [404 chars]:\n\n#define r(a) mat2(cos(.05*a + vec4(0,33,11,0))),\n\nvoid mainImage( out vec4 O, vec2 u ) {\n    float i, t, d = 1., k = iTime;\n    vec2 R = iResolution.xy;\n         u += u - R;\n          \n    for ( vec3 p, f = vec3(1,1,.2); i++ < 6e1 && d > t/2e2;\n        p = t * normalize(vec3(u * r(k*3.) R.y)),\n        p.zy *= r(sin(t)) \n        p.xz *= r(sin(t))\n        p.z  += k*.5,\n        O = .7 * (.8 + cos(length(floor(p*5.))/3. + k + .7*vec4(0,1,2,0)))/exp(t/7.)\n            \n    )   t += d = length(max( p = abs(mod(p, f) - f*.5) - cos(t)*.04-.06 , 0.)) \n                 + min(max(p.x, max(p.y, p.z)), 0.);\n}*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}