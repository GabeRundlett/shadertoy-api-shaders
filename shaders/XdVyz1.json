{
    "Shader": {
        "info": {
            "date": "1535462882",
            "description": "The bus appears to be red although the pixels are actually grey.\n\nAnother shadertoy inspired by @AkiyoshiKitaoka",
            "flags": 0,
            "hasliked": 0,
            "id": "XdVyz1",
            "likes": 8,
            "name": "Color Illusion",
            "published": 3,
            "tags": [
                "draft"
            ],
            "usePreview": 0,
            "username": "P_Malin",
            "viewed": 1091
        },
        "renderpass": [
            {
                "code": "// Color Illusion\n// The bus appears to be red although the pixels are actually grey.\n\n// Another shadertoy inspired by @AkiyoshiKitaoka\n\n// sRGB luminance\nconst vec3 vLuminanceCoeffs = vec3(0.2126, 0.7152, 0.0722);\n\nconst vec3 vOffset = vec3(0,1,1);\n\nvec3 FalseColor( vec3 vSource )\n{\n    float gamma = 2.2f;\n    vSource = pow( vSource, vec3(gamma) );\n    \n    vec3 vResult = vSource;\n    \n    // scale the original down a little and add in some cyan\n    // This alone produces most of the effect\n    float Strength = 0.2f;\n    vResult = vSource * (1.0f - Strength) + vOffset * Strength; \n    \n    // if strength < 0.5 some pixels where red is maximum may remain, we clamp the red here\n    vResult.x = min(vResult.r, min(vResult.g, vResult.b));\n    \n    // blend in a version that uses the new hue but matches the source luminance\n    vec3 sourceLum = vResult * dot( vSource, vLuminanceCoeffs ) / dot(vResult, vLuminanceCoeffs);\n    vResult = mix(vResult, sourceLum, 0.8);\n        \n    vResult = pow( vResult, vec3(1.0 / gamma) );\n    \n    return vResult;\n}\n\nfloat GetScale()\n{\n    float fTime = iTime * 0.25;\n    \n    fTime += 1.0;\n    \n    float s = fract( fTime );\n    float f = floor( fTime );\n    \n    switch( int(f) % 4 )\n    {\n        case 0:        \n        break;\n        \n        case 1:\n        \ts = 1.0;\n        break;\n        \n        case 2:\n        \ts = 1.0f - s;\n        break;\n        \n        default:\n        \ts = 0.0;\n       \tbreak;\n    }\n    \n    s = smoothstep( 0.0, 1.0, s );\n            \n    float fMinScale = 0.013;\n    float fMaxScale = 1.0;\n    return mix( fMinScale, fMaxScale, s );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 vUV = fragCoord/iResolution.xy;\n    \n    vec2 vCentre = vec2(0.255, 0.38);\n    \n    float fScale = GetScale();\n\n    if ( iMouse.z <= 0.0 )\n    {\n        vUV = ((vUV - vCentre) * fScale) + vCentre;\n    }\n    else\n    {\n\t\tvec2 vUV2 = ((vUV - vCentre) / fScale) + vCentre;\n        if ( any( greaterThanEqual( vUV2, vec2(1.0) ) ) || any( lessThan( vUV2, vec2(0.0) ) ) )\n        {\n\t\t    fragColor = vec4(0.0);\n            return;\n        }\n    }\n    \n    vec3 vSource = texture(iChannel0, vUV ).rgb;\n\tvec3 vResult = FalseColor( vSource );\n    \n    // detect red:\n    if ( vResult.y < vResult.x || vResult.z < vResult.x ) vResult = vec3(1,2,3)*sin(iTime * 5.0);\n    fragColor = vec4(vResult,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}