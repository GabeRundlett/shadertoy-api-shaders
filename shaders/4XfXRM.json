{
    "Shader": {
        "info": {
            "date": "1710260399",
            "description": ":3",
            "flags": 32,
            "hasliked": 0,
            "id": "4XfXRM",
            "likes": 5,
            "name": "Plasmic Resonance",
            "published": 3,
            "tags": [
                "plasma",
                "interference",
                "convolution",
                "pattern",
                "shiny",
                "purple",
                "glowing"
            ],
            "usePreview": 0,
            "username": "_90_",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 unit = 8./iResolution.xy;\n    vec4 col = texture(iChannel0,uv) * 4.0;\n    col += texture(iChannel0,uv-vec2(unit.x,0)) * 2.0;\n    col += texture(iChannel0,uv+vec2(unit.x,0)) * 2.0;\n    col += texture(iChannel0,uv-vec2(0,unit.y)) * 2.0;\n    col += texture(iChannel0,uv+vec2(0,unit.y)) * 2.0;\n    \n    float d = sqrt(2.)/2.;\n    col += texture(iChannel0,uv-vec2(unit.x*d, unit.y*d)) * 1.0;\n    col += texture(iChannel0,uv+vec2(unit.x*d, unit.y*d)) * 1.0;\n    col += texture(iChannel0,uv-vec2(unit.x*d,-unit.y*d)) * 1.0;\n    col += texture(iChannel0,uv+vec2(unit.x*d,-unit.y*d)) * 1.0;\n    \n    col /= 8.0;\n    \n    col = abs(col-texture(iChannel0,uv)*0.5);\n    fragColor = col/1000.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define freq 25.0\n#define resf 100.0\n#define decay 1.0\n#define refs 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(abs(uv.x),abs(uv.y),0);\n    float val = 0.0;\n    vec4 last = texture(iChannel0,fragCoord/iResolution.xy);\n    \n    // 0,0\n    vec2 pos = vec2(0,0);\n    float wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    // Halves\n    pos = vec2(0,1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(1,0);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(0,-1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(-1,0);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    // Corners\n    \n    pos = vec2(1,1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(-1,1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(-1,-1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(1,-1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n\n    col = vec3(0,0,max(0.0,1.0 - abs(val/0.5))) * 1000.0;\n    col += vec3(last.z,last.x,last.y) * 0.75;\n    //col = vec3(val,-val,-val);\n    //col *= float(abs(uv.x) < 1. && abs(uv.y) < 1.);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}