{
    "Shader": {
        "info": {
            "date": "1524050174",
            "description": "Eternal buggy drive through slippery grassy hills",
            "flags": 0,
            "hasliked": 0,
            "id": "ld3fzH",
            "likes": 5,
            "name": "Buggy Drive",
            "published": 3,
            "tags": [
                "3d",
                "landscape"
            ],
            "usePreview": 0,
            "username": "nightfox",
            "viewed": 917
        },
        "renderpass": [
            {
                "code": "#define NEW_SKY\n\n#define MIN_DIST .005\n#define MAX_STEPS 200\n\nfloat height(vec3 ro) {return texture(iChannel0,vec2(ro.x/100.,ro.z/100.)).x*7.;}\n\nvec2 plane(vec3 ro, vec3 pos) {\n    float h = height(ro);\n    h += texture(iChannel1,vec2(ro.x/2.,ro.z/2.)).x/4.;\n \treturn vec2(ro.y-pos.y-h, abs(sin(ro.x/2.)+cos(ro.z/2.)));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv *= 2.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float speed = 2.;\n    float zoom = 2.;\n    float angle = 0.;\n    vec3 up = vec3(sin(angle),cos(angle),0.);\n    vec3 ro = vec3(2.*sin(.2*iTime),4.1,speed*iTime);\n    ro.y = height(ro)+.3;\n    float heightFront = height(vec3(ro.x,ro.y,ro.z+.75));\n    vec3 target = vec3(4.*sin(.1+.2*iTime)/heightFront,heightFront+.5,ro.z+1.);\n    vec3 f = normalize(target-ro);\n    vec3 r = normalize(cross(up,f));\n    vec3 u = cross(f,r);\n    vec3 c = ro + f*zoom;\n    vec3 camera = c + uv.x*r + uv.y*u;\n    vec3 rd = normalize(camera-ro);\n    vec3 ray = ro;\n    \n    vec3 col = vec3(0.);\n    \n    // Sky\n    #ifdef NEW_SKY\n    float skyHeight = 200.;\n    float d = skyHeight - ro.y;\n    float numsteps = d / rd.y;\n    vec3 intersection = ro - rd*numsteps;\n    vec2 skyUv = intersection.xz * .00013;\n    vec3 skyBaseColor = vec3(0.,.6,1.);\n    \n    if (rd.y > 0.)\n        col = skyBaseColor + vec3(texture(iChannel0, skyUv).r)*vec3(1.5,0.,0.);\n    #else\n    col = vec3(0.,.6,1.)+vec3(texture(iChannel0,vec2((uv.x+camera.x*2.)/6.,uv.y+camera.y*2.)).r);\n    #endif\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec2 d = plane(ray, vec3(0.,0.,0.));\n        if (d.x < MIN_DIST) {\n          float light = .3/pow(distance(ray,ro)/5.+.1,1.6)*distance(ray,ro)*.1;\n          light += .1/pow(distance(ray,ro)+.1,2.6);\n          col = vec3(.14*light+.01,.6*light+.04,.13*light+.01)*2.;\n          break;\n        }\n        \n        ray += rd*d.x;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}