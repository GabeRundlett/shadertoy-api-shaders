{
    "Shader": {
        "info": {
            "date": "1503072448",
            "description": "experiment (my super new original noise)",
            "flags": 0,
            "hasliked": 0,
            "id": "llXyRr",
            "likes": 2,
            "name": "Cellistic Noise",
            "published": 3,
            "tags": [
                "noise",
                "rizvannernoise",
                "cellisticnoise"
            ],
            "usePreview": 0,
            "username": "rizvanner",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "float size = 2.0;\n\nfloat hash(vec2 p)\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    \n    return -1.0+2.0*fract(p.x*p.y*(p.x+p.y));\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), hash( i + vec2(1.0,0.0) ), u.x), mix( hash( i + vec2(0.0,1.0) ), hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)), dot(p,vec2(419.2,371.9)) );\n    \n\treturn fract(sin(q) * 43758.5453);\n}\n\nfloat smoothedCells( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 uv = (fragCoord.xy / iResolution.xy) * aspect;\n    \n\tuv *= size;\n    \n    const float cellsFactor = 1.0;\n\tconst float cellsSmooth = 1.0;\n    \n\tfloat f = 0.0;\n   \n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    \n\tf  = 0.5000 * smoothedCells( 10.0 * uv, 1.0 * cellsFactor, 0.9 * cellsSmooth ); uv = m * uv;\n\tf += 0.2500 * smoothedCells( 12.0 * uv, 1.0 * cellsFactor, 0.95 * cellsSmooth ); uv = m * uv;\n\tf += 0.1250 * smoothedCells( 13.0 * uv, 1.0 * cellsFactor, 0.96 * cellsSmooth ); uv = m * uv;\n\tf += 0.0625 * smoothedCells( 14.0 * uv, 1.0 * cellsFactor, 0.97 * cellsSmooth ); uv = m * uv;\n \n\tfragColor = vec4( f, f, f, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}