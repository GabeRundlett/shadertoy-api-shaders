{
    "Shader": {
        "info": {
            "date": "1498809706",
            "description": "This is a yet another Sobel operator implementation.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dlBWl",
            "likes": 11,
            "name": "Sobel operator",
            "published": 3,
            "tags": [
                "sobel",
                "edgedetection"
            ],
            "usePreview": 0,
            "username": "Zabidon",
            "viewed": 1155
        },
        "renderpass": [
            {
                "code": "// License: Do What The F**k You Want To But It's Not My Fault Public License v1 (WTFNMFPL-1.0)\n// Created by Osipov Kirill --- zabidon, KirillD503\n\n#define THRESHOLD 0.2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    mat3 sobel[2];\n    sobel[0] = mat3(\n        -1,-2,-1,\n         0, 0, 0,\n         1, 2, 1\n    );\n    sobel[1] = mat3(\n        -1, 0, 1,\n        -2, 0, 2,\n        -1, 0, 1\n    );\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 value = vec2(0);\n\n    for (int mat_id = 0; mat_id < 2; mat_id++) {\n        for (int i = 0; i < 3; i++){\n            for (int j = 0; j < 3; j++){\n              vec2 offset = vec2(i - 1, j - 1) / iResolution.xy;\n              float kernel = sobel[mat_id][i][j];\n              vec4 color = texture(iChannel0, uv + offset);\n              float luma = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n\n              value[mat_id] += luma * kernel;\n            }\n        }\n    }\n    \n    fragColor = step(THRESHOLD, length(value)) * vec4(vec3(length(value)), 1.0);\n\n    // mix+step is faster than if-else\n    //fragColor = mix(\n    //    vec4(vec3(length(value)), 1.0), \n    //    vec4(0), \n    //    step(length(value), THRESHOLD));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}