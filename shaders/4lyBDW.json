{
    "Shader": {
        "info": {
            "date": "1542479890",
            "description": "waiting the team golf :)\n\nbased on the work of wyatt and guil",
            "flags": 32,
            "hasliked": 0,
            "id": "4lyBDW",
            "likes": 23,
            "name": "Shortest Fluid Demo (267c)",
            "published": 3,
            "tags": [
                "fluid",
                "demo",
                "shortest"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 895
        },
        "renderpass": [
            {
                "code": "//\nvoid mainImage(out vec4 f, vec2 G) { mi }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\nvoid mainImage(out vec4 f, vec2 G) { mi }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// initially converted in one buffer for GlglSandbox, \n// but GlslSandbox use byte texture and he work only nice with float texture like with shadertoy\n// btw if you want to try to make it work : see http://glslsandbox.com/e#50368.4\n\n// for a normal sime we have :\n// x,y => flow speed gradient\n// z => flow pressure\n// w => flow ink\n// but for have visible color, we have transformed xyzw to zwxy, so we have :\n// x => flow pressure\n// y => flow ink\n// z,w => flow speed gradient\n\n// new Coyote improvment version at 267c :)\n#define k(a) texture(iChannel0, (a+g)/s)\n#define mi \\\n    vec2 \t\t\t\t\t\t\t\t\t\t\t\\\n        g = G, \t\t\t\t\t\t\t\t\t\t\\\n        s = iResolution.xy, \t\t\t\t\t\t\\\n        d = length(g+g-s)/s; \t\t\t\t\t\t\\\n    vec4 \t\t\t\t\t\t\t\t\t\t\t\\\n        r = k(f.wz), \t\t\t\t\t\t\t\t\\\n        t = k(f.zw), \t\t\t\t\t\t\t\t\\\n        h = k(-f.wz) - r, \t\t\t\t\t\t\t\\\n        v = k(-f.zw) - t; \t\t\t\t\t\t\t\\\n    f = iFrame < 2 ? h-h : k(-k().zw); \t\t\t\t\\\n    f.x = (r+r + t+t + h + v - (h.z+v.w)/5.).x/4.; \t\\\n    f.zw -= d.y > 1. ? f.zw : vec2(h.x,v); \t\t\t\\\n    d.y < .02 ? f.zy = s/s : s;\n        \n/* new Coyote improvment version at 278c :)\n#define k(a) texture(iChannel0, (g-a)/s)\n#define mainImage( f, G ) \\\n    vec2 \\\n        g = G, \\\n        s = iResolution.xy, \\\n        q = vec2(1,0), \\\n        d = length(g+g-s)/s; \\\n    vec4 \\\n        t = k(-q.yx), \\\n        b = k(q.yx), \\\n        h = k(q) - k(-q), \\\n        v = b - t; \\\n    f = iFrame < 2 ? t-t : k(k(0.).zw); \\\n    f.x = ( k(-q) + t + k(q) + b - (h.z+v.w)/5. ).x/4.; \\\n    f.zw -= d.y > 1. ? f.zw : vec2(h.x,v); \\\n    d.y < .02 ? f.zy = s/s : s\n/**/\n\n/* Coyote version 313c :)\n#define k(a) texture(iChannel0, (g+a)/s).zwxy\nvoid mainImage( out vec4 f, vec2 g )\n{\n\tvec2 \n        s = iResolution.xy, \n        q = vec2(1,0);\n\t\n\tvec4 \n        r = k(q),         \t\t\t//right particle state\n        t = k(q.yx),      \t\t\t//top particle state\n        l = k(-q),        \t\t\t//left particle state\n        b = k(-q.yx),     \t\t\t//bottom particle state\n        //c = k(0.),      \t\t\t//current particle state\n        h = l - r,\n        v = b - t;\n    \n\tf = k(-k(0.).xy);         \t\t//last particle state\n    \n    f.x -= h.z;           \t\t\t//particle pos affected by current pressure gradient x\n    f.y -= v.z;           \t\t\t//particle pos affected by current pressure gradient y\n    \n    f.z =                       \t//pressure\n        (r + t + l + b).z/4. -  \t//pressure diffusion\n        (h.x + v.y)/20.;        \t//pressure divergence according to current speed gradient\n\t\n    float d = length(g+g-s)/s.y; \t//domain (here a circle df, for easy check)\n    \n    d>1. ? f.xy=s-s : s;           \t//wall\n    \n    // normally we need to reset speed to 0. for y, but its shortest and fun without \n    // because the emission y is affected by the neighboor flow \n    d<.02 ? f.xw=s/s : s;          \t//emit\n    f = iFrame<2 ? f-f : f.zwxy;   \t//reset\n}/**/\n\n// inverted colors with zwxy, for have visible green color, wihtout that, its not nicely visible\n\n// when i replace all xyzw channels by zwxy, \n// the simu fail. \n// i dont understand why, because, in buffer, \n// the alpha channel is not rewrited by shadertoy like in Image...\n        \n/* original 341c\n#define k(a,b) texture(iChannel0, (g+vec2(a,b))/s).zwxy\nvoid mainImage( out vec4 f, vec2 g )\n{\n\tvec2 s = iResolution.xy;\n\t\n\tvec4 \n        r = k(1,0),\t\t\t\t\t\t//right particle state\n        t = k(0,1),\t\t\t\t\t\t//top particle state\n        l = k(-1,0),\t\t\t\t\t//left particle state\n        b = k(0,-1),\t\t\t\t\t//bottom particle state\n        c = k(0,0);\t\t\t\t\t\t//current particle state\n    \n\tf = k(-c.x,-c.y);\t\t\t\t\t//last particle state\n    \n    f.x += r.z - l.z;\t\t\t\t\t//particle pos affected by current pressure gradient x\n    f.y += t.z - b.z;\t\t\t\t\t//particle pos affected by current pressure gradient y\n    \n    f.z = \t\t\t\t\t\t\t\t//pressure\n        (r + t + l + b).z/4. - \t\t\t//pressure diffusion\n        ((l-r).x + (b-t).y)/20.;\t\t//pressure divergence according to current speed gradient\n\t\n    float d = length((g+g-s)/s.y);\t\t//domain (here a circle df, for easy check)\n    \n    if (d > 1.) f.xy *= 0.;\t\t\t\t//wall\n    \n    // normally we need to reset speed to 0. for y, but its shortest and fun without \n    // because the emission y is affected by the neighboor flow :)\n    if (d < .02) f.xw = vec2(1,1);\t\t//emit\n\tif (iFrame < 2) f *= 0.;\t\t\t//reset\n\t\n\tf = f.zwxy;\n}/**/\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}