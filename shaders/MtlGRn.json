{
    "Shader": {
        "info": {
            "date": "1418123891",
            "description": "Morphing bokeh shape sample taps for depth of field.\n\nReference: http://www.crytek.com/download/Sousa_Graphics_Gems_CryENGINE3.pdf on slide 36\n\nNEW: Now with new fine sample tap count control",
            "flags": 0,
            "hasliked": 0,
            "id": "MtlGRn",
            "likes": 40,
            "name": "Morphing bokeh shape sample taps",
            "published": 3,
            "tags": [
                "dof",
                "depthoffield",
                "morph",
                "bokehs"
            ],
            "usePreview": 0,
            "username": "BeRo",
            "viewed": 3279
        },
        "renderpass": [
            {
                "code": "\n// Reference: http://www.crytek.com/download/Sousa_Graphics_Gems_CryENGINE3.pdf on slide 36\n// Implemented as GLSL example by Benjamin 'BeRo' Rosseaux - CC0\n\n// NEW: Now with new fine sample tap count control\n\nconst float PI = 3.14159265359;\n\n#define NEW_FINE_SAMPLE_TAP_COUNT_CONTROL    \nconst float COUNT_SAMPLES = 17.0 * 17.0;       // 17^2 for to match the old code\n\n// o = tap sample xy, f = f-factor, n = diaphragm shape ngon, phiShutterMax = max. lens shutter rotation \nvec2 getBokehTapSampleCoord(const in vec2 o, const in float f, const float n, const in float phiShutterMax){\n    vec2 ab = (o * 2.0) - vec2(1.0);    \n    vec2 phir = ((ab.x * ab.x) > (ab.y * ab.y)) ? vec2((abs(ab.x) > 1e-8) ? ((PI * 0.25) * (ab.y / ab.x)) : 0.0, ab.x) : vec2((abs(ab.y) > 1e-8) ? ((PI * 0.5) - ((PI * 0.25) * (ab.x / ab.y))) : 0.0, ab.y); \n    phir.x += f * phiShutterMax;\n   \tphir.y *= (f > 0.0) ? pow((cos(PI / n) / cos(phir.x - ((2.0 * (PI / n)) * floor(((n * phir.x) + PI) / (2.0 * PI))))), f) : 1.0;\n    return vec2(cos(phir.x), sin(phir.x)) * phir.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \n    // should for real usage: (fstop - fstopmin) / (fstopmax - fstopmin)\n    float f = (sin(iTime) * 0.5) + 0.5; \n    \n    // Diaphragm shape structure: 4.0 = box, 5.0 = pentagon, 6.0 = hexagon, 7.0 = heptagon, 8.0 = octagon etc.\n    float ngon = 6.0; // 6.0 because I like hexagons :-) \n    \n\tvec2 coord = ((fragCoord.xy / iResolution.xy) - vec2(0.5)) * 4.0 * vec2(1.0, iResolution.y /  iResolution.x);\n    float v = 0.0;\n#ifdef NEW_FINE_SAMPLE_TAP_COUNT_CONTROL    \n    const float width = floor(sqrt(COUNT_SAMPLES));\n    const float height = floor(COUNT_SAMPLES / width);\n    const vec2 invMax = vec2(1.0) / (vec2(width, height) - vec2(1.0));  \n    for(float y = 0.0; y < height; y++){\n    \tfor(float x = 0.0; x < width; x++){\n            vec2 c = getBokehTapSampleCoord(vec2(x, y) * invMax, f, ngon, PI * 0.5);\n            v = mix(1.0, v, pow(smoothstep(0.0, 0.05, length(coord - c)), 8.0));\n\t\t}\n    }    \n#else\n    for(float y = 0.0; y <= 1.0; y += 1.0 / 16.0){\n    \tfor(float x = 0.0; x <= 1.0; x += 1.0 / 16.0){\n            vec2 c = getBokehTapSampleCoord(vec2(x, y), f, ngon, PI * 0.5);\n            v = mix(1.0, v, pow(smoothstep(0.0, 0.05, length(coord - c)), 8.0));\n\t\t}\n    }\n#endif\n    \n\tfragColor = vec4(v);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}