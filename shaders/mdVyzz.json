{
    "Shader": {
        "info": {
            "date": "1697790770",
            "description": "RayMarching Primitives",
            "flags": 0,
            "hasliked": 0,
            "id": "mdVyzz",
            "likes": 4,
            "name": "_RayMarching Primitives2",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "hyrofumi",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "// Constants\n#define PI 3.1415925359\n#define MAX_STEPS 100// Mar Raymarching steps\n#define MAX_DIST 100.// Max Raymarching distance\n#define SURF_DIST .01// Surface Distance\n\n// GetDist\nfloat GetDist(vec3 p) {\n    float d=0.;\n    \n    vec3 bPos = p + vec3(0, sin(iTime * 0.25), 0);\n    bPos.xy *= Rotate(iTime * 0.25);\n    bPos.xz *= Rotate(iTime * 0.5);\n    \n    \n    d = roundBoxSDF(bPos, vec3(.5, .5, .5), .1);\n    // d = boxSDF(bPos, vec3(0.1));\n    \n    // Plane\n    float planeDist = p.y;\n    d = smoothUnionSDF(d, planeDist, smoothstep(1.,0.,p.y));\n    \n    return d;\n}\n\n// RayMarch\nfloat RayMarch(vec3 ro,vec3 rd)\n{\n    float dO=0.;//Distane Origin\n    for(int i=0;i<MAX_STEPS;i++)\n    {\n        vec3 p = ro + rd*dO;\n        float ds = GetDist(p);// ds is Distance Scene\n        dO += ds;\n        if(dO>MAX_DIST||ds<SURF_DIST)\n        break;\n    }\n    return dO;\n}\n\n// GetNormal\nvec3 GetNormal(vec3 p) { \n  float d = GetDist(p); // Distance\n  vec2 e = vec2(.01,0); // Epsilon\n \n  vec3 n = d - vec3(\n    GetDist( p - e.xyy),  // e.xyy is the same as vec3(.01,0,0).\n    GetDist( p - e.yxy),\n    GetDist( p - e.yyx));\n \n  return normalize(n);\n}\n \n // GetLight\nfloat GetLight(vec3 p) { \n  // Directional light\n  vec3 lightPos = vec3(5.*sin(iTime),5.,5.0*cos(iTime)); // Light Position\n  vec3 l = normalize(lightPos - p); // Light Vector\n  vec3 n = GetNormal(p); // Normal Vector\n   \n  float dif = dot(n, l); // Diffuse light\n  dif = clamp(dif, 0., 1.); // Clamp so it doesnt go below 0\n \n  // Shadows\n  float d = RayMarch(p+n*SURF_DIST*2., l); \n \n  if(d<length(lightPos-p)) dif *= .1;\n  return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = (2.*fragCoord.xy-iResolution.xy)/iResolution.x;\n\n    vec3 ro = vec3(0, 1, -3.5);// Ray Origin/Camera\n    vec3 rd = normalize(vec3(uv2 ,1));// Ray Direction\n    \n    float d = RayMarch(ro,rd);// Distance\n    \n    vec3 p = ro + rd * d;\n    float dif = GetLight(p); // Diffuse lighting\n\n    vec3 color = vec3(dif);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Round Box - exact\nfloat roundBoxSDF( vec3 p, vec3 b, float r ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n// Box - exact \nfloat boxSDF( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nmat2 Rotate(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\n/////////////////////////////\n// Smooth blending operators\n/////////////////////////////\n \nfloat smoothIntersectSDF(float distA, float distB, float k ) {\n  float h = clamp(0.5 - 0.5*(distA-distB)/k, 0., 1.);\n  return mix(distA, distB, h ) + k*h*(1.-h); \n}\n \nfloat smoothUnionSDF(float distA, float distB, float k ) {\n  float h = clamp(0.5 + 0.5*(distA-distB)/k, 0., 1.);\n  return mix(distA, distB, h) - k*h*(1.-h); \n}\n \nfloat smoothDifferenceSDF(float distA, float distB, float k) {\n  float h = clamp(0.5 - 0.5*(distA+distB)/k, 0., 1.);\n  return mix(distA, -distB, h ) + k*h*(1.-h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}