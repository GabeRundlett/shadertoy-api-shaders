{
    "Shader": {
        "info": {
            "date": "1462669842",
            "description": "Dancing Paint 6",
            "flags": 36,
            "hasliked": 0,
            "id": "4sGSRh",
            "likes": 2,
            "name": "Dancing Paint 6",
            "published": 3,
            "tags": [
                "dancingpaint6"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 807
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 sample = texture(iChannel0, uv);\n    fragColor = sample; return;\n    fragColor = vec4(sample.a); return;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-----------------SETTINGS-----------------\n#define TIMES_DETAILED (1.0)\n//#define TIMES_DETAILED (5.0+sin(time*PI*1.0)*.1)\n\n//-----------------USEFUL-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS (2.0/max(iResolution.x, iResolution.y))\n\n#define time ((saw(float(__LINE__))+.5)*(iTime/PI+12345.12345))\n#define saw(x) (acos(cos(x))/PI)\n#define sphereN(uv) (normalize(vec3((uv).xy, sqrt(clamp(1.0-length((uv)), 0.0, 1.0)))))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n//-----------------IMAGINARY-----------------\n\nvec2 cmul(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);\n}\n\n//-----------------SIMPLEX-----------------\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    \n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    vec4 w, d;\n    \n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    w = max(0.6 - w, 0.0);\n    \n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    w *= w;\n    w *= w;\n    d *= w;\n    \n    return dot(d, vec4(52.0));\n}\n\n//-----------------RENDERING-----------------\n\nfloat seedling;\nfloat zoom;\n\nvec2 mobius(vec2 uv)\n{\n\tvec2 a = saw(seedling*vec2(1.01234*PI, GR/E*1.01*PI))*.25+.25;\n\tvec2 b = sin(seedling*vec2(1.0123*PI, GR/E*1.012*PI));\n\tvec2 c = saw(seedling*vec2(1.012*PI, GR/E*1.0123*PI))*.25+.25;\n\tvec2 d = sin(seedling*vec2(1.01*PI, GR/E*1.01234*PI));\n\treturn cdiv(cmul(uv, a) + b, cmul(uv, c) + d);\n}\n\nvec2 map(vec2 uv)\n{\n    return saw(mobius(zoom*(uv*2.0-1.0))*2.0*PI);\n    zoom = 1.0;\n}\n\nvec2 iterate(vec2 uv, vec2 dxdy, out float magnification)\n{\n    vec2 a = uv+vec2(0.0, \t\t0.0);\n    vec2 b = uv+vec2(dxdy.x, \t0.0);\n    vec2 c = uv+vec2(dxdy.x, \tdxdy.y);\n    vec2 d = uv+vec2(0.0, \t\tdxdy.y);//((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n\n    vec2 ma = map(a);\n    vec2 mb = map(b);\n    vec2 mc = map(c);\n    vec2 md = map(d);\n    \n    float da = length(mb-ma);\n    float db = length(mc-mb);\n    float dc = length(md-mc);\n    float dd = length(ma-md);\n    \n\tfloat stretch = max(max(max(da/dxdy.x,db/dxdy.y),dc/dxdy.x),dd/dxdy.y);\n    \n    magnification = stretch;\n    \n    return map(uv);\n}\n\nfloat lowAverage()\n{\n    const int iters = 32;\n    float sum = 0.0;\n    \n    float last = length(texture(iChannel0, vec2(0.0)));\n    float next;\n    for(int i = 1; i < iters; i++)\n    {\n        next = length(texture(iChannel0, vec2(float(i)/float(iters), 0.0)).r);\n        sum += last;//pow(abs(last-next), 1.0);\n        last = next;\n    }\n    return sum/float(iters);\n}\nvec2 spiral(vec2 uv)\n{\n    float turns = 2.0+saw(seedling*1.1234)*4.0;\n    float r = pow(log(length(uv)+1.), 1.175);\n    float theta = atan(uv.y, uv.x)*turns-r*PI;\n    return vec2(saw(r*PI+seedling*1.12345), saw(theta+seedling*1.123456));\n}\n    /*\n    float scale = 2.0*PI;\n    uv *= scale;\n    uv -= scale/2.0;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv += vec2(cos(iTime*.234), sin(iTime*.345))*1.0;\n    uv = spiral(uv);\n    */\nvec2 SinCos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\n\nvec2 rotatez( const in vec2 vPos, const in vec2 vSinCos )\n{\n\treturn vPos.xy * mat2(vSinCos.yx, -vSinCos.x, vSinCos.y);\n}\n\nvec2 rotatez( const in vec2 vPos, const in float fAngle )\n{\n\treturn rotatez( vPos, SinCos(fAngle) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y/iResolution.x;\n   \n    vec2 uv = fragCoord.xy/iResolution.xy;\n  \tvec4 sample = texture(iChannel1, fragCoord.xy/iResolution.xy);\n    \n    float height = lowAverage();\n    \n    zoom = (5.5+height*20.0);\n    \n    \n   \tconst int max_i =32;\n    int last_i;\n    float stretch = 1.0;\n    float ifs = 1.0;\n    float depth = 0.0;\n    float magnification;\n    \n    float total = 0.0;\n    \n    uv = rotatez(uv*2.0-1.0, height*4.0*PI+time)*.5+.5;\n    seedling = height*2.0*PI-time;\n    \n    for(int i = 0; i < max_i; i++)\n    {\n        last_i = i;\n    \tfloat sound = height-texture(iChannel0, uv).r;\n        seedling += fract(float(i)*123456.123456)+(1.0-sound*height)/PI*float(i+1)/float(max_i);\n        \n        vec2 next = iterate(uv, .5/iResolution.xy, magnification);\n        \n        //omg so platform dependent... pls help fix:\n        float weight = smoothstep(0.0, 0.125, ifs);\n        \n        ifs *= smoothstep(0.0, 1.0/TIMES_DETAILED, sqrt(1.0/(1.0+magnification)));\n        \n        total += ifs;\n        \n        uv = next*weight+uv*(1.0-weight);\n        float delta = sphereN(uv*2.0-1.0).z*ifs;\n        depth += 1.0-delta;\n        \n\t\tif(ifs <= 1.0E-3)\n            break;\n        zoom = 1.0;\n        //if(mod(iTime, float(max_i))-float(i) < 0.0) break;\n    }\n    \n    \n    float sound = texture(iChannel0, saw(uv*PI+fragCoord.xy/iResolution.xy*PI+time*PI)).r;\n    //fragColor = vec4(vec3(sound), 1.0);return;\n    \n    float ifsPowed = pow(ifs, 1.0/float(last_i+1));\n    \n    if(ifsPowed > .75)\n    {\n        fragColor = vec4(ifsPowed);// = 0.0;\n        return;\n    }\n    else if(ifsPowed > .25)\n    {\n        fragColor = vec4(sample.rgb, ifsPowed);// = 0.0;\n        return;\n    }\n    \n    fragColor = vec4(uv, 0.0, 1.0);\n\n    //depth /= float(max_i);\n    float shift = time*PI*2.0;\n\n    float stripes = depth*1.0+sound;\n    float black = smoothstep(0.0, .25, saw(stripes-shift));\n    float white = smoothstep(0.75, 1.0, saw(stripes-shift)+sound*height/2.0);\n\n\n    vec3 final = (\n        vec3(saw(stripes*PI*2.0+shift),\n             saw(4.0*PI/3.0+stripes*PI*2.0+shift),\n             saw(2.0*PI/3.0+stripes*PI*2.0+shift)\n            )\n    )*black\n        +white;\n\n    fragColor = vec4(vec3(ifs), 1.0);\n\n    fragColor = vec4(saw((depth)));\n    fragColor = vec4(final+sound, 1.0)*smoothstep(0.0, .1, (height));\n    fragColor = vec4(final, 1.0)*sound+sample*(1.0-height);\n    fragColor.a = ifsPowed;\n    \n    //fragColor = vec4(simplex3d(vec3(fragCoord.xy/iResolution.xy, time)));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//-----------------USEFUL-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n#define time ((saw(float(__LINE__))+.5)*(iTime/PI+12345.12345))\n#define saw(x) (acos(cos(x))/PI)\n\n//-----------------RENDER-----------------\n\nvec2 spiral(vec2 uv)\n{\n    float turns = 2.0;//+saw(time*1.1234)*4.0;\n    float r = pow(log(length(uv)+1.), 1.175);\n    float theta = atan(uv.y, uv.x)*turns-r*PI;\n    return vec2(saw(r*PI+iTime), saw(theta));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec4 sample0 = texture(iChannel0, uv0);\n    \n    vec2 uv = uv0;\n    \n    float scale = 2.0*PI;\n    uv *= scale;\n    uv -= scale/2.0;\n    uv = spiral(uv)*2.0-1.0;\n    uv = spiral(uv)*2.0-1.0;\n    \n    vec4 sample = texture(iChannel0, uv0+uv/iResolution.xy*16.0*sample0.a);\n    \n    fragColor = (sample)*sample0.a+sample0*(1.0-sample0.a);\n    fragColor.rgb -= 1.0/255.0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}