{
    "Shader": {
        "info": {
            "date": "1716849222",
            "description": "Golfing down code-golfed \"code-golfing\"",
            "flags": 0,
            "hasliked": 0,
            "id": "lXt3zf",
            "likes": 11,
            "name": "code golfing [146 chars]",
            "published": 3,
            "tags": [
                "alphabet",
                "code",
                "challenge",
                "golf",
                "characters",
                "golfing",
                "shortfun"
            ],
            "usePreview": 1,
            "username": "kishimisu",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "/* As a tiny challenge I tried to write a shader that displays \n   \"Code Golfing\" using the least amount of characters.\n \n   Can you come up with a shorter version ? ;)\n\n   [248 -> 146 chars] thanks to \n       \n       @SnoopethDuckDuck, @shadertoyjiang, @timestamp & @ukeshet !\n*/\n\n\n\nvoid mainImage(out vec4 O, vec2 u)\n{         \n     u*=12./iResolution.x;\n     O = texture(iChannel0,\n                 ( vec2((u.x>4.?1496105998:8931)>>4*int(u)&15, 9) + u )/16.\n         ).r * vec4(u.y<1.);\n}\n\n\n\n\n\n/* === [148 chars] ===\n\nvoid mainImage(out vec4 O, vec2 u)\n{         \n    O = texture(iChannel0,\n                (vec2( int[](7,2,6,6,0,6,13,9,2,4,8,0)\n                            [int(u *= 12. / iResolution.x)] - 4, \n                      9) \n                 + u)/16.\n                ).r\n      * vec4(u.y < 1.);\n}\n\n\n=== [188 chars] ===\n\nvoid mainImage(out vec4 O, vec2 u)\n{\n    u /= iResolution.x * .07; \n    \n    int k = int(u.x),\n        i = int[](60,0,12,1,2,28,4,12,9,3,6,11,4,60)[k]+67;\n        \n    O = texture(iChannel0, (u+vec2(i%16-k, 15-i/16))/16.).rrrr * step(u.y,1.);\n}\n\n\n/* === [199 chars] ===\n\n#define _(i) u.x--;           \\\n        length(u - .5) < .5 ? \\\n        O += texture(iChannel0, (u + vec2(i,9+i/16)) / 16.).r : O;\n\nvoid mainImage(out vec4 O, vec2 u) {\n    u /= iResolution.x * .07;\n    O *= 0.;\n    \n  //  C   O    D   E   _    G   O    L    F   I   N    G !\n    _(3)_(15)_(4)_(5)_(31)_(7)_(15)_(12)_(6)_(9)_(14)_(7)\n}\n\n\n/* === [248 chars] === (original)\n\n#define _ ); u.x--; O += c(u,182+\n\nfloat c(vec2 u, int i) { \n    return texture(iChannel0, (u + vec2(i%16, i/16)) / 16.).r \n    * (u = 1.-step(.5, abs(u-.5))).x * u.y;\n}\n\nvoid mainImage(out vec4 O, vec2 u) {\n    u /= iResolution.x * .07;\n    \n    (O *= 0. _ -3 _ 9 _ -2 _ -1 _ -7 _ 1 _ 9 _ 6 _ 0 _ 3 _ 8 _ 1);\n}*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}