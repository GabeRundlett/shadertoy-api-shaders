{
    "Shader": {
        "info": {
            "date": "1700480201",
            "description": "quad blur fx",
            "flags": 32,
            "hasliked": 0,
            "id": "dlKcWR",
            "likes": 0,
            "name": "quad blur fx",
            "published": 3,
            "tags": [
                "blur"
            ],
            "usePreview": 0,
            "username": "zyc",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define progress (fract(0.4*iTime))\n#define u_Strength 0.1\n\nfloat customStep(float edge0, float edge1, float value) {\n    return clamp((value - edge0) / (edge1 - edge0), 0.0, 1.0);\n}\n\nfloat getScale(float p) {\n    return customStep(1.0, 0.0, p);\n}\n\nvec4 dirBlur(sampler2D inputTexture, vec2 uv, vec2 dir, float p)\n{\n    float sigma = 7.0;\n    float weight = 1.0;\n    float u_Size = 0.41;\n    float u_Bright = 3.8;\n    \n    float u_SizeScale = getScale(p);\n    \n    vec4 resColor = texture(inputTexture, uv) * weight;\n    float sumWeight = weight;\n    vec4 maxColor = resColor;\n    float curWeight = 1.0;\n    float delay = 0.9;\n    float delayWight = curWeight;\n    for (int i = 1; i <= 16; ++i)\n    {\n        weight = 1.0;\n        delayWight = delay * delayWight;\n        vec2 tmpUV = uv + dir * float(i) * u_Size * u_SizeScale;\n        vec4 a = texture(inputTexture, tmpUV) * weight;\n        tmpUV = uv - dir * float(i) * u_Size * u_SizeScale;\n        vec4 b = texture(inputTexture, tmpUV);\n        resColor += a + b;\n        vec4 c = max(a, b);\n        maxColor = max(c, maxColor);\n        sumWeight += 2.0 * weight;\n    }\n    \n    resColor /= sumWeight;\n    vec4 color = mix(resColor, maxColor, clamp(resColor * u_Bright, 0.0, 1.0));\n    resColor.rgb = color.rgb;\n    return resColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define PI 3.1415926\n#define GOLDEN_ANGLE 2.39996323\n\n#define u_Angle 45.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float theta = u_Angle * PI / 180.0;\n    vec2 rect = vec2(min(720.0, 720.0 * iResolution.x / iResolution.y), min(720.0, 720.0 * iResolution.y / iResolution.x));\n    vec2 dir = vec2(cos(theta), sin(theta)) / rect;\n    vec4 color = dirBlur(iChannel0, uv, dir, progress);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926\n#define GOLDEN_ANGLE 2.39996323\n\n#define u_Angle -45.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float theta = u_Angle * PI / 180.0;\n    vec2 rect = vec2(min(720.0, 720.0 * iResolution.x / iResolution.y), min(720.0, 720.0 * iResolution.y / iResolution.x));\n    vec2 dir = vec2(cos(theta), sin(theta)) / rect;\n    vec4 color = dirBlur(iChannel0, uv, dir, progress);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}