{
    "Shader": {
        "info": {
            "date": "1692954965",
            "description": "A soft blooming filter that try to avoid washing out the original color.\nLeft: ordinary blooming\nRight: soft blooming",
            "flags": 32,
            "hasliked": 0,
            "id": "DtlfD4",
            "likes": 1,
            "name": "Soft Blooming",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "fast",
                "bloom",
                "trick"
            ],
            "usePreview": 0,
            "username": "ming",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Trick: take one single texture sample at the corner of a given texel, right where it \n// meets three of its neighbors, so that the bilinear filtering hardware averages those\n// four texels for you. This basically lets you downsample or box-blur the texture\n// without fetching and averaging the four texels by hand.\n//\n// This shader shows the technique by blurring an image repeatedly with only ONE texture\n// sample.\n//\n// A more advanced use of this for gaussian blurs here: https://www.shadertoy.com/view/Xd33Rf\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 img = CREATE_TEXTURE;\n    \n    \n    vec4 bloom = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n    \n    if(fragCoord.x > iResolution.x / 2.0)\n    {\n        float bloom_lum = dot(vec4(0.2126, 0.7152, 0.0722, 0), bloom);\n        img = mix(img, bloom, bloom_lum);\n    }\n    else\n    {\n        img = img + bloom;\n    }\n    \n    // output and apply gamma correction\n    if(abs(fragCoord.x - iResolution.x / 2.0) < 2.0)\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    else\n        fragColor = pow(img, vec4(1.0 / 2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Trick: take one single texture sample at the corner of a given texel, right where it \n// meets three of its neighbors, so that the bilinear filtering hardware averages those\n// four texels for you. This basically lets you downsample or box-blur the texture\n// without fetching and averaging the four texels by hand.\n//\n// This shader shows the technique by blurring an image repeatedly with only ONE texture\n// sample.\n//\n// A more advanced use of this for gaussian blurs here: https://www.shadertoy.com/view/Xd33Rf\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // blur    \n    vec2 s = vec2(float(iFrame&1))-0.5;             // generate -0.5 or +0.5 alternativelly\n    //vec2 s = vec2(iFrame&1,(iFrame>>1)&1)-0.5;      // touch four corners alternativelly\n    fragColor = textureLod( iChannel0, (fragCoord+s) / iResolution.xy, 0.0 );\n\n    // initial image, it seems that we need to wait for a few frames for image loading\n    if( iFrame<10 ) \n    {\n        vec4 img = CREATE_TEXTURE;\n        \n        // assume we are storing linear in BufferA\n        fragColor = img;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define LOAD_IMAGE (textureLod(iChannel1, fragCoord.xy/(iResolution.xy*vec2(3.2, 1.0)), 0.0))\n\n#define CREATE_TEXTURE pow(LOAD_IMAGE, vec4(2.2))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}