{
    "Shader": {
        "info": {
            "date": "1717473209",
            "description": "Read comment in shader. Look around with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "XXyGWR",
            "likes": 24,
            "name": "Shrek Upper Body",
            "published": 3,
            "tags": [
                "sdf",
                "modelling",
                "partial",
                "shrek"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "/*\nDesigning a shrek model while on my 100 hour shreksophone marathon.\nI am currently at 8 hours :) This is as far as I got before crashing\nmy compiler on my ancient mac. Hopefully I'll have a better computer\nsoon and be able to finish. Also, I have officially graduated as of\nJune 1, 2024!!!\n*/\n\n#define TUNIC_MATERIAL 0\n#define BELT_MATERIAL 1\n#define SKIN_MATERIAL 2\n#define EYEBALL_MATERIAL 3\n#define IRIS_MATERIAL 4\n#define PUPIL_MATERIAL 5\n#define PANTS_MATERIAL 6\n\nmat3 LookAt(in vec3 origin, in vec3 target) {\n    vec3 f = normalize(target - origin);\n    vec3 r = normalize(vec3(-f.z, 0.0, f.x));\n    vec3 u = cross(r, f);\n    return transpose(mat3(r, u, f));\n}\n\nmat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, -si, si, co);\n}\n\nfloat sabs(in float x, in float k) {\n    return sqrt(x * x + k * k);\n}\n\nfloat smin(in float a, in float b, in float k) {\n    return (a + b - sabs(a - b, k)) / 2.0;\n}\n\n// BEGIN @iq 3D SDFs selection\n// https://iquilezles.org/articles/distfunctions/\n\n// Not an exact SDF\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n  // sampling independent computations (only depend on shape)\n  float w = sqrt(r*r-h*h);\n  \n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n}\n\nfloat sdCappedCone( vec3 p, vec3 a, vec3 b, float ra, float rb )\n{\n  float rba  = rb-ra;\n  float baba = dot(b-a,b-a);\n  float papa = dot(p-a,p-a);\n  float paba = dot(p-a,b-a)/baba;\n  float x = sqrt( papa - paba*paba*baba );\n  float cax = max(0.0,x-((paba<0.5)?ra:rb));\n  float cay = abs(paba-0.5)-0.5;\n  float k = rba*rba + baba;\n  float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n  float cbx = x-ra - f*rba;\n  float cby = paba - f;\n  float s = (cbx<0.0 && cay<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(cax*cax + cay*cay*baba,\n                     cbx*cbx + cby*cby*baba) );\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat dot2(in vec3 v) { return dot(v, v); }\nfloat sdRoundCone( vec3 p, vec3 a, vec3 b, float r1, float r2 )\n{\n  // sampling independent computations (only depend on shape)\n  vec3  ba = b - a;\n  float l2 = dot(ba,ba);\n  float rr = r1 - r2;\n  float a2 = l2 - rr*rr;\n  float il2 = 1.0/l2;\n    \n  // sampling dependant computations\n  vec3 pa = p - a;\n  float y = dot(pa,ba);\n  float z = y - l2;\n  float x2 = dot2( pa*l2 - ba*y );\n  float y2 = y*y*l2;\n  float z2 = z*z*l2;\n\n  // single square root!\n  float k = sign(rr)*rr*rr*x2;\n  if( sign(z)*a2*z2>k ) return  sqrt(x2 + z2)        *il2 - r2;\n  if( sign(y)*a2*y2<k ) return  sqrt(x2 + y2)        *il2 - r1;\n                        return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\n// END @iq 3D SDFs selection\n\n// Likely not exact on interior around seams\nfloat sdEyesocket(in vec3 p, in float a, in float r, in float t) {\n    p.xy = abs(p.xy);\n    float co = cos(a), si = sin(a);\n    p.zy = mat2(co, -si, si, co) * p.zy;\n    float d = abs(length(p) - r);\n    if (p.y < 0.0) {\n        float k = p.z < 0.0 ? p.x : length(p.xz);\n        d = sqrt(dot(p, p) + r * r - 2.0 * r * k);\n    }\n\n    return d - t;\n}\n\nfloat map(in vec3 p, inout int mtlId) {\n    mtlId = TUNIC_MATERIAL;\n    p.y -= 0.5;\n\n    vec3 pBelly = p;\n    pBelly.y += 0.5;\n    float belly = sdEllipsoid(pBelly, vec3(0.9, 0.8, 0.7));\n    float chest = sdEllipsoid(p, vec3(0.8, 0.7, 0.6));\n    float torso = smin(belly, chest, 0.1);\n\n    vec3 pTunic = p;\n    pTunic.x += 0.05 * (cos(6.0 * pTunic.z) + cos(4.0 * pTunic.y));\n    pTunic.y += 1.7;\n    pTunic.y = -pTunic.y;\n    float tunicFringe = sdCutHollowSphere(pTunic, 0.925, -0.45, 0.02);\n    torso = smin(torso, tunicFringe, 0.15);\n\n    vec3 pBelt = p;\n    pBelt.z *= 1.2;\n    pBelt.y += 0.95;\n    float belt = sdBox(vec2(length(pBelt.xz) - 0.85, pBelt.y), vec2(0.0, 0.06)) - 0.01;\n    belt *= 0.9;\n    if (belt < torso) mtlId = BELT_MATERIAL;\n    torso = min(torso, belt);\n\n    vec3 pNeck = p;\n    pNeck.z -= 0.175;\n    if (dot(pNeck.xz, pNeck.xz) < 0.15 && pNeck.y > 0.0) mtlId = SKIN_MATERIAL;\n\n    vec3 pJaw = p;\n    pJaw.z -= 0.35;\n    pJaw.y -= 0.85;\n    float jaw = sdEllipsoid(pJaw, vec3(0.3, 0.3, 0.25));\n    if (jaw < torso) mtlId = SKIN_MATERIAL;\n    float body = smin(torso, jaw, 0.05);\n\n    vec3 pScalp = p;\n    pScalp.z -= 0.2;\n    pScalp.y -= 1.15;\n    float scalp = sdEllipsoid(pScalp, vec3(0.26, 0.2, 0.25));\n    if (scalp < body) mtlId = SKIN_MATERIAL;\n    body = smin(body, scalp, 0.15);\n\n    pNeck.z += 0.175;\n    pNeck.x /= 1.4;\n    pNeck.y -= 1.0;\n    float neck = sdCappedCone(pNeck, vec3(0.0, -0.5, -0.02), vec3(0.0, 0.07, 0.12), 0.2, 0.1);\n    if (neck < body) mtlId = SKIN_MATERIAL;\n    body = smin(body, neck, 0.1);\n\n    vec3 pMouth = p;\n    pMouth.z -= 0.68;\n    pMouth.y -= 0.85;\n    float mouth = sdEllipsoid(pMouth, vec3(0.25, 0.08, 0.1));\n    body = -smin(-body, mouth, 0.1);\n    pMouth.z += 0.3;\n    mouth = sdEllipsoid(pMouth, vec3(0.2, 0.15, 0.25));\n    body = smin(body, mouth, 0.05);\n\n    pMouth.z -= 0.2;\n    float mouthCavity = sdEllipsoid(pMouth, vec3(0.15, 0.03, 0.2));\n    body = -smin(-body, mouthCavity, 0.01);\n\n    vec3 pNose = p;\n    pNose.y -= 1.0;\n    pNose.z -= 0.68;\n    float nose = sdEllipsoid(pNose, vec3(0.1, 0.07, 0.07));\n    body = smin(body, nose, 0.1);\n\n    pNose.z += 0.6;\n    float noseBridge = sdCappedCone(pNose, vec3(0.0, -0.05, 0.6), vec3(0.0, 0.2, 0.35), 0.08, 0.05);\n    body = smin(body, noseBridge, 0.02);\n\n    pNose.z -= 0.6;\n    pNose.y += 0.05;\n    pNose.x = sabs(pNose.x, 0.02) - 0.04;\n    float nostrils = sdEllipsoid(pNose, vec3(0.005));\n    body = -smin(-body, nostrils, 0.05);\n\n    vec3 pEars = p;\n    pEars.x = sabs(pEars.x, 0.02) - 0.3;\n    pEars.z -= 0.2;\n    pEars.y -= 1.2;\n    float ears = sdCappedCone(pEars, vec3(0.0, 0.0, 0.0), vec3(0.18, 0.1, -0.05), 0.015, 0.065) - 0.01;\n    ears = -smin(-ears, length(pEars - vec3(0.18, 0.1, -0.05)) - 0.04, 0.02);\n    body = smin(body, ears, 0.05);\n\n    vec3 pEyesock = p;\n    pEyesock.y -= 1.2;\n    pEyesock.z -= 0.57;\n    pEyesock.x = sabs(pEyesock.x, 0.05) - 0.15;\n    float eyesockets = length(pEyesock) - 0.05;\n    body = -smin(-body, eyesockets, 0.1);\n\n    vec3 pEyes = pEyesock;\n    pEyes.z += 0.13;\n    pEyes.y += 0.05;\n    pEyes.zy = Rotate2D(0.2) * pEyes.zy;\n    float eyes = sdEyesocket(pEyes, 0.6, 0.08, 0.008);\n    body = smin(body, eyes, 0.02);\n\n    float eyeballRadius = 0.075;\n    eyes = length(pEyes) - eyeballRadius;\n    if (eyes < body) {\n        mtlId = EYEBALL_MATERIAL;\n        if (pEyes.z > 0.93 * eyeballRadius) mtlId = IRIS_MATERIAL;\n        if (pEyes.z > 0.98 * eyeballRadius) mtlId = PUPIL_MATERIAL;\n    }\n\n    body = min(body, eyes);\n\n    vec3 pEyebrows = pEyes;\n    pEyebrows.z += 0.02;\n    pEyebrows.y -= 0.1;\n    float eyebrows = sdCapsule(pEyebrows, vec3(-0.08, -0.01, 0.02), vec3(0.05, 0.0, -0.03), 0.05);\n    body = smin(body, eyebrows, 0.015);\n\n    vec3 pArms = p;\n    pArms.x = sabs(pArms.x, 0.02) - 0.68;\n    pArms.y -= 0.28;\n    vec3 elbowPos = vec3(0.3, 0.5, -0.4);\n    vec3 wristPos = vec3(-0.65, 0.7, -0.5);\n    float arms = sdRoundCone(pArms, vec3(0.0, 0.0, 0.0), elbowPos, 0.35, 0.3);\n    if (arms < body) mtlId = TUNIC_MATERIAL;\n    body = smin(body, arms, 0.1);\n\n    arms = sdRoundCone(pArms, elbowPos, wristPos, 0.3, 0.3);\n    vec3 pHands = pArms - wristPos - (wristPos - elbowPos) * 0.1;\n    arms = -smin(-arms, length(pHands) - 0.24, 0.1);\n    if (arms < body) mtlId = TUNIC_MATERIAL;\n    body = smin(body, arms, 0.02);\n\n    pHands = p;\n    pHands.z += 0.5;\n    pHands.y -= 0.95;\n    float hands = sdEllipsoid(pHands, vec3(0.4, 0.23, 0.15));\n    if (hands < body) mtlId = SKIN_MATERIAL;\n    body = min(body, hands);\n\n    return body;\n}\n\nvec3 getNormal(in vec3 p, in float d0) {\n    const float eps = 0.001;\n    int mtlId;\n    return normalize(vec3(\n        map(p + vec3(eps, 0.0, 0.0), mtlId),\n        map(p + vec3(0.0, eps, 0.0), mtlId),\n        map(p + vec3(0.0, 0.0, eps), mtlId)\n    ) - d0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 3.14;\n    vec2 co = cos(mouse), si = sin(mouse);\n    vec3 ro = vec3(-si.x * co.y, -si.y, co.x * co.y) * 5.0;\n\n    vec3 f = -normalize(ro);\n    vec3 r = normalize(vec3(-f.z, 0.0, f.x));\n    vec3 u = cross(r, f);\n    vec3 rd = normalize(r * uv.x + u * uv.y + f);\n\n    float t = 0.0, d;\n    vec3 p;\n    int mtlId;\n    bool hit;\n    for (int i = 0; i < 100; i++) {\n         p = ro + rd * t;\n         d = map(p, mtlId);\n         if (abs(d) < 0.001) {\n             hit = true;\n             break;\n         }\n\n         if (t > 25.0) break;\n         t += d;\n    }\n\n    if (hit) {\n        vec3 albedo;\n        if (mtlId == TUNIC_MATERIAL) albedo = vec3(1.0, 0.9, 0.8);\n        else if (mtlId == BELT_MATERIAL) albedo = vec3(0.5, 0.4, 0.3);\n        else if (mtlId == SKIN_MATERIAL) albedo = vec3(0.6, 0.8, 0.0);\n        else if (mtlId == EYEBALL_MATERIAL) albedo = vec3(1.0);\n        else if (mtlId == IRIS_MATERIAL) albedo = vec3(0.4, 0.5, 0.2);\n        else if (mtlId == PUPIL_MATERIAL) albedo = vec3(0.0);\n        else if (mtlId == PANTS_MATERIAL) albedo = vec3(0.5, 0.4, 0.3);\n\n        vec3 lightPos = vec3(10.0);\n        vec3 lightDir = normalize(lightPos - p);\n        vec3 nor = getNormal(p, d);\n        color += max(0.1, dot(nor, lightDir)) * albedo;\n    } else {\n        color = texture(iChannel0, rd).rgb;\n        color = pow(color, vec3(0.75));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}