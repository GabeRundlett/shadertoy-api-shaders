{
    "Shader": {
        "info": {
            "date": "1708289189",
            "description": "Auto-VJ of a Voronoi background with text overlay reactive to sound.\nAlways wanted to try Voronoi myself, thx The Art of Code for the nice yt tutorial (youtu.be/l-07BXzNdPw). \n\n- Use with music in iChannel0 -",
            "flags": 96,
            "hasliked": 0,
            "id": "XfBSWG",
            "likes": 5,
            "name": "Voronoid Message",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "music",
                "text"
            ],
            "usePreview": 1,
            "username": "QuantumSuper",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "// Voronoid Message v0.51.240218 by QuantumSuper\n// auto-vj of a voronoi background with text overlay reactive to sound\n// \n// - use with music in iChannel0 (+font texture in iChannel1 + text data  in Buffer A in iChannel2) -\n\n#define PI 3.14159265359 \n#define getDat(x,y) texelFetch( iChannel2, ivec2(x,y), 0)\nvec4 fft, ffts; //compressed frequency amplitudes\n\n\nvoid compressFft(){ //v1.2, compress sound in iChannel0 to simplified amplitude estimations by frequency-range\n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=0;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 0-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(3,8,8,5); ffts /= vec4(2,3,3,23); //normalize\n\t\n\t//for (int n=0;n++<4;) fft[n] *= 1. + .3*pow(fft[n],5.); fft = clamp(fft,.0,1.); //limiter? workaround attempt for VirtualDJ\n}\n\nvec3 getCol(float id){ //fork of v0.8, color definitions, for pairs, with color shift\n    vec3 setCol = vec3(0);\n    id = fract(id/8.)*8.;// mod(id,8.);\n         if (id< 1.) setCol = vec3( 23,123,250); //cneon blue\n    else if (id< 2.) setCol = vec3( 30, 29,215); //vw2 blue\n    else if (id< 3.) setCol = vec3(244,  0,204); //vw2 pink\n    else if (id< 4.) setCol = vec3(131, 58,187); //nordic violet\n    else if (id< 5.) setCol = vec3(  0,250,253); //vw2 light blue\n    else if (id< 6.) setCol = vec3( 66,120, 91); //matrix green 2\n    else if (id< 7.) setCol = vec3(252,157,  0); //miami orange\n    else if (id< 8.) setCol = vec3(231, 15, 20); //arena red\n    setCol *= abs(cos(.06*aTime + PI/vec3(.5,2.,4.) + ffts.xyz)); //color shift, not normalized\n    return setCol/256.;\n}\n\nvec3 tmUnreal( vec3 c){return c / (c + .155) * 1.019;} //tone map, source: https://www.shadertoy.com/view/llXyWr\n\nfloat hash21( vec2 p){ //pseudorandom generator, cf. The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\nvec2 hash22( vec2 p){ //pseudorandom generator, cf. The Art of Code on youtu.be/l-07BXzNdPw\n    vec3 a = fract(p.xyx*vec3(13.81, 741.76, 412.13));\n    a += dot( a, a+42.23);\n    return fract( a.xy*a.yz);\n}\n\nfloat getChar(float c, vec2 p) { //get char from texture, source: https://www.shadertoy.com/view/MtySzd\n    return texture( iChannel1, clamp(p,0.,1.)/16. + fract(floor(vec2( c, 15.999-float(c)/16.))/16.)).x;\n}\n\nfloat getCharSmooth( float c, vec2 p){ //\"blur\" char texture by sampling multiple points per pixel\n    vec2 shift = vec2(.01,0);\n    return (getChar( c, p+shift.xy)+getChar( c, p+shift.yx)+getChar( c, p-shift.xy)+getChar( c, p-shift.yx))/4.;  \n}\n\nfloat getText( vec2 p){ //assemble string from ascii-buffer & texture\n    float text = 0.; //string\n    float numOfChars = getDat(0,0).w; //get number of characters\n    vec2 charSize = vec2(.2+.05,.0); //shift & padding, uniform letter spacing\n    vec2 offset = vec2(.507,.516); //center offset, roughly adjusted by eye\n    float scale = (iResolution.x>iResolution.y)? iResolution.x/iResolution.y*.3 : iResolution.y/iResolution.x*.5; //character scale\n    if (numOfChars*charSize.x>.5*min(1.,iResolution.x/iResolution.y)) scale *= .5*numOfChars; //check for x overhang, adjust scale\n              \n    for (float i=.0;i<numOfChars;i++) //assemble string\n        text += getCharSmooth ( getDat(i,0).x, p*scale+offset+(numOfChars-i*2.-1.)*charSize);\n    \n    return text;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio\n\tvec3 col = vec3(0);\n    compressFft(); //initializes fft, ffts\n    \n \n    // Voronoi I\n    float minDist = 100.;   \n    float id; //cell index   \n    \n    for (float n=.0;n++<99.;){ //voronoi: naive, slow approach\n        vec2 p = sin( hash22(vec2(n))*aTime/4.+fft.x*fft.x*.2);\n        float d = length(uv-p);     \n        if (d<minDist) minDist = d, id = n;\n        //DEBcol += aaStep(d-.01); //voronoi center dots\n    }\n    \n    col += abs(1.-minDist*3.); \n    col*=col*col;\n    //DEBcol *= id/50.; // voronoi id\n   \n   \n    // Voronoi II\n    minDist=100.; //reset\n    vec2 gv = fract(uv*8.) - .5; //grid pos\n    vec2 gid = floor(uv*8.); //grid id\n    vec2 cid; //cell id\n    \n    for (float y=-1.; y<=1.; y++) //voronoi: fast approach\n        for (float x=-1.; x<=1.; x++) {\n            vec2 offs = vec2( x, y);\n            vec2 p = sin( hash22(vec2(gid+offs))*aTime/1.+fft.y)*.5 + offs;\n            float d = length( gv-p); //as the crow flies distance, organic\n            d = mix( d, abs(gv.x-p.x) + abs(gv.y-p.y), smoothstep(.9,.98,fft.x*fft.x)); //manhattan distance, crystalid\n            if (d<minDist) minDist = d, cid = gid+offs;\n        }  \n        \n    col *= minDist; \n    if (hash21(cid)<sin(aTime*PI/8.)/2.+.5) \n        col *= minDist;\n    else\n        col = mix( .0, minDist, minDist)*col;\n    //DEBcol.xz += abs(cid.xyx)/10.; // voronoi id\n \n \n    // Finalization\n    float colId = floor(aTime/32.)*2.; //color identifier\n    col = col*mix( getCol( colId+0.), getCol( colId+1.), (uv.x-uv.y)/1.) + .02*(cos(aTime/16.*PI)+1.)*getCol( colId+0.); //colorize\n     \n    uv *= .9 + pow(fft.z,6.)*.2*hash22(vec2((uv.y+13.)/uv.x,ceil(aTime*4.))).x; //dustify \n    uv *= 1. - clamp((fft.x-.9),.0,1.)*2.5*hash22(vec2(floor(uv.y/uv.x*111.),ceil(aTime*4.))).x; //godrayify   \n\n    col *= mix( 1., getText( uv*(1.6-fft.y*.3))*5. + .2*fft.w, fft.y*fft.y); //overlay text\n    \n    col = tmUnreal( col); //tone map & gamma\n\tcol += length(uv) * col; //inverse vignette\n    \n    fragColor = vec4(col,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 36089,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/dvskrecords/mindmistake"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// BUFFER A (0.1) of Voronoid Message by QuantumSuper\n// text information storage in ascii per pixel, alpha channel sets number of characters\n// \n// - use with audio in iChannel0 of Image -\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fc){\n\tvec4 c = vec4(0);\n    float t = fract(aTime/8.); //timer 0\n    float t1 = fract(aTime/32.); //timer 1\n    \n    // Define text in ascii\n    if (t>.75) {\n        c.x = iTime*11.;\n        c.w = 1.;\n    } else if (t1<.25) {  \n        if (t<.25) {\n            // BINARY \n                 if (fc.x < 1.) c.x = 66.;\n            else if (fc.x < 2.) c.x = 73.;\n            else if (fc.x < 3.) c.x = 78.;\n            else if (fc.x < 4.) c.x = 65.;\n            else if (fc.x < 5.) c.x = 82.;\n            else if (fc.x < 6.) c.x = 89.;\n            c.w = 6.;\n        } else if (t<.5) {\n            // TO\n                 if (fc.x < 1.) c.x = 84.;\n            else if (fc.x < 2.) c.x = 79.;\n            c.w = 2.;\n        } else if (t<.75) {\n            // SPECTRAL \n                 if (fc.x < 1.) c.x = 83.;\n            else if (fc.x < 2.) c.x = 80.;\n            else if (fc.x < 3.) c.x = 69.;\n            else if (fc.x < 4.) c.x = 67.;\n            else if (fc.x < 5.) c.x = 84.;\n            else if (fc.x < 6.) c.x = 82.;\n            else if (fc.x < 7.) c.x = 65.;\n            else if (fc.x < 8.) c.x = 76.;\n            c.w = 8.;\n        }\n    } else if (t1<.5) {\n            if (t<.25) {\n            // RIGID\n                 if (fc.x < 1.) c.x = 82.;\n            else if (fc.x < 2.) c.x = 73.;\n            else if (fc.x < 3.) c.x = 71.;\n            else if (fc.x < 4.) c.x = 73.;\n            else if (fc.x < 5.) c.x = 68.;\n            c.w = 5.;\n        } else if (t<.5) {\n            // TO\n                 if (fc.x < 1.) c.x = 84.;\n            else if (fc.x < 2.) c.x = 79.;\n            c.w = 2.;\n        } else if (t<.75) {\n            // ORGANIC \n                 if (fc.x < 1.) c.x = 79.;\n            else if (fc.x < 2.) c.x = 82.;\n            else if (fc.x < 3.) c.x = 71.;\n            else if (fc.x < 4.) c.x = 65.;\n            else if (fc.x < 5.) c.x = 78.;\n            else if (fc.x < 6.) c.x = 73.;\n            else if (fc.x < 7.) c.x = 67.;\n            c.w = 7.;\n        }\n    } else if (t1<.75) {  \n        if (t<.25) {\n            // POWER\n                 if (fc.x < 1.) c.x = 80.;\n            else if (fc.x < 2.) c.x = 79.;\n            else if (fc.x < 3.) c.x = 87.;\n            else if (fc.x < 4.) c.x = 69.;\n            else if (fc.x < 5.) c.x = 82.;\n            c.w = 5.;\n        } else if (t<.5) {\n            // TO\n                 if (fc.x < 1.) c.x = 84.;\n            else if (fc.x < 2.) c.x = 79.;\n            c.w = 2.;\n        } else if (t<.75) {\n            // HUMAN \n                 if (fc.x < 1.) c.x = 72.;\n            else if (fc.x < 2.) c.x = 85.;\n            else if (fc.x < 3.) c.x = 77.;\n            else if (fc.x < 4.) c.x = 65.;\n            else if (fc.x < 5.) c.x = 78.;\n            c.w = 5.;\n        }\n    } else {  \n        if (t<.25) {\n            // QUEER \n                 if (fc.x < 1.) c.x = 81.;\n            else if (fc.x < 2.) c.x = 85.;\n            else if (fc.x < 3.) c.x = 69.;\n            else if (fc.x < 4.) c.x = 69.;\n            else if (fc.x < 5.) c.x = 82.;\n            c.w = 5.;\n        } else if (t<.5) {\n            // THE\n                 if (fc.x < 1.) c.x = 84.;\n            else if (fc.x < 2.) c.x = 72.;\n            else if (fc.x < 3.) c.x = 69.;\n            c.w = 3.;\n        } else if (t<.75) {\n            // WORLD \n                 if (fc.x < 1.) c.x = 87.;\n            else if (fc.x < 2.) c.x = 79.;\n            else if (fc.x < 3.) c.x = 82.;\n            else if (fc.x < 4.) c.x = 76.;\n            else if (fc.x < 5.) c.x = 68.;\n            c.w = 5.;\n        }\n    }\n    \n\tfragColor = c;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// COMMON (0.0) of Voronoid Message by QuantumSuper \n// \n// - use with audio in iChannel0 of Image -\n\n#define aTime 150./60.*iTime",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}