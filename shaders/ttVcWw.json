{
    "Shader": {
        "info": {
            "date": "1611156110",
            "description": "Marching Squares in a pixel shader!\nMouse drag to edit.\nLeft arrow key to clear.",
            "flags": 48,
            "hasliked": 0,
            "id": "ttVcWw",
            "likes": 26,
            "name": "Marching Squares Approximation",
            "published": 3,
            "tags": [
                "grid",
                "squares",
                "reconstruction",
                "marchingsquares",
                "msquares"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 1675
        },
        "renderpass": [
            {
                "code": "/*\nMarching Squares in a pixel shader!\n\nAt least I didn't have to mess with all 256 cases of\nthe marching cubes algorithm ;)\n\nMouse drag to edit.\nLeft arrow key to clear.\n*/\n\n#define CELL_SIZE 0.2\n#define ADAPTIVE\n\n#ifdef ADAPTIVE\n// Solving for the zero isoline of the linear interpolation is much smoother\n#define zero(p1, p2, v1, v2) mix(p1, p2, v1 / (v1 - v2))\n\n#else\n// Naive averaging looks very blocky (you might find it cool though)\n#define zero(p1, p2, v1, v2) mix(p1, p2, 0.5)\n#endif\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * dot(pa, ba) / dot(ba, ba)); // No clamp needed here, the cells do it\n}\n\n// Distance field\nfloat map(in vec2 p) {\n    vec2 uv = p / 4.0 * vec2(iResolution.y / iResolution.x, 1.0) + 0.5;\n    return texture(iChannel0, uv).r; // abs(p.x - p.y) - 0.15; // Example of an ambiguous case (with CELL_SIZE = 0.3)\n}\n\nfloat msquares(in vec2 p) {\n    float ms = 1000000.0;\n\n    vec2 bl_p = floor(p / CELL_SIZE) * CELL_SIZE;\n    vec2 br_p = bl_p + vec2(CELL_SIZE, 0.0);\n    vec2 tl_p = bl_p + vec2(0.0, CELL_SIZE);\n    vec2 tr_p = bl_p + CELL_SIZE;\n\n    float bl_v = map(bl_p);\n    float br_v = map(br_p);\n    float tl_v = map(tl_p);\n    float tr_v = map(tr_p);\n\n    // Distance field cuts through top left corner\n    if ((tl_v <= 0.0 && tr_v >= 0.0 && bl_v >= 0.0 && br_v >= 0.0) || (tl_v >= 0.0 && tr_v <= 0.0 && bl_v <= 0.0 && br_v <= 0.0)) {\n        ms = min(ms, sdLine(p, zero(bl_p, tl_p, bl_v, tl_v), zero(tl_p, tr_p, tl_v, tr_v)));\n    }\n\n    // Distance field cuts through top right corner\n    if ((tr_v <= 0.0 && tl_v >= 0.0 && bl_v >= 0.0 && br_v >= 0.0) || (tr_v >= 0.0 && tl_v <= 0.0 && bl_v <= 0.0 && br_v <= 0.0)) {\n        ms = min(ms, sdLine(p, zero(tl_p, tr_p, tl_v, tr_v), zero(tr_p, br_p, tr_v, br_v)));\n    }\n\n    // Distance field cuts through bottom right corner\n    if ((br_v <= 0.0 && bl_v >= 0.0 && tl_v >= 0.0 && tr_v >= 0.0) || (br_v >= 0.0 && bl_v <= 0.0 && tl_v <= 0.0 && tr_v <= 0.0)) {\n        ms = min(ms, sdLine(p, zero(tr_p, br_p, tr_v, br_v), zero(br_p, bl_p, br_v, bl_v)));\n    }\n\n    // Distance field cuts through bottom left corner\n    if ((bl_v <= 0.0 && tl_v >= 0.0 && tr_v >= 0.0 && br_v >= 0.0) || (bl_v >= 0.0 && tl_v <= 0.0 && tr_v <= 0.0 && br_v <= 0.0)) {\n        ms = min(ms, sdLine(p, zero(br_p, bl_p, br_v, bl_v), zero(bl_p, tl_p, bl_v, tl_v)));\n    }\n\n    // Distance field cuts through top left and bottom right corner\n    if ((tl_v <= 0.0 && tr_v >= 0.0 && bl_v >= 0.0 && br_v <= 0.0)) {// || (tl_v >= 0.0 && tr_v <= 0.0 && bl_v <= 0.0 && br_v >= 0.0)) {\n        ms = min(ms, sdLine(p, zero(tl_p, bl_p, tl_v, bl_v), zero(tl_p, tr_p, tl_v, tr_v)));\n        ms = min(ms, sdLine(p, zero(bl_p, br_p, bl_v, br_v), zero(br_p, tr_p, br_v, tr_v)));\n    }\n\n    // Distance field cuts through top right and bottom left corner\n    if ((tl_v >= 0.0 && tr_v <= 0.0 && bl_v <= 0.0 && br_v >= 0.0)) {// || (tl_v <= 0.0 && tr_v >= 0.0 && bl_v >= 0.0 && br_v <= 0.0)) {\n        ms = min(ms, sdLine(p, zero(tl_p, tr_p, tl_v, tr_v), zero(tr_p, br_p, tr_v, br_v)));\n        ms = min(ms, sdLine(p, zero(tl_p, bl_p, tl_v, bl_v), zero(bl_p, br_p, bl_v, br_v)));\n    }\n\n    // Distance field cuts through the cell vertically\n    if ((bl_v <= 0.0 && br_v >= 0.0 && tl_v <= 0.0 && tr_v >= 0.0) || (bl_v >= 0.0 && br_v <= 0.0 && tl_v >= 0.0 && tr_v <= 0.0)) {\n        ms = min(ms, sdLine(p, zero(tl_p, tr_p, tl_v, tr_v), zero(bl_p, br_p, bl_v, br_v)));\n    }\n\n    // Distance field cuts through the cell horizontally\n    if ((tl_v <= 0.0 && tr_v <= 0.0 && bl_v >= 0.0 && br_v >= 0.0) || (tl_v >= 0.0 && tr_v >= 0.0 && bl_v <= 0.0 && br_v <= 0.0)) {\n        ms = min(ms, sdLine(p, zero(tl_p, bl_p, tl_v, bl_v), zero(tr_p, br_p, tr_v, br_v)));\n    }\n\n    return ms;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float unit = 8.0 / iResolution.y;\n\n    fragColor.rgb += smoothstep(unit, 0.0, msquares(uv));\n\n    float halfCellSize = 0.5 * CELL_SIZE;\n    fragColor.r += smoothstep(unit, 0.0, abs(mod(uv.x + halfCellSize, CELL_SIZE) - halfCellSize));\n    fragColor.r += smoothstep(unit, 0.0, abs(mod(uv.y + halfCellSize, CELL_SIZE) - halfCellSize));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame > 0) {\n        vec2 screenCenter = 0.5 * iResolution.xy;\n        vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n        vec2 mouse = (iMouse.xy - screenCenter) / iResolution.y;\n        fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n\n        if (iMouse.z > 0.0) {\n            vec2 toMouse = uv - mouse;\n            fragColor.r = min(fragColor.r, dot(toMouse, toMouse) - 0.005);\n        }\n    }\n\n    if (iFrame == 0 || bool(texelFetch(iChannel1, ivec2(37, 0), 0).r)) { // 37 corresponds to left arrow key\n        fragColor = vec4(1000.0, 0.0, 0.0, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}