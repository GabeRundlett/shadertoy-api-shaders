{
    "Shader": {
        "info": {
            "date": "1723927310",
            "description": "This was done while I was at evoke though not for any competition or with any deadline. I am not really that satisfied but in general I think it's a nice effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "4fXBD7",
            "likes": 0,
            "name": "Evoke25",
            "published": 3,
            "tags": [
                "clock"
            ],
            "usePreview": 0,
            "username": "Pixdigit",
            "viewed": 62
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415925359;\nconst float TAU = 6.2831852;\n\n\n// Generate 0 for cycle - pulse and during pulse it feeds a saw wave into smoothstep\nfloat wave(float x, float cycleLength, float pulseLength) {\n    float pauseLength = cycleLength - pulseLength;\n    float clampedX = mod(x, cycleLength);\n\n    if (clampedX < pauseLength) {\n        return 0.;\n    }\n    \n    float normalX = (clampedX - pauseLength) / pulseLength;\n\n    return smoothstep(0., 1., 1.-2.*abs(normalX-0.5));\n}\n\n\nmat2 rot(float deg) {\n    float c = cos(deg);\n    float s = sin(deg);\n    return mat2(c, -s, s, c);\n}\n\nfloat circle(vec2 uv, vec2 ballCenter, float radius) {\n    return distance(ballCenter, uv) - radius;\n}\n\n// 2D SDF for a segment by IQ\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nvec4 scene(vec2 uv) {\n    const float rows = 12.;\n    const float shapeDiameter = 0.08;\n\n    // Optimize by only rendering rows near this pixel\n    float rowClipStart = max(floor(length(uv) / (shapeDiameter * 1.3)) - 1., 0.);\n\n    vec4 color = vec4(0.);\n\n    for (float row = rowClipStart; row < rowClipStart + 3.; row++) {\n        float placementRadius = row * shapeDiameter * 1.3;\n        \n        if (placementRadius > iResolution.x / iResolution.y + shapeDiameter) {\n            break;\n        }\n        \n        float rowCircumference = TAU * placementRadius;\n    \n        float itemsInRow = floor(rowCircumference / shapeDiameter * 0.9);\n\n        float phaseOffset = iTime * (sin(row * 0.42 * TAU) * 0.5) + (sin(iTime+row*2.)*.5+.5)*2.;\n\n        for (float item = 0.; item < itemsInRow; item++) {\n            \n            float itemPhase = item / itemsInRow * TAU + phaseOffset;\n            vec2 itemPos = vec2(placementRadius, 0.) * rot(itemPhase); \n\n\n            float itemFactor = abs(itemsInRow / 2. - item) * 0.03;\n            float rowFactor = row * 0.3;\n            float timeFactor = -iTime;\n            float growWaveFactor = (wave(timeFactor+rowFactor+itemFactor, 4., 3.)*2.5+1.);\n            float circleRadius = shapeDiameter * 0.5 * 0.3 * growWaveFactor;\n\n            float shape = smoothstep(0.999, 1., 1.-circle(uv, itemPos, circleRadius));\n            \n            vec4 shapeColor = vec4(vec3(1.-shape), shape);\n            color = mix(color, shapeColor, shapeColor.a);\n        }\n    }\n\n\n    return color;\n}\n\n\nvec4 clock(vec2 uv) {\n    \n    vec4 color = vec4(0.);\n    const float lineThickness = 0.01;\n    \n    float border = smoothstep(0.01, 0.0, abs(circle(uv, vec2(0.), 0.52)) - lineThickness);\n    color = mix(color, vec4(1.), border);\n    \n    \n    \n    float secondDeg = floor(iDate.w) / 60. * TAU;\n    float secondArm = smoothstep(0.007, 0., sdSegment(uv, vec2(0.), vec2(sin(secondDeg), cos(secondDeg))*0.45)-lineThickness);\n    color = mix(color, vec4(0.2, 1., 1., 1.), secondArm);\n\n    float minuteDeg = floor(iDate.w / 60.) / 60. * TAU;\n    float minuteArm = smoothstep(0.007, 0., sdSegment(uv, vec2(0.), vec2(sin(minuteDeg), cos(minuteDeg))*0.35)-lineThickness);\n    color = mix(color, vec4(1., 0.5, 0.7, 1.), minuteArm);\n    \n    float hourDeg = floor(iDate.w / (60. * 60. )) / 12. * TAU;\n    float hourArm = smoothstep(0.007, 0., sdSegment(uv, vec2(0.), vec2(sin(hourDeg), cos(hourDeg))*0.25) - lineThickness);\n    color = mix(color, vec4(1., 0.7, 0.5, 1.), hourArm);\n    \n\n    return color;\n}\n\n\nvec4 background(vec2 uv) {\n    \n    float ball1 = length(uv - vec2(-.3, -.1) + vec2(sin(iTime), cos(iTime))*0.3);\n    float ball2 = length(uv - vec2(.3, -.1) + vec2(sin(iTime*1.4), cos(iTime*1.1))*0.3);\n    float ball3 = length(uv - vec2(0., .2) + vec2(sin(iTime*1.6), cos(iTime*1.2))*0.3);\n    \n\n    float r = 1. / (1.+ball1);\n    float g = 1. / (1.+ball2);\n    float b = 1. / (1.+ball3);\n\n    vec3 col = min(0.1+vec3(1.-(r + g + b)*0.001) * normalize(vec3(ball1, ball2, ball3)), vec3(1.));\n\n\n    return vec4(col, 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1 in y axis)\n    vec2 uv = ((fragCoord * 2.)/iResolution.xy - 1.)*vec2(1., iResolution.y / iResolution.x);\n\n    vec4 color = background(uv);\n\n    vec4 sceneColor = scene(uv);\n    vec4 clockColor = clock(uv);\n\n    color = mix(color, 1. - color, sceneColor.w);\n    color = mix(color, min(1. - color + 0.6, vec4(1.)), clockColor.w);\n    \n    // Output to screen\n    fragColor = vec4(color.rgb,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}