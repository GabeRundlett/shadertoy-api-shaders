{
    "Shader": {
        "info": {
            "date": "1619050649",
            "description": "an experiment with multiple neighborhoods cellular automata.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dXSzs",
            "likes": 8,
            "name": "interesting pattern 2",
            "published": 3,
            "tags": [
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\n    float val = texelFetch( iChannel0, ivec2(fragCoord), 0 ).r;  \n    fragColor = vec4( val*val,val,1.-cos(val*3.1415), 1.0 );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float radius = 15.0;\nint eyes = 3;\nfloat PI2 = 6.28318530718;\n\nfloat hash1( float n ) {\n    return fract(sin(n)*138.5453123);\n}\n\nfloat Cell( in vec2 p ) {   \n    p /= iResolution.xy;\n    p = fract(p);\n    return texture(iChannel0, p).r; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 coords = vec2( fragCoord );\n    float pixel = Cell(coords);\n    \n    float random = hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)+mod(iTime,10000.));\n\n    float valMax = 0.0;\n    float valMin = 1.0;\n    float average = 0.0;\n    \n    float fraction = PI2/float(eyes);\n    for (int i = 0; i<eyes; i++) {\n        \n        float ang = fraction*float(i)+random*PI2;\n        vec2 dir = vec2(cos(ang),sin(ang));\n        vec2 xy = coords + dir * radius;\n        \n        float value = Cell(xy);\n        \n        average += value;\n        valMax = max(valMax, value);\n        valMin = min(valMin, value);\n    }\n    average = average/(float(eyes));\n    float average2 = (valMin + valMax)*0.5;\n    \n    float diff = valMax - valMin;\n\n    float finalPix;\n\n    if (diff>0.4) {\n        //chaos\n        finalPix = pixel - (average-0.5)*0.5;\n    } else {\n        //order\n        finalPix = pixel + (average-0.5)*0.065;\n    }\n        \n    finalPix = clamp(finalPix,0.0,1.0);\n\n    //blurring\n    //finalPix = mix(finalPix,average,0.13);\n    finalPix = mix(finalPix,average2,0.035);\n    \n         \n    if( iFrame==0 ) finalPix = random;\n    \n\tfragColor = vec4(finalPix,0,0,1);\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}