{
    "Shader": {
        "info": {
            "date": "1504905621",
            "description": "Use of \"Construction Set\" shader.\nMouse enable.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtsyD4",
            "likes": 7,
            "name": "Voxel City at night",
            "published": 3,
            "tags": [
                "raytracing",
                "transparency",
                "voxel",
                "reflect"
            ],
            "usePreview": 1,
            "username": "ocb",
            "viewed": 946
        },
        "renderpass": [
            {
                "code": "// Author: ocb\n// Title: Voxels City at Night\n\n\n#define PI 3.141592653589793\n#define PIdiv2 1.57079632679489\n#define TwoPI 6.283185307179586\n#define INFINI 1000000.\n\n#define NO_TRANSPARENCY\n#define BORDER\n\n#define boxDim 100.\n#define maxBoxRnge 170\n#define maxReflRnge 70\n#define emptyChance 30.\n#define buildSize 5.\n\n// object name\n#define GND -1\n#define SKY -1000\n#define NONE 0\n#define BOX 1\n\n//Global var\nvec3 color = vec3(0.);\nvec3 lightRay = normalize(vec3(1.,.1,.2));\n\nfloat H1 (in float v) { \t\t\t\t\t\t\n    return fract(sin(v) * 437585.);\n}\nfloat H2 (in vec2 st,in float time) { \t\t\t\t\t\t\n    return fract(sin(dot(st,vec2(12.9898,8.233))) * 43758.5453123+time);\n}\nfloat H3 (in vec3 st,in float time) { \t\t\t\t\t\t\n    return fract(sin(dot(st,vec3(12.9898,8.233,17.6533107))) * 43758.5453123+time);\n}\n\nfloat sfcImpact(in float p, in float ray, in float h){\n    float t = (h-p)/ray;\n    if (t <= 0.001) t = INFINI;\n    return t;\n}\n\nvec3 skyGlow(in vec3 ray){\n    float a = dot(lightRay, ray);\n    return vec3(smoothstep(.98,1.,a));\n}\n\nvec3 setBox(in vec3 p){\n    return floor(p/boxDim + .5);\n}\n\nvec3 deBox(in vec3 box){\n    return box*boxDim;\t\t// return the center of the box\n}\nvec3 getNextBox(in vec3 p, in vec3 v, in vec3 box){\n    vec3 d = sign(v);\n\tvec3 dt = ((box+d*.5)*boxDim-p)/v;\n    float dmin = min(min(dt.x,dt.y),dt.z);\n    d *= step(dt, vec3(dmin));\n    return box+d;\n}\n\nbool checkBox(in vec3 box){\n    float h = H3(floor(box),0.)*(emptyChance + 2.);\n    return bool(int(floor( max(0.,h-emptyChance) )));\n}\n\nbool checkBox2(in vec3 box){\n    float h = H2(floor(box.xz/buildSize),0.);\n    return bool(step(min(31.,h*float(maxBoxRnge)), -box.y+20.));\n}\n\nvec4 browseBox(in vec3 box, in vec3 pos, in vec3 ray, inout int hitObj){\n    float t = INFINI, tt = INFINI;\n    float hitNbr = 0.;\n    vec3 d;\n    for(int i=0; i<maxBoxRnge;i++){\n    \tvec3 newBox = getNextBox(pos,ray,box);\n        d = box - newBox;\n        \n        if(checkBox2(newBox)) {\n            hitNbr ++;\n            color += .4/hitNbr*((dot(d,lightRay)+1.)*.3+.4)*vec3(0.08,H2(floor(newBox.xz/buildSize)*2.77665,0.)/8.+.1,0.3);\n            vec3 o = deBox(newBox+.5*d);\n            \n            if(abs(d.x) == 1.){\n                tt = (o.x-pos.x)/ray.x;\n                #ifdef BORDER\n                vec3 p = pos+tt*ray;\n                color.b += .1*(smoothstep(.4*boxDim, .5*boxDim ,abs(o.y-p.y)) + smoothstep(.4*boxDim, .5*boxDim ,abs(o.z-p.z)));\n                #endif\n            }\n            else if(abs(d.y) == 1.){\n                tt = (o.y-pos.y)/ray.y;\n                #ifdef BORDER\n                vec3 p = pos+tt*ray;\n                color.b += .1*(smoothstep(.4*boxDim, .5*boxDim ,abs(o.x-p.x)) + smoothstep(.4*boxDim, .5*boxDim ,abs(o.z-p.z)));\n                #endif\n            }\n            else{\n                tt = (o.z-pos.z)/ray.z;\n                #ifdef BORDER\n                vec3 p = pos+tt*ray;\n                color.b += .1*(smoothstep(.4*boxDim, .5*boxDim ,abs(o.x-p.x)) + smoothstep(.4*boxDim, .5*boxDim ,abs(o.y-p.y)));\n                #endif\n            }\n            \n            \n            #ifdef NO_TRANSPARENCY\n            if(bool(mod(newBox.y, 2.))){\n                hitObj = BOX;\n                t = tt;\n                break;\n            }\n            else{\n                vec3 refl = reflect(ray,d);\n                color += .4/hitNbr*skyGlow(refl);\n            }\n            #endif\n        }\n        box = newBox;\n    }\n    color = clamp(color,0.,1.);\n    return vec4(d,t);\n}\n\nbool browseBoxSimple(in vec3 box, in vec3 pos, in vec3 ray){\n    bool ret = false;\n    for(int i=0; i<maxReflRnge;i++){\n    \tbox = getNextBox(pos,ray,box);\n        if(checkBox2(box) && bool(mod(box.y, 2.)) ){\n            ret = true;\n            break;\n        }\n    }\n    return ret;\n}\n\nvec3 getCamPos(in vec3 camTarget){\n    float \trau = 100.,//*(sin(u_time/7.)+1.) + 50.,\n    \t\t//rau = 1.,\n    \t\talpha = iMouse.x/iResolution.x*4.*PI,\n    \t\ttheta = iMouse.y/iResolution.y*PI+(PI/2.0001);\n    \t\tif (iMouse.xy == vec2(0.)){\n                alpha = PIdiv2;\n                theta = 0.;\n            }\n    \n    return rau*vec3(-cos(theta)*sin(alpha),sin(theta),cos(theta)*cos(alpha))+camTarget;\n}\n\nvec3 getRay(in vec2 st, in vec3 pos, in vec3 camTarget){\n    float \tfocal = 2.;\n    vec3 ww = normalize( camTarget - pos );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0)) ) ;\n    vec3 vv = cross(uu,ww);\n\t// create view ray\n\treturn normalize( st.x*uu + st.y*vv + focal*ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy-.5;\n    st.x *= iResolution.x/iResolution.y;\n    \n    // camera def\n    vec3 camTarget = vec3(3000.*sin(iTime*.02),900.*sin(iTime*.05)-100.,2500.*cos(iTime*.03));\n    vec3 pos = getCamPos(camTarget);\n    vec3 ray = getRay(st, pos,camTarget);\n    \n\tvec3 lightRay = vec3(1.,0.,0.);\t\n\t\n    float t = INFINI;\n    vec3 norm;\n    int hitObj = SKY;\n    vec3 p = pos;\n    \n    vec3 box = setBox(p);\n\n    vec4 info = browseBox(box, p, ray, hitObj);\n    if(hitObj == SKY) color += skyGlow(ray)*min(1.,(1.-.5*texture(iChannel0,ray.yz*.5).x));\n    else{\n        norm = info.xyz;\n        t = info.w;\n        p += t*.999*ray;\n        \n        box = setBox(p);\n        vec3 refl = reflect(ray,norm);\n        if(!browseBoxSimple(box, p, refl)){\n            if(box.y == -10.) color += .2*skyGlow(refl);\n            else color += .5*skyGlow(refl);\n        }\n    }\n    \n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}