{
    "Shader": {
        "info": {
            "date": "1538844872",
            "description": "This is an experiment to create an \"AR shader\" by implementing the mainVR-function and using the WebCam texture as background. Use the [url=https://itunes.apple.com/us/app/shadertoy/id717961814]Shadertoy iOS app[/url] to view this shader.",
            "flags": 35,
            "hasliked": 0,
            "id": "lldcR8",
            "likes": 64,
            "name": "Portal - iOS AR",
            "published": 3,
            "tags": [
                "ar",
                "portal",
                "ios"
            ],
            "usePreview": 1,
            "username": "reinder",
            "viewed": 8129
        },
        "renderpass": [
            {
                "code": "// Portal - iOS AR. Created by Reinder Nijhoff 2018\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/lldcR8\n//\n// This is an experiment to create an \"AR shader\" by implementing the mainVR-function and \n// using the WebCam texture as background. If you view this shader with the Shadertoy iOS \n// app[1], you can walk around and enter the portal.\n//\n// If you don't have an iOS device (or if you don't have the app installed) you can find a\n// screen capture of the shader in action here: https://youtu.be/IzeeoD0e6Ow.\n//\n//\n// Common tab: The VR-scene is shaded using analytical area lighting. I have used code of\n//             dys129 shader \"Analytic Area Light\" to implement this technique:\n//             https://www.shadertoy.com/view/4tXSR4\n//\n// Buffer A:   Buffer A keeps track of the camera-position and calculates if the user has\n//             entered the portal.\n//\n// Image tab:  A raymarcher is used to render the VR scene.\n//\n// [1] https://itunes.apple.com/us/app/shadertoy/id717961814\n//\n\nfloat hash12( vec2 p ) {\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 x ) {\n    vec2 f = fract(x);\n    vec2 u = f*f*(3.0-2.0*f);\n    \n    vec2 p = vec2(floor(x));\n    float a = hash12( (p+vec2(0,0)) );\n\tfloat b = hash12( (p+vec2(1,0)) );\n\tfloat c = hash12( (p+vec2(0,1)) );\n\tfloat d = hash12( (p+vec2(1,1)) );\n    \n\treturn a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y;\n}\n\nconst mat2 m2 = mat2(1.6,-1.2,1.2,1.6);\n\nfloat fbm( in vec2 p, const int OCTAVES ) {\n    float a = 0.;\n    float b = .5;\n    for( int i=0; i<OCTAVES; i++ ) {\n        a += noise(p) * b;\n\t\tb *= 0.5;\n        p = m2*p;\n    }\n\treturn a;\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd, in vec4 pla ) {\n    return (-pla.w - dot(pla.xyz,ro)) / dot( pla.xyz, rd );\n}\n\nfloat map( in vec3 p ) {\n    p.xz += PILLAR_SPACING *.5;\n    float d = p.y;\n    \n    vec2 pm = mod( p.xz + vec2(PILLAR_SPACING*.5), \n                  \t\t  vec2(PILLAR_SPACING) ) - vec2(PILLAR_SPACING*.5);\n    d = min(d, max(abs(pm.x) - PILLAR_WIDTH_HALF, abs(pm.y) - PILLAR_WIDTH_HALF));\n    \n    vec2 cm = mod( p.xz,  vec2(PILLAR_SPACING) ) - vec2(PILLAR_SPACING*.5);\n    \n    d = min( d, CEILING_HEIGHT - p.y );\n    d = max( d, -PILLAR_WIDTH_HALF+PILLAR_SPACING*.5-\n            length( vec2(p.y-CEILING_HEIGHT, min(abs(cm.x),abs(cm.y)))));\n    return d;\n}\n\nvec4 tex3D( sampler2D sam, in vec3 p, in vec3 n ) {\n    p.xz = mat2(0.8,-0.6,0.6,0.8) * p.xz + .5;\n    \n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nvec3 calcNormal( in vec3 pos ) {\n    vec2 e = vec2(1.0,-1.0)*0.0001;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; \n    for( int i=0; i<24; i++ ) {\n\t\tfloat h = map( ro + rd*t );\n       \tfloat y = h*h/(2.0*ph);\n        float d = sqrt(max(0.,h*h-y*y));\n        res = min( res, 8.0*d/max(0.01,t-y) );\n        ph = h;\n        t += min(h, .2);// clamp( h, 0.02, 0.10 );\n        if( res<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor ) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.3*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 uv, in sampler2D sam, bool inside ) {\n    float portalAlpha = 0.;\n    vec3 fogColor = vec3(0.1,0.3,.5) + rd * .1;\n    float tmin = 0.01;\n    const float tmax = 21.;\n    \n    vec3 portalColor = texture(sam, uv).rgb * 1.25;\n    // Use mipmap level 9 to get an average environment color from the webcam texture\n    // used for lighting.\n    vec3 lightColor = pow(.25 + .75 * texelFetch(sam, ivec2(0), 9).rgb, vec3(2.2)) * 3.;\n      \n    // portal intersection\n    float portalDist = iPlane( ro, rd, vec4(0,0,1,-dot(PORTAL_POS,vec3(0,0,1))));\n    if (portalDist < 0.) {\n        portalDist = 5e5;\n    } else {\n        vec3 p = ro + rd * portalDist;\n        float time = iTime * .15;\n        float scale = 6.;\n        vec2 offset = vec2(fbm(p.xy * scale + time, 4), fbm(p.yx * scale - time, 4)) -.5;\n        p.xy += (fbm(offset * scale + time, 4) - .5) * .2;\n        if(all(lessThan(abs(p.xy-PORTAL_POS.xy),PORTAL_SIZE.xy))) {\n            vec2 bd = abs(p.xy-PORTAL_POS.xy) - (PORTAL_SIZE.xy -PORTAL_BORDER.xy);\n            bd = max(bd, vec2(0))/PORTAL_BORDER.xy;\n                \n\t        portalAlpha = 1.-smoothstep(0.5, 1., length(bd));\n         }\n        if(inside) {\n        \ttmin = portalDist;\n        }\n    }\n    \n    float t = tmin;\n    for( int i=0; i<48; i++ ) {\n\t    float precis = 0.001*t;\n\t    float res = map( ro+rd*t );\n        if( res<precis || t>tmax ) break;\n        t += res;\n    }\n    \n    portalAlpha = inside ? 1. - portalAlpha : portalAlpha;\n\n    vec3 col = vec3(0);\n    \n    // background scene\n    if (t < tmax && portalAlpha < 1.) {\n        vec3 p = ro + t * rd;\n        vec3 N = calcNormal(p);\n        vec3 R = reflect(rd, N);\n        vec3 tex = tex3D(iChannel2, p, N).rgb;\n\n        col = vec3( tex ) * clamp(p.y+.6, 0., 1.);\n\n        float diff = shd_polygonal(p, N, false);\n        float spc = clamp(shd_polygonal(p, R, true), 0., 1.);\n        float l = (diff * 6. + spc * dot(tex,tex));\n\n        vec3 ld = p-PORTAL_POS;\n        \n        l *= calcSoftshadow(p, -normalize(ld), .02, length(ld)-.5);\n\t\tl *= (.5+.5*calcAO(p, N));\n        col *= l * lightColor;\n    }\n    \n    if (!inside && t < portalDist) {\n        portalAlpha = 0.;\n    }\n    \n    // height based fog, see https://iquilezles.org/articles/fog\n    const float C = .075;\n    const float B = 1.1;\n    float fogAmount = clamp(C * exp(-ro.y*B) * (1.-exp( -t*rd.y*B))/rd.y, 0., 4.);\n    col = mix( col, fogColor, fogAmount);\n\n    // gamma\n    col = mix(col, sqrt(clamp(col,vec3(0),vec3(1))), .95);\n    \n\tcol = mix( col, portalColor, portalAlpha);\n    \n    return clamp(col,vec3(0),vec3(1));\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ) {\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n   \n    float a = .3 * iTime;\n    vec3 ro = vec3( 3.9*sin(a), 0.7, 3.2*cos(a) + .5 );\n    vec3 ta = vec3( 0.25, 0.6, 0.5 );\n    \n    mat3 ca = setCamera( ro, ta, 0.0 );\n    vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    vec3 col = render( ro, rd, fragCoord.xy/iResolution.xy, iChannel3, false);\n    fragColor = vec4(col,1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd ) {\n    ro += PORTAL_POS + START_OFFSET;\n    \n    vec3 col = render( ro, rd, fragCoord.xy/iResolution.xy, iChannel0, \n                      texelFetch(iChannel1, ivec2(0), 0).w > .5);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Portal - iOS AR. Created by Reinder Nijhoff 2018\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/lldcR8\n//\n// This is an experiment to create an \"AR shader\" by implementing the mainVR-function and \n// using the WebCam texture as background. If you view this shader with the Shadertoy iOS \n// app[1], you can walk around and enter the portal.\n//\n// If you don't have an iOS device (or if you don't have the app installed) you can have a \n// look at this screen capture to see the shader in action: https://youtu.be/IzeeoD0e6Ow.\n//\n\n#define PI 3.14159265359\n#define PORTAL_POS vec3(0.05,0.9, 0.02)\n#define PORTAL_SIZE vec3(0.45,0.75, 0.)\n#define START_OFFSET vec3(0.,0.4,1.2)\n#define PORTAL_BORDER vec3(0.15,0.15, 0.)\n#define PILLAR_WIDTH_HALF .15\n#define PILLAR_SPACING 2.1\n#define CEILING_HEIGHT 2.5\n\nconst int N = 30;\n\n#define NUM_VERTS 4\nconst vec3[] verts = vec3[] (\n        vec3(PORTAL_SIZE.x, -PORTAL_SIZE.y, 0) + PORTAL_POS,\n        vec3(-PORTAL_SIZE.x, -PORTAL_SIZE.y, 0) + PORTAL_POS,\n        vec3(-PORTAL_SIZE.x, PORTAL_SIZE.y, 0) + PORTAL_POS,\n        vec3(PORTAL_SIZE.x, PORTAL_SIZE.y, 0) + PORTAL_POS);\n\nfloat cosine_sine_power_integral_sum(float theta, float cos_theta, float sin_theta,\n\tint n, float a, float b) {\n\tfloat f = a*a + b*b;\n\tfloat g = a*cos_theta + b*sin_theta;\n\tfloat gsq = g*g;\n\tfloat asq = a*a;\n\tfloat h = a*sin_theta - b*cos_theta;\n\tfloat T = theta, Tsum;\n\tfloat l = g*h, l2 = b*a;\n\tint start = 0;\n\n\tTsum = T;\n\tfor (int i = 2; i <= N - 1; i += 2) {\n\t\tT = (l + l2 + f*(float(i) - 1.)*T) * (1. / float(i));\n\t\tl *= gsq;\n\t\tl2 *= asq;\n\t\tTsum += T;\n\t}\n\treturn Tsum;\n}\n\nfloat P(float theta, float a) {\n\treturn 1.0 / (1.0 + a * theta * theta);\n}\n\nfloat I_org(float theta, float c, float n) {\n\tfloat cCos = c * cos(theta);\n\treturn (pow(cCos, n + 2.) - 1.0) / (cCos * cCos - 1.);\n}\n\nfloat evaluateXW(float c, float n) {\n\treturn PI / 4. * pow(1. - pow(c - c / (n - 1.), 2.5), 0.45);\n}\n\nfloat shd_edge_contribution(vec3 v0, vec3 v1, vec3 n, int e) {\n\tfloat f;\n\tfloat cos_theta, sin_theta;\n\tvec3 q = cross(v0, v1); //ni\n\tsin_theta = length(q);\n\tq = normalize(q);\n\tcos_theta = dot(v0, v1);\n\n\tif (e == 1) {\n\t\tf = acos(cos_theta);\n\t} else {\n\t\tvec3 w;\n\t\tfloat theta;\n\t\ttheta = acos(cos_theta);\n\t\tw = cross(q, v0);\n\t\tf = cosine_sine_power_integral_sum(theta, cos_theta, sin_theta, e - 1, dot(v0, n), dot(w, n));\n\t}\n\treturn f * dot(q, n);\n}\n\n\nvoid seg_plane_intersection(vec3 v0, vec3 v1, vec3 n, out vec3 q) {\n\tvec3 vd;\n\tfloat t;\n\tvd = v1 - v0;\n\tt = -dot(v0, n) / (dot(vd, n));\n\tq = v0 + t * vd;\n}\n\nfloat shd_polygonal(vec3 p, vec3 n, bool spc) {\n\tint i, i1;\n\tint J = 0;\n\tfloat sum = 0.;\n\tvec3 ui0, ui1;\n\tvec3 vi0, vi1;\n\tint belowi0 = 1, belowi1 = 1;\n    \n\tfor (int j = 0; j < NUM_VERTS; j++) {\n\t\tvec3 u;\n\t\tu = verts[j] - p;\n\t\tif (dot(u, n) >= 0.0) {\n\t\t\tui0 = u;\n\t\t\tvi0 = u;\n\t\t\tvi0 = normalize(vi0);\n\t\t\tbelowi0 = 0;\n\t\t\tJ = j;\n\t\t\tbreak;\n\t\t}\n\t}\n\n    if (J >= NUM_VERTS) {\n        return 0.;\n    } else {\n        i1 = J;\n        for (int i = 0; i < NUM_VERTS; i++) {\n            i1++;\n            if (i1 >= NUM_VERTS) i1 = 0;\n\n            ui1 = verts[i1] - p;\n            belowi1 = int(dot(ui1, n) < 0.);\n\n            if (belowi1 == 0) {\n                vi1 = ui1;\n                vi1 = normalize(vi1);\n            }\n\n            if (belowi0 != 0 && belowi1 == 0) {\n                vec3 vinter;\n                seg_plane_intersection(ui0, ui1, n, vinter);\n                vinter = normalize(vinter + 0.01);\n                sum += shd_edge_contribution(vi0, vinter, n, 1);\n                vi0 = vinter;\n            }\n            else if (belowi0 == 0 && belowi1 != 0) {\n                seg_plane_intersection(ui0, ui1, n, vi1);\n                vi1 = normalize(vi1);\n            }\n            int K = spc ? N : 1;\n\n            if (belowi0 == 0 || belowi1 == 0) sum += shd_edge_contribution(vi0, vi1, n, K);\n\n\n            ui0 = ui1;\n            vi0 = vi1;\n            belowi0 = belowi1;\n        }\n\t}\n\treturn abs(sum) / (2. * PI);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Portal - iOS AR. Created by Reinder Nijhoff 2018\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/lldcR8\n//\n// This is an experiment to create an \"AR shader\" by implementing the mainVR-function and \n// using the WebCam texture as background. If you view this shader with the Shadertoy iOS \n// app[1], you can walk around and enter the portal.\n//\n// If you don't have an iOS device (or if you don't have the app installed) you can have a \n// look at this screen capture to see the shader in action: https://youtu.be/IzeeoD0e6Ow.\n//\n\nfloat iPlane( in vec3 ro, in vec3 rd, in vec4 pla ) {\n    return (-pla.w - dot(pla.xyz,ro)) / dot( pla.xyz, rd );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(1);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd ) {\n    ro += PORTAL_POS + START_OFFSET;\n    \n    bool inside = false;\n    vec3 oldRo = ro;\n    \n    if (iFrame > 0) {\n    \tvec4 t = texelFetch(iChannel0, ivec2(0), 0);\n        oldRo = t.xyz;\n        inside = t.w > .5;\n        \n        vec3 rd = normalize( ro - oldRo );\n        float portalDist = iPlane( oldRo, rd, vec4(0,0,1,-dot(PORTAL_POS,vec3(0,0,1))));\n\t    if (portalDist > 0. && portalDist <= length( ro - oldRo) ) {\n    \t    vec3 p = oldRo + rd * portalDist;\n        \tif(all(lessThan(abs(p.xy-PORTAL_POS.xy),PORTAL_SIZE.xy))) {\n                inside = !inside;\n            }\n        }\n    }\n    \n    fragColor = vec4(ro, inside ? 1. : 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}