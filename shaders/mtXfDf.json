{
    "Shader": {
        "info": {
            "date": "1693522953",
            "description": "Click and drag mouse to move light source.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtXfDf",
            "likes": 32,
            "name": "Screen-Space Shadows",
            "published": 3,
            "tags": [
                "shadow",
                "shadows",
                "screenspace"
            ],
            "usePreview": 1,
            "username": "Koranir",
            "viewed": 812
        },
        "renderpass": [
            {
                "code": "#define SAMPLES 16\n#define EPSILON 0.01\n#define DEPTH_REVERSED true\n#define SHADOW_INTENSITY 5.\n#define LIGHT_Z_OFFSET 0.1\n#define SOFT_SHADOWS .25\n#define DEPTH_SCALE .5\n\nfloat depth(vec2 coords)\n{\n    if(DEPTH_REVERSED) {\n        return 1. - texture(iChannel0, coords).x * DEPTH_SCALE;\n    } else {\n        return texture(iChannel0, coords).x * DEPTH_SCALE;\n    }\n}\n\n\nfloat diffuse(vec3 n, vec3 l)\n{\n\treturn max(0.0, dot(n,l));\n}\n\nvec3 normal(vec2 coords, float intensity)\n{\n    float offset = 0.0025;\n    vec3 a = vec3(coords.x - offset, 0.0, depth(vec2(coords.x - offset, coords.y)) * intensity);\n    vec3 b = vec3(coords.x + offset, 0.0, depth(vec2(coords.x + offset, coords.y)) * intensity);\n    vec3 c = vec3(0.0, coords.y + offset, depth(vec2(coords.x, coords.y + offset)) * intensity);\n    vec3 d = vec3(0.0, coords.y - offset, depth(vec2(coords.x, coords.y - offset)) * intensity);\n\n    return normalize(cross(b-a, c-d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mouseuv = iMouse.xy / iResolution.xy;\n    \n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    mouseuv.x *= aspect;\n    \n    vec3 norm = normal(uv, 0.2);\n    \n    vec3 colour;\n    \n    vec3 fragPos = vec3(uv, depth(uv));\n    vec3 lightPos = vec3(mouseuv, depth(mouseuv) - LIGHT_Z_OFFSET);\n    vec2 dir = normalize(fragPos.xy - lightPos.xy);\n    \n    float traverse_by = 1. / float(SAMPLES);\n    for(float i = 0.; i < 1.; i += traverse_by) {\n        vec3 traversedPos = fragPos + (lightPos - fragPos) * i;\n        float traversedDepth = depth(traversedPos.xy);\n        \n        float diff = traversedPos.z - traversedDepth;\n        if(diff > EPSILON) {\n            colour += vec3(diff) * traverse_by / SOFT_SHADOWS;\n        }\n    }\n    \n    colour *= SHADOW_INTENSITY;\n    fragColor.rgb = vec3(diffuse(normalize(fragPos - lightPos), norm));\n    float ambient = diffuse(norm, vec3(0.0,0.0,1.0))*0.05;\n    fragColor += ambient;\n    fragColor.rgb *= 1. - colour;\n    fragColor.a = 1.;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}