{
    "Shader": {
        "info": {
            "date": "1624787248",
            "description": "My entry from the livecode.demozoo.org release party shader jam!\n\n",
            "flags": 96,
            "hasliked": 0,
            "id": "stjGDV",
            "likes": 6,
            "name": "Subaru Impreza",
            "published": 3,
            "tags": [
                "feedback",
                "livecoding",
                "jam",
                "livecode",
                "shaderjam"
            ],
            "usePreview": 0,
            "username": "DrLuke",
            "viewed": 368
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution 4.0 International License.\n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/\n//\n// TL;DR: Do whatever you want, just credit me as \"Vj Pyree\"!\n\n// v v v v v v v v v v v v v v v v v v\n//\n// ENABLE SOUND ON BUFFER A\n// FOR AUDIO REACTIVITY\n//\n// ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define BG vec3(0.9,0.05,0.3)\n#define PI 3.14159\n\nmat3 rot3(vec3 axis, float angle) { // 3D rotation along axis\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n  return mat3(\n\t\toc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c\n\t);\n}\n\nmat2 rot2(float angle) {  // 2D rotation\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\treturn mat2(\n\t\tc, -s,\n\t\ts, c\n\t);\n}\n\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 o;\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    o = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  return o;\n}\n\nvec4 sdCappedCylinder( vec3 p, float h, float r )\n{\n  //p = p.xzy;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  vec3 c = vec3(p.x/h, p.y/r, p.z/h);\n  return vec4(min(max(d.x,d.y),0.0) + length(max(d,0.0)), c);\n}\n\nfloat sdTri( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvec3 shading(vec3 c)\n{\n  float mask = step(0.9, length(c.xz));\n  \n  // Topside\n  vec2 pe = c.xz;\n  pe.x = abs(pe.x);\n  #define EYEELLIPSE 0.4\n  pe.y *= EYEELLIPSE;\n  vec2 eyepos = vec2(0.3, 0.4*EYEELLIPSE);\n  float ffti = texture(iChannel1, vec2(0.3, 0.)).x*0.03;\n  float topmask = 1.-smoothstep(0.14+ffti, 0.15+ffti, length(pe-eyepos));\n  \n  float mouthangle = 0.55;\n  \n  float arg = atan(c.x, c.z);\n  float argfft = pow(texture(iChannel1, vec2(abs(arg)*0.3, 0.)).x*0.01, 0.5);\n  float ends = (1.-step(PI*(mouthangle+0.02), abs(arg)))*0.05;\n  float circle = step(0.65-ends-argfft, length(c.xz)) - step(0.75+ends+argfft, length(c.xz));\n  topmask = max(topmask, circle*step(PI*mouthangle, abs(arg)));\n  \n  mask = max(mask, topmask* step(0., +c.y));\n  \n  // Bottomside\n  vec2 pt = c.xz * vec2(-1.,1.) / (-ffti*40. +  .2);\n  arg = mod(atan(pt.x, pt.y)+(4.5/3.*PI), 2.*PI);\n  pt *= rot2(floor(arg/(PI*2./3.))*(PI*2./3.)-(0./3.*PI));\n  float botmask = (1.-smoothstep(-0.15, -0.14, sdTri(pt))) * smoothstep(-0.15, -0.14, sdTri(pt-vec2(0.,-sqrt(3.)*0.5)) );\n  \n  mask = max(mask, botmask* step(0., -c.y));\n  \n  \n  return vec3(mix(BG, vec3(0), mask));\n}\n\nvec4 dist(vec3 p)\n{\n  vec2 uv = vec2(gl_FragCoord.x / iResolution.xy.x, gl_FragCoord.y / iResolution.xy.y); // Regular UV\n  vec4 prevp = texture(iChannel0, uv);\n  // In the orginal bonzo shader I used an integrated FFT here to make it a bit more sound reactive\n  float ffti = 0.;//texture(texFFTIntegrated, vec2(0.3, 0.)).x; \n  mat3 rot1 = rot3(vec3(sin(iTime*0.0124*sqrt(3.) + uv.y*2.), 1, cos(iTime*0.24576*sqrt(2.))), iTime+uv.x*10. + ffti*0.4 + length(prevp*0.1));\n  mat3 rot2 = rot3(vec3(0,1,0), iTime*sqrt(2.)*0.1) * rot3(vec3(1,0,0), iTime*0.8 + ffti);\n  float mixfac = smoothstep(-0.1, 0.1, sin(iTime*0.2));\n  mat3 rot = (rot1 * (1.0 - mixfac)) + (rot2 * mixfac);\n  vec4 d = sdCappedCylinder(p*rot-vec3(0,0,0), 0.2, 0.03);\n  return d;\n}\n\nvec4 rm(vec3 ro, vec3 rd)\n{\n  float d = 0.;\n  vec3 c = vec3(0);\n  for(int i=0;i<100;i++)\n  {\n    vec3 p = ro + rd*d;\n    d += dist(p).x;\n    c = dist(p).yzw;\n    if(d>100.||d<0.01){break;}\n  }\n  return vec4(d, c);\n}\n\nfloat rm2(vec3 ro, vec3 rd)\n{\n  float d = 0.;\n  for(int i=0;i<15;i++)\n  {\n    vec3 p = ro + rd*d;\n    d += dist(p).x;\n    if(d>100.||d<0.01){break;}\n  }\n  return d;\n}\n\nvec2 uvcenterscale(vec2 uv, float scale) {\n  return (uv - 0.5) * scale + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(gl_FragCoord.x / iResolution.xy.x, gl_FragCoord.y / iResolution.xy.y); // Regular UV\n  vec2 uvc = uv - vec2(0.5);  // UV with origin in screen center\n  vec2 uv11 = uvc*2.; // Centered UV but going from -1 to 1 from edge to edge\n  vec2 uvca = uvc * vec2(iResolution.xy.x/iResolution.xy.y, 1); // Centered uv with aspect ratio compensation\n  vec2 uv11a = uv11 * vec2(iResolution.xy.x/iResolution.xy.y, 1); // Centered uv11 with aspect ratio compensation\n  \n  vec3 ro = vec3(0,sin(iTime*0.)*0.2,1); // Ray Origin/Camera\n  vec3 rd = normalize(vec3(uvca.x,uvca.y,-1.5)); // Ray Direction\n  \n  vec4 r = rm(ro,rd);  // Raymarching\n  float d = r.x;  // Distance field\n  vec3 c = r.yzw;  // Local coordinates on cylinder\n  \n  vec4 fft = texture(iChannel1, vec2(0.05, 0.));\n  float ffti = pow(fft.x, 0.5);\n  \n  // In the orginal bonzo shader I used an integrated FFT here to make it a bit more sound reactive\n  float ffts = -iTime*0.2;//texture(texFFTIntegrated, vec2(0.3, 0.)).x;\n  \n  vec4 prevp = texture(iChannel0, uv);\n  \n  vec4 prev = texture(iChannel0, uvcenterscale(uv, 0.99 - ffti*0.01) - (prevp.rb*rot2(atan(uv11.y, uv11.x)+PI*ffts))*0.003);\n  \n  vec3 cylcol = shading(c);\n  \n  float pillmask = step(10., d);\n  float pillmask_expanded = step(10., rm2(ro,rd));\n  \n  vec3 bgcol = mix(vec3(hsv2rgb(vec3(length(uv11*10.) + iTime*3., 0.7, 0.8))), BG, pillmask_expanded);\n  bgcol = mix(bgcol, prev.rgb, 0.99 * pillmask_expanded);\n  \n  \n  \n\tfragColor = vec4(mix(cylcol, bgcol, step(10., d)), 1.);\n  \n  //fragColor = vec4(pillmask, pillmask_expanded,ffti,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 27695,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/raveselekts/a1-tommy-holohan-subaru"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}