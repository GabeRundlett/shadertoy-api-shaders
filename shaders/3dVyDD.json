{
    "Shader": {
        "info": {
            "date": "1602873016",
            "description": "Tracking the deformation gradient to model solid bodies. Yeah, no actual particles here. \nSPACE - zoom in\nUse plugin to accelerate simulation\n",
            "flags": 48,
            "hasliked": 0,
            "id": "3dVyDD",
            "likes": 15,
            "name": "Neo-Hookean Field",
            "published": 3,
            "tags": [
                "particles",
                "ca"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 621
        },
        "renderpass": [
            {
                "code": "// Fork of \"Neo-Hookean 2: Electric Boogaloo\" by michael0884. https://shadertoy.com/view/tsVyWR\n// 2020-10-16 17:16:16\n\n// Fork of \"CA Neo-Hookean\" by michael0884. https://shadertoy.com/view/WdGyWR\n// 2020-10-13 18:17:06\n\n//used sources \n//https://github.com/nialltl/incremental_mpm/blob/master/Assets/2.%20MLS_MPM_NeoHookean_Multithreaded/MLS_MPM_NeoHookean_Multithreaded.cs\n//https://www.seas.upenn.edu/~cffjiang/research/mpmcourse/mpmcourse.pdf\n\n// Fork of \"CA Paste\" by michael0884. https://shadertoy.com/view/tsGczh\n// 2020-10-12 21:02:54\n\n// Fork of \"CA Molecular dynamics\" by michael0884. https://shadertoy.com/view/3s3cWr\n// 2020-10-08 22:00:15\n\n// Fork of \"Landau Ginzburg fluid\" by michael0884. https://shadertoy.com/view/WlXBDf\n// 2020-09-21 21:03:05\n\n// Fork of \"Everflow\" by michael0884. https://shadertoy.com/view/ttBcWm\n// 2020-07-19 18:18:22\n\n// Fork of \"Paint streams\" by michael0884. https://shadertoy.com/view/WtfyDj\n// 2020-07-11 22:38:47\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nconst int KEY_SPACE = 32;\nbool isKeyPressed(int KEY)\n{\n\treturn texelFetch( iChannel3, ivec2(KEY,2), 0 ).x > 0.5;\n}\n\n\n#define radius 0.85\n#define zoom 0.2\n\nfloat deformation_energy(mat2 D)\n{\n    return 2.*(D[0][0]*D[0][0] + D[1][1]*D[1][1] - 2.0);\n}\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{    \n    //zoom in\n    if(isKeyPressed(KEY_SPACE))\n    {\n    \tpos = iMouse.xy + pos*zoom - R*zoom*0.5;\n    }\n    float rho = 0.001;\n    float c = 0.;\n    float De = 0.;\n    vec2 vel = vec2(0., 0.);\n    vec2 grad = vec2(0.);\n\n    //compute the smoothed density and velocity\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = floor(pos) + vec2(i,j);\n        vec4 data = T(tpos);\n\n        vec2 X0 = 4.*DECODE(data.x) + tpos;\n        vec2 V0 = DECODE(data.y);\n        float M0 = data.z;\n        vec2 dx = X0 - pos;\n\t    mat2 D0 = mat2(T1(tpos));\n        \n        float K = GS(dx/radius)/(radius*radius);\n        rho += M0*K;\n        grad += normalize(dx)*K;\n        c += M0*K*data.w;\n        De += M0*K*abs(deformation_energy(D0));\n        vel += M0*K*V0;\n    }\n\n   grad /= rho;\n   c /= rho;\n   vel /= rho;\n   De /= rho;\n    \n   //vec3 vc = hsv2rgb(vec3(6.*atan(vel.x, vel.y)/(2.*PI), 1.0, rho*length(vel.xy)));\n   float d = smoothstep(0.2,2.,rho);\n   col.xyz = mix(vec3(0.), mix(vec3(0.02,0.05,1.0),vec3(1.0,0.05,0.02),d*c*c*c), d) + d*De*vec3(0.,0.2,1.);\n   col.xyz = sqrt(col.xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(p) texelFetch(iChannel0, ivec2(mod(p,R)), 0)\n#define T1(p) texelFetch(iChannel1, ivec2(mod(p,R)), 0)\n#define P(p) texture(iChannel0, mod(p,R)/R)\n#define C(p) texture(iChannel1, mod(p,R)/R)\n\n#define PI 3.14159265\n#define dt 0.5\n#define R iResolution.xy\n\n//useful functions\n#define GS(x) exp(-dot(x,x))\n#define GS0(x) exp(-length(x))\n#define CI(x) smoothstep(1.0, 0.9, length(x))\n#define Dir(ang) vec2(cos(ang), sin(ang))\n#define Rot(ang) mat2(cos(ang), sin(ang), -sin(ang), cos(ang))\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define velocity_averaging 0.3\n\n//squishy solid\n#define relax 0.000\n#define distribution_size 1.0\n// Lamé parameters for stress-strain relationship\n#define elastic_lambda 0.25\n#define elastic_mu 0.5\n#define incompressible_viscosity 0.17\n\n\n//viscous fluid\n/*\n#define relax 0.05\n#define distribution_size 0.98\n// Lamé parameters for stress-strain relationship\n#define elastic_lambda 0.2\n#define elastic_mu 0.1\n#define incompressible_viscousity 0.05\n*/\n\n//MD force\nfloat MF(vec2 dx, vec2 dv)\n{\n    return incompressible_viscosity*dot(dx,dv)*GS(0.5*dx);\n}\n\n\nfloat Ha(vec2 x)\n{\n    return ((x.x >= 0.)?1.:0.)*((x.y >= 0.)?1.:0.);\n}\n\nfloat Hb(vec2 x)\n{\n    return ((x.x > 0.)?1.:0.)*((x.y > 0.)?1.:0.);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\n//data packing\n#define PACK(X) ( uint(round(65534.0*clamp(0.5*X.x+0.5, 0., 1.))) + \\\n           65535u*uint(round(65534.0*clamp(0.5*X.y+0.5, 0., 1.))) )   \n               \n#define UNPACK(X) (clamp(vec2(X%65535u, X/65535u)/65534.0, 0.,1.)*2.0 - 1.0)              \n\n#define DECODE(X) UNPACK(floatBitsToUint(X))\n#define ENCODE(X) uintBitsToFloat(PACK(X))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Reintegration tracking\n\nfloat particleBox(vec2 x, vec2 s)\n{\n    return float(sdBox(x, s) < 0.);\n}\n\nfloat particleArch(vec2 x, vec2 s)\n{\n    return float(opSubtraction(sdBox(x + vec2(0, s.y*0.4), s*vec2(0.15, 0.6)), sdBox(x, s)) < 0.);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    \n    vec2 X = vec2(0);\n    vec2 V = vec2(0);\n    float M = 0.;\n    float C = 0.;\n    //basically integral over all updated neighbor distributions\n    //that fall inside of this pixel\n    //this makes the tracking conservative\n    range(i, -1, 1) range(j, -1, 1)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = T(tpos);\n       \n        vec2 X0 = DECODE(data.x) + tpos;\n    \tvec2 V0 = DECODE(data.y);\n       \n        X0 += V0*dt; //integrate position\n\n        //particle distribution size\n        float K = distribution_size;\n        \n        vec4 aabbX = vec4(max(pos - 0.5, X0 - K*0.5), min(pos + 0.5, X0 + K*0.5)); //overlap aabb\n        vec2 center = 0.5*(aabbX.xy + aabbX.zw); //center of mass\n        vec2 size = max(aabbX.zw - aabbX.xy, 0.); //only positive\n        \n        //the deposited mass into this cell\n        vec3 m = data.z*vec3(center, 1.0)*size.x*size.y/(K*K);\n        \n        //add weighted by mass\n        X += m.xy;\n        V += V0*m.z;\n      \tC += m.z*data.w;\n        //add mass\n        M += m.z;\n    }\n    \n    //normalization\n    if(M != 0.)\n    {\n        X /= M;\n        V /= M;\n        C /= M;\n    }\n    \n    //initial condition\n    if(iFrame < 1)\n    {\n        X = pos;\n        V = vec2(0.);\n        vec4 nya = texture(iChannel2, clamp(1.8*X*vec2(0.166,1.)/R, vec2(0.),vec2(0.1666, 1.0)));\n        M = particleBox(X - R*vec2(0.5,0.4), R*vec2(0.34));\n        C = nya.y*nya.w + 0.5*sin(0.1*X.x) + 0.5;\n    }\n    \n    X = X - pos;\n    U = vec4(ENCODE(X), ENCODE(V), M, C);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//deformation gradient advection and update\n\n\n//particle distribution\nvec3 PD(vec2 x, vec2 pos)\n{\n    return vec3(x, 1.0)*Ha(x - (pos - 0.5))*Hb((pos + 0.5) - x);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    \n    //deformation gradient\n   \tmat2 D = mat2(0);\n    float M = 0.;\n    \n    //basically integral over all updated neighbor distributions\n    //that fall inside of this pixel\n    //this makes the tracking conservative\n    range(i, -1, 1) range(j, -1, 1)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = T(tpos);\n       \n        vec2 X0 = DECODE(data.x) + tpos;\n    \tvec2 V0 = DECODE(data.y);\n       \tmat2 D0 = mat2(T1(tpos));\n        \n        X0 += V0*dt; //integrate position\n\n        //particle distribution size\n        float K = distribution_size;\n        \n        vec4 aabbX = vec4(max(pos - 0.5, X0 - K*0.5), min(pos + 0.5, X0 + K*0.5)); //overlap aabb\n        vec2 center = 0.5*(aabbX.xy + aabbX.zw); //center of mass\n        vec2 size = max(aabbX.zw - aabbX.xy, 0.); //only positive\n        \n        //the deposited mass into this cell\n        vec3 m = data.z*vec3(center, 1.0)*size.x*size.y/(K*K);\n        \n        //add deformation grad weighted by mass\n        D += D0*m.z;\n      \t\n        //add mass\n        M += m.z;\n    }\n    \n    //normalization\n    if(M != 0.)\n    {\n       D /= M;\n    }\n\telse D = mat2(1.0);\n    \n    //initial condition\n    if(iFrame < 1)\n    {\n        D = mat2(1.0);\n    }\n\n    U = vec4(D);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//velocity update\n\nfloat border(vec2 p)\n{\n    float bound = -sdBox(p - R*0.5, R*vec2(0.48, 0.48)); \n    float box = sdBox((p - R*vec2(0.5, 0.6)) , R*vec2(0.05, 0.01));\n    float drain = -sdBox(p - R*vec2(0.5, 0.7), R*vec2(0.0, 0.0));\n    return bound;\n}\n\n#define h 1.\nvec3 bN(vec2 p)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1./h, 0., 1./h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy)\n           + idx.xyw*border(p + dx.xy)\n           + idx.yzw*border(p + dx.yz)\n           + idx.yxw*border(p + dx.yx);\n    return vec3(normalize(r.xy), r.z + 1e-4);\n}\n\nvec2 normalize2(vec2 a)\n{\n    return all(equal(a, vec2(0.)))?vec2(0.):normalize(a);\n}\n\n\nmat2 strain(mat2 D, float M0)\n{\n    float J = abs(determinant(D)) + 0.01;\n\n    // MPM course, page 46\n    float volume = J*M0;\n\n    // useful matrices for Neo-Hookean model\n    mat2 F_T = transpose(D);\n    mat2 F_inv_T = inverse(F_T);\n    mat2 F_minus_F_inv_T = D - F_inv_T;\n\n    // MPM course equation 48\n    mat2 P_term_0 = elastic_mu * (F_minus_F_inv_T);\n    mat2 P_term_1 = elastic_lambda * log(J) * F_inv_T;\n    mat2 P = P_term_0 + P_term_1;\n\n    // equation 38, MPM course\n    mat2 stress = (1./J)* P * F_T;\n\n    return volume * stress;\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec2 uv = pos/R;\n    ivec2 p = ivec2(pos);\n        \n    vec4 data = T(pos); \n    vec2 X = DECODE(data.x) + pos;\n    vec2 V = DECODE(data.y);\n    float M = data.z;\n    float C = data.w;\n    if(M>0.0) //not vacuum\n    {\n        //Compute the force\n        vec2 Fa = vec2(0.);\n         vec2 F = vec2(0.);\n        float a = 0.;\n        float tM = 0.;\n        vec2 avgV = vec2(0.);\n        if(M > 0.1)\n        {\n            range(i, -2,2) range(j, -2, 2)\n            {\n                if(!(i == 0 && j == 0))\n                {\n                    vec2 tpos = pos + vec2(i,j);\n                    vec4 data = T(tpos);\n\n                    vec2 X0 = DECODE(data.x) + tpos;\n                    vec2 V0 = DECODE(data.y);\n                    float M0 = data.z;\n                    vec2 dx = X0 - X;\n                    vec2 dv = V0 - V;\n                    mat2 D0 = mat2(T1(tpos));\n                    float weight = GS(0.8*dx);\n                    avgV += M0*V0;\n                    tM += weight*M0;\n                    Fa += M0*M0*M*MF(dx,dv)*normalize2(dx);\n                    F += clamp(strain(D0, M0)*dx, vec2(-1.0), vec2(1.0))*weight;\n                    a += M0;\n                }\n            }\n        \n            avgV /= a;\n\n            F -= (V - avgV)*velocity_averaging;\n        }\n        if(iMouse.z > 0.)\n        {\n            vec2 dx= pos - iMouse.xy;\n            F -= 0.015*normalize2(dx)*GS(dx/80.);\n        }\n        \n       \t//gravity\n        F += 0.001*vec2(0,-1);\n        \n        //integrate velocity\n        V += (F + Fa/M)*dt;\n        \n        \n        vec3 BORD = bN(X);\n        V += (0.3 - 0.01*V)*smoothstep(0., 5., -BORD.z)*BORD.xy;\n        //velocity limit\n        float v = length(V);\n        V /= (v > 1.)?1.*v:1.;\n    }\n    \n    //save\n    X = X - pos;\n    U = vec4(ENCODE(X), ENCODE(V), M, C);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 normalize2(vec2 a)\n{\n    return all(equal(a, vec2(0.)))?vec2(0.):normalize(a);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec2 uv = pos/R;\n    ivec2 p = ivec2(pos);\n        \n    vec4 data = T(pos); \n    vec2 X = DECODE(data.x) + pos;\n    vec2 V = DECODE(data.y);\n    float M = data.z;\n    float C = data.w;\n    mat2 D = mat2(T1(pos));\n    if(M > 0.1) //not vacuum\n    {\n        //Compute the velocity gradient matrix\n        mat2 B = mat2(0.);\n        float a = 0.01;\n        range(i, -2, 2) range(j, -2, 2)\n        {\n            if(!(i == 0 && j == 0))\n            {\n                vec2 tpos = pos + vec2(i,j);\n                vec4 data = T(tpos);\n\n                vec2 X0 = DECODE(data.x) + tpos;\n                vec2 V0 = DECODE(data.y);\n                float M0 = data.z;\n                vec2 dx = X0 - X;\n                vec2 dv = V0 - V;\n                float weight = (M0+0.01)*GS(0.75*dx);\n                B += mat2(dv*dx.x,dv*dx.y)*weight;\n                a += weight;\n            }\n        }\n        B /= a;\n        \n        //density correction\n        B -= 0.005*mat2(M - 1.0);\n       \n        //integrate deformation gradient\n       \tD += dt*B*D;\n       \n        //smoothing\n        D = D*(1. - relax) + mat2(1.)*relax;\n    }\n    \n    //save\n    U = vec4(D);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}